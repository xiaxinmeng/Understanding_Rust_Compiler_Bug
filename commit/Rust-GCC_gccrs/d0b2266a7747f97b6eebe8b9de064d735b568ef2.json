{"sha": "d0b2266a7747f97b6eebe8b9de064d735b568ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiMjI2NmE3NzQ3Zjk3YjZlZWJlOGI5ZGUwNjRkNzM1YjU2OGVmMg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-24T00:32:31Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-24T00:32:31Z"}, "message": "always define HAVE_lo_sum\n\ngcc/ChangeLog:\n\n2015-05-23  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* combine.c (find_split_point): Check the value of HAVE_lo_sum\n\tinstead of if it is defined.\n\t(combine_simplify_rtx): Likewise.\n\t* lra-constraints.c (process_address_1): Likewise.\n\t* config/darwin.c: Adjust.\n\t* genconfig.c (main): Always define HAVE_lo_sum.\n\nFrom-SVN: r223619", "tree": {"sha": "0f7ebd2e79975597ab369595601f0010e6317dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f7ebd2e79975597ab369595601f0010e6317dc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b2266a7747f97b6eebe8b9de064d735b568ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b2266a7747f97b6eebe8b9de064d735b568ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b2266a7747f97b6eebe8b9de064d735b568ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b2266a7747f97b6eebe8b9de064d735b568ef2/comments", "author": null, "committer": null, "parents": [{"sha": "a63670fe10d5716e34d2078c6ab1eb7853e000c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63670fe10d5716e34d2078c6ab1eb7853e000c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a63670fe10d5716e34d2078c6ab1eb7853e000c2"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "360f01370b80943404551aad6c70eb20c8631676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b2266a7747f97b6eebe8b9de064d735b568ef2", "patch": "@@ -1,3 +1,12 @@\n+2015-05-23  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* combine.c (find_split_point): Check the value of HAVE_lo_sum\n+\tinstead of if it is defined.\n+\t(combine_simplify_rtx): Likewise.\n+\t* lra-constraints.c (process_address_1): Likewise.\n+\t* config/darwin.c: Adjust.\n+\t* genconfig.c (main): Always define HAVE_lo_sum.\n+\n 2015-05-23  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* genmatch.c (parser::parse_operation): Reject expanding operator-list inside 'for'."}, {"sha": "73d141edc0787ff36334da8816355933657b1ba0", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d0b2266a7747f97b6eebe8b9de064d735b568ef2", "patch": "@@ -4785,11 +4785,10 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n       return find_split_point (&SUBREG_REG (x), insn, false);\n \n     case MEM:\n-#ifdef HAVE_lo_sum\n       /* If we have (mem (const ..)) or (mem (symbol_ref ...)), split it\n \t using LO_SUM and HIGH.  */\n-      if (GET_CODE (XEXP (x, 0)) == CONST\n-\t  || GET_CODE (XEXP (x, 0)) == SYMBOL_REF)\n+      if (HAVE_lo_sum && (GET_CODE (XEXP (x, 0)) == CONST\n+\t\t\t  || GET_CODE (XEXP (x, 0)) == SYMBOL_REF))\n \t{\n \t  machine_mode address_mode = get_address_mode (x);\n \n@@ -4799,7 +4798,6 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n \t\t\t\t XEXP (x, 0)));\n \t  return &XEXP (XEXP (x, 0), 0);\n \t}\n-#endif\n \n       /* If we have a PLUS whose second operand is a constant and the\n \t address is not valid, perhaps will can split it up using\n@@ -5857,16 +5855,14 @@ combine_simplify_rtx (rtx x, machine_mode op0_mode, int in_dest,\n \tSUBST (XEXP (x, 0), XEXP (XEXP (x, 0), 0));\n       break;\n \n-#ifdef HAVE_lo_sum\n     case LO_SUM:\n       /* Convert (lo_sum (high FOO) FOO) to FOO.  This is necessary so we\n \t can add in an offset.  find_split_point will split this address up\n \t again if it doesn't match.  */\n-      if (GET_CODE (XEXP (x, 0)) == HIGH\n+      if (HAVE_lo_sum && GET_CODE (XEXP (x, 0)) == HIGH\n \t  && rtx_equal_p (XEXP (XEXP (x, 0), 0), XEXP (x, 1)))\n \treturn XEXP (x, 1);\n       break;\n-#endif\n \n     case PLUS:\n       /* (plus (xor (and <foo> (const_int pow2 - 1)) <c>) <-c>)"}, {"sha": "ea7eec112fb76cc050c494169a69b929724e4f76", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d0b2266a7747f97b6eebe8b9de064d735b568ef2", "patch": "@@ -149,8 +149,7 @@ int generating_for_darwin_version ;\n section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n /* While we transition to using in-tests instead of ifdef'd code.  */\n-#ifndef HAVE_lo_sum\n-#define HAVE_lo_sum 0\n+#if !HAVE_lo_sum\n #define gen_macho_high(a,b) (a)\n #define gen_macho_low(a,b,c) (a)\n #endif"}, {"sha": "a0a834a83c7065f14d9a48994ca2138ee5400fd8", "filename": "gcc/genconfig.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=d0b2266a7747f97b6eebe8b9de064d735b568ef2", "patch": "@@ -360,6 +360,8 @@ main (int argc, char **argv)\n \n   if (have_lo_sum_flag)\n     printf (\"#define HAVE_lo_sum 1\\n\");\n+  else\n+    printf (\"#define HAVE_lo_sum 0\\n\");\n \n   if (have_rotate_flag)\n     printf (\"#define HAVE_rotate 1\\n\");"}, {"sha": "a8d082022f894d8d62d3dd69ece8a8c4d9439a8a", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b2266a7747f97b6eebe8b9de064d735b568ef2/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=d0b2266a7747f97b6eebe8b9de064d735b568ef2", "patch": "@@ -2962,42 +2962,42 @@ process_address_1 (int nop, bool check_only_p,\n \t  rtx addr = *ad.inner;\n \n \t  new_reg = lra_create_new_reg (Pmode, NULL_RTX, cl, \"addr\");\n-#ifdef HAVE_lo_sum\n-\t  {\n-\t    rtx_insn *insn;\n-\t    rtx_insn *last = get_last_insn ();\n-\n-\t    /* addr => lo_sum (new_base, addr), case (2) above.  */\n-\t    insn = emit_insn (gen_rtx_SET\n-\t\t\t      (new_reg,\n-\t\t\t       gen_rtx_HIGH (Pmode, copy_rtx (addr))));\n-\t    code = recog_memoized (insn);\n-\t    if (code >= 0)\n-\t      {\n-\t\t*ad.inner = gen_rtx_LO_SUM (Pmode, new_reg, addr);\n-\t\tif (! valid_address_p (ad.mode, *ad.outer, ad.as))\n-\t\t  {\n-\t\t    /* Try to put lo_sum into register.  */\n-\t\t    insn = emit_insn (gen_rtx_SET\n-\t\t\t\t      (new_reg,\n-\t\t\t\t       gen_rtx_LO_SUM (Pmode, new_reg, addr)));\n-\t\t    code = recog_memoized (insn);\n-\t\t    if (code >= 0)\n-\t\t      {\n-\t\t\t*ad.inner = new_reg;\n-\t\t\tif (! valid_address_p (ad.mode, *ad.outer, ad.as))\n-\t\t\t  {\n-\t\t\t    *ad.inner = addr;\n-\t\t\t    code = -1;\n-\t\t\t  }\n-\t\t      }\n-\t\t    \n-\t\t  }\n-\t      }\n-\t    if (code < 0)\n-\t      delete_insns_since (last);\n-\t  }\n-#endif\n+\t  if (HAVE_lo_sum)\n+\t    {\n+\t      rtx_insn *insn;\n+\t      rtx_insn *last = get_last_insn ();\n+\n+\t      /* addr => lo_sum (new_base, addr), case (2) above.  */\n+\t      insn = emit_insn (gen_rtx_SET\n+\t\t\t\t(new_reg,\n+\t\t\t\t gen_rtx_HIGH (Pmode, copy_rtx (addr))));\n+\t      code = recog_memoized (insn);\n+\t      if (code >= 0)\n+\t\t{\n+\t\t  *ad.inner = gen_rtx_LO_SUM (Pmode, new_reg, addr);\n+\t\t  if (! valid_address_p (ad.mode, *ad.outer, ad.as))\n+\t\t    {\n+\t\t      /* Try to put lo_sum into register.  */\n+\t\t      insn = emit_insn (gen_rtx_SET\n+\t\t\t\t\t(new_reg,\n+\t\t\t\t\t gen_rtx_LO_SUM (Pmode, new_reg, addr)));\n+\t\t      code = recog_memoized (insn);\n+\t\t      if (code >= 0)\n+\t\t\t{\n+\t\t\t  *ad.inner = new_reg;\n+\t\t\t  if (! valid_address_p (ad.mode, *ad.outer, ad.as))\n+\t\t\t    {\n+\t\t\t      *ad.inner = addr;\n+\t\t\t      code = -1;\n+\t\t\t    }\n+\t\t\t}\n+\n+\t\t    }\n+\t\t}\n+\t      if (code < 0)\n+\t\tdelete_insns_since (last);\n+\t    }\n+\n \t  if (code < 0)\n \t    {\n \t      /* addr => new_base, case (2) above.  */"}]}