{"sha": "c73140776c32f78f9c7828a5cd8b930680da8b08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczMTQwNzc2YzMyZjc4ZjljNzgyOGE1Y2Q4YjkzMDY4MGRhOGIwOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-01-05T19:46:06Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-01-05T19:46:06Z"}, "message": "re PR fortran/38657 (PUBLIC/PRIVATE Common blocks)\n\n2009-01-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38657\n\t* module.c (write_common_0): Use the name of the symtree rather\n\tthan the common block, to determine if the common has been\n\twritten.\n\n2009-01-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38657\n\t* gfortran.dg/module_commons_3.f90: New test.\n\nFrom-SVN: r143090", "tree": {"sha": "3fe6065b40a6a4f61b66b6efc8ba9b66d6fb4a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe6065b40a6a4f61b66b6efc8ba9b66d6fb4a8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73140776c32f78f9c7828a5cd8b930680da8b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73140776c32f78f9c7828a5cd8b930680da8b08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73140776c32f78f9c7828a5cd8b930680da8b08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73140776c32f78f9c7828a5cd8b930680da8b08/comments", "author": null, "committer": null, "parents": [{"sha": "b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55c4f04b3ede3f0b299553e6de822e7d63d2ea5"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "ed66a73cc233365b4c2a7dc2f0a0138033c5073a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c73140776c32f78f9c7828a5cd8b930680da8b08", "patch": "@@ -1,3 +1,10 @@\n+2009-01-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38657\n+\t* module.c (write_common_0): Use the name of the symtree rather\n+\tthan the common block, to determine if the common has been\n+\twritten.\n+\n 2009-01-05  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/37159"}, {"sha": "7bbfa1274b245c819ed38e89749bb6e6a28861bb", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=c73140776c32f78f9c7828a5cd8b930680da8b08", "patch": "@@ -4337,6 +4337,7 @@ write_common_0 (gfc_symtree *st)\n {\n   gfc_common_head *p;\n   const char * name;\n+  const char * lname;\n   int flags;\n   const char *label;\n   struct written_common *w;\n@@ -4349,14 +4350,17 @@ write_common_0 (gfc_symtree *st)\n \n   /* We will write out the binding label, or the name if no label given.  */\n   name = st->n.common->name;\n+\n+  /* Use the symtree(local)name to check if the common has been written.  */ \n+  lname = st->name;\n   p = st->n.common;\n   label = p->is_bind_c ? p->binding_label : p->name;\n \n   /* Check if we've already output this common.  */\n   w = written_commons;\n   while (w)\n     {\n-      int c = strcmp (name, w->name);\n+      int c = strcmp (lname, w->name);\n       c = (c != 0 ? c : strcmp (label, w->label));\n       if (c == 0)\n \twrite_me = false;\n@@ -4384,7 +4388,7 @@ write_common_0 (gfc_symtree *st)\n \n       /* Record that we have written this common.  */\n       w = XCNEW (struct written_common);\n-      w->name = p->name;\n+      w->name = lname;\n       w->label = label;\n       gfc_insert_bbt (&written_commons, w, compare_written_commons);\n     }"}, {"sha": "b37d770a0c805807e0481f7266cc8add440473f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c73140776c32f78f9c7828a5cd8b930680da8b08", "patch": "@@ -1,3 +1,8 @@\n+2009-01-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38657\n+\t* gfortran.dg/module_commons_3.f90: New test.\n+\n 2009-01-05  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/37159"}, {"sha": "9ae6386e7a86dad994e0c15fb3fd31788f2c1152", "filename": "gcc/testsuite/gfortran.dg/module_commons_3.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_commons_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73140776c32f78f9c7828a5cd8b930680da8b08/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_commons_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_commons_3.f90?ref=c73140776c32f78f9c7828a5cd8b930680da8b08", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\r\n+!\r\n+! PR fortran/38657, in which the mixture of PRIVATE and\r\n+! COMMON in TEST4, would mess up the association with\r\n+! TESTCHAR in TEST2.\r\n+!\r\n+! Contributed by Paul Thomas <pault@gcc.gnu.org>\r\n+! From a report in clf by Chris Bradley.\r\n+!\r\n+MODULE TEST4\r\n+  PRIVATE\r\n+  CHARACTER(LEN=80) :: T1 = &\r\n+    \"Mary had a little lamb, Its fleece was white as snow;\"\r\n+  CHARACTER(LEN=80) :: T2 = &\r\n+    \"And everywhere that Mary went, The lamb was sure to go.\"\r\n+  CHARACTER(LEN=80) :: TESTCHAR\r\n+  COMMON /TESTCOMMON1/ TESTCHAR\r\n+  PUBLIC T1, T2, FOOBAR\r\n+CONTAINS\r\n+  subroutine FOOBAR (CHECK)\r\n+    CHARACTER(LEN=80) :: CHECK\r\n+    IF (TESTCHAR .NE. CHECK) CALL ABORT\r\n+  end subroutine\r\n+END MODULE TEST4\r\n+\r\n+MODULE TEST3\r\n+  CHARACTER(LEN=80) :: TESTCHAR\r\n+  COMMON /TESTCOMMON1/ TESTCHAR\r\n+END MODULE TEST3\r\n+\r\n+MODULE TEST2\r\n+  use TEST4\r\n+  USE TEST3, chr => testchar\r\n+  PRIVATE\r\n+  CHARACTER(LEN=80) :: TESTCHAR\r\n+  COMMON /TESTCOMMON1/ TESTCHAR\r\n+  PUBLIC TESTCHAR, FOO, BAR, CHR, T1, T2, FOOBAR\n+contains\n+  subroutine FOO\n+    TESTCHAR = T1\n+  end subroutine\n+  subroutine BAR (CHECK)\r\n+    CHARACTER(LEN=80) :: CHECK\n+    IF (TESTCHAR .NE. CHECK) CALL ABORT\r\n+    IF (CHR .NE. CHECK) CALL ABORT\r\n+  end subroutine\n+END MODULE TEST2\r\n+\r\n+PROGRAM TEST1\r\n+  USE TEST2\n+  call FOO\n+  call BAR (T1)\n+  TESTCHAR = T2\n+  call BAR (T2)\n+  CALL FOOBAR (T2)\r\n+END PROGRAM TEST1\r\n+! { dg-final { cleanup-modules \"TEST2 TEST3 TEST4\" } }\r"}]}