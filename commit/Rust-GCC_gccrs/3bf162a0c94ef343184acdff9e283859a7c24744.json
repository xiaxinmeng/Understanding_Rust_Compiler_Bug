{"sha": "3bf162a0c94ef343184acdff9e283859a7c24744", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JmMTYyYTBjOTRlZjM0MzE4NGFjZGZmOWUyODM4NTlhN2MyNDc0NA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gmail.com", "date": "2011-03-18T14:01:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-03-18T14:01:41Z"}, "message": "re PR middle-end/47790 (optimize_bitfield_assignment_op no longer works in 4.5.x)\n\n\tPR middle-end/47790\n\t* expr.c (optimize_bitfield_assignment_op): Revamp to work\n\tagain after expansion changes.\n\nFrom-SVN: r171139", "tree": {"sha": "fac2cd6805c5b5c3555dd0cab957fb496436e8e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac2cd6805c5b5c3555dd0cab957fb496436e8e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bf162a0c94ef343184acdff9e283859a7c24744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf162a0c94ef343184acdff9e283859a7c24744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf162a0c94ef343184acdff9e283859a7c24744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf162a0c94ef343184acdff9e283859a7c24744/comments", "author": {"login": "pinskia", "id": 8496799, "node_id": "MDQ6VXNlcjg0OTY3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8496799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinskia", "html_url": "https://github.com/pinskia", "followers_url": "https://api.github.com/users/pinskia/followers", "following_url": "https://api.github.com/users/pinskia/following{/other_user}", "gists_url": "https://api.github.com/users/pinskia/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinskia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinskia/subscriptions", "organizations_url": "https://api.github.com/users/pinskia/orgs", "repos_url": "https://api.github.com/users/pinskia/repos", "events_url": "https://api.github.com/users/pinskia/events{/privacy}", "received_events_url": "https://api.github.com/users/pinskia/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2abbb0fe9e51ba2b1235f8cddf4953bfb8e48e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2abbb0fe9e51ba2b1235f8cddf4953bfb8e48e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2abbb0fe9e51ba2b1235f8cddf4953bfb8e48e93"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "cb69c8f5f2072b46df2305f6f8c1b8a954b67224", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf162a0c94ef343184acdff9e283859a7c24744/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf162a0c94ef343184acdff9e283859a7c24744/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bf162a0c94ef343184acdff9e283859a7c24744", "patch": "@@ -1,3 +1,9 @@\n+2011-03-16  Andrew Pinski  <pinskia@gmail.com>\n+\n+\tPR middle-end/47790\n+\t* expr.c (optimize_bitfield_assignment_op): Revamp to work\n+\tagain after expansion changes.\n+\n 2011-03-18  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* combine.c (try_combine): Do simplification only call of"}, {"sha": "dc8366d0ae100c1fe5ba06605c0847f90619b2e0", "filename": "gcc/expr.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf162a0c94ef343184acdff9e283859a7c24744/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf162a0c94ef343184acdff9e283859a7c24744/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3bf162a0c94ef343184acdff9e283859a7c24744", "patch": "@@ -3974,6 +3974,8 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n   tree op0, op1;\n   rtx value, result;\n   optab binop;\n+  gimple srcstmt;\n+  enum tree_code code;\n \n   if (mode1 != VOIDmode\n       || bitsize >= BITS_PER_WORD\n@@ -3983,13 +3985,37 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n     return false;\n \n   STRIP_NOPS (src);\n-  if (!BINARY_CLASS_P (src)\n-      || TREE_CODE (TREE_TYPE (src)) != INTEGER_TYPE)\n+  if (TREE_CODE (src) != SSA_NAME)\n+    return false;\n+  if (TREE_CODE (TREE_TYPE (src)) != INTEGER_TYPE)\n+    return false;\n+\n+  srcstmt = get_gimple_for_ssa_name (src);\n+  if (!srcstmt\n+      || TREE_CODE_CLASS (gimple_assign_rhs_code (srcstmt)) != tcc_binary)\n     return false;\n \n-  op0 = TREE_OPERAND (src, 0);\n-  op1 = TREE_OPERAND (src, 1);\n-  STRIP_NOPS (op0);\n+  code = gimple_assign_rhs_code (srcstmt);\n+\n+  op0 = gimple_assign_rhs1 (srcstmt);\n+\n+  /* If OP0 is an SSA_NAME, then we want to walk the use-def chain\n+     to find its initialization.  Hopefully the initialization will\n+     be from a bitfield load.  */\n+  if (TREE_CODE (op0) == SSA_NAME)\n+    {\n+      gimple op0stmt = get_gimple_for_ssa_name (op0);\n+\n+      /* We want to eventually have OP0 be the same as TO, which\n+\t should be a bitfield.  */\n+      if (!op0stmt\n+\t  || !is_gimple_assign (op0stmt)\n+\t  || gimple_assign_rhs_code (op0stmt) != TREE_CODE (to))\n+\treturn false;\n+      op0 = gimple_assign_rhs1 (op0stmt);\n+    }\n+\n+  op1 = gimple_assign_rhs2 (srcstmt);\n \n   if (!operand_equal_p (to, op0, 0))\n     return false;\n@@ -4026,7 +4052,7 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n   if (BYTES_BIG_ENDIAN)\n     bitpos = str_bitsize - bitpos - bitsize;\n \n-  switch (TREE_CODE (src))\n+  switch (code)\n     {\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n@@ -4054,7 +4080,7 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n \t  set_mem_expr (str_rtx, 0);\n \t}\n \n-      binop = TREE_CODE (src) == PLUS_EXPR ? add_optab : sub_optab;\n+      binop = code == PLUS_EXPR ? add_optab : sub_optab;\n       if (bitsize == 1 && bitpos + bitsize != str_bitsize)\n \t{\n \t  value = expand_and (str_mode, value, const1_rtx, NULL);\n@@ -4087,7 +4113,7 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n \t  set_mem_expr (str_rtx, 0);\n \t}\n \n-      binop = TREE_CODE (src) == BIT_IOR_EXPR ? ior_optab : xor_optab;\n+      binop = code == BIT_IOR_EXPR ? ior_optab : xor_optab;\n       if (bitpos + bitsize != GET_MODE_BITSIZE (GET_MODE (str_rtx)))\n \t{\n \t  rtx mask = GEN_INT (((unsigned HOST_WIDE_INT) 1 << bitsize)"}]}