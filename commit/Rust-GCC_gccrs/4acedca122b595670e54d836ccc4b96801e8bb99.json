{"sha": "4acedca122b595670e54d836ccc4b96801e8bb99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFjZWRjYTEyMmI1OTU2NzBlNTRkODM2Y2NjNGI5NjgwMWU4YmI5OQ==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-07-04T18:45:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-04T18:45:09Z"}, "message": "ratio: New, per N2661.\n\n2008-07-04  Chris Fairles  <chris.fairles@gmail.com>\n\n\t* include/std/ratio: New, per N2661.\n\t* include/Makefile.am: Update.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/20_util/ratio/cons/cons1.cc: New.\n\t* testsuite/20_util/ratio/cons/cons_overflow.cc: Likewise.\n\t* testsuite/20_util/ratio/operations/ops1.cc: Likewise.\n\t* testsuite/20_util/ratio/operations/ops2.cc: Likewise.\n\t* testsuite/20_util/ratio/operations/ops3.cc: Likewise.\n\t* testsuite/20_util/ratio/operations/ops_overflow.cc: Likewise.\n\t* testsuite/20_util/ratio/comparisons/comp1.cc: Likewise.\n\nFrom-SVN: r137482", "tree": {"sha": "74b77907d7a04f8f9b233b60185f3cf7457652ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74b77907d7a04f8f9b233b60185f3cf7457652ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4acedca122b595670e54d836ccc4b96801e8bb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acedca122b595670e54d836ccc4b96801e8bb99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acedca122b595670e54d836ccc4b96801e8bb99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acedca122b595670e54d836ccc4b96801e8bb99/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47cfcc3ae8745b808f1b8375a2ffc4fd15d74eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cfcc3ae8745b808f1b8375a2ffc4fd15d74eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47cfcc3ae8745b808f1b8375a2ffc4fd15d74eb9"}], "stats": {"total": 760, "additions": 760, "deletions": 0}, "files": [{"sha": "cae60608575638627e59c4ae6ccde3d0667d8b7a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -1,3 +1,16 @@\n+2008-07-04  Chris Fairles  <chris.fairles@gmail.com>\n+\n+\t* include/std/ratio: New, per N2661.\n+\t* include/Makefile.am: Update.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/20_util/ratio/cons/cons1.cc: New.\n+\t* testsuite/20_util/ratio/cons/cons_overflow.cc: Likewise.\n+\t* testsuite/20_util/ratio/operations/ops1.cc: Likewise.\n+\t* testsuite/20_util/ratio/operations/ops2.cc: Likewise.\n+\t* testsuite/20_util/ratio/operations/ops3.cc: Likewise.\n+\t* testsuite/20_util/ratio/operations/ops_overflow.cc: Likewise.\n+\t* testsuite/20_util/ratio/comparisons/comp1.cc: Likewise.\n+\n 2008-07-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/36616"}, {"sha": "7e82b8034b4410b16316fb22b8fd5bba78f618f6", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -55,6 +55,7 @@ std_headers = \\\n \t${std_srcdir}/queue \\\n \t${std_srcdir}/random \\\n \t${std_srcdir}/regex \\\n+\t${std_srcdir}/ratio \\\n \t${std_srcdir}/set \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/stack \\"}, {"sha": "c85c8bd233f0dce586292f85dad2b40c52a79520", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -307,6 +307,7 @@ std_headers = \\\n \t${std_srcdir}/ostream \\\n \t${std_srcdir}/queue \\\n \t${std_srcdir}/random \\\n+\t${std_srcdir}/ratio \\\n \t${std_srcdir}/regex \\\n \t${std_srcdir}/set \\\n \t${std_srcdir}/sstream \\"}, {"sha": "6dcefa5b93100a2d666e420b74488cc02aa8ca48", "filename": "libstdc++-v3/include/std/ratio", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,257 @@\n+// <ratio> -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the \n+// terms of the GNU General Public License as published by the \n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the \n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ratio\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_RATIO\n+#define _GLIBCXX_RATIO 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#else\n+\n+#include <type_traits>\n+#include <cstdint>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+namespace std\n+{\n+  template<intmax_t _Pn>\n+    struct __static_sign\n+    : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>\n+    { };\n+\n+  template<intmax_t _Pn>\n+    struct __static_abs\n+    : integral_constant<intmax_t, _Pn * __static_sign<_Pn>::value>\n+    { };\n+\n+  template<intmax_t _Pn, intmax_t _Qn>\n+    struct __static_gcd;\n+ \n+  template<intmax_t _Pn, intmax_t _Qn>\n+    struct __static_gcd\n+    : __static_gcd<_Qn, (_Pn % _Qn)>\n+    { };\n+\n+  template<intmax_t _Pn>\n+    struct __static_gcd<_Pn, 0>\n+    : integral_constant<intmax_t, __static_abs<_Pn>::value>\n+    { };\n+\n+  template<intmax_t _Qn>\n+    struct __static_gcd<0, _Qn>\n+    : integral_constant<intmax_t, __static_abs<_Qn>::value>\n+    { };\n+\n+  // Let c = 2^(half # of bits in an intmax_t)\n+  // then we find a1, a0, b1, b0 s.t. N = a1*c + a0, M = b1*c + b0\n+  // The multiplication of N and M becomes,\n+  // N * M = (a1 * b1)c^2 + (a0 * b1 + b0 * a1)c + a0 * b0\n+  // Multiplication is safe if each term and the sum of the terms\n+  // is representable by intmax_t.\n+  template<intmax_t _Pn, intmax_t _Qn>\n+    struct __safe_multiply\n+    {\n+    private:\n+      static const uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);\n+\n+      static const uintmax_t __a0 = __static_abs<_Pn>::value % __c;\n+      static const uintmax_t __a1 = __static_abs<_Pn>::value / __c;\n+      static const uintmax_t __b0 = __static_abs<_Qn>::value % __c;\n+      static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;\n+\n+      static_assert(__a1 == 0 || __b1 == 0, \n+        \"overflow in multiplication\");\n+      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1), \n+        \"overflow in multiplication\");\n+      static_assert(__b0 * __a0 <= INTMAX_MAX, \n+        \"overflow in multiplication\");\n+      static_assert((__a0 * __b1 + __b0 * __a1) * __c <= \n+        INTMAX_MAX -  __b0 * __a0, \"overflow in multiplication\");\n+\n+    public:\n+      static const intmax_t value = _Pn * _Qn;\n+    };\n+\n+  // Helpers for __safe_add\n+  template<intmax_t _Pn, intmax_t _Qn, bool>\n+    struct __add_overflow_check_impl\n+    : integral_constant<bool, (_Pn <= INTMAX_MAX - _Qn)>\n+    { };\n+\n+  template<intmax_t _Pn, intmax_t _Qn>\n+    struct __add_overflow_check_impl<_Pn, _Qn, false>\n+    : integral_constant<bool, (_Pn >= -INTMAX_MAX - _Qn)>\n+    { };\n+\n+  template<intmax_t _Pn, intmax_t _Qn>\n+    struct __add_overflow_check\n+    : __add_overflow_check_impl<_Pn, _Qn, (_Qn >= 0)>\n+    { };\n+\n+  template<intmax_t _Pn, intmax_t _Qn>\n+    struct __safe_add\n+    {\n+      static_assert(__add_overflow_check<_Pn, _Qn>::value != 0, \n+        \"overflow in addition\");\n+\n+      static const intmax_t value = _Pn + _Qn;\n+    };\n+\n+  template<intmax_t _Num, intmax_t _Den = 1>\n+    struct ratio\n+    {\n+      static_assert(_Den != 0, \"denominator cannot be zero\");\n+      static_assert(_Num > INTMAX_MIN && _Den > INTMAX_MIN, \"out of range\");\n+      \n+      // Note: sign(N) * abs(N) == N\n+      static const intmax_t num =\n+        _Num * __static_sign<_Den>::value / __static_gcd<_Num, _Den>::value;\n+\n+      static const intmax_t den =\n+        __static_abs<_Den>::value / __static_gcd<_Num, _Den>::value;\n+    };\n+\n+  template<intmax_t _Num, intmax_t _Den>\n+    const intmax_t ratio<_Num, _Den>::num;\n+\n+  template<intmax_t _Num, intmax_t _Den>\n+    const intmax_t ratio<_Num, _Den>::den;\n+\n+  template<typename _R1, typename _R2>\n+    struct ratio_add\n+    {\n+    private:\n+      static const intmax_t __gcd =\n+        __static_gcd<_R1::den, _R2::den>::value;\n+      \n+    public:\n+      typedef ratio<\n+        __safe_add<\n+          __safe_multiply<_R1::num, (_R2::den / __gcd)>::value,\n+          __safe_multiply<_R2::num, (_R1::den / __gcd)>::value>::value,\n+        __safe_multiply<_R1::den, (_R2::den / __gcd)>::value> type;\n+    };\n+\n+  template<typename _R1, typename _R2>\n+    struct ratio_subtract\n+    {\n+      typedef typename ratio_add<\n+        _R1,\n+        ratio<-_R2::num, _R2::den>>::type type;\n+    };\n+\n+  template<typename _R1, typename _R2>\n+    struct ratio_multiply\n+    {\n+    private:\n+      static const intmax_t __gcd1 =\n+        __static_gcd<_R1::num, _R2::den>::value;\n+      static const intmax_t __gcd2 =\n+        __static_gcd<_R2::num, _R1::den>::value;\n+\n+    public:\n+      typedef ratio<\n+        __safe_multiply<(_R1::num / __gcd1),\n+                        (_R2::num / __gcd2)>::value,\n+        __safe_multiply<(_R1::den / __gcd2),\n+                        (_R2::den / __gcd1)>::value> type;\n+    };\n+\n+  template<typename _R1, typename _R2>\n+    struct ratio_divide\n+    {\n+      static_assert(_R2::num != 0, \"division by 0\");\n+\n+      typedef typename ratio_multiply<\n+        _R1,\n+        ratio<_R2::den, _R2::num>>::type type;\n+    };\n+\n+  template<typename _R1, typename _R2>\n+    struct ratio_equal\n+    : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>\n+    { };\n+  \n+  template<typename _R1, typename _R2>\n+    struct ratio_not_equal\n+    : integral_constant<bool, !ratio_equal<_R1, _R2>::value>\n+    { };\n+  \n+  template<typename _R1, typename _R2>\n+    struct ratio_less\n+    : integral_constant<bool,\n+        (__safe_multiply<_R1::num, _R2::den>::value < \n+         __safe_multiply<_R2::num, _R1::den>::value)>        \n+    { };\n+    \n+  template<typename _R1, typename _R2>\n+    struct ratio_less_equal\n+    : integral_constant<bool, !ratio_less<_R2, _R1>::value>\n+    { };\n+  \n+  template<typename _R1, typename _R2>\n+    struct ratio_greater\n+    : integral_constant<bool, ratio_less<_R2, _R1>::value>\n+    { };\n+\n+  template<typename _R1, typename _R2>\n+    struct ratio_greater_equal\n+    : integral_constant<bool, !ratio_less<_R1, _R2>::value>\n+    { };\n+\n+  typedef ratio<1,       1000000000000000000> atto;\n+  typedef ratio<1,          1000000000000000> femto;\n+  typedef ratio<1,             1000000000000> pico;\n+  typedef ratio<1,                1000000000> nano;\n+  typedef ratio<1,                   1000000> micro;\n+  typedef ratio<1,                      1000> milli;\n+  typedef ratio<1,                       100> centi;\n+  typedef ratio<1,                        10> deci;\n+  typedef ratio<                       10, 1> deca;\n+  typedef ratio<                      100, 1> hecto;\n+  typedef ratio<                     1000, 1> kilo;\n+  typedef ratio<                  1000000, 1> mega;\n+  typedef ratio<               1000000000, 1> giga;\n+  typedef ratio<            1000000000000, 1> tera;\n+  typedef ratio<         1000000000000000, 1> peta;\n+  typedef ratio<      1000000000000000000, 1> exa;\n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+#endif //__GXX_EXPERIMENTAL_CXX0X__\n+\n+#endif //_GLIBCXX_RATIO"}, {"sha": "73064c70919aaa99d32456a62ac08187072f42e0", "filename": "libstdc++-v3/testsuite/20_util/ratio/comparisons/comp1.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp1.cc?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,87 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+ \n+  VERIFY(( std::ratio_equal<std::ratio<2,6>, std::ratio<1,3>>::value == 1 ));\n+  VERIFY(( std::ratio_equal<std::ratio<2,6>, std::ratio<1,4>>::value == 0 ));\n+  \n+  VERIFY(( std::ratio_not_equal<std::ratio<2,6>, \n+           std::ratio<1,3>>::value == 0 ));\n+  VERIFY(( std::ratio_not_equal<std::ratio<2,6>, \n+           std::ratio<1,4>>::value == 1 ));\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+ \n+  VERIFY(( std::ratio_less<std::ratio<1,4>, std::ratio<1,3>>::value == 1 ));\n+  VERIFY(( std::ratio_less<std::ratio<-1,3>, std::ratio<1,3>>::value == 1 ));\n+  \n+  VERIFY(( std::ratio_less<std::ratio<1,3>, std::ratio<1,4>>::value == 0 ));\n+  VERIFY(( std::ratio_less<std::ratio<1,3>, std::ratio<-1,3>>::value == 0 ));\n+      \n+  VERIFY(( std::ratio_less_equal<std::ratio<-1,3>, \n+           std::ratio<-1,3>>::value == 1 ));\n+  VERIFY(( std::ratio_less_equal<std::ratio<1,4>, \n+           std::ratio<1,3>>::value == 1 ));\n+  \n+  VERIFY(( std::ratio_less_equal<std::ratio<1,4>, \n+           std::ratio<-1,3>>::value == 0 ));\n+  VERIFY(( std::ratio_less_equal<std::ratio<1,3>, \n+           std::ratio<-1,3>>::value == 0 ));\n+  \n+  VERIFY(( std::ratio_greater<std::ratio<1,3>, std::ratio<1,4>>::value == 1 ));\n+  VERIFY(( std::ratio_greater<std::ratio<1,3>, std::ratio<-1,3>>::value == 1 ));\n+  \n+  VERIFY(( std::ratio_greater<std::ratio<1,4>, std::ratio<1,3>>::value == 0 ));\n+  VERIFY(( std::ratio_greater<std::ratio<-1,3>, std::ratio<1,3>>::value == 0 ));\n+\n+  VERIFY(( std::ratio_greater_equal<std::ratio<1,3>, \n+           std::ratio<1,3>>::value == 1 ));\n+  VERIFY(( std::ratio_greater_equal<std::ratio<1,3>, \n+           std::ratio<-1,3>>::value == 1 ));\n+  \n+  VERIFY(( std::ratio_greater_equal<std::ratio<-1,3>, \n+           std::ratio<1,3>>::value == 0 ));\n+  VERIFY(( std::ratio_greater_equal<std::ratio<1,4>, \n+           std::ratio<1,3>>::value == 0 ));\n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+int main()\n+{\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  test01();\n+  test02();\n+#endif\n+  return 0;\n+}"}, {"sha": "dc2f0dabd70457e3969c120bc16fa1607879cf37", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons1.cc?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-07-03 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ratio<1,3> r0;\n+  std::ratio<2,6> r1;  \n+  std::ratio<2,-6> r2;\n+  std::ratio<-2,6> r3;\n+\n+  VERIFY( r0.num == 1 );\n+  VERIFY( r0.den == 3 );\n+\n+  VERIFY( r1.num == r0.num );\n+  VERIFY( r1.den == r0.den );  \n+  VERIFY( r2.num == -r0.num );\n+  VERIFY( r2.den == r0.den ); \n+  VERIFY( r3.num == -r0.num );\n+  VERIFY( r3.den == r0.den );  \n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+int main()\n+{\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  test01();\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+  return 0;\n+}"}, {"sha": "26bbfcdec53c4bc2761f08416038fe87d836b57d", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+void\n+test01()\n+{\n+  std::ratio<INTMAX_MAX, INTMAX_MAX> r1;\n+  std::ratio<-INTMAX_MAX, INTMAX_MAX> r2;\n+}\n+\n+void\n+test02()\n+{\n+  std::ratio<INTMAX_MIN, 1> r1;\n+}\n+\n+void\n+test03()\n+{\n+  std::ratio<1, INTMAX_MIN> r1;\n+}\n+\n+void\n+test04()\n+{\n+  std::ratio<1,0> r1;\n+}\n+\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 48 }\n+// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 136 }\n+// { dg-error \"out of range\" \"\" { target *-*-* } 137 }\n+// { dg-excess-errors \"In instantiation of\" }\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "3f6a91d2180f8f6c16055ad697eb60ab5c3cdada", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops1.cc?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,80 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-07-03 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ratio_add<std::ratio<3,8>, std::ratio<5,12>>::type r;\n+\n+  VERIFY( r.num == 19);\n+  VERIFY( r.den == 24);\n+}\n+\n+void\n+test02()\n+{  \n+  bool test __attribute__((unused)) = true;\n+  std::ratio_subtract<std::ratio<3,8>, std::ratio<5,12>>::type r;\n+\n+  VERIFY( r.num == -1);\n+  VERIFY( r.den == 24);\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::ratio_multiply<std::ratio<3,8>, std::ratio<5,12>>::type r;\n+\n+  VERIFY( r.num == 5);\n+  VERIFY( r.den == 32);\n+}\n+\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::ratio_divide<std::ratio<3,8>, std::ratio<5,12>>::type r;\n+\n+  VERIFY( r.num == 9);\n+  VERIFY( r.den == 10);\n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+int main()\n+{\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+  return 0;\n+}"}, {"sha": "2dc2be6b6d88026e46298c69a87296dfcc81eb70", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops2.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops2.cc?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-07-03 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+typedef std::ratio<1, INTMAX_MAX> one_over_max;\n+typedef std::ratio<2, INTMAX_MAX> two_over_max;\n+typedef std::ratio<INTMAX_MAX, 1> max_over_one;\n+typedef std::ratio<INTMAX_MAX, 2> max_over_two;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ratio_add<one_over_max, one_over_max>::type r1;\n+\n+  VERIFY( r1.num == two_over_max::num);\n+  VERIFY( r1.den == two_over_max::den);\n+\n+  std::ratio_add<\n+    std::ratio<INTMAX_MAX / 2, INTMAX_MAX / 2>,\n+    std::ratio<INTMAX_MAX / 2 , INTMAX_MAX / 2 + 1>>::type r2;\n+  \n+  VERIFY( r2.num == INTMAX_MAX);\n+  VERIFY( r2.den == (INTMAX_MAX / 2) + 1);\n+}\n+\n+void\n+test02()\n+{  \n+  bool test __attribute__((unused)) = true;\n+  \n+  std::ratio_subtract<one_over_max, one_over_max>::type r1;\n+\n+  VERIFY( r1.num == 0);\n+  VERIFY( r1.den == 1);\n+\n+  std::ratio_subtract<\n+    std::ratio<INTMAX_MAX / 2, INTMAX_MAX / 2>,\n+    std::ratio<INTMAX_MAX / 2 , INTMAX_MAX / 2 + 1>>::type r2;\n+  \n+  VERIFY( r2.num == 1);\n+  VERIFY( r2.den == (INTMAX_MAX / 2) + 1);\n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+int main()\n+{\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  test01();\n+  test02();\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+  return 0;\n+}"}, {"sha": "d66c37cf383878749fb527ec9df53bc20bd0c395", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops3.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops3.cc?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-07-03 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ratio_multiply<\n+    std::ratio<2, INTMAX_MAX>,\n+    std::ratio<INTMAX_MAX, 2>>::type r1;\n+\n+  VERIFY( r1.num == 1);\n+  VERIFY( r1.den == 1);\n+\n+  std::ratio_multiply<\n+    std::ratio<INTMAX_MAX, 2>,\n+    std::ratio<2 , INTMAX_MAX - 1>>::type r2;\n+  \n+  VERIFY( r2.num == INTMAX_MAX);\n+  VERIFY( r2.den == INTMAX_MAX - 1);\n+}\n+\n+void\n+test02()\n+{  \n+  bool test __attribute__((unused)) = true;\n+  \n+  std::ratio_divide<\n+    std::ratio<INTMAX_MAX, 2>,\n+    std::ratio<INTMAX_MAX, 2>>::type r1;\n+\n+  VERIFY( r1.num == 1);\n+  VERIFY( r1.den == 1);\n+\n+  std::ratio_divide<\n+    std::ratio<INTMAX_MAX-1, 2>,\n+    std::ratio<INTMAX_MAX, 2>>::type r2;\n+  \n+  VERIFY( r2.num == INTMAX_MAX - 1);\n+  VERIFY( r2.den == INTMAX_MAX);\n+}\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+\n+int main()\n+{\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  test01();\n+  test02();\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+  return 0;\n+}"}, {"sha": "7dffda39da2a6ec31d1c8d0f3ad4f70619f430ac", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops_overflow.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acedca122b595670e54d836ccc4b96801e8bb99/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow.cc?ref=4acedca122b595670e54d836ccc4b96801e8bb99", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2008-07-03 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <ratio>\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+void\n+test01()\n+{\n+  std::ratio_add<std::ratio<INTMAX_MAX, 1>, std::ratio<1>>::type r1;\n+}\n+\n+void\n+test02()\n+{  \n+  std::ratio_multiply<std::ratio<-INTMAX_MAX, 2>, std::ratio<3, 2>>::type r1;\n+  std::ratio_multiply<std::ratio<INTMAX_MAX>, std::ratio<INTMAX_MAX>>::type r2;\n+}\n+\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 31 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 37 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 38 }\n+// { dg-error \"overflow in addition\" \"\" { target *-*-* } 127 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 95 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 97 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 99 }\n+// { dg-excess-errors \"In instantiation of\" }\n+// { dg-excess-errors \"out of range\" }\n+\n+#endif //_GLIBCXX_USE_C99_STDINT_TR1"}]}