{"sha": "9195aa172bbc20627f23bfb1612180c83a0a7bab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE5NWFhMTcyYmJjMjA2MjdmMjNiZmIxNjEyMTgwYzgzYTBhN2JhYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-03-19T14:00:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-03-19T14:00:59Z"}, "message": "libgo: fix build on AIX\n    \n    Since aix/ppc64 has been added to GC toolchain, a mix between new and\n    old files were created in gcc toolchain.\n    This commit corrects this merge for aix/ppc64 and aix/ppc.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/167658\n\nFrom-SVN: r269797", "tree": {"sha": "e42ecb2ffbddc6bf438c711494028bc3b86f527c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42ecb2ffbddc6bf438c711494028bc3b86f527c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9195aa172bbc20627f23bfb1612180c83a0a7bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9195aa172bbc20627f23bfb1612180c83a0a7bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9195aa172bbc20627f23bfb1612180c83a0a7bab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9195aa172bbc20627f23bfb1612180c83a0a7bab/comments", "author": null, "committer": null, "parents": [{"sha": "3b595ecaeda647070c6c4ede0c09be78dfc4f763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b595ecaeda647070c6c4ede0c09be78dfc4f763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b595ecaeda647070c6c4ede0c09be78dfc4f763"}], "stats": {"total": 342, "additions": 140, "deletions": 202}, "files": [{"sha": "006da8c77fe8f8b57122077ae577562b7e0be8ad", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -1,4 +1,4 @@\n-87945b620b2100d33e27f33e6276a4e4e5890659\n+069afe85f38c099660c5d81950d65248ed4fc516\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "2a7f7f36ab0a29fe1772fa7781b7f2fc5028d690", "filename": "libgo/go/archive/tar/stat_actime1.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Farchive%2Ftar%2Fstat_actime1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Farchive%2Ftar%2Fstat_actime1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fstat_actime1.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build hurd linux dragonfly openbsd solaris\n+// +build aix hurd linux dragonfly openbsd solaris\n \n package tar\n "}, {"sha": "a14362bdc7dc1238d4471787ddda30d2e99dcc1e", "filename": "libgo/go/cmd/go/internal/lockedfile/internal/filelock/filelock_fcntl.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Flockedfile%2Finternal%2Ffilelock%2Ffilelock_fcntl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Flockedfile%2Finternal%2Ffilelock%2Ffilelock_fcntl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Flockedfile%2Finternal%2Ffilelock%2Ffilelock_fcntl.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -35,7 +35,9 @@ const (\n \twriteLock lockType = syscall.F_WRLCK\n )\n \n-type inode = uint64 // type of syscall.Stat_t.Ino\n+// type of syscall.Stat_t.Ino for 64 bits architectures.\n+// For 32 bits architecture, it's easier to cast it instead.\n+type inode = uint64\n \n type inodeLock struct {\n \towner File\n@@ -59,7 +61,7 @@ func lock(f File, lt lockType) (err error) {\n \tif err != nil {\n \t\treturn err\n \t}\n-\tino := fi.Sys().(*syscall.Stat_t).Ino\n+\tino := uint64(fi.Sys().(*syscall.Stat_t).Ino)\n \n \tmu.Lock()\n \tif i, dup := inodes[f]; dup && i != ino {"}, {"sha": "82e0dcfd07497ad0984de9e8c42964c6e8f78262", "filename": "libgo/go/internal/syscall/unix/at_largefile.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fat_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fat_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fat_largefile.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build aix hurd linux solaris,386 solaris,sparc\n+// +build hurd linux solaris,386 solaris,sparc\n \n package unix\n "}, {"sha": "14fdb70be712dd7e8533871c0e744df2814b83b6", "filename": "libgo/go/internal/syscall/unix/at_regfile.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fat_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fat_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fat_regfile.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -2,7 +2,6 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !aix\n // +build !hurd\n // +build !linux\n // +build !solaris !386"}, {"sha": "af105d6158ba3d59fb3060fd5e52f41adbb863c3", "filename": "libgo/go/internal/syscall/unix/ioctl_aix.go", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fioctl_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fioctl_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fioctl_aix.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -9,17 +9,12 @@ import (\n \t\"unsafe\"\n )\n \n-//go:cgo_import_dynamic libc_ioctl ioctl \"libc.a/shr_64.o\"\n-//go:linkname libc_ioctl libc_ioctl\n-var libc_ioctl uintptr\n-\n-// Implemented in syscall/syscall_aix.go.\n-func syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno)\n+//extern __go_ioctl_ptr\n+func ioctl(int32, int32, unsafe.Pointer) int32\n \n func Ioctl(fd int, cmd int, args uintptr) (err error) {\n-\t_, _, e1 := syscall6(uintptr(unsafe.Pointer(&libc_ioctl)), 3, uintptr(fd), uintptr(cmd), uintptr(args), 0, 0, 0)\n-\tif e1 != 0 {\n-\t\terr = e1\n+\tif ioctl(int32(fd), int32(cmd), unsafe.Pointer(args)) < 0 {\n+\t\treturn syscall.GetErrno()\n \t}\n \treturn\n }"}, {"sha": "1fe9bbaf69638c97bd90eccfd84923a7157d94b1", "filename": "libgo/go/net/interface_aix.go", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fnet%2Finterface_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fnet%2Finterface_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Finterface_aix.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -32,6 +32,8 @@ const _RTAX_NETMASK = 2\n const _RTAX_IFA = 5\n const _RTAX_MAX = 8\n \n+const _SIOCGIFMTU = -0x3fd796aa\n+\n func getIfList() ([]byte, error) {\n \tneeded, err := syscall.Getkerninfo(_KINFO_RT_IFLIST, 0, 0, 0)\n \tif err != nil {\n@@ -62,7 +64,7 @@ func interfaceTable(ifindex int) ([]Interface, error) {\n \t\t}\n \t\tif ifm.Type == syscall.RTM_IFINFO {\n \t\t\tif ifindex == 0 || ifindex == int(ifm.Index) {\n-\t\t\t\tsdl := (*rawSockaddrDatalink)(unsafe.Pointer(&tab[syscall.SizeofIfMsghdr]))\n+\t\t\t\tsdl := (*rawSockaddrDatalink)(unsafe.Pointer(&tab[unsafe.Sizeof(syscall.IfMsgHdr)]))\n \n \t\t\t\tifi := &Interface{Index: int(ifm.Index), Flags: linkFlags(ifm.Flags)}\n \t\t\t\tifi.Name = string(sdl.Data[:sdl.Nlen])\n@@ -75,7 +77,7 @@ func interfaceTable(ifindex int) ([]Interface, error) {\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n-\t\t\t\terr = unix.Ioctl(sock, syscall.SIOCGIFMTU, uintptr(unsafe.Pointer(ifr)))\n+\t\t\t\terr = unix.Ioctl(sock, _SIOCGIFMTU, uintptr(unsafe.Pointer(ifr)))\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n@@ -131,7 +133,7 @@ func interfaceAddrTable(ifi *Interface) ([]Addr, error) {\n \t\tif ifm.Type == syscall.RTM_NEWADDR {\n \t\t\tif ifi == nil || ifi.Index == int(ifm.Index) {\n \t\t\t\tmask := ifm.Addrs\n-\t\t\t\toff := uint(syscall.SizeofIfMsghdr)\n+\t\t\t\toff := uint(unsafe.Sizeof(syscall.IfMsgHdr))\n \n \t\t\t\tvar iprsa, nmrsa *syscall.RawSockaddr\n \t\t\t\tfor i := uint(0); i < _RTAX_MAX; i++ {"}, {"sha": "d8afd5e75198e545fe55a5ec1a2d79e7cf594069", "filename": "libgo/go/net/interface_stub.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fnet%2Finterface_stub.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fnet%2Finterface_stub.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Finterface_stub.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build aix nacl hurd js,wasm\n+// +build nacl hurd js,wasm\n \n package net\n "}, {"sha": "1e28fe6aadeb6dfb181bf2b628adc92980821575", "filename": "libgo/go/net/sockoptip_aix.go", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fnet%2Fsockoptip_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fnet%2Fsockoptip_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockoptip_aix.go?ref=3b595ecaeda647070c6c4ede0c09be78dfc4f763", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package net\n-\n-import \"syscall\"\n-\n-func setIPv4MulticastInterface(fd *netFD, ifi *Interface) error {\n-\treturn syscall.ENOPROTOOPT\n-}\n-\n-func setIPv4MulticastLoopback(fd *netFD, v bool) error {\n-\treturn syscall.ENOPROTOOPT\n-}"}, {"sha": "ad77a406840bc51e446a5acd65c0ceaba57d600d", "filename": "libgo/go/os/dir_gccgo.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fos%2Fdir_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fos%2Fdir_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_gccgo.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -16,9 +16,6 @@ import (\n //extern pathconf\n func libc_pathconf(*byte, int) int\n \n-//extern fdopendir\n-func libc_fdopendir(int32) *syscall.DIR\n-\n func clen(n []byte) int {\n \tfor i := 0; i < len(n); i++ {\n \t\tif n[i] == 0 {"}, {"sha": "3582243ba0d72f85cd7030e0fe00a011573368bd", "filename": "libgo/go/os/dir_libc64_gccgo.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fos%2Fdir_libc64_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fos%2Fdir_libc64_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_libc64_gccgo.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -10,3 +10,6 @@ import \"syscall\"\n \n //extern closedir64\n func libc_closedir(*syscall.DIR) int\n+\n+//extern fdopendir64\n+func libc_fdopendir(int32) *syscall.DIR"}, {"sha": "a3be43bd15c5d6781addc1dca176325b9c45f289", "filename": "libgo/go/os/dir_libc_gccgo.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fos%2Fdir_libc_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fos%2Fdir_libc_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_libc_gccgo.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -10,3 +10,6 @@ import \"syscall\"\n \n //extern closedir\n func libc_closedir(*syscall.DIR) int\n+\n+//extern fdopendir\n+func libc_fdopendir(int32) *syscall.DIR"}, {"sha": "53a40f26772fcc8d6242ffb81cc4151e4639b342", "filename": "libgo/go/os/sys_aix.go", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fos%2Fsys_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fos%2Fsys_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fsys_aix.go?ref=3b595ecaeda647070c6c4ede0c09be78dfc4f763", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2018 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package os\n-\n-import \"syscall\"\n-\n-// gethostname syscall cannot be used because it also returns the domain.\n-// Therefore, hostname is retrieve with uname syscall and the Nodename field.\n-\n-func hostname() (name string, err error) {\n-\tvar u syscall.Utsname\n-\tif errno := syscall.Uname(&u); errno != nil {\n-\t\treturn \"\", NewSyscallError(\"uname\", errno)\n-\t}\n-\tb := make([]byte, len(u.Nodename))\n-\ti := 0\n-\tfor ; i < len(u.Nodename); i++ {\n-\t\tif u.Nodename[i] == 0 {\n-\t\t\tbreak\n-\t\t}\n-\t\tb[i] = byte(u.Nodename[i])\n-\t}\n-\treturn string(b[:i]), nil\n-}"}, {"sha": "c0b4caab32a45198d1df620dc2b3c25ffd7f19b1", "filename": "libgo/go/runtime/malloc.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fmalloc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fmalloc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmalloc.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -218,7 +218,7 @@ const (\n \t// we further limit it to 31 bits.\n \t//\n \t// WebAssembly currently has a limit of 4GB linear memory.\n-\theapAddrBits = (_64bit*(1-sys.GoarchWasm)*(1-sys.GoosAix))*48 + (1-_64bit+sys.GoarchWasm)*(32-(sys.GoarchMips+sys.GoarchMipsle)) + 60*sys.GoosAix\n+\theapAddrBits = (_64bit*(1-sys.GoarchWasm)*(1-sys.GoosAix))*48 + (1-_64bit+sys.GoarchWasm)*(32-(sys.GoarchMips+sys.GoarchMipsle)) + 60*(sys.GoosAix*_64bit)\n \n \t// maxAlloc is the maximum size of an allocation. On 64-bit,\n \t// it's theoretically possible to allocate 1<<heapAddrBits bytes. On\n@@ -259,7 +259,7 @@ const (\n \t// logHeapArenaBytes is log_2 of heapArenaBytes. For clarity,\n \t// prefer using heapArenaBytes where possible (we need the\n \t// constant to compute some other constants).\n-\tlogHeapArenaBytes = (6+20)*(_64bit*(1-sys.GoosWindows)*(1-sys.GoosAix)) + (2+20)*(_64bit*sys.GoosWindows) + (2+20)*(1-_64bit) + (8+20)*sys.GoosAix\n+\tlogHeapArenaBytes = (6+20)*(_64bit*(1-sys.GoosWindows)*(1-sys.GoosAix)) + (2+20)*(_64bit*sys.GoosWindows) + (2+20)*(1-_64bit) + (8+20)*(sys.GoosAix*_64bit)\n \n \t// heapArenaBitmapBytes is the size of each heap arena's bitmap.\n \theapArenaBitmapBytes = heapArenaBytes / (sys.PtrSize * 8 / 2)\n@@ -282,7 +282,7 @@ const (\n \t//\n \t// We use the L1 map on aix/ppc64 to keep the same L2 value\n \t// as on Linux.\n-\tarenaL1Bits = 6*(_64bit*sys.GoosWindows) + 12*sys.GoosAix\n+\tarenaL1Bits = 6*(_64bit*sys.GoosWindows) + 12*(sys.GoosAix*_64bit)\n \n \t// arenaL2Bits is the number of bits of the arena number\n \t// covered by the second level arena index."}, {"sha": "987467814543165c7d036fc65cf081a48b4631a9", "filename": "libgo/go/runtime/mem_gccgo.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fmem_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fmem_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmem_gccgo.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -187,6 +187,11 @@ func sysReserve(v unsafe.Pointer, n uintptr) unsafe.Pointer {\n func sysMap(v unsafe.Pointer, n uintptr, sysStat *uint64) {\n \tmSysStatInc(sysStat, n)\n \n+\tif GOOS == \"aix\" {\n+\t\t// AIX does not allow mapping a range that is already mapped.\n+\t\t// So always unmap first even if it is already unmapped.\n+\t\tmunmap(v, n)\n+\t}\n \tp, err := mmap(v, n, _PROT_READ|_PROT_WRITE, _MAP_ANON|_MAP_FIXED|_MAP_PRIVATE, mmapFD, 0)\n \tif err == _ENOMEM {\n \t\tthrow(\"runtime: out of memory\")"}, {"sha": "70bf9eb876e9da009346ab76394e883d1c5cba9d", "filename": "libgo/go/runtime/netpoll_aix.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fnetpoll_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fnetpoll_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fnetpoll_aix.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -37,7 +37,6 @@ const _POLLIN = 0x0001\n const _POLLOUT = 0x0002\n const _POLLHUP = 0x2000\n const _POLLERR = 0x4000\n-const _O_NONBLOCK = 0x4\n \n var (\n \tpfds           []pollfd"}, {"sha": "9211f21ab3d9d3e7e6426cb9b01c99101c429770", "filename": "libgo/go/runtime/os_aix.go", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fos_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fos_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_aix.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -62,12 +62,19 @@ func semasleep(ns int64) int32 {\n \t\tif clock_gettime(_CLOCK_REALTIME, &ts) != 0 {\n \t\t\tthrow(\"clock_gettime\")\n \t\t}\n-\t\tts.tv_sec += ns / 1e9\n-\t\tts.tv_nsec += ns % 1e9\n-\t\tif ts.tv_nsec >= 1e9 {\n-\t\t\tts.tv_sec++\n-\t\t\tts.tv_nsec -= 1e9\n+\n+\t\tsec := int64(ts.tv_sec) + ns/1e9\n+\t\tnsec := int64(ts.tv_nsec) + ns%1e9\n+\t\tif nsec >= 1e9 {\n+\t\t\tsec++\n+\t\t\tnsec -= 1e9\n+\t\t}\n+\t\tif sec != int64(timespec_sec_t(sec)) {\n+\t\t\t// Handle overflows (timespec_sec_t is 32-bit in 32-bit applications)\n+\t\t\tsec = 1<<31 - 1\n \t\t}\n+\t\tts.tv_sec = timespec_sec_t(sec)\n+\t\tts.tv_nsec = timespec_nsec_t(nsec)\n \n \t\tif sem_timedwait((*semt)(unsafe.Pointer(_m_.mos.waitsema)), &ts) != 0 {\n \t\t\terr := errno()"}, {"sha": "1cb910cd11103652152c7bc4c70f35bf6b4a81b8", "filename": "libgo/go/runtime/stubs2.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fstubs2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Fstubs2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs2.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -7,7 +7,6 @@\n // +build !nacl\n // +build !js\n // +build !darwin\n-// +build !aix\n \n package runtime\n "}, {"sha": "7a28603d45e97c298f6251e7897b71ad40688d7a", "filename": "libgo/go/runtime/timestub2.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Ftimestub2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fruntime%2Ftimestub2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftimestub2.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -5,8 +5,6 @@\n // +build !darwin\n // +build !windows\n // +build !freebsd\n-// +build !aix\n-\n package runtime\n \n func walltime() (sec int64, nsec int32)"}, {"sha": "22b752cf271d4aa56324ad6bb9c4410a734a0236", "filename": "libgo/go/syscall/exec_aix_test.go", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fsyscall%2Fexec_aix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fsyscall%2Fexec_aix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_aix_test.go?ref=3b595ecaeda647070c6c4ede0c09be78dfc4f763", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2015 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// +build aix\n-\n-package syscall\n-\n-import \"unsafe\"\n-\n-//go:cgo_import_dynamic libc_Getpgid getpgid \"libc.a/shr_64.o\"\n-//go:cgo_import_dynamic libc_Getpgrp getpgrp \"libc.a/shr_64.o\"\n-\n-//go:linkname libc_Getpgid libc_Getpgid\n-//go:linkname libc_Getpgrp libc_Getpgrp\n-\n-var (\n-\tlibc_Getpgid,\n-\tlibc_Getpgrp libcFunc\n-)\n-\n-func Getpgid(pid int) (pgid int, err error) {\n-\tr0, _, e1 := syscall6(uintptr(unsafe.Pointer(&libc_Getpgid)), 1, uintptr(pid), 0, 0, 0, 0, 0)\n-\tpgid = int(r0)\n-\tif e1 != 0 {\n-\t\terr = e1\n-\t}\n-\treturn\n-}\n-\n-func Getpgrp() (pgrp int) {\n-\tr0, _, _ := syscall6(uintptr(unsafe.Pointer(&libc_Getpgrp)), 0, 0, 0, 0, 0, 0, 0)\n-\tpgrp = int(r0)\n-\treturn\n-}\n-\n-var Ioctl = ioctl"}, {"sha": "ec21f8014dda06faf41c9bcbb41d515e1247805c", "filename": "libgo/go/syscall/exec_unix.go", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_unix.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -299,7 +299,6 @@ func runtime_AfterExec()\n \n // execveLibc is non-nil on OS using libc syscall, set to execve in exec_libc.go; this\n // avoids a build dependency for other platforms.\n-var execveLibc func(path uintptr, argv uintptr, envp uintptr) Errno\n var execveDarwin func(path *byte, argv **byte, envp **byte) error\n \n // Exec invokes the execve(2) system call.\n@@ -321,10 +320,7 @@ func Exec(argv0 string, argv []string, envv []string) (err error) {\n \tvar err1 error\n \tif runtime.GOOS == \"solaris\" || runtime.GOOS == \"aix\" || runtime.GOOS == \"hurd\" {\n \t\t// RawSyscall should never be used on Solaris or AIX.\n-\t\terr1 = execveLibc(\n-\t\t\tuintptr(unsafe.Pointer(argv0p)),\n-\t\t\tuintptr(unsafe.Pointer(&argvp[0])),\n-\t\t\tuintptr(unsafe.Pointer(&envvp[0])))\n+\t\terr1 = raw_execve(argv0p, &argvp[0], &envvp[0])\n \t} else if runtime.GOOS == \"darwin\" {\n \t\t// Similarly on Darwin.\n \t\terr1 = execveDarwin(argv0p, &argvp[0], &envvp[0])"}, {"sha": "c9eab43b6bc2f168bfdc80de24d329a1f81d5a36", "filename": "libgo/go/syscall/flock_aix.go", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fsyscall%2Fflock_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fsyscall%2Fflock_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fflock_aix.go?ref=3b595ecaeda647070c6c4ede0c09be78dfc4f763", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2018 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package syscall\n-\n-import \"unsafe\"\n-\n-// On AIX, there is no flock() system call.\n-\n-// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command.\n-func FcntlFlock(fd uintptr, cmd int, lk *Flock_t) (err error) {\n-\t_, _, e1 := syscall6(uintptr(unsafe.Pointer(&libc_fcntl)), 3, uintptr(fd), uintptr(cmd), uintptr(unsafe.Pointer(lk)), 0, 0, 0)\n-\tif e1 != 0 {\n-\t\terr = errnoErr(e1)\n-\t}\n-\treturn\n-}"}, {"sha": "8d9f59eb62f501216d5a4bde116ec14f5cc7cf14", "filename": "libgo/go/syscall/libcall_aix.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -10,6 +10,9 @@ import (\n \t\"unsafe\"\n )\n \n+// For exec_unix.go.\n+const SYS_EXECVE = 0\n+\n //sys\tOpenat(dirfd int, path string, flags int, mode uint32) (fd int, err error)\n //open64at(dirfd _C_int, path *byte, flags _C_int, mode Mode_t) _C_int\n \n@@ -139,3 +142,6 @@ func ReadDirent(fd int, buf []byte) (n int, err error) {\n func Unlinkat(dirfd int, path string) (err error) {\n \treturn unlinkat(dirfd, path, 0)\n }\n+\n+//sys\tGetkerninfo(op int32, where uintptr, size uintptr, arg int64) (i int32, err error)\n+//getkerninfo(op _C_int, where *byte, size *byte, arg _C_long) _C_int"}, {"sha": "4b1ee3216685acc2006ee6646b041809111254a9", "filename": "libgo/go/syscall/syscall_funcs.go", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build darwin dragonfly freebsd hurd linux netbsd openbsd solaris\n+\n+package syscall\n+\n+//extern __go_syscall6\n+func syscall6(trap uintptr, a1, a2, a3, a4, a5, a6 uintptr) uintptr\n+\n+// Do a system call.  We look at the size of uintptr to see how to pass\n+// the arguments, so that we don't pass a 64-bit value when the function\n+// expects a 32-bit one.\n+func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n+\tEntersyscall()\n+\tSetErrno(0)\n+\tr := syscall6(trap, a1, a2, a3, 0, 0, 0)\n+\terr = GetErrno()\n+\tExitsyscall()\n+\treturn r, 0, err\n+}\n+\n+func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n+\tEntersyscall()\n+\tSetErrno(0)\n+\tr := syscall6(trap, a1, a2, a3, a4, a5, a6)\n+\terr = GetErrno()\n+\tExitsyscall()\n+\treturn r, 0, err\n+}\n+\n+func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n+\tSetErrno(0)\n+\tr := syscall6(trap, a1, a2, a3, 0, 0, 0)\n+\terr = GetErrno()\n+\treturn r, 0, err\n+}\n+\n+func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n+\tSetErrno(0)\n+\tr := syscall6(trap, a1, a2, a3, a4, a5, a6)\n+\terr = GetErrno()\n+\treturn r, 0, err\n+}"}, {"sha": "c68ab267dd048e8447531c937605b6832f5a72bf", "filename": "libgo/go/syscall/syscall_funcs_stubs.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs_stubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs_stubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_funcs_stubs.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build aix rtems\n+\n+// These are stubs.\n+\n+package syscall\n+\n+func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n+\tz := -1\n+\treturn uintptr(z), 0, ENOSYS\n+}\n+\n+func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n+\tz := -1\n+\treturn uintptr(z), 0, ENOSYS\n+}\n+\n+func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n+\tz := -1\n+\treturn uintptr(z), 0, ENOSYS\n+}\n+\n+func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n+\tz := -1\n+\treturn uintptr(z), 0, ENOSYS\n+}"}, {"sha": "00288ee5ea7284a0e538bd210da7f89dcdaf67af", "filename": "libgo/go/syscall/syscall_stubs.go", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fsyscall%2Fsyscall_stubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b595ecaeda647070c6c4ede0c09be78dfc4f763/libgo%2Fgo%2Fsyscall%2Fsyscall_stubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_stubs.go?ref=3b595ecaeda647070c6c4ede0c09be78dfc4f763", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// +build rtems\n-\n-// These are stubs.\n-\n-package syscall\n-\n-func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr) {\n-\tz := -1\n-\treturn uintptr(z), 0, uintptr(ENOSYS)\n-}\n-\n-func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr) {\n-\tz := -1\n-\treturn uintptr(z), 0, uintptr(ENOSYS)\n-}\n-\n-func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr) {\n-\tz := -1\n-\treturn uintptr(z), 0, uintptr(ENOSYS)\n-}\n-\n-func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr) {\n-\tz := -1\n-\treturn uintptr(z), 0, uintptr(ENOSYS)\n-}"}, {"sha": "ec8f343dccd0bed8aa962561db262281fb3cd49a", "filename": "libgo/go/syscall/syscall_unix.go", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -19,51 +19,13 @@ var (\n \tStderr = 2\n )\n \n-//extern __go_syscall6\n-func syscall6(trap uintptr, a1, a2, a3, a4, a5, a6 uintptr) uintptr\n-\n const (\n \tdarwin64Bit    = runtime.GOOS == \"darwin\" && sizeofPtr == 8\n \tdragonfly64Bit = runtime.GOOS == \"dragonfly\" && sizeofPtr == 8\n \tnetbsd32Bit    = runtime.GOOS == \"netbsd\" && sizeofPtr == 4\n \tsolaris64Bit   = runtime.GOOS == \"solaris\" && sizeofPtr == 8\n )\n \n-// Do a system call.  We look at the size of uintptr to see how to pass\n-// the arguments, so that we don't pass a 64-bit value when the function\n-// expects a 32-bit one.\n-func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n-\tEntersyscall()\n-\tSetErrno(0)\n-\tr := syscall6(trap, a1, a2, a3, 0, 0, 0)\n-\terr = GetErrno()\n-\tExitsyscall()\n-\treturn r, 0, err\n-}\n-\n-func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n-\tEntersyscall()\n-\tSetErrno(0)\n-\tr := syscall6(trap, a1, a2, a3, a4, a5, a6)\n-\terr = GetErrno()\n-\tExitsyscall()\n-\treturn r, 0, err\n-}\n-\n-func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n-\tSetErrno(0)\n-\tr := syscall6(trap, a1, a2, a3, 0, 0, 0)\n-\terr = GetErrno()\n-\treturn r, 0, err\n-}\n-\n-func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n-\tSetErrno(0)\n-\tr := syscall6(trap, a1, a2, a3, a4, a5, a6)\n-\terr = GetErrno()\n-\treturn r, 0, err\n-}\n-\n // clen returns the index of the first NULL byte in n or len(n) if n contains no NULL byte.\n func clen(n []byte) int {\n \tfor i := 0; i < len(n); i++ {"}, {"sha": "c9dd8d494a95a3291b5d94c1a556fb6f13bf4d37", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -1024,6 +1024,18 @@ grep '^type _ifinfomsg ' gen-sysinfo.go | \\\n       -e 's/ifi_change/Change/' \\\n     >> ${OUT}\n \n+# The if_msghdr struct.\n+grep '^type _if_msghdr ' gen-sysinfo.go | \\\n+    sed -e 's/_if_msghdr/IfMsgHdr/' \\\n+\t\t-e 's/ifm_msglen/Msglen/' \\\n+\t\t-e 's/ifm_version/Version/' \\\n+\t\t-e 's/ifm_type/Type/' \\\n+\t\t-e 's/ifm_addrs/Addrs/' \\\n+\t\t-e 's/ifm_flags/Flags/' \\\n+\t\t-e 's/ifm_index/Index/' \\\n+\t\t-e 's/ifm_addrlen/Addrlen/' \\\n+\t\t>> ${OUT}\n+\n # The interface information types and flags.\n grep '^const _IFA' gen-sysinfo.go | \\\n     sed -e 's/^\\(const \\)_\\(IFA[^= ]*\\)\\(.*\\)$/\\1\\2 = _\\2/' >> ${OUT}"}, {"sha": "2b186ef8b81963785e2bf63211847b25911b1603", "filename": "libgo/runtime/go-varargs.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fruntime%2Fgo-varargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9195aa172bbc20627f23bfb1612180c83a0a7bab/libgo%2Fruntime%2Fgo-varargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-varargs.c?ref=9195aa172bbc20627f23bfb1612180c83a0a7bab", "patch": "@@ -96,6 +96,8 @@ __go_openat (int fd, char *path, int flags, mode_t mode)\n \n #endif\n \n+#ifdef HAVE_SYSCALL\n+\n // __go_syscall6 is called by both the runtime and syscall packages.\n // We use uintptr_t to make sure that the types match, since the Go\n // and C \"int\" types are not the same.\n@@ -106,3 +108,5 @@ __go_syscall6(uintptr_t flag, uintptr_t a1, uintptr_t a2, uintptr_t a3,\n {\n   return syscall (flag, a1, a2, a3, a4, a5, a6);\n }\n+\n+#endif"}]}