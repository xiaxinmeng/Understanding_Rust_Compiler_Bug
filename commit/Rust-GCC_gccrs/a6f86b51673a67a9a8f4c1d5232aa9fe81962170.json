{"sha": "a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmODZiNTE2NzNhNjdhOWE4ZjRjMWQ1MjMyYWE5ZmU4MTk2MjE3MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-12-09T04:08:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-09T04:08:50Z"}, "message": "re PR c++/11971 (ICE in cp_expr_size with variadic function call)\n\n        PR c++/11971\n        * tree.c (build_local_temp): Split out from build_cplus_new.\n        (force_target_expr): New fn.\n        * call.c (call_builtin_trap): Call it.  Take a type parm.\n        (convert_arg_to_ellipsis): Pass it.\n        (build_x_va_arg): Use call_builtin_trap.\n\n        PR c++/11929\n        * call.c (magic_varargs_p): New fn.\n        (build_over_call): Do no ellipsis conversions for arguments to\n        functions with magic varargs.\n\nFrom-SVN: r74462", "tree": {"sha": "5262c89801096fdf68ac6f5d2710f12823fb313e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5262c89801096fdf68ac6f5d2710f12823fb313e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b24b248db4bbf7e872cc523200e7468da686ef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b24b248db4bbf7e872cc523200e7468da686ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b24b248db4bbf7e872cc523200e7468da686ef6"}], "stats": {"total": 107, "additions": 85, "deletions": 22}, "files": [{"sha": "4b3b74ad257b6243a0f94496cd1ddbebb68467a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "patch": "@@ -1,5 +1,17 @@\n 2003-12-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/11971\n+\t* tree.c (build_local_temp): Split out from build_cplus_new.\n+\t(force_target_expr): New fn.\n+\t* call.c (call_builtin_trap): Call it.  Take a type parm.\n+\t(convert_arg_to_ellipsis): Pass it.\n+\t(build_x_va_arg): Use call_builtin_trap.\n+\n+\tPR c++/11929\n+\t* call.c (magic_varargs_p): New fn.\n+\t(build_over_call): Do no ellipsis conversions for arguments to \n+\tfunctions with magic varargs.\n+\n \t* name-lookup.c, init.c, except.c: Revert Giovanni's patch from\n \tyesterday.\n "}, {"sha": "16482ddf9f815a2f919b33ee9c04e7418e83be58", "filename": "gcc/cp/call.c", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "patch": "@@ -104,11 +104,12 @@ static tree direct_reference_binding (tree, tree);\n static bool promoted_arithmetic_type_p (tree);\n static tree conditional_conversion (tree, tree);\n static char *name_as_c_string (tree, tree, bool *);\n-static tree call_builtin_trap (void);\n+static tree call_builtin_trap (tree);\n static tree prep_operand (tree);\n static void add_candidates (tree, tree, tree, bool, tree, tree,\n \t\t\t    int, struct z_candidate **);\n static tree merge_conversion_sequences (tree, tree);\n+static bool magic_varargs_p (tree);\n \n tree\n build_vfield_ref (tree datum, tree type)\n@@ -4191,16 +4192,18 @@ convert_like_real (tree convs, tree expr, tree fn, int argnum, int inner,\n \t\t      LOOKUP_NORMAL|LOOKUP_NO_CONVERSION);\n }\n \n-/* Build a call to __builtin_trap which can be used in an expression.  */\n+/* Build a call to __builtin_trap which can be used as an expression of\n+   type TYPE.  */\n \n static tree\n-call_builtin_trap (void)\n+call_builtin_trap (tree type)\n {\n   tree fn = IDENTIFIER_GLOBAL_VALUE (get_identifier (\"__builtin_trap\"));\n \n   my_friendly_assert (fn != NULL, 20030927);\n   fn = build_call (fn, NULL_TREE);\n-  fn = build (COMPOUND_EXPR, integer_type_node, fn, integer_zero_node);\n+  fn = build (COMPOUND_EXPR, type, fn, error_mark_node);\n+  fn = force_target_expr (type, fn);\n   return fn;\n }\n \n@@ -4239,7 +4242,7 @@ convert_arg_to_ellipsis (tree arg)\n       warning (\"cannot pass objects of non-POD type `%#T' through `...'; \\\n call will abort at runtime\",\n \t       TREE_TYPE (arg));\n-      arg = call_builtin_trap ();\n+      arg = call_builtin_trap (TREE_TYPE (arg));\n     }\n \n   return arg;\n@@ -4261,8 +4264,10 @@ build_x_va_arg (tree expr, tree type)\n   if (! pod_type_p (type))\n     {\n       /* Undefined behavior [expr.call] 5.2.2/7.  */\n-      warning (\"cannot receive objects of non-POD type `%#T' through `...'\",\n-\t\t  type);\n+      warning (\"cannot receive objects of non-POD type `%#T' through `...'; \\\n+call will abort at runtime\",\n+\t       type);\n+      return call_builtin_trap (type);\n     }\n   \n   return build_va_arg (expr, type);\n@@ -4368,6 +4373,29 @@ convert_for_arg_passing (tree type, tree val)\n   return val;\n }\n \n+/* Returns true iff FN is a function with magic varargs, i.e. ones for\n+   which no conversions at all should be done.  This is true for some\n+   builtins which don't act like normal functions.  */\n+\n+static bool\n+magic_varargs_p (tree fn)\n+{\n+  if (DECL_BUILT_IN (fn))\n+    switch (DECL_FUNCTION_CODE (fn))\n+      {\n+      case BUILT_IN_CLASSIFY_TYPE:\n+      case BUILT_IN_CONSTANT_P:\n+      case BUILT_IN_NEXT_ARG:\n+      case BUILT_IN_STDARG_START:\n+      case BUILT_IN_VA_START:\n+\treturn true;\n+\n+      default:;\n+      }\n+\n+  return false;\n+}\n+\n /* Subroutine of the various build_*_call functions.  Overload resolution\n    has chosen a winning candidate CAND; build up a CALL_EXPR accordingly.\n    ARGS is a TREE_LIST of the unconverted arguments to the call.  FLAGS is a\n@@ -4517,10 +4545,14 @@ build_over_call (struct z_candidate *cand, int flags)\n \n   /* Ellipsis */\n   for (; arg; arg = TREE_CHAIN (arg))\n-    converted_args \n-      = tree_cons (NULL_TREE,\n-\t\t   convert_arg_to_ellipsis (TREE_VALUE (arg)),\n-\t\t   converted_args);\n+    {\n+      tree a = TREE_VALUE (arg);\n+      if (magic_varargs_p (fn))\n+\t/* Do no conversions for magic varargs.  */;\n+      else\n+\ta = convert_arg_to_ellipsis (a);\n+      converted_args = tree_cons (NULL_TREE, a, converted_args);\n+    }\n \n   converted_args = nreverse (converted_args);\n "}, {"sha": "a16a4858faa57a2a630034fd80de55cdff364f7f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "patch": "@@ -3692,6 +3692,7 @@ extern int walk_namespaces                      (walk_namespaces_fn,\n extern int wrapup_globals_for_namespace         (tree, void *);\n extern tree create_implicit_typedef             (tree, tree);\n extern tree maybe_push_decl                     (tree);\n+extern tree force_target_expr\t\t\t(tree, tree);\n extern tree build_target_expr_with_type         (tree, tree);\n extern int local_variable_p                     (tree);\n extern int nonstatic_local_decl_p               (tree);"}, {"sha": "7979504e3fd8047a39e6d5e2b01a379fcf2564c8", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "patch": "@@ -150,8 +150,10 @@ cxx_print_binding (FILE *stream, cxx_binding *binding, const char *prefix)\n void\n cxx_print_identifier (FILE *file, tree node, int indent)\n {\n+  indent_to (file, indent);\n   cxx_print_binding (file, IDENTIFIER_NAMESPACE_BINDINGS (node), \"bindings\");\n   print_node (file, \"class\", IDENTIFIER_CLASS_VALUE (node), indent + 4);\n+  indent_to (file, indent);\n   cxx_print_binding (file, IDENTIFIER_BINDING (node), \"local bindings\");\n   print_node (file, \"label\", IDENTIFIER_LABEL_VALUE (node), indent + 4);\n   print_node (file, \"template\", IDENTIFIER_TEMPLATE (node), indent + 4);"}, {"sha": "79d3736ff33dc57e6affede49bc12745bc44c175", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f86b51673a67a9a8f4c1d5232aa9fe81962170/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "patch": "@@ -49,6 +49,7 @@ static tree build_target_expr (tree, tree);\n static tree count_trees_r (tree *, int *, void *);\n static tree verify_stmt_tree_r (tree *, int *, void *);\n static tree find_tree_r (tree *, int *, void *);\n+static tree build_local_temp (tree);\n \n static tree handle_java_interface_attribute (tree *, tree, tree, int, bool *);\n static tree handle_com_interface_attribute (tree *, tree, tree, int, bool *);\n@@ -242,6 +243,19 @@ build_target_expr (tree decl, tree value)\n   return t;\n }\n \n+/* Return an undeclared local temporary of type TYPE for use in building a\n+   TARGET_EXPR.  */\n+\n+static tree\n+build_local_temp (tree type)\n+{\n+  tree slot = build_decl (VAR_DECL, NULL_TREE, type);\n+  DECL_ARTIFICIAL (slot) = 1;\n+  DECL_CONTEXT (slot) = current_function_decl;\n+  layout_decl (slot, 0);\n+  return slot;\n+}\n+\n /* INIT is a CALL_EXPR which needs info about its target.\n    TYPE is the type that this initialization should appear to have.\n \n@@ -269,10 +283,7 @@ build_cplus_new (tree type, tree init)\n \t     && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n \t     && DECL_CONSTRUCTOR_P (TREE_OPERAND (fn, 0)));\n \n-  slot = build_decl (VAR_DECL, NULL_TREE, type);\n-  DECL_ARTIFICIAL (slot) = 1;\n-  DECL_CONTEXT (slot) = current_function_decl;\n-  layout_decl (slot, 0);\n+  slot = build_local_temp (type);\n \n   /* We split the CALL_EXPR into its function and its arguments here.\n      Then, in expand_expr, we put them back together.  The reason for\n@@ -306,7 +317,6 @@ tree\n build_target_expr_with_type (tree init, tree type)\n {\n   tree slot;\n-  tree rval;\n \n   if (TREE_CODE (init) == TARGET_EXPR)\n     return init;\n@@ -321,13 +331,19 @@ build_target_expr_with_type (tree init, tree type)\n        aggregate; there's no additional work to be done.  */\n     return force_rvalue (init);\n \n-  slot = build_decl (VAR_DECL, NULL_TREE, type);\n-  DECL_ARTIFICIAL (slot) = 1;\n-  DECL_CONTEXT (slot) = current_function_decl;\n-  layout_decl (slot, 0);\n-  rval = build_target_expr (slot, init);\n+  slot = build_local_temp (type);\n+  return build_target_expr (slot, init);\n+}\n \n-  return rval;\n+/* Like the above function, but without the checking.  This function should\n+   only be used by code which is deliberately trying to subvert the type\n+   system, such as call_builtin_trap.  */\n+\n+tree\n+force_target_expr (tree type, tree init)\n+{\n+  tree slot = build_local_temp (type);\n+  return build_target_expr (slot, init);\n }\n \n /* Like build_target_expr_with_type, but use the type of INIT.  */"}]}