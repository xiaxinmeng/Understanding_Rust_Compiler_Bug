{"sha": "6409abe3abd76eb49daa2aaa039eaca605c68779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwOWFiZTNhYmQ3NmViNDlkYWEyYWFhMDM5ZWFjYTYwNWM2ODc3OQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-04-05T17:20:44Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-04-05T17:20:44Z"}, "message": "gcse.c (modify_mem_list): Convert to an array of VECs.\n\n\t* gcse.c (modify_mem_list): Convert to an array of VECs.\n\t(canon_modify_mem_list, compute_transp): Tweak formatting.\n\t(alloc_gcse_mem): Likewise.  Adjust for modify_mem_list change.\n\t(load_killed_in_block_p): Likewise.\n\t(record_last_mem_set_info): Likewise.\n\t(clear_modify_mem_tables): Likewise.\n\nFrom-SVN: r171992", "tree": {"sha": "43d5c703c2e16dbfaa85205628cfe726398c396b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d5c703c2e16dbfaa85205628cfe726398c396b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6409abe3abd76eb49daa2aaa039eaca605c68779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6409abe3abd76eb49daa2aaa039eaca605c68779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6409abe3abd76eb49daa2aaa039eaca605c68779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6409abe3abd76eb49daa2aaa039eaca605c68779/comments", "author": null, "committer": null, "parents": [{"sha": "170d8157ba1edcc212bc9186eaf23b488ebaa258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170d8157ba1edcc212bc9186eaf23b488ebaa258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/170d8157ba1edcc212bc9186eaf23b488ebaa258"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "baf4ad4b9a8fab88fb6d1e5bf7187b561dc9fd82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6409abe3abd76eb49daa2aaa039eaca605c68779/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6409abe3abd76eb49daa2aaa039eaca605c68779/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6409abe3abd76eb49daa2aaa039eaca605c68779", "patch": "@@ -1,3 +1,12 @@\n+2011-04-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcse.c (modify_mem_list): Convert to an array of VECs.\n+\t(canon_modify_mem_list, compute_transp): Tweak formatting.\n+\t(alloc_gcse_mem): Likewise.  Adjust for modify_mem_list change.\n+\t(load_killed_in_block_p): Likewise.\n+\t(record_last_mem_set_info): Likewise.\n+\t(clear_modify_mem_tables): Likewise.\n+\n 2011-04-05  Tom de Vries  <tom@codesourcery.com>\n \n \tPR middle-end/48461"}, {"sha": "41fff7ab86b2bf9579b5486593a8aded98d212e5", "filename": "gcc/gcse.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6409abe3abd76eb49daa2aaa039eaca605c68779/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6409abe3abd76eb49daa2aaa039eaca605c68779/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6409abe3abd76eb49daa2aaa039eaca605c68779", "patch": "@@ -382,7 +382,7 @@ static regset reg_set_bitmap;\n \n /* Array, indexed by basic block number for a list of insns which modify\n    memory within that block.  */\n-static rtx * modify_mem_list;\n+static VEC (rtx,heap) **modify_mem_list;\n static bitmap modify_mem_list_set;\n \n typedef struct modify_pair_s\n@@ -396,7 +396,7 @@ DEF_VEC_ALLOC_O(modify_pair,heap);\n \n /* This array parallels modify_mem_list, except that it stores MEMs\n    being set and their canonicalized memory addresses.  */\n-static VEC(modify_pair,heap) **canon_modify_mem_list;\n+static VEC (modify_pair,heap) **canon_modify_mem_list;\n \n /* Bitmap indexed by block numbers to record which blocks contain\n    function calls.  */\n@@ -595,8 +595,8 @@ alloc_gcse_mem (void)\n \n   /* Allocate array to keep a list of insns which modify memory in each\n      basic block.  */\n-  modify_mem_list = GCNEWVEC (rtx, last_basic_block);\n-  canon_modify_mem_list = GCNEWVEC (VEC(modify_pair,heap) *,\n+  modify_mem_list = GCNEWVEC (VEC (rtx,heap) *, last_basic_block);\n+  canon_modify_mem_list = GCNEWVEC (VEC (modify_pair,heap) *,\n \t\t\t\t    last_basic_block);\n   modify_mem_list_set = BITMAP_ALLOC (NULL);\n   blocks_with_calls = BITMAP_ALLOC (NULL);\n@@ -991,26 +991,22 @@ mems_conflict_for_gcse_p (rtx dest, const_rtx setter ATTRIBUTE_UNUSED,\n static int\n load_killed_in_block_p (const_basic_block bb, int uid_limit, const_rtx x, int avail_p)\n {\n-  rtx list_entry = modify_mem_list[bb->index];\n+  VEC (rtx,heap) *list = modify_mem_list[bb->index];\n+  rtx setter;\n+  unsigned ix;\n \n   /* If this is a readonly then we aren't going to be changing it.  */\n   if (MEM_READONLY_P (x))\n     return 0;\n \n-  while (list_entry)\n+  FOR_EACH_VEC_ELT_REVERSE (rtx, list, ix, setter)\n     {\n-      rtx setter;\n       /* Ignore entries in the list that do not apply.  */\n       if ((avail_p\n-\t   && DF_INSN_LUID (XEXP (list_entry, 0)) < uid_limit)\n+\t   && DF_INSN_LUID (setter) < uid_limit)\n \t  || (! avail_p\n-\t      && DF_INSN_LUID (XEXP (list_entry, 0)) > uid_limit))\n-\t{\n-\t  list_entry = XEXP (list_entry, 1);\n-\t  continue;\n-\t}\n-\n-      setter = XEXP (list_entry, 0);\n+\t      && DF_INSN_LUID (setter) > uid_limit))\n+\tcontinue;\n \n       /* If SETTER is a call everything is clobbered.  Note that calls\n \t to pure functions are never put on the list, so we need not\n@@ -1028,7 +1024,6 @@ load_killed_in_block_p (const_basic_block bb, int uid_limit, const_rtx x, int av\n       note_stores (PATTERN (setter), mems_conflict_for_gcse_p, NULL);\n       if (gcse_mems_conflict_p)\n \treturn 1;\n-      list_entry = XEXP (list_entry, 1);\n     }\n   return 0;\n }\n@@ -1480,7 +1475,7 @@ record_last_mem_set_info (rtx insn)\n \n   /* load_killed_in_block_p will handle the case of calls clobbering\n      everything.  */\n-  modify_mem_list[bb] = alloc_INSN_LIST (insn, modify_mem_list[bb]);\n+  VEC_safe_push (rtx, heap, modify_mem_list[bb], insn);\n   bitmap_set_bit (modify_mem_list_set, bb);\n \n   if (CALL_P (insn))\n@@ -1621,7 +1616,7 @@ clear_modify_mem_tables (void)\n \n   EXECUTE_IF_SET_IN_BITMAP (modify_mem_list_set, 0, i, bi)\n     {\n-      free_INSN_LIST_list (modify_mem_list + i);\n+      VEC_free (rtx, heap, modify_mem_list[i]);\n       VEC_free (modify_pair, heap, canon_modify_mem_list[i]);\n     }\n   bitmap_clear (modify_mem_list_set);\n@@ -1693,7 +1688,7 @@ compute_transp (const_rtx x, int indx, sbitmap *bmap)\n \t\t\t\t\t    blocks_with_calls,\n \t\t\t\t\t    0, bb_index, bi)\n \t      {\n-\t\tVEC(modify_pair,heap) *list\n+\t\tVEC (modify_pair,heap) *list\n \t\t  = canon_modify_mem_list[bb_index];\n \t\tmodify_pair *pair;\n \t\tunsigned ix;"}]}