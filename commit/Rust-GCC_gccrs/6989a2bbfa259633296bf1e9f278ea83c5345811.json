{"sha": "6989a2bbfa259633296bf1e9f278ea83c5345811", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4OWEyYmJmYTI1OTYzMzI5NmJmMWU5ZjI3OGVhODNjNTM0NTgxMQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-08-21T14:47:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:47:50Z"}, "message": "[Ada] Fix scope computation for loop statements\n\n2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Build_Predicate_Functioss): Apply\n\tReset_Quantified_Variables_Scope after predicate function has\n\tbeen analyzed, so that the scope can be reset on the generated\n\tloop statements that have replaced the quantified expressions.\n\nFrom-SVN: r263729", "tree": {"sha": "13f055352de3eb952d2701efd3c782195942d2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f055352de3eb952d2701efd3c782195942d2cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6989a2bbfa259633296bf1e9f278ea83c5345811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6989a2bbfa259633296bf1e9f278ea83c5345811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6989a2bbfa259633296bf1e9f278ea83c5345811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6989a2bbfa259633296bf1e9f278ea83c5345811/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09825f923fadac7b79a894c4e7f6e0839c2837ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09825f923fadac7b79a894c4e7f6e0839c2837ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09825f923fadac7b79a894c4e7f6e0839c2837ac"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "48974e7e41dfa7ae788b9a0465ccf3f51e9d298a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989a2bbfa259633296bf1e9f278ea83c5345811/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989a2bbfa259633296bf1e9f278ea83c5345811/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6989a2bbfa259633296bf1e9f278ea83c5345811", "patch": "@@ -1,3 +1,10 @@\n+2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Functioss): Apply\n+\tReset_Quantified_Variables_Scope after predicate function has\n+\tbeen analyzed, so that the scope can be reset on the generated\n+\tloop statements that have replaced the quantified expressions.\n+\n 2018-08-21  Bob Duff  <duff@adacore.com>\n \n \t* einfo.ads, einfo.adb (Private_View, Shadow_Entities): Remove"}, {"sha": "1a1262218aa5cf21b6d08f01e714ffbcbc56cec6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989a2bbfa259633296bf1e9f278ea83c5345811/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989a2bbfa259633296bf1e9f278ea83c5345811/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=6989a2bbfa259633296bf1e9f278ea83c5345811", "patch": "@@ -8754,7 +8754,6 @@ package body Sem_Ch13 is\n       --  Case where predicates are present\n \n       if Present (Expr) then\n-\n          --  Test for raise expression present\n \n          Test_REs (Expr);\n@@ -8856,6 +8855,42 @@ package body Sem_Ch13 is\n \n             Insert_After_And_Analyze (N, FBody);\n \n+            --  The defining identifier of a quantified expression carries the\n+            --  scope in which the type appears, but when unnesting we need\n+            --  to indicate that its proper scope is the constructed predicate\n+            --  function. The quantified expressions have been converted into\n+            --  loops during analysis and expansion.\n+\n+            declare\n+               function Reset_Quantified_Variable_Scope (N : Node_Id)\n+                 return Traverse_Result;\n+\n+               procedure Reset_Quantified_Variables_Scope is\n+                 new Traverse_Proc (Reset_Quantified_Variable_Scope);\n+\n+               -------------------------------------\n+               -- Reset_Quantified_Variable_Scope --\n+               -------------------------------------\n+\n+               function Reset_Quantified_Variable_Scope (N : Node_Id)\n+                 return Traverse_Result\n+               is\n+               begin\n+                  if Nkind_In (N, N_Iterator_Specification,\n+                                  N_Loop_Parameter_Specification)\n+                  then\n+                     Set_Scope (Defining_Identifier (N),\n+                       Predicate_Function (Typ));\n+                  end if;\n+                  return OK;\n+               end Reset_Quantified_Variable_Scope;\n+\n+            begin\n+               if Unnest_Subprogram_Mode then\n+                  Reset_Quantified_Variables_Scope (Expr);\n+               end if;\n+            end;\n+\n             --  within a generic unit, prevent a double analysis of the body\n             --  which will not be marked analyzed yet. This will happen when\n             --  the freeze node is created during the preanalysis of an\n@@ -8972,6 +9007,8 @@ package body Sem_Ch13 is\n \n                Insert_Before_And_Analyze (N, FDecl);\n                Insert_After_And_Analyze  (N, FBody);\n+\n+               --  Should quantified expressions be handled here as well ???\n             end;\n          end if;\n "}]}