{"sha": "05b28fd6f91016151e758c2414d7245a54512c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDViMjhmZDZmOTEwMTYxNTFlNzU4YzI0MTRkNzI0NWE1NDUxMmM5OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-07-27T12:40:45Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-07-27T12:40:45Z"}, "message": "re PR c++/66555 (Fails to warn for if (j == 0 && i == i))\n\n\tPR c++/66555\n\tPR c/54979\n\t* c-common.c (find_array_ref_with_const_idx_r): New function.\n\t(warn_tautological_cmp): New function.\n\t* c-common.h (warn_tautological_cmp): Declare.\n\t* c.opt (Wtautological-compare): New option.\n\n\t* c-typeck.c (parser_build_binary_op): Call warn_tautological_cmp.\n\n\t* call.c (build_new_op_1): Call warn_tautological_cmp.\n\t* pt.c (tsubst_copy_and_build): Use sentinel to suppress tautological\n\tcompare warnings.\n\n\t* doc/invoke.texi: Document -Wtautological-compare.\n\n\t* c-c++-common/Wtautological-compare-1.c: New test.\n\nFrom-SVN: r226242", "tree": {"sha": "a50a804e0d3bacf0015564dabec36d9c9121f14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a50a804e0d3bacf0015564dabec36d9c9121f14d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05b28fd6f91016151e758c2414d7245a54512c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b28fd6f91016151e758c2414d7245a54512c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b28fd6f91016151e758c2414d7245a54512c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b28fd6f91016151e758c2414d7245a54512c99/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fd357f27d55de9d05662ebce1f166974891f52e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd357f27d55de9d05662ebce1f166974891f52e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd357f27d55de9d05662ebce1f166974891f52e"}], "stats": {"total": 201, "additions": 198, "deletions": 3}, "files": [{"sha": "177f71c87386fa9a4a53e94e0466737d3d7c4f46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1,3 +1,9 @@\n+2015-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/66555\n+\tPR c/54979\n+\t* doc/invoke.texi: Document -Wtautological-compare.\n+\n 2015-07-27  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (decision_tree::gen_gimple): Split out large"}, {"sha": "4d2ed59ea7a28fc627262aacb873f35ace5e9cbb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1,3 +1,12 @@\n+2015-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/66555\n+\tPR c/54979\n+\t* c-common.c (find_array_ref_with_const_idx_r): New function.\n+\t(warn_tautological_cmp): New function.\n+\t* c-common.h (warn_tautological_cmp): Declare.\n+\t* c.opt (Wtautological-compare): New option.\n+\n 2015-07-23  Marek Polacek  <polacek@redhat.com>\n \n \t* c-ubsan.c (ubsan_instrument_division): Use unshare_expr throughout."}, {"sha": "6a79b95c27cecd662961e56f438da64716a8a8e2", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1861,6 +1861,70 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n     }\n }\n \n+/* Helper function for warn_tautological_cmp.  Look for ARRAY_REFs\n+   with constant indices.  */\n+\n+static tree\n+find_array_ref_with_const_idx_r (tree *expr_p, int *walk_subtrees, void *data)\n+{\n+  tree expr = *expr_p;\n+\n+  if ((TREE_CODE (expr) == ARRAY_REF\n+       || TREE_CODE (expr) == ARRAY_RANGE_REF)\n+      && TREE_CODE (TREE_OPERAND (expr, 1)) == INTEGER_CST)\n+    {\n+      *(bool *) data = true;\n+      *walk_subtrees = 0;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Warn if a self-comparison always evaluates to true or false.  LOC\n+   is the location of the comparison with code CODE, LHS and RHS are\n+   operands of the comparison.  */\n+\n+void\n+warn_tautological_cmp (location_t loc, enum tree_code code, tree lhs, tree rhs)\n+{\n+  if (TREE_CODE_CLASS (code) != tcc_comparison)\n+    return;\n+\n+  /* We do not warn for constants because they are typical of macro\n+     expansions that test for features, sizeof, and similar.  */\n+  if (CONSTANT_CLASS_P (lhs) || CONSTANT_CLASS_P (rhs))\n+    return;\n+\n+  /* Don't warn for e.g.\n+     HOST_WIDE_INT n;\n+     ...\n+     if (n == (long) n) ...\n+   */\n+  if ((CONVERT_EXPR_P (lhs) || TREE_CODE (lhs) == NON_LVALUE_EXPR)\n+      || (CONVERT_EXPR_P (rhs) || TREE_CODE (rhs) == NON_LVALUE_EXPR))\n+    return;\n+\n+  if (operand_equal_p (lhs, rhs, 0))\n+    {\n+      /* Don't warn about array references with constant indices;\n+\t these are likely to come from a macro.  */\n+      bool found = false;\n+      walk_tree_without_duplicates (&lhs, find_array_ref_with_const_idx_r,\n+\t\t\t\t    &found);\n+      if (found)\n+\treturn;\n+      const bool always_true = (code == EQ_EXPR || code == LE_EXPR\n+\t\t\t\t|| code == GE_EXPR || code == UNLE_EXPR\n+\t\t\t\t|| code == UNGE_EXPR || code == UNEQ_EXPR);\n+      if (always_true)\n+\twarning_at (loc, OPT_Wtautological_compare,\n+\t\t    \"self-comparison always evaluates to true\");\n+      else\n+\twarning_at (loc, OPT_Wtautological_compare,\n+\t\t    \"self-comparison always evaluates to false\");\n+    }\n+}\n+\n /* Warn about logical not used on the left hand side operand of a comparison.\n    This function assumes that the LHS is inside of TRUTH_NOT_EXPR.\n    Do not warn if RHS is of a boolean type.  */"}, {"sha": "f0640c7f86cfb690bacb05304986bf5be0e474a0", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -812,6 +812,7 @@ extern bool warn_if_unused_value (const_tree, location_t);\n extern void warn_logical_operator (location_t, enum tree_code, tree,\n \t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n extern void warn_logical_not_parentheses (location_t, enum tree_code, tree);\n+extern void warn_tautological_cmp (location_t, enum tree_code, tree, tree);\n extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n extern bool vector_types_compatible_elements_p (tree, tree);"}, {"sha": "cb3af48dc4766b00a0c5d9ed012aaed917e82109", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -848,6 +848,10 @@ Wsystem-headers\n C ObjC C++ ObjC++ Warning\n ; Documented in common.opt\n \n+Wtautological-compare\n+C ObjC C++ ObjC++ Var(warn_tautological_compare) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn if a comparison always evaluates to true or false\n+\n Wterminate\n C++ ObjC++ Warning Var(warn_terminate) Init(1)\n Warn if a throw expression will always result in a call to terminate()"}, {"sha": "08d62460768770fe1eac64e18a65085dca48d9b9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1,3 +1,9 @@\n+2015-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/66555\n+\tPR c/54979\n+\t* c-typeck.c (parser_build_binary_op): Call warn_tautological_cmp.\n+\n 2015-07-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/55095"}, {"sha": "e8c818989ee9b7ca62f9eed3b1ba4ac2744c8d9c", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -3430,6 +3430,9 @@ parser_build_binary_op (location_t location, enum tree_code code,\n     warn_logical_operator (location, code, TREE_TYPE (result.value),\n \t\t\t   code1, arg1.value, code2, arg2.value);\n \n+  if (warn_tautological_compare)\n+    warn_tautological_cmp (location, code, arg1.value, arg2.value);\n+\n   if (warn_logical_not_paren\n       && TREE_CODE_CLASS (code) == tcc_comparison\n       && code1 == TRUTH_NOT_EXPR"}, {"sha": "2c5fae1274d0c2106180e740cef6f1920d46bd91", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1,3 +1,11 @@\n+2015-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/66555\n+\tPR c/54979\n+\t* call.c (build_new_op_1): Call warn_tautological_cmp.\n+\t* pt.c (tsubst_copy_and_build): Use sentinel to suppress tautological\n+\tcompare warnings.\n+\n 2015-07-26  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/18969"}, {"sha": "1be2527358a9339a6ac27c0319b0e59f07608b1e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -5651,6 +5651,8 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n \t  && ((code_orig_arg1 == BOOLEAN_TYPE)\n \t      ^ (code_orig_arg2 == BOOLEAN_TYPE)))\n \tmaybe_warn_bool_compare (loc, code, arg1, arg2);\n+      if (complain & tf_warning && warn_tautological_compare)\n+\twarn_tautological_cmp (loc, code, arg1, arg2);\n       /* Fall through.  */\n     case PLUS_EXPR:\n     case MINUS_EXPR:"}, {"sha": "f15d16fe269606941f98aa2062e874a623100788", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -14918,6 +14918,7 @@ tsubst_copy_and_build (tree t,\n \twarning_sentinel s1(warn_type_limits);\n \twarning_sentinel s2(warn_div_by_zero);\n \twarning_sentinel s3(warn_logical_op);\n+\twarning_sentinel s4(warn_tautological_compare);\n \ttree op0 = RECUR (TREE_OPERAND (t, 0));\n \ttree op1 = RECUR (TREE_OPERAND (t, 1));\n \ttree r = build_x_binary_op"}, {"sha": "e988444bdb71b6fcbd8332b8294af3a5dc4cb0d5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -283,7 +283,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wsuggest-final-types @gol -Wsuggest-final-methods -Wsuggest-override @gol\n -Wmissing-format-attribute @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum -Wswitch-bool -Wsync-nand @gol\n--Wsystem-headers  -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef @gol\n+-Wsystem-headers  -Wtautological-compare  -Wtrampolines  -Wtrigraphs @gol\n+-Wtype-limits  -Wundef @gol\n -Wuninitialized  -Wunknown-pragmas  -Wno-pragmas @gol\n -Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n -Wunused-label  -Wunused-local-typedefs -Wunused-parameter @gol\n@@ -3452,6 +3453,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wenum-compare @r{(in C/ObjC; this is on by default in C++)} @gol\n -Wimplicit-int @r{(C and Objective-C only)} @gol\n -Wimplicit-function-declaration @r{(C and Objective-C only)} @gol\n+-Wbool-compare  @gol\n -Wcomment  @gol\n -Wformat   @gol\n -Wmain @r{(only for C/ObjC and unless} @option{-ffreestanding}@r{)}  @gol\n@@ -3468,6 +3470,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wstrict-aliasing  @gol\n -Wstrict-overflow=1  @gol\n -Wswitch  @gol\n+-Wtautological-compare  @gol\n -Wtrigraphs  @gol\n -Wuninitialized  @gol\n -Wunknown-pragmas  @gol\n@@ -4513,6 +4516,18 @@ code.  However, note that using @option{-Wall} in conjunction with this\n option does @emph{not} warn about unknown pragmas in system\n headers---for that, @option{-Wunknown-pragmas} must also be used.\n \n+@item -Wtautological-compare\n+@opindex Wtautological-compare\n+@opindex Wno-tautological-compare\n+Warn if a self-comparison always evaluates to true or false.  This\n+warning detects various mistakes such as:\n+@smallexample\n+int i = 1;\n+@dots{}\n+if (i > i) @{ @dots{} @}\n+@end smallexample\n+This warning is enabled by @option{-Wall}.\n+\n @item -Wtrampolines\n @opindex Wtrampolines\n @opindex Wno-trampolines"}, {"sha": "8b572c28fee43cc83177fd97e7018778fcc8f7d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1,3 +1,9 @@\n+2015-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/66555\n+\tPR c/54979\n+\t* c-c++-common/Wtautological-compare-1.c: New test.\n+\n 2015-07-26  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/18969"}, {"sha": "71ba4f80484f4f9bd41d33c22d24db8b249554d4", "filename": "gcc/testsuite/c-c++-common/Wtautological-compare-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWtautological-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWtautological-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWtautological-compare-1.c?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -0,0 +1,70 @@\n+/* PR c++/66555 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtautological-compare\" } */\n+\n+#define X 5\n+#define Y 5\n+#define A a\n+enum { U };\n+\n+void\n+fn1 (int a, int *p)\n+{\n+  if (a > a); /* { dg-warning \"self-comparison always evaluates to false\" } */\n+  if (a < a); /* { dg-warning \"self-comparison always evaluates to false\" } */\n+  if (a >= a); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if (a <= a); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if (a == a); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if (a != a); /* { dg-warning \"self-comparison always evaluates to false\" } */\n+  if (A == A); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if ((unsigned) a != (unsigned) a);\n+  if ((a + 1) <= (a + 1)); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if (1 ? a == a : 0); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if (fn1 == fn1); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if (*p == *p); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+\n+  volatile int v = 5;\n+  if (v == v);\n+  if (v != v);\n+}\n+\n+void\n+fn2 (int a)\n+{\n+  if (sizeof (int) >= 4);\n+  if (sizeof (char) != 1);\n+  if (sizeof (long) != sizeof (long long));\n+  if (0 < sizeof (short));\n+  if (5 != 5);\n+  if (X > 5);\n+  if (X == X);\n+  if (3 + 4 == 6 + 1);\n+  if ((unsigned) a != (unsigned long) a);\n+  if (U == U);\n+  if (U > 0);\n+}\n+\n+void\n+fn3 (int i, int j)\n+{\n+  static int a[16];\n+  static int b[8][8];\n+\n+  if (a[5] == a[5]);\n+  if (a[X] != a[Y]);\n+  if (a[X] != a[X]);\n+  if (a[i] == a[i]); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+  if (b[5][5] == b[5][5]);\n+  if (b[X][Y] >= b[Y][X]);\n+  if (b[X][X] == b[Y][Y]);\n+  if (b[i][j] != b[i][j]); /* { dg-warning \"self-comparison always evaluates to false\" } */\n+  if (b[i][Y] < b[i][X]);\n+  if (b[X][j] < b[X][j]);\n+  if ((a[i] + 4) == (4 + a[i])); /* { dg-warning \"self-comparison always evaluates to true\" } */\n+}\n+\n+int\n+fn4 (int x, int y)\n+{\n+  return x > x ? 1 : 0; /* { dg-warning \"self-comparison always evaluates to false\" } */\n+}"}, {"sha": "63227303225b8189b5c77dabefb4372e2f1d85a1", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-54581.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-54581.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-54581.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-54581.C?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target c++11 } } */\n-/* { dg-options \"-Wall\" } */\n+/* { dg-options \"-Wall -Wno-tautological-compare\" } */\n \n typedef float v4f __attribute__((vector_size(4*sizeof(float))));\n "}, {"sha": "77b0f5153ca1231b506629ecec8b7be199749c85", "filename": "gcc/testsuite/g++.dg/other/vector-compare.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvector-compare.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b28fd6f91016151e758c2414d7245a54512c99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvector-compare.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvector-compare.C?ref=05b28fd6f91016151e758c2414d7245a54512c99", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target c++11 } } */\n-/* { dg-options \"-Wall\" } */\n+/* { dg-options \"-Wall -Wno-tautological-compare\" } */\n \n // Check that we can compare vector types that really are the same through\n // typedefs."}]}