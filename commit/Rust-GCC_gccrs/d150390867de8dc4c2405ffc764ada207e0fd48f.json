{"sha": "d150390867de8dc4c2405ffc764ada207e0fd48f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1MDM5MDg2N2RlOGRjNGMyNDA1ZmZjNzY0YWRhMjA3ZTBmZDQ4Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-02-20T11:11:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-02-20T11:11:39Z"}, "message": "re PR libstdc++/52309 ([c++0x] unordered_set illegally requires value_type::operator!=)\n\n2012-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/52309\n\t* include/bits/hashtable_policy.h (_Equality_base<, true,>::\n    \t_M_equal(const _Hashtable&)): Compare values with operator==.\n\t* testsuite/23_containers/unordered_set/operators/52309.cc: New.\n\nFrom-SVN: r184388", "tree": {"sha": "a4197f7757f45f2a2b9d6f3a50e90ddb1911bb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4197f7757f45f2a2b9d6f3a50e90ddb1911bb83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d150390867de8dc4c2405ffc764ada207e0fd48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d150390867de8dc4c2405ffc764ada207e0fd48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d150390867de8dc4c2405ffc764ada207e0fd48f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d150390867de8dc4c2405ffc764ada207e0fd48f/comments", "author": null, "committer": null, "parents": [{"sha": "c578750f9cc7a6e3c214a5b7e580ac739762c732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c578750f9cc7a6e3c214a5b7e580ac739762c732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c578750f9cc7a6e3c214a5b7e580ac739762c732"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "b301599de06f134ad493e797ca256be638f53ac8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d150390867de8dc4c2405ffc764ada207e0fd48f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d150390867de8dc4c2405ffc764ada207e0fd48f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d150390867de8dc4c2405ffc764ada207e0fd48f", "patch": "@@ -1,10 +1,17 @@\n+2012-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/52309\n+\t* include/bits/hashtable_policy.h (_Equality_base<, true,>::\n+    \t_M_equal(const _Hashtable&)): Compare values with operator==.\n+\t* testsuite/23_containers/unordered_set/operators/52309.cc: New.\n+\n 2012-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/51798 continued.\n \t* acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Grep for\n \t__atomic_, not __sync.\n \t* configure: Regenerated.\n-\t\n+\n 2012-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/47058"}, {"sha": "b585d23a970f393c3a98598cbf17d31891013d86", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d150390867de8dc4c2405ffc764ada207e0fd48f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d150390867de8dc4c2405ffc764ada207e0fd48f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=d150390867de8dc4c2405ffc764ada207e0fd48f", "patch": "@@ -1113,7 +1113,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       for (auto __itx = __this->begin(); __itx != __this->end(); ++__itx)\n \t{\n \t  const auto __ity = __other.find(_ExtractKey()(*__itx));\n-\t  if (__ity == __other.end() || *__ity != *__itx)\n+\t  if (__ity == __other.end() || !bool(*__ity == *__itx))\n \t    return false;\n \t}\n       return true;\n@@ -1151,7 +1151,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfor (_Uiterator __it1 = __first1; __it1 != __last1; ++__it1)\n \t  {\n \t    _Uiterator __tmp =  __first1;\n-\t    while (__tmp != __it1 && !(*__tmp == *__it1))\n+\t    while (__tmp != __it1 && !bool(*__tmp == *__it1))\n \t      ++__tmp;\n \n \t    // We've seen this one before."}, {"sha": "5b16f0b3cd96707c5896fad87833930762283d3c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/operators/52309.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d150390867de8dc4c2405ffc764ada207e0fd48f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Foperators%2F52309.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d150390867de8dc4c2405ffc764ada207e0fd48f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Foperators%2F52309.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Foperators%2F52309.cc?ref=d150390867de8dc4c2405ffc764ada207e0fd48f", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+\n+// libstdc++/52309\n+struct value {};\n+struct hash { std::size_t operator()(const value&) const; };\n+bool operator==(value const&, value const&);\n+std::unordered_set<value, hash> set;\n+bool z = (set == set);"}]}