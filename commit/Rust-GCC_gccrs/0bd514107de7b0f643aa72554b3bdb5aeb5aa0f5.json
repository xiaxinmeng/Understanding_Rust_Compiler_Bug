{"sha": "0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5", "node_id": "C_kwDOANBUbNoAKDBiZDUxNDEwN2RlN2IwZjY0M2FhNzI1NTRiM2JkYjVhZWI1YWEwZjU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-06T07:24:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-06T07:28:06Z"}, "message": "openmp: Be consistent on parsing offsets between normal sink vector and omp_cur_iteration - 1\n\nFor normal sink vectors, we just check that the token is CPP_NUMBER and with\nINTEGER_CST value, while for omp_cur_iteration I was additionally requiring\ninteger_type_node type (so only 1, 001, 0x0001 but not 1L or 1ULL etc.).\nI think we need to clarify what we actually should allow in the standard, until\nthen it is better to be consistent.\n\n2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/c/\n\t* c-parser.cc (c_parser_omp_clause_doacross_sink): Don't verify val\n\tin omp_cur_iteration - 1 has integer_type_node type.\ngcc/cp/\n\t* parser.cc (cp_parser_omp_clause_doacross_sink): Don't verify val\n\tin omp_cur_iteration - 1 has integer_type_node type.\ngcc/testsuite/\n\t* c-c++-common/gomp/doacross-6.c (corge): Don't expect an error here.\n\tAdd a few further tests.", "tree": {"sha": "48b3325fdb7e433a3ee06c4e74e6be99310a858d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b3325fdb7e433a3ee06c4e74e6be99310a858d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bf8b7adc2de6f2ddaffa3af131b6855ae3e3793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf8b7adc2de6f2ddaffa3af131b6855ae3e3793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf8b7adc2de6f2ddaffa3af131b6855ae3e3793"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "72db5b527f8c4a425b8bc6b65bbcbe64962b0a26", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5", "patch": "@@ -15993,8 +15993,7 @@ c_parser_omp_clause_doacross_sink (c_parser *parser, location_t clause_loc,\n \t  && c_parser_peek_nth_token (parser, 4)->type == CPP_CLOSE_PAREN)\n \t{\n \t  tree val = c_parser_peek_nth_token (parser, 3)->value;\n-\t  if (integer_onep (val)\n-\t      && comptypes (TREE_TYPE (val), integer_type_node))\n+\t  if (integer_onep (val))\n \t    {\n \t      c_parser_consume_token (parser);\n \t      c_parser_consume_token (parser);"}, {"sha": "289c2142e4530ac4fe6e6c6374f0300f96b2e234", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5", "patch": "@@ -39355,8 +39355,7 @@ cp_parser_omp_clause_doacross_sink (cp_parser *parser, location_t clause_loc,\n \t  && cp_lexer_nth_token_is (parser->lexer, 4, CPP_CLOSE_PAREN))\n \t{\n \t  tree val = cp_lexer_peek_nth_token (parser->lexer, 3)->u.value;\n-\t  if (integer_onep (val)\n-\t      && same_type_p (TREE_TYPE (val), integer_type_node))\n+\t  if (integer_onep (val))\n \t    {\n \t      cp_lexer_consume_token (parser->lexer);\n \t      cp_lexer_consume_token (parser->lexer);"}, {"sha": "65ee8979a4f39803683df58f5970d9f0cb1c4781", "filename": "gcc/testsuite/c-c++-common/gomp/doacross-6.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-6.c?ref=0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5", "patch": "@@ -81,6 +81,26 @@ corge (int n)\n   #pragma omp for ordered\n   for (i = 0; i < 8; i += n)\n     {\n-      #pragma omp ordered doacross(sink:omp_cur_iteration - 1LL)\t/* { dg-error \"'omp_cur_iteration' undeclared \\\\\\(first use in this function\\\\\\)\" \"\" { target c } } */\n-    }\t\t\t\t\t\t\t\t\t/* { dg-error \"'omp_cur_iteration' has not been declared\" \"\" { target c++ } .-1 } */\n+      #pragma omp ordered doacross(sink:omp_cur_iteration - 1)\n+    }\n+  #pragma omp for ordered\n+  for (i = 0; i < 8; i += n)\n+    {\n+      #pragma omp ordered doacross(sink:omp_cur_iteration - 1LL)\n+    }\n+  #pragma omp for ordered\n+  for (i = 0; i < 8; i += n)\n+    {\n+      #pragma omp ordered doacross(sink:omp_cur_iteration - 0x00001)\n+    }\n+  #pragma omp for ordered\n+  for (i = 0; i < 8; i += n)\n+    {\n+      #pragma omp ordered doacross(sink:omp_cur_iteration - 001)\n+    }\n+  #pragma omp for ordered\n+  for (i = 0; i < 8; i += n)\n+    {\n+      #pragma omp ordered doacross(sink:omp_cur_iteration - 1ULL)\n+    }\n }"}]}