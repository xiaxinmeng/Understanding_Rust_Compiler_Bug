{"sha": "c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5YTAwMzM3YWExY2Q1NzljYjUxY2U1YWE3MWE4MTI2MWI5N2ZlMw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-12-27T22:40:21Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-12-27T22:40:21Z"}, "message": "re PR fortran/54756 ([OOP] [F08] Should reject CLASS, intent(out) in PURE procedures)\n\n2014-12-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/54756\n\t* resolve.c (resolve_formal_arglist): Reject polymorphic INTENT(OUT)\n\targuments of pure procedures.\n\n2014-12-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/54756\n\t* gfortran.dg/class_array_3.f03: Fixed invalid test case.\n\t* gfortran.dg/class_array_7.f03: Ditto.\n\t* gfortran.dg/class_dummy_4.f03: Ditto.\n\t* gfortran.dg/defined_assignment_3.f90: Ditto.\n\t* gfortran.dg/defined_assignment_5.f90: Ditto.\n\t* gfortran.dg/elemental_subroutine_10.f90: Ditto.\n\t* gfortran.dg/typebound_operator_4.f03: Ditto.\n\t* gfortran.dg/typebound_proc_16.f03: Ditto.\n\t* gfortran.dg/unlimited_polymorphic_19.f90: Ditto.\n\t* gfortran.dg/class_dummy_5.f90: New test.\n\nFrom-SVN: r219085", "tree": {"sha": "f236c561664ad5e7b935c8e3abb09856fcc8631d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f236c561664ad5e7b935c8e3abb09856fcc8631d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4aa0a5016c595477c0638765b6ceef8e0fb3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4aa0a5016c595477c0638765b6ceef8e0fb3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4aa0a5016c595477c0638765b6ceef8e0fb3c0"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "6912797a456274231dfa3a5866dfa040ffe5eab1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -1,3 +1,9 @@\n+2014-12-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54756\n+\t* resolve.c (resolve_formal_arglist): Reject polymorphic INTENT(OUT)\n+\targuments of pure procedures.\n+\n 2014-12-22  Tobias Burnus  <burnus@net-b.de>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get, conv_caf_send):"}, {"sha": "05a948b749d2c98afa4a74e2d7377f3ffd06aaa7", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -414,6 +414,15 @@ resolve_formal_arglist (gfc_symbol *proc)\n \t\t\t       &sym->declared_at);\n \t\t}\n \t    }\n+\n+\t  /* F08:C1278a.  */\n+\t  if (sym->ts.type == BT_CLASS && sym->attr.intent == INTENT_OUT)\n+\t    {\n+\t      gfc_error (\"INTENT(OUT) argument '%s' of pure procedure %qs at %L\"\n+\t\t\t \" may not be polymorphic\", sym->name, proc->name,\n+\t\t\t &sym->declared_at);\n+\t      continue;\n+\t    }\n \t}\n \n       if (proc->attr.implicit_pure)"}, {"sha": "4422c960deb56fbf1018f133a9cb74ec88209d30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -1,3 +1,17 @@\n+2014-12-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54756\n+\t* gfortran.dg/class_array_3.f03: Fixed invalid test case.\n+\t* gfortran.dg/class_array_7.f03: Ditto.\n+\t* gfortran.dg/class_dummy_4.f03: Ditto.\n+\t* gfortran.dg/defined_assignment_3.f90: Ditto.\n+\t* gfortran.dg/defined_assignment_5.f90: Ditto.\n+\t* gfortran.dg/elemental_subroutine_10.f90: Ditto.\n+\t* gfortran.dg/typebound_operator_4.f03: Ditto.\n+\t* gfortran.dg/typebound_proc_16.f03: Ditto.\n+\t* gfortran.dg/unlimited_polymorphic_19.f90: Ditto.\n+\t* gfortran.dg/class_dummy_5.f90: New test.\n+\n 2014-12-27  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* lib/ubsan-dg.exp (check_effective_target_fsanitize_undefined):"}, {"sha": "cab2b1be874cc27ff7b7c9e6cc288d37280bba6c", "filename": "gcc/testsuite/gfortran.dg/class_array_3.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_3.f03?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -29,7 +29,7 @@ impure elemental logical function lt_cmp(a,b)\n    end function lt_cmp\n  end interface\n  interface\n-   elemental subroutine assign(a,b)\n+   impure elemental subroutine assign(a,b)\n      import\n      class(sort_t), intent(out) :: a\n      class(sort_t), intent(in) :: b\n@@ -100,7 +100,7 @@ elemental integer function disp_int(a)\n      class(sort_int_t), intent(in) :: a\n      disp_int = a%i\n  end function disp_int\n- elemental subroutine assign_int (a, b)\n+ impure elemental subroutine assign_int (a, b)\n    class(sort_int_t), intent(out) :: a\n    class(sort_t), intent(in) :: b         ! TODO: gfortran does not throw 'class(sort_int_t)'\n    select type (b)"}, {"sha": "e6d79d8f6ef199fa066d1e898071a09e583de56a", "filename": "gcc/testsuite/gfortran.dg/class_array_7.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_7.f03?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -19,7 +19,7 @@ module realloc\n \n contains\n \n-  elemental subroutine assign (a, b)\n+  impure elemental subroutine assign (a, b)\n     class(base_type), intent(out) :: a\n     type(base_type), intent(in) :: b\n     a%i = b%i"}, {"sha": "24841305bf53e7726076454fb1aa2247109ae529", "filename": "gcc/testsuite/gfortran.dg/class_dummy_4.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_4.f03?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -11,7 +11,7 @@ module m1\n   procedure, pass(x) :: source\n  end type c_stv\n contains\n- pure subroutine source(y,x)\n+ subroutine source(y,x)\n   class(c_stv), intent(in)               :: x\n   class(c_stv), allocatable, intent(out) :: y\n  end subroutine source"}, {"sha": "8da19af1ee6574d00c14e600b2949c068609f277", "filename": "gcc/testsuite/gfortran.dg/class_dummy_5.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_5.f90?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+!\n+! PR 54756: [OOP] [F08] Should reject CLASS, intent(out) in PURE procedures\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+module m\n+  type t\n+  contains\n+    final :: fnl   ! impure finalizer\n+  end type t\n+contains\n+  impure subroutine fnl(x)\n+    type(t) :: x\n+    print *,\"finalized!\"\n+  end subroutine\n+end\n+\n+program test\n+  use m\n+  type(t) :: x\n+  call foo(x)\n+contains\n+  pure subroutine foo(x)  ! { dg-error \"may not be polymorphic\" }\n+    ! pure subroutine would call impure finalizer\n+    class(t), intent(out) :: x\n+  end subroutine\n+end\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "ce58cee6359cf55e894dfe8f54b55a1af2d21037", "filename": "gcc/testsuite/gfortran.dg/defined_assignment_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_3.f90?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -17,7 +17,7 @@ module m0\n     integer :: j\n   end type\n contains\n-  elemental subroutine assign0(lhs,rhs)\n+  impure elemental subroutine assign0(lhs,rhs)\n     class(component), intent(out) :: lhs\n     class(component), intent(in) :: rhs\n     lhs%i = 20"}, {"sha": "ca5a9262698e69a2246aa07648148820c5b1104f", "filename": "gcc/testsuite/gfortran.dg/defined_assignment_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_5.f90?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -38,7 +38,7 @@ module m1\n     integer :: j = 7\n   end type\n contains\n-  elemental subroutine assign1(lhs,rhs)\n+  impure elemental subroutine assign1(lhs,rhs)\n     class(component1), intent(out) :: lhs\n     class(component1), intent(in) :: rhs\n     lhs%i = 30"}, {"sha": "011a7046e3a9c761ad85d7a5a02385282b435462", "filename": "gcc/testsuite/gfortran.dg/elemental_subroutine_10.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_10.f90?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -15,7 +15,7 @@ module m_assertion_character\n     procedure :: write => assertion_array_write\n   end type t_assertion_character\n contains\n-  elemental subroutine assertion_character( ast, name )\n+  impure elemental subroutine assertion_character( ast, name )\n     class(t_assertion_character), intent(out) :: ast\n     character(len=*), intent(in) :: name\n     ast%name = name\n@@ -37,7 +37,7 @@ module m_assertion_array_character\n     procedure :: write => assertion_array_character_write\n   end type t_assertion_array_character\n contains\n-  pure subroutine assertion_array_character( ast, name, nast )\n+  subroutine assertion_array_character( ast, name, nast )\n     class(t_assertion_array_character), intent(out) :: ast\n     character(len=*), intent(in) :: name\n     integer, intent(in) :: nast"}, {"sha": "836505bba3d1ec3d5a1b797be7815d9aa64ec6d8", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_4.f03", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -34,7 +34,7 @@ PURE TYPE(myint) FUNCTION add_int (a, b)\n     add_int = myint (a%value + b)\n   END FUNCTION add_int\n \n-  PURE SUBROUTINE assign_int (dest, from)\n+  SUBROUTINE assign_int (dest, from)\n     CLASS(myint), INTENT(OUT) :: dest\n     INTEGER, INTENT(IN) :: from\n     dest%value = from\n@@ -62,7 +62,6 @@ END SUBROUTINE in_module\n   PURE SUBROUTINE iampure ()\n     TYPE(myint) :: x\n \n-    x = 0 ! { dg-bogus \"is not PURE\" }\n     x = x + 42 ! { dg-bogus \"to a impure procedure\" }\n     x = x .PLUS. 5 ! { dg-bogus \"to a impure procedure\" }\n   END SUBROUTINE iampure"}, {"sha": "33e3579a3c8bb91a782a5e25c7cafe17dc909d17", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_16.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_16.f03?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -27,7 +27,7 @@ ELEMENTAL REAL FUNCTION rat_to_real(this) RESULT(r)\n       r = REAL(this%n)/this%d\n     END FUNCTION\n \n-    ELEMENTAL SUBROUTINE rat_asgn_i(a,b)\n+    impure ELEMENTAL SUBROUTINE rat_asgn_i(a,b)\n       CLASS(rational),INTENT(OUT) :: a\n       INTEGER,INTENT(IN) :: b\n       a%n = b"}, {"sha": "51359d1461c63524f985cb31cb3c73148cdad832", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19a00337aa1cd579cb51ce5aa71a81261b97fe3/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_19.f90?ref=c19a00337aa1cd579cb51ce5aa71a81261b97fe3", "patch": "@@ -12,7 +12,7 @@ MODULE m\n     PROCEDURE :: copy\n   END TYPE t\n   INTERFACE \n-    PURE SUBROUTINE copy_proc_intr(a,b)\n+    SUBROUTINE copy_proc_intr(a,b)\n       CLASS(*), INTENT(IN) :: a\n       CLASS(*), INTENT(OUT) :: b\n     END SUBROUTINE copy_proc_intr\n@@ -40,7 +40,7 @@ PROGRAM main\n   CALL test%copy(copy_int,copy_x)\n !   PRINT '(*(I0,:2X))', copy_x\n CONTAINS\n-  PURE SUBROUTINE copy_int(a,b)\n+  SUBROUTINE copy_int(a,b)\n     CLASS(*), INTENT(IN) :: a\n     CLASS(*), INTENT(OUT) :: b\n     SELECT TYPE(a); TYPE IS(integer) "}]}