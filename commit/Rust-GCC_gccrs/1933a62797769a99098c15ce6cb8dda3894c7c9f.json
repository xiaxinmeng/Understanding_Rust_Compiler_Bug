{"sha": "1933a62797769a99098c15ce6cb8dda3894c7c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzM2E2Mjc5Nzc2OWE5OTA5OGMxNWNlNmNiOGRkYTM4OTRjN2M5Zg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:53:29Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:53:29Z"}, "message": "vldX_lane.c: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c: New file.\n\nFrom-SVN: r216659", "tree": {"sha": "2af057d4921ac09587a279298b8d201489759539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af057d4921ac09587a279298b8d201489759539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1933a62797769a99098c15ce6cb8dda3894c7c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1933a62797769a99098c15ce6cb8dda3894c7c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1933a62797769a99098c15ce6cb8dda3894c7c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1933a62797769a99098c15ce6cb8dda3894c7c9f/comments", "author": null, "committer": null, "parents": [{"sha": "fd8806d54428a00f513a61dec0330af11ce17e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8806d54428a00f513a61dec0330af11ce17e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd8806d54428a00f513a61dec0330af11ce17e9f"}], "stats": {"total": 614, "additions": 614, "deletions": 0}, "files": [{"sha": "98be2e04572e10880b53b45ef7af76ee6e0fa13c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933a62797769a99098c15ce6cb8dda3894c7c9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933a62797769a99098c15ce6cb8dda3894c7c9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1933a62797769a99098c15ce6cb8dda3894c7c9f", "patch": "@@ -1,3 +1,7 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c: New file.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vldX.c: New file."}, {"sha": "19910330e01371633fbf41c3bf2f457f6f354784", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX_lane.c", "status": "added", "additions": 610, "deletions": 0, "changes": 610, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1933a62797769a99098c15ce6cb8dda3894c7c9f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1933a62797769a99098c15ce6cb8dda3894c7c9f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX_lane.c?ref=1933a62797769a99098c15ce6cb8dda3894c7c9f", "patch": "@@ -0,0 +1,610 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+\n+/* vld2/chunk 0.  */\n+VECT_VAR_DECL(expected_vld2_0,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld2_0,int,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld2_0,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_0,uint,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld2_0,uint,16,4) [] = { 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,uint,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld2_0,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_0,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld2_0,poly,16,4) [] = { 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected_vld2_0,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld2_0,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,int,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t       0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld2_0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_0,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld2_0,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld2_0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_0,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld2_0,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n+\n+/* vld2/chunk 1.  */\n+VECT_VAR_DECL(expected_vld2_1,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xaa, 0xf0, 0xf1 };\n+VECT_VAR_DECL(expected_vld2_1,int,16,4) [] = { 0xfff0, 0xfff1, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_1,int,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld2_1,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_1,uint,8,8) [] = { 0xf0, 0xf1, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld2_1,uint,16,4) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1 };\n+VECT_VAR_DECL(expected_vld2_1,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld2_1,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_1,poly,8,8) [] = { 0xf0, 0xf1, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld2_1,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1 };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld2_1,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld2_1,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t       0xfff0, 0xfff1, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_1,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t       0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld2_1,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_1,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld2_1,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_1,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld2_1,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_1,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld2_1,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n+\n+/* vld3/chunk 0.  */\n+VECT_VAR_DECL(expected_vld3_0,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld3_0,int,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld3_0,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_0,uint,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld3_0,uint,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,uint,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_0,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_0,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld3_0,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected_vld3_0,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_0,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,int,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t       0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_0,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_0,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t0xfffffff2, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_0,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_0,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n+\n+/* vld3/chunk 1.  */\n+VECT_VAR_DECL(expected_vld3_1,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld3_1,int,16,4) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1 };\n+VECT_VAR_DECL(expected_vld3_1,int,32,2) [] = { 0xfffffff2, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_1,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_1,uint,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xaa };\n+VECT_VAR_DECL(expected_vld3_1,uint,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_1,uint,32,2) [] = { 0xaaaaaaaa, 0xfffffff0 };\n+VECT_VAR_DECL(expected_vld3_1,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_1,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xf0, 0xf1, 0xf2, 0xaa };\n+VECT_VAR_DECL(expected_vld3_1,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,32,2) [] = { 0xc1600000, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_1,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_1,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_1,int,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t       0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld3_1,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_1,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_1,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xfff0 };\n+VECT_VAR_DECL(expected_vld3_1,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_1,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_1,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_1,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xfff0 };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t  0xc1800000, 0xc1700000 };\n+\n+/* vld3/chunk 2.  */\n+VECT_VAR_DECL(expected_vld3_2,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xf0, 0xf1, 0xf2 };\n+VECT_VAR_DECL(expected_vld3_2,int,16,4) [] = { 0xfff2, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_2,int,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_2,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_2,uint,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld3_2,uint,16,4) [] = { 0xaaaa, 0xfff0, 0xfff1, 0xfff2 };\n+VECT_VAR_DECL(expected_vld3_2,uint,32,2) [] = { 0xfffffff1, 0xfffffff2 };\n+VECT_VAR_DECL(expected_vld3_2,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_2,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld3_2,poly,16,4) [] = { 0xaaaa, 0xfff0, 0xfff1, 0xfff2 };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_2,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_2,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xfff0, 0xfff1,\n+\t\t\t\t\t       0xfff2, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_2,int,32,4) [] = { 0xfffffff2, 0xaaaaaaaa,\n+\t\t\t\t\t       0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_2,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_2,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_2,uint,16,8) [] = { 0xfff1, 0xfff2, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_2,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld3_2,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_2,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld3_2,poly,16,8) [] = { 0xfff1, 0xfff2, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,32,4) [] = { 0xc1600000, 0xaaaaaaaa,\n+\t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n+\n+/* vld4/chunk 0.  */\n+VECT_VAR_DECL(expected_vld4_0,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_0,int,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld4_0,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_0,uint,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_0,uint,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,uint,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_0,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_0,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_0,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected_vld4_0,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_0,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,int,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t       0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_0,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_0,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_0,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_0,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n+\n+/* vld4/chunk 1.  */\n+VECT_VAR_DECL(expected_vld4_1,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_1,int,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,int,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_1,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_1,uint,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_1,uint,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,uint,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_1,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_1,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_1,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n+VECT_VAR_DECL(expected_vld4_1,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_1,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,int,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t       0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_1,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_1,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_1,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_1,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_1,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_1,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n+\n+/* vld4/chunk 2.  */\n+VECT_VAR_DECL(expected_vld4_2,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_2,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_2,int,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_2,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_2,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_2,uint,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_2,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld4_2,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_2,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_2,poly,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_2,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_2,int,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_2,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t       0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_2,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_2,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_2,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_2,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_2,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_2,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_2,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n+\n+/* vld4/chunk 3.  */\n+VECT_VAR_DECL(expected_vld4_3,int,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t      0xf0, 0xf1, 0xf2, 0xf3 };\n+VECT_VAR_DECL(expected_vld4_3,int,16,4) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_3,int,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_3,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_3,uint,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_3,uint,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_3,uint,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_3,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_3,poly,8,8) [] = { 0xaa, 0xaa, 0xaa, 0xaa,\n+\t\t\t\t\t       0xaa, 0xaa, 0xaa, 0xaa };\n+VECT_VAR_DECL(expected_vld4_3,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,32,2) [] = { 0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_3,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_3,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t       0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_3,int,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t       0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_3,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_3,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_3,uint,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_3,uint,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t0xaaaaaaaa, 0xaaaaaaaa };\n+VECT_VAR_DECL(expected_vld4_3,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_3,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_vld4_3,poly,16,8) [] = { 0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa,\n+\t\t\t\t\t\t0xaaaa, 0xaaaa, 0xaaaa, 0xaaaa };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,32,4) [] = { 0xaaaaaaaa, 0xaaaaaaaa,\n+\t\t\t\t\t\t  0xaaaaaaaa, 0xaaaaaaaa };\n+\n+/* Declare additional input buffers as needed.  */\n+/* Input buffers for vld2_lane */\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, int, 8, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, int, 16, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, int, 32, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, int, 64, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 8, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 16, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 32, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 64, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 8, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 16, 2);\n+VECT_VAR_DECL_INIT(buffer_vld2_lane, float, 32, 2);\n+\n+/* Input buffers for vld3_lane */\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, int, 8, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, int, 16, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, int, 32, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, int, 64, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 8, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 16, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 32, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 64, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 8, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 16, 3);\n+VECT_VAR_DECL_INIT(buffer_vld3_lane, float, 32, 3);\n+\n+/* Input buffers for vld4_lane */\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, int, 8, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, int, 16, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, int, 32, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, int, 64, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 8, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 16, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 32, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 64, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 8, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 16, 4);\n+VECT_VAR_DECL_INIT(buffer_vld4_lane, float, 32, 4);\n+\n+void exec_vldX_lane (void)\n+{\n+  /* In this case, input variables are arrays of vectors.  */\n+#define DECL_VLDX_LANE(T1, W, N, X)\t\t\t\t\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, X) VECT_ARRAY_VAR(vector, T1, W, N, X);\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, X) VECT_ARRAY_VAR(vector_src, T1, W, N, X);\t\\\n+  VECT_VAR_DECL(result_bis_##X, T1, W, N)[X * N]\n+\n+  /* We need to use a temporary result buffer (result_bis), because\n+     the one used for other tests is not large enough. A subset of the\n+     result data is moved from result_bis to result, and it is this\n+     subset which is used to check the actual behaviour. The next\n+     macro enables to move another chunk of data from result_bis to\n+     result.  */\n+  /* We also use another extra input buffer (buffer_src), which we\n+     fill with 0xAA, and which it used to load a vector from which we\n+     read a given lane.  */\n+#define TEST_VLDX_LANE(Q, T1, T2, W, N, X, L)\t\t\t\t\\\n+  memset (VECT_VAR(buffer_src, T1, W, N), 0xAA,\t\t\t\t\\\n+\t  sizeof(VECT_VAR(buffer_src, T1, W, N)));\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  VECT_ARRAY_VAR(vector_src, T1, W, N, X) =\t\t\t\t\\\n+    vld##X##Q##_##T2##W(VECT_VAR(buffer_src, T1, W, N));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  VECT_ARRAY_VAR(vector, T1, W, N, X) =\t\t\t\t\t\\\n+    /* Use dedicated init buffer, of size.  X */\t\t\t\\\n+    vld##X##Q##_lane_##T2##W(VECT_VAR(buffer_vld##X##_lane, T1, W, X),\t\\\n+\t\t\t     VECT_ARRAY_VAR(vector_src, T1, W, N, X),\t\\\n+\t\t\t     L);\t\t\t\t\t\\\n+  vst##X##Q##_##T2##W(VECT_VAR(result_bis_##X, T1, W, N),\t\t\\\n+\t\t      VECT_ARRAY_VAR(vector, T1, W, N, X));\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(result_bis_##X, T1, W, N), \\\n+\t sizeof(VECT_VAR(result, T1, W, N)))\n+\n+  /* Overwrite \"result\" with the contents of \"result_bis\"[Y].  */\n+#define TEST_EXTRA_CHUNK(T1, W, N, X, Y)\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t &(VECT_VAR(result_bis_##X, T1, W, N)[Y*N]),\t\\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  /* We need all variants in 64 bits, but there is no 64x2 variant.  */\n+#define DECL_ALL_VLDX_LANE(X)\t\t\t\\\n+  DECL_VLDX_LANE(int, 8, 8, X);\t\t\t\\\n+  DECL_VLDX_LANE(int, 16, 4, X);\t\t\\\n+  DECL_VLDX_LANE(int, 32, 2, X);\t\t\\\n+  DECL_VLDX_LANE(uint, 8, 8, X);\t\t\\\n+  DECL_VLDX_LANE(uint, 16, 4, X);\t\t\\\n+  DECL_VLDX_LANE(uint, 32, 2, X);\t\t\\\n+  DECL_VLDX_LANE(poly, 8, 8, X);\t\t\\\n+  DECL_VLDX_LANE(poly, 16, 4, X);\t\t\\\n+  DECL_VLDX_LANE(int, 16, 8, X);\t\t\\\n+  DECL_VLDX_LANE(int, 32, 4, X);\t\t\\\n+  DECL_VLDX_LANE(uint, 16, 8, X);\t\t\\\n+  DECL_VLDX_LANE(uint, 32, 4, X);\t\t\\\n+  DECL_VLDX_LANE(poly, 16, 8, X);\t\t\\\n+  DECL_VLDX_LANE(float, 32, 2, X);\t\t\\\n+  DECL_VLDX_LANE(float, 32, 4, X)\n+\n+  /* Add some padding to try to catch out of bound accesses.  */\n+#define ARRAY1(V, T, W, N) VECT_VAR_DECL(V,T,W,N)[1]={42}\n+#define DUMMY_ARRAY(V, T, W, N, L) \\\n+  VECT_VAR_DECL(V,T,W,N)[N*L]={0}; \\\n+  ARRAY1(V##_pad,T,W,N)\n+\n+  /* Use the same lanes regardless of the size of the array (X), for\n+     simplicity.  */\n+#define TEST_ALL_VLDX_LANE(X)\t\t\t\\\n+  TEST_VLDX_LANE(, int, s, 8, 8, X, 7);\t\t\\\n+  TEST_VLDX_LANE(, int, s, 16, 4, X, 2);\t\\\n+  TEST_VLDX_LANE(, int, s, 32, 2, X, 0);\t\\\n+  TEST_VLDX_LANE(, uint, u, 8, 8, X, 4);\t\\\n+  TEST_VLDX_LANE(, uint, u, 16, 4, X, 3);\t\\\n+  TEST_VLDX_LANE(, uint, u, 32, 2, X, 1);\t\\\n+  TEST_VLDX_LANE(, poly, p, 8, 8, X, 4);\t\\\n+  TEST_VLDX_LANE(, poly, p, 16, 4, X, 3);\t\\\n+  TEST_VLDX_LANE(q, int, s, 16, 8, X, 6);\t\\\n+  TEST_VLDX_LANE(q, int, s, 32, 4, X, 2);\t\\\n+  TEST_VLDX_LANE(q, uint, u, 16, 8, X, 5);\t\\\n+  TEST_VLDX_LANE(q, uint, u, 32, 4, X, 0);\t\\\n+  TEST_VLDX_LANE(q, poly, p, 16, 8, X, 5);\t\\\n+  TEST_VLDX_LANE(, float, f, 32, 2, X, 0);\t\\\n+  TEST_VLDX_LANE(q, float, f, 32, 4, X, 2)\n+\n+#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\t\\\n+  TEST_EXTRA_CHUNK(int, 8, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 32, 2, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 8, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 32, 2, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 8, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 16, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 32, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 16, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 32, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 16, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 32, 2, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 32, 4, X, Y)\n+\n+  /* Declare the temporary buffers / variables.  */\n+  DECL_ALL_VLDX_LANE(2);\n+  DECL_ALL_VLDX_LANE(3);\n+  DECL_ALL_VLDX_LANE(4);\n+\n+  /* Define dummy input arrays, large enough for x4 vectors.  */\n+  DUMMY_ARRAY(buffer_src, int, 8, 8, 4);\n+  DUMMY_ARRAY(buffer_src, int, 16, 4, 4);\n+  DUMMY_ARRAY(buffer_src, int, 32, 2, 4);\n+  DUMMY_ARRAY(buffer_src, uint, 8, 8, 4);\n+  DUMMY_ARRAY(buffer_src, uint, 16, 4, 4);\n+  DUMMY_ARRAY(buffer_src, uint, 32, 2, 4);\n+  DUMMY_ARRAY(buffer_src, poly, 8, 8, 4);\n+  DUMMY_ARRAY(buffer_src, poly, 16, 4, 4);\n+  DUMMY_ARRAY(buffer_src, int, 16, 8, 4);\n+  DUMMY_ARRAY(buffer_src, int, 32, 4, 4);\n+  DUMMY_ARRAY(buffer_src, uint, 16, 8, 4);\n+  DUMMY_ARRAY(buffer_src, uint, 32, 4, 4);\n+  DUMMY_ARRAY(buffer_src, poly, 16, 8, 4);\n+  DUMMY_ARRAY(buffer_src, float, 32, 2, 4);\n+  DUMMY_ARRAY(buffer_src, float, 32, 4, 4);\n+\n+  /* Check vld2_lane/vld2q_lane.  */\n+  clean_results ();\n+#define TEST_MSG \"VLD2_LANE/VLD2Q_LANE\"\n+  TEST_ALL_VLDX_LANE(2);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld2_0, \" chunk 0\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(2, 1);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld2_1, \" chunk 1\");\n+\n+  /* Check vld3_lane/vld3q_lane.  */\n+  clean_results ();\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD3_LANE/VLD3Q_LANE\"\n+  TEST_ALL_VLDX_LANE(3);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld3_0, \" chunk 0\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(3, 1);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld3_1, \" chunk 1\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(3, 2);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld3_2, \" chunk 2\");\n+\n+  /* Check vld4_lane/vld4q_lane.  */\n+  clean_results ();\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD4_LANE/VLD4Q_LANE\"\n+  TEST_ALL_VLDX_LANE(4);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_0, \" chunk 0\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(4, 1);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_1, \" chunk 1\");\n+  TEST_ALL_EXTRA_CHUNKS(4, 2);\n+\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_2, \" chunk 2\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(4, 3);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_3, \" chunk 3\");\n+}\n+\n+int main (void)\n+{\n+  exec_vldX_lane ();\n+  return 0;\n+}"}]}