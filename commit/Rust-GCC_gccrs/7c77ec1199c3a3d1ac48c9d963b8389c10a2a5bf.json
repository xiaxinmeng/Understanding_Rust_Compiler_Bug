{"sha": "7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf", "node_id": "C_kwDOANBUbNoAKDdjNzdlYzExOTljM2EzZDFhYzQ4YzlkOTYzYjgzODljMTBhMmE1YmY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-04-04T21:16:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-18T08:41:03Z"}, "message": "[Ada] Fix problematic underflow for Float_Type'Value\n\nWe need a couple of guards for boundary conditions in the support code.\n\ngcc/ada/\n\n\t* libgnat/s-dourea.adb (\"/\"): Add guard for zero and infinite\n\tdivisor.\n\t* libgnat/s-valuer.adb (Scan_Raw_Real): Add guard for very large\n\texponent values.", "tree": {"sha": "904bee0edef98e3888ec13167fc9078842cac055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904bee0edef98e3888ec13167fc9078842cac055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba89624e938a9309a0a8a672b2753159cf0a8a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba89624e938a9309a0a8a672b2753159cf0a8a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba89624e938a9309a0a8a672b2753159cf0a8a78"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "4f378d6cb6d8eda75ca370521a5c4edca024d86b", "filename": "gcc/ada/libgnat/s-dourea.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf/gcc%2Fada%2Flibgnat%2Fs-dourea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf/gcc%2Fada%2Flibgnat%2Fs-dourea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dourea.adb?ref=7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf", "patch": "@@ -178,6 +178,12 @@ package body System.Double_Real is\n       P, R   : Double_T;\n \n    begin\n+      if Is_Infinity (B) or else Is_Zero (B) then\n+         return (A.Hi / B, 0.0);\n+      end if;\n+      pragma Annotate (CodePeer, Intentional, \"test always false\",\n+                       \"code deals with infinity\");\n+\n       Q1 := A.Hi / B;\n \n       --  Compute R = A - B * Q1\n@@ -196,6 +202,12 @@ package body System.Double_Real is\n       R, S       : Double_T;\n \n    begin\n+      if Is_Infinity (B.Hi) or else Is_Zero (B.Hi) then\n+         return (A.Hi / B.Hi, 0.0);\n+      end if;\n+      pragma Annotate (CodePeer, Intentional, \"test always false\",\n+                       \"code deals with infinity\");\n+\n       Q1 := A.Hi / B.Hi;\n       R := A - B * Q1;\n "}, {"sha": "b474f8429e52f51e5f34fa97633b4354ecf07e3c", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=7c77ec1199c3a3d1ac48c9d963b8389c10a2a5bf", "patch": "@@ -645,7 +645,14 @@ package body System.Value_R is\n \n       Ptr.all := Index;\n       Scan_Exponent (Str, Ptr, Max, Expon, Real => True);\n-      Scale := Scale + Expon;\n+\n+      --  Handle very large exponents like Scan_Exponent\n+\n+      if Expon < Integer'First / 10 or else Expon > Integer'Last / 10 then\n+         Scale := Expon;\n+      else\n+         Scale := Scale + Expon;\n+      end if;\n \n       --  Here is where we check for a bad based number\n "}]}