{"sha": "9f942e8c17034f6211abe7b1d6a041ac50dbcab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5NDJlOGMxNzAzNGY2MjExYWJlN2IxZDZhMDQxYWM1MGRiY2FiNQ==", "commit": {"author": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "2000-08-07T06:27:47Z"}, "committer": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "2000-08-07T06:27:47Z"}, "message": "Documented the new -fconstant-string-class option.\n\nFrom-SVN: r35537", "tree": {"sha": "185dfa803749d6aaa151a7edd8464c463076a0bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/185dfa803749d6aaa151a7edd8464c463076a0bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f942e8c17034f6211abe7b1d6a041ac50dbcab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f942e8c17034f6211abe7b1d6a041ac50dbcab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f942e8c17034f6211abe7b1d6a041ac50dbcab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f942e8c17034f6211abe7b1d6a041ac50dbcab5/comments", "author": null, "committer": null, "parents": [{"sha": "9bc3876e69cac813457808e3dd762da0d26839a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc3876e69cac813457808e3dd762da0d26839a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc3876e69cac813457808e3dd762da0d26839a8"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "739f911da73b0eb3ed9fcaa18e85face4b88fae9", "filename": "libobjc/objc-features.texi", "status": "modified", "additions": 59, "deletions": 16, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f942e8c17034f6211abe7b1d6a041ac50dbcab5/libobjc%2Fobjc-features.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f942e8c17034f6211abe7b1d6a041ac50dbcab5/libobjc%2Fobjc-features.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-features.texi?ref=9f942e8c17034f6211abe7b1d6a041ac50dbcab5", "patch": "@@ -5,7 +5,14 @@\n @setchapternewpage odd\n @c %**end of header\n      \n-@node Top, Executing code before main, , (dir), (dir)\n+@menu\n+* Executing code before main::  \n+* Type encoding::               \n+* Garbage Collection::          \n+* Constant string objects::     \n+@end menu\n+\n+@node Top, Executing code before main, (dir), (dir)\n @comment  node-name,  next,  previous,  up\n \n @chapter GNU Objective-C runtime features\n@@ -16,14 +23,8 @@ resources on the Internet that present the language.  Questions and\n comments about this document to Ovidiu Predescu\n @code{<ovidiu@@cup.hp.com>}.\n \n-@menu\n-* Executing code before main::\n-* Type encoding::\n-* Garbage Collection::\n-@end menu\n-\n \n-@node Executing code before main, What you can and what you cannot do in +load, Top, Top\n+@node Executing code before main, Type encoding, Top, Top\n @section @code{+load}: Executing code before main\n \n \n@@ -101,14 +102,14 @@ You should be aware of its limitations when you decide to use it\n instead of @code{+initialize}.\n \n @menu\n-* What you can and what you cannot do in +load::\n+* What you can and what you cannot do in +load::  \n @end menu\n \n \n-@node What you can and what you cannot do in +load, Type encoding, Executing code before main, Executing code before main\n+@node What you can and what you cannot do in +load,  , Executing code before main, Executing code before main\n @subsection What you can and what you cannot do in @code{+load}\n \n-The +load implementation in the GNU runtime guarantees you the following\n+The @code{+load} implementation in the GNU runtime guarantees you the following\n things:\n \n @itemize @bullet\n@@ -169,7 +170,7 @@ above apply to classes defined in bundle.\n \n \n \n-@node Type encoding, Garbage Collection, What you can and what you cannot do in +load, Top\n+@node Type encoding, Garbage Collection, Executing code before main, Top\n @section Type encoding\n \n The Objective-C compiler generates type encodings for all the\n@@ -309,15 +310,13 @@ however, the type specifiers are only encoded when they appear in method\n argument types.\n \n \n-@node Garbage Collection, , Type encoding, Top\n-\n-@page\n+@node Garbage Collection, Constant string objects, Type encoding, Top\n @section Garbage Collection\n \n Support for a new memory management policy has been added by using a\n powerful conservative garbage collector, known as the\n Boehm-Demers-Weiser conservative garbage collector. It is available from\n-@w{@uref{http://reality.sgi.com/boehm_mti/gc.html}}.\n+@w{@uref{http://www.hpl.hp.com/personal/Hans_Boehm/gc/}}.\n \n To enable the support for it you have to configure the compiler using an\n additional argument, @w{@kbd{--enable-objc-gc}}. You need to have\n@@ -387,6 +386,50 @@ represented by the @code{'!'} character. The\n specifier to the string type description of the instance variable named\n as argument.\n \n+@c =========================================================================\n+@node Constant string objects,  , Garbage Collection, Top\n+@comment  node-name,  next,  previous,  up\n+@section Constant string objects\n+\n+GNU Objective-C provides constant string objects that are generated\n+directly by the compiler. You declare a constant string object by\n+prefixing a C constant string with the character @code{@@}:\n+\n+@example\n+  id myString = @@\"this is a constant string object\";\n+@end example\n+\n+The constant string objects are usually instances of the\n+@code{NXConstantString} class which is provided by the GNU Objective-C\n+runtime. To get the definition of this class you must include the\n+@file{objc/NXConstStr.h} header file.\n+\n+User defined libraries may want to implement their own constant string\n+class. To be able to support them, the GNU Objective-C compiler provides\n+a new command line options @code{-fconstant-string-class=<class\n+name>}. The provided class should adhere to a strict structure, the same\n+as @code{NXConstantString}'s structure:\n+\n+@example\n+\n+@@interface NXConstantString : Object\n+@{\n+  char *c_string;\n+  unsigned int len;\n+@}\n+@@end\n+\n+@end example\n+\n+User class libraries may choose to inherit the customized constant\n+string class from a different class than @code{Object}. There is no\n+requirement in the methods the constant string class has to implement.\n+\n+When a file is compiled with the @code{-fconstant-string-class} option,\n+all the constant string objects will be instances of the class specified\n+as argument to this option. It is possible to have multiple compilation\n+units referring to different constant string classes, neither the\n+compiler nor the linker impose any restrictions in doing this.\n \n @bye\n "}]}