{"sha": "32723ea0f97141dcc859af08906a52c7ddcc7278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3MjNlYTBmOTcxNDFkY2M4NTlhZjA4OTA2YTUyYzdkZGNjNzI3OA==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2008-05-21T03:49:03Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2008-05-21T03:49:03Z"}, "message": "re PR libgcj/36252 (OutOfMemoryError on simple text conversion.)\n\n2008-05-20  David Daney  <ddaney@avtrex.com>\n\n\tPR libgcj/36252\n\t* java/lang/natString.ccn: Add\n\t#include <java/io/CharConversionException.h>.\n\t(init (byte[], int, int, String)): Catch and ignore\n\tCharConversionException.  Break out of conversion loop\n\ton incomplete input.\n\t* testsuite/libjava.lang/PR36252.java: New test.\n\t* testsuite/libjava.lang/PR36252.out: New file, its expected output.\n\t* testsuite/libjava.lang/PR36252.jar: New file, its pre-compiled\n\tjar file.\n\nFrom-SVN: r135705", "tree": {"sha": "e6e58a2d11b2eb0a13884ca5f7d7d4db1b0158ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6e58a2d11b2eb0a13884ca5f7d7d4db1b0158ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32723ea0f97141dcc859af08906a52c7ddcc7278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32723ea0f97141dcc859af08906a52c7ddcc7278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32723ea0f97141dcc859af08906a52c7ddcc7278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32723ea0f97141dcc859af08906a52c7ddcc7278/comments", "author": null, "committer": null, "parents": [{"sha": "57b6cfda36af9a9e0743b9599c766d559eb0304d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b6cfda36af9a9e0743b9599c766d559eb0304d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b6cfda36af9a9e0743b9599c766d559eb0304d"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "e8cd46e894755cde48fdee7904571928bb0718d3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=32723ea0f97141dcc859af08906a52c7ddcc7278", "patch": "@@ -1,3 +1,16 @@\n+2008-05-20  David Daney  <ddaney@avtrex.com>\n+\n+\tPR libgcj/36252\n+\t* java/lang/natString.ccn: Add\n+\t#include <java/io/CharConversionException.h>.\n+\t(init (byte[], int, int, String)): Catch and ignore\n+\tCharConversionException.  Break out of conversion loop\n+\ton incomplete input.\n+\t* testsuite/libjava.lang/PR36252.java: New test.\n+\t* testsuite/libjava.lang/PR36252.out: New file, its expected output.\n+\t* testsuite/libjava.lang/PR36252.jar: New file, its pre-compiled\n+\tjar file.\n+\n 2008-04-19  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/35979:"}, {"sha": "75006a7c9a7aa955b91226754a498b2956f3b41a", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=32723ea0f97141dcc859af08906a52c7ddcc7278", "patch": "@@ -1,6 +1,7 @@\n // natString.cc - Implementation of java.lang.String native methods.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+   2007, 2008  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -23,6 +24,7 @@ details.  */\n #include <java/lang/NullPointerException.h>\n #include <java/lang/StringBuffer.h>\n #include <java/io/ByteArrayOutputStream.h>\n+#include <java/io/CharConversionException.h>\n #include <java/io/OutputStreamWriter.h>\n #include <java/io/ByteArrayInputStream.h>\n #include <java/io/InputStreamReader.h>\n@@ -493,9 +495,28 @@ java::lang::String::init (jbyteArray bytes, jint offset, jint count,\n   converter->setInput(bytes, offset, offset+count);\n   while (converter->inpos < converter->inlength)\n     {\n-      int done = converter->read(array, outpos, avail);\n+      int done;\n+      try\n+\t{\n+\t  done = converter->read(array, outpos, avail);\n+\t}\n+      catch (::java::io::CharConversionException *e)\n+\t{\n+\t  // Ignore it and silently throw away the offending data.\n+\t  break;\n+\t}\n       if (done == 0)\n \t{\n+\t  // done is zero if either there is no space available in the\n+\t  // output *or* the input is incomplete.  We assume that if\n+\t  // there are 20 characters available in the output, the\n+\t  // input must be incomplete and there is no more work to do.\n+\t  // This means we may skip several bytes of input, but that\n+\t  // is OK as the behavior is explicitly unspecified in this\n+\t  // case.\n+\t  if (avail - outpos > 20)\n+\t    break;\n+\n \t  jint new_size = 2 * (outpos + avail);\n \t  jcharArray new_array = JvNewCharArray (new_size);\n \t  memcpy (elements (new_array), elements (array),"}, {"sha": "2c0d2c0e906cc37b54003b03713c2e2f0e326c80", "filename": "libjava/testsuite/libjava.lang/PR36252.jar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.jar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.jar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.jar?ref=32723ea0f97141dcc859af08906a52c7ddcc7278"}, {"sha": "4f39a678b1aca54db0381be2b7885a052fd6e25e", "filename": "libjava/testsuite/libjava.lang/PR36252.java", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.java?ref=32723ea0f97141dcc859af08906a52c7ddcc7278", "patch": "@@ -0,0 +1,16 @@\n+import java.io.UnsupportedEncodingException;\n+\n+public class PR36252\n+{\n+  public static void main(String[] args)\n+  {\n+    try {\n+      byte[] txt = new byte[] {-55, 87, -55, -42, -55, -20};\n+      // This new String(...) should not throw an OutOfMemoryError.\n+      String s = new String(txt, 0, 6, \"MS932\");\n+    } catch (UnsupportedEncodingException e) {\n+      // Silently ignore.\n+    }\n+    System.out.println(\"ok\");\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/PR36252.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32723ea0f97141dcc859af08906a52c7ddcc7278/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FPR36252.out?ref=32723ea0f97141dcc859af08906a52c7ddcc7278", "patch": "@@ -0,0 +1 @@\n+ok"}]}