{"sha": "4c7be3105294ae11d15bcb9265a1199a34666e1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3YmUzMTA1Mjk0YWUxMWQxNWJjYjkyNjVhMTE5OWEzNDY2NmUxYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T12:11:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T12:11:50Z"}, "message": "[multiple changes]\n\n2012-06-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch12.adb: Minor reformatting.\n\n2012-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* opt.ads (Inline_Level): New variable.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set it based on optimization\n\tlevel if it has not been set by the user.\n\t* switch-c.adb (Scan_Front_End_Switches): Accept -gnatn1 and -gnatn2\n\tand set Inline_Level accordingly.\n\t* inline.adb (Add_Inlined_Body): Declate new Inline_Level_Type type.\n\t(Must_Inline): Return Inline_Level_T instead of Boolean to indicate\n\twhether the package of the inlined subprogram must be compiled.\n\tIf Inline_Level is set to 1, only compile packages of subprograms\n\tdirectly called from the main unit.\n\t* usage.adb (Usage): Adjust line for -gnatn switch.\n\t* gnat_ugn.texi (Switches for gcc): Document -gnatn1 and -gnatn2.\n\nFrom-SVN: r188451", "tree": {"sha": "8b357df419b643a99514ae1be0743478c65946d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b357df419b643a99514ae1be0743478c65946d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7be3105294ae11d15bcb9265a1199a34666e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7be3105294ae11d15bcb9265a1199a34666e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7be3105294ae11d15bcb9265a1199a34666e1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7be3105294ae11d15bcb9265a1199a34666e1b/comments", "author": null, "committer": null, "parents": [{"sha": "33738c606df5ea714dd9260ba65e7643e3216dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33738c606df5ea714dd9260ba65e7643e3216dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33738c606df5ea714dd9260ba65e7643e3216dea"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "b8b8cd92078d828a78aa27f3ac58435d026f8591", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -1,3 +1,22 @@\n+2012-06-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch12.adb: Minor reformatting.\n+\n+2012-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* opt.ads (Inline_Level): New variable.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set it based on optimization\n+\tlevel if it has not been set by the user.\n+\t* switch-c.adb (Scan_Front_End_Switches): Accept -gnatn1 and -gnatn2\n+\tand set Inline_Level accordingly.\n+\t* inline.adb (Add_Inlined_Body): Declate new Inline_Level_Type type.\n+\t(Must_Inline): Return Inline_Level_T instead of Boolean to indicate\n+\twhether the package of the inlined subprogram must be compiled.\n+\tIf Inline_Level is set to 1, only compile packages of subprograms\n+\tdirectly called from the main unit.\n+\t* usage.adb (Usage): Adjust line for -gnatn switch.\n+\t* gnat_ugn.texi (Switches for gcc): Document -gnatn1 and -gnatn2.\n+\n 2012-06-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch12.adb (Instantiate_Formal_Subprogram): Do not apply"}, {"sha": "241671776fce76b51d9ad70712a47680e66c5c98", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -505,6 +505,17 @@ procedure Gnat1drv is\n \n          Tagged_Type_Expansion := False;\n       end if;\n+\n+      --  If the inlining level has not been set by the user, compute it from\n+      --  the optimization level: 1 at -O1/-O2 (and -Os), 2 at -O3 and above.\n+\n+      if Inline_Level = 0 then\n+         if Optimization_Level < 3 then\n+            Inline_Level := 1;\n+         else\n+            Inline_Level := 2;\n+         end if;\n+      end if;\n    end Adjust_Global_Switches;\n \n    --------------------"}, {"sha": "f444cf931508b67172a52a4c47b7ae952afb3c2d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -4302,11 +4302,15 @@ reaches this limit, then a message is output and the compilation\n is abandoned. The equal sign here is optional. A value of zero\n means that no limit applies.\n \n-@item -gnatn\n+@item -gnatn[12]\n @cindex @option{-gnatn} (@command{gcc})\n-Activate inlining for subprograms for which\n-pragma @code{Inline} is specified. This inlining is performed\n-by the GCC back-end.\n+Activate inlining for subprograms for which pragma @code{Inline} is\n+specified. This inlining is performed by the GCC back-end. An optional\n+digit sets the inlining level: 1 for moderate inlining across modules,\n+which is a good compromise between compilation times and performances\n+at run time, and 2 for full inlining across modules, which may bring\n+about longer compilation times. If no inlining level is specified,\n+the compiler will pick it based on the optimization level.\n \n @item -gnatN\n @cindex @option{-gnatN} (@command{gcc})"}, {"sha": "01f8ff1ccffe8baea07ac4def1cecae8450c00c1", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -229,15 +229,21 @@ package body Inline is\n \n    procedure Add_Inlined_Body (E : Entity_Id) is\n \n-      function Must_Inline return Boolean;\n+      type Inline_Level_Type is (Dont_Inline, Inline_Call, Inline_Package);\n+      --  Level of inlining for the call: Dont_Inline means no inlining,\n+      --  Inline_Call means that only the call is considered for inlining,\n+      --  Inline_Package means that the call is considered for inlining and\n+      --  its package compiled and scanned for more inlining opportunities.\n+\n+      function Must_Inline return Inline_Level_Type;\n       --  Inlining is only done if the call statement N is in the main unit,\n       --  or within the body of another inlined subprogram.\n \n       -----------------\n       -- Must_Inline --\n       -----------------\n \n-      function Must_Inline return Boolean is\n+      function Must_Inline return Inline_Level_Type is\n          Scop : Entity_Id;\n          Comp : Node_Id;\n \n@@ -251,7 +257,7 @@ package body Inline is\n          --  trouble to try to inline at this level.\n \n          if Scop = Standard_Standard then\n-            return False;\n+            return Dont_Inline;\n          end if;\n \n          --  Otherwise lookup scope stack to outer scope\n@@ -267,14 +273,19 @@ package body Inline is\n             Comp := Parent (Comp);\n          end loop;\n \n+         --  If the call is in the main unit, inline the call and compile the\n+         --  package of the subprogram to find more calls to be inlined.\n+\n          if Comp = Cunit (Main_Unit)\n            or else Comp = Library_Unit (Cunit (Main_Unit))\n          then\n             Add_Call (E);\n-            return True;\n+            return Inline_Package;\n          end if;\n \n-         --  Call is not in main unit. See if it's in some inlined subprogram\n+         --  The call is not in the main unit. See if it is in some inlined\n+         --  subprogram. If so, inline the call and, if the inlining level is\n+         --  set to 1, stop there; otherwise also compile the package as above.\n \n          Scop := Current_Scope;\n          while Scope (Scop) /= Standard_Standard\n@@ -284,15 +295,21 @@ package body Inline is\n               and then Is_Inlined (Scop)\n             then\n                Add_Call (E, Scop);\n-               return True;\n+               if Inline_Level = 1 then\n+                  return Inline_Call;\n+               else\n+                  return Inline_Package;\n+               end if;\n             end if;\n \n             Scop := Scope (Scop);\n          end loop;\n \n-         return False;\n+         return Dont_Inline;\n       end Must_Inline;\n \n+      Level : Inline_Level_Type;\n+\n    --  Start of processing for Add_Inlined_Body\n \n    begin\n@@ -309,11 +326,15 @@ package body Inline is\n       --  no enclosing package to retrieve. In this case, it is the body of\n       --  the function that will have to be loaded.\n \n-      if not Is_Abstract_Subprogram (E)\n-        and then not Is_Nested (E)\n-        and then Convention (E) /= Convention_Protected\n-        and then Must_Inline\n+      if Is_Abstract_Subprogram (E)\n+        or else Is_Nested (E)\n+        or else Convention (E) = Convention_Protected\n       then\n+         return;\n+      end if;\n+\n+      Level := Must_Inline;\n+      if Level /= Dont_Inline then\n          declare\n             Pack : constant Entity_Id := Get_Code_Unit_Entity (E);\n \n@@ -339,7 +360,8 @@ package body Inline is\n                --  declares the type, and that body is visible to the back end.\n                --  Do not inline it either if it is in the main unit.\n \n-               elsif not Is_Inlined (Pack)\n+               elsif Level = Inline_Package\n+                 and then not Is_Inlined (Pack)\n                  and then Comes_From_Source (E)\n                  and then not In_Main_Unit_Or_Subunit (Pack)\n                then"}, {"sha": "a44d338fd31c84cce08e6ceca69888df49125b41", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -733,6 +733,12 @@ package Opt is\n    --  Set True to activate pragma Inline processing across modules. Default\n    --  for now is not to inline across module boundaries.\n \n+   Inline_Level : Nat := 0;\n+   --  GNAT\n+   --  Set to indicate the inlining level: 0 means that an appropriate value\n+   --  is to be computed by the compiler, 1 is for moderate inlining across\n+   --  modules and 2 for full inlining across modules.\n+\n    Interface_Library_Unit : Boolean := False;\n    --  GNATBIND\n    --  Set to True to indicate that at least one ALI file is an interface ALI:"}, {"sha": "48a4974bdb1d18acb41edfe507674360d12df590", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -9449,6 +9449,8 @@ package body Sem_Ch12 is\n                Has_Untagged_Inc := True;\n             end if;\n \n+            --  Add comments for following code???\n+\n             if Is_Entity_Name (Actual)\n               and then not Is_Overloaded (Actual)\n               and then not Has_Untagged_Inc"}, {"sha": "cc724737fc5c126bfd0f4cfff1b621fa5d493987", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -732,6 +732,16 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Inline_Active := True;\n \n+               --  There may be a digit appended to the switch\n+\n+               if Ptr <= Max then\n+                  C := Switch_Chars (Ptr);\n+                  if C = '1' or C = '2' then\n+                     Ptr := Ptr + 1;\n+                     Inline_Level := Character'Pos (C) - Character'Pos ('0');\n+                  end if;\n+               end if;\n+\n             --  Processing for N switch\n \n             when 'N' =>"}, {"sha": "292d681a735212f7f4a79dcaa61450da85f7b08a", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7be3105294ae11d15bcb9265a1199a34666e1b/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=4c7be3105294ae11d15bcb9265a1199a34666e1b", "patch": "@@ -298,7 +298,7 @@ begin\n \n    --  Line for -gnatn switch\n \n-   Write_Switch_Char (\"n\");\n+   Write_Switch_Char (\"n[d]\");\n    Write_Line (\"Enable pragma Inline (both within and across units)\");\n \n    --  Line for -gnatN switch"}]}