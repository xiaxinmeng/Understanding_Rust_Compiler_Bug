{"sha": "c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkZDViMzgyMmJmNGE3MTQyMjBmOTBiMmRkNzhlOWRjNDVhMmI5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:42:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:42:27Z"}, "message": "[multiple changes]\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* contracts.adb (Add_Contract_Item): Chain pragmas Attach_Handler\n\tand Interrupt_Handler on the classifications list of a [generic]\n\tprocedure N_Contract node.\n\t* contracts.ads (Add_Contract_Item): Update the comment on usage.\n\t* einfo.adb (Get_Pragma): Pragmas Attach_Handler and\n\tInterrupt_Handler are found on the classifications list of\n\tN_Contract nodes.\n\t* einfo.ads (Get_Pragma): Update the comment on usage.\n\t* sem_prag.adb (Process_Interrupt_Or_Attach_Handler): Code\n\treformatting. Store the pragma as a contract item.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Available_Subtype): Use only in GNATprove\n\tmode. When generating code it may be necessary to create itypes\n\tat the point of use of a selected component, for example in the\n\texpansion of a record equality operation.\n\n2015-11-18  Vincent Celier  <celier@adacore.com>\n\n\t* s-os_lib.adb (Normalize_Pathname.Get_Directory): When\n\tinvoking Normalize_Pathname, use the same values for parameters\n\tResolve_Links and Case_Sensitive as the parent Normalize_Pathname.\n\n2015-11-18  Vincent Celier  <celier@adacore.com>\n\n\t* a-direct.adb (Containing_Directory): Return \".\" when the result\n\tis the current directory, not specified as an absolute path name.\n\nFrom-SVN: r230536", "tree": {"sha": "c2decae2b7e44ca976315b45989af0ed50a245b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2decae2b7e44ca976315b45989af0ed50a245b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/comments", "author": null, "committer": null, "parents": [{"sha": "a25e72b5e59ccdd5351b89dbb5c8b823fb82846d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25e72b5e59ccdd5351b89dbb5c8b823fb82846d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25e72b5e59ccdd5351b89dbb5c8b823fb82846d"}], "stats": {"total": 139, "additions": 91, "deletions": 48}, "files": [{"sha": "de28d4677c49c25467f7b465de45c6f1e5186482", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -1,3 +1,34 @@\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* contracts.adb (Add_Contract_Item): Chain pragmas Attach_Handler\n+\tand Interrupt_Handler on the classifications list of a [generic]\n+\tprocedure N_Contract node.\n+\t* contracts.ads (Add_Contract_Item): Update the comment on usage.\n+\t* einfo.adb (Get_Pragma): Pragmas Attach_Handler and\n+\tInterrupt_Handler are found on the classifications list of\n+\tN_Contract nodes.\n+\t* einfo.ads (Get_Pragma): Update the comment on usage.\n+\t* sem_prag.adb (Process_Interrupt_Or_Attach_Handler): Code\n+\treformatting. Store the pragma as a contract item.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Available_Subtype): Use only in GNATprove\n+\tmode. When generating code it may be necessary to create itypes\n+\tat the point of use of a selected component, for example in the\n+\texpansion of a record equality operation.\n+\n+2015-11-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* s-os_lib.adb (Normalize_Pathname.Get_Directory): When\n+\tinvoking Normalize_Pathname, use the same values for parameters\n+\tResolve_Links and Case_Sensitive as the parent Normalize_Pathname.\n+\n+2015-11-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* a-direct.adb (Containing_Directory): Return \".\" when the result\n+\tis the current directory, not specified as an absolute path name.\n+\n 2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_aggr.adb (Is_Completely_Hidden_Discriminant): New routine."}, {"sha": "7c5c4f455579bbbea469ec187eacc03b04c3a5d1", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -208,35 +208,31 @@ package body Ada.Directories is\n \n       else\n          declare\n-            --  We need to resolve links because of A.16(47), since we must not\n-            --  return alternative names for files.\n-\n-            Norm    : constant String := Normalize_Pathname (Name);\n             Last_DS : constant Natural :=\n               Strings.Fixed.Index (Name, Dir_Seps, Going => Strings.Backward);\n \n          begin\n             if Last_DS = 0 then\n \n-               --  There is no directory separator, returns current working\n-               --  directory.\n+               --  There is no directory separator, returns \".\" representing\n+               --  the current working directory.\n \n-               return Current_Directory;\n+               return \".\";\n \n             --  If Name indicates a root directory, raise Use_Error, because\n             --  it has no containing directory.\n \n-            elsif Norm = \"/\"\n+            elsif Name = \"/\"\n               or else\n                 (Windows\n                   and then\n-                    (Norm = \"\\\"\n+                  (Name = \"\\\"\n                       or else\n-                        (Norm'Length = 3\n-                          and then Norm (Norm'Last - 1 .. Norm'Last) = \":\\\"\n-                          and then (Norm (Norm'First) in 'a' .. 'z'\n+                        (Name'Length = 3\n+                          and then Name (Name'Last - 1 .. Name'Last) = \":\\\"\n+                          and then (Name (Name'First) in 'a' .. 'z'\n                                      or else\n-                                       Norm (Norm'First) in 'A' .. 'Z'))))\n+                                       Name (Name'First) in 'A' .. 'Z'))))\n             then\n                raise Use_Error with\n                  \"directory \"\"\" & Name & \"\"\" has no containing directory\";\n@@ -270,15 +266,10 @@ package body Ada.Directories is\n                      Last := Last - 1;\n                   end loop;\n \n-                  --  Special case of current directory, identified by \".\"\n-\n-                  if Last = 1 and then Result (1) = '.' then\n-                     return Current_Directory;\n-\n                   --  Special case of \"..\": the current directory may be a root\n                   --  directory.\n \n-                  elsif Last = 2 and then Result (1 .. 2) = \"..\" then\n+                  if Last = 2 and then Result (1 .. 2) = \"..\" then\n                      return Containing_Directory (Current_Directory);\n \n                   else"}, {"sha": "4b6a1279abae9baac8f5456ffbccd1662c06a901", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -153,10 +153,12 @@ package body Contracts is\n          end if;\n \n       --  Entry or subprogram declarations, the applicable pragmas are:\n+      --    Attach_Handler\n       --    Contract_Cases\n       --    Depends\n       --    Extensions_Visible\n       --    Global\n+      --    Interrupt_Handler\n       --    Postcondition\n       --    Precondition\n       --    Test_Case\n@@ -168,11 +170,10 @@ package body Contracts is\n                               E_Generic_Procedure,\n                               E_Procedure)\n       then\n-         if Nam_In (Prag_Nam, Name_Postcondition, Name_Precondition) then\n-            Add_Pre_Post_Condition;\n-\n-         elsif Nam_In (Prag_Nam, Name_Contract_Cases, Name_Test_Case) then\n-            Add_Contract_Test_Case;\n+         if Nam_In (Prag_Nam, Name_Attach_Handler, Name_Interrupt_Handler)\n+           and then Ekind_In (Id, E_Generic_Procedure, E_Procedure)\n+         then\n+            Add_Classification;\n \n          elsif Nam_In (Prag_Nam, Name_Depends,\n                                  Name_Extensions_Visible,\n@@ -185,6 +186,12 @@ package body Contracts is\n          then\n             Add_Classification;\n \n+         elsif Nam_In (Prag_Nam, Name_Contract_Cases, Name_Test_Case) then\n+            Add_Contract_Test_Case;\n+\n+         elsif Nam_In (Prag_Nam, Name_Postcondition, Name_Precondition) then\n+            Add_Pre_Post_Condition;\n+\n          --  The pragma is not a proper contract item\n \n          else"}, {"sha": "ee231fc9427e7e8d35f68b9042be2046e05d802a", "filename": "gcc/ada/contracts.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fcontracts.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fcontracts.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.ads?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -38,6 +38,7 @@ package Contracts is\n    --    Abstract_State\n    --    Async_Readers\n    --    Async_Writers\n+   --    Attach_Handler\n    --    Constant_After_Elaboration\n    --    Contract_Cases\n    --    Depends\n@@ -47,6 +48,7 @@ package Contracts is\n    --    Global\n    --    Initial_Condition\n    --    Initializes\n+   --    Interrupt_Handler\n    --    Part_Of\n    --    Postcondition\n    --    Precondition"}, {"sha": "a8cfa1abefb67e12ac29ce853d185af1749c0e71", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -7103,6 +7103,7 @@ package body Einfo is\n \n       Is_CLS : constant Boolean :=\n                  Id = Pragma_Abstract_State             or else\n+                 Id = Pragma_Attach_Handler             or else\n                  Id = Pragma_Async_Readers              or else\n                  Id = Pragma_Async_Writers              or else\n                  Id = Pragma_Constant_After_Elaboration or else\n@@ -7113,6 +7114,7 @@ package body Einfo is\n                  Id = Pragma_Global                     or else\n                  Id = Pragma_Initial_Condition          or else\n                  Id = Pragma_Initializes                or else\n+                 Id = Pragma_Interrupt_Handler          or else\n                  Id = Pragma_Part_Of                    or else\n                  Id = Pragma_Refined_Depends            or else\n                  Id = Pragma_Refined_Global             or else"}, {"sha": "d1f441bec5ba5ff67ca5fcaba2587d4f1049a673", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -8035,13 +8035,16 @@ package Einfo is\n    --    Abstract_State\n    --    Async_Readers\n    --    Async_Writers\n+   --    Attach_Handler\n+   --    Constant_After_Elaboration\n    --    Contract_Cases\n    --    Depends\n    --    Effective_Reads\n    --    Effective_Writes\n    --    Global\n    --    Initial_Condition\n    --    Initializes\n+   --    Interrupt_Handler\n    --    Part_Of\n    --    Precondition\n    --    Postcondition\n@@ -8050,6 +8053,7 @@ package Einfo is\n    --    Refined_Post\n    --    Refined_State\n    --    Test_Case\n+   --    Volatile_Function\n \n    function Get_Record_Representation_Clause (E : Entity_Id) return Node_Id;\n    --  Searches the Rep_Item chain for a given entity E, for a record"}, {"sha": "15f1fa7572a35f29e5f62d7f196c93706d142c9e", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -2087,7 +2087,9 @@ package body System.OS_Lib is\n          if Dir'Length > 0 then\n             declare\n                Result : String   :=\n-                          Normalize_Pathname (Dir, \"\") & Directory_Separator;\n+                          Normalize_Pathname\n+                            (Dir, \"\", Resolve_Links, Case_Sensitive) &\n+                             Directory_Separator;\n                Last   : Positive := Result'Last - 1;\n \n             begin"}, {"sha": "e8f7b1f00d352de4762838d59be8263c4d749e11", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -6484,6 +6484,10 @@ package body Sem_Ch8 is\n       --  This simplifies value tracing in GNATProve. For consistency, both\n       --  the entity name and the subtype come from the constrained component.\n \n+      --  This is only used in GNATProve mode: when generating code it may be\n+      --  necessary to create an itype in the scope of use of the selected\n+      --  component, e.g. in the context of a expanded record equality.\n+\n       function Is_Reference_In_Subunit return Boolean;\n       --  In a subunit, the scope depth is not a proper measure of hiding,\n       --  because the context of the proper body may itself hide entities in\n@@ -6499,17 +6503,19 @@ package body Sem_Ch8 is\n          Comp : Entity_Id;\n \n       begin\n-         Comp := First_Entity (Etype (P));\n-         while Present (Comp) loop\n-            if Chars (Comp) = Chars (Selector_Name (N)) then\n-               Set_Etype (N, Etype (Comp));\n-               Set_Entity (Selector_Name (N), Comp);\n-               Set_Etype  (Selector_Name (N), Etype (Comp));\n-               return True;\n-            end if;\n+         if GNATprove_Mode then\n+            Comp := First_Entity (Etype (P));\n+            while Present (Comp) loop\n+               if Chars (Comp) = Chars (Selector_Name (N)) then\n+                  Set_Etype  (N, Etype (Comp));\n+                  Set_Entity (Selector_Name (N), Comp);\n+                  Set_Etype  (Selector_Name (N), Etype (Comp));\n+                  return True;\n+               end if;\n \n-            Next_Component (Comp);\n-         end loop;\n+               Next_Component (Comp);\n+            end loop;\n+         end if;\n \n          return False;\n       end Available_Subtype;"}, {"sha": "f3282ea97f9e7107a1ea6ba25260b245447268cb", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c0dd5b3822bf4a714220f90b2dd78e9dc45a2b9d", "patch": "@@ -8768,30 +8768,28 @@ package body Sem_Prag is\n       -----------------------------------------\n \n       procedure Process_Interrupt_Or_Attach_Handler is\n-         Arg1_X       : constant Node_Id   := Get_Pragma_Arg (Arg1);\n-         Handler_Proc : constant Entity_Id := Entity (Arg1_X);\n-         Proc_Scope   : constant Entity_Id := Scope (Handler_Proc);\n+         Handler  : constant Entity_Id := Entity (Get_Pragma_Arg (Arg1));\n+         Prot_Typ : constant Entity_Id := Scope (Handler);\n \n       begin\n          --  A pragma that applies to a Ghost entity becomes Ghost for the\n          --  purposes of legality checks and removal of ignored Ghost code.\n \n-         Mark_Pragma_As_Ghost (N, Handler_Proc);\n-         Set_Is_Interrupt_Handler (Handler_Proc);\n+         Mark_Pragma_As_Ghost (N, Handler);\n+         Set_Is_Interrupt_Handler (Handler);\n \n          --  If the pragma is not associated with a handler procedure within a\n          --  protected type, then it must be for a nonprotected procedure for\n          --  the AAMP target, in which case we don't associate a representation\n          --  item with the procedure's scope.\n \n-         if Ekind (Proc_Scope) = E_Protected_Type then\n-            if Prag_Id = Pragma_Interrupt_Handler\n-                 or else\n-               Prag_Id = Pragma_Attach_Handler\n-            then\n-               Record_Rep_Item (Proc_Scope, N);\n-            end if;\n+         if Ekind (Prot_Typ) = E_Protected_Type then\n+            Record_Rep_Item (Prot_Typ, N);\n          end if;\n+\n+         --  Chain the pragma on the contract for completeness\n+\n+         Add_Contract_Item (N, Handler);\n       end Process_Interrupt_Or_Attach_Handler;\n \n       --------------------------------------------------"}]}