{"sha": "640296c367f97a1b9974bfb60bb02c934d71baf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwMjk2YzM2N2Y5N2ExYjk5NzRiZmI2MGJiMDJjOTM0ZDcxYmFmNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-01-12T02:37:59Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-01-12T02:37:59Z"}, "message": "make FOR_EACH_IMM_USE_STMT safe for early exits\n\nUse a dtor to automatically remove ITER from IMM_USE list in\nFOR_EACH_IMM_USE_STMT.\n\n\nfor  gcc/ChangeLog\n\n\t* ssa-iterators.h (end_imm_use_stmt_traverse): Forward\n\tdeclare.\n\t(auto_end_imm_use_stmt_traverse): New struct.\n\t(FOR_EACH_IMM_USE_STMT): Use it.\n\t(BREAK_FROM_IMM_USE_STMT, RETURN_FROM_IMM_USE_STMT): Remove,\n\talong with uses...\n\t* gimple-ssa-strength-reduction.c: ... here, ...\n\t* graphite-scop-detection.c: ... here, ...\n\t* ipa-modref.c, ipa-pure-const.c, ipa-sra.c: ... here, ...\n\t* tree-predcom.c, tree-ssa-ccp.c: ... here, ...\n\t* tree-ssa-dce.c, tree-ssa-dse.c: ... here, ...\n\t* tree-ssa-loop-ivopts.c, tree-ssa-math-opts.c: ... here, ...\n\t* tree-ssa-phiprop.c, tree-ssa.c: ... here, ...\n\t* tree-vect-slp.c: ... and here, ...\n\t* doc/tree-ssa.texi: ... and the example here.", "tree": {"sha": "df3eae8c2ec9b2891ef1e53258a47ccd24182fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df3eae8c2ec9b2891ef1e53258a47ccd24182fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640296c367f97a1b9974bfb60bb02c934d71baf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640296c367f97a1b9974bfb60bb02c934d71baf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640296c367f97a1b9974bfb60bb02c934d71baf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640296c367f97a1b9974bfb60bb02c934d71baf4/comments", "author": null, "committer": null, "parents": [{"sha": "ab88f3607233376c3145c320e92e71943a495bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab88f3607233376c3145c320e92e71943a495bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab88f3607233376c3145c320e92e71943a495bb5"}], "stats": {"total": 121, "additions": 54, "deletions": 67}, "files": [{"sha": "057135f80d11646f046f6a369009f7f8e8666069", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -385,20 +385,8 @@ optimization can manipulate the stmt when all the uses have been\n processed.  This is a little slower than the FAST version since it adds a\n placeholder element and must sort through the list a bit for each statement.\n This placeholder element must be also be removed if the loop is\n-terminated early.  The macro @code{BREAK_FROM_IMM_USE_STMT} is provided\n-to do this :\n-\n-@smallexample\n-  FOR_EACH_IMM_USE_STMT (stmt, iterator, ssa_var)\n-    @{\n-      if (stmt == last_stmt)\n-        BREAK_FROM_IMM_USE_STMT (iterator);\n-\n-      FOR_EACH_IMM_USE_ON_STMT (imm_use_p, iterator)\n-        SET_USE (imm_use_p, ssa_var_2);\n-      fold_stmt (stmt);\n-    @}\n-@end smallexample\n+terminated early; a destructor takes care of that when leaving the\n+@code{FOR_EACH_IMM_USE_STMT} scope.\n \n There are checks in @code{verify_ssa} which verify that the immediate use list\n is up to date, as well as checking that an optimization didn't break from the"}, {"sha": "a92cf03c1f322733dda978dc5c31105cdda996e4", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -524,7 +524,7 @@ uses_consumed_by_stmt (tree name, gimple *stmt, unsigned recurse = 0)\n \t\t\t\t     recurse + 1))\n \t{\n \t  retval = false;\n-\t  BREAK_FROM_IMM_USE_STMT (iter);\n+\t  break;\n \t}\n     }\n "}, {"sha": "3e729b159b095d5471df2afeb520e2cf0811b808", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -1262,9 +1262,7 @@ build_cross_bb_scalars_def (scop_p scop, tree def, basic_block def_bb,\n \t&& (def_bb != gimple_bb (use_stmt) && !is_gimple_debug (use_stmt)))\n       {\n \tadd_write (writes, def);\n-\t/* This is required by the FOR_EACH_IMM_USE_STMT when we want to break\n-\t   before all the uses have been visited.  */\n-\tBREAK_FROM_IMM_USE_STMT (imm_iter);\n+\tbreak;\n       }\n }\n "}, {"sha": "74ad876cf581ec211041a2e83c8f0235f9dfcec8", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -1597,9 +1597,7 @@ analyze_ssa_name_flags (tree name, vec<modref_lattice> &lattice, int depth,\n   FOR_EACH_IMM_USE_STMT (use_stmt, ui, name)\n     {\n       if (lattice[index].flags == 0)\n-\t{\n-\t  BREAK_FROM_IMM_USE_STMT (ui);\n-\t}\n+\tbreak;\n       if (is_gimple_debug (use_stmt))\n \tcontinue;\n       if (dump_file)"}, {"sha": "957217ae4ae344c7dc9958d546d98804ed96a420", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -842,20 +842,20 @@ check_retval_uses (tree retval, gimple *stmt)\n       {\n \ttree op2 = gimple_cond_rhs (cond);\n \tif (!integer_zerop (op2))\n-\t  RETURN_FROM_IMM_USE_STMT (use_iter, false);\n+\t  return false;\n       }\n     else if (gassign *ga = dyn_cast<gassign *> (use_stmt))\n       {\n \tenum tree_code code = gimple_assign_rhs_code (ga);\n \tif (TREE_CODE_CLASS (code) != tcc_comparison)\n-\t  RETURN_FROM_IMM_USE_STMT (use_iter, false);\n+\t  return false;\n \tif (!integer_zerop (gimple_assign_rhs2 (ga)))\n-\t  RETURN_FROM_IMM_USE_STMT (use_iter, false);\n+\t  return false;\n       }\n     else if (is_gimple_debug (use_stmt))\n       ;\n     else if (use_stmt != stmt)\n-      RETURN_FROM_IMM_USE_STMT (use_iter, false);\n+      return false;\n \n   return true;\n }"}, {"sha": "5d2c0dfce533e956d85b28a6f303a96256f6674f", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -850,7 +850,7 @@ isra_track_scalar_value_uses (function *fun, cgraph_node *node, tree name,\n \t      || (arg_count = gimple_call_num_args (call)) == 0)\n \t    {\n \t      res = -1;\n-\t      BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t      break;\n \t    }\n \n \t  cgraph_edge *cs = node->get_edge (stmt);\n@@ -874,7 +874,7 @@ isra_track_scalar_value_uses (function *fun, cgraph_node *node, tree name,\n \t      || all_uses != simple_uses)\n \t    {\n \t      res = -1;\n-\t      BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t      break;\n \t    }\n \t  res += all_uses;\n \t}\n@@ -891,7 +891,7 @@ isra_track_scalar_value_uses (function *fun, cgraph_node *node, tree name,\n \t  if (TREE_CODE (lhs) != SSA_NAME)\n \t    {\n \t      res = -1;\n-\t      BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t      break;\n \t    }\n \t  gcc_assert (!gimple_vdef (stmt));\n \t  if (bitmap_set_bit (analyzed, SSA_NAME_VERSION (lhs)))\n@@ -901,15 +901,15 @@ isra_track_scalar_value_uses (function *fun, cgraph_node *node, tree name,\n \t      if (tmp < 0)\n \t\t{\n \t\t  res = tmp;\n-\t\t  BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t\t  break;\n \t\t}\n \t      res += tmp;\n \t    }\n \t}\n       else\n \t{\n \t  res = -1;\n-\t  BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t  break;\n \t}\n     }\n   return res;\n@@ -1016,7 +1016,7 @@ ptr_parm_has_nonarg_uses (cgraph_node *node, function *fun, tree parm,\n \t      || (arg_count = gimple_call_num_args (call)) == 0)\n \t    {\n \t      ret = true;\n-\t      BREAK_FROM_IMM_USE_STMT (ui);\n+\t      break;\n \t    }\n \n \t  cgraph_edge *cs = node->get_edge (stmt);\n@@ -1062,7 +1062,7 @@ ptr_parm_has_nonarg_uses (cgraph_node *node, function *fun, tree parm,\n       if (uses_ok != all_uses)\n \t{\n \t  ret = true;\n-\t  BREAK_FROM_IMM_USE_STMT (ui);\n+\t  break;\n \t}\n     }\n \n@@ -1975,7 +1975,7 @@ ssa_name_only_returned_p (tree name, bitmap analyzed)\n \t  if (t != name)\n \t    {\n \t      res = false;\n-\t      BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t      break;\n \t    }\n \t}\n       else if ((is_gimple_assign (stmt) && !gimple_has_volatile_ops (stmt))\n@@ -1991,20 +1991,20 @@ ssa_name_only_returned_p (tree name, bitmap analyzed)\n \t  if (TREE_CODE (lhs) != SSA_NAME)\n \t    {\n \t      res = false;\n-\t      BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t      break;\n \t    }\n \t  gcc_assert (!gimple_vdef (stmt));\n \t  if (bitmap_set_bit (analyzed, SSA_NAME_VERSION (lhs))\n \t      && !ssa_name_only_returned_p (lhs, analyzed))\n \t    {\n \t      res = false;\n-\t      BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t      break;\n \t    }\n \t}\n       else\n \t{\n \t  res = false;\n-\t  BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t  break;\n \t}\n     }\n   return res;"}, {"sha": "f70b0a42368d7e2a0fe8cb94997751b16e37a422", "filename": "gcc/ssa-iterators.h", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fssa-iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Fssa-iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-iterators.h?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -77,29 +77,32 @@ struct imm_use_iterator\n        !end_readonly_imm_use_p (&(ITER));\t\t\t\\\n        (void) ((DEST) = next_readonly_imm_use (&(ITER))))\n \n-/* Use this iterator to visit each stmt which has a use of SSAVAR.  */\n+/* Forward declare for use in the class below.  */\n+static inline void end_imm_use_stmt_traverse (imm_use_iterator *);\n+\n+/* arrange to automatically call, upon descruction, end_imm_use_stmt_traverse\n+   with a given pointer to imm_use_iterator.  */\n+struct auto_end_imm_use_stmt_traverse\n+{\n+  imm_use_iterator *imm;\n+  auto_end_imm_use_stmt_traverse (imm_use_iterator *imm)\n+  : imm (imm) {}\n+  ~auto_end_imm_use_stmt_traverse ()\n+  { end_imm_use_stmt_traverse (imm); }\n+};\n+\n+/* Use this iterator to visit each stmt which has a use of SSAVAR.  The\n+   destructor of the auto_end_imm_use_stmt_traverse object deals with removing\n+   ITER from SSAVAR's IMM_USE list even when leaving the scope early.  */\n \n #define FOR_EACH_IMM_USE_STMT(STMT, ITER, SSAVAR)\t\t\\\n-  for ((STMT) = first_imm_use_stmt (&(ITER), (SSAVAR));\t\t\\\n+  for (struct auto_end_imm_use_stmt_traverse\t\t\t\\\n+\t auto_end_imm_use_stmt_traverse\t\t\t\t\\\n+\t   ((((STMT) = first_imm_use_stmt (&(ITER), (SSAVAR))),\t\\\n+\t     &(ITER)));\t\t\t\t\t\t\\\n        !end_imm_use_stmt_p (&(ITER));\t\t\t\t\\\n        (void) ((STMT) = next_imm_use_stmt (&(ITER))))\n \n-/* Use this to terminate the FOR_EACH_IMM_USE_STMT loop early.  Failure to\n-   do so will result in leaving a iterator marker node in the immediate\n-   use list, and nothing good will come from that.   */\n-#define BREAK_FROM_IMM_USE_STMT(ITER)\t\t\t\t\\\n-   {\t\t\t\t\t\t\t\t\\\n-     end_imm_use_stmt_traverse (&(ITER));\t\t\t\\\n-     break;\t\t\t\t\t\t\t\\\n-   }\n-\n-/* Similarly for return.  */\n-#define RETURN_FROM_IMM_USE_STMT(ITER, VAL)\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    end_imm_use_stmt_traverse (&(ITER));\t\t\t\\\n-    return (VAL);\t\t\t\t\t\t\\\n-  }\n-\n /* Use this iterator in combination with FOR_EACH_IMM_USE_STMT to\n    get access to each occurrence of ssavar on the stmt returned by\n    that iterator..  for instance:"}, {"sha": "5482f50198a6ed3176dfd263410e03535cca7390", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -2367,7 +2367,7 @@ base_names_in_chain_on (class loop *loop, tree name, tree var)\n \t      && flow_bb_inside_loop_p (loop, gimple_bb (stmt)))\n \t    {\n \t      phi = stmt;\n-\t      BREAK_FROM_IMM_USE_STMT (iter);\n+\t      break;\n \t    }\n \t}\n       if (!phi)"}, {"sha": "965f092ccccb4a6f7b947b069eea2bfe286b4610", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -3020,7 +3020,7 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t}\n \n       use_bool = false;\n-      BREAK_FROM_IMM_USE_STMT (iter);\n+      break;\n     }\n \n   tree new_lhs = make_ssa_name (TREE_TYPE (lhs));"}, {"sha": "51d4fcbb1c84ad63d29714eacdbaa16f813ac586", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -1516,7 +1516,7 @@ eliminate_unnecessary_stmts (void)\n \t\t\t    || gimple_plf (stmt, STMT_NECESSARY))\n \t\t\t  {\n \t\t\t    found = true;\n-\t\t\t    BREAK_FROM_IMM_USE_STMT (iter);\n+\t\t\t    break;\n \t\t\t  }\n \t\t      }\n \t\t    if (found)"}, {"sha": "4967a5a99272ba1c4e7ce4c4d1309b61665a16fd", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -693,7 +693,7 @@ dse_optimize_redundant_stores (gimple *stmt)\n     {\n       /* Limit stmt walking.  */\n       if (++cnt > param_dse_max_alias_queries_per_store)\n-\tBREAK_FROM_IMM_USE_STMT (ui);\n+\tbreak;\n \n       /* If USE_STMT stores 0 into one or more of the same locations\n \t as STMT and STMT would kill USE_STMT, then we can just remove\n@@ -712,7 +712,7 @@ dse_optimize_redundant_stores (gimple *stmt)\n \t  ao_ref write;\n \n \t  if (!initialize_ao_ref_for_dse (use_stmt, &write))\n-\t    BREAK_FROM_IMM_USE_STMT (ui)\n+\t    break;\n \n \t  if (valid_ao_ref_for_dse (&write)\n \t      && stmt_kills_ref_p (stmt, &write))\n@@ -805,7 +805,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t  if (++cnt > param_dse_max_alias_queries_per_store)\n \t    {\n \t      fail = true;\n-\t      BREAK_FROM_IMM_USE_STMT (ui);\n+\t      break;\n \t    }\n \n \t  /* We have visited ourselves already so ignore STMT for the\n@@ -852,7 +852,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t\t}\n \n \t      fail = true;\n-\t      BREAK_FROM_IMM_USE_STMT (ui);\n+\t      break;\n \t    }\n \t  /* If this is a store, remember it as we possibly need to walk the\n \t     defs uses.  */"}, {"sha": "4012ae3f19ddb7ac6e51522ac9db86fd88a7ec04", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -7627,7 +7627,7 @@ remove_unused_ivs (struct ivopts_data *data, bitmap toremove)\n \t\t    count++;\n \n \t\t  if (count > 1)\n-\t\t    BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t\t    break;\n \t\t}\n \n \t      if (!count)"}, {"sha": "91b3d1baa34ef8ec5151c9113fcf0a7a7e78d577", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -1285,7 +1285,7 @@ execute_cse_sincos_1 (tree name)\n \t and, in subsequent rounds, that the built_in type is the same\n \t type, or a compatible type.  */\n       if (type != t && !types_compatible_p (type, t))\n-\tRETURN_FROM_IMM_USE_STMT (use_iter, false);\n+\treturn false;\n     }\n   if (seen_cos + seen_sin + seen_cexpi <= 1)\n     return false;"}, {"sha": "64d6eda5f6c26a6709b000a77586412f5429f418", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -119,7 +119,7 @@ phivn_valid_p (struct phiprop_d *phivn, tree name, basic_block bb)\n \t  && !dominated_by_p (CDI_DOMINATORS, gimple_bb (use_stmt), bb))\n \t{\n \t  ok = false;\n-\t  BREAK_FROM_IMM_USE_STMT (ui2);\n+\t  break;\n \t}\n     }\n "}, {"sha": "cf54c8914268d3d84a98bb287d519ddda3ce0120", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -607,7 +607,7 @@ release_defs_bitset (bitmap toremove)\n \t\t}\n \n \t      if (!remove_now)\n-\t\tBREAK_FROM_IMM_USE_STMT (uit);\n+\t\tbreak;\n \t    }\n \n \t  if (remove_now)"}, {"sha": "877d44b2257bb6b4081e15dc4bc776722323d2eb", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640296c367f97a1b9974bfb60bb02c934d71baf4/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=640296c367f97a1b9974bfb60bb02c934d71baf4", "patch": "@@ -3857,7 +3857,7 @@ vect_bb_slp_mark_live_stmts (bb_vec_info bb_vinfo, slp_tree node,\n \t\t      mark_visited = false;\n \t\t    else\n \t\t      STMT_VINFO_LIVE_P (stmt_info) = false;\n-\t\t    BREAK_FROM_IMM_USE_STMT (use_iter);\n+\t\t    break;\n \t\t  }\n \t      }\n \t  /* We have to verify whether we can insert the lane extract\n@@ -4124,7 +4124,7 @@ vect_bb_slp_scalar_cost (vec_info *vinfo,\n \t\t\t      (vect_stmt_to_vectorize (use_stmt_info)))\n \t\t      {\n \t\t\t(*life)[i] = true;\n-\t\t\tBREAK_FROM_IMM_USE_STMT (use_iter);\n+\t\t\tbreak;\n \t\t      }\n \t\t  }\n \t    }"}]}