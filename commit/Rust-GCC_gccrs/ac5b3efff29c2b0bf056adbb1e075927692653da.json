{"sha": "ac5b3efff29c2b0bf056adbb1e075927692653da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1YjNlZmZmMjljMmIwYmYwNTZhZGJiMWUwNzU5Mjc2OTI2NTNkYQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-11-03T17:32:03Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-11-03T17:32:03Z"}, "message": "[DWARF] Enable DW_CFA_VAL_EXPRESSION support\n\ngcc/\n\t* reg-notes.def (CFA_VAL_EXPRESSION): New entry.\n\t* dwarf2cfi.c (dwarf2out_frame_debug_cfa_val_expression): New function.\n\t(dwarf2out_frame_debug): Support REG_CFA_VAL_EXPRESSION.\n\t(output_cfa_loc): Support DW_CFA_val_expression.\n\t(output_cfa_loc_raw): Likewise.\n\t(output_cfi): Likewise.\n\t(output_cfi_directive): Likewise.\n\t* dwarf2out.c (dw_cfi_oprnd1_desc): Support DW_CFA_val_expression.\n\t(dw_cfi_oprnd2_desc): Likewise.\n\t(mem_loc_descriptor): Recognize new pattern generated for value\n\texpression.\n\nFrom-SVN: r241826", "tree": {"sha": "7359844c4ff9a95d3137e3267597a68eb1d23f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7359844c4ff9a95d3137e3267597a68eb1d23f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac5b3efff29c2b0bf056adbb1e075927692653da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5b3efff29c2b0bf056adbb1e075927692653da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5b3efff29c2b0bf056adbb1e075927692653da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5b3efff29c2b0bf056adbb1e075927692653da/comments", "author": null, "committer": null, "parents": [{"sha": "122e3608b6d4d31ebd68f12d55b44319d54486f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/122e3608b6d4d31ebd68f12d55b44319d54486f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/122e3608b6d4d31ebd68f12d55b44319d54486f9"}], "stats": {"total": 112, "additions": 101, "deletions": 11}, "files": [{"sha": "aa47e5db81407a0cb78414e0ad39a0b9be783bc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac5b3efff29c2b0bf056adbb1e075927692653da", "patch": "@@ -1,3 +1,17 @@\n+2016-11-03  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* reg-notes.def (CFA_VAL_EXPRESSION): New entry.\n+\t* dwarf2cfi.c (dwarf2out_frame_debug_cfa_val_expression): New function.\n+\t(dwarf2out_frame_debug): Support REG_CFA_VAL_EXPRESSION.\n+\t(output_cfa_loc): Support DW_CFA_val_expression.\n+\t(output_cfa_loc_raw): Likewise.\n+\t(output_cfi): Likewise.\n+\t(output_cfi_directive): Likewise.\n+\t* dwarf2out.c (dw_cfi_oprnd1_desc): Support DW_CFA_val_expression.\n+\t(dw_cfi_oprnd2_desc): Likewise.\n+\t(mem_loc_descriptor): Recognize new pattern generated for value\n+\texpression.\n+\n 2016-11-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/78186"}, {"sha": "b6e8b4b6c61c251fc3d4be5abd86e151cee27abb", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=ac5b3efff29c2b0bf056adbb1e075927692653da", "patch": "@@ -1236,7 +1236,7 @@ dwarf2out_frame_debug_cfa_register (rtx set)\n   reg_save (sregno, dregno, 0);\n }\n \n-/* A subroutine of dwarf2out_frame_debug, process a REG_CFA_EXPRESSION note. */\n+/* A subroutine of dwarf2out_frame_debug, process a REG_CFA_EXPRESSION note.  */\n \n static void\n dwarf2out_frame_debug_cfa_expression (rtx set)\n@@ -1268,6 +1268,29 @@ dwarf2out_frame_debug_cfa_expression (rtx set)\n   update_row_reg_save (cur_row, regno, cfi);\n }\n \n+/* A subroutine of dwarf2out_frame_debug, process a REG_CFA_VAL_EXPRESSION\n+   note.  */\n+\n+static void\n+dwarf2out_frame_debug_cfa_val_expression (rtx set)\n+{\n+  rtx dest = SET_DEST (set);\n+  gcc_assert (REG_P (dest));\n+\n+  rtx span = targetm.dwarf_register_span (dest);\n+  gcc_assert (!span);\n+\n+  rtx src = SET_SRC (set);\n+  dw_cfi_ref cfi = new_cfi ();\n+  cfi->dw_cfi_opc = DW_CFA_val_expression;\n+  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = dwf_regno (dest);\n+  cfi->dw_cfi_oprnd2.dw_cfi_loc\n+    = mem_loc_descriptor (src, GET_MODE (src),\n+\t\t\t  GET_MODE (dest), VAR_INIT_STATUS_INITIALIZED);\n+  add_cfi (cfi);\n+  update_row_reg_save (cur_row, dwf_regno (dest), cfi);\n+}\n+\n /* A subroutine of dwarf2out_frame_debug, process a REG_CFA_RESTORE note.  */\n \n static void\n@@ -2034,10 +2057,16 @@ dwarf2out_frame_debug (rtx_insn *insn)\n \tbreak;\n \n       case REG_CFA_EXPRESSION:\n+      case REG_CFA_VAL_EXPRESSION:\n \tn = XEXP (note, 0);\n \tif (n == NULL)\n \t  n = single_set (insn);\n-\tdwarf2out_frame_debug_cfa_expression (n);\n+\n+\tif (REG_NOTE_KIND (note) == REG_CFA_EXPRESSION)\n+\t  dwarf2out_frame_debug_cfa_expression (n);\n+\telse\n+\t  dwarf2out_frame_debug_cfa_val_expression (n);\n+\n \thandled_one = true;\n \tbreak;\n \n@@ -3016,7 +3045,8 @@ output_cfa_loc (dw_cfi_ref cfi, int for_eh)\n   dw_loc_descr_ref loc;\n   unsigned long size;\n \n-  if (cfi->dw_cfi_opc == DW_CFA_expression)\n+  if (cfi->dw_cfi_opc == DW_CFA_expression\n+      || cfi->dw_cfi_opc == DW_CFA_val_expression)\n     {\n       unsigned r =\n \tDWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n@@ -3042,7 +3072,8 @@ output_cfa_loc_raw (dw_cfi_ref cfi)\n   dw_loc_descr_ref loc;\n   unsigned long size;\n \n-  if (cfi->dw_cfi_opc == DW_CFA_expression)\n+  if (cfi->dw_cfi_opc == DW_CFA_expression\n+      || cfi->dw_cfi_opc == DW_CFA_val_expression)\n     {\n       unsigned r =\n \tDWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n@@ -3189,6 +3220,7 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n \n \tcase DW_CFA_def_cfa_expression:\n \tcase DW_CFA_expression:\n+\tcase DW_CFA_val_expression:\n \t  output_cfa_loc (cfi, for_eh);\n \t  break;\n \n@@ -3303,16 +3335,13 @@ output_cfi_directive (FILE *f, dw_cfi_ref cfi)\n       break;\n \n     case DW_CFA_def_cfa_expression:\n-      if (f != asm_out_file)\n-\t{\n-\t  fprintf (f, \"\\t.cfi_def_cfa_expression ...\\n\");\n-\t  break;\n-\t}\n-      /* FALLTHRU */\n     case DW_CFA_expression:\n+    case DW_CFA_val_expression:\n       if (f != asm_out_file)\n \t{\n-\t  fprintf (f, \"\\t.cfi_cfa_expression ...\\n\");\n+\t  fprintf (f, \"\\t.cfi_%scfa_%sexpression ...\\n\",\n+\t\t   cfi->dw_cfi_opc == DW_CFA_def_cfa_expression ? \"def_\" : \"\",\n+\t\t   cfi->dw_cfi_opc == DW_CFA_val_expression ? \"val_\" : \"\");\n \t  break;\n \t}\n       fprintf (f, \"\\t.cfi_escape %#x,\", cfi->dw_cfi_opc);"}, {"sha": "b6161e519ee271899adb55ace7e490c48a8cb7af", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ac5b3efff29c2b0bf056adbb1e075927692653da", "patch": "@@ -525,6 +525,7 @@ dw_cfi_oprnd1_desc (enum dwarf_call_frame_info cfi)\n     case DW_CFA_def_cfa_register:\n     case DW_CFA_register:\n     case DW_CFA_expression:\n+    case DW_CFA_val_expression:\n       return dw_cfi_oprnd_reg_num;\n \n     case DW_CFA_def_cfa_offset:\n@@ -558,6 +559,7 @@ dw_cfi_oprnd2_desc (enum dwarf_call_frame_info cfi)\n       return dw_cfi_oprnd_reg_num;\n \n     case DW_CFA_expression:\n+    case DW_CFA_val_expression:\n       return dw_cfi_oprnd_loc;\n \n     default:\n@@ -15365,6 +15367,46 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       resolve_one_addr (&rtl);\n       goto symref;\n \n+    /* RTL sequences inside PARALLEL record a series of DWARF operations for\n+       the expression.  An UNSPEC rtx represents a raw DWARF operation,\n+       new_loc_descr is called for it to build the operation directly.\n+       Otherwise mem_loc_descriptor is called recursively.  */\n+    case PARALLEL:\n+      {\n+\tint index = 0;\n+\tdw_loc_descr_ref exp_result = NULL;\n+\n+\tfor (; index < XVECLEN (rtl, 0); index++)\n+\t  {\n+\t    rtx elem = XVECEXP (rtl, 0, index);\n+\t    if (GET_CODE (elem) == UNSPEC)\n+\t      {\n+\t\t/* Each DWARF operation UNSPEC contain two operands, if\n+\t\t   one operand is not used for the operation, const0_rtx is\n+\t\t   passed.  */\n+\t\tgcc_assert (XVECLEN (elem, 0) == 2);\n+\n+\t\tHOST_WIDE_INT dw_op = XINT (elem, 1);\n+\t\tHOST_WIDE_INT oprnd1 = INTVAL (XVECEXP (elem, 0, 0));\n+\t\tHOST_WIDE_INT oprnd2 = INTVAL (XVECEXP (elem, 0, 1));\n+\t\texp_result\n+\t\t  = new_loc_descr ((enum dwarf_location_atom) dw_op, oprnd1,\n+\t\t\t\t   oprnd2);\n+\t      }\n+\t    else\n+\t      exp_result\n+\t\t= mem_loc_descriptor (elem, mode, mem_mode,\n+\t\t\t\t      VAR_INIT_STATUS_INITIALIZED);\n+\n+\t    if (!mem_loc_result)\n+\t      mem_loc_result = exp_result;\n+\t    else\n+\t      add_loc_descr (&mem_loc_result, exp_result);\n+\t  }\n+\n+\tbreak;\n+      }\n+\n     default:\n       if (flag_checking)\n \t{"}, {"sha": "962dbb8007e5150d733344dd5a75495d9adf6a79", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5b3efff29c2b0bf056adbb1e075927692653da/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=ac5b3efff29c2b0bf056adbb1e075927692653da", "patch": "@@ -149,6 +149,11 @@ REG_NOTE (CFA_REGISTER)\n    store of a register to an arbitrary (non-validated) memory address.  */\n REG_NOTE (CFA_EXPRESSION)\n \n+/* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n+   for FRAME_RELATED_EXPR intuition.  The DWARF expression computes the value of\n+   the given register.  */\n+REG_NOTE (CFA_VAL_EXPRESSION)\n+\n /* Attached to insns that are RTX_FRAME_RELATED_P, with the information\n    that this is a restore operation, i.e. will result in DW_CFA_restore\n    or the like.  Either the attached rtx, or the destination of the insn's"}]}