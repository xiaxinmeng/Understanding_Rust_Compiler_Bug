{"sha": "056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2YTE3ZWU2Y2E4ZjBmY2QzMThkMGRmYmExOGYyNzdlMDVhMzU3OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-11T11:57:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-11T11:57:01Z"}, "message": "cp-tree.h (pushdecl, [...]): Move declarations to ...\n\n\t* cp-tree.h (pushdecl, pushdecl_maybe_friend, pushtag)\n\tpushtag_top_level_maybe_friend,\n\tpushdecl_top_level_and_finish):\tMove declarations to ...\n\t* name-lookup.h: ... here.  Group pushdecl variants.\n\t(pushdecl_top_level_and_finish): Rename to ...\n\t(pushdecl_top_level_with_init): ... here.\n\t* decl.c (cp_make_fname_decl): Use pushdecl_top_level_with_init.\n\t* decl2.c (get_guard, handle_tls_init): Likewise.\n\t* rtti.c (get_tinfo_decl, tinfo_base_init): Likewise.\n\t* lambda.c (maybe_add_lambda_conv_op): Use namespace_bindings_p.\n\t* method.c (implicitly_declare_fn): Likewise.\n\t* searchc (node_debug_info_needed): Likewise.\n\t* name-lookup.c (pushdecl_top_level_and_finish): Rename to ...\n\t(pushdecl_top_level_with_init): ... here.\n\t(pop_everything): Use namespace_bindings_p.\n(--This line, and those below, will be ignored--\n\nM    cp/ChangeLog\nM    cp/method.c\nM    cp/cp-tree.h\nM    cp/decl.c\nM    cp/lambda.c\nM    cp/rtti.c\nM    cp/name-lookup.c\nM    cp/decl2.c\nM    cp/name-lookup.h\nM    cp/search.c\n\nFrom-SVN: r247902", "tree": {"sha": "50d199435215cadff254d6afbe14e7cff70a79d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50d199435215cadff254d6afbe14e7cff70a79d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "c4afd41e981d4f00a8b952401bf5c0e895184660", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -1,5 +1,21 @@\n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (pushdecl, pushdecl_maybe_friend, pushtag,\n+\tpushtag_top_level_maybe_friend,\n+\tpushdecl_top_level_and_finish):\tMove declarations to ...\n+\t* name-lookup.h: ... here.  Group pushdecl variants.\n+\t(pushdecl_top_level_and_finish): Rename to ...\n+\t(pushdecl_top_level_with_init): ... here.\n+\t* decl.c (cp_make_fname_decl): Use pushdecl_top_level_with_init.\n+\t* decl2.c (get_guard, handle_tls_init): Likewise.\n+\t* rtti.c (get_tinfo_decl, tinfo_base_init): Likewise.\n+\t* lambda.c (maybe_add_lambda_conv_op): Use namespace_bindings_p.\n+\t* method.c (implicitly_declare_fn): Likewise.\n+\t* searchc (node_debug_info_needed): Likewise.\n+\t* name-lookup.c (pushdecl_top_level_and_finish): Rename to ...\n+\t(pushdecl_top_level_with_init): ... here.\n+\t(pop_everything): Use namespace_bindings_p.\n+\n \t* name-lookup.h (pop_binding): Rename to pop_local_binding.\n \t(getdecls): Rename to get_local_decls.\n \t* name-lookup.c (pop_binding): Rename to ..."}, {"sha": "9596886226f15a0973fb15138932a4aceda37f9e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -5820,13 +5820,8 @@ extern bool fnptr_conv_p\t\t\t(tree, tree);\n extern tree strip_fnptr_conv\t\t\t(tree);\n \n /* in name-lookup.c */\n-extern tree pushdecl\t\t\t\t(tree);\n-extern tree pushdecl_maybe_friend\t\t(tree, bool);\n extern void maybe_push_cleanup_level\t\t(tree);\n-extern tree pushtag\t\t\t\t(tree, tree, tag_scope);\n extern tree make_anon_name\t\t\t(void);\n-extern tree pushdecl_top_level_maybe_friend\t(tree, bool);\n-extern tree pushdecl_top_level_and_finish\t(tree, tree);\n extern tree check_for_out_of_scope_variable\t(tree);\n extern void dump\t\t\t\t(cp_binding_level &ref);\n extern void dump\t\t\t\t(cp_binding_level *ptr);"}, {"sha": "9291b9618bc2d3b9885c059add1960422d6f6306", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -4342,7 +4342,7 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n   else\n     {\n       DECL_THIS_STATIC (decl) = true;\n-      pushdecl_top_level_and_finish (decl, init);\n+      pushdecl_top_level_with_init (decl, init);\n     }\n \n   return decl;"}, {"sha": "758c6985fe977d31878128cee66d23b0aa429f8b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -3021,7 +3021,7 @@ get_guard (tree decl)\n       DECL_ARTIFICIAL (guard) = 1;\n       DECL_IGNORED_P (guard) = 1;\n       TREE_USED (guard) = 1;\n-      pushdecl_top_level_and_finish (guard, NULL_TREE);\n+      pushdecl_top_level_with_init (guard, NULL_TREE);\n     }\n   return guard;\n }\n@@ -4261,7 +4261,7 @@ handle_tls_init (void)\n   TREE_USED (guard) = true;\n   CP_DECL_THREAD_LOCAL_P (guard) = true;\n   set_decl_tls_model (guard, decl_default_tls_model (guard));\n-  pushdecl_top_level_and_finish (guard, NULL_TREE);\n+  pushdecl_top_level_with_init (guard, NULL_TREE);\n \n   tree fn = get_local_tls_init_fn ();\n   start_preparsed_function (fn, NULL_TREE, SF_PRE_PARSED);"}, {"sha": "80643ea2bbcd13d436322a55a57c378d9c691c65", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -1098,7 +1098,7 @@ maybe_add_lambda_conv_op (tree type)\n   SET_OVERLOADED_OPERATOR_CODE (fn, TYPE_EXPR);\n   grokclassfn (type, fn, NO_SPECIAL);\n   set_linkage_according_to_type (type, fn);\n-  rest_of_decl_compilation (fn, toplevel_bindings_p (), at_eof);\n+  rest_of_decl_compilation (fn, namespace_bindings_p (), at_eof);\n   DECL_IN_AGGR_P (fn) = 1;\n   DECL_ARTIFICIAL (fn) = 1;\n   DECL_NOT_REALLY_EXTERN (fn) = 1;\n@@ -1128,7 +1128,7 @@ maybe_add_lambda_conv_op (tree type)\n   DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (callop);\n   grokclassfn (type, fn, NO_SPECIAL);\n   set_linkage_according_to_type (type, fn);\n-  rest_of_decl_compilation (fn, toplevel_bindings_p (), at_eof);\n+  rest_of_decl_compilation (fn, namespace_bindings_p (), at_eof);\n   DECL_IN_AGGR_P (fn) = 1;\n   DECL_ARTIFICIAL (fn) = 1;\n   DECL_NOT_REALLY_EXTERN (fn) = 1;"}, {"sha": "6a2f18ce0fd211436115ca6ecd381d5b1cd45cff", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -2096,7 +2096,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n   set_linkage_according_to_type (type, fn);\n   if (TREE_PUBLIC (fn))\n     DECL_COMDAT (fn) = 1;\n-  rest_of_decl_compilation (fn, toplevel_bindings_p (), at_eof);\n+  rest_of_decl_compilation (fn, namespace_bindings_p (), at_eof);\n   gcc_assert (!TREE_USED (fn));\n \n   /* Propagate constraints from the inherited constructor. */"}, {"sha": "0392651fd68ac5e530983aa9586dd99125640a65", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -4588,7 +4588,7 @@ pushdecl_top_level_maybe_friend (tree x, bool is_friend)\n    initializing it with INIT.  */\n \n tree\n-pushdecl_top_level_and_finish (tree x, tree init)\n+pushdecl_top_level_with_init (tree x, tree init)\n {\n   return pushdecl_top_level_1 (x, &init, false);\n }\n@@ -6618,7 +6618,7 @@ pop_everything (void)\n {\n   if (ENABLE_SCOPE_CHECKING)\n     verbatim (\"XXX entering pop_everything ()\\n\");\n-  while (!toplevel_bindings_p ())\n+  while (!namespace_bindings_p ())\n     {\n       if (current_binding_level->kind == sk_class)\n \tpop_nested_class ();"}, {"sha": "f24461c8506197af8259377ac8d3aa8cb834a639", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -282,29 +282,22 @@ struct GTY(()) cp_binding_level {\n extern cp_binding_level *leave_scope (void);\n extern bool kept_level_p (void);\n extern bool global_bindings_p (void);\n-extern bool toplevel_bindings_p\t(void);\n+extern bool toplevel_bindings_p (void);\n extern bool namespace_bindings_p (void);\n extern bool local_bindings_p (void);\n extern bool template_parm_scope_p (void);\n extern scope_kind innermost_scope_kind (void);\n extern cp_binding_level *begin_scope (scope_kind, tree);\n extern void print_binding_stack\t(void);\n-extern void push_to_top_level (void);\n-extern void pop_from_top_level (void);\n extern void pop_everything (void);\n extern void keep_next_level (bool);\n-extern bool is_ancestor (tree, tree);\n+extern bool is_ancestor (tree ancestor, tree descendant);\n extern tree push_scope (tree);\n extern void pop_scope (tree);\n extern tree push_inner_scope (tree);\n extern void pop_inner_scope (tree, tree);\n extern void push_binding_level (cp_binding_level *);\n \f\n-extern tree pushdecl_outermost_localscope (tree);\n-extern bool push_namespace (tree);\n-extern void pop_namespace (void);\n-extern void push_nested_namespace (tree);\n-extern void pop_nested_namespace (tree);\n extern bool handle_namespace_attrs (tree, tree);\n extern void pushlevel_class (void);\n extern void poplevel_class (void);\n@@ -342,6 +335,18 @@ extern tree innermost_non_namespace_value (tree);\n extern cxx_binding *outer_binding (tree, cxx_binding *, bool);\n extern void cp_emit_debug_info_for_using (tree, tree);\n \n-extern tree pushdecl_top_level\t\t\t(tree);\n+extern tree pushdecl_maybe_friend (tree, bool is_friend);\n+extern tree pushdecl (tree);\n+extern tree pushdecl_outermost_localscope (tree);\n+extern tree pushdecl_top_level_maybe_friend (tree, bool is_friend);\n+extern tree pushdecl_top_level (tree);\n+extern tree pushdecl_top_level_with_init (tree, tree);\n+extern tree pushtag (tree, tree, tag_scope);\n+extern bool push_namespace (tree);\n+extern void pop_namespace (void);\n+extern void push_nested_namespace (tree);\n+extern void pop_nested_namespace (tree);\n+extern void push_to_top_level (void);\n+extern void pop_from_top_level (void);\n \n #endif /* GCC_CP_NAME_LOOKUP_H */"}, {"sha": "c5a110ced9f9553b2dba247596efeb37be0f9535", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -445,7 +445,7 @@ get_tinfo_decl (tree type)\n       DECL_NOT_REALLY_EXTERN (d) = 1;\n       set_linkage_according_to_type (type, d);\n \n-      d = pushdecl_top_level_and_finish (d, NULL_TREE);\n+      d = pushdecl_top_level_with_init (d, NULL_TREE);\n       if (CLASS_TYPE_P (type))\n \tCLASSTYPE_TYPEINFO_VAR (TYPE_MAIN_VARIANT (type)) = d;\n \n@@ -911,7 +911,7 @@ tinfo_base_init (tinfo_s *ti, tree target)\n     name_string = tinfo_name (target, !TREE_PUBLIC (name_decl));\n     DECL_INITIAL (name_decl) = name_string;\n     mark_used (name_decl);\n-    pushdecl_top_level_and_finish (name_decl, name_string);\n+    pushdecl_top_level_with_init (name_decl, name_string);\n   }\n \n   vtable_ptr = ti->vtable;"}, {"sha": "fa72c47d4f7faafea8787dac53fb22bcb1e70dfc", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056a17ee6ca8f0fcd318d0dfba18f277e05a3579/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=056a17ee6ca8f0fcd318d0dfba18f277e05a3579", "patch": "@@ -2365,7 +2365,7 @@ note_debug_info_needed (tree type)\n   if (TYPE_DECL_SUPPRESS_DEBUG (TYPE_NAME (type)))\n     {\n       TYPE_DECL_SUPPRESS_DEBUG (TYPE_NAME (type)) = 0;\n-      rest_of_type_compilation (type, toplevel_bindings_p ());\n+      rest_of_type_compilation (type, namespace_bindings_p ());\n     }\n \n   dfs_walk_all (TYPE_BINFO (type), dfs_debug_mark, NULL, 0);"}]}