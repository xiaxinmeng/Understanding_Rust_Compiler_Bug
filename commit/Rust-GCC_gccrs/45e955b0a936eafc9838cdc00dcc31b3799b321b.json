{"sha": "45e955b0a936eafc9838cdc00dcc31b3799b321b", "node_id": "C_kwDOANBUbNoAKDQ1ZTk1NWIwYTkzNmVhZmM5ODM4Y2RjMDBkY2MzMWIzNzk5YjMyMWI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-25T10:22:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-25T10:22:15Z"}, "message": "fortran: Fix up initializers of param(0) PARAMETERs [PR103691]\n\nOn the gfortran.dg/pr103691.f90 testcase the Fortran ICE emits\n  static real(kind=4) a[0] = {[0 ... -1]=2.0e+0};\nThat is an invalid RANGE_EXPR where the maximum is smaller than the minimum.\n\nThe following patch fixes that.  If TYPE_MAX_VALUE is smaller than\nTYPE_MIN_VALUE, the array is empty and so doesn't need any initializer,\nif the two are equal, we don't need to bother with a RANGE_EXPR and\ncan just use that INTEGER_CST as the index and finally for the 2+ values\nin the range it uses a RANGE_EXPR as before.\n\n2022-03-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR fortran/103691\n\t* trans-array.cc (gfc_conv_array_initializer): If TYPE_MAX_VALUE is\n\tsmaller than TYPE_MIN_VALUE (i.e. empty array), ignore the\n\tinitializer; if TYPE_MIN_VALUE is equal to TYPE_MAX_VALUE, use just\n\tthe TYPE_MIN_VALUE as index instead of RANGE_EXPR.", "tree": {"sha": "fc0a9e127b89cfe032af4371d8d2405e75f9feb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc0a9e127b89cfe032af4371d8d2405e75f9feb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45e955b0a936eafc9838cdc00dcc31b3799b321b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e955b0a936eafc9838cdc00dcc31b3799b321b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e955b0a936eafc9838cdc00dcc31b3799b321b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e955b0a936eafc9838cdc00dcc31b3799b321b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748f36a48b506f52e10bcdeb750a7fe9c30c26f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748f36a48b506f52e10bcdeb750a7fe9c30c26f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748f36a48b506f52e10bcdeb750a7fe9c30c26f3"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "b3f8871ff22fff50c14b5cae7c49418f485c100a", "filename": "gcc/fortran/trans-array.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e955b0a936eafc9838cdc00dcc31b3799b321b/gcc%2Ffortran%2Ftrans-array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e955b0a936eafc9838cdc00dcc31b3799b321b/gcc%2Ffortran%2Ftrans-array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.cc?ref=45e955b0a936eafc9838cdc00dcc31b3799b321b", "patch": "@@ -6267,10 +6267,17 @@ gfc_conv_array_initializer (tree type, gfc_expr * expr)\n       else\n \tgfc_conv_structure (&se, expr, 1);\n \n-      CONSTRUCTOR_APPEND_ELT (v, build2 (RANGE_EXPR, gfc_array_index_type,\n-\t\t\t\t\t TYPE_MIN_VALUE (TYPE_DOMAIN (type)),\n-\t\t\t\t\t TYPE_MAX_VALUE (TYPE_DOMAIN (type))),\n-\t\t\t      se.expr);\n+      if (tree_int_cst_lt (TYPE_MAX_VALUE (TYPE_DOMAIN (type)),\n+\t\t\t   TYPE_MIN_VALUE (TYPE_DOMAIN (type))))\n+\tbreak;\n+      else if (tree_int_cst_equal (TYPE_MIN_VALUE (TYPE_DOMAIN (type)),\n+\t\t\t\t   TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n+\trange = TYPE_MIN_VALUE (TYPE_DOMAIN (type));\n+      else\n+\trange = build2 (RANGE_EXPR, gfc_array_index_type,\n+\t\t\tTYPE_MIN_VALUE (TYPE_DOMAIN (type)),\n+\t\t\tTYPE_MAX_VALUE (TYPE_DOMAIN (type)));\n+      CONSTRUCTOR_APPEND_ELT (v, range, se.expr);\n       break;\n \n     case EXPR_ARRAY:"}]}