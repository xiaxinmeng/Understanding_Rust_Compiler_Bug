{"sha": "1b857e339dd144e3405a9a5a6f3275a2e56b2f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4NTdlMzM5ZGQxNDRlMzQwNWE5YTVhNmYzMjc1YTJlNTZiMmY1NA==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-26T08:53:19Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T10:42:27Z"}, "message": "Cleanup AST-to-HIR lowering\n\nWith AST and HIR using the same operator enum, we no longer need to\nperform conversions. Except for CompoundAssignmentExpr, which gets\ncompiled away and therefore still needs conversion.", "tree": {"sha": "775d0739bf14633fa9fad182bf3c6ef3da609353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/775d0739bf14633fa9fad182bf3c6ef3da609353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b857e339dd144e3405a9a5a6f3275a2e56b2f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b857e339dd144e3405a9a5a6f3275a2e56b2f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b857e339dd144e3405a9a5a6f3275a2e56b2f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b857e339dd144e3405a9a5a6f3275a2e56b2f54/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5625e07187567025cdc5aeac576dd9fca7579af1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5625e07187567025cdc5aeac576dd9fca7579af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5625e07187567025cdc5aeac576dd9fca7579af1"}], "stats": {"total": 136, "additions": 28, "deletions": 108}, "files": [{"sha": "6247be093025dcc535d34f0478894ed4a7cbd873", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 28, "deletions": 108, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b857e339dd144e3405a9a5a6f3275a2e56b2f54/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b857e339dd144e3405a9a5a6f3275a2e56b2f54/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=1b857e339dd144e3405a9a5a6f3275a2e56b2f54", "patch": "@@ -388,42 +388,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::ArithmeticOrLogicalExpr &expr)\n   {\n-    HIR::ArithmeticOrLogicalExpr::ExprType kind\n-      = HIR::ArithmeticOrLogicalExpr::ExprType::ADD;\n-    switch (expr.get_expr_type ())\n-      {\n-      case AST::ArithmeticOrLogicalExpr::ExprType::ADD:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::ADD;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::SUBTRACT:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::SUBTRACT;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::MULTIPLY:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::MULTIPLY;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::DIVIDE:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::DIVIDE;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::MODULUS:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::MODULUS;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::BITWISE_AND:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_AND;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::BITWISE_OR:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_OR;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::BITWISE_XOR:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_XOR;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::LEFT_SHIFT:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::LEFT_SHIFT;\n-\tbreak;\n-      case AST::ArithmeticOrLogicalExpr::ExprType::RIGHT_SHIFT:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::RIGHT_SHIFT;\n-\tbreak;\n-      }\n-\n     HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n     rust_assert (lhs != nullptr);\n     HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n@@ -438,34 +402,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::ArithmeticOrLogicalExpr (mapping,\n \t\t\t\t\t  std::unique_ptr<HIR::Expr> (lhs),\n \t\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t\t  kind, expr.get_locus ());\n+\t\t\t\t\t  expr.get_expr_type(), expr.get_locus ());\n   }\n \n   void visit (AST::ComparisonExpr &expr)\n   {\n-    HIR::ComparisonExpr::ExprType kind;\n-    switch (expr.get_kind ())\n-      {\n-      case AST::ComparisonExpr::ExprType::EQUAL:\n-\tkind = HIR::ComparisonExpr::ExprType::EQUAL;\n-\tbreak;\n-      case AST::ComparisonExpr::ExprType::NOT_EQUAL:\n-\tkind = HIR::ComparisonExpr::ExprType::NOT_EQUAL;\n-\tbreak;\n-      case AST::ComparisonExpr::ExprType::GREATER_THAN:\n-\tkind = HIR::ComparisonExpr::ExprType::GREATER_THAN;\n-\tbreak;\n-      case AST::ComparisonExpr::ExprType::LESS_THAN:\n-\tkind = HIR::ComparisonExpr::ExprType::LESS_THAN;\n-\tbreak;\n-      case AST::ComparisonExpr::ExprType::GREATER_OR_EQUAL:\n-\tkind = HIR::ComparisonExpr::ExprType::GREATER_OR_EQUAL;\n-\tbreak;\n-      case AST::ComparisonExpr::ExprType::LESS_OR_EQUAL:\n-\tkind = HIR::ComparisonExpr::ExprType::LESS_OR_EQUAL;\n-\tbreak;\n-      }\n-\n     HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n     rust_assert (lhs != nullptr);\n     HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n@@ -478,23 +419,12 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated\n       = new HIR::ComparisonExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (rhs), kind,\n+\t\t\t\t std::unique_ptr<HIR::Expr> (rhs), expr.get_expr_type(),\n \t\t\t\t expr.get_locus ());\n   }\n \n   void visit (AST::LazyBooleanExpr &expr)\n   {\n-    HIR::LazyBooleanExpr::ExprType kind;\n-    switch (expr.get_kind ())\n-      {\n-      case AST::LazyBooleanExpr::ExprType::LOGICAL_AND:\n-\tkind = HIR::LazyBooleanExpr::ExprType::LOGICAL_AND;\n-\tbreak;\n-      case AST::LazyBooleanExpr::ExprType::LOGICAL_OR:\n-\tkind = HIR::LazyBooleanExpr::ExprType::LOGICAL_OR;\n-\tbreak;\n-      }\n-\n     HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n     rust_assert (lhs != nullptr);\n     HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n@@ -507,25 +437,14 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated\n       = new HIR::LazyBooleanExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs), kind,\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs), expr.get_expr_type(),\n \t\t\t\t  expr.get_locus ());\n   }\n \n   void visit (AST::NegationExpr &expr)\n   {\n     std::vector<HIR::Attribute> outer_attribs;\n \n-    HIR::NegationExpr::NegationType type;\n-    switch (expr.get_negation_type ())\n-      {\n-      case AST::NegationExpr::NegationType::NEGATE:\n-\ttype = HIR::NegationExpr::NegationType::NEGATE;\n-\tbreak;\n-      case AST::NegationExpr::NegationType::NOT:\n-\ttype = HIR::NegationExpr::NegationType::NOT;\n-\tbreak;\n-      }\n-\n     HIR::Expr *negated_value\n       = ASTLoweringExpr::translate (expr.get_negated_expr ().get ());\n \n@@ -535,45 +454,46 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n     translated\n       = new HIR::NegationExpr (mapping,\n-\t\t\t       std::unique_ptr<HIR::Expr> (negated_value), type,\n+\t\t\t       std::unique_ptr<HIR::Expr> (negated_value), expr.get_expr_type(),\n \t\t\t       std::move (outer_attribs), expr.get_locus ());\n   }\n \n+  /* Compound assignment expression is compiled away. */\n   void visit (AST::CompoundAssignmentExpr &expr)\n   {\n-    HIR::ArithmeticOrLogicalExpr::ExprType kind\n-      = HIR::ArithmeticOrLogicalExpr::ExprType::ADD;\n+      /* First we need to find the corresponding arithmetic or logical operator. */\n+    ArithmeticOrLogicalOperator op;\n     switch (expr.get_expr_type ())\n       {\n-      case AST::CompoundAssignmentExpr::ExprType::ADD:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::ADD;\n+      case CompoundAssignmentOperator::ADD:\n+\top = ArithmeticOrLogicalOperator::ADD;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::SUBTRACT:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::SUBTRACT;\n+      case CompoundAssignmentOperator::SUBTRACT:\n+\top = ArithmeticOrLogicalOperator::SUBTRACT;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::MULTIPLY:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::MULTIPLY;\n+      case CompoundAssignmentOperator::MULTIPLY:\n+\top = ArithmeticOrLogicalOperator::MULTIPLY;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::DIVIDE:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::DIVIDE;\n+      case CompoundAssignmentOperator::DIVIDE:\n+\top = ArithmeticOrLogicalOperator::DIVIDE;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::MODULUS:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::MODULUS;\n+      case CompoundAssignmentOperator::MODULUS:\n+\top = ArithmeticOrLogicalOperator::MODULUS;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::BITWISE_AND:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_AND;\n+      case CompoundAssignmentOperator::BITWISE_AND:\n+\top = ArithmeticOrLogicalOperator::BITWISE_AND;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::BITWISE_OR:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_OR;\n+      case CompoundAssignmentOperator::BITWISE_OR:\n+\top = ArithmeticOrLogicalOperator::BITWISE_OR;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::BITWISE_XOR:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_XOR;\n+      case CompoundAssignmentOperator::BITWISE_XOR:\n+\top = ArithmeticOrLogicalOperator::BITWISE_XOR;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::LEFT_SHIFT:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::LEFT_SHIFT;\n+      case CompoundAssignmentOperator::LEFT_SHIFT:\n+\top = ArithmeticOrLogicalOperator::LEFT_SHIFT;\n \tbreak;\n-      case AST::CompoundAssignmentExpr::ExprType::RIGHT_SHIFT:\n-\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::RIGHT_SHIFT;\n+      case CompoundAssignmentOperator::RIGHT_SHIFT:\n+\top = ArithmeticOrLogicalOperator::RIGHT_SHIFT;\n \tbreak;\n       }\n \n@@ -589,7 +509,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n     HIR::Expr *operator_expr\n       = new HIR::ArithmeticOrLogicalExpr (mapping, asignee_expr->clone_expr (),\n \t\t\t\t\t  std::unique_ptr<HIR::Expr> (value),\n-\t\t\t\t\t  kind, expr.get_locus ());\n+\t\t\t\t\t  op, expr.get_locus ());\n     translated\n       = new HIR::AssignmentExpr (mapping,\n \t\t\t\t std::unique_ptr<HIR::Expr> (asignee_expr),"}]}