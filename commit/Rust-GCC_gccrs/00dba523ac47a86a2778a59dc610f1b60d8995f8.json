{"sha": "00dba523ac47a86a2778a59dc610f1b60d8995f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkYmE1MjNhYzQ3YTg2YTI3NzhhNTlkYzYxMGYxYjYwZDg5OTVmOA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-01-09T19:38:25Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-01-09T19:38:25Z"}, "message": "oops - omitted from previous delta\n\nFrom-SVN: r38838", "tree": {"sha": "78de2ff5038e4fdc8060140a15c07600411d854f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78de2ff5038e4fdc8060140a15c07600411d854f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00dba523ac47a86a2778a59dc610f1b60d8995f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dba523ac47a86a2778a59dc610f1b60d8995f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00dba523ac47a86a2778a59dc610f1b60d8995f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dba523ac47a86a2778a59dc610f1b60d8995f8/comments", "author": null, "committer": null, "parents": [{"sha": "6e2d9a7aab54522a9ad1e146339a266f1f41f91e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2d9a7aab54522a9ad1e146339a266f1f41f91e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2d9a7aab54522a9ad1e146339a266f1f41f91e"}], "stats": {"total": 59, "additions": 24, "deletions": 35}, "files": [{"sha": "ecd849835079f6eaa7114ee7fb8ebb20424adae5", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=00dba523ac47a86a2778a59dc610f1b60d8995f8", "patch": "@@ -147,8 +147,6 @@ extern struct rtx_def *rs6000_float_const PARAMS ((const char *,\n extern int direct_return PARAMS ((void));\n extern int get_issue_rate PARAMS ((void));\n extern union tree_node *rs6000_build_va_list PARAMS ((void));\n-extern void rs6000_save_machine_status PARAMS ((struct function *));\n-extern void rs6000_restore_machine_status PARAMS ((struct function *));\n extern void rs6000_init_expanders PARAMS ((void));\n extern int first_reg_to_save PARAMS ((void));\n extern int first_fp_reg_to_save PARAMS ((void));"}, {"sha": "bb4879382aa4b2caf56b4570b1d14900b12ba1d6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=00dba523ac47a86a2778a59dc610f1b60d8995f8", "patch": "@@ -89,9 +89,6 @@ const char *rs6000_sdata_name = (char *)0;\n int fixuplabelno = 0;\n #endif\n \n-/* Whether a System V.4 varargs area was created.  */\n-int rs6000_sysv_varargs_p;\n-\n /* ABI enumeration available for subtarget to use.  */\n enum rs6000_abi rs6000_current_abi;\n \n@@ -2221,7 +2218,7 @@ setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n       /* Indicate to allocate space on the stack for varargs save area.  */\n       /* ??? Does this really have to be located at a magic spot on the\n \t stack, or can we allocate this with assign_stack_local instead.  */\n-      rs6000_sysv_varargs_p = 1;\n+      cfun->machine->sysv_varargs_p = 1;\n       if (! no_rtl)\n \tsave_area = plus_constant (virtual_stack_vars_rtx,\n \t\t\t\t   - RS6000_VARARGS_SIZE);\n@@ -2231,7 +2228,7 @@ setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n   else\n     {\n       save_area = virtual_incoming_args_rtx;\n-      rs6000_sysv_varargs_p = 0;\n+      cfun->machine->sysv_varargs_p = 0;\n \n       first_reg_offset = cum->words;\n       if (MUST_PASS_IN_STACK (mode, type))\n@@ -3620,50 +3617,39 @@ rs6000_got_register (value)\n   return pic_offset_table_rtx;\n }\n \f\n-/* Define the structure for the machine field in struct function.  */\n-struct machine_function\n-{\n-  int sysv_varargs_p;\n-};\n-\n /* Functions to save and restore sysv_varargs_p.\n    These will be called, via pointer variables,\n    from push_function_context and pop_function_context.  */\n \n-void\n-rs6000_save_machine_status (p)\n+static void\n+rs6000_init_machine_status (p)\n      struct function *p;\n {\n-  struct machine_function *machine =\n-    (struct machine_function *) xmalloc (sizeof (struct machine_function));\n+  p->machine = (machine_function *) xmalloc (sizeof (machine_function));\n \n-  p->machine = machine;\n-  machine->sysv_varargs_p = rs6000_sysv_varargs_p;\n+  p->machine->sysv_varargs_p = 0;\n }\n \n-void\n-rs6000_restore_machine_status (p)\n+static void\n+rs6000_free_machine_status (p)\n      struct function *p;\n {\n-  struct machine_function *machine = p->machine;\n-\n-  rs6000_sysv_varargs_p = machine->sysv_varargs_p;\n+  if (p->machine == NULL)\n+    return;\n \n-  free (machine);\n-  p->machine = (struct machine_function *)0;\n+  free (p->machine);\n+  p->machine = NULL;\n }\n \n+\n /* Do anything needed before RTL is emitted for each function.  */\n \n void\n rs6000_init_expanders ()\n {\n-  /* Reset varargs */\n-  rs6000_sysv_varargs_p = 0;\n-\n   /* Arrange to save and restore machine status around nested functions.  */\n-  save_machine_status = rs6000_save_machine_status;\n-  restore_machine_status = rs6000_restore_machine_status;\n+  init_machine_status = rs6000_init_machine_status;\n+  free_machine_status = rs6000_free_machine_status;\n }\n \n \f"}, {"sha": "27079b3944c5bbd8c4499c8658f913b331de4f84", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=00dba523ac47a86a2778a59dc610f1b60d8995f8", "patch": "@@ -1226,9 +1226,6 @@ typedef struct rs6000_stack {\n /* Size of the V.4 varargs area if needed */\n #define RS6000_VARARGS_AREA 0\n \n-/* Whether a V.4 varargs area is needed */\n-extern int rs6000_sysv_varargs_p;\n-\n /* Align an address */\n #define RS6000_ALIGN(n,a) (((n) + (a) - 1) & ~((a) - 1))\n \n@@ -1385,6 +1382,14 @@ extern int rs6000_sysv_varargs_p;\n    || ((unsigned)((N) - FP_ARG_MIN_REG) < (unsigned)(FP_ARG_NUM_REG)))\n \n \f\n+/* A C structure for machine-specific, per-function data.\n+   This is added to the cfun structure.  */\n+typedef struct machine_function\n+{\n+  /* Whether a System V.4 varargs area was created.  */\n+  int sysv_varargs_p;\n+} machine_function;\n+\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n    hold all necessary information about the function itself"}, {"sha": "3172d99be398101f09a322cb41e9c48a94a5d09d", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dba523ac47a86a2778a59dc610f1b60d8995f8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=00dba523ac47a86a2778a59dc610f1b60d8995f8", "patch": "@@ -312,7 +312,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Size of the V.4 varargs area if needed.  */\n /* Override rs6000.h definition.  */\n #undef\tRS6000_VARARGS_AREA\n-#define RS6000_VARARGS_AREA ((rs6000_sysv_varargs_p) ? RS6000_VARARGS_SIZE : 0)\n+#define RS6000_VARARGS_AREA ((cfun->machine->sysv_varargs_p) ? RS6000_VARARGS_SIZE : 0)\n \n /* Override default big endianism definitions in rs6000.h.  */\n #undef\tBYTES_BIG_ENDIAN"}]}