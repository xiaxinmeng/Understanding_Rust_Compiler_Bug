{"sha": "5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzM2I5NzIyNTg4ZGNjYWY1YjVlOTljMGY3NTQwYWI3NDgzZmEyZg==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2010-11-13T09:28:52Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2010-11-13T09:28:52Z"}, "message": "re PR rtl-optimization/46204 (g++.dg/torture/stackalign/throw-1.C fails to compile on IA64)\n\n\tPR rtl-optimization/46204\n\t* sel-sched-ir.c (maybe_tidy_empty_bb): Remove second argument.\n\tUpdate all callers.  Do not recompute topological order.  Adjust\n\tfallthrough edges following a degenerate conditional jump.\n\nFrom-SVN: r166697", "tree": {"sha": "eff688b19c738648337e31f1b958f33fd5f90d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eff688b19c738648337e31f1b958f33fd5f90d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "759fe2404dd075257782f397bf84399e37925e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759fe2404dd075257782f397bf84399e37925e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759fe2404dd075257782f397bf84399e37925e4b"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "928099604e87f61d548d2480d89fadbf5d1c786d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "patch": "@@ -1,3 +1,10 @@\n+2010-11-12  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/46204\n+\t* sel-sched-ir.c (maybe_tidy_empty_bb): Remove second argument.\n+\tUpdate all callers.  Do not recompute topological order.  Adjust\n+\tfallthrough edges following a degenerate conditional jump.\n+\n 2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* opts-common.c (control_warning_option): New."}, {"sha": "e169276974bb1c314501db93801834046521384f", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f33b9722588dccaf5b5e99c0f7540ab7483fa2f/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=5f33b9722588dccaf5b5e99c0f7540ab7483fa2f", "patch": "@@ -3562,7 +3562,7 @@ sel_recompute_toporder (void)\n \n /* Tidy the possibly empty block BB.  */\n static bool\n-maybe_tidy_empty_bb (basic_block bb, bool recompute_toporder_p)\n+maybe_tidy_empty_bb (basic_block bb)\n {\n   basic_block succ_bb, pred_bb;\n   edge e;\n@@ -3612,10 +3612,29 @@ maybe_tidy_empty_bb (basic_block bb, bool recompute_toporder_p)\n \n           if (!(e->flags & EDGE_FALLTHRU))\n             {\n-              recompute_toporder_p |= sel_redirect_edge_and_branch (e, succ_bb);\n+\t      /* We can not invalidate computed topological order by moving\n+\t         the edge destination block (E->SUCC) along a fallthru edge.  */\n+              sel_redirect_edge_and_branch (e, succ_bb);\n               rescan_p = true;\n               break;\n             }\n+\t  /* If the edge is fallthru, but PRED_BB ends in a conditional jump\n+\t     to BB (so there is no non-fallthru edge from PRED_BB to BB), we\n+\t     still have to adjust it.  */\n+\t  else if (single_succ_p (pred_bb) && any_condjump_p (BB_END (pred_bb)))\n+\t    {\n+\t      /* If possible, try to remove the unneeded conditional jump.  */\n+\t      if (INSN_SCHED_TIMES (BB_END (pred_bb)) == 0\n+\t\t  && !IN_CURRENT_FENCE_P (BB_END (pred_bb)))\n+\t\t{\n+\t\t  if (!sel_remove_insn (BB_END (pred_bb), false, false))\n+\t\t    tidy_fallthru_edge (e);\n+\t\t}\n+\t      else\n+\t\tsel_redirect_edge_and_branch (e, succ_bb);\n+\t      rescan_p = true;\n+\t      break;\n+\t    }\n         }\n     }\n \n@@ -3631,9 +3650,6 @@ maybe_tidy_empty_bb (basic_block bb, bool recompute_toporder_p)\n       remove_empty_bb (bb, true);\n     }\n \n-  if (recompute_toporder_p)\n-    sel_recompute_toporder ();\n-\n #ifdef ENABLE_CHECKING\n   verify_backedges ();\n #endif\n@@ -3651,7 +3667,7 @@ tidy_control_flow (basic_block xbb, bool full_tidying)\n   insn_t first, last;\n \n   /* First check whether XBB is empty.  */\n-  changed = maybe_tidy_empty_bb (xbb, false);\n+  changed = maybe_tidy_empty_bb (xbb);\n   if (changed || !full_tidying)\n     return changed;\n \n@@ -3715,8 +3731,8 @@ tidy_control_flow (basic_block xbb, bool full_tidying)\n          that contained that jump, becomes empty too.  In such case\n          remove it too.  */\n       if (sel_bb_empty_p (xbb->prev_bb))\n-        changed = maybe_tidy_empty_bb (xbb->prev_bb, recompute_toporder_p);\n-      else if (recompute_toporder_p)\n+        changed = maybe_tidy_empty_bb (xbb->prev_bb);\n+      if (recompute_toporder_p)\n \tsel_recompute_toporder ();\n     }\n   return changed;\n@@ -3733,7 +3749,7 @@ purge_empty_blocks (void)\n     {\n       basic_block b = BASIC_BLOCK (BB_TO_BLOCK (i));\n \n-      if (maybe_tidy_empty_bb (b, false))\n+      if (maybe_tidy_empty_bb (b))\n \tcontinue;\n \n       i++;"}]}