{"sha": "bd91c5696e72038cab4ff6e8fc7be1f30200cd2a", "node_id": "C_kwDOANBUbNoAKGJkOTFjNTY5NmU3MjAzOGNhYjRmZjZlOGZjN2JlMWYzMDIwMGNkMmE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-05T10:59:16Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-05T11:56:07Z"}, "message": "ast: Format AST code properly.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.h (class AttrInputMetaItemContainer): Run clang-format.\n\t(class DelimTokenTree): Likewise.", "tree": {"sha": "751f600e6f451bd05e277432fad5b1ef1dd60368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751f600e6f451bd05e277432fad5b1ef1dd60368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd91c5696e72038cab4ff6e8fc7be1f30200cd2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd91c5696e72038cab4ff6e8fc7be1f30200cd2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd91c5696e72038cab4ff6e8fc7be1f30200cd2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd91c5696e72038cab4ff6e8fc7be1f30200cd2a/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1e7f2cb0ce7460a2ab5f836260749dfc983d2f"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "23a84e8bc6ccace682c07046c7412214f50ae98e", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd91c5696e72038cab4ff6e8fc7be1f30200cd2a/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd91c5696e72038cab4ff6e8fc7be1f30200cd2a/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=bd91c5696e72038cab4ff6e8fc7be1f30200cd2a", "patch": "@@ -95,7 +95,7 @@ class TokenTree : public Visitable\n \n   /* Converts token tree to a flat token stream. Tokens must be pointer to avoid\n    * mutual dependency with Token. */\n-  virtual std::vector<std::unique_ptr<Token> > to_token_stream () const = 0;\n+  virtual std::vector<std::unique_ptr<Token>> to_token_stream () const = 0;\n \n protected:\n   // pure virtual clone implementation\n@@ -229,7 +229,7 @@ class Token : public TokenTree, public MacroMatch\n   void accept_vis (ASTVisitor &vis) override;\n \n   // Return copy of itself but in token stream form.\n-  std::vector<std::unique_ptr<Token> > to_token_stream () const override;\n+  std::vector<std::unique_ptr<Token>> to_token_stream () const override;\n \n   TokenId get_id () const { return tok_ref->get_id (); }\n   const std::string &get_str () const { return tok_ref->get_str (); }\n@@ -671,11 +671,10 @@ class MetaItemInner : public Visitable\n // Container used to store MetaItems as AttrInput (bridge-ish kinda thing)\n class AttrInputMetaItemContainer : public AttrInput\n {\n-  std::vector<std::unique_ptr<MetaItemInner> > items;\n+  std::vector<std::unique_ptr<MetaItemInner>> items;\n \n public:\n-  AttrInputMetaItemContainer (\n-    std::vector<std::unique_ptr<MetaItemInner> > items)\n+  AttrInputMetaItemContainer (std::vector<std::unique_ptr<MetaItemInner>> items)\n     : items (std::move (items))\n   {}\n \n@@ -729,8 +728,8 @@ class AttrInputMetaItemContainer : public AttrInput\n   bool is_meta_item () const override { return true; }\n \n   // TODO: this mutable getter seems dodgy\n-  std::vector<std::unique_ptr<MetaItemInner> > &get_items () { return items; }\n-  const std::vector<std::unique_ptr<MetaItemInner> > &get_items () const\n+  std::vector<std::unique_ptr<MetaItemInner>> &get_items () { return items; }\n+  const std::vector<std::unique_ptr<MetaItemInner>> &get_items () const\n   {\n     return items;\n   }\n@@ -752,7 +751,7 @@ class AttrInputMetaItemContainer : public AttrInput\n class DelimTokenTree : public TokenTree, public AttrInput\n {\n   DelimType delim_type;\n-  std::vector<std::unique_ptr<TokenTree> > token_trees;\n+  std::vector<std::unique_ptr<TokenTree>> token_trees;\n   Location locus;\n \n protected:\n@@ -777,8 +776,8 @@ class DelimTokenTree : public TokenTree, public AttrInput\n \n public:\n   DelimTokenTree (DelimType delim_type,\n-\t\t  std::vector<std::unique_ptr<TokenTree> > token_trees\n-\t\t  = std::vector<std::unique_ptr<TokenTree> > (),\n+\t\t  std::vector<std::unique_ptr<TokenTree>> token_trees\n+\t\t  = std::vector<std::unique_ptr<TokenTree>> (),\n \t\t  Location locus = Location ())\n     : delim_type (delim_type), token_trees (std::move (token_trees)),\n       locus (locus)\n@@ -827,7 +826,7 @@ class DelimTokenTree : public TokenTree, public AttrInput\n \n   AttrInputMetaItemContainer *parse_to_meta_item () const override;\n \n-  std::vector<std::unique_ptr<Token> > to_token_stream () const override;\n+  std::vector<std::unique_ptr<Token>> to_token_stream () const override;\n \n   std::unique_ptr<DelimTokenTree> clone_delim_token_tree () const\n   {\n@@ -841,7 +840,7 @@ class DelimTokenTree : public TokenTree, public AttrInput\n     return AttrInput::AttrInputType::TOKEN_TREE;\n   }\n \n-  std::vector<std::unique_ptr<TokenTree> > &get_token_trees ()\n+  std::vector<std::unique_ptr<TokenTree>> &get_token_trees ()\n   {\n     return token_trees;\n   }\n@@ -1479,7 +1478,7 @@ struct MacroInvocData\n   DelimTokenTree token_tree;\n \n   // One way of parsing the macro. Probably not applicable for all macros.\n-  std::vector<std::unique_ptr<MetaItemInner> > parsed_items;\n+  std::vector<std::unique_ptr<MetaItemInner>> parsed_items;\n   bool parsed_to_meta_item = false;\n   MacroExpander *expander = nullptr;\n \n@@ -1546,16 +1545,16 @@ struct MacroInvocData\n   }\n \n   void\n-  set_meta_item_output (std::vector<std::unique_ptr<MetaItemInner> > new_items)\n+  set_meta_item_output (std::vector<std::unique_ptr<MetaItemInner>> new_items)\n   {\n     parsed_items = std::move (new_items);\n   }\n   // TODO: mutable getter seems kinda dodgy\n-  std::vector<std::unique_ptr<MetaItemInner> > &get_meta_items ()\n+  std::vector<std::unique_ptr<MetaItemInner>> &get_meta_items ()\n   {\n     return parsed_items;\n   }\n-  const std::vector<std::unique_ptr<MetaItemInner> > &get_meta_items () const\n+  const std::vector<std::unique_ptr<MetaItemInner>> &get_meta_items () const\n   {\n     return parsed_items;\n   }\n@@ -1875,13 +1874,13 @@ struct Crate\n   // dodgy spacing required here\n   /* TODO: is it better to have a vector of items here or a module (implicit\n    * top-level one)? */\n-  std::vector<std::unique_ptr<Item> > items;\n+  std::vector<std::unique_ptr<Item>> items;\n \n   NodeId node_id;\n \n public:\n   // Constructor\n-  Crate (std::vector<std::unique_ptr<Item> > items,\n+  Crate (std::vector<std::unique_ptr<Item>> items,\n \t std::vector<Attribute> inner_attrs)\n     : inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())"}]}