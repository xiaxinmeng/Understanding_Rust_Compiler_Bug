{"sha": "87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2NzdhYzdmYmUxMmNkMTgwZTRhM2MwYWI0YzIwOWUwOGRmOThlOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-09-25T07:11:05Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-09-25T07:11:05Z"}, "message": "Remove Pascal-related entries in code and comments.\n\n2018-09-25  Martin Liska  <mliska@suse.cz>\n\n\t* config/powerpcspe/powerpcspe.c (rs6000_output_function_epilogue):\n\tDo not handle \"GNU Pascal\".\n\t* config/rs6000/rs6000.c (rs6000_output_function_epilogue):\n\tLikewise.\n\t* config/sparc/sparc.c (sparc_pass_by_reference): Remove Pascal\n\tfrom documentation. Likewise.\n\t* dbxout.c (dbxout_range_type): Likewise.\n\t* doc/cpp.texi: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/frontends.texi: Likewise.\n\t* doc/invoke.texi: Remove Pascal entry.\n\t* tree.def (CLEANUP_POINT_EXPR): Likewise.\n\t* doc/rtl.texi (MODE_FUNCTION): Remove not used entry.\n2018-09-25  Martin Liska  <mliska@suse.cz>\n\n\t* c-common.c (c_common_truthvalue_conversion):\n\tRemove Pascal from documentation.\n\nFrom-SVN: r264559", "tree": {"sha": "e40f3d9ebb93109e7c06cd10f7182fd7322768b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e40f3d9ebb93109e7c06cd10f7182fd7322768b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cac9d00e93a40c7b19f0060b8b4f8f5b3e4d676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cac9d00e93a40c7b19f0060b8b4f8f5b3e4d676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cac9d00e93a40c7b19f0060b8b4f8f5b3e4d676"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "d9dde59c678c257f7ee547b92d76e60af34212d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -1,3 +1,19 @@\n+2018-09-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/powerpcspe/powerpcspe.c (rs6000_output_function_epilogue):\n+\tDo not handle \"GNU Pascal\".\n+\t* config/rs6000/rs6000.c (rs6000_output_function_epilogue):\n+\tLikewise.\n+\t* config/sparc/sparc.c (sparc_pass_by_reference): Remove Pascal\n+\tfrom documentation. Likewise.\n+\t* dbxout.c (dbxout_range_type): Likewise.\n+\t* doc/cpp.texi: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/frontends.texi: Likewise.\n+\t* doc/invoke.texi: Remove Pascal entry.\n+\t* tree.def (CLEANUP_POINT_EXPR): Likewise.\n+\t* doc/rtl.texi (MODE_FUNCTION): Remove not used entry.\n+\n 2018-09-25  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/86078"}, {"sha": "3b3b98724755015c381cbf54b828369adce0d9d6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -1,3 +1,8 @@\n+2018-09-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-common.c (c_common_truthvalue_conversion):\n+\tRemove Pascal from documentation.\n+\n 2018-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c: Include diagnostic.h."}, {"sha": "10a8bc29bfac05917a46061d695fa648756c15fc", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -3289,7 +3289,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n  \ttree inner = TREE_OPERAND (expr, 0);\n \tif (decl_with_nonnull_addr_p (inner))\n \t  {\n-\t    /* Common Ada/Pascal programmer's mistake.  */\n+\t    /* Common Ada programmer's mistake.  */\n \t    warning_at (location,\n \t\t\tOPT_Waddress,\n \t\t\t\"the address of %qD will always evaluate as %<true%>\","}, {"sha": "325b6ad52230f3e19c1a08ec7e8340557572f71b", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -32024,7 +32024,7 @@ rs6000_output_function_epilogue (FILE *file)\n       /* Language type.  Unfortunately, there does not seem to be any\n \t official way to discover the language being compiled, so we\n \t use language_string.\n-\t C is 0.  Fortran is 1.  Pascal is 2.  Ada is 3.  C++ is 9.\n+\t C is 0.  Fortran is 1.  Ada is 3.  C++ is 9.\n \t Java is 13.  Objective-C is 14.  Objective-C++ isn't assigned\n \t a number, so for now use 9.  LTO, Go and JIT aren't assigned numbers\n \t either, so for now use 0.  */\n@@ -32036,8 +32036,6 @@ rs6000_output_function_epilogue (FILE *file)\n       else if (! strcmp (language_string, \"GNU F77\")\n \t       || lang_GNU_Fortran ())\n \ti = 1;\n-      else if (! strcmp (language_string, \"GNU Pascal\"))\n-\ti = 2;\n       else if (! strcmp (language_string, \"GNU Ada\"))\n \ti = 3;\n       else if (lang_GNU_CXX ()"}, {"sha": "5c7ab2b24e26e7c15ef2e7c3d92a4437b245f108", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -28408,7 +28408,7 @@ rs6000_output_function_epilogue (FILE *file)\n       /* Language type.  Unfortunately, there does not seem to be any\n \t official way to discover the language being compiled, so we\n \t use language_string.\n-\t C is 0.  Fortran is 1.  Pascal is 2.  Ada is 3.  C++ is 9.\n+\t C is 0.  Fortran is 1.  Ada is 3.  C++ is 9.\n \t Java is 13.  Objective-C is 14.  Objective-C++ isn't assigned\n \t a number, so for now use 9.  LTO, Go and JIT aren't assigned numbers\n \t either, so for now use 0.  */\n@@ -28420,8 +28420,6 @@ rs6000_output_function_epilogue (FILE *file)\n       else if (! strcmp (language_string, \"GNU F77\")\n \t       || lang_GNU_Fortran ())\n \ti = 1;\n-      else if (! strcmp (language_string, \"GNU Pascal\"))\n-\ti = 2;\n       else if (! strcmp (language_string, \"GNU Ada\"))\n \ti = 3;\n       else if (lang_GNU_CXX ()"}, {"sha": "42acabb5d78e6c9161c4535076ba9b57ca422867", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -7516,9 +7516,8 @@ sparc_pass_by_reference (cumulative_args_t cum ATTRIBUTE_UNUSED,\n {\n   if (TARGET_ARCH32)\n     /* Original SPARC 32-bit ABI says that structures and unions,\n-       and quad-precision floats are passed by reference.  For Pascal,\n-       also pass arrays by reference.  All other base types are passed\n-       in registers.\n+       and quad-precision floats are passed by reference.\n+       All base types are passed in registers.\n \n        Extended ABI (as implemented by the Sun compiler) says that all\n        complex floats are passed by reference.  Pass complex integers"}, {"sha": "bf41b17a26341ee6890d63193358e2bc14673cae", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -1715,7 +1715,7 @@ dbxout_range_type (tree type, tree low, tree high)\n   if (TREE_TYPE (type))\n     dbxout_type (TREE_TYPE (type), 0);\n   else if (TREE_CODE (type) != INTEGER_TYPE)\n-    dbxout_type (type, 0); /* E.g. Pascal's ARRAY [BOOLEAN] of INTEGER */\n+    dbxout_type (type, 0);\n   else\n     {\n       /* Traditionally, we made sure 'int' was type 1, and builtin types"}, {"sha": "53455741fd9778b8bf8df118f975020d3324c300", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -194,7 +194,7 @@ will be removed, and the Makefile will not work.\n \n Having said that, you can often get away with using cpp on things which\n are not C@.  Other Algol-ish programming languages are often safe\n-(Pascal, Ada, etc.) So is assembly, with caution.  @option{-traditional-cpp}\n+(Ada, etc.) So is assembly, with caution.  @option{-traditional-cpp}\n mode preserves more white space, and is otherwise more permissive.  Many\n of the problems can be avoided by writing C or C++ style comments\n instead of native language comments, and keeping macros simple."}, {"sha": "cfe6a8e5bb85bc304210383023852ce6074dc8fc", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -26,7 +26,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Statement Exprs::     Putting statements and declarations inside expressions.\n * Local Labels::        Labels local to a block.\n * Labels as Values::    Getting pointers to labels, and computed gotos.\n-* Nested Functions::    As in Algol and Pascal, lexical scoping of functions.\n+* Nested Functions::    Nested function in GNU C.\n * Constructing Calls::  Dispatching a call to another function.\n * Typeof::              @code{typeof}: referring to the type of an expression.\n * Conditionals::        Omitting the middle operand of a @samp{?:} expression."}, {"sha": "dbb83eed299211c0988ee1d735d4cf9f2e5db664", "filename": "gcc/doc/frontends.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Ffrontends.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Ffrontends.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffrontends.texi?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -32,11 +32,10 @@ various processors.\n \n @cindex COBOL\n @cindex Mercury\n-@cindex Pascal\n The part of a compiler that is specific to a particular language is\n called the ``front end''.  In addition to the front ends that are\n integrated components of GCC, there are several other front ends that\n-are maintained separately.  These support languages such as Pascal,\n+are maintained separately.  These support languages such as\n Mercury, and COBOL@.  To use these, they must be built together with\n GCC proper.\n "}, {"sha": "7ef4e7a449b84f0a912b1a7223b187cf421f571d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -1450,9 +1450,6 @@ Ada source code file containing a library unit body (a subprogram or\n package body).  Such files are also called @dfn{bodies}.\n \n @c GCC also knows about some suffixes for languages not yet included:\n-@c Pascal:\n-@c @var{file}.p\n-@c @var{file}.pas\n @c Ratfor:\n @c @var{file}.r\n "}, {"sha": "463bdc6aaae6e29fd54c045b3ba08c11dbd5fb4a", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -1393,11 +1393,6 @@ Complex floating point modes.  By default these are @code{QCmode},\n @code{HCmode}, @code{SCmode}, @code{DCmode}, @code{XCmode}, and\n @code{TCmode}.\n \n-@findex MODE_FUNCTION\n-@item MODE_FUNCTION\n-Algol or Pascal function variables including a static chain.\n-(These are not currently implemented).\n-\n @findex MODE_CC\n @item MODE_CC\n Modes representing condition code values.  These are @code{CCmode} plus"}, {"sha": "a6882d9288d0044c7e1ec13379611a8cb48437f0", "filename": "gcc/tree.def", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87677ac7fbe12cd180e4a3c0ab4c209e08df98e8/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=87677ac7fbe12cd180e4a3c0ab4c209e08df98e8", "patch": "@@ -141,11 +141,7 @@ DEFTREECODE (BOOLEAN_TYPE, \"boolean_type\", tcc_type, 0)\n /* Integer types in all languages, including char in C.\n    Also used for sub-ranges of other discrete types.\n    Has components TYPE_MIN_VALUE, TYPE_MAX_VALUE (expressions, inclusive)\n-   and TYPE_PRECISION (number of bits used by this type).\n-   In the case of a subrange type in Pascal, the TREE_TYPE\n-   of this will point at the supertype (another INTEGER_TYPE,\n-   or an ENUMERAL_TYPE or BOOLEAN_TYPE).\n-   Otherwise, the TREE_TYPE is zero.  */\n+   and TYPE_PRECISION (number of bits used by this type).  */\n DEFTREECODE (INTEGER_TYPE, \"integer_type\", tcc_type, 0)\n \n /* C's float and double.  Different floating types are distinguished\n@@ -200,16 +196,15 @@ DEFTREECODE (VECTOR_TYPE, \"vector_type\", tcc_type, 0)\n  and holds the type to coerce a value of that array type to in C.\n  TYPE_STRING_FLAG indicates a string (in contrast to an array of chars)\n  in languages (such as Chill) that make a distinction.  */\n-/* Array types in C or Pascal */\n+/* Array types in C */\n DEFTREECODE (ARRAY_TYPE, \"array_type\", tcc_type, 0)\n \n-/* Struct in C, or record in Pascal.  */\n+/* Struct in C.  */\n /* Special fields:\n    TYPE_FIELDS  chain of FIELD_DECLs for the fields of the struct,\n      VAR_DECLs, TYPE_DECLs and CONST_DECLs for record-scope variables,\n      types and enumerators and FUNCTION_DECLs for methods associated\n-     with the type.\n-   A few may need to be added for Pascal.  */\n+     with the type.  */\n /* See the comment above, before ENUMERAL_TYPE, for how\n    forward references to struct tags are handled in C.  */\n DEFTREECODE (RECORD_TYPE, \"record_type\", tcc_type, 0)\n@@ -460,7 +455,7 @@ DEFTREECODE (IMAGPART_EXPR, \"imagpart_expr\", tcc_reference, 1)\n    generating insns.  */\n DEFTREECODE (VIEW_CONVERT_EXPR, \"view_convert_expr\", tcc_reference, 1)\n \n-/* C unary `*' or Pascal `^'.  One operand, an expression for a pointer.  */\n+/* C unary `*'.  One operand, an expression for a pointer.  */\n DEFTREECODE (INDIRECT_REF, \"indirect_ref\", tcc_reference, 1)\n \n /* Used to represent lookup in a virtual method table which is dependent on\n@@ -632,7 +627,7 @@ DEFTREECODE (CLEANUP_POINT_EXPR, \"cleanup_point_expr\", tcc_expression, 1)\n    object of the same type or even for one and the same object within\n    its scope.\n \n-   Record types with discriminants in Ada or schema types in Pascal are\n+   Record types with discriminants in Ada are\n    examples of such types.  This mechanism is also used to create \"fat\n    pointers\" for unconstrained array types in Ada; the fat pointer is a\n    structure one of whose fields is a pointer to the actual array type"}]}