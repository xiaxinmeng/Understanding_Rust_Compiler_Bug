{"sha": "8299dfae9364468096a8005c4b3a83d4fa0f6e42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5OWRmYWU5MzY0NDY4MDk2YTgwMDVjNGIzYTgzZDRmYTBmNmU0Mg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-11-05T17:05:33Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-11-05T17:05:33Z"}, "message": "PR middle-end/92333 - missing variable name referencing VLA in warnings\n\nPR middle-end/92333 - missing variable name referencing VLA in warnings\nPR middle-end/82608 - missing -Warray-bounds on an out-of-bounds VLA index\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/92333\n\tPR middle-end/82608\n\t* gcc.dg/Warray-bounds-51.c: New test.\n\ngcc/ChangeLog:\n\n\tPR middle-end/92333\n\tPR middle-end/82608\n\t* tree-vrp.c (vrp_prop::check_array_ref): Handle VLAs with constant\n\tsize.\n\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Use a meaninful\n\tname and location for a temporary variable.\n\nFrom-SVN: r277854", "tree": {"sha": "91b38228622227e0e765dfeb1f81e4a365f3ae48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91b38228622227e0e765dfeb1f81e4a365f3ae48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8299dfae9364468096a8005c4b3a83d4fa0f6e42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8299dfae9364468096a8005c4b3a83d4fa0f6e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8299dfae9364468096a8005c4b3a83d4fa0f6e42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8299dfae9364468096a8005c4b3a83d4fa0f6e42/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fd4f9242d9b7d2032126dc4851b4fdf5628dc35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd4f9242d9b7d2032126dc4851b4fdf5628dc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd4f9242d9b7d2032126dc4851b4fdf5628dc35"}], "stats": {"total": 131, "additions": 122, "deletions": 9}, "files": [{"sha": "f3deffc701ff96dddff2c591a0223fb08c3d12fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8299dfae9364468096a8005c4b3a83d4fa0f6e42", "patch": "@@ -1,3 +1,12 @@\n+2019-11-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/92333\n+\tPR middle-end/82608\n+\t* tree-vrp.c (vrp_prop::check_array_ref): Handle VLAs with constant\n+\tsize.\n+\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Use a meaninful\n+\tname and location for a temporary variable.\n+\n 2019-11-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-vrp.c (value_range::value_range): Fix whitespace."}, {"sha": "4932615040b2caa37bac50fb396bf0cd021bfbc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8299dfae9364468096a8005c4b3a83d4fa0f6e42", "patch": "@@ -1,3 +1,9 @@\n+2019-11-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/92333\n+\tPR middle-end/82608\n+\t* gcc.dg/Warray-bounds-51.c: New test.\n+\n 2019-11-05  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/92370"}, {"sha": "6028b11637ca0448392d6862036a5ded8df3a705", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-51.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-51.c?ref=8299dfae9364468096a8005c4b3a83d4fa0f6e42", "patch": "@@ -0,0 +1,61 @@\n+/* PR middle-end/92333 - missing variable name referencing VLA in warnings\n+   PR middle-end/82608 - missing -Warray-bounds on an out-of-bounds VLA index\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void sink (void*);\n+\n+void test_char_vla_location (void)\n+{\n+  unsigned nelts = 7;\n+\n+  char vla[nelts];    // { dg-message \"declared here|while referencing\" }\n+\n+  vla[0] = __LINE__;\n+  vla[nelts] = 0;     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+\n+  sink (vla);\n+}\n+\n+void test_int_vla_location (void)\n+{\n+  unsigned nelts = 7;\n+\n+  int vla[nelts];     // { dg-message \"declared here|while referencing\" }\n+\n+  vla[0] = __LINE__;\n+  vla[nelts] = 1;     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+\n+  sink (vla);\n+}\n+\n+void test_struct_char_vla_location (void)\n+{\n+  unsigned nelts = 7;\n+\n+  struct {\n+    char cvla[nelts]; // { dg-message \"declared here|while referencing\" }\n+  } s;\n+\n+  s.cvla[0] = __LINE__;\n+  s.cvla[nelts - 1] = 0;\n+  s.cvla[nelts] = 0;  // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+\n+  sink (&s);\n+}\n+\n+\n+void test_struct_int_vla_location (void)\n+{\n+  unsigned nelts = 7;\n+\n+  struct {\n+    int ivla[nelts];  // { dg-message \"declared here|while referencing\" }\n+  } s;\n+\n+  s.ivla[0] = __LINE__;\n+  s.ivla[nelts - 1] = 0;\n+  s.ivla[nelts] = 0;  // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+\n+  sink (&s);\n+}"}, {"sha": "567aef8bc2694dc684b744a96ebedec27f494b33", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8299dfae9364468096a8005c4b3a83d4fa0f6e42", "patch": "@@ -2222,7 +2222,25 @@ fold_builtin_alloca_with_align (gimple *stmt)\n   elem_type = build_nonstandard_integer_type (BITS_PER_UNIT, 1);\n   n_elem = size * 8 / BITS_PER_UNIT;\n   array_type = build_array_type_nelts (elem_type, n_elem);\n-  var = create_tmp_var (array_type);\n+\n+  if (tree ssa_name = SSA_NAME_IDENTIFIER (lhs))\n+    {\n+      /* Give the temporary a name derived from the name of the VLA\n+\t declaration so it can be referenced in diagnostics.  */\n+      const char *name = IDENTIFIER_POINTER (ssa_name);\n+      var = create_tmp_var (array_type, name);\n+    }\n+  else\n+    var = create_tmp_var (array_type);\n+\n+  if (gimple *lhsdef = SSA_NAME_DEF_STMT (lhs))\n+    {\n+      /* Set the temporary's location to that of the VLA declaration\n+\t so it can be pointed to in diagnostics.  */\n+      location_t loc = gimple_location (lhsdef);\n+      DECL_SOURCE_LOCATION (var) = loc;\n+    }\n+\n   SET_DECL_ALIGN (var, TREE_INT_CST_LOW (gimple_call_arg (stmt, 1)));\n   if (uid != 0)\n     SET_DECL_PT_UID (var, uid);"}, {"sha": "9889095fa135ce2354c11e8cb87e922f384eca65", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8299dfae9364468096a8005c4b3a83d4fa0f6e42/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8299dfae9364468096a8005c4b3a83d4fa0f6e42", "patch": "@@ -4085,6 +4085,9 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n   tree up_sub = low_sub;\n   tree up_bound = array_ref_up_bound (ref);\n \n+  /* Referenced decl if one can be determined.  */\n+  tree decl = NULL_TREE;\n+\n   /* Set for accesses to interior zero-length arrays.  */\n   bool interior_zero_len = false;\n \n@@ -4115,7 +4118,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t  tree arg = TREE_OPERAND (ref, 0);\n \t  poly_int64 off;\n \n-\t  if (TREE_CODE (arg) == COMPONENT_REF)\n+\t  const bool compref = TREE_CODE (arg) == COMPONENT_REF;\n+\t  if (compref)\n \t    {\n \t      /* Try to determine the size of the trailing array from\n \t\t its initializer (if it has one).  */\n@@ -4124,12 +4128,27 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t\t  maxbound = refsize;\n \t    }\n \n-\t  if (maxbound == ptrdiff_max\n-\t      && get_addr_base_and_unit_offset (arg, &off)\n-\t      && known_gt (off, 0))\n-\t    maxbound = wide_int_to_tree (sizetype,\n-\t\t\t\t\t wi::sub (wi::to_wide (maxbound),\n-\t\t\t\t\t\t  off));\n+\t  if (maxbound == ptrdiff_max)\n+\t    {\n+\t      /* Try to determine the size of the base object.  Avoid\n+\t\t COMPONENT_REF already tried above.  Using its DECL_SIZE\n+\t\t size wouldn't necessarily be correct if the reference is\n+\t\t to its flexible array member initialized in a different\n+\t\t translation unit.  */\n+\t      tree base = get_addr_base_and_unit_offset (arg, &off);\n+\t      if (!compref && base && DECL_P (base))\n+\t\tif (tree basesize = DECL_SIZE_UNIT (base))\n+\t\t  if (TREE_CODE (basesize) == INTEGER_CST)\n+\t\t    {\n+\t\t      maxbound = basesize;\n+\t\t      decl = base;\n+\t\t    }\n+\n+\t      if (known_gt (off, 0))\n+\t\tmaxbound = wide_int_to_tree (sizetype,\n+\t\t\t\t\t     wi::sub (wi::to_wide (maxbound),\n+\t\t\t\t\t\t      off));\n+\t    }\n \t  else\n \t    maxbound = fold_convert (sizetype, maxbound);\n \n@@ -4214,7 +4233,7 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n-      ref = TREE_OPERAND (ref, 0);\n+      ref = decl ? decl : TREE_OPERAND (ref, 0);\n \n       tree rec = NULL_TREE;\n       if (TREE_CODE (ref) == COMPONENT_REF)"}]}