{"sha": "28774a6015261a100c426d206154a98c0ca215ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3NzRhNjAxNTI2MWExMDBjNDI2ZDIwNjE1NGE5OGMwY2EyMTVjZQ==", "commit": {"author": {"name": "Nikhil Benesch", "email": "nikhil.benesch@gmail.com", "date": "2020-10-10T16:26:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-15T00:00:02Z"}, "message": "libgo: print reason code if throwing unwind exception fails\n\nCalls to _Unwind_RaiseException and friends *can* return due to bugs in\nlibgo or memory corruption. When this occurs, print a message to stderr\nwith the reason code before aborting to aid debugging.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/261257", "tree": {"sha": "ad3b60f0105e975e97263df0445d364ea40226f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad3b60f0105e975e97263df0445d364ea40226f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28774a6015261a100c426d206154a98c0ca215ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28774a6015261a100c426d206154a98c0ca215ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28774a6015261a100c426d206154a98c0ca215ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28774a6015261a100c426d206154a98c0ca215ce/comments", "author": {"login": "benesch", "id": 882976, "node_id": "MDQ6VXNlcjg4Mjk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/882976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benesch", "html_url": "https://github.com/benesch", "followers_url": "https://api.github.com/users/benesch/followers", "following_url": "https://api.github.com/users/benesch/following{/other_user}", "gists_url": "https://api.github.com/users/benesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/benesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benesch/subscriptions", "organizations_url": "https://api.github.com/users/benesch/orgs", "repos_url": "https://api.github.com/users/benesch/repos", "events_url": "https://api.github.com/users/benesch/events{/privacy}", "received_events_url": "https://api.github.com/users/benesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d83c6f584c321989b43526dc9437de4381aa47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d83c6f584c321989b43526dc9437de4381aa47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d83c6f584c321989b43526dc9437de4381aa47"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "45a7b422a298a689d23e70c64f30862d4179cb63", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28774a6015261a100c426d206154a98c0ca215ce/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28774a6015261a100c426d206154a98c0ca215ce/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=28774a6015261a100c426d206154a98c0ca215ce", "patch": "@@ -1,4 +1,4 @@\n-cc1f7d613f9b0666bbf8aac3dd208d5adfe88546\n+b73a8f17dfe8d7c7ecc9ccd0317be5abe71c5509\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "16e05252ec997ae15e6871c246282f86c2753247", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28774a6015261a100c426d206154a98c0ca215ce/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28774a6015261a100c426d206154a98c0ca215ce/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=28774a6015261a100c426d206154a98c0ca215ce", "patch": "@@ -59,20 +59,22 @@ void\n rethrowException ()\n {\n   struct _Unwind_Exception *hdr;\n+  _Unwind_Reason_Code reason;\n \n   hdr = (struct _Unwind_Exception *) runtime_g()->exception;\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n-  _Unwind_SjLj_Resume_or_Rethrow (hdr);\n+  reason = _Unwind_SjLj_Resume_or_Rethrow (hdr);\n #else\n #if defined(_LIBUNWIND_STD_ABI)\n-  _Unwind_RaiseException (hdr);\n+  reason = _Unwind_RaiseException (hdr);\n #else\n-  _Unwind_Resume_or_Rethrow (hdr);\n+  reason = _Unwind_Resume_or_Rethrow (hdr);\n #endif\n #endif\n \n   /* Rethrowing the exception should not return.  */\n+  runtime_printf (\"failed to rethrow unwind exception (reason=%d)\\n\", reason);\n   abort();\n }\n \n@@ -105,6 +107,7 @@ throwException ()\n {\n   struct _Unwind_Exception *hdr;\n   uintptr align;\n+  _Unwind_Reason_Code reason;\n \n   hdr = (struct _Unwind_Exception *)runtime_g ()->exception;\n \n@@ -119,12 +122,13 @@ throwException ()\n   hdr->exception_cleanup = NULL;\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n-  _Unwind_SjLj_RaiseException (hdr);\n+  reason = _Unwind_SjLj_RaiseException (hdr);\n #else\n-  _Unwind_RaiseException (hdr);\n+  reason = _Unwind_RaiseException (hdr);\n #endif\n \n   /* Raising an exception should not return.  */\n+  runtime_printf (\"failed to throw unwind exception (reason=%d)\\n\", reason);\n   abort ();\n }\n "}]}