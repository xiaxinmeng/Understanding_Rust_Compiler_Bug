{"sha": "1d8f2fd8f249bcd443c5571ff1e9518502405695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4ZjJmZDhmMjQ5YmNkNDQzYzU1NzFmZjFlOTUxODUwMjQwNTY5NQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-04-04T11:58:38Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-04-04T11:58:38Z"}, "message": "Arrays.java (qsort): Fix off-by-one errors and use of incorrect \"hi\" value when count > 40.\n\n\t* java/util/Arrays.java (qsort): Fix off-by-one errors and use of\n\tincorrect \"hi\" value when count > 40.\n\nFrom-SVN: r51854", "tree": {"sha": "1ce46e6909172ed1f6b4f535000c2fb571d4d469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ce46e6909172ed1f6b4f535000c2fb571d4d469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d8f2fd8f249bcd443c5571ff1e9518502405695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8f2fd8f249bcd443c5571ff1e9518502405695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8f2fd8f249bcd443c5571ff1e9518502405695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8f2fd8f249bcd443c5571ff1e9518502405695/comments", "author": null, "committer": null, "parents": [{"sha": "014c0998cb6e42832ec79b4ae5bea78435cfb509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014c0998cb6e42832ec79b4ae5bea78435cfb509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014c0998cb6e42832ec79b4ae5bea78435cfb509"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "e2a1fe702c008ffd48057f9f7bc485aa5fe12dfd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8f2fd8f249bcd443c5571ff1e9518502405695/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8f2fd8f249bcd443c5571ff1e9518502405695/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1d8f2fd8f249bcd443c5571ff1e9518502405695", "patch": "@@ -1,3 +1,8 @@\n+2002-04-04  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* java/util/Arrays.java (qsort): Fix off-by-one errors and use of\n+\tincorrect \"hi\" value when count > 40.\n+\n 2002-04-03  Mark Wielaard  <mark@klomp.org>\n \n \t* java/lang/reflect/Modifier.java (toString(int,StringBuffer)): Fix"}, {"sha": "8126cf26410abf0409644b0ca6fcfb514ddac6a1", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 49, "deletions": 42, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8f2fd8f249bcd443c5571ff1e9518502405695/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8f2fd8f249bcd443c5571ff1e9518502405695/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=1d8f2fd8f249bcd443c5571ff1e9518502405695", "patch": "@@ -1078,9 +1078,9 @@ private static void qsort(byte[] array, int from, int count)\n     if (count > 40)\n       { // big arrays, pseudomedian of 9\n         int s = count / 8;\n-        lo = med3(lo, lo + s, lo + s + s, array);\n+        lo = med3(lo, lo + s, lo + 2 * s, array);\n         mid = med3(mid - s, mid, mid + s, array);\n-        hi = med3(hi - s - s, hi - s, hi, array);\n+        hi = med3(hi - 2 * s, hi - s, hi, array);\n       }\n     mid = med3(lo, mid, hi, array);\n \n@@ -1089,8 +1089,8 @@ private static void qsort(byte[] array, int from, int count)\n \n     // Pull the median element out of the fray, and use it as a pivot.\n     swap(from, mid, array);\n-    a = b = from + 1;\n-    c = d = hi;\n+    a = b = from;\n+    c = d = from + count - 1;\n \n     // Repeatedly move b and c to each other, swapping elements so\n     // that all elements before index b are less than the pivot, and all\n@@ -1124,20 +1124,21 @@ private static void qsort(byte[] array, int from, int count)\n       }\n \n     // Swap pivot(s) back in place, the recurse on left and right sections.\n+    hi = from + count;\n     int span;\n     span = Math.min(a - from, b - a);\n     vecswap(from, b - span, span, array);\n \n     span = Math.min(d - c, hi - d - 1);\n-    vecswap(b, hi - span + 1, span, array);\n+    vecswap(b, hi - span, span, array);\n \n     span = b - a;\n     if (span > 1)\n       qsort(array, from, span);\n \n     span = d - c;\n     if (span > 1)\n-      qsort(array, hi - span + 1, span);\n+      qsort(array, hi - span, span);\n   }\n \n   /**\n@@ -1239,9 +1240,9 @@ private static void qsort(char[] array, int from, int count)\n     if (count > 40)\n       { // big arrays, pseudomedian of 9\n         int s = count / 8;\n-        lo = med3(lo, lo + s, lo + s + s, array);\n+        lo = med3(lo, lo + s, lo + 2 * s, array);\n         mid = med3(mid - s, mid, mid + s, array);\n-        hi = med3(hi - s - s, hi - s, hi, array);\n+        hi = med3(hi - 2 * s, hi - s, hi, array);\n       }\n     mid = med3(lo, mid, hi, array);\n \n@@ -1250,8 +1251,8 @@ private static void qsort(char[] array, int from, int count)\n \n     // Pull the median element out of the fray, and use it as a pivot.\n     swap(from, mid, array);\n-    a = b = from + 1;\n-    c = d = hi;\n+    a = b = from;\n+    c = d = from + count - 1;\n \n     // Repeatedly move b and c to each other, swapping elements so\n     // that all elements before index b are less than the pivot, and all\n@@ -1285,20 +1286,21 @@ private static void qsort(char[] array, int from, int count)\n       }\n \n     // Swap pivot(s) back in place, the recurse on left and right sections.\n+    hi = from + count;\n     int span;\n     span = Math.min(a - from, b - a);\n     vecswap(from, b - span, span, array);\n \n     span = Math.min(d - c, hi - d - 1);\n-    vecswap(b, hi - span + 1, span, array);\n+    vecswap(b, hi - span, span, array);\n \n     span = b - a;\n     if (span > 1)\n       qsort(array, from, span);\n \n     span = d - c;\n     if (span > 1)\n-      qsort(array, hi - span + 1, span);\n+      qsort(array, hi - span, span);\n   }\n \n   /**\n@@ -1400,9 +1402,9 @@ private static void qsort(short[] array, int from, int count)\n     if (count > 40)\n       { // big arrays, pseudomedian of 9\n         int s = count / 8;\n-        lo = med3(lo, lo + s, lo + s + s, array);\n+        lo = med3(lo, lo + s, lo + 2 * s, array);\n         mid = med3(mid - s, mid, mid + s, array);\n-        hi = med3(hi - s - s, hi - s, hi, array);\n+        hi = med3(hi - 2 * s, hi - s, hi, array);\n       }\n     mid = med3(lo, mid, hi, array);\n \n@@ -1411,8 +1413,8 @@ private static void qsort(short[] array, int from, int count)\n \n     // Pull the median element out of the fray, and use it as a pivot.\n     swap(from, mid, array);\n-    a = b = from + 1;\n-    c = d = hi;\n+    a = b = from;\n+    c = d = from + count - 1;\n \n     // Repeatedly move b and c to each other, swapping elements so\n     // that all elements before index b are less than the pivot, and all\n@@ -1446,20 +1448,21 @@ private static void qsort(short[] array, int from, int count)\n       }\n \n     // Swap pivot(s) back in place, the recurse on left and right sections.\n+    hi = from + count;\n     int span;\n     span = Math.min(a - from, b - a);\n     vecswap(from, b - span, span, array);\n \n     span = Math.min(d - c, hi - d - 1);\n-    vecswap(b, hi - span + 1, span, array);\n+    vecswap(b, hi - span, span, array);\n \n     span = b - a;\n     if (span > 1)\n       qsort(array, from, span);\n \n     span = d - c;\n     if (span > 1)\n-      qsort(array, hi - span + 1, span);\n+      qsort(array, hi - span, span);\n   }\n \n   /**\n@@ -1573,9 +1576,9 @@ private static void qsort(int[] array, int from, int count)\n     if (count > 40)\n       { // big arrays, pseudomedian of 9\n         int s = count / 8;\n-        lo = med3(lo, lo + s, lo + s + s, array);\n+        lo = med3(lo, lo + s, lo + 2 * s, array);\n         mid = med3(mid - s, mid, mid + s, array);\n-        hi = med3(hi - s - s, hi - s, hi, array);\n+        hi = med3(hi - 2 * s, hi - s, hi, array);\n       }\n     mid = med3(lo, mid, hi, array);\n \n@@ -1584,8 +1587,8 @@ private static void qsort(int[] array, int from, int count)\n \n     // Pull the median element out of the fray, and use it as a pivot.\n     swap(from, mid, array);\n-    a = b = from + 1;\n-    c = d = hi;\n+    a = b = from;\n+    c = d = from + count - 1;\n \n     // Repeatedly move b and c to each other, swapping elements so\n     // that all elements before index b are less than the pivot, and all\n@@ -1619,20 +1622,21 @@ private static void qsort(int[] array, int from, int count)\n       }\n \n     // Swap pivot(s) back in place, the recurse on left and right sections.\n+    hi = from + count;\n     int span;\n     span = Math.min(a - from, b - a);\n     vecswap(from, b - span, span, array);\n \n     span = Math.min(d - c, hi - d - 1);\n-    vecswap(b, hi - span + 1, span, array);\n+    vecswap(b, hi - span, span, array);\n \n     span = b - a;\n     if (span > 1)\n       qsort(array, from, span);\n \n     span = d - c;\n     if (span > 1)\n-      qsort(array, hi - span + 1, span);\n+      qsort(array, hi - span, span);\n   }\n \n   /**\n@@ -1746,9 +1750,9 @@ private static void qsort(long[] array, int from, int count)\n     if (count > 40)\n       { // big arrays, pseudomedian of 9\n         int s = count / 8;\n-        lo = med3(lo, lo + s, lo + s + s, array);\n+        lo = med3(lo, lo + s, lo + 2 * s, array);\n         mid = med3(mid - s, mid, mid + s, array);\n-        hi = med3(hi - s - s, hi - s, hi, array);\n+        hi = med3(hi - 2 * s, hi - s, hi, array);\n       }\n     mid = med3(lo, mid, hi, array);\n \n@@ -1757,8 +1761,8 @@ private static void qsort(long[] array, int from, int count)\n \n     // Pull the median element out of the fray, and use it as a pivot.\n     swap(from, mid, array);\n-    a = b = from + 1;\n-    c = d = hi;\n+    a = b = from;\n+    c = d = from + count - 1;\n \n     // Repeatedly move b and c to each other, swapping elements so\n     // that all elements before index b are less than the pivot, and all\n@@ -1792,20 +1796,21 @@ private static void qsort(long[] array, int from, int count)\n       }\n \n     // Swap pivot(s) back in place, the recurse on left and right sections.\n+    hi = from + count;\n     int span;\n     span = Math.min(a - from, b - a);\n     vecswap(from, b - span, span, array);\n \n     span = Math.min(d - c, hi - d - 1);\n-    vecswap(b, hi - span + 1, span, array);\n+    vecswap(b, hi - span, span, array);\n \n     span = b - a;\n     if (span > 1)\n       qsort(array, from, span);\n \n     span = d - c;\n     if (span > 1)\n-      qsort(array, hi - span + 1, span);\n+      qsort(array, hi - span, span);\n   }\n \n   /**\n@@ -1913,9 +1918,9 @@ private static void qsort(float[] array, int from, int count)\n     if (count > 40)\n       { // big arrays, pseudomedian of 9\n         int s = count / 8;\n-        lo = med3(lo, lo + s, lo + s + s, array);\n+        lo = med3(lo, lo + s, lo + 2 * s, array);\n         mid = med3(mid - s, mid, mid + s, array);\n-        hi = med3(hi - s - s, hi - s, hi, array);\n+        hi = med3(hi - 2 * s, hi - s, hi, array);\n       }\n     mid = med3(lo, mid, hi, array);\n \n@@ -1924,8 +1929,8 @@ private static void qsort(float[] array, int from, int count)\n \n     // Pull the median element out of the fray, and use it as a pivot.\n     swap(from, mid, array);\n-    a = b = from + 1;\n-    c = d = hi;\n+    a = b = from;\n+    c = d = from + count - 1;\n \n     // Repeatedly move b and c to each other, swapping elements so\n     // that all elements before index b are less than the pivot, and all\n@@ -1959,20 +1964,21 @@ private static void qsort(float[] array, int from, int count)\n       }\n \n     // Swap pivot(s) back in place, the recurse on left and right sections.\n+    hi = from + count;\n     int span;\n     span = Math.min(a - from, b - a);\n     vecswap(from, b - span, span, array);\n \n     span = Math.min(d - c, hi - d - 1);\n-    vecswap(b, hi - span + 1, span, array);\n+    vecswap(b, hi - span, span, array);\n \n     span = b - a;\n     if (span > 1)\n       qsort(array, from, span);\n \n     span = d - c;\n     if (span > 1)\n-      qsort(array, hi - span + 1, span);\n+      qsort(array, hi - span, span);\n   }\n \n   /**\n@@ -2080,9 +2086,9 @@ private static void qsort(double[] array, int from, int count)\n     if (count > 40)\n       { // big arrays, pseudomedian of 9\n         int s = count / 8;\n-        lo = med3(lo, lo + s, lo + s + s, array);\n+        lo = med3(lo, lo + s, lo + 2 * s, array);\n         mid = med3(mid - s, mid, mid + s, array);\n-        hi = med3(hi - s - s, hi - s, hi, array);\n+        hi = med3(hi - 2 * s, hi - s, hi, array);\n       }\n     mid = med3(lo, mid, hi, array);\n \n@@ -2091,8 +2097,8 @@ private static void qsort(double[] array, int from, int count)\n \n     // Pull the median element out of the fray, and use it as a pivot.\n     swap(from, mid, array);\n-    a = b = from + 1;\n-    c = d = hi;\n+    a = b = from;\n+    c = d = from + count - 1;\n \n     // Repeatedly move b and c to each other, swapping elements so\n     // that all elements before index b are less than the pivot, and all\n@@ -2126,20 +2132,21 @@ private static void qsort(double[] array, int from, int count)\n       }\n \n     // Swap pivot(s) back in place, the recurse on left and right sections.\n+    hi = from + count;\n     int span;\n     span = Math.min(a - from, b - a);\n     vecswap(from, b - span, span, array);\n \n     span = Math.min(d - c, hi - d - 1);\n-    vecswap(b, hi - span + 1, span, array);\n+    vecswap(b, hi - span, span, array);\n \n     span = b - a;\n     if (span > 1)\n       qsort(array, from, span);\n \n     span = d - c;\n     if (span > 1)\n-      qsort(array, hi - span + 1, span);\n+      qsort(array, hi - span, span);\n   }\n \n   /**"}]}