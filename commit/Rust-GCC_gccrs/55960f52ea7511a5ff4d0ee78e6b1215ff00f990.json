{"sha": "55960f52ea7511a5ff4d0ee78e6b1215ff00f990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU5NjBmNTJlYTc1MTFhNWZmNGQwZWU3OGU2YjEyMTVmZjAwZjk5MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-10T23:02:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-10T23:02:50Z"}, "message": "(decl_attributes): Check for attributes with leading and trailing\ndouble underscores.\n\nFrom-SVN: r8412", "tree": {"sha": "5d263a23ce43098806c480d27583602b344678d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d263a23ce43098806c480d27583602b344678d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55960f52ea7511a5ff4d0ee78e6b1215ff00f990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55960f52ea7511a5ff4d0ee78e6b1215ff00f990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55960f52ea7511a5ff4d0ee78e6b1215ff00f990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55960f52ea7511a5ff4d0ee78e6b1215ff00f990/comments", "author": null, "committer": null, "parents": [{"sha": "1f21a9799f02214ccf0e8628cdab5f22ff18f3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f21a9799f02214ccf0e8628cdab5f22ff18f3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f21a9799f02214ccf0e8628cdab5f22ff18f3e9"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "407203f161e3a6fb0ee5bce23a9cd1790e5f41d3", "filename": "gcc/c-common.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55960f52ea7511a5ff4d0ee78e6b1215ff00f990/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55960f52ea7511a5ff4d0ee78e6b1215ff00f990/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=55960f52ea7511a5ff4d0ee78e6b1215ff00f990", "patch": "@@ -215,7 +215,8 @@ decl_attributes (decl, attributes)\n   for (a = attributes; a; a = TREE_CHAIN (a))\n     if (!(name = TREE_VALUE (a)))\n \tcontinue;\n-    else if (name == get_identifier (\"packed\"))\n+    else if (name == get_identifier (\"packed\")\n+\t     || name == get_identifier (\"__packed__\"))\n       {\n \tif (TREE_CODE (decl) == FIELD_DECL)\n \t  DECL_PACKED (decl) = 1;\n@@ -226,7 +227,9 @@ decl_attributes (decl, attributes)\n \n       }\n     else if (TREE_VALUE (a) == get_identifier (\"noreturn\")\n-\t     || TREE_VALUE (a) == get_identifier (\"volatile\"))\n+\t     || TREE_VALUE (a) == get_identifier (\"__noreturn__\")\n+\t     || TREE_VALUE (a) == get_identifier (\"volatile\")\n+\t     || TREE_VALUE (a) == get_identifier (\"__volatile__\"))\n       {\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_THIS_VOLATILE (decl) = 1;\n@@ -240,7 +243,8 @@ decl_attributes (decl, attributes)\n \t  warning_with_decl (decl, \"`%s' attribute ignored\",\n \t\t\t     IDENTIFIER_POINTER (TREE_VALUE (a)));\n       }\n-    else if (TREE_VALUE (a) == get_identifier (\"const\"))\n+    else if (TREE_VALUE (a) == get_identifier (\"const\")\n+\t     || TREE_VALUE (a) == get_identifier (\"__const__\"))\n       {\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_READONLY (decl) = 1;\n@@ -253,7 +257,8 @@ decl_attributes (decl, attributes)\n \telse\n \t  warning_with_decl (decl, \"`const' attribute ignored\");\n       }\n-    else if (TREE_VALUE (a) == get_identifier (\"transparent_union\"))\n+    else if (TREE_VALUE (a) == get_identifier (\"transparent_union\")\n+\t     || TREE_VALUE (a) == get_identifier (\"__transparent_union__\"))\n       {\n \tif (TREE_CODE (decl) == PARM_DECL\n \t    && TREE_CODE (type) == UNION_TYPE\n@@ -286,7 +291,8 @@ found_attr:;\n \t\t   IDENTIFIER_POINTER (name));\n      }\n     else if ( args = TREE_CHAIN(name),\n-\t      !strcmp (IDENTIFIER_POINTER (name = TREE_PURPOSE (name)), \"mode\")\n+\t      (!strcmp (IDENTIFIER_POINTER (name = TREE_PURPOSE (name)), \"mode\")\n+\t       || !strcmp (IDENTIFIER_POINTER (name), \"__mode__\"))\n \t      && list_length (args) == 1\n \t      && TREE_CODE (TREE_VALUE (args)) == IDENTIFIER_NODE)\n       {\n@@ -313,7 +319,8 @@ found_attr:;\n \tif (i == NUM_MACHINE_MODES)\n \t  error_with_decl (decl, \"unknown machine mode `%s'\", specified_name);\n       }\n-    else if (!strcmp (IDENTIFIER_POINTER (name), \"section\")\n+    else if ((!strcmp (IDENTIFIER_POINTER (name), \"section\")\n+\t      || !strcmp (IDENTIFIER_POINTER (name), \"__section__\"))\n \t     && list_length (args) == 1\n \t     && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n       {\n@@ -340,7 +347,8 @@ found_attr:;\n \terror_with_decl (decl, \"section attributes are not supported for this target\");\n #endif\n       }\n-    else if (!strcmp (IDENTIFIER_POINTER (name), \"aligned\")\n+    else if ((!strcmp (IDENTIFIER_POINTER (name), \"aligned\")\n+\t      || !strcmp (IDENTIFIER_POINTER (name), \"__aligned__\"))\n \t     && list_length (args) == 1\n \t     && TREE_CODE (TREE_VALUE (args)) == INTEGER_CST)\n       {\n@@ -372,7 +380,8 @@ found_attr:;\n \telse\n \t  DECL_ALIGN (decl) = align;\n       }\n-    else if (!strcmp (IDENTIFIER_POINTER (name), \"format\")\n+    else if ((!strcmp (IDENTIFIER_POINTER (name), \"format\")\n+\t      || !strcmp (IDENTIFIER_POINTER (name), \"__format__\"))\n \t     && list_length (args) == 3\n \t     && TREE_CODE (TREE_VALUE (args)) == IDENTIFIER_NODE\n \t     && TREE_CODE (TREE_VALUE (TREE_CHAIN (args))) == INTEGER_CST"}]}