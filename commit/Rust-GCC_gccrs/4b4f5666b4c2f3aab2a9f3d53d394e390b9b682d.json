{"sha": "4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0ZjU2NjZiNGMyZjNhYWIyYTlmM2Q1M2QzOTRlMzkwYjliNjgyZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-18T02:29:03Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-18T02:29:03Z"}, "message": "libstdc++: Implement P2325 changes to default-constructibility of views\n\nThis implements the wording changes of P2325R3 \"Views should not be\nrequired to be default constructible\".  Changes are relatively\nstraightforward, besides perhaps those to __box (which now stands\nfor copyable-box instead of semiregular-box) and __non_propagating_cache.\n\nFor __box, this patch implements the recommended practice to also avoid\nstd::optional when the boxed type is nothrow_move/copy_constructible.\n\nFor __non_propagating_cache, now that it's used by split_view::_M_current,\nwe need to add assignment from a value of the underlying type to the\nsubset of the std::optional API implemented for the cache (needed by\nsplit_view::begin()).  Hence the new __non_propagating_cache::operator=\noverload.\n\nIn passing, this fixes the undesirable list-init in the constructors of\nthe partial specialization of __box as reported in PR100475 comment #7.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/iterator_concepts.h (weakly_incrementable): Remove\n\tdefault_initializable requirement.\n\t* include/bits/ranges_base.h (ranges::view): Likewise.\n\t* include/bits/ranges_util.h (subrange): Constrain the default\n\tctor.\n\t* include/bits/stl_iterator.h (back_insert_iterator): Remove the\n\tdefault ctor.\n\t(front_insert_iterator): Likewise.\n\t(insert_iterator): Likewise.  Remove NSDMIs.\n\t(common_iterator): Constrain the default ctor.\n\t(counted_iterator): Likewise.\n\t* include/bits/stream_iterator.h (ostream_iterator): Remove the\n\tdefault ctor.\n\t* include/std/ranges (__detail::__box::operator=): Handle\n\tself-assignment in the primary template.\n\t(__detail::__box): In the partial specialization: adjust\n\tconstraints as per P2325.  Add specialized operator= for the\n\tcase when the wrapped type is not copyable.  Constrain the\n\tdefault ctor.  Avoid list-initialization.\n\t(single_view): Constraint the default ctor.\n\t(iota_view): Relax semiregular constraint to copyable.\n\tConstrain the default ctor.\n\t(iota_view::_Iterator): Constraint the default ctor.\n\t(basic_istream_view): Remove the default ctor.  Remove NSDMIs.\n\tRemove redundant checks for empty _M_stream.\n\t(basic_istream_view::_Iterator): Likewise.\n\t(ref_view): Remove the default ctor.  Remove NSDMIs.\n\t(ref_view::_Iterator): Constrain the default ctor.\n\t(__detail::__non_propagating_cache::operator=): Define overload\n\tfor assigning from a value of the underlying type.\n\t(filter_view): Likewise.\n\t(filter_view::_Iterator): Likewise.\n\t(transform_view): Likewise.\n\t(transform_view::_Iterator): Likewise.\n\t(take_view): Likewise.\n\t(take_view::_Iterator): Likewise.\n\t(take_while_view): Likewise.\n\t(take_while_view::_Iterator): Likewise.\n\t(drop_while_view): Likewise.\n\t(drop_while_view::_Iterator): Likewise.\n\t(join_view): Likewise.\n\t(split_view::_OuterIter::__current): Adjust after changing the\n\ttype of _M_current.\n\t(split_view::_M_current): Wrap it in a __non_propagating_cache.\n\t(split_view::split_view): Constrain the default ctor.\n\t(common_view): Constrain the default ctor.\n\t(reverse_view): Likewise.\n\t(elements_view): Likewise.\n\t* include/std/span (enable_view<span<_ElementType, _Extent>>):\n\tDefine this partial specialization to true unconditionally.\n\t* include/std/version (__cpp_lib_ranges): Adjust value.\n\t* testsuite/24_iterators/back_insert_iterator/constexpr.cc:\n\tDon't attempt to default construct a back_insert_iterator.\n\t* testsuite/24_iterators/front_insert_iterator/constexpr.cc:\n\tDon't attempt to default construct a front_insert_iterator.\n\t* testsuite/24_iterators/insert_iterator/constexpr.cc:\n\tDon't attempt to default construct an insert_iterator.\n\t* testsuite/24_iterators/ostream_iterator/requirements/constexpr.cc:\n\tRemove this test for default constructibility of ostream_iterator.\n\t* testsuite/std/ranges/97600.cc: Don't attempt to default\n\tconstruct a basic_istream_view.\n\t* testsuite/std/ranges/adaptors/detail/semiregular_box.cc:\n\tRename to ...\n\t* testsuite/std/ranges/adaptors/detail/copyable_box.cc: ... this.\n\t(test02): Adjust now that __box is copyable-box not\n\tsemiregular-box.\n\t(test03): New test.\n\t* testsuite/std/ranges/p2325.cc: New test.\n\t* testsuite/std/ranges/single_view.cc (test06): New test.\n\t* testsuite/std/ranges/view.cc: Adjust now that view doesn't\n\trequire default_initializable.", "tree": {"sha": "4cb3fc63c8c0b94ee597aac7f930dae83e9e83d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb3fc63c8c0b94ee597aac7f930dae83e9e83d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/comments", "author": null, "committer": null, "parents": [{"sha": "7d08043da935095543172f91f691917bd6379c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d08043da935095543172f91f691917bd6379c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d08043da935095543172f91f691917bd6379c53"}], "stats": {"total": 453, "additions": 335, "deletions": 118}, "files": [{"sha": "c273056c204d4cd8f204efc3a1fd91ca4b5cdbb0", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -594,8 +594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Requirements on types that can be incremented with ++.\n   template<typename _Iter>\n-    concept weakly_incrementable = default_initializable<_Iter>\n-      && movable<_Iter>\n+    concept weakly_incrementable = movable<_Iter>\n       && requires(_Iter __i)\n       {\n \ttypename iter_difference_t<_Iter>;"}, {"sha": "9d749c8d9b72d9324393a796ac93b86e227a7684", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -619,8 +619,7 @@ namespace ranges\n   /// [range.view] The ranges::view concept.\n   template<typename _Tp>\n     concept view\n-      = range<_Tp> && movable<_Tp> && default_initializable<_Tp>\n-\t&& enable_view<_Tp>;\n+      = range<_Tp> && movable<_Tp> && enable_view<_Tp>;\n \n   // [range.refinements]\n "}, {"sha": "d7b12b3d98580df70fc80623fb49042da04ff88a", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -241,7 +241,7 @@ namespace ranges\n       [[no_unique_address]] _Size<__size_type> _M_size = {};\n \n     public:\n-      subrange() = default;\n+      subrange() requires default_initializable<_It> = default;\n \n       constexpr\n       subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s)"}, {"sha": "6ec046b597bb921950e83cc2703e8554a9f8458c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -639,8 +639,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Container          container_type;\n #if __cplusplus > 201703L\n       using difference_type = ptrdiff_t;\n-\n-      constexpr back_insert_iterator() noexcept : container(nullptr) { }\n #endif\n \n       /// The only way to create this %iterator is with a container.\n@@ -742,8 +740,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Container          container_type;\n #if __cplusplus > 201703L\n       using difference_type = ptrdiff_t;\n-\n-      constexpr front_insert_iterator() noexcept : container(nullptr) { }\n #endif\n \n       /// The only way to create this %iterator is with a container.\n@@ -843,26 +839,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n #if __cplusplus > 201703L && defined __cpp_lib_concepts\n       using _Iter = std::__detail::__range_iter_t<_Container>;\n-\n-    protected:\n-      _Container* container = nullptr;\n-      _Iter iter = _Iter();\n #else\n       typedef typename _Container::iterator\t\t_Iter;\n-\n+#endif\n     protected:\n       _Container* container;\n       _Iter iter;\n-#endif\n \n     public:\n       /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n \n #if __cplusplus > 201703L && defined __cpp_lib_concepts\n       using difference_type = ptrdiff_t;\n-\n-      insert_iterator() = default;\n #endif\n \n       /**\n@@ -1740,6 +1729,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr\n     common_iterator()\n     noexcept(is_nothrow_default_constructible_v<_It>)\n+    requires default_initializable<_It>\n     : _M_it(), _M_index(0)\n     { }\n \n@@ -2117,7 +2107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // iterator_concept defined in __counted_iter_concept\n       // iterator_category defined in __counted_iter_cat\n \n-      constexpr counted_iterator() = default;\n+      constexpr counted_iterator() requires default_initializable<_It> = default;\n \n       constexpr\n       counted_iterator(_It __i, iter_difference_t<_It> __n)"}, {"sha": "d07474d4996f4d340fd84320901d96fb9cd9d986", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -192,11 +192,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _CharT*\t_M_string;\n \n     public:\n-#if __cplusplus > 201703L\n-      constexpr ostream_iterator() noexcept\n-      : _M_stream(nullptr), _M_string(nullptr) { }\n-#endif\n-\n       /// Construct from an ostream.\n       ostream_iterator(ostream_type& __s)\n       : _M_stream(std::__addressof(__s)), _M_string(0) {}"}, {"sha": "f96adf63d10b0937c77d4006834f649b094e40fe", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 105, "deletions": 55, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -113,10 +113,13 @@ namespace ranges\n \tnoexcept(is_nothrow_copy_constructible_v<_Tp>)\n \trequires (!copyable<_Tp>)\n \t{\n-\t  if ((bool)__that)\n-\t    this->emplace(*__that);\n-\t  else\n-\t    this->reset();\n+\t  if (this != std::__addressof(__that))\n+\t    {\n+\t      if ((bool)__that)\n+\t\tthis->emplace(*__that);\n+\t      else\n+\t\tthis->reset();\n+\t    }\n \t  return *this;\n \t}\n \n@@ -125,37 +128,42 @@ namespace ranges\n \tnoexcept(is_nothrow_move_constructible_v<_Tp>)\n \trequires (!movable<_Tp>)\n \t{\n-\t  if ((bool)__that)\n-\t    this->emplace(std::move(*__that));\n-\t  else\n-\t    this->reset();\n+\t  if (this != std::__addressof(__that))\n+\t    {\n+\t      if ((bool)__that)\n+\t\tthis->emplace(std::move(*__that));\n+\t      else\n+\t\tthis->reset();\n+\t    }\n \t  return *this;\n \t}\n       };\n \n-    // For types which are already semiregular, this specialization of the\n-    // semiregular wrapper stores the object directly without going through\n+    // For types which are already copyable, this specialization of the\n+    // copyable wrapper stores the object directly without going through\n     // std::optional.  It provides just the subset of the primary template's\n     // API that we currently use.\n-    template<__boxable _Tp> requires semiregular<_Tp>\n+    template<__boxable _Tp>\n+      requires copyable<_Tp> || (is_nothrow_move_constructible_v<_Tp>\n+\t\t\t\t && is_nothrow_copy_constructible_v<_Tp>)\n       struct __box<_Tp>\n       {\n       private:\n \t[[no_unique_address]] _Tp _M_value = _Tp();\n \n       public:\n-\t__box() = default;\n+\t__box() requires default_initializable<_Tp> = default;\n \n \tconstexpr explicit\n \t__box(const _Tp& __t)\n \tnoexcept(is_nothrow_copy_constructible_v<_Tp>)\n-\t: _M_value{__t}\n+\t: _M_value(__t)\n \t{ }\n \n \tconstexpr explicit\n \t__box(_Tp&& __t)\n \tnoexcept(is_nothrow_move_constructible_v<_Tp>)\n-\t: _M_value{std::move(__t)}\n+\t: _M_value(std::move(__t))\n \t{ }\n \n \ttemplate<typename... _Args>\n@@ -166,6 +174,38 @@ namespace ranges\n \t  : _M_value(std::forward<_Args>(__args)...)\n \t  { }\n \n+\t__box(const __box&) = default;\n+\t__box(__box&&) = default;\n+\t__box& operator=(const __box&) requires copyable<_Tp> = default;\n+\t__box& operator=(__box&&) requires copyable<_Tp> = default;\n+\n+\t// When _Tp is nothrow_copy_constructible but not copy_assignable,\n+\t// copy assignment is implemented via destroy-then-copy-construct.\n+\tconstexpr __box&\n+\toperator=(const __box& __that) noexcept\n+\t{\n+\t  static_assert(is_nothrow_copy_constructible_v<_Tp>);\n+\t  if (this != std::__addressof(__that))\n+\t    {\n+\t      _M_value.~_Tp();\n+\t      std::construct_at(std::__addressof(_M_value), *__that);\n+\t    }\n+\t  return *this;\n+\t}\n+\n+\t// Likewise for move assignment.\n+\tconstexpr __box&\n+\toperator=(__box&& __that) noexcept\n+\t{\n+\t  static_assert(is_nothrow_move_constructible_v<_Tp>);\n+\t  if (this != std::__addressof(__that))\n+\t    {\n+\t      _M_value.~_Tp();\n+\t      std::construct_at(std::__addressof(_M_value), std::move(*__that));\n+\t    }\n+\t  return *this;\n+\t}\n+\n \tconstexpr bool\n \thas_value() const noexcept\n \t{ return true; };\n@@ -193,7 +233,7 @@ namespace ranges\n     class single_view : public view_interface<single_view<_Tp>>\n     {\n     public:\n-      single_view() = default;\n+      single_view() requires default_initializable<_Tp> = default;\n \n       constexpr explicit\n       single_view(const _Tp& __t)\n@@ -308,7 +348,7 @@ namespace ranges\n   template<weakly_incrementable _Winc,\n \t   semiregular _Bound = unreachable_sentinel_t>\n     requires std::__detail::__weakly_eq_cmp_with<_Winc, _Bound>\n-      && semiregular<_Winc>\n+      && copyable<_Winc>\n     class iota_view : public view_interface<iota_view<_Winc, _Bound>>\n     {\n     private:\n@@ -337,7 +377,7 @@ namespace ranges\n \tusing value_type = _Winc;\n \tusing difference_type = __detail::__iota_diff_t<_Winc>;\n \n-\t_Iterator() = default;\n+\t_Iterator() requires default_initializable<_Winc> = default;\n \n \tconstexpr explicit\n \t_Iterator(_Winc __value)\n@@ -534,7 +574,7 @@ namespace ranges\n       [[no_unique_address]] _Bound _M_bound = _Bound();\n \n     public:\n-      iota_view() = default;\n+      iota_view() requires default_initializable<_Winc> = default;\n \n       constexpr explicit\n       iota_view(_Winc __value)\n@@ -643,8 +683,6 @@ namespace views\n     : public view_interface<basic_istream_view<_Val, _CharT, _Traits>>\n     {\n     public:\n-      basic_istream_view() = default;\n-\n       constexpr explicit\n       basic_istream_view(basic_istream<_CharT, _Traits>& __stream)\n \t: _M_stream(std::__addressof(__stream))\n@@ -653,8 +691,7 @@ namespace views\n       constexpr auto\n       begin()\n       {\n-\tif (_M_stream != nullptr)\n-\t  *_M_stream >> _M_object;\n+\t*_M_stream >> _M_object;\n \treturn _Iterator{this};\n       }\n \n@@ -663,8 +700,8 @@ namespace views\n       { return default_sentinel; }\n \n     private:\n-      basic_istream<_CharT, _Traits>* _M_stream = nullptr;\n-      _Val _M_object = _Val();\n+      basic_istream<_CharT, _Traits>* _M_stream;\n+      _Val _M_object;\n \n       struct _Iterator\n       {\n@@ -673,8 +710,6 @@ namespace views\n \tusing difference_type = ptrdiff_t;\n \tusing value_type = _Val;\n \n-\t_Iterator() = default;\n-\n \tconstexpr explicit\n \t_Iterator(basic_istream_view* __parent) noexcept\n \t  : _M_parent(__parent)\n@@ -688,7 +723,6 @@ namespace views\n \t_Iterator&\n \toperator++()\n \t{\n-\t  __glibcxx_assert(_M_parent->_M_stream != nullptr);\n \t  *_M_parent->_M_stream >> _M_parent->_M_object;\n \t  return *this;\n \t}\n@@ -699,21 +733,18 @@ namespace views\n \n \t_Val&\n \toperator*() const\n-\t{\n-\t  __glibcxx_assert(_M_parent->_M_stream != nullptr);\n-\t  return _M_parent->_M_object;\n-\t}\n+\t{ return _M_parent->_M_object; }\n \n \tfriend bool\n \toperator==(const _Iterator& __x, default_sentinel_t)\n \t{ return __x._M_at_end(); }\n \n       private:\n-\tbasic_istream_view* _M_parent = nullptr;\n+\tbasic_istream_view* _M_parent;\n \n \tbool\n \t_M_at_end() const\n-\t{ return _M_parent == nullptr || !*_M_parent->_M_stream; }\n+\t{ return !*_M_parent->_M_stream; }\n       };\n \n       friend _Iterator;\n@@ -1017,15 +1048,12 @@ namespace views::__adaptor\n     class ref_view : public view_interface<ref_view<_Range>>\n     {\n     private:\n-      _Range* _M_r = nullptr;\n+      _Range* _M_r;\n \n       static void _S_fun(_Range&); // not defined\n       static void _S_fun(_Range&&) = delete;\n \n     public:\n-      constexpr\n-      ref_view() noexcept = default;\n-\n       template<__detail::__not_same_as<ref_view> _Tp>\n \trequires convertible_to<_Tp, _Range&>\n \t  && requires { _S_fun(declval<_Tp>()); }\n@@ -1205,6 +1233,16 @@ namespace views::__adaptor\n \t  return *this;\n \t}\n \n+\tconstexpr __non_propagating_cache&\n+\toperator=(_Tp __val)\n+\t{\n+\t  this->_M_reset();\n+\t  std::construct_at(std::__addressof(this->_M_payload._M_payload),\n+\t\t\t    std::in_place, std::move(__val));\n+\t  this->_M_payload._M_engaged = true;\n+\t  return *this;\n+\t}\n+\n \tconstexpr _Tp&\n \toperator*() noexcept\n \t{ return this->_M_get(); }\n@@ -1382,7 +1420,7 @@ namespace views::__adaptor\n \tusing value_type = range_value_t<_Vp>;\n \tusing difference_type = range_difference_t<_Vp>;\n \n-\t_Iterator() = default;\n+\t_Iterator() requires default_initializable<_Vp_iter> = default;\n \n \tconstexpr\n \t_Iterator(filter_view* __parent, _Vp_iter __current)\n@@ -1494,7 +1532,9 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      filter_view() = default;\n+      filter_view() requires (default_initializable<_Vp>\n+\t\t\t      && default_initializable<_Pred>)\n+\t= default;\n \n       constexpr\n       filter_view(_Vp __base, _Pred __pred)\n@@ -1643,7 +1683,7 @@ namespace views::__adaptor\n \t    = remove_cvref_t<invoke_result_t<_Fp&, range_reference_t<_Base>>>;\n \t  using difference_type = range_difference_t<_Base>;\n \n-\t  _Iterator() = default;\n+\t  _Iterator() requires default_initializable<_Base_iter> = default;\n \n \t  constexpr\n \t  _Iterator(_Parent* __parent, _Base_iter __current)\n@@ -1858,7 +1898,9 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      transform_view() = default;\n+      transform_view() requires (default_initializable<_Vp>\n+\t\t\t\t && default_initializable<_Fp>)\n+\t= default;\n \n       constexpr\n       transform_view(_Vp __base, _Fp __fun)\n@@ -1993,7 +2035,7 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      take_view() = default;\n+      take_view() requires default_initializable<_Vp> = default;\n \n       constexpr\n       take_view(_Vp base, range_difference_t<_Vp> __count)\n@@ -2177,7 +2219,9 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      take_while_view() = default;\n+      take_while_view() requires (default_initializable<_Vp>\n+\t\t\t\t  && default_initializable<_Pred>)\n+\t= default;\n \n       constexpr\n       take_while_view(_Vp base, _Pred __pred)\n@@ -2265,7 +2309,7 @@ namespace views::__adaptor\n \t\t\t\t      _M_cached_begin;\n \n     public:\n-      drop_view() = default;\n+      drop_view() requires default_initializable<_Vp> = default;\n \n       constexpr\n       drop_view(_Vp __base, range_difference_t<_Vp> __count)\n@@ -2381,7 +2425,9 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      drop_while_view() = default;\n+      drop_while_view() requires (default_initializable<_Vp>\n+\t\t\t\t  && default_initializable<_Pred>)\n+\t= default;\n \n       constexpr\n       drop_while_view(_Vp __base, _Pred __pred)\n@@ -2571,7 +2617,9 @@ namespace views::__adaptor\n \t    = common_type_t<range_difference_t<_Base>,\n \t\t\t    range_difference_t<range_reference_t<_Base>>>;\n \n-\t  _Iterator() = default;\n+\t  _Iterator() requires (default_initializable<_Outer_iter>\n+\t\t\t\t&& default_initializable<_Inner_iter>)\n+\t    = default;\n \n \t  constexpr\n \t  _Iterator(_Parent* __parent, _Outer_iter __outer)\n@@ -2724,7 +2772,7 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      join_view() = default;\n+      join_view() requires default_initializable<_Vp> = default;\n \n       constexpr explicit\n       join_view(_Vp __base)\n@@ -2891,7 +2939,7 @@ namespace views::__adaptor\n \t    if constexpr (forward_range<_Vp>)\n \t      return _M_current;\n \t    else\n-\t      return _M_parent->_M_current;\n+\t      return *_M_parent->_M_current;\n \t  }\n \n \t  constexpr auto&\n@@ -2900,7 +2948,7 @@ namespace views::__adaptor\n \t    if constexpr (forward_range<_Vp>)\n \t      return _M_current;\n \t    else\n-\t      return _M_parent->_M_current;\n+\t      return *_M_parent->_M_current;\n \t  }\n \n \t  _Parent* _M_parent = nullptr;\n@@ -3146,12 +3194,14 @@ namespace views::__adaptor\n       // XXX: _M_current is \"present only if !forward_range<V>\"\n       [[no_unique_address]]\n \t__detail::__maybe_present_t<!forward_range<_Vp>,\n-\t\t\t\t    iterator_t<_Vp>> _M_current;\n+\t  __detail::__non_propagating_cache<iterator_t<_Vp>>> _M_current;\n       _Vp _M_base = _Vp();\n \n \n     public:\n-      split_view() = default;\n+      split_view() requires (default_initializable<_Vp>\n+\t\t\t     && default_initializable<_Pattern>)\n+\t= default;\n \n       constexpr\n       split_view(_Vp __base, _Pattern __pattern)\n@@ -3282,7 +3332,7 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      common_view() = default;\n+      common_view() requires default_initializable<_Vp> = default;\n \n       constexpr explicit\n       common_view(_Vp __r)\n@@ -3413,7 +3463,7 @@ namespace views::__adaptor\n       _Vp _M_base = _Vp();\n \n     public:\n-      reverse_view() = default;\n+      reverse_view() requires default_initializable<_Vp> = default;\n \n       constexpr explicit\n       reverse_view(_Vp __r)\n@@ -3555,7 +3605,7 @@ namespace views::__adaptor\n     class elements_view : public view_interface<elements_view<_Vp, _Nm>>\n     {\n     public:\n-      elements_view() = default;\n+      elements_view() requires default_initializable<_Vp> = default;\n \n       constexpr explicit\n       elements_view(_Vp base)\n@@ -3676,7 +3726,7 @@ namespace views::__adaptor\n \t    = remove_cvref_t<tuple_element_t<_Nm, range_value_t<_Base>>>;\n \t  using difference_type = range_difference_t<_Base>;\n \n-\t  _Iterator() = default;\n+\t  _Iterator() requires default_initializable<iterator_t<_Base>> = default;\n \n \t  constexpr explicit\n \t  _Iterator(iterator_t<_Base> current)"}, {"sha": "63f0a8f6279fde6481b0e143db6248a763159768", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -447,8 +447,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Opt-in to view concept\n     template<typename _ElementType, size_t _Extent>\n       inline constexpr bool\n-\tenable_view<span<_ElementType, _Extent>>\n-\t  = _Extent == 0 || _Extent == dynamic_extent;\n+\tenable_view<span<_ElementType, _Extent>> = true;\n   }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "27bcd32cb607bbc5beee81d5ee88f5d429255aef", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -246,7 +246,7 @@\n #define __cpp_lib_math_constants 201907L\n #define __cpp_lib_polymorphic_allocator 201902L\n #if __cpp_lib_concepts\n-# define __cpp_lib_ranges 201911L\n+# define __cpp_lib_ranges 202106L\n #endif\n #if __cpp_lib_atomic_wait || _GLIBCXX_HAVE_POSIX_SEMAPHORE\n # define __cpp_lib_semaphore 201907L"}, {"sha": "27acd071df19a2d285d36b684937e855d2bec187", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/constexpr.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fconstexpr.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -42,8 +42,7 @@ constexpr bool\n test01()\n {\n   container c;\n-  std::back_insert_iterator<container> iter;\n-  iter = std::back_inserter(c);\n+  std::back_insert_iterator<container> iter = std::back_inserter(c);\n   *iter++ = 1;\n   int i = 2;\n   *iter = i;"}, {"sha": "cff7f6a45242cf484c9fff47ed740bf9570ce9a9", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/constexpr.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fconstexpr.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -42,8 +42,7 @@ constexpr bool\n test01()\n {\n   container c;\n-  std::front_insert_iterator<container> iter;\n-  iter = std::front_inserter(c);\n+  std::front_insert_iterator<container> iter = std::front_inserter(c);\n   *iter++ = 1;\n   int i = 2;\n   *iter = i;"}, {"sha": "e326b01d534f44c36ee5060dc00eb1ea74e3c7bd", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/constexpr.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Fconstexpr.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -51,8 +51,7 @@ constexpr bool\n test01()\n {\n   container c;\n-  std::insert_iterator<container> iter;\n-  iter = std::inserter(c, c.begin());\n+  std::insert_iterator<container> iter = std::inserter(c, c.begin());\n   *iter++ = 1;\n   int i = 2;\n   *iter = i;"}, {"sha": "4edaaa8aebbbc3f30a3e1cd28c5c6dfa1f3f34f4", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/requirements/constexpr.cc", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d08043da935095543172f91f691917bd6379c53/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d08043da935095543172f91f691917bd6379c53/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fconstexpr.cc?ref=7d08043da935095543172f91f691917bd6379c53", "patch": "@@ -1,24 +0,0 @@\n-// Copyright (C) 2019-2021 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-std=gnu++2a\" }\n-// { dg-do compile { target c++2a } }\n-\n-#include <iterator>\n-\n-constexpr std::ostream_iterator<int> iter1;\n-constexpr std::ostream_iterator<int> iter2{};"}, {"sha": "c642b9d22d0d5d8d11e47a5488bd2ea0506cb36f", "filename": "libstdc++-v3/testsuite/std/ranges/97600.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2F97600.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2F97600.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2F97600.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -24,9 +24,8 @@\n #include <ranges>\n \n void\n-test01()\n+test01(std::ranges::basic_istream_view<int, char, std::char_traits<char>> v)\n {\n-  std::ranges::basic_istream_view<int, char, std::char_traits<char>> v;\n   v.begin();\n   static_assert(std::ranges::range<decltype(v)>);\n }"}, {"sha": "fa6d4d56816f250e67527f1d4392408551810e41", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/detail/copyable_box.cc", "status": "renamed", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fcopyable_box.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fcopyable_box.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fcopyable_box.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -82,9 +82,10 @@ test01()\n }\n static_assert(test01());\n \n-template<bool make_semiregular>\n+template<bool make_copyable>\n   struct A {\n-    A() requires make_semiregular;\n+    A(const A&) = default;\n+    A& operator=(const A&) requires make_copyable;\n     A(int, int);\n     A(std::initializer_list<int>) = delete;\n   };\n@@ -93,9 +94,51 @@ void\n test02()\n {\n   // PR libstdc++/100475\n-  static_assert(std::semiregular<A<true>>);\n+  static_assert(std::copyable<A<true>>);\n   __box<A<true>> x2(std::in_place, 0, 0);\n \n-  static_assert(!std::semiregular<A<false>>);\n+  static_assert(!std::copyable<A<false>>);\n   __box<A<false>> x1(std::in_place, 0, 0);\n }\n+\n+constexpr bool\n+test03()\n+{\n+  // Verify correctness of the non-defaulted operator= for the partial\n+  // specialization of __box.\n+  struct B {\n+    constexpr B(int* p) : p(p) { }\n+    constexpr ~B() { ++*p; };\n+    B(const B&) = default;\n+    B& operator=(const B&) = delete;\n+    int* p;\n+  };\n+  static_assert(!std::copyable<B>);\n+  static_assert(std::is_nothrow_copy_constructible_v<B>);\n+  static_assert(sizeof(__box<B>) == sizeof(B));\n+\n+  int m = 0;\n+  __box<B> x(std::in_place, &m);\n+  __glibcxx_assert(m == 0);\n+  x = x;\n+  __glibcxx_assert(m == 0);\n+  x = std::move(x);\n+  __glibcxx_assert(m == 0);\n+\n+  int n = 0;\n+  __box<B> y(std::in_place, &n);\n+  auto z = x;\n+  x = y;\n+  __glibcxx_assert(m == 1);\n+  __glibcxx_assert(n == 0);\n+  __glibcxx_assert(x->p == &n);\n+  __glibcxx_assert(y->p == &n);\n+  y = std::move(z);\n+  __glibcxx_assert(m == 1);\n+  __glibcxx_assert(n == 1);\n+  __glibcxx_assert(y->p == &m);\n+  __glibcxx_assert(z->p == &m);\n+\n+  return true;\n+}\n+static_assert(test03());", "previous_filename": "libstdc++-v3/testsuite/std/ranges/adaptors/detail/semiregular_box.cc"}, {"sha": "df6cde29e4dad500aa6f58d24d01a782cec9765b", "filename": "libstdc++-v3/testsuite/std/ranges/p2325.cc", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2325.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2325.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2325.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -0,0 +1,155 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// P2325R3 \"Views should not be required to be default constructible\"\n+\n+#include <ranges>\n+#include <iterator>\n+#include <span>\n+#include <sstream>\n+#include <vector>\n+#include <testsuite_iterators.h>\n+\n+using namespace std;\n+\n+template<default_initializable T> void f();\n+template<typename T> requires weakly_incrementable<T> || ranges::view<T> void f();\n+\n+void\n+test01()\n+{\n+  // Verify neither std::weakly_incrementable nor ranges::view require\n+  // default_initializable.\n+  f<int>(); // { dg-error \"ambiguous\" }\n+}\n+\n+void\n+test02()\n+{\n+  // Verify these iterators are not default constructible.\n+  static_assert(!default_initializable<insert_iterator<vector<int>>>);\n+  static_assert(!default_initializable<front_insert_iterator<vector<int>>>);\n+  static_assert(!default_initializable<back_insert_iterator<vector<int>>>);\n+  static_assert(!default_initializable<ostream_iterator<int>>);\n+\n+  using iter = ostream_iterator<int>;\n+\n+  // Verify common_iterator is conditionally default constructible.\n+  static_assert(!default_initializable<common_iterator<iter, unreachable_sentinel_t>>);\n+  static_assert(default_initializable<common_iterator<int*, unreachable_sentinel_t>>);\n+\n+  // Verify counted_iterator is conditionally default constructible.\n+  static_assert(!default_initializable<counted_iterator<iter>>);\n+  static_assert(default_initializable<counted_iterator<int*>>);\n+}\n+\n+void\n+test03()\n+{\n+  using iter = ostream_iterator<int>;\n+\n+  // Verify iota_view is conditionally default constructible.\n+  static_assert(!default_initializable<ranges::iota_view<iter>>);\n+  static_assert(!default_initializable<decltype(declval<ranges::iota_view<iter>>().begin())>);\n+  static_assert(default_initializable<ranges::iota_view<int>>);\n+  static_assert(default_initializable<decltype(declval<ranges::iota_view<int>>().begin())>);\n+\n+  // Verify subrange is conditionally default constructible.\n+  static_assert(!default_initializable<ranges::subrange<iter, unreachable_sentinel_t>>);\n+  static_assert(default_initializable<ranges::subrange<int*, unreachable_sentinel_t>>);\n+\n+  // Verify single_view is conditionally default constructible.\n+  static_assert(!default_initializable<ranges::single_view<iter>>);\n+  static_assert(default_initializable<ranges::single_view<int*>>);\n+}\n+\n+void\n+test04()\n+{\n+  // Verify basic_istream_view is not default constructible.\n+  using type = ranges::basic_istream_view<int, char, char_traits<char>>;\n+  static_assert(!default_initializable<type>);\n+  static_assert(!default_initializable<decltype(declval<type>().begin())>);\n+}\n+\n+void\n+test05()\n+{\n+  // Verify ref_view is not default constructible.\n+  static_assert(!default_initializable<ranges::ref_view<int[5]>>);\n+}\n+\n+template<auto adaptor>\n+void\n+test06()\n+{\n+  auto f1 = [] (auto) { return true; };\n+  auto f2 = [i=0] (auto) { return true; };\n+  static_assert(default_initializable<decltype(views::single(0) | adaptor(f1))>);\n+  static_assert(!default_initializable<decltype(views::single(0) | adaptor(f2))>);\n+\n+  struct S { S() = delete; };\n+  static_assert(!default_initializable<decltype(views::single(declval<S>()) | adaptor(f1))>);\n+  static_assert(!default_initializable<decltype(views::single(declval<S>()) | adaptor(f2))>);\n+}\n+\n+// Verify filter_view, transform_view, take_while_view and drop_while_view are\n+// conditionally default constructible.\n+template void test06<views::filter>();\n+template void test06<views::transform>();\n+template void test06<views::take_while>();\n+template void test06<views::drop_while>();\n+\n+void\n+test07()\n+{\n+  // Verify join_view is conditionally default constructible.\n+  struct S { S() = delete; };\n+  using type1 = ranges::join_view<ranges::single_view<ranges::single_view<S>>>;\n+  static_assert(!default_initializable<type1>);\n+  using type2 = ranges::join_view<ranges::single_view<ranges::single_view<int>>>;\n+  static_assert(default_initializable<type2>);\n+}\n+\n+void\n+test08()\n+{\n+  // Verify split_view is conditionally default constructible.\n+  using type1 = ranges::split_view<ranges::ref_view<int[2]>, ranges::single_view<int>>;\n+  static_assert(!default_initializable<type1>);\n+  using type2 = ranges::split_view<ranges::single_view<int>, ranges::ref_view<int[2]>>;\n+  static_assert(!default_initializable<type2>);\n+  using type3 = ranges::split_view<ranges::ref_view<int[2]>, ranges::ref_view<int[2]>>;\n+  static_assert(!default_initializable<type3>);\n+  using type4 = ranges::split_view<ranges::single_view<int>, ranges::single_view<int>>;\n+  static_assert(default_initializable<type4>);\n+}\n+\n+void\n+test09()\n+{\n+  // Verify common_view is conditionally default constructible.\n+  using type1 = ranges::common_view<ranges::iota_view<ostream_iterator<int>>>;\n+  static_assert(!default_initializable<type1>);\n+  using type2 = ranges::common_view<ranges::iota_view<int*>>;\n+  static_assert(default_initializable<type2>);\n+}\n+\n+void\n+test10()\n+{\n+  // Verify reverse_view is conditionally default constructible.\n+  using type1 = ranges::reverse_view<ranges::ref_view<int[2]>>;\n+  static_assert(!default_initializable<type1>);\n+  using type2 = ranges::reverse_view<ranges::single_view<int>>;\n+  static_assert(default_initializable<type2>);\n+}\n+\n+void\n+test11()\n+{\n+  // Verify elements_view is conditionally default constructible.\n+  using type1 = ranges::elements_view<ranges::ref_view<pair<int,int>[2]>, 0>;\n+  static_assert(!default_initializable<type1>);\n+  using type2 = ranges::elements_view<ranges::single_view<pair<int,int>>, 0>;\n+  static_assert(default_initializable<type2>);\n+}"}, {"sha": "f1d8e1037159620e164e255270136d61db5e0131", "filename": "libstdc++-v3/testsuite/std/ranges/single_view.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -96,11 +96,26 @@ test05()\n   static_assert(noexcept(cs.empty())); // view_interface::empty()\n }\n \n+void\n+test06()\n+{\n+  // PR libstdc++/100475 comment #7\n+  struct S {\n+    S() = default;\n+    S(std::initializer_list<S>) = delete;\n+    S(const S&) {}\n+  };\n+  S obj;\n+  auto x = std::views::single(obj);\n+  auto y = std::views::single(std::move(obj));\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n   test05();\n+  test06();\n }"}, {"sha": "dd8258220ed6b6c11063a568aa24fd4c6669999a", "filename": "libstdc++-v3/testsuite/std/ranges/view.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc?ref=4b4f5666b4c2f3aab2a9f3d53d394e390b9b682d", "patch": "@@ -31,7 +31,7 @@\n \n static_assert(std::ranges::view<std::span<int>>);\n static_assert(std::ranges::view<std::span<int, 0>>);\n-static_assert(!std::ranges::view<std::span<int, 1>>);\n+static_assert(std::ranges::view<std::span<int, 1>>); // Changed with P2325R3\n static_assert(std::ranges::view<std::string_view>);\n static_assert(std::ranges::view<std::experimental::string_view>);\n "}]}