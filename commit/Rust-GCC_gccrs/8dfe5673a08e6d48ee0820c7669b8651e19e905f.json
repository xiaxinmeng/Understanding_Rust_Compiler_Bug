{"sha": "8dfe5673a08e6d48ee0820c7669b8651e19e905f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmZTU2NzNhMDhlNmQ0OGVlMDgyMGM3NjY5Yjg2NTFlMTllOTA1Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-14T21:02:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-14T21:02:23Z"}, "message": "({function,ix86_expand}_prologue): Use __alloca to allocate stack if\ndesired and beyond CHECK_STACK_LIMIT in size.\n\nFrom-SVN: r12709", "tree": {"sha": "1cd425566dda133f77983ee3cbc86690530910c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cd425566dda133f77983ee3cbc86690530910c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dfe5673a08e6d48ee0820c7669b8651e19e905f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfe5673a08e6d48ee0820c7669b8651e19e905f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dfe5673a08e6d48ee0820c7669b8651e19e905f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfe5673a08e6d48ee0820c7669b8651e19e905f/comments", "author": null, "committer": null, "parents": [{"sha": "578b58f55e206934fd5df07a8840fb38652398b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/578b58f55e206934fd5df07a8840fb38652398b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/578b58f55e206934fd5df07a8840fb38652398b5"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "af2562bcef433d633e780ef539dc2879e1bf064a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfe5673a08e6d48ee0820c7669b8651e19e905f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfe5673a08e6d48ee0820c7669b8651e19e905f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8dfe5673a08e6d48ee0820c7669b8651e19e905f", "patch": "@@ -45,6 +45,10 @@ Boston, MA 02111-1307, USA. */\n    even if the conditional was untrue.  */\n #endif\n \n+#ifndef CHECK_STACK_LIMIT\n+#define CHECK_STACK_LIMIT -1\n+#endif\n+\n enum reg_mem\t\t\t/* Type of an operand for ix86_{binary,unary}_operator_ok */\n {\n   reg_p,\n@@ -1742,14 +1746,25 @@ function_prologue (file, size)\n   xops[0] = stack_pointer_rtx;\n   xops[1] = frame_pointer_rtx;\n   xops[2] = GEN_INT (tsize);\n+\n   if (frame_pointer_needed)\n     {\n       output_asm_insn (\"push%L1 %1\", xops); \n       output_asm_insn (AS2 (mov%L0,%0,%1), xops); \n     }\n \n-  if (tsize)\n+  if (tsize == 0)\n+    ;\n+  else if (! TARGET_STACK_PROBE || tsize < CHECK_STACK_LIMIT)\n     output_asm_insn (AS2 (sub%L0,%2,%0), xops);\n+  else \n+    {\n+      xops[3] = gen_rtx (REG, SImode, 0);\n+      output_asm_insn (AS2 (mov%L0,%2,%3), xops);\n+      \n+      xops[3] = gen_rtx (SYMBOL_REF, Pmode, \"_alloca\");\n+      output_asm_insn (AS1 (call,%P3), xops);\n+    }\n \n   /* Note If use enter it is NOT reversed args.\n      This one is not reversed from intel!!\n@@ -1820,12 +1835,19 @@ ix86_expand_prologue ()\n       emit_move_insn (xops[1], xops[0]);\n     }\n \n-  if (tsize)\n-    emit_insn (gen_rtx (SET, SImode,\n-\t\t\t  xops[0],\n-\t\t\t  gen_rtx (MINUS, SImode,\n-\t\t\t\t   xops[0],\n-\t\t\t\t   xops[2])));\n+  if (tsize == 0)\n+    ;\n+  else if (! TARGET_STACK_PROBE || tsize < CHECK_STACK_LIMIT)\n+    emit_insn (gen_subsi3 (xops[0], xops[0], xops[2]));\n+  else \n+    {\n+      xops[3] = gen_rtx (REG, SImode, 0);\n+      emit_move_insn (xops[3], xops[2]);\n+      xops[3] = gen_rtx (MEM, FUNCTION_MODE,\n+\t\t\t gen_rtx (SYMBOL_REF, Pmode, \"_alloca\"));\n+      emit_call_insn (gen_rtx (CALL, VOIDmode,\n+\t\t\t       xops[3], const0_rtx));\n+    }\n \n   /* Note If use enter it is NOT reversed args.\n      This one is not reversed from intel!!"}]}