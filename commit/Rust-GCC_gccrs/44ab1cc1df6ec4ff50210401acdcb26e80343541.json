{"sha": "44ab1cc1df6ec4ff50210401acdcb26e80343541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhYjFjYzFkZjZlYzRmZjUwMjEwNDAxYWNkY2IyNmU4MDM0MzU0MQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-02-22T15:00:53Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-02-25T17:16:40Z"}, "message": "arm: force use of r4 for __gnu_cmse_nonsecure_call when !FPCXT [PR99271]\n\nCommit r10-6017 relaxed the constraint on thumb2 calls to\n__gnu_cmse_nonsecure_call to allow any register for the call address.\nAlthough the initial code expansion continues to use r4 with the FPCXT\nextension is not enabled, the change was unsafe because subsequent\noptimizations could use the additional freedom to change which\nregister was being used.\n\nTo fix this we need to split the output patterns in the machine\ndescription to use distinct recognizers: one with the additional\nfreedom when FPCXT is enabled an another that retains the original\nrestrictions when the extension is not available.\n\ngcc:\n\tPR target/99271\n\t* config/arm/thumb2.md (nonsecure_call_reg_thumb2_fpcxt): New pattern.\n\t(nonsecure_call_value_reg_thumb2_fpcxt): Likewise.\n\t(nonsecure_call_reg_thumb2): Restrict to using r4 for the callee\n\taddress and disable when the FPCXT is not available.\n\t(nonsecure_call_value_reg_thumb2): Likewise.\n\ngcc/testsuite:\n\t* gcc.target/arm/cmse/cmse-18.c: New test.", "tree": {"sha": "78b7f8b8437abe8e8b4fa1f082e37fd71dd74657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78b7f8b8437abe8e8b4fa1f082e37fd71dd74657"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44ab1cc1df6ec4ff50210401acdcb26e80343541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ab1cc1df6ec4ff50210401acdcb26e80343541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ab1cc1df6ec4ff50210401acdcb26e80343541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ab1cc1df6ec4ff50210401acdcb26e80343541/comments", "author": null, "committer": null, "parents": [{"sha": "9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9592deabf3c6b9e23aa7a5b84724672cb7c8d560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9592deabf3c6b9e23aa7a5b84724672cb7c8d560"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "5772f4d0b76d23b48804f1dead36734a4ebc82e5", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ab1cc1df6ec4ff50210401acdcb26e80343541/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ab1cc1df6ec4ff50210401acdcb26e80343541/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=44ab1cc1df6ec4ff50210401acdcb26e80343541", "patch": "@@ -536,19 +536,26 @@\n   [(set_attr \"type\" \"call\")]\n )\n \n-(define_insn \"*nonsecure_call_reg_thumb2\"\n+(define_insn \"*nonsecure_call_reg_thumb2_fpcxt\"\n   [(call (unspec:SI [(mem:SI (match_operand:SI 0 \"s_register_operand\" \"l*r\"))]\n \t\t    UNSPEC_NONSECURE_MEM)\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB2 && use_cmse\"\n-  {\n-    if (TARGET_HAVE_FPCXT_CMSE)\n-      return \"blxns\\\\t%0\";\n-    else\n-      return \"bl\\\\t__gnu_cmse_nonsecure_call\";\n-  }\n+  \"TARGET_THUMB2 && use_cmse && TARGET_HAVE_FPCXT_CMSE\"\n+  \"blxns\\\\t%0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"call\")]\n+)\n+\n+(define_insn \"*nonsecure_call_reg_thumb2\"\n+  [(call (unspec:SI [(mem:SI (reg:SI R4_REGNUM))]\n+\t\t    UNSPEC_NONSECURE_MEM)\n+\t (match_operand 0 \"\" \"\"))\n+   (use (match_operand 1 \"\" \"\"))\n+   (clobber (reg:SI LR_REGNUM))]\n+  \"TARGET_THUMB2 && use_cmse && !TARGET_HAVE_FPCXT_CMSE\"\n+  \"bl\\\\t__gnu_cmse_nonsecure_call\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"call\")]\n )\n@@ -564,21 +571,29 @@\n   [(set_attr \"type\" \"call\")]\n )\n \n-(define_insn \"*nonsecure_call_value_reg_thumb2\"\n+(define_insn \"*nonsecure_call_value_reg_thumb2_fpcxt\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call\n \t (unspec:SI [(mem:SI (match_operand:SI 1 \"register_operand\" \"l*r\"))]\n \t\t    UNSPEC_NONSECURE_MEM)\n \t (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB2 && use_cmse\"\n-  {\n-    if (TARGET_HAVE_FPCXT_CMSE)\n-      return \"blxns\\\\t%1\";\n-    else\n-      return \"bl\\\\t__gnu_cmse_nonsecure_call\";\n-  }\n+  \"TARGET_THUMB2 && use_cmse && TARGET_HAVE_FPCXT_CMSE\"\n+  \"blxns\\\\t%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"call\")]\n+)\n+\n+(define_insn \"*nonsecure_call_value_reg_thumb2\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call\n+\t (unspec:SI [(mem:SI (reg:SI R4_REGNUM))] UNSPEC_NONSECURE_MEM)\n+\t (match_operand 1 \"\" \"\")))\n+   (use (match_operand 2 \"\" \"\"))\n+   (clobber (reg:SI LR_REGNUM))]\n+  \"TARGET_THUMB2 && use_cmse && !TARGET_HAVE_FPCXT_CMSE\"\n+  \"bl\\\\t__gnu_cmse_nonsecure_call\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"call\")]\n )"}, {"sha": "e1ff09257b7900982f49117d4cfc16f3bd79d76c", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-18.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ab1cc1df6ec4ff50210401acdcb26e80343541/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ab1cc1df6ec4ff50210401acdcb26e80343541/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-18.c?ref=44ab1cc1df6ec4ff50210401acdcb26e80343541", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -fdump-rtl-final-slim\" } */\n+\n+typedef void (*f)(int) __attribute__((cmse_nonsecure_call));\n+\n+void bar(f func, int a)\n+{\n+  func(a);\n+}\n+\n+/* { dg-final { scan-rtl-dump \"call unspec\\\\\\[\\\\\\[r4:SI\\\\\\]\\\\\\]\" \"final\" } } */"}]}