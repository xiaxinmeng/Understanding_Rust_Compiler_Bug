{"sha": "743ca87fe8fdad0d8246c7f91a3b374be74e398c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzY2E4N2ZlOGZkYWQwZDgyNDZjN2Y5MWEzYjM3NGJlNzRlMzk4Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2012-08-07T23:03:55Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-08-07T23:03:55Z"}, "message": "re PR libstdc++/54005 (Use __atomic_always_lock_free in libstdc++ is_lock_free instead of __atomic_is_lock_free)\n\n2012-08-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/54005\n\t* include/std/atomic: Use __atomic_always_lock_free.\n\t* include/bits/atomic_base.h: Same.\n\nFrom-SVN: r190216", "tree": {"sha": "cb102054226eee5797ea4d62ee2fe29748ec495c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb102054226eee5797ea4d62ee2fe29748ec495c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/743ca87fe8fdad0d8246c7f91a3b374be74e398c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743ca87fe8fdad0d8246c7f91a3b374be74e398c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743ca87fe8fdad0d8246c7f91a3b374be74e398c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743ca87fe8fdad0d8246c7f91a3b374be74e398c/comments", "author": null, "committer": null, "parents": [{"sha": "f8923f7ead7d79efb6971dfb645d137ed8c2c649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8923f7ead7d79efb6971dfb645d137ed8c2c649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8923f7ead7d79efb6971dfb645d137ed8c2c649"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "53fb00fc36d9474394931557be352feda13e7297", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743ca87fe8fdad0d8246c7f91a3b374be74e398c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743ca87fe8fdad0d8246c7f91a3b374be74e398c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=743ca87fe8fdad0d8246c7f91a3b374be74e398c", "patch": "@@ -1,3 +1,9 @@\n+2012-08-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/54005\n+\t* include/std/atomic: Use __atomic_always_lock_free.\n+\t* include/bits/atomic_base.h: Same.\n+\n 2012-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/decimal/mixed-mode-cmp_neg.cc: Add test variable; minor"}, {"sha": "598e1f1e9457314fd9f83583d41e423bf03d6934", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743ca87fe8fdad0d8246c7f91a3b374be74e398c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743ca87fe8fdad0d8246c7f91a3b374be74e398c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=743ca87fe8fdad0d8246c7f91a3b374be74e398c", "patch": "@@ -422,11 +422,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free (sizeof (_M_i), &_M_i); }\n+      { return __atomic_always_lock_free(sizeof(_M_i), &_M_i); }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free (sizeof (_M_i), &_M_i); }\n+      { return __atomic_always_lock_free(sizeof(_M_i), &_M_i); }\n \n       void\n       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept\n@@ -716,11 +716,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(_M_type_size(1), &_M_p); }\n+      { return __atomic_always_lock_free(_M_type_size(1), &_M_p); }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(_M_type_size(1), &_M_p); }\n+      { return __atomic_always_lock_free(_M_type_size(1), &_M_p); }\n \n       void\n       store(__pointer_type __p,"}, {"sha": "b5ca60621e5f9fd1238ef6bd69e24b0dfa838f08", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743ca87fe8fdad0d8246c7f91a3b374be74e398c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743ca87fe8fdad0d8246c7f91a3b374be74e398c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=743ca87fe8fdad0d8246c7f91a3b374be74e398c", "patch": "@@ -184,11 +184,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), &_M_i); }\n+      { return __atomic_always_lock_free(sizeof(_M_i), &_M_i); }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), &_M_i); }\n+      { return __atomic_always_lock_free(sizeof(_M_i), &_M_i); }\n \n       void\n       store(_Tp __i, memory_order _m = memory_order_seq_cst) noexcept"}]}