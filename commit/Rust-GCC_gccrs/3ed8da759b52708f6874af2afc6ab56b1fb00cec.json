{"sha": "3ed8da759b52708f6874af2afc6ab56b1fb00cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkOGRhNzU5YjUyNzA4ZjY4NzRhZjJhZmM2YWI1NmIxZmIwMGNlYw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-07-25T02:05:32Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-08-17T11:00:40Z"}, "message": "don't access cfun in dump_function_to_file\n\ndump_function_to_file takes the function to dump as a parameter, and\nparts of it use the local fun variable where cfun would be used\nelsewhere.  Others use cfun, presumably in error.  Fixed to use fun\nuniformly.  Added a few more tests for non-NULL fun before\ndereferencing it.\n\n\nfor  gcc/ChangeLog\n\n\t* tree-cfg.c (dump_function_to_file): Use fun, not cfun.", "tree": {"sha": "17171dc4c83202bf9eb92a463039e2aae9e26d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17171dc4c83202bf9eb92a463039e2aae9e26d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ed8da759b52708f6874af2afc6ab56b1fb00cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed8da759b52708f6874af2afc6ab56b1fb00cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed8da759b52708f6874af2afc6ab56b1fb00cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed8da759b52708f6874af2afc6ab56b1fb00cec/comments", "author": null, "committer": null, "parents": [{"sha": "d1819df86fbe42125cccb2fc2959a0bf51e524d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1819df86fbe42125cccb2fc2959a0bf51e524d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1819df86fbe42125cccb2fc2959a0bf51e524d6"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "61b53913e0b30fe76d6eadff304d8c32e80d23ad", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8da759b52708f6874af2afc6ab56b1fb00cec/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8da759b52708f6874af2afc6ab56b1fb00cec/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3ed8da759b52708f6874af2afc6ab56b1fb00cec", "patch": "@@ -8075,9 +8075,9 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n \t       : (fun->curr_properties & PROP_cfg) ? \"cfg\"\n \t       : \"\");\n \n-      if (cfun->cfg)\n+      if (fun && fun->cfg)\n \t{\n-\t  basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n+\t  basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (fun);\n \t  if (bb->count.initialized_p ())\n \t    fprintf (file, \",%s(%\" PRIu64 \")\",\n \t\t     profile_quality_as_string (bb->count.quality ()),\n@@ -8163,8 +8163,8 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n \n       tree name;\n \n-      if (gimple_in_ssa_p (cfun))\n-\tFOR_EACH_SSA_NAME (ix, name, cfun)\n+      if (gimple_in_ssa_p (fun))\n+\tFOR_EACH_SSA_NAME (ix, name, fun)\n \t  {\n \t    if (!SSA_NAME_VAR (name)\n \t\t/* SSA name with decls without a name still get\n@@ -8200,7 +8200,7 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n \n       fprintf (file, \"}\\n\");\n     }\n-  else if (fun->curr_properties & PROP_gimple_any)\n+  else if (fun && (fun->curr_properties & PROP_gimple_any))\n     {\n       /* The function is now in GIMPLE form but the CFG has not been\n \t built yet.  Emit the single sequence of GIMPLE statements"}]}