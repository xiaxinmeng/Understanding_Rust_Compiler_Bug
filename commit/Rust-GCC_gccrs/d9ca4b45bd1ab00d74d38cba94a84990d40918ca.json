{"sha": "d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "node_id": "C_kwDOANBUbNoAKGQ5Y2E0YjQ1YmQxYWIwMGQ3NGQzOGNiYTk0YTg0OTkwZDQwOTE4Y2E", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-25T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-25T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "b02aecd8f341250099aceaea7811fa35c0614c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b02aecd8f341250099aceaea7811fa35c0614c33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/comments", "author": null, "committer": null, "parents": [{"sha": "16e85390507ea92331c9052393b591202007f5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e85390507ea92331c9052393b591202007f5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e85390507ea92331c9052393b591202007f5ab"}], "stats": {"total": 263, "additions": 262, "deletions": 1}, "files": [{"sha": "045a176b8410b9d26db33e19b777a9f8d7cf54d4", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1,3 +1,10 @@\n+2021-11-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* download_prerequisites: Update to gmp-6.2.1, mpfr-4.1.0,\n+\tmpc-1.2.1 and isl-0.24.\n+\t* prerequisites.md5: Update hash.\n+\t* prerequisites.sha512: Likewise.\n+\n 2021-11-23  Martin Liska  <mliska@suse.cz>\n \n \t* filter-clang-warnings.py: Filter -Wc++20-extensions as it does"}, {"sha": "6e08b0bee02c9f80784ecbcb7a48ccad80eb021c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1,3 +1,138 @@\n+2021-11-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (implicit_eaf_flags_for_edge_and_arg): Break out from...\n+\t(modref_merge_call_site_flags): ... here.\n+\t(ipa_merge_modref_summary_after_inlining): Use it.\n+\n+2021-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* cfgloop.c (verify_loop_structure): Reduce scope of\n+\t'class loop *loop' variable.\n+\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n+\t* loop-init.c (fix_loop_structure): Likewise.\n+\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n+\t* predict.c (predict_loops): Likewise.\n+\t* tree-loop-distribution.c (loop_distribution::execute): Likewise.\n+\t* tree-vectorizer.c (pass_vectorize::execute): Likewise.\n+\n+2021-11-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103231\n+\t* gimple-range.cc (gimple_ranger::gimple_ranger): Create stmt stack.\n+\t(gimple_ranger::gimple_ranger): Delete stmt stack.\n+\t(gimple_ranger::range_of_stmt): Process depenedencies if they have no\n+\tglobal cache entry.\n+\t(gimple_ranger::prefill_name): New.\n+\t(gimple_ranger::prefill_stmt_dependencies): New.\n+\t* gimple-range.h (class gimple_ranger): Add prototypes.\n+\n+2021-11-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::get_global_range): Always\n+\treturn a range, return if it came from the cache or not.\n+\t(get_non_stale_global_range): Rename to get_global_range, and return\n+\tthe temporal state in a flag.\n+\t* gimple-range-cache.h (get_non_stale_global_range): Rename and adjust.\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): No need to query\n+\tget_global_range.\n+\t(gimple_ranger::range_of_stmt): Adjust for global cache temporal state\n+\treturned in a flag.\n+\n+2021-11-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::range_on_edge): Call trailer when\n+\ta constant is encountered to terminate the trace.\n+\n+2021-11-24  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\tPR middle-end/103059\n+\t* reload.c (find_reloads_address_1): Also accept the ASHIFT form\n+\tof indexed addressing.\n+\t(find_reloads): Adjust accordingly.\n+\n+2021-11-24  Richard Biener  <rguenther@suse.de>\n+\t    Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/103168\n+\t* ipa-modref.h (struct modref_summary): Add load_accesses.\n+\t* ipa-modref.c (modref_summary::finalize): Initialize load_accesses.\n+\t* tree-ssa-sccvn.c (visit_reference_op_call): Use modref\n+\tinfo to walk the virtual use->def chain to CSE const/pure\n+\tfunction calls possibly reading from memory.\n+\n+2021-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/103244\n+\t* gimplify.c (gimplify_adjust_omp_clauses): Restore previous\n+\tOpenACC behavior.\n+\n+2021-11-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103193\n+\t* match.pd: Avoid canonicalizing (le/ge @0 @0) to (eq @0 @0)\n+\twith NaNs and -ftrapping-math.\n+\n+2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/103384\n+\t* omp-general.c (omp_context_selector_matches): For ACCEL_COMPILER,\n+\treturn 0 for kind(host) and continue for kind(nohost).\n+\n+2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/103365\n+\t* attribs.h (lookup_attribute): Allow attr_name to start with\n+\tunderscore, as long as canonicalize_attr_name returns false.\n+\t(lookup_attribute_by_prefix): Don't call get_attribute_name twice.\n+\t* attribs.c (extract_attribute_substring): Reimplement using\n+\tcanonicalize_attr_name.\n+\t(register_scoped_attribute): Change gcc_assert into\n+\tgcc_checking_assert, verify !canonicalize_attr_name rather than\n+\tthat str.str doesn't start with '_'.\n+\n+2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103376\n+\t* gimple-ssa-store-merging.c (perform_symbolic_merge): Add CODE\n+\targument.  If CODE is not BIT_IOR_EXPR, ensure that one of masked1\n+\tor masked2 is 0.\n+\t(find_bswap_or_nop_1, find_bswap_or_nop,\n+\timm_store_chain_info::try_coalesce_bswap): Adjust\n+\tperform_symbolic_merge callers.\n+\n+2021-11-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-ivopts.c (find_givs): Take loop body as\n+\targument instead of re-computing it.\n+\t(find_interesting_uses): Likewise.\n+\t(find_induction_variables): Pass through loop body.\n+\t(tree_ssa_iv_optimize_loop): Pass down loop body.\n+\n+2021-11-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-ssa-phiopt.c (spaceship_replacement): Handle new canonical\n+\tcodegen.\n+\n+2021-11-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree.c (bitmask_inv_cst_vector_p): New.\n+\t* tree.h (bitmask_inv_cst_vector_p): New.\n+\t* match.pd: Use it in new bitmask compare pattern.\n+\n+2021-11-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* timevar.h (class auto_cond_timevar): New.\n+\n+2021-11-24  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR tree-optimization/103194\n+\t* match.pd (gimple_nop_atomic_bit_test_and_p): Extended to\n+\tmatch truncation.\n+\t* tree-ssa-ccp.c (gimple_nop_convert): Declare.\n+\t(optimize_atomic_bit_test_and): Enhance\n+\toptimize_atomic_bit_test_and to handle truncation.\n+\n 2021-11-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/88232"}, {"sha": "f9671d2b00c4032bc29be7d8fb46edead9bac12a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1 +1 @@\n-20211124\n+20211125"}, {"sha": "663f36ec97adb25e542eaf1cc332596f2268f71d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1,3 +1,26 @@\n+2021-11-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103347\n+\t* cp-tree.h (struct cp_declarator): Add a location_t member.\n+\t(maybe_warn_cpp0x): Add a location_t parameter with a default argument.\n+\t(loc_or_input_loc): New.\n+\t* decl.c (grokdeclarator): Use loc_or_input_loc.  Pass init_loc down\n+\tto maybe_warn_cpp0x.\n+\t* error.c (maybe_warn_cpp0x): Add a location_t parameter.  Use it.\n+\t* parser.c (make_declarator): Initialize init_loc.\n+\t(cp_parser_member_declaration): Set init_loc.\n+\t(cp_parser_condition): Likewise.\n+\t(cp_parser_init_declarator): Likewise.\n+\t(cp_parser_parameter_declaration): Likewise.\n+\n+2021-11-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c\n+\t* decl.c\n+\t* name-lookup.c:\n+\tUse auto_cond_timevar instead of timevar_cond_start/stop.\n+\tRemove wrapper functions.\n+\n 2021-11-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/96507"}, {"sha": "f5a836ac62cee59d4c22dabf85eaa7b4b11398ae", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1,3 +1,7 @@\n+2021-11-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* jit-playback.c (function): Initialize m_blocks vector.\n+\n 2021-11-20  Antoni Boucher  <bouanto@zoho.com>\n \n \tPR target/96889"}, {"sha": "17f06814b654da90895039c5a9d601f3435142de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1,3 +1,78 @@\n+2021-11-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.c-torture/execute/pr103405.c: New test.\n+\n+2021-11-24  Richard Biener  <rguenther@suse.de>\n+\t    Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/103168\n+\t* g++.dg/tree-ssa/pr103168.C: New testcase.\n+\n+2021-11-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/103244\n+\t* c-c++-common/goacc/combined-reduction.c: Revert/expect previous\n+\tOpenACC behavior.\n+\t* c-c++-common/goacc/firstprivate-mappings-1.c: Likewise.\n+\t* c-c++-common/goacc/mdc-1.c: Likewise.\n+\t* g++.dg/goacc/firstprivate-mappings-1.C: Likewise.\n+\n+2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/103365\n+\t* c-c++-common/Wno-attributes-1.c: Require effective target\n+\tc || c++11 and drop dg-additional-options.\n+\t* c-c++-common/Wno-attributes-2.c: Likewise.\n+\t* c-c++-common/Wno-attributes-4.c: New test.\n+\t* c-c++-common/Wno-attributes-5.c: New test.\n+\n+2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103376\n+\t* gcc.c-torture/execute/pr103376.c: New test.\n+\n+2021-11-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/bic-bitmask-10.c: New test.\n+\t* gcc.dg/bic-bitmask-11.c: New test.\n+\t* gcc.dg/bic-bitmask-12.c: New test.\n+\t* gcc.dg/bic-bitmask-13.c: New test.\n+\t* gcc.dg/bic-bitmask-14.c: New test.\n+\t* gcc.dg/bic-bitmask-15.c: New test.\n+\t* gcc.dg/bic-bitmask-16.c: New test.\n+\t* gcc.dg/bic-bitmask-17.c: New test.\n+\t* gcc.dg/bic-bitmask-18.c: New test.\n+\t* gcc.dg/bic-bitmask-19.c: New test.\n+\t* gcc.dg/bic-bitmask-2.c: New test.\n+\t* gcc.dg/bic-bitmask-20.c: New test.\n+\t* gcc.dg/bic-bitmask-21.c: New test.\n+\t* gcc.dg/bic-bitmask-22.c: New test.\n+\t* gcc.dg/bic-bitmask-23.c: New test.\n+\t* gcc.dg/bic-bitmask-3.c: New test.\n+\t* gcc.dg/bic-bitmask-4.c: New test.\n+\t* gcc.dg/bic-bitmask-5.c: New test.\n+\t* gcc.dg/bic-bitmask-6.c: New test.\n+\t* gcc.dg/bic-bitmask-7.c: New test.\n+\t* gcc.dg/bic-bitmask-8.c: New test.\n+\t* gcc.dg/bic-bitmask-9.c: New test.\n+\t* gcc.dg/bic-bitmask.h: New test.\n+\t* gcc.target/aarch64/bic-bitmask-1.c: New test.\n+\n+2021-11-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103347\n+\t* g++.dg/cpp0x/nsdmi-warn1.C: New test.\n+\t* g++.dg/cpp0x/nsdmi-warn1.h: New file.\n+\n+2021-11-24  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/pr103194-2.c: New test.\n+\t* gcc.target/i386/pr103194-3.c: New test.\n+\t* gcc.target/i386/pr103194-4.c: New test.\n+\t* gcc.target/i386/pr103194-5.c: New test.\n+\t* gcc.target/i386/pr103194.c: New test.\n+\n 2021-11-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/96507"}, {"sha": "2c2d77469a70b4f400dbaf34bce57f564d328d7d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1,3 +1,8 @@\n+2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/103384\n+\t* testsuite/libgomp.c/declare-variant-2.c: New test.\n+\n 2021-11-18  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* alloc.c (gomp_aligned_alloc): Fix typo."}, {"sha": "9a38924d66371ad8b7f663656dee20682bc39c78", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ca4b45bd1ab00d74d38cba94a84990d40918ca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9ca4b45bd1ab00d74d38cba94a84990d40918ca", "patch": "@@ -1,3 +1,15 @@\n+2021-11-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/libstdc++-prettyprinters/80276.cc: Add xfail for\n+\tdebug mode.\n+\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Likewise.\n+\n+2021-11-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp: Rename effective target keywords\n+\tto avoid dashes in the name.\n+\t* testsuite/*: Update effective targe keywords.\n+\n 2021-11-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/103086"}]}