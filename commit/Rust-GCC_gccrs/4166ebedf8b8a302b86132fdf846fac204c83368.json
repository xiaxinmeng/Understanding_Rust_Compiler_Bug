{"sha": "4166ebedf8b8a302b86132fdf846fac204c83368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2NmViZWRmOGI4YTMwMmI4NjEzMmZkZjg0NmZhYzIwNGM4MzM2OA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-28T08:33:04Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-28T22:43:17Z"}, "message": "[RS6000] Don't be too clever with dg-do run and dg-do compile\n\nOtherwise some versions of dejagnu go ahead and run the vsx tests\nbelow when they should not.  To best cope with older dejagnu, put\n\"run\" before \"compile\", the idea being that if the second dg-do always\nwins then that won't cause fails.\n\nThe altivec tests also need -save-temps for the scan-assembler test to\noccur when vms_hw.\n\n\t* gcc.target/powerpc/vsx-load-element-extend-char.c: Put \"dg-do run\"\n\tbefore \"dg-do compile\", and make them mutually exclusive.\n\t* gcc.target/powerpc/vsx-load-element-extend-int.c: Likewise.\n\t* gcc.target/powerpc/vsx-load-element-extend-longlong.c: Likewise.\n\t* gcc.target/powerpc/vsx-load-element-extend-short.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-char.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-int.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-longlong.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-short.c: Likewise.\n\t* gcc.target/powerpc/altivec-consts.c: Likewise, add -save-temps.\n\t* gcc.target/powerpc/le-altivec-consts.c: Likewise.", "tree": {"sha": "6d071db438536da208165dd0bc3604bbc3c7feb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d071db438536da208165dd0bc3604bbc3c7feb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4166ebedf8b8a302b86132fdf846fac204c83368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4166ebedf8b8a302b86132fdf846fac204c83368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4166ebedf8b8a302b86132fdf846fac204c83368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4166ebedf8b8a302b86132fdf846fac204c83368/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb36257448bd69bb58ecab0f4811a10d4b84d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb36257448bd69bb58ecab0f4811a10d4b84d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb36257448bd69bb58ecab0f4811a10d4b84d67"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "c68c68125d1ff97f16cd7eacf53063610a807b0d", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-consts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target vmx_hw } } */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! vmx_hw } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-maltivec -mabi=altivec -O2\" } */\n+/* { dg-options \"-maltivec -mabi=altivec -O2 -save-temps\" } */\n \n /* Check that \"easy\" AltiVec constants are correctly synthesized.  */\n "}, {"sha": "a1db5e92f8733e0c35a2a883ccd472d3f091c3af", "filename": "gcc/testsuite/gcc.target/powerpc/le-altivec-consts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fle-altivec-consts.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target vmx_hw } } */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! vmx_hw } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-maltivec -mabi=altivec -O2\" } */\n+/* { dg-options \"-maltivec -mabi=altivec -O2 -save-temps\" } */\n \n /* Check that \"easy\" AltiVec constants are correctly synthesized.  */\n "}, {"sha": "c23a912868080531350a21603c42621b245c082e", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-char.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -2,8 +2,9 @@\n    Test of vec_xl_sext and vec_xl_zext (load into rightmost\n    vector element and zero/sign extend). */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n /* { dg-options \"-mdejagnu-cpu=power10 -O3 -save-temps\" } */\n "}, {"sha": "c40e1a3a0f784c3ebb4a7629332570459c3c4120", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-int.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -2,8 +2,9 @@\n    Test of vec_xl_sext and vec_xl_zext (load into rightmost\n    vector element and zero/sign extend). */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm"}, {"sha": "405b4245f8e2021b84c4de8b698f0c037bfa3e18", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-longlong.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -2,8 +2,9 @@\n    Test of vec_xl_sext and vec_xl_zext (load into rightmost\n    vector element and zero/sign extend). */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n /* { dg-options \"-mdejagnu-cpu=power10 -O3 -save-temps\" } */\n "}, {"sha": "837ba79c9ab80d4d005fe97baa7ba247dfb194db", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-short.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -2,8 +2,9 @@\n    Test of vec_xl_sext and vec_xl_zext (load into rightmost\n    vector element and zero/sign extend). */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm"}, {"sha": "3049b1c2c28076ce0d309d035637861dd4f8b214", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-char.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -1,8 +1,9 @@\n /*\n    Test of vec_xst_trunc (truncate and store rightmost vector element) */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n /* Deliberately set optization to zero for this test to confirm\n    the stxvr*x instruction is generated. At higher optimization levels"}, {"sha": "7cc7699f8eba81f6270677bac9b1ea12e4598bfd", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-int.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -1,8 +1,9 @@\n /*\n    Test of vec_xst_trunc (truncate and store rightmost vector element) */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n /* Deliberately set optization to zero for this test to confirm\n    the stxvr*x instruction is generated. At higher optimization levels"}, {"sha": "e1bd02166116c025e0d8d263eccd95c635594869", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-longlong.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -1,8 +1,9 @@\n /*\n    Test of vec_xst_trunc (truncate and store rightmost vector element) */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm"}, {"sha": "b173b36dbda4cc0de88ec74acd09374a8a2c4423", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-short.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166ebedf8b8a302b86132fdf846fac204c83368/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c?ref=4166ebedf8b8a302b86132fdf846fac204c83368", "patch": "@@ -1,8 +1,9 @@\n /*\n    Test of vec_xst_trunc (truncate and store rightmost vector element) */\n \n-/* { dg-do compile {target power10_ok} } */\n-/* { dg-do run {target power10_hw} } */\n+/* { dg-do run { target power10_hw } } */\n+/* { dg-do compile { target { ! power10_hw } } } */\n+/* { dg-require-effective-target power10_ok } */\n /* { dg-require-effective-target int128 } */\n \n /* Deliberately set optization to zero for this test to confirm"}]}