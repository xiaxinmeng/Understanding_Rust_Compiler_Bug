{"sha": "043ce308074d55f57dbb05bb2e0253417f3d0174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQzY2UzMDgwNzRkNTVmNTdkYmIwNWJiMmUwMjUzNDE3ZjNkMDE3NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T13:32:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T13:32:09Z"}, "message": "[multiple changes]\n\n2009-04-10  Robert Dewar  <dewar@adacore.com>\n\n\t* mlib-tgt-specific-xi.adb: Minor reformatting\n\n2009-04-10  Bob Duff  <duff@adacore.com>\n\n\t* einfo.ads: Minor comment fixes\n\n2009-04-10  Vincent Celier  <celier@adacore.com>\n\n\t* snames.ads-tmpl: Remove names that are no longer used in the\n\tProject Manager.\n\tMark specifically those that are used only in gprbuild\n\n2009-04-10  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* init.c: Adjust EH support code on Alpha/Tru64.\n\n2009-04-10  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch6.adb (Process_PPCs): Add a call to the _Postconditions\n\tprocedure on every path that could return implicitly (not via a return\n\tstatement) from a procedure.\n\n2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Build_Master_Entity): An extended return statement is a\n\tvalid scope for a task declarations and therefore for a master id.\n\n2009-04-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.adb: Minor reformatting\n\n2009-04-10  Vincent Celier  <celier@adacore.com>\n\n\t* scn.adb (Obsolescent_Check_Flag): New Boolean flag, initialized to\n\tTrue.\n\t(Obsolescent_Check): Do nothing if Obsolescent_Check_Flag is False\n\t(Set_Obsolescent_Check): New procedure to change the value of\n\tObsolescent_Check_Flag.\n\n\t* scn.ads (Set_Obsolescent_Check): New procedure to control\n\tObsolescent_Check.\n\n\t* sinput-l.adb (Load_File): Do not check for pragma Restrictions on\n\tobsolescent features while preprocessing.\n\nFrom-SVN: r145901", "tree": {"sha": "a9617cffdcd3216494b5d8f6d2f2e270b9735a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9617cffdcd3216494b5d8f6d2f2e270b9735a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/043ce308074d55f57dbb05bb2e0253417f3d0174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043ce308074d55f57dbb05bb2e0253417f3d0174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/043ce308074d55f57dbb05bb2e0253417f3d0174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043ce308074d55f57dbb05bb2e0253417f3d0174/comments", "author": null, "committer": null, "parents": [{"sha": "72df3faaf84f0ae75620cd25ee6c96e0465cc156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72df3faaf84f0ae75620cd25ee6c96e0465cc156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72df3faaf84f0ae75620cd25ee6c96e0465cc156"}], "stats": {"total": 237, "additions": 177, "deletions": 60}, "files": [{"sha": "c1c0391320ee2117bfc61b62016f8f6cf1566a1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -1,3 +1,50 @@\n+2009-04-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* mlib-tgt-specific-xi.adb: Minor reformatting\n+\n+2009-04-10  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo.ads: Minor comment fixes\n+\n+2009-04-10  Vincent Celier  <celier@adacore.com>\n+\n+\t* snames.ads-tmpl: Remove names that are no longer used in the\n+\tProject Manager.\n+\tMark specifically those that are used only in gprbuild\n+\n+2009-04-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* init.c: Adjust EH support code on Alpha/Tru64.\n+\n+2009-04-10  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb (Process_PPCs): Add a call to the _Postconditions\n+\tprocedure on every path that could return implicitly (not via a return\n+\tstatement) from a procedure.\n+\n+2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Master_Entity): An extended return statement is a\n+\tvalid scope for a task declarations and therefore for a master id.\n+\n+2009-04-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aux.adb: Minor reformatting\n+\n+2009-04-10  Vincent Celier  <celier@adacore.com>\n+\n+\t* scn.adb (Obsolescent_Check_Flag): New Boolean flag, initialized to\n+\tTrue.\n+\t(Obsolescent_Check): Do nothing if Obsolescent_Check_Flag is False\n+\t(Set_Obsolescent_Check): New procedure to change the value of\n+\tObsolescent_Check_Flag.\n+\n+\t* scn.ads (Set_Obsolescent_Check): New procedure to control\n+\tObsolescent_Check.\n+\n+\t* sinput-l.adb (Load_File): Do not check for pragma Restrictions on\n+\tobsolescent features while preprocessing.\n+\n 2009-04-10  Thomas Quinot  <quinot@adacore.com>\n \n \t* xsnamest.adb: Use XUtil to have uniform line endings (UNIX style) in"}, {"sha": "99d41f35ca273446a51615a625b318390b4dcc05", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -4900,7 +4900,7 @@ package Einfo is\n    --    Interface_Name                      (Node21)\n    --    Scope_Depth_Value                   (Uint22)\n    --    Generic_Renamings                   (Elist23)  (for an instance)\n-   --    Inner_Instances                     (Elist23)  (generic function only)\n+   --    Inner_Instances                     (Elist23)  (generic case only)\n    --    Protection_Object                   (Node23)   (for concurrent kind)\n    --    Spec_PPC_List                       (Node24)\n    --    Interface_Alias                     (Node25)\n@@ -5154,8 +5154,8 @@ package Einfo is\n    --    Last_Entity                         (Node20)\n    --    Interface_Name                      (Node21)\n    --    Scope_Depth_Value                   (Uint22)\n-   --    Generic_Renamings                   (Elist23)  (for instance)\n-   --    Inner_Instances                     (Elist23)  (for generic proc)\n+   --    Generic_Renamings                   (Elist23)  (for an instance)\n+   --    Inner_Instances                     (Elist23)  (generic case only)\n    --    Protection_Object                   (Node23)   (for concurrent kind)\n    --    Spec_PPC_List                       (Node24)\n    --    Interface_Alias                     (Node25)\n@@ -5177,10 +5177,9 @@ package Einfo is\n    --    Has_Postconditions                  (Flag240)\n    --    Has_Subprogram_Descriptor           (Flag93)\n    --    Implemented_By_Entry                (Flag232)  (non-generic case only)\n-   --    Is_Visible_Child_Unit               (Flag116)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Asynchronous                     (Flag81)\n-   --    Is_Called                           (Flag102)  (non-generic subprog)\n+   --    Is_Called                           (Flag102)  (non-generic case only)\n    --    Is_Constructor                      (Flag76)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Instantiated                     (Flag126)  (generic case only)"}, {"sha": "259908facb942a4c30c4059652383d2184a970dc", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -2394,7 +2394,10 @@ package body Exp_Ch9 is\n       --  in internal scopes, unless present already.. Required for nested\n       --  limited aggregates, where the expansion of task components may\n       --  generate inner blocks. If the block is the rewriting of a call\n-      --  this is valid master.\n+      --  or the scope is an extended return statement this is valid master.\n+      --  The master in an extended return is only used within the return,\n+      --  and is subsequently overwritten in Move_Activation_Chain, but it\n+      --  must exist now.\n \n       if Ada_Version >= Ada_05 then\n          while Is_Internal (S) loop\n@@ -2403,6 +2406,8 @@ package body Exp_Ch9 is\n                 Nkind (Original_Node (Parent (S))) = N_Procedure_Call_Statement\n             then\n                exit;\n+            elsif Ekind (S) = E_Return_Statement then\n+               exit;\n             else\n                S := Scope (S);\n             end if;"}, {"sha": "a1f46ed9fcb8f8097c0e8e09c9348c22f3cb5bb4", "filename": "gcc/ada/init.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -290,28 +290,21 @@ extern char *__gnat_get_code_loc (struct sigcontext *);\n extern void __gnat_set_code_loc (struct sigcontext *, char *);\n extern size_t __gnat_machine_state_length (void);\n \n-/* __gnat_adjust_context_for_raise - see comments along with the default\n-   version later in this file.  */\n-\n #define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n \n void\n-__gnat_adjust_context_for_raise (int signo, void *context)\n+__gnat_adjust_context_for_raise (int signo, void *ucontext)\n {\n-  struct sigcontext * sigcontext = (struct sigcontext *) context;\n-\n-  /* The fallback code fetches the faulting insn address from sc_pc, so\n-     adjust that when need be.  For SIGFPE, the required adjustment depends\n-     on the trap shadow situation (see man ieee).  */\n+  struct sigcontext *sigcontext = (struct sigcontext *) ucontext;\n+\n+  /* The unwinder expects the signal context to contain the address of the\n+     faulting instruction.  For SIGFPE, this depends on the trap shadow\n+     situation (see man ieee).  We nonetheless always compensate for it,\n+     considering that PC designates the instruction following the one that\n+     trapped.  This is not necessarily true but corresponds to what we have\n+     always observed.  */\n   if (signo == SIGFPE)\n-    {\n-      /* ??? We never adjust here, considering that sc_pc always\n-\t designates the instruction following the one which trapped.\n-\t This is not necessarily true but corresponds to what we have\n-\t always observed.  */\n-    }\n-  else\n-    sigcontext->sc_pc ++;\n+    sigcontext->sc_pc--;\n }\n \n static void\n@@ -2224,8 +2217,9 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n \t\t\t\t void *ucontext ATTRIBUTE_UNUSED)\n {\n   /* We used to compensate here for the raised from call vs raised from signal\n-     exception discrepancy with the GCC ZCX scheme, but this is now dealt with\n-     generically (except for the Alpha and IA-64), see GCC PR other/26208.\n+     exception discrepancy with the GCC ZCX scheme, but this now can be dealt\n+     with generically in the unwinder (see GCC PR other/26208).  Only the VMS\n+     ports still do the compensation described in the few lines below.\n \n      *** Call vs signal exception discrepancy with GCC ZCX scheme ***\n "}, {"sha": "10c57b474a39e75ac08109dec3b3cb4f20c7e814", "filename": "gcc/ada/mlib-tgt-specific-xi.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fmlib-tgt-specific-xi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fmlib-tgt-specific-xi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-xi.adb?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -157,7 +157,7 @@ package body MLib.Tgt.Specific is\n       elsif Target_Name (Target_Name'First .. Index) = \"powerpc\" then\n          if Target_Name'Length >= 23 and then\n            Target_Name (Target_Name'First .. Target_Name'First + 22) =\n-           \"powerpc-unknown-eabispe\"\n+                                              \"powerpc-unknown-eabispe\"\n          then\n             return \"powerpc-eabispe-\";\n          else"}, {"sha": "81dc49bb5b55efed667af4c6907a65c8d3b7d242", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -44,6 +44,10 @@ package body Scn is\n \n    use ASCII;\n \n+   Obsolescent_Check_Flag : Boolean := True;\n+   --  Obsolescent check activation. Set to False during integrated\n+   --  preprocessing.\n+\n    Used_As_Identifier : array (Token_Type) of Boolean;\n    --  Flags set True if a given keyword is used as an identifier (used to\n    --  make sure that we only post an error message for incorrect use of a\n@@ -342,12 +346,15 @@ package body Scn is\n \n    procedure Obsolescent_Check (S : Source_Ptr) is\n    begin\n-      --  This is a pain in the neck case, since we normally need a node to\n-      --  call Check_Restrictions, and all we have is a source pointer. The\n-      --  easiest thing is to construct a dummy node. A bit kludgy, but this\n-      --  is a marginal case. It's not worth trying to do things more cleanly.\n-\n-      Check_Restriction (No_Obsolescent_Features, New_Node (N_Empty, S));\n+      if Obsolescent_Check_Flag then\n+         --  This is a pain in the neck case, since we normally need a node to\n+         --  call Check_Restrictions, and all we have is a source pointer. The\n+         --  easiest thing is to construct a dummy node. A bit kludgy, but this\n+         --  is a marginal case. It's not worth trying to do things more\n+         --  cleanly.\n+\n+         Check_Restriction (No_Obsolescent_Features, New_Node (N_Empty, S));\n+      end if;\n    end Obsolescent_Check;\n \n    ---------------\n@@ -420,4 +427,13 @@ package body Scn is\n       Set_Chars (Token_Node, Token_Name);\n    end Scan_Reserved_Identifier;\n \n+   ---------------------------\n+   -- Set_Obsolescent_Check --\n+   ---------------------------\n+\n+   procedure Set_Obsolescent_Check (Value : Boolean) is\n+   begin\n+      Obsolescent_Check_Flag := Value;\n+   end Set_Obsolescent_Check;\n+\n end Scn;"}, {"sha": "eb6be5ecaa4ae571b926ec1d79ca4ee12f4e3eb0", "filename": "gcc/ada/scn.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fscn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fscn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.ads?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,6 +51,9 @@ package Scn is\n    --  Called to handle pragma restrictions check for usage of obsolescent\n    --  character replacements during the scan.\n \n+   procedure Set_Obsolescent_Check (Value : Boolean);\n+   --  Activate or not obsolescent check\n+\n    procedure Post_Scan;\n    pragma Inline (Post_Scan);\n    --  Create nodes for tokens: Char_Literal, Identifier, Real_Literal,"}, {"sha": "39b74430d7006863ed0b02460b0996730545bbbc", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -733,6 +733,8 @@ package body Sem_Aux is\n    begin\n       pragma Assert (Is_Tag (Tag));\n \n+      --  Loop to look for next tag component\n+\n       Comp := Next_Entity (Tag);\n       while Present (Comp) loop\n          if Is_Tag (Comp) then"}, {"sha": "0f854d5ee65b3d53c2ae7aa1a3344e5893547e38", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 68, "deletions": 14, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -7843,12 +7843,40 @@ package body Sem_Ch6 is\n       Subp  : Entity_Id;\n       Parms : List_Id;\n \n+      procedure Add_Post_Call (Stms : List_Id; Post_Proc : Entity_Id);\n+      --  Add a call to Post_Proc at the end of the statement list\n+\n       function Grab_PPC (Nam : Name_Id) return Node_Id;\n       --  Prag contains an analyzed precondition or postcondition pragma.\n       --  This function copies the pragma, changes it to the corresponding\n       --  Check pragma and returns the Check pragma as the result. The\n       --  argument Nam is either Name_Precondition or Name_Postcondition.\n \n+      -------------------\n+      -- Add_Post_Call --\n+      -------------------\n+\n+      procedure Add_Post_Call (Stms : List_Id; Post_Proc : Entity_Id) is\n+         Last_Stm : Node_Id;\n+      begin\n+         --  Get last statement, ignoring irrelevant nodes\n+\n+         Last_Stm := Last (Stms);\n+         while Nkind (Last_Stm) in N_Pop_xxx_Label loop\n+            Prev (Last_Stm);\n+         end loop;\n+\n+         --  Append the call to the list. This is unnecessary (but harmless) if\n+         --  the end of the list is unreachable, so we do a simple check for\n+         --  Is_Transfer here.\n+\n+         if not Is_Transfer (Last_Stm) then\n+            Append_To (Stms,\n+                       Make_Procedure_Call_Statement (Loc,\n+                         Name => New_Reference_To (Post_Proc, Loc)));\n+         end if;\n+      end Add_Post_Call;\n+\n       --------------\n       -- Grab_PPC --\n       --------------\n@@ -7964,12 +7992,12 @@ package body Sem_Ch6 is\n \n                Next (Prag);\n \n-               --  Not a pragma, if comes from source, then end scan\n+            --  Not a pragma, if comes from source, then end scan\n \n             elsif Comes_From_Source (Prag) then\n                exit;\n \n-               --  Skip stuff not coming from source\n+            --  Skip stuff not coming from source\n \n             else\n                Next (Prag);\n@@ -8004,7 +8032,7 @@ package body Sem_Ch6 is\n       end if;\n \n       --  If we had any postconditions and expansion is enabled, build\n-      --  the Postconditions procedure.\n+      --  the _Postconditions procedure.\n \n       if Present (Plist)\n         and then Expander_Active\n@@ -8022,20 +8050,46 @@ package body Sem_Ch6 is\n             Parms := No_List;\n          end if;\n \n-         Prepend_To (Declarations (N),\n-           Make_Subprogram_Body (Loc,\n-             Specification =>\n-               Make_Procedure_Specification (Loc,\n-                 Defining_Unit_Name =>\n+         declare\n+            Post_Proc : constant Entity_Id :=\n                    Make_Defining_Identifier (Loc,\n-                     Chars => Name_uPostconditions),\n-                 Parameter_Specifications => Parms),\n+                     Chars => Name_uPostconditions);\n+            --  The entity for the _Postconditions procedure\n+            HSS : constant Node_Id := Handled_Statement_Sequence (N);\n+            Handler : Node_Id;\n+         begin\n+\n+            Prepend_To (Declarations (N),\n+              Make_Subprogram_Body (Loc,\n+                Specification =>\n+                  Make_Procedure_Specification (Loc,\n+                    Defining_Unit_Name => Post_Proc,\n+                    Parameter_Specifications => Parms),\n+\n+                Declarations => Empty_List,\n+\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements => Plist)));\n \n-             Declarations => Empty_List,\n+            --  If this is a procedure, add a call to _postconditions to every\n+            --  place where it could return implicitly (not via a return\n+            --  statement, which are handled elsewhere). This is not necessary\n+            --  for functions, since functions always return via a return\n+            --  statement, or raise an exception.\n \n-             Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => Plist)));\n+            if Etype (Subp) = Standard_Void_Type then\n+               Add_Post_Call (Statements (HSS), Post_Proc);\n+\n+               if Present (Exception_Handlers (HSS)) then\n+                  Handler := First_Non_Pragma (Exception_Handlers (HSS));\n+                  while Present (Handler) loop\n+                     Add_Post_Call (Statements (Handler), Post_Proc);\n+                     Next_Non_Pragma (Handler);\n+                  end loop;\n+               end if;\n+            end if;\n+         end;\n \n          if Present (Spec_Id) then\n             Set_Has_Postconditions (Spec_Id);"}, {"sha": "ac9877f7ad84e890b37d96511415a86850bdde2f", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -518,7 +518,12 @@ package body Sinput.L is\n                Save_Style_Check := Opt.Style_Check;\n                Opt.Style_Check := False;\n \n+               --  Make sure that there will be no check of pragma Restrictions\n+               --  for obsolescent features while preprocessing the source.\n+\n+               Scn.Set_Obsolescent_Check (False);\n                Preprocess (Modified);\n+               Scn.Set_Obsolescent_Check (True);\n \n                --  Reset the scanner to its standard behavior, and restore the\n                --  Style_Checks flag."}, {"sha": "700034b974822d8a74df305885c04120ec63d6ae", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043ce308074d55f57dbb05bb2e0253417f3d0174/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=043ce308074d55f57dbb05bb2e0253417f3d0174", "patch": "@@ -1011,21 +1011,18 @@ package Snames is\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n+   --  The names with the --  GPR annotation are only used in gprbuild\n \n-   Name_Ada_Roots                        : constant Name_Id := N + $;\n    Name_Aggregate                        : constant Name_Id := N + $;\n    Name_Archive_Builder                  : constant Name_Id := N + $;\n    Name_Archive_Builder_Append_Option    : constant Name_Id := N + $;\n    Name_Archive_Indexer                  : constant Name_Id := N + $;\n    Name_Archive_Suffix                   : constant Name_Id := N + $;\n    Name_Binder                           : constant Name_Id := N + $;\n-   Name_Binder_Prefix                    : constant Name_Id := N + $;\n    Name_Body_Suffix                      : constant Name_Id := N + $;\n    Name_Builder                          : constant Name_Id := N + $;\n-   Name_Builder_Switches                 : constant Name_Id := N + $;\n    Name_Compiler                         : constant Name_Id := N + $;\n-   Name_Compiler_Command                 : constant Name_Id := N + $;\n-   Name_Compiler_Kind                    : constant Name_Id := N + $;\n+   Name_Compiler_Command                 : constant Name_Id := N + $; --  GPR\n    Name_Config_Body_File_Name            : constant Name_Id := N + $;\n    Name_Config_Body_File_Name_Pattern    : constant Name_Id := N + $;\n    Name_Config_File_Switches             : constant Name_Id := N + $;\n@@ -1037,7 +1034,6 @@ package Snames is\n    Name_Default_Language                 : constant Name_Id := N + $;\n    Name_Default_Switches                 : constant Name_Id := N + $;\n    Name_Dependency_Driver                : constant Name_Id := N + $;\n-   Name_Dependency_File_Kind             : constant Name_Id := N + $;\n    Name_Dependency_Switches              : constant Name_Id := N + $;\n    Name_Driver                           : constant Name_Id := N + $;\n    Name_Excluded_Source_Dirs             : constant Name_Id := N + $;\n@@ -1051,7 +1047,7 @@ package Snames is\n    Name_Finder                           : constant Name_Id := N + $;\n    Name_Global_Compilation_Switches      : constant Name_Id := N + $;\n    Name_Global_Configuration_Pragmas     : constant Name_Id := N + $;\n-   Name_Global_Config_File               : constant Name_Id := N + $;\n+   Name_Global_Config_File               : constant Name_Id := N + $; --  GPR\n    Name_Gnatls                           : constant Name_Id := N + $;\n    Name_Gnatstub                         : constant Name_Id := N + $;\n    Name_Ide                              : constant Name_Id := N + $;\n@@ -1062,8 +1058,6 @@ package Snames is\n    Name_Include_Path                     : constant Name_Id := N + $;\n    Name_Include_Path_File                : constant Name_Id := N + $;\n    Name_Inherit_Source_Path              : constant Name_Id := N + $;\n-   Name_Language_Kind                    : constant Name_Id := N + $;\n-   Name_Language_Processing              : constant Name_Id := N + $;\n    Name_Languages                        : constant Name_Id := N + $;\n    Name_Library                          : constant Name_Id := N + $;\n    Name_Library_Ali_Dir                  : constant Name_Id := N + $;\n@@ -1089,7 +1083,7 @@ package Snames is\n    Name_Linker_Executable_Option         : constant Name_Id := N + $;\n    Name_Linker_Lib_Dir_Option            : constant Name_Id := N + $;\n    Name_Linker_Lib_Name_Option           : constant Name_Id := N + $;\n-   Name_Local_Config_File                : constant Name_Id := N + $;\n+   Name_Local_Config_File                : constant Name_Id := N + $; --  GPR\n    Name_Local_Configuration_Pragmas      : constant Name_Id := N + $;\n    Name_Locally_Removed_Files            : constant Name_Id := N + $;\n    Name_Map_File_Option                  : constant Name_Id := N + $;\n@@ -1109,10 +1103,9 @@ package Snames is\n    Name_Prefix                           : constant Name_Id := N + $;\n    Name_Project                          : constant Name_Id := N + $;\n    Name_Project_Dir                      : constant Name_Id := N + $;\n-   Name_Roots                            : constant Name_Id := N + $;\n+   Name_Roots                            : constant Name_Id := N + $; --  GPR\n    Name_Required_Switches                : constant Name_Id := N + $;\n    Name_Run_Path_Option                  : constant Name_Id := N + $;\n-   Name_Runtime_Project                  : constant Name_Id := N + $;\n    Name_Shared_Library_Minimum_Switches  : constant Name_Id := N + $;\n    Name_Shared_Library_Prefix            : constant Name_Id := N + $;\n    Name_Shared_Library_Suffix            : constant Name_Id := N + $;\n@@ -1128,7 +1121,6 @@ package Snames is\n    Name_Stack                            : constant Name_Id := N + $;\n    Name_Switches                         : constant Name_Id := N + $;\n    Name_Symbolic_Link_Supported          : constant Name_Id := N + $;\n-   Name_Sync                             : constant Name_Id := N + $;\n    Name_Synchronize                      : constant Name_Id := N + $;\n    Name_Toolchain_Description            : constant Name_Id := N + $;\n    Name_Toolchain_Version                : constant Name_Id := N + $;"}]}