{"sha": "89bfd6f5c8fb65df258f063e6a81926625217c97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliZmQ2ZjVjOGZiNjVkZjI1OGYwNjNlNmE4MTkyNjYyNTIxN2M5Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T18:08:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T18:08:51Z"}, "message": "loop-invariant.c: Use rtx_insn in various places\n\ngcc/\n\t* loop-invariant.c (struct use): Strengthen field \"insn\" from rtx\n\tto rtx_insn *.\n\t(struct invariant): Likewise.\n\t(hash_invariant_expr_1): Likewise for param \"insn\".\n\t(invariant_expr_equal_p): Likewise for param \"insn1\", \"insn2\".\n\t(find_exits): Likewise for local \"insn\".\n\t(create_new_invariant): Likewise for param \"insn\".\n\t(check_dependencies): Likewise.\n\t(find_invariant_insn): Likewise.\n\t(record_uses): Likewise.\n\t(find_invariants_insn): Likewise.\n\t(find_invariants_bb): Likewise for local \"insn\".\n\t(get_pressure_class_and_nregs): Likewise for param \"insn\".\n\t(calculate_loop_reg_pressure): Likewise for local \"insn\".\n\nFrom-SVN: r214343", "tree": {"sha": "6c38670a316966e31d0d0b83cffac75af2480862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c38670a316966e31d0d0b83cffac75af2480862"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89bfd6f5c8fb65df258f063e6a81926625217c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bfd6f5c8fb65df258f063e6a81926625217c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89bfd6f5c8fb65df258f063e6a81926625217c97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bfd6f5c8fb65df258f063e6a81926625217c97/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "871eb193238ded31b97728930eb0b15c865f6a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871eb193238ded31b97728930eb0b15c865f6a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871eb193238ded31b97728930eb0b15c865f6a03"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "4ee186b703a081e7c0088e1a16125b661f194254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bfd6f5c8fb65df258f063e6a81926625217c97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bfd6f5c8fb65df258f063e6a81926625217c97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89bfd6f5c8fb65df258f063e6a81926625217c97", "patch": "@@ -1,3 +1,20 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* loop-invariant.c (struct use): Strengthen field \"insn\" from rtx\n+\tto rtx_insn *.\n+\t(struct invariant): Likewise.\n+\t(hash_invariant_expr_1): Likewise for param \"insn\".\n+\t(invariant_expr_equal_p): Likewise for param \"insn1\", \"insn2\".\n+\t(find_exits): Likewise for local \"insn\".\n+\t(create_new_invariant): Likewise for param \"insn\".\n+\t(check_dependencies): Likewise.\n+\t(find_invariant_insn): Likewise.\n+\t(record_uses): Likewise.\n+\t(find_invariants_insn): Likewise.\n+\t(find_invariants_bb): Likewise for local \"insn\".\n+\t(get_pressure_class_and_nregs): Likewise for param \"insn\".\n+\t(calculate_loop_reg_pressure): Likewise for local \"insn\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* loop-doloop.c (doloop_valid_p): Strengthen local \"insn\" from rtx"}, {"sha": "1ac2ebdf86c9a4357fedcdf38fffbfa79966c238", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89bfd6f5c8fb65df258f063e6a81926625217c97/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89bfd6f5c8fb65df258f063e6a81926625217c97/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=89bfd6f5c8fb65df258f063e6a81926625217c97", "patch": "@@ -78,7 +78,7 @@ struct loop_data\n struct use\n {\n   rtx *pos;\t\t\t/* Position of the use.  */\n-  rtx insn;\t\t\t/* The insn in that the use occurs.  */\n+  rtx_insn *insn;\t\t/* The insn in that the use occurs.  */\n   unsigned addr_use_p;\t\t/* Whether the use occurs in an address.  */\n   struct use *next;\t\t/* Next use in the list.  */\n };\n@@ -119,7 +119,7 @@ struct invariant\n   struct def *def;\n \n   /* The insn in that it is defined.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* Whether it is always executed.  */\n   bool always_executed;\n@@ -289,7 +289,7 @@ invariant_for_use (df_ref use)\n /* Computes hash value for invariant expression X in INSN.  */\n \n static hashval_t\n-hash_invariant_expr_1 (rtx insn, rtx x)\n+hash_invariant_expr_1 (rtx_insn *insn, rtx x)\n {\n   enum rtx_code code = GET_CODE (x);\n   int i, j;\n@@ -343,7 +343,7 @@ hash_invariant_expr_1 (rtx insn, rtx x)\n    and INSN2 have always the same value.  */\n \n static bool\n-invariant_expr_equal_p (rtx insn1, rtx e1, rtx insn2, rtx e2)\n+invariant_expr_equal_p (rtx_insn *insn1, rtx e1, rtx_insn *insn2, rtx e2)\n {\n   enum rtx_code code = GET_CODE (e1);\n   int i, j;\n@@ -578,7 +578,7 @@ find_exits (struct loop *loop, basic_block *body,\n   edge e;\n   struct loop *outermost_exit = loop, *aexit;\n   bool has_call = false;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   for (i = 0; i < loop->num_nodes; i++)\n     {\n@@ -689,7 +689,7 @@ find_defs (struct loop *loop)\n    is returned.  */\n \n static struct invariant *\n-create_new_invariant (struct def *def, rtx insn, bitmap depends_on,\n+create_new_invariant (struct def *def, rtx_insn *insn, bitmap depends_on,\n \t\t      bool always_executed)\n {\n   struct invariant *inv = XNEW (struct invariant);\n@@ -833,7 +833,7 @@ check_dependency (basic_block bb, df_ref use, bitmap depends_on)\n    loop invariants, false otherwise.  */\n \n static bool\n-check_dependencies (rtx insn, bitmap depends_on)\n+check_dependencies (rtx_insn *insn, bitmap depends_on)\n {\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n   df_ref use;\n@@ -887,7 +887,7 @@ pre_check_invariant_p (bool simple, rtx dest)\n    unless the program ends due to a function call.  */\n \n static void\n-find_invariant_insn (rtx insn, bool always_reached, bool always_executed)\n+find_invariant_insn (rtx_insn *insn, bool always_reached, bool always_executed)\n {\n   df_ref ref;\n   struct def *def;\n@@ -950,7 +950,7 @@ find_invariant_insn (rtx insn, bool always_reached, bool always_executed)\n /* Record registers used in INSN that have a unique invariant definition.  */\n \n static void\n-record_uses (rtx insn)\n+record_uses (rtx_insn *insn)\n {\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n   df_ref use;\n@@ -975,7 +975,7 @@ record_uses (rtx insn)\n    unless the program ends due to a function call.  */\n \n static void\n-find_invariants_insn (rtx insn, bool always_reached, bool always_executed)\n+find_invariants_insn (rtx_insn *insn, bool always_reached, bool always_executed)\n {\n   find_invariant_insn (insn, always_reached, always_executed);\n   record_uses (insn);\n@@ -989,7 +989,7 @@ find_invariants_insn (rtx insn, bool always_reached, bool always_executed)\n static void\n find_invariants_bb (basic_block bb, bool always_reached, bool always_executed)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   FOR_BB_INSNS (bb, insn)\n     {\n@@ -1066,7 +1066,7 @@ free_use_list (struct use *use)\n /* Return pressure class and number of hard registers (through *NREGS)\n    for destination of INSN. */\n static enum reg_class\n-get_pressure_class_and_nregs (rtx insn, int *nregs)\n+get_pressure_class_and_nregs (rtx_insn *insn, int *nregs)\n {\n   rtx reg;\n   enum reg_class pressure_class;\n@@ -1878,7 +1878,8 @@ calculate_loop_reg_pressure (void)\n   unsigned int j;\n   bitmap_iterator bi;\n   basic_block bb;\n-  rtx insn, link;\n+  rtx_insn *insn;\n+  rtx link;\n   struct loop *loop, *parent;\n \n   FOR_EACH_LOOP (loop, 0)"}]}