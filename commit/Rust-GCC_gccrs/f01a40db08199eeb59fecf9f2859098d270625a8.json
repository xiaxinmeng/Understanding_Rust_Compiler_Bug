{"sha": "f01a40db08199eeb59fecf9f2859098d270625a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAxYTQwZGIwODE5OWVlYjU5ZmVjZjlmMjg1OTA5OGQyNzA2MjVhOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-11-07T15:22:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-11-07T15:22:25Z"}, "message": "tree.c (fld_incomplete_type_of): Clear TREE_ADDRESSABLE.\n\n\n\t* tree.c (fld_incomplete_type_of): Clear TREE_ADDRESSABLE.\n\t(free_lang_data_in_decl): Set TREE_ADDRESSABLE for public vars and\n\tfunctions; clear TYPE_DECL_SUPPRESS_DEBUG and DECL_MODE for\n\tTYPE_DECL.\n\nFrom-SVN: r265877", "tree": {"sha": "08c527971223b10b687065cddbe60161372a84b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08c527971223b10b687065cddbe60161372a84b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f01a40db08199eeb59fecf9f2859098d270625a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f01a40db08199eeb59fecf9f2859098d270625a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f01a40db08199eeb59fecf9f2859098d270625a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f01a40db08199eeb59fecf9f2859098d270625a8/comments", "author": null, "committer": null, "parents": [{"sha": "5a951baaf1b789281bf62b852d24a4ab8cf3e714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a951baaf1b789281bf62b852d24a4ab8cf3e714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a951baaf1b789281bf62b852d24a4ab8cf3e714"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "3a9f6ea72415dfeae92e63b334a013670768c9af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f01a40db08199eeb59fecf9f2859098d270625a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f01a40db08199eeb59fecf9f2859098d270625a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f01a40db08199eeb59fecf9f2859098d270625a8", "patch": "@@ -1,3 +1,10 @@\n+2018-11-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (fld_incomplete_type_of): Clear TREE_ADDRESSABLE.\n+\t(free_lang_data_in_decl): Set TREE_ADDRESSABLE for public vars and\n+\tfunctions; clear TYPE_DECL_SUPPRESS_DEBUG and DECL_MODE for\n+\tTYPE_DECL.\n+\n 2018-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87914"}, {"sha": "50124721278d101bf5c1b4e783d99bb7f771c168", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f01a40db08199eeb59fecf9f2859098d270625a8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f01a40db08199eeb59fecf9f2859098d270625a8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f01a40db08199eeb59fecf9f2859098d270625a8", "patch": "@@ -5197,6 +5197,7 @@ fld_incomplete_type_of (tree t, struct free_lang_data_d *fld)\n \t  TYPE_SIZE_UNIT (copy) = NULL;\n \t  TYPE_CANONICAL (copy) = TYPE_CANONICAL (t);\n \t  TYPE_TYPELESS_STORAGE (copy) = 0;\n+\t  TREE_ADDRESSABLE (copy) = 0;\n \t  if (AGGREGATE_TYPE_P (t))\n \t    {\n \t      TYPE_FIELDS (copy) = NULL;\n@@ -5496,6 +5497,17 @@ free_lang_data_in_decl (tree decl, struct free_lang_data_d *fld)\n  if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       struct cgraph_node *node;\n+      /* Frontends do not set TREE_ADDRESSABLE on public variables even though\n+\t the address may be taken in other unit, so this flag has no practical\n+\t use for middle-end.\n+\n+\t It would make more sense if frontends set TREE_ADDRESSABLE to 0 only\n+\t for public objects that indeed can not be adressed, but it is not\n+\t the case.  Set the flag to true so we do not get merge failures for\n+\t i.e. virtual tables between units that take address of it and\n+\t units that don't.  */\n+      if (TREE_PUBLIC (decl))\n+\tTREE_ADDRESSABLE (decl) = true;\n       TREE_TYPE (decl) = fld_simplified_type (TREE_TYPE (decl), fld);\n       if (!(node = cgraph_node::get (decl))\n \t  || (!node->definition && !node->clones))\n@@ -5551,6 +5563,9 @@ free_lang_data_in_decl (tree decl, struct free_lang_data_d *fld)\n     }\n   else if (VAR_P (decl))\n     {\n+      /* See comment above why we set the flag for functoins.  */\n+      if (TREE_PUBLIC (decl))\n+\tTREE_ADDRESSABLE (decl) = true;\n       if ((DECL_EXTERNAL (decl)\n \t   && (!TREE_STATIC (decl) || !TREE_READONLY (decl)))\n \t  || (decl_function_context (decl) && !TREE_STATIC (decl)))\n@@ -5560,8 +5575,11 @@ free_lang_data_in_decl (tree decl, struct free_lang_data_d *fld)\n     {\n       DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n       DECL_VISIBILITY_SPECIFIED (decl) = 0;\n+      /* TREE_PUBLIC is used to tell if type is anonymous.  */\n+      TYPE_DECL_SUPPRESS_DEBUG (decl) = 0;\n       DECL_INITIAL (decl) = NULL_TREE;\n       DECL_ORIGINAL_TYPE (decl) = NULL_TREE;\n+      DECL_MODE (decl) = VOIDmode;\n       TREE_TYPE (decl) = void_type_node;\n       SET_DECL_ALIGN (decl, 0);\n     }"}]}