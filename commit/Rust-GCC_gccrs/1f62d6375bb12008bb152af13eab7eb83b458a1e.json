{"sha": "1f62d6375bb12008bb152af13eab7eb83b458a1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2MmQ2Mzc1YmIxMjAwOGJiMTUyYWYxM2VhYjdlYjgzYjQ1OGExZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-05-02T17:53:29Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-05-02T17:53:29Z"}, "message": "[openacc] Add __builtin_goacc_parlevel_{id,size}\n\n2018-05-02  Tom de Vries  <tom@codesourcery.com>\n\n\tPR libgomp/82428\n\t* builtins.def (DEF_GOACC_BUILTIN_ONLY): Define.\n\t* omp-builtins.def (BUILT_IN_GOACC_PARLEVEL_ID)\n\t(BUILT_IN_GOACC_PARLEVEL_SIZE): New builtin.\n\t* builtins.c (expand_builtin_goacc_parlevel_id_size): New function.\n\t(expand_builtin): Call expand_builtin_goacc_parlevel_id_size.\n\t* doc/extend.texi (Other Builtins): Add __builtin_goacc_parlevel_id and\n\t__builtin_goacc_parlevel_size.\n\n\t* f95-lang.c (DEF_GOACC_BUILTIN_ONLY): Define.\n\n\t* c-c++-common/goacc/builtin-goacc-parlevel-id-size-2.c: New test.\n\t* c-c++-common/goacc/builtin-goacc-parlevel-id-size.c: New test.\n\n\t* testsuite/libgomp.oacc-c-c++-common/gang-static-2.c: Use\n\t__builtin_goacc_parlevel_{id,size}.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-g-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-g-2.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-v-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-g-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-v-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c: Same.\n\t* testsuite/libgomp.oacc-c-c++-common/tile-1.c: Same.\n\nFrom-SVN: r259850", "tree": {"sha": "9c5ae5ae8708baf16f73a2e5208f1e7daf96482f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5ae5ae8708baf16f73a2e5208f1e7daf96482f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f62d6375bb12008bb152af13eab7eb83b458a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f62d6375bb12008bb152af13eab7eb83b458a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f62d6375bb12008bb152af13eab7eb83b458a1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f62d6375bb12008bb152af13eab7eb83b458a1e/comments", "author": null, "committer": null, "parents": [{"sha": "f7584c811623675be258da5195d8e8daeb562975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7584c811623675be258da5195d8e8daeb562975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7584c811623675be258da5195d8e8daeb562975"}], "stats": {"total": 663, "additions": 433, "deletions": 230}, "files": [{"sha": "806f74cc3b76887c1f50a632db92f8c775ed5d0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,3 +1,14 @@\n+2018-05-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR libgomp/82428\n+\t* builtins.def (DEF_GOACC_BUILTIN_ONLY): Define.\n+\t* omp-builtins.def (BUILT_IN_GOACC_PARLEVEL_ID)\n+\t(BUILT_IN_GOACC_PARLEVEL_SIZE): New builtin.\n+\t* builtins.c (expand_builtin_goacc_parlevel_id_size): New function.\n+\t(expand_builtin): Call expand_builtin_goacc_parlevel_id_size.\n+\t* doc/extend.texi (Other Builtins): Add __builtin_goacc_parlevel_id and\n+\t__builtin_goacc_parlevel_size.\n+\n 2018-05-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85597"}, {"sha": "300e13c2f47ab9a355cc7c5a7e6a3ccf7dddf14e", "filename": "gcc/builtins.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -71,6 +71,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-fold.h\"\n #include \"intl.h\"\n #include \"file-prefix-map.h\" /* remap_macro_filename()  */\n+#include \"gomp-constants.h\"\n+#include \"omp-general.h\"\n \n struct target_builtins default_target_builtins;\n #if SWITCHABLE_TARGET\n@@ -6628,6 +6630,71 @@ expand_stack_save (void)\n   return ret;\n }\n \n+/* Emit code to get the openacc gang, worker or vector id or size.  */\n+\n+static rtx\n+expand_builtin_goacc_parlevel_id_size (tree exp, rtx target, int ignore)\n+{\n+  const char *name;\n+  rtx fallback_retval;\n+  rtx_insn *(*gen_fn) (rtx, rtx);\n+  switch (DECL_FUNCTION_CODE (get_callee_fndecl (exp)))\n+    {\n+    case BUILT_IN_GOACC_PARLEVEL_ID:\n+      name = \"__builtin_goacc_parlevel_id\";\n+      fallback_retval = const0_rtx;\n+      gen_fn = targetm.gen_oacc_dim_pos;\n+      break;\n+    case BUILT_IN_GOACC_PARLEVEL_SIZE:\n+      name = \"__builtin_goacc_parlevel_size\";\n+      fallback_retval = const1_rtx;\n+      gen_fn = targetm.gen_oacc_dim_size;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (oacc_get_fn_attrib (current_function_decl) == NULL_TREE)\n+    {\n+      error (\"%qs only supported in OpenACC code\", name);\n+      return const0_rtx;\n+    }\n+\n+  tree arg = CALL_EXPR_ARG (exp, 0);\n+  if (TREE_CODE (arg) != INTEGER_CST)\n+    {\n+      error (\"non-constant argument 0 to %qs\", name);\n+      return const0_rtx;\n+    }\n+\n+  int dim = TREE_INT_CST_LOW (arg);\n+  switch (dim)\n+    {\n+    case GOMP_DIM_GANG:\n+    case GOMP_DIM_WORKER:\n+    case GOMP_DIM_VECTOR:\n+      break;\n+    default:\n+      error (\"illegal argument 0 to %qs\", name);\n+      return const0_rtx;\n+    }\n+\n+  if (ignore)\n+    return target;\n+\n+  if (!targetm.have_oacc_dim_size ())\n+    {\n+      emit_move_insn (target, fallback_retval);\n+      return target;\n+    }\n+\n+  rtx reg = MEM_P (target) ? gen_reg_rtx (GET_MODE (target)) : target;\n+  emit_insn (gen_fn (reg, GEN_INT (dim)));\n+  if (reg != target)\n+    emit_move_insn (target, reg);\n+\n+  return target;\n+}\n \n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -7758,6 +7825,10 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \t folding.  */\n       break;\n \n+    case BUILT_IN_GOACC_PARLEVEL_ID:\n+    case BUILT_IN_GOACC_PARLEVEL_SIZE:\n+      return expand_builtin_goacc_parlevel_id_size (exp, target, ignore);\n+\n     default:\t/* just do library call, if unknown builtin */\n       break;\n     }"}, {"sha": "449d08d682ff6a513407a473187068644640d6c0", "filename": "gcc/builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -214,6 +214,10 @@ along with GCC; see the file COPYING3.  If not see\n #define DEF_GOACC_BUILTIN_COMPILER(ENUM, NAME, TYPE, ATTRS) \\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n \t       flag_openacc, true, true, ATTRS, false, true)\n+#undef DEF_GOACC_BUILTIN_ONLY\n+#define DEF_GOACC_BUILTIN_ONLY(ENUM, NAME, TYPE, ATTRS) \\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,    \\\n+\t       false, false, true, ATTRS, false, flag_openacc)\n #undef DEF_GOMP_BUILTIN\n #define DEF_GOMP_BUILTIN(ENUM, NAME, TYPE, ATTRS) \\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\"}, {"sha": "f751b082b0e0c90a3097b486d93d4c9f896d88c6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -12437,6 +12437,16 @@ Aarch64.  This function is mainly useful when writing inline assembly\n code.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int __builtin_goacc_parlevel_id (int x)\n+Returns the openacc gang, worker or vector id depending on whether @var{x} is\n+0, 1 or 2.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_goacc_parlevel_size (int x)\n+Returns the openacc gang, worker or vector size depending on whether @var{x} is\n+0, 1 or 2.\n+@end deftypefn\n+\n @node Target Builtins\n @section Built-in Functions Specific to Particular Target Machines\n "}, {"sha": "787f0ae22ec5f676f8c58301999e7d9a38736e81", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,3 +1,8 @@\n+2018-05-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR libgomp/82428\n+\t* f95-lang.c (DEF_GOACC_BUILTIN_ONLY): Define.\n+\n 2018-04-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/85520"}, {"sha": "0f39f0ca788ea9e5868d4718c5f90c102958968f", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1202,6 +1202,10 @@ gfc_init_builtin_functions (void)\n #undef DEF_GOACC_BUILTIN_COMPILER\n #define DEF_GOACC_BUILTIN_COMPILER(code, name, type, attr) \\\n       gfc_define_builtin (name, builtin_types[type], code, name, attr);\n+#undef DEF_GOACC_BUILTIN_ONLY\n+#define DEF_GOACC_BUILTIN_ONLY(code, name, type, attr) \\\n+      gfc_define_builtin (\"__builtin_\" name, builtin_types[type], code, NULL, \\\n+\t\t\t  attr);\n #undef DEF_GOMP_BUILTIN\n #define DEF_GOMP_BUILTIN(code, name, type, attr) /* ignore */\n #include \"../omp-builtins.def\""}, {"sha": "55e56336ae976255e407eb5e1da2a07dc93c9f65", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -51,6 +51,11 @@ DEF_GOACC_BUILTIN (BUILT_IN_GOACC_WAIT, \"GOACC_wait\",\n DEF_GOACC_BUILTIN_COMPILER (BUILT_IN_ACC_ON_DEVICE, \"acc_on_device\",\n \t\t\t    BT_FN_INT_INT, ATTR_CONST_NOTHROW_LEAF_LIST)\n \n+DEF_GOACC_BUILTIN_ONLY (BUILT_IN_GOACC_PARLEVEL_ID, \"goacc_parlevel_id\",\n+\t\t\tBT_FN_INT_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GOACC_BUILTIN_ONLY (BUILT_IN_GOACC_PARLEVEL_SIZE, \"goacc_parlevel_size\",\n+\t\t\tBT_FN_INT_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n DEF_GOMP_BUILTIN (BUILT_IN_OMP_GET_THREAD_NUM, \"omp_get_thread_num\",\n \t\t  BT_FN_INT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_OMP_GET_NUM_THREADS, \"omp_get_num_threads\","}, {"sha": "9c290eb1e68f70538617ba71295d246adfca131a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,3 +1,9 @@\n+2018-05-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR libgomp/82428\n+\t* c-c++-common/goacc/builtin-goacc-parlevel-id-size-2.c: New test.\n+\t* c-c++-common/goacc/builtin-goacc-parlevel-id-size.c: New test.\n+\n 2018-05-02  David Pagan  <dave.pagan@oracle.com>\n \n \tPR c/30552"}, {"sha": "16c7b34f66c0f020d9c407f8d600742d36a632af", "filename": "gcc/testsuite/c-c++-common/goacc/builtin-goacc-parlevel-id-size-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size-2.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile }  */\n+/* { dg-additional-options \"-O2\" }  */\n+\n+#include \"../../../../include/gomp-constants.h\"\n+\n+void\n+foo (void)\n+{\n+  __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+  /* { dg-error \"'__builtin_goacc_parlevel_id' only supported in OpenACC code\" \"\" { target *-*-* } .-1 } */\n+  \n+  __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+  /* { dg-error \"'__builtin_goacc_parlevel_size' only supported in OpenACC code\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+#pragma acc routine\n+void\n+foo2 (int arg)\n+{\n+  __builtin_goacc_parlevel_id (arg);\n+  /* { dg-error \"non-constant argument 0 to '__builtin_goacc_parlevel_id'\" \"\" { target *-*-* } .-1 } */\n+\n+  __builtin_goacc_parlevel_size (arg);\n+  /* { dg-error \"non-constant argument 0 to '__builtin_goacc_parlevel_size'\" \"\" { target *-*-* } .-1 } */\n+\n+  __builtin_goacc_parlevel_id (-1);\n+  /* { dg-error \"illegal argument 0 to '__builtin_goacc_parlevel_id'\" \"\" { target *-*-* } .-1 } */\n+\n+  __builtin_goacc_parlevel_id (-1);\n+  /* { dg-error \"illegal argument 0 to '__builtin_goacc_parlevel_id'\" \"\" { target *-*-* } .-1 } */\n+\n+  __builtin_goacc_parlevel_size (-1);\n+  /* { dg-error \"illegal argument 0 to '__builtin_goacc_parlevel_size'\" \"\" { target *-*-* } .-1 } */\n+\n+  __builtin_goacc_parlevel_size (3);\n+  /* { dg-error \"illegal argument 0 to '__builtin_goacc_parlevel_size'\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "5cda8189fb8384d0e95b6fa9319fb6ce6d77049b", "filename": "gcc/testsuite/c-c++-common/goacc/builtin-goacc-parlevel-id-size.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile }  */\n+/* { dg-additional-options \"-O2\" }  */\n+\n+#include \"../../../../include/gomp-constants.h\"\n+\n+#pragma acc routine\n+int\n+foo (void)\n+{\n+  int res;\n+  \n+  __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+  __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+  __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+  __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+  __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+  __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n+\n+  res += __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+  res += __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+  res += __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+  res += __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+  res += __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+  res += __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n+\n+  return res;\n+}\n+\n+void\n+foo2 (void)\n+{\n+  int res;\n+\n+#pragma acc parallel\n+  {\n+    __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+    __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+    __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+    __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n+\n+    res += __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+    res += __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+    res += __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+    res += __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    res += __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    res += __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n+  }\n+}\n+\n+void\n+foo3 (void)\n+{\n+  int res;\n+\n+#pragma acc kernels\n+  {\n+    __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+    __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+    __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+    __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n+\n+    res += __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+    res += __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+    res += __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+    res += __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    res += __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    res += __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n+  }\n+}"}, {"sha": "669f9f1e59f4772a2732f7997308c40ca9249c0f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,3 +1,32 @@\n+2018-05-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR libgomp/82428\n+\t* testsuite/libgomp.oacc-c-c++-common/gang-static-2.c: Use\n+\t__builtin_goacc_parlevel_{id,size}.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-g-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-g-2.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-v-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-g-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-v-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c: Same.\n+\t* testsuite/libgomp.oacc-c-c++-common/tile-1.c: Same.\n+\n 2018-05-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/85106"}, {"sha": "e273a797b8e3bb67b2e98cd0b5aa3899a5f2663a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/gang-static-2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fgang-static-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fgang-static-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fgang-static-2.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,25 +1,23 @@\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <assert.h>\n #include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N 100\n \n #define GANG_ID(I)\t\t\t\t\t\t\\\n-  (acc_on_device (acc_device_nvidia)\t\t\t\t\\\n-   ? ({unsigned __r;\t\t\t\t\t\t\\\n-       __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (__r));\t\\\n-       __r; }) : (I))\n+  (acc_on_device (acc_device_not_host)\t\t\t\t\\\n+   ? __builtin_goacc_parlevel_id (GOMP_DIM_GANG)\t\t\t\t\t\\\n+   : (I))\n \n void\n test_static(int *a, int num_gangs, int sarg)\n {\n   int i, j;\n \n-  if (sarg == 0)\n+  if (acc_on_device (acc_device_host))\n+    return;\n+\n+   if (sarg == 0)\n     sarg = 1;\n \n   for (i = 0; i < N / sarg; i++)\n@@ -32,6 +30,9 @@ test_nonstatic(int *a, int gangs)\n {\n   int i, j;\n \n+  if (acc_on_device (acc_device_host))\n+    return;\n+\n   for (i = 0; i < N; i+=gangs)\n     for (j = 0; j < gangs; j++)\n       assert (a[i+j] == i/gangs);"}, {"sha": "34bc57e51f52a7ce761d7bfeb7941c36b92ec738", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,11 +1,8 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n /* { dg-additional-options \"-fopenacc-dim=32\" } */\n \n #include <stdio.h>\n #include <openacc.h>\n+#include <gomp-constants.h>\n \n int check (const int *ary, int size, int gp, int wp, int vp)\n {\n@@ -79,15 +76,12 @@ static int __attribute__((noinline)) place ()\n {\n   int r = 0;\n \n-  if (acc_on_device (acc_device_nvidia))\n-    {\n-      int g = 0, w = 0, v = 0;\n+  int g = 0, w = 0, v = 0;\n+  g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+  w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+  v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+  r = (g << 16) | (w << 8) | v;\n \n-      __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-      __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-      __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n-      r = (g << 16) | (w << 8) | v;\n-    }\n   return r;\n }\n "}, {"sha": "dd8107c1accf5134144a480c6ad80515c88f842e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,25 +1,23 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.  */\n-/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-additional-options \"-fopenacc-dim=16:16\" } */\n \n #include <openacc.h>\n #include <alloca.h>\n #include <string.h>\n #include <stdio.h>\n+#include <gomp-constants.h>\n \n #pragma acc routine\n static int __attribute__ ((noinline)) coord ()\n {\n   int res = 0;\n \n-  if (acc_on_device (acc_device_nvidia))\n+  if (acc_on_device (acc_device_not_host))\n     {\n-      int g = 0, w = 0, v = 0;\n+      int g, w, v;\n \n-      __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-      __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-      __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+      g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+      w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+      v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n       res = (1 << 24) | (g << 16) | (w << 8) | v;\n     }\n   return res;"}, {"sha": "98f02e9840abda024b0f0c5661d87f2f4ed9e19c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-g-1.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -20,13 +18,12 @@ int main ()\n #pragma acc loop gang\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n-\n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    int g, w, v;\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    ary[ix] = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "4152a4e6c82d43fb10cb3ae9eaa653d015a9872b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-g-2.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-2.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -20,13 +18,13 @@ int main ()\n #pragma acc loop gang (static:1)\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    ary[ix] = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "766e5782b463cdf7bb1690739eed6e2b0c810d82", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -20,13 +18,14 @@ int main ()\n #pragma acc loop gang worker vector\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n+\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n \t    ary[ix] = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "7107502e070662a1e733b739c3d4e2de3837ccf9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -18,13 +16,13 @@ int main ()\n       {\n \tint val = ix;\n \t\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    val = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "0bec6e19510a5ceff8d7fee94634f27f35517ef6", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -18,13 +16,13 @@ int main ()\n       {\n \tint val = ix;\n \t\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    val = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "da4921d15f98c882d0dcf3725f30e96e19e5a0bb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n \n@@ -19,13 +17,13 @@ int main ()\n       {\n \tint val = ix;\n \t\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    val = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "15e2bc2f83bf898aafded1f57abd359326850eca", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n \n@@ -21,13 +19,13 @@ int main ()\n       {\n \tint val = ix;\n \t\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    val = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "6bbd04fffeaa99e2d8319a3a225d2e0f4115cd98", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -18,13 +16,13 @@ int main ()\n       {\n \tint val = ix;\n \t\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    val = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "c63a5d4f808b51122e9c4ece51ddc2a828d65f4e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -20,13 +18,13 @@ int main ()\n       {\n \tint val = ix;\n \t\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    val = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "6743afaca6acc56171d0b83c6deb9e558f7db4e2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -2,6 +2,8 @@\n /* { dg-additional-options \"-O2\" } */\n \n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -17,13 +19,13 @@ int main ()\n       {\n \tint val = ix;\n \t\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    val = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "6010cd2498a6ec1423fcee49a9344e404629fa0c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-v-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -20,13 +18,13 @@ int main ()\n #pragma acc loop vector\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    ary[ix] = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "fa6fb9164e6365a082672fd45af5608152de511a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-w-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -20,13 +18,13 @@ int main ()\n #pragma acc loop worker\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    ary[ix] = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "cd4cc994b826493e7c0ae19c52a4b42f088a5abd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n int main ()\n@@ -20,13 +18,13 @@ int main ()\n #pragma acc loop worker vector\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    ary[ix] = (g << 16) | (w << 8) | v;\n \t    ondev = 1;\n \t  }"}, {"sha": "4a9854662cc5edccb05b15837c644bcc792a4989", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -3,6 +3,7 @@\n \n #include <limits.h>\n #include <openacc.h>\n+#include <gomp-constants.h>\n \n /* TODO: \"(int) acc_device_*\" casts because of the C++ acc_on_device wrapper\n    not behaving as expected for -O0.  */\n@@ -12,11 +13,7 @@ static unsigned int __attribute__ ((optimize (\"O2\"))) acc_gang ()\n   if (acc_on_device ((int) acc_device_host))\n     return 0;\n   else if (acc_on_device ((int) acc_device_nvidia))\n-    {\n-      unsigned int r;\n-      asm volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (r));\n-      return r;\n-    }\n+    return __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n   else\n     __builtin_abort ();\n }\n@@ -27,11 +24,7 @@ static unsigned int __attribute__ ((optimize (\"O2\"))) acc_worker ()\n   if (acc_on_device ((int) acc_device_host))\n     return 0;\n   else if (acc_on_device ((int) acc_device_nvidia))\n-    {\n-      unsigned int r;\n-      asm volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (r));\n-      return r;\n-    }\n+    return __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n   else\n     __builtin_abort ();\n }\n@@ -42,11 +35,7 @@ static unsigned int __attribute__ ((optimize (\"O2\"))) acc_vector ()\n   if (acc_on_device ((int) acc_device_host))\n     return 0;\n   else if (acc_on_device ((int) acc_device_nvidia))\n-    {\n-      unsigned int r;\n-      asm volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (r));\n-      return r;\n-    }\n+    return __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n   else\n     __builtin_abort ();\n }"}, {"sha": "a164f576bc3faa81b419693e1dc1508988e182b9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-g-1.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n \n@@ -12,13 +10,13 @@ void __attribute__ ((noinline)) gang (int ary[N])\n #pragma acc loop gang\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n-\tif (__builtin_acc_on_device (5))\n+\tif (acc_on_device (acc_device_not_host))\n \t  {\n-\t    int g = 0, w = 0, v = 0;\n+\t    int g, w, v;\n \n-\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t    w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t    v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t    ary[ix] = (g << 16) | (w << 8) | v;\n \t  }\n \telse\n@@ -38,7 +36,7 @@ int main ()\n   \n #pragma acc parallel num_gangs(32) copy(ary) copy(ondev)\n   {\n-    ondev = __builtin_acc_on_device (5);\n+    ondev = acc_on_device (acc_device_not_host);\n     gang (ary);\n   }\n "}, {"sha": "a97e046b687f8bccb03ee6c21f8c926c5f3c498c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n \n@@ -12,13 +10,13 @@ void __attribute__ ((noinline)) gang (int ary[N])\n #pragma acc loop gang worker vector\n   for (unsigned ix = 0; ix < N; ix++)\n     {\n-      if (__builtin_acc_on_device (5))\n+      if (acc_on_device (acc_device_not_host))\n \t{\n-\t  int g = 0, w = 0, v = 0;\n+\t  int g, w, v;\n \n-\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t  w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t  v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t  ary[ix] = (g << 16) | (w << 8) | v;\n \t}\n       else\n@@ -38,7 +36,7 @@ int main ()\n   \n #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(ary) copy(ondev)\n   {\n-    ondev = __builtin_acc_on_device (5);\n+    ondev = acc_on_device (acc_device_not_host);\n     gang (ary);\n   }\n "}, {"sha": "b1e3e3a596af9af115a7a9e184e62fad71ff807b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-v-1.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n \n@@ -12,13 +10,13 @@ void __attribute__ ((noinline)) vector (int ary[N])\n #pragma acc loop vector\n   for (unsigned ix = 0; ix < N; ix++)\n     {\n-      if (__builtin_acc_on_device (5))\n+      if (acc_on_device (acc_device_not_host))\n \t{\n-\t  int g = 0, w = 0, v = 0;\n+\t  int g, w, v;\n \n-\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t  w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t  v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t  ary[ix] = (g << 16) | (w << 8) | v;\n \t}\n       else\n@@ -38,7 +36,7 @@ int main ()\n   \n #pragma acc parallel vector_length(32) copy(ary) copy(ondev)\n   {\n-    ondev = __builtin_acc_on_device (5);\n+    ondev = acc_on_device (acc_device_not_host);\n     vector (ary);\n   }\n "}, {"sha": "81f1e0361c0d201e6d0fa5ce99fe30d3ec8579a8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-w-1.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n \n@@ -12,13 +10,13 @@ void __attribute__ ((noinline)) worker (int ary[N])\n #pragma acc loop worker\n   for (unsigned ix = 0; ix < N; ix++)\n     {\n-      if (__builtin_acc_on_device (5))\n+      if (acc_on_device (acc_device_not_host))\n \t{\n-\t  int g = 0, w = 0, v = 0;\n+\t  int g, w, v;\n \n-\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t  w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t  v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t  ary[ix] = (g << 16) | (w << 8) | v;\n \t}\n       else\n@@ -38,7 +36,7 @@ int main ()\n   \n #pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n   {\n-    ondev = __builtin_acc_on_device (5);\n+    ondev = acc_on_device (acc_device_not_host);\n     worker (ary);\n   }\n "}, {"sha": "23dbc1ae401474be1db016559d1792609c9cead4", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,8 +1,6 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n \n #define N (32*32*32+17)\n \n@@ -12,13 +10,13 @@ void __attribute__ ((noinline)) worker (int ary[N])\n #pragma acc loop worker vector\n   for (unsigned ix = 0; ix < N; ix++)\n     {\n-      if (__builtin_acc_on_device (5))\n+      if (acc_on_device (acc_device_not_host))\n \t{\n-\t  int g = 0, w = 0, v = 0;\n+\t  int g, w, v;\n \n-\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\t  w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\t  v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \t  ary[ix] = (g << 16) | (w << 8) | v;\n \t}\n       else\n@@ -38,7 +36,7 @@ int main ()\n   \n #pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n   {\n-    ondev = __builtin_acc_on_device (5);\n+    ondev = acc_on_device (acc_device_not_host);\n     worker (ary);\n   }\n "}, {"sha": "886214843f14d1674c5333972e13defef6de66db", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,25 +1,20 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n #include <stdio.h>\n #include <openacc.h>\n+#include <gomp-constants.h>\n \n #define NUM_WORKERS 16\n #define NUM_VECTORS 32\n #define WIDTH 64\n #define HEIGHT 32\n \n #define WORK_ID(I,N)\t\t\t\t\t\t\\\n-  (acc_on_device (acc_device_nvidia)\t\t\t\t\\\n-   ? ({unsigned __r;\t\t\t\t\t\t\\\n-       __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (__r));\t\\\n-       __r; }) : (I % N))\n+  (acc_on_device (acc_device_not_host)\t\t\t\t\\\n+   ? __builtin_goacc_parlevel_id (GOMP_DIM_WORKER)\t\t\t\t\\\n+   : (I % N))\n #define VEC_ID(I,N)\t\t\t\t\t\t\\\n-  (acc_on_device (acc_device_nvidia)\t\t\t\t\\\n-   ? ({unsigned __r;\t\t\t\t\t\t\\\n-       __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (__r));\t\\\n-       __r; }) : (I % N))\n+  (acc_on_device (acc_device_not_host)\t\t\t\t\\\n+   ? __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR)\t\t\t\t\\\n+   : (I % N))\n \n #pragma acc routine worker\n void __attribute__ ((noinline))"}, {"sha": "5130591dd818d8edbcc934211c9b629713a8865b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/tile-1.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f62d6375bb12008bb152af13eab7eb83b458a1e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c?ref=1f62d6375bb12008bb152af13eab7eb83b458a1e", "patch": "@@ -1,11 +1,8 @@\n-/* This code uses nvptx inline assembly guarded with acc_on_device, which is\n-   not optimized away at -O0, and then confuses the target assembler.\n-   { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-\n /* { dg-additional-options \"-fopenacc-dim=32\" } */\n \n #include <stdio.h>\n #include <openacc.h>\n+#include <gomp-constants.h>\n \n static int check (const int *ary, int size, int gp, int wp, int vp)\n {\n@@ -79,13 +76,13 @@ static int __attribute__((noinline)) place ()\n {\n   int r = 0;\n \n-  if (acc_on_device (acc_device_nvidia))\n+  if (acc_on_device (acc_device_not_host))\n     {\n-      int g = 0, w = 0, v = 0;\n+      int g, w, v;\n \n-      __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n-      __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n-      __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+      g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+      w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+      v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n       r = (g << 16) | (w << 8) | v;\n     }\n   return r;"}]}