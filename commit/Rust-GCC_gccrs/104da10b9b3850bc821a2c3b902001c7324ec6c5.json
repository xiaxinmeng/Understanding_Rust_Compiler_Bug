{"sha": "104da10b9b3850bc821a2c3b902001c7324ec6c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0ZGExMGI5YjM4NTBiYzgyMWEyYzNiOTAyMDAxYzczMjRlYzZjNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-04T12:56:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-04T12:56:59Z"}, "message": "Remove extra ^M characters introduced in previous commit.\n\nFrom-SVN: r73251", "tree": {"sha": "4d811b3a263e2540bcf3012c48d687e753c78625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d811b3a263e2540bcf3012c48d687e753c78625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/104da10b9b3850bc821a2c3b902001c7324ec6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104da10b9b3850bc821a2c3b902001c7324ec6c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104da10b9b3850bc821a2c3b902001c7324ec6c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104da10b9b3850bc821a2c3b902001c7324ec6c5/comments", "author": null, "committer": null, "parents": [{"sha": "12e0c41c113e68854ec71f059c7dc19e03a7dcf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e0c41c113e68854ec71f059c7dc19e03a7dcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e0c41c113e68854ec71f059c7dc19e03a7dcf6"}], "stats": {"total": 4818, "additions": 2409, "deletions": 2409}, "files": [{"sha": "829c1a686b4c9097883a29e80a7c7081c0fc5d21", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 994, "deletions": 994, "changes": 1988, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104da10b9b3850bc821a2c3b902001c7324ec6c5/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104da10b9b3850bc821a2c3b902001c7324ec6c5/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=104da10b9b3850bc821a2c3b902001c7324ec6c5", "patch": "@@ -1,994 +1,994 @@\n-------------------------------------------------------------------------------\r\n---                                                                          --\r\n---                         GNAT COMPILER COMPONENTS                         --\r\n---                                                                          --\r\n---                               S N A M E S                                --\r\n---                                                                          --\r\n---                                 B o d y                                  --\r\n---                                                                          --\r\n---          Copyright (C) 1992-2003, Free Software Foundation, Inc.         --\r\n---                                                                          --\r\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\r\n--- terms of the  GNU General Public License as published  by the Free Soft- --\r\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\r\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\r\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\r\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\r\n--- for  more details.  You should have  received  a copy of the GNU General --\r\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\r\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\r\n--- MA 02111-1307, USA.                                                      --\r\n---                                                                          --\r\n--- As a special exception,  if other files  instantiate  generics from this --\r\n--- unit, or you link  this unit with other files  to produce an executable, --\r\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\r\n--- covered  by the  GNU  General  Public  License.  This exception does not --\r\n--- however invalidate  any other reasons why  the executable file  might be --\r\n--- covered by the  GNU Public License.                                      --\r\n---                                                                          --\r\n--- GNAT was originally developed  by the GNAT team at  New York University. --\r\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\r\n---                                                                          --\r\n-------------------------------------------------------------------------------\r\n-\r\n-with Namet; use Namet;\r\n-with Table;\r\n-\r\n-package body Snames is\r\n-\r\n-   --  Table used to record convention identifiers\r\n-\r\n-   type Convention_Id_Entry is record\r\n-      Name       : Name_Id;\r\n-      Convention : Convention_Id;\r\n-   end record;\r\n-\r\n-   package Convention_Identifiers is new Table.Table (\r\n-     Table_Component_Type => Convention_Id_Entry,\r\n-     Table_Index_Type     => Int,\r\n-     Table_Low_Bound      => 1,\r\n-     Table_Initial        => 50,\r\n-     Table_Increment      => 200,\r\n-     Table_Name           => \"Name_Convention_Identifiers\");\r\n-\r\n-   --  Table of names to be set by Initialize. Each name is terminated by a\r\n-   --  single #, and the end of the list is marked by a null entry, i.e. by\r\n-   --  two # marks in succession. Note that the table does not include the\r\n-   --  entries for a-z, since these are initialized by Namet itself.\r\n-\r\n-   Preset_Names : constant String :=\r\n-     \"_parent#\" &\r\n-     \"_tag#\" &\r\n-     \"off#\" &\r\n-     \"space#\" &\r\n-     \"time#\" &\r\n-     \"_abort_signal#\" &\r\n-     \"_alignment#\" &\r\n-     \"_assign#\" &\r\n-     \"_chain#\" &\r\n-     \"_clean#\" &\r\n-     \"_controller#\" &\r\n-     \"_entry_bodies#\" &\r\n-     \"_expunge#\" &\r\n-     \"_final_list#\" &\r\n-     \"_idepth#\" &\r\n-     \"_init#\" &\r\n-     \"_local_final_list#\" &\r\n-     \"_master#\" &\r\n-     \"_object#\" &\r\n-     \"_priority#\" &\r\n-     \"_process_atsd#\" &\r\n-     \"_secondary_stack#\" &\r\n-     \"_service#\" &\r\n-     \"_size#\" &\r\n-     \"_tags#\" &\r\n-     \"_task#\" &\r\n-     \"_task_id#\" &\r\n-     \"_task_info#\" &\r\n-     \"_task_name#\" &\r\n-     \"_trace_sp#\" &\r\n-     \"initialize#\" &\r\n-     \"adjust#\" &\r\n-     \"finalize#\" &\r\n-     \"next#\" &\r\n-     \"prev#\" &\r\n-     \"allocate#\" &\r\n-     \"deallocate#\" &\r\n-     \"dereference#\" &\r\n-     \"decimal_io#\" &\r\n-     \"enumeration_io#\" &\r\n-     \"fixed_io#\" &\r\n-     \"float_io#\" &\r\n-     \"integer_io#\" &\r\n-     \"modular_io#\" &\r\n-     \"a_textio#\" &\r\n-     \"a_witeio#\" &\r\n-     \"const#\" &\r\n-     \"<error>#\" &\r\n-     \"go#\" &\r\n-     \"put#\" &\r\n-     \"put_line#\" &\r\n-     \"to#\" &\r\n-     \"finalization#\" &\r\n-     \"finalization_root#\" &\r\n-     \"interfaces#\" &\r\n-     \"standard#\" &\r\n-     \"system#\" &\r\n-     \"text_io#\" &\r\n-     \"wide_text_io#\" &\r\n-     \"addr#\" &\r\n-     \"async#\" &\r\n-     \"get_active_partition_id#\" &\r\n-     \"get_rci_package_receiver#\" &\r\n-     \"origin#\" &\r\n-     \"params#\" &\r\n-     \"partition#\" &\r\n-     \"partition_interface#\" &\r\n-     \"ras#\" &\r\n-     \"rci_name#\" &\r\n-     \"receiver#\" &\r\n-     \"result#\" &\r\n-     \"rpc#\" &\r\n-     \"subp_id#\" &\r\n-     \"Oabs#\" &\r\n-     \"Oand#\" &\r\n-     \"Omod#\" &\r\n-     \"Onot#\" &\r\n-     \"Oor#\" &\r\n-     \"Orem#\" &\r\n-     \"Oxor#\" &\r\n-     \"Oeq#\" &\r\n-     \"One#\" &\r\n-     \"Olt#\" &\r\n-     \"Ole#\" &\r\n-     \"Ogt#\" &\r\n-     \"Oge#\" &\r\n-     \"Oadd#\" &\r\n-     \"Osubtract#\" &\r\n-     \"Oconcat#\" &\r\n-     \"Omultiply#\" &\r\n-     \"Odivide#\" &\r\n-     \"Oexpon#\" &\r\n-     \"ada_83#\" &\r\n-     \"ada_95#\" &\r\n-     \"c_pass_by_copy#\" &\r\n-     \"compile_time_warning#\" &\r\n-     \"component_alignment#\" &\r\n-     \"convention_identifier#\" &\r\n-     \"discard_names#\" &\r\n-     \"elaboration_checks#\" &\r\n-     \"eliminate#\" &\r\n-     \"explicit_overriding#\" &\r\n-     \"extend_system#\" &\r\n-     \"extensions_allowed#\" &\r\n-     \"external_name_casing#\" &\r\n-     \"float_representation#\" &\r\n-     \"initialize_scalars#\" &\r\n-     \"interrupt_state#\" &\r\n-     \"license#\" &\r\n-     \"locking_policy#\" &\r\n-     \"long_float#\" &\r\n-     \"no_run_time#\" &\r\n-     \"normalize_scalars#\" &\r\n-     \"polling#\" &\r\n-     \"persistent_data#\" &\r\n-     \"persistent_object#\" &\r\n-     \"propagate_exceptions#\" &\r\n-     \"queuing_policy#\" &\r\n-     \"ravenscar#\" &\r\n-     \"restricted_run_time#\" &\r\n-     \"restrictions#\" &\r\n-     \"restriction_warnings#\" &\r\n-     \"reviewable#\" &\r\n-     \"source_file_name#\" &\r\n-     \"source_file_name_project#\" &\r\n-     \"style_checks#\" &\r\n-     \"suppress#\" &\r\n-     \"suppress_exception_locations#\" &\r\n-     \"task_dispatching_policy#\" &\r\n-     \"universal_data#\" &\r\n-     \"unsuppress#\" &\r\n-     \"use_vads_size#\" &\r\n-     \"validity_checks#\" &\r\n-     \"warnings#\" &\r\n-     \"abort_defer#\" &\r\n-     \"all_calls_remote#\" &\r\n-     \"annotate#\" &\r\n-     \"assert#\" &\r\n-     \"asynchronous#\" &\r\n-     \"atomic#\" &\r\n-     \"atomic_components#\" &\r\n-     \"attach_handler#\" &\r\n-     \"comment#\" &\r\n-     \"common_object#\" &\r\n-     \"complex_representation#\" &\r\n-     \"controlled#\" &\r\n-     \"convention#\" &\r\n-     \"cpp_class#\" &\r\n-     \"cpp_constructor#\" &\r\n-     \"cpp_virtual#\" &\r\n-     \"cpp_vtable#\" &\r\n-     \"debug#\" &\r\n-     \"elaborate#\" &\r\n-     \"elaborate_all#\" &\r\n-     \"elaborate_body#\" &\r\n-     \"export#\" &\r\n-     \"export_exception#\" &\r\n-     \"export_function#\" &\r\n-     \"export_object#\" &\r\n-     \"export_procedure#\" &\r\n-     \"export_value#\" &\r\n-     \"export_valued_procedure#\" &\r\n-     \"external#\" &\r\n-     \"finalize_storage_only#\" &\r\n-     \"ident#\" &\r\n-     \"import#\" &\r\n-     \"import_exception#\" &\r\n-     \"import_function#\" &\r\n-     \"import_object#\" &\r\n-     \"import_procedure#\" &\r\n-     \"import_valued_procedure#\" &\r\n-     \"inline#\" &\r\n-     \"inline_always#\" &\r\n-     \"inline_generic#\" &\r\n-     \"inspection_point#\" &\r\n-     \"interface#\" &\r\n-     \"interface_name#\" &\r\n-     \"interrupt_handler#\" &\r\n-     \"interrupt_priority#\" &\r\n-     \"java_constructor#\" &\r\n-     \"java_interface#\" &\r\n-     \"keep_names#\" &\r\n-     \"link_with#\" &\r\n-     \"linker_alias#\" &\r\n-     \"linker_options#\" &\r\n-     \"linker_section#\" &\r\n-     \"list#\" &\r\n-     \"machine_attribute#\" &\r\n-     \"main#\" &\r\n-     \"main_storage#\" &\r\n-     \"memory_size#\" &\r\n-     \"no_return#\" &\r\n-     \"obsolescent#\" &\r\n-     \"optimize#\" &\r\n-     \"optional_overriding#\" &\r\n-     \"overriding#\" &\r\n-     \"pack#\" &\r\n-     \"page#\" &\r\n-     \"passive#\" &\r\n-     \"preelaborate#\" &\r\n-     \"priority#\" &\r\n-     \"psect_object#\" &\r\n-     \"pure#\" &\r\n-     \"pure_function#\" &\r\n-     \"remote_call_interface#\" &\r\n-     \"remote_types#\" &\r\n-     \"share_generic#\" &\r\n-     \"shared#\" &\r\n-     \"shared_passive#\" &\r\n-     \"source_reference#\" &\r\n-     \"stream_convert#\" &\r\n-     \"subtitle#\" &\r\n-     \"suppress_all#\" &\r\n-     \"suppress_debug_info#\" &\r\n-     \"suppress_initialization#\" &\r\n-     \"system_name#\" &\r\n-     \"task_info#\" &\r\n-     \"task_name#\" &\r\n-     \"task_storage#\" &\r\n-     \"thread_body#\" &\r\n-     \"time_slice#\" &\r\n-     \"title#\" &\r\n-     \"unchecked_union#\" &\r\n-     \"unimplemented_unit#\" &\r\n-     \"unreferenced#\" &\r\n-     \"unreserve_all_interrupts#\" &\r\n-     \"volatile#\" &\r\n-     \"volatile_components#\" &\r\n-     \"weak_external#\" &\r\n-     \"ada#\" &\r\n-     \"assembler#\" &\r\n-     \"cobol#\" &\r\n-     \"cpp#\" &\r\n-     \"fortran#\" &\r\n-     \"intrinsic#\" &\r\n-     \"java#\" &\r\n-     \"stdcall#\" &\r\n-     \"stubbed#\" &\r\n-     \"asm#\" &\r\n-     \"assembly#\" &\r\n-     \"default#\" &\r\n-     \"dll#\" &\r\n-     \"win32#\" &\r\n-     \"as_is#\" &\r\n-     \"body_file_name#\" &\r\n-     \"casing#\" &\r\n-     \"code#\" &\r\n-     \"component#\" &\r\n-     \"component_size_4#\" &\r\n-     \"copy#\" &\r\n-     \"d_float#\" &\r\n-     \"descriptor#\" &\r\n-     \"dot_replacement#\" &\r\n-     \"dynamic#\" &\r\n-     \"entity#\" &\r\n-     \"external_name#\" &\r\n-     \"first_optional_parameter#\" &\r\n-     \"form#\" &\r\n-     \"g_float#\" &\r\n-     \"gcc#\" &\r\n-     \"gnat#\" &\r\n-     \"gpl#\" &\r\n-     \"ieee_float#\" &\r\n-     \"homonym_number#\" &\r\n-     \"internal#\" &\r\n-     \"link_name#\" &\r\n-     \"lowercase#\" &\r\n-     \"max_size#\" &\r\n-     \"mechanism#\" &\r\n-     \"mixedcase#\" &\r\n-     \"modified_gpl#\" &\r\n-     \"name#\" &\r\n-     \"nca#\" &\r\n-     \"no#\" &\r\n-     \"on#\" &\r\n-     \"parameter_types#\" &\r\n-     \"reference#\" &\r\n-     \"restricted#\" &\r\n-     \"result_mechanism#\" &\r\n-     \"result_type#\" &\r\n-     \"runtime#\" &\r\n-     \"sb#\" &\r\n-     \"secondary_stack_size#\" &\r\n-     \"section#\" &\r\n-     \"semaphore#\" &\r\n-     \"spec_file_name#\" &\r\n-     \"static#\" &\r\n-     \"stack_size#\" &\r\n-     \"subunit_file_name#\" &\r\n-     \"task_stack_size_default#\" &\r\n-     \"task_type#\" &\r\n-     \"time_slicing_enabled#\" &\r\n-     \"top_guard#\" &\r\n-     \"uba#\" &\r\n-     \"ubs#\" &\r\n-     \"ubsb#\" &\r\n-     \"unit_name#\" &\r\n-     \"unknown#\" &\r\n-     \"unrestricted#\" &\r\n-     \"uppercase#\" &\r\n-     \"user#\" &\r\n-     \"vax_float#\" &\r\n-     \"vms#\" &\r\n-     \"working_storage#\" &\r\n-     \"abort_signal#\" &\r\n-     \"access#\" &\r\n-     \"address#\" &\r\n-     \"address_size#\" &\r\n-     \"aft#\" &\r\n-     \"alignment#\" &\r\n-     \"asm_input#\" &\r\n-     \"asm_output#\" &\r\n-     \"ast_entry#\" &\r\n-     \"bit#\" &\r\n-     \"bit_order#\" &\r\n-     \"bit_position#\" &\r\n-     \"body_version#\" &\r\n-     \"callable#\" &\r\n-     \"caller#\" &\r\n-     \"code_address#\" &\r\n-     \"component_size#\" &\r\n-     \"compose#\" &\r\n-     \"constrained#\" &\r\n-     \"count#\" &\r\n-     \"default_bit_order#\" &\r\n-     \"definite#\" &\r\n-     \"delta#\" &\r\n-     \"denorm#\" &\r\n-     \"digits#\" &\r\n-     \"elaborated#\" &\r\n-     \"emax#\" &\r\n-     \"enum_rep#\" &\r\n-     \"epsilon#\" &\r\n-     \"exponent#\" &\r\n-     \"external_tag#\" &\r\n-     \"first#\" &\r\n-     \"first_bit#\" &\r\n-     \"fixed_value#\" &\r\n-     \"fore#\" &\r\n-     \"has_discriminants#\" &\r\n-     \"identity#\" &\r\n-     \"img#\" &\r\n-     \"integer_value#\" &\r\n-     \"large#\" &\r\n-     \"last#\" &\r\n-     \"last_bit#\" &\r\n-     \"leading_part#\" &\r\n-     \"length#\" &\r\n-     \"machine_emax#\" &\r\n-     \"machine_emin#\" &\r\n-     \"machine_mantissa#\" &\r\n-     \"machine_overflows#\" &\r\n-     \"machine_radix#\" &\r\n-     \"machine_rounds#\" &\r\n-     \"machine_size#\" &\r\n-     \"mantissa#\" &\r\n-     \"max_size_in_storage_elements#\" &\r\n-     \"maximum_alignment#\" &\r\n-     \"mechanism_code#\" &\r\n-     \"model_emin#\" &\r\n-     \"model_epsilon#\" &\r\n-     \"model_mantissa#\" &\r\n-     \"model_small#\" &\r\n-     \"modulus#\" &\r\n-     \"null_parameter#\" &\r\n-     \"object_size#\" &\r\n-     \"partition_id#\" &\r\n-     \"passed_by_reference#\" &\r\n-     \"pool_address#\" &\r\n-     \"pos#\" &\r\n-     \"position#\" &\r\n-     \"range#\" &\r\n-     \"range_length#\" &\r\n-     \"round#\" &\r\n-     \"safe_emax#\" &\r\n-     \"safe_first#\" &\r\n-     \"safe_large#\" &\r\n-     \"safe_last#\" &\r\n-     \"safe_small#\" &\r\n-     \"scale#\" &\r\n-     \"scaling#\" &\r\n-     \"signed_zeros#\" &\r\n-     \"size#\" &\r\n-     \"small#\" &\r\n-     \"storage_size#\" &\r\n-     \"storage_unit#\" &\r\n-     \"tag#\" &\r\n-     \"target_name#\" &\r\n-     \"terminated#\" &\r\n-     \"to_address#\" &\r\n-     \"type_class#\" &\r\n-     \"uet_address#\" &\r\n-     \"unbiased_rounding#\" &\r\n-     \"unchecked_access#\" &\r\n-     \"unconstrained_array#\" &\r\n-     \"universal_literal_string#\" &\r\n-     \"unrestricted_access#\" &\r\n-     \"vads_size#\" &\r\n-     \"val#\" &\r\n-     \"valid#\" &\r\n-     \"value_size#\" &\r\n-     \"version#\" &\r\n-     \"wchar_t_size#\" &\r\n-     \"wide_width#\" &\r\n-     \"width#\" &\r\n-     \"word_size#\" &\r\n-     \"adjacent#\" &\r\n-     \"ceiling#\" &\r\n-     \"copy_sign#\" &\r\n-     \"floor#\" &\r\n-     \"fraction#\" &\r\n-     \"image#\" &\r\n-     \"input#\" &\r\n-     \"machine#\" &\r\n-     \"max#\" &\r\n-     \"min#\" &\r\n-     \"model#\" &\r\n-     \"pred#\" &\r\n-     \"remainder#\" &\r\n-     \"rounding#\" &\r\n-     \"succ#\" &\r\n-     \"truncation#\" &\r\n-     \"value#\" &\r\n-     \"wide_image#\" &\r\n-     \"wide_value#\" &\r\n-     \"output#\" &\r\n-     \"read#\" &\r\n-     \"write#\" &\r\n-     \"elab_body#\" &\r\n-     \"elab_spec#\" &\r\n-     \"storage_pool#\" &\r\n-     \"base#\" &\r\n-     \"class#\" &\r\n-     \"ceiling_locking#\" &\r\n-     \"inheritance_locking#\" &\r\n-     \"fifo_queuing#\" &\r\n-     \"priority_queuing#\" &\r\n-     \"fifo_within_priorities#\" &\r\n-     \"access_check#\" &\r\n-     \"accessibility_check#\" &\r\n-     \"discriminant_check#\" &\r\n-     \"division_check#\" &\r\n-     \"elaboration_check#\" &\r\n-     \"index_check#\" &\r\n-     \"length_check#\" &\r\n-     \"overflow_check#\" &\r\n-     \"range_check#\" &\r\n-     \"storage_check#\" &\r\n-     \"tag_check#\" &\r\n-     \"all_checks#\" &\r\n-     \"abort#\" &\r\n-     \"abs#\" &\r\n-     \"accept#\" &\r\n-     \"and#\" &\r\n-     \"all#\" &\r\n-     \"array#\" &\r\n-     \"at#\" &\r\n-     \"begin#\" &\r\n-     \"body#\" &\r\n-     \"case#\" &\r\n-     \"constant#\" &\r\n-     \"declare#\" &\r\n-     \"delay#\" &\r\n-     \"do#\" &\r\n-     \"else#\" &\r\n-     \"elsif#\" &\r\n-     \"end#\" &\r\n-     \"entry#\" &\r\n-     \"exception#\" &\r\n-     \"exit#\" &\r\n-     \"for#\" &\r\n-     \"function#\" &\r\n-     \"generic#\" &\r\n-     \"goto#\" &\r\n-     \"if#\" &\r\n-     \"in#\" &\r\n-     \"is#\" &\r\n-     \"limited#\" &\r\n-     \"loop#\" &\r\n-     \"mod#\" &\r\n-     \"new#\" &\r\n-     \"not#\" &\r\n-     \"null#\" &\r\n-     \"of#\" &\r\n-     \"or#\" &\r\n-     \"others#\" &\r\n-     \"out#\" &\r\n-     \"package#\" &\r\n-     \"pragma#\" &\r\n-     \"private#\" &\r\n-     \"procedure#\" &\r\n-     \"raise#\" &\r\n-     \"record#\" &\r\n-     \"rem#\" &\r\n-     \"renames#\" &\r\n-     \"return#\" &\r\n-     \"reverse#\" &\r\n-     \"select#\" &\r\n-     \"separate#\" &\r\n-     \"subtype#\" &\r\n-     \"task#\" &\r\n-     \"terminate#\" &\r\n-     \"then#\" &\r\n-     \"type#\" &\r\n-     \"use#\" &\r\n-     \"when#\" &\r\n-     \"while#\" &\r\n-     \"with#\" &\r\n-     \"xor#\" &\r\n-     \"divide#\" &\r\n-     \"enclosing_entity#\" &\r\n-     \"exception_information#\" &\r\n-     \"exception_message#\" &\r\n-     \"exception_name#\" &\r\n-     \"file#\" &\r\n-     \"import_address#\" &\r\n-     \"import_largest_value#\" &\r\n-     \"import_value#\" &\r\n-     \"is_negative#\" &\r\n-     \"line#\" &\r\n-     \"rotate_left#\" &\r\n-     \"rotate_right#\" &\r\n-     \"shift_left#\" &\r\n-     \"shift_right#\" &\r\n-     \"shift_right_arithmetic#\" &\r\n-     \"source_location#\" &\r\n-     \"unchecked_conversion#\" &\r\n-     \"unchecked_deallocation#\" &\r\n-     \"to_pointer#\" &\r\n-     \"abstract#\" &\r\n-     \"aliased#\" &\r\n-     \"protected#\" &\r\n-     \"until#\" &\r\n-     \"requeue#\" &\r\n-     \"tagged#\" &\r\n-     \"raise_exception#\" &\r\n-     \"binder#\" &\r\n-     \"body_suffix#\" &\r\n-     \"builder#\" &\r\n-     \"compiler#\" &\r\n-     \"cross_reference#\" &\r\n-     \"default_switches#\" &\r\n-     \"exec_dir#\" &\r\n-     \"executable#\" &\r\n-     \"executable_suffix#\" &\r\n-     \"extends#\" &\r\n-     \"finder#\" &\r\n-     \"global_configuration_pragmas#\" &\r\n-     \"gnatls#\" &\r\n-     \"gnatstub#\" &\r\n-     \"implementation#\" &\r\n-     \"implementation_exceptions#\" &\r\n-     \"implementation_suffix#\" &\r\n-     \"languages#\" &\r\n-     \"library_dir#\" &\r\n-     \"library_auto_init#\" &\r\n-     \"library_gcc#\" &\r\n-     \"library_interface#\" &\r\n-     \"library_kind#\" &\r\n-     \"library_name#\" &\r\n-     \"library_options#\" &\r\n-     \"library_src_dir#\" &\r\n-     \"library_symbol_file#\" &\r\n-     \"library_version#\" &\r\n-     \"linker#\" &\r\n-     \"local_configuration_pragmas#\" &\r\n-     \"locally_removed_files#\" &\r\n-     \"naming#\" &\r\n-     \"object_dir#\" &\r\n-     \"pretty_printer#\" &\r\n-     \"project#\" &\r\n-     \"separate_suffix#\" &\r\n-     \"source_dirs#\" &\r\n-     \"source_files#\" &\r\n-     \"source_list_file#\" &\r\n-     \"spec#\" &\r\n-     \"spec_suffix#\" &\r\n-     \"specification#\" &\r\n-     \"specification_exceptions#\" &\r\n-     \"specification_suffix#\" &\r\n-     \"switches#\" &\r\n-     \"unaligned_valid#\" &\r\n-      \"#\";\r\n-\r\n-   ---------------------\r\n-   -- Generated Names --\r\n-   ---------------------\r\n-\r\n-   --  This section lists the various cases of generated names which are\r\n-   --  built from existing names by adding unique leading and/or trailing\r\n-   --  upper case letters. In some cases these names are built recursively,\r\n-   --  in particular names built from types may be built from types which\r\n-   --  themselves have generated names. In this list, xxx represents an\r\n-   --  existing name to which identifying letters are prepended or appended,\r\n-   --  and a trailing n represents a serial number in an external name that\r\n-   --  has some semantic significance (e.g. the n'th index type of an array).\r\n-\r\n-   --    xxxA    access type for formal xxx in entry param record   (Exp_Ch9)\r\n-   --    xxxB    tag table for tagged type xxx                      (Exp_Ch3)\r\n-   --    xxxB    task body procedure for task xxx                   (Exp_Ch9)\r\n-   --    xxxD    dispatch table for tagged type xxx                 (Exp_Ch3)\r\n-   --    xxxD    discriminal for discriminant xxx                   (Sem_Ch3)\r\n-   --    xxxDn   n'th discr check function for rec type xxx         (Exp_Ch3)\r\n-   --    xxxE    elaboration boolean flag for task xxx              (Exp_Ch9)\r\n-   --    xxxE    dispatch table pointer type for tagged type xxx    (Exp_Ch3)\r\n-   --    xxxE    parameters for accept body for entry xxx           (Exp_Ch9)\r\n-   --    xxxFn   n'th primitive of a tagged type (named xxx)        (Exp_Ch3)\r\n-   --    xxxJ    tag table type index for tagged type xxx           (Exp_Ch3)\r\n-   --    xxxM    master Id value for access type xxx                (Exp_Ch3)\r\n-   --    xxxP    tag table pointer type for tagged type xxx         (Exp_Ch3)\r\n-   --    xxxP    parameter record type for entry xxx                (Exp_Ch9)\r\n-   --    xxxPA   access to parameter record type for entry xxx      (Exp_Ch9)\r\n-   --    xxxPn   pointer type for n'th primitive of tagged type xxx (Exp_Ch3)\r\n-   --    xxxR    dispatch table pointer for tagged type xxx         (Exp_Ch3)\r\n-   --    xxxT    tag table type for tagged type xxx                 (Exp_Ch3)\r\n-   --    xxxT    literal table for enumeration type xxx             (Sem_Ch3)\r\n-   --    xxxV    type for task value record for task xxx            (Exp_Ch9)\r\n-   --    xxxX    entry index constant                               (Exp_Ch9)\r\n-   --    xxxY    dispatch table type for tagged type xxx            (Exp_Ch3)\r\n-   --    xxxZ    size variable for task xxx                         (Exp_Ch9)\r\n-\r\n-   --  TSS names\r\n-\r\n-   --    xxxDA   deep adjust routine for type xxx                   (Exp_TSS)\r\n-   --    xxxDF   deep finalize routine for type xxx                 (Exp_TSS)\r\n-   --    xxxDI   deep initialize routine for type xxx               (Exp_TSS)\r\n-   --    xxxEQ   composite equality routine for record type xxx     (Exp_TSS)\r\n-   --    xxxIP   initialization procedure for type xxx              (Exp_TSS)\r\n-   --    xxxRA   RAs type access routine for type xxx               (Exp_TSS)\r\n-   --    xxxRD   RAs type dereference routine for type xxx          (Exp_TSS)\r\n-   --    xxxRP   Rep to Pos conversion for enumeration type xxx     (Exp_TSS)\r\n-   --    xxxSI   stream input attribute subprogram for type xxx     (Exp_TSS)\r\n-   --    xxxSO   stream output attribute subprogram for type xxx    (Exp_TSS)\r\n-   --    xxxSR   stream read attribute subprogram for type xxx      (Exp_TSS)\r\n-   --    xxxSW   stream write attribute subprogram for type xxx     (Exp_TSS)\r\n-\r\n-   --  Implicit type names\r\n-\r\n-   --    TxxxT   type of literal table for enumeration type xxx     (Sem_Ch3)\r\n-\r\n-   --  (Note: this list is not complete or accurate ???)\r\n-\r\n-   ----------------------\r\n-   -- Get_Attribute_Id --\r\n-   ----------------------\r\n-\r\n-   function Get_Attribute_Id (N : Name_Id) return Attribute_Id is\r\n-   begin\r\n-      return Attribute_Id'Val (N - First_Attribute_Name);\r\n-   end Get_Attribute_Id;\r\n-\r\n-   ------------------\r\n-   -- Get_Check_Id --\r\n-   ------------------\r\n-\r\n-   function Get_Check_Id (N : Name_Id) return Check_Id is\r\n-   begin\r\n-      return Check_Id'Val (N - First_Check_Name);\r\n-   end Get_Check_Id;\r\n-\r\n-   -----------------------\r\n-   -- Get_Convention_Id --\r\n-   -----------------------\r\n-\r\n-   function Get_Convention_Id (N : Name_Id) return Convention_Id is\r\n-   begin\r\n-      case N is\r\n-         when Name_Ada        => return Convention_Ada;\r\n-         when Name_Assembler  => return Convention_Assembler;\r\n-         when Name_C          => return Convention_C;\r\n-         when Name_COBOL      => return Convention_COBOL;\r\n-         when Name_CPP        => return Convention_CPP;\r\n-         when Name_Fortran    => return Convention_Fortran;\r\n-         when Name_Intrinsic  => return Convention_Intrinsic;\r\n-         when Name_Java       => return Convention_Java;\r\n-         when Name_Stdcall    => return Convention_Stdcall;\r\n-         when Name_Stubbed    => return Convention_Stubbed;\r\n-\r\n-         --  If no direct match, then we must have a convention\r\n-         --  identifier pragma that has specified this name.\r\n-\r\n-         when others          =>\r\n-            for J in 1 .. Convention_Identifiers.Last loop\r\n-               if N = Convention_Identifiers.Table (J).Name then\r\n-                  return Convention_Identifiers.Table (J).Convention;\r\n-               end if;\r\n-            end loop;\r\n-\r\n-            raise Program_Error;\r\n-      end case;\r\n-   end Get_Convention_Id;\r\n-\r\n-   ---------------------------\r\n-   -- Get_Locking_Policy_Id --\r\n-   ---------------------------\r\n-\r\n-   function Get_Locking_Policy_Id (N : Name_Id) return Locking_Policy_Id is\r\n-   begin\r\n-      return Locking_Policy_Id'Val (N - First_Locking_Policy_Name);\r\n-   end Get_Locking_Policy_Id;\r\n-\r\n-   -------------------\r\n-   -- Get_Pragma_Id --\r\n-   -------------------\r\n-\r\n-   function Get_Pragma_Id (N : Name_Id) return Pragma_Id is\r\n-   begin\r\n-      if N = Name_AST_Entry then\r\n-         return Pragma_AST_Entry;\r\n-      elsif N = Name_Storage_Size then\r\n-         return Pragma_Storage_Size;\r\n-      elsif N = Name_Storage_Unit then\r\n-         return Pragma_Storage_Unit;\r\n-      elsif N not in First_Pragma_Name .. Last_Pragma_Name then\r\n-         return Unknown_Pragma;\r\n-      else\r\n-         return Pragma_Id'Val (N - First_Pragma_Name);\r\n-      end if;\r\n-   end Get_Pragma_Id;\r\n-\r\n-   ---------------------------\r\n-   -- Get_Queuing_Policy_Id --\r\n-   ---------------------------\r\n-\r\n-   function Get_Queuing_Policy_Id (N : Name_Id) return Queuing_Policy_Id is\r\n-   begin\r\n-      return Queuing_Policy_Id'Val (N - First_Queuing_Policy_Name);\r\n-   end Get_Queuing_Policy_Id;\r\n-\r\n-   ------------------------------------\r\n-   -- Get_Task_Dispatching_Policy_Id --\r\n-   ------------------------------------\r\n-\r\n-   function Get_Task_Dispatching_Policy_Id (N : Name_Id)\r\n-     return Task_Dispatching_Policy_Id is\r\n-   begin\r\n-      return Task_Dispatching_Policy_Id'Val\r\n-        (N - First_Task_Dispatching_Policy_Name);\r\n-   end Get_Task_Dispatching_Policy_Id;\r\n-\r\n-   ----------------\r\n-   -- Initialize --\r\n-   ----------------\r\n-\r\n-   procedure Initialize is\r\n-      P_Index      : Natural;\r\n-      Discard_Name : Name_Id;\r\n-\r\n-   begin\r\n-      P_Index := Preset_Names'First;\r\n-\r\n-      loop\r\n-         Name_Len := 0;\r\n-\r\n-         while Preset_Names (P_Index) /= '#' loop\r\n-            Name_Len := Name_Len + 1;\r\n-            Name_Buffer (Name_Len) := Preset_Names (P_Index);\r\n-            P_Index := P_Index + 1;\r\n-         end loop;\r\n-\r\n-         --  We do the Name_Find call to enter the name into the table, but\r\n-         --  we don't need to do anything with the result, since we already\r\n-         --  initialized all the preset names to have the right value (we\r\n-         --  are depending on the order of the names and Preset_Names).\r\n-\r\n-         Discard_Name := Name_Find;\r\n-         P_Index := P_Index + 1;\r\n-         exit when Preset_Names (P_Index) = '#';\r\n-      end loop;\r\n-\r\n-      --  Make sure that number of names in standard table is correct. If\r\n-      --  this check fails, run utility program XSNAMES to construct a new\r\n-      --  properly matching version of the body.\r\n-\r\n-      pragma Assert (Discard_Name = Last_Predefined_Name);\r\n-\r\n-      --  Initialize the convention identifiers table with the standard\r\n-      --  set of synonyms that we recognize for conventions.\r\n-\r\n-      Convention_Identifiers.Init;\r\n-\r\n-      Convention_Identifiers.Append ((Name_Asm,      Convention_Assembler));\r\n-      Convention_Identifiers.Append ((Name_Assembly, Convention_Assembler));\r\n-\r\n-      Convention_Identifiers.Append ((Name_Default,  Convention_C));\r\n-      Convention_Identifiers.Append ((Name_External, Convention_C));\r\n-\r\n-      Convention_Identifiers.Append ((Name_DLL,      Convention_Stdcall));\r\n-      Convention_Identifiers.Append ((Name_Win32,    Convention_Stdcall));\r\n-   end Initialize;\r\n-\r\n-   -----------------------\r\n-   -- Is_Attribute_Name --\r\n-   -----------------------\r\n-\r\n-   function Is_Attribute_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Attribute_Name .. Last_Attribute_Name;\r\n-   end Is_Attribute_Name;\r\n-\r\n-   -------------------\r\n-   -- Is_Check_Name --\r\n-   -------------------\r\n-\r\n-   function Is_Check_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Check_Name .. Last_Check_Name;\r\n-   end Is_Check_Name;\r\n-\r\n-   ------------------------\r\n-   -- Is_Convention_Name --\r\n-   ------------------------\r\n-\r\n-   function Is_Convention_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      --  Check if this is one of the standard conventions\r\n-\r\n-      if N in First_Convention_Name .. Last_Convention_Name\r\n-        or else N = Name_C\r\n-      then\r\n-         return True;\r\n-\r\n-      --  Otherwise check if it is in convention identifier table\r\n-\r\n-      else\r\n-         for J in 1 .. Convention_Identifiers.Last loop\r\n-            if N = Convention_Identifiers.Table (J).Name then\r\n-               return True;\r\n-            end if;\r\n-         end loop;\r\n-\r\n-         return False;\r\n-      end if;\r\n-   end Is_Convention_Name;\r\n-\r\n-   ------------------------------\r\n-   -- Is_Entity_Attribute_Name --\r\n-   ------------------------------\r\n-\r\n-   function Is_Entity_Attribute_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Entity_Attribute_Name .. Last_Entity_Attribute_Name;\r\n-   end Is_Entity_Attribute_Name;\r\n-\r\n-   --------------------------------\r\n-   -- Is_Function_Attribute_Name --\r\n-   --------------------------------\r\n-\r\n-   function Is_Function_Attribute_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in\r\n-        First_Renamable_Function_Attribute ..\r\n-          Last_Renamable_Function_Attribute;\r\n-   end Is_Function_Attribute_Name;\r\n-\r\n-   ----------------------------\r\n-   -- Is_Locking_Policy_Name --\r\n-   ----------------------------\r\n-\r\n-   function Is_Locking_Policy_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Locking_Policy_Name .. Last_Locking_Policy_Name;\r\n-   end Is_Locking_Policy_Name;\r\n-\r\n-   -----------------------------\r\n-   -- Is_Operator_Symbol_Name --\r\n-   -----------------------------\r\n-\r\n-   function Is_Operator_Symbol_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Operator_Name .. Last_Operator_Name;\r\n-   end Is_Operator_Symbol_Name;\r\n-\r\n-   --------------------\r\n-   -- Is_Pragma_Name --\r\n-   --------------------\r\n-\r\n-   function Is_Pragma_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Pragma_Name .. Last_Pragma_Name\r\n-        or else N = Name_AST_Entry\r\n-        or else N = Name_Storage_Size\r\n-        or else N = Name_Storage_Unit;\r\n-   end Is_Pragma_Name;\r\n-\r\n-   ---------------------------------\r\n-   -- Is_Procedure_Attribute_Name --\r\n-   ---------------------------------\r\n-\r\n-   function Is_Procedure_Attribute_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Procedure_Attribute .. Last_Procedure_Attribute;\r\n-   end Is_Procedure_Attribute_Name;\r\n-\r\n-   ----------------------------\r\n-   -- Is_Queuing_Policy_Name --\r\n-   ----------------------------\r\n-\r\n-   function Is_Queuing_Policy_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Queuing_Policy_Name .. Last_Queuing_Policy_Name;\r\n-   end Is_Queuing_Policy_Name;\r\n-\r\n-   -------------------------------------\r\n-   -- Is_Task_Dispatching_Policy_Name --\r\n-   -------------------------------------\r\n-\r\n-   function Is_Task_Dispatching_Policy_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Task_Dispatching_Policy_Name ..\r\n-                  Last_Task_Dispatching_Policy_Name;\r\n-   end Is_Task_Dispatching_Policy_Name;\r\n-\r\n-   ----------------------------\r\n-   -- Is_Type_Attribute_Name --\r\n-   ----------------------------\r\n-\r\n-   function Is_Type_Attribute_Name (N : Name_Id) return Boolean is\r\n-   begin\r\n-      return N in First_Type_Attribute_Name .. Last_Type_Attribute_Name;\r\n-   end Is_Type_Attribute_Name;\r\n-\r\n-   ----------------------------------\r\n-   -- Record_Convention_Identifier --\r\n-   ----------------------------------\r\n-\r\n-   procedure Record_Convention_Identifier\r\n-     (Id         : Name_Id;\r\n-      Convention : Convention_Id)\r\n-   is\r\n-   begin\r\n-      Convention_Identifiers.Append ((Id, Convention));\r\n-   end Record_Convention_Identifier;\r\n-\r\n-end Snames;\r\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                               S N A M E S                                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2003, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Namet; use Namet;\n+with Table;\n+\n+package body Snames is\n+\n+   --  Table used to record convention identifiers\n+\n+   type Convention_Id_Entry is record\n+      Name       : Name_Id;\n+      Convention : Convention_Id;\n+   end record;\n+\n+   package Convention_Identifiers is new Table.Table (\n+     Table_Component_Type => Convention_Id_Entry,\n+     Table_Index_Type     => Int,\n+     Table_Low_Bound      => 1,\n+     Table_Initial        => 50,\n+     Table_Increment      => 200,\n+     Table_Name           => \"Name_Convention_Identifiers\");\n+\n+   --  Table of names to be set by Initialize. Each name is terminated by a\n+   --  single #, and the end of the list is marked by a null entry, i.e. by\n+   --  two # marks in succession. Note that the table does not include the\n+   --  entries for a-z, since these are initialized by Namet itself.\n+\n+   Preset_Names : constant String :=\n+     \"_parent#\" &\n+     \"_tag#\" &\n+     \"off#\" &\n+     \"space#\" &\n+     \"time#\" &\n+     \"_abort_signal#\" &\n+     \"_alignment#\" &\n+     \"_assign#\" &\n+     \"_chain#\" &\n+     \"_clean#\" &\n+     \"_controller#\" &\n+     \"_entry_bodies#\" &\n+     \"_expunge#\" &\n+     \"_final_list#\" &\n+     \"_idepth#\" &\n+     \"_init#\" &\n+     \"_local_final_list#\" &\n+     \"_master#\" &\n+     \"_object#\" &\n+     \"_priority#\" &\n+     \"_process_atsd#\" &\n+     \"_secondary_stack#\" &\n+     \"_service#\" &\n+     \"_size#\" &\n+     \"_tags#\" &\n+     \"_task#\" &\n+     \"_task_id#\" &\n+     \"_task_info#\" &\n+     \"_task_name#\" &\n+     \"_trace_sp#\" &\n+     \"initialize#\" &\n+     \"adjust#\" &\n+     \"finalize#\" &\n+     \"next#\" &\n+     \"prev#\" &\n+     \"allocate#\" &\n+     \"deallocate#\" &\n+     \"dereference#\" &\n+     \"decimal_io#\" &\n+     \"enumeration_io#\" &\n+     \"fixed_io#\" &\n+     \"float_io#\" &\n+     \"integer_io#\" &\n+     \"modular_io#\" &\n+     \"a_textio#\" &\n+     \"a_witeio#\" &\n+     \"const#\" &\n+     \"<error>#\" &\n+     \"go#\" &\n+     \"put#\" &\n+     \"put_line#\" &\n+     \"to#\" &\n+     \"finalization#\" &\n+     \"finalization_root#\" &\n+     \"interfaces#\" &\n+     \"standard#\" &\n+     \"system#\" &\n+     \"text_io#\" &\n+     \"wide_text_io#\" &\n+     \"addr#\" &\n+     \"async#\" &\n+     \"get_active_partition_id#\" &\n+     \"get_rci_package_receiver#\" &\n+     \"origin#\" &\n+     \"params#\" &\n+     \"partition#\" &\n+     \"partition_interface#\" &\n+     \"ras#\" &\n+     \"rci_name#\" &\n+     \"receiver#\" &\n+     \"result#\" &\n+     \"rpc#\" &\n+     \"subp_id#\" &\n+     \"Oabs#\" &\n+     \"Oand#\" &\n+     \"Omod#\" &\n+     \"Onot#\" &\n+     \"Oor#\" &\n+     \"Orem#\" &\n+     \"Oxor#\" &\n+     \"Oeq#\" &\n+     \"One#\" &\n+     \"Olt#\" &\n+     \"Ole#\" &\n+     \"Ogt#\" &\n+     \"Oge#\" &\n+     \"Oadd#\" &\n+     \"Osubtract#\" &\n+     \"Oconcat#\" &\n+     \"Omultiply#\" &\n+     \"Odivide#\" &\n+     \"Oexpon#\" &\n+     \"ada_83#\" &\n+     \"ada_95#\" &\n+     \"c_pass_by_copy#\" &\n+     \"compile_time_warning#\" &\n+     \"component_alignment#\" &\n+     \"convention_identifier#\" &\n+     \"discard_names#\" &\n+     \"elaboration_checks#\" &\n+     \"eliminate#\" &\n+     \"explicit_overriding#\" &\n+     \"extend_system#\" &\n+     \"extensions_allowed#\" &\n+     \"external_name_casing#\" &\n+     \"float_representation#\" &\n+     \"initialize_scalars#\" &\n+     \"interrupt_state#\" &\n+     \"license#\" &\n+     \"locking_policy#\" &\n+     \"long_float#\" &\n+     \"no_run_time#\" &\n+     \"normalize_scalars#\" &\n+     \"polling#\" &\n+     \"persistent_data#\" &\n+     \"persistent_object#\" &\n+     \"propagate_exceptions#\" &\n+     \"queuing_policy#\" &\n+     \"ravenscar#\" &\n+     \"restricted_run_time#\" &\n+     \"restrictions#\" &\n+     \"restriction_warnings#\" &\n+     \"reviewable#\" &\n+     \"source_file_name#\" &\n+     \"source_file_name_project#\" &\n+     \"style_checks#\" &\n+     \"suppress#\" &\n+     \"suppress_exception_locations#\" &\n+     \"task_dispatching_policy#\" &\n+     \"universal_data#\" &\n+     \"unsuppress#\" &\n+     \"use_vads_size#\" &\n+     \"validity_checks#\" &\n+     \"warnings#\" &\n+     \"abort_defer#\" &\n+     \"all_calls_remote#\" &\n+     \"annotate#\" &\n+     \"assert#\" &\n+     \"asynchronous#\" &\n+     \"atomic#\" &\n+     \"atomic_components#\" &\n+     \"attach_handler#\" &\n+     \"comment#\" &\n+     \"common_object#\" &\n+     \"complex_representation#\" &\n+     \"controlled#\" &\n+     \"convention#\" &\n+     \"cpp_class#\" &\n+     \"cpp_constructor#\" &\n+     \"cpp_virtual#\" &\n+     \"cpp_vtable#\" &\n+     \"debug#\" &\n+     \"elaborate#\" &\n+     \"elaborate_all#\" &\n+     \"elaborate_body#\" &\n+     \"export#\" &\n+     \"export_exception#\" &\n+     \"export_function#\" &\n+     \"export_object#\" &\n+     \"export_procedure#\" &\n+     \"export_value#\" &\n+     \"export_valued_procedure#\" &\n+     \"external#\" &\n+     \"finalize_storage_only#\" &\n+     \"ident#\" &\n+     \"import#\" &\n+     \"import_exception#\" &\n+     \"import_function#\" &\n+     \"import_object#\" &\n+     \"import_procedure#\" &\n+     \"import_valued_procedure#\" &\n+     \"inline#\" &\n+     \"inline_always#\" &\n+     \"inline_generic#\" &\n+     \"inspection_point#\" &\n+     \"interface#\" &\n+     \"interface_name#\" &\n+     \"interrupt_handler#\" &\n+     \"interrupt_priority#\" &\n+     \"java_constructor#\" &\n+     \"java_interface#\" &\n+     \"keep_names#\" &\n+     \"link_with#\" &\n+     \"linker_alias#\" &\n+     \"linker_options#\" &\n+     \"linker_section#\" &\n+     \"list#\" &\n+     \"machine_attribute#\" &\n+     \"main#\" &\n+     \"main_storage#\" &\n+     \"memory_size#\" &\n+     \"no_return#\" &\n+     \"obsolescent#\" &\n+     \"optimize#\" &\n+     \"optional_overriding#\" &\n+     \"overriding#\" &\n+     \"pack#\" &\n+     \"page#\" &\n+     \"passive#\" &\n+     \"preelaborate#\" &\n+     \"priority#\" &\n+     \"psect_object#\" &\n+     \"pure#\" &\n+     \"pure_function#\" &\n+     \"remote_call_interface#\" &\n+     \"remote_types#\" &\n+     \"share_generic#\" &\n+     \"shared#\" &\n+     \"shared_passive#\" &\n+     \"source_reference#\" &\n+     \"stream_convert#\" &\n+     \"subtitle#\" &\n+     \"suppress_all#\" &\n+     \"suppress_debug_info#\" &\n+     \"suppress_initialization#\" &\n+     \"system_name#\" &\n+     \"task_info#\" &\n+     \"task_name#\" &\n+     \"task_storage#\" &\n+     \"thread_body#\" &\n+     \"time_slice#\" &\n+     \"title#\" &\n+     \"unchecked_union#\" &\n+     \"unimplemented_unit#\" &\n+     \"unreferenced#\" &\n+     \"unreserve_all_interrupts#\" &\n+     \"volatile#\" &\n+     \"volatile_components#\" &\n+     \"weak_external#\" &\n+     \"ada#\" &\n+     \"assembler#\" &\n+     \"cobol#\" &\n+     \"cpp#\" &\n+     \"fortran#\" &\n+     \"intrinsic#\" &\n+     \"java#\" &\n+     \"stdcall#\" &\n+     \"stubbed#\" &\n+     \"asm#\" &\n+     \"assembly#\" &\n+     \"default#\" &\n+     \"dll#\" &\n+     \"win32#\" &\n+     \"as_is#\" &\n+     \"body_file_name#\" &\n+     \"casing#\" &\n+     \"code#\" &\n+     \"component#\" &\n+     \"component_size_4#\" &\n+     \"copy#\" &\n+     \"d_float#\" &\n+     \"descriptor#\" &\n+     \"dot_replacement#\" &\n+     \"dynamic#\" &\n+     \"entity#\" &\n+     \"external_name#\" &\n+     \"first_optional_parameter#\" &\n+     \"form#\" &\n+     \"g_float#\" &\n+     \"gcc#\" &\n+     \"gnat#\" &\n+     \"gpl#\" &\n+     \"ieee_float#\" &\n+     \"homonym_number#\" &\n+     \"internal#\" &\n+     \"link_name#\" &\n+     \"lowercase#\" &\n+     \"max_size#\" &\n+     \"mechanism#\" &\n+     \"mixedcase#\" &\n+     \"modified_gpl#\" &\n+     \"name#\" &\n+     \"nca#\" &\n+     \"no#\" &\n+     \"on#\" &\n+     \"parameter_types#\" &\n+     \"reference#\" &\n+     \"restricted#\" &\n+     \"result_mechanism#\" &\n+     \"result_type#\" &\n+     \"runtime#\" &\n+     \"sb#\" &\n+     \"secondary_stack_size#\" &\n+     \"section#\" &\n+     \"semaphore#\" &\n+     \"spec_file_name#\" &\n+     \"static#\" &\n+     \"stack_size#\" &\n+     \"subunit_file_name#\" &\n+     \"task_stack_size_default#\" &\n+     \"task_type#\" &\n+     \"time_slicing_enabled#\" &\n+     \"top_guard#\" &\n+     \"uba#\" &\n+     \"ubs#\" &\n+     \"ubsb#\" &\n+     \"unit_name#\" &\n+     \"unknown#\" &\n+     \"unrestricted#\" &\n+     \"uppercase#\" &\n+     \"user#\" &\n+     \"vax_float#\" &\n+     \"vms#\" &\n+     \"working_storage#\" &\n+     \"abort_signal#\" &\n+     \"access#\" &\n+     \"address#\" &\n+     \"address_size#\" &\n+     \"aft#\" &\n+     \"alignment#\" &\n+     \"asm_input#\" &\n+     \"asm_output#\" &\n+     \"ast_entry#\" &\n+     \"bit#\" &\n+     \"bit_order#\" &\n+     \"bit_position#\" &\n+     \"body_version#\" &\n+     \"callable#\" &\n+     \"caller#\" &\n+     \"code_address#\" &\n+     \"component_size#\" &\n+     \"compose#\" &\n+     \"constrained#\" &\n+     \"count#\" &\n+     \"default_bit_order#\" &\n+     \"definite#\" &\n+     \"delta#\" &\n+     \"denorm#\" &\n+     \"digits#\" &\n+     \"elaborated#\" &\n+     \"emax#\" &\n+     \"enum_rep#\" &\n+     \"epsilon#\" &\n+     \"exponent#\" &\n+     \"external_tag#\" &\n+     \"first#\" &\n+     \"first_bit#\" &\n+     \"fixed_value#\" &\n+     \"fore#\" &\n+     \"has_discriminants#\" &\n+     \"identity#\" &\n+     \"img#\" &\n+     \"integer_value#\" &\n+     \"large#\" &\n+     \"last#\" &\n+     \"last_bit#\" &\n+     \"leading_part#\" &\n+     \"length#\" &\n+     \"machine_emax#\" &\n+     \"machine_emin#\" &\n+     \"machine_mantissa#\" &\n+     \"machine_overflows#\" &\n+     \"machine_radix#\" &\n+     \"machine_rounds#\" &\n+     \"machine_size#\" &\n+     \"mantissa#\" &\n+     \"max_size_in_storage_elements#\" &\n+     \"maximum_alignment#\" &\n+     \"mechanism_code#\" &\n+     \"model_emin#\" &\n+     \"model_epsilon#\" &\n+     \"model_mantissa#\" &\n+     \"model_small#\" &\n+     \"modulus#\" &\n+     \"null_parameter#\" &\n+     \"object_size#\" &\n+     \"partition_id#\" &\n+     \"passed_by_reference#\" &\n+     \"pool_address#\" &\n+     \"pos#\" &\n+     \"position#\" &\n+     \"range#\" &\n+     \"range_length#\" &\n+     \"round#\" &\n+     \"safe_emax#\" &\n+     \"safe_first#\" &\n+     \"safe_large#\" &\n+     \"safe_last#\" &\n+     \"safe_small#\" &\n+     \"scale#\" &\n+     \"scaling#\" &\n+     \"signed_zeros#\" &\n+     \"size#\" &\n+     \"small#\" &\n+     \"storage_size#\" &\n+     \"storage_unit#\" &\n+     \"tag#\" &\n+     \"target_name#\" &\n+     \"terminated#\" &\n+     \"to_address#\" &\n+     \"type_class#\" &\n+     \"uet_address#\" &\n+     \"unbiased_rounding#\" &\n+     \"unchecked_access#\" &\n+     \"unconstrained_array#\" &\n+     \"universal_literal_string#\" &\n+     \"unrestricted_access#\" &\n+     \"vads_size#\" &\n+     \"val#\" &\n+     \"valid#\" &\n+     \"value_size#\" &\n+     \"version#\" &\n+     \"wchar_t_size#\" &\n+     \"wide_width#\" &\n+     \"width#\" &\n+     \"word_size#\" &\n+     \"adjacent#\" &\n+     \"ceiling#\" &\n+     \"copy_sign#\" &\n+     \"floor#\" &\n+     \"fraction#\" &\n+     \"image#\" &\n+     \"input#\" &\n+     \"machine#\" &\n+     \"max#\" &\n+     \"min#\" &\n+     \"model#\" &\n+     \"pred#\" &\n+     \"remainder#\" &\n+     \"rounding#\" &\n+     \"succ#\" &\n+     \"truncation#\" &\n+     \"value#\" &\n+     \"wide_image#\" &\n+     \"wide_value#\" &\n+     \"output#\" &\n+     \"read#\" &\n+     \"write#\" &\n+     \"elab_body#\" &\n+     \"elab_spec#\" &\n+     \"storage_pool#\" &\n+     \"base#\" &\n+     \"class#\" &\n+     \"ceiling_locking#\" &\n+     \"inheritance_locking#\" &\n+     \"fifo_queuing#\" &\n+     \"priority_queuing#\" &\n+     \"fifo_within_priorities#\" &\n+     \"access_check#\" &\n+     \"accessibility_check#\" &\n+     \"discriminant_check#\" &\n+     \"division_check#\" &\n+     \"elaboration_check#\" &\n+     \"index_check#\" &\n+     \"length_check#\" &\n+     \"overflow_check#\" &\n+     \"range_check#\" &\n+     \"storage_check#\" &\n+     \"tag_check#\" &\n+     \"all_checks#\" &\n+     \"abort#\" &\n+     \"abs#\" &\n+     \"accept#\" &\n+     \"and#\" &\n+     \"all#\" &\n+     \"array#\" &\n+     \"at#\" &\n+     \"begin#\" &\n+     \"body#\" &\n+     \"case#\" &\n+     \"constant#\" &\n+     \"declare#\" &\n+     \"delay#\" &\n+     \"do#\" &\n+     \"else#\" &\n+     \"elsif#\" &\n+     \"end#\" &\n+     \"entry#\" &\n+     \"exception#\" &\n+     \"exit#\" &\n+     \"for#\" &\n+     \"function#\" &\n+     \"generic#\" &\n+     \"goto#\" &\n+     \"if#\" &\n+     \"in#\" &\n+     \"is#\" &\n+     \"limited#\" &\n+     \"loop#\" &\n+     \"mod#\" &\n+     \"new#\" &\n+     \"not#\" &\n+     \"null#\" &\n+     \"of#\" &\n+     \"or#\" &\n+     \"others#\" &\n+     \"out#\" &\n+     \"package#\" &\n+     \"pragma#\" &\n+     \"private#\" &\n+     \"procedure#\" &\n+     \"raise#\" &\n+     \"record#\" &\n+     \"rem#\" &\n+     \"renames#\" &\n+     \"return#\" &\n+     \"reverse#\" &\n+     \"select#\" &\n+     \"separate#\" &\n+     \"subtype#\" &\n+     \"task#\" &\n+     \"terminate#\" &\n+     \"then#\" &\n+     \"type#\" &\n+     \"use#\" &\n+     \"when#\" &\n+     \"while#\" &\n+     \"with#\" &\n+     \"xor#\" &\n+     \"divide#\" &\n+     \"enclosing_entity#\" &\n+     \"exception_information#\" &\n+     \"exception_message#\" &\n+     \"exception_name#\" &\n+     \"file#\" &\n+     \"import_address#\" &\n+     \"import_largest_value#\" &\n+     \"import_value#\" &\n+     \"is_negative#\" &\n+     \"line#\" &\n+     \"rotate_left#\" &\n+     \"rotate_right#\" &\n+     \"shift_left#\" &\n+     \"shift_right#\" &\n+     \"shift_right_arithmetic#\" &\n+     \"source_location#\" &\n+     \"unchecked_conversion#\" &\n+     \"unchecked_deallocation#\" &\n+     \"to_pointer#\" &\n+     \"abstract#\" &\n+     \"aliased#\" &\n+     \"protected#\" &\n+     \"until#\" &\n+     \"requeue#\" &\n+     \"tagged#\" &\n+     \"raise_exception#\" &\n+     \"binder#\" &\n+     \"body_suffix#\" &\n+     \"builder#\" &\n+     \"compiler#\" &\n+     \"cross_reference#\" &\n+     \"default_switches#\" &\n+     \"exec_dir#\" &\n+     \"executable#\" &\n+     \"executable_suffix#\" &\n+     \"extends#\" &\n+     \"finder#\" &\n+     \"global_configuration_pragmas#\" &\n+     \"gnatls#\" &\n+     \"gnatstub#\" &\n+     \"implementation#\" &\n+     \"implementation_exceptions#\" &\n+     \"implementation_suffix#\" &\n+     \"languages#\" &\n+     \"library_dir#\" &\n+     \"library_auto_init#\" &\n+     \"library_gcc#\" &\n+     \"library_interface#\" &\n+     \"library_kind#\" &\n+     \"library_name#\" &\n+     \"library_options#\" &\n+     \"library_src_dir#\" &\n+     \"library_symbol_file#\" &\n+     \"library_version#\" &\n+     \"linker#\" &\n+     \"local_configuration_pragmas#\" &\n+     \"locally_removed_files#\" &\n+     \"naming#\" &\n+     \"object_dir#\" &\n+     \"pretty_printer#\" &\n+     \"project#\" &\n+     \"separate_suffix#\" &\n+     \"source_dirs#\" &\n+     \"source_files#\" &\n+     \"source_list_file#\" &\n+     \"spec#\" &\n+     \"spec_suffix#\" &\n+     \"specification#\" &\n+     \"specification_exceptions#\" &\n+     \"specification_suffix#\" &\n+     \"switches#\" &\n+     \"unaligned_valid#\" &\n+      \"#\";\n+\n+   ---------------------\n+   -- Generated Names --\n+   ---------------------\n+\n+   --  This section lists the various cases of generated names which are\n+   --  built from existing names by adding unique leading and/or trailing\n+   --  upper case letters. In some cases these names are built recursively,\n+   --  in particular names built from types may be built from types which\n+   --  themselves have generated names. In this list, xxx represents an\n+   --  existing name to which identifying letters are prepended or appended,\n+   --  and a trailing n represents a serial number in an external name that\n+   --  has some semantic significance (e.g. the n'th index type of an array).\n+\n+   --    xxxA    access type for formal xxx in entry param record   (Exp_Ch9)\n+   --    xxxB    tag table for tagged type xxx                      (Exp_Ch3)\n+   --    xxxB    task body procedure for task xxx                   (Exp_Ch9)\n+   --    xxxD    dispatch table for tagged type xxx                 (Exp_Ch3)\n+   --    xxxD    discriminal for discriminant xxx                   (Sem_Ch3)\n+   --    xxxDn   n'th discr check function for rec type xxx         (Exp_Ch3)\n+   --    xxxE    elaboration boolean flag for task xxx              (Exp_Ch9)\n+   --    xxxE    dispatch table pointer type for tagged type xxx    (Exp_Ch3)\n+   --    xxxE    parameters for accept body for entry xxx           (Exp_Ch9)\n+   --    xxxFn   n'th primitive of a tagged type (named xxx)        (Exp_Ch3)\n+   --    xxxJ    tag table type index for tagged type xxx           (Exp_Ch3)\n+   --    xxxM    master Id value for access type xxx                (Exp_Ch3)\n+   --    xxxP    tag table pointer type for tagged type xxx         (Exp_Ch3)\n+   --    xxxP    parameter record type for entry xxx                (Exp_Ch9)\n+   --    xxxPA   access to parameter record type for entry xxx      (Exp_Ch9)\n+   --    xxxPn   pointer type for n'th primitive of tagged type xxx (Exp_Ch3)\n+   --    xxxR    dispatch table pointer for tagged type xxx         (Exp_Ch3)\n+   --    xxxT    tag table type for tagged type xxx                 (Exp_Ch3)\n+   --    xxxT    literal table for enumeration type xxx             (Sem_Ch3)\n+   --    xxxV    type for task value record for task xxx            (Exp_Ch9)\n+   --    xxxX    entry index constant                               (Exp_Ch9)\n+   --    xxxY    dispatch table type for tagged type xxx            (Exp_Ch3)\n+   --    xxxZ    size variable for task xxx                         (Exp_Ch9)\n+\n+   --  TSS names\n+\n+   --    xxxDA   deep adjust routine for type xxx                   (Exp_TSS)\n+   --    xxxDF   deep finalize routine for type xxx                 (Exp_TSS)\n+   --    xxxDI   deep initialize routine for type xxx               (Exp_TSS)\n+   --    xxxEQ   composite equality routine for record type xxx     (Exp_TSS)\n+   --    xxxIP   initialization procedure for type xxx              (Exp_TSS)\n+   --    xxxRA   RAs type access routine for type xxx               (Exp_TSS)\n+   --    xxxRD   RAs type dereference routine for type xxx          (Exp_TSS)\n+   --    xxxRP   Rep to Pos conversion for enumeration type xxx     (Exp_TSS)\n+   --    xxxSI   stream input attribute subprogram for type xxx     (Exp_TSS)\n+   --    xxxSO   stream output attribute subprogram for type xxx    (Exp_TSS)\n+   --    xxxSR   stream read attribute subprogram for type xxx      (Exp_TSS)\n+   --    xxxSW   stream write attribute subprogram for type xxx     (Exp_TSS)\n+\n+   --  Implicit type names\n+\n+   --    TxxxT   type of literal table for enumeration type xxx     (Sem_Ch3)\n+\n+   --  (Note: this list is not complete or accurate ???)\n+\n+   ----------------------\n+   -- Get_Attribute_Id --\n+   ----------------------\n+\n+   function Get_Attribute_Id (N : Name_Id) return Attribute_Id is\n+   begin\n+      return Attribute_Id'Val (N - First_Attribute_Name);\n+   end Get_Attribute_Id;\n+\n+   ------------------\n+   -- Get_Check_Id --\n+   ------------------\n+\n+   function Get_Check_Id (N : Name_Id) return Check_Id is\n+   begin\n+      return Check_Id'Val (N - First_Check_Name);\n+   end Get_Check_Id;\n+\n+   -----------------------\n+   -- Get_Convention_Id --\n+   -----------------------\n+\n+   function Get_Convention_Id (N : Name_Id) return Convention_Id is\n+   begin\n+      case N is\n+         when Name_Ada        => return Convention_Ada;\n+         when Name_Assembler  => return Convention_Assembler;\n+         when Name_C          => return Convention_C;\n+         when Name_COBOL      => return Convention_COBOL;\n+         when Name_CPP        => return Convention_CPP;\n+         when Name_Fortran    => return Convention_Fortran;\n+         when Name_Intrinsic  => return Convention_Intrinsic;\n+         when Name_Java       => return Convention_Java;\n+         when Name_Stdcall    => return Convention_Stdcall;\n+         when Name_Stubbed    => return Convention_Stubbed;\n+\n+         --  If no direct match, then we must have a convention\n+         --  identifier pragma that has specified this name.\n+\n+         when others          =>\n+            for J in 1 .. Convention_Identifiers.Last loop\n+               if N = Convention_Identifiers.Table (J).Name then\n+                  return Convention_Identifiers.Table (J).Convention;\n+               end if;\n+            end loop;\n+\n+            raise Program_Error;\n+      end case;\n+   end Get_Convention_Id;\n+\n+   ---------------------------\n+   -- Get_Locking_Policy_Id --\n+   ---------------------------\n+\n+   function Get_Locking_Policy_Id (N : Name_Id) return Locking_Policy_Id is\n+   begin\n+      return Locking_Policy_Id'Val (N - First_Locking_Policy_Name);\n+   end Get_Locking_Policy_Id;\n+\n+   -------------------\n+   -- Get_Pragma_Id --\n+   -------------------\n+\n+   function Get_Pragma_Id (N : Name_Id) return Pragma_Id is\n+   begin\n+      if N = Name_AST_Entry then\n+         return Pragma_AST_Entry;\n+      elsif N = Name_Storage_Size then\n+         return Pragma_Storage_Size;\n+      elsif N = Name_Storage_Unit then\n+         return Pragma_Storage_Unit;\n+      elsif N not in First_Pragma_Name .. Last_Pragma_Name then\n+         return Unknown_Pragma;\n+      else\n+         return Pragma_Id'Val (N - First_Pragma_Name);\n+      end if;\n+   end Get_Pragma_Id;\n+\n+   ---------------------------\n+   -- Get_Queuing_Policy_Id --\n+   ---------------------------\n+\n+   function Get_Queuing_Policy_Id (N : Name_Id) return Queuing_Policy_Id is\n+   begin\n+      return Queuing_Policy_Id'Val (N - First_Queuing_Policy_Name);\n+   end Get_Queuing_Policy_Id;\n+\n+   ------------------------------------\n+   -- Get_Task_Dispatching_Policy_Id --\n+   ------------------------------------\n+\n+   function Get_Task_Dispatching_Policy_Id (N : Name_Id)\n+     return Task_Dispatching_Policy_Id is\n+   begin\n+      return Task_Dispatching_Policy_Id'Val\n+        (N - First_Task_Dispatching_Policy_Name);\n+   end Get_Task_Dispatching_Policy_Id;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+      P_Index      : Natural;\n+      Discard_Name : Name_Id;\n+\n+   begin\n+      P_Index := Preset_Names'First;\n+\n+      loop\n+         Name_Len := 0;\n+\n+         while Preset_Names (P_Index) /= '#' loop\n+            Name_Len := Name_Len + 1;\n+            Name_Buffer (Name_Len) := Preset_Names (P_Index);\n+            P_Index := P_Index + 1;\n+         end loop;\n+\n+         --  We do the Name_Find call to enter the name into the table, but\n+         --  we don't need to do anything with the result, since we already\n+         --  initialized all the preset names to have the right value (we\n+         --  are depending on the order of the names and Preset_Names).\n+\n+         Discard_Name := Name_Find;\n+         P_Index := P_Index + 1;\n+         exit when Preset_Names (P_Index) = '#';\n+      end loop;\n+\n+      --  Make sure that number of names in standard table is correct. If\n+      --  this check fails, run utility program XSNAMES to construct a new\n+      --  properly matching version of the body.\n+\n+      pragma Assert (Discard_Name = Last_Predefined_Name);\n+\n+      --  Initialize the convention identifiers table with the standard\n+      --  set of synonyms that we recognize for conventions.\n+\n+      Convention_Identifiers.Init;\n+\n+      Convention_Identifiers.Append ((Name_Asm,      Convention_Assembler));\n+      Convention_Identifiers.Append ((Name_Assembly, Convention_Assembler));\n+\n+      Convention_Identifiers.Append ((Name_Default,  Convention_C));\n+      Convention_Identifiers.Append ((Name_External, Convention_C));\n+\n+      Convention_Identifiers.Append ((Name_DLL,      Convention_Stdcall));\n+      Convention_Identifiers.Append ((Name_Win32,    Convention_Stdcall));\n+   end Initialize;\n+\n+   -----------------------\n+   -- Is_Attribute_Name --\n+   -----------------------\n+\n+   function Is_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Attribute_Name .. Last_Attribute_Name;\n+   end Is_Attribute_Name;\n+\n+   -------------------\n+   -- Is_Check_Name --\n+   -------------------\n+\n+   function Is_Check_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Check_Name .. Last_Check_Name;\n+   end Is_Check_Name;\n+\n+   ------------------------\n+   -- Is_Convention_Name --\n+   ------------------------\n+\n+   function Is_Convention_Name (N : Name_Id) return Boolean is\n+   begin\n+      --  Check if this is one of the standard conventions\n+\n+      if N in First_Convention_Name .. Last_Convention_Name\n+        or else N = Name_C\n+      then\n+         return True;\n+\n+      --  Otherwise check if it is in convention identifier table\n+\n+      else\n+         for J in 1 .. Convention_Identifiers.Last loop\n+            if N = Convention_Identifiers.Table (J).Name then\n+               return True;\n+            end if;\n+         end loop;\n+\n+         return False;\n+      end if;\n+   end Is_Convention_Name;\n+\n+   ------------------------------\n+   -- Is_Entity_Attribute_Name --\n+   ------------------------------\n+\n+   function Is_Entity_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Entity_Attribute_Name .. Last_Entity_Attribute_Name;\n+   end Is_Entity_Attribute_Name;\n+\n+   --------------------------------\n+   -- Is_Function_Attribute_Name --\n+   --------------------------------\n+\n+   function Is_Function_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in\n+        First_Renamable_Function_Attribute ..\n+          Last_Renamable_Function_Attribute;\n+   end Is_Function_Attribute_Name;\n+\n+   ----------------------------\n+   -- Is_Locking_Policy_Name --\n+   ----------------------------\n+\n+   function Is_Locking_Policy_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Locking_Policy_Name .. Last_Locking_Policy_Name;\n+   end Is_Locking_Policy_Name;\n+\n+   -----------------------------\n+   -- Is_Operator_Symbol_Name --\n+   -----------------------------\n+\n+   function Is_Operator_Symbol_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Operator_Name .. Last_Operator_Name;\n+   end Is_Operator_Symbol_Name;\n+\n+   --------------------\n+   -- Is_Pragma_Name --\n+   --------------------\n+\n+   function Is_Pragma_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Pragma_Name .. Last_Pragma_Name\n+        or else N = Name_AST_Entry\n+        or else N = Name_Storage_Size\n+        or else N = Name_Storage_Unit;\n+   end Is_Pragma_Name;\n+\n+   ---------------------------------\n+   -- Is_Procedure_Attribute_Name --\n+   ---------------------------------\n+\n+   function Is_Procedure_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Procedure_Attribute .. Last_Procedure_Attribute;\n+   end Is_Procedure_Attribute_Name;\n+\n+   ----------------------------\n+   -- Is_Queuing_Policy_Name --\n+   ----------------------------\n+\n+   function Is_Queuing_Policy_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Queuing_Policy_Name .. Last_Queuing_Policy_Name;\n+   end Is_Queuing_Policy_Name;\n+\n+   -------------------------------------\n+   -- Is_Task_Dispatching_Policy_Name --\n+   -------------------------------------\n+\n+   function Is_Task_Dispatching_Policy_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Task_Dispatching_Policy_Name ..\n+                  Last_Task_Dispatching_Policy_Name;\n+   end Is_Task_Dispatching_Policy_Name;\n+\n+   ----------------------------\n+   -- Is_Type_Attribute_Name --\n+   ----------------------------\n+\n+   function Is_Type_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Type_Attribute_Name .. Last_Type_Attribute_Name;\n+   end Is_Type_Attribute_Name;\n+\n+   ----------------------------------\n+   -- Record_Convention_Identifier --\n+   ----------------------------------\n+\n+   procedure Record_Convention_Identifier\n+     (Id         : Name_Id;\n+      Convention : Convention_Id)\n+   is\n+   begin\n+      Convention_Identifiers.Append ((Id, Convention));\n+   end Record_Convention_Identifier;\n+\n+end Snames;"}, {"sha": "b6517df7055993b854c72c1480004a22c01a3a60", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 1415, "deletions": 1415, "changes": 2830, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104da10b9b3850bc821a2c3b902001c7324ec6c5/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104da10b9b3850bc821a2c3b902001c7324ec6c5/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=104da10b9b3850bc821a2c3b902001c7324ec6c5"}]}