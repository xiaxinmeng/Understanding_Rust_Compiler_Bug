{"sha": "049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5ZTZkMzZjZDg2NjFlN2RjMWM3ZGM0NzRjYjZiMTIyNzU0M2FmNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-10-04T18:29:03Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-10-04T18:29:03Z"}, "message": "devirt-46.C: New testcase.\n\n\n\t* g++.dg/ipa/devirt-46.C: New testcase.\n\t* ipa-prop.c (ipa_compute_jump_functions_for_edge): Call\n\tget_dynamic_type; drop TODO.\n\t* ipa-polymorphic-call.c\n\t(ipa_polymorphic_call_context::get_dynamic_type): Be ready\n\tfor otr_type to be unknown.\n\nFrom-SVN: r215890", "tree": {"sha": "1163da82a2e60b73864668cdd54636ba6277fe01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1163da82a2e60b73864668cdd54636ba6277fe01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/comments", "author": null, "committer": null, "parents": [{"sha": "3daa7bbf7912030a760199f31a0926a11365a76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3daa7bbf7912030a760199f31a0926a11365a76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3daa7bbf7912030a760199f31a0926a11365a76f"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "d33827012e56822cca55e5a2e3d5d6d77ca38c25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "patch": "@@ -1,3 +1,11 @@\n+2014-10-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-prop.c (ipa_compute_jump_functions_for_edge): Call\n+\tget_dynamic_type; drop TODO.\n+\t* ipa-polymorphic-call.c\n+\t(ipa_polymorphic_call_context::get_dynamic_type): Be ready\n+\tfor otr_type to be unknown.\n+\n 2014-10-04  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* common/config/score/score-common.c: Remove."}, {"sha": "ecbd78ce33d415a30c73bbc7c9bf5e019c86b179", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "patch": "@@ -1390,12 +1390,13 @@ ipa_polymorphic_call_context::get_dynamic_type (tree instance,\n      This is because we do not update INSTANCE when walking inwards.  */\n   HOST_WIDE_INT instance_offset = offset;\n \n-  otr_type = TYPE_MAIN_VARIANT (otr_type);\n+  if (otr_type)\n+    otr_type = TYPE_MAIN_VARIANT (otr_type);\n \n   /* Walk into inner type. This may clear maybe_derived_type and save us\n      from useless work.  It also makes later comparsions with static type\n      easier.  */\n-  if (outer_type)\n+  if (outer_type && otr_type)\n     {\n       if (!restrict_to_inner_class (otr_type))\n         return false;\n@@ -1484,8 +1485,9 @@ ipa_polymorphic_call_context::get_dynamic_type (tree instance,\n   /* We look for vtbl pointer read.  */\n   ao.size = POINTER_SIZE;\n   ao.max_size = ao.size;\n-  ao.ref_alias_set\n-    = get_deref_alias_set (TREE_TYPE (BINFO_VTABLE (TYPE_BINFO (otr_type))));\n+  if (otr_type)\n+    ao.ref_alias_set\n+      = get_deref_alias_set (TREE_TYPE (BINFO_VTABLE (TYPE_BINFO (otr_type))));\n \n   if (dump_file)\n     {"}, {"sha": "d5ecea413039c5bce82235b93896d6ceb27eab49", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "patch": "@@ -1898,10 +1898,11 @@ ipa_compute_jump_functions_for_edge (struct func_body_info *fbi,\n       tree param_type = ipa_get_callee_param_type (cs, n);\n       if (flag_devirtualize && POINTER_TYPE_P (TREE_TYPE (arg)))\n \t{\n+\t  tree instance;\n \t  struct ipa_polymorphic_call_context context (cs->caller->decl,\n \t\t\t\t\t\t       arg, cs->call_stmt,\n-\t\t\t\t\t\t       NULL);\n-\t  /* TODO: We should also handle dynamic types.  */\n+\t\t\t\t\t\t       &instance);\n+\t  context.get_dynamic_type (instance, arg, NULL, cs->call_stmt);\n \t  *ipa_get_ith_polymorhic_call_context (args, n) = context;\n \t  if (!context.useless_p ())\n \t    useful_context = true;"}, {"sha": "4672a6830f7aa631aaaf9d6765917816265eff78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "patch": "@@ -1,3 +1,7 @@\n+2014-10-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/devirt-46.C: New testcase.\n+\n 2014-10-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36534"}, {"sha": "a6da9c9f62be8a532aa064712025b4ed73e0497d", "filename": "gcc/testsuite/g++.dg/ipa/devirt-46.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e6d36cd8661e7dc1c7dc474cb6b1227543af6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-46.C?ref=049e6d36cd8661e7dc1c7dc474cb6b1227543af6", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-ipa-cp -fdump-ipa-inline-details -fno-early-inlining -fdump-tree-optimized\" } */\n+struct A {\n+   virtual int foo(){return 1;}\n+};\n+struct B:A {\n+   virtual int foo(){return 2;}\n+};\n+static void\n+test (struct A *a)\n+{\n+  if (a->foo() != 2)\n+   __builtin_abort ();\n+}\n+int\n+m()\n+{\n+  struct A *a = new B;\n+  test (a);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a speculative target\\[^\\\\n\\]*B::foo\" 1 \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump-not \"OBJ_TYPE_REF\" \"optimized\"  } } */\n+/* { dg-final { scan-ipa-dump-not \"abort\" \"optimized\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */\n+/* { dg-final { cleanup-ipa-dump \"optimized\" } } */"}]}