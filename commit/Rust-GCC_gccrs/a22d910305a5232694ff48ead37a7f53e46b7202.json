{"sha": "a22d910305a5232694ff48ead37a7f53e46b7202", "node_id": "C_kwDOANBUbNoAKGEyMmQ5MTAzMDVhNTIzMjY5NGZmNDhlYWQzN2E3ZjUzZTQ2YjcyMDI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-09T14:09:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-09T14:09:43Z"}, "message": "c++: bogus error w/ tentative type parse of concept-id [PR98394]\n\nHere when tentatively parsing the if condition as a declaration, we try\nto treat C<1> as the start of a constrained placeholder type, which we\nquickly reject because C doesn't accept a type as its first argument.\nBut since we're parsing tentatively, we shouldn't emit an error in this\ncase.\n\nIn passing, also fix PR85846 by only overriding 'tentative' to false when\ngiven a concept-name, and not also when given a concept-id that has an empty\nargument list.\n\n\tPR c++/98394\n\tPR c++/85846\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_placeholder_type_specifier): Declare\n\tstatic.  Don't override tentative to false when tmpl is a\n\tconcept-id with empty argument list.  Don't emit a \"does not\n\tconstrain a type\" error when tentative.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-pr98394.C: New test.\n\t* g++.dg/cpp2a/concepts-pr85846.C: New test.", "tree": {"sha": "ec777e3f0d7206738003e4d6877153ef38463b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec777e3f0d7206738003e4d6877153ef38463b46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a22d910305a5232694ff48ead37a7f53e46b7202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22d910305a5232694ff48ead37a7f53e46b7202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a22d910305a5232694ff48ead37a7f53e46b7202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22d910305a5232694ff48ead37a7f53e46b7202/comments", "author": null, "committer": null, "parents": [{"sha": "a19f09cb03d7f69377e6d12162e5d6df78a82849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19f09cb03d7f69377e6d12162e5d6df78a82849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19f09cb03d7f69377e6d12162e5d6df78a82849"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "6061f983392d81971a9778bcb3aa5edc8f42f1c7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22d910305a5232694ff48ead37a7f53e46b7202/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22d910305a5232694ff48ead37a7f53e46b7202/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a22d910305a5232694ff48ead37a7f53e46b7202", "patch": "@@ -19855,7 +19855,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n   Note that the Concepts TS allows the auto or decltype(auto) to be\n   omitted in a constrained-type-specifier.  */\n \n-tree\n+static tree\n cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,\n \t\t\t\t      tree tmpl, bool tentative)\n {\n@@ -19871,7 +19871,7 @@ cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,\n       args = TREE_OPERAND (tmpl, 1);\n       tmpl = TREE_OPERAND (tmpl, 0);\n     }\n-  if (args == NULL_TREE)\n+  else\n     /* A concept-name with no arguments can't be an expression.  */\n     tentative = false;\n \n@@ -19909,8 +19909,11 @@ cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,\n       if (!flag_concepts_ts\n \t  || !processing_template_parmlist)\n \t{\n-\t  error_at (loc, \"%qE does not constrain a type\", DECL_NAME (con));\n-\t  inform (DECL_SOURCE_LOCATION (con), \"concept defined here\");\n+\t  if (!tentative)\n+\t    {\n+\t      error_at (loc, \"%qE does not constrain a type\", DECL_NAME (con));\n+\t      inform (DECL_SOURCE_LOCATION (con), \"concept defined here\");\n+\t    }\n \t  return error_mark_node;\n \t}\n     }"}, {"sha": "7fda002cfee299b69b9b1e11475282f10580582d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr85846.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22d910305a5232694ff48ead37a7f53e46b7202/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr85846.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22d910305a5232694ff48ead37a7f53e46b7202/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr85846.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr85846.C?ref=a22d910305a5232694ff48ead37a7f53e46b7202", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/85846\n+// { dg-do compile { target c++20 } }\n+\n+template<int=0>\n+concept A = true;\n+\n+bool i(A<>);\n+\n+template<class=int>\n+concept B = true;\n+\n+bool j(B<>);"}, {"sha": "c8407cdf7cdbc498d2c0e0b8d38d6fa0bf8ff5cb", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr98394.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22d910305a5232694ff48ead37a7f53e46b7202/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr98394.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22d910305a5232694ff48ead37a7f53e46b7202/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr98394.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr98394.C?ref=a22d910305a5232694ff48ead37a7f53e46b7202", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/98394\n+// { dg-do compile { target c++20 } }\n+\n+template<int...>\n+concept C = true;\n+\n+template<int, int>\n+concept D = true;\n+\n+int main() {\n+  if (C<1>); // { dg-bogus \"does not constrain a type\" }\n+  if (D<1>); // { dg-error \"wrong number of template arguments\" }\n+\t     // { dg-bogus \"does not constrain a type\" \"\" { target *-*-* } .-1 }\n+}"}]}