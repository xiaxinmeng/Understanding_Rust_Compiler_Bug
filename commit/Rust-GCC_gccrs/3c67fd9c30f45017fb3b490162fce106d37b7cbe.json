{"sha": "3c67fd9c30f45017fb3b490162fce106d37b7cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2N2ZkOWMzMGY0NTAxN2ZiM2I0OTAxNjJmY2UxMDZkMzdiN2NiZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-08-01T21:53:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-08-01T21:53:07Z"}, "message": "Makefile.in (hwint.o): Depend on DIAGNOSTIC_CORE_H.\n\n2011-08-01  Sebastian Pop  <sebastian.pop@amd.com>\n\t    Joseph Myers  <joseph@codesourcery.com>\n\n\t* Makefile.in (hwint.o): Depend on DIAGNOSTIC_CORE_H.\n\t* hwint.c: Include diagnostic-core.h.\n\t(abs_hwi): New.\n\t(gcd): Moved here...\n\t(pos_mul_hwi): New.\n\t(mul_hwi): New.\n\t(least_common_multiple): Moved here...\n\t* hwint.h (gcd): ... from here.\n\t(least_common_multiple): ... from here.\n\t(HOST_WIDE_INT_MIN): New.\n\t(HOST_WIDE_INT_MAX): New.\n\t(abs_hwi): Declared.\n\t(gcd): Declared.\n\t(pos_mul_hwi): Declared.\n\t(mul_hwi): Declared.\n\t(least_common_multiple): Declared.\n\t* omega.c (check_pos_mul): Removed.\n\t(check_mul): Removed.\n\t(omega_solve_geq): Use pos_mul_hwi instead of check_pos_mul and\n\tmul_hwi instead of check_mul.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r177075", "tree": {"sha": "b283fc957cb0e873ede675b16d01fe03cbf1bd48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b283fc957cb0e873ede675b16d01fe03cbf1bd48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c67fd9c30f45017fb3b490162fce106d37b7cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c67fd9c30f45017fb3b490162fce106d37b7cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c67fd9c30f45017fb3b490162fce106d37b7cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c67fd9c30f45017fb3b490162fce106d37b7cbe/comments", "author": null, "committer": null, "parents": [{"sha": "4bbff96e369cf96ee1c6bd3fd9f7728c08e05da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbff96e369cf96ee1c6bd3fd9f7728c08e05da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbff96e369cf96ee1c6bd3fd9f7728c08e05da8"}], "stats": {"total": 184, "additions": 116, "deletions": 68}, "files": [{"sha": "ef13c1fcab0e33550e28e84f6a74d6adbb5f19f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c67fd9c30f45017fb3b490162fce106d37b7cbe", "patch": "@@ -1,3 +1,27 @@\n+2011-08-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (hwint.o): Depend on DIAGNOSTIC_CORE_H.\n+\t* hwint.c: Include diagnostic-core.h.\n+\t(abs_hwi): New.\n+\t(gcd): Moved here...\n+\t(pos_mul_hwi): New.\n+\t(mul_hwi): New.\n+\t(least_common_multiple): Moved here...\n+\t* hwint.h (gcd): ... from here.\n+\t(least_common_multiple): ... from here.\n+\t(HOST_WIDE_INT_MIN): New.\n+\t(HOST_WIDE_INT_MAX): New.\n+\t(abs_hwi): Declared.\n+\t(gcd): Declared.\n+\t(pos_mul_hwi): Declared.\n+\t(mul_hwi): Declared.\n+\t(least_common_multiple): Declared.\n+\t* omega.c (check_pos_mul): Removed.\n+\t(check_mul): Removed.\n+\t(omega_solve_geq): Use pos_mul_hwi instead of check_pos_mul and\n+\tmul_hwi instead of check_mul.\n+\n 2011-08-01  Richard Henderson  <rth@redhat.com>\n \n \tPR target/49881"}, {"sha": "116a70ba8f6b31459ad1eed0b4263c55e1d62b9b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3c67fd9c30f45017fb3b490162fce106d37b7cbe", "patch": "@@ -2837,7 +2837,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t  -DTARGET_NAME=\\\"$(target_noncanonical)\\\" \\\n \t  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)\n \n-hwint.o : hwint.c $(CONFIG_H) $(SYSTEM_H)\n+hwint.o : hwint.c $(CONFIG_H) $(SYSTEM_H) $(DIAGNOSTIC_CORE_H)\n \n passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FUNCTION_H) $(FLAGS_H) xcoffout.h $(INPUT_H) $(INSN_ATTR_H) output.h \\"}, {"sha": "a128dc134f99672ef2d2f378fe4b5bc0873404c6", "filename": "gcc/hwint.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2Fhwint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2Fhwint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.c?ref=3c67fd9c30f45017fb3b490162fce106d37b7cbe", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"diagnostic-core.h\"\n \n #if GCC_VERSION < 3004\n \n@@ -98,3 +99,76 @@ ffs_hwi (unsigned HOST_WIDE_INT x)\n }\n \n #endif /* GCC_VERSION < 3004 */\n+\n+/* Compute the absolute value of X.  */\n+\n+HOST_WIDE_INT\n+abs_hwi (HOST_WIDE_INT x)\n+{\n+  gcc_checking_assert (x != HOST_WIDE_INT_MIN);\n+  return x >= 0 ? x : -x;\n+}\n+\n+/* Compute the greatest common divisor of two numbers A and B using\n+   Euclid's algorithm.  */\n+\n+HOST_WIDE_INT\n+gcd (HOST_WIDE_INT a, HOST_WIDE_INT b)\n+{\n+  HOST_WIDE_INT x, y, z;\n+\n+  x = abs_hwi (a);\n+  y = abs_hwi (b);\n+\n+  while (x > 0)\n+    {\n+      z = y % x;\n+      y = x;\n+      x = z;\n+    }\n+\n+  return y;\n+}\n+\n+/* For X and Y positive integers, return X multiplied by Y and check\n+   that the result does not overflow.  */\n+\n+HOST_WIDE_INT\n+pos_mul_hwi (HOST_WIDE_INT x, HOST_WIDE_INT y)\n+{\n+  if (x != 0)\n+    gcc_checking_assert ((HOST_WIDE_INT_MAX) / x >= y);\n+\n+  return x * y;\n+}\n+\n+/* Return X multiplied by Y and check that the result does not\n+   overflow.  */\n+\n+HOST_WIDE_INT\n+mul_hwi (HOST_WIDE_INT x, HOST_WIDE_INT y)\n+{\n+  gcc_checking_assert (x != HOST_WIDE_INT_MIN\n+\t\t       && y != HOST_WIDE_INT_MIN);\n+\n+  if (x >= 0)\n+    {\n+      if (y >= 0)\n+\treturn pos_mul_hwi (x, y);\n+\n+      return -pos_mul_hwi (x, -y);\n+    }\n+\n+  if (y >= 0)\n+    return -pos_mul_hwi (-x, y);\n+\n+  return pos_mul_hwi (-x, -y);\n+}\n+\n+/* Compute the least common multiple of two numbers A and B .  */\n+\n+HOST_WIDE_INT\n+least_common_multiple (HOST_WIDE_INT a, HOST_WIDE_INT b)\n+{\n+  return mul_hwi (abs_hwi (a) / gcd (a, b), abs_hwi (b));\n+}"}, {"sha": "fa77b11234958da5d72a998b61f4dba40ace8370", "filename": "gcc/hwint.h", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=3c67fd9c30f45017fb3b490162fce106d37b7cbe", "patch": "@@ -228,33 +228,14 @@ exact_log2 (unsigned HOST_WIDE_INT x)\n \n #endif /* GCC_VERSION >= 3004 */\n \n-/* Compute the greatest common divisor of two numbers using\n-   Euclid's algorithm.  */\n-\n-static inline int\n-gcd (int a, int b)\n-{\n-  int x, y, z;\n-\n-  x = abs (a);\n-  y = abs (b);\n-\n-  while (x > 0)\n-    {\n-      z = y % x;\n-      y = x;\n-      x = z;\n-    }\n-\n-  return y;\n-}\n-\n-/* Compute the least common multiple of two numbers A and B .  */\n-\n-static inline int\n-least_common_multiple (int a, int b)\n-{\n-  return (abs (a) * abs (b) / gcd (a, b));\n-}\n+#define HOST_WIDE_INT_MIN (HOST_WIDE_INT) \\\n+  ((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT - 1))\n+#define HOST_WIDE_INT_MAX (~(HOST_WIDE_INT_MIN))\n+\n+extern HOST_WIDE_INT abs_hwi (HOST_WIDE_INT);\n+extern HOST_WIDE_INT gcd (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern HOST_WIDE_INT pos_mul_hwi (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern HOST_WIDE_INT mul_hwi (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern HOST_WIDE_INT least_common_multiple (HOST_WIDE_INT, HOST_WIDE_INT);\n \n #endif /* ! GCC_HWINT_H */"}, {"sha": "c8768d8b441b861bcb5efbb1e8b4b93d30d746dd", "filename": "gcc/omega.c", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c67fd9c30f45017fb3b490162fce106d37b7cbe/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=3c67fd9c30f45017fb3b490162fce106d37b7cbe", "patch": "@@ -110,37 +110,6 @@ int_mod (int a, int b)\n   return a - b * int_div (a, b);\n }\n \n-/* For X and Y positive integers, return X multiplied by Y and check\n-   that the result does not overflow.  */\n-\n-static inline int\n-check_pos_mul (int x, int y)\n-{\n-  if (x != 0)\n-    gcc_assert ((INT_MAX) / x > y);\n-\n-  return x * y;\n-}\n-\n-/* Return X multiplied by Y and check that the result does not\n-   overflow.  */\n-\n-static inline int\n-check_mul (int x, int y)\n-{\n-  if (x >= 0)\n-    {\n-      if (y >= 0)\n-\treturn check_pos_mul (x, y);\n-      else\n-\treturn -check_pos_mul (x, -y);\n-    }\n-  else if (y >= 0)\n-    return -check_pos_mul (-x, y);\n-  else\n-    return check_pos_mul (-x, -y);\n-}\n-\n /* Test whether equation E is red.  */\n \n static inline bool\n@@ -3907,8 +3876,8 @@ omega_solve_geq (omega_pb pb, enum omega_result desired_res)\n \t      max_splinters += -minC - 1;\n \t    else\n \t      max_splinters +=\n-\t\tcheck_pos_mul ((pb->geqs[e].coef[i] - 1),\n-\t\t\t       (-minC - 1)) / (-minC) + 1;\n+\t\tpos_mul_hwi ((pb->geqs[e].coef[i] - 1),\n+\t\t\t     (-minC - 1)) / (-minC) + 1;\n \t  }\n \n       /* #ifdef Omega3 */\n@@ -4321,8 +4290,8 @@ omega_solve_geq (omega_pb pb, enum omega_result desired_res)\n \n \t\t\tfor (k = 0; k <= n_vars; k++)\n \t\t\t  pb->geqs[Ue].coef[k] =\n-\t\t\t    check_mul (pb->geqs[Ue].coef[k], Lc) +\n-\t\t\t    check_mul (lbeqn->coef[k], Uc);\n+\t\t\t    mul_hwi (pb->geqs[Ue].coef[k], Lc) +\n+\t\t\t    mul_hwi (lbeqn->coef[k], Uc);\n \n \t\t\tif (dump_file && (dump_flags & TDF_DETAILS))\n \t\t\t  {\n@@ -4384,8 +4353,8 @@ omega_solve_geq (omega_pb pb, enum omega_result desired_res)\n \n \t\t\t      for (k = n_vars; k >= 0; k--)\n \t\t\t\tpb->geqs[e2].coef[k] =\n-\t\t\t\t  check_mul (pb->geqs[Ue].coef[k], Lc) +\n-\t\t\t\t  check_mul (pb->geqs[Le].coef[k], Uc);\n+\t\t\t\t  mul_hwi (pb->geqs[Ue].coef[k], Lc) +\n+\t\t\t\t  mul_hwi (pb->geqs[Le].coef[k], Uc);\n \n \t\t\t      pb->geqs[e2].coef[n_vars + 1] = 0;\n \t\t\t      pb->geqs[e2].touched = 1;\n@@ -4506,8 +4475,8 @@ omega_solve_geq (omega_pb pb, enum omega_result desired_res)\n \t\t\t  {\n \t\t\t    for (k = n_vars; k >= 0; k--)\n \t\t\t      iS->geqs[e2].coef[k] = rS->geqs[e2].coef[k] =\n-\t\t\t\tcheck_mul (pb->geqs[Ue].coef[k], Lc) +\n-\t\t\t\tcheck_mul (pb->geqs[Le].coef[k], Uc);\n+\t\t\t\tmul_hwi (pb->geqs[Ue].coef[k], Lc) +\n+\t\t\t\tmul_hwi (pb->geqs[Le].coef[k], Uc);\n \n \t\t\t    iS->geqs[e2].coef[0] -= (Uc - 1) * (Lc - 1);\n \t\t\t  }"}]}