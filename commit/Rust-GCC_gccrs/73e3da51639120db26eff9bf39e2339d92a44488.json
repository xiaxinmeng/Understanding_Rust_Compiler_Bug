{"sha": "73e3da51639120db26eff9bf39e2339d92a44488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlM2RhNTE2MzkxMjBkYjI2ZWZmOWJmMzllMjMzOWQ5MmE0NDQ4OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-06T20:02:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-06T20:02:27Z"}, "message": "[AArch64] Pass number of units to aarch64_reverse_mask\n\nThis patch passes the number of units to aarch64_reverse_mask,\nwhich avoids a to_constant () once GET_MODE_NUNITS is variable.\n\n2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_reverse_mask): Take\n\tthe number of units too.\n\t* config/aarch64/aarch64.c (aarch64_reverse_mask): Likewise.\n\t* config/aarch64/aarch64-simd.md (vec_load_lanesoi<mode>)\n\t(vec_store_lanesoi<mode>, vec_load_lanesci<mode>)\n\t(vec_store_lanesci<mode>, vec_load_lanesxi<mode>)\n\t(vec_store_lanesxi<mode>): Update accordingly.\n\nReviewed-by: James Greenhalgh <james.greenhalgh@arm.com>\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254467", "tree": {"sha": "e44a8f3ed0e8bd6cb921d5be96cd384e3886642a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e44a8f3ed0e8bd6cb921d5be96cd384e3886642a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e3da51639120db26eff9bf39e2339d92a44488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e3da51639120db26eff9bf39e2339d92a44488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e3da51639120db26eff9bf39e2339d92a44488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e3da51639120db26eff9bf39e2339d92a44488/comments", "author": null, "committer": null, "parents": [{"sha": "7ac29c0fa046d6018bad07ab17ec17585b5ef4ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac29c0fa046d6018bad07ab17ec17585b5ef4ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac29c0fa046d6018bad07ab17ec17585b5ef4ce"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "ad78a257288e24259a339c26206423882950434a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73e3da51639120db26eff9bf39e2339d92a44488", "patch": "@@ -1,3 +1,15 @@\n+2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_reverse_mask): Take\n+\tthe number of units too.\n+\t* config/aarch64/aarch64.c (aarch64_reverse_mask): Likewise.\n+\t* config/aarch64/aarch64-simd.md (vec_load_lanesoi<mode>)\n+\t(vec_store_lanesoi<mode>, vec_load_lanesci<mode>)\n+\t(vec_store_lanesci<mode>, vec_load_lanesxi<mode>)\n+\t(vec_store_lanesxi<mode>): Update accordingly.\n+\n 2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "39691155aff798b6cc13b92b16fb0c78a7d05a08", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=73e3da51639120db26eff9bf39e2339d92a44488", "patch": "@@ -352,7 +352,7 @@ bool aarch64_mask_and_shift_for_ubfiz_p (scalar_int_mode, rtx, rtx);\n bool aarch64_zero_extend_const_eq (machine_mode, rtx, machine_mode, rtx);\n bool aarch64_move_imm (HOST_WIDE_INT, machine_mode);\n bool aarch64_mov_operand_p (rtx, machine_mode);\n-rtx aarch64_reverse_mask (machine_mode);\n+rtx aarch64_reverse_mask (machine_mode, unsigned int);\n bool aarch64_offset_7bit_signed_scaled_p (machine_mode, HOST_WIDE_INT);\n char *aarch64_output_scalar_simd_mov_immediate (rtx, scalar_int_mode);\n char *aarch64_output_simd_mov_immediate (rtx, machine_mode, unsigned,"}, {"sha": "642f4b1bfa3678fd097b67a31b85c59eb9084cb4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=73e3da51639120db26eff9bf39e2339d92a44488", "patch": "@@ -4633,7 +4633,7 @@\n   if (BYTES_BIG_ENDIAN)\n     {\n       rtx tmp = gen_reg_rtx (OImode);\n-      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode, <nunits>);\n       emit_insn (gen_aarch64_simd_ld2<mode> (tmp, operands[1]));\n       emit_insn (gen_aarch64_rev_reglistoi (operands[0], tmp, mask));\n     }\n@@ -4677,7 +4677,7 @@\n   if (BYTES_BIG_ENDIAN)\n     {\n       rtx tmp = gen_reg_rtx (OImode);\n-      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode, <nunits>);\n       emit_insn (gen_aarch64_rev_reglistoi (tmp, operands[1], mask));\n       emit_insn (gen_aarch64_simd_st2<mode> (operands[0], tmp));\n     }\n@@ -4731,7 +4731,7 @@\n   if (BYTES_BIG_ENDIAN)\n     {\n       rtx tmp = gen_reg_rtx (CImode);\n-      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode, <nunits>);\n       emit_insn (gen_aarch64_simd_ld3<mode> (tmp, operands[1]));\n       emit_insn (gen_aarch64_rev_reglistci (operands[0], tmp, mask));\n     }\n@@ -4775,7 +4775,7 @@\n   if (BYTES_BIG_ENDIAN)\n     {\n       rtx tmp = gen_reg_rtx (CImode);\n-      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode, <nunits>);\n       emit_insn (gen_aarch64_rev_reglistci (tmp, operands[1], mask));\n       emit_insn (gen_aarch64_simd_st3<mode> (operands[0], tmp));\n     }\n@@ -4829,7 +4829,7 @@\n   if (BYTES_BIG_ENDIAN)\n     {\n       rtx tmp = gen_reg_rtx (XImode);\n-      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode, <nunits>);\n       emit_insn (gen_aarch64_simd_ld4<mode> (tmp, operands[1]));\n       emit_insn (gen_aarch64_rev_reglistxi (operands[0], tmp, mask));\n     }\n@@ -4873,7 +4873,7 @@\n   if (BYTES_BIG_ENDIAN)\n     {\n       rtx tmp = gen_reg_rtx (XImode);\n-      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode, <nunits>);\n       emit_insn (gen_aarch64_rev_reglistxi (tmp, operands[1], mask));\n       emit_insn (gen_aarch64_simd_st4<mode> (operands[0], tmp));\n     }"}, {"sha": "b3ce7f6d27102b16054e42f9c82b3e137d6b0a8c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e3da51639120db26eff9bf39e2339d92a44488/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=73e3da51639120db26eff9bf39e2339d92a44488", "patch": "@@ -13699,16 +13699,18 @@ aarch64_vectorize_vec_perm_const_ok (machine_mode vmode, vec_perm_indices sel)\n   return ret;\n }\n \n+/* Generate a byte permute mask for a register of mode MODE,\n+   which has NUNITS units.  */\n+\n rtx\n-aarch64_reverse_mask (machine_mode mode)\n+aarch64_reverse_mask (machine_mode mode, unsigned int nunits)\n {\n   /* We have to reverse each vector because we dont have\n      a permuted load that can reverse-load according to ABI rules.  */\n   rtx mask;\n   rtvec v = rtvec_alloc (16);\n-  int i, j;\n-  int nunits = GET_MODE_NUNITS (mode);\n-  int usize = GET_MODE_UNIT_SIZE (mode);\n+  unsigned int i, j;\n+  unsigned int usize = GET_MODE_UNIT_SIZE (mode);\n \n   gcc_assert (BYTES_BIG_ENDIAN);\n   gcc_assert (AARCH64_VALID_SIMD_QREG_MODE (mode));"}]}