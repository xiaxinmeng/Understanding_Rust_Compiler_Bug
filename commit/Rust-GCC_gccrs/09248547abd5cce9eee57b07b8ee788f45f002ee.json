{"sha": "09248547abd5cce9eee57b07b8ee788f45f002ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyNDg1NDdhYmQ1Y2NlOWVlZTU3YjA3YjhlZTc4OGY0NWYwMDJlZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-23T08:31:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-23T08:31:52Z"}, "message": "trans.c (Regular_Loop_to_gnu): Do not rotate the loop if -Og is enabled.\n\n\t* gcc-interface/trans.c (Regular_Loop_to_gnu): Do not rotate the loop\n\tif -Og is enabled.\n\t(build_return_expr): Do not perform NRV if -Og is enabled.\n\t(Subprogram_Body_to_gnu): Likewise.\n\t(gnat_to_gnu) <N_Simple_Return_Statement>: Likewise.\n\t(Handled_Sequence_Of_Statements_to_gnu): Do not inline finalizers if\n\t-Og is enabled.\n\t* gcc-interface/utils.c (convert_to_index_type): Return early if -Og\n\tis enabled.\n\nFrom-SVN: r276047", "tree": {"sha": "636103bf521e05bdfc3a458d54c2cb6b03e37dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/636103bf521e05bdfc3a458d54c2cb6b03e37dad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09248547abd5cce9eee57b07b8ee788f45f002ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09248547abd5cce9eee57b07b8ee788f45f002ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09248547abd5cce9eee57b07b8ee788f45f002ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09248547abd5cce9eee57b07b8ee788f45f002ee/comments", "author": null, "committer": null, "parents": [{"sha": "8082999eb2e01e16beca9722664f7575185b0e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8082999eb2e01e16beca9722664f7575185b0e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8082999eb2e01e16beca9722664f7575185b0e61"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "c0bc883c20acb09ef8ace6ac2f6f728a074010b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09248547abd5cce9eee57b07b8ee788f45f002ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09248547abd5cce9eee57b07b8ee788f45f002ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=09248547abd5cce9eee57b07b8ee788f45f002ee", "patch": "@@ -1,3 +1,15 @@\n+2019-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Regular_Loop_to_gnu): Do not rotate the loop\n+\tif -Og is enabled.\n+\t(build_return_expr): Do not perform NRV if -Og is enabled.\n+\t(Subprogram_Body_to_gnu): Likewise.\n+\t(gnat_to_gnu) <N_Simple_Return_Statement>: Likewise.\n+\t(Handled_Sequence_Of_Statements_to_gnu): Do not inline finalizers if\n+\t-Og is enabled.\n+\t* gcc-interface/utils.c (convert_to_index_type): Return early if -Og\n+\tis enabled.\n+\n 2019-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_compile_time_expr_list): New variable."}, {"sha": "7b842d40f7e95963b6e52396e78de6d6ea00d7d2", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09248547abd5cce9eee57b07b8ee788f45f002ee/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09248547abd5cce9eee57b07b8ee788f45f002ee/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=09248547abd5cce9eee57b07b8ee788f45f002ee", "patch": "@@ -3653,7 +3653,7 @@ Regular_Loop_to_gnu (Node_Id gnat_node, tree *gnu_cond_expr_p)\n \n \t which works in all cases.  */\n \n-      if (optimize)\n+      if (optimize && !optimize_debug)\n \t{\n \t  /* We can use the do-while form directly if GNU_FIRST-1 doesn't\n \t     overflow.  */\n@@ -4436,6 +4436,7 @@ build_return_expr (tree ret_obj, tree ret_val)\n \t a candidate for Named Return Value.  If so, record it.  Otherwise,\n \t if this is an expression of some kind, record it elsewhere.  */\n       if (optimize\n+\t  && !optimize_debug\n \t  && AGGREGATE_TYPE_P (operation_type)\n \t  && !TYPE_IS_FAT_POINTER_P (operation_type)\n \t  && TYPE_MODE (operation_type) == BLKmode\n@@ -4773,7 +4774,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \n   /* If the function returns an aggregate type and we have candidates for\n      a Named Return Value, finalize the optimization.  */\n-  if (optimize && gnu_subprog_language->named_ret_val)\n+  if (optimize && !optimize_debug && gnu_subprog_language->named_ret_val)\n     {\n       finalize_nrv (gnu_subprog_decl,\n \t\t    gnu_subprog_language->named_ret_val,\n@@ -5893,7 +5894,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \n       /* When not optimizing, disable inlining of finalizers as this can\n \t create a more complex CFG in the parent function.  */\n-      if (!optimize)\n+      if (!optimize || optimize_debug)\n \tDECL_DECLARED_INLINE_P (proc_decl) = 0;\n \n       /* If there is no end label attached, we use the location of the At_End\n@@ -8050,7 +8051,9 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t\t/* And find out whether this is a candidate for Named Return\n \t\t   Value.  If so, record it.  */\n-\t\tif (!TYPE_CI_CO_LIST (gnu_subprog_type) && optimize)\n+\t\tif (optimize\n+\t\t    && !optimize_debug\n+\t\t    && !TYPE_CI_CO_LIST (gnu_subprog_type))\n \t\t  {\n \t\t    tree ret_val = gnu_ret_val;\n "}, {"sha": "b9d5af771e80a67b534684f34f755524df3e1b34", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09248547abd5cce9eee57b07b8ee788f45f002ee/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09248547abd5cce9eee57b07b8ee788f45f002ee/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=09248547abd5cce9eee57b07b8ee788f45f002ee", "patch": "@@ -5023,7 +5023,7 @@ convert_to_index_type (tree expr)\n \n   /* If the type is unsigned, overflow is allowed so we cannot be sure that\n      EXPR doesn't overflow.  Keep it simple if optimization is disabled.  */\n-  if (TYPE_UNSIGNED (type) || !optimize)\n+  if (TYPE_UNSIGNED (type) || !optimize || optimize_debug)\n     return convert (sizetype, expr);\n \n   switch (code)"}]}