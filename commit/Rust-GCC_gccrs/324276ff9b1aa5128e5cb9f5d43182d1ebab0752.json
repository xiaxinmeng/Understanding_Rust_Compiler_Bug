{"sha": "324276ff9b1aa5128e5cb9f5d43182d1ebab0752", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0Mjc2ZmY5YjFhYTUxMjhlNWNiOWY1ZDQzMTgyZDFlYmFiMDc1Mg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-02T15:47:54Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-02T18:10:28Z"}, "message": "coroutines: Wrap co_await in a target expr where needed [PR95050]\n\nSince the co_await expression is mostly opaque to the existing\nmachinery, we were hiding the details of the await_resume return\nvalue.  If that needs to be wrapped in a target expression, then\nemulate this with the whole co_await.  Similarly, if the await\nexpression we build in response to co_await p.yield_value (e)\nis wrapped in a target expression, then we need to transfer that\nwrapper to the resultant CO_YIELD_EXPR (which is, itself, just\na proxy for the underlying co_await).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95050\n\t* coroutines.cc (build_co_await): Wrap the co_await expression\n\tin a TARGET_EXPR, where needed.\n\t(finish_co_yield_expr): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95050\n\t* g++.dg/coroutines/pr95050.C: New test.", "tree": {"sha": "d38572dea31e7d15363b5f645da700f6c6396638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38572dea31e7d15363b5f645da700f6c6396638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/324276ff9b1aa5128e5cb9f5d43182d1ebab0752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324276ff9b1aa5128e5cb9f5d43182d1ebab0752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324276ff9b1aa5128e5cb9f5d43182d1ebab0752", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324276ff9b1aa5128e5cb9f5d43182d1ebab0752/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce95db102aab4dea9af24a20de78db2f57c0a37b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce95db102aab4dea9af24a20de78db2f57c0a37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce95db102aab4dea9af24a20de78db2f57c0a37b"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "e689625793239d6a11abe9a589262dcdb95bfe7f", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324276ff9b1aa5128e5cb9f5d43182d1ebab0752/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324276ff9b1aa5128e5cb9f5d43182d1ebab0752/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=324276ff9b1aa5128e5cb9f5d43182d1ebab0752", "patch": "@@ -816,14 +816,26 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n   tree awaiter_calls = make_tree_vec (3);\n   TREE_VEC_ELT (awaiter_calls, 0) = awrd_call; /* await_ready().  */\n   TREE_VEC_ELT (awaiter_calls, 1) = awsp_call; /* await_suspend().  */\n+  tree te = NULL_TREE;\n+  if (TREE_CODE (awrs_call) == TARGET_EXPR)\n+    {\n+      te = awrs_call;\n+      awrs_call = TREE_OPERAND (awrs_call, 1);\n+    }\n   TREE_VEC_ELT (awaiter_calls, 2) = awrs_call; /* await_resume().  */\n \n   tree await_expr = build5_loc (loc, CO_AWAIT_EXPR,\n \t\t\t\tTREE_TYPE (TREE_TYPE (awrs_func)),\n \t\t\t\ta, e_proxy, o, awaiter_calls,\n \t\t\t\tbuild_int_cst (integer_type_node,\n \t\t\t\t\t       (int) suspend_kind));\n-  return convert_from_reference (await_expr);\n+  if (te)\n+    {\n+      TREE_OPERAND (te, 1) = await_expr;\n+      await_expr = te;\n+    }\n+  tree t = convert_from_reference (await_expr);\n+  return t;\n }\n \n tree\n@@ -960,8 +972,21 @@ finish_co_yield_expr (location_t kw, tree expr)\n   tree op = build_co_await (kw, yield_call, CO_YIELD_SUSPEND_POINT);\n   if (op != error_mark_node)\n     {\n-      op = build2_loc (kw, CO_YIELD_EXPR, TREE_TYPE (op), expr, op);\n+      if (REFERENCE_REF_P (op))\n+\top = TREE_OPERAND (op, 0);\n+      /* If the await expression is wrapped in a TARGET_EXPR, then transfer\n+\t that wrapper to the CO_YIELD_EXPR, since this is just a proxy for\n+\t its contained await.  Otherwise, just build the CO_YIELD_EXPR.  */\n+      if (TREE_CODE (op) == TARGET_EXPR)\n+\t{\n+\t  tree t = TREE_OPERAND (op, 1);\n+\t  t = build2_loc (kw, CO_YIELD_EXPR, TREE_TYPE (t), expr, t);\n+\t  TREE_OPERAND (op, 1) = t;\n+\t}\n+      else\n+\top = build2_loc (kw, CO_YIELD_EXPR, TREE_TYPE (op), expr, op);\n       TREE_SIDE_EFFECTS (op) = 1;\n+      op = convert_from_reference (op);\n     }\n \n   return op;"}, {"sha": "fd1516d32f04f0ff9172dc893a24bcf6252b4e9f", "filename": "gcc/testsuite/g++.dg/coroutines/pr95050.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324276ff9b1aa5128e5cb9f5d43182d1ebab0752/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95050.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324276ff9b1aa5128e5cb9f5d43182d1ebab0752/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95050.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95050.C?ref=324276ff9b1aa5128e5cb9f5d43182d1ebab0752", "patch": "@@ -0,0 +1,49 @@\n+#if __has_include (<coroutine>)\n+#include <coroutine>\n+using namespace std;\n+#elif defined (__clang__) && __has_include (<experimental/coroutine>)\n+#include <experimental/coroutine>\n+using namespace std::experimental;\n+#endif\n+#include <utility>\n+\n+struct ret_type \n+{\n+  ret_type () = default;\n+  ret_type (const ret_type&) = delete;\n+  //ret_type (ret_type&&) = default;\n+  ~ret_type() {}\n+};\n+\n+struct task\n+{\n+  struct promise_type\n+  {\n+    auto get_return_object () -> task  { return {}; }\n+    auto initial_suspend () -> suspend_always { return {}; }\n+    auto final_suspend () -> suspend_always { return {}; }\n+    void return_void () {} \n+    void unhandled_exception () { }\n+    void thing (ret_type x) {} \n+  };\n+};\n+\n+struct awaiter\n+{\n+  bool await_ready() const { return true; }\n+  void await_suspend (coroutine_handle<>) {}\n+  ret_type await_resume() { return {}; }\n+};\n+\n+task\n+my_coro ()\n+{\n+  ret_type r2{co_await awaiter{}};\n+  //ret_type r3 (std::move(r2));\n+}\n+\n+int main()\n+{\n+ auto x = my_coro ();\n+ return 0;\n+}"}]}