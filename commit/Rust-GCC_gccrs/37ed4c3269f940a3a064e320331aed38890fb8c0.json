{"sha": "37ed4c3269f940a3a064e320331aed38890fb8c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdlZDRjMzI2OWY5NDBhM2EwNjRlMzIwMzMxYWVkMzg4OTBmYjhjMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-27T17:51:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-27T17:51:43Z"}, "message": "compiler: don't read known type, simplify Import::finalize_methods\n    \n    With the current export format, if we already know the type, we don't\n    have to read and parse the definition.\n    \n    We only use the finalizer in Import::finalize_methods, so make it a\n    local variable.  To match Finalize_methods::type, only put struct\n    types into real_for_named.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/197700\n\nFrom-SVN: r276188", "tree": {"sha": "debbcd2618d12faca1022453affd57f60e070665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/debbcd2618d12faca1022453affd57f60e070665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37ed4c3269f940a3a064e320331aed38890fb8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ed4c3269f940a3a064e320331aed38890fb8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ed4c3269f940a3a064e320331aed38890fb8c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ed4c3269f940a3a064e320331aed38890fb8c0/comments", "author": null, "committer": null, "parents": [{"sha": "51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c3b7c6ec20262f2a4698f42e533c28d2c38a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c3b7c6ec20262f2a4698f42e533c28d2c38a87"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "1e6ca6fa5dd97cf9ce8582997466491c59cd5aa4", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ed4c3269f940a3a064e320331aed38890fb8c0/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ed4c3269f940a3a064e320331aed38890fb8c0/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=37ed4c3269f940a3a064e320331aed38890fb8c0", "patch": "@@ -1,4 +1,4 @@\n-27d1f3031197428b5745d09c167f982d638b8776\n+9112ea664ed9ee5f108158a913812adaf03edf6e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c63ae24f533d71aa745345b0980554029394f9e8", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ed4c3269f940a3a064e320331aed38890fb8c0/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ed4c3269f940a3a064e320331aed38890fb8c0/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=37ed4c3269f940a3a064e320331aed38890fb8c0", "patch": "@@ -290,16 +290,10 @@ Import::Import(Stream* stream, Location location)\n   : gogo_(NULL), stream_(stream), location_(location), package_(NULL),\n     add_to_globals_(false), packages_(), type_data_(), type_pos_(0),\n     type_offsets_(), builtin_types_((- SMALLEST_BUILTIN_CODE) + 1),\n-    types_(), finalizer_(NULL), version_(EXPORT_FORMAT_UNKNOWN)\n+    types_(), version_(EXPORT_FORMAT_UNKNOWN)\n {\n }\n \n-Import::~Import()\n-{\n-  if (this->finalizer_ != NULL)\n-    delete this->finalizer_;\n-}\n-\n // Import the data in the associated stream.\n \n Package*\n@@ -692,16 +686,22 @@ Import::read_types()\n void\n Import::finalize_methods()\n {\n-  if (this->finalizer_ == NULL)\n-    this->finalizer_ = new Finalize_methods(gogo_);\n+  Finalize_methods finalizer(this->gogo_);\n   Unordered_set(Type*) real_for_named;\n   for (size_t i = 1; i < this->types_.size(); i++)\n     {\n       Type* type = this->types_[i];\n       if (type != NULL && type->named_type() != NULL)\n         {\n-          this->finalizer_->type(type);\n-          real_for_named.insert(type->named_type()->real_type());\n+          finalizer.type(type);\n+\n+\t  // If the real type is a struct type, we don't want to\n+\t  // finalize its methods.  For a named type defined as a\n+\t  // struct type, we only want to finalize the methods of the\n+\t  // named type.  This is like Finalize_methods::type.\n+\t  Type* real_type = type->named_type()->real_type();\n+\t  if (real_type->struct_type() != NULL)\n+\t    real_for_named.insert(real_type);\n         }\n     }\n   for (size_t i = 1; i < this->types_.size(); i++)\n@@ -710,7 +710,7 @@ Import::finalize_methods()\n       if (type != NULL\n           && type->named_type() == NULL\n           && real_for_named.find(type) == real_for_named.end())\n-        this->finalizer_->type(type);\n+        finalizer.type(type);\n     }\n }\n \n@@ -1105,12 +1105,12 @@ Import::read_named_type(int index)\n     type = this->types_[index];\n   else\n     {\n-      type = this->read_type();\n-\n       if (no->is_type_declaration())\n \t{\n \t  // We can define the type now.\n \n+\t  type = this->read_type();\n+\n \t  no = package->add_type(type_name, type, this->location_);\n \t  Named_type* ntype = no->type_value();\n \n@@ -1127,14 +1127,18 @@ Import::read_named_type(int index)\n \t}\n       else if (no->is_type())\n \t{\n-\t  // We have seen this type before.  FIXME: it would be a good\n-\t  // idea to check that the two imported types are identical,\n-\t  // but we have not finalized the methods yet, which means\n-\t  // that we can not reliably compare interface types.\n+\t  // We have seen this type before.\n \t  type = no->type_value();\n \n \t  // Don't change the visibility of the existing type.\n+\n+\t  // For older export versions, we need to skip the type\n+\t  // definition in the stream.\n+\t  if (this->version_ < EXPORT_FORMAT_V3)\n+\t    this->read_type();\n \t}\n+      else\n+\tgo_unreachable();\n \n       this->types_[index] = type;\n "}, {"sha": "b12b3b843df6166b9dc4cc24655096f47312796e", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ed4c3269f940a3a064e320331aed38890fb8c0/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ed4c3269f940a3a064e320331aed38890fb8c0/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=37ed4c3269f940a3a064e320331aed38890fb8c0", "patch": "@@ -208,8 +208,6 @@ class Import : public Import_expression\n   // Constructor.\n   Import(Stream*, Location);\n \n-  virtual ~Import();\n-\n   // Register the builtin types.\n   void\n   register_builtin_types(Gogo*);\n@@ -450,8 +448,6 @@ class Import : public Import_expression\n   std::vector<Named_type*> builtin_types_;\n   // Mapping from exported type codes to Type structures.\n   std::vector<Type*> types_;\n-  // Helper for finalizing methods.\n-  Finalize_methods* finalizer_;\n   // Version of export data we're reading.\n   Export_data_version version_;\n };"}]}