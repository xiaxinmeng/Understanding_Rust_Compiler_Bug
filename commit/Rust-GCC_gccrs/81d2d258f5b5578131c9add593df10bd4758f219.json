{"sha": "81d2d258f5b5578131c9add593df10bd4758f219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkMmQyNThmNWI1NTc4MTMxYzlhZGQ1OTNkZjEwYmQ0NzU4ZjIxOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-14T11:53:02Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-14T11:53:02Z"}, "message": "2003-06-14  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileChannelImpl.java\n        (map_address): Removed incorrect comment.\n\t* gnu/java/nio/SelectorImpl.java\n        (register): Remove code duplication and code for file channel handling.\n\t* gnu/java/nio/ServerSocketChannelImpl.java\n        (serverSocket): Renamed from sock_object.\n        (ServerSocketChannel): Initialize serverSocket.\n        (socket): Return serverSocket.\n\t* gnu/java/nio/SocketChannelImpl.java\n        (socket): Renamed from sock_object.\n        (isConnectionPenging): Simplified.\n        (socket): Return socket.\n\nFrom-SVN: r67940", "tree": {"sha": "b079e077f62874b5e1b42c98455301dc0d73a902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b079e077f62874b5e1b42c98455301dc0d73a902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81d2d258f5b5578131c9add593df10bd4758f219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d2d258f5b5578131c9add593df10bd4758f219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d2d258f5b5578131c9add593df10bd4758f219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d2d258f5b5578131c9add593df10bd4758f219/comments", "author": null, "committer": null, "parents": [{"sha": "34e8290f9591d58d0e3d78dfe09a1ea5973cf06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e8290f9591d58d0e3d78dfe09a1ea5973cf06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e8290f9591d58d0e3d78dfe09a1ea5973cf06a"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "f2d62925748f17b2dd28bfd6dc4aa9d28bc74ae3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=81d2d258f5b5578131c9add593df10bd4758f219", "patch": "@@ -1,5 +1,19 @@\n 2003-06-14  Michael Koch  <konqueror@gmx.de>\n \n+\t* gnu/java/nio/FileChannelImpl.java\n+        (map_address): Removed incorrect comment.        \n+\t* gnu/java/nio/SelectorImpl.java\n+        (register): Remove code duplication and code for file channel handling.        \n+\t* gnu/java/nio/ServerSocketChannelImpl.java\n+        (serverSocket): Renamed from sock_object.\n+        (ServerSocketChannel): Initialize serverSocket.\n+        (socket): Return serverSocket.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+        (socket): Renamed from sock_object.\n+        (isConnectionPenging): Simplified.\n+        (socket): Return socket.\n+2003-06-14  Michael Koch  <konqueror@gmx.de>\n+\n \t* java/security/BasicPermission.java:\n \tNew version from classpath.\n "}, {"sha": "cedf39786826ef7726440ee6b2e978575997b037", "filename": "libjava/gnu/java/nio/FileChannelImpl.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileChannelImpl.java?ref=81d2d258f5b5578131c9add593df10bd4758f219", "patch": "@@ -35,6 +35,7 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package gnu.java.nio;\n \n import java.io.EOFException;\n@@ -64,8 +65,6 @@\n \n public class FileChannelImpl extends FileChannel\n {\n-  // GCJ LOCAL: This variable stores a pointer to the memory\n-  // where the file is mapped.\n   RawData map_address;\n   \n   int length;"}, {"sha": "f2281a68d5ae7e0d096867314e983e815303ab72", "filename": "libjava/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=81d2d258f5b5578131c9add593df10bd4758f219", "patch": "@@ -250,50 +250,31 @@ protected SelectionKey register (SelectableChannel ch, int ops, Object att)\n   protected SelectionKey register (AbstractSelectableChannel ch, int ops,\n                                    Object att)\n   {\n-// \t  // filechannel is not selectable ?\n-//     if (ch instanceof FileChannelImpl)\n-//       {\n-//         FileChannelImpl fc = (FileChannelImpl) ch;\n-//         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, fc.fd);\n-//         keys.add (impl);\n-//         impl.interestOps (ops);\n-//         impl.attach (att);\n-//         return impl;\n-//       }\n-//     else\n-\n+    SelectionKeyImpl result;\n+    \n     if (ch instanceof SocketChannelImpl)\n       {\n         SocketChannelImpl sc = (SocketChannelImpl) ch;\n-        SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, sc.fd);\n-        add (impl);\n-        impl.interestOps (ops);\n-        impl.attach (att);\n-        return impl;\n+        result = new SelectionKeyImpl (ch, this, sc.fd);\n       }\n     else if (ch instanceof DatagramChannelImpl)\n       {\n         DatagramChannelImpl dc = (DatagramChannelImpl) ch;\n-        SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, dc.fd);\n-        add (impl);\n-        impl.interestOps (ops);\n-        impl.attach (att);\n-        return impl;\n+        result = new SelectionKeyImpl (ch, this, dc.fd);\n       }\n     else if (ch instanceof ServerSocketChannelImpl)\n       {\n         ServerSocketChannelImpl ssc = (ServerSocketChannelImpl) ch;\n-        SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, ssc.fd);\n-        add (impl);\n-        impl.interestOps (ops);\n-        impl.attach (att);\n-        return impl;\n+        result = new SelectionKeyImpl (ch, this, ssc.fd);\n       }\n     else\n       {\n-        System.err.println (\"INTERNAL ERROR, no known channel type\");\n+        throw new InternalError (\"No known channel type\");\n       }\n \n-    return null;\n+    add (result);\n+    result.interestOps (ops);\n+    result.attach (att);\n+    return result;\n   }\n }"}, {"sha": "aded220788027d2a31e2ff6b64ea7806877cfc1b", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=81d2d258f5b5578131c9add593df10bd4758f219", "patch": "@@ -47,7 +47,7 @@\n \n class ServerSocketChannelImpl extends ServerSocketChannel\n {\n-  ServerSocket sock_object;\n+  ServerSocket serverSocket;\n   int fd;\n //   int local_port;\n   boolean blocking = true;\n@@ -62,7 +62,7 @@ protected ServerSocketChannelImpl (SelectorProvider provider)\n \n     try\n       {\n-        sock_object = new ServerSocket ();\n+        serverSocket = new ServerSocket ();\n       }\n     catch (IOException e)\n       {\n@@ -106,6 +106,6 @@ public SocketChannel accept () throws IOException\n \n   public ServerSocket socket ()\n   {\n-    return sock_object;\n+    return serverSocket;\n   }\n }"}, {"sha": "820d62f3b6c470dc6f89c4e8065b7680bb5a6104", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d2d258f5b5578131c9add593df10bd4758f219/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=81d2d258f5b5578131c9add593df10bd4758f219", "patch": "@@ -35,6 +35,7 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package gnu.java.nio;\n \n import java.io.IOException;\n@@ -50,7 +51,7 @@\n \n public class SocketChannelImpl extends SocketChannel\n {\n-  Socket sock_object;\n+  Socket socket;\n   int fd;\n   int local_port;\n   boolean blocking = true;\n@@ -141,20 +142,17 @@ public boolean isConnected ()\n     \n   public boolean isConnectionPending ()\n   {\n-    if (blocking)\n-\t    return true;\n-\n-    return false;\n+    return blocking ? true : false;\n   }\n     \n   public Socket socket ()\n   {\n-    if (sock_object != null)\n+    if (socket != null)\n \t    {\n-        //sock_object.ch = this;\n+        //socket.ch = this;\n \t    }\n \n-    return sock_object;\n+    return socket;\n   }\n \n   public int read (ByteBuffer dst) throws IOException"}]}