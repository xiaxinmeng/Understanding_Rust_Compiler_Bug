{"sha": "f9ce3c163948ece546d642ac0c62fbc11d8481e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljZTNjMTYzOTQ4ZWNlNTQ2ZDY0MmFjMGM2MmZiYzExZDg0ODFlNA==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2015-07-29T03:45:35Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2015-07-29T03:45:35Z"}, "message": "re PR libstdc++/67015 (\"^[a-z0-9][a-z0-9-]*$\", std::regex::extended is miscompiled)\n\n\tPR libstdc++/67015\n\t* include/bits/regex_compiler.h (_Compiler<>::_M_expression_term,\n\t_BracketMatcher<>::_M_add_collating_element): Change signature\n\tto make checking the and of bracket expression easier.\n\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_expression_term):\n\tTreat '-' as a valid literal if it's at the end of bracket expression.\n\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n\tNew testcases.\n\nFrom-SVN: r226336", "tree": {"sha": "05c7ab84f01d92671974be16b8eec22dd3353f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c7ab84f01d92671974be16b8eec22dd3353f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ce3c163948ece546d642ac0c62fbc11d8481e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ce3c163948ece546d642ac0c62fbc11d8481e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ce3c163948ece546d642ac0c62fbc11d8481e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ce3c163948ece546d642ac0c62fbc11d8481e4/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d61d8758577f5bf9ce4884544cbbc09af71ca28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d61d8758577f5bf9ce4884544cbbc09af71ca28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d61d8758577f5bf9ce4884544cbbc09af71ca28"}], "stats": {"total": 112, "additions": 99, "deletions": 13}, "files": [{"sha": "4447b3d9f4897802cc1845ee59cb50b68b6d125a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f9ce3c163948ece546d642ac0c62fbc11d8481e4", "patch": "@@ -1,3 +1,14 @@\n+2015-07-29  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/67015\n+\t* include/bits/regex_compiler.h (_Compiler<>::_M_expression_term,\n+\t_BracketMatcher<>::_M_add_collating_element): Change signature\n+\tto make checking the and of bracket expression easier.\n+\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_expression_term):\n+\tTreat '-' as a valid literal if it's at the end of bracket expression.\n+\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n+\tNew testcases.\n+\n 2015-07-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/atomic_futex.h [_GLIBCXX_HAVE_LINUX_FUTEX]"}, {"sha": "0cb0c04b1ebe31e673321d4ccce2e78ce7401b6f", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=f9ce3c163948ece546d642ac0c62fbc11d8481e4", "patch": "@@ -116,8 +116,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t_M_insert_bracket_matcher(bool __neg);\n \n+      // Returns true if successfully matched one term and should continue.\n+      // Returns false if the compiler should move on.\n       template<bool __icase, bool __collate>\n-\tvoid\n+\tbool\n \t_M_expression_term(pair<bool, _CharT>& __last_char,\n \t\t\t   _BracketMatcher<_TraitsT, __icase, __collate>&\n \t\t\t   __matcher);\n@@ -389,8 +391,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n       }\n \n-      void\n-      _M_add_collating_element(const _StringT& __s)\n+      _StringT\n+      _M_add_collate_element(const _StringT& __s)\n       {\n \tauto __st = _M_traits.lookup_collatename(__s.data(),\n \t\t\t\t\t\t __s.data() + __s.size());\n@@ -400,6 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_DEBUG\n \t_M_is_ready = false;\n #endif\n+\treturn __st;\n       }\n \n       void"}, {"sha": "9a62311155526a4848720712004ecf82169cae9d", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=f9ce3c163948ece546d642ac0c62fbc11d8481e4", "patch": "@@ -424,8 +424,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __last_char.first = true;\n \t    __last_char.second = _M_value[0];\n \t  }\n-      while (!_M_match_token(_ScannerT::_S_token_bracket_end))\n-\t_M_expression_term(__last_char, __matcher);\n+      while (_M_expression_term(__last_char, __matcher));\n       __matcher._M_ready();\n       _M_stack.push(_StateSeqT(\n \t\t      *_M_nfa,\n@@ -434,21 +433,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _TraitsT>\n   template<bool __icase, bool __collate>\n-    void\n+    bool\n     _Compiler<_TraitsT>::\n     _M_expression_term(pair<bool, _CharT>& __last_char,\n \t\t       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)\n     {\n+      if (_M_match_token(_ScannerT::_S_token_bracket_end))\n+\treturn false;\n+\n       if (_M_match_token(_ScannerT::_S_token_collsymbol))\n-\t__matcher._M_add_collating_element(_M_value);\n+\t{\n+\t  auto __symbol = __matcher._M_add_collate_element(_M_value);\n+\t  if (__symbol.size() == 1)\n+\t    {\n+\t      __last_char.first = true;\n+\t      __last_char.second = __symbol[0];\n+\t    }\n+\t}\n       else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))\n \t__matcher._M_add_equivalence_class(_M_value);\n       else if (_M_match_token(_ScannerT::_S_token_char_class_name))\n \t__matcher._M_add_character_class(_M_value, false);\n-      // POSIX doesn't permit '-' as a start-range char (say [a-z--0]),\n-      // except when the '-' is the first character in the bracket expression\n-      // ([--0]). ECMAScript treats all '-' after a range as a normal character.\n-      // Also see above, where _M_expression_term gets called.\n+      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),\n+      // except when the '-' is the first or last character in the bracket\n+      // expression ([--0]). ECMAScript treats all '-' after a range as a\n+      // normal character. Also see above, where _M_expression_term gets called.\n       //\n       // As a result, POSIX rejects [-----], but ECMAScript doesn't.\n       // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.\n@@ -459,10 +468,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  if (!__last_char.first)\n \t    {\n+\t      __matcher._M_add_char(_M_value[0]);\n \t      if (_M_value[0] == '-'\n \t\t  && !(_M_flags & regex_constants::ECMAScript))\n-\t\t__throw_regex_error(regex_constants::error_range);\n-\t      __matcher._M_add_char(_M_value[0]);\n+\t\t{\n+\t\t  if (_M_match_token(_ScannerT::_S_token_bracket_end))\n+\t\t    return false;\n+\t\t  __throw_regex_error(regex_constants::error_range);\n+\t\t}\n \t      __last_char.first = true;\n \t      __last_char.second = _M_value[0];\n \t    }\n@@ -496,6 +509,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t     _M_value[0]));\n       else\n \t__throw_regex_error(regex_constants::error_brack);\n+\n+      return true;\n     }\n \n   template<typename _TraitsT>"}, {"sha": "62131a0bcc956fbe80d89a014942b34c577f2f10", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ce3c163948ece546d642ac0c62fbc11d8481e4/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc?ref=f9ce3c163948ece546d642ac0c62fbc11d8481e4", "patch": "@@ -82,6 +82,22 @@ test02()\n     VERIFY(e.code() == std::regex_constants::error_range);\n   }\n   std::regex re(\"[-----]\", std::regex::ECMAScript);\n+\n+  VERIFY(!regex_match(\"b\", regex(\"[-ac]\", regex_constants::extended)));\n+  VERIFY(!regex_match(\"b\", regex(\"[ac-]\", regex_constants::extended)));\n+  VERIFY(regex_match(\"b\", regex(\"[^-ac]\", regex_constants::extended)));\n+  VERIFY(regex_match(\"b\", regex(\"[^ac-]\", regex_constants::extended)));\n+  VERIFY(regex_match(\"&\", regex(\"[%--]\", regex_constants::extended)));\n+  VERIFY(regex_match(\".\", regex(\"[--@]\", regex_constants::extended)));\n+  try\n+  {\n+    regex(\"[a--@]\", regex_constants::extended);\n+    VERIFY(false);\n+  }\n+  catch (const std::regex_error& e)\n+  {\n+  }\n+  VERIFY(regex_match(\"].\", regex(\"[][.hyphen.]-0]*\", regex_constants::extended)));\n }\n \n void\n@@ -115,12 +131,53 @@ test04()\n   VERIFY(regex_match_debug(\"w\", re));\n }\n \n+// libstdc++/67015\n+void\n+test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  regex lanana_namespace(\"^[a-z0-9]+$\", regex::extended);\n+  regex lsb_namespace(\"^_?([a-z0-9_.]+-, regex::extended)+[a-z0-9]+$\");\n+  regex debian_dpkg_conffile_cruft(\"dpkg-(old|dist|new|tmp, regex::extended)$\");\n+  regex debian_cron_namespace(\"^[a-z0-9][a-z0-9-]*$\", regex::extended);\n+  VERIFY(regex_match(\"test\", debian_cron_namespace));\n+  VERIFY(!regex_match(\"-a\", debian_cron_namespace));\n+  VERIFY(regex_match(\"a-\", debian_cron_namespace));\n+  regex debian_cron_namespace_ok(\"^[a-z0-9][-a-z0-9]*$\", regex::extended);\n+  VERIFY(regex_match(\"test\", debian_cron_namespace_ok));\n+  VERIFY(!regex_match(\"-a\", debian_cron_namespace_ok));\n+  VERIFY(regex_match(\"a-\", debian_cron_namespace_ok));\n+}\n+\n+// libstdc++/67015\n+void\n+test06()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  regex lanana_namespace(\"^[a-z0-9]+$\");\n+  regex lsb_namespace(\"^_?([a-z0-9_.]+-)+[a-z0-9]+$\");\n+  regex debian_dpkg_conffile_cruft(\"dpkg-(old|dist|new|tmp)$\");\n+  regex debian_cron_namespace(\"^[a-z0-9][a-z0-9-]*$\");\n+  VERIFY(regex_match(\"test\", debian_cron_namespace));\n+  VERIFY(!regex_match(\"-a\", debian_cron_namespace));\n+  VERIFY(regex_match(\"a-\", debian_cron_namespace));\n+  regex debian_cron_namespace_ok(\"^[a-z0-9][-a-z0-9]*$\");\n+  VERIFY(regex_match(\"test\", debian_cron_namespace_ok));\n+  VERIFY(!regex_match(\"-a\", debian_cron_namespace_ok));\n+  VERIFY(regex_match(\"a-\", debian_cron_namespace_ok));\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n+  test06();\n+\n   return 0;\n }"}]}