{"sha": "786e0e5239529de9a4254fe8411a0e8f843e721a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2ZTBlNTIzOTUyOWRlOWE0MjU0ZmU4NDExYTBlOGY4NDNlNzIxYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-02T07:57:38Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-02T07:57:38Z"}, "message": "Prefer to use strlen call instead of inline expansion (PR target/88809).\n\n2019-05-02  Martin Liska  <mliska@suse.cz>\n\n\tPR target/88809\n\t* config/i386/i386.c (ix86_expand_strlen): Use strlen call.\n\tWith -minline-all-stringops use inline expansion using 4B loop.\n\t* doc/invoke.texi: Document the change of\n\t-minline-all-stringops.\n2019-05-02  Martin Liska  <mliska@suse.cz>\n\n\tPR target/88809\n\t* gcc.target/i386/pr88809.c: New test.\n\t* gcc.target/i386/pr88809-2.c: New test.\n\nFrom-SVN: r270787", "tree": {"sha": "8b319e19012eea14cba954edfd1ac8b95a7a6ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b319e19012eea14cba954edfd1ac8b95a7a6ff3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786e0e5239529de9a4254fe8411a0e8f843e721a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786e0e5239529de9a4254fe8411a0e8f843e721a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786e0e5239529de9a4254fe8411a0e8f843e721a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786e0e5239529de9a4254fe8411a0e8f843e721a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06ceaa1d78d586eba492699075a8dee31ab3a3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ceaa1d78d586eba492699075a8dee31ab3a3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ceaa1d78d586eba492699075a8dee31ab3a3e8"}], "stats": {"total": 107, "additions": 53, "deletions": 54}, "files": [{"sha": "1883e4df91ff7d3959cf4e17df00f81b6fa82d4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=786e0e5239529de9a4254fe8411a0e8f843e721a", "patch": "@@ -1,3 +1,11 @@\n+2019-05-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/88809\n+\t* config/i386/i386.c (ix86_expand_strlen): Use strlen call.\n+\tWith -minline-all-stringops use inline expansion using 4B loop.\n+\t* doc/invoke.texi: Document the change of\n+\t-minline-all-stringops.\n+\n 2019-05-01  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/88797"}, {"sha": "e7ee83d63726db16b868c25df4bf04b2e69bc09e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=786e0e5239529de9a4254fe8411a0e8f843e721a", "patch": "@@ -28270,68 +28270,34 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n bool\n ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n {\n-  rtx addr, scratch1, scratch2, scratch3, scratch4;\n-\n-  /* The generic case of strlen expander is long.  Avoid it's\n-     expanding unless TARGET_INLINE_ALL_STRINGOPS.  */\n-\n-  if (TARGET_UNROLL_STRLEN && eoschar == const0_rtx && optimize > 1\n-      && !TARGET_INLINE_ALL_STRINGOPS\n-      && !optimize_insn_for_size_p ()\n-      && (!CONST_INT_P (align) || INTVAL (align) < 4))\n-    return false;\n-\n-  addr = force_reg (Pmode, XEXP (src, 0));\n-  scratch1 = gen_reg_rtx (Pmode);\n-\n-  if (TARGET_UNROLL_STRLEN && eoschar == const0_rtx && optimize > 1\n-      && !optimize_insn_for_size_p ())\n-    {\n+if (TARGET_UNROLL_STRLEN\n+\t   && TARGET_INLINE_ALL_STRINGOPS\n+\t   && eoschar == const0_rtx\n+\t   && optimize > 1)\n+    {\n+      /* The generic case of strlen expander is long.  Avoid it's\n+\t expanding unless TARGET_INLINE_ALL_STRINGOPS.  */\n+      rtx addr = force_reg (Pmode, XEXP (src, 0));\n       /* Well it seems that some optimizer does not combine a call like\n-         foo(strlen(bar), strlen(bar));\n-         when the move and the subtraction is done here.  It does calculate\n-         the length just once when these instructions are done inside of\n-         output_strlen_unroll().  But I think since &bar[strlen(bar)] is\n-         often used and I use one fewer register for the lifetime of\n-         output_strlen_unroll() this is better.  */\n+\t foo(strlen(bar), strlen(bar));\n+\t when the move and the subtraction is done here.  It does calculate\n+\t the length just once when these instructions are done inside of\n+\t output_strlen_unroll().  But I think since &bar[strlen(bar)] is\n+\t often used and I use one fewer register for the lifetime of\n+\t output_strlen_unroll() this is better.  */\n \n       emit_move_insn (out, addr);\n \n       ix86_expand_strlensi_unroll_1 (out, src, align);\n \n       /* strlensi_unroll_1 returns the address of the zero at the end of\n-         the string, like memchr(), so compute the length by subtracting\n-         the start address.  */\n+\t the string, like memchr(), so compute the length by subtracting\n+\t the start address.  */\n       emit_insn (ix86_gen_sub3 (out, out, addr));\n+      return true;\n     }\n   else\n-    {\n-      rtx unspec;\n-\n-      /* Can't use this if the user has appropriated eax, ecx, or edi.  */\n-      if (fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\n-        return false;\n-      /* Can't use this for non-default address spaces.  */\n-      if (!ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (src)))\n-\treturn false;\n-\n-      scratch2 = gen_reg_rtx (Pmode);\n-      scratch3 = gen_reg_rtx (Pmode);\n-      scratch4 = force_reg (Pmode, constm1_rtx);\n-\n-      emit_move_insn (scratch3, addr);\n-      eoschar = force_reg (QImode, eoschar);\n-\n-      src = replace_equiv_address_nv (src, scratch3);\n-\n-      /* If .md starts supporting :P, this can be done in .md.  */\n-      unspec = gen_rtx_UNSPEC (Pmode, gen_rtvec (4, src, eoschar, align,\n-\t\t\t\t\t\t scratch4), UNSPEC_SCAS);\n-      emit_insn (gen_strlenqi_1 (scratch1, scratch3, unspec));\n-      emit_insn (ix86_gen_one_cmpl2 (scratch2, scratch1));\n-      emit_insn (ix86_gen_add3 (out, scratch2, constm1_rtx));\n-    }\n-  return true;\n+    return false;\n }\n \n /* For given symbol (function) construct code to compute address of it's PLT"}, {"sha": "de7e1aaec672efe113d9690c7655185330e1a965", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=786e0e5239529de9a4254fe8411a0e8f843e721a", "patch": "@@ -28506,8 +28506,9 @@ By default GCC inlines string operations only when the destination is\n known to be aligned to least a 4-byte boundary.  \n This enables more inlining and increases code\n size, but may improve performance of code that depends on fast\n-@code{memcpy}, @code{strlen},\n-and @code{memset} for short lengths.\n+@code{memcpy} and @code{memset} for short lengths.\n+The option enables inline expansion of @code{strlen} for all\n+pointer alignments.\n \n @item -minline-stringops-dynamically\n @opindex minline-stringops-dynamically"}, {"sha": "30227ca83b601f18d9c356cf6229317ef24f8b23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=786e0e5239529de9a4254fe8411a0e8f843e721a", "patch": "@@ -1,3 +1,9 @@\n+2019-05-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/88809\n+\t* gcc.target/i386/pr88809.c: New test.\n+\t* gcc.target/i386/pr88809-2.c: New test.\n+\n 2019-05-01  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR fortran/60144"}, {"sha": "b8ef51dab5be99c43f0b3d0148ef23cb78be5ecb", "filename": "gcc/testsuite/gcc.target/i386/pr88809-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88809-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88809-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88809-2.c?ref=786e0e5239529de9a4254fe8411a0e8f843e721a", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/88809 */\n+/* { dg-options \"-Os\" } */\n+\n+unsigned int foo (const char *ptr)\n+{\n+  return __builtin_strlen (ptr);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]strlen\" } } */"}, {"sha": "20844ddb921152cc21118e6eadad7515e51e5882", "filename": "gcc/testsuite/gcc.target/i386/pr88809.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88809.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786e0e5239529de9a4254fe8411a0e8f843e721a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88809.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88809.c?ref=786e0e5239529de9a4254fe8411a0e8f843e721a", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/88809 */\n+/* { dg-options \"-O\" } */\n+\n+unsigned int foo (const char *ptr)\n+{\n+  return __builtin_strlen (ptr);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]strlen\" } } */"}]}