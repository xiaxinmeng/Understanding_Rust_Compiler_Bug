{"sha": "6ecd43c7797eb287f15d64f80f4654361c046f4a", "node_id": "C_kwDOANBUbNoAKDZlY2Q0M2M3Nzk3ZWIyODdmMTVkNjRmODBmNDY1NDM2MWMwNDZmNGE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-22T11:02:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-22T11:02:45Z"}, "message": "Merge #1040\n\n1040: Do not propagate parse errors in match repetitions r=CohenArthur a=CohenArthur\n\nSince parsing repetitions is very eager, the parser might accumulate\r\nbogus errors by trying to match more repetitions than there are. We can\r\navoid this by clearing the parsing errors if parsing repetitions\r\nreturned a valid result. This should not be an issue for previous\r\nmatchers erroring out, as they would immediately return upon failure and\r\nnot reach inside other match functions.\r\n\r\nWe need to figure out the best way to emit parser errors, as we do not always want to emit them in `match_fragment`. I think for now the easiest is to just *not* emit parse errors and simply error out with \"failed to match macro rule\". We will need to think about adding a bunch of hints too in order to make using macros easier.\r\n\r\nFixes #958 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "4417cc20cd685d051fad702bc62b2cbea28b3133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4417cc20cd685d051fad702bc62b2cbea28b3133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ecd43c7797eb287f15d64f80f4654361c046f4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOazVCRBK7hj4Ov3rIwAAhUoIAHDH8JR/kz4L9O/T0o42ZDHn\nY3zuOig+G3iNseOADlNew70ueR/6qya9/L604X8ATud+JCng5SKfEPZluctE1Pie\nlQUQYrtM1Mf55vmilog6pQMggeKOKYE/krCyoqoyaOZOc41wORvAiJAS57LPuNbL\nHGPwFRXPf/8amdQ6labgTm16sNdplATjqRRG7onWYKKTnWVQZHYKOaPGJdZ8aBKS\nRSuXPEJ2pLZYah+SVD+LAMuDdhxsprFB5X7Ooetn/ipO163NYn5MHBg8OL4yJMi9\noALGyEqkmZ6yhUKbSNHp5Wldjn+JxHW1ZD+fYwrdGGH1PHM19DuniLSx1mg8ySc=\n=jBDD\n-----END PGP SIGNATURE-----\n", "payload": "tree 4417cc20cd685d051fad702bc62b2cbea28b3133\nparent 32894e6986523cb6b0d4225f820d80a725546c3a\nparent a64a5cf77c9685aa623ec69168e7f50324a102b9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647946965 +0000\ncommitter GitHub <noreply@github.com> 1647946965 +0000\n\nMerge #1040\n\n1040: Do not propagate parse errors in match repetitions r=CohenArthur a=CohenArthur\n\nSince parsing repetitions is very eager, the parser might accumulate\r\nbogus errors by trying to match more repetitions than there are. We can\r\navoid this by clearing the parsing errors if parsing repetitions\r\nreturned a valid result. This should not be an issue for previous\r\nmatchers erroring out, as they would immediately return upon failure and\r\nnot reach inside other match functions.\r\n\r\nWe need to figure out the best way to emit parser errors, as we do not always want to emit them in `match_fragment`. I think for now the easiest is to just *not* emit parse errors and simply error out with \"failed to match macro rule\". We will need to think about adding a bunch of hints too in order to make using macros easier.\r\n\r\nFixes #958 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecd43c7797eb287f15d64f80f4654361c046f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ecd43c7797eb287f15d64f80f4654361c046f4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecd43c7797eb287f15d64f80f4654361c046f4a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32894e6986523cb6b0d4225f820d80a725546c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32894e6986523cb6b0d4225f820d80a725546c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32894e6986523cb6b0d4225f820d80a725546c3a"}, {"sha": "a64a5cf77c9685aa623ec69168e7f50324a102b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64a5cf77c9685aa623ec69168e7f50324a102b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64a5cf77c9685aa623ec69168e7f50324a102b9"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "6b26f98dede40841a5ca598f4efc35a5e92eb892", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=6ecd43c7797eb287f15d64f80f4654361c046f4a", "patch": "@@ -505,9 +505,6 @@ MacroExpander::match_fragment (Parser<MacroInvocLexer> &parser,\n       return false;\n     }\n \n-  for (const auto &error : parser.get_errors ())\n-    error.emit_error ();\n-\n   // it matches if the parser did not produce errors trying to parse that type\n   // of item\n   return !parser.has_errors ();\n@@ -714,7 +711,13 @@ MacroExpander::match_n_matches (Parser<MacroInvocLexer> &parser,\n   bool did_meet_lo_bound = match_amount >= lo_bound;\n   bool did_meet_hi_bound = hi_bound ? match_amount <= hi_bound : true;\n \n-  return did_meet_lo_bound && did_meet_hi_bound;\n+  // If the end-result is valid, then we can clear the parse errors: Since\n+  // repetitions are parsed eagerly, it is okay to fail in some cases\n+  auto res = did_meet_lo_bound && did_meet_hi_bound;\n+  if (res)\n+    parser.clear_errors ();\n+\n+  return res;\n }\n \n bool"}, {"sha": "9a31fb6d625d8b1236d117ebdb5a3ad4046181b9", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=6ecd43c7797eb287f15d64f80f4654361c046f4a", "patch": "@@ -649,7 +649,6 @@ template <typename ManagedTokenSource> class Parser\n   bool done_end_of_file ();\n \n   void add_error (Error error) { error_table.push_back (std::move (error)); }\n-  void clear_errors () { error_table.clear (); }\n \n public:\n   // Construct parser with specified \"managed\" token source.\n@@ -668,6 +667,8 @@ template <typename ManagedTokenSource> class Parser\n \n   // Returns whether any parsing errors have occurred.\n   bool has_errors () const { return !error_table.empty (); }\n+  // Remove all parsing errors from the table\n+  void clear_errors () { error_table.clear (); }\n \n   // Get a reference to the list of errors encountered\n   std::vector<Error> &get_errors () { return error_table; }"}, {"sha": "d92534c0747540ef275f8deeb24a68b7ab535254", "filename": "gcc/testsuite/rust/compile/macro25.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs?ref=6ecd43c7797eb287f15d64f80f4654361c046f4a", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! valid {\n+    ($($a:literal)* $i:ident) => {{}};\n+}\n+\n+fn main() {\n+    valid!(1 one_lit);\n+    valid!(identifier_only);\n+    valid!(1 2 two_lits);\n+}"}, {"sha": "9a59089b1e4fe20dabf311eb418c1fb25e8b3363", "filename": "gcc/testsuite/rust/compile/macro9.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecd43c7797eb287f15d64f80f4654361c046f4a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs?ref=6ecd43c7797eb287f15d64f80f4654361c046f4a", "patch": "@@ -12,7 +12,6 @@ fn main() -> i32 {\n     let b = add!(15);\n     let b = add!(15 14); // { dg-error \"Failed to match any rule within macro\" }\n     let b = add!(15, 14,); // { dg-error \"Failed to match any rule within macro\" }\n-                           // { dg-error \"found unexpected token\" \"\" { target *-*-* } .-1 }\n \n     0\n }"}]}