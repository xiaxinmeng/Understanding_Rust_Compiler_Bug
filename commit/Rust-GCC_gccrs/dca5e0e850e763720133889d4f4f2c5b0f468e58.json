{"sha": "dca5e0e850e763720133889d4f4f2c5b0f468e58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhNWUwZTg1MGU3NjM3MjAxMzM4ODlkNGY0ZjJjNWIwZjQ2OGU1OA==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2003-08-19T11:48:59Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2003-08-19T11:48:59Z"}, "message": "jvm.h: New class _Jv_TempUTFString (helper class for getting a temporary C string from...\n\n\t* include/jvm.h: New class _Jv_TempUTFString (helper class for\n\tgetting a temporary C string from a jstring)\n\tNew macro JV_TEMP_UTF_STRING, which leverages _Jv_TempUTFString\n\tbut uses a stack buffer if the string length is less than 256\n\tbytes.\n\nFrom-SVN: r70564", "tree": {"sha": "6082822d285641258a2b239c92af137b893a8a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6082822d285641258a2b239c92af137b893a8a41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dca5e0e850e763720133889d4f4f2c5b0f468e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca5e0e850e763720133889d4f4f2c5b0f468e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca5e0e850e763720133889d4f4f2c5b0f468e58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca5e0e850e763720133889d4f4f2c5b0f468e58/comments", "author": null, "committer": null, "parents": [{"sha": "1b391ba9421269888ce878deb14f9e416e15a9d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b391ba9421269888ce878deb14f9e416e15a9d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b391ba9421269888ce878deb14f9e416e15a9d9"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "95ccb648c9be47c372d9b6b02744fddfd6c4984c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca5e0e850e763720133889d4f4f2c5b0f468e58/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca5e0e850e763720133889d4f4f2c5b0f468e58/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=dca5e0e850e763720133889d4f4f2c5b0f468e58", "patch": "@@ -1,3 +1,11 @@\n+2003-08-19  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* include/jvm.h: New class _Jv_TempUTFString (helper class for\n+\tgetting a temporary C string from a jstring)\n+\tNew macro JV_TEMP_UTF_STRING, which leverages _Jv_TempUTFString\n+\tbut uses a stack buffer if the string length is less than 256\n+\tbytes.\n+\n 2003-08-18  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/11951:"}, {"sha": "9af9dc7c6e59540062b1d5138ec188791d7585ee", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca5e0e850e763720133889d4f4f2c5b0f468e58/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca5e0e850e763720133889d4f4f2c5b0f468e58/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=dca5e0e850e763720133889d4f4f2c5b0f468e58", "patch": "@@ -149,6 +149,79 @@ extern jboolean _Jv_equalUtf8Consts (_Jv_Utf8Const *, _Jv_Utf8Const *);\n extern jboolean _Jv_equal (_Jv_Utf8Const *, jstring, jint);\n extern jboolean _Jv_equaln (_Jv_Utf8Const *, jstring, jint);\n \n+/* Helper class which converts a jstring to a temporary char*.\n+   Uses the supplied buffer, if non-null. Otherwise, allocates\n+   the buffer on the heap. Use the JV_TEMP_UTF_STRING macro,\n+   which follows, to automatically allocate a stack buffer if\n+   the string is small enough. */\n+class _Jv_TempUTFString\n+{\n+public:\n+  _Jv_TempUTFString(jstring jstr, char* buf=0);\n+  ~_Jv_TempUTFString();\n+\n+// Accessors\n+  operator const char*() const\n+  {\n+    return buf_;\n+  }\n+  const char* buf() const\n+  {\n+    return buf_;\n+  }\n+  char* buf()\n+  {\n+    return buf_;\n+  }\n+\n+private:\n+  char* buf_;\n+  bool heapAllocated_;\n+};\n+\n+inline _Jv_TempUTFString::_Jv_TempUTFString (jstring jstr, char* buf)\n+  : buf_(0), heapAllocated_(false)\n+{\n+  if (!jstr) return;\n+  jsize len = JvGetStringUTFLength (jstr);\n+  if (buf)\n+    buf_ = buf;\n+  else\n+    {\n+      buf_ = (char*) _Jv_Malloc (len+1);\n+      heapAllocated_ = true;\n+    }\n+\n+  JvGetStringUTFRegion (jstr, 0, jstr->length(), buf_);\n+  buf_[len] = '\\0';\n+}\n+\n+inline _Jv_TempUTFString::~_Jv_TempUTFString ()\n+{\n+  if (heapAllocated_)\n+    _Jv_Free (buf_);\n+}\n+\n+/* Macro which uses _Jv_TempUTFString. Allocates a stack-based\n+   buffer if the string and its null terminator are <= 256\n+   characters in length. Otherwise, a heap-based buffer is\n+   used. The parameters to this macro are the variable name\n+   which is an instance of _Jv_TempUTFString (above) and a\n+   jstring.\n+   \n+   Sample Usage:\n+   \n+   jstring jstr = getAJString();\n+   JV_TEMP_UTF_STRING(utfstr, jstr);\n+   printf(\"The string is: %s\\n\", utfstr.buf());\n+   \n+ */\n+#define JV_TEMP_UTF_STRING(utfstr, jstr) \\\n+  jstring utfstr##thejstr = (jstr); \\\n+  jsize utfstr##_len = utfstr##thejstr ? JvGetStringUTFLength (utfstr##thejstr) + 1 : 0; \\\n+  char utfstr##_buf[utfstr##_len <= 256 ? utfstr##_len : 0]; \\\n+  _Jv_TempUTFString utfstr(utfstr##thejstr, sizeof(utfstr##_buf)==0 ? 0 : utfstr##_buf)\n+\n // FIXME: remove this define.\n #define StringClass java::lang::String::class$\n "}]}