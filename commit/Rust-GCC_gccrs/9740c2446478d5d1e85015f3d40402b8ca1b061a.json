{"sha": "9740c2446478d5d1e85015f3d40402b8ca1b061a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0MGMyNDQ2NDc4ZDVkMWU4NTAxNWYzZDQwNDAyYjhjYTFiMDYxYQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-20T09:49:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:49:51Z"}, "message": "[Ada] Suppress Initialize_Scalars for Persistent_BSS\n\nIf a variable has pragma Persistent_BSS, the compiler now automatically\nsuppresses implicit initializations caused by Initialize_Scalars and\nNormalize_Scalars. Variables with Persistent_BSS cannot be initialized,\nand previously a pragma Suppress_Initialization was required before the\npragma Persistent_BSS.\n\n2019-08-20  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Persistent_BSS): If an initialization is present\n\tbecause of Initialize_Scalars or Normalize_Scalars, generate an\n\timplicit pragma Suppress_Initialization to remove that, because\n\tinitialization is not allowed for these variables. Other\n\tinitializations remain illegal.\n\nFrom-SVN: r274732", "tree": {"sha": "cacf682c71c78586d181e9209a1988913459fa0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cacf682c71c78586d181e9209a1988913459fa0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9740c2446478d5d1e85015f3d40402b8ca1b061a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9740c2446478d5d1e85015f3d40402b8ca1b061a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9740c2446478d5d1e85015f3d40402b8ca1b061a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9740c2446478d5d1e85015f3d40402b8ca1b061a/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "3cb30ef644808d2d98268874fcaa6e888c9c729a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9740c2446478d5d1e85015f3d40402b8ca1b061a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9740c2446478d5d1e85015f3d40402b8ca1b061a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9740c2446478d5d1e85015f3d40402b8ca1b061a", "patch": "@@ -1,3 +1,11 @@\n+2019-08-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Persistent_BSS): If an initialization is present\n+\tbecause of Initialize_Scalars or Normalize_Scalars, generate an\n+\timplicit pragma Suppress_Initialization to remove that, because\n+\tinitialization is not allowed for these variables. Other\n+\tinitializations remain illegal.\n+\n 2019-08-20  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_ch3.adb (OK_For_Limited_Init_In_05): In the case of type"}, {"sha": "4a774515e7bd10aa7d16bc1858cf8f4757254b2e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9740c2446478d5d1e85015f3d40402b8ca1b061a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9740c2446478d5d1e85015f3d40402b8ca1b061a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9740c2446478d5d1e85015f3d40402b8ca1b061a", "patch": "@@ -21092,8 +21092,24 @@ package body Sem_Prag is\n                Decl := Parent (Ent);\n \n                if Present (Expression (Decl)) then\n-                  Error_Pragma_Arg\n-                    (\"object for pragma% cannot have initialization\", Arg1);\n+                  --  Variables in Persistent_BSS cannot be initialized, so\n+                  --  turn off any initialization that might be caused by\n+                  --  pragmas Initialize_Scalars or Normalize_Scalars.\n+\n+                  if Kill_Range_Check (Expression (Decl)) then\n+                     Prag :=\n+                       Make_Pragma (Loc,\n+                         Name_Suppress_Initialization,\n+                         Pragma_Argument_Associations => New_List (\n+                           Make_Pragma_Argument_Association (Loc,\n+                             Expression => New_Occurrence_Of (Ent, Loc))));\n+                     Insert_Before (N, Prag);\n+                     Analyze (Prag);\n+\n+                  else\n+                     Error_Pragma_Arg\n+                       (\"object for pragma% cannot have initialization\", Arg1);\n+                  end if;\n                end if;\n \n                if not Is_Potentially_Persistent_Type (Etype (Ent)) then\n@@ -21104,7 +21120,7 @@ package body Sem_Prag is\n \n                Prag :=\n                  Make_Linker_Section_Pragma\n-                   (Ent, Sloc (N), \".persistent.bss\");\n+                   (Ent, Loc, \".persistent.bss\");\n                Insert_After (N, Prag);\n                Analyze (Prag);\n "}]}