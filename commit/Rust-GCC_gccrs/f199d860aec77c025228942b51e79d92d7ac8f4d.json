{"sha": "f199d860aec77c025228942b51e79d92d7ac8f4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE5OWQ4NjBhZWM3N2MwMjUyMjg5NDJiNTFlNzlkOTJkN2FjOGY0ZA==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2004-12-22T08:41:43Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2004-12-22T08:41:43Z"}, "message": "config.gcc: Add dbxelf.h to NetWare's tm_file.\n\ngcc/\n2004-12-22  Jan Beulich  <jbeulich@novell.com>\n\n\t* config.gcc: Add dbxelf.h to NetWare's tm_file.\n\t* config/i386/netware-crt0.c: Prototype __init_environment and\n\t__deinit_environment prior to their definition.\n\t(__init_environment): Correct invokation of constructor function.\n\t* config/i386/netware.h (TARGET_OS_CPP_BUILTINS): Use\n\tbuiltin_define_std rather than builtin_define on IAPX386.\n\t* config/i386/nwld.h: Disable stabs debugging info with the linker\n\tthis file supports.\n\t* config/i386/t-nwld (SHLIB_LINK): Do not use a temporary file for\n\tthe output. Add -posix to the options as that is the more compatible\n\tmode.\n\t* gthr-nks.h: Formatting.\n\t(__gthread_mutex_init_function): Kill the dubious use of\n\tNX_MUTEX_RECURSIVE as it is now clear that the traditional mutexes\n\twere not meant to be recursive.\n\t(__gthread_recursive_mutex_t, __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION,\n\t__gthread_recursive_mutex_init_function,\n\t__gthread_recursive_mutex_lock, __gthread_recursive_mutex_trylock,\n\t__gthread_recursive_mutex_unlock): New.\n\ngcc/testsuite/\n2004-12-22  Jan Beulich  <jbeulich@novell.com>\n\n\t* gcc.dg/20040813-1.c: Skip for *-*-netware*.\n\nFrom-SVN: r92488", "tree": {"sha": "f9d053c3890c5bdb255e14d3ff2435a06254cdc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9d053c3890c5bdb255e14d3ff2435a06254cdc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f199d860aec77c025228942b51e79d92d7ac8f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f199d860aec77c025228942b51e79d92d7ac8f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f199d860aec77c025228942b51e79d92d7ac8f4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f199d860aec77c025228942b51e79d92d7ac8f4d/comments", "author": null, "committer": null, "parents": [{"sha": "340beeb5c2c61f33327bb06dea8e7fc14895075f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340beeb5c2c61f33327bb06dea8e7fc14895075f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340beeb5c2c61f33327bb06dea8e7fc14895075f"}], "stats": {"total": 217, "additions": 140, "deletions": 77}, "files": [{"sha": "0ab0b2d665bcfdf95c99a8cc5417491288a46c12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -1,3 +1,25 @@\n+2004-12-22  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* config.gcc: Add dbxelf.h to NetWare's tm_file.\n+\t* config/i386/netware-crt0.c: Prototype __init_environment and\n+\t__deinit_environment prior to their definition.\n+\t(__init_environment): Correct invokation of constructor function.\n+\t* config/i386/netware.h (TARGET_OS_CPP_BUILTINS): Use\n+\tbuiltin_define_std rather than builtin_define on IAPX386.\n+\t* config/i386/nwld.h: Disable stabs debugging info with the linker\n+\tthis file supports.\n+\t* config/i386/t-nwld (SHLIB_LINK): Do not use a temporary file for\n+\tthe output. Add -posix to the options as that is the more compatible\n+\tmode.\n+\t* gthr-nks.h: Formatting.\n+\t(__gthread_mutex_init_function): Kill the dubious use of\n+\tNX_MUTEX_RECURSIVE as it is now clear that the traditional mutexes\n+\twere not meant to be recursive.\n+\t(__gthread_recursive_mutex_t, __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION,\n+\t__gthread_recursive_mutex_init_function,\n+\t__gthread_recursive_mutex_lock, __gthread_recursive_mutex_trylock,\n+\t__gthread_recursive_mutex_unlock): New.\n+\n 2004-12-22  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/mips/t-linux64: Remove code that messed with $(SPECS)."}, {"sha": "397be8da8217bc822da3bdbd2070703cab1b5a76", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -979,7 +979,7 @@ i[34567]86-*-lynxos*)\n \tgas=yes\n \t;;\n i[3456x]86-*-netware*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h elfos.h svr4.h tm-dwarf2.h i386/netware.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h tm-dwarf2.h i386/netware.h\"\n  \ttmake_file=i386/t-netware\n \textra_objs=netware.o\n \tcase /${with_ld} in"}, {"sha": "0da9114fe46724e5d113bfa7d25f613fa8c48404", "filename": "gcc/config/i386/netware-crt0.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Fnetware-crt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Fnetware-crt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware-crt0.c?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -23,6 +23,9 @@ Boston, MA 02111-1307, USA.  */\n #include <stdint.h>\n #include \"unwind-dw2-fde.h\"\n \n+int __init_environment (void *);\n+int __deinit_environment (void *);\n+\n \n #define SECTION_DECL(name, decl) decl __attribute__((__section__(name)))\n \n@@ -54,7 +57,7 @@ __init_environment (void *unused __attribute__((__unused__)))\n \n   for (pctor = &__CTOR_END__ - 1; pctor > &__CTOR_LIST__; --pctor)\n     if (*pctor != NULL)\n-      pctor();\n+      (*pctor)();\n \n   return 0;\n }"}, {"sha": "13e5e39911f42990b904626879e3aab9126b49b4", "filename": "gcc/config/i386/netware.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.h?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -47,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"IAPX386\");\t\t\t\t\t\\\n+\tbuiltin_define_std (\"IAPX386\");\t\t\t\t\t\\\n \tbuiltin_define (\"_M_IX86=300\");\t\t\t\t\t\\\n \tbuiltin_define (\"__netware__\");\t\t\t\t\t\\\n \tbuiltin_assert (\"system=netware\");\t\t\t\t\\"}, {"sha": "67fa2136604d68fba08d87007c7a1dd465a338cf", "filename": "gcc/config/i386/nwld.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Fnwld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Fnwld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnwld.h?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -57,3 +57,6 @@ void nwld_named_section_asm_out_destructor (rtx, int);\n \n #undef  EH_FRAME_SECTION_NAME\n #define EH_FRAME_SECTION_NAME \".eh_frame\"TARGET_SUB_SECTION_SEPARATOR\n+\n+/* nwld does not currently support stabs debug info */\n+#undef DBX_DEBUGGING_INFO"}, {"sha": "25355632c0044ca709f6fc70691ce025acdccaad", "filename": "gcc/config/i386/t-nwld", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Ft-nwld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fconfig%2Fi386%2Ft-nwld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-nwld?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -38,6 +38,7 @@ SHLIB_SRC = $(srcdir)/config/i386/netware-libgcc.c\n \n SHLIB_LINK = set -e; \\\n \tcat $(SHLIB_DEF) >@shlib_so_name@.def; \\\n+\techo \"name $(SHLIB_NAME)\" >>@shlib_so_name@.def; \\\n \techo \"version $(gcc_version)\" | sed \"s!\\.!,!g\" >>@shlib_so_name@.def; \\\n \ttouch libgcc/build; \\\n \techo \"build $$$$(($$$$(<libgcc/build)+0))\" >>@shlib_so_name@.def; \\\n@@ -47,7 +48,7 @@ SHLIB_LINK = set -e; \\\n \t\telse echo \"WARNING: $(SHLIB_NAME) built without XDC data will not work well.\" 1>&2; \\\n \tfi; \\\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -o $(SHLIB_NAME) \\\n-\t\t$(SHLIB_SRC) -static-libgcc -lnetware \\\n+\t\t$(SHLIB_SRC) -posix -static-libgcc -lnetware \\\n \t\t-Wl,--Map,--map-info,full,--strip-all,--def-file,@shlib_so_name@.def; \\\n \trm -f @shlib_so_name@.imp; $(LN_S) $(SHLIB_MAP) @shlib_so_name@.imp; \\\n \techo $$$$(($$$$(<libgcc/build)+1)) >libgcc/build"}, {"sha": "39bf199f1db740c5f8084a6f22ca4758136ae3aa", "filename": "gcc/gthr-nks.h", "status": "modified", "additions": 102, "deletions": 72, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fgthr-nks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Fgthr-nks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-nks.h?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -1,23 +1,23 @@\n /* Threads compatibility routines for libgcc2 and libobjc.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 2002 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n \n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n \n You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n \n /* As a special exception, if you link this library with other files,\n    some of which are compiled with GCC, to produce an executable,\n@@ -26,8 +26,8 @@ Boston, MA 02111-1307, USA.  */\n    This exception does not however invalidate any other reasons why\n    the executable file might be covered by the GNU General Public License.  */\n \n-#ifndef __gthr_nks_h\n-#define __gthr_nks_h\n+#ifndef GCC_GTHR_NKS_H\n+#define GCC_GTHR_NKS_H\n \n /* NKS threads specific definitions.\n    Easy, since the interface is mostly one-to-one mapping.  */\n@@ -40,8 +40,10 @@ Boston, MA 02111-1307, USA.  */\n \n typedef NXKey_t __gthread_key_t;\n typedef NXMutex_t *__gthread_mutex_t;\n+typedef NXMutex_t *__gthread_recursive_mutex_t;\n \n #define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function\n+#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function\n \n static inline int\n __gthread_active_p (void)\n@@ -65,19 +67,19 @@ static NXKey_t _objc_thread_storage;\n \n /* Initialize the threads subsystem.  */\n static inline int\n-__gthread_objc_init_thread_system(void)\n+__gthread_objc_init_thread_system (void)\n {\n-  /* Initialize the thread storage key */\n-  if (NXKeyCreate(NULL, NULL, &_objc_thread_storage) == 0)\n+  /* Initialize the thread storage key.  */\n+  if (NXKeyCreate (NULL, NULL, &_objc_thread_storage) == 0)\n     return 0;\n   return -1;\n }\n \n /* Close the threads subsystem.  */\n static inline int\n-__gthread_objc_close_thread_system(void)\n+__gthread_objc_close_thread_system (void)\n {\n-  if (NXKeyDelete(_objc_thread_storage) == 0)\n+  if (NXKeyDelete (_objc_thread_storage) == 0)\n     return 0;\n   return -1;\n }\n@@ -86,19 +88,19 @@ __gthread_objc_close_thread_system(void)\n \n /* Create a new thread of execution.  */\n static inline objc_thread_t\n-__gthread_objc_thread_detach(void (*func)(void *), void *arg)\n+__gthread_objc_thread_detach (void (*func)(void *), void *arg)\n {\n   objc_thread_t thread_id;\n   NXContext_t context;\n   NXThreadId_t new_thread_handle;\n   int err;\n \n-  if ((context = NXContextAlloc(func, arg, NX_PRIO_MED, 0, 0, 0, &err)) == NULL)\n+  if ((context = NXContextAlloc (func, arg, NX_PRIO_MED, 0, 0, 0, &err)) == NULL)\n     thread_id = NULL;\n-  else if (NXThreadCreate(context, NX_THR_DETACHED, &new_thread_handle) == 0)\n+  else if (NXThreadCreate (context, NX_THR_DETACHED, &new_thread_handle) == 0)\n     thread_id = (objc_thread_t) new_thread_handle;\n   else {\n-    NXContextFree(context);\n+    NXContextFree (context);\n     thread_id = NULL;\n   }\n   \n@@ -107,63 +109,63 @@ __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n \n /* Set the current thread's priority.  */\n static inline int\n-__gthread_objc_thread_set_priority(int priority)\n+__gthread_objc_thread_set_priority (int priority)\n {\n-  if (NXThreadSetPriority(NXThreadGetId(), priority) == 0)\n+  if (NXThreadSetPriority (NXThreadGetId (), priority) == 0)\n     return 0;\n   return -1;\n }\n \n /* Return the current thread's priority.  */\n static inline int\n-__gthread_objc_thread_get_priority(void)\n+__gthread_objc_thread_get_priority (void)\n {\n   int priority;\n \n-  if (NXThreadGetPriority(NXThreadGetId(), &priority) == 0)\n+  if (NXThreadGetPriority (NXThreadGetId (), &priority) == 0)\n     return priority;\n   return -1;\n }\n \n /* Yield our process time to another thread.  */\n static inline void\n-__gthread_objc_thread_yield(void)\n+__gthread_objc_thread_yield (void)\n {\n-  NXThreadYield();\n+  NXThreadYield ();\n }\n \n /* Terminate the current thread.  */\n static inline int\n-__gthread_objc_thread_exit(void)\n+__gthread_objc_thread_exit (void)\n {\n   /* exit the thread */\n-  NXThreadExit(&__objc_thread_exit_status);\n+  NXThreadExit (&__objc_thread_exit_status);\n \n   /* Failed if we reached here */\n   return -1;\n }\n \n /* Returns an integer value which uniquely describes a thread.  */\n static inline objc_thread_t\n-__gthread_objc_thread_id(void)\n+__gthread_objc_thread_id (void)\n {\n-  (objc_thread_t) NXThreadGetId();\n+  (objc_thread_t) NXThreadGetId ();\n }\n \n /* Sets the thread's local storage pointer.  */\n static inline int\n-__gthread_objc_thread_set_data(void *value)\n+__gthread_objc_thread_set_data (void *value)\n {\n-  return NXKeySetValue(_objc_thread_storage, value);\n+  return NXKeySetValue (_objc_thread_storage, value);\n }\n \n /* Returns the thread's local storage pointer.  */\n static inline void *\n-__gthread_objc_thread_get_data(void)\n+__gthread_objc_thread_get_data (void)\n {\n   void *value;\n \n-  if (NXKeyGetValue(_objc_thread_storage, &value) == 0)\n+  if (NXKeyGetValue (_objc_thread_storage, &value) == 0)\n     return value;\n   return NULL;\n }\n@@ -172,57 +174,57 @@ __gthread_objc_thread_get_data(void)\n \n /* Allocate a mutex.  */\n static inline int\n-__gthread_objc_mutex_allocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_allocate (objc_mutex_t mutex)\n {\n-  static const NX_LOCK_INFO_ALLOC(info, \"GNU ObjC\", 0);\n+  static const NX_LOCK_INFO_ALLOC (info, \"GNU ObjC\", 0);\n \n-  if ((mutex->backend = NXMutexAlloc(NX_MUTEX_RECURSIVE/*???*/, 0, &info)) == NULL)\n+  if ((mutex->backend = NXMutexAlloc (NX_MUTEX_RECURSIVE/*???*/, 0, &info)) == NULL)\n     return 0;\n   return -1;\n }\n \n /* Deallocate a mutex.  */\n static inline int\n-__gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_deallocate (objc_mutex_t mutex)\n {\n-  while(NXMutexIsOwned((NXMutex_t *)mutex->backend))\n-    NXUnlock((NXMutex_t *)mutex->backend);\n-  if (NXMutexFree((NXMutex_t *)mutex->backend) != 0)\n+  while (NXMutexIsOwned ((NXMutex_t *)mutex->backend))\n+    NXUnlock ((NXMutex_t *)mutex->backend);\n+  if (NXMutexFree ((NXMutex_t *)mutex->backend) != 0)\n     return -1;\n   mutex->backend = NULL;\n   return 0;\n }\n \n /* Grab a lock on a mutex.  */\n static inline int\n-__gthread_objc_mutex_lock(objc_mutex_t mutex)\n+__gthread_objc_mutex_lock (objc_mutex_t mutex)\n {\n-  return NXLock((NXMutex_t *)mutex->backend);\n+  return NXLock ((NXMutex_t *)mutex->backend);\n }\n \n /* Try to grab a lock on a mutex.  */\n static inline int\n-__gthread_objc_mutex_trylock(objc_mutex_t mutex)\n+__gthread_objc_mutex_trylock (objc_mutex_t mutex)\n {\n-  if (!NXTryLock((NXMutex_t *)mutex->backend))\n+  if (!NXTryLock ((NXMutex_t *)mutex->backend))\n     return -1;\n   return 0;\n }\n \n /* Unlock the mutex */\n static inline int\n-__gthread_objc_mutex_unlock(objc_mutex_t mutex)\n+__gthread_objc_mutex_unlock (objc_mutex_t mutex)\n {\n-  return NXUnlock((NXMutex_t *)mutex->backend);\n+  return NXUnlock ((NXMutex_t *)mutex->backend);\n }\n \n /* Backend condition mutex functions */\n \n /* Allocate a condition.  */\n static inline int\n-__gthread_objc_condition_allocate(objc_condition_t condition)\n+__gthread_objc_condition_allocate (objc_condition_t condition)\n {\n-  condition->backend = NXCondAlloc(NULL);\n+  condition->backend = NXCondAlloc (NULL);\n   if (condition->backend == NULL)\n     return -1;\n \n@@ -231,33 +233,33 @@ __gthread_objc_condition_allocate(objc_condition_t condition)\n \n /* Deallocate a condition.  */\n static inline int\n-__gthread_objc_condition_deallocate(objc_condition_t condition)\n+__gthread_objc_condition_deallocate (objc_condition_t condition)\n {\n-   if (NXCondFree((NXCond_t *)condition->backend) != 0)\n+   if (NXCondFree ((NXCond_t *)condition->backend) != 0)\n      return -1;\n    condition->backend = NULL;\n    return 0;\n }\n \n /* Wait on the condition */\n static inline int\n-__gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n+__gthread_objc_condition_wait (objc_condition_t condition, objc_mutex_t mutex)\n {\n-  return NXCondWait((NXCond_t *)condition->backend, (NXMutex_t *)mutex->backend);\n+  return NXCondWait ((NXCond_t *)condition->backend, (NXMutex_t *)mutex->backend);\n }\n \n /* Wake up all threads waiting on this condition.  */\n static inline int\n-__gthread_objc_condition_broadcast(objc_condition_t condition)\n+__gthread_objc_condition_broadcast (objc_condition_t condition)\n {\n-  return NXCondBroadcast((NXCond_t *)condition->backend);\n+  return NXCondBroadcast ((NXCond_t *)condition->backend);\n }\n \n /* Wake up one thread waiting on this condition.  */\n static inline int\n-__gthread_objc_condition_signal(objc_condition_t condition)\n+__gthread_objc_condition_signal (objc_condition_t condition)\n {\n-  return NXCondSignal((NXCond_t *)condition->backend);\n+  return NXCondSignal ((NXCond_t *)condition->backend);\n }\n \n #else /* _LIBOBJC */\n@@ -281,15 +283,15 @@ typedef volatile long __gthread_once_t;\n static inline int\n __gthread_once (__gthread_once_t *once, void (*func) (void))\n {\n-  if (__compare_and_swap(once, 0, 1))\n+  if (__compare_and_swap (once, 0, 1))\n   {\n     func();\n     *once |= 2;\n   }\n   else\n   {\n-    while(!(*once & 2))\n-      NXThreadYield();\n+    while (!(*once & 2))\n+      NXThreadYield ();\n   }\n   return 0;\n }\n@@ -303,7 +305,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n static inline int\n __gthread_key_dtor (__gthread_key_t key, void *ptr)\n {\n-  /* Just reset the key value to zero.  */\n+  /* Just reset the key value to zero. */\n   if (ptr)\n     return NXKeySetValue (key, NULL);\n   return 0;\n@@ -320,45 +322,73 @@ __gthread_getspecific (__gthread_key_t key)\n {\n   void *value;\n \n-  if (NXKeyGetValue(key, &value) == 0)\n+  if (NXKeyGetValue (key, &value) == 0)\n     return value;\n   return NULL;\n }\n \n static inline int\n __gthread_setspecific (__gthread_key_t key, const void *ptr)\n {\n-  return NXKeySetValue(key, (void *)ptr);\n+  return NXKeySetValue (key, (void *)ptr);\n }\n \n static inline void\n __gthread_mutex_init_function (__gthread_mutex_t *mutex)\n {\n-  static const NX_LOCK_INFO_ALLOC(info, \"GTHREADS\", 0);\n+  static const NX_LOCK_INFO_ALLOC (info, \"GTHREADS\", 0);\n \n-  *mutex = NXMutexAlloc (NX_MUTEX_RECURSIVE/*???*/, 0, &info);\n+  *mutex = NXMutexAlloc (0, 0, &info);\n }\n \n static inline int\n __gthread_mutex_lock (__gthread_mutex_t *mutex)\n {\n-  return NXLock(*mutex);\n+  return NXLock (*mutex);\n }\n \n static inline int\n __gthread_mutex_trylock (__gthread_mutex_t *mutex)\n {\n-  if (NXTryLock(*mutex))\n+  if (NXTryLock (*mutex))\n     return 0;\n   return -1;\n }\n \n static inline int\n __gthread_mutex_unlock (__gthread_mutex_t *mutex)\n {\n-  return NXUnlock(*mutex);\n+  return NXUnlock (*mutex);\n+}\n+\n+static inline void\n+__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *mutex)\n+{\n+  static const NX_LOCK_INFO_ALLOC (info, \"GTHREADS\", 0);\n+\n+  *mutex = NXMutexAlloc (NX_MUTEX_RECURSIVE, 0, &info);\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *mutex)\n+{\n+  return NXLock (*mutex);\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex)\n+{\n+  if (NXTryLock (*mutex))\n+    return 0;\n+  return -1;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex)\n+{\n+  return NXUnlock (*mutex);\n }\n \n #endif /* _LIBOBJC */\n \n-#endif /* not __gthr_nks_h */\n+#endif /* not GCC_GTHR_NKS_H */"}, {"sha": "ec14576b96287613b0151e187830d11de87852f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -1,3 +1,7 @@\n+2004-12-22  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* gcc.dg/20040813-1.c: Skip for *-*-netware*.\n+\n 2004-12-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/18378"}, {"sha": "c521eff3a388cd9bfac68220bd8ea6381bd62fd5", "filename": "gcc/testsuite/gcc.dg/20040813-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f199d860aec77c025228942b51e79d92d7ac8f4d/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c?ref=f199d860aec77c025228942b51e79d92d7ac8f4d", "patch": "@@ -2,7 +2,7 @@\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs\" } */\n \n int"}]}