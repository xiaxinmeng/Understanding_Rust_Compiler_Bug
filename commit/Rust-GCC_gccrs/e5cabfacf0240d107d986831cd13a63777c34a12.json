{"sha": "e5cabfacf0240d107d986831cd13a63777c34a12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjYWJmYWNmMDI0MGQxMDdkOTg2ODMxY2QxM2E2Mzc3N2MzNGExMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T15:25:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T15:25:38Z"}, "message": "[multiple changes]\n\n2015-01-30  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads: Minor comment fix.\n\t* freeze.adb (Freeze_Profile): Add test for suspicious import\n\tin pure unit.\n\t* sem_prag.adb (Process_Import_Or_Interface): Test for suspicious\n\tuse in Pure unit is now moved to Freeze (to properly catch\n\tPure_Function exemption).\n\n2015-01-30  Bob Duff  <duff@adacore.com>\n\n\t* sem_res.ads: Minor comment fix.\n\t* sem_type.adb: sem_type.adb (Remove_Conversions): Need to\n\tcheck both operands of an operator.\n\n2015-01-30  Yannick Moy  <moy@adacore.com>\n\n\t* a-assert.ads, a-assert.adb: Mark package spec in SPARK. Set assertion\n\tpolicy for Pre to Ignore.\n\t(Assert): Add precondition.\n\nFrom-SVN: r220288", "tree": {"sha": "a4620bfdd247c81a8ff43905dd52bff6e6f3928d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4620bfdd247c81a8ff43905dd52bff6e6f3928d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5cabfacf0240d107d986831cd13a63777c34a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cabfacf0240d107d986831cd13a63777c34a12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5cabfacf0240d107d986831cd13a63777c34a12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cabfacf0240d107d986831cd13a63777c34a12/comments", "author": null, "committer": null, "parents": [{"sha": "b7db11490f4928d6e15c7e2310e65b53225f0f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7db11490f4928d6e15c7e2310e65b53225f0f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7db11490f4928d6e15c7e2310e65b53225f0f21"}], "stats": {"total": 119, "additions": 106, "deletions": 13}, "files": [{"sha": "f748f63273b73c71f5087c2daa726f0bbd728748", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e5cabfacf0240d107d986831cd13a63777c34a12", "patch": "@@ -1,3 +1,24 @@\n+2015-01-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads: Minor comment fix.\n+\t* freeze.adb (Freeze_Profile): Add test for suspicious import\n+\tin pure unit.\n+\t* sem_prag.adb (Process_Import_Or_Interface): Test for suspicious\n+\tuse in Pure unit is now moved to Freeze (to properly catch\n+\tPure_Function exemption).\n+\n+2015-01-30  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.ads: Minor comment fix.\n+\t* sem_type.adb: sem_type.adb (Remove_Conversions): Need to\n+\tcheck both operands of an operator.\n+\n+2015-01-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-assert.ads, a-assert.adb: Mark package spec in SPARK. Set assertion\n+\tpolicy for Pre to Ignore.\n+\t(Assert): Add precondition.\n+\n 2015-01-30  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (Process_Import_Or_Interface): Warn if used in"}, {"sha": "54b84b4e75050a749ebe5eedf193c13f183edfcf", "filename": "gcc/ada/a-assert.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fa-assert.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fa-assert.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-assert.adb?ref=e5cabfacf0240d107d986831cd13a63777c34a12", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2007-2012  Free Software Foundation, Inc.          --\n+--         Copyright (C) 2007-2015, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body Ada.Assertions is\n+package body Ada.Assertions with\n+  SPARK_Mode\n+is\n \n    ------------\n    -- Assert --"}, {"sha": "d0ce6f08316594cc2d1a864d57c8d07d3e6b0024", "filename": "gcc/ada/a-assert.ads", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fa-assert.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fa-assert.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-assert.ads?ref=e5cabfacf0240d107d986831cd13a63777c34a12", "patch": "@@ -4,15 +4,41 @@\n --                                                                          --\n --                       A D A . A S S E R T I O N S                        --\n --                                                                          --\n+--            Copyright (C) 2015, Free Software Foundation, Inc.            --\n+--                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT.  In accordance with the copyright of that document, you can freely --\n--- copy and modify this specification,  provided that if you redistribute a --\n--- modified version,  any changes that you have made are clearly indicated. --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the contracts that have been added.                      --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc. --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised when calling Assert.\n+--  This is enforced by setting the corresponding assertion policy to Ignore.\n+\n+pragma Assertion_Policy (Pre => Ignore);\n+\n --  We do a with of System.Assertions to get hold of the exception (following\n --  the specific RM permission that lets' Assertion_Error being a renaming).\n --  The suppression of Warnings stops the warning about bad categorization.\n@@ -21,16 +47,20 @@ pragma Warnings (Off);\n with System.Assertions;\n pragma Warnings (On);\n \n-package Ada.Assertions is\n+package Ada.Assertions with\n+  SPARK_Mode\n+is\n    pragma Pure (Assertions);\n \n    Assertion_Error : exception renames System.Assertions.Assert_Failure;\n    --  This is the renaming that is allowed by 11.4.2(24). Note that the\n    --  Exception_Name will refer to the one in System.Assertions (see\n    --  AARM-11.4.1(12.b)).\n \n-   procedure Assert (Check : Boolean);\n+   procedure Assert (Check : Boolean) with\n+     Pre => Check;\n \n-   procedure Assert (Check : Boolean; Message : String);\n+   procedure Assert (Check : Boolean; Message : String) with\n+     Pre => Check;\n \n end Ada.Assertions;"}, {"sha": "ae714da56d3c5f5ebed1262b7e97ff9fac16e9c4", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e5cabfacf0240d107d986831cd13a63777c34a12", "patch": "@@ -2040,10 +2040,10 @@ package Einfo is\n \n --    Import_Pragma (Node35)\n --       Defined in subprogram entities. Set if a valid pragma Import or pragma\n---       Import_Function or pragma Import_Procedure aplies to the subprogram,\n+--       Import_Function or pragma Import_Procedure applies to the subprogram,\n --       in which case this field points to the pragma (we can't use the normal\n --       Rep_Item chain mechanism, because a single pragma Import can apply\n---       to multiple subprogram entities.\n+--       to multiple subprogram entities).\n \n --    In_Package_Body (Flag48)\n --       Defined in package entities. Set on the entity that denotes the"}, {"sha": "2864fb1e6b948c7ecc1284b905a609ae1c80341f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e5cabfacf0240d107d986831cd13a63777c34a12", "patch": "@@ -3081,6 +3081,44 @@ package body Freeze is\n             end if;\n          end if;\n \n+         --  Check suspicious use of Import in pure unit\n+\n+         if Is_Imported (E) and then Is_Pure (Cunit_Entity (Current_Sem_Unit))\n+\n+           --  Ignore internally generated entity. This happens in some cases\n+           --  of subprograms in specs, where we generate an implied body.\n+\n+           and then Comes_From_Source (Import_Pragma (E))\n+\n+           --  Assume run-time knows what it is doing\n+\n+           and then not GNAT_Mode\n+\n+           --  Assume explicit Pure_Function means import is pure\n+\n+           and then not Has_Pragma_Pure_Function (E)\n+\n+           --  Don't need warning in relaxed semantics mode\n+\n+           and then not Relaxed_RM_Semantics\n+\n+           --  Assume convention Intrinsic is OK, since this is specialized.\n+           --  This deals with the DEC unit current_exception.ads\n+\n+           and then Convention (E) /= Convention_Intrinsic\n+\n+            --  Assume that ASM interface knows what it is doing. This deals\n+            --  with unsigned.ads in the AAMP back end.\n+\n+           and then Convention (E) /= Convention_Assembler\n+         then\n+            Error_Msg_N\n+              (\"pragma Import in Pure unit??\", Import_Pragma (E));\n+            Error_Msg_NE\n+              (\"\\calls to & may be omitted (RM 10.2.1(18/3))??\",\n+               Import_Pragma (E), E);\n+         end if;\n+\n          return True;\n       end Freeze_Profile;\n "}, {"sha": "e94c36bbb1fbaa8b727dc809c8cee6579df63c6d", "filename": "gcc/ada/sem_res.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fsem_res.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fsem_res.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.ads?ref=e5cabfacf0240d107d986831cd13a63777c34a12", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +45,7 @@ package Sem_Res is\n    --  Since in practice a lot of semantic analysis has to be postponed until\n    --  types are known (e.g. static folding, setting of suppress flags), the\n    --  Resolve routines also complete the semantic analysis, and call the\n-   --  expander for possibly expansion of the completely type resolved node.\n+   --  expander for possible expansion of the completely type resolved node.\n \n    procedure Resolve (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve (N : Node_Id; Typ : Entity_Id; Suppress : Check_Id);"}, {"sha": "a985008f51bd49ac598e0ced4a2ce88654549b7b", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cabfacf0240d107d986831cd13a63777c34a12/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=e5cabfacf0240d107d986831cd13a63777c34a12", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1539,6 +1539,8 @@ package body Sem_Type is\n \n                if Nkind (Act1) in N_Op\n                  and then Is_Overloaded (Act1)\n+                 and then Nkind_In (Left_Opnd (Act1), N_Integer_Literal,\n+                                                      N_Real_Literal)\n                  and then Nkind_In (Right_Opnd (Act1), N_Integer_Literal,\n                                                        N_Real_Literal)\n                  and then Has_Compatible_Type (Act1, Standard_Boolean)"}]}