{"sha": "af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3NjQ0MWZmYTZmZmRmYjRhNGQzYjEwNDgyZTBkOGQ3ZTk5MTgxZQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-12-21T21:20:02Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-12-21T21:20:02Z"}, "message": "re PR c++/18984 (ICE in check_pointer_types_r)\n\n2004-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c++/18984\n        * pointer-set.c (pointer_set_contains): Add back.\n        * pointer-set.h (pointer_set_contains): Add back.\n\n2004-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c++/18984\n        * cp-gimplify.c (cp_genericize_r): Don't insert first but instead\n        check to see if contains the pointer.  Insert the statement before\n        returning.\n\n2004-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR C++/18984\n        * g++.dg/eh/ctor3.C: New test.\n\nFrom-SVN: r92470", "tree": {"sha": "26a2279877aa52f21fba4ae120751143f5815a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26a2279877aa52f21fba4ae120751143f5815a44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/comments", "author": null, "committer": null, "parents": [{"sha": "697290b71d18569ef60fe446a689e74270457ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697290b71d18569ef60fe446a689e74270457ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697290b71d18569ef60fe446a689e74270457ab4"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "52682ea2822cc78e3e2a94d62a6504844780cec9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "patch": "@@ -1,3 +1,9 @@\n+2004-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c++/18984\n+\t* pointer-set.c (pointer_set_contains): Add back.\n+\t* pointer-set.h (pointer_set_contains): Add back.\n+\n 2004-12-21  Richard Henderson  <rth@redhat.com>\n \n \t* gimplify.c (eval_save_expr): New."}, {"sha": "b2164809471475ad3ce8c0718a54b00728cd1a46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "patch": "@@ -1,3 +1,10 @@\n+2004-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c++/18984\n+\t* cp-gimplify.c (cp_genericize_r): Don't insert first but instead\n+\tcheck to see if contains the pointer.  Insert the statement before\n+\treturning.\n+\n 2004-12-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/14075"}, {"sha": "d953156b416135bbed85789345323d6adedbfc6c", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "patch": "@@ -291,7 +291,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n     }\n \n   /* Other than invisiref parms, don't walk the same tree twice.  */\n-  if (pointer_set_insert (p_set, stmt))\n+  if (pointer_set_contains (p_set, stmt))\n     {\n       *walk_subtrees = 0;\n       return NULL_TREE;\n@@ -315,14 +315,13 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n      to lower this construct before scanning it, so we need to lower these\n      before doing anything else.  */\n   else if (TREE_CODE (stmt) == CLEANUP_STMT)\n-    {\n-      *stmt_p = build2 (CLEANUP_EH_ONLY (stmt) ? TRY_CATCH_EXPR\n-\t\t\t\t\t       : TRY_FINALLY_EXPR,\n-\t\t\tvoid_type_node,\n-\t\t\tCLEANUP_BODY (stmt),\n-\t\t\tCLEANUP_EXPR (stmt));\n-      pointer_set_insert (p_set, *stmt_p);\n-    }\n+    *stmt_p = build2 (CLEANUP_EH_ONLY (stmt) ? TRY_CATCH_EXPR\n+\t\t\t\t\t     : TRY_FINALLY_EXPR,\n+\t\t      void_type_node,\n+\t\t      CLEANUP_BODY (stmt),\n+\t\t      CLEANUP_EXPR (stmt));\n+\n+  pointer_set_insert (p_set, *stmt_p);\n   \n   return NULL;\n }"}, {"sha": "266cccfef8aa2627f9321b3953b2a3fbd1a8e942", "filename": "gcc/pointer-set.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fpointer-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fpointer-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.c?ref=af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "patch": "@@ -90,6 +90,29 @@ void pointer_set_destroy (struct pointer_set_t *pset)\n   XDELETE (pset);\n }\n \n+/* Returns nonzero if PSET contains P.  P must be nonnull.\n+\n+   Collisions are resolved by linear probing.  */\n+int\n+pointer_set_contains (struct pointer_set_t *pset, void *p)\n+{\n+  size_t n = hash1 (p, pset->n_slots, pset->log_slots);\n+\n+  while (true)\n+    {\n+      if (pset->slots[n] == p)\n+       return 1;\n+      else if (pset->slots[n] == 0)\n+       return 0;\n+      else\n+       {\n+         ++n;\n+         if (n == pset->n_slots)\n+           n = 0;\n+       }\n+    }\n+}\n+\n /* Subroutine of pointer_set_insert.  Inserts P into an empty\n    element of SLOTS, an array of length N_SLOTS.  Returns nonzero\n    if P was already present in N_SLOTS.  */"}, {"sha": "65ac9ee4724977aa6aa99bef8630e7b8839961af", "filename": "gcc/pointer-set.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fpointer-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Fpointer-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.h?ref=af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "patch": "@@ -26,6 +26,7 @@ struct pointer_set_t;\n struct pointer_set_t *pointer_set_create (void);\n void pointer_set_destroy (struct pointer_set_t *pset);\n \n+int pointer_set_contains (struct pointer_set_t *pset, void *p);\n int pointer_set_insert (struct pointer_set_t *pset, void *p);\n \n #endif  /* POINTER_SET_H  */"}, {"sha": "7d62fc4b7549212aed3e964b2b23966eba8d159a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "patch": "@@ -1,3 +1,8 @@\n+2004-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR C++/18984\n+\t* g++.dg/eh/ctor3.C: New test.\n+\n 2004-12-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* objc.dg/stabs-1.m: Allow section name to be quoted and"}, {"sha": "378c07edf17f4b55e168a71375fb66a0c6402aa9", "filename": "gcc/testsuite/g++.dg/eh/ctor3.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor3.C?ref=af76441ffa6ffdfb4a4d3b10482e0d8d7e99181e", "patch": "@@ -0,0 +1,18 @@\n+// PR C++/18984\n+//  We just to ICE as we did not add a\n+// deference to invisible by reference \n+// variable\n+\n+// { dg-do compile }\n+\n+\n+struct Str\n+{\n+    Str(const char *chars);\n+    Str& operator=(const char *chars);\n+    virtual operator char*() const;\n+};\n+Str _localName(Str fullname)\n+{\n+  return (char*)fullname;\n+}"}]}