{"sha": "019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5ZmRiNzkyM2I3MWY0ZmRhYzMzZTdmMmNlZjNlMGViYzBjZTIwNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-07-01T16:17:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-01T16:17:46Z"}, "message": "stl_list.h (list<>::insert(iterator, size_type, const value_type&), [...]): Adjust C++11 signatures to take const_iterator(s).\n\n2013-07-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_list.h (list<>::insert(iterator,\n\tsize_type, const value_type&), list<>::insert(iterator,\n\tinitializer_list<>), list<>::insert(iterator, _InputIterator,\n\t_InputIterator), list<>::splice(iterator, list&&),\n\tlist<>::splice(iterator, list&), list<>::splice(iterator, list&&,\n\titerator), list<>::splice(iterator, list&, iterator),\n\tlist<>::splice(iterator, list&&, iterator, iterator),\n\tlist<>::splice(iterator, list&, iterator, iterator)): Adjust C++11\n\tsignatures to take const_iterator(s).\n\t* include/bits/list.tcc (list<>::insert(const_iterator, size_type,\n\tconst value_type&), list<>::insert(const_iterator, _InputIterator,\n\t_InputIterator)): Define.\n\t* include/ext/vstring.h (__versa_string<>::insert(iterator,\n\tsize_type, _CharT), __versa_string<>::insert(iterator,\n\t_InputIterator, _InputIterator), __versa_string<>::insert(iterator,\n\tstd::initializer_list<>), __versa_string<>::replace(iterator,\n\titerator, _InputIterator, _InputIterator), __versa_string<>::\n\treplace(iterator, iterator, std::initializer_list<>)): Adjust C++11\n\tsignatures to take const_iterator(s).\n\t(__versa_string<>::_M_replace_dispatch): Take const_iterators.\n\t* include/ext/vstring.tcc: Likewise.\n\t* include/debug/list: Adjust.\n\t* include/profile/list: Likewise.\n\t* testsuite/23_containers/list/operations/splice/const_iterator.cc:\n\tNew.\n\t* testsuite/23_containers/list/modifiers/insert/const_iterator.cc:\n\tExtend.\n\t* testsuite/ext/vstring/modifiers/insert/char/const_iterator.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/modifiers/insert/wchar_t/const_iterator.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/modifiers/replace/char/const_iterator.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/modifiers/replace/wchar_t/const_iterator.cc:\n\tLikewise.\n\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r200580", "tree": {"sha": "954d3c967b1f7da29c4c24c4a97ea870e97aa70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/954d3c967b1f7da29c4c24c4a97ea870e97aa70a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/comments", "author": null, "committer": null, "parents": [{"sha": "31f8442be7b47d847ec33b2bc3585bb184b7609b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31f8442be7b47d847ec33b2bc3585bb184b7609b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31f8442be7b47d847ec33b2bc3585bb184b7609b"}], "stats": {"total": 481, "additions": 405, "deletions": 76}, "files": [{"sha": "64509c17316815cbaf84c97bf0aee8d55eba7501", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -1,3 +1,50 @@\n+2013-07-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_list.h (list<>::insert(iterator,\n+\tsize_type, const value_type&), list<>::insert(iterator,\n+\tinitializer_list<>), list<>::insert(iterator, _InputIterator,\n+\t_InputIterator), list<>::splice(iterator, list&&),\n+\tlist<>::splice(iterator, list&), list<>::splice(iterator, list&&,\n+\titerator), list<>::splice(iterator, list&, iterator),\n+\tlist<>::splice(iterator, list&&, iterator, iterator),\n+\tlist<>::splice(iterator, list&, iterator, iterator)): Adjust C++11\n+\tsignatures to take const_iterator(s).\n+\t* include/bits/list.tcc (list<>::insert(const_iterator, size_type,\n+\tconst value_type&), list<>::insert(const_iterator, _InputIterator,\n+\t_InputIterator)): Define.\n+\t* include/ext/vstring.h (__versa_string<>::insert(iterator,\n+\tsize_type, _CharT), __versa_string<>::insert(iterator,\n+\t_InputIterator, _InputIterator), __versa_string<>::insert(iterator,\n+\tstd::initializer_list<>), __versa_string<>::replace(iterator,\n+\titerator, _InputIterator, _InputIterator), __versa_string<>::\n+\treplace(iterator, iterator, std::initializer_list<>)): Adjust C++11\n+\tsignatures to take const_iterator(s).\n+\t(__versa_string<>::_M_replace_dispatch): Take const_iterators.\n+\t* include/ext/vstring.tcc: Likewise.\n+\t* include/debug/list: Adjust.\n+\t* include/profile/list: Likewise.\n+\t* testsuite/23_containers/list/operations/splice/const_iterator.cc:\n+\tNew.\n+\t* testsuite/23_containers/list/modifiers/insert/const_iterator.cc:\n+\tExtend.\n+\t* testsuite/ext/vstring/modifiers/insert/char/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/modifiers/insert/wchar_t/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/modifiers/replace/char/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/modifiers/replace/wchar_t/const_iterator.cc:\n+\tLikewise.\n+\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-06-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_deque.h (deque<>::insert(iterator,"}, {"sha": "4d8ce2351e8934bfad9674ff808491d9c8edc118", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -107,6 +107,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return iterator(__tmp);\n     }\n \n+#if __cplusplus >= 201103L\n+  template<typename _Tp, typename _Alloc>\n+    typename list<_Tp, _Alloc>::iterator\n+    list<_Tp, _Alloc>::\n+    insert(const_iterator __position, size_type __n, const value_type& __x)\n+    {\n+      if (__n)\n+\t{\n+\t  list __tmp(__n, __x, get_allocator());\n+\t  iterator __it = __tmp.begin();\n+\t  splice(__position, __tmp);\n+\t  return __it;\n+\t}\n+      return __position._M_const_cast();\n+    }\n+\n+  template<typename _Tp, typename _Alloc>\n+    template<typename _InputIterator, typename>\n+      typename list<_Tp, _Alloc>::iterator\n+      list<_Tp, _Alloc>::\n+      insert(const_iterator __position, _InputIterator __first,\n+\t     _InputIterator __last)\n+      {\n+\tlist __tmp(__first, __last, get_allocator());\n+\tif (!__tmp.empty())\n+\t  {\n+\t    iterator __it = __tmp.begin();\n+\t    splice(__position, __tmp);\n+\t    return __it;\n+\t  }\n+\treturn __position._M_const_cast();\n+      }\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     typename list<_Tp, _Alloc>::iterator\n     list<_Tp, _Alloc>::"}, {"sha": "5e8312dc6ffb7179553123a6949c1e356698e6a5", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 115, "deletions": 23, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -1113,9 +1113,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /**\n        *  @brief  Inserts the contents of an initializer_list into %list\n-       *          before specified iterator.\n-       *  @param  __p  An iterator into the %list.\n+       *          before specified const_iterator.\n+       *  @param  __p  A const_iterator into the %list.\n        *  @param  __l  An initializer_list of value_type.\n+       *  @return  An iterator pointing to the first element inserted\n+       *           (or __position).\n        *\n        *  This function will insert copies of the data in the\n        *  initializer_list @a l into the %list before the location\n@@ -1124,11 +1126,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This operation is linear in the number of elements inserted and\n        *  does not invalidate iterators and references.\n        */\n-      void\n-      insert(iterator __p, initializer_list<value_type> __l)\n-      { this->insert(__p, __l.begin(), __l.end()); }\n+      iterator\n+      insert(const_iterator __p, initializer_list<value_type> __l)\n+      { return this->insert(__p, __l.begin(), __l.end()); }\n #endif\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Inserts a number of copies of given data into the %list.\n+       *  @param  __position  A const_iterator into the %list.\n+       *  @param  __n  Number of elements to be inserted.\n+       *  @param  __x  Data to be inserted.\n+       *  @return  An iterator pointing to the first element inserted\n+       *           (or __position).\n+       *\n+       *  This function will insert a specified number of copies of the\n+       *  given data before the location specified by @a position.\n+       *\n+       *  This operation is linear in the number of elements inserted and\n+       *  does not invalidate iterators and references.\n+       */\n+      iterator\n+      insert(const_iterator __position, size_type __n, const value_type& __x);\n+#else\n       /**\n        *  @brief  Inserts a number of copies of given data into the %list.\n        *  @param  __position  An iterator into the %list.\n@@ -1147,12 +1167,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tlist __tmp(__n, __x, get_allocator());\n \tsplice(__position, __tmp);\n       }\n+#endif\n \n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts a range into the %list.\n-       *  @param  __position  An iterator into the %list.\n+       *  @param  __position  A const_iterator into the %list.\n        *  @param  __first  An input iterator.\n        *  @param  __last   An input iterator.\n+       *  @return  An iterator pointing to the first element inserted\n+       *           (or __position).\n        *\n        *  This function will insert copies of the data in the range [@a\n        *  first,@a last) into the %list before the location specified by\n@@ -1161,19 +1185,34 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This operation is linear in the number of elements inserted and\n        *  does not invalidate iterators and references.\n        */\n-#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\titerator\n+\tinsert(const_iterator __position, _InputIterator __first,\n+\t       _InputIterator __last);\n #else\n+      /**\n+       *  @brief  Inserts a range into the %list.\n+       *  @param  __position  An iterator into the %list.\n+       *  @param  __first  An input iterator.\n+       *  @param  __last   An input iterator.\n+       *\n+       *  This function will insert copies of the data in the range [@a\n+       *  first,@a last) into the %list before the location specified by\n+       *  @a position.\n+       *\n+       *  This operation is linear in the number of elements inserted and\n+       *  does not invalidate iterators and references.\n+       */\n       template<typename _InputIterator>\n-#endif\n         void\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n         {\n \t  list __tmp(__first, __last, get_allocator());\n \t  splice(__position, __tmp);\n \t}\n+#endif\n \n       /**\n        *  @brief  Remove element at given position.\n@@ -1275,7 +1314,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n #if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x)\n+      splice(const_iterator __position, list&& __x)\n #else\n       splice(iterator __position, list& __x)\n #endif\n@@ -1284,16 +1323,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  {\n \t    _M_check_equal_allocators(__x);\n \n-\t    this->_M_transfer(__position, __x.begin(), __x.end());\n+\t    this->_M_transfer(__position._M_const_cast(),\n+\t\t\t      __x.begin(), __x.end());\n \t  }\n       }\n \n #if __cplusplus >= 201103L\n       void\n-      splice(iterator __position, list& __x)\n+      splice(const_iterator __position, list& __x)\n       { splice(__position, std::move(__x)); }\n #endif\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert element from another %list.\n+       *  @param  __position  Const_iterator referencing the element to\n+       *                      insert before.\n+       *  @param  __x  Source list.\n+       *  @param  __i  Const_iterator referencing the element to move.\n+       *\n+       *  Removes the element in list @a __x referenced by @a __i and\n+       *  inserts it into the current list before @a __position.\n+       */\n+      void\n+      splice(const_iterator __position, list&& __x, const_iterator __i)\n+#else\n       /**\n        *  @brief  Insert element from another %list.\n        *  @param  __position  Iterator referencing the element to insert before.\n@@ -1304,29 +1358,55 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  inserts it into the current list before @a __position.\n        */\n       void\n-#if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x, iterator __i)\n-#else\n       splice(iterator __position, list& __x, iterator __i)\n #endif\n       {\n-\titerator __j = __i;\n+\titerator __j = __i._M_const_cast();\n \t++__j;\n \tif (__position == __i || __position == __j)\n \t  return;\n \n \tif (this != &__x)\n \t  _M_check_equal_allocators(__x);\n \n-\tthis->_M_transfer(__position, __i, __j);\n+\tthis->_M_transfer(__position._M_const_cast(),\n+\t\t\t  __i._M_const_cast(), __j);\n       }\n \n #if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert element from another %list.\n+       *  @param  __position  Const_iterator referencing the element to\n+       *                      insert before.\n+       *  @param  __x  Source list.\n+       *  @param  __i  Const_iterator referencing the element to move.\n+       *\n+       *  Removes the element in list @a __x referenced by @a __i and\n+       *  inserts it into the current list before @a __position.\n+       */\n       void\n-      splice(iterator __position, list& __x, iterator __i)\n+      splice(const_iterator __position, list& __x, const_iterator __i)\n       { splice(__position, std::move(__x), __i); }\n #endif\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert range from another %list.\n+       *  @param  __position  Const_iterator referencing the element to\n+       *                      insert before.\n+       *  @param  __x  Source list.\n+       *  @param  __first  Const_iterator referencing the start of range in x.\n+       *  @param  __last  Const_iterator referencing the end of range in x.\n+       *\n+       *  Removes elements in the range [__first,__last) and inserts them\n+       *  before @a __position in constant time.\n+       *\n+       *  Undefined if @a __position is in [__first,__last).\n+       */\n+      void\n+      splice(const_iterator __position, list&& __x, const_iterator __first,\n+\t     const_iterator __last)\n+#else\n       /**\n        *  @brief  Insert range from another %list.\n        *  @param  __position  Iterator referencing the element to insert before.\n@@ -1340,10 +1420,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Undefined if @a __position is in [__first,__last).\n        */\n       void\n-#if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x, iterator __first,\n-\t     iterator __last)\n-#else\n       splice(iterator __position, list& __x, iterator __first,\n \t     iterator __last)\n #endif\n@@ -1353,13 +1429,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    if (this != &__x)\n \t      _M_check_equal_allocators(__x);\n \n-\t    this->_M_transfer(__position, __first, __last);\n+\t    this->_M_transfer(__position._M_const_cast(),\n+\t\t\t      __first._M_const_cast(),\n+\t\t\t      __last._M_const_cast());\n \t  }\n       }\n \n #if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert range from another %list.\n+       *  @param  __position  Const_iterator referencing the element to\n+       *                      insert before.\n+       *  @param  __x  Source list.\n+       *  @param  __first  Const_iterator referencing the start of range in x.\n+       *  @param  __last  Const_iterator referencing the end of range in x.\n+       *\n+       *  Removes elements in the range [__first,__last) and inserts them\n+       *  before @a __position in constant time.\n+       *\n+       *  Undefined if @a __position is in [__first,__last).\n+       */\n       void\n-      splice(iterator __position, list& __x, iterator __first, iterator __last)\n+      splice(const_iterator __position, list& __x, const_iterator __first,\n+\t     const_iterator __last)\n       { splice(__position, std::move(__x), __first, __last); }\n #endif\n "}, {"sha": "1ae8507ca864e73ab6e8687883c388c25fc2f726", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -403,35 +403,54 @@ namespace __debug\n       insert(const_iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n-      void\n-      insert(iterator __p, initializer_list<value_type> __l)\n+      iterator\n+      insert(const_iterator __p, initializer_list<value_type> __l)\n       {\n \t__glibcxx_check_insert(__p);\n-\t_Base::insert(__p.base(), __l);\n+\treturn iterator(_Base::insert(__p.base(), __l), this);\n       }\n #endif\n \n+#if __cplusplus >= 201103L\n+      iterator\n+      insert(const_iterator __position, size_type __n, const _Tp& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\treturn iterator(_Base::insert(__position.base(), __n, __x), this);\n+      }\n+#else\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \t_Base::insert(__position.base(), __n, __x);\n       }\n+#endif\n \n #if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\titerator\n+        insert(const_iterator __position, _InputIterator __first,\n+\t       _InputIterator __last)\n+        {\n+\t  __glibcxx_check_insert_range(__position, __first, __last);\n+\t  return iterator(_Base::insert(__position.base(),\n+\t\t\t\t\t__gnu_debug::__base(__first),\n+\t\t\t\t\t__gnu_debug::__base(__last)),\n+\t\t\t  this);\n+\t}\n #else\n       template<class _InputIterator>\n-#endif\n-        void\n+\tvoid\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n         {\n \t  __glibcxx_check_insert_range(__position, __first, __last);\n \t  _Base::insert(__position.base(), __gnu_debug::__base(__first),\n \t\t\t\t\t   __gnu_debug::__base(__last));\n \t}\n+#endif\n \n     private:\n       _Base_iterator\n@@ -496,7 +515,7 @@ namespace __debug\n       // 23.2.2.4 list operations:\n       void\n #if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x)\n+      splice(const_iterator __position, list&& __x)\n #else\n       splice(iterator __position, list& __x)\n #endif\n@@ -510,13 +529,13 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       void\n-      splice(iterator __position, list& __x)\n+      splice(const_iterator __position, list& __x)\n       { splice(__position, std::move(__x)); }\n #endif\n \n       void\n #if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x, iterator __i)\n+      splice(const_iterator __position, list&& __x, const_iterator __i)\n #else\n       splice(iterator __position, list& __x, iterator __i)\n #endif\n@@ -542,14 +561,14 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       void\n-      splice(iterator __position, list& __x, iterator __i)\n+      splice(const_iterator __position, list& __x, const_iterator __i)\n       { splice(__position, std::move(__x), __i); }\n #endif\n \n       void\n #if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x, iterator __first,\n-\t     iterator __last)\n+      splice(const_iterator __position, list&& __x, const_iterator __first,\n+\t     const_iterator __last)\n #else\n       splice(iterator __position, list& __x, iterator __first,\n \t     iterator __last)\n@@ -565,14 +584,14 @@ namespace __debug\n \t// We used to perform the splice_alloc check:  not anymore, redundant\n \t// after implementing the relevant bits of N1599.\n \n-\tfor (_Base_iterator __tmp = __first.base();\n+\tfor (_Base_const_iterator __tmp = __first.base();\n \t     __tmp != __last.base(); ++__tmp)\n \t  {\n \t    _GLIBCXX_DEBUG_VERIFY(__tmp != _Base::end(),\n \t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n-\t    _GLIBCXX_DEBUG_VERIFY(&__x != this || __tmp != __position,\n+\t    _GLIBCXX_DEBUG_VERIFY(&__x != this || __tmp != __position.base(),\n \t\t\t\t_M_message(__gnu_debug::__msg_splice_overlap)\n \t\t\t\t  ._M_iterator(__tmp, \"position\")\n \t\t\t\t  ._M_iterator(__first, \"first\")\n@@ -588,7 +607,8 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       void\n-      splice(iterator __position, list& __x, iterator __first, iterator __last)\n+      splice(const_iterator __position, list& __x,\n+\t     const_iterator __first, const_iterator __last)\n       { splice(__position, std::move(__x), __first, __last); }\n #endif\n "}, {"sha": "43edb53b41c871b48d7e4b6de628f3caa0fb3c7b", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 90, "deletions": 16, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -916,6 +916,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->assign(__l.begin(), __l.end()); }\n #endif // C++11\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert multiple characters.\n+       *  @param __p  Const_iterator referencing location in string to\n+       *              insert at.\n+       *  @param __n  Number of characters to insert\n+       *  @param __c  The character to insert.\n+       *  @return  Iterator referencing the first inserted char.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts @a __n copies of character @a __c starting at the\n+       *  position referenced by iterator @a __p.  If adding\n+       *  characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      iterator\n+      insert(const_iterator __p, size_type __n, _CharT __c)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n+\tconst size_type __pos = __p - _M_ibegin();\n+\tthis->replace(__p, __p, __n, __c);\n+\treturn iterator(this->_M_data() + __pos); \n+      }\n+#else\n       /**\n        *  @brief  Insert multiple characters.\n        *  @param __p  Iterator referencing location in string to insert at.\n@@ -932,39 +957,64 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       insert(iterator __p, size_type __n, _CharT __c)\n       {\tthis->replace(__p, __p, __n, __c);  }\n+#endif\n \n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Insert a range of characters.\n-       *  @param __p  Iterator referencing location in string to insert at.\n+       *  @param __p  Const_iterator referencing location in string to\n+       *              insert at.\n        *  @param __beg  Start of range.\n        *  @param __end  End of range.\n+       *  @return  Iterator referencing the first inserted char.\n        *  @throw  std::length_error  If new length exceeds @c max_size().\n        *\n        *  Inserts characters in range [beg,end).  If adding characters\n        *  causes the length to exceed max_size(), length_error is\n        *  thrown.  The value of the string doesn't change if an error\n        *  is thrown.\n       */\n-#if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\titerator\n+        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)\n+        {\n+\t  _GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n+\t  const size_type __pos = __p - _M_ibegin();\n+\t  this->replace(__p, __p, __beg, __end);\n+\t  return iterator(this->_M_data() + __pos);\n+\t}\n #else\n+      /**\n+       *  @brief  Insert a range of characters.\n+       *  @param __p  Iterator referencing location in string to insert at.\n+       *  @param __beg  Start of range.\n+       *  @param __end  End of range.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts characters in range [beg,end).  If adding characters\n+       *  causes the length to exceed max_size(), length_error is\n+       *  thrown.  The value of the string doesn't change if an error\n+       *  is thrown.\n+      */\n       template<class _InputIterator>\n-#endif\n         void\n         insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n         { this->replace(__p, __p, __beg, __end); }\n+#endif\n \n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Insert an initializer_list of characters.\n-       *  @param __p  Iterator referencing location in string to insert at.\n+       *  @param __p  Const_iterator referencing location in string to\n+       *              insert at.\n        *  @param __l  The initializer_list of characters to insert.\n+       *  @return  Iterator referencing the first inserted char.\n        *  @throw  std::length_error  If new length exceeds @c max_size().\n        */\n-      void\n-      insert(iterator __p, std::initializer_list<_CharT> __l)\n-      { this->insert(__p, __l.begin(), __l.end()); }\n+      iterator\n+      insert(const_iterator __p, std::initializer_list<_CharT> __l)\n+      { return this->insert(__p, __l.begin(), __l.end()); }\n #endif // C++11\n \n       /**\n@@ -1421,7 +1471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n         __versa_string&\n-        replace(iterator __i1, iterator __i2,\n+        replace(const_iterator __i1, const_iterator __i2,\n \t\t_InputIterator __k1, _InputIterator __k2)\n         {\n \t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n@@ -1447,7 +1497,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Specializations for the common case of pointer and iterator:\n       // useful to avoid the overhead of temporary buffering in _M_replace.\n       __versa_string&\n-      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2,\n+\t      _CharT* __k1, _CharT* __k2)\n+#else\n+      replace(iterator __i1, iterator __i2,\n+\t      _CharT* __k1, _CharT* __k2)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t && __i2 <= _M_iend());\n@@ -1457,8 +1513,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       __versa_string&\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2,\n+\t      const _CharT* __k1, const _CharT* __k2)\n+#else\n       replace(iterator __i1, iterator __i2,\n \t      const _CharT* __k1, const _CharT* __k2)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t && __i2 <= _M_iend());\n@@ -1468,7 +1529,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       __versa_string&\n-      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2,\n+\t      iterator __k1, iterator __k2)\n+#else\n+      replace(iterator __i1, iterator __i2,\n+\t      iterator __k1, iterator __k2)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t && __i2 <= _M_iend());\n@@ -1478,8 +1545,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       __versa_string&\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2,\n+\t      const_iterator __k1, const_iterator __k2)\n+#else\n       replace(iterator __i1, iterator __i2,\n \t      const_iterator __k1, const_iterator __k2)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t && __i2 <= _M_iend());\n@@ -1502,22 +1574,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  of result exceeds max_size(), length_error is thrown.  The\n        *  value of the string doesn't change if an error is thrown.\n       */\n-      __versa_string& replace(iterator __i1, iterator __i2,\n-\t\t\t      std::initializer_list<_CharT> __l)\n+      __versa_string&\n+      replace(const_iterator __i1, const_iterator __i2,\n+\t      std::initializer_list<_CharT> __l)\n       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n #endif // C++11\n \n     private:\n       template<class _Integer>\n \t__versa_string&\n-\t_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,\n-\t\t\t    _Integer __val, std::__true_type)\n+\t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n+\t\t\t    _Integer __n, _Integer __val, std::__true_type)\n         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }\n \n       template<class _InputIterator>\n \t__versa_string&\n-\t_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n-\t\t\t    _InputIterator __k2, std::__false_type);\n+\t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n+\t\t\t    _InputIterator __k1, _InputIterator __k2,\n+\t\t\t    std::__false_type);\n \n       __versa_string&\n       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,"}, {"sha": "0a80c26fd891796c919f0ae40607e5a427463b90", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -81,8 +81,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _InputIterator>\n       __versa_string<_CharT, _Traits, _Alloc, _Base>&\n       __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n-\t\t\t  _InputIterator __k2, std::__false_type)\n+      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n+\t\t\t  _InputIterator __k1, _InputIterator __k2,\n+\t\t\t  std::__false_type)\n       {\n \tconst __versa_string __s(__k1, __k2);\n \tconst size_type __n1 = __i2 - __i1;"}, {"sha": "ac09aa3db261cb2df9072424b9dc6ef97387e027", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -363,34 +363,51 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n                         this); \n       }\n \n-      void\n-      insert(iterator __position, initializer_list<value_type> __l)\n+      iterator\n+      insert(const_iterator __position, initializer_list<value_type> __l)\n       {\n         _M_profile_insert(this, __position, size());\n-        _Base::insert(__position.base(), __l);\n+        return iterator(_Base::insert(__position.base(), __l), this);\n       }\n #endif\n \n+#if __cplusplus >= 201103L\n+      iterator\n+      insert(const_iterator __position, size_type __n, const _Tp& __x)\n+      {\n+        _M_profile_insert(this, __position, size());\n+\treturn iterator(_Base::insert(__position.base(), __n, __x), this);\n+      }\n+#else\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n         _M_profile_insert(this, __position, size());\n \t_Base::insert(__position.base(), __n, __x);\n       }\n+#endif\n \n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\titerator\n+        insert(const_iterator __position, _InputIterator __first,\n+\t       _InputIterator __last)\n+\t{\n+\t  _M_profile_insert(this, __position, size());\n+\t  return iterator(_Base::insert(__position.base(), __first, __last),\n+\t\t\t  this);\n+\t}\n #else\n       template<class _InputIterator>\n-#endif\n         void\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n \t{\n \t  _M_profile_insert(this, __position, size());\n \t  _Base::insert(__position.base(), __first, __last);\n \t}\n+#endif\n \n       iterator\n #if __cplusplus >= 201103L\n@@ -423,27 +440,25 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       // 23.2.2.4 list operations:\n       void\n #if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x)\n+      splice(const_iterator __position, list&& __x)\n #else\n       splice(iterator __position, list& __x)\n #endif\n       { this->splice(__position, _GLIBCXX_MOVE(__x), __x.begin(), __x.end()); }\n \n #if __cplusplus >= 201103L\n       void\n-      splice(iterator __position, list& __x)\n+      splice(const_iterator __position, list& __x)\n       { this->splice(__position, std::move(__x)); }\n-#endif\n \n-#if __cplusplus >= 201103L\n       void\n-      splice(iterator __position, list& __x, iterator __i)\n+      splice(const_iterator __position, list& __x, const_iterator __i)\n       { this->splice(__position, std::move(__x), __i); }\n #endif\n \n       void\n #if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x, iterator __i)\n+      splice(const_iterator __position, list&& __x, const_iterator __i)\n #else\n       splice(iterator __position, list& __x, iterator __i)\n #endif\n@@ -458,8 +473,8 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       void\n #if __cplusplus >= 201103L\n-      splice(iterator __position, list&& __x, iterator __first,\n-\t     iterator __last)\n+      splice(const_iterator __position, list&& __x, const_iterator __first,\n+\t     const_iterator __last)\n #else\n       splice(iterator __position, list& __x, iterator __first,\n \t     iterator __last)\n@@ -474,7 +489,8 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n #if __cplusplus >= 201103L\n       void\n-      splice(iterator __position, list& __x, iterator __first, iterator __last)\n+      splice(const_iterator __position, list& __x,\n+\t     const_iterator __first, const_iterator __last)\n       { this->splice(__position, std::move(__x), __first, __last); }\n #endif\n "}, {"sha": "75670ec7904d592c98eadd2de5eec75fdb9e6370", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/const_iterator.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -24,6 +24,9 @@ void test01()\n {\n   std::list<int> l1;\n   int n = 0;\n-  l1.insert(l1.cbegin(), n);\n-  l1.insert(l1.cbegin(), 1);\n+  std::list<int>::iterator it = l1.insert(l1.cbegin(), n);\n+  it = l1.insert(l1.cbegin(), 1);\n+  it = l1.insert(l1.cbegin(), {2, 3});\n+  it = l1.insert(l1.cbegin(), 1, 4);\n+  it = l1.insert(l1.cbegin(), l1.begin(), l1.end());\n }"}, {"sha": "a2544dc9b1e9fcd51b4155d591fe764479e1c687", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/splice/const_iterator.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Fsplice%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Fsplice%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Fsplice%2Fconst_iterator.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+\n+void test01()\n+{\n+  std::list<int> l1{0, 1}, l2{2, 3};\n+  l1.splice(l1.cbegin(), l2);\n+  l2.splice(l2.cbegin(), std::move(l1));\n+  l1.splice(l1.cbegin(), l2, l2.cbegin());\n+  l2.splice(l2.cbegin(), std::move(l1), l1.cbegin());\n+  l1.splice(l1.cbegin(), l2, l2.cbegin(), l2.cend());\n+  l2.splice(l2.cbegin(), std::move(l1), l1.cbegin(), l1.cend());\n+}"}, {"sha": "80cf1033d2715d9ee7aac6c6a5b4833f911b7537", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1559 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1651 }\n \n #include <list>\n "}, {"sha": "333849252b160a036f064a33e41ee8cd684d0b45", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1511 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n \n #include <list>\n "}, {"sha": "fdf4fe9387f6c916597dc9ef015986b4a903cf94", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1511 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n \n #include <list>\n #include <utility>"}, {"sha": "3c33584e8de63b2daf330d5db77d78a0707d2f22", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1511 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n \n #include <list>\n "}, {"sha": "6e922a0b719367b4006908c77921b5bf78314d3b", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/insert/char/const_iterator.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fchar%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fchar%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fchar%2Fconst_iterator.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -23,5 +23,8 @@\n void test01() \n {\n   __gnu_cxx::__vstring vs1;\n-  vs1.insert(vs1.cbegin(), '1');\n+  __gnu_cxx::__vstring::iterator it = vs1.insert(vs1.cbegin(), '1');\n+  it = vs1.insert(vs1.cbegin(), 1, '2');\n+  it = vs1.insert(vs1.cbegin(), {'3', '4'});\n+  it = vs1.insert(vs1.cbegin(), vs1.begin(), vs1.end());\n }"}, {"sha": "86e949e578ab3a581e224b9b380fb15973f9c2b1", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/insert/wchar_t/const_iterator.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fwchar_t%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fwchar_t%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fwchar_t%2Fconst_iterator.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -23,5 +23,8 @@\n void test01() \n {\n   __gnu_cxx::__wvstring wvs1;\n-  wvs1.insert(wvs1.cbegin(), L'1');\n+  __gnu_cxx::__wvstring::iterator it = wvs1.insert(wvs1.cbegin(), L'1');\n+  it = wvs1.insert(wvs1.cbegin(), 1, L'2');\n+  it = wvs1.insert(wvs1.cbegin(), {L'3', L'4'});\n+  it = wvs1.insert(wvs1.cbegin(), wvs1.begin(), wvs1.end());\n }"}, {"sha": "618980988309d32197dca8c003717a7d2b7544ea", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/replace/char/const_iterator.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fchar%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fchar%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fchar%2Fconst_iterator.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -27,4 +27,6 @@ void test01()\n   vs1.replace(vs1.cbegin(), vs1.cend(), \"1\", 1);\n   vs1.replace(vs1.cbegin(), vs1.cend(), \"2\");\n   vs1.replace(vs1.cbegin(), vs1.cend(), 1, '3');\n+  vs1.replace(vs1.cbegin(), vs1.cend(), vs1.begin(), vs1.end());\n+  vs1.replace(vs1.cbegin(), vs1.cend(), {'4', '5'});\n }"}, {"sha": "65466a6a9ba231f2381035477ddd1fcda769fd6f", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/replace/wchar_t/const_iterator.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fwchar_t%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fwchar_t%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fwchar_t%2Fconst_iterator.cc?ref=019fdb7923b71f4fdac33e7f2cef3e0ebc0ce205", "patch": "@@ -27,4 +27,6 @@ void test01()\n   wvs1.replace(wvs1.cbegin(), wvs1.cend(), L\"1\", 1);\n   wvs1.replace(wvs1.cbegin(), wvs1.cend(), L\"2\");\n   wvs1.replace(wvs1.cbegin(), wvs1.cend(), 1, L'3');\n+  wvs1.replace(wvs1.cbegin(), wvs1.cend(), wvs1.begin(), wvs1.end());\n+  wvs1.replace(wvs1.cbegin(), wvs1.cend(), {'4', '5'});\n }"}]}