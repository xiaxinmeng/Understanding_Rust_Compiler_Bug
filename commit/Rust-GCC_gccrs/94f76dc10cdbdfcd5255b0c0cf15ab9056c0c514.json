{"sha": "94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmNzZkYzEwY2RiZGZjZDUyNTViMGMwY2YxNWFiOTA1NmMwYzUxNA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-20T09:49:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:49:02Z"}, "message": "[Ada] Warning for out-of-order record representation clauses\n\nThe compiler can now warn for out-of-order record representation\nclauses. A warning is given if the order of component declarations,\ncomponent clauses, and bit-level layout do not all agree.  The warning\nis disabled by default, and may be enabled by the -gnatw_r switch.\n\n2019-08-20  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Component_Order_Check): New procedure to check\n\tfor out-of-order clauses.\n\t* warnsw.ads, warnsw.adb: New -gnatw_r switch.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tDocument new switch.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r274723", "tree": {"sha": "da58597813cb45bdeb79cc8caeb9e07beb493ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da58597813cb45bdeb79cc8caeb9e07beb493ab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afdc759841f8f4f464f3d5a2ba8e05e9a8e41d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdc759841f8f4f464f3d5a2ba8e05e9a8e41d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afdc759841f8f4f464f3d5a2ba8e05e9a8e41d72"}], "stats": {"total": 161, "additions": 148, "deletions": 13}, "files": [{"sha": "3db5d5ca06f01035a168fbd413637a0bd3f3bf46", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "patch": "@@ -1,3 +1,12 @@\n+2019-08-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Component_Order_Check): New procedure to check\n+\tfor out-of-order clauses.\n+\t* warnsw.ads, warnsw.adb: New -gnatw_r switch.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument new switch.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* sem_ch13.adb (Object_Size): Give an error for zero. It really"}, {"sha": "82aecc89a28fae65babc169b9d8ac35a2a132d44", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "patch": "@@ -2760,7 +2760,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n :switch:`-gnatwa`\n   *Activate most optional warnings.*\n \n-  This switch activates most optional warning messages.  See the remaining list\n+  This switch activates most optional warning messages. See the remaining list\n   in this section for details on optional warning messages that can be\n   individually controlled.  The warnings that are not turned on by this\n   switch are:\n@@ -2790,6 +2790,8 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n \n   * :switch:`-gnatw.q` (questionable layout of record types)\n \n+  * :switch:`-gnatw_r` (out-of-order record representation clauses)\n+\n   * :switch:`-gnatw.s` (overridden size clause)\n \n   * :switch:`-gnatwt` (tracking of deleted conditional code)\n@@ -3708,14 +3710,31 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   warnings are given.\n \n \n-.. index:: -gnatwT  (gcc)\n+.. index:: -gnatw.R  (gcc)\n \n :switch:`-gnatw.R`\n   *Suppress warnings for object renaming function.*\n \n   This switch suppresses warnings for object renaming function.\n \n \n+.. index:: -gnatw_r  (gcc)\n+\n+:switch:`-gnatw_r`\n+  *Activate warnings for out-of-order record representation clauses.*\n+\n+  This switch activates warnings for record representation clauses,\n+  if the order of component declarations, component clauses,\n+  and bit-level layout do not all agree.\n+  The default is that these warnings are not given.\n+\n+\n+.. index:: -gnatw_R  (gcc)\n+\n+:switch:`-gnatw_R`\n+  *Suppress warnings for out-of-order record representation clauses.*\n+\n+\n .. index:: -gnatws  (gcc)\n \n :switch:`-gnatws`"}, {"sha": "c2dd05307fdf556354b00dd281546db56e22286d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "patch": "@@ -10925,7 +10925,7 @@ of the pragma in the @cite{GNAT_Reference_manual}).\n \n @emph{Activate most optional warnings.}\n \n-This switch activates most optional warning messages.  See the remaining list\n+This switch activates most optional warning messages. See the remaining list\n in this section for details on optional warning messages that can be\n individually controlled.  The warnings that are not turned on by this\n switch are:\n@@ -10969,6 +10969,9 @@ switch are:\n @item \n @code{-gnatw.q} (questionable layout of record types)\n \n+@item \n+@code{-gnatw_r} (out-of-order record representation clauses)\n+\n @item \n @code{-gnatw.s} (overridden size clause)\n \n@@ -12225,7 +12228,7 @@ opposed to renaming the function itself).  The default is that these\n warnings are given.\n @end table\n \n-@geindex -gnatwT (gcc)\n+@geindex -gnatw.R (gcc)\n \n \n @table @asis\n@@ -12237,6 +12240,31 @@ warnings are given.\n This switch suppresses warnings for object renaming function.\n @end table\n \n+@geindex -gnatw_r (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_r}\n+\n+@emph{Activate warnings for out-of-order record representation clauses.}\n+\n+This switch activates warnings for record representation clauses,\n+if the order of component declarations, component clauses,\n+and bit-level layout do not all agree.\n+The default is that these warnings are not given.\n+@end table\n+\n+@geindex -gnatw_R (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_R}\n+\n+@emph{Suppress warnings for out-of-order record representation clauses.}\n+@end table\n+\n @geindex -gnatws (gcc)\n \n "}, {"sha": "415687922df042d19fbfa542b5c0606c7e28490b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 70, "deletions": 9, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "patch": "@@ -10133,6 +10133,11 @@ package body Sem_Ch13 is\n       --  recursively to compute After_Last for the parent type; in this case\n       --  Warn is False and the warnings are suppressed.\n \n+      procedure Component_Order_Check (Rectype : Entity_Id);\n+      --  Check that the order of component clauses agrees with the order of\n+      --  component declarations, and that the component clauses are given in\n+      --  increasing order of bit offset.\n+\n       -----------------------------\n       -- Check_Component_Overlap --\n       -----------------------------\n@@ -10175,6 +10180,53 @@ package body Sem_Ch13 is\n          end if;\n       end Check_Component_Overlap;\n \n+      ---------------------------\n+      -- Component_Order_Check --\n+      ---------------------------\n+\n+      procedure Component_Order_Check (Rectype : Entity_Id) is\n+         Comp : Entity_Id := First_Component (Rectype);\n+         Clause : Node_Id := First (Component_Clauses (N));\n+         Prev_Bit_Offset : Uint := Uint_0;\n+         OOO : constant String :=\n+           \"?component clause out of order with respect to declaration\";\n+\n+      begin\n+         --  Step Comp through components and Clause through component clauses,\n+         --  skipping pragmas. We ignore discriminants and variant parts,\n+         --  because we get most of the benefit from the plain vanilla\n+         --  component cases, without the extra complexity. If we find a Comp\n+         --  and Clause that don't match, give a warning on both and quit. If\n+         --  we find two subsequent clauses out of order by bit layout, give\n+         --  warning and quit. On each iteration, Prev_Bit_Offset is the one\n+         --  from the previous iteration (or 0 to start).\n+\n+         while Present (Comp) and then Present (Clause) loop\n+            if Nkind (Clause) = N_Component_Clause\n+              and then Ekind (Entity (Component_Name (Clause))) = E_Component\n+            then\n+               if Entity (Component_Name (Clause)) /= Comp then\n+                  Error_Msg_N (OOO, Comp);\n+                  Error_Msg_N (OOO, Clause);\n+                  exit;\n+               end if;\n+\n+               if not Reverse_Bit_Order (Rectype)\n+                 and then not Reverse_Storage_Order (Rectype)\n+                 and then Component_Bit_Offset (Comp) < Prev_Bit_Offset\n+               then\n+                  Error_Msg_N (\"?memory layout out of order\", Clause);\n+                  exit;\n+               end if;\n+\n+               Prev_Bit_Offset := Component_Bit_Offset (Comp);\n+               Comp := Next_Component (Comp);\n+            end if;\n+\n+            Next (Clause);\n+         end loop;\n+      end Component_Order_Check;\n+\n       --------------------\n       -- Find_Component --\n       --------------------\n@@ -10821,16 +10873,25 @@ package body Sem_Ch13 is\n          end Overlap_Check2;\n       end if;\n \n-      --  Check for record holes (gaps). We skip this check if overlap was\n-      --  detected, since it makes sense for the programmer to fix this\n-      --  error before worrying about warnings.\n+      --  Skip the following warnings if overlap was detected; programmer\n+      --  should fix the errors first.\n \n-      if Warn_On_Record_Holes and not Overlap_Detected then\n-         declare\n-            Ignore : Uint;\n-         begin\n-            Record_Hole_Check (Rectype, After_Last => Ignore, Warn => True);\n-         end;\n+      if not Overlap_Detected then\n+         --  Check for record holes (gaps)\n+\n+         if Warn_On_Record_Holes then\n+            declare\n+               Ignore : Uint;\n+            begin\n+               Record_Hole_Check (Rectype, After_Last => Ignore, Warn => True);\n+            end;\n+         end if;\n+\n+         --  Check for out-of-order component clauses\n+\n+         if Warn_On_Component_Order then\n+            Component_Order_Check (Rectype);\n+         end if;\n       end if;\n \n       --  For records that have component clauses for all components, and whose"}, {"sha": "a5096dcf5683c5ba2bc081bf8951ba94b33a1d67", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "patch": "@@ -79,6 +79,7 @@ package body Warnsw is\n       Warn_On_Questionable_Layout          := Setting;\n       Warn_On_Questionable_Missing_Parens  := Setting;\n       Warn_On_Record_Holes                 := Setting;\n+      Warn_On_Component_Order              := Setting;\n       Warn_On_Redundant_Constructs         := Setting;\n       Warn_On_Reverse_Bit_Order            := Setting;\n       Warn_On_Size_Alignment               := Setting;\n@@ -177,6 +178,8 @@ package body Warnsw is\n         W.Warn_On_Questionable_Missing_Parens;\n       Warn_On_Record_Holes                 :=\n         W.Warn_On_Record_Holes;\n+      Warn_On_Component_Order              :=\n+        W.Warn_On_Component_Order;\n       Warn_On_Redundant_Constructs         :=\n         W.Warn_On_Redundant_Constructs;\n       Warn_On_Reverse_Bit_Order            :=\n@@ -287,6 +290,8 @@ package body Warnsw is\n         Warn_On_Questionable_Missing_Parens;\n       W.Warn_On_Record_Holes                 :=\n         Warn_On_Record_Holes;\n+      W.Warn_On_Component_Order              :=\n+        Warn_On_Component_Order;\n       W.Warn_On_Redundant_Constructs         :=\n         Warn_On_Redundant_Constructs;\n       W.Warn_On_Reverse_Bit_Order            :=\n@@ -500,6 +505,12 @@ package body Warnsw is\n          when 'C' =>\n             Warn_On_Unknown_Compile_Time_Warning := False;\n \n+         when 'r' =>\n+            Warn_On_Component_Order := True;\n+\n+         when 'R' =>\n+            Warn_On_Component_Order := False;\n+\n          when others =>\n             if Ignore_Unrecognized_VWY_Switches then\n                Write_Line (\"unrecognized switch -gnatw_\" & C & \" ignored\");"}, {"sha": "0a3253e2ac47788ab3a366f828a53075e385e103", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=94f76dc10cdbdfcd5255b0c0cf15ab9056c0c514", "patch": "@@ -67,6 +67,12 @@ package Warnsw is\n    --  Warn when explicit record component clauses leave uncovered holes (gaps)\n    --  in a record layout. Off by default, set by -gnatw.h (but not -gnatwa).\n \n+   Warn_On_Component_Order : Boolean := False;\n+   --  Warn when record component clauses are out of order with respect to the\n+   --  component declarations, or if the memory layout is out of order with\n+   --  respect to component declarations and clauses.  Off by default, set by\n+   --  -gnatw_r (but not -gnatwa).\n+\n    Warn_On_Size_Alignment : Boolean := True;\n    --  Warn when explicit Size and Alignment clauses are given for a type, and\n    --  the size is not a multiple of the alignment. Off by default, modified\n@@ -123,6 +129,7 @@ package Warnsw is\n       Warn_On_Questionable_Layout          : Boolean;\n       Warn_On_Questionable_Missing_Parens  : Boolean;\n       Warn_On_Record_Holes                 : Boolean;\n+      Warn_On_Component_Order              : Boolean;\n       Warn_On_Redundant_Constructs         : Boolean;\n       Warn_On_Reverse_Bit_Order            : Boolean;\n       Warn_On_Size_Alignment               : Boolean;"}]}