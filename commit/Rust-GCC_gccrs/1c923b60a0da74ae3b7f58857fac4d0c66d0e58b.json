{"sha": "1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5MjNiNjBhMGRhNzRhZTNiN2Y1ODg1N2ZhYzRkMGM2NmQwZTU4Yg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-11-12T17:15:57Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-11-12T17:15:57Z"}, "message": "[AArch64] Let LR register alloctable\n\n  gcc/\n    * config/aarch64/aarch64.h (CALL_USED_REGISTERS): Mark LR as caller-save.\n    (EPILOGUE_USES): Guard the check by epilogue_completed.\n    * config/aarch64/aarch64.c (aarch64_layout_frame): Explictly check for LR.\n    (aarch64_can_eliminate): Check LR_REGNUM liveness.\n\n  gcc/testsuite/\n    * gcc.target/aarch64/lr_free_1.c: New testcase for -fomit-frame-pointer.\n    * gcc.target/aarch64/lr_free_2.c: New testcase for leaf\n    -fno-omit-frame-pointer.\n\nFrom-SVN: r217431", "tree": {"sha": "993fc99dd00660cea8f105082b81c3a80c2f6f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/993fc99dd00660cea8f105082b81c3a80c2f6f27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/comments", "author": null, "committer": null, "parents": [{"sha": "70654ae6e92d1c830281204570d4239a37f194d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70654ae6e92d1c830281204570d4239a37f194d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70654ae6e92d1c830281204570d4239a37f194d9"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "492b5c74898109bb5149af3f6b6558a4d21e6e63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "patch": "@@ -1,3 +1,12 @@\n+2014-11-12  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.h (CALL_USED_REGISTERS): Mark LR as\n+\tcaller-save.\n+\t(EPILOGUE_USES): Guard the check by epilogue_completed.\n+\t* config/aarch64/aarch64.c (aarch64_layout_frame): Explictly check for\n+\tLR.\n+\t(aarch64_can_eliminate): Check LR_REGNUM liveness.\n+\n 2014-11-12  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (*<arith_shift_insn>_shiftsi): Fix typo."}, {"sha": "d4a8a2fe40522f38483847ef5f8cc138d314e4bc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "patch": "@@ -1901,7 +1901,8 @@ aarch64_layout_frame (void)\n   /* ... and any callee saved register that dataflow says is live.  */\n   for (regno = R0_REGNUM; regno <= R30_REGNUM; regno++)\n     if (df_regs_ever_live_p (regno)\n-\t&& !call_used_regs[regno])\n+\t&& (regno == R30_REGNUM\n+\t    || !call_used_regs[regno]))\n       cfun->machine->frame.reg_offset[regno] = SLOT_REQUIRED;\n \n   for (regno = V0_REGNUM; regno <= V31_REGNUM; regno++)\n@@ -4418,6 +4419,16 @@ aarch64_can_eliminate (const int from, const int to)\n \n       return false;\n     }\n+  else\n+    {\n+      /* If we decided that we didn't need a leaf frame pointer but then used\n+\t LR in the function, then we'll want a frame pointer after all, so\n+\t prevent this elimination to ensure a frame pointer is used.  */\n+      if (to == STACK_POINTER_REGNUM\n+\t  && flag_omit_leaf_frame_pointer\n+\t  && df_regs_ever_live_p (LR_REGNUM))\n+\treturn false;\n+    }\n \n   return true;\n }"}, {"sha": "c046b43c6625bec05a7993f1cb53cbdc7ac49ddd", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "patch": "@@ -272,7 +272,7 @@ extern unsigned long aarch64_tune_flags;\n     1, 1, 1, 1,   1, 1, 1, 1,\t/* R0 - R7 */\t\t\\\n     1, 1, 1, 1,   1, 1, 1, 1,\t/* R8 - R15 */\t\t\\\n     1, 1, 1, 0,   0, 0, 0, 0,\t/* R16 - R23 */\t\t\\\n-    0, 0, 0, 0,   0, 1, 0, 1,\t/* R24 - R30, SP */\t\\\n+    0, 0, 0, 0,   0, 1, 1, 1,\t/* R24 - R30, SP */\t\\\n     1, 1, 1, 1,   1, 1, 1, 1,\t/* V0 - V7 */\t\t\\\n     0, 0, 0, 0,   0, 0, 0, 0,\t/* V8 - V15 */\t\t\\\n     1, 1, 1, 1,   1, 1, 1, 1,   /* V16 - V23 */         \\\n@@ -331,7 +331,7 @@ extern unsigned long aarch64_tune_flags;\n    considered live at the start of the called function.  */\n \n #define EPILOGUE_USES(REGNO) \\\n-  ((REGNO) == LR_REGNUM)\n+  (epilogue_completed && (REGNO) == LR_REGNUM)\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}, {"sha": "d017a9a96ca9624791cf82ac6395b414d3695da1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "patch": "@@ -1,3 +1,9 @@\n+2014-11-12  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/lr_free_1.c: New testcase for -fomit-frame-pointer.\n+\t* gcc.target/aarch64/lr_free_2.c: New testcase for leaf\n+\t-fno-omit-frame-pointer.\n+\n 2014-11-12  Marek Polacek  <polacek@redhat.com>\n \n \t* lib/gcc-dg.exp (${tool}_load): Call prune_file_path instead"}, {"sha": "4c530a2ad5e468eb5d1973f5f1369e0e91db29d6", "filename": "gcc/testsuite/gcc.target/aarch64/lr_free_1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_1.c?ref=1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-inline -O2 -fomit-frame-pointer -ffixed-x2 -ffixed-x3 -ffixed-x4 -ffixed-x5 -ffixed-x6 -ffixed-x7 -ffixed-x8 -ffixed-x9 -ffixed-x10 -ffixed-x11 -ffixed-x12 -ffixed-x13 -ffixed-x14 -ffixed-x15 -ffixed-x16 -ffixed-x17 -ffixed-x18 -ffixed-x19 -ffixed-x20 -ffixed-x21 -ffixed-x22 -ffixed-x23 -ffixed-x24 -ffixed-x25 -ffixed-x26 -ffixed-x27 -ffixed-28 -ffixed-29 --save-temps -mgeneral-regs-only -fno-ipa-cp\" } */\n+\n+extern void abort ();\n+\n+int\n+dec (int a, int b)\n+{\n+  return a + b;\n+}\n+\n+int\n+cal (int a, int b)\n+{\n+  int sum1 = a * b;\n+  int sum2 = a / b;\n+  int sum = dec (sum1, sum2);\n+  return a + b + sum + sum1 + sum2;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int ret = cal (2, 1);\n+\n+  if (ret != 11)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"str\\tx30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+/* { dg-final { scan-assembler \"str\\tw30, \\\\\\[sp, \\[0-9\\]+\\\\\\]\" } } */\n+\n+/* { dg-final { scan-assembler \"ldr\\tw30, \\\\\\[sp, \\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-times \"ldr\\tx30, \\\\\\[sp\\\\\\], \\[0-9\\]+\" 2 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6cf6e63c57b314a0f6d44b2c41115fedad3d6159", "filename": "gcc/testsuite/gcc.target/aarch64/lr_free_2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c923b60a0da74ae3b7f58857fac4d0c66d0e58b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_2.c?ref=1c923b60a0da74ae3b7f58857fac4d0c66d0e58b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-inline -O2 -ffixed-x2 -ffixed-x3 -ffixed-x4 -ffixed-x5 -ffixed-x6 -ffixed-x7 -ffixed-x8 -ffixed-x9 -ffixed-x10 -ffixed-x11 -ffixed-x12 -ffixed-x13 -ffixed-x14 -ffixed-x15 -ffixed-x16 -ffixed-x17 -ffixed-x18 -ffixed-x19 -ffixed-x20 -ffixed-x21 -ffixed-x22 -ffixed-x23 -ffixed-x24 -ffixed-x25 -ffixed-x26 -ffixed-x27 -ffixed-x28 --save-temps -mgeneral-regs-only -fno-ipa-cp -fdump-rtl-ira\" } */\n+\n+extern void abort ();\n+\n+int\n+cal (int a, int b)\n+{\n+  /* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+  int sum = a + b;\n+  int sum1 = a * b;\n+  /* { dg-final { scan-assembler-times \"ldp\\tx29, x30, \\\\\\[sp\\\\\\], \\[0-9\\]+\" 2 } } */\n+  /* { dg-final { scan-rtl-dump \"assign reg 30\" \"ira\" } } */\n+  return (a + b + sum + sum1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int ret = cal (1, 2);\n+\n+  if (ret != 8)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+/* { dg-final { cleanup-rtl-dump \"ira\" } } */"}]}