{"sha": "0315864862b264c7f7dbb8fcc66aadc2e563f195", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxNTg2NDg2MmIyNjRjN2Y3ZGJiOGZjYzY2YWFkYzJlNTYzZjE5NQ==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2013-12-19T16:51:35Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-12-19T16:51:35Z"}, "message": "re PR target/59142 (internal compiler error while compiling OpenCV 2.4.7)\n\n2013-12-19  Charles Baylis  <charles.baylis@linaro.org>\n\n\tPR target/59142\n\tgcc/\n\t* arm/predicates.md (arm_hard_general_register_operand): New\n\tpredicate.\n\t(arm_hard_register_operand): Remove.\n\t* config/arm/arm-ldmstm.ml: Use arm_hard_general_register_operand\n\tfor all patterns.\n\t* config/arm/ldmstm.md: Regenerate.\n\nFrom-SVN: r206124", "tree": {"sha": "330282c1412d9574783e71627a66f436f3c0ef64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/330282c1412d9574783e71627a66f436f3c0ef64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0315864862b264c7f7dbb8fcc66aadc2e563f195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0315864862b264c7f7dbb8fcc66aadc2e563f195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0315864862b264c7f7dbb8fcc66aadc2e563f195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0315864862b264c7f7dbb8fcc66aadc2e563f195/comments", "author": null, "committer": null, "parents": [{"sha": "315d7bd411a074259fd9b66e04f9737b70588cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315d7bd411a074259fd9b66e04f9737b70588cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315d7bd411a074259fd9b66e04f9737b70588cbf"}], "stats": {"total": 360, "additions": 185, "deletions": 175}, "files": [{"sha": "aedb667de10bdd8b3a6259696e7a10acbd834c90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0315864862b264c7f7dbb8fcc66aadc2e563f195", "patch": "@@ -1,3 +1,13 @@\n+2013-12-19  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/59142\n+\t* arm/predicates.md (arm_hard_general_register_operand): New\n+\tpredicate.\n+\t(arm_hard_register_operand): Remove.\n+\t* config/arm/arm-ldmstm.ml: Use arm_hard_general_register_operand\n+\tfor all patterns.\n+\t* config/arm/ldmstm.md: Regenerate.\n+\n 2013-12-19  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/59142"}, {"sha": "0ec5e193b547ed59ed359f491c35b4b84b8d40cd", "filename": "gcc/config/arm/arm-ldmstm.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2Fconfig%2Farm%2Farm-ldmstm.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2Fconfig%2Farm%2Farm-ldmstm.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-ldmstm.ml?ref=0315864862b264c7f7dbb8fcc66aadc2e563f195", "patch": "@@ -70,7 +70,7 @@ let destreg nregs first op_type thumb =\n let write_ldm_set thumb nregs offset opnr first =\n   let indent = \"     \" in\n   Printf.printf \"%s\" (if first then \"    [\" else indent);\n-  Printf.printf \"(set (match_operand:SI %d \\\"arm_hard_register_operand\\\" \\\"\\\")\\n\" opnr;\n+  Printf.printf \"(set (match_operand:SI %d \\\"arm_hard_general_register_operand\\\" \\\"\\\")\\n\" opnr;\n   Printf.printf \"%s     (mem:SI \" indent;\n   begin if offset != 0 then Printf.printf \"(plus:SI \" end;\n   Printf.printf \"%s\" (destreg nregs first IN thumb);\n@@ -84,7 +84,7 @@ let write_stm_set thumb nregs offset opnr first =\n   begin if offset != 0 then Printf.printf \"(plus:SI \" end;\n   Printf.printf \"%s\" (destreg nregs first IN thumb);\n   begin if offset != 0 then Printf.printf \" (const_int %d))\" offset end;\n-  Printf.printf \")\\n%s     (match_operand:SI %d \\\"arm_hard_register_operand\\\" \\\"\\\"))\" indent opnr \n+  Printf.printf \")\\n%s     (match_operand:SI %d \\\"arm_hard_general_register_operand\\\" \\\"\\\"))\" indent opnr \n \n let write_ldm_peep_set extra_indent nregs opnr first =\n   let indent = \"   \" ^ extra_indent in"}, {"sha": "22970fd662c71bc821a129a81f7cb64dba23657b", "filename": "gcc/config/arm/ldmstm.md", "status": "modified", "additions": 171, "deletions": 171, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2Fconfig%2Farm%2Fldmstm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2Fconfig%2Farm%2Fldmstm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fldmstm.md?ref=0315864862b264c7f7dbb8fcc66aadc2e563f195", "patch": "@@ -23,15 +23,15 @@\n \n (define_insn \"*ldm4_ia\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 5 \"s_register_operand\" \"rk\")))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 8))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n@@ -42,15 +42,15 @@\n \n (define_insn \"*thumb_ldm4_ia\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 5 \"s_register_operand\" \"l\")))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 8))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 4\"\n@@ -61,15 +61,15 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int 16)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 5)))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 8))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n@@ -82,15 +82,15 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&l\")\n           (plus:SI (match_dup 5) (const_int 16)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 5)))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 8))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 5\"\n@@ -100,13 +100,13 @@\n (define_insn \"*stm4_ia\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (match_operand:SI 5 \"s_register_operand\" \"rk\"))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(ia%)\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n@@ -118,13 +118,13 @@\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int 16)))\n      (set (mem:SI (match_dup 5))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n   \"stm%(ia%)\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n@@ -136,29 +136,29 @@\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&l\")\n           (plus:SI (match_dup 5) (const_int 16)))\n      (set (mem:SI (match_dup 5))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 5\"\n   \"stm%(ia%)\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")])\n \n (define_insn \"*ldm4_ib\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 5 \"s_register_operand\" \"rk\")\n                   (const_int 4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 16))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n@@ -170,16 +170,16 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int 16)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 16))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n@@ -190,13 +190,13 @@\n (define_insn \"*stm4_ib\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 5 \"s_register_operand\" \"rk\") (const_int 4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 16)))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(ib%)\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n@@ -207,30 +207,30 @@\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int 16)))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 16)))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n   \"stm%(ib%)\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*ldm4_da\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 5 \"s_register_operand\" \"rk\")\n                   (const_int -12))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -4))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 5)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n   \"ldm%(da%)\\t%5, {%1, %2, %3, %4}\"\n@@ -241,16 +241,16 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int -16)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -12))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -4))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 5)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n   \"ldm%(da%)\\t%5!, {%1, %2, %3, %4}\"\n@@ -260,13 +260,13 @@\n (define_insn \"*stm4_da\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 5 \"s_register_operand\" \"rk\") (const_int -12)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -4)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (match_dup 5))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(da%)\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n@@ -277,30 +277,30 @@\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int -16)))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -12)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -4)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (match_dup 5))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n   \"stm%(da%)\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*ldm4_db\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 5 \"s_register_operand\" \"rk\")\n                   (const_int -16))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -12))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -8))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n@@ -313,16 +313,16 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int -16)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -16))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -12))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -8))))\n-     (set (match_operand:SI 4 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n@@ -334,13 +334,13 @@\n (define_insn \"*stm4_db\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 5 \"s_register_operand\" \"rk\") (const_int -16)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -12)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -4)))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(db%)\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n@@ -352,13 +352,13 @@\n     [(set (match_operand:SI 5 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 5) (const_int -16)))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -16)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -12)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -4)))\n-          (match_operand:SI 4 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n   \"stm%(db%)\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n@@ -474,12 +474,12 @@\n \n (define_insn \"*ldm3_ia\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 4 \"s_register_operand\" \"rk\")))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n@@ -490,12 +490,12 @@\n \n (define_insn \"*thumb_ldm3_ia\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 4 \"s_register_operand\" \"l\")))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 3\"\n@@ -506,12 +506,12 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int 12)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 4)))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n@@ -524,12 +524,12 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&l\")\n           (plus:SI (match_dup 4) (const_int 12)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 4)))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 4\"\n@@ -539,11 +539,11 @@\n (define_insn \"*stm3_ia\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (match_operand:SI 4 \"s_register_operand\" \"rk\"))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(ia%)\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n@@ -555,11 +555,11 @@\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int 12)))\n      (set (mem:SI (match_dup 4))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(ia%)\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n@@ -571,24 +571,24 @@\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&l\")\n           (plus:SI (match_dup 4) (const_int 12)))\n      (set (mem:SI (match_dup 4))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(ia%)\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")])\n \n (define_insn \"*ldm3_ib\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 4 \"s_register_operand\" \"rk\")\n                   (const_int 4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 12))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n@@ -600,13 +600,13 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int 12)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 12))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n@@ -617,11 +617,11 @@\n (define_insn \"*stm3_ib\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 4 \"s_register_operand\" \"rk\") (const_int 4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 12)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(ib%)\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n@@ -632,25 +632,25 @@\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int 12)))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 12)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(ib%)\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*ldm3_da\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 4 \"s_register_operand\" \"rk\")\n                   (const_int -8))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 4)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n   \"ldm%(da%)\\t%4, {%1, %2, %3}\"\n@@ -661,13 +661,13 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int -12)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -8))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -4))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 4)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n   \"ldm%(da%)\\t%4!, {%1, %2, %3}\"\n@@ -677,11 +677,11 @@\n (define_insn \"*stm3_da\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 4 \"s_register_operand\" \"rk\") (const_int -8)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (match_dup 4))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(da%)\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n@@ -692,25 +692,25 @@\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int -12)))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -8)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (match_dup 4))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(da%)\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*ldm3_db\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 4 \"s_register_operand\" \"rk\")\n                   (const_int -12))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n@@ -723,13 +723,13 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int -12)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -12))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -8))))\n-     (set (match_operand:SI 3 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n@@ -741,11 +741,11 @@\n (define_insn \"*stm3_db\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 4 \"s_register_operand\" \"rk\") (const_int -12)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -4)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(db%)\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n@@ -757,11 +757,11 @@\n     [(set (match_operand:SI 4 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 4) (const_int -12)))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -12)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -4)))\n-          (match_operand:SI 3 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n   \"stm%(db%)\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n@@ -863,9 +863,9 @@\n \n (define_insn \"*ldm2_ia\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 3 \"s_register_operand\" \"rk\")))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n@@ -876,9 +876,9 @@\n \n (define_insn \"*thumb_ldm2_ia\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 3 \"s_register_operand\" \"l\")))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 2\"\n@@ -889,9 +889,9 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int 8)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 3)))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n@@ -904,9 +904,9 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&l\")\n           (plus:SI (match_dup 3) (const_int 8)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 3)))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 3\"\n@@ -916,9 +916,9 @@\n (define_insn \"*stm2_ia\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (match_operand:SI 3 \"s_register_operand\" \"rk\"))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(ia%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n@@ -930,9 +930,9 @@\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int 8)))\n      (set (mem:SI (match_dup 3))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(ia%)\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n@@ -944,19 +944,19 @@\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&l\")\n           (plus:SI (match_dup 3) (const_int 8)))\n      (set (mem:SI (match_dup 3))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(ia%)\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")])\n \n (define_insn \"*ldm2_ib\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 3 \"s_register_operand\" \"rk\")\n                   (const_int 4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 8))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n@@ -968,10 +968,10 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int 8)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 8))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n@@ -982,9 +982,9 @@\n (define_insn \"*stm2_ib\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 3 \"s_register_operand\" \"rk\") (const_int 4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(ib%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n@@ -995,20 +995,20 @@\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int 8)))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 8)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(ib%)\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*ldm2_da\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 3 \"s_register_operand\" \"rk\")\n                   (const_int -4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 3)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n   \"ldm%(da%)\\t%3, {%1, %2}\"\n@@ -1019,10 +1019,10 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int -8)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int -4))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 3)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n   \"ldm%(da%)\\t%3!, {%1, %2}\"\n@@ -1032,9 +1032,9 @@\n (define_insn \"*stm2_da\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 3 \"s_register_operand\" \"rk\") (const_int -4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (match_dup 3))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(da%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n@@ -1045,20 +1045,20 @@\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int -8)))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int -4)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (match_dup 3))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(da%)\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*ldm2_db\"\n   [(match_parallel 0 \"load_multiple_operation\"\n-    [(set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+    [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_operand:SI 3 \"s_register_operand\" \"rk\")\n                   (const_int -8))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n@@ -1071,10 +1071,10 @@\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int -8)))\n-     (set (match_operand:SI 1 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int -8))))\n-     (set (match_operand:SI 2 \"arm_hard_register_operand\" \"\")\n+     (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n@@ -1086,9 +1086,9 @@\n (define_insn \"*stm2_db\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (plus:SI (match_operand:SI 3 \"s_register_operand\" \"rk\") (const_int -8)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int -4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n   \"stm%(db%)\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n@@ -1100,9 +1100,9 @@\n     [(set (match_operand:SI 3 \"s_register_operand\" \"+&rk\")\n           (plus:SI (match_dup 3) (const_int -8)))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int -8)))\n-          (match_operand:SI 1 \"arm_hard_register_operand\" \"\"))\n+          (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int -4)))\n-          (match_operand:SI 2 \"arm_hard_register_operand\" \"\"))])]\n+          (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n   \"stm%(db%)\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")"}, {"sha": "ed01578351567d4e7473ae39be6b23d72f8a9e34", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0315864862b264c7f7dbb8fcc66aadc2e563f195/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=0315864862b264c7f7dbb8fcc66aadc2e563f195", "patch": "@@ -54,10 +54,10 @@\n        (match_operand 0 \"s_register_operand\")))\n \n ;; Any hard register.\n-(define_predicate \"arm_hard_register_operand\"\n+(define_predicate \"arm_hard_general_register_operand\"\n   (match_code \"reg\")\n {\n-  return REGNO (op) < FIRST_PSEUDO_REGISTER;\n+  return REGNO (op) <= LAST_ARM_REGNUM;\n })\n \n ;; A low register."}]}