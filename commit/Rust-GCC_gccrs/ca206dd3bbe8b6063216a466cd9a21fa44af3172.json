{"sha": "ca206dd3bbe8b6063216a466cd9a21fa44af3172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EyMDZkZDNiYmU4YjYwNjMyMTZhNDY2Y2Q5YTIxZmE0NGFmMzE3Mg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-20T08:56:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-20T08:56:46Z"}, "message": "Merge #393 #431\n\n393: Add support for 'unsupported' test cases in testsuite r=philberty a=dkm\n\nAdd support for 'unsupported' test cases in testsuite\r\n\r\nIntroduce an 'unsupported/' directory in the testsuite. It should contains tests\r\ncase for which the compiler currently has an incorrect behavior:\r\n- its accepts invalid input\r\n- it rejects valid input\r\n\r\nSome basic guidelines are provided in unsupported.exp.\n\n431: Add Issue and PR templates r=philberty a=philberty\n\nThis removes the greetings automation and adds in PR and issue templates in github. These were taken from rust-clippy as a base and changed for GCC Rust.\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "32efee0c82065913a4b8429ec550ef5b65527b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32efee0c82065913a4b8429ec550ef5b65527b25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca206dd3bbe8b6063216a466cd9a21fa44af3172", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpiROCRBK7hj4Ov3rIwAAptsIAGDmn4i1UUXarlQieCQBD/O/\nVg+VdoFZYMHqc+aEVAZj1HgcSTAUf6+y4gqSE28L7mmWltx4VHrLKVt4fmc5als4\nafhq1+TBaxFfJ+rW636HFR+LRIExjPyAjXHVd8+/zTP9WrjR9mrP3hoUv12txBcI\nnvuXNH7IeOgMWaQoAMSN7cnItRaz/6kCaaGslDGBQM2ASLHd4U/0CJ6TusWnQtFi\n3jUG3nMh3wvHJ+Aqc6s5OCYRCloseghu3z5s6LGWH1jP8YGADY7R8Pb6EOyp/iSS\nAE2uIiGhjR07CbtiYiwg5ULFfshzbyHwFnPjuKnWxdew9FLaOs6dJR8TxWnqGqA=\n=Xzej\n-----END PGP SIGNATURE-----\n", "payload": "tree 32efee0c82065913a4b8429ec550ef5b65527b25\nparent 05f9e179a86ffe24a080a5e1de2b67e9164bd8c6\nparent 033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf\nparent d89249208a000bb3dab553f4484724b61ecb0c70\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621501006 +0000\ncommitter GitHub <noreply@github.com> 1621501006 +0000\n\nMerge #393 #431\n\n393: Add support for 'unsupported' test cases in testsuite r=philberty a=dkm\n\nAdd support for 'unsupported' test cases in testsuite\r\n\r\nIntroduce an 'unsupported/' directory in the testsuite. It should contains tests\r\ncase for which the compiler currently has an incorrect behavior:\r\n- its accepts invalid input\r\n- it rejects valid input\r\n\r\nSome basic guidelines are provided in unsupported.exp.\n\n431: Add Issue and PR templates r=philberty a=philberty\n\nThis removes the greetings automation and adds in PR and issue templates in github. These were taken from rust-clippy as a base and changed for GCC Rust.\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca206dd3bbe8b6063216a466cd9a21fa44af3172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca206dd3bbe8b6063216a466cd9a21fa44af3172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca206dd3bbe8b6063216a466cd9a21fa44af3172/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f9e179a86ffe24a080a5e1de2b67e9164bd8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f9e179a86ffe24a080a5e1de2b67e9164bd8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f9e179a86ffe24a080a5e1de2b67e9164bd8c6"}, {"sha": "033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf"}, {"sha": "d89249208a000bb3dab553f4484724b61ecb0c70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89249208a000bb3dab553f4484724b61ecb0c70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89249208a000bb3dab553f4484724b61ecb0c70"}], "stats": {"total": 201, "additions": 188, "deletions": 13}, "files": [{"sha": "9aef3ebe637a1d1b325266165389786032876f93", "filename": ".github/ISSUE_TEMPLATE/blank_issue.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FISSUE_TEMPLATE%2Fblank_issue.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FISSUE_TEMPLATE%2Fblank_issue.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2FISSUE_TEMPLATE%2Fblank_issue.md?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,4 @@\n+---\n+name: Blank Issue\n+about: Create a blank issue.\n+---"}, {"sha": "cee42dd33141fe618f9d07ea554d825906885068", "filename": ".github/ISSUE_TEMPLATE/bug_report.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FISSUE_TEMPLATE%2Fbug_report.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FISSUE_TEMPLATE%2Fbug_report.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2FISSUE_TEMPLATE%2Fbug_report.md?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,25 @@\n+---\n+name: Bug Report\n+about: Create a bug report for Rust GCC\n+labels: bug\n+---\n+<!--\n+Thank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\n+along with any information you feel relevant to replicating the bug.\n+-->\n+\n+I tried this code:\n+\n+```rust\n+<code>\n+```\n+\n+I expected to see this happen: *explanation*\n+\n+Instead, this happened: *explanation*\n+\n+### Meta\n+\n+- What version of Rust GCC were you using, git sha if possible.\n+\n+"}, {"sha": "5d3c493f861f52379e626e42ef944976ed680f9d", "filename": ".github/ISSUE_TEMPLATE/ice.md", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FISSUE_TEMPLATE%2Fice.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FISSUE_TEMPLATE%2Fice.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2FISSUE_TEMPLATE%2Fice.md?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,42 @@\n+---\n+name: Internal Compiler Error\n+about: Create a report for an internal compiler error in Rust GCC.\n+labels: bug, ICE\n+---\n+<!--\n+Thank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\n+a minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\n+how to create smaller examples.\n+\n+http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n+\n+-->\n+\n+### Code\n+\n+```rust\n+<code>\n+```\n+\n+### Meta\n+\n+- What version of Rust GCC were you using, git sha if possible.\n+\n+### Error output\n+\n+```\n+<output>\n+```\n+\n+<!--\n+Include a backtrace if available.\n+-->\n+<details><summary>Backtrace</summary>\n+  <p>\n+  \n+  ```\n+  <backtrace>\n+  ```\n+  \n+  </p>\n+</details>"}, {"sha": "c5ed56569837c935ae9beb9107e34b8b700b7dd0", "filename": ".github/PULL_REQUEST_TEMPLATE.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FPULL_REQUEST_TEMPLATE.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/.github%2FPULL_REQUEST_TEMPLATE.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2FPULL_REQUEST_TEMPLATE.md?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,24 @@\n+Thank you for making Rust GCC better!\n+\n+If your PR fixes an issue, you can add \"Fixes #issue_number\" into this\n+PR description and the git commit message. This way the issue will be\n+automatically closed when your PR is merged. If your change addresses\n+an issue but does not fully fix it please mark it as \"Addresses #issue_number\"\n+in the git commit message.\n+\n+Here is a checklist to help you with your PR.\n+\n+- \\[ ] GCC code require copyright assignment: https://gcc.gnu.org/contribute.html\n+- \\[ ] Read contributing guidlines\n+- \\[ ] `make check-rust` passes locally\n+- \\[ ] Run `clang-format`\n+- \\[ ] Added any relevant test cases to gcc/testsuite/rust.test\n+\n+Note that you can skip the above if you are just opening a WIP PR in\n+order to get feedback.\n+\n+Delete this line and everything above before opening your PR.\n+\n+---\n+\n+*Please write a short comment explaining your change."}, {"sha": "556e584c50a019d6f6088f1326820e4f23f4224d", "filename": ".github/workflows/greetings.yml", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f9e179a86ffe24a080a5e1de2b67e9164bd8c6/.github%2Fworkflows%2Fgreetings.yml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f9e179a86ffe24a080a5e1de2b67e9164bd8c6/.github%2Fworkflows%2Fgreetings.yml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2Fworkflows%2Fgreetings.yml?ref=05f9e179a86ffe24a080a5e1de2b67e9164bd8c6", "patch": "@@ -1,13 +0,0 @@\n-name: Greetings\n-\n-on: [pull_request, issues]\n-\n-jobs:\n-  greeting:\n-    runs-on: ubuntu-latest\n-    steps:\n-    - uses: actions/first-interaction@v1\n-      with:\n-        repo-token: ${{ secrets.GITHUB_TOKEN }}\n-        issue-message: 'Thanks for your contribution fellow Rustacean'\n-        pr-message: 'Thanks for your contribution, please be aware that this project is destined to be upstreamed to GCC. This will require copyright assignment, see https://gcc.gnu.org/contribute.html'"}, {"sha": "f7a86ff28da99a15b4295a760838d9b82aa5deb7", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/README.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/README.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/README.md?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -179,6 +179,8 @@ $ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n \n ## Contributing\n \n+If you want to contribute to GCC Rust, you can find more information in [CONTRIBUTING.md](https://github.com/Rust-GCC/gccrs/blob/master/CONTRIBUTING.md).\n+\n Please be aware this project is designed to be pushed upstream to GCC when we reach some milestones, and this means we require\n contributions to have copyright assignment in place. Please see https://gcc.gnu.org/contribute.html.\n "}, {"sha": "306fca0b3c53101d426b2fa1828ce8f8fa7eee85", "filename": "gcc/testsuite/rust.test/unsupported/lifetime_param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Flifetime_param.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Flifetime_param.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Flifetime_param.rs?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,11 @@\n+// { dg-excess-errors \"warnings\" }\n+\n+// { dg-error \"lifetime not defined\" \"#359\" { xfail *-*-* } .+1 }\n+fn lifetime_undefined(t: &'a str) -> &'a str {\n+    t\n+}\n+\n+// { dg-error \"lifetime not defined\" \"#359\" { xfail *-*-* } .+1 }\n+fn lifetime_undefined_bis<'a>(t: &'a str)-> &'b str {\n+    t\n+}"}, {"sha": "48abcbee67c98b9ff91e2179b1f6ee209fb85849", "filename": "gcc/testsuite/rust.test/unsupported/slice1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fslice1.rs?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,3 @@\n+fn foo (e: &str) -> &str {\n+    &\"\" // { dg-bogus \"cannot strip expression in this position - outer attributes not allowed\" \"#391\" { xfail *-*-* } }\n+}"}, {"sha": "a28729e6208fcbf861c60b82ec5c02031a5fee99", "filename": "gcc/testsuite/rust.test/unsupported/struct_field_vis.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fstruct_field_vis.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fstruct_field_vis.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fstruct_field_vis.rs?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,15 @@\n+// { dg-xfail-if \"pub visibility not supported #432\"  *-*-* }\n+\n+mod foomod {\n+    pub struct Foo {\n+        pub f: i32,\n+        pub g: u32,\n+    }\n+}\n+\n+fn test() -> foomod::Foo {\n+    foomod::Foo{\n+        f:1,\n+        g:3,\n+    }\n+}"}, {"sha": "82d19c689b0a9d614aff5fad466926da81317500", "filename": "gcc/testsuite/rust.test/unsupported/unsupported.exp", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Funsupported.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca206dd3bbe8b6063216a466cd9a21fa44af3172/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Funsupported.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Funsupported.exp?ref=ca206dd3bbe8b6063216a466cd9a21fa44af3172", "patch": "@@ -0,0 +1,62 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+\n+# These tests are used to keep track of known limitations :\n+# 1- tests that are incorrecly build instead of being rejected\n+# 2- tests that are build to an incorrect result\n+# 3- tests that are rejected instead of being correctly build\n+#\n+# Not currently supported here:\n+# - tests that are exhibiting incorrect behavior at runtime\n+#\n+# Here's how to annotate tests for each cases:\n+#\n+# 1- test is successfuly build instead of being rejected\n+#\n+# Expected behavior: a specific error rejecting the test\n+# Observed behavior: error not present\n+# Use dg-error and mark the test xfail and add reference to corresponding issue.\n+# { dg-error \"lifetime not defined\" \"#359\" { xfail *-*-* } }\n+#\n+# 2- test is successfuly build but result is incorrect\n+#\n+# Expected behavior: test is correctly build and has specific property\n+# Observed behavior: test is correctly build but is missing the specific property\n+# Depends on the property. For example, if the property can be checked in the assembly file, use dg-final + xfail.\n+# { dg-final { scan-assembler \"given_string_missing_in_assembly_\" \"#1234\" { xfail *-*-* } } }\n+#\n+# 3- test is rejected instead of being correctly build\n+#\n+# Expected behavior: test is successfully build\n+# Observed behavior: the test is rejected with an error\n+# Use dg-bogus + xfail to match the bogus error message, or use dg-xfail-if if it's harder to match a specific error.\n+\n+# Load support procs.\n+load_lib rust-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set saved-dg-do-what-default ${dg-do-what-default}\n+\n+set dg-do-what-default \"compile\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.rs]] \"\" \"\"\n+set dg-do-what-default ${saved-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}]}