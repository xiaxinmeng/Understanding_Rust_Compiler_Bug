{"sha": "1cab645d3e321132dca5e43d9d5057c60852a17c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhYjY0NWQzZTMyMTEzMmRjYTVlNDNkOWQ1MDU3YzYwODUyYTE3Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-23T11:34:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-23T11:34:56Z"}, "message": "re PR tree-optimization/87105 (Autovectorization [X86, SSE2, AVX2, DoublePrecision])\n\n2018-10-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87105\n\tPR tree-optimization/87608\n\t* passes.def (pass_all_early_optimizations): Add early phi-opt\n\tafter dce.\n\t* tree-ssa-phiopt.c (value_replacement): Ignore NOPs and predicts in\n\taddition to debug stmts.\n\t(tree_ssa_phiopt_worker): Add early_p argument, do only min/max\n\tand abs replacement early.\n\t* tree-cfg.c (gimple_empty_block_p): Likewise.\n\n\t* g++.dg/tree-ssa/phiopt-1.C: New testcase.\n\tg++.dg/vect/slp-pr87105.cc: Likewise.\n\t* g++.dg/tree-ssa/pr21463.C: Scan phiopt2 because this testcase\n\trelies on phiprop run before.\n\t* g++.dg/tree-ssa/pr30738.C: Likewise.\n\t* g++.dg/tree-ssa/pr57380.C: Likewise.\n\t* gcc.dg/tree-ssa/pr84859.c: Likewise.\n\t* gcc.dg/tree-ssa/pr45397.c: Scan phiopt2 because phiopt1 is\n\tconfused by copies in the IL left by EVRP.\n\t* gcc.dg/tree-ssa/phi-opt-5.c: Likewise, this time confused\n\tby predictors.\n\t* gcc.dg/tree-ssa/phi-opt-12.c: Scan phiopt2.\n\t* gcc.dg/pr24574.c: Likewise.\n\t* g++.dg/tree-ssa/pr86544.C: Scan phiopt4.\n\nFrom-SVN: r265421", "tree": {"sha": "51747567d200a1864458cc228e3655d135fb351a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51747567d200a1864458cc228e3655d135fb351a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cab645d3e321132dca5e43d9d5057c60852a17c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cab645d3e321132dca5e43d9d5057c60852a17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cab645d3e321132dca5e43d9d5057c60852a17c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cab645d3e321132dca5e43d9d5057c60852a17c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a43314023a15cbcd3e5bf8f3ccbc67bce8ef119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a43314023a15cbcd3e5bf8f3ccbc67bce8ef119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a43314023a15cbcd3e5bf8f3ccbc67bce8ef119"}], "stats": {"total": 401, "additions": 333, "deletions": 68}, "files": [{"sha": "367e60f4c6b05da2058193daf425b73de0c57aae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,3 +1,15 @@\n+2018-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87105\n+\tPR tree-optimization/87608\n+\t* passes.def (pass_all_early_optimizations): Add early phi-opt\n+\tafter dce.\n+\t* tree-ssa-phiopt.c (value_replacement): Ignore NOPs and predicts in\n+\taddition to debug stmts.\n+\t(tree_ssa_phiopt_worker): Add early_p argument, do only min/max\n+\tand abs replacement early.\n+\t* tree-cfg.c (gimple_empty_block_p): Likewise.\n+\n 2018-10-23  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/86383"}, {"sha": "24f212c8e31b3def4948838f87824fd10fa3ca31", "filename": "gcc/passes.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -88,6 +88,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_merge_phi);\n           NEXT_PASS (pass_dse);\n \t  NEXT_PASS (pass_cd_dce);\n+\t  NEXT_PASS (pass_phiopt, true /* early_p */);\n \t  NEXT_PASS (pass_early_ipa_sra);\n \t  NEXT_PASS (pass_tail_recursion);\n \t  NEXT_PASS (pass_convert_switch);\n@@ -208,7 +209,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_tree_ifcombine);\n       NEXT_PASS (pass_merge_phi);\n-      NEXT_PASS (pass_phiopt);\n+      NEXT_PASS (pass_phiopt, false /* early_p */);\n       NEXT_PASS (pass_tail_recursion);\n       NEXT_PASS (pass_ch);\n       NEXT_PASS (pass_lower_complex);\n@@ -237,7 +238,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_reassoc, true /* insert_powi_p */);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_forwprop);\n-      NEXT_PASS (pass_phiopt);\n+      NEXT_PASS (pass_phiopt, false /* early_p */);\n       NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n@@ -328,7 +329,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_dse);\n       NEXT_PASS (pass_cd_dce);\n       NEXT_PASS (pass_forwprop);\n-      NEXT_PASS (pass_phiopt);\n+      NEXT_PASS (pass_phiopt, false /* early_p */);\n       NEXT_PASS (pass_fold_builtins);\n       NEXT_PASS (pass_optimize_widening_mul);\n       NEXT_PASS (pass_store_merging);"}, {"sha": "fe6699e80a92abca029699ff64fee257f23a7a2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,3 +1,22 @@\n+2018-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87105\n+\tPR tree-optimization/87608\n+\t* g++.dg/tree-ssa/phiopt-1.C: New testcase.\n+\tg++.dg/vect/slp-pr87105.cc: Likewise.\n+\t* g++.dg/tree-ssa/pr21463.C: Scan phiopt2 because this testcase\n+\trelies on phiprop run before.\n+\t* g++.dg/tree-ssa/pr30738.C: Likewise.\n+\t* g++.dg/tree-ssa/pr57380.C: Likewise.\n+\t* gcc.dg/tree-ssa/pr84859.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr45397.c: Scan phiopt2 because phiopt1 is\n+\tconfused by copies in the IL left by EVRP.\n+\t* gcc.dg/tree-ssa/phi-opt-5.c: Likewise, this time confused\n+\tby predictors.\n+\t* gcc.dg/tree-ssa/phi-opt-12.c: Scan phiopt2.\n+\t* gcc.dg/pr24574.c: Likewise.\n+\t* g++.dg/tree-ssa/pr86544.C: Scan phiopt4.\n+\n 2018-10-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87700"}, {"sha": "83d976a7ac9fe3b4df1bc153fd7e4929bc85f39d", "filename": "gcc/testsuite/g++.dg/tree-ssa/phiopt-1.C", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fphiopt-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fphiopt-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fphiopt-1.C?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -0,0 +1,94 @@\n+// { dg-do compile }\n+// { dg-options \"-O -fdump-tree-phiopt1\" }\n+\n+#define cond_swap5(a,b);\\\n+    t = *(a);\\\n+    *(a) = (t<*(b))?t:*(b);\\\n+    *(b) = (t<*(b))?*(b):t;\n+\n+template<int n>\n+void static_sort1(int *a){\n+    return;\n+}\n+\n+template<>\n+void static_sort1<32>(int* first){\n+        int t;\n+    static_sort1<16>(first);\n+    static_sort1<16>(first+16);\n+\n+    cond_swap5(first + 0u, first + 16u);\n+    cond_swap5(first + 8u, first + 24u);\n+    cond_swap5(first + 8u, first + 16u);\n+    cond_swap5(first + 4u, first + 20u);\n+    cond_swap5(first + 12u, first + 28u);\n+    cond_swap5(first + 12u, first + 20u);\n+    cond_swap5(first + 4u, first + 8u);\n+    cond_swap5(first + 12u, first + 16u);\n+    cond_swap5(first + 20u, first + 24u);\n+    cond_swap5(first + 2u, first + 18u);\n+    cond_swap5(first + 10u, first + 26u);\n+    cond_swap5(first + 10u, first + 18u);\n+    cond_swap5(first + 6u, first + 22u);\n+    cond_swap5(first + 14u, first + 30u);\n+    cond_swap5(first + 14u, first + 22u);\n+    cond_swap5(first + 6u, first + 10u);\n+    cond_swap5(first + 14u, first + 18u);\n+    cond_swap5(first + 22u, first + 26u);\n+    cond_swap5(first + 2u, first + 4u);\n+    cond_swap5(first + 6u, first + 8u);\n+    cond_swap5(first + 10u, first + 12u);\n+    cond_swap5(first + 14u, first + 16u);\n+    cond_swap5(first + 18u, first + 20u);\n+    cond_swap5(first + 22u, first + 24u);\n+    cond_swap5(first + 26u, first + 28u);\n+    cond_swap5(first + 1u, first + 17u);\n+    cond_swap5(first + 9u, first + 25u);\n+    cond_swap5(first + 9u, first + 17u);\n+    cond_swap5(first + 5u, first + 21u);\n+    cond_swap5(first + 13u, first + 29u);\n+    cond_swap5(first + 13u, first + 21u);\n+    cond_swap5(first + 5u, first + 9u);\n+    cond_swap5(first + 13u, first + 17u);\n+    cond_swap5(first + 21u, first + 25u);\n+    cond_swap5(first + 3u, first + 19u);\n+    cond_swap5(first + 11u, first + 27u);\n+    cond_swap5(first + 11u, first + 19u);\n+    cond_swap5(first + 7u, first + 23u);\n+    cond_swap5(first + 15u, first + 31u);\n+    cond_swap5(first + 15u, first + 23u);\n+    cond_swap5(first + 7u, first + 11u);\n+    cond_swap5(first + 15u, first + 19u);\n+    cond_swap5(first + 23u, first + 27u);\n+    cond_swap5(first + 3u, first + 5u);\n+    cond_swap5(first + 7u, first + 9u);\n+    cond_swap5(first + 11u, first + 13u);\n+    cond_swap5(first + 15u, first + 17u);\n+    cond_swap5(first + 19u, first + 21u);\n+    cond_swap5(first + 23u, first + 25u);\n+    cond_swap5(first + 27u, first + 29u);\n+    cond_swap5(first + 1u, first + 2u);\n+    cond_swap5(first + 3u, first + 4u);\n+    cond_swap5(first + 5u, first + 6u);\n+    cond_swap5(first + 7u, first + 8u);\n+    cond_swap5(first + 9u, first + 10u);\n+    cond_swap5(first + 11u, first + 12u);\n+    cond_swap5(first + 13u, first + 14u);\n+    cond_swap5(first + 15u, first + 16u);\n+    cond_swap5(first + 17u, first + 18u);\n+    cond_swap5(first + 19u, first + 20u);\n+    cond_swap5(first + 21u, first + 22u);\n+    cond_swap5(first + 23u, first + 24u);\n+    cond_swap5(first + 25u, first + 26u);\n+    cond_swap5(first + 27u, first + 28u);\n+    cond_swap5(first + 29u, first + 30u);\n+};\n+\n+void foo(int *a)\n+{\n+  static_sort1<32>(a);\n+}\n+\n+// { dg-final { scan-tree-dump-not \"if \" \"phiopt1\" } }\n+// { dg-final { scan-tree-dump-times \"MIN\" 65 \"phiopt1\" } }\n+// { dg-final { scan-tree-dump-times \"MAX\" 65 \"phiopt1\" } }"}, {"sha": "45d83415648c9d940cdaf46d5d8da1646e216176", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr21463.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr21463.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr21463.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr21463.C?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O -fdump-tree-phiopt2\" } */\n \n template<class T> static inline const T &ref_max(const T &a, const T &b)\n { return a<b ? b : a; }\n@@ -15,5 +15,5 @@ template<class T> struct foo_t {\n \n template struct foo_t<int>;\n \n-/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 2 \"phiopt1\" } } */\n-/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 2 \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 2 \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 2 \"phiopt2\" } } */"}, {"sha": "1c989bde741e8c05fbdf74e109a22954b63bd162", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr30738.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr30738.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr30738.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr30738.C?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O -fdump-tree-phiopt2\" } */\n \n template <class T>\n static inline const T&\n@@ -13,4 +13,4 @@ int test_min_ref (int x, int y)\n   return min_ref (x, y);\n }\n \n-/* { dg-final { scan-tree-dump \"MIN_EXPR\" \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump \"MIN_EXPR\" \"phiopt2\" } } */"}, {"sha": "864129bfa69c12d3a6bd0b8c79d6993190900d52", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr57380.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr57380.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr57380.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr57380.C?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt2\" } */\n /* { dg-add-options bind_pic_locally } */\n \n struct my_array {\n@@ -18,4 +18,4 @@ int f(my_array a, my_array b) {\n     return res;\n }\n \n-/* { dg-final { scan-tree-dump \"MAX_EXPR\" \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump \"MAX_EXPR\" \"phiopt2\" } } */"}, {"sha": "fd844b48deb49341fc81950c91b741cb582f7d7e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr86544.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86544.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86544.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86544.C?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-phiopt3 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt4 -fdump-tree-optimized\" } */\n \n int PopCount (long b) {\n     int c = 0;\n@@ -12,4 +12,4 @@ int PopCount (long b) {\n }\n \n /* { dg-final { scan-tree-dump-times \"__builtin_popcount\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"if\" 0 \"phiopt3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if\" 0 \"phiopt4\" } } */"}, {"sha": "1023d915201cb3e584fec4a4b0dbcd971715447c", "filename": "gcc/testsuite/g++.dg/vect/slp-pr87105.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr87105.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr87105.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr87105.cc?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -0,0 +1,104 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-require-effective-target vect_double }\n+// For MIN/MAX recognition\n+// { dg-additional-options \"-ffast-math -fvect-cost-model\" }\n+\n+#include <algorithm>\n+#include <cmath>\n+#include <stdint.h>\n+\n+// Point structure [x, y]\n+struct Point {\n+  double x, y;\n+\n+  inline Point() noexcept = default;\n+  constexpr Point(const Point&) noexcept = default;\n+\n+  constexpr Point(double x, double y) noexcept\n+    : x(x), y(y) {}\n+};\n+\n+// Box structure [x0, y0, x1, y1]\n+struct Box {\n+  double x0, y0, x1, y1;\n+\n+  inline void reset(double x0, double y0, double x1, double y1) noexcept {\n+    this->x0 = x0;\n+    this->y0 = y0;\n+    this->x1 = x1;\n+    this->y1 = y1;\n+  }\n+};\n+\n+// Overloads to make vector processing simpler.\n+static constexpr Point operator-(const Point& a) noexcept { return Point(-a.x, -a.y); }\n+\n+static constexpr Point operator+(const Point& a, double b) noexcept\n+{ return Point(a.x + b, a.y + b); }\n+static constexpr Point operator-(const Point& a, double b) noexcept\n+{ return Point(a.x - b, a.y - b); }\n+static constexpr Point operator*(const Point& a, double b) noexcept\n+{ return Point(a.x * b, a.y * b); }\n+static constexpr Point operator/(const Point& a, double b) noexcept\n+{ return Point(a.x / b, a.y / b); }\n+\n+static constexpr Point operator+(const Point& a, const Point& b) noexcept\n+{ return Point(a.x + b.x, a.y + b.y); }\n+static constexpr Point operator-(const Point& a, const Point& b) noexcept\n+{ return Point(a.x - b.x, a.y - b.y); }\n+static constexpr Point operator*(const Point& a, const Point& b) noexcept\n+{ return Point(a.x * b.x, a.y * b.y); }\n+static constexpr Point operator/(const Point& a, const Point& b) noexcept\n+{ return Point(a.x / b.x, a.y / b.y); }\n+\n+static constexpr Point operator+(double a, const Point& b) noexcept\n+{ return Point(a + b.x, a + b.y); }\n+static constexpr Point operator-(double a, const Point& b) noexcept\n+{ return Point(a - b.x, a - b.y); }\n+static constexpr Point operator*(double a, const Point& b) noexcept\n+{ return Point(a * b.x, a * b.y); }\n+static constexpr Point operator/(double a, const Point& b) noexcept\n+{ return Point(a / b.x, a / b.y); }\n+\n+// Min/Max - different semantics compared to std.\n+template<typename T> constexpr T myMin(const T& a, const T& b) noexcept\n+{ return b < a ? b : a; }\n+template<typename T> constexpr T myMax(const T& a, const T& b) noexcept\n+{ return a < b ? b : a; }\n+\n+// Linear interpolation, works with points as well.\n+template<typename V, typename T = double>\n+inline V lerp(const V& a, const V& b, const T& t) noexcept {\n+  return (a * (1.0 - t)) + (b * t);\n+}\n+\n+// Merge a point into a box by possibly increasing its bounds.\n+inline void boxMergePoint(Box& box, const Point& p) noexcept {\n+  box.x0 = myMin(box.x0, p.x);\n+  box.y0 = myMin(box.y0, p.y);\n+  box.x1 = myMax(box.x1, p.x);\n+  box.y1 = myMax(box.y1, p.y);\n+}\n+\n+void quadBoundingBoxA(const Point bez[3], Box& bBox) noexcept {\n+  // Bounding box of start and end points.\n+  bBox.reset(myMin(bez[0].x, bez[2].x), myMin(bez[0].y, bez[2].y),\n+             myMax(bez[0].x, bez[2].x), myMax(bez[0].y, bez[2].y));\n+\n+  Point t = (bez[0] - bez[1]) / (bez[0] - bez[1] * 2.0 + bez[2]);\n+\n+  t.x = myMax(t.x, 0.0);\n+  t.y = myMax(t.y, 0.0);\n+  t.x = myMin(t.x, 1.0);\n+  t.y = myMin(t.y, 1.0);\n+\n+  boxMergePoint(bBox, lerp(lerp(bez[0], bez[1], t),\n+                               lerp(bez[1], bez[2], t), t));\n+}\n+\n+// We should have if-converted everything down to straight-line code\n+// { dg-final { scan-tree-dump-times \"<bb \\[0-9\\]+>\" 1 \"slp2\" } }\n+// We fail to elide an earlier store which makes us not handle a later\n+// duplicate one for vectorization.\n+// { dg-final { scan-tree-dump-times \"basic block part vectorized\" 1 \"slp2\" { xfail *-*-* } } }"}, {"sha": "93ce0f68429afda35b45aac86a01bb803b73e117", "filename": "gcc/testsuite/gcc.dg/pr24574.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24574.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O -fdump-tree-phiopt2\" } */\n \n int f0(int i)\n {\n@@ -33,4 +33,4 @@ int f5(int i)\n \n /* We should if-convert all functions to carry out the operation\n    unconditionally.  */\n-/* { dg-final { scan-tree-dump-not \"= PHI\" \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-not \"= PHI\" \"phiopt2\" } } */"}, {"sha": "364ce6a6966a2602f6fa327aa890fb01cc29fdd4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040514-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040514-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040514-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040514-1.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-phiopt1-details\" } */\n+/* { dg-options \"-O1 -fdump-tree-phiopt2-details\" } */\n \n int t( int i)\n {\n@@ -15,4 +15,4 @@ int t( int i)\n }\n \n /* Should have no ifs left after straightening.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"phiopt1\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"phiopt2\"} } */"}, {"sha": "a093c77d9138260d3785f99609b842b009d520df", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040518-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040518-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040518-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040518-1.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-phiopt1-details\" } */\n+/* { dg-options \"-O1 -fdump-tree-phiopt2-details\" } */\n int f(int a, int b)\n {\n    int c = b;\n@@ -9,4 +9,4 @@ int f(int a, int b)\n }\n \n /* Should have no ifs left after straightening.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"phiopt1\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"phiopt2\"} } */"}, {"sha": "a221b762e1dce11496de1eee41d315e45084a7db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-12.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O -fdump-tree-phiopt2\" } */\n \n int f(int a, int b, int c) {\n   if (c > 5) return c;\n@@ -19,4 +19,4 @@ unsigned m(unsigned a, unsigned b) {\n     return a & b;\n }\n \n-/* { dg-final { scan-tree-dump-times \"goto\" 2 \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-times \"goto\" 2 \"phiopt2\" } } */"}, {"sha": "5a00f3ddf8c7410024ad3dd907215684b8da3bc0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-5.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-5.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -ffinite-math-only -fno-signed-zeros -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O1 -ffinite-math-only -fno-signed-zeros -fdump-tree-phiopt\" } */\n \n float repl1 (float varx)\n {\n@@ -16,8 +16,11 @@ float repl1 (float varx)\n    varx_4 = MIN_EXPR <1.0e+0, varx_2>;\n    varx_5 = MAX_EXPR <varx_4, 0.0>;  */  \n \n-/* { dg-final { scan-tree-dump \"varx.*MIN_EXPR.*1\\\\.0\" \"phiopt1\"} } */\n-/* { dg-final { scan-tree-dump \"varx.*MAX_EXPR.*0\\\\.0\" \"phiopt1\"} } */\n+/* phiopt1 confused by predictors.  */\n+/* { dg-final { scan-tree-dump \"varx.*MIN_EXPR.*1\\\\.0\" \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"varx.*MAX_EXPR.*0\\\\.0\" \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"varx.*MIN_EXPR.*1\\\\.0\" \"phiopt2\"} } */\n+/* { dg-final { scan-tree-dump \"varx.*MAX_EXPR.*0\\\\.0\" \"phiopt2\"} } */\n \n float repl2 (float vary)\n {\n@@ -34,8 +37,11 @@ float repl2 (float vary)\n    vary_4 = MAX_EXPR <0.0, vary_2>;\n    vary_5 = MIN_EXPR <vary_4, 1.0e+0>;  */\n \n-/* { dg-final { scan-tree-dump \"vary.*MAX_EXPR.*0\\\\.0\" \"phiopt1\"} } */\n-/* { dg-final { scan-tree-dump \"vary.*MIN_EXPR.*1\\\\.0\" \"phiopt1\"} } */\n+/* phiopt1 confused by predictors.  */\n+/* { dg-final { scan-tree-dump \"vary.*MAX_EXPR.*0\\\\.0\" \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"vary.*MIN_EXPR.*1\\\\.0\" \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"vary.*MAX_EXPR.*0\\\\.0\" \"phiopt2\"} } */\n+/* { dg-final { scan-tree-dump \"vary.*MIN_EXPR.*1\\\\.0\" \"phiopt2\"} } */\n \n float repl3 (float varz, float vara, float varb)\n {\n@@ -54,5 +60,7 @@ float repl3 (float varz, float vara, float varb)\n <L1>:;\n   vara_6 = MAX_EXPR <varb_5, varz_2>;  */\n \n-/* { dg-final { scan-tree-dump \"if .*varz\" \"phiopt1\"} } */\n-/* { dg-final { scan-tree-dump \"vara.*MAX_EXPR\" \"phiopt1\"} } */\n+/* phiopt1 confused by predictors.  */\n+/* { dg-final { scan-tree-dump \"vara.*MAX_EXPR\" \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"if .*varz\" \"phiopt2\"} } */\n+/* { dg-final { scan-tree-dump \"vara.*MAX_EXPR\" \"phiopt2\"} } */"}, {"sha": "a5020c058670eac97326e3061ce1f424cf4e47d0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-6.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O -fdump-tree-phiopt2\" } */\n \n struct C { int i; };\n int *g(struct C *p)\n@@ -9,4 +9,4 @@ int *g(struct C *p)\n   return (int *)0;\n }\n \n-/* { dg-final { scan-tree-dump-not \"if\" \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-not \"if\" \"phiopt2\" } } */"}, {"sha": "98c596b6aa4f6106f9b0bdf20679cd2522a244fc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-8.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O -fdump-tree-optimized -fdump-tree-phiopt2\" } */\n \n int g(int,int);\n int f(int t, int c)\n@@ -19,6 +19,6 @@ int f(int t, int c)\n    but currently is not as PHI-OPT does not reduce the t PHI as we have\n    two phis.  Note this is fixed with\n    http://gcc.gnu.org/ml/gcc-patches/2012-01/msg01195.html .  */\n-/* { dg-final { scan-tree-dump-not \"if\" \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-not \"if\" \"phiopt2\" } } */\n /* { dg-final { scan-tree-dump \"g .t_\\[0-9\\]*.D.,\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump-not \"PHI\" \"optimized\" } } */"}, {"sha": "fd844b48deb49341fc81950c91b741cb582f7d7e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount3.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-phiopt3 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt4 -fdump-tree-optimized\" } */\n \n int PopCount (long b) {\n     int c = 0;\n@@ -12,4 +12,4 @@ int PopCount (long b) {\n }\n \n /* { dg-final { scan-tree-dump-times \"__builtin_popcount\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"if\" 0 \"phiopt3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if\" 0 \"phiopt4\" } } */"}, {"sha": "8eacb5187773b530ea89cfc39c8d1f1e06ef7958", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr45397.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45397.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45397.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45397.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-phiopt1 -fdump-tree-evrp\" } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt -fdump-tree-evrp\" } */\n \n int foo_add (const unsigned char *tmp, int i, int val)\n {\n@@ -18,7 +18,12 @@ int foo_mul (const unsigned char *tmp, int i, int val)\n \n /* All cases should end up using min/max for the saturated operations and\n    have no control flow.  */\n+/* EVRP leaves copies in the IL which confuses phiopt1 so we have\n+   to rely on phiopt2 instead.  */\n /* { dg-final { scan-tree-dump-not \" & 255;\" \"evrp\" } } */\n-/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 3 \"phiopt1\" } } */\n-/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 3 \"phiopt1\" } } */\n-/* { dg-final { scan-tree-dump-not \"if \" \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 3 \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 3 \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-not \"if \" \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 3 \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 3 \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-not \"if \" \"phiopt2\" } } */"}, {"sha": "a2c98866e6c9491e210a128f1e63f1d91d7088cc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84859.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84859.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84859.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84859.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Warray-bounds -fdump-tree-phiopt1\" } */\n+/* { dg-options \"-O2 -Warray-bounds -fdump-tree-phiopt2\" } */\n \n void\n h (const void *p, unsigned n)\n@@ -19,4 +19,4 @@ h (const void *p, unsigned n)\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"MIN_EXPR\" \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump \"MIN_EXPR\" \"phiopt2\" } } */"}, {"sha": "67aac41d49eeb1000da5d9f58696472a3817e926", "filename": "gcc/testsuite/gcc.dg/uninit-15.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -3,14 +3,14 @@\n    line 11, which is very confusing.  Make sure we print out a note to\n    make it less confusing.  (not xfailed alternative)\n    But it is of course ok if we warn in bar about uninitialized use\n-   of j.  (xfailed alternative)  */\n+   of j.  (not xfailed alternative)  */\n /* { dg-do compile } */\n /* { dg-options \"-O1 -Wuninitialized\" } */\n \n inline int\n foo (int i)\n {\n-  if (i) /* { dg-warning \"used uninitialized in this function\" } */\n+  if (i) /* { dg-warning \"used uninitialized in this function\" \"\" } */\n     return 1;\n   return 0;\n }\n@@ -20,7 +20,7 @@ void baz (void);\n void\n bar (void)\n {\n-  int j; /* { dg-message \"note: 'j' was declared here\" } */\n+  int j; /* { dg-message \"note: 'j' was declared here\" \"\" } */\n   for (; foo (j); ++j)  /* { dg-warning \"'j' is used uninitialized\" \"\" { xfail *-*-* } } */\n     baz ();\n }"}, {"sha": "5f334ca792717277b7a62c4f377ad90a921fa8c3", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -6104,11 +6104,19 @@ gimple_empty_block_p (basic_block bb)\n   gimple_stmt_iterator gsi = gsi_after_labels (bb);\n   if (phi_nodes (bb))\n     return false;\n-  if (gsi_end_p (gsi))\n-    return true;\n-  if (is_gimple_debug (gsi_stmt (gsi)))\n-    gsi_next_nondebug (&gsi);\n-  return gsi_end_p (gsi);\n+  while (!gsi_end_p (gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      if (is_gimple_debug (stmt))\n+\t;\n+      else if (gimple_code (stmt) == GIMPLE_NOP\n+\t       || gimple_code (stmt) == GIMPLE_PREDICT)\n+\t;\n+      else\n+\treturn false;\n+      gsi_next (&gsi);\n+    }\n+  return true;\n }\n \n "}, {"sha": "07845101b86d268127e125ca3f69bc07170522d7", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cab645d3e321132dca5e43d9d5057c60852a17c/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=1cab645d3e321132dca5e43d9d5057c60852a17c", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"case-cfn-macros.h\"\n \n-static unsigned int tree_ssa_phiopt_worker (bool, bool);\n+static unsigned int tree_ssa_phiopt_worker (bool, bool, bool);\n static bool conditional_replacement (basic_block, basic_block,\n \t\t\t\t     edge, edge, gphi *, tree, tree);\n static gphi *factor_out_conditional_conversion (edge, edge, gphi *, tree, tree,\n@@ -119,7 +119,7 @@ tree_ssa_cs_elim (void)\n      An interfacing issue of find_data_references_in_bb.  */\n   loop_optimizer_init (LOOPS_NORMAL);\n   scev_initialize ();\n-  todo = tree_ssa_phiopt_worker (true, false);\n+  todo = tree_ssa_phiopt_worker (true, false, false);\n   scev_finalize ();\n   loop_optimizer_finalize ();\n   return todo;\n@@ -159,7 +159,7 @@ single_non_singleton_phi_for_edges (gimple_seq seq, edge e0, edge e1)\n    DO_HOIST_LOADS is true when we want to hoist adjacent loads out\n    of diamond control flow patterns, false otherwise.  */\n static unsigned int\n-tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n+tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads, bool early_p)\n {\n   basic_block bb;\n   basic_block *bb_order;\n@@ -289,18 +289,19 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n \n \t  /* Value replacement can work with more than one PHI\n \t     so try that first. */\n-\t  for (gsi = gsi_start (phis); !gsi_end_p (gsi); gsi_next (&gsi))\n-\t    {\n-\t      phi = as_a <gphi *> (gsi_stmt (gsi));\n-\t      arg0 = gimple_phi_arg_def (phi, e1->dest_idx);\n-\t      arg1 = gimple_phi_arg_def (phi, e2->dest_idx);\n-\t      if (value_replacement (bb, bb1, e1, e2, phi, arg0, arg1) == 2)\n-\t\t{\n-\t\t  candorest = false;\n-\t          cfgchanged = true;\n-\t\t  break;\n-\t\t}\n-\t    }\n+\t  if (!early_p)\n+\t    for (gsi = gsi_start (phis); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t      {\n+\t\tphi = as_a <gphi *> (gsi_stmt (gsi));\n+\t\targ0 = gimple_phi_arg_def (phi, e1->dest_idx);\n+\t\targ1 = gimple_phi_arg_def (phi, e2->dest_idx);\n+\t\tif (value_replacement (bb, bb1, e1, e2, phi, arg0, arg1) == 2)\n+\t\t  {\n+\t\t    candorest = false;\n+\t\t    cfgchanged = true;\n+\t\t    break;\n+\t\t  }\n+\t      }\n \n \t  if (!candorest)\n \t    continue;\n@@ -331,12 +332,14 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n \t    }\n \n \t  /* Do the replacement of conditional if it can be done.  */\n-\t  if (conditional_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n+\t  if (!early_p\n+\t      && conditional_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n \t  else if (abs_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n-\t  else if (cond_removal_in_popcount_pattern (bb, bb1, e1, e2,\n-\t\t\t\t\t\t     phi, arg0, arg1))\n+\t  else if (!early_p\n+\t\t   && cond_removal_in_popcount_pattern (bb, bb1, e1, e2,\n+\t\t\t\t\t\t\tphi, arg0, arg1))\n \t    cfgchanged = true;\n \t  else if (minmax_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n@@ -913,7 +916,9 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n       gsi_next_nondebug (&gsi);\n       if (!is_gimple_assign (stmt))\n \t{\n-\t  emtpy_or_with_defined_p = false;\n+\t  if (gimple_code (stmt) != GIMPLE_PREDICT\n+\t      && gimple_code (stmt) != GIMPLE_NOP)\n+\t    emtpy_or_with_defined_p = false;\n \t  continue;\n \t}\n       /* Now try to adjust arg0 or arg1 according to the computation\n@@ -2794,17 +2799,26 @@ class pass_phiopt : public gimple_opt_pass\n {\n public:\n   pass_phiopt (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_phiopt, ctxt)\n+    : gimple_opt_pass (pass_data_phiopt, ctxt), early_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_phiopt (m_ctxt); }\n+  void set_pass_param (unsigned n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      early_p = param;\n+    }\n   virtual bool gate (function *) { return flag_ssa_phiopt; }\n   virtual unsigned int execute (function *)\n     {\n-      return tree_ssa_phiopt_worker (false, gate_hoist_loads ());\n+      return tree_ssa_phiopt_worker (false,\n+\t\t\t\t     !early_p ? gate_hoist_loads () : false,\n+\t\t\t\t     early_p);\n     }\n \n+private:\n+  bool early_p;\n }; // class pass_phiopt\n \n } // anon namespace"}]}