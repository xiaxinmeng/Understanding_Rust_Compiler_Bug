{"sha": "991f9eb2da3a268b7b08346761fa0078ab55f506", "node_id": "C_kwDOANBUbNoAKDk5MWY5ZWIyZGEzYTI2OGI3YjA4MzQ2NzYxZmEwMDc4YWI1NWY1MDY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T19:36:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T19:36:33Z"}, "message": "c++, abi: Fix up class layout with bitfields [PR109039]\n\nThe following testcase FAILs, because starting with r12-6028\nthe S class has only 2 bytes, not enough to hold one 7-bit bitfield, one 8-bit\nbitfield and one 8-bit char field.\n\nThe reason is that when end_of_class attempts to compute dsize, it simply\nadds byte_position of the field and DECL_SIZE_UNIT (and uses maximum from\nthose offsets).\nThe problematic bit-field in question has bit_position 7, byte_position 0,\nDECL_SIZE 8 and DECL_SIZE_UNIT 1.  So, byte_position + DECL_SIZE_UNIT is\n1, even when the bitfield only has a single bit in the first byte and 7\nfurther bits in the second byte, so per the Itanium ABI it should be 2:\n\"In either case, update dsize(C) to include the last byte\ncontaining (part of) the bit-field, and update sizeof(C) to\nmax(sizeof(C),dsize(C)).\"\n\nThe following patch fixes it by computing bitsize of the end and using\nCEIL_DIV_EXPR division to round it to next byte boundary and convert\nfrom bits to bytes.\n\nWhile this is an ABI change, classes with such incorrect layout couldn't\nhave worked properly, so I doubt anybody is actually running it often\nin the wild.  Thus I think adding some ABI warning for it is unnecessary.\n\n2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109039\n\t* class.cc (end_of_class): For bit-fields, instead of computing\n\toffset as sum of byte_position (field) and DECL_SIZE_UNIT (field),\n\tcompute it as sum of bit_position (field) and DECL_SIZE (field)\n\tdivided by BITS_PER_UNIT rounded up.\n\n\t* g++.dg/abi/no_unique_address7.C: New test.", "tree": {"sha": "49caa3188f03f05545b27178a8304180115f8cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49caa3188f03f05545b27178a8304180115f8cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991f9eb2da3a268b7b08346761fa0078ab55f506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991f9eb2da3a268b7b08346761fa0078ab55f506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991f9eb2da3a268b7b08346761fa0078ab55f506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991f9eb2da3a268b7b08346761fa0078ab55f506/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20d790aa3ea5b0d240032cab997b8e0938cac62c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d790aa3ea5b0d240032cab997b8e0938cac62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d790aa3ea5b0d240032cab997b8e0938cac62c"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "68b62086340bcd1ab357907308b52b64c680b994", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991f9eb2da3a268b7b08346761fa0078ab55f506/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991f9eb2da3a268b7b08346761fa0078ab55f506/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=991f9eb2da3a268b7b08346761fa0078ab55f506", "patch": "@@ -6476,7 +6476,15 @@ end_of_class (tree t, eoc_mode mode)\n \t     size of the type (usually 1) for computing nvsize.  */\n \t  size = TYPE_SIZE_UNIT (TREE_TYPE (field));\n \n-\toffset = size_binop (PLUS_EXPR, byte_position (field), size);\n+\tif (DECL_BIT_FIELD_TYPE (field))\n+\t  {\n+\t    offset = size_binop (PLUS_EXPR, bit_position (field),\n+\t\t\t\t DECL_SIZE (field));\n+\t    offset = size_binop (CEIL_DIV_EXPR, offset, bitsize_unit_node);\n+\t    offset = fold_convert (sizetype, offset);\n+\t  }\n+\telse\n+\t  offset = size_binop (PLUS_EXPR, byte_position (field), size);\n \tif (tree_int_cst_lt (result, offset))\n \t  result = offset;\n       }"}, {"sha": "82fcedf070e774d9d9777da9d1d7b389cbc7fce0", "filename": "gcc/testsuite/g++.dg/abi/no_unique_address7.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991f9eb2da3a268b7b08346761fa0078ab55f506/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fno_unique_address7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991f9eb2da3a268b7b08346761fa0078ab55f506/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fno_unique_address7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fno_unique_address7.C?ref=991f9eb2da3a268b7b08346761fa0078ab55f506", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/109039\n+// { dg-do run { target c++11 } }\n+\n+struct X {\n+  signed short x0 : 7;\n+  signed short x1 : 8;\n+  X () : x0 (1), x1 (2) {}\n+  int get () { return x0 + x1; }\n+};\n+\n+struct S {\n+  [[no_unique_address]] X x;\n+  signed char c;\n+  S () : c (0) {}\n+};\n+\n+S s;\n+\n+int\n+main ()\n+{\n+  if (s.x.x0 != 1 || s.x.x1 != 2 || s.c != 0)\n+    __builtin_abort ();\n+  s.x.x0 = -1;\n+  s.x.x1 = -1;\n+  if (s.x.x0 != -1 || s.x.x1 != -1 || s.c != 0)\n+    __builtin_abort ();\n+  s.c = -1;\n+  s.x.x0 = 0;\n+  s.x.x1 = 0;\n+  if (s.x.x0 != 0 || s.x.x1 != 0 || s.c != -1)\n+    __builtin_abort ();\n+}"}]}