{"sha": "5edab54b6c5de8ae5fca7b4ce08ddcd31948997d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkYWI1NGI2YzVkZThhZTVmY2E3YjRjZTA4ZGRjZDMxOTQ4OTk3ZA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@imgtec.com", "date": "2015-10-23T15:58:33Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2015-10-23T15:58:33Z"}, "message": "re PR rtl-optimization/67736 (Wrong optimization with -fexpensive-optimizations on mips64el)\n\n2015-10-23  Steve Ellcey  <sellcey@imgtec.com>\n\t    Andrew Pinski  <apinski@cavium.com>\n\n\tPR rtl-optimization/67736\n\t* gcc.dg/torture/pr67736.c: New test.\n\t* gcc.dg/combine-subregs.c: New test.\n\nCo-Authored-By: Andrew Pinski <apinski@cavium.com>\n\nFrom-SVN: r229260", "tree": {"sha": "cbce70958f3c8234d21792896415be92a8d1c1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbce70958f3c8234d21792896415be92a8d1c1da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d/comments", "author": null, "committer": null, "parents": [{"sha": "2c40b14dfdde747212f10fcdbd105034f1b738df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c40b14dfdde747212f10fcdbd105034f1b738df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c40b14dfdde747212f10fcdbd105034f1b738df"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "1d214359bcd05866f27a8da45f110e1211e72600", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5edab54b6c5de8ae5fca7b4ce08ddcd31948997d", "patch": "@@ -1,3 +1,10 @@\n+2015-10-23  Steve Ellcey  <sellcey@imgtec.com>\n+\t    Andrew Pinski  <apinski@cavium.com>\n+\n+\tPR rtl-optimization/67736\n+\t* combine.c (simplify_comparison): Use gen_lowpart_or_truncate instead\n+\tof gen_lowpart.\n+\n 2015-10-23  Alan Hayward <alan.hayward@arm.com>\n \n \tPR tree-optimization/65947"}, {"sha": "ccace233cf87ca95be68f0e54885d1302df6ee47", "filename": "gcc/testsuite/gcc.dg/combine-subregs.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d/gcc%2Ftestsuite%2Fgcc.dg%2Fcombine-subregs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d/gcc%2Ftestsuite%2Fgcc.dg%2Fcombine-subregs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcombine-subregs.c?ref=5edab54b6c5de8ae5fca7b4ce08ddcd31948997d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target { stdint_types } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+void __attribute__ ((noinline))\n+foo (uint64_t state, uint32_t last)\n+{\n+  if (state == last) abort ();\n+}\n+\n+/* This function may do a bad comparision by trying to\n+   use SUBREGS during the compare on machines where comparing\n+   two registers always compares the entire register regardless\n+   of mode.  */\n+\n+int __attribute__ ((noinline))\n+compare (uint64_t state, uint32_t *last, uint8_t buf)\n+{\n+    if (*last == ((state | buf) & 0xFFFFFFFF)) {\n+\tfoo (state, *last);\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+int\n+main(int argc, char **argv) {\n+    uint64_t state = 0xF00000100U;\n+    uint32_t last  = 0x101U;\n+    int ret        = compare(state, &last, 0x01);\n+    if (ret != 0)\n+\tabort ();\n+    exit (0);\n+}"}, {"sha": "024bb207ad34247c9cfb5035d4df0cca6dfa624c", "filename": "gcc/testsuite/gcc.dg/torture/pr67736.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67736.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edab54b6c5de8ae5fca7b4ce08ddcd31948997d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67736.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67736.c?ref=5edab54b6c5de8ae5fca7b4ce08ddcd31948997d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target { stdint_types } } } */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+void f(uint64_t *a, uint64_t aa) __attribute__((noinline));\n+void f(uint64_t *a, uint64_t aa)\n+{\n+  uint64_t new_value = aa;\n+  uint64_t old_value = *a;\n+  int bit_size = 32;\n+    uint64_t mask = (uint64_t)(unsigned)(-1);\n+    uint64_t tmp = old_value & mask;\n+    new_value &= mask;\n+    /* On overflow we need to add 1 in the upper bits */\n+    if (tmp > new_value)\n+        new_value += 1ull<<bit_size;\n+    /* Add in the upper bits from the old value */\n+    new_value += old_value & ~mask;\n+    *a = new_value;\n+}\n+int main(void)\n+{\n+  uint64_t value, new_value, old_value;\n+  value = 0x100000001;\n+  old_value = value;\n+  new_value = (value+1)&(uint64_t)(unsigned)(-1);\n+  f(&value, new_value);\n+  if (value != old_value+1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}