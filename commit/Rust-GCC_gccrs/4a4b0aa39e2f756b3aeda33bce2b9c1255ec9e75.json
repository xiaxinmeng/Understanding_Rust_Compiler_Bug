{"sha": "4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0YjBhYTM5ZTJmNzU2YjNhZWRhMzNiY2UyYjljMTI1NWVjOWU3NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-26T01:19:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-26T01:19:44Z"}, "message": "decl.c (ptr_type_node, [...]): New.\n\n        * decl.c (ptr_type_node, va_list_type_node): New.\n        * gxx.gperf (__builtin_va_arg): New.\n        * parse.y (VA_ARG): New token.\n        (unary_expr): Recognize it.\n\nFrom-SVN: r28242", "tree": {"sha": "e590e32aa2285dcef9487b77e28590ec4fa11029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e590e32aa2285dcef9487b77e28590ec4fa11029"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/comments", "author": null, "committer": null, "parents": [{"sha": "88c7af34ac20a250eae0a2e90682b5f879952fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c7af34ac20a250eae0a2e90682b5f879952fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c7af34ac20a250eae0a2e90682b5f879952fc1"}], "stats": {"total": 9473, "additions": 4778, "deletions": 4695}, "files": [{"sha": "b0efd31110fe631cc1468912ffa75afe389fa026", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "patch": "@@ -1,3 +1,10 @@\n+1999-07-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* decl.c (ptr_type_node, va_list_type_node): New.\n+\t* gxx.gperf (__builtin_va_arg): New.\n+\t* parse.y (VA_ARG): New token.\n+\t(unary_expr): Recognize it.\n+\n Sun Jul 25 15:24:21 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* g++FAQ.texi: Deleted per Joe Buck's request."}, {"sha": "21b1143ea10e15470af89c7096e6bba5de329fce", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "patch": "@@ -275,6 +275,12 @@ tree char_type_node;\n tree integer_type_node;\n tree unsigned_type_node;\n \n+/* These can't be part of the above array, since they are declared\n+   individially in tree.h and used by the target routines.  */\n+\n+tree ptr_type_node;\n+tree va_list_type_node;\n+\n /* Indicates that there is a type value in some namespace, although\n    that is not necessarily in scope at the moment.  */\n "}, {"sha": "d18014b2d6bd6925ba5c518d6a386e0c93fb2553", "filename": "gcc/cp/gxx.gperf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fgxx.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fgxx.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxx.gperf?ref=4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "patch": "@@ -9,6 +9,7 @@ __asm, ASM_KEYWORD, RID_UNUSED\n __asm__, ASM_KEYWORD, RID_UNUSED\n __attribute, ATTRIBUTE, RID_UNUSED\n __attribute__, ATTRIBUTE, RID_UNUSED\n+__builtin_va_arg, VA_ARG, RID_UNUSED\n __complex, TYPESPEC, RID_COMPLEX\n __complex__, TYPESPEC, RID_COMPLEX\n __const, CV_QUALIFIER, RID_CONST"}, {"sha": "047243f5e155f486cccb6f17257f50443af9c36e", "filename": "gcc/cp/hash.h", "status": "modified", "additions": 117, "deletions": 107, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fhash.h?ref=4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "patch": "@@ -1,14 +1,14 @@\n-/* C code produced by gperf version 2.7.1 (19981006 egcs) */\n-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../gcc/cp/gxx.gperf  */\n+/* C code produced by gperf version 2.7 */\n+/* Command-line: gperf -L C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../../egcs/gcc/cp/gxx.gperf  */\n /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n struct resword { const char *name; short token; enum rid rid;};\n \n-#define TOTAL_KEYWORDS 106\n+#define TOTAL_KEYWORDS 107\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 16\n #define MIN_HASH_VALUE 4\n-#define MAX_HASH_VALUE 250\n-/* maximum key range = 247, duplicates = 0 */\n+#define MAX_HASH_VALUE 244\n+/* maximum key range = 241, duplicates = 0 */\n \n #ifdef __GNUC__\n __inline\n@@ -20,32 +20,32 @@ hash (str, len)\n {\n   static unsigned char asso_values[] =\n     {\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251,   0, 251,  64,  93,   3,\n-        0,   0,  74,  35,   0,  26, 251,   2,  31,  65,\n-       23,  76,   7,  19,  45,  37,   6,  64,  12,  38,\n-       14,   4, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,\n-      251, 251, 251, 251, 251, 251\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245,   0, 245,  92,   3,   3,\n+        0,   0,  75,  24,   0,  90, 245,  10,  31,  49,\n+       23,  74,   0,  24,  30,  37,   6,  77,  10,  19,\n+        5,   4, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245, 245, 245, 245, 245,\n+      245, 245, 245, 245, 245, 245\n     };\n   register int hval = len;\n \n@@ -83,142 +83,152 @@ is_reserved_word (str, len)\n       {\"delete\", DELETE, RID_UNUSED,},\n       {\"case\", CASE, RID_UNUSED,},\n       {\"__real__\", REALPART, RID_UNUSED},\n-      {\"\", 0, 0},\n+      {\"double\", TYPESPEC, RID_DOUBLE,},\n       {\"true\", CXX_TRUE, RID_UNUSED,},\n       {\"catch\", CATCH, RID_UNUSED,},\n       {\"typeid\", TYPEID, RID_UNUSED,},\n       {\"try\", TRY, RID_UNUSED,},\n-      {\"\", 0, 0}, {\"\", 0, 0},\n       {\"void\", TYPESPEC, RID_VOID,},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n       {\"private\", VISSPEC, RID_PRIVATE,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n       {\"template\", TEMPLATE, RID_TEMPLATE,},\n       {\"protected\", VISSPEC, RID_PROTECTED,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n       {\"extern\", SCSPEC, RID_EXTERN,},\n       {\"\", 0, 0}, {\"\", 0, 0},\n       {\"not\", '!', RID_UNUSED,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"xor_eq\", ASSIGN, RID_UNUSED,},\n       {\"\", 0, 0},\n-      {\"__signed\", TYPESPEC, RID_SIGNED},\n-      {\"int\", TYPESPEC, RID_INT,},\n-      {\"__signed__\", TYPESPEC, RID_SIGNED},\n       {\"__real\", REALPART, RID_UNUSED},\n-      {\"\", 0, 0},\n-      {\"xor_eq\", ASSIGN, RID_UNUSED,},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"__attribute\", ATTRIBUTE, RID_UNUSED},\n-      {\"__asm__\", ASM_KEYWORD, RID_UNUSED},\n-      {\"__attribute__\", ATTRIBUTE, RID_UNUSED},\n+      {\"xor\", '^', RID_UNUSED,},\n       {\"compl\", '~', RID_UNUSED,},\n       {\"public\", VISSPEC, RID_PUBLIC,},\n-      {\"not_eq\", EQCOMPARE, RID_UNUSED,},\n-      {\"switch\", SWITCH, RID_UNUSED,},\n       {\"__extension__\", EXTENSION, RID_UNUSED},\n+      {\"__restrict__\", CV_QUALIFIER, RID_RESTRICT},\n+      {\"\", 0, 0},\n+      {\"__asm__\", ASM_KEYWORD, RID_UNUSED},\n+      {\"new\", NEW, RID_UNUSED,},\n+      {\"__restrict\", CV_QUALIFIER, RID_RESTRICT},\n+      {\"\", 0, 0},\n+      {\"__wchar_t\", TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},\n+      {\"switch\", SWITCH, RID_UNUSED,},\n+      {\"\", 0, 0},\n       {\"const\", CV_QUALIFIER, RID_CONST,},\n       {\"static\", SCSPEC, RID_STATIC,},\n-      {\"\", 0, 0},\n+      {\"not_eq\", EQCOMPARE, RID_UNUSED,},\n       {\"__inline\", SCSPEC, RID_INLINE},\n-      {\"\", 0, 0},\n+      {\"while\", WHILE, RID_UNUSED,},\n       {\"__inline__\", SCSPEC, RID_INLINE},\n-      {\"__restrict__\", CV_QUALIFIER, RID_RESTRICT},\n-      {\"inline\", SCSPEC, RID_INLINE,},\n+      {\"__imag__\", IMAGPART, RID_UNUSED},\n+      {\"\", 0, 0},\n       {\"const_cast\", CONST_CAST, RID_UNUSED,},\n       {\"static_cast\", STATIC_CAST, RID_UNUSED,},\n-      {\"__restrict\", CV_QUALIFIER, RID_RESTRICT},\n-      {\"xor\", '^', RID_UNUSED,},\n-      {\"__wchar_t\", TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},\n-      {\"new\", NEW, RID_UNUSED,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"typename\", TYPENAME_KEYWORD, RID_UNUSED,},\n+      {\"\", 0, 0},\n       {\"__alignof__\", ALIGNOF, RID_UNUSED},\n       {\"signed\", TYPESPEC, RID_SIGNED,},\n-      {\"and\", ANDAND, RID_UNUSED,},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"explicit\", SCSPEC, RID_EXPLICIT,},\n+      {\"char\", TYPESPEC, RID_CHAR,},\n       {\"\", 0, 0},\n-      {\"__imag__\", IMAGPART, RID_UNUSED},\n-      {\"while\", WHILE, RID_UNUSED,},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"bool\", TYPESPEC, RID_BOOL,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n       {\"do\", DO, RID_UNUSED,},\n-      {\"typename\", TYPENAME_KEYWORD, RID_UNUSED,},\n+      {\"\", 0, 0},\n+      {\"short\", TYPESPEC, RID_SHORT,},\n+      {\"__imag\", IMAGPART, RID_UNUSED},\n+      {\"\", 0, 0},\n       {\"friend\", SCSPEC, RID_FRIEND,},\n-      {\"continue\", CONTINUE, RID_UNUSED,},\n       {\"class\", AGGR, RID_CLASS,},\n-      {\"default\", DEFAULT, RID_UNUSED,},\n+      {\"long\", TYPESPEC, RID_LONG,},\n       {\"this\", THIS, RID_UNUSED,},\n-      {\"dynamic_cast\", DYNAMIC_CAST, RID_UNUSED,},\n-      {\"typeof\", TYPEOF, RID_UNUSED,},\n       {\"virtual\", SCSPEC, RID_VIRTUAL,},\n       {\"export\", SCSPEC, RID_EXPORT,},\n-      {\"and_eq\", ASSIGN, RID_UNUSED,},\n+      {\"typeof\", TYPEOF, RID_UNUSED,},\n       {\"__typeof__\", TYPEOF, RID_UNUSED},\n       {\"__const__\", CV_QUALIFIER, RID_CONST},\n       {\"__volatile\", CV_QUALIFIER, RID_VOLATILE},\n-      {\"short\", TYPESPEC, RID_SHORT,},\n+      {\"__asm\", ASM_KEYWORD, RID_UNUSED},\n       {\"__volatile__\", CV_QUALIFIER, RID_VOLATILE},\n       {\"__const\", CV_QUALIFIER, RID_CONST},\n-      {\"namespace\", NAMESPACE, RID_UNUSED,},\n-      {\"char\", TYPESPEC, RID_CHAR,},\n-      {\"unsigned\", TYPESPEC, RID_UNSIGNED,},\n-      {\"double\", TYPESPEC, RID_DOUBLE,},\n+      {\"continue\", CONTINUE, RID_UNUSED,},\n+      {\"and\", ANDAND, RID_UNUSED,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"__signed\", TYPESPEC, RID_SIGNED},\n+      {\"int\", TYPESPEC, RID_INT,},\n+      {\"__signed__\", TYPESPEC, RID_SIGNED},\n+      {\"bitand\", '&', RID_UNUSED,},\n+      {\"enum\", ENUM, RID_UNUSED,},\n       {\"or_eq\", ASSIGN, RID_UNUSED,},\n+      {\"throw\", THROW, RID_UNUSED,},\n+      {\"reinterpret_cast\", REINTERPRET_CAST, RID_UNUSED,},\n+      {\"or\", OROR, RID_UNUSED,},\n+      {\"__attribute\", ATTRIBUTE, RID_UNUSED},\n+      {\"for\", FOR, RID_UNUSED,},\n+      {\"__attribute__\", ATTRIBUTE, RID_UNUSED},\n+      {\"break\", BREAK, RID_UNUSED,},\n+      {\"default\", DEFAULT, RID_UNUSED,},\n+      {\"bitor\", '|', RID_UNUSED,},\n+      {\"dynamic_cast\", DYNAMIC_CAST, RID_UNUSED,},\n       {\"__null\", CONSTANT, RID_NULL},\n-      {\"if\", IF, RID_UNUSED,},\n-      {\"__signature__\", AGGR, RID_SIGNATURE\t/* Extension */,},\n-      {\"__label__\", LABEL, RID_UNUSED},\n-      {\"long\", TYPESPEC, RID_LONG,},\n-      {\"__imag\", IMAGPART, RID_UNUSED},\n-      {\"__asm\", ASM_KEYWORD, RID_UNUSED},\n-      {\"\", 0, 0},\n-      {\"__sigof__\", SIGOF, RID_UNUSED\t\t/* Extension */,},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"struct\", AGGR, RID_RECORD,},\n       {\"\", 0, 0},\n-      {\"volatile\", CV_QUALIFIER, RID_VOLATILE,},\n+      {\"__complex__\", TYPESPEC, RID_COMPLEX},\n       {\"false\", CXX_FALSE, RID_UNUSED,},\n       {\"sizeof\", SIZEOF, RID_UNUSED,},\n-      {\"__complex__\", TYPESPEC, RID_COMPLEX},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"for\", FOR, RID_UNUSED,},\n-      {\"or\", OROR, RID_UNUSED,},\n-      {\"register\", SCSPEC, RID_REGISTER,},\n-      {\"throw\", THROW, RID_UNUSED,},\n+      {\"__complex\", TYPESPEC, RID_COMPLEX},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"and_eq\", ASSIGN, RID_UNUSED,},\n+      {\"__builtin_va_arg\", VA_ARG, RID_UNUSED},\n+      {\"namespace\", NAMESPACE, RID_UNUSED,},\n       {\"\", 0, 0},\n+      {\"struct\", AGGR, RID_RECORD,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n       {\"using\", USING, RID_UNUSED,},\n       {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"__complex\", TYPESPEC, RID_COMPLEX},\n+      {\"__label__\", LABEL, RID_UNUSED},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"explicit\", SCSPEC, RID_EXPLICIT,},\n+      {\"return\", RETURN_KEYWORD, RID_UNUSED,},\n       {\"\", 0, 0},\n+      {\"__alignof\", ALIGNOF, RID_UNUSED},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"volatile\", CV_QUALIFIER, RID_VOLATILE,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n       {\"asm\", ASM_KEYWORD, RID_UNUSED,},\n+      {\"\", 0, 0},\n       {\"signature\", AGGR, RID_SIGNATURE\t/* Extension */,},\n-      {\"enum\", ENUM, RID_UNUSED,},\n-      {\"reinterpret_cast\", REINTERPRET_CAST, RID_UNUSED,},\n-      {\"mutable\", SCSPEC, RID_MUTABLE,},\n-      {\"__alignof\", ALIGNOF, RID_UNUSED},\n-      {\"return\", RETURN_KEYWORD, RID_UNUSED,},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n       {\"\", 0, 0},\n-      {\"float\", TYPESPEC, RID_FLOAT,},\n+      {\"mutable\", SCSPEC, RID_MUTABLE,},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"bool\", TYPESPEC, RID_BOOL,},\n+      {\"register\", SCSPEC, RID_REGISTER,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"__typeof\", TYPEOF, RID_UNUSED},\n       {\"\", 0, 0},\n       {\"typedef\", SCSPEC, RID_TYPEDEF,},\n-      {\"__typeof\", TYPEOF, RID_UNUSED},\n-      {\"bitand\", '&', RID_UNUSED,},\n-      {\"break\", BREAK, RID_UNUSED,},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"if\", IF, RID_UNUSED,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"__sigof__\", SIGOF, RID_UNUSED\t\t/* Extension */,},\n+      {\"unsigned\", TYPESPEC, RID_UNSIGNED,},\n+      {\"goto\", GOTO, RID_UNUSED,},\n+      {\"\", 0, 0},\n+      {\"float\", TYPESPEC, RID_FLOAT,},\n       {\"union\", AGGR, RID_UNION,},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"inline\", SCSPEC, RID_INLINE,},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"goto\", GOTO, RID_UNUSED,},\n       {\"sigof\", SIGOF, RID_UNUSED\t\t/* Extension */,},\n+      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"__signature__\", AGGR, RID_SIGNATURE\t/* Extension */,},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"bitor\", '|', RID_UNUSED,},\n-      {\"auto\", SCSPEC, RID_AUTO,},\n+      {\"\", 0, 0}, {\"\", 0, 0},\n+      {\"operator\", OPERATOR, RID_UNUSED,},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"\", 0, 0}, {\"\", 0, 0},\n-      {\"operator\", OPERATOR, RID_UNUSED,}\n+      {\"auto\", SCSPEC, RID_AUTO,}\n     };\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)"}, {"sha": "a3b4e59d4e252bd10d1f39008d83890640325f59", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 4609, "deletions": 4554, "changes": 9163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75"}, {"sha": "56ec7b4099640787bde948c3516a69e0d63f63aa", "filename": "gcc/cp/parse.h", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.h?ref=4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "patch": "@@ -1,37 +1,38 @@\n typedef union {long itype; tree ttype; char *strtype; enum tree_code code; flagged_type_tree ftype; } YYSTYPE;\n-#define\tIDENTIFIER\t258\n-#define\tTYPENAME\t259\n-#define\tSELFNAME\t260\n-#define\tPFUNCNAME\t261\n-#define\tSCSPEC\t262\n-#define\tTYPESPEC\t263\n-#define\tCV_QUALIFIER\t264\n-#define\tCONSTANT\t265\n-#define\tSTRING\t266\n-#define\tELLIPSIS\t267\n-#define\tSIZEOF\t268\n-#define\tENUM\t269\n-#define\tIF\t270\n-#define\tELSE\t271\n-#define\tWHILE\t272\n-#define\tDO\t273\n-#define\tFOR\t274\n-#define\tSWITCH\t275\n-#define\tCASE\t276\n-#define\tDEFAULT\t277\n-#define\tBREAK\t278\n-#define\tCONTINUE\t279\n-#define\tRETURN_KEYWORD\t280\n-#define\tGOTO\t281\n-#define\tASM_KEYWORD\t282\n-#define\tTYPEOF\t283\n-#define\tALIGNOF\t284\n-#define\tSIGOF\t285\n-#define\tATTRIBUTE\t286\n-#define\tEXTENSION\t287\n-#define\tLABEL\t288\n-#define\tREALPART\t289\n-#define\tIMAGPART\t290\n+#define\tIDENTIFIER\t257\n+#define\tTYPENAME\t258\n+#define\tSELFNAME\t259\n+#define\tPFUNCNAME\t260\n+#define\tSCSPEC\t261\n+#define\tTYPESPEC\t262\n+#define\tCV_QUALIFIER\t263\n+#define\tCONSTANT\t264\n+#define\tSTRING\t265\n+#define\tELLIPSIS\t266\n+#define\tSIZEOF\t267\n+#define\tENUM\t268\n+#define\tIF\t269\n+#define\tELSE\t270\n+#define\tWHILE\t271\n+#define\tDO\t272\n+#define\tFOR\t273\n+#define\tSWITCH\t274\n+#define\tCASE\t275\n+#define\tDEFAULT\t276\n+#define\tBREAK\t277\n+#define\tCONTINUE\t278\n+#define\tRETURN_KEYWORD\t279\n+#define\tGOTO\t280\n+#define\tASM_KEYWORD\t281\n+#define\tTYPEOF\t282\n+#define\tALIGNOF\t283\n+#define\tSIGOF\t284\n+#define\tATTRIBUTE\t285\n+#define\tEXTENSION\t286\n+#define\tLABEL\t287\n+#define\tREALPART\t288\n+#define\tIMAGPART\t289\n+#define\tVA_ARG\t290\n #define\tAGGR\t291\n #define\tVISSPEC\t292\n #define\tDELETE\t293"}, {"sha": "555b9882956c28c0d5c7f41d68223e2d6716d657", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "patch": "@@ -133,7 +133,7 @@ empty_parms ()\n %token BREAK CONTINUE RETURN_KEYWORD GOTO ASM_KEYWORD TYPEOF ALIGNOF\n %token SIGOF\n %token ATTRIBUTE EXTENSION LABEL\n-%token REALPART IMAGPART\n+%token REALPART IMAGPART VA_ARG\n \n /* the reserved words... C++ extensions */\n %token <ttype> AGGR\n@@ -1162,6 +1162,9 @@ unary_expr:\n \t\t{ $$ = build_x_unary_op (REALPART_EXPR, $2); }\n \t| IMAGPART cast_expr %prec UNARY\n \t\t{ $$ = build_x_unary_op (IMAGPART_EXPR, $2); }\n+\t| VA_ARG '(' expr_no_commas ',' type_id ')'\n+\t\t{ $$ = build_va_arg ($3, groktypename ($5.t));\n+\t\t  check_for_new_type (\"__builtin_va_arg\", $5); }\n \t;\n \n         /* Note this rule is not suitable for use in new_placement"}]}