{"sha": "2759b2605e4d287628bce47af67cb27fbcdf2e58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc1OWIyNjA1ZTRkMjg3NjI4YmNlNDdhZjY3Y2IyN2ZiY2RmMmU1OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-03-01T22:14:21Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-03-01T22:14:21Z"}, "message": "XPanelPeer.java (beginLayout, [...]): New methods.\n\n\t* gnu/awt/xlib/XPanelPeer.java (beginLayout, endLayout,\n\tisPaintPending): New methods.\n\t* gnu/awt/xlib/XFramePeer.java (getState, setState,\n\tsetMaximizedBounds): New methods.\n\t(beginLayout, endLayout, isPaintPending): Likewise.\n\t* gnu/awt/xlib/XCanvasPeer.java (isFocusable): New method.\n\t(requestFocus): Likewise.\n\t(isObscured): Likewise.\n\t(canDetermineObscurity): Likewise.\n\t(coalescePaintEvent): Likewise.\n\t(updateCursorImmediately): Likewise.\n\t(createVolatileImage): Likewise.\n\t(handlesWheelScrolling): Likewise.\n\t(createBuffers): Likewise.\n\t(getBackBuffer): Likewise.\n\t(flip): Likewise.\n\t(destroyBuffers): Likewise.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added DropTargetPeer.java,\n\tRobotPeer.java.\n\t* gnu/java/awt/GLightweightPeer.java,\n\tgnu/java/awt/peer/gtk/GtkChoicePeer.java,\n\tgnu/java/awt/peer/gtk/GtkComponentPeer.java,\n\tgnu/java/awt/peer/gtk/GtkContainerPeer.java,\n\tgnu/java/awt/peer/gtk/GtkFramePeer.java,\n\tgnu/java/awt/peer/gtk/GtkPopupMenuPeer.java,\n\tgnu/java/awt/peer/gtk/GtkTextComponentPeer.java,\n\tjava/awt/dnd/peer/DragSourceContextPeer.java,\n\tjava/awt/dnd/peer/DropTargetContextPeer.java,\n\tjava/awt/peer/ButtonPeer.java,\n\tjava/awt/peer/CheckboxMenuItemPeer.java,\n\tjava/awt/peer/CheckboxPeer.java, java/awt/peer/ChoicePeer.java,\n\tjava/awt/peer/ComponentPeer.java,\n\tjava/awt/peer/ContainerPeer.java, java/awt/peer/DialogPeer.java,\n\tjava/awt/peer/FileDialogPeer.java, java/awt/peer/FramePeer.java,\n\tjava/awt/peer/LabelPeer.java, java/awt/peer/ListPeer.java,\n\tjava/awt/peer/MenuBarPeer.java,\n\tjava/awt/peer/MenuComponentPeer.java,\n\tjava/awt/peer/MenuItemPeer.java, java/awt/peer/MenuPeer.java,\n\tjava/awt/peer/PopupMenuPeer.java,\n\tjava/awt/peer/ScrollPanePeer.java,\n\tjava/awt/peer/ScrollbarPeer.java, java/awt/peer/TextAreaPeer.java,\n\tjava/awt/peer/TextComponentPeer.java,\n\tjava/awt/peer/TextFieldPeer.java, java/awt/peer/WindowPeer.java:\n\tNew versions from Classpath.\n\t* java/awt/dnd/peer/DropTargetPeer.java: New file from Classpath.\n\t* java/awt/peer/RobotPeer.java: Likewise.\n\nFrom-SVN: r63627", "tree": {"sha": "0a2283c36b183fa1062ced6bc9c1d645a85e2cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a2283c36b183fa1062ced6bc9c1d645a85e2cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2759b2605e4d287628bce47af67cb27fbcdf2e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2759b2605e4d287628bce47af67cb27fbcdf2e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2759b2605e4d287628bce47af67cb27fbcdf2e58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2759b2605e4d287628bce47af67cb27fbcdf2e58/comments", "author": null, "committer": null, "parents": [{"sha": "11522327310925f7a6547e072e703dd35871ea95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11522327310925f7a6547e072e703dd35871ea95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11522327310925f7a6547e072e703dd35871ea95"}], "stats": {"total": 680, "additions": 547, "deletions": 133}, "files": [{"sha": "f02656db2e27cc123561410d5754b4aa75e5231e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -1,3 +1,54 @@\n+2003-03-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gnu/awt/xlib/XPanelPeer.java (beginLayout, endLayout,\n+\tisPaintPending): New methods.\n+\t* gnu/awt/xlib/XFramePeer.java (getState, setState,\n+\tsetMaximizedBounds): New methods.\n+\t(beginLayout, endLayout, isPaintPending): Likewise.\n+\t* gnu/awt/xlib/XCanvasPeer.java (isFocusable): New method.\n+\t(requestFocus): Likewise.\n+\t(isObscured): Likewise.\n+\t(canDetermineObscurity): Likewise.\n+\t(coalescePaintEvent): Likewise.\n+\t(updateCursorImmediately): Likewise.\n+\t(createVolatileImage): Likewise.\n+\t(handlesWheelScrolling): Likewise.\n+\t(createBuffers): Likewise.\n+\t(getBackBuffer): Likewise.\n+\t(flip): Likewise.\n+\t(destroyBuffers): Likewise.\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (awt_java_source_files): Added DropTargetPeer.java,\n+\tRobotPeer.java.\n+\t* gnu/java/awt/GLightweightPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkChoicePeer.java,\n+\tgnu/java/awt/peer/gtk/GtkComponentPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkContainerPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkFramePeer.java,\n+\tgnu/java/awt/peer/gtk/GtkPopupMenuPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkTextComponentPeer.java,\n+\tjava/awt/dnd/peer/DragSourceContextPeer.java,\n+\tjava/awt/dnd/peer/DropTargetContextPeer.java,\n+\tjava/awt/peer/ButtonPeer.java,\n+\tjava/awt/peer/CheckboxMenuItemPeer.java,\n+\tjava/awt/peer/CheckboxPeer.java, java/awt/peer/ChoicePeer.java,\n+\tjava/awt/peer/ComponentPeer.java,\n+\tjava/awt/peer/ContainerPeer.java, java/awt/peer/DialogPeer.java,\n+\tjava/awt/peer/FileDialogPeer.java, java/awt/peer/FramePeer.java,\n+\tjava/awt/peer/LabelPeer.java, java/awt/peer/ListPeer.java,\n+\tjava/awt/peer/MenuBarPeer.java,\n+\tjava/awt/peer/MenuComponentPeer.java,\n+\tjava/awt/peer/MenuItemPeer.java, java/awt/peer/MenuPeer.java,\n+\tjava/awt/peer/PopupMenuPeer.java,\n+\tjava/awt/peer/ScrollPanePeer.java,\n+\tjava/awt/peer/ScrollbarPeer.java, java/awt/peer/TextAreaPeer.java,\n+\tjava/awt/peer/TextComponentPeer.java,\n+\tjava/awt/peer/TextFieldPeer.java, java/awt/peer/WindowPeer.java:\n+\tNew versions from Classpath.\n+\t* java/awt/dnd/peer/DropTargetPeer.java: New file from Classpath.\n+\t* java/awt/peer/RobotPeer.java: Likewise.\n+\n 2003-03-01  Mark Wielaard  <mark@klomp.org>\n \n \t* java/io/ObjectInputStream.java: Reindent."}, {"sha": "d6054ccbb0b7c3511e0213a77c031aac82d10e6d", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -992,6 +992,7 @@ java/awt/peer/MenuItemPeer.java \\\n java/awt/peer/MenuPeer.java \\\n java/awt/peer/PanelPeer.java \\\n java/awt/peer/PopupMenuPeer.java \\\n+java/awt/peer/RobotPeer.java \\\n java/awt/peer/ScrollPanePeer.java \\\n java/awt/peer/ScrollbarPeer.java \\\n java/awt/peer/TextAreaPeer.java \\\n@@ -1034,6 +1035,7 @@ java/awt/Stroke.java \\\n java/awt/TexturePaint.java \\\n java/awt/dnd/peer/DragSourceContextPeer.java \\\n java/awt/dnd/peer/DropTargetContextPeer.java \\\n+java/awt/dnd/peer/DropTargetPeer.java \\\n java/awt/dnd/DnDConstants.java \\\n java/awt/dnd/DragGestureEvent.java \\\n java/awt/dnd/DragGestureListener.java \\"}, {"sha": "d07f68d31af541aae91d212930bf574743651232", "filename": "libjava/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -803,6 +803,7 @@ java/awt/Stroke.java \\\n java/awt/TexturePaint.java \\\n java/awt/dnd/peer/DragSourceContextPeer.java \\\n java/awt/dnd/peer/DropTargetContextPeer.java \\\n+java/awt/dnd/peer/DropTargetPeer.java \\\n java/awt/dnd/DnDConstants.java \\\n java/awt/dnd/DragGestureEvent.java \\\n java/awt/dnd/DragGestureListener.java \\\n@@ -2598,7 +2599,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -3061,6 +3062,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/dnd/MouseDragGestureRecognizer.P \\\n .deps/java/awt/dnd/peer/DragSourceContextPeer.P \\\n .deps/java/awt/dnd/peer/DropTargetContextPeer.P \\\n+.deps/java/awt/dnd/peer/DropTargetPeer.P \\\n .deps/java/awt/event/AWTEventListener.P \\\n .deps/java/awt/event/AWTEventListenerProxy.P \\\n .deps/java/awt/event/ActionEvent.P \\"}, {"sha": "4c141a4c0d80e1ef06e91c9d32bb11710f8c5ef7", "filename": "libjava/gnu/awt/xlib/XCanvasPeer.java", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2002  Free Software Foundation\n+/* Copyright (C) 2000, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -9,6 +9,7 @@\n package gnu.awt.xlib;\n \n import java.awt.Dimension;\n+import java.awt.BufferCapabilities;\n import java.awt.Component;\n import java.awt.EventQueue;\n import java.awt.Rectangle;\n@@ -411,6 +412,64 @@ public void hide ()\n     setVisible (false);\n   }\n \n+  public boolean isFocusable ()\n+  {\n+    return false;\n+  }\n+\n+  public boolean requestFocus (Component source, boolean b1, \n+                               boolean b2, long x)\n+  {\n+    return false;\n+  }\n+\n+  public boolean isObscured ()\n+  {\n+    return false;\n+  }\n+\n+  public boolean canDetermineObscurity ()\n+  {\n+    return false;\n+  }\n+\n+  public void coalescePaintEvent (PaintEvent e)\n+  {\n+  }\n+\n+  public void updateCursorImmediately ()\n+  {\n+  }\n+\n+  public VolatileImage createVolatileImage (int width, int height)\n+  {\n+    return null;\n+  }\n+\n+  public boolean handlesWheelScrolling ()\n+  {\n+    return false;\n+  }\n+\n+  public void createBuffers (int x, BufferCapabilities capabilities)\n+    throws java.awt.AWTException\n+\n+  {\n+  }\n+\n+  public Image getBackBuffer ()\n+  {\n+    return null;\n+  }\n+\n+  public void flip (BufferCapabilities.FlipContents contents)\n+  {\n+  }\n+\n+  public void destroyBuffers ()\n+  {\n+  }\n+\n   static class DoMap implements Runnable \n   {\n     Window window;"}, {"sha": "ec159078abad9cbd52d8c3c994bb31ee82cce23e", "filename": "libjava/gnu/awt/xlib/XFramePeer.java", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fawt%2Fxlib%2FXFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fawt%2Fxlib%2FXFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXFramePeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2002  Free Software Foundation\n+/* Copyright (C) 2000, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -176,4 +176,21 @@ public void setResizable(boolean resizable)\n       }\n     sizeHints.applyNormalHints(window);\n   }\n+\n+  public int getState ()\n+  {\n+    return 0;\n+  }\n+\n+  public void setState (int state)\n+  {\n+  }\n+\n+  public void setMaximizedBounds (Rectangle r)\n+  {\n+  }\n+\n+  public void beginLayout () { }\n+  public void endLayout () { }\n+  public boolean isPaintPending () { return false; }\n }"}, {"sha": "0b775f872649817e00fdbb45aa1852491f5dc3cb", "filename": "libjava/gnu/awt/xlib/XPanelPeer.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fawt%2Fxlib%2FXPanelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fawt%2Fxlib%2FXPanelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXPanelPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2002  Free Software Foundation\n+/* Copyright (C) 2000, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -54,4 +54,8 @@ public void endValidate()\n   {\n     // NOP\n   }\n+\n+  public void beginLayout () { }\n+  public void endLayout () { }\n+  public boolean isPaintPending () { return false; }\n }"}, {"sha": "cb1aac544f343a9e0eaad2c7c24dfb8728581258", "filename": "libjava/gnu/java/awt/GLightweightPeer.java", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2FGLightweightPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2FGLightweightPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FGLightweightPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -37,6 +37,7 @@\n package gnu.java.awt;\n \n import java.awt.*;\n+import java.awt.event.PaintEvent;\n import java.awt.peer.*;\n import java.awt.image.*;\n \n@@ -111,6 +112,11 @@ public void handleEvent(AWTEvent e) {}\n \n   public void hide() {}\n \n+  public boolean isFocusable() \n+  {\n+    return false;\n+  }\n+\n   public boolean isFocusTraversable()\n   {\n     return false;\n@@ -140,6 +146,8 @@ public void repaint(long tm, int x, int y, int width, int height) {}\n \n   public void requestFocus() {}\n \n+  public boolean requestFocus(java.awt.Component source, boolean bool1, boolean bool2, long x) { return false; }\n+\n   public void reshape(int x, int y, int width, int height) {}\n \n   public void setBackground(Color color) {}\n@@ -164,4 +172,28 @@ public ColorModel getColorModel ()\n   {\n     return null;\n   }\n+\n+  public boolean isObscured() { return false; }\n+\n+  public boolean canDetermineObscurity() { return false; }\n+\n+  public void coalescePaintEvent(PaintEvent e) { }\n+\n+  public void updateCursorImmediately() { }\n+\n+  public VolatileImage createVolatileImage(int width, int height) \n+  { \n+    return null; \n+  }\n+\n+  public boolean handlesWheelScrolling() { return false; }\n+\n+  public void createBuffers(int x, java.awt.BufferCapabilities capabilities) \n+    throws java.awt.AWTException { }\n+\n+  public java.awt.Image getBackBuffer() { return null; }\n+\n+  public void flip(java.awt.BufferCapabilities.FlipContents contents) { }\n+\n+  public void destroyBuffers() { }\n }"}, {"sha": "afa90a56c3f77526bd24e5f7031257c9476c2952", "filename": "libjava/gnu/java/awt/peer/gtk/GtkChoicePeer.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -66,6 +66,8 @@ public GtkChoicePeer (Choice c)\n   native public void add (String item, int index);\n   native public void remove (int index);\n   native public void select (int position);\n+ \n+  public void removeAll () { }\n   \n   public void addItem (String item, int position)\n   {"}, {"sha": "779bc8b5d9602eba684949745aa516522c8d352a", "filename": "libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -394,4 +394,67 @@ public void setEventMask (long mask)\n   {\n     // FIXME: just a stub for now.\n   }\n+\n+  public boolean isFocusable ()\n+  {\n+    return false;\n+  }\n+\n+  public boolean requestFocus (Component source, boolean b1, \n+                               boolean b2, long x)\n+  {\n+    return false;\n+  }\n+\n+  public boolean isObscured ()\n+  {\n+    return false;\n+  }\n+\n+  public boolean canDetermineObscurity ()\n+  {\n+    return false;\n+  }\n+\n+  public void coalescePaintEvent (PaintEvent e)\n+  {\n+    \n+  }\n+\n+  public void updateCursorImmediately ()\n+  {\n+    \n+  }\n+\n+  public VolatileImage createVolatileImage (int width, int height)\n+  {\n+    return null;\n+  }\n+\n+  public boolean handlesWheelScrolling ()\n+  {\n+    return false;\n+  }\n+\n+  public void createBuffers (int x, BufferCapabilities capabilities)\n+    throws java.awt.AWTException\n+\n+  {\n+    \n+  }\n+\n+  public Image getBackBuffer ()\n+  {\n+    return null;\n+  }\n+\n+  public void flip (BufferCapabilities.FlipContents contents)\n+  {\n+    \n+  }\n+\n+  public void destroyBuffers ()\n+  {\n+    \n+  }\n }"}, {"sha": "caf5dc37943c112c6c41bfb62a1d6eefdbac0654", "filename": "libjava/gnu/java/awt/peer/gtk/GtkContainerPeer.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkContainerPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -122,4 +122,8 @@ public void handleEvent (AWTEvent event)\n \tbreak;\n       }\n   }\n+\n+  public void beginLayout () { }\n+  public void endLayout () { }\n+  public boolean isPaintPending () { return false; }\n }"}, {"sha": "6c6802d20ee10c89df49be58d86467d3f5c5ba34", "filename": "libjava/gnu/java/awt/peer/gtk/GtkFramePeer.java", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -127,6 +127,21 @@ protected void postExposeEvent (int x, int y, int width, int height)\n \t\t\t\t\t\ty + insets.top, \n \t\t\t\t\t\twidth, height)));\n   }\n+\n+  public int getState ()\n+  {\n+    return 0;\n+  }\n+\n+  public void setState (int state)\n+  {\n+\n+  }\n+\n+  public void setMaximizedBounds (Rectangle r)\n+  {\n+\n+  }\n }\n \n "}, {"sha": "e29d749c791ce221e656c58d8e0178bb53ed5664", "filename": "libjava/gnu/java/awt/peer/gtk/GtkPopupMenuPeer.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPopupMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPopupMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPopupMenuPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -62,4 +62,9 @@ public void show (Component origin, int x, int y)\n     Point abs = origin.getLocationOnScreen ();\n     show (abs.x + x, abs.y + y, 0);\n   }\n+  \n+  public void show (Event e)\n+  {\n+\n+  }\n }"}, {"sha": "d9ebd40aa72afcc4934edca5b71731980c3fa309", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextComponentPeer.java", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -76,4 +76,19 @@ public void getArgs (Component component, GtkArgList args)\n     args.add (\"text_position\", tc.getCaretPosition ());\n     args.add (\"editable\", tc.isEditable ());\n   }\n+\n+  public int getIndexAtPoint(int x, int y)\n+  {\n+    return 0;  // FIXME\n+  }\n+\n+  public Rectangle getCharacterBounds (int pos)\n+  {\n+    return null;\n+  }\n+\n+  public long filterEvents (long filter)\n+  {\n+    return filter;  // FIXME\n+  }\n }"}, {"sha": "971882d7b5a53a2746ab75c967b43fad065ca31a", "filename": "libjava/java/awt/dnd/peer/DragSourceContextPeer.java", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDragSourceContextPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDragSourceContextPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDragSourceContextPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,14 +42,16 @@\n import java.awt.Image;\n import java.awt.Point;\n import java.awt.dnd.DragSourceContext;\n+import java.awt.dnd.InvalidDnDOperationException;\n \n /**\n  * STUBBED\n  */\n public interface DragSourceContextPeer\n {\n-  void startDrag(DragSourceContext context, Cursor c, Image i, Point p);\n-  Cursor getCursor();\n-  void setCursor(Cursor c);\n-  void transferablesFlavorsChanged();\n+  public void startDrag(DragSourceContext context, Cursor c, Image i, Point p)\n+    throws InvalidDnDOperationException;\n+  public Cursor getCursor();\n+  public void setCursor(Cursor c) throws InvalidDnDOperationException;\n+  public void transferablesFlavorsChanged();\n } // interface DragSourceContextPeer"}, {"sha": "36b303f25de93c3179cfe70c3a56430dd101e528", "filename": "libjava/java/awt/dnd/peer/DropTargetContextPeer.java", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -37,9 +37,31 @@\n \n package java.awt.dnd.peer;\n \n+import java.awt.dnd.DropTarget;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.InvalidDnDOperationException;\n+\n+\n /**\n+ * Used to control state of recipient protocol from the \n+ * <code>DropTargetListener</code>.  Occurs when a <code>Component</code>\n+ * with an associated <code>DropTarget</code> and visible geometry is first \n+ * intersected by a logical cursor.\n+ * \n  * @author Michael Koch <konqueror@gmx.de>\n  */\n public interface DropTargetContextPeer\n {\n-} // interface DropTargetContextPeer\n+  public void setTargetActions(int actions);\n+  public int getTargetActions();\n+  public DropTarget getDropTarget();\n+  public DataFlavor[] getTransferDataFlavors();\n+  public Transferable getTransferable() throws InvalidDnDOperationException;\n+  public boolean isTransferableJVMLocal();\n+  public void acceptDrag(int dragAction);\n+  public void rejectDrag();\n+  public void acceptDrop(int dropAction);\n+  public void rejectDrop();\n+  public void dropComplete(boolean success);\n+}"}, {"sha": "5666bdc4b09409f14af711c79770b2f92cf27a4d", "filename": "libjava/java/awt/dnd/peer/DropTargetPeer.java", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -0,0 +1,48 @@\n+/* DropTargetPeer.java -- interface for drag-and-drop peers\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd.peer;\n+\n+import java.awt.dnd.DropTarget;\n+\n+/**\n+ */\n+public interface DropTargetPeer\n+{\n+  public void addDropTarget (DropTarget target);\n+  public void removeDropTarget (DropTarget target);\n+} // interface DropTargetContextPeer"}, {"sha": "2824839bb74f623ba30a30ecc10bfc9bdd007864", "filename": "libjava/java/awt/peer/ButtonPeer.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,8 +40,6 @@\n \n public interface ButtonPeer extends ComponentPeer\n {\n-\n-public abstract void setLabel(String label);\n-\n+  public void setLabel(String label);\n } // interface ButtonPeer\n "}, {"sha": "b150a8bf7b6c30b80634155c4abdc431e2b215fe", "filename": "libjava/java/awt/peer/CheckboxMenuItemPeer.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,8 +40,6 @@\n \n public interface CheckboxMenuItemPeer extends MenuItemPeer\n {\n-\n-public abstract void setState(boolean state);\n-\n+  public void setState(boolean state);\n } // interface CheckboxMenuItemPeer\n "}, {"sha": "4ffd79cfefce5d596191bace99c3e3be304d1691", "filename": "libjava/java/awt/peer/CheckboxPeer.java", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,10 +40,8 @@\n \n public interface CheckboxPeer extends ComponentPeer\n {\n-\n-public abstract void setCheckboxGroup(java.awt.CheckboxGroup group);\n-public abstract void setLabel(String label);\n-public abstract void setState(boolean state);\n-\n+  public void setCheckboxGroup(java.awt.CheckboxGroup group);\n+  public void setLabel(String label);\n+  public void setState(boolean state);\n } // interface CheckboxPeer\n "}, {"sha": "228311cc55156265f3ca237b56ba451ae06d9c01", "filename": "libjava/java/awt/peer/ChoicePeer.java", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,11 +40,10 @@\n \n public interface ChoicePeer extends ComponentPeer\n {\n-\n-public abstract void add(String item, int index);\n-public abstract void addItem(String item, int index);\n-public abstract void remove(int index);\n-public abstract void select(int index);\n-\n+  public void add(String item, int index);\n+  public void addItem(String item, int index);\n+  public void remove(int index);\n+  public void removeAll();\n+  public void select(int index);  \n } // interface ChoicePeer \n "}, {"sha": "e6f79d1d116f3730559d3512a50716d614ffc563", "filename": "libjava/java/awt/peer/ComponentPeer.java", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -39,6 +39,7 @@\n package java.awt.peer;\n \n import java.awt.*;\n+import java.awt.event.PaintEvent;\n import java.awt.image.*;\n \n public interface ComponentPeer\n@@ -57,23 +58,38 @@ public int checkImage(Image img, int width, int height,\n   public Dimension getMinimumSize();\n   public Dimension getPreferredSize();\n   public Toolkit getToolkit();\n-  // The JCL says that handleEvent returns boolean.  However, we've\n-  // experimentally determined that it in fact actually returns void.\n   public void handleEvent(AWTEvent e);\n   public void hide();\n+\n+  /**\n+   * Part of the earlier 1.1 API, replaced by isFocusable().\n+   */\n   public boolean isFocusTraversable();\n+  public boolean isFocusable();\n   public Dimension minimumSize();\n   public Dimension preferredSize();\n   public void paint(Graphics graphics);\n   public boolean prepareImage(Image img, int width, int height,\n-\t\t\t\t       ImageObserver ob);\n+\t\t\t      ImageObserver ob);\n   public void print(Graphics graphics);\n   public void repaint(long tm, int x, int y, int width, int height);\n+\n+  /**\n+   * Part of the earlier 1.1 API, apparently replaced by argument \n+   * form of the same method.\n+   */\n   public void requestFocus();\n+  public boolean requestFocus(java.awt.Component source, boolean bool1, boolean bool2, long x);\n+\n   public void reshape(int x, int y, int width, int height);\n   public void setBackground(Color color);\n   public void setBounds(int x, int y, int width, int height);\n+\n+  /**\n+   * Part of the earlier 1.1 API, apparently no longer needed.\n+   */\n   public void setCursor(Cursor cursor);\n+\n   public void setEnabled(boolean enabled);\n   public void setFont(Font font);\n   public void setForeground(Color color);\n@@ -84,7 +100,23 @@ public boolean prepareImage(Image img, int width, int height,\n    * Get the graphics configuration of the component. The color model\n    * of the component can be derived from the configuration.\n    */\n-  GraphicsConfiguration getGraphicsConfiguration();\n+  public GraphicsConfiguration getGraphicsConfiguration();\n \n+  /**\n+   * Part of an older API, no longer needed.\n+   */\n   public void setEventMask (long mask);\n+\n+  // Methods below are introduced since 1.1\n+  public boolean isObscured();\n+  public boolean canDetermineObscurity();\n+  public void coalescePaintEvent(PaintEvent e);\n+  public void updateCursorImmediately();\n+  public VolatileImage createVolatileImage(int width, int height);\n+  public boolean handlesWheelScrolling();\n+  public void createBuffers(int x, java.awt.BufferCapabilities capabilities) throws java.awt.AWTException;\n+  public java.awt.Image getBackBuffer();\n+  public void flip(java.awt.BufferCapabilities.FlipContents contents);\n+  public void destroyBuffers();\n+  \n }"}, {"sha": "b691b897158ef05ca4c563dc0629143ddac549fb", "filename": "libjava/java/awt/peer/ContainerPeer.java", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -41,9 +41,12 @@\n \n public interface ContainerPeer extends ComponentPeer\n {\n-  public abstract Insets insets();\n-  public abstract Insets getInsets();\n-  public abstract void beginValidate();\n-  public abstract void endValidate();\n+  public Insets insets();\n+  public Insets getInsets();\n+  public void beginValidate();\n+  public void endValidate();\n+  public void beginLayout();\n+  public void endLayout();\n+  public boolean isPaintPending();\n } // interface ContainerPeer \n "}, {"sha": "b97798ea1ac1f5d2329af529be500edc0786646b", "filename": "libjava/java/awt/peer/DialogPeer.java", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,9 +40,7 @@\n \n public interface DialogPeer extends WindowPeer\n {\n-\n-public abstract void setResizable(boolean resizeable);\n-public abstract void setTitle(String title);\n-\n+  public void setResizable(boolean resizeable);\n+  public void setTitle(String title);\n } // interface DialogPeer \n "}, {"sha": "49fa01f266a56eca66272dbda178c761c22be706", "filename": "libjava/java/awt/peer/FileDialogPeer.java", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,10 +42,8 @@\n \n public interface FileDialogPeer extends DialogPeer\n {\n-\n-public abstract void setFile(String file);\n-public abstract void setDirectory(String dir);\n-public abstract void setFilenameFilter(FilenameFilter ff);\n-\n+  public void setFile(String file);\n+  public void setDirectory(String dir);\n+  public void setFilenameFilter(FilenameFilter ff);\n } // interface FileDialogPeer \n "}, {"sha": "c354275a7eb6ad3c86f5135a7b6882f00b1af889", "filename": "libjava/java/awt/peer/FramePeer.java", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,14 +40,16 @@\n \n import java.awt.Image;\n import java.awt.MenuBar;\n+import java.awt.Rectangle;\n \n public interface FramePeer extends WindowPeer\n {\n-\n-public abstract void setIconImage(Image image);\n-public abstract void setMenuBar(MenuBar mb);\n-public abstract void setResizable(boolean resizable);\n-public abstract void setTitle(String title);\n-\n+  public void setIconImage(Image image);\n+  public void setMenuBar(MenuBar mb);\n+  public void setResizable(boolean resizable);\n+  public void setTitle(String title);\n+  public int getState();\n+  public void setState(int state);\n+  public void setMaximizedBounds(Rectangle r);\n } // interface FramePeer\n "}, {"sha": "5eefcd02d3b96aea8e276b696b73fcafadab3158", "filename": "libjava/java/awt/peer/LabelPeer.java", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,9 +40,7 @@\n \n public interface LabelPeer extends ComponentPeer\n {\n-\n-public abstract void setAlignment(int alignment);\n-public abstract void setText(String text);\n-\n+  public void setAlignment(int alignment);\n+  public void setText(String text);\n } // interface LabelPeer \n "}, {"sha": "1ba86ae6ee3408b24d4f3090812f754523b4d719", "filename": "libjava/java/awt/peer/ListPeer.java", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,20 +42,21 @@\n \n public interface ListPeer extends ComponentPeer\n {\n-\n-public abstract void add(String item, int index);\n-public abstract void addItem(String item, int index);\n-public abstract void clear();\n-public abstract void delItems(int start_index, int end_index);\n-public abstract void deselect(int index);\n-public abstract int[] getSelectedIndexes();\n-public abstract void makeVisible(int index);\n-public abstract Dimension minimumSize(int s);\n-public abstract Dimension preferredSize(int s);\n-public abstract void removeAll();\n-public abstract void select(int index);\n-public abstract void setMultipleMode(boolean multi);\n-public abstract void setMultipleSelections(boolean multi);\n-\n+  \n+  public void add(String item, int index);\n+  public void addItem(String item, int index);\n+  public void clear();\n+  public void delItems(int start_index, int end_index);\n+  public void deselect(int index);\n+  public int[] getSelectedIndexes();\n+  public void makeVisible(int index);\n+  public Dimension minimumSize(int s);\n+  public Dimension preferredSize(int s);\n+  public void removeAll();\n+  public void select(int index);\n+  public void setMultipleMode(boolean multi);\n+  public void setMultipleSelections(boolean multi);\n+  public Dimension getPreferredSize(int s);\n+  public Dimension getMinimumSize(int s);\n } // interface ListPeer \n "}, {"sha": "de6e5bc4418b1ca564baa78451d1603856dd2dfc", "filename": "libjava/java/awt/peer/MenuBarPeer.java", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,10 +42,8 @@\n \n public interface MenuBarPeer extends MenuComponentPeer\n {\n-\n-public abstract void addHelpMenu(Menu menu);\n-public abstract void addMenu(Menu menu);\n-public abstract void delMenu(int index);\n-\n+  public void addHelpMenu(Menu menu);\n+  public void addMenu(Menu menu);\n+  public void delMenu(int index);\n } // interface MenuBarPeer \n "}, {"sha": "5db9e71f75550188f6fe35e75232bacf8db4479f", "filename": "libjava/java/awt/peer/MenuComponentPeer.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,8 +40,6 @@\n \n public interface MenuComponentPeer\n {\n-\n-public abstract void dispose();\n-\n+  public void dispose();\n } // interface MenuComponentPeer\n "}, {"sha": "7038f93017e3c1124981e7845f2cd894cb0f60a3", "filename": "libjava/java/awt/peer/MenuItemPeer.java", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,11 +40,9 @@\n \n public interface MenuItemPeer extends MenuComponentPeer\n {\n-\n-public abstract void disable();\n-public abstract void enable();\n-public abstract void setEnabled(boolean enabled);\n-public abstract void setLabel(String text);\n-\n+  public void disable();\n+  public void enable();\n+  public void setEnabled(boolean enabled);\n+  public void setLabel(String text);\n } // interface MenuItemPeer \n "}, {"sha": "ee8a9005e3105bc611b568763f573b293ce37498", "filename": "libjava/java/awt/peer/MenuPeer.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,8 +42,8 @@\n \n public interface MenuPeer extends MenuItemPeer\n {\n-  public abstract void addItem (MenuItem item);\n-  public abstract void addSeparator ();\n-  public abstract void delItem (int index);\n+  public void addItem (MenuItem item);\n+  public void addSeparator ();\n+  public void delItem (int index);\n }\n "}, {"sha": "46278da2e914afcf90f54051f3d7fa55d9b88685", "filename": "libjava/java/awt/peer/PopupMenuPeer.java", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -39,10 +39,15 @@\n package java.awt.peer;\n \n import java.awt.Component;\n+import java.awt.Event;\n+\n public interface PopupMenuPeer extends MenuPeer\n {\n-\n-public abstract void show (Component origin, int x, int y);\n-\n+  \n+  /**\n+   * Part of the older API, replaced by event version instead.\n+   */\n+  public void show (Component origin, int x, int y);\n+  public void show (Event e);\n } // interface PopupMenuPeer\n "}, {"sha": "ee9034724a8910c1b06a740fc4846fc55f46c097", "filename": "libjava/java/awt/peer/RobotPeer.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FRobotPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FRobotPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FRobotPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -0,0 +1,54 @@\n+/* RobotPeer.java -- Interface for programatically driving GUI\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.peer;\n+\n+import java.awt.Rectangle;\n+\n+public interface RobotPeer\n+{\n+  public void mouseMove (int x, int y);\n+  public void mousePress (int x);\n+  public void mouseRelease (int x);\n+  public void mouseWheel (int x);\n+  public void keyPress (int x);\n+  public void keyRelease (int x);\n+  public int getRGBPixel (int x, int y);\n+  public int[] getRGBPixels (Rectangle r);\n+} // interface RobotPeer\n+"}, {"sha": "411f443daf16aec7fc373f9fa020311185b81550", "filename": "libjava/java/awt/peer/ScrollPanePeer.java", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,13 +42,11 @@\n \n public interface ScrollPanePeer extends ContainerPeer\n {\n-\n-public abstract int getHScrollbarHeight();\n-public abstract int getVScrollbarWidth();\n-public abstract void setScrollPosition(int h, int v);\n-public abstract void childResized(int width, int height);\n-public abstract void setUnitIncrement(Adjustable item, int inc);\n-public abstract void setValue(Adjustable item, int value);\n-\n+  public int getHScrollbarHeight();\n+  public int getVScrollbarWidth();\n+  public void setScrollPosition(int h, int v);\n+  public void childResized(int width, int height);\n+  public void setUnitIncrement(Adjustable item, int inc);\n+  public void setValue(Adjustable item, int value);\n } // interface ScollPanePeer\n "}, {"sha": "c81eaa94065625435246233a3c6aebca19176634", "filename": "libjava/java/awt/peer/ScrollbarPeer.java", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,10 +40,8 @@\n \n public interface ScrollbarPeer extends ComponentPeer\n {\n-\n-public abstract void setLineIncrement(int inc);\n-public abstract void setPageIncrement(int inc);\n-public abstract void setValues(int value, int visible, int min, int max);\n-\n+  public void setLineIncrement(int inc);\n+  public void setPageIncrement(int inc);\n+  public void setValues(int value, int visible, int min, int max);\n } // interface ScrollbarPeer \n "}, {"sha": "425c70fadd8c29158c1458809a188c5386253197", "filename": "libjava/java/awt/peer/TextAreaPeer.java", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,14 +42,12 @@\n \n public interface TextAreaPeer extends TextComponentPeer\n {\n-\n-public abstract void insert(String text, int pos);\n-public abstract void insertText(String text, int pos);\n-public abstract Dimension minimumSize(int rows, int cols);\n-public abstract Dimension getMinimumSize(int rows, int cols);\n-public abstract Dimension preferredSize(int rows, int cols);\n-public abstract Dimension getPreferredSize(int rows, int cols);\n-public abstract void replaceRange(String text, int start_pos, int end_pos);\n-public abstract void replaceText(String text, int start_pos, int end_pos);\n-\n+  public void insert(String text, int pos);\n+  public void insertText(String text, int pos);\n+  public Dimension minimumSize(int rows, int cols);\n+  public Dimension getMinimumSize(int rows, int cols);\n+  public Dimension preferredSize(int rows, int cols);\n+  public Dimension getPreferredSize(int rows, int cols);\n+  public void replaceRange(String text, int start_pos, int end_pos);\n+  public void replaceText(String text, int start_pos, int end_pos);\n } // interface TextAreaPeer"}, {"sha": "1dd2e44e80c0ee4cc16377f9953fec91c720c2fa", "filename": "libjava/java/awt/peer/TextComponentPeer.java", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -38,17 +38,20 @@\n \n package java.awt.peer;\n \n+import java.awt.Rectangle;\n+\n public interface TextComponentPeer extends ComponentPeer\n {\n-\n-public abstract int getSelectionEnd();\n-public abstract int getSelectionStart();\n-public abstract String getText();\n-public abstract void setText(String text);\n-public abstract void select(int start_pos, int end_pos);\n-public abstract void setEditable(boolean editable);\n-public abstract int getCaretPosition();\n-public abstract void setCaretPosition(int pos);\n-\n+  public int getSelectionEnd();\n+  public int getSelectionStart();\n+  public String getText();\n+  public void setText(String text);\n+  public void select(int start_pos, int end_pos);\n+  public void setEditable(boolean editable);\n+  public int getCaretPosition();\n+  public void setCaretPosition(int pos);\n+  public int getIndexAtPoint(int x, int y);\n+  public Rectangle getCharacterBounds(int pos);\n+  public long filterEvents(long filter);\n } // interface TextComponentPeer \n "}, {"sha": "302e3a6cf52a94f0099f0dfa9a8aa8c68cdf65c5", "filename": "libjava/java/awt/peer/TextFieldPeer.java", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -42,13 +42,11 @@\n \n public interface TextFieldPeer extends TextComponentPeer\n {\n-\n-public abstract Dimension minimumSize(int len);\n-public abstract Dimension preferredSize(int len);\n-public abstract Dimension getMinimumSize(int len);\n-public abstract Dimension getPreferredSize(int len);\n-public abstract void setEchoChar(char echo_char);\n-public abstract void setEchoCharacter(char echo_char);\n-\n+  public Dimension minimumSize(int len);\n+  public Dimension preferredSize(int len);\n+  public Dimension getMinimumSize(int len);\n+  public Dimension getPreferredSize(int len);\n+  public void setEchoChar(char echo_char);\n+  public void setEchoCharacter(char echo_char);  \n } // interface TextFieldPeer \n "}, {"sha": "aa0004e1087b7682e4b099c2c6c7c38972cd8a89", "filename": "libjava/java/awt/peer/WindowPeer.java", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2759b2605e4d287628bce47af67cb27fbcdf2e58/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java?ref=2759b2605e4d287628bce47af67cb27fbcdf2e58", "patch": "@@ -40,9 +40,7 @@\n \n public interface WindowPeer extends ContainerPeer\n {\n-\n-public abstract void toBack();\n-public abstract void toFront();\n-\n+  public void toBack();\n+  public void toFront();\n } // interface WindowPeer \n "}]}