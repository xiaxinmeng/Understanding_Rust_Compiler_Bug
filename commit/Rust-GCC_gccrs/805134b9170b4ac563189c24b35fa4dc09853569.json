{"sha": "805134b9170b4ac563189c24b35fa4dc09853569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA1MTM0YjkxNzBiNGFjNTYzMTg5YzI0YjM1ZmE0ZGMwOTg1MzU2OQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-08-01T08:29:29Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-08-01T08:29:29Z"}, "message": "Allow non-overflow ops in reductions\n\n2015-08-01  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree.c (operation_can_overflow, operation_no_trapping_overflow): New\n\tfunction.\n\t* tree.h (operation_can_overflow, operation_no_trapping_overflow):\n\tDeclare.\n\t* tree-vect-loop.c (vect_is_simple_reduction_1): Use\n\toperation_no_trapping_overflow.  Allow non-overflow operations.\n\t* graphite-sese-to-poly.c (is_reduction_operation_p): Allow non-overflow\n\toperations.\n\n\t* gcc.dg/autopar/reduc-2char.c (init_arrays): Mark with attribute\n\toptimize (\"-ftree-parallelize-loops=0\").\n\tAdd successful scans for 2 detected reductions.\t Add xfail scans for 3\n\tdetected reductions.\n\t* gcc.dg/autopar/reduc-2short.c: Same.\n\t* gcc.dg/autopar/reduc-8.c (init_arrays): Mark with attribute\n\toptimize (\"-ftree-parallelize-loops=0\").  Add successful scans for 2\n\tdetected reductions.\n\t* gcc.dg/vect/trapv-vect-reduc-4.c: Update scan to match vectorized min\n\tand max reductions.\n\nFrom-SVN: r226463", "tree": {"sha": "0353ecb04dbb4fcc695e28eb9c4d13e340815664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0353ecb04dbb4fcc695e28eb9c4d13e340815664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/805134b9170b4ac563189c24b35fa4dc09853569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805134b9170b4ac563189c24b35fa4dc09853569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805134b9170b4ac563189c24b35fa4dc09853569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805134b9170b4ac563189c24b35fa4dc09853569/comments", "author": null, "committer": null, "parents": [{"sha": "faf4ac3218fdf7d316d7bd8da121029ba60f0099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf4ac3218fdf7d316d7bd8da121029ba60f0099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf4ac3218fdf7d316d7bd8da121029ba60f0099"}], "stats": {"total": 137, "additions": 122, "deletions": 15}, "files": [{"sha": "53b44c1bbc48f3920bd32d991eba2abc5a175e73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -1,3 +1,14 @@\n+2015-08-01  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree.c (operation_can_overflow, operation_no_trapping_overflow): New\n+\tfunction.\n+\t* tree.h (operation_can_overflow, operation_no_trapping_overflow):\n+\tDeclare.\n+\t* tree-vect-loop.c (vect_is_simple_reduction_1): Use\n+\toperation_no_trapping_overflow.  Allow non-overflow operations.\n+\t* graphite-sese-to-poly.c (is_reduction_operation_p): Allow non-overflow\n+\toperations.\n+\n 2015-07-31  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/67049"}, {"sha": "fdcc790336ca87b4fd95f049061755944a4dd6e1", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -2614,8 +2614,11 @@ is_reduction_operation_p (gimple stmt)\n   if (FLOAT_TYPE_P (type))\n     return flag_associative_math;\n \n-  return (INTEGRAL_TYPE_P (type)\n-\t  && TYPE_OVERFLOW_WRAPS (type));\n+  if (ANY_INTEGRAL_TYPE_P (type))\n+    return (TYPE_OVERFLOW_WRAPS (type)\n+\t    || !operation_can_overflow (code));\n+\n+  return false;\n }\n \n /* Returns true when PHI contains an argument ARG.  */"}, {"sha": "8117434d1586705261e932a7d0a48ba0291fb222", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -1,3 +1,16 @@\n+2015-08-01  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.dg/autopar/reduc-2char.c (init_arrays): Mark with attribute\n+\toptimize (\"-ftree-parallelize-loops=0\").\n+\tAdd successful scans for 2 detected reductions.\t Add xfail scans for 3\n+\tdetected reductions.\n+\t* gcc.dg/autopar/reduc-2short.c: Same.\n+\t* gcc.dg/autopar/reduc-8.c (init_arrays): Mark with attribute\n+\toptimize (\"-ftree-parallelize-loops=0\").  Add successful scans for 2\n+\tdetected reductions.\n+\t* gcc.dg/vect/trapv-vect-reduc-4.c: Update scan to match vectorized min\n+\tand max reductions.\n+\n 2015-07-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/66977"}, {"sha": "a2dad4465119d6d67ad77b7a3d919d95bfb54771", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-2char.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2char.c?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -39,8 +39,9 @@ void main1 (signed char x, signed char max_result, signed char min_result)\n     abort ();\n }\n \n- __attribute__((noinline))\n- void init_arrays ()\n+void __attribute__((noinline))\n+  __attribute__((optimize (\"-ftree-parallelize-loops=0\")))\n+init_arrays ()\n  {\n    int i;\n \n@@ -60,7 +61,10 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 3 \"parloops\" { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops\" } } */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" { xfail *-*-* } } } */\n \n "}, {"sha": "a50e14f0cb4be37289361ccf7ac3336c902fde37", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-2short.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2short.c?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -38,8 +38,9 @@ void main1 (short x, short max_result, short min_result)\n     abort ();\n }\n \n- __attribute__((noinline))\n- void init_arrays ()\n+void __attribute__((noinline))\n+  __attribute__((optimize (\"-ftree-parallelize-loops=0\")))\n+init_arrays ()\n  {\n    int i;\n \n@@ -58,7 +59,8 @@ int main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 3 \"parloops\" { xfail *-*-* } } } */\n \n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops\" } } */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" { xfail *-*-* } } } */\n-"}, {"sha": "18ba03d56322ac103dfdedf9a2b68d5cafe3c824", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-8.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-8.c?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -40,7 +40,8 @@ testmin (const T *c, T init, T result)\n     abort ();\n }\n \n-int main (void)\n+int __attribute__((optimize (\"-ftree-parallelize-loops=0\")))\n+main (void)\n { \n   static signed char A[N] = {\n     0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n@@ -84,5 +85,5 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops\" } } */"}, {"sha": "86f9b9002baa4e1a245b2edf00a3fb1e5754f46c", "filename": "gcc/testsuite/gcc.dg/vect/trapv-vect-reduc-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftrapv-vect-reduc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftrapv-vect-reduc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftrapv-vect-reduc-4.c?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -46,4 +46,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */"}, {"sha": "59c75af73237f6f6b74607de6adf3199fbae790a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -2615,7 +2615,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n     }\n   else if (INTEGRAL_TYPE_P (type) && check_reduction)\n     {\n-      if (TYPE_OVERFLOW_TRAPS (type))\n+      if (!operation_no_trapping_overflow (type, code))\n \t{\n \t  /* Changing the order of operations changes the semantics.  */\n \t  if (dump_enabled_p ())\n@@ -2624,7 +2624,9 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n \t\t\t    \" (overflow traps): \");\n \t  return NULL;\n \t}\n-      if (need_wrapping_integral_overflow && !TYPE_OVERFLOW_WRAPS (type))\n+      if (need_wrapping_integral_overflow\n+\t  && !TYPE_OVERFLOW_WRAPS (type)\n+\t  && operation_can_overflow (code))\n \t{\n \t  /* Changing the order of operations changes the semantics.  */\n \t  if (dump_enabled_p ())"}, {"sha": "3c2c20a82b4fea5ba20c75faef1cdccb5c61a120", "filename": "gcc/tree.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -7597,6 +7597,75 @@ commutative_ternary_tree_code (enum tree_code code)\n   return false;\n }\n \n+/* Returns true if CODE can overflow.  */\n+\n+bool\n+operation_can_overflow (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case MULT_EXPR:\n+    case LSHIFT_EXPR:\n+      /* Can overflow in various ways.  */\n+      return true;\n+    case TRUNC_DIV_EXPR:\n+    case EXACT_DIV_EXPR:\n+    case FLOOR_DIV_EXPR:\n+    case CEIL_DIV_EXPR:\n+      /* For INT_MIN / -1.  */\n+      return true;\n+    case NEGATE_EXPR:\n+    case ABS_EXPR:\n+      /* For -INT_MIN.  */\n+      return true;\n+    default:\n+      /* These operators cannot overflow.  */\n+      return false;\n+    }\n+}\n+\n+/* Returns true if CODE operating on operands of type TYPE doesn't overflow, or\n+   ftrapv doesn't generate trapping insns for CODE.  */\n+\n+bool\n+operation_no_trapping_overflow (tree type, enum tree_code code)\n+{\n+  gcc_checking_assert (ANY_INTEGRAL_TYPE_P (type));\n+\n+  /* We don't generate instructions that trap on overflow for complex or vector\n+     types.  */\n+  if (!INTEGRAL_TYPE_P (type))\n+    return true;\n+\n+  if (!TYPE_OVERFLOW_TRAPS (type))\n+    return true;\n+\n+  switch (code)\n+    {\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case MULT_EXPR:\n+    case NEGATE_EXPR:\n+    case ABS_EXPR:\n+      /* These operators can overflow, and -ftrapv generates trapping code for\n+\t these.  */\n+      return false;\n+    case TRUNC_DIV_EXPR:\n+    case EXACT_DIV_EXPR:\n+    case FLOOR_DIV_EXPR:\n+    case CEIL_DIV_EXPR:\n+    case LSHIFT_EXPR:\n+      /* These operators can overflow, but -ftrapv does not generate trapping\n+\t code for these.  */\n+      return true;\n+    default:\n+      /* These operators cannot overflow.  */\n+      return true;\n+    }\n+}\n+\n namespace inchash\n {\n "}, {"sha": "d280ea7fae5dc17a50ab19a717f45456114755d4", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805134b9170b4ac563189c24b35fa4dc09853569/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=805134b9170b4ac563189c24b35fa4dc09853569", "patch": "@@ -4369,6 +4369,8 @@ extern int type_num_arguments (const_tree);\n extern bool associative_tree_code (enum tree_code);\n extern bool commutative_tree_code (enum tree_code);\n extern bool commutative_ternary_tree_code (enum tree_code);\n+extern bool operation_can_overflow (enum tree_code);\n+extern bool operation_no_trapping_overflow (tree, enum tree_code);\n extern tree upper_bound_in_type (tree, tree);\n extern tree lower_bound_in_type (tree, tree);\n extern int operand_equal_for_phi_arg_p (const_tree, const_tree);"}]}