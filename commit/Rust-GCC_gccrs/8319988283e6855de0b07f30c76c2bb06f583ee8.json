{"sha": "8319988283e6855de0b07f30c76c2bb06f583ee8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxOTk4ODI4M2U2ODU1ZGUwYjA3ZjMwYzc2YzJiYjA2ZjU4M2VlOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-11T11:53:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-11T11:53:27Z"}, "message": "Use proper modes and predicates for {sign,zero}_extract.\n\nFrom-SVN: r11511", "tree": {"sha": "3ced458b8b5ae52ebf63275576739c58e69c5f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ced458b8b5ae52ebf63275576739c58e69c5f29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8319988283e6855de0b07f30c76c2bb06f583ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8319988283e6855de0b07f30c76c2bb06f583ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8319988283e6855de0b07f30c76c2bb06f583ee8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8319988283e6855de0b07f30c76c2bb06f583ee8/comments", "author": null, "committer": null, "parents": [{"sha": "d7cd794fdf7abd1d9e93482a8074220a1e133c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cd794fdf7abd1d9e93482a8074220a1e133c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7cd794fdf7abd1d9e93482a8074220a1e133c8b"}], "stats": {"total": 397, "additions": 234, "deletions": 163}, "files": [{"sha": "6862767d764f58cfa1095e551a8368d6eb4dcc63", "filename": "gcc/config/fx80/fx80.md", "status": "modified", "additions": 64, "deletions": 40, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Ffx80%2Ffx80.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Ffx80%2Ffx80.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.md?ref=8319988283e6855de0b07f30c76c2bb06f583ee8", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU C compiler for Alliant FX systems\n-;;  Copyright (C) 1989, 1994 Free Software Foundation, Inc.\n+;;  Copyright (C) 1989, 1994, 1996 Free Software Foundation, Inc.\n ;;  Adapted from m68k.md by Paul Petersen (petersen@uicsrd.csrd.uiuc.edu)\n ;;  and Joe Weening (weening@gang-of-four.stanford.edu).\n \n@@ -195,15 +195,15 @@\n ;; Recognizers for btst instructions.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"do\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"o\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 7)\n \t\t\t\t      (match_operand:SI 1 \"general_operand\" \"di\"))))]\n   \"\"\n   \"* { return output_btst (operands, operands[1], operands[0], insn, 7); }\")\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 31)\n \t\t\t\t      (match_operand:SI 1 \"general_operand\" \"di\"))))]\n@@ -215,7 +215,7 @@\n ;; are automatically masked to 3 or 5 bits.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"do\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"o\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 7)\n \t\t\t\t      (and:SI\n@@ -225,7 +225,7 @@\n   \"* { return output_btst (operands, operands[1], operands[0], insn, 7); }\")\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 31)\n \t\t\t\t      (and:SI\n@@ -237,7 +237,7 @@\n ;; Nonoffsettable mem refs are ok in this one pattern\n ;; since we don't try to adjust them.\n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"md\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"general_operand\" \"i\")))]\n   \"GET_CODE (operands[1]) == CONST_INT\n@@ -250,7 +250,7 @@\n \n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"do\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"do\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"general_operand\" \"i\")))]\n   \"GET_CODE (operands[1]) == CONST_INT\"\n@@ -1656,7 +1656,7 @@\n ;; which can usually be done with move instructions.\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+do\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+do\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n \t(match_operand:SI 3 \"general_operand\" \"d\"))]\n@@ -1686,7 +1686,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=&d\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"do\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"do\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -1716,7 +1716,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"do\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"do\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -1744,26 +1744,42 @@\n ;; \"o,d\" constraint causes a nonoffsettable memref to match the \"o\"\n ;; so that its address is reloaded.\n \n-(define_insn \"extv\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d,d\")\n-\t(sign_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o,d\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"di,di\")))]\n+(define_expand \"extv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(sign_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+\t(sign_extract:SI (match_operand:QI 1 \"memory_operand\" \"o\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfexts [%c3,%c2]%1,%0\")\n \n-(define_insn \"extzv\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d,d\")\n-\t(zero_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o,d\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"di,di\")))]\n+(define_expand \"extzv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(zero_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+\t(zero_extract:SI (match_operand:QI 1 \"memory_operand\" \"o\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfextu [%c3,%c2]%1,%0\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n         (xor:SI (zero_extract:SI (match_dup 0) (match_dup 1) (match_dup 2))\n \t\t(match_operand:SI 3 \"const_int_operand\" \"i,i\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -1777,9 +1793,9 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int 0))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"*\n@@ -1789,9 +1805,9 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int -1))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"*\n@@ -1800,11 +1816,19 @@\n   return \\\"bfset [%c2,%c1]%0\\\";\n }\")\n \n-(define_insn \"insv\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n-\t(match_operand:SI 3 \"general_operand\" \"d,d\"))]\n+(define_expand \"insv\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\"))\n+\t(match_operand:SI 3 \"general_operand\" \"\"))]\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t(match_operand:SI 3 \"general_operand\" \"d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfins %3,[%c2,%c1]%0\")\n \n@@ -1813,22 +1837,22 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfexts [%c3,%c2]%1,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfextu [%c3,%c2]%1,%0\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+d\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int 0))]\n@@ -1840,7 +1864,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+d\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int -1))]\n@@ -1852,7 +1876,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+d\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(match_operand:SI 3 \"general_operand\" \"d\"))]\n@@ -1893,7 +1917,7 @@\n ;;; now handle the register cases\n (define_insn \"\"\n   [(set (cc0)\n-\t(zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n+\t(zero_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\""}, {"sha": "0fc44875b6d795b70c1acac2d20478f5c070d218", "filename": "gcc/config/gmicro/gmicro.md", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fgmicro%2Fgmicro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fgmicro%2Fgmicro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.md?ref=8319988283e6855de0b07f30c76c2bb06f583ee8", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Fujitsu Gmicro Version\n-;;  Copyright (C) 1990, 1994 Free Software Foundation, Inc.\n+;;  Copyright (C) 1990, 1994, 1996 Free Software Foundation, Inc.\n ;;  Contributed by M.Yuhara, Fujitsu Laboratories LTD.\n \n ;; This file is part of GNU CC.\n@@ -221,21 +221,14 @@\n ;; Recognizers for btst instructions.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"rm\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"general_operand\" \"rmi\")))]\n   \"\"\n   \"btst %1.w,%0.b\")\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:HI 0 \"nonimmediate_operand\" \"rm\")\n-\t\t\t    (const_int 1)\n-\t\t\t    (match_operand:SI 1 \"general_operand\" \"rmi\")))]\n-  \"\"\n-  \"btst %1.w,%0.h\")\n-\n-(define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"general_operand\" \"rmi\")))]\n   \"\"\n@@ -246,7 +239,7 @@\n ;; are automatically masked to 3 or 5 bits when the base is a register.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"r\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t    (const_int 1)\n \t\t\t    (and:SI\n \t\t\t       (match_operand:SI 1 \"general_operand\" \"rmi\")\n@@ -255,7 +248,7 @@\n   \"btst %1.w,%0.b\")\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"r\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t    (const_int 1)\n \t\t\t    (and:SI\n \t\t\t       (match_operand:SI 1 \"general_operand\" \"rmi\")\n@@ -268,7 +261,9 @@\n \n \n (define_insn \"\"\n-  [(set (cc0) (and:SI (sign_extend:SI (sign_extend:HI (match_operand:QI 0 \"nonimmediate_operand\" \"rm\")))\n+  [(set (cc0) (and:SI (sign_extend:SI\n+\t\t       (sign_extend:HI\n+\t\t\t(match_operand:QI 0 \"nonimmediate_operand\" \"rm\")))\n \t\t      (match_operand:SI 1 \"general_operand\" \"i\")))]\n   \"(GET_CODE (operands[1]) == CONST_INT\n     && (unsigned) INTVAL (operands[1]) < 0x100\n@@ -1990,7 +1985,7 @@\n ;; Should I add  mode_dependent_address_p ????\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+rm\")\n \t\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\"))\n \t(match_operand:SI 3 \"general_operand\" \"rm\"))]\n@@ -2025,7 +2020,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=&r\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"rm\")\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n   \"TARGET_BITFIELD\n@@ -2096,7 +2091,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n   \"TARGET_BITFIELD\n@@ -2173,18 +2168,34 @@\n ;;        r.w    m            r.w/#    rmi  \n ;;        %0     %1           %2       %3\n \n-(define_insn \"extv\"\n+(define_expand \"extv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(sign_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(sign_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"m\")\n+\t(sign_extract:SI (match_operand:QI 1 \"memory_operand\" \"m\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"ri\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"rmi\")))]\n   \"TARGET_BITFIELD\"\n   \"bfext %3,%2,%1,%0\")\n \n \n-(define_insn \"extzv\"\n+(define_expand \"extzv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(zero_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(zero_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"m\")\n+\t(zero_extract:SI (match_operand:QI 1 \"memory_operand\" \"m\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"ri\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"rmi\")))]\n   \"TARGET_BITFIELD\"\n@@ -2198,13 +2209,22 @@\n ;;        0                1        2       3\n \n \n-(define_insn \"insv\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+m,m\")\n+(define_expand \"insv\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\"))\n+\t(match_operand:SI 3 \"general_operand\" \"\"))]\n+  \"TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+m,m\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"r,i\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rmi,i\"))\n \t(match_operand:SI 3 \"general_operand\" \"ri,ri\"))]\n   \"TARGET_BITFIELD\"\n   \"bfinsu %3,%2,%1,%0\")\n+\n ;;; bfins/bfinsu ????????\n \n ;; == == == == == == == == == == == == == \n@@ -2225,7 +2245,7 @@\n ;;\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"r\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n   \"TARGET_BITFIELD\"\n@@ -2242,7 +2262,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n   \"TARGET_BITFIELD\""}, {"sha": "37e5dbf5098503a4f8f20efa60cdbbe0b864b1d9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8319988283e6855de0b07f30c76c2bb06f583ee8", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for Intel X86.\n-;; Copyright (C) 1988, 1994, 1995 Free Software Foundation, Inc.\n+;; Copyright (C) 1988, 1994, 1995, 1996 Free Software Foundation, Inc.\n ;; Mostly by William Schelter.\n \n ;; This file is part of GNU CC.\n@@ -1127,9 +1127,9 @@\n     }\n \n   /* If we are loading a floating point constant that isn't 0 or 1\n-into a register, indicate we need the pic register loaded.  This could\n-be optimized into stores of constants if the target eventually moves\n-to memory, but better safe than sorry.  */\n+     into a register, indicate we need the pic register loaded.  This could\n+     be optimized into stores of constants if the target eventually moves\n+     to memory, but better safe than sorry.  */\n   if ((reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) != MEM\n       && GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -1321,10 +1321,10 @@ to memory, but better safe than sorry.  */\n       DONE;\n     }\n \n-  /* If we are loading a floating point constant that isn't 0 or 1 into a register,\n-     indicate we need the pic register loaded.  This could be optimized into stores\n-     of constants if the target eventually moves to memory, but better safe than\n-     sorry.  */\n+  /* If we are loading a floating point constant that isn't 0 or 1 into a\n+     register, indicate we need the pic register loaded.  This could be\n+     optimized into stores of constants if the target eventually moves to\n+     memory, but better safe than sorry.  */\n   if ((reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) != MEM\n       && GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -1415,10 +1415,11 @@ to memory, but better safe than sorry.  */\n   \"* return output_move_memory (operands, insn, GET_MODE_SIZE (DFmode), 2, 4);\")\n \n ;; For the purposes of regclass, prefer FLOAT_REGS.\n-(define_insn \"movdf_normal\"\n+(define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,fm,!*rf,!*rm\")\n \t(match_operand:DF 1 \"general_operand\" \"fmG,f,*rfm,*rfF\"))]\n-  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM)\n+   || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n@@ -1508,9 +1509,9 @@ to memory, but better safe than sorry.  */\n     }\n \n   /* If we are loading a floating point constant that isn't 0 or 1\n-into a register, indicate we need the pic register loaded.  This could\n-be optimized into stores of constants if the target eventually moves\n-to memory, but better safe than sorry.  */\n+     into a register, indicate we need the pic register loaded.  This could\n+     be optimized into stores of constants if the target eventually moves\n+     to memory, but better safe than sorry.  */\n   if ((reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) != MEM\n       && GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -1598,10 +1599,11 @@ to memory, but better safe than sorry.  */\n   \"\"\n   \"* return output_move_memory (operands, insn, GET_MODE_SIZE (XFmode), 2, 4);\")\n \n-(define_insn \"movxf_normal\"\n+(define_insn \"\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,fm,!*rf,!*rm\")\n \t(match_operand:XF 1 \"general_operand\" \"fmG,f,*rfm,*rfF\"))]\n-  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM)\n+   || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n@@ -4619,6 +4621,8 @@ to memory, but better safe than sorry.  */\n ;; This usually looses.  But try a define_expand to recognize a few case\n ;; we can do efficiently, such as accessing the \"high\" QImode registers,\n ;; %ah, %bh, %ch, %dh.\n+;; ??? Note this has a botch on the mode of operand 0, which needs to be\n+;; fixed if this is ever enabled.\n (define_insn \"insv\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+&r\")\n \t\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n@@ -4673,23 +4677,6 @@ to memory, but better safe than sorry.  */\n     FAIL;\n }\")\n \n-;; ??? Are these constraints right?\n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"+&qo\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(match_operand:QI 1 \"general_operand\" \"qn\"))]\n-  \"\"\n-  \"*\n-{\n-  if (REG_P (operands[0]))\n-    return AS2 (mov%B0,%1,%h0);\n-\n-  operands[0] = adj_offsettable_operand (operands[0], 1);\n-  return AS2 (mov%B0,%1,%0);\n-}\")\n-*/\n-\n ;; On i386, the register count for a bit operation is *not* truncated,\n ;; so SHIFT_COUNT_TRUNCATED must not be defined.\n \n@@ -4702,7 +4689,7 @@ to memory, but better safe than sorry.  */\n \n ;; General bit set and clear.\n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))\n \t(match_operand:SI 3 \"const_int_operand\" \"n\"))]\n@@ -4801,7 +4788,7 @@ to memory, but better safe than sorry.  */\n ;; The CPU may access unspecified bytes around the actual target byte.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"rm\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"GET_CODE (operands[0]) != MEM || ! MEM_VOLATILE_P (operands[0])\""}, {"sha": "e120ed8f025f711138c1dda0a05372ad232f26b2", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 64, "deletions": 40, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=8319988283e6855de0b07f30c76c2bb06f583ee8", "patch": "@@ -658,15 +658,15 @@\n ;; Recognizers for btst instructions.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"do\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"o\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 7)\n \t\t\t\t      (match_operand:SI 1 \"general_operand\" \"di\"))))]\n   \"\"\n   \"* { return output_btst (operands, operands[1], operands[0], insn, 7); }\")\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 31)\n \t\t\t\t      (match_operand:SI 1 \"general_operand\" \"di\"))))]\n@@ -678,7 +678,7 @@\n ;; are automatically masked to 3 or 5 bits.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"do\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"o\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 7)\n \t\t\t\t      (and:SI\n@@ -688,7 +688,7 @@\n   \"* { return output_btst (operands, operands[1], operands[0], insn, 7); }\")\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 31)\n \t\t\t\t      (and:SI\n@@ -700,7 +700,7 @@\n ;; Nonoffsettable mem refs are ok in this one pattern\n ;; since we don't try to adjust them.\n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"md\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n   \"(unsigned) INTVAL (operands[1]) < 8\"\n@@ -711,7 +711,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"do\")\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"do\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n   \"\"\n@@ -4770,7 +4770,7 @@\n ; than an odd byte aligned bit field instruction.\n ;\n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o\")\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n \t\t\t (const_int 32)\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t(match_operand:SI 3 \"general_operand\" \"rmi\"))]\n@@ -4786,7 +4786,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+do\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+do\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t(match_operand:SI 3 \"register_operand\" \"d\"))]\n@@ -4824,7 +4824,7 @@\n ;\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(zero_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o\")\n+\t(zero_extract:SI (match_operand:QI 1 \"memory_operand\" \"o\")\n \t\t\t (const_int 32)\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -4840,7 +4840,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=&d\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"do\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"do\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -4878,7 +4878,7 @@\n ;\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(sign_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o\")\n+\t(sign_extract:SI (match_operand:QI 1 \"memory_operand\" \"o\")\n \t\t\t (const_int 32)\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -4894,7 +4894,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"do\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"do\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n@@ -4922,17 +4922,33 @@\n ;; \"o,d\" constraint causes a nonoffsettable memref to match the \"o\"\n ;; so that its address is reloaded.\n \n-(define_insn \"extv\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d,d\")\n-\t(sign_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o,d\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"di,di\")))]\n+(define_expand \"extv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(sign_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+\t(sign_extract:SI (match_operand:QI 1 \"memory_operand\" \"o\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfexts %1{%b3:%b2},%0\")\n \n-(define_insn \"extzv\"\n+(define_expand \"extzv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(zero_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d,d\")\n-\t(zero_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o,d\")\n+\t(zero_extract:SI (match_operand:QI 1 \"memory_operand\" \"o,d\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"di,di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n@@ -4951,11 +4967,11 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n         (xor:SI (zero_extract:SI (match_dup 0) (match_dup 1) (match_dup 2))\n-\t\t(match_operand 3 \"const_int_operand\" \"n,n\")))]\n+\t\t(match_operand 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n    && (INTVAL (operands[3]) == -1\n        || (GET_CODE (operands[1]) == CONST_INT\n@@ -4967,9 +4983,9 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int 0))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"*\n@@ -4979,9 +4995,9 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int -1))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"*\n@@ -4990,11 +5006,19 @@\n   return \\\"bfset %0{%b2:%b1}\\\";\n }\")\n \n-(define_insn \"insv\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n-\t(match_operand:SI 3 \"register_operand\" \"d,d\"))]\n+(define_expand \"insv\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\"))\n+\t(match_operand:SI 3 \"register_operand\" \"\"))]\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")\n+\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n+\t(match_operand:SI 3 \"register_operand\" \"d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfins %3,%0{%b2:%b1}\")\n \n@@ -5003,15 +5027,15 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfexts %1{%b3:%b2},%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n@@ -5030,7 +5054,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+d\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int 0))]\n@@ -5042,7 +5066,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+d\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(const_int -1))]\n@@ -5054,7 +5078,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+d\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n \t(match_operand:SI 3 \"register_operand\" \"d\"))]\n@@ -5105,7 +5129,7 @@\n ;;; now handle the register cases\n (define_insn \"\"\n   [(set (cc0)\n-\t(zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n+\t(zero_extract:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\""}, {"sha": "101d69f6822716cfa357886f5de731037fa5d764", "filename": "gcc/config/tahoe/tahoe.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Ftahoe%2Ftahoe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Ftahoe%2Ftahoe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.md?ref=8319988283e6855de0b07f30c76c2bb06f583ee8", "patch": "@@ -1,5 +1,5 @@\n ;; Machine description for GNU compiler, Tahoe version\n-;; Copyright (C) 1989, 1994 Free Software Foundation, Inc.\n+;; Copyright (C) 1989, 1994, 1996 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1946,7 +1946,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (ne (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t      (subreg:QI (match_operand:SI 1 \"general_operand\" \"g\") 0))\n \t     (const_int 0))\n@@ -1958,7 +1958,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (eq (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t      (subreg:QI (match_operand:SI 1 \"general_operand\" \"g\") 0))\n \t     (const_int 0))\n@@ -1970,7 +1970,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (ne (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t      (subreg:QI (match_operand:SI 1 \"general_operand\" \"g\") 0))\n \t     (const_int 0))\n@@ -1982,7 +1982,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (eq (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t      (subreg:QI (match_operand:SI 1 \"general_operand\" \"g\") 0))\n \t     (const_int 0))\n@@ -1996,7 +1996,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (ne (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:QI 1 \"register_operand\" \"r\"))\n \t     (const_int 0))\n@@ -2008,7 +2008,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (eq (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:QI 1 \"register_operand\" \"r\"))\n \t     (const_int 0))\n@@ -2020,7 +2020,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (ne (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:QI 1 \"register_operand\" \"r\"))\n \t     (const_int 0))\n@@ -2032,7 +2032,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"rm\")\n+\t (eq (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"rm\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:QI 1 \"register_operand\" \"r\"))\n \t     (const_int 0))"}, {"sha": "ba004e9a6a2e0c05e9ce26d23fcb2aebdc5f71d4", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319988283e6855de0b07f30c76c2bb06f583ee8/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=8319988283e6855de0b07f30c76c2bb06f583ee8", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Vax Version\n-;;   Copyright (C) 1987, 1988, 1991, 1994, 1995 Free Software Foundation, Inc.\n+;;   Copyright (C) 1987, 88, 91, 94, 95, 1996 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1322,7 +1322,7 @@\n ;; which can usually be done with move instructions.\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+ro\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+ro\")\n \t\t\t (match_operand:QI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t(match_operand:SI 3 \"general_operand\" \"g\"))]\n@@ -1348,7 +1348,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=&g\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n@@ -1373,7 +1373,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n@@ -1401,7 +1401,7 @@\n (define_insn \"\"\n   [(set (cc0)\n \t(compare\n-\t (sign_extract:SI (match_operand:SI 0 \"nonmemory_operand\" \"r\")\n+\t (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t  (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t  (match_operand:SI 2 \"general_operand\" \"g\"))\n \t (match_operand:SI 3 \"general_operand\" \"g\")))]\n@@ -1425,7 +1425,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n+\t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1442,7 +1442,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"ro\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"ro\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1469,7 +1469,7 @@\n (define_insn \"\"\n   [(set (cc0)\n \t(compare\n-\t (sign_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"rm\")\n+\t (sign_extract:SI (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t  (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t  (match_operand:SI 2 \"general_operand\" \"g\"))\n \t (match_operand:SI 3 \"general_operand\" \"g\")))]\n@@ -1488,7 +1488,7 @@\n \n (define_insn \"extv\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(sign_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")\n+\t(sign_extract:SI (match_operand:QI 1 \"memory_operand\" \"m\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1507,9 +1507,17 @@\n   return \\\"rotl %R3,%1,%0\\;cvtwl %0,%0\\\";\n }\")\n \n-(define_insn \"extzv\"\n+(define_expand \"extzv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(zero_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:QI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(zero_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")\n+\t(zero_extract:SI (match_operand:QI 1 \"memory_operand\" \"m\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"g\")))]\n   \"\"\n@@ -1529,16 +1537,24 @@\n   return \\\"rotl %R3,%1,%0\\;bicl2 %M2,%0\\\";\n }\")\n \n-(define_insn \"insv\"\n-  [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+g\")\n+(define_expand \"insv\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"\")\n+\t\t\t (match_operand:QI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"\"))\n+\t(match_operand:SI 3 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+g\")\n \t\t\t (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"g\"))\n \t(match_operand:SI 3 \"general_operand\" \"g\"))]\n   \"\"\n   \"insv %3,%2,%1,%0\")\n \n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+r\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"g\"))\n \t(match_operand:SI 3 \"general_operand\" \"g\"))]\n@@ -1660,7 +1676,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"rQ,g\")\n+\t (ne (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"Q,g\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:SI 1 \"general_operand\" \"I,g\"))\n \t     (const_int 0))\n@@ -1674,7 +1690,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"rQ,g\")\n+\t (eq (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"Q,g\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:SI 1 \"general_operand\" \"I,g\"))\n \t     (const_int 0))"}]}