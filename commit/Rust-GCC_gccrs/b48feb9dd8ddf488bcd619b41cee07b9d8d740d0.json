{"sha": "b48feb9dd8ddf488bcd619b41cee07b9d8d740d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4ZmViOWRkOGRkZjQ4OGJjZDYxOWI0MWNlZTA3YjlkOGQ3NDBkMA==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2010-12-19T11:14:19Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-12-19T11:14:19Z"}, "message": "re PR middle-end/46674 (Weak alias is mistakenly optimized away)\n\n\tPR middle-end/46674\n\tPR middle-end/46221\n\t* varasm.c (symbol_alias_set_t): New typedef for derived pointer_set\n\twrapper class.\n\t(symbol_alias_set_create): New wrapper function.\n\t(symbol_alias_set_destroy): Likewise.\n\t(symbol_alias_set_contains): Likewise.\n\t(symbol_alias_set_insert): Likewise.\n\t(compute_visible_aliases): Use the above and return symbol_alias_set_t,\n\tnot a pointer_set.\n\t(remove_unreachable_alias_pairs): Adjust likewise to match.\n\t(finish_aliases_1): Likewise.\n\nFrom-SVN: r168047", "tree": {"sha": "adfdc3fe165d29f60b3e4d4833fa36dc2c898961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adfdc3fe165d29f60b3e4d4833fa36dc2c898961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f910786b9865adf3548fcbbcd569bc90ea314420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f910786b9865adf3548fcbbcd569bc90ea314420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f910786b9865adf3548fcbbcd569bc90ea314420"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "8a6523d61bc7482caaf2fceaedca4515cd5b7d64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b48feb9dd8ddf488bcd619b41cee07b9d8d740d0", "patch": "@@ -1,3 +1,18 @@\n+2010-12-19  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR middle-end/46674\n+\tPR middle-end/46221\n+\t* varasm.c (symbol_alias_set_t): New typedef for derived pointer_set\n+\twrapper class.\n+\t(symbol_alias_set_create): New wrapper function.\n+\t(symbol_alias_set_destroy): Likewise.\n+\t(symbol_alias_set_contains): Likewise.\n+\t(symbol_alias_set_insert): Likewise.\n+\t(compute_visible_aliases): Use the above and return symbol_alias_set_t,\n+\tnot a pointer_set.\n+\t(remove_unreachable_alias_pairs): Adjust likewise to match.\n+\t(finish_aliases_1): Likewise.\n+\n 2010-12-19  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config/arm/arm.c (arm_legitimate_index_p): Add VFP load/store"}, {"sha": "cc05c18a58f954e45e59f78ddfb6579d132c2d6e", "filename": "gcc/varasm.c", "status": "modified", "additions": 57, "deletions": 19, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48feb9dd8ddf488bcd619b41cee07b9d8d740d0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b48feb9dd8ddf488bcd619b41cee07b9d8d740d0", "patch": "@@ -5504,43 +5504,81 @@ do_assemble_alias (tree decl, tree target)\n #endif\n }\n \n+/* Derived type for use by compute_visible_aliases and callers.  A symbol\n+   alias set is a pointer set into which we enter IDENTIFIER_NODES bearing\n+   the canonicalised assembler-level symbol names corresponding to decls\n+   and their aliases.  */\n+\n+typedef struct pointer_set_t symbol_alias_set_t;\n+\n+/* Allocate and construct a symbol alias set.  */\n+\n+static symbol_alias_set_t *\n+symbol_alias_set_create (void)\n+{\n+  return pointer_set_create ();\n+}\n+\n+/* Destruct and free a symbol alias set.  */\n+\n+static void\n+symbol_alias_set_destroy (symbol_alias_set_t *aset)\n+{\n+  pointer_set_destroy (aset);\n+}\n+\n+/* Test if a symbol alias set contains a given name.  */\n+\n+static int\n+symbol_alias_set_contains (const symbol_alias_set_t *aset, tree t)\n+{\n+  /* We accept either a DECL or an IDENTIFIER directly.  */\n+  if (TREE_CODE (t) != IDENTIFIER_NODE)\n+    t = DECL_ASSEMBLER_NAME (t);\n+  t = targetm.asm_out.mangle_assembler_name (IDENTIFIER_POINTER (t));\n+  return pointer_set_contains (aset, t);\n+}\n+\n+/* Enter a new name into a symbol alias set.  */\n+\n+static int\n+symbol_alias_set_insert (symbol_alias_set_t *aset, tree t)\n+{\n+  /* We accept either a DECL or an IDENTIFIER directly.  */\n+  if (TREE_CODE (t) != IDENTIFIER_NODE)\n+    t = DECL_ASSEMBLER_NAME (t);\n+  t = targetm.asm_out.mangle_assembler_name (IDENTIFIER_POINTER (t));\n+  return pointer_set_insert (aset, t);\n+}\n \n /* Compute the set of indentifier nodes that is generated by aliases\n    whose targets are reachable.  */\n \n-static struct pointer_set_t *\n+static symbol_alias_set_t *\n compute_visible_aliases (void)\n {\n-  struct pointer_set_t *visible;\n+  symbol_alias_set_t *visible;\n   unsigned i;\n   alias_pair *p;\n   bool changed;\n \n   /* We have to compute the set of visible nodes including aliases\n      themselves.  */\n-  visible = pointer_set_create ();\n+  visible = symbol_alias_set_create ();\n   do\n     {\n       changed = false;\n       for (i = 0; VEC_iterate (alias_pair, alias_pairs, i, p); ++i)\n \t{\n \t  struct cgraph_node *fnode = NULL;\n \t  struct varpool_node *vnode = NULL;\n-\t  tree asmname = DECL_ASSEMBLER_NAME (p->decl);\n-\t  const char *str = IDENTIFIER_POINTER (asmname);\n-\n-\t  if (str[0] == '*')\n-\t    {\n-\t      str ++;\n-\t      asmname = get_identifier (str);\n-\t    }\n \n \t  fnode = cgraph_node_for_asm (p->target);\n \t  vnode = (fnode == NULL) ? varpool_node_for_asm (p->target) : NULL;\n \t  if ((fnode\n \t       || vnode\n-\t       || pointer_set_contains (visible, p->target))\n-\t      && !pointer_set_insert (visible, asmname))\n+\t       || symbol_alias_set_contains (visible, p->target))\n+\t      && !symbol_alias_set_insert (visible, p->decl))\n \t    changed = true;\n \t}\n     }\n@@ -5555,7 +5593,7 @@ compute_visible_aliases (void)\n void\n remove_unreachable_alias_pairs (void)\n {\n-  struct pointer_set_t *visible;\n+  symbol_alias_set_t *visible;\n   unsigned i;\n   alias_pair *p;\n \n@@ -5576,7 +5614,7 @@ remove_unreachable_alias_pairs (void)\n \t  vnode = (fnode == NULL) ? varpool_node_for_asm (p->target) : NULL;\n \t  if (!fnode\n \t      && !vnode\n-\t      && !pointer_set_contains (visible, p->target))\n+\t      && !symbol_alias_set_contains (visible, p->target))\n \t    {\n \t      VEC_unordered_remove (alias_pair, alias_pairs, i);\n \t      continue;\n@@ -5586,7 +5624,7 @@ remove_unreachable_alias_pairs (void)\n       i++;\n     }\n \n-  pointer_set_destroy (visible);\n+  symbol_alias_set_destroy (visible);\n }\n \n \n@@ -5596,7 +5634,7 @@ remove_unreachable_alias_pairs (void)\n void\n finish_aliases_1 (void)\n {\n-  struct pointer_set_t *visible;\n+  symbol_alias_set_t *visible;\n   unsigned i;\n   alias_pair *p;\n \n@@ -5614,7 +5652,7 @@ finish_aliases_1 (void)\n       target_decl = find_decl_and_mark_needed (p->decl, p->target);\n       if (target_decl == NULL)\n \t{\n-\t  if (pointer_set_contains (visible, p->target))\n+\t  if (symbol_alias_set_contains (visible, p->target))\n \t    continue;\n \n \t  if (! (p->emitted_diags & ALIAS_DIAG_TO_UNDEF)\n@@ -5640,7 +5678,7 @@ finish_aliases_1 (void)\n \t}\n     }\n \n-  pointer_set_destroy (visible);\n+  symbol_alias_set_destroy (visible);\n }\n \n /* Second pass of completing pending aliases.  Emit the actual assembly."}]}