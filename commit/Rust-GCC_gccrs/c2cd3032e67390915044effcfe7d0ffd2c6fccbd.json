{"sha": "c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJjZDMwMzJlNjczOTA5MTUwNDRlZmZjZmU3ZDBmZmQyYzZmY2NiZA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2013-10-17T13:47:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T13:47:37Z"}, "message": "g-cppexc.adb, [...]: New files.\n\n2013-10-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* g-cppexc.adb, g-cppexc.ads: New files.\n\t* gcc-interface/Makefile.in: Add g-cppexc when building zcx runtimes.\n\nFrom-SVN: r203757", "tree": {"sha": "1e83e328ae9c573fe82380b9609587724b52aa51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e83e328ae9c573fe82380b9609587724b52aa51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee6decab8f5307ff86d00894b3bbd9219aa22944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6decab8f5307ff86d00894b3bbd9219aa22944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6decab8f5307ff86d00894b3bbd9219aa22944"}], "stats": {"total": 199, "additions": 196, "deletions": 3}, "files": [{"sha": "1dc9b05e919d4ffd67e512c32ce950e45829bfd8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "patch": "@@ -1,3 +1,8 @@\n+2013-10-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* g-cppexc.adb, g-cppexc.ads: New files.\n+\t* gcc-interface/Makefile.in: Add g-cppexc when building zcx runtimes.\n+\n 2013-10-17  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_ch7.adb: Minor reformatting."}, {"sha": "d89cf0ccac3e2ca224e886bb67fa45bd6ddddc94", "filename": "gcc/ada/g-cppexc.adb", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2Fg-cppexc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2Fg-cppexc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-cppexc.adb?ref=c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "patch": "@@ -0,0 +1,139 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  G N A T . C P P _ E X C E P T I O N S                   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                        Copyright (C) 2013, AdaCore                       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System;\n+with System.Storage_Elements;\n+with Interfaces.C; use Interfaces.C;\n+with Ada.Unchecked_Conversion;\n+with System.Standard_Library; use System.Standard_Library;\n+\n+package body GNAT.CPP_Exceptions is\n+\n+   --  Note: all functions prefixed by __cxa are part of the c++ ABI for\n+   --  exception handling. As they are provided by the c++ library, there\n+   --  must be no dependencies on it in the compiled code of this unit, but\n+   --  there can be dependencies in instances. This is required to be able\n+   --  to build the shared library without the c++ library.\n+\n+   function To_Exception_Data_Ptr is new\n+     Ada.Unchecked_Conversion\n+       (Exception_Id, Exception_Data_Ptr);\n+   --  Convert an Exception_Id to its non-private type. This is used to get\n+   --  the RTTI of a C++ exception\n+\n+   function Get_Exception_Machine_Occurrence\n+     (X : Exception_Occurrence) return System.Address;\n+   pragma Import (Ada, Get_Exception_Machine_Occurrence,\n+                    \"__gnat_get_exception_machine_occurrence\");\n+   --  Imported function (from Ada.Exceptions) that returns the machine\n+   --  occurrence from an exception occurrence.\n+\n+   -------------------------\n+   -- Raise_Cpp_Exception --\n+   -------------------------\n+\n+   procedure Raise_Cpp_Exception (Id : Exception_Id; Value : T)\n+   is\n+      Id_Data : constant Exception_Data_Ptr := To_Exception_Data_Ptr (Id);\n+      --  Get a non-private view on the exception\n+\n+      type T_Acc is access all T;\n+      pragma Convention (C, T_Acc);\n+      --  Access type to the object compatible with C\n+\n+      Occ : T_Acc;\n+      --  The occurrence to propagate\n+\n+      function cxa_allocate_exception (Size : size_t) return T_Acc;\n+      pragma Import (C, cxa_allocate_exception, \"__cxa_allocate_exception\");\n+      --  The C++ function to allocate an occurrence\n+\n+      procedure cxa_throw (Obj : T_Acc; Tinfo : System.Address;\n+                                        Dest :  System.Address);\n+      pragma Import (C, cxa_throw, \"__cxa_throw\");\n+      pragma No_Return (cxa_throw);\n+      --  The C++ function to raise an exception\n+   begin\n+      --  Check the exception was imported from C++\n+\n+      if Id_Data.Lang /= 'C' then\n+         raise Constraint_Error;\n+      end if;\n+\n+      --  Allocate the C++ occurrence\n+\n+      Occ := cxa_allocate_exception (T'Size / System.Storage_Unit);\n+\n+      --  Set the object\n+\n+      Occ.all := Value;\n+\n+      --  Throw the exception\n+\n+      cxa_throw (Occ, Id_Data.Foreign_Data, System.Null_Address);\n+   end Raise_Cpp_Exception;\n+\n+   ----------------\n+   -- Get_Object --\n+   ----------------\n+\n+   function Get_Object (X : Exception_Occurrence) return T\n+   is\n+      use System;\n+      use System.Storage_Elements;\n+\n+      Unwind_Exception_Size : Natural;\n+      pragma Import (C, Unwind_Exception_Size, \"__gnat_unwind_exception_size\");\n+      --  Size in bytes of _Unwind_Exception\n+\n+      Exception_Addr : constant Address :=\n+        Get_Exception_Machine_Occurrence (X);\n+      --  Machine occurrence of X\n+\n+   begin\n+      --  Check the machine occurrence exists\n+\n+      if Exception_Addr = Null_Address then\n+         raise Constraint_Error;\n+      end if;\n+\n+      declare\n+         --  Import the object from the occurrence\n+         Result : T;\n+         pragma Import (Ada, Result);\n+         for Result'Address use\n+            Exception_Addr + Storage_Offset (Unwind_Exception_Size);\n+      begin\n+         --  And return it\n+         return Result;\n+      end;\n+   end Get_Object;\n+end GNAT.CPP_Exceptions;"}, {"sha": "60105e6f98ceb69daccdd42b7ce5f6d6c95db236", "filename": "gcc/ada/g-cppexc.ads", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2Fg-cppexc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2Fg-cppexc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-cppexc.ads?ref=c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "patch": "@@ -0,0 +1,48 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  G N A T . C P P _ E X C E P T I O N S                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                        Copyright (C) 2013, AdaCore                       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides an interface for raising and handling C++ exceptions\n+\n+with Ada.Exceptions; use Ada.Exceptions;\n+\n+package GNAT.CPP_Exceptions is\n+   generic\n+      type T is private;\n+   procedure Raise_Cpp_Exception (Id : Exception_Id; Value : T);\n+   --  Raise a C++ exception identified by Id. Associate Value with this\n+   --  occurrence. Id must refer to an exception that has the Cpp convention.\n+\n+   generic\n+      type T is private;\n+   function Get_Object (X : Exception_Occurrence) return T;\n+   --  Extract the object associated with X. The exception of the occurrence\n+   --  X must have a Cpp Convention.\n+end GNAT.CPP_Exceptions;"}, {"sha": "a5ca90d65f328034a5459a151f7a1f7cfaaba204", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2cd3032e67390915044effcfe7d0ffd2c6fccbd/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=c2cd3032e67390915044effcfe7d0ffd2c6fccbd", "patch": "@@ -2307,9 +2307,10 @@ ifeq ($(strip $(filter-out arm nucleus%,$(target_cpu) $(target_os))),)\n   GNATRTL_SOCKETS_OBJS =\n endif\n \n-ifneq ($(EH_MECHANISM),)\n-  LIBGNAT_TARGET_PAIRS += a-exexpr.adb<a-exexpr$(EH_MECHANISM).adb\n-  EXTRA_LIBGNAT_OBJS+=raise$(EH_MECHANISM).o\n+ifeq ($(EH_MECHANISM),-gcc)\n+  LIBGNAT_TARGET_PAIRS += a-exexpr.adb<a-exexpr-gcc.adb\n+  EXTRA_LIBGNAT_OBJS+=raise-gcc.o\n+  EXTRA_GNATRTL_NONTASKING_OBJS+=g-cppexc.o\n endif\n \n # Use the Ada 2005 version of Ada.Exceptions by default, unless specified"}]}