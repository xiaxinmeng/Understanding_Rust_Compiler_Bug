{"sha": "eb4a61ac1babffaa03d837d32a1107ea93e85e48", "node_id": "C_kwDOANBUbNoAKGViNGE2MWFjMWJhYmZmYWEwM2Q4MzdkMzJhMTEwN2VhOTNlODVlNDg", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-02-04T22:53:48Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:21Z"}, "message": "gccrs: Add general TypeBounds checks\n\nExisting tests are updated to use libcore copy and clone implementation.\n\nAddresses #1725\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-unify.cc (UnifyRules::go): ensure the bounds are checked\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/torture/intrinsics-4.rs: implement Copy trait\n\t* rust/compile/torture/intrinsics-5.rs: likewise\n\t* rust/execute/torture/atomic_load.rs: likewise\n\t* rust/execute/torture/atomic_store.rs: likewise\n\t* rust/bounds1.rs: New test.", "tree": {"sha": "4bf814557c3220af75a6ec9869b490d55a02bf5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bf814557c3220af75a6ec9869b490d55a02bf5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb4a61ac1babffaa03d837d32a1107ea93e85e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb4a61ac1babffaa03d837d32a1107ea93e85e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb4a61ac1babffaa03d837d32a1107ea93e85e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb4a61ac1babffaa03d837d32a1107ea93e85e48/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11150b7c05c06b5885bfc95045699baf5e5d2a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11150b7c05c06b5885bfc95045699baf5e5d2a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11150b7c05c06b5885bfc95045699baf5e5d2a34"}], "stats": {"total": 277, "additions": 271, "deletions": 6}, "files": [{"sha": "415ffcdc6eaa85ae091b28d8a82679b7a9933b30", "filename": "gcc/rust/typecheck/rust-unify.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.cc?ref=eb4a61ac1babffaa03d837d32a1107ea93e85e48", "patch": "@@ -124,6 +124,17 @@ UnifyRules::go ()\n   rust_debug (\"unify::go ltype={%s} rtype={%s}\", ltype->debug_str ().c_str (),\n \t      rtype->debug_str ().c_str ());\n \n+  // check bounds\n+  if (ltype->num_specified_bounds () > 0)\n+    {\n+      if (!ltype->bounds_compatible (*rtype, locus, true))\n+\t{\n+\t  // already emitted an error\n+\t  emit_error = false;\n+\t  return new TyTy::ErrorType (0);\n+\t}\n+    }\n+\n   switch (ltype->get_kind ())\n     {\n     case TyTy::INFER:"}, {"sha": "665836088beffc63842a698f7f733b92b6a1a9cd", "filename": "gcc/testsuite/rust/bounds1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fbounds1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fbounds1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fbounds1.rs?ref=eb4a61ac1babffaa03d837d32a1107ea93e85e48", "patch": "@@ -0,0 +1,19 @@\n+mod core {\n+    mod ops {\n+        #[lang = \"add\"]\n+        pub trait Add<Rhs = Self> {\n+            type Output;\n+\n+            fn add(self, rhs: Rhs) -> Self::Output;\n+        }\n+    }\n+}\n+\n+pub fn foo<T: core::ops::Add<Output = i32>>(a: T) -> i32 {\n+    // { dg-error \"bounds not satisfied for f32 .Add. is not satisfied\" \"\" { target *-*-* } .-1 }\n+    a + a\n+}\n+\n+pub fn main() {\n+    foo(123f32);\n+}"}, {"sha": "4e09f1089b01aa2f41574b40ec8c68f90f77e4ee", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-4.rs", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-4.rs?ref=eb4a61ac1babffaa03d837d32a1107ea93e85e48", "patch": "@@ -1,10 +1,67 @@\n-trait Copy {}\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[lang = \"clone\"]\n+pub trait Clone: Sized {\n+    fn clone(&self) -> Self;\n+\n+    fn clone_from(&mut self, source: &Self) {\n+        *self = source.clone()\n+    }\n+}\n+\n+mod impls {\n+    use super::Clone;\n+\n+    macro_rules! impl_clone {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Clone for $t {\n+                    fn clone(&self) -> Self {\n+                        *self\n+                    }\n+                }\n+            )*\n+        }\n+    }\n+\n+    impl_clone! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n+\n+#[lang = \"copy\"]\n+pub trait Copy: Clone {\n+    // Empty.\n+}\n+\n+mod copy_impls {\n+    use super::Copy;\n+\n+    macro_rules! impl_copy {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Copy for $t {}\n+            )*\n+        }\n+    }\n+\n+    impl_copy! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n \n extern \"rust-intrinsic\" {\n     pub fn atomic_store_seqcst<T: Copy>(dst: *mut T, val: T);\n     pub fn atomic_store_release<T: Copy>(dst: *mut T, val: T);\n     pub fn atomic_store_relaxed<T: Copy>(dst: *mut T, val: T);\n-    // pub fn atomic_store_unordered<T: Copy>(dst: *mut T, val: T);\n+    pub fn atomic_store_unordered<T: Copy>(dst: *mut T, val: T);\n }\n \n fn main() {\n@@ -15,6 +72,6 @@ fn main() {\n         atomic_store_seqcst(&mut dst, new_value);\n         atomic_store_release(&mut dst, new_value);\n         atomic_store_relaxed(&mut dst, new_value);\n-        // atomic_store_unordered(&mut dst, new_value);\n+        atomic_store_unordered(&mut dst, new_value);\n     }\n }"}, {"sha": "ffad0bd3a853aa5d232b9ba3750e8e3442fffc3d", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-5.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs?ref=eb4a61ac1babffaa03d837d32a1107ea93e85e48", "patch": "@@ -1,4 +1,61 @@\n-trait Copy {}\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[lang = \"clone\"]\n+pub trait Clone: Sized {\n+    fn clone(&self) -> Self;\n+\n+    fn clone_from(&mut self, source: &Self) {\n+        *self = source.clone()\n+    }\n+}\n+\n+mod impls {\n+    use super::Clone;\n+\n+    macro_rules! impl_clone {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Clone for $t {\n+                    fn clone(&self) -> Self {\n+                        *self\n+                    }\n+                }\n+            )*\n+        }\n+    }\n+\n+    impl_clone! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n+\n+#[lang = \"copy\"]\n+pub trait Copy: Clone {\n+    // Empty.\n+}\n+\n+mod copy_impls {\n+    use super::Copy;\n+\n+    macro_rules! impl_copy {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Copy for $t {}\n+            )*\n+        }\n+    }\n+\n+    impl_copy! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n \n extern \"rust-intrinsic\" {\n     pub fn atomic_store_seqcst<T: Copy>(dst: *mut T, value: T);\n@@ -24,6 +81,13 @@ impl VeryLargeType {\n     }\n }\n \n+impl Clone for VeryLargeType {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+impl Copy for VeryLargeType {}\n+\n fn main() {\n     let mut dst = VeryLargeType::new(0);\n     let mut b = false;"}, {"sha": "6e7383aa7e908215abedf37493e2f28fd3938b96", "filename": "gcc/testsuite/rust/execute/torture/atomic_load.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs?ref=eb4a61ac1babffaa03d837d32a1107ea93e85e48", "patch": "@@ -1,4 +1,61 @@\n-trait Copy {}\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[lang = \"clone\"]\n+pub trait Clone: Sized {\n+    fn clone(&self) -> Self;\n+\n+    fn clone_from(&mut self, source: &Self) {\n+        *self = source.clone()\n+    }\n+}\n+\n+mod impls {\n+    use super::Clone;\n+\n+    macro_rules! impl_clone {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Clone for $t {\n+                    fn clone(&self) -> Self {\n+                        *self\n+                    }\n+                }\n+            )*\n+        }\n+    }\n+\n+    impl_clone! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n+\n+#[lang = \"copy\"]\n+pub trait Copy: Clone {\n+    // Empty.\n+}\n+\n+mod copy_impls {\n+    use super::Copy;\n+\n+    macro_rules! impl_copy {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Copy for $t {}\n+            )*\n+        }\n+    }\n+\n+    impl_copy! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n \n extern \"rust-intrinsic\" {\n     pub fn atomic_load_seqcst<T: Copy>(src: *const T) -> T;"}, {"sha": "46960a7a1868961ed11eb3d12ed6b700df411a59", "filename": "gcc/testsuite/rust/execute/torture/atomic_store.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_store.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb4a61ac1babffaa03d837d32a1107ea93e85e48/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_store.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_store.rs?ref=eb4a61ac1babffaa03d837d32a1107ea93e85e48", "patch": "@@ -1,4 +1,61 @@\n-trait Copy {}\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[lang = \"clone\"]\n+pub trait Clone: Sized {\n+    fn clone(&self) -> Self;\n+\n+    fn clone_from(&mut self, source: &Self) {\n+        *self = source.clone()\n+    }\n+}\n+\n+mod impls {\n+    use super::Clone;\n+\n+    macro_rules! impl_clone {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Clone for $t {\n+                    fn clone(&self) -> Self {\n+                        *self\n+                    }\n+                }\n+            )*\n+        }\n+    }\n+\n+    impl_clone! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n+\n+#[lang = \"copy\"]\n+pub trait Copy: Clone {\n+    // Empty.\n+}\n+\n+mod copy_impls {\n+    use super::Copy;\n+\n+    macro_rules! impl_copy {\n+        ($($t:ty)*) => {\n+            $(\n+                impl Copy for $t {}\n+            )*\n+        }\n+    }\n+\n+    impl_copy! {\n+        usize u8 u16 u32 u64 // u128\n+        isize i8 i16 i32 i64 // i128\n+        f32 f64\n+        bool char\n+    }\n+}\n \n extern \"rust-intrinsic\" {\n     pub fn atomic_store_seqcst<T: Copy>(dst: *mut T, val: T);"}]}