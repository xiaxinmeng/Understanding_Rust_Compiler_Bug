{"sha": "da9c5f7856c929a3b80e22ab75ebeebce4409501", "node_id": "C_kwDOANBUbNoAKGRhOWM1Zjc4NTZjOTI5YTNiODBlMjJhYjc1ZWJlZWJjZTQ0MDk1MDE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-05T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-05T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "b954d9abceb5a1c06d6dd568f164ed1637ea6006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b954d9abceb5a1c06d6dd568f164ed1637ea6006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da9c5f7856c929a3b80e22ab75ebeebce4409501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9c5f7856c929a3b80e22ab75ebeebce4409501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9c5f7856c929a3b80e22ab75ebeebce4409501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9c5f7856c929a3b80e22ab75ebeebce4409501/comments", "author": null, "committer": null, "parents": [{"sha": "2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dda00b734888d3b53ac91160083b5c6cd5ca5c8"}], "stats": {"total": 476, "additions": 475, "deletions": 1}, "files": [{"sha": "6b6b1cece25279177c655c2e9ddc17e3d962c734", "filename": "gcc/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,60 @@\n+2021-10-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* doc/invoke.texi: Document -Warray-compare.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimplify.c (is_var_need_auto_init): DECL_HARD_REGISTER\n+\tvariables are not to be initialized.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* expr.h (non_mem_decl_p): Declare.\n+\t(mem_ref_refers_to_non_mem_p): Likewise.\n+\t* expr.c (non_mem_decl_p): Export.\n+\t(mem_ref_refers_to_non_mem_p): Likewise.\n+\t* internal-fn.c (expand_DEFERRED_INIT): Do not expand the LHS\n+\tbut check the base with mem_ref_refers_to_non_mem_p\n+\tand non_mem_decl_p.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102570\n+\t* tree-ssa-sccvn.h (vn_reference_op_struct): Document\n+\twe are using clique for the internal function code.\n+\t* tree-ssa-sccvn.c (vn_reference_op_eq): Compare the\n+\tinternal function code.\n+\t(print_vn_reference_ops): Print the internal function code.\n+\t(vn_reference_op_compute_hash): Hash it.\n+\t(copy_reference_ops_from_call): Record it.\n+\t(visit_stmt): Remove the restriction around internal function\n+\tcalls.\n+\t(fully_constant_vn_reference_p): Use fold_const_call and handle\n+\tinternal functions.\n+\t(vn_reference_eq): Compare call return types.\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Handle\n+\tgenerating calls to internal functions.\n+\t(compute_avail): Remove the restriction around internal function\n+\tcalls.\n+\n+2021-10-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102560\n+\t* gimple-ssa-warn-alloca.c (alloca_call_type): Remove static\n+\tmarker for invalid_range.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102587\n+\t* internal-fn.c (expand_DEFERRED_INIT): Guard register\n+\tinitialization path an avoid initializing VLA registers\n+\twith it.\n+\n+2021-10-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/rs6000/vxworks.h (TARGET_INIT_LIBFUNCS): Delete.\n+\n 2021-10-03  Martin Liska  <mliska@suse.cz>\n \n \t* toplev.c (toplev::main): Check opt_index if it is a part"}, {"sha": "e8ebd14ea96bb660664bf11826026972c8a3352a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1 +1 @@\n-20211004\n+20211005"}, {"sha": "42525c500e127f7c96d92048d9b255758ab4592d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,281 @@\n+2021-10-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:\n+\tAdd new entry for No_Dynamic_Accessibility_Checks documenting\n+\tbehavior.\n+\t* gnat_rm.texi: Regenerate.\n+\t* exp_ch4.adb (Expand_N_In): Perform special expansion for\n+\tmembership tests when No_Dynamic_Accessibility_Checks is active.\n+\t* sem_attr.adb (Resolve_Attribute): Skip static accessibility\n+\tcheck on actuals for anonymous access type formal parameters,\n+\tand add constants for readability.\n+\t* sem_util.adb (Function_Call_Or_Allocator_Level): Use the\n+\tinnermost master for determining the level for function calls\n+\twithin the alternative accessibility model.\n+\t(Type_Access_Level): Properly get the level for anonymous access\n+\tfunction result types.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(gnateA): This switch no longer looks at the formal parameter\n+\ttype being composite (as originally mandated by SPARK), but in\n+\tthe parameter passing mechanism being not specified (as\n+\tcurrently mandated by Ada).\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-10-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Operator_Symbol): Recognize strings as\n+\toperator names when they are the value of one of the Ada2022\n+\taspects for User_Defined_Literals.\n+\t* sem_ch13.adb (Analyze_One_Aspect): Handle an aspect value\n+\tgiven by an Operator_Name.\n+\t(Validate_Literal_Aspect): Call Analyze_Operator_Symbol when\n+\tneeded.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gen_il-gen.adb (Put_Make_Spec): Don't emit the LF character in\n+\tthe middle of a string, because the Put routine won't indent it\n+\tproperly.\n+\n+2021-10-04  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* gnat_cuda.adb (Remove_CUDA_Device_Entities): New function.\n+\t(Expand_CUDA_Package): Call Remove_CUDA_Device_Entities.\n+\t* gnat_cuda.ads (Expand_CUDA_Package): Expand documentation.\n+\t* sem_prag.adb (Analyze_Pragma): Remove warning about\n+\tCUDA_Device not being implemented.\n+\n+2021-10-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch7.adb (Analyze_Package_Specification): For types marked\n+\tas Must_Have_Preelab_Init, we now check for the presence of a\n+\tPreelaborable_Initialization aspect on the type, and pass the\n+\taspect's expression (if any) on the call to\n+\tHas_Preelaborable_Initialization (or pass Empty if the type has\n+\tno such aspect or the aspect has no associated expression).\n+\t* sem_util.ads (Has_Preelaborable_Initialization): Change\n+\tBoolean formal parameter Formal_Types_Have_Preelab_Init to\n+\tinstead be a formal of type Node_Id (named Preelab_Init_Expr),\n+\tto allow passing an expression that may be a conjunction of\n+\tPreelaborable_Initialization aspects. Revise spec comment\n+\taccordingly (and remove ??? comment).\n+\t* sem_util.adb (Type_Named_In_Preelab_Init_Expression): New\n+\tnested function with a result indicating whether a given type is\n+\tnamed as the prefix of a Preelaborable_Initialization attribute\n+\tin the expression of a corresponding P_I aspect.\n+\t(Has_Preelaborable_Initialization): For generic formal derived\n+\tand private types, test whether the type is named in the\n+\texpression Preelab_Init_Expr (by calling\n+\tType_Named_In_Preelab_Init_Expression), and if so, treat the\n+\tformal type as having preelaborable initialization (returning\n+\tTrue).\n+\t* libgnat/a-cobove.ads (Vector): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as Element_Type'Preelaborable_Initialization.\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\t* libgnat/a-cbdlli.ads (List): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as Element_Type'Preelaborable_Initialization.\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\t* libgnat/a-cbhama.ads (Map): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as (Element_Type'Preelaborable_Initialization and\n+\tKey_Type'Preelaborable_Initialization).\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\t* libgnat/a-cborma.ads (Map): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as (Element_Type'Preelaborable_Initialization and\n+\tKey_Type'Preelaborable_Initialization).\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\t* libgnat/a-cbhase.ads (Set): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as Element_Type'Preelaborable_Initialization.\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\t* libgnat/a-cborse.ads (Set): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as Element_Type'Preelaborable_Initialization.\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\t* libgnat/a-cbmutr.ads (Tree): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as Element_Type'Preelaborable_Initialization.\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\t* libgnat/a-coboho.ads (Holder): Replace pragma\n+\tPreelaborable_Initialization with the aspect, specifying its\n+\tvalue as Element_Type'Preelaborable_Initialization.\n+\t(Cursor): Replace pragma P_I with the aspect (defaulting to\n+\tTrue).\n+\n+2021-10-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-textio.adb: Mark body out of SPARK.\n+\t* libgnat/a-textio.ads: Mark spec in SPARK and private part out\n+\tof SPARK.\n+\t* sem.adb (Semantics.Do_Analyze): Similar to ghost code\n+\tattributes, save and restore value of\n+\tIgnore_SPARK_Mode_Pragmas_In_Instance.\n+\n+2021-10-04  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-regpat.ads: Change Data_First to Data'First. Change\n+\t\"still\" to \"always\".  Similar changes for Data_Last.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sprint.adb (Sprint_Node_Actual): Refactor code for generic\n+\tpackage and subprogram declarations.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Indexed_Component, Resolve_Slice): Rename\n+\tthe local constant Name to Pref; remove repeated calls to\n+\tPrefix.\n+\n+2021-10-04  Matthieu Eyraud  <eyraud@adacore.com>\n+\n+\t* scos.ads: Extend the documentation.\n+\t* par_sco.adb (Process_Decisions): Emit specific SCOs for\n+\tquantified expressions.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Selected_Range_Checks): Fix style.\n+\t* exp_ch4.adb (Expand_N_Slice): Fix style and comment.\n+\t* sem_res.adb (Resolve_Indexed_Component): Fix style.\n+\n+2021-10-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-strbou.ads: Add comments.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Evaluation of attribute\n+\tLeading_Part with illegal second parameter is now similar to\n+\tevaluation of Remainder with its second parameter being zero.\n+\n+2021-10-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Declare_Expression): Use tree traversals\n+\tto perform name capture of local entities in the expression of\n+\tthe construct.\n+\t* exp_util.adb (Possible_Side_Effects_In_SPARK): Do not apply to\n+\tthe prefix of an attribute reference Reduce when that prefix is\n+\tan aggregate, because it will be expanded into a loop, and has\n+\tno identifiable type.\n+\n+2021-10-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch8.adb (Build_Class_Wide_Wrapper): Fix handling of\n+\tclass-wide subtypes; required to handle chains of\n+\tinstantiations. Adding also code to identify these wrappers and\n+\tproperly resolve instantiations where the wrapper and a tagged\n+\ttype primitive are visible.\n+\t* einfo.ads (Is_Class_Wide_Wrapper): Adding documentation.\n+\t* gen_il-fields.ads (Opt_Field_Enum): Adding\n+\tIs_Class_Wide_Wrapper.\n+\t* gen_il-gen-gen_entities.adb (Root_Entity_Type): Adding\n+\tsemantic flag Is_Class_Wide_Wrapper.\n+\n+2021-10-04  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo.ads (Declaration_Node): Document that Declaration_Node\n+\tfor Itypes.\n+\t* einfo-utils.adb (Declaration_Node): Make it return Empty for\n+\tItypes, or a proper type or subtype declaration.\n+\t* gen_il-gen.adb: Minor comment improvement.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Slice): Fix application of range checks\n+\tto slice range given as a subtype name.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Slice): Handle range given as a subtype\n+\tindication.\n+\n+2021-10-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Slice): Add custom handling of attribute\n+\tImage and similar in CodePeer mode. This complements the\n+\texisting custom handling of these attributes in\n+\tExpand_N_Attribute_Reference.\n+\n+2021-10-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Is_Variable): Add check for implicitly\n+\tdereferenced access types\n+\t(Is_Dependent_Component_Of_Mutable_Object): Set Prefix_Type when\n+\tnot specified.\n+\n+2021-10-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/the_gnat_compilation_model.rst (Binding generation):\n+\tDocument specific behavior for /include/-ending paths and update.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-10-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\tPR ada/102073\n+\t* socket.c (__gnat_gethostbyaddr, __gnat_inet_pton): Add missing\n+\treturn statements.\n+\n+2021-10-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Function_Or_Allocator_Level): Properly handle\n+\tdirect function calls in the default alternative accessibility\n+\tchecking mode.\n+\n+2021-10-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.adb (Is_Library_Level_Entity): Return False for\n+\tentities defined in E_Loop scopes. This change is not required\n+\tby the frontend; it is required by tools that depend on the\n+\tfrontend sources.\n+\t* einfo-utils.adb (Is_Dynamic_Scope): Code cleanup.\n+\n+2021-10-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Accessibility_Level): Add a case to handle\n+\trenamed subprograms in addition to renamed objects.\n+\n+2021-10-04  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnarl/s-osinte__vxworks.ads (tlsKeyCreate): Return int.\n+\t* libgnarl/s-tpopsp__vxworks-rtp.adb (ERROR): Declare from\n+\tSystem.VxWorks.Ext.ERROR.\n+\t(Initialize): Declare IERR. Assert it.\n+\t* libgnarl/s-tpopsp__vxworks.adb (ERROR): Declare from\n+\tSystem.VxWorks.Ext.ERROR.\n+\t(Is_Valid_Task): Declare IERR. Test return.\n+\t* libgnarl/s-vxwext__kernel.adb (semDelete): Return STATUS.\n+\n+2021-10-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Copy the Needs_Debug_Info flag from the\n+\ttype onto the TSD object.\n+\n+2021-10-04  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Is_Repeatedly_Evaluated): Handle the case of an\n+\tOld attribute reference that occurs within what was originally a\n+\tquantified expression but which expansion has transformed into\n+\tan Expression_With_Actions.\n+\n+2021-10-04  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Indexed_Component): The two improvements\n+\tdescribed above.\n+\n 2021-10-01  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch6.adb (Expand_Call_Helper): Do not call"}, {"sha": "c0646694b2aea1ceabaab345ca646635909330eb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,10 @@\n+2021-10-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* c-common.h (do_warn_array_compare): Declare.\n+\t* c-warn.c (do_warn_array_compare): New.\n+\t* c.opt (Warray-compare): New option.\n+\n 2021-10-02  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* c-format.c: Remove a test of TARGET_FORMAT_TYPES with"}, {"sha": "115e883d7ce03905b58255d6ebcf6afb149da231", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,8 @@\n+2021-10-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* c-typeck.c (parser_build_binary_op): Call do_warn_array_compare.\n+\n 2021-10-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/102103"}, {"sha": "b795a729d6433fba8bc38ecc5f87c02b9ddcf043", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,8 @@\n+2021-10-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* typeck.c (cp_build_binary_op): Call do_warn_array_compare.\n+\n 2021-10-03  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/101765"}, {"sha": "ed5db13c364b442fe95cdaeb6c45f373cedeb488", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,14 @@\n+2021-10-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/102574\n+\t* d-spec.cc (lang_specific_driver): Link libstdc++ statically if\n+\t-static-libstdc++ was given on command-line.\n+\n+2021-10-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (d_handle_optimize_attribute): Save target node before\n+\tcalling parse_optimize_options in case it changes.\n+\n 2021-09-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/102185"}, {"sha": "da5d1a23931577f85f81b870ed091426e6bd0bd3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,10 @@\n+2021-10-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/54753\n+\t* resolve.c (can_generate_init, resolve_fl_variable_derived,\n+\tresolve_symbol): Only do initialization with intent(out) if not\n+\tinside of an interface block.\n+\n 2021-10-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/102103"}, {"sha": "e339cb119f05280fac399704a08d175516d15ce3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,38 @@\n+2021-10-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* c-c++-common/Warray-compare-1.c: New test.\n+\t* c-c++-common/Warray-compare-2.c: New test.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/auto-init-hardreg-1.c: New testcase.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-c++-common/pr102285.c: New testcase.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102570\n+\t* gcc.dg/tree-ssa/ssa-fre-96.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-pre-33.c: Likewise.\n+\n+2021-10-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/Walloca2.C: New test.\n+\n+2021-10-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102587\n+\t* gcc.target/aarch64/sve/pr102587-1.c: New testcase.\n+\t* gcc.target/aarch64/sve/pr102587-2.c: Likewise.\n+\n+2021-10-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/54753\n+\t* gfortran.dg/assumed_rank_23.f90: New file.\n+\n 2021-10-03  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/101765"}, {"sha": "8602c5c5ed3933cbaafc62c8abcff413976b45ed", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9c5f7856c929a3b80e22ab75ebeebce4409501/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9c5f7856c929a3b80e22ab75ebeebce4409501/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da9c5f7856c929a3b80e22ab75ebeebce4409501", "patch": "@@ -1,3 +1,72 @@\n+2021-10-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/forward_list.h (forward_list): Use non-deduced\n+\tcontext for allocator parameter of allocator-extended copy and\n+\tmove constructors.\n+\t* include/bits/stl_bvector.h (vector<bool>): Likewise.\n+\t* include/bits/stl_deque.h (deque): Likewise.\n+\t* include/bits/stl_list.h (list): Likewise.\n+\t* include/bits/stl_map.h (map): Likewise.\n+\t* include/bits/stl_multimap.h (multimap): Likewise.\n+\t* include/bits/stl_multiset.h (multiset): Likewise.\n+\t* include/bits/stl_set.h (set): Likewise.\n+\t* include/bits/stl_vector.h (vector): Likewise.\n+\t* include/bits/stl_queue.h (queue, priority_queue): Do not\n+\tconstrain Allocator template parameter of deduction guides that\n+\thave a Container parameter.\n+\t* include/bits/stl_stack.h (stack): Likewise.\n+\t* include/debug/deque (__gnu_debug::deque): Use non-deduced\n+\tcontext for allocator parameter of allocator-extended copy and\n+\tmove constructors.\n+\t* include/debug/list (__gnu_debug::list): Likewise.\n+\t* include/debug/map.h (__gnu_debug::map): Likewise.\n+\t* include/debug/multimap.h (__gnu_debug::multimap): Likewise.\n+\t* include/debug/multiset.h (__gnu_debug::multiset): Likewise.\n+\t* include/debug/set.h (__gnu_debug::set): Likewise.\n+\t* include/debug/vector (__gnu_debug::vector): Likewise.\n+\t* testsuite/23_containers/deque/cons/deduction.cc: Test class\n+\ttemplate argument deduction with non-deduced allocator\n+\targuments.\n+\t* testsuite/23_containers/forward_list/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/map/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/multimap/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/multiset/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/priority_queue/deduction.cc: Likewise.\n+\t* testsuite/23_containers/queue/deduction.cc: Likewise.\n+\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/stack/deduction.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/cons/deduction.cc: Likewise.\n+\n+2021-10-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__detail::__variant::__as): Add missing\n+\tnoexcept to first overload.\n+\n+2021-10-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (basic_string(nullptr_t)): Define\n+\tas deleted.\n+\t(operator=(nullptr_t)): Likewise.\n+\t* include/bits/cow_string.h (basic_string(nullptr_t)): Likewise.\n+\t(operator=(nullptr_t)): Likewise.\n+\t* include/std/string_view (basic_string_view(nullptr_t)):\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/cons/char/nullptr.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/cons/char/nonnull.cc:\n+\tChange dg-warning to dg-error.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/nonnull.cc:\n+\tLikewise.\n+\n 2021-10-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++17/fs_ops.cc (create_directory): Fix typo in enum name."}]}