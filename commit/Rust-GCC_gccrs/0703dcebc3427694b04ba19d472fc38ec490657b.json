{"sha": "0703dcebc3427694b04ba19d472fc38ec490657b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwM2RjZWJjMzQyNzY5NGIwNGJhMTlkNDcyZmMzOGVjNDkwNjU3Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-03T06:26:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-01-03T06:26:52Z"}, "message": "re PR target/14631 (common subexpression elimilation error with sse2 instrinsic _mm_insert_epi16)\n\n\tPR target/14631\n\t* config/i386/i386.c (ix86_expand_builtin): [IX86_BUILTIN_PINSRW,\n\tIX86_BUILTIN_PINSRW128]: Fix wrong selector range in error message.\n\t* config/i386/i386.md (mmx_pinsrw, sse2_pinsrw): Fix selector\n\thandling.\n\t(*mmx_pinsrw, *sse2_pinsrw): New patterns.\n\t* config/i386/i386/predicates.md (const_pow2_1_to_8_operand,\n\tconst_pow2_1_to_128_operand): New predicates.\n\nCo-Authored-By: Uros Bizjak <uros@kss-loka.si>\n\nFrom-SVN: r92823", "tree": {"sha": "caaa06a0bf282c1dbfcf504a1f4e98613e5f930a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caaa06a0bf282c1dbfcf504a1f4e98613e5f930a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0703dcebc3427694b04ba19d472fc38ec490657b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0703dcebc3427694b04ba19d472fc38ec490657b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0703dcebc3427694b04ba19d472fc38ec490657b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0703dcebc3427694b04ba19d472fc38ec490657b/comments", "author": null, "committer": null, "parents": [{"sha": "1d7bed252c767f394bf29fdc81207ce7d9fbad97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7bed252c767f394bf29fdc81207ce7d9fbad97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d7bed252c767f394bf29fdc81207ce7d9fbad97"}], "stats": {"total": 89, "additions": 75, "deletions": 14}, "files": [{"sha": "699953832561697abc6a924bbff134e467f6c09d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0703dcebc3427694b04ba19d472fc38ec490657b", "patch": "@@ -1,3 +1,15 @@\n+2005-01-03  Richard Henderson  <rth@redhat.com>\n+\t    Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR target/14631\n+\t* config/i386/i386.c (ix86_expand_builtin): [IX86_BUILTIN_PINSRW,\n+\tIX86_BUILTIN_PINSRW128]: Fix wrong selector range in error message.\n+\t* config/i386/i386.md (mmx_pinsrw, sse2_pinsrw): Fix selector\n+\thandling.\n+\t(*mmx_pinsrw, *sse2_pinsrw): New patterns.\n+\t* config/i386/i386/predicates.md (const_pow2_1_to_8_operand,\n+\tconst_pow2_1_to_128_operand): New predicates.\n+\n 2005-01-02  Greg McGary  <greg@mcgary.org>\n \n \t* tree-mudflap.c (mf_varname_tree): decl_printable_name handles"}, {"sha": "23129a08943743b651186c306456893b76c56086", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0703dcebc3427694b04ba19d472fc38ec490657b", "patch": "@@ -13437,7 +13437,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       if (! (*insn_data[icode].operand[3].predicate) (op2, mode2))\n \t{\n \t  error (\"selector must be an integer constant in the range 0..%i\",\n-\t\t  fcode == IX86_BUILTIN_PINSRW ? 15:255);\n+\t\t  fcode == IX86_BUILTIN_PINSRW ? 3:7);\n \t  return const0_rtx;\n \t}\n       if (target == 0"}, {"sha": "94832181d709ca0b98463666f0fbc63b36ed4146", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0703dcebc3427694b04ba19d472fc38ec490657b", "patch": "@@ -21446,14 +21446,31 @@\n \n ;; MMX insert/extract/shuffle\n \n-(define_insn \"mmx_pinsrw\"\n+(define_expand \"mmx_pinsrw\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+        (vec_merge:V4HI\n+\t  (match_operand:V4HI 1 \"register_operand\" \"\")\n+          (vec_duplicate:V4HI\n+            (match_operand:SI 2 \"nonimmediate_operand\" \"\"))\n+          (match_operand:SI 3 \"const_0_to_3_operand\" \"\")))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+{\n+  operands[2] = gen_lowpart (HImode, operands[2]);\n+  operands[3] = GEN_INT (1 << INTVAL (operands[3]));\n+})\n+\n+(define_insn \"*mmx_pinsrw\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (vec_merge:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t\t(vec_duplicate:V4HI\n-\t\t\t (truncate:HI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-\t\t\t(match_operand:SI 3 \"const_0_to_15_operand\" \"N\")))]\n+        (vec_merge:V4HI\n+\t  (match_operand:V4HI 1 \"register_operand\" \"0\")\n+          (vec_duplicate:V4HI\n+            (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))\n+          (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"N\")))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\"\n+{\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n+}\n   [(set_attr \"type\" \"mmxcvt\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -23141,15 +23158,31 @@\n \n ;; MMX insert/extract/shuffle\n \n-(define_insn \"sse2_pinsrw\"\n+(define_expand \"sse2_pinsrw\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n+        (vec_merge:V8HI\n+\t  (match_operand:V8HI 1 \"register_operand\" \"\")\n+          (vec_duplicate:V8HI\n+            (match_operand:SI 2 \"nonimmediate_operand\" \"\"))\n+          (match_operand:SI 3 \"const_0_to_7_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[2] = gen_lowpart (HImode, operands[2]);\n+  operands[3] = GEN_INT (1 << INTVAL (operands[3]));\n+})\n+\n+(define_insn \"*sse2_pinsrw\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-        (vec_merge:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t\t(vec_duplicate:V8HI\n-\t\t\t (truncate:HI\n-\t\t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-\t\t\t(match_operand:SI 3 \"const_0_to_255_operand\" \"N\")))]\n+        (vec_merge:V8HI\n+\t  (match_operand:V8HI 1 \"register_operand\" \"0\")\n+          (vec_duplicate:V8HI\n+            (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))\n+          (match_operand:SI 3 \"const_pow2_1_to_128_operand\" \"N\")))]\n   \"TARGET_SSE2\"\n-  \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\"\n+{\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n+}\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"TI\")])\n "}, {"sha": "5fa93fa05b95a935b4eaf6523ba0a627ebd8d4b7", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0703dcebc3427694b04ba19d472fc38ec490657b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=0703dcebc3427694b04ba19d472fc38ec490657b", "patch": "@@ -546,6 +546,22 @@\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 255\")))\n \n+;; Match exactly one bit in 4-bit mask.\n+(define_predicate \"const_pow2_1_to_8_operand\"\n+  (match_code \"const_int\")\n+{\n+  unsigned int log = exact_log2 (INTVAL (op));\n+  return log <= 3;\n+})\n+\n+;; Match exactly one bit in 8-bit mask.\n+(define_predicate \"const_pow2_1_to_128_operand\"\n+  (match_code \"const_int\")\n+{\n+  unsigned int log = exact_log2 (INTVAL (op));\n+  return log <= 7;\n+})\n+\n ;; True if this is a constant appropriate for an increment or decrement.\n (define_predicate \"incdec_operand\"\n   (match_code \"const_int\")"}]}