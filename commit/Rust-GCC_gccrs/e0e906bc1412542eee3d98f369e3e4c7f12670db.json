{"sha": "e0e906bc1412542eee3d98f369e3e4c7f12670db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlOTA2YmMxNDEyNTQyZWVlM2Q5OGYzNjllM2U0YzdmMTI2NzBkYg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-05-07T10:51:15Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-05-07T10:51:15Z"}, "message": "Add execution + assembler tests of AArch64 EXT intrinsics.\n\n\tgcc.target/aarch64/simd/ext_f32.x: New file.\n\tgcc.target/aarch64/simd/ext_f32_1.c: New file.\n\tgcc.target/aarch64/simd/ext_p16.x: New file.\n\tgcc.target/aarch64/simd/ext_p16_1.c: New file.\n\tgcc.target/aarch64/simd/ext_p8.x: New file.\n\tgcc.target/aarch64/simd/ext_p8_1.c: New file.\n\tgcc.target/aarch64/simd/ext_s16.x: New file.\n\tgcc.target/aarch64/simd/ext_s16_1.c: New file.\n\tgcc.target/aarch64/simd/ext_s32.x: New file.\n\tgcc.target/aarch64/simd/ext_s32_1.c: New file.\n\tgcc.target/aarch64/simd/ext_s64.x: New file.\n\tgcc.target/aarch64/simd/ext_s64_1.c: New file.\n\tgcc.target/aarch64/simd/ext_s8.x: New file.\n\tgcc.target/aarch64/simd/ext_s8_1.c: New file.\n\tgcc.target/aarch64/simd/ext_u16.x: New file.\n\tgcc.target/aarch64/simd/ext_u16_1.c: New file.\n\tgcc.target/aarch64/simd/ext_u32.x: New file.\n\tgcc.target/aarch64/simd/ext_u32_1.c: New file.\n\tgcc.target/aarch64/simd/ext_u64.x: New file.\n\tgcc.target/aarch64/simd/ext_u64_1.c: New file.\n\tgcc.target/aarch64/simd/ext_u8.x: New file.\n\tgcc.target/aarch64/simd/ext_u8_1.c: New file.\n\tgcc.target/aarch64/simd/ext_f64.c: New file.\n\tgcc.target/aarch64/simd/extq_f32.x: New file.\n\tgcc.target/aarch64/simd/extq_f32_1.c: New file.\n\tgcc.target/aarch64/simd/extq_p16.x: New file.\n\tgcc.target/aarch64/simd/extq_p16_1.c: New file.\n\tgcc.target/aarch64/simd/extq_p8.x: New file.\n\tgcc.target/aarch64/simd/extq_p8_1.c: New file.\n\tgcc.target/aarch64/simd/extq_s16.x: New file.\n\tgcc.target/aarch64/simd/extq_s16_1.c: New file.\n\tgcc.target/aarch64/simd/extq_s32.x: New file.\n\tgcc.target/aarch64/simd/extq_s32_1.c: New file.\n\tgcc.target/aarch64/simd/extq_s64.x: New file.\n\tgcc.target/aarch64/simd/extq_s64_1.c: New file.\n\tgcc.target/aarch64/simd/extq_s8.x: New file.\n\tgcc.target/aarch64/simd/extq_s8_1.c: New file.\n\tgcc.target/aarch64/simd/extq_u16.x: New file.\n\tgcc.target/aarch64/simd/extq_u16_1.c: New file.\n\tgcc.target/aarch64/simd/extq_u32.x: New file.\n\tgcc.target/aarch64/simd/extq_u32_1.c: New file.\n\tgcc.target/aarch64/simd/extq_u64.x: New file.\n\tgcc.target/aarch64/simd/extq_u64_1.c: New file.\n\tgcc.target/aarch64/simd/extq_u8.x: New file.\n\tgcc.target/aarch64/simd/extq_u8_1.c: New file.\n\tgcc.target/aarch64/simd/extq_f64.c: New file.\n\nFrom-SVN: r210152", "tree": {"sha": "89fb8fdbd1a2a9885a415dd0ce670e2658ae3b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89fb8fdbd1a2a9885a415dd0ce670e2658ae3b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0e906bc1412542eee3d98f369e3e4c7f12670db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e906bc1412542eee3d98f369e3e4c7f12670db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e906bc1412542eee3d98f369e3e4c7f12670db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e906bc1412542eee3d98f369e3e4c7f12670db/comments", "author": null, "committer": null, "parents": [{"sha": "1d175503d523c7c2404393bbdc08f4dd4cdb9054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d175503d523c7c2404393bbdc08f4dd4cdb9054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d175503d523c7c2404393bbdc08f4dd4cdb9054"}], "stats": {"total": 2229, "additions": 2229, "deletions": 0}, "files": [{"sha": "656de7069a3a682f56c60642b8f880907d367136", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -1,3 +1,52 @@\n+2014-05-07  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tgcc.target/aarch64/simd/ext_f32.x: New file.\n+\tgcc.target/aarch64/simd/ext_f32_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_p16.x: New file.\n+\tgcc.target/aarch64/simd/ext_p16_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_p8.x: New file.\n+\tgcc.target/aarch64/simd/ext_p8_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_s16.x: New file.\n+\tgcc.target/aarch64/simd/ext_s16_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_s32.x: New file.\n+\tgcc.target/aarch64/simd/ext_s32_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_s64.x: New file.\n+\tgcc.target/aarch64/simd/ext_s64_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_s8.x: New file.\n+\tgcc.target/aarch64/simd/ext_s8_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_u16.x: New file.\n+\tgcc.target/aarch64/simd/ext_u16_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_u32.x: New file.\n+\tgcc.target/aarch64/simd/ext_u32_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_u64.x: New file.\n+\tgcc.target/aarch64/simd/ext_u64_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_u8.x: New file.\n+\tgcc.target/aarch64/simd/ext_u8_1.c: New file.\n+\tgcc.target/aarch64/simd/ext_f64.c: New file.\n+\tgcc.target/aarch64/simd/extq_f32.x: New file.\n+\tgcc.target/aarch64/simd/extq_f32_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_p16.x: New file.\n+\tgcc.target/aarch64/simd/extq_p16_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_p8.x: New file.\n+\tgcc.target/aarch64/simd/extq_p8_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_s16.x: New file.\n+\tgcc.target/aarch64/simd/extq_s16_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_s32.x: New file.\n+\tgcc.target/aarch64/simd/extq_s32_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_s64.x: New file.\n+\tgcc.target/aarch64/simd/extq_s64_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_s8.x: New file.\n+\tgcc.target/aarch64/simd/extq_s8_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_u16.x: New file.\n+\tgcc.target/aarch64/simd/extq_u16_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_u32.x: New file.\n+\tgcc.target/aarch64/simd/extq_u32_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_u64.x: New file.\n+\tgcc.target/aarch64/simd/extq_u64_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_u8.x: New file.\n+\tgcc.target/aarch64/simd/extq_u8_1.c: New file.\n+\tgcc.target/aarch64/simd/extq_f64.c: New file.\n+\n 2014-05-07  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/vtrns32.c: Expect zip[12] insn rather than trn[12]."}, {"sha": "b511e516dab5d02a0eb8720fbb80103f834ad7aa", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_f32.x", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f32.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,30 @@\n+extern void abort (void);\n+\n+float32x2_t\n+test_vext_f32_1 (float32x2_t a, float32x2_t b)\n+{\n+  return vext_f32 (a, b, 1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  float32_t arr1[] = {0, 1};\n+  float32x2_t in1 = vld1_f32 (arr1);\n+  float32_t arr2[] = {2, 3};\n+  float32x2_t in2 = vld1_f32 (arr2);\n+  float32_t exp[2];\n+  float32x2_t expected;\n+  float32x2_t actual = test_vext_f32_1 (in1, in2);\n+\n+  for (i = 0; i < 2; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_f32 (exp);\n+  for (i = 0; i < 2; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "806c10a65604150f8fdb7a6b74cbddc346bab121", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_f32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f32_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextf32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_f32.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#\\[0-9\\]+\\(?:.4)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "09aecba2a110c7885d3c1455f1c8789953fb3d71", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_f64_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_f64_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,25 @@\n+/* Test the `vextf64' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  float64x1_t in1 = {0};\n+  float64x1_t in2 = {1};\n+  float64x1_t actual = vext_f64 (in1, in2, 0);\n+  if (actual != in1)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* Do not scan-assembler.  An EXT instruction could be emitted, but would merely\n+   return its first argument, so it is legitimate to optimize it out.  */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b5b381435180d25cf77c04dce2dfd86081fe6b25", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_p16.x", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p16.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,58 @@\n+extern void abort (void);\n+\n+poly16x4_t\n+test_vext_p16_1 (poly16x4_t a, poly16x4_t b)\n+{\n+  return vext_p16 (a, b, 1);\n+}\n+\n+poly16x4_t\n+test_vext_p16_2 (poly16x4_t a, poly16x4_t b)\n+{\n+  return vext_p16 (a, b, 2);\n+}\n+\n+poly16x4_t\n+test_vext_p16_3 (poly16x4_t a, poly16x4_t b)\n+{\n+  return vext_p16 (a, b, 3);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  poly16_t arr1[] = {0, 1, 2, 3};\n+  poly16x4_t in1 = vld1_p16 (arr1);\n+  poly16_t arr2[] = {4, 5, 6, 7};\n+  poly16x4_t in2 = vld1_p16 (arr2);\n+  poly16_t exp[4];\n+  poly16x4_t expected;\n+  poly16x4_t actual = test_vext_p16_1 (in1, in2);\n+\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_p16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p16_2 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 2;\n+  expected = vld1_p16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p16_3 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 3;\n+  expected = vld1_p16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "86b8660af0bbc9e0b3efedd2f94b7a7840625751", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_p16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p16_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextp16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_p16.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "95b37b1b87d065f7c7efdea4601277cda5061bc0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_p8.x", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p8.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,114 @@\n+extern void abort (void);\n+\n+poly8x8_t\n+test_vext_p8_1 (poly8x8_t a, poly8x8_t b)\n+{\n+  return vext_p8 (a, b, 1);\n+}\n+\n+poly8x8_t\n+test_vext_p8_2 (poly8x8_t a, poly8x8_t b)\n+{\n+  return vext_p8 (a, b, 2);\n+}\n+\n+poly8x8_t\n+test_vext_p8_3 (poly8x8_t a, poly8x8_t b)\n+{\n+  return vext_p8 (a, b, 3);\n+}\n+\n+poly8x8_t\n+test_vext_p8_4 (poly8x8_t a, poly8x8_t b)\n+{\n+  return vext_p8 (a, b, 4);\n+}\n+\n+poly8x8_t\n+test_vext_p8_5 (poly8x8_t a, poly8x8_t b)\n+{\n+  return vext_p8 (a, b, 5);\n+}\n+\n+poly8x8_t\n+test_vext_p8_6 (poly8x8_t a, poly8x8_t b)\n+{\n+  return vext_p8 (a, b, 6);\n+}\n+\n+poly8x8_t\n+test_vext_p8_7 (poly8x8_t a, poly8x8_t b)\n+{\n+  return vext_p8 (a, b, 7);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  poly8_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+  poly8x8_t in1 = vld1_p8 (arr1);\n+  poly8_t arr2[] = {8, 9, 10, 11, 12, 13, 14, 15};\n+  poly8x8_t in2 = vld1_p8 (arr2);\n+  poly8_t exp[8];\n+  poly8x8_t expected;\n+  poly8x8_t actual = test_vext_p8_1 (in1, in2);\n+\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_p8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p8_2 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 2;\n+  expected = vld1_p8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p8_3 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 3;\n+  expected = vld1_p8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p8_4 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 4;\n+  expected = vld1_p8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p8_5 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 5;\n+  expected = vld1_p8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p8_6 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 6;\n+  expected = vld1_p8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_p8_7 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 7;\n+  expected = vld1_p8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "aae0575627e3a82ba12bb34f7bef5e86a97a9b6d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_p8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_p8_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextp8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_p8.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#?\\[0-9\\]+\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 7 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "78ef0adf005c0212f8426eb6866e52f65c0b6516", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s16.x", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s16.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,58 @@\n+extern void abort (void);\n+\n+int16x4_t\n+test_vext_s16_1 (int16x4_t a, int16x4_t b)\n+{\n+  return vext_s16 (a, b, 1);\n+}\n+\n+int16x4_t\n+test_vext_s16_2 (int16x4_t a, int16x4_t b)\n+{\n+  return vext_s16 (a, b, 2);\n+}\n+\n+int16x4_t\n+test_vext_s16_3 (int16x4_t a, int16x4_t b)\n+{\n+  return vext_s16 (a, b, 3);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  int16_t arr1[] = {0, 1, 2, 3};\n+  int16x4_t in1 = vld1_s16 (arr1);\n+  int16_t arr2[] = {4, 5, 6, 7};\n+  int16x4_t in2 = vld1_s16 (arr2);\n+  int16_t exp[4];\n+  int16x4_t expected;\n+  int16x4_t actual = test_vext_s16_1 (in1, in2);\n+\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_s16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s16_2 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 2;\n+  expected = vld1_s16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s16_3 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 3;\n+  expected = vld1_s16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "fd9ebd99098157283cde8c2635a8cc88a2945819", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s16_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vexts16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_s16.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "066ceac007caa67469c5e845bd4774296d548feb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s32.x", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s32.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,30 @@\n+extern void abort (void);\n+\n+int32x2_t\n+test_vext_s32_1 (int32x2_t a, int32x2_t b)\n+{\n+  return vext_s32 (a, b, 1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  int32_t arr1[] = {0, 1};\n+  int32x2_t in1 = vld1_s32 (arr1);\n+  int32_t arr2[] = {2, 3};\n+  int32x2_t in2 = vld1_s32 (arr2);\n+  int32_t exp[2];\n+  int32x2_t expected;\n+  int32x2_t actual = test_vext_s32_1 (in1, in2);\n+\n+  for (i = 0; i < 2; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_s32 (exp);\n+  for (i = 0; i < 2; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "05c5d60646229e61e692cb533090f949c1eef9ff", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s32_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vexts32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_s32.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#\\[0-9\\]+\\(?:.4)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c71011a5157a207fe68fe814ed80658fd5e0f90f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s64.x", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,17 @@\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  int64_t arr1[] = {0};\n+  int64x1_t in1 = vld1_s64 (arr1);\n+  int64_t arr2[] = {1};\n+  int64x1_t in2 = vld1_s64 (arr2);\n+  int64x1_t actual = vext_s64 (in1, in2, 0);\n+  if (actual != in1)\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "1e2748d97431457e0fe0f2f9f04e610d40c43e8d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s64_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vexts64' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_s64.x\"\n+\n+/* Do not scan-assembler.  An EXT instruction could be emitted, but would merely\n+   return its first argument, so it is legitimate to optimize it out.  */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e79ef0aee807e842d86d626207bc0ce4e56d65c6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s8.x", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s8.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,114 @@\n+extern void abort (void);\n+\n+int8x8_t\n+test_vext_s8_1 (int8x8_t a, int8x8_t b)\n+{\n+  return vext_s8 (a, b, 1);\n+}\n+\n+int8x8_t\n+test_vext_s8_2 (int8x8_t a, int8x8_t b)\n+{\n+  return vext_s8 (a, b, 2);\n+}\n+\n+int8x8_t\n+test_vext_s8_3 (int8x8_t a, int8x8_t b)\n+{\n+  return vext_s8 (a, b, 3);\n+}\n+\n+int8x8_t\n+test_vext_s8_4 (int8x8_t a, int8x8_t b)\n+{\n+  return vext_s8 (a, b, 4);\n+}\n+\n+int8x8_t\n+test_vext_s8_5 (int8x8_t a, int8x8_t b)\n+{\n+  return vext_s8 (a, b, 5);\n+}\n+\n+int8x8_t\n+test_vext_s8_6 (int8x8_t a, int8x8_t b)\n+{\n+  return vext_s8 (a, b, 6);\n+}\n+\n+int8x8_t\n+test_vext_s8_7 (int8x8_t a, int8x8_t b)\n+{\n+  return vext_s8 (a, b, 7);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  int8_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+  int8x8_t in1 = vld1_s8 (arr1);\n+  int8_t arr2[] = {8, 9, 10, 11, 12, 13, 14, 15};\n+  int8x8_t in2 = vld1_s8 (arr2);\n+  int8_t exp[8];\n+  int8x8_t expected;\n+  int8x8_t actual = test_vext_s8_1 (in1, in2);\n+\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_s8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s8_2 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 2;\n+  expected = vld1_s8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s8_3 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 3;\n+  expected = vld1_s8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s8_4 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 4;\n+  expected = vld1_s8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s8_5 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 5;\n+  expected = vld1_s8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s8_6 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 6;\n+  expected = vld1_s8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_s8_7 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 7;\n+  expected = vld1_s8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "c368ebad37f2c6a16b2c912e583722385b40e729", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s8_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vexts8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_s8.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#?\\[0-9\\]+\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 7 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5a16ef32fc69f3e8b51b870b8ee41530bdb362dc", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u16.x", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u16.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,58 @@\n+extern void abort (void);\n+\n+uint16x4_t\n+test_vext_u16_1 (uint16x4_t a, uint16x4_t b)\n+{\n+  return vext_u16 (a, b, 1);\n+}\n+\n+uint16x4_t\n+test_vext_u16_2 (uint16x4_t a, uint16x4_t b)\n+{\n+  return vext_u16 (a, b, 2);\n+}\n+\n+uint16x4_t\n+test_vext_u16_3 (uint16x4_t a, uint16x4_t b)\n+{\n+  return vext_u16 (a, b, 3);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  uint16_t arr1[] = {0, 1, 2, 3};\n+  uint16x4_t in1 = vld1_u16 (arr1);\n+  uint16_t arr2[] = {4, 5, 6, 7};\n+  uint16x4_t in2 = vld1_u16 (arr2);\n+  uint16_t exp[4];\n+  uint16x4_t expected;\n+  uint16x4_t actual = test_vext_u16_1 (in1, in2);\n+\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_u16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u16_2 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 2;\n+  expected = vld1_u16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u16_3 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 3;\n+  expected = vld1_u16 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "83b1f97a8ef9764fa871cf4c26c3c4198950ec88", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u16_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextu16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_u16.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a5c3dd4404d38b021088054a6da6bcf9a205f5c8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u32.x", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u32.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,30 @@\n+extern void abort (void);\n+\n+uint32x2_t\n+test_vext_u32_1 (uint32x2_t a, uint32x2_t b)\n+{\n+  return vext_u32 (a, b, 1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  uint32_t arr1[] = {0, 1};\n+  uint32x2_t in1 = vld1_u32 (arr1);\n+  uint32_t arr2[] = {2, 3};\n+  uint32x2_t in2 = vld1_u32 (arr2);\n+  uint32_t exp[2];\n+  uint32x2_t expected;\n+  uint32x2_t actual = test_vext_u32_1 (in1, in2);\n+\n+  for (i = 0; i < 2; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_u32 (exp);\n+  for (i = 0; i < 2; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "6ed6508817f2056791f26b42fa3fa2cb8ad67128", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u32_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextu32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_u32.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#\\[0-9\\]+\\(?:.4)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8d5072bf761d96ea5a95342423ae9861d05d024a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u64.x", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,17 @@\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  uint64_t arr1[] = {0};\n+  uint64x1_t in1 = vld1_u64 (arr1);\n+  uint64_t arr2[] = {1};\n+  uint64x1_t in2 = vld1_u64 (arr2);\n+  uint64x1_t actual = vext_u64 (in1, in2, 0);\n+  if (actual != in1)\n+    abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "e6779f70bc772cc217736d1a3e0499f8abbf3259", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u64_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vextu64' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_u64.x\"\n+\n+/* Do not scan-assembler.  An EXT instruction could be emitted, but would merely\n+   return its first argument, so it is legitimate to optimize it out.  */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4d580572c2ff808de607c627ee5b9bcb5ef19164", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u8.x", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u8.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,114 @@\n+extern void abort (void);\n+\n+uint8x8_t\n+test_vext_u8_1 (uint8x8_t a, uint8x8_t b)\n+{\n+  return vext_u8 (a, b, 1);\n+}\n+\n+uint8x8_t\n+test_vext_u8_2 (uint8x8_t a, uint8x8_t b)\n+{\n+  return vext_u8 (a, b, 2);\n+}\n+\n+uint8x8_t\n+test_vext_u8_3 (uint8x8_t a, uint8x8_t b)\n+{\n+  return vext_u8 (a, b, 3);\n+}\n+\n+uint8x8_t\n+test_vext_u8_4 (uint8x8_t a, uint8x8_t b)\n+{\n+  return vext_u8 (a, b, 4);\n+}\n+\n+uint8x8_t\n+test_vext_u8_5 (uint8x8_t a, uint8x8_t b)\n+{\n+  return vext_u8 (a, b, 5);\n+}\n+\n+uint8x8_t\n+test_vext_u8_6 (uint8x8_t a, uint8x8_t b)\n+{\n+  return vext_u8 (a, b, 6);\n+}\n+\n+uint8x8_t\n+test_vext_u8_7 (uint8x8_t a, uint8x8_t b)\n+{\n+  return vext_u8 (a, b, 7);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  uint8_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+  uint8x8_t in1 = vld1_u8 (arr1);\n+  uint8_t arr2[] = {8, 9, 10, 11, 12, 13, 14, 15};\n+  uint8x8_t in2 = vld1_u8 (arr2);\n+  uint8_t exp[8];\n+  uint8x8_t expected;\n+  uint8x8_t actual = test_vext_u8_1 (in1, in2);\n+\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 1;\n+  expected = vld1_u8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u8_2 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 2;\n+  expected = vld1_u8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u8_3 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 3;\n+  expected = vld1_u8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u8_4 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 4;\n+  expected = vld1_u8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u8_5 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 5;\n+  expected = vld1_u8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u8_6 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 6;\n+  expected = vld1_u8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vext_u8_7 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 7;\n+  expected = vld1_u8 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "8e91b61bda9a5ebd93f2017918604741be100448", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u8_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextu8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"ext_u8.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?#?\\[0-9\\]+\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 7 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b8059d9b41307cb726567ae21836da008d6104c9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_f32.x", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f32.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,58 @@\n+extern void abort (void);\n+\n+float32x4_t\n+test_vextq_f32_1 (float32x4_t a, float32x4_t b)\n+{\n+  return vextq_f32 (a, b, 1);\n+}\n+\n+float32x4_t\n+test_vextq_f32_2 (float32x4_t a, float32x4_t b)\n+{\n+  return vextq_f32 (a, b, 2);\n+}\n+\n+float32x4_t\n+test_vextq_f32_3 (float32x4_t a, float32x4_t b)\n+{\n+  return vextq_f32 (a, b, 3);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  float32_t arr1[] = {0, 1, 2, 3};\n+  float32x4_t in1 = vld1q_f32 (arr1);\n+  float32_t arr2[] = {4, 5, 6, 7};\n+  float32x4_t in2 = vld1q_f32 (arr2);\n+  float32_t exp[4];\n+  float32x4_t expected;\n+  float32x4_t actual = test_vextq_f32_1 (in1, in2);\n+\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_f32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_f32_2 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_f32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_f32_3 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_f32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "94bce1a38ddb646f17c53f8cabd9852ed25e7ff6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_f32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f32_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQf32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_f32.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.4)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c60b1f3c644e49e5c3721cb493c9fd76d0b4f7a0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_f64_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_f64_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,36 @@\n+/* Test the `vextq_f64' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+extern void abort (void);\n+#include <stdio.h>\n+\n+float64x2_t\n+test_vextq_f64_1 (float64x2_t a, float64x2_t b)\n+{\n+  return vextq_f64 (a, b, 1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  float64_t arr1[] = {0, 1};\n+  float64x2_t in1 = vld1q_f64 (arr1);\n+  float64_t arr2[] = {2, 3};\n+  float64x2_t in2 = vld1q_f64 (arr2);\n+  float64_t exp[] = {1, 2};\n+  float64x2_t expected = vld1q_f64 (exp);\n+  float64x2_t actual = test_vextq_f64_1 (in1, in2);\n+\n+  for (i = 0; i < 2; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.8\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9b7cf4e437506ea964afcba487325f0314102ff1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_p16.x", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p16.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,114 @@\n+extern void abort (void);\n+\n+poly16x8_t\n+test_vextq_p16_1 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vextq_p16 (a, b, 1);\n+}\n+\n+poly16x8_t\n+test_vextq_p16_2 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vextq_p16 (a, b, 2);\n+}\n+\n+poly16x8_t\n+test_vextq_p16_3 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vextq_p16 (a, b, 3);\n+}\n+\n+poly16x8_t\n+test_vextq_p16_4 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vextq_p16 (a, b, 4);\n+}\n+\n+poly16x8_t\n+test_vextq_p16_5 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vextq_p16 (a, b, 5);\n+}\n+\n+poly16x8_t\n+test_vextq_p16_6 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vextq_p16 (a, b, 6);\n+}\n+\n+poly16x8_t\n+test_vextq_p16_7 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vextq_p16 (a, b, 7);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  poly16_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+  poly16x8_t in1 = vld1q_p16 (arr1);\n+  poly16_t arr2[] = {8, 9, 10, 11, 12, 13, 14, 15};\n+  poly16x8_t in2 = vld1q_p16 (arr2);\n+  poly16_t exp[8];\n+  poly16x8_t expected;\n+  poly16x8_t actual = test_vextq_p16_1 (in1, in2);\n+\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_p16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p16_2 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_p16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p16_3 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_p16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p16_4 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 4;\n+  expected = vld1q_p16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p16_5 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 5;\n+  expected = vld1q_p16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p16_6 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 6;\n+  expected = vld1q_p16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p16_7 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 7;\n+  expected = vld1q_p16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "8f73eefcf3d6e0ff098ba9931af8359c786b6547", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_p16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p16_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQp16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_p16.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 7 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1f53060aed819c76d16c1178a90c01510b233a0a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_p8.x", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p8.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,227 @@\n+extern void abort (void);\n+\n+poly8x16_t\n+test_vextq_p8_1 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 1);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_2 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 2);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_3 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 3);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_4 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 4);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_5 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 5);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_6 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 6);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_7 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 7);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_8 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 8);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_9 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 9);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_10 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 10);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_11 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 11);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_12 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 12);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_13 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 13);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_14 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 14);\n+}\n+\n+poly8x16_t\n+test_vextq_p8_15 (poly8x16_t a, poly8x16_t b)\n+{\n+  return vextq_p8 (a, b, 15);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+  poly8x16_t in1 = vld1q_p8 (arr1);\n+  poly8_t arr2[] =\n+      {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};\n+  poly8x16_t in2 = vld1q_p8 (arr2);\n+  poly8_t exp[16];\n+  poly8x16_t expected;\n+  poly8x16_t actual = test_vextq_p8_1 (in1, in2);\n+\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_2 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_3 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_4 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 4;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_5 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 5;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_6 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 6;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_7 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 7;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_8 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 8;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_9 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 9;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_10 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 10;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_11 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 11;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_12 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 12;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_13 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 13;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_14 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 14;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_p8_15 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 15;\n+  expected = vld1q_p8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "ea2d399788d1e2264e4385937b23752dd752e664", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_p8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_p8_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQp8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_p8.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#?\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 15 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f5573c357dddc9ac5abf97c9474017b332fdaeb7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s16.x", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s16.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,114 @@\n+extern void abort (void);\n+\n+int16x8_t\n+test_vextq_s16_1 (int16x8_t a, int16x8_t b)\n+{\n+  return vextq_s16 (a, b, 1);\n+}\n+\n+int16x8_t\n+test_vextq_s16_2 (int16x8_t a, int16x8_t b)\n+{\n+  return vextq_s16 (a, b, 2);\n+}\n+\n+int16x8_t\n+test_vextq_s16_3 (int16x8_t a, int16x8_t b)\n+{\n+  return vextq_s16 (a, b, 3);\n+}\n+\n+int16x8_t\n+test_vextq_s16_4 (int16x8_t a, int16x8_t b)\n+{\n+  return vextq_s16 (a, b, 4);\n+}\n+\n+int16x8_t\n+test_vextq_s16_5 (int16x8_t a, int16x8_t b)\n+{\n+  return vextq_s16 (a, b, 5);\n+}\n+\n+int16x8_t\n+test_vextq_s16_6 (int16x8_t a, int16x8_t b)\n+{\n+  return vextq_s16 (a, b, 6);\n+}\n+\n+int16x8_t\n+test_vextq_s16_7 (int16x8_t a, int16x8_t b)\n+{\n+  return vextq_s16 (a, b, 7);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  int16_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+  int16x8_t in1 = vld1q_s16 (arr1);\n+  int16_t arr2[] = {8, 9, 10, 11, 12, 13, 14, 15};\n+  int16x8_t in2 = vld1q_s16 (arr2);\n+  int16_t exp[8];\n+  int16x8_t expected;\n+  int16x8_t actual = test_vextq_s16_1 (in1, in2);\n+\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_s16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s16_2 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_s16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s16_3 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_s16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s16_4 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 4;\n+  expected = vld1q_s16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s16_5 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 5;\n+  expected = vld1q_s16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s16_6 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 6;\n+  expected = vld1q_s16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s16_7 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 7;\n+  expected = vld1q_s16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "8b3d5fb951d12653c491ea3dbf819e3e93d0cb96", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s16_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQs16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_s16.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 7 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "02cb78bc74e8d6f8f37a4698d521be49c8f7ff56", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s32.x", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s32.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,58 @@\n+extern void abort (void);\n+\n+int32x4_t\n+test_vextq_s32_1 (int32x4_t a, int32x4_t b)\n+{\n+  return vextq_s32 (a, b, 1);\n+}\n+\n+int32x4_t\n+test_vextq_s32_2 (int32x4_t a, int32x4_t b)\n+{\n+  return vextq_s32 (a, b, 2);\n+}\n+\n+int32x4_t\n+test_vextq_s32_3 (int32x4_t a, int32x4_t b)\n+{\n+  return vextq_s32 (a, b, 3);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  int32_t arr1[] = {0, 1, 2, 3};\n+  int32x4_t in1 = vld1q_s32 (arr1);\n+  int32_t arr2[] = {4, 5, 6, 7};\n+  int32x4_t in2 = vld1q_s32 (arr2);\n+  int32_t exp[4];\n+  int32x4_t expected;\n+  int32x4_t actual = test_vextq_s32_1 (in1, in2);\n+\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_s32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s32_2 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_s32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s32_3 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_s32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "4f1b08b8b1b7cc5f2070dbbce51ffd4584adbc83", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s32_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQs32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_s32.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.4)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8068bf8c6ca2169fb089914163958fee04b3fcdf", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s64.x", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s64.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s64.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s64.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,30 @@\n+extern void abort (void);\n+\n+int64x2_t\n+test_vextq_s64_1 (int64x2_t a, int64x2_t b)\n+{\n+  return vextq_s64 (a, b, 1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  int64_t arr1[] = {0, 1};\n+  int64x2_t in1 = vld1q_s64 (arr1);\n+  int64_t arr2[] = {2, 3};\n+  int64x2_t in2 = vld1q_s64 (arr2);\n+  int64_t exp[2];\n+  int64x2_t expected;\n+  int64x2_t actual = test_vextq_s64_1 (in1, in2);\n+\n+  for (i = 0; i < 2; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_s64 (exp);\n+  for (i = 0; i < 2; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "cb308fb92d64b3bc4b40bbd97c2ab4bc79bb2879", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s64_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s64_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQs64' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_s64.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.8\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "012a85876d2c93338289a2904ecbf568f24e4b45", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s8.x", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s8.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,227 @@\n+extern void abort (void);\n+\n+int8x16_t\n+test_vextq_s8_1 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 1);\n+}\n+\n+int8x16_t\n+test_vextq_s8_2 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 2);\n+}\n+\n+int8x16_t\n+test_vextq_s8_3 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 3);\n+}\n+\n+int8x16_t\n+test_vextq_s8_4 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 4);\n+}\n+\n+int8x16_t\n+test_vextq_s8_5 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 5);\n+}\n+\n+int8x16_t\n+test_vextq_s8_6 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 6);\n+}\n+\n+int8x16_t\n+test_vextq_s8_7 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 7);\n+}\n+\n+int8x16_t\n+test_vextq_s8_8 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 8);\n+}\n+\n+int8x16_t\n+test_vextq_s8_9 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 9);\n+}\n+\n+int8x16_t\n+test_vextq_s8_10 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 10);\n+}\n+\n+int8x16_t\n+test_vextq_s8_11 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 11);\n+}\n+\n+int8x16_t\n+test_vextq_s8_12 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 12);\n+}\n+\n+int8x16_t\n+test_vextq_s8_13 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 13);\n+}\n+\n+int8x16_t\n+test_vextq_s8_14 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 14);\n+}\n+\n+int8x16_t\n+test_vextq_s8_15 (int8x16_t a, int8x16_t b)\n+{\n+  return vextq_s8 (a, b, 15);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+  int8x16_t in1 = vld1q_s8 (arr1);\n+  int8_t arr2[] =\n+      {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};\n+  int8x16_t in2 = vld1q_s8 (arr2);\n+  int8_t exp[16];\n+  int8x16_t expected;\n+  int8x16_t actual = test_vextq_s8_1 (in1, in2);\n+\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_2 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_3 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_4 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 4;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_5 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 5;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_6 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 6;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_7 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 7;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_8 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 8;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_9 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 9;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_10 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 10;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_11 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 11;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_12 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 12;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_13 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 13;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_14 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 14;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_s8_15 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 15;\n+  expected = vld1q_s8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "7e1e50ab36d74d656e5b4413f0a0e53a3b20d82d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_s8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_s8_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQs8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_s8.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#?\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 15 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "66bc9f501de4542a4aa5598ed308eecd144a8d54", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u16.x", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u16.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,114 @@\n+extern void abort (void);\n+\n+uint16x8_t\n+test_vextq_u16_1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vextq_u16 (a, b, 1);\n+}\n+\n+uint16x8_t\n+test_vextq_u16_2 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vextq_u16 (a, b, 2);\n+}\n+\n+uint16x8_t\n+test_vextq_u16_3 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vextq_u16 (a, b, 3);\n+}\n+\n+uint16x8_t\n+test_vextq_u16_4 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vextq_u16 (a, b, 4);\n+}\n+\n+uint16x8_t\n+test_vextq_u16_5 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vextq_u16 (a, b, 5);\n+}\n+\n+uint16x8_t\n+test_vextq_u16_6 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vextq_u16 (a, b, 6);\n+}\n+\n+uint16x8_t\n+test_vextq_u16_7 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vextq_u16 (a, b, 7);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  uint16_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+  uint16x8_t in1 = vld1q_u16 (arr1);\n+  uint16_t arr2[] = {8, 9, 10, 11, 12, 13, 14, 15};\n+  uint16x8_t in2 = vld1q_u16 (arr2);\n+  uint16_t exp[8];\n+  uint16x8_t expected;\n+  uint16x8_t actual = test_vextq_u16_1 (in1, in2);\n+\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_u16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u16_2 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_u16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u16_3 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_u16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u16_4 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 4;\n+  expected = vld1q_u16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u16_5 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 5;\n+  expected = vld1q_u16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u16_6 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 6;\n+  expected = vld1q_u16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u16_7 (in1, in2);\n+  for (i = 0; i < 8; i++)\n+    exp[i] = i + 7;\n+  expected = vld1q_u16 (exp);\n+  for (i = 0; i < 8; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "edf3efd1a1ab03b3a63d6130ad02f88a9f8cb6af", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u16_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u16_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQu16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_u16.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 7 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "61bec8bad858b259d74b1e098e7e15ed845d067b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u32.x", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u32.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,58 @@\n+extern void abort (void);\n+\n+uint32x4_t\n+test_vextq_u32_1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vextq_u32 (a, b, 1);\n+}\n+\n+uint32x4_t\n+test_vextq_u32_2 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vextq_u32 (a, b, 2);\n+}\n+\n+uint32x4_t\n+test_vextq_u32_3 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vextq_u32 (a, b, 3);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  uint32_t arr1[] = {0, 1, 2, 3};\n+  uint32x4_t in1 = vld1q_u32 (arr1);\n+  uint32_t arr2[] = {4, 5, 6, 7};\n+  uint32x4_t in2 = vld1q_u32 (arr2);\n+  uint32_t exp[4];\n+  uint32x4_t expected;\n+  uint32x4_t actual = test_vextq_u32_1 (in1, in2);\n+\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_u32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u32_2 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_u32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u32_3 (in1, in2);\n+  for (i = 0; i < 4; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_u32 (exp);\n+  for (i = 0; i < 4; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "f3eb56ec11ab42c34114d38b43b57a8becbcbd4b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u32_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u32_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQu32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_u32.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.4)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e1bd267f5a66c7d95a70ec87338fa859add666f7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u64.x", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u64.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u64.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u64.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,30 @@\n+extern void abort (void);\n+\n+uint64x2_t\n+test_vextq_u64_1 (uint64x2_t a, uint64x2_t b)\n+{\n+  return vextq_u64 (a, b, 1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, off;\n+  uint64_t arr1[] = {0, 1};\n+  uint64x2_t in1 = vld1q_u64 (arr1);\n+  uint64_t arr2[] = {2, 3};\n+  uint64x2_t in2 = vld1q_u64 (arr2);\n+  uint64_t exp[2];\n+  uint64x2_t expected;\n+  uint64x2_t actual = test_vextq_u64_1 (in1, in2);\n+\n+  for (i = 0; i < 2; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_u64 (exp);\n+  for (i = 0; i < 2; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "d999c2cb4acdb4b15286a921c1d2f2802f33f621", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u64_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u64_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQu64' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_u64.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#\\[0-9\\]+\\(?:.8\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "2b25dec203ead87aa65daac4ce7a8a782f67cd7e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u8.x", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u8.x?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,227 @@\n+extern void abort (void);\n+\n+uint8x16_t\n+test_vextq_u8_1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 1);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_2 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 2);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_3 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 3);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_4 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 4);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_5 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 5);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_6 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 6);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_7 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 7);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_8 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 8);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_9 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 9);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_10 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 10);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_11 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 11);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_12 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 12);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_13 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 13);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_14 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 14);\n+}\n+\n+uint8x16_t\n+test_vextq_u8_15 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vextq_u8 (a, b, 15);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8_t arr1[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+  uint8x16_t in1 = vld1q_u8 (arr1);\n+  uint8_t arr2[] =\n+      {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};\n+  uint8x16_t in2 = vld1q_u8 (arr2);\n+  uint8_t exp[16];\n+  uint8x16_t expected;\n+  uint8x16_t actual = test_vextq_u8_1 (in1, in2);\n+\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 1;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_2 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 2;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_3 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 3;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_4 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 4;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_5 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 5;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_6 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 6;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_7 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 7;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_8 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 8;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_9 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 9;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_10 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 10;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_11 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 11;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_12 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 12;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_13 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 13;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_14 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 14;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  actual = test_vextq_u8_15 (in1, in2);\n+  for (i = 0; i < 16; i++)\n+    exp[i] = i + 15;\n+  expected = vld1q_u8 (exp);\n+  for (i = 0; i < 16; i++)\n+    if (actual[i] != expected[i])\n+      abort ();\n+\n+  return 0;\n+}\n+"}, {"sha": "30df9ea72cc883c0f8c3a683dac5cbd01971577b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/extq_u8_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e906bc1412542eee3d98f369e3e4c7f12670db/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fextq_u8_1.c?ref=e0e906bc1412542eee3d98f369e3e4c7f12670db", "patch": "@@ -0,0 +1,10 @@\n+/* Test the `vextQu8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"extq_u8.x\"\n+\n+/* { dg-final { scan-assembler-times \"ext\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?#?\\[0-9\\]+\\(?:.2\\)?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 15 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}