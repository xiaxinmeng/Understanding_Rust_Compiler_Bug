{"sha": "2d6bc7fa9eeddc5387fabe559453a499e4653cc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2YmM3ZmE5ZWVkZGM1Mzg3ZmFiZTU1OTQ1M2E0OTllNDY1M2NjNg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-10-27T10:57:32Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-10-27T10:57:32Z"}, "message": "[AArch64] Enable autoprefetcher modelling in the scheduler\n\n\t* config/aarch64/aarch64-protos.h\n\t(struct tune_params): Add autoprefetcher_model field.\n\t* config/aarch64/aarch64.c: Include params.h\n\t(generic_tunings): Specify autoprefetcher_model value.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(cortexa72_tunings): Likewise.\n\t(thunderx_tunings): Likewise.\n\t(xgene1_tunings): Likewise.\n\t(aarch64_first_cycle_multipass_dfa_lookahead_guard): New function.\n\t(TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD): Define.\n\t(aarch64_override_options_internal): Set\n\tPARAM_SCHED_AUTOPREF_QUEUE_DEPTH param.\n\nFrom-SVN: r229412", "tree": {"sha": "924342d481ab0921e0d53f60bd8f5b71fdbd0f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/924342d481ab0921e0d53f60bd8f5b71fdbd0f1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d6bc7fa9eeddc5387fabe559453a499e4653cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6bc7fa9eeddc5387fabe559453a499e4653cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6bc7fa9eeddc5387fabe559453a499e4653cc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6bc7fa9eeddc5387fabe559453a499e4653cc6/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3962a4a87050d851b4ddfab2c9519df7816d0cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3962a4a87050d851b4ddfab2c9519df7816d0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3962a4a87050d851b4ddfab2c9519df7816d0cf"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "c5c44bd773a121f56aae3e93bf70730e54a9eb79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6bc7fa9eeddc5387fabe559453a499e4653cc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6bc7fa9eeddc5387fabe559453a499e4653cc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d6bc7fa9eeddc5387fabe559453a499e4653cc6", "patch": "@@ -1,3 +1,19 @@\n+2015-10-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(struct tune_params): Add autoprefetcher_model field.\n+\t* config/aarch64/aarch64.c: Include params.h\n+\t(generic_tunings): Specify autoprefetcher_model value.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(cortexa72_tunings): Likewise.\n+\t(thunderx_tunings): Likewise.\n+\t(xgene1_tunings): Likewise.\n+\t(aarch64_first_cycle_multipass_dfa_lookahead_guard): New function.\n+\t(TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD): Define.\n+\t(aarch64_override_options_internal): Set\n+\tPARAM_SCHED_AUTOPREF_QUEUE_DEPTH param.\n+\n 2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (fold_builtin_exponent): Delete."}, {"sha": "b1bf58235d428178c2d199e2e2a781dd539ec87e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6bc7fa9eeddc5387fabe559453a499e4653cc6/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6bc7fa9eeddc5387fabe559453a499e4653cc6/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=2d6bc7fa9eeddc5387fabe559453a499e4653cc6", "patch": "@@ -194,6 +194,23 @@ struct tune_params\n   int vec_reassoc_width;\n   int min_div_recip_mul_sf;\n   int min_div_recip_mul_df;\n+\n+/* An enum specifying how to take into account CPU autoprefetch capabilities\n+   during instruction scheduling:\n+   - AUTOPREFETCHER_OFF: Do not take autoprefetch capabilities into account.\n+   - AUTOPREFETCHER_WEAK: Attempt to sort sequences of loads/store in order of\n+   offsets but allow the pipeline hazard recognizer to alter that order to\n+   maximize multi-issue opportunities.\n+   - AUTOPREFETCHER_STRONG: Attempt to sort sequences of loads/store in order of\n+   offsets and prefer this even if it restricts multi-issue opportunities.  */\n+\n+  enum aarch64_autoprefetch_model\n+  {\n+    AUTOPREFETCHER_OFF,\n+    AUTOPREFETCHER_WEAK,\n+    AUTOPREFETCHER_STRONG\n+  } autoprefetcher_model;\n+\n   unsigned int extra_tuning_flags;\n };\n "}, {"sha": "7678840576536ffe592b54f8529d0d50640a6ffb", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6bc7fa9eeddc5387fabe559453a499e4653cc6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6bc7fa9eeddc5387fabe559453a499e4653cc6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2d6bc7fa9eeddc5387fabe559453a499e4653cc6", "patch": "@@ -49,6 +49,7 @@\n #include \"reload.h\"\n #include \"langhooks.h\"\n #include \"opts.h\"\n+#include \"params.h\"\n #include \"gimplify.h\"\n #include \"dwarf2.h\"\n #include \"tree-vectorizer.h\"\n@@ -351,6 +352,7 @@ static const struct tune_params generic_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n@@ -373,6 +375,7 @@ static const struct tune_params cortexa53_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n@@ -395,6 +398,7 @@ static const struct tune_params cortexa57_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_RENAME_FMA_REGS)\t/* tune_flags.  */\n };\n \n@@ -417,6 +421,7 @@ static const struct tune_params cortexa72_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n@@ -438,6 +443,7 @@ static const struct tune_params thunderx_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n@@ -459,6 +465,7 @@ static const struct tune_params xgene1_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n@@ -7032,6 +7039,19 @@ aarch64_sched_first_cycle_multipass_dfa_lookahead (void)\n   return issue_rate > 1 && !sched_fusion ? issue_rate : 0;\n }\n \n+\n+/* Implement TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD as\n+   autopref_multipass_dfa_lookahead_guard from haifa-sched.c.  It only\n+   has an effect if PARAM_SCHED_AUTOPREF_QUEUE_DEPTH > 0.  */\n+\n+static int\n+aarch64_first_cycle_multipass_dfa_lookahead_guard (rtx_insn *insn,\n+\t\t\t\t\t\t    int ready_index)\n+{\n+  return autopref_multipass_dfa_lookahead_guard (insn, ready_index);\n+}\n+\n+\n /* Vectorizer cost model target hooks.  */\n \n /* Implement targetm.vectorize.builtin_vectorization_cost.  */\n@@ -7623,6 +7643,29 @@ aarch64_override_options_internal (struct gcc_options *opts)\n   initialize_aarch64_code_model (opts);\n   initialize_aarch64_tls_size (opts);\n \n+  int queue_depth = 0;\n+  switch (aarch64_tune_params.autoprefetcher_model)\n+    {\n+      case tune_params::AUTOPREFETCHER_OFF:\n+\tqueue_depth = -1;\n+\tbreak;\n+      case tune_params::AUTOPREFETCHER_WEAK:\n+\tqueue_depth = 0;\n+\tbreak;\n+      case tune_params::AUTOPREFETCHER_STRONG:\n+\tqueue_depth = max_insn_queue_index + 1;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  /* We don't mind passing in global_options_set here as we don't use\n+     the *options_set structs anyway.  */\n+  maybe_set_param_value (PARAM_SCHED_AUTOPREF_QUEUE_DEPTH,\n+\t\t\t queue_depth,\n+\t\t\t opts->x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+\n   aarch64_override_options_after_change_1 (opts);\n }\n \n@@ -13536,6 +13579,10 @@ aarch64_promoted_type (const_tree t)\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n   aarch64_sched_first_cycle_multipass_dfa_lookahead\n \n+#undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD\n+#define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD \\\n+  aarch64_first_cycle_multipass_dfa_lookahead_guard\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT aarch64_trampoline_init\n "}]}