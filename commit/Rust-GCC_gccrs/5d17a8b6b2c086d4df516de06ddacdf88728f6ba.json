{"sha": "5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "node_id": "C_kwDOANBUbNoAKDVkMTdhOGI2YjJjMDg2ZDRkZjUxNmRlMDZkZGFjZGY4ODcyOGY2YmE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-03T12:14:54Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-04T15:52:52Z"}, "message": "Support Autoderef coercions\n\nThis is an incremental approach to get our coercion sites more acurate to\nrustc. This allows us to support coercions which require a deref by sharing\nthe code from the autoderef cycle. The eventual goal here will allow us to\nremove the rust-tyty-coercion rules which is messy and cannot handle logic\nsuch as DST's very well.\n\nFixes #1198", "tree": {"sha": "f35b2207aeda6e2fa6fde7fa36f986d1f9667f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f35b2207aeda6e2fa6fde7fa36f986d1f9667f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d0f29464fc0aa68af7b317964aff4bc35af59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d0f29464fc0aa68af7b317964aff4bc35af59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d0f29464fc0aa68af7b317964aff4bc35af59a"}], "stats": {"total": 377, "additions": 330, "deletions": 47}, "files": [{"sha": "886bafbe1e0d17033f00ff51e9f61a0a5cedb758", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -118,6 +118,7 @@ GRS_OBJS = \\\n     rust/rust-hir-type-check-pattern.o \\\n     rust/rust-hir-type-check-expr.o \\\n     rust/rust-hir-dot-operator.o \\\n+    rust/rust-coercion.o \\\n     rust/rust-hir-type-check-base.o \\\n     rust/rust-autoderef.o \\\n     rust/rust-substitution-mapper.o \\"}, {"sha": "5a0ac8fe7137947ac24f0c0dff5c5defd49684de", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -40,9 +40,12 @@ class HIRCompileBase\n protected:\n   Context *get_context () { return ctx; }\n \n-  tree coercion_site (tree rvalue, const TyTy::BaseType *actual,\n+  tree coercion_site (HirId id, tree rvalue, const TyTy::BaseType *actual,\n \t\t      const TyTy::BaseType *expected, Location lvalue_locus,\n \t\t      Location rvalue_locus);\n+  tree coercion_site1 (tree rvalue, const TyTy::BaseType *actual,\n+\t\t       const TyTy::BaseType *expected, Location lvalue_locus,\n+\t\t       Location rvalue_locus);\n \n   tree coerce_to_dyn_object (tree compiled_ref, const TyTy::BaseType *actual,\n \t\t\t     const TyTy::BaseType *expected,"}, {"sha": "38d10d2d41c1c0619f3c32963e64a74abcd7a78d", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -853,8 +853,9 @@ CompileExpr::visit (HIR::CallExpr &expr)\n \t  Location lvalue_locus\n \t    = ctx->get_mappings ()->lookup_location (expected->get_ty_ref ());\n \t  Location rvalue_locus = argument->get_locus ();\n-\t  rvalue = coercion_site (rvalue, actual, expected, lvalue_locus,\n-\t\t\t\t  rvalue_locus);\n+\t  rvalue\n+\t    = coercion_site (argument->get_mappings ().get_hirid (), rvalue,\n+\t\t\t     actual, expected, lvalue_locus, rvalue_locus);\n \n \t  // add it to the list\n \t  arguments.push_back (rvalue);\n@@ -951,8 +952,8 @@ CompileExpr::visit (HIR::CallExpr &expr)\n       Location lvalue_locus\n \t= ctx->get_mappings ()->lookup_location (expected->get_ty_ref ());\n       Location rvalue_locus = argument->get_locus ();\n-      rvalue\n-\t= coercion_site (rvalue, actual, expected, lvalue_locus, rvalue_locus);\n+      rvalue = coercion_site (argument->get_mappings ().get_hirid (), rvalue,\n+\t\t\t      actual, expected, lvalue_locus, rvalue_locus);\n \n       // add it to the list\n       args.push_back (rvalue);\n@@ -1069,8 +1070,8 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n       Location lvalue_locus\n \t= ctx->get_mappings ()->lookup_location (expected->get_ty_ref ());\n       Location rvalue_locus = argument->get_locus ();\n-      rvalue\n-\t= coercion_site (rvalue, actual, expected, lvalue_locus, rvalue_locus);\n+      rvalue = coercion_site (argument->get_mappings ().get_hirid (), rvalue,\n+\t\t\t      actual, expected, lvalue_locus, rvalue_locus);\n \n       // add it to the list\n       args.push_back (rvalue);"}, {"sha": "9b8976de18a4d45310e10d301624ac412ebd8500", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -177,9 +177,9 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n       expr.get_rhs ()->get_mappings ().get_hirid (), &actual);\n     rust_assert (ok);\n \n-    rvalue\n-      = coercion_site (rvalue, actual, expected, expr.get_lhs ()->get_locus (),\n-\t\t       expr.get_rhs ()->get_locus ());\n+    rvalue = coercion_site (expr.get_mappings ().get_hirid (), rvalue, actual,\n+\t\t\t    expected, expr.get_lhs ()->get_locus (),\n+\t\t\t    expr.get_rhs ()->get_locus ());\n \n     tree assignment\n       = ctx->get_backend ()->assignment_statement (lvalue, rvalue,\n@@ -435,8 +435,9 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \n \tif (ok)\n \t  {\n-\t    rvalue = coercion_site (rvalue, actual, expected, lvalue_locus,\n-\t\t\t\t    rvalue_locus);\n+\t    rvalue\n+\t      = coercion_site (argument->get_mappings ().get_hirid (), rvalue,\n+\t\t\t       actual, expected, lvalue_locus, rvalue_locus);\n \t  }\n \n \t// add it to the list\n@@ -469,7 +470,8 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \t    // compile/torture/struct_base_init_1.rs\n \t    if (ok)\n \t      {\n-\t\trvalue = coercion_site (rvalue, actual, expected, lvalue_locus,\n+\t\trvalue = coercion_site (argument->get_mappings ().get_hirid (),\n+\t\t\t\t\trvalue, actual, expected, lvalue_locus,\n \t\t\t\t\trvalue_locus);\n \t      }\n "}, {"sha": "9bb4b7b07d2b16417e4ca6bf19db984491816c0c", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -87,7 +87,8 @@ class CompileStmt : public HIRCompileBase, public HIR::HIRStmtVisitor\n     Location lvalue_locus = stmt.get_pattern ()->get_locus ();\n     Location rvalue_locus = stmt.get_init_expr ()->get_locus ();\n     TyTy::BaseType *expected = ty;\n-    init = coercion_site (init, actual, expected, lvalue_locus, rvalue_locus);\n+    init = coercion_site (stmt.get_mappings ().get_hirid (), init, actual,\n+\t\t\t  expected, lvalue_locus, rvalue_locus);\n \n     auto fnctx = ctx->peek_fn ();\n     if (ty->is_unit ())"}, {"sha": "8a614f200a65118312dea6a20428c1ccb9daf134", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -198,9 +198,25 @@ CompileStructExprField::visit (HIR::StructExprFieldIdentifier &field)\n // Shared methods in compilation\n \n tree\n-HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n+HIRCompileBase::coercion_site (HirId id, tree rvalue,\n+\t\t\t       const TyTy::BaseType *rval,\n \t\t\t       const TyTy::BaseType *lval,\n \t\t\t       Location lvalue_locus, Location rvalue_locus)\n+{\n+  std::vector<Resolver::Adjustment> *adjustments = nullptr;\n+  bool ok = ctx->get_tyctx ()->lookup_autoderef_mappings (id, &adjustments);\n+  if (ok)\n+    {\n+      rvalue = resolve_adjustements (*adjustments, rvalue, rvalue_locus);\n+    }\n+\n+  return coercion_site1 (rvalue, rval, lval, lvalue_locus, rvalue_locus);\n+}\n+\n+tree\n+HIRCompileBase::coercion_site1 (tree rvalue, const TyTy::BaseType *rval,\n+\t\t\t\tconst TyTy::BaseType *lval,\n+\t\t\t\tLocation lvalue_locus, Location rvalue_locus)\n {\n   if (rvalue == error_mark_node)\n     return error_mark_node;\n@@ -227,8 +243,8 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n \n       tree deref_rvalue = indirect_expression (rvalue, rvalue_locus);\n       tree coerced\n-\t= coercion_site (deref_rvalue, act->get_base (), exp->get_base (),\n-\t\t\t lvalue_locus, rvalue_locus);\n+\t= coercion_site1 (deref_rvalue, act->get_base (), exp->get_base (),\n+\t\t\t  lvalue_locus, rvalue_locus);\n       if (exp->is_dyn_object () && SLICE_TYPE_P (TREE_TYPE (coerced)))\n \treturn coerced;\n \n@@ -269,8 +285,10 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n       rust_assert (actual_base != nullptr);\n \n       tree deref_rvalue = indirect_expression (rvalue, rvalue_locus);\n-      tree coerced = coercion_site (deref_rvalue, actual_base, exp->get_base (),\n-\t\t\t\t    lvalue_locus, rvalue_locus);\n+      tree coerced\n+\t= coercion_site1 (deref_rvalue, actual_base, exp->get_base (),\n+\t\t\t  lvalue_locus, rvalue_locus);\n+\n       if (exp->is_dyn_object () && SLICE_TYPE_P (TREE_TYPE (coerced)))\n \treturn coerced;\n "}, {"sha": "220b6f450919e78827843d541fcb5e792a9d573b", "filename": "gcc/rust/typecheck/rust-autoderef.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -157,7 +157,7 @@ class AutoderefCycle\n   // type\n   virtual void try_hook (const TyTy::BaseType &);\n \n-  bool cycle (const TyTy::BaseType *receiver);\n+  virtual bool cycle (const TyTy::BaseType *receiver);\n \n   bool try_autoderefed (const TyTy::BaseType *r);\n "}, {"sha": "e6e82c3f73456ed921a87f66a7b941ad9c50fa0f", "filename": "gcc/rust/typecheck/rust-coercion.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-coercion.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+AutoderefTypeCoercion::CoercionResult\n+AutoderefTypeCoercion::Coerce (const TyTy::BaseType *receiver,\n+\t\t\t       const TyTy::BaseType *expected, Location locus)\n+{\n+  AutoderefTypeCoercion resolver (expected, locus);\n+  bool ok = resolver.cycle (receiver);\n+  return ok ? resolver.try_result : CoercionResult::get_error ();\n+}\n+\n+AutoderefTypeCoercion::AutoderefTypeCoercion (const TyTy::BaseType *expected,\n+\t\t\t\t\t      Location locus)\n+  : AutoderefCycle (false), mappings (Analysis::Mappings::get ()),\n+    context (TypeCheckContext::get ()), expected (expected), locus (locus),\n+    try_result (CoercionResult::get_error ())\n+{}\n+\n+bool\n+AutoderefTypeCoercion::cycle (const TyTy::BaseType *receiver)\n+{\n+  // FIXME this is not finished and might be super simplified\n+  // see:\n+  // https://github.com/rust-lang/rust/blob/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/compiler/rustc_typeck/src/check/coercion.rs\n+\n+  if (receiver->get_kind () == TyTy::TypeKind::REF\n+      && expected->get_kind () == TyTy::TypeKind::REF)\n+    {\n+      // if we expect to get a mutable pointer we can't get that from an\n+      // immutable one so we have to be careful\n+\n+      const auto &receiver_ref\n+\t= static_cast<const TyTy::ReferenceType &> (*receiver);\n+      const auto &expected_ref\n+\t= static_cast<const TyTy::ReferenceType &> (*expected);\n+\n+      // we can allow for mutability changes here by casting down from\n+      // mutability eg:  mut vs const, we cant take a mutable reference from a\n+      // const eg:  const vs mut we can take a const reference from a mutable\n+      // one\n+\n+      bool mutability_ok\n+\t= !expected_ref.is_mutable ()\n+\t  || (expected_ref.is_mutable () == receiver_ref.is_mutable ());\n+      if (!mutability_ok)\n+\t{\n+\t  RichLocation r (locus);\n+\t  r.add_range (mappings->lookup_location (receiver_ref.get_ref ()));\n+\t  r.add_range (mappings->lookup_location (expected_ref.get_ref ()));\n+\t  rust_error_at (r, \"mismatched mutability\");\n+\n+\t  return false;\n+\t}\n+    }\n+\n+  return AutoderefCycle::cycle (receiver);\n+}\n+\n+bool\n+AutoderefTypeCoercion::select (const TyTy::BaseType &autoderefed)\n+{\n+  if (autoderefed.can_eq (expected, false))\n+    {\n+      try_result = CoercionResult{adjustments, autoderefed.clone ()};\n+      return true;\n+    }\n+  return false;\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "c3d5d028e64ebecb8e95ad731992bf19c1299f66", "filename": "gcc/rust/typecheck/rust-coercion.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-coercion.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_COERCION\n+#define RUST_COERCION\n+\n+#include \"rust-autoderef.h\"\n+#include \"rust-hir-type-check.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+class AutoderefTypeCoercion : protected AutoderefCycle\n+{\n+public:\n+  struct CoercionResult\n+  {\n+    std::vector<Adjustment> adjustments;\n+    TyTy::BaseType *tyty;\n+\n+    bool is_error ()\n+    {\n+      return tyty == nullptr || tyty->get_kind () == TyTy::TypeKind::ERROR;\n+    }\n+\n+    static CoercionResult get_error () { return CoercionResult{{}, nullptr}; }\n+  };\n+\n+  static CoercionResult Coerce (const TyTy::BaseType *receiver,\n+\t\t\t\tconst TyTy::BaseType *expected, Location locus);\n+\n+protected:\n+  AutoderefTypeCoercion (const TyTy::BaseType *expected, Location locus);\n+\n+  bool cycle (const TyTy::BaseType *receiver) override;\n+\n+  bool select (const TyTy::BaseType &autoderefed) override;\n+\n+private:\n+  // context info\n+  Analysis::Mappings *mappings;\n+  TypeCheckContext *context;\n+\n+  // search\n+  const TyTy::BaseType *expected;\n+  Location locus;\n+\n+  // mutable fields\n+  CoercionResult try_result;\n+};\n+\n+} // namespace Resolver\n+} // namespace Rust\n+\n+#endif // RUST_COERCION"}, {"sha": "c50199847b7e8dccfcb1f9711ad08fd295069fc3", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-hir-type-check-base.h\"\n+#include \"rust-coercion.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -328,10 +329,24 @@ TypeCheckBase::parse_repr_options (const AST::AttrVec &attrs, Location locus)\n }\n \n TyTy::BaseType *\n-TypeCheckBase::coercion_site (TyTy::BaseType *lhs, TyTy::BaseType *rhs,\n-\t\t\t      Location)\n+TypeCheckBase::coercion_site (HirId id, TyTy::BaseType *expected,\n+\t\t\t      TyTy::BaseType *expr, Location locus)\n {\n-  return lhs->coerce (rhs);\n+  auto context = TypeCheckContext::get ();\n+  if (expected->get_kind () == TyTy::TypeKind::ERROR\n+      || expr->get_kind () == TyTy::TypeKind::ERROR)\n+    return expr;\n+\n+  // can we autoderef it?\n+  auto result = AutoderefTypeCoercion::Coerce (expr, expected, locus);\n+  if (!result.is_error ())\n+    {\n+      // save any adjustments\n+      context->insert_autoderef_mappings (id, std::move (result.adjustments));\n+      return expected->coerce (result.tyty);\n+    }\n+\n+  return expected->coerce (expr);\n }\n \n } // namespace Resolver"}, {"sha": "4078697c927872ac4b7a6e6b772d568d5b40948a", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -39,7 +39,7 @@ class TypeCheckBase : public HIR::HIRFullVisitorBase\n \n   virtual ~TypeCheckBase () {}\n \n-  static TyTy::BaseType *coercion_site (TyTy::BaseType *lhs,\n+  static TyTy::BaseType *coercion_site (HirId id, TyTy::BaseType *lhs,\n \t\t\t\t\tTyTy::BaseType *rhs, Location locus);\n \n protected:"}, {"sha": "de542ca70e886c76de709b771e04a12210ec1dae", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -230,7 +230,8 @@ class TypeCheckExpr : public TypeCheckBase\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n-    coercion_site (lhs, rhs, expr.get_locus ());\n+    coercion_site (expr.get_mappings ().get_hirid (), lhs, rhs,\n+\t\t   expr.get_locus ());\n   }\n \n   void visit (HIR::CompoundAssignmentExpr &expr) override"}, {"sha": "f8bf6e083dd45071e8f0a56be8ff5c5877612316", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -99,7 +99,8 @@ class TypeCheckStmt : public TypeCheckBase\n     if (specified_ty != nullptr && init_expr_ty != nullptr)\n       {\n \t// FIXME use this result and look at the regressions\n-\tcoercion_site (specified_ty, init_expr_ty, stmt.get_locus ());\n+\tcoercion_site (stmt.get_mappings ().get_hirid (), specified_ty,\n+\t\t       init_expr_ty, stmt.get_locus ());\n \tcontext->insert_type (stmt_pattern.get_pattern_mappings (),\n \t\t\t      specified_ty);\n       }"}, {"sha": "5b522772a3e119fe22b48515ec8f4e5e23ec97b6", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -222,7 +222,8 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n \n   TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value ());\n   resolved_field_value_expr\n-    = coercion_site (field_type->get_field_type (), value, field.get_locus ());\n+    = coercion_site (field.get_mappings ().get_hirid (),\n+\t\t     field_type->get_field_type (), value, field.get_locus ());\n   if (resolved_field_value_expr != nullptr)\n     {\n       fields_assigned.insert (field.field_name);\n@@ -252,7 +253,8 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n \n   TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value ());\n   resolved_field_value_expr\n-    = coercion_site (field_type->get_field_type (), value, field.get_locus ());\n+    = coercion_site (field.get_mappings ().get_hirid (),\n+\t\t     field_type->get_field_type (), value, field.get_locus ());\n   if (resolved_field_value_expr != nullptr)\n     {\n       fields_assigned.insert (field_name);\n@@ -287,7 +289,8 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n   TyTy::BaseType *value = TypeCheckExpr::Resolve (&expr);\n \n   resolved_field_value_expr\n-    = coercion_site (field_type->get_field_type (), value, field.get_locus ());\n+    = coercion_site (field.get_mappings ().get_hirid (),\n+\t\t     field_type->get_field_type (), value, field.get_locus ());\n   if (resolved_field_value_expr != nullptr)\n \n     {"}, {"sha": "b810bd88512008101e5f53d414adf43c6c3cb43f", "filename": "gcc/rust/typecheck/rust-tyty-call.cc", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -58,7 +58,9 @@ TypeCheckCallExpr::visit (ADTType &type)\n \t  return;\n \t}\n \n-      auto res = field_tyty->coerce (arg);\n+      auto res = Resolver::TypeCheckBase::coercion_site (\n+\targument->get_mappings ().get_hirid (), field_tyty, arg,\n+\targument->get_locus ());\n       if (res->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  return;\n@@ -123,8 +125,9 @@ TypeCheckCallExpr::visit (FnType &type)\n       if (i < type.num_params ())\n \t{\n \t  auto fnparam = type.param_at (i);\n-\t  auto resolved_argument_type\n-\t    = fnparam.second->coerce (argument_expr_tyty);\n+\t  auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n+\t    argument->get_mappings ().get_hirid (), fnparam.second,\n+\t    argument_expr_tyty, argument->get_locus ());\n \t  if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n \t    {\n \t      rust_error_at (argument->get_locus (),\n@@ -176,9 +179,9 @@ TypeCheckCallExpr::visit (FnPtr &type)\n \t  return;\n \t}\n \n-      auto resolved_argument_type\n-\t= Resolver::TypeCheckBase::coercion_site (fnparam, argument_expr_tyty,\n-\t\t\t\t\t\t  argument->get_locus ());\n+      auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n+\targument->get_mappings ().get_hirid (), fnparam, argument_expr_tyty,\n+\targument->get_locus ());\n       if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  rust_error_at (argument->get_locus (),\n@@ -234,10 +237,9 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n \t  return;\n \t}\n \n-      auto resolved_argument_type\n-\t= Resolver::TypeCheckBase::coercion_site (fnparam.second,\n-\t\t\t\t\t\t  argument_expr_tyty,\n-\t\t\t\t\t\t  argument->get_locus ());\n+      auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n+\targument->get_mappings ().get_hirid (), fnparam.second,\n+\targument_expr_tyty, argument->get_locus ());\n       if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  rust_error_at (argument->get_locus (),"}, {"sha": "8af13586a373ac9a6d7ef3df5e24850385dd2a65", "filename": "gcc/testsuite/rust/compile/generics4.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -3,10 +3,9 @@ struct GenericStruct<T>(T, usize);\n fn main() {\n     let a2;\n     a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"generic item takes at most 1 type arguments but 2 were supplied\" }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n-    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n-    // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n-    // { dg-error {expected \\[T\\?\\] got \\[<tyty::error>\\]} \"\" { target *-*-* } .-4 }\n+                                           // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n+                                           // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n+                                           // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n \n     let b2: i32 = a2.0;\n     // { dg-error {Expected Tuple or ADT got: T\\?} \"\" { target *-*-* } .-1 }"}, {"sha": "ff791533754b3a216da6fcda85b397795dc57610", "filename": "gcc/testsuite/rust/compile/reference1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let a = &123;\n     let b: &mut i32 = a;\n-    // { dg-error \"expected .&mut i32. got .& i32.\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"mismatched mutability\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"expected .&mut i32. got .& i32.\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "77410e932daa8bb577f2d7c3e28c2fb4b0dcafac", "filename": "gcc/testsuite/rust/compile/shadow1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -3,6 +3,5 @@ fn main() {\n     let mut x;\n     x = true;\n     x = x + 2; // { dg-error \"cannot apply this operator to types bool and <integer>\"  }\n-    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n-    // { dg-error {expected \\[bool\\] got \\[<tyty::error>\\]} \"\" { target *-*-* } .-2 }\n+               // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}, {"sha": "ad85ed97ecbc85fa805e7068e24c7d86e13fa3f5", "filename": "gcc/testsuite/rust/compile/type-bindings1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -7,5 +7,4 @@ fn main() {\n     // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n     // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-3 }\n     // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-4 }\n-    // { dg-error {expected \\[T\\?\\] got \\[<tyty::error>\\]} \"\" { target *-*-* } .-5 }\n }"}, {"sha": "fce44ad19940958c931c05e273c307bd6a255c81", "filename": "gcc/testsuite/rust/execute/torture/issue-1198.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1198.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d17a8b6b2c086d4df516de06ddacdf88728f6ba/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1198.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1198.rs?ref=5d17a8b6b2c086d4df516de06ddacdf88728f6ba", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-output \"foo_deref\\nimm_deref\\n123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            let a = \"foo_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &self.0\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let foo: Foo<i32> = Foo(123);\n+    let bar: &i32 = &foo;\n+\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, *bar);\n+    }\n+\n+    0\n+}"}]}