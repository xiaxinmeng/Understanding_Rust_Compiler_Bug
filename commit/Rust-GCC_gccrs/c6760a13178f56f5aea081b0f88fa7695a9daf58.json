{"sha": "c6760a13178f56f5aea081b0f88fa7695a9daf58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY3NjBhMTMxNzhmNTZmNWFlYTA4MWIwZjg4ZmE3Njk1YTlkYWY1OA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-01T18:02:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-01T18:02:45Z"}, "message": "jit-playback: Move dso-creation into its own function\n\ngcc/jit/ChangeLog:\n\t* jit-playback.c (gcc::jit::playback::context::compile): Move DSO\n\tcreation code into...\n\t(gcc::jit::playback::context::convert_to_dso): New function.\n\t* jit-playback.h (gcc::jit::playback::context::convert_to_dso):\n\tNew function.\n\nFrom-SVN: r218238", "tree": {"sha": "f86fcd6b5f7026c592693b093c3df5d451124b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86fcd6b5f7026c592693b093c3df5d451124b73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6760a13178f56f5aea081b0f88fa7695a9daf58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6760a13178f56f5aea081b0f88fa7695a9daf58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6760a13178f56f5aea081b0f88fa7695a9daf58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6760a13178f56f5aea081b0f88fa7695a9daf58/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f50ee3cbed51591b9297c804a86b9c278bb04ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f50ee3cbed51591b9297c804a86b9c278bb04ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f50ee3cbed51591b9297c804a86b9c278bb04ec"}], "stats": {"total": 161, "additions": 90, "deletions": 71}, "files": [{"sha": "36fcc7692e2fb455fe2ae3b0dfed00d9e58237a0", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6760a13178f56f5aea081b0f88fa7695a9daf58/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6760a13178f56f5aea081b0f88fa7695a9daf58/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=c6760a13178f56f5aea081b0f88fa7695a9daf58", "patch": "@@ -1,3 +1,11 @@\n+2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-playback.c (gcc::jit::playback::context::compile): Move DSO\n+\tcreation code into...\n+\t(gcc::jit::playback::context::convert_to_dso): New function.\n+\t* jit-playback.h (gcc::jit::playback::context::convert_to_dso):\n+\tNew function.\n+\n 2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit-playback.c (gcc::jit::playback::context::compile): Use an"}, {"sha": "d16b3c46fd304308ec685887d6fad47a95101560", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 79, "deletions": 71, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6760a13178f56f5aea081b0f88fa7695a9daf58/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6760a13178f56f5aea081b0f88fa7695a9daf58/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=c6760a13178f56f5aea081b0f88fa7695a9daf58", "patch": "@@ -1590,78 +1590,11 @@ compile ()\n     return NULL;\n \n   if (get_bool_option (GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE))\n-   dump_generated_code ();\n-\n-  /* Gross hacks follow:\n-     We have a .s file; we want a .so file.\n-     We could reuse parts of gcc/gcc.c to do this.\n-     For now, just use the driver binary from the install, as\n-     named in gcc-driver-name.h\n-     e.g. \"x86_64-unknown-linux-gnu-gcc-5.0.0\".\n-   */\n-  {\n-    auto_timevar assemble_timevar (TV_ASSEMBLE);\n-    const char *errmsg;\n-    const char *argv[7];\n-    int exit_status = 0;\n-    int err = 0;\n-    const char *gcc_driver_name = GCC_DRIVER_NAME;\n-\n-    argv[0] = gcc_driver_name;\n-    argv[1] = \"-shared\";\n-    /* The input: assembler.  */\n-    argv[2] = m_path_s_file;\n-    /* The output: shared library.  */\n-    argv[3] = \"-o\";\n-    argv[4] = m_path_so_file;\n-\n-    /* Don't use the linker plugin.\n-       If running with just a \"make\" and not a \"make install\", then we'd\n-       run into\n-          \"fatal error: -fuse-linker-plugin, but liblto_plugin.so not found\"\n-       libto_plugin is a .la at build time, with it becoming installed with\n-       \".so\" suffix: i.e. it doesn't exist with a .so suffix until install\n-       time.  */\n-    argv[5] = \"-fno-use-linker-plugin\";\n-\n-    /* pex argv arrays are NULL-terminated.  */\n-    argv[6] = NULL;\n-\n-    /* pex_one's error-handling requires pname to be non-NULL.  */\n-    gcc_assert (ctxt_progname);\n-\n-    errmsg = pex_one (PEX_SEARCH, /* int flags, */\n-\t\t      gcc_driver_name,\n-\t\t      const_cast<char * const *> (argv),\n-\t\t      ctxt_progname, /* const char *pname */\n-\t\t      NULL, /* const char *outname */\n-\t\t      NULL, /* const char *errname */\n-\t\t      &exit_status, /* int *status */\n-\t\t      &err); /* int *err*/\n-    if (errmsg)\n-      {\n-\tadd_error (NULL, \"error invoking gcc driver: %s\", errmsg);\n-\treturn NULL;\n-      }\n+    dump_generated_code ();\n \n-    /* pex_one can return a NULL errmsg when the executable wasn't\n-       found (or doesn't exist), so trap these cases also.  */\n-    if (exit_status || err)\n-      {\n-\tadd_error (NULL,\n-\t\t   \"error invoking gcc driver: exit_status: %i err: %i\",\n-\t\t   exit_status, err);\n-\tadd_error (NULL,\n-\t\t   \"whilst attempting to run a driver named: %s\",\n-\t\t   gcc_driver_name);\n-\tadd_error (NULL,\n-\t\t   \"PATH was: %s\",\n-\t\t   getenv (\"PATH\"));\n-\treturn NULL;\n-      }\n-  }\n-\n-  // TODO: split out assembles vs linker\n+  convert_to_dso (ctxt_progname);\n+  if (errors_occurred ())\n+    return NULL;\n \n   /* dlopen the .so file. */\n   {\n@@ -1757,6 +1690,81 @@ make_fake_args (auto_vec <const char *> *argvec,\n #undef ADD_ARG\n }\n \n+/* Part of playback::context::compile ().\n+\n+   We have a .s file; we want a .so file.\n+   We could reuse parts of gcc/gcc.c to do this.\n+   For now, just use the driver binary from the install, as\n+   named in gcc-driver-name.h\n+   e.g. \"x86_64-unknown-linux-gnu-gcc-5.0.0\".  */\n+\n+void\n+playback::context::\n+convert_to_dso (const char *ctxt_progname)\n+{\n+  /* Currently this lumps together both assembling and linking into\n+     TV_ASSEMBLE.  */\n+  auto_timevar assemble_timevar (TV_ASSEMBLE);\n+  const char *errmsg;\n+  const char *argv[7];\n+  int exit_status = 0;\n+  int err = 0;\n+  const char *gcc_driver_name = GCC_DRIVER_NAME;\n+\n+  argv[0] = gcc_driver_name;\n+  argv[1] = \"-shared\";\n+  /* The input: assembler.  */\n+  argv[2] = m_path_s_file;\n+  /* The output: shared library.  */\n+  argv[3] = \"-o\";\n+  argv[4] = m_path_so_file;\n+\n+  /* Don't use the linker plugin.\n+     If running with just a \"make\" and not a \"make install\", then we'd\n+     run into\n+       \"fatal error: -fuse-linker-plugin, but liblto_plugin.so not found\"\n+     libto_plugin is a .la at build time, with it becoming installed with\n+     \".so\" suffix: i.e. it doesn't exist with a .so suffix until install\n+     time.  */\n+  argv[5] = \"-fno-use-linker-plugin\";\n+\n+  /* pex argv arrays are NULL-terminated.  */\n+  argv[6] = NULL;\n+\n+  /* pex_one's error-handling requires pname to be non-NULL.  */\n+  gcc_assert (ctxt_progname);\n+\n+  errmsg = pex_one (PEX_SEARCH, /* int flags, */\n+\t\t    gcc_driver_name,\n+\t\t    const_cast<char * const *> (argv),\n+\t\t    ctxt_progname, /* const char *pname */\n+\t\t    NULL, /* const char *outname */\n+\t\t    NULL, /* const char *errname */\n+\t\t    &exit_status, /* int *status */\n+\t\t    &err); /* int *err*/\n+  if (errmsg)\n+    {\n+      add_error (NULL, \"error invoking gcc driver: %s\", errmsg);\n+      return;\n+    }\n+\n+  /* pex_one can return a NULL errmsg when the executable wasn't\n+     found (or doesn't exist), so trap these cases also.  */\n+  if (exit_status || err)\n+    {\n+      add_error (NULL,\n+\t\t \"error invoking gcc driver: exit_status: %i err: %i\",\n+\t\t exit_status, err);\n+      add_error (NULL,\n+\t\t \"whilst attempting to run a driver named: %s\",\n+\t\t gcc_driver_name);\n+      add_error (NULL,\n+\t\t \"PATH was: %s\",\n+\t\t getenv (\"PATH\"));\n+      return;\n+    }\n+}\n+\n /* Top-level hook for playing back a recording context.\n \n    This plays back m_recording_ctxt, and, if no errors"}, {"sha": "25a4c287d7c5284ebe0ed5d2d46e4f2e7cdedf1e", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6760a13178f56f5aea081b0f88fa7695a9daf58/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6760a13178f56f5aea081b0f88fa7695a9daf58/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=c6760a13178f56f5aea081b0f88fa7695a9daf58", "patch": "@@ -234,6 +234,9 @@ class context\n   make_fake_args (auto_vec <const char *> *argvec,\n \t\t  const char *ctxt_progname);\n \n+  void\n+  convert_to_dso (const char *ctxt_progname);\n+\n private:\n   ::gcc::jit::recording::context *m_recording_ctxt;\n "}]}