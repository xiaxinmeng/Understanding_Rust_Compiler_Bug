{"sha": "9b9a989adc042b304572fd6d4ade46b47be6ccb8", "node_id": "C_kwDOANBUbNoAKDliOWE5ODlhZGMwNDJiMzA0NTcyZmQ2ZDRhZGU0NmI0N2JlNmNjYjg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T22:27:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T22:27:34Z"}, "message": "c++: Fix up handling of references to anon union members in initializers [PR53932]\n\nFor anonymous union members we create artificial VAR_DECLs which\nhave DECL_VALUE_EXPR for the actual COMPONENT_REF.  That works\njust fine inside of functions (including global dynamic constructors),\nbecause during gimplification such VAR_DECLs are gimplified as\ntheir DECL_VALUE_EXPR.  This is also done during regimplification.\n\nBut references to these artificial vars in DECL_INITIAL expressions\naren't ever replaced by the DECL_VALUE_EXPRs, so we end up either\nwith link failures like on the testcase below, or worse ICEs with\nLTO.\n\nThe following patch fixes those during cp_fully_fold_init where we\nalready walk all the trees (!data->genericize means that\nfunction rather than cp_fold_function).\n\n2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/53932\n\t* cp-gimplify.cc (cp_fold_r): During cp_fully_fold_init replace\n\tDECL_ANON_UNION_VAR_P VAR_DECLs with their corresponding\n\tDECL_VALUE_EXPR.\n\n\t* g++.dg/init/pr53932.C: New test.", "tree": {"sha": "f863fb6cccd9ccd4a333c89b7a0d9c40a0314fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f863fb6cccd9ccd4a333c89b7a0d9c40a0314fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b9a989adc042b304572fd6d4ade46b47be6ccb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9a989adc042b304572fd6d4ade46b47be6ccb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9a989adc042b304572fd6d4ade46b47be6ccb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9a989adc042b304572fd6d4ade46b47be6ccb8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81e68a9cdbb5411dce1f1da3b35854212305c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81e68a9cdbb5411dce1f1da3b35854212305c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c81e68a9cdbb5411dce1f1da3b35854212305c7c"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "340b464104632937d140780dbc069f369bc63cb7", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9a989adc042b304572fd6d4ade46b47be6ccb8/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9a989adc042b304572fd6d4ade46b47be6ccb8/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=9b9a989adc042b304572fd6d4ade46b47be6ccb8", "patch": "@@ -1010,6 +1010,16 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data_)\n \t}\n       break;\n \n+    case VAR_DECL:\n+      /* In initializers replace anon union artificial VAR_DECLs\n+\t with their DECL_VALUE_EXPRs, as nothing will do it later.  */\n+      if (DECL_ANON_UNION_VAR_P (stmt) && !data->genericize)\n+\t{\n+\t  *stmt_p = stmt = unshare_expr (DECL_VALUE_EXPR (stmt));\n+\t  break;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "3b129e7d68a9c98d1e9beb0794a4a926747fcd2d", "filename": "gcc/testsuite/g++.dg/init/pr53932.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9a989adc042b304572fd6d4ade46b47be6ccb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr53932.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9a989adc042b304572fd6d4ade46b47be6ccb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr53932.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr53932.C?ref=9b9a989adc042b304572fd6d4ade46b47be6ccb8", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/53932\n+// { dg-do link }\n+\n+static union { int i; };\n+int &r = i;\n+int s = i;\n+int *t = &i;\n+\n+void\n+foo (int **p, int *q)\n+{\n+  static int &u = i;\n+  static int v = i;\n+  static int *w = &i;\n+  int &x = i;\n+  int y = i;\n+  int *z = &i;\n+  *p = &i;\n+  *q = i;\n+}\n+\n+int\n+main ()\n+{\n+}"}]}