{"sha": "1d4edfd6cbded8dda48e6871f6b8a3aada38a02d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0ZWRmZDZjYmRlZDhkZGE0OGU2ODcxZjZiOGEzYWFkYTM4YTAyZA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-03-10T21:33:09Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-03-10T21:33:09Z"}, "message": "patch_tester.sh (initialization): Initialize svnpatch and stop.\n\n2008-03-10  Janis Johnson  <janis187@us.ibm.com>\n\n\t* patch_tester.sh (initialization): Initialize svnpatch and stop.\n\t(usage): Add -svnpath and -stop.\t\n\t(makedir): New.\n\t(argument handling): Process -stop and -svnpath.\n\t(setup code): Use makedir, error out if initial svn checkout fails.\n\t(update): Use svnpath.  Invoke contrib/gcc_update.\n\t(apply_patch): Require that patch was created at top level.  Use eval\n\twith option variables.  Don't use bootstrap target for make.  Verify\n\tthat some tests were run.\n\t(bootntest_patched): Use snvpath.\n\t(main loop): For -stop, exit when there are no more patches to test.\n\nFrom-SVN: r133092", "tree": {"sha": "1a246807fcafceec0ff90c0a3187a3d760d3c86b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a246807fcafceec0ff90c0a3187a3d760d3c86b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d/comments", "author": null, "committer": null, "parents": [{"sha": "fde155a75b947dea15d8e5fd877ec7bae59e1afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde155a75b947dea15d8e5fd877ec7bae59e1afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde155a75b947dea15d8e5fd877ec7bae59e1afb"}], "stats": {"total": 113, "additions": 81, "deletions": 32}, "files": [{"sha": "88cf772b96e1ff8ee7abd8a661c473c2b68873f2", "filename": "contrib/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1d4edfd6cbded8dda48e6871f6b8a3aada38a02d", "patch": "@@ -1,3 +1,17 @@\n+2008-03-10  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* patch_tester.sh (initialization): Initialize svnpatch and stop.\n+\t(usage): Add -svnpath and -stop.\t\n+\t(makedir): New.\n+\t(argument handling): Process -stop and -svnpath.\n+\t(setup code): Use makedir, error out if initial svn checkout fails.\n+\t(update): Use svnpath.  Invoke contrib/gcc_update.\n+\t(apply_patch): Require that patch was created at top level.  Use eval\n+\twith option variables.  Don't use bootstrap target for make.  Verify\n+\tthat some tests were run.\n+\t(bootntest_patched): Use snvpath.\n+\t(main loop): For -stop, exit when there are no more patches to test.\n+\n 2008-03-09  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* check_warning_flags.sh: Instead of invoke.texi, take the path"}, {"sha": "0c7488082a15b7bfd04c15d9f2e8bf901af95991", "filename": "contrib/patch_tester.sh", "status": "modified", "additions": 67, "deletions": 32, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d/contrib%2Fpatch_tester.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4edfd6cbded8dda48e6871f6b8a3aada38a02d/contrib%2Fpatch_tester.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fpatch_tester.sh?ref=1d4edfd6cbded8dda48e6871f6b8a3aada38a02d", "patch": "@@ -29,17 +29,20 @@ EOF\n \n args=$@\n \n+svnpath=svn://gcc.gnu.org/svn/gcc\n dashj=\n default_standby=1\n standby=$default_standby\n default_watermark=0.60\n watermark=$default_watermark\n savecompilers=false\n nogpg=false\n+stop=false\n \n usage() {\n     cat <<EOF\n patch_tester.sh [-j<N>] [-standby N] [-watermark N] [-savecompilers] [-nogpg]\n+                [-svnpath URL] [-stop]\n                 <source_dir> [patches_dir [state_dir [build_dir]]]\n \n     J is the flag passed to make.  Default is empty string.\n@@ -55,6 +58,11 @@ patch_tester.sh [-j<N>] [-standby N] [-watermark N] [-savecompilers] [-nogpg]\n \n     NOGPG can be used to avoid checking the GPG signature of patches.\n \n+    URL is the location of the GCC SVN repository.  The default is\n+    ${svnpath}.\n+\n+    STOP exits when PATCHES_DIR is empty.\n+\n     SOURCE_DIR is the directory containing GCC's toplevel configure.\n \n     PATCHES_DIR is the directory containing the patches to be tested.\n@@ -70,6 +78,15 @@ EOF\n     exit 1\n }\n \n+makedir () {\n+    DIRNAME=$1\n+    mkdir -p $DIRNAME\n+    if [ $? -ne 0 ]; then\n+\techo \"ERROR: could not make directory $DIRNAME\"\n+\texit 1\n+    fi\n+}\n+\n while [ $# -ne 0 ]; do\n     case $1 in\n \t-j*)\n@@ -89,6 +106,12 @@ while [ $# -ne 0 ]; do\n \t-nogpg)\n \t    nogpg=true; shift\n \t    ;;\n+\t-stop)\n+\t    stop=true; shift\n+\t    ;;\n+\t-svnpath)\n+\t    svnpath=$2; shift; shift\n+\t    ;;\n \t-*) \n \t    echo \"Invalid option: $1\"\n \t    usage\n@@ -122,13 +145,17 @@ else\n     BUILD=$4\n fi\n \n-[ -d $PATCHES ] || mkdir -p $PATCHES\n-[ -d $STATE ] || mkdir -p $STATE\n-[ -d $STATE/patched ] || mkdir -p $STATE/patched\n-[ -d $SOURCE ] || mkdir -p $SOURCE\n+[ -d $PATCHES ] || makedir $PATCHES\n+[ -d $STATE ] || makedir $STATE\n+[ -d $STATE/patched ] || makedir $STATE/patched\n+[ -d $SOURCE ] || makedir $SOURCE\n [ -f $SOURCE/config.guess ] || {\n     cd $SOURCE\n-    svn -q co svn://gcc.gnu.org/svn/gcc/trunk .\n+    svn -q co $svnpath/trunk .\n+    if [ $? -ne 0 ]; then\n+\techo \"ERROR: initial svn checkout failed\"\n+\texit 1\n+    fi\n }\n \n # This can contain required local settings:\n@@ -205,15 +232,15 @@ update () {\n     cd $SOURCE\n     case $svn_branch in\n \ttrunk)\n-\t    if ! svn switch -r $svn_revision svn://gcc.gnu.org/svn/gcc/trunk &> $TESTING/svn ; then\n+\t    if ! svn switch -r $svn_revision $svnpath/trunk &> $TESTING/svn ; then\n \t\treport \"failed to update svn sources with\"\n-\t\treport \"svn switch -r $svn_revision svn://gcc.gnu.org/svn/gcc/trunk\"\n+\t\treport \"svn switch -r $svn_revision $svnpath/trunk\"\n \t\tfreport $TESTING/svn\n \t\treturn 1\n \t    fi\n \t    ;;\n \n-\tsvn://gcc.gnu.org/svn/gcc/*)\n+\t${svnpath}*)\n \t    if ! svn switch -r $svn_revision $svn_branch &> $TESTING/svn ; then\n \t\treport \"failed to update svn sources with\"\n \t\treport \"svn switch -r $svn_revision $svn_branch\"\n@@ -223,14 +250,15 @@ update () {\n \t    ;;\n \n \t*)\n-\t    if ! svn switch -r $svn_revision svn://gcc.gnu.org/svn/gcc/branches/$svn_branch &> $TESTING/svn ; then\n+\t    if ! svn switch -r $svn_revision $svnpath/branches/$svn_branch &> $TESTING/svn ; then\n \t\treport \"failed to update svn sources with\"\n-\t\treport \"svn switch -r $svn_revision svn://gcc.gnu.org/svn/gcc/branches/$svn_branch\"\n+\t\treport \"svn switch -r $svn_revision $svnpath/branches/$svn_branch\"\n \t\tfreport $TESTING/svn\n \t\treturn 1\n \t    fi\n \t    ;;\n     esac\n+    contrib/gcc_update --touch\n \n     current_version=`svn info $SOURCE | grep \"^Revision:\" | sed -e \"s/^Revision://g\" -e \"s/ //g\"`\n     if [[ $VERSION < $current_version ]]; then\n@@ -251,22 +279,12 @@ apply_patch () {\n \tfi\n     fi\n \n-    # Detect if the patch was created in toplev GCC.\n-    grep \"^Index: \" $PATCH | grep \"gcc/\"\n-    if [ $? = 0 ]; then\n-\tcd $SOURCE\n-\tif ! patch -p0 < $PATCH &> $TESTING/patching ; then\n-\t    report \"your patch failed to apply:\"\n-\t    freport $TESTING/patching\n-\t    return 1\n-\tfi\n-    else\n-\tcd $SOURCE/gcc\n-\tif ! patch -p0 < $PATCH &> $TESTING/patching ; then\n-\t    report \"your patch failed to apply:\"\n-\t    freport $TESTING/patching\n-\t    return 1\n-\tfi\n+    cd $SOURCE\n+    if ! patch -p0 < $PATCH &> $TESTING/patching ; then\n+\treport \"your patch failed to apply:\"\n+\treport \"(check that the patch was created at the top level)\"\n+\tfreport $TESTING/patching\n+\treturn 1\n     fi\n \n     # Just assume indexes for now -- not really great, but svn always\n@@ -296,16 +314,16 @@ bootntest () {\n \n     CONFIG_OPTIONS=`grep \"^configure:\" $PATCH | sed -e \"s/^configure://g\"`\n     CONFIG_OPTIONS=\"$default_config $CONFIG_OPTIONS\"\n-    if ! $SOURCE/configure $CONFIG_OPTIONS &> $1/configure ; then\n-\treport \"configure failed with:\"\n+    if ! eval $SOURCE/configure $CONFIG_OPTIONS &> $1/configure ; then\n+\treport \"configure with `basename $1` version failed with:\"\n \tfreport $1/configure\n \treturn 1\n     fi\n \n     MAKE_ARGS=`grep \"^make:\" $PATCH | sed -e \"s/^make://g\"`\n     MAKE_ARGS=\"$default_make $MAKE_ARGS\"\n-    if ! make $dashj $MAKE_ARGS bootstrap &> $1/bootstrap ; then\n-\treport \"bootstrap failed with last lines:\"\n+    if ! eval make $dashj $MAKE_ARGS &> $1/bootstrap ; then\n+\treport \"bootstrap with `basename $1` version failed with last lines:\"\n \ttail -30 $1/bootstrap > $1/last_bootstrap\n \tfreport $1/last_bootstrap\n \treport \"grep --context=20 Error bootstrap:\"\n@@ -316,7 +334,13 @@ bootntest () {\n \n     CHECK_OPTIONS=`grep \"^check:\" $PATCH | sed -e \"s/^check://g\"`\n     CHECK_OPTIONS=\"$default_check $CHECK_OPTIONS\"\n-    make $dashj $CHECK_OPTIONS -k check &> $1/check\n+    eval make $dashj $CHECK_OPTIONS -k check &> $1/check\n+\n+    SUITESRUN=\"`grep 'Summary ===' $1/check | cut -d' ' -f 2 | sort`\"\n+    if [ x$SUITESRUN = x ]; then\n+\treport \"check with `basename $1` version failed, no testsuites were run\"\n+\treturn 1\n+    fi\n \n     for LOG in $TESTLOGS ; do\n \tif [ -f $BUILD/$LOG ]; then\n@@ -338,7 +362,7 @@ bootntest_patched () {\n # Build the pristine tree with exactly the same options as the patch under test.\n bootntest_pristine () {\n     cleanup\n-    current_branch=`svn info $SOURCE | grep \"^URL:\" | sed -e \"s/URL: //g\" -e \"s/svn:\\/\\/gcc.gnu.org\\/svn\\/gcc\\///g\"`\n+    current_branch=`svn info $SOURCE | grep \"^URL:\" | sed -e \"s/URL: //g\" -e \"s,${svnpath},,g\"`\n     current_version=`svn info $SOURCE | grep \"^Revision:\" | sed -e \"s/^Revision://g\" -e \"s/ //g\"`\n     PRISTINE=$STATE/$current_branch/$current_version\n \n@@ -448,11 +472,22 @@ if [ -d $TESTING ]; then\n     fi\n fi\n \n+firstpatch=true\n while true; do\n     PATCH=`ls -rt -1 $PATCHES | head -1`\n     if [ x$PATCH = x ]; then\n+\tif [ $stop = true ]; then\n+\t    if [ $firstpatch = true ]; then\n+\t\techo \"No patches ready to test, quitting.\"\n+\t\texit 1\n+\t    else\n+\t\techo \"No more patches to test.\"\n+\t\texit 0\n+\t    fi\n+\tfi\n \tsleep ${standby}m\n     else\n+\tfirstpatch=false\n \tsysload=`uptime | cut -d, -f 5`\n \tif [[ $sysload > $watermark ]]; then\n \t    # Wait a bit when system load is too high."}]}