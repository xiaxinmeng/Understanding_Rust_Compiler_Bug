{"sha": "62906aaa5c38c1740894408ba9fae8b5d41cfb8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI5MDZhYWE1YzM4YzE3NDA4OTQ0MDhiYTlmYWU4YjVkNDFjZmI4ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-19T18:24:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-19T18:24:13Z"}, "message": "tweak comment\n\nFrom-SVN: r150940", "tree": {"sha": "0f1dbd8b37711fef3b33046a11dce6983f1932db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1dbd8b37711fef3b33046a11dce6983f1932db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62906aaa5c38c1740894408ba9fae8b5d41cfb8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62906aaa5c38c1740894408ba9fae8b5d41cfb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62906aaa5c38c1740894408ba9fae8b5d41cfb8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62906aaa5c38c1740894408ba9fae8b5d41cfb8d/comments", "author": null, "committer": null, "parents": [{"sha": "595de3023df632cbcdb4e89daf749d3acbcdd748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595de3023df632cbcdb4e89daf749d3acbcdd748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595de3023df632cbcdb4e89daf749d3acbcdd748"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "9aa8ef1b69a8a9952027ef7df010c7ad098b8afb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62906aaa5c38c1740894408ba9fae8b5d41cfb8d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62906aaa5c38c1740894408ba9fae8b5d41cfb8d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=62906aaa5c38c1740894408ba9fae8b5d41cfb8d", "patch": "@@ -3953,12 +3953,13 @@ mark_used (tree decl)\n \t within the body of a function so as to avoid collecting live data\n \t on the stack (such as overload resolution candidates).\n \n-         ??? Now that inlining is done unit-at-a-time, we ought to defer\n-         synthesis like we do templates.  */\n+         We could just let cp_write_global_declarations handle synthesizing\n+         this function, since we just added it to deferred_fns, but doing\n+         it at the use site produces better error messages.  */\n       ++function_depth;\n       synthesize_method (decl);\n       --function_depth;\n-      /* If we've already synthesized the method we don't need to\n+      /* If this is a synthesized method we don't need to\n \t do the instantiation test below.  */\n     }\n   else if ((DECL_NON_THUNK_FUNCTION_P (decl) || TREE_CODE (decl) == VAR_DECL)"}]}