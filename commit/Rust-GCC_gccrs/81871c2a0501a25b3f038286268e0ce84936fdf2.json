{"sha": "81871c2a0501a25b3f038286268e0ce84936fdf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4NzFjMmEwNTAxYTI1YjNmMDM4Mjg2MjY4ZTBjZTg0OTM2ZmRmMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-10-12T06:18:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-10-12T06:18:12Z"}, "message": "trans-common.c (build_field): Fix comment typo.\n\n\t* trans-common.c (build_field): Fix comment typo.\n\t(create_common): Set backend_decl of COMMON or EQUIVALENCEd\n\tvariables to a VAR_DECL with the COMPONENT_REF in\n\tDECL_HAS_VALUE_EXPR rather than COMPONENT_REF directly.\n\t* f95-lang.c (gfc_expand_function): Emit debug info for\n\tEQUIVALENCEd variables if the equiv union is going to be output.\n\nFrom-SVN: r105288", "tree": {"sha": "178dc578bf72c1c0badbd660ff2e0ed2e152ac89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/178dc578bf72c1c0badbd660ff2e0ed2e152ac89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81871c2a0501a25b3f038286268e0ce84936fdf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81871c2a0501a25b3f038286268e0ce84936fdf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81871c2a0501a25b3f038286268e0ce84936fdf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81871c2a0501a25b3f038286268e0ce84936fdf2/comments", "author": null, "committer": null, "parents": [{"sha": "595cf76b1f7e63889c5a0cc9b09163c0264d2e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595cf76b1f7e63889c5a0cc9b09163c0264d2e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595cf76b1f7e63889c5a0cc9b09163c0264d2e25"}], "stats": {"total": 127, "additions": 98, "deletions": 29}, "files": [{"sha": "74e74afe32c8a31e71c1d9bf6b99f2639d8e3443", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81871c2a0501a25b3f038286268e0ce84936fdf2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81871c2a0501a25b3f038286268e0ce84936fdf2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=81871c2a0501a25b3f038286268e0ce84936fdf2", "patch": "@@ -1,7 +1,16 @@\n-2005-10-11  Steven G. Kargl <kargls@comcast.net>\n+2005-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-common.c (build_field): Fix comment typo.\n+\t(create_common): Set backend_decl of COMMON or EQUIVALENCEd\n+\tvariables to a VAR_DECL with the COMPONENT_REF in\n+\tDECL_HAS_VALUE_EXPR rather than COMPONENT_REF directly.\n+\t* f95-lang.c (gfc_expand_function): Emit debug info for\n+\tEQUIVALENCEd variables if the equiv union is going to be output.\n+\n+2005-10-11  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/20786\n-\t*iresolve.c (gfc_resolve_aint, gfc_resolve_anint ): Type conversion \n+\t* iresolve.c (gfc_resolve_aint, gfc_resolve_anint): Type conversion\n \tof the argument.\n \n 2005-10-11  Jakub Jelinek  <jakub@redhat.com>\n@@ -707,7 +716,7 @@\n \t* scanner.c (preprocessor_line): Don't write beyond the end of flag\n \tbuffer.\n \n-2005-08-07   Janne Blomqvist <jblomqvi@cc.hut.fi>\n+2005-08-07   Janne Blomqvist  <jblomqvi@cc.hut.fi>\n \n \tPR fortran/22390 \n \t* dump-parse-tree.c (gfc_show_code_node): Add case for FLUSH.\n@@ -998,7 +1007,7 @@\n \n \t* all files: Update FSF address in copyright headers.\n \n-2005-06-24  Jerry DeLisle <jvdelisle@verizon.net>\n+2005-06-24  Jerry DeLisle  <jvdelisle@verizon.net>\n \n \tPR fortran/21915\n \t* gfortran.h: Add symbols for new intrinsic functions.\n@@ -1055,7 +1064,7 @@\n \tin a warning message.\n \n 2005-06-18  Erik Edelman  <eedelman@acclab.helsinki.fi>\n-\t    Steven G. Kargl <kargls@comast.net>\n+\t    Steven G. Kargl  <kargls@comast.net>\n \n \tPR fortran/19926\n \t* primary.c (gfc_match_rvalue):  expr_type can be EXPR_CONSTANT\n@@ -1127,7 +1136,7 @@\n \t* trans-decl.c (gfc_build_builtin_function_decls): update declaration\n \t* trans-stmt.c (gfc_trans_deallocate): Implement STAT= feature.\n \n-2005-06-07  Jerry DeLisle <jvdelisle@verizon.net>\n+2005-06-07  Jerry DeLisle  <jvdelisle@verizon.net>\n \n \t* intrinsic.texi: Add documentation for\tdcmplx, digits,\n \tdim, idim, ddim, dot_product, dprod, dreal, and dtime.\n@@ -1160,7 +1169,7 @@\n \t* array.c (gfc_match_array_constructor): Disallow empty array\n \tconstructor.\n \n-2005-06-03  Jerry DeLisle <jvdelisle@verizon.net>\n+2005-06-03  Jerry DeLisle  <jvdelisle@verizon.net>\n \n \t* fortran/intrinsic.texi: Add documentation for\n \tcommand_argument_count, conjg, dconjg, count,\n@@ -1312,7 +1321,7 @@\n \tgfc_type_letter (BT_COMPLEX) for complex to\n \tto resolved function name.\n \n-2005-05-18 Erik Edelmann <erik.edelmann@iki.fi>\n+2005-05-18  Erik Edelmann  <erik.edelmann@iki.fi>\n \n \t* array.c (gfc_match_array_constructor): Support [ ... ]\n \tstyle array constructors.\n@@ -1367,8 +1376,8 @@\n \t(gfc_trans_where_2): Initialize mask indexes before calling\n \tgfc_trans_nested_forall_loop.\n \n-2005-05-15  Feng Wang <fengwang@nudt.edu.cn>\n-\tJerry DeLisle <jvdelisle@verizon.net>\n+2005-05-15  Feng Wang  <fengwang@nudt.edu.cn>\n+\tJerry DeLisle  <jvdelisle@verizon.net>\n \n \tPR fortran/17432\n \t* trans-stmt.c (gfc_trans_label_assign): fix pointer type, to \n@@ -1563,7 +1572,7 @@\n \t* resolve.c (resolve_variable): If e->symtree is not set, this\n \tought to be a FAILURE, and not a segfault.\n \n-2005-04-17  Paul Thomas <pault@gcc.gnu.org>\n+2005-04-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/17472\n \tPR fortran/18209\n@@ -2986,7 +2995,7 @@\n \n \t* gfortran.texi: Fix a typo.\n \n-2004-09-15  Aaron W. LaFramboise <aaronavay62@aaronwl.com>\n+2004-09-15  Aaron W. LaFramboise  <aaronavay62@aaronwl.com>\n \n \t* parse.c (eof_buf): Rename eof to eof_buf.\n \t(unexpected_eof): Same.\n@@ -4379,7 +4388,7 @@\n \tunused variables if they're use associated.\n \n 2004-06-14  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n-\tAndrew Vaught <andyv@firstinter.net>\n+\tAndrew Vaught  <andyv@firstinter.net>\n \n \tPR fortran/14928\n \t* gfortran.h (gfc_check_f): Add new field f3ml.\n@@ -4746,7 +4755,7 @@\n \n \t* arith.c: Fix comment typos.\n \n-2004-05-15  Tobias Schlueter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-15  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/13742\n \t* decl.c (add_init_expr_to_sym): Verify that COMMON variable is\n@@ -4849,7 +4858,7 @@\n \n \t* decl.c (variable_decl): Always apply default initializer.\n \n-2004-05-08  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-08  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/15206\n \t* trans-intrinsic.c (gfc_conv_intrinsic_rrspacing): Fixed to\n@@ -4933,20 +4942,20 @@\n \t* primary.c (match_digits, match_integer_constant): Add comment\n \texplaining signflag.\n \n-2004-05-01  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-01  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/13940\n \t* primary.c: Include system.h and flags.h, needed for pedantic.\n \t(match_boz_constant): Allow \"x\" for hexadecimal constants, warn if\n \tpedantic is set.\n \n-2004-05-01  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-01  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/13940\n \t* match.c (match_data_constant): Handle case where\n \tgfc_find_symbol\tsets sym to NULL\n \n-2004-04-28  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-04-28  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* Make-lang.in (f95-lang.o, trans-intrinsic.o): Add missing\n \tdependency on mathbuiltins.def\n@@ -5257,7 +5266,7 @@\n \n \t* resolve.c (resolve_branch): Get error message right way round.\n \n-2004-01-10  Canqun Yang <canqun@nudt.edu.cn>\n+2004-01-10  Canqun Yang  <canqun@nudt.edu.cn>\n \n \t* trans-array (gfc_conv_loop_setup): Adjust comment to track\n \treality.\n@@ -5346,7 +5355,7 @@\n \t(GFC_DECL_ASSIGN_ADDR(node)): New macro to access this.\n \t(GFC_DECL_ASSIGN(node)): New macro to access flag.\n \n-2003-12-31  Huang Chun <chunhuang73@hotmail.com>\n+2003-12-31  Huang Chun  <chunhuang73@hotmail.com>\n \n \tPR fortran/13434\n \t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxval): Fixed bug in\n@@ -5363,7 +5372,7 @@\n \t* trans-expr.c (gfc_conv_expr_op): Fold the result expression.\n \t* trans.c (gfc_add_modify_expr, gfc_add_expr_to_block): Likewise.\n \n-2003-12-12  Huang Chun <chunhuang73@hotmail.com>\n+2003-12-12  Huang Chun  <chunhuang73@hotmail.com>\n \n \t* primary.c (match_substring): Fix substring bug for start point\n \tor end point is NULL.\n@@ -5408,7 +5417,7 @@\n \n \t* io.c (gfc_match_format): Check for missing format label.\n \n-2003-11-30 Huang Chun <chunhuang73@hotmail.com>\n+2003-11-30 Huang Chun  <chunhuang73@hotmail.com>\n \n \tPR fortran/13155\n \t* trans-decl.c (gfc_sym_mangled_function_id): Don't mangle symbols\n@@ -5444,7 +5453,7 @@\n \n \t* trans.c (gfc_create_var_np): Use create_tmp_var_raw.\n \n-2003-11-28 Huang Chun <chunhuang73@hotmail.com>\n+2003-11-28 Huang Chun  <chunhuang73@hotmail.com>\n \n \t* trans.h (has_alternate_specifier): New global variable.\n \t* match.c (gfc_match_call): Handle actual arguments associated with\n@@ -7865,7 +7874,7 @@\n \tNON_LVALUE_EXPR.\n \t* trans-stmt.c (g95_trans_arithmetic_if): Implement this.\n \n-2002-09-18  Steven Bosscher <s.bosscher@student.tudelft.nl>\n+2002-09-18  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n \n \t* Make-lang.in (F95_ADDITIONAL_OBJS): Add tree-ssa-dce.o\n \n@@ -7943,7 +7952,7 @@\n \t* trans-intrinsic.c: Implement PRODUCT, COUNT. MINLOC and MAXLOC\n \tintrinsics.\n \n-2002-09-02  Steven Bosscher <s.bosscher@student.tudelft.nl>\n+2002-09-02  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n \n \t* trans-array.c, trans-types.c:\tAdd rank information to descriptor.\n \n@@ -7960,7 +7969,7 @@\n \t* trans-types.c (g95_init_types): Always name integer and char types.\n \t(g95_get_array_type_bounds): TYPE_NAME may be a TYPE_DECL.\n \n-2002-09-02  Steven Bosscher <s.bosscher@student.tudelft.nl>\n+2002-09-02  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n \n \t* Make-lang.in: Add options.c to F95_PARSER_OBJS\n "}, {"sha": "d7bc19b0b4f2513e7a07c024792550898b75f138", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81871c2a0501a25b3f038286268e0ce84936fdf2/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81871c2a0501a25b3f038286268e0ce84936fdf2/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=81871c2a0501a25b3f038286268e0ce84936fdf2", "patch": "@@ -187,6 +187,36 @@ tree *ridpointers = NULL;\n static void\n gfc_expand_function (tree fndecl)\n {\n+  tree t;\n+\n+  if (DECL_INITIAL (fndecl)\n+      && BLOCK_SUBBLOCKS (DECL_INITIAL (fndecl)))\n+    {\n+      /* Local static equivalenced variables are never seen by\n+\t check_global_declarations, so we need to output debug\n+\t info by hand.  */\n+\n+      t = BLOCK_SUBBLOCKS (DECL_INITIAL (fndecl));\n+      for (t = BLOCK_VARS (t); t; t = TREE_CHAIN (t))\n+\tif (TREE_CODE (t) == VAR_DECL && DECL_HAS_VALUE_EXPR_P (t)\n+\t    && TREE_STATIC (t))\n+\t  {\n+\t    tree expr = DECL_VALUE_EXPR (t);\n+\n+\t    if (TREE_CODE (expr) == COMPONENT_REF\n+\t\t&& TREE_CODE (TREE_OPERAND (expr, 0)) == VAR_DECL\n+\t\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0)))\n+\t\t   == UNION_TYPE\n+\t\t&& cgraph_varpool_node (TREE_OPERAND (expr, 0))->needed\n+\t\t&& errorcount == 0 && sorrycount == 0)\n+\t      {\n+\t\ttimevar_push (TV_SYMOUT);\n+\t\t(*debug_hooks->global_decl) (t);\n+\t\ttimevar_pop (TV_SYMOUT);\n+\t      }\n+\t  }\n+    }\n+\n   tree_rest_of_compilation (fndecl);\n }\n \f"}, {"sha": "ebd7f52627ec0cd464c8eb431b7682c95a3ab0f6", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81871c2a0501a25b3f038286268e0ce84936fdf2/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81871c2a0501a25b3f038286268e0ce84936fdf2/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=81871c2a0501a25b3f038286268e0ce84936fdf2", "patch": "@@ -241,7 +241,7 @@ build_field (segment_info *h, tree union_type, record_layout_info rli)\n                                         DECL_FIELD_OFFSET (field),\n                                         DECL_SIZE_UNIT (field)));\n   /* If this field is assigned to a label, we create another two variables.\n-     One will hold the address of taget label or format label. The other will\n+     One will hold the address of target label or format label. The other will\n      hold the length of format label string.  */\n   if (h->sym->attr.assign)\n     {\n@@ -471,8 +471,38 @@ create_common (gfc_common_head *com, segment_info * head, bool saw_equiv)\n   /* Build component reference for each variable.  */\n   for (s = head; s; s = next_s)\n     {\n-      s->sym->backend_decl = build3 (COMPONENT_REF, TREE_TYPE (s->field),\n-\t\t\t\tdecl, s->field, NULL_TREE);\n+      tree var_decl;\n+\n+      var_decl = build_decl (VAR_DECL, DECL_NAME (s->field),\n+\t\t\t     TREE_TYPE (s->field));\n+      gfc_set_decl_location (var_decl, &s->sym->declared_at);\n+      TREE_PUBLIC (var_decl) = TREE_PUBLIC (decl);\n+      TREE_STATIC (var_decl) = TREE_STATIC (decl);\n+      TREE_USED (var_decl) = TREE_USED (decl);\n+      if (s->sym->attr.target)\n+\tTREE_ADDRESSABLE (var_decl) = 1;\n+      /* This is a fake variable just for debugging purposes.  */\n+      TREE_ASM_WRITTEN (var_decl) = 1;\n+\n+      if (com)\n+\tvar_decl = pushdecl_top_level (var_decl);\n+      else\n+\tgfc_add_decl_to_function (var_decl);\n+\n+      SET_DECL_VALUE_EXPR (var_decl,\n+\t\t\t   build3 (COMPONENT_REF, TREE_TYPE (s->field),\n+\t\t\t\t   decl, s->field, NULL_TREE));\n+      DECL_HAS_VALUE_EXPR_P (var_decl) = 1;\n+\n+      if (s->sym->attr.assign)\n+\t{\n+\t  gfc_allocate_lang_decl (var_decl);\n+\t  GFC_DECL_ASSIGN (var_decl) = 1;\n+\t  GFC_DECL_STRING_LEN (var_decl) = GFC_DECL_STRING_LEN (s->field);\n+\t  GFC_DECL_ASSIGN_ADDR (var_decl) = GFC_DECL_ASSIGN_ADDR (s->field);\n+\t}\n+\n+      s->sym->backend_decl = var_decl;\n \n       next_s = s->next;\n       gfc_free (s);"}]}