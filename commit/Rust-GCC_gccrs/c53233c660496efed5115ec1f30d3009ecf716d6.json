{"sha": "c53233c660496efed5115ec1f30d3009ecf716d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzMjMzYzY2MDQ5NmVmZWQ1MTE1ZWMxZjMwZDMwMDllY2Y3MTZkNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-27T11:51:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-27T11:51:43Z"}, "message": "Fold comparisons between sqrt and zero\n\nThe expression:\n\n      signbit(sqrt(x))\n\nis always 0 for -ffast-math.  The signbit fold first converts it to:\n\n      sqrt(x) < 0\n\nand whether we realise that this is false depends on a race between two\nfolders: the sqrt comparison folder, which wants to convert it to\n\n      x < 0*0\n\nand the generic tree_expr_nonnegative_p rule for ... < 0, which would\ngive the hoped-for 0.\n\nThe sqrt code already handles comparisons with negative values specially,\nso this patch simply extends that idea to comparisons with zero.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* match.pd: Handle sqrt(x) cmp 0 specially.\n\ngcc/testsuite/\n\t* gcc.dg/torture/builtin-sqrt-cmp-1.c: New test.\n\nFrom-SVN: r229422", "tree": {"sha": "81cfb3c2323bef8e2dc2dea990e95e29dc92fc9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81cfb3c2323bef8e2dc2dea990e95e29dc92fc9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c53233c660496efed5115ec1f30d3009ecf716d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53233c660496efed5115ec1f30d3009ecf716d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c53233c660496efed5115ec1f30d3009ecf716d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53233c660496efed5115ec1f30d3009ecf716d6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8c04e73cd50d34d2b9f4128c615dbd35a6e40a"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "a90996651ea8ad957996f5e841c664d9d54f5dbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c53233c660496efed5115ec1f30d3009ecf716d6", "patch": "@@ -1,3 +1,7 @@\n+2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* match.pd: Handle sqrt(x) cmp 0 specially.\n+\n 2015-10-27  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* tree-vect-generic.c (expand_vector_operations_1): Check"}, {"sha": "b8e6b4643c8a7d40dd39bd7b5cd22e50024bb4b9", "filename": "gcc/match.pd", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c53233c660496efed5115ec1f30d3009ecf716d6", "patch": "@@ -1973,6 +1973,25 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t{ constant_boolean_node (true, type); })\n        /* sqrt(x) > y is the same as x >= 0, if y is negative.  */\n        (ge @0 { build_real (TREE_TYPE (@0), dconst0); })))\n+     (if (real_equal (TREE_REAL_CST_PTR (@1), &dconst0))\n+      (switch\n+       /* sqrt(x) < 0 is always false.  */\n+       (if (cmp == LT_EXPR)\n+\t{ constant_boolean_node (false, type); })\n+       /* sqrt(x) >= 0 is always true if we don't care about NaNs.  */\n+       (if (cmp == GE_EXPR && !HONOR_NANS (@0))\n+\t{ constant_boolean_node (true, type); })\n+       /* sqrt(x) <= 0 -> x == 0.  */\n+       (if (cmp == LE_EXPR)\n+\t(eq @0 @1))\n+       /* Otherwise sqrt(x) cmp 0 -> x cmp 0.  Here cmp can be >=, >,\n+          == or !=.  In the last case:\n+\n+\t    (sqrt(x) != 0) == (NaN != 0) == true == (x != 0)\n+\n+\t  if x is negative or NaN.  Due to -funsafe-math-optimizations,\n+\t  the results for other x follow from natural arithmetic.  */\n+       (cmp @0 @1)))\n      (if (cmp == GT_EXPR || cmp == GE_EXPR)\n       (with\n        {"}, {"sha": "cfc9f7a26cb78e4ad3f86cd79b8f1ff49e18ad0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c53233c660496efed5115ec1f30d3009ecf716d6", "patch": "@@ -1,3 +1,7 @@\n+2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/torture/builtin-sqrt-cmp-1.c: New test.\n+\n 2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/builtins-52.c: Add -O to dg-options."}, {"sha": "3f4a708405616abd836c843693683e3c86a34830", "filename": "gcc/testsuite/gcc.dg/torture/builtin-sqrt-cmp-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-sqrt-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c53233c660496efed5115ec1f30d3009ecf716d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-sqrt-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-sqrt-cmp-1.c?ref=c53233c660496efed5115ec1f30d3009ecf716d6", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do link } */\n+/* { dg-options \"-ffast-math\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+extern double sqrt (double);\n+extern float sqrtf (float);\n+extern long double sqrtl (long double);\n+\n+/* All references to link_error should go away at compile-time.  */\n+extern void link_error (void);\n+\n+#define TEST_ONE(SUFFIX, TYPE)\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\\\n+  test##SUFFIX (TYPE f, int *res)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE sqrt_res = sqrt##SUFFIX (f);\t\t\\\n+    res[0] = sqrt_res < 0;\t\t\t\\\n+    if (res[0])\t\t\t\t\t\\\n+      link_error ();\t\t\t\t\\\n+    res[1] = sqrt_res <= 0;\t\t\t\\\n+    if (res[1] != (f == 0))\t\t\t\\\n+      link_error ();\t\t\t\t\\\n+    res[2] = (sqrt_res == 0);\t\t\t\\\n+    if (res[2] != (f == 0))\t\t\t\\\n+      link_error ();\t\t\t\t\\\n+    res[3] = (sqrt_res != 0);\t\t\t\\\n+    if (res[3] != (f != 0))\t\t\t\\\n+      link_error ();\t\t\t\t\\\n+    res[4] = (sqrt_res > 0);\t\t\t\\\n+    if (res[4] != (f > 0))\t\t\t\\\n+      link_error ();\t\t\t\t\\\n+    res[5] = (sqrt_res >= 0);\t\t\t\\\n+    if (!res[5])\t\t\t\t\\\n+      link_error ();\t\t\t\t\\\n+  }\n+\n+volatile float f;\n+volatile double d;\n+volatile long double ld;\n+\n+TEST_ONE (f, float)\n+TEST_ONE (, double)\n+TEST_ONE (l, long double)\n+\n+int\n+main ()\n+{\n+  int res[6];\n+  testf (f, res);\n+  test (d, res);\n+  testl (ld, res);\n+  return 0;\n+}"}]}