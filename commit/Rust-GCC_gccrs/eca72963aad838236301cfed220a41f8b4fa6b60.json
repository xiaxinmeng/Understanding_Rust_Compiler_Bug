{"sha": "eca72963aad838236301cfed220a41f8b4fa6b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhNzI5NjNhYWQ4MzgyMzYzMDFjZmVkMjIwYTQxZjhiNGZhNmI2MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-02-02T13:23:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-02-02T13:23:43Z"}, "message": "re PR inline-asm/39058 (ICE with double in inline-asm)\n\n\tPR inline-asm/39058\n\t* recog.h (asm_operand_ok): Add constraints argument.\n\t* recog.c (asm_operand_ok): Likewise.  If it is set, for digits\n\trecurse on matching constraint.\n\t(check_asm_operands): Pass constraints as 3rd argument to\n\tasm_operand_ok.  Don't look up matching constraint here.\n\t* stmt.c (expand_asm_operands): Pass NULL as 3rd argument\n\tto asm_operand_ok.\n\n\t* gcc.target/i386/pr39058.c: New test.\n\nFrom-SVN: r143867", "tree": {"sha": "a1aa96b3278b1c873c7432d2ad53d27e983ec85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1aa96b3278b1c873c7432d2ad53d27e983ec85a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca72963aad838236301cfed220a41f8b4fa6b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca72963aad838236301cfed220a41f8b4fa6b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca72963aad838236301cfed220a41f8b4fa6b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca72963aad838236301cfed220a41f8b4fa6b60/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43014633b0b9f0e3d2646b6c4ecd75d3830a18b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43014633b0b9f0e3d2646b6c4ecd75d3830a18b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43014633b0b9f0e3d2646b6c4ecd75d3830a18b2"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "a4c777c57a5cfb32b646758e2e9ca7d9fa137e3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eca72963aad838236301cfed220a41f8b4fa6b60", "patch": "@@ -1,3 +1,14 @@\n+2009-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/39058\n+\t* recog.h (asm_operand_ok): Add constraints argument.\n+\t* recog.c (asm_operand_ok): Likewise.  If it is set, for digits\n+\trecurse on matching constraint.\n+\t(check_asm_operands): Pass constraints as 3rd argument to\n+\tasm_operand_ok.  Don't look up matching constraint here.\n+\t* stmt.c (expand_asm_operands): Pass NULL as 3rd argument\n+\tto asm_operand_ok.\n+\n 2009-02-02  Ben Elliston  <bje@au.ibm.com>\n \n \t* doc/tm.texi (Storage Layout): Fix TARGET_ALIGN_ANON_BITFIELD and"}, {"sha": "540617d5bb44f2abd1ca63931058b898c9a3f445", "filename": "gcc/recog.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=eca72963aad838236301cfed220a41f8b4fa6b60", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used by or related to instruction recognition.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -156,10 +156,7 @@ check_asm_operands (rtx x)\n       const char *c = constraints[i];\n       if (c[0] == '%')\n \tc++;\n-      if (ISDIGIT ((unsigned char) c[0]) && c[1] == '\\0')\n-\tc = constraints[c[0] - '0'];\n-\n-      if (! asm_operand_ok (operands[i], c))\n+      if (! asm_operand_ok (operands[i], c, constraints))\n \treturn 0;\n     }\n \n@@ -1547,7 +1544,7 @@ decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n    Return > 0 if ok, = 0 if bad, < 0 if inconclusive.  */\n \n int\n-asm_operand_ok (rtx op, const char *constraint)\n+asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n {\n   int result = 0;\n \n@@ -1575,15 +1572,29 @@ asm_operand_ok (rtx op, const char *constraint)\n \n \tcase '0': case '1': case '2': case '3': case '4':\n \tcase '5': case '6': case '7': case '8': case '9':\n-\t  /* For best results, our caller should have given us the\n-\t     proper matching constraint, but we can't actually fail\n-\t     the check if they didn't.  Indicate that results are\n-\t     inconclusive.  */\n-\t  do\n-\t    constraint++;\n-\t  while (ISDIGIT (*constraint));\n-\t  if (! result)\n-\t    result = -1;\n+\t  /* If caller provided constraints pointer, look up\n+\t     the maching constraint.  Otherwise, our caller should have\n+\t     given us the proper matching constraint, but we can't\n+\t     actually fail the check if they didn't.  Indicate that\n+\t     results are inconclusive.  */\n+\t  if (constraints)\n+\t    {\n+\t      char *end;\n+\t      unsigned long match;\n+\n+\t      match = strtoul (constraint, &end, 10);\n+\t      if (!result)\n+\t\tresult = asm_operand_ok (op, constraints[match], NULL);\n+\t      constraint = (const char *) end;\n+\t    }\n+\t  else\n+\t    {\n+\t      do\n+\t\tconstraint++;\n+\t      while (ISDIGIT (*constraint));\n+\t      if (! result)\n+\t\tresult = -1;\n+\t    }\n \t  continue;\n \n \tcase 'p':"}, {"sha": "f2b1f6e44048c3142d4ebd2fb2b52a39fab9119b", "filename": "gcc/recog.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=eca72963aad838236301cfed220a41f8b4fa6b60", "patch": "@@ -1,6 +1,6 @@\n /* Declarations for interface to insn recognizer and insn-output.c.\n    Copyright (C) 1987, 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -72,7 +72,7 @@ struct operand_alternative\n extern void init_recog (void);\n extern void init_recog_no_volatile (void);\n extern int check_asm_operands (rtx);\n-extern int asm_operand_ok (rtx, const char *);\n+extern int asm_operand_ok (rtx, const char *, const char **);\n extern bool validate_change (rtx, rtx *, rtx, bool);\n extern bool validate_unshare_change (rtx, rtx *, rtx, bool);\n extern bool canonicalize_change_group (rtx insn, rtx x);"}, {"sha": "c5369061e9d105ef425050af8920fb6f1e981454", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=eca72963aad838236301cfed220a41f8b4fa6b60", "patch": "@@ -1,6 +1,6 @@\n /* Expands front end tree to back end RTL for GCC\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -886,7 +886,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n       else if (MEM_P (op))\n \top = validize_mem (op);\n \n-      if (asm_operand_ok (op, constraint) <= 0)\n+      if (asm_operand_ok (op, constraint, NULL) <= 0)\n \t{\n \t  if (allows_reg && TYPE_MODE (type) != BLKmode)\n \t    op = force_reg (TYPE_MODE (type), op);"}, {"sha": "828af3fad7ab4a71b6bfa458d9de644af9588702", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eca72963aad838236301cfed220a41f8b4fa6b60", "patch": "@@ -4,6 +4,9 @@\n \t(check_effective_target_correct_iso_cpp_string_wchar_protos): New.\n \t* g++.dg/ext/builtin10.C: New test.\n \n+\tPR inline-asm/39058\n+\t* gcc.target/i386/pr39058.c: New test.\n+\n 2009-02-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38937"}, {"sha": "2982e8d14c8b6d1f9e6767ef4b9100ba644beac7", "filename": "gcc/testsuite/gcc.target/i386/pr39058.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39058.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca72963aad838236301cfed220a41f8b4fa6b60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39058.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39058.c?ref=eca72963aad838236301cfed220a41f8b4fa6b60", "patch": "@@ -0,0 +1,34 @@\n+/* PR inline-asm/39058 */\n+/* { dg-options \"-O2\" } */\n+\n+double\n+f1 ()\n+{\n+  double x;\n+  asm (\"\" : \"=r,r\" (x) : \"0,0\" (x));\n+  return x;\n+}\n+\n+double\n+f2 ()\n+{\n+  double x;\n+  asm (\"\" : \"=r\" (x) : \"0\" (x));\n+  return x;\n+}\n+\n+double\n+f3 ()\n+{\n+  double x, y;\n+  asm (\"\" : \"=r,r\" (x), \"=r,r\" (y) : \"%0,0\" (x), \"r,r\" (0));\n+  return x;\n+}\n+\n+double\n+f4 ()\n+{\n+  double x, y;\n+  asm (\"\" : \"=r\" (x), \"=r\" (y) : \"0\" (x), \"r\" (0));\n+  return x;\n+}"}]}