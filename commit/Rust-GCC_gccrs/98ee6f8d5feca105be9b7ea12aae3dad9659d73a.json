{"sha": "98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlZTZmOGQ1ZmVjYTEwNWJlOWI3ZWExMmFhZTNkYWQ5NjU5ZDczYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-22T13:53:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-22T13:53:38Z"}, "message": "[multiple changes]\n\n2012-02-22  Vincent Pucci  <pucci@adacore.com>\n\n\t* rtsfind.adb (Get_Unit_Name): Ada_Numerics_Child and\n\tSystem_Dim_Child cases added.\n\t* rtsfind.ads: Ada_Numerics,\n\tAda_Numerics_Generic_Elementary_Functions, System_Dim,\n\tSystem_Dim_Float_IO and System_Dim_Integer_IO added to the list\n\tof RTU_Id.  Ada_Numerics_Child and System_Dim_Child added as\n\tnew RTU_Id subtypes.\n\t* sem_dim.adb (Is_Dim_IO_Package_Entity): Use of\n\tRtsfind to verify the package entity is located either\n\tin System.Dim.Integer_IO or in System.Dim.Float_IO.\n\t(Is_Dim_IO_Package_Instantiation): Minor\n\tchanges.  (Is_Elementary_Function_Call): Removed.\n\t(Is_Elementary_Function_Entity): New routine.\n\t(Is_Procedure_Put_Call): Is_Dim_IO_Package_Entity call added.\n\t* snames.ads-tmpl: Name_Dim and Name_Generic_Elementary_Functions\n\tremoved.\n\n2012-02-22  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_prag.adb: Minor reformatting.\n\n2012-02-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Find_Type_Name): When analyzing a private type\n\tdeclaration that is the completion of a tagged incomplete type, do\n\tnot associate the class-wide type already created with the private\n\ttype to prevent order-of-elaboration issues in the back-end.\n\t* exp_disp.adb (Find_Specific_Type): Find specific type of\n\ta class-wide type, and handle the case of an incomplete type\n\tcoming\teither from a limited_with clause or from an incomplete\n\ttype declaration. Used when expanding a dispatchin call and\n\tgenerating tag checks (minor refactoring).\n\nFrom-SVN: r184473", "tree": {"sha": "9d3cd5354532e22661edf93adecd2d4c5dd8f3c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d3cd5354532e22661edf93adecd2d4c5dd8f3c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/comments", "author": null, "committer": null, "parents": [{"sha": "aaf1cd904eab603d9bbf0ef23dad029626f21d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf1cd904eab603d9bbf0ef23dad029626f21d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf1cd904eab603d9bbf0ef23dad029626f21d65"}], "stats": {"total": 311, "additions": 198, "deletions": 113}, "files": [{"sha": "f8ffbcd21d1a44c834d8babc3be9fc1258770645", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -1,3 +1,38 @@\n+2012-02-22  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* rtsfind.adb (Get_Unit_Name): Ada_Numerics_Child and\n+\tSystem_Dim_Child cases added.\n+\t* rtsfind.ads: Ada_Numerics,\n+\tAda_Numerics_Generic_Elementary_Functions, System_Dim,\n+\tSystem_Dim_Float_IO and System_Dim_Integer_IO added to the list\n+\tof RTU_Id.  Ada_Numerics_Child and System_Dim_Child added as\n+\tnew RTU_Id subtypes.\n+\t* sem_dim.adb (Is_Dim_IO_Package_Entity): Use of\n+\tRtsfind to verify the package entity is located either\n+\tin System.Dim.Integer_IO or in System.Dim.Float_IO.\n+\t(Is_Dim_IO_Package_Instantiation): Minor\n+\tchanges.  (Is_Elementary_Function_Call): Removed.\n+\t(Is_Elementary_Function_Entity): New routine.\n+\t(Is_Procedure_Put_Call): Is_Dim_IO_Package_Entity call added.\n+\t* snames.ads-tmpl: Name_Dim and Name_Generic_Elementary_Functions\n+\tremoved.\n+\n+2012-02-22  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2012-02-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Find_Type_Name): When analyzing a private type\n+\tdeclaration that is the completion of a tagged incomplete type, do\n+\tnot associate the class-wide type already created with the private\n+\ttype to prevent order-of-elaboration issues in the back-end.\n+\t* exp_disp.adb (Find_Specific_Type): Find specific type of\n+\ta class-wide type, and handle the case of an incomplete type\n+\tcoming\teither from a limited_with clause or from an incomplete\n+\ttype declaration. Used when expanding a dispatchin call and\n+\tgenerating tag checks (minor refactoring).\n+\n 2012-02-22  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch5.adb: Add comment."}, {"sha": "314862b49fa66527f5bd7a3c1fea7fcd17c4cb65", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -75,6 +75,11 @@ package body Exp_Disp is\n    --  Ada 2005 (AI-251): Returns the fixed position in the dispatch table\n    --  of the default primitive operations.\n \n+   function Find_Specific_Type (CW : Entity_Id) return Entity_Id;\n+   --  Find specific type of a class-wide type, and handle the case of an\n+   --  incomplete type coming  either from a limited_with clause or from an\n+   --  incomplete type declaration.\n+\n    function Has_DT (Typ : Entity_Id) return Boolean;\n    pragma Inline (Has_DT);\n    --  Returns true if we generate a dispatch table for tagged type Typ\n@@ -178,11 +183,7 @@ package body Exp_Disp is\n          CW_Typ := Class_Wide_Type (Ctrl_Typ);\n       end if;\n \n-      Typ := Root_Type (CW_Typ);\n-\n-      if Ekind (Typ) = E_Incomplete_Type then\n-         Typ := Non_Limited_View (Typ);\n-      end if;\n+      Typ := Find_Specific_Type (CW_Typ);\n \n       if not Is_Limited_Type (Typ) then\n          Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n@@ -746,11 +747,7 @@ package body Exp_Disp is\n          CW_Typ := Class_Wide_Type (Ctrl_Typ);\n       end if;\n \n-      Typ := Root_Type (CW_Typ);\n-\n-      if Ekind (Typ) = E_Incomplete_Type then\n-         Typ := Non_Limited_View (Typ);\n-      end if;\n+      Typ := Find_Specific_Type (CW_Typ);\n \n       if not Is_Limited_Type (Typ) then\n          Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n@@ -1884,6 +1881,25 @@ package body Exp_Disp is\n       end if;\n    end Expand_Interface_Thunk;\n \n+   ------------------------\n+   -- Find_Specific_Type --\n+   ------------------------\n+\n+   function Find_Specific_Type (CW : Entity_Id) return Entity_Id is\n+      Typ : Entity_Id := Root_Type (CW);\n+\n+   begin\n+      if Ekind (Typ) = E_Incomplete_Type then\n+         if From_With_Type (Typ) then\n+            Typ := Non_Limited_View (Typ);\n+         else\n+            Typ := Full_View (Typ);\n+         end if;\n+      end if;\n+\n+      return Typ;\n+   end Find_Specific_Type;\n+\n    --------------------------\n    -- Has_CPP_Constructors --\n    --------------------------"}, {"sha": "3b3e768adaa145cbcac9b48ce866da7adbffcfa1", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -313,6 +313,9 @@ package body Rtsfind is\n          elsif U_Id in Ada_Interrupts_Child then\n             Name_Buffer (15) := '.';\n \n+         elsif U_Id in Ada_Numerics_Child then\n+            Name_Buffer (13) := '.';\n+\n          elsif U_Id in Ada_Real_Time_Child then\n             Name_Buffer (14) := '.';\n \n@@ -338,6 +341,10 @@ package body Rtsfind is\n       elsif U_Id in System_Child then\n          Name_Buffer (7) := '.';\n \n+         if U_Id in System_Dim_Child then\n+            Name_Buffer (11) := '.';\n+         end if;\n+\n          if U_Id in System_Multiprocessors_Child then\n             Name_Buffer (23) := '.';\n          end if;"}, {"sha": "7720d5e25a0f0aa1001dfbeb14b336c6ae633e27", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -125,6 +125,7 @@ package Rtsfind is\n       Ada_Exceptions,\n       Ada_Finalization,\n       Ada_Interrupts,\n+      Ada_Numerics,\n       Ada_Real_Time,\n       Ada_Streams,\n       Ada_Strings,\n@@ -144,6 +145,10 @@ package Rtsfind is\n \n       Ada_Interrupts_Names,\n \n+      --  Children of Ada.Numerics\n+\n+      Ada_Numerics_Generic_Elementary_Functions,\n+\n       --  Children of Ada.Real_Time\n \n       Ada_Real_Time_Delays,\n@@ -223,6 +228,7 @@ package Rtsfind is\n       System_Concat_7,\n       System_Concat_8,\n       System_Concat_9,\n+      System_Dim,\n       System_DSA_Services,\n       System_DSA_Types,\n       System_Exception_Table,\n@@ -372,6 +378,11 @@ package Rtsfind is\n       System_WWd_Enum,\n       System_WWd_Wchar,\n \n+      --  Children of System.Dim\n+\n+      System_Dim_Float_IO,\n+      System_Dim_Integer_IO,\n+\n       --  Children of System.Multiprocessors\n \n       System_Multiprocessors_Dispatching_Domains,\n@@ -413,6 +424,11 @@ package Rtsfind is\n      Ada_Interrupts_Names .. Ada_Interrupts_Names;\n    --  Range of values for children of Ada.Interrupts\n \n+   subtype Ada_Numerics_Child is Ada_Child\n+     range Ada_Numerics_Generic_Elementary_Functions ..\n+           Ada_Numerics_Generic_Elementary_Functions;\n+   --  Range of values for children of Ada.Numerics\n+\n    subtype Ada_Real_Time_Child is Ada_Child\n      range Ada_Real_Time_Delays .. Ada_Real_Time_Timing_Events;\n    --  Range of values for children of Ada.Real_Time\n@@ -445,6 +461,10 @@ package Rtsfind is\n      range System_Address_Image .. System_Tasking_Stages;\n    --  Range of values for children or grandchildren of System\n \n+   subtype System_Dim_Child is RTU_Id\n+     range System_Dim_Float_IO .. System_Dim_Integer_IO;\n+   --  Range of values for children of System.Dim\n+\n    subtype System_Multiprocessors_Child is RTU_Id\n      range System_Multiprocessors_Dispatching_Domains ..\n        System_Multiprocessors_Dispatching_Domains;"}, {"sha": "4618a712b4fc39fce5a11c263bbf50a6f9a7349f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -14968,7 +14968,15 @@ package body Sem_Ch3 is\n             then\n                Set_Ekind (Id, Ekind (Prev));         --  will be reset later\n                Set_Class_Wide_Type (Id, Class_Wide_Type (Prev));\n-               Set_Etype (Class_Wide_Type (Id), Id);\n+\n+               --  If the incomplete type is completed by a private declaration\n+               --  the class-wide type remains associated with the incomplete\n+               --  type, to prevent order-of-elaboration issues in gigi, else\n+               --  we associate the class-wide type with the known full view.\n+\n+               if Nkind (N) /= N_Private_Type_Declaration then\n+                  Set_Etype (Class_Wide_Type (Id), Id);\n+               end if;\n             end if;\n \n          --  Case of full declaration of private type"}, {"sha": "d95e70815275376205a972e081c08bdab02deffd", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 94, "deletions": 94, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -36,7 +36,6 @@ with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n-with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n@@ -1359,94 +1358,105 @@ package body Sem_Dim is\n    -- Analyze_Dimension_Function_Call --\n    -------------------------------------\n \n+   --  Propagate the dimensions from the returned type to the call node. Note\n+   --  that there is a special treatment for elementary function calls. Indeed\n+   --  for Sqrt call, the resulting dimensions equal to half the dimensions of\n+   --  the actual, and for other elementary calls, this routine check that\n+   --  every actuals are dimensionless.\n+\n    procedure Analyze_Dimension_Function_Call (N : Node_Id) is\n-      Name_Call      : constant Node_Id := Name (N);\n       Actuals        : constant List_Id := Parameter_Associations (N);\n+      Name_Call      : constant Node_Id := Name (N);\n       Actual         : Node_Id;\n       Dims_Of_Actual : Dimension_Type;\n       Dims_Of_Call   : Dimension_Type;\n+      Ent            : Entity_Id;\n \n-      function Is_Elementary_Function_Call return Boolean;\n-      --  Return True if the call is a call of an elementary function (see\n+      function Is_Elementary_Function_Entity (E : Entity_Id) return Boolean;\n+      --  Given E the original subprogram entity, return True if the call is a\n+      --  an elementary function call (see\n       --  Ada.Numerics.Generic_Elementary_Functions).\n \n-      ---------------------------------\n-      -- Is_Elementary_Function_Call --\n-      ---------------------------------\n+      -----------------------------------\n+      -- Is_Elementary_Function_Entity --\n+      -----------------------------------\n \n-      function Is_Elementary_Function_Call return Boolean is\n-         Ent : Entity_Id;\n+      function Is_Elementary_Function_Entity (E : Entity_Id) return Boolean is\n+         Loc : constant Source_Ptr := Sloc (E);\n \n       begin\n-         if Is_Entity_Name (Name_Call) then\n-            Ent := Entity (Name_Call);\n+         --  Check the function entity is located in\n+         --  Ada.Numerics.Generic_Elementary_Functions.\n \n-            --  Check the procedure is defined in an instantiation of a generic\n-            --  package.\n+         return\n+           Loc > No_Location\n+             and then\n+               Is_RTU\n+                (Cunit_Entity (Get_Source_Unit (Loc)),\n+                 Ada_Numerics_Generic_Elementary_Functions);\n+      end Is_Elementary_Function_Entity;\n \n-            if Is_Generic_Instance (Scope (Ent)) then\n-               Ent := Cunit_Entity (Get_Source_Unit (Ent));\n+   --  Start of processing for Analyze_Dimension_Function_Call\n \n-               --  Check the name of the generic package is\n-               --  Generic_Elementary_Functions\n+   begin\n+      --  Look for elementary function call\n \n-               return\n-                 Is_Library_Level_Entity (Ent)\n-                   and then Chars (Ent) = Name_Generic_Elementary_Functions;\n-            end if;\n-         end if;\n+      if Is_Entity_Name (Name_Call) then\n+         Ent := Entity (Name_Call);\n \n-         return False;\n-      end Is_Elementary_Function_Call;\n+         --  Get the original subprogram entity following the renaming chain\n \n-   --  Start of processing for Analyze_Dimension_Function_Call\n+         if Present (Alias (Ent)) then\n+            Ent := Alias (Ent);\n+         end if;\n \n-   begin\n-      --  Elementary function case\n+         --  Elementary function case\n \n-      if Is_Elementary_Function_Call then\n+         if Is_Elementary_Function_Entity (Ent) then\n \n          --  Sqrt function call case\n \n-         if Chars (Name_Call) = Name_Sqrt then\n-            Dims_Of_Call := Dimensions_Of (First (Actuals));\n+            if Chars (Ent) = Name_Sqrt then\n+               Dims_Of_Call := Dimensions_Of (First (Actuals));\n \n-            if Exists (Dims_Of_Call) then\n-               for Position in Dims_Of_Call'Range loop\n-                  Dims_Of_Call (Position) :=\n-                    Dims_Of_Call (Position) * Rational'(Numerator =>   1,\n+               if Exists (Dims_Of_Call) then\n+                  for Position in Dims_Of_Call'Range loop\n+                     Dims_Of_Call (Position) :=\n+                       Dims_Of_Call (Position) * Rational'(Numerator =>   1,\n                                                         Denominator => 2);\n-               end loop;\n+                  end loop;\n \n-               Set_Dimensions (N, Dims_Of_Call);\n-            end if;\n+                  Set_Dimensions (N, Dims_Of_Call);\n+               end if;\n \n-         --  All other functions in Ada.Numerics.Generic_Elementary_Functions\n-         --  case. Note that all parameters here should be dimensionless.\n+            --  All other elementary functions case. Note that every actual\n+            --  here should be dimensionless.\n \n-         else\n-            Actual := First (Actuals);\n-            while Present (Actual) loop\n-               Dims_Of_Actual := Dimensions_Of (Actual);\n-\n-               if Exists (Dims_Of_Actual) then\n-                  Error_Msg_NE (\"parameter should be dimensionless for \" &\n-                                \"elementary function&\",\n-                                Actual,\n-                                Name_Call);\n-                  Error_Msg_N (\"\\parameter \" & Dimensions_Msg_Of (Actual),\n-                               Actual);\n-               end if;\n+            else\n+               Actual := First (Actuals);\n+               while Present (Actual) loop\n+                  Dims_Of_Actual := Dimensions_Of (Actual);\n+\n+                  if Exists (Dims_Of_Actual) then\n+                     Error_Msg_NE (\"parameter should be dimensionless for \" &\n+                                   \"elementary function&\",\n+                                   Actual,\n+                                   Name_Call);\n+                     Error_Msg_N (\"\\parameter \" & Dimensions_Msg_Of (Actual),\n+                                  Actual);\n+                  end if;\n \n-               Next (Actual);\n-            end loop;\n+                  Next (Actual);\n+               end loop;\n+            end if;\n+\n+            return;\n          end if;\n+      end if;\n \n-      --  Other case\n+      --  Other cases\n \n-      else\n-         Analyze_Dimension_Has_Etype (N);\n-      end if;\n+      Analyze_Dimension_Has_Etype (N);\n    end Analyze_Dimension_Function_Call;\n \n    ---------------------------------\n@@ -2226,28 +2236,31 @@ package body Sem_Dim is\n \n       function Is_Procedure_Put_Call return Boolean is\n          Ent : Entity_Id;\n+         Loc : Source_Ptr;\n \n       begin\n-         --  There are three different Put routine in each generic package\n-         --  Check that the current procedure call is one of them\n+         --  There are three different Put routines in each generic dim IO\n+         --  package. Verify the current procedure call is one of them.\n \n          if Is_Entity_Name (Name_Call) then\n             Ent := Entity (Name_Call);\n \n-            --  Check that the name of the procedure is Put\n-            --  Check the procedure is defined in an instantiation of a\n-            --  generic package.\n+            --  Get the original subprogram entity following the renaming chain\n \n-            if Chars (Name_Call) = Name_Put\n-              and then Is_Generic_Instance (Scope (Ent))\n-            then\n-               Ent := Cunit_Entity (Get_Source_Unit (Ent));\n+            if Present (Alias (Ent)) then\n+               Ent := Alias (Ent);\n+            end if;\n \n-               --  Verify that the generic package is either\n-               --  System.Dim.Float_IO or System.Dim.Integer_IO.\n+            Loc := Sloc (Ent);\n \n-               return Is_Dim_IO_Package_Entity (Ent);\n-            end if;\n+            --  Check the name of the entity subprogram is Put and verify this\n+            --  entity is located in either System.Dim.Float_IO or\n+            --  System.Dim.Integer_IO.\n+\n+            return Chars (Ent) = Name_Put\n+              and then Loc > No_Location\n+              and then Is_Dim_IO_Package_Entity\n+                         (Cunit_Entity (Get_Source_Unit (Loc)));\n          end if;\n \n          return False;\n@@ -2499,22 +2512,14 @@ package body Sem_Dim is\n    -- Is_Dim_IO_Package_Entity --\n    ------------------------------\n \n-   --  Why all this comparison of names, why not use Is_RTE and Is_RTU ???\n-\n    function Is_Dim_IO_Package_Entity (E : Entity_Id) return Boolean is\n    begin\n-      --  Check the package entity is standard and its scope is either\n-      --  System.Dim.Float_IO or System.Dim.Integer_IO.\n-\n-      if Is_Library_Level_Entity (E)\n-        and then (Chars (E) = Name_Float_IO\n-                    or else Chars (E) = Name_Integer_IO)\n-      then\n-         return Chars (Scope (E)) = Name_Dim\n-           and Chars (Scope (Scope (E))) = Name_System;\n-      end if;\n+      --  Check the package entity corresponds to System.Dim.Float_IO or\n+      --  System.Dim.Integer_IO.\n \n-      return False;\n+      return\n+        Is_RTU (E, System_Dim_Float_IO)\n+          or Is_RTU (E, System_Dim_Integer_IO);\n    end Is_Dim_IO_Package_Entity;\n \n    -------------------------------------\n@@ -2523,19 +2528,14 @@ package body Sem_Dim is\n \n    function Is_Dim_IO_Package_Instantiation (N : Node_Id) return Boolean is\n       Gen_Id : constant Node_Id := Name (N);\n-      Ent    : Entity_Id;\n \n    begin\n-      if Is_Entity_Name (Gen_Id) then\n-         Ent := Entity (Gen_Id);\n-\n-         --  Verify that the instantiated package is either System.Dim.Float_IO\n-         --  or System.Dim.Integer_IO.\n-\n-         return Is_Dim_IO_Package_Entity (Ent);\n-      end if;\n+      --  Check that the instantiated package is either System.Dim.Float_IO\n+      --  or System.Dim.Integer_IO.\n \n-      return False;\n+      return\n+        Is_Entity_Name (Gen_Id)\n+          and then Is_Dim_IO_Package_Entity (Entity (Gen_Id));\n    end Is_Dim_IO_Package_Instantiation;\n \n    ----------------"}, {"sha": "9761f2fbea2a29c3411cd7adafa30a48c631b94c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -14970,14 +14970,15 @@ package body Sem_Prag is\n       --  Follow subprogram renaming chain\n \n       Result := Def_Id;\n-      while Is_Subprogram (Result)\n+\n+      if Is_Subprogram (Result)\n         and then\n           Nkind (Parent (Declaration_Node (Result))) =\n                                          N_Subprogram_Renaming_Declaration\n         and then Present (Alias (Result))\n-      loop\n+      then\n          Result := Alias (Result);\n-      end loop;\n+      end if;\n \n       return Result;\n    end Get_Base_Subprogram;"}, {"sha": "cce46080d0a75efd2abe9b82ceca77f3a044b590", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee6f8d5feca105be9b7ea12aae3dad9659d73a/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=98ee6f8d5feca105be9b7ea12aae3dad9659d73a", "patch": "@@ -225,8 +225,6 @@ package Snames is\n    --  Names used by the analyzer and expander for aspect Dimension and\n    --  Dimension_System to deal with Sqrt and IO routines.\n \n-   Name_Dim                          : constant Name_Id := N + $; -- Ada 12\n-   Name_Generic_Elementary_Functions : constant Name_Id := N + $; -- Ada 12\n    Name_Item                         : constant Name_Id := N + $; -- Ada 12\n    Name_Sqrt                         : constant Name_Id := N + $; -- Ada 12\n    Name_Symbols                      : constant Name_Id := N + $; -- Ada 12"}]}