{"sha": "37a6b4ae78070b136d86bb0a7f207b8c2af69383", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhNmI0YWU3ODA3MGIxMzZkODZiYjBhN2YyMDdiOGMyYWY2OTM4Mw==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-08-12T11:44:10Z"}, "committer": {"name": "Marc", "email": "dkm@kataplop.net", "date": "2021-08-18T20:59:37Z"}, "message": "resolve: add support for Module\n\nImplement required visitor methods for resolving names in modules.\n\nref #432\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "1541dd2e9fce058c9ea9d97eff145469b1f072da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1541dd2e9fce058c9ea9d97eff145469b1f072da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37a6b4ae78070b136d86bb0a7f207b8c2af69383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a6b4ae78070b136d86bb0a7f207b8c2af69383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a6b4ae78070b136d86bb0a7f207b8c2af69383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a6b4ae78070b136d86bb0a7f207b8c2af69383/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ed248287c256e306f561a2de166114666743e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ed248287c256e306f561a2de166114666743e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ed248287c256e306f561a2de166114666743e8"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "bc05e93069c5f57f5b2aa387fb7db9ef35c996a8", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=37a6b4ae78070b136d86bb0a7f207b8c2af69383", "patch": "@@ -19,8 +19,10 @@\n #ifndef RUST_AST_RESOLVE_ITEM_H\n #define RUST_AST_RESOLVE_ITEM_H\n \n+#include \"rust-ast-full-decls.h\"\n #include \"rust-ast-resolve-base.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-ast-resolve-toplevel.h\"\n #include \"rust-ast-resolve-type.h\"\n #include \"rust-ast-resolve-pattern.h\"\n #include \"rust-ast-resolve-stmt.h\"\n@@ -214,6 +216,27 @@ class ResolveItem : public ResolverBase\n     resolver->get_type_scope ().pop ();\n   }\n \n+  void visit (AST::Module &module) override\n+  {\n+    NodeId scope_node_id = module.get_node_id ();\n+    resolver->get_name_scope ().push (scope_node_id);\n+    resolver->get_type_scope ().push (scope_node_id);\n+    resolver->get_label_scope ().push (scope_node_id);\n+    resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+    resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+    resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n+\n+    for (auto &item : module.get_items ())\n+      ResolveTopLevel::go (item.get ());\n+\n+    for (auto &item : module.get_items ())\n+      ResolveItem::go (item.get ());\n+\n+    resolver->get_name_scope ().pop ();\n+    resolver->get_type_scope ().pop ();\n+    resolver->get_label_scope ().pop ();\n+  }\n+\n   void visit (AST::TupleStruct &struct_decl) override\n   {\n     NodeId scope_node_id = struct_decl.get_node_id ();"}, {"sha": "2c1de6658389a7d90169226b0bd0dccce089d7b8", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=37a6b4ae78070b136d86bb0a7f207b8c2af69383", "patch": "@@ -23,6 +23,7 @@\n #include \"rust-ast-resolve-type.h\"\n #include \"rust-ast-resolve-implitem.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-name-resolver.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -39,6 +40,26 @@ class ResolveTopLevel : public ResolverBase\n     item->accept_vis (resolver);\n   };\n \n+  void visit (AST::Module &module) override\n+  {\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (module.get_node_id (), module.get_name ()));\n+    resolver->get_name_scope ().insert (\n+      path, module.get_node_id (), module.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (module.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    resolver->insert_new_definition (module.get_node_id (),\n+\t\t\t\t     Definition{module.get_node_id (),\n+\t\t\t\t\t\tmodule.get_node_id ()});\n+\n+    for (auto &item : module.get_items ())\n+      ResolveTopLevel::go (item.get (), path);\n+  }\n+\n   void visit (AST::TypeAlias &alias) override\n   {\n     auto path"}, {"sha": "b8affe68c41e56ef26791a3819848329e8802721", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=37a6b4ae78070b136d86bb0a7f207b8c2af69383", "patch": "@@ -206,6 +206,9 @@ class ResolveRelativeTypePath\n \n     auto resolver = Resolver::get ();\n     NodeId resolved_node = UNKNOWN_NODEID;\n+\n+    // We may need to change how names are resolved, like described in :\n+    // https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler/rustc_resolve/src/lib.rs#L1722\n     if (!resolver->get_type_scope ().lookup (canonical_path, &resolved_node))\n       {\n \trust_error_at (path.get_locus_slow (), \"failed to resolve TypePath: %s\","}, {"sha": "5b24816a651a620e64446da42d32a56cde19310c", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=37a6b4ae78070b136d86bb0a7f207b8c2af69383", "patch": "@@ -552,6 +552,10 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       auto s = ResolvePathSegmentToCanonicalPath::resolve (seg);\n       path = path.append (s);\n \n+      // reset state\n+      segment_is_type = false;\n+      resolved_node = UNKNOWN_NODEID;\n+\n       if (resolver->get_name_scope ().lookup (path, &resolved_node))\n \t{\n \t  resolver->insert_resolved_name (seg.get_node_id (), resolved_node);\n@@ -562,6 +566,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       // check the type scope\n       else if (resolver->get_type_scope ().lookup (path, &resolved_node))\n \t{\n+\t  segment_is_type = true;\n \t  resolver->insert_resolved_type (seg.get_node_id (), resolved_node);\n \t  resolver->insert_new_definition (seg.get_node_id (),\n \t\t\t\t\t   Definition{expr->get_node_id (),\n@@ -611,6 +616,19 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t  return;\n \t}\n     }\n+\n+  // its fully resolved lets mark it as such\n+  if (resolved_node != UNKNOWN_NODEID)\n+    {\n+      if (segment_is_type)\n+\tresolver->insert_resolved_type (expr->get_node_id (), resolved_node);\n+      else\n+\tresolver->insert_resolved_name (expr->get_node_id (), resolved_node);\n+\n+      resolver->insert_new_definition (expr->get_node_id (),\n+\t\t\t\t       Definition{expr->get_node_id (),\n+\t\t\t\t\t\t  parent});\n+    }\n }\n \n // rust-ast-resolve-type.h"}, {"sha": "69da4a69fd4bf363c61adf00b97dceda642ffc76", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=37a6b4ae78070b136d86bb0a7f207b8c2af69383", "patch": "@@ -30,7 +30,7 @@ namespace Resolver {\n class Rib\n {\n public:\n-  // Rusts uses local_def_ids assigned by def_collector on the AST\n+  // Rust uses local_def_ids assigned by def_collector on the AST\n   // lets use NodeId instead\n   Rib (CrateNum crateNum, NodeId node_id)\n     : crate_num (crateNum), node_id (node_id)"}, {"sha": "218095c9ff3a19ab897c2c3781c1b1b655a86b23", "filename": "gcc/testsuite/rust/compile/torture/mod-nameresolve.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a6b4ae78070b136d86bb0a7f207b8c2af69383/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs?ref=37a6b4ae78070b136d86bb0a7f207b8c2af69383", "patch": "@@ -0,0 +1,5 @@\n+mod foo { // { dg-warning \"unused name\" }\n+    struct A; // { dg-warning \"unused name\" }\n+}\n+\n+fn main() {}"}]}