{"sha": "346afd846bbed003f8b35d927a319d7f29f87138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2YWZkODQ2YmJlZDAwM2Y4YjM1ZDkyN2EzMTlkN2YyOWY4NzEzOA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-01-03T20:33:20Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-01-03T20:33:20Z"}, "message": "hashtable_policy.h (_Ebo_helper<>): Rename to the more specific _Hashtable_ebo_helper.\n\n2012-01-03  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n\n\t* include/bits/hashtable_policy.h (_Ebo_helper<>): Rename to the more\n\tspecific _Hashtable_ebo_helper. Hide this implementation detail thanks\n\tto private inheritance.\n\nFrom-SVN: r182857", "tree": {"sha": "e85bc8c2cf1a99c638b138d80c792fccd9d1dbef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e85bc8c2cf1a99c638b138d80c792fccd9d1dbef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/346afd846bbed003f8b35d927a319d7f29f87138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346afd846bbed003f8b35d927a319d7f29f87138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346afd846bbed003f8b35d927a319d7f29f87138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346afd846bbed003f8b35d927a319d7f29f87138/comments", "author": null, "committer": null, "parents": [{"sha": "2b59b5284fe61754d1b91d9a43a8ecba27644c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59b5284fe61754d1b91d9a43a8ecba27644c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b59b5284fe61754d1b91d9a43a8ecba27644c42"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "1e8f64bb72bedebc5042a24fcba6a09dd0cffe4b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346afd846bbed003f8b35d927a319d7f29f87138/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346afd846bbed003f8b35d927a319d7f29f87138/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=346afd846bbed003f8b35d927a319d7f29f87138", "patch": "@@ -1,3 +1,9 @@\n+2012-01-03  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h (_Ebo_helper<>): Rename to the more\n+\tspecific _Hashtable_ebo_helper. Hide this implementation detail thanks\n+\tto private inheritance.\n+\n 2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51738"}, {"sha": "66386e81ef465457c0395a3c9bcc0bb8b3d2650a", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346afd846bbed003f8b35d927a319d7f29f87138/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346afd846bbed003f8b35d927a319d7f29f87138/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=346afd846bbed003f8b35d927a319d7f29f87138", "patch": "@@ -1,6 +1,6 @@\n // Internal policy header for unordered_set and unordered_map -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -517,43 +517,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // and when it worth it, type is empty.\n   template<int _Nm, typename _Tp,\n \t   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>\n-    struct _Ebo_helper;\n+    struct _Hashtable_ebo_helper;\n \n   // Specialization using EBO.\n   template<int _Nm, typename _Tp>\n-    struct _Ebo_helper<_Nm, _Tp, true> : _Tp\n+    struct _Hashtable_ebo_helper<_Nm, _Tp, true> : private _Tp\n     {\n-      _Ebo_helper() = default;\n-      _Ebo_helper(const _Tp& __tp) : _Tp(__tp)\n+      _Hashtable_ebo_helper() = default;\n+      _Hashtable_ebo_helper(const _Tp& __tp) : _Tp(__tp)\n       { }\n \n       static const _Tp&\n-      _S_cget(const _Ebo_helper& __eboh)\n+      _S_cget(const _Hashtable_ebo_helper& __eboh)\n       { return static_cast<const _Tp&>(__eboh); }\n \n       static _Tp&\n-      _S_get(_Ebo_helper& __eboh)\n+      _S_get(_Hashtable_ebo_helper& __eboh)\n       { return static_cast<_Tp&>(__eboh); }\n     };\n \n   // Specialization not using EBO.\n   template<int _Nm, typename _Tp>\n-    struct _Ebo_helper<_Nm, _Tp, false>\n+    struct _Hashtable_ebo_helper<_Nm, _Tp, false>\n     {\n-      _Ebo_helper() = default;\n-      _Ebo_helper(const _Tp& __tp) : __m_tp(__tp)\n+      _Hashtable_ebo_helper() = default;\n+      _Hashtable_ebo_helper(const _Tp& __tp) : _M_tp(__tp)\n       { }\n \n       static const _Tp&\n-      _S_cget(const _Ebo_helper& __eboh)\n-      { return __eboh.__m_tp; }\n+      _S_cget(const _Hashtable_ebo_helper& __eboh)\n+      { return __eboh._M_tp; }\n \n       static _Tp&\n-      _S_get(_Ebo_helper& __eboh)\n-      { return __eboh.__m_tp; }\n+      _S_get(_Hashtable_ebo_helper& __eboh)\n+      { return __eboh._M_tp; }\n \n     private:\n-      _Tp __m_tp;\n+      _Tp _M_tp;\n     };\n \n   // Class template _Hash_code_base.  Encapsulates two policy issues that\n@@ -583,11 +583,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Value, typename _ExtractKey, \n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>\n-    : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _Hash>\n+    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n+      private _Hashtable_ebo_helper<1, _Hash>\n     {\n     private:\n-      typedef _Ebo_helper<0, _ExtractKey> _EboExtractKey;\n-      typedef _Ebo_helper<1, _Hash> _EboHash;\n+      typedef _Hashtable_ebo_helper<0, _ExtractKey> _EboExtractKey;\n+      typedef _Hashtable_ebo_helper<1, _Hash> _EboHash;\n+\n     protected:\n       // We need the default constructor for the local iterators.\n       _Hash_code_base() = default;\n@@ -655,12 +657,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, false>\n-    : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _H1>, _Ebo_helper<2, _H2>\n+    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n+      private _Hashtable_ebo_helper<1, _H1>,\n+      private _Hashtable_ebo_helper<2, _H2>\n     {\n     private:\n-      typedef _Ebo_helper<0, _ExtractKey> _EboExtractKey;\n-      typedef _Ebo_helper<1, _H1> _EboH1;\n-      typedef _Ebo_helper<2, _H2> _EboH2;\n+      typedef _Hashtable_ebo_helper<0, _ExtractKey> _EboExtractKey;\n+      typedef _Hashtable_ebo_helper<1, _H1> _EboH1;\n+      typedef _Hashtable_ebo_helper<2, _H2> _EboH2;\n \n     public:\n       typedef _H1 hasher;\n@@ -732,12 +736,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, true>\n-    : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _H1>, _Ebo_helper<2, _H2>\n+    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n+      private _Hashtable_ebo_helper<1, _H1>,\n+      private _Hashtable_ebo_helper<2, _H2>\n     {\n     private:\n-      typedef _Ebo_helper<0, _ExtractKey> _EboExtractKey;\n-      typedef _Ebo_helper<1, _H1> _EboH1;\n-      typedef _Ebo_helper<2, _H2> _EboH2;\n+      typedef _Hashtable_ebo_helper<0, _ExtractKey> _EboExtractKey;\n+      typedef _Hashtable_ebo_helper<1, _H1> _EboH1;\n+      typedef _Hashtable_ebo_helper<2, _H2> _EboH2;\n \n     public:\n       typedef _H1 hasher;\n@@ -835,12 +841,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash,\n \t   bool __cache_hash_code>\n   struct _Hashtable_base\n-  : _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,\n-\t\t    __cache_hash_code>,\n-    _Ebo_helper<0, _Equal>\n+  : public  _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,\n+\t\t\t    __cache_hash_code>,\n+    private _Hashtable_ebo_helper<0, _Equal>\n   {\n   private:\n-    typedef _Ebo_helper<0, _Equal> _EboEqual;\n+    typedef _Hashtable_ebo_helper<0, _Equal> _EboEqual;\n \n   protected:\n     typedef _Hash_code_base<_Key, _Value, _ExtractKey,\n@@ -859,7 +865,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Equal_helper<_Key, _Value, _ExtractKey,\n \t\t\t   _Equal, _Hash_code_type,\n \t\t\t   __cache_hash_code> _EqualHelper;\n-      return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(), __k, __c, __n);\n+      return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(),\n+\t\t\t\t     __k, __c, __n);\n     }\n \n     void\n@@ -887,7 +894,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, true>\n-      : _H2\n+      : private _H2\n     {\n       _Local_iterator_base() = default;\n       _Local_iterator_base(_Hash_node<_Value, true>* __p,\n@@ -918,8 +925,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, false>\n-      : _Hash_code_base<_Key, _Value, _ExtractKey,\n-\t\t\t_H1, _H2, _Hash, false>\n+      : private _Hash_code_base<_Key, _Value, _ExtractKey,\n+\t\t\t\t_H1, _H2, _Hash, false>\n     {\n       _Local_iterator_base() = default;\n       _Local_iterator_base(_Hash_node<_Value, false>* __p,"}]}