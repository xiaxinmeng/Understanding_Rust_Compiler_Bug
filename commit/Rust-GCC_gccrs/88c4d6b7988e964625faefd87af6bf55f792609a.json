{"sha": "88c4d6b7988e964625faefd87af6bf55f792609a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjNGQ2Yjc5ODhlOTY0NjI1ZmFlZmQ4N2FmNmJmNTVmNzkyNjA5YQ==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-06-08T22:43:18Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-06-08T22:43:18Z"}, "message": "Simplify and clean up library literals.\n\n2013-06-07  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tSimplify and clean up library literals.\n\t* include/std/chrono: Simplify namespace and versioning management.\n\t* include/bits/basic_string.h: Ditto.\n\t* testsuite/20_util/duration/literals/types.cc: Remove bogus comment.\n\t* testsuite/20_util/duration/literals/values.cc: Ditto.\n\t* testsuite/21_strings/basic_string/literals/types.cc: Ditto.\n\t* testsuite/21_strings/basic_string/literals/values.cc: Ditto.\n\nFrom-SVN: r199861", "tree": {"sha": "bdfcba3df8d9605fc5aa2159b0f9d4871610b778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdfcba3df8d9605fc5aa2159b0f9d4871610b778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88c4d6b7988e964625faefd87af6bf55f792609a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c4d6b7988e964625faefd87af6bf55f792609a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c4d6b7988e964625faefd87af6bf55f792609a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c4d6b7988e964625faefd87af6bf55f792609a/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83ac9249c8149990f17eea00c092e2ffdbb103f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ac9249c8149990f17eea00c092e2ffdbb103f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ac9249c8149990f17eea00c092e2ffdbb103f9"}], "stats": {"total": 298, "additions": 137, "deletions": 161}, "files": [{"sha": "8ca5e1ac814a792ba65d47e9cd49e800b93ffa35", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88c4d6b7988e964625faefd87af6bf55f792609a", "patch": "@@ -1,3 +1,13 @@\n+2013-06-08  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tSimplify and clean up library literals.\n+\t* include/std/chrono: Simplify namespace and versioning management.\n+\t* include/bits/basic_string.h: Ditto.\n+\t* testsuite/20_util/duration/literals/types.cc: Remove bogus comment.\n+\t* testsuite/20_util/duration/literals/values.cc: Ditto.\n+\t* testsuite/21_strings/basic_string/literals/types.cc: Ditto.\n+\t* testsuite/21_strings/basic_string/literals/values.cc: Ditto.\n+\n 2013-06-08  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N3654 - Quoted Strings Library Proposal"}, {"sha": "aec48d7430ae5992400853ebd674ce2d61f55789", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=88c4d6b7988e964625faefd87af6bf55f792609a", "patch": "@@ -3103,46 +3103,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n #endif\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n #if __cplusplus > 201103L\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  inline namespace literals {\n+  inline namespace string_literals {\n \n-inline namespace literals {\n-inline namespace string_literals {\n-\n-  inline basic_string<char>\n-  operator\"\" s(const char* __str, size_t __len)\n-  { return basic_string<char>{__str, __len}; }\n+    inline basic_string<char>\n+    operator\"\" s(const char* __str, size_t __len)\n+    { return basic_string<char>{__str, __len}; }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  inline basic_string<wchar_t>\n-  operator\"\" s(const wchar_t* __str, size_t __len)\n-  { return basic_string<wchar_t>{__str, __len}; }\n+    inline basic_string<wchar_t>\n+    operator\"\" s(const wchar_t* __str, size_t __len)\n+    { return basic_string<wchar_t>{__str, __len}; }\n #endif\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-  inline basic_string<char16_t>\n-  operator\"\" s(const char16_t* __str, size_t __len)\n-  { return basic_string<char16_t>{__str, __len}; }\n+    inline basic_string<char16_t>\n+    operator\"\" s(const char16_t* __str, size_t __len)\n+    { return basic_string<char16_t>{__str, __len}; }\n \n-  inline basic_string<char32_t>\n-  operator\"\" s(const char32_t* __str, size_t __len)\n-  { return basic_string<char32_t>{__str, __len}; }\n+    inline basic_string<char32_t>\n+    operator\"\" s(const char32_t* __str, size_t __len)\n+    { return basic_string<char32_t>{__str, __len}; }\n #endif\n \n-} // inline namespace string_literals\n-} // inline namespace literals\n+  } // inline namespace string_literals\n+  } // inline namespace literals\n+\n+#endif // __cplusplus > 201103L\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // __cplusplus > 201103L\n-\n #endif // C++11\n \n #endif /* _BASIC_STRING_H */"}, {"sha": "b32fb4460deec272140b0d64175dda8ae7612d74", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 109, "deletions": 120, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=88c4d6b7988e964625faefd87af6bf55f792609a", "patch": "@@ -713,7 +713,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n      *\n      *  Time returned represents wall time from the system-wide clock.\n     */\n-     struct system_clock\n+    struct system_clock\n     {\n       typedef chrono::nanoseconds     \t\t\t\tduration;\n       typedef duration::rep    \t\t\t\t\trep;\n@@ -775,148 +775,137 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     */\n     using high_resolution_clock = system_clock;\n \n-  } // end inline namespace _V2\n+    } // end inline namespace _V2\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace chrono\n \n-  // @} group chrono\n-} // namespace\n+#if __cplusplus > 201103L\n \n-#endif //_GLIBCXX_USE_C99_STDINT_TR1\n+  inline namespace literals {\n+  inline namespace chrono_literals {\n \n-#endif // C++11\n+    namespace __detail {\n \n-#if __cplusplus > 201103L\n+      using namespace __parse_int;\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+      template<unsigned long long _Val, typename _Dur>\n+\tstruct _Select_type\n+\t: conditional<\n+\t    _Val <= static_cast<unsigned long long>\n+\t\t      (numeric_limits<typename _Dur::rep>::max()),\n+\t    _Dur, void>\n+\t{\n+\t  static constexpr typename _Select_type::type\n+\t    value{static_cast<typename _Select_type::type>(_Val)};\n+\t};\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+      template<unsigned long long _Val, typename _Dur>\n+\tconstexpr typename _Select_type<_Val, _Dur>::type\n+\t_Select_type<_Val, _Dur>::value;\n \n-inline namespace literals {\n-inline namespace chrono_literals {\n+    } // __detail\n \n-  namespace __detail {\n+    constexpr chrono::duration<long double, ratio<3600,1>>\n+    operator\"\" h(long double __hours)\n+    { return chrono::duration<long double, ratio<3600,1>>{__hours}; }\n \n-    using namespace __parse_int;\n+    template <char... _Digits>\n+      constexpr typename\n+      __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t     chrono::hours>::type\n+      operator\"\" h()\n+      {\n+\treturn __detail::_Select_type<\n+\t\t\t  __select_int::_Select_int<_Digits...>::value,\n+\t\t\t  chrono::hours>::value;\n+      }\n+\n+    constexpr chrono::duration<long double, ratio<60,1>>\n+    operator\"\" min(long double __mins)\n+    { return chrono::duration<long double, ratio<60,1>>{__mins}; }\n \n-    template<unsigned long long _Val, typename _Dur>\n-      struct _Select_type\n-      : conditional<\n-\t  _Val <= static_cast<unsigned long long>\n-\t\t    (numeric_limits<typename _Dur::rep>::max()),\n-\t  _Dur, void>\n+    template <char... _Digits>\n+      constexpr typename\n+      __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t     chrono::minutes>::type\n+      operator\"\" min()\n       {\n-\tstatic constexpr typename _Select_type::type\n-\t  value{static_cast<typename _Select_type::type>(_Val)};\n-      };\n+\treturn __detail::_Select_type<\n+\t\t\t  __select_int::_Select_int<_Digits...>::value,\n+\t\t\t  chrono::minutes>::value;\n+      }\n \n-    template<unsigned long long _Val, typename _Dur>\n-      constexpr typename _Select_type<_Val, _Dur>::type\n-      _Select_type<_Val, _Dur>::value;\n+    constexpr chrono::duration<long double>\n+    operator\"\" s(long double __secs)\n+    { return chrono::duration<long double>{__secs}; }\n \n-  } // __detail\n+    template <char... _Digits>\n+      constexpr typename\n+      __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t     chrono::seconds>::type\n+      operator\"\" s()\n+      {\n+\treturn __detail::_Select_type<\n+\t\t\t  __select_int::_Select_int<_Digits...>::value,\n+\t\t\t  chrono::seconds>::value;\n+      }\n \n-  constexpr chrono::duration<long double, ratio<3600,1>>\n-  operator\"\" h(long double __hours)\n-  { return chrono::duration<long double, ratio<3600,1>>{__hours}; }\n+    constexpr chrono::duration<long double, milli>\n+    operator\"\" ms(long double __msecs)\n+    { return chrono::duration<long double, milli>{__msecs}; }\n \n-  template <char... _Digits>\n-    constexpr typename\n-    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t   chrono::hours>::type\n-    operator\"\" h()\n-    {\n-      return __detail::_Select_type<\n-\t\t\t__select_int::_Select_int<_Digits...>::value,\n-\t\t\tchrono::hours>::value;\n-    }\n-\n-  constexpr chrono::duration<long double, ratio<60,1>>\n-  operator\"\" min(long double __mins)\n-  { return chrono::duration<long double, ratio<60,1>>{__mins}; }\n-\n-  template <char... _Digits>\n-    constexpr typename\n-    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t   chrono::minutes>::type\n-    operator\"\" min()\n-    {\n-      return __detail::_Select_type<\n-\t\t\t__select_int::_Select_int<_Digits...>::value,\n-\t\t\tchrono::minutes>::value;\n-    }\n-\n-  constexpr chrono::duration<long double>\n-  operator\"\" s(long double __secs)\n-  { return chrono::duration<long double>{__secs}; }\n-\n-  template <char... _Digits>\n-    constexpr typename\n-    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t   chrono::seconds>::type\n-    operator\"\" s()\n-    {\n-      return __detail::_Select_type<\n-\t\t\t__select_int::_Select_int<_Digits...>::value,\n-\t\t\tchrono::seconds>::value;\n-    }\n-\n-  constexpr chrono::duration<long double, milli>\n-  operator\"\" ms(long double __msecs)\n-  { return chrono::duration<long double, milli>{__msecs}; }\n-\n-  template <char... _Digits>\n-    constexpr typename\n-    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t   chrono::milliseconds>::type\n-    operator\"\" ms()\n-    {\n-      return __detail::_Select_type<\n-\t\t\t__select_int::_Select_int<_Digits...>::value,\n-\t\t\tchrono::milliseconds>::value;\n-    }\n-\n-  constexpr chrono::duration<long double, micro>\n-  operator\"\" us(long double __usecs)\n-  { return chrono::duration<long double, micro>{__usecs}; }\n-\n-  template <char... _Digits>\n-    constexpr typename\n-    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t   chrono::microseconds>::type\n-    operator\"\" us()\n-    {\n-      return __detail::_Select_type<\n-\t\t\t__select_int::_Select_int<_Digits...>::value,\n-\t\t\tchrono::microseconds>::value;\n-    }\n-\n-  constexpr chrono::duration<long double, nano>\n-  operator\"\" ns(long double __nsecs)\n-  { return chrono::duration<long double, nano>{__nsecs}; }\n-\n-  template <char... _Digits>\n-    constexpr typename\n-    __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n-\t\t\t   chrono::nanoseconds>::type\n-    operator\"\" ns()\n-    {\n-      return __detail::_Select_type<\n-\t\t\t__select_int::_Select_int<_Digits...>::value,\n-\t\t\tchrono::nanoseconds>::value;\n-    }\n+    template <char... _Digits>\n+      constexpr typename\n+      __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t     chrono::milliseconds>::type\n+      operator\"\" ms()\n+      {\n+\treturn __detail::_Select_type<\n+\t\t\t  __select_int::_Select_int<_Digits...>::value,\n+\t\t\t  chrono::milliseconds>::value;\n+      }\n \n-} // inline namespace chrono_literals\n-} // inline namespace literals\n+    constexpr chrono::duration<long double, micro>\n+    operator\"\" us(long double __usecs)\n+    { return chrono::duration<long double, micro>{__usecs}; }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n+    template <char... _Digits>\n+      constexpr typename\n+      __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t     chrono::microseconds>::type\n+      operator\"\" us()\n+      {\n+\treturn __detail::_Select_type<\n+\t\t\t  __select_int::_Select_int<_Digits...>::value,\n+\t\t\t  chrono::microseconds>::value;\n+      }\n+\n+    constexpr chrono::duration<long double, nano>\n+    operator\"\" ns(long double __nsecs)\n+    { return chrono::duration<long double, nano>{__nsecs}; }\n+\n+    template <char... _Digits>\n+      constexpr typename\n+      __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n+\t\t\t     chrono::nanoseconds>::type\n+      operator\"\" ns()\n+      {\n+\treturn __detail::_Select_type<\n+\t\t\t  __select_int::_Select_int<_Digits...>::value,\n+\t\t\t  chrono::nanoseconds>::value;\n+      }\n+\n+  } // inline namespace chrono_literals\n+  } // inline namespace literals\n+\n+#endif // __cplusplus > 201103L\n+\n+  // @} group chrono\n } // namespace std\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1\n \n-#endif // __cplusplus > 201103L\n+#endif // C++11\n \n #endif //_GLIBCXX_CHRONO"}, {"sha": "710dc425655fee5fb66cf6c6144a33188ccda56c", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/types.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Ftypes.cc?ref=88c4d6b7988e964625faefd87af6bf55f792609a", "patch": "@@ -18,10 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// NOTE: This makes use of the fact that we know how moveable\n-// is implemented on string (via swap). If the implementation changed\n-// this test may begin to fail.\n-\n #include <chrono>\n #include <type_traits>\n "}, {"sha": "8f2be113749bccdac22ba2ef07ff036749527069", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/values.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Fvalues.cc?ref=88c4d6b7988e964625faefd87af6bf55f792609a", "patch": "@@ -18,10 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// NOTE: This makes use of the fact that we know how moveable\n-// is implemented on string (via swap). If the implementation changed\n-// this test may begin to fail.\n-\n #include <chrono>\n #include <testsuite_hooks.h>\n "}, {"sha": "25803853dd8d434a234190a428ac0dcd0ff6e829", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/types.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc?ref=88c4d6b7988e964625faefd87af6bf55f792609a", "patch": "@@ -18,10 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// NOTE: This makes use of the fact that we know how moveable\n-// is implemented on string (via swap). If the implementation changed\n-// this test may begin to fail.\n-\n #include <string>\n #include <type_traits>\n "}, {"sha": "4732f29f814af0ae233fafca63376cf423087e14", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/values.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c4d6b7988e964625faefd87af6bf55f792609a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc?ref=88c4d6b7988e964625faefd87af6bf55f792609a", "patch": "@@ -18,10 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// NOTE: This makes use of the fact that we know how moveable\n-// is implemented on string (via swap). If the implementation changed\n-// this test may begin to fail.\n-\n #include <string>\n #include <testsuite_hooks.h>\n "}]}