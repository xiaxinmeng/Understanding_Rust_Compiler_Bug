{"sha": "4ded4b230da2408bc6752ca4e4551204bebe806b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlZDRiMjMwZGEyNDA4YmM2NzUyY2E0ZTQ1NTEyMDRiZWJlODA2Yg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-12-11T22:47:34Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-12-11T22:47:34Z"}, "message": "altivec.h (vec_extract_fp32_from_shorth, [...]): Add #defines.\n\ngcc/ChangeLog:\n\n2017-12-11  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_extract_fp32_from_shorth,\n\tvec_extract_fp32_from_shortl]): Add #defines.\n\t* config/rs6000/rs6000-builtin.def (VSLDOI_2DI): Add macro expansion.\n\t* config/rs6000/rs6000-c.c (ALTIVEC_BUILTIN_VEC_UNPACKH,\n\tALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VEC_AND,\n\tALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VEC_SRL,\n\tALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VEC_SLD,\n\tALTIVEC_BUILTIN_VEC_SLL): Add expansions.\n\t* doc/extend.texi: Add documentation for the added builtins.\n\ngcc/testsuite/ChangeLog:\n\n2017-12-11  Carl Love  <cel@us.ibm.com>\n\t* gcc.target/powerpc/altivec-7.c: Renamed altivec-7.h.\n\t* gcc.target/powerpc/altivec-7.h (main): Add testcases for vec_unpackl.\n\tAdd dg-final tests for the instructions generated.\n\t* gcc.target/powerpc/altivec-7-be.c: New file to test on big endian.\n\t* gcc.target/powerpc/altivec-7-le.c: New file to test on little endian.\n\t* gcc.target/powerpc/altivec-13.c (foo): Add vec_sld, vec_srl,\n\t vec_sro testcases. Add dg-final tests for the instructions generated.\n\t* gcc.target/powerpc/builtins-3-p8.c (test_vsi_packs_vui,\n\ttest_vsi_packs_vsi, test_vsi_packs_vssi, test_vsi_packs_vusi,\n\ttest_vsi_packsu-vssi, test_vsi_packsu-vusi, test_vsi_packsu-vsll,\n\ttest_vsi_packsu-vull, test_vsi_packsu-vsi, test_vsi_packsu-vui): Add\n\ttestcases. Add dg-final tests for new instructions.\n\t* gcc.target/powerpc/p8vector-builtin-2.c (vbschar_eq, vbchar_eq,\n\tvuchar_eq, vbint_eq, vsint_eq, viint_eq, vuint_eq, vbool_eq, vbint_ne,\n\tvsint_ne, vuint_ne, vbool_ne, vsign_ne, vuns_ne, vbshort_ne): Add\n\ttests.\n\tAdd dg-final instruction tests.\n\t* gcc.target/powerpc/vsx-vector-6.c: Renamed vsx-vector-6.h.\n\t* gcc.target/powerpc/vsx-vector-6.h (vec_andc,vec_nmsub, vec_nmadd,\n\tvec_or, vec_nor, vec_andc, vec_or, vec_andc, vec_msums): Add tests.\n\tAdd dg-final tests for the generated instructions.\n\t* gcc.target/powerpc/builtins-3.c (test_sll_vsc_vsc_vsuc,\n\ttest_sll_vuc_vuc, test_sll_vsi_vsi_vuc, test_sll_vui_vui_vuc,\n\ttest_sll_vbll_vull, test_sll_vbll_vbll_vus, test_sll_vp_vp_vuc,\n\ttest_sll_vssi_vssi_vuc, test_sll_vusi_vusi_vuc, test_slo_vsc_vsc_vsc,\n\ttest_slo_vuc_vuc_vsc, test_slo_vsi_vsi_vsc, test_slo_vsi_vsi_vuc,\n\ttest_slo_vui_vui_vsc, test_slo_vui_vui_vuc, test_slo_vsll_slo_vsll_vsc,\n\ttest_slo_vsll_slo_vsll_vuc, test_slo_vull_slo_vull_vsc,\n\ttest_slo_vull_slo_vull_vuc, test_slo_vp_vp_vsc, test_slo_vp_vp_vuc,\n\ttest_slo_vssi_vssi_vsc, test_slo_vssi_vssi_vuc, test_slo_vusi_vusi_vsc,\n\ttest_slo_vusi_vusi_vuc, test_slo_vusi_vusi_vuc, test_slo_vf_vf_vsc,\n\ttest_slo_vf_vf_vuc, test_cmpb_float): Add tests.\n\nFrom-SVN: r255555", "tree": {"sha": "ae73ea8b31136475fa92588f0693a5592a7fa797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae73ea8b31136475fa92588f0693a5592a7fa797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ded4b230da2408bc6752ca4e4551204bebe806b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded4b230da2408bc6752ca4e4551204bebe806b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ded4b230da2408bc6752ca4e4551204bebe806b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded4b230da2408bc6752ca4e4551204bebe806b/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b92977ee9fe46d0625d6c7a7fc63a9005753b892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92977ee9fe46d0625d6c7a7fc63a9005753b892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92977ee9fe46d0625d6c7a7fc63a9005753b892"}], "stats": {"total": 755, "additions": 737, "deletions": 18}, "files": [{"sha": "807308208228cfac178ad8c9c9371e4449069a56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -1,3 +1,15 @@\n+2017-12-11  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_extract_fp32_from_shorth,\n+\tvec_extract_fp32_from_shortl]): Add #defines.\n+\t* config/rs6000/rs6000-builtin.def (VSLDOI_2DI): Add macro expansion.\n+\t* config/rs6000/rs6000-c.c (ALTIVEC_BUILTIN_VEC_UNPACKH,\n+\tALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VEC_AND,\n+\tALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VEC_SRL,\n+\tALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VEC_SLD,\n+\tALTIVEC_BUILTIN_VEC_SLL): Add expansions.\n+\t* doc/extend.texi: Add documentation for the added builtins.\n+\n 2017-12-11  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/80693"}, {"sha": "b58afd851cade24850bf61500395ff403e0d2063", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -458,6 +458,8 @@\n \n #define vec_extract_fp_from_shorth __builtin_vec_vextract_fp_from_shorth\n #define vec_extract_fp_from_shortl __builtin_vec_vextract_fp_from_shortl\n+#define vec_extract_fp32_from_shorth __builtin_vec_vextract_fp_from_shorth\n+#define vec_extract_fp32_from_shortl __builtin_vec_vextract_fp_from_shortl\n \n #define scalar_extract_exp __builtin_vec_scalar_extract_exp\n #define scalar_extract_sig __builtin_vec_scalar_extract_sig"}, {"sha": "a563a5d968c6e8f5fd79077d3c216d133e566302", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -999,6 +999,7 @@ BU_ALTIVEC_3 (VSEL_1TI_UNS,   \"vsel_1ti_uns\",   CONST, \tvector_select_v1ti_uns)\n BU_ALTIVEC_3 (VSLDOI_16QI,    \"vsldoi_16qi\",    CONST, \taltivec_vsldoi_v16qi)\n BU_ALTIVEC_3 (VSLDOI_8HI,     \"vsldoi_8hi\",     CONST, \taltivec_vsldoi_v8hi)\n BU_ALTIVEC_3 (VSLDOI_4SI,     \"vsldoi_4si\",     CONST, \taltivec_vsldoi_v4si)\n+BU_ALTIVEC_3 (VSLDOI_2DI,     \"vsldoi_2di\",     CONST, \taltivec_vsldoi_v2di)\n BU_ALTIVEC_3 (VSLDOI_4SF,     \"vsldoi_4sf\",     CONST, \taltivec_vsldoi_v4sf)\n BU_ALTIVEC_3 (VSLDOI_2DF,     \"vsldoi_2df\",     CONST, \taltivec_vsldoi_v2df)\n "}, {"sha": "1bcdaa95e7697b8be0f1a5d0180f4c26a1fe22fd", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -884,6 +884,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_pixel_V8HI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKH, ALTIVEC_BUILTIN_VUPKHPX,\n+    RS6000_BTI_V2DF, RS6000_BTI_V4SF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSH, ALTIVEC_BUILTIN_VUPKHSH,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKHSH, ALTIVEC_BUILTIN_VUPKHSH,\n@@ -914,6 +916,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_UNPACKL, P8V_BUILTIN_VUPKLSW,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VUPKLPX,\n+    RS6000_BTI_V2DF, RS6000_BTI_V4SF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLPX, ALTIVEC_BUILTIN_VUPKLPX,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_VUPKLPX, ALTIVEC_BUILTIN_VUPKLPX,\n@@ -1158,6 +1162,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n@@ -2653,6 +2659,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SLL, ALTIVEC_BUILTIN_VSL,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+\n+  { ALTIVEC_BUILTIN_VEC_SLL, ALTIVEC_BUILTIN_VSL,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SLL, ALTIVEC_BUILTIN_VSL,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SLL, ALTIVEC_BUILTIN_VSL,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SLL, ALTIVEC_BUILTIN_VSL,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SLL, ALTIVEC_BUILTIN_VSL,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V8HI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_SLO, ALTIVEC_BUILTIN_VSLO,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SLO, ALTIVEC_BUILTIN_VSLO,\n@@ -2861,6 +2879,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SRL, ALTIVEC_BUILTIN_VSR,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRL, ALTIVEC_BUILTIN_VSR,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRL, ALTIVEC_BUILTIN_VSR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VSRO,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VSRO,\n@@ -2893,6 +2915,15 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VSRO,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VSRO,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VSRO,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VSRO,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VSRO,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_SUB, ALTIVEC_BUILTIN_VSUBUBM,\n     RS6000_BTI_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUB, ALTIVEC_BUILTIN_VSUBUBM,\n@@ -3618,6 +3649,13 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_NOT_OPAQUE },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_NOT_OPAQUE },\n+  { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_NOT_OPAQUE },\n+  { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_NOT_OPAQUE },\n+  { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_NOT_OPAQUE },\n+\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n     RS6000_BTI_NOT_OPAQUE },"}, {"sha": "57c436b08e7d2d777da487ea0c38652883bbea92", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -16388,6 +16388,8 @@ vector unsigned char vec_vaddubs (vector unsigned char,\n vector float vec_and (vector float, vector float);\n vector float vec_and (vector float, vector bool int);\n vector float vec_and (vector bool int, vector float);\n+vector bool long long vec_and (vector bool long long int,\n+                               vector bool long long);\n vector bool int vec_and (vector bool int, vector bool int);\n vector signed int vec_and (vector bool int, vector signed int);\n vector signed int vec_and (vector signed int, vector bool int);\n@@ -17382,6 +17384,13 @@ vector unsigned char vec_sld (vector unsigned char,\n vector bool char vec_sld (vector bool char,\n                           vector bool char,\n                           const int);\n+vector bool long long int vec_sld (vector bool long long int,\n+                                   vector bool long long int, const int);\n+vector long long int vec_sld (vector long long int,\n+                              vector  long long int, const int);\n+vector unsigned long long int vec_sld (vector unsigned long long int,\n+                                       vector unsigned long long int,\n+                                       const int);\n \n vector signed char vec_sldw (vector signed char,\n                              vector signed char,\n@@ -17438,6 +17447,10 @@ vector unsigned short vec_sll (vector unsigned short,\n                                vector unsigned short);\n vector unsigned short vec_sll (vector unsigned short,\n                                vector unsigned char);\n+vector long long int vec_sll (vector long long int,\n+                              vector unsigned char);\n+vector unsigned long long int vec_sll (vector unsigned long long int,\n+                                       vector unsigned char);\n vector bool short vec_sll (vector bool short, vector unsigned int);\n vector bool short vec_sll (vector bool short, vector unsigned short);\n vector bool short vec_sll (vector bool short, vector unsigned char);\n@@ -17594,6 +17607,10 @@ vector unsigned short vec_srl (vector unsigned short,\n                                vector unsigned short);\n vector unsigned short vec_srl (vector unsigned short,\n                                vector unsigned char);\n+vector long long int vec_srl (vector long long int,\n+                              vector unsigned char);\n+vector unsigned long long int vec_srl (vector unsigned long long int,\n+                                       vector unsigned char);\n vector bool short vec_srl (vector bool short, vector unsigned int);\n vector bool short vec_srl (vector bool short, vector unsigned short);\n vector bool short vec_srl (vector bool short, vector unsigned char);\n@@ -17625,6 +17642,14 @@ vector unsigned short vec_sro (vector unsigned short,\n                                vector signed char);\n vector unsigned short vec_sro (vector unsigned short,\n                                vector unsigned char);\n+vector long long int vec_sro (vector long long int,\n+                              vector char);\n+vector long long int vec_sro (vector long long int,\n+                              vector unsigned char);\n+vector unsigned long long int vec_sro (vector unsigned long long int,\n+                                       vector char);\n+vector unsigned long long int vec_sro (vector unsigned long long int,\n+                                       vector unsigned char);\n vector pixel vec_sro (vector pixel, vector signed char);\n vector pixel vec_sro (vector pixel, vector unsigned char);\n vector signed char vec_sro (vector signed char, vector signed char);\n@@ -17894,6 +17919,7 @@ vector bool short vec_unpackh (vector bool char);\n vector signed int vec_unpackh (vector signed short);\n vector bool int vec_unpackh (vector bool short);\n vector unsigned int vec_unpackh (vector pixel);\n+vector double vec_unpackh (vector float);\n \n vector bool int vec_vupkhsh (vector bool short);\n vector signed int vec_vupkhsh (vector signed short);\n@@ -17908,6 +17934,7 @@ vector bool short vec_unpackl (vector bool char);\n vector unsigned int vec_unpackl (vector pixel);\n vector signed int vec_unpackl (vector signed short);\n vector bool int vec_unpackl (vector bool short);\n+vector double vec_unpackl (vector float);\n \n vector unsigned int vec_vupklpx (vector pixel);\n \n@@ -18656,9 +18683,18 @@ vector int vec_packs (vector long long, vector long long);\n vector unsigned int vec_packs (vector unsigned long long,\n                                vector unsigned long long);\n \n+test_vsi_packsu_vssi_vssi (vector signed short x,\n+\n+vector unsigned char vec_packsu (vector signed short, vector signed short )\n+vector unsigned char vec_packsu (vector unsigned short, vector unsigned short )\n+vector unsigned short int vec_packsu (vector signed int, vector signed int);\n+vector unsigned short int vec_packsu (vector unsigned int,\n+                                      vector unsigned int);\n vector unsigned int vec_packsu (vector long long, vector long long);\n vector unsigned int vec_packsu (vector unsigned long long,\n                                 vector unsigned long long);\n+vector unsigned int vec_packsu (vector signed long long,\n+                                vector signed long long);\n \n vector unsigned char vec_popcnt (vector signed char);\n vector unsigned char vec_popcnt (vector unsigned char);\n@@ -18887,9 +18923,21 @@ vector unsigned long long vec_bperm (vector unsigned long long,\n                                      vector unsigned char);\n \n vector bool char vec_cmpne (vector bool char, vector bool char);\n-vector bool short vec_cmpne (vector bool short, vector bool short);\n+vector bool char vec_cmpne (vector signed char, vector signed char);\n+vector bool char vec_cmpne (vector unsigned char, vector unsigned char);\n vector bool int vec_cmpne (vector bool int, vector bool int);\n+vector bool int vec_cmpne (vector signed int, vector signed int);\n+vector bool int vec_cmpne (vector unsigned int, vector unsigned int);\n vector bool long long vec_cmpne (vector bool long long, vector bool long long);\n+vector bool long long vec_cmpne (vector signed long long,\n+                                 vector signed long long);\n+vector bool long long vec_cmpne (vector unsigned long long,\n+                                 vector unsigned long long);\n+vector bool short vec_cmpne (vector bool short, vector bool short);\n+vector bool short vec_cmpne (vector signed short, vector signed short);\n+vector bool short vec_cmpne (vector unsigned short, vector unsigned short);\n+vector bool long long vec_cmpne (vector double, vector double);\n+vector bool int vec_cmpne (vector float, vector float);\n \n vector float vec_extract_fp32_from_shorth (vector unsigned short);\n vector float vec_extract_fp32_from_shortl (vector unsigned short);"}, {"sha": "140df68178a30eb4da4142251fc6ff493c106309", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -1,3 +1,15 @@\n+2017-12-11  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_extract_fp32_from_shorth,\n+\tvec_extract_fp32_from_shortl]): Add #defines.\n+\t* config/rs6000/rs6000-builtin.def (VSLDOI_2DI): Add macro expansion.\n+\t* config/rs6000/rs6000-c.c (ALTIVEC_BUILTIN_VEC_UNPACKH,\n+\tALTIVEC_BUILTIN_VEC_UNPACKL, ALTIVEC_BUILTIN_VEC_AND,\n+\tALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VEC_SRL,\n+\tALTIVEC_BUILTIN_VEC_SRO, ALTIVEC_BUILTIN_VEC_SLD,\n+\tALTIVEC_BUILTIN_VEC_SLL): Add expansions.\n+\t* doc/extend.texi: Add documentation for the added builtins.\n+\n 2017-12-11  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/80693"}, {"sha": "2315f6ef7d7c1bad50ca88340a133e0b43fc832a", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-13.c", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-13.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n+\n /* Author: Ziemowit Laski  <zlaski@apple.com>  */\n \n /* This test case exercises intrinsic/argument combinations that,\n@@ -14,8 +15,74 @@ void foo (void)\n   vector bool int boolVec1 = (vector bool int) vec_splat_u32(3);\n   vector bool short boolVec2 = (vector bool short) vec_splat_u16(3);\n   vector bool char boolVec3 = (vector bool char) vec_splat_u8(3);\n-\n+  vector signed char vsc1, vsc2, vscz;\n+  vector unsigned char vuc1, vuc2, vucz;\n+  vector signed short int vssi1, vssi2, vssiz;\n+  vector signed int vsi1, vsi2, vsiz;\n+  vector unsigned int vui1, vui2, vuiz;\n+  vector unsigned short int vusi1, vusi2, vusiz;\n+  vector bool long long vubll1, vubll2, vubllz;\n+  vector signed int long long vsill1, vsill2, vsillz;\n+  vector unsigned int long long vuill1, vuill2, vuillz;\n+  vector pixel vp1, vp2, vpz;\n+  vector float vf1, vf2, vfz;\n+  vector double vd1, vd2, vdz;\n+  \n   boolVec1 = vec_sld( boolVec1, boolVec1, 4 );\n   boolVec2 = vec_sld( boolVec2, boolVec2, 2 );\n   boolVec3 = vec_sld( boolVec3, boolVec3, 1 );\n+\n+  vscz = vec_sld( vsc1, vsc2, 1 );\n+  vucz = vec_sld( vuc1, vuc2, 1 );\n+  vsiz = vec_sld( vsi1, vsi2, 1 );\n+  vuiz = vec_sld( vui1, vui2, 1 );\n+  vubllz = vec_sld( vubll1, vubll2, 1 );\n+  vsillz = vec_sld( vsill1, vsill2, 1 );\n+  vuillz = vec_sld( vuill1, vuill2, 1 );\n+  vssiz = vec_sld( vssi1, vssi2, 1 );\n+  vusiz = vec_sld( vusi1, vusi2, 1 );\n+  \n+  vfz = vec_sld( vf1, vf2, 1 );\n+  vdz = vec_sld( vd1, vd2, 1 );\n+\n+  vpz = vec_sld( vp1, vp2, 1 );\n+\n+  vucz = vec_srl(vuc1, vuc2);\n+  vsiz = vec_srl(vsi1, vuc2);\n+  vuiz = vec_srl(vui1, vuc2);\n+  vsillz = vec_srl(vsill1, vuc2);\n+  vuillz = vec_srl(vuill1, vuc2);\n+  vpz = vec_srl(vp1, vuc2);\n+  vssiz = vec_srl(vssi1, vuc2);\n+  vusiz = vec_srl(vusi1, vuc2);\n+\n+  vscz = vec_sro(vsc1, vsc2);\n+  vscz = vec_sro(vsc1, vuc2);\n+  vucz = vec_sro(vuc1, vsc2);\n+  vucz = vec_sro(vuc1, vuc2);\n+  vsiz = vec_sro(vsi1, vsc2);\n+  vsiz = vec_sro(vsi1, vuc2);\n+  vuiz = vec_sro(vui1, vsc2);\n+  vuiz = vec_sro(vui1, vuc2);\n+  vsillz = vec_sro(vsill1, vsc2);\n+  vsillz = vec_sro(vsill1, vuc2);\n+  vuillz = vec_sro(vuill1, vsc2);\n+  vuillz = vec_sro(vuill1, vuc2);\n+  vpz = vec_sro(vp1, vsc2);\n+  vpz = vec_sro(vp1, vuc2);\n+  vssiz = vec_sro(vssi1, vsc2);\n+  vssiz = vec_sro(vssi1, vuc2);\n+  vusiz = vec_sro(vusi1, vsc2);\n+  vusiz = vec_sro(vusi1, vuc2);\n+  vfz = vec_sro(vf1, vsc2);\n+  vfz = vec_sro(vf1, vuc2);\n }\n+\n+/* Expected results:\n+   vec_sld          vsldoi\n+   vec_srl          vsr\n+   vec_sro          vsro  */\n+\n+/* { dg-final { scan-assembler-times \"vsldoi\" 15 } } */\n+/* { dg-final { scan-assembler-times \"vsr \" 8 } } */\n+/* { dg-final { scan-assembler-times \"vsro\" 20 } } */"}, {"sha": "cbc31e67ce5a38070de655ca8a6b17ec2a62b75e", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-7-be.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-be.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile { target powerpc64-*-* } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* Expected results for Big Endian:\n+     vec_packpx                     vpkpx\n+     vec_ld                         lxv2x\n+     vec_lde                        lvewx\n+     vec_ldl                        lxvl\n+     vec_lvewx                      lvewx\n+     vec_unpackh                    vupklsh\n+     vec_unpackl                    vupkhsh\n+     vec_andc                       xxnor\n+                                    xxland\n+     vec_vxor                       xxlxor\n+     vec_vmsumubm                   vmsumubm\n+     vec_vmulesb                    vmulesb\n+     vec_vmulosb                    vmulosb\n+*/\n+\n+/* { dg-final { scan-assembler-times \"vpkpx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmulesb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulosb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lxvd2x\" 6 } } */\n+/* { dg-final { scan-assembler-times \"lvewx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lvxl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupklsh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupkhsh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n+\n+/* Source code for the test in altivec-7.h */\n+#include \"altivec-7.h\""}, {"sha": "a15491188707d08bebd3ecac4a617eacdacc1ac6", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-7-le.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-le.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target powerpc64le-*-* } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* Expected results for Little Endian:\n+     vec_packpx                     vpkpx\n+     vec_vmulosb                    vmulesb\n+     vec_ld                         lxv2x\n+     vec_lde                        lvewx\n+     vec_ldl                        lxvl\n+     vec_lvewx                      lvewx\n+     vec_unpackh                    vupklsh\n+     vec_unpackl                    vupkhsh\n+     vec_andc                       xxnor\n+                                    xxland\n+     vec_vxor                       xxlxor\n+     vec_vmsumubm                   vmsumubm\n+     vec_vmulesb                    vmulosb\n+     vec_vmulosb                    vmulesb\n+*/\n+\n+/* { dg-final { scan-assembler-times \"vpkpx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmulesb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulosb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lxvd2x\" 36 } } */\n+/* { dg-final { scan-assembler-times \"lvewx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lvxl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupklsh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupkhsh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n+\n+/* Source code for the test in altivec-7.h */\n+#include \"altivec-7.h\""}, {"sha": "ff87deb9c5387a210f9b5ab8058f1272ec0ea69f", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-7.h", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.h?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -1,8 +1,8 @@\n /* Origin: Aldy Hernandez  <aldyh@redhat.com>  */\n \n-/* { dg-do compile { target powerpc*-*-* } } */\n-/* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-maltivec\" } */\n+/* This test code is included into altivec-7-be.c and altivec-7-le.c.  \n+   The two files have the tests for the number of instructions generated for\n+   LE versus BE.  */\n \n #include <altivec.h>\n \n@@ -17,6 +17,7 @@ vector unsigned char *vecuchar;\n vector unsigned int *vecuint;\n vector unsigned short *vecushort;\n vector float *vecfloat;\n+vector double *vecdouble;\n \n int main ()\n {\n@@ -26,6 +27,7 @@ int main ()\n   *vecfloat++ = vec_vxor(vecfloat[0], (vector bool int)vecint[1]);\n   *varpixel++ = vec_packpx(vecuint[0], vecuint[1]);\n   *varpixel++ = vec_vpkpx(vecuint[0], vecuint[1]);\n+  *vecshort++ = vec_vmulesb(vecchar[0], vecchar[1]);\n   *vecshort++ = vec_vmulosb(vecchar[0], vecchar[1]);\n   *vecint++ = vec_ld(var_int[0], intp[1]);\n   *vecint++ = vec_lde(var_int[0], intp[1]);\n@@ -41,6 +43,8 @@ int main ()\n   *vecuint++ = vec_lvx(var_int[0], uintp[1]);\n   *vecuint++ = vec_vmsumubm(vecuchar[0], vecuchar[1], vecuint[2]);\n   *vecuchar++ = vec_xor(vecuchar[0], (vector unsigned char)vecchar[1]);\n+  *vecdouble++ = vec_unpackl(vecfloat[0]);\n+  *vecdouble++ = vec_unpackh(vecfloat[0]);\n \n   return 0;\n }", "previous_filename": "gcc/testsuite/gcc.target/powerpc/altivec-7.c"}, {"sha": "83d538b2cf3f0cc8328f3e3a49a014bb5325b3be", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-p8.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p8.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -16,6 +16,34 @@ test_pack_float (vector double x, vector double y)\n   return vec_pack (x, y);\n }\n \n+vector unsigned char\n+test_vsi_packs_vusi_vusi (vector unsigned short x,\n+                          vector unsigned short y)\n+{\n+  return vec_packs (x, y);\n+}\n+\n+vector signed char\n+test_vsi_packs_vssi_vssi (vector signed short x,\n+                          vector signed short y)\n+{\n+  return vec_packs (x, y);\n+}\n+\n+vector signed short int\n+test_vsi_packs_vsi_vsi (vector signed int x,\n+\t\t\tvector signed int y)\n+{\n+  return vec_packs (x, y);\n+}\n+\n+vector unsigned short int\n+test_vsi_packs_vui_vui (vector unsigned int x,\n+\t\t\tvector unsigned int y)\n+{\n+  return vec_packs (x, y);\n+}\n+\n vector signed int\n test_vsi_packs_vsll_vsll (vector signed long long x,\n                           vector signed long long y)\n@@ -30,6 +58,48 @@ test_vui_packs_vull_vull (vector unsigned long long x,\n   return vec_packs (x, y);\n }\n \n+vector unsigned char\n+test_vsi_packsu_vssi_vssi (vector signed short x,\n+\t\t\t   vector signed short y)\n+{\n+  return vec_packsu (x, y);\n+}\n+\n+vector unsigned char\n+test_vsi_packsu_vusi_vusi (vector unsigned short x,\n+\t\t\t   vector unsigned short y)\n+{\n+  return vec_packsu (x, y);\n+}\n+\n+vector unsigned int\n+test_vsi_packsu_vsll_vsll (vector signed long long x,\n+\t\t\t   vector signed long long y)\n+{\n+  return vec_packsu (x, y);\n+}\n+\n+vector unsigned int\n+test_vsi_packsu_vull_vull (vector unsigned long long x,\n+\t\t\t   vector unsigned long long y)\n+{\n+  return vec_packsu (x, y);\n+}\n+\n+vector unsigned short int\n+test_vsi_packsu_vsi_vsi (vector signed int x,\n+\t\t\t vector signed int y)\n+{\n+  return vec_packsu (x, y);\n+}\n+\n+vector unsigned short int\n+test_vsi_packsu_vui_vui (vector unsigned int x,\n+\t\t\t vector unsigned int y)\n+{\n+  return vec_packsu (x, y);\n+}\n+\n vector unsigned char\n test_unsigned_char_popcnt_signed_char (vector signed char x)\n {\n@@ -115,6 +185,8 @@ test_vull_mulo_vui_vui (vector unsigned int x, vector unsigned int y)\n      test_pack_float                           1 vpkudum inst\n      test_vsi_packs_vsll_vsll                  1 vpksdss\n      test_vui_packs_vull_vull                  1 vpkudus\n+     test_vui_packs_vssi_vssi                  1 vpkshss\n+     test_vsi_packsu_vssi_vssi                 1 vpkshus\n      test_unsigned_char_popcnt_signed_char     1 vpopcntb\n      test_unsigned_char_popcnt_unsigned_char   1 vpopcntb\n      test_unsigned_short_popcnt_signed_short   1 vpopcnth\n@@ -133,6 +205,11 @@ test_vull_mulo_vui_vui (vector unsigned int x, vector unsigned int y)\n /* { dg-final { scan-assembler-times \"vpkudum\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpksdss\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpkudus\"  1 } } */  \n+/* { dg-final { scan-assembler-times \"vpkuhus\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vpkshss\"  1 } } */  \n+/* { dg-final { scan-assembler-times \"vpkshus\"  1 } } */  \n+/* { dg-final { scan-assembler-times \"vpksdus\"  2 } } */  \n+/* { dg-final { scan-assembler-times \"vpkuwus\"  2 } } */  \n /* { dg-final { scan-assembler-times \"vpopcntb\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpopcnth\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpopcntw\" 2 } } */"}, {"sha": "833116e597fd76b8f778a32442b731bf61e2c47a", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3.c", "status": "modified", "additions": 173, "deletions": 6, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -88,26 +88,185 @@ test_neg_double (vector double x)\n \treturn vec_neg (x);\n }\n \n+vector signed char\n+test_sll_vsc_vsc_vsuc (vector signed char x, vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector unsigned char\n+test_sll_vuc_vuc_vuc (vector unsigned char x, vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector signed int\n+test_sll_vsi_vsi_vuc (vector signed int x, vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector unsigned int\n+test_sll_vui_vui_vuc (vector unsigned int x, vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector bool long long\n+test_sll_vbll_vbll_vuc (vector bool long long x,\n+\t\t\tvector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector bool long long\n+test_sll_vbll_vbll_vull (vector bool long long x,\n+\t\t\tvector unsigned long long y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector bool long long\n+test_sll_vbll_vbll_vus (vector bool long long x,\n+\t\t\tvector unsigned short y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+vector pixel\n+test_sll_vp_vp_vuc (vector pixel x, vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector signed short int\n+test_sll_vssi_vssi_vuc (vector signed short x, vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector unsigned short int\n+test_sll_vusi_vusi_vuc (vector unsigned short x, vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector signed char\n+test_slo_vsc_vsc_vsc (vector signed char x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector signed char\n+test_slo_vsc_vsc_vuc (vector signed char x, vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector unsigned char\n+test_slo_vuc_vuc_vsc (vector unsigned char x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector unsigned char\n+test_slo_vuc_vuc_vuc (vector unsigned char x, vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector signed int\n+test_slo_vsi_vsi_vsc (vector signed int x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector signed int\n+test_slo_vsi_vsi_vuc (vector signed int x, vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector unsigned int\n+test_slo_vui_vui_vsc (vector unsigned int x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector unsigned int\n+test_slo_vui_vui_vuc (vector unsigned int x, vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n vector signed long long\n-test_vsll_slo_vsll_vsc (vector signed long long x, vector signed char y)\n+test_slo_vsll_slo_vsll_vsc (vector signed long long x, vector signed char y)\n {\n \treturn vec_slo (x, y);\n }\n \n vector signed long long\n-test_vsll_slo_vsll_vuc (vector signed long long x, vector unsigned char y)\n+test_slo_vsll_slo_vsll_vuc (vector signed long long x, vector unsigned char y)\n {\n \treturn vec_slo (x, y);\n }\n \n vector unsigned long long\n-test_vull_slo_vull_vsc (vector unsigned long long x, vector signed char y)\n+test_slo_vull_slo_vull_vsc (vector unsigned long long x, vector signed char y)\n {\n \treturn vec_slo (x, y);\n }\n \n vector unsigned long long\n-test_vull_slo_vull_vuc (vector unsigned long long x, vector unsigned char y)\n+test_slo_vull_slo_vull_vuc (vector unsigned long long x,\n+\t\t\t    vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector pixel\n+test_slo_vp_vp_vsc (vector pixel int x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector pixel\n+test_slo_vp_vp_vuc (vector pixel int x, vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector signed short int\n+test_slo_vssi_vssi_vsc (vector signed short int x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector signed short int\n+test_slo_vssi_vssi_vuc (vector signed short int x, vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector unsigned short int\n+test_slo_vusi_vusi_vsc (vector unsigned short int x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector unsigned short int\n+test_slo_vusi_vusi_vuc (vector unsigned short int x, vector unsigned char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector float\n+test_slo_vf_vf_vsc (vector float x, vector signed char y)\n+{\n+\treturn vec_slo (x, y);\n+}\n+\n+vector float\n+test_slo_vf_vf_vuc (vector float x, vector unsigned char y)\n {\n \treturn vec_slo (x, y);\n }\n@@ -163,6 +322,12 @@ test_vul_sldw_vul_vul (vector unsigned long long x,\n \treturn vec_sldw (x, y, 3);\n }\n \n+vector int\n+test_cmpb_float (vector float x, vector float y)\n+{\n+\treturn vec_cmpb (x, y);\n+}\n+\n /* Expected test results:\n \n      test_eq_char              1 vcmpequb inst\n@@ -190,7 +355,8 @@ test_vul_sldw_vul_vul (vector unsigned long long x,\n      test_vsi_mulo_vsi_vsi     1 xxsldwi\n      test_vui_mulo_vui_vui     1 xxsldwi\n      test_vsl_mulo_vsl_vsl     1 xxsldwi\n-     test_vul_mulo_vul_vul     1 xxsldwi */\n+     test_vul_mulo_vul_vul     1 xxsldwi\n+     test_cmpb_float           1 vcmpbfp */\n \n /* { dg-final { scan-assembler-times \"vcmpequb\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcmpequh\" 1 } } */\n@@ -207,5 +373,6 @@ test_vul_sldw_vul_vul (vector unsigned long long x,\n /* { dg-final { scan-assembler-times \"xvnabsdp\" 1 } } */\n /* { dg-final { scan-assembler-times \"xvnegsp\"  1 } } */\n /* { dg-final { scan-assembler-times \"xvnegdp\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vslo\"     4 } } */\n+/* { dg-final { scan-assembler-times \"vslo\"    20 } } */\n /* { dg-final { scan-assembler-times \"xxsldwi\"  8 } } */\n+/* { dg-final { scan-assembler-times \"vcmpbfp\"  1 } } */"}, {"sha": "00260971063a5170217cd908eea7844035c5f15a", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-2.c", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-2.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -9,6 +9,14 @@\n typedef vector long long\t\tv_sign;\n typedef vector unsigned long long\tv_uns;\n typedef vector bool long long\t\tv_bool;\n+typedef vector bool char\t\tv_bchar;\n+typedef vector bool int \t\tv_bint;\n+typedef vector bool short\t\tv_bshort;\n+typedef vector signed int\t\tv_sint;\n+typedef vector unsigned int\t\tv_uint;\n+typedef vector signed char\t\tv_schar;\n+typedef vector unsigned char\t\tv_uchar;\n+typedef vector float\t\t\tv_float;\n \n v_sign sign_add_1 (v_sign a, v_sign b)\n {\n@@ -191,15 +199,88 @@ v_sign sign_sra_3 (v_sign a, v_uns b)\n   return vec_vsrad (a, b);\n }\n \n+v_bchar vbchar_eq (v_bchar a, v_bchar b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bchar vbschar_eq (v_schar a, v_schar b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bchar vuchar_eq (v_uchar a, v_uchar b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bint vbint_eq (v_bint a, v_bint b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bint vsint_eq (v_sint a, v_sint b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bint vuint_eq (v_uint a, v_uint b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bool vbool_eq (v_bool a, v_bool b)\n+{\n+  return vec_cmpeq (a, b);\n+}\n+\n+v_bint vbint_ne (v_bint a, v_bint b)\n+{\n+  return vec_cmpne (a, b);\n+}\n+\n+v_bint vsint_ne (v_sint a, v_sint b)\n+{\n+  return vec_cmpne (a, b);\n+}\n+\n+v_bint vuint_ne (v_uint a, v_uint b)\n+{\n+  return vec_cmpne (a, b);\n+}\n+\n+v_bool vbool_ne (v_bool a, v_bool b)\n+{\n+  return vec_cmpne (a, b);\n+}\n+\n+v_bool vsign_ne (v_sign a, v_sign b)\n+{\n+  return vec_cmpne (a, b);\n+}\n+\n+v_bool vuns_ne (v_uns a, v_uns b)\n+{\n+  return vec_cmpne (a, b);\n+}\n+\n+v_bshort vbshort_ne (v_bshort a, v_bshort b)\n+{\n+  return vec_cmpne (a, b);\n+}\n+\n+\n /* { dg-final { scan-assembler-times \"vaddudm\" \t5 } } */\n /* { dg-final { scan-assembler-times \"vsubudm\" \t6 } } */\n /* { dg-final { scan-assembler-times \"vmaxsd\"  \t4 } } */\n /* { dg-final { scan-assembler-times \"vminsd\"  \t3 } } */\n /* { dg-final { scan-assembler-times \"vmaxud\"  \t2 } } */\n /* { dg-final { scan-assembler-times \"vminud\"  \t2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpequd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequd\" 6 } } */\n /* { dg-final { scan-assembler-times \"vcmpgtsd\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcmpgtud\" 1 } } */\n /* { dg-final { scan-assembler-times \"vrld\"     3 } } */\n /* { dg-final { scan-assembler-times \"vsld\"     5 } } */\n /* { dg-final { scan-assembler-times \"vsrad\"    3 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequb\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequw\" 6 } } */"}, {"sha": "a33f6d1de2791a80c7b68209d3542a96648147f4", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6-be.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6-be.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target { powerpc64-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+/* Expected instruction counts for Big Endian */\n+\n+/* { dg-final { scan-assembler-times \"xvabsdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvadddp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 7 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpeqdp\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgtdp\" 7 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgedp\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpim\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmaddadp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmsubadp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvsubdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmaxdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmindp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmuldp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpic\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvsqrtdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpiz\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmsubasp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvnmaddasp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmsumshs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 13 } } */\n+\n+/* Source code for the test in vsx-vector-6.h */\n+#include \"vsx-vector-6.h\""}, {"sha": "ad424b255728969b82b38980ed78b6e095d3d135", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6-le.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6-le.c?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile { target { powerpc64le-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+/* Expected instruction counts for Little Endian */\n+\n+/* { dg-final { scan-assembler-times \"xvabsdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvadddp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 16 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpeqdp\" 5 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgtdp\" 7 } } */\n+/* { dg-final { scan-assembler-times \"xvcmpgedp\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpim\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmaddadp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmsubadp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvsubdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmaxdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmindp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmuldp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpic\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvsqrtdp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpiz\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmsubasp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvnmaddasp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmsumshs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 9 } } */\n+\n+/* Source code for the test in vsx-vector-6.h */\n+#include \"vsx-vector-6.h\""}, {"sha": "422f8a1ad478ce7b221005bfa655c545112402e8", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6.h", "status": "renamed", "additions": 82, "deletions": 6, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded4b230da2408bc6752ca4e4551204bebe806b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h?ref=4ded4b230da2408bc6752ca4e4551204bebe806b", "patch": "@@ -1,19 +1,36 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-mvsx -O2\" } */\n+/* This test code is included into vsx-vector-6-be.c and vsx-vector-6-le.c.  \n+   The two files have the tests for the number of instructions generated for\n+   LE versus BE.  */\n \n #include <altivec.h>\n \n-void foo (vector double *out, vector double *in, vector long *p_l, vector bool long *p_b, vector unsigned char *p_uc, int *i)\n+void foo (vector double *out, vector double *in, vector long *p_l, vector bool long *p_b,\n+\t  vector unsigned char *p_uc, int *i, vector float *p_f,\n+\t  vector bool char *outbc, vector bool int *outbi,\n+\t  vector bool short *outbsi, vector int *outsi, vector unsigned int *outui)\n {\n   vector double in0 = in[0];\n   vector double in1 = in[1];\n   vector double in2 = in[2];\n   vector long inl = *p_l;\n   vector bool long inb = *p_b;\n+  vector bool long long inbl0;\n+  vector bool long long inbl1;\n   vector unsigned char uc = *p_uc;\n-\n+  vector float inf0;\n+  vector float inf1;\n+  vector float inf2;\n+  vector bool char inbc0;\n+  vector bool char inbc1;\n+  vector bool short inbs0;\n+  vector bool short inbs1;\n+  vector bool int inbi0;\n+  vector bool int inbi1;\n+  vector signed short int inssi0, inssi1;\n+  vector unsigned short int inusi0, inusi1;\n+  vector signed int insi0, insi1;\n+  vector unsigned int inui0, inui1;\n+  \n   *out++ = vec_abs (in0);\n   *out++ = vec_add (in0, in1);\n   *out++ = vec_and (in0, in1);\n@@ -22,6 +39,9 @@ void foo (vector double *out, vector double *in, vector long *p_l, vector bool l\n   *out++ = vec_andc (in0, in1);\n   *out++ = vec_andc (in0, inb);\n   *out++ = vec_andc (inb, in0);\n+  *out++ = vec_andc (inbl0, in0);\n+  *out++ = vec_andc (in0, inbl0);\n+\n   *out++ = vec_ceil (in0);\n   *p_b++ = vec_cmpeq (in0, in1);\n   *p_b++ = vec_cmpgt (in0, in1);\n@@ -78,4 +98,60 @@ void foo (vector double *out, vector double *in, vector long *p_l, vector bool l\n   *i++ = vec_any_nle (in0, in1);\n   *i++ = vec_any_nlt (in0, in1);\n   *i++ = vec_any_numeric (in0);\n+\n+  *p_f++ = vec_msub (inf0, inf1, inf2);\n+  *p_f++ = vec_nmsub (inf0, inf1, inf2);\n+  *p_f++ = vec_nmadd (inf0, inf1, inf2);\n+  *p_f++ = vec_or (inf0, inf1);\n+  \n+  *out++ = vec_or (inbl0, in0);\n+  *out++ = vec_or (in0, inbl0);\n+\n+  *out++ = vec_nor (in0, in1);\n+\n+  *outbc++ = vec_nor (inbc0, inbc1);\n+  *outbc++ = vec_andc (inbc0, inbc1);\n+  *outbc++ = vec_or (inbc0, inbc1);\n+\n+  *outbi++ = vec_andc (inbi0, inbi1);\n+  *outbsi++ = vec_andc (inbs0, inbs1);\n+\n+  *outbsi++ = vec_andc (inbs0, inbs1);\n+\n+  *outbi++ = vec_nor (inbi0, inbi1);\n+  *outbi++ = vec_or (inbi0, inbi1);\n+\n+  *outbsi++ = vec_nor (inbs0, inbs1);\n+  *outbsi++ = vec_or (inbs0, inbs1);\n+\n+  *outsi++ = vec_msums(inssi0, inssi1, insi0);\n+  *outui++ = vec_msums(inusi0, inusi1, inui0);\n+\n+  *p_f++ = vec_nor (inf0, inf1);\n+\n+  *p_f++ = vec_andc (inf0, inf1);\n+  *p_f++ = vec_andc (inbi0, inf0);\n+  *p_f++ = vec_andc (inf0, inbi0);\n+\n+  *in++ = vec_andc (inbl0, in1);\n+  *in++ = vec_andc (in0, inbl1);\n+}\n+\n+int main()\n+{\n+  vector double *out;\n+  vector double *in;\n+  vector long *p_l;\n+  vector bool long *p_b;\n+  vector unsigned char *p_uc;\n+  int *i;\n+  vector float *p_f;\n+  vector bool char *outbc;\n+  vector bool int *outbi;\n+  vector bool short *outbsi;\n+  vector int *outsi;\n+  vector unsigned int *outui;\n+\n+  foo (out, in, p_l, p_b, p_uc, i, p_f, outbc,\n+       outbi, outbsi, outsi, outui);\n }", "previous_filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6.c"}]}