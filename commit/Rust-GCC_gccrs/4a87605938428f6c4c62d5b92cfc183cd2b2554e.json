{"sha": "4a87605938428f6c4c62d5b92cfc183cd2b2554e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4NzYwNTkzODQyOGY2YzRjNjJkNWI5MmNmYzE4M2NkMmIyNTU0ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-01T09:16:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-01T10:31:21Z"}, "message": "tree-optimization/101278 - handle self-use in DSE analysis\n\nDSE store classification short-cuts the to-be classified stmt itself\nfrom chaining but fails to first check whether the store uses itself\nwhich can be the case when it is a call with the LHS also passed by\nvalue as argument.\n\n2021-07-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101278\n\t* tree-ssa-dse.c (dse_classify_store): First check for\n\tuses, then ignore stmt for chaining purposes.\n\n\t* gcc.dg/torture/pr101278.c: New testcase.", "tree": {"sha": "a9478e77889df404fa204eefb4b1ff89a54167b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9478e77889df404fa204eefb4b1ff89a54167b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a87605938428f6c4c62d5b92cfc183cd2b2554e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a87605938428f6c4c62d5b92cfc183cd2b2554e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a87605938428f6c4c62d5b92cfc183cd2b2554e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a87605938428f6c4c62d5b92cfc183cd2b2554e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3aaba68405751bae3f630669515b7ecdf77efa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3aaba68405751bae3f630669515b7ecdf77efa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3aaba68405751bae3f630669515b7ecdf77efa6"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "1d25658f37db0cf8806f229256a0ecf5e094bbda", "filename": "gcc/testsuite/gcc.dg/torture/pr101278.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a87605938428f6c4c62d5b92cfc183cd2b2554e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101278.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a87605938428f6c4c62d5b92cfc183cd2b2554e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101278.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101278.c?ref=4a87605938428f6c4c62d5b92cfc183cd2b2554e", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+\n+struct X { int counter; };\n+\n+struct X __attribute__((noipa)) foo (struct X x)\n+{\n+  x.counter++;\n+  if (x.counter == 5)\n+    __builtin_exit (0);\n+  return x;\n+}\n+\n+int\n+main ()\n+{\n+  struct X x;\n+  x.counter = 0;\n+  for (int i = 0; i < 10; ++i)\n+    x = foo (x);\n+  __builtin_abort ();\n+}"}, {"sha": "98daa8ab24c966d107c09f436fb474eb805069da", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a87605938428f6c4c62d5b92cfc183cd2b2554e/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a87605938428f6c4c62d5b92cfc183cd2b2554e/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=4a87605938428f6c4c62d5b92cfc183cd2b2554e", "patch": "@@ -813,15 +813,11 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t      break;\n \t    }\n \n-\t  /* We have visited ourselves already so ignore STMT for the\n-\t     purpose of chaining.  */\n-\t  if (use_stmt == stmt)\n-\t    ;\n \t  /* In simple cases we can look through PHI nodes, but we\n \t     have to be careful with loops and with memory references\n \t     containing operands that are also operands of PHI nodes.\n \t     See gcc.c-torture/execute/20051110-*.c.  */\n-\t  else if (gimple_code (use_stmt) == GIMPLE_PHI)\n+\t  if (gimple_code (use_stmt) == GIMPLE_PHI)\n \t    {\n \t      /* If we already visited this PHI ignore it for further\n \t\t processing.  */\n@@ -861,6 +857,10 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t      fail = true;\n \t      break;\n \t    }\n+\t  /* We have visited ourselves already so ignore STMT for the\n+\t     purpose of chaining.  */\n+\t  else if (use_stmt == stmt)\n+\t    ;\n \t  /* If this is a store, remember it as we possibly need to walk the\n \t     defs uses.  */\n \t  else if (gimple_vdef (use_stmt))"}]}