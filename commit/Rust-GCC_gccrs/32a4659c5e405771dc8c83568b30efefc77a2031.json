{"sha": "32a4659c5e405771dc8c83568b30efefc77a2031", "node_id": "C_kwDOANBUbNoAKDMyYTQ2NTljNWU0MDU3NzFkYzhjODM1NjhiMzBlZmVmYzc3YTIwMzE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-21T11:54:52Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:51Z"}, "message": "gccrs: Refactor name resolver to take a Rib::ItemType\n\nThis allows us to track the type of declaration that is stored within a\nRib.\n\ngcc/rust/ChangeLog:\n\n\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit): Add Rib argument.\n\t(ResolveExpr::resolve_closure_param): Likewise.\n\t* resolve/rust-ast-resolve-implitem.h: Likewise.\n\t* resolve/rust-ast-resolve-item.cc (ResolveTraitItems::visit): Likewise.\n\t(ResolveItem::visit): Likewise.\n\t* resolve/rust-ast-resolve-pattern.cc (PatternDeclaration::visit): Likewise.\n\t* resolve/rust-ast-resolve-pattern.h: Likewise.\n\t* resolve/rust-ast-resolve-stmt.h: Likewise.\n\t* resolve/rust-ast-resolve-toplevel.h: Likewise.\n\t* resolve/rust-ast-resolve-type.h: Likewise.\n\t* resolve/rust-name-resolver.cc (Rib::lookup_decl_type): Likewise.\n\t(Scope::insert): Likewise.\n\t(Resolver::insert_builtin_types): Likewise.\n\t* resolve/rust-name-resolver.h: Likewise.", "tree": {"sha": "6e305de69b6f0dd11b19a24dc90a63e44b4ca912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e305de69b6f0dd11b19a24dc90a63e44b4ca912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32a4659c5e405771dc8c83568b30efefc77a2031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a4659c5e405771dc8c83568b30efefc77a2031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a4659c5e405771dc8c83568b30efefc77a2031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a4659c5e405771dc8c83568b30efefc77a2031/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01af669357c4e7e974e85177e5d1763012bf113a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01af669357c4e7e974e85177e5d1763012bf113a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01af669357c4e7e974e85177e5d1763012bf113a"}], "stats": {"total": 149, "additions": 108, "deletions": 41}, "files": [{"sha": "293c63f5628bd45d3d6e12273e2bb5d9efef2835", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -209,7 +209,7 @@ ResolveExpr::visit (AST::IfLetExpr &expr)\n \n   for (auto &pattern : expr.get_patterns ())\n     {\n-      PatternDeclaration::go (pattern.get ());\n+      PatternDeclaration::go (pattern.get (), Rib::ItemType::Var);\n     }\n \n   ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n@@ -343,7 +343,7 @@ ResolveExpr::visit (AST::LoopExpr &expr)\n       auto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n       resolver->get_label_scope ().insert (\n \tCanonicalPath::new_seg (expr.get_node_id (), label_name),\n-\tlabel_lifetime_node_id, label.get_locus (), false,\n+\tlabel_lifetime_node_id, label.get_locus (), false, Rib::ItemType::Label,\n \t[&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \t  rust_error_at (label.get_locus (), \"label redefined multiple times\");\n \t  rust_error_at (locus, \"was defined here\");\n@@ -400,7 +400,7 @@ ResolveExpr::visit (AST::WhileLoopExpr &expr)\n       auto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n       resolver->get_label_scope ().insert (\n \tCanonicalPath::new_seg (label.get_node_id (), label_name),\n-\tlabel_lifetime_node_id, label.get_locus (), false,\n+\tlabel_lifetime_node_id, label.get_locus (), false, Rib::ItemType::Label,\n \t[&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \t  rust_error_at (label.get_locus (), \"label redefined multiple times\");\n \t  rust_error_at (locus, \"was defined here\");\n@@ -429,7 +429,7 @@ ResolveExpr::visit (AST::ForLoopExpr &expr)\n       auto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n       resolver->get_label_scope ().insert (\n \tCanonicalPath::new_seg (label.get_node_id (), label_name),\n-\tlabel_lifetime_node_id, label.get_locus (), false,\n+\tlabel_lifetime_node_id, label.get_locus (), false, Rib::ItemType::Label,\n \t[&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \t  rust_error_at (label.get_locus (), \"label redefined multiple times\");\n \t  rust_error_at (locus, \"was defined here\");\n@@ -446,7 +446,7 @@ ResolveExpr::visit (AST::ForLoopExpr &expr)\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   // resolve the expression\n-  PatternDeclaration::go (expr.get_pattern ().get ());\n+  PatternDeclaration::go (expr.get_pattern ().get (), Rib::ItemType::Var);\n   ResolveExpr::go (expr.get_iterator_expr ().get (), prefix, canonical_prefix);\n   ResolveExpr::go (expr.get_loop_block ().get (), prefix, canonical_prefix);\n \n@@ -520,7 +520,7 @@ ResolveExpr::visit (AST::MatchExpr &expr)\n       // insert any possible new patterns\n       for (auto &pattern : arm.get_patterns ())\n \t{\n-\t  PatternDeclaration::go (pattern.get ());\n+\t  PatternDeclaration::go (pattern.get (), Rib::ItemType::Var);\n \t}\n \n       // resolve the body\n@@ -617,7 +617,7 @@ ResolveExpr::visit (AST::ClosureExprInnerTyped &expr)\n void\n ResolveExpr::resolve_closure_param (AST::ClosureParam &param)\n {\n-  PatternDeclaration::go (param.get_pattern ().get ());\n+  PatternDeclaration::go (param.get_pattern ().get (), Rib::ItemType::Param);\n \n   if (param.has_type_given ())\n     ResolveType::go (param.get_type ().get ());"}, {"sha": "9cad8aa41a53509a3d2e389b6509e882cfb57bf5", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -56,7 +56,7 @@ class ResolveToplevelImplItem : public ResolverBase\n     auto path = prefix.append (decl);\n \n     resolver->get_type_scope ().insert (\n-      path, type.get_node_id (), type.get_locus (), false,\n+      path, type.get_node_id (), type.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (type.get_locus ());\n \tr.add_range (locus);\n@@ -72,6 +72,7 @@ class ResolveToplevelImplItem : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, constant.get_node_id (), constant.get_locus (), false,\n+      Rib::ItemType::Const,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (constant.get_locus ());\n \tr.add_range (locus);\n@@ -87,6 +88,7 @@ class ResolveToplevelImplItem : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,\n+      Rib::ItemType::Function,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (locus);\n@@ -102,6 +104,7 @@ class ResolveToplevelImplItem : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, method.get_node_id (), method.get_locus (), false,\n+      Rib::ItemType::Function,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (method.get_locus ());\n \tr.add_range (locus);\n@@ -141,6 +144,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,\n+      Rib::ItemType::Function,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (locus);\n@@ -159,6 +163,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, method.get_node_id (), method.get_locus (), false,\n+      Rib::ItemType::Function,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (method.get_locus ());\n \tr.add_range (locus);\n@@ -177,6 +182,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, constant.get_node_id (), constant.get_locus (), false,\n+      Rib::ItemType::Const,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (constant.get_locus ());\n \tr.add_range (locus);\n@@ -194,7 +200,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n     auto cpath = canonical_prefix.append (decl);\n \n     resolver->get_type_scope ().insert (\n-      path, type.get_node_id (), type.get_locus (), false,\n+      path, type.get_node_id (), type.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (type.get_locus ());\n \tr.add_range (locus);\n@@ -233,6 +239,7 @@ class ResolveToplevelExternItem : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,\n+      Rib::ItemType::Function,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (locus);\n@@ -251,6 +258,7 @@ class ResolveToplevelExternItem : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, item.get_node_id (), item.get_locus (), false,\n+      Rib::ItemType::Static,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);"}, {"sha": "0be9a02a6f63e64e6622635b50578ef4546b5adf", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -82,7 +82,8 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get ());\n+      PatternDeclaration::go (param.get_pattern ().get (),\n+\t\t\t      Rib::ItemType::Param);\n     }\n \n   if (function.has_where_clause ())\n@@ -138,14 +139,15 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n   AST::TypePath self_type_path (std::move (segments), self_param.get_locus ());\n \n   ResolveType::go (&self_type_path);\n-  PatternDeclaration::go (&self_pattern);\n+  PatternDeclaration::go (&self_pattern, Rib::ItemType::Param);\n \n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get ());\n+      PatternDeclaration::go (param.get_pattern ().get (),\n+\t\t\t      Rib::ItemType::Param);\n     }\n \n   if (function.has_where_clause ())\n@@ -499,10 +501,8 @@ ResolveItem::visit (AST::Function &function)\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get ());\n-\n-      // the mutability checker needs to verify for immutable decls the number\n-      // of assignments are <1. This marks an implicit assignment\n+      PatternDeclaration::go (param.get_pattern ().get (),\n+\t\t\t      Rib::ItemType::Param);\n     }\n \n   // resolve the function body\n@@ -631,14 +631,15 @@ ResolveItem::visit (AST::Method &method)\n   AST::TypePath self_type_path (std::move (segments), self_param.get_locus ());\n \n   ResolveType::go (&self_type_path);\n-  PatternDeclaration::go (&self_pattern);\n+  PatternDeclaration::go (&self_pattern, Rib::ItemType::Param);\n \n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : method.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get ());\n+      PatternDeclaration::go (param.get_pattern ().get (),\n+\t\t\t      Rib::ItemType::Param);\n     }\n \n   // resolve any where clause items"}, {"sha": "10f4fd8a61bfca6be07f54e0cc26d75f6b28147b", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -49,7 +49,7 @@ PatternDeclaration::visit (AST::TupleStructPattern &pattern)\n \n \tfor (auto &inner_pattern : items_no_range.get_patterns ())\n \t  {\n-\t    PatternDeclaration::go (inner_pattern.get ());\n+\t    PatternDeclaration::go (inner_pattern.get (), type);\n \t  }\n       }\n       break;"}, {"sha": "5f2b7293cf25ed9e8bb84f133527b470d504aaa7", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -55,9 +55,9 @@ class PatternDeclaration : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::Pattern *pattern)\n+  static void go (AST::Pattern *pattern, Rib::ItemType type)\n   {\n-    PatternDeclaration resolver;\n+    PatternDeclaration resolver (type);\n     pattern->accept_vis (resolver);\n   };\n \n@@ -67,14 +67,14 @@ class PatternDeclaration : public ResolverBase\n     // as new refs to this decl will match back here so it is ok to overwrite\n     resolver->get_name_scope ().insert (\n       CanonicalPath::new_seg (pattern.get_node_id (), pattern.get_ident ()),\n-      pattern.get_node_id (), pattern.get_locus ());\n+      pattern.get_node_id (), pattern.get_locus (), type);\n   }\n \n   void visit (AST::WildcardPattern &pattern) override\n   {\n     resolver->get_name_scope ().insert (\n       CanonicalPath::new_seg (pattern.get_node_id (), \"_\"),\n-      pattern.get_node_id (), pattern.get_locus ());\n+      pattern.get_node_id (), pattern.get_locus (), type);\n   }\n \n   // cases in a match expression\n@@ -89,7 +89,9 @@ class PatternDeclaration : public ResolverBase\n   void visit (AST::RangePattern &pattern) override;\n \n private:\n-  PatternDeclaration () : ResolverBase () {}\n+  PatternDeclaration (Rib::ItemType type) : ResolverBase (), type (type) {}\n+\n+  Rib::ItemType type;\n };\n \n } // namespace Resolver"}, {"sha": "28c547f410b77cf2903a220b5ec9ce34c7fa974d", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -64,6 +64,7 @@ class ResolveStmt : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, constant.get_node_id (), constant.get_locus (), false,\n+      Rib::ItemType::Const,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (constant.get_locus ());\n \tr.add_range (locus);\n@@ -82,7 +83,7 @@ class ResolveStmt : public ResolverBase\n \t\t\t canonical_prefix);\n       }\n \n-    PatternDeclaration::go (stmt.get_pattern ().get ());\n+    PatternDeclaration::go (stmt.get_pattern ().get (), Rib::ItemType::Var);\n     if (stmt.has_type ())\n       ResolveType::go (stmt.get_type ().get ());\n   }\n@@ -97,6 +98,7 @@ class ResolveStmt : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (struct_decl.get_locus ());\n \tr.add_range (locus);\n@@ -128,6 +130,7 @@ class ResolveStmt : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, enum_decl.get_node_id (), enum_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (enum_decl.get_locus ());\n \tr.add_range (locus);\n@@ -158,7 +161,7 @@ class ResolveStmt : public ResolverBase\n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -177,7 +180,7 @@ class ResolveStmt : public ResolverBase\n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -202,7 +205,7 @@ class ResolveStmt : public ResolverBase\n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -227,7 +230,7 @@ class ResolveStmt : public ResolverBase\n     mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -247,6 +250,7 @@ class ResolveStmt : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (struct_decl.get_locus ());\n \tr.add_range (locus);\n@@ -283,6 +287,7 @@ class ResolveStmt : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, union_decl.get_node_id (), union_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (union_decl.get_locus ());\n \tr.add_range (locus);\n@@ -317,6 +322,7 @@ class ResolveStmt : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,\n+      Rib::ItemType::Function,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (locus);\n@@ -343,7 +349,8 @@ class ResolveStmt : public ResolverBase\n     for (auto &param : function.get_function_params ())\n       {\n \tResolveType::go (param.get_type ().get ());\n-\tPatternDeclaration::go (param.get_pattern ().get ());\n+\tPatternDeclaration::go (param.get_pattern ().get (),\n+\t\t\t\tRib::ItemType::Param);\n       }\n \n     // resolve the function body"}, {"sha": "d751318ee54a344c6624de147e6fea7427592d86", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -57,6 +57,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, module.get_node_id (), module.get_locus (), false,\n+      Rib::ItemType::Module,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (module.get_locus ());\n \tr.add_range (locus);\n@@ -85,6 +86,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, alias.get_node_id (), alias.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (alias.get_locus ());\n \tr.add_range (locus);\n@@ -105,6 +107,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (struct_decl.get_locus ());\n \tr.add_range (locus);\n@@ -125,6 +128,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, enum_decl.get_node_id (), enum_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (enum_decl.get_locus ());\n \tr.add_range (locus);\n@@ -147,7 +151,7 @@ class ResolveTopLevel : public ResolverBase\n     auto cpath = canonical_prefix.append (decl);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -165,7 +169,7 @@ class ResolveTopLevel : public ResolverBase\n     auto cpath = canonical_prefix.append (decl);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -183,7 +187,7 @@ class ResolveTopLevel : public ResolverBase\n     auto cpath = canonical_prefix.append (decl);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -201,7 +205,7 @@ class ResolveTopLevel : public ResolverBase\n     auto cpath = canonical_prefix.append (decl);\n \n     resolver->get_type_scope ().insert (\n-      path, item.get_node_id (), item.get_locus (), false,\n+      path, item.get_node_id (), item.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (item.get_locus ());\n \tr.add_range (locus);\n@@ -220,6 +224,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (struct_decl.get_locus ());\n \tr.add_range (locus);\n@@ -240,6 +245,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, union_decl.get_node_id (), union_decl.get_locus (), false,\n+      Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (union_decl.get_locus ());\n \tr.add_range (locus);\n@@ -259,7 +265,7 @@ class ResolveTopLevel : public ResolverBase\n     auto cpath = canonical_prefix.append (decl);\n \n     resolver->get_name_scope ().insert (\n-      path, var.get_node_id (), var.get_locus (), false,\n+      path, var.get_node_id (), var.get_locus (), false, Rib::ItemType::Static,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (var.get_locus ());\n \tr.add_range (locus);\n@@ -280,6 +286,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, constant.get_node_id (), constant.get_locus (), false,\n+      Rib::ItemType::Const,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (constant.get_locus ());\n \tr.add_range (locus);\n@@ -300,6 +307,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,\n+      Rib::ItemType::Function,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (locus);\n@@ -343,6 +351,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_name_scope ().insert (\n       impl_prefix, impl_block.get_node_id (), impl_block.get_locus (), false,\n+      Rib::ItemType::TraitImpl,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (impl_block.get_locus ());\n \tr.add_range (locus);\n@@ -362,6 +371,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       path, trait.get_node_id (), trait.get_locus (), false,\n+      Rib::ItemType::Trait,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (trait.get_locus ());\n \tr.add_range (locus);\n@@ -437,6 +447,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->get_type_scope ().insert (\n       decl, resolved_crate, extern_crate.get_locus (), false,\n+      Rib::ItemType::ExternCrate,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (extern_crate.get_locus ());\n \tr.add_range (locus);"}, {"sha": "bb1178362fbeb4d658563cdd7e19763e053d0149", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -177,7 +177,7 @@ class ResolveGenericParam : public ResolverBase\n     auto seg = CanonicalPath::new_seg (param.get_node_id (),\n \t\t\t\t       param.get_type_representation ());\n     resolver->get_type_scope ().insert (\n-      seg, param.get_node_id (), param.get_locus (), false,\n+      seg, param.get_node_id (), param.get_locus (), false, Rib::ItemType::Type,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \trust_error_at (param.get_locus (),\n \t\t       \"generic param redefined multiple times\");"}, {"sha": "cf3028ef271775b4b45a841ae8abb232c1b2b7a5", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -29,7 +29,7 @@ Rib::Rib (CrateNum crateNum, NodeId node_id)\n void\n Rib::insert_name (\n   const CanonicalPath &path, NodeId id, Location locus, bool shadow,\n-\n+  ItemType type,\n   std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n {\n   auto it = path_mappings.find (path);\n@@ -49,6 +49,7 @@ Rib::insert_name (\n   reverse_path_mappings.insert ({id, path});\n   decls_within_rib.insert ({id, locus});\n   references[id] = {};\n+  decl_type_mappings.insert ({id, type});\n }\n \n bool\n@@ -105,6 +106,17 @@ Rib::decl_was_declared_here (NodeId def) const\n   return false;\n }\n \n+bool\n+Rib::lookup_decl_type (NodeId def, ItemType *type) const\n+{\n+  auto it = decl_type_mappings.find (def);\n+  if (it == decl_type_mappings.end ())\n+    return false;\n+\n+  *type = it->second;\n+  return true;\n+}\n+\n void\n Rib::debug () const\n {\n@@ -128,15 +140,17 @@ Scope::Scope (CrateNum crate_num) : crate_num (crate_num) {}\n void\n Scope::insert (\n   const CanonicalPath &ident, NodeId id, Location locus, bool shadow,\n+  Rib::ItemType type,\n   std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n {\n-  peek ()->insert_name (ident, id, locus, shadow, dup_cb);\n+  peek ()->insert_name (ident, id, locus, shadow, type, dup_cb);\n }\n \n void\n-Scope::insert (const CanonicalPath &ident, NodeId id, Location locus)\n+Scope::insert (const CanonicalPath &ident, NodeId id, Location locus,\n+\t       Rib::ItemType type)\n {\n-  peek ()->insert_name (ident, id, locus, true,\n+  peek ()->insert_name (ident, id, locus, true, type,\n \t\t\t[] (const CanonicalPath &, NodeId, Location) -> void {\n \t\t\t});\n }\n@@ -321,6 +335,7 @@ Resolver::insert_builtin_types (Rib *r)\n \t\t\t\t  builtin->as_string ());\n       r->insert_name (builtin_path, builtin->get_node_id (),\n \t\t      Linemap::predeclared_location (), false,\n+\t\t      Rib::ItemType::Type,\n \t\t      [] (const CanonicalPath &, NodeId, Location) -> void {});\n     }\n }"}, {"sha": "54d59544b1dd68d54b2b8fdd897ed821c213caef", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4659c5e405771dc8c83568b30efefc77a2031/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=32a4659c5e405771dc8c83568b30efefc77a2031", "patch": "@@ -30,6 +30,24 @@ namespace Resolver {\n class Rib\n {\n public:\n+  enum ItemType\n+  {\n+    Var,\n+    Param,\n+    Function,\n+    Type,\n+    Module,\n+    Static,\n+    Const,\n+    Trait,\n+    Impl,\n+    TraitImpl,\n+    ExternCrate,\n+    MacroDecl,\n+    Label,\n+    Unknown\n+  };\n+\n   // FIXME\n   // Rust uses local_def_ids assigned by def_collector on the AST. Consider\n   // moving to a local-def-id\n@@ -38,6 +56,7 @@ class Rib\n   // this takes the relative paths of items within a compilation unit for lookup\n   void insert_name (\n     const CanonicalPath &path, NodeId id, Location locus, bool shadow,\n+    ItemType type,\n     std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb);\n \n   bool lookup_canonical_path (const NodeId &id, CanonicalPath *ident);\n@@ -46,6 +65,7 @@ class Rib\n   void append_reference_for_def (NodeId def, NodeId ref);\n   bool have_references_for_node (NodeId def) const;\n   bool decl_was_declared_here (NodeId def) const;\n+  bool lookup_decl_type (NodeId def, ItemType *type) const;\n   void debug () const;\n   std::string debug_str () const;\n \n@@ -60,6 +80,7 @@ class Rib\n   std::map<NodeId, CanonicalPath> reverse_path_mappings;\n   std::map<NodeId, Location> decls_within_rib;\n   std::map<NodeId, std::set<NodeId>> references;\n+  std::map<NodeId, ItemType> decl_type_mappings;\n };\n \n class Scope\n@@ -69,9 +90,11 @@ class Scope\n \n   void\n   insert (const CanonicalPath &ident, NodeId id, Location locus, bool shadow,\n+\t  Rib::ItemType type,\n \t  std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb);\n \n-  void insert (const CanonicalPath &ident, NodeId id, Location locus);\n+  void insert (const CanonicalPath &ident, NodeId id, Location locus,\n+\t       Rib::ItemType type = Rib::ItemType::Unknown);\n   bool lookup (const CanonicalPath &ident, NodeId *id);\n \n   void iterate (std::function<bool (Rib *)> cb);"}]}