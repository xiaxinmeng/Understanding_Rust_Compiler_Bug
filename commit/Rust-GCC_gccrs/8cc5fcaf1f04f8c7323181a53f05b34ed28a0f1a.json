{"sha": "8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjNWZjYWYxZjA0ZjhjNzMyMzE4MWE1M2YwNWIzNGVkMjhhMGYxYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-12T10:09:57Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-12T10:09:57Z"}, "message": "Remove last leftover usage of params* files.\n\n2019-11-12  Martin Liska  <mliska@suse.cz>\n\n\t* common.opt: Remove param_values.\n\t* config/i386/i386-options.c (ix86_valid_target_attribute_p):\n\tRemove finalize_options_struct.\n\t* gcc.c (driver::decode_argv): Do not call global_init_params\n\tand finish_params.\n\t(driver::finalize): Do not call params_c_finalize\n\tand finalize_options_struct.\n\t* opt-suggestions.c (option_proposer::get_completions): Remove\n\tspecial casing of params.\n\t(option_proposer::find_param_completions): Remove.\n\t(test_completion_partial_match): Update expected output.\n\t* opt-suggestions.h: Remove find_param_completions.\n\t* opts-common.c (add_misspelling_candidates): Add\n\t--param with a space.\n\t* opts.c (handle_param): Remove.\n\t(init_options_struct):. Remove init_options_struct and\n\tsimilar calls.\n\t(finalize_options_struct): Remove.\n\t(common_handle_option): Use SET_OPTION_IF_UNSET.\n\t* opts.h (finalize_options_struct): Remove.\n\t* toplev.c (general_init): Do not call global_init_params.\n\t(toplev::finalize): Do not call params_c_finalize and\n\tfinalize_options_struct.\n\nFrom-SVN: r278087", "tree": {"sha": "87cfecfb1f2f7d58eb7d6ac38bb7c188f9feb367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87cfecfb1f2f7d58eb7d6ac38bb7c188f9feb367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c29cac4a8cc840a0a597313147a7e0df0064c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c29cac4a8cc840a0a597313147a7e0df0064c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c29cac4a8cc840a0a597313147a7e0df0064c54"}], "stats": {"total": 193, "additions": 53, "deletions": 140}, "files": [{"sha": "1be218cbf5c4a95adebb9f45420ab4e4f3caf19e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -1,3 +1,29 @@\n+2019-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Remove param_values.\n+\t* config/i386/i386-options.c (ix86_valid_target_attribute_p):\n+\tRemove finalize_options_struct.\n+\t* gcc.c (driver::decode_argv): Do not call global_init_params\n+\tand finish_params.\n+\t(driver::finalize): Do not call params_c_finalize\n+\tand finalize_options_struct.\n+\t* opt-suggestions.c (option_proposer::get_completions): Remove\n+\tspecial casing of params.\n+\t(option_proposer::find_param_completions): Remove.\n+\t(test_completion_partial_match): Update expected output.\n+\t* opt-suggestions.h: Remove find_param_completions.\n+\t* opts-common.c (add_misspelling_candidates): Add\n+\t--param with a space.\n+\t* opts.c (handle_param): Remove.\n+\t(init_options_struct):. Remove init_options_struct and\n+\tsimilar calls.\n+\t(finalize_options_struct): Remove.\n+\t(common_handle_option): Use SET_OPTION_IF_UNSET.\n+\t* opts.h (finalize_options_struct): Remove.\n+\t* toplev.c (general_init): Do not call global_init_params.\n+\t(toplev::finalize): Do not call params_c_finalize and\n+\tfinalize_options_struct.\n+\n 2019-11-12  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: Remove PARAMS_H and params.list"}, {"sha": "26b6c2ce9e14e2574710b0830c664c23d46b5728", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -63,9 +63,6 @@ int flag_complex_method = 1\n Variable\n bool flag_warn_unused_result = false\n \n-Variable\n-int *param_values\n-\n ; Nonzero if we should write GIMPLE bytecode for link-time optimization.\n Variable\n int flag_generate_lto"}, {"sha": "c909f8ea1ed48b86e124795d0321611aee4ebe0b", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -1340,8 +1340,6 @@ ix86_valid_target_attribute_p (tree fndecl,\n \tDECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) = new_optimize;\n     }\n \n-  finalize_options_struct (&func_options);\n-\n   return ret;\n }\n "}, {"sha": "539ded01ce6af034f79b34b8eb21b4d5dbc611fb", "filename": "gcc/gcc.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -7422,10 +7422,6 @@ driver::expand_at_files (int *argc, char ***argv) const\n void\n driver::decode_argv (int argc, const char **argv)\n {\n-  /* Register the language-independent parameters.  */\n-  global_init_params ();\n-  finish_params ();\n-\n   init_opts_obstack ();\n   init_options_struct (&global_options, &global_options_set);\n \n@@ -10113,7 +10109,6 @@ void\n driver::finalize ()\n {\n   env.restore ();\n-  params_c_finalize ();\n   diagnostic_finish (global_dc);\n \n   is_cpp_driver = 0;\n@@ -10134,9 +10129,6 @@ driver::finalize ()\n   spec_machine = DEFAULT_TARGET_MACHINE;\n   greatest_status = 1;\n \n-  finalize_options_struct (&global_options);\n-  finalize_options_struct (&global_options_set);\n-\n   obstack_free (&obstack, NULL);\n   obstack_free (&opts_obstack, NULL); /* in opts.c */\n   obstack_free (&collect_obstack, NULL);"}, {"sha": "01ce331eb0e8d46d3f2ed73e1353a7bbcfc2774a", "filename": "gcc/opt-suggestions.c", "status": "modified", "additions": 12, "deletions": 46, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopt-suggestions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopt-suggestions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-suggestions.c?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -64,32 +64,17 @@ option_proposer::get_completions (const char *option_prefix,\n \n   size_t length = strlen (option_prefix);\n \n-  /* Handle OPTION_PREFIX starting with \"-param\".  */\n-  const char *prefix = \"-param\";\n-  if (length >= strlen (prefix)\n-      && strstr (option_prefix, prefix) == option_prefix)\n-    {\n-      /* We support both '-param-xyz=123' and '-param xyz=123' */\n-      option_prefix += strlen (prefix);\n-      char separator = option_prefix[0];\n-      option_prefix++;\n-      if (separator == ' ' || separator == '=')\n-\tfind_param_completions (separator, option_prefix, results);\n-    }\n-  else\n-    {\n-      /* Lazily populate m_option_suggestions.  */\n-      if (!m_option_suggestions)\n-\tbuild_option_suggestions (option_prefix);\n-      gcc_assert (m_option_suggestions);\n+  /* Lazily populate m_option_suggestions.  */\n+  if (!m_option_suggestions)\n+    build_option_suggestions (option_prefix);\n+  gcc_assert (m_option_suggestions);\n \n-      for (unsigned i = 0; i < m_option_suggestions->length (); i++)\n-\t{\n-\t  char *candidate = (*m_option_suggestions)[i];\n-\t  if (strlen (candidate) >= length\n-\t      && strstr (candidate, option_prefix) == candidate)\n-\t    results.safe_push (concat (\"-\", candidate, NULL));\n-\t}\n+  for (unsigned i = 0; i < m_option_suggestions->length (); i++)\n+    {\n+      char *candidate = (*m_option_suggestions)[i];\n+      if (strlen (candidate) >= length\n+\t  && strstr (candidate, option_prefix) == candidate)\n+\tresults.safe_push (concat (\"-\", candidate, NULL));\n     }\n }\n \n@@ -212,25 +197,6 @@ option_proposer::build_option_suggestions (const char *prefix)\n     }\n }\n \n-/* Find parameter completions for --param format with SEPARATOR.\n-   Again, save the completions into results.  */\n-\n-void\n-option_proposer::find_param_completions (const char separator,\n-\t\t\t\t\t const char *param_prefix,\n-\t\t\t\t\t auto_string_vec &results)\n-{\n-  char separator_str[] = {separator, '\\0'};\n-  size_t length = strlen (param_prefix);\n-  for (unsigned i = 0; i < get_num_compiler_params (); ++i)\n-    {\n-      const char *candidate = compiler_params[i].option;\n-      if (strlen (candidate) >= length\n-\t  && strstr (candidate, param_prefix) == candidate)\n-\tresults.safe_push (concat (\"--param\", separator_str, candidate, NULL));\n-    }\n-}\n-\n #if CHECKING_P\n \n namespace selftest {\n@@ -400,9 +366,9 @@ test_completion_partial_match (option_proposer &proposer)\n   ASSERT_TRUE (in_completion_p (proposer, \"-fipa-icf\", \"-fipa-icf-functions\"));\n   ASSERT_TRUE (in_completion_p (proposer, \"-fipa-icf\", \"-fipa-icf\"));\n   ASSERT_TRUE (in_completion_p (proposer, \"--param=\",\n-\t\t\t\t\"--param=max-vartrack-reverse-op-size\"));\n+\t\t\t\t\"--param=max-vartrack-reverse-op-size=\"));\n   ASSERT_TRUE (in_completion_p (proposer, \"--param \",\n-\t\t\t\t\"--param max-vartrack-reverse-op-size\"));\n+\t\t\t\t\"--param max-vartrack-reverse-op-size=\"));\n \n   ASSERT_FALSE (in_completion_p (proposer, \"-fipa-icf\", \"-fipa\"));\n   ASSERT_FALSE (in_completion_p (proposer, \"-fipa-icf-functions\", \"-fipa-icf\"));"}, {"sha": "93f65bea3bbf20fa5392fb6730c31a9a6356c88d", "filename": "gcc/opt-suggestions.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopt-suggestions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopt-suggestions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-suggestions.h?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -63,11 +63,6 @@ class option_proposer\n      it's set to NULL.  */\n   void build_option_suggestions (const char *prefix);\n \n-  /* Find parameter completions for --param format with SEPARATOR.\n-     Again, save the completions into results.  */\n-  void find_param_completions (const char separator, const char *param_prefix,\n-\t\t\t       auto_string_vec &results);\n-\n private:\n   /* Cache with all suggestions.  */\n   auto_string_vec *m_option_suggestions;"}, {"sha": "51e08d4f44ca56bb97260ede53888b1f52f98893", "filename": "gcc/opts-common.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -510,6 +510,17 @@ add_misspelling_candidates (auto_vec<char *> *candidates,\n \t  candidates->safe_push (alternative);\n \t}\n     }\n+\n+  /* For all params (e.g. --param=key=value),\n+     include also '--param key=value'.  */\n+  const char *prefix = \"--param=\";\n+  if (strstr (opt_text, prefix) == opt_text)\n+    {\n+      char *param = xstrdup (opt_text + 1);\n+      gcc_assert (param[6] == '=');\n+      param[6] = ' ';\n+      candidates->safe_push (param);\n+    }\n }\n \n /* Decode the switch beginning at ARGV for the language indicated by"}, {"sha": "879b2100071a3e775cced89d2212e2aa6403cca1", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 67, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -188,9 +188,6 @@ static const char use_diagnosed_msg[] = N_(\"Uses of this option are diagnosed.\")\n \n typedef char *char_p; /* For DEF_VEC_P.  */\n \n-static void handle_param (struct gcc_options *opts,\n-\t\t\t  struct gcc_options *opts_set, location_t loc,\n-\t\t\t  const char *carg);\n static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg, struct gcc_options *opts,\n \t\t\t     struct gcc_options *opts_set,\n@@ -283,8 +280,6 @@ init_opts_obstack (void)\n void\n init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n {\n-  size_t num_params = get_num_compiler_params ();\n-\n   /* Ensure that opts_obstack has already been initialized by the time\n      that we initialize any gcc_options instances (PR jit/68446).  */\n   gcc_assert (opts_obstack.chunk_size > 0);\n@@ -294,13 +289,6 @@ init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n   if (opts_set)\n     memset (opts_set, 0, sizeof (*opts_set));\n \n-  opts->x_param_values = XNEWVEC (int, num_params);\n-\n-  if (opts_set)\n-    opts_set->x_param_values = XCNEWVEC (int, num_params);\n-\n-  init_param_values (opts->x_param_values);\n-\n   /* Initialize whether `char' is signed.  */\n   opts->x_flag_signed_char = DEFAULT_SIGNED_CHAR;\n   /* Set this to a special \"uninitialized\" value.  The actual default\n@@ -318,14 +306,6 @@ init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n   targetm_common.option_init_struct (opts);\n }\n \n-/* Release any allocations owned by OPTS.  */\n-\n-void\n-finalize_options_struct (struct gcc_options *opts)\n-{\n-  XDELETEVEC (opts->x_param_values);\n-}\n-\n /* If indicated by the optimization level LEVEL (-Os if SIZE is set,\n    -Ofast if FAST is set, -Og if DEBUG is set), apply the option DEFAULT_OPT\n    to OPTS and OPTS_SET, diagnostic context DC, location LOC, with language\n@@ -2465,10 +2445,10 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_finline_limit_:\n-      set_param_value (\"max-inline-insns-single\", value / 2,\n-\t\t       opts->x_param_values, opts_set->x_param_values);\n-      set_param_value (\"max-inline-insns-auto\", value / 2,\n-\t\t       opts->x_param_values, opts_set->x_param_values);\n+      SET_OPTION_IF_UNSET (opts, opts_set, param_max_inline_insns_single,\n+\t\t\t   value / 2);\n+      SET_OPTION_IF_UNSET (opts, opts_set, param_max_inline_insns_auto,\n+\t\t\t   value / 2);\n       break;\n \n     case OPT_finstrument_functions_exclude_function_list_:\n@@ -2836,49 +2816,6 @@ common_handle_option (struct gcc_options *opts,\n   return true;\n }\n \n-/* Handle --param NAME=VALUE.  */\n-static void\n-handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t      location_t loc, const char *carg)\n-{\n-  char *equal, *arg;\n-  int value;\n-\n-  arg = xstrdup (carg);\n-  equal = strchr (arg, '=');\n-  if (!equal)\n-    error_at (loc, \"%s: %qs arguments should be of the form NAME=VALUE\",\n-\t      arg, \"--param\");\n-  else\n-    {\n-      *equal = '\\0';\n-\n-      enum compiler_param index;\n-      if (!find_param (arg, &index))\n-\t{\n-\t  const char *suggestion = find_param_fuzzy (arg);\n-\t  if (suggestion)\n-\t    error_at (loc, \"invalid %qs name %qs; did you mean %qs?\",\n-\t\t      \"--param\", arg, suggestion);\n-\t  else\n-\t    error_at (loc, \"invalid %qs name %qs\", \"--param\", arg);\n-\t}\n-      else\n-\t{\n-\t  if (!param_string_value_p (index, equal + 1, &value))\n-\t    value = integral_argument (equal + 1);\n-\n-\t  if (value == -1)\n-\t    error_at (loc, \"invalid %qs value %qs\", \"--param\", equal + 1);\n-\t  else\n-\t    set_param_value (arg, value,\n-\t\t\t     opts->x_param_values, opts_set->x_param_values);\n-\t}\n-    }\n-\n-  free (arg);\n-}\n-\n /* Used to set the level of strict aliasing warnings in OPTS,\n    when no level is specified (i.e., when -Wstrict-aliasing, and not\n    -Wstrict-aliasing=level was given)."}, {"sha": "b6173986b2016d7e45d2356db387bddb8ef6543c", "filename": "gcc/opts.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -345,7 +345,6 @@ extern void init_options_once (void);\n extern void init_options_struct (struct gcc_options *opts,\n \t\t\t\t struct gcc_options *opts_set);\n extern void init_opts_obstack (void);\n-extern void finalize_options_struct (struct gcc_options *opts);\n extern void decode_cmdline_options_to_array_default_mask (unsigned int argc,\n \t\t\t\t\t\t\t  const char **argv, \n \t\t\t\t\t\t\t  struct cl_decoded_option **decoded_options,"}, {"sha": "d4583bac66cb0663cd8bdd717d1db080137397f3", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=8cc5fcaf1f04f8c7323181a53f05b34ed28a0f1a", "patch": "@@ -1240,9 +1240,6 @@ general_init (const char *argv0, bool init_signals)\n   /* Initialize register usage now so switches may override.  */\n   init_reg_sets ();\n \n-  /* Register the language-independent parameters.  */\n-  global_init_params ();\n-\n   /* This must be done after global_init_params but before argument\n      processing.  */\n   init_ggc_heuristics ();\n@@ -1262,7 +1259,6 @@ general_init (const char *argv0, bool init_signals)\n \n   statistics_early_init ();\n   debuginfo_early_init ();\n-  finish_params ();\n }\n \n /* Return true if the current target supports -fsection-anchors.  */\n@@ -2468,10 +2464,6 @@ toplev::finalize (void)\n   gcse_c_finalize ();\n   ipa_cp_c_finalize ();\n   ira_costs_c_finalize ();\n-  params_c_finalize ();\n-\n-  finalize_options_struct (&global_options);\n-  finalize_options_struct (&global_options_set);\n \n   /* save_decoded_options uses opts_obstack, so these must\n      be cleaned up together.  */"}]}