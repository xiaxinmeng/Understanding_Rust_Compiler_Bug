{"sha": "3d8d5ddb539a5254c7ef83414377f4c74c7701d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q4ZDVkZGI1MzlhNTI1NGM3ZWY4MzQxNDM3N2Y0Yzc0Yzc3MDFkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-28T21:40:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-28T21:40:54Z"}, "message": "c++: Try to complete decomp types [PR95328]\n\nTwo years ago Paolo has added the\n  else if (processing_template_decl && !COMPLETE_TYPE_P (type))\n    pedwarn (...);\nlines into cp_finish_decomp.  For type dependent decl we punt much earlier,\nbut even for types which aren't type dependent COMPLETE_TYPE_P might be\nfalse as this testcase shows, so this patch tries to complete_type first\n(the reason for writing it that way is that it is then followed by another\nelse if and if complete_type returns error_mark_node, we shouldn't report\nanything, as a bug should have been reported already.\n\n2020-05-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/95328\n\t* decl.c (cp_finish_decomp): Call complete_type before checking\n\tCOMPLETE_TYPE_P.\n\n\t* g++.dg/cpp1z/decomp53.C: New test.", "tree": {"sha": "cfe6edc391bc0ab1d07f1308c16b965e39a59111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe6edc391bc0ab1d07f1308c16b965e39a59111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8d5ddb539a5254c7ef83414377f4c74c7701d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8d5ddb539a5254c7ef83414377f4c74c7701d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8d5ddb539a5254c7ef83414377f4c74c7701d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8d5ddb539a5254c7ef83414377f4c74c7701d4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c715e6a2990cfb6c15acc1ee14219523534ec69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c715e6a2990cfb6c15acc1ee14219523534ec69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c715e6a2990cfb6c15acc1ee14219523534ec69"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "b8bd09b37e686e90686248da84aa613befa75f19", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8d5ddb539a5254c7ef83414377f4c74c7701d4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8d5ddb539a5254c7ef83414377f4c74c7701d4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3d8d5ddb539a5254c7ef83414377f4c74c7701d4", "patch": "@@ -8400,6 +8400,8 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n       error_at (loc, \"cannot decompose lambda closure type %qT\", type);\n       goto error_out;\n     }\n+  else if (processing_template_decl && complete_type (type) == error_mark_node)\n+    goto error_out;\n   else if (processing_template_decl && !COMPLETE_TYPE_P (type))\n     pedwarn (loc, 0, \"structured binding refers to incomplete class type %qT\",\n \t     type);"}, {"sha": "b34e6ac7250fa8505baa5f0f19766f8b2b9987d5", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp53.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8d5ddb539a5254c7ef83414377f4c74c7701d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8d5ddb539a5254c7ef83414377f4c74c7701d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp53.C?ref=3d8d5ddb539a5254c7ef83414377f4c74c7701d4", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/95328\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+template <typename T>\n+struct S\n+{\n+  int a, b;\n+};\n+\n+template <typename T>\n+void\n+foo ()\n+{\n+  auto [a, b] = S<int>();\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+}\n+\n+int\n+main ()\n+{\n+  foo<int> ();\n+}"}]}