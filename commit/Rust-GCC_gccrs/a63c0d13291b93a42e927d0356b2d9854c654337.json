{"sha": "a63c0d13291b93a42e927d0356b2d9854c654337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYzYzBkMTMyOTFiOTNhNDJlOTI3ZDAzNTZiMmQ5ODU0YzY1NDMzNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2004-11-02T21:31:20Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-11-02T21:31:20Z"}, "message": "fold-const.c (fold): Reassociate also (x - mult) + mult and (mult - x) + mult.\n\n\t* fold-const.c (fold): Reassociate also (x - mult) + mult and\n\t(mult - x) + mult.  Cast operands of expression after applying\n\tdistributive law to the correct types.  Apply distributive law\n\tto a * c - b * c for all non-float types.\n\nFrom-SVN: r90000", "tree": {"sha": "e48aabceb4bd08808fc31d0bf20e2e5d8949bada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e48aabceb4bd08808fc31d0bf20e2e5d8949bada"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a63c0d13291b93a42e927d0356b2d9854c654337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63c0d13291b93a42e927d0356b2d9854c654337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a63c0d13291b93a42e927d0356b2d9854c654337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63c0d13291b93a42e927d0356b2d9854c654337/comments", "author": null, "committer": null, "parents": [{"sha": "de253ca48a960dd0d3ce5271c080afa3db69d7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de253ca48a960dd0d3ce5271c080afa3db69d7c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de253ca48a960dd0d3ce5271c080afa3db69d7c0"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "f1234bacec6a7ebed651b67def7aaac38d098578", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63c0d13291b93a42e927d0356b2d9854c654337/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63c0d13291b93a42e927d0356b2d9854c654337/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a63c0d13291b93a42e927d0356b2d9854c654337", "patch": "@@ -1,3 +1,10 @@\n+2004-11-02  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* fold-const.c (fold): Reassociate also (x - mult) + mult and\n+\t(mult - x) + mult.  Cast operands of expression after applying\n+\tdistributive law to the correct types.  Apply distributive law\n+\tto a * c - b * c for all non-float types.\n+\n 2004-11-02  Geoffrey Keating  <geoffk@apple.com>\n \n \t* configure.ac: Don't clear STMP_FIXINC or STMP_FIXPROTO just"}, {"sha": "01054d192bd9821400ef6347c81ea23e2118f24f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a63c0d13291b93a42e927d0356b2d9854c654337/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a63c0d13291b93a42e927d0356b2d9854c654337/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a63c0d13291b93a42e927d0356b2d9854c654337", "patch": "@@ -6586,36 +6586,41 @@ fold (tree expr)\n \t  /* Reassociate (plus (plus (mult) (foo)) (mult)) as\n \t     (plus (plus (mult) (mult)) (foo)) so that we can\n \t     take advantage of the factoring cases below.  */\n-\t  if ((TREE_CODE (arg0) == PLUS_EXPR\n+\t  if (((TREE_CODE (arg0) == PLUS_EXPR\n+\t\t|| TREE_CODE (arg0) == MINUS_EXPR)\n \t       && TREE_CODE (arg1) == MULT_EXPR)\n-\t      || (TREE_CODE (arg1) == PLUS_EXPR\n+\t      || ((TREE_CODE (arg1) == PLUS_EXPR\n+\t\t   || TREE_CODE (arg1) == MINUS_EXPR)\n \t\t  && TREE_CODE (arg0) == MULT_EXPR))\n \t    {\n \t      tree parg0, parg1, parg, marg;\n+\t      enum tree_code pcode;\n \n-\t      if (TREE_CODE (arg0) == PLUS_EXPR)\n+\t      if (TREE_CODE (arg1) == MULT_EXPR)\n \t\tparg = arg0, marg = arg1;\n \t      else\n \t\tparg = arg1, marg = arg0;\n+\t      pcode = TREE_CODE (parg);\n \t      parg0 = TREE_OPERAND (parg, 0);\n \t      parg1 = TREE_OPERAND (parg, 1);\n \t      STRIP_NOPS (parg0);\n \t      STRIP_NOPS (parg1);\n \n \t      if (TREE_CODE (parg0) == MULT_EXPR\n \t\t  && TREE_CODE (parg1) != MULT_EXPR)\n-\t\treturn fold (build2 (PLUS_EXPR, type,\n+\t\treturn fold (build2 (pcode, type,\n \t\t\t\t     fold (build2 (PLUS_EXPR, type,\n \t\t\t\t\t\t   fold_convert (type, parg0),\n \t\t\t\t\t\t   fold_convert (type, marg))),\n \t\t\t\t     fold_convert (type, parg1)));\n \t      if (TREE_CODE (parg0) != MULT_EXPR\n \t\t  && TREE_CODE (parg1) == MULT_EXPR)\n \t\treturn fold (build2 (PLUS_EXPR, type,\n-\t\t\t\t     fold (build2 (PLUS_EXPR, type,\n-\t\t\t\t\t\t   fold_convert (type, parg1),\n-\t\t\t\t\t\t   fold_convert (type, marg))),\n-\t\t\t\t     fold_convert (type, parg0)));\n+\t\t\t\t     fold_convert (type, parg0),\n+\t\t\t\t     fold (build2 (pcode, type,\n+\t\t\t\t\t\t   fold_convert (type, marg),\n+\t\t\t\t\t\t   fold_convert (type,\n+\t\t\t\t\t\t\t\t parg1)))));\n \t    }\n \n \t  if (TREE_CODE (arg0) == MULT_EXPR && TREE_CODE (arg1) == MULT_EXPR)\n@@ -6677,7 +6682,8 @@ fold (tree expr)\n \t      if (same)\n \t\treturn fold (build2 (MULT_EXPR, type,\n \t\t\t\t     fold (build2 (PLUS_EXPR, type,\n-\t\t\t\t\t\t   alt0, alt1)),\n+\t\t\t\t\t\t   fold_convert (type, alt0),\n+\t\t\t\t\t\t   fold_convert (type, alt1))),\n \t\t\t\t     same));\n \t    }\n \n@@ -7084,7 +7090,7 @@ fold (tree expr)\n \n       if (TREE_CODE (arg0) == MULT_EXPR\n \t  && TREE_CODE (arg1) == MULT_EXPR\n-\t  && (INTEGRAL_TYPE_P (type) || flag_unsafe_math_optimizations))\n+\t  && (!FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations))\n \t{\n           /* (A * C) - (B * C) -> (A-B) * C.  */\n \t  if (operand_equal_p (TREE_OPERAND (arg0, 1),"}]}