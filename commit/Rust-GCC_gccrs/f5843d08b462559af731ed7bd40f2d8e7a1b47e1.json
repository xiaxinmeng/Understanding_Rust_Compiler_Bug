{"sha": "f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4NDNkMDhiNDYyNTU5YWY3MzFlZDdiZDQwZjJkOGU3YTFiNDdlMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-16T14:27:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-16T14:27:51Z"}, "message": "re PR middle-end/54146 (Very slow compile with attribute((flatten)))\n\n2012-08-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/54146\n\t* tree-ssa-loop-niter.c (find_loop_niter_by_eval): Free the\n\texit vector.\n\t* ipa-pure-const.c (analyze_function): Use FOR_EACH_LOOP_BREAK.\n\t* cfgloop.h (FOR_EACH_LOOP_BREAK): Fix.\n\t* tree-ssa-structalias.c (handle_lhs_call): Properly free rhsc.\n\t* tree-into-ssa.c (get_ssa_name_ann): Allocate info only when\n\tneeded.\n\t* tree-ssa-loop-im.c (analyze_memory_references): Adjust.\n\t(tree_ssa_lim_finalize): Free all mem_refs.\n\t* tree-ssa-sccvn.c (extract_and_process_scc_for_name): Free\n\tscc when bailing out.\n\t* modulo-sched.c (sms_schedule): Use FOR_EACH_LOOP_BREAK.\n\t* ira-build.c (loop_with_complex_edge_p): Free loop exit vector.\n\t* graphite-sese-to-poly.c (scop_ivs_can_be_represented): Use\n\tFOR_EACH_LOOP_BREAK.\n\nFrom-SVN: r190445", "tree": {"sha": "376f51f58149bf3a9c71811ae304381e607e6ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/376f51f58149bf3a9c71811ae304381e607e6ff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c8036f70a641b1821290e0c7f35c5a911a4a77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8036f70a641b1821290e0c7f35c5a911a4a77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8036f70a641b1821290e0c7f35c5a911a4a77a"}], "stats": {"total": 93, "additions": 66, "deletions": 27}, "files": [{"sha": "266710f83234659050587cff804dd774025b6885", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -1,3 +1,22 @@\n+2012-08-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/54146\n+\t* tree-ssa-loop-niter.c (find_loop_niter_by_eval): Free the\n+\texit vector.\n+\t* ipa-pure-const.c (analyze_function): Use FOR_EACH_LOOP_BREAK.\n+\t* cfgloop.h (FOR_EACH_LOOP_BREAK): Fix.\n+\t* tree-ssa-structalias.c (handle_lhs_call): Properly free rhsc.\n+\t* tree-into-ssa.c (get_ssa_name_ann): Allocate info only when\n+\tneeded.\n+\t* tree-ssa-loop-im.c (analyze_memory_references): Adjust.\n+\t(tree_ssa_lim_finalize): Free all mem_refs.\n+\t* tree-ssa-sccvn.c (extract_and_process_scc_for_name): Free\n+\tscc when bailing out.\n+\t* modulo-sched.c (sms_schedule): Use FOR_EACH_LOOP_BREAK.\n+\t* ira-build.c (loop_with_complex_edge_p): Free loop exit vector.\n+\t* graphite-sese-to-poly.c (scop_ivs_can_be_represented): Use\n+\tFOR_EACH_LOOP_BREAK.\n+\n 2012-08-16  Diego Novillo  <dnovillo@google.com>\n \n \tPR bootstrap/54281"}, {"sha": "ed6ef3d5c87e09de2c000ba869c1cb094d864229", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -649,7 +649,7 @@ fel_init (loop_iterator *li, loop_p *loop, unsigned flags)\n \n #define FOR_EACH_LOOP_BREAK(LI) \\\n   { \\\n-    VEC_free (int, heap, (LI)->to_visit); \\\n+    VEC_free (int, heap, (LI).to_visit); \\\n     break; \\\n   }\n "}, {"sha": "ded38f5af1a1aea7a244827abcf162cbbb6302f1", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -3122,6 +3122,7 @@ scop_ivs_can_be_represented (scop_p scop)\n   loop_iterator li;\n   loop_p loop;\n   gimple_stmt_iterator psi;\n+  bool result = true;\n \n   FOR_EACH_LOOP (li, loop, 0)\n     {\n@@ -3137,11 +3138,16 @@ scop_ivs_can_be_represented (scop_p scop)\n \n \t  if (TYPE_UNSIGNED (type)\n \t      && TYPE_PRECISION (type) >= TYPE_PRECISION (long_long_integer_type_node))\n-\t    return false;\n+\t    {\n+\t      result = false;\n+\t      break;\n+\t    }\n \t}\n+      if (!result)\n+\tFOR_EACH_LOOP_BREAK (li);\n     }\n \n-  return true;\n+  return result;\n }\n \n /* Builds the polyhedral representation for a SESE region.  */"}, {"sha": "b6810a89bcb73e8ef06a8801452c5816abf08f7a", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -802,7 +802,7 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n \t\t    if (dump_file)\n \t\t      fprintf (dump_file, \"    can not prove finiteness of loop %i\\n\", loop->num);\n \t\t    l->looping =true;\n-\t\t    break;\n+\t\t    FOR_EACH_LOOP_BREAK (li);\n \t\t  }\n \t      scev_finalize ();\n \t    }"}, {"sha": "dba1d467ad7d8db35639e6b620e0d63a12d49f80", "filename": "gcc/ira-build.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -1846,15 +1846,21 @@ loop_with_complex_edge_p (struct loop *loop)\n   edge_iterator ei;\n   edge e;\n   VEC (edge, heap) *edges;\n+  bool res;\n \n   FOR_EACH_EDGE (e, ei, loop->header->preds)\n     if (e->flags & EDGE_EH)\n       return true;\n   edges = get_loop_exit_edges (loop);\n+  res = false;\n   FOR_EACH_VEC_ELT (edge, edges, i, e)\n     if (e->flags & EDGE_COMPLEX)\n-      return true;\n-  return false;\n+      {\n+\tres = true;\n+\tbreak;\n+      }\n+  VEC_free (edge, heap, edges);\n+  return res;\n }\n #endif\n "}, {"sha": "59f8978be73f0bab3c9e1db9da8200beb7872ec1", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -1413,7 +1413,7 @@ sms_schedule (void)\n           if (dump_file)\n             fprintf (dump_file, \"SMS reached max limit... \\n\");\n \n-          break;\n+\t  FOR_EACH_LOOP_BREAK (li);\n         }\n \n       if (dump_file)"}, {"sha": "a3c31799d02497a3425d7b4c21e5b94c98e5195c", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -312,22 +312,21 @@ get_ssa_name_ann (tree name)\n   unsigned len = VEC_length (ssa_name_info_p, info_for_ssa_name);\n   struct ssa_name_info *info;\n \n+  /* Re-allocate the vector at most once per update/into-SSA.  */\n   if (ver >= len)\n-    {\n-      unsigned old_len = VEC_length (ssa_name_info_p, info_for_ssa_name);\n-      unsigned new_len = num_ssa_names;\n+    VEC_safe_grow_cleared (ssa_name_info_p, heap,\n+\t\t\t   info_for_ssa_name, num_ssa_names);\n \n-      VEC_reserve (ssa_name_info_p, heap, info_for_ssa_name,\n-\t\t   new_len - old_len);\n-      while (len++ < new_len)\n-\t{\n-\t  struct ssa_name_info *info = XCNEW (struct ssa_name_info);\n-\t  info->age = current_info_for_ssa_name_age;\n-\t  VEC_quick_push (ssa_name_info_p, info_for_ssa_name, info);\n-\t}\n+  /* But allocate infos lazily.  */\n+  info = VEC_index (ssa_name_info_p, info_for_ssa_name, ver);\n+  if (!info)\n+    {\n+      info = XCNEW (struct ssa_name_info);\n+      info->age = current_info_for_ssa_name_age;\n+      info->info.need_phi_state = NEED_PHI_STATE_UNKNOWN;\n+      VEC_replace (ssa_name_info_p, info_for_ssa_name, ver, info);\n     }\n \n-  info = VEC_index (ssa_name_info_p, info_for_ssa_name, ver);\n   if (info->age < current_info_for_ssa_name_age)\n     {\n       info->age = current_info_for_ssa_name_age;"}, {"sha": "caffe8250f19c9047a8867f43606834a0e66f691", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -1486,9 +1486,8 @@ free_mem_ref_locs (mem_ref_locs_p accs)\n /* A function to free the mem_ref object OBJ.  */\n \n static void\n-memref_free (void *obj)\n+memref_free (struct mem_ref *mem)\n {\n-  struct mem_ref *const mem = (struct mem_ref *) obj;\n   unsigned i;\n   mem_ref_locs_p accs;\n \n@@ -1728,8 +1727,7 @@ analyze_memory_references (void)\n   unsigned i;\n   bitmap empty;\n \n-  memory_accesses.refs\n-\t  = htab_create (100, memref_hash, memref_eq, memref_free);\n+  memory_accesses.refs = htab_create (100, memref_hash, memref_eq, NULL);\n   memory_accesses.refs_list = NULL;\n   memory_accesses.refs_in_loop = VEC_alloc (bitmap, heap,\n \t\t\t\t\t    number_of_loops ());\n@@ -2617,6 +2615,7 @@ tree_ssa_lim_finalize (void)\n   basic_block bb;\n   unsigned i;\n   bitmap b;\n+  mem_ref_p ref;\n \n   free_aux_for_edges ();\n \n@@ -2625,9 +2624,12 @@ tree_ssa_lim_finalize (void)\n \n   pointer_map_destroy (lim_aux_data_map);\n \n-  VEC_free (mem_ref_p, heap, memory_accesses.refs_list);\n   htab_delete (memory_accesses.refs);\n \n+  FOR_EACH_VEC_ELT (mem_ref_p, memory_accesses.refs_list, i, ref)\n+    memref_free (ref);\n+  VEC_free (mem_ref_p, heap, memory_accesses.refs_list);\n+\n   FOR_EACH_VEC_ELT (bitmap, memory_accesses.refs_in_loop, i, b)\n     BITMAP_FREE (b);\n   VEC_free (bitmap, heap, memory_accesses.refs_in_loop);"}, {"sha": "38b47b0b656a6cb39f043909ad400fe9b47a2bc9", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -2286,7 +2286,10 @@ find_loop_niter_by_eval (struct loop *loop, edge *exit)\n   /* Loops with multiple exits are expensive to handle and less important.  */\n   if (!flag_expensive_optimizations\n       && VEC_length (edge, exits) > 1)\n-    return chrec_dont_know;\n+    {\n+      VEC_free (edge, heap, exits);\n+      return chrec_dont_know;\n+    }\n \n   FOR_EACH_VEC_ELT (edge, exits, i, ex)\n     {"}, {"sha": "216d3f647e9cc7f954b619094e86d56dff4ef728", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -3665,6 +3665,8 @@ extract_and_process_scc_for_name (tree name)\n \tfprintf (dump_file, \"WARNING: Giving up with SCCVN due to \"\n \t\t \"SCC size %u exceeding %u\\n\", VEC_length (tree, scc),\n \t\t (unsigned)PARAM_VALUE (PARAM_SCCVN_MAX_SCC_SIZE));\n+\n+      VEC_free (tree, heap, scc);\n       return false;\n     }\n "}, {"sha": "609ee2c56b3a5d06aaac59878e163ecccc623743", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5843d08b462559af731ed7bd40f2d8e7a1b47e1/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=f5843d08b462559af731ed7bd40f2d8e7a1b47e1", "patch": "@@ -3868,9 +3868,11 @@ handle_lhs_call (gimple stmt, tree lhs, int flags, VEC(ce_s, heap) *rhsc,\n       tmpc.offset = 0;\n       tmpc.type = ADDRESSOF;\n       VEC_safe_push (ce_s, heap, rhsc, &tmpc);\n+      process_all_all_constraints (lhsc, rhsc);\n+      VEC_free (ce_s, heap, rhsc);\n     }\n-\n-  process_all_all_constraints (lhsc, rhsc);\n+  else\n+    process_all_all_constraints (lhsc, rhsc);\n \n   VEC_free (ce_s, heap, lhsc);\n }"}]}