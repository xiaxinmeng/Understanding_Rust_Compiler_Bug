{"sha": "17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhZDQzZGQ0YzVkYzFhMzkxNjVhNmIyMTA4ZjRlYTc5M2UxNWVlZA==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-01-17T20:43:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-17T20:43:38Z"}, "message": "Improve the C error for mismatched array string literal initialization.\n\n\t* c-typeck.c (digest_init): Revised the error message produced for\n\till-formed cases of array initialization with a string literal.\n\t(error_init): Make variadic.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r268047", "tree": {"sha": "4985f32cf568ffe5e45c2d6f029141b9362830cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4985f32cf568ffe5e45c2d6f029141b9362830cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18aa3a4078f83540903c5d1f5c4ad0e25597ab1"}], "stats": {"total": 171, "additions": 91, "deletions": 80}, "files": [{"sha": "2accb8fc9016c5b33821a297419bc2a542f172ad", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "patch": "@@ -1,3 +1,10 @@\n+2019-01-16  Tom Honermann  <tom@honermann.net>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* c-typeck.c (digest_init): Revised the error message produced for\n+\till-formed cases of array initialization with a string literal.\n+\t(error_init): Make variadic.\n+\n 2019-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.c (convert_for_assignment): Fix a comment typo."}, {"sha": "6da1f321835583c10be4ceee1da97c3878907d13", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "patch": "@@ -6339,17 +6339,21 @@ convert_to_anonymous_field (location_t location, tree type, tree rhs)\n    GMSGID identifies the message.\n    The component name is taken from the spelling stack.  */\n \n-static void\n-error_init (location_t loc, const char *gmsgid)\n+static void ATTRIBUTE_GCC_DIAG (2,0)\n+error_init (location_t loc, const char *gmsgid, ...)\n {\n   char *ofwhat;\n \n   auto_diagnostic_group d;\n \n   /* The gmsgid may be a format string with %< and %>. */\n-  error_at (loc, gmsgid);\n+  va_list ap;\n+  va_start (ap, gmsgid);\n+  bool warned = emit_diagnostic_valist (DK_ERROR, loc, -1, gmsgid, &ap);\n+  va_end (ap);\n+\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n-  if (*ofwhat)\n+  if (*ofwhat && warned)\n     inform (loc, \"(near initialization for %qs)\", ofwhat);\n }\n \n@@ -7722,6 +7726,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t{\n \t  struct c_expr expr;\n \t  tree typ2 = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (inside_init)));\n+\t  bool incompat_string_cst = false;\n \t  expr.value = inside_init;\n \t  expr.original_code = (strict_string ? STRING_CST : ERROR_MARK);\n \t  expr.original_type = NULL;\n@@ -7738,27 +7743,18 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  if (char_array)\n \t    {\n \t      if (typ2 != char_type_node)\n-\t\t{\n-\t\t  error_init (init_loc, \"char-array initialized from wide \"\n-\t\t\t      \"string\");\n-\t\t  return error_mark_node;\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      if (typ2 == char_type_node)\n-\t\t{\n-\t\t  error_init (init_loc, \"wide character array initialized \"\n-\t\t\t      \"from non-wide string\");\n-\t\t  return error_mark_node;\n-\t\t}\n-\t      else if (!comptypes(typ1, typ2))\n-\t\t{\n-\t\t  error_init (init_loc, \"wide character array initialized \"\n-\t\t\t      \"from incompatible wide string\");\n-\t\t  return error_mark_node;\n-\t\t}\n+\t\tincompat_string_cst = true;\n \t    }\n+\t  else if (!comptypes (typ1, typ2))\n+\t    incompat_string_cst = true;\n+\n+          if (incompat_string_cst)\n+            {\n+\t      error_init (init_loc, \"cannot initialize array of %qT from \"\n+\t\t\t  \"a string literal with type array of %qT\",\n+\t\t\t  typ1, typ2);\n+\t      return error_mark_node;\n+            }\n \n \t  if (TYPE_DOMAIN (type) != NULL_TREE\n \t      && TYPE_SIZE (type) != NULL_TREE"}, {"sha": "ded9bf27708f610faf7a6ca181f61861486cf581", "filename": "gcc/testsuite/gcc.dg/init-string-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-2.c?ref=17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "patch": "@@ -28,8 +28,8 @@ uchar a8[] = \"foo\"; /* { dg-error \"string constant\" \"a8\" } */\n const schar a9[] = \"foo\"; /* { dg-error \"string constant\" \"a9\" } */\n short a10[] = L\"foo\"; /* { dg-error \"string constant\" \"a10\" } */\n const sshrt a11[] = L\"foo\"; /* { dg-error \"string constant\" \"a11\" } */\n-char a12[] = L\"foo\"; /* { dg-error \"from wide string\" \"a12\" } */\n-wchar_t a13[] = \"foo\"; /* { dg-error \"non-wide string\" \"a13\" } */\n+char a12[] = L\"foo\"; /* { dg-error \"from a string literal with type array of\" \"a12\" } */\n+wchar_t a13[] = \"foo\"; /* { dg-error \"from a string literal with type array of .char.\" \"a13\" } */\n \n char b0[] = { \"foo\" };\n const signed char b2[4] = { \"foo\" };\n@@ -43,8 +43,8 @@ uchar b8[] = { \"foo\" }; /* { dg-error \"string constant\" \"b8\" } */\n const schar b9[] = { \"foo\" }; /* { dg-error \"string constant\" \"b9\" } */\n short b10[] = { L\"foo\" }; /* { dg-error \"string constant\" \"b10\" } */\n const sshrt b11[] = { L\"foo\" }; /* { dg-error \"string constant\" \"b11\" } */\n-char b12[] = { L\"foo\" }; /* { dg-error \"from wide string\" \"b12\" } */\n-wchar_t b13[] = { \"foo\" }; /* { dg-error \"non-wide string\" \"b13\" } */\n+char b12[] = { L\"foo\" }; /* { dg-error \"from a string literal with type array of\" \"b12\" } */\n+wchar_t b13[] = { \"foo\" }; /* { dg-error \"from a string literal with type array of .char.\" \"b13\" } */\n \n struct s { signed char a[10]; int b; ushrt c[10]; };\n "}, {"sha": "111585dd0252fbabd61ef79ccc589d87887edcca", "filename": "gcc/testsuite/gcc.dg/pr61096-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61096-1.c?ref=17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "patch": "@@ -19,9 +19,9 @@ struct g\n   struct f f; /* { dg-warning \"invalid use of structure with flexible array member\" } */\n };\n \n-char w1[] = L\"foo\"; /* { dg-error \"13:char-array initialized from wide string\" } */\n-__WCHAR_TYPE__ w2[] = \"foo\"; /* { dg-error \"23:wide character array initialized from non-wide string\" } */\n-__WCHAR_TYPE__ w3[] = U\"foo\"; /* { dg-error \"23:wide character array initialized from incompatible wide string\" } */\n+char w1[] = L\"foo\"; /* { dg-error \"13:array of .char. from a string literal with type array of\" } */\n+__WCHAR_TYPE__ w2[] = \"foo\"; /* { dg-error \"23:from a string literal with type array of .char.\" } */\n+__WCHAR_TYPE__ w3[] = U\"foo\"; /* { dg-error \"23:from a string literal with type array of\" } */\n schar a1[] = \"foo\"; /* { dg-error \"14:array of inappropriate type initialized from string constant\" } */\n int a2[] = (int[]) { 1 }; /* { dg-warning \"12:initializer element is not constant\" } */\n "}, {"sha": "a582e71178c84278e01c65487b548bec52010e9b", "filename": "gcc/testsuite/gcc.dg/utf-array-short-wchar.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c?ref=17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "patch": "@@ -10,33 +10,37 @@ typedef __CHAR16_TYPE__ char16_t;\n typedef __CHAR32_TYPE__ char32_t;\n \n const char\ts_0[]\t= \"ab\";\n-const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n+const char\ts_4[]\t= u8\"ab\";\n \n-const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const char16_t\ts16_1[]\t= u\"ab\";\n-const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n const char16_t\ts16_3[]\t= L\"ab\";\n+const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_6[2] = u\"ab\";\n-const char16_t\ts16_7[3] = u\"ab\";\n-const char16_t\ts16_8[4] = u\"ab\";\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_7[2] = u\"ab\";\n+const char16_t\ts16_8[3] = u\"ab\";\n+const char16_t\ts16_9[4] = u\"ab\";\n \n-const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n-const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n const char32_t\ts32_2[]\t= U\"ab\";\n-const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n+const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n-const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_7[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_8[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_8[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_9[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n \n-const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const wchar_t\tsw_1[]\t= u\"ab\";\n-const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n const wchar_t\tsw_3[]\t= L\"ab\";\n+const wchar_t\tsw_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */"}, {"sha": "74a0c0c0e051800190cde51f5b3b3d8477ec3523", "filename": "gcc/testsuite/gcc.dg/utf-array.c", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c?ref=17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "patch": "@@ -10,33 +10,37 @@ typedef __CHAR16_TYPE__\tchar16_t;\n typedef __CHAR32_TYPE__\tchar32_t;\n \n const char\ts_0[]\t= \"ab\";\n-const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n-const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .int.\" } */\n+const char\ts_4[]\t= u8\"ab\";\n \n-const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n const char16_t\ts16_1[]\t= u\"ab\";\n-const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n-const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" \"\" { target { ! wchar_t_char16_t_compatible } } } */\n-\n-const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char16_t\ts16_6[2] = u\"ab\";\n-const char16_t\ts16_7[3] = u\"ab\";\n-const char16_t\ts16_8[4] = u\"ab\";\n-\n-const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n-const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .int.\" \"\" { target { ! wchar_t_char16_t_compatible } } } */\n+const char16_t\ts16_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+\n+const char16_t\ts16_5[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_7[2] = u\"ab\";\n+const char16_t\ts16_8[3] = u\"ab\";\n+const char16_t\ts16_9[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of\" } */\n const char32_t\ts32_2[]\t= U\"ab\";\n-const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" \"\" { target { ! wchar_t_char32_t_compatible } } } */\n-\n-const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n-const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_7[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-const char32_t\ts32_8[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n-\n-const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n-const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" \"\" { target { ! wchar_t_char16_t_compatible } } } */\n-const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" \"\" { target { ! wchar_t_char32_t_compatible } } } */\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from a string literal with type array of .int.\" \"\" { target { ! wchar_t_char32_t_compatible } } } */\n+const char32_t\ts32_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+\n+const char32_t\ts32_5[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_6[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_7[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_8[3] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+const char32_t\ts32_9[4] = U\"ab\";\t/* { dg-warning \"chars is too long\" \"\" { target \"m32c-*-*\" } } */\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from a string literal with type array of\" \"\" { target { ! wchar_t_char16_t_compatible } } } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from a string literal with type array of\" \"\" { target { ! wchar_t_char32_t_compatible } } } */\n const wchar_t\tsw_3[]\t= L\"ab\";\n+const wchar_t\tsw_4[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */"}, {"sha": "d96b15dccb76303afce191707404acb6bdea782b", "filename": "gcc/testsuite/gcc.dg/utf8-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Futf8-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ad43dd4c5dc1a39165a6b2108f4ea793e15eed/gcc%2Ftestsuite%2Fgcc.dg%2Futf8-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf8-2.c?ref=17ad43dd4c5dc1a39165a6b2108f4ea793e15eed", "patch": "@@ -8,9 +8,9 @@ typedef __CHAR16_TYPE__\tchar16_t;\n typedef __CHAR32_TYPE__ char32_t;\n \n const char\ts0[]\t= u8\"ab\";\n-const char16_t\ts1[]\t= u8\"ab\";\t/* { dg-error \"from non-wide\" } */\n-const char32_t  s2[]    = u8\"ab\";\t/* { dg-error \"from non-wide\" } */\n-const wchar_t   s3[]    = u8\"ab\";\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts1[]\t= u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const char32_t  s2[]    = u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n+const wchar_t   s3[]    = u8\"ab\";\t/* { dg-error \"from a string literal with type array of .char.\" } */\n \n const char      t0[0]   = u8\"ab\";\t/* { dg-warning \"chars is too long\" } */\n const char      t1[1]   = u8\"ab\";\t/* { dg-warning \"chars is too long\" } */"}]}