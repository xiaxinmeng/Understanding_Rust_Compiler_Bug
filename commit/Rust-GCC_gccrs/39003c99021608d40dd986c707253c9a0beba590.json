{"sha": "39003c99021608d40dd986c707253c9a0beba590", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwMDNjOTkwMjE2MDhkNDBkZDk4NmM3MDcyNTNjOWEwYmViYTU5MA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-05-08T03:07:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-08T03:07:56Z"}, "message": "std_fstream.h (basic_filebuf): Change signature.\n\n\n2001-05-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/2523\n\t* include/bits/std_fstream.h (basic_filebuf): Change signature.\n\t* include/bits/fstream.tcc (basic_filebuf): Change bool argument\n\tto int_type, pass in buffer size info.\n\t* include/bits/std_streambuf.h (_M_is_indeterminate): Check for\n\tunbuffered situation.\n\t(underflow): Remove codecvt bits for the time being.\n\t* include/bits/istream.tcc (istream::sentry): Avoid sputbackc call.\n\t* include/bits/locale_facets.tcc (_M_extract): Cache dereference\n\tvalues from iterators, clean.\n\t* src/locale.cc: Ditto.\n\t* include/bits/sbuf_iter.h: Format.\n\t* src/ios.cc: Explicitly pass in buffer sizes at creation time.\n\t* testsuite/27_io/narrow_stream_objects.cc: Add tests.\n\t* testsuite/27_io/filebuf.cc: Tweaks.\n\t* testsuite/27_io/filebuf_members.cc: Tweaks.\n\nFrom-SVN: r41908", "tree": {"sha": "d813198767fbcf275b928818ba4139b68893269f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d813198767fbcf275b928818ba4139b68893269f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39003c99021608d40dd986c707253c9a0beba590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39003c99021608d40dd986c707253c9a0beba590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39003c99021608d40dd986c707253c9a0beba590", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39003c99021608d40dd986c707253c9a0beba590/comments", "author": null, "committer": null, "parents": [{"sha": "eefd41e318b5460e50daa6da5395892bda89b6d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefd41e318b5460e50daa6da5395892bda89b6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eefd41e318b5460e50daa6da5395892bda89b6d8"}], "stats": {"total": 325, "additions": 163, "deletions": 162}, "files": [{"sha": "13d9b06b9bdd54a56d11c9a0854d14603dfd6324", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -1,3 +1,22 @@\n+2001-05-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/2523\n+\t* include/bits/std_fstream.h (basic_filebuf): Change signature.\n+\t* include/bits/fstream.tcc (basic_filebuf): Change bool argument\n+\tto int_type, pass in buffer size info.\n+\t* include/bits/std_streambuf.h (_M_is_indeterminate): Check for\n+\tunbuffered situation.\n+\t(underflow): Remove codecvt bits for the time being.\n+\t* include/bits/istream.tcc (istream::sentry): Avoid sputbackc call.\n+\t* include/bits/locale_facets.tcc (_M_extract): Cache dereference\n+\tvalues from iterators, clean.\n+\t* src/locale.cc: Ditto.\n+\t* include/bits/sbuf_iter.h: Format.\n+\t* src/ios.cc: Explicitly pass in buffer sizes at creation time.\n+\t* testsuite/27_io/narrow_stream_objects.cc: Add tests.\n+\t* testsuite/27_io/filebuf.cc: Tweaks.\n+\t* testsuite/27_io/filebuf_members.cc: Tweaks.\n+\t\n 2001-05-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/os/solaris/solaris2.7/bits/os_defines.h"}, {"sha": "8b551ff921ef3cccd7106e326f2b96a40fa73ed3", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 8, "deletions": 53, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -90,7 +90,7 @@ namespace std\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n-    basic_filebuf(__c_file_type* __f, bool __s, ios_base::openmode __mode)\n+    basic_filebuf(__c_file_type* __f, ios_base::openmode __mode, int_type __s)\n     : __streambuf_type(),  _M_file(NULL), _M_state_cur(__state_type()), \n     _M_state_beg(__state_type()), _M_last_overflowed(false)\n     {\n@@ -99,8 +99,9 @@ namespace std\n       if (this->is_open())\n \t{\n \t  _M_mode = __mode;\n-\t  if (!__s)\n+\t  if (__s)\n \t    {\n+\t      _M_buf_size_opt = __s;\n \t      _M_allocate_buffers();\n \t      _M_set_indeterminate();\n \t    }\n@@ -208,7 +209,9 @@ namespace std\n     {\n       int_type __ret = traits_type::eof();\n       bool __testin = _M_mode & ios_base::in;\n-      \n+      bool __testout = _M_mode & ios_base::out;\n+\n+      // XXX Should re-enable codecvt bits disabled after 2.90.8.\n       if (__testin)\n \t{\n \t  // Check for pback madness, and if so swich back to the\n@@ -223,8 +226,6 @@ namespace std\n \n \t  bool __testget = _M_in_cur && _M_in_beg < _M_in_cur;\n \t  bool __testinit = _M_is_indeterminate();\n-\t  bool __testout = _M_mode & ios_base::out;\n-\n \t  // Sync internal and external buffers.\n \t  // NB: __testget -> __testput as _M_buf_unified here.\n \t  if (__testget)\n@@ -238,7 +239,7 @@ namespace std\n \n \t  if (__testinit || __testget)\n \t    {\n-#if 1\n+\t      // Assume buffered case, need to refill internal buffers.\n \t      streamsize __size = _M_file->xsgetn(_M_in_beg, _M_buf_size);\n \t      if (0 < __size)\n \t\t{\n@@ -252,53 +253,7 @@ namespace std\n \t\t    {\n \t\t      // XXX Something is wrong, do error checking.\n \t\t    }\n-\t\t}\n-#else\n-\t      // 2000-08-04 bkoz disable\n-\t      // Part one: (Re)fill external buf (_M_file->_IO_*) from\n-\t      // external byte sequence (whatever physical byte sink or\n-\t      // FILE actually is.)\n-\t      char_type* __conv_buf = static_cast<char_type*>(__builtin_alloca(sizeof(char_type) * _M_buf_size));\n-\t      streamsize __size = _M_file->xsgetn(__conv_buf, _M_buf_size);\n-\t      \n-\t      // Part two: (Re)fill internal buf contents from external buf.\n-\t      if (0 < __size)\n-\t\t{\n-\t\t  _M_set_determinate(__size);\n-\t\t  \n-\t\t  char* __conv_cur = __conv_buf;\n-\t\t  _M_state_beg = _M_state_cur;\n-\t\t  __res_type __r = _M_fcvt->in(_M_state_cur, \n-\t\t\t\t\t       __conv_buf,\n-\t\t\t\t\t       __conv_buf + __size,\n-\t\t\t\t\t const_cast<const char*&>(__conv_cur), \n-\t\t\t\t\t      _M_in_beg, _M_in_end, _M_in_cur);\n-\t      \n-\t\t  if (__r == codecvt_base::partial)\n-\t\t    {\n-\t\t      // XXX Retry with larger _M_buf size.\n-\t\t    }\n-\t\t  \n-\t\t  // Set pointers to internal and external buffers\n-\t\t  // correctly. . .\n-\t\t  if (__r != codecvt_base::error)\n-\t\t    {\n-\t\t      if (__testout)\n-\t\t\t_M_out_cur = _M_in_cur;\n-\t\t      __ret = traits_type::to_int_type(*_M_in_cur);\n-\t\t    }\n-\n-\t\t  // Part three: Sync the current internal buffer\n-\t\t  // position with the (now overshot) external buffer\n-\t\t  // position.  \n-\t\t  streamoff __p = _M_file->seekoff(0 - __size, ios_base::cur, \n-\t\t\t\t\t\t  ios_base::in);\n-\t\t  if (__p == -1)\n-\t\t    {\n-\t\t      // XXX Something is wrong, do error checking.\n-\t\t    }\n-\t\t}\n-#endif\t      \n+\t\t}\t   \n \t    }\n \t}\n       _M_last_overflowed = false;\t"}, {"sha": "4f3ff9688d08d7ca0595dc46d695dc229e1ce933", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -44,24 +44,16 @@ namespace std {\n \t  if (!__noskipws && (__in.flags() & ios_base::skipws))\n \t    {\t  \n \t      const __int_type __eof = traits_type::eof();\n-\t      __int_type __c = __int_type(0);\n-\t      __streambuf_type* __sb = __in.rdbuf();\n \t      const __ctype_type* __ctype = __in._M_get_fctype_ios();\n-\t      bool __testsp = true;\n-\t      bool __testeof = false;\n-\t      \n-\t      while (!__testeof && __testsp)\n-\t\t{\n-\t\t  __c = __sb->sbumpc();\n-\t\t  __testeof = __c == __eof;\n-\t\t  __testsp = __ctype->is(ctype_base::space, __c);\n-\t\t}\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n \t      \n-\t      if (!__testeof && !__testsp)\n-\t\t__sb->sputbackc(__c);\n+\t      while (__c != __eof && __ctype->is(ctype_base::space, __c))\n+\t\t__c = __sb->snextc();\n+\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n //195.  Should basic_istream::sentry's constructor ever set eofbit? \n-\t      else\n+\t      if (__c == __eof)\n \t\t__in.setstate(ios_base::eofbit);\n #endif\n \t    }"}, {"sha": "482ed9fe5fa41754dabf685e5e2f8662a5082e10", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -189,15 +189,15 @@ namespace std\n       switch (__ev)\n         {\n         case ios_base::erase_event:\n-          delete static_cast<_Format_cache<_CharT>*> (__p); __p = 0;\n+          delete static_cast<_Format_cache<_CharT>*>(__p);\n+\t  __p = 0;\n           break;\n         case ios_base::copyfmt_event:\n           // If just stored zero, the callback would get registered again.\n-          try {\n-            __p = new _Format_cache<_CharT>;\n-          }\n-          catch(...) {\n-          }\n+          try \n+\t    { __p = new _Format_cache<_CharT>; }\n+          catch(...) \n+\t    { }\n           break;\n         case ios_base::imbue_event:\n           static_cast<_Format_cache<_CharT>*>(__p)->_M_valid = false;"}, {"sha": "4d69b587f7eacd1f0dafcb980ad21db707699901", "filename": "libstdc++-v3/include/bits/sbuf_iter.h", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -46,7 +46,12 @@ namespace std\n       typedef _Traits                          traits_type;\n       typedef basic_streambuf<_CharT, _Traits> streambuf_type;\n       typedef basic_ostream<_CharT, _Traits>   ostream_type;\n-      \n+\n+    private:\n+      streambuf_type* \t_M_sbuf;\n+      bool \t\t_M_failed;\n+\n+    public:\n       inline \n       ostreambuf_iterator(ostream_type& __s) throw ()\n       : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }\n@@ -72,10 +77,6 @@ namespace std\n       bool \n       failed() const throw()\n       { return _M_failed; }\n-\n-    private:\n-      streambuf_type* \t_M_sbuf;\n-      bool \t\t_M_failed;\n     };\n \n   template<typename _CharT, typename _Traits>\n@@ -90,13 +91,12 @@ namespace std\n \n \n   // 24.5.3 Template class istreambuf_iterator\n-  template<class _CharT, class _Traits>\n+  template<typename _CharT, typename _Traits>\n     class istreambuf_iterator\n     : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,\n     \t\t      _CharT*, _CharT&>\n     {\n     public:\n-\n       // Types:\n       typedef _CharT                         \t\tchar_type;\n       typedef _Traits                        \t\ttraits_type;\n@@ -106,6 +106,18 @@ namespace std\n       // Non-standard Types:\n       typedef istreambuf_iterator<_CharT, _Traits>\t__istreambufiter_type;\n \n+    private:\n+      // 24.5.3 istreambuf_iterator \n+      // p 1 \n+      // If the end of stream is reached (streambuf_type::sgetc()\n+      // returns traits_type::eof()), the iterator becomes equal to\n+      // the \"end of stream\" iterator value.\n+      // NB: This implementation assumes the \"end of stream\" value\n+      // is EOF, or -1.\n+      streambuf_type* \t\t_M_sbuf;  \n+      int_type \t\t\t_M_c;\n+\n+    public:\n       istreambuf_iterator() throw() \n       : _M_sbuf(NULL), _M_c(-2) { }\n       \n@@ -174,17 +186,6 @@ namespace std\n \treturn (__thiseof && __beof || (!__thiseof && !__beof));\n       }\n #endif\n-\n-    private:\n-      // 24.5.3 istreambuf_iterator \n-      // p 1 \n-      // If the end of stream is reached (streambuf_type::sgetc()\n-      // returns traits_type::eof()), the iterator becomes equal to\n-      // the \"end of stream\" iterator value.\n-      // NB: This implementation assumes the \"end of stream\" value\n-      // is EOF, or -1.\n-      streambuf_type* \t\t_M_sbuf;  \n-      int_type \t\t\t_M_c;\n     };\n \n   template<typename _CharT, typename _Traits>\n@@ -198,10 +199,5 @@ namespace std\n     operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,\n \t       const istreambuf_iterator<_CharT, _Traits>& __b)\n     { return !__a.equal(__b); }\n-\n } // namespace std\n-\n #endif\n-\n-\n-"}, {"sha": "479ee09a1d9287119ab5c5842703f4d688a57539", "filename": "libstdc++-v3/include/bits/std_fstream.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -86,7 +86,8 @@ namespace std\n       basic_filebuf();\n \n       // Non-standard ctor:\n-      basic_filebuf(__c_file_type* __f, bool __s, ios_base::openmode __mode);\n+      basic_filebuf(__c_file_type* __f, ios_base::openmode __mode, \n+\t\t    int_type __s = static_cast<int_type>(BUFSIZ));\n  \n       virtual \n       ~basic_filebuf() "}, {"sha": "678c140b3d7e5c311bcf0edb5da873c676511928", "filename": "libstdc++-v3/include/bits/std_streambuf.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -251,17 +251,20 @@ namespace std\n \t  this->setg(_M_buf, _M_buf, _M_buf + __off);\n \tif (__testout)\n \t  this->setp(_M_buf, _M_buf + __off);\n-\n       }\n \n       bool\n       _M_is_indeterminate(void)\n       { \n \tbool __ret = false;\n-\tif (_M_mode & ios_base::in)\n-\t  __ret = _M_in_beg == _M_in_cur && _M_in_cur == _M_in_end;\n-\tif (_M_mode & ios_base::out)\n-\t  __ret = _M_out_beg == _M_out_cur && _M_out_cur == _M_out_end;\n+\t// Don't return true if unbuffered.\n+\tif (_M_buf)\n+\t  {\n+\t    if (_M_mode & ios_base::in)\n+\t      __ret = _M_in_beg == _M_in_cur && _M_in_cur == _M_in_end;\n+\t    if (_M_mode & ios_base::out)\n+\t      __ret = _M_out_beg == _M_out_cur && _M_out_cur == _M_out_end;\n+\t  }\n \treturn __ret;\n       }\n \n@@ -350,7 +353,7 @@ namespace std\n       {\n \tint_type __ret;\n \tif (_M_in_cur && _M_in_cur < _M_in_end)\n-\t  __ret = traits_type::to_int_type(*gptr());\n+\t  __ret = traits_type::to_int_type(*(this->gptr()));\n \telse \n \t  __ret = this->underflow();\n \treturn __ret;"}, {"sha": "6d4039d7ec47f3c7b740b3f34c6d2442eb1a9535", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -136,19 +136,21 @@ namespace std\n   void\n   ios_base::Init::_S_ios_create(bool __sync)\n   {\n+    int __bufsize = __sync ? 0 : static_cast<int>(BUFSIZ);\n     // NB: The file std_iostream.h creates the four standard files\n-    // with NULL buffers. At this point, we swap out these\n-    new (&cout) ostream(new filebuf(stdout, __sync, ios_base::out));\n-    new (&cin) istream(new filebuf(stdin, __sync, ios_base::in));\n-    new (&cerr) ostream(new filebuf(stderr, __sync, ios_base::out));\n+    // with NULL buffers. At this point, we swap out the dummy NULL\n+    // buffers with the real deal.\n+    new (&cout) ostream(new filebuf(stdout, ios_base::out, __bufsize));\n+    new (&cin) istream(new filebuf(stdin, ios_base::in, 1));\n+    new (&cerr) ostream(new filebuf(stderr, ios_base::out, __bufsize));\n     new (&clog) ostream(cerr.rdbuf());\n     cin.tie(&cout);\n     cerr.flags(ios_base::unitbuf);\n     \n #ifdef _GLIBCPP_USE_WCHAR_T\n-    new (&wcout) wostream( new wfilebuf(stdout, __sync, ios_base::out));\n-    new (&wcin) wistream(new wfilebuf(stdin, __sync, ios_base::in));\n-    new (&wcerr) wostream(new wfilebuf(stderr, __sync, ios_base::out));\n+    new (&wcout) wostream( new wfilebuf(stdout, ios_base::out, __bufsize));\n+    new (&wcin) wistream(new wfilebuf(stdin, ios_base::in, 1));\n+    new (&wcerr) wostream(new wfilebuf(stderr, ios_base::out, __bufsize));\n     new (&wclog) wostream(wcerr.rdbuf());\n     wcin.tie(&wcout);\n     wcerr.flags(ios_base::unitbuf);"}, {"sha": "26bbc56da4d4d5cfc658bcdbc264bbd12bc2293f", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 60, "deletions": 50, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -676,9 +676,9 @@ namespace std\n \n       // Stage 2: extract characters.\n       __cache_type const* __fmt = __cache_type::_S_get(__io);\n-      bool __valid = __beg != __end;\n+\n       // Fail quickly if !__valid\n-      if (!__valid)\n+      if (__beg == __end)\n         {\n           __err |= (ios_base::eofbit | ios_base::failbit);\n           return;\n@@ -694,14 +694,19 @@ namespace std\n       // Check first for sign\n       bool __testsign = false;\n       if ((__c == __lits[__cache_type::_S_minus])\n-          || (__c == __lits[__cache_type::_S_plus]))\n+\t  || (__c == __lits[__cache_type::_S_plus]))\n         {\n+          __testsign = true;\n           __xtrc[__pos++] = __c;\n           ++__beg;\n-          __testsign = true;\n-          // whitespace may follow a sign\n-          while ((__beg != __end) && (isspace(*__beg)))\n-            ++__beg;\n+\t  __c = * __beg;\n+\n+          // Whitespace may follow a sign\n+          while ((__beg != __end) && (isspace(__c)))\n+\t    {\n+\t      ++__beg;\n+\t      __c = *__beg;\n+\t    }\n \n           // There had better be more to come...\n           if (__beg == __end)\n@@ -712,20 +717,19 @@ namespace std\n             }\n         }\n \n-      bool __testzero = false;    // Has there been a leading zero?\n-\n-      // Now check if first character is a zero\n-      __c = *__beg;\n+      // Now check if first character is a zero.\n+      bool __testzero = false;    \n       if (__c == __lits[__cache_type::_S_digits])\n         {\n            __testzero = true;\n            ++__beg;\n+\t   __c = *__beg;\n \n            // We have to check for __beg == __end here. If so,\n            // a plain '0' (possibly with a sign) can be got rid of now\n            if (__beg == __end)\n              {\n-               __xtrc[__pos++] = __c;\n+               __xtrc[__pos++] = __lits[__cache_type::_S_digits];\n                __xtrc[__pos] = '\\0';\n                __err |= ios_base::eofbit;\n                return;\n@@ -736,11 +740,11 @@ namespace std\n           if (!__fp && __base != 10 && __base != 8)\n             {\n               // Here, __base == 0 or 16\n-              __c = *__beg;\n               if ((__c == __lits[__cache_type::_S_x])\n                  || (__c == __lits[__cache_type::_S_X]))\n                 {\n                   ++__beg;\n+\t\t  __c = *__beg;\n                   __base = 16;\n                   __testzero = false; // \"0x\" is not a leading zero\n                 }\n@@ -751,9 +755,10 @@ namespace std\n           // Remove any more leading zeros\n           while (__beg != __end)\n             {\n-              if (*__beg == __lits[__cache_type::_S_digits])\n+              if (__c == __lits[__cache_type::_S_digits])\n                 {\n                   ++__beg;\n+\t\t  __c = *__beg;\n                   __testzero = true;\n                 }\n               else\n@@ -767,44 +772,45 @@ namespace std\n       // We may need to know if anything is found here. A leading zero\n       // (removed by now) would count.\n       bool __testunits = __testzero;\n-      while (__valid && __beg != __end)\n+      while (__beg != __end)\n         {\n-          __valid = false;\n-          __c = *__beg;\n-          const char* __p = strchr(__fmt->_S_literals, __c);\n+          const char* __p = strchr(__lits, __c);\n \n           // NB: strchr returns true for __c == 0x0\n-          if (__p && __c)\n-            {\n-              // Try first for acceptable digit; record it if found\n-              if ((__p >= &__lits[__cache_type::_S_digits]\n-                    && __p < &__lits[__cache_type::_S_digits + __base])\n-                   || (__p >= &__lits[__cache_type::_S_udigits]\n-                       && __p < &__lits[__cache_type::_S_udigits + __base]))\n-                {\n-                  __xtrc[__pos++] = __c;\n-                  ++__sep_pos;\n-                  __valid = true;\n-                  __testunits = true;\n-                }\n-            }\n-          else if (__c == __fmt->_M_thousands_sep\n-                   && __fmt->_M_use_grouping)\n-            {\n+          if (__p && __c\n+\t      &&((__p >= &__lits[__cache_type::_S_digits]\n+\t\t  && __p < &__lits[__cache_type::_S_digits + __base])\n+\t\t || (__p >= &__lits[__cache_type::_S_udigits]\n+\t\t     && __p < &__lits[__cache_type::_S_udigits + __base])))\n+\t    {\n+\t      // Try first for acceptable digit; record it if found.\n+\t      __xtrc[__pos++] = __c;\n+\t      ++__sep_pos;\n+\t      __testunits = true;\n+\t      ++__beg;\n+\t      __c = *__beg;\n+\t    }\n+          else if (__c == __fmt->_M_thousands_sep && __fmt->_M_use_grouping)\n+\t    {\n               // NB: Thousands separator at the beginning of a string\n               // is a no-no, as is two consecutive thousands\n-              // separators\n+              // separators.\n               if (__sep_pos)\n                 {\n                   __grp += static_cast<char>(__sep_pos);\n                   __sep_pos = 0;\n-                  __valid = true;\n+\t\t  ++__beg;\n+\t\t  __c = *__beg;\n                 }\n               else\n-                __err |= ios_base::failbit;\n+\t\t{\n+\t\t  __err |= ios_base::failbit;\n+\t\t  break;\n+\t\t}\n             }\n-          if (__valid)\n-            ++__beg;\n+\t  else\n+\t    // Not a valid input item.\n+\t    break;\n         }\n \n       // Digit grouping is checked. If _M_groupings() doesn't\n@@ -852,7 +858,6 @@ namespace std\n       // That's it for integer types. Remaining code is for floating point\n       if (__fp && __beg != __end)\n         {\n-          __c = *__beg;\n           // Check first for decimal point. There MUST be one if\n           // __testunits is false.\n           bool __testdec = false;    // Is there a decimal point\n@@ -861,19 +866,21 @@ namespace std\n             {\n               __xtrc[__pos++] = '.';\n               ++__beg;\n+\t      __c = *__beg;\n+\n               // Now we get any digits after the decimal point\n               // There MUST be some if __testunits is false.\n               while (__beg != __end)\n                 {\n-                  __c = *__beg;\n-                  const char* __p = strchr(__fmt->_S_literals, __c);\n+                  const char* __p = strchr(__lits, __c);\n                   if ((__p >= &__lits[__cache_type::_S_digits]\n                         && __p < &__lits[__cache_type::_S_digits + __base])\n                        || (__p >= &__lits[__cache_type::_S_udigits]\n                            && __p < &__lits[__cache_type::_S_udigits + __base]))\n                     {\n                       __xtrc[__pos++] = __c;\n                       ++__beg;\n+\t\t      __c = *__beg;\n                       __testdec = true;\n                     }\n                   else\n@@ -892,25 +899,28 @@ namespace std\n           // Now we may find an exponent\n           if (__beg != __end)\n             {\n-              __c = *__beg;\n               if ((__c == __lits[__cache_type::_S_ee])\n                    || (__c == __lits[__cache_type::_S_Ee]))\n                 {\n                   __xtrc[__pos++] = __c;\n                   ++__beg;\n+\t\t  __c = *__beg;\n+\n                   // Now there may be a sign\n                   if (__beg != __end)\n                     {\n-                      __c = *__beg;\n                       if ((__c == __lits[__cache_type::_S_minus])\n                           || (__c == __lits[__cache_type::_S_plus]))\n                         {\n                           __xtrc[__pos++] = __c;\n                           ++__beg;\n+\t\t\t  __c = *__beg;\n                           // whitespace may follow a sign\n-                          while ((__beg != __end) && (isspace(*__beg)))\n-                            ++__beg;\n-\n+                          while ((__beg != __end) && (isspace(__c)))\n+\t\t\t    {\n+\t\t\t      ++__beg;\n+\t\t\t      __c = *__beg;\n+\t\t\t    }\n                         }\n                     }\n                   // And now there must be some digits\n@@ -922,15 +932,15 @@ namespace std\n                     }\n                   while (__beg != __end)\n                     {\n-                      __c = *__beg;\n-                      const char* __p = strchr(__fmt->_S_literals, __c);\n+                      const char* __p = strchr(__lits, __c);\n                       if ((__p >= &__lits[__cache_type::_S_digits]\n                             && __p < &__lits[__cache_type::_S_digits + __base])\n                            || (__p >= &__lits[__cache_type::_S_udigits]\n                                && __p < &__lits[__cache_type::_S_udigits + __base]))\n                         {\n                           __xtrc[__pos++] = __c;\n                           ++__beg;\n+\t\t\t  __c = *__beg;\n                         }\n                       else\n                         break;"}, {"sha": "d31614c0213cb4ae69da4d11c00b9865ac588dc5", "filename": "libstdc++-v3/testsuite/27_io/filebuf.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -546,6 +546,9 @@ class gnu_char_type\n   operator<(const gnu_char_type& __lhs) \n   { return character < __lhs.character; }\n \n+  // default ctor\n+  gnu_char_type() { }\n+\n   // to_char_type\n   gnu_char_type(const unsigned long& __l) : character(__l) { } \n "}, {"sha": "2e212329f573e7fff22548c022844ce5649e4f10", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -52,7 +52,7 @@ test_01()\n   FILE* f2 = fopen(name_01, \"r\");\n   VERIFY( f2 != NULL );\n   {\n-    std::filebuf fb(f2, false, std::ios_base::in);\n+    std::filebuf fb(f2, std::ios_base::in, 512);\n   }\n   close_num = fclose(f2);\n   VERIFY( close_num == 0 );"}, {"sha": "c1ca3cadc8f320450f1950f15e1272f674d63c3c", "filename": "libstdc++-v3/testsuite/27_io/narrow_stream_objects.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39003c99021608d40dd986c707253c9a0beba590/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc?ref=39003c99021608d40dd986c707253c9a0beba590", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-02 bkoz\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -93,11 +93,31 @@ test01()\n   return 0;\n }\n \n+// libstdc++/2523\n+void test02()\n+{\n+  int i;\n+  cin >> i;\n+  cout << \"i == \" << i << endl;\n+}\n+\n+// libstdc++/2523\n+void test03()\n+{\n+  ios_base::sync_with_stdio(false);\n+\n+  int i;\n+  cin >> i;\n+  cout << \"i == \" << i << endl;\n+}\n \n int \n main()\n {\n   test01();\n+\n+  // test02();\n+  // test03();\n   return 0;\n }\n "}]}