{"sha": "1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5ZWNmNmRhNDBhYmIxZTI5NGI3MWU2MGFlNjZhZTM0ZjkzZTBmZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-24T21:37:37Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-24T21:37:37Z"}, "message": "re PR fortran/31587 (Module files shouldn't be updated if their content doesn't change)\n\n\tPR fortran/31587\n\n\t* lib/gcc-dg.exp (scan-module): New function.\n\t* gfortran.dg/module_md5_1.f90: New test.\n\n\t* module.c (write_char): Add character to the MD5 buffer.\n\t(read_md5_from_module_file): New function.\n\t(gfc_dump_module): Compute MD5 for new module file. Call\n\tread_md5_from_module_file. Only overwrite old module file\n\tif the new MD5 is different.\n\nFrom-SVN: r124126", "tree": {"sha": "7b803c93bd5afc3e3875d947014f635cef0ddad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b803c93bd5afc3e3875d947014f635cef0ddad5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28f9a06027182195f2783b2518bea214bc4f730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28f9a06027182195f2783b2518bea214bc4f730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28f9a06027182195f2783b2518bea214bc4f730"}], "stats": {"total": 146, "additions": 139, "deletions": 7}, "files": [{"sha": "1364967de37d17c6be38ea270a5f685e31f3ab70", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "patch": "@@ -1,3 +1,12 @@\n+2007-04-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31587\n+\t* module.c (write_char): Add character to the MD5 buffer.\n+\t(read_md5_from_module_file): New function.\n+\t(gfc_dump_module): Compute MD5 for new module file. Call\n+\tread_md5_from_module_file. Only overwrite old module file\n+\tif the new MD5 is different.\n+\n 2007-04-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31630"}, {"sha": "03ad1a504f48c000578f883f7a52fc7b0f2c723b", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 92, "deletions": 7, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "patch": "@@ -72,6 +72,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"arith.h\"\n #include \"match.h\"\n #include \"parse.h\" /* FIXME */\n+#include \"md5.h\"\n \n #define MODULE_EXTENSION \".mod\"\n \n@@ -170,6 +171,9 @@ gfc_use_rename;\n /* The FILE for the module we're reading or writing.  */\n static FILE *module_fp;\n \n+/* MD5 context structure.  */\n+static struct md5_ctx ctx;\n+\n /* The name of the module we're reading (USE'ing) or writing.  */\n static char module_name[GFC_MAX_SYMBOL_LEN + 1];\n \n@@ -1275,6 +1279,9 @@ write_char (char out)\n   if (fputc (out, module_fp) == EOF)\n     gfc_fatal_error (\"Error writing modules file: %s\", strerror (errno));\n \n+  /* Add this to our MD5.  */\n+  md5_process_bytes (&out, sizeof (out), &ctx);\n+  \n   if (out != '\\n')\n     module_column++;\n   else\n@@ -3916,6 +3923,49 @@ write_module (void)\n }\n \n \n+/* Read a MD5 sum from the header of a module file.  If the file cannot\n+   be opened, or we have any other error, we return -1.  */\n+\n+static int\n+read_md5_from_module_file (const char * filename, unsigned char md5[16])\n+{\n+  FILE *file;\n+  char buf[1024];\n+  int n;\n+\n+  /* Open the file.  */\n+  if ((file = fopen (filename, \"r\")) == NULL)\n+    return -1;\n+\n+  /* Read two lines.  */\n+  if (fgets (buf, sizeof (buf) - 1, file) == NULL\n+      || fgets (buf, sizeof (buf) - 1, file) == NULL)\n+    {\n+      fclose (file);\n+      return -1;\n+    }\n+\n+  /* Close the file.  */\n+  fclose (file);\n+\n+  /* If the header is not what we expect, or is too short, bail out.  */\n+  if (strncmp (buf, \"MD5:\", 4) != 0 || strlen (buf) < 4 + 16)\n+    return -1;\n+\n+  /* Now, we have a real MD5, read it into the array.  */\n+  for (n = 0; n < 16; n++)\n+    {\n+      unsigned int x;\n+\n+      if (sscanf (&(buf[4+2*n]), \"%02x\", &x) != 1)\n+       return -1;\n+\n+      md5[n] = x;\n+    }\n+\n+  return 0;\n+}\n+\n /* Given module, dump it to disk.  If there was an error while\n    processing the module, dump_flag will be set to zero and we delete\n    the module file, even if it was already there.  */\n@@ -3924,13 +3974,16 @@ void\n gfc_dump_module (const char *name, int dump_flag)\n {\n   int n;\n-  char *filename, *p;\n+  char *filename, *filename_tmp, *p;\n   time_t now;\n+  fpos_t md5_pos;\n+  unsigned char md5_new[16], md5_old[16];\n \n   n = strlen (name) + strlen (MODULE_EXTENSION) + 1;\n   if (gfc_option.module_dir != NULL)\n     {\n-      filename = (char *) alloca (n + strlen (gfc_option.module_dir));\n+      n += strlen (gfc_option.module_dir);\n+      filename = (char *) alloca (n);\n       strcpy (filename, gfc_option.module_dir);\n       strcat (filename, name);\n     }\n@@ -3941,26 +3994,41 @@ gfc_dump_module (const char *name, int dump_flag)\n     }\n   strcat (filename, MODULE_EXTENSION);\n \n+  /* Name of the temporary file used to write the module.  */\n+  filename_tmp = (char *) alloca (n + 1);\n+  strcpy (filename_tmp, filename);\n+  strcat (filename_tmp, \"0\");\n+\n+  /* There was an error while processing the module.  We delete the\n+     module file, even if it was already there.  */\n   if (!dump_flag)\n     {\n       unlink (filename);\n       return;\n     }\n \n-  module_fp = fopen (filename, \"w\");\n+  /* Write the module to the temporary file.  */\n+  module_fp = fopen (filename_tmp, \"w\");\n   if (module_fp == NULL)\n     gfc_fatal_error (\"Can't open module file '%s' for writing at %C: %s\",\n-\t\t     filename, strerror (errno));\n+\t\t     filename_tmp, strerror (errno));\n \n+  /* Write the header, including space reserved for the MD5 sum.  */\n   now = time (NULL);\n   p = ctime (&now);\n \n   *strchr (p, '\\n') = '\\0';\n \n-  fprintf (module_fp, \"GFORTRAN module created from %s on %s\\n\", \n+  fprintf (module_fp, \"GFORTRAN module created from %s on %s\\nMD5:\", \n \t   gfc_source_file, p);\n-  fputs (\"If you edit this, you'll get what you deserve.\\n\\n\", module_fp);\n+  fgetpos (module_fp, &md5_pos);\n+  fputs (\"00000000000000000000000000000000 -- \"\n+        \"If you edit this, you'll get what you deserve.\\n\\n\", module_fp);\n \n+  /* Initialize the MD5 context that will be used for output.  */\n+  md5_init_ctx (&ctx);\n+\n+  /* Write the module itself.  */\n   iomode = IO_OUTPUT;\n   strcpy (module_name, name);\n \n@@ -3973,9 +4041,26 @@ gfc_dump_module (const char *name, int dump_flag)\n \n   write_char ('\\n');\n \n+  /* Write the MD5 sum to the header of the module file.  */\n+  md5_finish_ctx (&ctx, md5_new);\n+  fsetpos (module_fp, &md5_pos);\n+  for (n = 0; n < 16; n++)\n+    fprintf (module_fp, \"%02x\", md5_new[n]);\n+\n   if (fclose (module_fp))\n     gfc_fatal_error (\"Error writing module file '%s' for writing: %s\",\n-\t\t     filename, strerror (errno));\n+\t\t     filename_tmp, strerror (errno));\n+\n+  /* Read the MD5 from the header of the old module file and compare.  */\n+  if (read_md5_from_module_file (filename, md5_old) != 0\n+      || memcmp (md5_old, md5_new, sizeof (md5_old)) != 0)\n+    {\n+      /* Module file have changed, replace the old one.  */\n+      unlink (filename);\n+      rename (filename_tmp, filename);\n+    }\n+  else\n+    unlink (filename_tmp);\n }\n \n "}, {"sha": "3195c15539ef01f8ee36bf83418deb496cef6204", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "patch": "@@ -1,3 +1,9 @@\n+2007-04-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31587\n+\t* lib/gcc-dg.exp (scan-module): New function.\n+\t* gfortran.dg/module_md5_1.f90: New test.\n+\n 2007-04-24  Douglas Gregor  <doug.gregor@gmail.com>\n \n        * g++.old-deja/g++.pt/defarg6.C: Only run with"}, {"sha": "7081804c494a1daf916f32dc6f2a33c9d869b641", "filename": "gcc/testsuite/gfortran.dg/module_md5_1.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_md5_1.f90?ref=1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "patch": "@@ -0,0 +1,14 @@\n+! Check that we can write a module file, that it has a correct MD5 sum,\n+! and that we can read it back.\n+!\n+! { dg-do compile }\n+module foo\n+  integer(kind=4), parameter :: pi = 3_4\n+end module foo\n+\n+program test\n+  use foo\n+  print *, pi\n+end program test\n+! { dg-final { scan-module \"foo\" \"MD5:18a257e13c90e3872b7b9400c2fc6e4b\" } }\n+! { dg-final { cleanup-modules \"foo\" } }"}, {"sha": "98be07fe19822534890d5a8fb2fb83767dbaf48a", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=1e9ecf6da40abb1e294b71e60ae66ae34f93e0fd", "patch": "@@ -455,6 +455,24 @@ proc cleanup-modules { modlist } {\n     }\n }\n \n+# Scan Fortran modules for a given regexp.\n+#\n+# Argument 0 is the module name\n+# Argument 1 is the regexp to match\n+proc scan-module { args } {\n+    set modfilename [string tolower [lindex $args 0]].mod\n+    set fd [open $modfilename r]\n+    set text [read $fd]\n+    close $fd\n+\n+    upvar 2 name testcase\n+    if [regexp -- [lindex $args 1] $text] {\n+      pass \"$testcase scan-module [lindex $args 1]\"\n+    } else {\n+      fail \"$testcase scan-module [lindex $args 1]\"\n+    }\n+}\n+\n # Verify that the compiler output file exists, invoked via dg-final.\n proc output-exists { args } {\n     # Process an optional target or xfail list."}]}