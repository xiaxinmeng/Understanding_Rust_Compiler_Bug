{"sha": "0864034eb204f4c9636509af08b9e2f343a9dd85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2NDAzNGViMjA0ZjRjOTYzNjUwOWFmMDhiOWUyZjM0M2E5ZGQ4NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-28T20:02:28Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-28T20:02:28Z"}, "message": "tree.h (TREE_CST_RTL, [...]): Delete.\n\n\t* tree.h (TREE_CST_RTL, CST_OR_CONSTRUCTOR_CHECK): Delete.\n\t(struct tree_int_cst, struct tree_real_cst, struct tree_string,\n\tstruct tree_complex, struct tree_vector): Remove RTL field.\n\t(CONSTRUCTOR_ELTS): Use elt 0.\n\t* tree.def (CONSTRUCTOR): Delete first of its two operands.\n\t* varasm.c (output_constant_def): Remove early exit if\n\tTREE_CST_RTL is set.  Don't set TREE_CST_RTL.\n\t(decode_addr_const): Don't mention TREE_CST_RTL in comment.\n\t* target.h (select_section): Don't mention TREE_CST_RTL in comment.\n\t* doc/tm.texi (encode_section_info): Don't talk about TREE_CST_RTL.\n\nada:\n\t* utils.c (convert): No need to clear TREE_CST_RTL.\n\nFrom-SVN: r66182", "tree": {"sha": "92ce3e71b6733dbef67b47393f4d33f639182d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ce3e71b6733dbef67b47393f4d33f639182d26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0864034eb204f4c9636509af08b9e2f343a9dd85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0864034eb204f4c9636509af08b9e2f343a9dd85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0864034eb204f4c9636509af08b9e2f343a9dd85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0864034eb204f4c9636509af08b9e2f343a9dd85/comments", "author": null, "committer": null, "parents": [{"sha": "9661b15f951d61710cadd3b4c85d5b29078e116e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9661b15f951d61710cadd3b4c85d5b29078e116e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9661b15f951d61710cadd3b4c85d5b29078e116e"}], "stats": {"total": 93, "additions": 36, "deletions": 57}, "files": [{"sha": "0069cd37e3425b397a466abfd0e8fe758e74da22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -1,3 +1,16 @@\n+2003-04-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.h (TREE_CST_RTL, CST_OR_CONSTRUCTOR_CHECK): Delete.\n+\t(struct tree_int_cst, struct tree_real_cst, struct tree_string,\n+\tstruct tree_complex, struct tree_vector): Remove RTL field.\n+\t(CONSTRUCTOR_ELTS): Use elt 0.\n+\t* tree.def (CONSTRUCTOR): Delete first of its two operands.\n+\t* varasm.c (output_constant_def): Remove early exit if\n+\tTREE_CST_RTL is set.  Don't set TREE_CST_RTL.\n+\t(decode_addr_const): Don't mention TREE_CST_RTL in comment.\n+\t* target.h (select_section): Don't mention TREE_CST_RTL in comment.\n+\t* doc/tm.texi (encode_section_info): Don't talk about TREE_CST_RTL.\n+\n 2003-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-decl.c (finish_decl): When prototype with asmspec is found\n@@ -8,16 +21,16 @@\n \n 2003-04-28  Richard Henderson  <rth@redhat.com>\n \n-        * config/sparc/sparc.c (print_operand): Add 's' to sign-extend.\n-        * config/sparc/sparc.md (const_mulsidi3_v8plus): Fix mode of\n-        integral constant mult operand.\n-        (const_mulsidi3_sp32, const_mulsidi3_sp64): Likewise.\n-        (const_smulsi3_highpart_v8plus): Likewise.\n-        (const_smulsi3_highpart): Likewise.\n-        (const_umulsidi3_sp32): Likewise; sign-extend it in the output.\n-        (const_umulsidi3_sp64, const_umulsidi3_v8plus): Likewise.\n-        (const_umulsi3_highpart_v8plus): Likewise.\n-        (const_umulsi3_highpart): Likewise.\n+\t* config/sparc/sparc.c (print_operand): Add 's' to sign-extend.\n+\t* config/sparc/sparc.md (const_mulsidi3_v8plus): Fix mode of\n+\tintegral constant mult operand.\n+\t(const_mulsidi3_sp32, const_mulsidi3_sp64): Likewise.\n+\t(const_smulsi3_highpart_v8plus): Likewise.\n+\t(const_smulsi3_highpart): Likewise.\n+\t(const_umulsidi3_sp32): Likewise; sign-extend it in the output.\n+\t(const_umulsidi3_sp64, const_umulsidi3_v8plus): Likewise.\n+\t(const_umulsi3_highpart_v8plus): Likewise.\n+\t(const_umulsi3_highpart): Likewise.\n \n 2003-04-28  David O'Brien  <obrien@FreeBSD.org>\n "}, {"sha": "e0b9aa28da123696a20f28dbda038b8555bc395a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -1,3 +1,7 @@\n+2003-04-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* utils.c (convert): No need to clear TREE_CST_RTL.\n+\n 2003-04-23   Geert Bosch <bosch@gnat.com>\n \n \t* 1aexcept.adb, 1aexcept.ads, 1ic.ads, 1ssecsta.adb,"}, {"sha": "d21a097cfdd02647110fe41a76e362d1cc261d3d", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -2877,18 +2877,13 @@ convert (type, expr)\n     case CONSTRUCTOR:\n       /* If we are converting a STRING_CST to another constrained array type,\n \t just make a new one in the proper type.  Likewise for a\n-\t CONSTRUCTOR.  But if the mode of the type is different, we must\n-\t ensure a new RTL is made for the constant.  */\n+\t CONSTRUCTOR.  */\n       if (code == ecode && AGGREGATE_TYPE_P (etype)\n \t  && ! (TREE_CODE (TYPE_SIZE (etype)) == INTEGER_CST\n \t\t&& TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST))\n \t{\n \t  expr = copy_node (expr);\n \t  TREE_TYPE (expr) = type;\n-\n-\t  if (TYPE_MODE (type) != TYPE_MODE (etype))\n-\t    TREE_CST_RTL (expr) = 0;\n-\n \t  return expr;\n \t}\n       break;"}, {"sha": "c932422ce98467a81e8a8ea2c2fa348839b86b3b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -6062,8 +6062,7 @@ The hook is executed immediately after rtl has been created for\n @var{decl}, which may be a variable or function declaration or\n an entry in the constant pool.  In either case, @var{rtl} is the\n rtl in question.  Do @emph{not} use @code{DECL_RTL (@var{decl})}\n-or @code{TREE_CST_RTL (@var{decl})} in this hook; that field may\n-not have been initialized yet.\n+in this hook; that field may not have been initialized yet.\n \n In the case of a constant, it is safe to assume that the rtl is\n a @code{mem} whose address is a @code{symbol_ref}.  Most decls"}, {"sha": "12e95735c8bf5dbef607ccceed72bb032f5bfd81", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -102,10 +102,9 @@ struct gcc_target\n     void (* eh_frame_section) PARAMS ((void));\n \n     /* Select and switch to a section for EXP.  It may be a DECL or a\n-       constant for which TREE_CST_RTL is valid.  RELOC is nonzero if\n-       runtime relocations must be applied; bit 1 will be set if the\n-       runtime relocations require non-local name resolution.  ALIGN is\n-       the required alignment of the data.  */\n+       constant.  RELOC is nonzero if runtime relocations must be applied;\n+       bit 1 will be set if the runtime relocations require non-local\n+       name resolution.  ALIGN is the required alignment of the data.  */\n     void (* select_section) PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n \n     /* Select and switch to a section for X with MODE.  ALIGN is"}, {"sha": "378830c81bf15166e77034f43614d23594b624ab", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -387,10 +387,8 @@ DEFTREECODE (VTABLE_REF, \"vtable_ref\", 'r', 3)\n /* Constructor: return an aggregate value made from specified components.\n    In C, this is used only for structure and array initializers.\n    Also used for SET_TYPE in Chill (and potentially Pascal).\n-   The first \"operand\" is really a pointer to the RTL,\n-   for constant constructors only.\n-   The second operand is a list of component values\n-   made out of a chain of TREE_LIST nodes.\n+   The operand is a list of component values made out of a chain of\n+   TREE_LIST nodes.\n \n    For ARRAY_TYPE:\n    The TREE_PURPOSE of each node is the corresponding index.\n@@ -406,7 +404,7 @@ DEFTREECODE (VTABLE_REF, \"vtable_ref\", 'r', 3)\n    The TREE_VALUE specifies a value (index) in the set that is true.\n    If TREE_PURPOSE is non-NULL, it specifies the lower limit of a\n    range of true values.  Elements not listed are false (not in the set).  */\n-DEFTREECODE (CONSTRUCTOR, \"constructor\", 'e', 2)\n+DEFTREECODE (CONSTRUCTOR, \"constructor\", 'e', 1)\n \n /* The expression types are mostly straightforward, with the fourth argument\n    of DEFTREECODE saying how many operands there are."}, {"sha": "4b0b4a6eb7ddd07de9847318ad8ed93e8062f4f2", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -295,13 +295,6 @@ struct tree_common GTY(())\n     __t; })\n \n /* These checks have to be special cased.  */\n-#define CST_OR_CONSTRUCTOR_CHECK(t) __extension__\t\t\t\\\n-({  const tree __t = (t);\t\t\t\t\t\t\\\n-    enum tree_code const __c = TREE_CODE(__t);\t\t\t\t\\\n-    if (__c != CONSTRUCTOR && TREE_CODE_CLASS(__c) != 'c')\t\t\\\n-      tree_check_failed (__t, CONSTRUCTOR, __FILE__, __LINE__,\t\t\\\n-\t\t\t __FUNCTION__);\t\t\t\t\t\\\n-    __t; })\n #define EXPR_CHECK(t) __extension__\t\t\t\t\t\\\n ({  const tree __t = (t);\t\t\t\t\t\t\\\n     char const __c = TREE_CODE_CLASS(TREE_CODE(__t));\t\t\t\\\n@@ -748,8 +741,6 @@ extern void tree_operand_check_failed PARAMS ((int, enum tree_code,\n struct tree_int_cst GTY(())\n {\n   struct tree_common common;\n-  rtx rtl;\t/* acts as link to register transfer language\n-\t\t\t   (rtl) info */\n   /* A sub-struct is necessary here because the function `const_hash'\n      wants to scan both words as a unit and taking the address of the\n      sub-struct yields the properly inclusive bounded pointer.  */\n@@ -759,12 +750,6 @@ struct tree_int_cst GTY(())\n   } int_cst;\n };\n \n-/* In REAL_CST, STRING_CST, COMPLEX_CST, VECTOR_CST nodes, and\n-   CONSTRUCTOR nodes, and generally in all kinds of constants that\n-   could be given labels (rather than being immediate).  */\n-\n-#define TREE_CST_RTL(NODE) (CST_OR_CONSTRUCTOR_CHECK (NODE)->real_cst.rtl)\n-\n /* In a REAL_CST node.  struct real_value is an opaque entity, with\n    manipulators defined in real.h.  We don't want tree.h depending on\n    real.h and transitively on tm.h.  */\n@@ -776,7 +761,6 @@ struct real_value;\n struct tree_real_cst GTY(())\n {\n   struct tree_common common;\n-  rtx rtl;\t/* acts as link to register transfer language (rtl) info */\n   struct real_value * real_cst_ptr;\n };\n \n@@ -787,7 +771,6 @@ struct tree_real_cst GTY(())\n struct tree_string GTY(())\n {\n   struct tree_common common;\n-  rtx rtl;\t/* acts as link to register transfer language (rtl) info */\n   int length;\n   const char *pointer;\n };\n@@ -799,7 +782,6 @@ struct tree_string GTY(())\n struct tree_complex GTY(())\n {\n   struct tree_common common;\n-  rtx rtl;\t/* acts as link to register transfer language (rtl) info */\n   tree real;\n   tree imag;\n };\n@@ -810,7 +792,6 @@ struct tree_complex GTY(())\n struct tree_vector GTY(())\n {\n   struct tree_common common;\n-  rtx rtl;\n   tree elements;\n };\n \f\n@@ -883,7 +864,7 @@ struct tree_vec GTY(())\n   TREE_RTL_OPERAND_CHECK (NODE, WITH_CLEANUP_EXPR, 2)\n \n /* In a CONSTRUCTOR node.  */\n-#define CONSTRUCTOR_ELTS(NODE) TREE_OPERAND_CHECK_CODE (NODE, CONSTRUCTOR, 1)\n+#define CONSTRUCTOR_ELTS(NODE) TREE_OPERAND_CHECK_CODE (NODE, CONSTRUCTOR, 0)\n \n /* In ordinary expression nodes.  */\n #define TREE_OPERAND(NODE, I) TREE_OPERAND_CHECK (NODE, I)"}, {"sha": "5b038b263b0ab126d2b3df68b99499d878a2f6ca", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0864034eb204f4c9636509af08b9e2f343a9dd85/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0864034eb204f4c9636509af08b9e2f343a9dd85", "patch": "@@ -2093,8 +2093,6 @@ decode_addr_const (exp, value)\n     case COMPLEX_CST:\n     case CONSTRUCTOR:\n     case INTEGER_CST:\n-      /* This constant should have been output already, but we can't simply\n-\t use TREE_CST_RTL since INTEGER_CST doesn't have one.  */\n       x = output_constant_def (target, 1);\n       break;\n \n@@ -2554,7 +2552,6 @@ build_constant_desc (exp)\n    If DEFER is nonzero, the output of string constants can be deferred\n    and output only if referenced in the function after all optimizations.\n \n-   The TREE_CST_RTL of EXP is set up to point to that rtx.\n    The const_hash_table records which constants already have label strings.  */\n \n rtx\n@@ -2565,12 +2562,6 @@ output_constant_def (exp, defer)\n   int hash;\n   struct constant_descriptor_tree *desc;\n \n-  /* We can't just use the saved RTL if this is a deferred string constant\n-     and we are not to defer anymore.  */\n-  if (TREE_CST_RTL (exp)\n-      && (defer || !STRING_POOL_ADDRESS_P (XEXP (TREE_CST_RTL (exp), 0))))\n-    return TREE_CST_RTL (exp);\n-\n   /* Compute hash code of EXP.  Search the descriptors for that hash code\n      to see if any of them describes EXP.  If yes, the descriptor records\n      the label number already assigned.  */\n@@ -2597,7 +2588,6 @@ output_constant_def (exp, defer)\n       maybe_output_constant_def_contents (exp, desc->rtl, 0);\n     }\n \n-  TREE_CST_RTL (exp) = desc->rtl;\n   return desc->rtl;\n }\n "}]}