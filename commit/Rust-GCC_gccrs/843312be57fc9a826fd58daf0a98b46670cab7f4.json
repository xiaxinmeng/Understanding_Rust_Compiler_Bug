{"sha": "843312be57fc9a826fd58daf0a98b46670cab7f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzMzEyYmU1N2ZjOWE4MjZmZDU4ZGFmMGE5OGI0NjY3MGNhYjdmNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-08-14T08:42:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-08-14T08:42:19Z"}, "message": "Makefile.am: Consolidate target rules.\n\n\n2001-08-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/Makefile.am: Consolidate target rules. Don't clean stamp\n\tfiles. Tweak target build directory stamp.\n\t* include/Makefile.in: Regenerate.\n\n2\n\nFrom-SVN: r44888", "tree": {"sha": "f80fc25061c8e77be65e2afadb13aea20e9e3a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80fc25061c8e77be65e2afadb13aea20e9e3a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/843312be57fc9a826fd58daf0a98b46670cab7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843312be57fc9a826fd58daf0a98b46670cab7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843312be57fc9a826fd58daf0a98b46670cab7f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843312be57fc9a826fd58daf0a98b46670cab7f4/comments", "author": null, "committer": null, "parents": [{"sha": "c104edca38f58d69d65b5e59cacfd2a6bbd0eafb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c104edca38f58d69d65b5e59cacfd2a6bbd0eafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c104edca38f58d69d65b5e59cacfd2a6bbd0eafb"}], "stats": {"total": 145, "additions": 57, "deletions": 88}, "files": [{"sha": "69b5afadb8af3ed6d61fc9d9de94d242bf3093e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843312be57fc9a826fd58daf0a98b46670cab7f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843312be57fc9a826fd58daf0a98b46670cab7f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=843312be57fc9a826fd58daf0a98b46670cab7f4", "patch": "@@ -1,3 +1,9 @@\n+2001-08-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/Makefile.am: Consolidate target rules. Don't clean stamp\n+\tfiles. Tweak target build directory stamp.\n+\t* include/Makefile.in: Regenerate.\n+\t\n 2001-08-14  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n \t* libstdc++-v3/libmath/stubs.c: Fix PR/3988, replace"}, {"sha": "b391ffa6facea8424039f62bf3643b3dc87482e4", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 27, "deletions": 44, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843312be57fc9a826fd58daf0a98b46670cab7f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843312be57fc9a826fd58daf0a98b46670cab7f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=843312be57fc9a826fd58daf0a98b46670cab7f4", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.5 2001/08/13 22:26:08 mmitchel Exp $\n+## $Id: Makefile.am,v 1.6 2001/08/14 01:24:28 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -276,8 +276,7 @@ thread_headers = \\\n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n-\tstamp-target stamp-thread stamp-file_model stamp-io \\\n-\tstamp-locale stamp-messages_model stamp-codecvt_model\n+\tstamp-target stamp-thread \n \n \n # Here are the rules for building the headers\n@@ -288,7 +287,7 @@ stamp-std: ${std_headers}\n \t  mkdir -p ${std_builddir} ;\\\n \tfi ;\\\n \t(cd ${std_builddir} && @LN_S@ $? .) ;\\\n-\techo `date` > stamp-std\n+\techo `date` > stamp-std \n \n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\\n@@ -304,13 +303,6 @@ stamp-c_base: ${c_base_headers}\n \t(cd ${c_base_builddir} && @LN_S@ $? .) ;\\\n \techo `date` > stamp-c_base\n \n-stamp-c_compatibility: ${c_compatibility_headers}\n-\t@if [ ! -d \"${c_compatibility_builddir}\" ]; then \\\n-\t  mkdir -p ${c_compatibility_builddir} ;\\\n-\tfi ;\\\n-\t(cd ${c_compatibility_builddir} && @LN_S@ $? .) ;\\\n-\techo `date` > stamp-c_compatibility\n-\n stamp-backward: ${backward_headers}\n \t@if [ ! -d \"${backward_builddir}\" ]; then \\\n \t  mkdir -p ${backward_builddir} ;\\\n@@ -325,47 +317,31 @@ stamp-ext: ${ext_headers}\n \t(cd ${ext_builddir} && @LN_S@ $? .) ;\\\n \techo `date` > stamp-ext\n \n-# Can't use $? in command, otherwise target_builddir will trigger it, and\n-# we get bizarre symlinks mazes.\n-stamp-target: ${target_headers} ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${target_headers} .) ;\\\n-\techo `date` > stamp-target\n-\n-stamp-thread: ${thread_headers} ${thread_builddir}\n-\t@echo `date` > stamp-thread\n-\n-stamp-file_model: ${glibcpp_srcdir}/@BASIC_FILE_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h) ;\\\n-\techo `date` > stamp-file_model\n-\n-stamp-io: ${glibcpp_srcdir}/@CSTDIO_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h) ;\\\n-\techo `date` > stamp-io\n-\n-stamp-locale: ${glibcpp_srcdir}/@CLOCALE_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h) ;\\\n-\techo `date` > stamp-locale\n-\n-stamp-messages_model: ${glibcpp_srcdir}/@CMESSAGES_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h) ;\\\n-\techo `date` > stamp-messages_model\n-\n-stamp-codecvt_model: ${glibcpp_srcdir}/@CCODECVT_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h) ;\\\n-\techo `date` > stamp-codecvt_model\n-\n # This target is special.  The timestamp on a directory gets modified\n # whenever a file it contains gets modified, and that'll throw off all the\n # build dependencies that need this target.  On the other hand, someone\n-# could delete the directory and not the stamp file, faking out the make.\n+# could delete the directory and not the stamp file, faking out make.\n ${target_builddir}: stamp-${target_alias}\n-\n stamp-${target_alias}:\n \t@if [ ! -d ${target_builddir} ]; then \\\n \t  mkdir -p ${target_builddir} ;\\\n+\t  echo `date` > stamp-${target_alias} ;\\\n+\tfi\n+\n+# Target includes static.\n+stamp-target: ${target_headers} ${target_builddir}\n+\t@cd ${target_builddir} ;\\\n+\tif [ ! -f stamp-target ]; then \\\n+\t  @LN_S@ $? . ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h ;\\\n+\t  echo `date` > stamp-target; \\\n \tfi\n-\techo `date` > stamp-${target_alias}\n \n+# Target includes dynamic.\n ${target_builddir}/c++config.h: ../config.h \\\n \t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n \t\t\t\t${target_builddir}\n@@ -377,9 +353,14 @@ ${target_builddir}/c++config.h: ../config.h \\\n \t    < ${glibcpp_builddir}/config.h >> $@ ;\\\n \techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n \n+# Target includes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n+stamp-thread: ${thread_headers} ${thread_builddir}\n+\t@echo `date` > stamp-thread\n+\n+\n ${thread_builddir}/gthr.h:\n \tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n@@ -410,4 +391,6 @@ install-data-local:\n \tdone\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = ${allstamps}\n+#CLEANFILES = ${allstamps}\n+\n+"}, {"sha": "b7e3536f4c298920f7b23f3593669ee0392756aa", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 24, "deletions": 44, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843312be57fc9a826fd58daf0a98b46670cab7f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843312be57fc9a826fd58daf0a98b46670cab7f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=843312be57fc9a826fd58daf0a98b46670cab7f4", "patch": "@@ -193,18 +193,16 @@ thread_headers =  \t${thread_builddir}/gthr.h \t${thread_builddir}/gthr-single.h\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread stamp-file_model stamp-io \tstamp-locale stamp-messages_model stamp-codecvt_model\n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread \n \n \n+# Target inludes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n # One big happy istallation:  just copy everything from the build to the\n # install tree (except for the build stamps).\n gxx_include_dir = @gxx_include_dir@\n-\n-# By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = ${allstamps}\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n DIST_COMMON =  Makefile.am Makefile.in\n@@ -273,7 +271,6 @@ installdirs:\n mostlyclean-generic:\n \n clean-generic:\n-\t-test -z \"$(CLEANFILES)\" || rm -f $(CLEANFILES)\n \n distclean-generic:\n \t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n@@ -316,7 +313,7 @@ stamp-std: ${std_headers}\n \t  mkdir -p ${std_builddir} ;\\\n \tfi ;\\\n \t(cd ${std_builddir} && @LN_S@ $? .) ;\\\n-\techo `date` > stamp-std\n+\techo `date` > stamp-std \n \n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\\n@@ -332,13 +329,6 @@ stamp-c_base: ${c_base_headers}\n \t(cd ${c_base_builddir} && @LN_S@ $? .) ;\\\n \techo `date` > stamp-c_base\n \n-stamp-c_compatibility: ${c_compatibility_headers}\n-\t@if [ ! -d \"${c_compatibility_builddir}\" ]; then \\\n-\t  mkdir -p ${c_compatibility_builddir} ;\\\n-\tfi ;\\\n-\t(cd ${c_compatibility_builddir} && @LN_S@ $? .) ;\\\n-\techo `date` > stamp-c_compatibility\n-\n stamp-backward: ${backward_headers}\n \t@if [ ! -d \"${backward_builddir}\" ]; then \\\n \t  mkdir -p ${backward_builddir} ;\\\n@@ -353,46 +343,30 @@ stamp-ext: ${ext_headers}\n \t(cd ${ext_builddir} && @LN_S@ $? .) ;\\\n \techo `date` > stamp-ext\n \n-# Can't use $? in command, otherwise target_builddir will trigger it, and\n-# we get bizarre symlinks mazes.\n-stamp-target: ${target_headers} ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${target_headers} .) ;\\\n-\techo `date` > stamp-target\n-\n-stamp-thread: ${thread_headers} ${thread_builddir}\n-\t@echo `date` > stamp-thread\n-\n-stamp-file_model: ${glibcpp_srcdir}/@BASIC_FILE_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h) ;\\\n-\techo `date` > stamp-file_model\n-\n-stamp-io: ${glibcpp_srcdir}/@CSTDIO_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h) ;\\\n-\techo `date` > stamp-io\n-\n-stamp-locale: ${glibcpp_srcdir}/@CLOCALE_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h) ;\\\n-\techo `date` > stamp-locale\n-\n-stamp-messages_model: ${glibcpp_srcdir}/@CMESSAGES_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h) ;\\\n-\techo `date` > stamp-messages_model\n-\n-stamp-codecvt_model: ${glibcpp_srcdir}/@CCODECVT_H@ ${target_builddir}\n-\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h) ;\\\n-\techo `date` > stamp-codecvt_model\n-\n # This target is special.  The timestamp on a directory gets modified\n # whenever a file it contains gets modified, and that'll throw off all the\n # build dependencies that need this target.  On the other hand, someone\n # could delete the directory and not the stamp file, faking out the make.\n ${target_builddir}: stamp-${target_alias}\n-\n stamp-${target_alias}:\n \t@if [ ! -d ${target_builddir} ]; then \\\n \t  mkdir -p ${target_builddir} ;\\\n+\t  echo `date` > stamp-${target_alias} ;\\\n+\tfi\n+\n+# c++config would make these be rebuilt all the time.\n+# we get bizarre symlinks mazes.\n+stamp-target: ${target_headers} ${target_builddir}\n+\t@cd ${target_builddir} ;\\\n+\tif [ ! -f stamp-target ]; then \\\n+\t  @LN_S@ $? . ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h ;\\\n+\t  echo `date` > stamp-target; \\\n \tfi\n-\techo `date` > stamp-${target_alias}\n \n ${target_builddir}/c++config.h: ../config.h \\\n \t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n@@ -405,6 +379,9 @@ ${target_builddir}/c++config.h: ../config.h \\\n \t    < ${glibcpp_builddir}/config.h >> $@ ;\\\n \techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n \n+stamp-thread: ${thread_headers} ${thread_builddir}\n+\t@echo `date` > stamp-thread\n+\n ${thread_builddir}/gthr.h:\n \tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n@@ -430,6 +407,9 @@ install-data-local:\n \tfi ;\\\n \tdone\n \n+# By adding these files here, automake will remove them for 'make clean'\n+#CLEANFILES = ${allstamps}\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}]}