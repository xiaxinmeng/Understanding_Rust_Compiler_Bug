{"sha": "a0cd568f5935e52a2c19b21b78bea7c1296745b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjZDU2OGY1OTM1ZTUyYTJjMTliMjFiNzhiZWE3YzEyOTY3NDViNg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2005-05-08T10:23:39Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2005-05-08T10:23:39Z"}, "message": "re PR target/16925 (ICE when building a m68hc11 cross-compiler on 64-bit architectures)\n\n\tPR target/16925\n\t* config/m68hc11/m68hc11.c (m68hc11_gen_highpart): Handle split of\n\t64-bit constants on 64-bit hosts.\n\t(m68hc11_split_logical): Simplify.\n\t(m68hc11_split_move): Likewise.\n\nFrom-SVN: r99388", "tree": {"sha": "540d84c136ed24826e93001fc347cedc67b248bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/540d84c136ed24826e93001fc347cedc67b248bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0cd568f5935e52a2c19b21b78bea7c1296745b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cd568f5935e52a2c19b21b78bea7c1296745b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0cd568f5935e52a2c19b21b78bea7c1296745b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cd568f5935e52a2c19b21b78bea7c1296745b6/comments", "author": null, "committer": null, "parents": [{"sha": "232b67d9f8f29a786e52f4d757a68ec6b032cfc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232b67d9f8f29a786e52f4d757a68ec6b032cfc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232b67d9f8f29a786e52f4d757a68ec6b032cfc7"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "7762083d29c24c6c9f9cf5b76ce6f8e3da4b0ffd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cd568f5935e52a2c19b21b78bea7c1296745b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cd568f5935e52a2c19b21b78bea7c1296745b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0cd568f5935e52a2c19b21b78bea7c1296745b6", "patch": "@@ -1,3 +1,11 @@\n+2005-05-08  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\tPR target/16925\n+\t* config/m68hc11/m68hc11.c (m68hc11_gen_highpart): Handle split of\n+\t64-bit constants on 64-bit hosts.\n+\t(m68hc11_split_logical): Simplify.\n+\t(m68hc11_split_move): Likewise.\n+\n 2005-05-08  Nathan Sidwell  <nathan@codesourcery.com>\n \t    Paolo Bonzini  <bonzini@gnu.org>\n "}, {"sha": "93fe2c3d9ad7dcb91dcf82663d22bb2ce92a763a", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cd568f5935e52a2c19b21b78bea7c1296745b6/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cd568f5935e52a2c19b21b78bea7c1296745b6/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=a0cd568f5935e52a2c19b21b78bea7c1296745b6", "patch": "@@ -1929,6 +1929,10 @@ m68hc11_gen_highpart (enum machine_mode mode, rtx x)\n \t{\n \t  return gen_int_mode (val >> 16, HImode);\n \t}\n+      else if (mode == SImode)\n+       {\n+         return gen_int_mode (val >> 32, SImode);\n+       }\n     }\n   if (mode == QImode && D_REG_P (x))\n     return gen_rtx_REG (mode, HARD_A_REGNUM);\n@@ -2814,15 +2818,7 @@ m68hc11_split_move (rtx to, rtx from, rtx scratch)\n   high_to = m68hc11_gen_highpart (mode, to);\n \n   low_from = m68hc11_gen_lowpart (mode, from);\n-  if (mode == SImode && GET_CODE (from) == CONST_INT)\n-    {\n-      if (INTVAL (from) >= 0)\n-\thigh_from = const0_rtx;\n-      else\n-\thigh_from = constm1_rtx;\n-    }\n-  else\n-    high_from = m68hc11_gen_highpart (mode, from);\n+  high_from = m68hc11_gen_highpart (mode, from);\n \n   if (offset)\n     {\n@@ -3006,26 +3002,8 @@ m68hc11_split_logical (enum machine_mode mode, int code, rtx *operands)\n   low[2] = m68hc11_gen_lowpart (mode, operands[2]);\n \n   high[0] = m68hc11_gen_highpart (mode, operands[0]);\n-\n-  if (mode == SImode && GET_CODE (operands[1]) == CONST_INT)\n-    {\n-      if (INTVAL (operands[1]) >= 0)\n-\thigh[1] = const0_rtx;\n-      else\n-\thigh[1] = constm1_rtx;\n-    }\n-  else\n-    high[1] = m68hc11_gen_highpart (mode, operands[1]);\n-\n-  if (mode == SImode && GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      if (INTVAL (operands[2]) >= 0)\n-\thigh[2] = const0_rtx;\n-      else\n-\thigh[2] = constm1_rtx;\n-    }\n-  else\n-    high[2] = m68hc11_gen_highpart (mode, operands[2]);\n+  high[1] = m68hc11_gen_highpart (mode, operands[1]);\n+  high[2] = m68hc11_gen_highpart (mode, operands[2]);\n \n   low[3] = operands[3];\n   high[3] = operands[3];"}]}