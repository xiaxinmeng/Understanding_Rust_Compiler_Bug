{"sha": "b95605fb0c2052fcd1c2239acaa58748c9efc687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1NjA1ZmIwYzIwNTJmY2QxYzIyMzlhY2FhNTg3NDhjOWVmYzY4Nw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-21T16:05:58Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-21T16:05:58Z"}, "message": "re PR fortran/24223 (Gfortran crashes in two places)\n\n2005-11-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/24223\n\t* resolve.c (resolve_contained_fntype) Error if an internal\n\tfunction is assumed character length.\n\n\tPR fortran/24705\n\t* trans-decl.c (gfc_create_module_variable) Skip ICE in\n\twhen backend decl has been built and the symbol is marked\n\tas being in an equivalence statement.\n\n2005-11-21  Paul Thomas  <pault@gcc.gnu.org\n\n\tPR fortran/24223\n\t* gfortran.dg/substring_equivalence.f90: New test.\n\n\tPR fortran/24705\n\t* gfortran.dg/auto_internal_assumed.f90: New test.\n\nFrom-SVN: r107310", "tree": {"sha": "fa5a3b80e00abb2726bdd692a6e324db16c02eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa5a3b80e00abb2726bdd692a6e324db16c02eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b95605fb0c2052fcd1c2239acaa58748c9efc687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95605fb0c2052fcd1c2239acaa58748c9efc687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b95605fb0c2052fcd1c2239acaa58748c9efc687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95605fb0c2052fcd1c2239acaa58748c9efc687/comments", "author": null, "committer": null, "parents": [{"sha": "078152a256a43a888048dcec5e2c6d503db5b75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078152a256a43a888048dcec5e2c6d503db5b75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078152a256a43a888048dcec5e2c6d503db5b75c"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "355430d553aa5b0029c8aa92650b9e9e14dc1b62", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b95605fb0c2052fcd1c2239acaa58748c9efc687", "patch": "@@ -1,3 +1,14 @@\n+2005-11-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/24223\n+\t* resolve.c (resolve_contained_fntype) Error if an internal\n+\tfunction is assumed character length.\n+\n+\tPR fortran/24705\n+\t* trans-decl.c (gfc_create_module_variable) Skip ICE in\n+\twhen backend decl has been built and the symbol is marked\n+\tas being in an equivalence statement.\n+\n 2005-11-20  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* invoke.texi: Remove superfluous @item."}, {"sha": "cb9c65bee7b076bfb1aa38bea4501601d2c2255e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b95605fb0c2052fcd1c2239acaa58748c9efc687", "patch": "@@ -294,6 +294,19 @@ resolve_contained_fntype (gfc_symbol * sym, gfc_namespace * ns)\n \t  sym->attr.untyped = 1;\n \t}\n     }\n+\n+  /*Fortran 95 Draft Standard, page 51, Section 5.1.1.5, on the Character type,\n+    lists the only ways a character length value of * can be used: dummy arguments\n+    of proceedures, named constants, and function results in external functions.\n+    Internal function results are not on that list; ergo, not permitted.  */\n+\n+  if (sym->ts.type == BT_CHARACTER)\n+    {\n+      gfc_charlen *cl = sym->ts.cl;\n+      if (!cl || !cl->length)\n+\tgfc_error (\"Character-valued internal function '%s' at %L must \"\n+\t\t   \"not be assumed length\", sym->name, &sym->declared_at);\n+    }\n }\n \n "}, {"sha": "37e9db8d0b6fd136e02b47b12b9540f62cc66251", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b95605fb0c2052fcd1c2239acaa58748c9efc687", "patch": "@@ -2366,7 +2366,8 @@ gfc_create_module_variable (gfc_symbol * sym)\n     return;\n \n   /* Equivalenced variables arrive here after creation.  */\n-  if (sym->backend_decl && sym->equiv_built)\n+  if (sym->backend_decl\n+\t&& (sym->equiv_built || sym->attr.in_equivalence))\n       return;\n \n   if (sym->backend_decl)"}, {"sha": "5dd8d06c44ca5461eace295fb61b3d02aa9ab1e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b95605fb0c2052fcd1c2239acaa58748c9efc687", "patch": "@@ -1,3 +1,11 @@\n+2005-11-21  Paul Thomas  <pault@gcc.gnu.org\n+\n+\tPR fortran/24223\n+\t* gfortran.dg/substring_equivalence.f90: New test.\n+\n+\tPR fortran/24705\n+\t* gfortran.dg/auto_internal_assumed.f90: New test.\n+\n 2005-11-21  Uros Bizjak  <uros@kss-loka.si>\n \n \t* gcc.dg/fold-div-2.c: New test."}, {"sha": "c053216c36b321bd6373290dacb32f33b4fb93fd", "filename": "gcc/testsuite/gfortran.dg/auto_internal_assumed.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_internal_assumed.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_internal_assumed.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_internal_assumed.f90?ref=b95605fb0c2052fcd1c2239acaa58748c9efc687", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! Test fix of PR24705 - ICE on assumed character length\n+! internal function.\n+!\n+character (6) :: c\n+  c = f1 ()        ! { dg-error \"must not be assumed length\" }\n+  if (c .ne. 'abcdef') call abort\n+contains\n+  function f1 ()\n+    character (*) :: f1\n+    f1 = 'abcdef'\n+  end function f1\n+end\n\\ No newline at end of file"}, {"sha": "622e1fc0e4ff3c230420bbda8b94c5024df8a138", "filename": "gcc/testsuite/gfortran.dg/substring_equivalence.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstring_equivalence.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95605fb0c2052fcd1c2239acaa58748c9efc687/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstring_equivalence.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstring_equivalence.f90?ref=b95605fb0c2052fcd1c2239acaa58748c9efc687", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+! Tests fix for PR24223 - ICE on equivalence staement.\n+!\n+module FLAGS\n+  character(len=5) :: Encodings\n+  character :: at, dev\n+  equivalence ( encodings(1:1),at ), ( encodings(2:2),dev)\n+end module FLAGS"}]}