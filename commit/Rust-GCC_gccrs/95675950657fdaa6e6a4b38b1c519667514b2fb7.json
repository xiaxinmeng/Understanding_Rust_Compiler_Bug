{"sha": "95675950657fdaa6e6a4b38b1c519667514b2fb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2NzU5NTA2NTdmZGFhNmU2YTRiMzhiMWM1MTk2Njc1MTRiMmZiNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-11-14T16:59:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-11-14T16:59:23Z"}, "message": "class.c (dfs_find_final_overrider): Adjust so that the most derived object is a binfo, rather than a class type.\n\n\t* class.c (dfs_find_final_overrider): Adjust so that the most\n\tderived object is a binfo, rather than a class type.\n\t(find_final_overrider): Likewise.\n\t(add_vcall_offset_vtbl_entries_1): Simplify accordingly.\n\t(add_vcall_offset): Likewise.\n\n\t* g++.dg/abi/vcall1.C: New test.\n\nFrom-SVN: r59104", "tree": {"sha": "bb3736f1db5c429a540ed3d62269e25ee4b036f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3736f1db5c429a540ed3d62269e25ee4b036f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95675950657fdaa6e6a4b38b1c519667514b2fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95675950657fdaa6e6a4b38b1c519667514b2fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95675950657fdaa6e6a4b38b1c519667514b2fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95675950657fdaa6e6a4b38b1c519667514b2fb7/comments", "author": null, "committer": null, "parents": [{"sha": "3dfce4e4fc1256ab3cc4b98e6649247687ead97f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfce4e4fc1256ab3cc4b98e6649247687ead97f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfce4e4fc1256ab3cc4b98e6649247687ead97f"}], "stats": {"total": 124, "additions": 77, "deletions": 47}, "files": [{"sha": "5550411c1bc73b9c4278332f0574b12c4771030c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95675950657fdaa6e6a4b38b1c519667514b2fb7", "patch": "@@ -1,3 +1,11 @@\n+2002-11-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (dfs_find_final_overrider): Adjust so that the most\n+\tderived object is a binfo, rather than a class type.\n+\t(find_final_overrider): Likewise.\n+\t(add_vcall_offset_vtbl_entries_1): Simplify accordingly.\n+\t(add_vcall_offset): Likewise.\n+\n 2002-11-09  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/8389"}, {"sha": "3c2084d252244205e3b2738efb64e8e86dd5df4f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=95675950657fdaa6e6a4b38b1c519667514b2fb7", "patch": "@@ -2220,9 +2220,11 @@ dfs_find_final_overrider (binfo, data)\n       method = NULL_TREE;\n       /* We've found a path to the declaring base.  Walk down the path\n \t looking for an overrider for FN.  */\n-      for (path = reverse_path (binfo);\n-\t   path;\n-\t   path = TREE_CHAIN (path))\n+      path = reverse_path (binfo);\n+      while (!same_type_p (BINFO_TYPE (TREE_VALUE (path)),\n+\t\t\t   ffod->most_derived_type))\n+\tpath = TREE_CHAIN (path);\n+      while (path)\n \t{\n \t  method = look_for_overrides_here (BINFO_TYPE (TREE_VALUE (path)),\n \t\t\t\t\t    ffod->fn);\n@@ -2231,6 +2233,8 @@ dfs_find_final_overrider (binfo, data)\n \t      path = TREE_VALUE (path);\n \t      break;\n \t    }\n+\n+\t  path = TREE_CHAIN (path);\n \t}\n \n       /* If we found an overrider, record the overriding function, and\n@@ -2264,12 +2268,12 @@ dfs_find_final_overrider (binfo, data)\n \n /* Returns a TREE_LIST whose TREE_PURPOSE is the final overrider for\n    FN and whose TREE_VALUE is the binfo for the base where the\n-   overriding occurs.  BINFO (in the hierarchy dominated by T) is the\n-   base object in which FN is declared.  */\n+   overriding occurs.  BINFO (in the hierarchy dominated by the binfo\n+   DERIVED) is the base object in which FN is declared.  */\n \n static tree\n-find_final_overrider (t, binfo, fn)\n-     tree t;\n+find_final_overrider (derived, binfo, fn)\n+     tree derived;\n      tree binfo;\n      tree fn;\n {\n@@ -2295,18 +2299,19 @@ find_final_overrider (t, binfo, fn)\n      different overriders along any two, then there is a problem.  */\n   ffod.fn = fn;\n   ffod.declaring_base = binfo;\n-  ffod.most_derived_type = t;\n+  ffod.most_derived_type = BINFO_TYPE (derived);\n   ffod.candidates = NULL_TREE;\n \n-  dfs_walk (TYPE_BINFO (t),\n+  dfs_walk (derived,\n \t    dfs_find_final_overrider,\n \t    NULL,\n \t    &ffod);\n \n   /* If there was no winner, issue an error message.  */\n   if (!ffod.candidates || TREE_CHAIN (ffod.candidates))\n     {\n-      error (\"no unique final overrider for `%D' in `%T'\", fn, t);\n+      error (\"no unique final overrider for `%D' in `%T'\", fn, \n+\t     BINFO_TYPE (derived));\n       return error_mark_node;\n     }\n \n@@ -2365,7 +2370,7 @@ update_vtable_entry_for_fn (t, binfo, fn, virtuals)\n   first_defn = b;\n \n   /* Find the final overrider.  */\n-  overrider = find_final_overrider (t, b, fn);\n+  overrider = find_final_overrider (TYPE_BINFO (t), b, fn);\n   if (overrider == error_mark_node)\n     return;\n \n@@ -7909,14 +7914,6 @@ add_vcall_offset_vtbl_entries_1 (binfo, vid)\n      tree binfo;\n      vtbl_init_data* vid;\n {\n-  tree binfo_in_rtti;\n-\n-  if (vid->ctor_vtbl_p)\n-    binfo_in_rtti = (get_original_base\n-\t\t     (binfo, TYPE_BINFO (BINFO_TYPE (vid->rtti_binfo))));\n-  else\n-    binfo_in_rtti = binfo;\n-\n   /* Make entries for the rest of the virtuals.  */\n   if (abi_version_at_least (2))\n     {\n@@ -7928,7 +7925,7 @@ add_vcall_offset_vtbl_entries_1 (binfo, vid)\n \t   orig_fn;\n \t   orig_fn = TREE_CHAIN (orig_fn))\n \tif (DECL_VINDEX (orig_fn))\n-\t  add_vcall_offset (orig_fn, binfo_in_rtti, vid);\n+\t  add_vcall_offset (orig_fn, binfo, vid);\n     }\n   else\n     {\n@@ -7993,18 +7990,15 @@ add_vcall_offset_vtbl_entries_1 (binfo, vid)\n \t  if (!same_type_p (DECL_CONTEXT (orig_fn), BINFO_TYPE (binfo)))\n \t    continue;\n \n-\t  add_vcall_offset (orig_fn, binfo_in_rtti, vid);\n+\t  add_vcall_offset (orig_fn, binfo, vid);\n \t}\n     }\n }\n \n-/* Add a vcall offset entry for ORIG_FN to the vtable.  In a\n-   construction vtable, BINFO_IN_RTTI is the base corresponding to the\n-   vtable base in VID->RTTI_BINFO.  */\n+/* Add a vcall offset entry for ORIG_FN to the vtable.  */\n \n static void\n-add_vcall_offset (tree orig_fn, tree binfo_in_rtti,\n-\t\t  vtbl_init_data *vid)\n+add_vcall_offset (tree orig_fn, tree binfo, vtbl_init_data *vid)\n {\n   size_t i;\n   tree vcall_offset;\n@@ -8045,35 +8039,23 @@ add_vcall_offset (tree orig_fn, tree binfo_in_rtti,\n   if (vid->generate_vcall_entries)\n     {\n       tree base;\n-      tree base_binfo;\n       tree fn;\n \n       /* Find the overriding function.  */\n-      fn = find_final_overrider (BINFO_TYPE (vid->rtti_binfo), \n-\t\t\t\t binfo_in_rtti, orig_fn);\n+      fn = find_final_overrider (vid->rtti_binfo, binfo, orig_fn);\n       if (fn == error_mark_node)\n \tvcall_offset = build1 (NOP_EXPR, vtable_entry_type,\n \t\t\t       integer_zero_node);\n       else\n \t{\n-\t  fn = TREE_PURPOSE (fn);\n-\t  /* The FN comes from BASE.  So, we must calculate the\n-\t     adjustment from vid->vbase to BASE.  We can just look for\n-\t     BASE in the complete object because we are converting\n-\t     from a virtual base, so if there were multiple copies,\n-\t     there would not be a unique final overrider and\n-\t     vid->derived would be ill-formed.  */\n-\t  base = DECL_CONTEXT (fn);\n-\t  base_binfo = lookup_base (vid->derived, base, ba_any, NULL);\n-\n-\t  /* Compute the vcall offset.  */\n-\t  /* As mentioned above, the vbase we're working on is a\n-\t     primary base of vid->binfo.  But it might be a lost\n-\t     primary, so its BINFO_OFFSET might be wrong, so we just\n-\t     use the BINFO_OFFSET from vid->binfo.  */\n-\t  vcall_offset = BINFO_OFFSET (vid->binfo);\n-\t  vcall_offset = size_diffop (BINFO_OFFSET (base_binfo),\n-\t\t\t\t      vcall_offset);\n+\t  base = TREE_VALUE (fn);\n+\n+\t  /* The vbase we're working on is a primary base of\n+\t     vid->binfo.  But it might be a lost primary, so its\n+\t     BINFO_OFFSET might be wrong, so we just use the\n+\t     BINFO_OFFSET from vid->binfo.  */\n+\t  vcall_offset = size_diffop (BINFO_OFFSET (base),\n+\t\t\t\t      BINFO_OFFSET (vid->binfo));\n \t  vcall_offset = fold (build1 (NOP_EXPR, vtable_entry_type,\n \t\t\t\t       vcall_offset));\n \t}"}, {"sha": "3caf7d80132d5d55ae5489eecac20d2531fd6fe7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95675950657fdaa6e6a4b38b1c519667514b2fb7", "patch": "@@ -1,3 +1,7 @@\n+2002-11-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/abi/vcall1.C: New test.\n+\n 2002-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20021029-1.c: New test."}, {"sha": "00830cd23d6eded51c7cbdc081ce0def570f091e", "filename": "gcc/testsuite/g++.dg/abi/vcall1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvcall1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95675950657fdaa6e6a4b38b1c519667514b2fb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvcall1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvcall1.C?ref=95675950657fdaa6e6a4b38b1c519667514b2fb7", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do run }\n+// { dg-options \"-w\" }\n+\n+extern \"C\" void abort ();\n+\n+struct B;\n+\n+B* b;\n+\n+struct A {\n+  virtual void f () {}\n+};\n+\n+struct B : virtual public A {\n+  B () {\n+    b = this;\n+    ((A*) this)->f ();\n+  }\n+\n+  virtual void f () {\n+    if (this != b)\n+      abort ();\n+  }\n+};\n+\n+struct C : public B {\n+};\n+\n+struct D : public C, public B {\n+  virtual void f () {}\n+};\n+\n+int main () {\n+  D d;\n+}\n+"}]}