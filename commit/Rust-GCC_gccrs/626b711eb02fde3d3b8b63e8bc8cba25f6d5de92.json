{"sha": "626b711eb02fde3d3b8b63e8bc8cba25f6d5de92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2YjcxMWViMDJmZGUzZDNiOGI2M2U4YmM4Y2JhMjVmNmQ1ZGU5Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-04-20T20:42:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-04-20T20:42:51Z"}, "message": "Remove Chill\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r52560.2", "tree": {"sha": "790b04595de90329d45eb4a98779fff30e3a42d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/790b04595de90329d45eb4a98779fff30e3a42d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/626b711eb02fde3d3b8b63e8bc8cba25f6d5de92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626b711eb02fde3d3b8b63e8bc8cba25f6d5de92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626b711eb02fde3d3b8b63e8bc8cba25f6d5de92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626b711eb02fde3d3b8b63e8bc8cba25f6d5de92/comments", "author": null, "committer": null, "parents": [{"sha": "26b298848293b4bc22eedeec96240509b77a31c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b298848293b4bc22eedeec96240509b77a31c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b298848293b4bc22eedeec96240509b77a31c9"}], "stats": {"total": 252, "additions": 0, "deletions": 252}, "files": [{"sha": "44301edff92658efa8134d262979b2a5ba3948c2", "filename": "gcc/ch/chill.brochure", "status": "removed", "additions": 0, "deletions": 252, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b298848293b4bc22eedeec96240509b77a31c9/gcc%2Fch%2Fchill.brochure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b298848293b4bc22eedeec96240509b77a31c9/gcc%2Fch%2Fchill.brochure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fchill.brochure?ref=26b298848293b4bc22eedeec96240509b77a31c9", "patch": "@@ -1,252 +0,0 @@\n-              GNU CHILL: A Complete CHILL Implementation\n-\n-CHILL (the CCITT High Level Language) is a strongly-typed, block\n-structured language designed primarily for the implementation of large\n-and complex embedded systems.  Tens of millions of lines of CHILL code\n-exist, and about 15,000 programmers world-wide use CHILL.  Many\n-central-office telephone switching systems use CHILL for their control\n-software.\n-\n-CHILL was designed to\n-\n-  - enhance reliability and run time efficiency by means of extensive\n-    compile time checking;\n-  - provide sufficient flexibility and power to encompass the required \n-    range of applications and to exploit a variety of hardware;\n-  _ provide facilities that encourage piecewise and modular development\n-    of large systems;\n-  - cater to real-time implementations by providing built-in concurrency\n-    and time supervision primitives;\n-  - permit the generation of highly efficient object code;\n-  - facilitate ease of use and a short learning curve.\n-\n-CHILL is specified in the \"Blue Book\":\n-\tCCITT High Level Language (CHILL) Recommendation Z.200\n-\tISO/IEC 9496, Geneva 1989           ISBN 92-61-03801-8\n-\n-Cygnus Support has completed the first level implementation of the \n-GNU CHILL compiler.  Our compiler now supports the core features of\n-the CHILL language.  Our goal is a fully retargetable, complete\n-implementation of the Z.200 specification.  The next phase of\n-implementation will include:\n-\n-\t. a minimal real-time kernel for demonstration use\n-\t. more rigorous type checking\n-\t. retargetable input/output\n-\t. interprocess communications\n-\t. fully compliant exception handling.\n-\n-The State of the Implementation\n-\n-The GNU CHILL compiler is in early beta state, performing correct\n-compilation and execution of correctly coded programs.  Like most\n-CHILL compilers, the GNU compiler implements a large subset of the\n-language (as described below).\n-\n-Since it uses the same compiler back-ends as the GNU C and C++\n-compilers, GNU CHILL is almost instantly available on all\n-platforms supported by GNU C, including the following:\n-\n-\tm680xx, i960, i80x86, AMD29K, R3000, R4000, SPARClite,\n-\tHitachi H8 and SH families, Z8001/2\n-\n-It has been specifically tested under SunOS on SPARCs and under\n-SCO Unix on 80386s.\n-\n-All of the GCC optimizations apply to CHILL as well, including \n-function inlining, dead code elimination, jump-to-jump elimination, \n-cross-jumping (tail-merging), constant propagation, common \n-subexpression elimination, loop-invariant code motion, strength \n-reduction, loop unrolling, induction variable elimination, flow\n-analysis (copy propagation, dead store elimination and elimination\n-of unreachable code), dataflow-driven instruction scheduling, and\n-many others.\n-\n-I/O statements are parsed. The anticipated timeframe for I/O code\n-generation is Q1 1994.\n-\n-What's Next\n-\n-The multi-tasking functions require a small real time kernel.\n-A free implementation of such a kernel is not yet available.\n-We plan to offer a productized P-threads interface in Q2 1994.\n-Other runtime functions involving strings and powersets are \n-working.\n-\n-GDB, the GNU Debugger, has been modified to provide simple CHILL\n-support.  Some CHILL expressions are not yet recognized.\n-\f\n-For those who aren't familiar with CHILL, here's a small but\n-useful example program:\n-\n---\n--- Convert binary integers to decimal-coded ASCII string\n---\n-vary1: MODULE\n-\n-  -- include declarations so we can output the test results\n-  <> USE_SEIZE_FILE 'chprintf.grt' <>\n-  SEIZE chprintf;\n-\n-  -- create a new name for the CHAR array mode\n-  SYNMODE dec_string = CHAR (6) VARYING;\n-\n-  int_to_dec_char: PROC (decimal_num INT IN)\n-                   RETURNS (dec_string);\n-\n-    DCL neg_num BOOL := FALSE;        -- save sign of parameter\n-    DCL out_string dec_string;\n-\n-    IF decimal_num < 0 THEN           -- positive numbers are easier\n-      decimal_num := -decimal_num;\n-      neg_num := TRUE;\n-    FI\n-\n-    IF decimal_num = 0 THEN\n-      out_string := '0';                 /* handle zero */\n-    ELSE\n-      out_string := '';\n-      DO WHILE decimal_num /= 0;         -- loop until number is zero\n-\t-- concatenate a new digit in front of the output string\n-        out_string := CHAR (ABS (decimal_num REM D'10) + H'30) \n-\t\t      // out_string;\n-        decimal_num := decimal_num / D'10;\n-      OD;\n-      IF neg_num THEN\n-\t-- prepend a hyphen for numbers < zero\n-        out_string := '-' // out_string;   -- restore sign\n-      FI;\n-    FI;\n-    RESULT out_string;               -- remember result\n-\n-    decimal_num := 0;                -- reset for next call\n-    neg_num := FALSE;\n-    out_string := '      ';\n-\n-  END int_to_dec_char;\n-\n-  /* Try some test cases */\n-  chprintf (int_to_dec_char (123456), 0);\n-  chprintf (\"^J\", 0);\n-\n-  chprintf (int_to_dec_char (-654321), 0);\n-  chprintf (\"^J\", 0);\n-\n-  chprintf (int_to_dec_char (0), 0);\n-  chprintf (\"^J\", 0);\n-\n-END vary1;\n-\f\n-Completeness\n-\n-GNU CHILL currently supports the following features.  This outline\n-generally follows the structure of the Blue Book specification:\n-\n-\tCCITT High Level Language (CHILL) Recommendation Z.200\n-\tISO/IEC 9496, Geneva 1989           ISBN 92-61-03801-8\n-\n-\n-  Modes (types)\n-\tno DYNAMIC modes yet\n-\tdiscrete modes\n-\t\tinteger, boolean, character, real\n-\t\tmultiple integer/real precisions (an extension)\n-\tset modes, range modes\n-\tpowersets\n-\treferences\n-\t  (no ROW modes)\t\n-\tprocedure modes\n-\tinstance modes\n-\tevent modes\n-\tbuffer modes\n-\t(no input/output modes yet)\n-\t(no timing modes yet)\n-\tcomposite modes\n-\t  strings\n-\t  arrays\n-\t  structures\n-\tVARYING string/array modes\n-\t(type-checking is not fully rigorous yet)\n-\tforward references\n-\n-  Expressions\n-\tliterals\n-\ttuples\n-\tslices, ranges\n-\tthe standard operators\n-\n-  Actions (statements)\n-\tassignments\n-\tif .. then .. else .. fi\n-\tcases\n-\tdo action\n-\tdo .. with\n-\texits\n-\tcalls\n-\tresults/returns\n-\tgotos\n-\tassertions\n-\tcause exception\n-\tstart/stop/continue process\n-\n-  Input/Output\n-\t(not yet)\n-\n-  Exception handling\n-\tfully compiled, but exceptions aren't\n-\tgenerated in all of the required situations\n-\n-  Time Supervision\n-\t(syntax only)\n-\n-  Inter-process communications\n-\tdelay/delay case actions\n-\tsend signal/receive case actions\n-\tsend buffer/receive case actions\n-\n-  Multi-module programming\n-\tSeize/grant processing\n-\tmultiple modules per source file\n-\n-\n-Bibliography\n-\n-This list is included as an invitation.  We'd appreciate hearing \n-of CHILL-related documents (with ISBN if possible) which aren't\n-described here.  We're particularly interested in getting copies\n-of other conference Proceedings.\n-\n-\tCCITT High Level Language (CHILL) Recommendation Z.200\n-\tISO/IEC 9496, Geneva 1989                ISBN 92-61-03801-8\n-\t(The \"blue book\". The formal language definition; mostly a\n-\t language-lawyer's document, but more readable than most.)\n-\n-\tStudy Group X - Report R 34\n-\tThis is the May 1992 revision of Z.200.\n-\n-\tAn Analytic Description of CHILL, the CCITT high-level\n-\tlanguage, Branquart, Louis & Wodon, Springer-Verlag 1981\n-                                                 ISBN 3-540-11196-4\n-\n-\tCHILL User's Manual\n-\tCCITT, Geneva 1986                       ISBN 92-61-02601-X\n-\t(Most readable, but doesn't cover the whole language).  \n-\n-\tIntroduction to CHILL\n-\tCCITT, Geneva 1983                       ISBN 92-61-017771-1\n-\n-\tCHILL CCITT High Level Language\n-\tProceedings of the 5th CHILL Conference\n-\tNorth-Holland, 1991                      ISBN 0 444 88904 3\n-\n-\tIntroduction to the CHILL programming Language\n-\tTELEBRAS, Campinas, Brazil 1990\n-\n-\tCHILL: A Self-Instruction Manual\n-\tTelecommunication Institute - PITTC\n-\tAvailable from KVATRO A/S, N-7005 Trondheim, Norway\n-\tPhone: +47 7 52 00 90\n-\t(Great discussion of novelty.)\n-\n-Some of these documents are available from Global Engineering\n-Documents, in Irvine, CA, USA.  +1 714 261 1455."}]}