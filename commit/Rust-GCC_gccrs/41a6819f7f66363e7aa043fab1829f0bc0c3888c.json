{"sha": "41a6819f7f66363e7aa043fab1829f0bc0c3888c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhNjgxOWY3ZjY2MzYzZTdhYTA0M2ZhYjE4MjlmMGJjMGMzODg4Yw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-15T21:05:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-15T21:05:42Z"}, "message": "Merge #568\n\n568: Add missing DefId mappings r=philberty a=philberty\n\nDefIds need to be managed for fntypes which will help in the compilation\r\nof optional traitt functions\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "d32de459923c7b0d04c2049731188e42b9362b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d32de459923c7b0d04c2049731188e42b9362b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a6819f7f66363e7aa043fab1829f0bc0c3888c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8KMmCRBK7hj4Ov3rIwAAsx0IAAANfrjBf0JuQbZf2jOW/DGK\ngR3fHB3grQ8xY/tVRbvpG/aS36RqXre9wjNd3bm1eFSAq6JpnndKbwqz/M2eac0P\n0A5p4xyuamGOdtqH8vwUyBHB8RdGXXAtAkNUIZfpYhe4Js8hnG59yxOQ6qqxyQ8u\nfxPjo4uBsHT1bVgVSpI+ykDrGxpRmjkQSkZ4DUGY3gqSdoFcCompd3WntaTYM5yt\nGSf6rcmCE2aXDMqNSlOh3QWlshUl1Ob1gYhuqoR+RKCX4pvEhgX4rZinZ4EunAVP\n7NN7von/km6/7e2nBHqv89qG4J7xC+uVuprhq2vMNgxIdwAfIRA1CKQKRA0fhZI=\n=EhBu\n-----END PGP SIGNATURE-----\n", "payload": "tree d32de459923c7b0d04c2049731188e42b9362b7d\nparent b322f221ce0564b082ba011e570f76c318d013a4\nparent ea04a9ff1d0ed60332298ee07d94c1c73384b21f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626383142 +0000\ncommitter GitHub <noreply@github.com> 1626383142 +0000\n\nMerge #568\n\n568: Add missing DefId mappings r=philberty a=philberty\n\nDefIds need to be managed for fntypes which will help in the compilation\r\nof optional traitt functions\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a6819f7f66363e7aa043fab1829f0bc0c3888c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a6819f7f66363e7aa043fab1829f0bc0c3888c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a6819f7f66363e7aa043fab1829f0bc0c3888c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b322f221ce0564b082ba011e570f76c318d013a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b322f221ce0564b082ba011e570f76c318d013a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b322f221ce0564b082ba011e570f76c318d013a4"}, {"sha": "ea04a9ff1d0ed60332298ee07d94c1c73384b21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea04a9ff1d0ed60332298ee07d94c1c73384b21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea04a9ff1d0ed60332298ee07d94c1c73384b21f"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "6e4c0b183aa1ced46eea1d4660e143bff5e7e488", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -70,13 +70,14 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated = new HIR::TypeAlias (mapping, alias.get_new_type_name (),\n-\t\t\t\t     std::move (generic_params),\n-\t\t\t\t     std::move (where_clause),\n-\t\t\t\t     std::unique_ptr<HIR::Type> (existing_type),\n-\t\t\t\t     std::move (vis), alias.get_outer_attrs (),\n-\t\t\t\t     alias.get_locus ());\n+    auto type_alias = new HIR::TypeAlias (\n+      mapping, alias.get_new_type_name (), std::move (generic_params),\n+      std::move (where_clause), std::unique_ptr<HIR::Type> (existing_type),\n+      std::move (vis), alias.get_outer_attrs (), alias.get_locus ());\n \n+    translated = type_alias;\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), type_alias);\n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id,\n \t\t\t\t   translated);\n@@ -104,6 +105,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t       constant.get_locus ());\n     translated = translated_constant;\n \n+    mappings->insert_defid_mapping (mapping.get_defid (), translated_constant);\n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id,\n \t\t\t\t   translated);\n@@ -177,6 +179,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t   std::move (vis), function.get_outer_attrs (),\n \t\t\t   HIR::SelfParam::error (), locus);\n \n+    mappings->insert_defid_mapping (mapping.get_defid (), fn);\n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id, fn);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n@@ -257,6 +260,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t   std::move (vis), method.get_outer_attrs (),\n \t\t\t   std::move (self_param), locus);\n \n+    mappings->insert_defid_mapping (mapping.get_defid (), mth);\n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id, mth);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n@@ -358,7 +362,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, func.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     translated\n       = new HIR::TraitItemFunc (mapping, std::move (decl),\n@@ -422,7 +426,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, method.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     translated\n       = new HIR::TraitItemFunc (mapping, std::move (decl),\n@@ -441,7 +445,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, constant.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     translated = new HIR::TraitItemConst (mapping, constant.get_identifier (),\n \t\t\t\t\t  std::unique_ptr<HIR::Type> (type),\n@@ -457,7 +461,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     translated\n       = new HIR::TraitItemType (mapping, type.get_identifier (),"}, {"sha": "9df6b746bb7737c601ce0dbe7e3cb46df363472b", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -283,7 +283,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, function.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     mappings->insert_location (crate_num,\n \t\t\t       function_body->get_mappings ().get_hirid (),"}, {"sha": "5f6fcd99cdc55c02b355b1ab5fa1d6fc53660861", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -135,6 +135,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t\t    function.get_mappings ().get_defid (),\n \t\t\t\t    function.get_function_name (),\n \t\t\t\t    function.is_method (), std::move (params),\n \t\t\t\t    ret_type, std::move (substitutions));"}, {"sha": "ba821ca82aa5148ce5ba764e7a20cb1acd40b15f", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -276,6 +276,7 @@ class TypeCheckStmt : public TypeCheckBase\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t\t    function.get_mappings ().get_defid (),\n \t\t\t\t    function.get_function_name (), false,\n \t\t\t\t    std::move (params), ret_type,\n \t\t\t\t    std::move (substitutions));"}, {"sha": "dd3dd751ad6cd3ff3e9e846f500f3fcdadd0614b", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -229,6 +229,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n       }\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t\t    function.get_mappings ().get_defid (),\n \t\t\t\t    function.get_function_name (), false,\n \t\t\t\t    std::move (params), ret_type,\n \t\t\t\t    std::move (substitutions));"}, {"sha": "cb2896c0bb496b02f8e2cac045261293bb67a688", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -498,6 +498,7 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n     }\n \n   return new TyTy::FnType (fn.get_mappings ().get_hirid (),\n+\t\t\t   fn.get_mappings ().get_defid (),\n \t\t\t   function.get_function_name (), function.is_method (),\n \t\t\t   std::move (params), ret_type, substitutions);\n }"}, {"sha": "ab473100d1e7579f1dfd627f9399368255c454a2", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -715,7 +715,7 @@ FnType::clone ()\n     cloned_params.push_back (\n       std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n \n-  return new FnType (get_ref (), get_ty_ref (), get_identifier (),\n+  return new FnType (get_ref (), get_ty_ref (), get_id (), get_identifier (),\n \t\t     is_method_flag, std::move (cloned_params),\n \t\t     get_return_type ()->clone (), clone_substs (),\n \t\t     get_combined_refs ());"}, {"sha": "e2f15956dcdc071a674d7ae28b828327d5d44c0a", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6819f7f66363e7aa043fab1829f0bc0c3888c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=41a6819f7f66363e7aa043fab1829f0bc0c3888c", "patch": "@@ -929,27 +929,34 @@ class ADTType : public BaseType, public SubstitutionRef\n class FnType : public BaseType, public SubstitutionRef\n {\n public:\n-  FnType (HirId ref, std::string identifier, bool is_method,\n+  FnType (HirId ref, DefId id, std::string identifier, bool is_method,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n       params (std::move (params)), type (type), is_method_flag (is_method),\n-      identifier (identifier)\n-  {}\n+      identifier (identifier), id (id)\n+  {\n+    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n+  }\n \n-  FnType (HirId ref, HirId ty_ref, std::string identifier, bool is_method,\n+  FnType (HirId ref, HirId ty_ref, DefId id, std::string identifier,\n+\t  bool is_method,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n       params (params), type (type), is_method_flag (is_method),\n-      identifier (identifier)\n-  {}\n+      identifier (identifier), id (id)\n+  {\n+    LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n+    rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n+  }\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -974,6 +981,8 @@ class FnType : public BaseType, public SubstitutionRef\n     return is_method_flag;\n   }\n \n+  DefId get_id () const { return id; }\n+\n   // get the Self type for the method\n   BaseType *get_self_type () const\n   {\n@@ -1026,6 +1035,7 @@ class FnType : public BaseType, public SubstitutionRef\n   BaseType *type;\n   bool is_method_flag;\n   std::string identifier;\n+  DefId id;\n };\n \n class FnPtr : public BaseType"}]}