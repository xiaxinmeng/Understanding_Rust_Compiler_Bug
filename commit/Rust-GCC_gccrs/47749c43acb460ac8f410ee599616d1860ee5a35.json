{"sha": "47749c43acb460ac8f410ee599616d1860ee5a35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3NDljNDNhY2I0NjBhYzhmNDEwZWU1OTk2MTZkMTg2MGVlNWEzNQ==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-06-23T04:09:30Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-06-23T04:09:30Z"}, "message": "rs6000: Fix typos in float128 ISA3.1 support\n\nThe recent float128 ISA3.1 support (r12-1340) has some typos,\nit makes the libgcc build fail if it's with one binutils\n(assembler) which doesn't support Power10 insns.  The error\nlooks like:\n\nError: invalid switch -mpower10\nError: unrecognized option -mpower10\n... [...libgcc/shared-object.mk:14: float128-p10.o] Error 1\n\nWhat this patch does are:\n  - fix test target typo libgcc_cv_powerpc_3_1_float128_hw\n    (written wrongly as libgcc_cv_powerpc_float128_hw, so it's\n     going to build ISA3.1 stuffs just when detecting ISA3.0).\n  - fix test used for libgcc_cv_powerpc_3_1_float128_hw check.\n  - fix test option used for libgcc_cv_powerpc_3_1_float128_hw\n    check.\n  - remove the ISA3.1 related contents from t-float128-hw.\n  - add new macro FLOAT128_HW_INSNS_ISA3_1 to differentiate\n    ISA3.1 content from ISA3.0 part in ifunc support.\n\nBootstrapped/regtested on:\n  - powerpc64le-linux-gnu P10\n  - powerpc64le-linux-gnu P9 (w/i and w/o p10 supported as)\n  - powerpc64-linux-gnu P8 (w/i and w/o p10 supported as)\n\nlibgcc/ChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac (test for libgcc_cv_powerpc_3_1_float128_hw): Fix\n\ttypos among the name, CFLAGS and the test.\n\t* config/rs6000/t-float128-hw (fp128_3_1_hw_funcs, fp128_3_1_hw_src,\n\tfp128_3_1_hw_static_obj, fp128_3_1_hw_shared_obj, fp128_3_1_hw_obj):\n\tRemove.\n\t* config/rs6000/t-float128-p10-hw (FLOAT128_HW_INSNS): Append\n\tmacro FLOAT128_HW_INSNS_ISA3_1.\n\t(FP128_3_1_CFLAGS_HW): Fix option typo.\n\t* config/rs6000/float128-ifunc.c (SW_OR_HW_ISA3_1): Guard this with\n\tFLOAT128_HW_INSNS_ISA3_1.\n\t(__floattikf_resolve): Likewise.\n\t(__floatuntikf_resolve): Likewise.\n\t(__fixkfti_resolve): Likewise.\n\t(__fixunskfti_resolve): Likewise.\n\t(__floattikf): Likewise.\n\t(__floatuntikf): Likewise.\n\t(__fixkfti): Likewise.\n\t(__fixunskfti): Likewise.", "tree": {"sha": "ffe0cb68fe12b660369896b5ff9f8f73a799a663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffe0cb68fe12b660369896b5ff9f8f73a799a663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47749c43acb460ac8f410ee599616d1860ee5a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47749c43acb460ac8f410ee599616d1860ee5a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47749c43acb460ac8f410ee599616d1860ee5a35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47749c43acb460ac8f410ee599616d1860ee5a35/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419af06a35933fb1bb7c87fe9c7306755afce9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419af06a35933fb1bb7c87fe9c7306755afce9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419af06a35933fb1bb7c87fe9c7306755afce9a0"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "ef7f731bf0b16e13b905b28cd9b5e2fdebbcafe5", "filename": "libgcc/config/rs6000/float128-ifunc.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c?ref=47749c43acb460ac8f410ee599616d1860ee5a35", "patch": "@@ -46,7 +46,9 @@\n #endif\n \n #define SW_OR_HW(SW, HW) (__builtin_cpu_supports (\"ieee128\") ? HW : SW)\n+#ifdef FLOAT128_HW_INSNS_ISA3_1\n #define SW_OR_HW_ISA3_1(SW, HW) (__builtin_cpu_supports (\"arch_3_1\") ? HW : SW)\n+#endif\n \n /* Resolvers.  */\n static __typeof__ (__addkf3_sw) *\n@@ -97,6 +99,7 @@ __floatdikf_resolve (void)\n   return SW_OR_HW (__floatdikf_sw, __floatdikf_hw);\n }\n \n+#ifdef FLOAT128_HW_INSNS_ISA3_1\n static __typeof__ (__floattikf_sw) *\n __floattikf_resolve (void)\n {\n@@ -108,6 +111,7 @@ __floatuntikf_resolve (void)\n {\n   return SW_OR_HW_ISA3_1 (__floatuntikf_sw, __floatuntikf_hw);\n }\n+#endif\n \n static __typeof__ (__floatunsikf_sw) *\n __floatunsikf_resolve (void)\n@@ -121,7 +125,7 @@ __floatundikf_resolve (void)\n   return SW_OR_HW (__floatundikf_sw, __floatundikf_hw);\n }\n \n-\n+#ifdef FLOAT128_HW_INSNS_ISA3_1\n static __typeof__ (__fixkfti_sw) *\n __fixkfti_resolve (void)\n {\n@@ -133,6 +137,7 @@ __fixunskfti_resolve (void)\n {\n   return SW_OR_HW_ISA3_1 (__fixunskfti_sw, __fixunskfti_hw);\n }\n+#endif\n \n static __typeof__ (__fixkfsi_sw) *\n __fixkfsi_resolve (void)\n@@ -323,6 +328,7 @@ TFtype __floatsikf (SItype_ppc)\n TFtype __floatdikf (DItype_ppc)\n   __attribute__ ((__ifunc__ (\"__floatdikf_resolve\")));\n \n+#ifdef FLOAT128_HW_INSNS_ISA3_1\n TFtype __floattikf (TItype_ppc)\n   __attribute__ ((__ifunc__ (\"__floattikf_resolve\")));\n \n@@ -334,6 +340,7 @@ TItype_ppc __fixkfti (TFtype)\n \n UTItype_ppc __fixunskfti (TFtype)\n   __attribute__ ((__ifunc__ (\"__fixunskfti_resolve\")));\n+#endif\n \n TFtype __floatunsikf (USItype_ppc)\n   __attribute__ ((__ifunc__ (\"__floatunsikf_resolve\")));"}, {"sha": "d64ca4dd69438bb1a01cef65ee2a8de534c71aba", "filename": "libgcc/config/rs6000/t-float128-hw", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw?ref=47749c43acb460ac8f410ee599616d1860ee5a35", "patch": "@@ -13,13 +13,6 @@ fp128_hw_static_obj\t= $(addsuffix $(objext),$(fp128_hw_funcs))\n fp128_hw_shared_obj\t= $(addsuffix _s$(objext),$(fp128_hw_funcs))\n fp128_hw_obj\t\t= $(fp128_hw_static_obj) $(fp128_hw_shared_obj)\n \n-# New functions for ISA 3.1 hardware support\n-fp128_3_1_hw_funcs\t= float128-p10\n-fp128_3_1_hw_src\t= $(srcdir)/config/rs6000/float128-p10.c\n-fp128_3_1_hw_static_obj\t= $(addsuffix $(objext),$(fp128_3_1_hw_funcs))\n-fp128_3_1_hw_shared_obj\t= $(addsuffix _s$(objext),$(fp128_3_1_hw_funcs))\n-fp128_3_1_hw_obj\t= $(fp128_3_1_hw_static_obj) $(fp128_3_1_hw_shared_obj)\n-\n fp128_ifunc_funcs\t= float128-ifunc\n fp128_ifunc_src\t\t= $(srcdir)/config/rs6000/float128-ifunc.c\n fp128_ifunc_static_obj\t= float128-ifunc$(objext)\n@@ -37,18 +30,9 @@ FP128_CFLAGS_HW\t\t = -Wno-type-limits -mvsx -mfloat128 \\\n \t\t\t   -I$(srcdir)/config/rs6000 \\\n \t\t\t   $(FLOAT128_HW_INSNS)\n \n-FP128_3_1_CFLAGS_HW\t = -Wno-type-limits -mvsx -mcpu=power10 \\\n-\t\t\t   -mfloat128-hardware -mno-gnu-attribute \\\n-\t\t\t   -I$(srcdir)/soft-fp \\\n-\t\t\t   -I$(srcdir)/config/rs6000 \\\n-\t\t\t   $(FLOAT128_HW_INSNS)\n-\n $(fp128_hw_obj)\t\t : INTERNAL_CFLAGS += $(FP128_CFLAGS_HW)\n $(fp128_hw_obj)\t\t : $(srcdir)/config/rs6000/t-float128-hw\n \n-$(fp128_3_1_hw_obj)\t : INTERNAL_CFLAGS += $(FP128_3_1_CFLAGS_HW)\n-$(fp128_3_1_hw_obj)\t : $(srcdir)/config/rs6000/t-float128-p10-hw\n-\n $(fp128_ifunc_obj)\t : INTERNAL_CFLAGS += $(FP128_CFLAGS_SW)\n $(fp128_ifunc_obj)\t : $(srcdir)/config/rs6000/t-float128-hw\n "}, {"sha": "edaaee0e478bde2a1a3f1de805e016bb364c3672", "filename": "libgcc/config/rs6000/t-float128-p10-hw", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfig%2Frs6000%2Ft-float128-p10-hw", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfig%2Frs6000%2Ft-float128-p10-hw", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128-p10-hw?ref=47749c43acb460ac8f410ee599616d1860ee5a35", "patch": "@@ -2,7 +2,7 @@\n # Tell the float128 functions that the ISA 3.1 hardware support can\n # be compiled it to be selected via IFUNC functions.\n \n-FLOAT128_HW_INSNS\t= -DFLOAT128_HW_INSNS\n+FLOAT128_HW_INSNS\t+= -DFLOAT128_HW_INSNS_ISA3_1\n \n # New functions for hardware support\n \n@@ -14,7 +14,7 @@ fp128_3_1_hw_obj\t= $(fp128_3_1_hw_static_obj) $(fp128_3_1_hw_shared_obj)\n \n # Build the hardware support functions with appropriate hardware support\n FP128_3_1_CFLAGS_HW\t = -Wno-type-limits -mvsx -mfloat128 \\\n-\t\t\t   -mpower10 \\\n+\t\t\t   -mcpu=power10 \\\n \t\t\t   -mfloat128-hardware -mno-gnu-attribute \\\n \t\t\t   -I$(srcdir)/soft-fp \\\n \t\t\t   -I$(srcdir)/config/rs6000 \\"}, {"sha": "4919a56f51810665804b9d38b00c2848605d719c", "filename": "libgcc/configure", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=47749c43acb460ac8f410ee599616d1860ee5a35", "patch": "@@ -5265,10 +5265,10 @@ $as_echo \"$libgcc_cv_powerpc_float128_hw\" >&6; }\n   CFLAGS=\"$saved_CFLAGS\"\n \n   saved_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"$CFLAGS -mpower10 -mfloat128-hardware\"\n+  CFLAGS=\"$CFLAGS -mcpu=power10 -mfloat128-hardware\"\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for PowerPC ISA 3.1 to build hardware __float128 libraries\" >&5\n $as_echo_n \"checking for PowerPC ISA 3.1 to build hardware __float128 libraries... \" >&6; }\n-if ${libgcc_cv_powerpc_float128_hw+:} false; then :\n+if ${libgcc_cv_powerpc_3_1_float128_hw+:} false; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -5280,15 +5280,15 @@ else\n      #ifndef __BUILTIN_CPU_SUPPORTS__\n      #error \"__builtin_cpu_supports is not available\"\n      #endif\n-     vector unsigned char add (vector unsigned char a, vector unsigned char b)\n+     vector unsigned char conv (vector unsigned char qs)\n      {\n        vector unsigned char ret;\n-       __asm__ (\"xscvsqqp %0,%1,%2\" : \"=v\" (ret) : \"v\" (a), \"v\" (b));\n+       __asm__ (\"xscvsqqp %0,%1\" : \"=v\" (ret) : \"v\" (qs));\n        return ret;\n      }\n-     void *add_resolver (void) { return (void *) add; }\n-     __float128 add_ifunc (__float128, __float128)\n-\t__attribute__ ((__ifunc__ (\"add_resolver\")));\n+     void *conv_resolver (void) { return (void *) conv; }\n+     __float128 conv_ifunc (__float128)\n+\t__attribute__ ((__ifunc__ (\"conv_resolver\")));\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   libgcc_cv_powerpc_3_1_float128_hw=yes\n@@ -5297,8 +5297,8 @@ else\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_hw\" >&5\n-  $as_echo \"$libgcc_cv_powerpc_float128_hw\" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_3_1_float128_hw\" >&5\n+$as_echo \"$libgcc_cv_powerpc_3_1_float128_hw\" >&6; }\n   CFLAGS=\"$saved_CFLAGS\"\n esac\n "}, {"sha": "13a80b2551bc360ca6018679c91e4bd8a44d0653", "filename": "libgcc/configure.ac", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47749c43acb460ac8f410ee599616d1860ee5a35/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=47749c43acb460ac8f410ee599616d1860ee5a35", "patch": "@@ -460,9 +460,9 @@ powerpc*-*-linux*)\n   CFLAGS=\"$saved_CFLAGS\"\n \n   saved_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"$CFLAGS -mpower10 -mfloat128-hardware\"\n+  CFLAGS=\"$CFLAGS -mcpu=power10 -mfloat128-hardware\"\n   AC_CACHE_CHECK([for PowerPC ISA 3.1 to build hardware __float128 libraries],\n-\t\t [libgcc_cv_powerpc_float128_hw],\n+\t\t [libgcc_cv_powerpc_3_1_float128_hw],\n \t\t [AC_COMPILE_IFELSE(\n     [AC_LANG_SOURCE([#include <sys/auxv.h>\n      #ifndef AT_PLATFORM\n@@ -471,15 +471,15 @@ powerpc*-*-linux*)\n      #ifndef __BUILTIN_CPU_SUPPORTS__\n      #error \"__builtin_cpu_supports is not available\"\n      #endif\n-     vector unsigned char add (vector unsigned char a, vector unsigned char b)\n+     vector unsigned char conv (vector unsigned char qs)\n      {\n        vector unsigned char ret;\n-       __asm__ (\"xscvsqqp %0,%1,%2\" : \"=v\" (ret) : \"v\" (a), \"v\" (b));\n+       __asm__ (\"xscvsqqp %0,%1\" : \"=v\" (ret) : \"v\" (qs));\n        return ret;\n      }\n-     void *add_resolver (void) { return (void *) add; }\n-     __float128 add_ifunc (__float128, __float128)\n-\t__attribute__ ((__ifunc__ (\"add_resolver\")));])],\n+     void *conv_resolver (void) { return (void *) conv; }\n+     __float128 conv_ifunc (__float128)\n+\t__attribute__ ((__ifunc__ (\"conv_resolver\")));])],\n     [libgcc_cv_powerpc_3_1_float128_hw=yes],\n     [libgcc_cv_powerpc_3_1_float128_hw=no])])\n   CFLAGS=\"$saved_CFLAGS\""}]}