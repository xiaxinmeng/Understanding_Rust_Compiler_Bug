{"sha": "17ceee7c278bd16b0b0af3f31ebf850240068a51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjZWVlN2MyNzhiZDE2YjBiMGFmM2YzMWViZjg1MDI0MDA2OGE1MQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-03-22T01:45:49Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-03-22T01:45:49Z"}, "message": "extend.texi (6.11 Additional Floating Types): Revise.\n\n2017-03-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* doc/extend.texi (6.11 Additional Floating Types): Revise.\n\nFrom-SVN: r246343", "tree": {"sha": "cfca8d81b56c7dd8f3fe732467ca81658f44e0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfca8d81b56c7dd8f3fe732467ca81658f44e0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17ceee7c278bd16b0b0af3f31ebf850240068a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ceee7c278bd16b0b0af3f31ebf850240068a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ceee7c278bd16b0b0af3f31ebf850240068a51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ceee7c278bd16b0b0af3f31ebf850240068a51/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d563e2ebb083e29c7105bf745ae9f8fc039d5f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d563e2ebb083e29c7105bf745ae9f8fc039d5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d563e2ebb083e29c7105bf745ae9f8fc039d5f6"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "9f2e613f76e9b100a91c5847f62624d97adac358", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ceee7c278bd16b0b0af3f31ebf850240068a51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ceee7c278bd16b0b0af3f31ebf850240068a51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17ceee7c278bd16b0b0af3f31ebf850240068a51", "patch": "@@ -1,3 +1,7 @@\n+2017-03-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* doc/extend.texi (6.11 Additional Floating Types): Revise.\n+\n 2017-03-21  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Add"}, {"sha": "b4d647067eef344b9842774845bcaa122095fa77", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ceee7c278bd16b0b0af3f31ebf850240068a51/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ceee7c278bd16b0b0af3f31ebf850240068a51/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=17ceee7c278bd16b0b0af3f31ebf850240068a51", "patch": "@@ -948,16 +948,50 @@ names can be used together with @code{_Complex} to declare complex\n types.\n \n As an extension, GNU C and GNU C++ support additional floating\n-types, @code{__float80} and @code{__float128} to support 80-bit\n-(@code{XFmode}) and 128-bit (@code{TFmode}) floating types; these are\n-aliases for the type names @code{_Float64x} and @code{_Float128}.\n-Support for additional types includes the arithmetic operators:\n+types, which are not supported by all targets.\n+@itemize @bullet\n+@item @code{__float128} is available on i386, x86_64, IA-64, and\n+hppa HP-UX, as well as on PowerPC GNU/Linux targets that enable\n+the vector scalar (VSX) instruction set.  @code{__float128} supports\n+the 128-bit floating type.  On i386, x86_64, PowerPC, and IA-64\n+other than HP-UX, @code{__float128} is an alias for @code{_Float128}.\n+On hppa and IA-64 HP-UX, @code{__float128} is an alias for @code{long\n+double}.\n+\n+@item @code{__float80} is available on the i386, x86_64, and IA-64\n+targets, and supports the 80-bit (@code{XFmode}) floating type.  It is\n+an alias for the type name @code{_Float64x} on these targets.\n+\n+@item @code{__ibm128} is available on PowerPC targets, and provides\n+access to the IBM extended double format which is the current format\n+used for @code{long double}.  When @code{long double} transitions to\n+@code{__float128} on PowerPC in the future, @code{__ibm128} will remain\n+for use in conversions between the two types.\n+@end itemize\n+\n+Support for these additional types includes the arithmetic operators:\n add, subtract, multiply, divide; unary arithmetic operators;\n relational operators; equality operators; and conversions to and from\n integer and other floating types.  Use a suffix @samp{w} or @samp{W}\n in a literal constant of type @code{__float80} or type\n @code{__ibm128}.  Use a suffix @samp{q} or @samp{Q} for @code{_float128}.\n \n+In order to use @code{_Float128}, @code{__float128}, and @code{__ibm128}\n+on PowerPC Linux systems, you must use the @option{-mfloat128} option. It is\n+expected in future versions of GCC that @code{_Float128} and @code{__float128}\n+will be enabled automatically.\n+\n+The @code{_Float128} type is supported on all systems where\n+@code{__float128} is supported or where @code{long double} has the\n+IEEE binary128 format.  The @code{_Float64x} type is supported on all\n+systems where @code{__float128} is supported.  The @code{_Float32}\n+type is supported on all systems supporting IEEE binary32; the\n+@code{_Float64} and @code{_Float32x} types are supported on all systems\n+supporting IEEE binary64.  The @code{_Float16} type is supported on AArch64\n+systems by default, and on ARM systems when the IEEE format for 16-bit\n+floating-point types is selected with @option{-mfp16-format=ieee}.\n+GCC does not currently support @code{_Float128x} on any systems.\n+\n On the i386, x86_64, IA-64, and HP-UX targets, you can declare complex\n types using the corresponding internal complex type, @code{XCmode} for\n @code{__float80} type and @code{TCmode} for @code{__float128} type:\n@@ -967,16 +1001,6 @@ typedef _Complex float __attribute__((mode(TC))) _Complex128;\n typedef _Complex float __attribute__((mode(XC))) _Complex80;\n @end smallexample\n \n-In order to use @code{_Float128}, @code{__float128} and\n-@code{__ibm128} on PowerPC Linux\n-systems, you must use the @option{-mfloat128}. It is expected in\n-future versions of GCC that @code{_Float128} and @code{__float128}\n-will be enabled\n-automatically.  In addition, there are currently problems in using the\n-complex @code{__float128} type.  When these problems are fixed, you\n-would use the following syntax to declare @code{_Complex128} to be a\n-complex @code{__float128} type:\n-\n On the PowerPC Linux VSX targets, you can declare complex types using\n the corresponding internal complex type, @code{KCmode} for\n @code{__float128} type and @code{ICmode} for @code{__ibm128} type:\n@@ -986,27 +1010,6 @@ typedef _Complex float __attribute__((mode(KC))) _Complex_float128;\n typedef _Complex float __attribute__((mode(IC))) _Complex_ibm128;\n @end smallexample\n \n-Not all targets support additional floating-point types.\n-@code{__float80} and @code{__float128} types are supported on x86 and\n-IA-64 targets.  The @code{__float128} type is supported on hppa HP-UX.\n-The @code{__float128} type is supported on PowerPC 64-bit Linux\n-systems by default if the vector scalar instruction set (VSX) is\n-enabled.  The @code{_Float128} type is supported on all systems where\n-@code{__float128} is supported or where @code{long double} has the\n-IEEE binary128 format.  The @code{_Float64x} type is supported on all\n-systems where @code{__float128} is supported.  The @code{_Float32}\n-type is supported on all systems supporting IEEE binary32; the\n-@code{_Float64} and @code{Float32x} types are supported on all systems\n-supporting IEEE binary64.  The @code{_Float16} type is supported on AArch64\n-systems by default, and on ARM systems when the IEEE format for 16-bit\n-floating-point types is selected with @option{-mfp16-format=ieee}.\n-GCC does not currently support @code{_Float128x} on any systems.\n-\n-On the PowerPC, @code{__ibm128} provides access to the IBM extended\n-double format, and it is intended to be used by the library functions\n-that handle conversions if/when long double is changed to be IEEE\n-128-bit floating point.\n-\n @node Half-Precision\n @section Half-Precision Floating Point\n @cindex half-precision floating point"}]}