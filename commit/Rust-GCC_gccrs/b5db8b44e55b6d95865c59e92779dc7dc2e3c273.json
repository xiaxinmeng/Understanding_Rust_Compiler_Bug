{"sha": "b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkYjhiNDRlNTViNmQ5NTg2NWM1OWU5Mjc3OWRjN2RjMmUzYzI3Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-03T12:42:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-03T12:42:07Z"}, "message": "tree-cfgcleanup.c (want_merge_blocks_p): New function.\n\n\n\t* tree-cfgcleanup.c (want_merge_blocks_p): New function.\n        (cleanup_tree_cfg_bb): Use it.\n\t* profile-count.h (profile_count::of_for_merging, profile_count::merge):\n\tNew functions.\n\t* tree-cfg.c (gimple_merge_blocks): Use profile_count::merge.\n\nFrom-SVN: r249907", "tree": {"sha": "a28dda296bdd6460ef9fc637fbd48af72ecf5a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28dda296bdd6460ef9fc637fbd48af72ecf5a5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/comments", "author": null, "committer": null, "parents": [{"sha": "edfe99a43c4c1b96132511c45c1cc0e627c4e1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfe99a43c4c1b96132511c45c1cc0e627c4e1be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfe99a43c4c1b96132511c45c1cc0e627c4e1be"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "3d0826ae6c9ee4e05c777528199993b0b879b716", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "patch": "@@ -1,3 +1,11 @@\n+2017-07-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-cfgcleanup.c (want_merge_blocks_p): New function.\n+        (cleanup_tree_cfg_bb): Use it.\n+\t* profile-count.h (profile_count::of_for_merging, profile_count::merge):\n+\tNew functions.\n+\t* tree-cfg.c (gimple_merge_blocks): Use profile_count::merge.\n+\n 2017-07-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR bootstrap/81285"}, {"sha": "e63b964413a9215e0f4adc0e47c96b6c090100c5", "filename": "gcc/profile-count.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "patch": "@@ -565,6 +565,31 @@ class GTY(()) profile_count\n       return initialized_p ();\n     }\n \n+  /* When merging basic blocks, the two different profile counts are unified.\n+     Return true if this can be done without losing info about profile.\n+     The only case we care about here is when first BB contains something\n+     that makes it terminate in a way not visible in CFG.  */\n+  bool ok_for_merging (profile_count other) const\n+    {\n+      if (m_quality < profile_adjusted\n+\t  || other.m_quality < profile_adjusted)\n+\treturn true;\n+      return !(other < *this);\n+    }\n+\n+  /* When merging two BBs with different counts, pick common count that looks\n+     most representative.  */\n+  profile_count merge (profile_count other) const\n+    {\n+      if (*this == other || !other.initialized_p ()\n+\t  || m_quality > other.m_quality)\n+\treturn *this;\n+      if (other.m_quality > m_quality\n+\t  || other > *this)\n+\treturn other;\n+      return *this;\n+    }\n+\n   /* Basic operations.  */\n   bool operator== (const profile_count &other) const\n     {"}, {"sha": "e0cee12a69ebf12d0ffd756f3c586fd8c2963ae5", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "patch": "@@ -2076,7 +2076,7 @@ gimple_merge_blocks (basic_block a, basic_block b)\n      profiles.  */\n   if (a->loop_father == b->loop_father)\n     {\n-      a->count = MAX (a->count, b->count);\n+      a->count = a->count.merge (b->count);\n       a->frequency = MAX (a->frequency, b->frequency);\n     }\n "}, {"sha": "c6e5c8da03c3391e1da693281d6ebf8ff2f2b3b2", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5db8b44e55b6d95865c59e92779dc7dc2e3c273/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=b5db8b44e55b6d95865c59e92779dc7dc2e3c273", "patch": "@@ -636,6 +636,19 @@ fixup_noreturn_call (gimple *stmt)\n   return changed;\n }\n \n+/* Return true if we want to merge BB1 and BB2 into a single block.  */\n+\n+static bool\n+want_merge_blocks_p (basic_block bb1, basic_block bb2)\n+{\n+  if (!can_merge_blocks_p (bb1, bb2))\n+    return false;\n+  gimple_stmt_iterator gsi = gsi_last_nondebug_bb (bb1);\n+  if (gsi_end_p (gsi) || !stmt_can_terminate_bb_p (gsi_stmt (gsi)))\n+    return true;\n+  return bb1->count.ok_for_merging (bb2->count);\n+}\n+\n \n /* Tries to cleanup cfg in basic block BB.  Returns true if anything\n    changes.  */\n@@ -652,7 +665,7 @@ cleanup_tree_cfg_bb (basic_block bb)\n      This happens when we visit BBs in a non-optimal order and\n      avoids quadratic behavior with adjusting stmts BB pointer.  */\n   if (single_pred_p (bb)\n-      && can_merge_blocks_p (single_pred (bb), bb))\n+      && want_merge_blocks_p (single_pred (bb), bb))\n     /* But make sure we _do_ visit it.  When we remove unreachable paths\n        ending in a backedge we fail to mark the destinations predecessors\n        as changed.  */\n@@ -662,7 +675,7 @@ cleanup_tree_cfg_bb (basic_block bb)\n      conditional branches (due to the elimination of single-valued PHI\n      nodes).  */\n   else if (single_succ_p (bb)\n-\t   && can_merge_blocks_p (bb, single_succ (bb)))\n+\t   && want_merge_blocks_p (bb, single_succ (bb)))\n     {\n       merge_blocks (bb, single_succ (bb));\n       return true;"}]}