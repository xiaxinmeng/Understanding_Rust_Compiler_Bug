{"sha": "6a237c45305054f59be3ceb3b1192f4ee776ee81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyMzdjNDUzMDUwNTRmNTliZTNjZWIzYjExOTJmNGVlNzc2ZWU4MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:34:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:34:02Z"}, "message": "[multiple changes]\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* s-ststop.ads, s-ststop.adb, rtsfind.ads (String_Input_Tag):\n\tNew routine to read the Tag robustly.\n\t* exp_attr.adb (Input): Change the expansion of 'Input,\n\tin the class-wide case, to call String_Input_Tag instead of\n\tString_Input_Blk_IO.\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-rident.ads (Restriction_Id): reorder enum\n\tliterals, so that Pure_Barriers is no longer in range of the\n\tCunit_Boolean_Restrictions subtype.\n\n2017-09-08  Nicolas Roche  <roche@adacore.com>\n\n\t* a-taster.ads, a-taster.adb: Move to libgnarl\n\t* gcc-interface/Makefile.in: Remove obsolete targets. Code cleanups.\n\tAdd support for files in libgnarl.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Do not apply\n\taccessibility check to an interface conversion, whose purpose\n\tis to perform a pointer adjustment in a dispatching call.\n\t* exp_ch6.adb (Expand_Call_JHelper): Add accessibility checks\n\twhen the actual is a construct that involves a dereference of an\n\texpression that includes a formal of the enclosing subprogram,\n\tIn such cases, the accessibility level of the actual is that of\n\tthe corresponding formal, which is passed in as an additional\n\tactual in the outer call.\n\nFrom-SVN: r251886", "tree": {"sha": "f619372a0e50f99a0eff4033354cf2ab1f6c9e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f619372a0e50f99a0eff4033354cf2ab1f6c9e0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a237c45305054f59be3ceb3b1192f4ee776ee81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a237c45305054f59be3ceb3b1192f4ee776ee81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a237c45305054f59be3ceb3b1192f4ee776ee81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a237c45305054f59be3ceb3b1192f4ee776ee81/comments", "author": null, "committer": null, "parents": [{"sha": "17d7aa85b71369de1a340db1f28575316703032b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d7aa85b71369de1a340db1f28575316703032b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d7aa85b71369de1a340db1f28575316703032b"}], "stats": {"total": 621, "additions": 197, "deletions": 424}, "files": [{"sha": "9aecfefddc170c1863bbeee2a8d94ce9fe4b4882", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -1,3 +1,35 @@\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* s-ststop.ads, s-ststop.adb, rtsfind.ads (String_Input_Tag):\n+\tNew routine to read the Tag robustly.\n+\t* exp_attr.adb (Input): Change the expansion of 'Input,\n+\tin the class-wide case, to call String_Input_Tag instead of\n+\tString_Input_Blk_IO.\n+\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-rident.ads (Restriction_Id): reorder enum\n+\tliterals, so that Pure_Barriers is no longer in range of the\n+\tCunit_Boolean_Restrictions subtype.\n+\n+2017-09-08  Nicolas Roche  <roche@adacore.com>\n+\n+\t* a-taster.ads, a-taster.adb: Move to libgnarl\n+\t* gcc-interface/Makefile.in: Remove obsolete targets. Code cleanups.\n+\tAdd support for files in libgnarl.\n+\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Do not apply\n+\taccessibility check to an interface conversion, whose purpose\n+\tis to perform a pointer adjustment in a dispatching call.\n+\t* exp_ch6.adb (Expand_Call_JHelper): Add accessibility checks\n+\twhen the actual is a construct that involves a dereference of an\n+\texpression that includes a formal of the enclosing subprogram,\n+\tIn such cases, the accessibility level of the actual is that of\n+\tthe corresponding formal, which is passed in as an additional\n+\tactual in the outer call.\n+\n 2017-09-08  Bob Duff  <duff@adacore.com>\n \n \t* exp_intr.adb (Add_Source_Info): Do not decode"}, {"sha": "96b70227b41856244d93a0b58bb071d1f3e0f007", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -3837,10 +3837,17 @@ package body Exp_Attr is\n \n                begin\n                   --  Read the internal tag (RM 13.13.2(34)) and use it to\n-                  --  initialize a dummy tag value:\n-\n+                  --  initialize a dummy tag value. We used to generate:\n+                  --\n                   --     Descendant_Tag (String'Input (Strm), P_Type);\n-\n+                  --\n+                  --  which turns into a call to String_Input_Blk_IO. However,\n+                  --  if the input is malformed, that could try to read an\n+                  --  enormous String, causing chaos. So instead we call\n+                  --  String_Input_Tag, which does the same thing as\n+                  --  String_Input_Blk_IO, except that if the String is\n+                  --  absurdly long, it raises an exception.\n+                  --\n                   --  This value is used only to provide a controlling\n                   --  argument for the eventual _Input call. Descendant_Tag is\n                   --  called rather than Internal_Tag to ensure that we have a\n@@ -3860,11 +3867,11 @@ package body Exp_Attr is\n                       Name                   =>\n                         New_Occurrence_Of (RTE (RE_Descendant_Tag), Loc),\n                       Parameter_Associations => New_List (\n-                        Make_Attribute_Reference (Loc,\n-                          Prefix         =>\n-                            New_Occurrence_Of (Standard_String, Loc),\n-                          Attribute_Name => Name_Input,\n-                          Expressions    => New_List (\n+                        Make_Function_Call (Loc,\n+                          Name =>\n+                            New_Occurrence_Of\n+                              (RTE (RE_String_Input_Tag), Loc),\n+                          Parameter_Associations => New_List (\n                             Relocate_Node (Duplicate_Subexpr (Strm)))),\n                         Make_Attribute_Reference (Loc,\n                           Prefix         => New_Occurrence_Of (P_Type, Loc),"}, {"sha": "1f0d08e9e6198f1c091692221845bb893d57c41a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -11230,7 +11230,8 @@ package body Exp_Ch4 is\n \n          --  Apply an accessibility check when the conversion operand is an\n          --  access parameter (or a renaming thereof), unless conversion was\n-         --  expanded from an Unchecked_ or Unrestricted_Access attribute.\n+         --  expanded from an Unchecked_ or Unrestricted_Access attribute,\n+         --  or for the actual of a class-wide interface parameter.\n          --  Note that other checks may still need to be applied below (such\n          --  as tagged type checks).\n \n@@ -11240,8 +11241,19 @@ package body Exp_Ch4 is\n            and then (Nkind (Original_Node (N)) /= N_Attribute_Reference\n                       or else Attribute_Name (Original_Node (N)) = Name_Access)\n          then\n-            Apply_Accessibility_Check\n-              (Operand, Target_Type, Insert_Node => Operand);\n+            if not Comes_From_Source (N)\n+              and then Nkind_In (Parent (N),\n+                N_Function_Call,\n+                N_Procedure_Call_Statement)\n+              and then Is_Interface (Designated_Type (Target_Type))\n+              and then Is_Class_Wide_Type (Designated_Type (Target_Type))\n+            then\n+               null;\n+\n+            else\n+               Apply_Accessibility_Check\n+                 (Operand, Target_Type, Insert_Node => Operand);\n+            end if;\n \n          --  If the level of the operand type is statically deeper than the\n          --  level of the target type, then force Program_Error. Note that this"}, {"sha": "3df6410ff2caa12f195b4ada818e88bccb23b47c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -2623,6 +2623,7 @@ package body Exp_Ch6 is\n       Param_Count   : Natural := 0;\n       Parent_Formal : Entity_Id;\n       Parent_Subp   : Entity_Id;\n+      Pref_Entity   : Entity_Id;\n       Scop          : Entity_Id;\n       Subp          : Entity_Id;\n \n@@ -3010,6 +3011,9 @@ package body Exp_Ch6 is\n               and then In_Open_Scopes (Scope (Entity (Actual)))\n             then\n                Prev_Orig := Prev;\n+\n+            elsif Nkind (Prev_Orig) = N_Type_Conversion then\n+               Prev_Orig := Expression (Prev_Orig);\n             end if;\n \n             --  Ada 2005 (AI-251): Thunks must propagate the extra actuals of\n@@ -3125,6 +3129,24 @@ package body Exp_Ch6 is\n \n                         when Attribute_Access =>\n \n+                           --  Accessibility level of S'Access is that of A.\n+\n+                           Prev_Orig := Prefix (Prev_Orig);\n+\n+                           --  If the expression is a view conversion,\n+                           --  the accessibility level is that of the\n+                           --  expression.\n+\n+                           if Nkind (Original_Node (Prev_Orig))\n+                             = N_Type_Conversion\n+                             and then\n+                               Nkind (Expression (Original_Node (Prev_Orig)))\n+                                  = N_Explicit_Dereference\n+                           then\n+                              Prev_Orig :=\n+                                Expression (Original_Node (Prev_Orig));\n+                           end if;\n+\n                            --  If this is an Access attribute applied to the\n                            --  the current instance object passed to a type\n                            --  initialization procedure, then use the level\n@@ -3140,22 +3162,49 @@ package body Exp_Ch6 is\n                            --  which can be one level too deep in some cases.\n                            --  ???\n \n-                           if Is_Entity_Name (Prefix (Prev_Orig))\n-                             and then Is_Type (Entity (Prefix (Prev_Orig)))\n+                           --  A further case that requires special handling\n+                           --  is the common idiom E.all'access.  If E is a\n+                           --  formal of the enclosing subprogram, the\n+                           --  accessibility of the expression is that of E.\n+\n+                           if Is_Entity_Name (Prev_Orig) then\n+                              Pref_Entity := Entity (Prev_Orig);\n+\n+                           elsif Nkind (Prev_Orig) = N_Explicit_Dereference\n+                           and then\n+                              Is_Entity_Name (Prefix (Prev_Orig))\n+                           then\n+                              Pref_Entity := Entity (Prefix ((Prev_Orig)));\n+\n+                           else\n+                              Pref_Entity := Empty;\n+                           end if;\n+\n+                           if Is_Entity_Name (Prev_Orig)\n+                             and then Is_Type (Entity (Prev_Orig))\n                            then\n                               Add_Extra_Actual\n                                 (Make_Integer_Literal (Loc,\n-                                   Intval =>\n-                                     Type_Access_Level\n-                                       (Entity (Prefix (Prev_Orig)))),\n+                                   Intval => Type_Access_Level (Pref_Entity)),\n+                                 Extra_Accessibility (Formal));\n+\n+                           elsif Nkind (Prev_Orig) = N_Explicit_Dereference\n+                             and then Present (Pref_Entity)\n+                             and then Is_Formal (Pref_Entity)\n+                             and then Present\n+                               (Extra_Accessibility (Pref_Entity))\n+                           then\n+                              Add_Extra_Actual (\n+                                New_Occurrence_Of\n+                                 (Extra_Accessibility (Pref_Entity), Loc),\n                                  Extra_Accessibility (Formal));\n \n                            else\n                               Add_Extra_Actual\n                                 (Make_Integer_Literal (Loc,\n                                    Intval =>\n                                      Object_Access_Level\n-                                       (Prefix (Prev_Orig))),\n+                                       (Prev_Orig)),\n                                  Extra_Accessibility (Formal));\n                            end if;\n "}, {"sha": "482259ee3cdfa5dcef1f071772deeb78b26d0835", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 46, "deletions": 400, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -380,9 +380,6 @@ SO_OPTS = -Wl,-soname,\n # target when supported.\n GNATLIB_SHARED = gnatlib\n \n-# default value for gnatmake's target dependent file\n-MLIB_TGT = mlib-tgt\n-\n # By default, build socket support units. On platforms that do not support\n # sockets, reset this variable to empty and add DUMMY_SOCKETS_TARGET_PAIRS\n # to LIBGNAT_TARGET_PAIRS.\n@@ -466,49 +463,6 @@ GCC_SPEC_FILES=\n # $(strip STRING) removes leading and trailing spaces from STRING.\n # If what's left is null then it's a match.\n \n-# m68k VxWorks\n-ifeq ($(strip $(filter-out m68k% wrs vx%,$(target_cpu) $(target_vendor) $(target_os))),)\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-intnam.ads<a-intnam-vxworks.ads \\\n-  a-numaux.ads<a-numaux-vxworks.ads \\\n-  s-inmaop.adb<s-inmaop-vxworks.adb \\\n-  s-interr.adb<s-interr-vxworks.adb \\\n-  s-intman.ads<s-intman-vxworks.ads \\\n-  s-intman.adb<s-intman-vxworks.adb \\\n-  s-osinte.adb<s-osinte-vxworks.adb \\\n-  s-osinte.ads<s-osinte-vxworks.ads \\\n-  s-osprim.adb<s-osprim-vxworks.adb \\\n-  s-parame.ads<s-parame-vxworks.ads \\\n-  s-parame.adb<s-parame-vxworks.adb \\\n-  s-stchop.ads<s-stchop-limit.ads \\\n-  s-stchop.adb<s-stchop-vxworks.adb \\\n-  s-taprop.adb<s-taprop-vxworks.adb \\\n-  s-tasinf.ads<s-tasinf-vxworks.ads \\\n-  s-taspri.ads<s-taspri-vxworks.ads \\\n-  s-tpopsp.adb<s-tpopsp-vxworks.adb \\\n-  s-vxwork.ads<s-vxwork-m68k.ads \\\n-  g-socthi.ads<g-socthi-vxworks.ads \\\n-  g-socthi.adb<g-socthi-vxworks.adb \\\n-  g-stsifd.adb<g-stsifd-sockets.adb \\\n-  system.ads<system-vxworks-m68k.ads\n-\n-  TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb\n-\n-  EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-stchop.o\n-  EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n-\n-  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n-\n-  ifeq ($(strip $(filter-out yes,$(TRACE))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-traces.adb<s-traces-default.adb \\\n-    s-tratas.adb<s-tratas-default.adb \\\n-    s-trafor.adb<s-trafor-default.adb \\\n-    s-trafor.ads<s-trafor-default.ads \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb\n-  endif\n-endif\n-\n # PowerPC and e500v2 VxWorks\n ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7 vxworks7spe,$(target_cpu) $(target_vendor) $(target_os))),)\n \n@@ -567,18 +521,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7 vxworks7spe,\n     EXTRA_GNATRTL_NONTASKING_OBJS+=s-stchop.o\n   endif\n \n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n-\n-  ifeq ($(strip $(filter-out yes,$(TRACE))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-traces.adb<s-traces-default.adb \\\n-    s-trafor.adb<s-trafor-default.adb \\\n-    s-trafor.ads<s-trafor-default.ads \\\n-    s-tratas.adb<s-tratas-default.adb \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb\n-  endif\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n   ifeq ($(strip $(filter-out rtp,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n@@ -693,9 +636,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae vxworksaespe,$(target_cpu) $(t\n \n   EH_MECHANISM=-gcc\n \n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n   EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n@@ -719,70 +660,6 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae vxworksaespe,$(target_cpu) $(t\n     g-stsifd.adb<g-stsifd-sockets.adb\n   endif\n \n-  ifeq ($(strip $(filter-out yes,$(TRACE))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-traces.adb<s-traces-default.adb \\\n-    s-trafor.adb<s-trafor-default.adb \\\n-    s-trafor.ads<s-trafor-default.ads \\\n-    s-tratas.adb<s-tratas-default.adb \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb\n-  endif\n-endif\n-\n-# PowerPC and e500v2 VxWorks MILS\n-ifeq ($(strip $(filter-out powerpc% wrs vxworksmils,$(target_cpu) $(target_vendor) $(target_os))),)\n-  # target pairs for vthreads runtime\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-elchha.adb<a-elchha-vx6-raven-cert.adb \\\n-  a-intnam.ads<a-intnam-vxworks.ads \\\n-  a-numaux.ads<a-numaux-vxworks.ads \\\n-  g-io.adb<g-io-vxworks-ppc-cert.adb \\\n-  s-inmaop.adb<s-inmaop-vxworks.adb \\\n-  s-interr.adb<s-interr-vxworks.adb \\\n-  s-intman.ads<s-intman-vxworks.ads \\\n-  s-intman.adb<s-intman-vxworks.adb \\\n-  s-osinte.adb<s-osinte-vxworks.adb \\\n-  s-osinte.ads<s-osinte-vxworks.ads \\\n-  s-osprim.adb<s-osprim-vxworks.adb \\\n-  s-osvers.ads<s-osvers-vxworks-mils.ads \\\n-  s-parame.ads<s-parame-ae653.ads \\\n-  s-parame.adb<s-parame-vxworks.adb \\\n-  s-stchop.adb<s-stchop-vxworks.adb \\\n-  s-stchop.ads<s-stchop-limit.ads \\\n-  s-taprop.adb<s-taprop-vxworks.adb \\\n-  s-tasinf.ads<s-tasinf-vxworks.ads \\\n-  s-taspri.ads<s-taspri-vxworks.ads \\\n-  s-thread.adb<s-thread-ae653.adb \\\n-  s-tpopsp.adb<s-tpopsp-vxworks.adb \\\n-  s-vxwork.ads<s-vxwork-ppc.ads \\\n-  system.ads<system-vxworks-ppc-mils.ads \\\n-  $(ATOMICS_TARGET_PAIRS) \\\n-  $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n-  $(DUMMY_SOCKETS_TARGET_PAIRS)\n-\n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n-\n-  EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o \\\n-    s-thread.o s-osvers.o s-stchop.o\n-  EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n-\n-  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n-\n-  EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n-  EXTRA_LIBGNAT_SRCS+=$(VX_SIGTRAMP_EXTRA_SRCS)\n-\n-  GNATRTL_SOCKETS_OBJS =\n-\n-  ifeq ($(strip $(filter-out yes,$(TRACE))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-traces.adb<s-traces-default.adb \\\n-    s-trafor.adb<s-trafor-default.adb \\\n-    s-trafor.ads<s-trafor-default.ads \\\n-    s-tratas.adb<s-tratas-default.adb \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb\n-  endif\n endif\n \n # VxWorksae / VxWorks 653 for x86 (vxsim) - ?? VxWorks mils not implemented\n@@ -815,9 +692,7 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae,$(target_cpu) $(target_vendor) $(ta\n \n   EH_MECHANISM=-gcc\n \n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-thread.o\n   EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n@@ -841,66 +716,6 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae,$(target_cpu) $(target_vendor) $(ta\n     g-stsifd.adb<g-stsifd-sockets.adb\n   endif\n \n-  ifeq ($(strip $(filter-out yes,$(TRACE))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-traces.adb<s-traces-default.adb \\\n-    s-trafor.adb<s-trafor-default.adb \\\n-    s-trafor.ads<s-trafor-default.ads \\\n-    s-tratas.adb<s-tratas-default.adb \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb\n-  endif\n-endif\n-\n-# Sparc VxWorks\n-ifeq ($(strip $(filter-out sparc% wrs vx%,$(target_cpu) $(target_vendor) $(target_os))),)\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-intnam.ads<a-intnam-vxworks.ads \\\n-  a-numaux.ads<a-numaux-vxworks.ads \\\n-  s-inmaop.adb<s-inmaop-vxworks.adb \\\n-  s-interr.adb<s-interr-vxworks.adb \\\n-  s-intman.ads<s-intman-vxworks.ads \\\n-  s-intman.adb<s-intman-vxworks.adb \\\n-  s-osinte.adb<s-osinte-vxworks.adb \\\n-  s-osinte.ads<s-osinte-vxworks.ads \\\n-  s-osprim.adb<s-osprim-vxworks.adb \\\n-  s-parame.ads<s-parame-vxworks.ads \\\n-  s-parame.adb<s-parame-vxworks.adb \\\n-  s-stchop.ads<s-stchop-limit.ads \\\n-  s-stchop.adb<s-stchop-vxworks.adb \\\n-  s-taprop.adb<s-taprop-vxworks.adb \\\n-  s-tasinf.ads<s-tasinf-vxworks.ads \\\n-  s-taspri.ads<s-taspri-vxworks.ads \\\n-  s-tpopsp.adb<s-tpopsp-vxworks.adb \\\n-  g-socthi.ads<g-socthi-vxworks.ads \\\n-  g-socthi.adb<g-socthi-vxworks.adb \\\n-  g-stsifd.adb<g-stsifd-sockets.adb\n-\n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n-\n-  ifeq ($(strip $(filter-out sparc64 sparcv9, $(target_cpu))),)\n-    # 64-bits\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-vxwork.ads<s-vxwork-sparcv9.ads \\\n-    system.ads<system-vxworks-sparcv9.ads\n-  else\n-    # 32-bits\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-vxwork.ads<s-vxwork-sparc.ads \\\n-    system.ads<system-vxworks-sparc-kernel.ads\n-  endif\n-\n-  ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-vxwext.ads<s-vxwext-kernel.ads \\\n-    s-vxwext.adb<s-vxwext-kernel.adb\n-  endif\n-\n-  EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-stchop.o\n-  EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n-\n-  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n endif\n \n # x86/x86_64 VxWorks\n@@ -947,18 +762,7 @@ ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7,$(target_cpu) $(targe\n   $(CERTMATH_TARGET_PAIRS_SQRT_FPU) \\\n   $(CERTMATH_TARGET_PAIRS_X86TRA)\n \n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n-\n-  ifeq ($(strip $(filter-out yes,$(TRACE))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-traces.adb<s-traces-default.adb \\\n-    s-trafor.adb<s-trafor-default.adb \\\n-    s-trafor.ads<s-trafor-default.ads \\\n-    s-tratas.adb<s-tratas-default.adb \\\n-    s-tfsetr.adb<s-tfsetr-vxworks.adb\n-  endif\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n   # The CPU setting for VxSim varies with the\n   # host (Windows or Linux)\n@@ -1102,9 +906,7 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n   g-socthi.adb<g-socthi-vxworks.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb\n \n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n   ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS += \\\n@@ -1165,76 +967,6 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n   endif\n endif\n \n-# MIPS VxWorks\n-ifeq ($(strip $(filter-out mips% wrs vx%,$(target_cpu) $(target_vendor) $(target_os))),)\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-intnam.ads<a-intnam-vxworks.ads \\\n-  a-numaux.ads<a-numaux-vxworks.ads \\\n-  s-inmaop.adb<s-inmaop-vxworks.adb \\\n-  s-interr.adb<s-interr-vxworks.adb \\\n-  s-intman.ads<s-intman-vxworks.ads \\\n-  s-intman.adb<s-intman-vxworks.adb \\\n-  s-osinte.adb<s-osinte-vxworks.adb \\\n-  s-osinte.ads<s-osinte-vxworks.ads \\\n-  s-osprim.adb<s-osprim-vxworks.adb \\\n-  s-parame.ads<s-parame-vxworks.ads \\\n-  s-parame.adb<s-parame-vxworks.adb \\\n-  s-stchop.ads<s-stchop-limit.ads \\\n-  s-stchop.adb<s-stchop-vxworks.adb \\\n-  s-taprop.adb<s-taprop-vxworks.adb \\\n-  s-tasinf.ads<s-tasinf-vxworks.ads \\\n-  s-taspri.ads<s-taspri-vxworks.ads \\\n-  s-tpopsp.adb<s-tpopsp-vxworks.adb \\\n-  s-vxwork.ads<s-vxwork-mips.ads \\\n-  g-socthi.ads<g-socthi-vxworks.ads \\\n-  g-socthi.adb<g-socthi-vxworks.adb \\\n-  g-stsifd.adb<g-stsifd-sockets.adb \\\n-  system.ads<system-vxworks-mips.ads\n-\n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n-\n-  ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n-    EH_MECHANISM=-gcc\n-\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-mudido.adb<s-mudido-affinity.adb \\\n-    s-vxwext.ads<s-vxwext-rtp.ads \\\n-    s-vxwext.adb<s-vxwext-rtp-smp.adb \\\n-    s-tpopsp.adb<s-tpopsp-vxworks-tls.adb\n-\n-    EXTRA_LIBGNAT_OBJS+=affinity.o\n-\n-    EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n-    EXTRA_LIBGNAT_SRCS+=$(VX_SIGTRAMP_EXTRA_SRCS)\n-  else\n-    ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n-      LIBGNAT_TARGET_PAIRS += \\\n-      s-mudido.adb<s-mudido-affinity.adb \\\n-      s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n-      s-vxwext.ads<s-vxwext-kernel.ads \\\n-      s-vxwext.adb<s-vxwext-kernel-smp.adb\n-\n-      EXTRA_LIBGNAT_OBJS+=affinity.o\n-    else\n-      LIBGNAT_TARGET_PAIRS += \\\n-      s-tpopsp.adb<s-tpopsp-vxworks.adb\n-\n-      ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n-        LIBGNAT_TARGET_PAIRS += \\\n-        s-vxwext.ads<s-vxwext-kernel.ads \\\n-        s-vxwext.adb<s-vxwext-kernel.adb\n-      endif\n-    endif\n-  endif\n-\n-  EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-stchop.o\n-  EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n-\n-  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n-endif\n-\n # ARM android\n ifeq ($(strip $(filter-out arm% linux-androideabi,$(target_cpu) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n@@ -1252,9 +984,7 @@ ifeq ($(strip $(filter-out arm% linux-androideabi,$(target_cpu) $(target_os))),)\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<system-linux-arm.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EXTRA_LIBGNAT_OBJS+=sigtramp-armdroid.o\n@@ -1285,8 +1015,6 @@ ifeq ($(strip $(filter-out sparc% sun solaris%,$(target_cpu) $(target_vendor) $(\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<system-solaris-sparc.ads\n \n-  TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-solaris.adb\n-\n   EH_MECHANISM=-gcc\n   THREADSLIB = -lposix4 -lthread\n   MISCLIB = -lposix4 -lnsl -lsocket\n@@ -1295,23 +1023,6 @@ ifeq ($(strip $(filter-out sparc% sun solaris%,$(target_cpu) $(target_vendor) $(\n   GMEM_LIB = gmemlib\n   LIBRARY_VERSION := $(LIB_VERSION)\n \n-  ifeq ($(strip $(filter-out pthread PTHREAD,$(THREAD_KIND))),)\n-    LIBGNAT_TARGET_PAIRS = \\\n-    a-intnam.ads<a-intnam-solaris.ads \\\n-    s-inmaop.adb<s-inmaop-posix.adb \\\n-    s-intman.adb<s-intman-posix.adb \\\n-    s-osinte.adb<s-osinte-posix.adb \\\n-    s-osinte.ads<s-osinte-solaris-posix.ads \\\n-    s-osprim.adb<s-osprim-solaris.adb \\\n-    s-taprop.adb<s-taprop-posix.adb \\\n-    s-taspri.ads<s-taspri-posix.ads \\\n-    s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n-    g-soliop.ads<g-soliop-solaris.ads \\\n-    system.ads<system-solaris-sparc.ads\n-\n-    THREADSLIB = -lposix4 -lpthread\n-  endif\n-\n   ifeq ($(strip $(filter-out m64,$(THREAD_KIND))),)\n     LIBGNAT_TARGET_PAIRS = $(LIBGNAT_TARGET_PAIRS_64)\n   endif\n@@ -1354,8 +1065,6 @@ ifeq ($(strip $(filter-out %86 %x86_64 solaris2%,$(target_cpu) $(target_os))),)\n     endif\n   endif\n \n-  TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-solaris.adb\n-\n   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o\n \n   EH_MECHANISM=-gcc\n@@ -1390,31 +1099,21 @@ ifeq ($(strip $(filter-out %86 linux%,$(target_cpu) $(target_os))),)\n     LIBGNAT_TARGET_PAIRS += $(X86_TARGET_PAIRS)\n   endif\n \n-  ifeq ($(strip $(filter-out xenomai,$(THREAD_KIND))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-osinte.ads<s-osinte-linux-xenomai.ads \\\n-    s-osprim.adb<s-osprim-linux-xenomai.adb \\\n-    s-taprop.adb<s-taprop-linux-xenomai.adb \\\n-    s-taspri.ads<s-taspri-linux-xenomai.ads\n-  else\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-mudido.adb<s-mudido-affinity.adb \\\n-    s-osinte.ads<s-osinte-linux.ads \\\n-    s-osprim.adb<s-osprim-posix.adb \\\n-    s-taprop.adb<s-taprop-linux.adb \\\n-    s-tasinf.ads<s-tasinf-linux.ads \\\n-    s-tasinf.adb<s-tasinf-linux.adb \\\n-    s-taspri.ads<s-taspri-posix.ads\n-  endif\n+  LIBGNAT_TARGET_PAIRS += \\\n+  s-mudido.adb<s-mudido-affinity.adb \\\n+  s-osinte.ads<s-osinte-linux.ads \\\n+  s-osprim.adb<s-osprim-posix.adb \\\n+  s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n+  s-taspri.ads<s-taspri-posix.ads\n \n   EH_MECHANISM=-gcc\n   THREADSLIB = -lpthread -lrt\n   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   GNATLIB_SHARED = gnatlib-shared-dual\n   MISCLIB = -ldl\n@@ -1438,9 +1137,7 @@ ifeq ($(strip $(filter-out %86 kfreebsd%,$(target_cpu) $(target_os))),)\n   $(X86_TARGET_PAIRS) \\\n   system.ads<system-freebsd.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o\n \n@@ -1496,9 +1193,7 @@ ifeq ($(strip $(filter-out x86_64 kfreebsd%,$(target_cpu) $(target_os))),)\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-freebsd.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EH_MECHANISM=-gcc\n   THREADSLIB = -lpthread\n@@ -1552,8 +1247,6 @@ ifeq ($(strip $(filter-out %86 freebsd%,$(target_cpu) $(target_os))),)\n   $(X86_TARGET_PAIRS) \\\n   system.ads<system-freebsd.ads\n \n-  TOOLS_TARGET_PAIRS = \\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb\n   GNATLIB_SHARED = gnatlib-shared-dual\n \n   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o\n@@ -1582,8 +1275,6 @@ ifeq ($(strip $(filter-out %86_64 freebsd%,$(target_cpu) $(target_os))),)\n   $(X86_64_TARGET_PAIRS) \\\n   system.ads<system-freebsd.ads\n \n-  TOOLS_TARGET_PAIRS = \\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb\n   GNATLIB_SHARED = gnatlib-shared-dual\n \n   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o\n@@ -1642,9 +1333,7 @@ ifeq ($(strip $(filter-out s390% linux%,$(target_cpu) $(target_os))),)\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-linux-s390.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n@@ -1689,7 +1378,6 @@ ifeq ($(strip $(filter-out hppa% hp hpux11%,$(target_cpu) $(target_vendor) $(tar\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-hpux.ads\n \n-  TOOLS_TARGET_PAIRS = mlib-tgt-specific.adb<mlib-tgt-specific-hpux.adb\n   EH_MECHANISM=-gcc\n   TGT_LIB = /usr/lib/libcl.a\n   THREADSLIB = -lpthread\n@@ -1727,8 +1415,6 @@ ifeq ($(strip $(filter-out ibm aix%,$(target_vendor) $(target_os))),)\n \n   THREADSLIB = -lpthreads\n   EH_MECHANISM=-gcc\n-  TOOLS_TARGET_PAIRS += \\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-aix.adb\n \n   GMEM_LIB = gmemlib\n endif\n@@ -1753,16 +1439,12 @@ endif\n \n # PikeOS\n ifeq ($(strip $(filter-out powerpc% %86 sysgo pikeos,$(target_cpu) $(target_vendor) $(target_os)))),)\n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-xi.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n endif\n \n # *-elf, *-eabi, or *-eabispe\n ifeq ($(strip $(filter-out elf eabi eabispe,$(target_os))),)\n-  TOOLS_TARGET_PAIRS=\\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-xi.adb \\\n-  indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n endif\n \n ifeq ($(strip $(filter-out %djgpp,$(target_os))),)\n@@ -1856,9 +1538,7 @@ ifeq ($(strip $(filter-out cygwin% mingw32% pe,$(target_os))),)\n \n   EH_MECHANISM=-gcc\n \n-  TOOLS_TARGET_PAIRS= \\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-mingw.adb \\\n-  indepsw.adb<indepsw-mingw.adb\n+  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n \n   GMEM_LIB = gmemlib\n   EXTRA_GNATTOOLS = ../../gnatdll$(exeext)\n@@ -1885,9 +1565,7 @@ ifeq ($(strip $(filter-out mips% linux%,$(target_cpu) $(target_os))),)\n   g-sercom.adb<g-sercom-linux.adb \\\n   system.ads<system-linux-mips.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n@@ -1915,28 +1593,17 @@ ifeq ($(strip $(filter-out powerpc% linux%,$(target_cpu) $(target_os))),)\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<system-linux-ppc.ads\n \n-  ifeq ($(strip $(filter-out xenomai,$(THREAD_KIND))),)\n-    LIBGNAT_TARGET_PAIRS = \\\n-      $(LIBGNAT_TARGET_PAIRS_COMMON) \\\n-      s-osinte.ads<s-osinte-linux-xenomai.ads \\\n-      s-osprim.adb<s-osprim-linux-xenomai.adb \\\n-      s-taprop.adb<s-taprop-linux-xenomai.adb \\\n-      s-taspri.ads<s-taspri-linux-xenomai.ads\n-  else\n-    LIBGNAT_TARGET_PAIRS = \\\n-      $(LIBGNAT_TARGET_PAIRS_COMMON) \\\n-      s-mudido.adb<s-mudido-affinity.adb \\\n-      s-osinte.ads<s-osinte-linux.ads \\\n-      s-osprim.adb<s-osprim-posix.adb \\\n-      s-taprop.adb<s-taprop-linux.adb \\\n-      s-tasinf.ads<s-tasinf-linux.ads \\\n-      s-tasinf.adb<s-tasinf-linux.adb \\\n-      s-taspri.ads<s-taspri-posix-noaltstack.ads\n-  endif\n+  LIBGNAT_TARGET_PAIRS = \\\n+    $(LIBGNAT_TARGET_PAIRS_COMMON) \\\n+    s-mudido.adb<s-mudido-affinity.adb \\\n+    s-osinte.ads<s-osinte-linux.ads \\\n+    s-osprim.adb<s-osprim-posix.adb \\\n+    s-taprop.adb<s-taprop-linux.adb \\\n+    s-tasinf.ads<s-tasinf-linux.ads \\\n+    s-tasinf.adb<s-tasinf-linux.adb \\\n+    s-taspri.ads<s-taspri-posix-noaltstack.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n \n@@ -1972,9 +1639,7 @@ ifeq ($(strip $(filter-out arm% linux-gnueabi%,$(target_cpu) $(target_os))),)\n     EH_MECHANISM=-arm\n   endif\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   THREADSLIB = -lpthread\n@@ -2008,9 +1673,7 @@ ifeq ($(strip $(filter-out aarch64% linux%,$(target_cpu) $(target_os))),)\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<system-linux-arm.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n   EH_MECHANISM=-gcc\n@@ -2037,9 +1700,7 @@ ifeq ($(strip $(filter-out sparc% linux%,$(target_cpu) $(target_os))),)\n   s-tpopsp.adb<s-tpopsp-tls.adb \\\n   system.ads<system-linux-sparc.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n@@ -2066,9 +1727,7 @@ ifeq ($(strip $(filter-out hppa% linux%,$(target_cpu) $(target_os))),)\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-linux-hppa.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n@@ -2124,9 +1783,7 @@ ifeq ($(strip $(filter-out sh4% linux%,$(target_cpu) $(target_os))),)\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-linux-sh4.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-linux.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-linux.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n@@ -2163,9 +1820,7 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(target_cpu) $(target_os))),)\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<system-linux-ia64.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n   EH_MECHANISM=-gcc\n@@ -2192,9 +1847,6 @@ ifeq ($(strip $(filter-out ia64% hp hpux%,$(target_cpu) $(target_vendor) $(targe\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<system-hpux-ia64.ads\n \n-  TOOLS_TARGET_PAIRS = \\\n-  mlib-tgt-specific.adb<mlib-tgt-specific-ia64-hpux.adb\n-\n   MISCLIB=\n   EH_MECHANISM=-gcc\n   THREADSLIB=-lpthread\n@@ -2224,9 +1876,7 @@ ifeq ($(strip $(filter-out alpha% linux%,$(target_cpu) $(target_os))),)\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n   system.ads<system-linux-alpha.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n@@ -2261,9 +1911,7 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(target_cpu) $(target_os))),)\n   $(X86_64_TARGET_PAIRS) \\\n   system.ads<system-linux-x86.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n@@ -2300,9 +1948,7 @@ ifeq ($(strip $(filter-out %x32 linux%,$(target_cpu) $(target_os))),)\n   $(X86_64_TARGET_PAIRS) \\\n   system.ads<system-linux-x86.ads\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n-    indepsw.adb<indepsw-gnu.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o a-exetim.o\n@@ -2323,6 +1969,7 @@ ifeq ($(strip $(filter-out darwin%,$(target_os))),)\n     s-osinte.ads<s-osinte-darwin.ads \\\n     s-taprop.adb<s-taprop-posix.adb \\\n     s-taspri.ads<s-taspri-posix.ads \\\n+    g-sercom.adb<g-sercom-linux.adb \\\n     s-tpopsp.adb<s-tpopsp-posix-foreign.adb\n \n   ifeq ($(strip $(filter-out %86,$(target_cpu))),)\n@@ -2401,9 +2048,7 @@ ifeq ($(strip $(filter-out darwin%,$(target_os))),)\n       system.ads<system-darwin-arm.ads\n   endif\n \n-  TOOLS_TARGET_PAIRS =  \\\n-    mlib-tgt-specific.adb<mlib-tgt-specific-darwin.adb \\\n-    indepsw.adb<indepsw-darwin.adb\n+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-darwin.adb\n \n   EH_MECHANISM=-gcc\n   GNATLIB_SHARED = gnatlib-shared-darwin\n@@ -2472,7 +2117,8 @@ ADA_INCLUDE_SRCS =\\\n  machcode.ads text_io.ads unchconv.ads unchdeal.ads \\\n  sequenio.ads system.ads memtrack.adb \\\n  a-[a-o]*.adb a-[p-z]*.adb a-[a-o]*.ads a-[p-z]*.ads g-*.ad? i-*.ad? \\\n- s-[a-o]*.adb s-[p-z]*.adb s-[a-o]*.ads s-[p-z]*.ads\n+ s-[a-o]*.adb s-[p-z]*.adb s-[a-o]*.ads s-[p-z]*.ads libgnarl/*.ads \\\n+ libgnarl/*.adb\n \n # Files that are in ADA_INCLUDE_SRCS but not in all configurations.\n # They will be removed from the run time if not used.\n@@ -2494,7 +2140,7 @@ ADA_EXCLUDE_SRCS =\\\n   s-sam4.ads   s-sopco3.adb s-sopco3.ads s-sopco4.adb s-sopco4.ads \\\n   s-sopco5.adb s-sopco5.ads s-stchop.ads s-stchop.adb s-stm32.ads \\\n   s-strcom.adb s-strcom.ads s-thread.ads \\\n-  s-vxwexc.adb s-vxwexc.ads s-vxwext.adb s-vxwext.ads \\\n+  s-vxwext.adb s-vxwext.ads \\\n   s-win32.ads  s-winext.ads\n \n # ADA_EXCLUDE_SRCS without the sources used by the target"}, {"sha": "c4b4aaa817f16248d5fcca95a5a09f5b7f05cf78", "filename": "gcc/ada/libgnarl/a-taster.adb", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Flibgnarl%2Fa-taster.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Flibgnarl%2Fa-taster.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fa-taster.adb?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "previous_filename": "gcc/ada/a-taster.adb"}, {"sha": "21408b54bbf22205f20a316a25af469fcac428d0", "filename": "gcc/ada/libgnarl/a-taster.ads", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Flibgnarl%2Fa-taster.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Flibgnarl%2Fa-taster.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fa-taster.ads?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "previous_filename": "gcc/ada/a-taster.ads"}, {"sha": "bdad2520fd4c74a9beb58fbcfb0294f6b1b13fa3", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1519,6 +1519,7 @@ package Rtsfind is\n \n      RE_String_Input,                    -- System.Strings.Stream_Ops\n      RE_String_Input_Blk_IO,             -- System.Strings.Stream_Ops\n+     RE_String_Input_Tag,                -- System.Strings.Stream_Ops\n      RE_String_Output,                   -- System.Strings.Stream_Ops\n      RE_String_Output_Blk_IO,            -- System.Strings.Stream_Ops\n      RE_String_Read,                     -- System.Strings.Stream_Ops\n@@ -2756,6 +2757,7 @@ package Rtsfind is\n \n      RE_String_Input                     => System_Strings_Stream_Ops,\n      RE_String_Input_Blk_IO              => System_Strings_Stream_Ops,\n+     RE_String_Input_Tag                 => System_Strings_Stream_Ops,\n      RE_String_Output                    => System_Strings_Stream_Ops,\n      RE_String_Output_Blk_IO             => System_Strings_Stream_Ops,\n      RE_String_Read                      => System_Strings_Stream_Ops,"}, {"sha": "cd88593656b8aca2605de42cb9851d8ddc3873e3", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -89,6 +89,7 @@ package System.Rident is\n       --  does not violate the restriction.\n \n      (Simple_Barriers,                           -- Ada 2012 (D.7 (10.9/3))\n+      Pure_Barriers,                             -- GNAT\n       No_Abort_Statements,                       -- (RM D.7(5), H.4(3))\n       No_Access_Parameter_Allocators,            -- Ada 2012 (RM H.4 (8.3/3))\n       No_Access_Subprograms,                     -- (RM H.4(17))\n@@ -182,7 +183,6 @@ package System.Rident is\n       No_Elaboration_Code,                       -- GNAT\n       No_Obsolescent_Features,                   -- Ada 2005 AI-368\n       No_Wide_Characters,                        -- GNAT\n-      Pure_Barriers,                             -- GNAT\n       SPARK_05,                                  -- GNAT\n \n       --  The following cases require a parameter value"}, {"sha": "cfc6f8ad8e8db7aed9b11fcf0c7b96a5bb68d60e", "filename": "gcc/ada/s-ststop.adb", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fs-ststop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fs-ststop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ststop.adb?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -58,8 +58,11 @@ package body System.Strings.Stream_Ops is\n \n    package Stream_Ops_Internal is\n       function Input\n-        (Strm : access Root_Stream_Type'Class;\n-         IO   : IO_Kind) return Array_Type;\n+        (Strm       : access Root_Stream_Type'Class;\n+         IO         : IO_Kind;\n+         Max_Length : Long_Integer := Long_Integer'Last) return Array_Type;\n+      --  Raises an exception if you try to read a String that is longer than\n+      --  Max_Length. See expansion of Attribute_Input in Exp_Attr for details.\n \n       procedure Output\n         (Strm : access Root_Stream_Type'Class;\n@@ -125,8 +128,9 @@ package body System.Strings.Stream_Ops is\n       -----------\n \n       function Input\n-        (Strm : access Root_Stream_Type'Class;\n-         IO   : IO_Kind) return Array_Type\n+        (Strm       : access Root_Stream_Type'Class;\n+         IO         : IO_Kind;\n+         Max_Length : Long_Integer := Long_Integer'Last) return Array_Type\n       is\n          pragma Unsuppress (All_Checks);\n          --  To make T'Class'Input robust in the case of bad data. The\n@@ -146,6 +150,10 @@ package body System.Strings.Stream_Ops is\n             Index_Type'Read (Strm, Low);\n             Index_Type'Read (Strm, High);\n \n+            if Long_Integer (High) - Long_Integer (Low) > Max_Length then\n+               raise Constraint_Error;\n+            end if;\n+\n             --  Read the character content of the string\n \n             declare\n@@ -632,6 +640,17 @@ package body System.Strings.Stream_Ops is\n       return String_Ops.Input (Strm, Block_IO);\n    end String_Input_Blk_IO;\n \n+   -------------------------\n+   -- String_Input_Tag --\n+   -------------------------\n+\n+   function String_Input_Tag\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class) return String\n+   is\n+   begin\n+      return String_Ops.Input (Strm, Block_IO, Max_Length => 10_000);\n+   end String_Input_Tag;\n+\n    -------------------\n    -- String_Output --\n    -------------------"}, {"sha": "f8164002899b846781e68b245d1bbe9e45e3b19c", "filename": "gcc/ada/s-ststop.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fs-ststop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a237c45305054f59be3ceb3b1192f4ee776ee81/gcc%2Fada%2Fs-ststop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ststop.ads?ref=6a237c45305054f59be3ceb3b1192f4ee776ee81", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2009-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -155,6 +155,12 @@ package System.Strings.Stream_Ops is\n      (Strm : access Ada.Streams.Root_Stream_Type'Class)\n       return String;\n \n+   function String_Input_Tag\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class)\n+      return String;\n+   --  Same as String_Input_Blk_IO, except raises an exception for overly long\n+   --  Strings. See expansion of Attribute_Input in Exp_Attr for details.\n+\n    procedure String_Output\n      (Strm : access Ada.Streams.Root_Stream_Type'Class;\n       Item : String);"}]}