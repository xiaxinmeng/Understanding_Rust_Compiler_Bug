{"sha": "6fbd5984000d529e88e83d2472d53218fc5e49b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiZDU5ODQwMDBkNTI5ZTg4ZTgzZDI0NzJkNTMyMThmYzVlNDliNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-10-24T21:36:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-10-24T21:36:50Z"}, "message": "Return deferred future if thread cannot be run\n\n\t* include/std/future (async): Use deferred function on exception.\n\t* testsuite/30_threads/async/except.cc: New.\n\nFrom-SVN: r229289", "tree": {"sha": "1712e808980efaee23bc8f5193e388cc0c40cf16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1712e808980efaee23bc8f5193e388cc0c40cf16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fbd5984000d529e88e83d2472d53218fc5e49b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbd5984000d529e88e83d2472d53218fc5e49b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fbd5984000d529e88e83d2472d53218fc5e49b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbd5984000d529e88e83d2472d53218fc5e49b4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4381322d6eddf1d162f35e4965b55fcb23808d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4381322d6eddf1d162f35e4965b55fcb23808d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4381322d6eddf1d162f35e4965b55fcb23808d3c"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "4f0a4bd53955c01d7d086a1c9bdc20a3aea785eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbd5984000d529e88e83d2472d53218fc5e49b4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbd5984000d529e88e83d2472d53218fc5e49b4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6fbd5984000d529e88e83d2472d53218fc5e49b4", "patch": "@@ -1,3 +1,8 @@\n+2015-10-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future (async): Use deferred function on exception.\n+\t* testsuite/30_threads/async/except.cc: New.\n+\n 2015-10-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/type_traits (__cpp_lib_bool_constant): Define."}, {"sha": "93889cd49d222244cc1fb5e6ba8de47148d160d2", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbd5984000d529e88e83d2472d53218fc5e49b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbd5984000d529e88e83d2472d53218fc5e49b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=6fbd5984000d529e88e83d2472d53218fc5e49b4", "patch": "@@ -1711,10 +1711,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::shared_ptr<__future_base::_State_base> __state;\n       if ((__policy & launch::async) == launch::async)\n \t{\n-\t  __state = __future_base::_S_make_async_state(std::__bind_simple(\n-              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));\n+\t  __try\n+\t    {\n+\t      __state = __future_base::_S_make_async_state(std::__bind_simple(\n+\t\t  std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));\n+\t    }\n+#if __cpp_exceptions\n+\t  catch(const system_error& __e)\n+\t    {\n+\t      if (__e.code() != errc::resource_unavailable_try_again\n+\t\t  || (__policy & launch::deferred) != launch::deferred)\n+\t\tthrow;\n+\t    }\n+#endif\n \t}\n-      else\n+      if (!__state)\n \t{\n \t  __state = __future_base::_S_make_deferred_state(std::__bind_simple(\n               std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));"}, {"sha": "fda08dc2bf45a1a0a8b8f15c551a37d7dcff0bfc", "filename": "libstdc++-v3/testsuite/30_threads/async/except.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbd5984000d529e88e83d2472d53218fc5e49b4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbd5984000d529e88e83d2472d53218fc5e49b4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fexcept.cc?ref=6fbd5984000d529e88e83d2472d53218fc5e49b4", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do run { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* *-*-solaris* *-*-cygwin *-*-rtems* *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++11 -pthread\" { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2010-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+struct Chucky\n+{\n+  Chucky() : copied(false) { }\n+\n+  Chucky(const Chucky& other) : copied(true)\n+  {\n+    if (other.copied)\n+      return;\n+    other.copied = true;\n+    using namespace std;\n+    // Throw on first DECAY_COPY to simulate inability to start a new thread.\n+    throw system_error(make_error_code(errc::resource_unavailable_try_again));\n+  }\n+\n+  void operator()() const { }\n+\n+  mutable bool copied;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+\n+  future<void> f = async(Chucky{});\n+  VERIFY( f.wait_for(chrono::seconds(100)) == future_status::deferred );\n+\n+  bool caught = false;\n+  try {\n+    f = async(launch::async, Chucky{});\n+  } catch (const system_error&) {\n+    caught = true;\n+  }\n+  VERIFY( caught );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}