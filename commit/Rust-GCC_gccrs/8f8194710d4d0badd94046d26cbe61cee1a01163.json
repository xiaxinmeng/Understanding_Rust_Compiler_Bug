{"sha": "8f8194710d4d0badd94046d26cbe61cee1a01163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4MTk0NzEwZDRkMGJhZGQ5NDA0NmQyNmNiZTYxY2VlMWEwMTE2Mw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-10-10T14:36:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-10T14:36:07Z"}, "message": "exp_intr.adb (Write_Entity_Name): Moved to outer level\n\n2014-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_intr.adb (Write_Entity_Name): Moved to outer level\n\t(Write_Entity_Name): Properly handle operator names\n\t(Expand_Source_Info): New procedure.\n\t* exp_intr.ads (Add_Source_Info): New procedure.\n\n2014-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* butil.ads: Minor reformatting.\n\t* sem_ch5.adb: Code clean up.\n\n2014-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch11.adb (Expand_N_Raise_Statement): Handle\n\tPrefix_Exception_Messages.\n\t* opt.adb: Handle new flags Prefix_Exception_Message[_Config].\n\t* opt.ads: New flags Prefix_Exception_Message[_Config].\n\t* par-prag.adb: New dummy entry for pragma Prefix_Exception_Messages.\n\t* snames.ads-tmpl: Add entries for new pragma Prefix_Exception_Messages.\n\t* sem_prag.adb: Implement new pragma Prefix_Exception_Messages\n\t* gnat_rm.texi: Document pragma Prefix_Exception_Messages.\n\nFrom-SVN: r216088", "tree": {"sha": "4e93b406142ca77aac91a70156faf02b26265103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e93b406142ca77aac91a70156faf02b26265103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8194710d4d0badd94046d26cbe61cee1a01163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8194710d4d0badd94046d26cbe61cee1a01163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8194710d4d0badd94046d26cbe61cee1a01163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8194710d4d0badd94046d26cbe61cee1a01163/comments", "author": null, "committer": null, "parents": [{"sha": "d6cd5d3493f6fb565ff9300577deeebe37143673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cd5d3493f6fb565ff9300577deeebe37143673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cd5d3493f6fb565ff9300577deeebe37143673"}], "stats": {"total": 348, "additions": 284, "deletions": 64}, "files": [{"sha": "a621e3978966b2514f6f9e86a20d4c5ce7262cd3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -1,3 +1,26 @@\n+2014-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_intr.adb (Write_Entity_Name): Moved to outer level\n+\t(Write_Entity_Name): Properly handle operator names\n+\t(Expand_Source_Info): New procedure.\n+\t* exp_intr.ads (Add_Source_Info): New procedure.\n+\n+2014-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* butil.ads: Minor reformatting.\n+\t* sem_ch5.adb: Code clean up.\n+\n+2014-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch11.adb (Expand_N_Raise_Statement): Handle\n+\tPrefix_Exception_Messages.\n+\t* opt.adb: Handle new flags Prefix_Exception_Message[_Config].\n+\t* opt.ads: New flags Prefix_Exception_Message[_Config].\n+\t* par-prag.adb: New dummy entry for pragma Prefix_Exception_Messages.\n+\t* snames.ads-tmpl: Add entries for new pragma Prefix_Exception_Messages.\n+\t* sem_prag.adb: Implement new pragma Prefix_Exception_Messages\n+\t* gnat_rm.texi: Document pragma Prefix_Exception_Messages.\n+\n 2014-10-10  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sinfo.ads, gnat_ugn.texi, a-except.adb, a-except-2005.adb,"}, {"sha": "ddfa25194ddcae06e58ade01c855c5ca67dd1cd9", "filename": "gcc/ada/butil.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fbutil.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fbutil.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbutil.ads?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,7 @@ package Butil is\n    function Is_Internal_Unit return Boolean;\n    --  Given a unit name stored in Name_Buffer with length in Name_Len,\n    --  returns True if this is the name of an internal unit or a child of\n-   --  an internal. Similar in usage to Is_Predefined_Unit.\n+   --  an internal unit. Similar in usage to Is_Predefined_Unit.\n \n    --  Note: the following functions duplicate functionality in Uname, but\n    --  we want to avoid bringing Uname into the binder since it generates"}, {"sha": "1d437af84135266c37c484fdd807d53d893cf830", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -29,6 +29,7 @@ with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n with Exp_Ch7;  use Exp_Ch7;\n+with Exp_Intr; use Exp_Intr;\n with Exp_Util; use Exp_Util;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n@@ -1565,6 +1566,22 @@ package body Exp_Ch11 is\n \n       if Present (Expression (N)) then\n \n+         --  Adjust message to deal with Prefix_Exception_Messages. We only\n+         --  add the prefix to string literals, if the message is being\n+         --  constructed, we assume it already deals with uniqueness.\n+\n+         if Prefix_Exception_Messages\n+           and then Nkind (Expression (N)) = N_String_Literal\n+         then\n+            Name_Len := 0;\n+            Add_Source_Info (Loc, Name_Enclosing_Entity);\n+            Add_Str_To_Name_Buffer (\": \");\n+            Add_String_To_Name_Buffer (Strval (Expression (N)));\n+            Rewrite (Expression (N),\n+              Make_String_Literal (Loc, Name_Buffer (1 .. Name_Len)));\n+            Analyze_And_Resolve (Expression (N), Standard_String);\n+         end if;\n+\n          --  Avoid passing exception-name'identity in runtimes in which this\n          --  argument is not used. This avoids generating undefined references\n          --  to these exceptions when compiling with no optimization"}, {"sha": "aa73839d88741873b0fca68864d8a754bfdf197a", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 156, "deletions": 56, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -36,7 +36,6 @@ with Exp_Code; use Exp_Code;\n with Exp_Fixd; use Exp_Fixd;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n-with Namet;    use Namet;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n with Opt;      use Opt;\n@@ -116,6 +115,96 @@ package body Exp_Intr is\n    --    Name_Compilation_Date      - expand string with compilation date\n    --    Name_Compilation_Time      - expand string with compilation time\n \n+   procedure Write_Entity_Name (E : Entity_Id);\n+   --  Recursive procedure to construct string for qualified name of enclosing\n+   --  program unit. The qualification stops at an enclosing scope has no\n+   --  source name (block or loop). If entity is a subprogram instance, skip\n+   --  enclosing wrapper package. The name is appended to the current contents\n+   --  of Name_Buffer, incrementing Name_Len.\n+\n+   ---------------------\n+   -- Add_Source_Info --\n+   ---------------------\n+\n+   procedure Add_Source_Info (Loc : Source_Ptr; Nam : Name_Id) is\n+      Ent : Entity_Id;\n+\n+      Save_NB : constant String  := Name_Buffer (1 .. Name_Len);\n+      Save_NL : constant Natural := Name_Len;\n+      --  Save current Name_Buffer contents\n+\n+   begin\n+      Name_Len := 0;\n+\n+      --  Line\n+\n+      case Nam is\n+\n+         when Name_Line =>\n+            Add_Nat_To_Name_Buffer (Nat (Get_Logical_Line_Number (Loc)));\n+\n+         when Name_File =>\n+            Get_Decoded_Name_String\n+              (Reference_Name (Get_Source_File_Index (Loc)));\n+\n+         when Name_Source_Location =>\n+            Build_Location_String (Loc);\n+\n+         when Name_Enclosing_Entity =>\n+\n+            --  Skip enclosing blocks to reach enclosing unit\n+\n+            Ent := Current_Scope;\n+            while Present (Ent) loop\n+               exit when Ekind (Ent) /= E_Block\n+                 and then Ekind (Ent) /= E_Loop;\n+               Ent := Scope (Ent);\n+            end loop;\n+\n+            --  Ent now points to the relevant defining entity\n+\n+            Write_Entity_Name (Ent);\n+\n+         when Name_Compilation_Date =>\n+            declare\n+               subtype S13 is String (1 .. 3);\n+               Months : constant array (1 .. 12) of S13 :=\n+                          (\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n+                           \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\");\n+\n+               M1 : constant Character := Opt.Compilation_Time (6);\n+               M2 : constant Character := Opt.Compilation_Time (7);\n+\n+               MM : constant Natural range 1 .. 12 :=\n+                      (Character'Pos (M1) - Character'Pos ('0')) * 10 +\n+                 (Character'Pos (M2) - Character'Pos ('0'));\n+\n+            begin\n+               --  Reformat ISO date into MMM DD YYYY (__DATE__) format\n+\n+               Name_Buffer (1 .. 3)  := Months (MM);\n+               Name_Buffer (4)       := ' ';\n+               Name_Buffer (5 .. 6)  := Opt.Compilation_Time (9 .. 10);\n+               Name_Buffer (7)       := ' ';\n+               Name_Buffer (8 .. 11) := Opt.Compilation_Time (1 .. 4);\n+               Name_Len := 11;\n+            end;\n+\n+         when Name_Compilation_Time =>\n+            Name_Buffer (1 .. 8) := Opt.Compilation_Time (12 .. 19);\n+            Name_Len := 8;\n+\n+         when others =>\n+            raise Program_Error;\n+      end case;\n+\n+      --  Prepend original Name_Buffer contents\n+\n+      Name_Buffer (Save_NL + 1 .. Save_NL + Name_Len) :=\n+        Name_Buffer (1 .. Name_Len);\n+      Name_Buffer (1 .. Save_NL) := Save_NB;\n+   end Add_Source_Info;\n+\n    ---------------------------------\n    -- Expand_Binary_Operator_Call --\n    ---------------------------------\n@@ -718,61 +807,6 @@ package body Exp_Intr is\n       Loc : constant Source_Ptr := Sloc (N);\n       Ent : Entity_Id;\n \n-      procedure Write_Entity_Name (E : Entity_Id);\n-      --  Recursive procedure to construct string for qualified name of\n-      --  enclosing program unit. The qualification stops at an enclosing\n-      --  scope has no source name (block or loop). If entity is a subprogram\n-      --  instance, skip enclosing wrapper package.\n-\n-      -----------------------\n-      -- Write_Entity_Name --\n-      -----------------------\n-\n-      procedure Write_Entity_Name (E : Entity_Id) is\n-         SDef : Source_Ptr;\n-         TDef : constant Source_Buffer_Ptr :=\n-                  Source_Text (Get_Source_File_Index (Sloc (E)));\n-\n-      begin\n-         --  Nothing to do if at outer level\n-\n-         if Scope (E) = Standard_Standard then\n-            null;\n-\n-         --  If scope comes from source, write its name\n-\n-         elsif Comes_From_Source (Scope (E)) then\n-            Write_Entity_Name (Scope (E));\n-            Add_Char_To_Name_Buffer ('.');\n-\n-         --  If in wrapper package skip past it\n-\n-         elsif Is_Wrapper_Package (Scope (E)) then\n-            Write_Entity_Name (Scope (Scope (E)));\n-            Add_Char_To_Name_Buffer ('.');\n-\n-         --  Otherwise nothing to output (happens in unnamed block statements)\n-\n-         else\n-            null;\n-         end if;\n-\n-         --  Loop to output the name\n-\n-         --  This is not right wrt wide char encodings ??? ()\n-\n-         SDef := Sloc (E);\n-         while TDef (SDef) in '0' .. '9'\n-           or else TDef (SDef) >= 'A'\n-           or else TDef (SDef) = ASCII.ESC\n-         loop\n-            Add_Char_To_Name_Buffer (TDef (SDef));\n-            SDef := SDef + 1;\n-         end loop;\n-      end Write_Entity_Name;\n-\n-   --  Start of processing for Expand_Source_Info\n-\n    begin\n       --  Integer cases\n \n@@ -1362,4 +1396,70 @@ package body Exp_Intr is\n       Analyze (N);\n    end Expand_To_Pointer;\n \n+   -----------------------\n+   -- Write_Entity_Name --\n+   -----------------------\n+\n+   procedure Write_Entity_Name (E : Entity_Id) is\n+      SDef : Source_Ptr;\n+      TDef : constant Source_Buffer_Ptr :=\n+               Source_Text (Get_Source_File_Index (Sloc (E)));\n+\n+   begin\n+      --  Nothing to do if at outer level\n+\n+      if Scope (E) = Standard_Standard then\n+         null;\n+\n+         --  If scope comes from source, write its name\n+\n+      elsif Comes_From_Source (Scope (E)) then\n+         Write_Entity_Name (Scope (E));\n+         Add_Char_To_Name_Buffer ('.');\n+\n+         --  If in wrapper package skip past it\n+\n+      elsif Is_Wrapper_Package (Scope (E)) then\n+         Write_Entity_Name (Scope (Scope (E)));\n+         Add_Char_To_Name_Buffer ('.');\n+\n+         --  Otherwise nothing to output (happens in unnamed block statements)\n+\n+      else\n+         null;\n+      end if;\n+\n+      --  Output the name\n+\n+      SDef := Sloc (E);\n+\n+      --  Check for operator name in quotes\n+\n+      if TDef (SDef) = '\"' then\n+         Add_Char_To_Name_Buffer ('\"');\n+\n+         --  Loop to output characters of operator name and terminating quote\n+\n+         loop\n+            SDef := SDef + 1;\n+            Add_Char_To_Name_Buffer (TDef (SDef));\n+            exit when TDef (SDef) = '\"';\n+         end loop;\n+\n+      --  Normal case of identifier\n+\n+      else\n+         --  Loop to output the name\n+\n+         --  This is not right wrt wide char encodings ??? ()\n+\n+         while TDef (SDef) in '0' .. '9'\n+           or else TDef (SDef) >= 'A'\n+           or else TDef (SDef) = ASCII.ESC\n+         loop\n+            Add_Char_To_Name_Buffer (TDef (SDef));\n+            SDef := SDef + 1;\n+         end loop;\n+      end if;\n+   end Write_Entity_Name;\n end Exp_Intr;"}, {"sha": "f9be797d85d157a036cad1afd51ff9e4cae68ab7", "filename": "gcc/ada/exp_intr.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fexp_intr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fexp_intr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.ads?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -25,10 +25,22 @@\n \n --  Processing for expanding intrinsic subprogram calls\n \n+with Namet; use Namet;\n with Types; use Types;\n \n package Exp_Intr is\n \n+   procedure Add_Source_Info (Loc : Source_Ptr; Nam : Name_Id);\n+   --  Append a string to Name_Buffer depending on Nam\n+   --    Name_File                  - append name of source file\n+   --    Name_Line                  - append line number\n+   --    Name_Source_Location       - append source location (file:line)\n+   --    Name_Enclosing_Entity      - append name of enclosing entity\n+   --    Name_Compilation_Date      - append compilation date\n+   --    Name_Compilation_Time      - append compilation time\n+   --  The caller must set Name_Buffer and Name_Len before the call. Loc is\n+   --  passed to provide location information where it is needed.\n+\n    procedure Expand_Intrinsic_Call (N : Node_Id; E : Entity_Id);\n    --  N is either a function call node, a procedure call statement node, or\n    --  an operator where the corresponding subprogram is intrinsic (i.e. was"}, {"sha": "b0bed4b15cb5bd227e036d9c181b8c0f26b2e8e7", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -227,6 +227,7 @@ Implementation Defined Pragmas\n * Pragma Precondition::\n * Pragma Predicate::\n * Pragma Preelaborable_Initialization::\n+* Pragma Prefix_Exception_Messages::\n * Pragma Pre_Class::\n * Pragma Priority_Specific_Dispatching::\n * Pragma Profile::\n@@ -1096,6 +1097,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Precondition::\n * Pragma Predicate::\n * Pragma Preelaborable_Initialization::\n+* Pragma Prefix_Exception_Messages::\n * Pragma Pre_Class::\n * Pragma Priority_Specific_Dispatching::\n * Pragma Profile::\n@@ -5692,6 +5694,34 @@ This pragma is standard in Ada 2005, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+@node Pragma Prefix_Exception_Messages\n+@unnumberedsec Pragma Prefix_Exception_Messages\n+@cindex Prefix_Exception_Messages\n+@cindex exception\n+@cindex Exception_Message\n+@findex Exceptions\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Prefix_Exception_Messages;\n+@end smallexample\n+\n+@noindent\n+This is an implementation-defined configuration pragma that affects the\n+behavior of raise statements with a message given as a static string\n+constant (typically a string literal). In such cases, the string will\n+be automatically prefixed by the name of the enclosing entity (giving\n+the package and subprogram containing the raise statement). This helps\n+to identify where messages are coming from, and this mode is automatic\n+for the run-time library.\n+\n+The pragma has no effect if the message is computed with an expression other\n+than a static string constant, since the assumption in this case is that\n+the program computes exactly the string it wants. If you still want the\n+prefixing in this case, you can always call\n+@code{GNAT.Source_Info.Enclosing_Entity} and prepend the string manually.\n+\n @node Pragma Pre_Class\n @unnumberedsec Pragma Pre_Class\n @cindex Pre_Class\n@@ -6199,7 +6229,7 @@ any other use of implementation pragmas:\n \n @smallexample @c ada\n pragma Restriction_Warnings (No_Implementation_Pragmas);\n-pragma Warnings (Off, \"violation of*No_Implementation_Pragmas*\");\n+7 (Off, \"violation of*No_Implementation_Pragmas*\");\n pragma Ada_95;\n pragma Style_Checks (\"2bfhkM160\");\n pragma Warnings (On, \"violation of*No_Implementation_Pragmas*\");\n@@ -7825,7 +7855,9 @@ it occurs till the end of the extended scope of the variable (similar to\n the scope of @code{Suppress}). This form cannot be used as a configuration\n pragma.\n \n-The form with a single static_string_EXPRESSION argument (and possible\n+In the case where the first argument is other than @code{ON} or\n+@code{OFF},\n+the third form with a single static_string_EXPRESSION argument (and possible\n reason) provides more precise\n control over which warnings are active. The string is a list of letters\n specifying which warnings are to be activated and which deactivated. The"}, {"sha": "9631ff48a3ce61e6621283f7f59e7f6703d7f66a", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -63,6 +63,7 @@ package body Opt is\n       Optimize_Alignment_Config             := Optimize_Alignment;\n       Persistent_BSS_Mode_Config            := Persistent_BSS_Mode;\n       Polling_Required_Config               := Polling_Required;\n+      Prefix_Exception_Messages_Config      := Prefix_Exception_Messages;\n       SPARK_Mode_Config                     := SPARK_Mode;\n       SPARK_Mode_Pragma_Config              := SPARK_Mode_Pragma;\n       Uneval_Old_Config                     := Uneval_Old;\n@@ -102,6 +103,7 @@ package body Opt is\n       Optimize_Alignment_Local       := Save.Optimize_Alignment_Local;\n       Persistent_BSS_Mode            := Save.Persistent_BSS_Mode;\n       Polling_Required               := Save.Polling_Required;\n+      Prefix_Exception_Messages      := Save.Prefix_Exception_Messages;\n       SPARK_Mode                     := Save.SPARK_Mode;\n       SPARK_Mode_Pragma              := Save.SPARK_Mode_Pragma;\n       Uneval_Old                     := Save.Uneval_Old;\n@@ -142,6 +144,7 @@ package body Opt is\n       Save.Optimize_Alignment_Local       := Optimize_Alignment_Local;\n       Save.Persistent_BSS_Mode            := Persistent_BSS_Mode;\n       Save.Polling_Required               := Polling_Required;\n+      Save.Prefix_Exception_Messages      := Prefix_Exception_Messages;\n       Save.SPARK_Mode                     := SPARK_Mode;\n       Save.SPARK_Mode_Pragma              := SPARK_Mode_Pragma;\n       Save.Uneval_Old                     := Uneval_Old;\n@@ -174,6 +177,7 @@ package body Opt is\n          External_Name_Imp_Casing    := Lowercase;\n          Optimize_Alignment          := 'O';\n          Persistent_BSS_Mode         := False;\n+         Prefix_Exception_Messages   := True;\n          Uneval_Old                  := 'E';\n          Use_VADS_Size               := False;\n          Optimize_Alignment_Local    := True;\n@@ -221,6 +225,7 @@ package body Opt is\n          Optimize_Alignment          := Optimize_Alignment_Config;\n          Optimize_Alignment_Local    := False;\n          Persistent_BSS_Mode         := Persistent_BSS_Mode_Config;\n+         Prefix_Exception_Messages   := Prefix_Exception_Messages_Config;\n          SPARK_Mode                  := SPARK_Mode_Config;\n          SPARK_Mode_Pragma           := SPARK_Mode_Pragma_Config;\n          Uneval_Old                  := Uneval_Old_Config;\n@@ -236,6 +241,8 @@ package body Opt is\n          Init_Or_Norm_Scalars := Initialize_Scalars or Normalize_Scalars;\n       end if;\n \n+      --  Values set for all units\n+\n       Default_Pool                   := Default_Pool_Config;\n       Exception_Locations_Suppressed := Exception_Locations_Suppressed_Config;\n       Fast_Math                      := Fast_Math_Config;"}, {"sha": "ebf37b6da1679dabde51b63b34579204a03d387d", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -1188,6 +1188,10 @@ package Opt is\n    --  Set to True if polling for asynchronous abort is enabled by using\n    --  the -gnatP option for GNAT.\n \n+   Prefix_Exception_Messages : Boolean := False;\n+   --  GNAT\n+   --  Set True to prefix exception messages with entity-name:\n+\n    Preprocessing_Data_File : String_Ptr := null;\n    --  GNAT\n    --  Set by switch -gnatep=. The file name of the preprocessing data file.\n@@ -1950,6 +1954,9 @@ package Opt is\n    --  flag is used to set the initial value for Polling_Required at the start\n    --  of analyzing each unit.\n \n+   Prefix_Exception_Messages_Config : Boolean;\n+   --  The setting of Prefix_Exception_Messages from configuration pragmas\n+\n    SPARK_Mode_Config : SPARK_Mode_Type := None;\n    --  GNAT\n    --  The setting of SPARK_Mode from configuration pragmas\n@@ -2197,6 +2204,7 @@ private\n       Optimize_Alignment_Local       : Boolean;\n       Persistent_BSS_Mode            : Boolean;\n       Polling_Required               : Boolean;\n+      Prefix_Exception_Messages      : Boolean;\n       SPARK_Mode                     : SPARK_Mode_Type;\n       SPARK_Mode_Pragma              : Node_Id;\n       Uneval_Old                     : Character;"}, {"sha": "128ff2278375c393727b16a56d2aa3b3800de8f8", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -1275,6 +1275,7 @@ begin\n            Pragma_Passive                        |\n            Pragma_Preelaborable_Initialization   |\n            Pragma_Polling                        |\n+           Pragma_Prefix_Exception_Messages      |\n            Pragma_Persistent_BSS                 |\n            Pragma_Post                           |\n            Pragma_Postcondition                  |"}, {"sha": "22d11b01e653d180577e0cc6cfb2f068e739f497", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -2926,7 +2926,12 @@ package body Sem_Ch5 is\n          Stat : Node_Id;\n \n       begin\n-         if Ekind (Current_Scope) /= E_Block then\n+\n+         --  Check if current scope is a block that is not a transient block.\n+\n+         if Ekind (Current_Scope) /= E_Block\n+           or else No (Block_Node (Current_Scope))\n+         then\n             return False;\n \n          else"}, {"sha": "bde78e417764a96e703860875b2343ce0b387103", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -17753,6 +17753,18 @@ package body Sem_Prag is\n             end if;\n          end Preelaborate;\n \n+         -------------------------------\n+         -- Prefix_Exception_Messages --\n+         -------------------------------\n+\n+         --  pragma Prefix_Exception_Messages;\n+\n+         when Pragma_Prefix_Exception_Messages =>\n+            GNAT_Pragma;\n+            Check_Valid_Configuration_Pragma;\n+            Check_Arg_Count (0);\n+            Prefix_Exception_Messages := True;\n+\n          --------------\n          -- Priority --\n          --------------\n@@ -24739,7 +24751,7 @@ package body Sem_Prag is\n    --  whether appearance of some name in a given pragma is to be considered\n    --  as a reference for the purposes of warnings about unreferenced objects.\n \n-   --  -1  indicates that references in any argument position are significant\n+   --  -1  indicates that appearence in any argument is significant\n    --  0   indicates that appearance in any argument is not significant\n    --  +n  indicates that appearance as argument n is significant, but all\n    --      other arguments are not significant\n@@ -24881,14 +24893,15 @@ package body Sem_Prag is\n       Pragma_Optimize_Alignment             => -1,\n       Pragma_Overflow_Mode                  =>  0,\n       Pragma_Overriding_Renamings           =>  0,\n-      Pragma_Ordered                        =>  0,\n+      Pragma_Ordered                        => -1,\n       Pragma_Pack                           =>  0,\n       Pragma_Page                           => -1,\n       Pragma_Part_Of                        => -1,\n       Pragma_Partition_Elaboration_Policy   => -1,\n       Pragma_Passive                        => -1,\n       Pragma_Persistent_BSS                 =>  0,\n-      Pragma_Polling                        => -1,\n+      Pragma_Polling                        =>  0,\n+      Pragma_Prefix_Exception_Messages      =>  0,\n       Pragma_Post                           => -1,\n       Pragma_Postcondition                  => -1,\n       Pragma_Post_Class                     => -1,"}, {"sha": "cdc82531c43c582a6cb70ff73ca95119de8fe270", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8194710d4d0badd94046d26cbe61cee1a01163/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=8f8194710d4d0badd94046d26cbe61cee1a01163", "patch": "@@ -415,6 +415,7 @@ package Snames is\n    Name_Partition_Elaboration_Policy   : constant Name_Id := N + $; -- Ada 05\n    Name_Persistent_BSS                 : constant Name_Id := N + $; -- GNAT\n    Name_Polling                        : constant Name_Id := N + $; -- GNAT\n+   Name_Prefix_Exception_Messages      : constant Name_Id := N + $; -- GNAT\n    Name_Priority_Specific_Dispatching  : constant Name_Id := N + $; -- Ada 05\n    Name_Profile                        : constant Name_Id := N + $; -- Ada 05\n    Name_Profile_Warnings               : constant Name_Id := N + $; -- GNAT\n@@ -1755,6 +1756,7 @@ package Snames is\n       Pragma_Partition_Elaboration_Policy,\n       Pragma_Persistent_BSS,\n       Pragma_Polling,\n+      Pragma_Prefix_Exception_Messages,\n       Pragma_Priority_Specific_Dispatching,\n       Pragma_Profile,\n       Pragma_Profile_Warnings,"}]}