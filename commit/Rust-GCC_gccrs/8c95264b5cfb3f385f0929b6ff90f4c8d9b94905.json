{"sha": "8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5NTI2NGI1Y2ZiM2YzODVmMDkyOWI2ZmY5MGY0YzhkOWI5NDkwNQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-14T23:11:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-02-14T23:11:04Z"}, "message": "re PR c++/5645 (gcc warns that pure virtual class not explicitly initialized)\n\n        PR c++/5645\n        PR c++/11159\n        * class.c (type_has_user_nondefault_constructor): New fn.\n        * cp-tree.h: Declare it.\n        * init.c (emit_mem_initializers): Use it for -W warning about\n        missing base initializer.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r132324", "tree": {"sha": "e38dc9a61c36b8f7994dae4ac12fe990e88f1885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e38dc9a61c36b8f7994dae4ac12fe990e88f1885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/comments", "author": null, "committer": null, "parents": [{"sha": "101e174d2c7f1d97a276cf951bcc6d55ecbcabdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101e174d2c7f1d97a276cf951bcc6d55ecbcabdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101e174d2c7f1d97a276cf951bcc6d55ecbcabdd"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "36355125b417e3b63064efe96c828f1e30c8073c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "patch": "@@ -1,3 +1,13 @@\n+2008-02-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/5645\n+\tPR c++/11159\n+\t* class.c (type_has_user_nondefault_constructor): New fn.\n+\t* cp-tree.h: Declare it.\n+\t* init.c (emit_mem_initializers): Use it for -W warning about\n+\tmissing base initializer.\n+\n 2008-02-14  Paolo Carlini  <pcarlini@suse.de>\n \n         PR c++/28743"}, {"sha": "1a76816c2294c445a559eab0547d729b740db117", "filename": "gcc/cp/class.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "patch": "@@ -4039,6 +4039,28 @@ clone_constructors_and_destructors (tree t)\n     clone_function_decl (OVL_CURRENT (fns), /*update_method_vec_p=*/1);\n }\n \n+/* Returns true iff class T has a user-defined constructor other than\n+   the default constructor.  */\n+\n+bool\n+type_has_user_nondefault_constructor (tree t)\n+{\n+  tree fns;\n+\n+  if (!TYPE_HAS_USER_CONSTRUCTOR (t))\n+    return false;\n+\n+  for (fns = CLASSTYPE_CONSTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n+    {\n+      tree fn = OVL_CURRENT (fns);\n+      if (!DECL_ARTIFICIAL (fn)\n+\t  && skip_artificial_parms_for (fn, DECL_ARGUMENTS (fn)) != NULL_TREE)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Remove all zero-width bit-fields from T.  */\n \n static void"}, {"sha": "81e88613ff36d0ab95b07dc2af6e7b6083d0cb2d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "patch": "@@ -4157,6 +4157,7 @@ extern void determine_key_method\t\t(tree);\n extern void check_for_override\t\t\t(tree, tree);\n extern void push_class_stack\t\t\t(void);\n extern void pop_class_stack\t\t\t(void);\n+extern bool type_has_user_nondefault_constructor (tree);\n \n /* in cvt.c */\n extern tree convert_to_reference\t\t(tree, tree, int, int, tree);"}, {"sha": "3e6db24713759f3081b2c2375dda563946e1f8b0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "patch": "@@ -829,12 +829,13 @@ emit_mem_initializers (tree mem_inits)\n       tree subobject = TREE_PURPOSE (mem_inits);\n       tree arguments = TREE_VALUE (mem_inits);\n \n-      /* If these initializations are taking place in a copy\n-\t constructor, the base class should probably be explicitly\n-\t initialized.  */\n+      /* If these initializations are taking place in a copy constructor,\n+\t the base class should probably be explicitly initialized if there\n+\t is a user-defined constructor in the base class (other than the\n+\t default constructor, which will be called anyway).  */\n       if (extra_warnings && !arguments\n \t  && DECL_COPY_CONSTRUCTOR_P (current_function_decl)\n-\t  && TYPE_NEEDS_CONSTRUCTING (BINFO_TYPE (subobject)))\n+\t  && type_has_user_nondefault_constructor (BINFO_TYPE (subobject)))\n \twarning (OPT_Wextra, \"%Jbase class %q#T should be explicitly initialized in the \"\n \t\t \"copy constructor\",\n \t\t current_function_decl, BINFO_TYPE (subobject));"}, {"sha": "940ef4a464f7114217a81e967bd15ba0460245d9", "filename": "gcc/testsuite/g++.dg/warn/Wreorder-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreorder-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreorder-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreorder-1.C?ref=8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "patch": "@@ -10,5 +10,5 @@ struct T {\n \n struct U : virtual public S, virtual public T {\n   U () : T (), S () {}     // { dg-warning \"\" }\n-  U (const U&) : S () {}   // { dg-warning \"copy\" }\n+  U (const U&) : S () {}\n };"}, {"sha": "ed4107a230ba02f1a986e48e59c8ef6dcd4fa188", "filename": "gcc/testsuite/g++.dg/warn/pr11159.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr11159.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr11159.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr11159.C?ref=8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/11159 : erroneous warning in copy ctor with virtual inheritance\n+// { dg-do compile }\n+// { dg-options \"-Wall -Wextra\" }\n+struct A\n+{\n+  A ();\n+};\n+\n+struct B : virtual A\n+{\n+  B ();\n+};\n+\n+struct C : virtual A\n+{\n+  C ();\n+};\n+\n+struct D : B, C\n+{\n+  D (D const&){}\n+};\n+\n+template <typename Base>\n+struct E : Base\n+{\n+  E ();\n+\n+  E (E const &)\n+    : Base ()\n+  {\n+  };\n+};\n+\n+E<C> foo;\n+E<C> bar (foo);\n+"}, {"sha": "5ca61bdba4560a82fda24dd82a767cf9c20e4a5c", "filename": "gcc/testsuite/g++.dg/warn/pr5645.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr5645.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c95264b5cfb3f385f0929b6ff90f4c8d9b94905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr5645.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr5645.C?ref=8c95264b5cfb3f385f0929b6ff90f4c8d9b94905", "patch": "@@ -0,0 +1,32 @@\n+// PR5645: gcc warns that pure virtual class not explicitly initialized.  \n+// { dg-do compile }\n+// { dg-options \"-Wall -Wextra\" }\n+\n+class a {\n+public:\n+  virtual int f() = 0;\n+  virtual int g() = 0;\n+};\n+\n+class b : public a {\n+public:\n+  b();\n+  b(const b& c);\n+\n+protected:\n+  int i;\n+};\n+\n+b::b() {}\n+\n+b::b(const b& c) { // { dg-bogus \"base class .class a. should be explicitly initialized in the copy constructor\" }\n+  i = c.i;\n+}\n+\n+struct X {};\n+\n+struct Y : X\n+{\n+  Y (Y const&) {}\n+};\n+"}]}