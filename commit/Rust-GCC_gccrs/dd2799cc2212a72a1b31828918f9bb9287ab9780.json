{"sha": "dd2799cc2212a72a1b31828918f9bb9287ab9780", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyNzk5Y2MyMjEyYTcyYTFiMzE4Mjg5MThmOWJiOTI4N2FiOTc4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-09T19:10:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-09T19:10:42Z"}, "message": "PR c++/84296 - ICE with qualified-id in template.\n\n\tPR c++/83714\n\t* pt.c (unknown_base_ref_p): New.\n\t(instantiation_dependent_scope_ref_p): Use it instead of\n\tany_dependent_bases_p.\n\nFrom-SVN: r257538", "tree": {"sha": "ae21c88b70f99da0013ad2fd18c0a4282796fa0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae21c88b70f99da0013ad2fd18c0a4282796fa0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd2799cc2212a72a1b31828918f9bb9287ab9780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2799cc2212a72a1b31828918f9bb9287ab9780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2799cc2212a72a1b31828918f9bb9287ab9780", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2799cc2212a72a1b31828918f9bb9287ab9780/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c67920556efc5fa97c2080098c202e75b93e2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c67920556efc5fa97c2080098c202e75b93e2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c67920556efc5fa97c2080098c202e75b93e2a0"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "fa66e1bd36364af197930425d4b3a1b8bf37dd66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2799cc2212a72a1b31828918f9bb9287ab9780/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2799cc2212a72a1b31828918f9bb9287ab9780/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd2799cc2212a72a1b31828918f9bb9287ab9780", "patch": "@@ -1,3 +1,11 @@\n+2018-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84296 - ICE with qualified-id in template.\n+\tPR c++/83714\n+\t* pt.c (unknown_base_ref_p): New.\n+\t(instantiation_dependent_scope_ref_p): Use it instead of\n+\tany_dependent_bases_p.\n+\n 2018-02-09  Marek Polacek  <polacek@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "9c57709e7a7ec8b21f03ac4d404b2613f70ce879", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2799cc2212a72a1b31828918f9bb9287ab9780/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2799cc2212a72a1b31828918f9bb9287ab9780/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dd2799cc2212a72a1b31828918f9bb9287ab9780", "patch": "@@ -24012,6 +24012,30 @@ dependent_scope_p (tree scope)\n \t  && !currently_open_class (scope));\n }\n \n+/* T is a SCOPE_REF.  Return whether it represents a non-static member of\n+   an unknown base of 'this' (and is therefore instantiation-dependent).  */\n+\n+static bool\n+unknown_base_ref_p (tree t)\n+{\n+  if (!current_class_ptr)\n+    return false;\n+\n+  tree mem = TREE_OPERAND (t, 1);\n+  if (shared_member_p (mem))\n+    return false;\n+\n+  tree cur = current_nonlambda_class_type ();\n+  if (!any_dependent_bases_p (cur))\n+    return false;\n+\n+  tree ctx = TREE_OPERAND (t, 0);\n+  if (DERIVED_FROM_P (ctx, cur))\n+    return false;\n+\n+  return true;\n+}\n+\n /* T is a SCOPE_REF; return whether we need to consider it\n     instantiation-dependent so that we can check access at instantiation\n     time even though we know which member it resolves to.  */\n@@ -24021,9 +24045,7 @@ instantiation_dependent_scope_ref_p (tree t)\n {\n   if (DECL_P (TREE_OPERAND (t, 1))\n       && CLASS_TYPE_P (TREE_OPERAND (t, 0))\n-      /* A dependent base could make a member inaccessible in the current\n-\t class.  */\n-      && !any_dependent_bases_p ()\n+      && !unknown_base_ref_p (t)\n       && accessible_in_template_p (TREE_OPERAND (t, 0),\n \t\t\t\t   TREE_OPERAND (t, 1)))\n     return false;"}, {"sha": "629225cd556772bdd1c725257aa00f52e881fc56", "filename": "gcc/testsuite/g++.dg/template/scope5.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2799cc2212a72a1b31828918f9bb9287ab9780/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2799cc2212a72a1b31828918f9bb9287ab9780/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope5.C?ref=dd2799cc2212a72a1b31828918f9bb9287ab9780", "patch": "@@ -0,0 +1,66 @@\n+// PR c++/84296\n+\n+namespace b {}\n+namespace c {\n+using namespace b;\n+}\n+namespace b {\n+template <int d> struct e { static const int f = d; };\n+}\n+template <typename> struct g;\n+template <typename h, typename i, typename aa, typename j>\n+struct g<h(i, aa, j)> : h::template ab<i, aa, j> {};\n+struct k {\n+  template <typename l> struct m { typedef typename g<l>::n o; };\n+};\n+template <typename> struct ac;\n+struct r {\n+  typedef ac<int> p;\n+};\n+template <typename q> struct s : k {\n+  template <typename i, typename, typename>\n+  struct ab : q::template t<typename i::u>::template ab<i, int, int> {};\n+};\n+struct ad {\n+  typedef int u;\n+};\n+template <typename> struct ae;\n+template <typename, typename ag> struct ah {\n+  typedef ae<ag> ai;\n+  typedef typename ai::template w<ai(r, int)>::o n;\n+};\n+struct x {\n+  template <typename i, typename, typename> struct ab : ah<i, int> {};\n+};\n+struct y {\n+  struct z {\n+    template <typename> struct t : x {};\n+  };\n+  struct aj : s<z> {};\n+};\n+template <typename i> struct ak {\n+  typedef y::aj al;\n+  typedef typename al::m<al(i, int, int)>::o o;\n+};\n+struct am {\n+  enum { an };\n+};\n+template <typename> struct ao {};\n+template <typename af> struct ap : af::aq {};\n+template <> struct ae<int> {\n+  template <typename> struct w;\n+  template <typename ar, typename as, typename at> struct w<ar(as, at)> {\n+    typedef typename as::p o;\n+  };\n+};\n+enum { a = b::e<0>::f };\n+template <typename> class au;\n+template <typename av> struct ac : ao<av> { typedef c::e<am::an> aq; };\n+template <typename aw, typename i, typename ax> void ay(aw, i, ax) {\n+  au<c::e<ap<typename ak<i>::o>::f> > az();\n+}\n+void v() {\n+  ad a;\n+  void az();\n+  ay(az, a, v);\n+}"}]}