{"sha": "70315fcdde3a60e23d39586a9b5a237ff9334a9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzMTVmY2RkZTNhNjBlMjNkMzk1ODZhOWI1YTIzN2ZmOTMzNGE5ZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-05-18T14:43:58Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-18T14:43:58Z"}, "message": "s390.c (s390_expand_movstr, [...]): Do not use expand_start_loop and expand_end_loop, instead build the loop manually.\n\n\t* config/s390/s390.c (s390_expand_movstr, s390_expand_clrstr,\n\ts390_expand_cmpmem): Do not use expand_start_loop and\n\texpand_end_loop, instead build the loop manually.\n\nFrom-SVN: r81990", "tree": {"sha": "8d24a33dbaaaee6b9e51c8c661378e1aa59a21da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d24a33dbaaaee6b9e51c8c661378e1aa59a21da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70315fcdde3a60e23d39586a9b5a237ff9334a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70315fcdde3a60e23d39586a9b5a237ff9334a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70315fcdde3a60e23d39586a9b5a237ff9334a9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70315fcdde3a60e23d39586a9b5a237ff9334a9e/comments", "author": null, "committer": null, "parents": [{"sha": "e332b68d76a8ce6b16439e235d5013a1182a22a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e332b68d76a8ce6b16439e235d5013a1182a22a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e332b68d76a8ce6b16439e235d5013a1182a22a9"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "88d9aa743cb5ad0be39680cdcc71a4a28c549c97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70315fcdde3a60e23d39586a9b5a237ff9334a9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70315fcdde3a60e23d39586a9b5a237ff9334a9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70315fcdde3a60e23d39586a9b5a237ff9334a9e", "patch": "@@ -1,3 +1,9 @@\n+2004-05-18  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* config/s390/s390.c (s390_expand_movstr, s390_expand_clrstr,\n+\ts390_expand_cmpmem): Do not use expand_start_loop and\n+\texpand_end_loop, instead build the loop manually.\n+\n 2004-05-18  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.md (ctrsi_internal3): Delete."}, {"sha": "9c537ec3cf81c79bbdad0d48227c0d217e91db1c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70315fcdde3a60e23d39586a9b5a237ff9334a9e/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70315fcdde3a60e23d39586a9b5a237ff9334a9e/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=70315fcdde3a60e23d39586a9b5a237ff9334a9e", "patch": "@@ -2956,6 +2956,7 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n   else\n     {\n       rtx dst_addr, src_addr, count, blocks, temp;\n+      rtx loop_start_label = gen_label_rtx ();\n       rtx loop_end_label = gen_label_rtx ();\n       rtx end_label = gen_label_rtx ();\n       enum machine_mode mode;\n@@ -2988,7 +2989,8 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n \n       emit_cmp_and_jump_insns (blocks, const0_rtx,\n \t\t\t       EQ, NULL_RTX, mode, 1, loop_end_label);\n-      expand_start_loop (1);\n+\n+      emit_label (loop_start_label);\n \n       emit_insn (gen_movstr_short (dst, src, GEN_INT (255)));\n       s390_load_address (dst_addr,\n@@ -3002,7 +3004,8 @@ s390_expand_movstr (rtx dst, rtx src, rtx len)\n \n       emit_cmp_and_jump_insns (blocks, const0_rtx,\n \t\t\t       EQ, NULL_RTX, mode, 1, loop_end_label);\n-      expand_end_loop ();\n+\n+      emit_jump (loop_start_label);\n       emit_label (loop_end_label);\n \n       emit_insn (gen_movstr_short (dst, src,\n@@ -3030,6 +3033,7 @@ s390_expand_clrstr (rtx dst, rtx len)\n   else\n     {\n       rtx dst_addr, src_addr, count, blocks, temp;\n+      rtx loop_start_label = gen_label_rtx ();\n       rtx loop_end_label = gen_label_rtx ();\n       rtx end_label = gen_label_rtx ();\n       enum machine_mode mode;\n@@ -3060,7 +3064,8 @@ s390_expand_clrstr (rtx dst, rtx len)\n \n       emit_cmp_and_jump_insns (blocks, const0_rtx,\n \t\t\t       EQ, NULL_RTX, mode, 1, loop_end_label);\n-      expand_start_loop (1);\n+\n+      emit_label (loop_start_label);\n \n       emit_insn (gen_clrstr_short (dst, GEN_INT (255)));\n       s390_load_address (dst_addr,\n@@ -3072,7 +3077,8 @@ s390_expand_clrstr (rtx dst, rtx len)\n \n       emit_cmp_and_jump_insns (blocks, const0_rtx,\n \t\t\t       EQ, NULL_RTX, mode, 1, loop_end_label);\n-      expand_end_loop ();\n+\n+      emit_jump (loop_start_label);\n       emit_label (loop_end_label);\n \n       emit_insn (gen_clrstr_short (dst, convert_to_mode (Pmode, count, 1)));\n@@ -3116,6 +3122,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n   else\n     {\n       rtx addr0, addr1, count, blocks, temp;\n+      rtx loop_start_label = gen_label_rtx ();\n       rtx loop_end_label = gen_label_rtx ();\n       rtx end_label = gen_label_rtx ();\n       enum machine_mode mode;\n@@ -3148,7 +3155,8 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n \n       emit_cmp_and_jump_insns (blocks, const0_rtx,\n \t\t\t       EQ, NULL_RTX, mode, 1, loop_end_label);\n-      expand_start_loop (1);\n+\n+      emit_label (loop_start_label);\n \n       emit_insn (gen_cmpmem_short (op0, op1, GEN_INT (255)));\n       temp = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCSmode, 33), const0_rtx);\n@@ -3168,7 +3176,8 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n \n       emit_cmp_and_jump_insns (blocks, const0_rtx,\n \t\t\t       EQ, NULL_RTX, mode, 1, loop_end_label);\n-      expand_end_loop ();\n+\n+      emit_jump (loop_start_label);\n       emit_label (loop_end_label);\n \n       emit_insn (gen_cmpmem_short (op0, op1,"}]}