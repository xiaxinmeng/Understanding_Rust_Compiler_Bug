{"sha": "711d4bb3ced48e6a0eec3a26e70e0f02f0370522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExZDRiYjNjZWQ0OGU2YTBlZWMzYTI2ZTcwZTBmMDJmMDM3MDUyMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-12-31T07:22:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-31T07:22:28Z"}, "message": "dbxout.c (dbxout_block): Invert logic on eliding LBRAC/RBRAC.\n\n        * dbxout.c (dbxout_block): Invert logic on eliding LBRAC/RBRAC.\n        Initialize variables properly for DBX_LBRAC_FIRST.\n\nFrom-SVN: r38569", "tree": {"sha": "bdf1124058238b3986201f1fb352c184bcbd4400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdf1124058238b3986201f1fb352c184bcbd4400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/711d4bb3ced48e6a0eec3a26e70e0f02f0370522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711d4bb3ced48e6a0eec3a26e70e0f02f0370522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711d4bb3ced48e6a0eec3a26e70e0f02f0370522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711d4bb3ced48e6a0eec3a26e70e0f02f0370522/comments", "author": null, "committer": null, "parents": [{"sha": "27fb3e162eabe30c0dcf6e09c958f864201f2c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fb3e162eabe30c0dcf6e09c958f864201f2c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27fb3e162eabe30c0dcf6e09c958f864201f2c3e"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "605431d50a365a57783553c8d291b9707bae6a38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d4bb3ced48e6a0eec3a26e70e0f02f0370522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d4bb3ced48e6a0eec3a26e70e0f02f0370522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=711d4bb3ced48e6a0eec3a26e70e0f02f0370522", "patch": "@@ -1,3 +1,8 @@\n+2000-12-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* dbxout.c (dbxout_block): Invert logic on eliding LBRAC/RBRAC.\n+\tInitialize variables properly for DBX_LBRAC_FIRST.\n+\n 2000-12-30  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (expand_expr, case COMPONENT_REF): Fix typo in last change."}, {"sha": "c3838dfe9566855fdec954b6a234d6d3c3e47a9b", "filename": "gcc/dbxout.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d4bb3ced48e6a0eec3a26e70e0f02f0370522/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d4bb3ced48e6a0eec3a26e70e0f02f0370522/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=711d4bb3ced48e6a0eec3a26e70e0f02f0370522", "patch": "@@ -2641,7 +2641,6 @@ dbxout_block (block, depth, args)\n      tree args;\n {\n   int blocknum = -1;\n-  int ignored;\n \n #if DBX_BLOCKS_FUNCTION_RELATIVE\n   const char *begin_label; \n@@ -2656,12 +2655,16 @@ dbxout_block (block, depth, args)\n       /* Ignore blocks never expanded or otherwise marked as real.  */\n       if (TREE_USED (block) && TREE_ASM_WRITTEN (block))\n \t{\n-#ifndef DBX_LBRAC_FIRST\n+\t  int did_output;\n+\n+#ifdef DBX_LBRAC_FIRST\n+\t  did_output = 1;\n+#else\n \t  /* In dbx format, the syms of a block come before the N_LBRAC.\n \t     If nothing is output, we don't need the N_LBRAC, either. */\n-\t  ignored = 1;\n+\t  did_output = 0;\n \t  if (debug_info_level != DINFO_LEVEL_TERSE || depth == 0)\n-\t    ignored = dbxout_syms (BLOCK_VARS (block));\n+\t    did_output = dbxout_syms (BLOCK_VARS (block));\n \t  if (args)\n \t    dbxout_reg_parms (args);\n #endif\n@@ -2670,7 +2673,7 @@ dbxout_block (block, depth, args)\n \t     the block.  Use the block's tree-walk order to generate\n \t     the assembler symbols LBBn and LBEn\n \t     that final will define around the code in this block.  */\n-\t  if (depth > 0 && !ignored)\n+\t  if (depth > 0 && did_output)\n \t    {\n \t      char buf[20];\n \t      blocknum = BLOCK_NUMBER (block);\n@@ -2720,7 +2723,7 @@ dbxout_block (block, depth, args)\n \t  dbxout_block (BLOCK_SUBBLOCKS (block), depth + 1, NULL_TREE);\n \n \t  /* Refer to the marker for the end of the block.  */\n-\t  if (depth > 0 && !ignored)\n+\t  if (depth > 0 && did_output)\n \t    {\n \t      char buf[20];\n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LBE\", blocknum);"}]}