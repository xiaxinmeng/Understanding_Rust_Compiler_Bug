{"sha": "392356899b2de257a3b13c7a8aacc5140de9b4ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyMzU2ODk5YjJkZTI1N2EzYjEzYzdhOGFhY2M1MTQwZGU5YjRlZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-12-20T16:10:43Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-12-20T16:10:43Z"}, "message": "neon.ml (crypto_intrinsics): Add vceq_64 and vtst_p64.\n\n[gcc/]\n2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/neon.ml (crypto_intrinsics): Add vceq_64 and vtst_p64.\n\t* config/arm/arm_neon.h: Regenerate.\n\t* config/arm/neon-docgen.ml: Add vceq_p64 and vtst_p64.\n\t* doc/arm-neon-intrinsics.texi: Regenerate.\n\n\n[gcc/testsuite/]\n2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* gcc.target/arm/neon-vceq_p64.c: New test.\n\t* gcc.target/arm/neon-vtst_p64.c: Likewise.\n\nFrom-SVN: r206151", "tree": {"sha": "a03ddbcfaa36d1cceef338ca603fefd12b90b99d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a03ddbcfaa36d1cceef338ca603fefd12b90b99d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392356899b2de257a3b13c7a8aacc5140de9b4ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392356899b2de257a3b13c7a8aacc5140de9b4ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392356899b2de257a3b13c7a8aacc5140de9b4ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392356899b2de257a3b13c7a8aacc5140de9b4ee/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fc017b632c79110bfd8db534e76b81318cb7530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc017b632c79110bfd8db534e76b81318cb7530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc017b632c79110bfd8db534e76b81318cb7530"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "2f4f57e1296429633b84ad3ef4c51478901bd7f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -1,3 +1,10 @@\n+2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/neon.ml (crypto_intrinsics): Add vceq_64 and vtst_p64.\n+\t* config/arm/arm_neon.h: Regenerate.\n+\t* config/arm/neon-docgen.ml: Add vceq_p64 and vtst_p64.\n+\t* doc/arm-neon-intrinsics.texi: Regenerate.\n+\n 2013-12-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* config/arm/arm.h (THUMB_SECONDARY_OUTPUT_RELOAD_CLASS): Return NO_REGS"}, {"sha": "1abbba2256c835392efc4185e3081915cfd35ebd", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -13278,6 +13278,41 @@ vstrq_p128 (poly128_t * __ptr, poly128_t __val)\n #endif\n }\n \n+/* The vceq_p64 intrinsic does not map to a single instruction.\n+   Instead we emulate it by performing a 32-bit variant of the vceq\n+   and applying a pairwise min reduction to the result.\n+   vceq_u32 will produce two 32-bit halves, each of which will contain either\n+   all ones or all zeros depending on whether the corresponding 32-bit\n+   halves of the poly64_t were equal.  The whole poly64_t values are equal\n+   if and only if both halves are equal, i.e. vceq_u32 returns all ones.\n+   If the result is all zeroes for any half then the whole result is zeroes.\n+   This is what the pairwise min reduction achieves.  */\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vceq_p64 (poly64x1_t __a, poly64x1_t __b)\n+{\n+  uint32x2_t __t_a = vreinterpret_u32_p64 (__a);\n+  uint32x2_t __t_b = vreinterpret_u32_p64 (__b);\n+  uint32x2_t __c = vceq_u32 (__t_a, __t_b);\n+  uint32x2_t __m = vpmin_u32 (__c, __c);\n+  return vreinterpret_u64_u32 (__m);\n+}\n+\n+/* The vtst_p64 intrinsic does not map to a single instruction.\n+   We emulate it in way similar to vceq_p64 above but here we do\n+   a reduction with max since if any two corresponding bits\n+   in the two poly64_t's match, then the whole result must be all ones.  */\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vtst_p64 (poly64x1_t __a, poly64x1_t __b)\n+{\n+  uint32x2_t __t_a = vreinterpret_u32_p64 (__a);\n+  uint32x2_t __t_b = vreinterpret_u32_p64 (__b);\n+  uint32x2_t __c = vtst_u32 (__t_a, __t_b);\n+  uint32x2_t __m = vpmax_u32 (__c, __c);\n+  return vreinterpret_u64_u32 (__m);\n+}\n+\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vaeseq_u8 (uint8x16_t __data, uint8x16_t __key)\n {"}, {"sha": "46cae14fdc2709b437811e3d2f04704fe7d86a5a", "filename": "gcc/config/arm/neon-docgen.ml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-docgen.ml?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -339,6 +339,14 @@ let crypto_doc =\n @item void vstrq_p128(poly128_t *, poly128_t)\n @end itemize\n \n+@itemize @bullet\n+@item uint64x1_t vceq_p64 (poly64x1_t, poly64x1_t)\n+@end itemize\n+\n+@itemize @bullet\n+@item uint64x1_t vtst_p64 (poly64x1_t, poly64x1_t)\n+@end itemize\n+\n @itemize @bullet\n @item uint32_t vsha1h_u32 (uint32_t)\n @*@emph{Form of expected instruction(s):} @code{sha1h.32 @var{q0}, @var{q1}}"}, {"sha": "738ee066bb080021ee0d2ebc9964c124632dbf58", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -2208,6 +2208,41 @@ vstrq_p128 (poly128_t * __ptr, poly128_t __val)\n #endif\n }\n \n+/* The vceq_p64 intrinsic does not map to a single instruction.\n+   Instead we emulate it by performing a 32-bit variant of the vceq\n+   and applying a pairwise min reduction to the result.\n+   vceq_u32 will produce two 32-bit halves, each of which will contain either\n+   all ones or all zeros depending on whether the corresponding 32-bit\n+   halves of the poly64_t were equal.  The whole poly64_t values are equal\n+   if and only if both halves are equal, i.e. vceq_u32 returns all ones.\n+   If the result is all zeroes for any half then the whole result is zeroes.\n+   This is what the pairwise min reduction achieves.  */\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vceq_p64 (poly64x1_t __a, poly64x1_t __b)\n+{\n+  uint32x2_t __t_a = vreinterpret_u32_p64 (__a);\n+  uint32x2_t __t_b = vreinterpret_u32_p64 (__b);\n+  uint32x2_t __c = vceq_u32 (__t_a, __t_b);\n+  uint32x2_t __m = vpmin_u32 (__c, __c);\n+  return vreinterpret_u64_u32 (__m);\n+}\n+\n+/* The vtst_p64 intrinsic does not map to a single instruction.\n+   We emulate it in way similar to vceq_p64 above but here we do\n+   a reduction with max since if any two corresponding bits\n+   in the two poly64_t's match, then the whole result must be all ones.  */\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vtst_p64 (poly64x1_t __a, poly64x1_t __b)\n+{\n+  uint32x2_t __t_a = vreinterpret_u32_p64 (__a);\n+  uint32x2_t __t_b = vreinterpret_u32_p64 (__b);\n+  uint32x2_t __c = vtst_u32 (__t_a, __t_b);\n+  uint32x2_t __m = vpmax_u32 (__c, __c);\n+  return vreinterpret_u64_u32 (__m);\n+}\n+\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vaeseq_u8 (uint8x16_t __data, uint8x16_t __key)\n {"}, {"sha": "b1468683f83baa5ea541453c565991971660abf8", "filename": "gcc/doc/arm-neon-intrinsics.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-neon-intrinsics.texi?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -11938,6 +11938,14 @@\n @item void vstrq_p128(poly128_t *, poly128_t)\n @end itemize\n \n+@itemize @bullet\n+@item uint64x1_t vceq_p64 (poly64x1_t, poly64x1_t)\n+@end itemize\n+\n+@itemize @bullet\n+@item uint64x1_t vtst_p64 (poly64x1_t, poly64x1_t)\n+@end itemize\n+\n @itemize @bullet\n @item uint32_t vsha1h_u32 (uint32_t)\n @*@emph{Form of expected instruction(s):} @code{sha1h.32 @var{q0}, @var{q1}}"}, {"sha": "95afd48500695916bed4cdeb518da68c23d0a3b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -1,3 +1,8 @@\n+2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/neon-vceq_p64.c: New test.\n+\t* gcc.target/arm/neon-vtst_p64.c: Likewise.\n+\n 2013-12-20  Bingfeng Mei  <bmei@broadcom.com>\n \n \tPR tree-optimization/59544"}, {"sha": "21a6a78a22113393934afe12039f69a425a595f4", "filename": "gcc/testsuite/gcc.target/arm/neon-vceq_p64.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vceq_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vceq_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vceq_p64.c?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+#include <stdio.h>\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  uint64_t args[] = { 0x0, 0xdeadbeef, ~0xdeadbeef, 0xffff,\n+                      ~0xffff, 0xffffffff, ~0xffffffff, ~0x0 };\n+  int i, j;\n+\n+  for (i = 0; i < sizeof (args) / sizeof (args[0]); ++i)\n+    {\n+       for (j = 0; j < sizeof (args) / sizeof (args[0]); ++j)\n+         {\n+           uint64_t a1 = args[i];\n+           uint64_t a2 = args[j];\n+           uint64_t res = vceq_p64 (vreinterpret_p64_u64 (a1),\n+                                    vreinterpret_p64_u64 (a2));\n+           uint64_t exp = (a1 == a2) ? ~0x0 : 0x0;\n+\n+           if (res != exp)\n+             {\n+               fprintf (stderr, \"vceq_p64 (a1= %lx, a2= %lx)\"\n+                                \" returned %lx, expected %lx\\n\",\n+                                 a1, a2, res, exp);\n+               abort ();\n+             }\n+         }\n+    }\n+  return 0;\n+}"}, {"sha": "3a0b117c261cf1b44dd4a940cc710595a7f8c669", "filename": "gcc/testsuite/gcc.target/arm/neon-vtst_p64.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vtst_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392356899b2de257a3b13c7a8aacc5140de9b4ee/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vtst_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vtst_p64.c?ref=392356899b2de257a3b13c7a8aacc5140de9b4ee", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+#include <stdio.h>\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  uint64_t args[] = { 0x0, 0xdeadbeef, ~0xdeadbeef, 0xffff,\n+                      ~0xffff, 0xffffffff, ~0xffffffff, ~0x0 };\n+  int i, j;\n+\n+  for (i = 0; i < sizeof (args) / sizeof (args[0]); ++i)\n+    {\n+       for (j = 0; j < sizeof (args) / sizeof (args[0]); ++j)\n+         {\n+           uint64_t a1 = args[i];\n+           uint64_t a2 = args[j];\n+           uint64_t res = vtst_p64 (vreinterpret_p64_u64 (a1),\n+                                    vreinterpret_p64_u64 (a2));\n+           uint64_t exp = (a1 & a2) ? ~0x0 : 0x0;\n+\n+           if (res != exp)\n+             {\n+               fprintf (stderr, \"vtst_p64 (a1= %lx, a2= %lx)\"\n+                                \" returned %lx, expected %lx\\n\",\n+                                 a1, a2, res, exp);\n+               abort ();\n+             }\n+         }\n+    }\n+  return 0;\n+}"}]}