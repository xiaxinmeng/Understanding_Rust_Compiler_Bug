{"sha": "b377855627f22cdef5712621e89e68048a94a164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3Nzg1NTYyN2YyMmNkZWY1NzEyNjIxZTg5ZTY4MDQ4YTk0YTE2NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-06-12T10:21:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-06-12T10:21:45Z"}, "message": "re PR tree-optimization/36345 (TBAA-pruning of points-to sets ineffective)\n\n2008-06-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/36345\n\t* tree-flow.h (struct ptr_info_def): Align escape_mask,\n\tadd memory_tag_needed flag.\n\t(may_alias_p): Declare.\n\t* tree-ssa-alias.c (may_alias_p): Export.\n\t(set_initial_properties): Use memory_tag_needed flag.\n\t(update_reference_counts): Likewise.\n\t(reset_alias_info): Reset memory_tag_needed flag.\n\t(create_name_tags): Check memory_tag_needed flag.\n\t(dump_points_to_info_for): Dump it.\n\t* tree-ssa-structalias.c (struct variable_info): Remove\n\tdirectly_dereferenced flag.\n\t(new_var_info): Do not initialize it.\n\t(process_constraint_1): Do not set it.\n\t(update_alias_info): Set is_dereferenced flag.\n\t(set_uids_in_ptset): Use may_alias_p.\n\t(set_used_smts): Check memory_tag_needed flag.\n\t(find_what_p_points_to): Likewise.  Pass is_dereferenced flag.\n\t* tree-ssa-alias.c (verify_flow_sensitive_alias_info): Check\n\tmemory_tag_needed flag.\n\t* tree-ssa-alias-warnings.c (dsa_named_for): Try to recover\n\tfrom broken design.\n\n\t* gcc.c-torture/execute/20020619-1.c: Remove broken part of\n\tthe testcase.\n\nFrom-SVN: r136695", "tree": {"sha": "e7f6dd778d69424ba44e89344260ba54c29fac8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f6dd778d69424ba44e89344260ba54c29fac8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b377855627f22cdef5712621e89e68048a94a164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b377855627f22cdef5712621e89e68048a94a164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b377855627f22cdef5712621e89e68048a94a164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b377855627f22cdef5712621e89e68048a94a164/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fd29fa912911b3db52046ef0d44144dd0e043ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd29fa912911b3db52046ef0d44144dd0e043ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd29fa912911b3db52046ef0d44144dd0e043ee"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "eb6c434e6ff09353f3343dc8a7c21fa71b6ca5da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -1,3 +1,28 @@\n+2008-06-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/36345\n+\t* tree-flow.h (struct ptr_info_def): Align escape_mask,\n+\tadd memory_tag_needed flag.\n+\t(may_alias_p): Declare.\n+\t* tree-ssa-alias.c (may_alias_p): Export.\n+\t(set_initial_properties): Use memory_tag_needed flag.\n+\t(update_reference_counts): Likewise.\n+\t(reset_alias_info): Reset memory_tag_needed flag.\n+\t(create_name_tags): Check memory_tag_needed flag.\n+\t(dump_points_to_info_for): Dump it.\n+\t* tree-ssa-structalias.c (struct variable_info): Remove\n+\tdirectly_dereferenced flag.\n+\t(new_var_info): Do not initialize it.\n+\t(process_constraint_1): Do not set it.\n+\t(update_alias_info): Set is_dereferenced flag.\n+\t(set_uids_in_ptset): Use may_alias_p.\n+\t(set_used_smts): Check memory_tag_needed flag.\n+\t(find_what_p_points_to): Likewise.  Pass is_dereferenced flag.\n+\t* tree-ssa-alias.c (verify_flow_sensitive_alias_info): Check\n+\tmemory_tag_needed flag.\n+\t* tree-ssa-alias-warnings.c (dsa_named_for): Try to recover\n+\tfrom broken design.\n+\n 2008-06-12  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/i386.c (ix86_compute_frame_layout): Disable red zone for"}, {"sha": "7155d9124137be87702b1e7541abed272ea5be48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -1,3 +1,9 @@\n+2008-06-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/36345\n+\t* gcc.c-torture/execute/20020619-1.c: Remove broken part of\n+\tthe testcase.\n+\n 2008-06-11  Edmar Wienskoski  <edmar@freescale.com>\n \n \tPR target/36425"}, {"sha": "6db1546e867c4d1b42675d1ad55c07d83592b383", "filename": "gcc/testsuite/gcc.c-torture/execute/20020619-1.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020619-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020619-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020619-1.c?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -14,19 +14,11 @@ static int ref(void)\n   return u.i;\n }\n \n-#define MAX(a,b)  (a < b ? b : a)\n-\n-static int test(void)\n-{\n-  char c[MAX(5, sizeof(int))] __attribute__((aligned)) = { 1, 2, 3, 4 };\n-  return *(int *)c;\n-}\n-\n int main()\n {\n-  int a = test();\n   int b = ref();\n-  if (a != b)\n+  if (b != 0x01020304\n+      && b != 0x04030201)\n     abort ();\n   return 0;\n }"}, {"sha": "855f0807951028874775287e55d1ee498020d38e", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -227,14 +227,21 @@ typedef struct\n /* Aliasing information for SSA_NAMEs representing pointer variables.  */\n struct ptr_info_def GTY(())\n {\n+  /* Mask of reasons this pointer's value escapes the function.  */\n+  ENUM_BITFIELD (escape_type) escape_mask : 9;\n+\n   /* Nonzero if points-to analysis couldn't determine where this pointer\n      is pointing to.  */\n   unsigned int pt_anything : 1;\n \n   /* Nonzero if the value of this pointer escapes the current function.  */\n   unsigned int value_escapes_p : 1;\n \n-  /* Nonzero if this pointer is dereferenced.  */\n+  /* Nonzero if a memory tag is needed for this pointer.  This is\n+     true if this pointer is eventually dereferenced.  */\n+  unsigned int memory_tag_needed : 1;\n+\n+  /* Nonzero if this pointer is really dereferenced.  */\n   unsigned int is_dereferenced : 1;\n \n   /* Nonzero if this pointer points to a global variable.  */\n@@ -243,9 +250,6 @@ struct ptr_info_def GTY(())\n   /* Nonzero if this pointer points to NULL.  */\n   unsigned int pt_null : 1;\n \n-  /* Mask of reasons this pointer's value escapes the function  */\n-  ENUM_BITFIELD (escape_type) escape_mask : 9;\n-\n   /* Set of variables that this pointer may point to.  */\n   bitmap pt_vars;\n \n@@ -852,6 +856,7 @@ extern void debug_points_to_info (void);\n extern void dump_points_to_info_for (FILE *, tree);\n extern void debug_points_to_info_for (tree);\n extern bool may_be_aliased (tree);\n+extern bool may_alias_p (tree, alias_set_type, tree, alias_set_type, bool);\n extern struct ptr_info_def *get_ptr_info (tree);\n extern bool may_point_to_global_var (tree);\n extern void new_type_alias (tree, tree, tree);"}, {"sha": "be26cb37d494d95b664d9ef8627d85ea06f53d66", "filename": "gcc/tree-ssa-alias-warnings.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa-alias-warnings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa-alias-warnings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias-warnings.c?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -914,6 +914,7 @@ dsa_named_for (tree ptr)\n \t{\n \t  unsigned ix;\n \t  bitmap_iterator bi;\n+\t  bool any = false;\n \n \t  EXECUTE_IF_SET_IN_BITMAP (pi->pt_vars, 0, ix, bi)\n \t    {\n@@ -922,7 +923,16 @@ dsa_named_for (tree ptr)\n \t      if (nonstandard_alias_p (ptr, alias, false))\n \t\tstrict_aliasing_warn (SSA_NAME_DEF_STMT (ptr),\n \t\t\t\t      ptr, true, alias, false, true);\n+\t      else\n+\t\tany = true;\n \t    }\n+\n+\t  /* If there was no object in the points-to set that the pointer\n+\t     may alias, unconditionally warn.  */\n+\t  if (!any)\n+\t    warning (OPT_Wstrict_aliasing,\n+\t\t     \"dereferencing type-punned pointer %D will \"\n+\t\t     \"break strict-aliasing rules\", SSA_NAME_VAR (ptr));\n \t}\n     }\n }"}, {"sha": "0e5071994de691cdcc12315e67ae75bf82350a8e", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -197,7 +197,6 @@ static bitmap_obstack alias_bitmap_obstack;\n /* Local functions.  */\n static void compute_flow_insensitive_aliasing (struct alias_info *);\n static void dump_alias_stats (FILE *);\n-static bool may_alias_p (tree, alias_set_type, tree, alias_set_type, bool);\n static tree create_memory_tag (tree type, bool is_type_tag);\n static tree get_smt_for (tree, struct alias_info *);\n static tree get_nmt_for (tree);\n@@ -588,14 +587,14 @@ set_initial_properties (struct alias_info *ai)\n          So removing this code and fixing all the bugs would be nice.\n          It is the cause of a bunch of clobbering.  */\n       if ((pi->pt_global_mem || pi->pt_anything) \n-\t  && pi->is_dereferenced && pi->name_mem_tag)\n+\t  && pi->memory_tag_needed && pi->name_mem_tag)\n \t{\n \t  mark_call_clobbered (pi->name_mem_tag, ESCAPE_IS_GLOBAL);\n \t  MTAG_GLOBAL (pi->name_mem_tag) = true;\n \t}\n       \n       if ((pi->pt_global_mem || pi->pt_anything) \n-\t  && pi->is_dereferenced\n+\t  && pi->memory_tag_needed\n \t  && tag)\n \t{\n \t  mark_call_clobbered (tag, ESCAPE_IS_GLOBAL);\n@@ -1278,7 +1277,7 @@ update_reference_counts (struct mem_ref_stats_d *mem_ref_stats)\n       if (ptr\n \t  && POINTER_TYPE_P (TREE_TYPE (ptr))\n \t  && (pi = SSA_NAME_PTR_INFO (ptr)) != NULL\n-\t  && pi->is_dereferenced)\n+\t  && pi->memory_tag_needed)\n \t{\n \t  unsigned j;\n \t  bitmap_iterator bj;\n@@ -2027,6 +2026,7 @@ reset_alias_info (void)\n \t  pi->pt_anything = 0;\n \t  pi->pt_null = 0;\n \t  pi->value_escapes_p = 0;\n+\t  pi->memory_tag_needed = 0;\n \t  pi->is_dereferenced = 0;\n \t  if (pi->pt_vars)\n \t    bitmap_clear (pi->pt_vars);\n@@ -2170,7 +2170,7 @@ create_name_tags (void)\n \n       pi = SSA_NAME_PTR_INFO (ptr);\n \n-      if (pi->pt_anything || !pi->is_dereferenced)\n+      if (pi->pt_anything || !pi->memory_tag_needed)\n \t{\n \t  /* No name tags for pointers that have not been\n \t     dereferenced or point to an arbitrary location.  */\n@@ -2649,7 +2649,7 @@ maybe_create_global_var (void)\n    \n    VAR_ALIAS_SET is the alias set for VAR.  */\n \n-static bool\n+bool\n may_alias_p (tree ptr, alias_set_type mem_alias_set,\n \t     tree var, alias_set_type var_alias_set,\n \t     bool alias_set_only)\n@@ -3231,6 +3231,8 @@ dump_points_to_info_for (FILE *file, tree ptr)\n \n       if (pi->is_dereferenced)\n \tfprintf (file, \", is dereferenced\");\n+      else if (pi->memory_tag_needed)\n+\tfprintf (file, \", is dereferenced in call\");\n \n       if (pi->value_escapes_p)\n \tfprintf (file, \", its value escapes\");"}, {"sha": "338e190d4c8fb6c6d8554c4b4a0dc7a88d76628f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -227,11 +227,6 @@ struct variable_info\n   /* A link to the variable for the next field in this structure.  */\n   struct variable_info *next;\n \n-  /* True if the variable is directly the target of a dereference.\n-     This is used to track which variables are *actually* dereferenced\n-     so we can prune their points to listed. */\n-  unsigned int directly_dereferenced:1;\n-\n   /* True if this is a variable created by the constraint analysis, such as\n      heap variables and constraints we had to break up.  */\n   unsigned int is_artificial_var:1;\n@@ -364,7 +359,6 @@ new_var_info (tree t, unsigned int id, const char *name)\n   ret->id = id;\n   ret->name = name;\n   ret->decl = t;\n-  ret->directly_dereferenced = false;\n   ret->is_artificial_var = false;\n   ret->is_heap_var = false;\n   ret->is_special_var = false;\n@@ -2520,14 +2514,6 @@ process_constraint_1 (constraint_t t, bool from_call)\n   gcc_assert (rhs.var < VEC_length (varinfo_t, varmap));\n   gcc_assert (lhs.var < VEC_length (varinfo_t, varmap));\n \n-  if (!from_call)\n-    {\n-      if (lhs.type == DEREF)\n-\tget_varinfo (lhs.var)->directly_dereferenced = true;\n-      if (rhs.type == DEREF)\n-\tget_varinfo (rhs.var)->directly_dereferenced = true;\n-    }\n-\n   if (!use_field_sensitive)\n     {\n       t->rhs.offset = 0;\n@@ -3369,6 +3355,12 @@ update_alias_info (tree stmt, struct alias_info *ai)\n \t is an escape point, whether OP escapes.  */\n       count_uses_and_derefs (op, stmt, &num_uses, &num_loads, &num_stores);\n \n+      /* For directly dereferenced pointers we can apply\n+\t TBAA-pruning to their points-to set.  We may not count the\n+\t implicit dereferences &PTR->FLD here.  */\n+      if (num_loads + num_stores > 0)\n+\tpi->is_dereferenced = 1;\n+\n       /* Handle a corner case involving address expressions of the\n \t form '&PTR->FLD'.  The problem with these expressions is that\n \t they do not represent a dereference of PTR.  However, if some\n@@ -3409,7 +3401,10 @@ update_alias_info (tree stmt, struct alias_info *ai)\n \t     dereferenced pointers that point to a set of\n \t     variables will be assigned a name tag to alias\n \t     all the variables OP points to.  */\n-\t  pi->is_dereferenced = 1;\n+\t  pi->memory_tag_needed = 1;\n+\n+\t  /* ???  For always executed direct dereferences we can\n+\t     apply TBAA-pruning to their escape set.  */\n \n \t  /* If this is a store operation, mark OP as being\n \t     dereferenced to store, otherwise mark it as being\n@@ -3443,7 +3438,7 @@ update_alias_info (tree stmt, struct alias_info *ai)\n \t      || stmt_escape_type == ESCAPE_STORED_IN_GLOBAL)\n \t    {\n \t      pointer_set_insert (ai->dereferenced_ptrs_store, var);\n-\t      pi->is_dereferenced = 1;\n+\t      pi->memory_tag_needed = 1;\n \t    }\n \t}\n     }\n@@ -4653,10 +4648,11 @@ set_uids_in_ptset (tree ptr, bitmap into, bitmap from, bool is_derefed,\n \t    bitmap_set_bit (into, DECL_UID (vi->decl));\n \t  else\n \t    {\n-\t      alias_set_type var_alias_set, ptr_alias_set;\n+\t      alias_set_type var_alias_set, mem_alias_set;\n \t      var_alias_set = get_alias_set (vi->decl);\n-\t      ptr_alias_set = get_alias_set (TREE_TYPE (TREE_TYPE (ptr)));\n-\t      if (alias_sets_conflict_p (ptr_alias_set, var_alias_set))\n+\t      mem_alias_set = get_alias_set (TREE_TYPE (TREE_TYPE (ptr)));\n+\t      if (may_alias_p (SSA_NAME_VAR (ptr), mem_alias_set,\n+\t\t\t       vi->decl, var_alias_set, true))\n \t        bitmap_set_bit (into, DECL_UID (vi->decl));\n \t    }\n \t}\n@@ -4703,7 +4699,7 @@ set_used_smts (void)\n       /* Skip the special variables and those that can't be aliased.  */\n       if (vi->is_special_var\n \t  || !SSA_VAR_P (var)\n-\t  || (pi && !pi->is_dereferenced)\n+\t  || (pi && !pi->memory_tag_needed)\n \t  || (TREE_CODE (var) == VAR_DECL && !may_be_aliased (var))\n \t  || !POINTER_TYPE_P (TREE_TYPE (var)))\n \tcontinue;\n@@ -4771,7 +4767,7 @@ find_what_p_points_to (tree p)\n \t  bitmap finished_solution;\n \t  bitmap result;\n \n-\t  if (!pi->is_dereferenced)\n+\t  if (!pi->memory_tag_needed)\n \t    return false;\n \n \t  /* This variable may have been collapsed, let's get the real\n@@ -4815,7 +4811,7 @@ find_what_p_points_to (tree p)\n \t  stats.points_to_sets_created++;\n \n \t  set_uids_in_ptset (p, finished_solution, vi->solution,\n-\t\t\t     vi->directly_dereferenced,\n+\t\t\t     pi->is_dereferenced,\n \t\t\t     vi->no_tbaa_pruning);\n \t  result = shared_bitmap_lookup (finished_solution);\n "}, {"sha": "52b17d4f9721a933489e910daa7e8a60b833f15a", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b377855627f22cdef5712621e89e68048a94a164/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=b377855627f22cdef5712621e89e68048a94a164", "patch": "@@ -559,7 +559,7 @@ verify_flow_sensitive_alias_info (void)\n \tcontinue;\n \n       ann = var_ann (var);\n-      if (pi->is_dereferenced && !pi->name_mem_tag && !ann->symbol_mem_tag)\n+      if (pi->memory_tag_needed && !pi->name_mem_tag && !ann->symbol_mem_tag)\n \t{\n \t  error (\"dereferenced pointers should have a name or a symbol tag\");\n \t  goto err;"}]}