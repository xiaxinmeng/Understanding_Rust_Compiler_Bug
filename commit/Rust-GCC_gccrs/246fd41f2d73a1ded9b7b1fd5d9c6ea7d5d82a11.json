{"sha": "246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ2ZmQ0MWYyZDczYTFkZWQ5YjdiMWZkNWQ5YzZlYTdkNWQ4MmExMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-11-21T12:33:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "1999-11-21T12:33:17Z"}, "message": "regclass.c (dump_regclass): New function.\n\n\t* regclass.c (dump_regclass): New function.\n\t(regclass): New parameter DUMP, call DUMP_REGCLASS.\n\t* toplev.c (rest_of_compilation): Opent lreg dump file before regclass,\n\tpass rtl_dump_file to regclass.\n\t* rtl.h (regclass): Update prototype.\n\nFrom-SVN: r30600", "tree": {"sha": "faad37a97de1c3583de42c43a416e945058c536d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faad37a97de1c3583de42c43a416e945058c536d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/comments", "author": null, "committer": null, "parents": [{"sha": "eeae2112fae80a54aedef36282238a548d3fcf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeae2112fae80a54aedef36282238a548d3fcf08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeae2112fae80a54aedef36282238a548d3fcf08"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "50d158c32025a8f6db622cf135dea331a27f0d56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "patch": "@@ -1,3 +1,11 @@\n+Fro Nov 19 05:48:45 CET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n+\n+\t* regclass.c (dump_regclass): New function.\n+\t(regclass): New parameter DUMP, call DUMP_REGCLASS.\n+\t* toplev.c (rest_of_compilation): Opent lreg dump file before regclass,\n+\tpass rtl_dump_file to regclass.\n+\t* rtl.h (regclass): Update prototype.\n+\n Sun Nov 21 17:11:13 1999  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* varasm.c (output_constructor): Solve problem with long long"}, {"sha": "f14433caa03ff20910febb0ba01814752caa5580", "filename": "gcc/regclass.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "patch": "@@ -696,6 +696,7 @@ static int loop_depth;\n static int loop_cost;\n \n static rtx scan_one_insn\tPROTO((rtx, int));\n+static void dump_regclass\tPROTO((FILE *));\n static void record_reg_classes\tPROTO((int, int, rtx *, enum machine_mode *,\n \t\t\t\t       char *, const char **, rtx));\n static int copy_cost\t\tPROTO((rtx, enum machine_mode, \n@@ -744,6 +745,28 @@ regclass_init ()\n      before regclass is run.  */\n   prefclass = 0;\n }\n+\f\n+/* Dump register costs.  */\n+void\n+dump_regclass (dump)\n+     FILE *dump;\n+{\n+  static const char *const reg_class_names[] = REG_CLASS_NAMES;\n+  int i;\n+  for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n+    {\n+      enum reg_class class;\n+      if (REG_N_REFS (i))\n+\t{\n+\t  fprintf (dump, \";; Register %i costs:\", i);\n+\t  for (class = 0; class < N_REG_CLASSES; class++)\n+\t    fprintf (dump, \" %s:%i\", reg_class_names[(int) class],\n+\t\t     costs[i].cost[class]);\n+\t  fprintf (dump, \" MEM:%i\\n\\n\", costs[i].mem_cost);\n+\t}\n+    }\n+}\n+\n \f\n /* Subroutine of regclass, processes one insn INSN.  Scan it and record each\n    time it would save code to put a certain register in a certain class.\n@@ -951,9 +974,10 @@ scan_one_insn (insn, pass)\n    This pass comes just before local register allocation.  */\n \n void\n-regclass (f, nregs)\n+regclass (f, nregs, dump)\n      rtx f;\n      int nregs;\n+     FILE *dump;\n {\n   register rtx insn;\n   register int i;\n@@ -1109,6 +1133,8 @@ regclass (f, nregs)\n \t}\n     }\n \n+  if (dump)\n+    dump_regclass (dump);\n #ifdef FORBIDDEN_INC_DEC_CLASSES\n   free (in_inc_dec);\n #endif"}, {"sha": "136cb9248251542763687129f8fab0007eb5f6be", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "patch": "@@ -1571,7 +1571,7 @@ extern void init_regs\t\t\tPROTO ((void));\n extern void init_reg_sets\t\tPROTO ((void));\n extern void regset_release_memory\tPROTO ((void));\n extern void regclass_init\t\tPROTO ((void));\n-extern void regclass\t\t\tPROTO ((rtx, int));\n+extern void regclass\t\t\tPROTO ((rtx, int, FILE *));\n extern void reg_scan\t\t\tPROTO ((rtx, int, int));\n extern void reg_scan_update\t\tPROTO ((rtx, rtx, int));\n extern void fix_register\t\tPROTO ((const char *, int, int));"}, {"sha": "53a8a792329475c7206a3e24a802aaca5b0fd621", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=246fd41f2d73a1ded9b7b1fd5d9c6ea7d5d82a11", "patch": "@@ -4032,7 +4032,7 @@ rest_of_compilation (decl)\n     {\n       TIMEVAR (flow_time,\n \t       {\n-\t\t regclass (insns, max_reg_num ());\n+\t\t regclass (insns, max_reg_num (), NULL);\n \t\t stupid_life_analysis (insns, max_reg_num (),\n \t\t\t\t       rtl_dump_file);\n \t       });\n@@ -4146,6 +4146,9 @@ rest_of_compilation (decl)\n      epilogue thus changing register elimination offsets.  */\n   current_function_is_leaf = leaf_function_p ();\n \n+  if (local_reg_dump)\n+    open_dump_file (\".12.lreg\", decl_printable_name (decl, 2));\n+\n   /* Unless we did stupid register allocation,\n      allocate pseudo-regs that are used only within 1 basic block. \n \n@@ -4159,7 +4162,7 @@ rest_of_compilation (decl)\n \t\t  of life info during sched.  */\n \t       if (! flag_schedule_insns)\n \t\t recompute_reg_usage (insns, ! optimize_size);\n-\t       regclass (insns, max_reg_num ());\n+\t       regclass (insns, max_reg_num (), rtl_dump_file);\n \t       rebuild_label_notes_after_reload = local_alloc ();\n \t     });\n   else\n@@ -4169,8 +4172,6 @@ rest_of_compilation (decl)\n \n   if (local_reg_dump)\n     {\n-      open_dump_file (\".12.lreg\", decl_printable_name (decl, 2));\n-\n       TIMEVAR (dump_time, dump_flow_info (rtl_dump_file));\n       TIMEVAR (dump_time, dump_local_alloc (rtl_dump_file));\n "}]}