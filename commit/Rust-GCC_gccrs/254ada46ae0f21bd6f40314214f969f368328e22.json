{"sha": "254ada46ae0f21bd6f40314214f969f368328e22", "node_id": "C_kwDOANBUbNoAKDI1NGFkYTQ2YWUwZjIxYmQ2ZjQwMzE0MjE0Zjk2OWYzNjgzMjhlMjI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-01-17T17:03:18Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-01-18T15:02:02Z"}, "message": "Limit the number of relations registered per basic block.\n\nIn pathological cases, the number of transitive relations being added is\npotentially quadratic.  Lookups for relations in a block is linear in\nnature, so simply limit the number of relations to some reasonable number.\n\n\tPR tree-optimization/104038\n\t* doc/invoke.texi (relation-block-limit): New.\n\t* params.opt (relation-block-limit): New.\n\t* value-relation.cc (dom_oracle::register_relation): Check for NULL\n\trecord before invoking transitive registery.\n\t(dom_oracle::set_one_relation): Check limit before creating record.\n\t(dom_oracle::register_transitives): Stop when no record created.\n\t* value-relation.h (relation_chain_head::m_num_relations): New.", "tree": {"sha": "45c2a9fd29aa47dda63f86debfd557c811ebe108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45c2a9fd29aa47dda63f86debfd557c811ebe108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254ada46ae0f21bd6f40314214f969f368328e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254ada46ae0f21bd6f40314214f969f368328e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254ada46ae0f21bd6f40314214f969f368328e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254ada46ae0f21bd6f40314214f969f368328e22/comments", "author": null, "committer": null, "parents": [{"sha": "c952126870c92cf293d59ffb1497e402eb8fc269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c952126870c92cf293d59ffb1497e402eb8fc269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c952126870c92cf293d59ffb1497e402eb8fc269"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "58751c48b8e91ce91661ce0647ae61f550d152b6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=254ada46ae0f21bd6f40314214f969f368328e22", "patch": "@@ -15088,6 +15088,9 @@ per supernode, before terminating analysis.\n Maximum depth of logical expression evaluation ranger will look through\n when evaluating outgoing edge ranges.\n \n+@item relation-block-limit\n+Maximum number of relations the oracle will register in a basic block.\n+\n @item openacc-kernels\n Specify mode of OpenACC `kernels' constructs handling.\n With @option{--param=openacc-kernels=decompose}, OpenACC `kernels'"}, {"sha": "b07663daa05cb82a2c55268073bb8e3af1da6364", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=254ada46ae0f21bd6f40314214f969f368328e22", "patch": "@@ -915,6 +915,10 @@ Common Joined UInteger Var(param_ranger_logical_depth) Init(6) IntegerRange(1, 9\n Maximum depth of logical expression evaluation ranger will look through when\n evaluating outgoing edge ranges.\n \n+-param=relation-block-limit=\n+Common Joined UInteger Var(param_relation_block_limit) Init(200) IntegerRange(0, 9999) Param Optimization\n+Maximum number of relations the oracle will register in a basic block.\n+\n -param=rpo-vn-max-loop-depth=\n Common Joined UInteger Var(param_rpo_vn_max_loop_depth) Init(7) IntegerRange(2, 65536) Param Optimization\n Maximum depth of a loop nest to fully value-number optimistically."}, {"sha": "32ca693c464fec827aa885d44abde3c7224e8bdf", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=254ada46ae0f21bd6f40314214f969f368328e22", "patch": "@@ -889,13 +889,14 @@ dom_oracle::register_relation (basic_block bb, relation_kind k, tree op1,\n   else\n     {\n       relation_chain *ptr = set_one_relation (bb, k, op1, op2);\n-      register_transitives (bb, *ptr);\n+      if (ptr)\n+\tregister_transitives (bb, *ptr);\n     }\n }\n \n // Register relation K between OP! and OP2 in block BB.\n // This creates the record and searches for existing records in the dominator\n-// tree to merge with.\n+// tree to merge with.  Return the record, or NULL if no record was created.\n \n relation_chain *\n dom_oracle::set_one_relation (basic_block bb, relation_kind k, tree op1,\n@@ -940,6 +941,13 @@ dom_oracle::set_one_relation (basic_block bb, relation_kind k, tree op1,\n     }\n   else\n     {\n+      if (m_relations[bbi].m_num_relations >= param_relation_block_limit)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"  Not registered due to bb being full\\n\");\n+\t  return NULL;\n+\t}\n+      m_relations[bbi].m_num_relations++;\n       // Check for an existing relation further up the DOM chain.\n       // By including dominating relations, The first one found in any search\n       // will be the aggregate of all the previous ones.\n@@ -1040,7 +1048,8 @@ dom_oracle::register_transitives (basic_block root_bb,\n \t  value_relation nr (relation.kind (), r1, r2);\n \t  if (nr.apply_transitive (*ptr))\n \t    {\n-\t      set_one_relation (root_bb, nr.kind (), nr.op1 (), nr.op2 ());\n+\t      if (!set_one_relation (root_bb, nr.kind (), nr.op1 (), nr.op2 ()))\n+\t\treturn;\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"   Registering transitive relation \");"}, {"sha": "44d0796d9394b14431a309a9f4da52dad52e9183", "filename": "gcc/value-relation.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fvalue-relation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254ada46ae0f21bd6f40314214f969f368328e22/gcc%2Fvalue-relation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.h?ref=254ada46ae0f21bd6f40314214f969f368328e22", "patch": "@@ -157,6 +157,7 @@ class relation_chain_head\n public:\n   bitmap m_names;\t\t// ssa_names with relations in this block.\n   class relation_chain *m_head; // List of relations in block.\n+  int m_num_relations;\t\t// Number of relations in block.\n   relation_kind find_relation (const_bitmap b1, const_bitmap b2) const;\n };\n "}]}