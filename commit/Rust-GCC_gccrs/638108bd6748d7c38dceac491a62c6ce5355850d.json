{"sha": "638108bd6748d7c38dceac491a62c6ce5355850d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4MTA4YmQ2NzQ4ZDdjMzhkY2VhYzQ5MWE2MmM2Y2U1MzU1ODUwZA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:16:29Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:16:29Z"}, "message": "[Patch 3/17] Implement TARGET_C_EXCESS_PRECISION for s390\n\n\t* config/s390/s390.c (s390_excess_precision): New.\n\t(TARGET_C_EXCESS_PRECISION): Define.\n\nFrom-SVN: r242773", "tree": {"sha": "c918945c4fc2bd799b75ae07a3b7473459eefeb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c918945c4fc2bd799b75ae07a3b7473459eefeb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/638108bd6748d7c38dceac491a62c6ce5355850d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638108bd6748d7c38dceac491a62c6ce5355850d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638108bd6748d7c38dceac491a62c6ce5355850d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638108bd6748d7c38dceac491a62c6ce5355850d/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97dfd54b7d13f321c1ad18ee316d114c06b92ee"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "ab0154b899803fc04f5ac1548d9cf3a985e5d88d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638108bd6748d7c38dceac491a62c6ce5355850d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638108bd6748d7c38dceac491a62c6ce5355850d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=638108bd6748d7c38dceac491a62c6ce5355850d", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/s390/s390.c (s390_excess_precision): New.\n+\t(TARGET_C_EXCESS_PRECISION): Define.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/i386/i386.c (ix86_excess_precision): New."}, {"sha": "dc82fb69082efabb23e1b23a09f80f727a97ca8c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638108bd6748d7c38dceac491a62c6ce5355850d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638108bd6748d7c38dceac491a62c6ce5355850d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=638108bd6748d7c38dceac491a62c6ce5355850d", "patch": "@@ -15260,6 +15260,43 @@ s390_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree ty\n   return NULL;\n }\n \n+/* Implement TARGET_C_EXCESS_PRECISION.\n+\n+   FIXME: For historical reasons, float_t and double_t are typedef'ed to\n+   double on s390, causing operations on float_t to operate in a higher\n+   precision than is necessary.  However, it is not the case that SFmode\n+   operations have implicit excess precision, and we generate more optimal\n+   code if we let the compiler know no implicit extra precision is added.\n+\n+   That means when we are compiling with -fexcess-precision=fast, the value\n+   we set for FLT_EVAL_METHOD will be out of line with the actual precision of\n+   float_t (though they would be correct for -fexcess-precision=standard).\n+\n+   A complete fix would modify glibc to remove the unnecessary typedef\n+   of float_t to double.  */\n+\n+static enum flt_eval_method\n+s390_excess_precision (enum excess_precision_type type)\n+{\n+  switch (type)\n+    {\n+      case EXCESS_PRECISION_TYPE_IMPLICIT:\n+      case EXCESS_PRECISION_TYPE_FAST:\n+\t/* The fastest type to promote to will always be the native type,\n+\t   whether that occurs with implicit excess precision or\n+\t   otherwise.  */\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+      case EXCESS_PRECISION_TYPE_STANDARD:\n+\t/* Otherwise, when we are in a standards compliant mode, to\n+\t   ensure consistency with the implementation in glibc, report that\n+\t   float is evaluated to the range and precision of double.  */\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+}\n+\n /* Initialize GCC target structure.  */\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n@@ -15320,6 +15357,9 @@ s390_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree ty\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n+#undef TARGET_C_EXCESS_PRECISION\n+#define TARGET_C_EXCESS_PRECISION s390_excess_precision\n+\n #undef  TARGET_SCHED_ADJUST_PRIORITY\n #define TARGET_SCHED_ADJUST_PRIORITY s390_adjust_priority\n #undef TARGET_SCHED_ISSUE_RATE"}]}