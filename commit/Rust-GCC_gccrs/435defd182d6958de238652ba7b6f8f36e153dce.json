{"sha": "435defd182d6958de238652ba7b6f8f36e153dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1ZGVmZDE4MmQ2OTU4ZGUyMzg2NTJiYTdiNmY4ZjM2ZTE1M2RjZQ==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-08-28T01:36:16Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-08-28T01:36:16Z"}, "message": "(all gen_rtx (CONST_INT) references): Use GEN_INT to generate const_int rtx.\n\n(legitimize_pic_address): Pass NULL_RTX instead of \"0\" as pointer.\n\nFrom-SVN: r1981", "tree": {"sha": "5e15f6cf84a49d3004137c4976b2d996faef666a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e15f6cf84a49d3004137c4976b2d996faef666a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435defd182d6958de238652ba7b6f8f36e153dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435defd182d6958de238652ba7b6f8f36e153dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435defd182d6958de238652ba7b6f8f36e153dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435defd182d6958de238652ba7b6f8f36e153dce/comments", "author": null, "committer": null, "parents": [{"sha": "0e7d0eb9de3f1eafbba299c329a2e5abd4b3b19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7d0eb9de3f1eafbba299c329a2e5abd4b3b19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7d0eb9de3f1eafbba299c329a2e5abd4b3b19b"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "c39da9bd90c31333ddcf2d9b942842e34d44a637", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435defd182d6958de238652ba7b6f8f36e153dce/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435defd182d6958de238652ba7b6f8f36e153dce/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=435defd182d6958de238652ba7b6f8f36e153dce", "patch": "@@ -100,7 +100,7 @@ output_op_from_reg (src, template)\n \n   xops[0] = src;\n   xops[1] = AT_SP (Pmode);\n-  xops[2] = gen_rtx (CONST_INT, VOIDmode, GET_MODE_SIZE (GET_MODE (src)));\n+  xops[2] = GEN_INT (GET_MODE_SIZE (GET_MODE (src)));\n   xops[3] = stack_pointer_rtx;\n \n   if (GET_MODE_SIZE (GET_MODE (src)) > UNITS_PER_WORD)\n@@ -129,7 +129,7 @@ output_to_reg (dest, dies)\n \n   xops[0] = AT_SP (Pmode);\n   xops[1] = stack_pointer_rtx;\n-  xops[2] = gen_rtx (CONST_INT, VOIDmode, GET_MODE_SIZE (GET_MODE (dest)));\n+  xops[2] = GEN_INT (GET_MODE_SIZE (GET_MODE (dest)));\n   xops[3] = dest;\n \n   output_asm_insn (AS2 (sub%L1,%2,%1), xops);\n@@ -223,12 +223,12 @@ asm_add (n, x)\n   xops[1] = x;\n   if (n < 0)\n     {\n-      xops[0] = gen_rtx (CONST_INT, VOIDmode, -n);\n+      xops[0] = GEN_INT (-n);\n       output_asm_insn (AS2 (sub%L0,%0,%1), xops);\n     }\n   else if (n > 0)\n     {\n-      xops[0] = gen_rtx (CONST_INT, VOIDmode, n);\n+      xops[0] = GEN_INT (n);\n       output_asm_insn (AS2 (add%L0,%0,%1), xops);\n     }\n }\n@@ -449,7 +449,7 @@ output_move_const_single (operands)\n       u1.i[0] = CONST_DOUBLE_LOW (operands[1]);\n       u1.i[1] = CONST_DOUBLE_HIGH (operands[1]);\n       u2.f = u1.d;\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, u2.i);\n+      operands[1] = GEN_INT (u2.i);\n     }\n   return singlemove_string (operands);\n }\n@@ -581,7 +581,8 @@ legitimize_pic_address (orig, reg)\n \treg = gen_reg_rtx (Pmode);\n \n       base = legitimize_pic_address (XEXP (addr, 0), reg);\n-      addr = legitimize_pic_address (XEXP (addr, 1), base == reg ? 0 : reg);\n+      addr = legitimize_pic_address (XEXP (addr, 1),\n+\t\t\t\t     base == reg ? NULL_RTX : reg);\n \n       if (GET_CODE (addr) == CONST_INT)\n \treturn plus_constant (base, INTVAL (addr));\n@@ -628,7 +629,7 @@ function_prologue (file, size)\n \n   xops[0] = stack_pointer_rtx;\n   xops[1] = frame_pointer_rtx;\n-  xops[2] = gen_rtx (CONST_INT, VOIDmode, size);\n+  xops[2] = GEN_INT (size);\n   if (frame_pointer_needed)\n     {\n       output_asm_insn (\"push%L1 %1\", xops);\n@@ -790,13 +791,13 @@ function_epilogue (file, size)\n     {\n       /* If there is no frame pointer, we must still release the frame. */\n \n-      xops[0] = gen_rtx (CONST_INT, VOIDmode, size);\n+      xops[0] = GEN_INT (size);\n       output_asm_insn (AS2 (add%L2,%0,%2), xops);\n     }\n \n   if (current_function_pops_args && current_function_args_size)\n     {\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, current_function_pops_args);\n+      xops[1] = GEN_INT (current_function_pops_args);\n \n       /* i386 can only pop 32K bytes (maybe 64K?  Is it signed?).  If\n \t asked to pop more, pop return address, do explicit add, and jump\n@@ -1657,8 +1658,8 @@ output_fix_trunc (insn, operands)\n   xops[0] = stack_pointer_rtx;\n   xops[1] = AT_SP (SImode);\n   xops[2] = adj_offsettable_operand (xops[1], 2);\n-  xops[3] = gen_rtx (CONST_INT, VOIDmode, 4);\n-  xops[4] = gen_rtx (CONST_INT, VOIDmode, 0xc00);\n+  xops[3] = GEN_INT (4);\n+  xops[4] = GEN_INT (0xc00);\n   xops[5] = operands[2];\n \n   output_asm_insn (AS2 (sub%L0,%3,%0), xops);\n@@ -1799,45 +1800,45 @@ output_fp_cc0_set (insn)\n   switch (code)\n     {\n     case GT:\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0x45);\n+      xops[1] = GEN_INT (0x45);\n       output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n       /* je label */\n       break;\n \n     case LT:\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0x45);\n-      xops[2] = gen_rtx (CONST_INT, VOIDmode, 0x01);\n+      xops[1] = GEN_INT (0x45);\n+      xops[2] = GEN_INT (0x01);\n       output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n       output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n       /* je label */\n       break;\n \n     case GE:\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0x05);\n+      xops[1] = GEN_INT (0x05);\n       output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n       /* je label */\n       break;\n \n     case LE:\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0x45);\n-      xops[2] = gen_rtx (CONST_INT, VOIDmode, 0x40);\n+      xops[1] = GEN_INT (0x45);\n+      xops[2] = GEN_INT (0x40);\n       output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n       output_asm_insn (AS1 (dec%B0,%h0), xops);\n       output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n       /* jb label */\n       break;\n \n     case EQ:\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0x45);\n-      xops[2] = gen_rtx (CONST_INT, VOIDmode, 0x40);\n+      xops[1] = GEN_INT (0x45);\n+      xops[2] = GEN_INT (0x40);\n       output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n       output_asm_insn (AS2 (cmp%B0,%2,%h0), xops);\n       /* je label */\n       break;\n \n     case NE:\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0x44);\n-      xops[2] = gen_rtx (CONST_INT, VOIDmode, 0x40);\n+      xops[1] = GEN_INT (0x44);\n+      xops[2] = GEN_INT (0x40);\n       output_asm_insn (AS2 (and%B0,%1,%h0), xops);\n       output_asm_insn (AS2 (xor%B0,%2,%h0), xops);\n       /* jne label */"}]}