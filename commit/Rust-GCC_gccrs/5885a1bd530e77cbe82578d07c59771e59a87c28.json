{"sha": "5885a1bd530e77cbe82578d07c59771e59a87c28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4NWExYmQ1MzBlNzdjYmU4MjU3OGQwN2M1OTc3MWU1OWE4N2MyOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-22T11:32:20Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-22T11:32:20Z"}, "message": "Fix emission of jump tables (PR tree-optimization/86263).\n\n2018-06-22  Martin Liska  <mliska@suse.cz>\n\n        PR tree-optimization/86263\n\t* tree-switch-conversion.c (jump_table_cluster::find_jump_tables):\n        Bail out if is_enabled is false.\n\t* tree-switch-conversion.h (jump_table_cluster::is_enabled):\n        New declaration.\n\t(jump_table_cluster::is_enabled): New function.\n\nFrom-SVN: r261886", "tree": {"sha": "e89d27c1e190e257cf552b7f620e9ceed9a09243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e89d27c1e190e257cf552b7f620e9ceed9a09243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5885a1bd530e77cbe82578d07c59771e59a87c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5885a1bd530e77cbe82578d07c59771e59a87c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5885a1bd530e77cbe82578d07c59771e59a87c28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5885a1bd530e77cbe82578d07c59771e59a87c28/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c172706f4c49a3015ecd248b90ddbbb62dbedec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c172706f4c49a3015ecd248b90ddbbb62dbedec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c172706f4c49a3015ecd248b90ddbbb62dbedec"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "58729e76dbbde995429195443b9e41733bde116a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5885a1bd530e77cbe82578d07c59771e59a87c28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5885a1bd530e77cbe82578d07c59771e59a87c28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5885a1bd530e77cbe82578d07c59771e59a87c28", "patch": "@@ -1,3 +1,12 @@\n+2018-06-22  Martin Liska  <mliska@suse.cz>\n+\n+        PR tree-optimization/86263\n+\t* tree-switch-conversion.c (jump_table_cluster::find_jump_tables):\n+        Bail out if is_enabled is false.\n+\t* tree-switch-conversion.h (jump_table_cluster::is_enabled):\n+        New declaration.\n+\t(jump_table_cluster::is_enabled): New function.\n+\n 2018-06-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-streamer-out.c (DFS::DFS_write_tree_body): Do not stream"}, {"sha": "029ce8c363f9fc2dfa2c395e3d631ff46d050e22", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5885a1bd530e77cbe82578d07c59771e59a87c28/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5885a1bd530e77cbe82578d07c59771e59a87c28/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=5885a1bd530e77cbe82578d07c59771e59a87c28", "patch": "@@ -1094,6 +1094,9 @@ jump_table_cluster::emit (tree index_expr, tree,\n vec<cluster *>\n jump_table_cluster::find_jump_tables (vec<cluster *> &clusters)\n {\n+  if (!is_enabled ())\n+    return clusters.copy ();\n+\n   unsigned l = clusters.length ();\n   auto_vec<min_cluster_item> min;\n   min.reserve (l + 1);"}, {"sha": "79a1320c4483f884dca22d444bd97e16c1bc85dd", "filename": "gcc/tree-switch-conversion.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5885a1bd530e77cbe82578d07c59771e59a87c28/gcc%2Ftree-switch-conversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5885a1bd530e77cbe82578d07c59771e59a87c28/gcc%2Ftree-switch-conversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.h?ref=5885a1bd530e77cbe82578d07c59771e59a87c28", "patch": "@@ -254,6 +254,9 @@ struct jump_table_cluster: public group_cluster\n   /* Return the smallest number of different values for which it is best\n      to use a jump-table instead of a tree of conditional branches.  */\n   static inline unsigned int case_values_threshold (void);\n+\n+  /* Return whether jump table expansion is allowed.  */\n+  static bool is_enabled (void);\n };\n \n /* A GIMPLE switch statement can be expanded to a short sequence of bit-wise\n@@ -450,6 +453,23 @@ jump_table_cluster::case_values_threshold (void)\n   return threshold;\n }\n \n+/* Return whether jump table expansion is allowed.  */\n+bool jump_table_cluster::is_enabled (void)\n+{\n+  /* If neither casesi or tablejump is available, or flag_jump_tables\n+     over-ruled us, we really have no choice.  */\n+  if (!targetm.have_casesi () && !targetm.have_tablejump ())\n+    return false;\n+  if (!flag_jump_tables)\n+    return false;\n+#ifndef ASM_OUTPUT_ADDR_DIFF_ELT\n+  if (flag_pic)\n+    return false;\n+#endif\n+\n+  return true;\n+}\n+\n /* A case_bit_test represents a set of case nodes that may be\n    selected from using a bit-wise comparison.  HI and LO hold\n    the integer to be tested against, TARGET_EDGE contains the"}]}