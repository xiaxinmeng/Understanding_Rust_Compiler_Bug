{"sha": "e19570d38fbe382c412bf68ad591e669d6f7f245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5NTcwZDM4ZmJlMzgyYzQxMmJmNjhhZDU5MWU2NjlkNmY3ZjI0NQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-17T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-17T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "bf108465a1446facee79650e6d6b893e75eafa6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf108465a1446facee79650e6d6b893e75eafa6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e19570d38fbe382c412bf68ad591e669d6f7f245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19570d38fbe382c412bf68ad591e669d6f7f245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19570d38fbe382c412bf68ad591e669d6f7f245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19570d38fbe382c412bf68ad591e669d6f7f245/comments", "author": null, "committer": null, "parents": [{"sha": "54866f7a81a2af4a6097146a1c78bd09bb437883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54866f7a81a2af4a6097146a1c78bd09bb437883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54866f7a81a2af4a6097146a1c78bd09bb437883"}], "stats": {"total": 520, "additions": 519, "deletions": 1}, "files": [{"sha": "b59d82dc4e8c82c06c8443403c8ac35f578148da", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1,3 +1,10 @@\n+2021-09-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR bootstrap/67102\n+\t* Makefile.def: Have configure-target-libffi depend on\n+\tall-target-libstdc++-v3.\n+\t* Makefile.in: Regenerate.\n+\n 2021-09-10  Petter Tomner  <tomner@kth.se>\n \n \t* MAINTAINERS: Me added to DCO and write after approval"}, {"sha": "bb5576ac0737f0261229530c186eb6e694d6c615", "filename": "gcc/ChangeLog", "status": "modified", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1,3 +1,310 @@\n+2021-09-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (rs6000-builtins.h): New include.\n+\t(altivec_resolve_new_overloaded_builtin): New forward decl.\n+\t(rs6000_new_builtin_type_compatible): New function.\n+\t(altivec_resolve_overloaded_builtin): Call\n+\taltivec_resolve_new_overloaded_builtin.\n+\t(altivec_build_new_resolved_builtin): New function.\n+\t(altivec_resolve_new_overloaded_builtin): Likewise.\n+\t* config/rs6000/rs6000-call.c (rs6000_new_builtin_is_supported):\n+\tLikewise.\n+\t* config/rs6000/rs6000-gen-builtins.c (write_decls): Remove _p from\n+\tname of rs6000_new_builtin_is_supported.\n+\n+2021-09-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-protos.h (ix86_decompose_address):\n+\tChange return type to bool.\n+\t* config/i386/i386.c (ix86_decompose_address): Ditto.\n+\n+2021-09-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR target/102353\n+\t* config/rs6000/t-rs6000 (build/rs6000-gen-builtins.o, build/rbtree.o):\n+\tAdded 'build/' to target, use build/%.o rule.\n+\t(build/rs6000-gen-builtins$(build_exeext)): Add 'build/' and\n+\t'$(build_exeext)' to target and 'build/' for the *.o files.\n+\t(rs6000-builtins.c): Update for those changes; run rs6000-gen-builtins\n+\twith $(RUN_GEN).\n+\n+2021-09-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.c (cgraph_node::dump): Do not check caller count sums if\n+\tthe body has been removed.  Remove trailing whitespace.\n+\n+2021-09-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102360\n+\t* internal-fn.c (expand_DEFERRED_INIT): Make pattern-init\n+\tof non-memory more robust.\n+\n+2021-09-16  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc-opts.h (enum sparc_processor_type): Add LEON5\n+\t* config/sparc/sparc.c (struct processor_costs): Add LEON5 costs\n+\t(leon5_adjust_cost): Increase cost of store with data dependency\n+\ton ALU instruction and FPU anti-dependencies.\n+\t(sparc_option_override): Add LEON5 costs\n+\t(sparc_adjust_cost): Add LEON5 cost adjustments\n+\t* config/sparc/sparc.h: Add LEON5\n+\t* config/sparc/sparc.md: Include LEON5 scheduling information\n+\t* config/sparc/sparc.opt: Add LEON5\n+\t* doc/invoke.texi: Add LEON5\n+\t* config/sparc/leon5.md: New file.\n+\n+2021-09-16  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.md (stack_protect_set32): Add NOP to prevent\n+\tsensitive sequence for B2BST errata workaround.\n+\n+2021-09-16  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.c (sparc_do_work_around_errata): Do not begin\n+\tfunctions with atomic instruction in the UT700 errata workaround.\n+\n+2021-09-16  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.c (next_active_non_empty_insn): New function\n+\tthat returns next active non empty assembly instruction.\n+\t(sparc_do_work_around_errata): Use new function.\n+\n+2021-09-16  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.c (store_insn_p): Add predicate for store\n+\tattributes.\n+\t(load_insn_p): Add predicate for load attributes.\n+\t(sparc_do_work_around_errata): Use new predicates.\n+\n+2021-09-16  Andreas Larsson  <andreas@gaisler.com>\n+\n+\t* config/sparc/sparc.c (dump_target_flag_bits): Print bit names for\n+\tLEON and LEON3.\n+\n+2021-09-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/mips/netbsd.h: Fix typo in name of a macro.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR middle-end/102080\n+\t* match.pd: Check mask type when doing cond_op related gimple\n+\tsimplification.\n+\t* tree.c (is_truth_type_for): New function.\n+\t* tree.h (is_truth_type_for): New declaration.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_cvtepi32_ph): New\n+\tintrinsic.\n+\t(_mm512_mask_cvtepi32_ph): Likewise.\n+\t(_mm512_maskz_cvtepi32_ph): Likewise.\n+\t(_mm512_cvt_roundepi32_ph): Likewise.\n+\t(_mm512_mask_cvt_roundepi32_ph): Likewise.\n+\t(_mm512_maskz_cvt_roundepi32_ph): Likewise.\n+\t(_mm512_cvtepu32_ph): Likewise.\n+\t(_mm512_mask_cvtepu32_ph): Likewise.\n+\t(_mm512_maskz_cvtepu32_ph): Likewise.\n+\t(_mm512_cvt_roundepu32_ph): Likewise.\n+\t(_mm512_mask_cvt_roundepu32_ph): Likewise.\n+\t(_mm512_maskz_cvt_roundepu32_ph): Likewise.\n+\t(_mm512_cvtepi64_ph): Likewise.\n+\t(_mm512_mask_cvtepi64_ph): Likewise.\n+\t(_mm512_maskz_cvtepi64_ph): Likewise.\n+\t(_mm512_cvt_roundepi64_ph): Likewise.\n+\t(_mm512_mask_cvt_roundepi64_ph): Likewise.\n+\t(_mm512_maskz_cvt_roundepi64_ph): Likewise.\n+\t(_mm512_cvtepu64_ph): Likewise.\n+\t(_mm512_mask_cvtepu64_ph): Likewise.\n+\t(_mm512_maskz_cvtepu64_ph): Likewise.\n+\t(_mm512_cvt_roundepu64_ph): Likewise.\n+\t(_mm512_mask_cvt_roundepu64_ph): Likewise.\n+\t(_mm512_maskz_cvt_roundepu64_ph): Likewise.\n+\t(_mm512_cvtepi16_ph): Likewise.\n+\t(_mm512_mask_cvtepi16_ph): Likewise.\n+\t(_mm512_maskz_cvtepi16_ph): Likewise.\n+\t(_mm512_cvt_roundepi16_ph): Likewise.\n+\t(_mm512_mask_cvt_roundepi16_ph): Likewise.\n+\t(_mm512_maskz_cvt_roundepi16_ph): Likewise.\n+\t(_mm512_cvtepu16_ph): Likewise.\n+\t(_mm512_mask_cvtepu16_ph): Likewise.\n+\t(_mm512_maskz_cvtepu16_ph): Likewise.\n+\t(_mm512_cvt_roundepu16_ph): Likewise.\n+\t(_mm512_mask_cvt_roundepu16_ph): Likewise.\n+\t(_mm512_maskz_cvt_roundepu16_ph): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_cvtepi32_ph): New\n+\tintrinsic.\n+\t(_mm_mask_cvtepi32_ph): Likewise.\n+\t(_mm_maskz_cvtepi32_ph): Likewise.\n+\t(_mm256_cvtepi32_ph): Likewise.\n+\t(_mm256_mask_cvtepi32_ph): Likewise.\n+\t(_mm256_maskz_cvtepi32_ph): Likewise.\n+\t(_mm_cvtepu32_ph): Likewise.\n+\t(_mm_mask_cvtepu32_ph): Likewise.\n+\t(_mm_maskz_cvtepu32_ph): Likewise.\n+\t(_mm256_cvtepu32_ph): Likewise.\n+\t(_mm256_mask_cvtepu32_ph): Likewise.\n+\t(_mm256_maskz_cvtepu32_ph): Likewise.\n+\t(_mm_cvtepi64_ph): Likewise.\n+\t(_mm_mask_cvtepi64_ph): Likewise.\n+\t(_mm_maskz_cvtepi64_ph): Likewise.\n+\t(_mm256_cvtepi64_ph): Likewise.\n+\t(_mm256_mask_cvtepi64_ph): Likewise.\n+\t(_mm256_maskz_cvtepi64_ph): Likewise.\n+\t(_mm_cvtepu64_ph): Likewise.\n+\t(_mm_mask_cvtepu64_ph): Likewise.\n+\t(_mm_maskz_cvtepu64_ph): Likewise.\n+\t(_mm256_cvtepu64_ph): Likewise.\n+\t(_mm256_mask_cvtepu64_ph): Likewise.\n+\t(_mm256_maskz_cvtepu64_ph): Likewise.\n+\t(_mm_cvtepi16_ph): Likewise.\n+\t(_mm_mask_cvtepi16_ph): Likewise.\n+\t(_mm_maskz_cvtepi16_ph): Likewise.\n+\t(_mm256_cvtepi16_ph): Likewise.\n+\t(_mm256_mask_cvtepi16_ph): Likewise.\n+\t(_mm256_maskz_cvtepi16_ph): Likewise.\n+\t(_mm_cvtepu16_ph): Likewise.\n+\t(_mm_mask_cvtepu16_ph): Likewise.\n+\t(_mm_maskz_cvtepu16_ph): Likewise.\n+\t(_mm256_cvtepu16_ph): Likewise.\n+\t(_mm256_mask_cvtepu16_ph): Likewise.\n+\t(_mm256_maskz_cvtepu16_ph): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtin types.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t* config/i386/i386-modes.def: Declare V2HF and V6HF.\n+\t* config/i386/sse.md (VI2H_AVX512VL): New.\n+\t(qq2phsuff): Ditto.\n+\t(sseintvecmode): Add HF vector modes.\n+\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode><mask_name><round_name>):\n+\tNew.\n+\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>): Ditto.\n+\t(*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>): Ditto.\n+\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask): Ditto.\n+\t(*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask): Ditto.\n+\t(*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask_1): Ditto.\n+\t(avx512fp16_vcvt<floatsuffix>qq2ph_v2di): Ditto.\n+\t(*avx512fp16_vcvt<floatsuffix>qq2ph_v2di): Ditto.\n+\t(avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask): Ditto.\n+\t(*avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask): Ditto.\n+\t(*avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask_1): Ditto.\n+\t* config/i386/subst.md (round_qq2phsuff): New subst_attr.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_cvtph_epi32):\n+\tNew intrinsic/\n+\t(_mm512_mask_cvtph_epi32): Likewise.\n+\t(_mm512_maskz_cvtph_epi32): Likewise.\n+\t(_mm512_cvt_roundph_epi32): Likewise.\n+\t(_mm512_mask_cvt_roundph_epi32): Likewise.\n+\t(_mm512_maskz_cvt_roundph_epi32): Likewise.\n+\t(_mm512_cvtph_epu32): Likewise.\n+\t(_mm512_mask_cvtph_epu32): Likewise.\n+\t(_mm512_maskz_cvtph_epu32): Likewise.\n+\t(_mm512_cvt_roundph_epu32): Likewise.\n+\t(_mm512_mask_cvt_roundph_epu32): Likewise.\n+\t(_mm512_maskz_cvt_roundph_epu32): Likewise.\n+\t(_mm512_cvtph_epi64): Likewise.\n+\t(_mm512_mask_cvtph_epi64): Likewise.\n+\t(_mm512_maskz_cvtph_epi64): Likewise.\n+\t(_mm512_cvt_roundph_epi64): Likewise.\n+\t(_mm512_mask_cvt_roundph_epi64): Likewise.\n+\t(_mm512_maskz_cvt_roundph_epi64): Likewise.\n+\t(_mm512_cvtph_epu64): Likewise.\n+\t(_mm512_mask_cvtph_epu64): Likewise.\n+\t(_mm512_maskz_cvtph_epu64): Likewise.\n+\t(_mm512_cvt_roundph_epu64): Likewise.\n+\t(_mm512_mask_cvt_roundph_epu64): Likewise.\n+\t(_mm512_maskz_cvt_roundph_epu64): Likewise.\n+\t(_mm512_cvtph_epi16): Likewise.\n+\t(_mm512_mask_cvtph_epi16): Likewise.\n+\t(_mm512_maskz_cvtph_epi16): Likewise.\n+\t(_mm512_cvt_roundph_epi16): Likewise.\n+\t(_mm512_mask_cvt_roundph_epi16): Likewise.\n+\t(_mm512_maskz_cvt_roundph_epi16): Likewise.\n+\t(_mm512_cvtph_epu16): Likewise.\n+\t(_mm512_mask_cvtph_epu16): Likewise.\n+\t(_mm512_maskz_cvtph_epu16): Likewise.\n+\t(_mm512_cvt_roundph_epu16): Likewise.\n+\t(_mm512_mask_cvt_roundph_epu16): Likewise.\n+\t(_mm512_maskz_cvt_roundph_epu16): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_cvtph_epi32):\n+\tNew intrinsic.\n+\t(_mm_mask_cvtph_epi32): Likewise.\n+\t(_mm_maskz_cvtph_epi32): Likewise.\n+\t(_mm256_cvtph_epi32): Likewise.\n+\t(_mm256_mask_cvtph_epi32): Likewise.\n+\t(_mm256_maskz_cvtph_epi32): Likewise.\n+\t(_mm_cvtph_epu32): Likewise.\n+\t(_mm_mask_cvtph_epu32): Likewise.\n+\t(_mm_maskz_cvtph_epu32): Likewise.\n+\t(_mm256_cvtph_epu32): Likewise.\n+\t(_mm256_mask_cvtph_epu32): Likewise.\n+\t(_mm256_maskz_cvtph_epu32): Likewise.\n+\t(_mm_cvtph_epi64): Likewise.\n+\t(_mm_mask_cvtph_epi64): Likewise.\n+\t(_mm_maskz_cvtph_epi64): Likewise.\n+\t(_mm256_cvtph_epi64): Likewise.\n+\t(_mm256_mask_cvtph_epi64): Likewise.\n+\t(_mm256_maskz_cvtph_epi64): Likewise.\n+\t(_mm_cvtph_epu64): Likewise.\n+\t(_mm_mask_cvtph_epu64): Likewise.\n+\t(_mm_maskz_cvtph_epu64): Likewise.\n+\t(_mm256_cvtph_epu64): Likewise.\n+\t(_mm256_mask_cvtph_epu64): Likewise.\n+\t(_mm256_maskz_cvtph_epu64): Likewise.\n+\t(_mm_cvtph_epi16): Likewise.\n+\t(_mm_mask_cvtph_epi16): Likewise.\n+\t(_mm_maskz_cvtph_epi16): Likewise.\n+\t(_mm256_cvtph_epi16): Likewise.\n+\t(_mm256_mask_cvtph_epi16): Likewise.\n+\t(_mm256_maskz_cvtph_epi16): Likewise.\n+\t(_mm_cvtph_epu16): Likewise.\n+\t(_mm_mask_cvtph_epu16): Likewise.\n+\t(_mm_maskz_cvtph_epu16): Likewise.\n+\t(_mm256_cvtph_epu16): Likewise.\n+\t(_mm256_mask_cvtph_epu16): Likewise.\n+\t(_mm256_maskz_cvtph_epu16): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add new builtin types.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtin types.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t* config/i386/sse.md (sseintconvert): New.\n+\t(ssePHmode): Ditto.\n+\t(UNSPEC_US_FIX_NOTRUNC): Ditto.\n+\t(sseintconvertsignprefix): Ditto.\n+\t(avx512fp16_vcvtph2<sseintconvertsignprefix><sseintconvert>_<mode><mask_name><round_name>):\n+\tDitto.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h: (_mm_cvtsi16_si128):\n+\tNew intrinsic.\n+\t(_mm_cvtsi128_si16): Likewise.\n+\t(_mm_mask_load_sh): Likewise.\n+\t(_mm_maskz_load_sh): Likewise.\n+\t(_mm_mask_store_sh): Likewise.\n+\t(_mm_move_sh): Likewise.\n+\t(_mm_mask_move_sh): Likewise.\n+\t(_mm_maskz_move_sh): Likewise.\n+\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_special_args_builtin): Handle new builtin types.\n+\t(ix86_expand_vector_init_one_nonzero): Adjust for FP16 target.\n+\t* config/i386/sse.md (VI2F): New mode iterator.\n+\t(vec_set<mode>_0): Use new mode iterator.\n+\t(avx512f_mov<ssescalarmodelower>_mask): Adjust for HF vector mode.\n+\t(avx512f_store<mode>_mask): Ditto.\n+\n+2021-09-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.opt (-mtoc-fusion): Remove.\n+\n 2021-09-15  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_xcoff_encode_section_info):"}, {"sha": "62910e59a28e900767996bba37851f4f2d8f186c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1 +1 @@\n-20210916\n+20210917"}, {"sha": "5328f850ef31b50bc7e8d7deec602bc1a6bfd32f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1,3 +1,8 @@\n+2021-09-16  Maxim Blinov  <maxim.blinov@embecosm.com>\n+\n+\tPR bootstrap/102242\n+\t* engine.cc (INCLUDE_UNIQUE_PTR): Define.\n+\n 2021-09-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/102225"}, {"sha": "4061a85fb7f786ac051b3c5576c90b1627233b50", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1,3 +1,22 @@\n+2021-09-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98486\n+\t* constraint.cc (get_normalized_constraints_from_decl): Always\n+\tlook up constraints using the most general template.\n+\t* decl.c (grokdeclarator): Set constraints on a static data\n+\tmember template.\n+\t* pt.c (determine_specialization): Check constraints on a\n+\tvariable template.\n+\n+2021-09-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (await_statement_walker): Code cleanups.\n+\n+2021-09-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_outermost_constant_expr): Use\n+\tprotected_set_expr_location.\n+\n 2021-09-15  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101904"}, {"sha": "8e22dd22729d631020939e97c1e9f3acaf19e95c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1,3 +1,10 @@\n+2021-09-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102287\n+\t* trans-expr.c (gfc_conv_procedure_call): Wrap deallocation of\n+\tallocatable components of optional allocatable derived type\n+\tprocedure arguments with INTENT(OUT) into a presence check.\n+\n 2021-09-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102311"}, {"sha": "1c8d4baf1222216ab83c0afa9f0153850c338241", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1,3 +1,114 @@\n+2021-09-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98486\n+\t* g++.dg/cpp2a/concepts-var-templ1.C: New test.\n+\t* g++.dg/cpp2a/concepts-var-templ1a.C: New test.\n+\t* g++.dg/cpp2a/concepts-var-templ1b.C: New test.\n+\n+2021-09-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102287\n+\t* gfortran.dg/intent_out_14.f90: New test.\n+\n+2021-09-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102360\n+\t* g++.dg/pr102360.C: New testcase.\n+\n+2021-09-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* g++.dg/eh/arm-vfp-unwind.C: Support single-precision.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR middle-end/102080\n+\t* gcc.target/i386/pr102080.c: New test.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vcvtdq2ph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcvtdq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtqq2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtqq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtudq2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtudq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtuqq2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtuqq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtuw2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtuw2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtw2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtw2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtdq2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtdq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtqq2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtqq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtudq2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtudq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtuqq2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtuqq2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtuw2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtuw2ph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtw2ph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtw2ph-1b.c: Ditto.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h (V512): Add QI\n+\tcomponents.\n+\t* gcc.target/i386/avx512fp16-vcvtph2dq-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vcvtph2dq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2qq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2qq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2udq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2udq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2uqq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2uqq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2uw-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2uw-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2w-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vcvtph2w-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2dq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2dq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2qq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2qq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2udq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2udq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2uqq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2uqq-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2uw-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2uw-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2w-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vcvtph2w-1b.c: Ditto.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vmovsh-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vmovsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-2a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-2b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-3a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-3b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-4a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmovw-4b.c: Ditto.\n+\n 2021-09-15  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101904"}, {"sha": "4b4f70b68ea49f86aded191af09a97f3ffbd9a00", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19570d38fbe382c412bf68ad591e669d6f7f245/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19570d38fbe382c412bf68ad591e669d6f7f245/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e19570d38fbe382c412bf68ad591e669d6f7f245", "patch": "@@ -1,3 +1,65 @@\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/Makefile.am (stamp-debug): Add all Makefiles as\n+\tprerequisites.\n+\t* src/Makefile.in: Regenerate.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/ext/pb_ds/regression/tree_map_rand.cc: Increase\n+\ttimeout factor to 3.\n+\t* testsuite/ext/pb_ds/regression/tree_set_rand.cc: Likewise.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/using.xml: Generalize to apply to more than\n+\tjust -std=c++11.\n+\t* doc/html/manual/using_macros.html: Regenerate.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/optional (nullptr_t): Make constructor noexcept.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (advance): Remove non-deducible\n+\ttemplate parameter.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102270\n+\t* include/std/tuple (_Head_base, _Tuple_impl): Add\n+\t_GLIBCXX20_CONSTEXPR to allocator-extended constructors.\n+\t(tuple<>::swap(tuple&)): Add _GLIBCXX20_CONSTEXPR.\n+\t* testsuite/20_util/tuple/cons/102270.C: New test.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102280\n+\t* include/std/span (span(Range&&)): Add constraint to deduction\n+\tguide.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++98/Makefile.am: Use CXXCOMPILE not LTCXXCOMPILE.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n+\t(to_string): Add noexcept if the type width is 32 bits or less.\n+\n+2021-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (__uniq_ptr_impl::_M_ptr)\n+\t(__uniq_ptr_impl::_M_deleter): Add noexcept.\n+\n+2021-09-16  Thomas Rodgers  <rodgert@twrodgers.com>\n+\n+\tPR libstdc++/101761\n+\t* testsuite/29_atomics/atomic_ref/wait_notify.cc (test): Use\n+\tva and vb as arguments to wait/notify, remove unused bb local.\n+\n 2021-09-15  Hugo Beauz\u00e9e-Luyssen  <hugo@beauzee.fr>\n \n \t* crossconfig.m4: Check for TLS support on mingw."}]}