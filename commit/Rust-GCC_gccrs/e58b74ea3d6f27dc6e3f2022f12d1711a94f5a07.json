{"sha": "e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4Yjc0ZWEzZDZmMjdkYzZlM2YyMDIyZjEyZDE3MTFhOTRmNWEwNw==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@imgtec.com", "date": "2014-06-17T12:46:47Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2014-06-17T12:46:47Z"}, "message": "Clean up ST_REGS handling in the MIPS backend.\n\ngcc/\n\n\t* config/mips/mips-protos.h (mips_expand_fcc_reload): Remove.\n\t* config/mips/mips.c (mips_expand_fcc_reload): Remove.\n\t(mips_move_to_gpr_cost): Remove ST_REGS case.\n\t(mips_move_from_gpr_cost): Likewise.\n\t(mips_register_move_cost): Likewise.\n\t(mips_secondary_reload_class): Likewise.\n\nFrom-SVN: r211737", "tree": {"sha": "3b39ade88509662eb719320536c27d29db8d508d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b39ade88509662eb719320536c27d29db8d508d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07/comments", "author": {"login": "mfortune", "id": 10220247, "node_id": "MDQ6VXNlcjEwMjIwMjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/10220247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfortune", "html_url": "https://github.com/mfortune", "followers_url": "https://api.github.com/users/mfortune/followers", "following_url": "https://api.github.com/users/mfortune/following{/other_user}", "gists_url": "https://api.github.com/users/mfortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfortune/subscriptions", "organizations_url": "https://api.github.com/users/mfortune/orgs", "repos_url": "https://api.github.com/users/mfortune/repos", "events_url": "https://api.github.com/users/mfortune/events{/privacy}", "received_events_url": "https://api.github.com/users/mfortune/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e4f27ef877c5a2cc8bfa2a2c6983a36bd15b7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e4f27ef877c5a2cc8bfa2a2c6983a36bd15b7ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e4f27ef877c5a2cc8bfa2a2c6983a36bd15b7ea"}], "stats": {"total": 68, "additions": 9, "deletions": 59}, "files": [{"sha": "4f29609c82264d18d534464ebd519912d6d82cca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "patch": "@@ -1,3 +1,12 @@\n+2014-06-17  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\t* config/mips/mips-protos.h (mips_expand_fcc_reload): Remove.\n+\t* config/mips/mips.c (mips_expand_fcc_reload): Remove.\n+\t(mips_move_to_gpr_cost): Remove ST_REGS case.\n+\t(mips_move_from_gpr_cost): Likewise.\n+\t(mips_register_move_cost): Likewise.\n+\t(mips_secondary_reload_class): Likewise.\n+\n 2014-06-17  Richard Biener  <rguenther@suse.de>\n \n \t* passes.def (pass_all_early_optimizations): Remove copy-prop pass."}, {"sha": "0b32a70251c7997b7c115596d4e98304b7c451ee", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "patch": "@@ -232,7 +232,6 @@ extern bool mips_use_pic_fn_addr_reg_p (const_rtx);\n extern rtx mips_expand_call (enum mips_call_type, rtx, rtx, rtx, rtx, bool);\n extern void mips_split_call (rtx, rtx);\n extern bool mips_get_pic_call_symbol (rtx *, int);\n-extern void mips_expand_fcc_reload (rtx, rtx, rtx);\n extern void mips_set_return_address (rtx, rtx);\n extern bool mips_move_by_pieces_p (unsigned HOST_WIDE_INT, unsigned int);\n extern bool mips_store_by_pieces_p (unsigned HOST_WIDE_INT, unsigned int);"}, {"sha": "cff1d3817c7e80df0e7c5789a9c5812f7f5a6e11", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "patch": "@@ -7195,35 +7195,6 @@ mips_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n   return true;\n }\n \f\n-/* Emit code to move general operand SRC into condition-code\n-   register DEST given that SCRATCH is a scratch TFmode FPR.\n-   The sequence is:\n-\n-\tFP1 = SRC\n-\tFP2 = 0.0f\n-\tDEST = FP2 < FP1\n-\n-   where FP1 and FP2 are single-precision FPRs taken from SCRATCH.  */\n-\n-void\n-mips_expand_fcc_reload (rtx dest, rtx src, rtx scratch)\n-{\n-  rtx fp1, fp2;\n-\n-  /* Change the source to SFmode.  */\n-  if (MEM_P (src))\n-    src = adjust_address (src, SFmode, 0);\n-  else if (REG_P (src) || GET_CODE (src) == SUBREG)\n-    src = gen_rtx_REG (SFmode, true_regnum (src));\n-\n-  fp1 = gen_rtx_REG (SFmode, REGNO (scratch));\n-  fp2 = gen_rtx_REG (SFmode, REGNO (scratch) + MAX_FPRS_PER_FMT);\n-\n-  mips_emit_move (copy_rtx (fp1), src);\n-  mips_emit_move (copy_rtx (fp2), CONST0_RTX (SFmode));\n-  emit_insn (gen_slt_sf (dest, fp2, fp1));\n-}\n-\f\n /* Implement MOVE_BY_PIECES_P.  */\n \n bool\n@@ -12044,10 +12015,6 @@ mips_move_to_gpr_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n       /* MFC1, etc.  */\n       return 4;\n \n-    case ST_REGS:\n-      /* LUI followed by MOVF.  */\n-      return 4;\n-\n     case COP0_REGS:\n     case COP2_REGS:\n     case COP3_REGS:\n@@ -12081,11 +12048,6 @@ mips_move_from_gpr_cost (enum machine_mode mode, reg_class_t to)\n       /* MTC1, etc.  */\n       return 4;\n \n-    case ST_REGS:\n-      /* A secondary reload through an FPR scratch.  */\n-      return (mips_register_move_cost (mode, GENERAL_REGS, FP_REGS)\n-\t      + mips_register_move_cost (mode, FP_REGS, ST_REGS));\n-\n     case COP0_REGS:\n     case COP2_REGS:\n     case COP3_REGS:\n@@ -12117,9 +12079,6 @@ mips_register_move_cost (enum machine_mode mode,\n       if (to == FP_REGS && mips_mode_ok_for_mov_fmt_p (mode))\n \t/* MOV.FMT.  */\n \treturn 4;\n-      if (to == ST_REGS)\n-\t/* The sequence generated by mips_expand_fcc_reload.  */\n-\treturn 8;\n     }\n \n   /* Handle cases in which only one class deviates from the ideal.  */\n@@ -12184,23 +12143,6 @@ mips_secondary_reload_class (enum reg_class rclass,\n   if (ACC_REG_P (regno))\n     return reg_class_subset_p (rclass, GR_REGS) ? NO_REGS : GR_REGS;\n \n-  /* We can only copy a value to a condition code register from a\n-     floating-point register, and even then we require a scratch\n-     floating-point register.  We can only copy a value out of a\n-     condition-code register into a general register.  */\n-  if (reg_class_subset_p (rclass, ST_REGS))\n-    {\n-      if (in_p)\n-\treturn FP_REGS;\n-      return GP_REG_P (regno) ? NO_REGS : GR_REGS;\n-    }\n-  if (ST_REG_P (regno))\n-    {\n-      if (!in_p)\n-\treturn FP_REGS;\n-      return reg_class_subset_p (rclass, GR_REGS) ? NO_REGS : GR_REGS;\n-    }\n-\n   if (reg_class_subset_p (rclass, FP_REGS))\n     {\n       if (MEM_P (x)"}]}