{"sha": "640ebeb336050887cb57417b7568279c588088f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwZWJlYjMzNjA1MDg4N2NiNTc0MTdiNzU2ODI3OWM1ODgwODhmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-20T11:30:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-20T13:06:48Z"}, "message": "libstdc++: Remove <memory_resource> dependency from <regex> [PR 92546]\n\nUnlike the other headers that declare alias templates in namespace pmr,\n<regex> includes <memory_resource>. That was done because the\npmr::string::const_iterator typedef requires pmr::string to be complete,\nwhich requires pmr::polymorphic_allocator<char> to be complete.\n\nBy using __normal_iterator<const char*, pmr::string> instead of the\nconst_iterator typedef we can avoid the completeness requirement.\n\nThis makes <regex> smaller, by not requiring <memory_resource> and its\n<shared_mutex> dependency, which depends on <chrono>.  Backporting this\nwill also help with PR 97876, where <stop_token> ends up being needed by\n<regex> via <memory_resource>.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/92546\n\t* include/std/regex (pmr::smatch, pmr::wsmatch): Declare using\n\tunderlying __normal_iterator type, not nested typedef\n\tbasic_string::const_iterator.", "tree": {"sha": "8cc829385b7e1d8d640ecc193a7a09b9fb4552fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cc829385b7e1d8d640ecc193a7a09b9fb4552fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640ebeb336050887cb57417b7568279c588088f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640ebeb336050887cb57417b7568279c588088f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640ebeb336050887cb57417b7568279c588088f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640ebeb336050887cb57417b7568279c588088f0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4405edb496483c5e99adb311cc694b0b063eb358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4405edb496483c5e99adb311cc694b0b063eb358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4405edb496483c5e99adb311cc694b0b063eb358"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "783f5f131a67fb7b04ccf22b24fa40b271317c82", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640ebeb336050887cb57417b7568279c588088f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640ebeb336050887cb57417b7568279c588088f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=640ebeb336050887cb57417b7568279c588088f0", "patch": "@@ -64,21 +64,25 @@\n #include <bits/regex_executor.h>\n \n #if __cplusplus >= 201703L && _GLIBCXX_USE_CXX11_ABI\n-#include <memory_resource>\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  namespace pmr {\n+  namespace pmr\n+  {\n     template<typename _Tp> class polymorphic_allocator;\n     template<typename _BidirectionalIterator>\n       using match_results\n \t= std::match_results<_BidirectionalIterator, polymorphic_allocator<\n \t\t\t\tsub_match<_BidirectionalIterator>>>;\n-    using cmatch  = match_results<const char*>;\n-    using smatch  = match_results<string::const_iterator>;\n+    using cmatch = match_results<const char*>;\n+    // Use __normal_iterator directly, because pmr::string::const_iterator\n+    // would require pmr::polymorphic_allocator to be complete.\n+    using smatch\n+      = match_results<__gnu_cxx::__normal_iterator<const char*, string>>;\n #ifdef _GLIBCXX_USE_WCHAR_T\n     using wcmatch = match_results<const wchar_t*>;\n-    using wsmatch = match_results<wstring::const_iterator>;\n+    using wsmatch\n+      = match_results<__gnu_cxx::__normal_iterator<const wchar_t*, wstring>>;\n #endif\n   } // namespace pmr\n _GLIBCXX_END_NAMESPACE_VERSION"}]}