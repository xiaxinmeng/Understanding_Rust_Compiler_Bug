{"sha": "8732511910e1dd23c56c01e876bbe235c360ac55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczMjUxMTkxMGUxZGQyM2M1NmMwMWU4NzZiYmUyMzVjMzYwYWM1NQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-09-17T22:17:15Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-10-22T14:42:52Z"}, "message": "[PATCH, rs6000] int128 sign extention instructions (partial prereq)\n\nHi\n  This is a sub-set of the 128-bit sign extension support patch series\n  that will be fully implemented in a subsequent patch from Carl.\n  This is a necessary pre-requisite for the vector-load/store rightmost\n  element patch that follows in this thread.\n\n  [v2] Refreshed and touched up per review comments.\n  - updated set_attr entries.  removed superfluous set_attr entries.\n  - moved define_insn and define_expand entries to vsx.md.\n\n\ngcc/ChangeLog:\n\t* config/rs6000/vsx.md (enum unspec): Add\n\tUNSPEC_EXTENDDITI2 and UNSPEC_MTVSRD_DITI_W1 entries.\n\t(mtvsrdd_diti_w1, extendditi2_vector): New define_insns.\n\t(extendditi2): New define_expand.", "tree": {"sha": "b56f03f767618c10be8237c9dbe95d37ae42a250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b56f03f767618c10be8237c9dbe95d37ae42a250"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8732511910e1dd23c56c01e876bbe235c360ac55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8732511910e1dd23c56c01e876bbe235c360ac55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8732511910e1dd23c56c01e876bbe235c360ac55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8732511910e1dd23c56c01e876bbe235c360ac55/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb7345cd54e90b4f5cc0234bd37ec2763602180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb7345cd54e90b4f5cc0234bd37ec2763602180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb7345cd54e90b4f5cc0234bd37ec2763602180"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "398efa38e4507819e461e3b60e6ca1a81018244c", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8732511910e1dd23c56c01e876bbe235c360ac55/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8732511910e1dd23c56c01e876bbe235c360ac55/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=8732511910e1dd23c56c01e876bbe235c360ac55", "patch": "@@ -352,6 +352,8 @@\n    UNSPEC_VSX_FIRST_MISMATCH_EOS_INDEX\n    UNSPEC_XXGENPCV\n    UNSPEC_MTVSBM\n+   UNSPEC_EXTENDDITI2\n+   UNSPEC_MTVSRD_DITI_W1\n    UNSPEC_VCNTMB\n    UNSPEC_VEXPAND\n    UNSPEC_VEXTRACT\n@@ -4795,6 +4797,37 @@\n   \"vextsw2d %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n+;; ISA 3.1 vector sign extend\n+;; Move DI value from GPR to TI mode in VSX register, word 1.\n+(define_insn \"mtvsrdd_diti_w1\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=wa\")\n+\t(unspec:TI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+\t\t     UNSPEC_MTVSRD_DITI_W1))]\n+  \"TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n+  \"mtvsrdd %x0,0,%1\"\n+  [(set_attr \"type\" \"vecmove\")])\n+\n+;; Sign extend 64-bit value in TI reg, word 1, to 128-bit value in TI reg\n+(define_insn \"extendditi2_vector\"\n+  [(set (match_operand:TI 0 \"gpc_reg_operand\" \"=v\")\n+\t(unspec:TI [(match_operand:TI 1 \"gpc_reg_operand\" \"v\")]\n+\t\t     UNSPEC_EXTENDDITI2))]\n+  \"TARGET_POWER10\"\n+  \"vextsd2q %0,%1\"\n+  [(set_attr \"type\" \"vecexts\")])\n+\n+(define_expand \"extendditi2\"\n+  [(set (match_operand:TI 0 \"gpc_reg_operand\")\n+\t(sign_extend:DI (match_operand:DI 1 \"gpc_reg_operand\")))]\n+  \"TARGET_POWER10\"\n+  {\n+    /* Move 64-bit src from GPR to vector reg and sign extend to 128-bits.  */\n+    rtx temp = gen_reg_rtx (TImode);\n+    emit_insn (gen_mtvsrdd_diti_w1 (temp, operands[1]));\n+    emit_insn (gen_extendditi2_vector (operands[0], temp));\n+    DONE;\n+  })\n+\n \f\n ;; ISA 3.0 Binary Floating-Point Support\n "}]}