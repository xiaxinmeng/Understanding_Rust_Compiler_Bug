{"sha": "25722436a61aa310416ceb64254e634236442d05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU3MjI0MzZhNjFhYTMxMDQxNmNlYjY0MjU0ZTYzNDIzNjQ0MmQwNQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-09-07T09:21:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-09-07T09:21:11Z"}, "message": "re PR tree-optimization/53986 (missing vrp on bit-mask test, LSHIFT_EXPR not handled)\n\n2012-09-07  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/53986\n\t* tree-vrp.c (extract_range_from_multiplicative_op_1): Allow\n\tLSHIFT_EXPR.\n\t(extract_range_from_binary_expr_1): Handle LSHIFT with constant range as\n\tshift amount.\n\nFrom-SVN: r191057", "tree": {"sha": "bda2e1246830004bdba5e494204e07215b78dc4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda2e1246830004bdba5e494204e07215b78dc4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25722436a61aa310416ceb64254e634236442d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25722436a61aa310416ceb64254e634236442d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25722436a61aa310416ceb64254e634236442d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25722436a61aa310416ceb64254e634236442d05/comments", "author": null, "committer": null, "parents": [{"sha": "7fb3b7a74699bd0dc6a1630756b4bb1ac31658a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb3b7a74699bd0dc6a1630756b4bb1ac31658a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb3b7a74699bd0dc6a1630756b4bb1ac31658a4"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "3e3cf363a45bc5dd9faec5c9ebab250b7ba88e60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25722436a61aa310416ceb64254e634236442d05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25722436a61aa310416ceb64254e634236442d05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25722436a61aa310416ceb64254e634236442d05", "patch": "@@ -1,3 +1,11 @@\n+2012-09-07  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/53986\n+\t* tree-vrp.c (extract_range_from_multiplicative_op_1): Allow\n+\tLSHIFT_EXPR.\n+\t(extract_range_from_binary_expr_1): Handle LSHIFT with constant range as\n+\tshift amount.\n+\n 2012-09-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/aix43.h (RS6000_CALL_GLUE): Delete."}, {"sha": "47c68d8710c74f68a28fde7dd0be8785e57baade", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25722436a61aa310416ceb64254e634236442d05/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25722436a61aa310416ceb64254e634236442d05/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=25722436a61aa310416ceb64254e634236442d05", "patch": "@@ -2066,7 +2066,8 @@ extract_range_from_multiplicative_op_1 (value_range_t *vr,\n \t      || code == CEIL_DIV_EXPR\n \t      || code == EXACT_DIV_EXPR\n \t      || code == ROUND_DIV_EXPR\n-\t      || code == RSHIFT_EXPR);\n+\t      || code == RSHIFT_EXPR\n+\t      || code == LSHIFT_EXPR);\n   gcc_assert ((vr0->type == VR_RANGE\n \t       || (code == MULT_EXPR && vr0->type == VR_ANTI_RANGE))\n \t      && vr0->type == vr1->type);\n@@ -2762,6 +2763,27 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n \t      flag_wrapv = saved_flag_wrapv;\n \t      return;\n \t    }\n+\t  else if (code == LSHIFT_EXPR\n+\t\t   && range_int_cst_p (&vr0))\n+\t    {\n+\t      int overflow_pos = TYPE_PRECISION (expr_type);\n+\t      int bound_shift;\n+\t      double_int bound;\n+\n+\t      if (!TYPE_UNSIGNED (expr_type))\n+\t\toverflow_pos -= 1;\n+\n+\t      bound_shift = overflow_pos - TREE_INT_CST_LOW (vr1.max);\n+\t      bound = double_int_one.llshift (bound_shift,\n+\t\t\t\t\t      TYPE_PRECISION (expr_type));\n+\t      if (tree_to_double_int (vr0.max).ult (bound))\n+\t\t{\n+\t\t  /* In the absense of overflow, (a << b) is equivalent\n+\t\t     to (a * 2^b).  */\n+\t\t  extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n+\t\t  return;\n+\t\t}\n+\t    }\n \t}\n       set_value_range_to_varying (vr);\n       return;"}]}