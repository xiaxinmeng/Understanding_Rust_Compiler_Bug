{"sha": "265dab10ab0055accb4959a658f3c907d906b6fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1ZGFiMTBhYjAwNTVhY2NiNDk1OWE2NThmM2M5MDdkOTA2YjZmZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-10-18T05:11:37Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-10-18T05:11:37Z"}, "message": "i386.c (ix86_comparison_operator, [...]): Handle CCRCmode.\n\n        * i386.c (ix86_comparison_operator, put_condition_code,\n        ix86_match_ccmode, ix86_cc_mode): Handle CCRCmode.\n        (ix86_expand_strlensi_unroll_1): Use CCRCmode.\n        * i386.h (EXTRA_CC_MODES): Add CCRCmode.\n        * i386.md (adddi and negdi splitter): Use CCRCmode.\n        (add?i_3, add?i_4, add?i_5): Use CCRCmode; swap operands\n        (subsi3_carry): add '*'\n        (addsi3_carry_rc, subsi3_carry_rc, x86_movsicc_0_m1_rc): New.\n        (cmp to add peep2): Use CCRCmode; swap operands.\n\nFrom-SVN: r36927", "tree": {"sha": "af57efb6925a1d23d7de6a4f49d8e21cdf9600a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af57efb6925a1d23d7de6a4f49d8e21cdf9600a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265dab10ab0055accb4959a658f3c907d906b6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265dab10ab0055accb4959a658f3c907d906b6fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265dab10ab0055accb4959a658f3c907d906b6fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265dab10ab0055accb4959a658f3c907d906b6fe/comments", "author": null, "committer": null, "parents": [{"sha": "f27e6bb249adee339489e8179e8010142c7c09fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f27e6bb249adee339489e8179e8010142c7c09fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f27e6bb249adee339489e8179e8010142c7c09fb"}], "stats": {"total": 213, "additions": 146, "deletions": 67}, "files": [{"sha": "24f71bef970cc12beee102906003bbd9a2f798a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=265dab10ab0055accb4959a658f3c907d906b6fe", "patch": "@@ -1,3 +1,15 @@\n+2000-10-18  Jan Hubikca  <jh@suse.cz>\n+\n+        * i386.c (ix86_comparison_operator, put_condition_code,\n+        ix86_match_ccmode, ix86_cc_mode): Handle CCRCmode.\n+        (ix86_expand_strlensi_unroll_1): Use CCRCmode.\n+        * i386.h (EXTRA_CC_MODES): Add CCRCmode.\n+        * i386.md (adddi and negdi splitter): Use CCRCmode.\n+        (add?i_3, add?i_4, add?i_5): Use CCRCmode; swap operands\n+        (subsi3_carry): add '*'\n+        (addsi3_carry_rc, subsi3_carry_rc, x86_movsicc_0_m1_rc): New.\n+        (cmp to add peep2): Use CCRCmode; swap operands.\n+\n 2000-10-18  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md: Remove an unnecessary sign_extend\n@@ -307,11 +319,9 @@ Tue Oct 17 20:05:51 2000  Martin Buchholz <martin@xemacs.org>\n \t* gengenrtl.c (gendef): Don't include\n \tggc_p conditionals.  \n \t* ggc-callbacks.c (ggc_p): Remove.  \n-\t*\n-\tggc-none.c (ggc_p): Remove.  \n+\t* ggc-none.c (ggc_p): Remove.  \n \t* ggc.h (ggc_p): Don't declare.  \n-\t*\n-\tintegrate.c (save_for_inline): Don't mess with obstacks.\n+\t* integrate.c (save_for_inline): Don't mess with obstacks.\n \t(integrate_decl_tree): Likewise.\n \t(output_inline_function): Likewise.  \n \t* lists.c"}, {"sha": "b9bd81c2e5408ff137e14fc1a893d76c029d1586", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=265dab10ab0055accb4959a658f3c907d906b6fe", "patch": "@@ -1305,18 +1305,22 @@ ix86_comparison_operator (op, mode)\n       return 1;\n     case LT: case GE:\n       inmode = GET_MODE (XEXP (op, 0));\n-      if (inmode == CCmode || inmode == CCGCmode\n+      if (inmode == CCmode || inmode == CCGCmode || inmode == CCRCmode\n \t  || inmode == CCGOCmode || inmode == CCNOmode)\n \treturn 1;\n       return 0;\n-    case LTU: case GTU: case LEU: case ORDERED: case UNORDERED: case GEU:\n+    case LTU: case GTU:\n       inmode = GET_MODE (XEXP (op, 0));\n-      if (inmode == CCmode)\n+      return inmode == CCmode;\n+    case LEU: case ORDERED: case UNORDERED: case GEU:\n+      inmode = GET_MODE (XEXP (op, 0));\n+      if (inmode == CCmode || inmode == CCRCmode)\n \treturn 1;\n       return 0;\n     case GT: case LE:\n       inmode = GET_MODE (XEXP (op, 0));\n-      if (inmode == CCmode || inmode == CCGCmode || inmode == CCNOmode)\n+      if (inmode == CCmode || inmode == CCGCmode || inmode == CCNOmode\n+\t  || inmode == CCRCmode)\n \treturn 1;\n       return 0;\n     default:\n@@ -3108,21 +3112,22 @@ put_condition_code (code, mode, reverse, fp, file)\n       suffix = \"ne\";\n       break;\n     case GT:\n-      if (mode != CCmode && mode != CCNOmode && mode != CCGCmode)\n+      if (mode != CCmode && mode != CCNOmode && mode != CCGCmode\n+\t  && mode != CCRCmode)\n \tabort ();\n       suffix = \"g\";\n       break;\n     case GTU:\n       /* ??? Use \"nbe\" instead of \"a\" for fcmov losage on some assemblers.\n \t Those same assemblers have the same but opposite losage on cmov.  */\n-      if (mode != CCmode)\n+      if (mode != CCmode && mode != CCRCmode)\n \tabort ();\n       suffix = fp ? \"nbe\" : \"a\";\n       break;\n     case LT:\n       if (mode == CCNOmode || mode == CCGOCmode)\n \tsuffix = \"s\";\n-      else if (mode == CCmode || mode == CCGCmode)\n+      else if (mode == CCmode || mode == CCGCmode || mode == CCRCmode)\n \tsuffix = \"l\";\n       else\n \tabort ();\n@@ -3135,26 +3140,33 @@ put_condition_code (code, mode, reverse, fp, file)\n     case GE:\n       if (mode == CCNOmode || mode == CCGOCmode)\n \tsuffix = \"ns\";\n-      else if (mode == CCmode || mode == CCGCmode)\n+      else if (mode == CCmode || mode == CCGCmode || mode == CCRCmode)\n \tsuffix = \"ge\";\n       else\n \tabort ();\n       break;\n     case GEU:\n       /* ??? As above.  */\n-      if (mode != CCmode)\n+      if (mode != CCmode && mode != CCRCmode)\n \tabort ();\n-      suffix = fp ? \"nb\" : \"ae\";\n+      if (mode == CCRCmode)\n+\tsuffix = \"be\";\n+      else\n+\tsuffix = fp ? \"nb\" : \"ae\";\n       break;\n     case LE:\n-      if (mode != CCmode && mode != CCGCmode && mode != CCNOmode)\n+      if (mode != CCmode && mode != CCGCmode && mode != CCNOmode\n+\t  && mode != CCRCmode)\n \tabort ();\n       suffix = \"le\";\n       break;\n     case LEU:\n       if (mode != CCmode)\n \tabort ();\n-      suffix = \"be\";\n+      if (mode == CCRCmode)\n+\tsuffix = fp ? \"nb\" : \"ae\";\n+      else\n+        suffix = \"be\";\n       break;\n     case UNORDERED:\n       suffix = \"p\";\n@@ -4552,6 +4564,13 @@ ix86_match_ccmode (insn, req_mode)\n \treturn 0;\n       break;\n     case CCmode:\n+      if (req_mode == CCRCmode)\n+\treturn 0;\n+      goto no_carry;\n+    case CCRCmode:\n+      if (req_mode == CCmode)\n+\treturn 0;\n+    no_carry:\n       if (req_mode == CCGCmode)\n \treturn 0;\n       /* FALLTHRU */\n@@ -4683,11 +4702,14 @@ ix86_cc_mode (code, op0, op1)\n     case NE:\t\t\t/* ZF!=0 */\n       return CCZmode;\n       /* Codes needing carry flag.  */\n-    case GEU:\t\t\t/* CF=0 */\n-    case GTU:\t\t\t/* CF=0 & ZF=0 */\n     case LTU:\t\t\t/* CF=1 */\n     case LEU:\t\t\t/* CF=1 | ZF=1 */\n       return CCmode;\n+    case GEU:\t\t\t/* CF=0 */\n+    case GTU:\t\t\t/* CF=0 & ZF=0 */\n+      if (GET_CODE (op1) == NEG)\n+\treturn CCRCmode;\n+      return CCmode;\n       /* Codes possibly doable only with sign flag when\n          comparing against zero.  */\n     case GE:\t\t\t/* SF=OF   or   SF=0 */\n@@ -6145,8 +6167,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \n   /* Avoid branch in fixing the byte.  */\n   tmpreg = gen_lowpart (QImode, tmpreg);\n-  emit_insn (gen_addqi3_cc (tmpreg, tmpreg, tmpreg));\n-  emit_insn (gen_subsi3_carry (out, out, GEN_INT (3)));\n+  emit_insn (gen_addqi3_ccrc (tmpreg, tmpreg, tmpreg));\n+  emit_insn (gen_subsi3_carry_rc (out, out, GEN_INT (3)));\n \n   emit_label (end_0_label);\n }"}, {"sha": "7cf818da902a9c6bf11380b0bf28193f0c9e7855", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=265dab10ab0055accb4959a658f3c907d906b6fe", "patch": "@@ -2488,10 +2488,14 @@ while (0)\n    mode is used to simulate comparisons of (a-b) and (a+b)\n    against zero using sub/cmp/add operations.\n \n-   Add CCZ to indicate that only the Zero flag is valid.  */\n+   Add CCZ to indicate that only the Zero flag is valid.  \n+\n+   Add CCRC to indicate that carry flag is valid, but reversed.\n+*/\n \n #define EXTRA_CC_MODES \\\n \tCC(CCGCmode, \"CCGC\") \\\n+\tCC(CCRCmode, \"CCRC\") \\\n \tCC(CCGOCmode, \"CCGOC\") \\\n \tCC(CCNOmode, \"CCNO\") \\\n \tCC(CCZmode, \"CCZ\") \\"}, {"sha": "3d908eacaef7e31f5d619cda0e46395f0a16d682", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 89, "deletions": 46, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265dab10ab0055accb4959a658f3c907d906b6fe/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=265dab10ab0055accb4959a658f3c907d906b6fe", "patch": "@@ -3738,10 +3738,11 @@\n \t\t (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"reload_completed\"\n-  [(parallel [(set (reg:CC 17) (compare:CC (neg:SI (match_dup 2)) (match_dup 1)))\n+  [(parallel [(set (reg:CCRC 17)\n+\t\t   (compare:CCRC (match_dup 1) (neg:SI (match_dup 2))))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n-\t\t   (plus:SI (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n+\t\t   (plus:SI (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n \t\t\t\t     (match_dup 4))\n \t\t\t    (match_dup 5)))\n \t      (clobber (reg:CC 17))])]\n@@ -3762,6 +3763,19 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"ppro_uops\" \"few\")])\n \n+(define_insn \"*addsi3_carry_rc\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t  (plus:SI (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n+\t\t\t    (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\"))\n+\t\t   (match_operand:SI 2 \"general_operand\" \"ri,rm\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n+  \"adc{l}\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"ppro_uops\" \"few\")])\n+\n (define_expand \"addsi3\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t   (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -4006,8 +4020,8 @@\n \n (define_insn \"*addsi_3\"\n   [(set (reg 17)\n-\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n-\t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n+\t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n@@ -4052,12 +4066,12 @@\n \n (define_insn \"*addsi_4\"\n   [(set (reg 17)\n-\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))\n-\t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")))\n+\t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\n-   && ix86_match_ccmode (insn, CCmode)\n+   && ix86_match_ccmode (insn, CCRCmode)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n@@ -4067,11 +4081,11 @@\n \n (define_insn \"*addsi_5\"\n   [(set (reg 17)\n-\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n-\t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n+\t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"(GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n-   && ix86_match_ccmode (insn, CCmode)\n+   && ix86_match_ccmode (insn, CCRCmode)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n@@ -4268,8 +4282,8 @@\n \n (define_insn \"*addhi_3\"\n   [(set (reg 17)\n-\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n-\t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n+\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n@@ -4308,22 +4322,22 @@\n \n (define_insn \"*addhi_4\"\n   [(set (reg 17)\n-\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))\n-\t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")))\n+\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCmode)\n+  \"ix86_match_ccmode (insn, CCRCmode)\n    && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"add{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*addhi_5\"\n   [(set (reg 17)\n-\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n-\t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n+\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCmode)\n+  \"ix86_match_ccmode (insn, CCRCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"add{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n@@ -4520,8 +4534,8 @@\n \n (define_insn \"*addqi_3\"\n   [(set (reg 17)\n-\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n-\t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n+\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))))\n    (clobber (match_scratch:QI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n@@ -4557,31 +4571,31 @@\n \n (define_insn \"*addqi_4\"\n   [(set (reg 17)\n-\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))\n-\t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")))\n+\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCmode)\n+  \"ix86_match_ccmode (insn, CCRCmode)\n    && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"add{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_expand \"addqi3_cc\"\n+(define_expand \"addqi3_ccrc\"\n   [(parallel [\n-     (set (reg:CC 17)\n-\t  (compare:CC (neg:QI (match_operand:QI 2 \"general_operand\" \"\"))\n-\t\t      (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n+     (set (reg:CCRC 17)\n+\t  (compare:CCRC (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n+\t\t        (neg:QI (match_operand:QI 2 \"general_operand\" \"\"))))\n      (clobber (match_scratch:QI 0 \"\"))])]\n   \"\"\n   \"\")\n \n (define_insn \"*addqi_5\"\n   [(set (reg 17)\n-\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n-\t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n+\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))))\n    (clobber (match_scratch:QI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCmode)\n+  \"ix86_match_ccmode (insn, CCRCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"add{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n@@ -4734,7 +4748,7 @@\n    split_di (operands+1, 1, operands+1, operands+4);\n    split_di (operands+2, 1, operands+2, operands+5);\")\n \n-(define_insn \"subsi3_carry\"\n+(define_insn \"*subsi3_carry\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n \t    (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n@@ -4747,6 +4761,19 @@\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"subsi3_carry_rc\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n+\t    (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n+\t       (match_operand:SI 2 \"general_operand\" \"ri,rm\"))))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n+  \"sbb{l}\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"ppro_uops\" \"few\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"subsi3\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t   (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -6142,7 +6169,7 @@\n      (set (match_dup 0) (neg:SI (match_dup 2)))])\n    (parallel\n     [(set (match_dup 1)\n-\t  (plus:SI (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n+\t  (plus:SI (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n \t\t\t    (match_dup 3))\n \t\t   (const_int 0)))\n      (clobber (reg:CC 17))])\n@@ -10576,6 +10603,22 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length_immediate\" \"0\")])\n \n+(define_insn \"x86_movsicc_0_m1_rc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:SI (gtu (reg:CCRC 17) (const_int 0))\n+\t  (const_int -1)\n+\t  (const_int 0)))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  \"sbb{l}\\\\t%0, %0\"\n+  ; Since we don't have the proper number of operands for an alu insn,\n+  ; fill in all the blanks.\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"memory\" \"none\")\n+   (set_attr \"imm_disp\" \"false\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"length_immediate\" \"0\")])\n+\n (define_insn \"*movsicc_noc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 1 \"ix86_comparison_operator\" \n@@ -11413,8 +11456,8 @@\n   \"ix86_match_ccmode (insn, CCGCmode)\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel [(set (reg:CCGC 17)\n-\t\t   (compare:CCGC (neg:SI (match_dup 1))\n-\t\t\t\t (match_dup 0)))\n+\t\t   (compare:CCGC (match_dup 0)\n+\t\t\t\t (neg:SI (match_dup 1))))\n \t      (clobber (match_dup 0))])]\n   \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n \n@@ -11425,8 +11468,8 @@\n   \"ix86_match_ccmode (insn, CCGCmode)\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel [(set (reg:CCGC 17)\n-\t\t   (compare:CCGC (neg:HI (match_dup 1))\n-\t\t\t\t (match_dup 0)))\n+\t\t   (compare:CCGC (match_dup 0)\n+\t\t\t\t (neg:HI (match_dup 1))))\n \t      (clobber (match_dup 0))])]\n   \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n \n@@ -11437,8 +11480,8 @@\n   \"ix86_match_ccmode (insn, CCGCmode)\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel [(set (reg:CCGC 17)\n-\t\t   (compare:CCGC (neg:QI (match_dup 1))\n-\t\t\t\t (match_dup 0)))\n+\t\t   (compare:CCGC (match_dup 0)\n+\t\t\t\t (neg:QI (match_dup 1))))\n \t      (clobber (match_dup 0))])]\n   \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n \n@@ -11447,23 +11490,23 @@\n   [(set (reg 17)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t (const_int 128)))]\n-  \"ix86_match_ccmode (insn, CCmode)\n+  \"ix86_match_ccmode (insn, CCRCmode)\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n-  [(parallel [(set (reg:CC 17)\n-\t\t   (compare:CC (neg:SI (const_int -128))\n-\t\t\t       (match_dup 0)))\n+  [(parallel [(set (reg:CCRC 17)\n+\t\t   (compare:CCRC (match_dup 0)\n+\t\t\t         (neg:SI (const_int -128))))\n \t      (clobber (match_dup 0))])]\n   \"\")\n \n (define_peephole2\n   [(set (reg 17)\n \t(compare (match_operand:HI 0 \"register_operand\" \"\")\n \t\t (const_int 128)))]\n-  \"ix86_match_ccmode (insn, CCmode)\n+  \"ix86_match_ccmode (insn, CCRCmode)\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n-  [(parallel [(set (reg:CC 17)\n-\t\t   (compare:CC (neg:HI (const_int -128))\n-\t\t\t       (match_dup 0)))\n+  [(parallel [(set (reg:CCRC 17)\n+\t\t   (compare:CCRC (match_dup 0)\n+\t\t\t         (neg:HI (const_int -128))))\n \t      (clobber (match_dup 0))])]\n   \"\")\n \f"}]}