{"sha": "6f87af20c351e777702cc58a31dbef03bbbf1bac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4N2FmMjBjMzUxZTc3NzcwMmNjNThhMzFkYmVmMDNiYmJmMWJhYw==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "lauras@softhome.net", "date": "2001-01-12T19:39:07Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-01-12T19:39:07Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): check for DJGPP <ctype.h>\n\n* acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): check for DJGPP <ctype.h>\n(LIB_AC_PROG_CXX): replace [/\\\\] with [\\\\/] to work around older\nbash bug.\n* aclocal.m4: regenerated.\n* configure.target: set os_include_dir to config/os/djgpp under DJGPP.\n* configure: regenerated.\n* config/os/djgpp, config/os/djgpp/bits: new directories.\n* config/os/djgpp/bits/ctype_base.h,\nconfig/os/djgpp/bits/ctype_inline.h,\nconfig/os/djgpp/bits/ctype_noninline.h,\nconfig/os/djgpp/bits/os_defines.h: new files.\n\nFrom-SVN: r38958", "tree": {"sha": "69db3ac8ce056ba033b3dd2ab92c0baee4111ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69db3ac8ce056ba033b3dd2ab92c0baee4111ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f87af20c351e777702cc58a31dbef03bbbf1bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f87af20c351e777702cc58a31dbef03bbbf1bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f87af20c351e777702cc58a31dbef03bbbf1bac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f87af20c351e777702cc58a31dbef03bbbf1bac/comments", "author": null, "committer": null, "parents": [{"sha": "b755792e3cb687a447ca74039925d6425d1504b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b755792e3cb687a447ca74039925d6425d1504b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b755792e3cb687a447ca74039925d6425d1504b2"}], "stats": {"total": 303, "additions": 301, "deletions": 2}, "files": [{"sha": "859c72de7fe90469fce1d2dcb5c9be2dd47ee085", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -1,3 +1,17 @@\n+2001-01-12  Laurynas Biveinis  <lauras@softhome.net>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE_SUPPORT): check for DJGPP <ctype.h>\n+\t(LIB_AC_PROG_CXX): replace [/\\\\] with [\\\\/] to work around older\n+\tbash bug.\n+\t* aclocal.m4: regenerated.\n+\t* configure.target: set os_include_dir to config/os/djgpp under DJGPP.\n+\t* configure: regenerated.\n+\t* config/os/djgpp, config/os/djgpp/bits: new directories.\n+\t* config/os/djgpp/bits/ctype_base.h, \n+\tconfig/os/djgpp/bits/ctype_inline.h, \n+\tconfig/os/djgpp/bits/ctype_noninline.h,\n+\tconfig/os/djgpp/bits/os_defines.h: new files.\n+\n 2001-01-11   Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* include/c_std/bits/std_cstdio.h: Undef printf."}, {"sha": "6516797d4e9ded36db66d5866d95af140d21fae2", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -152,7 +152,7 @@ LIB_AC_PROG_CXX\n   . [$]{glibcpp_basedir}/configure.host\n \n   case [$]{glibcpp_basedir} in\n-    /* | [A-Za-z]:[/\\\\]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n+    /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n@@ -953,6 +953,23 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n     fi\n     fi\n \n+    dnl Test for <ctype> functionality -- DJGPP\n+    dnl FIXME: this test won't work if __dj_ENFORCE_FUNCTION_CALLS\n+    dnl is defined.\n+    if test $ctype_default = \"yes\"; then\n+    AC_MSG_CHECKING([<ctype> for DJGPP])\n+    AC_TRY_COMPILE([#include <ctype.h>],\n+    [int\n+    foo (int a)\n+    { return __dj_ctype_flags[0] + __dj_ctype_flags[1];}], \\\n+    ctype_djgpp=yes, ctype_djgpp=no)\n+    AC_MSG_RESULT($ctype_djgpp)\n+    if test $ctype_djgpp = \"yes\"; then\n+      ctype_include_dir=\"config/os/djgpp\"\n+      ctype_default=no\n+    fi\n+    fi\n+\n     if test $ctype_default = \"yes\"; then\n       ctype_include_dir=\"config/os/generic\"\n       AC_MSG_WARN(\"Using default ctype headers.\")"}, {"sha": "b1f670591c2c9a05123fa0ac7ab27bcfb6f4ef3d", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -164,7 +164,7 @@ LIB_AC_PROG_CXX\n   . [$]{glibcpp_basedir}/configure.host\n \n   case [$]{glibcpp_basedir} in\n-    /* | [A-Za-z]:[/\\\\]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n+    /* | [A-Za-z]:[\\\\/]*) libgcj_flagbasedir=[$]{glibcpp_basedir} ;;\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n@@ -965,6 +965,23 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n     fi\n     fi\n \n+    dnl Test for <ctype> functionality -- DJGPP\n+    dnl FIXME: this test won't work if __dj_ENFORCE_FUNCTION_CALLS\n+    dnl is defined.\n+    if test $ctype_default = \"yes\"; then\n+    AC_MSG_CHECKING([<ctype> for DJGPP])\n+    AC_TRY_COMPILE([#include <ctype.h>],\n+    [int\n+    foo (int a)\n+    { return __dj_ctype_flags[0] + __dj_ctype_flags[1];}], \\\n+    ctype_djgpp=yes, ctype_djgpp=no)\n+    AC_MSG_RESULT($ctype_djgpp)\n+    if test $ctype_djgpp = \"yes\"; then\n+      ctype_include_dir=\"config/os/djgpp\"\n+      ctype_default=no\n+    fi\n+    fi\n+\n     if test $ctype_default = \"yes\"; then\n       ctype_include_dir=\"config/os/generic\"\n       AC_MSG_WARN(\"Using default ctype headers.\")"}, {"sha": "1c41fbd5571589d7e664edb4ae1c88251f120593", "filename": "libstdc++-v3/config/os/djgpp/bits/ctype_base.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_base.h?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -0,0 +1,58 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+  struct ctype_base\n+  {\n+    typedef unsigned short \tmask;\n+    \n+    // Non-standard typedefs.\n+    typedef unsigned char\t__to_type;\n+\n+    enum\n+    {\n+      space = __dj_ISSPACE,\t// Whitespace\n+      print = __dj_ISPRINT,\t// Printing\n+      cntrl = __dj_ISCNTRL,\t// Control character\n+      upper = __dj_ISUPPER,\t// UPPERCASE\n+      lower = __dj_ISLOWER,\t// lowercase\n+      alpha = __dj_ISALPHA,\t// Alphabetic\n+      digit = __dj_ISDIGIT,\t// Numeric\n+      punct = __dj_ISPUNCT,     // Punctuation\n+      xdigit = __dj_ISXDIGIT,   // Hexadecimal numeric\n+      alnum = __dj_ISAL,        // Alphanumeric\n+      graph = __dj_ISGRAPH\t// Graphical\n+    };\n+  };\n+\n+\n+"}, {"sha": "52ec0d605b79a71164db91a1ee3edf32b2ee1d77", "filename": "libstdc++-v3/config/os/djgpp/bits/ctype_inline.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_inline.h?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -0,0 +1,67 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+  \n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const throw()\n+  { return _M_table[(unsigned char)(__c + 1)] & __m; }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const throw()\n+  {\n+    while (__low < __high)\n+      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const throw()\n+  {\n+    while (__low < __high && !this->is(__m, *__low))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const throw()\n+  {\n+    while (__low < __high && this->is(__m, *__low) != 0)\n+      ++__low;\n+    return __low;\n+  }"}, {"sha": "d13f987ec9a78ba45abf952f336e969d08260c8c", "filename": "libstdc++-v3/config/os/djgpp/bits/ctype_noninline.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -0,0 +1,79 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from DJGPP <ctype.h>\n+\n+// DJGPP specific code\n+extern unsigned short __dj_type_cflags[];\n+extern unsigned char __dj_ctype_toupper[];\n+extern unsigned char __dj_ctype_tolower[];\n+  \n+  ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n+\tsize_t __refs = 0) \n+    : _Ctype_nois<char>(__refs), \n+      _M_del(__table != 0 && __del), \n+      _M_toupper(__dj_ctype_toupper), \n+      _M_tolower(__dj_ctype_tolower),\n+      _M_ctable(NULL), \n+      _M_table(__table == 0 ? __dj_type_cflags : __table) \n+    { }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return _M_toupper[(int)(__c)+1]) }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::toupper((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return _M_tolower[(int)(__c)+1]) }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::tolower((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }"}, {"sha": "f979b1eb60df9bf4505280108f002b3b82422ba5", "filename": "libstdc++-v3/config/os/djgpp/bits/os_defines.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fos_defines.h?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -0,0 +1,44 @@\n+// Specific definitions for DJGPP  -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+#define __off_t off_t\n+#define __off64_t off64_t\n+#define __ssize_t ssize_t\n+\n+// FIXME: should there be '#undef POSIX_SOURCE'?\n+\n+#endif"}, {"sha": "11538630d7cf24d6b2008676c02ed917feae9329", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f87af20c351e777702cc58a31dbef03bbbf1bac/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=6f87af20c351e777702cc58a31dbef03bbbf1bac", "patch": "@@ -87,6 +87,9 @@ case \"${target_os}\" in\n   cygwin*)\n     os_include_dir=\"config/os/newlib\"\n     ;;\n+  *djgpp*)\n+    os_include_dir=\"config/os/djgpp\"\n+    ;;\n   linux* | gnu*)\n     os_include_dir=\"config/os/gnu-linux\"\n     ;;"}]}