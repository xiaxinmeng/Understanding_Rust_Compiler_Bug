{"sha": "110fcc77755c84bbc3d6472928da4bdf7a330238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwZmNjNzc3NTVjODRiYmMzZDY0NzI5MjhkYTRiZGY3YTMzMDIzOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-30T11:57:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-30T11:57:55Z"}, "message": "[multiple changes]\n\n2009-10-30  Bob Duff  <duff@adacore.com>\n\n\t* s-fileio.adb (Errno_Message): Suppress VMS-specific warning.\n\n2009-10-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_case.adb (Check_Choices): Add explanatory message when there are\n\tmissing alternatives when the required range of alternatives is given\n\tby the base type of the case expression or discriminant in a variant\n\tpart.\n\n\t* opt.ads: New flag Warn_On_Overlap, to enable warnings on potentially\n\tdangerous overlap between actuals in a call, activated by -gnatw.i\n\t* sem_warn.adb (Set_Dot_Warning_Switch): set flag.\n\t(Warn_On_Overlapping_Actuals): use new flag.\n\n\t* gnat_ugn.texi: Document -gnatw.i, warning on overlapping actuals\n\n2009-10-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb, exp_ch9.adb: Minor reformatting\n\nFrom-SVN: r153740", "tree": {"sha": "63033fd7f2b79007a6e8b8b4047e0792396cc72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63033fd7f2b79007a6e8b8b4047e0792396cc72a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/110fcc77755c84bbc3d6472928da4bdf7a330238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110fcc77755c84bbc3d6472928da4bdf7a330238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110fcc77755c84bbc3d6472928da4bdf7a330238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110fcc77755c84bbc3d6472928da4bdf7a330238/comments", "author": null, "committer": null, "parents": [{"sha": "953a18fb42491340b946980207cd0453ca94231f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953a18fb42491340b946980207cd0453ca94231f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953a18fb42491340b946980207cd0453ca94231f"}], "stats": {"total": 226, "additions": 172, "deletions": 54}, "files": [{"sha": "f3315d785875e4cfae11ff97a62315ed389f6b9c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -1,3 +1,25 @@\n+2009-10-30  Bob Duff  <duff@adacore.com>\n+\n+\t* s-fileio.adb (Errno_Message): Suppress VMS-specific warning.\n+\n+2009-10-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_case.adb (Check_Choices): Add explanatory message when there are\n+\tmissing alternatives when the required range of alternatives is given\n+\tby the base type of the case expression or discriminant in a variant\n+\tpart.\n+\n+\t* opt.ads: New flag Warn_On_Overlap, to enable warnings on potentially\n+\tdangerous overlap between actuals in a call, activated by -gnatw.i\n+\t* sem_warn.adb (Set_Dot_Warning_Switch): set flag.\n+\t(Warn_On_Overlapping_Actuals): use new flag.\n+\n+\t* gnat_ugn.texi: Document -gnatw.i, warning on overlapping actuals\n+\n+2009-10-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_aggr.adb, exp_ch9.adb: Minor reformatting\n+\n 2009-10-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (make_type_from_size) <INTEGER_TYPE>: Do not"}, {"sha": "0e29af2c64e2dc7ef97c2a71351d716a2a4834db", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -3302,7 +3302,7 @@ package body Exp_Aggr is\n       elsif Needs_Finalization (Typ) then\n          Flist := Find_Final_List (Access_Type);\n \n-         --  Otherwise there are no controlled actions to be performed.\n+      --  Otherwise there are no controlled actions to be performed.\n \n       else\n          Flist := Empty;"}, {"sha": "7fe20b37cad04c13e09ee9c5b265823a8b922f07", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -3983,13 +3983,16 @@ package body Exp_Ch9 is\n       Spec_Id : Entity_Id;\n \n    begin\n+      --  Case of explicit task type, suffix TB\n+\n       if Comes_From_Source (T) then\n-         --  This is an explicit task type\n          Spec_Id :=\n            Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (T), \"TB\"));\n+\n+      --  Case of anonymous task type, suffix B\n+\n       else\n-         --  This is an anonymous task type\n          Spec_Id :=\n            Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (T), 'B'));"}, {"sha": "f4cae36577ae9a0af5f69cba39ded96a59e165ab", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -5268,6 +5268,13 @@ This warning can also be turned on using @option{-gnatwa}.\n This switch disables warnings for a @code{with} of an internal GNAT\n implementation unit.\n \n+@item -gnatw.i\n+@emph{Activate warnings on overlapping actuals.}\n+@cindex @option{-gnatw.i} (@command{gcc})\n+This switch enables a warning on statically detectable overlapping actuals\n+in a subprogram call, when one of the actuals is an in-out parameter, and\n+the types of the actuals are not by-copy types.\n+\n @item -gnatwj\n @emph{Activate warnings on obsolescent features (Annex J).}\n @cindex @option{-gnatwj} (@command{gcc})"}, {"sha": "a71c8230c167e4b1d55e4567548d4188047ac9ee", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -1361,6 +1361,11 @@ package Opt is\n    --  Set to True to generate warnings on use of any feature in Annex or if a\n    --  subprogram is called for which a pragma Obsolescent applies.\n \n+   Warn_On_Overlap : Boolean := False;\n+   --  GNAT\n+   --  Set to True to generate warnings when a writable actual which is not\n+   --  a by-copy type overlaps with another actual in a subprogram call.\n+\n    Warn_On_Questionable_Missing_Parens : Boolean := True;\n    --  GNAT\n    --  Set to True to generate warnings for cases where parentheses are missing"}, {"sha": "f93fee25e332e5f3ad6f83fb243a2cf1ea0827b0", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -375,8 +375,13 @@ package body System.File_IO is\n    -------------------\n \n    function Errno_Message (Errno : Integer := OS_Lib.Errno) return String is\n+      pragma Warnings (Off);\n       function To_Chars_Ptr is\n         new Ada.Unchecked_Conversion (System.Address, chars_ptr);\n+      --  On VMS, the compiler warns because System.Address is 64 bits, but\n+      --  chars_ptr is 32 bits. It should be safe, though, because strerror\n+      --  will return a 32-bit pointer.\n+      pragma Warnings (On);\n \n       Message : constant chars_ptr :=\n                   To_Chars_Ptr (CRTL.strerror (Errno));"}, {"sha": "0a342f9ba787159da86bbff58997d39f82a9fb94", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 113, "deletions": 38, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,17 +61,24 @@ package body Sem_Case is\n    procedure Check_Choices\n      (Choice_Table   : in out Sort_Choice_Table_Type;\n       Bounds_Type    : Entity_Id;\n+      Subtyp         : Entity_Id;\n       Others_Present : Boolean;\n-      Msg_Sloc       : Source_Ptr);\n+      Case_Node      : Node_Id);\n    --  This is the procedure which verifies that a set of case alternatives\n    --  or record variant choices has no duplicates, and covers the range\n    --  specified by Bounds_Type. Choice_Table contains the discrete choices\n    --  to check. These must start at position 1.\n+   --\n    --  Furthermore Choice_Table (0) must exist. This element is used by\n    --  the sorting algorithm as a temporary. Others_Present is a flag\n    --  indicating whether or not an Others choice is present. Finally\n    --  Msg_Sloc gives the source location of the construct containing the\n    --  choices in the Choice_Table.\n+   --\n+   --  Bounds_Type is the type whose range must be covered by the alternatives\n+   --\n+   --  Subtyp is the subtype of the expression. If its bounds are non-static\n+   --  the alternatives must cover its base type.\n \n    function Choice_Image (Value : Uint; Ctype : Entity_Id) return Name_Id;\n    --  Given a Pos value of enumeration type Ctype, returns the name\n@@ -94,11 +101,17 @@ package body Sem_Case is\n    -------------------\n \n    procedure Check_Choices\n-     (Choice_Table   : in out Sort_Choice_Table_Type;\n+     (Choice_Table    : in out Sort_Choice_Table_Type;\n       Bounds_Type    : Entity_Id;\n+      Subtyp         : Entity_Id;\n       Others_Present : Boolean;\n-      Msg_Sloc       : Source_Ptr)\n+      Case_Node      : Node_Id)\n    is\n+      procedure Explain_Non_Static_Bound;\n+      --  Called when we find a non-static bound, requiring the base type to\n+      --  be covered. Provides where possible a helpful explanation of why the\n+      --  bounds are non-static, since this is not always obvious.\n+\n       function Lt_Choice (C1, C2 : Natural) return Boolean;\n       --  Comparison routine for comparing Choice_Table entries. Use the lower\n       --  bound of each Choice as the key.\n@@ -136,6 +149,8 @@ package body Sem_Case is\n       end Issue_Msg;\n \n       procedure Issue_Msg (Value1 : Uint; Value2 : Uint) is\n+         Msg_Sloc : constant Source_Ptr := Sloc (Case_Node);\n+\n       begin\n          --  In some situations, we call this with a null range, and\n          --  obviously we don't want to complain in this case!\n@@ -191,17 +206,65 @@ package body Sem_Case is\n          Choice_Table (Nat (To)) := Choice_Table (Nat (From));\n       end Move_Choice;\n \n+      ------------------------------\n+      -- Explain_Non_Static_Bound --\n+      ------------------------------\n+\n+      procedure Explain_Non_Static_Bound is\n+         Expr : Node_Id;\n+\n+      begin\n+         if Nkind (Case_Node) = N_Variant_Part then\n+            Expr := Name (Case_Node);\n+         else\n+            Expr := Expression (Case_Node);\n+         end if;\n+\n+         if Bounds_Type /= Subtyp then\n+\n+            --  If the case is a variant part, the expression is given by\n+            --  the discriminant itself, and the bounds are the culprits.\n+\n+            if Nkind (Case_Node) = N_Variant_Part then\n+               Error_Msg_NE\n+                 (\"bounds of & are not static,\" &\n+                     \" alternatives must cover base type\", Expr, Expr);\n+\n+            --  If this is a case statement, the expression may be\n+            --  non-static or else the subtype may be at fault.\n+\n+            elsif Is_Entity_Name (Expr) then\n+               Error_Msg_NE\n+                 (\"bounds of & are not static,\" &\n+                    \" alternatives must cover base type\", Expr, Expr);\n+\n+            else\n+               Error_Msg_N (\"expression is not static,\" &\n+                \" alternatives must cover base type!\", Expr);\n+            end if;\n+\n+         --  Otherwise the expression is not static, even if the bounds of the\n+         --  type are, or else there are missing alternatives. If both, the\n+         --  additional information may be redundant but harmless.\n+\n+         elsif not Is_Entity_Name (Expr) then\n+            Error_Msg_N\n+              (\"expression is not static, alternatives must cover base type!\",\n+               Expr);\n+         end if;\n+      end Explain_Non_Static_Bound;\n+\n       --  Variables local to Check_Choices\n \n-      Choice      : Node_Id;\n-      Bounds_Lo   : constant Node_Id := Type_Low_Bound (Bounds_Type);\n-      Bounds_Hi   : constant Node_Id := Type_High_Bound (Bounds_Type);\n+      Choice    : Node_Id;\n+      Bounds_Lo : constant Node_Id := Type_Low_Bound  (Bounds_Type);\n+      Bounds_Hi : constant Node_Id := Type_High_Bound (Bounds_Type);\n \n       Prev_Choice : Node_Id;\n \n-      Hi       : Uint;\n-      Lo       : Uint;\n-      Prev_Hi  : Uint;\n+      Hi      : Uint;\n+      Lo      : Uint;\n+      Prev_Hi : Uint;\n \n    --  Start of processing for Check_Choices\n \n@@ -216,6 +279,7 @@ package body Sem_Case is\n          if not Others_Present then\n             Issue_Msg (Bounds_Lo, Bounds_Hi);\n          end if;\n+\n          return;\n       end if;\n \n@@ -227,6 +291,13 @@ package body Sem_Case is\n \n       if not Others_Present and then Expr_Value (Bounds_Lo) < Lo then\n          Issue_Msg (Bounds_Lo, Lo - 1);\n+\n+         --  If values are missing outside of the subtype, add explanation.\n+         --  No additional message if only one value is missing.\n+\n+         if Expr_Value (Bounds_Lo) < Lo - 1 then\n+            Explain_Non_Static_Bound;\n+         end if;\n       end if;\n \n       for J in 2 .. Choice_Table'Last loop\n@@ -254,6 +325,10 @@ package body Sem_Case is\n \n       if not Others_Present and then Expr_Value (Bounds_Hi) > Hi then\n          Issue_Msg (Hi + 1, Bounds_Hi);\n+\n+         if Expr_Value (Bounds_Hi) > Hi + 1 then\n+            Explain_Non_Static_Bound;\n+         end if;\n       end if;\n    end Check_Choices;\n \n@@ -546,27 +621,27 @@ package body Sem_Case is\n          Sort_Choice_Table : Sort_Choice_Table_Type (0 .. Nb_Choices);\n \n          Choice_Type : constant Entity_Id := Base_Type (Subtyp);\n-         --  The actual type against which the discrete choices are\n-         --  resolved.  Note that this type is always the base type not the\n-         --  subtype of the ruling expression, index or discriminant.\n+         --  The actual type against which the discrete choices are resolved.\n+         --  Note that this type is always the base type not the subtype of the\n+         --  ruling expression, index or discriminant.\n \n          Bounds_Type : Entity_Id;\n-         --  The type from which are derived the bounds of the values\n-         --  covered by the discrete choices (see 3.8.1 (4)). If a discrete\n-         --  choice specifies a value outside of these bounds we have an error.\n+         --  The type from which are derived the bounds of the values covered\n+         --  by the discrete choices (see 3.8.1 (4)). If a discrete choice\n+         --  specifies a value outside of these bounds we have an error.\n \n          Bounds_Lo : Uint;\n          Bounds_Hi : Uint;\n          --  The actual bounds of the above type\n \n          Expected_Type : Entity_Id;\n-         --  The expected type of each choice. Equal to Choice_Type, except\n-         --  if the expression is universal,  in which case the choices can\n-         --  be of any integer type.\n+         --  The expected type of each choice. Equal to Choice_Type, except if\n+         --  the expression is universal, in which case the choices can be of\n+         --  any integer type.\n \n          Alt : Node_Id;\n          --  A case statement alternative or a variant in a record type\n-         --  declaration\n+         --  declaration.\n \n          Choice : Node_Id;\n          Kind   : Node_Kind;\n@@ -576,9 +651,9 @@ package body Sem_Case is\n          --  Remember others choice if it is present (empty otherwise)\n \n          procedure Check (Choice : Node_Id; Lo, Hi : Node_Id);\n-         --  Checks the validity of the bounds of a choice.  When the bounds\n-         --  are static and no error occurred the bounds are entered into\n-         --  the choices table so that they can be sorted later on.\n+         --  Checks the validity of the bounds of a choice. When the bounds\n+         --  are static and no error occurred the bounds are entered into the\n+         --  choices table so that they can be sorted later on.\n \n          -----------\n          -- Check --\n@@ -628,10 +703,10 @@ package body Sem_Case is\n \n             if Lo_Val < Bounds_Lo then\n \n-               --  If the choice is an entity name, then it is a type, and\n-               --  we want to post the message on the reference to this\n-               --  entity. Otherwise we want to post it on the lower bound\n-               --  of the range.\n+               --  If the choice is an entity name, then it is a type, and we\n+               --  want to post the message on the reference to this entity.\n+               --  Otherwise we want to post it on the lower bound of the\n+               --  range.\n \n                if Is_Entity_Name (Choice) then\n                   Enode := Choice;\n@@ -654,10 +729,9 @@ package body Sem_Case is\n \n             if Hi_Val > Bounds_Hi then\n \n-               --  If the choice is an entity name, then it is a type, and\n-               --  we want to post the message on the reference to this\n-               --  entity. Otherwise we want to post it on the upper bound\n-               --  of the range.\n+               --  If the choice is an entity name, then it is a type, and we\n+               --  want to post the message on the reference to this entity.\n+               --  Otherwise post it on the upper bound of the range.\n \n                if Is_Entity_Name (Choice) then\n                   Enode := Choice;\n@@ -678,9 +752,9 @@ package body Sem_Case is\n \n             --  Store bounds in the table\n \n-            --  Note: we still store the bounds, even if they are out of\n-            --  range, since this may prevent unnecessary cascaded errors\n-            --  for values that are covered by such an excessive range.\n+            --  Note: we still store the bounds, even if they are out of range,\n+            --  since this may prevent unnecessary cascaded errors for values\n+            --  that are covered by such an excessive range.\n \n             Last_Choice := Last_Choice + 1;\n             Sort_Choice_Table (Last_Choice).Lo   := Lo;\n@@ -695,9 +769,9 @@ package body Sem_Case is\n          Raises_CE      := False;\n          Others_Present := False;\n \n-         --  If Subtyp is not a static subtype Ada 95 requires then we use\n-         --  the bounds of its base type to determine the values covered by\n-         --  the discrete choices.\n+         --  If Subtyp is not a static subtype Ada 95 requires then we use the\n+         --  bounds of its base type to determine the values covered by the\n+         --  discrete choices.\n \n          if Is_OK_Static_Subtype (Subtyp) then\n             Bounds_Type := Subtyp;\n@@ -848,8 +922,9 @@ package body Sem_Case is\n          Check_Choices\n            (Sort_Choice_Table (0 .. Last_Choice),\n             Bounds_Type,\n+            Subtyp,\n             Others_Present or else (Choice_Type = Universal_Integer),\n-            Sloc (N));\n+            N);\n \n          --  Now copy the sorted discrete choices\n "}, {"sha": "abfdf1ff66806dc46294829729640ab4442f69bc", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110fcc77755c84bbc3d6472928da4bdf7a330238/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=110fcc77755c84bbc3d6472928da4bdf7a330238", "patch": "@@ -2991,6 +2991,7 @@ package body Sem_Warn is\n             Warn_On_Non_Local_Exception         := True;\n             Warn_On_Object_Renames_Function     := True;\n             Warn_On_Obsolescent_Feature         := True;\n+            Warn_On_Overlap                     := True;\n             Warn_On_Questionable_Missing_Parens := True;\n             Warn_On_Redundant_Constructs        := True;\n             Warn_On_Unchecked_Conversion        := True;\n@@ -3001,6 +3002,12 @@ package body Sem_Warn is\n          when 'g' =>\n             Set_GNAT_Mode_Warnings;\n \n+         when 'i' =>\n+            Warn_On_Overlap                     := True;\n+\n+         when 'I' =>\n+            Warn_On_Overlap                     := False;\n+\n          when 'm' =>\n             Warn_On_Suspicious_Modulus_Value    := True;\n \n@@ -3139,6 +3146,7 @@ package body Sem_Warn is\n             Warn_On_No_Value_Assigned           := False;\n             Warn_On_Non_Local_Exception         := False;\n             Warn_On_Obsolescent_Feature         := False;\n+            Warn_On_Overlap                     := False;\n             Warn_On_All_Unread_Out_Parameters   := False;\n             Warn_On_Parameter_Order             := False;\n             Warn_On_Questionable_Missing_Parens := False;\n@@ -3544,11 +3552,7 @@ package body Sem_Warn is\n       Form1, Form2 : Entity_Id;\n \n    begin\n-      --  For now, treat this warning as an extension\n-      --  Why not just define a new warning switch, you really don't want to\n-      --  force this warning when using conditional expressions for example???\n-\n-      if not Extensions_Allowed then\n+      if not Warn_On_Overlap then\n          return;\n       end if;\n \n@@ -3582,10 +3586,6 @@ package body Sem_Warn is\n                     Denotes_Same_Prefix (Act1, Act2))\n                then\n                   --  Exclude generic types and guard against previous errors.\n-                  --  If either type is elementary the aliasing is harmless.\n-\n-                  --  I can't relate the comment about elementary to the\n-                  --  actual code below, which seems to be testing generic???\n \n                   if Error_Posted (N)\n                     or else No (Etype (Act1))\n@@ -3605,6 +3605,8 @@ package body Sem_Warn is\n                   elsif Nkind (Act2) = N_Function_Call then\n                      null;\n \n+                  --  If either type is elementary the aliasing is harmless.\n+\n                   elsif Is_Elementary_Type (Underlying_Type (Etype (Form1)))\n                           or else\n                         Is_Elementary_Type (Underlying_Type (Etype (Form2)))\n@@ -3626,10 +3628,9 @@ package body Sem_Warn is\n                            Next_Actual (Act);\n                         end loop;\n \n-                        --  If the call was written in prefix notation, count\n-                        --  only the visible actuals in the call.\n-\n-                        --  Why original_node calls below ???\n+                        --  If the call was written in prefix notation, and\n+                        --  thus its prefix before rewriting was a selected\n+                        --  component, count only visible actuals in the call.\n \n                         if Is_Entity_Name (First_Actual (N))\n                           and then Nkind (Original_Node (N)) = Nkind (N)"}]}