{"sha": "fc21784dec6ab2642059b2a988af355a08cbba1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyMTc4NGRlYzZhYjI2NDIwNTliMmE5ODhhZjM1NWEwOGNiYmExYQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-14T14:56:13Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-14T14:56:13Z"}, "message": "[AArch64] Fix vcond where comparison and result have different types.\n\ngcc/\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_vcond_internal<mode>): Rename to...\n\t(aarch64_vcond_internal<mode><mode>): ...This, for integer modes.\n\t(aarch64_vcond_internal<VDQF_COND:mode><VDQF:mode>): ...This for\n\tfloat modes. Clarify all iterator modes.\n\t(vcond<mode><mode>): Use new name for vcond expanders.\n\t(vcond<v_cmp_result><mode>): Likewise.\n\t(vcondu<mode><mode>: Likewise.\n\t* config/aarch64/iterators.md (VDQF_COND): New.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/vect-fcm.x: Add cases testing\n\tFLOAT cmp FLOAT ? INT : INT.\n\t * gcc.target/aarch64/vect-fcm-eq-d.c: Define IMODE.\n\t * gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n\t * gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n\t * gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n\t * gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n\t * gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n\nFrom-SVN: r198890", "tree": {"sha": "b5619b4b0a47188d0369c7116277766d78842d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5619b4b0a47188d0369c7116277766d78842d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc21784dec6ab2642059b2a988af355a08cbba1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc21784dec6ab2642059b2a988af355a08cbba1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc21784dec6ab2642059b2a988af355a08cbba1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc21784dec6ab2642059b2a988af355a08cbba1a/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adce5cdf6f3f32dca2004892b369157284e9c0d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adce5cdf6f3f32dca2004892b369157284e9c0d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adce5cdf6f3f32dca2004892b369157284e9c0d5"}], "stats": {"total": 158, "additions": 122, "deletions": 36}, "files": [{"sha": "ce75cac360c93471cc8ee6e69188a1f68d92f3f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -1,3 +1,15 @@\n+2013-05-14  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_vcond_internal<mode>): Rename to...\n+\t(aarch64_vcond_internal<mode><mode>): ...This, for integer modes.\n+\t(aarch64_vcond_internal<VDQF_COND:mode><VDQF:mode>): ...This for\n+\tfloat modes. Clarify all iterator modes.\n+\t(vcond<mode><mode>): Use new name for vcond expanders.\n+\t(vcond<v_cmp_result><mode>): Likewise.\n+\t(vcondu<mode><mode>: Likewise.\n+\t* config/aarch64/iterators.md (VDQF_COND): New.\n+\n 2013-05-14  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR bootstrap/57266"}, {"sha": "9069a73c46c9cdc5f75f00c7d0c0d1dc015bae79", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -1711,7 +1711,7 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_vcond_internal<mode>\"\n+(define_expand \"aarch64_vcond_internal<mode><mode>\"\n   [(set (match_operand:VDQ 0 \"register_operand\")\n \t(if_then_else:VDQ\n \t  (match_operator 3 \"comparison_operator\"\n@@ -1806,23 +1806,23 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_vcond_internal<mode>\"\n-  [(set (match_operand:VDQF 0 \"register_operand\")\n+(define_expand \"aarch64_vcond_internal<VDQF_COND:mode><VDQF:mode>\"\n+  [(set (match_operand:VDQF_COND 0 \"register_operand\")\n \t(if_then_else:VDQF\n \t  (match_operator 3 \"comparison_operator\"\n \t    [(match_operand:VDQF 4 \"register_operand\")\n \t     (match_operand:VDQF 5 \"nonmemory_operand\")])\n-\t  (match_operand:VDQF 1 \"nonmemory_operand\")\n-\t  (match_operand:VDQF 2 \"nonmemory_operand\")))]\n+\t  (match_operand:VDQF_COND 1 \"nonmemory_operand\")\n+\t  (match_operand:VDQF_COND 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n   int inverse = 0;\n   int use_zero_form = 0;\n   int swap_bsl_operands = 0;\n   rtx op1 = operands[1];\n   rtx op2 = operands[2];\n-  rtx mask = gen_reg_rtx (<V_cmp_result>mode);\n-  rtx tmp = gen_reg_rtx (<V_cmp_result>mode);\n+  rtx mask = gen_reg_rtx (<VDQF_COND:V_cmp_result>mode);\n+  rtx tmp = gen_reg_rtx (<VDQF_COND:V_cmp_result>mode);\n \n   rtx (*base_comparison) (rtx, rtx, rtx);\n   rtx (*complimentary_comparison) (rtx, rtx, rtx);\n@@ -1842,7 +1842,7 @@\n       /* Fall through.  */\n     default:\n       if (!REG_P (operands[5]))\n-\toperands[5] = force_reg (<MODE>mode, operands[5]);\n+\toperands[5] = force_reg (<VDQF:MODE>mode, operands[5]);\n     }\n \n   switch (GET_CODE (operands[3]))\n@@ -1855,23 +1855,23 @@\n     case UNGE:\n     case ORDERED:\n     case UNORDERED:\n-      base_comparison = gen_aarch64_cmge<mode>;\n-      complimentary_comparison = gen_aarch64_cmgt<mode>;\n+      base_comparison = gen_aarch64_cmge<VDQF:mode>;\n+      complimentary_comparison = gen_aarch64_cmgt<VDQF:mode>;\n       break;\n     case LE:\n     case UNLE:\n       inverse = 1;\n       /* Fall through.  */\n     case GT:\n     case UNGT:\n-      base_comparison = gen_aarch64_cmgt<mode>;\n-      complimentary_comparison = gen_aarch64_cmge<mode>;\n+      base_comparison = gen_aarch64_cmgt<VDQF:mode>;\n+      complimentary_comparison = gen_aarch64_cmge<VDQF:mode>;\n       break;\n     case EQ:\n     case NE:\n     case UNEQ:\n-      base_comparison = gen_aarch64_cmeq<mode>;\n-      complimentary_comparison = gen_aarch64_cmeq<mode>;\n+      base_comparison = gen_aarch64_cmeq<VDQF:mode>;\n+      complimentary_comparison = gen_aarch64_cmeq<VDQF:mode>;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -1899,10 +1899,10 @@\n \t  switch (GET_CODE (operands[3]))\n \t    {\n \t    case LT:\n-\t      base_comparison = gen_aarch64_cmlt<mode>;\n+\t      base_comparison = gen_aarch64_cmlt<VDQF:mode>;\n \t      break;\n \t    case LE:\n-\t      base_comparison = gen_aarch64_cmle<mode>;\n+\t      base_comparison = gen_aarch64_cmle<VDQF:mode>;\n \t      break;\n \t    default:\n \t      /* Do nothing, other zero form cases already have the correct\n@@ -1945,9 +1945,9 @@\n \t true iff !(a != b && a ORDERED b), swapping the operands to BSL\n \t will then give us (a == b ||  a UNORDERED b) as intended.  */\n \n-      emit_insn (gen_aarch64_cmgt<mode> (mask, operands[4], operands[5]));\n-      emit_insn (gen_aarch64_cmgt<mode> (tmp, operands[5], operands[4]));\n-      emit_insn (gen_ior<v_cmp_result>3 (mask, mask, tmp));\n+      emit_insn (gen_aarch64_cmgt<VDQF:mode> (mask, operands[4], operands[5]));\n+      emit_insn (gen_aarch64_cmgt<VDQF:mode> (tmp, operands[5], operands[4]));\n+      emit_insn (gen_ior<VDQF_COND:v_cmp_result>3 (mask, mask, tmp));\n       swap_bsl_operands = 1;\n       break;\n     case UNORDERED:\n@@ -1956,9 +1956,9 @@\n      swap_bsl_operands = 1;\n      /* Fall through.  */\n     case ORDERED:\n-      emit_insn (gen_aarch64_cmgt<mode> (tmp, operands[4], operands[5]));\n-      emit_insn (gen_aarch64_cmge<mode> (mask, operands[5], operands[4]));\n-      emit_insn (gen_ior<v_cmp_result>3 (mask, mask, tmp));\n+      emit_insn (gen_aarch64_cmgt<VDQF:mode> (tmp, operands[4], operands[5]));\n+      emit_insn (gen_aarch64_cmge<VDQF:mode> (mask, operands[5], operands[4]));\n+      emit_insn (gen_ior<VDQF_COND:v_cmp_result>3 (mask, mask, tmp));\n       break;\n     default:\n       gcc_unreachable ();\n@@ -1973,16 +1973,16 @@\n     /* If we have (a = (b CMP c) ? -1 : 0);\n        Then we can simply move the generated mask.  */\n \n-    if (op1 == CONSTM1_RTX (<V_cmp_result>mode)\n-\t&& op2 == CONST0_RTX (<V_cmp_result>mode))\n+    if (op1 == CONSTM1_RTX (<VDQF_COND:V_cmp_result>mode)\n+\t&& op2 == CONST0_RTX (<VDQF_COND:V_cmp_result>mode))\n       emit_move_insn (operands[0], mask);\n     else\n       {\n \tif (!REG_P (op1))\n-\t  op1 = force_reg (<MODE>mode, op1);\n+\t  op1 = force_reg (<VDQF_COND:MODE>mode, op1);\n \tif (!REG_P (op2))\n-\t  op2 = force_reg (<MODE>mode, op2);\n-\temit_insn (gen_aarch64_simd_bsl<mode> (operands[0], mask,\n+\t  op2 = force_reg (<VDQF_COND:MODE>mode, op2);\n+\temit_insn (gen_aarch64_simd_bsl<VDQF_COND:mode> (operands[0], mask,\n \t\t\t\t\t       op1, op2));\n       }\n \n@@ -1999,7 +1999,7 @@\n \t  (match_operand:VALL 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n-  emit_insn (gen_aarch64_vcond_internal<mode> (operands[0], operands[1],\n+  emit_insn (gen_aarch64_vcond_internal<mode><mode> (operands[0], operands[1],\n \t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t       operands[4], operands[5]));\n   DONE;\n@@ -2015,7 +2015,7 @@\n \t  (match_operand:<V_cmp_result> 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n-  emit_insn (gen_aarch64_vcond_internal<v_cmp_result> (\n+  emit_insn (gen_aarch64_vcond_internal<v_cmp_result><mode> (\n \t\t\t\t\t\toperands[0], operands[1],\n \t\t\t\t\t\toperands[2], operands[3],\n \t\t\t\t\t\toperands[4], operands[5]));\n@@ -2032,7 +2032,7 @@\n \t  (match_operand:VDQ 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n-  emit_insn (gen_aarch64_vcond_internal<mode> (operands[0], operands[1],\n+  emit_insn (gen_aarch64_vcond_internal<mode><mode> (operands[0], operands[1],\n \t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t       operands[4], operands[5]));\n   DONE;"}, {"sha": "860d4d9a1871dee032d800cf73ee85561e459ec8", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -83,6 +83,9 @@\n ;; Vector Float modes.\n (define_mode_iterator VDQF [V2SF V4SF V2DF])\n \n+;; Modes suitable to use as the return type of a vcond expression.\n+(define_mode_iterator VDQF_COND [V2SF V2SI V4SF V4SI V2DF V2DI])\n+\n ;; All Float modes.\n (define_mode_iterator VALLF [V2SF V4SF V2DF SF DF])\n "}, {"sha": "217bbb107aaa637907d9cb0ccd26c3b1a40527bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -1,3 +1,14 @@\n+2013-05-14  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vect-fcm.x: Add cases testing\n+\tFLOAT cmp FLOAT ? INT : INT.\n+\t* gcc.target/aarch64/vect-fcm-eq-d.c: Define IMODE.\n+\t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n+\n 2013-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53903"}, {"sha": "6c2e2c8b30e5f7509dfb5bda67b8524d7953d325", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -2,12 +2,13 @@\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n #define FTYPE double\n+#define ITYPE long\n #define OP ==\n #define INV_OP !=\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 8 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5a2109c4ac9b7e4c98e7c0ddeaa1013aa077d94a", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -2,12 +2,13 @@\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n #define FTYPE float\n+#define ITYPE int\n #define OP ==\n #define INV_OP !=\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 8 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n /* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8fad79998e3b704f152e857fef25ca9370414760", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -2,12 +2,13 @@\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n #define FTYPE double\n+#define ITYPE long\n #define OP >=\n #define INV_OP <\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 8 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { scan-assembler \"fcmlt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */"}, {"sha": "7aab9e6b0ad8ee9a0bcf143fcb30b76c18b87a4e", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -2,12 +2,13 @@\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n #define FTYPE float\n+#define ITYPE int\n #define OP >=\n #define INV_OP <\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 8 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n /* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { scan-assembler \"fcmlt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */"}, {"sha": "d26acaae3c1d17e776ed1496de92494d7690f003", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -2,12 +2,13 @@\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n #define FTYPE double\n+#define ITYPE long\n #define OP >\n #define INV_OP <=\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 8 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { scan-assembler \"fcmle\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */"}, {"sha": "2797fd1a1158f26e3db8920ec1a4d6048460e7c5", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -2,12 +2,13 @@\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n #define FTYPE float\n+#define ITYPE int\n #define OP >\n #define INV_OP <=\n \n #include \"vect-fcm.x\"\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 8 \"vect\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n /* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { scan-assembler \"fcmle\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */"}, {"sha": "614f0dec066b17c09dc1cee66a5ee846a6f02e62", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm.x", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc21784dec6ab2642059b2a988af355a08cbba1a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm.x?ref=fc21784dec6ab2642059b2a988af355a08cbba1a", "patch": "@@ -13,6 +13,8 @@ FTYPE input2[N] =\n  2.0, -4.0, 8.0, -16.0,\n  -2.125, 4.25, -8.5, 17.0};\n \n+/* Float comparisons, float results.  */\n+\n void\n foo (FTYPE *in1, FTYPE *in2, FTYPE *output)\n {\n@@ -49,11 +51,52 @@ foobarbar (FTYPE *in1, FTYPE *in2, FTYPE *output)\n     output[i] = (in1[i] INV_OP 0.0) ? 4.0 : 2.0;\n }\n \n+/* Float comparisons, int results.  */\n+\n+void\n+foo_int (FTYPE *in1, FTYPE *in2, ITYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] OP in2[i]) ? 2 : 4;\n+}\n+\n+void\n+bar_int (FTYPE *in1, FTYPE *in2, ITYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] INV_OP in2[i]) ? 4 : 2;\n+}\n+\n+void\n+foobar_int (FTYPE *in1, FTYPE *in2, ITYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] OP 0.0) ? 4 : 2;\n+}\n+\n+void\n+foobarbar_int (FTYPE *in1, FTYPE *in2, ITYPE *output)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = (in1[i] INV_OP 0.0) ? 4 : 2;\n+}\n+\n int\n main (int argc, char **argv)\n {\n   FTYPE out1[N];\n   FTYPE out2[N];\n+  ITYPE outi1[N];\n+  ITYPE outi2[N];\n+\n   int i = 0;\n   foo (input1, input2, out1);\n   bar (input1, input2, out2);\n@@ -65,6 +108,17 @@ main (int argc, char **argv)\n   for (i = 0; i < N; i++)\n     if (out1[i] == out2[i])\n       abort ();\n+\n+  foo_int (input1, input2, outi1);\n+  bar_int (input1, input2, outi2);\n+  for (i = 0; i < N; i++)\n+    if (outi1[i] != outi2[i])\n+      abort ();\n+  foobar_int (input1, input2, outi1);\n+  foobarbar_int (input1, input2, outi2);\n+  for (i = 0; i < N; i++)\n+    if (outi1[i] == outi2[i])\n+      abort ();\n   return 0;\n }\n "}]}