{"sha": "cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "node_id": "C_kwDOANBUbNoAKGNmNTljODk4M2VmNjU5MGYwZDY5MDE0ZjhkYzg3NzhiNWI3NjkxYzY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-23T16:17:45Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-23T16:17:45Z"}, "message": "c++: get_nsdmi in template context [PR108116]\n\nHere during ahead of time checking of C{}, we indirectly call get_nsdmi\nfor C::m from finish_compound_literal, which in turn calls\nbreak_out_target_exprs for C::m's (non-templated) initializer, during\nwhich we build a call to A::~A and check expr_noexcept_p for it (from\nbuild_vec_delete_1).  But this is all done with processing_template_decl\nset, so the built A::~A call is templated (whose form was recently\nchanged by r12-6897-gdec8d0e5fa00ceb2) which expr_noexcept_p doesn't\nexpect, and we crash.\n\nThis patch fixes this by clearing processing_template_decl before\nthe call to break_out_target_exprs from get_nsdmi.  And since it more\ngenerally seems we shouldn't be seeing (or producing) non-templated\ntrees in break_out_target_exprs, this patch also adds an assert to\nthat effect.\n\n\tPR c++/108116\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (maybe_constant_value): Clear\n\tprocessing_template_decl before calling break_out_target_exprs.\n\t* init.cc (get_nsdmi): Likewise.\n\t* tree.cc (break_out_target_exprs): Assert processing_template_decl\n\tis cleared.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-template24.C: New test.", "tree": {"sha": "fb47b0cec99431ab37908ad136ee3803accfc4e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb47b0cec99431ab37908ad136ee3803accfc4e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/comments", "author": null, "committer": null, "parents": [{"sha": "3d6bb832022160b00e7001ac5b467e201ab4a9ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6bb832022160b00e7001ac5b467e201ab4a9ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6bb832022160b00e7001ac5b467e201ab4a9ac"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "414af7a6d4c45ca76e3dca2ad939d0cd84214360", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "patch": "@@ -8507,6 +8507,10 @@ maybe_constant_value (tree t, tree decl /* = NULL_TREE */,\n       r = *cached;\n       if (r != t)\n \t{\n+\t  /* Clear processing_template_decl for sake of break_out_target_exprs;\n+\t     entries in the cv_cache are non-templated.  */\n+\t  processing_template_decl_sentinel ptds;\n+\n \t  r = break_out_target_exprs (r, /*clear_loc*/true);\n \t  protected_set_expr_location (r, EXPR_LOCATION (t));\n \t}"}, {"sha": "b49a7ca916994cbf5e92643ec9245d2f7c70641f", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "patch": "@@ -670,6 +670,10 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n       current_class_ptr = build_address (current_class_ref);\n     }\n \n+  /* Clear processing_template_decl for sake of break_out_target_exprs;\n+     INIT is always non-templated.  */\n+  processing_template_decl_sentinel ptds;\n+\n   /* Strip redundant TARGET_EXPR so we don't need to remap it, and\n      so the aggregate init code below will see a CONSTRUCTOR.  */\n   bool simple_target = (init && SIMPLE_TARGET_EXPR_P (init));"}, {"sha": "faf01616f8769c3ad05cb35992103bb4930d3074", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "patch": "@@ -3342,6 +3342,10 @@ break_out_target_exprs (tree t, bool clear_location /* = false */)\n   static int target_remap_count;\n   static splay_tree target_remap;\n \n+  /* We shouldn't be called on templated trees, nor do we want to\n+     produce them.  */\n+  gcc_checking_assert (!processing_template_decl);\n+\n   if (!target_remap_count++)\n     target_remap = splay_tree_new (splay_tree_compare_pointers,\n \t\t\t\t   /*splay_tree_delete_key_fn=*/NULL,"}, {"sha": "202c67d7321a00c0733921e5533dfa58b6f610d4", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template24.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf59c8983ef6590f0d69014f8dc8778b5b7691c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template24.C?ref=cf59c8983ef6590f0d69014f8dc8778b5b7691c6", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/108116\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+struct A {\n+  A(int);\n+  ~A();\n+};\n+\n+struct B {\n+  B(std::initializer_list<A>);\n+};\n+\n+struct C {\n+  B m{0};\n+};\n+\n+template<class>\n+void f() {\n+  C c = C{};\n+};"}]}