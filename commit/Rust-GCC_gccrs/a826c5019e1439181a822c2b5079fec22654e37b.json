{"sha": "a826c5019e1439181a822c2b5079fec22654e37b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgyNmM1MDE5ZTE0MzkxODFhODIyYzJiNTA3OWZlYzIyNjU0ZTM3Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-09T15:15:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-09T15:15:36Z"}, "message": "Add VECTOR_BITS to tree-vect.h\n\nSeveral vector tests are sensitive to the vector size.  This patch adds\na VECTOR_BITS macro to tree-vect.h to select the expected vector size\nand uses it to influence iteration counts and array sizes.  The tests\nkeep the original values if the vector size is small enough.\n\nFor now VECTOR_BITS is always 128, but the SVE patches add other values.\n\n2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/testsuite/\n\t* gcc.dg/vect/tree-vect.h (VECTOR_BITS): Define.\n\t* gcc.dg/vect/bb-slp-pr69907.c: Include tree-vect.h.\n\t(N): New macro.\n\t(foo): Use it instead of hard-coded 320.\n\t* gcc.dg/vect/no-scevccp-outer-7.c (N): Redefine if the default\n\tvalue is too small for VECTOR_BITS.\n\t* gcc.dg/vect/no-scevccp-vect-iv-3.c (N): Likewise.\n\t* gcc.dg/vect/no-section-anchors-vect-31.c (N): Likewise.\n\t* gcc.dg/vect/no-section-anchors-vect-36.c (N): Likewise.\n\t* gcc.dg/vect/slp-perm-9.c (N): Likewise.\n\t* gcc.dg/vect/vect-32.c (N): Likewise.\n\t* gcc.dg/vect/vect-75.c (N, OFF): Likewise.\n\t* gcc.dg/vect/vect-77-alignchecks.c (N, OFF): Likewise.\n\t* gcc.dg/vect/vect-78-alignchecks.c (N, OFF): Likewise.\n\t* gcc.dg/vect/vect-89.c (N): Likewise.\n\t* gcc.dg/vect/vect-96.c (N): Likewise.\n\t* gcc.dg/vect/vect-multitypes-3.c (N): Likewise.\n\t* gcc.dg/vect/vect-multitypes-6.c (N): Likewise.\n\t* gcc.dg/vect/vect-over-widen-1.c (N): Likewise.\n\t* gcc.dg/vect/vect-over-widen-4.c (N): Likewise.\n\t* gcc.dg/vect/vect-reduc-pattern-1a.c (N): Likewise.\n\t* gcc.dg/vect/vect-reduc-pattern-1b.c (N): Likewise.\n\t* gcc.dg/vect/vect-reduc-pattern-2a.c (N): Likewise.\n\t* gcc.dg/vect/no-section-anchors-vect-64.c (NINTS): New macro.\n\t(N): Redefine in terms of NINTS.\n\t(ia, ib, ic): Use NINTS instead of hard-coded constants in the\n\tarray bounds.\n\t* gcc.dg/vect/no-section-anchors-vect-69.c (NINTS): New macro.\n\t(N): Redefine in terms of NINTS.\n\t(test1): Replace a and b fields with NINTS - 2 ints of padding.\n\t(main1): Use NINTS instead of hard-coded constants.\n\t* gcc.dg/vect/section-anchors-vect-69.c (NINTS): New macro.\n\t(N): Redefine in terms of NINTS.\n\t(test1): Replace a and b fields with NINTS - 2 ints of padding.\n\t(test2): Remove incorrect comments about alignment.\n\t(main1): Use NINTS instead of hard-coded constants.\n\t* gcc.dg/vect/pr45752.c (N): Redefine if the default value is\n\ttoo small for VECTOR_BITS.\n\t(main): Continue to use canned results for the default value of N,\n\tbut compute the expected results from scratch for other values.\n\t* gcc.dg/vect/slp-perm-1.c (N, main): As for pr45752.c.\n\t* gcc.dg/vect/slp-perm-4.c (N, main): Likewise.\n\t* gcc.dg/vect/slp-perm-5.c (N, main): Likewise.\n\t* gcc.dg/vect/slp-perm-6.c (N, main): Likewise.\n\t* gcc.dg/vect/slp-perm-7.c (N, main): Likewise.\n\t* gcc.dg/vect/pr65518.c (NINTS, N, RESULT): New macros.\n\t(giga): Use NINTS as the array bound.\n\t(main): Use NINTS, N and RESULT.\n\t* gcc.dg/vect/pr65947-5.c (N): Redefine if the default value is\n\ttoo small for VECTOR_BITS.\n\t(main): Fill in any remaining elements of A programmatically.\n\t* gcc.dg/vect/pr81136.c: Include tree-vect.h.\n\t(a): Use VECTOR_BITS to set the alignment of the target structure.\n\t* gcc.dg/vect/slp-19c.c (N): Redefine if the default value is\n\ttoo small for VECTOR_BITS.\n\t(main1): Continue to use the canned input for the default value of N,\n\tbut compute the input from scratch for other values.\n\t* gcc.dg/vect/slp-28.c (N): Redefine if the default value is\n\ttoo small for VECTOR_BITS.\n\t(in1, in2, in3): Remove initialization.\n\t(check1, check2): Delete.\n\t(main1): Initialize in1, in2 and in3 here.  Check every element\n\tof the vectors and compute the expected values directly instead\n\tof using an array.\n\t* gcc.dg/vect/slp-perm-8.c (N): Redefine if the default value is\n\ttoo small for VECTOR_BITS.\n\t(foo, main): Change type of \"i\" to int.\n\t* gcc.dg/vect/vect-103.c (NINTS): New macro.\n\t(N): Redefine in terms of N.\n\t(c): Delete.\n\t(main1): Use NINTS.  Check the result from a and b directly.\n\t* gcc.dg/vect/vect-67.c (NINTS): New macro.\n\t(N): Redefine in terms of N.\n\t(main1): Use NINTS for the inner array bounds.\n\t* gcc.dg/vect/vect-70.c (NINTS, OUTERN): New macros.\n\t(N): Redefine in terms of NINTS.\n\t(s): Keep the outer dimensions as 4 even if N is larger than 24.\n\t(tmp1): New variable.\n\t(main1): Only define a local tmp1 if NINTS is relatively small.\n\tUse OUTERN for the outer loops and NINTS for the inner loops.\n\t* gcc.dg/vect/vect-91.c (OFF): New macro.\n\t(a, main3): Use it.\n\t* gcc.dg/vect/vect-92.c (NITER): New macro.\n\t(main1, main2): Use it.\n\t* gcc.dg/vect/vect-93.c (N): Rename to...\n\t(N1): ...this.\n\t(main): Update accordingly.\n\t(N2): New macro.\n\t(main1): Use N1 instead of 3001 and N2 insteaed of 10.\n\t* gcc.dg/vect/vect-multitypes-1.c (NSHORTS, NINTS): New macros.\n\t(N): Redefine in terms of NSHORTS.\n\t(main1): Use NINTS - 1 instead of 3 and NSHORTS - 1 instead of 7.\n\t(main): Likewise.\n\t* gcc.dg/vect/vect-over-widen-3-big-array.c (N): Define to VECTOR_BITS.\n\t(foo): Truncate the expected value to the type of *d.\n\t* gcc.dg/vect/vect-peel-3.c (NINTS, EXTRA): New macros.\n\t(ia, ib, ic, main): Use EXTRA.\n\t(main): Use NINTS.\n\t(RES_A, RES_B, REC_C): New macros.\n\t(RES): Redefine as their sum.\n\t* gcc.dg/vect/vect-reduc-or_1.c (N): New macro.\n\t(in): Change number of elements to N.\n\t(main): Update accordingly.  Calculate the expected result.\n\t* gcc.dg/vect/vect-reduc-or_2.c (N, in, main): As for\n\tvect-reduc-or-1.c.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254589", "tree": {"sha": "bea32a16fe7c5aee71f06424bf1643ea84f1ab8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bea32a16fe7c5aee71f06424bf1643ea84f1ab8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a826c5019e1439181a822c2b5079fec22654e37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a826c5019e1439181a822c2b5079fec22654e37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a826c5019e1439181a822c2b5079fec22654e37b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a826c5019e1439181a822c2b5079fec22654e37b/comments", "author": null, "committer": null, "parents": [{"sha": "b9680369c3b870031120cda2a92511393e936538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9680369c3b870031120cda2a92511393e936538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9680369c3b870031120cda2a92511393e936538"}], "stats": {"total": 790, "additions": 668, "deletions": 122}, "files": [{"sha": "b444978769e7fcbfb4101928838d37332099c7ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -1,3 +1,113 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.dg/vect/tree-vect.h (VECTOR_BITS): Define.\n+\t* gcc.dg/vect/bb-slp-pr69907.c: Include tree-vect.h.\n+\t(N): New macro.\n+\t(foo): Use it instead of hard-coded 320.\n+\t* gcc.dg/vect/no-scevccp-outer-7.c (N): Redefine if the default\n+\tvalue is too small for VECTOR_BITS.\n+\t* gcc.dg/vect/no-scevccp-vect-iv-3.c (N): Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-31.c (N): Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-36.c (N): Likewise.\n+\t* gcc.dg/vect/slp-perm-9.c (N): Likewise.\n+\t* gcc.dg/vect/vect-32.c (N): Likewise.\n+\t* gcc.dg/vect/vect-75.c (N, OFF): Likewise.\n+\t* gcc.dg/vect/vect-77-alignchecks.c (N, OFF): Likewise.\n+\t* gcc.dg/vect/vect-78-alignchecks.c (N, OFF): Likewise.\n+\t* gcc.dg/vect/vect-89.c (N): Likewise.\n+\t* gcc.dg/vect/vect-96.c (N): Likewise.\n+\t* gcc.dg/vect/vect-multitypes-3.c (N): Likewise.\n+\t* gcc.dg/vect/vect-multitypes-6.c (N): Likewise.\n+\t* gcc.dg/vect/vect-over-widen-1.c (N): Likewise.\n+\t* gcc.dg/vect/vect-over-widen-4.c (N): Likewise.\n+\t* gcc.dg/vect/vect-reduc-pattern-1a.c (N): Likewise.\n+\t* gcc.dg/vect/vect-reduc-pattern-1b.c (N): Likewise.\n+\t* gcc.dg/vect/vect-reduc-pattern-2a.c (N): Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-64.c (NINTS): New macro.\n+\t(N): Redefine in terms of NINTS.\n+\t(ia, ib, ic): Use NINTS instead of hard-coded constants in the\n+\tarray bounds.\n+\t* gcc.dg/vect/no-section-anchors-vect-69.c (NINTS): New macro.\n+\t(N): Redefine in terms of NINTS.\n+\t(test1): Replace a and b fields with NINTS - 2 ints of padding.\n+\t(main1): Use NINTS instead of hard-coded constants.\n+\t* gcc.dg/vect/section-anchors-vect-69.c (NINTS): New macro.\n+\t(N): Redefine in terms of NINTS.\n+\t(test1): Replace a and b fields with NINTS - 2 ints of padding.\n+\t(test2): Remove incorrect comments about alignment.\n+\t(main1): Use NINTS instead of hard-coded constants.\n+\t* gcc.dg/vect/pr45752.c (N): Redefine if the default value is\n+\ttoo small for VECTOR_BITS.\n+\t(main): Continue to use canned results for the default value of N,\n+\tbut compute the expected results from scratch for other values.\n+\t* gcc.dg/vect/slp-perm-1.c (N, main): As for pr45752.c.\n+\t* gcc.dg/vect/slp-perm-4.c (N, main): Likewise.\n+\t* gcc.dg/vect/slp-perm-5.c (N, main): Likewise.\n+\t* gcc.dg/vect/slp-perm-6.c (N, main): Likewise.\n+\t* gcc.dg/vect/slp-perm-7.c (N, main): Likewise.\n+\t* gcc.dg/vect/pr65518.c (NINTS, N, RESULT): New macros.\n+\t(giga): Use NINTS as the array bound.\n+\t(main): Use NINTS, N and RESULT.\n+\t* gcc.dg/vect/pr65947-5.c (N): Redefine if the default value is\n+\ttoo small for VECTOR_BITS.\n+\t(main): Fill in any remaining elements of A programmatically.\n+\t* gcc.dg/vect/pr81136.c: Include tree-vect.h.\n+\t(a): Use VECTOR_BITS to set the alignment of the target structure.\n+\t* gcc.dg/vect/slp-19c.c (N): Redefine if the default value is\n+\ttoo small for VECTOR_BITS.\n+\t(main1): Continue to use the canned input for the default value of N,\n+\tbut compute the input from scratch for other values.\n+\t* gcc.dg/vect/slp-28.c (N): Redefine if the default value is\n+\ttoo small for VECTOR_BITS.\n+\t(in1, in2, in3): Remove initialization.\n+\t(check1, check2): Delete.\n+\t(main1): Initialize in1, in2 and in3 here.  Check every element\n+\tof the vectors and compute the expected values directly instead\n+\tof using an array.\n+\t* gcc.dg/vect/slp-perm-8.c (N): Redefine if the default value is\n+\ttoo small for VECTOR_BITS.\n+\t(foo, main): Change type of \"i\" to int.\n+\t* gcc.dg/vect/vect-103.c (NINTS): New macro.\n+\t(N): Redefine in terms of N.\n+\t(c): Delete.\n+\t(main1): Use NINTS.  Check the result from a and b directly.\n+\t* gcc.dg/vect/vect-67.c (NINTS): New macro.\n+\t(N): Redefine in terms of N.\n+\t(main1): Use NINTS for the inner array bounds.\n+\t* gcc.dg/vect/vect-70.c (NINTS, OUTERN): New macros.\n+\t(N): Redefine in terms of NINTS.\n+\t(s): Keep the outer dimensions as 4 even if N is larger than 24.\n+\t(tmp1): New variable.\n+\t(main1): Only define a local tmp1 if NINTS is relatively small.\n+\tUse OUTERN for the outer loops and NINTS for the inner loops.\n+\t* gcc.dg/vect/vect-91.c (OFF): New macro.\n+\t(a, main3): Use it.\n+\t* gcc.dg/vect/vect-92.c (NITER): New macro.\n+\t(main1, main2): Use it.\n+\t* gcc.dg/vect/vect-93.c (N): Rename to...\n+\t(N1): ...this.\n+\t(main): Update accordingly.\n+\t(N2): New macro.\n+\t(main1): Use N1 instead of 3001 and N2 insteaed of 10.\n+\t* gcc.dg/vect/vect-multitypes-1.c (NSHORTS, NINTS): New macros.\n+\t(N): Redefine in terms of NSHORTS.\n+\t(main1): Use NINTS - 1 instead of 3 and NSHORTS - 1 instead of 7.\n+\t(main): Likewise.\n+\t* gcc.dg/vect/vect-over-widen-3-big-array.c (N): Define to VECTOR_BITS.\n+\t(foo): Truncate the expected value to the type of *d.\n+\t* gcc.dg/vect/vect-peel-3.c (NINTS, EXTRA): New macros.\n+\t(ia, ib, ic, main): Use EXTRA.\n+\t(main): Use NINTS.\n+\t(RES_A, RES_B, REC_C): New macros.\n+\t(RES): Redefine as their sum.\n+\t* gcc.dg/vect/vect-reduc-or_1.c (N): New macro.\n+\t(in): Change number of elements to N.\n+\t(main): Update accordingly.  Calculate the expected result.\n+\t* gcc.dg/vect/vect-reduc-or_2.c (N, in, main): As for\n+\tvect-reduc-or-1.c.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7e4a452e6099a17981b20301b8b4fa83708699e1", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr69907.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -2,10 +2,18 @@\n /* { dg-additional-options \"-O3\" } */\n /* { dg-require-effective-target vect_unpack } */\n \n+#include \"tree-vect.h\"\n+\n+#if VECTOR_BITS > 512\n+#define N (VECTOR_BITS * 10 / 16)\n+#else\n+#define N 320\n+#endif\n+\n void foo(unsigned *p1, unsigned short *p2)\n {\n   int n;\n-  for (n = 0; n < 320; n++)\n+  for (n = 0; n < N; n++)\n     p1[n] = p2[n * 2];\n }\n "}, {"sha": "f56bd2e50af42f20f57791b2e3f0227dac13ee82", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-7.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-7.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 256\n+#define N (VECTOR_BITS / 16)\n+#else\n #define N 16\n+#endif\n \n unsigned short in[N];\n unsigned short coef[N];"}, {"sha": "50b4998bb6c92427019561e0ab78cab77383e5b5", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-vect-iv-3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-vect-iv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-vect-iv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-vect-iv-3.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 256\n+#define N (VECTOR_BITS / 16 + 10)\n+#else\n #define N 26\n+#endif\n  \n __attribute__ ((noinline))\n unsigned int main1 ()"}, {"sha": "629f908d4c854229fd36427d7f4fa33eb5fe2aac", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-31.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,12 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+/* N / 2 bytes has to be worth vectorizing even with peeling.  */\n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 4 / 8)\n+#else\n #define N 64\n+#endif\n \n struct t{\n   int k[N];"}, {"sha": "7663ca7281aacc0ba3e685887e3c20be97322148", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-36.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-36.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 8)\n+#else\n #define N 32\n+#endif\n  \n struct {\n   char ca[N];"}, {"sha": "8ff84b5ab5812cf9718fd80dbe65fe3db23939ea", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-64.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,12 +4,18 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#if VECTOR_BITS > 128\n+#define NINTS (VECTOR_BITS / 32)\n+#else\n+#define NINTS 4\n+#endif\n+\n+#define N (NINTS * 4)\n \n int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-int ia[N][4][N+1];\n-int ic[N][N][3][2*N+2];\n-int id[N][N][N+4];\n+int ia[N][NINTS][N + 1];\n+int ic[N][N][NINTS - 1][2 * N + 2];\n+int id[N][N][N + NINTS];\n \n __attribute__ ((noinline))\n int main1 ()"}, {"sha": "f7ad45b4f7abd38e324ad5898def7ffec232c1a0", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-69.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -5,7 +5,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 24\n+#if VECTOR_BITS > 128\n+#define NINTS (VECTOR_BITS / 32)\n+#else\n+#define NINTS 4\n+#endif\n+\n+#define N (NINTS * 6)\n \n struct s{\n   int m;\n@@ -19,8 +25,7 @@ struct s2{\n \n struct test1{\n   struct s a; /* array a.n is unaligned */\n-  int b;\n-  int c;\n+  int pad[NINTS - 2];\n   struct s e; /* array e.n is aligned */\n };\n \n@@ -54,13 +59,13 @@ int main1 ()\n     }\n \n   /* 2. aligned */\n-  for (i = 3; i < N-1; i++)\n+  for (i = NINTS - 1; i < N - 1; i++)\n     {\n       tmp1[2].a.n[1][2][i] = 6;\n     }\n \n   /* check results:  */\n-  for (i = 3; i < N-1; i++)\n+  for (i = NINTS; i < N - 1; i++)\n     {\n       if (tmp1[2].a.n[1][2][i] != 6)\n         abort ();\n@@ -86,18 +91,18 @@ int main1 ()\n     }\n \n   /* 4. unaligned (unknown misalignment) */\n-  for (i = 0; i < N-4; i++)\n+  for (i = 0; i < N - NINTS; i++)\n     {\n-      for (j = 0; j < N-4; j++)\n+      for (j = 0; j < N - NINTS; j++)\n \t{\n           tmp2[2].e.n[1][i][j] = 8;\n \t}\n     }\n \n   /* check results:  */\n-  for (i = 0; i < N-4; i++)\n+  for (i = 0; i < N - NINTS; i++)\n     {\n-      for (j = 0; j < N-4; j++)\n+      for (j = 0; j < N - NINTS; j++)\n \t{\n           if (tmp2[2].e.n[1][i][j] != 8)\n \t    abort ();"}, {"sha": "4ddac7ad5097c72f08b948f64caa54421d4f55d0", "filename": "gcc/testsuite/gcc.dg/vect/pr45752.c", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr45752.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -35,7 +35,11 @@\n #define M34 7716\n #define M44 16\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 5 / 32)\n+#else\n #define N 20\n+#endif\n \n void foo (unsigned int *__restrict__ pInput,\n           unsigned int *__restrict__ pOutput,\n@@ -77,12 +81,6 @@ void foo (unsigned int *__restrict__ pInput,\n int main (int argc, const char* argv[])\n {\n   unsigned int input[N], output[N], i, input2[N], output2[N];\n-  unsigned int check_results[N]\n-    = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n-    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619 };\n-  unsigned int check_results2[N]\n-    = {7136, 2702, 84604, 57909, 6633, 16956, 6122, 224204, 113484, 16243, \n-    26776, 9542, 363804, 169059, 25853, 36596, 12962, 503404, 224634, 35463 };\n \n   check_vect ();\n \n@@ -95,6 +93,57 @@ int main (int argc, const char* argv[])\n       __asm__ volatile (\"\");\n     }\n \n+#if N == 20\n+  unsigned int check_results[N]\n+    = { 3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n+\t22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404,\n+\t31619 };\n+  unsigned int check_results2[N]\n+    = { 7136, 2702, 84604, 57909, 6633, 16956, 6122, 224204, 113484, 16243, \n+\t26776, 9542, 363804, 169059, 25853, 36596, 12962, 503404, 224634,\n+\t35463 };\n+#else\n+  volatile unsigned int check_results[N];\n+  volatile unsigned int check_results2[N];\n+\n+  for (i = 0; i < N / 5; i++)\n+    {\n+      unsigned int a = input[i * 5];\n+      unsigned int b = input[i * 5 + 1];\n+      unsigned int c = input[i * 5 + 2];\n+      unsigned int d = input[i * 5 + 3];\n+      unsigned int e = input[i * 5 + 4];\n+\n+      check_results[i * 5] = M00 * a + M01 * b + M02 * c + M03 * d + M04 * e;\n+      check_results[i * 5 + 1] = (M10 * a + M11 * b + M12 * c\n+\t\t\t\t  + M13 * d + M14 * e);\n+      check_results[i * 5 + 2] = (M20 * a + M21 * b + M22 * c\n+\t\t\t\t  + M23 * d + M24 * e);\n+      check_results[i * 5 + 3] = (M30 * a + M31 * b + M32 * c\n+\t\t\t\t  + M33 * d + M34 * e);\n+      check_results[i * 5 + 4] = (M40 * a + M41 * b + M42 * c\n+\t\t\t\t  + M43 * d + M44 * e);\n+\n+      a = input2[i * 5];\n+      b = input2[i * 5 + 1];\n+      c = input2[i * 5 + 2];\n+      d = input2[i * 5 + 3];\n+      e = input2[i * 5 + 4];\n+\n+      check_results2[i * 5] = M00 * a + M01 * b + M02 * c + M03 * d + M04 * e;\n+      check_results2[i * 5 + 1]\t= (M10 * a + M11 * b + M12 * c\n+\t\t\t\t   + M13 * d + M14 * e);\n+      check_results2[i * 5 + 2]\t= (M20 * a + M21 * b + M22 * c\n+\t\t\t\t   + M23 * d + M24 * e);\n+      check_results2[i * 5 + 3]\t= (M30 * a + M31 * b + M32 * c\n+\t\t\t\t   + M33 * d + M34 * e);\n+      check_results2[i * 5 + 4] = (M40 * a + M41 * b + M42 * c\n+\t\t\t\t   + M43 * d + M44 * e);\n+\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+#endif\n+\n   foo (input, output, input2, output2);\n \n   for (i = 0; i < N; i++)"}, {"sha": "3e5b986183c04261430b6a0c1493716d534c96cf", "filename": "gcc/testsuite/gcc.dg/vect/pr65518.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65518.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65518.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65518.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -1,10 +1,19 @@\n #include \"tree-vect.h\"\r\n \r\n+#if VECTOR_BITS > 256\r\n+#define NINTS (VECTOR_BITS / 32)\r\n+#else\r\n+#define NINTS 8\r\n+#endif\r\n+\r\n+#define N (NINTS * 2)\r\n+#define RESULT (NINTS * (NINTS - 1) / 2 * N + NINTS)\r\n+\r\n extern void abort (void);\r\n \r\n typedef struct giga\r\n {\r\n-  unsigned int g[16];\r\n+  unsigned int g[N];\r\n } giga;\r\n \r\n unsigned long __attribute__((noinline,noclone))\r\n@@ -19,17 +28,17 @@ addfst(giga const *gptr, int num)\n \r\n int main ()\r\n {\r\n-  struct giga g[8];\r\n+  struct giga g[NINTS];\r\n   unsigned int n = 1;\r\n   int i, j;\r\n   check_vect ();\r\n-  for (i = 0; i < 8; ++i)\r\n-    for (j = 0; j < 16; ++j)\r\n+  for (i = 0; i < NINTS; ++i)\r\n+    for (j = 0; j < N; ++j)\r\n       {\r\n \tg[i].g[j] = n++;\r\n \t__asm__ volatile (\"\");\r\n       }\r\n-  if (addfst (g, 8) != 456)\r\n+  if (addfst (g, NINTS) != RESULT)\r\n     abort ();\r\n   return 0;\r\n }\r"}, {"sha": "e577820ac3fd202d83a59aaeb1d67a6a3202631d", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-5.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n \n extern void abort (void) __attribute__ ((noreturn));\n \n+#if VECTOR_BITS > 256\n+#define N (VECTOR_BITS / 8)\n+#else\n #define N 32\n+#endif\n \n /* Condition reduction where loop size is not known at compile time.  Will fail\n    to vectorize.  Version inlined into main loop will vectorize.  */\n@@ -30,6 +34,11 @@ main (void)\n   21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n   31, 32\n   };\n+  for (int i = 32; i < N; ++i)\n+    {\n+      a[i] = 70 + (i & 3);\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n \n   check_vect ();\n "}, {"sha": "0ae4a4d4d5b66b8c40c7d04c8dc644218b7a4221", "filename": "gcc/testsuite/gcc.dg/vect/pr81136.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81136.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81136.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81136.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n \n-struct __attribute__((aligned (32)))\n+#include \"tree-vect.h\"\n+\n+struct __attribute__((aligned (VECTOR_BITS / 8)))\n {\n   char misaligner;\n   int foo[100];"}, {"sha": "e3466d0da1de6207b8583f42aad412b2c2000dcc", "filename": "gcc/testsuite/gcc.dg/vect/section-anchors-vect-69.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-69.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 32\n+#if VECTOR_BITS > 128\n+#define NINTS (VECTOR_BITS / 32)\n+#else\n+#define NINTS 4\n+#endif\n+\n+#define N (NINTS * 8)\n \n struct s{\n   int m;\n@@ -18,16 +24,15 @@ struct s2{\n \n struct test1{\n   struct s a; /* array a.n is unaligned */\n-  int b;\n-  int c;\n+  int pad[NINTS - 2];\n   struct s e; /* array e.n is aligned */\n };\n \n struct test2{\n-  struct s2 a; /* array a.n is unaligned */\n+  struct s2 a;\n   int b;\n   int c;\n-  struct s2 e; /* array e.n is aligned */\n+  struct s2 e;\n };\n \n \n@@ -52,13 +57,13 @@ int main1 ()\n     }\n \n   /* 2. aligned */\n-  for (i = 3; i < N-1; i++)\n+  for (i = NINTS - 1; i < N - 1; i++)\n     {\n       tmp1[2].a.n[1][2][i] = 6;\n     }\n \n   /* check results:  */\n-  for (i = 3; i < N-1; i++)\n+  for (i = NINTS - 1; i < N - 1; i++)\n     {\n       if (tmp1[2].a.n[1][2][i] != 6)\n         abort ();\n@@ -84,18 +89,18 @@ int main1 ()\n     }\n \n   /* 4. unaligned */\n-  for (i = 0; i < N-4; i++)\n+  for (i = 0; i < N - NINTS; i++)\n     {\n-      for (j = 0; j < N-4; j++)\n+      for (j = 0; j < N - NINTS; j++)\n \t{\n           tmp2[2].e.n[1][i][j] = 8;\n \t}\n     }\n \n   /* check results:  */\n-  for (i = 0; i < N-4; i++)\n+  for (i = 0; i < N - NINTS; i++)\n     {\n-      for (j = 0; j < N-4; j++)\n+      for (j = 0; j < N - NINTS; j++)\n \t{\n           if (tmp2[2].e.n[1][i][j] != 8)\n \t    abort ();"}, {"sha": "32566cb5e1320de2ce9c83867c05902a24036de4", "filename": "gcc/testsuite/gcc.dg/vect/slp-19c.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19c.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,14 +3,27 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 32)\n+#else\n #define N 16\n+#endif\n \n int\n main1 ()\n {\n   unsigned int i;\n   unsigned int out[N*8];\n+#if N == 16\n   unsigned int in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+#else\n+  unsigned int in[N * 8];\n+  for (unsigned int i = 0; i < N * 8; ++i)\n+    {\n+      in[i] = i & 63;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+#endif\n   unsigned int ia[N*2], a0, a1, a2, a3;\n \n   /* The last stmt requires interleaving of not power of 2 size - not"}, {"sha": "e66728e1656fa1ea04e2a46d43284f067b4837e3", "filename": "gcc/testsuite/gcc.dg/vect/slp-28.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,19 +3,27 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 32 \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 4 / 16)\n+#else\n+#define N 32\n+#endif\n \n-unsigned short in[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n-unsigned short in2[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n-unsigned short in3[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n-unsigned short check[N] = {0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,20,21,22,23,25,26,27,28,30,31,32,33,35,36,37,38};\n-unsigned short check3[N] = {0,1,2,3,4,5,6,7,8,9,10,11,5,6,7,8,9,10,11,12,13,14,15,16,10,11,12,13,14,15,16,17};\n+unsigned short in[N] = {};\n+unsigned short in2[N] = {};\n+unsigned short in3[N] = {};\n \n int\n main1 ()\n {\n   int i;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      in[i] = in2[i] = in3[i] = i;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n   for (i = 0; i < N/4; i++)\n     {\n       in[i*4] = in[i*4] + 5;\n@@ -43,9 +51,9 @@ main1 ()\n     }\n \n   /* check results:  */\n-  for (i = 4; i < N; i++)\n+  for (i = 0; i < N; i++)\n     {\n-      if (in2[i] != check[i])\n+      if (in2[i] != (i % 4) + (i / 4) * 5)\n         abort ();\n     }\n   \n@@ -61,9 +69,9 @@ main1 ()\n     }\n \n   /* check results:  */\n-  for (i = 12; i < N; i++)\n+  for (i = 0; i < N; i++)\n     {\n-      if (in3[i] != check3[i])\n+      if (in3[i] != (i % 12) + (i / 12) * 5)\n         abort ();\n     }\n "}, {"sha": "ca832b0a182d445dfa945dae9a342c66b3a1d099", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-1.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-1.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -13,7 +13,11 @@\n #define M12 191\n #define M22 500\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 3 / 32 + 4)\n+#else\n #define N 16\n+#endif\n \n void foo (unsigned int *__restrict__ pInput, unsigned int *__restrict__ pOutput)\n {\n@@ -34,7 +38,6 @@ void foo (unsigned int *__restrict__ pInput, unsigned int *__restrict__ pOutput)\n int main (int argc, const char* argv[])\n {\n   unsigned int input[N], output[N], i;\n-  unsigned int check_results[N] = {1470, 395, 28271, 5958, 1655, 111653, 10446, 2915, 195035, 14934, 4175, 278417, 19422, 5435, 361799, 0};\n \n   check_vect ();\n \n@@ -45,6 +48,25 @@ int main (int argc, const char* argv[])\n       __asm__ volatile (\"\");\n     }\n \n+#if N == 16\n+  unsigned int check_results[N] = {1470, 395, 28271, 5958, 1655, 111653, 10446, 2915, 195035, 14934, 4175, 278417, 19422, 5435, 361799, 0};\n+#else\n+  volatile unsigned int check_results[N] = {};\n+\n+  for (unsigned int i = 0; i < N / 3; i++)\n+    {\n+      unsigned int a = input[i * 3];\n+      unsigned int b = input[i * 3 + 1];\n+      unsigned int c = input[i * 3 + 2];\n+\n+      check_results[i * 3] = M00 * a + M01 * b + M02 * c;\n+      check_results[i * 3 + 1] = M10 * a + M11 * b + M12 * c;\n+      check_results[i * 3 + 2] = M20 * a + M21 * b + M22 * c;\n+\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+#endif\n+\n   foo (input, output);\n \n   for (i = 0; i < N; i++)"}, {"sha": "8457e4f45d62d6d704145b1c4f62af14c1877762", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-4.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -34,7 +34,11 @@\n #define M34 7716\n #define M44 16\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 5 / 32)\n+#else\n #define N 20\n+#endif\n \n void foo (unsigned int *__restrict__ pInput, unsigned int *__restrict__ pOutput)\n {\n@@ -59,9 +63,6 @@ void foo (unsigned int *__restrict__ pInput, unsigned int *__restrict__ pOutput)\n int main (int argc, const char* argv[])\n {\n   unsigned int input[N], output[N], i;\n-  unsigned int check_results[N]\n-    = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n-    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619};\n \n   check_vect ();\n \n@@ -72,6 +73,34 @@ int main (int argc, const char* argv[])\n       asm volatile (\"\" ::: \"memory\");\n     }\n \n+#if N == 20\n+  unsigned int check_results[N]\n+    = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399,\n+    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619};\n+#else\n+  volatile unsigned int check_results[N];\n+\n+  for (i = 0; i < N / 5; i++)\n+    {\n+      unsigned int a = input[i * 5];\n+      unsigned int b = input[i * 5 + 1];\n+      unsigned int c = input[i * 5 + 2];\n+      unsigned int d = input[i * 5 + 3];\n+      unsigned int e = input[i * 5 + 4];\n+\n+      check_results[i * 5] = M00 * a + M01 * b + M02 * c + M03 * d + M04 * e;\n+      check_results[i * 5 + 1] = (M10 * a + M11 * b + M12 * c\n+\t\t\t\t  + M13 * d + M14 * e);\n+      check_results[i * 5 + 2] = (M20 * a + M21 * b + M22 * c\n+\t\t\t\t  + M23 * d + M24 * e);\n+      check_results[i * 5 + 3] = (M30 * a + M31 * b + M32 * c\n+\t\t\t\t  + M33 * d + M34 * e);\n+      check_results[i * 5 + 4] = (M40 * a + M41 * b + M42 * c\n+\t\t\t\t  + M43 * d + M44 * e);\n+      asm volatile (\"\");\n+    }\n+#endif\n+\n   foo (input, output);\n \n   for (i = 0; i < N; i++)"}, {"sha": "0d2bf14c642a32fe958961e79d3dbf3d6da2459e", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-5.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-5.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -18,7 +18,11 @@\n #define K01 4322\n #define K11 135\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 3 / 32 + 4)\n+#else\n #define N 16\n+#endif\n \n void foo (int *__restrict__ pInput, int *__restrict__ pOutput,\n           int *__restrict__ pInput2, int *__restrict__ pOutput2)\n@@ -46,9 +50,7 @@ void foo (int *__restrict__ pInput, int *__restrict__ pOutput,\n int main (int argc, const char* argv[])\n {\n   int input[N], output[N], i;\n-  int check_results[N] = {1470, 395, 28271, 5958, 1655, 111653, 10446, 2915, 195035, 14934, 4175, 278417, 19422, 5435, 361799, 0};\n   int input2[N], output2[N];\n-  int check_results2[N] = {4322, 135, 13776, 629, 23230, 1123, 32684, 1617, 42138, 2111, 0, 0, 0, 0, 0, 0};\n \n   check_vect ();\n \n@@ -63,6 +65,35 @@ int main (int argc, const char* argv[])\n       __asm__ volatile (\"\");\n     }\n \n+#if N == 16\n+  int check_results[N] = { 1470, 395, 28271, 5958, 1655, 111653, 10446, 2915,\n+\t\t\t   195035, 14934, 4175, 278417, 19422, 5435, 361799,\n+\t\t\t   0 };\n+  int check_results2[N] = { 4322, 135, 13776, 629, 23230, 1123, 32684, 1617,\n+\t\t\t    42138, 2111, 0, 0, 0, 0, 0, 0 };\n+#else\n+  volatile int check_results[N] = {};\n+  volatile int check_results2[N] = {};\n+\n+  for (int i = 0; i < N / 3; i++)\n+    {\n+      int a = input[i * 3];\n+      int b = input[i * 3 + 1];\n+      int c = input[i * 3 + 2];\n+      int d = input2[i * 2];\n+      int e = input2[i * 2 + 1];\n+\n+      check_results[i * 3] = M00 * a + M01 * b + M02 * c;\n+      check_results[i * 3 + 1] = M10 * a + M11 * b + M12 * c;\n+      check_results[i * 3 + 2] = M20 * a + M21 * b + M22 * c;\n+\n+      check_results2[i * 2] = K00 * d + K01 * e;\n+      check_results2[i * 2 + 1] = K10 * d + K11 * e;\n+\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+#endif\n+\n   foo (input, output, input2, output2);\n \n   for (i = 0; i < N; i++)"}, {"sha": "a69740914736cce1f92a48496aa5619cac16f834", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-6.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -18,7 +18,11 @@\n #define K01 4322\n #define K11 135\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 3 / 32 + 4)\n+#else\n #define N 16\n+#endif\n \n void foo (int *__restrict__ pInput, int *__restrict__ pOutput,\n           int *__restrict__ pInput2, int *__restrict__ pOutput2)\n@@ -47,9 +51,7 @@ void foo (int *__restrict__ pInput, int *__restrict__ pOutput,\n int main (int argc, const char* argv[])\n {\n   int input[N], output[N], i;\n-  int check_results[N] = {1470, 395, 28271, 5958, 1655, 111653, 10446, 2915, 195035, 14934, 4175, 278417, 19422, 5435, 361799, 0};\n   int input2[N], output2[N];\n-  int check_results2[N] = {0, 112, 810, 336, 1620, 560, 2430, 784, 3240, 1008, 0, 0, 0, 0, 0, 0};\n \n   check_vect ();\n \n@@ -62,6 +64,35 @@ int main (int argc, const char* argv[])\n       __asm__ volatile (\"\");\n     }\n \n+#if N == 16\n+  int check_results[N] = { 1470, 395, 28271, 5958, 1655, 111653, 10446, 2915,\n+\t\t\t   195035, 14934, 4175, 278417, 19422, 5435, 361799,\n+\t\t\t   0 };\n+  int check_results2[N] = { 0, 112, 810, 336, 1620, 560, 2430, 784, 3240, 1008,\n+\t\t\t    0, 0, 0, 0, 0, 0 };\n+#else\n+  volatile int check_results[N] = {};\n+  volatile int check_results2[N] = {};\n+\n+  for (int i = 0; i < N / 3; i++)\n+    {\n+      int a = input[i * 3];\n+      int b = input[i * 3 + 1];\n+      int c = input[i * 3 + 2];\n+      int d = input2[i * 2];\n+      int e = input2[i * 2 + 1];\n+\n+      check_results[i * 3] = M00 * a + M01 * b + M02 * c;\n+      check_results[i * 3 + 1] = M10 * a + M11 * b + M12 * c;\n+      check_results[i * 3 + 2] = M20 * a + M21 * b + M22 * c;\n+\n+      check_results2[i * 2] = K00 * d;\n+      check_results2[i * 2 + 1] = K10 * e;\n+\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+#endif\n+\n   foo (input, output, input2, output2);\n \n   for (i = 0; i < N; i++)"}, {"sha": "928ebfe9a7147b3f7f3eafd8b9fcd3f04ab740c8", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-7.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -18,7 +18,11 @@\n #define K01 4322\n #define K11 135\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 3 / 32 + 4)\n+#else\n #define N 16\n+#endif\n \n /* SLP with load permutation and loop-based vectorization.  */\n void foo (int *__restrict__ pInput, int *__restrict__ pOutput,\n@@ -45,9 +49,7 @@ void foo (int *__restrict__ pInput, int *__restrict__ pOutput,\n int main (int argc, const char* argv[])\n {\n   int input[N], output[N], i;\n-  int check_results[N] = {1470, 395, 28271, 5958, 1655, 111653, 10446, 2915, 195035, 14934, 4175, 278417, 19422, 5435, 361799, 0};\n   int input2[N], output2[N];\n-  int check_results2[N] = {0, 405, 810, 1215, 1620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n   check_vect ();\n \n@@ -60,6 +62,30 @@ int main (int argc, const char* argv[])\n       asm volatile (\"\" ::: \"memory\");\n     }\n \n+#if N == 16\n+  int check_results[N] = {1470, 395, 28271, 5958, 1655, 111653, 10446, 2915, 195035, 14934, 4175, 278417, 19422, 5435, 361799, 0};\n+  int check_results2[N] = {0, 405, 810, 1215, 1620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+#else\n+  volatile int check_results[N] = {};\n+  volatile int check_results2[N] = {};\n+\n+  for (int i = 0; i < N / 3; i++)\n+    {\n+      int a = input[i * 3];\n+      int b = input[i * 3 + 1];\n+      int c = input[i * 3 + 2];\n+      int d = input2[i];\n+\n+      check_results[i * 3] = M00 * a + M01 * b + M02 * c;\n+      check_results[i * 3 + 1] = M10 * a + M11 * b + M12 * c;\n+      check_results[i * 3 + 2] = M20 * a + M21 * b + M22 * c;\n+\n+      check_results2[i] = K00 * d;\n+\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+#endif\n+\n   foo (input, output, input2, output2);\n \n   for (i = 0; i < N; i++)"}, {"sha": "915bba2b44c830cb18acbd630dc14a0c8cf84bd9", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-8.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,12 +3,17 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 512\n+#define N (VECTOR_BITS * 6 / 16)\n+#else\n #define N 200\n+#endif\n \n void __attribute__((noinline))\n foo (unsigned char *__restrict__ pInput, unsigned char *__restrict__ pOutput)\n {\n-  unsigned char i, a, b, c;\n+  unsigned char a, b, c;\n+  unsigned int i;\n \n   for (i = 0; i < N / 3; i++)\n     {\n@@ -24,8 +29,9 @@ foo (unsigned char *__restrict__ pInput, unsigned char *__restrict__ pOutput)\n \n int main (int argc, const char* argv[])\n {\n-  unsigned char input[N], output[N], i;\n+  unsigned char input[N], output[N];\n   unsigned char check_results[N];\n+  unsigned int i;\n \n   check_vect ();\n "}, {"sha": "4be200d713b5b9618808910ef32b513a88653cdc", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-9.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,7 +3,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 512\n+#define N (VECTOR_BITS * 6 / 16)\n+#else\n #define N 200\n+#endif\n \n void __attribute__((noinline))\n foo (unsigned short *__restrict__ pInput, unsigned short *__restrict__ pOutput)"}, {"sha": "88135376ea4b7dda710868505ad6b36de0297f9c", "filename": "gcc/testsuite/gcc.dg/vect/tree-vect.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -75,3 +75,5 @@ check_vect (void)\n #endif\n   signal (SIGILL, SIG_DFL);\n }\n+\n+#define VECTOR_BITS 128"}, {"sha": "4a9e1574eb0cd67f25fc95da6b59ee934ed30bd3", "filename": "gcc/testsuite/gcc.dg/vect/vect-103.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-103.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-103.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-103.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 9\n+#if VECTOR_BITS > 256\n+#define NINTS (VECTOR_BITS / 32)\n+#else\n+#define NINTS 8\n+#endif\n+\n+#define N (NINTS + 1)\n \n struct extraction\n {\n@@ -14,7 +20,6 @@ struct extraction\n \n static int a[N] = {1,2,3,4,5,6,7,8,9};\n static int b[N] = {17,24,7,0,2,3,4,31,82};\n-static int c[N] = {9,17,24,7,0,2,3,4,31};\n \n __attribute__ ((noinline))\n int main1 (int x, int y) {\n@@ -31,16 +36,15 @@ int main1 (int x, int y) {\n \n   /* Vectorizable: distance > VF.  */\n   for (i = 0; i < N; i++)\n-    {\n-       *((int *)p + x + i) = *((int *)p + x + i + 8);\n-    }\n+    *((int *)p + x + i) = *((int *)p + x + i + NINTS);\n \n   /* check results: */\n-  for (i = 0; i < N; i++)\n-    {\n-       if (p->a[i] != c[i])\n-         abort();\n-    }\n+  if (p->a[0] != a[N - 1])\n+    abort ();\n+  for (i = 1; i < N; i++)\n+    if (p->a[i] != b[i - 1])\n+      abort ();\n+\n   return 0;\n }\n "}, {"sha": "96c8ff52b8bf19bc34296dc60d1ef2f7cba4cdc0", "filename": "gcc/testsuite/gcc.dg/vect/vect-32.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,8 +3,12 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS / 8)\n+#else\n #define N 16\n- \n+#endif\n+\n __attribute__ ((noinline))\n int main1 ()\n {  "}, {"sha": "3dcae709458772db2d9048176a466c53f030c594", "filename": "gcc/testsuite/gcc.dg/vect/vect-67.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,13 +3,19 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#if VECTOR_BITS > 256\n+#define NINTS (VECTOR_BITS / 32)\n+#else\n+#define NINTS 8\n+#endif\n+\n+#define N (NINTS * 2)\n \n __attribute__ ((noinline))\n int main1 (int a, int b)\n {\n   int i, j;\n-  int ia[N][4][N+8];\n+  int ia[N][4][N + NINTS];\n \n   /* Multidimensional array. Aligned. The \"inner\" dimensions\n      are invariant in the inner loop. Store. \n@@ -18,7 +24,7 @@ int main1 (int a, int b)\n     {\n       for (j = 0; j < N; j++)\n         {\n-           ia[i][1][j+8] = (a == b);\n+           ia[i][1][j + NINTS] = (a == b);\n         }\n     }\n \n@@ -27,7 +33,7 @@ int main1 (int a, int b)\n     {\n       for (j = 0; j < N; j++)\n         {\n-           if (ia[i][1][j+8] != (a == b))\n+           if (ia[i][1][j + NINTS] != (a == b))\n               abort();\n         }\n     }"}, {"sha": "793dbfb748160ba709dd835dc253cb436f7aada1", "filename": "gcc/testsuite/gcc.dg/vect/vect-70.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-70.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,11 +4,24 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 24\n+#if VECTOR_BITS > 128\n+#define NINTS (VECTOR_BITS / 32)\n+#else\n+#define NINTS 4\n+#endif\n+\n+#define N (NINTS * 6)\n+\n+/* Keep execution time down.  */\n+#if N <= 24\n+#define OUTERN N\n+#else\n+#define OUTERN NINTS\n+#endif\n \n struct s{\n   int m;\n-  int n[N/6][N/6][N];\n+  int n[4][4][N];\n };\n \n struct test1{\n@@ -18,36 +31,43 @@ struct test1{\n   struct s e[N]; /* array e.n is aligned */\n };\n \n+/* Avoid big local temporaries.  */\n+#if NINTS > 8\n+struct test1 tmp1;\n+#endif\n+\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i,j;\n+#if NINTS <= 8\n   struct test1 tmp1;\n+#endif\n \n-  for (i = 0; i < N; i++)\n-    for (j = 3; j < N-3; j++)\n+  for (i = 0; i < OUTERN; i++)\n+    for (j = NINTS - 1; j < N - NINTS + 1; j++)\n       {\n         tmp1.e[i].n[1][2][j] = 8;\n       }\n \n   /* check results:  */\n-  for (i = 0; i < N; i++)\n-    for (j = 3; j < N-3; j++)\n+  for (i = 0; i < OUTERN; i++)\n+    for (j = NINTS - 1; j < N - NINTS + 1; j++)\n     {\n       if (tmp1.e[i].n[1][2][j] != 8)\n           abort ();\n     }\n   \n   /* not consecutive, will use strided stores */\n-  for (i = 0; i < N; i++)\n-    for (j = 3; j < N-3; j++)\n+  for (i = 0; i < OUTERN; i++)\n+    for (j = NINTS - 1; j < N - NINTS + 1; j++)\n       { \n         tmp1.e[j].n[1][2][j] = 8;\n       }\n   \n   /* check results:  */\n-  for (i = 0; i < N; i++)\n-    for (j = 3; j < N-3; j++)\n+  for (i = 0; i < OUTERN; i++)\n+    for (j = NINTS - 1; j < N - NINTS + 1; j++)\n     {\n       if (tmp1.e[j].n[1][2][j] != 8)\n           abort ();"}, {"sha": "b9b4a55d6908c119fe56a4baefdcc05132fb275e", "filename": "gcc/testsuite/gcc.dg/vect/vect-75.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,8 +3,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 32)\n+#define OFF (VECTOR_BITS / 32)\n+#else\n #define N 8\n #define OFF 8\n+#endif\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is"}, {"sha": "fcf32d9289452e4e2745f53e4e9dbffa34bf486e", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-alignchecks.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,8 +3,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 32)\n+#define OFF (VECTOR_BITS / 32)\n+#else\n #define N 8\n #define OFF 8\n+#endif\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is"}, {"sha": "93e7208961f55633e9c0ccbb8b6bc7df367442fd", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-alignchecks.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,8 +3,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 32)\n+#define OFF (VECTOR_BITS / 32)\n+#else\n #define N 8\n #define OFF 8\n+#endif\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is"}, {"sha": "dd0405508c09928c1097b2e970ba486b3bbe38d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-89.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,7 +3,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 256\n+#define N (VECTOR_BITS * 2 / 32)\n+#else\n #define N 16\n+#endif\n \n struct tmp_struct\n {"}, {"sha": "9430da3290aa0d1822075c1ffb7cab2afd195dda", "filename": "gcc/testsuite/gcc.dg/vect/vect-91.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -7,7 +7,14 @@\n \n #define N 256\n \n-extern int a[N+20];\n+/* Pick a value greater than the vector length.  */\n+#if VECTOR_BITS > 128\n+#define OFF (VECTOR_BITS * 5 / 32)\n+#else\n+#define OFF 20\n+#endif\n+\n+extern int a[N + OFF];\n \n /* The alignment of 'pa' is unknown. \n    Yet we do know that both the read access and write access have \n@@ -52,7 +59,7 @@ main3 ()\n \n   for (i = 0; i < N; i++)\n     {\n-      a[i] = a[i+20];\n+      a[i] = a[i + OFF];\n     }\n \n   return 0;"}, {"sha": "ba108f78e9136fcca4ee7bd7e2926e20c57a1c94", "filename": "gcc/testsuite/gcc.dg/vect/vect-92.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-92.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -17,12 +17,18 @@ float pc[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0,1,2,3,4,5,\n    can use this information (generate prolog and epilog loops\n    with known number of iterations, and only if needed).  */\n \n+#if VECTOR_BITS > 128\n+#define NITER (VECTOR_BITS * 3 / 32)\n+#else\n+#define NITER 12\n+#endif\n+\n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i;\n \n-  for (i = 0; i < 10; i++)\n+  for (i = 0; i < NITER - 2; i++)\n     {\n       pa[i+1] = pb[i+1] * pc[i+1];\n     }\n@@ -42,7 +48,7 @@ main2 ()\n {\n   int i;\n \n-  for (i = 0; i < 12; i++)\n+  for (i = 0; i < NITER; i++)\n     {\n       pa[i+1] = pb[i+1] * pc[i+1];\n     }"}, {"sha": "397c2ed05aaee71177d3efabcf60bcd6efd69571", "filename": "gcc/testsuite/gcc.dg/vect/vect-93.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,33 +4,38 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 3001\n+#define N1 3001\n \n+#if VECTOR_BITS > 256\n+#define N2 (VECTOR_BITS / 32 + 2)\n+#else\n+#define N2 10\n+#endif\n \n __attribute__ ((noinline)) int\n main1 (float *pa)\n {\n   int i;\n \n-  for (i = 0; i < 3001; i++)\n+  for (i = 0; i < N1; i++)\n     {\n       pa[i] = 2.0;\n     }\n \n   /* check results:  */\n-  for (i = 0; i < 3001; i++)\n+  for (i = 0; i < N1; i++)\n     {\n       if (pa[i] != 2.0)\n \tabort ();\n     }\n \n-  for (i = 1; i <= 10; i++)\n+  for (i = 1; i <= N2; i++)\n     {\n       pa[i] = 3.0;\n     }\n \n   /* check results:  */\n-  for (i = 1; i <= 10; i++)\n+  for (i = 1; i <= N2; i++)\n     {\n       if (pa[i] != 3.0)\n \tabort ();\n@@ -42,13 +47,14 @@ main1 (float *pa)\n int main (void)\n {\n   int i;\n-  float a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n-  float b[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  float a[N1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  float b[N1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n   check_vect ();\n \n   /* from bzip2: */\n-  for (i=0; i<N; i++) b[i] = i;\n+  for (i = 0; i < N1; i++)\n+    b[i] = i;\n   a[0] = 0;\n   for (i = 1; i <= 256; i++) a[i] = b[i-1];\n "}, {"sha": "16efb1744b57f0999bd3c90c35044ffb97b7fc4e", "filename": "gcc/testsuite/gcc.dg/vect/vect-96.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 256\n+#define N (VECTOR_BITS * 2 / 32)\n+#else\n #define N 16\n+#endif\n \n struct tmp\n {"}, {"sha": "34685c839b9039b20356fe36302795f61da59b94", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-1.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,14 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 32\n+#if VECTOR_BITS > 128\n+#define NSHORTS (VECTOR_BITS / 16)\n+#else\n+#define NSHORTS 8\n+#endif\n+\n+#define NINTS (NSHORTS / 2)\n+#define N (NSHORTS * 4)\n \n short sa[N];\n short sb[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n@@ -27,14 +34,14 @@ __attribute__ ((noinline)) int main1 (int n)\n      copmutations. Vectorizable.  */\n   for (i = 0; i < n; i++)\n     {\n-      sa[i+7] = sb[i];\n-      ia[i+3] = ib[i+1];\n+      sa[i + NSHORTS - 1] = sb[i];\n+      ia[i + NINTS - 1] = ib[i + 1];\n     }\n \n   /* check results:  */\n   for (i = 0; i < n; i++)\n     {\n-      if (sa[i+7] != sb[i] || ia[i+3] != ib[i+1])\n+      if (sa[i + NSHORTS - 1] != sb[i] || ia[i + NINTS - 1] != ib[i + 1])\n \tabort ();\n     }\n \n@@ -57,14 +64,14 @@ __attribute__ ((noinline)) int main2 (int n)\n      copmutations.  */\n   for (i = 0; i < n; i++)\n     {\n-      ia[i+3] = ib[i];\n-      sa[i+3] = sb[i+1];\n+      ia[i + NINTS - 1] = ib[i];\n+      sa[i + NINTS - 1] = sb[i + 1];\n     }\n \n   /* check results:  */\n   for (i = 0; i < n; i++)\n     {\n-      if (sa[i+3] != sb[i+1] || ia[i+3] != ib[i])\n+      if (sa[i + NINTS - 1] != sb[i + 1] || ia[i + NINTS - 1] != ib[i])\n         abort ();\n     }\n \n@@ -75,8 +82,8 @@ int main (void)\n { \n   check_vect ();\n   \n-  main1 (N-7);\n-  main2 (N-3);\n+  main1 (N - NSHORTS + 1);\n+  main2 (N - NINTS + 1);\n \n   return 0;\n }"}, {"sha": "0acff364911bf722d76fde755cd2be24885212e4", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 8)\n+#else\n #define N 32\n+#endif\n \n int ib[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = \n \t{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};"}, {"sha": "5e8ad8be3b87ec474947e683dd34c26b441ab2c3", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-6.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 8)\n+#else\n #define N 32\n+#endif\n \n unsigned int ic[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = \n \t{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};"}, {"sha": "3140829c73d1704923b522dab35007fa5f1b8c18", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 8 / 16)\n+#else\n #define N 64\n+#endif\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void"}, {"sha": "e419f203ecadc29f43a9a10aa2c3378522dec227", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3-big-array.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 128\n+#define N VECTOR_BITS\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void\n@@ -32,7 +32,9 @@ foo (unsigned char *src, unsigned char *dst)\n       const int g = *s++;\n       const int r = *s++;\n       const int a = *s++;\n-      if (*d != ((b>>3) | ((g&0xFFC)<<3) | ((r+0xF8)>>8) | (a<<9)))\n+      unsigned short expected\n+\t= ((b>>3) | ((g&0xFFC)<<3) | ((r+0xF8)>>8) | (a<<9));\n+      if (*d != expected)\n         abort ();\n       d++;\n     }"}, {"sha": "9dd1ea553ea753edcc196bedb541a7daec5ba93c", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-4.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,7 +4,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 8 / 16)\n+#else\n #define N 64\n+#endif\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) int"}, {"sha": "e6470fc6e1d209823d6b1c6bfa1d295e9c5d3bc4", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-3.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-3.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,12 +4,24 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define NINTS (VECTOR_BITS / 32)\n+#define EXTRA (NINTS * 2)\n+#else\n+#define NINTS 4\n+#define EXTRA 10\n+#endif\n+\n #define N 128\n-#define RES 21640 \n \n-int ib[N+10];\n-int ia[N+10];\n-int ic[N+10];\n+#define RES_A (N * N / 4)\n+#define RES_B (N * (N + 1) / 2 + (NINTS + 3) * (N + 1))\n+#define RES_C (N * (N + 1) / 2 + (N + 1))\n+#define RES (RES_A + RES_B + RES_C)\n+\n+int ib[N + EXTRA];\n+int ia[N + EXTRA];\n+int ic[N + EXTRA];\n \n __attribute__ ((noinline))\n int main1 ()\n@@ -20,8 +32,8 @@ int main1 ()\n   for (i = 0; i <= N; i++)\n     {\n       suma += ia[i];\n-      sumb += ib[i+5];\n-      sumc += ic[i+1];\n+      sumb += ib[i + NINTS + 1];\n+      sumc += ic[i + 1];\n     }\n \n   /* check results:  */\n@@ -37,7 +49,7 @@ int main (void)\n \n   check_vect ();\n \n-  for (i = 0; i < N+10; i++)\n+  for (i = 0; i < N + EXTRA; i++)\n     {\n       asm volatile (\"\" : \"+r\" (i));\n       ib[i] = i;"}, {"sha": "aad145161b70b7d70fbc3d4621165b8cdd7848e7", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-or_1.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_1.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,28 +4,41 @@\n \n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS / 8)\n+#else\n+#define N 16\n+#endif\n+\n extern void abort(void);\n \n-unsigned char in[16] __attribute__((__aligned__(16)));\n+unsigned char in[N] __attribute__((__aligned__(16)));\n \n int\n main (unsigned char argc, char **argv)\n {\n   unsigned char i = 0;\n   unsigned char sum = 1;\n+  unsigned char expected = 1;\n \n   check_vect ();\n \n-  for (i = 0; i < 16; i++)\n+  for (i = 0; i < N; i++)\n     in[i] = (i + i + 1) & 0xfd;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      expected |= in[i];\n+      asm volatile (\"\");\n+    }\n+\n   /* Prevent constant propagation of the entire loop below.  */\n   asm volatile (\"\" : : : \"memory\");\n \n-  for (i = 0; i < 16; i++)\n+  for (i = 0; i < N; i++)\n     sum |= in[i];\n \n-  if (sum != 29)\n+  if (sum != expected)\n     {\n       __builtin_printf(\"Failed %d\\n\", sum);\n       abort();"}, {"sha": "ff3dfb212ad19915a74e0c5f02344909a09d0e25", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-or_2.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-or_2.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -4,24 +4,37 @@\n \n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS / 8)\n+#else\n+#define N 16\n+#endif\n+\n extern void abort(void);\n \n int\n main (unsigned char argc, char **argv)\n {\n-  unsigned char in[16] __attribute__((aligned(16)));\n+  unsigned char in[N] __attribute__((aligned(16)));\n   unsigned char i = 0;\n   unsigned char sum = 1;\n+  unsigned char expected = 1;\n \n   check_vect ();\n \n-  for (i = 0; i < 16; i++)\n+  for (i = 0; i < N; i++)\n     in[i] = (i + i + 1) & 0xfd;\n \n-  for (i = 0; i < 16; i++)\n+  for (i = 0; i < N; i++)\n+    {\n+      expected |= in[i];\n+      asm volatile (\"\");\n+    }\n+\n+  for (i = 0; i < N; i++)\n     sum |= in[i];\n \n-  if (sum != 29)\n+  if (sum != expected)\n     {\n       __builtin_printf(\"Failed %d\\n\", sum);\n       abort();"}, {"sha": "b06b234072b84b04182d52f1470f6568c71598dd", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1a.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1a.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,7 +3,12 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 16)\n+#else\n #define N 16\n+#endif\n+\n unsigned short udata_sh[N] =\n   { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n #define SUM 210"}, {"sha": "96f8b740ced1444436f5069cd647eb0c264113a0", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1b.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,7 +3,12 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 16)\n+#else\n #define N 16\n+#endif\n+\n unsigned char udata_ch[N] =\n   { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n #define SUM 210"}, {"sha": "a98edd3045ad61da4c501f258f9af7a05ebdb671", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2a.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a826c5019e1439181a822c2b5079fec22654e37b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2a.c?ref=a826c5019e1439181a822c2b5079fec22654e37b", "patch": "@@ -3,7 +3,12 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n+#if VECTOR_BITS > 128\n+#define N (VECTOR_BITS * 2 / 16)\n+#else\n #define N 16\n+#endif\n+\n signed short data_sh[N] =\n   { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n #define SUM 210"}]}