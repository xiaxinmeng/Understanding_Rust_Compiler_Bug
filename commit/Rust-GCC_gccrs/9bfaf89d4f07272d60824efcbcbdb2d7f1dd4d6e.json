{"sha": "9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmYWY4OWQ0ZjA3MjcyZDYwODI0ZWZjYmNiZGIyZDdmMWRkNGQ2ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-03-11T21:12:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-11T21:12:33Z"}, "message": "re PR target/39137 (-mpreferred-stack-boundary=2 causes lots of dynamic realign)\n\n\tPR target/39137\n\t* cfgexpand.c (get_decl_align_unit): Use LOCAL_DECL_ALIGNMENT\n\tmacro.\n\t* defaults.h (LOCAL_DECL_ALIGNMENT): Define if not yet defined.\n\t* config/i386/i386.h (LOCAL_DECL_ALIGNMENT): Define.\n\t* config/i386/i386.c (ix86_local_alignment): For\n\t-m32 -mpreferred-stack-boundary=2 use 32-bit alignment for\n\tlong long variables on the stack to avoid dynamic realignment.\n\tAllow the first argument to be a decl rather than type.\n\t* doc/tm.texi (LOCAL_DECL_ALIGNMENT): Document.\n\n\t* gcc.target/i386/stackalign/longlong-1.c: New test.\n\t* gcc.target/i386/stackalign/longlong-2.c: New test.\n\nFrom-SVN: r144792", "tree": {"sha": "aac00dcd74a4bb14c38abd88b8fbe9ad9b4c2d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aac00dcd74a4bb14c38abd88b8fbe9ad9b4c2d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a9ceef2cc5783e9920cb48e8eb68c21c9244a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9ceef2cc5783e9920cb48e8eb68c21c9244a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9ceef2cc5783e9920cb48e8eb68c21c9244a29"}], "stats": {"total": 134, "additions": 127, "deletions": 7}, "files": [{"sha": "c4cccf25b44ccc92c2f4da2901b9c6fc4c390ea1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -1,3 +1,16 @@\n+2009-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39137\n+\t* cfgexpand.c (get_decl_align_unit): Use LOCAL_DECL_ALIGNMENT\n+\tmacro.\n+\t* defaults.h (LOCAL_DECL_ALIGNMENT): Define if not yet defined.\n+\t* config/i386/i386.h (LOCAL_DECL_ALIGNMENT): Define.\n+\t* config/i386/i386.c (ix86_local_alignment): For\n+\t-m32 -mpreferred-stack-boundary=2 use 32-bit alignment for\n+\tlong long variables on the stack to avoid dynamic realignment.\n+\tAllow the first argument to be a decl rather than type.\n+\t* doc/tm.texi (LOCAL_DECL_ALIGNMENT): Document.\n+\n 2009-03-11  Nick Clifton  <nickc@redhat.com>\n \n \tPR target/5362"}, {"sha": "4bfdc5fed74aaa3815e66cbf7ff2b33b33cd794d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -488,8 +488,7 @@ get_decl_align_unit (tree decl)\n {\n   unsigned int align;\n \n-  align = DECL_ALIGN (decl);\n-  align = LOCAL_ALIGNMENT (TREE_TYPE (decl), align);\n+  align = LOCAL_DECL_ALIGNMENT (decl);\n \n   if (align > MAX_SUPPORTED_STACK_ALIGNMENT)\n     align = MAX_SUPPORTED_STACK_ALIGNMENT;"}, {"sha": "9a34912c313b3a3cb78fdee2bc6c314956c0bde8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -19347,15 +19347,39 @@ ix86_data_alignment (tree type, int align)\n   return align;\n }\n \n-/* Compute the alignment for a local variable or a stack slot.  TYPE is\n-   the data type, MODE is the widest mode available and ALIGN is the\n-   alignment that the object would ordinarily have.  The value of this\n-   macro is used instead of that alignment to align the object.  */\n+/* Compute the alignment for a local variable or a stack slot.  EXP is\n+   the data type or decl itself, MODE is the widest mode available and\n+   ALIGN is the alignment that the object would ordinarily have.  The\n+   value of this macro is used instead of that alignment to align the\n+   object.  */\n \n unsigned int\n-ix86_local_alignment (tree type, enum machine_mode mode,\n+ix86_local_alignment (tree exp, enum machine_mode mode,\n \t\t      unsigned int align)\n {\n+  tree type, decl;\n+\n+  if (exp && DECL_P (exp))\n+    {\n+      type = TREE_TYPE (exp);\n+      decl = exp;\n+    }\n+  else\n+    {\n+      type = exp;\n+      decl = NULL;\n+    }\n+\n+  /* Don't do dynamic stack realignment for long long objects with\n+     -mpreferred-stack-boundary=2.  */\n+  if (!TARGET_64BIT\n+      && align == 64\n+      && ix86_preferred_stack_boundary < 64\n+      && (mode == DImode || (type && TYPE_MODE (type) == DImode))\n+      && (!type || !TYPE_USER_ALIGN (type))\n+      && (!decl || !DECL_USER_ALIGN (decl)))\n+    align = 32;\n+\n   /* If TYPE is NULL, we are allocating a stack slot for caller-save\n      register in MODE.  We will return the largest alignment of XF\n      and DF.  */"}, {"sha": "8035e84a2f82d67e68e10a6be9031ba6d606677a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -791,6 +791,19 @@ enum target_cpu_default\n #define STACK_SLOT_ALIGNMENT(TYPE, MODE, ALIGN) \\\n   ix86_local_alignment ((TYPE), (MODE), (ALIGN))\n \n+/* If defined, a C expression to compute the alignment for a local\n+   variable DECL.\n+\n+   If this macro is not defined, then\n+   LOCAL_ALIGNMENT (TREE_TYPE (DECL), DECL_ALIGN (DECL)) will be used.\n+\n+   One use of this macro is to increase alignment of medium-size\n+   data to make it all fit in fewer cache lines.  */\n+\n+#define LOCAL_DECL_ALIGNMENT(DECL) \\\n+  ix86_local_alignment ((DECL), VOIDmode, DECL_ALIGN (DECL))\n+\n+\n /* If defined, a C expression that gives the alignment boundary, in\n    bits, of an argument with the specified mode and type.  If it is\n    not defined, `PARM_BOUNDARY' is used for all arguments.  */"}, {"sha": "217c0d94a56c43154f90ffe03a0b46724ac756df", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -944,6 +944,11 @@ along with GCC; see the file COPYING3.  If not see\n   ((TYPE) ? LOCAL_ALIGNMENT ((TYPE), (ALIGN)) : (ALIGN))\n #endif\n \n+#ifndef LOCAL_DECL_ALIGNMENT\n+#define LOCAL_DECL_ALIGNMENT(DECL) \\\n+  LOCAL_ALIGNMENT (TREE_TYPE (DECL), DECL_ALIGN (DECL))\n+#endif\n+\n /* Alignment value for attribute ((aligned)).  */\n #ifndef ATTRIBUTE_ALIGNED_VALUE\n #define ATTRIBUTE_ALIGNED_VALUE BIGGEST_ALIGNMENT"}, {"sha": "f4680b69391b4e5c6bea9bd5033fcfad585ffdb1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -1215,6 +1215,18 @@ This macro is to set alignment of stack slot to the maximum alignment\n of all possible modes which the slot may have.\n @end defmac\n \n+@defmac LOCAL_DECL_ALIGNMENT (@var{decl})\n+If defined, a C expression to compute the alignment for a local\n+variable @var{decl}.\n+\n+If this macro is not defined, then\n+@code{LOCAL_ALIGNMENT (TREE_TYPE (@var{decl}), DECL_ALIGN (@var{decl}))}\n+is used.\n+\n+One use of this macro is to increase alignment of medium-size data to\n+make it all fit in fewer cache lines.\n+@end defmac\n+\n @defmac EMPTY_FIELD_BOUNDARY\n Alignment in bits to be given to a structure bit-field that follows an\n empty field such as @code{int : 0;}."}, {"sha": "f8a7b2dc8c3bfe760fc57c994393e0c8f8a20e8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -1,3 +1,9 @@\n+2009-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39137\n+\t* gcc.target/i386/stackalign/longlong-1.c: New test.\n+\t* gcc.target/i386/stackalign/longlong-2.c: New test.\n+\n 2009-03-11  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* g++.old-deja/g++.jason/thunk2.C: Skip on SPU."}, {"sha": "225d0c5e55855b9630706ca3078ca2efa379fee2", "filename": "gcc/testsuite/gcc.target/i386/stackalign/longlong-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Flonglong-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Flonglong-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Flonglong-1.c?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/39137 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mpreferred-stack-boundary=2\" } */\n+/* Make sure dynamic stack realignment isn't performed just because there\n+   are long long variables.  */\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]?\\[^\\\\n\\]*-8,\\[^\\\\n\\]*sp\" } } */\n+\n+void fn (void *);\n+\n+void f1 (void)\n+{\n+  unsigned long long a;\n+  fn (&a);\n+}"}, {"sha": "027d2ad836aa6e70819533f4511a6fd2de64f0c5", "filename": "gcc/testsuite/gcc.target/i386/stackalign/longlong-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Flonglong-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Flonglong-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Flonglong-2.c?ref=9bfaf89d4f07272d60824efcbcbdb2d7f1dd4d6e", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mpreferred-stack-boundary=2\" } */\n+/* { dg-final { scan-assembler-times \"and\\[lq\\]?\\[^\\\\n\\]*-8,\\[^\\\\n\\]*sp\" 2 } } */ \n+/* { dg-final { scan-assembler-times \"and\\[lq\\]?\\[^\\\\n\\]*-16,\\[^\\\\n\\]*sp\" 2 } } */ \n+\n+void fn (void *);\n+\n+void f2 (void)\n+{\n+  unsigned long long a __attribute__((aligned (8)));\n+  fn (&a);\n+}\n+\n+void f3 (void)\n+{\n+  typedef unsigned long long L __attribute__((aligned (8)));\n+  L a;\n+  fn (&a);\n+}\n+\n+void f4 (void)\n+{\n+  unsigned long long a __attribute__((aligned (16)));\n+  fn (&a);\n+}\n+\n+void f5 (void)\n+{\n+  typedef unsigned long long L __attribute__((aligned (16)));\n+  L a;\n+  fn (&a);\n+}"}]}