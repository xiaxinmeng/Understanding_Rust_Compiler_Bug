{"sha": "00edcfbe01b2bd34ff997984a6e73bcc184c727c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlZGNmYmUwMWIyYmQzNGZmOTk3OTg0YTZlNzNiY2MxODRjNzI3Yw==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2013-07-23T12:29:51Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2013-07-23T12:29:51Z"}, "message": "[AArch64, ILP32] 5/6 Pad pointer-typed stack argument downward in ILP32.\n\ngcc/\n\n\t* config/aarch64/aarch64.c (aarch64_pad_arg_upward): In big-endian,\n\tpad pointer-typed argument downward.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/test-ptr-arg-on-stack-1.c: New test.\n\nFrom-SVN: r201168", "tree": {"sha": "fa1de50320142b4c6304113e829f41e14e3dbee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa1de50320142b4c6304113e829f41e14e3dbee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00edcfbe01b2bd34ff997984a6e73bcc184c727c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00edcfbe01b2bd34ff997984a6e73bcc184c727c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00edcfbe01b2bd34ff997984a6e73bcc184c727c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00edcfbe01b2bd34ff997984a6e73bcc184c727c/comments", "author": null, "committer": null, "parents": [{"sha": "43be9a95d93785cb99ea5168f9c0538291e6e193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43be9a95d93785cb99ea5168f9c0538291e6e193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43be9a95d93785cb99ea5168f9c0538291e6e193"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "df9bb9454dd95bb23afe52c9b1f48bb15fd94a1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00edcfbe01b2bd34ff997984a6e73bcc184c727c", "patch": "@@ -1,3 +1,8 @@\n+2013-07-23  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_pad_arg_upward): In big-endian,\n+\tpad pointer-typed argument downward.\n+\n 2013-07-23  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/aarch64/aarch64.h (TARGET_CPU_CPP_BUILTINS): Define _ILP32"}, {"sha": "73e8657b828e76706266533990220b0854513910", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=00edcfbe01b2bd34ff997984a6e73bcc184c727c", "patch": "@@ -1612,11 +1612,12 @@ aarch64_pad_arg_upward (enum machine_mode mode, const_tree type)\n   if (!BYTES_BIG_ENDIAN)\n     return true;\n \n-  /* Otherwise, integral types and floating point types are padded downward:\n+  /* Otherwise, integral, floating-point and pointer types are padded downward:\n      the least significant byte of a stack argument is passed at the highest\n      byte address of the stack slot.  */\n   if (type\n-      ? (INTEGRAL_TYPE_P (type) || SCALAR_FLOAT_TYPE_P (type))\n+      ? (INTEGRAL_TYPE_P (type) || SCALAR_FLOAT_TYPE_P (type)\n+\t || POINTER_TYPE_P (type))\n       : (SCALAR_INT_MODE_P (mode) || SCALAR_FLOAT_MODE_P (mode)))\n     return false;\n "}, {"sha": "7df09a07b4b61fe0f95202f5ec946ff88672e838", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00edcfbe01b2bd34ff997984a6e73bcc184c727c", "patch": "@@ -1,3 +1,7 @@\n+2013-07-23  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/test-ptr-arg-on-stack-1.c: New test.\n+\n 2013-07-23  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* gcc.dg/20020219-1.c: Skip the test on aarch64*-*-* in ilp32."}, {"sha": "bb68e0a568ce8b6e44a680a5b2fd5696d45f9468", "filename": "gcc/testsuite/gcc.target/aarch64/test-ptr-arg-on-stack-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-ptr-arg-on-stack-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00edcfbe01b2bd34ff997984a6e73bcc184c727c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-ptr-arg-on-stack-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest-ptr-arg-on-stack-1.c?ref=00edcfbe01b2bd34ff997984a6e73bcc184c727c", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+/* Test pass-by-reference and pointer-typed argument passing on stack.\n+   This test shall pass on any of the following four combinitions:\n+    {big-endian, little-endian} {LP64, ILP32}.  */\n+\n+struct s5\n+{\n+  double a;\n+  double b;\n+  double c;\n+  double d;\n+  double e;\n+} gS = {1.0, 2.0, 3.0, 4.0, 5.0};\n+\n+double  __attribute__ ((noinline))\n+foo (struct s5 p1, struct s5 p2, struct s5 p3, struct s5 p4,\n+     struct s5 p5, struct s5 p6, struct s5 p7, struct s5 p8,\n+     struct s5 p9)\n+{\n+  asm (\"\");\n+  return p9.c;\n+}\n+\n+void abort (void);\n+int printf (const char *, ...);\n+\n+int main (void)\n+{\n+  printf (\"Here we print out some values and more importantly hope that\"\n+\t  \" the stack is getting a bit dirty for the bug to manifest itself\"\n+\t  \"\\n\\t%f, %f, %f, %f, %f\\n\", gS.a, gS.b, gS.c, gS.d, gS.e);\n+\n+  if (foo (gS, gS, gS, gS, gS, gS, gS, gS, gS) != 3.0)\n+    abort ();\n+\n+  return 0;\n+}"}]}