{"sha": "6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiYWRkZjk3Y2RlYWI5MTM5NmNjNGY4MDVmYTIzZDFkYmFjZGI4Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-08T01:31:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-08T01:31:01Z"}, "message": "c-lang.c (start_cdtor, [...]): New functions.\n\n        * c-lang.c (start_cdtor, finish_cdtor): New functions.\n        (finish_file): Use them in building constructor/destructor functions.\n\n        * config/alpha/alpha.h (HAS_INIT_SECTION, LD_INIT_SWITCH,\n        LD_FINI_SWITCH): Move ...\n        * config/alpha/osf.h: ... here.\n        * config/alpha/alpha-interix.h: Don't undef them.\n\nFrom-SVN: r37307", "tree": {"sha": "c856e04a6d92ac54490fed87ab2b96a519581e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c856e04a6d92ac54490fed87ab2b96a519581e86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/comments", "author": null, "committer": null, "parents": [{"sha": "99b130844d3b2946fa13ddad7e8e9bc579145891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b130844d3b2946fa13ddad7e8e9bc579145891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b130844d3b2946fa13ddad7e8e9bc579145891"}], "stats": {"total": 125, "additions": 76, "deletions": 49}, "files": [{"sha": "61e7193b92c813afd2c00b003140555c55cb8aeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "patch": "@@ -1,3 +1,13 @@\n+2000-11-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-lang.c (start_cdtor, finish_cdtor): New functions.\n+\t(finish_file): Use them in building constructor/destructor functions.\n+\n+\t* config/alpha/alpha.h (HAS_INIT_SECTION, LD_INIT_SWITCH, \n+\tLD_FINI_SWITCH): Move ...\n+\t* config/alpha/osf.h: ... here.\n+\t* config/alpha/alpha-interix.h: Don't undef them.\n+\n 2000-11-07  Jeffrey Oldham  <oldham@oz.codesourcery.com>\n \n \t* config/mips/t-iris6 (FPBIT): New.  Added so that __unorddf2 is"}, {"sha": "86e87b7ac6e2fba715ac94816d7a9af2835497f0", "filename": "gcc/c-lang.c", "status": "modified", "additions": 61, "deletions": 38, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "patch": "@@ -183,63 +183,86 @@ lookup_objc_ivar (id)\n   return 0;\n }\n \n+#if !defined(ASM_OUTPUT_CONSTRUCTOR) || !defined(ASM_OUTPUT_DESTRUCTOR)\n+extern tree static_ctors;\n+extern tree static_dtors;\n+\n+static tree start_cdtor\t\tPARAMS ((int));\n+static void finish_cdtor\tPARAMS ((tree));\n+\n+static tree\n+start_cdtor (method_type)\n+     int method_type;\n+{\n+  tree fnname = get_file_function_name (method_type);\n+  tree void_list_node_1 = build_tree_list (NULL_TREE, void_type_node);\n+  tree body;\n+\n+  start_function (void_list_node_1,\n+\t\t  build_parse_node (CALL_EXPR, fnname, \n+\t\t\t\t    tree_cons (NULL_TREE, NULL_TREE, \n+\t\t\t\t\t       void_list_node_1),\n+\t\t\t\t    NULL_TREE),\n+\t\t  NULL_TREE, NULL_TREE);\n+  store_parm_decls ();\n+\n+  current_function_cannot_inline\n+    = \"static constructors and destructors cannot be inlined\";\n+\n+  body = c_begin_compound_stmt ();\n+\n+  pushlevel (0);\n+  clear_last_expr ();\n+  add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n+\n+  return body;\n+}\n+\n+static void\n+finish_cdtor (body)\n+     tree body;\n+{\n+  tree scope;\n+  tree block;\n+\n+  scope = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n+  block = poplevel (0, 0, 0); \n+  SCOPE_STMT_BLOCK (TREE_PURPOSE (scope)) = block;\n+  SCOPE_STMT_BLOCK (TREE_VALUE (scope)) = block;\n+\n+  RECHAIN_STMTS (body, COMPOUND_BODY (body)); \n+\n+  finish_function (0);\n+}\n+#endif\n+\n /* Called at end of parsing, but before end-of-file processing.  */\n \n void\n finish_file ()\n {\n-#ifndef ASM_OUTPUT_CONSTRUCTOR\n-  extern tree static_ctors;\n-#endif\n-#ifndef ASM_OUTPUT_DESTRUCTOR\n-  extern tree static_dtors;\n-#endif\n-  extern tree build_function_call                 PARAMS ((tree, tree));\n-#if !defined(ASM_OUTPUT_CONSTRUCTOR) || !defined(ASM_OUTPUT_DESTRUCTOR)\n-  tree void_list_node_1 = build_tree_list (NULL_TREE, void_type_node);\n-#endif\n #ifndef ASM_OUTPUT_CONSTRUCTOR\n   if (static_ctors)\n     {\n-      tree fnname = get_file_function_name ('I');\n-      start_function (void_list_node_1,\n-\t\t      build_parse_node (CALL_EXPR, fnname, \n-\t\t\t\t\ttree_cons (NULL_TREE, NULL_TREE, \n-\t\t\t\t\t\t   void_list_node_1),\n-\t\t\t\t\tNULL_TREE),\n-\t\t      NULL_TREE, NULL_TREE);\n-      fnname = DECL_ASSEMBLER_NAME (current_function_decl);\n-      store_parm_decls ();\n+      tree body = start_cdtor ('I');\n \n       for (; static_ctors; static_ctors = TREE_CHAIN (static_ctors))\n-\texpand_expr_stmt (build_function_call (TREE_VALUE (static_ctors),\n-\t\t\t\t\t       NULL_TREE));\n-\n-      finish_function (0);\n+\tc_expand_expr_stmt (build_function_call (TREE_VALUE (static_ctors),\n+\t\t\t\t\t\t NULL_TREE));\n \n-      assemble_constructor (IDENTIFIER_POINTER (fnname));\n+      finish_cdtor (body);\n     }\n #endif\n #ifndef ASM_OUTPUT_DESTRUCTOR\n   if (static_dtors)\n     {\n-      tree fnname = get_file_function_name ('D');\n-      start_function (void_list_node_1,\n-\t\t      build_parse_node (CALL_EXPR, fnname, \n-\t\t\t\t\ttree_cons (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t\t   void_list_node_1),\n-\t\t\t\t\tNULL_TREE),\n-\t\t      NULL_TREE, NULL_TREE);\n-      fnname = DECL_ASSEMBLER_NAME (current_function_decl);\n-      store_parm_decls ();\n+      tree body = start_cdtor ('D');\n \n       for (; static_dtors; static_dtors = TREE_CHAIN (static_dtors))\n-\texpand_expr_stmt (build_function_call (TREE_VALUE (static_dtors),\n-\t\t\t\t\t       NULL_TREE));\n-\n-      finish_function (0);\n+\tc_expand_expr_stmt (build_function_call (TREE_VALUE (static_dtors),\n+\t\t\t\t\t\t NULL_TREE));\n \n-      assemble_destructor (IDENTIFIER_POINTER (fnname));\n+      finish_cdtor (body);\n     }\n #endif\n   "}, {"sha": "4bbd98809ff5b03a7e1dd6576c8a094a2d6ac5fa", "filename": "gcc/config/alpha/alpha-interix.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-interix.h?ref=6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "patch": "@@ -62,12 +62,6 @@ Boston, MA 02111-1307, USA.  */\n #undef PUT_SDB_BLOCK_START\n #undef PUT_SDB_BLOCK_END\n \n-/* the following are OSF linker (not gld) specific... we don't want them */\n-#undef HAS_INIT_SECTION\n-#undef LD_INIT_SWITCH\n-#undef LD_FINI_SWITCH\n-\n-\n /* The following are needed for C++, but also needed for profiling */\n \n /* Support const sections and the ctors and dtors sections for g++."}, {"sha": "75782244a4da9b05b67439a878c652d0f6f1e258", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "patch": "@@ -2525,11 +2525,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define ALIGN_SYMTABLE_OFFSET(OFFSET) (((OFFSET) + 7) & ~7)\n \n-/* The linker will stick __main into the .init section.  */\n-#define HAS_INIT_SECTION\n-#define LD_INIT_SWITCH \"-init\"\n-#define LD_FINI_SWITCH \"-fini\"\n-\n /* The system headers under Alpha systems are generally C++-aware.  */\n #define NO_IMPLICIT_EXTERN_C\n "}, {"sha": "f4ad241aa8673d867866022cd91f3a8be1ccc287", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=6dbaddf97cdeab91396cc4f805fa23d1dbacdb8b", "patch": "@@ -144,3 +144,8 @@ __enable_execute_stack (addr)\t\t\t\t\t\t\\\n /* Digital UNIX V4.0E (1091)/usr/include/sys/types.h 4.3.49.9 1997/08/14 */\n #define SIZE_TYPE\t\"long unsigned int\"\n #define PTRDIFF_TYPE\t\"long int\"\n+\n+/* The linker will stick __main into the .init section.  */\n+#define HAS_INIT_SECTION\n+#define LD_INIT_SWITCH \"-init\"\n+#define LD_FINI_SWITCH \"-fini\""}]}