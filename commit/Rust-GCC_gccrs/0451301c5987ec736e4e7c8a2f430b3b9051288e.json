{"sha": "0451301c5987ec736e4e7c8a2f430b3b9051288e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1MTMwMWM1OTg3ZWM3MzZlNGU3YzhhMmY0MzBiM2I5MDUxMjg4ZQ==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-01-31T20:06:33Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-01-31T20:06:33Z"}, "message": "re PR c++/34935 (ICE with attribute may_alias)\n\n2008-01-31  Douglas Gregor  <doug.gregor@gmail.com>\n           Jakub Jelinek  <jakub@redhat.com>\n\n       PR c++/34935\n       PR c++/34936\n       * typeck.c (structural_comptypes): Handle comparisons of\n       VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, FIXED_POINT_TYPE, and\n       REAL_TYPE nodes.\n       * mangle.c (write_builtin_type): Map down to the canonical type,\n       which will be one of the predefined type nodes.\n\n2008-01-31  Douglas Gregor  <doug.gregor@gmail.com>\n           Jakub Jelinek  <jakub@redhat.com>\n\n       PR c++/34935\n       PR c++/34936\n       * g++.dg/ext/alias-canon.C: New.\n       * g++.dg/ext/alias-mangle.C: New.\n\t\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r131984", "tree": {"sha": "e3ce23aff54310844d24fd7882f14fa469956d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ce23aff54310844d24fd7882f14fa469956d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0451301c5987ec736e4e7c8a2f430b3b9051288e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0451301c5987ec736e4e7c8a2f430b3b9051288e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0451301c5987ec736e4e7c8a2f430b3b9051288e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0451301c5987ec736e4e7c8a2f430b3b9051288e/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ca3d30cfb7596bbdabf9e644db03526958ba821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca3d30cfb7596bbdabf9e644db03526958ba821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca3d30cfb7596bbdabf9e644db03526958ba821"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "5b4cc3bb49b5bafda5e14609a8a7f926f1d8d022", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0451301c5987ec736e4e7c8a2f430b3b9051288e", "patch": "@@ -1,3 +1,14 @@\n+2008-01-31  Douglas Gregor  <doug.gregor@gmail.com>\n+           Jakub Jelinek  <jakub@redhat.com>\n+\n+       PR c++/34935\n+       PR c++/34936\n+       * typeck.c (structural_comptypes): Handle comparisons of\n+       VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, FIXED_POINT_TYPE, and\n+       REAL_TYPE nodes.\n+       * mangle.c (write_builtin_type): Map down to the canonical type,\n+       which will be one of the predefined type nodes.\n+\n 2008-01-29  Michael Meissner  <michael.meissner@amd.com>\n \n \tPR 35004"}, {"sha": "09a34562e8d3b31cff888d1ecad8286dbc088e6f", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=0451301c5987ec736e4e7c8a2f430b3b9051288e", "patch": "@@ -1768,6 +1768,9 @@ write_CV_qualifiers_for_type (const tree type)\n static void\n write_builtin_type (tree type)\n {\n+  if (TYPE_CANONICAL (type))\n+    type = TYPE_CANONICAL (type);\n+\n   switch (TREE_CODE (type))\n     {\n     case VOID_TYPE:"}, {"sha": "4d6e06b59187d497b04854f54aa6fc403b8dad25", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0451301c5987ec736e4e7c8a2f430b3b9051288e", "patch": "@@ -977,6 +977,30 @@ structural_comptypes (tree t1, tree t2, int strict)\n   /* Compare the types.  Break out if they could be the same.  */\n   switch (TREE_CODE (t1))\n     {\n+    case VOID_TYPE:\n+    case BOOLEAN_TYPE:\n+      /* All void and bool types are the same.  */\n+      break;\n+\n+    case INTEGER_TYPE:\n+    case FIXED_POINT_TYPE:\n+    case REAL_TYPE:\n+      /* With these nodes, we can't determine type equivalence by\n+\t looking at what is stored in the nodes themselves, because\n+\t two nodes might have different TYPE_MAIN_VARIANTs but still\n+\t represent the same type.  For example, wchar_t and int could\n+\t have the same properties (TYPE_PRECISION, TYPE_MIN_VALUE,\n+\t TYPE_MAX_VALUE, etc.), but have different TYPE_MAIN_VARIANTs\n+\t and are distinct types. On the other hand, int and the\n+\t following typedef\n+\n+           typedef int INT __attribute((may_alias));\n+\n+\t have identical properties, different TYPE_MAIN_VARIANTs, but\n+\t represent the same type.  The canonical type system keeps\n+\t track of equivalence in this case, so we fall back on it.  */\n+      return TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2);\n+\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       if (TEMPLATE_TYPE_IDX (t1) != TEMPLATE_TYPE_IDX (t2)"}, {"sha": "2780a74e43d931e12941359b55c4013e1dde25e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0451301c5987ec736e4e7c8a2f430b3b9051288e", "patch": "@@ -1,3 +1,11 @@\n+2008-01-31  Douglas Gregor  <doug.gregor@gmail.com>\n+           Jakub Jelinek  <jakub@redhat.com>\n+\n+       PR c++/34935\n+       PR c++/34936\n+       * g++.dg/ext/alias-canon.C: New.\n+       * g++.dg/ext/alias-mangle.C: New.\n+\n 2008-01-30  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/execute/pr34982.c: Add forgotten return 0."}, {"sha": "843dec00c94bad789ac6bd10e9c5d9e4b7aba06e", "filename": "gcc/testsuite/g++.dg/ext/alias-canon.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon.C?ref=0451301c5987ec736e4e7c8a2f430b3b9051288e", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/34935\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"_Z1fi\" } } */\n+/* { dg-final { scan-assembler \"_Z1fb\" } } */\n+/* { dg-final { scan-assembler \"_Z1fd\" } } */\n+/* { dg-final { scan-assembler \"_Z1ff\" } } */\n+/* { dg-final { scan-assembler \"_Z1fw\" } } */\n+\n+typedef int INT __attribute((may_alias));\n+\n+void f(int);\n+void f(INT) { }\n+\n+typedef bool BOOL __attribute((may_alias));\n+\n+void f(bool);\n+void f(BOOL) { }\n+\n+typedef float FLOAT __attribute((may_alias));\n+\n+void f(float);\n+void f(FLOAT) { }\n+\n+typedef double DOUBLE __attribute((may_alias));\n+\n+void f(double);\n+void f(DOUBLE) {}\n+\n+typedef wchar_t WCHAR_T __attribute((may_alias));\n+\n+void f(wchar_t);\n+void f(WCHAR_T) {}\n+\n+void test()\n+{\n+  f(0);\n+  f(true);\n+  f(1.0f);\n+  f(1.0);\n+  f(L'f');\n+}"}, {"sha": "a7706e996d020704f4a96d62907c1b2f1fea8543", "filename": "gcc/testsuite/g++.dg/ext/alias-mangle.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0451301c5987ec736e4e7c8a2f430b3b9051288e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-mangle.C?ref=0451301c5987ec736e4e7c8a2f430b3b9051288e", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/34936\n+// { dg-do compile }\n+/* { dg-final { scan-assembler \"_ZN1AIdEC1Ev\" } } */\n+typedef double X __attribute((may_alias)) ;\n+\n+template<typename> struct A\n+{\n+  A();\n+};\n+\n+A<X> a;"}]}