{"sha": "28cb2b14484fd5c694b31513eb5fc30988d33904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjYjJiMTQ0ODRmZDVjNjk0YjMxNTEzZWI1ZmMzMDk4OGQzMzkwNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-12-01T21:16:59Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-12-01T21:16:59Z"}, "message": "re PR rtl-optimization/12628 (Segfault with -fno-expensive-optimizations -fno-rerun-loop-opt)\n\n\n\tPR optimization/12628\n\t* toplev.c (rest_of_handle_jump_bypass): Call reg_scan.\n\t* regclass.c (reg_scan): Include allocate_reg_info time in\n\tTV_REG_SCAN.  Minor clean-ups.\n\t(reg_scan_update): Minor clean-ups.\n\n\t* gcc.dg/20031201-1.c: New test case.\n\nFrom-SVN: r74125", "tree": {"sha": "18d957d9350eae5a5ed2e6da6f7043459bd714b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18d957d9350eae5a5ed2e6da6f7043459bd714b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28cb2b14484fd5c694b31513eb5fc30988d33904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cb2b14484fd5c694b31513eb5fc30988d33904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28cb2b14484fd5c694b31513eb5fc30988d33904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cb2b14484fd5c694b31513eb5fc30988d33904/comments", "author": null, "committer": null, "parents": [{"sha": "ea91ed098968dcee6c6e0bd028b8f2e2c9870547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea91ed098968dcee6c6e0bd028b8f2e2c9870547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea91ed098968dcee6c6e0bd028b8f2e2c9870547"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "778a7e7def22a4be4262a6e4e2f3b9fb743ebad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28cb2b14484fd5c694b31513eb5fc30988d33904", "patch": "@@ -1,3 +1,11 @@\n+2003-12-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/12628\n+\t* toplev.c (rest_of_handle_jump_bypass): Call reg_scan.\n+\t* regclass.c (reg_scan): Include allocate_reg_info time in\n+\tTV_REG_SCAN.  Minor clean-ups.\n+\t(reg_scan_update): Minor clean-ups.\n+\n 2003-12-01  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config.gcc (s390x-ibm-tpf*): Add extra_parts."}, {"sha": "c2da744ca95282527012886636a490e4bc1a7718", "filename": "gcc/regclass.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=28cb2b14484fd5c694b31513eb5fc30988d33904", "patch": "@@ -2293,21 +2293,20 @@ reg_scan (rtx f, unsigned int nregs, int repeat ATTRIBUTE_UNUSED)\n {\n   rtx insn;\n \n+  timevar_push (TV_REG_SCAN);\n+\n   allocate_reg_info (nregs, TRUE, FALSE);\n   max_parallel = 3;\n   max_set_parallel = 0;\n \n-  timevar_push (TV_REG_SCAN);\n-\n   for (insn = f; insn; insn = NEXT_INSN (insn))\n-    if (GET_CODE (insn) == INSN\n-\t|| GET_CODE (insn) == CALL_INSN\n-\t|| GET_CODE (insn) == JUMP_INSN)\n+    if (INSN_P (insn))\n       {\n-\tif (GET_CODE (PATTERN (insn)) == PARALLEL\n-\t    && XVECLEN (PATTERN (insn), 0) > max_parallel)\n-\t  max_parallel = XVECLEN (PATTERN (insn), 0);\n-\treg_scan_mark_refs (PATTERN (insn), insn, 0, 0);\n+\trtx pat = PATTERN (insn);\n+\tif (GET_CODE (pat) == PARALLEL\n+\t    && XVECLEN (pat, 0) > max_parallel)\n+\t  max_parallel = XVECLEN (pat, 0);\n+\treg_scan_mark_refs (pat, insn, 0, 0);\n \n \tif (REG_NOTES (insn))\n \t  reg_scan_mark_refs (REG_NOTES (insn), insn, 1, 0);\n@@ -2331,14 +2330,13 @@ reg_scan_update (rtx first, rtx last, unsigned int old_max_regno)\n   allocate_reg_info (max_reg_num (), FALSE, FALSE);\n \n   for (insn = first; insn != last; insn = NEXT_INSN (insn))\n-    if (GET_CODE (insn) == INSN\n-\t|| GET_CODE (insn) == CALL_INSN\n-\t|| GET_CODE (insn) == JUMP_INSN)\n+    if (INSN_P (insn))\n       {\n-\tif (GET_CODE (PATTERN (insn)) == PARALLEL\n-\t    && XVECLEN (PATTERN (insn), 0) > max_parallel)\n-\t  max_parallel = XVECLEN (PATTERN (insn), 0);\n-\treg_scan_mark_refs (PATTERN (insn), insn, 0, old_max_regno);\n+\trtx pat = PATTERN (insn);\n+\tif (GET_CODE (pat) == PARALLEL\n+\t    && XVECLEN (pat, 0) > max_parallel)\n+\t  max_parallel = XVECLEN (pat, 0);\n+\treg_scan_mark_refs (pat, insn, 0, old_max_regno);\n \n \tif (REG_NOTES (insn))\n \t  reg_scan_mark_refs (REG_NOTES (insn), insn, 1, old_max_regno);"}, {"sha": "90f516714d5a26a2fdb8e1cfd6576eb3d2cfaa32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28cb2b14484fd5c694b31513eb5fc30988d33904", "patch": "@@ -1,3 +1,8 @@\n+2003-12-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/12628\n+\t* gcc.dg/20031201-1.c: New test case.\n+\n 2003-12-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/unaligned-1.c: New test."}, {"sha": "e6ea70b01c48c8981acdca2cc0d4699961cc9160", "filename": "gcc/testsuite/gcc.dg/20031201-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Ftestsuite%2Fgcc.dg%2F20031201-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Ftestsuite%2Fgcc.dg%2F20031201-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20031201-1.c?ref=28cb2b14484fd5c694b31513eb5fc30988d33904", "patch": "@@ -0,0 +1,20 @@\n+/* PR optimization/12628 */\n+/* The following test used to ICE in init_alias_analysis because the\n+   given command line options meant that reg_scan wasn't (re)run before\n+   the jump bypassing pass.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-expensive-optimizations -fno-rerun-loop-opt\" } */\n+\n+int outbuf[100];\n+int outcnt;\n+int bi_buf;\n+void send_bits(void)\n+{\n+    bi_buf = 0;\n+    outbuf[outcnt++] = 8;\n+    outbuf[outcnt++] = 8;\n+    if (outcnt)\n+        bi_buf = 1;\n+}\n+"}, {"sha": "e4139611c5cffb2efda0b105bac2e10c08bd0026", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cb2b14484fd5c694b31513eb5fc30988d33904/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=28cb2b14484fd5c694b31513eb5fc30988d33904", "patch": "@@ -2571,6 +2571,7 @@ rest_of_handle_jump_bypass (tree decl, rtx insns)\n   open_dump_file (DFI_bypass, decl);\n \n   cleanup_cfg (CLEANUP_EXPENSIVE);\n+  reg_scan (insns, max_reg_num (), 1);\n \n   if (bypass_jumps (rtl_dump_file))\n     {"}]}