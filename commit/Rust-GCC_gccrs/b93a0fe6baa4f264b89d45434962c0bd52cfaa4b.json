{"sha": "b93a0fe6baa4f264b89d45434962c0bd52cfaa4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzYTBmZTZiYWE0ZjI2NGI4OWQ0NTQzNDk2MmMwYmQ1MmNmYWE0Yg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2002-09-30T11:18:38Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2002-09-30T11:18:38Z"}, "message": "arm.h (BASE_REG_CLASS): Always return LO_REGS for Thumb.\n\n* arm.h (BASE_REG_CLASS): Always return LO_REGS for Thumb.\n(MODE_BASE_REG_CLASS, case Thumb): Only return BASE_REGS if we know\nthat we have a SImode access, and only then if reload hasn't completed;\nfor all other cases, use LO_REGS.\n\nFrom-SVN: r57644", "tree": {"sha": "bcfa19589dc612d4fbc0be7571afdb13f0ca916e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcfa19589dc612d4fbc0be7571afdb13f0ca916e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b/comments", "author": null, "committer": null, "parents": [{"sha": "067bb3a79d1fa9541d72fc0898ee4a962c040f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067bb3a79d1fa9541d72fc0898ee4a962c040f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067bb3a79d1fa9541d72fc0898ee4a962c040f82"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "15dfb25db7f2269a46a5ef424647dccdfea36f94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b93a0fe6baa4f264b89d45434962c0bd52cfaa4b", "patch": "@@ -1,3 +1,10 @@\n+2002-09-30  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (BASE_REG_CLASS): Always return LO_REGS for Thumb.\n+\t(MODE_BASE_REG_CLASS, case Thumb): Only return BASE_REGS if we know\n+\tthat we have a SImode access, and only then if reload hasn't completed;\n+\tfor all other cases, use LO_REGS.\n+\n 2002-09-29  Richard Henderson  <rth@redhat.com>\n \n \t* real.c (real_from_string): Apply sign last.  Tidy exponent handling."}, {"sha": "3b3e38a629b7ca996dc5c5cac969b06ad03fafad", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93a0fe6baa4f264b89d45434962c0bd52cfaa4b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b93a0fe6baa4f264b89d45434962c0bd52cfaa4b", "patch": "@@ -1070,14 +1070,16 @@ enum reg_class\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS  (TARGET_THUMB ? LO_REGS : GENERAL_REGS)\n-#define BASE_REG_CLASS   (TARGET_THUMB ? BASE_REGS : GENERAL_REGS)\n+#define BASE_REG_CLASS   (TARGET_THUMB ? LO_REGS : GENERAL_REGS)\n \n-/* For the Thumb the high registers cannot be used as base\n-   registers when addressing quanitities in QI or HI mode.  */\n+/* For the Thumb the high registers cannot be used as base registers\n+   when addressing quanitities in QI or HI mode; if we don't know the\n+   mode, then we must be conservative.  After reload we must also be\n+   conservative, since we can't support SP+reg addressing, and we\n+   can't fix up any bad substitutions.  */\n #define MODE_BASE_REG_CLASS(MODE)\t\t\t\t\t\\\n-    (TARGET_ARM ? BASE_REGS :\t\t\t\t\t\t\\\n-     (((MODE) == QImode || (MODE) == HImode || (MODE) == VOIDmode)\t\\\n-     ? LO_REGS : BASE_REGS))\n+    (TARGET_ARM ? GENERAL_REGS :\t\t\t\t\t\\\n+     (((MODE) == SImode && !reload_completed) ? BASE_REGS : LO_REGS))\n \n /* When SMALL_REGISTER_CLASSES is nonzero, the compiler allows\n    registers explicitly used in the rtl to be used as spill registers"}]}