{"sha": "dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwMjA4YjljZGI1YmI0NDFiYWFhZjE4ZmI0ZmM2ZWM1NWQ5NGEzOA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-08-25T00:37:12Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-08-25T00:37:12Z"}, "message": "loop.c (scan_loop): Allocate some slop to handle pseudos generated by move_movables.\n\n\t* loop.c (scan_loop): Allocate some slop to handle pseudos\n\tgenerated by move_movables.\n\t(load_mems_and_recount_loop_regs_set): Honor AVOID_CC_MODE_COPIES\n\there too.\n\nFrom-SVN: r21955", "tree": {"sha": "989b0f689c2788b417e9da82d2f1be0b73b89c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/989b0f689c2788b417e9da82d2f1be0b73b89c2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38/comments", "author": null, "committer": null, "parents": [{"sha": "dce2e8c098ab361dd55940ce75ed653fadffc690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce2e8c098ab361dd55940ce75ed653fadffc690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce2e8c098ab361dd55940ce75ed653fadffc690"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "98e2b5311077edbf6168c442141b847a8f5b545b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38", "patch": "@@ -1,3 +1,10 @@\n+Mon Aug 24 23:31:03 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n+\n+\t* loop.c (scan_loop): Allocate some slop to handle pseudos\n+\tgenerated by move_movables.\n+\t(load_mems_and_recount_loop_regs_set): Honor AVOID_CC_MODE_COPIES\n+\there too.\n+\n Mon Aug 24 19:45:40 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* tree.def (DECL_RESULT): Correct documentation."}, {"sha": "674b1ccd7d8e93c6d05a89e46f919536134d877c", "filename": "gcc/loop.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=dd0208b9cdb5bb441baaaf18fb4fc6ec55d94a38", "patch": "@@ -762,8 +762,8 @@ scan_loop (loop_start, end, unroll_p)\n      reg_single_usage[I].  */\n   \n   /* Allocate extra space for REGS that might be created by\n-     load_mems.  */\n-  nregs = max_reg_num () + loop_mems_idx;\n+     load_mems and move_movables.  */\n+  nregs = max_reg_num () + loop_mems_idx + 100;\n   n_times_set = (int *) alloca (nregs * sizeof (int));\n   n_times_used = (int *) alloca (nregs * sizeof (int));\n   may_not_optimize = (char *) alloca (nregs);\n@@ -8443,6 +8443,14 @@ load_mems_and_recount_loop_regs_set (scan_start, end, loop_top, start,\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \tmay_not_optimize[i] = 1, n_times_set[i] = 1;\n       \n+#ifdef AVOID_CCMODE_COPIES\n+      /* Don't try to move insns which set CC registers if we should not\n+\t create CCmode register copies.  */\n+      for (i = FIRST_PSEUDO_REGISTER; i < nregs - loop_mems_idx; i++)\n+\tif (GET_MODE_CLASS (GET_MODE (regno_reg_rtx[i])) == MODE_CC)\n+\t  may_not_optimize[i] = 1;\n+#endif\n+\n       /* Set n_times_used for the new registers.  */\n       bcopy ((char *) (n_times_set + old_nregs),\n \t     (char *) (n_times_used + old_nregs),"}]}