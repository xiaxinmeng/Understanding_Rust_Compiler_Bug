{"sha": "caf7f21af63ee8f8de2b352d69b93878e5e86dab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmN2YyMWFmNjNlZThmOGRlMmIzNTJkNjliOTM4NzhlNWU4NmRhYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-26T13:04:09Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-26T13:04:09Z"}, "message": "h8300-protos.h: Change emit_a_rotate to output_a_rotate.\n\n\t* config/h8300/h8300-protos.h: Change emit_a_rotate to\n\toutput_a_rotate.  Add a prototype for compute_a_rotate_length.\n\t* config/h8300/h8300.c (emit_a_rotate): Change to\n\toutput_a_rotate.\n\t(compute_a_rotate_length): New.\n\t(h8300_adjust_insn_length): Remove.\n\t* config/h8300/h8300.h (ADJUST_INSN_LENGTH): Remove.\n\t* config/h8300/h8300.md (adjust_length): Remove.\n\t(*rotlqi3_1): Use output_a_rotate and compute_a_rotate_length.\n\t(*rotlhi3_1): Likewise.\n\t(*rotlsi3_1): Likewise.\n\nFrom-SVN: r68528", "tree": {"sha": "3110fb86c3d0239e255cbe295ccf4296eba37010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3110fb86c3d0239e255cbe295ccf4296eba37010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caf7f21af63ee8f8de2b352d69b93878e5e86dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf7f21af63ee8f8de2b352d69b93878e5e86dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf7f21af63ee8f8de2b352d69b93878e5e86dab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf7f21af63ee8f8de2b352d69b93878e5e86dab/comments", "author": null, "committer": null, "parents": [{"sha": "2f54a1db5eac0c0ba696e8acaf124c659a41adfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f54a1db5eac0c0ba696e8acaf124c659a41adfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f54a1db5eac0c0ba696e8acaf124c659a41adfb"}], "stats": {"total": 188, "additions": 82, "deletions": 106}, "files": [{"sha": "9844d81a60d867641b747e6d6e44ad693454e789", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caf7f21af63ee8f8de2b352d69b93878e5e86dab", "patch": "@@ -1,3 +1,17 @@\n+2003-06-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Change emit_a_rotate to\n+\toutput_a_rotate.  Add a prototype for compute_a_rotate_length.\n+\t* config/h8300/h8300.c (emit_a_rotate): Change to\n+\toutput_a_rotate.\n+\t(compute_a_rotate_length): New.\n+\t(h8300_adjust_insn_length): Remove.\n+\t* config/h8300/h8300.h (ADJUST_INSN_LENGTH): Remove.\n+\t* config/h8300/h8300.md (adjust_length): Remove.\n+\t(*rotlqi3_1): Use output_a_rotate and compute_a_rotate_length.\n+\t(*rotlhi3_1): Likewise.\n+\t(*rotlsi3_1): Likewise.\n+\n 2003-06-26  Roger Sayle  <roger@eyesopen.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "d99f0dca0b9cfb46db3cf9abb5b1e9182a4b88e1", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=caf7f21af63ee8f8de2b352d69b93878e5e86dab", "patch": "@@ -33,7 +33,8 @@ extern int compute_plussi_cc (rtx *);\n extern const char *output_a_shift (rtx *);\n extern unsigned int compute_a_shift_length (rtx, rtx *);\n extern int compute_a_shift_cc (rtx, rtx *);\n-extern const char *emit_a_rotate (enum rtx_code, rtx *);\n+extern const char *output_a_rotate (enum rtx_code, rtx *);\n+extern unsigned int compute_a_rotate_length (rtx *);\n extern const char *output_simode_bld (int, rtx[]);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);"}, {"sha": "54703c2452c4650dcab9d934ac929a38f6edbb3f", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 52, "deletions": 78, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=caf7f21af63ee8f8de2b352d69b93878e5e86dab", "patch": "@@ -3822,7 +3822,7 @@ compute_a_shift_cc (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n /* A rotation by a non-constant will cause a loop to be generated, in\n    which a rotation by one bit is used.  A rotation by a constant,\n    including the one in the loop, will be taken care of by\n-   emit_a_rotate () at the insn emit time.  */\n+   output_a_rotate () at the insn emit time.  */\n \n int\n expand_a_rotate (enum rtx_code code, rtx operands[])\n@@ -3877,10 +3877,10 @@ expand_a_rotate (enum rtx_code code, rtx operands[])\n   return 1;\n }\n \n-/* Emit rotate insns.  */\n+/* Output rotate insns.  */\n \n const char *\n-emit_a_rotate (enum rtx_code code, rtx *operands)\n+output_a_rotate (enum rtx_code code, rtx *operands)\n {\n   rtx dst = operands[0];\n   rtx rotate_amount = operands[2];\n@@ -3985,6 +3985,55 @@ emit_a_rotate (enum rtx_code code, rtx *operands)\n \n   return \"\";\n }\n+\n+unsigned int\n+compute_a_rotate_length (rtx *operands)\n+{\n+  rtx src = operands[1];\n+  enum machine_mode mode = GET_MODE (src);\n+  int amount;\n+  unsigned int length = 0;\n+\n+  if (GET_CODE (XEXP (src, 1)) != CONST_INT)\n+    return 0;\n+\n+  amount = INTVAL (XEXP (src, 1));\n+\n+  /* Clean up AMOUNT.  */\n+  if (amount < 0)\n+    amount = 0;\n+  if ((unsigned int) amount > GET_MODE_BITSIZE (mode))\n+    amount = GET_MODE_BITSIZE (mode);\n+\n+  /* Determine the faster direction.  After this phase, amount\n+     will be at most a half of GET_MODE_BITSIZE (mode).  */\n+  if ((unsigned int) amount > GET_MODE_BITSIZE (mode) / (unsigned) 2)\n+    /* Flip the direction.  */\n+    amount = GET_MODE_BITSIZE (mode) - amount;\n+\n+  /* See if a byte swap (in HImode) or a word swap (in SImode) can\n+     boost up the rotation.  */\n+  if ((mode == HImode && TARGET_H8300 && amount >= 5)\n+      || (mode == HImode && TARGET_H8300H && amount >= 6)\n+      || (mode == HImode && TARGET_H8300S && amount == 8)\n+      || (mode == SImode && TARGET_H8300H && amount >= 10)\n+      || (mode == SImode && TARGET_H8300S && amount >= 13))\n+    {\n+      /* Adjust AMOUNT and flip the direction.  */\n+      amount = GET_MODE_BITSIZE (mode) / 2 - amount;\n+      length += 6;\n+    }\n+\n+  /* We use 2-bit rotations on the H8S.  */\n+  if (TARGET_H8300S)\n+    amount = amount / 2 + amount % 2;\n+\n+  /* The H8/300 uses three insns to rotate one bit, taking 6\n+     length.  */\n+  length += amount * ((TARGET_H8300 && mode == HImode) ? 6 : 2);\n+\n+  return length;\n+}\n \f\n /* Fix the operands of a gen_xxx so that it could become a bit\n    operating insn.  */\n@@ -4299,81 +4348,6 @@ output_simode_bld (int bild, rtx operands[])\n   return \"\";\n }\n \n-/* Given INSN and its current length LENGTH, return the adjustment\n-   (in bytes) to correctly compute INSN's length.\n-\n-   We use this to get the lengths of various memory references correct.  */\n-\n-int\n-h8300_adjust_insn_length (rtx insn, int length ATTRIBUTE_UNUSED)\n-{\n-  rtx pat = PATTERN (insn);\n-\n-  /* We must filter these out before calling get_attr_adjust_length.  */\n-  if (GET_CODE (pat) == USE\n-      || GET_CODE (pat) == CLOBBER\n-      || GET_CODE (pat) == SEQUENCE\n-      || GET_CODE (pat) == ADDR_VEC\n-      || GET_CODE (pat) == ADDR_DIFF_VEC)\n-    return 0;\n-\n-  if (get_attr_adjust_length (insn) == ADJUST_LENGTH_NO)\n-    return 0;\n-\n-  /* Rotations need various adjustments.  */\n-  if (GET_CODE (pat) == SET\n-      && (GET_CODE (SET_SRC (pat)) == ROTATE\n-\t  || GET_CODE (SET_SRC (pat)) == ROTATERT))\n-    {\n-      rtx src = SET_SRC (pat);\n-      enum machine_mode mode = GET_MODE (src);\n-      int amount;\n-      int states = 0;\n-\n-      if (GET_CODE (XEXP (src, 1)) != CONST_INT)\n-\treturn 0;\n-\n-      amount = INTVAL (XEXP (src, 1));\n-\n-      /* Clean up AMOUNT.  */\n-      if (amount < 0)\n-\tamount = 0;\n-      if ((unsigned int) amount > GET_MODE_BITSIZE (mode))\n-\tamount = GET_MODE_BITSIZE (mode);\n-\n-      /* Determine the faster direction.  After this phase, amount\n-\t will be at most a half of GET_MODE_BITSIZE (mode).  */\n-      if ((unsigned int) amount > GET_MODE_BITSIZE (mode) / (unsigned) 2)\n-\t/* Flip the direction.  */\n-\tamount = GET_MODE_BITSIZE (mode) - amount;\n-\n-      /* See if a byte swap (in HImode) or a word swap (in SImode) can\n-\t boost up the rotation.  */\n-      if ((mode == HImode && TARGET_H8300 && amount >= 5)\n-\t  || (mode == HImode && TARGET_H8300H && amount >= 6)\n-\t  || (mode == HImode && TARGET_H8300S && amount == 8)\n-\t  || (mode == SImode && TARGET_H8300H && amount >= 10)\n-\t  || (mode == SImode && TARGET_H8300S && amount >= 13))\n-\t{\n-\t  /* Adjust AMOUNT and flip the direction.  */\n-\t  amount = GET_MODE_BITSIZE (mode) / 2 - amount;\n-\t  states += 6;\n-\t}\n-\n-      /* We use 2-bit rotations on the H8S.  */\n-      if (TARGET_H8300S)\n-\tamount = amount / 2 + amount % 2;\n-\n-      /* The H8/300 uses three insns to rotate one bit, taking 6\n-         states.  */\n-      states += amount * ((TARGET_H8300 && mode == HImode) ? 6 : 2);\n-\n-      return -(20 - states);\n-    }\n-\n-  return 0;\n-}\n-\n #ifndef OBJECT_FORMAT_ELF\n static void\n h8300_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)"}, {"sha": "c04e531e725fc9dcecf93b8de59f9bc678ad7555", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=caf7f21af63ee8f8de2b352d69b93878e5e86dab", "patch": "@@ -1002,9 +1002,6 @@ struct cum_arg\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \n-#define ADJUST_INSN_LENGTH(INSN, LENGTH) \\\n-  LENGTH += h8300_adjust_insn_length (INSN, LENGTH);\n-\n #define BRANCH_COST 0\n \n /* Tell final.c how to eliminate redundant test instructions.  */"}, {"sha": "ad1d348a76168b41e65f00cf12e6c74e69a8213d", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf7f21af63ee8f8de2b352d69b93878e5e86dab/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=caf7f21af63ee8f8de2b352d69b93878e5e86dab", "patch": "@@ -22,11 +22,9 @@\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.\n \n-;; Some of the extend instructions accept a general_operand_src, which\n-;; allows all the normal memory addressing modes.  The length computations\n-;; don't take this into account.  The lengths in the MD file should be\n-;; \"worst case\" and then be adjusted to their correct values by\n-;; h8300_adjust_insn_length.\n+;; We compute exact length on each instruction for most of the time.\n+;; In some case, most notably bit operations that may involve memory\n+;; operands, the lengths in this file are \"worst case\".\n \n ;; On the H8/300H and H8S, adds/subs operate on the 32bit \"er\"\n ;; registers.  Right now GCC doesn't expose the \"e\" half to the\n@@ -90,12 +88,6 @@\n \t\t\t\t     (const_int 6)))]\n \t(const_int 200)))\n \n-;; The necessity of instruction length adjustment.\n-\n-(define_attr \"adjust_length\" \"yes,no\"\n-  (cond [(eq_attr \"type\" \"branch\") (const_string \"no\")]\n-\t(const_string \"yes\")))\n-\n ;; Condition code settings.\n ;;\n ;; none - insn does not affect cc\n@@ -1180,7 +1172,6 @@\n    and\t%X2,%X0\n    bclr\t%W2,%R0\"\n   [(set_attr \"length\" \"2,8\")\n-   (set_attr \"adjust_length\" \"no\")\n    (set_attr \"cc\" \"set_znv,none_0hit\")])\n \n (define_expand \"andqi3\"\n@@ -1281,7 +1272,6 @@\n    or\\\\t%X2,%X0\n    bset\\\\t%V2,%R0\"\n   [(set_attr \"length\" \"2,8\")\n-   (set_attr \"adjust_length\" \"no\")\n    (set_attr \"cc\" \"set_znv,none_0hit\")])\n \n (define_expand \"iorqi3\"\n@@ -1323,7 +1313,6 @@\n    xor\\\\t%X2,%X0\n    bnot\\\\t%V2,%R0\"\n   [(set_attr \"length\" \"2,8\")\n-   (set_attr \"adjust_length\" \"no\")\n    (set_attr \"cc\" \"set_znv,none_0hit\")])\n \n (define_expand \"xorqi3\"\n@@ -2441,8 +2430,9 @@\n \t(rotate:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))]\n   \"\"\n-  \"* return emit_a_rotate (ROTATE, operands);\"\n-  [(set_attr \"length\" \"20\")\n+  \"* return output_a_rotate (ROTATE, operands);\"\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_rotate_length (operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"rotlhi3\"\n@@ -2457,8 +2447,9 @@\n \t(rotate:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))]\n   \"\"\n-  \"* return emit_a_rotate (ROTATE, operands);\"\n-  [(set_attr \"length\" \"20\")\n+  \"* return output_a_rotate (ROTATE, operands);\"\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_rotate_length (operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"rotlsi3\"\n@@ -2473,8 +2464,9 @@\n \t(rotate:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n-  \"* return emit_a_rotate (ROTATE, operands);\"\n-  [(set_attr \"length\" \"20\")\n+  \"* return output_a_rotate (ROTATE, operands);\"\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_rotate_length (operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \f\n ;; -----------------------------------------------------------------\n@@ -2633,8 +2625,7 @@\n   \"\"\n   \"bld\t%Z2,%Y1\\;b%c4\t#0,%R0\\;bst\t#0,%R0; bl1\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"6\")\n-   (set_attr \"adjust_length\" \"no\")])\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n@@ -2648,8 +2639,7 @@\n   \"\"\n   \"bld\t%Z2,%Y1\\;b%c5\t%Z4,%Y3\\;bst\t#0,%R0; bl3\"\n   [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"6\")\n-   (set_attr \"adjust_length\" \"no\")])\n+   (set_attr \"length\" \"6\")])\n \f\n ;; -----------------------------------------------------------------\n ;; COMBINE PATTERNS"}]}