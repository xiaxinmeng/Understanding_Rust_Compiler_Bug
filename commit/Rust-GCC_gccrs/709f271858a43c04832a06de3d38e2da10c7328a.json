{"sha": "709f271858a43c04832a06de3d38e2da10c7328a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA5ZjI3MTg1OGE0M2MwNDgzMmEwNmRlM2QzOGUyZGExMGM3MzI4YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-01-01T19:50:16Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-01-01T19:50:16Z"}, "message": "stubs.c (sinf,cosf): Implement stubs to enable the equivalent ___builtin__ versions.\n\n2002-01-01  Roger Sayle <roger@eyesopen.com>\n\n\t* libmath/stubs.c (sinf,cosf): Implement stubs to enable the\n\tequivalent ___builtin__ versions.\n\n\t* include/c_shadow/bits/std_cmath.h: All __builtin math functions\n\tare available in libstdc++ as the necessary stub implementations\n\tare provided by libmath/stubs.c.\n\nFrom-SVN: r48445", "tree": {"sha": "0cb2bd9c9f9131906d833a31806504614bae987f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb2bd9c9f9131906d833a31806504614bae987f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/709f271858a43c04832a06de3d38e2da10c7328a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709f271858a43c04832a06de3d38e2da10c7328a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709f271858a43c04832a06de3d38e2da10c7328a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709f271858a43c04832a06de3d38e2da10c7328a/comments", "author": null, "committer": null, "parents": [{"sha": "240bb1c62cb98bf5b15bbe8ed5ca14770e6795e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240bb1c62cb98bf5b15bbe8ed5ca14770e6795e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240bb1c62cb98bf5b15bbe8ed5ca14770e6795e9"}], "stats": {"total": 123, "additions": 24, "deletions": 99}, "files": [{"sha": "9d61d6756f321b3a3a85e5074013c1ad9d8cbbda", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709f271858a43c04832a06de3d38e2da10c7328a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709f271858a43c04832a06de3d38e2da10c7328a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=709f271858a43c04832a06de3d38e2da10c7328a", "patch": "@@ -1,3 +1,12 @@\n+2002-01-01  Roger Sayle <roger@eyesopen.com>\n+\n+\t* libmath/stubs.c (sinf,cosf): Implement stubs to enable the\n+\tequivalent ___builtin__ versions.\n+\n+\t* include/c_shadow/bits/std_cmath.h: All __builtin math functions\n+\tare available in libstdc++ as the necessary stub implementations\n+\tare provided by libmath/stubs.c.\n+\n 2002-01-01  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* configure.in: Add support for NetBSD cross compiles.\n@@ -55,7 +64,7 @@\n \n \t* include/backward/algo.h:  Include <ext/algorithm>,\n \ttweak using declarations.\n-\t\n+\n 2001-12-29  Richard Henderson  <rth@redhat.com>\n \n \t* config/os/hpux/bits/os_defines.h: Don't define __glibcpp_long_bits.\n@@ -132,7 +141,7 @@\n \t(back_insert_iterator): Uglify member container to _M_container.\n \t(front_insert_iterator): Same.\n \t(insert_iterator): Same.\n-\t\n+\n 2001-12-25  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* include/bits/std_limits.h (__glibcpp_xxx_is_modulo): New\n@@ -156,7 +165,7 @@\n \tfor strtoll and strtoull.\n \n 2001-12-21  Jeffrey A Law  <law@redhat.com>\n-\t\n+\n \t* config/os/hpux/bits/os_defines.h: Include <sys/_inttypes.h.\n \tDefine strtoll and strtoull.  Provide prototypes for\n \t__strtoll and __strtoull.  Define _GLIBCPP_USE_LONG_LONG\n@@ -206,7 +215,7 @@\n 2001-12-19  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \tlibstdc++-v3/5148\n-\t* testsuite/lib/libstdc++-v3-dg.exp:  Append .exe to \n+\t* testsuite/lib/libstdc++-v3-dg.exp:  Append .exe to\n \texecutable filenames\n \n 2001-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n@@ -222,10 +231,10 @@\n \tenabling gnu model.\n \t* aclocal.m4: Rebuild.\n \t* configure: Rebuild.\n-\t\n+\n 2001-12-18  Paolo Carlini  <pcarlini@unitus.it>\n \t    Nathan Myers  <ncm@cantrip.org>\n-\t\n+\n \t* include/bits/basic_string.h (assign(__str, __pos, __n)):\n \tCall assign(__s, __n).\n \t(assign(__s, __n)): Terminate the string with _S_terminal.\n@@ -275,7 +284,7 @@\n \ton linux by default.\n \t* aclocal.m4: Regenerate.\n \t* configure: Regenerate.\n-\t\n+\n 2001-12-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tClean up initialization and simplfy caching of underlying \"C\"\n@@ -297,11 +306,11 @@\n \t* config/os/gnu-linux/bits/ctype_inline.h: Tweak.\n \t* config/os/gnu-linux/bits/ctype_noninline.h: Adjust initializations.\n \t* include/bits/locale_facets.h (ctype<char>::_M_c_locale_ctype): Add.\n-\tAdjust ctors, dtors. \n+\tAdjust ctors, dtors.\n \t(ctype<char>::_M_toupper): Remove const&.\n \t(ctype<char>::_M_tolower): Remove const&.\n-\t(ctype<char>::_M_ctable): Remove const&.\t\n-\t\n+\t(ctype<char>::_M_ctable): Remove const&.\n+\n \t* include/bits/locale_facets.h (collate): Clean up initialization\n \tof _M_c_locale_collate in ctors and dtors.\n \t* config/locale/collate_members_gnu.cc: Always use extended\n@@ -316,7 +325,7 @@\n \t* include/bits/localefwd.h: Clean. Move dtor definitions to\n \t* src/locale.cc: Here.\n \t* testsuite/22_locale/facet.cc: Fix spelling.\n-\t\n+\n \tNamed locale support for ctype<wchar_t>.\n \t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add variable\n \tctype_members_* bits."}, {"sha": "7201067e303f61492fc3502b72d014a2cf5038e3", "filename": "libstdc++-v3/include/c_shadow/bits/std_cmath.h", "status": "modified", "additions": 1, "deletions": 85, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709f271858a43c04832a06de3d38e2da10c7328a/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709f271858a43c04832a06de3d38e2da10c7328a/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_shadow%2Fbits%2Fstd_cmath.h?ref=709f271858a43c04832a06de3d38e2da10c7328a", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper.\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -84,16 +84,8 @@ namespace _C_legacy {\n   _CPP_ceil_capture(float __x) { return ceil(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE___BUILTIN_COSF\n   inline float \n   _CPP_cos_capture(float __x) { return __builtin_cosf(__x); }\n-#elif _GLIBCPP_HAVE_COSF\n-  inline float \n-  _CPP_cos_capture(float __x) { return cosf(__x); }\n-#else\n-  inline float \n-  _CPP_cos_capture(float __x) { return cos(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_COSHF\n   inline float \n@@ -111,16 +103,8 @@ namespace _C_legacy {\n   _CPP_exp_capture(float __x) { return exp(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE___BUILTIN_FABSF\n   inline float \n   _CPP_fabs_capture(float __x) { return __builtin_fabsf(__x); }\n-#elif _GLIBCPP_HAVE_FABSF\n-  inline float \n-  _CPP_fabs_capture(float __x) { return fabsf(__x); }\n-#else\n-  inline float \n-  _CPP_fabs_capture(float __x) { return fabs(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_FLOORF\n   inline float \n@@ -197,16 +181,8 @@ namespace _C_legacy {\n \n   float pow(float, int);\n \n-#if _GLIBCPP_HAVE___BUILTIN_SINF\n   inline float \n   _CPP_sin_capture(float __x) { return __builtin_sinf(__x); }\n-#elif _GLIBCPP_HAVE_SINF\n-  inline float \n-  _CPP_sin_capture(float __x) { return sinf(__x); }\n-#else\n-  inline float \n-  _CPP_sin_capture(float __x) { return sin(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_SINHF\n   inline float \n@@ -216,16 +192,8 @@ namespace _C_legacy {\n   _CPP_sinh_capture(float __x) { return sinh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE___BUILTIN_SQRTF\n   inline float \n   _CPP_sqrt_capture(float __x) { return __builtin_sqrtf(__x); }\n-#elif _GLIBCPP_HAVE_SQRTF\n-  inline float \n-  _CPP_sqrt_capture(float __x) { return sqrtf(__x); }\n-#else\n-  inline float \n-  _CPP_sqrt_capture(float __x) { return sqrt(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_TANF\n   inline float \n@@ -259,27 +227,17 @@ namespace _C_legacy {\n   inline double \n   _CPP_ceil_capture(double __x) { return ceil(__x); }\n \n-#if _GLIBCPP_HAVE___BUILTIN_COS\n   inline double \n   _CPP_cos_capture(double __x) { return __builtin_cos(__x); }\n-#else\n-  inline double \n-  _CPP_cos_capture(double __x) { return cos(__x); }\n-#endif\n \n   inline double \n   _CPP_cosh_capture(double __x) { return cosh(__x); }\n \n   inline double \n   _CPP_exp_capture(double __x) { return exp(__x); }\n \n-#if _GLIBCPP_HAVE___BUILTIN_FABS\n   inline double \n   _CPP_fabs_capture(double __x) { return __builtin_fabs(__x); }\n-#else\n-  inline double \n-  _CPP_fabs_capture(double __x) { return fabs(__x); }\n-#endif\n \n   inline double \n   _CPP_floor_capture(double __x) { return floor(__x); }\n@@ -305,24 +263,14 @@ namespace _C_legacy {\n   inline double \n   _CPP_pow_capture(double __x, double __y) { return pow(__x, __y); }\n \n-#if _GLIBCPP_HAVE___BUILTIN_SIN\n   inline double \n   _CPP_sin_capture(double __x) { return __builtin_sin(__x); }\n-#else\n-  inline double \n-  _CPP_sin_capture(double __x) { return sin(__x); }\n-#endif\n \n   inline double \n   _CPP_sinh_capture(double __x) { return sinh(__x); }\n \n-#if _GLIBCPP_HAVE___BUILTIN_SQRT\n   inline double \n   _CPP_sqrt_capture(double __x) { return __builtin_sqrt(__x); }\n-#else\n-  inline double \n-  _CPP_sqrt_capture(double __x) { return sqrt(__x); }\n-#endif\n \n   inline double \n   _CPP_tan_capture(double __x) { return tan(__x); }\n@@ -372,16 +320,8 @@ namespace _C_legacy {\n   _CPP_ceil_capture(long double __x) { return ceil(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE___BUILTIN_COSL\n   inline long double \n   _CPP_cos_capture(long double __x) { return __builtin_cosl(__x); }\n-#elif _GLIBCPP_HAVE_COSL\n-  inline long double \n-  _CPP_cos_capture(long double __x) { return cosl(__x); }\n-#else\n-  inline long double \n-  _CPP_cos_capture(long double __x) { return cos(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_COSHL\n   inline long double \n@@ -399,16 +339,8 @@ namespace _C_legacy {\n   _CPP_exp_capture(long double __x) { return exp(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE___BUILTIN_FABSL\n   inline long double \n   _CPP_fabs_capture(long double __x) { return __builtin_fabsl(__x); }\n-#elif _GLIBCPP_HAVE_FABSL\n-  inline long double \n-  _CPP_fabs_capture(long double __x) { return fabsl(__x); }\n-#else\n-  inline long double \n-  _CPP_fabs_capture(long double __x) { return fabs(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_FLOORL\n   inline long double \n@@ -489,16 +421,8 @@ namespace _C_legacy {\n   { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-#if _GLIBCPP_HAVE___BUILTIN_SINL\n   inline long double \n   _CPP_sin_capture(long double __x) { return __builtin_sinl(__x); }\n-#elif _GLIBCPP_HAVE_SINL\n-  inline long double \n-  _CPP_sin_capture(long double __x) { return sinl(__x); }\n-#else\n-  inline long double \n-  _CPP_sin_capture(long double __x) { return sin(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_SINHL\n   inline long double \n@@ -508,16 +432,8 @@ namespace _C_legacy {\n   _CPP_sinh_capture(long double __x) { return sinh(static_cast<double>(__x)); }\n #endif\n \n-#if _GLIBCPP_HAVE___BUILTIN_SQRTL\n   inline long double \n   _CPP_sqrt_capture(long double __x) { return __builtin_sqrtl(__x); }\n-#elif _GLIBCPP_HAVE_SQRTL\n-  inline long double \n-  _CPP_sqrt_capture(long double __x) { return sqrtl(__x); }\n-#else\n-  inline long double \n-  _CPP_sqrt_capture(long double __x) { return sqrt(static_cast<double>(__x)); }\n-#endif\n \n #if _GLIBCPP_HAVE_TANL\n   inline long double "}, {"sha": "586fd6db80e579f26e6c0e9ccf5c970dd25ab37c", "filename": "libstdc++-v3/libmath/stubs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709f271858a43c04832a06de3d38e2da10c7328a/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709f271858a43c04832a06de3d38e2da10c7328a/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c?ref=709f271858a43c04832a06de3d38e2da10c7328a", "patch": "@@ -1,6 +1,6 @@\n /* Stub definitions for libmath subpart of libstdc++. */\n \n-/* Copyright (C) 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n    This file is part of the GNU ISO C++ Library.  This library is free\n    software; you can redistribute it and/or modify it under the\n@@ -51,7 +51,7 @@ atan2l(long double x, long double y)\n #endif\n \n \n-#if !defined(HAVE_COSF) && !defined(HAVE___BUILTIN_COSF)\n+#ifndef HAVE_COSF\n float\n cosf(float x)\n {\n@@ -186,7 +186,7 @@ powl(long double x, long double y)\n #endif\n \n \n-#if !defined(HAVE_SINF) && !defined(HAVE___BUILTIN_SINF)\n+#ifndef HAVE_SINF\n float\n sinf(float x)\n {"}]}