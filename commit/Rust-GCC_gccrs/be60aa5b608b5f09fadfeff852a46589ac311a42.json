{"sha": "be60aa5b608b5f09fadfeff852a46589ac311a42", "node_id": "C_kwDOANBUbNoAKGJlNjBhYTViNjA4YjVmMDlmYWRmZWZmODUyYTQ2NTg5YWMzMTFhNDI", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2022-09-19T20:00:45Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-09-20T18:27:20Z"}, "message": "Fortran: Fix function attributes [PR100132]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100132\n\t* trans-types.cc (create_fn_spec): Fix function attributes when\n\tpassing polymorphic pointers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100132\n\t* gfortran.dg/PR100132.f90: New test.", "tree": {"sha": "8b545ac6dd6885a2ef33392ba1431aa72cd6748f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b545ac6dd6885a2ef33392ba1431aa72cd6748f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be60aa5b608b5f09fadfeff852a46589ac311a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be60aa5b608b5f09fadfeff852a46589ac311a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be60aa5b608b5f09fadfeff852a46589ac311a42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be60aa5b608b5f09fadfeff852a46589ac311a42/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2438b6a4c8df0d1870881e123cc74cc62b7e58e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2438b6a4c8df0d1870881e123cc74cc62b7e58e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2438b6a4c8df0d1870881e123cc74cc62b7e58e8"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "c062a5b29d728cea5bcf23c5081cbb5cce6050e6", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be60aa5b608b5f09fadfeff852a46589ac311a42/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be60aa5b608b5f09fadfeff852a46589ac311a42/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=be60aa5b608b5f09fadfeff852a46589ac311a42", "patch": "@@ -3054,12 +3054,23 @@ create_fn_spec (gfc_symbol *sym, tree fntype)\n   for (f = gfc_sym_get_dummy_args (sym); f; f = f->next)\n     if (spec_len < sizeof (spec))\n       {\n-\tif (!f->sym || f->sym->attr.pointer || f->sym->attr.target\n+\tbool is_class = false;\n+\tbool is_pointer = false;\n+\n+\tif (f->sym)\n+\t  {\n+\t    is_class = f->sym->ts.type == BT_CLASS && CLASS_DATA (f->sym)\n+\t      && f->sym->attr.class_ok;\n+\t    is_pointer = is_class ? CLASS_DATA (f->sym)->attr.class_pointer\n+\t\t\t\t  : f->sym->attr.pointer;\n+\t  }\n+\n+\tif (f->sym == NULL || is_pointer || f->sym->attr.target\n \t    || f->sym->attr.external || f->sym->attr.cray_pointer\n \t    || (f->sym->ts.type == BT_DERIVED\n \t\t&& (f->sym->ts.u.derived->attr.proc_pointer_comp\n \t\t    || f->sym->ts.u.derived->attr.pointer_comp))\n-\t    || (f->sym->ts.type == BT_CLASS\n+\t    || (is_class\n \t\t&& (CLASS_DATA (f->sym)->ts.u.derived->attr.proc_pointer_comp\n \t\t    || CLASS_DATA (f->sym)->ts.u.derived->attr.pointer_comp))\n \t    || (f->sym->ts.type == BT_INTEGER && f->sym->ts.is_c_interop))"}, {"sha": "78ae6702810f5e5717b32bf7c24291e8b936435f", "filename": "gcc/testsuite/gfortran.dg/PR100132.f90", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be60aa5b608b5f09fadfeff852a46589ac311a42/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100132.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be60aa5b608b5f09fadfeff852a46589ac311a42/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100132.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100132.f90?ref=be60aa5b608b5f09fadfeff852a46589ac311a42", "patch": "@@ -0,0 +1,75 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR100132\n+!\n+\n+module main_m\n+  implicit none\n+\n+  private\n+\n+  public :: &\n+    foo_t\n+\n+  public :: &\n+    set,    &\n+    get\n+\n+  type :: foo_t\n+    integer :: i\n+  end type foo_t\n+\n+  type(foo_t), save, pointer :: data => null()\n+\n+contains\n+\n+  subroutine set(this)\n+    class(foo_t), pointer, intent(in) :: this\n+\n+    if(associated(data)) stop 1\n+    data => this\n+  end subroutine set\n+\n+  subroutine get(this)\n+    type(foo_t), pointer, intent(out) :: this\n+\n+    if(.not.associated(data)) stop 4\n+    this => data\n+    nullify(data)\n+  end subroutine get\n+\n+end module main_m\n+\n+program main_p\n+\n+  use :: main_m, only: &\n+    foo_t, set, get\n+\n+  implicit none\n+\n+  integer, parameter :: n = 1000\n+\n+  type(foo_t), pointer :: ps\n+  type(foo_t),  target :: s\n+  integer              :: i, j, yay, nay\n+\n+  yay = 0\n+  nay = 0\n+  do i = 1, n\n+    s%i = i\n+    call set(s)\n+    call get(ps)\n+    if(.not.associated(ps)) stop 13\n+    j = ps%i\n+    if(i/=j) stop 14\n+    if(i/=s%i) stop 15\n+    if(ps%i/=s%i) stop 16\n+    if(associated(ps, s))then\n+      yay = yay + 1\n+    else\n+      nay = nay + 1\n+    end if\n+  end do\n+  if((yay/=n).or.(nay/=0)) stop 17\n+\n+end program main_p"}]}