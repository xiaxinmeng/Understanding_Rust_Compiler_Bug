{"sha": "f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlkY2YxNGFhZThmNzI1ZWQ2MzQ5OWQ3MDk4MGViNzAyOWZkZDJkNQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-12-01T15:33:15Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-12-01T15:33:15Z"}, "message": "S/390: Split MVC instruction for better forwarding\n\nCertain lengths used in an MVC instruction might disable operand\nforwarding.  Split MVCs into up to 2 forwardable ones if possible.\n\ngcc/ChangeLog:\n\n2017-12-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/predicates.md (plus16_Q_operand): New predicate.\n\t* config/s390/s390.md: Disable MVC merging peephole if it would\n\tdisable operand forwarding.\n\t(new peephole2): Split MVCs if it would turn them into up to 2\n\tforwardable MVCs.\n\nFrom-SVN: r255319", "tree": {"sha": "70d7d52fe173cbc868fd789084b2fd243e717ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d7d52fe173cbc868fd789084b2fd243e717ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9dcf14aae8f725ed63499d70980eb7029fdd2d5/comments", "author": null, "committer": null, "parents": [{"sha": "ccd9a1e0ef6ec521734cabd1262a385234b183e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd9a1e0ef6ec521734cabd1262a385234b183e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd9a1e0ef6ec521734cabd1262a385234b183e7"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "77d4c7c81a8eeb47d5bfdca45ac621365990caab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9dcf14aae8f725ed63499d70980eb7029fdd2d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9dcf14aae8f725ed63499d70980eb7029fdd2d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "patch": "@@ -1,3 +1,11 @@\n+2017-12-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/predicates.md (plus16_Q_operand): New predicate.\n+\t* config/s390/s390.md: Disable MVC merging peephole if it would\n+\tdisable operand forwarding.\n+\t(new peephole2): Split MVCs if it would turn them into up to 2\n+\tforwardable MVCs.\n+\n 2017-12-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83232"}, {"sha": "e140b689b0298193215aaf9dc74f7f9e300e391c", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9dcf14aae8f725ed63499d70980eb7029fdd2d5/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9dcf14aae8f725ed63499d70980eb7029fdd2d5/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "patch": "@@ -67,6 +67,25 @@\n   return true;\n })\n \n+;; Return true of the address of the mem operand plus 16 is still a\n+;; valid Q constraint address.\n+\n+(define_predicate \"plus16_Q_operand\"\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"general_operand\"))\n+{\n+  rtx addr = XEXP (op, 0);\n+  if (REG_P (addr))\n+    return true;\n+\n+  if (GET_CODE (addr) != PLUS\n+      || !REG_P (XEXP (addr, 0))\n+      || !CONST_INT_P (XEXP (addr, 1)))\n+    return false;\n+\n+  return SHORT_DISP_IN_RANGE (INTVAL (XEXP (addr, 1)) + 16);\n+})\n+\n ;; Return true if OP is a valid operand for the BRAS instruction.\n ;; Allow SYMBOL_REFs and @PLT stubs.\n "}, {"sha": "093f6f91cefc5c5852bf7edd156b4f8e1afc1391", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9dcf14aae8f725ed63499d70980eb7029fdd2d5/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9dcf14aae8f725ed63499d70980eb7029fdd2d5/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "patch": "@@ -2720,7 +2720,9 @@\n     [(set (match_operand:BLK 3 \"memory_operand\" \"\")\n           (match_operand:BLK 4 \"memory_operand\" \"\"))\n      (use (match_operand 5 \"const_int_operand\" \"\"))])]\n-  \"s390_offset_p (operands[0], operands[3], operands[2])\n+  \"((INTVAL (operands[2]) > 16 && INTVAL (operands[5]) > 16)\n+    || (INTVAL (operands[2]) + INTVAL (operands[5]) <= 16))\n+   && s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n    && !s390_overlap_p (operands[0], operands[1],\n                        INTVAL (operands[2]) + INTVAL (operands[5]))\n@@ -2732,6 +2734,24 @@\n    operands[7] = gen_rtx_MEM (BLKmode, XEXP (operands[1], 0));\n    operands[8] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[5]));\")\n \n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:BLK 0 \"plus16_Q_operand\" \"\")\n+          (match_operand:BLK 1 \"plus16_Q_operand\" \"\"))\n+     (use (match_operand 2 \"const_int_operand\" \"\"))])]\n+  \"INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 32\"\n+  [(parallel\n+    [(set (match_dup 0) (match_dup 1))\n+     (use (const_int 16))])\n+   (parallel\n+    [(set (match_dup 3) (match_dup 4))\n+     (use (match_dup 5))])]\n+  \"operands[3] = change_address (operands[0], VOIDmode,\n+                                 plus_constant (Pmode, XEXP (operands[0], 0), 16));\n+   operands[4] = change_address (operands[1], VOIDmode,\n+                                 plus_constant (Pmode, XEXP (operands[1], 0), 16));\n+   operands[5] = GEN_INT (INTVAL (operands[2]) - 16);\")\n+\n \n ;\n ; load_multiple pattern(s)."}]}