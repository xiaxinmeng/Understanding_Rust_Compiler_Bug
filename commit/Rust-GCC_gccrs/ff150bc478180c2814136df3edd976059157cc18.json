{"sha": "ff150bc478180c2814136df3edd976059157cc18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxNTBiYzQ3ODE4MGMyODE0MTM2ZGYzZWRkOTc2MDU5MTU3Y2MxOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-09T13:01:19Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-09T13:01:19Z"}, "message": "Remove extra memory allocation of strings.\n\n2018-11-09  Martin Liska  <mliska@suse.cz>\n\n\t* config/aarch64/aarch64.c (aarch64_parse_arch): Do not copy\n\tstring to a stack buffer.\n\t(aarch64_parse_cpu): Likewise.\n\t(aarch64_parse_tune): Likewise.\n\nFrom-SVN: r265966", "tree": {"sha": "500341e85f5fe485d0bbb545caaa03c87daa36ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500341e85f5fe485d0bbb545caaa03c87daa36ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff150bc478180c2814136df3edd976059157cc18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff150bc478180c2814136df3edd976059157cc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff150bc478180c2814136df3edd976059157cc18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff150bc478180c2814136df3edd976059157cc18/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89939ff85a7c2ed0c1eb33e51d241f2a6dda0695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89939ff85a7c2ed0c1eb33e51d241f2a6dda0695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89939ff85a7c2ed0c1eb33e51d241f2a6dda0695"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "23accf398da0fbb297deea54a02e0219a8c534ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff150bc478180c2814136df3edd976059157cc18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff150bc478180c2814136df3edd976059157cc18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff150bc478180c2814136df3edd976059157cc18", "patch": "@@ -1,3 +1,10 @@\n+2018-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/aarch64/aarch64.c (aarch64_parse_arch): Do not copy\n+\tstring to a stack buffer.\n+\t(aarch64_parse_cpu): Likewise.\n+\t(aarch64_parse_tune): Likewise.\n+\n 2018-11-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87953"}, {"sha": "815f82457a790d2168a6e4c09444fcc59ea5d081", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff150bc478180c2814136df3edd976059157cc18/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff150bc478180c2814136df3edd976059157cc18/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ff150bc478180c2814136df3edd976059157cc18", "patch": "@@ -10553,19 +10553,16 @@ static enum aarch64_parse_opt_result\n aarch64_parse_arch (const char *to_parse, const struct processor **res,\n \t\t    unsigned long *isa_flags, std::string *invalid_extension)\n {\n-  char *ext;\n+  const char *ext;\n   const struct processor *arch;\n-  char *str = (char *) alloca (strlen (to_parse) + 1);\n   size_t len;\n \n-  strcpy (str, to_parse);\n-\n-  ext = strchr (str, '+');\n+  ext = strchr (to_parse, '+');\n \n   if (ext != NULL)\n-    len = ext - str;\n+    len = ext - to_parse;\n   else\n-    len = strlen (str);\n+    len = strlen (to_parse);\n \n   if (len == 0)\n     return AARCH64_PARSE_MISSING_ARG;\n@@ -10574,7 +10571,8 @@ aarch64_parse_arch (const char *to_parse, const struct processor **res,\n   /* Loop through the list of supported ARCHes to find a match.  */\n   for (arch = all_architectures; arch->name != NULL; arch++)\n     {\n-      if (strlen (arch->name) == len && strncmp (arch->name, str, len) == 0)\n+      if (strlen (arch->name) == len\n+\t  && strncmp (arch->name, to_parse, len) == 0)\n \t{\n \t  unsigned long isa_temp = arch->flags;\n \n@@ -10610,19 +10608,16 @@ static enum aarch64_parse_opt_result\n aarch64_parse_cpu (const char *to_parse, const struct processor **res,\n \t\t   unsigned long *isa_flags, std::string *invalid_extension)\n {\n-  char *ext;\n+  const char *ext;\n   const struct processor *cpu;\n-  char *str = (char *) alloca (strlen (to_parse) + 1);\n   size_t len;\n \n-  strcpy (str, to_parse);\n-\n-  ext = strchr (str, '+');\n+  ext = strchr (to_parse, '+');\n \n   if (ext != NULL)\n-    len = ext - str;\n+    len = ext - to_parse;\n   else\n-    len = strlen (str);\n+    len = strlen (to_parse);\n \n   if (len == 0)\n     return AARCH64_PARSE_MISSING_ARG;\n@@ -10631,7 +10626,7 @@ aarch64_parse_cpu (const char *to_parse, const struct processor **res,\n   /* Loop through the list of supported CPUs to find a match.  */\n   for (cpu = all_cores; cpu->name != NULL; cpu++)\n     {\n-      if (strlen (cpu->name) == len && strncmp (cpu->name, str, len) == 0)\n+      if (strlen (cpu->name) == len && strncmp (cpu->name, to_parse, len) == 0)\n \t{\n \t  unsigned long isa_temp = cpu->flags;\n \n@@ -10665,14 +10660,11 @@ static enum aarch64_parse_opt_result\n aarch64_parse_tune (const char *to_parse, const struct processor **res)\n {\n   const struct processor *cpu;\n-  char *str = (char *) alloca (strlen (to_parse) + 1);\n-\n-  strcpy (str, to_parse);\n \n   /* Loop through the list of supported CPUs to find a match.  */\n   for (cpu = all_cores; cpu->name != NULL; cpu++)\n     {\n-      if (strcmp (cpu->name, str) == 0)\n+      if (strcmp (cpu->name, to_parse) == 0)\n \t{\n \t  *res = cpu;\n \t  return AARCH64_PARSE_OK;"}]}