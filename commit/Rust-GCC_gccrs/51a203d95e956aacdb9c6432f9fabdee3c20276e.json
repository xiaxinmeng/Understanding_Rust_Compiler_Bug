{"sha": "51a203d95e956aacdb9c6432f9fabdee3c20276e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhMjAzZDk1ZTk1NmFhY2RiOWM2NDMyZjlmYWJkZWUzYzIwMjc2ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-10-02T04:12:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-10-02T04:12:51Z"}, "message": "re PR c++/29105 (segfault in add_candidates with a non template base class and a template member function)\n\n\tPR c++/29105\n\t* pt.c (tsubst_baselink): Substituteinto the qualifying scope.\n\t* semantics.c (baselink_for_fns): Build a baselink, even when\n\tprocessing a template.\n\tPR c++/29105\n\t* g++.dg/template/member6.C: New test.\n\t* g++.dg/parse/typename7.C: Adjust error markers.\n\nFrom-SVN: r117361", "tree": {"sha": "7285435b8401e2a391cb80997c0b09f992dfd968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7285435b8401e2a391cb80997c0b09f992dfd968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51a203d95e956aacdb9c6432f9fabdee3c20276e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a203d95e956aacdb9c6432f9fabdee3c20276e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a203d95e956aacdb9c6432f9fabdee3c20276e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a203d95e956aacdb9c6432f9fabdee3c20276e/comments", "author": null, "committer": null, "parents": [{"sha": "297d410513c658b50550f02b0e7cd914b0551630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297d410513c658b50550f02b0e7cd914b0551630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297d410513c658b50550f02b0e7cd914b0551630"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "3106023d89a678c4cf0b5eb81f8e086656e928af", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=51a203d95e956aacdb9c6432f9fabdee3c20276e", "patch": "@@ -7779,15 +7779,15 @@ tsubst_baselink (tree baselink, tree object_type,\n     tree template_args = 0;\n     bool template_id_p = false;\n \n-    /* A baselink indicates a function from a base class.  The\n-       BASELINK_ACCESS_BINFO and BASELINK_BINFO are going to have\n-       non-dependent types; otherwise, the lookup could not have\n-       succeeded.  However, they may indicate bases of the template\n-       class, rather than the instantiated class.\n-\n-       In addition, lookups that were not ambiguous before may be\n-       ambiguous now.  Therefore, we perform the lookup again.  */\n+    /* A baselink indicates a function from a base class.  Both the\n+       BASELINK_ACCESS_BINFO and the base class referenced may\n+       indicate bases of the template class, rather than the\n+       instantiated class.  In addition, lookups that were not\n+       ambiguous before may be ambiguous now.  Therefore, we perform\n+       the lookup again.  */\n     qualifying_scope = BINFO_TYPE (BASELINK_ACCESS_BINFO (baselink));\n+    qualifying_scope = tsubst (qualifying_scope, args,\n+\t\t\t       complain, in_decl);\n     fns = BASELINK_FUNCTIONS (baselink);\n     optype = BASELINK_OPTYPE (baselink);\n     if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)"}, {"sha": "91d200a588e8179432c68f6ccaa049173ac20edd", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=51a203d95e956aacdb9c6432f9fabdee3c20276e", "patch": "@@ -2400,7 +2400,6 @@ baselink_for_fns (tree fns)\n   tree cl;\n \n   if (BASELINK_P (fns) \n-      || processing_template_decl\n       || error_operand_p (fns))\n     return fns;\n   "}, {"sha": "3cee4bac68bf7fbbe1b10b2e7bffa7ae9b7ce2a2", "filename": "gcc/testsuite/g++.dg/parse/typename7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename7.C?ref=51a203d95e956aacdb9c6432f9fabdee3c20276e", "patch": "@@ -11,7 +11,7 @@ struct A\n   template<typename T> void bar(T t) {\n     this->foo<typename T>(t); } // { dg-error \"expected|parse error|no matching\" }\n   template<typename T> void bad(T t) {\n-    foo<typename T>(t); } // { dg-error \"expected|parse error\" }\n+    foo<typename T>(t); } // { dg-error \"expected|parse error|no matching\" }\n };\n \n template <typename T>"}, {"sha": "7d66e7bdae613ac816cf696e53106274c31ad2c2", "filename": "gcc/testsuite/g++.dg/template/member6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a203d95e956aacdb9c6432f9fabdee3c20276e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember6.C?ref=51a203d95e956aacdb9c6432f9fabdee3c20276e", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/29105\n+\n+struct Observer\n+{\n+  template < typename T > void observeComponent ();\n+};\n+\n+template < typename T >\n+struct TagFilter : Observer\n+{\n+  TagFilter ()\n+  {\n+    observeComponent < int > ();\n+  }\n+};\n+"}]}