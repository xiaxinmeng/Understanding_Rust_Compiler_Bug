{"sha": "aebde504ad45f511fbc01e81a1c4b829c0a86379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViZGU1MDRhZDQ1ZjUxMWZiYzAxZTgxYTFjNGI4MjljMGE4NjM3OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-07-04T00:22:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-07-04T00:22:31Z"}, "message": "alloc-pool.c (hash_descriptor, [...]): Fix -Wc++-compat warnings.\n\n\t* alloc-pool.c (hash_descriptor, eq_descriptor,\n\talloc_pool_descriptor): Fix -Wc++-compat warnings.\n\t* bitmap.c (hash_descriptor, eq_descriptor, bitmap_descriptor):\n\tLikewise.\n\t* ggc-common.c (hash_descriptor, eq_descriptor, hash_ptr, eq_ptr,\n\tloc_descriptor, ggc_prune_ptr, ggc_free_overhead,\n\tfinal_cmp_statistic, cmp_statistic, dump_ggc_loc_statistics):\n\tLikewise.\n\t* varray.c (hash_descriptor, eq_descriptor, varray_descriptor):\n\tLikewise.\n\nFrom-SVN: r137446", "tree": {"sha": "e38528c1314ca502032e5d589afa8b97dd2e7f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e38528c1314ca502032e5d589afa8b97dd2e7f61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aebde504ad45f511fbc01e81a1c4b829c0a86379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebde504ad45f511fbc01e81a1c4b829c0a86379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aebde504ad45f511fbc01e81a1c4b829c0a86379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebde504ad45f511fbc01e81a1c4b829c0a86379/comments", "author": null, "committer": null, "parents": [{"sha": "623d9580064bbb06e93b9b3f55f62907533f33e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623d9580064bbb06e93b9b3f55f62907533f33e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623d9580064bbb06e93b9b3f55f62907533f33e0"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "dd3ece4d710050ac3e8cf31c031cd40c439f5ab7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aebde504ad45f511fbc01e81a1c4b829c0a86379", "patch": "@@ -1,3 +1,16 @@\n+2008-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alloc-pool.c (hash_descriptor, eq_descriptor,\n+\talloc_pool_descriptor): Fix -Wc++-compat warnings.\n+\t* bitmap.c (hash_descriptor, eq_descriptor, bitmap_descriptor):\n+\tLikewise.\n+\t* ggc-common.c (hash_descriptor, eq_descriptor, hash_ptr, eq_ptr,\n+\tloc_descriptor, ggc_prune_ptr, ggc_free_overhead,\n+\tfinal_cmp_statistic, cmp_statistic, dump_ggc_loc_statistics):\n+\tLikewise.\n+\t* varray.c (hash_descriptor, eq_descriptor, varray_descriptor):\n+\tLikewise.\n+\n 2008-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-flow.h (loop_only_exit_p): Declare."}, {"sha": "7f0dc8ce7d2009005f0e2d57826faa1a10afe812", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=aebde504ad45f511fbc01e81a1c4b829c0a86379", "patch": "@@ -81,13 +81,15 @@ static htab_t alloc_pool_hash;\n static hashval_t\n hash_descriptor (const void *p)\n {\n-  const struct alloc_pool_descriptor *d = p;\n+  const struct alloc_pool_descriptor *const d =\n+    (const struct alloc_pool_descriptor * )p;\n   return htab_hash_pointer (d->name);\n }\n static int\n eq_descriptor (const void *p1, const void *p2)\n {\n-  const struct alloc_pool_descriptor *d = p1;\n+  const struct alloc_pool_descriptor *const d =\n+    (const struct alloc_pool_descriptor *) p1;\n   return d->name == p2;\n }\n \n@@ -106,7 +108,7 @@ alloc_pool_descriptor (const char *name)\n \t\t\t      1);\n   if (*slot)\n     return *slot;\n-  *slot = xcalloc (sizeof (**slot), 1);\n+  *slot = XCNEW (struct alloc_pool_descriptor);\n   (*slot)->name = name;\n   return *slot;\n }"}, {"sha": "5e841e067a5e5fd2b8da5b2cdefbdfdf7a2069f5", "filename": "gcc/bitmap.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=aebde504ad45f511fbc01e81a1c4b829c0a86379", "patch": "@@ -51,7 +51,8 @@ static htab_t bitmap_desc_hash;\n static hashval_t\n hash_descriptor (const void *p)\n {\n-  const struct bitmap_descriptor *const d = p;\n+  const struct bitmap_descriptor *const d =\n+    (const struct bitmap_descriptor *) p;\n   return htab_hash_pointer (d->file) + d->line;\n }\n struct loc\n@@ -63,8 +64,9 @@ struct loc\n static int\n eq_descriptor (const void *p1, const void *p2)\n {\n-  const struct bitmap_descriptor *const d = p1;\n-  const struct loc *const l = p2;\n+  const struct bitmap_descriptor *const d =\n+    (const struct bitmap_descriptor *) p1;\n+  const struct loc *const l = (const struct loc *) p2;\n   return d->file == l->file && d->function == l->function && d->line == l->line;\n }\n \n@@ -88,7 +90,7 @@ bitmap_descriptor (const char *file, const char *function, int line)\n \t\t\t      1);\n   if (*slot)\n     return *slot;\n-  *slot = xcalloc (sizeof (**slot), 1);\n+  *slot = XCNEW (struct bitmap_descriptor);\n   (*slot)->file = file;\n   (*slot)->function = function;\n   (*slot)->line = line;"}, {"sha": "d1022a1da85ef20e8726ba5052c497a2c5e37aa9", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=aebde504ad45f511fbc01e81a1c4b829c0a86379", "patch": "@@ -791,16 +791,16 @@ static htab_t loc_hash;\n static hashval_t\n hash_descriptor (const void *p)\n {\n-  const struct loc_descriptor *const d = p;\n+  const struct loc_descriptor *const d = (const struct loc_descriptor *) p;\n \n   return htab_hash_pointer (d->function) | d->line;\n }\n \n static int\n eq_descriptor (const void *p1, const void *p2)\n {\n-  const struct loc_descriptor *const d = p1;\n-  const struct loc_descriptor *const d2 = p2;\n+  const struct loc_descriptor *const d = (const struct loc_descriptor *) p1;\n+  const struct loc_descriptor *const d2 = (const struct loc_descriptor *) p2;\n \n   return (d->file == d2->file && d->line == d2->line\n \t  && d->function == d2->function);\n@@ -819,15 +819,15 @@ struct ptr_hash_entry\n static hashval_t\n hash_ptr (const void *p)\n {\n-  const struct ptr_hash_entry *const d = p;\n+  const struct ptr_hash_entry *const d = (const struct ptr_hash_entry *) p;\n \n   return htab_hash_pointer (d->ptr);\n }\n \n static int\n eq_ptr (const void *p1, const void *p2)\n {\n-  const struct ptr_hash_entry *const p = p1;\n+  const struct ptr_hash_entry *const p = (const struct ptr_hash_entry *) p1;\n \n   return (p->ptr == p2);\n }\n@@ -848,7 +848,7 @@ loc_descriptor (const char *name, int line, const char *function)\n   slot = (struct loc_descriptor **) htab_find_slot (loc_hash, &loc, 1);\n   if (*slot)\n     return *slot;\n-  *slot = xcalloc (sizeof (**slot), 1);\n+  *slot = XCNEW (struct loc_descriptor);\n   (*slot)->file = name;\n   (*slot)->line = line;\n   (*slot)->function = function;\n@@ -883,7 +883,7 @@ ggc_record_overhead (size_t allocated, size_t overhead, void *ptr,\n static int\n ggc_prune_ptr (void **slot, void *b ATTRIBUTE_UNUSED)\n {\n-  struct ptr_hash_entry *p = *slot;\n+  struct ptr_hash_entry *p = (struct ptr_hash_entry *) *slot;\n   if (!ggc_marked_p (p->ptr))\n     {\n       p->loc->collected += p->size;\n@@ -907,7 +907,7 @@ ggc_free_overhead (void *ptr)\n {\n   PTR *slot = htab_find_slot_with_hash (ptr_hash, ptr, htab_hash_pointer (ptr),\n \t\t\t\t\tNO_INSERT);\n-  struct ptr_hash_entry *p = *slot;\n+  struct ptr_hash_entry *p = (struct ptr_hash_entry *) *slot;\n   p->loc->freed += p->size;\n   htab_clear_slot (ptr_hash, slot);\n   free (p);\n@@ -917,8 +917,10 @@ ggc_free_overhead (void *ptr)\n static int\n final_cmp_statistic (const void *loc1, const void *loc2)\n {\n-  struct loc_descriptor *l1 = *(struct loc_descriptor **) loc1;\n-  struct loc_descriptor *l2 = *(struct loc_descriptor **) loc2;\n+  const struct loc_descriptor *const l1 =\n+    *(const struct loc_descriptor *const *) loc1;\n+  const struct loc_descriptor *const l2 =\n+    *(const struct loc_descriptor *const *) loc2;\n   long diff;\n   diff = ((long)(l1->allocated + l1->overhead - l1->freed) -\n \t  (l2->allocated + l2->overhead - l2->freed));\n@@ -929,8 +931,10 @@ final_cmp_statistic (const void *loc1, const void *loc2)\n static int\n cmp_statistic (const void *loc1, const void *loc2)\n {\n-  struct loc_descriptor *l1 = *(struct loc_descriptor **) loc1;\n-  struct loc_descriptor *l2 = *(struct loc_descriptor **) loc2;\n+  const struct loc_descriptor *const l1 =\n+    *(const struct loc_descriptor *const *) loc1;\n+  const struct loc_descriptor *const l2 =\n+    *(const struct loc_descriptor *const *) loc2;\n   long diff;\n \n   diff = ((long)(l1->allocated + l1->overhead - l1->freed - l1->collected) -\n@@ -967,7 +971,7 @@ dump_ggc_loc_statistics (bool final ATTRIBUTE_UNUSED)\n   ggc_force_collect = true;\n   ggc_collect ();\n \n-  loc_array = xcalloc (sizeof (*loc_array), loc_hash->n_elements);\n+  loc_array = XCNEWVEC (struct loc_descriptor *, loc_hash->n_elements);\n   fprintf (stderr, \"-------------------------------------------------------\\n\");\n   fprintf (stderr, \"\\n%-48s %10s       %10s       %10s       %10s       %10s\\n\",\n \t   \"source location\", \"Garbage\", \"Freed\", \"Leak\", \"Overhead\", \"Times\");"}, {"sha": "6464a816652e288a8a6954195d08bdf141208a8c", "filename": "gcc/varray.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebde504ad45f511fbc01e81a1c4b829c0a86379/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=aebde504ad45f511fbc01e81a1c4b829c0a86379", "patch": "@@ -49,13 +49,13 @@ static htab_t varray_hash;\n static hashval_t\n hash_descriptor (const void *p)\n {\n-  const struct varray_descriptor *d = p;\n+  const struct varray_descriptor *d = (const struct varray_descriptor *) p;\n   return htab_hash_pointer (d->name);\n }\n static int\n eq_descriptor (const void *p1, const void *p2)\n {\n-  const struct varray_descriptor *d = p1;\n+  const struct varray_descriptor *d = (const struct varray_descriptor *) p1;\n   return d->name == p2;\n }\n \n@@ -74,7 +74,7 @@ varray_descriptor (const char *name)\n \t\t\t      1);\n   if (*slot)\n     return *slot;\n-  *slot = xcalloc (sizeof (**slot), 1);\n+  *slot = XCNEW (struct varray_descriptor);\n   (*slot)->name = name;\n   return *slot;\n }"}]}