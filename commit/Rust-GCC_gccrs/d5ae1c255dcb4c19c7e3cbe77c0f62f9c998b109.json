{"sha": "d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhZTFjMjU1ZGNiNGMxOWM3ZTNjYmU3N2MwZjYyZjljOTk4YjEwOQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2013-11-14T00:10:24Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2013-11-14T00:10:24Z"}, "message": "Add is_tm_ending\n\n2013-11-14  Tom de Vries  <tom@codesourcery.com>\n\n\t* trans-mem.c (is_tm_ending): New function.\n\t* gimple.h (is_tm_ending): Declare.\n\t* tree-ssa-tail-merge.c (gimple_equal_p): Remove test on\n\tBUILT_IN_TM_COMMIT.\n\t(find_duplicate): Use is_tm_ending instead of is_tm_ending_fndecl.\n\nFrom-SVN: r204765", "tree": {"sha": "9399a3d930c606d932f13d9c33e08e1b075ecf66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9399a3d930c606d932f13d9c33e08e1b075ecf66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/comments", "author": null, "committer": null, "parents": [{"sha": "2f1aee044cb8edb759a20f6cace56fad368d35fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1aee044cb8edb759a20f6cace56fad368d35fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1aee044cb8edb759a20f6cace56fad368d35fa"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "1afd8c03b61de72300f543f89cc06d020f333dc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "patch": "@@ -1,3 +1,11 @@\n+2013-11-14  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* trans-mem.c (is_tm_ending): New function.\n+\t* gimple.h (is_tm_ending): Declare.\n+\t* tree-ssa-tail-merge.c (gimple_equal_p): Remove test on\n+\tBUILT_IN_TM_COMMIT.\n+\t(find_duplicate): Use is_tm_ending instead of is_tm_ending_fndecl.\n+\n 2013-11-14  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-tail-merge.c (gimple_equal_p): Remove equal variable."}, {"sha": "9ed323899a8d942d727465f43c4238089097e254", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "patch": "@@ -957,6 +957,7 @@ extern bool infer_nonnull_range (gimple, tree);\n /* In trans-mem.c.  */\n extern void diagnose_tm_safe_errors (tree);\n extern void compute_transaction_bits (void);\n+extern bool is_tm_ending (gimple);\n \n /* In tree-nested.c.  */\n extern void lower_nested_functions (tree);"}, {"sha": "748fd5edf603dd66200ac4851c5e1c50de1f9b3d", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "patch": "@@ -323,6 +323,22 @@ is_tm_ending_fndecl (tree fndecl)\n   return false;\n }\n \n+/* Return true if STMT is a built in function call that \"ends\" a\n+   transaction.  */\n+\n+bool\n+is_tm_ending (gimple stmt)\n+{\n+  tree fndecl;\n+\n+  if (gimple_code (stmt) != GIMPLE_CALL)\n+    return false;\n+\n+  fndecl = gimple_call_fndecl (stmt);\n+  return (fndecl != NULL_TREE\n+\t  && is_tm_ending_fndecl (fndecl));\n+}\n+\n /* Return true if STMT is a TM load.  */\n \n static bool"}, {"sha": "09670857a59602dda3916374ddd365f772e7441f", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=d5ae1c255dcb4c19c7e3cbe77c0f62f9c998b109", "patch": "@@ -1100,14 +1100,6 @@ gimple_equal_p (same_succ same_succ, gimple s1, gimple s2)\n       if (!gimple_call_same_target_p (s1, s2))\n         return false;\n \n-      /* Eventually, we'll significantly complicate the CFG by adding\n-\t back edges to properly model the effects of transaction restart.\n-\t For the bulk of optimization this does not matter, but what we\n-\t cannot recover from is tail merging blocks between two separate\n-\t transactions.  Avoid that by making commit not match.  */\n-      if (gimple_call_builtin_p (s1, BUILT_IN_TM_COMMIT))\n-\treturn false;\n-\n       for (i = 0; i < gimple_call_num_args (s1); ++i)\n \t{\n \t  t1 = gimple_call_arg (s1, i);\n@@ -1221,15 +1213,14 @@ find_duplicate (same_succ same_succ, basic_block bb1, basic_block bb2)\n       gimple stmt1 = gsi_stmt (gsi1);\n       gimple stmt2 = gsi_stmt (gsi2);\n \n-      if (!gimple_equal_p (same_succ, stmt1, stmt2))\n+      /* What could be better than to this this here is to blacklist the bb\n+\t containing the stmt, when encountering the stmt f.i. in\n+\t same_succ_hash.  */\n+      if (is_tm_ending (stmt1)\n+\t  || is_tm_ending (stmt2))\n \treturn;\n \n-      // We cannot tail-merge the builtins that end transactions.\n-      // ??? The alternative being unsharing of BBs in the tm_init pass.\n-      if (flag_tm\n-\t  && is_gimple_call (stmt1)\n-\t  && (gimple_call_flags (stmt1) & ECF_TM_BUILTIN)\n-\t  && is_tm_ending_fndecl (gimple_call_fndecl (stmt1)))\n+      if (!gimple_equal_p (same_succ, stmt1, stmt2))\n \treturn;\n \n       gsi_prev_nondebug (&gsi1);"}]}