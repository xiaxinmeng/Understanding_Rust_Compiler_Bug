{"sha": "a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5YjNkYzdjOGQzZTljN2NkZDViYWI5ZjhmNWFlMzg0MWE5NTc2NA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-03T17:13:06Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-03T17:13:06Z"}, "message": "expr.c (emit_move_insn_1): Use emit_move_insn to move the parts of a complex number rather than invoke...\n\n\n\t* expr.c (emit_move_insn_1): Use emit_move_insn to move the parts\n\tof a complex number rather than invoke mov_optab directly.\n\nFrom-SVN: r67389", "tree": {"sha": "865257de4c304400e40d2ca0e86dd329c4ba7fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/865257de4c304400e40d2ca0e86dd329c4ba7fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764/comments", "author": null, "committer": null, "parents": [{"sha": "8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "91e3bea8fd7bea8316df4024851681ec06c4b69a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764", "patch": "@@ -1,3 +1,8 @@\n+2003-06-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expr.c (emit_move_insn_1): Use emit_move_insn to move the parts\n+\tof a complex number rather than invoke mov_optab directly.\n+\n 2003-06-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* combine.c (simplify_set): Don't move a subreg in SET_SRC to"}, {"sha": "7adaca00565d701b677f81dacfa696e9f8c0e60c", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a79b3dc7c8d3e9c7cdd5bab9f8f5ae3841a95764", "patch": "@@ -3394,19 +3394,15 @@ emit_move_insn_1 (x, y)\n \t  /* Note that the real part always precedes the imag part in memory\n \t     regardless of machine's endianness.  */\n #ifdef STACK_GROWS_DOWNWARD\n-\t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (gen_rtx_MEM (submode, XEXP (x, 0)),\n-\t\t      gen_imagpart (submode, y)));\n-\t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (gen_rtx_MEM (submode, XEXP (x, 0)),\n-\t\t      gen_realpart (submode, y)));\n+\t  emit_move_insn (gen_rtx_MEM (submode, XEXP (x, 0)),\n+\t\t\t  gen_imagpart (submode, y));\n+\t  emit_move_insn (gen_rtx_MEM (submode, XEXP (x, 0)),\n+\t\t\t  gen_realpart (submode, y));\n #else\n-\t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (gen_rtx_MEM (submode, XEXP (x, 0)),\n-\t\t      gen_realpart (submode, y)));\n-\t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (gen_rtx_MEM (submode, XEXP (x, 0)),\n-\t\t      gen_imagpart (submode, y)));\n+\t  emit_move_insn (gen_rtx_MEM (submode, XEXP (x, 0)),\n+\t\t\t  gen_realpart (submode, y));\n+\t  emit_move_insn (gen_rtx_MEM (submode, XEXP (x, 0)),\n+\t\t\t  gen_imagpart (submode, y));\n #endif\n \t}\n       else\n@@ -3481,10 +3477,8 @@ emit_move_insn_1 (x, y)\n \t\t  || GET_CODE (imagpart_x) == SUBREG))\n \t    emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n \n-\t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (realpart_x, realpart_y));\n-\t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (imagpart_x, imagpart_y));\n+\t  emit_move_insn (realpart_x, realpart_y);\n+\t  emit_move_insn (imagpart_x, imagpart_y);\n \t}\n \n       return get_last_insn ();"}]}