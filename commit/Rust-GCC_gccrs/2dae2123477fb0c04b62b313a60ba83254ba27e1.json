{"sha": "2dae2123477fb0c04b62b313a60ba83254ba27e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhZTIxMjM0NzdmYjBjMDRiNjJiMzEzYTYwYmE4MzI1NGJhMjdlMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-01T12:55:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-01T12:55:22Z"}, "message": "re PR target/91472 (gmp testsuite segfaults with gcc-8 and gcc-9, works fine with gcc-7)\n\n\tPR target/91472\n\t* config/sparc/sparc.c (sparc_cannot_force_const_mem): Return true\n\tduring LRA/reload in PIC mode if the PIC register hasn't been used yet.\n\t(sparc_pic_register_p): Test reload_in_progress for consistency's sake.\n\nFrom-SVN: r275270", "tree": {"sha": "63766c621dbcbcff02e92170ef9557e1d69ff3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63766c621dbcbcff02e92170ef9557e1d69ff3c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dae2123477fb0c04b62b313a60ba83254ba27e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dae2123477fb0c04b62b313a60ba83254ba27e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dae2123477fb0c04b62b313a60ba83254ba27e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dae2123477fb0c04b62b313a60ba83254ba27e1/comments", "author": null, "committer": null, "parents": [{"sha": "70570ec1927450952efc5baa4de3254507352f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70570ec1927450952efc5baa4de3254507352f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70570ec1927450952efc5baa4de3254507352f09"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "f17b4d563382e10f0bada7c1f85bb6dae0c38744", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dae2123477fb0c04b62b313a60ba83254ba27e1", "patch": "@@ -1,3 +1,10 @@\n+2019-09-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/91472\n+\t* config/sparc/sparc.c (sparc_cannot_force_const_mem): Return true\n+\tduring LRA/reload in PIC mode if the PIC register hasn't been used yet.\n+\t(sparc_pic_register_p): Test reload_in_progress for consistency's sake.\n+\n 2019-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91623"}, {"sha": "634a3343eb0905d03b391b4d0d029ad99aeab5d2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2dae2123477fb0c04b62b313a60ba83254ba27e1", "patch": "@@ -4201,6 +4201,13 @@ eligible_for_sibcall_delay (rtx_insn *trial)\n static bool\n sparc_cannot_force_const_mem (machine_mode mode, rtx x)\n {\n+  /* After IRA has run in PIC mode, it is too late to put anything into the\n+     constant pool if the PIC register hasn't already been initialized.  */\n+  if ((lra_in_progress || reload_in_progress)\n+      && flag_pic\n+      && !crtl->uses_pic_offset_table)\n+    return true;\n+\n   switch (GET_CODE (x))\n     {\n     case CONST_INT:\n@@ -4450,7 +4457,7 @@ sparc_pic_register_p (rtx x)\n     return true;\n \n   if (!HARD_REGISTER_P (pic_offset_table_rtx)\n-      && (HARD_REGISTER_P (x) || lra_in_progress)\n+      && (HARD_REGISTER_P (x) || lra_in_progress || reload_in_progress)\n       && ORIGINAL_REGNO (x) == REGNO (pic_offset_table_rtx))\n     return true;\n "}, {"sha": "72c0abb5d3d6131dbfa0ac2ac6186f3b91bc5868", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dae2123477fb0c04b62b313a60ba83254ba27e1", "patch": "@@ -1,3 +1,7 @@\n+2019-09-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20190901-1.c: New test.\n+\n 2019-09-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* gfortran.dg/select_rank_1.f90 : New test."}, {"sha": "c78715ef2c17459ef5718674a68d79fcee52efb5", "filename": "gcc/testsuite/gcc.c-torture/execute/20190901-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20190901-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dae2123477fb0c04b62b313a60ba83254ba27e1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20190901-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20190901-1.c?ref=2dae2123477fb0c04b62b313a60ba83254ba27e1", "patch": "@@ -0,0 +1,36 @@\n+/* PR target/91472 */\n+/* Reported by John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de> */\n+\n+typedef unsigned int gmp_uint_least32_t;\n+\n+union ieee_double_extract\n+{\n+  struct\n+    {\n+      gmp_uint_least32_t sig:1;\n+      gmp_uint_least32_t exp:11;\n+      gmp_uint_least32_t manh:20;\n+      gmp_uint_least32_t manl:32;\n+    } s;\n+  double d;\n+};\n+\n+double __attribute__((noipa))\n+tests_infinity_d (void)\n+{\n+  union ieee_double_extract x;\n+  x.s.exp = 2047;\n+  x.s.manl = 0;\n+  x.s.manh = 0;\n+  x.s.sig = 0;\n+  return x.d;\n+}\n+\n+int\n+main (void)\n+{\n+  double x = tests_infinity_d ();\n+  if (x == 0.0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}