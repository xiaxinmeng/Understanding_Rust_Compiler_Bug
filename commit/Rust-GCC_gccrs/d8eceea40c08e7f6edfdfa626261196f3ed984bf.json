{"sha": "d8eceea40c08e7f6edfdfa626261196f3ed984bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlY2VlYTQwYzA4ZTdmNmVkZmRmYTYyNjI2MTE5NmYzZWQ5ODRiZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-23T17:32:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-23T17:32:50Z"}, "message": "c-common.c (print_char_table): Allow 'I' flag with %d, %i and %u.\n\n\t* c-common.c (print_char_table): Allow 'I' flag with %d, %i and\n\t%u.\n\t(check_format_info): Support printf 'I' flag; warn about it with\n\t-pedantic.\n\ntestsuite:\n\t* gcc.dg/c99-printf-2.c, gcc.dg/format-xopen-1.c: Add some more\n\ttests.\n\t* gcc.dg/format-ext-1.c: New test.\n\nFrom-SVN: r35917", "tree": {"sha": "c869af75d7bb91fddb17021a212270ef0d8aa8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c869af75d7bb91fddb17021a212270ef0d8aa8fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8eceea40c08e7f6edfdfa626261196f3ed984bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8eceea40c08e7f6edfdfa626261196f3ed984bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8eceea40c08e7f6edfdfa626261196f3ed984bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8eceea40c08e7f6edfdfa626261196f3ed984bf/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94350948fbd3d9e2157f2e39903c78ca0661a25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94350948fbd3d9e2157f2e39903c78ca0661a25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94350948fbd3d9e2157f2e39903c78ca0661a25b"}], "stats": {"total": 145, "additions": 142, "deletions": 3}, "files": [{"sha": "8601f3301e63dce07a83f263a7e135c195f1d85e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8eceea40c08e7f6edfdfa626261196f3ed984bf", "patch": "@@ -1,3 +1,10 @@\n+2000-08-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (print_char_table): Allow 'I' flag with %d, %i and\n+\t%u.\n+\t(check_format_info): Support printf 'I' flag; warn about it with\n+\t-pedantic.\n+\n 2000-08-23  Richard Earnshaw  (rearnsha@arm.com)\n \n \t* arm.c (arm_expand_prologue): Ensure that the stack-adjustment"}, {"sha": "689ad73acfb28341966f41f907f1df3c38e128a3", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d8eceea40c08e7f6edfdfa626261196f3ed984bf", "patch": "@@ -1236,9 +1236,9 @@ typedef struct {\n } format_char_info;\n \n static format_char_info print_char_table[] = {\n-  { \"di\",\t0,\tT_I,\tT_I,\tT_I,\tT_L,\tT_LL,\tT_LL,\tT_SST,\tT_PD,\tT_IM,\t\"-wp0 +'\"\t},\n+  { \"di\",\t0,\tT_I,\tT_I,\tT_I,\tT_L,\tT_LL,\tT_LL,\tT_SST,\tT_PD,\tT_IM,\t\"-wp0 +'I\"\t},\n   { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"-wp0#\"\t\t},\n-  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"-wp0'\"\t\t},\n+  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"-wp0'I\"\t\t},\n /* A GNU extension.  */\n   { \"m\",\t0,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n   { \"fFgG\",\t0,\tT_D,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"-wp0 +#'\"\t},\n@@ -1916,7 +1916,7 @@ check_format_info (info, params)\n \t\thas_operand_number = 0;\n \t    }\n \n-\t  while (*format_chars != 0 && index (\" +#0-'\", *format_chars) != 0)\n+\t  while (*format_chars != 0 && index (\" +#0-'I\", *format_chars) != 0)\n \t    {\n \t      if (index (flag_chars, *format_chars) != 0)\n \t\twarning (\"repeated `%c' flag in format\", *format_chars++);\n@@ -1939,6 +1939,8 @@ check_format_info (info, params)\n \t    warning (\"use of both `0' and `-' flags in format\");\n \t  if (index (flag_chars, '\\'') && pedantic)\n \t    warning (\"ISO C does not support the `'' format flag\");\n+\t  if (index (flag_chars, 'I') && pedantic)\n+\t    warning (\"ISO C does not support the `I' format flag\");\n \t  if (*format_chars == '*')\n \t    {\n \t      wide = TRUE;"}, {"sha": "c9c9a74ee519b8809b9f250aa2f332c9e4b23286", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8eceea40c08e7f6edfdfa626261196f3ed984bf", "patch": "@@ -1,3 +1,9 @@\n+2000-08-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-printf-2.c, gcc.dg/format-xopen-1.c: Add some more\n+\ttests.\n+\t* gcc.dg/format-ext-1.c: New test.\n+\n 2000-08-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/cpp/tr-warn4.c, gcc.dg/cpp/tr-warn5.c,"}, {"sha": "26b9de97f9274ca45a50d44a5469c82f7c06c3bb", "filename": "gcc/testsuite/gcc.dg/c99-printf-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-2.c?ref=d8eceea40c08e7f6edfdfa626261196f3ed984bf", "patch": "@@ -31,4 +31,6 @@ foo (int i, long long ll, size_t z, wint_t lc, wchar_t *ls)\n   */\n   printf (\"%'d\", i); /* { dg-warning \"C\" \"printf ' flag\" } */\n   printf (\"%1$d\", i); /* { dg-warning \"C\" \"printf $ format\" } */\n+  /* The flag character I is a GNU extension.  */\n+  printf (\"%Id\", i); /* { dg-warning \"C\" \"printf I flag\" } */\n }"}, {"sha": "d844638069bbfe63f00a48acc1aa193cfbdb7ca1", "filename": "gcc/testsuite/gcc.dg/format-ext-1.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-1.c?ref=d8eceea40c08e7f6edfdfa626261196f3ed984bf", "patch": "@@ -0,0 +1,120 @@\n+/* Test for format extensions beyond the C standard and X/Open standard.\n+   Test for printf formats.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+/* %q formats want a \"quad\"; GCC considers this to be a long long.  */\n+typedef long long int quad_t;\n+typedef unsigned long long int u_quad_t;\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+typedef __WINT_TYPE__ wint_t;\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern int printf (const char *, ...);\n+\n+void\n+foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,\n+     unsigned long long int ull, int i, unsigned int u, double d,\n+     char *s, void *p, wchar_t *ls, wint_t lc, int *n)\n+{\n+  /* As an extension, GCC allows the BSD length \"q\" for integer formats.\n+     This is largely obsoleted in C99 by %j, %ll and PRId64.\n+  */\n+  printf (\"%qd%qi%qo%qu%qx%qX%qn\", q, q, uq, uq, uq, uq, qn);\n+  printf (\"%qf\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qF\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qe\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qE\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qg\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qG\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qa\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qA\", d); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qc\", i); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qs\", s); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qp\", p); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qC\", lc); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  printf (\"%qS\", ls); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  /* With a bad length character GCC wants some argument, any argument,\n+     to devour with the format conversion, as a synchronisation heuristic.\n+     This may get improved later.\n+  */\n+  printf (\"%qm\", i); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  /* As an extension, GCC allows the length \"Z\" as a synonym for \"z\".\n+     This was an extension predating C99 which should now be considered\n+     deprecated; use the standard \"z\" instead.\n+  */\n+  printf (\"%Zd%Zi%Zo%Zu%Zx%ZX\", z, z, z, z, z, z);\n+  printf (\"%Zn\", zn);\n+  printf (\"%Zf\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%ZF\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%Ze\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%ZE\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%Zg\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%ZG\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%Za\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%ZA\", d); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%Zc\", i); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%Zs\", s); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%Zp\", p); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%ZC\", lc); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%ZS\", ls); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  printf (\"%Zm\", i); /* { dg-warning \"length character\" \"bad use of %Z\" } */\n+  /* As an extension, GCC allows the length \"L\" on integer formats\n+     (but not %n) as a synonym for \"ll\".\n+     This should be considered deprecated.\n+  */\n+  printf (\"%Ld%Li%Lo%Lu%Lx%LX\", ll, ll, ull, ull, ull, ull);\n+  /* As an extension, derived from syslog, GCC allows the conversion\n+     specifier \"m\" for formatting strerror(errno).  This may be used\n+     with width, precision and the \"-\" flag, the same as %s.\n+  */\n+  printf (\"%m%3m%.4m%5.6m\");\n+  printf (\"%*m\", i);\n+  printf (\"%.*m\", i);\n+  printf (\"%*.*m\", i, i);\n+  printf (\"%3.*m\", i);\n+  printf (\"%*.4m\", i);\n+  printf (\"%-m\");\n+  printf (\"%+m\"); /* { dg-warning \"flag\" \"bad %+m\" } */\n+  printf (\"% m\"); /* { dg-warning \"flag\" \"bad % m\" } */\n+  printf (\"%#m\"); /* { dg-warning \"flag\" \"bad %#m\" } */\n+  printf (\"%0m\"); /* { dg-warning \"flag\" \"bad %0m\" } */\n+  printf (\"%'m\"); /* { dg-warning \"flag\" \"bad %'m\" } */\n+  printf (\"%hm\", i); /* { dg-warning \"length character\" \"bad %hm\" } */\n+  printf (\"%hhm\", i); /* { dg-warning \"length character\" \"bad %hhm\" } */\n+  printf (\"%lm\", i); /* { dg-warning \"length character\" \"bad %lm\" } */\n+  printf (\"%llm\", i); /* { dg-warning \"length character\" \"bad %llm\" } */\n+  printf (\"%jm\", i); /* { dg-warning \"length character\" \"bad %jm\" } */\n+  printf (\"%zm\", i); /* { dg-warning \"length character\" \"bad %zm\" } */\n+  printf (\"%tm\", i); /* { dg-warning \"length character\" \"bad %tm\" } */\n+  printf (\"%Lm\", i); /* { dg-warning \"length character\" \"bad %Lm\" } */\n+  printf (\"%qm\", i); /* { dg-warning \"length character\" \"bad %qm\" } */\n+  printf (\"%Zm\", i); /* { dg-warning \"length character\" \"bad %Zm\" } */\n+  /* As an extension, glibc includes the \"I\" flag for decimal integer\n+     formats, to output using the locale's digits (e.g. in Arabic).\n+     In GCC, we require this to be in the standard place for flags, though\n+     glibc allows it also after width or precision.\n+  */\n+  printf (\"%Id%Ii%Iu\", i, i, u);\n+  printf (\"%Io\", u); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Ix\", u); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%IX\", u); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%In\", n); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%If\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%IF\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Ie\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%IE\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Ig\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%IG\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Ia\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%IA\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Ic\", i); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Is\", s); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Ip\", p); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%IC\", lc); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%IS\", ls); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%Im\"); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+}"}, {"sha": "d228cbd6bbba6d0e04181850d49828e5d55b9538", "filename": "gcc/testsuite/gcc.dg/format-xopen-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8eceea40c08e7f6edfdfa626261196f3ed984bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c?ref=d8eceea40c08e7f6edfdfa626261196f3ed984bf", "patch": "@@ -38,6 +38,7 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   printf (\"% C\", lc); /* { dg-warning \"flag\" \"bad % C\" } */\n   printf (\"%#C\", lc); /* { dg-warning \"flag\" \"bad %#C\" } */\n   printf (\"%0C\", lc); /* { dg-warning \"flag\" \"bad %0C\" } */\n+  printf (\"%'C\", lc); /* { dg-warning \"flag\" \"bad %'C\" } */\n   printf (\"%S\", ls);\n   printf (\"%3S\", ls);\n   printf (\"%.3S\", ls);\n@@ -54,6 +55,7 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   printf (\"% S\", ls); /* { dg-warning \"flag\" \"bad % S\" } */\n   printf (\"%#S\", ls); /* { dg-warning \"flag\" \"bad %#S\" } */\n   printf (\"%0S\", ls); /* { dg-warning \"flag\" \"bad %0S\" } */\n+  printf (\"%'S\", ls); /* { dg-warning \"flag\" \"bad %'S\" } */\n   scanf (\"%C\", ls);\n   scanf (\"%S\", ls);\n   scanf (\"%*C%*S\");"}]}