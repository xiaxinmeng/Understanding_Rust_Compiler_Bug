{"sha": "2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjZGRhMTk5N2NjNGJhZjNjMTBjNmZjNjAyYzU5NzIyYjVhMzk0Nw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-08-28T21:50:51Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-08-28T21:50:51Z"}, "message": "altivec.h (vec_xl): New #define.\n\n[gcc]\n\n2014-08-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_xl): New #define.\n\t(vec_xst): Likewise.\n\t* config/rs6000/rs6000-builtin.def (XXSPLTD_V2DF): New built-in.\n\t(XXSPLTD_V2DI): Likewise.\n\t(DIV_V2DI): Likewise.\n\t(UDIV_V2DI): Likewise.\n\t(MUL_V2DI): Likewise.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\tentries for VSX_BUILTIN_XVRDPI, VSX_BUILTIN_DIV_V2DI,\n\tVSX_BUILTIN_UDIV_V2DI, VSX_BUILTIN_MUL_V2DI,\n\tVSX_BUILTIN_XXSPLTD_V2DF, and VSX_BUILTIN_XXSPLTD_V2DI).\n\t* config/rs6000/vsx.md (UNSPEC_VSX_XXSPLTD): New unspec.\n\t(UNSPEC_VSX_DIVSD): Likewise.\n\t(UNSPEC_VSX_DIVUD): Likewise.\n\t(UNSPEC_VSX_MULSD): Likewise.\n\t(vsx_mul_v2di): New insn-and-split.\n\t(vsx_div_v2di): Likewise.\n\t(vsx_udiv_v2di): Likewise.\n\t(vsx_xxspltd_<mode>): New insn.\n\n[gcc/testsuite]\n\n2014-08-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/builtins-1.c: Add tests for vec_xl, vec_xst,\n\tvec_round, vec_splat, vec_div, and vec_mul.\n\t* gcc.target/powerpc/builtins-2.c: New test.\n\nFrom-SVN: r214699", "tree": {"sha": "c3380e464ac02b14cb24eb6acdb7459e8d193fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3380e464ac02b14cb24eb6acdb7459e8d193fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b32d51894565e8005a2bdf62e8ea2e279d85b3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32d51894565e8005a2bdf62e8ea2e279d85b3a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32d51894565e8005a2bdf62e8ea2e279d85b3a8"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "d1a1fdcb3ce3774bdc2ea84858305480feb24b0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -1,3 +1,25 @@\n+2014-08-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_xl): New #define.\n+\t(vec_xst): Likewise.\n+\t* config/rs6000/rs6000-builtin.def (XXSPLTD_V2DF): New built-in.\n+\t(XXSPLTD_V2DI): Likewise.\n+\t(DIV_V2DI): Likewise.\n+\t(UDIV_V2DI): Likewise.\n+\t(MUL_V2DI): Likewise.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\tentries for VSX_BUILTIN_XVRDPI, VSX_BUILTIN_DIV_V2DI,\n+\tVSX_BUILTIN_UDIV_V2DI, VSX_BUILTIN_MUL_V2DI,\n+\tVSX_BUILTIN_XXSPLTD_V2DF, and VSX_BUILTIN_XXSPLTD_V2DI).\n+\t* config/rs6000/vsx.md (UNSPEC_VSX_XXSPLTD): New unspec.\n+\t(UNSPEC_VSX_DIVSD): Likewise.\n+\t(UNSPEC_VSX_DIVUD): Likewise.\n+\t(UNSPEC_VSX_MULSD): Likewise.\n+\t(vsx_mul_v2di): New insn-and-split.\n+\t(vsx_div_v2di): Likewise.\n+\t(vsx_udiv_v2di): Likewise.\n+\t(vsx_xxspltd_<mode>): New insn.\n+\n 2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (RTX_PREV): Added checked casts to uses of PREV_INSN and"}, {"sha": "9ee0ae5eccf31a061c7eb34aa09954c27dded6bc", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -322,6 +322,8 @@\n #define vec_sqrt __builtin_vec_sqrt\n #define vec_vsx_ld __builtin_vec_vsx_ld\n #define vec_vsx_st __builtin_vec_vsx_st\n+#define vec_xl __builtin_vec_vsx_ld\n+#define vec_xst __builtin_vec_vsx_st\n \n /* Note, xxsldi and xxpermdi were added as __builtin_vsx_<xxx> functions\n    instead of __builtin_vec_<xxx>  */"}, {"sha": "c088a1d8c36dbba7da4fd250beace172f49eac6b", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -1258,6 +1258,11 @@ BU_VSX_2 (VEC_MERGEL_V2DF,    \"mergel_2df\",\tCONST,\tvsx_mergel_v2df)\n BU_VSX_2 (VEC_MERGEL_V2DI,    \"mergel_2di\",\tCONST,\tvsx_mergel_v2di)\n BU_VSX_2 (VEC_MERGEH_V2DF,    \"mergeh_2df\",\tCONST,\tvsx_mergeh_v2df)\n BU_VSX_2 (VEC_MERGEH_V2DI,    \"mergeh_2di\",\tCONST,\tvsx_mergeh_v2di)\n+BU_VSX_2 (XXSPLTD_V2DF,       \"xxspltd_2df\",    CONST,  vsx_xxspltd_v2df)\n+BU_VSX_2 (XXSPLTD_V2DI,       \"xxspltd_2di\",    CONST,  vsx_xxspltd_v2di)\n+BU_VSX_2 (DIV_V2DI,           \"div_2di\",        CONST,  vsx_div_v2di)\n+BU_VSX_2 (UDIV_V2DI,          \"udiv_2di\",       CONST,  vsx_udiv_v2di)\n+BU_VSX_2 (MUL_V2DI,           \"mul_2di\",        CONST,  vsx_mul_v2di)\n \n /* VSX abs builtin functions.  */\n BU_VSX_A (XVABSDP,\t      \"xvabsdp\",\tCONST,\tabsv2df2)"}, {"sha": "912e1289f989b48b484ac3ad7360147d6f7e71d8", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -604,6 +604,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_ROUND, ALTIVEC_BUILTIN_VRFIN,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ROUND, VSX_BUILTIN_XVRDPI,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_RECIP, ALTIVEC_BUILTIN_VRECIPFP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_RECIP, VSX_BUILTIN_RECIP_V2DF,\n@@ -1161,6 +1163,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_XVDIVDP,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+  { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_DIV_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_UDIV_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n@@ -1822,6 +1828,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { VSX_BUILTIN_VEC_MUL, VSX_BUILTIN_XVMULDP,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+  { VSX_BUILTIN_VEC_MUL, VSX_BUILTIN_MUL_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_MUL, VSX_BUILTIN_MUL_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MULE, ALTIVEC_BUILTIN_VMULEUB,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MULE, ALTIVEC_BUILTIN_VMULESB,\n@@ -2204,6 +2214,14 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SPLAT, ALTIVEC_BUILTIN_VSPLTW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SPLAT, VSX_BUILTIN_XXSPLTD_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SPLAT, VSX_BUILTIN_XXSPLTD_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SPLAT, VSX_BUILTIN_XXSPLTD_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SPLAT, VSX_BUILTIN_XXSPLTD_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VSPLTW, ALTIVEC_BUILTIN_VSPLTW,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VSPLTW, ALTIVEC_BUILTIN_VSPLTW,"}, {"sha": "598acb3fc5001fcda66622f5086a997388eed4ee", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -260,6 +260,10 @@\n    UNSPEC_VSX_ROUND_IC\n    UNSPEC_VSX_SLDWI\n    UNSPEC_VSX_XXSPLTW\n+   UNSPEC_VSX_XXSPLTD\n+   UNSPEC_VSX_DIVSD\n+   UNSPEC_VSX_DIVUD\n+   UNSPEC_VSX_MULSD\n   ])\n \n ;; VSX moves\n@@ -747,6 +751,34 @@\n   [(set_attr \"type\" \"<VStype_simple>\")\n    (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n \n+; Emulate vector with scalar for vec_mul in V2DImode\n+(define_insn_and_split \"vsx_mul_v2di\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:V2DI [(match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")\n+                      (match_operand:V2DI 2 \"vsx_register_operand\" \"wa\")]\n+                     UNSPEC_VSX_MULSD))]\n+  \"VECTOR_MEM_VSX_P (V2DImode)\"\n+  \"#\"\n+  \"VECTOR_MEM_VSX_P (V2DImode) && !reload_completed && !reload_in_progress\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx op2 = operands[2];\n+  rtx op3 = gen_reg_rtx (DImode);\n+  rtx op4 = gen_reg_rtx (DImode);\n+  rtx op5 = gen_reg_rtx (DImode);\n+  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (0)));\n+  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (0)));\n+  emit_insn (gen_muldi3 (op5, op3, op4));\n+  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (1)));\n+  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (1)));\n+  emit_insn (gen_muldi3 (op3, op3, op4));\n+  emit_insn (gen_vsx_concat_v2di (op0, op5, op3));\n+}\"\n+  [(set_attr \"type\" \"mul\")])\n+\n (define_insn \"*vsx_div<mode>3\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n         (div:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n@@ -756,6 +788,61 @@\n   [(set_attr \"type\" \"<VStype_div>\")\n    (set_attr \"fp_type\" \"<VSfptype_div>\")])\n \n+; Emulate vector with scalar for vec_div in V2DImode\n+(define_insn_and_split \"vsx_div_v2di\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:V2DI [(match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")\n+                      (match_operand:V2DI 2 \"vsx_register_operand\" \"wa\")]\n+                     UNSPEC_VSX_DIVSD))]\n+  \"VECTOR_MEM_VSX_P (V2DImode)\"\n+  \"#\"\n+  \"VECTOR_MEM_VSX_P (V2DImode) && !reload_completed && !reload_in_progress\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx op2 = operands[2];\n+  rtx op3 = gen_reg_rtx (DImode);\n+  rtx op4 = gen_reg_rtx (DImode);\n+  rtx op5 = gen_reg_rtx (DImode);\n+  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (0)));\n+  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (0)));\n+  emit_insn (gen_divdi3 (op5, op3, op4));\n+  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (1)));\n+  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (1)));\n+  emit_insn (gen_divdi3 (op3, op3, op4));\n+  emit_insn (gen_vsx_concat_v2di (op0, op5, op3));\n+}\"\n+  [(set_attr \"type\" \"div\")])\n+\n+(define_insn_and_split \"vsx_udiv_v2di\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:V2DI [(match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")\n+                      (match_operand:V2DI 2 \"vsx_register_operand\" \"wa\")]\n+                     UNSPEC_VSX_DIVUD))]\n+  \"VECTOR_MEM_VSX_P (V2DImode)\"\n+  \"#\"\n+  \"VECTOR_MEM_VSX_P (V2DImode) && !reload_completed && !reload_in_progress\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx op2 = operands[2];\n+  rtx op3 = gen_reg_rtx (DImode);\n+  rtx op4 = gen_reg_rtx (DImode);\n+  rtx op5 = gen_reg_rtx (DImode);\n+  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (0)));\n+  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (0)));\n+  emit_insn (gen_udivdi3 (op5, op3, op4));\n+  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (1)));\n+  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (1)));\n+  emit_insn (gen_udivdi3 (op3, op3, op4));\n+  emit_insn (gen_vsx_concat_v2di (op0, op5, op3));\n+}\"\n+  [(set_attr \"type\" \"div\")])\n+\n ;; *tdiv* instruction returning the FG flag\n (define_expand \"vsx_tdiv<mode>3_fg\"\n   [(set (match_dup 3)\n@@ -1898,6 +1985,22 @@\n   \"xxspltw %x0,%x1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n+;; V2DF/V2DI splat for use by vec_splat builtin\n+(define_insn \"vsx_xxspltd_<mode>\"\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n+        (unspec:VSX_D [(match_operand:VSX_D 1 \"vsx_register_operand\" \"wa\")\n+\t               (match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]\n+                      UNSPEC_VSX_XXSPLTD))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n+{\n+  if ((VECTOR_ELT_ORDER_BIG && INTVAL (operands[2]) == 0)\n+      || (!VECTOR_ELT_ORDER_BIG && INTVAL (operands[2]) == 1))\n+    return \"xxpermdi %x0,%x1,%x1,0\";\n+  else\n+    return \"xxpermdi %x0,%x1,%x1,3\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n ;; V4SF/V4SI interleave\n (define_insn \"vsx_xxmrghw_<mode>\"\n   [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wf,?<VSa>\")"}, {"sha": "8472e3c3742bf2ddaee150f634cefd73b8b95e0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -1,3 +1,9 @@\n+2014-08-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-1.c: Add tests for vec_xl, vec_xst,\n+\tvec_round, vec_splat, vec_div, and vec_mul.\n+\t* gcc.target/powerpc/builtins-2.c: New test.\n+\n 2014-08-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/62283"}, {"sha": "0674d9732a5077d2c555d75095180a3e9323a722", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -6,6 +6,9 @@\n \n #include <altivec.h>\n \n+vector double y = { 2.0, 4.0 };\n+vector double z;\n+\n int main ()\n {\n   vector float fa = {1.0, 2.0, 3.0, -4.0};\n@@ -134,5 +137,25 @@ int main ()\n   vector signed char scb = vec_cntlz (sca);\n   vector unsigned char cb = vec_cntlz (ca);\n \n+  vector double dd = vec_xl (0, &y);\n+  vec_xst (dd, 0, &z);\n+\n+  vector double de = vec_round (dd);\n+\n+  vector double df = vec_splat (de, 0);\n+  vector double dg = vec_splat (de, 1);\n+  vector long long l3 = vec_splat (l2, 0);\n+  vector long long l4 = vec_splat (l2, 1);\n+  vector unsigned long long u3 = vec_splat (u2, 0);\n+  vector unsigned long long u4 = vec_splat (u2, 1);\n+  vector bool long long l5 = vec_splat (ld, 0);\n+  vector bool long long l6 = vec_splat (ld, 1);\n+\n+  vector long long l7 = vec_div (l3, l4);\n+  vector unsigned long long u5 = vec_div (u3, u4);\n+\n+  vector long long l8 = vec_mul (l3, l4);\n+  vector unsigned long long u6 = vec_mul (u3, u4);\n+\n   return 0;\n }"}, {"sha": "853e2a93d2d577441dd64db5f5e7adb277de2f26", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ccdda1997cc4baf3c10c6fc602c59722b5a3947/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c?ref=2ccdda1997cc4baf3c10c6fc602c59722b5a3947", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target { powerpc64le-*-* } } } */\n+/* { dg-options \"-mcpu=power8 \" } */\n+\n+#include <altivec.h>\n+\n+void abort (void);\n+\n+int main ()\n+{\n+  vector long long sa = {27L, -14L};\n+  vector long long sb = {-9L, -2L};\n+\n+  vector unsigned long long ua = {27L, 14L};\n+  vector unsigned long long ub = {9L, 2L};\n+\n+  vector long long sc = vec_div (sa, sb);\n+  vector unsigned long long uc = vec_div (ua, ub);\n+\n+  if (sc[0] != -3L || sc[1] != 7L || uc[0] != 3L || uc[1] != 7L)\n+    abort ();\n+\n+  vector long long sd = vec_mul (sa, sb);\n+  vector unsigned long long ud = vec_mul (ua, ub);\n+\n+  if (sd[0] != -243L || sd[1] != 28L || ud[0] != 243L || ud[1] != 28L)\n+    abort ();\n+\n+  vector long long se = vec_splat (sa, 0);\n+  vector long long sf = vec_splat (sa, 1);\n+  vector unsigned long long ue = vec_splat (ua, 0);\n+  vector unsigned long long uf = vec_splat (ua, 1);\n+\n+  if (se[0] != 27L || se[1] != 27L || sf[0] != -14L || sf[1] != -14L\n+      || ue[0] != 27L || ue[1] != 27L || uf[0] != 14L || uf[1] != 14L)\n+    abort ();\n+\n+  return 0;\n+}"}]}