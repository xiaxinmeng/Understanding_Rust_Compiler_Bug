{"sha": "afd83fe4394ec1ad673e4930573eac6e64a11a01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkODNmZTQzOTRlYzFhZDY3M2U0OTMwNTczZWFjNmU2NGExMWEwMQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2006-05-03T17:13:37Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2006-05-03T17:13:37Z"}, "message": "re PR tree-optimization/27381 (ice on valid code with -O)\n\n\n\n2006-05-02  Andrew MacLeod  <amacleod@redhat.com>\n\n        PR tree-optimization/27381\n\t* tree-phinodes.c (remove_phi_arg_num): When moving a phi argument, \n\tmaintain the same immediate_use links.\n\t* tree-ssa-operands.c (dump_immediate_uses_for): Show iteration marker \n\tnode rather than segfaulting.\n\nFrom-SVN: r113499", "tree": {"sha": "667bf75460841ac25534c9906889dabd781ce40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/667bf75460841ac25534c9906889dabd781ce40d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd83fe4394ec1ad673e4930573eac6e64a11a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd83fe4394ec1ad673e4930573eac6e64a11a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd83fe4394ec1ad673e4930573eac6e64a11a01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd83fe4394ec1ad673e4930573eac6e64a11a01/comments", "author": null, "committer": null, "parents": [{"sha": "693d710f2ad03341b24d45d1b2ab75533d67687e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693d710f2ad03341b24d45d1b2ab75533d67687e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693d710f2ad03341b24d45d1b2ab75533d67687e"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "8f29f82529cf1bc13459f117123c51e553e7b3a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd83fe4394ec1ad673e4930573eac6e64a11a01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd83fe4394ec1ad673e4930573eac6e64a11a01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afd83fe4394ec1ad673e4930573eac6e64a11a01", "patch": "@@ -1,3 +1,11 @@\n+2006-05-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/27381\n+\t* tree-phinodes.c (remove_phi_arg_num): When moving a phi argument, \n+\tmaintain the same immediate_use links.\n+\t* tree-ssa-operands.c (dump_immediate_uses_for): Show iteration marker \n+\tnode rather than segfaulting.\n+\n 2006-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/27395"}, {"sha": "5e85aea64e42af48bc2217ab147e0dbd5fb6b787", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd83fe4394ec1ad673e4930573eac6e64a11a01/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd83fe4394ec1ad673e4930573eac6e64a11a01/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=afd83fe4394ec1ad673e4930573eac6e64a11a01", "patch": "@@ -406,14 +406,20 @@ remove_phi_arg_num (tree phi, int i)\n \n   gcc_assert (i < num_elem);\n \n-  /* Delink the last item, which is being removed.  */\n-  delink_imm_use (&(PHI_ARG_IMM_USE_NODE (phi, num_elem - 1)));\n \n-  /* If we are not at the last element, switch the last element\n-     with the element we want to delete.  */\n+  /* Delink the item which is being removed.  */\n+  delink_imm_use (&(PHI_ARG_IMM_USE_NODE (phi, i)));\n+\n+  /* If it is not the last element, move the last element\n+     to the element we want to delete, resetting all the links. */\n   if (i != num_elem - 1)\n     {\n-      SET_PHI_ARG_DEF (phi, i, PHI_ARG_DEF (phi, num_elem - 1));\n+      use_operand_p old_p, new_p;\n+      old_p = &PHI_ARG_IMM_USE_NODE (phi, num_elem - 1);\n+      new_p = &PHI_ARG_IMM_USE_NODE (phi, i);\n+      /* Set use on new node, and link into last elements's place.  */\n+      *(new_p->use) = *(old_p->use);\n+      relink_imm_use (new_p, old_p);\n     }\n \n   /* Shrink the vector and return.  Note that we do not have to clear"}, {"sha": "3cd8c45aaf1d444e38d2cb5971249e98c4e0716a", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd83fe4394ec1ad673e4930573eac6e64a11a01/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd83fe4394ec1ad673e4930573eac6e64a11a01/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=afd83fe4394ec1ad673e4930573eac6e64a11a01", "patch": "@@ -2513,10 +2513,13 @@ dump_immediate_uses_for (FILE *file, tree var)\n \n   FOR_EACH_IMM_USE_FAST (use_p, iter, var)\n     {\n-      if (!is_gimple_reg (USE_FROM_PTR (use_p)))\n-\tprint_generic_stmt (file, USE_STMT (use_p), TDF_VOPS);\n+      if (use_p->stmt == NULL && use_p->use == NULL)\n+        fprintf (file, \"***end of stmt iterator marker***\\n\");\n       else\n-\tprint_generic_stmt (file, USE_STMT (use_p), TDF_SLIM);\n+\tif (!is_gimple_reg (USE_FROM_PTR (use_p)))\n+\t  print_generic_stmt (file, USE_STMT (use_p), TDF_VOPS);\n+\telse\n+\t  print_generic_stmt (file, USE_STMT (use_p), TDF_SLIM);\n     }\n   fprintf(file, \"\\n\");\n }"}]}