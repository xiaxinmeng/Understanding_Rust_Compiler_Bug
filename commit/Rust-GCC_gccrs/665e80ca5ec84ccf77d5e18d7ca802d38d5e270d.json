{"sha": "665e80ca5ec84ccf77d5e18d7ca802d38d5e270d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1ZTgwY2E1ZWM4NGNjZjc3ZDVlMThkN2NhODAyZDM4ZDVlMjcwZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-19T09:43:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-19T09:44:54Z"}, "message": "Fix PR ada/98740\n\nIt's a long-standing GENERIC tree sharing issue.\n\ngcc/ada/ChangeLog:\n\tPR ada/98740\n\t* gcc-interface/trans.c (add_decl_expr): Always mark TYPE_ADA_SIZE.", "tree": {"sha": "1b16621065583df14c4160942a05462015c904ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b16621065583df14c4160942a05462015c904ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d/comments", "author": null, "committer": null, "parents": [{"sha": "9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee33d7c33fa757d7011addfa6bdd0ccb6212181"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "6402c73ded053c3be419cdbed8e368333542dd01", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665e80ca5ec84ccf77d5e18d7ca802d38d5e270d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=665e80ca5ec84ccf77d5e18d7ca802d38d5e270d", "patch": "@@ -8479,15 +8479,16 @@ add_decl_expr (tree gnu_decl, Node_Id gnat_node)\n \t  MARK_VISITED (DECL_SIZE_UNIT (gnu_decl));\n \t  MARK_VISITED (DECL_INITIAL (gnu_decl));\n \t}\n-      /* In any case, we have to deal with our own TYPE_ADA_SIZE field.  */\n-      else if (TREE_CODE (gnu_decl) == TYPE_DECL\n-\t       && RECORD_OR_UNION_TYPE_P (type)\n-\t       && !TYPE_FAT_POINTER_P (type))\n-\tMARK_VISITED (TYPE_ADA_SIZE (type));\n     }\n   else\n     add_stmt_with_node (gnu_stmt, gnat_node);\n \n+  /* Mark our TYPE_ADA_SIZE field now since it will not be gimplified.  */\n+  if (TREE_CODE (gnu_decl) == TYPE_DECL\n+      && RECORD_OR_UNION_TYPE_P (type)\n+      && !TYPE_FAT_POINTER_P (type))\n+    MARK_VISITED (TYPE_ADA_SIZE (type));\n+\n   /* If this is a variable and an initializer is attached to it, it must be\n      valid for the context.  Similar to init_const in create_var_decl.  */\n   if (TREE_CODE (gnu_decl) == VAR_DECL"}]}