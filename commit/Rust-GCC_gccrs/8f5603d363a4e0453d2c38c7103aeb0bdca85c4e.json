{"sha": "8f5603d363a4e0453d2c38c7103aeb0bdca85c4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1NjAzZDM2M2E0ZTA0NTNkMmMzOGM3MTAzYWViMGJkY2E4NWM0ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "richard.henderson@linaro.org", "date": "2018-10-31T09:47:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2018-10-31T09:47:21Z"}, "message": "aarch64: Improve swp generation\n\nAllow zero as an input; fix constraints; avoid unnecessary split.\n\n\t* config/aarch64/aarch64.c (aarch64_emit_atomic_swap): Remove.\n\t(aarch64_gen_atomic_ldop): Don't call it.\n\t* config/aarch64/atomics.md (atomic_exchange<ALLI>):\n\tUse aarch64_reg_or_zero.\n\t(aarch64_atomic_exchange<ALLI>): Likewise.\n\t(aarch64_atomic_exchange<ALLI>_lse): Remove split; remove & from\n\toperand 0; use aarch64_reg_or_zero for input; merge ...\n\t(@aarch64_atomic_swp<ALLI>): ... this and remove.\n\nFrom-SVN: r265659", "tree": {"sha": "cb57a520915c778e37eee388922ed32ccd964711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb57a520915c778e37eee388922ed32ccd964711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "260eedb901c1b3df69598a724e23e33674ab654b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260eedb901c1b3df69598a724e23e33674ab654b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260eedb901c1b3df69598a724e23e33674ab654b"}], "stats": {"total": 71, "additions": 24, "deletions": 47}, "files": [{"sha": "a3f9048cb886c6e6e21094ad7afcf7f4403dbba6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f5603d363a4e0453d2c38c7103aeb0bdca85c4e", "patch": "@@ -1,5 +1,14 @@\n 2018-10-31  Richard Henderson  <richard.henderson@linaro.org>\n \n+\t* config/aarch64/aarch64.c (aarch64_emit_atomic_swap): Remove.\n+\t(aarch64_gen_atomic_ldop): Don't call it.\n+\t* config/aarch64/atomics.md (atomic_exchange<ALLI>):\n+\tUse aarch64_reg_or_zero.\n+\t(aarch64_atomic_exchange<ALLI>): Likewise.\n+\t(aarch64_atomic_exchange<ALLI>_lse): Remove split; remove & from\n+\toperand 0; use aarch64_reg_or_zero for input; merge ...\n+\t(@aarch64_atomic_swp<ALLI>): ... this and remove.\n+\n \t* config/aarch64/aarch64.c (aarch64_gen_compare_reg_maybe_ze): New.\n \t(aarch64_split_compare_and_swap): Use it.\n \t(aarch64_expand_compare_and_swap): Likewise.  Remove convert_modes;"}, {"sha": "e9829ab7539938c6c31ec2af77d5c1d20a6a0561", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8f5603d363a4e0453d2c38c7103aeb0bdca85c4e", "patch": "@@ -14840,15 +14840,6 @@ aarch64_emit_bic (machine_mode mode, rtx dst, rtx s1, rtx s2, int shift)\n   emit_insn (gen (dst, s2, shift_rtx, s1));\n }\n \n-/* Emit an atomic swap.  */\n-\n-static void\n-aarch64_emit_atomic_swap (machine_mode mode, rtx dst, rtx value,\n-\t\t\t  rtx mem, rtx model)\n-{\n-  emit_insn (gen_aarch64_atomic_swp (mode, dst, mem, value, model));\n-}\n-\n /* Emit an atomic load+operate.  CODE is the operation.  OUT_DATA is the\n    location to store the data read from memory.  OUT_RESULT is the location to\n    store the result of the operation.  MEM is the memory location to read and\n@@ -14889,10 +14880,6 @@ aarch64_gen_atomic_ldop (enum rtx_code code, rtx out_data, rtx out_result,\n      a SET then emit a swap instruction and finish.  */\n   switch (code)\n     {\n-    case SET:\n-      aarch64_emit_atomic_swap (mode, out_data, src, mem, model_rtx);\n-      return;\n-\n     case MINUS:\n       /* Negate the value and treat it as a PLUS.  */\n       {"}, {"sha": "bc9e396dc962f29397a490f468e4a11948e23d1c", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f5603d363a4e0453d2c38c7103aeb0bdca85c4e/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=8f5603d363a4e0453d2c38c7103aeb0bdca85c4e", "patch": "@@ -136,7 +136,7 @@\n (define_expand \"atomic_exchange<mode>\"\n  [(match_operand:ALLI 0 \"register_operand\" \"\")\n   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"\")\n-  (match_operand:ALLI 2 \"register_operand\" \"\")\n+  (match_operand:ALLI 2 \"aarch64_reg_or_zero\" \"\")\n   (match_operand:SI 3 \"const_int_operand\" \"\")]\n   \"\"\n   {\n@@ -156,10 +156,10 @@\n \n (define_insn_and_split \"aarch64_atomic_exchange<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\t\t;; output\n-    (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\")) ;; memory\n+    (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\"))\t;; memory\n    (set (match_dup 1)\n     (unspec_volatile:ALLI\n-      [(match_operand:ALLI 2 \"register_operand\" \"r\")\t;; input\n+      [(match_operand:ALLI 2 \"aarch64_reg_or_zero\" \"rZ\")\t;; input\n        (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n       UNSPECV_ATOMIC_EXCHG))\n    (clobber (reg:CC CC_REGNUM))\n@@ -175,22 +175,25 @@\n   }\n )\n \n-(define_insn_and_split \"aarch64_atomic_exchange<mode>_lse\"\n-  [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\n+(define_insn \"aarch64_atomic_exchange<mode>_lse\"\n+  [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n     (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\"))\n    (set (match_dup 1)\n     (unspec_volatile:ALLI\n-      [(match_operand:ALLI 2 \"register_operand\" \"r\")\n+      [(match_operand:ALLI 2 \"aarch64_reg_or_zero\" \"rZ\")\n        (match_operand:SI 3 \"const_int_operand\" \"\")]\n       UNSPECV_ATOMIC_EXCHG))]\n   \"TARGET_LSE\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n   {\n-    aarch64_gen_atomic_ldop (SET, operands[0], NULL, operands[1],\n-\t\t\t     operands[2], operands[3]);\n-    DONE;\n+    enum memmodel model = memmodel_from_int (INTVAL (operands[3]));\n+    if (is_mm_relaxed (model))\n+      return \"swp<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+    else if (is_mm_acquire (model) || is_mm_consume (model))\n+      return \"swpa<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+    else if (is_mm_release (model))\n+      return \"swpl<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+    else\n+      return \"swpal<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n   }\n )\n \n@@ -585,28 +588,6 @@\n \n ;; ARMv8.1-A LSE instructions.\n \n-;; Atomic swap with memory.\n-(define_insn \"@aarch64_atomic_swp<mode>\"\n- [(set (match_operand:ALLI 0 \"register_operand\" \"+&r\")\n-   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\"))\n-  (set (match_dup 1)\n-   (unspec_volatile:ALLI\n-    [(match_operand:ALLI 2 \"register_operand\" \"r\")\n-     (match_operand:SI 3 \"const_int_operand\" \"\")]\n-    UNSPECV_ATOMIC_SWP))]\n-  \"TARGET_LSE && reload_completed\"\n-  {\n-    enum memmodel model = memmodel_from_int (INTVAL (operands[3]));\n-    if (is_mm_relaxed (model))\n-      return \"swp<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n-    else if (is_mm_acquire (model) || is_mm_consume (model))\n-      return \"swpa<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n-    else if (is_mm_release (model))\n-      return \"swpl<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n-    else\n-      return \"swpal<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n-  })\n-\n ;; Atomic load-op: Load data, operate, store result, keep data.\n \n (define_insn \"@aarch64_atomic_load<atomic_ldop><mode>\""}]}