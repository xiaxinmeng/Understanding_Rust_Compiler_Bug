{"sha": "4e91452412294f3cc1c63de8c35e88d2c08fe6ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5MTQ1MjQxMjI5NGYzY2MxYzYzZGU4YzM1ZTg4ZDJjMDhmZTZlZQ==", "commit": {"author": {"name": "Petr Ovtchenkov", "email": "ptr@void-ptr.info", "date": "2017-10-04T16:15:18Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-10-04T16:15:18Z"}, "message": "2017-10-04  Petr Ovtchenkov  <ptr@void-ptr.info>\n\t    Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/streambuf_iterator.h\n\t(istreambuf_iterator<>::operator*()): Do not capture iterator state\n\tin Debug assertion.\n\t(istreambuf_iterator<>::operator++()): Likewise and remove _M_sbuf check.\n\t(istreambuf_iterator<>::operator++(int)): Likewise.\n\t(istreambuf_iterator<>::_M_get()): Remove _M_c assignment.\n\t(istreambuf_iterator<>::_S_is_eof()): New.\n\t(istreambuf_iterator<>::_M_at_eof()): Adapt, use latter.\n\t(find(istreambuf_iterator<>, istreambuf_iterator<>, _CharT)):\n\tReturn an iterator with _M_c set to eof to capture streambuf state\n\ton evaluation.\n\t(testsuite/24_iterators/istreambuf_iterator/2.cc): Add checks.\n\nCo-Authored-By: Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n\nFrom-SVN: r253417", "tree": {"sha": "df275619e1dd28039fea465b3f33aada1130e5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df275619e1dd28039fea465b3f33aada1130e5ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e91452412294f3cc1c63de8c35e88d2c08fe6ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e91452412294f3cc1c63de8c35e88d2c08fe6ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e91452412294f3cc1c63de8c35e88d2c08fe6ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e91452412294f3cc1c63de8c35e88d2c08fe6ee/comments", "author": {"login": "ptr", "id": 26904, "node_id": "MDQ6VXNlcjI2OTA0", "avatar_url": "https://avatars.githubusercontent.com/u/26904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptr", "html_url": "https://github.com/ptr", "followers_url": "https://api.github.com/users/ptr/followers", "following_url": "https://api.github.com/users/ptr/following{/other_user}", "gists_url": "https://api.github.com/users/ptr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptr/subscriptions", "organizations_url": "https://api.github.com/users/ptr/orgs", "repos_url": "https://api.github.com/users/ptr/repos", "events_url": "https://api.github.com/users/ptr/events{/privacy}", "received_events_url": "https://api.github.com/users/ptr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6411847fcf9941ef7312911378839cc8f45e8d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6411847fcf9941ef7312911378839cc8f45e8d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6411847fcf9941ef7312911378839cc8f45e8d9a"}], "stats": {"total": 85, "additions": 48, "deletions": 37}, "files": [{"sha": "4d371b8b9f2287a33a89ea2ed0224173aa004586", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e91452412294f3cc1c63de8c35e88d2c08fe6ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e91452412294f3cc1c63de8c35e88d2c08fe6ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4e91452412294f3cc1c63de8c35e88d2c08fe6ee", "patch": "@@ -1,3 +1,19 @@\n+2017-10-04  Petr Ovtchenkov  <ptr@void-ptr.info>\n+\t    Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/streambuf_iterator.h\n+\t(istreambuf_iterator<>::operator*()): Do not capture iterator state\n+\tin Debug assertion.\n+\t(istreambuf_iterator<>::operator++()): Likewise and remove _M_sbuf check.\n+\t(istreambuf_iterator<>::operator++(int)): Likewise.\n+\t(istreambuf_iterator<>::_M_get()): Remove _M_c assignment.\n+\t(istreambuf_iterator<>::_S_is_eof()): New.\n+\t(istreambuf_iterator<>::_M_at_eof()): Adapt, use latter.\n+\t(find(istreambuf_iterator<>, istreambuf_iterator<>, _CharT)):\n+\tReturn an iterator with _M_c set to eof to capture streambuf state\n+\ton evaluation.\n+\t(testsuite/24_iterators/istreambuf_iterator/2.cc): Add checks.\n+\n 2017-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* include/std/charconv (__unsigned_least_t): Fix number of closing >s for"}, {"sha": "64b8cfd78953c9eabf70d341d6e5e14faf70c9df", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e91452412294f3cc1c63de8c35e88d2c08fe6ee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e91452412294f3cc1c63de8c35e88d2c08fe6ee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=4e91452412294f3cc1c63de8c35e88d2c08fe6ee", "patch": "@@ -95,7 +95,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // NB: This implementation assumes the \"end of stream\" value\n       // is EOF, or -1.\n       mutable streambuf_type*\t_M_sbuf;\n-      mutable int_type\t\t_M_c;\n+      int_type\t\t\t_M_c;\n \n     public:\n       ///  Construct end of input stream iterator.\n@@ -122,45 +122,44 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       char_type\n       operator*() const\n       {\n+\tint_type __c = _M_get();\n+\n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n \t// Dereferencing a past-the-end istreambuf_iterator is a\n \t// libstdc++ extension\n-\t__glibcxx_requires_cond(!_M_at_eof(),\n+\t__glibcxx_requires_cond(!_S_is_eof(__c),\n \t\t\t\t_M_message(__gnu_debug::__msg_deref_istreambuf)\n \t\t\t\t._M_iterator(*this));\n #endif\n-\treturn traits_type::to_char_type(_M_get());\n+\treturn traits_type::to_char_type(__c);\n       }\n \n       /// Advance the iterator.  Calls streambuf.sbumpc().\n       istreambuf_iterator&\n       operator++()\n       {\n-\t__glibcxx_requires_cond(!_M_at_eof(),\n+\t__glibcxx_requires_cond(_M_sbuf &&\n+\t\t\t\t(!_S_is_eof(_M_c) || !_S_is_eof(_M_sbuf->sgetc())),\n \t\t\t\t_M_message(__gnu_debug::__msg_inc_istreambuf)\n \t\t\t\t._M_iterator(*this));\n-\tif (_M_sbuf)\n-\t  {\n-\t    _M_sbuf->sbumpc();\n-\t    _M_c = traits_type::eof();\n-\t  }\n+\n+\t_M_sbuf->sbumpc();\n+\t_M_c = traits_type::eof();\n \treturn *this;\n       }\n \n       /// Advance the iterator.  Calls streambuf.sbumpc().\n       istreambuf_iterator\n       operator++(int)\n       {\n-\t__glibcxx_requires_cond(!_M_at_eof(),\n+\t__glibcxx_requires_cond(_M_sbuf &&\n+\t\t\t\t(!_S_is_eof(_M_c) || !_S_is_eof(_M_sbuf->sgetc())),\n \t\t\t\t_M_message(__gnu_debug::__msg_inc_istreambuf)\n \t\t\t\t._M_iterator(*this));\n \n \tistreambuf_iterator __old = *this;\n-\tif (_M_sbuf)\n-\t  {\n-\t    __old._M_c = _M_sbuf->sbumpc();\n-\t    _M_c = traits_type::eof();\n-\t  }\n+\t__old._M_c = _M_sbuf->sbumpc();\n+\t_M_c = traits_type::eof();\n \treturn __old;\n       }\n \n@@ -176,26 +175,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       int_type\n       _M_get() const\n       {\n-\tconst int_type __eof = traits_type::eof();\n-\tint_type __ret = __eof;\n-\tif (_M_sbuf)\n-\t  {\n-\t    if (!traits_type::eq_int_type(_M_c, __eof))\n-\t      __ret = _M_c;\n-\t    else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),\n-\t\t\t\t\t       __eof))\n-\t      _M_c = __ret;\n-\t    else\n-\t      _M_sbuf = 0;\n-\t  }\n+\tint_type __ret = _M_c;\n+\tif (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))\n+\t  _M_sbuf = 0;\n \treturn __ret;\n       }\n \n       bool\n       _M_at_eof() const\n+      { return _S_is_eof(_M_get()); }\n+\n+      static bool\n+      _S_is_eof(int_type __c)\n       {\n \tconst int_type __eof = traits_type::eof();\n-\treturn traits_type::eq_int_type(_M_get(), __eof);\n+\treturn traits_type::eq_int_type(__c, __eof);\n       }\n     };\n \n@@ -373,13 +367,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __is_iterator_type::traits_type     traits_type;\n       typedef typename __is_iterator_type::streambuf_type  streambuf_type;\n       typedef typename traits_type::int_type               int_type;\n+      const int_type __eof = traits_type::eof();\n \n       if (__first._M_sbuf && !__last._M_sbuf)\n \t{\n \t  const int_type __ival = traits_type::to_int_type(__val);\n \t  streambuf_type* __sb = __first._M_sbuf;\n \t  int_type __c = __sb->sgetc();\n-\t  while (!traits_type::eq_int_type(__c, traits_type::eof())\n+\t  while (!traits_type::eq_int_type(__c, __eof)\n \t\t && !traits_type::eq_int_type(__c, __ival))\n \t    {\n \t      streamsize __n = __sb->egptr() - __sb->gptr();\n@@ -396,11 +391,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__c = __sb->snextc();\n \t    }\n \n-\t  if (!traits_type::eq_int_type(__c, traits_type::eof()))\n-\t    __first._M_c = __c;\n-\t  else\n-\t    __first._M_sbuf = 0;\n+\t  __first._M_c = __eof;\n \t}\n+\n       return __first;\n     }\n "}, {"sha": "572ea9f23bc3092a1beccf7da76b6c685bc50a84", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/2.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e91452412294f3cc1c63de8c35e88d2c08fe6ee/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e91452412294f3cc1c63de8c35e88d2c08fe6ee/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc?ref=4e91452412294f3cc1c63de8c35e88d2c08fe6ee", "patch": "@@ -25,20 +25,22 @@\n \n void test02(void)\n {\n-\n   typedef std::istreambuf_iterator<char> cistreambuf_iter;\n-  typedef cistreambuf_iter::streambuf_type cstreambuf_type;\n   const char slit01[] = \"playa hermosa, liberia, guanacaste\";\n   std::string str01(slit01);\n   std::istringstream istrs00(str01);\n   std::istringstream istrs01(str01);\n \n   // ctor sanity checks\n   cistreambuf_iter istrb_it01(istrs00);\n-  cistreambuf_iter istrb_it02;\n-  std::string tmp(istrb_it01, istrb_it02); \n+  cistreambuf_iter istrb_eos;\n+  VERIFY( istrb_it01 != istrb_eos );\n+\n+  std::string tmp(istrb_it01, istrb_eos);\n   VERIFY( tmp == str01 );\n \n+  VERIFY( istrb_it01 == istrb_eos );\n+\n   cistreambuf_iter istrb_it03(0);\n   cistreambuf_iter istrb_it04;\n   VERIFY( istrb_it03 == istrb_it04 );"}]}