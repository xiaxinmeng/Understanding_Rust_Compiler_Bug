{"sha": "ea56c40c484e89e5a67f71a2c90a1ad645c89540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1NmM0MGM0ODRlODllNWE2N2Y3MWEyYzkwYTFhZDY0NWM4OTU0MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-26T01:27:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-26T01:27:09Z"}, "message": "decl2.c (finish_file): Don't call import_export_decl for functions that are not defined.\n\n\t* decl2.c (finish_file): Don't call import_export_decl for\n\tfunctions that are not defined.\n\t(handle_class_head): Robustify.\n\t* pt.c (instantiate_decl): Do not call cp_finish_decl for\n\tvariables that are not defined.\n\n\t* g++.old-deja/g++.pt/instantiate12.C: Explicit instantiate\n\tinitialized static data members.\n\nFrom-SVN: r66095", "tree": {"sha": "f5a8e8bd5875fafd17ed7be1c1529abe30e283e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a8e8bd5875fafd17ed7be1c1529abe30e283e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea56c40c484e89e5a67f71a2c90a1ad645c89540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea56c40c484e89e5a67f71a2c90a1ad645c89540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea56c40c484e89e5a67f71a2c90a1ad645c89540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea56c40c484e89e5a67f71a2c90a1ad645c89540/comments", "author": null, "committer": null, "parents": [{"sha": "ab409f1be9b3b60c3cc8ffed32e4201f50019a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab409f1be9b3b60c3cc8ffed32e4201f50019a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab409f1be9b3b60c3cc8ffed32e4201f50019a28"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "e4b5602f61c68d7a787e39a7303d64637ba36764", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea56c40c484e89e5a67f71a2c90a1ad645c89540", "patch": "@@ -1,3 +1,11 @@\n+2003-04-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl2.c (finish_file): Don't call import_export_decl for\n+\tfunctions that are not defined.\n+\t(handle_class_head): Robustify.\n+\t* pt.c (instantiate_decl): Do not call cp_finish_decl for\n+\tvariables that are not defined.\n+\n 2003-04-24  Sylvain Pion  <Sylvain.Pion@mpi-sb.mpg.de>\n \n         * call.c (print_z_candidates): Fix off by one error."}, {"sha": "a52bdaa65fafa03c4b0886219a3cb3ac26bbb9b7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ea56c40c484e89e5a67f71a2c90a1ad645c89540", "patch": "@@ -2730,9 +2730,7 @@ finish_file ()\n       for (i = 0; i < deferred_fns_used; ++i)\n \t{\n \t  tree decl = VARRAY_TREE (deferred_fns, i);\n-\t  \n-\t  import_export_decl (decl);\n-\t  \n+\n \t  /* Does it need synthesizing?  */\n \t  if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl)\n \t      && TREE_USED (decl)\n@@ -2749,6 +2747,15 @@ finish_file ()\n \t      reconsider = true;\n \t    }\n \n+\t  /* If the function has no body, avoid calling\n+\t     import_export_decl.  On a system without weak symbols,\n+\t     calling import_export_decl will make an inline template\n+\t     instantiation \"static\", which will result in errors about\n+\t     the use of undefined functions if there is no body for\n+\t     the function.  */\n+\t  if (!DECL_SAVED_TREE (decl))\n+\t    continue;\n+\n \t  /* We lie to the back-end, pretending that some functions\n \t     are not defined when they really are.  This keeps these\n \t     functions from being put out unnecessarily.  But, we must\n@@ -4668,7 +4675,10 @@ handle_class_head (enum tag_types tag_kind, tree scope, tree id,\n   \n   if (!decl)\n     {\n-      decl = TYPE_MAIN_DECL (xref_tag (tag_kind, id, attributes, false));\n+      decl = xref_tag (tag_kind, id, attributes, false);\n+      if (decl == error_mark_node)\n+\treturn error_mark_node;\n+      decl = TYPE_MAIN_DECL (decl);\n       xrefd_p = true;\n     }\n "}, {"sha": "9faf0353e0f47df3e509d8b3f2983c03c7999fee", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ea56c40c484e89e5a67f71a2c90a1ad645c89540", "patch": "@@ -10927,11 +10927,6 @@ instantiate_decl (d, defer_ok)\n   if (need_push)\n     push_to_top_level ();\n \n-  /* We're now committed to instantiating this template.  Mark it as\n-     instantiated so that recursive calls to instantiate_decl do not\n-     try to instantiate it again.  */\n-  DECL_TEMPLATE_INSTANTIATED (d) = 1;\n-\n   /* Regenerate the declaration in case the template has been modified\n      by a subsequent redeclaration.  */\n   regenerate_decl_from_template (d, td);\n@@ -10950,10 +10945,36 @@ instantiate_decl (d, defer_ok)\n       DECL_IN_AGGR_P (d) = 0;\n       import_export_decl (d);\n       DECL_EXTERNAL (d) = ! DECL_NOT_REALLY_EXTERN (d);\n-      cp_finish_decl (d, \n-\t\t      (!DECL_INITIALIZED_IN_CLASS_P (d) \n-\t\t       ? DECL_INITIAL (d) : NULL_TREE),\n-\t\t      NULL_TREE, 0);\n+\n+      if (DECL_EXTERNAL (d))\n+\t{\n+\t  /* The fact that this code is executing indicates that:\n+\t     \n+\t     (1) D is a template static data member, for which a\n+\t         definition is available.\n+\n+\t     (2) An implicit or explicit instantiation has occured.\n+\n+\t     (3) We are not going to emit a definition of the static\n+\t         data member at this time.\n+\n+\t     This situation is peculiar, but it occurs on platforms\n+\t     without weak symbols when performing an implicit\n+\t     instantiation.  There, we cannot implicitly instantiate a\n+\t     defined static data member in more than one translation\n+\t     unit, so import_export_decl marks the declaration as\n+\t     external; we must rely on explicit instantiation.  */\n+\t}\n+      else\n+\t{\n+\t  /* Mark D as instantiated so that recursive calls to\n+\t     instantiate_decl do not try to instantiate it again.  */\n+\t  DECL_TEMPLATE_INSTANTIATED (d) = 1;\n+\t  cp_finish_decl (d, \n+\t\t\t  (!DECL_INITIALIZED_IN_CLASS_P (d) \n+\t\t\t   ? DECL_INITIAL (d) : NULL_TREE),\n+\t\t\t  NULL_TREE, 0);\n+\t}\n     }\n   else if (TREE_CODE (d) == FUNCTION_DECL)\n     {\n@@ -10962,6 +10983,10 @@ instantiate_decl (d, defer_ok)\n       tree tmpl_parm;\n       tree spec_parm;\n \n+      /* Mark D as instantiated so that recursive calls to\n+\t instantiate_decl do not try to instantiate it again.  */\n+      DECL_TEMPLATE_INSTANTIATED (d) = 1;\n+\n       /* Save away the current list, in case we are instantiating one\n \t template from within the body of another.  */\n       saved_local_specializations = local_specializations;"}, {"sha": "2590adf336a4bbc703ee24982cf4cf538bcf421e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea56c40c484e89e5a67f71a2c90a1ad645c89540", "patch": "@@ -1,3 +1,8 @@\n+2003-04-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/instantiate12.C: Explicit instantiate\n+\tinitialized static data members.\n+\n 2003-04-25  H.J. Lu <hjl@gnu.org>\n \n \t* gcc.dg/ia64-sync-4.c: New test."}, {"sha": "ce1efe0c7314a067d9e8ebfbfb72099e6cd867ce", "filename": "gcc/testsuite/g++.old-deja/g++.pt/instantiate12.C", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finstantiate12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea56c40c484e89e5a67f71a2c90a1ad645c89540/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finstantiate12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finstantiate12.C?ref=ea56c40c484e89e5a67f71a2c90a1ad645c89540", "patch": "@@ -48,3 +48,13 @@ int main ()\n     return 9;\n   return 0;\n }\n+\n+// On platforms that do not have weak symbols, these static data\n+// members must be explicitly instantiated.  The iflag and jflag data\n+// members should not have to be explicitly instantiated because their\n+// const-ness should allow the compiler to elide references to the\n+// actual variables.\n+template const bool X<int>::cflag;\n+template const bool X<int>::flag;\n+template const bool X<float>::cflag;\n+template const bool X<float>::flag;"}]}