{"sha": "5ef865d5709f9c917e1152ee5246906983e23725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmODY1ZDU3MDlmOWM5MTdlMTE1MmVlNTI0NjkwNjk4M2UyMzcyNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-08-02T07:08:49Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-02T07:08:49Z"}, "message": "cppexp.c, [...]: Do not use 'legal' or 'illegal' in error messages and comments.\n\n\t* cppexp.c, cppinit.c, cpplex.c, cpplib.c, cppmacro.c,\n\tcppspec.c: Do not use 'legal' or 'illegal' in error messages\n\tand comments.\n\n\t* cppmain.c (cb_define, cb_undef): Don't generate any output\n\tif not done_initializing.\n\t* cpplex.c (maybe_paste_with_next): When the token after a ##\n\tis an omitted rest argument, only delete the token before it\n\tif that token is a comma.  Do not warn about bogus token\n\tpastes for , ## rest_arg.\n\n\t* cpp.texi: Update.\n\t* cpp.1: Regenerate.\n\n\t* gcc.dg/cpp/macsyntx.c: Fix error regexp.\n\nFrom-SVN: r35421", "tree": {"sha": "5449dc33f09873b105cb47551859fae03a5f1a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5449dc33f09873b105cb47551859fae03a5f1a89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ef865d5709f9c917e1152ee5246906983e23725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef865d5709f9c917e1152ee5246906983e23725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ef865d5709f9c917e1152ee5246906983e23725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef865d5709f9c917e1152ee5246906983e23725/comments", "author": null, "committer": null, "parents": [{"sha": "a7a4fd1776384e896797de1f06773ca1e7e908d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a4fd1776384e896797de1f06773ca1e7e908d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a4fd1776384e896797de1f06773ca1e7e908d4"}], "stats": {"total": 764, "additions": 469, "deletions": 295}, "files": [{"sha": "35637aad1dbb619ceb7cbf72ccb8eb36c0171a39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -1,3 +1,19 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppexp.c, cppinit.c, cpplex.c, cpplib.c, cppmacro.c,\n+\tcppspec.c: Do not use 'legal' or 'illegal' in error messages\n+\tand comments.\n+\n+\t* cppmain.c (cb_define, cb_undef): Don't generate any output\n+\tif not done_initializing.\n+\t* cpplex.c (maybe_paste_with_next): When the token after a ## \n+\tis an omitted rest argument, only delete the token before it\n+\tif that token is a comma.  Do not warn about bogus token\n+\tpastes for , ## rest_arg.\n+\n+\t* cpp.texi: Update.\n+\t* cpp.1: Regenerate.\n+\n 2000-08-02  Fred Fish  <fnf@be.com>\n \n \t* config/i386/beos-elf.h (STARTFILE_SPEC): Add i386-mcount.o"}, {"sha": "4c6da5fc06cfdd6c0c386a891ec12942dfdbdf61", "filename": "gcc/cpp.1", "status": "modified", "additions": 197, "deletions": 141, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpp.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpp.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.1?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -73,7 +73,7 @@\n .ds T' '\n .ds PI \\(*p\n 'br\\}\n-.TH CPP 1 \"gcc-2.95\" \"14/Jun/99\" \"GNU\"\n+.TH CPP 1 \"gcc-3.0\" \"1/Aug/2000\" \"GNU\"\n .UC\n .if n .hy 0\n .if n .na\n@@ -181,13 +181,20 @@ cpp [\\fB\\-P\\fR] [\\fB\\-C\\fR] [\\fB\\-gcc\\fR] [\\fB\\-traditional\\fR]\n .PP\n Only the most useful options are listed here; see below for the remainder.\n .SH \"DESCRIPTION\"\n-The C preprocessor is a \\fImacro processor\\fR that is used automatically by\n-the C compiler to transform your program before actual compilation.  It is\n-called a macro processor because it allows you to define \\fImacros\\fR,\n-which are brief abbreviations for longer constructs.\n+The C preprocessor is a \\fImacro processor\\fR that is used automatically\n+by the C compiler to transform your program before actual compilation.\n+It is called a macro processor because it allows you to define\n+\\fImacros\\fR, which are brief abbreviations for longer constructs.\n .PP\n-The C preprocessor provides four separate facilities that you can use as\n-you see fit:\n+The C preprocessor is intended only for macro processing of C, \\*(C+ and\n+Objective C source files.  For macro processing of other files, you are\n+strongly encouraged to use alternatives like M4, which will likely give\n+you better results and avoid many problems.  For example, normally the C\n+preprocessor does not preserve arbitrary whitespace verbatim, but\n+instead replaces each sequence with a single space.\n+.PP\n+For use on C\\-like source files, the C preprocessor provides four\n+separate facilities that you can use as you see fit:\n .Ip \"\\(bu\" 4\n Inclusion of header files.  These are files of declarations that can be\n substituted into your program.\n@@ -200,32 +207,27 @@ Conditional compilation.  Using special preprocessing directives, you\n can include or exclude parts of the program according to various\n conditions.\n .Ip \"\\(bu\" 4\n-Line control.  If you use a program to combine or rearrange source files into\n-an intermediate file which is then compiled, you can use line control\n-to inform the compiler of where each source line originally came from.\n+Line control.  If you use a program to combine or rearrange source files\n+into an intermediate file which is then compiled, you can use line\n+control to inform the compiler of where each source line originally came\n+from.\n .PP\n C preprocessors vary in some details.  This manual discusses the \\s-1GNU\\s0 C\n-preprocessor, the C Compatible Compiler Preprocessor.  The \\s-1GNU\\s0 C\n-preprocessor provides a superset of the features of \\s-1ANSI\\s0 Standard C.\n-.PP\n-\\s-1ANSI\\s0 Standard C requires the rejection of many harmless constructs commonly\n-used by today's C programs.  Such incompatibility would be inconvenient for\n-users, so the \\s-1GNU\\s0 C preprocessor is configured to accept these constructs\n-by default.  Strictly speaking, to get \\s-1ANSI\\s0 Standard C, you must use the\n-options \\fB\\-trigraphs\\fR, \\fB\\-undef\\fR and \\fB\\-pedantic\\fR, but in\n-practice the consequences of having strict \\s-1ANSI\\s0 Standard C make it\n-undesirable to do this.  \n+preprocessor, which provides a small superset of the features of \\s-1ISO\\s0\n+Standard C.\n .PP\n-The C preprocessor is designed for C\\-like languages; you may run into\n-problems if you apply it to other kinds of languages, because it assumes\n-that it is dealing with C.  For example, the C preprocessor sometimes\n-outputs extra white space to avoid inadvertent C token concatenation,\n-and this may cause problems with other languages.\n+In its default mode, the \\s-1GNU\\s0 C preprocessor does not do a few things\n+required by the standard.  These are features which are rarely, if ever,\n+used, and may cause surprising changes to the meaning of a program which\n+does not expect them.  To get strict \\s-1ISO\\s0 Standard C, you should use the\n+\\fB\\-std=c89\\fR or \\fB\\-std=c99\\fR options, depending on which version\n+of the standard you want.  To get all the mandatory diagnostics, you\n+must also use \\fB\\-pedantic\\fR.  \n .SH \"OPTIONS\"\n The C preprocessor expects two file names as arguments, \\fIinfile\\fR and\n-\\fIoutfile\\fR.  The preprocessor reads \\fIinfile\\fR together with any other\n-files it specifies with \\fB#include\\fR.  All the output generated by the\n-combined input files is written in \\fIoutfile\\fR.\n+\\fIoutfile\\fR.  The preprocessor reads \\fIinfile\\fR together with any\n+other files it specifies with \\fB#include\\fR.  All the output generated\n+by the combined input files is written in \\fIoutfile\\fR.\n .PP\n Either \\fIinfile\\fR or \\fIoutfile\\fR may be \\fB\\-\\fR, which as\n \\fIinfile\\fR means to read from standard input and as \\fIoutfile\\fR\n@@ -237,61 +239,69 @@ These options can also be given when compiling a C program; they are\n passed along automatically to the preprocessor when it is invoked by the\n compiler.\n .Ip \"\\fB\\-P\\fR\" 4\n-Inhibit generation of \\fB#\\fR\\-lines with line-number information in\n-the output from the preprocessor   This might be\n-useful when running the preprocessor on something that is not C code\n-and will be sent to a program which might be confused by the\n-\\fB#\\fR\\-lines.\n+Inhibit generation of \\fB#\\fR\\-lines with line-number information in the\n+output from the preprocessor.  This might be useful when running the\n+preprocessor on something that is not C code and will be sent to a\n+program which might be confused by the \\fB#\\fR\\-lines.  \n .Ip \"\\fB\\-C\\fR\" 4\n-Do not discard comments: pass them through to the output file.\n-Comments appearing in arguments of a macro call will be copied to the\n-output before the expansion of the macro call.\n+Do not discard comments.  All comments are passed through to the output\n+file, except for comments in processed directives, which are deleted\n+along with the directive.  Comments appearing in the expansion list of a\n+macro will be preserved, and appear in place wherever the macro is\n+invoked.\n+.Sp\n+You should be prepared for side effects when using \\fB\\-C\\fR; it causes\n+the preprocessor to treat comments as tokens in their own right.  For\n+example, macro redefinitions that were trivial when comments were\n+replaced by a single space might become significant when comments are\n+retained.  Also, comments appearing at the start of what would be a\n+directive line have the effect of turning that line into an ordinary\n+source line, since the first token on the line is no longer a \\fB#\\fR.\n .Ip \"\\fB\\-traditional\\fR\" 4\n-Try to imitate the behavior of old-fashioned C, as opposed to \\s-1ANSI\\s0 C.\n-.Ip \"\\(bu\" 8\n-Traditional macro expansion pays no attention to singlequote or\n-doublequote characters; macro argument symbols are replaced by the\n+Try to imitate the behavior of old-fashioned C, as opposed to \\s-1ISO\\s0 C.\n+.RS 4\n+.Ip \"\\(bu\" 4\n+Traditional macro expansion pays no attention to single-quote or\n+double-quote characters; macro argument symbols are replaced by the\n argument values even when they appear within apparent string or\n character constants.\n-.Ip \"\\(bu\" 8\n+.Ip \"\\(bu\" 4\n Traditionally, it is permissible for a macro expansion to end in the\n middle of a string or character constant.  The constant continues into\n the text surrounding the macro call.\n-.Ip \"\\(bu\" 8\n+.Ip \"\\(bu\" 4\n However, traditionally the end of the line terminates a string or\n character constant, with no error.\n-.Ip \"\\(bu\" 8\n-In traditional C, a comment is equivalent to no text at all.  (In \\s-1ANSI\\s0\n+.Ip \"\\(bu\" 4\n+In traditional C, a comment is equivalent to no text at all.  (In \\s-1ISO\\s0\n C, a comment counts as whitespace.)\n-.Ip \"\\(bu\" 8\n+.Ip \"\\(bu\" 4\n Traditional C does not have the concept of a ``preprocessing number'\\*(R'.\n It considers \\fB1.0e+4\\fR to be three tokens: \\fB1.0e\\fR, \\fB+\\fR,\n and \\fB4\\fR.\n-.Ip \"\\(bu\" 8\n+.Ip \"\\(bu\" 4\n A macro is not suppressed within its own definition, in traditional C.\n Thus, any macro that is used recursively inevitably causes an error.\n-.Ip \"\\(bu\" 8\n+.Ip \"\\(bu\" 4\n The character \\fB#\\fR has no special meaning within a macro definition\n in traditional C.\n-.Ip \"\\(bu\" 8\n+.Ip \"\\(bu\" 4\n In traditional C, the text at the end of a macro expansion can run\n together with the text after the macro call, to produce a single token.\n-(This is impossible in \\s-1ANSI\\s0 C.)\n-.Ip \"\\(bu\" 8\n-Traditionally, \\fB\\e\\fR inside a macro argument suppresses the syntactic\n-significance of the following character.\n-.Sp\n-Use the \\fB\\-traditional\\fR option when preprocessing Fortran code,\n-so that singlequotes and doublequotes\n-within Fortran comment lines\n-(which are generally not recognized as such by the preprocessor)\n-do not cause diagnostics\n-about unterminated character or string constants.\n+(This is impossible in \\s-1ISO\\s0 C.)\n+.Ip \"\\(bu\" 4\n+None of the \\s-1GNU\\s0 extensions to the preprocessor are available in\n+\\fB\\-traditional\\fR mode.\n+.RE\n+.Ip \"\" 4\n+Use the \\fB\\-traditional\\fR option when preprocessing Fortran code, so\n+that single-quotes and double-quotes within Fortran comment lines (which\n+are generally not recognized as such by the preprocessor) do not cause\n+diagnostics about unterminated character or string constants.\n .Sp\n-However, this option does not prevent diagnostics\n-about unterminated comments\n-when a C\\-style comment appears to start, but not end,\n-within Fortran-style commentary.\n+However, this option does not prevent diagnostics about unterminated\n+comments when a C\\-style comment appears to start, but not end, within\n+Fortran-style commentary.\n .Sp\n So, the following Fortran comment lines are accepted with\n \\fB\\-traditional\\fR:\n@@ -301,49 +311,77 @@ So, the following Fortran comment lines are accepted with\n \\&        C Neither is \"20000000000, an octal constant\n \\&        C in some dialects of Fortran\n .Ve\n-However, this type of comment line will likely produce a diagnostic,\n-or at least unexpected output from the preprocessor,\n-due to the unterminated comment:\n+However, this type of comment line will likely produce a diagnostic, or\n+at least unexpected output from the preprocessor, due to the\n+unterminated comment:\n .Sp\n .Vb 2\n \\&        C Some Fortran compilers accept /* as starting\n \\&        C an inline comment.\n .Ve\n-Note that \\f(CWg77\\fR automatically supplies\n-the \\fB\\-traditional\\fR option\n-when it invokes the preprocessor.\n-However, a future version of \\f(CWg77\\fR\n-might use a different, more-Fortran-aware preprocessor\n-in place of \\f(CWcpp\\fR.\n+Note that \\f(CWg77\\fR automatically supplies the \\fB\\-traditional\\fR\n+option when it invokes the preprocessor.  However, a future version of\n+\\f(CWg77\\fR might use a different, more-Fortran-aware preprocessor in\n+place of \\f(CWcpp\\fR.\n .Ip \"\\fB\\-trigraphs\\fR\" 4\n-Process \\s-1ANSI\\s0 standard trigraph sequences.  These are three-character\n-sequences, all starting with \\fB??\\fR, that are defined by \\s-1ANSI\\s0 C to\n+Process \\s-1ISO\\s0 standard trigraph sequences.  These are three-character\n+sequences, all starting with \\fB??\\fR, that are defined by \\s-1ISO\\s0 C to\n stand for single characters.  For example, \\fB??/\\fR stands for\n-\\fB\\e\\fR, so \\fB\\*(R'??/n\\*(R'\\fR is a character constant for a newline.\n-Strictly speaking, the \\s-1GNU\\s0 C preprocessor does not support all\n-programs in \\s-1ANSI\\s0 Standard C unless \\fB\\-trigraphs\\fR is used, but if\n-you ever notice the difference it will be with relief.\n+\\fB\\e\\fR, so \\fB\\*(R'??/n\\*(R'\\fR is a character constant for a newline.  By\n+default, \\s-1GCC\\s0 ignores trigraphs, but in standard-conforming modes it\n+converts them.  See the \\fB\\-std\\fR option.\n .Sp\n-You don't want to know any more about trigraphs.\n+The nine trigraph sequences are\n+.RS 4\n+.PD 0\n+.SP\n+.Ip \"\\fB??(\\fR\" 6\n+->\t\\fB[\\fR\n+.Ip \"\\fB??)\\fR\" 6\n+->\t\\fB]\\fR\n+.Ip \"\\fB??<\\fR\" 6\n+->\t\\fB@{\\fR\n+.Ip \"\\fB??>\\fR\" 6\n+->\t\\fB@\\fR}\n+.Ip \"\\fB??=\\fR\" 6\n+->\t\\fB#\\fR\n+.Ip \"\\fB??/\\fR\" 6\n+->\t\\fB\\e\\fR\n+.Ip \"\\fB??\\*(T'\\fR\" 6\n+->\t\\fB^\\fR\n+.Ip \"\\fB??!\\fR\" 6\n+->\t\\fB|\\fR\n+.Ip \"\\fB??\\-\\fR\" 6\n+->\t\\fB~\\fR\n+.RE\n+.PD\n+.Ip \"\" 4\n+Trigraph support is not popular, so many compilers do not implement it\n+properly.  Portable code should not rely on trigraphs being either\n+converted or ignored.\n .Ip \"\\fB\\-pedantic\\fR\" 4\n-Issue warnings required by the \\s-1ANSI\\s0 C standard in certain cases such\n+Issue warnings required by the \\s-1ISO\\s0 C standard in certain cases such\n as when text other than a comment follows \\fB#else\\fR or \\fB#endif\\fR.\n .Ip \"\\fB\\-pedantic-errors\\fR\" 4\n Like \\fB\\-pedantic\\fR, except that errors are produced rather than\n warnings.\n-.Ip \"\\fB\\-Wtrigraphs\\fR\" 4\n-Warn if any trigraphs are encountered.  Currently this only works if you\n-have turned trigraphs on with \\fB\\-trigraphs\\fR or \\fB\\-ansi\\fR; in the\n-future this restriction will be removed.\n .Ip \"\\fB\\-Wcomment\\fR\" 4\n+.Ip \"\\fB\\-Wcomments\\fR\" 4\n+(Both forms have the same effect).\n Warn whenever a comment-start sequence \\fB/*\\fR appears in a \\fB/*\\fR\n-comment, or whenever a Backslash-Newline appears in a \\fB//\\fR comment.\n+comment, or whenever a backslash-newline appears in a \\fB//\\fR comment.\n+.Ip \"\\fB\\-Wtrigraphs\\fR\" 4\n+Warn if any trigraphs are encountered.  This option used to take effect\n+only if \\fB\\-trigraphs\\fR was also specified, but now works independently.\n+.Ip \"\\fB\\-Wwhite-space\\fR\" 4\n+Warn about possible white space confusion, e.g. white space between a\n+backslash and a newline.\n .Ip \"\\fB\\-Wall\\fR\" 4\n-Requests both \\fB\\-Wtrigraphs\\fR and \\fB\\-Wcomment\\fR (but not\n-\\fB\\-Wtraditional\\fR or \\fB\\-Wundef\\fR). \n+Requests \\fB\\-Wcomment\\fR, \\fB\\-Wtrigraphs\\fR, and \\fB\\-Wwhite-space\\fR\n+(but not \\fB\\-Wtraditional\\fR or \\fB\\-Wundef\\fR).\n .Ip \"\\fB\\-Wtraditional\\fR\" 4\n Warn about certain constructs that behave differently in traditional and\n-\\s-1ANSI\\s0 C.\n+\\s-1ISO\\s0 C.\n .Ip \"\\fB\\-Wundef\\fR\" 4\n Warn if an undefined identifier is evaluated in an \\fB#if\\fR directive.\n .Ip \"\\fB\\-I \\fIdirectory\\fR\\fR\" 4\n@@ -356,15 +394,15 @@ the directories are scanned in left-to-right order; the standard\n system directories come after.\n .Ip \"\\fB\\-I-\\fR\" 4\n Any directories specified with \\fB\\-I\\fR options before the \\fB\\-I-\\fR\n-option are searched only for the case of \\fB#include \\*(L\"\\fIfile\\fB\\*(R\"\\fR;\n-they are not searched for \\fB#include <\\fIfile\\fB>\\fR.\n+option are searched only for the case of \\fB#include \\*(L\"\\fIfile\\fR\\*(R\"\\fR;\n+they are not searched for \\fB#include <\\fIfile\\fR>\\fR.\n .Sp\n If additional directories are specified with \\fB\\-I\\fR options after\n the \\fB\\-I-\\fR, these directories are searched for all \\fB#include\\fR\n directives.\n .Sp\n In addition, the \\fB\\-I-\\fR option inhibits the use of the current\n-directory as the first search directory for \\fB#include \\*(L\"\\fIfile\\fB\\*(R\"\\fR.\n+directory as the first search directory for \\fB#include \\*(L\"\\fIfile\\fR\\*(R\"\\fR.\n Therefore, the current directory is searched only if it is requested\n explicitly with \\fB\\-I.\\fR.  Specifying both \\fB\\-I-\\fR and \\fB\\-I.\\fR\n allows you to control precisely which directories are searched before\n@@ -375,8 +413,8 @@ Only the directories you have specified with \\fB\\-I\\fR options\n (and the current directory, if appropriate) are searched.\n .Ip \"\\fB\\-nostdinc++\\fR\" 4\n Do not search for header files in the \\*(C+\\-specific standard directories,\n-but do still search the other standard directories.\n-(This option is used when building the \\*(C+ library.)\n+but do still search the other standard directories.  (This option is\n+used when building the \\*(C+ library.)\n .Ip \"\\fB\\-remap\\fR\" 4\n When searching for a header file in a directory, remap file names if a\n file named \\fIheader.gcc\\fR exists in that directory.  This can be used\n@@ -402,15 +440,17 @@ wins.\n Do not predefine any nonstandard macros.\n .Ip \"\\fB\\-gcc\\fR\" 4\n Define the macros \\fI_\\|_GNUC_\\|_\\fR, \\fI_\\|_GNUC_MINOR_\\|_\\fR and\n-\\fI_\\|_GNUC_PATCHLEVEL_\\|_\\fR.  These are defined automatically when you\n-use \\fBgcc \\-E\\fR; you can turn them off in that case with \\fB\\-no-gcc\\fR.\n+\\fI_\\|_GNUC_PATCHLEVEL_\\|_\\fR. These are defined automatically when you use\n+\\fBgcc \\-E\\fR; you can turn them off in that case with \\fB\\-no-gcc\\fR.\n .Ip \"\\fB\\-A \\fIpredicate\\fR(\\fIanswer\\fR)\\fR\" 4\n Make an assertion with the predicate \\fIpredicate\\fR and answer\n \\fIanswer\\fR.  \n-.Sp\n-You can use \\fB\\-A-\\fR to disable all predefined assertions; it also\n-undefines all predefined macros and all macros that preceded it on the\n-command line.\n+.Ip \"\\fB\\-A \\-\\fIpredicate\\fR(\\fIanswer\\fR)\\fR\" 4\n+Disable an assertion with the predicate \\fIpredicate\\fR and answer\n+\\fIanswer\\fR.  Specifying no predicate, by \\fB\\-A-\\fR or \\fB\\-A \\-\\fR,\n+disables all predefined assertions and all assertions preceding it on\n+the command line; and also undefines all predefined macros and all\n+macros preceding it on the command line.\n .Ip \"\\fB\\-dM\\fR\" 4\n Instead of outputting the result of preprocessing, output a list of\n \\fB#define\\fR directives for all the macros defined during the\n@@ -427,19 +467,22 @@ Like \\fB\\-dM\\fR except in two respects: it does \\fInot\\fR include the\n predefined macros, and it outputs \\fIboth\\fR the \\fB#define\\fR\n directives and the result of preprocessing.  Both kinds of output go to\n the standard output file.\n+.Ip \"\\fB\\-dN\\fR\" 4\n+Like \\fB\\-dD\\fR, but emit only the macro names, not their expansions.\n .Ip \"\\fB\\-dI\\fR\" 4\n-Output \\fB#include\\fR directives in addition to the result of preprocessing.\n+Output \\fB#include\\fR directives in addition to the result of\n+preprocessing.\n .Ip \"\\fB\\-M [\\-\\s-1MG\\s0]\\fR\" 4\n Instead of outputting the result of preprocessing, output a rule\n-suitable for \\f(CWmake\\fR describing the dependencies of the main\n-source file.  The preprocessor outputs one \\f(CWmake\\fR rule containing\n-the object file name for that source file, a colon, and the names of\n-all the included files.  If there are many included files then the\n-rule is split into several lines using \\fB\\e\\fR\\-newline.\n+suitable for \\f(CWmake\\fR describing the dependencies of the main source\n+file.  The preprocessor outputs one \\f(CWmake\\fR rule containing the\n+object file name for that source file, a colon, and the names of all the\n+included files.  If there are many included files then the rule is split\n+into several lines using \\fB\\e\\fR\\-newline.\n .Sp\n-\\fB\\-\\s-1MG\\s0\\fR says to treat missing header files as generated files and assume\n-they live in the same directory as the source file.  It must be specified\n-in addition to \\fB\\-M\\fR.\n+\\fB\\-\\s-1MG\\s0\\fR says to treat missing header files as generated files and\n+assume they live in the same directory as the source file.  It must be\n+specified in addition to \\fB\\-M\\fR.\n .Sp\n This feature is used in automatic updating of makefiles.\n .Ip \"\\fB\\-\\s-1MM\\s0 [\\-\\s-1MG\\s0]\\fR\" 4\n@@ -448,16 +491,16 @@ Like \\fB\\-M\\fR but mention only the files included with \\fB#include\n <\\fIfile\\fR>\\fR are omitted.\n .Ip \"\\fB\\-\\s-1MD\\s0 \\fIfile\\fR\\fR\" 4\n Like \\fB\\-M\\fR but the dependency information is written to \\fIfile\\fR.\n-This is in addition to compiling the file as specified---\\fB\\-\\s-1MD\\s0\\fR does\n-not inhibit ordinary compilation the way \\fB\\-M\\fR does.\n+This is in addition to compiling the file as specified --- \\fB\\-\\s-1MD\\s0\\fR\n+does not inhibit ordinary compilation the way \\fB\\-M\\fR does.\n .Sp\n When invoking \\f(CWgcc\\fR, do not specify the \\fIfile\\fR argument.\n \\f(CWgcc\\fR will create file names made by replacing \\*(L\".c\\*(R\" with \\*(L\".d\\*(R\" at\n the end of the input file names.\n .Sp\n In Mach, you can use the utility \\f(CWmd\\fR to merge multiple dependency\n-files into a single dependency file suitable for using with the \\fBmake\\fR\n-command.\n+files into a single dependency file suitable for using with the\n+\\fBmake\\fR command.\n .Ip \"\\fB\\-\\s-1MMD\\s0 \\fIfile\\fR\\fR\" 4\n Like \\fB\\-\\s-1MD\\s0\\fR except mention only user header files, not system\n header files.\n@@ -480,15 +523,16 @@ in any of the directories in the main include path (the one that\n \\fB\\-I\\fR adds to).\n .Ip \"\\fB\\-iprefix \\fIprefix\\fR\\fR\" 4\n Specify \\fIprefix\\fR as the prefix for subsequent \\fB\\-iwithprefix\\fR\n-options.\n+options.  If the prefix represents a directory, you should include the\n+final \\fB/\\fR.\n .Ip \"\\fB\\-iwithprefix \\fIdir\\fR\\fR\" 4\n Add a directory to the second include path.  The directory's name is\n-made by concatenating \\fIprefix\\fR and \\fIdir\\fR, where \\fIprefix\\fR\n-was specified previously with \\fB\\-iprefix\\fR.\n+made by concatenating \\fIprefix\\fR and \\fIdir\\fR, where \\fIprefix\\fR was\n+specified previously with \\fB\\-iprefix\\fR.\n .Ip \"\\fB\\-isystem \\fIdir\\fR\\fR\" 4\n Add a directory to the beginning of the second include path, marking it\n as a system directory, so that it gets the same special treatment as\n-is applied to the standard system directories.\n+is applied to the standard system directories.  \n .Ip \"\\fB\\-x c\\fR\" 4\n .Ip \"\\fB\\-x c++\\fR\" 4\n .Ip \"\\fB\\-x objective-c\\fR\" 4\n@@ -514,39 +558,52 @@ added in the future.\n .Sp\n \\fIstandard\\fR\n may be one of:\n-.Ip \"\\f(CWiso9899:1990\\fR\" 8\n-The \\s-1ISO\\s0 C standard from 1990.\n-.Ip \"\\f(CWiso9899:199409\\fR\" 8\n-.Ip \"\\f(CWc89\\fR\" 8\n-The 1990 C standard, as amended in 1994.  \\fBc89\\fR is the customary\n-shorthand for this version of the standard.\n+.RS 4\n+.PD 0\n+.Sp\n+.Ip \"\\f(CWiso9899:1990\\fR\" 4\n+.Ip \"\\f(CWc89\\fR\" 4\n+.Ip\n+The \\s-1ISO\\s0 C standard from 1990.  \\fBc89\\fR is the customary shorthand for\n+this version of the standard.\n .Sp\n The \\fB\\-ansi\\fR option is equivalent to \\fB\\-std=c89\\fR.\n-.Ip \"\\f(CWiso9899:199x\\fR\" 8\n-.Ip \"\\f(CWc9x\\fR\" 8\n-The revised \\s-1ISO\\s0 C standard, which is expected to be promulgated some\n-time in 1999.  It has not been approved yet, hence the \\fBx\\fR.\n-.Ip \"\\f(CWgnu89\\fR\" 8\n+.Sp\n+.Ip \"\\f(CWiso9899:199409\\fR\" 4\n+The 1990 C standard, as amended in 1994.\n+.Sp\n+.Ip \"\\f(CWiso9899:1999\\fR\" 4\n+.Ip \"\\f(CWc99\\fR\" 4\n+.Ip \"\\f(CWiso9899:199x\\fR\" 4\n+.Ip \"\\f(CWc9x\\fR\" 4\n+.Ip\n+The revised \\s-1ISO\\s0 C standard, published in December 1999.  Before\n+publication, this was known as C9X.\n+.Sp\n+.Ip \"\\f(CWgnu89\\fR\" 4\n The 1990 C standard plus \\s-1GNU\\s0 extensions.  This is the default.\n-.Ip \"\\f(CWgnu9x\\fR\" 8\n-The 199x C standard plus \\s-1GNU\\s0 extensions.\n-.Ip \"\\fB\\-Wp,\\-lint\\fR\" 4\n-Look for commands to the program checker \\f(CWlint\\fR embedded in\n-comments, and emit them preceded by \\fB#pragma lint\\fR.  For example,\n-the comment \\fB/* \\s-1NOTREACHED\\s0 */\\fR becomes \\fB#pragma lint\n-\\s-1NOTREACHED\\s0\\fR.\n .Sp\n-Because of the clash with \\fB\\-l\\fR, you must use the awkward syntax\n-above.  In a future release, this option will be replaced by\n-\\fB\\-flint\\fR or \\fB\\-Wlint\\fR; we are not sure which yet.\n+.Ip \"\\f(CWgnu99\\fR\" 4\n+.Ip \"\\f(CWgnu9x\\fR\" 4\n+The 1999 C standard plus \\s-1GNU\\s0 extensions.\n+.PD\n+.RE\n+.Ip \"\\fB\\-ftabstop=\\s-1NUMBER\\s0\\fR\" 4\n+Set the distance between tabstops.  This helps the preprocessor\n+report correct column numbers in warnings or errors, even if tabs appear\n+on the line.  Values less than 1 or greater than 100 are ignored.  The\n+default is 8.\n .Ip \"\\fB\\-$\\fR\" 4\n-Forbid the use of \\fB$\\fR in identifiers.  The C standard does not\n-permit this, but it is a common extension.\n+Forbid the use of \\fB$\\fR in identifiers.  The C standard allows\n+implementations to define extra characters that can appear in\n+identifiers.  By default the \\s-1GNU\\s0 C preprocessor permits \\fB$\\fR, a\n+common extension.\n .SH \"SEE ALSO\"\n \\fIgcc\\fR\\|(1), \\fIas\\fR\\|(1), \\fIld\\fR\\|(1), and the Info entries for \\fIcpp\\fR, \\fIgcc\\fR, and\n \\fIbinutils\\fR.\n .SH \"COPYRIGHT\"\n-Copyright  1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999\n+Copyright  1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,\n+1997, 1998, 1999, 2000\n Free Software Foundation, Inc.\n .PP\n Permission is granted to make and distribute verbatim copies of\n@@ -560,4 +617,3 @@ permission notice identical to this one.\n .PP\n Permission is granted to copy and distribute translations of this manual\n into another language, under the above conditions for modified versions.\n-.rn }` ''"}, {"sha": "acccf1d9e73a96390a047fb6c344db1aaf5895dc", "filename": "gcc/cpp.texi", "status": "modified", "additions": 212, "deletions": 134, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -116,13 +116,13 @@ C preprocessors vary in some details.  This manual discusses the GNU C\n preprocessor, which provides a small superset of the features of ISO\n Standard C@.\n \n-ISO Standard C requires the rejection of many harmless constructs\n-commonly used by today's C programs.  Such incompatibility would be\n-inconvenient for users, so the GNU C preprocessor is configured to\n-accept these constructs by default.  Strictly speaking, to get ISO\n-Standard C, you must use the options @samp{-trigraphs}, @samp{-undef}\n-and @samp{-pedantic}, but in practice the consequences of having strict\n-ISO Standard C make it undesirable to do this.  @xref{Invocation}.\n+In its default mode, the GNU C preprocessor does not do a few things\n+required by the standard.  These are features which are rarely, if ever,\n+used, and may cause surprising changes to the meaning of a program which\n+does not expect them.  To get strict ISO Standard C, you should use the\n+@samp{-std=c89} or @samp{-std=c99} options, depending on which version\n+of the standard you want.  To get all the mandatory diagnostics, you\n+must also use @samp{-pedantic}.  @xref{Invocation}.\n \n @c man end\n \n@@ -172,11 +172,10 @@ Predefined macro names are replaced with their expansions\n (@pxref{Predefined}).\n @end itemize\n \n-The first three transformations are done @emph{before} nearly all other\n-parsing and before preprocessing directives are recognized.  Thus, for\n-example, you can split a line cosmetically with backslash-newline\n-anywhere (except within trigraphs since they are replaced first; see\n-below).\n+The first three transformations are done @emph{before} all other parsing\n+and before preprocessing directives are recognized.  Thus, for example,\n+you can split a line mechanically with backslash-newline anywhere\n+(except within trigraphs since they are replaced first; see below).\n \n @example\n /*\n@@ -188,39 +187,44 @@ O 10\\\n @end example\n \n @noindent\n-is equivalent into @samp{#define FOO 1020}.  You can split even an\n-escape sequence with backslash-newline.  For example, you can split\n-@code{\"foo\\bar\"} between the @samp{\\} and the @samp{b} to get\n+is equivalent into @samp{#define FOO 1020}.\n+\n+There is no way to prevent a backslash at the end of a line from being\n+interpreted as a backslash-newline.  For example,\n \n @example\n \"foo\\\\\n bar\"\n @end example\n \n-@noindent\n-This behavior can be confusing: in all other contexts, a backslash can\n-be inserted in a string constant as an ordinary character by writing a\n-double backslash.  This is an exception, but the ISO C standard requires\n-it.  (Strict ISO C does not allow string constants to extend to more\n-than one logical line, so they do not consider this a problem.)\n+is equivalent to @code{\"foo\\bar\"}, not to @code{\"foo\\\\bar\"}.  To avoid\n+having to worry about this, do not use the GNU extension which permits\n+multiline strings.  Instead, use string constant concatenation:\n+\n+@example\n+   \"foo\\\\\"\n+   \"bar\"\n+@end example\n+\n+Your program will be more portable this way, too.\n \n There are a few exceptions to all three transformations.\n \n @itemize @bullet\n @item\n-C comments and predefined macro names are not recognized inside a\n-@samp{#include} directive in which the file name is delimited with\n-@samp{<} and @samp{>}.  What lies in-between is read literally.\n+Comments and predefined macro names (or any macro names, for that\n+matter) are not recognized inside the argument of an @samp{#include}\n+directive, whether it is delimited with quotes or with @samp{<} and\n+@samp{>}.\n \n @item\n-C comments and predefined macro names are never recognized within a\n+Comments and predefined macro names are never recognized within a\n character or string constant.  (Strictly speaking, this is the rule,\n not an exception, but it is worth noting here anyway.)\n \n @item\n-Backslash-newline may not safely be used within an ISO ``trigraph'',\n-since trigraphs are converted before backslash-newlines are deleted.  If\n-you write what looks like a trigraph with a backslash-newline inside,\n+ISO ``trigraphs'' are converted before backslash-newlines are deleted.\n+If you write what looks like a trigraph with a backslash-newline inside,\n the backslash-newline is deleted as usual, but it is then too late to\n recognize the trigraph.\n \n@@ -234,7 +238,7 @@ are referring not to the two-character escape sequence \"\\0\", but to the\n single character ASCII NUL.\n \n There are three different contexts in which a null character may\n-appear:-\n+appear:\n \n @itemize @bullet\n @item\n@@ -367,13 +371,6 @@ for header files with the command option @samp{-I} (@pxref{Invocation}).\n The option @samp{-nostdinc} inhibits searching the standard system\n directories; in this case only the directories you specify are searched.\n \n-The parsing of this form of @samp{#include} is slightly special because\n-comments are not recognized within the @samp{<@dots{}>}.  Thus, in\n-@samp{#include <x/*y>} the @samp{/*} does not start a comment and the\n-directive specifies inclusion of a system header file named @file{x/*y}.\n-Of course, a header file with such a name is unlikely to exist on Unix,\n-where shell wildcard features would make it hard to manipulate.@refill\n-\n The first @samp{>} character terminates the file name.  The file name\n may contain a @samp{<} character.\n \n@@ -384,14 +381,21 @@ same directories used for system header files.  The current directory is\n the directory of the current input file.  It is tried first because it\n is presumed to be the location of the files that the current input file\n refers to.  (If the @samp{-I-} option is used, the special treatment of\n-the current directory is inhibited.)\n+the current directory is inhibited. @xref{Invocation}.)\n+\n+The first @samp{\"} character terminates the file name.\n \n-The first @samp{\"} character terminates the file name.  If backslashes\n-occur within @var{file}, they are considered ordinary text characters,\n-not escape characters.  None of the character escape sequences\n-appropriate to string constants in C are processed.  Thus,\n-@samp{#include \"x\\n\\\\y\"} specifies a filename containing three\n-backslashes.\n+In both these variants, the argument behaves like a string constant in\n+that comments are not recognized, and macro names are not expanded.\n+Thus, in @samp{#include <x/*y>} the @samp{/*} does not start a comment\n+and the directive specifies inclusion of a system header file named\n+@file{x/*y}.\n+\n+However, in either variant, if backslashes occur within @var{file}, they\n+are considered ordinary text characters, not escape characters.  None of\n+the character escape sequences appropriate to string constants in C are\n+processed.  Thus, @samp{#include \"x\\n\\\\y\"} specifies a filename\n+containing three backslashes.\n \n @item #include @var{anything else}\n @cindex computed @samp{#include}\n@@ -915,22 +919,44 @@ eprintf (\"%s:%d: \", input_file_name, line_number)\n fprintf (stderr, \"%s:%d: \" , input_file_name, line_number)\n @end example\n \n-We might instead have defined eprintf as follows:-\n+Within a @samp{#define} directive, ISO C mandates that the only place\n+the identifier @code{__VA_ARGS__} can appear is in the replacement list\n+of a variable-argument macro.  It may not be used as a macro name, macro\n+argument name, or within a different type of macro.  It may also be\n+forbidden in open text; the standard is ambiguous.  We recommend you\n+avoid using it except for its defined purpose.\n+\n+If your macro is complicated, you may want a more descriptive name for\n+the variable argument than @code{__VA_ARGS__}.  GNU CPP permits this, as\n+an extension.  You may write an argument name immediately before the\n+@samp{@dots{}}; that name is used for the variable argument.  The\n+@code{eprintf} macro above could be written\n+\n+@example\n+#define eprintf(args...) fprintf (stderr, args)\n+@end example\n+\n+@noindent\n+using this extension.  You cannot use @code{__VA_ARGS__} and this\n+extension in the same macro.\n+\n+We might instead have defined eprintf as follows:\n \n @example\n #define eprintf(format, ...) fprintf (stderr, format, __VA_ARGS__)\n @end example\n \n-This formulation looks more descriptive, but unfortunately causes\n-problems if fprintf wants no arguments the format.  There is no way to\n-produce expanded output of\n+This formulation looks more descriptive, but cannot be used as flexibly.\n+There is no way to produce expanded output of\n \n @example\n fprintf (stderr, \"success!\\n\")\n @end example\n \n @noindent\n-since passing an empty argument for the variable arguments part like this\n+because, in standard C, you are not allowed to leave the variable\n+argument out entirely, and passing an empty argument for the variable\n+arguments will not do what you want.  Writing\n \n @example\n eprintf (\"success!\\n\", )\n@@ -947,28 +973,29 @@ fprintf (stderr, \"success!\\n\",)\n where the extra comma originates from the replacement list and not from\n the arguments to eprintf.\n \n-Within a @samp{#define} directive, ISO C mandates that the only place\n-the identifier @code{__VA_ARGS__} can appear is in the replacement list\n-of a variable-argument macro.  Using it as a macro name, macro argument\n-or within a different type of macro is illegal.\n+There is another extension in the GNU C preprocessor which deals with\n+this difficulty.  First, you are allowed to leave the variable argument\n+out entirely:\n+\n+@example\n+eprintf (\"success!\\n\")\n+@end example\n \n-Before standardization, previous GNU preprocessors implemented a\n-slightly different syntax for defining variable-argument macros.  The\n-macros were called ``rest args macros''.  You could assign a name to the\n-variable arguments, by contrast the standardized method leaves them\n-anonymous.  For example, the eprintf macro could have been defined like\n-this\n+Second, the @samp{##} token paste operator has a special meaning when\n+placed between a comma and a variable argument.  If you write\n \n @example\n-#define eprintf(format...) fprintf (stderr, format)\n+#define eprintf(format, ...) fprintf (stderr, format, ##__VA_ARGS__)\n @end example\n \n-Now that there is a standardized construct, you are encouraged to use\n-that instead.  It is unlikely that support for named variable arguments\n-will be removed in future revisions of CPP, since being able to assign a\n-name is descriptive, and there is a wide base of legacy code.  However,\n-two obscure features of the GNU style are deprecated and likely to be\n-dropped in future.  @xref{Unreliable Features}.\n+and the variable argument is left out when the @samp{eprintf} macro is\n+used, then the comma before the @samp{##} will be deleted.  This does\n+@emph{not} happen if you pass an empty argument, nor does it happen if\n+the token preceding @samp{##} is anything other than a comma.\n+\n+Previous versions of the preprocessor implemented this extension much\n+more generally.  We have restricted it in order to minimize the\n+difference from the C standard.  @xref{Unreliable Features}.\n \n @node Predefined, Stringification, Macro Varargs, Macros\n @subsection Predefined Macros\n@@ -2790,42 +2817,52 @@ It is undefined which of these two operators is evaluated first.\n \n @end itemize\n \n-The following features are deprecated and will likely be removed at some\n-point in the future:-\n+The following features are in flux and should not be used in portable\n+code:\n \n @itemize @bullet\n \n-@item ## swallowing the previous token in GNU rest argument macros\n+@item Optional argument when invoking rest argument macros\n \n-In a macro expansion, if ## appeared before a GNU named variable arguments\n-parameter, and the set of tokens specified for that argument in the\n-macro invocation was empty, previous versions of the GNU C preprocessor\n-would back up and remove the token appearing before the ##.  This\n-behavior was not well-defined, and alternative ways of achieving its\n-intended use are available.  Since the ISO C standard now provides for\n-variable-argument macros, and since this old behavior potentially\n-conflicts with behavior mandated by the standard, this feature is now\n-deprecated and will be removed in future.\n+As an extension, GCC permits you to omit the variable arguments entirely\n+when you use a variable argument macro.  This works whether or not you\n+give the variable argument a name.  For example, the two macro\n+invocations in the example below expand to the same thing:\n \n-The current preprocessor still supports it for reasons of code\n-migration, and warns at each use of the feature.\n+@smallexample\n+#define debug(format, ...) printf (format, __VA_ARGS__)\n+debug(\"string\");       /* Not permitted by C standard.  */\n+debug(\"string\",);      /* OK.  */\n+@end smallexample\n \n-@item Optional argument when invoking GNU rest argument macros\n+This extension will be preserved, but the special behavior of @samp{##}\n+in this context has changed in the past and may change again in the\n+future.\n \n-In the invocation of a GNU named variable arguments macro, the variable\n-arguments were optional.  For example, the following two invocations are\n-both legal for GNU rest args.  The first is illegal in the equivalent\n-formulation using ISO C anonymous variable arguments and\n-@code{__VA_ARGS__}:-\n+@item ## swallowing preceding text in rest argument macros\n \n-@smallexample\n-#define debug(format, args...) printf (format, args)\n-debug(\"string\");       /* Illegal in ISO C equivalent.  */\n-debug(\"string\",);      /* OK for both.  */\n-@end smallexample\n+Formerly, in a macro expansion, if @samp{##} appeared before a variable\n+arguments parameter, and the set of tokens specified for that argument in\n+the macro invocation was empty, previous versions of the GNU C\n+preprocessor would back up and remove the preceding sequence of\n+nonwhitespace characters (@strong{not} the preceding token).  This\n+extension is in direct conflict with the 1999 C standard and has been\n+drastically pared back.\n+\n+In the current version of the preprocessor, if @samp{##} appears between\n+a comma and a variable arguments parameter, and the variable argument is\n+omitted entirely, the comma will be removed from the expansion.  If the\n+variable argument is empty, or the token before @samp{##} is not a\n+comma, then @samp{##} behaves as a normal token paste.  \n+\n+Portable code should avoid this extension at all costs.\n+\n+@end itemize\n+\n+The following features are deprecated and will likely be removed at some\n+point in the future:-\n \n-The current preprocessor still supports it for reasons of code\n-migration, and warns at each use of the feature.\n+@itemize @bullet\n \n @item Attempting to paste two tokens which together do not form a valid\n preprocessing token\n@@ -2834,6 +2871,10 @@ The preprocessor currently warns about this and outputs the two tokens\n adjacently, which is probably the behavior the programmer intends.  It\n may not work in future, though.\n \n+Most of the time, when you get this warning, you will find that @samp{##}\n+is being used superstitiously, to guard against whitespace appearing\n+between two tokens.  It is almost always safe to delete the @samp{##}.\n+\n @findex #pragma once\n @item #pragma once\n \n@@ -2849,7 +2890,33 @@ This pragma has been superceded by @samp{#pragma GCC poison}.\n @item Multi-line string literals in directives\n \n The GNU C preprocessor currently allows newlines in string literals\n-within a directive.\n+within a directive.  This is forbidden by the C standard and will\n+eventually be removed.  (Multi-line string literals in open text are\n+still supported.)\n+\n+@item Preprocessing things which are not C\n+\n+The C preprocessor is intended to be used only with C, C++, and\n+Objective C source code.  In the past, it has been abused as a general\n+text processor.  It will choke on input which is not lexically valid C;\n+for example, apostrophes will be interpreted as the beginning of\n+character constants, and cause errors.  Also, you cannot rely on it\n+preserving characteristics of the input which are not significant to\n+C-family languages.  For instance, if a Makefile is preprocessed, all\n+the hard tabs will be lost, and the Makefile will not work.\n+\n+Having said that, you can often get away with using cpp on things which\n+are not C.  Other Algol-ish programming languages are often safe\n+(Pascal, Ada, ...)  and so is assembly, with caution. @samp{-traditional}\n+mode is much more permissive, and can safely be used with e.g. Fortran.\n+Many of the problems go away if you write C or C++ style comments\n+instead of native language comments, and if you avoid elaborate macros.\n+\n+Wherever possible, you should use a preprocessor geared to the language\n+you are writing in.  Modern versions of the GNU assembler have macro\n+facilities.  Most high level programming languages have their own\n+conditional compilation and inclusion mechanism.  If all else fails,\n+try a true general text processor, such as @xref{Top, M4, , m4, GNU `m4'}.\n \n @end itemize\n \n@@ -2900,11 +2967,10 @@ compiler.\n @table @samp\n @item -P\n @findex -P\n-Inhibit generation of @samp{#}-lines with line-number information in\n-the output from the preprocessor (@pxref{Output}).  This might be\n-useful when running the preprocessor on something that is not C code\n-and will be sent to a program which might be confused by the\n-@samp{#}-lines.\n+Inhibit generation of @samp{#}-lines with line-number information in the\n+output from the preprocessor.  This might be useful when running the\n+preprocessor on something that is not C code and will be sent to a\n+program which might be confused by the @samp{#}-lines.  @xref{Output}.\n \n @item -C\n @findex -C\n@@ -2914,8 +2980,8 @@ along with the directive.  Comments appearing in the expansion list of a\n macro will be preserved, and appear in place wherever the macro is\n invoked.\n \n-You should be prepared for side effects when using -C; it causes the\n-preprocessor to treat comments as tokens in their own right.  For\n+You should be prepared for side effects when using @samp{-C}; it causes\n+the preprocessor to treat comments as tokens in their own right.  For\n example, macro redefinitions that were trivial when comments were\n replaced by a single space might become significant when comments are\n retained.  Also, comments appearing at the start of what would be a\n@@ -2925,7 +2991,6 @@ source line, since the first token on the line is no longer a @samp{#}.\n @item -traditional\n @findex -traditional\n Try to imitate the behavior of old-fashioned C, as opposed to ISO C@.\n-Note: support for this option is currently fairly broken.\n \n @itemize @bullet\n @item\n@@ -2966,8 +3031,9 @@ together with the text after the macro call, to produce a single token.\n (This is impossible in ISO C@.)\n \n @item\n-Traditionally, @samp{\\} inside a macro argument suppresses the syntactic\n-significance of the following character.\n+None of the GNU extensions to the preprocessor are available in\n+@samp{-traditional} mode.\n+\n @end itemize\n \n @cindex Fortran\n@@ -3010,21 +3076,44 @@ place of @code{cpp}.\n Process ISO standard trigraph sequences.  These are three-character\n sequences, all starting with @samp{??}, that are defined by ISO C to\n stand for single characters.  For example, @samp{??/} stands for\n-@samp{\\}, so @samp{'??/n'} is a character constant for a newline.\n-Strictly speaking, the GNU C preprocessor does not conform to ISO\n-Standard C unless @samp{-trigraphs} is used, but if you ever notice the\n-difference it will be with relief.\n+@samp{\\}, so @samp{'??/n'} is a character constant for a newline.  By\n+default, GCC ignores trigraphs, but in standard-conforming modes it\n+converts them.  See the @samp{-std} option.\n \n The nine trigraph sequences are\n-@samp{??(} -> @samp{[},\n-@samp{??)} -> @samp{]},\n-@samp{??<} -> @samp{@{},\n-@samp{??>} -> @samp{@}},\n-@samp{??=} -> @samp{#},\n-@samp{??/} -> @samp{\\},\n-@samp{??'} -> @samp{^},\n-@samp{??!} -> @samp{|},\n-@samp{??-} -> @samp{~}\n+@table @samp\n+@item ??(\n+-> @samp{[}\n+\n+@item ??)\n+-> @samp{]}\n+\n+@item ??<\n+-> @samp{@{}\n+\n+@item ??>\n+-> @samp{@}}\n+\n+@item ??=\n+-> @samp{#}\n+\n+@item ??/\n+-> @samp{\\}\n+\n+@item ??'\n+-> @samp{^}\n+\n+@item ??!\n+-> @samp{|}\n+\n+@item ??-\n+-> @samp{~}\n+\n+@end table\n+\n+Trigraph support is not popular, so many compilers do not implement it\n+properly.  Portable code should not rely on trigraphs being either\n+converted or ignored.\n \n @item -pedantic\n @findex -pedantic\n@@ -3038,19 +3127,15 @@ warnings.\n \n @item -Wcomment\n @findex -Wcomment\n-@ignore\n-@c \"Not worth documenting\" both singular and plural forms of this\n-@c option, per RMS.  Also unclear which is better; hence may need to\n-@c switch this at some future date.  pesch@cygnus.com, 2jan92.\n @itemx -Wcomments\n (Both forms have the same effect).\n-@end ignore\n Warn whenever a comment-start sequence @samp{/*} appears in a @samp{/*}\n comment, or whenever a backslash-newline appears in a @samp{//} comment.\n \n @item -Wtrigraphs\n @findex -Wtrigraphs\n-Warn if any trigraphs are encountered.\n+Warn if any trigraphs are encountered.  This option used to take effect\n+only if @samp{-trigraphs} was also specified, but now works independently.\n \n @item -Wwhite-space\n @findex -Wwhite-space\n@@ -3181,6 +3266,10 @@ predefined macros, and it outputs @emph{both} the @samp{#define}\n directives and the result of preprocessing.  Both kinds of output go to\n the standard output file.\n \n+@item -dN\n+@findex -dN\n+Like @samp{-dD}, but emit only the macro names, not their expansions.\n+\n @item -dI\n @findex -dI\n Output @samp{#include} directives in addition to the result of\n@@ -3327,20 +3416,9 @@ The 1990 C standard plus GNU extensions.  This is the default.\n The 1999 C standard plus GNU extensions.\n @end table\n \n-@item -Wp,-lint\n-@findex -lint\n-Look for commands to the program checker @code{lint} embedded in\n-comments, and emit them preceded by @samp{#pragma lint}.  For example,\n-the comment @samp{/* NOTREACHED */} becomes @samp{#pragma lint\n-NOTREACHED}.\n-\n-Because of the clash with @samp{-l}, you must use the awkward syntax\n-above.  In a future release, this option will be replaced by\n-@samp{-flint} or @samp{-Wlint}; we are not sure which yet.\n-\n @item -ftabstop=NUMBER\n @findex -ftabstop\n-Indicates the distance between tabstops.  This helps the preprocessor\n+Set the distance between tabstops.  This helps the preprocessor\n report correct column numbers in warnings or errors, even if tabs appear\n on the line.  Values less than 1 or greater than 100 are ignored.  The\n default is 8."}, {"sha": "18f494fbe024cdedc2b294e1aefb424eaffafae6", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -193,7 +193,7 @@ parse_number (pfile, tok)\n     {\n       /* Check for a floating point constant.  Note that float constants\n \t with an exponent or suffix but no decimal point are technically\n-\t illegal (C99 6.4.4.2) but accepted elsewhere.  */\n+\t invalid (C99 6.4.4.2) but accepted elsewhere.  */\n       if ((c == '.' || c == 'F' || c == 'f')\n \t  || (base == 10 && (c == 'E' || c == 'e')\n \t      && p+1 < end && (p[1] == '+' || p[1] == '-'))"}, {"sha": "2499a90e1dc21b6e58f0982a53b897bba5d4e946", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -785,7 +785,7 @@ cpp_start_read (pfile, print, fname)\n   if (CPP_OPTION (pfile, cplusplus))\n     CPP_OPTION (pfile, warn_traditional) = 0;\n \n-  /* Do not warn about illegal token pasting if -lang-asm.  */\n+  /* Do not warn about invalid token pasting if -lang-asm.  */\n   if (CPP_OPTION (pfile, lang_asm))\n     CPP_OPTION (pfile, warn_paste) = 0;\n "}, {"sha": "7485fde9851060b570c96c5d284f1fc844b5f08e", "filename": "gcc/cpplex.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -201,6 +201,10 @@ TOKEN_LEN (token)\n \n #define IS_ARG_CONTEXT(c) ((c)->flags & CONTEXT_ARG)\n #define CURRENT_CONTEXT(pfile) ((pfile)->contexts + (pfile)->cur_context)\n+#define ON_REST_ARG(c) \\\n+ (((c)->flags & VAR_ARGS) \\\n+  && (c)->u.list->tokens[(c)->posn].val.aux \\\n+      == (unsigned int) ((c)->u.list->paramc - 1))\n \n #define ASSIGN_FLAGS_AND_POS(d, s) \\\n   do {(d)->flags = (s)->flags & (PREV_WHITE | BOL | PASTE_LEFT); \\\n@@ -990,7 +994,7 @@ parse_name (pfile, tok, cur, rlimit)\n     {\n       if (! is_idchar (*cur))\n \tbreak;\n-      /* $ is not a legal identifier character in the standard, but is\n+      /* $ is not a identifier character in the standard, but is\n \t commonly accepted as an extension.  Don't warn about it in\n \t skipped conditional blocks. */\n       if (*cur == '$' && CPP_PEDANTIC (pfile) && ! pfile->skipping)\n@@ -2732,10 +2736,11 @@ maybe_paste_with_next (pfile, token)\n \tpasted = duplicate_token (pfile, second);\n       else if (second->type == CPP_PLACEMARKER)\n \t{\n-\t  /* GCC has special extended semantics for a ## b where b is\n-\t     a varargs parameter: a disappears if b was given no actual\n-\t     arguments (not merely if b is an empty argument).  */\n-\t  if (second->flags & VOID_REST)\n+\t  /* GCC has special extended semantics for , ## b where b is\n+\t     a varargs parameter: the comma disappears if b was given\n+\t     no actual arguments (not merely if b is an empty\n+\t     argument).  */\n+\t  if (token->type == CPP_COMMA && second->flags & VOID_REST)\n \t    pasted = duplicate_token (pfile, second);\n \t  else\n \t    pasted = duplicate_token (pfile, token);\n@@ -2748,8 +2753,19 @@ maybe_paste_with_next (pfile, token)\n \t  if (type == CPP_EOF)\n \t    {\n \t      if (CPP_OPTION (pfile, warn_paste))\n-\t\tcpp_warning (pfile,\n+\t\t{\n+\t\t  /* Do not complain about , ## <whatever> if\n+\t\t     <whatever> came from a variable argument, because\n+\t\t     the author probably intended the ## to trigger\n+\t\t     the special extended semantics (see above).  */\n+\t\t  if (token->type == CPP_COMMA\n+\t\t      && IS_ARG_CONTEXT (CURRENT_CONTEXT (pfile))\n+\t\t      && ON_REST_ARG (CURRENT_CONTEXT (pfile) - 1))\n+\t\t    /* no warning */;\n+\t\t  else\n+\t\t    cpp_warning (pfile,\n \t\t\t\"pasting would not give a valid preprocessing token\");\n+\t\t}\n \t      _cpp_push_token (pfile, second);\n \t      return token;\n \t    }\n@@ -3287,7 +3303,7 @@ lex_next (pfile, clear)\n \n /* Pops a context off the context stack.  If we're at the bottom, lexes\n    the next logical line.  Returns EOF if we're at the end of the\n-   argument list to the # operator, or if it is illegal to \"overflow\"\n+   argument list to the # operator, or we should not \"overflow\"\n    into the rest of the file (e.g. 6.10.3.1.1).  */\n static int\n pop_context (pfile)"}, {"sha": "fe96d4ed37684c0587960395b1f54bb055ec9c16", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -433,7 +433,7 @@ read_line_number (pfile, num)\n \n /* Another subroutine of do_line.  Convert a number in STR, of length\n    LEN, to binary; store it in NUMP, and return 0 if the number was\n-   legal, 1 if not.  Temporary, hopefully.  */\n+   well-formed, 1 if not.  Temporary, hopefully.  */\n static int\n strtoul_for_line (str, len, nump)\n      const U_CHAR *str;"}, {"sha": "b78e5f0fbc2b4c3297f9b562a60092d9dc6ef37f", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -127,7 +127,7 @@ count_params (pfile, info)\n \t{\n \tdefault:\n \t  cpp_error_with_line (pfile, token->line, token->col,\n-\t\t\t       \"illegal token in macro parameter list\");\n+\t\t\t       \"token may not appear in macro parameter list\");\n \t  return;\n \n \tcase CPP_EOF:\n@@ -462,7 +462,7 @@ save_expansion (pfile, info)\n \t  else\n \t    dest->flags = token->flags;  /* Particularly PREV_WHITE.  */\n \t  /* Turn off PREV_WHITE if we immediately follow a paste.\n-\t     That way, even if the paste turns out to be illegal, there\n+\t     That way, even if the paste turns out to be invalid, there\n \t     will be no space between the two tokens in the output.  */\n \t  if (token[-1].type == CPP_PASTE)\n \t    dest->flags &= ~PREV_WHITE;"}, {"sha": "6fc7c33639e2c02581d9807ada837ef2c4c4d225", "filename": "gcc/cppmain.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -145,19 +145,23 @@ cb_define (pfile, hash)\n      cpp_reader *pfile;\n      cpp_hashnode *hash;\n {\n-  cpp_printf (pfile, &parse_out, \"#define %s\", hash->name);\n-  if (CPP_OPTION (pfile, debug_output)\n-      || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n-    cpp_dump_definition (pfile, parse_out.outf, hash);\n-  putc ('\\n', parse_out.outf);\n+  if (pfile->done_initializing)\n+    {\n+      cpp_printf (pfile, &parse_out, \"#define %s\", hash->name);\n+      if (CPP_OPTION (pfile, debug_output)\n+\t  || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n+\tcpp_dump_definition (pfile, parse_out.outf, hash);\n+      putc ('\\n', parse_out.outf);\n+    }\n }\n \n static void\n cb_undef (pfile, hash)\n      cpp_reader *pfile;\n      cpp_hashnode *hash;\n {\n-  cpp_printf (pfile, &parse_out, \"#undef %s\\n\", hash->name);\n+  if (pfile->done_initializing)\n+    cpp_printf (pfile, &parse_out, \"#undef %s\\n\", hash->name);\n }\n \n static void"}, {"sha": "543c4c8c7003ba7c75e98820c6df99baa8552723", "filename": "gcc/cppspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -125,7 +125,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \t\tneed_E = 0;\n \t      else if (argv[i][1] == 'S' || argv[i][1] == 'c')\n \t\t{\n-\t\t  fatal (\"\\\"%s\\\" is not a legal option to the preprocessor\",\n+\t\t  fatal (\"\\\"%s\\\" is not a valid option to the preprocessor\",\n \t\t\t argv[i]);\n \t\t  return;\n \t\t}"}, {"sha": "4dd8b2ddcae3ff62b28e5fbe9d52f3aca97ab0d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -1,3 +1,7 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.dg/cpp/macsyntx.c: Fix error regexp.\n+\n Mon Jul 31 21:14:49 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc-c-torture/execute/20000731-2.c: New test."}, {"sha": "d5506d4f3c9e909e8f4bd55ed2666efa969b70d1", "filename": "gcc/testsuite/gcc.dg/cpp/macsyntx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef865d5709f9c917e1152ee5246906983e23725/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c?ref=5ef865d5709f9c917e1152ee5246906983e23725", "patch": "@@ -28,7 +28,7 @@\n #define foo(, X)\t\t/* { dg-error \"parameter name\" } */\n #define foo(X, X)\t\t/* { dg-error \"duplicate\" } */\n #define foo(X Y)\t\t/* { dg-error \"comma\" } */\n-#define foo(()\t\t\t/* { dg-error \"illegal token\" } */\n+#define foo(()\t\t\t/* { dg-error \"token may not appear\" } */\n #define foo(..., X)\t\t/* { dg-error \"missing\" } */\n #define foo \\\n __VA_ARGS__\t\t\t/* { dg-warning \"__VA_ARGS__\" } */"}]}