{"sha": "72b1108c3e698b2699331ce18c46ac03b050191f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJiMTEwOGMzZTY5OGIyNjk5MzMxY2UxOGM0NmFjMDNiMDUwMTkxZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-05-13T15:51:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-05-13T15:51:24Z"}, "message": "nvptx.c (nvptx_mangle_decl_assembler_name): New.\n\n\t* config/nvptx/nvptx.c (nvptx_mangle_decl_assembler_name): New.\n\t(nvptx_name_replacement): Delete.\n\t(write_fn_proto, write_fn_proto_from_insn,\n\tnvptx_output_call_insn): Remove nvptx_name_replacement call.\n\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Override.\n\t* langhooks.c (add_builtin_funcction_common): Call\n\ttargetm.mangle_decl_assembler_name.\n\nFrom-SVN: r236212", "tree": {"sha": "b5b93d36d6a6a4687b278abc1209d41c3b385839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b93d36d6a6a4687b278abc1209d41c3b385839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72b1108c3e698b2699331ce18c46ac03b050191f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b1108c3e698b2699331ce18c46ac03b050191f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b1108c3e698b2699331ce18c46ac03b050191f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b1108c3e698b2699331ce18c46ac03b050191f/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "541a9b104b6e842a81326f9d671b19b8ae69cd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541a9b104b6e842a81326f9d671b19b8ae69cd05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541a9b104b6e842a81326f9d671b19b8ae69cd05"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "b4110a78336e323e317b5886a35a085d5d84ed6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b1108c3e698b2699331ce18c46ac03b050191f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b1108c3e698b2699331ce18c46ac03b050191f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72b1108c3e698b2699331ce18c46ac03b050191f", "patch": "@@ -1,5 +1,13 @@\n 2016-05-13  Nathan Sidwell  <nathan@acm.org>\n \n+\t* config/nvptx/nvptx.c (nvptx_mangle_decl_assembler_name): New.\n+\t(nvptx_name_replacement): Delete.\n+\t(write_fn_proto, write_fn_proto_from_insn,\n+\tnvptx_output_call_insn): Remove nvptx_name_replacement call.\n+\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Override.\n+\t* langhooks.c (add_builtin_funcction_common): Call\n+\ttargetm.mangle_decl_assembler_name.\n+\n \t* config/nvptx/nvptx.c (write_fn_proto): Handle\n \tBUILT_IN_ATOMIC_COMPARE_EXCHANGE_n oddity.\n "}, {"sha": "85f85bb6404dfe0bc0fe4f8565d1f5249e9ccb53", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b1108c3e698b2699331ce18c46ac03b050191f/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b1108c3e698b2699331ce18c46ac03b050191f/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=72b1108c3e698b2699331ce18c46ac03b050191f", "patch": "@@ -211,6 +211,31 @@ nvptx_ptx_type_from_mode (machine_mode mode, bool promote)\n     }\n }\n \n+/* Return an identifier node for DECL.  Usually thee default mangled\n+   name ID is useable.  Some names cannot be used directly, so prefix\n+   them with __nvptx_.  */\n+\n+static tree\n+nvptx_mangle_decl_assembler_name (tree ARG_UNUSED (decl), tree id)\n+{\n+  static const char *const bad_names[] =\n+    {\"call\", \"malloc\", \"free\", \"realloc\", 0};\n+  int ix;\n+  const char *name = IDENTIFIER_POINTER (id);\n+\n+  for (ix = 0; bad_names[ix]; ix++)\n+    if (!strcmp (bad_names[ix], name))\n+      {\n+\tchar *new_name = XALLOCAVEC (char,\n+\t\t\t\t     strlen (name) + sizeof (\"__nvptx_\"));\n+\tsprintf (new_name, \"__nvptx_%s\", name);\n+\tid = get_identifier (new_name);\n+\tbreak;\n+      }\n+\n+  return id;\n+}\n+\n /* Encode the PTX data area that DECL (which might not actually be a\n    _DECL) should reside in.  */\n \n@@ -256,24 +281,6 @@ section_for_decl (const_tree decl)\n   return section_for_sym (XEXP (DECL_RTL (CONST_CAST (tree, decl)), 0));\n }\n \n-/* Check NAME for special function names and redirect them by returning a\n-   replacement.  This applies to malloc, free and realloc, for which we\n-   want to use libgcc wrappers, and call, which triggers a bug in ptxas.  */\n-\n-static const char *\n-nvptx_name_replacement (const char *name)\n-{\n-  if (strcmp (name, \"call\") == 0)\n-    return \"__nvptx_call\";\n-  if (strcmp (name, \"malloc\") == 0)\n-    return \"__nvptx_malloc\";\n-  if (strcmp (name, \"free\") == 0)\n-    return \"__nvptx_free\";\n-  if (strcmp (name, \"realloc\") == 0)\n-    return \"__nvptx_realloc\";\n-  return name;\n-}\n-\n /* If MODE should be treated as two registers of an inner mode, return\n    that inner mode.  Otherwise return VOIDmode.  */\n \n@@ -731,13 +738,8 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n   if (is_defn)\n     /* Emit a declaration. The PTX assembler gets upset without it.   */\n     name = write_fn_proto (s, false, name, decl);\n-  else\n-    {\n-      /* Avoid repeating the name replacement.  */\n-      name = nvptx_name_replacement (name);\n-      if (name[0] == '*')\n-\tname++;\n-    }\n+  else if (name[0] == '*')\n+    name++;\n \n   write_fn_marker (s, is_defn, TREE_PUBLIC (decl), name);\n \n@@ -841,7 +843,6 @@ write_fn_proto_from_insn (std::stringstream &s, const char *name,\n     }\n   else\n     {\n-      name = nvptx_name_replacement (name);\n       write_fn_marker (s, false, true, name);\n       s << \"\\t.extern .func \";\n     }\n@@ -1859,7 +1860,6 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n   if (decl)\n     {\n       const char *name = get_fnname_from_decl (decl);\n-      name = nvptx_name_replacement (name);\n       assemble_name (asm_out_file, name);\n     }\n   else\n@@ -4887,6 +4887,9 @@ nvptx_goacc_reduction (gcall *call)\n #undef TARGET_NO_REGISTER_ALLOCATION\n #define TARGET_NO_REGISTER_ALLOCATION true\n \n+#undef TARGET_MANGLE_DECL_ASSEMBLER_NAME\n+#define TARGET_MANGLE_DECL_ASSEMBLER_NAME nvptx_mangle_decl_assembler_name\n+\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO nvptx_encode_section_info\n #undef TARGET_RECORD_OFFLOAD_SYMBOL"}, {"sha": "3256a9d10cc18d44f153b23c63b46635772e878e", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b1108c3e698b2699331ce18c46ac03b050191f/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b1108c3e698b2699331ce18c46ac03b050191f/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=72b1108c3e698b2699331ce18c46ac03b050191f", "patch": "@@ -561,6 +561,8 @@ add_builtin_function_common (const char *name,\n   if (library_name)\n     {\n       tree libname = get_identifier (library_name);\n+\n+      libname = targetm.mangle_decl_assembler_name (decl, libname);\n       SET_DECL_ASSEMBLER_NAME (decl, libname);\n     }\n "}]}