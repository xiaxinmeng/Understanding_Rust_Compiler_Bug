{"sha": "03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjZDhhYmEzMjM0OWRiYmY1ZjJjY2I5YmRkYWRkMmJjY2FlZmQxYg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-01-15T17:40:26Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-01-15T17:40:26Z"}, "message": "real.c (real_sqrt): Return a bool result indicating whether a floating point exception or trap...\n\n\n\t* real.c (real_sqrt): Return a bool result indicating whether\n\ta floating point exception or trap should be raised.\n\t* real.h (real_sqrt): Update function prototype.\n\t* builtins.c (fold_builtin): Only fold non-trapping square\n\troots unless we're ignoring errno and trapping math.\n\nFrom-SVN: r61337", "tree": {"sha": "81f71c4ac11c1ee3a6504b15060bf6ffe8cf4a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81f71c4ac11c1ee3a6504b15060bf6ffe8cf4a6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/comments", "author": null, "committer": null, "parents": [{"sha": "4da782145bc9e183bc091995ab3cd77e2dffd551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da782145bc9e183bc091995ab3cd77e2dffd551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da782145bc9e183bc091995ab3cd77e2dffd551"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "503ad571ad7a61cf12518215d594d90224b12482", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "patch": "@@ -1,3 +1,11 @@\n+2003-01-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* real.c (real_sqrt): Return a bool result indicating whether\n+\ta floating point exception or trap should be raised.\n+\t* real.h (real_sqrt): Update function prototype.\n+\t* builtins.c (fold_builtin): Only fold non-trapping square\n+\troots unless we're ignoring errno and trapping math.\n+\n 2003-01-15  John David Anglin  <dave.anglin@nrc.gc.ca>\n \n \t* expr.h (emit_conditional_add): Add PARAMS to declaration."}, {"sha": "ffa09f9453e14f66e2c58413c4af787d270dace9", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "patch": "@@ -1,6 +1,6 @@\n /* Expand builtin functions.\n-   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -4308,11 +4308,9 @@ fold_builtin (exp)\n \n \t      x = TREE_REAL_CST (arg);\n \t      mode = TYPE_MODE (TREE_TYPE (arg));\n-\t      if (!HONOR_SNANS (mode) || !real_isnan (&x))\n-\t      {\n-\t\treal_sqrt (&r, mode, &x);\n+\t      if (real_sqrt (&r, mode, &x)\n+\t\t  || (!flag_trapping_math && !flag_errno_math))\n \t\treturn build_real (TREE_TYPE (arg), r);\n-\t      }\n \t    }\n \n \t  /* Optimize sqrt(exp(x)) = exp(x/2.0).  */"}, {"sha": "f1e10b33ac5e9878e3080d6deec8b2669ff25231", "filename": "gcc/real.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "patch": "@@ -1,6 +1,6 @@\n /* real.c - software floating point emulation.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Stephen L. Moshier (moshier@world.std.com).\n    Re-written by Richard Henderson  <rth@redhat.com>\n \n@@ -4401,11 +4401,12 @@ const struct real_format *real_format_for_mode[TFmode - QFmode + 1] =\n \n \f\n /* Calculate the square root of X in mode MODE, and store the result\n-   in R.  For details see \"High Precision Division and Square Root\",\n+   in R.  Return TRUE if the operation does not raise an exception.\n+   For details see \"High Precision Division and Square Root\",\n    Alan H. Karp and Peter Markstein, HP Lab Report 93-93-42, June\n    1993.  http://www.hpl.hp.com/techreports/93/HPL-93-42.pdf.  */\n \n-void\n+bool\n real_sqrt (r, mode, x)\n      REAL_VALUE_TYPE *r;\n      enum machine_mode mode;\n@@ -4421,22 +4422,22 @@ real_sqrt (r, mode, x)\n   if (real_isnegzero (x))\n     {\n       *r = *x;\n-      return;\n+      return false;\n     }\n \n   /* Negative arguments return NaN.  */\n   if (real_isneg (x))\n     {\n       /* Mode is ignored for canonical NaN.  */\n       real_nan (r, \"\", 1, SFmode);\n-      return;\n+      return false;\n     }\n \n   /* Infinity and NaN return themselves.  */\n   if (real_isinf (x) || real_isnan (x))\n     {\n       *r = *x;\n-      return;\n+      return false;\n     }\n \n   if (!init)\n@@ -4479,5 +4480,6 @@ real_sqrt (r, mode, x)\n   /* ??? We need a Tuckerman test to get the last bit.  */\n \n   real_convert (r, mode, &h);\n+  return true;\n }\n "}, {"sha": "0055106555515c82cd61871226332db773029bc1", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of floating-point access for GNU compiler.\n-   Copyright (C) 1989, 1991, 1994, 1996, 1997, 1998,\n-   1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1991, 1994, 1996, 1997, 1998, 1999,\n+   2000, 2002, 2003 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -350,7 +350,7 @@ extern bool exact_real_inverse\tPARAMS ((enum machine_mode, REAL_VALUE_TYPE *));\n extern tree build_real\t\t\tPARAMS ((tree, REAL_VALUE_TYPE));\n \n /* Calculate R as the square root of X in the given machine mode.  */\n-extern void real_sqrt\t\t\tPARAMS ((REAL_VALUE_TYPE *,\n+extern bool real_sqrt\t\t\tPARAMS ((REAL_VALUE_TYPE *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t const REAL_VALUE_TYPE *));\n "}]}