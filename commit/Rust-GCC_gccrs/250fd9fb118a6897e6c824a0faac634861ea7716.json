{"sha": "250fd9fb118a6897e6c824a0faac634861ea7716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUwZmQ5ZmIxMThhNjg5N2U2YzgyNGEwZmFhYzYzNDg2MWVhNzcxNg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-01-15T10:02:25Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-02-02T08:53:57Z"}, "message": "arm: Auto-vectorization for MVE: vorn\n\nThis patch enables MVE vornq instructions for auto-vectorization.  MVE\nvornq insns in mve.md are modified to use ior instead of unspec\nexpression.\n\n2021-02-01  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/iterators.md (supf): Remove VORNQ_S and VORNQ_U.\n\t(VORNQ): Remove.\n\t* config/arm/mve.md (mve_vornq_s<mode>): New entry for vorn\n\tinstruction using expression ior.\n\t(mve_vornq_u<mode>): New expander.\n\t(mve_vornq_f<mode>): Use ior code instead of unspec.\n\t* config/arm/unspecs.md (VORNQ_S, VORNQ_U, VORNQ_F): Remove.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vorn.c: Add vorn tests.", "tree": {"sha": "fba4a1a876cdda7d4477f55e238e9b57053c7bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba4a1a876cdda7d4477f55e238e9b57053c7bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/250fd9fb118a6897e6c824a0faac634861ea7716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250fd9fb118a6897e6c824a0faac634861ea7716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/250fd9fb118a6897e6c824a0faac634861ea7716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250fd9fb118a6897e6c824a0faac634861ea7716/comments", "author": null, "committer": null, "parents": [{"sha": "788113556899304501fd119f9c7ba93a74835c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788113556899304501fd119f9c7ba93a74835c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788113556899304501fd119f9c7ba93a74835c33"}], "stats": {"total": 67, "additions": 54, "deletions": 13}, "files": [{"sha": "43aab2346c4d2079671c27b1d9117ad46ab529a3", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=250fd9fb118a6897e6c824a0faac634861ea7716", "patch": "@@ -1293,7 +1293,7 @@\n \t\t       (VMULLBQ_INT_S \"s\") (VMULLBQ_INT_U \"u\") (VQADDQ_S \"s\")\n \t\t       (VMULLTQ_INT_S \"s\") (VMULLTQ_INT_U \"u\") (VQADDQ_U \"u\")\n \t\t       (VMULQ_N_S \"s\") (VMULQ_N_U \"u\") (VMULQ_S \"s\")\n-\t\t       (VMULQ_U \"u\") (VORNQ_S \"s\") (VORNQ_U \"u\")\n+\t\t       (VMULQ_U \"u\")\n \t\t       (VQADDQ_N_S \"s\") (VQADDQ_N_U \"u\")\n \t\t       (VQRSHLQ_N_S \"s\") (VQRSHLQ_N_U \"u\") (VQRSHLQ_S \"s\")\n \t\t       (VQRSHLQ_U \"u\") (VQSHLQ_N_S \"s\")\t(VQSHLQ_N_U \"u\")\n@@ -1563,7 +1563,6 @@\n (define_int_iterator VMULLTQ_INT [VMULLTQ_INT_U VMULLTQ_INT_S])\n (define_int_iterator VMULQ [VMULQ_U VMULQ_S])\n (define_int_iterator VMULQ_N [VMULQ_N_U VMULQ_N_S])\n-(define_int_iterator VORNQ [VORNQ_U VORNQ_S])\n (define_int_iterator VQADDQ [VQADDQ_U VQADDQ_S])\n (define_int_iterator VQADDQ_N [VQADDQ_N_S VQADDQ_N_U])\n (define_int_iterator VQRSHLQ [VQRSHLQ_S VQRSHLQ_U])"}, {"sha": "ec0ef7b8f710026efe15c21ca69a105d186ed588", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=250fd9fb118a6897e6c824a0faac634861ea7716", "patch": "@@ -1634,18 +1634,26 @@\n ;;\n ;; [vornq_u, vornq_s])\n ;;\n-(define_insn \"mve_vornq_<supf><mode>\"\n+(define_insn \"mve_vornq_s<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VORNQ))\n+\t(ior:MVE_2 (not:MVE_2 (match_operand:MVE_2 2 \"s_register_operand\" \"w\"))\n+\t\t   (match_operand:MVE_2 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vorn %q0, %q1, %q2\"\n+   \"vorn\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n+(define_expand \"mve_vornq_u<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\")\n+\t(ior:MVE_2 (not:MVE_2 (match_operand:MVE_2 2 \"s_register_operand\"))\n+\t\t   (match_operand:MVE_2 1 \"s_register_operand\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+)\n+\n ;;\n ;; [vorrq_s, vorrq_u])\n ;;\n@@ -2630,9 +2638,8 @@\n (define_insn \"mve_vornq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VORNQ_F))\n+\t(ior:MVE_0 (not:MVE_0 (match_operand:MVE_0 2 \"s_register_operand\" \"w\"))\n+\t\t   (match_operand:MVE_0 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vorn %q0, %q1, %q2\""}, {"sha": "4d47ab734e347ec1c9a38182f6e987e60a2180a5", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=250fd9fb118a6897e6c824a0faac634861ea7716", "patch": "@@ -622,7 +622,6 @@\n   VMULLTQ_INT_S\n   VMULQ_S\n   VMULQ_N_S\n-  VORNQ_S\n   VQADDQ_S\n   VQADDQ_N_S\n   VQRSHLQ_S\n@@ -663,7 +662,6 @@\n   VMULLTQ_INT_U\n   VMULQ_U\n   VMULQ_N_U\n-  VORNQ_U\n   VQADDQ_U\n   VQADDQ_N_U\n   VQRSHLQ_U\n@@ -734,7 +732,6 @@\n   VMINNMVQ_F\n   VMULQ_F\n   VMULQ_N_F\n-  VORNQ_F\n   VSUBQ_F\n   VADDLVAQ_U\n   VADDLVAQ_S"}, {"sha": "219b83516f621fb8e7b25693b7f36b11e6ff35da", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vorn.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vorn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250fd9fb118a6897e6c824a0faac634861ea7716/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vorn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vorn.c?ref=250fd9fb118a6897e6c824a0faac634861ea7716", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a, TYPE##BITS##_t *b) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP b[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 64-bit vectors.  */\n+FUNC(s, int, 32, 2, | ~ , vorn)\n+FUNC(u, uint, 32, 2, | ~ , vorn)\n+FUNC(s, int, 16, 4, | ~ , vorn)\n+FUNC(u, uint, 16, 4, | ~ , vorn)\n+FUNC(s, int, 8, 8, | ~ , vorn)\n+FUNC(u, uint, 8, 8, | ~ , vorn)\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, | ~ , vorn)\n+FUNC(u, uint, 32, 4, | ~ , vorn)\n+FUNC(s, int, 16, 8, | ~ , vorn)\n+FUNC(u, uint, 16, 8, | ~ , vorn)\n+FUNC(s, int, 8, 16, | ~ , vorn)\n+FUNC(u, uint, 8, 16, | ~ , vorn)\n+\n+/* MVE has only 128-bit vectors, so we can vectorize only half of the\n+   functions above.  */\n+/* Although float16 and float32 types are supported at assembly level,\n+   we cannot test them with the '| ~ ' operator, so we check only the\n+   integer variants.  */\n+/* No need to test immediates as second operand, they are covered by vorr.  */\n+/* { dg-final { scan-assembler-times {vorn\\tq[0-9]+, q[0-9]+, q[0-9]+} 6 } } */"}]}