{"sha": "c2a644391b7e8d4603d95e97daabd1b368052421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhNjQ0MzkxYjdlOGQ0NjAzZDk1ZTk3ZGFhYmQxYjM2ODA1MjQyMQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2006-03-29T15:21:13Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2006-03-29T15:21:13Z"}, "message": "re PR middle-end/23623 (volatile keyword changes bitfield access size from 32bit to 8bit)\n\n2006-03-29  Paul Brook  <paul@codesourcery.com>\n\n\tPR middle-end/23623\n\t* targhooks.c (default_narrow_bitfield): New fuction.\n\t* targhooks.h (default_narrow_bitfield): add prototype.\n\t* target.h (gcc_target): Add narrow_volatile_bitfield.\n\t* target-def.h (TARGET_NARROW_VOLATILE_BITFIELD): Define.\n\t* stor-layout.c (get_best_mode): Use targetm.narrow_volatile_bitfield.\n\t* doc/tm.texi: Document TARGET_NARROW_VOLATILE_BITFIELDS.\n\t* config/arm/arm.c (TARGET_NARROW_VOLATILE_BITFIELD): Define.\n\nFrom-SVN: r112493", "tree": {"sha": "13c3108b931a9f5530ee972b04fc4361a6cff803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13c3108b931a9f5530ee972b04fc4361a6cff803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a644391b7e8d4603d95e97daabd1b368052421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a644391b7e8d4603d95e97daabd1b368052421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a644391b7e8d4603d95e97daabd1b368052421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a644391b7e8d4603d95e97daabd1b368052421/comments", "author": null, "committer": null, "parents": [{"sha": "4dc19cc052742f88e118458c6036468d0a9bf7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc19cc052742f88e118458c6036468d0a9bf7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc19cc052742f88e118458c6036468d0a9bf7a6"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "7ab85ea1eacaa3a116616dd9aeaa9e8d67b65cfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -1,3 +1,14 @@\n+2006-03-29  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR middle-end/23623\n+\t* targhooks.c (default_narrow_bitfield): New fuction.\n+\t* targhooks.h (default_narrow_bitfield): add prototype.\n+\t* target.h (gcc_target): Add narrow_volatile_bitfield.\n+\t* target-def.h (TARGET_NARROW_VOLATILE_BITFIELD): Define.\n+\t* stor-layout.c (get_best_mode): Use targetm.narrow_volatile_bitfield.\n+\t* doc/tm.texi: Document TARGET_NARROW_VOLATILE_BITFIELDS.\n+\t* config/arm/arm.c (TARGET_NARROW_VOLATILE_BITFIELD): Define.\n+\n 2006-03-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config.gcc (s390-*-linux-*, s390x-*-linux*): Add t-dfprules to "}, {"sha": "e6b97dfbcf1fe4690a28f514026a2d10111482bb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -312,6 +312,9 @@ static bool arm_tls_symbol_p (rtx x);\n #undef TARGET_ALIGN_ANON_BITFIELD\n #define TARGET_ALIGN_ANON_BITFIELD arm_align_anon_bitfield\n \n+#undef TARGET_NARROW_VOLATILE_BITFIELD\n+#define TARGET_NARROW_VOLATILE_BITFIELD hook_bool_void_false\n+\n #undef TARGET_CXX_GUARD_TYPE\n #define TARGET_CXX_GUARD_TYPE arm_cxx_guard_type\n "}, {"sha": "b1dae1151a506c2807fc0437f7aeb7b0dc834602", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -1221,6 +1221,14 @@ structure.  The hook should return true if the structure should inherit\n the alignment requirements of an unnamed bitfield's type.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_NARROW_VOLATILE_BITFIELDS (void)\n+This target hook should return @code{true} if accesses to volatile bitfields\n+should use the narrowest mode possible.  It should return @code{false} if\n+these accesses should use the bitfield container type.\n+\n+The default is @code{!TARGET_STRICT_ALIGN}.\n+@end deftypefn\n+\n @defmac MEMBER_TYPE_FORCES_BLK (@var{field}, @var{mode})\n Return 1 if a structure or array containing @var{field} should be accessed using\n @code{BLKMODE}."}, {"sha": "5617d27290e650c0369a9094943b7540bc4dce2c", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -2148,13 +2148,17 @@ fixup_unsigned_type (tree type)\n    If LARGEST_MODE is not VOIDmode, it means that we should not use a mode\n    larger than LARGEST_MODE (usually SImode).\n \n-   If no mode meets all these conditions, we return VOIDmode.  Otherwise, if\n-   VOLATILEP is true or SLOW_BYTE_ACCESS is false, we return the smallest\n-   mode meeting these conditions.\n-\n-   Otherwise (VOLATILEP is false and SLOW_BYTE_ACCESS is true), we return\n-   the largest mode (but a mode no wider than UNITS_PER_WORD) that meets\n-   all the conditions.  */\n+   If no mode meets all these conditions, we return VOIDmode.\n+   \n+   If VOLATILEP is false and SLOW_BYTE_ACCESS is false, we return the\n+   smallest mode meeting these conditions.\n+\n+   If VOLATILEP is false and SLOW_BYTE_ACCESS is true, we return the\n+   largest mode (but a mode no wider than UNITS_PER_WORD) that meets\n+   all the conditions.\n+   \n+   If VOLATILEP is true the narrow_volatile_bitfields target hook is used to\n+   decide which of the above modes should be used.  */\n \n enum machine_mode\n get_best_mode (int bitsize, int bitpos, unsigned int align,\n@@ -2184,7 +2188,8 @@ get_best_mode (int bitsize, int bitpos, unsigned int align,\n       || (largest_mode != VOIDmode && unit > GET_MODE_BITSIZE (largest_mode)))\n     return VOIDmode;\n \n-  if (SLOW_BYTE_ACCESS && ! volatilep)\n+  if ((SLOW_BYTE_ACCESS && ! volatilep)\n+      || (volatilep && !targetm.narrow_volatile_bitfield()))\n     {\n       enum machine_mode wide_mode = VOIDmode, tmode;\n "}, {"sha": "750015128e73cf5b1a5d89524b1c1e24b4207673", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -412,6 +412,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_tree_false\n #define TARGET_MS_BITFIELD_LAYOUT_P hook_bool_tree_false\n #define TARGET_ALIGN_ANON_BITFIELD hook_bool_void_false\n+#define TARGET_NARROW_VOLATILE_BITFIELD hook_bool_void_false\n #define TARGET_RTX_COSTS hook_bool_rtx_int_int_intp_false\n #define TARGET_MANGLE_FUNDAMENTAL_TYPE hook_constcharptr_tree_null\n #define TARGET_ALLOCATE_INITIAL_VALUE NULL\n@@ -609,6 +610,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_MS_BITFIELD_LAYOUT_P,\t\t\t\\\n   TARGET_DECIMAL_FLOAT_SUPPORTED_P,\t\t\\\n   TARGET_ALIGN_ANON_BITFIELD,\t\t\t\\\n+  TARGET_NARROW_VOLATILE_BITFIELD,\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n   TARGET_EXPAND_LIBRARY_BUILTIN,\t\t\\"}, {"sha": "e9a5eca925516b9b1c4e4c444e67d751c1ae37e4", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -418,6 +418,10 @@ struct gcc_target\n   /* Return true if anonymous bitfields affect structure alignment.  */\n   bool (* align_anon_bitfield) (void);\n \n+  /* Return true if volatile bitfields should use the narrowest type possible.\n+     Return false if they should use the container type.  */\n+  bool (* narrow_volatile_bitfield) (void);\n+\n   /* Set up target-specific built-in functions.  */\n   void (* init_builtins) (void);\n "}, {"sha": "f33704b0101da682b4d3106e712c09b1d963b24f", "filename": "gcc/targhooks.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -572,4 +572,18 @@ default_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n   return class;\n }\n \n+\n+/* If STRICT_ALIGNMENT is true we use the container type for accessing\n+   volatile bitfields.  This is generally the preferred behavior for memory\n+   mapped peripherals on RISC architectures.\n+   If STRICT_ALIGNMENT is false we use the narrowest type possible.  This\n+   is typically used to avoid spurious page faults and extra memory accesses\n+   due to unaligned accesses on CISC architectures.  */\n+\n+bool\n+default_narrow_bitfield (void)\n+{\n+  return !STRICT_ALIGNMENT;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "7c99b081a50397129a95e4da45a5434565266b0e", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a644391b7e8d4603d95e97daabd1b368052421/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c2a644391b7e8d4603d95e97daabd1b368052421", "patch": "@@ -54,6 +54,8 @@ extern bool default_decimal_float_supported_p (void);\n \n extern const char * default_invalid_within_doloop (rtx);\n \n+extern bool default_narrow_bitfield (void);\n+\n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */\n "}]}