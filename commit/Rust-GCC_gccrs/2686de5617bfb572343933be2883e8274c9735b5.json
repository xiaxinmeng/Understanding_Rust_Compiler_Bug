{"sha": "2686de5617bfb572343933be2883e8274c9735b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4NmRlNTYxN2JmYjU3MjM0MzkzM2JlMjg4M2U4Mjc0Yzk3MzViNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-09T14:19:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-10T08:31:46Z"}, "message": "tree-optimization/97760 - reduction paths with unhandled live stmt\n\nThis makes sure we reject reduction paths with a live stmt that\nis not the last one altering the value.  This is because we do not\nhandle this in the epilogue unless there's a scalar epilogue loop.\n\n2020-11-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97760\n\t* tree-vect-loop.c (check_reduction_path): Reject\n\treduction paths we do not handle in epilogue generation.\n\n\t* gcc.dg/vect/pr97760.c: New testcase.", "tree": {"sha": "68d5ec7cb26efbdcfa29457e2d1185de0878c177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68d5ec7cb26efbdcfa29457e2d1185de0878c177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2686de5617bfb572343933be2883e8274c9735b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2686de5617bfb572343933be2883e8274c9735b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2686de5617bfb572343933be2883e8274c9735b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2686de5617bfb572343933be2883e8274c9735b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d3470e239e8040f642a8852721b4962b4ed36f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3470e239e8040f642a8852721b4962b4ed36f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d3470e239e8040f642a8852721b4962b4ed36f2"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "da5ac937a435f64f6e9f2b5bc8847c80f29825aa", "filename": "gcc/testsuite/gcc.dg/vect/pr97760.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2686de5617bfb572343933be2883e8274c9735b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97760.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2686de5617bfb572343933be2883e8274c9735b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97760.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97760.c?ref=2686de5617bfb572343933be2883e8274c9735b5", "patch": "@@ -0,0 +1,26 @@\n+#include \"tree-vect.h\"\n+\n+int b=1;\n+static int *g = &b;\n+\n+void __attribute__((noipa))\n+h (unsigned int n)\n+{\n+  int i = 3;\n+  int f = 3;\n+  for (; f <= 50; f += 4) {\n+    i += 4;\n+    *g = i;\n+    i += n;\n+  }\n+}\n+\n+int main ()\n+{\n+  check_vect ();\n+\n+  h (9);\n+  if (*g != 150 || b != 150)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "39b7319e8253c351a4f6fbdd8c154330f08f2b1b", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2686de5617bfb572343933be2883e8274c9735b5/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2686de5617bfb572343933be2883e8274c9735b5/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=2686de5617bfb572343933be2883e8274c9735b5", "patch": "@@ -3326,14 +3326,17 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \t  fail = true;\n \t  break;\n \t}\n-      /* Check there's only a single stmt the op is used on inside\n-         of the loop.  */\n+      /* Check there's only a single stmt the op is used on.  For the\n+\t not value-changing tail and the last stmt allow out-of-loop uses.\n+\t ???  We could relax this and handle arbitrary live stmts by\n+\t forcing a scalar epilogue for example.  */\n       imm_use_iterator imm_iter;\n       gimple *op_use_stmt;\n       unsigned cnt = 0;\n       FOR_EACH_IMM_USE_STMT (op_use_stmt, imm_iter, op)\n \tif (!is_gimple_debug (op_use_stmt)\n-\t    && flow_bb_inside_loop_p (loop, gimple_bb (op_use_stmt)))\n+\t    && (*code != ERROR_MARK\n+\t\t|| flow_bb_inside_loop_p (loop, gimple_bb (op_use_stmt))))\n \t  {\n \t    /* We want to allow x + x but not x < 1 ? x : 2.  */\n \t    if (is_gimple_assign (op_use_stmt)"}]}