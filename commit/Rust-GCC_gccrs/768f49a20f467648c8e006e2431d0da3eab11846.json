{"sha": "768f49a20f467648c8e006e2431d0da3eab11846", "node_id": "C_kwDOANBUbNoAKDc2OGY0OWEyMGY0Njc2NDhjOGUwMDZlMjQzMWQwZGEzZWFiMTE4NDY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-25T00:17:06Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-25T00:17:06Z"}, "message": "Daily bump.", "tree": {"sha": "49e62fb9474eb3345af7252a12e2e0f36e13ea01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49e62fb9474eb3345af7252a12e2e0f36e13ea01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/768f49a20f467648c8e006e2431d0da3eab11846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768f49a20f467648c8e006e2431d0da3eab11846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768f49a20f467648c8e006e2431d0da3eab11846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768f49a20f467648c8e006e2431d0da3eab11846/comments", "author": null, "committer": null, "parents": [{"sha": "5af22024f62f1f596a35d3c138d41d47d5697ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af22024f62f1f596a35d3c138d41d47d5697ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af22024f62f1f596a35d3c138d41d47d5697ca0"}], "stats": {"total": 456, "additions": 455, "deletions": 1}, "files": [{"sha": "6267b7a691eae2fa15c3494d57f5b7bae4faa89c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 273, "deletions": 0, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,276 @@\n+2022-05-24  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* tree-vect-loop-manip.cc (vect_do_peeling): Save/restore profile\n+\tcounts for the epilog loop.\n+\n+2022-05-24  Martin Sebor  <msebor@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105604\n+\t* gimple-ssa-sprintf.cc (set_aggregate_size_and_offset): Add comments.\n+\t(get_origin_and_offset_r): Remove null handling.  Handle variable array\n+\tsizes.\n+\t(get_origin_and_offset): Handle null argument here.  Simplify.\n+\t(alias_offset): Update comment.\n+\t* pointer-query.cc (field_at_offset): Update comment.  Handle members\n+\tof variable-length types.\n+\n+2022-05-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* target.def (vec_perm_const): Define new parameter op_mode and\n+\tupdate doc.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/aarch64/aarch64.cc (aarch64_vectorize_vec_perm_const): Adjust\n+\tvec_perm_const hook to add new parameter op_mode and return false\n+\tif result and operand modes do not match.\n+\t* config/arm/arm.cc (arm_vectorize_vec_perm_const): Likewise.\n+\t* config/gcn/gcn.cc (gcn_vectorize_vec_perm_const): Likewise.\n+\t* config/ia64/ia64.cc (ia64_vectorize_vec_perm_const): Likewise.\n+\t* config/mips/mips.cc (mips_vectorize_vec_perm_const): Likewise.\n+\t* config/rs6000/rs6000.cc (rs6000_vectorize_vec_perm_const): Likewise\n+\t* config/s390/s390.cc (s390_vectorize_vec_perm_const): Likewise.\n+\t* config/sparc/sparc.cc (sparc_vectorize_vec_perm_const): Likewise.\n+\t* config/i386/i386-expand.cc (ix86_vectorize_vec_perm_const): Likewise.\n+\t* config/i386/i386-expand.h (ix86_vectorize_vec_perm_const): Adjust\n+\tprototype.\n+\t* config/i386/sse.md (ashrv4di3): Adjust call to vec_perm_const hook.\n+\t(ashrv2di3): Likewise.\n+\t* optabs.cc (expand_vec_perm_const): Likewise.\n+\t* optabs-query.h (can_vec_perm_const_p): Adjust prototype.\n+\t* optabs-query.cc (can_vec_perm_const_p): Define new parameter\n+\top_mode and pass it to vec_perm_const hook.\n+\t(can_mult_highpart_p): Adjust call to can_vec_perm_const_p.\n+\t* match.pd (vec_perm X Y CST): Likewise.\n+\t* tree-ssa-forwprop.cc (simplify_vector_constructor): Likewise.\n+\t* tree-vect-data-refs.cc (vect_grouped_store_supported): Likewise.\n+\t(vect_grouped_load_supported): Likewise.\n+\t(vect_shift_permute_load_chain): Likewise.\n+\t* tree-vect-generic.cc (lower_vec_perm): Likewise.\n+\t* tree-vect-loop-manip.cc (interleave_supported_p): Likewise.\n+\t* tree-vect-loop.cc (have_whole_vector_shift): Likewise.\n+\t* tree-vect-patterns.cc (vect_recog_rotate_pattern): Likewise.\n+\t* tree-vect-slp.cc (can_duplicate_and_interleave_p): Likewise.\n+\t(vect_transform_slp_perm_load): Likewise.\n+\t(vectorizable_slp_permutation): Likewise.\n+\t* tree-vect-stmts.cc (perm_mask_for_reverse): Likewise.\n+\t(vectorizable_bswap): Likewise.\n+\t(scan_store_can_perm_p): Likewise.\n+\t(vect_gen_perm_mask_checked): Likewise.\n+\n+2022-05-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104816\n+\t* config/i386/i386.opt: Remove Undocumented.\n+\t* doc/invoke.texi: Document -mcet-switch.\n+\n+2022-05-24  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config.gcc (amdgcn): Accept --with-arch=gfx908 and gfx90a.\n+\t* config/gcn/gcn-opts.h (enum gcn_isa): New.\n+\t(TARGET_GCN3): Use enum gcn_isa.\n+\t(TARGET_GCN3_PLUS): Likewise.\n+\t(TARGET_GCN5): Likewise.\n+\t(TARGET_GCN5_PLUS): Likewise.\n+\t(TARGET_CDNA1): New.\n+\t(TARGET_CDNA1_PLUS): New.\n+\t(TARGET_CDNA2): New.\n+\t(TARGET_CDNA2_PLUS): New.\n+\t(TARGET_M0_LDS_LIMIT): New.\n+\t(TARGET_PACKED_WORK_ITEMS): New.\n+\t* config/gcn/gcn.cc (gcn_isa): Change to enum gcn_isa.\n+\t(gcn_option_override): Recognise CDNA ISA variants.\n+\t(gcn_omp_device_kind_arch_isa): Support gfx90a.\n+\t(gcn_expand_prologue): Make m0 init optional.\n+\tAdd support for packed work items.\n+\t(output_file_start): Support gfx90a.\n+\t(gcn_hsa_declare_function_name): Support gfx90a metadata.\n+\t* config/gcn/gcn.h (TARGET_CPU_CPP_BUILTINS):Add __CDNA1__ and\n+\t__CDNA2__.\n+\t* config/gcn/gcn.md (<su>mulsi3_highpart): Use TARGET_GCN5_PLUS.\n+\t(<su>mulsi3_highpart_imm): Likewise.\n+\t(<su>mulsidi3): Likewise.\n+\t(<su>mulsidi3_imm): Likewise.\n+\t* config/gcn/gcn.opt (gpu_type): Add gfx90a.\n+\t* config/gcn/mkoffload.cc (EF_AMDGPU_MACH_AMDGCN_GFX90a): New.\n+\t(main): Support gfx90a.\n+\t* config/gcn/t-gcn-hsa: Add gfx90a multilib.\n+\t* config/gcn/t-omp-device: Add gfx90a isa.\n+\n+2022-05-24  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config.in: Regenerate.\n+\t* config/gcn/gcn-hsa.h (X_FIJI): Delete.\n+\t(X_900): Delete.\n+\t(X_906): Delete.\n+\t(X_908): Delete.\n+\t(S_FIJI): Delete.\n+\t(S_900): Delete.\n+\t(S_906): Delete.\n+\t(S_908): Delete.\n+\t(NO_XNACK): New macro.\n+\t(NO_SRAM_ECC): New macro.\n+\t(SRAMOPT): Keep only v4 variant.\n+\t(HSACO3_SELECT_OPT): Delete.\n+\t(DRIVER_SELF_SPECS): Delete.\n+\t(ASM_SPEC): Remove LLVM 9 support.\n+\t* config/gcn/gcn-valu.md\n+\t(gather<mode>_insn_2offsets<exec>): Remove assembler bug workaround.\n+\t(scatter<mode>_insn_2offsets<exec_scatter>): Likewise.\n+\t* config/gcn/gcn.cc (output_file_start): Remove LLVM 9 support.\n+\t(print_operand_address): Remove assembler bug workaround.\n+\t* config/gcn/mkoffload.cc (EF_AMDGPU_XNACK_V3): Delete.\n+\t(EF_AMDGPU_SRAM_ECC_V3): Delete.\n+\t(SET_XNACK_ON): Delete v3 variants.\n+\t(SET_XNACK_OFF): Delete v3 variants.\n+\t(TEST_XNACK): Delete v3 variants.\n+\t(SET_SRAM_ECC_ON): Delete v3 variants.\n+\t(SET_SRAM_ECC_ANY): Delete v3 variants.\n+\t(SET_SRAM_ECC_OFF): Delete v3 variants.\n+\t(SET_SRAM_ECC_UNSUPPORTED): Delete v3 variants.\n+\t(TEST_SRAM_ECC_ANY): Delete v3 variants.\n+\t(TEST_SRAM_ECC_ON): Delete v3 variants.\n+\t(copy_early_debug_info): Remove v3 support.\n+\t(main): Remove v3 support.\n+\t* configure: Regenerate.\n+\t* configure.ac: Replace all GCN feature checks with a version check.\n+\n+2022-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.md (peephole2): Convert xor;neg;adc;neg,\n+\ti.e. a double word negation of a zero extended operand, to\n+\tneg;sbb.\n+\n+2022-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/105668\n+\t* config/i386/i386-expand.cc (ix86_expand_sse_movcc): Support\n+\tV1TImode, just like V2DImode.\n+\t* config/i386/sse.md (vcond_mask_<mode><sseintvecmodelower>):\n+\tUse VI_128 mode iterator instead of VI124_128 to include V2DI.\n+\t(vcond_mask_v2div2di): Delete.\n+\t(vcond_mask_v1tiv1ti): New define_expand.\n+\n+2022-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* genpreds.cc (write_lookup_constraint_1): Avoid generating a call\n+\tto strncmp for strings of length one.\n+\n+2022-05-24  ShiYulong  <shiyulong@iscas.ac.cn>\n+\n+\t* config/riscv/predicates.md (imm5_operand): Add a new operand type for\n+\tprefetch instructions.\n+\t* config/riscv/riscv-builtins.cc (AVAIL): Add new AVAILs for CMO ISA\n+\tExtensions.\n+\t(RISCV_ATYPE_SI): New.\n+\t(RISCV_ATYPE_DI): New.\n+\t* config/riscv/riscv-ftypes.def (0): New.\n+\t(1): New.\n+\t* config/riscv/riscv.md (riscv_clean_<mode>): New.\n+\t(riscv_flush_<mode>): New.\n+\t(riscv_inval_<mode>): New.\n+\t(riscv_zero_<mode>): New.\n+\t(prefetch): New.\n+\t(riscv_prefetchi_<mode>): New.\n+\t* config/riscv/riscv-cmo.def: New file.\n+\n+2022-05-24  ShiYulong  <shiyulong@iscas.ac.cn>\n+\n+\t* common/config/riscv/riscv-common.cc: Add zicbom, zicboz, zicbop extensions.\n+\t* config/riscv/riscv-opts.h (MASK_ZICBOZ): New.\n+\t(MASK_ZICBOM): New.\n+\t(MASK_ZICBOP): New.\n+\t(TARGET_ZICBOZ): New.\n+\t(TARGET_ZICBOM): New.\n+\t(TARGET_ZICBOP): New.\n+\t* config/riscv/riscv.opt (riscv_zicmo_subext): New.\n+\n+2022-05-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* tree-vect-slp-patterns.cc: Add \"final\" and \"override\" to\n+\tvect_pattern::build impls as appropriate.\n+\n+2022-05-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* ipa-cp.cc: Add \"final\" and \"override\" to call_summary_base vfunc\n+\timplementations, removing redundant \"virtual\" as appropriate.\n+\t* ipa-fnsummary.h: Likewise.\n+\t* ipa-modref.cc: Likewise.\n+\t* ipa-param-manipulation.cc: Likewise.\n+\t* ipa-profile.cc: Likewise.\n+\t* ipa-prop.h: Likewise.\n+\t* ipa-pure-const.cc: Likewise.\n+\t* ipa-reference.cc: Likewise.\n+\t* ipa-sra.cc: Likewise.\n+\t* symbol-summary.h: Likewise.\n+\t* symtab-thunks.cc: Likewise.\n+\n+2022-05-24  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-05-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* expmed.cc (emit_store_flag_1): Mitigate -Wmaybe-uninitialized\n+\twarning.\n+\n+2022-05-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* expmed.cc (emit_store_flag_1): Mitigate -Wmaybe-uninitialized\n+\twarning.\n+\n+2022-05-24  Bruno Haible  <bruno@clisp.org>\n+\n+\tPR other/105527\n+\t* doc/install.texi (Configuration): Add more details about --with-zstd.\n+\tDocument --with-zstd-include and --with-zstd-lib\n+\n+2022-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105711\n+\t* expmed.cc (extract_bit_field_as_subreg): Add op0_mode parameter\n+\tand use it.\n+\t(extract_bit_field_1): Pass down the mode of op0 to\n+\textract_bit_field_as_subreg.\n+\n+2022-05-24  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* config/riscv/riscv.cc: (struct riscv_tune_param): Add\n+\t  fmv_cost.\n+\t(rocket_tune_info): Add default fmv_cost 8.\n+\t(sifive_7_tune_info): Ditto.\n+\t(thead_c906_tune_info): Ditto.\n+\t(optimize_size_tune_info): Ditto.\n+\t(riscv_register_move_cost): Use fmv_cost for int<->fp moves.\n+\n+2022-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/105378\n+\t* omp-builtins.def (BUILT_IN_GOMP_TASKWAIT_DEPEND_NOWAIT): New\n+\tbuiltin.\n+\t* gimplify.cc (gimplify_omp_task): Diagnose taskwait with nowait\n+\tclause but no depend clauses.\n+\t* omp-expand.cc (expand_taskwait_call): Use\n+\tBUILT_IN_GOMP_TASKWAIT_DEPEND_NOWAIT rather than\n+\tBUILT_IN_GOMP_TASKWAIT_DEPEND if nowait clause is present.\n+\n+2022-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100221\n+\t* tree-ssa-dse.cc (contains_phi_arg): New function.\n+\t(dse_classify_store): Postpone PHI defs that feed another PHI in defs.\n+\n+2022-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105629\n+\t* tree-ssa-phiopt.cc (spaceship_replacement): Allow\n+\ta sign-extending conversion.\n+\n+2022-05-24  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/105627\n+\t* config/rs6000/rs6000-p8swap.cc (union_defs): Assert def_insn can't\n+\tbe a debug insn.\n+\t(union_uses): Skip debug use_insn.\n+\n 2022-05-23  Vineet Gupta  <vineetg@rivosinc.com>\n \n \t* config/riscv/predicates.md (const_0_operand): Remove"}, {"sha": "a0acbbdde3344b6a8c546e2025b321c752667bd9", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1 +1 @@\n-20220524\n+20220525"}, {"sha": "a886254bca1303ae42a3d89ed7eeb4e57027d371", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,8 @@\n+2022-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/105378\n+\t* c-parser.cc (OMP_TASKWAIT_CLAUSE_MASK): Add nowait clause.\n+\n 2022-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/105131"}, {"sha": "42d57c2e3bdb844f2a106d38c61b37e1821f7950", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,57 @@\n+2022-05-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (cxx_fold_indirect_ref): Add default arg.\n+\t(cxx_eval_call_expression): Call it.\n+\t(cxx_fold_indirect_ref_1): Handle null empty_base.\n+\n+2022-05-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (enum value_cat): New. Change all 'lval' parameters\n+\tfrom int to value_cat.  Change most false to vc_prvalue, most true\n+\tto vc_glvalue, cases where the return value is ignored to\n+\tvc_discard.\n+\t(cxx_eval_statement_list): Only vc_prvalue for stmt-expr result.\n+\t(cxx_eval_store_expression): Only build _REF for vc_glvalue.\n+\t(cxx_eval_array_reference, cxx_eval_component_reference)\n+\t(cxx_eval_indirect_ref, cxx_eval_constant_expression): Likewise.\n+\n+2022-05-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105622\n+\t* constexpr.cc (cxx_eval_store_expression): Adjust assert.\n+\tUse initialized_type.\n+\n+2022-05-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (any_template_arguments_need_structural_equality_p):\n+\tDeclare.\n+\t* pt.cc (struct ctp_hasher): Define.\n+\t(ctp_table): Define.\n+\t(canonical_type_parameter): Use it.\n+\t(process_template_parm): Set TYPE_CANONICAL for\n+\tTEMPLATE_TEMPLATE_PARM too.\n+\t(lookup_template_class_1): Remove now outdated comment for the\n+\tany_template_arguments_need_structural_equality_p test.\n+\t(tsubst) <case TEMPLATE_TEMPLATE_PARM, etc>: Don't specifically\n+\tclear TYPE_CANONICAL for ttps.  Set TYPE_CANONICAL on the\n+\tsubstituted type later.\n+\t(any_template_arguments_need_structural_equality_p): Return\n+\ttrue for any_targ_node.  Don't return true just because a\n+\ttemplate argument uses structural equality.  Add comment for\n+\tthe PARM_DECL special case.\n+\t(rewrite_template_parm): Set TYPE_CANONICAL on the rewritten\n+\tparm's type later.\n+\t* tree.cc (bind_template_template_parm): Set TYPE_CANONICAL\n+\twhen safe to do so.\n+\t* typeck.cc (structural_comptypes) [check_alias]: Increment\n+\tprocessing_template_decl before checking\n+\tdependent_alias_template_spec_p.\n+\n+2022-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/105378\n+\t* parser.cc (OMP_TASKWAIT_CLAUSE_MASK): Add nowait clause.\n+\n 2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cxx-pretty-print.h: Replace uses of \"FINAL\" and \"OVERRIDE\" with"}, {"sha": "8b3f8c2f3fffa3793e3343555d6e6de23d733816", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,12 @@\n+2022-05-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* decl.cc: Add \"final\" and \"override\" to all \"visit\" vfunc decls\n+\tas appropriate.\n+\t* expr.cc: Likewise.\n+\t* toir.cc: Likewise.\n+\t* typeinfo.cc: Likewise.\n+\t* types.cc: Likewise.\n+\n 2022-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 60bfa0ee7."}, {"sha": "3cffe47a16a286d6838e8ebeed79f2db90ba0045", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,8 @@\n+2022-05-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/105378\n+\t* openmp.cc (gfc_match_omp_taskwait): Accept nowait.\n+\n 2022-05-23  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/104949"}, {"sha": "493e2a9767774788213c95452e551e550ac9d672", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,79 @@\n+2022-05-24  Martin Sebor  <msebor@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105604\n+\t* gcc.dg/Wrestrict-24.c: New test.\n+\t* gcc.dg/Wrestrict-25.c: New test.\n+\t* gcc.dg/Wrestrict-26.c: New test.\n+\n+2022-05-24  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gcc.misc-tests/outputs.exp: Make the -gsplit-dwarf test\n+\ta compile-and-link test rather than a compile-only test.\n+\n+2022-05-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105622\n+\t* g++.dg/cpp2a/no_unique_address14.C: New test.\n+\n+2022-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/neg-zext-1.c: New test case for -m32.\n+\t* gcc.target/i386/neg-zext-2.c: New test case for -m64.\n+\n+2022-05-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/105668\n+\t* gcc.target/i386/pr105668.c: New test case.\n+\n+2022-05-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-52830a.C: New test.\n+\n+2022-05-24  ShiYulong  <shiyulong@iscas.ac.cn>\n+\n+\t* gcc.target/riscv/cmo-zicbom-1.c: New test.\n+\t* gcc.target/riscv/cmo-zicbom-2.c: New test.\n+\t* gcc.target/riscv/cmo-zicbop-1.c: New test.\n+\t* gcc.target/riscv/cmo-zicbop-2.c: New test.\n+\t* gcc.target/riscv/cmo-zicboz-1.c: New test.\n+\t* gcc.target/riscv/cmo-zicboz-2.c: New test.\n+\n+2022-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105711\n+\t* gcc.target/i386/pr105711.c: New testcase.\n+\n+2022-05-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/105378\n+\t* gfortran.dg/gomp/taskwait-depend-nowait-1.f90: New.\n+\n+2022-05-24  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* gcc.target/riscv/pr105666.c: New test.\n+\n+2022-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/105378\n+\t* c-c++-common/gomp/taskwait-depend-nowait-1.c: New test.\n+\n+2022-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100221\n+\t* gcc.dg/tree-ssa/ssa-dse-44.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-dse-45.c: Likewise.\n+\n+2022-05-24  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/105706\n+\t* gcc.target/powerpc/pr78604.c: Adjust.\n+\n+2022-05-24  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/105627\n+\t* gcc.target/powerpc/pr105627.c: New test.\n+\n 2022-05-23  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/104441"}, {"sha": "787f70b6ded47bf80f4f82b316fef6f9d6ecc2ce", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,7 @@\n+2022-05-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* ansidecl.h: Drop macros OVERRIDE and FINAL.\n+\n 2022-05-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* demangle.h (enum demangle_component_type): Add module components."}, {"sha": "a885da7f000911216ae57d1faca0e38c7e1cc297", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768f49a20f467648c8e006e2431d0da3eab11846/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768f49a20f467648c8e006e2431d0da3eab11846/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=768f49a20f467648c8e006e2431d0da3eab11846", "patch": "@@ -1,3 +1,31 @@\n+2022-05-24  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (EF_AMDGPU_MACH): Add\n+\tEF_AMDGPU_MACH_AMDGCN_GFX90a.\n+\t(gcn_gfx90a_s): New.\n+\t(isa_hsa_name): Support gfx90a.\n+\t(isa_code): Likewise.\n+\n+2022-05-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/105378\n+\t* libgomp.texi (OpenMP 5.1): Set 'taskwait nowait' to 'Y'.\n+\t* testsuite/libgomp.fortran/taskwait-depend-nowait-1.f90: New.\n+\n+2022-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/105378\n+\t* libgomp_g.h (GOMP_taskwait_depend_nowait): Declare.\n+\t* libgomp.map (GOMP_taskwait_depend_nowait): Export at GOMP_5.1.1.\n+\t* task.c (empty_task): New function.\n+\t(gomp_task_run_post_handle_depend_hash): Declare earlier.\n+\t(gomp_task_run_post_handle_depend): Declare.\n+\t(GOMP_task): Optimize fn == empty_task if there is nothing to wait\n+\tfor.\n+\t(gomp_task_run_post_handle_dependers): Optimize task->fn == empty_task.\n+\t(GOMP_taskwait_depend_nowait): New function.\n+\t* testsuite/libgomp.c-c++-common/taskwait-depend-nowait-1.c: New test.\n+\n 2022-05-23  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/104949"}]}