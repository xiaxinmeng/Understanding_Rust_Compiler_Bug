{"sha": "e249fcad3aea469b27d92ba9ef435ee79fd932d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0OWZjYWQzYWVhNDY5YjI3ZDkyYmE5ZWY0MzVlZTc5ZmQ5MzJkNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-16T15:42:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-16T15:42:33Z"}, "message": "cp-tree.h (build_this_parm, [...]): Add FN parm.\n\n\tgcc/cp/\n\t* cp-tree.h (build_this_parm, cp_build_parm_decl)\n\tbuild_artificial_parm): Add FN parm.\n\t* decl.c (start_cleanup_fn): Adjust.\n\t(build_this_parm): Add FN parm, pass it through.\n\t(grokfndecl): Adjust parm building.\n\t* decl2.c (cp_build_parm_decl): Add FN parm, set context.\n\t(build_artificial_parm): Add FN parm, pass through.\n\t(maybe_retrofit_in_chrg): Adjust parm building.\n\t(start_static_storage_duration_function): Likwise.\n\t* lambda.c (maybe_aadd_lambda_conv_op): Likewise.\n\t* method.c (implicitly_declare_fn): Likewise.\n\t* parser.c (inject_this_parameter): Likewise.\n\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_build_decl): Adjust parm building.\n(--This line, and those below, will be ignored--\n\nM    gcc/cp/parser.c\nM    gcc/cp/ChangeLog\nM    gcc/cp/decl.c\nM    gcc/cp/lambda.c\nM    gcc/cp/cp-tree.h\nM    gcc/cp/method.c\nM    gcc/cp/decl2.c\nM    libcc1/libcp1plugin.cc\nM    libcc1/ChangeLog\n\nFrom-SVN: r249268", "tree": {"sha": "220f75501ce153151b8dfbfe055b13b82def2a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220f75501ce153151b8dfbfe055b13b82def2a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e249fcad3aea469b27d92ba9ef435ee79fd932d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e249fcad3aea469b27d92ba9ef435ee79fd932d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e249fcad3aea469b27d92ba9ef435ee79fd932d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e249fcad3aea469b27d92ba9ef435ee79fd932d4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78a8b676f1bd4fb799f3696486f45adde11a32cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a8b676f1bd4fb799f3696486f45adde11a32cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a8b676f1bd4fb799f3696486f45adde11a32cb"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "11f2d03ef5fddcb5e238c135c834419776349524", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -1,5 +1,18 @@\n 2017-06-16  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (build_this_parm, cp_build_parm_decl,\n+\tbuild_artificial_parm): Add FN parm.\n+\t* decl.c (start_cleanup_fn): Adjust.\n+\t(build_this_parm): Add FN parm, pass it through.\n+\t(grokfndecl): Adjust parm building.\n+\t* decl2.c (cp_build_parm_decl): Add FN parm, set context.\n+\t(build_artificial_parm): Add FN parm, pass through.\n+\t(maybe_retrofit_in_chrg): Adjust parm building.\n+\t(start_static_storage_duration_function): Likwise.\n+\t* lambda.c (maybe_aadd_lambda_conv_op): Likewise.\n+\t* method.c (implicitly_declare_fn): Likewise.\n+\t* parser.c (inject_this_parameter): Likewise.\n+\n \tSymbol tables are insert only.\n \t* cp-tree.h (default_hash_traits <lang_identifier *>): Don't\n \tderive from pointer_hash.  Make undeletable."}, {"sha": "e33bda64904e73f1994f455d71fd853e0d8bc7c4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -6078,7 +6078,7 @@ extern int cp_complete_array_type_or_error\t(tree *, tree, bool, tsubst_flags_t);\n extern tree build_ptrmemfunc_type\t\t(tree);\n extern tree build_ptrmem_type\t\t\t(tree, tree);\n /* the grokdeclarator prototype is in decl.h */\n-extern tree build_this_parm\t\t\t(tree, cp_cv_quals);\n+extern tree build_this_parm\t\t\t(tree, tree, cp_cv_quals);\n extern tree grokparms\t\t\t\t(tree, tree *);\n extern int copy_fn_p\t\t\t\t(const_tree);\n extern bool move_fn_p                           (const_tree);\n@@ -6179,7 +6179,7 @@ extern void check_default_args\t\t\t(tree);\n extern bool mark_used\t\t\t\t(tree);\n extern bool mark_used\t\t\t        (tree, tsubst_flags_t);\n extern void finish_static_data_member_decl\t(tree, tree, bool, tree, int);\n-extern tree cp_build_parm_decl\t\t\t(tree, tree);\n+extern tree cp_build_parm_decl\t\t\t(tree, tree, tree);\n extern tree get_guard\t\t\t\t(tree);\n extern tree get_guard_cond\t\t\t(tree, bool);\n extern tree set_guard\t\t\t\t(tree);\n@@ -6188,7 +6188,7 @@ extern void mark_needed\t\t\t\t(tree);\n extern bool decl_needed_p\t\t\t(tree);\n extern void note_vague_linkage_fn\t\t(tree);\n extern void note_variable_template_instantiation (tree);\n-extern tree build_artificial_parm\t\t(tree, tree);\n+extern tree build_artificial_parm\t\t(tree, tree, tree);\n extern bool possibly_inlined_p\t\t\t(tree);\n extern int parm_index                           (tree);\n extern tree vtv_start_verification_constructor_init_function (void);"}, {"sha": "16cd2a50ffd9bf3c584c73b0dab490c5d7237d88", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -7823,10 +7823,7 @@ start_cleanup_fn (void)\n   /* Build the parameter.  */\n   if (use_cxa_atexit)\n     {\n-      tree parmdecl;\n-\n-      parmdecl = cp_build_parm_decl (NULL_TREE, ptr_type_node);\n-      DECL_CONTEXT (parmdecl) = fndecl;\n+      tree parmdecl = cp_build_parm_decl (fndecl, NULL_TREE, ptr_type_node);\n       TREE_USED (parmdecl) = 1;\n       DECL_READ_P (parmdecl) = 1;\n       DECL_ARGUMENTS (fndecl) = parmdecl;\n@@ -8367,12 +8364,12 @@ check_class_member_definition_namespace (tree decl)\n \t       decl, DECL_CONTEXT (decl));\n }\n \n-/* Build a PARM_DECL for the \"this\" parameter.  TYPE is the\n+/* Build a PARM_DECL for the \"this\" parameter of FN.  TYPE is the\n    METHOD_TYPE for a non-static member function; QUALS are the\n    cv-qualifiers that apply to the function.  */\n \n tree\n-build_this_parm (tree type, cp_cv_quals quals)\n+build_this_parm (tree fn, tree type, cp_cv_quals quals)\n {\n   tree this_type;\n   tree qual_type;\n@@ -8391,7 +8388,7 @@ build_this_parm (tree type, cp_cv_quals quals)\n      assigned to.  */\n   this_quals = (quals & TYPE_QUAL_RESTRICT) | TYPE_QUAL_CONST;\n   qual_type = cp_build_qualified_type (this_type, this_quals);\n-  parm = build_artificial_parm (this_identifier, qual_type);\n+  parm = build_artificial_parm (fn, this_identifier, qual_type);\n   cp_apply_type_quals_to_decl (this_quals, parm);\n   return parm;\n }\n@@ -8525,8 +8522,7 @@ grokfndecl (tree ctype,\n \n   if (TREE_CODE (type) == METHOD_TYPE)\n     {\n-      tree parm;\n-      parm = build_this_parm (type, quals);\n+      tree parm = build_this_parm (decl, type, quals);\n       DECL_CHAIN (parm) = parms;\n       parms = parm;\n \n@@ -11625,7 +11621,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t   args && args != void_list_node;\n \t   args = TREE_CHAIN (args))\n \t{\n-\t  tree decl = cp_build_parm_decl (NULL_TREE, TREE_VALUE (args));\n+\t  tree decl = cp_build_parm_decl (NULL_TREE, NULL_TREE,\n+\t\t\t\t\t  TREE_VALUE (args));\n \n \t  DECL_CHAIN (decl) = decls;\n \t  decls = decl;\n@@ -11794,7 +11791,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n     if (decl_context == PARM)\n       {\n-\tdecl = cp_build_parm_decl (unqualified_id, type);\n+\tdecl = cp_build_parm_decl (NULL_TREE, unqualified_id, type);\n \tDECL_ARRAY_PARAMETER_P (decl) = array_parameter_p;\n \n \tbad_specifiers (decl, BSP_PARM, virtualp,"}, {"sha": "53412e9f38d607b083b74ce02b01d75469844cf2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -192,14 +192,16 @@ change_return_type (tree new_ret, tree fntype)\n   return newtype;\n }\n \n-/* Build a PARM_DECL with NAME and TYPE, and set DECL_ARG_TYPE\n+/* Build a PARM_DECL of FN with NAME and TYPE, and set DECL_ARG_TYPE\n    appropriately.  */\n \n tree\n-cp_build_parm_decl (tree name, tree type)\n+cp_build_parm_decl (tree fn, tree name, tree type)\n {\n   tree parm = build_decl (input_location,\n \t\t\t  PARM_DECL, name, type);\n+  DECL_CONTEXT (parm) = fn;\n+\n   /* DECL_ARG_TYPE is only used by the back end and the back end never\n      sees templates.  */\n   if (!processing_template_decl)\n@@ -208,13 +210,13 @@ cp_build_parm_decl (tree name, tree type)\n   return parm;\n }\n \n-/* Returns a PARM_DECL for a parameter of the indicated TYPE, with the\n+/* Returns a PARM_DECL of FN for a parameter of the indicated TYPE, with the\n    indicated NAME.  */\n \n tree\n-build_artificial_parm (tree name, tree type)\n+build_artificial_parm (tree fn, tree name, tree type)\n {\n-  tree parm = cp_build_parm_decl (name, type);\n+  tree parm = cp_build_parm_decl (fn, name, type);\n   DECL_ARTIFICIAL (parm) = 1;\n   /* All our artificial parms are implicitly `const'; they cannot be\n      assigned to.  */\n@@ -265,7 +267,7 @@ maybe_retrofit_in_chrg (tree fn)\n      pass us a pointer to our VTT.  */\n   if (CLASSTYPE_VBASECLASSES (DECL_CONTEXT (fn)))\n     {\n-      parm = build_artificial_parm (vtt_parm_identifier, vtt_parm_type);\n+      parm = build_artificial_parm (fn, vtt_parm_identifier, vtt_parm_type);\n \n       /* First add it to DECL_ARGUMENTS between 'this' and the real args...  */\n       DECL_CHAIN (parm) = parms;\n@@ -278,7 +280,7 @@ maybe_retrofit_in_chrg (tree fn)\n     }\n \n   /* Then add the in-charge parm (before the VTT parm).  */\n-  parm = build_artificial_parm (in_charge_identifier, integer_type_node);\n+  parm = build_artificial_parm (fn, in_charge_identifier, integer_type_node);\n   DECL_CHAIN (parm) = parms;\n   parms = parm;\n   arg_types = hash_tree_chain (integer_type_node, arg_types);\n@@ -3502,12 +3504,10 @@ start_static_storage_duration_function (unsigned count)\n \n   /* Create the argument list.  */\n   initialize_p_decl = cp_build_parm_decl\n-    (get_identifier (INITIALIZE_P_IDENTIFIER), integer_type_node);\n-  DECL_CONTEXT (initialize_p_decl) = ssdf_decl;\n+    (ssdf_decl, get_identifier (INITIALIZE_P_IDENTIFIER), integer_type_node);\n   TREE_USED (initialize_p_decl) = 1;\n   priority_decl = cp_build_parm_decl\n-    (get_identifier (PRIORITY_IDENTIFIER), integer_type_node);\n-  DECL_CONTEXT (priority_decl) = ssdf_decl;\n+    (ssdf_decl, get_identifier (PRIORITY_IDENTIFIER), integer_type_node);\n   TREE_USED (priority_decl) = 1;\n \n   DECL_CHAIN (initialize_p_decl) = priority_decl;"}, {"sha": "ee8784cb6adabd5fcba17d0ff98cf5d1de5fd07b", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -1102,7 +1102,8 @@ maybe_add_lambda_conv_op (tree type)\n   DECL_ARTIFICIAL (fn) = 1;\n   DECL_NOT_REALLY_EXTERN (fn) = 1;\n   DECL_DECLARED_INLINE_P (fn) = 1;\n-  DECL_ARGUMENTS (fn) = build_this_parm (fntype, TYPE_QUAL_CONST);\n+  DECL_ARGUMENTS (fn) = build_this_parm (fn, fntype, TYPE_QUAL_CONST);\n+\n   if (nested_def)\n     DECL_INTERFACE_KNOWN (fn) = 1;\n "}, {"sha": "9541fcb91611b4c983de57645f33e7c414421ebe", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -2072,7 +2072,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n       /* Note that this parameter is *not* marked DECL_ARTIFICIAL; we\n \t want its type to be included in the mangled function\n \t name.  */\n-      tree decl = cp_build_parm_decl (NULL_TREE, rhs_parm_type);\n+      tree decl = cp_build_parm_decl (fn, NULL_TREE, rhs_parm_type);\n       TREE_READONLY (decl) = 1;\n       retrofit_lang_decl (decl);\n       DECL_PARM_INDEX (decl) = DECL_PARM_LEVEL (decl) = 1;\n@@ -2085,11 +2085,10 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n       for (tree parm = inherited_parms; parm && parm != void_list_node;\n \t   parm = TREE_CHAIN (parm))\n \t{\n-\t  *p = cp_build_parm_decl (NULL_TREE, TREE_VALUE (parm));\n+\t  *p = cp_build_parm_decl (fn, NULL_TREE, TREE_VALUE (parm));\n \t  retrofit_lang_decl (*p);\n \t  DECL_PARM_LEVEL (*p) = 1;\n \t  DECL_PARM_INDEX (*p) = index++;\n-\t  DECL_CONTEXT (*p) = fn;\n \t  p = &DECL_CHAIN (*p);\n \t}\n       SET_DECL_INHERITED_CTOR (fn, inherited_ctor);\n@@ -2103,7 +2102,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n       constexpr_p = DECL_DECLARED_CONSTEXPR_P (inherited_ctor);\n     }\n   /* Add the \"this\" parameter.  */\n-  this_parm = build_this_parm (fn_type, TYPE_UNQUALIFIED);\n+  this_parm = build_this_parm (fn, fn_type, TYPE_UNQUALIFIED);\n   DECL_CHAIN (this_parm) = DECL_ARGUMENTS (fn);\n   DECL_ARGUMENTS (fn) = this_parm;\n "}, {"sha": "4adf9aac830d8bc5dae5589e45548e4c9c8c3a2c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -20451,7 +20451,7 @@ inject_this_parameter (tree ctype, cp_cv_quals quals)\n \treturn;\n     }\n \n-  this_parm = build_this_parm (ctype, quals);\n+  this_parm = build_this_parm (NULL_TREE, ctype, quals);\n   /* Clear this first to avoid shortcut in cp_build_indirect_ref.  */\n   current_class_ptr = NULL_TREE;\n   current_class_ref"}, {"sha": "1d3921b4e08ba0a745ec00150c8e04ddb9430668", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -1,3 +1,7 @@\n+2017-06-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_decl): Adjust parm building.\n+\n 2017-05-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_make_namespace_inline): Push onto linees."}, {"sha": "9d9221c8e50c09b70e66a4954d4ec8c78c58c10b", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e249fcad3aea469b27d92ba9ef435ee79fd932d4/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e249fcad3aea469b27d92ba9ef435ee79fd932d4/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=e249fcad3aea469b27d92ba9ef435ee79fd932d4", "patch": "@@ -1366,15 +1366,15 @@ plugin_build_decl (cc1_plugin::connection *self,\n \t overloading.  */\n       SET_DECL_LANGUAGE (decl, lang_cplusplus);\n       if (TREE_CODE (sym_type) == METHOD_TYPE)\n-\tDECL_ARGUMENTS (decl) = build_this_parm (current_class_type,\n+\tDECL_ARGUMENTS (decl) = build_this_parm (decl, current_class_type,\n \t\t\t\t\t\t cp_type_quals (sym_type));\n       for (tree arg = TREE_CODE (sym_type) == METHOD_TYPE\n \t     ? TREE_CHAIN (TYPE_ARG_TYPES (sym_type))\n \t     : TYPE_ARG_TYPES (sym_type);\n \t   arg && arg != void_list_node;\n \t   arg = TREE_CHAIN (arg))\n \t{\n-\t  tree parm = cp_build_parm_decl (NULL_TREE, TREE_VALUE (arg));\n+\t  tree parm = cp_build_parm_decl (decl, NULL_TREE, TREE_VALUE (arg));\n \t  DECL_CHAIN (parm) = DECL_ARGUMENTS (decl);\n \t  DECL_ARGUMENTS (decl) = parm;\n \t}"}]}