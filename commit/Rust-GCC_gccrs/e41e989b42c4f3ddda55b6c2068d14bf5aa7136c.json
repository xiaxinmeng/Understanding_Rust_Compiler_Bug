{"sha": "e41e989b42c4f3ddda55b6c2068d14bf5aa7136c", "node_id": "C_kwDOANBUbNoAKGU0MWU5ODliNDJjNGYzZGRkYTU1YjZjMjA2OGQxNGJmNWFhNzEzNmM", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-07-14T23:55:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-22T15:01:44Z"}, "message": "[Ada] Improve performance for case-insensitive regular expressions\n\ngcc/ada/\n\n\t* libgnat/s-regpat.adb (Match): Handle the case where Self.First\n\tis not NUL (so we know the first character we are looking for),\n\tbut case-insensitive matching has\n\tbeen specified.\n\t(Optimize): In the case of an EXACTF Op, set Self.First as is\n\tdone in the EXACT case, except with the addition of a call to\n\tLower_Case.", "tree": {"sha": "644ac4687ebd306c42d88342659ab781fd21b052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/644ac4687ebd306c42d88342659ab781fd21b052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e41e989b42c4f3ddda55b6c2068d14bf5aa7136c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41e989b42c4f3ddda55b6c2068d14bf5aa7136c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41e989b42c4f3ddda55b6c2068d14bf5aa7136c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41e989b42c4f3ddda55b6c2068d14bf5aa7136c/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7c4aeb6e16dc367764a7bc028a9c4c6fc87449"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "b40f682859de8c7d28a08bc26ab1cab4459768a0", "filename": "gcc/ada/libgnat/s-regpat.adb", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41e989b42c4f3ddda55b6c2068d14bf5aa7136c/gcc%2Fada%2Flibgnat%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41e989b42c4f3ddda55b6c2068d14bf5aa7136c/gcc%2Fada%2Flibgnat%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-regpat.adb?ref=e41e989b42c4f3ddda55b6c2068d14bf5aa7136c", "patch": "@@ -3463,18 +3463,58 @@ package body System.Regpat is\n          end;\n \n       elsif Self.First /= ASCII.NUL then\n-         --  We know what char it must start with\n+         --  We know what char (modulo casing) it must start with\n \n-         declare\n-            Next_Try : Natural := Index (First_In_Data, Self.First);\n+         if (Self.Flags and Case_Insensitive) = 0\n+           or else Self.First not in 'a' .. 'z'\n+         then\n+            declare\n+               Next_Try : Natural := Index (First_In_Data, Self.First);\n+            begin\n+               while Next_Try /= 0 loop\n+                  Matched := Try (Next_Try);\n+                  exit when Matched;\n+                  Next_Try := Index (Next_Try + 1, Self.First);\n+               end loop;\n+            end;\n+         else\n+            declare\n+               Uc_First : constant Character := To_Upper (Self.First);\n+\n+               function Case_Insensitive_Index\n+                 (Start : Positive) return Natural;\n+               --  Search for both Self.First and To_Upper (Self.First).\n+               --  If both are nonzero, return the smaller one; if exactly\n+               --  one is nonzero, return it; if both are zero, return zero.\n+\n+               ---------------------------\n+               -- Case_Insenstive_Index --\n+               ---------------------------\n+\n+               function Case_Insensitive_Index\n+                 (Start : Positive) return Natural\n+               is\n+                  Lc_Index : constant Natural := Index (Start, Self.First);\n+                  Uc_Index : constant Natural := Index (Start, Uc_First);\n+               begin\n+                  if Lc_Index = 0 then\n+                     return Uc_Index;\n+                  elsif Uc_Index = 0 then\n+                     return Lc_Index;\n+                  else\n+                     return Natural'Min (Lc_Index, Uc_Index);\n+                  end if;\n+               end Case_Insensitive_Index;\n \n-         begin\n-            while Next_Try /= 0 loop\n-               Matched := Try (Next_Try);\n-               exit when Matched;\n-               Next_Try := Index (Next_Try + 1, Self.First);\n-            end loop;\n-         end;\n+               Next_Try : Natural := Case_Insensitive_Index (First_In_Data);\n+            begin\n+               while Next_Try /= 0 loop\n+                  Matched := Try (Next_Try);\n+                  exit when Matched;\n+                  Next_Try := Case_Insensitive_Index (Next_Try + 1);\n+               end loop;\n+            end;\n+         end if;\n \n       else\n          --  Messy cases: try all locations (including for the empty string)\n@@ -3634,6 +3674,9 @@ package body System.Regpat is\n       if Program (Scan) = EXACT then\n          Self.First := Program (String_Operand (Scan));\n \n+      elsif Program (Scan) = EXACTF then\n+         Self.First := To_Lower (Program (String_Operand (Scan)));\n+\n       elsif Program (Scan) = BOL\n         or else Program (Scan) = SBOL\n         or else Program (Scan) = MBOL"}]}