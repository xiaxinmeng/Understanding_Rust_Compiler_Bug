{"sha": "10d53f5d111984f56ca2420ec2485637e8da8e01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkNTNmNWQxMTE5ODRmNTZjYTI0MjBlYzI0ODU2MzdlOGRhOGUwMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T19:46:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T19:46:23Z"}, "message": "Don't crash initializing multiple vars from a single result function.\n\nFrom-SVN: r168482", "tree": {"sha": "1bc7a3a0f1a5cf4a6eae1918b2a400acee976e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bc7a3a0f1a5cf4a6eae1918b2a400acee976e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d53f5d111984f56ca2420ec2485637e8da8e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d53f5d111984f56ca2420ec2485637e8da8e01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d53f5d111984f56ca2420ec2485637e8da8e01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d53f5d111984f56ca2420ec2485637e8da8e01/comments", "author": null, "committer": null, "parents": [{"sha": "79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "013adacebcf20ec81e9a716d8084a3089566c21d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d53f5d111984f56ca2420ec2485637e8da8e01/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d53f5d111984f56ca2420ec2485637e8da8e01/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=10d53f5d111984f56ca2420ec2485637e8da8e01", "patch": "@@ -8898,10 +8898,16 @@ Call_result_expression::do_type()\n   // Call_expression::do_must_eval_in_order when there is an error.\n   Call_expression* ce = this->call_->call_expression();\n   if (ce == NULL)\n-    return Type::make_error_type();\n+    {\n+      this->set_is_error();\n+      return Type::make_error_type();\n+    }\n   Function_type* fntype = ce->get_function_type();\n   if (fntype == NULL)\n-    return Type::make_error_type();\n+    {\n+      this->set_is_error();\n+      return Type::make_error_type();\n+    }\n   const Typed_identifier_list* results = fntype->results();\n   if (results == NULL)\n     {\n@@ -8952,7 +8958,11 @@ Call_result_expression::do_get_tree(Translate_context* context)\n   tree call_tree = this->call_->get_tree(context);\n   if (call_tree == error_mark_node)\n     return error_mark_node;\n-  gcc_assert(TREE_CODE(TREE_TYPE(call_tree)) == RECORD_TYPE);\n+  if (TREE_CODE(TREE_TYPE(call_tree)) != RECORD_TYPE)\n+    {\n+      gcc_assert(saw_errors());\n+      return error_mark_node;\n+    }\n   tree field = TYPE_FIELDS(TREE_TYPE(call_tree));\n   for (unsigned int i = 0; i < this->index_; ++i)\n     {"}]}