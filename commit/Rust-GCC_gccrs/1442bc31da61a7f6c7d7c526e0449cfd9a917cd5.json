{"sha": "1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0MmJjMzFkYTYxYTdmNmM3ZDdjNTI2ZTA0NDljZmQ5YTkxN2NkNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-27T09:30:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-27T09:31:53Z"}, "message": "tree-optimization/93397 delay converted reduction chain adjustment\n\nThe following delays adjusting the SLP graph for converted reduction\nchains to a point where the SLP build no longer can fail since we\notherwise fail to undo marking the conversion as a group.\n\n2020-01-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93397\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Delay\n\tconverted reduction chain SLP graph adjustment.\n\n\t* gcc.dg/torture/pr93397.c: New testcase.", "tree": {"sha": "3fdd69dba8c57ccb2faa36eb3007371982a278c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fdd69dba8c57ccb2faa36eb3007371982a278c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "45075840824cd3632e598d1c72f7509fa6e04b62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "patch": "@@ -1,3 +1,9 @@\n+2020-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93397\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Delay\n+\tconverted reduction chain SLP graph adjustment.\n+\n 2020-01-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/93436"}, {"sha": "2de060843d9c8034322f7cc799505f0aaec4b36b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "patch": "@@ -1,3 +1,8 @@\n+2020-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93397\n+\t* gcc.dg/torture/pr93397.c: New testcase.\n+\n 2020-01-27  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/85781"}, {"sha": "c19b7983e58b70e7f336440951b6195a9a0a66e9", "filename": "gcc/testsuite/gcc.dg/torture/pr93397.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93397.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93397.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93397.c?ref=1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+char\n+bn (char *vu)\n+{\n+  int b6;\n+  char wv = 0;\n+\n+  for (b6 = 0; b6 <= 64; b6 += 4)\n+    wv += vu[b6] + vu[b6 + 1];\n+\n+  return wv;\n+}"}, {"sha": "b13beeb3689ffe811349b81f3269eeeec094c96d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1442bc31da61a7f6c7d7c526e0449cfd9a917cd5/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=1442bc31da61a7f6c7d7c526e0449cfd9a917cd5", "patch": "@@ -2210,34 +2210,6 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\t\t      &tree_size, bst_map);\n   if (node != NULL)\n     {\n-      /* If this is a reduction chain with a conversion in front\n-         amend the SLP tree with a node for that.  */\n-      if (!dr\n-\t  && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n-\t  && STMT_VINFO_DEF_TYPE (stmt_info) != vect_reduction_def)\n-\t{\n-\t  /* Get at the conversion stmt - we know it's the single use\n-\t     of the last stmt of the reduction chain.  */\n-\t  gimple *tem = vect_orig_stmt (scalar_stmts[group_size - 1])->stmt;\n-\t  use_operand_p use_p;\n-\t  gimple *use_stmt;\n-\t  bool r = single_imm_use (gimple_assign_lhs (tem), &use_p, &use_stmt);\n-\t  gcc_assert (r);\n-\t  next_info = vinfo->lookup_stmt (use_stmt);\n-\t  next_info = vect_stmt_to_vectorize (next_info);\n-\t  scalar_stmts = vNULL;\n-\t  scalar_stmts.create (group_size);\n-\t  for (unsigned i = 0; i < group_size; ++i)\n-\t    scalar_stmts.quick_push (next_info);\n-\t  slp_tree conv = vect_create_new_slp_node (scalar_stmts);\n-\t  SLP_TREE_CHILDREN (conv).quick_push (node);\n-\t  node = conv;\n-\t  /* We also have to fake this conversion stmt as SLP reduction group\n-\t     so we don't have to mess with too much code elsewhere.  */\n-\t  REDUC_GROUP_FIRST_ELEMENT (next_info) = next_info;\n-\t  REDUC_GROUP_NEXT_ELEMENT (next_info) = NULL;\n-\t}\n-\n       /* Calculate the unrolling factor based on the smallest type.  */\n       poly_uint64 unrolling_factor\n \t= calculate_unrolling_factor (max_nunits, group_size);\n@@ -2355,6 +2327,36 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\t}\n \t    }\n \n+\t  /* If this is a reduction chain with a conversion in front\n+\t     amend the SLP tree with a node for that.  */\n+\t  if (!dr\n+\t      && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t      && STMT_VINFO_DEF_TYPE (stmt_info) != vect_reduction_def)\n+\t    {\n+\t      /* Get at the conversion stmt - we know it's the single use\n+\t\t of the last stmt of the reduction chain.  */\n+\t      gimple *tem = vect_orig_stmt (scalar_stmts[group_size - 1])->stmt;\n+\t      use_operand_p use_p;\n+\t      gimple *use_stmt;\n+\t      bool r = single_imm_use (gimple_assign_lhs (tem),\n+\t\t\t\t       &use_p, &use_stmt);\n+\t      gcc_assert (r);\n+\t      next_info = vinfo->lookup_stmt (use_stmt);\n+\t      next_info = vect_stmt_to_vectorize (next_info);\n+\t      scalar_stmts = vNULL;\n+\t      scalar_stmts.create (group_size);\n+\t      for (unsigned i = 0; i < group_size; ++i)\n+\t\tscalar_stmts.quick_push (next_info);\n+\t      slp_tree conv = vect_create_new_slp_node (scalar_stmts);\n+\t      SLP_TREE_CHILDREN (conv).quick_push (node);\n+\t      SLP_INSTANCE_TREE (new_instance) = conv;\n+\t      /* We also have to fake this conversion stmt as SLP reduction\n+\t\t group so we don't have to mess with too much code\n+\t\t elsewhere.  */\n+\t      REDUC_GROUP_FIRST_ELEMENT (next_info) = next_info;\n+\t      REDUC_GROUP_NEXT_ELEMENT (next_info) = NULL;\n+\t    }\n+\n \t  vinfo->slp_instances.safe_push (new_instance);\n \n \t  if (dump_enabled_p ())"}]}