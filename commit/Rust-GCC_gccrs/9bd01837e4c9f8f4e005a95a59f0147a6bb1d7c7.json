{"sha": "9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkMDE4MzdlNGM5ZjhmNGUwMDVhOTVhNTlmMDE0N2E2YmIxZDdjNw==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2017-06-06T12:58:02Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-06-06T12:58:02Z"}, "message": "[ARM] Rename *_compute_save_reg_mask ()\n\n2017-06-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm.c (arm_compute_save_reg_mask): Rename into ...\n    (arm_compute_save_core_reg_mask): This.\n    (thumb1_compute_save_reg_mask): Rename into ...\n    (thumb1_compute_save_core_reg_mask): This.\n    (arm_compute_save_reg0_reg12_mask): Adapt comment.\n    (arm_compute_frame_layout): Likewise.\n\nFrom-SVN: r248920", "tree": {"sha": "205798a33d1b63fad0e7a5bc760508b62efecfe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/205798a33d1b63fad0e7a5bc760508b62efecfe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "331dc84013b27d0f13c640262248e51a5864d26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331dc84013b27d0f13c640262248e51a5864d26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/331dc84013b27d0f13c640262248e51a5864d26d"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "ad09804a1d08fe33f16af3118c2a862d1b895750", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "patch": "@@ -1,3 +1,12 @@\n+2017-06-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.c (arm_compute_save_reg_mask): Rename into ...\n+\t(arm_compute_save_core_reg_mask): This.\n+\t(thumb1_compute_save_reg_mask): Rename into ...\n+\t(thumb1_compute_save_core_reg_mask): This.\n+\t(arm_compute_save_reg0_reg12_mask): Adapt comment.\n+\t(arm_compute_frame_layout): Likewise.\n+\n 2017-06-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80974"}, {"sha": "42b0e867a18f915e49087ab815808c09318d1e3b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "patch": "@@ -130,7 +130,7 @@ static void push_minipool_fix (rtx_insn *, HOST_WIDE_INT, rtx *,\n static void arm_reorg (void);\n static void note_invalid_constants (rtx_insn *, HOST_WIDE_INT, int);\n static unsigned long arm_compute_save_reg0_reg12_mask (void);\n-static unsigned long arm_compute_save_reg_mask (void);\n+static unsigned long arm_compute_save_core_reg_mask (void);\n static unsigned long arm_isr_value (tree);\n static unsigned long arm_compute_func_type (void);\n static tree arm_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n@@ -19018,7 +19018,7 @@ output_ascii_pseudo_op (FILE *stream, const unsigned char *p, int len)\n        && reg >= FIRST_HI_REGNUM && reg <= LAST_HI_REGNUM))\n \n /* Compute the register save mask for registers 0 through 12\n-   inclusive.  This code is used by arm_compute_save_reg_mask.  */\n+   inclusive.  This code is used by arm_compute_save_core_reg_mask ().  */\n \n static unsigned long\n arm_compute_save_reg0_reg12_mask (void)\n@@ -19145,12 +19145,12 @@ arm_compute_static_chain_stack_bytes (void)\n   return 0;\n }\n \n-/* Compute a bit mask of which registers need to be\n+/* Compute a bit mask of which core registers need to be\n    saved on the stack for the current function.\n    This is used by arm_compute_frame_layout, which may add extra registers.  */\n \n static unsigned long\n-arm_compute_save_reg_mask (void)\n+arm_compute_save_core_reg_mask (void)\n {\n   unsigned int save_reg_mask = 0;\n   unsigned long func_type = arm_current_func_type ();\n@@ -19232,10 +19232,10 @@ arm_compute_save_reg_mask (void)\n   return save_reg_mask;\n }\n \n-/* Compute a bit mask of which registers need to be\n+/* Compute a bit mask of which core registers need to be\n    saved on the stack for the current function.  */\n static unsigned long\n-thumb1_compute_save_reg_mask (void)\n+thumb1_compute_save_core_reg_mask (void)\n {\n   unsigned long mask;\n   unsigned reg;\n@@ -20771,7 +20771,7 @@ any_sibcall_could_use_r3 (void)\n   eliminating some of the registers.\n \n   The values returned by this function must reflect the behavior\n-  of arm_expand_prologue() and arm_compute_save_reg_mask().\n+  of arm_expand_prologue () and arm_compute_save_core_reg_mask ().\n \n   The sign of the number returned reflects the direction of stack\n   growth, so the values are positive for all eliminations except\n@@ -20827,7 +20827,7 @@ arm_compute_frame_layout (void)\n     {\n       unsigned int regno;\n \n-      offsets->saved_regs_mask = arm_compute_save_reg_mask ();\n+      offsets->saved_regs_mask = arm_compute_save_core_reg_mask ();\n       core_saved = bit_count (offsets->saved_regs_mask) * 4;\n       saved = core_saved;\n \n@@ -20853,7 +20853,7 @@ arm_compute_frame_layout (void)\n     }\n   else /* TARGET_THUMB1 */\n     {\n-      offsets->saved_regs_mask = thumb1_compute_save_reg_mask ();\n+      offsets->saved_regs_mask = thumb1_compute_save_core_reg_mask ();\n       core_saved = bit_count (offsets->saved_regs_mask) * 4;\n       saved = core_saved;\n       if (TARGET_BACKTRACE)"}]}