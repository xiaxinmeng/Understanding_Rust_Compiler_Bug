{"sha": "e046a30ab14ee10d1d4e0cbc179199c754192270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0NmEzMGFiMTRlZTEwZDFkNGUwY2JjMTc5MTk5Yzc1NDE5MjI3MA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-01-26T18:45:29Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-01-26T18:45:29Z"}, "message": "i386.md (extendsfdf2, [...]): Emit constants provided by 80387 instructions in the destination mode.\n\n2006-01-26  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config/i386/i386.md (extendsfdf2, extendsfxf2, extenddfxf2): Emit\n\tconstants provided by 80387 instructions in the destination mode.\n\nFrom-SVN: r110264", "tree": {"sha": "cfa409dff5d2ffc8ab53e2260242847a376668f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa409dff5d2ffc8ab53e2260242847a376668f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e046a30ab14ee10d1d4e0cbc179199c754192270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e046a30ab14ee10d1d4e0cbc179199c754192270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e046a30ab14ee10d1d4e0cbc179199c754192270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e046a30ab14ee10d1d4e0cbc179199c754192270/comments", "author": null, "committer": null, "parents": [{"sha": "9cee8116904615365b56ebb8670cc7a6479595c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cee8116904615365b56ebb8670cc7a6479595c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cee8116904615365b56ebb8670cc7a6479595c4"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "de6584822a4f562a63dbce7e00da90c262f5e698", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e046a30ab14ee10d1d4e0cbc179199c754192270/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e046a30ab14ee10d1d4e0cbc179199c754192270/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e046a30ab14ee10d1d4e0cbc179199c754192270", "patch": "@@ -1,3 +1,8 @@\n+2006-01-26  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/i386/i386.md (extendsfdf2, extendsfxf2, extenddfxf2): Emit\n+\tconstants provided by 80387 instructions in the destination mode.\n+\n 2006-01-26  Richard Guenther  <rguenther@suse.de>\n             Andrew Pinski  <pinskia@physics.uc.edu>\n \n@@ -19,7 +24,7 @@\n \t(adjust_range_with_scev): Reject ranges from SCEV which are out\n \tof bounds for the type.\n \n-2005-01-26  Daniel Berlin  <dberlin@dberlin.org>\n+2006-01-26  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-alias.c (maybe_create_global_var): Change\n \tsubvar walking to an assertion that we don't have subvar'd variables.\n@@ -572,7 +577,7 @@\n \tmips-tdump.c (main), mips-tfile.c (main): Update copyright notice\n \tdates.\n \n-2005-01-21  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2006-01-21  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* df-scan.c (problem_SCAN): Added NULL reset function.\n \t(df_scan_reset_blocks): Added code to call reset block function\n@@ -658,11 +663,11 @@\n \t* c-common.c (empty_body_warning): Add (from c_finish_if_stmt).\n \tNow uses IS_EMPTY_STMT() instead of special NOP markers.\n \n-2005-01-20  Paul Brook  <paul@codesourcery.com>\n+2006-01-20  Paul Brook  <paul@codesourcery.com>\n \n \t* Makefile.in (lang_checks): Keep going if mkdir fails.\n \n-2005-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2006-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* df-scan.c (df_scan_free_bb_info): Added basic block parameter to\n \tbe able to clean out basic block when not necessary.\n@@ -689,7 +694,7 @@\n \tFixed to properly delete information if df is unused before\n \tcalling df_finish.\n \n-2005-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2006-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \tPR rtl-optimization/25799\n \t* df-problems.c (df_ru_confluence_n, df_rd_confluence_n):\n@@ -1878,7 +1883,7 @@\n \t* gcc.h (lang_specific_spec_functions): Remove.\n \t* gccspec.c (lang_specific_spec_functions): Remove.\n \n-2005-01-16  Paolo Bonzini  <bonzini@gnu.org>\n+2006-01-16  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* combine.c (record_value_for_reg): Invalidate registers\n \tif INSN is null.\n@@ -2132,7 +2137,7 @@\n \n \t* rtlanal.c (find_reg_note): Assert insn is not null.\n \n-2005-01-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2006-01-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* df-scan.c (df_hard_reg_init): Move declaration of i outside\n \tifdef.\n@@ -2186,7 +2191,7 @@\n \t* tree-cfg.c (init_empty_tree_cfg, build_tree_cfg, create_bb):\n \tLikewise.\n \n-2005-01-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2006-01-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* Makefile.in: Removed rotted odf.c entry.\n \n@@ -2282,7 +2287,7 @@\n \toptimizations.\n \t* doc/tm.texi (Misc): Document TARGET_MIN_DIVISIONS_FOR_RECIP_MUL.\n \n-2005-01-11  Danny Berlin <dberlin@dberlin.org>\n+2006-01-11  Danny Berlin <dberlin@dberlin.org>\n \t    Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* df.h (DF_SCAN, DF_RU, DF_RD, DF_LR, DF_UR, DF_UREC, DF_CHAIN,"}, {"sha": "39d542dd6cef093e0451be5aa756fd4bfdeda10d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e046a30ab14ee10d1d4e0cbc179199c754192270/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e046a30ab14ee10d1d4e0cbc179199c754192270/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e046a30ab14ee10d1d4e0cbc179199c754192270", "patch": "@@ -3521,7 +3521,17 @@\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-    operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n+    {\n+      if ((!TARGET_SSE2 || TARGET_MIX_SSE_I387)\n+\t  && standard_80387_constant_p (operands[1]) > 0)\n+\t{\n+\t  operands[1] = simplify_const_unary_operation\n+\t    (FLOAT_EXTEND, DFmode, operands[1], SFmode);\n+\t  emit_move_insn_1 (operands[0], operands[1]);\n+\t  DONE;\n+\t}\n+      operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n+    }\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_reg (SFmode, operands[1]);\n })\n@@ -3594,7 +3604,16 @@\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-    operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n+    {\n+      if (standard_80387_constant_p (operands[1]) > 0)\n+\t{\n+\t  operands[1] = simplify_const_unary_operation\n+\t    (FLOAT_EXTEND, XFmode, operands[1], SFmode);\n+\t  emit_move_insn_1 (operands[0], operands[1]);\n+\t  DONE;\n+\t}\n+      operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n+    }\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_reg (SFmode, operands[1]);\n })\n@@ -3633,7 +3652,16 @@\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-    operands[1] = validize_mem (force_const_mem (DFmode, operands[1]));\n+    {\n+      if (standard_80387_constant_p (operands[1]) > 0)\n+\t{\n+\t  operands[1] = simplify_const_unary_operation\n+\t    (FLOAT_EXTEND, XFmode, operands[1], DFmode);\n+\t  emit_move_insn_1 (operands[0], operands[1]);\n+\t  DONE;\n+\t}\n+      operands[1] = validize_mem (force_const_mem (DFmode, operands[1]));\n+    }\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_reg (DFmode, operands[1]);\n })"}]}