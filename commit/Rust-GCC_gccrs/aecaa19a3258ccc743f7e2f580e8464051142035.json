{"sha": "aecaa19a3258ccc743f7e2f580e8464051142035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjYWExOWEzMjU4Y2NjNzQzZjdlMmY1ODBlODQ2NDA1MTE0MjAzNQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-01-15T21:18:56Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2005-01-15T21:18:56Z"}, "message": "re PR objc/19321 (objc ignores volatile in argument types for messages)\n\n[gcc/objc/ChangeLog]\n2005-01-15  Ziemowit Laski  <zlaski@apple.com>\n\n        PR objc/19321\n        * objc-act.c (get_arg_type_list): Decay function arguments into\n        pointers.\n        (objc_push_parm): Likewise; bring PARM_DECL construction closer\n        in line with what the C front-end does.\n        (objc_get_parm_info): Call pushdecl() and finish_decl() on\n        each PARM_DECL, like the C front-end does.\n        (start_method_def): Remove redundant ARRAY_TYPE decay.\n        (objc_start_function): Bring closer in line with what the\n        C front-end does for functions.\n\n[gcc/testsuite/ChangeLog]\n2005-01-15  Ziemowit Laski  <zlaski@apple.com>\n\n        PR objc/19321\n        * objc.dg/func-ptr-2.m: New.\n        * objc.dg/volatile-1.m: New.\n\nFrom-SVN: r93706", "tree": {"sha": "bda74609612514a2886ed75fe5c48aaa996435cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda74609612514a2886ed75fe5c48aaa996435cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aecaa19a3258ccc743f7e2f580e8464051142035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecaa19a3258ccc743f7e2f580e8464051142035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aecaa19a3258ccc743f7e2f580e8464051142035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecaa19a3258ccc743f7e2f580e8464051142035/comments", "author": null, "committer": null, "parents": [{"sha": "a04b62b22011ed3558a8dcac07e53a85f8b4165d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04b62b22011ed3558a8dcac07e53a85f8b4165d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a04b62b22011ed3558a8dcac07e53a85f8b4165d"}], "stats": {"total": 109, "additions": 97, "deletions": 12}, "files": [{"sha": "77a62a1d22a9861ee1955977e8d2fa3b48af7bed", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=aecaa19a3258ccc743f7e2f580e8464051142035", "patch": "@@ -1,3 +1,16 @@\n+2005-01-15  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tPR objc/19321\n+\t* objc-act.c (get_arg_type_list): Decay function arguments into\n+\tpointers.\n+\t(objc_push_parm): Likewise; bring PARM_DECL construction closer\n+\tin line with what the C front-end does.\n+\t(objc_get_parm_info): Call pushdecl() and finish_decl() on\n+\teach PARM_DECL, like the C front-end does.\n+\t(start_method_def): Remove redundant ARRAY_TYPE decay.\n+\t(objc_start_function): Bring closer in line with what the\n+\tC front-end does for functions.\n+\n 2005-01-14  Mike Stump  <mrs@apple.com>\n \n \t* lang-specs.h (\"@objective-c\"): Use cc1obj when -E is used so"}, {"sha": "be21d08bdaba834fea25208c04878d515f40abac", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=aecaa19a3258ccc743f7e2f580e8464051142035", "patch": "@@ -5298,9 +5298,11 @@ get_arg_type_list (tree meth, int context, int superflag)\n     {\n       tree arg_type = TREE_VALUE (TREE_TYPE (akey));\n \n-      /* Decay arrays into pointers.  */\n+      /* Decay arrays and functions into pointers.  */\n       if (TREE_CODE (arg_type) == ARRAY_TYPE)\n \targ_type = build_pointer_type (TREE_TYPE (arg_type));\n+      else if (TREE_CODE (arg_type) == FUNCTION_TYPE)\n+\targ_type = build_pointer_type (arg_type);\n \n       chainon (arglist, build_tree_list (NULL_TREE, arg_type));\n     }\n@@ -7379,11 +7381,21 @@ static GTY(()) tree objc_parmlist = NULL_TREE;\n static void\n objc_push_parm (tree parm)\n {\n-  /* Convert array parameters of unknown size into pointers.  */\n-  if (TREE_CODE (TREE_TYPE (parm)) == ARRAY_TYPE\n-      && !TYPE_SIZE (TREE_TYPE (parm)))\n+  /* Decay arrays and functions into pointers.  */\n+  if (TREE_CODE (TREE_TYPE (parm)) == ARRAY_TYPE)\n     TREE_TYPE (parm) = build_pointer_type (TREE_TYPE (TREE_TYPE (parm)));\n+  else if (TREE_CODE (TREE_TYPE (parm)) == FUNCTION_TYPE)\n+    TREE_TYPE (parm) = build_pointer_type (TREE_TYPE (parm));\n \n+  DECL_ARG_TYPE_AS_WRITTEN (parm) = TREE_TYPE (parm);\n+  DECL_ARG_TYPE (parm) = c_type_promotes_to (TREE_TYPE (parm));\n+\n+  /* Record constancy and volatility.  */\n+  c_apply_type_quals_to_decl\n+  ((TYPE_READONLY (TREE_TYPE (parm)) ? TYPE_QUAL_CONST : 0)\n+   | (TYPE_RESTRICT (TREE_TYPE (parm)) ? TYPE_QUAL_RESTRICT : 0)\n+   | (TYPE_VOLATILE (TREE_TYPE (parm)) ? TYPE_QUAL_VOLATILE : 0), parm);\n+  \n   objc_parmlist = chainon (objc_parmlist, parm);\n }\n \n@@ -7415,7 +7427,8 @@ objc_get_parm_info (int have_ellipsis)\n       tree next = TREE_CHAIN (parm_info);\n \n       TREE_CHAIN (parm_info) = NULL_TREE; \n-      pushdecl (parm_info);\n+      parm_info = pushdecl (parm_info);\n+      finish_decl (parm_info, NULL_TREE, NULL_TREE);\n       parm_info = next;\n     }\n   arg_info = get_parm_info (have_ellipsis);\n@@ -7477,10 +7490,6 @@ start_method_def (tree method)\n     {\n       tree type = TREE_VALUE (TREE_TYPE (parmlist)), parm;\n \n-      /* Decay arrays into pointers.  */\n-      if (TREE_CODE (type) == ARRAY_TYPE)\n-\ttype = build_pointer_type (TREE_TYPE (type));\n-\n       parm = build_decl (PARM_DECL, KEYWORD_ARG_NAME (parmlist), type);\n       objc_push_parm (parm);\n       parmlist = TREE_CHAIN (parmlist);\n@@ -7619,24 +7628,26 @@ objc_start_function (tree name, tree type, tree attrs,\n \n #ifdef OBJCPLUS\n   DECL_ARGUMENTS (fndecl) = params;\n-#endif\n   DECL_INITIAL (fndecl) = error_mark_node;\n   DECL_EXTERNAL (fndecl) = 0;\n   TREE_STATIC (fndecl) = 1;\n-\n-#ifdef OBJCPLUS\n   retrofit_lang_decl (fndecl);\n   cplus_decl_attributes (&fndecl, attrs, 0);\n   start_preparsed_function (fndecl, attrs, /*flags=*/SF_DEFAULT);\n #else\n   decl_attributes (&fndecl, attrs, 0);\n   announce_function (fndecl);\n+  DECL_INITIAL (fndecl) = error_mark_node;\n+  DECL_EXTERNAL (fndecl) = 0;\n+  TREE_STATIC (fndecl) = 1;\n   current_function_decl = pushdecl (fndecl);\n   push_scope ();\n   declare_parm_level ();\n   DECL_RESULT (current_function_decl)\n     = build_decl (RESULT_DECL, NULL_TREE,\n \t\t  TREE_TYPE (TREE_TYPE (current_function_decl)));\n+  DECL_ARTIFICIAL (DECL_RESULT (current_function_decl)) = 1;\n+  DECL_IGNORED_P (DECL_RESULT (current_function_decl)) = 1;\n   start_fname_decls ();\n   store_parm_decls_from (params);\n #endif"}, {"sha": "9dec00bef42b0ef29d2a4c66b4c294303589e098", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aecaa19a3258ccc743f7e2f580e8464051142035", "patch": "@@ -1,3 +1,9 @@\n+2005-01-15  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tPR objc/19321\n+\t* objc.dg/func-ptr-2.m: New.\n+\t* objc.dg/volatile-1.m: New.\n+\n 2005-01-15  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/20040813-1.c: Add hppa*64*-*-* to no stabs list."}, {"sha": "625ce9fca92fcc13c70e81abf46163afe36bc484", "filename": "gcc/testsuite/objc.dg/func-ptr-2.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m?ref=aecaa19a3258ccc743f7e2f580e8464051142035", "patch": "@@ -0,0 +1,37 @@\n+/* Check if method parameters that are functions are gracefully decayed\n+   into pointers.  */\n+/* Contributed by Ziemowit Laski  <zlaski@apple.com>  */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+@interface Func: Object\n++ (int) processNumber:(int)a and:(int)b usingFunction:(int(int,int))func;\n+@end\n+\n+@implementation Func\n++ (int) processNumber:(int)a and:(int)b usingFunction:(int(int,int))func {\n+  return func (a, b);\n+}\n+@end\n+\n+static int my_computation(int a, int b) {\n+  return a * 2 + b * 3;\n+}\n+\n+static int processNumber(int a, int b, int func(int, int)) {\n+  return func(a, b);\n+}\n+\n+int main(void) {\n+  int result = processNumber (6, 8, my_computation);\n+  if (result != 36)\n+    abort ();\n+\n+  result = [Func processNumber:8 and:6 usingFunction:my_computation];\n+  if (result != 34)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "8b5381a9874c31fd3022483041ab8281cab86708", "filename": "gcc/testsuite/objc.dg/volatile-1.m", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Ftestsuite%2Fobjc.dg%2Fvolatile-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecaa19a3258ccc743f7e2f580e8464051142035/gcc%2Ftestsuite%2Fobjc.dg%2Fvolatile-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fvolatile-1.m?ref=aecaa19a3258ccc743f7e2f580e8464051142035", "patch": "@@ -0,0 +1,18 @@\n+/* Test for proper handling of volatile parameters in ObjC methods.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* Contributed by Ziemowit Laski  <zlaski@apple.com>  */\n+\n+@interface Test\n+-(void) test2: (volatile int) a;\n+@end\n+\n+@implementation Test\n+-(void) test2: (volatile int) a\n+{\n+  /* The following assignment should NOT be optimized away.  */\n+  a = 1;\n+}\n+@end\n+\n+/* { dg-final { scan-assembler \"li r\\[0-9\\]+,1\" { target powerpc*-*-darwin* } } } */"}]}