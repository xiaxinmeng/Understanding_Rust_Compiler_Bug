{"sha": "2f541799083b9fd95f1367cee2c73b599d39334d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1NDE3OTkwODNiOWZkOTVmMTM2N2NlZTJjNzNiNTk5ZDM5MzM0ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-07-06T09:38:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-07-06T09:38:46Z"}, "message": "cse.c (CSE_ADDRESS_COST): New macro, based on ADDRESS_COST, but dealing with ADDRESSOF.\n\n\t* cse.c (CSE_ADDRESS_COST): New macro, based on ADDRESS_COST, but\n\tdealing with ADDRESSOF.\n\t(find_best_addr): Use it.\n\nFrom-SVN: r20945", "tree": {"sha": "a8cf62fb8e899d9c1167f3358727184d8f81041d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8cf62fb8e899d9c1167f3358727184d8f81041d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f541799083b9fd95f1367cee2c73b599d39334d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f541799083b9fd95f1367cee2c73b599d39334d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f541799083b9fd95f1367cee2c73b599d39334d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f541799083b9fd95f1367cee2c73b599d39334d/comments", "author": null, "committer": null, "parents": [{"sha": "4fc8ff929a90c2f0d436ecff6c603d2027cf3c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc8ff929a90c2f0d436ecff6c603d2027cf3c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc8ff929a90c2f0d436ecff6c603d2027cf3c12"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "922b65a977300a460e40369da4d1a29277e7ea65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f541799083b9fd95f1367cee2c73b599d39334d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f541799083b9fd95f1367cee2c73b599d39334d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f541799083b9fd95f1367cee2c73b599d39334d", "patch": "@@ -1,3 +1,9 @@\n+Mon Jul  6 09:38:15 1998  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* cse.c (CSE_ADDRESS_COST): New macro, based on ADDRESS_COST, but \n+\tdealing with ADDRESSOF.\n+\t(find_best_addr): Use it. \n+\n Mon Jul  6 09:27:08 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha/vms.h (TRAMPOLINE_TEMPLATE): Revert last change."}, {"sha": "fd7b80bd8de2109bc09f43935a17d6ad15220888", "filename": "gcc/cse.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f541799083b9fd95f1367cee2c73b599d39334d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f541799083b9fd95f1367cee2c73b599d39334d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=2f541799083b9fd95f1367cee2c73b599d39334d", "patch": "@@ -497,6 +497,16 @@ struct table_elt\n \n #define REGNO_QTY_VALID_P(N) (reg_qty[N] != (N))\n \n+#ifdef ADDRESS_COST\n+/* The ADDRESS_COST macro does not deal with ADDRESSOF nodes.  But,\n+   during CSE, such nodes are present.  Using an ADDRESSOF node which\n+   refers to the address of a REG is a good thing because we can then\n+   turn (MEM (ADDRESSSOF (REG))) into just plain REG.  */\n+#define CSE_ADDRESS_COST(RTX)\t\t\t\t\t\\\n+  ((GET_CODE (RTX) == ADDRESSOF && REG_P (XEXP ((RTX), 0)))\t\\\n+   ? -1 : ADDRESS_COST(RTX))\n+#endif \n+\n static struct table_elt *table[NBUCKETS];\n \n /* Chain of `struct table_elt's made so far for this function\n@@ -2629,8 +2639,8 @@ find_best_addr (insn, loc)\n \n       if (1\n #ifdef ADDRESS_COST\n-\t  && (ADDRESS_COST (folded) < ADDRESS_COST (addr)\n-\t      || (ADDRESS_COST (folded) == ADDRESS_COST (addr)\n+\t  && (CSE_ADDRESS_COST (folded) < CSE_ADDRESS_COST (addr)\n+\t      || (CSE_ADDRESS_COST (folded) == CSE_ADDRESS_COST (addr)\n \t\t  && rtx_cost (folded, MEM) > rtx_cost (addr, MEM)))\n #else\n \t  && rtx_cost (folded, MEM) < rtx_cost (addr, MEM)\n@@ -2682,23 +2692,25 @@ find_best_addr (insn, loc)\n \n       while (found_better)\n \t{\n-\t  int best_addr_cost = ADDRESS_COST (*loc);\n+\t  int best_addr_cost = CSE_ADDRESS_COST (*loc);\n \t  int best_rtx_cost = (elt->cost + 1) >> 1;\n \t  struct table_elt *best_elt = elt; \n \n \t  found_better = 0;\n \t  for (p = elt->first_same_value; p; p = p->next_same_value)\n-\t    if (! p->flag\n-\t\t&& (GET_CODE (p->exp) == REG\n-\t\t    || exp_equiv_p (p->exp, p->exp, 1, 0))\n-\t\t&& (ADDRESS_COST (p->exp) < best_addr_cost\n-\t\t    || (ADDRESS_COST (p->exp) == best_addr_cost\n-\t\t\t&& (p->cost + 1) >> 1 > best_rtx_cost)))\n+\t    if (! p->flag)\n \t      {\n-\t\tfound_better = 1;\n-\t\tbest_addr_cost = ADDRESS_COST (p->exp);\n-\t\tbest_rtx_cost = (p->cost + 1) >> 1;\n-\t\tbest_elt = p;\n+\t\tif ((GET_CODE (p->exp) == REG\n+\t\t     || exp_equiv_p (p->exp, p->exp, 1, 0))\n+\t\t    && (CSE_ADDRESS_COST (p->exp) < best_addr_cost\n+\t\t\t|| (CSE_ADDRESS_COST (p->exp) == best_addr_cost\n+\t\t\t    && (p->cost + 1) >> 1 > best_rtx_cost)))\n+\t\t  {\n+\t\t    found_better = 1;\n+\t\t    best_addr_cost = CSE_ADDRESS_COST (p->exp);\n+\t\t    best_rtx_cost = (p->cost + 1) >> 1;\n+\t\t    best_elt = p;\n+\t\t  }\n \t      }\n \n \t  if (found_better)\n@@ -2750,7 +2762,7 @@ find_best_addr (insn, loc)\n \n       while (found_better)\n \t{\n-\t  int best_addr_cost = ADDRESS_COST (*loc);\n+\t  int best_addr_cost = CSE_ADDRESS_COST (*loc);\n \t  int best_rtx_cost = (COST (*loc) + 1) >> 1;\n \t  struct table_elt *best_elt = elt; \n \t  rtx best_rtx = *loc;\n@@ -2771,12 +2783,12 @@ find_best_addr (insn, loc)\n \t      {\n \t\trtx new = cse_gen_binary (GET_CODE (*loc), Pmode, p->exp, c);\n \n-\t\tif ((ADDRESS_COST (new) < best_addr_cost\n-\t\t    || (ADDRESS_COST (new) == best_addr_cost\n+\t\tif ((CSE_ADDRESS_COST (new) < best_addr_cost\n+\t\t    || (CSE_ADDRESS_COST (new) == best_addr_cost\n \t\t\t&& (COST (new) + 1) >> 1 > best_rtx_cost)))\n \t\t  {\n \t\t    found_better = 1;\n-\t\t    best_addr_cost = ADDRESS_COST (new);\n+\t\t    best_addr_cost = CSE_ADDRESS_COST (new);\n \t\t    best_rtx_cost = (COST (new) + 1) >> 1;\n \t\t    best_elt = p;\n \t\t    best_rtx = new;"}]}