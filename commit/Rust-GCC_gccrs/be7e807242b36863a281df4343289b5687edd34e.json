{"sha": "be7e807242b36863a281df4343289b5687edd34e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3ZTgwNzI0MmIzNjg2M2EyODFkZjQzNDMyODliNTY4N2VkZDM0ZQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2021-01-08T01:50:20Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2021-01-09T15:50:27Z"}, "message": "PDP11: Use a mode with `const_double_zero' expressions\n\nFor predictable semantics propagate the mode from operands referred by\nFP substitutions to the `const_double_zero' expressions used with the\nassociated condition code calculation, resulting in the following update\nto insn-emit.c code produced for the `pdp11-aout' target (with machine\ndescription line numbering change noise removed):\n\n@@ -1514,7 +1514,7 @@\n \tgen_rtx_COMPARE (CCmode,\n \tgen_rtx_ABS (DFmode,\n \toperand1),\n-\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n+\tCONST_DOUBLE_ATOF (\"0\", DFmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_ABS (DFmode,\n \tcopy_rtx (operand1)))));\n@@ -1555,7 +1555,7 @@\n \tgen_rtx_COMPARE (CCmode,\n \tgen_rtx_NEG (DFmode,\n \toperand1),\n-\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n+\tCONST_DOUBLE_ATOF (\"0\", DFmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_NEG (DFmode,\n \tcopy_rtx (operand1)))));\n@@ -1790,7 +1790,7 @@\n \tgen_rtx_MULT (DFmode,\n \toperand1,\n \toperand2),\n-\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n+\tCONST_DOUBLE_ATOF (\"0\", DFmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_MULT (DFmode,\n \tcopy_rtx (operand1),\n@@ -1942,7 +1942,7 @@\n \tgen_rtx_DIV (DFmode,\n \toperand1,\n \toperand2),\n-\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n+\tCONST_DOUBLE_ATOF (\"0\", DFmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_DIV (DFmode,\n \tcopy_rtx (operand1),\n\nProvide a new iterator to provide copies of FP substitutions across the\nFP modes supported as the substitutions now need to match the mode of\nthe operands.\n\n\tgcc/\n\t* config/pdp11/pdp11.md (PDPfp): New mode iterator.\n\t(fcc_cc, fcc_ccnz): Use it.  Add mode to `const_double_zero' and\n\toperands.", "tree": {"sha": "1267df963b0c7c4cc173b624c2d67dc3edd158e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1267df963b0c7c4cc173b624c2d67dc3edd158e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be7e807242b36863a281df4343289b5687edd34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7e807242b36863a281df4343289b5687edd34e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7e807242b36863a281df4343289b5687edd34e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7e807242b36863a281df4343289b5687edd34e/comments", "author": null, "committer": null, "parents": [{"sha": "859be2e44aceb3766e4517e827e2aad7c9711b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859be2e44aceb3766e4517e827e2aad7c9711b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859be2e44aceb3766e4517e827e2aad7c9711b4c"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "2a12c97da5954f1fd1404830ce813a4f13042933", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7e807242b36863a281df4343289b5687edd34e/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7e807242b36863a281df4343289b5687edd34e/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=be7e807242b36863a281df4343289b5687edd34e", "patch": "@@ -82,6 +82,8 @@\n \n (define_code_iterator SHF [ashift ashiftrt lshiftrt])\n \n+(define_mode_iterator PDPfp [SF DF])\n+\n ;; Substitution to turn a CC clobber into a CC setter.  We have four of\n ;; these: for CCmode vs. CCNZmode, and for CC_REGNUM vs. FCC_REGNUM.\n (define_subst \"cc_cc\"\n@@ -101,19 +103,19 @@\n    (set (match_dup 0) (match_dup 1))])\n \n (define_subst \"fcc_cc\"\n-  [(set (match_operand 0 \"\") (match_operand 1 \"\"))\n+  [(set (match_operand:PDPfp 0 \"\") (match_operand:PDPfp 1 \"\"))\n    (clobber (reg FCC_REGNUM))]\n   \"\"\n   [(set (reg:CC FCC_REGNUM)\n-\t(compare:CC (match_dup 1) (const_double_zero)))\n+\t(compare:CC (match_dup 1) (const_double_zero:PDPfp)))\n    (set (match_dup 0) (match_dup 1))])\n \n (define_subst \"fcc_ccnz\"\n-  [(set (match_operand 0 \"\") (match_operand 1 \"\"))\n+  [(set (match_operand:PDPfp 0 \"\") (match_operand:PDPfp 1 \"\"))\n    (clobber (reg FCC_REGNUM))]\n   \"\"\n   [(set (reg:CCNZ FCC_REGNUM)\n-\t(compare:CCNZ (match_dup 1) (const_double_zero)))\n+\t(compare:CCNZ (match_dup 1) (const_double_zero:PDPfp)))\n    (set (match_dup 0) (match_dup 1))])\n \n (define_subst_attr \"cc_cc\" \"cc_cc\" \"_nocc\" \"_cc\")"}]}