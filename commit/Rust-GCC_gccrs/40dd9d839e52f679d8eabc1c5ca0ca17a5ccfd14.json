{"sha": "40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14", "node_id": "C_kwDOANBUbNoAKDQwZGQ5ZDgzOWU1MmY2NzlkOGVhYmMxYzVjYTBjYTE3YTVjY2ZkMTQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-21T08:27:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-21T08:27:44Z"}, "message": "openmp: For default(none) ignore variables created by ubsan_create_data [PR64888]\n\nWe weren't ignoring the ubsan variables created by c-ubsan.c before gimplification\n(others are added later).  One way to fix this would be to introduce further\nUBSAN_ internal functions and lower it later (sanopt pass) like other ifns,\nthis patch instead recognizes those magic vars by name/name of type and DECL_ARTIFICIAL\nand TYPE_ARTIFICIAL.\n\n2021-10-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/64888\ngcc/c-family/\n\t* c-omp.c (c_omp_predefined_variable): Return true also for\n\tubsan_create_data created artificial variables.\ngcc/testsuite/\n\t* c-c++-common/ubsan/pr64888.c: New test.", "tree": {"sha": "cf28a9c3377ca7370842f1475794b2f021d036ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf28a9c3377ca7370842f1475794b2f021d036ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113860301f46d14a255bd947d18d36f917527230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113860301f46d14a255bd947d18d36f917527230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113860301f46d14a255bd947d18d36f917527230"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "5625be7a415f15cf6199eddd204afb9438500134", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14", "patch": "@@ -2860,13 +2860,44 @@ c_omp_predefined_variable (tree decl)\n {\n   if (VAR_P (decl)\n       && DECL_ARTIFICIAL (decl)\n-      && TREE_READONLY (decl)\n       && TREE_STATIC (decl)\n-      && DECL_NAME (decl)\n-      && (DECL_NAME (decl) == ridpointers[RID_C99_FUNCTION_NAME]\n-\t  || DECL_NAME (decl) == ridpointers[RID_FUNCTION_NAME]\n-\t  || DECL_NAME (decl) == ridpointers[RID_PRETTY_FUNCTION_NAME]))\n-    return true;\n+      && DECL_NAME (decl))\n+    {\n+      if (TREE_READONLY (decl)\n+\t  && (DECL_NAME (decl) == ridpointers[RID_C99_FUNCTION_NAME]\n+\t      || DECL_NAME (decl) == ridpointers[RID_FUNCTION_NAME]\n+\t      || DECL_NAME (decl) == ridpointers[RID_PRETTY_FUNCTION_NAME]))\n+\treturn true;\n+      /* For UBSan handle the same also ubsan_create_data created\n+\t variables.  There is no magic flag for those, but user variables\n+\t shouldn't be DECL_ARTIFICIAL or have TYPE_ARTIFICIAL type with\n+\t such names.  */\n+      if ((flag_sanitize & (SANITIZE_UNDEFINED\n+\t\t\t    | SANITIZE_UNDEFINED_NONDEFAULT)) != 0\n+\t  && DECL_IGNORED_P (decl)\n+\t  && !TREE_READONLY (decl)\n+\t  && TREE_CODE (DECL_NAME (decl)) == IDENTIFIER_NODE\n+\t  && TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n+\t  && TYPE_ARTIFICIAL (TREE_TYPE (decl))\n+\t  && TYPE_NAME (TREE_TYPE (decl))\n+\t  && TREE_CODE (TYPE_NAME (TREE_TYPE (decl))) == TYPE_DECL\n+\t  && DECL_NAME (TYPE_NAME (TREE_TYPE (decl)))\n+\t  && (TREE_CODE (DECL_NAME (TYPE_NAME (TREE_TYPE (decl))))\n+\t      == IDENTIFIER_NODE))\n+\t{\n+\t  tree id1 = DECL_NAME (decl);\n+\t  tree id2 = DECL_NAME (TYPE_NAME (TREE_TYPE (decl)));\n+\t  if (IDENTIFIER_LENGTH (id1) >= sizeof (\"ubsan_data\") - 1\n+\t      && IDENTIFIER_LENGTH (id2) >= sizeof (\"__ubsan__data\")\n+\t      && !memcmp (IDENTIFIER_POINTER (id2), \"__ubsan_\",\n+\t\t\t  sizeof (\"__ubsan_\") - 1)\n+\t      && !memcmp (IDENTIFIER_POINTER (id2) + IDENTIFIER_LENGTH (id2)\n+\t\t\t  - sizeof (\"_data\") + 1, \"_data\",\n+\t\t\t  sizeof (\"_data\") - 1)\n+\t      && strstr (IDENTIFIER_POINTER (id1), \"ubsan_data\"))\n+\t    return true;\n+\t}\n+    }\n   return false;\n }\n "}, {"sha": "6319c2fecedf33dbe5752e8cf35577a75b7fbf25", "filename": "gcc/testsuite/c-c++-common/ubsan/pr64888.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64888.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64888.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64888.c?ref=40dd9d839e52f679d8eabc1c5ca0ca17a5ccfd14", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/64888 */\n+/* { dg-do compile { target fopenmp } } */\n+/* { dg-options \"-fopenmp -fsanitize=undefined\" } */\n+\n+int a, b;\n+\n+void\n+foo ()\n+{\n+  int c;\n+#pragma omp parallel default (none) shared (a, b) private (c)\n+  {\n+    c = a / b;\t/* { dg-bogus \"not specified in enclosing\" } */\n+    (void) c;\n+  }\n+#pragma omp task default (none) shared (a, b) private (c)\n+  {\n+    c = a << b;\t/* { dg-bogus \"not specified in enclosing\" } */\n+    (void) c;\n+  }\n+#pragma omp teams default (none) shared (a, b)\n+  {\n+    int d[a];\t/* { dg-bogus \"not specified in enclosing\" } */\n+    d[0] = 0;\n+    (void) d[0];\n+  }\n+}"}]}