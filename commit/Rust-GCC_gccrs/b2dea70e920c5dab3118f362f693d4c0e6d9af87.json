{"sha": "b2dea70e920c5dab3118f362f693d4c0e6d9af87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJkZWE3MGU5MjBjNWRhYjMxMThmMzYyZjY5M2Q0YzBlNmQ5YWY4Nw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2020-08-25T19:08:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-22T12:11:27Z"}, "message": "[Ada] ACATS 4.1H - B853001 - missed errors for renamed limited\n\ngcc/ada/\n\n\t* einfo.ads (Has_Limited_View): New synthesized attribute.\n\t* einfo.adb (Has_Limited_View): New synthesized attribute.\n\t(Set_Limited_View): Complete assertion.\n\t* sem_ch10.ads (Is_Visible_Through_Renamings): Make this routine\n\tpublic to invoke it from Find_Expanded_Name and avoid reporting\n\tspurious errors on renamings of limited-with packages.\n\t(Load_Needed_Body): Moved to have this spec alphabetically\n\tordered.\n\t* sem_ch10.adb (Is_Visible_Through_Renamings): Moved to library\n\tlevel.\n\t(Is_Limited_Withed_Unit): New subprogram.\n\t* sem_ch3.adb (Access_Type_Declaration): Adding protection to\n\tavoid reading attribute Entity() when not available.\n\t* sem_ch8.adb (Analyze_Package_Renaming): Report error on\n\trenamed package not visible through context clauses.\n\t(Find_Expanded_Name): Report error on renamed package not\n\tvisible through context clauses; handle special case where the\n\tprefix is a renaming of a (now visible) shadow package.", "tree": {"sha": "3ad25c33fd88b935e65989ed1119da895b503417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ad25c33fd88b935e65989ed1119da895b503417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2dea70e920c5dab3118f362f693d4c0e6d9af87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2dea70e920c5dab3118f362f693d4c0e6d9af87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2dea70e920c5dab3118f362f693d4c0e6d9af87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2dea70e920c5dab3118f362f693d4c0e6d9af87/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c57fcd0a50c9f96ee108c9299eed22e639f354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c57fcd0a50c9f96ee108c9299eed22e639f354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c57fcd0a50c9f96ee108c9299eed22e639f354"}], "stats": {"total": 350, "additions": 229, "deletions": 121}, "files": [{"sha": "0c88c883ac34356628bc05dd04184ad9ebad7994", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=b2dea70e920c5dab3118f362f693d4c0e6d9af87", "patch": "@@ -6071,7 +6071,8 @@ package body Einfo is\n \n    procedure Set_Limited_View (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Package);\n+      pragma Assert (Ekind (Id) = E_Package\n+        and then not Is_Generic_Instance (Id));\n       Set_Node23 (Id, V);\n    end Set_Limited_View;\n \n@@ -7846,6 +7847,17 @@ package body Einfo is\n       return Has_Own_Invariants (Id) or else Has_Inherited_Invariants (Id);\n    end Has_Invariants;\n \n+   --------------------------\n+   -- Has_Limited_View --\n+   --------------------------\n+\n+   function Has_Limited_View (Id : E) return B is\n+   begin\n+      return Ekind (Id) = E_Package\n+        and then not Is_Generic_Instance (Id)\n+        and then Present (Limited_View (Id));\n+   end Has_Limited_View;\n+\n    --------------------------\n    -- Has_Non_Limited_View --\n    --------------------------"}, {"sha": "520d506dc6acbd4f9676563eff2af274cb46af1e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b2dea70e920c5dab3118f362f693d4c0e6d9af87", "patch": "@@ -1785,6 +1785,10 @@ package Einfo is\n --       invariant of its own or inherits at least one class-wide invariant\n --       from a parent type or an interface.\n \n+--    Has_Limited_View (synth)\n+--       Defined in all entities. True for non-generic package entities that\n+--       are non-instances and their Limited_View attribute is present.\n+\n --    Has_Loop_Entry_Attributes (Flag260)\n --       Defined in E_Loop entities. Set when the loop is subject to at least\n --       one attribute 'Loop_Entry. The flag also implies that the loop has\n@@ -6484,6 +6488,7 @@ package Einfo is\n    --    Has_Null_Abstract_State             (synth)\n    --    Is_Elaboration_Target               (synth)\n    --    Is_Wrapper_Package                  (synth)    (non-generic case only)\n+   --    Has_Limited_View                    (synth)    (non-generic case only)\n    --    Scope_Depth                         (synth)\n \n    --  E_Package_Body\n@@ -7675,6 +7680,7 @@ package Einfo is\n    function Has_Foreign_Convention              (Id : E) return B;\n    function Has_Interrupt_Handler               (Id : E) return B;\n    function Has_Invariants                      (Id : E) return B;\n+   function Has_Limited_View                    (Id : E) return B;\n    function Has_Non_Limited_View                (Id : E) return B;\n    function Has_Non_Null_Abstract_State         (Id : E) return B;\n    function Has_Non_Null_Visible_Refinement     (Id : E) return B;\n@@ -9207,6 +9213,7 @@ package Einfo is\n    pragma Inline (Base_Type);\n    pragma Inline (Float_Rep);\n    pragma Inline (Has_Foreign_Convention);\n+   pragma Inline (Has_Limited_View);\n    pragma Inline (Has_Non_Limited_View);\n    pragma Inline (Is_Base_Type);\n    pragma Inline (Is_Boolean_Type);"}, {"sha": "0bad136d3f2e876612a3477d1af1f4e14e0d8c9d", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 143, "deletions": 107, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=b2dea70e920c5dab3118f362f693d4c0e6d9af87", "patch": "@@ -4480,10 +4480,6 @@ package body Sem_Ch10 is\n       --  Determine whether any package in the ancestor chain starting with\n       --  C_Unit has a limited with clause for package Pack.\n \n-      function Is_Visible_Through_Renamings (P : Entity_Id) return Boolean;\n-      --  Check if some package installed though normal with-clauses has a\n-      --  renaming declaration of package P. AARM 10.1.2(21/2).\n-\n       -------------------------\n       -- Check_Body_Required --\n       -------------------------\n@@ -4813,108 +4809,6 @@ package body Sem_Ch10 is\n          return False;\n       end Has_Limited_With_Clause;\n \n-      ----------------------------------\n-      -- Is_Visible_Through_Renamings --\n-      ----------------------------------\n-\n-      function Is_Visible_Through_Renamings (P : Entity_Id) return Boolean is\n-         Kind     : constant Node_Kind :=\n-                      Nkind (Unit (Cunit (Current_Sem_Unit)));\n-         Aux_Unit : Node_Id;\n-         Item     : Node_Id;\n-         Decl     : Entity_Id;\n-\n-      begin\n-         --  Example of the error detected by this subprogram:\n-\n-         --  package P is\n-         --    type T is ...\n-         --  end P;\n-\n-         --  with P;\n-         --  package Q is\n-         --     package Ren_P renames P;\n-         --  end Q;\n-\n-         --  with Q;\n-         --  package R is ...\n-\n-         --  limited with P; -- ERROR\n-         --  package R.C is ...\n-\n-         Aux_Unit := Cunit (Current_Sem_Unit);\n-\n-         loop\n-            Item := First (Context_Items (Aux_Unit));\n-            while Present (Item) loop\n-               if Nkind (Item) = N_With_Clause\n-                 and then not Limited_Present (Item)\n-                 and then Nkind (Unit (Library_Unit (Item))) =\n-                                                  N_Package_Declaration\n-               then\n-                  Decl :=\n-                    First (Visible_Declarations\n-                            (Specification (Unit (Library_Unit (Item)))));\n-                  while Present (Decl) loop\n-                     if Nkind (Decl) = N_Package_Renaming_Declaration\n-                       and then Entity (Name (Decl)) = P\n-                     then\n-                        --  Generate the error message only if the current unit\n-                        --  is a package declaration; in case of subprogram\n-                        --  bodies and package bodies we just return True to\n-                        --  indicate that the limited view must not be\n-                        --  installed.\n-\n-                        if Kind = N_Package_Declaration then\n-                           Error_Msg_N\n-                             (\"simultaneous visibility of the limited and \" &\n-                              \"unlimited views not allowed\", N);\n-                           Error_Msg_Sloc := Sloc (Item);\n-                           Error_Msg_NE\n-                             (\"\\\\  unlimited view of & visible through the \" &\n-                              \"context clause #\", N, P);\n-                           Error_Msg_Sloc := Sloc (Decl);\n-                           Error_Msg_NE (\"\\\\  and the renaming #\", N, P);\n-                        end if;\n-\n-                        return True;\n-                     end if;\n-\n-                     Next (Decl);\n-                  end loop;\n-               end if;\n-\n-               Next (Item);\n-            end loop;\n-\n-            --  If it is a body not acting as spec, follow pointer to the\n-            --  corresponding spec, otherwise follow pointer to parent spec.\n-\n-            if Present (Library_Unit (Aux_Unit))\n-              and then Nkind (Unit (Aux_Unit)) in\n-                         N_Package_Body | N_Subprogram_Body\n-            then\n-               if Aux_Unit = Library_Unit (Aux_Unit) then\n-\n-                  --  Aux_Unit is a body that acts as a spec. Clause has\n-                  --  already been flagged as illegal.\n-\n-                  return False;\n-\n-               else\n-                  Aux_Unit := Library_Unit (Aux_Unit);\n-               end if;\n-\n-            else\n-               Aux_Unit := Parent_Spec (Unit (Aux_Unit));\n-            end if;\n-\n-            exit when No (Aux_Unit);\n-         end loop;\n-\n-         return False;\n-      end Is_Visible_Through_Renamings;\n-\n    --  Start of processing for Install_Limited_With_Clause\n \n    begin\n@@ -4952,7 +4846,7 @@ package body Sem_Ch10 is\n       --  Do not install the limited-view if the full-view is already visible\n       --  through renaming declarations.\n \n-      if Is_Visible_Through_Renamings (P) then\n+      if Is_Visible_Through_Renamings (P, N) then\n          return;\n       end if;\n \n@@ -5552,6 +5446,148 @@ package body Sem_Ch10 is\n       end if;\n    end Is_Ancestor_Unit;\n \n+   ----------------------------------\n+   -- Is_Visible_Through_Renamings --\n+   ----------------------------------\n+\n+   function Is_Visible_Through_Renamings\n+     (P          : Entity_Id;\n+      Error_Node : Node_Id := Empty) return Boolean\n+   is\n+      function Is_Limited_Withed_Unit\n+        (Lib_Unit : Node_Id;\n+         Pkg_Ent  : Entity_Id) return Boolean;\n+      --  Return True if Pkg_Ent is a limited-withed package of the given\n+      --  library unit.\n+\n+      ----------------------------\n+      -- Is_Limited_Withed_Unit --\n+      ----------------------------\n+\n+      function Is_Limited_Withed_Unit\n+        (Lib_Unit : Node_Id;\n+         Pkg_Ent  : Entity_Id) return Boolean\n+      is\n+         Item : Node_Id := First (Context_Items (Lib_Unit));\n+\n+      begin\n+         while Present (Item) loop\n+            if Nkind (Item) = N_With_Clause\n+              and then Limited_Present (Item)\n+              and then Entity (Name (Item)) = Pkg_Ent\n+            then\n+               return True;\n+            end if;\n+\n+            Next (Item);\n+         end loop;\n+\n+         return False;\n+      end Is_Limited_Withed_Unit;\n+\n+      --  Local variables\n+\n+      Kind     : constant Node_Kind := Nkind (Unit (Cunit (Current_Sem_Unit)));\n+      Aux_Unit : Node_Id;\n+      Item     : Node_Id;\n+      Decl     : Entity_Id;\n+\n+   begin\n+      --  Example of the error detected by this subprogram:\n+\n+      --  package P is\n+      --    type T is ...\n+      --  end P;\n+\n+      --  with P;\n+      --  package Q is\n+      --     package Ren_P renames P;\n+      --  end Q;\n+\n+      --  with Q;\n+      --  package R is ...\n+\n+      --  limited with P; -- ERROR\n+      --  package R.C is ...\n+\n+      Aux_Unit := Cunit (Current_Sem_Unit);\n+\n+      loop\n+         Item := First (Context_Items (Aux_Unit));\n+         while Present (Item) loop\n+            if Nkind (Item) = N_With_Clause\n+              and then not Limited_Present (Item)\n+              and then Nkind (Unit (Library_Unit (Item))) =\n+                                               N_Package_Declaration\n+            then\n+               Decl :=\n+                 First (Visible_Declarations\n+                         (Specification (Unit (Library_Unit (Item)))));\n+               while Present (Decl) loop\n+                  if Nkind (Decl) = N_Package_Renaming_Declaration\n+                    and then Entity (Name (Decl)) = P\n+                    and then not Is_Limited_Withed_Unit\n+                                   (Lib_Unit => Library_Unit (Item),\n+                                    Pkg_Ent  => Entity (Name (Decl)))\n+                  then\n+                     --  Generate the error message only if the current unit\n+                     --  is a package declaration; in case of subprogram\n+                     --  bodies and package bodies we just return True to\n+                     --  indicate that the limited view must not be\n+                     --  installed.\n+\n+                     if Kind = N_Package_Declaration\n+                       and then Present (Error_Node)\n+                     then\n+                        Error_Msg_N\n+                          (\"simultaneous visibility of the limited and \" &\n+                           \"unlimited views not allowed\", Error_Node);\n+                        Error_Msg_Sloc := Sloc (Item);\n+                        Error_Msg_NE\n+                          (\"\\\\  unlimited view of & visible through the \" &\n+                           \"context clause #\", Error_Node, P);\n+                        Error_Msg_Sloc := Sloc (Decl);\n+                        Error_Msg_NE (\"\\\\  and the renaming #\", Error_Node, P);\n+                     end if;\n+\n+                     return True;\n+                  end if;\n+\n+                  Next (Decl);\n+               end loop;\n+            end if;\n+\n+            Next (Item);\n+         end loop;\n+\n+         --  If it is a body not acting as spec, follow pointer to the\n+         --  corresponding spec, otherwise follow pointer to parent spec.\n+\n+         if Present (Library_Unit (Aux_Unit))\n+           and then Nkind (Unit (Aux_Unit)) in\n+                      N_Package_Body | N_Subprogram_Body\n+         then\n+            if Aux_Unit = Library_Unit (Aux_Unit) then\n+\n+               --  Aux_Unit is a body that acts as a spec. Clause has\n+               --  already been flagged as illegal.\n+\n+               return False;\n+\n+            else\n+               Aux_Unit := Library_Unit (Aux_Unit);\n+            end if;\n+\n+         else\n+            Aux_Unit := Parent_Spec (Unit (Aux_Unit));\n+         end if;\n+\n+         exit when No (Aux_Unit);\n+      end loop;\n+\n+      return False;\n+   end Is_Visible_Through_Renamings;\n+\n    -----------------------\n    -- Load_Needed_Body --\n    -----------------------"}, {"sha": "b0946a4054799d8b638dfc7bded4bf000727022b", "filename": "gcc/ada/sem_ch10.ads", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch10.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch10.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.ads?ref=b2dea70e920c5dab3118f362f693d4c0e6d9af87", "patch": "@@ -51,6 +51,25 @@ package Sem_Ch10 is\n    --  view, determine whether the package where T resides is imported through\n    --  a regular with clause in the current package body.\n \n+   function Is_Visible_Through_Renamings\n+     (P          : Entity_Id;\n+      Error_Node : Node_Id := Empty) return Boolean;\n+   --  Check if some package installed though normal with-clauses has a\n+   --  renaming declaration of package P. AARM 10.1.2(21/2). Errors are\n+   --  reported on Error_Node (if present); otherwise no error is reported.\n+\n+   procedure Load_Needed_Body\n+     (N          : Node_Id;\n+      OK         : out Boolean;\n+      Do_Analyze : Boolean := True);\n+   --  Load and analyze the body of a context unit that is generic, or that\n+   --  contains generic units or inlined units. The body becomes part of the\n+   --  semantic dependency set of the unit that needs it. The returned result\n+   --  in OK is True if the load is successful, and False if the requested file\n+   --  cannot be found. If the flag Do_Analyze is false, the unit is loaded and\n+   --  parsed only. This allows a selective analysis in some inlining cases\n+   --  where a full analysis would lead so circularities in the back-end.\n+\n    procedure Remove_Context (N : Node_Id);\n    --  Removes the entities from the context clause of the given compilation\n    --  unit from the visibility chains. This is done on exit from a unit as\n@@ -66,16 +85,4 @@ package Sem_Ch10 is\n    --  rule imposes extra steps in order to install/remove the private_with\n    --  clauses of an enclosing unit.\n \n-   procedure Load_Needed_Body\n-     (N          : Node_Id;\n-      OK         : out Boolean;\n-      Do_Analyze : Boolean := True);\n-   --  Load and analyze the body of a context unit that is generic, or that\n-   --  contains generic units or inlined units. The body becomes part of the\n-   --  semantic dependency set of the unit that needs it. The returned result\n-   --  in OK is True if the load is successful, and False if the requested file\n-   --  cannot be found. If the flag Do_Analyze is false, the unit is loaded and\n-   --  parsed only. This allows a selective analysis in some inlining cases\n-   --  where a full analysis would lead so circularities in the back-end.\n-\n end Sem_Ch10;"}, {"sha": "cfef7c7ad48e16ce2f36f428848631c7a7fab476", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b2dea70e920c5dab3118f362f693d4c0e6d9af87", "patch": "@@ -1329,7 +1329,8 @@ package body Sem_Ch3 is\n       if Nkind (S) /= N_Subtype_Indication then\n          Analyze (S);\n \n-         if Present (Entity (S))\n+         if Nkind (S) in N_Has_Entity\n+           and then Present (Entity (S))\n            and then Ekind (Root_Type (Entity (S))) = E_Incomplete_Type\n          then\n             Set_Directly_Designated_Type (T, Entity (S));"}, {"sha": "3bdce445ffa849d5259baad550590aa45bc0641a", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2dea70e920c5dab3118f362f693d4c0e6d9af87/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=b2dea70e920c5dab3118f362f693d4c0e6d9af87", "patch": "@@ -52,6 +52,7 @@ with Sem_Cat;  use Sem_Cat;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch6;  use Sem_Ch6;\n+with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch12; use Sem_Ch12;\n with Sem_Ch13; use Sem_Ch13;\n with Sem_Dim;  use Sem_Dim;\n@@ -1544,6 +1545,21 @@ package body Sem_Ch8 is\n          Set_Ekind (New_P, E_Package);\n          Set_Etype (New_P, Standard_Void_Type);\n \n+      elsif Present (Renamed_Entity (Old_P))\n+        and then (From_Limited_With (Renamed_Entity (Old_P))\n+                    or else Has_Limited_View (Renamed_Entity (Old_P)))\n+        and then not\n+          Unit_Is_Visible (Cunit (Get_Source_Unit (Renamed_Entity (Old_P))))\n+      then\n+         Error_Msg_NE\n+           (\"renaming of limited view of package & not usable in this context\"\n+            & \" (RM 8.5.3(3.1/2))\", Name (N), Renamed_Entity (Old_P));\n+\n+         --  Set basic attributes to minimize cascaded errors\n+\n+         Set_Ekind (New_P, E_Package);\n+         Set_Etype (New_P, Standard_Void_Type);\n+\n       --  Here for OK package renaming\n \n       else\n@@ -6290,6 +6306,22 @@ package body Sem_Ch8 is\n       then\n          P_Name := Renamed_Object (P_Name);\n \n+         if From_Limited_With (P_Name)\n+           and then not Unit_Is_Visible (Cunit (Get_Source_Unit (P_Name)))\n+         then\n+            Error_Msg_NE\n+              (\"renaming of limited view of package & not usable in this\"\n+               & \" context (RM 8.5.3(3.1/2))\", Prefix (N), P_Name);\n+\n+         elsif Has_Limited_View (P_Name)\n+           and then not Unit_Is_Visible (Cunit (Get_Source_Unit (P_Name)))\n+           and then not Is_Visible_Through_Renamings (P_Name)\n+         then\n+            Error_Msg_NE\n+              (\"renaming of limited view of package & not usable in this\"\n+               & \" context (RM 8.5.3(3.1/2))\", Prefix (N), P_Name);\n+         end if;\n+\n          --  Rewrite node with entity field pointing to renamed object\n \n          Rewrite (Prefix (N), New_Copy (Prefix (N)));\n@@ -6355,6 +6387,19 @@ package body Sem_Ch8 is\n                Candidate        := Get_Full_View (Non_Limited_View (Id));\n                Is_New_Candidate := True;\n \n+            --  Handle special case where the prefix is a renaming of a shadow\n+            --  package which is visible. Required to avoid reporting spurious\n+            --  errors.\n+\n+            elsif Ekind (P_Name) = E_Package\n+              and then From_Limited_With (P_Name)\n+              and then not From_Limited_With (Id)\n+              and then Sloc (Scope (Id)) = Sloc (P_Name)\n+              and then Unit_Is_Visible (Cunit (Get_Source_Unit (P_Name)))\n+            then\n+               Candidate        := Get_Full_View (Id);\n+               Is_New_Candidate := True;\n+\n             --  An unusual case arises with a fully qualified name for an\n             --  entity local to a generic child unit package, within an\n             --  instantiation of that package. The name of the unit now"}]}