{"sha": "9734ebafb946f742faa6217ed74101a7237559a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczNGViYWZiOTQ2Zjc0MmZhYTYyMTdlZDc0MTAxYTcyMzc1NTlhOA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-06-02T23:41:12Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-06-02T23:41:12Z"}, "message": "fold-const.c (fold_unary): Ensure folded expressions are type correct.\n\n\n\t* fold-const.c (fold_unary) <CONJ_EXPR>: Ensure folded expressions\n\tare type correct.  Clean-up.\n\t<REALPART_EXPR>: Likewise.  Optimize creal(~z) as creal(z).\n\t<IMAGPART_EXPR>: Likewise.  Optimize cimag(~z) as -cimag(z).\n\nFrom-SVN: r114330", "tree": {"sha": "22f6b82e122dd9c6f89ed551047002cdf2f5abff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22f6b82e122dd9c6f89ed551047002cdf2f5abff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9734ebafb946f742faa6217ed74101a7237559a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9734ebafb946f742faa6217ed74101a7237559a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9734ebafb946f742faa6217ed74101a7237559a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9734ebafb946f742faa6217ed74101a7237559a8/comments", "author": null, "committer": null, "parents": [{"sha": "8659e538c5782559a73228b9c04e1d44a0f21d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8659e538c5782559a73228b9c04e1d44a0f21d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8659e538c5782559a73228b9c04e1d44a0f21d6f"}], "stats": {"total": 96, "additions": 62, "deletions": 34}, "files": [{"sha": "329edba0815eff3c8527751453cd95c2a1370bf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9734ebafb946f742faa6217ed74101a7237559a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9734ebafb946f742faa6217ed74101a7237559a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9734ebafb946f742faa6217ed74101a7237559a8", "patch": "@@ -1,3 +1,10 @@\n+2006-06-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_unary) <CONJ_EXPR>: Ensure folded expressions\n+\tare type correct.  Clean-up.\n+\t<REALPART_EXPR>: Likewise.  Optimize creal(~z) as creal(z).\n+\t<IMAGPART_EXPR>: Likewise.  Optimize cimag(~z) as -cimag(z).\n+\n 2006-06-01  DJ Delorie  <dj@redhat.com>\n \n \t* config/v850/v850.h (ASM_OUTPUT_ADDR_DIFF_ELT): Disabled the"}, {"sha": "7930bb454d4ed5a611b52b354e9aba446ace3fad", "filename": "gcc/fold-const.c", "status": "modified", "additions": 55, "deletions": 34, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9734ebafb946f742faa6217ed74101a7237559a8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9734ebafb946f742faa6217ed74101a7237559a8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9734ebafb946f742faa6217ed74101a7237559a8", "patch": "@@ -7548,21 +7548,22 @@ fold_unary (enum tree_code code, tree type, tree op0)\n     case CONJ_EXPR:\n       if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n \treturn fold_convert (type, arg0);\n-      else if (TREE_CODE (arg0) == COMPLEX_EXPR)\n-\treturn build2 (COMPLEX_EXPR, type,\n-\t\t       TREE_OPERAND (arg0, 0),\n-\t\t       negate_expr (TREE_OPERAND (arg0, 1)));\n-      else if (TREE_CODE (arg0) == COMPLEX_CST)\n-\treturn build_complex (type, TREE_REALPART (arg0),\n-\t\t\t      negate_expr (TREE_IMAGPART (arg0)));\n-      else if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n-\treturn fold_build2 (TREE_CODE (arg0), type,\n-\t\t\t    fold_build1 (CONJ_EXPR, type,\n-\t\t\t\t\t TREE_OPERAND (arg0, 0)),\n-\t\t\t    fold_build1 (CONJ_EXPR, type,\n-\t\t\t\t\t TREE_OPERAND (arg0, 1)));\n-      else if (TREE_CODE (arg0) == CONJ_EXPR)\n-\treturn TREE_OPERAND (arg0, 0);\n+      if (TREE_CODE (arg0) == COMPLEX_EXPR)\n+\t{\n+\t  tree itype = TREE_TYPE (type);\n+\t  tree rpart = fold_convert (itype, TREE_OPERAND (arg0, 0));\n+\t  tree ipart = fold_convert (itype, TREE_OPERAND (arg0, 1));\n+\t  return fold_build2 (COMPLEX_EXPR, type, rpart, negate_expr (ipart));\n+\t}\n+      if (TREE_CODE (arg0) == COMPLEX_CST)\n+\t{\n+\t  tree itype = TREE_TYPE (type);\n+\t  tree rpart = fold_convert (itype, TREE_REALPART (arg0));\n+\t  tree ipart = fold_convert (itype, TREE_IMAGPART (arg0));\n+\t  return build_complex (type, rpart, negate_expr (ipart));\n+\t}\n+      if (TREE_CODE (arg0) == CONJ_EXPR)\n+\treturn fold_convert (type, TREE_OPERAND (arg0, 0));\n       return NULL_TREE;\n \n     case BIT_NOT_EXPR:\n@@ -7614,34 +7615,54 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \n     case REALPART_EXPR:\n       if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n-\treturn NULL_TREE;\n-      else if (TREE_CODE (arg0) == COMPLEX_EXPR)\n+\treturn fold_convert (type, arg0);\n+      if (TREE_CODE (arg0) == COMPLEX_EXPR)\n \treturn omit_one_operand (type, TREE_OPERAND (arg0, 0),\n \t\t\t\t TREE_OPERAND (arg0, 1));\n-      else if (TREE_CODE (arg0) == COMPLEX_CST)\n-\treturn TREE_REALPART (arg0);\n-      else if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n-\treturn fold_build2 (TREE_CODE (arg0), type,\n-\t\t\t    fold_build1 (REALPART_EXPR, type,\n-\t\t\t\t\t TREE_OPERAND (arg0, 0)),\n-\t\t\t    fold_build1 (REALPART_EXPR, type,\n-\t\t\t\t\t TREE_OPERAND (arg0, 1)));\n+      if (TREE_CODE (arg0) == COMPLEX_CST)\n+\treturn fold_convert (type, TREE_REALPART (arg0));\n+      if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n+\t{\n+\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n+\t  tem = fold_build2 (TREE_CODE (arg0), itype,\n+\t\t\t     fold_build1 (REALPART_EXPR, itype,\n+\t\t\t\t\t  TREE_OPERAND (arg0, 0)),\n+\t\t\t     fold_build1 (REALPART_EXPR, itype,\n+\t\t\t\t\t  TREE_OPERAND (arg0, 1)));\n+\t  return fold_convert (type, tem);\n+\t}\n+      if (TREE_CODE (arg0) == CONJ_EXPR)\n+\t{\n+\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n+\t  tem = fold_build1 (REALPART_EXPR, itype, TREE_OPERAND (arg0, 0));\n+\t  return fold_convert (type, tem);\n+\t}\n       return NULL_TREE;\n \n     case IMAGPART_EXPR:\n       if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n \treturn fold_convert (type, integer_zero_node);\n-      else if (TREE_CODE (arg0) == COMPLEX_EXPR)\n+      if (TREE_CODE (arg0) == COMPLEX_EXPR)\n \treturn omit_one_operand (type, TREE_OPERAND (arg0, 1),\n \t\t\t\t TREE_OPERAND (arg0, 0));\n-      else if (TREE_CODE (arg0) == COMPLEX_CST)\n-\treturn TREE_IMAGPART (arg0);\n-      else if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n-\treturn fold_build2 (TREE_CODE (arg0), type,\n-\t\t\t    fold_build1 (IMAGPART_EXPR, type,\n-\t\t\t\t\t TREE_OPERAND (arg0, 0)),\n-\t\t\t    fold_build1 (IMAGPART_EXPR, type,\n-\t\t\t\t\t TREE_OPERAND (arg0, 1)));\n+      if (TREE_CODE (arg0) == COMPLEX_CST)\n+\treturn fold_convert (type, TREE_IMAGPART (arg0));\n+      if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n+\t{\n+\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n+\t  tem = fold_build2 (TREE_CODE (arg0), itype,\n+\t\t\t     fold_build1 (IMAGPART_EXPR, itype,\n+\t\t\t\t\t  TREE_OPERAND (arg0, 0)),\n+\t\t\t     fold_build1 (IMAGPART_EXPR, itype,\n+\t\t\t\t\t  TREE_OPERAND (arg0, 1)));\n+\t  return fold_convert (type, tem);\n+\t}\n+      if (TREE_CODE (arg0) == CONJ_EXPR)\n+\t{\n+\t  tree itype = TREE_TYPE (TREE_TYPE (arg0));\n+\t  tem = fold_build1 (IMAGPART_EXPR, itype, TREE_OPERAND (arg0, 0));\n+\t  return fold_convert (type, negate_expr (tem));\n+\t}\n       return NULL_TREE;\n \n     default:"}]}