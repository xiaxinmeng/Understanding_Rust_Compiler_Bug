{"sha": "693e265fc07aa9119906a3ed03318599ae6b5bc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzZTI2NWZjMDdhYTkxMTk5MDZhM2VkMDMzMTg1OTlhZTZiNWJjNQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@cygnus.com", "date": "1998-04-22T14:20:29Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1998-04-22T14:20:29Z"}, "message": "Add match_insn2; Fix prototype in loop.c\n\nFrom-SVN: r19377", "tree": {"sha": "c6cc54486f0f7533219114b3a702f4e22a3569c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6cc54486f0f7533219114b3a702f4e22a3569c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/693e265fc07aa9119906a3ed03318599ae6b5bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693e265fc07aa9119906a3ed03318599ae6b5bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693e265fc07aa9119906a3ed03318599ae6b5bc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693e265fc07aa9119906a3ed03318599ae6b5bc5/comments", "author": null, "committer": null, "parents": [{"sha": "43ee49e8f39d5d3d678f742a2d2e89f073632835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ee49e8f39d5d3d678f742a2d2e89f073632835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ee49e8f39d5d3d678f742a2d2e89f073632835"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "f6d49dbe0ed1ed748aa7e8a1cb1b33d88941400d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=693e265fc07aa9119906a3ed03318599ae6b5bc5", "patch": "@@ -1,8 +1,16 @@\n+Wed Apr 22 17:07:35 1998  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* loop.c (note_addr_stored): Correct function to take 2 arguments,\n+\tinstead of 1.\n+\n+\t* rtl.def (MATCH_INSN2): Add new matching pattern.\n+\t* genrecog.c (add_to_sequence): Support MATCH_INSN2. \n+\n Wed Apr 22 15:52:22 1998  John Carr  <jfc@mit.edu>\n \n \t* emit-rtl.c (gen_highpart): The high part of a CONST_INT is not zero\n \tif HOST_BITS_PER_WIDE_INT is larger than BITS_PER_WORD.\n-\n+    \n \t* final.c (split_double): Sign extend both halves of a split CONST_INT.\n \n Wed Apr 22 10:42:45 1998  Jeffrey A Law  (law@cygnus.com)"}, {"sha": "7720c08c7453a6f492f871a1393ffc324da946f7", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=693e265fc07aa9119906a3ed03318599ae6b5bc5", "patch": "@@ -353,6 +353,7 @@ add_to_sequence (pattern, last, position)\n     case MATCH_SCRATCH:\n     case MATCH_OPERATOR:\n     case MATCH_PARALLEL:\n+    case MATCH_INSN2:\n       new->opno = XINT (pattern, 0);\n       new->code = (code == MATCH_PARALLEL ? PARALLEL : UNKNOWN);\n       new->enforce_mode = 0;"}, {"sha": "bcc7d2cc663eefad4803418e6896c0e3ed9eb2f9", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=693e265fc07aa9119906a3ed03318599ae6b5bc5", "patch": "@@ -285,7 +285,7 @@ static int consec_sets_invariant_p PROTO((rtx, int, rtx));\n static rtx libcall_other_reg PROTO((rtx, rtx));\n static int labels_in_range_p PROTO((rtx, int));\n static void count_loop_regs_set PROTO((rtx, rtx, char *, rtx *, int *, int));\n-static void note_addr_stored PROTO((rtx));\n+static void note_addr_stored PROTO((rtx, rtx));\n static int loop_reg_used_before_p PROTO((rtx, rtx, rtx, rtx, rtx));\n static void scan_loop PROTO((rtx, rtx, int, int));\n #if 0\n@@ -2825,8 +2825,9 @@ labels_in_range_p (insn, end)\n /* Record that a memory reference X is being set.  */\n \n static void\n-note_addr_stored (x)\n+note_addr_stored (x, y)\n      rtx x;\n+     rtx y ATTRIBUTE_UNUSED;\n {\n   register int i;\n "}, {"sha": "22c3507b9fb0f35632d501588d9e617965e49988", "filename": "gcc/md.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=693e265fc07aa9119906a3ed03318599ae6b5bc5", "patch": "@@ -401,6 +401,25 @@ An insn that matches this pattern might look like:\n Like @code{match_op_dup}, but for @code{match_parallel} instead of\n @code{match_operator}.\n \n+@findex match_insn\n+@item (match_insn @var{predicate})\n+Match a complete insn.  Unlike the other @code{match_*} recognizers,\n+@code{match_insn} does not take an operand number.\n+\n+The machine mode @var{m} of @code{match_insn} works like that of\n+@code{match_operand}: it is passed as the second argument to the\n+predicate function, and that function is solely responsible for\n+deciding whether the expression to be matched ``has'' that mode.\n+\n+@findex match_insn2\n+@item (match_insn2 @var{n} @var{predicate})\n+Match a complete insn.\n+\n+The machine mode @var{m} of @code{match_insn2} works like that of\n+@code{match_operand}: it is passed as the second argument to the\n+predicate function, and that function is solely responsible for\n+deciding whether the expression to be matched ``has'' that mode.\n+\n @findex address\n @item (address (match_operand:@var{m} @var{n} \"address_operand\" \"\"))\n This complex of expressions is a placeholder for an operand number"}, {"sha": "8eef0bab1223a28e06df72ae48173aeb4b3c1d82", "filename": "gcc/rtl.def", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693e265fc07aa9119906a3ed03318599ae6b5bc5/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=693e265fc07aa9119906a3ed03318599ae6b5bc5", "patch": "@@ -1,7 +1,7 @@\n /* This file contains the definitions and documentation for the\n    Register Transfer Expressions (rtx's) that make up the\n    Register Transfer Language (rtl) used in the Back End of the GNU compiler.\n-   Copyright (C) 1987, 88, 92, 94, 95, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92, 94, 95, 97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -54,6 +54,7 @@ Boston, MA 02111-1307, USA.  */\n      \"b\" an rtx code for a bit-field operation (ZERO_EXTRACT, SIGN_EXTRACT)\n      \"i\" an rtx code for a machine insn (INSN, JUMP_INSN, CALL_INSN)\n      \"m\" an rtx code for something that matches in insns (e.g, MATCH_DUP)\n+     \"g\" an rtx code for grouping insns together (e.g, GROUP_PARALLEL)\n      \"x\" everything else\n      \n    */\n@@ -164,6 +165,11 @@ DEF_RTL_EXPR(MATCH_PAR_DUP, \"match_par_dup\", \"iE\", 'm')\n    The predicate in operand 0 is applied to the whole insn being checked.  */\n DEF_RTL_EXPR(MATCH_INSN, \"match_insn\", \"s\", 'm')\n \n+/* Appears only in machine descriptions.\n+   Operand 0 is the operand number, as in match_operand.\n+   Operand 1 is the predicate to apply to the insn.  */\n+DEF_RTL_EXPR(MATCH_INSN2, \"match_insn2\", \"is\", 'm')\n+\n /* Appears only in machine descriptions.\n    Defines the pattern for one kind of instruction.\n    Operand:"}]}