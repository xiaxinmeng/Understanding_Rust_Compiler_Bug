{"sha": "204853a7651de3a2590daf4139cc65d6b6cc814d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0ODUzYTc2NTFkZTNhMjU5MGRhZjQxMzljYzY1ZDZiNmNjODE0ZA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2008-09-03T19:49:30Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2008-09-03T19:49:30Z"}, "message": "re PR rtl-optimization/37296 (Bootstrap failure compiling libgcc)\n\n2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-opt/37296\n\n\t* ira-int.h (ira_sort_insn_chain): Remove.\n\n\t* ira.c (basic_block_order_nums, chain_insn_order,\n\tchain_freq_compare, chain_bb_compare, ira_sort_insn_chain): Remove.\n\t(ira): Don't call ira_sort_insn_chain.\n\n\t* reload1.c (reload): Don't call ira_sort_insn_chain.\n\nFrom-SVN: r139948", "tree": {"sha": "5a19963cac269066913f96d2a28b4c53e957b2d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a19963cac269066913f96d2a28b4c53e957b2d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/204853a7651de3a2590daf4139cc65d6b6cc814d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204853a7651de3a2590daf4139cc65d6b6cc814d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204853a7651de3a2590daf4139cc65d6b6cc814d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204853a7651de3a2590daf4139cc65d6b6cc814d/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8f97b70cbd45c8916af5a2ed44b61abf0c30e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f97b70cbd45c8916af5a2ed44b61abf0c30e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f97b70cbd45c8916af5a2ed44b61abf0c30e16"}], "stats": {"total": 116, "additions": 12, "deletions": 104}, "files": [{"sha": "d6241816a7fb50800507f57073ad040b83dc24b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=204853a7651de3a2590daf4139cc65d6b6cc814d", "patch": "@@ -1,3 +1,15 @@\n+2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-opt/37296\n+\n+\t* ira-int.h (ira_sort_insn_chain): Remove.\n+\n+\t* ira.c (basic_block_order_nums, chain_insn_order,\n+\tchain_freq_compare, chain_bb_compare, ira_sort_insn_chain): Remove.\n+\t(ira): Don't call ira_sort_insn_chain.\n+\n+\t* reload1.c (reload): Don't call ira_sort_insn_chain.\n+\n 2008-09-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/37293"}, {"sha": "5170769e2a388c3b2bb96dabe50959c02aa45a19", "filename": "gcc/ira.c", "status": "modified", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=204853a7651de3a2590daf4139cc65d6b6cc814d", "patch": "@@ -1681,101 +1681,6 @@ expand_reg_info (int old_size)\n \n \f\n \n-/* This page contains code for sorting the insn chain used by reload.\n-   In the old register allocator, the insn chain order corresponds to\n-   the order of insns in RTL.  By putting insns with higher execution\n-   frequency BBs first, reload has a better chance to generate less\n-   expensive operand reloads for such insns.  */\n-\n-/* Map bb index -> order number in the BB chain in RTL code.  */\n-static int *basic_block_order_nums;\n-\n-/* Map chain insn uid -> order number in the insn chain before sorting\n-   the insn chain.  */\n-static int *chain_insn_order;\n-\n-/* The function is used to sort insn chain according insn execution\n-   frequencies.  */\n-static int\n-chain_freq_compare (const void *v1p, const void *v2p)\n-{\n-  const struct insn_chain *c1 = *(struct insn_chain * const *)v1p;\n-  const struct insn_chain *c2 = *(struct insn_chain * const *)v2p;\n-  int diff;\n-\n-  diff = (BASIC_BLOCK (c2->block)->frequency\n-\t  - BASIC_BLOCK (c1->block)->frequency);\n-  if (diff)\n-    return diff;\n-  /* Keep the same order in BB scope.  */\n-  return (chain_insn_order[INSN_UID(c1->insn)]\n-\t  - chain_insn_order[INSN_UID(c2->insn)]);\n-}\n-\n-/* Sort the insn chain according insn original order.  */\n-static int\n-chain_bb_compare (const void *v1p, const void *v2p)\n-{\n-  const struct insn_chain *c1 = *(struct insn_chain * const *)v1p;\n-  const struct insn_chain *c2 = *(struct insn_chain * const *)v2p;\n-  int diff;\n-\n-  diff = (basic_block_order_nums[c1->block]\n-\t  - basic_block_order_nums[c2->block]);\n-  if (diff)\n-    return diff;\n-  /* Keep the same order in BB scope.  */\n-  return (chain_insn_order[INSN_UID(c1->insn)]\n-\t  - chain_insn_order[INSN_UID(c2->insn)]);\n-}\n-\n-/* Sort the insn chain according to insn frequencies if\n-   FREQ_P or according to insn original order otherwise.  */\n-void\n-ira_sort_insn_chain (bool freq_p)\n-{\n-  struct insn_chain *chain, **chain_arr;\n-  basic_block bb;\n-  int i, n;\n-  \n-  chain_insn_order = (int *) ira_allocate (get_max_uid () * sizeof (int));\n-  for (n = 0, chain = reload_insn_chain; chain != 0; chain = chain->next)\n-    {\n-      chain_insn_order[INSN_UID (chain->insn)] = n;\n-      n++;\n-    }\n-  if (n <= 1)\n-    return;\n-  chain_arr\n-    = (struct insn_chain **) ira_allocate (n * sizeof (struct insn_chain *));\n-  basic_block_order_nums\n-    = (int *) ira_allocate (sizeof (int) * last_basic_block);\n-  n = 0;\n-  FOR_EACH_BB (bb)\n-    {\n-      basic_block_order_nums[bb->index] = n++;\n-    }\n-  for (n = 0, chain = reload_insn_chain; chain != 0; chain = chain->next)\n-    chain_arr[n++] = chain;\n-  qsort (chain_arr, n, sizeof (struct insn_chain *),\n-\t freq_p ? chain_freq_compare : chain_bb_compare);\n-  ira_free (chain_insn_order);\n-  for (i = 1; i < n - 1; i++)\n-    {\n-      chain_arr[i]->next = chain_arr[i + 1];\n-      chain_arr[i]->prev = chain_arr[i - 1];\n-    }\n-  chain_arr[i]->next = NULL;\n-  chain_arr[i]->prev = chain_arr[i - 1];\n-  reload_insn_chain = chain_arr[0];\n-  reload_insn_chain->prev = NULL;\n-  reload_insn_chain->next = chain_arr[1];\n-  ira_free (basic_block_order_nums);\n-  ira_free (chain_arr);\n-}\n-\n-\f\n-\n /* All natural loops.  */\n struct loops ira_loops;\n \n@@ -1966,9 +1871,6 @@ ira (FILE *f)\n   df_set_flags (DF_NO_INSN_RESCAN);\n   build_insn_chain ();\n \n-  if (optimize)\n-    ira_sort_insn_chain (true);\n-\n   reload_completed = !reload (get_insns (), optimize > 0);\n \n   timevar_pop (TV_RELOAD);"}, {"sha": "5f964c47a42c2976154926bee87ead5f6fc88076", "filename": "gcc/ira.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2Fira.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2Fira.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.h?ref=204853a7651de3a2590daf4139cc65d6b6cc814d", "patch": "@@ -24,7 +24,6 @@ extern void ira_init_once (void);\n extern void ira_init (void);\n extern void ira_finish_once (void);\n extern rtx ira_eliminate_regs (rtx, enum machine_mode);\n-extern void ira_sort_insn_chain (bool);\n \n extern void ira_sort_regnos_for_alter_reg (int *, int, unsigned int *);\n extern void ira_mark_allocation_change (int);"}, {"sha": "f9d924c779b5adbf5dbc21070937ef0146428329", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204853a7651de3a2590daf4139cc65d6b6cc814d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=204853a7651de3a2590daf4139cc65d6b6cc814d", "patch": "@@ -1118,11 +1118,6 @@ reload (rtx first, int global)\n       obstack_free (&reload_obstack, reload_firstobj);\n     }\n \n-  if (flag_ira && optimize)\n-    /* Restore the original insn chain order for correct reload work\n-       (e.g. for correct inheritance).  */\n-    ira_sort_insn_chain (false);\n-\n   /* If global-alloc was run, notify it of any register eliminations we have\n      done.  */\n   if (global)"}]}