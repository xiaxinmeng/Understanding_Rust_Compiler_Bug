{"sha": "d57daa0c9d47b15781359f7a2898c991e560463d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3ZGFhMGM5ZDQ3YjE1NzgxMzU5ZjdhMjg5OGM5OTFlNTYwNDYzZA==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2017-01-06T17:35:23Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2017-01-06T17:35:23Z"}, "message": "[ARM] Implement support for ACLE Coprocessor CDP intrinsics\n\ngcc/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm.md (<cdp>): New.\n\t* config/arm/arm.c (neon_const_bounds): Rename this ...\n\t(arm_const_bounds): ... this.\n\t(arm_coproc_builtin_available): New.\n\t* config/arm/arm-builtins.c (SIMD_MAX_BUILTIN_ARGS): Increase.\n\t(arm_type_qualifiers): Add 'qualifier_unsigned_immediate'.\n\t(CDP_QUALIFIERS): Define to...\n\t(arm_cdp_qualifiers): ... this. New.\n\t(void_UP): Define.\n\t(arm_expand_builtin_args): Add case for 6 arguments.\n\t* config/arm/arm-protos.h (neon_const_bounds): Rename this ...\n\t(arm_const_bounds): ... this.\n\t(arm_coproc_builtin_available): New.\n\t* config/arm/arm_acle.h (__arm_cdp): New.\n\t(__arm_cdp2): New.\n\t* config/arm/arm_acle_builtins.def (cdp): New.\n\t(cdp2): New.\n\t* config/arm/iterators.md (CDPI,CDP,cdp): New.\n\t* config/arm/neon.md: Rename all 'neon_const_bounds' to\n\t'arm_const_bounds'.\n\t* config/arm/types.md (coproc): New.\n\t* config/arm/unspecs.md (VUNSPEC_CDP, VUNSPEC_CDP2): New.\n\t* gcc/doc/extend.texi (ACLE): Add a mention of Coprocessor intrinsics.\n\t* gcc/doc/sourcebuild.texi (arm_coproc1_ok, arm_coproc2_ok,\n\tarm_coproc3_ok, arm_coproc4_ok): Document new effective targets.\n\ngcc/testsuite/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/acle/acle.exp: Run tests for different options\n\tand make sure fat-lto-objects is used such that we can still do\n\tassemble scans.\n\t* gcc.target/arm/acle/cdp.c: New.\n\t* gcc.target/arm/acle/cdp2.c: New.\n\t* lib/target-supports.exp (check_effective_target_arm_coproc1_ok): New.\n\t(check_effective_target_arm_coproc1_ok_nocache): New.\n\t(check_effective_target_arm_coproc2_ok): New.\n\t(check_effective_target_arm_coproc2_ok_nocache): New.\n\t(check_effective_target_arm_coproc3_ok): New.\n\t(check_effective_target_arm_coproc3_ok_nocache): New.\n\t(check_effective_target_arm_coproc4_ok): New.\n\t(check_effective_target_arm_coproc4_ok_nocache): New.\n\nFrom-SVN: r244172", "tree": {"sha": "039981a2666f68ec0a9d7ce86e900c40239fcb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039981a2666f68ec0a9d7ce86e900c40239fcb11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d57daa0c9d47b15781359f7a2898c991e560463d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57daa0c9d47b15781359f7a2898c991e560463d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57daa0c9d47b15781359f7a2898c991e560463d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57daa0c9d47b15781359f7a2898c991e560463d/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0"}], "stats": {"total": 345, "additions": 318, "deletions": 27}, "files": [{"sha": "71330b76712f87b20262edefa9910f124dc867dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -1,3 +1,31 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.md (<cdp>): New.\n+\t* config/arm/arm.c (neon_const_bounds): Rename this ...\n+\t(arm_const_bounds): ... this.\n+\t(arm_coproc_builtin_available): New.\n+\t* config/arm/arm-builtins.c (SIMD_MAX_BUILTIN_ARGS): Increase.\n+\t(arm_type_qualifiers): Add 'qualifier_unsigned_immediate'.\n+\t(CDP_QUALIFIERS): Define to...\n+\t(arm_cdp_qualifiers): ... this. New.\n+\t(void_UP): Define.\n+\t(arm_expand_builtin_args): Add case for 6 arguments.\n+\t* config/arm/arm-protos.h (neon_const_bounds): Rename this ...\n+\t(arm_const_bounds): ... this.\n+\t(arm_coproc_builtin_available): New.\n+\t* config/arm/arm_acle.h (__arm_cdp): New.\n+\t(__arm_cdp2): New.\n+\t* config/arm/arm_acle_builtins.def (cdp): New.\n+\t(cdp2): New.\n+\t* config/arm/iterators.md (CDPI,CDP,cdp): New.\n+\t* config/arm/neon.md: Rename all 'neon_const_bounds' to\n+\t'arm_const_bounds'.\n+\t* config/arm/types.md (coproc): New.\n+\t* config/arm/unspecs.md (VUNSPEC_CDP, VUNSPEC_CDP2): New.\n+\t* gcc/doc/extend.texi (ACLE): Add a mention of Coprocessor intrinsics.\n+\t* gcc/doc/sourcebuild.texi (arm_coproc1_ok, arm_coproc2_ok,\n+\tarm_coproc3_ok, arm_coproc4_ok): Document new effective targets.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm-builtins.c (arm_unsigned_binop_qualifiers): New."}, {"sha": "2bb9e22bb8cf7ae2d8a5698e970af4845016d93c", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -39,7 +39,7 @@\n #include \"case-cfn-macros.h\"\n #include \"sbitmap.h\"\n \n-#define SIMD_MAX_BUILTIN_ARGS 5\n+#define SIMD_MAX_BUILTIN_ARGS 7\n \n enum arm_type_qualifiers\n {\n@@ -54,6 +54,7 @@ enum arm_type_qualifiers\n   /* Used when expanding arguments if an operand could\n      be an immediate.  */\n   qualifier_immediate = 0x8, /* 1 << 3  */\n+  qualifier_unsigned_immediate = 0x9,\n   qualifier_maybe_immediate = 0x10, /* 1 << 4  */\n   /* void foo (...).  */\n   qualifier_void = 0x20, /* 1 << 5  */\n@@ -165,6 +166,18 @@ arm_unsigned_binop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned };\n #define UBINOP_QUALIFIERS (arm_unsigned_binop_qualifiers)\n \n+/* void (unsigned immediate, unsigned immediate, unsigned immediate,\n+\t unsigned immediate, unsigned immediate, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_cdp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate };\n+#define CDP_QUALIFIERS \\\n+  (arm_cdp_qualifiers)\n /* The first argument (return type) of a store should be void type,\n    which we represent with qualifier_void.  Their first operand will be\n    a DImode pointer to the location to store to, so we must use\n@@ -201,6 +214,7 @@ arm_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define oi_UP\t OImode\n #define hf_UP\t HFmode\n #define si_UP\t SImode\n+#define void_UP\t VOIDmode\n \n #define UP(X) X##_UP\n \n@@ -2226,6 +2240,10 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \tpat = GEN_FCN (icode) (target, op[0], op[1], op[2], op[3], op[4]);\n \tbreak;\n \n+      case 6:\n+\tpat = GEN_FCN (icode) (target, op[0], op[1], op[2], op[3], op[4], op[5]);\n+\tbreak;\n+\n       default:\n \tgcc_unreachable ();\n       }\n@@ -2252,6 +2270,10 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \tpat = GEN_FCN (icode) (op[0], op[1], op[2], op[3], op[4]);\n \tbreak;\n \n+      case 6:\n+\tpat = GEN_FCN (icode) (op[0], op[1], op[2], op[3], op[4], op[5]);\n+\tbreak;\n+\n       default:\n \tgcc_unreachable ();\n       }"}, {"sha": "4d6a3ed3d47952728c3c4c1a8bd5ec0b9274bb16", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -96,7 +96,7 @@ extern rtx neon_make_constant (rtx);\n extern tree arm_builtin_vectorized_function (unsigned int, tree, tree);\n extern void neon_expand_vector_init (rtx, rtx);\n extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT, const_tree);\n-extern void neon_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n+extern void arm_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern HOST_WIDE_INT neon_element_bits (machine_mode);\n extern void neon_emit_pair_result_insn (machine_mode,\n \t\t\t\t\trtx (*) (rtx, rtx, rtx, rtx),\n@@ -176,6 +176,7 @@ extern void arm_expand_compare_and_swap (rtx op[]);\n extern void arm_split_compare_and_swap (rtx op[]);\n extern void arm_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n extern rtx arm_load_tp (rtx);\n+extern bool arm_coproc_builtin_available (enum unspecv);\n \n #if defined TREE_CODE\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "64599981961d80c5493a88f30743b98a138ca932", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -12206,7 +12206,7 @@ neon_lane_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high,\n /* Bounds-check constants.  */\n \n void\n-neon_const_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n+arm_const_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n {\n   bounds_check (operand, low, high, NULL_TREE, \"constant\");\n }\n@@ -30888,4 +30888,34 @@ arm_expand_divmod_libfunc (rtx libfunc, machine_mode mode,\n   *rem_p = remainder;\n }\n \n+/*  This function checks for the availability of the coprocessor builtin passed\n+    in BUILTIN for the current target.  Returns true if it is available and\n+    false otherwise.  If a BUILTIN is passed for which this function has not\n+    been implemented it will cause an exception.  */\n+\n+bool\n+arm_coproc_builtin_available (enum unspecv builtin)\n+{\n+  /* None of these builtins are available in Thumb mode if the target only\n+     supports Thumb-1.  */\n+  if (TARGET_THUMB1)\n+    return false;\n+\n+  switch (builtin)\n+    {\n+      case VUNSPEC_CDP:\n+\tif (arm_arch4)\n+\t  return true;\n+\tbreak;\n+      case VUNSPEC_CDP2:\n+\t/* Only present in ARMv5*, ARMv6 (but not ARMv6-M), ARMv7* and\n+\t   ARMv8-{A,M}.  */\n+\tif (arm_arch5)\n+\t  return true;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  return false;\n+}\n #include \"gt-arm.h\""}, {"sha": "b5325013c2179c06e0079f35a5c5bd0ae9388d4c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -11919,6 +11919,26 @@\n   DONE;\n })\n \n+(define_insn \"<cdp>\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 2 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 3 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 4 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 5 \"immediate_operand\" \"n\")] CDPI)]\n+  \"arm_coproc_builtin_available (VUNSPEC_<CDP>)\"\n+{\n+  arm_const_bounds (operands[0], 0, 16);\n+  arm_const_bounds (operands[1], 0, 16);\n+  arm_const_bounds (operands[2], 0, (1 << 5));\n+  arm_const_bounds (operands[3], 0, (1 << 5));\n+  arm_const_bounds (operands[4], 0, (1 << 5));\n+  arm_const_bounds (operands[5], 0, 8);\n+  return \"<cdp>\\\\tp%c0, %1, CR%c2, CR%c3, CR%c4, %5\";\n+}\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"coproc\")])\n+\n ;; Vector bits common to IWMMXT and Neon\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "08add2b7ac79f487dea92477d39b9db886a3f027", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -32,6 +32,26 @@\n extern \"C\" {\n #endif\n \n+#if (!__thumb__ || __thumb2__) &&  __ARM_ARCH >= 4\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_cdp (const unsigned int __coproc, const unsigned int __opc1,\n+\t   const unsigned int __CRd, const unsigned int __CRn,\n+\t   const unsigned int __CRm, const unsigned int __opc2)\n+{\n+  return __builtin_arm_cdp (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n+}\n+\n+#if __ARM_ARCH >= 5\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_cdp2 (const unsigned int __coproc, const unsigned int __opc1,\n+\t    const unsigned int __CRd, const unsigned int __CRn,\n+\t    const unsigned int __CRm, const unsigned int __opc2)\n+{\n+  return __builtin_arm_cdp2 (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n+}\n+#endif /*  __ARM_ARCH >= 5.  */\n+#endif /* (!__thumb__ || __thumb2__) &&  __ARM_ARCH >= 4.  */\n+\n #ifdef __ARM_FEATURE_CRC32\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n __crc32b (uint32_t __a, uint8_t __b)"}, {"sha": "03b5bf88ef2632bceedba1e64c0f83bc50337364", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -24,3 +24,5 @@ VAR1 (UBINOP, crc32w, si)\n VAR1 (UBINOP, crc32cb, si)\n VAR1 (UBINOP, crc32ch, si)\n VAR1 (UBINOP, crc32cw, si)\n+VAR1 (CDP, cdp, void)\n+VAR1 (CDP, cdp2, void)"}, {"sha": "86d6aa70e5766bc42a4209f14e929942ee63b773", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -943,3 +943,8 @@\n ;; Attributes for VFMA_LANE/ VFMS_LANE\n (define_int_attr neon_vfm_lane_as\n  [(UNSPEC_VFMA_LANE \"a\") (UNSPEC_VFMS_LANE \"s\")])\n+\n+;; An iterator for the CDP coprocessor instructions\n+(define_int_iterator CDPI [VUNSPEC_CDP VUNSPEC_CDP2])\n+(define_int_attr cdp [(VUNSPEC_CDP \"cdp\") (VUNSPEC_CDP2 \"cdp2\")])\n+(define_int_attr CDP [(VUNSPEC_CDP \"CDP\") (VUNSPEC_CDP2 \"CDP2\")])"}, {"sha": "cf281df0292d0f511d7d63e828886d860a3a8201", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -3654,7 +3654,7 @@ if (BYTES_BIG_ENDIAN)\n \t\t\t  VCVT_US_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 1, 33);\n+  arm_const_bounds (operands[2], 1, 33);\n   return \"vcvt.<sup>%#32.f32\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n   [(set_attr \"type\" \"neon_fp_to_int_<V_elem_ch><q>\")]\n@@ -3668,7 +3668,7 @@ if (BYTES_BIG_ENDIAN)\n     VCVT_US_N))]\n   \"TARGET_NEON_FP16INST\"\n {\n-  neon_const_bounds (operands[2], 0, 17);\n+  arm_const_bounds (operands[2], 0, 17);\n   return \"vcvt.<sup>%#16.f16\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n  [(set_attr \"type\" \"neon_fp_to_int_<VH_elem_ch><q>\")]\n@@ -3681,7 +3681,7 @@ if (BYTES_BIG_ENDIAN)\n \t\t\t  VCVT_US_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 1, 33);\n+  arm_const_bounds (operands[2], 1, 33);\n   return \"vcvt.f32.<sup>%#32\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n   [(set_attr \"type\" \"neon_int_to_fp_<V_elem_ch><q>\")]\n@@ -3695,7 +3695,7 @@ if (BYTES_BIG_ENDIAN)\n     VCVT_US_N))]\n  \"TARGET_NEON_FP16INST\"\n {\n-  neon_const_bounds (operands[2], 0, 17);\n+  arm_const_bounds (operands[2], 0, 17);\n   return \"vcvt.f16.<sup>%#16\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n  [(set_attr \"type\" \"neon_int_to_fp_<VH_elem_ch><q>\")]\n@@ -4300,7 +4300,7 @@ if (BYTES_BIG_ENDIAN)\n                      UNSPEC_VEXT))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n+  arm_const_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vext.<V_sz_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2, %3\";\n }\n   [(set_attr \"type\" \"neon_ext<q>\")]\n@@ -4397,7 +4397,7 @@ if (BYTES_BIG_ENDIAN)\n                       VSHR_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) + 1);\n+  arm_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) + 1);\n   return \"v<shift_op>.<sup>%#<V_sz_elem>\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n   [(set_attr \"type\" \"neon_shift_imm<q>\")]\n@@ -4411,7 +4411,7 @@ if (BYTES_BIG_ENDIAN)\n                            VSHRN_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) / 2 + 1);\n+  arm_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) / 2 + 1);\n   return \"v<shift_op>.<V_if_elem>\\t%P0, %q1, %2\";\n }\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n@@ -4425,7 +4425,7 @@ if (BYTES_BIG_ENDIAN)\n                            VQSHRN_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) / 2 + 1);\n+  arm_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) / 2 + 1);\n   return \"v<shift_op>.<sup>%#<V_sz_elem>\\t%P0, %q1, %2\";\n }\n   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n@@ -4439,7 +4439,7 @@ if (BYTES_BIG_ENDIAN)\n                            VQSHRUN_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) / 2 + 1);\n+  arm_const_bounds (operands[2], 1, neon_element_bits (<MODE>mode) / 2 + 1);\n   return \"v<shift_op>.<V_s_elem>\\t%P0, %q1, %2\";\n }\n   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n@@ -4452,7 +4452,7 @@ if (BYTES_BIG_ENDIAN)\n                       UNSPEC_VSHL_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode));\n+  arm_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode));\n   return \"vshl.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n   [(set_attr \"type\" \"neon_shift_imm<q>\")]\n@@ -4465,7 +4465,7 @@ if (BYTES_BIG_ENDIAN)\n                       VQSHL_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode));\n+  arm_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode));\n   return \"vqshl.<sup>%#<V_sz_elem>\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n   [(set_attr \"type\" \"neon_sat_shift_imm<q>\")]\n@@ -4478,7 +4478,7 @@ if (BYTES_BIG_ENDIAN)\n                       UNSPEC_VQSHLU_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode));\n+  arm_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode));\n   return \"vqshlu.<V_s_elem>\\t%<V_reg>0, %<V_reg>1, %2\";\n }\n   [(set_attr \"type\" \"neon_sat_shift_imm<q>\")]\n@@ -4492,7 +4492,7 @@ if (BYTES_BIG_ENDIAN)\n   \"TARGET_NEON\"\n {\n   /* The boundaries are: 0 < imm <= size.  */\n-  neon_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode) + 1);\n+  arm_const_bounds (operands[2], 0, neon_element_bits (<MODE>mode) + 1);\n   return \"vshll.<sup>%#<V_sz_elem>\\t%q0, %P1, %2\";\n }\n   [(set_attr \"type\" \"neon_shift_imm_long\")]\n@@ -4507,7 +4507,7 @@ if (BYTES_BIG_ENDIAN)\n                       VSRA_N))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[3], 1, neon_element_bits (<MODE>mode) + 1);\n+  arm_const_bounds (operands[3], 1, neon_element_bits (<MODE>mode) + 1);\n   return \"v<shift_op>.<sup>%#<V_sz_elem>\\t%<V_reg>0, %<V_reg>2, %3\";\n }\n   [(set_attr \"type\" \"neon_shift_acc<q>\")]\n@@ -4521,7 +4521,7 @@ if (BYTES_BIG_ENDIAN)\n                       UNSPEC_VSRI))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[3], 1, neon_element_bits (<MODE>mode) + 1);\n+  arm_const_bounds (operands[3], 1, neon_element_bits (<MODE>mode) + 1);\n   return \"vsri.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2, %3\";\n }\n   [(set_attr \"type\" \"neon_shift_reg<q>\")]\n@@ -4535,7 +4535,7 @@ if (BYTES_BIG_ENDIAN)\n                       UNSPEC_VSLI))]\n   \"TARGET_NEON\"\n {\n-  neon_const_bounds (operands[3], 0, neon_element_bits (<MODE>mode));\n+  arm_const_bounds (operands[3], 0, neon_element_bits (<MODE>mode));\n   return \"vsli.<V_sz_elem>\\t%<V_reg>0, %<V_reg>2, %3\";\n }\n   [(set_attr \"type\" \"neon_shift_reg<q>\")]"}, {"sha": "b0b375c6ddfbe69fff9abc3bdb6bcd592dd341f2", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -539,6 +539,10 @@\n ; crypto_sha1_slow\n ; crypto_sha256_fast\n ; crypto_sha256_slow\n+;\n+; The classification below is for coprocessor instructions\n+;\n+; coproc\n \n (define_attr \"type\"\n  \"adc_imm,\\\n@@ -1073,7 +1077,8 @@\n   crypto_sha1_fast,\\\n   crypto_sha1_slow,\\\n   crypto_sha256_fast,\\\n-  crypto_sha256_slow\"\n+  crypto_sha256_slow,\\\n+  coproc\"\n    (const_string \"untyped\"))\n \n ; Is this an (integer side) multiply with a 32-bit (or smaller) result?"}, {"sha": "01dd700a0af8043ce40ada939f9b0c34d846eded", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -150,6 +150,8 @@\n   VUNSPEC_GET_FPSCR\t; Represent fetch of FPSCR content.\n   VUNSPEC_SET_FPSCR\t; Represent assign of FPSCR content.\n   VUNSPEC_PROBE_STACK_RANGE ; Represent stack range probing.\n+  VUNSPEC_CDP\t\t; Represent the coprocessor cdp instruction.\n+  VUNSPEC_CDP2\t\t; Represent the coprocessor cdp2 instruction.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "befdea9edd90f1b8c6cb81cb833c07bd2454fa80", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -1886,7 +1886,7 @@\n   (float_truncate:HF (float:SF (match_dup 0))))]\n  \"TARGET_VFP_FP16INST\"\n {\n-  neon_const_bounds (operands[2], 1, 33);\n+  arm_const_bounds (operands[2], 1, 33);\n   return \"vcvt.f16.<sup>32\\t%0, %0, %2\\;vmov.f32\\t%3, %0\";\n }\n   [(set_attr \"conds\" \"unconditional\")\n@@ -1903,7 +1903,7 @@\n {\n   rtx op1 = gen_reg_rtx (SImode);\n \n-  neon_const_bounds (operands[2], 1, 33);\n+  arm_const_bounds (operands[2], 1, 33);\n \n   emit_move_insn (op1, operands[1]);\n   emit_insn (gen_neon_vcvth<sup>_nhf_unspec (op1, op1, operands[2],\n@@ -1927,7 +1927,7 @@\n     VCVT_SI_US_N))]\n  \"TARGET_VFP_FP16INST\"\n {\n-  neon_const_bounds (operands[2], 1, 33);\n+  arm_const_bounds (operands[2], 1, 33);\n   return \"vmov.f32\\t%0, %1\\;vcvt.<sup>%#32.f16\\t%0, %0, %2\";\n }\n   [(set_attr \"conds\" \"unconditional\")\n@@ -1945,7 +1945,7 @@\n {\n   rtx op1 = gen_reg_rtx (SImode);\n \n-  neon_const_bounds (operands[2], 1, 33);\n+  arm_const_bounds (operands[2], 1, 33);\n   emit_insn (gen_neon_vcvth<sup>_nsi_unspec (op1, operands[1], operands[2]));\n   emit_move_insn (operands[0], op1);\n   DONE;"}, {"sha": "e85da3a03130f14a91c4cc5931fe275b11509939", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -12625,8 +12625,9 @@ The built-in intrinsics for the Advanced SIMD extension are available when\n NEON is enabled.\n \n Currently, ARM and AArch64 back ends do not support ACLE 2.0 fully.  Both\n-back ends support CRC32 intrinsics from @file{arm_acle.h}.  The ARM back end's\n-16-bit floating-point Advanced SIMD intrinsics currently comply to ACLE v1.1.\n+back ends support CRC32 intrinsics and the ARM back end supports the\n+Coprocessor intrinsics, all from @file{arm_acle.h}.  The ARM back end's 16-bit\n+floating-point Advanced SIMD intrinsics currently comply to ACLE v1.1.\n AArch64's back end does not have support for 16-bit floating point Advanced SIMD\n intrinsics yet.\n "}, {"sha": "292a3c7e0a4d29650510db0685cb8d09411d3f7c", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -1678,6 +1678,25 @@ div instruction.\n ARM target supports ARMv8-M Security Extensions, enabled by the @code{-mcmse}\n option.\n \n+@item arm_coproc1_ok\n+@anchor{arm_coproc1_ok}\n+ARM target supports the following coprocessor instructions: @code{CDP},\n+@code{LDC}, @code{STC}, @code{MCR} and @code{MRC}.\n+\n+@item arm_coproc2_ok\n+@anchor{arm_coproc2_ok}\n+ARM target supports all the coprocessor instructions also listed as supported\n+in @ref{arm_coproc1_ok} in addition to the following: @code{CDP2}, @code{LDC2},\n+@code{LDC2l}, @code{STC2}, @code{STC2l}, @code{MCR2} and @code{MRC2}.\n+\n+@item arm_coproc3_ok\n+@anchor{arm_coproc3_ok}\n+ARM target supports all the coprocessor instructions also listed as supported\n+in @ref{arm_coproc2_ok} in addition the following: @code{MCRR} and @code{MRRC}.\n+\n+@item arm_coproc4_ok\n+ARM target supports all the coprocessor instructions also listed as supported\n+in @ref{arm_coproc3_ok} in addition the following: @code{MCRR2} and @code{MRRC2}.\n @end table\n \n @subsubsection AArch64-specific attributes"}, {"sha": "2ca391cf0f241438ae1e76ec6b855aa75d412735", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -1,3 +1,19 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/acle/acle.exp: Run tests for different options\n+\tand make sure fat-lto-objects is used such that we can still do\n+\tassemble scans.\n+\t* gcc.target/arm/acle/cdp.c: New.\n+\t* gcc.target/arm/acle/cdp2.c: New.\n+\t* lib/target-supports.exp (check_effective_target_arm_coproc1_ok): New.\n+\t(check_effective_target_arm_coproc1_ok_nocache): New.\n+\t(check_effective_target_arm_coproc2_ok): New.\n+\t(check_effective_target_arm_coproc2_ok_nocache): New.\n+\t(check_effective_target_arm_coproc3_ok): New.\n+\t(check_effective_target_arm_coproc3_ok_nocache): New.\n+\t(check_effective_target_arm_coproc4_ok): New.\n+\t(check_effective_target_arm_coproc4_ok_nocache): New.\n+\n 2017-01-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/78605"}, {"sha": "aebf71cfbae594d951960c9ebfd3608003f7df78", "filename": "gcc/testsuite/gcc.target/arm/acle/acle.exp", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Facle.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Facle.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Facle.exp?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -27,9 +27,26 @@ load_lib gcc-dg.exp\n # Initialize `dg'.\n dg-init\n \n+set saved-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default \"assemble\"\n+\n+set saved-lto_torture_options ${LTO_TORTURE_OPTIONS}\n+\n+# Add -ffat-lto-objects option to all LTO options such that we can do assembly\n+# scans.\n+proc add_fat_objects { list } {\n+    set res {}\n+    foreach el $list {set res [lappend res [concat $el \" -ffat-lto-objects\"]]}\n+    return $res\n+};\n+set LTO_TORTURE_OPTIONS [add_fat_objects ${LTO_TORTURE_OPTIONS}]\n+\n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n \t\"\" \"\"\n \n+# Restore globals\n+set dg-do-what-default ${saved-dg-do-what-default}\n+set LTO_TORTURE_OPTIONS ${saved-lto_torture_options}\n # All done.\n dg-finish"}, {"sha": "28b218e7cfcdb7d6ce1381feb4c6dea3ff08a620", "filename": "gcc/testsuite/gcc.target/arm/acle/cdp.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcdp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcdp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcdp.c?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -0,0 +1,14 @@\n+/* Test the cdp ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc1_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_cdp (void)\n+{\n+  __arm_cdp (10, 1, 2, 3, 4, 5);\n+}\n+\n+/* { dg-final { scan-assembler \"cdp\\tp10, #1, CR2, CR3, CR4, #5\\n\" } } */"}, {"sha": "00bcd502b563cfe6df1e5d4c2e53f8034063d47e", "filename": "gcc/testsuite/gcc.target/arm/acle/cdp2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcdp2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcdp2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcdp2.c?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -0,0 +1,14 @@\n+/* Test the cdp2 ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc2_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_cdp2 (void)\n+{\n+  __arm_cdp2 (10, 4, 3, 2, 1, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"cdp2\\tp10, #4, CR3, CR2, CR1, #0\\n\" } } */"}, {"sha": "342304da4b5fd02c70956496bcd03cdabaf78b01", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57daa0c9d47b15781359f7a2898c991e560463d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d57daa0c9d47b15781359f7a2898c991e560463d", "patch": "@@ -8239,3 +8239,78 @@ proc check_effective_target_store_merge { } {\n \n     return 0\n }\n+\n+# Return 1 if the target supports coprocessor instructions: cdp, ldc, stc, mcr and\n+# mrc.\n+proc check_effective_target_arm_coproc1_ok_nocache { } {\n+    if { ![istarget arm*-*-*] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages_nocache arm_coproc1_ok assembly {\n+\t#if (__thumb__ && !__thumb2__) || __ARM_ARCH < 4\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n+proc check_effective_target_arm_coproc1_ok { } {\n+    return [check_cached_effective_target arm_coproc1_ok \\\n+\t\tcheck_effective_target_arm_coproc1_ok_nocache]\n+}\n+\n+# Return 1 if the target supports all coprocessor instructions checked by\n+# check_effective_target_arm_coproc1_ok in addition to the following: cdp2,\n+# ldc2, ldc2l, stc2, stc2l, mcr2 and mrc2.\n+proc check_effective_target_arm_coproc2_ok_nocache { } {\n+    if { ![check_effective_target_arm_coproc1_ok] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages_nocache arm_coproc2_ok assembly {\n+\t#if __ARM_ARCH < 5\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n+proc check_effective_target_arm_coproc2_ok { } {\n+    return [check_cached_effective_target arm_coproc2_ok \\\n+\t\tcheck_effective_target_arm_coproc2_ok_nocache]\n+}\n+\n+# Return 1 if the target supports all coprocessor instructions checked by\n+# check_effective_target_arm_coproc2_ok in addition the following: mcrr and\n+mrrc.\n+proc check_effective_target_arm_coproc3_ok_nocache { } {\n+    if { ![check_effective_target_arm_coproc2_ok] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages_nocache arm_coproc3_ok assembly {\n+\t#if __ARM_ARCH < 6 && !defined (__ARM_ARCH_5TE__)\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n+proc check_effective_target_arm_coproc3_ok { } {\n+    return [check_cached_effective_target arm_coproc3_ok \\\n+\t\tcheck_effective_target_arm_coproc3_ok_nocache]\n+}\n+\n+# Return 1 if the target supports all coprocessor instructions checked by\n+# check_effective_target_arm_coproc3_ok in addition the following: mcrr2 and\n+# mrcc2.\n+proc check_effective_target_arm_coproc4_ok_nocache { } {\n+    if { ![check_effective_target_arm_coproc3_ok] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages_nocache arm_coproc4_ok assembly {\n+\t#if __ARM_ARCH < 6\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n+proc check_effective_target_arm_coproc4_ok { } {\n+    return [check_cached_effective_target arm_coproc4_ok \\\n+\t\tcheck_effective_target_arm_coproc4_ok_nocache]\n+}"}]}