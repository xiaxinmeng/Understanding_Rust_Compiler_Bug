{"sha": "9299a27c3adcdc53faae32b56015f8c009c94835", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5OWEyN2MzYWRjZGM1M2ZhYWUzMmI1NjAxNWY4YzAwOWM5NDgzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-20T16:13:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-20T16:13:06Z"}, "message": "raise-gcc.c: Fix formatting nits.\n\n2008-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* raise-gcc.c: Fix formatting nits.\n\nFrom-SVN: r139334", "tree": {"sha": "3f744fd84b412ba50bc714be2f6d4c5e50a2ea0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f744fd84b412ba50bc714be2f6d4c5e50a2ea0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9299a27c3adcdc53faae32b56015f8c009c94835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9299a27c3adcdc53faae32b56015f8c009c94835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9299a27c3adcdc53faae32b56015f8c009c94835", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9299a27c3adcdc53faae32b56015f8c009c94835/comments", "author": null, "committer": null, "parents": [{"sha": "8d95c5807351d1dfde5e81ecfd8a65524eec4f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d95c5807351d1dfde5e81ecfd8a65524eec4f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d95c5807351d1dfde5e81ecfd8a65524eec4f8b"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "db19408e0319b9e678fed5f400878a17e34fca97", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9299a27c3adcdc53faae32b56015f8c009c94835/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9299a27c3adcdc53faae32b56015f8c009c94835/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9299a27c3adcdc53faae32b56015f8c009c94835", "patch": "@@ -1,3 +1,28 @@\n+2008-08-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Gnatmake): Remove extra space in version line\n+\n+\t* ali.adb:\n+\t(Scan_ALI): Use Name_Find, not Name_Enter to get the name of a subunit,\n+\tas the name may already have been entered in the table by the Project\n+\tManager.\n+\n+2008-08-20  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* errno.c (__get_errno, __set_errno for MaRTE): Transform then into\n+\tweak symbols so we use the version provided by MaRTE when available.\n+\n+2008-08-20  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-catiio.ads, g-catiio.adb:\n+\t(Value): Avoid an unnecessary system call to Clock in most cases.\n+\tThis call is only needed when only the time is provided in the string,\n+\tand ignored in all other cases. This is more efficient.\n+\n+2008-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* raise-gcc.c: Fix formatting nits.\n+\n 2008-08-20  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb:"}, {"sha": "64af52cbedb87340a5f913d8101a1b00f5e901f7", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9299a27c3adcdc53faae32b56015f8c009c94835/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9299a27c3adcdc53faae32b56015f8c009c94835/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=9299a27c3adcdc53faae32b56015f8c009c94835", "patch": "@@ -663,16 +663,13 @@ db_action_for (action_descriptor *action, _Unwind_Context *uw_context)\n   return;\n }\n \n-\n /* Search the call_site_table of REGION for an entry appropriate for the\n-   UW_CONTEXT's ip. If one is found, store the associated landing_pad and\n-   action_table entry, and set the ACTION kind to unknown for further\n-   analysis. Otherwise, set the ACTION kind to nothing.\n+   UW_CONTEXT's IP.  If one is found, store the associated landing_pad\n+   and action_table entry, and set the ACTION kind to unknown for further\n+   analysis.  Otherwise, set the ACTION kind to nothing.\n \n    There are two variants of this routine, depending on the underlying\n-   mechanism (dwarf/sjlj), which account for differences in the tables\n-   organization.\n-*/\n+   mechanism (DWARF/SJLJ), which account for differences in the tables.  */\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n \n@@ -683,14 +680,13 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n                           region_descriptor *region,\n                           action_descriptor *action)\n {\n-  _Unwind_Ptr call_site\n-    = _Unwind_GetIP (uw_context) - 1;\n   /* Subtract 1 because GetIP returns the actual call_site value + 1.  */\n+  _Unwind_Ptr call_site = _Unwind_GetIP (uw_context) - 1;\n \n   /* call_site is a direct index into the call-site table, with two special\n-     values : -1 for no-action and 0 for \"terminate\". The latter should never\n-     show up for Ada. To test for the former, beware that _Unwind_Ptr might be\n-     unsigned.  */\n+     values : -1 for no-action and 0 for \"terminate\".  The latter should never\n+     show up for Ada.  To test for the former, beware that _Unwind_Ptr might\n+     be unsigned.  */\n \n   if ((int)call_site < 0)\n     {\n@@ -712,18 +708,17 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n       action->kind = unknown;\n \n       /* We have a direct index into the call-site table, but this table is\n-\t made of leb128 values, the encoding length of which is variable. We\n+\t made of leb128 values, the encoding length of which is variable.  We\n \t can't merely compute an offset from the index, then, but have to read\n \t all the entries before the one of interest.  */\n \n-      const unsigned char * p = region->call_site_table;\n+      const unsigned char *p = region->call_site_table;\n \n       do {\n \tp = read_uleb128 (p, &cs_lp);\n \tp = read_uleb128 (p, &cs_action);\n       } while (--call_site);\n \n-\n       action->landing_pad = cs_lp + 1;\n \n       if (cs_action)\n@@ -735,29 +730,26 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n     }\n }\n \n-#else\n-/* ! __USING_SJLJ_EXCEPTIONS__ */\n+#else /* !__USING_SJLJ_EXCEPTIONS__  */\n \n static void\n get_call_site_action_for (_Unwind_Context *uw_context,\n                           region_descriptor *region,\n                           action_descriptor *action)\n {\n-  _Unwind_Ptr ip\n-    = _Unwind_GetIP (uw_context) - 1;\n   /* Subtract 1 because GetIP yields a call return address while we are\n-     interested in information for the call point. This does not always yield\n-     the exact call instruction address but always brings the ip back within\n-     the corresponding region.\n+     interested in information for the call point.  This does not always\n+     yield the exact call instruction address but always brings the IP back\n+     within the corresponding region.\n \n      ??? When unwinding up from a signal handler triggered by a trap on some\n      instruction, we usually have the faulting instruction address here and\n      subtracting 1 might get us into the wrong region.  */\n+  _Unwind_Ptr ip = _Unwind_GetIP (uw_context) - 1;\n \n-  const unsigned char * p\n-    = region->call_site_table;\n+  const unsigned char *p = region->call_site_table;\n \n-  /* Unless we are able to determine otherwise ... */\n+  /* Unless we are able to determine otherwise...  */\n   action->kind = nothing;\n \n   db (DB_CSITE, \"\\n\");\n@@ -778,7 +770,7 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n \t  region->base+cs_start, cs_start, cs_len,\n \t  region->lp_base+cs_lp, cs_lp);\n \n-      /* The table is sorted, so if we've passed the ip, stop.  */\n+      /* The table is sorted, so if we've passed the IP, stop.  */\n       if (ip < region->base + cs_start)\n  \tbreak;\n \n@@ -807,7 +799,7 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n   db (DB_CSITE, \"---\\n\");\n }\n \n-#endif\n+#endif /* __USING_SJLJ_EXCEPTIONS__  */\n \n /* With CHOICE an exception choice representing an \"exception - when\"\n    argument, and PROPAGATED_EXCEPTION a pointer to the currently propagated"}]}