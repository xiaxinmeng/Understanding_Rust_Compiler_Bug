{"sha": "ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4ZDhiODkyMmEwMzRkZmFjNWNmZjlkNWZhNzgxZGM1N2M0OWVkMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-09T20:22:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-09T20:22:15Z"}, "message": "crtbegin.asm (__JCR_LIST__): New.\n\n        * config/alpha/crtbegin.asm (__JCR_LIST__): New.\n        (__do_global_dtors_aux): Use gp-relative static data to avoid\n        one dynamic relocation.\n        (__do_frame_setup): Register Java classes.\n        * config/alpha/crtend.asm (__JCR_END__): New.\n\nFrom-SVN: r44746", "tree": {"sha": "1da9d8a8afe474422c00e74d9991395bd85720d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1da9d8a8afe474422c00e74d9991395bd85720d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/comments", "author": null, "committer": null, "parents": [{"sha": "3b87de3d00a64485f6b72bfc448c17e799c83e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b87de3d00a64485f6b72bfc448c17e799c83e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b87de3d00a64485f6b72bfc448c17e799c83e30"}], "stats": {"total": 91, "additions": 56, "deletions": 35}, "files": [{"sha": "92b43523b8b4025baef4c55a2e5f3747cb2dd95c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "patch": "@@ -1,23 +1,31 @@\n+2001-08-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/crtbegin.asm (__JCR_LIST__): New.\n+\t(__do_global_dtors_aux): Use gp-relative static data to avoid\n+\tone dynamic relocation.\n+\t(__do_frame_setup): Register Java classes.\n+\t* config/alpha/crtend.asm (__JCR_END__): New.\n+\n 2001-08-09  Zack Weinberg  <zackw@stanford.edu>\n \n-\t * Makefile.in (HOST_CFLAGS): Take out -DGENERATOR_FILE.\n-\t (CONFIG_H, TCONFIG_H, TM_P_H): Update.\n-\t (GEN, STAGESTUFF): Add new files.\n-\t (insn-constants.h, s-constants, tm-preds.h, s-preds,\n-\t genconstants, genpreds, genconstants.o, genpreds.o): New rules.\n-\t (hashtab.o, safe-ctype.o): Add -DGENERATOR_FILE.\n-\t * mkconfig.sh: Include tm-preds.h in tm_p.h; insn-constants.h\n-\t as well as insn-codes.h and insn-flags.h in config.h; and no\n-\t extra headers in tconfig.h and hconfig.h.\n-\n-\t * gencodes.c: Eliminate code to generate predicate declarations\n-\t or #defines for md-file constants.\n-\t * genconstants.c, genpreds.c: New files.\n-\n-\t * i386.md: Re-order guard expressions such that TARGET_64BIT\n-\t comes first, when this permits better optimization.  Add\n-\t TARGET_64BIT to more x86-64 patterns.  Add comment explaining\n-\t why this is desirable.\n+\t* Makefile.in (HOST_CFLAGS): Take out -DGENERATOR_FILE.\n+\t(CONFIG_H, TCONFIG_H, TM_P_H): Update.\n+\t(GEN, STAGESTUFF): Add new files.\n+\t(insn-constants.h, s-constants, tm-preds.h, s-preds,\n+\tgenconstants, genpreds, genconstants.o, genpreds.o): New rules.\n+\t(hashtab.o, safe-ctype.o): Add -DGENERATOR_FILE.\n+\t* mkconfig.sh: Include tm-preds.h in tm_p.h; insn-constants.h\n+\tas well as insn-codes.h and insn-flags.h in config.h; and no\n+\textra headers in tconfig.h and hconfig.h.\n+\n+\t* gencodes.c: Eliminate code to generate predicate declarations\n+\tor #defines for md-file constants.\n+\t* genconstants.c, genpreds.c: New files.\n+\n+\t* i386.md: Re-order guard expressions such that TARGET_64BIT\n+\tcomes first, when this permits better optimization.  Add\n+\tTARGET_64BIT to more x86-64 patterns.  Add comment explaining\n+\twhy this is desirable.\n \n 2001-08-09  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "96725b003b5a8e306d51af9baa16c0a0858dc428", "filename": "gcc/config/alpha/crtbegin.asm", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm?ref=ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "patch": "@@ -44,16 +44,18 @@\n    application's lists.  */\n \n .section .ctors,\"aw\"\n-\n \t.align 3\n __CTOR_LIST__:\n-\t.quad -1\n+\t.quad\t-1\n \n .section .dtors,\"aw\"\n-\n \t.align 3\n __DTOR_LIST__:\n-\t.quad -1\n+\t.quad\t-1\n+\n+.section .jcr,\"aw\"\n+\t.align 3\n+__JCR_LIST__:\n \n .section .eh_frame,\"aw\"\n __EH_FRAME_BEGIN__:\n@@ -96,9 +98,9 @@ __EH_FRAME_BEGIN__:\n \n /* Support recursive calls to exit.  */\n \t.type dtor_ptr,@object\n-\t.size dtor_ptr,8\n+\t.size dtor_ptr,4\n dtor_ptr:\n-\t.quad\t__DTOR_LIST__ + 8\n+\t.gprel32 __DTOR_LIST__ + 8\n \n /* A globally unique widget for c++ local destructors to hang off.\n \n@@ -150,12 +152,13 @@ __do_global_dtors_aux:\n \n 0:\tlda     $9,dtor_ptr\n \tbr      2f\n-1:\tstq\t$1,0($9)\n+1:\tstl\t$1,0($9)\n \tjsr     $26,($27)\n \tldgp\t$29,0($26)\n-2:\tldq\t$1,0($9)\n-\tldq     $27,0($1)\n-\taddq    $1,8,$1\n+2:\tldl\t$1,0($9)\n+\taddq\t$1,$29,$2\n+\tldq     $27,0($2)\n+\taddl    $1,8,$1\n \tbne     $27,1b\n \n \t/* Remove our frame info.  */\n@@ -173,11 +176,9 @@ __do_global_dtors_aux:\n \t.end __do_global_dtors_aux\n \n /*\n- * Install our frame info.\n+ * Install our frame info; register java classes, if any.\n  */\n \n-/* ??? How can we rationally keep this size correct?  */\n-\n .section .bss\n \t.type frame_object,@object\n \t.size frame_object, 48\n@@ -205,8 +206,16 @@ __do_frame_setup:\n \tjsr\t$26,__register_frame_info\n \tldgp\t$29,0($26)\n \n-\tldq     $26,0($30)\n-0:\tlda     $30,16($30)\n+0:\tlda\t$1,_Jv_RegisterClasses\n+\tlda\t$16,__JCR_LIST__\n+\tbeq\t$1,0f\n+\tldq\t$2,8($16)\n+\tbeq\t$2,0f\n+\tjsr\t$26,_Jv_RegisterClasses\n+\tldgp\t$29,0($26)\n+\n+0:\tldq     $26,0($30)\n+\tlda     $30,16($30)\n \tret\n \n \t.end __do_frame_setup\n@@ -216,3 +225,4 @@ __do_frame_setup:\n #ifdef SHARED\n .weak __cxa_finalize\n #endif\n+.weak _Jv_RegisterClasses"}, {"sha": "1ffd808bf604ef1ef15f3116428c03c83e0c7522", "filename": "gcc/config/alpha/crtend.asm", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtend.asm?ref=ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "patch": "@@ -41,17 +41,20 @@\n    application's lists.  */\n \n .section .ctors,\"aw\"\n-\n \t.align 3\n __CTOR_END__:\n \t.quad   0\n \n .section .dtors,\"aw\"\n-\n \t.align 3\n __DTOR_END__:\n \t.quad   0\n \n+.section .jcr,\"aw\"\n+\t.align 3\n+__JCR_END__:\n+\t.quad\t0\n+\n .section .eh_frame,\"aw\"\n __FRAME_END__:\n \t.quad\t0"}]}