{"sha": "b852aa7f265424c8e2036899da5d8306ff06a16c", "node_id": "C_kwDOANBUbNoAKGI4NTJhYTdmMjY1NDI0YzhlMjAzNjg5OWRhNWQ4MzA2ZmYwNmExNmM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-21T21:29:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-21T21:29:26Z"}, "message": "analyzer: fix -Wanalyzer-va-list-exhausted false +ve on va_arg in subroutine [PR106383]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106383\n\t* varargs.cc (region_model::impl_call_va_arg): When determining if\n\twe're doing interprocedural analysis, use the stack depth of the\n\tframe in which va_start was called, rather than the current stack\n\tdepth.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106383\n\t* gcc.dg/analyzer/stdarg-3.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "c9bf07d3bf2e5a51b28c6202fd086a0a45fa1978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9bf07d3bf2e5a51b28c6202fd086a0a45fa1978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b852aa7f265424c8e2036899da5d8306ff06a16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b852aa7f265424c8e2036899da5d8306ff06a16c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b852aa7f265424c8e2036899da5d8306ff06a16c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b852aa7f265424c8e2036899da5d8306ff06a16c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "633e9920589ddfaf2d6da1c24ce99b18a2638db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633e9920589ddfaf2d6da1c24ce99b18a2638db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633e9920589ddfaf2d6da1c24ce99b18a2638db4"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "c45585ce4576237207c15685419f46e548bd34c8", "filename": "gcc/analyzer/varargs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b852aa7f265424c8e2036899da5d8306ff06a16c/gcc%2Fanalyzer%2Fvarargs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b852aa7f265424c8e2036899da5d8306ff06a16c/gcc%2Fanalyzer%2Fvarargs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fvarargs.cc?ref=b852aa7f265424c8e2036899da5d8306ff06a16c", "patch": "@@ -971,7 +971,7 @@ region_model::impl_call_va_arg (const call_details &cd)\n \t  const frame_region *frame_reg = arg_reg->get_frame_region ();\n \t  unsigned next_arg_idx = arg_reg->get_index ();\n \n-\t  if (get_stack_depth () > 1)\n+\t  if (frame_reg->get_stack_depth () > 1)\n \t    {\n \t      /* The interprocedural case: the called frame will have been\n \t\t populated with any variadic aruguments.\n@@ -1009,7 +1009,7 @@ region_model::impl_call_va_arg (const call_details &cd)\n \t\t any specific var_arg_regions populated within it.\n \t\t We already have a conjured_svalue for the result, so leave\n \t\t it untouched.  */\n-\t      gcc_assert (get_stack_depth () == 1);\n+\t      gcc_assert (frame_reg->get_stack_depth () == 1);\n \t    }\n \n \t  if (saw_problem)"}, {"sha": "68146147adb22a81fefcb75a5e14f00d6aec7cca", "filename": "gcc/testsuite/gcc.dg/analyzer/stdarg-3.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b852aa7f265424c8e2036899da5d8306ff06a16c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b852aa7f265424c8e2036899da5d8306ff06a16c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-3.c?ref=b852aa7f265424c8e2036899da5d8306ff06a16c", "patch": "@@ -0,0 +1,57 @@\n+typedef __builtin_va_list va_list;\n+\n+struct printf_spec {\n+  unsigned int type;\n+};\n+\n+int\n+format_decode(const char *fmt, struct printf_spec *spec);\n+\n+static int vbin_printf(const char *fmt, va_list args) {\n+  struct printf_spec spec;\n+  int width = 0;\n+\n+  while (*fmt) {\n+    int read = format_decode(fmt, &spec);\n+\n+    fmt += read;\n+\n+    switch (spec.type) {\n+    case 0:\n+      break;\n+    case 1:\n+      width = __builtin_va_arg(args, int); /* { dg-bogus \"-Wanalyzer-va-list-exhausted\" } */\n+      break;\n+    }\n+  }\n+\n+  return width;\n+}\n+\n+int bprintf(const char *fmt, ...) {\n+  va_list args;\n+  int ret;\n+\n+  __builtin_va_start(args, fmt);\n+  ret = vbin_printf(fmt, args);\n+  __builtin_va_end(args);\n+\n+  return ret;\n+}\n+\n+static int called_by_test_2 (va_list args)\n+{\n+  return __builtin_va_arg(args, int); /* { dg-bogus \"-Wanalyzer-va-list-exhausted\" } */\n+}\n+\n+int test_2 (const char *fmt, ...)\n+{\n+  va_list args;\n+  int ret;\n+\n+  __builtin_va_start (args, fmt);\n+  ret = called_by_test_2 (args);\n+  __builtin_va_end (args);\n+\n+  return ret;\n+}"}]}