{"sha": "183ae5958ebc357ebc7f4ca229fb499013430e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgzYWU1OTU4ZWJjMzU3ZWJjN2Y0Y2EyMjlmYjQ5OTAxMzQzMGUyNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-06-30T11:39:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-06-30T11:39:53Z"}, "message": "re PR middle-end/36671 (gfortran.dg/associated_1.f90)\n\n2008-06-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/36671\n\t* tree-ssa-structalias.c (handle_lhs_call): Add flags argument,\n\thandle calls from ECF_MALLOC functions.\n\t(handle_pure_call): ECF_MALLOC functions do not return\n\tcall-used memory.\n\t(find_func_aliases): Handle all calls, adjust calls to handle_lhs_call.\n\nFrom-SVN: r137271", "tree": {"sha": "e0c05af25d6af9cebb7bc3e8cee62c9e2895f3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0c05af25d6af9cebb7bc3e8cee62c9e2895f3c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/183ae5958ebc357ebc7f4ca229fb499013430e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183ae5958ebc357ebc7f4ca229fb499013430e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183ae5958ebc357ebc7f4ca229fb499013430e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183ae5958ebc357ebc7f4ca229fb499013430e25/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3ec709716f079379652de4b2a5e2c014089aca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ec709716f079379652de4b2a5e2c014089aca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ec709716f079379652de4b2a5e2c014089aca9"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "b4695d3eeac934b42f157a0b5bebe3b6be373d8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae5958ebc357ebc7f4ca229fb499013430e25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae5958ebc357ebc7f4ca229fb499013430e25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=183ae5958ebc357ebc7f4ca229fb499013430e25", "patch": "@@ -1,3 +1,12 @@\n+2008-06-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/36671\n+\t* tree-ssa-structalias.c (handle_lhs_call): Add flags argument,\n+\thandle calls from ECF_MALLOC functions.\n+\t(handle_pure_call): ECF_MALLOC functions do not return\n+\tcall-used memory.\n+\t(find_func_aliases): Handle all calls, adjust calls to handle_lhs_call.\n+\n 2008-06-29  Andreas Schwab  <schwab@suse.de>\n \n \t* config/m68k/m68k.c (print_operand): Always print a float"}, {"sha": "0824b3666a8d3f08181cb60160a66f880f6bd632", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae5958ebc357ebc7f4ca229fb499013430e25/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae5958ebc357ebc7f4ca229fb499013430e25/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=183ae5958ebc357ebc7f4ca229fb499013430e25", "patch": "@@ -3381,17 +3381,44 @@ handle_rhs_call  (tree rhs)\n    the LHS point to global and escaped variables.  */\n \n static void\n-handle_lhs_call (tree lhs)\n+handle_lhs_call (tree lhs, int flags)\n {\n   VEC(ce_s, heap) *lhsc = NULL;\n   struct constraint_expr rhsc;\n   unsigned int j;\n   struct constraint_expr *lhsp;\n \n   get_constraint_for (lhs, &lhsc);\n-  rhsc.var = escaped_id;\n-  rhsc.offset = 0;\n-  rhsc.type = ADDRESSOF;\n+\n+  if (flags & ECF_MALLOC)\n+    {\n+      tree heapvar = heapvar_lookup (lhs);\n+      varinfo_t vi;\n+\n+      if (heapvar == NULL)\n+\t{\n+\t  heapvar = create_tmp_var_raw (ptr_type_node, \"HEAP\");\n+\t  DECL_EXTERNAL (heapvar) = 1;\n+\t  get_var_ann (heapvar)->is_heapvar = 1;\n+\t  if (gimple_referenced_vars (cfun))\n+\t    add_referenced_var (heapvar);\n+\t  heapvar_insert (lhs, heapvar);\n+\t}\n+\n+      rhsc.var = create_variable_info_for (heapvar,\n+\t\t\t\t\t   alias_get_name (heapvar));\n+      vi = get_varinfo (rhsc.var);\n+      vi->is_artificial_var = 1;\n+      vi->is_heap_var = 1;\n+      rhsc.type = ADDRESSOF;\n+      rhsc.offset = 0;\n+    }\n+  else\n+    {\n+      rhsc.var = escaped_id;\n+      rhsc.offset = 0;\n+      rhsc.type = ADDRESSOF;\n+    }\n   for (j = 0; VEC_iterate (ce_s, lhsc, j, lhsp); j++)\n     process_constraint (new_constraint (*lhsp, rhsc));\n   VEC_free (ce_s, heap, lhsc);\n@@ -3470,9 +3497,10 @@ handle_pure_call (tree stmt)\n     make_constraint_to (callused_id, CALL_EXPR_STATIC_CHAIN (call));\n \n   /* If the call returns a pointer it may point to reachable memory\n-     from the arguments.  */\n+     from the arguments.  Not so for malloc functions though.  */\n   if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n-      && could_have_pointers (GIMPLE_STMT_OPERAND (stmt, 0)))\n+      && could_have_pointers (GIMPLE_STMT_OPERAND (stmt, 0))\n+      && !(call_expr_flags (call) & ECF_MALLOC))\n     {\n       tree lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n       VEC(ce_s, heap) *lhsc = NULL;\n@@ -3518,7 +3546,6 @@ find_func_aliases (tree origt)\n   VEC(ce_s, heap) *rhsc = NULL;\n   struct constraint_expr *c;\n   enum escape_type stmt_escape_type;\n-  int flags;\n \n   if (TREE_CODE (t) == RETURN_EXPR && TREE_OPERAND (t, 0))\n     t = TREE_OPERAND (t, 0);\n@@ -3567,10 +3594,9 @@ find_func_aliases (tree origt)\n \n      In non-ipa mode, we need to generate constraints for each\n      pointer passed by address.  */\n-  else if ((call = get_call_expr_in (t)) != NULL_TREE\n-\t   && !((flags = call_expr_flags (call))\n-\t\t& (ECF_MALLOC | ECF_MAY_BE_ALLOCA)))\n+  else if ((call = get_call_expr_in (t)) != NULL_TREE)\n     {\n+      int flags = call_expr_flags (call);\n       if (!in_ipa_mode)\n \t{\n \t  /* Const functions can return their arguments and addresses\n@@ -3586,7 +3612,7 @@ find_func_aliases (tree origt)\n \t      handle_pure_call (t);\n \t      if (TREE_CODE (t) == GIMPLE_MODIFY_STMT\n \t\t  && could_have_pointers (GIMPLE_STMT_OPERAND (t, 1)))\n-\t\thandle_lhs_call (GIMPLE_STMT_OPERAND (t, 0));\n+\t\thandle_lhs_call (GIMPLE_STMT_OPERAND (t, 0), flags);\n \t    }\n \t  /* Pure functions can return addresses in and of memory\n \t     reachable from their arguments, but they are not an escape\n@@ -3597,7 +3623,7 @@ find_func_aliases (tree origt)\n \t    {\n \t      handle_rhs_call (GIMPLE_STMT_OPERAND (t, 1));\n \t      if (could_have_pointers (GIMPLE_STMT_OPERAND (t, 1)))\n-\t\thandle_lhs_call (GIMPLE_STMT_OPERAND (t, 0));\n+\t\thandle_lhs_call (GIMPLE_STMT_OPERAND (t, 0), flags);\n \t    }\n \t  else\n \t    handle_rhs_call (t);"}]}