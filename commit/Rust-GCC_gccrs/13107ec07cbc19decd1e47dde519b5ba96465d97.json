{"sha": "13107ec07cbc19decd1e47dde519b5ba96465d97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxMDdlYzA3Y2JjMTlkZWNkMWU0N2RkZTUxOWI1YmE5NjQ2NWQ5Nw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-07-28T06:57:31Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-07-28T06:57:31Z"}, "message": "class.c (make_class_data): Create vtable for abstract classes.\n\n2000-07-27  Tom Tromey  <tromey@cygnus.com>\n            Anthony Green  <green@cygnus.com>\n\t    Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* class.c (make_class_data): Create vtable for abstract classes.\n\t(get_dispatch_table): Changed to cope with abstract classes.\n\nCo-Authored-By: Alexandre Petit-Bianco <apbianco@cygnus.com>\nCo-Authored-By: Anthony Green <green@cygnus.com>\n\nFrom-SVN: r35313", "tree": {"sha": "697949046fd699107202fccdfe7b39ed78ac06e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/697949046fd699107202fccdfe7b39ed78ac06e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13107ec07cbc19decd1e47dde519b5ba96465d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13107ec07cbc19decd1e47dde519b5ba96465d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13107ec07cbc19decd1e47dde519b5ba96465d97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13107ec07cbc19decd1e47dde519b5ba96465d97/comments", "author": null, "committer": null, "parents": [{"sha": "acacca102377f083aa09bf8c16295d6089b23bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acacca102377f083aa09bf8c16295d6089b23bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acacca102377f083aa09bf8c16295d6089b23bcd"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "9c7c1e4a2f7c049b7d785f1831d91a88ae2d3bbf", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13107ec07cbc19decd1e47dde519b5ba96465d97/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13107ec07cbc19decd1e47dde519b5ba96465d97/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=13107ec07cbc19decd1e47dde519b5ba96465d97", "patch": "@@ -1,3 +1,10 @@\n+2000-07-27  Tom Tromey  <tromey@cygnus.com>\n+            Anthony Green  <green@cygnus.com>\n+\t    Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* class.c (make_class_data): Create vtable for abstract classes.\n+\t(get_dispatch_table): Changed to cope with abstract classes.\n+\n 2000-07-27  Tom Tromey  <tromey@cygnus.com>\n \n \t* parse.y (patch_method_invocation): Don't reverse the argument"}, {"sha": "a291c5723a9b91c0b4556b8fb0ec142babe972a2", "filename": "gcc/java/class.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13107ec07cbc19decd1e47dde519b5ba96465d97/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13107ec07cbc19decd1e47dde519b5ba96465d97/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=13107ec07cbc19decd1e47dde519b5ba96465d97", "patch": "@@ -1218,6 +1218,7 @@ static tree\n get_dispatch_table (type, this_class_addr)\n      tree type, this_class_addr;\n {\n+  int abstract_p = CLASS_ABSTRACT (TYPE_NAME (type));\n   tree vtable = get_dispatch_vector (type);\n   int i;\n   tree list = NULL_TREE;\n@@ -1226,12 +1227,20 @@ get_dispatch_table (type, this_class_addr)\n     {\n       tree method = TREE_VEC_ELT (vtable, i);\n       if (METHOD_ABSTRACT (method))\n-\twarning_with_decl (method, \"abstract method in non-abstract class\");\n-      if (DECL_RTL (method) == 0)\n-\tmake_decl_rtl (method, NULL, 1);\n+\t{\n+\t  if (! abstract_p)\n+\t    warning_with_decl (method,\n+\t\t\t       \"abstract method in non-abstract class\");\n+\t  method = null_pointer_node;\n+\t}\n+      else\n+\t{\n+\t  if (DECL_RTL (method) == 0)\n+\t    make_decl_rtl (method, NULL, 1);\n+\t  method = build1 (ADDR_EXPR, nativecode_ptr_type_node, method);\n+\t}\n       list = tree_cons (NULL_TREE /*DECL_VINDEX (method) + 2*/,\n-\t\t\tbuild1 (ADDR_EXPR, nativecode_ptr_type_node, method),\n-\t\t\tlist);\n+\t\t\tmethod, list);\n     }\n   /* Dummy entry for compatibility with G++ -fvtable-thunks.  When\n      using the Boehm GC we sometimes stash a GC type descriptor\n@@ -1345,7 +1354,7 @@ make_class_data (type)\n   rest_of_decl_compilation (methods_decl, (char*) 0, 1, 0);\n \n   if (assume_compiled (IDENTIFIER_POINTER (DECL_NAME (type_decl)))\n-      && ! CLASS_ABSTRACT (type_decl) && ! CLASS_INTERFACE (type_decl))\n+      && ! CLASS_INTERFACE (type_decl))\n     {\n       tree dtable = get_dispatch_table (type, this_class_addr);\n       dtable_decl = build_dtable_decl (type);"}]}