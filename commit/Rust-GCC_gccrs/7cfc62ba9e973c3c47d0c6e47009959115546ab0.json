{"sha": "7cfc62ba9e973c3c47d0c6e47009959115546ab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmYzYyYmE5ZTk3M2MzYzQ3ZDBjNmU0NzAwOTk1OTExNTU0NmFiMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T23:24:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T23:24:33Z"}, "message": "Don't crash on index into erroneous map.\n\nFrom-SVN: r168185", "tree": {"sha": "db08969db81beda62fb5cb5e6ec3055828033bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db08969db81beda62fb5cb5e6ec3055828033bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cfc62ba9e973c3c47d0c6e47009959115546ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cfc62ba9e973c3c47d0c6e47009959115546ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cfc62ba9e973c3c47d0c6e47009959115546ab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cfc62ba9e973c3c47d0c6e47009959115546ab0/comments", "author": null, "committer": null, "parents": [{"sha": "8332d80edb206e7de917f8a9f01ab6eec3ce8231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8332d80edb206e7de917f8a9f01ab6eec3ce8231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8332d80edb206e7de917f8a9f01ab6eec3ce8231"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "491b71ab748cc42a02786e06bc9083a741798854", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cfc62ba9e973c3c47d0c6e47009959115546ab0/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cfc62ba9e973c3c47d0c6e47009959115546ab0/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7cfc62ba9e973c3c47d0c6e47009959115546ab0", "patch": "@@ -9630,7 +9630,8 @@ Map_type*\n Map_index_expression::get_map_type() const\n {\n   Map_type* mt = this->map_->type()->deref()->map_type();\n-  gcc_assert(mt != NULL);\n+  if (mt == NULL)\n+    gcc_assert(saw_errors());\n   return mt;\n }\n \n@@ -9649,7 +9650,10 @@ Map_index_expression::do_traverse(Traverse* traverse)\n Type*\n Map_index_expression::do_type()\n {\n-  Type* type = this->get_map_type()->val_type();\n+  Map_type* mt = this->get_map_type();\n+  if (mt == NULL)\n+    return Type::make_error_type();\n+  Type* type = mt->val_type();\n   // If this map index is in a tuple assignment, we actually return a\n   // pointer to the value type.  Tuple_map_assignment_statement is\n   // responsible for handling this correctly.  We need to get the type\n@@ -9665,7 +9669,9 @@ void\n Map_index_expression::do_determine_type(const Type_context*)\n {\n   this->map_->determine_type_no_context();\n-  Type_context subcontext(this->get_map_type()->key_type(), false);\n+  Map_type* mt = this->get_map_type();\n+  Type* key_type = mt == NULL ? NULL : mt->key_type();\n+  Type_context subcontext(key_type, false);\n   this->index_->determine_type(&subcontext);\n }\n \n@@ -9675,8 +9681,10 @@ void\n Map_index_expression::do_check_types(Gogo*)\n {\n   std::string reason;\n-  if (!Type::are_assignable(this->get_map_type()->key_type(),\n-\t\t\t    this->index_->type(), &reason))\n+  Map_type* mt = this->get_map_type();\n+  if (mt == NULL)\n+    return;\n+  if (!Type::are_assignable(mt->key_type(), this->index_->type(), &reason))\n     {\n       if (reason.empty())\n \tthis->report_error(_(\"incompatible type for map index\"));\n@@ -9695,6 +9703,8 @@ tree\n Map_index_expression::do_get_tree(Translate_context* context)\n {\n   Map_type* type = this->get_map_type();\n+  if (type == NULL)\n+    return error_mark_node;\n \n   tree valptr = this->get_value_pointer(context, this->is_lvalue_);\n   if (valptr == error_mark_node)\n@@ -9732,6 +9742,8 @@ Map_index_expression::get_value_pointer(Translate_context* context,\n \t\t\t\t\tbool insert)\n {\n   Map_type* type = this->get_map_type();\n+  if (type == NULL)\n+    return error_mark_node;\n \n   tree map_tree = this->map_->get_tree(context);\n   tree index_tree = this->index_->get_tree(context);"}, {"sha": "aa62ce6d868b0c88c504b7cab1f707d14d657b5c", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cfc62ba9e973c3c47d0c6e47009959115546ab0/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cfc62ba9e973c3c47d0c6e47009959115546ab0/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=7cfc62ba9e973c3c47d0c6e47009959115546ab0", "patch": "@@ -3160,7 +3160,12 @@ Type*\n Variable::type_from_tuple(Expression* expr, bool report_error) const\n {\n   if (expr->map_index_expression() != NULL)\n-    return expr->map_index_expression()->get_map_type()->val_type();\n+    {\n+      Map_type* mt = expr->map_index_expression()->get_map_type();\n+      if (mt == NULL)\n+\treturn Type::make_error_type();\n+      return mt->val_type();\n+    }\n   else if (expr->receive_expression() != NULL)\n     {\n       Expression* channel = expr->receive_expression()->channel();"}, {"sha": "b5ded99e158c57028c00445b18c638e783d2eee5", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cfc62ba9e973c3c47d0c6e47009959115546ab0/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cfc62ba9e973c3c47d0c6e47009959115546ab0/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=7cfc62ba9e973c3c47d0c6e47009959115546ab0", "patch": "@@ -922,6 +922,8 @@ Tuple_map_assignment_statement::do_lower(Gogo*, Block* enclosing)\n       return Statement::make_error_statement(loc);\n     }\n   Map_type* map_type = map_index->get_map_type();\n+  if (map_type == NULL)\n+    return Statement::make_error_statement(loc);\n \n   Block* b = new Block(enclosing, loc);\n \n@@ -1066,6 +1068,8 @@ Map_assignment_statement::do_lower(Gogo*, Block* enclosing)\n       return Statement::make_error_statement(loc);\n     }\n   Map_type* map_type = map_index->get_map_type();\n+  if (map_type == NULL)\n+    return Statement::make_error_statement(loc);\n \n   Block* b = new Block(enclosing, loc);\n "}]}