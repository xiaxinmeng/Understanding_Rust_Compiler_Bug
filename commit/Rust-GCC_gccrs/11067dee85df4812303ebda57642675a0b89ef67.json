{"sha": "11067dee85df4812303ebda57642675a0b89ef67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwNjdkZWU4NWRmNDgxMjMwM2ViZGE1NzY0MjY3NWEwYjg5ZWY2Nw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2018-12-13T20:54:27Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2018-12-13T20:54:27Z"}, "message": "re PR rtl-optimization/88414 (ICE in lra_assign, at lra-assigns.c:1624)\n\n2018-12-13  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/88414\n\t* lra-int.h (lra_asm_error_p): New.\n\t* lra-assigns.c (lra_assign): Check lra_asm_error_p for checking\n\tcall crossed pseudo assignment correctness.\n\t(lra_split_hard_reg_for): Set up lra_asm_error_p.\n\t* lra-constraints.c (curr_insn_transform): Ditto.\n\t* lra.c (lra_asm_error_p): New.\n\t(lra): Reset lra_asm_error_p.\n\n2018-12-13  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/88414\n\t* gcc.target/i386/pr88414.c: New.\n\nFrom-SVN: r267109", "tree": {"sha": "9ad654ea7adca3344fcf62deb2226109e55539ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ad654ea7adca3344fcf62deb2226109e55539ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11067dee85df4812303ebda57642675a0b89ef67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11067dee85df4812303ebda57642675a0b89ef67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11067dee85df4812303ebda57642675a0b89ef67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11067dee85df4812303ebda57642675a0b89ef67/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b46e1a69975d64ad436ff1c928e008105b2b2a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46e1a69975d64ad436ff1c928e008105b2b2a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46e1a69975d64ad436ff1c928e008105b2b2a8d"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "2029c98b09e634c2d730f1b2e19523203f2334ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11067dee85df4812303ebda57642675a0b89ef67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11067dee85df4812303ebda57642675a0b89ef67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11067dee85df4812303ebda57642675a0b89ef67", "patch": "@@ -1,3 +1,14 @@\n+2018-12-13  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/88414\n+\t* lra-int.h (lra_asm_error_p): New.\n+\t* lra-assigns.c (lra_assign): Check lra_asm_error_p for checking\n+\tcall crossed pseudo assignment correctness.\n+\t(lra_split_hard_reg_for): Set up lra_asm_error_p.\n+\t* lra-constraints.c (curr_insn_transform): Ditto.\n+\t* lra.c (lra_asm_error_p): New.\n+\t(lra): Reset lra_asm_error_p.\n+\n 2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/88416"}, {"sha": "6b9d3ae4deb76df705b4c7990710ff28877f61f4", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=11067dee85df4812303ebda57642675a0b89ef67", "patch": "@@ -1615,7 +1615,10 @@ lra_assign (bool &fails_p)\n   bitmap_initialize (&all_spilled_pseudos, &reg_obstack);\n   create_live_range_start_chains ();\n   setup_live_pseudos_and_spill_after_risky_transforms (&all_spilled_pseudos);\n-  if (flag_checking && !flag_ipa_ra)\n+  if (! lra_asm_error_p && flag_checking && !flag_ipa_ra)\n+    /* Check correctness of allocation for call-crossed pseudos but\n+       only when there are no asm errors as in the case of errors the\n+       asm is removed and it can result in incorrect allocation.  */\n     for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n       if (lra_reg_info[i].nrefs != 0 && reg_renumber[i] >= 0\n \t  && lra_reg_info[i].call_p\n@@ -1783,7 +1786,7 @@ lra_split_hard_reg_for (void)\n       insn = lra_insn_recog_data[u]->insn;\n       if (asm_noperands (PATTERN (insn)) >= 0)\n \t{\n-\t  asm_p = true;\n+\t  lra_asm_error_p = asm_p = true;\n \t  error_for_asm (insn,\n \t\t\t \"%<asm%> operand has impossible constraints\");\n \t  /* Avoid further trouble with this insn."}, {"sha": "c061093ed699620afe2dfda60d58066d6967523a", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=11067dee85df4812303ebda57642675a0b89ef67", "patch": "@@ -3940,6 +3940,7 @@ curr_insn_transform (bool check_only_p)\n \tfatal_insn (\"unable to generate reloads for:\", curr_insn);\n       error_for_asm (curr_insn,\n \t\t     \"inconsistent operand constraints in an %<asm%>\");\n+      lra_asm_error_p = true;\n       /* Avoid further trouble with this insn.  Don't generate use\n \t pattern here as we could use the insn SP offset.  */\n       lra_set_insn_deleted (curr_insn);"}, {"sha": "dc365d7ee69f9b222565345a41fd5e50c759ed32", "filename": "gcc/lra-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=11067dee85df4812303ebda57642675a0b89ef67", "patch": "@@ -288,6 +288,7 @@ typedef struct lra_insn_recog_data *lra_insn_recog_data_t;\n \n extern FILE *lra_dump_file;\n \n+extern bool lra_asm_error_p;\n extern bool lra_reg_spill_p;\n \n extern HARD_REG_SET lra_no_alloc_regs;"}, {"sha": "537b4ae7fa15a863502c55f5d905df4e340cbc90", "filename": "gcc/lra.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=11067dee85df4812303ebda57642675a0b89ef67", "patch": "@@ -2334,6 +2334,9 @@ bitmap_head lra_subreg_reload_pseudos;\n /* File used for output of LRA debug information.  */\n FILE *lra_dump_file;\n \n+/* True if we found an asm error.  */\n+bool lra_asm_error_p;\n+\n /* True if we should try spill into registers of different classes\n    instead of memory.  */\n bool lra_reg_spill_p;\n@@ -2371,7 +2374,8 @@ lra (FILE *f)\n   bool live_p, inserted_p;\n \n   lra_dump_file = f;\n-\n+  lra_asm_error_p = false;\n+  \n   timevar_push (TV_LRA);\n \n   /* Make sure that the last insn is a note.  Some subsequent passes"}, {"sha": "2fe17d2d54e0f85ffba734ab05f84ea0b7874df9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11067dee85df4812303ebda57642675a0b89ef67", "patch": "@@ -1,3 +1,8 @@\n+2018-12-13  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/88414\n+\t* gcc.target/i386/pr88414.c: New.\n+\n 2018-12-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88216 - ICE with class type in non-type template parameter."}, {"sha": "99a471e4ecee92db6e852a2e1ef739f90a08519d", "filename": "gcc/testsuite/gcc.target/i386/pr88414.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88414.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11067dee85df4812303ebda57642675a0b89ef67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88414.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88414.c?ref=11067dee85df4812303ebda57642675a0b89ef67", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftrapv\" } */\n+\n+unsigned int\n+foo (unsigned int *x, const unsigned int *y, int z, unsigned int w)\n+{\n+  unsigned int a, b, c, s;\n+  int j;\n+  j = -z;\n+  x -= j;\n+  y -= j;\n+  a = 0;\n+  do\n+    {\n+      asm volatile (\"\" : \"=d\" (b), \"=d\" (c) : \"r\" (y[j]), \"d\" (w)); /* { dg-error \"'asm' operand has impossible constraints\" } */\n+      c += a;\n+      a = (c < a) + b;\n+      s = x[j];\n+      c = s + c;\n+      a += (c < s);\n+      x[j] = c;\n+    }\n+  while (++j != 0);\n+  return a;\n+}"}]}