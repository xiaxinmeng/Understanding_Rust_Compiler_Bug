{"sha": "b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhiOThjNjZhZjY5MzY1ZTY0NTcxOGQzYmY3MmNjYWJhYTZlZjJhYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-01-29T09:52:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-01-29T09:52:51Z"}, "message": "re PR c++/5132 (NaN = 0.0 * HUGE_VAL fails to compile in templates)\n\ncp:\n\tPR c++/5132\n\t* typeck2.c (digest_init): Make sure non-array core type is\n\tinstantiated.\n\t* decl2.c (reparse_absdcl_as_casts): Just store the type in the\n\tconstructor, rather than build a new one.\n\t(build_expr_from_tree, CONSTRUCTOR case): Be careful with the\n\tPURPOSE of constructor elts.\ntestsuite:\n\t* g++.dg/template/ctor1.C: Add instantiation.\n\nFrom-SVN: r49314", "tree": {"sha": "957d80217ed43186278a3c6bc7ccb26b5ef4b738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/957d80217ed43186278a3c6bc7ccb26b5ef4b738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/comments", "author": null, "committer": null, "parents": [{"sha": "aee25e2d8eaf7610eef9a9ec234f0cd97bc1964b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee25e2d8eaf7610eef9a9ec234f0cd97bc1964b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee25e2d8eaf7610eef9a9ec234f0cd97bc1964b"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "567cd40a704c2ecaddb9ca80e2fe44fa768c2b7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "patch": "@@ -1,3 +1,13 @@\n+2002-01-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/5132\n+\t* typeck2.c (digest_init): Make sure non-array core type is\n+\tinstantiated.\n+\t* decl2.c (reparse_absdcl_as_casts): Just store the type in the\n+\tconstructor, rather than build a new one.\n+\t(build_expr_from_tree, CONSTRUCTOR case): Be careful with the\n+\tPURPOSE of constructor elts.\n+\n 2002-01-23  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Make-lang.in (parse.c): Adjust expected number of"}, {"sha": "95f142731a6608748746cffc68a079adbf1facfc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "patch": "@@ -3620,7 +3620,7 @@ reparse_absdcl_as_casts (decl, expr)\n       decl = TREE_OPERAND (decl, 0);\n \n       if (processing_template_decl)\n-\texpr = build_min (CONSTRUCTOR, type, decl, CONSTRUCTOR_ELTS (expr));\n+\tTREE_TYPE (expr) = type;\n       else\n \t{\n \t  expr = digest_init (type, expr, (tree *) 0);\n@@ -3938,17 +3938,35 @@ build_expr_from_tree (t)\n     case CONSTRUCTOR:\n       {\n \ttree r;\n+\ttree elts;\n+\ttree type = TREE_TYPE (t);\n+\tbool purpose_p;\n \n \t/* digest_init will do the wrong thing if we let it.  */\n-\tif (TREE_TYPE (t) && TYPE_PTRMEMFUNC_P (TREE_TYPE (t)))\n+\tif (type && TYPE_PTRMEMFUNC_P (type))\n \t  return t;\n \n-\tr = build_nt (CONSTRUCTOR, NULL_TREE,\n-\t\t      build_expr_from_tree (CONSTRUCTOR_ELTS (t)));\n+\tr = NULL_TREE;\n+\t/* We do not want to process the purpose of aggregate\n+\t   initializers as they are identifier nodes which will be\n+\t   looked up by digest_init.  */\n+\tpurpose_p = !(type && IS_AGGR_TYPE (type));\n+\tfor (elts = CONSTRUCTOR_ELTS (t); elts; elts = TREE_CHAIN (elts))\n+\t  {\n+\t    tree purpose = TREE_PURPOSE (elts);\n+\t    tree value = TREE_VALUE (elts);\n+\t    \n+\t    if (purpose && purpose_p)\n+\t      purpose = build_expr_from_tree (purpose);\n+\t    value = build_expr_from_tree (value);\n+\t    r = tree_cons (purpose, value, r);\n+\t  }\n+\t\n+\tr = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (r));\n \tTREE_HAS_CONSTRUCTOR (r) = TREE_HAS_CONSTRUCTOR (t);\n \n-\tif (TREE_TYPE (t))\n-\t  return digest_init (TREE_TYPE (t), r, 0);\n+\tif (type)\n+\t  return digest_init (type, r, 0);\n \treturn r;\n       }\n "}, {"sha": "314685a6a1b512edfb70eccbc5f5ffb0f175788e", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "patch": "@@ -458,6 +458,12 @@ digest_init (type, init, tail)\n     /* __PRETTY_FUNCTION__'s initializer is a bogus expression inside\n        a template function. This gets substituted during instantiation. */\n     return init;\n+\n+  /* We must strip the outermost array type when completing the type,\n+     because the its bounds might be incomplete at the moment.  */\n+  if (!complete_type_or_else (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t      ? TREE_TYPE (type) : type, NULL_TREE))\n+    return error_mark_node;\n   \n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n   if (TREE_CODE (init) == NON_LVALUE_EXPR)"}, {"sha": "247a0e734fc1a2d5b776bce1ebe05579038b6cfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "patch": "@@ -1,3 +1,7 @@\n+2002-01-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/template/ctor1.C: Add instantiation.\n+\n 2002-01-28  Paul Koning  <pkoning@equallogic.com>\n \n \t* gcc.c-torture/execute/builtin-prefetch-1.c: Changed first"}, {"sha": "81caa1fb47e097b28dcfcd3917ed9dd3f41614c0", "filename": "gcc/testsuite/g++.dg/template/ctor1.C", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8b98c66af69365e645718d3bf72ccabaa6ef2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor1.C?ref=b8b98c66af69365e645718d3bf72ccabaa6ef2ab", "patch": "@@ -20,3 +20,12 @@ template <class F>\n void Tfoo( const F&) {\n   HUGE_VAL; // g++ fails here\n }\n+\n+template <typename T> struct M { T m; };\n+\n+void Foo ()\n+{\n+  Tfoo (1.2f);\n+  (__extension__ ((M<int>) {m:3}));\n+  (__extension__ ((M<short> []) {{m:3}}));\n+}"}]}