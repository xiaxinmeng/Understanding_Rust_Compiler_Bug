{"sha": "cec4d4a6782c9bd8d071839c50a239c49caca689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjNGQ0YTY3ODJjOWJkOGQwNzE4MzljNTBhMjM5YzQ5Y2FjYTY4OQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-20T07:32:29Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-25T12:56:28Z"}, "message": "Add no_sanitize_coverage attribute.\n\ngcc/ChangeLog:\n\n\t* asan.h (sanitize_coverage_p): New function.\n\t* doc/extend.texi: Document it.\n\t* fold-const.c (fold_range_test): Use sanitize_flags_p\n\tinstead of flag_sanitize_coverage.\n\t(fold_truth_andor): Likewise.\n\t* sancov.c: Likewise.\n\t* tree-ssa-ifcombine.c (ifcombine_ifandif): Likewise.\n\t* ipa-inline.c (sanitize_attrs_match_for_inline_p): Handle\n\t-fsanitize-coverage when inlining.\n\ngcc/c-family/ChangeLog:\n\n\t* c-attribs.c (handle_no_sanitize_coverage_attribute): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/sancov/attribute.c: New test.", "tree": {"sha": "53cfafb14a918bd28342e2288ce210becd6bb35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53cfafb14a918bd28342e2288ce210becd6bb35b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cec4d4a6782c9bd8d071839c50a239c49caca689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec4d4a6782c9bd8d071839c50a239c49caca689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec4d4a6782c9bd8d071839c50a239c49caca689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec4d4a6782c9bd8d071839c50a239c49caca689/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c6b71c9b02a2b2e0b7107d982def09abeeae88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c6b71c9b02a2b2e0b7107d982def09abeeae88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c6b71c9b02a2b2e0b7107d982def09abeeae88"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "8c0b2baf1701b8829d149b68bd9fe3cb5070ebf6", "filename": "gcc/asan.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -249,4 +249,14 @@ sanitize_flags_p (unsigned int flag, const_tree fn = current_function_decl)\n   return result_flags;\n }\n \n+/* Return true when coverage sanitization should happend for FN function.  */\n+\n+static inline bool\n+sanitize_coverage_p (const_tree fn = current_function_decl)\n+{\n+  return (flag_sanitize_coverage\n+\t  && lookup_attribute (\"no_sanitize_coverage\",\n+\t\t\t       DECL_ATTRIBUTES (fn)) == NULL_TREE);\n+}\n+\n #endif /* TREE_ASAN */"}, {"sha": "671b27c3200596b6b330f752f56c09b724c128b9", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -62,6 +62,8 @@ static tree handle_no_address_safety_analysis_attribute (tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *);\n static tree handle_no_sanitize_undefined_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t    bool *);\n+static tree handle_no_sanitize_coverage_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t\t   bool *);\n static tree handle_asan_odr_indicator_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static tree handle_stack_protect_attribute (tree *, tree, tree, int, bool *);\n@@ -449,6 +451,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_no_sanitize_thread_attribute, NULL },\n   { \"no_sanitize_undefined\",  0, 0, true, false, false, false,\n \t\t\t      handle_no_sanitize_undefined_attribute, NULL },\n+  { \"no_sanitize_coverage\",   0, 0, true, false, false, false,\n+\t\t\t      handle_no_sanitize_coverage_attribute, NULL },\n   { \"asan odr indicator\",     0, 0, true, false, false, false,\n \t\t\t      handle_asan_odr_indicator_attribute, NULL },\n   { \"warning\",\t\t      1, 1, true,  false, false, false,\n@@ -1211,6 +1215,22 @@ handle_no_sanitize_undefined_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"no_sanitize_coverage\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_no_sanitize_coverage_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t       bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle an \"asan odr indicator\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "3ddeb0dee3a631ad6f2bfb1f9b880010cfa69064", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -3415,6 +3415,12 @@ The @code{no_sanitize_undefined} attribute on functions is used\n to inform the compiler that it should not check for undefined behavior\n in the function when compiling with the @option{-fsanitize=undefined} option.\n \n+@item no_sanitize_coverage\n+@cindex @code{no_sanitize_coverage} function attribute\n+The @code{no_sanitize_coverage} attribute on functions is used\n+to inform the compiler that it should not do coverage-guided\n+fuzzing code instrumentation (@option{-fsanitize-coverage}).\n+\n @item no_split_stack\n @cindex @code{no_split_stack} function attribute\n @opindex fsplit-stack"}, {"sha": "d088187a05750c80362631807055edc80ab247df", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -6016,7 +6016,7 @@ fold_range_test (location_t loc, enum tree_code code, tree type,\n     logical_op_non_short_circuit\n       = param_logical_op_non_short_circuit;\n   if (logical_op_non_short_circuit\n-      && !flag_sanitize_coverage\n+      && !sanitize_coverage_p ()\n       && lhs != 0 && rhs != 0\n       && (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)\n       && operand_equal_p (lhs, rhs, 0))\n@@ -9652,7 +9652,7 @@ fold_truth_andor (location_t loc, enum tree_code code, tree type,\n     logical_op_non_short_circuit\n       = param_logical_op_non_short_circuit;\n   if (logical_op_non_short_circuit\n-      && !flag_sanitize_coverage\n+      && !sanitize_coverage_p ()\n       && (code == TRUTH_AND_EXPR\n           || code == TRUTH_ANDIF_EXPR\n           || code == TRUTH_OR_EXPR"}, {"sha": "9d896beb2ac162dea493b1a6924b0fd17df8bd87", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -283,6 +283,9 @@ sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n \t!= sanitize_flags_p (codes[i], callee))\n       return false;\n \n+  if (sanitize_coverage_p (caller) != sanitize_coverage_p (callee))\n+    return false;\n+\n   return true;\n }\n "}, {"sha": "9cfbd425def3ac91b3e424674474e8a1e8e525db", "filename": "gcc/sancov.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fsancov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Fsancov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsancov.c?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -313,9 +313,9 @@ template <bool O0> class pass_sancov : public gimple_opt_pass\n     return new pass_sancov<O0> (m_ctxt);\n   }\n   virtual bool\n-  gate (function *)\n+  gate (function *fun)\n   {\n-    return flag_sanitize_coverage && (!O0 || !optimize);\n+    return sanitize_coverage_p (fun->decl) && (!O0 || !optimize);\n   }\n   virtual unsigned int\n   execute (function *fun)"}, {"sha": "7cfa9134ff18103ddb24b642a5283fc28526c2ab", "filename": "gcc/testsuite/gcc.dg/sancov/attribute.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fattribute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fattribute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fattribute.c?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-coverage=trace-pc -fdump-tree-optimized\" } */\n+\n+void foo(void)\n+{\n+}\n+\n+void\n+__attribute__((no_sanitize_coverage))\n+bar(void)\n+{\n+}\n+\n+static void inline\n+__attribute__((always_inline))\n+inline_fn(void)\n+{\n+}\n+\n+void\n+__attribute__((no_sanitize_coverage))\n+baz(void)\n+{\n+  inline_fn();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___sanitizer_cov_trace_pc \\\\(\\\\)\" 1 \"optimized\" } } */"}, {"sha": "f93e04aa4dfcc2e2a9eef28f3679b2a3ab4c6540", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec4d4a6782c9bd8d071839c50a239c49caca689/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=cec4d4a6782c9bd8d071839c50a239c49caca689", "patch": "@@ -40,6 +40,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify-me.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssa.h\"\n+#include \"attribs.h\"\n+#include \"asan.h\"\n \n #ifndef LOGICAL_OP_NON_SHORT_CIRCUIT\n #define LOGICAL_OP_NON_SHORT_CIRCUIT \\\n@@ -567,7 +569,7 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n \t  if (param_logical_op_non_short_circuit != -1)\n \t    logical_op_non_short_circuit\n \t      = param_logical_op_non_short_circuit;\n-\t  if (!logical_op_non_short_circuit || flag_sanitize_coverage)\n+\t  if (!logical_op_non_short_circuit || sanitize_coverage_p ())\n \t    return false;\n \t  /* Only do this optimization if the inner bb contains only the conditional. */\n \t  if (!gsi_one_before_end_p (gsi_start_nondebug_after_labels_bb (inner_cond_bb)))"}]}