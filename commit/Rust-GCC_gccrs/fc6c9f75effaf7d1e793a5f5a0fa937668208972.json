{"sha": "fc6c9f75effaf7d1e793a5f5a0fa937668208972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2YzlmNzVlZmZhZjdkMWU3OTNhNWY1YTBmYTkzNzY2ODIwODk3Mg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2007-05-25T14:33:27Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-05-25T14:33:27Z"}, "message": "i386.c (__builtin_ia32_vec_ext_v2df): Mark it with MASK_SSE2.\n\ngcc/\n\n2007-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (__builtin_ia32_vec_ext_v2df): Mark it\n\twith MASK_SSE2.\n\t(__builtin_ia32_vec_ext_v2di): Likewise.\n\t(__builtin_ia32_vec_ext_v4si): Likewise.\n\t(__builtin_ia32_vec_ext_v8hi): Likewise.\n\t(__builtin_ia32_vec_ext_v16qi): Likewise.\n\t(__builtin_ia32_vec_set_v8hi): Likewise.\n\ngcc/testsuite/\n\n2007-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/sse2-check.h: New.\n\t* gcc.target/i386/sse2-vec-1.c: Likewise.\n\t* gcc.target/i386/sse2-vec-2.c: Likewise.\n\t* gcc.target/i386/sse2-vec-3.c: Likewise.\n\t* gcc.target/i386/sse2-vec-4.c: Likewise.\n\t* gcc.target/i386/sse2-vec-5.c: Likewise.\n\t* gcc.target/i386/sse2-vec-6.c: Likewise.\n\nFrom-SVN: r125063", "tree": {"sha": "799e8264bdb77d96e79bedffb63cbad124955342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/799e8264bdb77d96e79bedffb63cbad124955342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6c9f75effaf7d1e793a5f5a0fa937668208972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6c9f75effaf7d1e793a5f5a0fa937668208972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6c9f75effaf7d1e793a5f5a0fa937668208972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6c9f75effaf7d1e793a5f5a0fa937668208972/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1d7b1c00e10e3550b2b1bfc91168679463e457f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d7b1c00e10e3550b2b1bfc91168679463e457f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d7b1c00e10e3550b2b1bfc91168679463e457f"}], "stats": {"total": 318, "additions": 312, "deletions": 6}, "files": [{"sha": "1a22b1a17601834d664b913a1334143a1e4edabe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -1,3 +1,13 @@\n+2007-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (__builtin_ia32_vec_ext_v2df): Mark it\n+\twith MASK_SSE2.\n+\t(__builtin_ia32_vec_ext_v2di): Likewise.\n+\t(__builtin_ia32_vec_ext_v4si): Likewise.\n+\t(__builtin_ia32_vec_ext_v8hi): Likewise.\n+\t(__builtin_ia32_vec_ext_v16qi): Likewise.\n+\t(__builtin_ia32_vec_set_v8hi): Likewise.\n+\n 2007-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/sse.md (*vec_extractv2di_1_sse2): Correct shift."}, {"sha": "ca5df2dea4deadf1dad1998ad6a3f885790a505f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -17830,13 +17830,13 @@ ix86_init_mmx_sse_builtins (void)\n   /* Access to the vec_extract patterns.  */\n   ftype = build_function_type_list (double_type_node, V2DF_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v2df\",\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_vec_ext_v2df\",\n \t       ftype, IX86_BUILTIN_VEC_EXT_V2DF);\n \n   ftype = build_function_type_list (long_long_integer_type_node,\n \t\t\t\t    V2DI_type_node, integer_type_node,\n \t\t\t\t    NULL_TREE);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v2di\",\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_vec_ext_v2di\",\n \t       ftype, IX86_BUILTIN_VEC_EXT_V2DI);\n \n   ftype = build_function_type_list (float_type_node, V4SF_type_node,\n@@ -17846,12 +17846,12 @@ ix86_init_mmx_sse_builtins (void)\n \n   ftype = build_function_type_list (intSI_type_node, V4SI_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v4si\",\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_vec_ext_v4si\",\n \t       ftype, IX86_BUILTIN_VEC_EXT_V4SI);\n \n   ftype = build_function_type_list (intHI_type_node, V8HI_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v8hi\",\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_vec_ext_v8hi\",\n \t       ftype, IX86_BUILTIN_VEC_EXT_V8HI);\n \n   ftype = build_function_type_list (intHI_type_node, V4HI_type_node,\n@@ -17866,7 +17866,7 @@ ix86_init_mmx_sse_builtins (void)\n \n   ftype = build_function_type_list (intQI_type_node, V16QI_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_vec_ext_v16qi\",\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_vec_ext_v16qi\",\n \t       ftype, IX86_BUILTIN_VEC_EXT_V16QI);\n \n   /* Access to the vec_set patterns.  */\n@@ -17891,7 +17891,7 @@ ix86_init_mmx_sse_builtins (void)\n   ftype = build_function_type_list (V8HI_type_node, V8HI_type_node,\n \t\t\t\t    intHI_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_vec_set_v8hi\",\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_vec_set_v8hi\",\n \t       ftype, IX86_BUILTIN_VEC_SET_V8HI);\n \n   ftype = build_function_type_list (V4HI_type_node, V4HI_type_node,"}, {"sha": "ed41a7fa0cc80b86ac65a26c1fde266dcaf31e48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -1,3 +1,13 @@\n+2007-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/sse2-check.h: New.\n+\t* gcc.target/i386/sse2-vec-1.c: Likewise.\n+\t* gcc.target/i386/sse2-vec-2.c: Likewise.\n+\t* gcc.target/i386/sse2-vec-3.c: Likewise.\n+\t* gcc.target/i386/sse2-vec-4.c: Likewise.\n+\t* gcc.target/i386/sse2-vec-5.c: Likewise.\n+\t* gcc.target/i386/sse2-vec-6.c: Likewise.\n+\n 2007-05-25  Douglas Gregor <doug.gregor@gmail.com>\n \n \tPR c++/31431"}, {"sha": "e6855136c6b71942992e6154c1cbaa23f5ebd01a", "filename": "gcc/testsuite/gcc.target/i386/sse2-check.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -0,0 +1,20 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse2_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+ \n+  cpu_facilities = i386_cpuid_edx ();\n+\n+  /* Run SSE2 test only if host has SSE2 support.  */\n+  if ((cpu_facilities & bit_SSE2))\n+    sse2_test ();\n+\n+  exit (0);\n+}"}, {"sha": "f5508145175b42c4c365724f867f3efae733ac02", "filename": "gcc/testsuite/gcc.target/i386/sse2-vec-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-1.c?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n+\n+#define msk0   0\n+#define msk1   1\n+\n+static void\n+sse2_test (void)\n+{\n+  union\n+    {\n+      __m128d x;\n+      double d[2];\n+    } val1;\n+  double res[2];\n+  int masks[2];\n+  int i;\n+\n+  val1.d[0] = 23.;\n+  val1.d[1] = 45;\n+\n+  res[0] = __builtin_ia32_vec_ext_v2df ((__v2df)val1.x, msk0);\n+  res[1] = __builtin_ia32_vec_ext_v2df ((__v2df)val1.x, msk1);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+\n+  for (i = 0; i < 2; i++)\n+    if (res[i] != val1.d [masks[i]])\n+      abort ();\n+}"}, {"sha": "a5156e0486832421eb8d0a8de7dca7547991e555", "filename": "gcc/testsuite/gcc.target/i386/sse2-vec-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-2.c?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n+\n+static void\n+sse2_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      char c[16];\n+      short s[8];\n+      int i[4];\n+      long long ll[2];\n+    } val1;\n+  long long res[2];\n+  int masks[2];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    val1.c[i] = i;\n+\n+  res[0] = __builtin_ia32_vec_ext_v2di ((__v2di)val1.x, 0);\n+  res[1] = __builtin_ia32_vec_ext_v2di ((__v2di)val1.x, 1);\n+\n+  for (i = 0; i < 2; i++)\n+    masks[i] = i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (res[i] != val1.ll [masks[i]])\n+      abort ();\n+}"}, {"sha": "2e5eb6f19186da5777fa6ffac1f155debbe12ecb", "filename": "gcc/testsuite/gcc.target/i386/sse2-vec-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-3.c?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n+\n+static void\n+sse2_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      char c[16];\n+      short s[8];\n+      int i[4];\n+      long long ll[2];\n+    } val1;\n+  int res[4];\n+  int masks[4];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    val1.c[i] = i;\n+\n+  res[0] = __builtin_ia32_vec_ext_v4si ((__v4si)val1.x, 0);\n+  res[1] = __builtin_ia32_vec_ext_v4si ((__v4si)val1.x, 1);\n+  res[2] = __builtin_ia32_vec_ext_v4si ((__v4si)val1.x, 2);\n+  res[3] = __builtin_ia32_vec_ext_v4si ((__v4si)val1.x, 3);\n+\n+  for (i = 0; i < 4; i++)\n+    masks[i] = i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (res[i] != val1.i [masks[i]])\n+      abort ();\n+}"}, {"sha": "ca7d37fc4886896ad2982ec234972303e9e6c631", "filename": "gcc/testsuite/gcc.target/i386/sse2-vec-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-4.c?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n+\n+static void\n+sse2_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      char c[16];\n+      short s[8];\n+      int i[4];\n+      long long ll[2];\n+    } val1;\n+  short res[8];\n+  int masks[8];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    val1.c[i] = i;\n+\n+  res[0] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 0);\n+  res[1] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 1);\n+  res[2] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 2);\n+  res[3] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 3);\n+  res[4] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 4);\n+  res[5] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 5);\n+  res[6] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 6);\n+  res[7] = __builtin_ia32_vec_ext_v8hi ((__v8hi)val1.x, 7);\n+\n+  for (i = 0; i < 8; i++)\n+    masks[i] = i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (res[i] != val1.s [masks[i]])\n+      abort ();\n+}"}, {"sha": "afd7ce81f01c78d8154691b0834904d5a2cba0e3", "filename": "gcc/testsuite/gcc.target/i386/sse2-vec-5.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-5.c?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n+\n+static void\n+sse2_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      char c[16];\n+      short s[8];\n+      int i[4];\n+      long long ll[2];\n+    } val1;\n+  char res[16];\n+  int masks[16];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    val1.c[i] = i;\n+\n+  res[0] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 0);\n+  res[1] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 1);\n+  res[2] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 2);\n+  res[3] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 3);\n+  res[4] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 4);\n+  res[5] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 5);\n+  res[6] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 6);\n+  res[7] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 7);\n+  res[8] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 8);\n+  res[9] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 9);\n+  res[10] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 10);\n+  res[11] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 11);\n+  res[12] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 12);\n+  res[13] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 13);\n+  res[14] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 14);\n+  res[15] = __builtin_ia32_vec_ext_v16qi ((__v16qi)val1.x, 15);\n+\n+  for (i = 0; i < 16; i++)\n+    masks[i] = i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (res[i] != val1.c [masks[i]])\n+      abort ();\n+}"}, {"sha": "13ac364513fe99fcd681c71013d9c76daff9e325", "filename": "gcc/testsuite/gcc.target/i386/sse2-vec-6.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c9f75effaf7d1e793a5f5a0fa937668208972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vec-6.c?ref=fc6c9f75effaf7d1e793a5f5a0fa937668208972", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#include <emmintrin.h>\n+#include <string.h>\n+\n+static void\n+sse2_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      char c[16];\n+      short s[8];\n+      int i[4];\n+      long long ll[2];\n+    } val1, res[16], tmp;\n+  short ins[8] = { 8, 5, 9, 4, 2, 6, 1, 20 };\n+  int masks[8];\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    val1.c[i] = i;\n+\n+  res[0].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 0);\n+  res[1].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 1);\n+  res[2].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 2);\n+  res[3].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 3);\n+  res[4].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 4);\n+  res[5].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 5);\n+  res[6].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 6);\n+  res[7].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t    ins[0], 7);\n+\n+  for (i = 0; i < 8; i++)\n+    masks[i] = i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp.x = val1.x;\n+      tmp.s[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      res[i].x = (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)val1.x,\n+\t\t\t\t\t\t\tins[i], 0);\n+      masks[i] = 0;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp.x = val1.x;\n+      tmp.s[masks[i]] = ins[i];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}]}