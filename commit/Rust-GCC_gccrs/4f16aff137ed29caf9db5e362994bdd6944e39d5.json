{"sha": "4f16aff137ed29caf9db5e362994bdd6944e39d5", "node_id": "C_kwDOANBUbNoAKDRmMTZhZmYxMzdlZDI5Y2FmOWRiNWUzNjI5OTRiZGQ2OTQ0ZTM5ZDU", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-10T10:54:39Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:28Z"}, "message": "libproc_macro: Add Span type rust interface\n\nAdd the rust stable interface for Span type in libproc_macro.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/lib.rs: Add span type interface\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "f2507ba3f971901d5ab2f93a664a9b6970305ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2507ba3f971901d5ab2f93a664a9b6970305ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f16aff137ed29caf9db5e362994bdd6944e39d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f16aff137ed29caf9db5e362994bdd6944e39d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f16aff137ed29caf9db5e362994bdd6944e39d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f16aff137ed29caf9db5e362994bdd6944e39d5/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df33f7b5bb1fb0936a9fc6cf9b9cc251447ad89e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df33f7b5bb1fb0936a9fc6cf9b9cc251447ad89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df33f7b5bb1fb0936a9fc6cf9b9cc251447ad89e"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "d3ef527ef01298508c7f5df245f4e2ca8a555216", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f16aff137ed29caf9db5e362994bdd6944e39d5/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f16aff137ed29caf9db5e362994bdd6944e39d5/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=4f16aff137ed29caf9db5e362994bdd6944e39d5", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum Delimiter {\n     Parenthesis,\n@@ -6,3 +8,46 @@ pub enum Delimiter {\n     /// Invisible delimiter\n     None,\n }\n+\n+#[derive(Copy, Clone)]\n+pub struct Span {\n+    // Internal implementation details\n+}\n+\n+impl Span {\n+    // TODO: Add experimental API functions for this type\n+\n+    /// Creates a new span that resolves at the macro call location\n+    pub fn call_site() -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Creates a new span that resolved sometimes at macro call site, and\n+    /// sometimes at macro definition site\n+    pub fn mixed_site() -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Creates a new span with the same line/column informations but that\n+    /// resolve symbols as though it were at `other`\n+    pub fn resolved_at(&self, other: Span) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Creates a new span with the same name resolution behavior as self, but\n+    /// with the line/column information of `other`.\n+    pub fn located_at(&self, other: Span) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Return the source text behind a span.\n+    pub fn source_text(&self) -> Option<String> {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Debug for Span {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}"}]}