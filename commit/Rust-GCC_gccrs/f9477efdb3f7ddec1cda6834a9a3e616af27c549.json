{"sha": "f9477efdb3f7ddec1cda6834a9a3e616af27c549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk0NzdlZmRiM2Y3ZGRlYzFjZGE2ODM0YTlhM2U2MTZhZjI3YzU0OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-02-17T15:39:25Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-02-17T15:39:25Z"}, "message": "h8300.c: Fix formatting.\n\n\t* config/h8300/h8300.c: Fix formatting.\n\t* config/h8300/h8300.h: Likewise.\n\nFrom-SVN: r49822", "tree": {"sha": "188780bf775a3475ff21ce92ccac00bec81b92af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/188780bf775a3475ff21ce92ccac00bec81b92af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9477efdb3f7ddec1cda6834a9a3e616af27c549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9477efdb3f7ddec1cda6834a9a3e616af27c549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9477efdb3f7ddec1cda6834a9a3e616af27c549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9477efdb3f7ddec1cda6834a9a3e616af27c549/comments", "author": null, "committer": null, "parents": [{"sha": "404ae494a6ba548ea63588cd3ceac4a54be791d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404ae494a6ba548ea63588cd3ceac4a54be791d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404ae494a6ba548ea63588cd3ceac4a54be791d3"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "3cc3e6116042a66d94b7d5140684969118f1b846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9477efdb3f7ddec1cda6834a9a3e616af27c549/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9477efdb3f7ddec1cda6834a9a3e616af27c549/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9477efdb3f7ddec1cda6834a9a3e616af27c549", "patch": "@@ -1,3 +1,8 @@\n+2002-02-17  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c: Fix formatting.\n+\t* config/h8300/h8300.h: Likewise.\n+\n 2002-02-17  Philipp Thomas  <pthomas@suse.de>\n \n \t* doc/tm.texi: Explain why empty strings should not be"}, {"sha": "e79d86507a8a03f26d24f250494d1167cd238361", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9477efdb3f7ddec1cda6834a9a3e616af27c549/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9477efdb3f7ddec1cda6834a9a3e616af27c549/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f9477efdb3f7ddec1cda6834a9a3e616af27c549", "patch": "@@ -2411,25 +2411,25 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t    }\n \t}\n       else if (TARGET_H8300 && 24 <= count && count <= 28)\n- \t{\n- \t  info->remainder = count - 24;\n+\t{\n+\t  info->remainder = count - 24;\n  \n- \t  switch (shift_type)\n- \t    {\n- \t    case SHIFT_ASHIFT:\n- \t      info->special = \"mov.b\\t%w0,%z0\\n\\tsub.b\\t%y0,%y0\\n\\tsub.w\\t%f0,%f0\";\n- \t      info->shift1  = \"shll.b\\t%z0\";\n- \t      goto end;\n- \t    case SHIFT_LSHIFTRT:\n- \t      info->special = \"mov.b\\t%z0,%w0\\n\\tsub.b\\t%x0,%x0\\n\\tsub.w\\t%e0,%e0\";\n- \t      info->shift1  = \"shlr.b\\t%w0\";\n+\t  switch (shift_type)\n+\t    {\n+\t    case SHIFT_ASHIFT:\n+\t      info->special = \"mov.b\\t%w0,%z0\\n\\tsub.b\\t%y0,%y0\\n\\tsub.w\\t%f0,%f0\";\n+\t      info->shift1  = \"shll.b\\t%z0\";\n+\t      goto end;\n+\t    case SHIFT_LSHIFTRT:\n+\t      info->special = \"mov.b\\t%z0,%w0\\n\\tsub.b\\t%x0,%x0\\n\\tsub.w\\t%e0,%e0\";\n+\t      info->shift1  = \"shlr.b\\t%w0\";\n+\t      goto end;\n+\t    case SHIFT_ASHIFTRT:\n+\t      info->special = \"mov.b\\t%z0,%w0\\n\\tbld\\t#7,%w0\\n\\tsubx\\t%x0,%x0\\n\\tsubx\\t%x0,%x0\\n\\tsubx\\t%x0,%x0\";\n+\t      info->shift1  = \"shar.b\\t%w0\";\n  \t      goto end;\n- \t    case SHIFT_ASHIFTRT:\n- \t      info->special = \"mov.b\\t%z0,%w0\\n\\tbld\\t#7,%w0\\n\\tsubx\\t%x0,%x0\\n\\tsubx\\t%x0,%x0\\n\\tsubx\\t%x0,%x0\";\n- \t      info->shift1  = \"shar.b\\t%w0\";\n-  \t      goto end;\n-  \t    }\n-  \t}\n+ \t    }\n+ \t}\n       else if ((TARGET_H8300H && count == 24)\n \t       || (TARGET_H8300S && 24 <= count && count <= 25))\n \t{"}, {"sha": "7c979648e613ddc060926efa1257863afc1aa07a", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9477efdb3f7ddec1cda6834a9a3e616af27c549/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9477efdb3f7ddec1cda6834a9a3e616af27c549/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=f9477efdb3f7ddec1cda6834a9a3e616af27c549", "patch": "@@ -121,7 +121,7 @@ extern int target_flags;\n     {\"int32\",\t\t8,     N_(\"Make integers 32 bits wide\")},\t\\\n     {\"addresses\",\t64,    NULL},\t\t\t\t\t\\\n     {\"quickcall\",\t128,\t\t\t\t\t\t\\\n-     N_(\"Use registers for argument passing\")},  \t\t\t\\\n+     N_(\"Use registers for argument passing\")},\t\t\t\\\n     {\"no-quickcall\",\t-128,\t\t\t\t\t\t\\\n      N_(\"Do not use registers for argument passing\")},\t\t\t\\\n     {\"slowbyte\",\t256,\t\t\t\t\t\t\\\n@@ -217,15 +217,15 @@ extern int target_flags;\n    See also the macro `Pmode' defined below.  */\n #define POINTER_SIZE (TARGET_H8300H || TARGET_H8300S ? 32 : 16)\n \n-#define SHORT_TYPE_SIZE \t16\n-#define INT_TYPE_SIZE \t\t(TARGET_INT32 ? 32 : 16)\n-#define LONG_TYPE_SIZE \t\t32\n+#define SHORT_TYPE_SIZE\t16\n+#define INT_TYPE_SIZE\t\t(TARGET_INT32 ? 32 : 16)\n+#define LONG_TYPE_SIZE\t\t32\n #define LONG_LONG_TYPE_SIZE\t32\n-#define FLOAT_TYPE_SIZE \t32\n-#define DOUBLE_TYPE_SIZE \t32\n-#define LONG_DOUBLE_TYPE_SIZE \tDOUBLE_TYPE_SIZE\n+#define FLOAT_TYPE_SIZE\t32\n+#define DOUBLE_TYPE_SIZE\t32\n+#define LONG_DOUBLE_TYPE_SIZE\tDOUBLE_TYPE_SIZE\n \n-#define MAX_FIXED_MODE_SIZE \t32\n+#define MAX_FIXED_MODE_SIZE\t32\n \n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY (TARGET_H8300H || TARGET_H8300S ? 32 : 16)\n@@ -405,11 +405,11 @@ enum reg_class {\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS  \t\t\t\\\n+#define REG_CLASS_CONTENTS\t\t\t\\\n {      {0},\t\t/* No regs      */\t\\\n-   {0x6ff},\t\t/* GENERAL_REGS */    \t\\\n-   {0x100},\t\t/* MAC_REGS */    \t\\\n-   {0x7ff},\t\t/* ALL_REGS \t*/\t\\\n+   {0x6ff},\t\t/* GENERAL_REGS */ \t\\\n+   {0x100},\t\t/* MAC_REGS */ \t\\\n+   {0x7ff},\t\t/* ALL_REGS\t*/\t\\\n }\n \n /* The same information, inverted:\n@@ -904,9 +904,9 @@ struct cum_arg\n    || (GET_CODE (X) == SUBREG && REG_P (SUBREG_REG (X))\t\t\\\n        && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n \n-#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)    \t\\\n+#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR) \t\\\n   if (RTX_OK_FOR_BASE_P (X)) goto ADDR;\t\t\t\\\n-  if (CONSTANT_ADDRESS_P (X)) goto ADDR;    \t\t\\\n+  if (CONSTANT_ADDRESS_P (X)) goto ADDR; \t\t\\\n   if (GET_CODE (X) == PLUS\t\t\t\t\\\n       && CONSTANT_ADDRESS_P (XEXP (X, 1))\t\t\\\n       && RTX_OK_FOR_BASE_P (XEXP (X, 0))) goto ADDR;"}]}