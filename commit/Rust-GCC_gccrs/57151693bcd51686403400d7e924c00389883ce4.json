{"sha": "57151693bcd51686403400d7e924c00389883ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxNTE2OTNiY2Q1MTY4NjQwMzQwMGQ3ZTkyNGMwMDM4OTg4M2NlNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-25T18:16:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-25T18:16:08Z"}, "message": "dump.c (dequeue_and_dump): Handle RESULT_DECL.\n\n\t* dump.c (dequeue_and_dump): Handle RESULT_DECL.\n\t* ir.texi: Document RESULT_DECL and DECL_RESULT.\n\nFrom-SVN: r29664", "tree": {"sha": "f69d2323d085801f926d2c0b8431b659e1c8f64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f69d2323d085801f926d2c0b8431b659e1c8f64b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57151693bcd51686403400d7e924c00389883ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57151693bcd51686403400d7e924c00389883ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57151693bcd51686403400d7e924c00389883ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57151693bcd51686403400d7e924c00389883ce4/comments", "author": null, "committer": null, "parents": [{"sha": "efee38a99ac1639e29a1f08235756becdbeca01c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efee38a99ac1639e29a1f08235756becdbeca01c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efee38a99ac1639e29a1f08235756becdbeca01c"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "ada495935f7ff68cecf7e64a52f8c3128e2f0847", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57151693bcd51686403400d7e924c00389883ce4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57151693bcd51686403400d7e924c00389883ce4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57151693bcd51686403400d7e924c00389883ce4", "patch": "@@ -1,5 +1,8 @@\n 1999-09-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* dump.c (dequeue_and_dump): Handle RESULT_DECL.\n+\t* ir.texi: Document RESULT_DECL and DECL_RESULT.\n+\n \t* cp-tree.h (check_return_expr): New function.\n \t* decl.c (finish_constructor_body): New function.\n \t(pushdecl): Put global friend functions in namespace binding"}, {"sha": "64d1d2126a55329ff4b6516559e5fa115d83c3e3", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57151693bcd51686403400d7e924c00389883ce4/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57151693bcd51686403400d7e924c00389883ce4/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=57151693bcd51686403400d7e924c00389883ce4", "patch": "@@ -584,6 +584,7 @@ dequeue_and_dump (di)\n     case VAR_DECL:\n     case PARM_DECL:\n     case FIELD_DECL:\n+    case RESULT_DECL:\n       if (dump_children_p)\n \t{\n \t  if (TREE_CODE (t) == PARM_DECL)"}, {"sha": "26f40583fa1a350180b7249b1ea6557625901e95", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57151693bcd51686403400d7e924c00389883ce4/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57151693bcd51686403400d7e924c00389883ce4/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=57151693bcd51686403400d7e924c00389883ce4", "patch": "@@ -731,6 +731,7 @@ FIXME: Talk about @code{TYPE_NONCOPIED_PARTS}.\n @tindex PARM_DECL\n @tindex FIELD_DECL\n @tindex NAMESPACE_DECL\n+@tindex RESULT_DECL\n @tindex TEMPLATE_DECL\n @tindex USING_DECL\n @findex DECL_INITIAL\n@@ -792,6 +793,13 @@ the constant is given by @code{DECL_INITIAL} which will be an\n @code{INTEGER_CST} with the same type as the @code{TREE_TYPE} of the\n @code{CONST_DECL}, i.e., an @code{ENUMERAL_TYPE}.\n \n+@item RESULT_DECL\n+These nodes represent the value returned by a function.  When a value is\n+assigned to a @code{RESULT_DECL}, that indicates that the value should\n+be returned, via bitwise copy, by the function.  You can use\n+@code{DECL_SIZE} and @code{DECL_ALIGN} on a @code{RESULT_DECL}, just as\n+with a @code{VAR_DECL}.\n+\n @item TYPE_DECL\n These nodes represent @code{typedef} declarations.  The @code{TREE_TYPE}\n is the type declared to have the name given by @code{DECL_NAME}.  In\n@@ -988,6 +996,9 @@ This macro returns the @code{PARM_DECL} for the first argument to the\n function.  Subsequent @code{PARM_DECL} nodes can be obtained by\n following the @code{TREE_CHAIN} links.\n \n+@item DECL_RESULT\n+This macro returns the @code{RESULT_DECL} for the function.\n+\n @item TREE_TYPE\n This macro returns the @code{FUNCTION_TYPE} or @code{METHOD_TYPE} for\n the function."}]}