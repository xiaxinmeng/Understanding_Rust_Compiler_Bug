{"sha": "a73d59089a9daca7316eeccece13166ad60dbf13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczZDU5MDg5YTlkYWNhNzMxNmVlY2NlY2UxMzE2NmFkNjBkYmYxMw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:15:55Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-16T05:09:30Z"}, "message": "AVX512FP16: Add testcase for vcvtw2ph/vcvtuw2ph/vcvtdq2ph/vcvtudq2ph/vcvtqq2ph/vcvtuqq2ph.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vcvtdq2ph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcvtdq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtqq2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtqq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtudq2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtudq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtuqq2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtuqq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtuw2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtuw2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtw2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtw2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtdq2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtdq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtqq2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtqq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtudq2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtudq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtuqq2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtuqq2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtuw2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtuw2ph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtw2ph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcvtw2ph-1b.c: Ditto.", "tree": {"sha": "de613bbb57e28683b81df7ce69296b175ac2656c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de613bbb57e28683b81df7ce69296b175ac2656c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73d59089a9daca7316eeccece13166ad60dbf13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73d59089a9daca7316eeccece13166ad60dbf13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73d59089a9daca7316eeccece13166ad60dbf13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73d59089a9daca7316eeccece13166ad60dbf13/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0e4c32bf54ef792ff8bb9e1da5015364ffaace"}], "stats": {"total": 912, "additions": 912, "deletions": 0}, "files": [{"sha": "45697d94b1ce16943f1fcaf4d3a6d4732324d89e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtdq2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtdq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtdq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtdq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2ph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res, res1, res2;\n+volatile __m512i x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepi32_ph (x1);\n+  res1 = _mm512_mask_cvtepi32_ph (res, m16, x2);\n+  res2 = _mm512_maskz_cvtepi32_ph (m16, x3);\n+  res = _mm512_cvt_roundepi32_ph (x1, 4);\n+  res1 = _mm512_mask_cvt_roundepi32_ph (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundepi32_ph (m16, x3, 11);\n+}"}, {"sha": "a2bb56c25d7cb134e1c9ec5146f5f1d8d9921592", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtdq2ph-1b.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtdq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtdq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtdq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 32)\n+\n+void NOINLINE\n+EMULATE(cvtd2_ph) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.f32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = v7.u32[i];\n+      }\n+    }\n+    else {\n+      v5.f32[i] = op1.u32[i];\n+    }\n+  }\n+  *dest = pack_twops_2ph(v5, v5);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtd2_ph)(&exp, src3, NET_MASK, 0);\n+  H_HF(res) = INTRINSIC (_cvtepi32_ph) (SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtepi32_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 0);\n+  H_HF(res) = INTRINSIC (_mask_cvtepi32_ph) (H_HF(res), HALF_MASK, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtepi32_ph);\n+\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 1);\n+  H_HF(res) = INTRINSIC (_maskz_cvtepi32_ph) (HALF_MASK, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtepi32_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtd2_ph)(&exp, src3, NET_MASK, 0);\n+  H_HF(res) = INTRINSIC (_cvt_roundepi32_ph) (SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundepi32_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 0);\n+  H_HF(res) = INTRINSIC (_mask_cvt_roundepi32_ph) (H_HF(res), HALF_MASK, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundepi32_ph);\n+\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 1);\n+  H_HF(res) = INTRINSIC (_maskz_cvt_roundepi32_ph) (HALF_MASK, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundepi32_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+\n+"}, {"sha": "4e8515e9a3d39ba0031a5fdf6742e3a054dc6bf7", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtqq2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtqq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtqq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtqq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, res1, res2;\n+volatile __m512i x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepi64_ph (x1);\n+  res1 = _mm512_mask_cvtepi64_ph (res, m8, x2);\n+  res2 = _mm512_maskz_cvtepi64_ph (m8, x3);\n+  res = _mm512_cvt_roundepi64_ph (x1, 4);\n+  res1 = _mm512_mask_cvt_roundepi64_ph (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundepi64_ph (m8, x3, 11);\n+}"}, {"sha": "cb213b9d9f602a81a0172d069cad14a1c73b7028", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtqq2ph-1b.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtqq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtqq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtqq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 64)\n+\n+void NOINLINE\n+EMULATE(cvtq2_ph) (V512 * dest, V512 op1, int n_el,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < n_el; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.u32[i] = v7.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v5.f32[i] = op1.u64[i];\n+      }\n+  }\n+\n+  // The left part should be zero\n+  for (i = n_el; i < 16; i++)\n+    v5.f32[i] = 0;\n+\n+  *dest = pack_twops_2ph(v5, v5);\n+}\n+\n+void\n+TEST (void)\n+{\n+\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, NET_MASK, 0);\n+  res.xmmh[0] = INTRINSIC (_cvtepi64_ph) (SI(src3));\n+  CHECK_RESULT (&res, &exp, 8, _cvtepi64_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xcc, 0);\n+  res.xmmh[0] = INTRINSIC (_mask_cvtepi64_ph) (res.xmmh[0], 0xcc, SI(src3));\n+  CHECK_RESULT (&res, &exp, 8, _mask_cvtepi64_ph);\n+\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xf1, 1);\n+  res.xmmh[0] = INTRINSIC (_maskz_cvtepi64_ph) (0xf1, SI(src3));\n+  CHECK_RESULT (&res, &exp, 8, _maskz_cvtepi64_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, NET_MASK, 0);\n+  res.xmmh[0] = INTRINSIC (_cvt_roundepi64_ph) (SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _cvt_roundepi64_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xcc, 0);\n+  res.xmmh[0] = INTRINSIC (_mask_cvt_roundepi64_ph) (res.xmmh[0], 0xcc, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _mask_cvt_roundepi64_ph);\n+\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xf1, 1);\n+  res.xmmh[0] = INTRINSIC (_maskz_cvt_roundepi64_ph) (0xf1, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _maskz_cvt_roundepi64_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "8d90ef6f1689a598dc5b1a1389e37a9e83709f9e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtudq2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtudq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtudq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtudq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2ph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res, res1, res2;\n+volatile __m512i x1, x2, x3;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepu32_ph (x1);\n+  res1 = _mm512_mask_cvtepu32_ph (res, m16, x2);\n+  res2 = _mm512_maskz_cvtepu32_ph (m16, x3);\n+  res = _mm512_cvt_roundepu32_ph (x1, 4);\n+  res1 = _mm512_mask_cvt_roundepu32_ph (res, m16, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundepu32_ph (m16, x3, 11);\n+}"}, {"sha": "e9c1cd1bcb0eac84c4837915f3436c00bba1906f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtudq2ph-1b.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtudq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtudq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtudq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 32)\n+\n+void NOINLINE\n+EMULATE(cvtd2_ph) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (((1 << i) & m1) == 0) {\n+      if (zero_mask) {\n+\tv5.f32[i] = 0;\n+      }\n+      else {\n+\tv5.u32[i] = v7.u32[i];\n+      }\n+    }\n+    else {\n+      v5.f32[i] = op1.u32[i];\n+    }\n+  }\n+  *dest = pack_twops_2ph(v5, v5);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtd2_ph)(&exp, src3, NET_MASK, 0);\n+  H_HF(res)= INTRINSIC (_cvtepu32_ph) (SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtepu32_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 0);\n+  H_HF(res) = INTRINSIC (_mask_cvtepu32_ph) (H_HF(res), HALF_MASK, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtepu32_ph);\n+\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 1);\n+  H_HF(res) = INTRINSIC (_maskz_cvtepu32_ph) (HALF_MASK, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtepu32_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtd2_ph)(&exp, src3, NET_MASK, 0);\n+  H_HF(res)= INTRINSIC (_cvt_roundepu32_ph) (SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundepu32_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 0);\n+  H_HF(res) = INTRINSIC (_mask_cvt_roundepu32_ph) (H_HF(res), HALF_MASK, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundepu32_ph);\n+\n+  EMULATE(cvtd2_ph)(&exp, src3, HALF_MASK, 1);\n+  H_HF(res) = INTRINSIC (_maskz_cvt_roundepu32_ph) (HALF_MASK, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundepu32_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+\n+"}, {"sha": "a234bb504821e13696cb3b58fccec230cad9e73c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtuqq2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuqq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuqq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuqq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, res1, res2;\n+volatile __m512i x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepu64_ph (x1);\n+  res1 = _mm512_mask_cvtepu64_ph (res, m8, x2);\n+  res2 = _mm512_maskz_cvtepu64_ph (m8, x3);\n+  res = _mm512_cvt_roundepu64_ph (x1, 4);\n+  res1 = _mm512_mask_cvt_roundepu64_ph (res, m8, x2, 8);\n+  res2 = _mm512_maskz_cvt_roundepu64_ph (m8, x3, 11);\n+}"}, {"sha": "873d9109e479f6af752a42ac73e89b8adbe8bbed", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtuqq2ph-1b.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuqq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuqq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuqq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 64)\n+\n+void NOINLINE\n+EMULATE(cvtq2_ph) (V512 * dest, V512 op1, int n_el,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < n_el; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.u32[i] = v7.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v5.f32[i] = op1.u64[i];\n+      }\n+  }\n+\n+  // The left part should be zero\n+  for (i = n_el; i < 16; i++)\n+    v5.f32[i] = 0;\n+\n+  *dest = pack_twops_2ph(v5, v5);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, NET_MASK, 0);\n+  res.xmmh[0] = INTRINSIC (_cvtepu64_ph) (SI(src3));\n+  CHECK_RESULT (&res, &exp, 8, _cvtepu64_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xcc, 0);\n+  res.xmmh[0] = INTRINSIC (_mask_cvtepu64_ph) (res.xmmh[0], 0xcc, SI(src3));\n+  CHECK_RESULT (&res, &exp, 8, _mask_cvtepu64_ph);\n+\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xc1, 1);\n+  res.xmmh[0] = INTRINSIC (_maskz_cvtepu64_ph) (0xc1, SI(src3));\n+  CHECK_RESULT (&res, &exp, 8, _maskz_cvtepu64_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, NET_MASK, 0);\n+  res.xmmh[0] = INTRINSIC (_cvt_roundepu64_ph) (SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _cvt_roundepu64_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xcc, 0);\n+  res.xmmh[0] = INTRINSIC (_mask_cvt_roundepu64_ph) (res.xmmh[0], 0xcc, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _mask_cvt_roundepu64_ph);\n+\n+  EMULATE(cvtq2_ph)(&exp, src3, N_ELEMS, 0xc1, 1);\n+  res.xmmh[0] = INTRINSIC (_maskz_cvt_roundepu64_ph) (0xc1, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, 8, _maskz_cvt_roundepu64_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "43c96a0d2fcb540b4c2f127e9b4b8fd49b257a2d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtuw2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuw2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuw2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuw2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res;\n+volatile __m512i x1;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepu16_ph (x1);\n+  res = _mm512_mask_cvtepu16_ph (res, m32, x1);\n+  res = _mm512_maskz_cvtepu16_ph (m32, x1);\n+  res = _mm512_cvt_roundepu16_ph (x1, 4);\n+  res = _mm512_mask_cvt_roundepu16_ph (res, m32, x1, 8);\n+  res = _mm512_maskz_cvt_roundepu16_ph (m32, x1, 11);\n+}"}, {"sha": "6d6b6da342fe49440ac4faffaba60cfbfc8efd39", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtuw2ph-1b.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuw2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuw2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtuw2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,93 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtw2_ph) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.f32[i] = v7.f32[i];\n+\t  }\n+      }\n+      else {\n+\t  v5.f32[i] = op1.u16[i];\n+\n+      }\n+\n+      if (((1 << i) & m2) == 0) {\n+\t  if (zero_mask) {\n+\t      v6.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v6.f32[i] = v8.f32[i];\n+\t  }\n+      }\n+      else {\n+\t  v6.f32[i] = op1.u16[i+16];\n+      }\n+  }\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtw2_ph)(&exp, src3, NET_MASK, 0);\n+  HF(res) = INTRINSIC (_cvtepu16_ph) (SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtepu16_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtw2_ph)(&exp, src3, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_cvtepu16_ph) (HF(res), MASK_VALUE, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtepu16_ph);\n+\n+  EMULATE(cvtw2_ph)(&exp, src3, ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_cvtepu16_ph) (ZMASK_VALUE, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtepu16_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtw2_ph)(&exp, src3, NET_MASK, 0);\n+  HF(res) = INTRINSIC (_cvt_roundepu16_ph) (SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundepu16_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtw2_ph)(&exp, src3, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_cvt_roundepu16_ph) (HF(res), MASK_VALUE, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundepu16_ph);\n+\n+  EMULATE(cvtw2_ph)(&exp, src3, ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_cvt_roundepu16_ph) (ZMASK_VALUE, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundepu16_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "c6eaee1772b209b60a787df679c8e9ca0c199616", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtw2ph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtw2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtw2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtw2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res;\n+volatile __m512i x1;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cvtepi16_ph (x1);\n+  res = _mm512_mask_cvtepi16_ph (res, m32, x1);\n+  res = _mm512_maskz_cvtepi16_ph (m32, x1);\n+  res = _mm512_cvt_roundepi16_ph (x1, 4);\n+  res = _mm512_mask_cvt_roundepi16_ph (res, m32, x1, 8);\n+  res = _mm512_maskz_cvt_roundepi16_ph (m32, x1, 11);\n+}"}, {"sha": "e02b6fcdbf797b9ed1f5144d195ff11d38eae18f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtw2ph-1b.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtw2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtw2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtw2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(cvtw2_ph) (V512 * dest, V512 op1,\n+\t\t __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.f32[i] = v7.f32[i];\n+\t  }\n+      }\n+      else {\n+\t  v5.f32[i] = op1.u16[i];\n+\n+      }\n+\n+      if (((1 << i) & m2) == 0) {\n+\t  if (zero_mask) {\n+\t      v6.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v6.f32[i] = v8.f32[i];\n+\t  }\n+      }\n+      else {\n+\t  v6.f32[i] = op1.u16[i+16];\n+      }\n+  }\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(cvtw2_ph)(&exp, src3, NET_MASK, 0);\n+  HF(res) = INTRINSIC (_cvtepi16_ph) (SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvtepi16_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtw2_ph)(&exp, src3, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_cvtepi16_ph) (HF(res), MASK_VALUE, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvtepi16_ph);\n+\n+  EMULATE(cvtw2_ph)(&exp, src3, ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_cvtepi16_ph) (ZMASK_VALUE, SI(src3));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvtepi16_ph);    \n+\n+#if AVX512F_LEN == 512\n+  EMULATE(cvtw2_ph)(&exp, src3, NET_MASK, 0);\n+  HF(res) = INTRINSIC (_cvt_roundepi16_ph) (SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _cvt_roundepi16_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(cvtw2_ph)(&exp, src3, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_cvt_roundepi16_ph) (HF(res), MASK_VALUE, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_cvt_roundepi16_ph);\n+\n+  EMULATE(cvtw2_ph)(&exp, src3, ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_cvt_roundepi16_ph) (ZMASK_VALUE, SI(src3), _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_cvt_roundepi16_ph);    \n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "ab0541dce1abb5a4890dcaeb528195f4a68847f8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtdq2ph-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtdq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtdq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtdq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res3;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res3 = _mm256_cvtepi32_ph (x2);\n+  res3 = _mm256_mask_cvtepi32_ph (res3, m8, x2);\n+  res3 = _mm256_maskz_cvtepi32_ph (m8, x2);\n+\n+  res3 = _mm_cvtepi32_ph (x3);\n+  res3 = _mm_mask_cvtepi32_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtepi32_ph (m8, x3);\n+}"}, {"sha": "033587a67041906428d3eccb7bb7f4bdd9fc4478", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtdq2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtdq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtdq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtdq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtdq2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtdq2ph-1b.c\"\n+"}, {"sha": "8e42a4b29f70307bfbd50c701910194713874307", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtqq2ph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtqq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtqq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtqq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res3;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res3 = _mm256_cvtepi64_ph (x2);\n+  res3 = _mm256_mask_cvtepi64_ph (res3, m16, x2);\n+  res3 = _mm256_maskz_cvtepi64_ph (m16, x2);\n+\n+  res3 = _mm_cvtepi64_ph (x3);\n+  res3 = _mm_mask_cvtepi64_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtepi64_ph (m8, x3);\n+}"}, {"sha": "6a4a329f3680af1d46ad4fd4cd6dcfe81a3cf772", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtqq2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtqq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtqq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtqq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtqq2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtqq2ph-1b.c\"\n+"}, {"sha": "4fa2ab92245879c3904214ab0724c44b46d9a20b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtudq2ph-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtudq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtudq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtudq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res3;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res3 = _mm256_cvtepu32_ph (x2);\n+  res3 = _mm256_mask_cvtepu32_ph (res3, m8, x2);\n+  res3 = _mm256_maskz_cvtepu32_ph (m8, x2);\n+\n+  res3 = _mm_cvtepu32_ph (x3);\n+  res3 = _mm_mask_cvtepu32_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtepu32_ph (m8, x3);\n+}"}, {"sha": "4ea2c268760b387b989b6396e22a72f660ab1320", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtudq2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtudq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtudq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtudq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtudq2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtudq2ph-1b.c\"\n+"}, {"sha": "a3ee951d4c5eca12be5f00a56820ed156a79aec7", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtuqq2ph-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuqq2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuqq2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuqq2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phy\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phx\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res3;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res3 = _mm256_cvtepu64_ph (x2);\n+  res3 = _mm256_mask_cvtepu64_ph (res3, m16, x2);\n+  res3 = _mm256_maskz_cvtepu64_ph (m16, x2);\n+\n+  res3 = _mm_cvtepu64_ph (x3);\n+  res3 = _mm_mask_cvtepu64_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtepu64_ph (m8, x3);\n+}"}, {"sha": "c747e8de0ddddb2a3619a9d22c1352eebf35d352", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtuqq2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuqq2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuqq2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuqq2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtuqq2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtuqq2ph-1b.c\"\n+"}, {"sha": "59393dc01a7bb05cb38c4e3d198162cd96893ccc", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtuw2ph-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuw2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuw2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuw2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res2;\n+volatile __m128h res3;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res2 = _mm256_cvtepu16_ph (x2);\n+  res2 = _mm256_mask_cvtepu16_ph (res2, m16, x2);\n+  res2 = _mm256_maskz_cvtepu16_ph (m16, x2);\n+\n+  res3 = _mm_cvtepu16_ph (x3);\n+  res3 = _mm_mask_cvtepu16_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtepu16_ph (m8, x3);\n+}"}, {"sha": "89d94df57b36c7d9ba6c672e0c97fe8d745ad842", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtuw2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuw2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuw2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtuw2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtuw2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtuw2ph-1b.c\"\n+"}, {"sha": "ff5530f60a2d42528a62a45eec3130100277024b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtw2ph-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtw2ph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtw2ph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtw2ph-1a.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res2;\n+volatile __m128h res3;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res2 = _mm256_cvtepi16_ph (x2);\n+  res2 = _mm256_mask_cvtepi16_ph (res2, m16, x2);\n+  res2 = _mm256_maskz_cvtepi16_ph (m16, x2);\n+\n+  res3 = _mm_cvtepi16_ph (x3);\n+  res3 = _mm_mask_cvtepi16_ph (res3, m8, x3);\n+  res3 = _mm_maskz_cvtepi16_ph (m8, x3);\n+}"}, {"sha": "243e45bda626ff8c62b7301cf8759103c10bab9f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcvtw2ph-1b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtw2ph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73d59089a9daca7316eeccece13166ad60dbf13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtw2ph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcvtw2ph-1b.c?ref=a73d59089a9daca7316eeccece13166ad60dbf13", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtw2ph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcvtw2ph-1b.c\"\n+"}]}