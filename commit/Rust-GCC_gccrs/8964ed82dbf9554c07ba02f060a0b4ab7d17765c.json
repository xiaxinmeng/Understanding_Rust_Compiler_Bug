{"sha": "8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2NGVkODJkYmY5NTU0YzA3YmEwMmYwNjBhMGI0YWI3ZDE3NzY1Yw==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.vnet.ibm.com", "date": "2016-05-09T16:56:30Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@gcc.gnu.org", "date": "2016-05-09T16:56:30Z"}, "message": "rs6000.c (rs6000_reassociation_width): Add function for TARGET_SCHED_REASSOCIATION_WIDTH to enable parallel...\n\n        * config/rs6000/rs6000.c (rs6000_reassociation_width): Add\n        function for TARGET_SCHED_REASSOCIATION_WIDTH to enable\n        parallel reassociation for power8 and forward.\n\nFrom-SVN: r236043", "tree": {"sha": "48eb1f57289f4e995f069f38213ad5c8a16f0347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48eb1f57289f4e995f069f38213ad5c8a16f0347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8964ed82dbf9554c07ba02f060a0b4ab7d17765c/comments", "author": null, "committer": null, "parents": [{"sha": "fc97f8050225946f1f8ba00046ff0d068783c3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc97f8050225946f1f8ba00046ff0d068783c3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc97f8050225946f1f8ba00046ff0d068783c3b4"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "0cd95344f1bd0529b0e9e1069af6705a96ee8007", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8964ed82dbf9554c07ba02f060a0b4ab7d17765c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8964ed82dbf9554c07ba02f060a0b4ab7d17765c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "patch": "@@ -1,3 +1,9 @@\n+2016-05-04  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n+\n+        * config/rs6000/rs6000.c (rs6000_reassociation_width): Add\n+        function for TARGET_SCHED_REASSOCIATION_WIDTH to enable\n+        parallel reassociation for power8 and forward.\n+\n 2016-05-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (absneg splitters with general regs): Use"}, {"sha": "34495f3c99d0c41e9d47d68e6314553f1c52afcd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8964ed82dbf9554c07ba02f060a0b4ab7d17765c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8964ed82dbf9554c07ba02f060a0b4ab7d17765c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8964ed82dbf9554c07ba02f060a0b4ab7d17765c", "patch": "@@ -1755,6 +1755,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE rs6000_conditional_register_usage\n \n+#undef TARGET_SCHED_REASSOCIATION_WIDTH\n+#define TARGET_SCHED_REASSOCIATION_WIDTH rs6000_reassociation_width\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT rs6000_trampoline_init\n \n@@ -8633,6 +8636,40 @@ rs6000_offsettable_memref_p (rtx op, machine_mode reg_mode)\n \t\t\t\t\t     true, worst_case);\n }\n \n+/* Determine the reassociation width to be used in reassociate_bb.\n+   This takes into account how many parallel operations we\n+   can actually do of a given type, and also the latency.\n+   P8:\n+     int add/sub 6/cycle     \n+         mul 2/cycle\n+     vect add/sub/mul 2/cycle\n+     fp   add/sub/mul 2/cycle\n+     dfp  1/cycle\n+*/\n+ \n+static int\n+rs6000_reassociation_width (unsigned int opc ATTRIBUTE_UNUSED,\n+                            enum machine_mode mode)\n+{\n+  switch (rs6000_cpu)\n+    {\n+    case PROCESSOR_POWER8:\n+    case PROCESSOR_POWER9:\n+      if (DECIMAL_FLOAT_MODE_P (mode))\n+\treturn 1;\n+      if (VECTOR_MODE_P (mode))\n+\treturn 4;\n+      if (INTEGRAL_MODE_P (mode)) \n+\treturn opc == MULT_EXPR ? 4 : 6;\n+      if (FLOAT_MODE_P (mode))\n+\treturn 4;\n+      break;\n+    default:\n+      break;\n+    }\n+  return 1;\n+}\n+\n /* Change register usage conditional on target flags.  */\n static void\n rs6000_conditional_register_usage (void)"}]}