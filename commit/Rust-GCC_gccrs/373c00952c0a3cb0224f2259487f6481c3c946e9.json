{"sha": "373c00952c0a3cb0224f2259487f6481c3c946e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczYzAwOTUyYzBhM2NiMDIyNGYyMjU5NDg3ZjY0ODFjM2M5NDZlOQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-06-07T20:19:19Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-06-07T20:19:19Z"}, "message": "tuple (_Head_base<>): Default specialization condition at type declaration.\n\n2016-06-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/std/tuple (_Head_base<>): Default specialization condition at\n\ttype declaration.\n\nFrom-SVN: r237184", "tree": {"sha": "1c58ccb63cf4ac17262b117b30da13e18a19ee3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c58ccb63cf4ac17262b117b30da13e18a19ee3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373c00952c0a3cb0224f2259487f6481c3c946e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373c00952c0a3cb0224f2259487f6481c3c946e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373c00952c0a3cb0224f2259487f6481c3c946e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373c00952c0a3cb0224f2259487f6481c3c946e9/comments", "author": null, "committer": null, "parents": [{"sha": "a23e6f1c59191c2c455650f04053c9c760fd07a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23e6f1c59191c2c455650f04053c9c760fd07a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23e6f1c59191c2c455650f04053c9c760fd07a5"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "7166f39489120cc7cdae67bb30ea46e7fb577c6d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c00952c0a3cb0224f2259487f6481c3c946e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c00952c0a3cb0224f2259487f6481c3c946e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=373c00952c0a3cb0224f2259487f6481c3c946e9", "patch": "@@ -1,3 +1,8 @@\n+2016-06-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/std/tuple (_Head_base<>): Default specialization condition at\n+\ttype declaration.\n+\n 2016-06-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tSupport allocators in tuples of zero size."}, {"sha": "6c124048df101ff2dae8e15a6fc7b051732b7fbc", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c00952c0a3cb0224f2259487f6481c3c946e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c00952c0a3cb0224f2259487f6481c3c946e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=373c00952c0a3cb0224f2259487f6481c3c946e9", "patch": "@@ -48,7 +48,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-  template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>\n+  template<typename... _Elements>\n+    class tuple;\n+\n+  template<typename _Tp>\n+    struct __is_empty_non_tuple : is_empty<_Tp> { };\n+\n+  // Using EBO for elements that are tuples causes ambiguous base errors.\n+  template<typename _El0, typename... _El>\n+    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };\n+\n+  // Use the Empty Base-class Optimization for empty, non-final types.\n+  template<typename _Tp>\n+    using __empty_not_final\n+    = typename conditional<__is_final(_Tp), false_type,\n+\t\t\t   __is_empty_non_tuple<_Tp>>::type;\n+\n+  template<std::size_t _Idx, typename _Head,\n+\t   bool = __empty_not_final<_Head>::value>\n     struct _Head_base;\n \n   template<std::size_t _Idx, typename _Head>\n@@ -158,19 +175,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t _Idx, typename... _Elements>\n     struct _Tuple_impl; \n \n-  template<typename _Tp>\n-    struct __is_empty_non_tuple : is_empty<_Tp> { };\n-\n-  // Using EBO for elements that are tuples causes ambiguous base errors.\n-  template<typename _El0, typename... _El>\n-    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };\n-\n-  // Use the Empty Base-class Optimization for empty, non-final types.\n-  template<typename _Tp>\n-    using __empty_not_final\n-    = typename conditional<__is_final(_Tp), false_type,\n-\t\t\t   __is_empty_non_tuple<_Tp>>::type;\n-\n   /**\n    * Recursive tuple implementation. Here we store the @c Head element\n    * and derive from a @c Tuple_impl containing the remaining elements\n@@ -179,12 +183,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t _Idx, typename _Head, typename... _Tail>\n     struct _Tuple_impl<_Idx, _Head, _Tail...>\n     : public _Tuple_impl<_Idx + 1, _Tail...>,\n-      private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>\n+      private _Head_base<_Idx, _Head>\n     {\n       template<std::size_t, typename...> friend class _Tuple_impl;\n \n       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;\n-      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;\n+      typedef _Head_base<_Idx, _Head> _Base;\n \n       static constexpr _Head&  \n       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n@@ -336,11 +340,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Basis case of inheritance recursion.\n   template<std::size_t _Idx, typename _Head>\n     struct _Tuple_impl<_Idx, _Head>\n-    : private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>\n+    : private _Head_base<_Idx, _Head>\n     {\n       template<std::size_t, typename...> friend class _Tuple_impl;\n \n-      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;\n+      typedef _Head_base<_Idx, _Head> _Base;\n \n       static constexpr _Head&\n       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n@@ -457,9 +461,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n-  template<typename... _Elements>\n-    class tuple;\n-\n   // Concept utility functions, reused in conditionally-explicit\n   // constructors.\n   template<bool, typename... _Elements>"}]}