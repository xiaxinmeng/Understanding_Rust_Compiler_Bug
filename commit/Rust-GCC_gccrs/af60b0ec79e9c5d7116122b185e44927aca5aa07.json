{"sha": "af60b0ec79e9c5d7116122b185e44927aca5aa07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2MGIwZWM3OWU5YzVkNzExNjEyMmIxODVlNDQ5MjdhY2E1YWEwNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-01-01T13:30:34Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-01-05T13:08:00Z"}, "message": "x86: Cast to unsigned short first for _mm_extract_pi16\n\n_mm_extract_pi16 is intrinsic for pextrw, which should be zero-extended,\nnot sign-extended.\n\ngcc/\n\n\tPR target/98495\n\t* config/i386/xmmintrin.h (_mm_extract_pi16): Cast to unsigned\n\tshort first.\n\ngcc/testsuite/\n\n\tPR target/98495\n\t* gcc.target/i386/pr98495-1.c: New test.\n\t* gcc.target/i386/pr98495-2.c: New test.\n\t* gcc.target/i386/pr98495-3.c: New test.\n\t* gcc.target/i386/pr98495-4.c: New test.\n\t* gcc.target/i386/pr98495-5.c: New test.", "tree": {"sha": "25cbb3ae71421a53a05979f6af3c6c3c45133b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25cbb3ae71421a53a05979f6af3c6c3c45133b93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af60b0ec79e9c5d7116122b185e44927aca5aa07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af60b0ec79e9c5d7116122b185e44927aca5aa07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af60b0ec79e9c5d7116122b185e44927aca5aa07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af60b0ec79e9c5d7116122b185e44927aca5aa07/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b679559385fea911d5cfaf67e11d1a274b379d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b679559385fea911d5cfaf67e11d1a274b379d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b679559385fea911d5cfaf67e11d1a274b379d97"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "f013f5c08fe1fad80f90581d767856b7e6aaa2c8", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=af60b0ec79e9c5d7116122b185e44927aca5aa07", "patch": "@@ -1022,7 +1022,7 @@ _mm_move_ss (__m128 __A, __m128 __B)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_extract_pi16 (__m64 const __A, int const __N)\n {\n-  return __builtin_ia32_vec_ext_v4hi ((__v4hi)__A, __N);\n+  return (unsigned short) __builtin_ia32_vec_ext_v4hi ((__v4hi)__A, __N);\n }\n \n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1032,7 +1032,7 @@ _m_pextrw (__m64 const __A, int const __N)\n }\n #else\n #define _mm_extract_pi16(A, N)\t\\\n-  ((int) __builtin_ia32_vec_ext_v4hi ((__v4hi)(__m64)(A), (int)(N)))\n+  ((int) (unsigned short) __builtin_ia32_vec_ext_v4hi ((__v4hi)(__m64)(A), (int)(N)))\n \n #define _m_pextrw(A, N) _mm_extract_pi16(A, N)\n #endif"}, {"sha": "df24e63d18228d6d44f7ca79ba78980d6db491b1", "filename": "gcc/testsuite/gcc.target/i386/pr98495-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-1.c?ref=af60b0ec79e9c5d7116122b185e44927aca5aa07", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmmx -msse2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler-not \"movswl\" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */\n+/* { dg-final { scan-assembler-not \"cwtl\" } } */\n+/* { dg-final { scan-assembler \"pextrw\" } } */\n+\n+#include <xmmintrin.h>\n+\n+unsigned int foo16(__m64 x) { return _mm_extract_pi16(x, 3); }"}, {"sha": "5fd001eefed409e18603275107a768421dd2c147", "filename": "gcc/testsuite/gcc.target/i386/pr98495-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-2.c?ref=af60b0ec79e9c5d7116122b185e44927aca5aa07", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mmmx -msse2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler-not \"movswl\" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */\n+/* { dg-final { scan-assembler-not \"cwtl\" } } */\n+/* { dg-final { scan-assembler-not \"cltq\" } } */\n+/* { dg-final { scan-assembler \"pextrw\" } } */\n+\n+#include <xmmintrin.h>\n+\n+unsigned long long int foo16(__m64 x) { return _mm_extract_pi16(x, 3); }"}, {"sha": "458b470cbd11e35bbcb6fef52993050cd771cff8", "filename": "gcc/testsuite/gcc.target/i386/pr98495-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-3.c?ref=af60b0ec79e9c5d7116122b185e44927aca5aa07", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmmx -msse2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler \"(movswl|cwtl)\" } } */\n+/* { dg-final { scan-assembler \"pextrw\" } } */\n+\n+#include <xmmintrin.h>\n+\n+int foo16(__m64 x) { return (short) _mm_extract_pi16(x, 3); }"}, {"sha": "16d3cbadb0368bbe91ca2a049b057cc5849c3aaa", "filename": "gcc/testsuite/gcc.target/i386/pr98495-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-4.c?ref=af60b0ec79e9c5d7116122b185e44927aca5aa07", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mmmx -msse2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler \"movswq\" } } */\n+/* { dg-final { scan-assembler \"pextrw\" } } */\n+\n+#include <xmmintrin.h>\n+\n+long long int foo16(__m64 x) { return (short) _mm_extract_pi16(x, 3); }"}, {"sha": "a62b42d8eb3585365f228cec2b4bd98a79ceae64", "filename": "gcc/testsuite/gcc.target/i386/pr98495-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af60b0ec79e9c5d7116122b185e44927aca5aa07/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98495-5.c?ref=af60b0ec79e9c5d7116122b185e44927aca5aa07", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mmmx -msse2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler-not \"movswl\" } } */\n+/* { dg-final { scan-assembler-not \"cwtl\" } } */\n+/* { dg-final { scan-assembler \"pextrw\" } } */\n+\n+#include <xmmintrin.h>\n+\n+unsigned int foo16(__m64 x) { return _mm_extract_pi16(x, 3); }"}]}