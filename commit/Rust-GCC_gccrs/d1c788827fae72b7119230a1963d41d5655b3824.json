{"sha": "d1c788827fae72b7119230a1963d41d5655b3824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjNzg4ODI3ZmFlNzJiNzExOTIzMGExOTYzZDQxZDU2NTViMzgyNA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-04-22T01:23:09Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-04-22T01:23:09Z"}, "message": "decl.c: Fix typo in function name.\n\n2006-04-21  Eric Christopher  <echristo@apple.com>\n\n\t* decl.c: Fix typo in function name.\n\n2006-04-21  Eric Christopher  <echristo@apple.com>\n\n\t* df-core.c, tree-outof-ssa.c, config/i386/i386.c: Fix typos\n\tin comments and function names.\n\nFrom-SVN: r113167", "tree": {"sha": "b2c43279918e6cfbb7f06ce194472ec644d9e7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c43279918e6cfbb7f06ce194472ec644d9e7b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1c788827fae72b7119230a1963d41d5655b3824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c788827fae72b7119230a1963d41d5655b3824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c788827fae72b7119230a1963d41d5655b3824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c788827fae72b7119230a1963d41d5655b3824/comments", "author": null, "committer": null, "parents": [{"sha": "37073529315668ac41eca8c137b03eed6293dfab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37073529315668ac41eca8c137b03eed6293dfab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37073529315668ac41eca8c137b03eed6293dfab"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "cb4eaea15ab54a688eb5e9698c052dd4068ce10f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d1c788827fae72b7119230a1963d41d5655b3824", "patch": "@@ -1083,8 +1083,8 @@ static rtx get_thread_pointer (int);\n static rtx legitimize_tls_address (rtx, enum tls_model, int);\n static void get_pc_thunk_name (char [32], unsigned int);\n static rtx gen_push (rtx);\n-static int ix86_flags_dependant (rtx, rtx, enum attr_type);\n-static int ix86_agi_dependant (rtx, rtx, enum attr_type);\n+static int ix86_flags_dependent (rtx, rtx, enum attr_type);\n+static int ix86_agi_dependent (rtx, rtx, enum attr_type);\n static struct machine_function * ix86_init_machine_status (void);\n static int ix86_split_to_parts (rtx, rtx *, enum machine_mode);\n static int ix86_nsaved_regs (void);\n@@ -13432,7 +13432,7 @@ ix86_issue_rate (void)\n    by DEP_INSN and nothing set by DEP_INSN.  */\n \n static int\n-ix86_flags_dependant (rtx insn, rtx dep_insn, enum attr_type insn_type)\n+ix86_flags_dependent (rtx insn, rtx dep_insn, enum attr_type insn_type)\n {\n   rtx set, set2;\n \n@@ -13477,7 +13477,7 @@ ix86_flags_dependant (rtx insn, rtx dep_insn, enum attr_type insn_type)\n    address with operands set by DEP_INSN.  */\n \n static int\n-ix86_agi_dependant (rtx insn, rtx dep_insn, enum attr_type insn_type)\n+ix86_agi_dependent (rtx insn, rtx dep_insn, enum attr_type insn_type)\n {\n   rtx addr;\n \n@@ -13535,17 +13535,17 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     {\n     case PROCESSOR_PENTIUM:\n       /* Address Generation Interlock adds a cycle of latency.  */\n-      if (ix86_agi_dependant (insn, dep_insn, insn_type))\n+      if (ix86_agi_dependent (insn, dep_insn, insn_type))\n \tcost += 1;\n \n       /* ??? Compares pair with jump/setcc.  */\n-      if (ix86_flags_dependant (insn, dep_insn, insn_type))\n+      if (ix86_flags_dependent (insn, dep_insn, insn_type))\n \tcost = 0;\n \n       /* Floating point stores require value to be ready one cycle earlier.  */\n       if (insn_type == TYPE_FMOV\n \t  && get_attr_memory (insn) == MEMORY_STORE\n-\t  && !ix86_agi_dependant (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n \tcost += 1;\n       break;\n \n@@ -13568,7 +13568,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n       if ((memory == MEMORY_LOAD || memory == MEMORY_BOTH)\n-\t  && !ix86_agi_dependant (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n \t{\n \t  /* Claim moves to take one cycle, as core can issue one load\n \t     at time and the next load can start cycle later.  */\n@@ -13597,7 +13597,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n       if ((memory == MEMORY_LOAD || memory == MEMORY_BOTH)\n-\t  && !ix86_agi_dependant (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n \t{\n \t  /* Claim moves to take one cycle, as core can issue one load\n \t     at time and the next load can start cycle later.  */\n@@ -13621,7 +13621,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n       if ((memory == MEMORY_LOAD || memory == MEMORY_BOTH)\n-\t  && !ix86_agi_dependant (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n \t{\n \t  enum attr_unit unit = get_attr_unit (insn);\n \t  int loadcost = 3;"}, {"sha": "e98a6f1422f4bf6bebef3d775d7769cbb29aab31", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d1c788827fae72b7119230a1963d41d5655b3824", "patch": "@@ -6770,7 +6770,7 @@ grokdeclarator (const cp_declarator *declarator,\n   int explicit_int = 0;\n   int explicit_char = 0;\n   int defaulted_int = 0;\n-  tree dependant_name = NULL_TREE;\n+  tree dependent_name = NULL_TREE;\n \n   tree typedef_decl = NULL_TREE;\n   const char *name = NULL;\n@@ -7250,9 +7250,9 @@ grokdeclarator (const cp_declarator *declarator,\n     }\n   friendp = !! declspecs->specs[(int)ds_friend];\n \n-  if (dependant_name && !friendp)\n+  if (dependent_name && !friendp)\n     {\n-      error (\"%<%T::%D%> is not a valid declarator\", ctype, dependant_name);\n+      error (\"%<%T::%D%> is not a valid declarator\", ctype, dependent_name);\n       return void_type_node;\n     }\n "}, {"sha": "4c53e8c86f2640bfa2febb53becc4ca980a508da", "filename": "gcc/df-core.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=d1c788827fae72b7119230a1963d41d5655b3824", "patch": "@@ -84,7 +84,7 @@ convenience functions named DF_*_ADD_PROBLEM.\n \n \n Problems can be dependent on other problems.  For instance, solving\n-def-use or use-def chains is dependant on solving reaching\n+def-use or use-def chains is dependent on solving reaching\n definitions. As long as these dependencies are listed in the problem\n definition, the order of adding the problems is not material.\n Otherwise, the problems will be solved in the order of calls to"}, {"sha": "e41b0ff1ec62e0eb9f931d589a033a0eba40d41a", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c788827fae72b7119230a1963d41d5655b3824/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=d1c788827fae72b7119230a1963d41d5655b3824", "patch": "@@ -1321,7 +1321,7 @@ static inline void add_value_to_list (temp_expr_table_p, value_expr_p *, int);\n static inline void add_info_to_list (temp_expr_table_p, value_expr_p *, \n \t\t\t\t     value_expr_p);\n static value_expr_p remove_value_from_list (value_expr_p *, int);\n-static void add_dependance (temp_expr_table_p, int, tree);\n+static void add_dependence (temp_expr_table_p, int, tree);\n static bool check_replaceable (temp_expr_table_p, tree);\n static void finish_expr (temp_expr_table_p, int, bool);\n static void mark_replaceable (temp_expr_table_p, tree);\n@@ -1510,7 +1510,7 @@ remove_value_from_list (value_expr_p *list, int value)\n    expression table.  */\n \n static void\n-add_dependance (temp_expr_table_p tab, int version, tree var)\n+add_dependence (temp_expr_table_p tab, int version, tree var)\n {\n   int i, x;\n   value_expr_p info;\n@@ -1593,7 +1593,7 @@ check_replaceable (temp_expr_table_p tab, tree stmt)\n   /* Add this expression to the dependency list for each use partition.  */\n   FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n     {\n-      add_dependance (tab, version, var);\n+      add_dependence (tab, version, var);\n \n       use_vars = tab->expr_vars[SSA_NAME_VERSION (var)];\n       if (use_vars)"}]}