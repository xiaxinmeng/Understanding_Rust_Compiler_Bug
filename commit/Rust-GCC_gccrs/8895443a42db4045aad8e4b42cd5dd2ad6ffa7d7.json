{"sha": "8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg5NTQ0M2E0MmRiNDA0NWFhZDhlNGI0MmNkNWRkMmFkNmZmYTdkNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-28T21:30:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-29T17:09:19Z"}, "message": "c++: Fix constexpr cleanup error handling.\n\nIn this testcase, the primary evaluation successfully produces 'true', and\nthen running one of the cleanups hits a double delete, making the whole\nthing not a valid constant expression.  So we were returning 'true' wrapped\nin a NOP_EXPR to indicate its non-constancy, but evaluating that again is a\nperfectly acceptable constant expression, so we weren't getting the verbose\ndiagnostic we were looking for.\n\nSo if non_constant_p gets set other than for overflow, go back to the\noriginal expression.\n\nWith this change, we should never hit the manifestly_const_eval test, and\nthe is-constant-evaluated1.C test passes without it.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97388\n\t* constexpr.c (cxx_eval_outermost_constant_expr): Revert to\n\toriginal expression if evaluation sets non_constant_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97388\n\t* g++.dg/cpp2a/constexpr-dtor8.C: New test.", "tree": {"sha": "86d08ca2e07ec9650266b97e5c53b6eea03c3511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d08ca2e07ec9650266b97e5c53b6eea03c3511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afd90c5f36bf45291ca09ef3791f4a574e90d5d"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "b46824f128dbee7834d13715b5292afa5d939133", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7", "patch": "@@ -6925,6 +6925,10 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n       non_constant_p = true;\n     }\n \n+  if (non_constant_p)\n+    /* If we saw something bad, go back to our argument.  The wrapping below is\n+       only for the cases of TREE_CONSTANT argument or overflow.  */\n+    r = t;\n \n   if (!non_constant_p && overflow_p)\n     non_constant_p = true;\n@@ -6941,12 +6945,6 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n     return r;\n   else if (non_constant_p && TREE_CONSTANT (r))\n     {\n-      /* If __builtin_is_constant_evaluated () was evaluated to true\n-\t and the result is not a valid constant expression, we need to\n-\t punt.  */\n-      if (manifestly_const_eval)\n-\treturn cxx_eval_outermost_constant_expr (t, true, strict,\n-\t\t\t\t\t\t false, false, object);\n       /* This isn't actually constant, so unset TREE_CONSTANT.\n \t Don't clear TREE_CONSTANT on ADDR_EXPR, as the middle-end requires\n \t it to be set if it is invariant address, even when it is not"}, {"sha": "3048110ede37dbf36ba6a22f04fb436eb22adf2f", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor8.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor8.C?ref=8895443a42db4045aad8e4b42cd5dd2ad6ffa7d7", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/97388\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  int *s;\n+  constexpr S () : s(new int) {}\n+  S (const S &) = delete;\n+  S &operator= (const S &) = delete;\n+  constexpr ~S () { delete s; }\t// { dg-error \"already deallocated\" }\n+};\n+\n+constexpr bool\n+foo (S v)\n+{\n+  delete v.s;\n+  return true;\n+}\n+\n+static_assert (foo (S ()));\t// { dg-error \"non-constant condition for static assertion\" }"}]}