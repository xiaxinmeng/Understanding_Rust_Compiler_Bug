{"sha": "f9ede9571409e8db13fb8226a3ed69cfc9ed8a54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllZGU5NTcxNDA5ZThkYjEzZmI4MjI2YTNlZDY5Y2ZjOWVkOGE1NA==", "commit": {"author": {"name": "Roland McGrath", "email": "mcgrathr@google.com", "date": "2018-05-05T23:35:25Z"}, "committer": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "2018-05-05T23:35:25Z"}, "message": "PR other/77609: Let the assembler choose ELF section types for miscellaneous named sections\n\ngcc/\n\tPR other/77609\n\t* varasm.c (default_section_type_flags): Set SECTION_NOTYPE for\n\tany section for which we don't know a specific type it should have,\n\tregardless of name.  Previously this was done only for the exact\n\tnames \".init_array\", \".fini_array\", and \".preinit_array\".\n\t(default_elf_asm_named_section): Add comment about\n\trelationship with default_section_type_flags and SECTION_NOTYPE.\n\t(get_section): Don't consider it a type conflict if one side has\n\tSECTION_NOTYPE and the other doesn't, as long as neither has the\n\tSECTION_BSS et al used in the default_section_type_flags logic.\n\nFrom-SVN: r259969", "tree": {"sha": "5f99569e618da1cea53cac3a2556bedb26b398d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f99569e618da1cea53cac3a2556bedb26b398d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54/comments", "author": {"login": "frobtech", "id": 972096, "node_id": "MDQ6VXNlcjk3MjA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/972096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frobtech", "html_url": "https://github.com/frobtech", "followers_url": "https://api.github.com/users/frobtech/followers", "following_url": "https://api.github.com/users/frobtech/following{/other_user}", "gists_url": "https://api.github.com/users/frobtech/gists{/gist_id}", "starred_url": "https://api.github.com/users/frobtech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frobtech/subscriptions", "organizations_url": "https://api.github.com/users/frobtech/orgs", "repos_url": "https://api.github.com/users/frobtech/repos", "events_url": "https://api.github.com/users/frobtech/events{/privacy}", "received_events_url": "https://api.github.com/users/frobtech/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "212513950ca0f5269b8e298a8b4c9a0982543449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212513950ca0f5269b8e298a8b4c9a0982543449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212513950ca0f5269b8e298a8b4c9a0982543449"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "f16a220efcc93fc12247dfb8974ea1148057e809", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9ede9571409e8db13fb8226a3ed69cfc9ed8a54", "patch": "@@ -1,3 +1,16 @@\n+2018-05-05  Roland McGrath  <mcgrathr@google.com>\n+\n+\tPR other/77609\n+\t* varasm.c (default_section_type_flags): Set SECTION_NOTYPE for\n+\tany section for which we don't know a specific type it should have,\n+\tregardless of name.  Previously this was done only for the exact\n+\tnames \".init_array\", \".fini_array\", and \".preinit_array\".\n+\t(default_elf_asm_named_section): Add comment about\n+\trelationship with default_section_type_flags and SECTION_NOTYPE.\n+\t(get_section): Don't consider it a type conflict if one side has\n+\tSECTION_NOTYPE and the other doesn't, as long as neither has the\n+\tSECTION_BSS et al used in the default_section_type_flags logic.\n+\n 2018-05-05  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/85653"}, {"sha": "85296b4a2ec44b3b59226cb484ba875986d7efa1", "filename": "gcc/varasm.c", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ede9571409e8db13fb8226a3ed69cfc9ed8a54/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f9ede9571409e8db13fb8226a3ed69cfc9ed8a54", "patch": "@@ -296,6 +296,17 @@ get_section (const char *name, unsigned int flags, tree decl)\n   else\n     {\n       sect = *slot;\n+      /* It is fine if one of the sections has SECTION_NOTYPE as long as\n+         the other has none of the contrary flags (see the logic at the end\n+         of default_section_type_flags, below).  */\n+      if (((sect->common.flags ^ flags) & SECTION_NOTYPE)\n+          && !((sect->common.flags | flags)\n+               & (SECTION_CODE | SECTION_BSS | SECTION_TLS | SECTION_ENTSIZE\n+                  | (HAVE_COMDAT_GROUP ? SECTION_LINKONCE : 0))))\n+        {\n+          sect->common.flags |= SECTION_NOTYPE;\n+          flags |= SECTION_NOTYPE;\n+        }\n       if ((sect->common.flags & ~SECTION_DECLARED) != flags\n \t  && ((sect->common.flags | flags) & SECTION_OVERRIDE) == 0)\n \t{\n@@ -6360,15 +6371,23 @@ default_section_type_flags (tree decl, const char *name, int reloc)\n       || strncmp (name, \".gnu.linkonce.tb.\", 17) == 0)\n     flags |= SECTION_TLS | SECTION_BSS;\n \n-  /* These three sections have special ELF types.  They are neither\n-     SHT_PROGBITS nor SHT_NOBITS, so when changing sections we don't\n-     want to print a section type (@progbits or @nobits).  If someone\n-     is silly enough to emit code or TLS variables to one of these\n-     sections, then don't handle them specially.  */\n-  if (!(flags & (SECTION_CODE | SECTION_BSS | SECTION_TLS))\n-      && (strcmp (name, \".init_array\") == 0\n-\t  || strcmp (name, \".fini_array\") == 0\n-\t  || strcmp (name, \".preinit_array\") == 0))\n+  /* Various sections have special ELF types that the assembler will\n+     assign by default based on the name.  They are neither SHT_PROGBITS\n+     nor SHT_NOBITS, so when changing sections we don't want to print a\n+     section type (@progbits or @nobits).  Rather than duplicating the\n+     assembler's knowledge of what those special name patterns are, just\n+     let the assembler choose the type if we don't know a specific\n+     reason to set it to something other than the default.  SHT_PROGBITS\n+     is the default for sections whose name is not specially known to\n+     the assembler, so it does no harm to leave the choice to the\n+     assembler when @progbits is the best thing we know to use.  If\n+     someone is silly enough to emit code or TLS variables to one of\n+     these sections, then don't handle them specially.\n+\n+     default_elf_asm_named_section (below) handles the BSS, TLS, ENTSIZE, and\n+     LINKONCE cases when NOTYPE is not set, so leave those to its logic.  */\n+  if (!(flags & (SECTION_CODE | SECTION_BSS | SECTION_TLS | SECTION_ENTSIZE))\n+      && !(HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE)))\n     flags |= SECTION_NOTYPE;\n \n   return flags;\n@@ -6454,6 +6473,10 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \n   fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);\n \n+  /* default_section_type_flags (above) knows which flags need special\n+     handling here, and sets NOTYPE when none of these apply so that the\n+     assembler's logic for default types can apply to user-chosen\n+     section names.  */\n   if (!(flags & SECTION_NOTYPE))\n     {\n       const char *type;"}]}