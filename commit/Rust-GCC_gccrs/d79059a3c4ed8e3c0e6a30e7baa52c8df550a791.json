{"sha": "d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5MDU5YTNjNGVkOGUzYzBlNmEzMGU3YmFhNTJjOGRmNTUwYTc5MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T10:20:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T10:20:28Z"}, "message": "[multiple changes]\n\n2012-10-01  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Minimize_Eliminate_Checks): Changes from testing.\n\t(Apply_Arithmetic_Overflow_Minimized_Eliminated): Changes\n\tfrom testing.\n\t* sinfo.ads: Remove note on not setting Entity field in overflow\n\tcase since this is no longer true.\n\t* Makefile.rtl: Add s-bignum.o\n\n2012-10-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* Make-generated.in: Correction to previous change for s-oscons\n\ttarget.\n\n2012-10-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-bignum.adb (Allocate_Bignum): Reorganize to kill strict\n\taliasing warning.\n\nFrom-SVN: r191913", "tree": {"sha": "25df1ca1977d290dc4ad13f1cea4344c3e847048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25df1ca1977d290dc4ad13f1cea4344c3e847048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/comments", "author": null, "committer": null, "parents": [{"sha": "acad3c0a0c949793de53b128adcadf0ecee2bd22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acad3c0a0c949793de53b128adcadf0ecee2bd22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acad3c0a0c949793de53b128adcadf0ecee2bd22"}], "stats": {"total": 166, "additions": 107, "deletions": 59}, "files": [{"sha": "b297746393d5dad09a0b5e2ab0b97904711769ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "patch": "@@ -1,3 +1,22 @@\n+2012-10-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Minimize_Eliminate_Checks): Changes from testing.\n+\t(Apply_Arithmetic_Overflow_Minimized_Eliminated): Changes\n+\tfrom testing.\n+\t* sinfo.ads: Remove note on not setting Entity field in overflow\n+\tcase since this is no longer true.\n+\t* Makefile.rtl: Add s-bignum.o\n+\n+2012-10-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* Make-generated.in: Correction to previous change for s-oscons\n+\ttarget.\n+\n+2012-10-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-bignum.adb (Allocate_Bignum): Reorganize to kill strict\n+\taliasing warning.\n+\n 2012-10-01  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb (Overflow_Check_Mode): New function"}, {"sha": "00278df251fe065ef60f9d0a05389fe1752ab2b9", "filename": "gcc/ada/Make-generated.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2FMake-generated.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2FMake-generated.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-generated.in?ref=d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "patch": "@@ -93,10 +93,9 @@ $(ADA_GEN_SUBDIR)/s-oscons.ads : $(ADA_GEN_SUBDIR)/s-oscons-tmplt.c $(ADA_GEN_SU\n \t\t$(RM) s-oscons-tmplt.i s-oscons-tmplt.s ; \\\n \t\t$(OSCONS_CPP) ; \\\n \t\t$(OSCONS_EXTRACT) ; \\\n-\t\t./xoscons ; \\\n-\t\t$(RM) ../../s-oscons.ads ; \\\n-\t\t$(MOVE_IF_CHANGE) s-oscons.ads $(ADA_GEN_SUBDIR)/s-oscons.ads ; \\\n-\t\t$(MOVE_IF_CHANGE) s-oscons.h $(ADA_GEN_SUBDIR)/s-oscons.h)\n+\t\t./xoscons ) ; \\\n+\t\t$(MOVE_IF_CHANGE) $(ADA_GEN_SUBDIR)/bldtools/oscons/s-oscons.ads $(ADA_GEN_SUBDIR)/s-oscons.ads ; \\\n+\t\t$(MOVE_IF_CHANGE) $(ADA_GEN_SUBDIR)/bldtools/oscons/s-oscons.h $(ADA_GEN_SUBDIR)/s-oscons.h\n \n $(ADA_GEN_SUBDIR)/sdefault.adb: $(ADA_GEN_SUBDIR)/stamp-sdefault ; @true\n $(ADA_GEN_SUBDIR)/stamp-sdefault : $(srcdir)/version.c Makefile"}, {"sha": "8ef3469159d749e9686a5212459bb576e592d399", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "patch": "@@ -481,6 +481,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-atocou$(objext) \\\n   s-atopri$(objext) \\\n   s-auxdec$(objext) \\\n+  s-bignum$(objext) \\\n   s-bitops$(objext) \\\n   s-boarop$(objext) \\\n   s-bytswa$(objext) \\"}, {"sha": "840fca49998014aaac92a3ff366a81602ae92bd5", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 53, "deletions": 23, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "patch": "@@ -1064,6 +1064,9 @@ package body Checks is\n       Loc : constant Source_Ptr := Sloc (Op);\n       P   : constant Node_Id    := Parent (Op);\n \n+      LLIB : constant Entity_Id := Base_Type (Standard_Long_Long_Integer);\n+      --  Operands and results are of this type when we convert\n+\n       Result_Type : constant Entity_Id := Etype (Op);\n       --  Original result type\n \n@@ -1109,7 +1112,7 @@ package body Checks is\n \n       --  Bignum case\n \n-      elsif Etype (Op) = RTE (RE_Bignum) then\n+      elsif Is_RTE (Etype (Op), RE_Bignum) then\n \n          --  We need a sequence that looks like\n \n@@ -1118,7 +1121,7 @@ package body Checks is\n          --    declare\n          --       M   : Mark_Id := SS_Mark;\n          --    begin\n-         --       Rnn := Long_Long_Integer (From_Bignum (Op));\n+         --       Rnn := Long_Long_Integer'Base (From_Bignum (Op));\n          --       SS_Release (M);\n          --    end;\n \n@@ -1132,14 +1135,14 @@ package body Checks is\n \n          --      A,B,C : Integer;\n          --      ...\n-         --      X := Long_Long_Integer (A * (B ** C));\n+         --      X := Long_Long_Integer'Base (A * (B ** C));\n \n          --  Now the product may fit in Long_Long_Integer but not in Integer.\n          --  In Minimize/Eliminate mode, we don't want to introduce an overflow\n          --  exception for this intermediate value.\n \n          declare\n-            Blk  : constant Node_Id  := Make_Bignum_Block (Loc);\n+            Blk : constant Node_Id  := Make_Bignum_Block (Loc);\n             Rnn : constant Entity_Id := Make_Temporary (Loc, 'R', Op);\n             RHS : Node_Id;\n \n@@ -1149,7 +1152,7 @@ package body Checks is\n             RHS := Convert_From_Bignum (Op);\n \n             if Nkind (P) /= N_Type_Conversion then\n-               RHS := Convert_To (Result_Type, Op);\n+               Convert_To_And_Rewrite (Result_Type, RHS);\n                Rtype := Result_Type;\n \n                --  Interesting question, do we need a check on that conversion\n@@ -1158,7 +1161,7 @@ package body Checks is\n                --  looked at later ???\n \n             else\n-               Rtype := Standard_Long_Long_Integer;\n+               Rtype := LLIB;\n             end if;\n \n             Insert_Before\n@@ -1177,10 +1180,10 @@ package body Checks is\n             Analyze_And_Resolve (Op);\n          end;\n \n-         --  Here if the result is Long_Long_Integer\n+         --  Here we know the result is Long_Long_Integer'Base\n \n       else\n-         pragma Assert (Etype (Op) = Standard_Long_Long_Integer);\n+         pragma Assert (Etype (Op) = LLIB);\n \n          --  All we need to do here is to convert the result to the proper\n          --  result type. As explained above for the Bignum case, we can\n@@ -6466,6 +6469,9 @@ package body Checks is\n       Llo, Lhi : Uint;\n       --  Ranges of values for left operand\n \n+      LLIB : constant Entity_Id := Base_Type (Standard_Long_Long_Integer);\n+      --  Operands and results are of this type when we convert\n+\n       LLLo, LLHi : Uint;\n       --  Bounds of Long_Long_Integer\n \n@@ -6559,7 +6565,27 @@ package body Checks is\n             --  Multiplication\n \n             when N_Op_Multiply =>\n-               raise Program_Error;\n+\n+               --  Possible bounds of multiplication must come from multiplying\n+               --  end values of the input ranges (four possibilities).\n+\n+               declare\n+                  Mrk : constant Uintp.Save_Mark := Mark;\n+                  --  Mark so we can release the Ev values\n+\n+                  Ev1 : constant Uint := Llo * Rlo;\n+                  Ev2 : constant Uint := Llo * Rhi;\n+                  Ev3 : constant Uint := Lhi * Rlo;\n+                  Ev4 : constant Uint := Lhi * Rhi;\n+\n+               begin\n+                  Lo := UI_Min (UI_Min (Ev1, Ev2), UI_Min (Ev3, Ev4));\n+                  Hi := UI_Max (UI_Max (Ev1, Ev2), UI_Max (Ev3, Ev4));\n+\n+                  --  Release the Ev values\n+\n+                  Release_And_Save (Mrk, Lo, Hi);\n+               end;\n \n             --  Plus operator (affirmation)\n \n@@ -6595,8 +6621,8 @@ package body Checks is\n       --  0 .. 1, but the cases are rare and it is not worth the effort.\n       --  Failing to do this switching back is only an efficiency issue.\n \n-      LLLo := Intval (Type_Low_Bound  (Standard_Long_Long_Integer));\n-      LLHi := Intval (Type_High_Bound (Standard_Long_Long_Integer));\n+      LLLo := Intval (Type_Low_Bound  (LLIB));\n+      LLHi := Intval (Type_High_Bound (LLIB));\n \n       if Lo = No_Uint or else Lo < LLLo or else Hi > LLHi then\n \n@@ -6688,26 +6714,30 @@ package body Checks is\n       --  Long_Long_Integer and mark the result type as Long_Long_Integer.\n \n       else\n-         Convert_To_And_Rewrite\n-           (Standard_Long_Long_Integer, Right_Opnd (N));\n+         --  Convert right or only operand to Long_Long_Integer, except that\n+         --  we do not touch the exponentiation right operand.\n \n-         if Binary then\n-            Convert_To_And_Rewrite\n-              (Standard_Long_Long_Integer, Left_Opnd (N));\n+         if Nkind (N) /= N_Op_Expon then\n+            Convert_To_And_Rewrite (LLIB, Right_Opnd (N));\n          end if;\n \n-         Set_Etype (N, Standard_Long_Long_Integer);\n+         --  Convert left operand to Long_Long_Integer for binary case\n \n-         --  Clear entity field, since we have modified the type and mark\n-         --  the node as analyzed to prevent junk infinite recursion\n+         if Binary then\n+            Convert_To_And_Rewrite (LLIB, Left_Opnd (N));\n+         end if;\n \n+         --  Reset node to unanalyzed\n+\n+         Set_Analyzed (N, False);\n+         Set_Etype (N, Empty);\n          Set_Entity (N, Empty);\n-         Set_Analyzed (N, True);\n+         Set_Do_Overflow_Check (N, False);\n \n-         --  Turn off the overflow check flag, since this is precisely the\n-         --  case where we have avoided an intermediate overflow check.\n+         --  Now analyze this new node with checks off (since we know that\n+         --  we do not need an overflow check).\n \n-         Set_Do_Overflow_Check (N, False);\n+         Analyze_And_Resolve (N, LLIB, Suppress => All_Checks);\n       end if;\n    end Minimize_Eliminate_Overflow_Checks;\n "}, {"sha": "06f7efdf32718b84d534cafee44e37dc5c7ff250", "filename": "gcc/ada/s-bignum.adb", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2Fs-bignum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2Fs-bignum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bignum.adb?ref=d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "patch": "@@ -37,8 +37,6 @@ with System;                  use System;\n with System.Secondary_Stack;  use System.Secondary_Stack;\n with System.Storage_Elements; use System.Storage_Elements;\n \n-with Unchecked_Conversion;\n-\n package body System.Bignums is\n \n    use Interfaces;\n@@ -205,36 +203,47 @@ package body System.Bignums is\n    function Allocate_Bignum (Len : Length) return Bignum is\n       Addr : Address;\n \n-      --  The following definitions are to allow us to set the discriminant\n-\n-      type Header is record\n-         Len : Length;\n-         Neg : Boolean;\n-      end record;\n-\n-      for Header use record\n-         Len at 0 range 0 .. 23;\n-         Neg at 3 range 0 .. 7;\n-      end record;\n-\n-      type Header_Ptr is access all Header;\n-\n-      function To_Header_Ptr is new Unchecked_Conversion (Address, Header_Ptr);\n-      function To_Bignum     is new Unchecked_Conversion (Address, Bignum);\n-\n    begin\n-      if True then\n+      --  Change the if False here to if True to get allocation on the heap\n+      --  instead of the secondary stack, which is convenient for debugging\n+      --  System.Bignum itself.\n+\n+      if False then\n          declare\n             B : Bignum;\n          begin\n             B := new Bignum_Data'(Len, False, (others => 0));\n             return B;\n          end;\n \n+      --  Normal case of allocation on the secondary stack\n+\n       else\n+         --  Note: The approach used here is designed to avoid strict aliasing\n+         --  warnings that appeared previously using unchecked conversion.\n+\n          SS_Allocate (Addr, Storage_Offset (4 + 4 * Len));\n-         To_Header_Ptr (Addr).Len := Len;\n-         return To_Bignum (Addr);\n+\n+         declare\n+            B : Bignum;\n+            for B'Address use Addr'Address;\n+            pragma Import (Ada, B);\n+\n+            BD : Bignum_Data (Len);\n+            for BD'Address use Addr;\n+            pragma Import (Ada, BD);\n+\n+            --  Expose a writable view of discriminant BD.Len so that we can\n+            --  initialize it.\n+\n+            BL : Length;\n+            for BL'Address use BD.Len'Address;\n+            pragma Import (Ada, BL);\n+\n+         begin\n+            BL := Len;\n+            return B;\n+         end;\n       end if;\n    end Allocate_Bignum;\n "}, {"sha": "31a069cd1a6262c2ee0291b731c8d07d4441d313", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79059a3c4ed8e3c0e6a30e7baa52c8df550a791/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=d79059a3c4ed8e3c0e6a30e7baa52c8df550a791", "patch": "@@ -408,14 +408,6 @@ package Sinfo is\n    --       Do_Overflow_Check        (Flag17-Sem) set if overflow check needed\n    --       Has_Private_View         (Flag11-Sem) set in generic units.\n \n-   --       Note on use of entity field. This field is set during analysis\n-   --       and is used in carrying out semantic checking, but it has no\n-   --       significance to the back end, which is driven by the Etype's\n-   --       of the operands, and the Etype of the result. During processing\n-   --       in the exapander for overflow checks, these types may be modified\n-   --       and there is no point in trying to set a proper Entity value, so\n-   --       it just gets cleared to Empty in this situation.\n-\n    --    \"plus fields for unary operator\"\n    --       Chars                    (Name1)      Name_Id for the operator\n    --       Right_Opnd               (Node3)      right operand expression\n@@ -424,8 +416,6 @@ package Sinfo is\n    --       Do_Overflow_Check        (Flag17-Sem) set if overflow check needed\n    --       Has_Private_View         (Flag11-Sem) set in generic units.\n \n-   --       See note on use of Entity field above (same situation).\n-\n    --    \"plus fields for expression\"\n    --       Paren_Count                           number of parentheses levels\n    --       Etype                    (Node5-Sem)  type of the expression"}]}