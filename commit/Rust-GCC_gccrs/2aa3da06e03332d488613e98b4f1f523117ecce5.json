{"sha": "2aa3da06e03332d488613e98b4f1f523117ecce5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhM2RhMDZlMDMzMzJkNDg4NjEzZTk4YjRmMWY1MjMxMTdlY2NlNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-26T15:40:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-26T15:40:40Z"}, "message": "* gimple-fold.c (gimple_get_virt_method_for_binfo): Use ctor_for_folding.\n\nFrom-SVN: r202002", "tree": {"sha": "ff56072d31d229f2d2389528ce1022a398eafae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff56072d31d229f2d2389528ce1022a398eafae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aa3da06e03332d488613e98b4f1f523117ecce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa3da06e03332d488613e98b4f1f523117ecce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa3da06e03332d488613e98b4f1f523117ecce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa3da06e03332d488613e98b4f1f523117ecce5/comments", "author": null, "committer": null, "parents": [{"sha": "0987ffe7c18bf1bf5830364e405009ed8f4a61bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0987ffe7c18bf1bf5830364e405009ed8f4a61bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0987ffe7c18bf1bf5830364e405009ed8f4a61bb"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "29a8d558588b369acf6f980e59fc1a958649c3ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa3da06e03332d488613e98b4f1f523117ecce5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa3da06e03332d488613e98b4f1f523117ecce5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aa3da06e03332d488613e98b4f1f523117ecce5", "patch": "@@ -1,3 +1,7 @@\n+2013-08-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Use ctor_for_folding.\n+\n 2013-08-26  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa.c (comdat_can_be_unshared_p_1): C++ constructors and destructors"}, {"sha": "e6baabfa03d05d4886b166f41a91cf845e9f1eee", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa3da06e03332d488613e98b4f1f523117ecce5/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa3da06e03332d488613e98b4f1f523117ecce5/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=2aa3da06e03332d488613e98b4f1f523117ecce5", "patch": "@@ -3097,7 +3097,7 @@ tree\n gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo)\n {\n   unsigned HOST_WIDE_INT offset, size;\n-  tree v, fn, vtable;\n+  tree v, fn, vtable, init;\n \n   vtable = v = BINFO_VTABLE (known_binfo);\n   /* If there is no virtual methods table, leave the OBJ_TYPE_REF alone.  */\n@@ -3117,14 +3117,24 @@ gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo)\n   v = TREE_OPERAND (v, 0);\n \n   if (TREE_CODE (v) != VAR_DECL\n-      || !DECL_VIRTUAL_P (v)\n-      || !DECL_INITIAL (v)\n-      || DECL_INITIAL (v) == error_mark_node)\n+      || !DECL_VIRTUAL_P (v))\n     return NULL_TREE;\n+  init = ctor_for_folding (v);\n+\n+  /* The virtual tables should always be born with constructors.\n+     and we always should assume that they are avaialble for\n+     folding.  At the moment we do not stream them in all cases,\n+     but it should never happen that ctor seem unreachable.  */\n+  gcc_assert (init);\n+  if (init == error_mark_node)\n+    {\n+      gcc_assert (in_lto_p);\n+      return NULL_TREE;\n+    }\n   gcc_checking_assert (TREE_CODE (TREE_TYPE (v)) == ARRAY_TYPE);\n   size = tree_low_cst (TYPE_SIZE (TREE_TYPE (TREE_TYPE (v))), 1);\n   offset += token * size;\n-  fn = fold_ctor_reference (TREE_TYPE (TREE_TYPE (v)), DECL_INITIAL (v),\n+  fn = fold_ctor_reference (TREE_TYPE (TREE_TYPE (v)), init,\n \t\t\t    offset, size, vtable);\n   if (!fn || integer_zerop (fn))\n     return NULL_TREE;"}]}