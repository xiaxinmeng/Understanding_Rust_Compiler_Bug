{"sha": "14553b75690c42391b53a9b07374825d0ce5072f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1NTNiNzU2OTBjNDIzOTFiNTNhOWIwNzM3NDgyNWQwY2U1MDcyZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-04T03:57:21Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-04T03:57:21Z"}, "message": "(process_command): Don't check whether file `-' exists.\n\nFrom-SVN: r5066", "tree": {"sha": "ef4333de1678746e605f60b1e566bdb56c711892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4333de1678746e605f60b1e566bdb56c711892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14553b75690c42391b53a9b07374825d0ce5072f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14553b75690c42391b53a9b07374825d0ce5072f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14553b75690c42391b53a9b07374825d0ce5072f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14553b75690c42391b53a9b07374825d0ce5072f/comments", "author": null, "committer": null, "parents": [{"sha": "1c66daf534311d974c2e49c14a59b88412d58763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c66daf534311d974c2e49c14a59b88412d58763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c66daf534311d974c2e49c14a59b88412d58763"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "1c17bb98d440f5ae9723cfbafd37483b36505940", "filename": "gcc/gcc.c", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14553b75690c42391b53a9b07374825d0ce5072f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14553b75690c42391b53a9b07374825d0ce5072f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=14553b75690c42391b53a9b07374825d0ce5072f", "patch": "@@ -2508,31 +2508,36 @@ process_command (argc, argv)\n \t  switches[n_switches].part1 = p;\n \t  /* Deal with option arguments in separate argv elements.  */\n \t  if ((SWITCH_TAKES_ARG (c) > (p[1] != 0))\n-\t      || WORD_SWITCH_TAKES_ARG (p)) {\n-\t    int j = 0;\n-\t    int n_args = WORD_SWITCH_TAKES_ARG (p);\n+\t      || WORD_SWITCH_TAKES_ARG (p))\n+\t    {\n+\t      int j = 0;\n+\t      int n_args = WORD_SWITCH_TAKES_ARG (p);\n \n-\t    if (n_args == 0) {\n-\t      /* Count only the option arguments in separate argv elements.  */\n-\t      n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n+\t      if (n_args == 0)\n+\t\t{\n+\t\t  /* Count only the option arguments in separate argv elements.  */\n+\t\t  n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n+\t\t}\n+\t      if (i + n_args >= argc)\n+\t\tfatal (\"argument to `-%s' is missing\", p);\n+\t      switches[n_switches].args\n+\t\t= (char **) xmalloc ((n_args + 1) * sizeof (char *));\n+\t      while (j < n_args)\n+\t\tswitches[n_switches].args[j++] = argv[++i];\n+\t      /* Null-terminate the vector.  */\n+\t      switches[n_switches].args[j] = 0;\n \t    }\n-\t    if (i + n_args >= argc)\n-\t      fatal (\"argument to `-%s' is missing\", p);\n-\t    switches[n_switches].args\n-\t      = (char **) xmalloc ((n_args + 1) * sizeof (char *));\n-\t    while (j < n_args)\n-\t      switches[n_switches].args[j++] = argv[++i];\n-\t    /* Null-terminate the vector.  */\n-\t    switches[n_switches].args[j] = 0;\n-\t  } else if (*switches_need_spaces != 0 && (c == 'o' || c == 'L')) {\n-\t    /* On some systems, ld cannot handle -o or -L without space.\n-\t       So split the -o or -L from its argument.  */\n-\t    switches[n_switches].part1 = (c == 'o' ? \"o\" : \"L\");\n-\t    switches[n_switches].args = (char **) xmalloc (2 * sizeof (char *));\n-\t    switches[n_switches].args[0] = xmalloc (strlen (p));\n-\t    strcpy (switches[n_switches].args[0], &p[1]);\n-\t    switches[n_switches].args[1] = 0;\n-\t  } else\n+\t  else if (*switches_need_spaces != 0 && (c == 'o' || c == 'L'))\n+\t    {\n+\t      /* On some systems, ld cannot handle -o or -L without space.\n+\t\t So split the -o or -L from its argument.  */\n+\t      switches[n_switches].part1 = (c == 'o' ? \"o\" : \"L\");\n+\t      switches[n_switches].args = (char **) xmalloc (2 * sizeof (char *));\n+\t      switches[n_switches].args[0] = xmalloc (strlen (p));\n+\t      strcpy (switches[n_switches].args[0], &p[1]);\n+\t      switches[n_switches].args[1] = 0;\n+\t    }\n+\t  else\n \t    switches[n_switches].args = 0;\n \t  switches[n_switches].valid = 0;\n \t  /* This is always valid, since gcc.c itself understands it.  */\n@@ -2543,6 +2548,7 @@ process_command (argc, argv)\n       else\n \t{\n \t  if ((argv[i][0] != '-' || argv[i][1] != 'l')\n+\t      && strcmp (argv[i], \"-\")\n \t      && access (argv[i], R_OK) < 0)\n \t    {\n \t      perror_with_name (argv[i]);"}]}