{"sha": "eb085d72becf24be9c72b90598cb0ffb2ba0702e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwODVkNzJiZWNmMjRiZTljNzJiOTA1OThjYjBmZmIyYmEwNzAyZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-13T21:44:15Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-13T21:44:15Z"}, "message": "More DF/XF/DI fixes.\n\nFrom-SVN: r8079", "tree": {"sha": "a40998df0ef7c0efc575cfe6983aed65dcd3b259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a40998df0ef7c0efc575cfe6983aed65dcd3b259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb085d72becf24be9c72b90598cb0ffb2ba0702e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb085d72becf24be9c72b90598cb0ffb2ba0702e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb085d72becf24be9c72b90598cb0ffb2ba0702e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb085d72becf24be9c72b90598cb0ffb2ba0702e/comments", "author": null, "committer": null, "parents": [{"sha": "bd1a74b1a72ed586301861048e0d9fc945c2875a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1a74b1a72ed586301861048e0d9fc945c2875a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1a74b1a72ed586301861048e0d9fc945c2875a"}], "stats": {"total": 120, "additions": 72, "deletions": 48}, "files": [{"sha": "998027e2372c08533e98cb763aedb57c0b20667e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 72, "deletions": 48, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb085d72becf24be9c72b90598cb0ffb2ba0702e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb085d72becf24be9c72b90598cb0ffb2ba0702e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=eb085d72becf24be9c72b90598cb0ffb2ba0702e", "patch": "@@ -1329,6 +1329,11 @@\n \t{\t\t\t/* 1 scratch register */\n \t  output_asm_insn (AS2 (mov%L0,%2,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n+\n+\t\t\t\t/* account for push above */\n+\t  if (reg_mentioned_p (stack_pointer_rtx, XEXP (xop[3], 0)))\n+\t    xop[3] = adj_offsettable_operand (xop[3], 4);\n+\n \t  output_asm_insn (AS2 (mov%L0,%3,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n \t}\n@@ -1533,15 +1538,30 @@\n \t  output_asm_insn (AS2 (mov%L0,%3,%1), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%1), xop);\n+\n+\t\t\t\t/* account for 2 pushes above */\n+\t  if (reg_mentioned_p (stack_pointer_rtx, XEXP (xop[4], 0)))\n+\t    xop[4] = adj_offsettable_operand (xop[4], 8);\n+\n \t  output_asm_insn (AS2 (mov%L0,%4,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n \t}\n       else\n \t{\t\t\t/* 1 scratch register */\n \t  output_asm_insn (AS2 (mov%L0,%2,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n+\n+\t\t\t\t/* account for 1 push above */\n+\t  if (reg_mentioned_p (stack_pointer_rtx, XEXP (xop[3], 0)))\n+\t    xop[3] = adj_offsettable_operand (xop[3], 4);\n+\n \t  output_asm_insn (AS2 (mov%L0,%3,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n+\n+\t\t\t\t/* account for 2 pushes above */\n+\t  if (reg_mentioned_p (stack_pointer_rtx, XEXP (xop[4], 0)))\n+\t    xop[4] = adj_offsettable_operand (xop[4], 8);\n+\n \t  output_asm_insn (AS2 (mov%L0,%4,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n \t}\n@@ -1573,19 +1593,19 @@\n     {\t\t\t\t/* 2 scratch registers available */\n       output_asm_insn (AS2 (mov%L0,%2,%0), xop);\n       output_asm_insn (AS2 (mov%L0,%3,%1), xop);\n-      output_asm_insn (AS2 (mov%L5,%5,%0), xop);\n-      output_asm_insn (AS2 (mov%L6,%6,%1), xop);\n+      output_asm_insn (AS2 (mov%L5,%0,%5), xop);\n+      output_asm_insn (AS2 (mov%L6,%1,%6), xop);\n       output_asm_insn (AS2 (mov%L0,%4,%0), xop);\n-      output_asm_insn (AS2 (mov%L7,%7,%0), xop);\n+      output_asm_insn (AS2 (mov%L7,%0,%7), xop);\n     }\n   else\n     {\t\t\t\t/* 1 scratch register */\n       output_asm_insn (AS2 (mov%L0,%2,%0), xop);\n-      output_asm_insn (AS2 (mov%L0,%5,%0), xop);\n+      output_asm_insn (AS2 (mov%L0,%0,%5), xop);\n       output_asm_insn (AS2 (mov%L0,%3,%0), xop);\n-      output_asm_insn (AS2 (mov%L0,%6,%0), xop);\n+      output_asm_insn (AS2 (mov%L0,%0,%6), xop);\n       output_asm_insn (AS2 (mov%L0,%4,%0), xop);\n-      output_asm_insn (AS2 (mov%L7,%7,%0), xop);\n+      output_asm_insn (AS2 (mov%L7,%0,%7), xop);\n     }\n \n   RET;\n@@ -1722,6 +1742,11 @@\n \t{\t\t\t/* 1 scratch register */\n \t  output_asm_insn (AS2 (mov%L0,%2,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n+\n+\t\t\t\t/* account for push above */\n+\t  if (reg_mentioned_p (stack_pointer_rtx, XEXP (xop[3], 0)))\n+\t    xop[3] = adj_offsettable_operand (xop[3], 4);\n+\n \t  output_asm_insn (AS2 (mov%L0,%3,%0), xop);\n \t  output_asm_insn (AS1 (push%L0,%0), xop);\n \t}\n@@ -2190,7 +2215,7 @@\n \n (define_expand \"fixuns_truncdfsi2\"\n   [(set (match_dup 4)\n-\t(match_operand:DF 1 \"general_operand\" \"\"))\n+\t(match_operand:DF 1 \"register_operand\" \"\"))\n    (parallel [(set (match_dup 2)\n \t\t   (fix:DI (fix:DF (match_dup 4))))\n \t      (clobber (match_dup 4))\n@@ -2211,7 +2236,7 @@\n \n (define_expand \"fixuns_truncsfsi2\"\n   [(set (match_dup 4)\n-\t(match_operand:SF 1 \"general_operand\" \"\"))\n+\t(match_operand:SF 1 \"register_operand\" \"\"))\n    (parallel [(set (match_dup 2)\n \t\t   (fix:DI (fix:SF (match_dup 4))))\n \t      (clobber (match_dup 4))\n@@ -2233,63 +2258,62 @@\n ;; Signed conversion to DImode.\n \n (define_expand \"fix_truncxfdi2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(fix:DI (match_operand:XF 1 \"general_operand\" \"\")))]\n+  [(set (match_dup 2)\n+\t(match_operand:XF 1 \"register_operand\" \"\"))\n+   (parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n+\t\t   (fix:DI (fix:XF (match_dup 2))))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:SI 5 \"\"))])]\n   \"TARGET_80387\"\n   \"\n {\n-  if (operands[0])\t\t/* prevent unused code message */\n-    {\n-      rtx reg = gen_reg_rtx (XFmode);\n-      emit_insn (gen_movxf (reg, operands[1]));\n-      emit_insn (gen_fix_truncxfdi2_internal (operands[0],\n-\t\t\t\t\t      reg,\n-\t\t\t\t\t      assign_386_stack_local (SImode, 0),\n-\t\t\t\t\t      assign_386_stack_local (SImode, 1)));\n-      DONE;\n-    }\n+  operands[1] = copy_to_mode_reg (XFmode, operands[1]);\n+  operands[2] = gen_reg_rtx (XFmode);\n+  operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n }\")\n \n (define_expand \"fix_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(fix:DI (match_operand:DF 1 \"general_operand\" \"\")))]\n+  [(set (match_dup 2)\n+\t(match_operand:DF 1 \"register_operand\" \"\"))\n+   (parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n+\t\t   (fix:DI (fix:DF (match_dup 2))))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:SI 5 \"\"))])]\n   \"TARGET_80387\"\n   \"\n {\n-  if (operands[0])\t\t/* prevent unused code message */\n-    {\n-      rtx reg = gen_reg_rtx (DFmode);\n-      emit_insn (gen_movdf (reg, operands[1]));\n-      emit_insn (gen_fix_truncdfdi2_internal (operands[0],\n-\t\t\t\t\t      reg,\n-\t\t\t\t\t      assign_386_stack_local (SImode, 0),\n-\t\t\t\t\t      assign_386_stack_local (SImode, 1)));\n-      DONE;\n-    }\n+  operands[1] = copy_to_mode_reg (DFmode, operands[1]);\n+  operands[2] = gen_reg_rtx (DFmode);\n+  operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n }\")\n \n-\n (define_expand \"fix_truncsfdi2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(fix:DI (match_operand:SF 1 \"general_operand\" \"\")))]\n+  [(set (match_dup 2)\n+\t(match_operand:SF 1 \"register_operand\" \"\"))\n+   (parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n+\t\t   (fix:DI (fix:SF (match_dup 2))))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:SI 5 \"\"))])]\n   \"TARGET_80387\"\n   \"\n {\n-  if (operands[0])\t\t/* prevent unused code message */\n-    {\n-      rtx reg = gen_reg_rtx (SFmode);\n-      emit_insn (gen_movsf (reg, operands[1]));\n-      emit_insn (gen_fix_truncsfdi2_internal (operands[0],\n-\t\t\t\t\t      reg,\n-\t\t\t\t\t      assign_386_stack_local (SImode, 0),\n-\t\t\t\t\t      assign_386_stack_local (SImode, 1)));\n-      DONE;\n-    }\n+  operands[1] = copy_to_mode_reg (SFmode, operands[1]);\n+  operands[2] = gen_reg_rtx (SFmode);\n+  operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n }\")\n \n ;; These match a signed conversion of either DFmode or SFmode to DImode.\n \n-(define_insn \"fix_truncxfdi2_internal\"\n+(define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t(fix:DI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n@@ -2299,7 +2323,7 @@\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n \n-(define_insn \"fix_truncdfdi2_internal\"\n+(define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n@@ -2309,7 +2333,7 @@\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n \n-(define_insn \"fix_truncsfdi2_internal\"\n+(define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))"}]}