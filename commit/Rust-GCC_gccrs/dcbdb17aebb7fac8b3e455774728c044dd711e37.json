{"sha": "dcbdb17aebb7fac8b3e455774728c044dd711e37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiZGIxN2FlYmI3ZmFjOGIzZTQ1NTc3NDcyOGMwNDRkZDcxMWUzNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-07-20T07:00:50Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-07-20T07:00:50Z"}, "message": "Add sreal to selftests\n\n\t* selftest-run-tests.c (selftest::run_tests): New function.\n\t* selftest.h (sreal_c_tests): Declare.\n\t* sreal.c (sreal_verify_basics): New function.\n\t(verify_aritmetics): Likewise.\n\t(sreal_verify_arithmetics): Likewise.\n\t(verify_shifting): Likewise.\n\t(sreal_verify_shifting): Likewise.\n\t(void sreal_c_tests): Likewise.\n\t* gcc.dg/plugin/plugin.exp: Remove sreal test.\n\t* gcc.dg/plugin/sreal-test-1.c: Remove.\n\t* gcc.dg/plugin/sreal_plugin.c: Remove.\n\nFrom-SVN: r238508", "tree": {"sha": "88225b8bb402d7d64ffddd07144958b5588a22da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88225b8bb402d7d64ffddd07144958b5588a22da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcbdb17aebb7fac8b3e455774728c044dd711e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbdb17aebb7fac8b3e455774728c044dd711e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcbdb17aebb7fac8b3e455774728c044dd711e37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbdb17aebb7fac8b3e455774728c044dd711e37/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43694e8bbb002aac45baaf35cc70861c546a1a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43694e8bbb002aac45baaf35cc70861c546a1a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43694e8bbb002aac45baaf35cc70861c546a1a40"}], "stats": {"total": 310, "additions": 131, "deletions": 179}, "files": [{"sha": "2d767c8e7fe125c7f7330b91eb7d89106abd56dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcbdb17aebb7fac8b3e455774728c044dd711e37", "patch": "@@ -1,3 +1,14 @@\n+2016-07-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* selftest-run-tests.c (selftest::run_tests): New function.\n+\t* selftest.h (sreal_c_tests): Declare.\n+\t* sreal.c (sreal_verify_basics): New function.\n+\t(verify_aritmetics): Likewise.\n+\t(sreal_verify_arithmetics): Likewise.\n+\t(verify_shifting): Likewise.\n+\t(sreal_verify_shifting): Likewise.\n+\t(void sreal_c_tests): Likewise.\n+\n 2016-07-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/71916"}, {"sha": "bb004cc51673fd1e85059be8375ff96bc86fd430", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=dcbdb17aebb7fac8b3e455774728c044dd711e37", "patch": "@@ -49,6 +49,7 @@ selftest::run_tests ()\n   pretty_print_c_tests ();\n   wide_int_cc_tests ();\n   ggc_tests_c_tests ();\n+  sreal_c_tests ();\n \n   /* Mid-level data structures.  */\n   input_c_tests ();"}, {"sha": "c80538627670ad0f0587baa6eb3cd734479895a6", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=dcbdb17aebb7fac8b3e455774728c044dd711e37", "patch": "@@ -86,6 +86,7 @@ extern void pretty_print_c_tests ();\n extern void rtl_tests_c_tests ();\n extern void spellcheck_c_tests ();\n extern void spellcheck_tree_c_tests ();\n+extern void sreal_c_tests ();\n extern void tree_c_tests ();\n extern void tree_cfg_c_tests ();\n extern void vec_c_tests ();"}, {"sha": "9c43b4eed21e20bd66a86d09b0e477ae90e22c1a", "filename": "gcc/sreal.c", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=dcbdb17aebb7fac8b3e455774728c044dd711e37", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <math.h>\n #include \"coretypes.h\"\n #include \"sreal.h\"\n+#include \"selftest.h\"\n \n /* Print the content of struct sreal.  */\n \n@@ -233,3 +234,114 @@ sreal::operator/ (const sreal &other) const\n   r.normalize ();\n   return r;\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Selftests for sreals.  */\n+\n+/* Verify basic sreal operations.  */\n+\n+static void\n+sreal_verify_basics (void)\n+{\n+  sreal minimum = INT_MIN;\n+  sreal maximum = INT_MAX;\n+\n+  sreal seven = 7;\n+  sreal minus_two = -2;\n+  sreal minus_nine = -9;\n+\n+  ASSERT_EQ (INT_MIN, minimum.to_int ());\n+  ASSERT_EQ (INT_MAX, maximum.to_int ());\n+\n+  ASSERT_FALSE (minus_two < minus_two);\n+  ASSERT_FALSE (seven < seven);\n+  ASSERT_TRUE (seven > minus_two);\n+  ASSERT_TRUE (minus_two < seven);\n+  ASSERT_TRUE (minus_two != seven);\n+  ASSERT_EQ (minus_two, -2);\n+  ASSERT_EQ (seven, 7);\n+  ASSERT_EQ ((seven << 10) >> 10, 7);\n+  ASSERT_EQ (seven + minus_nine, -2);\n+}\n+\n+/* Helper function that performs basic arithmetics and comparison\n+   of given arguments A and B.  */\n+\n+static void\n+verify_aritmetics (int64_t a, int64_t b)\n+{\n+  ASSERT_EQ (a, -(-(sreal (a))).to_int ());\n+  ASSERT_EQ (a < b, sreal (a) < sreal (b));\n+  ASSERT_EQ (a <= b, sreal (a) <= sreal (b));\n+  ASSERT_EQ (a == b, sreal (a) == sreal (b));\n+  ASSERT_EQ (a != b, sreal (a) != sreal (b));\n+  ASSERT_EQ (a > b, sreal (a) > sreal (b));\n+  ASSERT_EQ (a >= b, sreal (a) >= sreal (b));\n+  ASSERT_EQ (a + b, (sreal (a) + sreal (b)).to_int ());\n+  ASSERT_EQ (a - b, (sreal (a) - sreal (b)).to_int ());\n+  ASSERT_EQ (b + a, (sreal (b) + sreal (a)).to_int ());\n+  ASSERT_EQ (b - a, (sreal (b) - sreal (a)).to_int ());\n+}\n+\n+/* Verify arithmetics for interesting numbers.  */\n+\n+static void\n+sreal_verify_arithmetics (void)\n+{\n+  int values[] = {-14123413, -7777, -17, -10, -2, 0, 17, 139, 1234123};\n+  unsigned c = sizeof (values) / sizeof (int);\n+\n+  for (unsigned i = 0; i < c; i++)\n+    for (unsigned j = 0; j < c; j++)\n+      {\n+\tint a = values[i];\n+\tint b = values[j];\n+\n+\tverify_aritmetics (a, b);\n+      }\n+}\n+\n+/* Helper function that performs various shifting test of a given\n+   argument A.  */\n+\n+static void\n+verify_shifting (int64_t a)\n+{\n+  sreal v = a;\n+\n+  for (unsigned i = 0; i < 16; i++)\n+    ASSERT_EQ (a << i, (v << i).to_int());\n+\n+  a = a << 16;\n+  v = v << 16;\n+\n+  for (unsigned i = 0; i < 16; i++)\n+    ASSERT_EQ (a >> i, (v >> i).to_int());\n+}\n+\n+/* Verify shifting for interesting numbers.  */\n+\n+static void\n+sreal_verify_shifting (void)\n+{\n+  int values[] = {0, 17, 32, 139, 1024, 55555, 1234123};\n+  unsigned c = sizeof (values) / sizeof (int);\n+\n+  for (unsigned i = 0; i < c; i++)\n+    verify_shifting (values[i]);\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void sreal_c_tests ()\n+{\n+  sreal_verify_basics ();\n+  sreal_verify_arithmetics ();\n+  sreal_verify_shifting ();\n+}\n+\n+} // namespace selftest\n+#endif /* CHECKING_P */"}, {"sha": "7f42fad40647a6b6a30c526497e4dcdc64219c88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcbdb17aebb7fac8b3e455774728c044dd711e37", "patch": "@@ -1,3 +1,9 @@\n+2016-07-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/plugin/plugin.exp: Remove sreal test.\n+\t* gcc.dg/plugin/sreal-test-1.c: Remove.\n+\t* gcc.dg/plugin/sreal_plugin.c: Remove.\n+\n 2016-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/71902"}, {"sha": "faebb75d114474b4044eddce30a4c0cc44aa1d7b", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbdb17aebb7fac8b3e455774728c044dd711e37/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=dcbdb17aebb7fac8b3e455774728c044dd711e37", "patch": "@@ -59,7 +59,6 @@ set plugin_test_list [list \\\n     { selfassign.c self-assign-test-1.c self-assign-test-2.c } \\\n     { ggcplug.c ggcplug-test-1.c } \\\n     { one_time_plugin.c one_time-test-1.c } \\\n-    { sreal_plugin.c sreal-test-1.c } \\\n     { start_unit_plugin.c start_unit-test-1.c } \\\n     { finish_unit_plugin.c finish_unit-test-1.c } \\\n     { wide-int_plugin.c wide-int-test-1.c } \\"}, {"sha": "1bce2cc0a35fac5d04b6a1e96944bd8ae633b795", "filename": "gcc/testsuite/gcc.dg/plugin/sreal-test-1.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43694e8bbb002aac45baaf35cc70861c546a1a40/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43694e8bbb002aac45baaf35cc70861c546a1a40/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal-test-1.c?ref=43694e8bbb002aac45baaf35cc70861c546a1a40", "patch": "@@ -1,8 +0,0 @@\n-/* Test that pass is inserted and invoked once. */\n-/* { dg-do compile } */\n-/* { dg-options \"-O\" } */\n-\n-int main (int argc, char **argv)\n-{\n-  return 0;\n-}"}, {"sha": "f1138163c5d7095bb7078c9961f9c1d7e29484ca", "filename": "gcc/testsuite/gcc.dg/plugin/sreal_plugin.c", "status": "removed", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43694e8bbb002aac45baaf35cc70861c546a1a40/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43694e8bbb002aac45baaf35cc70861c546a1a40/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fsreal_plugin.c?ref=43694e8bbb002aac45baaf35cc70861c546a1a40", "patch": "@@ -1,170 +0,0 @@\n-/* Plugin that process internal tests for sreal.  */\n-#include \"config.h\"\n-#include \"gcc-plugin.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tree.h\"\n-#include \"tm.h\"\n-#include \"toplev.h\"\n-#include \"hash-table.h\"\n-#include \"vec.h\"\n-#include \"ggc.h\"\n-#include \"basic-block.h\"\n-#include \"tree-ssa-alias.h\"\n-#include \"internal-fn.h\"\n-#include \"gimple-fold.h\"\n-#include \"tree-eh.h\"\n-#include \"gimple-expr.h\"\n-#include \"is-a.h\"\n-#include \"gimple.h\"\n-#include \"tree-pass.h\"\n-#include \"intl.h\"\n-#include \"context.h\"\n-#include \"sreal.h\"\n-\n-int plugin_is_GPL_compatible;\n-\n-namespace {\n-\n-static void assert (bool c)\n-{\n-  if (!c)\n-    abort ();\n-}\n-\n-const pass_data pass_data_sreal_pass =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"sreal\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  PROP_gimple_any, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class sreal_pass : public gimple_opt_pass\n-{\n-public:\n-  sreal_pass(gcc::context *ctxt)\n-    : gimple_opt_pass(pass_data_sreal_pass, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *);\n-\n-private:\n-  void check_sreal ();\n-\n-  static void verify_aritmetics (int a, int b);\n-  static void verify_shifting (int a);\n-}; // class one_pass\n-\n-} // anon namespace\n-\n-void\n-sreal_pass::verify_aritmetics (int a, int b)\n-{\n-  assert (a == -(-(sreal (a))).to_int ());\n-  assert ((a < b) == (sreal (a) < sreal (b)));\n-  assert ((a <= b) == (sreal (a) <= sreal (b)));\n-  assert ((a == b) == (sreal (a) == sreal (b)));\n-  assert ((a != b) == (sreal (a) != sreal (b)));\n-  assert ((a > b) == (sreal (a) > sreal (b)));\n-  assert ((a >= b) == (sreal (a) >= sreal (b)));\n-  assert ((a + b) == (sreal (a) + sreal (b)).to_int ());\n-  assert ((a - b) == (sreal (a) - sreal (b)).to_int ());\n-  assert ((b + a) == (sreal (b) + sreal (a)).to_int ());\n-  assert ((b - a) == (sreal (b) - sreal (a)).to_int ());\n-}\n-\n-void\n-sreal_pass::verify_shifting (int a)\n-{\n-  sreal v = a;\n-\n-  for (unsigned i = 0; i < 16; i++)\n-    assert ((a << i) == (v << i).to_int());\n-\n-  a = a << 16;\n-  v = v << 16;\n-\n-  for (unsigned i = 0; i < 16; i++)\n-    assert ((a >> i) == (v >> i).to_int());\n-}\n-\n-void\n-sreal_pass::check_sreal ()\n-{\n-  sreal minimum = INT_MIN;\n-  sreal maximum = INT_MAX;\n-  sreal seven = 7;\n-  sreal minus_two = -2;\n-  sreal minus_nine = -9;\n-\n-  assert (minimum.to_int () == INT_MIN);\n-  assert (maximum.to_int () == INT_MAX);\n-\n-  assert (!(minus_two < minus_two));\n-  assert (!(seven < seven));\n-  assert (seven > minus_two);\n-  assert (minus_two < seven);\n-  assert (minus_two != seven);\n-  assert (minus_two == minus_two);\n-  assert (seven == seven);\n-\n-  assert (seven == ((seven << 10) >> 10));\n-\n-  assert ((seven + minus_two) == 5);\n-  assert ((seven + minus_nine) == -2);\n-\n-  for (int a = -100; a < 100; a++)\n-    for (int b = -100; b < 100; b++)\n-      {\n-        verify_aritmetics (a, b);\n-        verify_aritmetics (INT_MIN + 100, b);\n-        verify_aritmetics (INT_MAX - 100, b);\n-      }\n-\n-  srand (123456);\n-\n-  for (int i = 0; i < 1000 * 1000; i++)\n-    {\n-      verify_aritmetics (rand () % 10, rand () % 1000000);\n-      verify_aritmetics (rand () % 100, rand () % 10000);\n-    }\n-\n-  for (int a = -100; a < 100; a++)\n-    verify_shifting (a);\n-}\n-\n-bool sreal_pass::gate (function *)\n-{\n-  return true;\n-}\n-\n-unsigned int\n-sreal_pass::execute (function *)\n-{\n-  check_sreal ();\n-\n-  return 0;\n-}\n-\n-int plugin_init (struct plugin_name_args *plugin_info,\n-                 struct plugin_gcc_version *version)\n-{\n-  struct register_pass_info p;\n-\n-  p.pass = new sreal_pass (g);\n-  p.reference_pass_name = \"cfg\";\n-  p.ref_pass_instance_number = 1;\n-  p.pos_op = PASS_POS_INSERT_AFTER;\n-\n-  register_callback (\"sreal\", PLUGIN_PASS_MANAGER_SETUP, NULL, &p);\n-\n-  return 0;\n-}"}]}