{"sha": "ca4f3d13192837e3c285b1b3179a09e6fbb49500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0ZjNkMTMxOTI4MzdlM2MyODViMWIzMTc5YTA5ZTZmYmI0OTUwMA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-07-06T21:21:31Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-07-06T21:21:31Z"}, "message": "alpha.c (alpha_use_dfa_pipeline_interface): Remove.\n\n\t* config/alpha/alpha.c (alpha_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\t* config/arm/arm.c (arm_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\t* config/frv/frv.c (frv_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\t* config/i386/i386.c (ia32_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\t* config/ia64/ia64.c (ia64_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\t* config/pa/pa.c (hhpa_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\t* config/sparc/sparc.c (sparc_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\t* config/v850/v850.c (v850_use_dfa_pipeline_interface): Remove.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n\nFrom-SVN: r84170", "tree": {"sha": "cc8cac667a9680f991e47891ee5d6b6cfe44b58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc8cac667a9680f991e47891ee5d6b6cfe44b58e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4f3d13192837e3c285b1b3179a09e6fbb49500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4f3d13192837e3c285b1b3179a09e6fbb49500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4f3d13192837e3c285b1b3179a09e6fbb49500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4f3d13192837e3c285b1b3179a09e6fbb49500/comments", "author": null, "committer": null, "parents": [{"sha": "9845387984d854487bd46b70cb0f155edbd23316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845387984d854487bd46b70cb0f155edbd23316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9845387984d854487bd46b70cb0f155edbd23316"}], "stats": {"total": 110, "additions": 27, "deletions": 83}, "files": [{"sha": "998580493f3e1e9dff6e848e355da81d119cc24c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -1,3 +1,22 @@\n+2004-07-06  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* config/alpha/alpha.c (alpha_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\t* config/arm/arm.c (arm_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\t* config/frv/frv.c (frv_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\t* config/i386/i386.c (ia32_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\t* config/ia64/ia64.c (ia64_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\t* config/pa/pa.c (hhpa_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\t* config/sparc/sparc.c (sparc_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\t* config/v850/v850.c (v850_use_dfa_pipeline_interface): Remove.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define to hook_int_void_1.\n+\n 2004-07-06  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* dojump.c (do_jump): REFERENCE_EXPR is dead."}, {"sha": "19bf341bfdf42fb95a82687e5b8faac195f65986", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -5047,12 +5047,6 @@ alpha_issue_rate (void)\n   return (alpha_cpu == PROCESSOR_EV4 ? 2 : 4);\n }\n \n-static int\n-alpha_use_dfa_pipeline_interface (void)\n-{\n-  return true;\n-}\n-\n /* How many alternative schedules to try.  This should be as wide as the\n    scheduling freedom in the DFA, but no wider.  Making this value too\n    large results extra work for the scheduler.\n@@ -10130,8 +10124,7 @@ alpha_init_libfuncs (void)\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE alpha_issue_rate\n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \\\n-  alpha_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n   alpha_multipass_dfa_lookahead"}, {"sha": "724f7c16b3dd8ec80d26bcbf978ce0015ca4878c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -117,7 +117,6 @@ static void thumb_output_function_prologue (FILE *, HOST_WIDE_INT);\n static int arm_comp_type_attributes (tree, tree);\n static void arm_set_default_type_attributes (tree);\n static int arm_adjust_cost (rtx, rtx, rtx, int);\n-static int arm_use_dfa_pipeline_interface (void);\n static int count_insns_for_constant (HOST_WIDE_INT, int);\n static int arm_get_strip_length (int);\n static bool arm_function_ok_for_sibcall (tree, tree);\n@@ -213,7 +212,7 @@ static bool arm_cookie_has_size (void);\n #define TARGET_SCHED_ADJUST_COST arm_adjust_cost\n \n #undef  TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE arm_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n \n #undef TARGET_ENCODE_SECTION_INFO\n #ifdef ARM_PE\n@@ -4129,12 +4128,6 @@ arm_address_cost (rtx x)\n   return TARGET_ARM ? arm_arm_address_cost (x) : arm_thumb_address_cost (x);\n }\n \n-static int\n-arm_use_dfa_pipeline_interface (void)\n-{\n-  return true;\n-}\n-\n static int\n arm_adjust_cost (rtx insn, rtx link, rtx dep, int cost)\n {"}, {"sha": "de1cb3790959be0419f5aed535da55cf9b9d9530", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -262,7 +262,6 @@ static void frv_registers_update\t\t(rtx, unsigned char [],\n static int frv_registers_used_p\t\t\t(rtx, unsigned char [], int);\n static int frv_registers_set_p\t\t\t(rtx, unsigned char [], int);\n static int frv_issue_rate\t\t\t(void);\n-static int frv_use_dfa_pipeline_interface\t(void);\n static void frv_pack_insns\t\t\t(void);\n static void frv_function_prologue\t\t(FILE *, HOST_WIDE_INT);\n static void frv_function_epilogue\t\t(FILE *, HOST_WIDE_INT);\n@@ -318,7 +317,7 @@ static rtx frv_struct_value_rtx\t\t\t(tree, int);\n #undef  TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE frv_issue_rate\n #undef  TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE frv_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL frv_function_ok_for_sibcall\n@@ -8366,15 +8365,6 @@ frv_issue_rate (void)\n       return 4;\n     }\n }\n-\n-\n-/* Implement TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE.  */\n-\n-static int\n-frv_use_dfa_pipeline_interface (void)\n-{\n-  return true;\n-}\n \f\n /* Update the register state information, to know about which registers are set\n    or clobbered.  */"}, {"sha": "4b1e389641b4129478e87cdbe3939bc3233472be", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -866,7 +866,6 @@ static rtx ix86_expand_aligntest (rtx, int);\n static void ix86_expand_strlensi_unroll_1 (rtx, rtx, rtx);\n static int ix86_issue_rate (void);\n static int ix86_adjust_cost (rtx, rtx, rtx, int);\n-static int ia32_use_dfa_pipeline_interface (void);\n static int ia32_multipass_dfa_lookahead (void);\n static void ix86_init_mmx_sse_builtins (void);\n static rtx x86_this_parameter (tree);\n@@ -1018,8 +1017,7 @@ static void init_ext_80387_constants (void);\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE ix86_issue_rate\n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \\\n-  ia32_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n   ia32_multipass_dfa_lookahead\n@@ -12387,17 +12385,6 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n   return cost;\n }\n \n-static int\n-ia32_use_dfa_pipeline_interface (void)\n-{\n-  if (TARGET_PENTIUM\n-      || TARGET_PENTIUMPRO\n-      || TARGET_K6\n-      || TARGET_ATHLON_K8)\n-    return 1;\n-  return 0;\n-}\n-\n /* How many alternative schedules to try.  This should be as wide as the\n    scheduling freedom in the DFA, but no wider.  Making this value too\n    large results extra work for the scheduler.  */"}, {"sha": "3195422cb458ed60214d7a71759c8e0b6b59466b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -164,7 +164,6 @@ struct ia64_frame_info\n /* Current frame information calculated by ia64_compute_frame_size.  */\n static struct ia64_frame_info current_frame_info;\n \f\n-static int ia64_use_dfa_pipeline_interface (void);\n static int ia64_first_cycle_multipass_dfa_lookahead (void);\n static void ia64_dependencies_evaluation_hook (rtx, rtx);\n static void ia64_init_dfa_pre_cycle_insn (void);\n@@ -342,7 +341,7 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_SCHED_DEPENDENCIES_EVALUATION_HOOK ia64_dependencies_evaluation_hook\n \n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE ia64_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n \n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD ia64_first_cycle_multipass_dfa_lookahead\n@@ -7370,15 +7369,6 @@ final_emit_insn_group_barriers (FILE *dump ATTRIBUTE_UNUSED)\n \n \f\n \n-/* If the following function returns TRUE, we will use the the DFA\n-   insn scheduler.  */\n-\n-static int\n-ia64_use_dfa_pipeline_interface (void)\n-{\n-  return 1;\n-}\n-\n /* If the following function returns TRUE, we will use the the DFA\n    insn scheduler.  */\n "}, {"sha": "d4e8ca0e5fd79ebe1107863adbd568b9544f5ca9", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -48,16 +48,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n \n-static int hppa_use_dfa_pipeline_interface (void);\n-\n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hppa_use_dfa_pipeline_interface\n-\n-static int\n-hppa_use_dfa_pipeline_interface (void)\n-{\n-  return 1;\n-}\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n \n /* Return nonzero if there is a bypass for the output of \n    OUT_INSN and the fp store IN_INSN.  */"}, {"sha": "5439f036bf4a2c056fd4d453e38baaeeb1ba00c9", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -161,7 +161,6 @@ static void sparc_elf_asm_named_section (const char *, unsigned int);\n static int sparc_adjust_cost (rtx, rtx, rtx, int);\n static int sparc_issue_rate (void);\n static void sparc_sched_init (FILE *, int, int);\n-static int sparc_use_dfa_pipeline_interface (void);\n static int sparc_use_sched_lookahead (void);\n \n static void emit_soft_tfmode_libcall (const char *, int, rtx *);\n@@ -242,7 +241,7 @@ enum processor_type sparc_cpu;\n #undef TARGET_SCHED_INIT\n #define TARGET_SCHED_INIT sparc_sched_init\n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE sparc_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD sparc_use_sched_lookahead\n \n@@ -7448,18 +7447,6 @@ sparc_sched_init (FILE *dump ATTRIBUTE_UNUSED,\n {\n }\n   \n-static int\n-sparc_use_dfa_pipeline_interface (void)\n-{\n-  if ((1 << sparc_cpu) &\n-      ((1 << PROCESSOR_ULTRASPARC) | (1 << PROCESSOR_CYPRESS) |\n-       (1 << PROCESSOR_SUPERSPARC) | (1 << PROCESSOR_HYPERSPARC) |\n-       (1 << PROCESSOR_SPARCLITE86X) | (1 << PROCESSOR_TSC701) |\n-       (1 << PROCESSOR_ULTRASPARC3)))\n-    return 1;\n-  return 0;\n-}\n-\n static int\n sparc_use_sched_lookahead (void)\n {"}, {"sha": "063a3fe5c77b6db3c6d2b34efd470d359a62debf", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4f3d13192837e3c285b1b3179a09e6fbb49500/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=ca4f3d13192837e3c285b1b3179a09e6fbb49500", "patch": "@@ -64,7 +64,6 @@ static void v850_insert_attributes   (tree, tree *);\n static void v850_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void v850_encode_data_area    (tree, rtx);\n static void v850_encode_section_info (tree, rtx, int);\n-static int  v850_use_dfa_pipeline_interface (void);\n static bool v850_return_in_memory    (tree, tree);\n static void v850_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n@@ -119,7 +118,7 @@ static int v850_interrupt_p = FALSE;\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE v850_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n \n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG v850_reorg\n@@ -2345,12 +2344,6 @@ v850_encode_section_info (tree decl, rtx rtl, int first)\n     v850_encode_data_area (decl, XEXP (rtl, 0));\n }\n \n-static int\n-v850_use_dfa_pipeline_interface (void)\n-{\n-  return 1;\n-}\n-\n /* Return true if the given RTX is a register which can be restored\n    by a function epilogue.  */\n int"}]}