{"sha": "b806269c9bfe8527dae3f634f5696ec95c5c38e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwNjI2OWM5YmZlODUyN2RhZTNmNjM0ZjU2OTZlYzk1YzVjMzhlNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-02-07T19:26:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-07T19:26:30Z"}, "message": "compiler, libgo: Use //extern comments rather than __asm__.\n\nFrom-SVN: r183981", "tree": {"sha": "7a4a7ef3281dc5d38c6298df6b666d0b18f5eb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a4a7ef3281dc5d38c6298df6b666d0b18f5eb8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b806269c9bfe8527dae3f634f5696ec95c5c38e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b806269c9bfe8527dae3f634f5696ec95c5c38e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b806269c9bfe8527dae3f634f5696ec95c5c38e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b806269c9bfe8527dae3f634f5696ec95c5c38e4/comments", "author": null, "committer": null, "parents": [{"sha": "85dcef0d4194393a9de3cec41fc41331b62a909f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85dcef0d4194393a9de3cec41fc41331b62a909f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85dcef0d4194393a9de3cec41fc41331b62a909f"}], "stats": {"total": 253, "additions": 197, "deletions": 56}, "files": [{"sha": "40afb84010423615674fdebf3c6c7544abb1c09c", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -1,3 +1,8 @@\n+2012-02-07  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gccgo.texi (Function Names): Document //extern instead of\n+\t__asm__.\n+\n 2012-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/52079"}, {"sha": "13b56fc734535b9a39661e77cdfa9568c4d94047", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -304,14 +304,20 @@ function is still using it.\n @node Function Names\n @section Function Names\n \n-@cindex @code{__asm__}\n+@cindex @code{extern}\n+@cindex external names\n Go code can call C functions directly using a Go extension implemented\n-in @command{gccgo}: a function declaration may be followed by\n-@code{__asm__ (\"@var{name}\")}. For example, here is how the C function\n-@code{open} can be declared in Go:\n+in @command{gccgo}: a function declaration may be preceded by a\n+comment giving the external name.  The comment must be at the\n+beginning of the line and must start with @code{//extern}.  This must\n+be followed by a space and then the external name of the function.\n+The function declaration must be on the line immediately after the\n+comment.  For example, here is how the C function @code{open} can be\n+declared in Go:\n \n @smallexample\n-func c_open(name *byte, mode int, perm int) int __asm__ (\"open\");\n+//extern open\n+func c_open(name *byte, mode int, perm int) int\n @end smallexample\n \n The C function naturally expects a nul terminated string, which in Go\n@@ -333,7 +339,7 @@ present the name of a Go function that does not have a receiver is\n @option{-fgo-prefix} option used when the package is compiled; if the\n option is not used, the default is simply @code{go}.  To call the\n function from C you must set the name using the @command{gcc}\n-extension similar to the @command{gccgo} extension.\n+@code{__asm__} extension.\n \n @smallexample\n extern int go_function(int) __asm__ (\"myprefix.mypackage.Function\");"}, {"sha": "53618fc72cad178a30f97cdcfaf84d077819ac0d", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -442,7 +442,7 @@ Token::print(FILE* file) const\n Lex::Lex(const char* input_file_name, FILE* input_file, Linemap* linemap)\n   : input_file_name_(input_file_name), input_file_(input_file),\n     linemap_(linemap), linebuf_(NULL), linebufsize_(120), linesize_(0),\n-    lineoff_(0), lineno_(0), add_semi_at_eol_(false)\n+    lineoff_(0), lineno_(0), add_semi_at_eol_(false), extern_()\n {\n   this->linebuf_ = new char[this->linebufsize_];\n   this->linemap_->start_file(input_file_name, 0);\n@@ -541,6 +541,7 @@ Lex::earlier_location(int chars) const\n Token\n Lex::next_token()\n {\n+  bool saw_cpp_comment = false;\n   while (true)\n     {\n       if (!this->require_line())\n@@ -552,6 +553,10 @@ Lex::next_token()\n \t  return this->make_eof_token();\n \t}\n \n+      if (!saw_cpp_comment)\n+\tthis->extern_.clear();\n+      saw_cpp_comment = false;\n+\n       const char* p = this->linebuf_ + this->lineoff_;\n       const char* pend = this->linebuf_ + this->linesize_;\n \n@@ -588,6 +593,7 @@ Lex::next_token()\n \t\t  p = pend;\n \t\t  if (p[-1] == '\\n' && this->add_semi_at_eol_)\n \t\t    --p;\n+\t\t  saw_cpp_comment = true;\n \t\t}\n \t      else if (p[1] == '*')\n \t\t{\n@@ -1606,6 +1612,10 @@ Lex::skip_c_comment()\n void\n Lex::skip_cpp_comment()\n {\n+  // Ensure that if EXTERN_ is set, it means that we just saw a\n+  // //extern comment.\n+  this->extern_.clear();\n+\n   const char* p = this->linebuf_ + this->lineoff_;\n   const char* pend = this->linebuf_ + this->linesize_;\n \n@@ -1648,12 +1658,35 @@ Lex::skip_cpp_comment()\n \t}\n     }\n \n+  // As a special gccgo extension, a C++ comment at the start of the\n+  // line of the form\n+  //   //extern NAME\n+  // which immediately precedes a function declaration means that the\n+  // external name of the function declaration is NAME.  This is\n+  // normally used to permit Go code to call a C function.\n+  if (this->lineoff_ == 2\n+      && pend - p > 7\n+      && memcmp(p, \"extern \", 7) == 0)\n+    {\n+      p += 7;\n+      while (p < pend && (*p == ' ' || *p == '\\t'))\n+\t++p;\n+      const char* plend = pend;\n+      while (plend > p\n+\t     && (plend[-1] == ' ' || plend[-1] == '\\t' || plend[-1] == '\\n'))\n+\t--plend;\n+      if (plend > p)\n+\tthis->extern_ = std::string(p, plend - p);\n+    }\n+\n   while (p < pend)\n     {\n       this->lineoff_ = p - this->linebuf_;\n       unsigned int c;\n       bool issued_error;\n       p = this->advance_one_utf8_char(p, &c, &issued_error);\n+      if (issued_error)\n+\tthis->extern_.clear();\n     }\n }\n "}, {"sha": "8858e73d97a006edba4a5e614db7c8ea044d35cd", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -344,6 +344,11 @@ class Lex\n   Token\n   next_token();\n \n+  // Return the contents of any current //extern comment.\n+  const std::string&\n+  extern_name() const\n+  { return this->extern_; }\n+\n   // Return whether the identifier NAME should be exported.  NAME is a\n   // mangled name which includes only ASCII characters.\n   static bool\n@@ -474,6 +479,9 @@ class Lex\n   size_t lineno_;\n   // Whether to add a semicolon if we see a newline now.\n   bool add_semi_at_eol_;\n+  // The external name to use for a function declaration, from a magic\n+  // //extern comment.\n+  std::string extern_;\n };\n \n #endif // !defined(GO_LEX_H)"}, {"sha": "6eb1981a4be916862a899183a87aec6f634f4dd4", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -2093,17 +2093,19 @@ Parse::simple_var_decl_or_assignment(const std::string& name,\n // FunctionDecl = \"func\" identifier Signature [ Block ] .\n // MethodDecl = \"func\" Receiver identifier Signature [ Block ] .\n \n-// gcc extension:\n+// Deprecated gcc extension:\n //   FunctionDecl = \"func\" identifier Signature\n //                    __asm__ \"(\" string_lit \")\" .\n // This extension means a function whose real name is the identifier\n-// inside the asm.\n+// inside the asm.  This extension will be removed at some future\n+// date.  It has been replaced with //extern comments.\n \n void\n Parse::function_decl()\n {\n   go_assert(this->peek_token()->is_keyword(KEYWORD_FUNC));\n   Location location = this->location();\n+  std::string extern_name = this->lex_->extern_name();\n   const Token* token = this->advance_token();\n \n   Typed_identifier* rec = NULL;\n@@ -2173,10 +2175,20 @@ Parse::function_decl()\n     {\n       if (named_object == NULL && !Gogo::is_sink_name(name))\n \t{\n-\t  if (fntype != NULL)\n-\t    this->gogo_->declare_function(name, fntype, location);\n-\t  else\n+\t  if (fntype == NULL)\n \t    this->gogo_->add_erroneous_name(name);\n+\t  else\n+\t    {\n+\t      named_object = this->gogo_->declare_function(name, fntype,\n+\t\t\t\t\t\t\t   location);\n+\t      if (!extern_name.empty()\n+\t\t  && named_object->is_function_declaration())\n+\t\t{\n+\t\t  Function_declaration* fd =\n+\t\t    named_object->func_declaration_value();\n+\t\t  fd->set_asm_name(extern_name);\n+\t\t}\n+\t    }\n \t}\n     }\n   else"}, {"sha": "211f41d10fadfd8105c5b188e0fad8710c5fc163", "filename": "libgo/go/exp/terminal/util.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fexp%2Fterminal%2Futil.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fexp%2Fterminal%2Futil.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fterminal%2Futil.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -60,7 +60,8 @@ func Restore(fd int, state *State) error {\n \treturn err\n }\n \n-func ioctl(int, int, unsafe.Pointer) int __asm__(\"ioctl\")\n+//extern ioctl\n+func ioctl(int, int, unsafe.Pointer) int\n \n // GetSize returns the dimensions of the given terminal.\n func GetSize(fd int) (width, height int, err error) {"}, {"sha": "433d0f727376008958c78cceb574c3178509f2ad", "filename": "libgo/go/math/abs.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fabs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fabs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fabs.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -9,7 +9,10 @@ package math\n // Special cases are:\n //\tAbs(\u00b1Inf) = +Inf\n //\tAbs(NaN) = NaN\n-func libc_fabs(float64) float64 __asm__(\"fabs\")\n+\n+//extern fabs\n+func libc_fabs(float64) float64\n+\n func Abs(x float64) float64 {\n \treturn libc_fabs(x)\n }"}, {"sha": "0d4fa9ebb5028e8194baa3905468bae4f2e075ba", "filename": "libgo/go/math/asin.go", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fasin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fasin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fasin.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -16,7 +16,10 @@ package math\n // Special cases are:\n //\tAsin(\u00b10) = \u00b10\n //\tAsin(x) = NaN if x < -1 or x > 1\n-func libc_asin(float64) float64 __asm__(\"asin\")\n+\n+//extern asin\n+func libc_asin(float64) float64\n+\n func Asin(x float64) float64 {\n \treturn libc_asin(x)\n }\n@@ -51,7 +54,10 @@ func asin(x float64) float64 {\n //\n // Special case is:\n //\tAcos(x) = NaN if x < -1 or x > 1\n-func libc_acos(float64) float64 __asm__(\"acos\")\n+\n+//extern acos\n+func libc_acos(float64) float64\n+\n func Acos(x float64) float64 {\n \treturn libc_acos(x)\n }"}, {"sha": "b739721e81c1093e5d1f767780a149bc5ff529a2", "filename": "libgo/go/math/atan.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fatan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fatan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fatan.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -51,7 +51,10 @@ func satan(arg float64) float64 {\n // Special cases are:\n //\tAtan(\u00b10) = \u00b10\n //\tAtan(\u00b1Inf) = \u00b1Pi/2\n-func libc_atan(float64) float64 __asm__(\"atan\")\n+\n+//extern atan\n+func libc_atan(float64) float64\n+\n func Atan(x float64) float64 {\n \treturn libc_atan(x)\n }"}, {"sha": "02b045b9dc20afffebb25b95b9b8f33c90e364b3", "filename": "libgo/go/math/atan2.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fatan2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fatan2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fatan2.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -26,7 +26,10 @@ package math\n //\tAtan2(y<0, -Inf) = -Pi\n //\tAtan2(+Inf, x) = +Pi/2\n //\tAtan2(-Inf, x) = -Pi/2\n-func libc_atan2(float64, float64) float64 __asm__(\"atan2\")\n+\n+//extern atan2\n+func libc_atan2(float64, float64) float64\n+\n func Atan2(y, x float64) float64 {\n \treturn libc_atan2(y, x)\n }"}, {"sha": "b2da631c6972cd24283a769c2fea5f3e5a38ba51", "filename": "libgo/go/math/exp.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexp.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -11,7 +11,10 @@ package math\n //\tExp(NaN) = NaN\n // Very large values overflow to 0 or +Inf.\n // Very small values underflow to 1.\n-func libc_exp(float64) float64 __asm__(\"exp\")\n+\n+//extern exp\n+func libc_exp(float64) float64\n+\n func Exp(x float64) float64 {\n \treturn libc_exp(x)\n }"}, {"sha": "e7705b06a86f5282f4327767794ccf9036532d17", "filename": "libgo/go/math/expm1.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fexpm1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fexpm1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexpm1.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -121,7 +121,10 @@ package math\n //\tExpm1(-Inf) = -1\n //\tExpm1(NaN) = NaN\n // Very large values overflow to -1 or +Inf.\n-func libc_expm1(float64) float64 __asm__(\"expm1\")\n+\n+//extern expm1\n+func libc_expm1(float64) float64\n+\n func Expm1(x float64) float64 {\n \treturn libc_expm1(x)\n }"}, {"sha": "abe6264d27f2412f158ed6d137a2e0cb12531cd4", "filename": "libgo/go/math/floor.go", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Ffloor.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Ffloor.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Ffloor.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -10,7 +10,10 @@ package math\n //\tFloor(\u00b10) = \u00b10\n //\tFloor(\u00b1Inf) = \u00b1Inf\n //\tFloor(NaN) = NaN\n-func libc_floor(float64) float64 __asm__(\"floor\")\n+\n+//extern floor\n+func libc_floor(float64) float64\n+\n func Floor(x float64) float64 {\n \treturn libc_floor(x)\n }\n@@ -38,7 +41,10 @@ func floor(x float64) float64 {\n //\tCeil(\u00b10) = \u00b10\n //\tCeil(\u00b1Inf) = \u00b1Inf\n //\tCeil(NaN) = NaN\n-func libc_ceil(float64) float64 __asm__(\"ceil\")\n+\n+//extern ceil\n+func libc_ceil(float64) float64\n+\n func Ceil(x float64) float64 {\n \treturn libc_ceil(x)\n }\n@@ -53,7 +59,10 @@ func ceil(x float64) float64 {\n //\tTrunc(\u00b10) = \u00b10\n //\tTrunc(\u00b1Inf) = \u00b1Inf\n //\tTrunc(NaN) = NaN\n-func libc_trunc(float64) float64 __asm__(\"trunc\")\n+\n+//extern trunc\n+func libc_trunc(float64) float64\n+\n func Trunc(x float64) float64 {\n \treturn libc_trunc(x)\n }"}, {"sha": "d5d78318d4858c461de99b55980cf2b5f74656b9", "filename": "libgo/go/math/ldexp.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fldexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fldexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fldexp.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -11,7 +11,10 @@ package math\n //\tLdexp(\u00b10, exp) = \u00b10\n //\tLdexp(\u00b1Inf, exp) = \u00b1Inf\n //\tLdexp(NaN, exp) = NaN\n-func libc_ldexp(float64, int) float64 __asm__(\"ldexp\")\n+\n+//extern ldexp\n+func libc_ldexp(float64, int) float64\n+\n func Ldexp(frac float64, exp int) float64 {\n \treturn libc_ldexp(frac, exp)\n }"}, {"sha": "5e5c427c0faee3037e574f864e5a6dc4a135d178", "filename": "libgo/go/math/log.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Flog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Flog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Flog.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -77,7 +77,10 @@ package math\n //\tLog(0) = -Inf\n //\tLog(x < 0) = NaN\n //\tLog(NaN) = NaN\n-func libc_log(float64) float64 __asm__(\"log\")\n+\n+//extern log\n+func libc_log(float64) float64\n+\n func Log(x float64) float64 {\n \treturn libc_log(x)\n }"}, {"sha": "07ba8ca165acb414bc5585c461b23b13d4215ea4", "filename": "libgo/go/math/log10.go", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Flog10.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Flog10.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Flog10.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -6,7 +6,10 @@ package math\n \n // Log10 returns the decimal logarithm of x.\n // The special cases are the same as for Log.\n-func libc_log10(float64) float64 __asm__(\"log10\")\n+\n+//extern log10\n+func libc_log10(float64) float64\n+\n func Log10(x float64) float64 {\n \treturn libc_log10(x)\n }\n@@ -17,7 +20,10 @@ func log10(x float64) float64 {\n \n // Log2 returns the binary logarithm of x.\n // The special cases are the same as for Log.\n-func libc_log2(float64) float64 __asm__(\"log2\")\n+\n+//extern log2\n+func libc_log2(float64) float64\n+\n func Log2(x float64) float64 {\n \treturn libc_log2(x)\n }"}, {"sha": "15cd676ccc69174c30eb7ecc9be719d57797da81", "filename": "libgo/go/math/log1p.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Flog1p.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Flog1p.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Flog1p.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -92,7 +92,10 @@ package math\n //\tLog1p(-1) = -Inf\n //\tLog1p(x < -1) = NaN\n //\tLog1p(NaN) = NaN\n-func libc_log1p(float64) float64 __asm__(\"log1p\")\n+\n+//extern log1p\n+func libc_log1p(float64) float64\n+\n func Log1p(x float64) float64 {\n \treturn libc_log1p(x)\n }"}, {"sha": "dbb3aa00eb4b424ad421a89aa5ed2ad680f571a1", "filename": "libgo/go/math/mod.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fmod.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fmod.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fmod.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -18,7 +18,10 @@ package math\n //\tMod(x, 0) = NaN\n //\tMod(x, \u00b1Inf) = x\n //\tMod(x, NaN) = NaN\n-func libc_fmod(float64, float64) float64 __asm__(\"fmod\")\n+\n+//extern fmod\n+func libc_fmod(float64, float64) float64\n+\n func Mod(x, y float64) float64 {\n \treturn libc_fmod(x, y)\n }"}, {"sha": "d692b3395d279b85625ce42226af27dfc9babfe1", "filename": "libgo/go/math/sin.go", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fsin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fsin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsin.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -114,7 +114,10 @@ var _cos = [...]float64{\n // Special cases are:\n //\tCos(\u00b1Inf) = NaN\n //\tCos(NaN) = NaN\n-func libc_cos(float64) float64  __asm__(\"cos\")\n+\n+//extern cos\n+func libc_cos(float64) float64\n+\n func Cos(x float64) float64 {\n \treturn libc_cos(x)\n }\n@@ -176,7 +179,10 @@ func cos(x float64) float64 {\n //\tSin(\u00b10) = \u00b10\n //\tSin(\u00b1Inf) = NaN\n //\tSin(NaN) = NaN\n-func libc_sin(float64) float64 __asm__(\"sin\")\n+\n+//extern sin\n+func libc_sin(float64) float64\n+\n func Sin(x float64) float64 {\n \treturn libc_sin(x)\n }"}, {"sha": "4f87f4183fe952789cb29f162cbffa983f52eac8", "filename": "libgo/go/math/sqrt.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fsqrt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Fsqrt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsqrt.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -11,7 +11,10 @@ package math\n //\tSqrt(\u00b10) = \u00b10\n //\tSqrt(x < 0) = NaN\n //\tSqrt(NaN) = NaN\n-func libc_sqrt(float64) float64 __asm__(\"sqrt\")\n+\n+//extern sqrt\n+func libc_sqrt(float64) float64\n+\n func Sqrt(x float64) float64 {\n \treturn libc_sqrt(x)\n }"}, {"sha": "791ffc08e32d96e351e26ed364ccd9fa8613ec28", "filename": "libgo/go/math/tan.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Ftan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fmath%2Ftan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Ftan.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -79,7 +79,10 @@ var _tanQ = [...]float64{\n //\tTan(\u00b10) = \u00b10\n //\tTan(\u00b1Inf) = NaN\n //\tTan(NaN) = NaN\n-func libc_tan(float64) float64 __asm__(\"tan\")\n+\n+//extern tan\n+func libc_tan(float64) float64\n+\n func Tan(x float64) float64 {\n \treturn libc_tan(x)\n }"}, {"sha": "e96df669f335f102a55d7b5e66bcfc61ae3c767e", "filename": "libgo/go/net/cgo_unix.go", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fnet%2Fcgo_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fnet%2Fcgo_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fcgo_unix.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -21,9 +21,14 @@ import (\n \t\"unsafe\"\n )\n \n-func libc_getaddrinfo(node *byte, service *byte, hints *syscall.Addrinfo, res **syscall.Addrinfo) int __asm__ (\"getaddrinfo\")\n-func libc_freeaddrinfo(res *syscall.Addrinfo) __asm__ (\"freeaddrinfo\")\n-func libc_gai_strerror(errcode int) *byte __asm__ (\"gai_strerror\")\n+//extern getaddrinfo\n+func libc_getaddrinfo(node *byte, service *byte, hints *syscall.Addrinfo, res **syscall.Addrinfo) int\n+\n+//extern freeaddrinfo\n+func libc_freeaddrinfo(res *syscall.Addrinfo)\n+\n+//extern gai_strerror\n+func libc_gai_strerror(errcode int) *byte\n \n // bytePtrToString takes a NUL-terminated array of bytes and convert\n // it to a Go string."}, {"sha": "f119a2146391f93b2fba47f79952a4d2af798781", "filename": "libgo/go/os/dir.go", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fdir.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fdir.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -10,12 +10,15 @@ import (\n \t\"unsafe\"\n )\n \n-func libc_dup(fd int) int __asm__ (\"dup\")\n-func libc_opendir(*byte) *syscall.DIR __asm__ (\"opendir\")\n-func libc_closedir(*syscall.DIR) int __asm__ (\"closedir\")\n+//extern opendir\n+func libc_opendir(*byte) *syscall.DIR\n+\n+//extern closedir\n+func libc_closedir(*syscall.DIR) int\n \n // FIXME: pathconf returns long, not int.\n-func libc_pathconf(*byte, int) int __asm__ (\"pathconf\")\n+//extern pathconf\n+func libc_pathconf(*byte, int) int\n \n func clen(n []byte) int {\n \tfor i := 0; i < len(n); i++ {\n@@ -26,14 +29,14 @@ func clen(n []byte) int {\n \treturn len(n)\n }\n \n-var elen int;\n+var elen int\n \n func (file *File) readdirnames(n int) (names []string, err error) {\n \tif elen == 0 {\n-\t\tvar dummy syscall.Dirent;\n+\t\tvar dummy syscall.Dirent\n \t\telen = (unsafe.Offsetof(dummy.Name) +\n-\t\t\tlibc_pathconf(syscall.StringBytePtr(file.name),\tsyscall.PC_NAME_MAX) +\n-\t\t\t1);\n+\t\t\tlibc_pathconf(syscall.StringBytePtr(file.name), syscall.PC_NAME_MAX) +\n+\t\t\t1)\n \t}\n \n \tif file.dirinfo == nil {\n@@ -55,7 +58,7 @@ func (file *File) readdirnames(n int) (names []string, err error) {\n \tdir := file.dirinfo.dir\n \tif dir == nil {\n \t\treturn names, NewSyscallError(\"opendir\", syscall.GetErrno())\n-\t}\t\n+\t}\n \n \tfor n != 0 {\n \t\tvar result *syscall.Dirent\n@@ -67,7 +70,7 @@ func (file *File) readdirnames(n int) (names []string, err error) {\n \t\t\tbreak // EOF\n \t\t}\n \t\tvar name = string(result.Name[0:clen(result.Name[0:])])\n-\t\tif name == \".\" || name == \"..\" {\t// Useless names\n+\t\tif name == \".\" || name == \"..\" { // Useless names\n \t\t\tcontinue\n \t\t}\n \t\tnames = append(names, name)"}, {"sha": "2555c7ba331bdd9fada3a9546d4f272b6ada69bc", "filename": "libgo/go/os/dir_largefile.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fdir_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fdir_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_largefile.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -9,4 +9,5 @@ package os\n \n import \"syscall\"\n \n-func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) syscall.Errno __asm__ (\"readdir64_r\")\n+//extern readdir64_r\n+func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) syscall.Errno"}, {"sha": "22cd33f2e203b097d93b0e22e876940b470417d5", "filename": "libgo/go/os/dir_regfile.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fdir_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fdir_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_regfile.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -9,4 +9,5 @@ package os\n \n import \"syscall\"\n \n-func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) syscall.Errno __asm__ (\"readdir_r\")\n+// extern readdir_r\n+func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) syscall.Errno"}, {"sha": "8939cebfcd82ca8f395c71c7cb6953d12cb5f679", "filename": "libgo/go/os/user/lookup_unix.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fuser%2Flookup_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fos%2Fuser%2Flookup_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fuser%2Flookup_unix.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -26,8 +26,11 @@ static int mygetpwuid_r(int uid, struct passwd *pwd,\n }\n */\n \n-func libc_getpwnam_r(name *byte, pwd *syscall.Passwd, buf *byte, buflen syscall.Size_t, result **syscall.Passwd) int __asm__ (\"getpwnam_r\")\n-func libc_getpwuid_r(uid syscall.Uid_t, pwd *syscall.Passwd, buf *byte, buflen syscall.Size_t, result **syscall.Passwd) int __asm__ (\"getpwuid_r\")\n+//extern getpwnam_r\n+func libc_getpwnam_r(name *byte, pwd *syscall.Passwd, buf *byte, buflen syscall.Size_t, result **syscall.Passwd) int\n+\n+//extern getpwuid_r\n+func libc_getpwuid_r(uid syscall.Uid_t, pwd *syscall.Passwd, buf *byte, buflen syscall.Size_t, result **syscall.Passwd) int\n \n // bytePtrToString takes a NUL-terminated array of bytes and convert\n // it to a Go string."}, {"sha": "8da02349e6afe64d1c6f414620909df58d80a63c", "filename": "libgo/go/syscall/mksyscall.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -96,8 +96,8 @@ BEGIN {\n     cfnresult = line\n \n     printf(\"// Automatically generated wrapper for %s/%s\\n\", gofnname, cfnname)\n-    printf(\"func c_%s(%s) %s%s__asm__(\\\"%s\\\")\\n\",\n-\t   cfnname, cfnparams, cfnresult, cfnresult == \"\" ? \"\" : \" \", cfnname)\n+    printf(\"//extern %s\\n\", cfnname)\n+    printf(\"func c_%s(%s) %s\\n\", cfnname, cfnparams, cfnresult)\n     printf(\"func %s(%s) %s%s%s%s{\\n\",\n \t   gofnname, gofnparams, gofnresults == \"\" ? \"\" : \"(\", gofnresults,\n \t   gofnresults == \"\" ? \"\" : \")\", gofnresults == \"\" ? \"\" : \" \")"}, {"sha": "98e7d689f77ad12e3f21b9956a4c1273d0d0d281", "filename": "libgo/go/syscall/syscall_unix.go", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b806269c9bfe8527dae3f634f5696ec95c5c38e4/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go?ref=b806269c9bfe8527dae3f634f5696ec95c5c38e4", "patch": "@@ -18,8 +18,11 @@ var (\n \tStderr = 2\n )\n \n-func c_syscall32(trap int32, a1, a2, a3, a4, a5, a6 int32) int32 __asm__ (\"syscall\");\n-func c_syscall64(trap int64, a1, a2, a3, a4, a5, a6 int64) int64 __asm__ (\"syscall\");\n+//extern syscall\n+func c_syscall32(trap int32, a1, a2, a3, a4, a5, a6 int32) int32\n+\n+//extern syscall\n+func c_syscall64(trap int64, a1, a2, a3, a4, a5, a6 int64) int64\n \n const darwinAMD64 = runtime.GOOS == \"darwin\" && runtime.GOARCH == \"amd64\"\n \n@@ -46,7 +49,7 @@ func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)\n \tvar r uintptr\n \tif unsafe.Sizeof(r) == 4 {\n \t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3),\n-    \t\t\tint32(a4), int32(a5), int32(a6))\n+\t\t\tint32(a4), int32(a5), int32(a6))\n \t\tr = uintptr(r1)\n \t} else {\n \t\tr1 := c_syscall64(int64(trap), int64(a1), int64(a2), int64(a3),\n@@ -75,7 +78,7 @@ func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errn\n \tvar r uintptr\n \tif unsafe.Sizeof(r) == 4 {\n \t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3),\n-    \t\t\tint32(a4), int32(a5), int32(a6))\n+\t\t\tint32(a4), int32(a5), int32(a6))\n \t\tr = uintptr(r1)\n \t} else {\n \t\tr1 := c_syscall64(int64(trap), int64(a1), int64(a2), int64(a3),"}]}