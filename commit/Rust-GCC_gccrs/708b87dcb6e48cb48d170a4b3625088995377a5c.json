{"sha": "708b87dcb6e48cb48d170a4b3625088995377a5c", "node_id": "C_kwDOANBUbNoAKDcwOGI4N2RjYjZlNDhjYjQ4ZDE3MGE0YjM2MjUwODg5OTUzNzdhNWM", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-04T18:41:47Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-04T18:43:54Z"}, "message": "i386: Introduce V2QImode vectorized logic [PR103861]\n\nAdd V2QImode logic operations with SSE and GP registers and split\nthem to V4QImode SSE instructions or SImode GP instructions.\n\nThe patch also fixes PR target/103900.\n\n2022-01-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/103861\n\t* config/i386/mmx.md (one_cmplv2qi3): New insn pattern.\n\t(one_cmplv2qi3 splitters): New post-reload splitters.\n\t(*andnotv2qi3): New insn pattern.\n\t(andnotv2qi3 splitters): New post-reload splitters.\n\t(<any_logic:code>v2qi3): New insn pattern.\n\t(<any_logic:insn>v2qi3 splitters): New post-reload splitters.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103861\n\t* gcc.target/i386/warn-vect-op-2.c: Adjust warnings.\n\t* gcc.target/i386/pr103900.c: New test.", "tree": {"sha": "36d096d9dc06a0844840e21628ed42aad606f651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d096d9dc06a0844840e21628ed42aad606f651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/708b87dcb6e48cb48d170a4b3625088995377a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708b87dcb6e48cb48d170a4b3625088995377a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708b87dcb6e48cb48d170a4b3625088995377a5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708b87dcb6e48cb48d170a4b3625088995377a5c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8020032401f6dcd76c41017fcf75816490836d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8020032401f6dcd76c41017fcf75816490836d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd8020032401f6dcd76c41017fcf75816490836d"}], "stats": {"total": 173, "additions": 172, "deletions": 1}, "files": [{"sha": "fc8ec5e4d49914f1f5a3b766f4d0795de4d21611", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708b87dcb6e48cb48d170a4b3625088995377a5c/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708b87dcb6e48cb48d170a4b3625088995377a5c/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=708b87dcb6e48cb48d170a4b3625088995377a5c", "patch": "@@ -2745,6 +2745,45 @@\n   \"TARGET_SSE2\"\n   \"operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\")\n \n+(define_insn \"one_cmplv2qi2\"\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=r,&x,&v\")\n+\t(not:V2QI\n+\t  (match_operand:V2QI 1 \"register_operand\" \"0,x,v\")))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"isa\" \"*,sse2,avx512vl\")\n+   (set_attr \"type\" \"negnot,sselog,sselog\")\n+   (set_attr \"mode\" \"SI,TI,TI\")])\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n+\t(not:V2QI\n+\t  (match_operand:V2QI 1 \"general_reg_operand\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(not:SI (match_dup 1)))]\n+{\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+})\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n+\t(not:V2QI\n+\t  (match_operand:V2QI 1 \"sse_reg_operand\")))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(xor:V4QI\n+\t  (match_dup 0) (match_dup 1)))]\n+{\n+  emit_insn\n+   (gen_rtx_SET (gen_rtx_REG (V16QImode, REGNO (operands[0])),\n+\t\t CONSTM1_RTX (V16QImode)));\n+\n+  operands[1] = gen_lowpart (V4QImode, operands[1]);\n+  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+})\n+\n (define_insn \"mmx_andnot<mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,x,x,v\")\n \t(and:MMXMODEI\n@@ -2775,6 +2814,69 @@\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*andnotv2qi3\"\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=&r,r,x,x,v\")\n+        (and:V2QI\n+\t  (not:V2QI (match_operand:V2QI 1 \"register_operand\" \"0,r,0,x,v\"))\n+\t  (match_operand:V2QI 2 \"register_operand\" \"r,r,x,x,v\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"isa\" \"*,bmi,sse2_noavx,avx,avx512vl\")\n+   (set_attr \"type\" \"alu,bitmanip,sselog,sselog,sselog\")\n+   (set_attr \"mode\" \"SI,SI,TI,TI,TI\")])\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n+        (and:V2QI\n+\t  (not:V2QI (match_operand:V2QI 1 \"general_reg_operand\"))\n+\t  (match_operand:V2QI 2 \"general_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI && reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+})\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n+        (and:V2QI\n+\t  (not:V2QI (match_operand:V2QI 1 \"general_reg_operand\"))\n+\t  (match_operand:V2QI 2 \"general_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_BMI && reload_completed\"\n+  [(set (match_dup 0)\n+        (not:SI (match_dup 1)))\n+   (parallel\n+     [(set (match_dup 0)\n+\t   (and:SI (match_dup 0) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+})\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n+        (and:V2QI\n+\t  (not:V2QI (match_operand:V2QI 1 \"sse_reg_operand\"))\n+\t  (match_operand:V2QI 2 \"sse_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(and:V4QI (not:V4QI (match_dup 1)) (match_dup 2)))]\n+{\n+  operands[2] = gen_lowpart (V4QImode, operands[2]);\n+  operands[1] = gen_lowpart (V4QImode, operands[1]);\n+  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+})\n+\n (define_expand \"mmx_<code><mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\")\n \t(any_logic:MMXMODEI\n@@ -2821,6 +2923,50 @@\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"<code>v2qi3\"\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=r,x,x,v\")\n+        (any_logic:V2QI\n+\t  (match_operand:V2QI 1 \"register_operand\" \"%0,0,x,v\")\n+\t  (match_operand:V2QI 2 \"register_operand\" \"r,x,x,v\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx,avx512vl\")\n+   (set_attr \"type\" \"alu,sselog,sselog,sselog\")\n+   (set_attr \"mode\" \"SI,TI,TI,TI\")])\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n+        (any_logic:V2QI\n+\t  (match_operand:V2QI 1 \"general_reg_operand\")\n+\t  (match_operand:V2QI 2 \"general_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_logic:SI (match_dup 1) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+})\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n+        (any_logic:V2QI\n+\t  (match_operand:V2QI 1 \"sse_reg_operand\")\n+\t  (match_operand:V2QI 2 \"sse_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(any_logic:V4QI (match_dup 1) (match_dup 2)))]\n+{\n+  operands[2] = gen_lowpart (V4QImode, operands[2]);\n+  operands[1] = gen_lowpart (V4QImode, operands[1]);\n+  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral element swizzling"}, {"sha": "8793b492a058a49e06ced87c68b4e3412e2b350b", "filename": "gcc/testsuite/gcc.target/i386/pr103900.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708b87dcb6e48cb48d170a4b3625088995377a5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103900.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708b87dcb6e48cb48d170a4b3625088995377a5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103900.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103900.c?ref=708b87dcb6e48cb48d170a4b3625088995377a5c", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/103900 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-tree-dce -fno-tree-dse\" } */\n+\n+typedef unsigned char __attribute__((__vector_size__(2))) T;\n+typedef unsigned char __attribute__((__vector_size__(32))) U;\n+typedef int __attribute__((__vector_size__(64))) V;\n+typedef int __attribute__((__vector_size__(32))) W;\n+T foo0_v128u8_0;\n+U foo0_v256u8_0;\n+T foo0_v16u16_0;\n+int foo0_v128u64_0, foo0_v512u64_0;\n+\n+void\n+foo0() {\n+  V v512u128_0;\n+  T v16u8_0;\n+  foo0_v128u64_0 += (short)v16u8_0;\n+  T v16u8_1 = ~__builtin_shufflevector(foo0_v128u8_0, foo0_v256u8_0, 0, 5);\n+  W v256u128_1;\n+  V v512u8_r =\n+      foo0_v512u64_0 + v512u128_0;\n+  (union {U b;}){}.b + (U)v256u128_1;\n+  T v16u8_r = v16u8_0 + v16u8_1 + foo0_v16u16_0;\n+}"}, {"sha": "4560f7070bbb4e198e84163e678d78e919871941", "filename": "gcc/testsuite/gcc.target/i386/warn-vect-op-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708b87dcb6e48cb48d170a4b3625088995377a5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708b87dcb6e48cb48d170a4b3625088995377a5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c?ref=708b87dcb6e48cb48d170a4b3625088995377a5c", "patch": "@@ -14,7 +14,7 @@ int main (int argc, char *argv[])\n     v0 + v1,              /* { dg-warning \"expanded piecewise\" }  */\n     v0 - v1,              /* { dg-warning \"expanded piecewise\" }  */\n     v0 > v1,              /* { dg-warning \"expanded piecewise\" }  */\n-    v0 & v1,              /* { dg-warning \"expanded in parallel\" }  */\n+    v0 & v1,              /* { dg-warning \"expanded piecewise\" }  */\n     __builtin_shuffle (v0, v1),        /* { dg-warning \"expanded piecewise\" }  */\n     __builtin_shuffle (v0, v1, v1)     /* { dg-warning \"expanded piecewise\" }  */\n   };"}]}