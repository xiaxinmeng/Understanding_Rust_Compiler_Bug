{"sha": "5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJkZjA1Yzg3NDNlNzQ4NjUyMWNlM2EzOTgxYWMzZTZlNzg1MGFkMA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2009-01-13T17:52:32Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2009-01-13T17:52:32Z"}, "message": "altivec-consts.c: Run if vmx_hw, compile otherwise.\n\n\t* gcc.target/powerpc/altivec-consts.c: Run if vmx_hw, compile\n\totherwise.  Do not check for AltiVec at runtime.\n\t* gcc.target/powerpc/altivec-varargs-1.c: Likewise.\n\t* gcc.target/powerpc/altivec-vec-merge.c: Likewise.\n\t* gcc.target/powerpc/altivec-1.c: Likewise.\n\t* gcc.target/powerpc/altivec-3.c: Likewise.\n\t* gcc.target/powerpc/altivec-10.c: Likewise.\n\t* gcc.target/powerpc/altivec-12.c: Likewise.\n\t* gcc.target/powerpc/altivec-24.c: Likewise.\n\t* gcc.target/powerpc/altivec-cell-2.c: Likewise.\n\t* gcc.target/powerpc/altivec-cell-3.c: Likewise.\n\t* gcc.target/powerpc/altivec-cell-4.c: Likewise.\n\t* gcc.target/powerpc/pr35907.c: Likewise.\n\t* gcc.target/powerpc/altivec-cell-8.c: Run if cell_hw, compile\n\totherwise.  Do not check for Cell at runtime.\n\t* gcc.target/powerpc/altivec_check.h: Delete.\n\n\t* g++.dg/ext/altivec-2.C: Do not check for AltiVec at runtime.\n\t* g++.dg/ext/altivec-3.C: Run if vmx_hw, compile otherwise.  Do\n\tnot check for AltiVec at runtime.\n\t* g++.dg/ext/altivec-cell-2.C: Likewise.\n\t* g++.dg/ext/altivec-cell-3.C: Likewise.\n\t* g++.dg/ext/altivec-cell-4.C: Likewise.\n\t* g++.dg/eh/simd-2.C: Only use -maltivec if vmx_hw.\n\t* g++.dg/eh/check-vect.h (sig_ill_handler): Remove AltiVec runtime\n\tcheck.\n\t* g++.dg/ext/altivec_check.h: Delete.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\nCo-Authored-By: Nathan Froyd <froydnj@codesourcery.com>\n\nFrom-SVN: r143350", "tree": {"sha": "352b586a85c1ea82e2e148f29e679c6c1ecbae01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/352b586a85c1ea82e2e148f29e679c6c1ecbae01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/comments", "author": null, "committer": null, "parents": [{"sha": "425a0a4d440eedd498355bfd059579480514e755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425a0a4d440eedd498355bfd059579480514e755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/425a0a4d440eedd498355bfd059579480514e755"}], "stats": {"total": 252, "additions": 110, "deletions": 142}, "files": [{"sha": "37223ec2e62c2f72d959f19c7d3eaff975b10802", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,3 +1,35 @@\n+2009-01-13  Daniel Jacobowitz  <dan@codesourcery.com>\n+\t    Nathan Froyd  <froydnj@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.target/powerpc/altivec-consts.c: Run if vmx_hw, compile\n+\totherwise.  Do not check for AltiVec at runtime.\n+\t* gcc.target/powerpc/altivec-varargs-1.c: Likewise.\n+\t* gcc.target/powerpc/altivec-vec-merge.c: Likewise.\n+\t* gcc.target/powerpc/altivec-1.c: Likewise.\n+\t* gcc.target/powerpc/altivec-3.c: Likewise.\n+\t* gcc.target/powerpc/altivec-10.c: Likewise.\n+\t* gcc.target/powerpc/altivec-12.c: Likewise.\n+\t* gcc.target/powerpc/altivec-24.c: Likewise.\n+\t* gcc.target/powerpc/altivec-cell-2.c: Likewise.\n+\t* gcc.target/powerpc/altivec-cell-3.c: Likewise.\n+\t* gcc.target/powerpc/altivec-cell-4.c: Likewise.\n+\t* gcc.target/powerpc/pr35907.c: Likewise.\n+\t* gcc.target/powerpc/altivec-cell-8.c: Run if cell_hw, compile\n+\totherwise.  Do not check for Cell at runtime.\n+\t* gcc.target/powerpc/altivec_check.h: Delete.\n+\n+\t* g++.dg/ext/altivec-2.C: Do not check for AltiVec at runtime.\n+\t* g++.dg/ext/altivec-3.C: Run if vmx_hw, compile otherwise.  Do\n+\tnot check for AltiVec at runtime.\n+\t* g++.dg/ext/altivec-cell-2.C: Likewise.\n+\t* g++.dg/ext/altivec-cell-3.C: Likewise.\n+\t* g++.dg/ext/altivec-cell-4.C: Likewise.\n+\t* g++.dg/eh/simd-2.C: Only use -maltivec if vmx_hw.\n+\t* g++.dg/eh/check-vect.h (sig_ill_handler): Remove AltiVec runtime\n+\tcheck.\n+\t* g++.dg/ext/altivec_check.h: Delete.\n+\t\n 2009-01-13  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc.target/powerpc/altivec-macros.c: Require a powerpc_altivec_ok"}, {"sha": "b46a8827598a6af5de8939e845b2574731098776", "filename": "gcc/testsuite/g++.dg/eh/check-vect.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcheck-vect.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcheck-vect.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcheck-vect.h?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -13,10 +13,7 @@ sig_ill_handler (int sig)\n void check_vect (void)\n {\n   signal(SIGILL, sig_ill_handler);\n-#if defined(__ppc__) || defined(__ppc64__) || defined(__powerpc__) || defined(powerpc)\n-  /* Altivec instruction, 'vor %v0,%v0,%v0'.  */\n-  asm volatile (\".long 0x10000484\");\n-#elif defined(__i386__) || defined(__x86_64__)\n+#if defined(__i386__) || defined(__x86_64__)\n   /* SSE2 instruction: movsd %xmm0,%xmm0 */\n   asm volatile (\".byte 0xf2,0x0f,0x10,0xc0\");\n #elif defined(__sparc__)"}, {"sha": "b4c8690e9de45b872630016d50d4c0f1e22fb19b", "filename": "gcc/testsuite/g++.dg/eh/simd-2.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -3,9 +3,7 @@\n // { dg-options \"-O\" }\n // { dg-options \"-O -w\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } }\n // { dg-options \"-O -w\" { target powerpc*-*-* } }\n-// { dg-options \"-O -w -maltivec\" { target { powerpc*-*-linux* && powerpc_altivec_ok } } }\n-// { dg-options \"-O -w -maltivec\" { target { powerpc*-*-darwin* && powerpc_altivec_ok } } }\n-// { dg-xfail-if \"\" { \"powerpc-*-eabispe*\" \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } }\n+// { dg-options \"-O -w -maltivec\" { target { powerpc*-*-* && vmx_hw } } }\n // { dg-do run }\n \n #include \"check-vect.h\""}, {"sha": "299693694f6f4e0e7977fac5a89a45a1066f059c", "filename": "gcc/testsuite/g++.dg/ext/altivec-2.C", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-2.C?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -6,7 +6,6 @@\n    arguments.  */\n \n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n int main (int argc, const char * argv[])\n {\n@@ -15,8 +14,6 @@ int main (int argc, const char * argv[])\n   vector float v;\n   const vector float cv = (vector float){1.0, 2.0, 3.0, 4.0};\n \n-  altivec_check ();\n-\n   vec_dst(&cv, i, 0);\n   v = vec_ld(0, &cv);\t\n   v = vec_lde(0, &cf);"}, {"sha": "151132059508e04ce65351bdc5b09ed5877ecd76", "filename": "gcc/testsuite/g++.dg/ext/altivec-3.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-3.C?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n \n@@ -10,7 +11,6 @@\n #include <stdlib.h>\n \n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n #define CHECK_INVARIANT(expr) \\\n   if (!(expr)) { \\\n@@ -132,7 +132,6 @@ void main1(void)\n \n int main(void)\n {\n-    altivec_check();\n     main1();\n     return 0;\n }"}, {"sha": "f0d3433cdd99fd87fb6e987a404dee290fce335d", "filename": "gcc/testsuite/g++.dg/ext/altivec-cell-2.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-2.C?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n /* Test the vec_extract VMX intrinsics.  */\n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n extern \"C\" void abort (void);\n \n@@ -137,6 +137,5 @@ int main1(void)\n \n int main(void)\n { \n-  altivec_check();  /* Exits if AltiVec not supported */\n   return main1 ();\n }"}, {"sha": "bd7e774e3cdc6ff6a1e6d79018743b6912b69204", "filename": "gcc/testsuite/g++.dg/ext/altivec-cell-3.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-3.C?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n /* Test the vec_splats and vec_promote VMX intrinsics.  */\n #include <altivec.h>\n-#include \"altivec_check.h\"\n     \n extern \"C\" void abort (void);\n         \n@@ -33,6 +33,5 @@ int main1(int t)\n     \n int main(void)\n { \n-  altivec_check();  /* Exits if AltiVec not supported */\n   return main1 (0);\n }"}, {"sha": "7d91adbb34e71be8369ac68d8269a7cafe3fff03", "filename": "gcc/testsuite/g++.dg/ext/altivec-cell-4.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-cell-4.C?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,10 +1,10 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n \n /* Test the vec_splats and vec_promote VMX intrinsics.  */\n #include <altivec.h>\n-#include \"altivec_check.h\"\n     \n extern \"C\" void abort (void);\n         \n@@ -38,6 +38,5 @@ int main1(int t)\n   \n int main(void)\n {\n-  altivec_check();  /* Exits if AltiVec not supported */\n   return main1 (0);\n }"}, {"sha": "9e8b3f78ac2b9a72d7e5adfd1ca5e8b901410de8", "filename": "gcc/testsuite/g++.dg/ext/altivec_check.h", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425a0a4d440eedd498355bfd059579480514e755/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425a0a4d440eedd498355bfd059579480514e755/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec_check.h?ref=425a0a4d440eedd498355bfd059579480514e755", "patch": "@@ -1,27 +0,0 @@\n-/* A runtime check for AltiVec capability.  */\n-/* Contributed by Ziemowit Laski  <zlaski@apple.com>  */\n-\n-#include <signal.h>\n-extern\n-#ifdef __cplusplus\n-\"C\"\n-#endif\n-void exit(int);\n-\n-void \n-sig_ill_handler (int sig)\n-{\n-    exit (0);\n-}\n-\n-void altivec_check(void) {\n-\n-  /* Exit on systems without AltiVec.  */\n-  signal (SIGILL, sig_ill_handler);\n-#ifdef __MACH__\n-  asm volatile (\"vor v0,v0,v0\");\n-#else\n-  asm volatile (\"vor 0,0,0\");\n-#endif\n-  signal (SIGILL, SIG_DFL);\n-}"}, {"sha": "b1809fe2c9c240de71815404c3ef57637ab3ba46", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-1.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,11 +1,11 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n \n /* Program to test PowerPC AltiVec instructions.  */\n \n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n extern void abort (void);\n \n@@ -24,8 +24,6 @@ vector float f, g, h;\n \n int main ()\n {\n-  altivec_check();  /* Exits if AltiVec not supported */\n-\n   k = vec_add (a1, a2);\n   if (!vec_all_eq (addi, k))\n     abort ();"}, {"sha": "f532eebbfab0b67ce1bbdb636989a1c84c814e9a", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-10.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-10.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,11 +1,12 @@\n-/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec -mabi=altivec -fno-inline\" } */\n \n #include <altivec.h>\n-#include <signal.h>\n \n-#include \"altivec_check.h\"\n+extern void exit (int);\n+extern void abort (void);\n \n typedef union\n {\n@@ -72,8 +73,6 @@ check_cmple()\n int \n main()\n {\n-  altivec_check ();\n-\n   check_cmple ();\n   check_vec_all_num ();\n   exit (0);"}, {"sha": "39d26940d4e36928d96d880f8bd86b4f6f0616af", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-12.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,11 +1,11 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n \n /* Program to test PowerPC AltiVec instructions.  */\n \n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n extern void abort (void);\n #define CHECK_IF(E) if(!(E)) abort()\n@@ -26,9 +26,6 @@ vector float f, g, h;\n \n int main ()\n {\n-\n-  altivec_check();  /* Exit if AltiVec not available.  */\n-\n   k = vec_add (a1, a2);\n   CHECK_IF (vec_all_eq (addi, k));\n   CHECK_IF (vec_all_ge (addi, k));"}, {"sha": "d296fe2465804665dd1ce4565f805b81c54c89be", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-24.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-24.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n \n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n extern void abort (void);\n \n@@ -28,7 +28,6 @@ int verify (void)\n \n int main (void)\n {\n-  altivec_check ();   /* Exit if hardware doesn't support AltiVec.  */\n   initialize (MAGIC_NUMBER);\n   verify ();\n   return 0;"}, {"sha": "d388ad299a4d6a6614dec63c7a9f8c80d6be6e58", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-3.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-3.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,8 +1,10 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n \n-#include \"altivec_check.h\"\n+extern void exit (int);\n+extern void abort (void);\n \n typedef int int4 __attribute__ ((vector_size (16)));\n typedef float float4 __attribute__ ((vector_size (16)));\n@@ -73,7 +75,6 @@ main1 ()\n int\n main ()\n {\n-  altivec_check ();\n   main1 ();\n   exit (0);\n }"}, {"sha": "fdb375c9efe072eeb1aaa5448afb19dea271be8d", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-cell-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-2.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n /* Test the vec_extract VMX intrinsics.  */\n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n extern void abort (void);\n \n@@ -137,6 +137,5 @@ int main1(void)\n \n int main(void)\n { \n-  altivec_check();  /* Exits if AltiVec not supported */\n   return main1 ();\n }"}, {"sha": "b941ab186fa15c01cbe2f60d05dcfd04f50764d7", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-cell-3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-3.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n /* Test the vec_splats and vec_promote VMX intrinsics.  */\n #include <altivec.h>\n-#include \"altivec_check.h\"\n     \n extern void abort (void);\n         \n@@ -33,6 +33,5 @@ int main1(int t)\n     \n int main(void)\n { \n-  altivec_check();  /* Exits if AltiVec not supported */\n   return main1 (0);\n }"}, {"sha": "c694691d475913268b9f752f19c6af56184b8e15", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-cell-4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-4.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,10 +1,10 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec\" } */\n \n /* Test the vec_splats and vec_promote VMX intrinsics.  */\n #include <altivec.h>\n-#include \"altivec_check.h\"\n     \n extern void abort (void);\n         \n@@ -38,6 +38,5 @@ int main1(int t)\n   \n int main(void)\n {\n-  altivec_check();  /* Exits if AltiVec not supported */\n   return main1 (0);\n }"}, {"sha": "dda5eb0c1142461aea347aedce8872f759470510", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-cell-8.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-cell-8.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,9 +1,11 @@\n-/* { dg-do run } */\n+/* { dg-do run { target { powerpc*-*-* && cell_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! cell_hw } } } } */\n /* { dg-require-effective-target powerpc_ppu_ok } */\n /* { dg-options \"-O2 -maltivec -mabi=altivec -mcpu=cell\" } */\n #include <altivec.h>\n #include <string.h>\n-#include \"altivec_check.h\"\n+\n+extern void abort (void);\n \n typedef short int sint16;\n typedef signed char int8;\n@@ -51,6 +53,5 @@ return 0;\n \n int main(void)\n {\n-  altivec_cell_check ();\n   return main1();\n }"}, {"sha": "2c5bc99cff81788f79a9eb2fc25400ed94adfa52", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-consts.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-consts.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,11 +1,10 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec -mabi=altivec -O2\" } */\n \n /* Check that \"easy\" AltiVec constants are correctly synthesized.  */\n \n-#include \"altivec_check.h\"\n-\n extern void abort (void);\n \n typedef __attribute__ ((vector_size (16))) unsigned char v16qi;\n@@ -283,8 +282,6 @@ void v4si_vspltisw_neg_addself ()\n \n int main ()\n {\n-  altivec_check ();   /* Exit if hardware doesn't support AltiVec.  */\n-\n   v16qi_vspltisb ();\n   v16qi_vspltisb_neg ();\n   v16qi_vspltisb_addself ();"}, {"sha": "1349ae590d9d49b48f1889b4cc19e65c520fbd94", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-varargs-1.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-varargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-varargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-varargs-1.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,11 +1,12 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec -mabi=altivec -fno-inline\" } */\n \n #include <stdarg.h>\n-#include <signal.h>\n \n-#include \"altivec_check.h\"\n+extern void exit (int);\n+extern void abort (void);\n \n #define vector __attribute__((vector_size (16)))\n \n@@ -77,8 +78,5 @@ int main1(void)\n \n int main (void)\n {\n-  /* Exit on systems without AltiVec.  */\n-  altivec_check ();\n-\n   return main1 ();\n }"}, {"sha": "3689f97490ce2361a918d8079d6fb2727444e24d", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-vec-merge.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-vec-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-vec-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-vec-merge.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec -O2\" } */\n \n #include <altivec.h>\n-#include \"altivec_check.h\"\n \n int printf(const char * , ...);\n extern void abort();\n@@ -600,7 +600,6 @@ int main(int argc, char **argv)\n {\n     char toto[32] __attribute__((aligned(16)));\n \n-    altivec_check ();\t/* Exit if hardware doesn't support AltiVec.  */\n     foo(toto, toto, 0, 0);\n     return 0;\n }"}, {"sha": "d966e238a104a701c0e9b338fcf5ff946864d223", "filename": "gcc/testsuite/gcc.target/powerpc/altivec_check.h", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425a0a4d440eedd498355bfd059579480514e755/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425a0a4d440eedd498355bfd059579480514e755/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec_check.h?ref=425a0a4d440eedd498355bfd059579480514e755", "patch": "@@ -1,43 +0,0 @@\n-/* A runtime check for AltiVec capability.  */\n-/* Contributed by Ziemowit Laski  <zlaski@apple.com>  */\n-\n-#include <signal.h>\n-extern void exit (int);\n-extern void abort (void);\n-\n-void \n-sig_ill_handler (int sig)\n-{\n-    exit (0);\n-}\n-\n-void altivec_check(void) {\n-\n-  /* Exit on systems without AltiVec.  */\n-  signal (SIGILL, sig_ill_handler);\n-#ifdef __MACH__\n-  asm volatile (\"vor v0,v0,v0\");\n-#else\n-  asm volatile (\"vor 0,0,0\");\n-#endif\n-  signal (SIGILL, SIG_DFL);\n-}\n-\n-void altivec_cell_check (void)\n-{\n-#ifdef __PPU__\n-  /* Exit on systems without the Cell Altivec instructions.  */\n-  signal (SIGILL, sig_ill_handler);\n-#ifdef __MACH__\n-  asm volatile (\"vor v0,v0,v0\");\n-  asm volatile (\"lvlx v0,r0,r0\");\n-#else\n-  asm volatile (\"vor 0,0,0\");\n-  asm volatile (\"lvlx 0,0,0\");\n-#endif\n-  signal (SIGILL, SIG_DFL);\n-#else\n-  /* altivec_cell_check shouldn't be called without -mcpu=cell.  */\n-  abort ();\n-#endif\n-}"}, {"sha": "7d5465ea1514b9bce6066b34e12a5479900d67f7", "filename": "gcc/testsuite/gcc.target/powerpc/pr35907.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr35907.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr35907.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr35907.c?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -1,10 +1,9 @@\n /* PR target/35907 */\n-/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target { powerpc*-*-* && vmx_hw } } } */\n+/* { dg-do compile { target { powerpc*-*-* && { ! vmx_hw } } } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-O2 -maltivec\" } */\n \n-#include \"altivec_check.h\"\n-\n #define vector __attribute__((vector_size (16)))\n union\n {\n@@ -53,7 +52,6 @@ test (void)\n int\n main ()\n {\n-  altivec_check ();\n   test ();\n   return 0;\n }"}, {"sha": "af806be6dd181dd4a35b798b3b45002f9c87e075", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdf05c8743e7486521ce3a3981ac3e6e7850ad0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5bdf05c8743e7486521ce3a3981ac3e6e7850ad0", "patch": "@@ -905,6 +905,40 @@ proc check_vmx_hw_available { } {\n     }]\n }\n \n+# Return 1 if the target supports executing AltiVec and Cell PPU\n+# instructions, 0 otherwise.  Cache the result.\n+\n+proc check_effective_target_cell_hw { } {\n+    return [check_cached_effective_target cell_hw_available {\n+\t# Some simulators are known to not support VMX and PPU instructions.\n+\tif { [istarget powerpc-*-eabi*] } {\n+\t    expr 0\n+\t} else {\n+\t    # Most targets don't require special flags for this test\n+\t    # case, but Darwin and AIX do.\n+\t    if { [istarget *-*-darwin*]\n+\t\t || [istarget *-*-aix*] } {\n+\t\tset options \"-maltivec -mcpu=cell\"\n+\t    } else {\n+\t\tset options \"-mcpu=cell\"\n+\t    }\n+\t    check_runtime_nocache cell_hw_available {\n+\t\tint main()\n+\t\t{\n+\t\t#ifdef __MACH__\n+\t\t  asm volatile (\"vor v0,v0,v0\");\n+                  asm volatile (\"lvlx v0,r0,r0\");\n+\t\t#else\n+\t\t  asm volatile (\"vor 0,0,0\");\n+                  asm volatile (\"lvlx 0,0,0\");\n+\t        #endif\n+\t\t  return 0;\n+\t\t}\n+\t    } $options\n+\t}\n+    }]\n+}\n+\n # Return 1 if the target supports executing 64-bit instructions, 0\n # otherwise.  Cache the result.\n "}]}