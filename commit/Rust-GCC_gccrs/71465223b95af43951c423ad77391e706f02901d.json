{"sha": "71465223b95af43951c423ad77391e706f02901d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0NjUyMjNiOTVhZjQzOTUxYzQyM2FkNzczOTFlNzA2ZjAyOTAxZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-09-10T15:47:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-09-10T16:00:57Z"}, "message": "Fix uninitialized variable with nested variant record types\n\nThis fixes a wrong code issue with nested variant record types: the\ncompiler generates move instructions that depend on an uninitialized\nvariable, which was initially a SAVE_EXPR not instantiated early enough.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/decl.c (build_subst_list): For a definition, make\n\tsure to instantiate the SAVE_EXPRs generated by the elaboration of\n\tthe constraints in front of the elaboration of the type itself.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/discr59.adb: New test.\n\t* gnat.dg/discr59_pkg1.ads: New helper.\n\t* gnat.dg/discr59_pkg2.ads: Likewise.", "tree": {"sha": "708ff979248ddb6daebc0a49eed834903174c78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/708ff979248ddb6daebc0a49eed834903174c78a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71465223b95af43951c423ad77391e706f02901d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71465223b95af43951c423ad77391e706f02901d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71465223b95af43951c423ad77391e706f02901d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71465223b95af43951c423ad77391e706f02901d/comments", "author": null, "committer": null, "parents": [{"sha": "66a204a6567385638f633732bb61e2ac26b2eb02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a204a6567385638f633732bb61e2ac26b2eb02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66a204a6567385638f633732bb61e2ac26b2eb02"}], "stats": {"total": 88, "additions": 83, "deletions": 5}, "files": [{"sha": "f85b2b5bbbb49b50b79636d36c26d9e2fdb6c90c", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71465223b95af43951c423ad77391e706f02901d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71465223b95af43951c423ad77391e706f02901d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=71465223b95af43951c423ad77391e706f02901d", "patch": "@@ -8849,11 +8849,15 @@ build_subst_list (Entity_Id gnat_subtype, Entity_Id gnat_type, bool definition)\n     if (!Is_Access_Type (Etype (Node (gnat_constr))))\n       {\n \ttree gnu_field = gnat_to_gnu_field_decl (gnat_discrim);\n-\ttree replacement = convert (TREE_TYPE (gnu_field),\n-\t\t\t\t    elaborate_expression\n-\t\t\t\t    (Node (gnat_constr), gnat_subtype,\n-\t\t\t\t     get_entity_char (gnat_discrim),\n-\t\t\t\t     definition, true, false));\n+\ttree replacement\n+\t  = elaborate_expression (Node (gnat_constr), gnat_subtype,\n+\t\t\t\t  get_entity_char (gnat_discrim),\n+\t\t\t\t  definition, true, false);\n+\t/* If this is a definition, we need to make sure that the SAVE_EXPRs\n+\t   are instantiated on every possibly path in size computations.  */\n+\tif (definition && TREE_CODE (replacement) == SAVE_EXPR)\n+\t  add_stmt (replacement);\n+\treplacement = convert (TREE_TYPE (gnu_field), replacement);\n \tsubst_pair s = { gnu_field, replacement };\n \tgnu_list.safe_push (s);\n       }"}, {"sha": "59e1b5fc290bd73105e412acacb6789a0322caa5", "filename": "gcc/testsuite/gnat.dg/discr59.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71465223b95af43951c423ad77391e706f02901d/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71465223b95af43951c423ad77391e706f02901d/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59.adb?ref=71465223b95af43951c423ad77391e706f02901d", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do run }\n+\n+with Discr59_Pkg1; use Discr59_Pkg1;\n+\n+procedure Discr59 is\n+\n+   function At_Response_Decode return At_Response_Type is\n+      Fill : At_Response_Type (Alert, 1);\n+   begin\n+      return Fill;\n+   end;\n+\n+   function Decode return Rec is\n+      Make : constant At_Response_Type := At_Response_Decode;\n+      Fill : Rec (At_Response, Make.Kind, Make.Units);\n+   begin\n+      return Fill;\n+   end;\n+\n+   R : constant Rec := Decode;\n+\n+begin\n+   null;\n+end;"}, {"sha": "455250b33e97c581ab0eceb33bfdaa84fe54099b", "filename": "gcc/testsuite/gnat.dg/discr59_pkg1.ads", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71465223b95af43951c423ad77391e706f02901d/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71465223b95af43951c423ad77391e706f02901d/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59_pkg1.ads?ref=71465223b95af43951c423ad77391e706f02901d", "patch": "@@ -0,0 +1,35 @@\n+with Discr59_Pkg2;\n+\n+package Discr59_Pkg1 is\n+\n+   subtype Index_Type is Natural range 1 .. 300;\n+\n+   type Code_Type is (Global_Query, Status_Query, Alert);\n+\n+   type Id_Type is (None, At_Command, At_Response);\n+\n+   package My_G is new Discr59_Pkg2 (21);\n+\n+   type Arr is array (Index_Type range <>) of My_G.Token_Type;\n+\n+   type Unit_List_Type (Last : Natural) is record\n+      A : Arr (1 .. Last);\n+   end record;\n+\n+   type At_Response_Type (Kind : Code_Type; Units : Natural) is record\n+      case Kind is\n+         when Global_Query => Global_Query : Unit_List_Type (Units);\n+         when Status_Query => null;\n+         when Alert        => Alert : Unit_List_Type (Units);\n+      end case;\n+   end record;\n+\n+   type Rec (Kind : Id_Type; Code : Code_Type; Units : Natural) is record\n+      case Kind is\n+         when None        => null;\n+         when At_Command  => null;\n+         when At_Response => At_Response : At_Response_Type (Code, Units);\n+      end case;\n+   end record;\n+\n+end Discr59_Pkg1;"}, {"sha": "01ed5090ebdd4cacd52ebc6e99734abe879fc44d", "filename": "gcc/testsuite/gnat.dg/discr59_pkg2.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71465223b95af43951c423ad77391e706f02901d/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71465223b95af43951c423ad77391e706f02901d/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr59_pkg2.ads?ref=71465223b95af43951c423ad77391e706f02901d", "patch": "@@ -0,0 +1,15 @@\n+generic\n+\n+   Max_Length : Positive;\n+\n+package Discr59_Pkg2 is\n+\n+   type Token_Base_Type (Most : Natural) is record\n+      Text : String (1 .. Most) := (others => ' ');\n+      Last : Natural            := 0;\n+      Used : Natural            := 0;\n+   end record;\n+\n+   type Token_Type is new Token_Base_Type (Max_Length);\n+\n+end Discr59_Pkg2;"}]}