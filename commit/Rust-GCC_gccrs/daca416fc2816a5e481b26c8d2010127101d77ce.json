{"sha": "daca416fc2816a5e481b26c8d2010127101d77ce", "node_id": "C_kwDOANBUbNoAKGRhY2E0MTZmYzI4MTZhNWU0ODFiMjZjOGQyMDEwMTI3MTAxZDc3Y2U", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-12-04T03:17:16Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-12-04T03:17:16Z"}, "message": "[PR103028] test ifcvt trap_if seq more strictly after reload\n\nWhen -fif-conversion2 is enabled, we attempt to replace conditional\nbranches around unconditional traps with conditional traps.  That\ncanonicalizes compares, which may change an immediate that barely fits\ninto one that doesn't.\n\nThe compare for the trap is first checked using the predicates of\ncbranch predicates, and then, compare and conditional trap insns are\nemitted and recognized.\n\nIn the failing s390x testcase, i <=u 0xffff_ffff is canonicalized into\ni <u 0x1_0000_0000, and the latter immediate doesn't fit.  The insn\npredicates (both cbranch and cmpdi_ccu) happily accept it, since the\nregister allocator has no trouble getting them into registers.  The\nproblem is that ifcvt2 runs after reload, so we recognize the compare\ninsn successfully, but later on we barf when we find that none of the\nconstraints fit.\n\nThis patch arranges for the trap_if-issuing bits in ifcvt to validate\npost-reload insns using a stricter test that also checks that operands\nfit the constraints.\n\n\nfor  gcc/ChangeLog\n\n\tPR rtl-optimization/103028\n\t* ifcvt.c (find_cond_trap): Validate new insns more strictly\n\tafter reload.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR rtl-optimization/103028\n\t* gcc.dg/pr103028.c: New.", "tree": {"sha": "f3376d7df14462031bdd78581b06bf29b82a3f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3376d7df14462031bdd78581b06bf29b82a3f88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daca416fc2816a5e481b26c8d2010127101d77ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daca416fc2816a5e481b26c8d2010127101d77ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daca416fc2816a5e481b26c8d2010127101d77ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daca416fc2816a5e481b26c8d2010127101d77ce/comments", "author": null, "committer": null, "parents": [{"sha": "e096e2cfe9f587ac189fd7db7390585333900d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e096e2cfe9f587ac189fd7db7390585333900d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e096e2cfe9f587ac189fd7db7390585333900d2e"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "b0052f6c5ced3b9d33e3ccf6677796caac6bb648", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daca416fc2816a5e481b26c8d2010127101d77ce/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daca416fc2816a5e481b26c8d2010127101d77ce/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=daca416fc2816a5e481b26c8d2010127101d77ce", "patch": "@@ -4726,7 +4726,9 @@ find_cond_trap (basic_block test_bb, edge then_edge, edge else_edge)\n \n   /* If that results in an invalid insn, back out.  */\n   for (rtx_insn *x = seq; x; x = NEXT_INSN (x))\n-    if (recog_memoized (x) < 0)\n+    if (reload_completed\n+\t? !valid_insn_p (x)\n+\t: recog_memoized (x) < 0)\n       return FALSE;\n \n   /* Emit the new insns before cond_earliest.  */"}, {"sha": "df96c62ddd36dd25e88043eec237f665493aa104", "filename": "gcc/testsuite/gcc.dg/pr103028.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daca416fc2816a5e481b26c8d2010127101d77ce/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103028.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daca416fc2816a5e481b26c8d2010127101d77ce/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103028.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103028.c?ref=daca416fc2816a5e481b26c8d2010127101d77ce", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fif-conversion2 -Og\" } */\n+/* { dg-options \"-fif-conversion2 -Og -march=z9-ec\" { target { s390x-*-* } } } */\n+\n+unsigned char x;\n+int foo(void)\n+{\n+  unsigned long long i = x;\n+  i = i + 0x80000000;\n+  unsigned long long t = 0xffffffff;\n+\n+  if (i > t) {\n+    unsigned long long ii;\n+    asm(\"\":\"=g\"(ii):\"0\"(i));\n+    if ((ii <= t))\n+      __builtin_trap();\n+    return x;\n+  }\n+\n+ return 0;\n+}"}]}