{"sha": "935b02aea97d8d2aa40e65e908228c4666cb1803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM1YjAyYWVhOTdkOGQyYWE0MGU2NWU5MDgyMjhjNDY2NmNiMTgwMw==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-08-12T08:59:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T08:59:13Z"}, "message": "[Ada] Extended traversal subprograms for GNATprove\n\nGNATprove needs traversal subprograms that do not simply traverse\nsyntactic nodes like Atree.Traverse_Func and Atree.Traverse_Proc, but\nalso traverse semantic nodes which are logically children of the nodes.\nNow available through Sem_Util.Traverse_More_Func and\nSem_Util.Traverse_More_Proc.\n\nThere is no impact on compilation.\n\n2019-08-12  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb, sem_util.ads (Traverse_More_Func,\n\tTraverse_More_Proc): New traversal subprograms.\n\nFrom-SVN: r274284", "tree": {"sha": "4f16ff0a2c2c995564555754e558b6e99a2dd2da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f16ff0a2c2c995564555754e558b6e99a2dd2da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/935b02aea97d8d2aa40e65e908228c4666cb1803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935b02aea97d8d2aa40e65e908228c4666cb1803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935b02aea97d8d2aa40e65e908228c4666cb1803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935b02aea97d8d2aa40e65e908228c4666cb1803/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96a8b7050beeb1a28d0e2c2a8d3e841ea38d450c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a8b7050beeb1a28d0e2c2a8d3e841ea38d450c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a8b7050beeb1a28d0e2c2a8d3e841ea38d450c"}], "stats": {"total": 222, "additions": 221, "deletions": 1}, "files": [{"sha": "2f3ec7b589e31191f839d43c6d7b1cdad21d7d40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b02aea97d8d2aa40e65e908228c4666cb1803/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b02aea97d8d2aa40e65e908228c4666cb1803/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=935b02aea97d8d2aa40e65e908228c4666cb1803", "patch": "@@ -1,3 +1,8 @@\n+2019-08-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Traverse_More_Func,\n+\tTraverse_More_Proc): New traversal subprograms.\n+\n 2019-08-12  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* libgnarl/s-taprop__vxworks.adb (Abort_Handler): Only call"}, {"sha": "acc257cc3193bdbb0eaa4fff1cb3aeb70acc03a9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 199, "deletions": 1, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b02aea97d8d2aa40e65e908228c4666cb1803/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b02aea97d8d2aa40e65e908228c4666cb1803/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=935b02aea97d8d2aa40e65e908228c4666cb1803", "patch": "@@ -26,7 +26,6 @@\n with Treepr; -- ???For debugging code below\n \n with Aspects;  use Aspects;\n-with Atree;    use Atree;\n with Casing;   use Casing;\n with Checks;   use Checks;\n with Debug;    use Debug;\n@@ -25437,6 +25436,205 @@ package body Sem_Util is\n       end if;\n    end Transfer_Entities;\n \n+   ------------------------\n+   -- Traverse_More_Func --\n+   ------------------------\n+\n+   function Traverse_More_Func (Node : Node_Id) return Traverse_Final_Result is\n+\n+      Processing_Itype : Boolean := False;\n+      --  Set to True while traversing the nodes under an Itype, to prevent\n+      --  looping on Itype handling during that traversal.\n+\n+      function Process_More (N : Node_Id) return Traverse_Result;\n+      --  Wrapper over the Process callback to handle parts of the AST that\n+      --  are not normally traversed as syntactic children.\n+\n+      function Traverse_Rec (N : Node_Id) return Traverse_Final_Result;\n+      --  Main recursive traversal implemented as an instantiation of\n+      --  Traverse_Func over a modified Process callback.\n+\n+      ------------------\n+      -- Process_More --\n+      ------------------\n+\n+      function Process_More (N : Node_Id) return Traverse_Result is\n+\n+         procedure Traverse_More (N   : Node_Id;\n+                                  Res : in out Traverse_Result);\n+         procedure Traverse_More (L   : List_Id;\n+                                  Res : in out Traverse_Result);\n+         --  Traverse a node or list and update the traversal result to value\n+         --  Abandon when needed.\n+\n+         -------------------\n+         -- Traverse_More --\n+         -------------------\n+\n+         procedure Traverse_More (N   : Node_Id;\n+                                  Res : in out Traverse_Result)\n+         is\n+         begin\n+            --  Do not process any more nodes if Abandon was reached\n+\n+            if Res = Abandon then\n+               return;\n+            end if;\n+\n+            if Traverse_Rec (N) = Abandon then\n+               Res := Abandon;\n+            end if;\n+         end Traverse_More;\n+\n+         procedure Traverse_More (L   : List_Id;\n+                                  Res : in out Traverse_Result)\n+         is\n+            N : Node_Id := First (L);\n+\n+         begin\n+            --  Do not process any more nodes if Abandon was reached\n+\n+            if Res = Abandon then\n+               return;\n+            end if;\n+\n+            while Present (N) loop\n+               Traverse_More (N, Res);\n+               Next (N);\n+            end loop;\n+         end Traverse_More;\n+\n+         --  Local variables\n+\n+         Node   : Node_Id;\n+         Result : Traverse_Result;\n+\n+      --  Start of processing for Process_More\n+\n+      begin\n+         --  Initial callback to Process. Return immediately on Skip/Abandon.\n+         --  Otherwise update the value of Node for further processing of\n+         --  non-syntactic children.\n+\n+         Result := Process (N);\n+\n+         case Result is\n+            when OK      => Node := N;\n+            when OK_Orig => Node := Original_Node (N);\n+            when Skip    => return Skip;\n+            when Abandon => return Abandon;\n+         end case;\n+\n+         --  Process the relevant semantic children which are a logical part of\n+         --  the AST under this node before returning for the processing of\n+         --  syntactic children.\n+\n+         --  Start with all non-syntactic lists of action nodes\n+\n+         case Nkind (Node) is\n+            when N_Component_Association =>\n+               Traverse_More (Loop_Actions (Node),      Result);\n+\n+            when N_Elsif_Part =>\n+               Traverse_More (Condition_Actions (Node), Result);\n+\n+            when N_Short_Circuit =>\n+               Traverse_More (Actions (Node),           Result);\n+\n+            when N_Case_Expression_Alternative =>\n+               Traverse_More (Actions (Node),           Result);\n+\n+            when N_Iteration_Scheme =>\n+               Traverse_More (Condition_Actions (Node), Result);\n+\n+            when N_If_Expression =>\n+               Traverse_More (Then_Actions (Node),      Result);\n+               Traverse_More (Else_Actions (Node),      Result);\n+\n+            --  Various nodes have a field Actions as a syntactic node,\n+            --  so it will be traversed in the regular syntactic traversal.\n+\n+            when N_Compilation_Unit_Aux\n+               | N_Compound_Statement\n+               | N_Expression_With_Actions\n+               | N_Freeze_Entity\n+            =>\n+               null;\n+\n+            when others =>\n+               null;\n+         end case;\n+\n+         --  Then process unattached nodes which come from Itypes. This only\n+         --  concerns currently ranges of scalar (possibly as index) types.\n+         --  This traversal is protected against looping with Processing_Itype.\n+\n+         if not Processing_Itype\n+           and then Nkind (Node) in N_Has_Etype\n+           and then Present (Etype (Node))\n+           and then Is_Itype (Etype (Node))\n+         then\n+            declare\n+               Typ : constant Entity_Id := Etype (Node);\n+            begin\n+               Processing_Itype := True;\n+\n+               case Ekind (Typ) is\n+                  when Scalar_Kind =>\n+                     Traverse_More (Scalar_Range (Typ), Result);\n+\n+                  when Array_Kind =>\n+                     declare\n+                        Index : Node_Id := First_Index (Typ);\n+                        Rng   : Node_Id;\n+                     begin\n+                        while Present (Index) loop\n+                           if Nkind (Index) in N_Has_Entity then\n+                              Rng := Scalar_Range (Entity (Index));\n+                           else\n+                              Rng := Index;\n+                           end if;\n+\n+                           Traverse_More (Rng,          Result);\n+                           Next_Index (Index);\n+                        end loop;\n+                     end;\n+                  when others =>\n+                     null;\n+               end case;\n+\n+               Processing_Itype := False;\n+            end;\n+         end if;\n+\n+         return Result;\n+      end Process_More;\n+\n+      --  Define Traverse_Rec as a renaming of the instantiation, as an\n+      --  instantiation cannot complete a previous spec.\n+\n+      function Traverse_Recursive is new Traverse_Func (Process_More);\n+      function Traverse_Rec (N : Node_Id) return Traverse_Final_Result\n+                             renames Traverse_Recursive;\n+\n+   --  Start of processing for Traverse_More_Func\n+\n+   begin\n+      return Traverse_Rec (Node);\n+   end Traverse_More_Func;\n+\n+   ------------------------\n+   -- Traverse_More_Proc --\n+   ------------------------\n+\n+   procedure Traverse_More_Proc (Node : Node_Id) is\n+      function Traverse is new Traverse_More_Func (Process);\n+      Discard : Traverse_Final_Result;\n+      pragma Warnings (Off, Discard);\n+   begin\n+      Discard := Traverse (Node);\n+   end Traverse_More_Proc;\n+\n    -----------------------\n    -- Type_Access_Level --\n    -----------------------"}, {"sha": "478f57073025b8eaabfadac4544f352d1ac99d5a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b02aea97d8d2aa40e65e908228c4666cb1803/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b02aea97d8d2aa40e65e908228c4666cb1803/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=935b02aea97d8d2aa40e65e908228c4666cb1803", "patch": "@@ -25,6 +25,7 @@\n \n --  Package containing utility procedures used throughout the semantics\n \n+with Atree;   use Atree;\n with Einfo;   use Einfo;\n with Exp_Tss; use Exp_Tss;\n with Namet;   use Namet;\n@@ -2811,6 +2812,22 @@ package Sem_Util is\n    --  Move a list of entities from one scope to another, and recompute\n    --  Is_Public based upon the new scope.\n \n+   generic\n+      with function Process (N : Node_Id) return Traverse_Result is <>;\n+   function Traverse_More_Func (Node : Node_Id) return Traverse_Final_Result;\n+   --  This is a version of Atree.Traverse_Func that not only traverses\n+   --  syntactic children of nodes, but also semantic children which are\n+   --  logically children of the node. This concerns currently lists of\n+   --  action nodes and ranges under Itypes, both inserted by the compiler.\n+\n+   generic\n+      with function Process (N : Node_Id) return Traverse_Result is <>;\n+   procedure Traverse_More_Proc (Node : Node_Id);\n+   pragma Inline (Traverse_More_Proc);\n+   --  This is the same as Traverse_More_Func except that no result is\n+   --  returned, i.e. Traverse_More_Func is called and the result is simply\n+   --  discarded.\n+\n    function Type_Access_Level (Typ : Entity_Id) return Uint;\n    --  Return the accessibility level of Typ\n "}]}