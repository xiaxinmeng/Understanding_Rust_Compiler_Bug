{"sha": "9ff6c33e2ec0d75958d3f19089519034e8f96a30", "node_id": "C_kwDOANBUbNoAKDlmZjZjMzNlMmVjMGQ3NTk1OGQzZjE5MDg5NTE5MDM0ZThmOTZhMzA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-08T00:17:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-08T00:17:29Z"}, "message": "Daily bump.", "tree": {"sha": "a8a8e822a4154667572bec1ce31efe2fbf5635ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a8e822a4154667572bec1ce31efe2fbf5635ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff6c33e2ec0d75958d3f19089519034e8f96a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff6c33e2ec0d75958d3f19089519034e8f96a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff6c33e2ec0d75958d3f19089519034e8f96a30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff6c33e2ec0d75958d3f19089519034e8f96a30/comments", "author": null, "committer": null, "parents": [{"sha": "895dd027d5dda51a95d242aec8a49a6dfa5db58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895dd027d5dda51a95d242aec8a49a6dfa5db58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/895dd027d5dda51a95d242aec8a49a6dfa5db58d"}], "stats": {"total": 327, "additions": 326, "deletions": 1}, "files": [{"sha": "3c016fe39fed5dec465be07800d1cada66348e6b", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,7 @@\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: Remove extra fetch.\n+\n 2022-10-06  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_update_version.py: Use logging module"}, {"sha": "c3c398d5a591332334daae92507fe64d47bfc012", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,18 @@\n+2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/107059\n+\t* inclhack.def (glibc_cxx_floatn_5): New.\n+\t* fixincl.x: Regenerated.\n+\t* tests/base/bits/floatn.h: Regenerated.\n+\n+2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/107059\n+\t* inclhack.def (glibc_cxx_floatn_2): Handle #elif the same as #if.\n+\t(glibc_cxx_floatn_4): New.\n+\t* fixincl.x: Regenerated.\n+\t* tests/base/bits/floatn.h: Regenerated.\n+\n 2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* inclhack.def (glibc_cxx_floatn_1, glibc_cxx_floatn_2,"}, {"sha": "5086463eba300327810e76d63a63f6e7229142ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,129 @@\n+2022-10-07  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* tree-cfg.cc (assign_discriminators): Set discriminators for call stmts\n+\ton the same line within the same basic block.\n+\n+2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR tree-optimization/101836\n+\t* tree-object-size.cc (addr_object_size): Use array_at_struct_end_p\n+\tto determine a flexible array member reference.\n+\n+2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* doc/extend.texi: Document strict_flex_array attribute.\n+\t* doc/invoke.texi: Document -fstrict-flex-arrays[=n] option.\n+\t* print-tree.cc (print_node): Print new bit decl_not_flexarray.\n+\t* tree-core.h (struct tree_decl_common): New bit field\n+\tdecl_not_flexarray.\n+\t* tree-streamer-in.cc (unpack_ts_decl_common_value_fields): Stream\n+\tin new bit decl_not_flexarray.\n+\t* tree-streamer-out.cc (pack_ts_decl_common_value_fields): Stream\n+\tout new bit decl_not_flexarray.\n+\t* tree.cc (array_at_struct_end_p): Update it with the new bit field\n+\tdecl_not_flexarray.\n+\t* tree.h (DECL_NOT_FLEXARRAY): New flag.\n+\n+2022-10-07  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks/_vxworks-versions.h: Use OS specific\n+\tpaths in #include of version.h.\n+\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* opts.cc (finish_options): Print sorry message only\n+\tfor -flive-patching=inline-only-static.\n+\n+2022-10-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* gimplify.cc (gimplify_modify_expr_rhs): Don't optimize\n+\tx = *(A*)&<expr> to x = <expr> for a TREE_ADDRESSABLE type.\n+\n+2022-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107153\n+\t* tree-cfg.cc (gimple_duplicate_sese_tail): Do not update\n+\tSSA form here.\n+\t* tree-parloops.cc (gen_parallel_loop): Update SSA form\n+\tafter to-exit-first transform, no PHI insertion is necessary.\n+\t(pass_parallelize_loops::execute): Force re-write of the\n+\tvirtual operand SSA web.\n+\n+2022-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* value-range.cc (irange::irange_contains_p): Fix comment typo.\n+\n+2022-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* function.cc (thread_prologue_and_epilogue_insns): Update only\n+\tentry and exit blocks when not optimizing.  Remove dead statement.\n+\n+2022-10-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::irange_set): Convert nonzero mask to\n+\ttree.\n+\t(irange::irange_set_anti_range): Same.\n+\t(irange::set): Same.\n+\t(irange::verify_range): Same.\n+\t(irange::contains_p): Same.\n+\t(irange::invert): Same.\n+\t(irange::set_range_from_nonzero_bits): Same.\n+\t(irange::set_nonzero_bits): Same.\n+\t(mask_to_wi): Same.\n+\t(irange::intersect_nonzero_bits): Same.\n+\t(irange::union_nonzero_bits): Same.\n+\t* value-range.h (irange::varying_compatible_p): Same.\n+\t(gt_ggc_mx): Same.\n+\t(gt_pch_nx): Same.\n+\t(irange::set_undefined): Same.\n+\t(irange::set_varying): Same.\n+\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386-protos.h (ix86_binary_operator_ok): Add array\n+\t  size to function parameter.\n+\t(ix86_unary_operator_ok): Likewise.\n+\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* auto-profile.cc (get_inline_stack): Remove unused variable.\n+\n+2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ipa-prop.h (ipa_constant_data): Fix comment typo.\n+\t* value-range.cc (irange::irange_contains_p): Likewise.\n+\t* value-relation.cc (dom_oracle::set_one_relation): Likewise.\n+\t* gimple-predicate-analysis.cc (predicate::simplify_4): Likewise.\n+\t* tree-inline.cc (remap_ssa_name): Likewise.\n+\n+2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* attribs.h (is_attribute_namespace_p): New inline function.\n+\t(lookup_attribute): Document meaning of ATTR_NS equal to \"\".\n+\t* attribs.cc (remove_attribute): Use is_attribute_namespace_p.\n+\t(private_lookup_attribute): For ATTR_NS \"\" match either standard\n+\tattribute or \"gnu\" namespace one.\n+\n+2022-10-07  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h (DWARF_VERSION_DEFAULT): Adjust from\n+\t4 to 3 for VxWorks >= 7.\n+\n+2022-10-07  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* defaults.h (DWARF_DEFAULT_VERSION): Define if not\n+\tdefined already.\n+\t* common.opt (gdwarf-): Use it.\n+\t* doc/tm.texi.in (DWARF_DEFAULT_VERSION): Document.\n+\t* doc/tm.texi: Update accordingly.\n+\t* config/vxworks.h (DWARF_DEFAULT_VERSION): Redefine.\n+\t* config/vxworks.cc: Remove code setting dwarf_version, now\n+\thandled by the DWARF_DEFAULT_VERSION redefinition.\n+\n+2022-10-07  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* ginclude/stddef.h: #undef offsetof before #define.\n+\n 2022-10-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/107170"}, {"sha": "ab0c096551c572af303ffb85352d378a8fc4c0ce", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1 +1 @@\n-20221007\n+20221008"}, {"sha": "33477daae99202650e2c2abd40f995235438b620", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,12 @@\n+2022-10-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105783\n+\t* region-model.cc (selftest::get_bit): New function.\n+\t(selftest::test_bits_within_svalue_folding): New.\n+\t(selfftest::analyzer_region_model_cc_tests): Call it.\n+\t* svalue.cc (constant_svalue::maybe_fold_bits_within): Handle the\n+\tcase of extracting a single bit.\n+\n 2022-10-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107158"}, {"sha": "7bae1d543b341222d5c0163fd6a22dd1587e81d6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,20 @@\n+2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* c-attribs.cc (handle_strict_flex_array_attribute): New function.\n+\t(c_common_attribute_table): New item for strict_flex_array.\n+\t* c.opt: (fstrict-flex-arrays): New option.\n+\t(fstrict-flex-arrays=): New option.\n+\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* name-hint.h: Use std::move.\n+\n+2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.cc (attribute_fallthrough_p): Lookup fallthrough attribute\n+\tonly in gnu namespace or as standard attribute, treat fallthrough\n+\tattributes in other namespaces like any other unknown attribute.\n+\n 2022-10-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.cc (c_common_reswords): Mark typeof as D_EXT11.  Add"}, {"sha": "a25e1b454c330e90abdbc5c5955225ddf315a0e1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,13 @@\n+2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* c-decl.cc (flexible_array_member_type_p): New function.\n+\t(one_element_array_type_p): Likewise.\n+\t(zero_length_array_type_p): Likewise.\n+\t(add_flexible_array_elts_to_size): Call new utility\n+\troutine flexible_array_member_type_p.\n+\t(is_flexible_array_member_p): New function.\n+\t(finish_struct): Set the new DECL_NOT_FLEXARRAY flag.\n+\n 2022-10-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.cc (c_parse_init): Add D_EXT11 to mask if flag_no_asm"}, {"sha": "3aa9f032e285354e5abc3df564e6be743c599be2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,55 @@\n+2022-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107085\n+\t* call.cc (conv_binds_ref_to_temporary): New.\n+\t(ref_conv_binds_directly): Rename to...\n+\t(ref_conv_binds_to_temporary): ...this.  Use\n+\tconv_binds_ref_to_temporary.\n+\t* cp-tree.h (ref_conv_binds_directly): Rename to...\n+\t(ref_conv_binds_to_temporary): ...this.\n+\t* method.cc (ref_xes_from_temporary): Use ref_conv_binds_to_temporary.\n+\t* parser.cc (warn_for_range_copy): Likewise.\n+\n+2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* module.cc (trees_out::core_bools): Stream out new bit\n+\tdecl_not_flexarray.\n+\t(trees_in::core_bools): Stream in new bit decl_not_flexarray.\n+\n+2022-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* module.cc (trees_out::mark_class_def): Guard against\n+\tDECL_BIT_FIELD_REPRESENTATIVE not being a decl.\n+\n+2022-10-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.cc (expand_default_init): Also push the INIT_EXPR inside a\n+\tCLEANUP_POINT_EXPR.\n+\n+2022-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104433\n+\t* module.cc (trees_out::core_bools): Don't override\n+\tDECL_EXTERNAL to true for static variables from an inline\n+\tfunction.\n+\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* module.cc (enum module_state_counts): Use array size.\n+\t* name-lookup.cc (class namespace_limit_reached): Likewise.\n+\t(class module_state): Move up in the file.\n+\n+2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_check_std_attribute): Only do checks if\n+\tattribute is a standard attribute or in gnu namespace and only\n+\tlookup other attributes in those namespaces.\n+\t* cp-gimplify.cc (lookup_hotness_attribute): Adjust function comment.\n+\tOnly return true for standard attribute or gnu namespace attribute.\n+\t(remove_hotness_attribute): Only remove hotness attributes when\n+\tthey are standard or in gnu namespace, implement it in a single\n+\tloop rather than former 4 now 8 remove_attribute calls.\n+\n 2022-10-06  Jason Merrill  <jason@redhat.com>\n \n \t* coroutines.cc (expand_one_await_expression): Change conversion"}, {"sha": "a83c3c7a7418ca2ce9ca11af708631fbe8dd53ee", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,8 @@\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* objc-gnu-runtime-abi-01.cc (generate_static_references):\n+\tRemove unused variable.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* objc-act.h (objc_get_sarif_source_language): New decl."}, {"sha": "af8fc3f7e01c4b2eca2641f709673f7b02abb85b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,62 @@\n+2022-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107085\n+\t* g++.dg/ext/reference_constructs_from_temporary1.C: Adjust expected\n+\tresult.\n+\t* g++.dg/ext/reference_converts_from_temporary1.C: Likewise.\n+\t* g++.dg/cpp0x/elision4.C: New test.\n+\n+2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\tPR tree-optimization/101836\n+\t* gcc.dg/pr101836.c: New test.\n+\t* gcc.dg/pr101836_1.c: New test.\n+\t* gcc.dg/pr101836_2.c: New test.\n+\t* gcc.dg/pr101836_3.c: New test.\n+\t* gcc.dg/pr101836_4.c: New test.\n+\t* gcc.dg/pr101836_5.c: New test.\n+\t* gcc.dg/strict-flex-array-2.c: New test.\n+\t* gcc.dg/strict-flex-array-3.c: New test.\n+\n+2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* g++.dg/strict-flex-array-1.C: New test.\n+\t* gcc.dg/strict-flex-array-1.c: New test.\n+\n+2022-10-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105783\n+\t* gcc.dg/analyzer/pr105783.c: New test.\n+\n+2022-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/modules/bfield-3.H: New test.\n+\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/live-patching-2.c: Update scanned pattern.\n+\t* gcc.dg/live-patching-5.c: New test.\n+\n+2022-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104433\n+\t* g++.dg/modules/static-2_a.H: New test.\n+\t* g++.dg/modules/static-2_b.C: New test.\n+\n+2022-10-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/init/elide9.C: New test.\n+\n+2022-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107153\n+\t* gcc.dg/autopar/pr107153.c: New testcase.\n+\n+2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp1z/fallthrough2.C: New test.\n+\t* g++.dg/cpp2a/attr-likely7.C: New test.\n+\n 2022-10-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/107170"}, {"sha": "71e5c079fa818d4c2abeaf9fb80e7f7a72d4e5cf", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,7 @@\n+2022-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* dpd/decimal64.c (decDigitsToDPD): Remove unused variable.\n+\n 2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n \n \t* configure: Regenerate."}, {"sha": "2c0d46b1126c6175648677a03e1991aca7166c7e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,9 @@\n+2022-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-demangle.c (d_print_comp_inner): Allow parameter packs\n+\tin a lambda signature.\n+\t* testsuite/demangle-expected: Add tests.\n+\n 2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/106652"}, {"sha": "68f9a1d877dbb7a5d8704c7880d5f5d14a206683", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6c33e2ec0d75958d3f19089519034e8f96a30/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6c33e2ec0d75958d3f19089519034e8f96a30/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9ff6c33e2ec0d75958d3f19089519034e8f96a30", "patch": "@@ -1,3 +1,21 @@\n+2022-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_HOSTED): Add libstdcxx-hosted\n+\tenable arg as an alias for hosted-libstdcxx enable arg.\n+\t* configure: Regenerate.\n+\n+2022-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_function.h: Include <new> but do not include\n+\t<bits/stl_function.h>.\n+\t* include/std/functional: Do not include <new>.\n+\n+2022-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/intro.xml: Add role=\"bold\" attribute to\n+\temphasis elements for issue titles.\n+\t* doc/html/manual/bugs.html: Regenerate.\n+\n 2022-10-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/Makefile.in: Regenerate."}]}