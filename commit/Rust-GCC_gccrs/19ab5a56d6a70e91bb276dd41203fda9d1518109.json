{"sha": "19ab5a56d6a70e91bb276dd41203fda9d1518109", "node_id": "C_kwDOANBUbNoAKDE5YWI1YTU2ZDZhNzBlOTFiYjI3NmRkNDEyMDNmZGE5ZDE1MTgxMDk", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-08-10T17:33:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-01T06:13:36Z"}, "message": "[Ada] Improve error message for .ali file version mismatch\n\ngcc/ada/\n\n\t* bcheck.adb (Check_Versions): Add support for the case where\n\tthe .ali file contains both a primary and a secondary version\n\tnumber, as in \"GNAT Lib v22.20210809\".", "tree": {"sha": "ff7c9ec16dd766ee11f44e71a8cac342c5d960e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7c9ec16dd766ee11f44e71a8cac342c5d960e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19ab5a56d6a70e91bb276dd41203fda9d1518109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ab5a56d6a70e91bb276dd41203fda9d1518109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ab5a56d6a70e91bb276dd41203fda9d1518109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ab5a56d6a70e91bb276dd41203fda9d1518109/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4648eef474d7827b9ccf948ad4de128783e171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4648eef474d7827b9ccf948ad4de128783e171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4648eef474d7827b9ccf948ad4de128783e171"}], "stats": {"total": 126, "additions": 92, "deletions": 34}, "files": [{"sha": "38bf2c2d6acf3fd2363a74c96c42c32eeba3f2f5", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 92, "deletions": 34, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ab5a56d6a70e91bb276dd41203fda9d1518109/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ab5a56d6a70e91bb276dd41203fda9d1518109/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=19ab5a56d6a70e91bb276dd41203fda9d1518109", "patch": "@@ -1325,60 +1325,105 @@ package body Bcheck is\n            or else ALIs.Table (A).Ver          (1 .. VL) /=\n                    ALIs.Table (ALIs.First).Ver (1 .. VL)\n          then\n+            --  Version mismatch found; generate error message.\n+\n             declare\n-               No_Version : constant Int := -1;\n+               use Gnatvsn;\n+\n+               Prefix : constant String :=\n+                 Verbose_Library_Version\n+                   (1 .. Verbose_Library_Version'Length\n+                           - Library_Version'Length);\n+\n+               type ALI_Version is record\n+                  Primary, Secondary : Int range -1 .. Int'Last;\n+               end record;\n+\n+               No_Version : constant ALI_Version := (-1, -1);\n \n-               function Extract_Version (S : String) return Int;\n-               --  Attempts to extract and return a nonnegative library\n-               --  version number from the given string; if unsuccessful,\n+               function Remove_Prefix (S : String) return String is\n+                 (S (S'First + Prefix'Length .. S'Last));\n+\n+               function Extract_Version (S : String) return ALI_Version;\n+               --  Attempts to extract and return a pair of nonnegative library\n+               --  version numbers from the given string; if unsuccessful,\n                --  then returns No_Version.\n \n                ---------------------\n                -- Extract_Version --\n                ---------------------\n \n-               function Extract_Version (S : String) return Int is\n-                  use Gnatvsn;\n-\n-                  Prefix : constant String :=\n-                     Verbose_Library_Version\n-                       (1 .. Verbose_Library_Version'Length\n-                               - Library_Version'Length);\n-               begin\n+               function Extract_Version (S : String) return ALI_Version is\n                   pragma Assert (S'First = 1);\n \n+                  function Int_Value (Img : String) return Int;\n+                  --  Using Int'Value leads to complications in\n+                  --  building the binder, so DIY.\n+\n+                  ---------------\n+                  -- Int_Value --\n+                  ---------------\n+\n+                  function Int_Value (Img : String) return Int is\n+                     Result : Nat := 0;\n+                  begin\n+                     if Img'Length in 1 .. 9\n+                       and then (for all C of Img => C in '0' .. '9')\n+                     then\n+                        for C of Img loop\n+                           Result := (10 * Result) +\n+                             (Character'Pos (C) - Character'Pos ('0'));\n+                        end loop;\n+                        return Result;\n+                     else\n+                        return -1;\n+                     end if;\n+                  end Int_Value;\n+\n+               begin\n                   if S'Length > Prefix'Length\n-                     and then S (1 .. Prefix'Length) = Prefix\n+                    and then S (1 .. Prefix'Length) = Prefix\n                   then\n                      declare\n-                        Suffix : constant String :=\n-                          S (1 + Prefix'Length .. S'Last);\n-\n-                        Result : Nat := 0;\n+                        Suffix    : constant String := Remove_Prefix (S);\n+                        Dot_Found : Boolean := False;\n+                        Primary, Secondary : Int;\n                      begin\n-                        if Suffix'Length < 10\n-                          and then (for all C of Suffix => C in '0' .. '9')\n-                        then\n-                           --  Using Int'Value leads to complications in\n-                           --  building the binder, so DIY.\n+                        for Dot_Index in Suffix'Range loop\n+                           if Suffix (Dot_Index) = '.' then\n+                              Dot_Found := True;\n+                              Primary :=\n+                                Int_Value (Suffix (Suffix'First\n+                                                   .. Dot_Index - 1));\n+                              Secondary :=\n+                                Int_Value (Suffix (Dot_Index + 1\n+                                                   .. Suffix'Last));\n+                              exit;\n+                           end if;\n+                        end loop;\n \n-                           for C of Suffix loop\n-                              Result := (10 * Result) +\n-                                (Character'Pos (C) - Character'Pos ('0'));\n-                           end loop;\n-                           return Result;\n+                        if not Dot_Found then\n+                           Primary   := Int_Value (Suffix);\n+                           Secondary := 0;\n+                        end if;\n+\n+                        if (Primary /= -1) and (Secondary /= -1) then\n+                           return (Primary   => Primary,\n+                                   Secondary => Secondary);\n                         end if;\n                      end;\n                   end if;\n                   return No_Version;\n                end Extract_Version;\n \n+               --  Local constants\n+\n                V1_Text : constant String :=\n                  ALIs.Table (A).Ver (1 .. ALIs.Table (A).Ver_Len);\n                V2_Text : constant String :=\n                  ALIs.Table (ALIs.First).Ver (1 .. VL);\n-               V1      : constant Int := Extract_Version (V1_Text);\n-               V2      : constant Int := Extract_Version (V2_Text);\n+               V1      : constant ALI_Version := Extract_Version (V1_Text);\n+               V2      : constant ALI_Version := Extract_Version (V2_Text);\n \n                Include_Version_Numbers_In_Message : constant Boolean :=\n                  (V1 /= V2) and (V1 /= No_Version) and (V2 /= No_Version);\n@@ -1387,11 +1432,24 @@ package body Bcheck is\n                Error_Msg_File_2 := ALIs.Table (ALIs.First).Sfile;\n \n                if Include_Version_Numbers_In_Message then\n-                  Error_Msg_Nat_1 := V1;\n-                  Error_Msg_Nat_2 := V2;\n-                  Consistency_Error_Msg\n-                    (\"{ and { compiled with different GNAT versions\"\n-                     & \", v# and v#\");\n+                  if V1.Secondary = V2.Secondary then\n+                     --  Excluding equal secondary values from error\n+                     --  message text matters for generating reproducible\n+                     --  regression test outputs.\n+\n+                     Error_Msg_Nat_1 := V1.Primary;\n+                     Error_Msg_Nat_2 := V2.Primary;\n+                     Consistency_Error_Msg\n+                       (\"{ and { compiled with different GNAT versions\"\n+                        & \", v# and v#\");\n+                  else\n+                     Consistency_Error_Msg\n+                       (\"{ and { compiled with different GNAT versions\"\n+                        & \", v\"\n+                        & Remove_Prefix (V1_Text)\n+                        & \" and v\"\n+                        & Remove_Prefix (V2_Text));\n+                  end if;\n                else\n                   Consistency_Error_Msg\n                     (\"{ and { compiled with different GNAT versions\");"}]}