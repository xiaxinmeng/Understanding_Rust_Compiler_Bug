{"sha": "e69e162462c6fb3d886460d96ce649207b7c9e3f", "node_id": "C_kwDOANBUbNoAKGU2OWUxNjI0NjJjNmZiM2Q4ODY0NjBkOTZjZTY0OTIwN2I3YzllM2Y", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-25T16:48:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-25T16:51:26Z"}, "message": "Support inference of generic parameters on paths behind reference's\n\nWe used a hack in the parser to turn simple cases such as &Foo(..) into:\n\n  BorrowExpr\n    CallExpr(\n      IdentifierExpr + <Argument-expressions>))\n\nThe IdentifierExpr here is parsed as a PathExpression but to simplify\nthings at the time it seemed logic to see these as identifier expressions\nbut this is actually a Path and we need to be careful about generic\narguments here. Identifiers are simply identifiers and must not be changed\nor coherence of inference variables will become a jumble of inference\nvariables trying to infer one another inside purely generic code.\n\nThis patch leaves the PathInExpressions as Path's instead of trying to be\nclever and turn them into identifiers.\n\nFixes #1165", "tree": {"sha": "026bc2cd43e47457e87e03849a5148177e7d739a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/026bc2cd43e47457e87e03849a5148177e7d739a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e69e162462c6fb3d886460d96ce649207b7c9e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69e162462c6fb3d886460d96ce649207b7c9e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69e162462c6fb3d886460d96ce649207b7c9e3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69e162462c6fb3d886460d96ce649207b7c9e3f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "6715a778233f6789df0ebc037375ba84bc4652ff", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69e162462c6fb3d886460d96ce649207b7c9e3f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69e162462c6fb3d886460d96ce649207b7c9e3f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=e69e162462c6fb3d886460d96ce649207b7c9e3f", "patch": "@@ -12591,16 +12591,6 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n \t      // struct/enum expr struct\n \t      if (!restrictions.can_be_struct_expr && !not_a_block)\n \t\t{\n-\t\t  // assume path is returned if not single segment\n-\t\t  if (path.is_single_segment ())\n-\t\t    {\n-\t\t      // have to return an identifier expression or something\n-\t\t      /* HACK: may have to become permanent, but this is my\n-\t\t       * current identifier expression */\n-\t\t      return std::unique_ptr<AST::IdentifierExpr> (\n-\t\t\tnew AST::IdentifierExpr (tok->get_str (), {},\n-\t\t\t\t\t\t tok->get_locus ()));\n-\t\t    }\n \t\t  // HACK: add outer attrs to path\n \t\t  path.set_outer_attrs (std::move (outer_attrs));\n \t\t  return std::unique_ptr<AST::PathInExpression> (\n@@ -12613,16 +12603,6 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n \t    // struct/enum expr tuple\n \t    if (!restrictions.can_be_struct_expr)\n \t      {\n-\t\t// assume path is returned if not single segment\n-\t\tif (path.is_single_segment ())\n-\t\t  {\n-\t\t    // have to return an identifier expression or something, idk\n-\t\t    /* HACK: may have to become permanent, but this is my\n-\t\t     * current identifier expression */\n-\t\t    return std::unique_ptr<AST::IdentifierExpr> (\n-\t\t      new AST::IdentifierExpr (tok->get_str (), {},\n-\t\t\t\t\t       tok->get_locus ()));\n-\t\t  }\n \t\t// HACK: add outer attrs to path\n \t\tpath.set_outer_attrs (std::move (outer_attrs));\n \t\treturn std::unique_ptr<AST::PathInExpression> ("}, {"sha": "f5889698d70e5a8aad2cca17c6e113dd7cc438f6", "filename": "gcc/testsuite/rust/compile/issue-1165.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69e162462c6fb3d886460d96ce649207b7c9e3f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69e162462c6fb3d886460d96ce649207b7c9e3f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs?ref=e69e162462c6fb3d886460d96ce649207b7c9e3f", "patch": "@@ -0,0 +1,5 @@\n+struct Foo<T>(T);\n+\n+fn main() {\n+    &Foo(123);\n+}"}]}