{"sha": "b4213325af3b16b1295ea1157a95deb4ef5dd61b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyMTMzMjVhZjNiMTZiMTI5NWVhMTE1N2E5NWRlYjRlZjVkZDYxYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-06-29T09:44:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-06-29T09:44:08Z"}, "message": "rtl.h: Update comment about special gen_rtx variants.\n\n\t* rtl.h: Update comment about special gen_rtx variants.\n\t* emit-rtl.c (gen_rtx): Handle MEMs using gen_rtx_MEM.\n\nFrom-SVN: r20789", "tree": {"sha": "1c30692654c730df4cdb09e5ec5da13cb9d0766d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c30692654c730df4cdb09e5ec5da13cb9d0766d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4213325af3b16b1295ea1157a95deb4ef5dd61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4213325af3b16b1295ea1157a95deb4ef5dd61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4213325af3b16b1295ea1157a95deb4ef5dd61b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4213325af3b16b1295ea1157a95deb4ef5dd61b/comments", "author": null, "committer": null, "parents": [{"sha": "f6b58e7decb2ec1572367cb9be2754d6e09172b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b58e7decb2ec1572367cb9be2754d6e09172b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b58e7decb2ec1572367cb9be2754d6e09172b4"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "fdf02373e5a17775006c26f984a4543ca749f791", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4213325af3b16b1295ea1157a95deb4ef5dd61b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4213325af3b16b1295ea1157a95deb4ef5dd61b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4213325af3b16b1295ea1157a95deb4ef5dd61b", "patch": "@@ -1,3 +1,8 @@\n+Mon Jun 29 09:44:24 1998  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* rtl.h: Update comment about special gen_rtx variants.\n+\t* emit-rtl.c (gen_rtx): Handle MEMs using gen_rtx_MEM.\n+\n Sun Jun 28 20:58:51 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* choose-temp.c (choose_temp_base): Restore original variant of"}, {"sha": "63f0d823afe52921d59f6d0174502be15c3aa8bf", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4213325af3b16b1295ea1157a95deb4ef5dd61b/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4213325af3b16b1295ea1157a95deb4ef5dd61b/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b4213325af3b16b1295ea1157a95deb4ef5dd61b", "patch": "@@ -365,6 +365,8 @@ gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n     rt_val = gen_rtx_CONST_INT (mode, va_arg (p, HOST_WIDE_INT));\n   else if (code == REG)\n     rt_val = gen_rtx_REG (mode, va_arg (p, int));\n+  else if (code == MEM)\n+    rt_val = gen_rtx_MEM (mode, va_arg (p, rtx));\n   else\n     {\n       rt_val = rtx_alloc (code);\t/* Allocate the storage space.  */"}, {"sha": "e7bc80472ff186b22b301d91fe23d24415ca80f7", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4213325af3b16b1295ea1157a95deb4ef5dd61b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4213325af3b16b1295ea1157a95deb4ef5dd61b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b4213325af3b16b1295ea1157a95deb4ef5dd61b", "patch": "@@ -1070,7 +1070,8 @@ extern rtx static_chain_incoming_rtx;\n \n /* There are some RTL codes that require special attention; the\n    generation functions included above do the raw handling.  If you\n-   add to this list, modify special_rtx in gengenrtl.c as well.  */\n+   add to this list, modify special_rtx in gengenrtl.c as well.  You\n+   should also modify gen_rtx to use the special function.  */\n \n extern rtx gen_rtx_CONST_INT PROTO((enum machine_mode, HOST_WIDE_INT));\n extern rtx gen_rtx_REG PROTO((enum machine_mode, int));"}]}