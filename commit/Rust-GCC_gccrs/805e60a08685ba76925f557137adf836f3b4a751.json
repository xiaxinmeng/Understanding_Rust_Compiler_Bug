{"sha": "805e60a08685ba76925f557137adf836f3b4a751", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA1ZTYwYTA4Njg1YmE3NjkyNWY1NTcxMzdhZGY4MzZmM2I0YTc1MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-05-05T16:22:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-05T16:22:16Z"}, "message": "re PR ada/48844 (ICE on assignment of aggregate with discriminated record type)\n\n\tPR ada/48844\n\t* gcc-interface/gigi.h (get_variant_part): Declare.\n\t* gcc-interface/decl.c (get_variant_part): Make global.\n\t* gcc-interface/utils2.c (find_common_type): Do not return T1 if the\n\ttypes have the same constant size, are record types and T1 has a\n\tvariant part while T2 doesn't.\n\nFrom-SVN: r173442", "tree": {"sha": "9e62d25cb4781804834463a8fd123bbf1c17f2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e62d25cb4781804834463a8fd123bbf1c17f2bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/805e60a08685ba76925f557137adf836f3b4a751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805e60a08685ba76925f557137adf836f3b4a751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805e60a08685ba76925f557137adf836f3b4a751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805e60a08685ba76925f557137adf836f3b4a751/comments", "author": null, "committer": null, "parents": [{"sha": "4eec64ff1d3b88cce8af5fe81787fd7e2e1cb371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eec64ff1d3b88cce8af5fe81787fd7e2e1cb371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eec64ff1d3b88cce8af5fe81787fd7e2e1cb371"}], "stats": {"total": 121, "additions": 114, "deletions": 7}, "files": [{"sha": "dbc06473ebb518be62483306545a9d529b171ec6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -1,3 +1,12 @@\n+2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/48844\n+\t* gcc-interface/gigi.h (get_variant_part): Declare.\n+\t* gcc-interface/decl.c (get_variant_part): Make global.\n+\t* gcc-interface/utils2.c (find_common_type): Do not return T1 if the\n+\ttypes have the same constant size, are record types and T1 has a\n+\tvariant part while T2 doesn't.\n+\n 2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (begin_subprog_body): Do not call"}, {"sha": "b5406e9c9b84d843bde59c2136f8079cb36b266c", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -177,7 +177,6 @@ static void check_ok_for_atomic (tree, Entity_Id, bool);\n static tree create_field_decl_from (tree, tree, tree, tree, tree,\n \t\t\t\t    VEC(subst_pair,heap) *);\n static tree get_rep_part (tree);\n-static tree get_variant_part (tree);\n static tree create_variant_part_from (tree, VEC(variant_desc,heap) *, tree,\n \t\t\t\t      tree, VEC(subst_pair,heap) *);\n static void copy_and_substitute_in_size (tree, tree, VEC(subst_pair,heap) *);\n@@ -8509,7 +8508,7 @@ get_rep_part (tree record_type)\n \n /* Return the variant part of RECORD_TYPE, if any.  Otherwise return NULL.  */\n \n-static tree\n+tree\n get_variant_part (tree record_type)\n {\n   tree field;"}, {"sha": "8c69e751a3314e432dd2fc88a34c41d186bb3131", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -150,6 +150,9 @@ extern tree choices_to_gnu (tree operand, Node_Id choices);\n extern void annotate_object (Entity_Id gnat_entity, tree gnu_type, tree size,\n \t\t\t     bool by_ref, bool by_double_ref);\n \n+/* Return the variant part of RECORD_TYPE, if any.  Otherwise return NULL.  */\n+extern tree get_variant_part (tree record_type);\n+\n /* Given a type T, a FIELD_DECL F, and a replacement value R, return a new\n    type with all size expressions that contain F updated by replacing F\n    with R.  If F is NULL_TREE, always make a new RECORD_TYPE, even if"}, {"sha": "db190327122b7af6971e4bba7226a09e5e7d3fa5", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -193,15 +193,21 @@ find_common_type (tree t1, tree t2)\n      calling into build_binary_op), some others are really expected and we\n      have to be careful.  */\n \n-  /* We must prevent writing more than what the target may hold if this is for\n+  /* We must avoid writing more than what the target can hold if this is for\n      an assignment and the case of tagged types is handled in build_binary_op\n-     so use the lhs type if it is known to be smaller, or of constant size and\n-     the rhs type is not, whatever the modes.  We also force t1 in case of\n+     so we use the lhs type if it is known to be smaller or of constant size\n+     and the rhs type is not, whatever the modes.  We also force t1 in case of\n      constant size equality to minimize occurrences of view conversions on the\n-     lhs of assignments.  */\n+     lhs of an assignment, except for the case of record types with a variant\n+     part on the lhs but not on the rhs to make the conversion simpler.  */\n   if (TREE_CONSTANT (TYPE_SIZE (t1))\n       && (!TREE_CONSTANT (TYPE_SIZE (t2))\n-          || !tree_int_cst_lt (TYPE_SIZE (t2), TYPE_SIZE (t1))))\n+\t  || tree_int_cst_lt (TYPE_SIZE (t1), TYPE_SIZE (t2))\n+\t  || (TYPE_SIZE (t1) == TYPE_SIZE (t2)\n+\t      && !(TREE_CODE (t1) == RECORD_TYPE\n+\t\t   && TREE_CODE (t2) == RECORD_TYPE\n+\t\t   && get_variant_part (t1) != NULL_TREE\n+\t\t   && get_variant_part (t2) == NULL_TREE))))\n     return t1;\n \n   /* Otherwise, if the lhs type is non-BLKmode, use it.  Note that we know"}, {"sha": "0fe877fac3f34d8cb0e1b1d07b7bd3d2b4a368b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr29.ad[sb]: New test.\n+\t* gnat.dg/discr30.adb: Likewise.\n+\n 2011-05-05  Julian Brown  <julian@codesourcery.com>\n \n \t* gcc.target/arm/neon-vset_lanes8.c: New test."}, {"sha": "56047c9cf6eeb27926e6b006df7337397fa438a1", "filename": "gcc/testsuite/gnat.dg/discr29.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr29.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr29.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr29.adb?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -0,0 +1,8 @@\n+package body Discr29 is\n+\n+   procedure Proc (R : out Rec3) is\n+   begin\n+      R := (False, Tmp);\n+   end;\n+\n+end Discr29;"}, {"sha": "a205bc1e0dd5a66f8d114d694d10861eb8369952", "filename": "gcc/testsuite/gnat.dg/discr29.ads", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr29.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr29.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr29.ads?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+\n+package Discr29 is\n+\n+   type Rec1 is record\n+      I1 : Integer;\n+      I2 : Integer;\n+      I3 : Integer;\n+   end record;\n+\n+   type Rec2 is tagged record\n+      I1 : Integer;\n+      I2 : Integer;\n+   end record;\n+\n+   type Rec3 (D : Boolean) is record\n+      case D is\n+         when True =>  A : Rec1;\n+         when False => B : Rec2;\n+      end case;\n+   end record;\n+\n+   procedure Proc (R : out Rec3);\n+\n+   Tmp : Rec2;\n+\n+end Discr29;"}, {"sha": "b3bf10013b6be628cbfe625cc3f1f0aefb7effc9", "filename": "gcc/testsuite/gnat.dg/discr30.adb", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr30.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805e60a08685ba76925f557137adf836f3b4a751/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr30.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr30.adb?ref=805e60a08685ba76925f557137adf836f3b4a751", "patch": "@@ -0,0 +1,50 @@\n+-- PR ada/48844\n+-- Reported by Georg Bauhaus <bauhaus@futureapps.de> */\n+\n+-- { dg-do compile }\n+\n+procedure Discr30 is\n+\n+   generic\n+     type Source is private;\n+     type Target is private;\n+   function Conversion (S : Source) return Target;\n+\n+   function Conversion (S : Source) return Target is\n+      type Source_Wrapper is tagged record\n+         S : Source;\n+      end record;\n+      type Target_Wrapper is tagged record\n+         T : Target;\n+      end record;\n+\n+      type Selector is (Source_Field, Target_Field);\n+      type Magic (Sel : Selector := Target_Field) is record\n+         case Sel is\n+            when Source_Field => S : Source_Wrapper;\n+            when Target_Field => T : Target_Wrapper;\n+         end case;\n+      end record;\n+\n+      M : Magic;\n+\n+      function Convert (T : Target_Wrapper) return Target is\n+      begin\n+         M := (Sel => Source_Field, S => (S => S));\n+         return T.T;\n+      end Convert;\n+\n+   begin\n+      return Convert (M.T);\n+   end Conversion;\n+\n+   type Integer_Access is access all Integer;\n+\n+   I : aliased Integer;\n+   I_Access : Integer_Access := I'Access;\n+\n+   function Convert is new Conversion (Integer_Access, Integer);\n+\n+begin\n+   I := Convert (I_Access);\n+end;"}]}