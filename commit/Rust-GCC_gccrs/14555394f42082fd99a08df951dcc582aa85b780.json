{"sha": "14555394f42082fd99a08df951dcc582aa85b780", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1NTUzOTRmNDIwODJmZDk5YTA4ZGY5NTFkY2M1ODJhYTg1Yjc4MA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-03-13T12:55:38Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-03-13T12:55:38Z"}, "message": "[ARC] Handle complex PIC move patterns.\n\nfwprop step is placing in the REG_EQUIV notes constant pic unspecs\nexpressions.  Then, loop may use these notes for optimizations\nrezulting in complex patterns that are not supported by the current\nimplementation.\n\nThe patch adds handling of complex PIC addresses having MINUS or UNARY\noperations.\n\ngcc/\n2017-03-13  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_legitimize_pic_address): Handle PIC\n\texpressions with MINUS and UNARY ops.\n\ngcc/testsuite\n2017-03-13  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/pr9001090948.c: New file.\n\nFrom-SVN: r246087", "tree": {"sha": "ccf1113962d544a11955c333d4a591a72daa3b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccf1113962d544a11955c333d4a591a72daa3b44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14555394f42082fd99a08df951dcc582aa85b780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14555394f42082fd99a08df951dcc582aa85b780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14555394f42082fd99a08df951dcc582aa85b780", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14555394f42082fd99a08df951dcc582aa85b780/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16e93e4b0b1e9ab40689a755c64948b3716ad0c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e93e4b0b1e9ab40689a755c64948b3716ad0c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e93e4b0b1e9ab40689a755c64948b3716ad0c0"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "f6435046c13d1908730c744bd20d5dd7e104594a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14555394f42082fd99a08df951dcc582aa85b780/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14555394f42082fd99a08df951dcc582aa85b780/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14555394f42082fd99a08df951dcc582aa85b780", "patch": "@@ -1,3 +1,8 @@\n+2017-03-13  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_legitimize_pic_address): Handle PIC\n+\texpressions with MINUS and UNARY ops.\n+\n 2017-03-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/79911"}, {"sha": "23b7ea4fbd24a5062e166027a4f327c9c83249c2", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14555394f42082fd99a08df951dcc582aa85b780/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14555394f42082fd99a08df951dcc582aa85b780/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=14555394f42082fd99a08df951dcc582aa85b780", "patch": "@@ -4900,8 +4900,55 @@ arc_legitimize_pic_address (rtx orig, rtx oldx)\n \t      /* Check that the unspec is one of the ones we generate?  */\n \t      return orig;\n \t    }\n+\t  /* fwprop is placing in the REG_EQUIV notes constant pic\n+\t     unspecs expressions.  Then, loop may use these notes for\n+\t     optimizations resulting in complex patterns that are not\n+\t     supported by the current implementation. The following\n+\t     two if-cases are simplifying the complex patters to\n+\t     simpler ones.  */\n+\t  else if (GET_CODE (addr) == MINUS)\n+\t    {\n+\t      rtx op0 = XEXP (addr, 0);\n+\t      rtx op1 = XEXP (addr, 1);\n+\t      gcc_assert (oldx);\n+\t      gcc_assert (GET_CODE (op1) == UNSPEC);\n+\n+\t      emit_move_insn (oldx,\n+\t\t\t      gen_rtx_CONST (SImode,\n+\t\t\t\t\t     arc_legitimize_pic_address (op1,\n+\t\t\t\t\t\t\t\t\t NULL_RTX)));\n+\t      emit_insn (gen_rtx_SET (oldx, gen_rtx_MINUS (SImode, op0, oldx)));\n+\t      return oldx;\n+\n+\t    }\n+\t  else if (GET_CODE (addr) != PLUS)\n+\t    {\n+\t      rtx tmp = XEXP (addr, 0);\n+\t      enum rtx_code code = GET_CODE (addr);\n+\n+\t      /* It only works for UNARY operations.  */\n+\t      gcc_assert (UNARY_P (addr));\n+\t      gcc_assert (GET_CODE (tmp) == UNSPEC);\n+\t      gcc_assert (oldx);\n+\n+\t      emit_move_insn\n+\t\t(oldx,\n+\t\t gen_rtx_CONST (SImode,\n+\t\t\t\tarc_legitimize_pic_address (tmp,\n+\t\t\t\t\t\t\t    NULL_RTX)));\n+\n+\t      emit_insn (gen_rtx_SET (oldx,\n+\t\t\t\t      gen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t\t\t      oldx, const0_rtx)));\n+\n+\t      return oldx;\n+\t    }\n \t  else\n-\t    gcc_assert (GET_CODE (addr) == PLUS);\n+\t    {\n+\t      gcc_assert (GET_CODE (addr) == PLUS);\n+\t      if (GET_CODE (XEXP (addr, 0)) == UNSPEC)\n+\t\treturn orig;\n+\t    }\n \t}\n \n       if (GET_CODE (addr) == PLUS)"}, {"sha": "5b7b5c19894ea4c82ce570f05fb38be915d2a3fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14555394f42082fd99a08df951dcc582aa85b780/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14555394f42082fd99a08df951dcc582aa85b780/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14555394f42082fd99a08df951dcc582aa85b780", "patch": "@@ -1,3 +1,7 @@\n+2017-03-13  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* testsuite/gcc.target/arc/pr9001090948.c: New file.\n+\n 2017-03-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* lib/target-supports.exp (check_effective_target_broken_cplxf_arg):"}, {"sha": "103f4aee7ec526d2fda3628f8a8e3b4d637ac9ef", "filename": "gcc/testsuite/gcc.target/arc/pr9001090948.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14555394f42082fd99a08df951dcc582aa85b780/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9001090948.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14555394f42082fd99a08df951dcc582aa85b780/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9001090948.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9001090948.c?ref=14555394f42082fd99a08df951dcc582aa85b780", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"ARC600 doesn't support pic\" { arc6xx } } */\n+/* { dg-options \"-Os -fPIC\" } */\n+#include <stdio.h>\n+#include <string.h>\n+\n+char *\n+strip_trail (const char str[], size_t n)\n+{\n+  static char buf[1025];\n+  int j;\n+\n+  strncpy (buf, str, n);\n+  buf[n] = '\\0';\n+\n+  for (j = strlen (buf) - 1; j >= 0; j--)\n+    {\n+      if (buf[j] != ' ')\n+        break;\n+\n+      buf[j] = '\\0';\n+    }\n+\n+  return buf;\n+}"}]}