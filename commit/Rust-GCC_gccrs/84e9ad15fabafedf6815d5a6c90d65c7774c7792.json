{"sha": "84e9ad15fabafedf6815d5a6c90d65c7774c7792", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlOWFkMTVmYWJhZmVkZjY4MTVkNWE2YzkwZDY1Yzc3NzRjNzc5Mg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2006-07-04T03:35:48Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2006-07-04T03:35:48Z"}, "message": "re PR target/28207 (128-bit IBM long double misaligned on stack)\n\n\tPR target/28207\n\t* config/rs6000/rs6000.c (function_arg_boundary): Double-word align\n\t128-bit IBM long doubles for ABI_V4.\n\nFrom-SVN: r115170", "tree": {"sha": "662adc5cc3c412bfcd452889181b4776cf134b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/662adc5cc3c412bfcd452889181b4776cf134b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84e9ad15fabafedf6815d5a6c90d65c7774c7792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e9ad15fabafedf6815d5a6c90d65c7774c7792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e9ad15fabafedf6815d5a6c90d65c7774c7792", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e9ad15fabafedf6815d5a6c90d65c7774c7792/comments", "author": null, "committer": null, "parents": [{"sha": "60410f3ad211bbbf59b5a1b08f92e30b941b1814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60410f3ad211bbbf59b5a1b08f92e30b941b1814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60410f3ad211bbbf59b5a1b08f92e30b941b1814"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "dbc201e6f8966fa5164a96d5427e829dd195739b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e9ad15fabafedf6815d5a6c90d65c7774c7792/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e9ad15fabafedf6815d5a6c90d65c7774c7792/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84e9ad15fabafedf6815d5a6c90d65c7774c7792", "patch": "@@ -1,3 +1,9 @@\n+2006-07-04  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/28207\n+\t* config/rs6000/rs6000.c (function_arg_boundary): Double-word align\n+\t128-bit IBM long doubles for ABI_V4.\n+\n 2006-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.c (range_in_array_bounds_p): New predicate."}, {"sha": "a21261189aa9862a3ec8400a02c30b8bb3da10d6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e9ad15fabafedf6815d5a6c90d65c7774c7792/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e9ad15fabafedf6815d5a6c90d65c7774c7792/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=84e9ad15fabafedf6815d5a6c90d65c7774c7792", "patch": "@@ -4485,15 +4485,24 @@ function_arg_padding (enum machine_mode mode, tree type)\n    of an argument with the specified mode and type.  If it is not defined,\n    PARM_BOUNDARY is used for all arguments.\n \n-   V.4 wants long longs to be double word aligned.\n+   V.4 wants long longs and doubles to be double word aligned.  Just\n+   testing the mode size is a boneheaded way to do this as it means\n+   that other types such as complex int are also double word aligned.\n+   However, we're stuck with this because changing the ABI might break\n+   existing library interfaces.\n+\n    Doubleword align SPE vectors.\n    Quadword align Altivec vectors.\n    Quadword align large synthetic vector types.   */\n \n int\n function_arg_boundary (enum machine_mode mode, tree type)\n {\n-  if (DEFAULT_ABI == ABI_V4 && GET_MODE_SIZE (mode) == 8)\n+  if (DEFAULT_ABI == ABI_V4\n+      && (GET_MODE_SIZE (mode) == 8\n+\t  || (TARGET_HARD_FLOAT\n+\t      && TARGET_FPRS\n+\t      && mode == TFmode)))\n     return 64;\n   else if (SPE_VECTOR_MODE (mode)\n \t   || (type && TREE_CODE (type) == VECTOR_TYPE"}]}