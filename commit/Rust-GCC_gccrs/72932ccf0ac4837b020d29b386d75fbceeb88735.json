{"sha": "72932ccf0ac4837b020d29b386d75fbceeb88735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5MzJjY2YwYWM0ODM3YjAyMGQyOWIzODZkNzVmYmNlZWI4ODczNQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-08-29T20:25:57Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-08-29T20:25:57Z"}, "message": "re PR target/82015 (PowerPC should check if 2nd argument to __builtin_unpackv1ti and similar functions is 0 or 1)\n\n[gcc]\n2017-08-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/82015\n\t* config/rs6000/rs6000.c (rs6000_expand_binop_builtin): Insure\n\tthat the second argument of the built-in functions to unpack\n\t128-bit scalar types to 64-bit values is 0 or 1.  Change to use a\n\tswitch statement instead a lot of if statements.\n\t* config/rs6000/rs6000.md (unpack<mode>, FMOVE128_VSX iterator):\n\tAllow 64-bit values to be in Altivec registers as well as\n\ttraditional floating point registers.\n\t(pack<mode>, FMOVE128_VSX iterator): Likewise.\n\n[gcc/testsuite]\n2017-08-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/82015\n\t* gcc.target/powerpc/pr82015.c: New test.\n\nFrom-SVN: r251432", "tree": {"sha": "83508cc509acf557a3e02859101e0c4126a73132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83508cc509acf557a3e02859101e0c4126a73132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72932ccf0ac4837b020d29b386d75fbceeb88735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72932ccf0ac4837b020d29b386d75fbceeb88735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72932ccf0ac4837b020d29b386d75fbceeb88735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72932ccf0ac4837b020d29b386d75fbceeb88735/comments", "author": null, "committer": null, "parents": [{"sha": "10f61650f7620a86c7cd48468810082078a09457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f61650f7620a86c7cd48468810082078a09457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10f61650f7620a86c7cd48468810082078a09457"}], "stats": {"total": 101, "additions": 74, "deletions": 27}, "files": [{"sha": "b7cb4fea6b80f424ae77d47e1cbfd27c6423d6d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72932ccf0ac4837b020d29b386d75fbceeb88735", "patch": "@@ -1,3 +1,15 @@\n+2017-08-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/82015\n+\t* config/rs6000/rs6000.c (rs6000_expand_binop_builtin): Insure\n+\tthat the second argument of the built-in functions to unpack\n+\t128-bit scalar types to 64-bit values is 0 or 1.  Change to use a\n+\tswitch statement instead a lot of if statements.\n+\t* config/rs6000/rs6000.md (unpack<mode>, FMOVE128_VSX iterator):\n+\tAllow 64-bit values to be in Altivec registers as well as\n+\ttraditional floating point registers.\n+\t(pack<mode>, FMOVE128_VSX iterator): Likewise.\n+\n 2017-08-29  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* ira-costs.c (record_address_regs): Handle both operands of PLUS for"}, {"sha": "a55c65790ac6dbd15f19b25180b97708b8fa3834", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=72932ccf0ac4837b020d29b386d75fbceeb88735", "patch": "@@ -14001,14 +14001,17 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n     return const0_rtx;\n \n-  if (icode == CODE_FOR_altivec_vcfux\n-      || icode == CODE_FOR_altivec_vcfsx\n-      || icode == CODE_FOR_altivec_vctsxs\n-      || icode == CODE_FOR_altivec_vctuxs\n-      || icode == CODE_FOR_altivec_vspltb\n-      || icode == CODE_FOR_altivec_vsplth\n-      || icode == CODE_FOR_altivec_vspltw)\n+  switch (icode)\n     {\n+    default:\n+      break;\n+    case CODE_FOR_altivec_vcfux:\n+    case CODE_FOR_altivec_vcfsx:\n+    case CODE_FOR_altivec_vctsxs:\n+    case CODE_FOR_altivec_vctuxs:\n+    case CODE_FOR_altivec_vspltb:\n+    case CODE_FOR_altivec_vsplth:\n+    case CODE_FOR_altivec_vspltw:\n       /* Only allow 5-bit unsigned literals.  */\n       STRIP_NOPS (arg1);\n       if (TREE_CODE (arg1) != INTEGER_CST\n@@ -14017,16 +14020,15 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  error (\"argument 2 must be a 5-bit unsigned literal\");\n \t  return CONST0_RTX (tmode);\n \t}\n-    }\n-  else if (icode == CODE_FOR_dfptstsfi_eq_dd\n-      || icode == CODE_FOR_dfptstsfi_lt_dd\n-      || icode == CODE_FOR_dfptstsfi_gt_dd\n-      || icode == CODE_FOR_dfptstsfi_unordered_dd\n-      || icode == CODE_FOR_dfptstsfi_eq_td\n-      || icode == CODE_FOR_dfptstsfi_lt_td\n-      || icode == CODE_FOR_dfptstsfi_gt_td\n-      || icode == CODE_FOR_dfptstsfi_unordered_td)\n-    {\n+      break;\n+    case CODE_FOR_dfptstsfi_eq_dd:\n+    case CODE_FOR_dfptstsfi_lt_dd:\n+    case CODE_FOR_dfptstsfi_gt_dd:\n+    case CODE_FOR_dfptstsfi_unordered_dd:\n+    case CODE_FOR_dfptstsfi_eq_td:\n+    case CODE_FOR_dfptstsfi_lt_td:\n+    case CODE_FOR_dfptstsfi_gt_td:\n+    case CODE_FOR_dfptstsfi_unordered_td:\n       /* Only allow 6-bit unsigned literals.  */\n       STRIP_NOPS (arg0);\n       if (TREE_CODE (arg0) != INTEGER_CST\n@@ -14035,13 +14037,12 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  error (\"argument 1 must be a 6-bit unsigned literal\");\n \t  return CONST0_RTX (tmode);\n \t}\n-    }\n-  else if (icode == CODE_FOR_xststdcqp\n-\t   || icode == CODE_FOR_xststdcdp\n-\t   || icode == CODE_FOR_xststdcsp\n-\t   || icode == CODE_FOR_xvtstdcdp\n-\t   || icode == CODE_FOR_xvtstdcsp)\n-    {\n+      break;\n+    case CODE_FOR_xststdcqp:\n+    case CODE_FOR_xststdcdp:\n+    case CODE_FOR_xststdcsp:\n+    case CODE_FOR_xvtstdcdp:\n+    case CODE_FOR_xvtstdcsp:\n       /* Only allow 7-bit unsigned literals. */\n       STRIP_NOPS (arg1);\n       if (TREE_CODE (arg1) != INTEGER_CST\n@@ -14050,6 +14051,21 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  error (\"argument 2 must be a 7-bit unsigned literal\");\n \t  return CONST0_RTX (tmode);\n \t}\n+      break;\n+    case CODE_FOR_unpackv1ti:\n+    case CODE_FOR_unpackkf:\n+    case CODE_FOR_unpacktf:\n+    case CODE_FOR_unpackif:\n+    case CODE_FOR_unpacktd:\n+      /* Only allow 1-bit unsigned literals. */\n+      STRIP_NOPS (arg1);\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || !IN_RANGE (TREE_INT_CST_LOW (arg1), 0, 1))\n+\t{\n+\t  error (\"argument 2 must be a 1-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+      break;\n     }\n \n   if (target == 0"}, {"sha": "c0c392ce596f7ee834a811327b697072328172f1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=72932ccf0ac4837b020d29b386d75fbceeb88735", "patch": "@@ -14165,7 +14165,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_insn \"unpack<mode>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=wa,wa\")\n \t(unspec:DI [(match_operand:FMOVE128_VSX 1 \"register_operand\" \"0,wa\")\n \t\t    (match_operand:QI 2 \"const_0_to_1_operand\" \"O,i\")]\n \t UNSPEC_UNPACK_128BIT))]\n@@ -14182,8 +14182,8 @@\n (define_insn \"pack<mode>\"\n   [(set (match_operand:FMOVE128_VSX 0 \"register_operand\" \"=wa\")\n \t(unspec:FMOVE128_VSX\n-\t [(match_operand:DI 1 \"register_operand\" \"d\")\n-\t  (match_operand:DI 2 \"register_operand\" \"d\")]\n+\t [(match_operand:DI 1 \"register_operand\" \"wa\")\n+\t  (match_operand:DI 2 \"register_operand\" \"wa\")]\n \t UNSPEC_PACK_128BIT))]\n   \"TARGET_VSX\"\n   \"xxpermdi %x0,%x1,%x2,0\""}, {"sha": "ba864c5b0b4780852187a91223c0f6e7204b0f5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72932ccf0ac4837b020d29b386d75fbceeb88735", "patch": "@@ -1,3 +1,8 @@\n+2017-08-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/82015\n+\t* gcc.target/powerpc/pr82015.c: New test.\n+\n 2017-08-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/*.c: Remove excess braces from target selectors."}, {"sha": "b177de4249f20194ef3f99ad22c5c17614785fca", "filename": "gcc/testsuite/gcc.target/powerpc/pr82015.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82015.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72932ccf0ac4837b020d29b386d75fbceeb88735/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82015.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82015.c?ref=72932ccf0ac4837b020d29b386d75fbceeb88735", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+unsigned long foo_11(vector __int128_t *p)\n+{\n+  return __builtin_unpack_vector_int128(*p, 11); /* { dg-error \"argument 2 must be 0 or 1\" } */\n+}\n+\n+unsigned long foo_n(vector __int128_t *p, unsigned long n)\n+{\n+  return __builtin_unpack_vector_int128(*p, n);\t/* { dg-error \"argument 2 must be 0 or 1\" } */\n+}"}]}