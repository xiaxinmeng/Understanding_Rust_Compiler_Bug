{"sha": "a85cfff41dad8c074b624c6249ae7c2655033dca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1Y2ZmZjQxZGFkOGMwNzRiNjI0YzYyNDlhZTdjMjY1NTAzM2RjYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-06T05:28:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-06T05:28:02Z"}, "message": "debug/elf, debug/dwarf: DWARF line number fixes.\n\nSupport DW_AT_high_pc as a constant.\nSupport DW_AT_ranges.\n\nPR gcc/52583\n\nFrom-SVN: r191008", "tree": {"sha": "75972449d1a56174c95af8afe2c4daf206a4aeab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75972449d1a56174c95af8afe2c4daf206a4aeab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a85cfff41dad8c074b624c6249ae7c2655033dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85cfff41dad8c074b624c6249ae7c2655033dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a85cfff41dad8c074b624c6249ae7c2655033dca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85cfff41dad8c074b624c6249ae7c2655033dca/comments", "author": null, "committer": null, "parents": [{"sha": "67401072c23a76f3a6926e93d117a7281cb6269d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67401072c23a76f3a6926e93d117a7281cb6269d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67401072c23a76f3a6926e93d117a7281cb6269d"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "3ab2f2b30cb57e319a12a66cd30f12c400df5f2d", "filename": "libgo/go/debug/dwarf/line.go", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85cfff41dad8c074b624c6249ae7c2655033dca/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85cfff41dad8c074b624c6249ae7c2655033dca/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go?ref=a85cfff41dad8c074b624c6249ae7c2655033dca", "patch": "@@ -67,12 +67,22 @@ func (d *Data) readUnitLine(i int, u *unit) error {\n \t\tswitch e.Tag {\n \t\tcase TagCompileUnit, TagSubprogram, TagEntryPoint, TagInlinedSubroutine:\n \t\t\tlow, lowok := e.Val(AttrLowpc).(uint64)\n-\t\t\thigh, highok := e.Val(AttrHighpc).(uint64)\n+\t\t\tvar high uint64\n+\t\t\tvar highok bool\n+\t\t\tswitch v := e.Val(AttrHighpc).(type) {\n+\t\t\tcase uint64:\n+\t\t\t\thigh = v\n+\t\t\t\thighok = true\n+\t\t\tcase int64:\n+\t\t\t\thigh = low + uint64(v)\n+\t\t\t\thighok = true\n+\t\t\t}\n \t\t\tif lowok && highok {\n \t\t\t\tu.pc = append(u.pc, addrRange{low, high})\n-\t\t\t} else if f, ok := e.Val(AttrRanges).(Offset); ok {\n-\t\t\t\t// TODO: Handle AttrRanges and .debug_ranges.\n-\t\t\t\t_ = f\n+\t\t\t} else if off, ok := e.Val(AttrRanges).(Offset); ok {\n+\t\t\t\tif err := d.readAddressRanges(off, low, u); err != nil {\n+\t\t\t\t\treturn err\n+\t\t\t\t}\n \t\t\t}\n \t\t\tval := e.Val(AttrStmtList)\n \t\t\tif val != nil {\n@@ -98,6 +108,38 @@ func (d *Data) readUnitLine(i int, u *unit) error {\n \treturn nil\n }\n \n+// readAddressRanges adds address ranges to a unit.\n+func (d *Data) readAddressRanges(off Offset, base uint64, u *unit) error {\n+\tb := makeBuf(d, u, \"ranges\", off, d.ranges[off:])\n+\tvar highest uint64\n+\tswitch u.addrsize {\n+\tcase 1:\n+\t\thighest = 0xff\n+\tcase 2:\n+\t\thighest = 0xffff\n+\tcase 4:\n+\t\thighest = 0xffffffff\n+\tcase 8:\n+\t\thighest = 0xffffffffffffffff\n+\tdefault:\n+\t\treturn errors.New(\"unknown address size\")\n+\t}\n+\tfor {\n+\t\tif b.err != nil {\n+\t\t\treturn b.err\n+\t\t}\n+\t\tlow := b.addr()\n+\t\thigh := b.addr()\n+\t\tif low == 0 && high == 0 {\n+\t\t\treturn b.err\n+\t\t} else if low == highest {\n+\t\t\tbase = high\n+\t\t} else {\n+\t\t\tu.pc = append(u.pc, addrRange{low + base, high + base})\n+\t\t}\n+\t}\n+}\n+\n // findLine finds the line information for a PC value, given the unit\n // containing the information.\n func (d *Data) findLine(u *unit, pc uint64) ([]*Line, error) {"}, {"sha": "31895f192c54e0e373046ec8c68327a172ec7691", "filename": "libgo/go/debug/elf/file.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85cfff41dad8c074b624c6249ae7c2655033dca/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85cfff41dad8c074b624c6249ae7c2655033dca/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go?ref=a85cfff41dad8c074b624c6249ae7c2655033dca", "patch": "@@ -563,7 +563,7 @@ func (f *File) DWARF() (*dwarf.Data, error) {\n \t// There are many other DWARF sections, but these\n \t// are the required ones, and the debug/dwarf package\n \t// does not use the others, so don't bother loading them.\n-\tvar names = [...]string{\"abbrev\", \"info\", \"line\", \"str\"}\n+\tvar names = [...]string{\"abbrev\", \"info\", \"line\", \"ranges\", \"str\"}\n \tvar dat [len(names)][]byte\n \tfor i, name := range names {\n \t\tname = \".debug_\" + name\n@@ -592,8 +592,8 @@ func (f *File) DWARF() (*dwarf.Data, error) {\n \t\t}\n \t}\n \n-\tabbrev, info, line, str := dat[0], dat[1], dat[2], dat[3]\n-\treturn dwarf.New(abbrev, nil, nil, info, line, nil, nil, str)\n+\tabbrev, info, line, ranges, str := dat[0], dat[1], dat[2], dat[3], dat[4]\n+\treturn dwarf.New(abbrev, nil, nil, info, line, nil, ranges, str)\n }\n \n // Symbols returns the symbol table for f."}]}