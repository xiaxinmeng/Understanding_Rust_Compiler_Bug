{"sha": "a254e44de7e7f417e3cdff485b27396e6bb16650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1NGU0NGRlN2U3ZjQxN2UzY2RmZjQ4NWIyNzM5NmU2YmIxNjY1MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-03-28T10:01:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-28T10:01:56Z"}, "message": "re PR tree-optimization/37795 (if-combine doesn't optimize != after >= test)\n\n2009-03-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37795\n\t* tree.h (combine_comparisons): Declare.\n\t* fold-const.c (combine_comparisons): Export.\n\t* tree-ssa-ifcombine.c (ifcombine_ifandif): Optimize two successive\n\tcomparisons.\n\t(ifcombine_iforif): Use combine_comparisons.\n\n\t* gcc.dg/tree-ssa/ssa-ifcombine-7.c: New testcase.\n\nFrom-SVN: r145170", "tree": {"sha": "41f27c9d3a60891996ed9cd47be2243a484783fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41f27c9d3a60891996ed9cd47be2243a484783fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a254e44de7e7f417e3cdff485b27396e6bb16650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a254e44de7e7f417e3cdff485b27396e6bb16650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a254e44de7e7f417e3cdff485b27396e6bb16650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a254e44de7e7f417e3cdff485b27396e6bb16650/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8ee227c046930794867e48c6478b0b04e3bd137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ee227c046930794867e48c6478b0b04e3bd137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8ee227c046930794867e48c6478b0b04e3bd137"}], "stats": {"total": 107, "additions": 72, "deletions": 35}, "files": [{"sha": "738e7db6f868a3517641b93cec3fb098111ec54d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a254e44de7e7f417e3cdff485b27396e6bb16650", "patch": "@@ -1,3 +1,12 @@\n+2009-03-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37795\n+\t* tree.h (combine_comparisons): Declare.\n+\t* fold-const.c (combine_comparisons): Export.\n+\t* tree-ssa-ifcombine.c (ifcombine_ifandif): Optimize two successive\n+\tcomparisons.\n+\t(ifcombine_iforif): Use combine_comparisons.\n+\n 2009-03-28  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-eh.c (inlinable_call_p): New function."}, {"sha": "2dbca3fa83b82656dc141a0de40a891ac26424e0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a254e44de7e7f417e3cdff485b27396e6bb16650", "patch": "@@ -103,8 +103,6 @@ static tree associate_trees (tree, tree, enum tree_code, tree);\n static tree const_binop (enum tree_code, tree, tree, int);\n static enum comparison_code comparison_to_compcode (enum tree_code);\n static enum tree_code compcode_to_comparison (enum comparison_code);\n-static tree combine_comparisons (enum tree_code, enum tree_code,\n-\t\t\t\t enum tree_code, tree, tree, tree);\n static int operand_equal_for_comparison_p (tree, tree, tree);\n static int twoval_comparison_p (tree, tree *, tree *, int *);\n static tree eval_subst (tree, tree, tree, tree, tree);"}, {"sha": "41e5d7078af6fe5d11fcc284de29acc5df3ba116", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a254e44de7e7f417e3cdff485b27396e6bb16650", "patch": "@@ -1,3 +1,8 @@\n+2009-03-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37795\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-7.c: New testcase.\n+\n 2009-03-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* g++.old-deja/g++.ext/attrib5.C, g++.old-deja/g++.jason/thunk3.C,"}, {"sha": "fd2025092177f4ca5bfec961581967472f6adad5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c?ref=a254e44de7e7f417e3cdff485b27396e6bb16650", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int test1 (int i, int j)\n+{\n+  if (i >= j)\n+    if (i != j)\n+      return 0;\n+  return -1;\n+}\n+\n+/* The above should be optimized to a i > j test by ifcombine.  */\n+\n+/* { dg-final { scan-tree-dump \" > \" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "08048560cfb2b383e85b06c212b8403a6e8ef3c5", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=a254e44de7e7f417e3cdff485b27396e6bb16650", "patch": "@@ -380,6 +380,43 @@ ifcombine_ifandif (basic_block inner_cond_bb, basic_block outer_cond_bb)\n       return true;\n     }\n \n+  /* See if we have two comparisons that we can merge into one.  */\n+  else if (TREE_CODE_CLASS (gimple_cond_code (inner_cond)) == tcc_comparison\n+\t   && TREE_CODE_CLASS (gimple_cond_code (outer_cond)) == tcc_comparison\n+\t   && operand_equal_p (gimple_cond_lhs (inner_cond),\n+\t\t\t       gimple_cond_lhs (outer_cond), 0)\n+\t   && operand_equal_p (gimple_cond_rhs (inner_cond),\n+\t\t\t       gimple_cond_rhs (outer_cond), 0))\n+    {\n+      enum tree_code code1 = gimple_cond_code (inner_cond);\n+      enum tree_code code2 = gimple_cond_code (outer_cond);\n+      tree t;\n+\n+      if (!(t = combine_comparisons (TRUTH_ANDIF_EXPR, code1, code2,\n+\t\t\t\t     boolean_type_node,\n+\t\t\t\t     gimple_cond_lhs (outer_cond),\n+\t\t\t\t     gimple_cond_rhs (outer_cond))))\n+\treturn false;\n+      t = canonicalize_cond_expr_cond (t);\n+      if (!t)\n+\treturn false;\n+      gimple_cond_set_condition_from_tree (inner_cond, t);\n+      update_stmt (inner_cond);\n+\n+      /* Leave CFG optimization to cfg_cleanup.  */\n+      gimple_cond_set_condition_from_tree (outer_cond, boolean_true_node);\n+      update_stmt (outer_cond);\n+\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"optimizing two comparisons to \");\n+\t  print_generic_expr (dump_file, t, 0);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+\n+      return true;\n+    }\n+\n   return false;\n }\n \n@@ -502,42 +539,13 @@ ifcombine_iforif (basic_block inner_cond_bb, basic_block outer_cond_bb)\n     {\n       enum tree_code code1 = gimple_cond_code (inner_cond);\n       enum tree_code code2 = gimple_cond_code (outer_cond);\n-      enum tree_code code;\n       tree t;\n \n-#define CHK(a,b) ((code1 == a ## _EXPR && code2 == b ## _EXPR) \\\n-\t\t  || (code2 == a ## _EXPR && code1 == b ## _EXPR))\n-      /* Merge the two condition codes if possible.  */\n-      if (code1 == code2)\n-\tcode = code1;\n-      else if (CHK (EQ, LT))\n-\tcode = LE_EXPR;\n-      else if (CHK (EQ, GT))\n-\tcode = GE_EXPR;\n-      else if (CHK (LT, LE))\n-\tcode = LE_EXPR;\n-      else if (CHK (GT, GE))\n-\tcode = GE_EXPR;\n-      else if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_cond_lhs (inner_cond)))\n-\t       || flag_unsafe_math_optimizations)\n-\t{\n-\t  if (CHK (LT, GT))\n-\t    code = NE_EXPR;\n-\t  else if (CHK (LT, NE))\n-\t    code = NE_EXPR;\n-\t  else if (CHK (GT, NE))\n-\t    code = NE_EXPR;\n-\t  else\n-\t    return false;\n-\t}\n-      /* We could check for combinations leading to trivial true/false.  */\n-      else\n+      if (!(t = combine_comparisons (TRUTH_ORIF_EXPR, code1, code2,\n+\t\t\t\t     boolean_type_node,\n+\t\t\t\t     gimple_cond_lhs (outer_cond),\n+\t\t\t\t     gimple_cond_rhs (outer_cond))))\n \treturn false;\n-#undef CHK\n-\n-      /* Do it.  */\n-      t = fold_build2 (code, boolean_type_node, gimple_cond_lhs (outer_cond),\n-\t\t       gimple_cond_rhs (outer_cond));\n       t = canonicalize_cond_expr_cond (t);\n       if (!t)\n \treturn false;"}, {"sha": "9ff30a39e2d1901345b5db4a0d85a1f2b4175ebc", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a254e44de7e7f417e3cdff485b27396e6bb16650/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a254e44de7e7f417e3cdff485b27396e6bb16650", "patch": "@@ -4853,6 +4853,8 @@ extern bool tree_call_nonnegative_warnv_p (tree, tree, tree, tree, bool *);\n extern bool tree_expr_nonzero_warnv_p (tree, bool *);\n \n extern bool fold_real_zero_addition_p (const_tree, const_tree, int);\n+extern tree combine_comparisons (enum tree_code, enum tree_code,\n+\t\t\t\t enum tree_code, tree, tree, tree);\n \n /* Return nonzero if CODE is a tree code that represents a truth value.  */\n static inline bool"}]}