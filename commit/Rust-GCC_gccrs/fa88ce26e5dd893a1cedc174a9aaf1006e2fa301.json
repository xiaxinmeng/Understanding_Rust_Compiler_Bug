{"sha": "fa88ce26e5dd893a1cedc174a9aaf1006e2fa301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4OGNlMjZlNWRkODkzYTFjZWRjMTc0YTlhYWYxMDA2ZTJmYTMwMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-11-25T19:48:19Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-11-25T19:48:19Z"}, "message": "verify.cc (_Jv_BytecodeVerifier::branch_prepass): Use java_opcode as type for switch.\n\n\t* verify.cc (_Jv_BytecodeVerifier::branch_prepass): Use\n\tjava_opcode as type for switch.\n\t[op_wide]: Likewise.\n\t(_Jv_BytecodeVerifier::verify_instructions_0): Likewise.\n\t[op_invokevirtual]: Likewise.\n\t* include/java-insns.h (java_opcode): Give enum a name.\n\nFrom-SVN: r47330", "tree": {"sha": "6ed6f524467095e251948101498c4efe08108408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ed6f524467095e251948101498c4efe08108408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301/comments", "author": null, "committer": null, "parents": [{"sha": "200f4143a27223e207707a0a6204379d45ab4470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200f4143a27223e207707a0a6204379d45ab4470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200f4143a27223e207707a0a6204379d45ab4470"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "5a542c393e04300244c1c40ed2e0700bd3a8f6a7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fa88ce26e5dd893a1cedc174a9aaf1006e2fa301", "patch": "@@ -1,3 +1,12 @@\n+2001-11-22  Tom Tromey  <tromey@redhat.com>\n+\n+\t* verify.cc (_Jv_BytecodeVerifier::branch_prepass): Use\n+\tjava_opcode as type for switch.\n+\t[op_wide]: Likewise.\n+\t(_Jv_BytecodeVerifier::verify_instructions_0): Likewise.\n+\t[op_invokevirtual]: Likewise.\n+\t* include/java-insns.h (java_opcode): Give enum a name.\n+\n 2001-11-25  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/4583:"}, {"sha": "327fcd373b0ff37407f184e56de6e42f7ed34e2e", "filename": "libjava/include/java-insns.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301/libjava%2Finclude%2Fjava-insns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301/libjava%2Finclude%2Fjava-insns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-insns.h?ref=fa88ce26e5dd893a1cedc174a9aaf1006e2fa301", "patch": "@@ -1,6 +1,6 @@\n // java-insns.h - Instruction encodings. This is -*- c++ -*-\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -11,7 +11,7 @@ details.  */\n #ifndef __JAVA_INSNS_H__\n #define __JAVA_INSNS_H__\n \n-enum\n+enum java_opcode\n {\n   op_nop = 0x00,\n   op_aconst_null = 0x01,"}, {"sha": "3b042e9963f1e64c4ef7068f3afe4fc13d353f28", "filename": "libjava/verify.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa88ce26e5dd893a1cedc174a9aaf1006e2fa301/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=fa88ce26e5dd893a1cedc174a9aaf1006e2fa301", "patch": "@@ -1221,7 +1221,7 @@ class _Jv_BytecodeVerifier\n \tlast_was_jsr = false;\n \n \tstart_PC = PC;\n-\tunsigned char opcode = bytecode[PC++];\n+\tjava_opcode opcode = (java_opcode) bytecode[PC++];\n \tswitch (opcode)\n \t  {\n \t  case op_nop:\n@@ -1472,9 +1472,9 @@ class _Jv_BytecodeVerifier\n \n \t  case op_wide:\n \t    {\n-\t      opcode = get_byte ();\n+\t      opcode = (java_opcode) get_byte ();\n \t      get_short ();\n-\t      if (opcode == (unsigned char) op_iinc)\n+\t      if (opcode == op_iinc)\n \t\tget_short ();\n \t    }\n \t    break;\n@@ -1777,7 +1777,7 @@ class _Jv_BytecodeVerifier\n \t  }\n \n \tstart_PC = PC;\n-\tunsigned char opcode = bytecode[PC++];\n+\tjava_opcode opcode = (java_opcode) bytecode[PC++];\n \tswitch (opcode)\n \t  {\n \t  case op_nop:\n@@ -2377,11 +2377,11 @@ class _Jv_BytecodeVerifier\n \t      _Jv_Utf8Const *method_name, *method_signature;\n \t      type class_type\n \t\t= check_method_constant (get_ushort (),\n-\t\t\t\t\t opcode == (unsigned char) op_invokeinterface,\n+\t\t\t\t\t opcode == op_invokeinterface,\n \t\t\t\t\t &method_name,\n \t\t\t\t\t &method_signature);\n \t      int arg_count = _Jv_count_arguments (method_signature);\n-\t      if (opcode == (unsigned char) op_invokeinterface)\n+\t      if (opcode == op_invokeinterface)\n \t\t{\n \t\t  int nargs = get_byte ();\n \t\t  if (nargs == 0)\n@@ -2399,7 +2399,7 @@ class _Jv_BytecodeVerifier\n \t      if (_Jv_equalUtf8Consts (method_name, gcj::init_name))\n \t\t{\n \t\t  is_init = true;\n-\t\t  if (opcode != (unsigned char) op_invokespecial)\n+\t\t  if (opcode != op_invokespecial)\n \t\t    verify_fail (\"can't invoke <init>\", start_PC);\n \t\t}\n \t      else if (method_name->data[0] == '<')\n@@ -2412,7 +2412,7 @@ class _Jv_BytecodeVerifier\n \t      for (int i = arg_count - 1; i >= 0; --i)\n \t\tpop_type (arg_types[i]);\n \n-\t      if (opcode != (unsigned char) op_invokestatic)\n+\t      if (opcode != op_invokestatic)\n \t\t{\n \t\t  type t = class_type;\n \t\t  if (is_init)"}]}