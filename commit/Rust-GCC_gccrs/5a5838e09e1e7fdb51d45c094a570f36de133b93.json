{"sha": "5a5838e09e1e7fdb51d45c094a570f36de133b93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1ODM4ZTA5ZTFlN2ZkYjUxZDQ1YzA5NGE1NzBmMzZkZTEzM2I5Mw==", "commit": {"author": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-07-21T17:44:22Z"}, "committer": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-07-21T17:44:22Z"}, "message": "Now completeting the mmintrin.h intrinsic headers for PowerPC by\nadding the DG tests.\n\n2017-07-21  Steven Munroe  <munroesj@gcc.gnu.org>\n\n\t* gcc.target/powerpc/mmx-check.h: New file.\n\t* gcc.target/powerpc/mmx-packs.c: New file.\n\t* gcc.target/powerpc/mmx-packssdw-1.c: New file.\n\t* gcc.target/powerpc/mmx-packsswb-1.c: New file.\n\t* gcc.target/powerpc/mmx-packuswb-1.c: New file.\n\t* gcc.target/powerpc/mmx-paddb-1.c: New file.\n\t* gcc.target/powerpc/mmx-paddd-1.c: New file.\n\t* gcc.target/powerpc/mmx-paddsb-1.c: New file.\n\t* gcc.target/powerpc/mmx-paddsw-1.c: New file.\n\t* gcc.target/powerpc/mmx-paddusb-1.c: New file.\n\t* gcc.target/powerpc/mmx-paddusw-1.c: New file.\n\t* gcc.target/powerpc/mmx-paddw-1.c: New file.\n\t* gcc.target/powerpc/mmx-pcmpeqb-1.c: New file.\n\t* gcc.target/powerpc/mmx-pcmpeqd-1.c: New file.\n\t* gcc.target/powerpc/mmx-pcmpeqw-1.c: New file.\n\t* gcc.target/powerpc/mmx-pcmpgtb-1.c: New file.\n\t* gcc.target/powerpc/mmx-pcmpgtd-1.c: New file.\n\t* gcc.target/powerpc/mmx-pcmpgtw-1.c: New file.\n\t* gcc.target/powerpc/mmx-pmaddwd-1.c: New file.\n\t* gcc.target/powerpc/mmx-pmulhw-1.c: New file.\n\t* gcc.target/powerpc/mmx-pmullw-1.c: New file.\n\t* gcc.target/powerpc/mmx-pslld-1.c: New file.\n\t* gcc.target/powerpc/mmx-psllw-1.c: New file.\n\t* gcc.target/powerpc/mmx-psrad-1.c: New file.\n\t* gcc.target/powerpc/mmx-psraw-1.c: New file.\n\t* gcc.target/powerpc/mmx-psrld-1.c: New file.\n\t* gcc.target/powerpc/mmx-psrlw-1.c: New file.\n\t* gcc.target/powerpc/mmx-psubb-2.c: New file.\n\t* gcc.target/powerpc/mmx-psubd-2.c: New file.\n\t* gcc.target/powerpc/mmx-psubsb-1.c: New file.\n\t* gcc.target/powerpc/mmx-psubsw-1.c: New file.\n\t* gcc.target/powerpc/mmx-psubusb-1.c: New file.\n\t* gcc.target/powerpc/mmx-psubusw-1.c: New file.\n\t* gcc.target/powerpc/mmx-psubw-2.c: New file.\n\t* gcc.target/powerpc/mmx-punpckhbw-1.c: New file.\n\t* gcc.target/powerpc/mmx-punpckhdq-1.c: New file.\n\t* gcc.target/powerpc/mmx-punpckhwd-1.c: New file.\n\t* gcc.target/powerpc/mmx-punpcklbw-1.c: New file.\n\t* gcc.target/powerpc/mmx-punpckldq-1.c: New file.\n\t* gcc.target/powerpc/mmx-punpcklwd-1.c: New file.\n\nFrom-SVN: r250432", "tree": {"sha": "1a90e86760871ebd6f38f77a35ea2f982a8d8aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a90e86760871ebd6f38f77a35ea2f982a8d8aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a5838e09e1e7fdb51d45c094a570f36de133b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5838e09e1e7fdb51d45c094a570f36de133b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5838e09e1e7fdb51d45c094a570f36de133b93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5838e09e1e7fdb51d45c094a570f36de133b93/comments", "author": null, "committer": null, "parents": [{"sha": "27ecd5c2b0dd74f6721e94972751855952acefd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ecd5c2b0dd74f6721e94972751855952acefd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ecd5c2b0dd74f6721e94972751855952acefd1"}], "stats": {"total": 1910, "additions": 1910, "deletions": 0}, "files": [{"sha": "530a4abc1a7ca901c1bd6d1006daca770221e381", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -1,3 +1,46 @@\n+2017-07-21  Steven Munroe  <munroesj@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/mmx-check.h: New file.\n+\t* gcc.target/powerpc/mmx-packs.c: New file.\n+\t* gcc.target/powerpc/mmx-packssdw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-packsswb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-packuswb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-paddb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-paddd-1.c: New file.\n+\t* gcc.target/powerpc/mmx-paddsb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-paddsw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-paddusb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-paddusw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-paddw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pcmpeqb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pcmpeqd-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pcmpeqw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pcmpgtb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pcmpgtd-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pcmpgtw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pmaddwd-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pmulhw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pmullw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-pslld-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psllw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psrad-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psraw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psrld-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psrlw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psubb-2.c: New file.\n+\t* gcc.target/powerpc/mmx-psubd-2.c: New file.\n+\t* gcc.target/powerpc/mmx-psubsb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psubsw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psubusb-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psubusw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-psubw-2.c: New file.\n+\t* gcc.target/powerpc/mmx-punpckhbw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-punpckhdq-1.c: New file.\n+\t* gcc.target/powerpc/mmx-punpckhwd-1.c: New file.\n+\t* gcc.target/powerpc/mmx-punpcklbw-1.c: New file.\n+\t* gcc.target/powerpc/mmx-punpckldq-1.c: New file.\n+\t* gcc.target/powerpc/mmx-punpcklwd-1.c: New file.\n+\n 2017-06-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81500"}, {"sha": "e08077f6d80d66f5fe4018b23a217f4c90afcb1b", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-check.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-check.h?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,35 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+static void mmx_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  mmx_test ();\n+}\n+\n+int\n+main ()\n+  {\n+#ifdef __BUILTIN_CPU_SUPPORTS__\n+    /* Many MMX intrinsics are simpler / faster to implement by\n+       transferring the __m64 (long int) to vector registers for SIMD\n+       operations.  To be efficient we also need the direct register\n+       transfer instructions from POWER8.  So we can test for\n+       arch_2_07.  */\n+    if ( __builtin_cpu_supports (\"arch_2_07\") )\n+      {\n+\tdo_test ();\n+#ifdef DEBUG\n+\tprintf (\"PASSED\\n\");\n+#endif\n+      }\n+#ifdef DEBUG\n+    else\n+      printf (\"SKIPPED\\n\");\n+#endif\n+#endif /* __BUILTIN_CPU_SUPPORTS__ */\n+    return 0;\n+  }"}, {"sha": "18faa5a18ebf283b21a973f302d53b9d679f1f97", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-packs.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packs.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <mmintrin.h>\n+#include \"mmx-check.h\"\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+static void\n+__attribute__ ((noinline))\n+check_packs_pu16 (unsigned long long int src1, unsigned long long int src2,\n+                  unsigned long long int res_ref)\n+{\n+  unsigned long long int res;\n+\n+  res = (unsigned long long int) _mm_packs_pu16 ((__m64 ) src1, (__m64 ) src2);\n+\n+  if (res != res_ref)\n+    abort ();\n+}\n+\n+static void\n+__attribute__ ((noinline))\n+check_packs_pi16 (unsigned long long int src1, unsigned long long int src2,\n+                  unsigned long long int res_ref)\n+{\n+  unsigned long long int res;\n+\n+  res = (unsigned long long int) _mm_packs_pi16 ((__m64 ) src1, (__m64 ) src2);\n+\n+\n+  if (res != res_ref)\n+    abort ();\n+}\n+\n+static void\n+__attribute__ ((noinline))\n+check_packs_pi32 (unsigned long long int src1, unsigned long long int src2,\n+\t\t  unsigned long long int res_ref)\n+{\n+  unsigned long long int res;\n+\n+  res = (unsigned long long int) _mm_packs_pi32 ((__m64 ) src1, (__m64 ) src2);\n+\n+  if (res != res_ref)\n+    abort ();\n+}\n+\n+static unsigned long long int src1[] =\n+  { 0xffff0000fffe0000UL, 0x0001000000020000UL, 0xfffffffffffffffeUL,\n+      0x0000000100000002UL, 0x0001000200030004UL, 0xfffffffefffdfffcUL,\n+      0x0100020003000400UL, 0xff00fe01fe02fe03UL };\n+\n+static unsigned long long int src2[] =\n+  { 0xfffffffdfffffffcUL, 0x0000000200000003UL, 0xfffffffdfffffffcUL,\n+      0x0000000300000004UL, 0x0005000600070008UL, 0xfffbfffafff9fff8UL,\n+      0x0005000600070008UL, 0xfffbfffafff9fff8UL };\n+\n+static unsigned long long int res_pi16[] =\n+  { 0xfffdfffcff00fe00UL, 0x0002000301000200UL, 0xfffdfffcfffffffeUL,\n+      0x0003000400010002UL, 0x0506070801020304UL, 0xfbfaf9f8fffefdfcUL,\n+      0x050607087f7f7f7fUL, 0xfbfaf9f880808080UL };\n+\n+static unsigned long long int res_pi32[] =\n+  { 0xfffdfffc80008000UL, 0x000200037fff7fffUL, 0xfffdfffcfffffffeUL,\n+      0x0003000400010002UL, 0x7fff7fff7fff7fffUL, 0x80008000fffe8000UL,\n+      0x7fff7fff7fff7fffUL, 0x8000800080008000UL };\n+\n+static unsigned long long int res_pu16[] =\n+  { 0x0000000000000000UL, 0x0002000301000200UL, 0x0000000000000000UL,\n+      0x0003000400010002UL, 0x0506070801020304UL, 0x000000000000000UL,\n+      0x5060708ffffffffUL, 0x0000000000000000UL };\n+\n+static void\n+TEST ()\n+{\n+  long i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      check_packs_pu16 (src1[i], src2[i], res_pu16[i]);\n+      check_packs_pi16 (src1[i], src2[i], res_pi16[i]);\n+      check_packs_pi32 (src1[i], src2[i], res_pi32[i]);\n+    }\n+}\n+"}, {"sha": "8698d55f012b628495e5330a9e2ca9e8a81fb55d", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-packssdw-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packssdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packssdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packssdw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_packs_pi32 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1, s2;\n+  __m64_union u;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi32 (2134, -128);\n+  s2.as_m64 = _mm_set_pi32 (41124, 234);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (s1.as_int[i] > 32767)\n+        e.as_short[i] = 32767;\n+      else if (s1.as_int[i] < -32768)\n+        e.as_short[i] = -32768;\n+      else\n+        e.as_short[i] = s1.as_int[i];\n+    }\n+  \n+  for (i = 0; i < 2; i++)\n+   {\n+      if (s2.as_int[i] > 32767)\n+        e.as_short[i+2] = 32767;\n+      else if (s2.as_int[i] < -32768)\n+        e.as_short[i+2] = -32768;\n+      else\n+        e.as_short[i+2] = s2.as_int[i];\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "96bea7b81aba81b48f44bbd3a3f5383f6917f098", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-packsswb-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packsswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packsswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packsswb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_packs_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1, s2;\n+  __m64_union u;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi16 (2134, -128, 1234, 6354);\n+  s2.as_m64 = _mm_set_pi16 (41124, 234, 2344, 2354);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (s1.as_short[i] > 127)\n+        e.as_char[i] = 127;\n+      else if (s1.as_short[i] < -128)\n+        e.as_char[i] = -128;\n+      else\n+        e.as_char[i] = s1.as_short[i];\n+    }\n+  \n+  for (i = 0; i < 4; i++)\n+   {\n+      if (s2.as_short[i] > 127)\n+        e.as_char[i+4] = 127;\n+      else if (s2.as_short[i] < -128)\n+        e.as_char[i+4] = -128;\n+      else\n+        e.as_char[i+4] = s2.as_short[i];\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "029d5687d71dd2b5f23a2a37e6bb18852cf7a392", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-packuswb-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packuswb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_packs_pu16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1, s2;\n+  __m64_union u;\n+  __m64_union e;\n+  int i, tmp;\n+   \n+  s1.as_m64 = _mm_set_pi16 (1, 2, 3, 4);\n+  s2.as_m64 = _mm_set_pi16 (-9, -10, -11, -12);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i=0; i<4; i++)\n+    {\n+      tmp = s1.as_short[i]<0 ? 0 : s1.as_short[i];\n+      tmp = tmp>255 ? 255 : tmp;\n+      e.as_char[i] = tmp;\n+\n+      tmp = s2.as_short[i]<0 ? 0 : s2.as_short[i];\n+      tmp = tmp>255 ? 255 : tmp;\n+      e.as_char[i+4] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "46b0584549e08b1399b3e76b156dec562814765b", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-paddb-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_add_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 33, 22, 11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 8; i++)\n+     e.as_char[i] = s1.as_char[i] + s2.as_char[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "a006dda0ee42d28fc835352ace5d7771b6b8c8f8", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-paddd-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddd-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_add_pi32 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi32 (30, 90);\n+  s2.as_m64 = _mm_set_pi32 (76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 2; i++)\n+     e.as_int[i] = s1.as_int[i] + s2.as_int[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "5722302095e1f241aa3caecf67adaeba7d19d59f", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-paddsb-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddsb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_adds_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 33, 22, 11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.as_signed_char[i] + s2.as_signed_char[i];\n+\n+      if (tmp > 127)\n+        tmp = 127;\n+      if (tmp < -128)\n+        tmp = -128;\n+\n+      e.as_signed_char[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "f7518b4dbae259d266207241dc5cf2504586e0fa", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-paddsw-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddsw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_adds_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (1, 2, 3, 4);\n+  s2.as_m64 = _mm_set_pi16 (11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = s1.as_short[i] + s2.as_short[i];\n+\n+      if (tmp > 32767)\n+        tmp = 32767;\n+      if (tmp < -32768)\n+        tmp = -32768;\n+\n+      e.as_short[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "a209e3e30dd1616ce574d480dc93e33aecf9eaf6", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-paddusb-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddusb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_adds_pu8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi8 (30, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 33, 22, 11, 98, 76, 100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.as_char[i] + s2.as_char[i];\n+\n+      if (tmp > 255)\n+        tmp = -1;\n+      if (tmp < 0)\n+        tmp = 0;\n+\n+      e.as_char[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "b46b7f636bb1b84b0cac1470b778b5ff04c44a31", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-paddusw-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddusw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_adds_pu16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (1, 2, 3, 4);\n+  s2.as_m64 = _mm_set_pi16 (11, 98, 76, 100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = (unsigned short)s1.as_short[i] + (unsigned short)s2.as_short[i];\n+\n+      if (tmp > 65535)\n+        tmp = -1;\n+\n+      if (tmp < 0)\n+        tmp = 0;\n+\n+      e.as_short[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "748fe2b57036fff80b475ae1b15f709bb1ec7935", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-paddw-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-paddw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_add_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi16 (10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi16 (11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 4; i++)\n+     e.as_short[i] = s1.as_short[i] + s2.as_short[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "c779b26e691d6934209900e1ff94a108e1c3fc8e", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pcmpeqb-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_cmpeq_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 3, 22, 11, 98, 30, 100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+     e.as_char[i] = (s1.as_char[i] == s2.as_char[i]) ? -1:0;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "a7807a2fdd9a8a4ad551dead796e6cbf3bae8d94", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pcmpeqd-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqd-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_cmpeq_pi32 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi32 (98, 25);\n+  s2.as_m64 = _mm_set_pi32 (98, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 2; i++)\n+     e.as_int[i] = (s1.as_int[i] == s2.as_int[i]) ? -1:0;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "e25fd54c6b57a9333727f55a04f2ca120d417561", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pcmpeqw-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpeqw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_cmpeq_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi16 (20, 30, 90, 80);\n+  s2.as_m64 = _mm_set_pi16 (34, 78, 90, 6);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 4; i++)\n+     e.as_short[i] = (s1.as_short[i] == s2.as_short[i]) ? -1:0;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "7f841b0b26ea7228ce0e60b62014f07a6d099ae8", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pcmpgtb-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_cmpgt_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 3, 22, 11, 98, 28, 100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    e.as_char[i] = (s1.as_char[i] > s2.as_char[i]) ? -1 : 0;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "9f503b5ec9e665ed8e3ba00d24aa7dd580683eec", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pcmpgtd-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtd-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_cmpgt_pi32 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi32 (99, 25);\n+  s2.as_m64 = _mm_set_pi32 (98, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 2; i++)\n+     e.as_int[i] = (s1.as_int[i] > s2.as_int[i]) ? -1:0;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "85716937e0d9aa0665dca17e7ab6e778ff171c6b", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pcmpgtw-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pcmpgtw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_cmpgt_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi16 (20, 30, 90, 80);\n+  s2.as_m64 = _mm_set_pi16 (34, 78, 90, 6);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+     e.as_short[i] = (s1.as_short[i] > s2.as_short[i]) ? -1:0;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "220b4f652093e9e2930c43c2ce41f4d27fad7e00", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pmaddwd-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmaddwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmaddwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmaddwd-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_madd_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi16 (2134, 3334, 1234, 6354);\n+  s2.as_m64 = _mm_set_pi16 (1, 3, 4, 5);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 2; i++)\n+    e.as_int[i] = (s1.as_short[i * 2] * s2.as_short[i * 2])\n+\t+ (s1.as_short[(i * 2) + 1] * s2.as_short[(i * 2) + 1]);\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "79b7c7b1838d1ca91f0951c2e90f708611f9e1a1", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pmulhw-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmulhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmulhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmulhw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_mulhi_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (10, 2067, -3033, 90);\n+  s2.as_m64 = _mm_set_pi16 (11, 9834, 7444, -10222);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = s1.as_short[i] * s2.as_short[i];\n+\n+      e.as_short[i] = (tmp & 0xffff0000)>>16;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "6d041691772abae851d2d0a7eb89a5d03a649819", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pmullw-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmullw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmullw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmullw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_mullo_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (10, 2067, -3033, 90);\n+  s2.as_m64 = _mm_set_pi16 (11, 9834, 7444, -10222);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = s1.as_short[i] * s2.as_short[i];\n+\n+      e.as_short[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "af687cd1e96210ff405fc72b248350e0736e951e", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pslld-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pslld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pslld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pslld-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#define N 0xb\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1)\n+{\n+  return _mm_sll_pi32 (s1, N);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_setr_pi32 (1, -2);\n+  u.as_m64 = test (s1.as_m64);\n+\n+\n+  if (N < 16)\n+    for (i = 0; i < 2; i++)\n+      e.as_int[i] = s1.as_int[i] << N;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "415f6a8417616cf40e7881f1d1a4e0025bfcec7e", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psllw-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psllw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psllw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psllw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#define N 0xb\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1)\n+{\n+  return _mm_sll_pi16 (s1, N);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_setr_pi16 (1, 2, 0x7000, 0x9000);\n+  u.as_m64 = test (s1.as_m64);\n+\n+\n+  if (N < 16)\n+    for (i = 0; i < 4; i++)\n+      e.as_short[i] = s1.as_short[i] << N;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "eaaf214292e0498235f34362f30c78b5387a07a5", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psrad-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrad-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#define N 0xb\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1)\n+{\n+  return _mm_sra_pi32 (s1, N);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_setr_pi32 (1000, -20000);\n+  u.as_m64 = test (s1.as_m64);\n+\n+  if (N < 16)\n+    for (i = 0; i < 2; i++)\n+      e.as_int[i] = s1.as_int[i] >> N;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "eb7c3aec15032de0e19104cea6310659e7e5d9f3", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psraw-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psraw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psraw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psraw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#define N 0xb\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1)\n+{\n+  return _mm_sra_pi16 (s1, N);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_setr_pi16 (1, -2, 0x7000, 0x9000);\n+  u.as_m64 = test (s1.as_m64);\n+\n+  if (N < 16)\n+    for (i = 0; i < 4; i++)\n+      e.as_short[i] = s1.as_short[i] >> N;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "1eb9d2897a7045d0754d2bacf277827f94b6fa4b", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psrld-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrld-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#define N 0xb\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1)\n+{\n+  return _mm_srl_pi32 (s1, N);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_setr_pi32 (1000, -20000);\n+  u.as_m64 = test (s1.as_m64);\n+\n+  if (N < 16)\n+    for (i = 0; i < 2; i++)\n+      e.as_int[i] = (unsigned int)s1.as_int[i] >> N;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "d066159e8ebd56a3dc66dfb436ec8f09778f7b86", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psrlw-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrlw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrlw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psrlw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#define N 0xb\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1)\n+{\n+  return _mm_srl_pi16 (s1, N);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1;\n+  __m64_union e;\n+  int i;\n+\n+  s1.as_m64 = _mm_setr_pi16 (1, -2, 0x7000, 0x9000);\n+  u.as_m64 = test (s1.as_m64);\n+\n+  if (N < 16)\n+    for (i = 0; i < 4; i++)\n+      e.as_short[i] = (unsigned short)s1.as_short[i] >> N;\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "c64204afa415bee04d7170088aa0f7f40ec5aa25", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psubb-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubb-2.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_sub_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 3, 22, 11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 8; i++)\n+     e.as_char[i] = s1.as_char[i] - s2.as_char[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "3260f611748ece866a08a582159193730883fbbe", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psubd-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubd-2.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_sub_pi32 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_setr_pi32 (30, 90);\n+  s2.as_m64 = _mm_setr_pi32 (76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 2; i++)\n+     e.as_int[i] = s1.as_int[i] - s2.as_int[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "3f0fb2af899712694ed41a93e92d9c06e271e637", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psubsb-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubsb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_subs_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 3, 22, 11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.as_signed_char[i] - s2.as_signed_char[i];\n+\n+      if (tmp > 127)\n+        tmp = 127;\n+      if (tmp < -128)\n+        tmp = -128;\n+\n+      e.as_signed_char[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "ae819e19c25355fce7cd228415e827735cf034c1", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psubsw-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubsw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_subs_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (10, 20, 30, 00);\n+  s2.as_m64 = _mm_set_pi16 (11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = s1.as_short[i] - s2.as_short[i];\n+\n+      if (tmp > 32767)\n+        tmp = 32767;\n+      if (tmp < -32768)\n+        tmp = -32768;\n+\n+      e.as_short[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "bbdc0977109d98097b808d849e8949396865a0bc", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psubusb-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubusb-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_subs_pu8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi8 (30, 2, 3, 4, 10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi8 (88, 44, 3, 22, 11, 98, 76, 100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.as_char[i] - s2.as_char[i];\n+\n+      if (tmp > 255)\n+        tmp = -1;\n+      if (tmp < 0)\n+        tmp = 0;\n+\n+      e.as_char[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "e26c380daeef4852257e3f822e7d564413c3aa5b", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psubusw-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubusw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_subs_pu16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (10, 20, 30, 40);\n+  s2.as_m64 = _mm_set_pi16 (11, 98, 76, 100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = (unsigned short)s1.as_short[i] - (unsigned short)s2.as_short[i];\n+\n+      if (tmp > 65535)\n+        tmp = -1;\n+\n+      if (tmp < 0)\n+        tmp = 0;\n+\n+      e.as_short[i] = tmp;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "39e4cdea04a91794934848255f42c637c6e75981", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-psubw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-psubw-2.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_sub_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi16 (10, 20, 30, 90);\n+  s2.as_m64 = _mm_set_pi16 (11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 4; i++)\n+     e.as_short[i] = s1.as_short[i] - s2.as_short[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "dba56ca205be4f3e915449845b26b4c7121abfec", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-punpckhbw-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhbw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_unpackhi_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2, e;\n+  int i;\n+   \n+  s1.as_m64 = 0x0706050403020100UL;\n+  s2.as_m64 = 0x1716151413121110UL;\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 4; i++)\n+    {\n+      e.as_char[2*i] = s1.as_char[4+i];\n+      e.as_char[2*i + 1] = s2.as_char[4+i];\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "f2f53c434c5d6bc775b7856b3dd81d0696686584", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-punpckhdq-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhdq-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_unpackhi_pi32 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2, e;\n+   \n+  s1.as_m64 = 0x0706050403020100UL;\n+  s2.as_m64 = 0x1716151413121110UL;\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  e.as_int[0] = s1.as_int[1];\n+  e.as_int[1] = s2.as_int[1];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "f0264463a81e84d337e7e6ba9b7f7fd332dc2c8a", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-punpckhwd-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckhwd-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_unpackhi_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2, e;\n+  int i;\n+   \n+  s1.as_m64 = 0x0706050403020100UL;\n+  s2.as_m64 = 0x1716151413121110UL;\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 2; i++)\n+    {\n+      e.as_short[2*i] = s1.as_short[2+i];\n+      e.as_short[2*i + 1] = s2.as_short[2+i];\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "36cf241ab19a728133979e9ef5f33c2b96bdffa1", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-punpcklbw-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpcklbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpcklbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpcklbw-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_unpacklo_pi8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2, e;\n+  int i;\n+   \n+  s1.as_m64 = 0x0706050403020100UL;\n+  s2.as_m64 = 0x1716151413121110UL;\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 4; i++)\n+    {\n+      e.as_char[2*i] = s1.as_char[i];\n+      e.as_char[2*i + 1] = s2.as_char[i];\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "8fb0251560a8e4066ad6b1bf7f23a4d4ac2f1e73", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-punpckldq-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpckldq-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_unpacklo_pi32 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2, e;\n+   \n+  s1.as_m64 = 0x0706050403020100UL;\n+  s2.as_m64 = 0x1716151413121110UL;\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  e.as_int[0] = s1.as_int[0];\n+  e.as_int[1] = s2.as_int[0];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "37b6b6ff8c6ec20684c4900873ea9ab3fad8acf7", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-punpcklwd-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpcklwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5838e09e1e7fdb51d45c094a570f36de133b93/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpcklwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-punpcklwd-1.c?ref=5a5838e09e1e7fdb51d45c094a570f36de133b93", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"mmx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST mmx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <mmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_unpacklo_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2, e;\n+  int i;\n+   \n+  s1.as_m64 = 0x0706050403020100UL;\n+  s2.as_m64 = 0x1716151413121110UL;\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+   \n+  for (i = 0; i < 2; i++)\n+    {\n+      e.as_short[2*i] = s1.as_short[i];\n+      e.as_short[2*i + 1] = s2.as_short[i];\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}]}