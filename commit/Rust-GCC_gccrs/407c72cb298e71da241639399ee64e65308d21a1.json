{"sha": "407c72cb298e71da241639399ee64e65308d21a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3YzcyY2IyOThlNzFkYTI0MTYzOTM5OWVlNjRlNjUzMDhkMjFhMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-06-01T12:38:32Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-06-01T12:38:32Z"}, "message": "*: Fix formatting.\n\n\t* libF77/*: Fix formatting.\n\t* libI77/*: Likewise.\n\t* libU77/*: Likewise.\n\nFrom-SVN: r54145", "tree": {"sha": "c6c7b1fe59f3ddb8b8ccf102855193850daecdfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6c7b1fe59f3ddb8b8ccf102855193850daecdfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/407c72cb298e71da241639399ee64e65308d21a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/407c72cb298e71da241639399ee64e65308d21a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/407c72cb298e71da241639399ee64e65308d21a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/407c72cb298e71da241639399ee64e65308d21a1/comments", "author": null, "committer": null, "parents": [{"sha": "113dc14387308310e28710562f69f1bd624a7aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113dc14387308310e28710562f69f1bd624a7aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113dc14387308310e28710562f69f1bd624a7aaf"}], "stats": {"total": 13136, "additions": 7058, "deletions": 6078}, "files": [{"sha": "fdd3fd487c0e4f4c7b5da1c4143a420f6bdd1536", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,3 +1,9 @@\n+Sat Jun  1 08:33:14 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libF77/*: Fix formatting.\n+\t* libI77/*: Likewise.\n+\t* libU77/*: Likewise.\n+\n Fri May 31 21:56:30 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g2c.hin, libF77/d_cnjg.c, libF77/main.c, libF77/r_cnjg.c,"}, {"sha": "b28610291980b185bc8f8f4dbf33fce9c73bf281", "filename": "libf2c/libF77/F77_aloc.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2FF77_aloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2FF77_aloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2FF77_aloc.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -7,18 +7,18 @@\n static integer memfailure = 3;\n \n #include <stdlib.h>\n-extern void G77_exit_0 (integer*);\n+extern void G77_exit_0 (integer *);\n \n- char *\n-F77_aloc(integer Len, char *whence)\n+char *\n+F77_aloc (integer Len, char *whence)\n {\n-\tchar *rv;\n-\tunsigned int uLen = (unsigned int) Len;\t/* for K&R C */\n+  char *rv;\n+  unsigned int uLen = (unsigned int) Len;\t/* for K&R C */\n \n-\tif (!(rv = (char*)malloc(uLen))) {\n-\t\tfprintf(stderr, \"malloc(%u) failure in %s\\n\",\n-\t\t\tuLen, whence);\n-\t\tG77_exit_0 (&memfailure);\n-\t\t}\n-\treturn rv;\n-\t}\n+  if (!(rv = (char *) malloc (uLen)))\n+    {\n+      fprintf (stderr, \"malloc(%u) failure in %s\\n\", uLen, whence);\n+      G77_exit_0 (&memfailure);\n+    }\n+  return rv;\n+}"}, {"sha": "761bc3bd6e99eb706a98a2598a0942357e72845e", "filename": "libf2c/libF77/abort_.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fabort_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fabort_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fabort_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,10 +1,11 @@\n #include <stdio.h>\n #include \"f2c.h\"\n \n-extern void sig_die(char*,int);\n+extern void sig_die (char *, int);\n \n-int G77_abort_0 (void)\n+int\n+G77_abort_0 (void)\n {\n-sig_die(\"Fortran abort routine called\", 1);\n-return 0;\t/* not reached */\n+  sig_die (\"Fortran abort routine called\", 1);\n+  return 0;\t\t\t/* not reached */\n }"}, {"sha": "3fc4d7c0a6a76e91a12270e2c07868c48e0234ca", "filename": "libf2c/libF77/c_abs.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_abs.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-extern double f__cabs(double, double);\n+extern double f__cabs (double, double);\n \n-double c_abs(complex *z)\n+double\n+c_abs (complex * z)\n {\n-return( f__cabs( z->r, z->i ) );\n+  return (f__cabs (z->r, z->i));\n }"}, {"sha": "59659754978f139f8189c83c5e3ec0b4d158cffe", "filename": "libf2c/libF77/c_cos.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_cos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_cos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_cos.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -3,9 +3,10 @@\n #undef abs\n #include \"math.h\"\n \n-void c_cos(complex *r, complex *z)\n+void\n+c_cos (complex * r, complex * z)\n {\n-\tdouble zi = z->i, zr = z->r;\n-\tr->r =   cos(zr) * cosh(zi);\n-\tr->i = - sin(zr) * sinh(zi);\n-\t}\n+  double zi = z->i, zr = z->r;\n+  r->r = cos (zr) * cosh (zi);\n+  r->i = -sin (zr) * sinh (zi);\n+}"}, {"sha": "b5ede0eb801fffcd9529c1858ccbbdd68bc8a6e2", "filename": "libf2c/libF77/c_div.c", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_div.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,41 +1,43 @@\n #include \"f2c.h\"\n \n-extern void sig_die(char*,int);\n-void c_div(complex *c, complex *a, complex *b)\n+extern void sig_die (char *, int);\n+void\n+c_div (complex * c, complex * a, complex * b)\n {\n-\tdouble ratio, den;\n-\tdouble abr, abi, cr;\n+  double ratio, den;\n+  double abr, abi, cr;\n \n-\tif( (abr = b->r) < 0.)\n-\t\tabr = - abr;\n-\tif( (abi = b->i) < 0.)\n-\t\tabi = - abi;\n-\tif( abr <= abi )\n-\t\t{\n-\t\tif(abi == 0) {\n+  if ((abr = b->r) < 0.)\n+    abr = -abr;\n+  if ((abi = b->i) < 0.)\n+    abi = -abi;\n+  if (abr <= abi)\n+    {\n+      if (abi == 0)\n+\t{\n #ifdef IEEE_COMPLEX_DIVIDE\n-\t\t\tfloat af, bf;\n-\t\t\taf = bf = abr;\n-\t\t\tif (a->i != 0 || a->r != 0)\n-\t\t\t\taf = 1.;\n-\t\t\tc->i = c->r = af / bf;\n-\t\t\treturn;\n+\t  float af, bf;\n+\t  af = bf = abr;\n+\t  if (a->i != 0 || a->r != 0)\n+\t    af = 1.;\n+\t  c->i = c->r = af / bf;\n+\t  return;\n #else\n-\t\t\tsig_die(\"complex division by zero\", 1);\n+\t  sig_die (\"complex division by zero\", 1);\n #endif\n-\t\t\t}\n-\t\tratio = (double)b->r / b->i ;\n-\t\tden = b->i * (1 + ratio*ratio);\n-\t\tcr = (a->r*ratio + a->i) / den;\n-\t\tc->i = (a->i*ratio - a->r) / den;\n-\t\t}\n-\n-\telse\n-\t\t{\n-\t\tratio = (double)b->i / b->r ;\n-\t\tden = b->r * (1 + ratio*ratio);\n-\t\tcr = (a->r + a->i*ratio) / den;\n-\t\tc->i = (a->i - a->r*ratio) / den;\n-\t\t}\n-\tc->r = cr;\n \t}\n+      ratio = (double) b->r / b->i;\n+      den = b->i * (1 + ratio * ratio);\n+      cr = (a->r * ratio + a->i) / den;\n+      c->i = (a->i * ratio - a->r) / den;\n+    }\n+\n+  else\n+    {\n+      ratio = (double) b->i / b->r;\n+      den = b->r * (1 + ratio * ratio);\n+      cr = (a->r + a->i * ratio) / den;\n+      c->i = (a->i - a->r * ratio) / den;\n+    }\n+  c->r = cr;\n+}"}, {"sha": "56a8695420c20ff11ad99ac9506580750894ecf8", "filename": "libf2c/libF77/c_exp.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_exp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_exp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_exp.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -3,11 +3,12 @@\n #undef abs\n #include \"math.h\"\n \n-void c_exp(complex *r, complex *z)\n+void\n+c_exp (complex * r, complex * z)\n {\n-\tdouble expx, zi = z->i;\n+  double expx, zi = z->i;\n \n-\texpx = exp(z->r);\n-\tr->r = expx * cos(zi);\n-\tr->i = expx * sin(zi);\n-\t}\n+  expx = exp (z->r);\n+  r->r = expx * cos (zi);\n+  r->i = expx * sin (zi);\n+}"}, {"sha": "7d5b9513167dba920942572c159336958e990c2c", "filename": "libf2c/libF77/c_log.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_log.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,11 +2,12 @@\n \n #undef abs\n #include \"math.h\"\n-extern double f__cabs(double, double);\n+extern double f__cabs (double, double);\n \n-void c_log(complex *r, complex *z)\n+void\n+c_log (complex * r, complex * z)\n {\n-\tdouble zi, zr;\n-\tr->i = atan2(zi = z->i, zr = z->r);\n-\tr->r = log( f__cabs(zr, zi) );\n-\t}\n+  double zi, zr;\n+  r->i = atan2 (zi = z->i, zr = z->r);\n+  r->r = log (f__cabs (zr, zi));\n+}"}, {"sha": "44bce9f7739e9e3a2dcd54b7985c7cdf58e2d430", "filename": "libf2c/libF77/c_sin.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_sin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_sin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_sin.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -3,9 +3,10 @@\n #undef abs\n #include \"math.h\"\n \n-void c_sin(complex *r, complex *z)\n+void\n+c_sin (complex * r, complex * z)\n {\n-\tdouble zi = z->i, zr = z->r;\n-\tr->r = sin(zr) * cosh(zi);\n-\tr->i = cos(zr) * sinh(zi);\n-\t}\n+  double zi = z->i, zr = z->r;\n+  r->r = sin (zr) * cosh (zi);\n+  r->i = cos (zr) * sinh (zi);\n+}"}, {"sha": "81b72fc372e1dc89cb15483e77ada1c079b0f78c", "filename": "libf2c/libF77/c_sqrt.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_sqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fc_sqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_sqrt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,28 +2,29 @@\n \n #undef abs\n #include \"math.h\"\n-extern double f__cabs(double, double);\n+extern double f__cabs (double, double);\n \n-void c_sqrt(complex *r, complex *z)\n+void\n+c_sqrt (complex * r, complex * z)\n {\n-\tdouble mag, t;\n-\tdouble zi = z->i, zr = z->r;\n+  double mag, t;\n+  double zi = z->i, zr = z->r;\n \n-\tif( (mag = f__cabs(zr, zi)) == 0.)\n-\t\tr->r = r->i = 0.;\n-\telse if(zr > 0)\n-\t\t{\n-\t\tr->r = t = sqrt(0.5 * (mag + zr) );\n-\t\tt = zi / t;\n-\t\tr->i = 0.5 * t;\n-\t\t}\n-\telse\n-\t\t{\n-\t\tt = sqrt(0.5 * (mag - zr) );\n-\t\tif(zi < 0)\n-\t\t\tt = -t;\n-\t\tr->i = t;\n-\t\tt = zi / t;\n-\t\tr->r = 0.5 * t;\n-\t\t}\n-\t}\n+  if ((mag = f__cabs (zr, zi)) == 0.)\n+    r->r = r->i = 0.;\n+  else if (zr > 0)\n+    {\n+      r->r = t = sqrt (0.5 * (mag + zr));\n+      t = zi / t;\n+      r->i = 0.5 * t;\n+    }\n+  else\n+    {\n+      t = sqrt (0.5 * (mag - zr));\n+      if (zi < 0)\n+\tt = -t;\n+      r->i = t;\n+      t = zi / t;\n+      r->r = 0.5 * t;\n+    }\n+}"}, {"sha": "5d2142e1825c61f8ecfc9a22639efb0244d27b05", "filename": "libf2c/libF77/cabs.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fcabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fcabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fcabs.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,22 +1,24 @@\n #undef abs\n #include <math.h>\n-double f__cabs(double real, double imag)\n+double\n+f__cabs (double real, double imag)\n {\n-double temp;\n+  double temp;\n \n-if(real < 0)\n-\treal = -real;\n-if(imag < 0)\n-\timag = -imag;\n-if(imag > real){\n-\ttemp = real;\n-\treal = imag;\n-\timag = temp;\n-}\n-if((real+imag) == real)\n-\treturn(real);\n+  if (real < 0)\n+    real = -real;\n+  if (imag < 0)\n+    imag = -imag;\n+  if (imag > real)\n+    {\n+      temp = real;\n+      real = imag;\n+      imag = temp;\n+    }\n+  if ((real + imag) == real)\n+    return (real);\n \n-temp = imag/real;\n-temp = real*sqrt(1.0 + temp*temp);  /*overflow!!*/\n-return(temp);\n+  temp = imag / real;\n+  temp = real * sqrt (1.0 + temp * temp);\t/*overflow!! */\n+  return (temp);\n }"}, {"sha": "a43a5c7f0a88a371672588e6a7a90f38452f1b78", "filename": "libf2c/libF77/d_abs.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_abs.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-double d_abs(doublereal *x)\n+double\n+d_abs (doublereal * x)\n {\n-if(*x >= 0)\n-\treturn(*x);\n-return(- *x);\n+  if (*x >= 0)\n+    return (*x);\n+  return (-*x);\n }"}, {"sha": "41c4f172c658ad9092e9d7bb6271dbc6675190f6", "filename": "libf2c/libF77/d_acos.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_acos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_acos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_acos.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_acos(doublereal *x)\n+double\n+d_acos (doublereal * x)\n {\n-return( acos(*x) );\n+  return (acos (*x));\n }"}, {"sha": "6560389150133849604568c1db70feba507bb9f7", "filename": "libf2c/libF77/d_asin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_asin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_asin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_asin.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_asin(doublereal *x)\n+double\n+d_asin (doublereal * x)\n {\n-return( asin(*x) );\n+  return (asin (*x));\n }"}, {"sha": "e25fa2e417749f077a23889a42da799fdccabf45", "filename": "libf2c/libF77/d_atan.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_atan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_atan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_atan.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_atan(doublereal *x)\n+double\n+d_atan (doublereal * x)\n {\n-return( atan(*x) );\n+  return (atan (*x));\n }"}, {"sha": "e0b217863a54c670d11ed54083ef52f67e9aa3f3", "filename": "libf2c/libF77/d_atn2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_atn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_atn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_atn2.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_atn2(doublereal *x, doublereal *y)\n+double\n+d_atn2 (doublereal * x, doublereal * y)\n {\n-return( atan2(*x,*y) );\n+  return (atan2 (*x, *y));\n }"}, {"sha": "bc46ae6959816f6cb8f95b3ac6d2f063d62b0bfa", "filename": "libf2c/libF77/d_cnjg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_cnjg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_cnjg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_cnjg.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,9 +1,9 @@\n #include \"f2c.h\"\n \n void\n-d_cnjg(doublecomplex *r, doublecomplex *z)\n+d_cnjg (doublecomplex * r, doublecomplex * z)\n {\n-\tdoublereal zi = z->i;\n-\tr->r = z->r;\n-\tr->i = -zi;\n-\t}\n+  doublereal zi = z->i;\n+  r->r = z->r;\n+  r->i = -zi;\n+}"}, {"sha": "010db6b5421a5db641ba6b44bea10bc4f14e14cf", "filename": "libf2c/libF77/d_cos.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_cos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_cos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_cos.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_cos(doublereal *x)\n+double\n+d_cos (doublereal * x)\n {\n-return( cos(*x) );\n+  return (cos (*x));\n }"}, {"sha": "00938bda13eb308bbd77655319434544c6e39e8a", "filename": "libf2c/libF77/d_cosh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_cosh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_cosh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_cosh.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_cosh(doublereal *x)\n+double\n+d_cosh (doublereal * x)\n {\n-return( cosh(*x) );\n+  return (cosh (*x));\n }"}, {"sha": "a4274ca68590af9fd6a8c2612144725d165cd2f3", "filename": "libf2c/libF77/d_dim.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_dim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_dim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_dim.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-double d_dim(doublereal *a, doublereal *b)\n+double\n+d_dim (doublereal * a, doublereal * b)\n {\n-return( *a > *b ? *a - *b : 0);\n+  return (*a > *b ? *a - *b : 0);\n }"}, {"sha": "7b4f3e529c4021c7978d0bb2b89af3396e8871b0", "filename": "libf2c/libF77/d_exp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_exp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_exp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_exp.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_exp(doublereal *x)\n+double\n+d_exp (doublereal * x)\n {\n-return( exp(*x) );\n+  return (exp (*x));\n }"}, {"sha": "cc937644b75130757145f58c6e79e808bc43d63b", "filename": "libf2c/libF77/d_imag.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_imag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_imag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_imag.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-double d_imag(doublecomplex *z)\n+double\n+d_imag (doublecomplex * z)\n {\n-return(z->i);\n+  return (z->i);\n }"}, {"sha": "f7ab8b0cb6a3d0aefbd08cc119eac7ec7a165f7c", "filename": "libf2c/libF77/d_int.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_int.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_int(doublereal *x)\n+double\n+d_int (doublereal * x)\n {\n-return( (*x>0) ? floor(*x) : -floor(- *x) );\n+  return ((*x > 0) ? floor (*x) : -floor (-*x));\n }"}, {"sha": "d0f86e554d01db3f5111850d92b9b927e00a9da2", "filename": "libf2c/libF77/d_lg10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_lg10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_lg10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_lg10.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -4,7 +4,8 @@\n \n #undef abs\n #include <math.h>\n-double d_lg10(doublereal *x)\n+double\n+d_lg10 (doublereal * x)\n {\n-return( log10e * log(*x) );\n+  return (log10e * log (*x));\n }"}, {"sha": "95dc767fb2ad31ab454a07b24dc6263d3570eb55", "filename": "libf2c/libF77/d_log.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_log.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_log(doublereal *x)\n+double\n+d_log (doublereal * x)\n {\n-return( log(*x) );\n+  return (log (*x));\n }"}, {"sha": "15cedefadd1151497c0b042752f5ae6149adbda5", "filename": "libf2c/libF77/d_mod.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_mod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_mod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_mod.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,31 +1,33 @@\n #include \"f2c.h\"\n \n #ifdef IEEE_drem\n-double drem(double, double);\n+double drem (double, double);\n #else\n #undef abs\n #include <math.h>\n #endif\n-double d_mod(doublereal *x, doublereal *y)\n+double\n+d_mod (doublereal * x, doublereal * y)\n {\n #ifdef IEEE_drem\n-\tdouble xa, ya, z;\n-\tif ((ya = *y) < 0.)\n-\t\tya = -ya;\n-\tz = drem(xa = *x, ya);\n-\tif (xa > 0) {\n-\t\tif (z < 0)\n-\t\t\tz += ya;\n-\t\t}\n-\telse if (z > 0)\n-\t\tz -= ya;\n-\treturn z;\n+  double xa, ya, z;\n+  if ((ya = *y) < 0.)\n+    ya = -ya;\n+  z = drem (xa = *x, ya);\n+  if (xa > 0)\n+    {\n+      if (z < 0)\n+\tz += ya;\n+    }\n+  else if (z > 0)\n+    z -= ya;\n+  return z;\n #else\n-\tdouble quotient;\n-\tif( (quotient = *x / *y) >= 0)\n-\t\tquotient = floor(quotient);\n-\telse\n-\t\tquotient = -floor(-quotient);\n-\treturn(*x - (*y) * quotient );\n+  double quotient;\n+  if ((quotient = *x / *y) >= 0)\n+    quotient = floor (quotient);\n+  else\n+    quotient = -floor (-quotient);\n+  return (*x - (*y) * quotient);\n #endif\n }"}, {"sha": "8be42758644e9c772a215e5a91569313d0b8c459", "filename": "libf2c/libF77/d_nint.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_nint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_nint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_nint.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,8 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_nint(doublereal *x)\n+double\n+d_nint (doublereal * x)\n {\n-return( (*x)>=0 ?\n-\tfloor(*x + .5) : -floor(.5 - *x) );\n+  return ((*x) >= 0 ? floor (*x + .5) : -floor (.5 - *x));\n }"}, {"sha": "11fe2c7f68ea3abf56df1212edbd9fea4d9d3ad3", "filename": "libf2c/libF77/d_prod.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_prod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_prod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_prod.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-double d_prod(real *x, real *y)\n+double\n+d_prod (real * x, real * y)\n {\n-return( (*x) * (*y) );\n+  return ((*x) * (*y));\n }"}, {"sha": "da8d24ba7a1927024904e350f9684cb7b096690b", "filename": "libf2c/libF77/d_sign.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_sign.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-double d_sign(doublereal *a, doublereal *b)\n+double\n+d_sign (doublereal * a, doublereal * b)\n {\n-double x;\n-x = (*a >= 0 ? *a : - *a);\n-return( *b >= 0 ? x : -x);\n+  double x;\n+  x = (*a >= 0 ? *a : -*a);\n+  return (*b >= 0 ? x : -x);\n }"}, {"sha": "24b37a439e5a9495b7340c0892ccde6930b6abfe", "filename": "libf2c/libF77/d_sin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_sin.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_sin(doublereal *x)\n+double\n+d_sin (doublereal * x)\n {\n-return( sin(*x) );\n+  return (sin (*x));\n }"}, {"sha": "dc9dc439073d9ac9e1d22b60be1aebfc6462b457", "filename": "libf2c/libF77/d_sinh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sinh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sinh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_sinh.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_sinh(doublereal *x)\n+double\n+d_sinh (doublereal * x)\n {\n-return( sinh(*x) );\n+  return (sinh (*x));\n }"}, {"sha": "0a458823318c958bf31bf0d9bc474910877fb59b", "filename": "libf2c/libF77/d_sqrt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_sqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_sqrt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_sqrt(doublereal *x)\n+double\n+d_sqrt (doublereal * x)\n {\n-return( sqrt(*x) );\n+  return (sqrt (*x));\n }"}, {"sha": "370c1b85fef9b2852165496c0fe17eee6d8782be", "filename": "libf2c/libF77/d_tan.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_tan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_tan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_tan.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_tan(doublereal *x)\n+double\n+d_tan (doublereal * x)\n {\n-return( tan(*x) );\n+  return (tan (*x));\n }"}, {"sha": "df81ea0df22eabc6d761dfc1cdabf07f5587f361", "filename": "libf2c/libF77/d_tanh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_tanh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fd_tanh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fd_tanh.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double d_tanh(doublereal *x)\n+double\n+d_tanh (doublereal * x)\n {\n-return( tanh(*x) );\n+  return (tanh (*x));\n }"}, {"sha": "b78fde0e9b4855e35ba111cfed24a11675703acf", "filename": "libf2c/libF77/derf_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fderf_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fderf_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fderf_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern double erf(double);\n-double G77_derf_0 (doublereal *x)\n+extern double erf (double);\n+double\n+G77_derf_0 (doublereal * x)\n {\n-return( erf(*x) );\n+  return (erf (*x));\n }"}, {"sha": "78e8e889c38c1b2442ca8d9bee91dcafd03e0448", "filename": "libf2c/libF77/derfc_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fderfc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fderfc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fderfc_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-extern double erfc(double);\n+extern double erfc (double);\n \n-double G77_derfc_0 (doublereal *x)\n+double\n+G77_derfc_0 (doublereal * x)\n {\n-return( erfc(*x) );\n+  return (erfc (*x));\n }"}, {"sha": "e2ea1c6b5d671b95f267aebb87f3a0f7a99e9abb", "filename": "libf2c/libF77/dtime_.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fdtime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fdtime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fdtime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -23,27 +23,27 @@\n #endif\n #endif\n \n- double\n-dtime_(float *tarray)\n+double\n+dtime_ (float *tarray)\n {\n #ifdef USE_CLOCK\n #ifndef CLOCKS_PER_SECOND\n #define CLOCKS_PER_SECOND Hz\n #endif\n-\tstatic double t0;\n-\tdouble t = clock();\n-\ttarray[1] = 0;\n-\ttarray[0] = (t - t0) / CLOCKS_PER_SECOND;\n-\tt0 = t;\n-\treturn tarray[0];\n+  static double t0;\n+  double t = clock ();\n+  tarray[1] = 0;\n+  tarray[0] = (t - t0) / CLOCKS_PER_SECOND;\n+  t0 = t;\n+  return tarray[0];\n #else\n-\tstruct tms t;\n-\tstatic struct tms t0;\n+  struct tms t;\n+  static struct tms t0;\n \n-\ttimes(&t);\n-\ttarray[0] = (double)(t.tms_utime - t0.tms_utime) / Hz;\n-\ttarray[1] = (double)(t.tms_stime - t0.tms_stime) / Hz;\n-\tt0 = t;\n-\treturn tarray[0] + tarray[1];\n+  times (&t);\n+  tarray[0] = (double) (t.tms_utime - t0.tms_utime) / Hz;\n+  tarray[1] = (double) (t.tms_stime - t0.tms_stime) / Hz;\n+  t0 = t;\n+  return tarray[0] + tarray[1];\n #endif\n-\t}\n+}"}, {"sha": "d9bea344e4f7e9eb4e530e877042c32bb30b5385", "filename": "libf2c/libF77/ef1asc_.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fef1asc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fef1asc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fef1asc_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,9 +6,10 @@\n #define M\t( (long) (sizeof(long) - 1) )\n #define EVEN(x)\t( ( (x)+ M) & (~M) )\n \n-extern void s_copy(char*,char*,ftnlen,ftnlen);\n-int G77_ef1asc_0 (ftnint *a, ftnlen *la, ftnint *b, ftnlen *lb)\n+extern void s_copy (char *, char *, ftnlen, ftnlen);\n+int\n+G77_ef1asc_0 (ftnint * a, ftnlen * la, ftnint * b, ftnlen * lb)\n {\n-s_copy( (char *)a, (char *)b, EVEN(*la), *lb );\n-return 0;\t/* ignored return value */\n+  s_copy ((char *) a, (char *) b, EVEN (*la), *lb);\n+  return 0;\t\t\t/* ignored return value */\n }"}, {"sha": "2e102fb6b5df0e8612c8d2207b53787de2289fc3", "filename": "libf2c/libF77/ef1cmc_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fef1cmc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fef1cmc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fef1cmc_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,8 +2,9 @@\n \n #include \"f2c.h\"\n \n-extern integer s_cmp(char*,char*,ftnlen,ftnlen);\n-integer G77_ef1cmc_0 (ftnint *a, ftnlen *la, ftnint *b, ftnlen *lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+integer\n+G77_ef1cmc_0 (ftnint * a, ftnlen * la, ftnint * b, ftnlen * lb)\n {\n-return( s_cmp( (char *)a, (char *)b, *la, *lb) );\n+  return (s_cmp ((char *) a, (char *) b, *la, *lb));\n }"}, {"sha": "fadbfaf038a739af8424f4eb6e1de8d145706dca", "filename": "libf2c/libF77/erf_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Ferf_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Ferf_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Ferf_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern double erf(double);\n-double G77_erf_0 (real *x)\n+extern double erf (double);\n+double\n+G77_erf_0 (real * x)\n {\n-return( erf(*x) );\n+  return (erf (*x));\n }"}, {"sha": "7f3ff8a5dbddb45b858b1a9aa09058e2b8fef38a", "filename": "libf2c/libF77/erfc_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Ferfc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Ferfc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Ferfc_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern double erfc(double);\n-double G77_erfc_0 (real *x)\n+extern double erfc (double);\n+double\n+G77_erfc_0 (real * x)\n {\n-return( erfc(*x) );\n+  return (erfc (*x));\n }"}, {"sha": "cc64612c8d9dc7dcf4ff8349f21b99a2f8275c9e", "filename": "libf2c/libF77/etime_.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fetime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fetime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fetime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -23,21 +23,21 @@\n #endif\n #endif\n \n- double\n-etime_(float *tarray)\n+double\n+etime_ (float *tarray)\n {\n #ifdef USE_CLOCK\n #ifndef CLOCKS_PER_SECOND\n #define CLOCKS_PER_SECOND Hz\n #endif\n-\tdouble t = clock();\n-\ttarray[1] = 0;\n-\treturn tarray[0] = t / CLOCKS_PER_SECOND;\n+  double t = clock ();\n+  tarray[1] = 0;\n+  return tarray[0] = t / CLOCKS_PER_SECOND;\n #else\n-\tstruct tms t;\n+  struct tms t;\n \n-\ttimes(&t);\n-\treturn\t  (tarray[0] = (double)t.tms_utime/Hz)\n-\t\t+ (tarray[1] = (double)t.tms_stime/Hz);\n+  times (&t);\n+  return (tarray[0] = (double) t.tms_utime / Hz)\n+    + (tarray[1] = (double) t.tms_stime / Hz);\n #endif\n-\t}\n+}"}, {"sha": "adf3d8592748b9725ca82221f6ca8f293df63f9b", "filename": "libf2c/libF77/exit_.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fexit_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fexit_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fexit_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -13,13 +13,13 @@\n #undef min\n #undef max\n #include <stdlib.h>\n-extern void f_exit(void);\n+extern void f_exit (void);\n \n- void\n-G77_exit_0 (integer *rc)\n+void\n+G77_exit_0 (integer * rc)\n {\n #ifdef NO_ONEXIT\n-\tf_exit();\n+  f_exit ();\n #endif\n-\texit(*rc);\n-\t}\n+  exit (*rc);\n+}"}, {"sha": "04b13e8de5dcdc5b3b429ead46de0f953f54f060", "filename": "libf2c/libF77/f2ch.add", "status": "modified", "additions": 158, "deletions": 157, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Ff2ch.add", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Ff2ch.add", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Ff2ch.add?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,161 +2,162 @@\n    for compiling libF77 and libI77. */\n \n #ifdef __cplusplus\n-extern \"C\" {\n-extern int abort_(void);\n-extern double c_abs(complex *);\n-extern void c_cos(complex *, complex *);\n-extern void c_div(complex *, complex *, complex *);\n-extern void c_exp(complex *, complex *);\n-extern void c_log(complex *, complex *);\n-extern void c_sin(complex *, complex *);\n-extern void c_sqrt(complex *, complex *);\n-extern double d_abs(double *);\n-extern double d_acos(double *);\n-extern double d_asin(double *);\n-extern double d_atan(double *);\n-extern double d_atn2(double *, double *);\n-extern void d_cnjg(doublecomplex *, doublecomplex *);\n-extern double d_cos(double *);\n-extern double d_cosh(double *);\n-extern double d_dim(double *, double *);\n-extern double d_exp(double *);\n-extern double d_imag(doublecomplex *);\n-extern double d_int(double *);\n-extern double d_lg10(double *);\n-extern double d_log(double *);\n-extern double d_mod(double *, double *);\n-extern double d_nint(double *);\n-extern double d_prod(float *, float *);\n-extern double d_sign(double *, double *);\n-extern double d_sin(double *);\n-extern double d_sinh(double *);\n-extern double d_sqrt(double *);\n-extern double d_tan(double *);\n-extern double d_tanh(double *);\n-extern double derf_(double *);\n-extern double derfc_(double *);\n-extern integer do_fio(ftnint *, char *, ftnlen);\n-extern integer do_lio(ftnint *, ftnint *, char *, ftnlen);\n-extern integer do_uio(ftnint *, char *, ftnlen);\n-extern integer e_rdfe(void);\n-extern integer e_rdue(void);\n-extern integer e_rsfe(void);\n-extern integer e_rsfi(void);\n-extern integer e_rsle(void);\n-extern integer e_rsli(void);\n-extern integer e_rsue(void);\n-extern integer e_wdfe(void);\n-extern integer e_wdue(void);\n-extern integer e_wsfe(void);\n-extern integer e_wsfi(void);\n-extern integer e_wsle(void);\n-extern integer e_wsli(void);\n-extern integer e_wsue(void);\n-extern int ef1asc_(ftnint *, ftnlen *, ftnint *, ftnlen *);\n-extern integer ef1cmc_(ftnint *, ftnlen *, ftnint *, ftnlen *);\n-extern double erf(double);\n-extern double erf_(float *);\n-extern double erfc(double);\n-extern double erfc_(float *);\n-extern integer f_back(alist *);\n-extern integer f_clos(cllist *);\n-extern integer f_end(alist *);\n-extern void f_exit(void);\n-extern integer f_inqu(inlist *);\n-extern integer f_open(olist *);\n-extern integer f_rew(alist *);\n-extern int flush_(void);\n-extern void getarg_(integer *, char *, ftnlen);\n-extern void getenv_(char *, char *, ftnlen, ftnlen);\n-extern short h_abs(short *);\n-extern short h_dim(short *, short *);\n-extern short h_dnnt(double *);\n-extern short h_indx(char *, char *, ftnlen, ftnlen);\n-extern short h_len(char *, ftnlen);\n-extern short h_mod(short *, short *);\n-extern short h_nint(float *);\n-extern short h_sign(short *, short *);\n-extern short hl_ge(char *, char *, ftnlen, ftnlen);\n-extern short hl_gt(char *, char *, ftnlen, ftnlen);\n-extern short hl_le(char *, char *, ftnlen, ftnlen);\n-extern short hl_lt(char *, char *, ftnlen, ftnlen);\n-extern integer i_abs(integer *);\n-extern integer i_dim(integer *, integer *);\n-extern integer i_dnnt(double *);\n-extern integer i_indx(char *, char *, ftnlen, ftnlen);\n-extern integer i_len(char *, ftnlen);\n-extern integer i_mod(integer *, integer *);\n-extern integer i_nint(float *);\n-extern integer i_sign(integer *, integer *);\n-extern integer iargc_(void);\n-extern ftnlen l_ge(char *, char *, ftnlen, ftnlen);\n-extern ftnlen l_gt(char *, char *, ftnlen, ftnlen);\n-extern ftnlen l_le(char *, char *, ftnlen, ftnlen);\n-extern ftnlen l_lt(char *, char *, ftnlen, ftnlen);\n-extern void pow_ci(complex *, complex *, integer *);\n-extern double pow_dd(double *, double *);\n-extern double pow_di(double *, integer *);\n-extern short pow_hh(short *, shortint *);\n-extern integer pow_ii(integer *, integer *);\n-extern double pow_ri(float *, integer *);\n-extern void pow_zi(doublecomplex *, doublecomplex *, integer *);\n-extern void pow_zz(doublecomplex *, doublecomplex *, doublecomplex *);\n-extern double r_abs(float *);\n-extern double r_acos(float *);\n-extern double r_asin(float *);\n-extern double r_atan(float *);\n-extern double r_atn2(float *, float *);\n-extern void r_cnjg(complex *, complex *);\n-extern double r_cos(float *);\n-extern double r_cosh(float *);\n-extern double r_dim(float *, float *);\n-extern double r_exp(float *);\n-extern double r_imag(complex *);\n-extern double r_int(float *);\n-extern double r_lg10(float *);\n-extern double r_log(float *);\n-extern double r_mod(float *, float *);\n-extern double r_nint(float *);\n-extern double r_sign(float *, float *);\n-extern double r_sin(float *);\n-extern double r_sinh(float *);\n-extern double r_sqrt(float *);\n-extern double r_tan(float *);\n-extern double r_tanh(float *);\n-extern void s_cat(char *, char **, integer *, integer *, ftnlen);\n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-extern void s_copy(char *, char *, ftnlen, ftnlen);\n-extern int s_paus(char *, ftnlen);\n-extern integer s_rdfe(cilist *);\n-extern integer s_rdue(cilist *);\n-extern integer s_rnge(char *, integer, char *, integer);\n-extern integer s_rsfe(cilist *);\n-extern integer s_rsfi(icilist *);\n-extern integer s_rsle(cilist *);\n-extern integer s_rsli(icilist *);\n-extern integer s_rsne(cilist *);\n-extern integer s_rsni(icilist *);\n-extern integer s_rsue(cilist *);\n-extern int s_stop(char *, ftnlen);\n-extern integer s_wdfe(cilist *);\n-extern integer s_wdue(cilist *);\n-extern integer s_wsfe(cilist *);\n-extern integer s_wsfi(icilist *);\n-extern integer s_wsle(cilist *);\n-extern integer s_wsli(icilist *);\n-extern integer s_wsne(cilist *);\n-extern integer s_wsni(icilist *);\n-extern integer s_wsue(cilist *);\n-extern void sig_die(char *, int);\n-extern integer signal_(integer *, void (*)(int));\n-extern integer system_(char *, ftnlen);\n-extern double z_abs(doublecomplex *);\n-extern void z_cos(doublecomplex *, doublecomplex *);\n-extern void z_div(doublecomplex *, doublecomplex *, doublecomplex *);\n-extern void z_exp(doublecomplex *, doublecomplex *);\n-extern void z_log(doublecomplex *, doublecomplex *);\n-extern void z_sin(doublecomplex *, doublecomplex *);\n-extern void z_sqrt(doublecomplex *, doublecomplex *);\n-\t}\n+extern \"C\"\n+{\n+  extern int abort_ (void);\n+  extern double c_abs (complex *);\n+  extern void c_cos (complex *, complex *);\n+  extern void c_div (complex *, complex *, complex *);\n+  extern void c_exp (complex *, complex *);\n+  extern void c_log (complex *, complex *);\n+  extern void c_sin (complex *, complex *);\n+  extern void c_sqrt (complex *, complex *);\n+  extern double d_abs (double *);\n+  extern double d_acos (double *);\n+  extern double d_asin (double *);\n+  extern double d_atan (double *);\n+  extern double d_atn2 (double *, double *);\n+  extern void d_cnjg (doublecomplex *, doublecomplex *);\n+  extern double d_cos (double *);\n+  extern double d_cosh (double *);\n+  extern double d_dim (double *, double *);\n+  extern double d_exp (double *);\n+  extern double d_imag (doublecomplex *);\n+  extern double d_int (double *);\n+  extern double d_lg10 (double *);\n+  extern double d_log (double *);\n+  extern double d_mod (double *, double *);\n+  extern double d_nint (double *);\n+  extern double d_prod (float *, float *);\n+  extern double d_sign (double *, double *);\n+  extern double d_sin (double *);\n+  extern double d_sinh (double *);\n+  extern double d_sqrt (double *);\n+  extern double d_tan (double *);\n+  extern double d_tanh (double *);\n+  extern double derf_ (double *);\n+  extern double derfc_ (double *);\n+  extern integer do_fio (ftnint *, char *, ftnlen);\n+  extern integer do_lio (ftnint *, ftnint *, char *, ftnlen);\n+  extern integer do_uio (ftnint *, char *, ftnlen);\n+  extern integer e_rdfe (void);\n+  extern integer e_rdue (void);\n+  extern integer e_rsfe (void);\n+  extern integer e_rsfi (void);\n+  extern integer e_rsle (void);\n+  extern integer e_rsli (void);\n+  extern integer e_rsue (void);\n+  extern integer e_wdfe (void);\n+  extern integer e_wdue (void);\n+  extern integer e_wsfe (void);\n+  extern integer e_wsfi (void);\n+  extern integer e_wsle (void);\n+  extern integer e_wsli (void);\n+  extern integer e_wsue (void);\n+  extern int ef1asc_ (ftnint *, ftnlen *, ftnint *, ftnlen *);\n+  extern integer ef1cmc_ (ftnint *, ftnlen *, ftnint *, ftnlen *);\n+  extern double erf (double);\n+  extern double erf_ (float *);\n+  extern double erfc (double);\n+  extern double erfc_ (float *);\n+  extern integer f_back (alist *);\n+  extern integer f_clos (cllist *);\n+  extern integer f_end (alist *);\n+  extern void f_exit (void);\n+  extern integer f_inqu (inlist *);\n+  extern integer f_open (olist *);\n+  extern integer f_rew (alist *);\n+  extern int flush_ (void);\n+  extern void getarg_ (integer *, char *, ftnlen);\n+  extern void getenv_ (char *, char *, ftnlen, ftnlen);\n+  extern short h_abs (short *);\n+  extern short h_dim (short *, short *);\n+  extern short h_dnnt (double *);\n+  extern short h_indx (char *, char *, ftnlen, ftnlen);\n+  extern short h_len (char *, ftnlen);\n+  extern short h_mod (short *, short *);\n+  extern short h_nint (float *);\n+  extern short h_sign (short *, short *);\n+  extern short hl_ge (char *, char *, ftnlen, ftnlen);\n+  extern short hl_gt (char *, char *, ftnlen, ftnlen);\n+  extern short hl_le (char *, char *, ftnlen, ftnlen);\n+  extern short hl_lt (char *, char *, ftnlen, ftnlen);\n+  extern integer i_abs (integer *);\n+  extern integer i_dim (integer *, integer *);\n+  extern integer i_dnnt (double *);\n+  extern integer i_indx (char *, char *, ftnlen, ftnlen);\n+  extern integer i_len (char *, ftnlen);\n+  extern integer i_mod (integer *, integer *);\n+  extern integer i_nint (float *);\n+  extern integer i_sign (integer *, integer *);\n+  extern integer iargc_ (void);\n+  extern ftnlen l_ge (char *, char *, ftnlen, ftnlen);\n+  extern ftnlen l_gt (char *, char *, ftnlen, ftnlen);\n+  extern ftnlen l_le (char *, char *, ftnlen, ftnlen);\n+  extern ftnlen l_lt (char *, char *, ftnlen, ftnlen);\n+  extern void pow_ci (complex *, complex *, integer *);\n+  extern double pow_dd (double *, double *);\n+  extern double pow_di (double *, integer *);\n+  extern short pow_hh (short *, shortint *);\n+  extern integer pow_ii (integer *, integer *);\n+  extern double pow_ri (float *, integer *);\n+  extern void pow_zi (doublecomplex *, doublecomplex *, integer *);\n+  extern void pow_zz (doublecomplex *, doublecomplex *, doublecomplex *);\n+  extern double r_abs (float *);\n+  extern double r_acos (float *);\n+  extern double r_asin (float *);\n+  extern double r_atan (float *);\n+  extern double r_atn2 (float *, float *);\n+  extern void r_cnjg (complex *, complex *);\n+  extern double r_cos (float *);\n+  extern double r_cosh (float *);\n+  extern double r_dim (float *, float *);\n+  extern double r_exp (float *);\n+  extern double r_imag (complex *);\n+  extern double r_int (float *);\n+  extern double r_lg10 (float *);\n+  extern double r_log (float *);\n+  extern double r_mod (float *, float *);\n+  extern double r_nint (float *);\n+  extern double r_sign (float *, float *);\n+  extern double r_sin (float *);\n+  extern double r_sinh (float *);\n+  extern double r_sqrt (float *);\n+  extern double r_tan (float *);\n+  extern double r_tanh (float *);\n+  extern void s_cat (char *, char **, integer *, integer *, ftnlen);\n+  extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+  extern void s_copy (char *, char *, ftnlen, ftnlen);\n+  extern int s_paus (char *, ftnlen);\n+  extern integer s_rdfe (cilist *);\n+  extern integer s_rdue (cilist *);\n+  extern integer s_rnge (char *, integer, char *, integer);\n+  extern integer s_rsfe (cilist *);\n+  extern integer s_rsfi (icilist *);\n+  extern integer s_rsle (cilist *);\n+  extern integer s_rsli (icilist *);\n+  extern integer s_rsne (cilist *);\n+  extern integer s_rsni (icilist *);\n+  extern integer s_rsue (cilist *);\n+  extern int s_stop (char *, ftnlen);\n+  extern integer s_wdfe (cilist *);\n+  extern integer s_wdue (cilist *);\n+  extern integer s_wsfe (cilist *);\n+  extern integer s_wsfi (icilist *);\n+  extern integer s_wsle (cilist *);\n+  extern integer s_wsli (icilist *);\n+  extern integer s_wsne (cilist *);\n+  extern integer s_wsni (icilist *);\n+  extern integer s_wsue (cilist *);\n+  extern void sig_die (char *, int);\n+  extern integer signal_ (integer *, void (*)(int));\n+  extern integer system_ (char *, ftnlen);\n+  extern double z_abs (doublecomplex *);\n+  extern void z_cos (doublecomplex *, doublecomplex *);\n+  extern void z_div (doublecomplex *, doublecomplex *, doublecomplex *);\n+  extern void z_exp (doublecomplex *, doublecomplex *);\n+  extern void z_log (doublecomplex *, doublecomplex *);\n+  extern void z_sin (doublecomplex *, doublecomplex *);\n+  extern void z_sqrt (doublecomplex *, doublecomplex *);\n+}\n #endif"}, {"sha": "b35043b4a488606799260bf8ea9c265b343a1601", "filename": "libf2c/libF77/getarg_.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fgetarg_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fgetarg_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fgetarg_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,19 +6,20 @@\n  * variable argument c\n */\n \n-void G77_getarg_0 (ftnint *n, register char *s, ftnlen ls)\n+void\n+G77_getarg_0 (ftnint * n, register char *s, ftnlen ls)\n {\n-extern int f__xargc;\n-extern char **f__xargv;\n-register char *t;\n-register int i;\n+  extern int f__xargc;\n+  extern char **f__xargv;\n+  register char *t;\n+  register int i;\n \n-if(*n>=0 && *n<f__xargc)\n-\tt = f__xargv[*n];\n-else\n-\tt = \"\";\n-for(i = 0; i<ls && *t!='\\0' ; ++i)\n-\t*s++ = *t++;\n-for( ; i<ls ; ++i)\n-\t*s++ = ' ';\n+  if (*n >= 0 && *n < f__xargc)\n+    t = f__xargv[*n];\n+  else\n+    t = \"\";\n+  for (i = 0; i < ls && *t != '\\0'; ++i)\n+    *s++ = *t++;\n+  for (; i < ls; ++i)\n+    *s++ = ' ';\n }"}, {"sha": "2a58b90ab873dbabebba3ffe0059fc674651328f", "filename": "libf2c/libF77/getenv_.c", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fgetenv_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fgetenv_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fgetenv_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,7 @@\n #undef abs\n #include <stdlib.h>\n #include <string.h>\n-extern char *F77_aloc(ftnlen, char*);\n+extern char *F77_aloc (ftnlen, char *);\n \n /*\n  * getenv - f77 subroutine to return environment variables\n@@ -16,32 +16,34 @@ extern char *F77_aloc(ftnlen, char*);\n  *\t\tif ENV_NAME is not defined\n  */\n \n- void\n+void\n G77_getenv_0 (char *fname, char *value, ftnlen flen, ftnlen vlen)\n {\n-\tchar buf[256], *ep, *fp;\n-\tinteger i;\n+  char buf[256], *ep, *fp;\n+  integer i;\n \n-\tif (flen <= 0)\n-\t\tgoto add_blanks;\n-\tfor(i = 0; i < sizeof(buf); i++) {\n-\t\tif (i == flen || (buf[i] = fname[i]) == ' ') {\n-\t\t\tbuf[i] = 0;\n-\t\t\tep = getenv(buf);\n-\t\t\tgoto have_ep;\n-\t\t\t}\n-\t\t}\n-\twhile(i < flen && fname[i] != ' ')\n-\t\ti++;\n-\tstrncpy(fp = F77_aloc(i+1, \"getenv_\"), fname, (int)i);\n-\tfp[i] = 0;\n-\tep = getenv(fp);\n-\tfree(fp);\n- have_ep:\n-\tif (ep)\n-\t\twhile(*ep && vlen-- > 0)\n-\t\t\t*value++ = *ep++;\n- add_blanks:\n-\twhile(vlen-- > 0)\n-\t\t*value++ = ' ';\n+  if (flen <= 0)\n+    goto add_blanks;\n+  for (i = 0; i < sizeof (buf); i++)\n+    {\n+      if (i == flen || (buf[i] = fname[i]) == ' ')\n+\t{\n+\t  buf[i] = 0;\n+\t  ep = getenv (buf);\n+\t  goto have_ep;\n \t}\n+    }\n+  while (i < flen && fname[i] != ' ')\n+    i++;\n+  strncpy (fp = F77_aloc (i + 1, \"getenv_\"), fname, (int) i);\n+  fp[i] = 0;\n+  ep = getenv (fp);\n+  free (fp);\n+have_ep:\n+  if (ep)\n+    while (*ep && vlen-- > 0)\n+      *value++ = *ep++;\n+add_blanks:\n+  while (vlen-- > 0)\n+    *value++ = ' ';\n+}"}, {"sha": "9db19ca34e9506cda508a72c76f056b53d796fbb", "filename": "libf2c/libF77/h_abs.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_abs.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-shortint h_abs(shortint *x)\n+shortint\n+h_abs (shortint * x)\n {\n-if(*x >= 0)\n-\treturn(*x);\n-return(- *x);\n+  if (*x >= 0)\n+    return (*x);\n+  return (-*x);\n }"}, {"sha": "1519478747da0f151006e990cba1eccb9a56f096", "filename": "libf2c/libF77/h_dim.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_dim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_dim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_dim.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-shortint h_dim(shortint *a, shortint *b)\n+shortint\n+h_dim (shortint * a, shortint * b)\n {\n-return( *a > *b ? *a - *b : 0);\n+  return (*a > *b ? *a - *b : 0);\n }"}, {"sha": "46c83bbd28e1c3e26477421f47a0233593054c5b", "filename": "libf2c/libF77/h_dnnt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_dnnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_dnnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_dnnt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-shortint h_dnnt(doublereal *x)\n+shortint\n+h_dnnt (doublereal * x)\n {\n-return (shortint)(*x >= 0. ? floor(*x + .5) : -floor(.5 - *x));\n+  return (shortint) (*x >= 0. ? floor (*x + .5) : -floor (.5 - *x));\n }"}, {"sha": "2353b2b143aba5f1991d565e9b781a4c00c2d79c", "filename": "libf2c/libF77/h_indx.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_indx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_indx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_indx.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,22 +1,23 @@\n #include \"f2c.h\"\n \n-shortint h_indx(char *a, char *b, ftnlen la, ftnlen lb)\n+shortint\n+h_indx (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-ftnlen i, n;\n-char *s, *t, *bend;\n+  ftnlen i, n;\n+  char *s, *t, *bend;\n \n-n = la - lb + 1;\n-bend = b + lb;\n+  n = la - lb + 1;\n+  bend = b + lb;\n \n-for(i = 0 ; i < n ; ++i)\n-\t{\n-\ts = a + i;\n-\tt = b;\n-\twhile(t < bend)\n-\t\tif(*s++ != *t++)\n-\t\t\tgoto no;\n-\treturn((shortint)i+1);\n-\tno: ;\n-\t}\n-return(0);\n+  for (i = 0; i < n; ++i)\n+    {\n+      s = a + i;\n+      t = b;\n+      while (t < bend)\n+\tif (*s++ != *t++)\n+\t  goto no;\n+      return ((shortint) i + 1);\n+    no:;\n+    }\n+  return (0);\n }"}, {"sha": "0782af14c017b5785900fb535797935d0c026383", "filename": "libf2c/libF77/h_len.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_len.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_len.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_len.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-shortint h_len(char *s, ftnlen n)\n+shortint\n+h_len (char *s, ftnlen n)\n {\n-return(n);\n+  return (n);\n }"}, {"sha": "c04e0df823bde78b57f0af9fb653cd572e881d0a", "filename": "libf2c/libF77/h_mod.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_mod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_mod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_mod.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-shortint h_mod(short *a, short *b)\n+shortint\n+h_mod (short *a, short *b)\n {\n-return( *a % *b);\n+  return (*a % *b);\n }"}, {"sha": "a8c366a41bee43e975ce0482ba94d6ac9178397e", "filename": "libf2c/libF77/h_nint.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_nint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_nint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_nint.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-shortint h_nint(real *x)\n+shortint\n+h_nint (real * x)\n {\n-return (shortint)(*x >= 0 ? floor(*x + .5) : -floor(.5 - *x));\n+  return (shortint) (*x >= 0 ? floor (*x + .5) : -floor (.5 - *x));\n }"}, {"sha": "70402325be211a36166919d6326f411d84e5d36d", "filename": "libf2c/libF77/h_sign.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fh_sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fh_sign.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-shortint h_sign(shortint *a, shortint *b)\n+shortint\n+h_sign (shortint * a, shortint * b)\n {\n-shortint x;\n-x = (*a >= 0 ? *a : - *a);\n-return( *b >= 0 ? x : -x);\n+  shortint x;\n+  x = (*a >= 0 ? *a : -*a);\n+  return (*b >= 0 ? x : -x);\n }"}, {"sha": "988686d8d1ddd8eb366faa047c6ef51a01b3a317", "filename": "libf2c/libF77/hl_ge.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_ge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_ge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fhl_ge.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-shortlogical hl_ge(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+shortlogical\n+hl_ge (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) >= 0);\n+  return (s_cmp (a, b, la, lb) >= 0);\n }"}, {"sha": "0024ca7a0d2d484bd511d522e91cb401610556e5", "filename": "libf2c/libF77/hl_gt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_gt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_gt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fhl_gt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-shortlogical hl_gt(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+shortlogical\n+hl_gt (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) > 0);\n+  return (s_cmp (a, b, la, lb) > 0);\n }"}, {"sha": "76aa3e12da7f4c575dcc8d9a1b819b8abc0e958a", "filename": "libf2c/libF77/hl_le.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fhl_le.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-shortlogical hl_le(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+shortlogical\n+hl_le (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) <= 0);\n+  return (s_cmp (a, b, la, lb) <= 0);\n }"}, {"sha": "68a47fa98ebe2518bbb3f7c92087e4cccc53abed", "filename": "libf2c/libF77/hl_lt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_lt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fhl_lt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fhl_lt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-shortlogical hl_lt(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+shortlogical\n+hl_lt (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) < 0);\n+  return (s_cmp (a, b, la, lb) < 0);\n }"}, {"sha": "2ed183a62258fda6324cdd752f2b458d6f0436b6", "filename": "libf2c/libF77/i_abs.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_abs.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-integer i_abs(integer *x)\n+integer\n+i_abs (integer * x)\n {\n-if(*x >= 0)\n-\treturn(*x);\n-return(- *x);\n+  if (*x >= 0)\n+    return (*x);\n+  return (-*x);\n }"}, {"sha": "66ef7c99fb429395e8e8b32a2568f5ebca71235a", "filename": "libf2c/libF77/i_dim.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_dim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_dim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_dim.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-integer i_dim(integer *a, integer *b)\n+integer\n+i_dim (integer * a, integer * b)\n {\n-return( *a > *b ? *a - *b : 0);\n+  return (*a > *b ? *a - *b : 0);\n }"}, {"sha": "7a3783d29e2ae2f73e2b486aefedbb58d6e3fc3b", "filename": "libf2c/libF77/i_dnnt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_dnnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_dnnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_dnnt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-integer i_dnnt(doublereal *x)\n+integer\n+i_dnnt (doublereal * x)\n {\n-return (integer)(*x >= 0. ? floor(*x + .5) : -floor(.5 - *x));\n+  return (integer) (*x >= 0. ? floor (*x + .5) : -floor (.5 - *x));\n }"}, {"sha": "5b8e13693ba4503e1058f1b7beb77868a325184a", "filename": "libf2c/libF77/i_indx.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_indx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_indx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_indx.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,22 +1,23 @@\n #include \"f2c.h\"\n \n-integer i_indx(char *a, char *b, ftnlen la, ftnlen lb)\n+integer\n+i_indx (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-ftnlen i, n;\n-char *s, *t, *bend;\n+  ftnlen i, n;\n+  char *s, *t, *bend;\n \n-n = la - lb + 1;\n-bend = b + lb;\n+  n = la - lb + 1;\n+  bend = b + lb;\n \n-for(i = 0 ; i < n ; ++i)\n-\t{\n-\ts = a + i;\n-\tt = b;\n-\twhile(t < bend)\n-\t\tif(*s++ != *t++)\n-\t\t\tgoto no;\n-\treturn(i+1);\n-\tno: ;\n-\t}\n-return(0);\n+  for (i = 0; i < n; ++i)\n+    {\n+      s = a + i;\n+      t = b;\n+      while (t < bend)\n+\tif (*s++ != *t++)\n+\t  goto no;\n+      return (i + 1);\n+    no:;\n+    }\n+  return (0);\n }"}, {"sha": "3a43b869de110c05c7688c72194b6e73ae912c31", "filename": "libf2c/libF77/i_len.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_len.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_len.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_len.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-integer i_len(char *s, ftnlen n)\n+integer\n+i_len (char *s, ftnlen n)\n {\n-return(n);\n+  return (n);\n }"}, {"sha": "7ed7b391c197a2487099206f25d75ff5e11ee7cf", "filename": "libf2c/libF77/i_mod.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_mod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_mod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_mod.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-integer i_mod(integer *a, integer *b)\n+integer\n+i_mod (integer * a, integer * b)\n {\n-return( *a % *b);\n+  return (*a % *b);\n }"}, {"sha": "c4eaff48d33c07f368a3b3c42ba832545655a6cc", "filename": "libf2c/libF77/i_nint.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_nint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_nint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_nint.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-integer i_nint(real *x)\n+integer\n+i_nint (real * x)\n {\n-return (integer)(*x >= 0 ? floor(*x + .5) : -floor(.5 - *x));\n+  return (integer) (*x >= 0 ? floor (*x + .5) : -floor (.5 - *x));\n }"}, {"sha": "cf090086d008fe81990755112ddf366099734d63", "filename": "libf2c/libF77/i_sign.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fi_sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fi_sign.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-integer i_sign(integer *a, integer *b)\n+integer\n+i_sign (integer * a, integer * b)\n {\n-integer x;\n-x = (*a >= 0 ? *a : - *a);\n-return( *b >= 0 ? x : -x);\n+  integer x;\n+  x = (*a >= 0 ? *a : -*a);\n+  return (*b >= 0 ? x : -x);\n }"}, {"sha": "c3165709a5367beb33a089c89fa38ecc1b2470fd", "filename": "libf2c/libF77/iargc_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fiargc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fiargc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fiargc_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-ftnint G77_iargc_0 (void)\n+ftnint\n+G77_iargc_0 (void)\n {\n-extern int f__xargc;\n-return ( f__xargc - 1 );\n+  extern int f__xargc;\n+  return (f__xargc - 1);\n }"}, {"sha": "78af8d04f5e6a8116b39d1baeb86cca5969587d3", "filename": "libf2c/libF77/l_ge.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_ge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_ge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fl_ge.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-logical l_ge(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+logical\n+l_ge (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) >= 0);\n+  return (s_cmp (a, b, la, lb) >= 0);\n }"}, {"sha": "be7e4894719e34407af906d3e0831d293400e034", "filename": "libf2c/libF77/l_gt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_gt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_gt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fl_gt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-logical l_gt(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+logical\n+l_gt (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) > 0);\n+  return (s_cmp (a, b, la, lb) > 0);\n }"}, {"sha": "d2886fb7d4839dcf211b021d033f7f875a01d3b0", "filename": "libf2c/libF77/l_le.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fl_le.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-logical l_le(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+logical\n+l_le (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) <= 0);\n+  return (s_cmp (a, b, la, lb) <= 0);\n }"}, {"sha": "ff151f890a2020e58fa3cdab4c5c29f25c65ac50", "filename": "libf2c/libF77/l_lt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_lt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fl_lt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fl_lt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-logical l_lt(char *a, char *b, ftnlen la, ftnlen lb)\n+extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+logical\n+l_lt (char *a, char *b, ftnlen la, ftnlen lb)\n {\n-return(s_cmp(a,b,la,lb) < 0);\n+  return (s_cmp (a, b, la, lb) < 0);\n }"}, {"sha": "805d85848e9040e88ec15e3fcbc8958466cc6b77", "filename": "libf2c/libF77/lbitbits.c", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Flbitbits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Flbitbits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Flbitbits.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -4,51 +4,55 @@\n #define LONGBITS 32\n #endif\n \n- integer\n-lbit_bits(integer a, integer b, integer len)\n+integer\n+lbit_bits (integer a, integer b, integer len)\n {\n-\t/* Assume 2's complement arithmetic */\n+  /* Assume 2's complement arithmetic */\n \n-\tunsigned long x, y;\n+  unsigned long x, y;\n \n-\tx = (unsigned long) a;\n-\ty = (unsigned long)-1L;\n-\tx >>= b;\n-\ty <<= len;\n-\treturn (integer)(x & ~y);\n-\t}\n+  x = (unsigned long) a;\n+  y = (unsigned long) -1L;\n+  x >>= b;\n+  y <<= len;\n+  return (integer) (x & ~y);\n+}\n \n- integer\n-lbit_cshift(integer a, integer b, integer len)\n+integer\n+lbit_cshift (integer a, integer b, integer len)\n {\n-\tunsigned long x, y, z;\n+  unsigned long x, y, z;\n \n-\tx = (unsigned long)a;\n-\tif (len <= 0) {\n-\t\tif (len == 0)\n-\t\t\treturn 0;\n-\t\tgoto full_len;\n-\t\t}\n-\tif (len >= LONGBITS) {\n- full_len:\n-\t\tif (b >= 0) {\n-\t\t\tb %= LONGBITS;\n-\t\t\treturn (integer)(x << b | x >> LONGBITS -b );\n-\t\t\t}\n-\t\tb = -b;\n-\t\tb %= LONGBITS;\n-\t\treturn (integer)(x << LONGBITS - b | x >> b);\n-\t\t}\n-\ty = z = (unsigned long)-1;\n-\ty <<= len;\n-\tz &= ~y;\n-\ty &= x;\n-\tx &= z;\n-\tif (b >= 0) {\n-\t\tb %= len;\n-\t\treturn (integer)(y | z & (x << b | x >> len - b));\n-\t\t}\n-\tb = -b;\n-\tb %= len;\n-\treturn (integer)(y | z & (x >> b | x << len - b));\n+  x = (unsigned long) a;\n+  if (len <= 0)\n+    {\n+      if (len == 0)\n+\treturn 0;\n+      goto full_len;\n+    }\n+  if (len >= LONGBITS)\n+    {\n+    full_len:\n+      if (b >= 0)\n+\t{\n+\t  b %= LONGBITS;\n+\t  return (integer) (x << b | x >> LONGBITS - b);\n \t}\n+      b = -b;\n+      b %= LONGBITS;\n+      return (integer) (x << LONGBITS - b | x >> b);\n+    }\n+  y = z = (unsigned long) -1;\n+  y <<= len;\n+  z &= ~y;\n+  y &= x;\n+  x &= z;\n+  if (b >= 0)\n+    {\n+      b %= len;\n+      return (integer) (y | z & (x << b | x >> len - b));\n+    }\n+  b = -b;\n+  b %= len;\n+  return (integer) (y | z & (x >> b | x << len - b));\n+}"}, {"sha": "bfbb7c018336657af4b03735c24d4884a4b3cc07", "filename": "libf2c/libF77/lbitshft.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Flbitshft.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Flbitshft.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Flbitshft.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,7 @@\n #include \"f2c.h\"\n \n- integer\n-lbit_shift(integer a, integer b)\n+integer\n+lbit_shift (integer a, integer b)\n {\n-\treturn b >= 0 ? a << b : (integer)((uinteger)a >> -b);\n-\t}\n+  return b >= 0 ? a << b : (integer) ((uinteger) a >> -b);\n+}"}, {"sha": "c2dc88722f22585a58e02a4841167fbc525dbb35", "filename": "libf2c/libF77/main.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fmain.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -5,28 +5,28 @@\n \n #include <stdlib.h>\n \n-extern void f_exit(void);\n+extern void f_exit (void);\n #ifndef NO_ONEXIT\n #define ONEXIT atexit\n-extern int atexit(void (*)(void));\n+extern int atexit (void (*)(void));\n #endif\n \n-extern void f_init(void);\n-extern int MAIN__(void);\n+extern void f_init (void);\n+extern int MAIN__ (void);\n \n-main(int argc, char **argv)\n+main (int argc, char **argv)\n {\n-f_setarg(argc, argv);\n-f_setsig();\n-f_init();\n+  f_setarg (argc, argv);\n+  f_setsig ();\n+  f_init ();\n #ifndef NO_ONEXIT\n-ONEXIT(f_exit);\n+  ONEXIT (f_exit);\n #endif\n-MAIN__();\n+  MAIN__ ();\n #ifdef NO_ONEXIT\n-f_exit();\n+  f_exit ();\n #endif\n-exit(0);\t/* exit(0) rather than return(0) to bypass Cray bug */\n-return 0;\t/* For compilers that complain of missing return values; */\n-\t\t/* others will complain that this is unreachable code. */\n+  exit (0);\t\t\t/* exit(0) rather than return(0) to bypass Cray bug */\n+  return 0;\t\t\t/* For compilers that complain of missing return values; */\n+  /* others will complain that this is unreachable code. */\n }"}, {"sha": "1df3eb34b00ff803c7b4a0a0565e6be61afe8dfa", "filename": "libf2c/libF77/pow_ci.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_ci.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_ci.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_ci.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,15 +1,16 @@\n #include \"f2c.h\"\n \n-extern void pow_zi(doublecomplex*, doublecomplex*, integer*);\n-void pow_ci(complex *p, complex *a, integer *b) \t/* p = a**b  */\n+extern void pow_zi (doublecomplex *, doublecomplex *, integer *);\n+void\n+pow_ci (complex * p, complex * a, integer * b)\t/* p = a**b  */\n {\n-doublecomplex p1, a1;\n+  doublecomplex p1, a1;\n \n-a1.r = a->r;\n-a1.i = a->i;\n+  a1.r = a->r;\n+  a1.i = a->i;\n \n-pow_zi(&p1, &a1, b);\n+  pow_zi (&p1, &a1, b);\n \n-p->r = p1.r;\n-p->i = p1.i;\n+  p->r = p1.r;\n+  p->i = p1.i;\n }"}, {"sha": "0ab208ebf62ebacedd78564632f1876b4fa4fc4a", "filename": "libf2c/libF77/pow_dd.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_dd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_dd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_dd.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double pow_dd(doublereal *ap, doublereal *bp)\n+double\n+pow_dd (doublereal * ap, doublereal * bp)\n {\n-return(pow(*ap, *bp) );\n+  return (pow (*ap, *bp));\n }"}, {"sha": "d2298a0a1f00d8dd933c176e34e15c117fd7f831", "filename": "libf2c/libF77/pow_di.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_di.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,31 +1,32 @@\n #include \"f2c.h\"\n \n-double pow_di(doublereal *ap, integer *bp)\n+double\n+pow_di (doublereal * ap, integer * bp)\n {\n-double pow, x;\n-integer n;\n-unsigned long u;\n+  double pow, x;\n+  integer n;\n+  unsigned long u;\n \n-pow = 1;\n-x = *ap;\n-n = *bp;\n+  pow = 1;\n+  x = *ap;\n+  n = *bp;\n \n-if(n != 0)\n+  if (n != 0)\n+    {\n+      if (n < 0)\n \t{\n-\tif(n < 0)\n-\t\t{\n-\t\tn = -n;\n-\t\tx = 1/x;\n-\t\t}\n-\tfor(u = n; ; )\n-\t\t{\n-\t\tif(u & 01)\n-\t\t\tpow *= x;\n-\t\tif(u >>= 1)\n-\t\t\tx *= x;\n-\t\telse\n-\t\t\tbreak;\n-\t\t}\n+\t  n = -n;\n+\t  x = 1 / x;\n \t}\n-return(pow);\n+      for (u = n;;)\n+\t{\n+\t  if (u & 01)\n+\t    pow *= x;\n+\t  if (u >>= 1)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return (pow);\n }"}, {"sha": "3379d8a7f7cea056602f3a6b81e9b13ccd7a27e0", "filename": "libf2c/libF77/pow_hh.c", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_hh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_hh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_hh.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,29 +1,31 @@\n #include \"f2c.h\"\n \n-shortint pow_hh(shortint *ap, shortint *bp)\n+shortint\n+pow_hh (shortint * ap, shortint * bp)\n {\n-\tshortint pow, x, n;\n-\tunsigned u;\n+  shortint pow, x, n;\n+  unsigned u;\n \n-\tx = *ap;\n-\tn = *bp;\n+  x = *ap;\n+  n = *bp;\n \n-\tif (n <= 0) {\n-\t\tif (n == 0 || x == 1)\n-\t\t\treturn 1;\n-\t\tif (x != -1)\n-\t\t\treturn x == 0 ? 1/x : 0;\n-\t\tn = -n;\n-\t\t}\n-\tu = n;\n-\tfor(pow = 1; ; )\n-\t\t{\n-\t\tif(u & 01)\n-\t\t\tpow *= x;\n-\t\tif(u >>= 1)\n-\t\t\tx *= x;\n-\t\telse\n-\t\t\tbreak;\n-\t\t}\n-\treturn(pow);\n-\t}\n+  if (n <= 0)\n+    {\n+      if (n == 0 || x == 1)\n+\treturn 1;\n+      if (x != -1)\n+\treturn x == 0 ? 1 / x : 0;\n+      n = -n;\n+    }\n+  u = n;\n+  for (pow = 1;;)\n+    {\n+      if (u & 01)\n+\tpow *= x;\n+      if (u >>= 1)\n+\tx *= x;\n+      else\n+\tbreak;\n+    }\n+  return (pow);\n+}"}, {"sha": "92347453fb09df52de65282d73861646708a0916", "filename": "libf2c/libF77/pow_ii.c", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_ii.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_ii.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_ii.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,29 +1,31 @@\n #include \"f2c.h\"\n \n-integer pow_ii(integer *ap, integer *bp)\n+integer\n+pow_ii (integer * ap, integer * bp)\n {\n-\tinteger pow, x, n;\n-\tunsigned long u;\n+  integer pow, x, n;\n+  unsigned long u;\n \n-\tx = *ap;\n-\tn = *bp;\n+  x = *ap;\n+  n = *bp;\n \n-\tif (n <= 0) {\n-\t\tif (n == 0 || x == 1)\n-\t\t\treturn 1;\n-\t\tif (x != -1)\n-\t\t\treturn x == 0 ? 1/x : 0;\n-\t\tn = -n;\n-\t\t}\n-\tu = n;\n-\tfor(pow = 1; ; )\n-\t\t{\n-\t\tif(u & 01)\n-\t\t\tpow *= x;\n-\t\tif(u >>= 1)\n-\t\t\tx *= x;\n-\t\telse\n-\t\t\tbreak;\n-\t\t}\n-\treturn(pow);\n-\t}\n+  if (n <= 0)\n+    {\n+      if (n == 0 || x == 1)\n+\treturn 1;\n+      if (x != -1)\n+\treturn x == 0 ? 1 / x : 0;\n+      n = -n;\n+    }\n+  u = n;\n+  for (pow = 1;;)\n+    {\n+      if (u & 01)\n+\tpow *= x;\n+      if (u >>= 1)\n+\tx *= x;\n+      else\n+\tbreak;\n+    }\n+  return (pow);\n+}"}, {"sha": "0cec5ca7d8cb652d4cd3cba1577ee0b44e902b58", "filename": "libf2c/libF77/pow_qq.c", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_qq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_qq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_qq.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,29 +1,31 @@\n #include \"f2c.h\"\n \n-longint pow_qq(longint *ap, longint *bp)\n+longint\n+pow_qq (longint * ap, longint * bp)\n {\n-\tlongint pow, x, n;\n-\tunsigned long long u;\t/* system-dependent */\n+  longint pow, x, n;\n+  unsigned long long u;\t\t/* system-dependent */\n \n-\tx = *ap;\n-\tn = *bp;\n+  x = *ap;\n+  n = *bp;\n \n-\tif (n <= 0) {\n-\t\tif (n == 0 || x == 1)\n-\t\t\treturn 1;\n-\t\tif (x != -1)\n-\t\t\treturn x == 0 ? 1/x : 0;\n-\t\tn = -n;\n-\t\t}\n-\tu = n;\n-\tfor(pow = 1; ; )\n-\t\t{\n-\t\tif(u & 01)\n-\t\t\tpow *= x;\n-\t\tif(u >>= 1)\n-\t\t\tx *= x;\n-\t\telse\n-\t\t\tbreak;\n-\t\t}\n-\treturn(pow);\n-\t}\n+  if (n <= 0)\n+    {\n+      if (n == 0 || x == 1)\n+\treturn 1;\n+      if (x != -1)\n+\treturn x == 0 ? 1 / x : 0;\n+      n = -n;\n+    }\n+  u = n;\n+  for (pow = 1;;)\n+    {\n+      if (u & 01)\n+\tpow *= x;\n+      if (u >>= 1)\n+\tx *= x;\n+      else\n+\tbreak;\n+    }\n+  return (pow);\n+}"}, {"sha": "792db0c2018e811bbd7cecc24ee84cd14ed8c68d", "filename": "libf2c/libF77/pow_ri.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_ri.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_ri.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_ri.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,31 +1,32 @@\n #include \"f2c.h\"\n \n-double pow_ri(real *ap, integer *bp)\n+double\n+pow_ri (real * ap, integer * bp)\n {\n-double pow, x;\n-integer n;\n-unsigned long u;\n+  double pow, x;\n+  integer n;\n+  unsigned long u;\n \n-pow = 1;\n-x = *ap;\n-n = *bp;\n+  pow = 1;\n+  x = *ap;\n+  n = *bp;\n \n-if(n != 0)\n+  if (n != 0)\n+    {\n+      if (n < 0)\n \t{\n-\tif(n < 0)\n-\t\t{\n-\t\tn = -n;\n-\t\tx = 1/x;\n-\t\t}\n-\tfor(u = n; ; )\n-\t\t{\n-\t\tif(u & 01)\n-\t\t\tpow *= x;\n-\t\tif(u >>= 1)\n-\t\t\tx *= x;\n-\t\telse\n-\t\t\tbreak;\n-\t\t}\n+\t  n = -n;\n+\t  x = 1 / x;\n \t}\n-return(pow);\n+      for (u = n;;)\n+\t{\n+\t  if (u & 01)\n+\t    pow *= x;\n+\t  if (u >>= 1)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return (pow);\n }"}, {"sha": "214db3d7a0fb3a4c7c29383eda391adad3376beb", "filename": "libf2c/libF77/pow_zi.c", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_zi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_zi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_zi.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,49 +1,50 @@\n #include \"f2c.h\"\n \n-extern void z_div(doublecomplex*, doublecomplex*, doublecomplex*);\n-void pow_zi(doublecomplex *p, doublecomplex *a, integer *b) \t/* p = a**b  */\n+extern void z_div (doublecomplex *, doublecomplex *, doublecomplex *);\n+void\n+pow_zi (doublecomplex * p, doublecomplex * a, integer * b)\t/* p = a**b  */\n {\n-\tinteger n;\n-\tunsigned long u;\n-\tdouble t;\n-\tdoublecomplex q, x;\n-\tstatic doublecomplex one = {1.0, 0.0};\n+  integer n;\n+  unsigned long u;\n+  double t;\n+  doublecomplex q, x;\n+  static doublecomplex one = { 1.0, 0.0 };\n \n-\tn = *b;\n-\tq.r = 1;\n-\tq.i = 0;\n+  n = *b;\n+  q.r = 1;\n+  q.i = 0;\n \n-\tif(n == 0)\n-\t\tgoto done;\n-\tif(n < 0)\n-\t\t{\n-\t\tn = -n;\n-\t\tz_div(&x, &one, a);\n-\t\t}\n-\telse\n-\t\t{\n-\t\tx.r = a->r;\n-\t\tx.i = a->i;\n-\t\t}\n+  if (n == 0)\n+    goto done;\n+  if (n < 0)\n+    {\n+      n = -n;\n+      z_div (&x, &one, a);\n+    }\n+  else\n+    {\n+      x.r = a->r;\n+      x.i = a->i;\n+    }\n \n-\tfor(u = n; ; )\n-\t\t{\n-\t\tif(u & 01)\n-\t\t\t{\n-\t\t\tt = q.r * x.r - q.i * x.i;\n-\t\t\tq.i = q.r * x.i + q.i * x.r;\n-\t\t\tq.r = t;\n-\t\t\t}\n-\t\tif(u >>= 1)\n-\t\t\t{\n-\t\t\tt = x.r * x.r - x.i * x.i;\n-\t\t\tx.i = 2 * x.r * x.i;\n-\t\t\tx.r = t;\n-\t\t\t}\n-\t\telse\n-\t\t\tbreak;\n-\t\t}\n- done:\n-\tp->i = q.i;\n-\tp->r = q.r;\n+  for (u = n;;)\n+    {\n+      if (u & 01)\n+\t{\n+\t  t = q.r * x.r - q.i * x.i;\n+\t  q.i = q.r * x.i + q.i * x.r;\n+\t  q.r = t;\n \t}\n+      if (u >>= 1)\n+\t{\n+\t  t = x.r * x.r - x.i * x.i;\n+\t  x.i = 2 * x.r * x.i;\n+\t  x.r = t;\n+\t}\n+      else\n+\tbreak;\n+    }\n+done:\n+  p->i = q.i;\n+  p->r = q.r;\n+}"}, {"sha": "522b639bc7e885e1cee128c642ed054d593676da", "filename": "libf2c/libF77/pow_zz.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_zz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fpow_zz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fpow_zz.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,17 +2,18 @@\n \n #undef abs\n #include <math.h>\n-extern double f__cabs(double,double);\n-void pow_zz(doublecomplex *r, doublecomplex *a, doublecomplex *b)\n+extern double f__cabs (double, double);\n+void\n+pow_zz (doublecomplex * r, doublecomplex * a, doublecomplex * b)\n {\n-double logr, logi, x, y;\n+  double logr, logi, x, y;\n \n-logr = log( f__cabs(a->r, a->i) );\n-logi = atan2(a->i, a->r);\n+  logr = log (f__cabs (a->r, a->i));\n+  logi = atan2 (a->i, a->r);\n \n-x = exp( logr * b->r - logi * b->i );\n-y = logr * b->i + logi * b->r;\n+  x = exp (logr * b->r - logi * b->i);\n+  y = logr * b->i + logi * b->r;\n \n-r->r = x * cos(y);\n-r->i = x * sin(y);\n+  r->r = x * cos (y);\n+  r->i = x * sin (y);\n }"}, {"sha": "c2a87c24f303f842eafa87d7537c72f243ecb2b4", "filename": "libf2c/libF77/qbitbits.c", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fqbitbits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fqbitbits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fqbitbits.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -8,51 +8,55 @@\n #define LONG8BITS (2*LONGBITS)\n #endif\n \n- integer\n-qbit_bits(longint a, integer b, integer len)\n+integer\n+qbit_bits (longint a, integer b, integer len)\n {\n-\t/* Assume 2's complement arithmetic */\n+  /* Assume 2's complement arithmetic */\n \n-\tulongint x, y;\n+  ulongint x, y;\n \n-\tx = (ulongint) a;\n-\ty = (ulongint)-1L;\n-\tx >>= b;\n-\ty <<= len;\n-\treturn (longint)(x & y);\n-\t}\n+  x = (ulongint) a;\n+  y = (ulongint) - 1L;\n+  x >>= b;\n+  y <<= len;\n+  return (longint) (x & y);\n+}\n \n- longint\n-qbit_cshift(longint a, integer b, integer len)\n+longint\n+qbit_cshift (longint a, integer b, integer len)\n {\n-\tulongint x, y, z;\n+  ulongint x, y, z;\n \n-\tx = (ulongint)a;\n-\tif (len <= 0) {\n-\t\tif (len == 0)\n-\t\t\treturn 0;\n-\t\tgoto full_len;\n-\t\t}\n-\tif (len >= LONG8BITS) {\n- full_len:\n-\t\tif (b >= 0) {\n-\t\t\tb %= LONG8BITS;\n-\t\t\treturn (longint)(x << b | x >> LONG8BITS - b );\n-\t\t\t}\n-\t\tb = -b;\n-\t\tb %= LONG8BITS;\n-\t\treturn (longint)(x << LONG8BITS - b | x >> b);\n-\t\t}\n-\ty = z = (unsigned long)-1;\n-\ty <<= len;\n-\tz &= ~y;\n-\ty &= x;\n-\tx &= z;\n-\tif (b >= 0) {\n-\t\tb %= len;\n-\t\treturn (longint)(y | z & (x << b | x >> len - b));\n-\t\t}\n-\tb = -b;\n-\tb %= len;\n-\treturn (longint)(y | z & (x >> b | x << len - b));\n+  x = (ulongint) a;\n+  if (len <= 0)\n+    {\n+      if (len == 0)\n+\treturn 0;\n+      goto full_len;\n+    }\n+  if (len >= LONG8BITS)\n+    {\n+    full_len:\n+      if (b >= 0)\n+\t{\n+\t  b %= LONG8BITS;\n+\t  return (longint) (x << b | x >> LONG8BITS - b);\n \t}\n+      b = -b;\n+      b %= LONG8BITS;\n+      return (longint) (x << LONG8BITS - b | x >> b);\n+    }\n+  y = z = (unsigned long) -1;\n+  y <<= len;\n+  z &= ~y;\n+  y &= x;\n+  x &= z;\n+  if (b >= 0)\n+    {\n+      b %= len;\n+      return (longint) (y | z & (x << b | x >> len - b));\n+    }\n+  b = -b;\n+  b %= len;\n+  return (longint) (y | z & (x >> b | x << len - b));\n+}"}, {"sha": "ce740edde19024e44865061bc02913847736d014", "filename": "libf2c/libF77/qbitshft.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fqbitshft.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fqbitshft.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fqbitshft.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,7 @@\n #include \"f2c.h\"\n \n- longint\n-qbit_shift(longint a, integer b)\n+longint\n+qbit_shift (longint a, integer b)\n {\n-\treturn b >= 0 ? a << b : (longint)((ulongint)a >> -b);\n-\t}\n+  return b >= 0 ? a << b : (longint) ((ulongint) a >> -b);\n+}"}, {"sha": "6f62724ef17a1ed6773267bb3e6f04553bfe1805", "filename": "libf2c/libF77/r_abs.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_abs.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-double r_abs(real *x)\n+double\n+r_abs (real * x)\n {\n-if(*x >= 0)\n-\treturn(*x);\n-return(- *x);\n+  if (*x >= 0)\n+    return (*x);\n+  return (-*x);\n }"}, {"sha": "d761cfdc5c8648dc0f5a415fdf44466fad44ed7a", "filename": "libf2c/libF77/r_acos.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_acos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_acos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_acos.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_acos(real *x)\n+double\n+r_acos (real * x)\n {\n-return( acos(*x) );\n+  return (acos (*x));\n }"}, {"sha": "b8c73c786afa1a77af5acafd01582ba291d1bdd9", "filename": "libf2c/libF77/r_asin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_asin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_asin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_asin.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_asin(real *x)\n+double\n+r_asin (real * x)\n {\n-return( asin(*x) );\n+  return (asin (*x));\n }"}, {"sha": "33a6589fda9d82c3931477a56ee3cdbd1f05d6c1", "filename": "libf2c/libF77/r_atan.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_atan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_atan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_atan.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_atan(real *x)\n+double\n+r_atan (real * x)\n {\n-return( atan(*x) );\n+  return (atan (*x));\n }"}, {"sha": "076d8743b1e60f426a334461ca5d6a2e5d7527c2", "filename": "libf2c/libF77/r_atn2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_atn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_atn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_atn2.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_atn2(real *x, real *y)\n+double\n+r_atn2 (real * x, real * y)\n {\n-return( atan2(*x,*y) );\n+  return (atan2 (*x, *y));\n }"}, {"sha": "5f849291b2072c0db48cb5d9707981d00529de53", "filename": "libf2c/libF77/r_cnjg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_cnjg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_cnjg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_cnjg.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,9 +1,9 @@\n #include \"f2c.h\"\n \n void\n-r_cnjg(complex *r, complex *z)\n+r_cnjg (complex * r, complex * z)\n {\n-\treal zi = z->i;\n-\tr->r = z->r;\n-\tr->i = -zi;\n-\t}\n+  real zi = z->i;\n+  r->r = z->r;\n+  r->i = -zi;\n+}"}, {"sha": "ed556e81e870550face9454c634e8acdcd5c6845", "filename": "libf2c/libF77/r_cos.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_cos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_cos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_cos.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_cos(real *x)\n+double\n+r_cos (real * x)\n {\n-return( cos(*x) );\n+  return (cos (*x));\n }"}, {"sha": "b22e0cf0a3d142917119335a7964cc18b3e9a943", "filename": "libf2c/libF77/r_cosh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_cosh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_cosh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_cosh.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_cosh(real *x)\n+double\n+r_cosh (real * x)\n {\n-return( cosh(*x) );\n+  return (cosh (*x));\n }"}, {"sha": "48d2fc7f7672468c2553a4904ee2e0f3ef39c7d7", "filename": "libf2c/libF77/r_dim.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_dim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_dim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_dim.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-double r_dim(real *a, real *b)\n+double\n+r_dim (real * a, real * b)\n {\n-return( *a > *b ? *a - *b : 0);\n+  return (*a > *b ? *a - *b : 0);\n }"}, {"sha": "7c1ceea5895d6a098342dccdb00ec6b1755f9088", "filename": "libf2c/libF77/r_exp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_exp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_exp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_exp.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_exp(real *x)\n+double\n+r_exp (real * x)\n {\n-return( exp(*x) );\n+  return (exp (*x));\n }"}, {"sha": "784abc8434b285d9691eca43d14f613041336ad8", "filename": "libf2c/libF77/r_imag.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_imag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_imag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_imag.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,6 +1,7 @@\n #include \"f2c.h\"\n \n-double r_imag(complex *z)\n+double\n+r_imag (complex * z)\n {\n-return(z->i);\n+  return (z->i);\n }"}, {"sha": "3c1b28ea4c7cb080b912c33e1ab9c928f08ae0fa", "filename": "libf2c/libF77/r_int.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_int.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_int(real *x)\n+double\n+r_int (real * x)\n {\n-return( (*x>0) ? floor(*x) : -floor(- *x) );\n+  return ((*x > 0) ? floor (*x) : -floor (-*x));\n }"}, {"sha": "563e73c4d8cdd21672f02834283272f70a8c7b95", "filename": "libf2c/libF77/r_lg10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_lg10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_lg10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_lg10.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -4,7 +4,8 @@\n \n #undef abs\n #include <math.h>\n-double r_lg10(real *x)\n+double\n+r_lg10 (real * x)\n {\n-return( log10e * log(*x) );\n+  return (log10e * log (*x));\n }"}, {"sha": "eaaecc836f263f2428ff94771ca495a3820cb4c5", "filename": "libf2c/libF77/r_log.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_log.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_log(real *x)\n+double\n+r_log (real * x)\n {\n-return( log(*x) );\n+  return (log (*x));\n }"}, {"sha": "9518d66ce998c3392230610a8d4cdfca29360897", "filename": "libf2c/libF77/r_mod.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_mod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_mod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_mod.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,31 +1,33 @@\n #include \"f2c.h\"\n \n #ifdef IEEE_drem\n-double drem(double, double);\n+double drem (double, double);\n #else\n #undef abs\n #include <math.h>\n #endif\n-double r_mod(real *x, real *y)\n+double\n+r_mod (real * x, real * y)\n {\n #ifdef IEEE_drem\n-\tdouble xa, ya, z;\n-\tif ((ya = *y) < 0.)\n-\t\tya = -ya;\n-\tz = drem(xa = *x, ya);\n-\tif (xa > 0) {\n-\t\tif (z < 0)\n-\t\t\tz += ya;\n-\t\t}\n-\telse if (z > 0)\n-\t\tz -= ya;\n-\treturn z;\n+  double xa, ya, z;\n+  if ((ya = *y) < 0.)\n+    ya = -ya;\n+  z = drem (xa = *x, ya);\n+  if (xa > 0)\n+    {\n+      if (z < 0)\n+\tz += ya;\n+    }\n+  else if (z > 0)\n+    z -= ya;\n+  return z;\n #else\n-\tdouble quotient;\n-\tif( (quotient = (double)*x / *y) >= 0)\n-\t\tquotient = floor(quotient);\n-\telse\n-\t\tquotient = -floor(-quotient);\n-\treturn(*x - (*y) * quotient );\n+  double quotient;\n+  if ((quotient = (double) *x / *y) >= 0)\n+    quotient = floor (quotient);\n+  else\n+    quotient = -floor (-quotient);\n+  return (*x - (*y) * quotient);\n #endif\n }"}, {"sha": "f2713d588b1bb258c7bc000601620b5b385fad63", "filename": "libf2c/libF77/r_nint.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_nint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_nint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_nint.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,8 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_nint(real *x)\n+double\n+r_nint (real * x)\n {\n-return( (*x)>=0 ?\n-\tfloor(*x + .5) : -floor(.5 - *x) );\n+  return ((*x) >= 0 ? floor (*x + .5) : -floor (.5 - *x));\n }"}, {"sha": "f53c6bf92200230de517335ab8575fe5b25c64f4", "filename": "libf2c/libF77/r_sign.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_sign.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,9 @@\n #include \"f2c.h\"\n \n-double r_sign(real *a, real *b)\n+double\n+r_sign (real * a, real * b)\n {\n-double x;\n-x = (*a >= 0 ? *a : - *a);\n-return( *b >= 0 ? x : -x);\n+  double x;\n+  x = (*a >= 0 ? *a : -*a);\n+  return (*b >= 0 ? x : -x);\n }"}, {"sha": "5a5ef136a8c65916ec3c6d945813e7d60540a47d", "filename": "libf2c/libF77/r_sin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_sin.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_sin(real *x)\n+double\n+r_sin (real * x)\n {\n-return( sin(*x) );\n+  return (sin (*x));\n }"}, {"sha": "723c7ab29c38b28ecb4822216cbea63d44c8c4c5", "filename": "libf2c/libF77/r_sinh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sinh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sinh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_sinh.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_sinh(real *x)\n+double\n+r_sinh (real * x)\n {\n-return( sinh(*x) );\n+  return (sinh (*x));\n }"}, {"sha": "ed832ba70e171e9f733b2b6019533a87c814b0f1", "filename": "libf2c/libF77/r_sqrt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_sqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_sqrt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_sqrt(real *x)\n+double\n+r_sqrt (real * x)\n {\n-return( sqrt(*x) );\n+  return (sqrt (*x));\n }"}, {"sha": "4ef913e6522c0a1f39531ae16cd6250818561aa0", "filename": "libf2c/libF77/r_tan.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_tan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_tan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_tan.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_tan(real *x)\n+double\n+r_tan (real * x)\n {\n-return( tan(*x) );\n+  return (tan (*x));\n }"}, {"sha": "6f2552a9f97acdb5460820fe9c0947b45c063ea2", "filename": "libf2c/libF77/r_tanh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_tanh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fr_tanh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fr_tanh.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,7 +2,8 @@\n \n #undef abs\n #include <math.h>\n-double r_tanh(real *x)\n+double\n+r_tanh (real * x)\n {\n-return( tanh(*x) );\n+  return (tanh (*x));\n }"}, {"sha": "4e8da1b3fdb02956791fc68407ab9473eebf277a", "filename": "libf2c/libF77/s_cat.c", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_cat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_cat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_cat.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -10,56 +10,61 @@\n #undef min\n #undef max\n #include <stdlib.h>\n- extern char *F77_aloc(ftnlen, char*);\n+extern char *F77_aloc (ftnlen, char *);\n #include <string.h>\n #endif /* NO_OVERWRITE */\n \n void\n-s_cat(char *lp, char *rpp[], ftnint rnp[], ftnint *np, ftnlen ll)\n+s_cat (char *lp, char *rpp[], ftnint rnp[], ftnint * np, ftnlen ll)\n {\n-\tftnlen i, nc;\n-\tchar *rp;\n-\tftnlen n = *np;\n+  ftnlen i, nc;\n+  char *rp;\n+  ftnlen n = *np;\n #ifndef NO_OVERWRITE\n-\tftnlen L, m;\n-\tchar *lp0, *lp1;\n+  ftnlen L, m;\n+  char *lp0, *lp1;\n \n-\tlp0 = 0;\n-\tlp1 = lp;\n-\tL = ll;\n-\ti = 0;\n-\twhile(i < n) {\n-\t\trp = rpp[i];\n-\t\tm = rnp[i++];\n-\t\tif (rp >= lp1 || rp + m <= lp) {\n-\t\t\tif ((L -= m) <= 0) {\n-\t\t\t\tn = i;\n-\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\tlp1 += m;\n-\t\t\tcontinue;\n-\t\t\t}\n-\t\tlp0 = lp;\n-\t\tlp = lp1 = F77_aloc(L = ll, \"s_cat\");\n-\t\tbreak;\n-\t\t}\n-\tlp1 = lp;\n+  lp0 = 0;\n+  lp1 = lp;\n+  L = ll;\n+  i = 0;\n+  while (i < n)\n+    {\n+      rp = rpp[i];\n+      m = rnp[i++];\n+      if (rp >= lp1 || rp + m <= lp)\n+\t{\n+\t  if ((L -= m) <= 0)\n+\t    {\n+\t      n = i;\n+\t      break;\n+\t    }\n+\t  lp1 += m;\n+\t  continue;\n+\t}\n+      lp0 = lp;\n+      lp = lp1 = F77_aloc (L = ll, \"s_cat\");\n+      break;\n+    }\n+  lp1 = lp;\n #endif /* NO_OVERWRITE */\n-\tfor(i = 0 ; i < n ; ++i) {\n-\t\tnc = ll;\n-\t\tif(rnp[i] < nc)\n-\t\t\tnc = rnp[i];\n-\t\tll -= nc;\n-\t\trp = rpp[i];\n-\t\twhile(--nc >= 0)\n-\t\t\t*lp++ = *rp++;\n-\t\t}\n-\twhile(--ll >= 0)\n-\t\t*lp++ = ' ';\n+  for (i = 0; i < n; ++i)\n+    {\n+      nc = ll;\n+      if (rnp[i] < nc)\n+\tnc = rnp[i];\n+      ll -= nc;\n+      rp = rpp[i];\n+      while (--nc >= 0)\n+\t*lp++ = *rp++;\n+    }\n+  while (--ll >= 0)\n+    *lp++ = ' ';\n #ifndef NO_OVERWRITE\n-\tif (lp0) {\n-\t\tmemcpy(lp0, lp1, L);\n-\t\tfree(lp1);\n-\t\t}\n+  if (lp0)\n+    {\n+      memcpy (lp0, lp1, L);\n+      free (lp1);\n+    }\n #endif\n-\t}\n+}"}, {"sha": "5b43c9edb9c3fa8694016894fad772ac241871c3", "filename": "libf2c/libF77/s_cmp.c", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_cmp.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,39 +2,48 @@\n \n /* compare two strings */\n \n-integer s_cmp(char *a0, char *b0, ftnlen la, ftnlen lb)\n+integer\n+s_cmp (char *a0, char *b0, ftnlen la, ftnlen lb)\n {\n-register unsigned char *a, *aend, *b, *bend;\n-a = (unsigned char *)a0;\n-b = (unsigned char *)b0;\n-aend = a + la;\n-bend = b + lb;\n+  register unsigned char *a, *aend, *b, *bend;\n+  a = (unsigned char *) a0;\n+  b = (unsigned char *) b0;\n+  aend = a + la;\n+  bend = b + lb;\n \n-if(la <= lb)\n-\t{\n-\twhile(a < aend)\n-\t\tif(*a != *b)\n-\t\t\treturn( *a - *b );\n-\t\telse\n-\t\t\t{ ++a; ++b; }\n+  if (la <= lb)\n+    {\n+      while (a < aend)\n+\tif (*a != *b)\n+\t  return (*a - *b);\n+\telse\n+\t  {\n+\t    ++a;\n+\t    ++b;\n+\t  }\n \n-\twhile(b < bend)\n-\t\tif(*b != ' ')\n-\t\t\treturn( ' ' - *b );\n-\t\telse\t++b;\n-\t}\n+      while (b < bend)\n+\tif (*b != ' ')\n+\t  return (' ' - *b);\n+\telse\n+\t  ++b;\n+    }\n \n-else\n-\t{\n-\twhile(b < bend)\n-\t\tif(*a == *b)\n-\t\t\t{ ++a; ++b; }\n-\t\telse\n-\t\t\treturn( *a - *b );\n-\twhile(a < aend)\n-\t\tif(*a != ' ')\n-\t\t\treturn(*a - ' ');\n-\t\telse\t++a;\n-\t}\n-return(0);\n+  else\n+    {\n+      while (b < bend)\n+\tif (*a == *b)\n+\t  {\n+\t    ++a;\n+\t    ++b;\n+\t  }\n+\telse\n+\t  return (*a - *b);\n+      while (a < aend)\n+\tif (*a != ' ')\n+\t  return (*a - ' ');\n+\telse\n+\t  ++a;\n+    }\n+  return (0);\n }"}, {"sha": "a91071eccab369c68f690412c2c030902164a1ce", "filename": "libf2c/libF77/s_copy.c", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_copy.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -8,40 +8,43 @@\n \n /* assign strings:  a = b */\n \n-void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb)\n+void\n+s_copy (register char *a, register char *b, ftnlen la, ftnlen lb)\n {\n-\tregister char *aend, *bend;\n+  register char *aend, *bend;\n \n-\taend = a + la;\n+  aend = a + la;\n \n-\tif(la <= lb)\n+  if (la <= lb)\n #ifndef NO_OVERWRITE\n-\t\tif (a <= b || a >= b + la)\n+    if (a <= b || a >= b + la)\n #endif\n-\t\t\twhile(a < aend)\n-\t\t\t\t*a++ = *b++;\n+      while (a < aend)\n+\t*a++ = *b++;\n #ifndef NO_OVERWRITE\n-\t\telse\n-\t\t\tfor(b += la; a < aend; )\n-\t\t\t\t*--aend = *--b;\n+    else\n+      for (b += la; a < aend;)\n+\t*--aend = *--b;\n #endif\n \n-\telse {\n-\t\tbend = b + lb;\n+  else\n+    {\n+      bend = b + lb;\n #ifndef NO_OVERWRITE\n-\t\tif (a <= b || a >= bend)\n+      if (a <= b || a >= bend)\n #endif\n-\t\t\twhile(b < bend)\n-\t\t\t\t*a++ = *b++;\n+\twhile (b < bend)\n+\t  *a++ = *b++;\n #ifndef NO_OVERWRITE\n-\t\telse {\n-\t\t\ta += lb;\n-\t\t\twhile(b < bend)\n-\t\t\t\t*--a = *--bend;\n-\t\t\ta += lb;\n-\t\t\t}\n-#endif\n-\t\twhile(a < aend)\n-\t\t\t*a++ = ' ';\n-\t\t}\n+      else\n+\t{\n+\t  a += lb;\n+\t  while (b < bend)\n+\t    *--a = *--bend;\n+\t  a += lb;\n \t}\n+#endif\n+      while (a < aend)\n+\t*a++ = ' ';\n+    }\n+}"}, {"sha": "79691366e6fdcb803499c4d91724629934c2e780", "filename": "libf2c/libF77/s_paus.c", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_paus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_paus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_paus.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -7,61 +7,65 @@\n #undef min\n #undef max\n #include <stdlib.h>\n-extern int getpid(void), isatty(int), pause(void);\n+extern int getpid (void), isatty (int), pause (void);\n \n-extern void f_exit(void);\n+extern void f_exit (void);\n \n static void\n-waitpause(Sigarg)\n-{\tUse_Sigarg;\n-\treturn;\n-\t}\n+waitpause (Sigarg)\n+{\n+  Use_Sigarg;\n+  return;\n+}\n \n static void\n-s_1paus(FILE *fin)\n+s_1paus (FILE * fin)\n {\n-\tfprintf(stderr,\n-\t\"To resume execution, type go.  Other input will terminate the job.\\n\");\n-\tfflush(stderr);\n-\tif( getc(fin)!='g' || getc(fin)!='o' || getc(fin)!='\\n' ) {\n-\t\tfprintf(stderr, \"STOP\\n\");\n+  fprintf (stderr,\n+\t   \"To resume execution, type go.  Other input will terminate the job.\\n\");\n+  fflush (stderr);\n+  if (getc (fin) != 'g' || getc (fin) != 'o' || getc (fin) != '\\n')\n+    {\n+      fprintf (stderr, \"STOP\\n\");\n #ifdef NO_ONEXIT\n-\t\tf_exit();\n+      f_exit ();\n #endif\n-\t\texit(0);\n-\t\t}\n-\t}\n+      exit (0);\n+    }\n+}\n \n- int\n-s_paus(char *s, ftnlen n)\n+int\n+s_paus (char *s, ftnlen n)\n {\n-\tfprintf(stderr, \"PAUSE \");\n-\tif(n > 0)\n-\t\tfprintf(stderr, \" %.*s\", (int)n, s);\n-\tfprintf(stderr, \" statement executed\\n\");\n-\tif( isatty(fileno(stdin)) )\n-\t\ts_1paus(stdin);\n-\telse {\n+  fprintf (stderr, \"PAUSE \");\n+  if (n > 0)\n+    fprintf (stderr, \" %.*s\", (int) n, s);\n+  fprintf (stderr, \" statement executed\\n\");\n+  if (isatty (fileno (stdin)))\n+    s_1paus (stdin);\n+  else\n+    {\n #if (defined (MSDOS) && !defined (GO32)) || defined (_WIN32)\n-\t\tFILE *fin;\n-\t\tfin = fopen(\"con\", \"r\");\n-\t\tif (!fin) {\n-\t\t\tfprintf(stderr, \"s_paus: can't open con!\\n\");\n-\t\t\tfflush(stderr);\n-\t\t\texit(1);\n-\t\t\t}\n-\t\ts_1paus(fin);\n-\t\tfclose(fin);\n+      FILE *fin;\n+      fin = fopen (\"con\", \"r\");\n+      if (!fin)\n+\t{\n+\t  fprintf (stderr, \"s_paus: can't open con!\\n\");\n+\t  fflush (stderr);\n+\t  exit (1);\n+\t}\n+      s_1paus (fin);\n+      fclose (fin);\n #else\n-\t\tfprintf(stderr,\n-\t\t\"To resume execution, execute a   kill -%d %d   command\\n\",\n-\t\t\tPAUSESIG, getpid() );\n-\t\tsignal1(PAUSESIG, waitpause);\n-\t\tfflush(stderr);\n-\t\tpause();\n+      fprintf (stderr,\n+\t       \"To resume execution, execute a   kill -%d %d   command\\n\",\n+\t       PAUSESIG, getpid ());\n+      signal1 (PAUSESIG, waitpause);\n+      fflush (stderr);\n+      pause ();\n #endif\n-\t\t}\n-\tfprintf(stderr, \"Execution resumes after PAUSE.\\n\");\n-\tfflush(stderr);\n-\treturn 0; /* NOT REACHED */\n+    }\n+  fprintf (stderr, \"Execution resumes after PAUSE.\\n\");\n+  fflush (stderr);\n+  return 0;\t\t\t/* NOT REACHED */\n }"}, {"sha": "6c054c707f56bd4eada8f1cf574b05ffccd55c50", "filename": "libf2c/libF77/s_rnge.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_rnge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_rnge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_rnge.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -3,19 +3,20 @@\n \n /* called when a subscript is out of range */\n \n-extern void sig_die(char*,int);\n-integer s_rnge(char *varn, ftnint offset, char *procn, ftnint line)\n+extern void sig_die (char *, int);\n+integer\n+s_rnge (char *varn, ftnint offset, char *procn, ftnint line)\n {\n-register int i;\n+  register int i;\n \n-fprintf(stderr, \"Subscript out of range on file line %ld, procedure \",\n-\t(long)line);\n-while((i = *procn) && i != '_' && i != ' ')\n-\tputc(*procn++, stderr);\n-fprintf(stderr, \".\\nAttempt to access the %ld-th element of variable \",\n-\t(long)offset+1);\n-while((i = *varn) && i != ' ')\n-\tputc(*varn++, stderr);\n-sig_die(\".\", 1);\n-return 0;\t/* not reached */\n+  fprintf (stderr, \"Subscript out of range on file line %ld, procedure \",\n+\t   (long) line);\n+  while ((i = *procn) && i != '_' && i != ' ')\n+    putc (*procn++, stderr);\n+  fprintf (stderr, \".\\nAttempt to access the %ld-th element of variable \",\n+\t   (long) offset + 1);\n+  while ((i = *varn) && i != ' ')\n+    putc (*varn++, stderr);\n+  sig_die (\".\", 1);\n+  return 0;\t\t\t/* not reached */\n }"}, {"sha": "571416be7bbf8c1a16c42dedb507f1125080aa77", "filename": "libf2c/libF77/s_stop.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_stop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fs_stop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_stop.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -5,27 +5,28 @@\n #undef min\n #undef max\n #include <stdlib.h>\n-void f_exit(void);\n+void f_exit (void);\n \n-int s_stop(char *s, ftnlen n)\n+int\n+s_stop (char *s, ftnlen n)\n {\n-int i;\n+  int i;\n \n-if(n > 0)\n-\t{\n-\tfprintf(stderr, \"STOP \");\n-\tfor(i = 0; i<n ; ++i)\n-\t\tputc(*s++, stderr);\n-\tfprintf(stderr, \" statement executed\\n\");\n-\t}\n+  if (n > 0)\n+    {\n+      fprintf (stderr, \"STOP \");\n+      for (i = 0; i < n; ++i)\n+\tputc (*s++, stderr);\n+      fprintf (stderr, \" statement executed\\n\");\n+    }\n #ifdef NO_ONEXIT\n-f_exit();\n+  f_exit ();\n #endif\n-exit(0);\n+  exit (0);\n \n /* We cannot avoid (useless) compiler diagnostics here:\t\t*/\n /* some compilers complain if there is no return statement,\t*/\n /* and others complain that this one cannot be reached.\t\t*/\n \n-return 0; /* NOT REACHED */\n+  return 0;\t\t\t/* NOT REACHED */\n }"}, {"sha": "49515746f4825ca7cff85083c291cf66e69411d1", "filename": "libf2c/libF77/setarg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsetarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsetarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsetarg.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,9 +6,9 @@\n int f__xargc;\n char **f__xargv;\n \n- void\n-f_setarg(int argc, char **argv)\n+void\n+f_setarg (int argc, char **argv)\n {\n-f__xargc = argc;\n-f__xargv = argv;\n+  f__xargc = argc;\n+  f__xargv = argv;\n }"}, {"sha": "96826be94fd1b58ee5f69c75c6ea38d120d69355", "filename": "libf2c/libF77/setsig.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsetsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsetsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsetsig.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -11,76 +11,76 @@\n \n #include <stdlib.h>\n \n-extern void sig_die(char*, int);\n+extern void sig_die (char *, int);\n \n static void\n-sigfdie(Sigarg)\n+sigfdie (Sigarg)\n {\n-Use_Sigarg;\n-sig_die(\"Floating Exception\", 1);\n+  Use_Sigarg;\n+  sig_die (\"Floating Exception\", 1);\n }\n \n \n static void\n-sigidie(Sigarg)\n+sigidie (Sigarg)\n {\n-Use_Sigarg;\n-sig_die(\"IOT Trap\", 1);\n+  Use_Sigarg;\n+  sig_die (\"IOT Trap\", 1);\n }\n \n #ifdef SIGQUIT\n static void\n-sigqdie(Sigarg)\n+sigqdie (Sigarg)\n {\n-Use_Sigarg;\n-sig_die(\"Quit signal\", 1);\n+  Use_Sigarg;\n+  sig_die (\"Quit signal\", 1);\n }\n #endif\n \n \n static void\n-sigindie(Sigarg)\n+sigindie (Sigarg)\n {\n-Use_Sigarg;\n-sig_die(\"Interrupt\", 0);\n+  Use_Sigarg;\n+  sig_die (\"Interrupt\", 0);\n }\n \n static void\n-sigtdie(Sigarg)\n+sigtdie (Sigarg)\n {\n-Use_Sigarg;\n-sig_die(\"Killed\", 0);\n+  Use_Sigarg;\n+  sig_die (\"Killed\", 0);\n }\n \n #ifdef SIGTRAP\n static void\n-sigtrdie(Sigarg)\n+sigtrdie (Sigarg)\n {\n-Use_Sigarg;\n-sig_die(\"Trace trap\", 1);\n+  Use_Sigarg;\n+  sig_die (\"Trace trap\", 1);\n }\n #endif\n \n \n- void\n-f_setsig()\n+void\n+f_setsig ()\n {\n-signal1(SIGFPE, sigfdie);\t/* ignore underflow, enable overflow */\n+  signal1 (SIGFPE, sigfdie);\t/* ignore underflow, enable overflow */\n #ifdef SIGIOT\n-signal1(SIGIOT, sigidie);\n+  signal1 (SIGIOT, sigidie);\n #endif\n #ifdef SIGTRAP\n-signal1(SIGTRAP, sigtrdie);\n+  signal1 (SIGTRAP, sigtrdie);\n #endif\n #ifdef SIGQUIT\n-if(signal1(SIGQUIT,sigqdie) == SIG_IGN)\n-\tsignal1(SIGQUIT, SIG_IGN);\n+  if (signal1 (SIGQUIT, sigqdie) == SIG_IGN)\n+    signal1 (SIGQUIT, SIG_IGN);\n #endif\n-if(signal1(SIGINT, sigindie) == SIG_IGN)\n-\tsignal1(SIGINT, SIG_IGN);\n-signal1(SIGTERM,sigtdie);\n+  if (signal1 (SIGINT, sigindie) == SIG_IGN)\n+    signal1 (SIGINT, SIG_IGN);\n+  signal1 (SIGTERM, sigtdie);\n \n #ifdef pdp11\n-\tldfps(01200); /* detect overflow as an exception */\n+  ldfps (01200);\t\t/* detect overflow as an exception */\n #endif\n }"}, {"sha": "622462e248baa68968c2736350b5a48d99773e34", "filename": "libf2c/libF77/sig_die.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsig_die.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsig_die.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsig_die.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -8,28 +8,30 @@\n #endif\n \n #include <stdlib.h>\n- extern void f_exit(void);\n+extern void f_exit (void);\n \n-void sig_die(register char *s, int kill)\n+void\n+sig_die (register char *s, int kill)\n {\n-\t/* print error message, then clear buffers */\n-\tfprintf(stderr, \"%s\\n\", s);\n+  /* print error message, then clear buffers */\n+  fprintf (stderr, \"%s\\n\", s);\n \n-\tif(kill)\n-\t\t{\n-\t\tfflush(stderr);\n-\t\tf_exit();\n-\t\tfflush(stderr);\n-\t\t/* now get a core */\n+  if (kill)\n+    {\n+      fflush (stderr);\n+      f_exit ();\n+      fflush (stderr);\n+      /* now get a core */\n #ifdef SIGIOT\n-\t\tsignal(SIGIOT, SIG_DFL);\n+      signal (SIGIOT, SIG_DFL);\n #endif\n-\t\tabort();\n-\t\t}\n-\telse {\n+      abort ();\n+    }\n+  else\n+    {\n #ifdef NO_ONEXIT\n-\t\tf_exit();\n+      f_exit ();\n #endif\n-\t\texit(1);\n-\t\t}\n-\t}\n+      exit (1);\n+    }\n+}"}, {"sha": "0e2fcf2c1e62fa19a56eeeccf0d180bea8f65413", "filename": "libf2c/libF77/signal1.h0", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsignal1.h0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsignal1.h0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsignal1.h0?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -12,12 +12,12 @@\n #endif\n #ifndef Sigarg_t\n #define Sigarg_t int\n-#endif /*Sigarg_t*/\n+#endif /*Sigarg_t */\n \n-#ifdef USE_SIG_PF\t/* compile with -DUSE_SIG_PF under IRIX */\n+#ifdef USE_SIG_PF\t\t/* compile with -DUSE_SIG_PF under IRIX */\n #define sig_pf SIG_PF\n #else\n-typedef Sigret_t (*sig_pf)(Sigarg_t);\n+typedef Sigret_t (*sig_pf) (Sigarg_t);\n #endif\n \n #define signal1(a,b) signal(a,(sig_pf)b)"}, {"sha": "f67831c3c4348570d18ec15354f09eccaa9ad00a", "filename": "libf2c/libF77/signal_.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsignal_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsignal_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsignal_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,10 +2,10 @@\n #include \"signal1.h\"\n \n void *\n-G77_signal_0 (integer *sigp, sig_pf proc)\n+G77_signal_0 (integer * sigp, sig_pf proc)\n {\n-\tint sig;\n-\tsig = (int)*sigp;\n+  int sig;\n+  sig = (int) *sigp;\n \n-\treturn (void *) signal(sig, proc);\n-\t}\n+  return (void *) signal (sig, proc);\n+}"}, {"sha": "b8d1d3d2ea43d10238028c36e99d92688eb4c94c", "filename": "libf2c/libF77/system_.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsystem_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fsystem_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsystem_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,24 +6,23 @@\n #undef min\n #undef max\n #include <stdlib.h>\n-extern char *F77_aloc(ftnlen, char*);\n+extern char *F77_aloc (ftnlen, char *);\n \n- integer\n+integer\n G77_system_0 (register char *s, ftnlen n)\n {\n-\tchar buff0[256], *buff;\n-\tregister char *bp, *blast;\n-\tinteger rv;\n+  char buff0[256], *buff;\n+  register char *bp, *blast;\n+  integer rv;\n \n-\tbuff = bp = n < sizeof(buff0)\n-\t\t\t? buff0 : F77_aloc(n+1, \"system_\");\n-\tblast = bp + n;\n+  buff = bp = n < sizeof (buff0) ? buff0 : F77_aloc (n + 1, \"system_\");\n+  blast = bp + n;\n \n-\twhile(bp < blast && *s)\n-\t\t*bp++ = *s++;\n-\t*bp = 0;\n-\trv = system(buff);\n-\tif (buff != buff0)\n-\t\tfree(buff);\n-\treturn rv;\n-\t}\n+  while (bp < blast && *s)\n+    *bp++ = *s++;\n+  *bp = 0;\n+  rv = system (buff);\n+  if (buff != buff0)\n+    free (buff);\n+  return rv;\n+}"}, {"sha": "2419c0eac4934542869cc50097e63bb112d3b025", "filename": "libf2c/libF77/z_abs.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_abs.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,8 @@\n #include \"f2c.h\"\n \n-double f__cabs(double, double);\n-double z_abs(doublecomplex *z)\n+double f__cabs (double, double);\n+double\n+z_abs (doublecomplex * z)\n {\n-return( f__cabs( z->r, z->i ) );\n+  return (f__cabs (z->r, z->i));\n }"}, {"sha": "0f4cd71bd5a411b88a5b671d98139af234ac2b78", "filename": "libf2c/libF77/z_cos.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_cos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_cos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_cos.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,9 +2,10 @@\n \n #undef abs\n #include \"math.h\"\n-void z_cos(doublecomplex *r, doublecomplex *z)\n+void\n+z_cos (doublecomplex * r, doublecomplex * z)\n {\n-\tdouble zi = z->i, zr = z->r;\n-\tr->r =   cos(zr) * cosh(zi);\n-\tr->i = - sin(zr) * sinh(zi);\n-\t}\n+  double zi = z->i, zr = z->r;\n+  r->r = cos (zr) * cosh (zi);\n+  r->i = -sin (zr) * sinh (zi);\n+}"}, {"sha": "a5fc527bdc2af5bb55144200465bdaf3767ce6ad", "filename": "libf2c/libF77/z_div.c", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_div.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,39 +1,41 @@\n #include \"f2c.h\"\n \n-extern void sig_die(char*, int);\n-void z_div(doublecomplex *c, doublecomplex *a, doublecomplex *b)\n+extern void sig_die (char *, int);\n+void\n+z_div (doublecomplex * c, doublecomplex * a, doublecomplex * b)\n {\n-\tdouble ratio, den;\n-\tdouble abr, abi, cr;\n+  double ratio, den;\n+  double abr, abi, cr;\n \n-\tif( (abr = b->r) < 0.)\n-\t\tabr = - abr;\n-\tif( (abi = b->i) < 0.)\n-\t\tabi = - abi;\n-\tif( abr <= abi )\n-\t\t{\n-\t\tif(abi == 0) {\n+  if ((abr = b->r) < 0.)\n+    abr = -abr;\n+  if ((abi = b->i) < 0.)\n+    abi = -abi;\n+  if (abr <= abi)\n+    {\n+      if (abi == 0)\n+\t{\n #ifdef IEEE_COMPLEX_DIVIDE\n-\t\t\tif (a->i != 0 || a->r != 0)\n-\t\t\t\tabi = 1.;\n-\t\t\tc->i = c->r = abi / abr;\n-\t\t\treturn;\n+\t  if (a->i != 0 || a->r != 0)\n+\t    abi = 1.;\n+\t  c->i = c->r = abi / abr;\n+\t  return;\n #else\n-\t\t\tsig_die(\"complex division by zero\", 1);\n+\t  sig_die (\"complex division by zero\", 1);\n #endif\n-\t\t\t}\n-\t\tratio = b->r / b->i ;\n-\t\tden = b->i * (1 + ratio*ratio);\n-\t\tcr = (a->r*ratio + a->i) / den;\n-\t\tc->i = (a->i*ratio - a->r) / den;\n-\t\t}\n-\n-\telse\n-\t\t{\n-\t\tratio = b->i / b->r ;\n-\t\tden = b->r * (1 + ratio*ratio);\n-\t\tcr = (a->r + a->i*ratio) / den;\n-\t\tc->i = (a->i - a->r*ratio) / den;\n-\t\t}\n-\tc->r = cr;\n \t}\n+      ratio = b->r / b->i;\n+      den = b->i * (1 + ratio * ratio);\n+      cr = (a->r * ratio + a->i) / den;\n+      c->i = (a->i * ratio - a->r) / den;\n+    }\n+\n+  else\n+    {\n+      ratio = b->i / b->r;\n+      den = b->r * (1 + ratio * ratio);\n+      cr = (a->r + a->i * ratio) / den;\n+      c->i = (a->i - a->r * ratio) / den;\n+    }\n+  c->r = cr;\n+}"}, {"sha": "16f51e74a45631b4e9ecda29cada3b96ded36d49", "filename": "libf2c/libF77/z_exp.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_exp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_exp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_exp.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,11 +2,12 @@\n \n #undef abs\n #include \"math.h\"\n-void z_exp(doublecomplex *r, doublecomplex *z)\n+void\n+z_exp (doublecomplex * r, doublecomplex * z)\n {\n-\tdouble expx, zi = z->i;\n+  double expx, zi = z->i;\n \n-\texpx = exp(z->r);\n-\tr->r = expx * cos(zi);\n-\tr->i = expx * sin(zi);\n-\t}\n+  expx = exp (z->r);\n+  r->r = expx * cos (zi);\n+  r->i = expx * sin (zi);\n+}"}, {"sha": "f56b12ed7e3957761ea41926baa8d5286c3e71f3", "filename": "libf2c/libF77/z_log.c", "status": "modified", "additions": 47, "deletions": 46, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_log.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,57 +2,58 @@\n \n #undef abs\n #include \"math.h\"\n-extern double f__cabs(double, double);\n-void z_log(doublecomplex *r, doublecomplex *z)\n+extern double f__cabs (double, double);\n+void\n+z_log (doublecomplex * r, doublecomplex * z)\n {\n-\tdouble s, s0, t, t2, u, v;\n-\tdouble zi = z->i, zr = z->r;\n+  double s, s0, t, t2, u, v;\n+  double zi = z->i, zr = z->r;\n \n-\tr->i = atan2(zi, zr);\n+  r->i = atan2 (zi, zr);\n #ifdef Pre20000310\n-\tr->r = log( f__cabs( zr, zi ) );\n+  r->r = log (f__cabs (zr, zi));\n #else\n-\tif (zi < 0)\n-\t\tzi = -zi;\n-\tif (zr < 0)\n-\t\tzr = -zr;\n-\tif (zr < zi) {\n-\t\tt = zi;\n-\t\tzi = zr;\n-\t\tzr = t;\n-\t\t}\n-\tt = zi/zr;\n-\ts = zr * sqrt(1 + t*t);\n-\t/* now s = f__cabs(zi,zr), and zr = |zr| >= |zi| = zi */\n-\tif ((t = s - 1) < 0)\n-\t\tt = -t;\n-\tif (t > .01)\n-\t\tr->r = log(s);\n-\telse {\n+  if (zi < 0)\n+    zi = -zi;\n+  if (zr < 0)\n+    zr = -zr;\n+  if (zr < zi)\n+    {\n+      t = zi;\n+      zi = zr;\n+      zr = t;\n+    }\n+  t = zi / zr;\n+  s = zr * sqrt (1 + t * t);\n+  /* now s = f__cabs(zi,zr), and zr = |zr| >= |zi| = zi */\n+  if ((t = s - 1) < 0)\n+    t = -t;\n+  if (t > .01)\n+    r->r = log (s);\n+  else\n+    {\n \n #ifdef Comment\n \n-\tlog(1+x) = x - x^2/2 + x^3/3 - x^4/4 + - ...\n-\n-\t\t = x(1 - x/2 + x^2/3 -+...)\n-\n-\t[sqrt(y^2 + z^2) - 1] * [sqrt(y^2 + z^2) + 1] = y^2 + z^2 - 1, so\n-\n-\tsqrt(y^2 + z^2) - 1 = (y^2 + z^2 - 1) / [sqrt(y^2 + z^2) + 1]\n-\n-#endif /*Comment*/\n-\n-\t\tt = ((zr*zr - 1.) + zi*zi) / (s + 1);\n-\t\tt2 = t*t;\n-\t\ts = 1. - 0.5*t;\n-\t\tu = v = 1;\n-\t\tdo {\n-\t\t\ts0 = s;\n-\t\t\tu *= t2;\n-\t\t\tv += 2;\n-\t\t\ts += u/v - t*u/(v+1);\n-\t\t\t} while(s > s0);\n-\t\tr->r = s*t;\n-\t\t}\n-#endif\n+      log (1 + x) = x - x ^ 2 / 2 + x ^ 3 / 3 - x ^ 4 / 4 + -...\n+\t= x (1 - x / 2 + x ^ 2 / 3 - +...)\n+\t[sqrt (y ^ 2 + z ^ 2) - 1] *[sqrt (y ^ 2 + z ^ 2) + 1] =\n+\ty ^ 2 + z ^ 2 - 1, so sqrt (y ^ 2 + z ^ 2) - 1 =\n+\t(y ^ 2 + z ^ 2 - 1) /[sqrt (y ^ 2 + z ^ 2) + 1]\n+#endif /*Comment */\n+\tt = ((zr * zr - 1.) + zi * zi) / (s + 1);\n+      t2 = t * t;\n+      s = 1. - 0.5 * t;\n+      u = v = 1;\n+      do\n+\t{\n+\t  s0 = s;\n+\t  u *= t2;\n+\t  v += 2;\n+\t  s += u / v - t * u / (v + 1);\n \t}\n+      while (s > s0);\n+      r->r = s * t;\n+    }\n+#endif\n+}"}, {"sha": "8cb44cf53ca2176dbf4f1beb1cf2840ed71ba2f3", "filename": "libf2c/libF77/z_sin.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_sin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_sin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_sin.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,9 +2,10 @@\n \n #undef abs\n #include \"math.h\"\n-void z_sin(doublecomplex *r, doublecomplex *z)\n+void\n+z_sin (doublecomplex * r, doublecomplex * z)\n {\n-\tdouble zi = z->i, zr = z->r;\n-\tr->r = sin(zr) * cosh(zi);\n-\tr->i = cos(zr) * sinh(zi);\n-\t}\n+  double zi = z->i, zr = z->r;\n+  r->r = sin (zr) * cosh (zi);\n+  r->i = cos (zr) * sinh (zi);\n+}"}, {"sha": "954c2fa18896f99cdc2cfecb3f2ba985dd2ebaa5", "filename": "libf2c/libF77/z_sqrt.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_sqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibF77%2Fz_sqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_sqrt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,23 +2,24 @@\n \n #undef abs\n #include \"math.h\"\n-extern double f__cabs(double, double);\n-void z_sqrt(doublecomplex *r, doublecomplex *z)\n+extern double f__cabs (double, double);\n+void\n+z_sqrt (doublecomplex * r, doublecomplex * z)\n {\n-\tdouble mag, zi = z->i, zr = z->r;\n+  double mag, zi = z->i, zr = z->r;\n \n-\tif( (mag = f__cabs(zr, zi)) == 0.)\n-\t\tr->r = r->i = 0.;\n-\telse if(zr > 0)\n-\t\t{\n-\t\tr->r = sqrt(0.5 * (mag + zr) );\n-\t\tr->i = zi / r->r / 2;\n-\t\t}\n-\telse\n-\t\t{\n-\t\tr->i = sqrt(0.5 * (mag - zr) );\n-\t\tif(zi < 0)\n-\t\t\tr->i = - r->i;\n-\t\tr->r = zi / r->i / 2;\n-\t\t}\n-\t}\n+  if ((mag = f__cabs (zr, zi)) == 0.)\n+    r->r = r->i = 0.;\n+  else if (zr > 0)\n+    {\n+      r->r = sqrt (0.5 * (mag + zr));\n+      r->i = zi / r->r / 2;\n+    }\n+  else\n+    {\n+      r->i = sqrt (0.5 * (mag - zr));\n+      if (zi < 0)\n+\tr->i = -r->i;\n+      r->r = zi / r->i / 2;\n+    }\n+}"}, {"sha": "c31e71147b50b02579cab5a6505e1afbd38025d4", "filename": "libf2c/libI77/backspace.c", "status": "modified", "additions": 73, "deletions": 62, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fbackspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fbackspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fbackspace.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,69 +2,80 @@\n #include <sys/types.h>\n #include \"f2c.h\"\n #include \"fio.h\"\n-integer f_back(alist *a)\n-{\tunit *b;\n-\toff_t v, w, x, y, z;\n-\tuiolen n;\n-\tFILE *f;\n+integer\n+f_back (alist * a)\n+{\n+  unit *b;\n+  off_t v, w, x, y, z;\n+  uiolen n;\n+  FILE *f;\n \n-\tf__curunit = b = &f__units[a->aunit];\t/* curunit for error messages */\n-\tif (f__init & 2)\n-\t\tf__fatal (131, \"I/O recursion\");\n-\tif(a->aunit >= MXUNIT || a->aunit < 0)\n-\t\terr(a->aerr,101,\"backspace\");\n-\tif(b->useek==0) err(a->aerr,106,\"backspace\");\n-\tif(b->ufd == NULL) {\n-\t\tfk_open(1, 1, a->aunit);\n-\t\treturn(0);\n-\t\t}\n-\tif(b->uend==1)\n-\t{\tb->uend=0;\n-\t\treturn(0);\n-\t}\n-\tif(b->uwrt) {\n-\t\tt_runc(a);\n-\t\tif (f__nowreading(b))\n-\t\t\terr(a->aerr,errno,\"backspace\");\n-\t\t}\n-\tf = b->ufd;\t/* may have changed in t_runc() */\n-\tif(b->url>0)\n-\t{\n-\t\tx=FTELL(f);\n-\t\ty = x % b->url;\n-\t\tif(y == 0) x--;\n-\t\tx /= b->url;\n-\t\tx *= b->url;\n-\t\tFSEEK(f,x,SEEK_SET);\n-\t\treturn(0);\n-\t}\n+  f__curunit = b = &f__units[a->aunit];\t/* curunit for error messages */\n+  if (f__init & 2)\n+    f__fatal (131, \"I/O recursion\");\n+  if (a->aunit >= MXUNIT || a->aunit < 0)\n+    err (a->aerr, 101, \"backspace\");\n+  if (b->useek == 0)\n+    err (a->aerr, 106, \"backspace\");\n+  if (b->ufd == NULL)\n+    {\n+      fk_open (1, 1, a->aunit);\n+      return (0);\n+    }\n+  if (b->uend == 1)\n+    {\n+      b->uend = 0;\n+      return (0);\n+    }\n+  if (b->uwrt)\n+    {\n+      t_runc (a);\n+      if (f__nowreading (b))\n+\terr (a->aerr, errno, \"backspace\");\n+    }\n+  f = b->ufd;\t\t\t/* may have changed in t_runc() */\n+  if (b->url > 0)\n+    {\n+      x = FTELL (f);\n+      y = x % b->url;\n+      if (y == 0)\n+\tx--;\n+      x /= b->url;\n+      x *= b->url;\n+      FSEEK (f, x, SEEK_SET);\n+      return (0);\n+    }\n \n-\tif(b->ufmt==0)\n-\t{\tFSEEK(f,-(off_t)sizeof(uiolen),SEEK_CUR);\n-\t\tfread((char *)&n,sizeof(uiolen),1,f);\n-\t\tFSEEK(f,-(off_t)n-2*sizeof(uiolen),SEEK_CUR);\n-\t\treturn(0);\n+  if (b->ufmt == 0)\n+    {\n+      FSEEK (f, -(off_t) sizeof (uiolen), SEEK_CUR);\n+      fread ((char *) &n, sizeof (uiolen), 1, f);\n+      FSEEK (f, -(off_t) n - 2 * sizeof (uiolen), SEEK_CUR);\n+      return (0);\n+    }\n+  w = x = FTELL (f);\n+  z = 0;\n+loop:\n+  while (x)\n+    {\n+      x -= x < 64 ? x : 64;\n+      FSEEK (f, x, SEEK_SET);\n+      for (y = x; y < w; y++)\n+\t{\n+\t  if (getc (f) != '\\n')\n+\t    continue;\n+\t  v = FTELL (f);\n+\t  if (v == w)\n+\t    {\n+\t      if (z)\n+\t\tgoto break2;\n+\t      goto loop;\n+\t    }\n+\t  z = v;\n \t}\n-\tw = x = FTELL(f);\n-\tz = 0;\n- loop:\n-\twhile(x) {\n-\t\tx -= x < 64 ? x : 64;\n-\t\tFSEEK(f,x,SEEK_SET);\n-\t\tfor(y = x; y < w; y++) {\n-\t\t\tif (getc(f) != '\\n')\n-\t\t\t\tcontinue;\n-\t\t\tv = FTELL(f);\n-\t\t\tif (v == w) {\n-\t\t\t\tif (z)\n-\t\t\t\t\tgoto break2;\n-\t\t\t\tgoto loop;\n-\t\t\t\t}\n-\t\t\tz = v;\n-\t\t\t}\n-\t\terr(a->aerr,(EOF),\"backspace\");\n-\t\t}\n- break2:\n-\tFSEEK(f, z, SEEK_SET);\n-\treturn 0;\n+      err (a->aerr, (EOF), \"backspace\");\n+    }\n+break2:\n+  FSEEK (f, z, SEEK_SET);\n+  return 0;\n }"}, {"sha": "769c569f8c51130167c26e93a82c55c3c889ebfb", "filename": "libf2c/libI77/close.c", "status": "modified", "additions": 76, "deletions": 66, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fclose.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -14,78 +14,88 @@\n #if defined (MSDOS) && !defined (GO32)\n #include \"io.h\"\n #else\n-extern int unlink(const char*);\n+extern int unlink (const char *);\n #endif\n #endif\n \n-integer f_clos(cllist *a)\n-{\tunit *b;\n+integer\n+f_clos (cllist * a)\n+{\n+  unit *b;\n \n-\tif (f__init & 2)\n-\t\tf__fatal (131, \"I/O recursion\");\n-\tif(a->cunit >= MXUNIT) return(0);\n-\tb= &f__units[a->cunit];\n-\tif(b->ufd==NULL)\n-\t\tgoto done;\n-\tif (b->uscrtch == 1)\n-\t\tgoto Delete;\n-\tif (!a->csta)\n-\t\tgoto Keep;\n-\tswitch(*a->csta) {\n-\t\tdefault:\n-\t \tKeep:\n-\t\tcase 'k':\n-\t\tcase 'K':\n-\t\t\tif(b->uwrt == 1)\n-\t\t\t\tt_runc((alist *)a);\n-\t\t\tif(b->ufnm) {\n-\t\t\t\tfclose(b->ufd);\n-\t\t\t\tfree(b->ufnm);\n-\t\t\t\t}\n-\t\t\tbreak;\n-\t\tcase 'd':\n-\t\tcase 'D':\n-\t\tDelete:\n-\t\t\tfclose(b->ufd);\n-\t\t\tif(b->ufnm) {\n-\t\t\t\tunlink(b->ufnm); /*SYSDEP*/\n-\t\t\t\tfree(b->ufnm);\n-\t\t\t\t}\n-\t\t}\n-\tb->ufd=NULL;\n- done:\n-\tb->uend=0;\n-\tb->ufnm=NULL;\n-\treturn(0);\n+  if (f__init & 2)\n+    f__fatal (131, \"I/O recursion\");\n+  if (a->cunit >= MXUNIT)\n+    return (0);\n+  b = &f__units[a->cunit];\n+  if (b->ufd == NULL)\n+    goto done;\n+  if (b->uscrtch == 1)\n+    goto Delete;\n+  if (!a->csta)\n+    goto Keep;\n+  switch (*a->csta)\n+    {\n+    default:\n+    Keep:\n+    case 'k':\n+    case 'K':\n+      if (b->uwrt == 1)\n+\tt_runc ((alist *) a);\n+      if (b->ufnm)\n+\t{\n+\t  fclose (b->ufd);\n+\t  free (b->ufnm);\n \t}\n- void\n-f_exit(void)\n-{\tint i;\n-\tstatic cllist xx;\n-\tif (! (f__init & 1))\n-\t\treturn;\t\t/* Not initialized, so no open units. */\n-\t/* I/O no longer in progress.  If, during an I/O operation (such\n-\t   as waiting for the user to enter a line), there is an\n-\t   interrupt (such as ^C to stop the program on a UNIX system),\n-\t   f_exit() is called, but there is no longer any I/O in\n-\t   progress.  Without turning off this flag, f_clos() would\n-\t   think that there is an I/O recursion in this circumstance. */\n-\tf__init &= ~2;\n-\tif (!xx.cerr) {\n-\t\txx.cerr=1;\n-\t\txx.csta=NULL;\n-\t\tfor(i=0;i<MXUNIT;i++)\n-\t\t{\n-\t\t\txx.cunit=i;\n-\t\t\t(void) f_clos(&xx);\n-\t\t}\n+      break;\n+    case 'd':\n+    case 'D':\n+    Delete:\n+      fclose (b->ufd);\n+      if (b->ufnm)\n+\t{\n+\t  unlink (b->ufnm);\n+\t  /*SYSDEP*/ free (b->ufnm);\n \t}\n+    }\n+  b->ufd = NULL;\n+done:\n+  b->uend = 0;\n+  b->ufnm = NULL;\n+  return (0);\n }\n- int\n+\n+void\n+f_exit (void)\n+{\n+  int i;\n+  static cllist xx;\n+  if (!(f__init & 1))\n+    return;\t\t\t/* Not initialized, so no open units. */\n+  /* I/O no longer in progress.  If, during an I/O operation (such\n+     as waiting for the user to enter a line), there is an\n+     interrupt (such as ^C to stop the program on a UNIX system),\n+     f_exit() is called, but there is no longer any I/O in\n+     progress.  Without turning off this flag, f_clos() would\n+     think that there is an I/O recursion in this circumstance. */\n+  f__init &= ~2;\n+  if (!xx.cerr)\n+    {\n+      xx.cerr = 1;\n+      xx.csta = NULL;\n+      for (i = 0; i < MXUNIT; i++)\n+\t{\n+\t  xx.cunit = i;\n+\t  (void) f_clos (&xx);\n+\t}\n+    }\n+}\n+int\n G77_flush_0 (void)\n-{\tint i;\n-\tfor(i=0;i<MXUNIT;i++)\n-\t\tif(f__units[i].ufd != NULL && f__units[i].uwrt)\n-\t\t\tfflush(f__units[i].ufd);\n-return 0;\n+{\n+  int i;\n+  for (i = 0; i < MXUNIT; i++)\n+    if (f__units[i].ufd != NULL && f__units[i].uwrt)\n+      fflush (f__units[i].ufd);\n+  return 0;\n }"}, {"sha": "ba8004c661ffa2a7e6f34dc3582e12bd6d612e0f", "filename": "libf2c/libI77/dfe.c", "status": "modified", "additions": 123, "deletions": 105, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fdfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fdfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fdfe.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -3,133 +3,151 @@\n #include \"fio.h\"\n #include \"fmt.h\"\n \n-y_rsk(void)\n+y_rsk (void)\n {\n-\tif(f__curunit->uend || f__curunit->url <= f__recpos\n-\t\t|| f__curunit->url == 1) return 0;\n-\tdo {\n-\t\tgetc(f__cf);\n-\t} while(++f__recpos < f__curunit->url);\n-\treturn 0;\n+  if (f__curunit->uend || f__curunit->url <= f__recpos\n+      || f__curunit->url == 1)\n+    return 0;\n+  do\n+    {\n+      getc (f__cf);\n+    }\n+  while (++f__recpos < f__curunit->url);\n+  return 0;\n }\n-y_getc(void)\n+\n+y_getc (void)\n {\n-\tint ch;\n-\tif(f__curunit->uend) return(-1);\n-\tif((ch=getc(f__cf))!=EOF)\n-\t{\n-\t\tf__recpos++;\n-\t\tif(f__curunit->url>=f__recpos ||\n-\t\t\tf__curunit->url==1)\n-\t\t\treturn(ch);\n-\t\telse\treturn(' ');\n-\t}\n-\tif(feof(f__cf))\n-\t{\n-\t\tf__curunit->uend=1;\n-\t\terrno=0;\n-\t\treturn(-1);\n-\t}\n-\terr(f__elist->cierr,errno,\"readingd\");\n+  int ch;\n+  if (f__curunit->uend)\n+    return (-1);\n+  if ((ch = getc (f__cf)) != EOF)\n+    {\n+      f__recpos++;\n+      if (f__curunit->url >= f__recpos || f__curunit->url == 1)\n+\treturn (ch);\n+      else\n+\treturn (' ');\n+    }\n+  if (feof (f__cf))\n+    {\n+      f__curunit->uend = 1;\n+      errno = 0;\n+      return (-1);\n+    }\n+  err (f__elist->cierr, errno, \"readingd\");\n }\n \n- static int\n-y_rev(void)\n+static int\n+y_rev (void)\n {\n-\tif (f__recpos < f__hiwater)\n-\t\tf__recpos = f__hiwater;\n-\tif (f__curunit->url > 1)\n-\t\twhile(f__recpos < f__curunit->url)\n-\t\t\t(*f__putn)(' ');\n-\tif (f__recpos)\n-\t\tf__putbuf(0);\n-\tf__recpos = 0;\n-\treturn(0);\n+  if (f__recpos < f__hiwater)\n+    f__recpos = f__hiwater;\n+  if (f__curunit->url > 1)\n+    while (f__recpos < f__curunit->url)\n+      (*f__putn) (' ');\n+  if (f__recpos)\n+    f__putbuf (0);\n+  f__recpos = 0;\n+  return (0);\n }\n \n- static int\n-y_err(void)\n+static int\n+y_err (void)\n {\n-\terr(f__elist->cierr, 110, \"dfe\");\n+  err (f__elist->cierr, 110, \"dfe\");\n }\n \n- static int\n-y_newrec(void)\n+static int\n+y_newrec (void)\n {\n-\ty_rev();\n-\tf__hiwater = f__cursor = 0;\n-\treturn(1);\n+  y_rev ();\n+  f__hiwater = f__cursor = 0;\n+  return (1);\n }\n \n-c_dfe(cilist *a)\n+c_dfe (cilist * a)\n {\n-\tf__sequential=0;\n-\tf__formatted=f__external=1;\n-\tf__elist=a;\n-\tf__cursor=f__scale=f__recpos=0;\n-\tf__curunit = &f__units[a->ciunit];\n-\tif(a->ciunit>MXUNIT || a->ciunit<0)\n-\t\terr(a->cierr,101,\"startchk\");\n-\tif(f__curunit->ufd==NULL && fk_open(DIR,FMT,a->ciunit))\n-\t\terr(a->cierr,104,\"dfe\");\n-\tf__cf=f__curunit->ufd;\n-\tif(!f__curunit->ufmt) err(a->cierr,102,\"dfe\");\n-\tif(!f__curunit->useek) err(a->cierr,104,\"dfe\");\n-\tf__fmtbuf=a->cifmt;\n-\tif(a->cirec <= 0)\n-\t\terr(a->cierr,130,\"dfe\");\n-\tFSEEK(f__cf,(off_t)f__curunit->url * (a->cirec-1),SEEK_SET);\n-\tf__curunit->uend = 0;\n-\treturn(0);\n+  f__sequential = 0;\n+  f__formatted = f__external = 1;\n+  f__elist = a;\n+  f__cursor = f__scale = f__recpos = 0;\n+  f__curunit = &f__units[a->ciunit];\n+  if (a->ciunit > MXUNIT || a->ciunit < 0)\n+    err (a->cierr, 101, \"startchk\");\n+  if (f__curunit->ufd == NULL && fk_open (DIR, FMT, a->ciunit))\n+    err (a->cierr, 104, \"dfe\");\n+  f__cf = f__curunit->ufd;\n+  if (!f__curunit->ufmt)\n+    err (a->cierr, 102, \"dfe\");\n+  if (!f__curunit->useek)\n+    err (a->cierr, 104, \"dfe\");\n+  f__fmtbuf = a->cifmt;\n+  if (a->cirec <= 0)\n+    err (a->cierr, 130, \"dfe\");\n+  FSEEK (f__cf, (off_t) f__curunit->url * (a->cirec - 1), SEEK_SET);\n+  f__curunit->uend = 0;\n+  return (0);\n }\n-integer s_rdfe(cilist *a)\n+\n+integer\n+s_rdfe (cilist * a)\n {\n-\tint n;\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__reading=1;\n-\tif(n=c_dfe(a))return(n);\n-\tif(f__curunit->uwrt && f__nowreading(f__curunit))\n-\t\terr(a->cierr,errno,\"read start\");\n-\tf__getn = y_getc;\n-\tf__doed = rd_ed;\n-\tf__doned = rd_ned;\n-\tf__dorevert = f__donewrec = y_err;\n-\tf__doend = y_rsk;\n-\tif(pars_f(f__fmtbuf)<0)\n-\t\terr(a->cierr,100,\"read start\");\n-\tfmt_bg();\n-\treturn(0);\n+  int n;\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__reading = 1;\n+  if (n = c_dfe (a))\n+    return (n);\n+  if (f__curunit->uwrt && f__nowreading (f__curunit))\n+    err (a->cierr, errno, \"read start\");\n+  f__getn = y_getc;\n+  f__doed = rd_ed;\n+  f__doned = rd_ned;\n+  f__dorevert = f__donewrec = y_err;\n+  f__doend = y_rsk;\n+  if (pars_f (f__fmtbuf) < 0)\n+    err (a->cierr, 100, \"read start\");\n+  fmt_bg ();\n+  return (0);\n }\n-integer s_wdfe(cilist *a)\n+\n+integer\n+s_wdfe (cilist * a)\n {\n-\tint n;\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__reading=0;\n-\tif(n=c_dfe(a)) return(n);\n-\tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n-\t\terr(a->cierr,errno,\"startwrt\");\n-\tf__putn = x_putc;\n-\tf__doed = w_ed;\n-\tf__doned= w_ned;\n-\tf__dorevert = y_err;\n-\tf__donewrec = y_newrec;\n-\tf__doend = y_rev;\n-\tif(pars_f(f__fmtbuf)<0)\n-\t\terr(a->cierr,100,\"startwrt\");\n-\tfmt_bg();\n-\treturn(0);\n+  int n;\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__reading = 0;\n+  if (n = c_dfe (a))\n+    return (n);\n+  if (f__curunit->uwrt != 1 && f__nowwriting (f__curunit))\n+    err (a->cierr, errno, \"startwrt\");\n+  f__putn = x_putc;\n+  f__doed = w_ed;\n+  f__doned = w_ned;\n+  f__dorevert = y_err;\n+  f__donewrec = y_newrec;\n+  f__doend = y_rev;\n+  if (pars_f (f__fmtbuf) < 0)\n+    err (a->cierr, 100, \"startwrt\");\n+  fmt_bg ();\n+  return (0);\n }\n-integer e_rdfe(void)\n+\n+integer\n+e_rdfe (void)\n {\n-\tf__init = 1;\n-\ten_fio();\n-\treturn(0);\n+  f__init = 1;\n+  en_fio ();\n+  return (0);\n }\n \n-integer e_wdfe(void)\n+integer\n+e_wdfe (void)\n {\n-\tf__init = 1;\n-\treturn en_fio();\n+  f__init = 1;\n+  return en_fio ();\n }"}, {"sha": "e50e900531799633fd823c9f40178b41ac95335d", "filename": "libf2c/libI77/dolio.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fdolio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fdolio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fdolio.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,9 +1,10 @@\n #include \"config.h\"\n #include \"f2c.h\"\n \n-extern int (*f__lioproc)(ftnint*, char*, ftnlen, ftnint);\n+extern int (*f__lioproc) (ftnint *, char *, ftnlen, ftnint);\n \n-integer do_lio(ftnint *type, ftnint *number, char *ptr, ftnlen len)\n+integer\n+do_lio (ftnint * type, ftnint * number, char *ptr, ftnlen len)\n {\n-\treturn((*f__lioproc)(number,ptr,len,*type));\n+  return ((*f__lioproc) (number, ptr, len, *type));\n }"}, {"sha": "709136ceb1eae51564503090227833b403900320", "filename": "libf2c/libI77/due.c", "status": "modified", "additions": 63, "deletions": 48, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fdue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fdue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fdue.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,63 +2,78 @@\n #include \"f2c.h\"\n #include \"fio.h\"\n \n-c_due(cilist *a)\n+c_due (cilist * a)\n {\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tif(a->ciunit>=MXUNIT || a->ciunit<0)\n-\t\terr(a->cierr,101,\"startio\");\n-\tf__sequential=f__formatted=f__recpos=0;\n-\tf__external=1;\n-\tf__curunit = &f__units[a->ciunit];\n-\tif(a->ciunit>=MXUNIT || a->ciunit<0)\n-\t\terr(a->cierr,101,\"startio\");\n-\tf__elist=a;\n-\tif(f__curunit->ufd==NULL && fk_open(DIR,UNF,a->ciunit) ) err(a->cierr,104,\"due\");\n-\tf__cf=f__curunit->ufd;\n-\tif(f__curunit->ufmt) err(a->cierr,102,\"cdue\");\n-\tif(!f__curunit->useek) err(a->cierr,104,\"cdue\");\n-\tif(f__curunit->ufd==NULL) err(a->cierr,114,\"cdue\");\n-\tif(a->cirec <= 0)\n-\t\terr(a->cierr,130,\"due\");\n-\tFSEEK(f__cf,(off_t)(a->cirec-1)*f__curunit->url,SEEK_SET);\n-\tf__curunit->uend = 0;\n-\treturn(0);\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  if (a->ciunit >= MXUNIT || a->ciunit < 0)\n+    err (a->cierr, 101, \"startio\");\n+  f__sequential = f__formatted = f__recpos = 0;\n+  f__external = 1;\n+  f__curunit = &f__units[a->ciunit];\n+  if (a->ciunit >= MXUNIT || a->ciunit < 0)\n+    err (a->cierr, 101, \"startio\");\n+  f__elist = a;\n+  if (f__curunit->ufd == NULL && fk_open (DIR, UNF, a->ciunit))\n+    err (a->cierr, 104, \"due\");\n+  f__cf = f__curunit->ufd;\n+  if (f__curunit->ufmt)\n+    err (a->cierr, 102, \"cdue\");\n+  if (!f__curunit->useek)\n+    err (a->cierr, 104, \"cdue\");\n+  if (f__curunit->ufd == NULL)\n+    err (a->cierr, 114, \"cdue\");\n+  if (a->cirec <= 0)\n+    err (a->cierr, 130, \"due\");\n+  FSEEK (f__cf, (off_t) (a->cirec - 1) * f__curunit->url, SEEK_SET);\n+  f__curunit->uend = 0;\n+  return (0);\n }\n-integer s_rdue(cilist *a)\n+\n+integer\n+s_rdue (cilist * a)\n {\n-\tint n;\n-\tf__reading=1;\n-\tif(n=c_due(a)) return(n);\n-\tif(f__curunit->uwrt && f__nowreading(f__curunit))\n-\t\terr(a->cierr,errno,\"read start\");\n-\treturn(0);\n+  int n;\n+  f__reading = 1;\n+  if (n = c_due (a))\n+    return (n);\n+  if (f__curunit->uwrt && f__nowreading (f__curunit))\n+    err (a->cierr, errno, \"read start\");\n+  return (0);\n }\n-integer s_wdue(cilist *a)\n+\n+integer\n+s_wdue (cilist * a)\n {\n-\tint n;\n-\tf__reading=0;\n-\tif(n=c_due(a)) return(n);\n-\tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n-\t\terr(a->cierr,errno,\"write start\");\n-\treturn(0);\n+  int n;\n+  f__reading = 0;\n+  if (n = c_due (a))\n+    return (n);\n+  if (f__curunit->uwrt != 1 && f__nowwriting (f__curunit))\n+    err (a->cierr, errno, \"write start\");\n+  return (0);\n }\n-integer e_rdue(void)\n+\n+integer\n+e_rdue (void)\n {\n-\tf__init = 1;\n-\tif(f__curunit->url==1 || f__recpos==f__curunit->url)\n-\t\treturn(0);\n-\tFSEEK(f__cf,(off_t)(f__curunit->url-f__recpos),SEEK_CUR);\n-\tif(FTELL(f__cf)%f__curunit->url)\n-\t\terr(f__elist->cierr,200,\"syserr\");\n-\treturn(0);\n+  f__init = 1;\n+  if (f__curunit->url == 1 || f__recpos == f__curunit->url)\n+    return (0);\n+  FSEEK (f__cf, (off_t) (f__curunit->url - f__recpos), SEEK_CUR);\n+  if (FTELL (f__cf) % f__curunit->url)\n+    err (f__elist->cierr, 200, \"syserr\");\n+  return (0);\n }\n-integer e_wdue(void)\n+\n+integer\n+e_wdue (void)\n {\n-\tf__init = 1;\n+  f__init = 1;\n #ifdef ALWAYS_FLUSH\n-\tif (fflush(f__cf))\n-\t\terr(f__elist->cierr,errno,\"write end\");\n+  if (fflush (f__cf))\n+    err (f__elist->cierr, errno, \"write end\");\n #endif\n-\treturn(e_rdue());\n+  return (e_rdue ());\n }"}, {"sha": "d429d2b07e58997fd14cef93f71eaf64a562b3e3", "filename": "libf2c/libI77/endfile.c", "status": "modified", "additions": 94, "deletions": 87, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fendfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fendfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fendfile.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -13,111 +13,118 @@\n \n extern char *f__r_mode[], *f__w_mode[];\n \n-integer f_end(alist *a)\n+integer\n+f_end (alist * a)\n {\n-\tunit *b;\n-\tFILE *tf;\n+  unit *b;\n+  FILE *tf;\n \n-\tif (f__init & 2)\n-\t\tf__fatal (131, \"I/O recursion\");\n-\tif(a->aunit>=MXUNIT || a->aunit<0) err(a->aerr,101,\"endfile\");\n-\tb = &f__units[a->aunit];\n-\tif(b->ufd==NULL) {\n-\t\tchar nbuf[10];\n-\t\tsprintf(nbuf,\"fort.%ld\",(long)a->aunit);\n-\t\tif (tf = fopen(nbuf, f__w_mode[0]))\n-\t\t\tfclose(tf);\n-\t\treturn(0);\n-\t\t}\n-\tb->uend=1;\n-\treturn(b->useek ? t_runc(a) : 0);\n+  if (f__init & 2)\n+    f__fatal (131, \"I/O recursion\");\n+  if (a->aunit >= MXUNIT || a->aunit < 0)\n+    err (a->aerr, 101, \"endfile\");\n+  b = &f__units[a->aunit];\n+  if (b->ufd == NULL)\n+    {\n+      char nbuf[10];\n+      sprintf (nbuf, \"fort.%ld\", (long) a->aunit);\n+      if (tf = fopen (nbuf, f__w_mode[0]))\n+\tfclose (tf);\n+      return (0);\n+    }\n+  b->uend = 1;\n+  return (b->useek ? t_runc (a) : 0);\n }\n \n #ifndef HAVE_FTRUNCATE\n- static int\n-copy(FILE *from, register long len, FILE *to)\n+static int\n+copy (FILE * from, register long len, FILE * to)\n {\n-\tint len1;\n-\tchar buf[BUFSIZ];\n+  int len1;\n+  char buf[BUFSIZ];\n \n-\twhile(fread(buf, len1 = len > BUFSIZ ? BUFSIZ : (int)len, 1, from)) {\n-\t\tif (!fwrite(buf, len1, 1, to))\n-\t\t\treturn 1;\n-\t\tif ((len -= len1) <= 0)\n-\t\t\tbreak;\n-\t\t}\n-\treturn 0;\n-\t}\n+  while (fread (buf, len1 = len > BUFSIZ ? BUFSIZ : (int) len, 1, from))\n+    {\n+      if (!fwrite (buf, len1, 1, to))\n+\treturn 1;\n+      if ((len -= len1) <= 0)\n+\tbreak;\n+    }\n+  return 0;\n+}\n #endif /* !defined(HAVE_FTRUNCATE) */\n \n- int\n-t_runc(alist *a)\n+int\n+t_runc (alist * a)\n {\n-\toff_t loc, len;\n-\tunit *b;\n-\tint rc;\n-\tFILE *bf;\n+  off_t loc, len;\n+  unit *b;\n+  int rc;\n+  FILE *bf;\n #ifndef HAVE_FTRUNCATE\n-\tFILE *tf;\n+  FILE *tf;\n #endif /* !defined(HAVE_FTRUNCATE) */\n \n-\tb = &f__units[a->aunit];\n-\tif(b->url)\n-\t\treturn(0);\t/*don't truncate direct files*/\n-\tloc=FTELL(bf = b->ufd);\n-\tFSEEK(bf,0,SEEK_END);\n-\tlen=FTELL(bf);\n-\tif (loc >= len || b->useek == 0 || b->ufnm == NULL)\n-\t\treturn(0);\n+  b = &f__units[a->aunit];\n+  if (b->url)\n+    return (0);\t\t\t/*don't truncate direct files */\n+  loc = FTELL (bf = b->ufd);\n+  FSEEK (bf, 0, SEEK_END);\n+  len = FTELL (bf);\n+  if (loc >= len || b->useek == 0 || b->ufnm == NULL)\n+    return (0);\n #ifndef HAVE_FTRUNCATE\n-\trc = 0;\n-\tfclose(b->ufd);\n-\tif (!loc) {\n-\t\tif (!(bf = fopen(b->ufnm, f__w_mode[b->ufmt])))\n-\t\t\trc = 1;\n-\t\tif (b->uwrt)\n-\t\t\tb->uwrt = 1;\n-\t\tgoto done;\n-\t\t}\n-\tif (!(bf = fopen(b->ufnm, f__r_mode[0]))\n-\t || !(tf = tmpfile())) {\n+  rc = 0;\n+  fclose (b->ufd);\n+  if (!loc)\n+    {\n+      if (!(bf = fopen (b->ufnm, f__w_mode[b->ufmt])))\n+\trc = 1;\n+      if (b->uwrt)\n+\tb->uwrt = 1;\n+      goto done;\n+    }\n+  if (!(bf = fopen (b->ufnm, f__r_mode[0])) || !(tf = tmpfile ()))\n+    {\n #ifdef NON_UNIX_STDIO\n- bad:\n+    bad:\n #endif\n-\t\trc = 1;\n-\t\tgoto done;\n-\t\t}\n-\tif (copy(bf, loc, tf)) {\n- bad1:\n-\t\trc = 1;\n-\t\tgoto done1;\n-\t\t}\n-\tif (!(bf = freopen(b->ufnm, f__w_mode[0], bf)))\n-\t\tgoto bad1;\n-\tFSEEK(tf, 0, SEEK_SET);\n-\tif (copy(tf, loc, bf))\n-\t\tgoto bad1;\n-\tb->uwrt = 1;\n-\tb->urw = 2;\n+      rc = 1;\n+      goto done;\n+    }\n+  if (copy (bf, loc, tf))\n+    {\n+    bad1:\n+      rc = 1;\n+      goto done1;\n+    }\n+  if (!(bf = freopen (b->ufnm, f__w_mode[0], bf)))\n+    goto bad1;\n+  FSEEK (tf, 0, SEEK_SET);\n+  if (copy (tf, loc, bf))\n+    goto bad1;\n+  b->uwrt = 1;\n+  b->urw = 2;\n #ifdef NON_UNIX_STDIO\n-\tif (b->ufmt) {\n-\t\tfclose(bf);\n-\t\tif (!(bf = fopen(b->ufnm, f__w_mode[3])))\n-\t\t\tgoto bad;\n-\t\tFSEEK(bf,0,SEEK_END);\n-\t\tb->urw = 3;\n-\t\t}\n+  if (b->ufmt)\n+    {\n+      fclose (bf);\n+      if (!(bf = fopen (b->ufnm, f__w_mode[3])))\n+\tgoto bad;\n+      FSEEK (bf, 0, SEEK_END);\n+      b->urw = 3;\n+    }\n #endif\n done1:\n-\tfclose(tf);\n+  fclose (tf);\n done:\n-\tf__cf = b->ufd = bf;\n-#else  /* !defined(HAVE_FTRUNCATE) */\n-\tfflush(b->ufd);\n-\trc = ftruncate(fileno(b->ufd), loc);\n-        FSEEK(bf,loc,SEEK_SET);\n+  f__cf = b->ufd = bf;\n+#else /* !defined(HAVE_FTRUNCATE) */\n+  fflush (b->ufd);\n+  rc = ftruncate (fileno (b->ufd), loc);\n+  FSEEK (bf, loc, SEEK_SET);\n #endif /* !defined(HAVE_FTRUNCATE) */\n-\tif (rc)\n-\t\terr(a->aerr,111,\"endfile\");\n-\treturn 0;\n-\t}\n+  if (rc)\n+    err (a->aerr, 111, \"endfile\");\n+  return 0;\n+}"}, {"sha": "94302f31c331b44a2e0ec4a3d7fb144b8972f046", "filename": "libf2c/libI77/err.c", "status": "modified", "additions": 221, "deletions": 204, "changes": 425, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ferr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ferr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ferr.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -11,249 +11,266 @@\n #undef max\n #include <stdlib.h>\n #include \"fio.h\"\n-#include \"fmt.h\"\t/* for struct syl */\n+#include \"fmt.h\"\t\t/* for struct syl */\n \n /*global definitions*/\n-unit f__units[MXUNIT];\t/*unit table*/\n-int f__init;\t/*bit 0: set after initializations;\n-\t\t  bit 1: set during I/O involving returns to\n-\t\t    caller of library (or calls to user code)*/\n-cilist *f__elist;\t/*active external io list*/\n-icilist *f__svic;\t/*active internal io list*/\n-flag f__reading;\t/*1 if reading, 0 if writing*/\n-flag f__cplus,f__cblank;\n+unit f__units[MXUNIT];\t\t/*unit table */\n+int f__init;\t\t\t/*bit 0: set after initializations;\n+\t\t\t\t   bit 1: set during I/O involving returns to\n+\t\t\t\t   caller of library (or calls to user code) */\n+cilist *f__elist;\t\t/*active external io list */\n+icilist *f__svic;\t\t/*active internal io list */\n+flag f__reading;\t\t/*1 if reading, 0 if writing */\n+flag f__cplus, f__cblank;\n char *f__fmtbuf;\n int f__fmtlen;\n-flag f__external;\t/*1 if external io, 0 if internal */\n-int (*f__getn)(void);\t/* for formatted input */\n-void (*f__putn)(int);\t/* for formatted output */\n-int (*f__doed)(struct syl*, char*, ftnlen),(*f__doned)(struct syl*);\n-int (*f__dorevert)(void),(*f__donewrec)(void),(*f__doend)(void);\n-flag f__sequential;\t/*1 if sequential io, 0 if direct*/\n-flag f__formatted;\t/*1 if formatted io, 0 if unformatted*/\n-FILE *f__cf;\t/*current file*/\n-unit *f__curunit;\t/*current unit*/\n-int f__recpos;\t/*place in current record*/\n+flag f__external;\t\t/*1 if external io, 0 if internal */\n+int (*f__getn) (void);\t\t/* for formatted input */\n+void (*f__putn) (int);\t\t/* for formatted output */\n+int (*f__doed) (struct syl *, char *, ftnlen), (*f__doned) (struct syl *);\n+int (*f__dorevert) (void), (*f__donewrec) (void), (*f__doend) (void);\n+flag f__sequential;\t\t/*1 if sequential io, 0 if direct */\n+flag f__formatted;\t\t/*1 if formatted io, 0 if unformatted */\n+FILE *f__cf;\t\t\t/*current file */\n+unit *f__curunit;\t\t/*current unit */\n+int f__recpos;\t\t\t/*place in current record */\n int f__cursor, f__hiwater, f__scale;\n char *f__icptr;\n \n /*error messages*/\n-char *F_err[] =\n-{\n-\t\"error in format\",\t\t\t\t/* 100 */\n-\t\"illegal unit number\",\t\t\t\t/* 101 */\n-\t\"formatted io not allowed\",\t\t\t/* 102 */\n-\t\"unformatted io not allowed\",\t\t\t/* 103 */\n-\t\"direct io not allowed\",\t\t\t/* 104 */\n-\t\"sequential io not allowed\",\t\t\t/* 105 */\n-\t\"can't backspace file\",\t\t\t\t/* 106 */\n-\t\"null file name\",\t\t\t\t/* 107 */\n-\t\"can't stat file\",\t\t\t\t/* 108 */\n-\t\"unit not connected\",\t\t\t\t/* 109 */\n-\t\"off end of record\",\t\t\t\t/* 110 */\n-\t\"truncation failed in endfile\",\t\t\t/* 111 */\n-\t\"incomprehensible list input\",\t\t\t/* 112 */\n-\t\"out of free space\",\t\t\t\t/* 113 */\n-\t\"unit not connected\",\t\t\t\t/* 114 */\n-\t\"read unexpected character\",\t\t\t/* 115 */\n-\t\"bad logical input field\",\t\t\t/* 116 */\n-\t\"bad variable type\",\t\t\t\t/* 117 */\n-\t\"bad namelist name\",\t\t\t\t/* 118 */\n-\t\"variable not in namelist\",\t\t\t/* 119 */\n-\t\"no end record\",\t\t\t\t/* 120 */\n-\t\"variable count incorrect\",\t\t\t/* 121 */\n-\t\"subscript for scalar variable\",\t\t/* 122 */\n-\t\"invalid array section\",\t\t\t/* 123 */\n-\t\"substring out of bounds\",\t\t\t/* 124 */\n-\t\"subscript out of bounds\",\t\t\t/* 125 */\n-\t\"can't read file\",\t\t\t\t/* 126 */\n-\t\"can't write file\",\t\t\t\t/* 127 */\n-\t\"'new' file exists\",\t\t\t\t/* 128 */\n-\t\"can't append to file\",\t\t\t\t/* 129 */\n-\t\"non-positive record number\",\t\t\t/* 130 */\n-\t\"I/O started while already doing I/O\",\t\t/* 131 */\n-\t\"Temporary file name (TMPDIR?) too long\"        /* 132 */\n+char *F_err[] = {\n+  \"error in format\",\t\t/* 100 */\n+  \"illegal unit number\",\t/* 101 */\n+  \"formatted io not allowed\",\t/* 102 */\n+  \"unformatted io not allowed\",\t/* 103 */\n+  \"direct io not allowed\",\t/* 104 */\n+  \"sequential io not allowed\",\t/* 105 */\n+  \"can't backspace file\",\t/* 106 */\n+  \"null file name\",\t\t/* 107 */\n+  \"can't stat file\",\t\t/* 108 */\n+  \"unit not connected\",\t\t/* 109 */\n+  \"off end of record\",\t\t/* 110 */\n+  \"truncation failed in endfile\",\t/* 111 */\n+  \"incomprehensible list input\",\t/* 112 */\n+  \"out of free space\",\t\t/* 113 */\n+  \"unit not connected\",\t\t/* 114 */\n+  \"read unexpected character\",\t/* 115 */\n+  \"bad logical input field\",\t/* 116 */\n+  \"bad variable type\",\t\t/* 117 */\n+  \"bad namelist name\",\t\t/* 118 */\n+  \"variable not in namelist\",\t/* 119 */\n+  \"no end record\",\t\t/* 120 */\n+  \"variable count incorrect\",\t/* 121 */\n+  \"subscript for scalar variable\",\t/* 122 */\n+  \"invalid array section\",\t/* 123 */\n+  \"substring out of bounds\",\t/* 124 */\n+  \"subscript out of bounds\",\t/* 125 */\n+  \"can't read file\",\t\t/* 126 */\n+  \"can't write file\",\t\t/* 127 */\n+  \"'new' file exists\",\t\t/* 128 */\n+  \"can't append to file\",\t/* 129 */\n+  \"non-positive record number\",\t/* 130 */\n+  \"I/O started while already doing I/O\",\t/* 131 */\n+  \"Temporary file name (TMPDIR?) too long\"\t/* 132 */\n };\n #define MAXERR (sizeof(F_err)/sizeof(char *)+100)\n \n-f__canseek(FILE *f) /*SYSDEP*/\n+f__canseek (FILE * f) /*SYSDEP*/\n {\n #ifdef NON_UNIX_STDIO\n-\treturn !isatty(fileno(f));\n+  return !isatty (fileno (f));\n #else\n-\tstruct stat x;\n+  struct stat x;\n \n-\tif (fstat(fileno(f),&x) < 0)\n-\t\treturn(0);\n+  if (fstat (fileno (f), &x) < 0)\n+    return (0);\n #ifdef S_IFMT\n-\tswitch(x.st_mode & S_IFMT) {\n-\tcase S_IFDIR:\n-\tcase S_IFREG:\n-\t\tif(x.st_nlink > 0)\t/* !pipe */\n-\t\t\treturn(1);\n-\t\telse\n-\t\t\treturn(0);\n-\tcase S_IFCHR:\n-\t\tif(isatty(fileno(f)))\n-\t\t\treturn(0);\n-\t\treturn(1);\n+  switch (x.st_mode & S_IFMT)\n+    {\n+    case S_IFDIR:\n+    case S_IFREG:\n+      if (x.st_nlink > 0)\t/* !pipe */\n+\treturn (1);\n+      else\n+\treturn (0);\n+    case S_IFCHR:\n+      if (isatty (fileno (f)))\n+\treturn (0);\n+      return (1);\n #ifdef S_IFBLK\n-\tcase S_IFBLK:\n-\t\treturn(1);\n+    case S_IFBLK:\n+      return (1);\n #endif\n-\t}\n+    }\n #else\n #ifdef S_ISDIR\n-\t/* POSIX version */\n-\tif (S_ISREG(x.st_mode) || S_ISDIR(x.st_mode)) {\n-\t\tif(x.st_nlink > 0)\t/* !pipe */\n-\t\t\treturn(1);\n-\t\telse\n-\t\t\treturn(0);\n-\t\t}\n-\tif (S_ISCHR(x.st_mode)) {\n-\t\tif(isatty(fileno(f)))\n-\t\t\treturn(0);\n-\t\treturn(1);\n-\t\t}\n-\tif (S_ISBLK(x.st_mode))\n-\t\treturn(1);\n+  /* POSIX version */\n+  if (S_ISREG (x.st_mode) || S_ISDIR (x.st_mode))\n+    {\n+      if (x.st_nlink > 0)\t/* !pipe */\n+\treturn (1);\n+      else\n+\treturn (0);\n+    }\n+  if (S_ISCHR (x.st_mode))\n+    {\n+      if (isatty (fileno (f)))\n+\treturn (0);\n+      return (1);\n+    }\n+  if (S_ISBLK (x.st_mode))\n+    return (1);\n #else\n-\tHelp! How does fstat work on this system?\n+  Help ! How does fstat work on this system ?\n #endif\n #endif\n-\treturn(0);\t/* who knows what it is? */\n+    return (0);\t\t\t/* who knows what it is? */\n #endif\n }\n \n- void\n-f__fatal(int n, char *s)\n+void\n+f__fatal (int n, char *s)\n {\n-\tstatic int dead = 0;\n+  static int dead = 0;\n \n-\tif(n<100 && n>=0) perror(s); /*SYSDEP*/\n-\telse if(n >= (int)MAXERR || n < -1)\n-\t{\tfprintf(stderr,\"%s: illegal error number %d\\n\",s,n);\n-\t}\n-\telse if(n == -1) fprintf(stderr,\"%s: end of file\\n\",s);\n-\telse\n-\t\tfprintf(stderr,\"%s: %s\\n\",s,F_err[n-100]);\n-\tif (dead) {\n-\t\tfprintf (stderr, \"(libf2c f__fatal already called, aborting.)\");\n-\t\tabort();\n+  if (n < 100 && n >= 0)\n+    perror (s);\n+  /*SYSDEP*/\n+  else if (n >= (int) MAXERR || n < -1)\n+    {\n+      fprintf (stderr, \"%s: illegal error number %d\\n\", s, n);\n+    }\n+  else if (n == -1)\n+    fprintf (stderr, \"%s: end of file\\n\", s);\n+  else\n+    fprintf (stderr, \"%s: %s\\n\", s, F_err[n - 100]);\n+  if (dead)\n+    {\n+      fprintf (stderr, \"(libf2c f__fatal already called, aborting.)\");\n+      abort ();\n+    }\n+  dead = 1;\n+  if (f__init & 1)\n+    {\n+      if (f__curunit)\n+\t{\n+\t  fprintf (stderr, \"apparent state: unit %d \",\n+\t\t   (int) (f__curunit - f__units));\n+\t  fprintf (stderr, f__curunit->ufnm ? \"named %s\\n\" : \"(unnamed)\\n\",\n+\t\t   f__curunit->ufnm);\n \t}\n-\tdead = 1;\n-\tif (f__init & 1) {\n-\t\tif (f__curunit) {\n-\t\t\tfprintf(stderr,\"apparent state: unit %d \",\n-\t\t\t\t(int)(f__curunit-f__units));\n-\t\t\tfprintf(stderr, f__curunit->ufnm ? \"named %s\\n\" : \"(unnamed)\\n\",\n-\t\t\t\tf__curunit->ufnm);\n-\t\t\t}\n-\t\telse\n-\t\t\tfprintf(stderr,\"apparent state: internal I/O\\n\");\n-\t\tif (f__fmtbuf)\n-\t\t\tfprintf(stderr,\"last format: %.*s\\n\",f__fmtlen,f__fmtbuf);\n-\t\tfprintf(stderr,\"lately %s %s %s %s\",f__reading?\"reading\":\"writing\",\n-\t\t\tf__sequential?\"sequential\":\"direct\",f__formatted?\"formatted\":\"unformatted\",\n-\t\t\tf__external?\"external\":\"internal\");\n-\t}\n-\tf__init &= ~2;\t/* No longer doing I/O (no more user code to be called). */\n-\tsig_die(\" IO\", 1);\n+      else\n+\tfprintf (stderr, \"apparent state: internal I/O\\n\");\n+      if (f__fmtbuf)\n+\tfprintf (stderr, \"last format: %.*s\\n\", f__fmtlen, f__fmtbuf);\n+      fprintf (stderr, \"lately %s %s %s %s\",\n+\t       f__reading ? \"reading\" : \"writing\",\n+\t       f__sequential ? \"sequential\" : \"direct\",\n+\t       f__formatted ? \"formatted\" : \"unformatted\",\n+\t       f__external ? \"external\" : \"internal\");\n+    }\n+  f__init &= ~2;\t\t/* No longer doing I/O (no more user code to be called). */\n+  sig_die (\" IO\", 1);\n }\n+\n /*initialization routine*/\n void\n-f_init(void)\n-{\tunit *p;\n+f_init (void)\n+{\n+  unit *p;\n \n-\tif (f__init & 2)\n-\t\tf__fatal (131, \"I/O recursion\");\n-\tf__init = 1;\n-\tp= &f__units[0];\n-\tp->ufd=stderr;\n-\tp->useek=f__canseek(stderr);\n-\tp->ufmt=1;\n-\tp->uwrt=1;\n-\tp = &f__units[5];\n-\tp->ufd=stdin;\n-\tp->useek=f__canseek(stdin);\n-\tp->ufmt=1;\n-\tp->uwrt=0;\n-\tp= &f__units[6];\n-\tp->ufd=stdout;\n-\tp->useek=f__canseek(stdout);\n-\tp->ufmt=1;\n-\tp->uwrt=1;\n+  if (f__init & 2)\n+    f__fatal (131, \"I/O recursion\");\n+  f__init = 1;\n+  p = &f__units[0];\n+  p->ufd = stderr;\n+  p->useek = f__canseek (stderr);\n+  p->ufmt = 1;\n+  p->uwrt = 1;\n+  p = &f__units[5];\n+  p->ufd = stdin;\n+  p->useek = f__canseek (stdin);\n+  p->ufmt = 1;\n+  p->uwrt = 0;\n+  p = &f__units[6];\n+  p->ufd = stdout;\n+  p->useek = f__canseek (stdout);\n+  p->ufmt = 1;\n+  p->uwrt = 1;\n }\n-f__nowreading(unit *x)\n+\n+f__nowreading (unit * x)\n {\n-\toff_t loc;\n-\tint ufmt, urw;\n-\textern char *f__r_mode[], *f__w_mode[];\n+  off_t loc;\n+  int ufmt, urw;\n+  extern char *f__r_mode[], *f__w_mode[];\n \n-\tif (x->urw & 1)\n-\t\tgoto done;\n-\tif (!x->ufnm)\n-\t\tgoto cantread;\n-\tufmt = x->url ? 0 : x->ufmt;\n-\tloc = FTELL(x->ufd);\n-\turw = 3;\n-\tif (!freopen(x->ufnm, f__w_mode[ufmt|2], x->ufd)) {\n-\t\turw = 1;\n-\t\tif(!freopen(x->ufnm, f__r_mode[ufmt], x->ufd)) {\n- cantread:\n-\t\t\terrno = 126;\n-\t\t\treturn 1;\n-\t\t\t}\n-\t\t}\n-\tFSEEK(x->ufd,loc,SEEK_SET);\n-\tx->urw = urw;\n- done:\n-\tx->uwrt = 0;\n-\treturn 0;\n+  if (x->urw & 1)\n+    goto done;\n+  if (!x->ufnm)\n+    goto cantread;\n+  ufmt = x->url ? 0 : x->ufmt;\n+  loc = FTELL (x->ufd);\n+  urw = 3;\n+  if (!freopen (x->ufnm, f__w_mode[ufmt | 2], x->ufd))\n+    {\n+      urw = 1;\n+      if (!freopen (x->ufnm, f__r_mode[ufmt], x->ufd))\n+\t{\n+\tcantread:\n+\t  errno = 126;\n+\t  return 1;\n+\t}\n+    }\n+  FSEEK (x->ufd, loc, SEEK_SET);\n+  x->urw = urw;\n+done:\n+  x->uwrt = 0;\n+  return 0;\n }\n-f__nowwriting(unit *x)\n+\n+f__nowwriting (unit * x)\n {\n-\toff_t loc;\n-\tint ufmt;\n-\textern char *f__w_mode[];\n+  off_t loc;\n+  int ufmt;\n+  extern char *f__w_mode[];\n \n-\tif (x->urw & 2)\n-\t\tgoto done;\n-\tif (!x->ufnm)\n-\t\tgoto cantwrite;\n-\tufmt = x->url ? 0 : x->ufmt;\n-\tif (x->uwrt == 3) { /* just did write, rewind */\n-\t\tif (!(f__cf = x->ufd =\n-\t\t\t\tfreopen(x->ufnm,f__w_mode[ufmt],x->ufd)))\n-\t\t\tgoto cantwrite;\n-\t\tx->urw = 2;\n-\t\t}\n-\telse {\n-\t\tloc=FTELL(x->ufd);\n-\t\tif (!(f__cf = x->ufd =\n-\t\t\tfreopen(x->ufnm, f__w_mode[ufmt |= 2], x->ufd)))\n-\t\t\t{\n-\t\t\tx->ufd = NULL;\n- cantwrite:\n-\t\t\terrno = 127;\n-\t\t\treturn(1);\n-\t\t\t}\n-\t\tx->urw = 3;\n-\t\tFSEEK(x->ufd,loc,SEEK_SET);\n-\t\t}\n- done:\n-\tx->uwrt = 1;\n-\treturn 0;\n+  if (x->urw & 2)\n+    goto done;\n+  if (!x->ufnm)\n+    goto cantwrite;\n+  ufmt = x->url ? 0 : x->ufmt;\n+  if (x->uwrt == 3)\n+    {\t\t\t\t/* just did write, rewind */\n+      if (!(f__cf = x->ufd = freopen (x->ufnm, f__w_mode[ufmt], x->ufd)))\n+\tgoto cantwrite;\n+      x->urw = 2;\n+    }\n+  else\n+    {\n+      loc = FTELL (x->ufd);\n+      if (!(f__cf = x->ufd = freopen (x->ufnm, f__w_mode[ufmt |= 2], x->ufd)))\n+\t{\n+\t  x->ufd = NULL;\n+\tcantwrite:\n+\t  errno = 127;\n+\t  return (1);\n+\t}\n+      x->urw = 3;\n+      FSEEK (x->ufd, loc, SEEK_SET);\n+    }\n+done:\n+  x->uwrt = 1;\n+  return 0;\n }\n \n- int\n-err__fl(int f, int m, char *s)\n+int\n+err__fl (int f, int m, char *s)\n {\n-\tif (!f)\n-\t\tf__fatal(m, s);\n-\tif (f__doend)\n-\t\t(*f__doend)();\n-\tf__init &= ~2;\n-\treturn errno = m;\n-\t}\n+  if (!f)\n+    f__fatal (m, s);\n+  if (f__doend)\n+    (*f__doend) ();\n+  f__init &= ~2;\n+  return errno = m;\n+}"}, {"sha": "04b13e8de5dcdc5b3b429ead46de0f953f54f060", "filename": "libf2c/libI77/f2ch.add", "status": "modified", "additions": 158, "deletions": 157, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ff2ch.add", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ff2ch.add", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ff2ch.add?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,161 +2,162 @@\n    for compiling libF77 and libI77. */\n \n #ifdef __cplusplus\n-extern \"C\" {\n-extern int abort_(void);\n-extern double c_abs(complex *);\n-extern void c_cos(complex *, complex *);\n-extern void c_div(complex *, complex *, complex *);\n-extern void c_exp(complex *, complex *);\n-extern void c_log(complex *, complex *);\n-extern void c_sin(complex *, complex *);\n-extern void c_sqrt(complex *, complex *);\n-extern double d_abs(double *);\n-extern double d_acos(double *);\n-extern double d_asin(double *);\n-extern double d_atan(double *);\n-extern double d_atn2(double *, double *);\n-extern void d_cnjg(doublecomplex *, doublecomplex *);\n-extern double d_cos(double *);\n-extern double d_cosh(double *);\n-extern double d_dim(double *, double *);\n-extern double d_exp(double *);\n-extern double d_imag(doublecomplex *);\n-extern double d_int(double *);\n-extern double d_lg10(double *);\n-extern double d_log(double *);\n-extern double d_mod(double *, double *);\n-extern double d_nint(double *);\n-extern double d_prod(float *, float *);\n-extern double d_sign(double *, double *);\n-extern double d_sin(double *);\n-extern double d_sinh(double *);\n-extern double d_sqrt(double *);\n-extern double d_tan(double *);\n-extern double d_tanh(double *);\n-extern double derf_(double *);\n-extern double derfc_(double *);\n-extern integer do_fio(ftnint *, char *, ftnlen);\n-extern integer do_lio(ftnint *, ftnint *, char *, ftnlen);\n-extern integer do_uio(ftnint *, char *, ftnlen);\n-extern integer e_rdfe(void);\n-extern integer e_rdue(void);\n-extern integer e_rsfe(void);\n-extern integer e_rsfi(void);\n-extern integer e_rsle(void);\n-extern integer e_rsli(void);\n-extern integer e_rsue(void);\n-extern integer e_wdfe(void);\n-extern integer e_wdue(void);\n-extern integer e_wsfe(void);\n-extern integer e_wsfi(void);\n-extern integer e_wsle(void);\n-extern integer e_wsli(void);\n-extern integer e_wsue(void);\n-extern int ef1asc_(ftnint *, ftnlen *, ftnint *, ftnlen *);\n-extern integer ef1cmc_(ftnint *, ftnlen *, ftnint *, ftnlen *);\n-extern double erf(double);\n-extern double erf_(float *);\n-extern double erfc(double);\n-extern double erfc_(float *);\n-extern integer f_back(alist *);\n-extern integer f_clos(cllist *);\n-extern integer f_end(alist *);\n-extern void f_exit(void);\n-extern integer f_inqu(inlist *);\n-extern integer f_open(olist *);\n-extern integer f_rew(alist *);\n-extern int flush_(void);\n-extern void getarg_(integer *, char *, ftnlen);\n-extern void getenv_(char *, char *, ftnlen, ftnlen);\n-extern short h_abs(short *);\n-extern short h_dim(short *, short *);\n-extern short h_dnnt(double *);\n-extern short h_indx(char *, char *, ftnlen, ftnlen);\n-extern short h_len(char *, ftnlen);\n-extern short h_mod(short *, short *);\n-extern short h_nint(float *);\n-extern short h_sign(short *, short *);\n-extern short hl_ge(char *, char *, ftnlen, ftnlen);\n-extern short hl_gt(char *, char *, ftnlen, ftnlen);\n-extern short hl_le(char *, char *, ftnlen, ftnlen);\n-extern short hl_lt(char *, char *, ftnlen, ftnlen);\n-extern integer i_abs(integer *);\n-extern integer i_dim(integer *, integer *);\n-extern integer i_dnnt(double *);\n-extern integer i_indx(char *, char *, ftnlen, ftnlen);\n-extern integer i_len(char *, ftnlen);\n-extern integer i_mod(integer *, integer *);\n-extern integer i_nint(float *);\n-extern integer i_sign(integer *, integer *);\n-extern integer iargc_(void);\n-extern ftnlen l_ge(char *, char *, ftnlen, ftnlen);\n-extern ftnlen l_gt(char *, char *, ftnlen, ftnlen);\n-extern ftnlen l_le(char *, char *, ftnlen, ftnlen);\n-extern ftnlen l_lt(char *, char *, ftnlen, ftnlen);\n-extern void pow_ci(complex *, complex *, integer *);\n-extern double pow_dd(double *, double *);\n-extern double pow_di(double *, integer *);\n-extern short pow_hh(short *, shortint *);\n-extern integer pow_ii(integer *, integer *);\n-extern double pow_ri(float *, integer *);\n-extern void pow_zi(doublecomplex *, doublecomplex *, integer *);\n-extern void pow_zz(doublecomplex *, doublecomplex *, doublecomplex *);\n-extern double r_abs(float *);\n-extern double r_acos(float *);\n-extern double r_asin(float *);\n-extern double r_atan(float *);\n-extern double r_atn2(float *, float *);\n-extern void r_cnjg(complex *, complex *);\n-extern double r_cos(float *);\n-extern double r_cosh(float *);\n-extern double r_dim(float *, float *);\n-extern double r_exp(float *);\n-extern double r_imag(complex *);\n-extern double r_int(float *);\n-extern double r_lg10(float *);\n-extern double r_log(float *);\n-extern double r_mod(float *, float *);\n-extern double r_nint(float *);\n-extern double r_sign(float *, float *);\n-extern double r_sin(float *);\n-extern double r_sinh(float *);\n-extern double r_sqrt(float *);\n-extern double r_tan(float *);\n-extern double r_tanh(float *);\n-extern void s_cat(char *, char **, integer *, integer *, ftnlen);\n-extern integer s_cmp(char *, char *, ftnlen, ftnlen);\n-extern void s_copy(char *, char *, ftnlen, ftnlen);\n-extern int s_paus(char *, ftnlen);\n-extern integer s_rdfe(cilist *);\n-extern integer s_rdue(cilist *);\n-extern integer s_rnge(char *, integer, char *, integer);\n-extern integer s_rsfe(cilist *);\n-extern integer s_rsfi(icilist *);\n-extern integer s_rsle(cilist *);\n-extern integer s_rsli(icilist *);\n-extern integer s_rsne(cilist *);\n-extern integer s_rsni(icilist *);\n-extern integer s_rsue(cilist *);\n-extern int s_stop(char *, ftnlen);\n-extern integer s_wdfe(cilist *);\n-extern integer s_wdue(cilist *);\n-extern integer s_wsfe(cilist *);\n-extern integer s_wsfi(icilist *);\n-extern integer s_wsle(cilist *);\n-extern integer s_wsli(icilist *);\n-extern integer s_wsne(cilist *);\n-extern integer s_wsni(icilist *);\n-extern integer s_wsue(cilist *);\n-extern void sig_die(char *, int);\n-extern integer signal_(integer *, void (*)(int));\n-extern integer system_(char *, ftnlen);\n-extern double z_abs(doublecomplex *);\n-extern void z_cos(doublecomplex *, doublecomplex *);\n-extern void z_div(doublecomplex *, doublecomplex *, doublecomplex *);\n-extern void z_exp(doublecomplex *, doublecomplex *);\n-extern void z_log(doublecomplex *, doublecomplex *);\n-extern void z_sin(doublecomplex *, doublecomplex *);\n-extern void z_sqrt(doublecomplex *, doublecomplex *);\n-\t}\n+extern \"C\"\n+{\n+  extern int abort_ (void);\n+  extern double c_abs (complex *);\n+  extern void c_cos (complex *, complex *);\n+  extern void c_div (complex *, complex *, complex *);\n+  extern void c_exp (complex *, complex *);\n+  extern void c_log (complex *, complex *);\n+  extern void c_sin (complex *, complex *);\n+  extern void c_sqrt (complex *, complex *);\n+  extern double d_abs (double *);\n+  extern double d_acos (double *);\n+  extern double d_asin (double *);\n+  extern double d_atan (double *);\n+  extern double d_atn2 (double *, double *);\n+  extern void d_cnjg (doublecomplex *, doublecomplex *);\n+  extern double d_cos (double *);\n+  extern double d_cosh (double *);\n+  extern double d_dim (double *, double *);\n+  extern double d_exp (double *);\n+  extern double d_imag (doublecomplex *);\n+  extern double d_int (double *);\n+  extern double d_lg10 (double *);\n+  extern double d_log (double *);\n+  extern double d_mod (double *, double *);\n+  extern double d_nint (double *);\n+  extern double d_prod (float *, float *);\n+  extern double d_sign (double *, double *);\n+  extern double d_sin (double *);\n+  extern double d_sinh (double *);\n+  extern double d_sqrt (double *);\n+  extern double d_tan (double *);\n+  extern double d_tanh (double *);\n+  extern double derf_ (double *);\n+  extern double derfc_ (double *);\n+  extern integer do_fio (ftnint *, char *, ftnlen);\n+  extern integer do_lio (ftnint *, ftnint *, char *, ftnlen);\n+  extern integer do_uio (ftnint *, char *, ftnlen);\n+  extern integer e_rdfe (void);\n+  extern integer e_rdue (void);\n+  extern integer e_rsfe (void);\n+  extern integer e_rsfi (void);\n+  extern integer e_rsle (void);\n+  extern integer e_rsli (void);\n+  extern integer e_rsue (void);\n+  extern integer e_wdfe (void);\n+  extern integer e_wdue (void);\n+  extern integer e_wsfe (void);\n+  extern integer e_wsfi (void);\n+  extern integer e_wsle (void);\n+  extern integer e_wsli (void);\n+  extern integer e_wsue (void);\n+  extern int ef1asc_ (ftnint *, ftnlen *, ftnint *, ftnlen *);\n+  extern integer ef1cmc_ (ftnint *, ftnlen *, ftnint *, ftnlen *);\n+  extern double erf (double);\n+  extern double erf_ (float *);\n+  extern double erfc (double);\n+  extern double erfc_ (float *);\n+  extern integer f_back (alist *);\n+  extern integer f_clos (cllist *);\n+  extern integer f_end (alist *);\n+  extern void f_exit (void);\n+  extern integer f_inqu (inlist *);\n+  extern integer f_open (olist *);\n+  extern integer f_rew (alist *);\n+  extern int flush_ (void);\n+  extern void getarg_ (integer *, char *, ftnlen);\n+  extern void getenv_ (char *, char *, ftnlen, ftnlen);\n+  extern short h_abs (short *);\n+  extern short h_dim (short *, short *);\n+  extern short h_dnnt (double *);\n+  extern short h_indx (char *, char *, ftnlen, ftnlen);\n+  extern short h_len (char *, ftnlen);\n+  extern short h_mod (short *, short *);\n+  extern short h_nint (float *);\n+  extern short h_sign (short *, short *);\n+  extern short hl_ge (char *, char *, ftnlen, ftnlen);\n+  extern short hl_gt (char *, char *, ftnlen, ftnlen);\n+  extern short hl_le (char *, char *, ftnlen, ftnlen);\n+  extern short hl_lt (char *, char *, ftnlen, ftnlen);\n+  extern integer i_abs (integer *);\n+  extern integer i_dim (integer *, integer *);\n+  extern integer i_dnnt (double *);\n+  extern integer i_indx (char *, char *, ftnlen, ftnlen);\n+  extern integer i_len (char *, ftnlen);\n+  extern integer i_mod (integer *, integer *);\n+  extern integer i_nint (float *);\n+  extern integer i_sign (integer *, integer *);\n+  extern integer iargc_ (void);\n+  extern ftnlen l_ge (char *, char *, ftnlen, ftnlen);\n+  extern ftnlen l_gt (char *, char *, ftnlen, ftnlen);\n+  extern ftnlen l_le (char *, char *, ftnlen, ftnlen);\n+  extern ftnlen l_lt (char *, char *, ftnlen, ftnlen);\n+  extern void pow_ci (complex *, complex *, integer *);\n+  extern double pow_dd (double *, double *);\n+  extern double pow_di (double *, integer *);\n+  extern short pow_hh (short *, shortint *);\n+  extern integer pow_ii (integer *, integer *);\n+  extern double pow_ri (float *, integer *);\n+  extern void pow_zi (doublecomplex *, doublecomplex *, integer *);\n+  extern void pow_zz (doublecomplex *, doublecomplex *, doublecomplex *);\n+  extern double r_abs (float *);\n+  extern double r_acos (float *);\n+  extern double r_asin (float *);\n+  extern double r_atan (float *);\n+  extern double r_atn2 (float *, float *);\n+  extern void r_cnjg (complex *, complex *);\n+  extern double r_cos (float *);\n+  extern double r_cosh (float *);\n+  extern double r_dim (float *, float *);\n+  extern double r_exp (float *);\n+  extern double r_imag (complex *);\n+  extern double r_int (float *);\n+  extern double r_lg10 (float *);\n+  extern double r_log (float *);\n+  extern double r_mod (float *, float *);\n+  extern double r_nint (float *);\n+  extern double r_sign (float *, float *);\n+  extern double r_sin (float *);\n+  extern double r_sinh (float *);\n+  extern double r_sqrt (float *);\n+  extern double r_tan (float *);\n+  extern double r_tanh (float *);\n+  extern void s_cat (char *, char **, integer *, integer *, ftnlen);\n+  extern integer s_cmp (char *, char *, ftnlen, ftnlen);\n+  extern void s_copy (char *, char *, ftnlen, ftnlen);\n+  extern int s_paus (char *, ftnlen);\n+  extern integer s_rdfe (cilist *);\n+  extern integer s_rdue (cilist *);\n+  extern integer s_rnge (char *, integer, char *, integer);\n+  extern integer s_rsfe (cilist *);\n+  extern integer s_rsfi (icilist *);\n+  extern integer s_rsle (cilist *);\n+  extern integer s_rsli (icilist *);\n+  extern integer s_rsne (cilist *);\n+  extern integer s_rsni (icilist *);\n+  extern integer s_rsue (cilist *);\n+  extern int s_stop (char *, ftnlen);\n+  extern integer s_wdfe (cilist *);\n+  extern integer s_wdue (cilist *);\n+  extern integer s_wsfe (cilist *);\n+  extern integer s_wsfi (icilist *);\n+  extern integer s_wsle (cilist *);\n+  extern integer s_wsli (icilist *);\n+  extern integer s_wsne (cilist *);\n+  extern integer s_wsni (icilist *);\n+  extern integer s_wsue (cilist *);\n+  extern void sig_die (char *, int);\n+  extern integer signal_ (integer *, void (*)(int));\n+  extern integer system_ (char *, ftnlen);\n+  extern double z_abs (doublecomplex *);\n+  extern void z_cos (doublecomplex *, doublecomplex *);\n+  extern void z_div (doublecomplex *, doublecomplex *, doublecomplex *);\n+  extern void z_exp (doublecomplex *, doublecomplex *);\n+  extern void z_log (doublecomplex *, doublecomplex *);\n+  extern void z_sin (doublecomplex *, doublecomplex *);\n+  extern void z_sqrt (doublecomplex *, doublecomplex *);\n+}\n #endif"}, {"sha": "7734f0c2f2f3a2aa4eb0c9873957715c5c7d9ae4", "filename": "libf2c/libI77/fio.h", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ffio.h?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -39,56 +39,58 @@ typedef long uiolen;\n \n /*units*/\n typedef struct\n-{\tFILE *ufd;\t/*0=unconnected*/\n-\tchar *ufnm;\n+{\n+  FILE *ufd;\t\t\t/*0=unconnected */\n+  char *ufnm;\n #if !(defined (MSDOS) && !defined (GO32))\n-\tlong uinode;\n-\tint udev;\n+  long uinode;\n+  int udev;\n #endif\n-\tint url;\t/*0=sequential*/\n-\tflag useek;\t/*true=can backspace, use dir, ...*/\n-\tflag ufmt;\n-\tflag urw;\t/* (1 for can read) | (2 for can write) */\n-\tflag ublnk;\n-\tflag uend;\n-\tflag uwrt;\t/*last io was write*/\n-\tflag uscrtch;\n-} unit;\n+  int url;\t\t\t/*0=sequential */\n+  flag useek;\t\t\t/*true=can backspace, use dir, ... */\n+  flag ufmt;\n+  flag urw;\t\t\t/* (1 for can read) | (2 for can write) */\n+  flag ublnk;\n+  flag uend;\n+  flag uwrt;\t\t\t/*last io was write */\n+  flag uscrtch;\n+}\n+unit;\n \n extern int f__init;\n-extern cilist *f__elist;\t/*active external io list*/\n-extern flag f__reading,f__external,f__sequential,f__formatted;\n-extern int (*f__getn)(void);\t/* for formatted input */\n-extern void (*f__putn)(int);\t/* for formatted output */\n-extern void x_putc(int);\n-extern long f__inode(char*,int*);\n-extern void sig_die(char*,int);\n-extern void f__fatal(int,char*);\n-extern int t_runc(alist*);\n-extern int f__nowreading(unit*), f__nowwriting(unit*);\n-extern int fk_open(int,int,ftnint);\n-extern int en_fio(void);\n-extern void f_init(void);\n-extern int (*f__donewrec)(void), t_putc(int), x_wSL(void);\n-extern void b_char(char*,char*,ftnlen), g_char(char*,ftnlen,char*);\n-extern int c_sfe(cilist*), z_rnew(void);\n-extern int isatty(int);\n-extern int err__fl(int,int,char*);\n-extern int xrd_SL(void);\n-extern int f__putbuf(int);\n-extern int (*f__doend)(void);\n-extern FILE *f__cf;\t/*current file*/\n-extern unit *f__curunit;\t/*current unit*/\n+extern cilist *f__elist;\t/*active external io list */\n+extern flag f__reading, f__external, f__sequential, f__formatted;\n+extern int (*f__getn) (void);\t/* for formatted input */\n+extern void (*f__putn) (int);\t/* for formatted output */\n+extern void x_putc (int);\n+extern long f__inode (char *, int *);\n+extern void sig_die (char *, int);\n+extern void f__fatal (int, char *);\n+extern int t_runc (alist *);\n+extern int f__nowreading (unit *), f__nowwriting (unit *);\n+extern int fk_open (int, int, ftnint);\n+extern int en_fio (void);\n+extern void f_init (void);\n+extern int (*f__donewrec) (void), t_putc (int), x_wSL (void);\n+extern void b_char (char *, char *, ftnlen), g_char (char *, ftnlen, char *);\n+extern int c_sfe (cilist *), z_rnew (void);\n+extern int isatty (int);\n+extern int err__fl (int, int, char *);\n+extern int xrd_SL (void);\n+extern int f__putbuf (int);\n+extern int (*f__doend) (void);\n+extern FILE *f__cf;\t\t/*current file */\n+extern unit *f__curunit;\t/*current unit */\n extern unit f__units[];\n #define err(f,m,s) do {if(f) {f__init &= ~2; errno= m;} else f__fatal(m,s); return(m);} while(0)\n #define errfl(f,m,s) do {return err__fl((int)f,m,s);} while(0)\n \n /*Table sizes*/\n #define MXUNIT 100\n \n-extern int f__recpos;\t/*position in current record*/\n-extern int f__cursor;\t/* offset to move to */\n-extern int f__hiwater;\t/* so TL doesn't confuse us */\n+extern int f__recpos;\t\t/*position in current record */\n+extern int f__cursor;\t\t/* offset to move to */\n+extern int f__hiwater;\t\t/* so TL doesn't confuse us */\n \n #define WRITE\t1\n #define READ\t2"}, {"sha": "7443cbab8da024f509153036713768be50d97b43", "filename": "libf2c/libI77/fmt.c", "status": "modified", "additions": 521, "deletions": 420, "changes": 941, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ffmt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -17,483 +17,584 @@\n #endif\n #define GLITCH '\\2'\n \t/* special quote character for stu */\n-extern int f__cursor,f__scale;\n-extern flag f__cblank,f__cplus;\t/*blanks in I and compulsory plus*/\n+extern int f__cursor, f__scale;\n+extern flag f__cblank, f__cplus;\t/*blanks in I and compulsory plus */\n static struct syl f__syl[SYLMX];\n-int f__parenlvl,f__pc,f__revloc;\n+int f__parenlvl, f__pc, f__revloc;\n \n- static\n-char *ap_end(char *s)\n-{\tchar quote;\n-\tquote= *s++;\n-\tfor(;*s;s++)\n-\t{\tif(*s!=quote) continue;\n-\t\tif(*++s!=quote) return(s);\n-\t}\n-\tif(f__elist->cierr) {\n-\t\terrno = 100;\n-\t\treturn(NULL);\n-\t}\n-\tf__fatal(100, \"bad string\");\n-\t/*NOTREACHED*/ return 0;\n+static char *\n+ap_end (char *s)\n+{\n+  char quote;\n+  quote = *s++;\n+  for (; *s; s++)\n+    {\n+      if (*s != quote)\n+\tcontinue;\n+      if (*++s != quote)\n+\treturn (s);\n+    }\n+  if (f__elist->cierr)\n+    {\n+      errno = 100;\n+      return (NULL);\n+    }\n+  f__fatal (100, \"bad string\");\n+   /*NOTREACHED*/ return 0;\n }\n- static\n-op_gen(int a, int b, int c, int d)\n-{\tstruct syl *p= &f__syl[f__pc];\n-\tif(f__pc>=SYLMX)\n-\t{\tfprintf(stderr,\"format too complicated:\\n\");\n-\t\tsig_die(f__fmtbuf, 1);\n-\t}\n-\tp->op=a;\n-\tp->p1=b;\n-\tp->p2.i[0]=c;\n-\tp->p2.i[1]=d;\n-\treturn(f__pc++);\n+\n+static\n+op_gen (int a, int b, int c, int d)\n+{\n+  struct syl *p = &f__syl[f__pc];\n+  if (f__pc >= SYLMX)\n+    {\n+      fprintf (stderr, \"format too complicated:\\n\");\n+      sig_die (f__fmtbuf, 1);\n+    }\n+  p->op = a;\n+  p->p1 = b;\n+  p->p2.i[0] = c;\n+  p->p2.i[1] = d;\n+  return (f__pc++);\n }\n-static char *f_list(char*);\n-static char *gt_num(char *s, int *n, int n1)\n-{\tint m=0,f__cnt=0;\n-\tchar c;\n-\tfor(c= *s;;c = *s)\n-\t{\tif(c==' ')\n-\t\t{\ts++;\n-\t\t\tcontinue;\n-\t\t}\n-\t\tif(c>'9' || c<'0') break;\n-\t\tm=10*m+c-'0';\n-\t\tf__cnt++;\n-\t\ts++;\n+static char *f_list (char *);\n+static char *\n+gt_num (char *s, int *n, int n1)\n+{\n+  int m = 0, f__cnt = 0;\n+  char c;\n+  for (c = *s;; c = *s)\n+    {\n+      if (c == ' ')\n+\t{\n+\t  s++;\n+\t  continue;\n \t}\n-\tif(f__cnt==0) {\n-\t\tif (!n1)\n-\t\t\ts = 0;\n-\t\t*n=n1;\n-\t\t}\n-\telse *n=m;\n-\treturn(s);\n+      if (c > '9' || c < '0')\n+\tbreak;\n+      m = 10 * m + c - '0';\n+      f__cnt++;\n+      s++;\n+    }\n+  if (f__cnt == 0)\n+    {\n+      if (!n1)\n+\ts = 0;\n+      *n = n1;\n+    }\n+  else\n+    *n = m;\n+  return (s);\n+}\n+\n+static char *\n+f_s (char *s, int curloc)\n+{\n+  skip (s);\n+  if (*s++ != '(')\n+    {\n+      return (NULL);\n+    }\n+  if (f__parenlvl++ == 1)\n+    f__revloc = curloc;\n+  if (op_gen (RET1, curloc, 0, 0) < 0 || (s = f_list (s)) == NULL)\n+    {\n+      return (NULL);\n+    }\n+  return (s);\n }\n \n- static\n-char *f_s(char *s, int curloc)\n+static\n+ne_d (char *s, char **p)\n {\n-\tskip(s);\n-\tif(*s++!='(')\n+  int n, x, sign = 0;\n+  struct syl *sp;\n+  switch (*s)\n+    {\n+    default:\n+      return (0);\n+    case ':':\n+      (void) op_gen (COLON, 0, 0, 0);\n+      break;\n+    case '$':\n+      (void) op_gen (NONL, 0, 0, 0);\n+      break;\n+    case 'B':\n+    case 'b':\n+      if (*++s == 'z' || *s == 'Z')\n+\t(void) op_gen (BZ, 0, 0, 0);\n+      else\n+\t(void) op_gen (BN, 0, 0, 0);\n+      break;\n+    case 'S':\n+    case 's':\n+      if (*(s + 1) == 's' || *(s + 1) == 'S')\n \t{\n-\t\treturn(NULL);\n+\t  x = SS;\n+\t  s++;\n \t}\n-\tif(f__parenlvl++ ==1) f__revloc=curloc;\n-\tif(op_gen(RET1,curloc,0,0)<0 ||\n-\t\t(s=f_list(s))==NULL)\n+      else if (*(s + 1) == 'p' || *(s + 1) == 'P')\n \t{\n-\t\treturn(NULL);\n+\t  x = SP;\n+\t  s++;\n \t}\n-\treturn(s);\n-}\n-\n- static\n-ne_d(char *s, char **p)\n-{\tint n,x,sign=0;\n-\tstruct syl *sp;\n-\tswitch(*s)\n+      else\n+\tx = S;\n+      (void) op_gen (x, 0, 0, 0);\n+      break;\n+    case '/':\n+      (void) op_gen (SLASH, 0, 0, 0);\n+      break;\n+    case '-':\n+      sign = 1;\n+    case '+':\n+      s++;\t\t\t/*OUTRAGEOUS CODING TRICK */\n+    case '0':\n+    case '1':\n+    case '2':\n+    case '3':\n+    case '4':\n+    case '5':\n+    case '6':\n+    case '7':\n+    case '8':\n+    case '9':\n+      if (!(s = gt_num (s, &n, 0)))\n+\t{\n+\tbad:*p = 0;\n+\t  return 1;\n+\t}\n+      switch (*s)\n \t{\n \tdefault:\n-\t\treturn(0);\n-\tcase ':': (void) op_gen(COLON,0,0,0); break;\n-\tcase '$':\n-\t\t(void) op_gen(NONL, 0, 0, 0); break;\n-\tcase 'B':\n-\tcase 'b':\n-\t\tif(*++s=='z' || *s == 'Z') (void) op_gen(BZ,0,0,0);\n-\t\telse (void) op_gen(BN,0,0,0);\n-\t\tbreak;\n-\tcase 'S':\n-\tcase 's':\n-\t\tif(*(s+1)=='s' || *(s+1) == 'S')\n-\t\t{\tx=SS;\n-\t\t\ts++;\n-\t\t}\n-\t\telse if(*(s+1)=='p' || *(s+1) == 'P')\n-\t\t{\tx=SP;\n-\t\t\ts++;\n-\t\t}\n-\t\telse x=S;\n-\t\t(void) op_gen(x,0,0,0);\n-\t\tbreak;\n-\tcase '/': (void) op_gen(SLASH,0,0,0); break;\n-\tcase '-': sign=1;\n-\tcase '+':\ts++;\t/*OUTRAGEOUS CODING TRICK*/\n-\tcase '0': case '1': case '2': case '3': case '4':\n-\tcase '5': case '6': case '7': case '8': case '9':\n-\t\tif (!(s=gt_num(s,&n,0))) {\n- bad:\t\t\t*p = 0;\n-\t\t\treturn 1;\n-\t\t\t}\n-\t\tswitch(*s)\n-\t\t{\n-\t\tdefault:\n-\t\t\treturn(0);\n-\t\tcase 'P':\n-\t\tcase 'p': if(sign) n= -n; (void) op_gen(P,n,0,0); break;\n-\t\tcase 'X':\n-\t\tcase 'x': (void) op_gen(X,n,0,0); break;\n-\t\tcase 'H':\n-\t\tcase 'h':\n-\t\t\tsp = &f__syl[op_gen(H,n,0,0)];\n-\t\t\tsp->p2.s = s + 1;\n-\t\t\ts+=n;\n-\t\t\tbreak;\n-\t\t}\n-\t\tbreak;\n-\tcase GLITCH:\n-\tcase '\"':\n-\tcase '\\'':\n-\t\tsp = &f__syl[op_gen(APOS,0,0,0)];\n-\t\tsp->p2.s = s;\n-\t\tif((*p = ap_end(s)) == NULL)\n-\t\t\treturn(0);\n-\t\treturn(1);\n-\tcase 'T':\n-\tcase 't':\n-\t\tif(*(s+1)=='l' || *(s+1) == 'L')\n-\t\t{\tx=TL;\n-\t\t\ts++;\n-\t\t}\n-\t\telse if(*(s+1)=='r'|| *(s+1) == 'R')\n-\t\t{\tx=TR;\n-\t\t\ts++;\n-\t\t}\n-\t\telse x=T;\n-\t\tif (!(s=gt_num(s+1,&n,0)))\n-\t\t\tgoto bad;\n-\t\ts--;\n-\t\t(void) op_gen(x,n,0,0);\n-\t\tbreak;\n-\tcase 'X':\n-\tcase 'x': (void) op_gen(X,1,0,0); break;\n+\t  return (0);\n \tcase 'P':\n-\tcase 'p': (void) op_gen(P,1,0,0); break;\n+\tcase 'p':\n+\t  if (sign)\n+\t    n = -n;\n+\t  (void) op_gen (P, n, 0, 0);\n+\t  break;\n+\tcase 'X':\n+\tcase 'x':\n+\t  (void) op_gen (X, n, 0, 0);\n+\t  break;\n+\tcase 'H':\n+\tcase 'h':\n+\t  sp = &f__syl[op_gen (H, n, 0, 0)];\n+\t  sp->p2.s = s + 1;\n+\t  s += n;\n+\t  break;\n \t}\n-\ts++;\n-\t*p=s;\n-\treturn(1);\n+      break;\n+    case GLITCH:\n+    case '\"':\n+    case '\\'':\n+      sp = &f__syl[op_gen (APOS, 0, 0, 0)];\n+      sp->p2.s = s;\n+      if ((*p = ap_end (s)) == NULL)\n+\treturn (0);\n+      return (1);\n+    case 'T':\n+    case 't':\n+      if (*(s + 1) == 'l' || *(s + 1) == 'L')\n+\t{\n+\t  x = TL;\n+\t  s++;\n+\t}\n+      else if (*(s + 1) == 'r' || *(s + 1) == 'R')\n+\t{\n+\t  x = TR;\n+\t  s++;\n+\t}\n+      else\n+\tx = T;\n+      if (!(s = gt_num (s + 1, &n, 0)))\n+\tgoto bad;\n+      s--;\n+      (void) op_gen (x, n, 0, 0);\n+      break;\n+    case 'X':\n+    case 'x':\n+      (void) op_gen (X, 1, 0, 0);\n+      break;\n+    case 'P':\n+    case 'p':\n+      (void) op_gen (P, 1, 0, 0);\n+      break;\n+    }\n+  s++;\n+  *p = s;\n+  return (1);\n }\n \n- static\n-e_d(char *s, char **p)\n-{\tint i,im,n,w,d,e,found=0,x=0;\n-\tchar *sv=s;\n-\ts=gt_num(s,&n,1);\n-\t(void) op_gen(STACK,n,0,0);\n-\tswitch(*s++)\n+static\n+e_d (char *s, char **p)\n+{\n+  int i, im, n, w, d, e, found = 0, x = 0;\n+  char *sv = s;\n+  s = gt_num (s, &n, 1);\n+  (void) op_gen (STACK, n, 0, 0);\n+  switch (*s++)\n+    {\n+    default:\n+      break;\n+    case 'E':\n+    case 'e':\n+      x = 1;\n+    case 'G':\n+    case 'g':\n+      found = 1;\n+      if (!(s = gt_num (s, &w, 0)))\n+\t{\n+\tbad:\n+\t  *p = 0;\n+\t  return 1;\n+\t}\n+      if (w == 0)\n+\tbreak;\n+      if (*s == '.')\n \t{\n-\tdefault: break;\n-\tcase 'E':\n-\tcase 'e':\tx=1;\n-\tcase 'G':\n-\tcase 'g':\n-\t\tfound=1;\n-\t\tif (!(s=gt_num(s,&w,0))) {\n- bad:\n-\t\t\t*p = 0;\n-\t\t\treturn 1;\n-\t\t\t}\n-\t\tif(w==0) break;\n-\t\tif(*s=='.') {\n-\t\t\tif (!(s=gt_num(s+1,&d,0)))\n-\t\t\t\tgoto bad;\n-\t\t\t}\n-\t\telse d=0;\n-\t\tif(*s!='E' && *s != 'e')\n-\t\t\t(void) op_gen(x==1?E:G,w,d,0);\t/* default is Ew.dE2 */\n-\t\telse {\n-\t\t\tif (!(s=gt_num(s+1,&e,0)))\n-\t\t\t\tgoto bad;\n-\t\t\t(void) op_gen(x==1?EE:GE,w,d,e);\n-\t\t\t}\n-\t\tbreak;\n-\tcase 'O':\n-\tcase 'o':\n-\t\ti = O;\n-\t\tim = OM;\n-\t\tgoto finish_I;\n-\tcase 'Z':\n-\tcase 'z':\n-\t\ti = Z;\n-\t\tim = ZM;\n-\t\tgoto finish_I;\n-\tcase 'L':\n-\tcase 'l':\n-\t\tfound=1;\n-\t\tif (!(s=gt_num(s,&w,0)))\n-\t\t\tgoto bad;\n-\t\tif(w==0) break;\n-\t\t(void) op_gen(L,w,0,0);\n-\t\tbreak;\n-\tcase 'A':\n-\tcase 'a':\n-\t\tfound=1;\n-\t\tskip(s);\n-\t\tif(*s>='0' && *s<='9')\n-\t\t{\ts=gt_num(s,&w,1);\n-\t\t\tif(w==0) break;\n-\t\t\t(void) op_gen(AW,w,0,0);\n-\t\t\tbreak;\n-\t\t}\n-\t\t(void) op_gen(A,0,0,0);\n-\t\tbreak;\n-\tcase 'F':\n-\tcase 'f':\n-\t\tif (!(s=gt_num(s,&w,0)))\n-\t\t\tgoto bad;\n-\t\tfound=1;\n-\t\tif(w==0) break;\n-\t\tif(*s=='.') {\n-\t\t\tif (!(s=gt_num(s+1,&d,0)))\n-\t\t\t\tgoto bad;\n-\t\t\t}\n-\t\telse d=0;\n-\t\t(void) op_gen(F,w,d,0);\n-\t\tbreak;\n-\tcase 'D':\n-\tcase 'd':\n-\t\tfound=1;\n-\t\tif (!(s=gt_num(s,&w,0)))\n-\t\t\tgoto bad;\n-\t\tif(w==0) break;\n-\t\tif(*s=='.') {\n-\t\t\tif (!(s=gt_num(s+1,&d,0)))\n-\t\t\t\tgoto bad;\n-\t\t\t}\n-\t\telse d=0;\n-\t\t(void) op_gen(D,w,d,0);\n-\t\tbreak;\n-\tcase 'I':\n-\tcase 'i':\n-\t\ti = I;\n-\t\tim = IM;\n- finish_I:\n-\t\tif (!(s=gt_num(s,&w,0)))\n-\t\t\tgoto bad;\n-\t\tfound=1;\n-\t\tif(w==0) break;\n-\t\tif(*s!='.')\n-\t\t{\t(void) op_gen(i,w,0,0);\n-\t\t\tbreak;\n-\t\t}\n-\t\tif (!(s=gt_num(s+1,&d,0)))\n-\t\t\tgoto bad;\n-\t\t(void) op_gen(im,w,d,0);\n-\t\tbreak;\n+\t  if (!(s = gt_num (s + 1, &d, 0)))\n+\t    goto bad;\n \t}\n-\tif(found==0)\n-\t{\tf__pc--; /*unSTACK*/\n-\t\t*p=sv;\n-\t\treturn(0);\n+      else\n+\td = 0;\n+      if (*s != 'E' && *s != 'e')\n+\t(void) op_gen (x == 1 ? E : G, w, d, 0);\t/* default is Ew.dE2 */\n+      else\n+\t{\n+\t  if (!(s = gt_num (s + 1, &e, 0)))\n+\t    goto bad;\n+\t  (void) op_gen (x == 1 ? EE : GE, w, d, e);\n+\t}\n+      break;\n+    case 'O':\n+    case 'o':\n+      i = O;\n+      im = OM;\n+      goto finish_I;\n+    case 'Z':\n+    case 'z':\n+      i = Z;\n+      im = ZM;\n+      goto finish_I;\n+    case 'L':\n+    case 'l':\n+      found = 1;\n+      if (!(s = gt_num (s, &w, 0)))\n+\tgoto bad;\n+      if (w == 0)\n+\tbreak;\n+      (void) op_gen (L, w, 0, 0);\n+      break;\n+    case 'A':\n+    case 'a':\n+      found = 1;\n+      skip (s);\n+      if (*s >= '0' && *s <= '9')\n+\t{\n+\t  s = gt_num (s, &w, 1);\n+\t  if (w == 0)\n+\t    break;\n+\t  (void) op_gen (AW, w, 0, 0);\n+\t  break;\n+\t}\n+      (void) op_gen (A, 0, 0, 0);\n+      break;\n+    case 'F':\n+    case 'f':\n+      if (!(s = gt_num (s, &w, 0)))\n+\tgoto bad;\n+      found = 1;\n+      if (w == 0)\n+\tbreak;\n+      if (*s == '.')\n+\t{\n+\t  if (!(s = gt_num (s + 1, &d, 0)))\n+\t    goto bad;\n+\t}\n+      else\n+\td = 0;\n+      (void) op_gen (F, w, d, 0);\n+      break;\n+    case 'D':\n+    case 'd':\n+      found = 1;\n+      if (!(s = gt_num (s, &w, 0)))\n+\tgoto bad;\n+      if (w == 0)\n+\tbreak;\n+      if (*s == '.')\n+\t{\n+\t  if (!(s = gt_num (s + 1, &d, 0)))\n+\t    goto bad;\n \t}\n-\t*p=s;\n-\treturn(1);\n+      else\n+\td = 0;\n+      (void) op_gen (D, w, d, 0);\n+      break;\n+    case 'I':\n+    case 'i':\n+      i = I;\n+      im = IM;\n+    finish_I:\n+      if (!(s = gt_num (s, &w, 0)))\n+\tgoto bad;\n+      found = 1;\n+      if (w == 0)\n+\tbreak;\n+      if (*s != '.')\n+\t{\n+\t  (void) op_gen (i, w, 0, 0);\n+\t  break;\n+\t}\n+      if (!(s = gt_num (s + 1, &d, 0)))\n+\tgoto bad;\n+      (void) op_gen (im, w, d, 0);\n+      break;\n+    }\n+  if (found == 0)\n+    {\n+      f__pc--;\t\t\t/*unSTACK */\n+      *p = sv;\n+      return (0);\n+    }\n+  *p = s;\n+  return (1);\n }\n- static\n-char *i_tem(char *s)\n-{\tchar *t;\n-\tint n,curloc;\n-\tif(*s==')') return(s);\n-\tif(ne_d(s,&t)) return(t);\n-\tif(e_d(s,&t)) return(t);\n-\ts=gt_num(s,&n,1);\n-\tif((curloc=op_gen(STACK,n,0,0))<0) return(NULL);\n-\treturn(f_s(s,curloc));\n+static char *\n+i_tem (char *s)\n+{\n+  char *t;\n+  int n, curloc;\n+  if (*s == ')')\n+    return (s);\n+  if (ne_d (s, &t))\n+    return (t);\n+  if (e_d (s, &t))\n+    return (t);\n+  s = gt_num (s, &n, 1);\n+  if ((curloc = op_gen (STACK, n, 0, 0)) < 0)\n+    return (NULL);\n+  return (f_s (s, curloc));\n }\n \n- static\n-char *f_list(char *s)\n+static char *\n+f_list (char *s)\n {\n-\tfor(;*s!=0;)\n-\t{\tskip(s);\n-\t\tif((s=i_tem(s))==NULL) return(NULL);\n-\t\tskip(s);\n-\t\tif(*s==',') s++;\n-\t\telse if(*s==')')\n-\t\t{\tif(--f__parenlvl==0)\n-\t\t\t{\n-\t\t\t\t(void) op_gen(REVERT,f__revloc,0,0);\n-\t\t\t\treturn(++s);\n-\t\t\t}\n-\t\t\t(void) op_gen(GOTO,0,0,0);\n-\t\t\treturn(++s);\n-\t\t}\n+  for (; *s != 0;)\n+    {\n+      skip (s);\n+      if ((s = i_tem (s)) == NULL)\n+\treturn (NULL);\n+      skip (s);\n+      if (*s == ',')\n+\ts++;\n+      else if (*s == ')')\n+\t{\n+\t  if (--f__parenlvl == 0)\n+\t    {\n+\t      (void) op_gen (REVERT, f__revloc, 0, 0);\n+\t      return (++s);\n+\t    }\n+\t  (void) op_gen (GOTO, 0, 0, 0);\n+\t  return (++s);\n \t}\n-\treturn(NULL);\n+    }\n+  return (NULL);\n }\n \n-pars_f(char *s)\n+pars_f (char *s)\n {\n-\tchar *e;\n+  char *e;\n \n-\tf__parenlvl=f__revloc=f__pc=0;\n-\tif((e=f_s(s,0)) == NULL)\n-\t{\n-\t\t/* Try and delimit the format string.  Parens within\n-\t\t   hollerith and quoted strings have to match for this\n-\t\t   to work, but it's probably adequate for most needs.\n-\t\t   Note that this is needed because a valid CHARACTER\n-\t\t   variable passed for FMT= can contain '(I)garbage',\n-\t\t   where `garbage' is billions and billions of junk\n-\t\t   characters, and it's up to the run-time library to\n-\t\t   know where the format string ends by counting parens.\n-\t\t   Meanwhile, still treat NUL byte as \"hard stop\", since\n-\t\t   f2c still appends that at end of FORMAT-statement\n-\t\t   strings.  */\n+  f__parenlvl = f__revloc = f__pc = 0;\n+  if ((e = f_s (s, 0)) == NULL)\n+    {\n+      /* Try and delimit the format string.  Parens within\n+         hollerith and quoted strings have to match for this\n+         to work, but it's probably adequate for most needs.\n+         Note that this is needed because a valid CHARACTER\n+         variable passed for FMT= can contain '(I)garbage',\n+         where `garbage' is billions and billions of junk\n+         characters, and it's up to the run-time library to\n+         know where the format string ends by counting parens.\n+         Meanwhile, still treat NUL byte as \"hard stop\", since\n+         f2c still appends that at end of FORMAT-statement\n+         strings.  */\n \n-\t\tint level=0;\n+      int level = 0;\n \n-\t\tfor (f__fmtlen=0;\n-\t\t\t((*s!=')') || (--level > 0))\n-\t\t\t\t&& (*s!='\\0')\n-\t\t\t\t&& (f__fmtlen<80);\n-\t\t\t++s, ++f__fmtlen)\n-\t\t{\n-\t\t\tif (*s=='(')\n-\t\t\t\t++level;\n-\t\t}\n-\t\tif (*s==')')\n-\t\t\t++f__fmtlen;\n-\t\treturn(-1);\n+      for (f__fmtlen = 0;\n+\t   ((*s != ')') || (--level > 0))\n+\t   && (*s != '\\0') && (f__fmtlen < 80); ++s, ++f__fmtlen)\n+\t{\n+\t  if (*s == '(')\n+\t    ++level;\n \t}\n-\tf__fmtlen = e - s;\n-\treturn(0);\n+      if (*s == ')')\n+\t++f__fmtlen;\n+      return (-1);\n+    }\n+  f__fmtlen = e - s;\n+  return (0);\n }\n+\n #define STKSZ 10\n-int f__cnt[STKSZ],f__ret[STKSZ],f__cp,f__rp;\n+int f__cnt[STKSZ], f__ret[STKSZ], f__cp, f__rp;\n flag f__workdone, f__nonl;\n \n- static\n-type_f(int n)\n+static\n+type_f (int n)\n {\n-\tswitch(n)\n-\t{\n-\tdefault:\n-\t\treturn(n);\n-\tcase RET1:\n-\t\treturn(RET1);\n-\tcase REVERT: return(REVERT);\n-\tcase GOTO: return(GOTO);\n-\tcase STACK: return(STACK);\n-\tcase X:\n-\tcase SLASH:\n-\tcase APOS: case H:\n-\tcase T: case TL: case TR:\n-\t\treturn(NED);\n-\tcase F:\n-\tcase I:\n-\tcase IM:\n-\tcase A: case AW:\n-\tcase O: case OM:\n-\tcase L:\n-\tcase E: case EE: case D:\n-\tcase G: case GE:\n-\tcase Z: case ZM:\n-\t\treturn(ED);\n-\t}\n+  switch (n)\n+    {\n+    default:\n+      return (n);\n+    case RET1:\n+      return (RET1);\n+    case REVERT:\n+      return (REVERT);\n+    case GOTO:\n+      return (GOTO);\n+    case STACK:\n+      return (STACK);\n+    case X:\n+    case SLASH:\n+    case APOS:\n+    case H:\n+    case T:\n+    case TL:\n+    case TR:\n+      return (NED);\n+    case F:\n+    case I:\n+    case IM:\n+    case A:\n+    case AW:\n+    case O:\n+    case OM:\n+    case L:\n+    case E:\n+    case EE:\n+    case D:\n+    case G:\n+    case GE:\n+    case Z:\n+    case ZM:\n+      return (ED);\n+    }\n }\n-integer do_fio(ftnint *number, char *ptr, ftnlen len)\n-{\tstruct syl *p;\n-\tint n,i;\n-\tfor(i=0;i<*number;i++,ptr+=len)\n-\t{\n-loop:\tswitch(type_f((p= &f__syl[f__pc])->op))\n+integer\n+do_fio (ftnint * number, char *ptr, ftnlen len)\n+{\n+  struct syl *p;\n+  int n, i;\n+  for (i = 0; i < *number; i++, ptr += len)\n+    {\n+    loop:switch (type_f ((p = &f__syl[f__pc])->op))\n \t{\n \tdefault:\n-\t\tfprintf(stderr,\"unknown code in do_fio: %d\\n%.*s\\n\",\n-\t\t\tp->op,f__fmtlen,f__fmtbuf);\n-\t\terr(f__elist->cierr,100,\"do_fio\");\n+\t  fprintf (stderr, \"unknown code in do_fio: %d\\n%.*s\\n\",\n+\t\t   p->op, f__fmtlen, f__fmtbuf);\n+\t  err (f__elist->cierr, 100, \"do_fio\");\n \tcase NED:\n-\t\tif((*f__doned)(p))\n-\t\t{\tf__pc++;\n-\t\t\tgoto loop;\n-\t\t}\n-\t\tf__pc++;\n-\t\tcontinue;\n+\t  if ((*f__doned) (p))\n+\t    {\n+\t      f__pc++;\n+\t      goto loop;\n+\t    }\n+\t  f__pc++;\n+\t  continue;\n \tcase ED:\n-\t\tif(f__cnt[f__cp]<=0)\n-\t\t{\tf__cp--;\n-\t\t\tf__pc++;\n-\t\t\tgoto loop;\n-\t\t}\n-\t\tif(ptr==NULL)\n-\t\t\treturn((*f__doend)());\n-\t\tf__cnt[f__cp]--;\n-\t\tf__workdone=1;\n-\t\tif((n=(*f__doed)(p,ptr,len))>0)\n-\t\t\terrfl(f__elist->cierr,errno,\"fmt\");\n-\t\tif(n<0)\n-\t\t\terr(f__elist->ciend,(EOF),\"fmt\");\n-\t\tcontinue;\n+\t  if (f__cnt[f__cp] <= 0)\n+\t    {\n+\t      f__cp--;\n+\t      f__pc++;\n+\t      goto loop;\n+\t    }\n+\t  if (ptr == NULL)\n+\t    return ((*f__doend) ());\n+\t  f__cnt[f__cp]--;\n+\t  f__workdone = 1;\n+\t  if ((n = (*f__doed) (p, ptr, len)) > 0)\n+\t    errfl (f__elist->cierr, errno, \"fmt\");\n+\t  if (n < 0)\n+\t    err (f__elist->ciend, (EOF), \"fmt\");\n+\t  continue;\n \tcase STACK:\n-\t\tf__cnt[++f__cp]=p->p1;\n-\t\tf__pc++;\n-\t\tgoto loop;\n+\t  f__cnt[++f__cp] = p->p1;\n+\t  f__pc++;\n+\t  goto loop;\n \tcase RET1:\n-\t\tf__ret[++f__rp]=p->p1;\n-\t\tf__pc++;\n-\t\tgoto loop;\n+\t  f__ret[++f__rp] = p->p1;\n+\t  f__pc++;\n+\t  goto loop;\n \tcase GOTO:\n-\t\tif(--f__cnt[f__cp]<=0)\n-\t\t{\tf__cp--;\n-\t\t\tf__rp--;\n-\t\t\tf__pc++;\n-\t\t\tgoto loop;\n-\t\t}\n-\t\tf__pc=1+f__ret[f__rp--];\n-\t\tgoto loop;\n+\t  if (--f__cnt[f__cp] <= 0)\n+\t    {\n+\t      f__cp--;\n+\t      f__rp--;\n+\t      f__pc++;\n+\t      goto loop;\n+\t    }\n+\t  f__pc = 1 + f__ret[f__rp--];\n+\t  goto loop;\n \tcase REVERT:\n-\t\tf__rp=f__cp=0;\n-\t\tf__pc = p->p1;\n-\t\tif(ptr==NULL)\n-\t\t\treturn((*f__doend)());\n-\t\tif(!f__workdone) return(0);\n-\t\tif((n=(*f__dorevert)()) != 0) return(n);\n-\t\tgoto loop;\n+\t  f__rp = f__cp = 0;\n+\t  f__pc = p->p1;\n+\t  if (ptr == NULL)\n+\t    return ((*f__doend) ());\n+\t  if (!f__workdone)\n+\t    return (0);\n+\t  if ((n = (*f__dorevert) ()) != 0)\n+\t    return (n);\n+\t  goto loop;\n \tcase COLON:\n-\t\tif(ptr==NULL)\n-\t\t\treturn((*f__doend)());\n-\t\tf__pc++;\n-\t\tgoto loop;\n+\t  if (ptr == NULL)\n+\t    return ((*f__doend) ());\n+\t  f__pc++;\n+\t  goto loop;\n \tcase NONL:\n-\t\tf__nonl = 1;\n-\t\tf__pc++;\n-\t\tgoto loop;\n+\t  f__nonl = 1;\n+\t  f__pc++;\n+\t  goto loop;\n \tcase S:\n \tcase SS:\n-\t\tf__cplus=0;\n-\t\tf__pc++;\n-\t\tgoto loop;\n+\t  f__cplus = 0;\n+\t  f__pc++;\n+\t  goto loop;\n \tcase SP:\n-\t\tf__cplus = 1;\n-\t\tf__pc++;\n-\t\tgoto loop;\n-\tcase P:\tf__scale=p->p1;\n-\t\tf__pc++;\n-\t\tgoto loop;\n+\t  f__cplus = 1;\n+\t  f__pc++;\n+\t  goto loop;\n+\tcase P:\n+\t  f__scale = p->p1;\n+\t  f__pc++;\n+\t  goto loop;\n \tcase BN:\n-\t\tf__cblank=0;\n-\t\tf__pc++;\n-\t\tgoto loop;\n+\t  f__cblank = 0;\n+\t  f__pc++;\n+\t  goto loop;\n \tcase BZ:\n-\t\tf__cblank=1;\n-\t\tf__pc++;\n-\t\tgoto loop;\n-\t}\n+\t  f__cblank = 1;\n+\t  f__pc++;\n+\t  goto loop;\n \t}\n-\treturn(0);\n+    }\n+  return (0);\n }\n-en_fio(void)\n-{\tftnint one=1;\n-\treturn(do_fio(&one,(char *)NULL,(ftnint)0));\n+\n+en_fio (void)\n+{\n+  ftnint one = 1;\n+  return (do_fio (&one, (char *) NULL, (ftnint) 0));\n }\n+\n void\n-fmt_bg(void)\n+fmt_bg (void)\n {\n-\tf__workdone=f__cp=f__rp=f__pc=f__cursor=0;\n-\tf__cnt[0]=f__ret[0]=0;\n+  f__workdone = f__cp = f__rp = f__pc = f__cursor = 0;\n+  f__cnt[0] = f__ret[0] = 0;\n }"}, {"sha": "bcd84cee40ae3e2deaa63ca698ba9778e8080f7b", "filename": "libf2c/libI77/fmt.h", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ffmt.h?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,8 +1,14 @@\n struct syl\n-{\tint op;\n-\tint p1;\n-\tunion { int i[2]; char *s;} p2;\n-\t};\n+{\n+  int op;\n+  int p1;\n+  union\n+  {\n+    int i[2];\n+    char *s;\n+  }\n+  p2;\n+};\n #define RET1 1\n #define REVERT 2\n #define GOTO 3\n@@ -39,30 +45,34 @@ struct syl\n #define OM 34\n #define Z 35\n #define ZM 36\n-extern int f__pc,f__parenlvl,f__revloc;\n+extern int f__pc, f__parenlvl, f__revloc;\n typedef union\n-{\treal pf;\n-\tdoublereal pd;\n-} ufloat;\n+{\n+  real pf;\n+  doublereal pd;\n+}\n+ufloat;\n typedef union\n-{\tshort is;\n-\tsigned\n-\t\tchar ic;\n-\tinteger il;\n+{\n+  short is;\n+  signed char ic;\n+  integer il;\n #ifdef Allow_TYQUAD\n-\tlongint ili;\n+  longint ili;\n #endif\n-} Uint;\n-extern int (*f__doed)(struct syl*, char*, ftnlen),(*f__doned)(struct syl*);\n-extern int (*f__dorevert)(void);\n-extern void fmt_bg(void);\n-extern int pars_f(char*);\n-extern int rd_ed(struct syl*, char*, ftnlen),rd_ned(struct syl*);\n-extern int w_ed(struct syl*, char*, ftnlen),w_ned(struct syl*);\n-extern int wrt_E(ufloat*, int, int, int, ftnlen);\n-extern int wrt_F(ufloat*, int, int, ftnlen);\n-extern int wrt_L(Uint*, int, ftnlen);\n-extern flag f__cblank,f__cplus,f__workdone, f__nonl;\n+}\n+Uint;\n+extern int (*f__doed) (struct syl *, char *, ftnlen),\n+  (*f__doned) (struct syl *);\n+extern int (*f__dorevert) (void);\n+extern void fmt_bg (void);\n+extern int pars_f (char *);\n+extern int rd_ed (struct syl *, char *, ftnlen), rd_ned (struct syl *);\n+extern int w_ed (struct syl *, char *, ftnlen), w_ned (struct syl *);\n+extern int wrt_E (ufloat *, int, int, int, ftnlen);\n+extern int wrt_F (ufloat *, int, int, ftnlen);\n+extern int wrt_L (Uint *, int, ftnlen);\n+extern flag f__cblank, f__cplus, f__workdone, f__nonl;\n extern char *f__fmtbuf;\n extern int f__fmtlen;\n extern int f__scale;\n@@ -79,4 +89,4 @@ extern int f__cursor;\n #define TYQUAD 14\n #endif\n \n-extern char *f__icvt(longint, int*, int*, int);\n+extern char *f__icvt (longint, int *, int *, int);"}, {"sha": "3d2a299d232e59bc3931dc8ed9b33d10dae85ece", "filename": "libf2c/libI77/fmtlib.c", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffmtlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffmtlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ffmtlib.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -10,32 +10,37 @@\n #define ulongint unsigned long\n #endif\n \n-char *f__icvt(longint value, int *ndigit, int *sign, int base)\n+char *\n+f__icvt (longint value, int *ndigit, int *sign, int base)\n {\n-\tstatic char buf[MAXINTLENGTH+1];\n-\tregister int i;\n-\tulongint uvalue;\n+  static char buf[MAXINTLENGTH + 1];\n+  register int i;\n+  ulongint uvalue;\n \n-\tif(value > 0) {\n-\t\tuvalue = value;\n-\t\t*sign = 0;\n-\t\t}\n-\telse if (value < 0) {\n-\t\tuvalue = -value;\n-\t\t*sign = 1;\n-\t\t}\n-\telse {\n-\t\t*sign = 0;\n-\t\t*ndigit = 1;\n-\t\tbuf[MAXINTLENGTH-1] = '0';\n-\t\treturn &buf[MAXINTLENGTH-1];\n-\t\t}\n-\ti = MAXINTLENGTH;\n-\tdo {\n-\t\tbuf[--i] = (uvalue%base) + '0';\n-\t\tuvalue /= base;\n-\t\t}\n-\t\twhile(uvalue > 0);\n-\t*ndigit = MAXINTLENGTH - i;\n-\treturn &buf[i];\n-\t}\n+  if (value > 0)\n+    {\n+      uvalue = value;\n+      *sign = 0;\n+    }\n+  else if (value < 0)\n+    {\n+      uvalue = -value;\n+      *sign = 1;\n+    }\n+  else\n+    {\n+      *sign = 0;\n+      *ndigit = 1;\n+      buf[MAXINTLENGTH - 1] = '0';\n+      return &buf[MAXINTLENGTH - 1];\n+    }\n+  i = MAXINTLENGTH;\n+  do\n+    {\n+      buf[--i] = (uvalue % base) + '0';\n+      uvalue /= base;\n+    }\n+  while (uvalue > 0);\n+  *ndigit = MAXINTLENGTH - i;\n+  return &buf[i];\n+}"}, {"sha": "2b78ef9cc52546dd13f3cf1ee86de56e077f5347", "filename": "libf2c/libI77/fp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ffp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ffp.h?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -4,7 +4,7 @@\n /* FMAX = max number of nonzero digits passed to atof() */\n /* EXPMAX = 10^EXPMAXDIGS - 1 = largest allowed exponent absolute value */\n \n-#ifdef V10 /* Research Tenth-Edition Unix */\n+#ifdef V10\t\t\t/* Research Tenth-Edition Unix */\n #include \"local.h\"\n #endif\n "}, {"sha": "63153420fbc3ccda4ceaaa604c4814700082095b", "filename": "libf2c/libI77/ftell_.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fftell_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fftell_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fftell_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,34 +2,34 @@\n #include \"f2c.h\"\n #include \"fio.h\"\n \n- static FILE *\n-unit_chk(integer Unit, char *who)\n+static FILE *\n+unit_chk (integer Unit, char *who)\n {\n-\tif (Unit >= MXUNIT || Unit < 0)\n-\t\tf__fatal(101, who);\n-\treturn f__units[Unit].ufd;\n-\t}\n+  if (Unit >= MXUNIT || Unit < 0)\n+    f__fatal (101, who);\n+  return f__units[Unit].ufd;\n+}\n \n- integer\n-G77_ftell_0 (integer *Unit)\n+integer\n+G77_ftell_0 (integer * Unit)\n {\n-\tFILE *f;\n-\treturn (f = unit_chk(*Unit, \"ftell\")) ? (integer) FTELL(f) : -1L;\n-\t}\n+  FILE *f;\n+  return (f = unit_chk (*Unit, \"ftell\")) ? (integer) FTELL (f) : -1L;\n+}\n \n- integer\n-G77_fseek_0 (integer *Unit, integer *offset, integer *xwhence)\n+integer\n+G77_fseek_0 (integer * Unit, integer * offset, integer * xwhence)\n {\n-\tFILE *f;\n-\tint w = (int)*xwhence;\n+  FILE *f;\n+  int w = (int) *xwhence;\n #ifdef SEEK_SET\n-\tstatic int wohin[3] = { SEEK_SET, SEEK_CUR, SEEK_END };\n+  static int wohin[3] = { SEEK_SET, SEEK_CUR, SEEK_END };\n #endif\n-\tif (w < 0 || w > 2)\n-\t\tw = 0;\n+  if (w < 0 || w > 2)\n+    w = 0;\n #ifdef SEEK_SET\n-\tw = wohin[w];\n+  w = wohin[w];\n #endif\n-\treturn\t!(f = unit_chk(*Unit, \"fseek\"))\n-\t\t|| FSEEK(f, (off_t) *offset, w) ? 1 : 0;\n-\t}\n+  return !(f = unit_chk (*Unit, \"fseek\"))\n+    || FSEEK (f, (off_t) * offset, w) ? 1 : 0;\n+}"}, {"sha": "435b4b6c24a228b2947540e526418936f31b65c5", "filename": "libf2c/libI77/iio.c", "status": "modified", "additions": 122, "deletions": 107, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fiio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fiio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fiio.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,133 +6,148 @@ char *f__icend;\n extern icilist *f__svic;\n int f__icnum;\n extern int f__hiwater;\n-z_getc(void)\n+z_getc (void)\n {\n-\tif(f__recpos++ < f__svic->icirlen) {\n-\t\tif(f__icptr >= f__icend) err(f__svic->iciend,(EOF),\"endfile\");\n-\t\treturn(*(unsigned char *)f__icptr++);\n-\t\t}\n-\treturn '\\n';\n+  if (f__recpos++ < f__svic->icirlen)\n+    {\n+      if (f__icptr >= f__icend)\n+\terr (f__svic->iciend, (EOF), \"endfile\");\n+      return (*(unsigned char *) f__icptr++);\n+    }\n+  return '\\n';\n }\n \n- void\n-z_putc(int c)\n+void\n+z_putc (int c)\n {\n-\tif (f__icptr < f__icend && f__recpos++ < f__svic->icirlen)\n-\t\t*f__icptr++ = c;\n+  if (f__icptr < f__icend && f__recpos++ < f__svic->icirlen)\n+    *f__icptr++ = c;\n }\n-z_rnew(void)\n+z_rnew (void)\n {\n-\tf__icptr = f__svic->iciunit + (++f__icnum)*f__svic->icirlen;\n-\tf__recpos = 0;\n-\tf__cursor = 0;\n-\tf__hiwater = 0;\n-\treturn 1;\n+  f__icptr = f__svic->iciunit + (++f__icnum) * f__svic->icirlen;\n+  f__recpos = 0;\n+  f__cursor = 0;\n+  f__hiwater = 0;\n+  return 1;\n }\n \n- static int\n-z_endp(void)\n+static int\n+z_endp (void)\n {\n-\t(*f__donewrec)();\n-\treturn 0;\n-\t}\n+  (*f__donewrec) ();\n+  return 0;\n+}\n \n-c_si(icilist *a)\n+c_si (icilist * a)\n {\n-\tif (f__init & 2)\n-\t\tf__fatal (131, \"I/O recursion\");\n-\tf__init |= 2;\n-\tf__elist = (cilist *)a;\n-\tf__fmtbuf=a->icifmt;\n-\tf__curunit = 0;\n-\tf__sequential=f__formatted=1;\n-\tf__external=0;\n-\tif(pars_f(f__fmtbuf)<0)\n-\t\terr(a->icierr,100,\"startint\");\n-\tfmt_bg();\n-\tf__cblank=f__cplus=f__scale=0;\n-\tf__svic=a;\n-\tf__icnum=f__recpos=0;\n-\tf__cursor = 0;\n-\tf__hiwater = 0;\n-\tf__icptr = a->iciunit;\n-\tf__icend = f__icptr + a->icirlen*a->icirnum;\n-\tf__cf = 0;\n-\treturn(0);\n+  if (f__init & 2)\n+    f__fatal (131, \"I/O recursion\");\n+  f__init |= 2;\n+  f__elist = (cilist *) a;\n+  f__fmtbuf = a->icifmt;\n+  f__curunit = 0;\n+  f__sequential = f__formatted = 1;\n+  f__external = 0;\n+  if (pars_f (f__fmtbuf) < 0)\n+    err (a->icierr, 100, \"startint\");\n+  fmt_bg ();\n+  f__cblank = f__cplus = f__scale = 0;\n+  f__svic = a;\n+  f__icnum = f__recpos = 0;\n+  f__cursor = 0;\n+  f__hiwater = 0;\n+  f__icptr = a->iciunit;\n+  f__icend = f__icptr + a->icirlen * a->icirnum;\n+  f__cf = 0;\n+  return (0);\n }\n \n- int\n-iw_rev(void)\n+int\n+iw_rev (void)\n {\n-\tif(f__workdone)\n-\t\tz_endp();\n-\tf__hiwater = f__recpos = f__cursor = 0;\n-\treturn(f__workdone=0);\n-\t}\n+  if (f__workdone)\n+    z_endp ();\n+  f__hiwater = f__recpos = f__cursor = 0;\n+  return (f__workdone = 0);\n+}\n \n-integer s_rsfi(icilist *a)\n-{\tint n;\n-\tif(n=c_si(a)) return(n);\n-\tf__reading=1;\n-\tf__doed=rd_ed;\n-\tf__doned=rd_ned;\n-\tf__getn=z_getc;\n-\tf__dorevert = z_endp;\n-\tf__donewrec = z_rnew;\n-\tf__doend = z_endp;\n-\treturn(0);\n+integer\n+s_rsfi (icilist * a)\n+{\n+  int n;\n+  if (n = c_si (a))\n+    return (n);\n+  f__reading = 1;\n+  f__doed = rd_ed;\n+  f__doned = rd_ned;\n+  f__getn = z_getc;\n+  f__dorevert = z_endp;\n+  f__donewrec = z_rnew;\n+  f__doend = z_endp;\n+  return (0);\n }\n \n-z_wnew(void)\n+z_wnew (void)\n {\n-\tif (f__recpos < f__hiwater) {\n-\t\tf__icptr += f__hiwater - f__recpos;\n-\t\tf__recpos = f__hiwater;\n-\t\t}\n-\twhile(f__recpos++ < f__svic->icirlen)\n-\t\t*f__icptr++ = ' ';\n-\tf__recpos = 0;\n-\tf__cursor = 0;\n-\tf__hiwater = 0;\n-\tf__icnum++;\n-\treturn 1;\n+  if (f__recpos < f__hiwater)\n+    {\n+      f__icptr += f__hiwater - f__recpos;\n+      f__recpos = f__hiwater;\n+    }\n+  while (f__recpos++ < f__svic->icirlen)\n+    *f__icptr++ = ' ';\n+  f__recpos = 0;\n+  f__cursor = 0;\n+  f__hiwater = 0;\n+  f__icnum++;\n+  return 1;\n }\n-integer s_wsfi(icilist *a)\n-{\tint n;\n-\tif(n=c_si(a)) return(n);\n-\tf__reading=0;\n-\tf__doed=w_ed;\n-\tf__doned=w_ned;\n-\tf__putn=z_putc;\n-\tf__dorevert = iw_rev;\n-\tf__donewrec = z_wnew;\n-\tf__doend = z_endp;\n-\treturn(0);\n+\n+integer\n+s_wsfi (icilist * a)\n+{\n+  int n;\n+  if (n = c_si (a))\n+    return (n);\n+  f__reading = 0;\n+  f__doed = w_ed;\n+  f__doned = w_ned;\n+  f__putn = z_putc;\n+  f__dorevert = iw_rev;\n+  f__donewrec = z_wnew;\n+  f__doend = z_endp;\n+  return (0);\n }\n-integer e_rsfi(void)\n-{\tint n;\n-\tf__init &= ~2;\n-\tn = en_fio();\n-\tf__fmtbuf = NULL;\n-\treturn(n);\n+\n+integer\n+e_rsfi (void)\n+{\n+  int n;\n+  f__init &= ~2;\n+  n = en_fio ();\n+  f__fmtbuf = NULL;\n+  return (n);\n }\n-integer e_wsfi(void)\n+\n+integer\n+e_wsfi (void)\n {\n-\tint n;\n-\tf__init &= ~2;\n-\tn = en_fio();\n-\tf__fmtbuf = NULL;\n-\tif(f__svic->icirnum != 1\n-\t && (f__icnum >  f__svic->icirnum\n-\t || (f__icnum == f__svic->icirnum && (f__recpos | f__hiwater))))\n-\t\terr(f__svic->icierr,110,\"inwrite\");\n-\tif (f__recpos < f__hiwater)\n-\t\tf__recpos = f__hiwater;\n-\tif (f__recpos >= f__svic->icirlen)\n-\t\terr(f__svic->icierr,110,\"recend\");\n-\tif (!f__recpos && f__icnum)\n-\t\treturn n;\n-\twhile(f__recpos++ < f__svic->icirlen)\n-\t\t*f__icptr++ = ' ';\n-\treturn n;\n+  int n;\n+  f__init &= ~2;\n+  n = en_fio ();\n+  f__fmtbuf = NULL;\n+  if (f__svic->icirnum != 1\n+      && (f__icnum > f__svic->icirnum\n+\t  || (f__icnum == f__svic->icirnum && (f__recpos | f__hiwater))))\n+    err (f__svic->icierr, 110, \"inwrite\");\n+  if (f__recpos < f__hiwater)\n+    f__recpos = f__hiwater;\n+  if (f__recpos >= f__svic->icirlen)\n+    err (f__svic->icierr, 110, \"recend\");\n+  if (!f__recpos && f__icnum)\n+    return n;\n+  while (f__recpos++ < f__svic->icirlen)\n+    *f__icptr++ = ' ';\n+  return n;\n }"}, {"sha": "0a92a0cbac2c32ee2bc35d2881bbf3459bd252ff", "filename": "libf2c/libI77/ilnw.c", "status": "modified", "additions": 51, "deletions": 48, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Filnw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Filnw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Filnw.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,62 +6,65 @@ extern char *f__icptr;\n extern char *f__icend;\n extern icilist *f__svic;\n extern int f__icnum;\n-extern void z_putc(int);\n+extern void z_putc (int);\n \n- static int\n-z_wSL(void)\n+static int\n+z_wSL (void)\n {\n-\twhile(f__recpos < f__svic->icirlen)\n-\t\tz_putc(' ');\n-\treturn z_rnew();\n-\t}\n+  while (f__recpos < f__svic->icirlen)\n+    z_putc (' ');\n+  return z_rnew ();\n+}\n \n- static void\n-c_liw(icilist *a)\n+static void\n+c_liw (icilist * a)\n {\n-\tf__reading = 0;\n-\tf__external = 0;\n-\tf__formatted = 1;\n-\tf__putn = z_putc;\n-\tL_len = a->icirlen;\n-\tf__donewrec = z_wSL;\n-\tf__svic = a;\n-\tf__icnum = f__recpos = 0;\n-\tf__cursor = 0;\n-\tf__cf = 0;\n-\tf__curunit = 0;\n-\tf__icptr = a->iciunit;\n-\tf__icend = f__icptr + a->icirlen*a->icirnum;\n-\tf__elist = (cilist *)a;\n-\t}\n+  f__reading = 0;\n+  f__external = 0;\n+  f__formatted = 1;\n+  f__putn = z_putc;\n+  L_len = a->icirlen;\n+  f__donewrec = z_wSL;\n+  f__svic = a;\n+  f__icnum = f__recpos = 0;\n+  f__cursor = 0;\n+  f__cf = 0;\n+  f__curunit = 0;\n+  f__icptr = a->iciunit;\n+  f__icend = f__icptr + a->icirlen * a->icirnum;\n+  f__elist = (cilist *) a;\n+}\n \n- integer\n-s_wsni(icilist *a)\n+integer\n+s_wsni (icilist * a)\n {\n-\tcilist ca;\n+  cilist ca;\n \n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tc_liw(a);\n-\tca.cifmt = a->icifmt;\n-\tx_wsne(&ca);\n-\tz_wSL();\n-\treturn 0;\n-\t}\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  c_liw (a);\n+  ca.cifmt = a->icifmt;\n+  x_wsne (&ca);\n+  z_wSL ();\n+  return 0;\n+}\n \n- integer\n-s_wsli(icilist *a)\n+integer\n+s_wsli (icilist * a)\n {\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__lioproc = l_write;\n-\tc_liw(a);\n-\treturn(0);\n-\t}\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__lioproc = l_write;\n+  c_liw (a);\n+  return (0);\n+}\n \n-integer e_wsli(void)\n+integer\n+e_wsli (void)\n {\n-\tf__init = 1;\n-\tz_wSL();\n-\treturn(0);\n-\t}\n+  f__init = 1;\n+  z_wSL ();\n+  return (0);\n+}"}, {"sha": "ac13b36bd3827a3e12c2ba5bccb08c3b2c0ef8c7", "filename": "libf2c/libI77/inquire.c", "status": "modified", "additions": 104, "deletions": 88, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Finquire.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -8,98 +8,114 @@\n #undef max\n #include \"io.h\"\n #endif\n-integer f_inqu(inlist *a)\n-{\tflag byfile;\n-\tint i, n;\n-\tunit *p;\n-\tchar buf[256];\n-\tlong x;\n-\tif (f__init & 2)\n-\t\tf__fatal (131, \"I/O recursion\");\n-\tif(a->infile!=NULL)\n-\t{\tbyfile=1;\n-\t\tg_char(a->infile,a->infilen,buf);\n+integer\n+f_inqu (inlist * a)\n+{\n+  flag byfile;\n+  int i, n;\n+  unit *p;\n+  char buf[256];\n+  long x;\n+  if (f__init & 2)\n+    f__fatal (131, \"I/O recursion\");\n+  if (a->infile != NULL)\n+    {\n+      byfile = 1;\n+      g_char (a->infile, a->infilen, buf);\n #ifdef NON_UNIX_STDIO\n-\t\tx = access(buf,0) ? -1 : 0;\n-\t\tfor(i=0,p=NULL;i<MXUNIT;i++)\n-\t\t\tif(f__units[i].ufd != NULL\n-\t\t\t && f__units[i].ufnm != NULL\n-\t\t\t && !strcmp(f__units[i].ufnm,buf)) {\n-\t\t\t\tp = &f__units[i];\n-\t\t\t\tbreak;\n-\t\t\t\t}\n+      x = access (buf, 0) ? -1 : 0;\n+      for (i = 0, p = NULL; i < MXUNIT; i++)\n+\tif (f__units[i].ufd != NULL\n+\t    && f__units[i].ufnm != NULL && !strcmp (f__units[i].ufnm, buf))\n+\t  {\n+\t    p = &f__units[i];\n+\t    break;\n+\t  }\n #else\n-\t\tx=f__inode(buf, &n);\n-\t\tfor(i=0,p=NULL;i<MXUNIT;i++)\n-\t\t\tif(f__units[i].uinode==x\n-\t\t\t&& f__units[i].ufd!=NULL\n-\t\t\t&& f__units[i].udev == n) {\n-\t\t\t\tp = &f__units[i];\n-\t\t\t\tbreak;\n-\t\t\t\t}\n+      x = f__inode (buf, &n);\n+      for (i = 0, p = NULL; i < MXUNIT; i++)\n+\tif (f__units[i].uinode == x\n+\t    && f__units[i].ufd != NULL && f__units[i].udev == n)\n+\t  {\n+\t    p = &f__units[i];\n+\t    break;\n+\t  }\n #endif\n+    }\n+  else\n+    {\n+      byfile = 0;\n+      if (a->inunit < MXUNIT && a->inunit >= 0)\n+\t{\n+\t  p = &f__units[a->inunit];\n \t}\n-\telse\n+      else\n \t{\n-\t\tbyfile=0;\n-\t\tif(a->inunit<MXUNIT && a->inunit>=0)\n-\t\t{\n-\t\t\tp= &f__units[a->inunit];\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tp=NULL;\n-\t\t}\n+\t  p = NULL;\n \t}\n-\tif(a->inex!=NULL)\n-\t\tif(byfile && x != -1 || !byfile && p!=NULL)\n-\t\t\t*a->inex=1;\n-\t\telse *a->inex=0;\n-\tif(a->inopen!=NULL)\n-\t\tif(byfile) *a->inopen=(p!=NULL);\n-\t\telse *a->inopen=(p!=NULL && p->ufd!=NULL);\n-\tif(a->innum!=NULL) *a->innum= p-f__units;\n-\tif(a->innamed!=NULL)\n-\t\tif(byfile || p!=NULL && p->ufnm!=NULL)\n-\t\t\t*a->innamed=1;\n-\t\telse\t*a->innamed=0;\n-\tif(a->inname!=NULL)\n-\t\tif(byfile)\n-\t\t\tb_char(buf,a->inname,a->innamlen);\n-\t\telse if(p!=NULL && p->ufnm!=NULL)\n-\t\t\tb_char(p->ufnm,a->inname,a->innamlen);\n-\tif(a->inacc!=NULL && p!=NULL && p->ufd!=NULL)\n-\t\tif(p->url)\n-\t\t\tb_char(\"DIRECT\",a->inacc,a->inacclen);\n-\t\telse\tb_char(\"SEQUENTIAL\",a->inacc,a->inacclen);\n-\tif(a->inseq!=NULL)\n-\t\tif(p!=NULL && p->url)\n-\t\t\tb_char(\"NO\",a->inseq,a->inseqlen);\n-\t\telse\tb_char(\"YES\",a->inseq,a->inseqlen);\n-\tif(a->indir!=NULL)\n-\t\tif(p==NULL || p->url)\n-\t\t\tb_char(\"YES\",a->indir,a->indirlen);\n-\t\telse\tb_char(\"NO\",a->indir,a->indirlen);\n-\tif(a->infmt!=NULL)\n-\t\tif(p!=NULL && p->ufmt==0)\n-\t\t\tb_char(\"UNFORMATTED\",a->infmt,a->infmtlen);\n-\t\telse\tb_char(\"FORMATTED\",a->infmt,a->infmtlen);\n-\tif(a->inform!=NULL)\n-\t\tif(p!=NULL && p->ufmt==0)\n-\t\tb_char(\"NO\",a->inform,a->informlen);\n-\t\telse b_char(\"YES\",a->inform,a->informlen);\n-\tif(a->inunf)\n-\t\tif(p!=NULL && p->ufmt==0)\n-\t\t\tb_char(\"YES\",a->inunf,a->inunflen);\n-\t\telse if (p!=NULL) b_char(\"NO\",a->inunf,a->inunflen);\n-\t\telse b_char(\"UNKNOWN\",a->inunf,a->inunflen);\n-\tif(a->inrecl!=NULL && p!=NULL)\n-\t\t*a->inrecl=p->url;\n-\tif(a->innrec!=NULL && p!=NULL && p->url>0)\n-\t\t*a->innrec=FTELL(p->ufd)/p->url+1;\n-\tif(a->inblank && p!=NULL && p->ufmt)\n-\t\tif(p->ublnk)\n-\t\t\tb_char(\"ZERO\",a->inblank,a->inblanklen);\n-\t\telse\tb_char(\"NULL\",a->inblank,a->inblanklen);\n-\treturn(0);\n+    }\n+  if (a->inex != NULL)\n+    if (byfile && x != -1 || !byfile && p != NULL)\n+      *a->inex = 1;\n+    else\n+      *a->inex = 0;\n+  if (a->inopen != NULL)\n+    if (byfile)\n+      *a->inopen = (p != NULL);\n+    else\n+      *a->inopen = (p != NULL && p->ufd != NULL);\n+  if (a->innum != NULL)\n+    *a->innum = p - f__units;\n+  if (a->innamed != NULL)\n+    if (byfile || p != NULL && p->ufnm != NULL)\n+      *a->innamed = 1;\n+    else\n+      *a->innamed = 0;\n+  if (a->inname != NULL)\n+    if (byfile)\n+      b_char (buf, a->inname, a->innamlen);\n+    else if (p != NULL && p->ufnm != NULL)\n+      b_char (p->ufnm, a->inname, a->innamlen);\n+  if (a->inacc != NULL && p != NULL && p->ufd != NULL)\n+    if (p->url)\n+      b_char (\"DIRECT\", a->inacc, a->inacclen);\n+    else\n+      b_char (\"SEQUENTIAL\", a->inacc, a->inacclen);\n+  if (a->inseq != NULL)\n+    if (p != NULL && p->url)\n+      b_char (\"NO\", a->inseq, a->inseqlen);\n+    else\n+      b_char (\"YES\", a->inseq, a->inseqlen);\n+  if (a->indir != NULL)\n+    if (p == NULL || p->url)\n+      b_char (\"YES\", a->indir, a->indirlen);\n+    else\n+      b_char (\"NO\", a->indir, a->indirlen);\n+  if (a->infmt != NULL)\n+    if (p != NULL && p->ufmt == 0)\n+      b_char (\"UNFORMATTED\", a->infmt, a->infmtlen);\n+    else\n+      b_char (\"FORMATTED\", a->infmt, a->infmtlen);\n+  if (a->inform != NULL)\n+    if (p != NULL && p->ufmt == 0)\n+      b_char (\"NO\", a->inform, a->informlen);\n+    else\n+      b_char (\"YES\", a->inform, a->informlen);\n+  if (a->inunf)\n+    if (p != NULL && p->ufmt == 0)\n+      b_char (\"YES\", a->inunf, a->inunflen);\n+    else if (p != NULL)\n+      b_char (\"NO\", a->inunf, a->inunflen);\n+    else\n+      b_char (\"UNKNOWN\", a->inunf, a->inunflen);\n+  if (a->inrecl != NULL && p != NULL)\n+    *a->inrecl = p->url;\n+  if (a->innrec != NULL && p != NULL && p->url > 0)\n+    *a->innrec = FTELL (p->ufd) / p->url + 1;\n+  if (a->inblank && p != NULL && p->ufmt)\n+    if (p->ublnk)\n+      b_char (\"ZERO\", a->inblank, a->inblanklen);\n+    else\n+      b_char (\"NULL\", a->inblank, a->inblanklen);\n+  return (0);\n }"}, {"sha": "4e17115e8d47a70a95f0d81f5678b40a1d94b10d", "filename": "libf2c/libI77/lio.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Flio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Flio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Flio.h?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -43,22 +43,22 @@\n \n typedef union\n {\n-\tsigned\n-\t\tchar\tflchar;\n-\tshort\tflshort;\n-\tftnint\tflint;\n+  signed char flchar;\n+  short flshort;\n+  ftnint flint;\n #ifdef Allow_TYQUAD\n-\tlongint fllongint;\n+  longint fllongint;\n #endif\n-\treal\tflreal;\n-\tdoublereal\tfldouble;\n-} flex;\n+  real flreal;\n+  doublereal fldouble;\n+}\n+flex;\n extern int f__scale;\n-extern int (*f__lioproc)(ftnint*, char*, ftnlen, ftnint);\n-extern int l_write(ftnint*, char*, ftnlen, ftnint);\n-extern void x_wsne(cilist*);\n-extern int c_le(cilist*), (*l_getc)(void), (*l_ungetc)(int,FILE*);\n-extern int l_read(ftnint*,char*,ftnlen,ftnint);\n-extern integer e_rsle(void), e_wsle(void), s_wsne(cilist*);\n-extern int z_rnew(void);\n+extern int (*f__lioproc) (ftnint *, char *, ftnlen, ftnint);\n+extern int l_write (ftnint *, char *, ftnlen, ftnint);\n+extern void x_wsne (cilist *);\n+extern int c_le (cilist *), (*l_getc) (void), (*l_ungetc) (int, FILE *);\n+extern int l_read (ftnint *, char *, ftnlen, ftnint);\n+extern integer e_rsle (void), e_wsle (void), s_wsne (cilist *);\n+extern int z_rnew (void);\n extern ftnint L_len;"}, {"sha": "3dd40216211b995828fd2e0a4030d916a3d67b5b", "filename": "libf2c/libI77/lread.c", "status": "modified", "additions": 717, "deletions": 628, "changes": 1345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Flread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Flread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Flread.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -25,8 +25,8 @@ static int quad_read;\n #include \"lio.h\"\n #include \"fp.h\"\n \n-int (*f__lioproc)(ftnint*, char*, ftnlen, ftnint), (*l_getc)(void),\n-\t(*l_ungetc)(int,FILE*);\n+int (*f__lioproc) (ftnint *, char *, ftnlen, ftnint), (*l_getc) (void),\n+  (*l_ungetc) (int, FILE *);\n \n int l_eof;\n \n@@ -42,709 +42,798 @@ int l_eof;\n #define EX 8\n #define SG 16\n #define WH 32\n-char f__ltab[128+1] = {\t/* offset one for EOF */\n-\t0,\n-\t0,0,AX,0,0,0,0,0,0,WH|B,SX|WH,0,0,0,0,0,\n-\t0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-\tSX|B|WH,0,AX,0,0,0,0,AX,0,0,0,SG,SX,SG,0,SX,\n-\t0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-\t0,0,0,0,EX,EX,0,0,0,0,0,0,0,0,0,0,\n-\t0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-\tAX,0,0,0,EX,EX,0,0,0,0,0,0,0,0,0,0,\n-\t0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n+char f__ltab[128 + 1] = {\t/* offset one for EOF */\n+  0,\n+  0, 0, AX, 0, 0, 0, 0, 0, 0, WH | B, SX | WH, 0, 0, 0, 0, 0,\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+  SX | B | WH, 0, AX, 0, 0, 0, 0, AX, 0, 0, 0, SG, SX, SG, 0, SX,\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+  0, 0, 0, 0, EX, EX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+  AX, 0, 0, 0, EX, EX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n };\n \n #ifdef ungetc\n- static int\n-un_getc(int x, FILE *f__cf)\n-{ return ungetc(x,f__cf); }\n+static int\n+un_getc (int x, FILE * f__cf)\n+{\n+  return ungetc (x, f__cf);\n+}\n #else\n #define un_getc ungetc\n-extern int ungetc(int, FILE*);\t/* for systems with a buggy stdio.h */\n+extern int ungetc (int, FILE *);\t/* for systems with a buggy stdio.h */\n #endif\n \n-t_getc(void)\n-{\tint ch;\n-\tif(f__curunit->uend) return(EOF);\n-\tif((ch=getc(f__cf))!=EOF) return(ch);\n-\tif(feof(f__cf))\n-\t\tf__curunit->uend = l_eof = 1;\n-\treturn(EOF);\n+t_getc (void)\n+{\n+  int ch;\n+  if (f__curunit->uend)\n+    return (EOF);\n+  if ((ch = getc (f__cf)) != EOF)\n+    return (ch);\n+  if (feof (f__cf))\n+    f__curunit->uend = l_eof = 1;\n+  return (EOF);\n }\n-integer e_rsle(void)\n+\n+integer\n+e_rsle (void)\n {\n-\tint ch;\n-\tf__init = 1;\n-\tif(f__curunit->uend) return(0);\n-\twhile((ch=t_getc())!='\\n')\n-\t\tif (ch == EOF) {\n-\t\t\tif(feof(f__cf))\n-\t\t\t\tf__curunit->uend = l_eof = 1;\n-\t\t\treturn EOF;\n-\t\t\t}\n-\treturn(0);\n+  int ch;\n+  f__init = 1;\n+  if (f__curunit->uend)\n+    return (0);\n+  while ((ch = t_getc ()) != '\\n')\n+    if (ch == EOF)\n+      {\n+\tif (feof (f__cf))\n+\t  f__curunit->uend = l_eof = 1;\n+\treturn EOF;\n+      }\n+  return (0);\n }\n \n flag f__lquit;\n-int f__lcount,f__ltype,nml_read;\n+int f__lcount, f__ltype, nml_read;\n char *f__lchar;\n-double f__lx,f__ly;\n+double f__lx, f__ly;\n #define ERR(x) if(n=(x)) {f__init &= ~2; return(n);}\n #define GETC(x) (x=(*l_getc)())\n #define Ungetc(x,y) (*l_ungetc)(x,y)\n \n- static int\n-l_R(int poststar, int reqint)\n+static int\n+l_R (int poststar, int reqint)\n {\n-\tchar s[FMAX+EXPMAXDIGS+4];\n-\tregister int ch;\n-\tregister char *sp, *spe, *sp1;\n-\tlong e, exp;\n-\tint havenum, havestar, se;\n-\n-\tif (!poststar) {\n-\t\tif (f__lcount > 0)\n-\t\t\treturn(0);\n-\t\tf__lcount = 1;\n-\t\t}\n+  char s[FMAX + EXPMAXDIGS + 4];\n+  register int ch;\n+  register char *sp, *spe, *sp1;\n+  long e, exp;\n+  int havenum, havestar, se;\n+\n+  if (!poststar)\n+    {\n+      if (f__lcount > 0)\n+\treturn (0);\n+      f__lcount = 1;\n+    }\n #ifdef Allow_TYQUAD\n-\tf__llx = 0;\n+  f__llx = 0;\n #endif\n-\tf__ltype = 0;\n-\texp = 0;\n-\thavestar = 0;\n+  f__ltype = 0;\n+  exp = 0;\n+  havestar = 0;\n retry:\n-\tsp1 = sp = s;\n-\tspe = sp + FMAX;\n-\thavenum = 0;\n-\n-\tswitch(GETC(ch)) {\n-\t\tcase '-': *sp++ = ch; sp1++; spe++;\n-\t\tcase '+':\n-\t\t\tGETC(ch);\n-\t\t}\n-\twhile(ch == '0') {\n-\t\t++havenum;\n-\t\tGETC(ch);\n-\t\t}\n-\twhile(isdigit(ch)) {\n-\t\tif (sp < spe) *sp++ = ch;\n-\t\telse ++exp;\n-\t\tGETC(ch);\n-\t\t}\n-\tif (ch == '*' && !poststar) {\n-\t\tif (sp == sp1 || exp || *s == '-') {\n-\t\t\terrfl(f__elist->cierr,112,\"bad repetition count\");\n-\t\t\t}\n-\t\tpoststar = havestar = 1;\n-\t\t*sp = 0;\n-\t\tf__lcount = atoi(s);\n-\t\tgoto retry;\n-\t\t}\n-\tif (ch == '.') {\n+  sp1 = sp = s;\n+  spe = sp + FMAX;\n+  havenum = 0;\n+\n+  switch (GETC (ch))\n+    {\n+    case '-':\n+      *sp++ = ch;\n+      sp1++;\n+      spe++;\n+    case '+':\n+      GETC (ch);\n+    }\n+  while (ch == '0')\n+    {\n+      ++havenum;\n+      GETC (ch);\n+    }\n+  while (isdigit (ch))\n+    {\n+      if (sp < spe)\n+\t*sp++ = ch;\n+      else\n+\t++exp;\n+      GETC (ch);\n+    }\n+  if (ch == '*' && !poststar)\n+    {\n+      if (sp == sp1 || exp || *s == '-')\n+\t{\n+\t  errfl (f__elist->cierr, 112, \"bad repetition count\");\n+\t}\n+      poststar = havestar = 1;\n+      *sp = 0;\n+      f__lcount = atoi (s);\n+      goto retry;\n+    }\n+  if (ch == '.')\n+    {\n #ifndef ALLOW_FLOAT_IN_INTEGER_LIST_INPUT\n-\t\tif (reqint)\n-\t\t\terrfl(f__elist->cierr,115,\"invalid integer\");\n+      if (reqint)\n+\terrfl (f__elist->cierr, 115, \"invalid integer\");\n #endif\n-\t\tGETC(ch);\n-\t\tif (sp == sp1)\n-\t\t\twhile(ch == '0') {\n-\t\t\t\t++havenum;\n-\t\t\t\t--exp;\n-\t\t\t\tGETC(ch);\n-\t\t\t\t}\n-\t\twhile(isdigit(ch)) {\n-\t\t\tif (sp < spe)\n-\t\t\t\t{ *sp++ = ch; --exp; }\n-\t\t\tGETC(ch);\n-\t\t\t}\n-\t\t}\n-\thavenum += sp - sp1;\n-\tse = 0;\n-\tif (issign(ch))\n-\t\tgoto signonly;\n-\tif (havenum && isexp(ch)) {\n+      GETC (ch);\n+      if (sp == sp1)\n+\twhile (ch == '0')\n+\t  {\n+\t    ++havenum;\n+\t    --exp;\n+\t    GETC (ch);\n+\t  }\n+      while (isdigit (ch))\n+\t{\n+\t  if (sp < spe)\n+\t    {\n+\t      *sp++ = ch;\n+\t      --exp;\n+\t    }\n+\t  GETC (ch);\n+\t}\n+    }\n+  havenum += sp - sp1;\n+  se = 0;\n+  if (issign (ch))\n+    goto signonly;\n+  if (havenum && isexp (ch))\n+    {\n #ifndef ALLOW_FLOAT_IN_INTEGER_LIST_INPUT\n-\t\tif (reqint)\n-\t\t\terrfl(f__elist->cierr,115,\"invalid integer\");\n+      if (reqint)\n+\terrfl (f__elist->cierr, 115, \"invalid integer\");\n #endif\n-\t\tGETC(ch);\n-\t\tif (issign(ch)) {\n-signonly:\n-\t\t\tif (ch == '-') se = 1;\n-\t\t\tGETC(ch);\n-\t\t\t}\n-\t\tif (!isdigit(ch)) {\n-bad:\n-\t\t\terrfl(f__elist->cierr,112,\"exponent field\");\n-\t\t\t}\n-\n-\t\te = ch - '0';\n-\t\twhile(isdigit(GETC(ch))) {\n-\t\t\te = 10*e + ch - '0';\n-\t\t\tif (e > EXPMAX)\n-\t\t\t\tgoto bad;\n-\t\t\t}\n-\t\tif (se)\n-\t\t\texp -= e;\n-\t\telse\n-\t\t\texp += e;\n-\t\t}\n-\t(void) Ungetc(ch, f__cf);\n-\tif (sp > sp1) {\n-\t\t++havenum;\n-\t\twhile(*--sp == '0')\n-\t\t\t++exp;\n-\t\tif (exp)\n-\t\t\tsprintf(sp+1, \"e%ld\", exp);\n-\t\telse\n-\t\t\tsp[1] = 0;\n-\t\tf__lx = atof(s);\n+      GETC (ch);\n+      if (issign (ch))\n+\t{\n+\tsignonly:\n+\t  if (ch == '-')\n+\t    se = 1;\n+\t  GETC (ch);\n+\t}\n+      if (!isdigit (ch))\n+\t{\n+\tbad:\n+\t  errfl (f__elist->cierr, 112, \"exponent field\");\n+\t}\n+\n+      e = ch - '0';\n+      while (isdigit (GETC (ch)))\n+\t{\n+\t  e = 10 * e + ch - '0';\n+\t  if (e > EXPMAX)\n+\t    goto bad;\n+\t}\n+      if (se)\n+\texp -= e;\n+      else\n+\texp += e;\n+    }\n+  (void) Ungetc (ch, f__cf);\n+  if (sp > sp1)\n+    {\n+      ++havenum;\n+      while (*--sp == '0')\n+\t++exp;\n+      if (exp)\n+\tsprintf (sp + 1, \"e%ld\", exp);\n+      else\n+\tsp[1] = 0;\n+      f__lx = atof (s);\n #ifdef Allow_TYQUAD\n-\t\tif (reqint&2 && (se = sp - sp1 + exp) > 14 && se < 20) {\n-\t\t\t/* Assuming 64-bit longint and 32-bit long. */\n-\t\t\tif (exp < 0)\n-\t\t\t\tsp += exp;\n-\t\t\tif (sp1 <= sp) {\n-\t\t\t\tf__llx = *sp1 - '0';\n-\t\t\t\twhile(++sp1 <= sp)\n-\t\t\t\t\tf__llx = 10*f__llx + (*sp1 - '0');\n-\t\t\t\t}\n-\t\t\twhile(--exp >= 0)\n-\t\t\t\tf__llx *= 10;\n-\t\t\tif (*s == '-')\n-\t\t\t\tf__llx = -f__llx;\n-\t\t\t}\n-#endif\n-\t\t}\n-\telse\n-\t\tf__lx = 0.;\n-\tif (havenum)\n-\t\tf__ltype = TYLONG;\n-\telse\n-\t\tswitch(ch) {\n-\t\t\tcase ',':\n-\t\t\tcase '/':\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tif (havestar && ( ch == ' '\n-\t\t\t\t\t\t||ch == '\\t'\n-\t\t\t\t\t\t||ch == '\\n'))\n-\t\t\t\t\tbreak;\n-\t\t\t\tif (nml_read > 1) {\n-\t\t\t\t\tf__lquit = 2;\n-\t\t\t\t\treturn 0;\n-\t\t\t\t\t}\n-\t\t\t\terrfl(f__elist->cierr,112,\"invalid number\");\n-\t\t\t}\n-\treturn 0;\n+      if (reqint & 2 && (se = sp - sp1 + exp) > 14 && se < 20)\n+\t{\n+\t  /* Assuming 64-bit longint and 32-bit long. */\n+\t  if (exp < 0)\n+\t    sp += exp;\n+\t  if (sp1 <= sp)\n+\t    {\n+\t      f__llx = *sp1 - '0';\n+\t      while (++sp1 <= sp)\n+\t\tf__llx = 10 * f__llx + (*sp1 - '0');\n+\t    }\n+\t  while (--exp >= 0)\n+\t    f__llx *= 10;\n+\t  if (*s == '-')\n+\t    f__llx = -f__llx;\n \t}\n+#endif\n+    }\n+  else\n+    f__lx = 0.;\n+  if (havenum)\n+    f__ltype = TYLONG;\n+  else\n+    switch (ch)\n+      {\n+      case ',':\n+      case '/':\n+\tbreak;\n+      default:\n+\tif (havestar && (ch == ' ' || ch == '\\t' || ch == '\\n'))\n+\t  break;\n+\tif (nml_read > 1)\n+\t  {\n+\t    f__lquit = 2;\n+\t    return 0;\n+\t  }\n+\terrfl (f__elist->cierr, 112, \"invalid number\");\n+      }\n+  return 0;\n+}\n \n- static int\n-rd_count(register int ch)\n+static int\n+rd_count (register int ch)\n {\n-\tif (ch < '0' || ch > '9')\n-\t\treturn 1;\n-\tf__lcount = ch - '0';\n-\twhile(GETC(ch) >= '0' && ch <= '9')\n-\t\tf__lcount = 10*f__lcount + ch - '0';\n-\tUngetc(ch,f__cf);\n-\treturn f__lcount <= 0;\n-\t}\n+  if (ch < '0' || ch > '9')\n+    return 1;\n+  f__lcount = ch - '0';\n+  while (GETC (ch) >= '0' && ch <= '9')\n+    f__lcount = 10 * f__lcount + ch - '0';\n+  Ungetc (ch, f__cf);\n+  return f__lcount <= 0;\n+}\n \n- static int\n-l_C(void)\n-{\tint ch, nml_save;\n-\tdouble lz;\n-\tif(f__lcount>0) return(0);\n-\tf__ltype=0;\n-\tGETC(ch);\n-\tif(ch!='(')\n+static int\n+l_C (void)\n+{\n+  int ch, nml_save;\n+  double lz;\n+  if (f__lcount > 0)\n+    return (0);\n+  f__ltype = 0;\n+  GETC (ch);\n+  if (ch != '(')\n+    {\n+      if (nml_read > 1 && (ch < '0' || ch > '9'))\n \t{\n-\t\tif (nml_read > 1 && (ch < '0' || ch > '9')) {\n-\t\t\tUngetc(ch,f__cf);\n-\t\t\tf__lquit = 2;\n-\t\t\treturn 0;\n-\t\t\t}\n-\t\tif (rd_count(ch))\n-\t\t\tif(!f__cf || !feof(f__cf))\n-\t\t\t\terrfl(f__elist->cierr,112,\"complex format\");\n-\t\t\telse\n-\t\t\t\terr(f__elist->cierr,(EOF),\"lread\");\n-\t\tif(GETC(ch)!='*')\n-\t\t{\n-\t\t\tif(!f__cf || !feof(f__cf))\n-\t\t\t\terrfl(f__elist->cierr,112,\"no star\");\n-\t\t\telse\n-\t\t\t\terr(f__elist->cierr,(EOF),\"lread\");\n-\t\t}\n-\t\tif(GETC(ch)!='(')\n-\t\t{\tUngetc(ch,f__cf);\n-\t\t\treturn(0);\n-\t\t}\n+\t  Ungetc (ch, f__cf);\n+\t  f__lquit = 2;\n+\t  return 0;\n \t}\n+      if (rd_count (ch))\n+\tif (!f__cf || !feof (f__cf))\n+\t  errfl (f__elist->cierr, 112, \"complex format\");\n \telse\n-\t\tf__lcount = 1;\n-\twhile(iswhit(GETC(ch)));\n-\tUngetc(ch,f__cf);\n-\tnml_save = nml_read;\n-\tnml_read = 0;\n-\tif (ch = l_R(1,0))\n-\t\treturn ch;\n-\tif (!f__ltype)\n-\t\terrfl(f__elist->cierr,112,\"no real part\");\n-\tlz = f__lx;\n-\twhile(iswhit(GETC(ch)));\n-\tif(ch!=',')\n-\t{\t(void) Ungetc(ch,f__cf);\n-\t\terrfl(f__elist->cierr,112,\"no comma\");\n+\t  err (f__elist->cierr, (EOF), \"lread\");\n+      if (GETC (ch) != '*')\n+\t{\n+\t  if (!f__cf || !feof (f__cf))\n+\t    errfl (f__elist->cierr, 112, \"no star\");\n+\t  else\n+\t    err (f__elist->cierr, (EOF), \"lread\");\n+\t}\n+      if (GETC (ch) != '(')\n+\t{\n+\t  Ungetc (ch, f__cf);\n+\t  return (0);\n \t}\n-\twhile(iswhit(GETC(ch)));\n-\t(void) Ungetc(ch,f__cf);\n-\tif (ch = l_R(1,0))\n-\t\treturn ch;\n-\tif (!f__ltype)\n-\t\terrfl(f__elist->cierr,112,\"no imaginary part\");\n-\twhile(iswhit(GETC(ch)));\n-\tif(ch!=')') errfl(f__elist->cierr,112,\"no )\");\n-\tf__ly = f__lx;\n-\tf__lx = lz;\n+    }\n+  else\n+    f__lcount = 1;\n+  while (iswhit (GETC (ch)));\n+  Ungetc (ch, f__cf);\n+  nml_save = nml_read;\n+  nml_read = 0;\n+  if (ch = l_R (1, 0))\n+    return ch;\n+  if (!f__ltype)\n+    errfl (f__elist->cierr, 112, \"no real part\");\n+  lz = f__lx;\n+  while (iswhit (GETC (ch)));\n+  if (ch != ',')\n+    {\n+      (void) Ungetc (ch, f__cf);\n+      errfl (f__elist->cierr, 112, \"no comma\");\n+    }\n+  while (iswhit (GETC (ch)));\n+  (void) Ungetc (ch, f__cf);\n+  if (ch = l_R (1, 0))\n+    return ch;\n+  if (!f__ltype)\n+    errfl (f__elist->cierr, 112, \"no imaginary part\");\n+  while (iswhit (GETC (ch)));\n+  if (ch != ')')\n+    errfl (f__elist->cierr, 112, \"no )\");\n+  f__ly = f__lx;\n+  f__lx = lz;\n #ifdef Allow_TYQUAD\n-\tf__llx = 0;\n+  f__llx = 0;\n #endif\n-\tnml_read = nml_save;\n-\treturn(0);\n+  nml_read = nml_save;\n+  return (0);\n }\n \n- static char nmLbuf[256], *nmL_next;\n- static int (*nmL_getc_save)(void);\n- static int (*nmL_ungetc_save)(int, FILE*);\n+static char nmLbuf[256], *nmL_next;\n+static int (*nmL_getc_save) (void);\n+static int (*nmL_ungetc_save) (int, FILE *);\n \n- static int\n-nmL_getc(void)\n+static int\n+nmL_getc (void)\n {\n-\tint rv;\n-\tif (rv = *nmL_next++)\n-\t\treturn rv;\n-\tl_getc = nmL_getc_save;\n-\tl_ungetc = nmL_ungetc_save;\n-\treturn (*l_getc)();\n-\t}\n+  int rv;\n+  if (rv = *nmL_next++)\n+    return rv;\n+  l_getc = nmL_getc_save;\n+  l_ungetc = nmL_ungetc_save;\n+  return (*l_getc) ();\n+}\n \n- static int\n-nmL_ungetc(int x, FILE *f)\n+static int\n+nmL_ungetc (int x, FILE * f)\n {\n-\tf = f;\t/* banish non-use warning */\n-\treturn *--nmL_next = x;\n-\t}\n+  f = f;\t\t\t/* banish non-use warning */\n+  return *--nmL_next = x;\n+}\n \n- static int\n-Lfinish(int ch, int dot, int *rvp)\n+static int\n+Lfinish (int ch, int dot, int *rvp)\n {\n-\tchar *s, *se;\n-\tstatic char what[] = \"namelist input\";\n-\n-\ts = nmLbuf + 2;\n-\tse = nmLbuf + sizeof(nmLbuf) - 1;\n-\t*s++ = ch;\n-\twhile(!issep(GETC(ch)) && ch!=EOF) {\n-\t\tif (s >= se) {\n- nmLbuf_ovfl:\n-\t\t\treturn *rvp = err__fl(f__elist->cierr,131,what);\n-\t\t\t}\n-\t\t*s++ = ch;\n-\t\tif (ch != '=')\n-\t\t\tcontinue;\n-\t\tif (dot)\n-\t\t\treturn *rvp = err__fl(f__elist->cierr,112,what);\n- got_eq:\n-\t\t*s = 0;\n-\t\tnmL_getc_save = l_getc;\n-\t\tl_getc = nmL_getc;\n-\t\tnmL_ungetc_save = l_ungetc;\n-\t\tl_ungetc = nmL_ungetc;\n-\t\tnmLbuf[1] = *(nmL_next = nmLbuf) = ',';\n-\t\t*rvp = f__lcount = 0;\n-\t\treturn 1;\n-\t\t}\n-\tif (dot)\n-\t\tgoto done;\n-\tfor(;;) {\n-\t\tif (s >= se)\n-\t\t\tgoto nmLbuf_ovfl;\n-\t\t*s++ = ch;\n-\t\tif (!isblnk(ch))\n-\t\t\tbreak;\n-\t\tif (GETC(ch) == EOF)\n-\t\t\tgoto done;\n-\t\t}\n-\tif (ch == '=')\n-\t\tgoto got_eq;\n- done:\n-\tUngetc(ch, f__cf);\n-\treturn 0;\n+  char *s, *se;\n+  static char what[] = \"namelist input\";\n+\n+  s = nmLbuf + 2;\n+  se = nmLbuf + sizeof (nmLbuf) - 1;\n+  *s++ = ch;\n+  while (!issep (GETC (ch)) && ch != EOF)\n+    {\n+      if (s >= se)\n+\t{\n+\tnmLbuf_ovfl:\n+\t  return *rvp = err__fl (f__elist->cierr, 131, what);\n \t}\n+      *s++ = ch;\n+      if (ch != '=')\n+\tcontinue;\n+      if (dot)\n+\treturn *rvp = err__fl (f__elist->cierr, 112, what);\n+    got_eq:\n+      *s = 0;\n+      nmL_getc_save = l_getc;\n+      l_getc = nmL_getc;\n+      nmL_ungetc_save = l_ungetc;\n+      l_ungetc = nmL_ungetc;\n+      nmLbuf[1] = *(nmL_next = nmLbuf) = ',';\n+      *rvp = f__lcount = 0;\n+      return 1;\n+    }\n+  if (dot)\n+    goto done;\n+  for (;;)\n+    {\n+      if (s >= se)\n+\tgoto nmLbuf_ovfl;\n+      *s++ = ch;\n+      if (!isblnk (ch))\n+\tbreak;\n+      if (GETC (ch) == EOF)\n+\tgoto done;\n+    }\n+  if (ch == '=')\n+    goto got_eq;\n+done:\n+  Ungetc (ch, f__cf);\n+  return 0;\n+}\n \n- static int\n-l_L(void)\n+static int\n+l_L (void)\n {\n-\tint ch, rv, sawdot;\n-\tif(f__lcount>0)\n-\t\treturn(0);\n-\tf__lcount = 1;\n-\tf__ltype=0;\n-\tGETC(ch);\n-\tif(isdigit(ch))\n+  int ch, rv, sawdot;\n+  if (f__lcount > 0)\n+    return (0);\n+  f__lcount = 1;\n+  f__ltype = 0;\n+  GETC (ch);\n+  if (isdigit (ch))\n+    {\n+      rd_count (ch);\n+      if (GETC (ch) != '*')\n+\tif (!f__cf || !feof (f__cf))\n+\t  errfl (f__elist->cierr, 112, \"no star\");\n+\telse\n+\t  err (f__elist->cierr, (EOF), \"lread\");\n+      GETC (ch);\n+    }\n+  sawdot = 0;\n+  if (ch == '.')\n+    {\n+      sawdot = 1;\n+      GETC (ch);\n+    }\n+  switch (ch)\n+    {\n+    case 't':\n+    case 'T':\n+      if (nml_read && Lfinish (ch, sawdot, &rv))\n+\treturn rv;\n+      f__lx = 1;\n+      break;\n+    case 'f':\n+    case 'F':\n+      if (nml_read && Lfinish (ch, sawdot, &rv))\n+\treturn rv;\n+      f__lx = 0;\n+      break;\n+    default:\n+      if (isblnk (ch) || issep (ch) || ch == EOF)\n \t{\n-\t\trd_count(ch);\n-\t\tif(GETC(ch)!='*')\n-\t\t\tif(!f__cf || !feof(f__cf))\n-\t\t\t\terrfl(f__elist->cierr,112,\"no star\");\n-\t\t\telse\n-\t\t\t\terr(f__elist->cierr,(EOF),\"lread\");\n-\t\tGETC(ch);\n+\t  (void) Ungetc (ch, f__cf);\n+\t  return (0);\n \t}\n-\tsawdot = 0;\n-\tif(ch == '.') {\n-\t\tsawdot = 1;\n-\t\tGETC(ch);\n-\t\t}\n-\tswitch(ch)\n+      if (nml_read > 1)\n \t{\n-\tcase 't':\n-\tcase 'T':\n-\t\tif (nml_read && Lfinish(ch, sawdot, &rv))\n-\t\t\treturn rv;\n-\t\tf__lx=1;\n-\t\tbreak;\n-\tcase 'f':\n-\tcase 'F':\n-\t\tif (nml_read && Lfinish(ch, sawdot, &rv))\n-\t\t\treturn rv;\n-\t\tf__lx=0;\n-\t\tbreak;\n-\tdefault:\n-\t\tif(isblnk(ch) || issep(ch) || ch==EOF)\n-\t\t{\t(void) Ungetc(ch,f__cf);\n-\t\t\treturn(0);\n-\t\t}\n-\t\tif (nml_read > 1) {\n-\t\t\tUngetc(ch,f__cf);\n-\t\t\tf__lquit = 2;\n-\t\t\treturn 0;\n-\t\t\t}\n-\t\terrfl(f__elist->cierr,112,\"logical\");\n+\t  Ungetc (ch, f__cf);\n+\t  f__lquit = 2;\n+\t  return 0;\n \t}\n-\tf__ltype=TYLONG;\n-\twhile(!issep(GETC(ch)) && ch!=EOF);\n-\t(void) Ungetc(ch, f__cf);\n-\treturn(0);\n+      errfl (f__elist->cierr, 112, \"logical\");\n+    }\n+  f__ltype = TYLONG;\n+  while (!issep (GETC (ch)) && ch != EOF);\n+  (void) Ungetc (ch, f__cf);\n+  return (0);\n }\n \n #define BUFSIZE\t128\n \n- static int\n-l_CHAR(void)\n-{\tint ch,size,i;\n-\tstatic char rafail[] = \"realloc failure\";\n-\tchar quote,*p;\n-\tif(f__lcount>0) return(0);\n-\tf__ltype=0;\n-\tif(f__lchar!=NULL) free(f__lchar);\n-\tsize=BUFSIZE;\n-\tp=f__lchar = (char *)malloc((unsigned int)size);\n-\tif(f__lchar == NULL)\n-\t\terrfl(f__elist->cierr,113,\"no space\");\n-\n-\tGETC(ch);\n-\tif(isdigit(ch)) {\n-\t\t/* allow Fortran 8x-style unquoted string...\t*/\n-\t\t/* either find a repetition count or the string\t*/\n-\t\tf__lcount = ch - '0';\n-\t\t*p++ = ch;\n-\t\tfor(i = 1;;) {\n-\t\t\tswitch(GETC(ch)) {\n-\t\t\t\tcase '*':\n-\t\t\t\t\tif (f__lcount == 0) {\n-\t\t\t\t\t\tf__lcount = 1;\n-#ifndef F8X_NML_ELIDE_QUOTES\n-\t\t\t\t\t\tif (nml_read)\n-\t\t\t\t\t\t\tgoto no_quote;\n-#endif\n-\t\t\t\t\t\tgoto noquote;\n-\t\t\t\t\t\t}\n-\t\t\t\t\tp = f__lchar;\n-\t\t\t\t\tgoto have_lcount;\n-\t\t\t\tcase ',':\n-\t\t\t\tcase ' ':\n-\t\t\t\tcase '\\t':\n-\t\t\t\tcase '\\n':\n-\t\t\t\tcase '/':\n-\t\t\t\t\tUngetc(ch,f__cf);\n-\t\t\t\t\t/* no break */\n-\t\t\t\tcase EOF:\n-\t\t\t\t\tf__lcount = 1;\n-\t\t\t\t\tf__ltype = TYCHAR;\n-\t\t\t\t\treturn *p = 0;\n-\t\t\t\t}\n-\t\t\tif (!isdigit(ch)) {\n-\t\t\t\tf__lcount = 1;\n+static int\n+l_CHAR (void)\n+{\n+  int ch, size, i;\n+  static char rafail[] = \"realloc failure\";\n+  char quote, *p;\n+  if (f__lcount > 0)\n+    return (0);\n+  f__ltype = 0;\n+  if (f__lchar != NULL)\n+    free (f__lchar);\n+  size = BUFSIZE;\n+  p = f__lchar = (char *) malloc ((unsigned int) size);\n+  if (f__lchar == NULL)\n+    errfl (f__elist->cierr, 113, \"no space\");\n+\n+  GETC (ch);\n+  if (isdigit (ch))\n+    {\n+      /* allow Fortran 8x-style unquoted string...    */\n+      /* either find a repetition count or the string */\n+      f__lcount = ch - '0';\n+      *p++ = ch;\n+      for (i = 1;;)\n+\t{\n+\t  switch (GETC (ch))\n+\t    {\n+\t    case '*':\n+\t      if (f__lcount == 0)\n+\t\t{\n+\t\t  f__lcount = 1;\n #ifndef F8X_NML_ELIDE_QUOTES\n-\t\t\t\tif (nml_read) {\n- no_quote:\n-\t\t\t\t\terrfl(f__elist->cierr,112,\n-\t\t\t\t\t\t\"undelimited character string\");\n-\t\t\t\t\t}\n+\t\t  if (nml_read)\n+\t\t    goto no_quote;\n #endif\n-\t\t\t\tgoto noquote;\n-\t\t\t\t}\n-\t\t\t*p++ = ch;\n-\t\t\tf__lcount = 10*f__lcount + ch - '0';\n-\t\t\tif (++i == size) {\n-\t\t\t\tf__lchar = (char *)realloc(f__lchar,\n-\t\t\t\t\t(unsigned int)(size += BUFSIZE));\n-\t\t\t\tif(f__lchar == NULL)\n-\t\t\t\t\terrfl(f__elist->cierr,113,rafail);\n-\t\t\t\tp = f__lchar + i;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\telse\t(void) Ungetc(ch,f__cf);\n- have_lcount:\n-\tif(GETC(ch)=='\\'' || ch=='\"') quote=ch;\n-\telse if(isblnk(ch) || (issep(ch) && ch != '\\n') || ch==EOF) {\n-\t\tUngetc(ch,f__cf);\n-\t\treturn 0;\n+\t\t  goto noquote;\n \t\t}\n+\t      p = f__lchar;\n+\t      goto have_lcount;\n+\t    case ',':\n+\t    case ' ':\n+\t    case '\\t':\n+\t    case '\\n':\n+\t    case '/':\n+\t      Ungetc (ch, f__cf);\n+\t      /* no break */\n+\t    case EOF:\n+\t      f__lcount = 1;\n+\t      f__ltype = TYCHAR;\n+\t      return *p = 0;\n+\t    }\n+\t  if (!isdigit (ch))\n+\t    {\n+\t      f__lcount = 1;\n #ifndef F8X_NML_ELIDE_QUOTES\n-\telse if (nml_read > 1) {\n-\t\tUngetc(ch,f__cf);\n-\t\tf__lquit = 2;\n-\t\treturn 0;\n-\t\t}\n-#endif\n-\telse {\n-\t\t/* Fortran 8x-style unquoted string */\n-\t\t*p++ = ch;\n-\t\tfor(i = 1;;) {\n-\t\t\tswitch(GETC(ch)) {\n-\t\t\t\tcase ',':\n-\t\t\t\tcase ' ':\n-\t\t\t\tcase '\\t':\n-\t\t\t\tcase '\\n':\n-\t\t\t\tcase '/':\n-\t\t\t\t\tUngetc(ch,f__cf);\n-\t\t\t\t\t/* no break */\n-\t\t\t\tcase EOF:\n-\t\t\t\t\tf__ltype = TYCHAR;\n-\t\t\t\t\treturn *p = 0;\n-\t\t\t\t}\n- noquote:\n-\t\t\t*p++ = ch;\n-\t\t\tif (++i == size) {\n-\t\t\t\tf__lchar = (char *)realloc(f__lchar,\n-\t\t\t\t\t(unsigned int)(size += BUFSIZE));\n-\t\t\t\tif(f__lchar == NULL)\n-\t\t\t\t\terrfl(f__elist->cierr,113,rafail);\n-\t\t\t\tp = f__lchar + i;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\tf__ltype=TYCHAR;\n-\tfor(i=0;;)\n-\t{\twhile(GETC(ch)!=quote && ch!='\\n'\n-\t\t\t&& ch!=EOF && ++i<size) *p++ = ch;\n-\t\tif(i==size)\n+\t      if (nml_read)\n \t\t{\n-\t\tnewone:\n-\t\t\tf__lchar= (char *)realloc(f__lchar,\n-\t\t\t\t\t(unsigned int)(size += BUFSIZE));\n-\t\t\tif(f__lchar == NULL)\n-\t\t\t\terrfl(f__elist->cierr,113,rafail);\n-\t\t\tp=f__lchar+i-1;\n-\t\t\t*p++ = ch;\n-\t\t}\n-\t\telse if(ch==EOF) return(EOF);\n-\t\telse if(ch=='\\n')\n-\t\t{\tif(*(p-1) != '\\\\') continue;\n-\t\t\ti--;\n-\t\t\tp--;\n-\t\t\tif(++i<size) *p++ = ch;\n-\t\t\telse goto newone;\n-\t\t}\n-\t\telse if(GETC(ch)==quote)\n-\t\t{\tif(++i<size) *p++ = ch;\n-\t\t\telse goto newone;\n-\t\t}\n-\t\telse\n-\t\t{\t(void) Ungetc(ch,f__cf);\n-\t\t\t*p = 0;\n-\t\t\treturn(0);\n+\t\tno_quote:\n+\t\t  errfl (f__elist->cierr, 112,\n+\t\t\t \"undelimited character string\");\n \t\t}\n+#endif\n+\t      goto noquote;\n+\t    }\n+\t  *p++ = ch;\n+\t  f__lcount = 10 * f__lcount + ch - '0';\n+\t  if (++i == size)\n+\t    {\n+\t      f__lchar = (char *) realloc (f__lchar,\n+\t\t\t\t\t   (unsigned int) (size += BUFSIZE));\n+\t      if (f__lchar == NULL)\n+\t\terrfl (f__elist->cierr, 113, rafail);\n+\t      p = f__lchar + i;\n+\t    }\n+\t}\n+    }\n+  else\n+    (void) Ungetc (ch, f__cf);\n+have_lcount:\n+  if (GETC (ch) == '\\'' || ch == '\"')\n+    quote = ch;\n+  else if (isblnk (ch) || (issep (ch) && ch != '\\n') || ch == EOF)\n+    {\n+      Ungetc (ch, f__cf);\n+      return 0;\n+    }\n+#ifndef F8X_NML_ELIDE_QUOTES\n+  else if (nml_read > 1)\n+    {\n+      Ungetc (ch, f__cf);\n+      f__lquit = 2;\n+      return 0;\n+    }\n+#endif\n+  else\n+    {\n+      /* Fortran 8x-style unquoted string */\n+      *p++ = ch;\n+      for (i = 1;;)\n+\t{\n+\t  switch (GETC (ch))\n+\t    {\n+\t    case ',':\n+\t    case ' ':\n+\t    case '\\t':\n+\t    case '\\n':\n+\t    case '/':\n+\t      Ungetc (ch, f__cf);\n+\t      /* no break */\n+\t    case EOF:\n+\t      f__ltype = TYCHAR;\n+\t      return *p = 0;\n+\t    }\n+\tnoquote:\n+\t  *p++ = ch;\n+\t  if (++i == size)\n+\t    {\n+\t      f__lchar = (char *) realloc (f__lchar,\n+\t\t\t\t\t   (unsigned int) (size += BUFSIZE));\n+\t      if (f__lchar == NULL)\n+\t\terrfl (f__elist->cierr, 113, rafail);\n+\t      p = f__lchar + i;\n+\t    }\n \t}\n+    }\n+  f__ltype = TYCHAR;\n+  for (i = 0;;)\n+    {\n+      while (GETC (ch) != quote && ch != '\\n' && ch != EOF && ++i < size)\n+\t*p++ = ch;\n+      if (i == size)\n+\t{\n+\tnewone:\n+\t  f__lchar = (char *) realloc (f__lchar,\n+\t\t\t\t       (unsigned int) (size += BUFSIZE));\n+\t  if (f__lchar == NULL)\n+\t    errfl (f__elist->cierr, 113, rafail);\n+\t  p = f__lchar + i - 1;\n+\t  *p++ = ch;\n+\t}\n+      else if (ch == EOF)\n+\treturn (EOF);\n+      else if (ch == '\\n')\n+\t{\n+\t  if (*(p - 1) != '\\\\')\n+\t    continue;\n+\t  i--;\n+\t  p--;\n+\t  if (++i < size)\n+\t    *p++ = ch;\n+\t  else\n+\t    goto newone;\n+\t}\n+      else if (GETC (ch) == quote)\n+\t{\n+\t  if (++i < size)\n+\t    *p++ = ch;\n+\t  else\n+\t    goto newone;\n+\t}\n+      else\n+\t{\n+\t  (void) Ungetc (ch, f__cf);\n+\t  *p = 0;\n+\t  return (0);\n+\t}\n+    }\n }\n-c_le(cilist *a)\n+\n+c_le (cilist * a)\n {\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__fmtbuf=\"list io\";\n-\tf__curunit = &f__units[a->ciunit];\n-\tf__fmtlen=7;\n-\tif(a->ciunit>=MXUNIT || a->ciunit<0)\n-\t\terr(a->cierr,101,\"stler\");\n-\tf__scale=f__recpos=0;\n-\tf__elist=a;\n-\tif(f__curunit->ufd==NULL && fk_open(SEQ,FMT,a->ciunit))\n-\t\terr(a->cierr,102,\"lio\");\n-\tf__cf=f__curunit->ufd;\n-\tif(!f__curunit->ufmt) err(a->cierr,103,\"lio\");\n-\treturn(0);\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__fmtbuf = \"list io\";\n+  f__curunit = &f__units[a->ciunit];\n+  f__fmtlen = 7;\n+  if (a->ciunit >= MXUNIT || a->ciunit < 0)\n+    err (a->cierr, 101, \"stler\");\n+  f__scale = f__recpos = 0;\n+  f__elist = a;\n+  if (f__curunit->ufd == NULL && fk_open (SEQ, FMT, a->ciunit))\n+    err (a->cierr, 102, \"lio\");\n+  f__cf = f__curunit->ufd;\n+  if (!f__curunit->ufmt)\n+    err (a->cierr, 103, \"lio\");\n+  return (0);\n }\n-l_read(ftnint *number, char *ptr, ftnlen len, ftnint type)\n+\n+l_read (ftnint * number, char *ptr, ftnlen len, ftnint type)\n {\n #define Ptr ((flex *)ptr)\n-\tint i,n,ch;\n-\tdoublereal *yy;\n-\treal *xx;\n-\tfor(i=0;i<*number;i++)\n+  int i, n, ch;\n+  doublereal *yy;\n+  real *xx;\n+  for (i = 0; i < *number; i++)\n+    {\n+      if (f__lquit)\n+\treturn (0);\n+      if (l_eof)\n+\terr (f__elist->ciend, EOF, \"list in\");\n+      if (f__lcount == 0)\n \t{\n-\t\tif(f__lquit) return(0);\n-\t\tif(l_eof)\n-\t\t\terr(f__elist->ciend, EOF, \"list in\");\n-\t\tif(f__lcount == 0) {\n-\t\t\tf__ltype = 0;\n-\t\t\tfor(;;)  {\n-\t\t\t\tGETC(ch);\n-\t\t\t\tswitch(ch) {\n-\t\t\t\tcase EOF:\n-\t\t\t\t\terr(f__elist->ciend,(EOF),\"list in\");\n-\t\t\t\tcase ' ':\n-\t\t\t\tcase '\\t':\n-\t\t\t\tcase '\\n':\n-\t\t\t\t\tcontinue;\n-\t\t\t\tcase '/':\n-\t\t\t\t\tf__lquit = 1;\n-\t\t\t\t\tgoto loopend;\n-\t\t\t\tcase ',':\n-\t\t\t\t\tf__lcount = 1;\n-\t\t\t\t\tgoto loopend;\n-\t\t\t\tdefault:\n-\t\t\t\t\t(void) Ungetc(ch, f__cf);\n-\t\t\t\t\tgoto rddata;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\trddata:\n-\t\tswitch((int)type)\n+\t  f__ltype = 0;\n+\t  for (;;)\n+\t    {\n+\t      GETC (ch);\n+\t      switch (ch)\n \t\t{\n-\t\tcase TYINT1:\n-\t\tcase TYSHORT:\n-\t\tcase TYLONG:\n+\t\tcase EOF:\n+\t\t  err (f__elist->ciend, (EOF), \"list in\");\n+\t\tcase ' ':\n+\t\tcase '\\t':\n+\t\tcase '\\n':\n+\t\t  continue;\n+\t\tcase '/':\n+\t\t  f__lquit = 1;\n+\t\t  goto loopend;\n+\t\tcase ',':\n+\t\t  f__lcount = 1;\n+\t\t  goto loopend;\n+\t\tdefault:\n+\t\t  (void) Ungetc (ch, f__cf);\n+\t\t  goto rddata;\n+\t\t}\n+\t    }\n+\t}\n+    rddata:\n+      switch ((int) type)\n+\t{\n+\tcase TYINT1:\n+\tcase TYSHORT:\n+\tcase TYLONG:\n #ifndef ALLOW_FLOAT_IN_INTEGER_LIST_INPUT\n-\t\t\tERR(l_R(0,1));\n-\t\t\tbreak;\n+\t  ERR (l_R (0, 1));\n+\t  break;\n #endif\n-\t\tcase TYREAL:\n-\t\tcase TYDREAL:\n-\t\t\tERR(l_R(0,0));\n-\t\t\tbreak;\n+\tcase TYREAL:\n+\tcase TYDREAL:\n+\t  ERR (l_R (0, 0));\n+\t  break;\n #ifdef TYQUAD\n-\t\tcase TYQUAD:\n-\t\t\tn = l_R(0,2);\n-\t\t\tif (n)\n-\t\t\t\treturn n;\n-\t\t\tbreak;\n+\tcase TYQUAD:\n+\t  n = l_R (0, 2);\n+\t  if (n)\n+\t    return n;\n+\t  break;\n #endif\n-\t\tcase TYCOMPLEX:\n-\t\tcase TYDCOMPLEX:\n-\t\t\tERR(l_C());\n-\t\t\tbreak;\n-\t\tcase TYLOGICAL1:\n-\t\tcase TYLOGICAL2:\n-\t\tcase TYLOGICAL:\n-\t\t\tERR(l_L());\n-\t\t\tbreak;\n-\t\tcase TYCHAR:\n-\t\t\tERR(l_CHAR());\n-\t\t\tbreak;\n-\t\t}\n-\twhile (GETC(ch) == ' ' || ch == '\\t');\n-\tif (ch != ',' || f__lcount > 1)\n-\t\tUngetc(ch,f__cf);\n-\tloopend:\n-\t\tif(f__lquit) return(0);\n-\t\tif(f__cf && ferror(f__cf)) {\n-\t\t\tclearerr(f__cf);\n-\t\t\terrfl(f__elist->cierr,errno,\"list in\");\n-\t\t\t}\n-\t\tif(f__ltype==0) goto bump;\n-\t\tswitch((int)type)\n-\t\t{\n-\t\tcase TYINT1:\n-\t\tcase TYLOGICAL1:\n-\t\t\tPtr->flchar = (char)f__lx;\n-\t\t\tbreak;\n-\t\tcase TYLOGICAL2:\n-\t\tcase TYSHORT:\n-\t\t\tPtr->flshort = (short)f__lx;\n-\t\t\tbreak;\n-\t\tcase TYLOGICAL:\n-\t\tcase TYLONG:\n-\t\t\tPtr->flint = (ftnint)f__lx;\n-\t\t\tbreak;\n+\tcase TYCOMPLEX:\n+\tcase TYDCOMPLEX:\n+\t  ERR (l_C ());\n+\t  break;\n+\tcase TYLOGICAL1:\n+\tcase TYLOGICAL2:\n+\tcase TYLOGICAL:\n+\t  ERR (l_L ());\n+\t  break;\n+\tcase TYCHAR:\n+\t  ERR (l_CHAR ());\n+\t  break;\n+\t}\n+      while (GETC (ch) == ' ' || ch == '\\t');\n+      if (ch != ',' || f__lcount > 1)\n+\tUngetc (ch, f__cf);\n+    loopend:\n+      if (f__lquit)\n+\treturn (0);\n+      if (f__cf && ferror (f__cf))\n+\t{\n+\t  clearerr (f__cf);\n+\t  errfl (f__elist->cierr, errno, \"list in\");\n+\t}\n+      if (f__ltype == 0)\n+\tgoto bump;\n+      switch ((int) type)\n+\t{\n+\tcase TYINT1:\n+\tcase TYLOGICAL1:\n+\t  Ptr->flchar = (char) f__lx;\n+\t  break;\n+\tcase TYLOGICAL2:\n+\tcase TYSHORT:\n+\t  Ptr->flshort = (short) f__lx;\n+\t  break;\n+\tcase TYLOGICAL:\n+\tcase TYLONG:\n+\t  Ptr->flint = (ftnint) f__lx;\n+\t  break;\n #ifdef Allow_TYQUAD\n-\t\tcase TYQUAD:\n-\t\t\tif (!(Ptr->fllongint = f__llx))\n-\t\t\t\tPtr->fllongint = f__lx;\n-\t\t\tbreak;\n+\tcase TYQUAD:\n+\t  if (!(Ptr->fllongint = f__llx))\n+\t    Ptr->fllongint = f__lx;\n+\t  break;\n #endif\n-\t\tcase TYREAL:\n-\t\t\tPtr->flreal=f__lx;\n-\t\t\tbreak;\n-\t\tcase TYDREAL:\n-\t\t\tPtr->fldouble=f__lx;\n-\t\t\tbreak;\n-\t\tcase TYCOMPLEX:\n-\t\t\txx=(real *)ptr;\n-\t\t\t*xx++ = f__lx;\n-\t\t\t*xx = f__ly;\n-\t\t\tbreak;\n-\t\tcase TYDCOMPLEX:\n-\t\t\tyy=(doublereal *)ptr;\n-\t\t\t*yy++ = f__lx;\n-\t\t\t*yy = f__ly;\n-\t\t\tbreak;\n-\t\tcase TYCHAR:\n-\t\t\tb_char(f__lchar,ptr,len);\n-\t\t\tbreak;\n-\t\t}\n-\tbump:\n-\t\tif(f__lcount>0) f__lcount--;\n-\t\tptr += len;\n-\t\tif (nml_read)\n-\t\t\tnml_read++;\n+\tcase TYREAL:\n+\t  Ptr->flreal = f__lx;\n+\t  break;\n+\tcase TYDREAL:\n+\t  Ptr->fldouble = f__lx;\n+\t  break;\n+\tcase TYCOMPLEX:\n+\t  xx = (real *) ptr;\n+\t  *xx++ = f__lx;\n+\t  *xx = f__ly;\n+\t  break;\n+\tcase TYDCOMPLEX:\n+\t  yy = (doublereal *) ptr;\n+\t  *yy++ = f__lx;\n+\t  *yy = f__ly;\n+\t  break;\n+\tcase TYCHAR:\n+\t  b_char (f__lchar, ptr, len);\n+\t  break;\n \t}\n-\treturn(0);\n+    bump:\n+      if (f__lcount > 0)\n+\tf__lcount--;\n+      ptr += len;\n+      if (nml_read)\n+\tnml_read++;\n+    }\n+  return (0);\n #undef Ptr\n }\n-integer s_rsle(cilist *a)\n+\n+integer\n+s_rsle (cilist * a)\n {\n-\tint n;\n-\n-\tf__reading=1;\n-\tf__external=1;\n-\tf__formatted=1;\n-\tif(n=c_le(a)) return(n);\n-\tf__lioproc = l_read;\n-\tf__lquit = 0;\n-\tf__lcount = 0;\n-\tl_eof = 0;\n-\tif(f__curunit->uwrt && f__nowreading(f__curunit))\n-\t\terr(a->cierr,errno,\"read start\");\n-\tif(f__curunit->uend)\n-\t\terr(f__elist->ciend,(EOF),\"read start\");\n-\tl_getc = t_getc;\n-\tl_ungetc = un_getc;\n-\tf__doend = xrd_SL;\n-\treturn(0);\n+  int n;\n+\n+  f__reading = 1;\n+  f__external = 1;\n+  f__formatted = 1;\n+  if (n = c_le (a))\n+    return (n);\n+  f__lioproc = l_read;\n+  f__lquit = 0;\n+  f__lcount = 0;\n+  l_eof = 0;\n+  if (f__curunit->uwrt && f__nowreading (f__curunit))\n+    err (a->cierr, errno, \"read start\");\n+  if (f__curunit->uend)\n+    err (f__elist->ciend, (EOF), \"read start\");\n+  l_getc = t_getc;\n+  l_ungetc = un_getc;\n+  f__doend = xrd_SL;\n+  return (0);\n }"}, {"sha": "c67bffce5be29fa79d87679e78b53764dc666f76", "filename": "libf2c/libI77/lwrite.c", "status": "modified", "additions": 213, "deletions": 204, "changes": 417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Flwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Flwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Flwrite.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -7,260 +7,269 @@ ftnint L_len;\n int f__Aquote;\n \n static void\n-donewrec(void)\n+donewrec (void)\n {\n-\tif (f__recpos)\n-\t\t(*f__donewrec)();\n-\t}\n+  if (f__recpos)\n+    (*f__donewrec) ();\n+}\n \n static void\n-lwrt_I(longint n)\n+lwrt_I (longint n)\n {\n-\tchar *p;\n-\tint ndigit, sign;\n+  char *p;\n+  int ndigit, sign;\n \n-\tp = f__icvt(n, &ndigit, &sign, 10);\n-\tif(f__recpos + ndigit >= L_len)\n-\t\tdonewrec();\n-\tPUT(' ');\n-\tif (sign)\n-\t\tPUT('-');\n-\twhile(*p)\n-\t\tPUT(*p++);\n+  p = f__icvt (n, &ndigit, &sign, 10);\n+  if (f__recpos + ndigit >= L_len)\n+    donewrec ();\n+  PUT (' ');\n+  if (sign)\n+    PUT ('-');\n+  while (*p)\n+    PUT (*p++);\n }\n static void\n-lwrt_L(ftnint n, ftnlen len)\n+lwrt_L (ftnint n, ftnlen len)\n {\n-\tif(f__recpos+LLOGW>=L_len)\n-\t\tdonewrec();\n-\twrt_L((Uint *)&n,LLOGW, len);\n+  if (f__recpos + LLOGW >= L_len)\n+    donewrec ();\n+  wrt_L ((Uint *) & n, LLOGW, len);\n }\n static void\n-lwrt_A(char *p, ftnlen len)\n+lwrt_A (char *p, ftnlen len)\n {\n-\tint a;\n-\tchar *p1, *pe;\n+  int a;\n+  char *p1, *pe;\n \n-\ta = 0;\n-\tpe = p + len;\n-\tif (f__Aquote) {\n-\t\ta = 3;\n-\t\tif (len > 1 && p[len-1] == ' ') {\n-\t\t\twhile(--len > 1 && p[len-1] == ' ');\n-\t\t\tpe = p + len;\n-\t\t\t}\n-\t\tp1 = p;\n-\t\twhile(p1 < pe)\n-\t\t\tif (*p1++ == '\\'')\n-\t\t\t\ta++;\n-\t\t}\n-\tif(f__recpos+len+a >= L_len)\n-\t\tdonewrec();\n-\tif (a\n+  a = 0;\n+  pe = p + len;\n+  if (f__Aquote)\n+    {\n+      a = 3;\n+      if (len > 1 && p[len - 1] == ' ')\n+\t{\n+\t  while (--len > 1 && p[len - 1] == ' ');\n+\t  pe = p + len;\n+\t}\n+      p1 = p;\n+      while (p1 < pe)\n+\tif (*p1++ == '\\'')\n+\t  a++;\n+    }\n+  if (f__recpos + len + a >= L_len)\n+    donewrec ();\n+  if (a\n #ifndef OMIT_BLANK_CC\n-\t\t|| !f__recpos\n+      || !f__recpos\n #endif\n-\t\t)\n-\t\tPUT(' ');\n-\tif (a) {\n-\t\tPUT('\\'');\n-\t\twhile(p < pe) {\n-\t\t\tif (*p == '\\'')\n-\t\t\t\tPUT('\\'');\n-\t\t\tPUT(*p++);\n-\t\t\t}\n-\t\tPUT('\\'');\n-\t\t}\n-\telse\n-\t\twhile(p < pe)\n-\t\t\tPUT(*p++);\n+    )\n+    PUT (' ');\n+  if (a)\n+    {\n+      PUT ('\\'');\n+      while (p < pe)\n+\t{\n+\t  if (*p == '\\'')\n+\t    PUT ('\\'');\n+\t  PUT (*p++);\n+\t}\n+      PUT ('\\'');\n+    }\n+  else\n+    while (p < pe)\n+      PUT (*p++);\n }\n \n- static int\n-l_g(char *buf, double n)\n+static int\n+l_g (char *buf, double n)\n {\n #ifdef Old_list_output\n-\tdoublereal absn;\n-\tchar *fmt;\n+  doublereal absn;\n+  char *fmt;\n \n-\tabsn = n;\n-\tif (absn < 0)\n-\t\tabsn = -absn;\n-\tfmt = LLOW <= absn && absn < LHIGH ? LFFMT : LEFMT;\n+  absn = n;\n+  if (absn < 0)\n+    absn = -absn;\n+  fmt = LLOW <= absn && absn < LHIGH ? LFFMT : LEFMT;\n #ifdef USE_STRLEN\n-\tsprintf(buf, fmt, n);\n-\treturn strlen(buf);\n+  sprintf (buf, fmt, n);\n+  return strlen (buf);\n #else\n-\treturn sprintf(buf, fmt, n);\n+  return sprintf (buf, fmt, n);\n #endif\n \n #else\n-\tregister char *b, c, c1;\n+  register char *b, c, c1;\n \n-\tb = buf;\n-\t*b++ = ' ';\n-\tif (n < 0) {\n-\t\t*b++ = '-';\n-\t\tn = -n;\n-\t\t}\n-\telse\n-\t\t*b++ = ' ';\n-\tif (n == 0) {\n-\t\t*b++ = '0';\n-\t\t*b++ = '.';\n-\t\t*b = 0;\n-\t\tgoto f__ret;\n-\t\t}\n-\tsprintf(b, LGFMT, n);\n-\tswitch(*b) {\n+  b = buf;\n+  *b++ = ' ';\n+  if (n < 0)\n+    {\n+      *b++ = '-';\n+      n = -n;\n+    }\n+  else\n+    *b++ = ' ';\n+  if (n == 0)\n+    {\n+      *b++ = '0';\n+      *b++ = '.';\n+      *b = 0;\n+      goto f__ret;\n+    }\n+  sprintf (b, LGFMT, n);\n+  switch (*b)\n+    {\n #ifndef WANT_LEAD_0\n-\t\tcase '0':\n-\t\t\twhile(b[0] = b[1])\n-\t\t\t\tb++;\n-\t\t\tbreak;\n+    case '0':\n+      while (b[0] = b[1])\n+\tb++;\n+      break;\n #endif\n-\t\tcase 'i':\n-\t\tcase 'I':\n-\t\t\t/* Infinity */\n-\t\tcase 'n':\n-\t\tcase 'N':\n-\t\t\t/* NaN */\n-\t\t\twhile(*++b);\n-\t\t\tbreak;\n+    case 'i':\n+    case 'I':\n+      /* Infinity */\n+    case 'n':\n+    case 'N':\n+      /* NaN */\n+      while (*++b);\n+      break;\n \n-\t\tdefault:\n-\t/* Fortran 77 insists on having a decimal point... */\n-\t\t    for(;; b++)\n-\t\t\tswitch(*b) {\n-\t\t\tcase 0:\n-\t\t\t\t*b++ = '.';\n-\t\t\t\t*b = 0;\n-\t\t\t\tgoto f__ret;\n-\t\t\tcase '.':\n-\t\t\t\twhile(*++b);\n-\t\t\t\tgoto f__ret;\n-\t\t\tcase 'E':\n-\t\t\t\tfor(c1 = '.', c = 'E';  *b = c1;\n-\t\t\t\t\tc1 = c, c = *++b);\n-\t\t\t\tgoto f__ret;\n-\t\t\t}\n-\t\t}\n- f__ret:\n-\treturn b - buf;\n+    default:\n+      /* Fortran 77 insists on having a decimal point... */\n+      for (;; b++)\n+\tswitch (*b)\n+\t  {\n+\t  case 0:\n+\t    *b++ = '.';\n+\t    *b = 0;\n+\t    goto f__ret;\n+\t  case '.':\n+\t    while (*++b);\n+\t    goto f__ret;\n+\t  case 'E':\n+\t    for (c1 = '.', c = 'E'; *b = c1; c1 = c, c = *++b);\n+\t    goto f__ret;\n+\t  }\n+    }\n+f__ret:\n+  return b - buf;\n #endif\n-\t}\n+}\n \n static void\n-l_put(register char *s)\n+l_put (register char *s)\n {\n-\tregister void (*pn)(int) = f__putn;\n-\tregister int c;\n+  register void (*pn) (int) = f__putn;\n+  register int c;\n \n-\twhile(c = *s++)\n-\t\t(*pn)(c);\n-\t}\n+  while (c = *s++)\n+    (*pn) (c);\n+}\n \n static void\n-lwrt_F(double n)\n+lwrt_F (double n)\n {\n-\tchar buf[LEFBL];\n+  char buf[LEFBL];\n \n-\tif(f__recpos + l_g(buf,n) >= L_len)\n-\t\tdonewrec();\n-\tl_put(buf);\n+  if (f__recpos + l_g (buf, n) >= L_len)\n+    donewrec ();\n+  l_put (buf);\n }\n static void\n-lwrt_C(double a, double b)\n+lwrt_C (double a, double b)\n {\n-\tchar *ba, *bb, bufa[LEFBL], bufb[LEFBL];\n-\tint al, bl;\n+  char *ba, *bb, bufa[LEFBL], bufb[LEFBL];\n+  int al, bl;\n \n-\tal = l_g(bufa, a);\n-\tfor(ba = bufa; *ba == ' '; ba++)\n-\t\t--al;\n-\tbl = l_g(bufb, b) + 1;\t/* intentionally high by 1 */\n-\tfor(bb = bufb; *bb == ' '; bb++)\n-\t\t--bl;\n-\tif(f__recpos + al + bl + 3 >= L_len)\n-\t\tdonewrec();\n+  al = l_g (bufa, a);\n+  for (ba = bufa; *ba == ' '; ba++)\n+    --al;\n+  bl = l_g (bufb, b) + 1;\t/* intentionally high by 1 */\n+  for (bb = bufb; *bb == ' '; bb++)\n+    --bl;\n+  if (f__recpos + al + bl + 3 >= L_len)\n+    donewrec ();\n #ifdef OMIT_BLANK_CC\n-\telse\n+  else\n #endif\n-\tPUT(' ');\n-\tPUT('(');\n-\tl_put(ba);\n-\tPUT(',');\n-\tif (f__recpos + bl >= L_len) {\n-\t\t(*f__donewrec)();\n+    PUT (' ');\n+  PUT ('(');\n+  l_put (ba);\n+  PUT (',');\n+  if (f__recpos + bl >= L_len)\n+    {\n+      (*f__donewrec) ();\n #ifndef OMIT_BLANK_CC\n-\t\tPUT(' ');\n+      PUT (' ');\n #endif\n-\t\t}\n-\tl_put(bb);\n-\tPUT(')');\n+    }\n+  l_put (bb);\n+  PUT (')');\n }\n-l_write(ftnint *number, char *ptr, ftnlen len, ftnint type)\n+l_write (ftnint * number, char *ptr, ftnlen len, ftnint type)\n {\n #define Ptr ((flex *)ptr)\n-\tint i;\n-\tlongint x;\n-\tdouble y,z;\n-\treal *xx;\n-\tdoublereal *yy;\n-\tfor(i=0;i< *number; i++)\n+  int i;\n+  longint x;\n+  double y, z;\n+  real *xx;\n+  doublereal *yy;\n+  for (i = 0; i < *number; i++)\n+    {\n+      switch ((int) type)\n \t{\n-\t\tswitch((int)type)\n-\t\t{\n-\t\tdefault: f__fatal(204,\"unknown type in lio\");\n-\t\tcase TYINT1:\n-\t\t\tx = Ptr->flchar;\n-\t\t\tgoto xint;\n-\t\tcase TYSHORT:\n-\t\t\tx=Ptr->flshort;\n-\t\t\tgoto xint;\n+\tdefault:\n+\t  f__fatal (204, \"unknown type in lio\");\n+\tcase TYINT1:\n+\t  x = Ptr->flchar;\n+\t  goto xint;\n+\tcase TYSHORT:\n+\t  x = Ptr->flshort;\n+\t  goto xint;\n #ifdef Allow_TYQUAD\n-\t\tcase TYQUAD:\n-\t\t\tx = Ptr->fllongint;\n-\t\t\tgoto xint;\n+\tcase TYQUAD:\n+\t  x = Ptr->fllongint;\n+\t  goto xint;\n #endif\n-\t\tcase TYLONG:\n-\t\t\tx=Ptr->flint;\n-\t\txint:\tlwrt_I(x);\n-\t\t\tbreak;\n-\t\tcase TYREAL:\n-\t\t\ty=Ptr->flreal;\n-\t\t\tgoto xfloat;\n-\t\tcase TYDREAL:\n-\t\t\ty=Ptr->fldouble;\n-\t\txfloat: lwrt_F(y);\n-\t\t\tbreak;\n-\t\tcase TYCOMPLEX:\n-\t\t\txx= &Ptr->flreal;\n-\t\t\ty = *xx++;\n-\t\t\tz = *xx;\n-\t\t\tgoto xcomplex;\n-\t\tcase TYDCOMPLEX:\n-\t\t\tyy = &Ptr->fldouble;\n-\t\t\ty= *yy++;\n-\t\t\tz = *yy;\n-\t\txcomplex:\n-\t\t\tlwrt_C(y,z);\n-\t\t\tbreak;\n-\t\tcase TYLOGICAL1:\n-\t\t\tx = Ptr->flchar;\n-\t\t\tgoto xlog;\n-\t\tcase TYLOGICAL2:\n-\t\t\tx = Ptr->flshort;\n-\t\t\tgoto xlog;\n-\t\tcase TYLOGICAL:\n-\t\t\tx = Ptr->flint;\n-\t\txlog:\tlwrt_L(Ptr->flint, len);\n-\t\t\tbreak;\n-\t\tcase TYCHAR:\n-\t\t\tlwrt_A(ptr,len);\n-\t\t\tbreak;\n-\t\t}\n-\t\tptr += len;\n+\tcase TYLONG:\n+\t  x = Ptr->flint;\n+\txint:lwrt_I (x);\n+\t  break;\n+\tcase TYREAL:\n+\t  y = Ptr->flreal;\n+\t  goto xfloat;\n+\tcase TYDREAL:\n+\t  y = Ptr->fldouble;\n+\txfloat:lwrt_F (y);\n+\t  break;\n+\tcase TYCOMPLEX:\n+\t  xx = &Ptr->flreal;\n+\t  y = *xx++;\n+\t  z = *xx;\n+\t  goto xcomplex;\n+\tcase TYDCOMPLEX:\n+\t  yy = &Ptr->fldouble;\n+\t  y = *yy++;\n+\t  z = *yy;\n+\txcomplex:\n+\t  lwrt_C (y, z);\n+\t  break;\n+\tcase TYLOGICAL1:\n+\t  x = Ptr->flchar;\n+\t  goto xlog;\n+\tcase TYLOGICAL2:\n+\t  x = Ptr->flshort;\n+\t  goto xlog;\n+\tcase TYLOGICAL:\n+\t  x = Ptr->flint;\n+\txlog:lwrt_L (Ptr->flint, len);\n+\t  break;\n+\tcase TYCHAR:\n+\t  lwrt_A (ptr, len);\n+\t  break;\n \t}\n-\treturn(0);\n+      ptr += len;\n+    }\n+  return (0);\n }"}, {"sha": "b03ec34b494314e2916c71ae9d7ab356a132e020", "filename": "libf2c/libI77/open.c", "status": "modified", "additions": 239, "deletions": 219, "changes": 458, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fopen.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,275 +6,295 @@\n #ifdef MSDOS\n #include \"io.h\"\n #else\n-#include \"unistd.h\"\t/* for access */\n+#include \"unistd.h\"\t\t/* for access */\n #endif\n #endif\n \n #undef abs\n #undef min\n #undef max\n #include <stdlib.h>\n-extern int f__canseek(FILE*);\n-extern integer f_clos(cllist*);\n+extern int f__canseek (FILE *);\n+extern integer f_clos (cllist *);\n \n #ifdef NON_ANSI_RW_MODES\n-char *f__r_mode[2] = {\"r\", \"r\"};\n-char *f__w_mode[4] = {\"w\", \"w\", \"r+w\", \"r+w\"};\n+char *f__r_mode[2] = { \"r\", \"r\" };\n+char *f__w_mode[4] = { \"w\", \"w\", \"r+w\", \"r+w\" };\n #else\n-char *f__r_mode[2] = {\"rb\", \"r\"};\n-char *f__w_mode[4] = {\"wb\", \"w\", \"r+b\", \"r+\"};\n+char *f__r_mode[2] = { \"rb\", \"r\" };\n+char *f__w_mode[4] = { \"wb\", \"w\", \"r+b\", \"r+\" };\n #endif\n \n- static char f__buf0[400], *f__buf = f__buf0;\n- int f__buflen = (int)sizeof(f__buf0);\n+static char f__buf0[400], *f__buf = f__buf0;\n+int f__buflen = (int) sizeof (f__buf0);\n \n- static void\n-f__bufadj(int n, int c)\n+static void\n+f__bufadj (int n, int c)\n {\n-\tunsigned int len;\n-\tchar *nbuf, *s, *t, *te;\n+  unsigned int len;\n+  char *nbuf, *s, *t, *te;\n \n-\tif (f__buf == f__buf0)\n-\t\tf__buflen = 1024;\n-\twhile(f__buflen <= n)\n-\t\tf__buflen <<= 1;\n-\tlen = (unsigned int)f__buflen;\n-\tif (len != f__buflen || !(nbuf = (char*)malloc(len)))\n-\t\tf__fatal(113, \"malloc failure\");\n-\ts = nbuf;\n-\tt = f__buf;\n-\tte = t + c;\n-\twhile(t < te)\n-\t\t*s++ = *t++;\n-\tif (f__buf != f__buf0)\n-\t\tfree(f__buf);\n-\tf__buf = nbuf;\n-\t}\n+  if (f__buf == f__buf0)\n+    f__buflen = 1024;\n+  while (f__buflen <= n)\n+    f__buflen <<= 1;\n+  len = (unsigned int) f__buflen;\n+  if (len != f__buflen || !(nbuf = (char *) malloc (len)))\n+    f__fatal (113, \"malloc failure\");\n+  s = nbuf;\n+  t = f__buf;\n+  te = t + c;\n+  while (t < te)\n+    *s++ = *t++;\n+  if (f__buf != f__buf0)\n+    free (f__buf);\n+  f__buf = nbuf;\n+}\n \n- int\n-f__putbuf(int c)\n+int\n+f__putbuf (int c)\n {\n-\tchar *s, *se;\n-\tint n;\n+  char *s, *se;\n+  int n;\n \n-\tif (f__hiwater > f__recpos)\n-\t\tf__recpos = f__hiwater;\n-\tn = f__recpos + 1;\n-\tif (n >= f__buflen)\n-\t\tf__bufadj(n, f__recpos);\n-\ts = f__buf;\n-\tse = s + f__recpos;\n-\tif (c)\n-\t\t*se++ = c;\n-\t*se = 0;\n-\tfor(;;) {\n-\t\tfputs(s, f__cf);\n-\t\ts += strlen(s);\n-\t\tif (s >= se)\n-\t\t\tbreak;\t/* normally happens the first time */\n-\t\tputc(*s++, f__cf);\n-\t\t}\n-\treturn 0;\n-\t}\n+  if (f__hiwater > f__recpos)\n+    f__recpos = f__hiwater;\n+  n = f__recpos + 1;\n+  if (n >= f__buflen)\n+    f__bufadj (n, f__recpos);\n+  s = f__buf;\n+  se = s + f__recpos;\n+  if (c)\n+    *se++ = c;\n+  *se = 0;\n+  for (;;)\n+    {\n+      fputs (s, f__cf);\n+      s += strlen (s);\n+      if (s >= se)\n+\tbreak;\t\t\t/* normally happens the first time */\n+      putc (*s++, f__cf);\n+    }\n+  return 0;\n+}\n \n- void\n-x_putc(int c)\n+void\n+x_putc (int c)\n {\n-\tif (f__recpos >= f__buflen)\n-\t\tf__bufadj(f__recpos, f__buflen);\n-\tf__buf[f__recpos++] = c;\n-\t}\n+  if (f__recpos >= f__buflen)\n+    f__bufadj (f__recpos, f__buflen);\n+  f__buf[f__recpos++] = c;\n+}\n \n #define opnerr(f,m,s) \\\n   do {if(f) {f__init &= ~2; errno= m;} else opn_err(m,s,a); return(m);} while(0)\n \n- static void\n-opn_err(int m, char *s, olist *a)\n+static void\n+opn_err (int m, char *s, olist * a)\n {\n-\tif (a->ofnm) {\n-\t\t/* supply file name to error message */\n-\t\tif (a->ofnmlen >= f__buflen)\n-\t\t\tf__bufadj((int)a->ofnmlen, 0);\n-\t\tg_char(a->ofnm, a->ofnmlen, f__curunit->ufnm = f__buf);\n-\t\t}\n-\tf__fatal(m, s);\n-\t}\n+  if (a->ofnm)\n+    {\n+      /* supply file name to error message */\n+      if (a->ofnmlen >= f__buflen)\n+\tf__bufadj ((int) a->ofnmlen, 0);\n+      g_char (a->ofnm, a->ofnmlen, f__curunit->ufnm = f__buf);\n+    }\n+  f__fatal (m, s);\n+}\n \n-integer f_open(olist *a)\n-{\tunit *b;\n-\tinteger rv;\n-\tchar buf[256], *s, *env;\n-\tcllist x;\n-\tint ufmt;\n-\tFILE *tf;\n-\tint fd, len;\n+integer\n+f_open (olist * a)\n+{\n+  unit *b;\n+  integer rv;\n+  char buf[256], *s, *env;\n+  cllist x;\n+  int ufmt;\n+  FILE *tf;\n+  int fd, len;\n #ifndef NON_UNIX_STDIO\n-\tint n;\n+  int n;\n #endif\n-\tif(f__init != 1) f_init();\n-\tf__external = 1;\n-\tif(a->ounit>=MXUNIT || a->ounit<0)\n-\t\terr(a->oerr,101,\"open\");\n-\tf__curunit = b = &f__units[a->ounit];\n-\tif(b->ufd) {\n-\t\tif(a->ofnm==0)\n-\t\t{\n-\t\tsame:\tif (a->oblnk)\n-\t\t\t\tb->ublnk = *a->oblnk == 'z' || *a->oblnk == 'Z';\n-\t\t\treturn(0);\n-\t\t}\n+  if (f__init != 1)\n+    f_init ();\n+  f__external = 1;\n+  if (a->ounit >= MXUNIT || a->ounit < 0)\n+    err (a->oerr, 101, \"open\");\n+  f__curunit = b = &f__units[a->ounit];\n+  if (b->ufd)\n+    {\n+      if (a->ofnm == 0)\n+\t{\n+\tsame:if (a->oblnk)\n+\t    b->ublnk = *a->oblnk == 'z' || *a->oblnk == 'Z';\n+\t  return (0);\n+\t}\n #ifdef NON_UNIX_STDIO\n-\t\tif (b->ufnm\n-\t\t && strlen(b->ufnm) == a->ofnmlen\n-\t\t && !strncmp(b->ufnm, a->ofnm, (unsigned)a->ofnmlen))\n-\t\t\tgoto same;\n+      if (b->ufnm\n+\t  && strlen (b->ufnm) == a->ofnmlen\n+\t  && !strncmp (b->ufnm, a->ofnm, (unsigned) a->ofnmlen))\n+\tgoto same;\n #else\n-\t\tg_char(a->ofnm,a->ofnmlen,buf);\n-\t\tif (f__inode(buf,&n) == b->uinode && n == b->udev)\n-\t\t\tgoto same;\n+      g_char (a->ofnm, a->ofnmlen, buf);\n+      if (f__inode (buf, &n) == b->uinode && n == b->udev)\n+\tgoto same;\n #endif\n-\t\tx.cunit=a->ounit;\n-\t\tx.csta=0;\n-\t\tx.cerr=a->oerr;\n-\t\tif ((rv = f_clos(&x)) != 0)\n-\t\t\treturn rv;\n-\t\t}\n-\tb->url = (int)a->orl;\n-\tb->ublnk = a->oblnk && (*a->oblnk == 'z' || *a->oblnk == 'Z');\n-\tif(a->ofm==0)\n-\t{\tif(b->url>0) b->ufmt=0;\n-\t\telse b->ufmt=1;\n-\t}\n-\telse if(*a->ofm=='f' || *a->ofm == 'F') b->ufmt=1;\n-\telse b->ufmt=0;\n-\tufmt = b->ufmt;\n+      x.cunit = a->ounit;\n+      x.csta = 0;\n+      x.cerr = a->oerr;\n+      if ((rv = f_clos (&x)) != 0)\n+\treturn rv;\n+    }\n+  b->url = (int) a->orl;\n+  b->ublnk = a->oblnk && (*a->oblnk == 'z' || *a->oblnk == 'Z');\n+  if (a->ofm == 0)\n+    {\n+      if (b->url > 0)\n+\tb->ufmt = 0;\n+      else\n+\tb->ufmt = 1;\n+    }\n+  else if (*a->ofm == 'f' || *a->ofm == 'F')\n+    b->ufmt = 1;\n+  else\n+    b->ufmt = 0;\n+  ufmt = b->ufmt;\n #ifdef url_Adjust\n-\tif (b->url && !ufmt)\n-\t\turl_Adjust(b->url);\n+  if (b->url && !ufmt)\n+    url_Adjust (b->url);\n #endif\n-\tif (a->ofnm) {\n-\t\tg_char(a->ofnm,a->ofnmlen,buf);\n-\t\tif (!buf[0])\n-\t\t\topnerr(a->oerr,107,\"open\");\n-\t\t}\n-\telse\n-\t\tsprintf(buf, \"fort.%ld\", (long)a->ounit);\n-\tb->uscrtch = 0;\n-\tb->uend=0;\n-\tb->uwrt = 0;\n-\tb->ufd = 0;\n-\tb->urw = 3;\n-\tswitch(a->osta ? *a->osta : 'u')\n-\t{\n-\tcase 'o':\n-\tcase 'O':\n+  if (a->ofnm)\n+    {\n+      g_char (a->ofnm, a->ofnmlen, buf);\n+      if (!buf[0])\n+\topnerr (a->oerr, 107, \"open\");\n+    }\n+  else\n+    sprintf (buf, \"fort.%ld\", (long) a->ounit);\n+  b->uscrtch = 0;\n+  b->uend = 0;\n+  b->uwrt = 0;\n+  b->ufd = 0;\n+  b->urw = 3;\n+  switch (a->osta ? *a->osta : 'u')\n+    {\n+    case 'o':\n+    case 'O':\n #ifdef NON_POSIX_STDIO\n-\t\tif (!(tf = fopen(buf,\"r\")))\n-\t\t\topnerr(a->oerr,errno,\"open\");\n-\t\tfclose(tf);\n+      if (!(tf = fopen (buf, \"r\")))\n+\topnerr (a->oerr, errno, \"open\");\n+      fclose (tf);\n #else\n-\t\tif (access(buf,0))\n-\t\t\topnerr(a->oerr,errno,\"open\");\n+      if (access (buf, 0))\n+\topnerr (a->oerr, errno, \"open\");\n #endif\n-\t\tbreak;\n-\t case 's':\n-\t case 'S':\n-\t\tb->uscrtch=1;\n-#ifdef HAVE_MKSTEMP             /* Allow use of TMPDIR preferentially. */\n-\t\tenv = getenv(\"TMPDIR\");\n-\t\tif (!env) env = getenv(\"TEMP\");\n-\t\tif (!env) env = \"/tmp\";\n-\t\tlen = strlen(env);\n-\t\tif (len > 256 - sizeof \"/tmp.FXXXXXX\")\n-\t\t  err (a->oerr, 132, \"open\");\n-\t\tstrcpy(buf, env);\n-\t\tstrcat(buf, \"/tmp.FXXXXXX\");\n-\t\tfd = mkstemp(buf);\n-\t\tif (fd == -1 || close(fd))\n-\t\t  err (a->oerr, 132, \"open\");\n+      break;\n+    case 's':\n+    case 'S':\n+      b->uscrtch = 1;\n+#ifdef HAVE_MKSTEMP\t\t/* Allow use of TMPDIR preferentially. */\n+      env = getenv (\"TMPDIR\");\n+      if (!env)\n+\tenv = getenv (\"TEMP\");\n+      if (!env)\n+\tenv = \"/tmp\";\n+      len = strlen (env);\n+      if (len > 256 - sizeof \"/tmp.FXXXXXX\")\n+\terr (a->oerr, 132, \"open\");\n+      strcpy (buf, env);\n+      strcat (buf, \"/tmp.FXXXXXX\");\n+      fd = mkstemp (buf);\n+      if (fd == -1 || close (fd))\n+\terr (a->oerr, 132, \"open\");\n #else /* ! defined (HAVE_MKSTEMP) */\n #ifdef HAVE_TEMPNAM\t\t/* Allow use of TMPDIR preferentially. */\n-\t\ts = tempnam (0, buf);\n-\t\tif (strlen (s) >= sizeof (buf))\n-\t\t  err (a->oerr, 132, \"open\");\n-\t\t(void) strcpy (buf, s);\n-\t\tfree (s);\n+      s = tempnam (0, buf);\n+      if (strlen (s) >= sizeof (buf))\n+\terr (a->oerr, 132, \"open\");\n+      (void) strcpy (buf, s);\n+      free (s);\n #else /* ! defined (HAVE_TEMPNAM) */\n #ifdef HAVE_TMPNAM\n-\t\ttmpnam(buf);\n+      tmpnam (buf);\n #else\n-\t\t(void) strcpy(buf,\"tmp.FXXXXXX\");\n-\t\t(void) mktemp(buf);\n+      (void) strcpy (buf, \"tmp.FXXXXXX\");\n+      (void) mktemp (buf);\n #endif\n #endif /* ! defined (HAVE_TEMPNAM) */\n #endif /* ! defined (HAVE_MKSTEMP) */\n-\t\tgoto replace;\n-\tcase 'n':\n-\tcase 'N':\n+      goto replace;\n+    case 'n':\n+    case 'N':\n #ifdef NON_POSIX_STDIO\n-\t\tif ((tf = fopen(buf,\"r\")) || (tf = fopen(buf,\"a\"))) {\n-\t\t\tfclose(tf);\n-\t\t\topnerr(a->oerr,128,\"open\");\n-\t\t\t}\n+      if ((tf = fopen (buf, \"r\")) || (tf = fopen (buf, \"a\")))\n+\t{\n+\t  fclose (tf);\n+\t  opnerr (a->oerr, 128, \"open\");\n+\t}\n #else\n-\t\tif (!access(buf,0))\n-\t\t\topnerr(a->oerr,128,\"open\");\n+      if (!access (buf, 0))\n+\topnerr (a->oerr, 128, \"open\");\n #endif\n-\t\t/* no break */\n-\tcase 'r':\t/* Fortran 90 replace option */\n-\tcase 'R':\n- replace:\n-\t\tif (tf = fopen(buf,f__w_mode[0]))\n-\t\t\tfclose(tf);\n-\t}\n+      /* no break */\n+    case 'r':\t\t\t/* Fortran 90 replace option */\n+    case 'R':\n+    replace:\n+      if (tf = fopen (buf, f__w_mode[0]))\n+\tfclose (tf);\n+    }\n \n-\tb->ufnm=(char *) malloc((unsigned int)(strlen(buf)+1));\n-\tif(b->ufnm==NULL) opnerr(a->oerr,113,\"no space\");\n-\t(void) strcpy(b->ufnm,buf);\n-\tif ((s = a->oacc) && b->url)\n-\t\tufmt = 0;\n-\tif(!(tf = fopen(buf, f__w_mode[ufmt|2]))) {\n-\t\tif (tf = fopen(buf, f__r_mode[ufmt]))\n-\t\t\tb->urw = 1;\n-\t\telse if (tf = fopen(buf, f__w_mode[ufmt])) {\n-\t\t\tb->uwrt = 1;\n-\t\t\tb->urw = 2;\n-\t\t\t}\n-\t\telse\n-\t\t\terr(a->oerr, errno, \"open\");\n-\t\t}\n-\tb->useek = f__canseek(b->ufd = tf);\n+  b->ufnm = (char *) malloc ((unsigned int) (strlen (buf) + 1));\n+  if (b->ufnm == NULL)\n+    opnerr (a->oerr, 113, \"no space\");\n+  (void) strcpy (b->ufnm, buf);\n+  if ((s = a->oacc) && b->url)\n+    ufmt = 0;\n+  if (!(tf = fopen (buf, f__w_mode[ufmt | 2])))\n+    {\n+      if (tf = fopen (buf, f__r_mode[ufmt]))\n+\tb->urw = 1;\n+      else if (tf = fopen (buf, f__w_mode[ufmt]))\n+\t{\n+\t  b->uwrt = 1;\n+\t  b->urw = 2;\n+\t}\n+      else\n+\terr (a->oerr, errno, \"open\");\n+    }\n+  b->useek = f__canseek (b->ufd = tf);\n #ifndef NON_UNIX_STDIO\n-\tif((b->uinode = f__inode(buf,&b->udev)) == -1)\n-\t\topnerr(a->oerr,108,\"open\");\n+  if ((b->uinode = f__inode (buf, &b->udev)) == -1)\n+    opnerr (a->oerr, 108, \"open\");\n #endif\n-\tif(b->useek)\n-\t\tif (a->orl)\n-\t\t\tFSEEK(b->ufd, 0, SEEK_SET);\n-\t\telse if ((s = a->oacc) && (*s == 'a' || *s == 'A')\n-\t\t\t&& FSEEK(b->ufd, 0, SEEK_END))\n-\t\t\t\topnerr(a->oerr,129,\"open\");\n-\treturn(0);\n+  if (b->useek)\n+    if (a->orl)\n+      FSEEK (b->ufd, 0, SEEK_SET);\n+    else if ((s = a->oacc) && (*s == 'a' || *s == 'A')\n+\t     && FSEEK (b->ufd, 0, SEEK_END))\n+      opnerr (a->oerr, 129, \"open\");\n+  return (0);\n }\n-fk_open(int seq, int fmt, ftnint n)\n-{\tchar nbuf[10];\n-\tolist a;\n-\tint rtn;\n-\tint save_init;\n \n-\t(void) sprintf(nbuf,\"fort.%ld\",(long)n);\n-\ta.oerr=1;\n-\ta.ounit=n;\n-\ta.ofnm=nbuf;\n-\ta.ofnmlen=strlen(nbuf);\n-\ta.osta=NULL;\n-\ta.oacc= seq==SEQ?\"s\":\"d\";\n-\ta.ofm = fmt==FMT?\"f\":\"u\";\n-\ta.orl = seq==DIR?1:0;\n-\ta.oblnk=NULL;\n-\tsave_init = f__init;\n-\tf__init &= ~2;\n-\trtn = f_open(&a);\n-\tf__init = save_init | 1;\n-\treturn rtn;\n+fk_open (int seq, int fmt, ftnint n)\n+{\n+  char nbuf[10];\n+  olist a;\n+  int rtn;\n+  int save_init;\n+\n+  (void) sprintf (nbuf, \"fort.%ld\", (long) n);\n+  a.oerr = 1;\n+  a.ounit = n;\n+  a.ofnm = nbuf;\n+  a.ofnmlen = strlen (nbuf);\n+  a.osta = NULL;\n+  a.oacc = seq == SEQ ? \"s\" : \"d\";\n+  a.ofm = fmt == FMT ? \"f\" : \"u\";\n+  a.orl = seq == DIR ? 1 : 0;\n+  a.oblnk = NULL;\n+  save_init = f__init;\n+  f__init &= ~2;\n+  rtn = f_open (&a);\n+  f__init = save_init | 1;\n+  return rtn;\n }"}, {"sha": "f6a91855ea7319a65a96005015f3e41606b281a3", "filename": "libf2c/libI77/rdfmt.c", "status": "modified", "additions": 563, "deletions": 452, "changes": 1015, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frdfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frdfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Frdfmt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -12,491 +12,602 @@ extern int f__cursor;\n #include \"fmt.h\"\n #include \"fp.h\"\n \n- static int\n-rd_Z(Uint *n, int w, ftnlen len)\n+static int\n+rd_Z (Uint * n, int w, ftnlen len)\n {\n-\tlong x[9];\n-\tchar *s, *s0, *s1, *se, *t;\n-\tint ch, i, w1, w2;\n-\tstatic char hex[256];\n-\tstatic int one = 1;\n-\tint bad = 0;\n+  long x[9];\n+  char *s, *s0, *s1, *se, *t;\n+  int ch, i, w1, w2;\n+  static char hex[256];\n+  static int one = 1;\n+  int bad = 0;\n \n-\tif (!hex['0']) {\n-\t\ts = \"0123456789\";\n-\t\twhile(ch = *s++)\n-\t\t\thex[ch] = ch - '0' + 1;\n-\t\ts = \"ABCDEF\";\n-\t\twhile(ch = *s++)\n-\t\t\thex[ch] = hex[ch + 'a' - 'A'] = ch - 'A' + 11;\n-\t\t}\n-\ts = s0 = (char *)x;\n-\ts1 = (char *)&x[4];\n-\tse = (char *)&x[8];\n-\tif (len > 4*sizeof(long))\n-\t\treturn errno = 117;\n-\twhile (w) {\n-\t\tGET(ch);\n-\t\tif (ch==',' || ch=='\\n')\n-\t\t\tbreak;\n-\t\tw--;\n-\t\tif (ch > ' ') {\n-\t\t\tif (!hex[ch & 0xff])\n-\t\t\t\tbad++;\n-\t\t\t*s++ = ch;\n-\t\t\tif (s == se) {\n-\t\t\t\t/* discard excess characters */\n-\t\t\t\tfor(t = s0, s = s1; t < s1;)\n-\t\t\t\t\t*t++ = *s++;\n-\t\t\t\ts = s1;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\tif (bad)\n-\t\treturn errno = 115;\n-\tw = (int)len;\n-\tw1 = s - s0;\n-\tw2 = w1+1 >> 1;\n-\tt = (char *)n;\n-\tif (*(char *)&one) {\n-\t\t/* little endian */\n-\t\tt += w - 1;\n-\t\ti = -1;\n-\t\t}\n-\telse\n-\t\ti = 1;\n-\tfor(; w > w2; t += i, --w)\n-\t\t*t = 0;\n-\tif (!w)\n-\t\treturn 0;\n-\tif (w < w2)\n-\t\ts0 = s - (w << 1);\n-\telse if (w1 & 1) {\n-\t\t*t = hex[*s0++ & 0xff] - 1;\n-\t\tif (!--w)\n-\t\t\treturn 0;\n-\t\tt += i;\n-\t\t}\n-\tdo {\n-\t\t*t = hex[*s0 & 0xff]-1 << 4 | hex[s0[1] & 0xff]-1;\n-\t\tt += i;\n-\t\ts0 += 2;\n-\t\t}\n-\t\twhile(--w);\n-\treturn 0;\n+  if (!hex['0'])\n+    {\n+      s = \"0123456789\";\n+      while (ch = *s++)\n+\thex[ch] = ch - '0' + 1;\n+      s = \"ABCDEF\";\n+      while (ch = *s++)\n+\thex[ch] = hex[ch + 'a' - 'A'] = ch - 'A' + 11;\n+    }\n+  s = s0 = (char *) x;\n+  s1 = (char *) &x[4];\n+  se = (char *) &x[8];\n+  if (len > 4 * sizeof (long))\n+    return errno = 117;\n+  while (w)\n+    {\n+      GET (ch);\n+      if (ch == ',' || ch == '\\n')\n+\tbreak;\n+      w--;\n+      if (ch > ' ')\n+\t{\n+\t  if (!hex[ch & 0xff])\n+\t    bad++;\n+\t  *s++ = ch;\n+\t  if (s == se)\n+\t    {\n+\t      /* discard excess characters */\n+\t      for (t = s0, s = s1; t < s1;)\n+\t\t*t++ = *s++;\n+\t      s = s1;\n+\t    }\n \t}\n+    }\n+  if (bad)\n+    return errno = 115;\n+  w = (int) len;\n+  w1 = s - s0;\n+  w2 = w1 + 1 >> 1;\n+  t = (char *) n;\n+  if (*(char *) &one)\n+    {\n+      /* little endian */\n+      t += w - 1;\n+      i = -1;\n+    }\n+  else\n+    i = 1;\n+  for (; w > w2; t += i, --w)\n+    *t = 0;\n+  if (!w)\n+    return 0;\n+  if (w < w2)\n+    s0 = s - (w << 1);\n+  else if (w1 & 1)\n+    {\n+      *t = hex[*s0++ & 0xff] - 1;\n+      if (!--w)\n+\treturn 0;\n+      t += i;\n+    }\n+  do\n+    {\n+      *t = hex[*s0 & 0xff] - 1 << 4 | hex[s0[1] & 0xff] - 1;\n+      t += i;\n+      s0 += 2;\n+    }\n+  while (--w);\n+  return 0;\n+}\n \n- static int\n-rd_I(Uint *n, int w, ftnlen len, register int base)\n+static int\n+rd_I (Uint * n, int w, ftnlen len, register int base)\n {\n-\tint bad, ch, sign;\n-\tlongint x = 0;\n+  int bad, ch, sign;\n+  longint x = 0;\n \n-\tif (w <= 0)\n-\t\tgoto have_x;\n-\tfor(;;) {\n-\t\tGET(ch);\n-\t\tif (ch != ' ')\n-\t\t\tbreak;\n-\t\tif (!--w)\n-\t\t\tgoto have_x;\n-\t\t}\n-\tsign = 0;\n-\tswitch(ch) {\n-\t  case ',':\n-\t  case '\\n':\n-\t\tw = 0;\n-\t\tgoto have_x;\n-\t  case '-':\n-\t\tsign = 1;\n-\t  case '+':\n-\t\tbreak;\n-\t  default:\n-\t\tif (ch >= '0' && ch <= '9') {\n-\t\t\tx = ch - '0';\n-\t\t\tbreak;\n-\t\t\t}\n-\t\tgoto have_x;\n-\t\t}\n-\twhile(--w) {\n-\t\tGET(ch);\n-\t\tif (ch >= '0' && ch <= '9') {\n-\t\t\tx = x*base + ch - '0';\n-\t\t\tcontinue;\n-\t\t\t}\n-\t\tif (ch != ' ') {\n-\t\t\tif (ch == '\\n' || ch == ',')\n-\t\t\t\tw = 0;\n-\t\t\tbreak;\n-\t\t\t}\n-\t\tif (f__cblank)\n-\t\t\tx *= base;\n-\t\t}\n-\tif (sign)\n-\t\tx = -x;\n- have_x:\n-\tif(len == sizeof(integer))\n-\t\tn->il=x;\n-\telse if(len == sizeof(char))\n-\t\tn->ic = (char)x;\n+  if (w <= 0)\n+    goto have_x;\n+  for (;;)\n+    {\n+      GET (ch);\n+      if (ch != ' ')\n+\tbreak;\n+      if (!--w)\n+\tgoto have_x;\n+    }\n+  sign = 0;\n+  switch (ch)\n+    {\n+    case ',':\n+    case '\\n':\n+      w = 0;\n+      goto have_x;\n+    case '-':\n+      sign = 1;\n+    case '+':\n+      break;\n+    default:\n+      if (ch >= '0' && ch <= '9')\n+\t{\n+\t  x = ch - '0';\n+\t  break;\n+\t}\n+      goto have_x;\n+    }\n+  while (--w)\n+    {\n+      GET (ch);\n+      if (ch >= '0' && ch <= '9')\n+\t{\n+\t  x = x * base + ch - '0';\n+\t  continue;\n+\t}\n+      if (ch != ' ')\n+\t{\n+\t  if (ch == '\\n' || ch == ',')\n+\t    w = 0;\n+\t  break;\n+\t}\n+      if (f__cblank)\n+\tx *= base;\n+    }\n+  if (sign)\n+    x = -x;\n+have_x:\n+  if (len == sizeof (integer))\n+    n->il = x;\n+  else if (len == sizeof (char))\n+    n->ic = (char) x;\n #ifdef Allow_TYQUAD\n-\telse if (len == sizeof(longint))\n-\t\tn->ili = x;\n+  else if (len == sizeof (longint))\n+    n->ili = x;\n #endif\n-\telse\n-\t\tn->is = (short)x;\n-\tif (w) {\n-\t\twhile(--w)\n-\t\t\tGET(ch);\n-\t\treturn errno = 115;\n-\t\t}\n-\treturn 0;\n+  else\n+    n->is = (short) x;\n+  if (w)\n+    {\n+      while (--w)\n+\tGET (ch);\n+      return errno = 115;\n+    }\n+  return 0;\n }\n \n- static int\n-rd_L(ftnint *n, int w, ftnlen len)\n-{\tint ch, dot, lv;\n+static int\n+rd_L (ftnint * n, int w, ftnlen len)\n+{\n+  int ch, dot, lv;\n \n-\tif (w <= 0)\n-\t\tgoto bad;\n-\tfor(;;) {\n-\t\tGET(ch);\n-\t\t--w;\n-\t\tif (ch != ' ')\n-\t\t\tbreak;\n-\t\tif (!w)\n-\t\t\tgoto bad;\n-\t\t}\n-\tdot = 0;\n- retry:\n-\tswitch(ch) {\n-\t  case '.':\n-\t\tif (dot++ || !w)\n-\t\t\tgoto bad;\n-\t\tGET(ch);\n-\t\t--w;\n-\t\tgoto retry;\n-\t  case 't':\n-\t  case 'T':\n-\t\tlv = 1;\n-\t\tbreak;\n-\t  case 'f':\n-\t  case 'F':\n-\t\tlv = 0;\n-\t\tbreak;\n-\t  default:\n- bad:\n-\t\tfor(; w > 0; --w)\n-\t\t\tGET(ch);\n-\t\t/* no break */\n-\t  case ',':\n-\t  case '\\n':\n-\t\treturn errno = 116;\n-\t\t}\n-\t/* The switch statement that was here\n-\t   didn't cut it:  It broke down for targets\n-\t   where sizeof(char) == sizeof(short). */\n-\tif (len == sizeof(char))\n-\t\t*(char *)n = (char)lv;\n-\telse if (len == sizeof(short))\n-\t\t*(short *)n = (short)lv;\n-\telse\n-\t\t*n = lv;\n-\twhile(w-- > 0) {\n-\t\tGET(ch);\n-\t\tif (ch == ',' || ch == '\\n')\n-\t\t\tbreak;\n-\t\t}\n-\treturn 0;\n+  if (w <= 0)\n+    goto bad;\n+  for (;;)\n+    {\n+      GET (ch);\n+      --w;\n+      if (ch != ' ')\n+\tbreak;\n+      if (!w)\n+\tgoto bad;\n+    }\n+  dot = 0;\n+retry:\n+  switch (ch)\n+    {\n+    case '.':\n+      if (dot++ || !w)\n+\tgoto bad;\n+      GET (ch);\n+      --w;\n+      goto retry;\n+    case 't':\n+    case 'T':\n+      lv = 1;\n+      break;\n+    case 'f':\n+    case 'F':\n+      lv = 0;\n+      break;\n+    default:\n+    bad:\n+      for (; w > 0; --w)\n+\tGET (ch);\n+      /* no break */\n+    case ',':\n+    case '\\n':\n+      return errno = 116;\n+    }\n+  /* The switch statement that was here\n+     didn't cut it:  It broke down for targets\n+     where sizeof(char) == sizeof(short). */\n+  if (len == sizeof (char))\n+    *(char *) n = (char) lv;\n+  else if (len == sizeof (short))\n+    *(short *) n = (short) lv;\n+  else\n+    *n = lv;\n+  while (w-- > 0)\n+    {\n+      GET (ch);\n+      if (ch == ',' || ch == '\\n')\n+\tbreak;\n+    }\n+  return 0;\n }\n \n- static int\n-rd_F(ufloat *p, int w, int d, ftnlen len)\n+static int\n+rd_F (ufloat * p, int w, int d, ftnlen len)\n {\n-\tchar s[FMAX+EXPMAXDIGS+4];\n-\tregister int ch;\n-\tregister char *sp, *spe, *sp1;\n-\tdouble x;\n-\tint scale1, se;\n-\tlong e, exp;\n+  char s[FMAX + EXPMAXDIGS + 4];\n+  register int ch;\n+  register char *sp, *spe, *sp1;\n+  double x;\n+  int scale1, se;\n+  long e, exp;\n \n-\tsp1 = sp = s;\n-\tspe = sp + FMAX;\n-\texp = -d;\n-\tx = 0.;\n+  sp1 = sp = s;\n+  spe = sp + FMAX;\n+  exp = -d;\n+  x = 0.;\n \n-\tdo {\n-\t\tGET(ch);\n-\t\tw--;\n-\t\t} while (ch == ' ' && w);\n-\tswitch(ch) {\n-\t\tcase '-': *sp++ = ch; sp1++; spe++;\n-\t\tcase '+':\n-\t\t\tif (!w) goto zero;\n-\t\t\t--w;\n-\t\t\tGET(ch);\n-\t\t}\n-\twhile(ch == ' ') {\n-blankdrop:\n-\t\tif (!w--) goto zero; GET(ch); }\n-\twhile(ch == '0')\n-\t\t{ if (!w--) goto zero; GET(ch); }\n-\tif (ch == ' ' && f__cblank)\n-\t\tgoto blankdrop;\n-\tscale1 = f__scale;\n-\twhile(isdigit(ch)) {\n-digloop1:\n-\t\tif (sp < spe) *sp++ = ch;\n-\t\telse ++exp;\n-digloop1e:\n-\t\tif (!w--) goto done;\n-\t\tGET(ch);\n-\t\t}\n-\tif (ch == ' ') {\n-\t\tif (f__cblank)\n-\t\t\t{ ch = '0'; goto digloop1; }\n-\t\tgoto digloop1e;\n-\t\t}\n-\tif (ch == '.') {\n-\t\texp += d;\n-\t\tif (!w--) goto done;\n-\t\tGET(ch);\n-\t\tif (sp == sp1) { /* no digits yet */\n-\t\t\twhile(ch == '0') {\n-skip01:\n-\t\t\t\t--exp;\n-skip0:\n-\t\t\t\tif (!w--) goto done;\n-\t\t\t\tGET(ch);\n-\t\t\t\t}\n-\t\t\tif (ch == ' ') {\n-\t\t\t\tif (f__cblank) goto skip01;\n-\t\t\t\tgoto skip0;\n-\t\t\t\t}\n-\t\t\t}\n-\t\twhile(isdigit(ch)) {\n-digloop2:\n-\t\t\tif (sp < spe)\n-\t\t\t\t{ *sp++ = ch; --exp; }\n-digloop2e:\n-\t\t\tif (!w--) goto done;\n-\t\t\tGET(ch);\n-\t\t\t}\n-\t\tif (ch == ' ') {\n-\t\t\tif (f__cblank)\n-\t\t\t\t{ ch = '0'; goto digloop2; }\n-\t\t\tgoto digloop2e;\n-\t\t\t}\n-\t\t}\n-\tswitch(ch) {\n-\t  default:\n-\t\tbreak;\n-\t  case '-': se = 1; goto signonly;\n-\t  case '+': se = 0; goto signonly;\n-\t  case 'e':\n-\t  case 'E':\n-\t  case 'd':\n-\t  case 'D':\n-\t\tif (!w--)\n-\t\t\tgoto bad;\n-\t\tGET(ch);\n-\t\twhile(ch == ' ') {\n-\t\t\tif (!w--)\n-\t\t\t\tgoto bad;\n-\t\t\tGET(ch);\n-\t\t\t}\n-\t\tse = 0;\n-\t  \tswitch(ch) {\n-\t\t  case '-': se = 1;\n-\t\t  case '+':\n-signonly:\n-\t\t\tif (!w--)\n-\t\t\t\tgoto bad;\n-\t\t\tGET(ch);\n-\t\t\t}\n-\t\twhile(ch == ' ') {\n-\t\t\tif (!w--)\n-\t\t\t\tgoto bad;\n-\t\t\tGET(ch);\n-\t\t\t}\n-\t\tif (!isdigit(ch))\n-\t\t\tgoto bad;\n+  do\n+    {\n+      GET (ch);\n+      w--;\n+    }\n+  while (ch == ' ' && w);\n+  switch (ch)\n+    {\n+    case '-':\n+      *sp++ = ch;\n+      sp1++;\n+      spe++;\n+    case '+':\n+      if (!w)\n+\tgoto zero;\n+      --w;\n+      GET (ch);\n+    }\n+  while (ch == ' ')\n+    {\n+    blankdrop:\n+      if (!w--)\n+\tgoto zero;\n+      GET (ch);\n+    }\n+  while (ch == '0')\n+    {\n+      if (!w--)\n+\tgoto zero;\n+      GET (ch);\n+    }\n+  if (ch == ' ' && f__cblank)\n+    goto blankdrop;\n+  scale1 = f__scale;\n+  while (isdigit (ch))\n+    {\n+    digloop1:\n+      if (sp < spe)\n+\t*sp++ = ch;\n+      else\n+\t++exp;\n+    digloop1e:\n+      if (!w--)\n+\tgoto done;\n+      GET (ch);\n+    }\n+  if (ch == ' ')\n+    {\n+      if (f__cblank)\n+\t{\n+\t  ch = '0';\n+\t  goto digloop1;\n+\t}\n+      goto digloop1e;\n+    }\n+  if (ch == '.')\n+    {\n+      exp += d;\n+      if (!w--)\n+\tgoto done;\n+      GET (ch);\n+      if (sp == sp1)\n+\t{\t\t\t/* no digits yet */\n+\t  while (ch == '0')\n+\t    {\n+\t    skip01:\n+\t      --exp;\n+\t    skip0:\n+\t      if (!w--)\n+\t\tgoto done;\n+\t      GET (ch);\n+\t    }\n+\t  if (ch == ' ')\n+\t    {\n+\t      if (f__cblank)\n+\t\tgoto skip01;\n+\t      goto skip0;\n+\t    }\n+\t}\n+      while (isdigit (ch))\n+\t{\n+\tdigloop2:\n+\t  if (sp < spe)\n+\t    {\n+\t      *sp++ = ch;\n+\t      --exp;\n+\t    }\n+\tdigloop2e:\n+\t  if (!w--)\n+\t    goto done;\n+\t  GET (ch);\n+\t}\n+      if (ch == ' ')\n+\t{\n+\t  if (f__cblank)\n+\t    {\n+\t      ch = '0';\n+\t      goto digloop2;\n+\t    }\n+\t  goto digloop2e;\n+\t}\n+    }\n+  switch (ch)\n+    {\n+    default:\n+      break;\n+    case '-':\n+      se = 1;\n+      goto signonly;\n+    case '+':\n+      se = 0;\n+      goto signonly;\n+    case 'e':\n+    case 'E':\n+    case 'd':\n+    case 'D':\n+      if (!w--)\n+\tgoto bad;\n+      GET (ch);\n+      while (ch == ' ')\n+\t{\n+\t  if (!w--)\n+\t    goto bad;\n+\t  GET (ch);\n+\t}\n+      se = 0;\n+      switch (ch)\n+\t{\n+\tcase '-':\n+\t  se = 1;\n+\tcase '+':\n+\tsignonly:\n+\t  if (!w--)\n+\t    goto bad;\n+\t  GET (ch);\n+\t}\n+      while (ch == ' ')\n+\t{\n+\t  if (!w--)\n+\t    goto bad;\n+\t  GET (ch);\n+\t}\n+      if (!isdigit (ch))\n+\tgoto bad;\n \n-\t\te = ch - '0';\n-\t\tfor(;;) {\n-\t\t\tif (!w--)\n-\t\t\t\t{ ch = '\\n'; break; }\n-\t\t\tGET(ch);\n-\t\t\tif (!isdigit(ch)) {\n-\t\t\t\tif (ch == ' ') {\n-\t\t\t\t\tif (f__cblank)\n-\t\t\t\t\t\tch = '0';\n-\t\t\t\t\telse continue;\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\te = 10*e + ch - '0';\n-\t\t\tif (e > EXPMAX && sp > sp1)\n-\t\t\t\tgoto bad;\n-\t\t\t}\n-\t\tif (se)\n-\t\t\texp -= e;\n-\t\telse\n-\t\t\texp += e;\n-\t\tscale1 = 0;\n+      e = ch - '0';\n+      for (;;)\n+\t{\n+\t  if (!w--)\n+\t    {\n+\t      ch = '\\n';\n+\t      break;\n+\t    }\n+\t  GET (ch);\n+\t  if (!isdigit (ch))\n+\t    {\n+\t      if (ch == ' ')\n+\t\t{\n+\t\t  if (f__cblank)\n+\t\t    ch = '0';\n+\t\t  else\n+\t\t    continue;\n \t\t}\n-\tswitch(ch) {\n-\t  case '\\n':\n-\t  case ',':\n+\t      else\n \t\tbreak;\n-\t  default:\n-bad:\n-\t\treturn (errno = 115);\n-\t\t}\n+\t    }\n+\t  e = 10 * e + ch - '0';\n+\t  if (e > EXPMAX && sp > sp1)\n+\t    goto bad;\n+\t}\n+      if (se)\n+\texp -= e;\n+      else\n+\texp += e;\n+      scale1 = 0;\n+    }\n+  switch (ch)\n+    {\n+    case '\\n':\n+    case ',':\n+      break;\n+    default:\n+    bad:\n+      return (errno = 115);\n+    }\n done:\n-\tif (sp > sp1) {\n-\t\twhile(*--sp == '0')\n-\t\t\t++exp;\n-\t\tif (exp -= scale1)\n-\t\t\tsprintf(sp+1, \"e%ld\", exp);\n-\t\telse\n-\t\t\tsp[1] = 0;\n-\t\tx = atof(s);\n-\t\t}\n+  if (sp > sp1)\n+    {\n+      while (*--sp == '0')\n+\t++exp;\n+      if (exp -= scale1)\n+\tsprintf (sp + 1, \"e%ld\", exp);\n+      else\n+\tsp[1] = 0;\n+      x = atof (s);\n+    }\n zero:\n-\tif (len == sizeof(real))\n-\t\tp->pf = x;\n-\telse\n-\t\tp->pd = x;\n-\treturn(0);\n-\t}\n+  if (len == sizeof (real))\n+    p->pf = x;\n+  else\n+    p->pd = x;\n+  return (0);\n+}\n \n \n- static int\n-rd_A(char *p, ftnlen len)\n-{\tint i,ch;\n-\tfor(i=0;i<len;i++)\n-\t{\tGET(ch);\n-\t\t*p++=VAL(ch);\n-\t}\n-\treturn(0);\n+static int\n+rd_A (char *p, ftnlen len)\n+{\n+  int i, ch;\n+  for (i = 0; i < len; i++)\n+    {\n+      GET (ch);\n+      *p++ = VAL (ch);\n+    }\n+  return (0);\n }\n- static int\n-rd_AW(char *p, int w, ftnlen len)\n-{\tint i,ch;\n-\tif(w>=len)\n-\t{\tfor(i=0;i<w-len;i++)\n-\t\t\tGET(ch);\n-\t\tfor(i=0;i<len;i++)\n-\t\t{\tGET(ch);\n-\t\t\t*p++=VAL(ch);\n-\t\t}\n-\t\treturn(0);\n-\t}\n-\tfor(i=0;i<w;i++)\n-\t{\tGET(ch);\n-\t\t*p++=VAL(ch);\n+static int\n+rd_AW (char *p, int w, ftnlen len)\n+{\n+  int i, ch;\n+  if (w >= len)\n+    {\n+      for (i = 0; i < w - len; i++)\n+\tGET (ch);\n+      for (i = 0; i < len; i++)\n+\t{\n+\t  GET (ch);\n+\t  *p++ = VAL (ch);\n \t}\n-\tfor(i=0;i<len-w;i++) *p++=' ';\n-\treturn(0);\n+      return (0);\n+    }\n+  for (i = 0; i < w; i++)\n+    {\n+      GET (ch);\n+      *p++ = VAL (ch);\n+    }\n+  for (i = 0; i < len - w; i++)\n+    *p++ = ' ';\n+  return (0);\n }\n- static int\n-rd_H(int n, char *s)\n-{\tint i,ch;\n-\tfor(i=0;i<n;i++)\n-\t\tif((ch=(*f__getn)())<0) return(ch);\n-\t\telse *s++ = ch=='\\n'?' ':ch;\n-\treturn(1);\n+static int\n+rd_H (int n, char *s)\n+{\n+  int i, ch;\n+  for (i = 0; i < n; i++)\n+    if ((ch = (*f__getn) ()) < 0)\n+      return (ch);\n+    else\n+      *s++ = ch == '\\n' ? ' ' : ch;\n+  return (1);\n }\n- static int\n-rd_POS(char *s)\n-{\tchar quote;\n-\tint ch;\n-\tquote= *s++;\n-\tfor(;*s;s++)\n-\t\tif(*s==quote && *(s+1)!=quote) break;\n-\t\telse if((ch=(*f__getn)())<0) return(ch);\n-\t\telse *s = ch=='\\n'?' ':ch;\n-\treturn(1);\n+static int\n+rd_POS (char *s)\n+{\n+  char quote;\n+  int ch;\n+  quote = *s++;\n+  for (; *s; s++)\n+    if (*s == quote && *(s + 1) != quote)\n+      break;\n+    else if ((ch = (*f__getn) ()) < 0)\n+      return (ch);\n+    else\n+      *s = ch == '\\n' ? ' ' : ch;\n+  return (1);\n }\n-rd_ed(struct syl *p, char *ptr, ftnlen len)\n-{\tint ch;\n-\tfor(;f__cursor>0;f__cursor--) if((ch=(*f__getn)())<0) return(ch);\n-\tif(f__cursor<0)\n-\t{\tif(f__recpos+f__cursor < 0) /*err(elist->cierr,110,\"fmt\")*/\n-\t\t\tf__cursor = -f__recpos;\t/* is this in the standard? */\n-\t\tif(f__external == 0) {\n-\t\t\textern char *f__icptr;\n-\t\t\tf__icptr += f__cursor;\n-\t\t}\n-\t\telse if(f__curunit && f__curunit->useek)\n-\t\t\tFSEEK(f__cf,(off_t)f__cursor,SEEK_CUR);\n-\t\telse\n-\t\t\terr(f__elist->cierr,106,\"fmt\");\n-\t\tf__recpos += f__cursor;\n-\t\tf__cursor=0;\n-\t}\n-\tswitch(p->op)\n+\n+rd_ed (struct syl * p, char *ptr, ftnlen len)\n+{\n+  int ch;\n+  for (; f__cursor > 0; f__cursor--)\n+    if ((ch = (*f__getn) ()) < 0)\n+      return (ch);\n+  if (f__cursor < 0)\n+    {\n+      if (f__recpos + f__cursor < 0)\t/*err(elist->cierr,110,\"fmt\") */\n+\tf__cursor = -f__recpos;\t/* is this in the standard? */\n+      if (f__external == 0)\n \t{\n-\tdefault: fprintf(stderr,\"rd_ed, unexpected code: %d\\n\", p->op);\n-\t\tsig_die(f__fmtbuf, 1);\n-\tcase IM:\n-\tcase I: ch = rd_I((Uint *)ptr,p->p1,len, 10);\n-\t\tbreak;\n+\t  extern char *f__icptr;\n+\t  f__icptr += f__cursor;\n+\t}\n+      else if (f__curunit && f__curunit->useek)\n+\tFSEEK (f__cf, (off_t) f__cursor, SEEK_CUR);\n+      else\n+\terr (f__elist->cierr, 106, \"fmt\");\n+      f__recpos += f__cursor;\n+      f__cursor = 0;\n+    }\n+  switch (p->op)\n+    {\n+    default:\n+      fprintf (stderr, \"rd_ed, unexpected code: %d\\n\", p->op);\n+      sig_die (f__fmtbuf, 1);\n+    case IM:\n+    case I:\n+      ch = rd_I ((Uint *) ptr, p->p1, len, 10);\n+      break;\n \n-\t\t/* O and OM don't work right for character, double, complex, */\n-\t\t/* or doublecomplex, and they differ from Fortran 90 in */\n-\t\t/* showing a minus sign for negative values. */\n+      /* O and OM don't work right for character, double, complex, */\n+      /* or doublecomplex, and they differ from Fortran 90 in */\n+      /* showing a minus sign for negative values. */\n \n-\tcase OM:\n-\tcase O: ch = rd_I((Uint *)ptr, p->p1, len, 8);\n-\t\tbreak;\n-\tcase L: ch = rd_L((ftnint *)ptr,p->p1,len);\n-\t\tbreak;\n-\tcase A:\tch = rd_A(ptr,len);\n-\t\tbreak;\n-\tcase AW:\n-\t\tch = rd_AW(ptr,p->p1,len);\n-\t\tbreak;\n-\tcase E: case EE:\n-\tcase D:\n-\tcase G:\n-\tcase GE:\n-\tcase F:\tch = rd_F((ufloat *)ptr,p->p1,p->p2.i[0],len);\n-\t\tbreak;\n+    case OM:\n+    case O:\n+      ch = rd_I ((Uint *) ptr, p->p1, len, 8);\n+      break;\n+    case L:\n+      ch = rd_L ((ftnint *) ptr, p->p1, len);\n+      break;\n+    case A:\n+      ch = rd_A (ptr, len);\n+      break;\n+    case AW:\n+      ch = rd_AW (ptr, p->p1, len);\n+      break;\n+    case E:\n+    case EE:\n+    case D:\n+    case G:\n+    case GE:\n+    case F:\n+      ch = rd_F ((ufloat *) ptr, p->p1, p->p2.i[0], len);\n+      break;\n \n-\t\t/* Z and ZM assume 8-bit bytes. */\n+      /* Z and ZM assume 8-bit bytes. */\n \n-\tcase ZM:\n-\tcase Z:\n-\t\tch = rd_Z((Uint *)ptr, p->p1, len);\n-\t\tbreak;\n-\t}\n-\tif(ch == 0) return(ch);\n-\telse if(ch == EOF) return(EOF);\n-\tif (f__cf)\n-\t\tclearerr(f__cf);\n-\treturn(errno);\n+    case ZM:\n+    case Z:\n+      ch = rd_Z ((Uint *) ptr, p->p1, len);\n+      break;\n+    }\n+  if (ch == 0)\n+    return (ch);\n+  else if (ch == EOF)\n+    return (EOF);\n+  if (f__cf)\n+    clearerr (f__cf);\n+  return (errno);\n }\n-rd_ned(struct syl *p)\n+\n+rd_ned (struct syl * p)\n {\n-\tswitch(p->op)\n-\t{\n-\tdefault: fprintf(stderr,\"rd_ned, unexpected code: %d\\n\", p->op);\n-\t\tsig_die(f__fmtbuf, 1);\n-\tcase APOS:\n-\t\treturn(rd_POS(p->p2.s));\n-\tcase H:\treturn(rd_H(p->p1,p->p2.s));\n-\tcase SLASH: return((*f__donewrec)());\n-\tcase TR:\n-\tcase X:\tf__cursor += p->p1;\n-\t\treturn(1);\n-\tcase T: f__cursor=p->p1-f__recpos - 1;\n-\t\treturn(1);\n-\tcase TL: f__cursor -= p->p1;\n-\t\tif(f__cursor < -f__recpos)\t/* TL1000, 1X */\n-\t\t\tf__cursor = -f__recpos;\n-\t\treturn(1);\n-\t}\n+  switch (p->op)\n+    {\n+    default:\n+      fprintf (stderr, \"rd_ned, unexpected code: %d\\n\", p->op);\n+      sig_die (f__fmtbuf, 1);\n+    case APOS:\n+      return (rd_POS (p->p2.s));\n+    case H:\n+      return (rd_H (p->p1, p->p2.s));\n+    case SLASH:\n+      return ((*f__donewrec) ());\n+    case TR:\n+    case X:\n+      f__cursor += p->p1;\n+      return (1);\n+    case T:\n+      f__cursor = p->p1 - f__recpos - 1;\n+      return (1);\n+    case TL:\n+      f__cursor -= p->p1;\n+      if (f__cursor < -f__recpos)\t/* TL1000, 1X */\n+\tf__cursor = -f__recpos;\n+      return (1);\n+    }\n }"}, {"sha": "d7a9b766192cc089221f4bf7753e9d481a358807", "filename": "libf2c/libI77/rewind.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frewind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frewind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Frewind.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,23 +1,25 @@\n #include \"config.h\"\n #include \"f2c.h\"\n #include \"fio.h\"\n-integer f_rew(alist *a)\n+integer\n+f_rew (alist * a)\n {\n-\tunit *b;\n-\tif (f__init & 2)\n-\t\tf__fatal (131, \"I/O recursion\");\n-\tif(a->aunit>=MXUNIT || a->aunit<0)\n-\t\terr(a->aerr,101,\"rewind\");\n-\tb = &f__units[a->aunit];\n-\tif(b->ufd == NULL || b->uwrt == 3)\n-\t\treturn(0);\n-\tif(!b->useek)\n-\t\terr(a->aerr,106,\"rewind\");\n-\tif(b->uwrt) {\n-\t\t(void) t_runc(a);\n-\t\tb->uwrt = 3;\n-\t\t}\n-\tFSEEK(b->ufd, 0, SEEK_SET);\n-\tb->uend=0;\n-\treturn(0);\n+  unit *b;\n+  if (f__init & 2)\n+    f__fatal (131, \"I/O recursion\");\n+  if (a->aunit >= MXUNIT || a->aunit < 0)\n+    err (a->aerr, 101, \"rewind\");\n+  b = &f__units[a->aunit];\n+  if (b->ufd == NULL || b->uwrt == 3)\n+    return (0);\n+  if (!b->useek)\n+    err (a->aerr, 106, \"rewind\");\n+  if (b->uwrt)\n+    {\n+      (void) t_runc (a);\n+      b->uwrt = 3;\n+    }\n+  FSEEK (b->ufd, 0, SEEK_SET);\n+  b->uend = 0;\n+  return (0);\n }"}, {"sha": "fb332a4bffe6082b825ef10b06219947f2242749", "filename": "libf2c/libI77/rsfe.c", "status": "modified", "additions": 80, "deletions": 64, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frsfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frsfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Frsfe.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -4,74 +4,90 @@\n #include \"fio.h\"\n #include \"fmt.h\"\n \n-xrd_SL(void)\n-{\tint ch;\n-\tif(!f__curunit->uend)\n-\t\twhile((ch=getc(f__cf))!='\\n')\n-\t\t\tif (ch == EOF) {\n-\t\t\t\tf__curunit->uend = 1;\n-\t\t\t\tbreak;\n-\t\t\t\t}\n-\tf__cursor=f__recpos=0;\n-\treturn(1);\n-}\n-x_getc(void)\n-{\tint ch;\n-\tif(f__curunit->uend) return(EOF);\n-\tch = getc(f__cf);\n-\tif(ch!=EOF && ch!='\\n')\n-\t{\tf__recpos++;\n-\t\treturn(ch);\n-\t}\n-\tif(ch=='\\n')\n-\t{\t(void) ungetc(ch,f__cf);\n-\t\treturn(ch);\n-\t}\n-\tif(f__curunit->uend || feof(f__cf))\n-\t{\terrno=0;\n-\t\tf__curunit->uend=1;\n-\t\treturn(-1);\n+xrd_SL (void)\n+{\n+  int ch;\n+  if (!f__curunit->uend)\n+    while ((ch = getc (f__cf)) != '\\n')\n+      if (ch == EOF)\n+\t{\n+\t  f__curunit->uend = 1;\n+\t  break;\n \t}\n-\treturn(-1);\n+  f__cursor = f__recpos = 0;\n+  return (1);\n }\n-x_endp(void)\n+\n+x_getc (void)\n {\n-\txrd_SL();\n-\treturn f__curunit->uend == 1 ? EOF : 0;\n+  int ch;\n+  if (f__curunit->uend)\n+    return (EOF);\n+  ch = getc (f__cf);\n+  if (ch != EOF && ch != '\\n')\n+    {\n+      f__recpos++;\n+      return (ch);\n+    }\n+  if (ch == '\\n')\n+    {\n+      (void) ungetc (ch, f__cf);\n+      return (ch);\n+    }\n+  if (f__curunit->uend || feof (f__cf))\n+    {\n+      errno = 0;\n+      f__curunit->uend = 1;\n+      return (-1);\n+    }\n+  return (-1);\n }\n-x_rev(void)\n+\n+x_endp (void)\n {\n-\t(void) xrd_SL();\n-\treturn(0);\n+  xrd_SL ();\n+  return f__curunit->uend == 1 ? EOF : 0;\n }\n-integer s_rsfe(cilist *a) /* start */\n-{\tint n;\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__reading=1;\n-\tf__sequential=1;\n-\tf__formatted=1;\n-\tf__external=1;\n-\tif(n=c_sfe(a)) return(n);\n-\tf__elist=a;\n-\tf__cursor=f__recpos=0;\n-\tf__scale=0;\n-\tf__fmtbuf=a->cifmt;\n-\tf__curunit= &f__units[a->ciunit];\n-\tf__cf=f__curunit->ufd;\n-\tif(pars_f(f__fmtbuf)<0) err(a->cierr,100,\"startio\");\n-\tf__getn= x_getc;\n-\tf__doed= rd_ed;\n-\tf__doned= rd_ned;\n-\tfmt_bg();\n-\tf__doend=x_endp;\n-\tf__donewrec=xrd_SL;\n-\tf__dorevert=x_rev;\n-\tf__cblank=f__curunit->ublnk;\n-\tf__cplus=0;\n-\tif(f__curunit->uwrt && f__nowreading(f__curunit))\n-\t\terr(a->cierr,errno,\"read start\");\n-\tif(f__curunit->uend)\n-\t\terr(f__elist->ciend,(EOF),\"read start\");\n-\treturn(0);\n+\n+x_rev (void)\n+{\n+  (void) xrd_SL ();\n+  return (0);\n+}\n+\n+integer\n+s_rsfe (cilist * a)\t\t/* start */\n+{\n+  int n;\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__reading = 1;\n+  f__sequential = 1;\n+  f__formatted = 1;\n+  f__external = 1;\n+  if (n = c_sfe (a))\n+    return (n);\n+  f__elist = a;\n+  f__cursor = f__recpos = 0;\n+  f__scale = 0;\n+  f__fmtbuf = a->cifmt;\n+  f__curunit = &f__units[a->ciunit];\n+  f__cf = f__curunit->ufd;\n+  if (pars_f (f__fmtbuf) < 0)\n+    err (a->cierr, 100, \"startio\");\n+  f__getn = x_getc;\n+  f__doed = rd_ed;\n+  f__doned = rd_ned;\n+  fmt_bg ();\n+  f__doend = x_endp;\n+  f__donewrec = xrd_SL;\n+  f__dorevert = x_rev;\n+  f__cblank = f__curunit->ublnk;\n+  f__cplus = 0;\n+  if (f__curunit->uwrt && f__nowreading (f__curunit))\n+    err (a->cierr, errno, \"read start\");\n+  if (f__curunit->uend)\n+    err (f__elist->ciend, (EOF), \"read start\");\n+  return (0);\n }"}, {"sha": "a5cd8c5bf275b959df3dd40a038d0c4ba46c4acf", "filename": "libf2c/libI77/rsli.c", "status": "modified", "additions": 75, "deletions": 66, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frsli.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frsli.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Frsli.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,7 +1,7 @@\n #include \"f2c.h\"\n #include \"fio.h\"\n #include \"lio.h\"\n-#include \"fmt.h\" /* for f__doend */\n+#include \"fmt.h\"\t\t/* for f__doend */\n \n extern flag f__lquit;\n extern int f__lcount;\n@@ -10,80 +10,89 @@ extern char *f__icend;\n extern icilist *f__svic;\n extern int f__icnum, f__recpos;\n \n-static int i_getc(void)\n+static int\n+i_getc (void)\n {\n-\tif(f__recpos >= f__svic->icirlen) {\n-\t\tif (f__recpos++ == f__svic->icirlen)\n-\t\t\treturn '\\n';\n-\t\tz_rnew();\n-\t\t}\n-\tf__recpos++;\n-\tif(f__icptr >= f__icend)\n-\t\treturn EOF;\n-\treturn(*f__icptr++);\n-\t}\n+  if (f__recpos >= f__svic->icirlen)\n+    {\n+      if (f__recpos++ == f__svic->icirlen)\n+\treturn '\\n';\n+      z_rnew ();\n+    }\n+  f__recpos++;\n+  if (f__icptr >= f__icend)\n+    return EOF;\n+  return (*f__icptr++);\n+}\n \n- static\n-int i_ungetc(int ch, FILE *f)\n+static int\n+i_ungetc (int ch, FILE * f)\n {\n-\tif (--f__recpos == f__svic->icirlen)\n-\t\treturn '\\n';\n-\tif (f__recpos < -1)\n-\t\terr(f__svic->icierr,110,\"recend\");\n-\t/* *--icptr == ch, and icptr may point to read-only memory */\n-\treturn *--f__icptr /* = ch */;\n-\t}\n+  if (--f__recpos == f__svic->icirlen)\n+    return '\\n';\n+  if (f__recpos < -1)\n+    err (f__svic->icierr, 110, \"recend\");\n+  /* *--icptr == ch, and icptr may point to read-only memory */\n+  return *--f__icptr /* = ch */ ;\n+}\n \n- static void\n-c_lir(icilist *a)\n+static void\n+c_lir (icilist * a)\n {\n-\textern int l_eof;\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__reading = 1;\n-\tf__external = 0;\n-\tf__formatted = 1;\n-\tf__svic = a;\n-\tL_len = a->icirlen;\n-\tf__recpos = -1;\n-\tf__icnum = f__recpos = 0;\n-\tf__cursor = 0;\n-\tl_getc = i_getc;\n-\tl_ungetc = i_ungetc;\n-\tl_eof = 0;\n-\tf__icptr = a->iciunit;\n-\tf__icend = f__icptr + a->icirlen*a->icirnum;\n-\tf__cf = 0;\n-\tf__curunit = 0;\n-\tf__elist = (cilist *)a;\n-\t}\n+  extern int l_eof;\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__reading = 1;\n+  f__external = 0;\n+  f__formatted = 1;\n+  f__svic = a;\n+  L_len = a->icirlen;\n+  f__recpos = -1;\n+  f__icnum = f__recpos = 0;\n+  f__cursor = 0;\n+  l_getc = i_getc;\n+  l_ungetc = i_ungetc;\n+  l_eof = 0;\n+  f__icptr = a->iciunit;\n+  f__icend = f__icptr + a->icirlen * a->icirnum;\n+  f__cf = 0;\n+  f__curunit = 0;\n+  f__elist = (cilist *) a;\n+}\n \n \n-integer s_rsli(icilist *a)\n+integer\n+s_rsli (icilist * a)\n {\n-\tf__lioproc = l_read;\n-\tf__lquit = 0;\n-\tf__lcount = 0;\n-\tc_lir(a);\n-\tf__doend = 0;\n-\treturn(0);\n-\t}\n+  f__lioproc = l_read;\n+  f__lquit = 0;\n+  f__lcount = 0;\n+  c_lir (a);\n+  f__doend = 0;\n+  return (0);\n+}\n \n-integer e_rsli(void)\n-{ f__init = 1; return 0; }\n+integer\n+e_rsli (void)\n+{\n+  f__init = 1;\n+  return 0;\n+}\n \n-extern int x_rsne(cilist*);\n+extern int x_rsne (cilist *);\n \n-integer s_rsni(icilist *a)\n+integer\n+s_rsni (icilist * a)\n {\n-\textern int nml_read;\n-\tinteger rv;\n-\tcilist ca;\n-\tca.ciend = a->iciend;\n-\tca.cierr = a->icierr;\n-\tca.cifmt = a->icifmt;\n-\tc_lir(a);\n-\trv = x_rsne(&ca);\n-\tnml_read = 0;\n-\treturn rv;\n-\t}\n+  extern int nml_read;\n+  integer rv;\n+  cilist ca;\n+  ca.ciend = a->iciend;\n+  ca.cierr = a->icierr;\n+  ca.cifmt = a->icifmt;\n+  c_lir (a);\n+  rv = x_rsne (&ca);\n+  nml_read = 0;\n+  return rv;\n+}"}, {"sha": "9dea2792bf10d153acf9ce45f81db126c2b2a903", "filename": "libf2c/libI77/rsne.c", "status": "modified", "additions": 527, "deletions": 492, "changes": 1019, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frsne.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Frsne.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Frsne.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -3,41 +3,44 @@\n #include \"fio.h\"\n #include \"lio.h\"\n \n-#define MAX_NL_CACHE 3\t/* maximum number of namelist hash tables to cache */\n-#define MAXDIM 20\t/* maximum number of subscripts */\n+#define MAX_NL_CACHE 3\t\t/* maximum number of namelist hash tables to cache */\n+#define MAXDIM 20\t\t/* maximum number of subscripts */\n \n- struct dimen {\n-\tftnlen extent;\n-\tftnlen curval;\n-\tftnlen delta;\n-\tftnlen stride;\n-\t};\n- typedef struct dimen dimen;\n+struct dimen\n+{\n+  ftnlen extent;\n+  ftnlen curval;\n+  ftnlen delta;\n+  ftnlen stride;\n+};\n+typedef struct dimen dimen;\n \n- struct hashentry {\n-\tstruct hashentry *next;\n-\tchar *name;\n-\tVardesc *vd;\n-\t};\n- typedef struct hashentry hashentry;\n+struct hashentry\n+{\n+  struct hashentry *next;\n+  char *name;\n+  Vardesc *vd;\n+};\n+typedef struct hashentry hashentry;\n \n- struct hashtab {\n-\tstruct hashtab *next;\n-\tNamelist *nl;\n-\tint htsize;\n-\thashentry *tab[1];\n-\t};\n- typedef struct hashtab hashtab;\n+struct hashtab\n+{\n+  struct hashtab *next;\n+  Namelist *nl;\n+  int htsize;\n+  hashentry *tab[1];\n+};\n+typedef struct hashtab hashtab;\n \n- static hashtab *nl_cache;\n- static int n_nlcache;\n- static hashentry **zot;\n- static int colonseen;\n- extern ftnlen f__typesize[];\n+static hashtab *nl_cache;\n+static int n_nlcache;\n+static hashentry **zot;\n+static int colonseen;\n+extern ftnlen f__typesize[];\n \n- extern flag f__lquit;\n- extern int f__lcount, nml_read;\n- extern t_getc(void);\n+extern flag f__lquit;\n+extern int f__lcount, nml_read;\n+extern t_getc (void);\n \n #undef abs\n #undef min\n@@ -46,516 +49,548 @@\n #include <string.h>\n \n #ifdef ungetc\n- static int\n-un_getc(int x, FILE *f__cf)\n-{ return ungetc(x,f__cf); }\n+static int\n+un_getc (int x, FILE * f__cf)\n+{\n+  return ungetc (x, f__cf);\n+}\n #else\n #define un_getc ungetc\n-extern int ungetc(int, FILE*);\t/* for systems with a buggy stdio.h */\n+extern int ungetc (int, FILE *);\t/* for systems with a buggy stdio.h */\n #endif\n \n- static Vardesc *\n-hash(hashtab *ht, register char *s)\n+static Vardesc *\n+hash (hashtab * ht, register char *s)\n {\n-\tregister int c, x;\n-\tregister hashentry *h;\n-\tchar *s0 = s;\n+  register int c, x;\n+  register hashentry *h;\n+  char *s0 = s;\n \n-\tfor(x = 0; c = *s++; x = x & 0x4000 ? ((x << 1) & 0x7fff) + 1 : x << 1)\n-\t\tx += c;\n-\tfor(h = *(zot = ht->tab + x % ht->htsize); h; h = h->next)\n-\t\tif (!strcmp(s0, h->name))\n-\t\t\treturn h->vd;\n-\treturn 0;\n-\t}\n+  for (x = 0; c = *s++; x = x & 0x4000 ? ((x << 1) & 0x7fff) + 1 : x << 1)\n+    x += c;\n+  for (h = *(zot = ht->tab + x % ht->htsize); h; h = h->next)\n+    if (!strcmp (s0, h->name))\n+      return h->vd;\n+  return 0;\n+}\n \n- hashtab *\n-mk_hashtab(Namelist *nl)\n+hashtab *\n+mk_hashtab (Namelist * nl)\n {\n-\tint nht, nv;\n-\thashtab *ht;\n-\tVardesc *v, **vd, **vde;\n-\thashentry *he;\n+  int nht, nv;\n+  hashtab *ht;\n+  Vardesc *v, **vd, **vde;\n+  hashentry *he;\n \n-\thashtab **x, **x0, *y;\n-\tfor(x = &nl_cache; y = *x; x0 = x, x = &y->next)\n-\t\tif (nl == y->nl)\n-\t\t\treturn y;\n-\tif (n_nlcache >= MAX_NL_CACHE) {\n-\t\t/* discard least recently used namelist hash table */\n-\t\ty = *x0;\n-\t\tfree((char *)y->next);\n-\t\ty->next = 0;\n-\t\t}\n-\telse\n-\t\tn_nlcache++;\n-\tnv = nl->nvars;\n-\tif (nv >= 0x4000)\n-\t\tnht = 0x7fff;\n-\telse {\n-\t\tfor(nht = 1; nht < nv; nht <<= 1);\n-\t\tnht += nht - 1;\n-\t\t}\n-\tht = (hashtab *)malloc(sizeof(hashtab) + (nht-1)*sizeof(hashentry *)\n-\t\t\t\t+ nv*sizeof(hashentry));\n-\tif (!ht)\n-\t\treturn 0;\n-\the = (hashentry *)&ht->tab[nht];\n-\tht->nl = nl;\n-\tht->htsize = nht;\n-\tht->next = nl_cache;\n-\tnl_cache = ht;\n-\tmemset((char *)ht->tab, 0, nht*sizeof(hashentry *));\n-\tvd = nl->vars;\n-\tvde = vd + nv;\n-\twhile(vd < vde) {\n-\t\tv = *vd++;\n-\t\tif (!hash(ht, v->name)) {\n-\t\t\the->next = *zot;\n-\t\t\t*zot = he;\n-\t\t\the->name = v->name;\n-\t\t\the->vd = v;\n-\t\t\the++;\n-\t\t\t}\n-\t\t}\n-\treturn ht;\n+  hashtab **x, **x0, *y;\n+  for (x = &nl_cache; y = *x; x0 = x, x = &y->next)\n+    if (nl == y->nl)\n+      return y;\n+  if (n_nlcache >= MAX_NL_CACHE)\n+    {\n+      /* discard least recently used namelist hash table */\n+      y = *x0;\n+      free ((char *) y->next);\n+      y->next = 0;\n+    }\n+  else\n+    n_nlcache++;\n+  nv = nl->nvars;\n+  if (nv >= 0x4000)\n+    nht = 0x7fff;\n+  else\n+    {\n+      for (nht = 1; nht < nv; nht <<= 1);\n+      nht += nht - 1;\n+    }\n+  ht = (hashtab *) malloc (sizeof (hashtab) + (nht - 1) * sizeof (hashentry *)\n+\t\t\t   + nv * sizeof (hashentry));\n+  if (!ht)\n+    return 0;\n+  he = (hashentry *) & ht->tab[nht];\n+  ht->nl = nl;\n+  ht->htsize = nht;\n+  ht->next = nl_cache;\n+  nl_cache = ht;\n+  memset ((char *) ht->tab, 0, nht * sizeof (hashentry *));\n+  vd = nl->vars;\n+  vde = vd + nv;\n+  while (vd < vde)\n+    {\n+      v = *vd++;\n+      if (!hash (ht, v->name))\n+\t{\n+\t  he->next = *zot;\n+\t  *zot = he;\n+\t  he->name = v->name;\n+\t  he->vd = v;\n+\t  he++;\n \t}\n+    }\n+  return ht;\n+}\n \n static char Alpha[256], Alphanum[256];\n \n static void\n-nl_init(void) {\n-\tregister char *s;\n-\tregister int c;\n+nl_init (void)\n+{\n+  register char *s;\n+  register int c;\n \n-\tfor(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; c = *s++; )\n-\t\tAlpha[c]\n-\t\t= Alphanum[c]\n-\t\t= Alpha[c + 'a' - 'A']\n-\t\t= Alphanum[c + 'a' - 'A']\n-\t\t= c;\n-\tfor(s = \"0123456789_\"; c = *s++; )\n-\t\tAlphanum[c] = c;\n-\t}\n+  for (s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; c = *s++;)\n+    Alpha[c]\n+      = Alphanum[c] = Alpha[c + 'a' - 'A'] = Alphanum[c + 'a' - 'A'] = c;\n+  for (s = \"0123456789_\"; c = *s++;)\n+    Alphanum[c] = c;\n+}\n \n #define GETC(x) (x=(*l_getc)())\n #define Ungetc(x,y) (*l_ungetc)(x,y)\n \n- static int\n-getname(register char *s, int slen)\n+static int\n+getname (register char *s, int slen)\n {\n-\tregister char *se = s + slen - 1;\n-\tregister int ch;\n+  register char *se = s + slen - 1;\n+  register int ch;\n \n-\tGETC(ch);\n-\tif (!(*s++ = Alpha[ch & 0xff])) {\n-\t\tif (ch != EOF)\n-\t\t\tch = 115;\n-\t\terrfl(f__elist->cierr, ch, \"namelist read\");\n-\t\t}\n-\twhile(*s = Alphanum[GETC(ch) & 0xff])\n-\t\tif (s < se)\n-\t\t\ts++;\n-\tif (ch == EOF)\n-\t\terr(f__elist->cierr, EOF, \"namelist read\");\n-\tif (ch > ' ')\n-\t\tUngetc(ch,f__cf);\n-\treturn *s = 0;\n-\t}\n+  GETC (ch);\n+  if (!(*s++ = Alpha[ch & 0xff]))\n+    {\n+      if (ch != EOF)\n+\tch = 115;\n+      errfl (f__elist->cierr, ch, \"namelist read\");\n+    }\n+  while (*s = Alphanum[GETC (ch) & 0xff])\n+    if (s < se)\n+      s++;\n+  if (ch == EOF)\n+    err (f__elist->cierr, EOF, \"namelist read\");\n+  if (ch > ' ')\n+    Ungetc (ch, f__cf);\n+  return *s = 0;\n+}\n \n- static int\n-getnum(int *chp, ftnlen *val)\n+static int\n+getnum (int *chp, ftnlen * val)\n {\n-\tregister int ch, sign;\n-\tregister ftnlen x;\n+  register int ch, sign;\n+  register ftnlen x;\n \n-\twhile(GETC(ch) <= ' ' && ch >= 0);\n-\tif (ch == '-') {\n-\t\tsign = 1;\n-\t\tGETC(ch);\n-\t\t}\n-\telse {\n-\t\tsign = 0;\n-\t\tif (ch == '+')\n-\t\t\tGETC(ch);\n-\t\t}\n-\tx = ch - '0';\n-\tif (x < 0 || x > 9)\n-\t\treturn 115;\n-\twhile(GETC(ch) >= '0' && ch <= '9')\n-\t\tx = 10*x + ch - '0';\n-\twhile(ch <= ' ' && ch >= 0)\n-\t\tGETC(ch);\n-\tif (ch == EOF)\n-\t\treturn EOF;\n-\t*val = sign ? -x : x;\n-\t*chp = ch;\n-\treturn 0;\n-\t}\n+  while (GETC (ch) <= ' ' && ch >= 0);\n+  if (ch == '-')\n+    {\n+      sign = 1;\n+      GETC (ch);\n+    }\n+  else\n+    {\n+      sign = 0;\n+      if (ch == '+')\n+\tGETC (ch);\n+    }\n+  x = ch - '0';\n+  if (x < 0 || x > 9)\n+    return 115;\n+  while (GETC (ch) >= '0' && ch <= '9')\n+    x = 10 * x + ch - '0';\n+  while (ch <= ' ' && ch >= 0)\n+    GETC (ch);\n+  if (ch == EOF)\n+    return EOF;\n+  *val = sign ? -x : x;\n+  *chp = ch;\n+  return 0;\n+}\n \n- static int\n-getdimen(int *chp, dimen *d, ftnlen delta, ftnlen extent, ftnlen *x1)\n+static int\n+getdimen (int *chp, dimen * d, ftnlen delta, ftnlen extent, ftnlen * x1)\n {\n-\tregister int k;\n-\tftnlen x2, x3;\n+  register int k;\n+  ftnlen x2, x3;\n \n-\tif (k = getnum(chp, x1))\n-\t\treturn k;\n-\tx3 = 1;\n-\tif (*chp == ':') {\n-\t\tif (k = getnum(chp, &x2))\n-\t\t\treturn k;\n-\t\tx2 -= *x1;\n-\t\tif (*chp == ':') {\n-\t\t\tif (k = getnum(chp, &x3))\n-\t\t\t\treturn k;\n-\t\t\tif (!x3)\n-\t\t\t\treturn 123;\n-\t\t\tx2 /= x3;\n-\t\t\tcolonseen = 1;\n-\t\t\t}\n-\t\tif (x2 < 0 || x2 >= extent)\n-\t\t\treturn 123;\n-\t\td->extent = x2 + 1;\n-\t\t}\n-\telse\n-\t\td->extent = 1;\n-\td->curval = 0;\n-\td->delta = delta;\n-\td->stride = x3;\n-\treturn 0;\n+  if (k = getnum (chp, x1))\n+    return k;\n+  x3 = 1;\n+  if (*chp == ':')\n+    {\n+      if (k = getnum (chp, &x2))\n+\treturn k;\n+      x2 -= *x1;\n+      if (*chp == ':')\n+\t{\n+\t  if (k = getnum (chp, &x3))\n+\t    return k;\n+\t  if (!x3)\n+\t    return 123;\n+\t  x2 /= x3;\n+\t  colonseen = 1;\n \t}\n+      if (x2 < 0 || x2 >= extent)\n+\treturn 123;\n+      d->extent = x2 + 1;\n+    }\n+  else\n+    d->extent = 1;\n+  d->curval = 0;\n+  d->delta = delta;\n+  d->stride = x3;\n+  return 0;\n+}\n \n #ifndef No_Namelist_Questions\n static void\n-print_ne(cilist *a)\n+print_ne (cilist * a)\n {\n-\tflag intext = f__external;\n-\tint rpsave = f__recpos;\n-\tFILE *cfsave = f__cf;\n-\tunit *usave = f__curunit;\n-\tcilist t;\n-\tt = *a;\n-\tt.ciunit = 6;\n-\ts_wsne(&t);\n-\tfflush(f__cf);\n-\tf__external = intext;\n-\tf__reading = 1;\n-\tf__recpos = rpsave;\n-\tf__cf = cfsave;\n-\tf__curunit = usave;\n-\tf__elist = a;\n-\t}\n+  flag intext = f__external;\n+  int rpsave = f__recpos;\n+  FILE *cfsave = f__cf;\n+  unit *usave = f__curunit;\n+  cilist t;\n+  t = *a;\n+  t.ciunit = 6;\n+  s_wsne (&t);\n+  fflush (f__cf);\n+  f__external = intext;\n+  f__reading = 1;\n+  f__recpos = rpsave;\n+  f__cf = cfsave;\n+  f__curunit = usave;\n+  f__elist = a;\n+}\n #endif\n \n- static char where0[] = \"namelist read start \";\n+static char where0[] = \"namelist read start \";\n \n-x_rsne(cilist *a)\n+x_rsne (cilist * a)\n {\n-\tint ch, got1, k, n, nd, quote, readall;\n-\tNamelist *nl;\n-\tstatic char where[] = \"namelist read\";\n-\tchar buf[64];\n-\thashtab *ht;\n-\tVardesc *v;\n-\tdimen *dn, *dn0, *dn1;\n-\tftnlen *dims, *dims1;\n-\tftnlen b, b0, b1, ex, no, nomax, size, span;\n-\tftnint no1, type;\n-\tchar *vaddr;\n-\tlong iva, ivae;\n-\tdimen dimens[MAXDIM], substr;\n+  int ch, got1, k, n, nd, quote, readall;\n+  Namelist *nl;\n+  static char where[] = \"namelist read\";\n+  char buf[64];\n+  hashtab *ht;\n+  Vardesc *v;\n+  dimen *dn, *dn0, *dn1;\n+  ftnlen *dims, *dims1;\n+  ftnlen b, b0, b1, ex, no, nomax, size, span;\n+  ftnint no1, type;\n+  char *vaddr;\n+  long iva, ivae;\n+  dimen dimens[MAXDIM], substr;\n \n-\tif (!Alpha['a'])\n-\t\tnl_init();\n-\tf__reading=1;\n-\tf__formatted=1;\n-\tgot1 = 0;\n- top:\n-\tfor(;;) switch(GETC(ch)) {\n-\t\tcase EOF:\n- eof:\n-\t\t\terr(a->ciend,(EOF),where0);\n-\t\tcase '&':\n-\t\tcase '$':\n-\t\t\tgoto have_amp;\n+  if (!Alpha['a'])\n+    nl_init ();\n+  f__reading = 1;\n+  f__formatted = 1;\n+  got1 = 0;\n+top:\n+  for (;;)\n+    switch (GETC (ch))\n+      {\n+      case EOF:\n+      eof:\n+\terr (a->ciend, (EOF), where0);\n+      case '&':\n+      case '$':\n+\tgoto have_amp;\n #ifndef No_Namelist_Questions\n-\t\tcase '?':\n-\t\t\tprint_ne(a);\n-\t\t\tcontinue;\n+      case '?':\n+\tprint_ne (a);\n+\tcontinue;\n #endif\n-\t\tdefault:\n-\t\t\tif (ch <= ' ' && ch >= 0)\n-\t\t\t\tcontinue;\n+      default:\n+\tif (ch <= ' ' && ch >= 0)\n+\t  continue;\n #ifndef No_Namelist_Comments\n-\t\t\twhile(GETC(ch) != '\\n')\n-\t\t\t\tif (ch == EOF)\n-\t\t\t\t\tgoto eof;\n+\twhile (GETC (ch) != '\\n')\n+\t  if (ch == EOF)\n+\t    goto eof;\n #else\n-\t\t\terrfl(a->cierr, 115, where0);\n+\terrfl (a->cierr, 115, where0);\n #endif\n-\t\t}\n- have_amp:\n-\tif (ch = getname(buf,sizeof(buf)))\n-\t\treturn ch;\n-\tnl = (Namelist *)a->cifmt;\n-\tif (strcmp(buf, nl->name))\n+      }\n+have_amp:\n+  if (ch = getname (buf, sizeof (buf)))\n+    return ch;\n+  nl = (Namelist *) a->cifmt;\n+  if (strcmp (buf, nl->name))\n #ifdef No_Bad_Namelist_Skip\n-\t\terrfl(a->cierr, 118, where0);\n+    errfl (a->cierr, 118, where0);\n #else\n+    {\n+      fprintf (stderr,\n+\t       \"Skipping namelist \\\"%s\\\": seeking namelist \\\"%s\\\".\\n\",\n+\t       buf, nl->name);\n+      fflush (stderr);\n+      for (;;)\n+\tswitch (GETC (ch))\n+\t  {\n+\t  case EOF:\n+\t    err (a->ciend, EOF, where0);\n+\t  case '/':\n+\t  case '&':\n+\t  case '$':\n+\t    if (f__external)\n+\t      e_rsle ();\n+\t    else\n+\t      z_rnew ();\n+\t    goto top;\n+\t  case '\"':\n+\t  case '\\'':\n+\t    quote = ch;\n+\t  more_quoted:\n+\t    while (GETC (ch) != quote)\n+\t      if (ch == EOF)\n+\t\terr (a->ciend, EOF, where0);\n+\t    if (GETC (ch) == quote)\n+\t      goto more_quoted;\n+\t    Ungetc (ch, f__cf);\n+\t  default:\n+\t    continue;\n+\t  }\n+    }\n+#endif\n+  ht = mk_hashtab (nl);\n+  if (!ht)\n+    errfl (f__elist->cierr, 113, where0);\n+  for (;;)\n+    {\n+      for (;;)\n+\tswitch (GETC (ch))\n+\t  {\n+\t  case EOF:\n+\t    if (got1)\n+\t      return 0;\n+\t    err (a->ciend, EOF, where0);\n+\t  case '/':\n+\t  case '$':\n+\t  case '&':\n+\t    return 0;\n+\t  default:\n+\t    if (ch <= ' ' && ch >= 0 || ch == ',')\n+\t      continue;\n+\t    Ungetc (ch, f__cf);\n+\t    if (ch = getname (buf, sizeof (buf)))\n+\t      return ch;\n+\t    goto havename;\n+\t  }\n+    havename:\n+      v = hash (ht, buf);\n+      if (!v)\n+\terrfl (a->cierr, 119, where);\n+      while (GETC (ch) <= ' ' && ch >= 0);\n+      vaddr = v->addr;\n+      type = v->type;\n+      if (type < 0)\n+\t{\n+\t  size = -type;\n+\t  type = TYCHAR;\n+\t}\n+      else\n+\tsize = f__typesize[type];\n+      ivae = size;\n+      iva = readall = 0;\n+      if (ch == '(' /*) */ )\n \t{\n-\t\tfprintf(stderr,\n-\t\t\t\"Skipping namelist \\\"%s\\\": seeking namelist \\\"%s\\\".\\n\",\n-\t\t\tbuf, nl->name);\n-\t\tfflush(stderr);\n-\t\tfor(;;) switch(GETC(ch)) {\n-\t\t\tcase EOF:\n-\t\t\t\terr(a->ciend, EOF, where0);\n-\t\t\tcase '/':\n-\t\t\tcase '&':\n-\t\t\tcase '$':\n-\t\t\t\tif (f__external)\n-\t\t\t\t\te_rsle();\n-\t\t\t\telse\n-\t\t\t\t\tz_rnew();\n-\t\t\t\tgoto top;\n-\t\t\tcase '\"':\n-\t\t\tcase '\\'':\n-\t\t\t\tquote = ch;\n- more_quoted:\n-\t\t\t\twhile(GETC(ch) != quote)\n-\t\t\t\t\tif (ch == EOF)\n-\t\t\t\t\t\terr(a->ciend, EOF, where0);\n-\t\t\t\tif (GETC(ch) == quote)\n-\t\t\t\t\tgoto more_quoted;\n-\t\t\t\tUngetc(ch,f__cf);\n-\t\t\tdefault:\n-\t\t\t\tcontinue;\n-\t\t\t}\n+\t  dn = dimens;\n+\t  if (!(dims = v->dims))\n+\t    {\n+\t      if (type != TYCHAR)\n+\t\terrfl (a->cierr, 122, where);\n+\t      if (k = getdimen (&ch, dn, (ftnlen) size, (ftnlen) size, &b))\n+\t\terrfl (a->cierr, k, where);\n+\t      if (ch != ')')\n+\t\terrfl (a->cierr, 115, where);\n+\t      b1 = dn->extent;\n+\t      if (--b < 0 || b + b1 > size)\n+\t\treturn 124;\n+\t      iva += b;\n+\t      size = b1;\n+\t      while (GETC (ch) <= ' ' && ch >= 0);\n+\t      goto scalar;\n+\t    }\n+\t  nd = (int) dims[0];\n+\t  nomax = span = dims[1];\n+\t  ivae = iva + size * nomax;\n+\t  colonseen = 0;\n+\t  if (k = getdimen (&ch, dn, size, nomax, &b))\n+\t    errfl (a->cierr, k, where);\n+\t  no = dn->extent;\n+\t  b0 = dims[2];\n+\t  dims1 = dims += 3;\n+\t  ex = 1;\n+\t  for (n = 1; n++ < nd; dims++)\n+\t    {\n+\t      if (ch != ',')\n+\t\terrfl (a->cierr, 115, where);\n+\t      dn1 = dn + 1;\n+\t      span /= *dims;\n+\t      if (k = getdimen (&ch, dn1, dn->delta ** dims, span, &b1))\n+\t\terrfl (a->cierr, k, where);\n+\t      ex *= *dims;\n+\t      b += b1 * ex;\n+\t      no *= dn1->extent;\n+\t      dn = dn1;\n+\t    }\n+\t  if (ch != ')')\n+\t    errfl (a->cierr, 115, where);\n+\t  readall = 1 - colonseen;\n+\t  b -= b0;\n+\t  if (b < 0 || b >= nomax)\n+\t    errfl (a->cierr, 125, where);\n+\t  iva += size * b;\n+\t  dims = dims1;\n+\t  while (GETC (ch) <= ' ' && ch >= 0);\n+\t  no1 = 1;\n+\t  dn0 = dimens;\n+\t  if (type == TYCHAR && ch == '(' /*) */ )\n+\t    {\n+\t      if (k = getdimen (&ch, &substr, size, size, &b))\n+\t\terrfl (a->cierr, k, where);\n+\t      if (ch != ')')\n+\t\terrfl (a->cierr, 115, where);\n+\t      b1 = substr.extent;\n+\t      if (--b < 0 || b + b1 > size)\n+\t\treturn 124;\n+\t      iva += b;\n+\t      b0 = size;\n+\t      size = b1;\n+\t      while (GETC (ch) <= ' ' && ch >= 0);\n+\t      if (b1 < b0)\n+\t\tgoto delta_adj;\n+\t    }\n+\t  if (readall)\n+\t    goto delta_adj;\n+\t  for (; dn0 < dn; dn0++)\n+\t    {\n+\t      if (dn0->extent != *dims++ || dn0->stride != 1)\n+\t\tbreak;\n+\t      no1 *= dn0->extent;\n+\t    }\n+\t  if (dn0 == dimens && dimens[0].stride == 1)\n+\t    {\n+\t      no1 = dimens[0].extent;\n+\t      dn0++;\n+\t    }\n+\tdelta_adj:\n+\t  ex = 0;\n+\t  for (dn1 = dn0; dn1 <= dn; dn1++)\n+\t    ex += (dn1->extent - 1) * (dn1->delta *= dn1->stride);\n+\t  for (dn1 = dn; dn1 > dn0; dn1--)\n+\t    {\n+\t      ex -= (dn1->extent - 1) * dn1->delta;\n+\t      dn1->delta -= ex;\n+\t    }\n+\t}\n+      else if (dims = v->dims)\n+\t{\n+\t  no = no1 = dims[1];\n+\t  ivae = iva + no * size;\n+\t}\n+      else\n+      scalar:\n+\tno = no1 = 1;\n+      if (ch != '=')\n+\terrfl (a->cierr, 115, where);\n+      got1 = nml_read = 1;\n+      f__lcount = 0;\n+    readloop:\n+      for (;;)\n+\t{\n+\t  if (iva >= ivae || iva < 0)\n+\t    {\n+\t      f__lquit = 1;\n+\t      goto mustend;\n+\t    }\n+\t  else if (iva + no1 * size > ivae)\n+\t    no1 = (ivae - iva) / size;\n+\t  f__lquit = 0;\n+\t  if (k = l_read (&no1, vaddr + iva, size, type))\n+\t    return k;\n+\t  if (f__lquit == 1)\n+\t    return 0;\n+\t  if (readall)\n+\t    {\n+\t      iva += dn0->delta;\n+\t      if (f__lcount > 0)\n+\t\t{\n+\t\t  no1 = (ivae - iva) / size;\n+\t\t  if (no1 > f__lcount)\n+\t\t    no1 = f__lcount;\n+\t\t  if (k = l_read (&no1, vaddr + iva, size, type))\n+\t\t    return k;\n+\t\t  iva += no1 * dn0->delta;\n \t\t}\n-#endif\n-\tht = mk_hashtab(nl);\n-\tif (!ht)\n-\t\terrfl(f__elist->cierr, 113, where0);\n-\tfor(;;) {\n-\t\tfor(;;) switch(GETC(ch)) {\n-\t\t\tcase EOF:\n-\t\t\t\tif (got1)\n-\t\t\t\t\treturn 0;\n-\t\t\t\terr(a->ciend, EOF, where0);\n-\t\t\tcase '/':\n-\t\t\tcase '$':\n-\t\t\tcase '&':\n-\t\t\t\treturn 0;\n-\t\t\tdefault:\n-\t\t\t\tif (ch <= ' ' && ch >= 0 || ch == ',')\n-\t\t\t\t\tcontinue;\n-\t\t\t\tUngetc(ch,f__cf);\n-\t\t\t\tif (ch = getname(buf,sizeof(buf)))\n-\t\t\t\t\treturn ch;\n-\t\t\t\tgoto havename;\n-\t\t\t}\n- havename:\n-\t\tv = hash(ht,buf);\n-\t\tif (!v)\n-\t\t\terrfl(a->cierr, 119, where);\n-\t\twhile(GETC(ch) <= ' ' && ch >= 0);\n-\t\tvaddr = v->addr;\n-\t\ttype = v->type;\n-\t\tif (type < 0) {\n-\t\t\tsize = -type;\n-\t\t\ttype = TYCHAR;\n-\t\t\t}\n-\t\telse\n-\t\t\tsize = f__typesize[type];\n-\t\tivae = size;\n-\t\tiva = readall = 0;\n-\t\tif (ch == '(' /*)*/ ) {\n-\t\t\tdn = dimens;\n-\t\t\tif (!(dims = v->dims)) {\n-\t\t\t\tif (type != TYCHAR)\n-\t\t\t\t\terrfl(a->cierr, 122, where);\n-\t\t\t\tif (k = getdimen(&ch, dn, (ftnlen)size,\n-\t\t\t\t\t\t(ftnlen)size, &b))\n-\t\t\t\t\terrfl(a->cierr, k, where);\n-\t\t\t\tif (ch != ')')\n-\t\t\t\t\terrfl(a->cierr, 115, where);\n-\t\t\t\tb1 = dn->extent;\n-\t\t\t\tif (--b < 0 || b + b1 > size)\n-\t\t\t\t\treturn 124;\n-\t\t\t\tiva += b;\n-\t\t\t\tsize = b1;\n-\t\t\t\twhile(GETC(ch) <= ' ' && ch >= 0);\n-\t\t\t\tgoto scalar;\n-\t\t\t\t}\n-\t\t\tnd = (int)dims[0];\n-\t\t\tnomax = span = dims[1];\n-\t\t\tivae = iva + size*nomax;\n-\t\t\tcolonseen = 0;\n-\t\t\tif (k = getdimen(&ch, dn, size, nomax, &b))\n-\t\t\t\terrfl(a->cierr, k, where);\n-\t\t\tno = dn->extent;\n-\t\t\tb0 = dims[2];\n-\t\t\tdims1 = dims += 3;\n-\t\t\tex = 1;\n-\t\t\tfor(n = 1; n++ < nd; dims++) {\n-\t\t\t\tif (ch != ',')\n-\t\t\t\t\terrfl(a->cierr, 115, where);\n-\t\t\t\tdn1 = dn + 1;\n-\t\t\t\tspan /= *dims;\n-\t\t\t\tif (k = getdimen(&ch, dn1, dn->delta**dims,\n-\t\t\t\t\t\tspan, &b1))\n-\t\t\t\t\terrfl(a->cierr, k, where);\n-\t\t\t\tex *= *dims;\n-\t\t\t\tb += b1*ex;\n-\t\t\t\tno *= dn1->extent;\n-\t\t\t\tdn = dn1;\n-\t\t\t\t}\n-\t\t\tif (ch != ')')\n-\t\t\t\terrfl(a->cierr, 115, where);\n-\t\t\treadall = 1 - colonseen;\n-\t\t\tb -= b0;\n-\t\t\tif (b < 0 || b >= nomax)\n-\t\t\t\terrfl(a->cierr, 125, where);\n-\t\t\tiva += size * b;\n-\t\t\tdims = dims1;\n-\t\t\twhile(GETC(ch) <= ' ' && ch >= 0);\n-\t\t\tno1 = 1;\n-\t\t\tdn0 = dimens;\n-\t\t\tif (type == TYCHAR && ch == '(' /*)*/) {\n-\t\t\t\tif (k = getdimen(&ch, &substr, size, size, &b))\n-\t\t\t\t\terrfl(a->cierr, k, where);\n-\t\t\t\tif (ch != ')')\n-\t\t\t\t\terrfl(a->cierr, 115, where);\n-\t\t\t\tb1 = substr.extent;\n-\t\t\t\tif (--b < 0 || b + b1 > size)\n-\t\t\t\t\treturn 124;\n-\t\t\t\tiva += b;\n-\t\t\t\tb0 = size;\n-\t\t\t\tsize = b1;\n-\t\t\t\twhile(GETC(ch) <= ' ' && ch >= 0);\n-\t\t\t\tif (b1 < b0)\n-\t\t\t\t\tgoto delta_adj;\n-\t\t\t\t}\n-\t\t\tif (readall)\n-\t\t\t\tgoto delta_adj;\n-\t\t\tfor(; dn0 < dn; dn0++) {\n-\t\t\t\tif (dn0->extent != *dims++ || dn0->stride != 1)\n-\t\t\t\t\tbreak;\n-\t\t\t\tno1 *= dn0->extent;\n-\t\t\t\t}\n-\t\t\tif (dn0 == dimens && dimens[0].stride == 1) {\n-\t\t\t\tno1 = dimens[0].extent;\n-\t\t\t\tdn0++;\n-\t\t\t\t}\n- delta_adj:\n-\t\t\tex = 0;\n-\t\t\tfor(dn1 = dn0; dn1 <= dn; dn1++)\n-\t\t\t\tex += (dn1->extent-1)\n-\t\t\t\t\t* (dn1->delta *= dn1->stride);\n-\t\t\tfor(dn1 = dn; dn1 > dn0; dn1--) {\n-\t\t\t\tex -= (dn1->extent - 1) * dn1->delta;\n-\t\t\t\tdn1->delta -= ex;\n-\t\t\t\t}\n-\t\t\t}\n-\t\telse if (dims = v->dims) {\n-\t\t\tno = no1 = dims[1];\n-\t\t\tivae = iva + no*size;\n-\t\t\t}\n-\t\telse\n- scalar:\n-\t\t\tno = no1 = 1;\n-\t\tif (ch != '=')\n-\t\t\terrfl(a->cierr, 115, where);\n-\t\tgot1 = nml_read = 1;\n-\t\tf__lcount = 0;\n-\t readloop:\n-\t\tfor(;;) {\n-\t\t\tif (iva >= ivae || iva < 0) {\n-\t\t\t\tf__lquit = 1;\n-\t\t\t\tgoto mustend;\n-\t\t\t\t}\n-\t\t\telse if (iva + no1*size > ivae)\n-\t\t\t\tno1 = (ivae - iva)/size;\n-\t\t\tf__lquit = 0;\n-\t\t\tif (k = l_read(&no1, vaddr + iva, size, type))\n-\t\t\t\treturn k;\n-\t\t\tif (f__lquit == 1)\n-\t\t\t\treturn 0;\n-\t\t\tif (readall) {\n-\t\t\t\tiva += dn0->delta;\n-\t\t\t\tif (f__lcount > 0) {\n-\t\t\t\t\tno1 = (ivae - iva)/size;\n-\t\t\t\t\tif (no1 > f__lcount)\n-\t\t\t\t\t\tno1 = f__lcount;\n-\t\t\t\t\tif (k = l_read(&no1, vaddr + iva,\n-\t\t\t\t\t\t\tsize, type))\n-\t\t\t\t\t\treturn k;\n-\t\t\t\t\tiva += no1 * dn0->delta;\n-\t\t\t\t\t}\n-\t\t\t\t}\n- mustend:\n-\t\t\tGETC(ch);\n-\t\t\tif (readall)\n-\t\t\t\tif (iva >= ivae)\n-\t\t\t\t\treadall = 0;\n-\t\t\t\telse for(;;) {\n-\t\t\t\t\tswitch(ch) {\n-\t\t\t\t\t\tcase ' ':\n-\t\t\t\t\t\tcase '\\t':\n-\t\t\t\t\t\tcase '\\n':\n-\t\t\t\t\t\t\tGETC(ch);\n-\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\tif (ch == '/' || ch == '$' || ch == '&') {\n-\t\t\t\tf__lquit = 1;\n-\t\t\t\treturn 0;\n-\t\t\t\t}\n-\t\t\telse if (f__lquit) {\n-\t\t\t\twhile(ch <= ' ' && ch >= 0)\n-\t\t\t\t\tGETC(ch);\n-\t\t\t\tUngetc(ch,f__cf);\n-\t\t\t\tif (!Alpha[ch & 0xff] && ch >= 0)\n-\t\t\t\t\terrfl(a->cierr, 125, where);\n-\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\tUngetc(ch,f__cf);\n-\t\t\tif (readall && !Alpha[ch & 0xff])\n-\t\t\t\tgoto readloop;\n-\t\t\tif ((no -= no1) <= 0)\n-\t\t\t\tbreak;\n-\t\t\tfor(dn1 = dn0; dn1 <= dn; dn1++) {\n-\t\t\t\tif (++dn1->curval < dn1->extent) {\n-\t\t\t\t\tiva += dn1->delta;\n-\t\t\t\t\tgoto readloop;\n-\t\t\t\t\t}\n-\t\t\t\tdn1->curval = 0;\n-\t\t\t\t}\n-\t\t\tbreak;\n-\t\t\t}\n+\t    }\n+\tmustend:\n+\t  GETC (ch);\n+\t  if (readall)\n+\t    if (iva >= ivae)\n+\t      readall = 0;\n+\t    else\n+\t      for (;;)\n+\t\t{\n+\t\t  switch (ch)\n+\t\t    {\n+\t\t    case ' ':\n+\t\t    case '\\t':\n+\t\t    case '\\n':\n+\t\t      GETC (ch);\n+\t\t      continue;\n+\t\t    }\n+\t\t  break;\n+\t\t}\n+\t  if (ch == '/' || ch == '$' || ch == '&')\n+\t    {\n+\t      f__lquit = 1;\n+\t      return 0;\n+\t    }\n+\t  else if (f__lquit)\n+\t    {\n+\t      while (ch <= ' ' && ch >= 0)\n+\t\tGETC (ch);\n+\t      Ungetc (ch, f__cf);\n+\t      if (!Alpha[ch & 0xff] && ch >= 0)\n+\t\terrfl (a->cierr, 125, where);\n+\t      break;\n+\t    }\n+\t  Ungetc (ch, f__cf);\n+\t  if (readall && !Alpha[ch & 0xff])\n+\t    goto readloop;\n+\t  if ((no -= no1) <= 0)\n+\t    break;\n+\t  for (dn1 = dn0; dn1 <= dn; dn1++)\n+\t    {\n+\t      if (++dn1->curval < dn1->extent)\n+\t\t{\n+\t\t  iva += dn1->delta;\n+\t\t  goto readloop;\n \t\t}\n+\t      dn1->curval = 0;\n+\t    }\n+\t  break;\n \t}\n+    }\n+}\n \n- integer\n-s_rsne(cilist *a)\n+integer\n+s_rsne (cilist * a)\n {\n-\textern int l_eof;\n-\tint n;\n+  extern int l_eof;\n+  int n;\n \n-\tf__external=1;\n-\tl_eof = 0;\n-\tif(n = c_le(a))\n-\t\treturn n;\n-\tif(f__curunit->uwrt && f__nowreading(f__curunit))\n-\t\terr(a->cierr,errno,where0);\n-\tl_getc = t_getc;\n-\tl_ungetc = un_getc;\n-\tf__doend = xrd_SL;\n-\tn = x_rsne(a);\n-\tnml_read = 0;\n-\tif (n)\n-\t\treturn n;\n-\treturn e_rsle();\n-\t}\n+  f__external = 1;\n+  l_eof = 0;\n+  if (n = c_le (a))\n+    return n;\n+  if (f__curunit->uwrt && f__nowreading (f__curunit))\n+    err (a->cierr, errno, where0);\n+  l_getc = t_getc;\n+  l_ungetc = un_getc;\n+  f__doend = xrd_SL;\n+  n = x_rsne (a);\n+  nml_read = 0;\n+  if (n)\n+    return n;\n+  return e_rsle ();\n+}"}, {"sha": "9b5212269a7958bd2682467683f225c6d8455a14", "filename": "libf2c/libI77/sfe.c", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fsfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fsfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fsfe.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -5,31 +5,39 @@\n \n extern char *f__fmtbuf;\n \n-integer e_rsfe(void)\n-{\tint n;\n-\tf__init = 1;\n-\tn=en_fio();\n-\tf__fmtbuf=NULL;\n-\treturn(n);\n+integer\n+e_rsfe (void)\n+{\n+  int n;\n+  f__init = 1;\n+  n = en_fio ();\n+  f__fmtbuf = NULL;\n+  return (n);\n }\n-c_sfe(cilist *a) /* check */\n-{\tunit *p;\n-\tif(a->ciunit >= MXUNIT || a->ciunit<0)\n-\t\terr(a->cierr,101,\"startio\");\n-\tp = &f__units[a->ciunit];\n-\tif(p->ufd==NULL && fk_open(SEQ,FMT,a->ciunit)) err(a->cierr,114,\"sfe\");\n-\tif(!p->ufmt) err(a->cierr,102,\"sfe\");\n-\treturn(0);\n+\n+c_sfe (cilist * a)\t\t/* check */\n+{\n+  unit *p;\n+  if (a->ciunit >= MXUNIT || a->ciunit < 0)\n+    err (a->cierr, 101, \"startio\");\n+  p = &f__units[a->ciunit];\n+  if (p->ufd == NULL && fk_open (SEQ, FMT, a->ciunit))\n+    err (a->cierr, 114, \"sfe\");\n+  if (!p->ufmt)\n+    err (a->cierr, 102, \"sfe\");\n+  return (0);\n }\n-integer e_wsfe(void)\n+\n+integer\n+e_wsfe (void)\n {\n-\tint n;\n-\tf__init = 1;\n-\tn = en_fio();\n-\tf__fmtbuf=NULL;\n+  int n;\n+  f__init = 1;\n+  n = en_fio ();\n+  f__fmtbuf = NULL;\n #ifdef ALWAYS_FLUSH\n-\tif (!n && fflush(f__cf))\n-\t\terr(f__elist->cierr, errno, \"write end\");\n+  if (!n && fflush (f__cf))\n+    err (f__elist->cierr, errno, \"write end\");\n #endif\n-\treturn n;\n+  return n;\n }"}, {"sha": "70cff92c300710592748a378d1a47e3812e9b16c", "filename": "libf2c/libI77/sue.c", "status": "modified", "additions": 74, "deletions": 58, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fsue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fsue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fsue.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -4,73 +4,89 @@\n extern uiolen f__reclen;\n off_t f__recloc;\n \n-c_sue(cilist *a)\n+c_sue (cilist * a)\n {\n-\tf__external=f__sequential=1;\n-\tf__formatted=0;\n-\tf__curunit = &f__units[a->ciunit];\n-\tif(a->ciunit >= MXUNIT || a->ciunit < 0)\n-\t\terr(a->cierr,101,\"startio\");\n-\tf__elist=a;\n-\tif(f__curunit->ufd==NULL && fk_open(SEQ,UNF,a->ciunit))\n-\t\terr(a->cierr,114,\"sue\");\n-\tf__cf=f__curunit->ufd;\n-\tif(f__curunit->ufmt) err(a->cierr,103,\"sue\");\n-\tif(!f__curunit->useek) err(a->cierr,103,\"sue\");\n-\treturn(0);\n+  f__external = f__sequential = 1;\n+  f__formatted = 0;\n+  f__curunit = &f__units[a->ciunit];\n+  if (a->ciunit >= MXUNIT || a->ciunit < 0)\n+    err (a->cierr, 101, \"startio\");\n+  f__elist = a;\n+  if (f__curunit->ufd == NULL && fk_open (SEQ, UNF, a->ciunit))\n+    err (a->cierr, 114, \"sue\");\n+  f__cf = f__curunit->ufd;\n+  if (f__curunit->ufmt)\n+    err (a->cierr, 103, \"sue\");\n+  if (!f__curunit->useek)\n+    err (a->cierr, 103, \"sue\");\n+  return (0);\n }\n-integer s_rsue(cilist *a)\n+\n+integer\n+s_rsue (cilist * a)\n {\n-\tint n;\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__reading=1;\n-\tif(n=c_sue(a)) return(n);\n-\tf__recpos=0;\n-\tif(f__curunit->uwrt && f__nowreading(f__curunit))\n-\t\terr(a->cierr, errno, \"read start\");\n-\tif(fread((char *)&f__reclen,sizeof(uiolen),1,f__cf)\n-\t\t!= 1)\n-\t{\tif(feof(f__cf))\n-\t\t{\tf__curunit->uend = 1;\n-\t\t\terr(a->ciend, EOF, \"start\");\n-\t\t}\n-\t\tclearerr(f__cf);\n-\t\terr(a->cierr, errno, \"start\");\n+  int n;\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__reading = 1;\n+  if (n = c_sue (a))\n+    return (n);\n+  f__recpos = 0;\n+  if (f__curunit->uwrt && f__nowreading (f__curunit))\n+    err (a->cierr, errno, \"read start\");\n+  if (fread ((char *) &f__reclen, sizeof (uiolen), 1, f__cf) != 1)\n+    {\n+      if (feof (f__cf))\n+\t{\n+\t  f__curunit->uend = 1;\n+\t  err (a->ciend, EOF, \"start\");\n \t}\n-\treturn(0);\n+      clearerr (f__cf);\n+      err (a->cierr, errno, \"start\");\n+    }\n+  return (0);\n }\n-integer s_wsue(cilist *a)\n+\n+integer\n+s_wsue (cilist * a)\n {\n-\tint n;\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tif(n=c_sue(a)) return(n);\n-\tf__reading=0;\n-\tf__reclen=0;\n-\tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n-\t\terr(a->cierr, errno, \"write start\");\n-\tf__recloc=FTELL(f__cf);\n-\tFSEEK(f__cf,(off_t)sizeof(uiolen),SEEK_CUR);\n-\treturn(0);\n+  int n;\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  if (n = c_sue (a))\n+    return (n);\n+  f__reading = 0;\n+  f__reclen = 0;\n+  if (f__curunit->uwrt != 1 && f__nowwriting (f__curunit))\n+    err (a->cierr, errno, \"write start\");\n+  f__recloc = FTELL (f__cf);\n+  FSEEK (f__cf, (off_t) sizeof (uiolen), SEEK_CUR);\n+  return (0);\n }\n-integer e_wsue(void)\n-{\toff_t loc;\n-\tf__init = 1;\n-\tfwrite((char *)&f__reclen,sizeof(uiolen),1,f__cf);\n+\n+integer\n+e_wsue (void)\n+{\n+  off_t loc;\n+  f__init = 1;\n+  fwrite ((char *) &f__reclen, sizeof (uiolen), 1, f__cf);\n #ifdef ALWAYS_FLUSH\n-\tif (fflush(f__cf))\n-\t\terr(f__elist->cierr, errno, \"write end\");\n+  if (fflush (f__cf))\n+    err (f__elist->cierr, errno, \"write end\");\n #endif\n-\tloc=FTELL(f__cf);\n-\tFSEEK(f__cf,f__recloc,SEEK_SET);\n-\tfwrite((char *)&f__reclen,sizeof(uiolen),1,f__cf);\n-\tFSEEK(f__cf,loc,SEEK_SET);\n-\treturn(0);\n+  loc = FTELL (f__cf);\n+  FSEEK (f__cf, f__recloc, SEEK_SET);\n+  fwrite ((char *) &f__reclen, sizeof (uiolen), 1, f__cf);\n+  FSEEK (f__cf, loc, SEEK_SET);\n+  return (0);\n }\n-integer e_rsue(void)\n+\n+integer\n+e_rsue (void)\n {\n-\tf__init = 1;\n-\tFSEEK(f__cf,(off_t)(f__reclen-f__recpos+sizeof(uiolen)),SEEK_CUR);\n-\treturn(0);\n+  f__init = 1;\n+  FSEEK (f__cf, (off_t) (f__reclen - f__recpos + sizeof (uiolen)), SEEK_CUR);\n+  return (0);\n }"}, {"sha": "8e2a74ad1957aecfe00591cfd3391ed84900d463", "filename": "libf2c/libI77/typesize.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ftypesize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Ftypesize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ftypesize.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -1,13 +1,14 @@\n #include \"config.h\"\n #include \"f2c.h\"\n \n-ftnlen f__typesize[] = { 0, 0, sizeof(shortint), sizeof(integer),\n-\t\t\tsizeof(real), sizeof(doublereal),\n-\t\t\tsizeof(complex), sizeof(doublecomplex),\n-\t\t\tsizeof(logical), sizeof(char),\n-\t\t\t0, sizeof(integer1),\n-\t\t\tsizeof(logical1), sizeof(shortlogical),\n+ftnlen f__typesize[] = { 0, 0, sizeof (shortint), sizeof (integer),\n+  sizeof (real), sizeof (doublereal),\n+  sizeof (complex), sizeof (doublecomplex),\n+  sizeof (logical), sizeof (char),\n+  0, sizeof (integer1),\n+  sizeof (logical1), sizeof (shortlogical),\n #ifdef Allow_TYQUAD\n-\t\t\tsizeof(longint),\n+  sizeof (longint),\n #endif\n-\t\t\t0};\n+  0\n+};"}, {"sha": "d22e5a3a6b0c54890b91db371dca5f8f311b1207", "filename": "libf2c/libI77/uio.c", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fuio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fuio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fuio.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -3,51 +3,56 @@\n #include <sys/types.h>\n uiolen f__reclen;\n \n-do_us(ftnint *number, char *ptr, ftnlen len)\n+do_us (ftnint * number, char *ptr, ftnlen len)\n {\n-\tif(f__reading)\n-\t{\n-\t\tf__recpos += (int)(*number * len);\n-\t\tif(f__recpos>f__reclen)\n-\t\t\terr(f__elist->cierr, 110, \"do_us\");\n-\t\tif (fread(ptr,(size_t)len,(size_t)(*number),f__cf) != *number)\n-\t\t\terr(f__elist->ciend, EOF, \"do_us\");\n-\t\treturn(0);\n-\t}\n-\telse\n-\t{\n-\t\tf__reclen += *number * len;\n-\t\t(void) fwrite(ptr,(size_t)len,(size_t)(*number),f__cf);\n-\t\treturn(0);\n-\t}\n+  if (f__reading)\n+    {\n+      f__recpos += (int) (*number * len);\n+      if (f__recpos > f__reclen)\n+\terr (f__elist->cierr, 110, \"do_us\");\n+      if (fread (ptr, (size_t) len, (size_t) (*number), f__cf) != *number)\n+\terr (f__elist->ciend, EOF, \"do_us\");\n+      return (0);\n+    }\n+  else\n+    {\n+      f__reclen += *number * len;\n+      (void) fwrite (ptr, (size_t) len, (size_t) (*number), f__cf);\n+      return (0);\n+    }\n }\n-integer do_ud(ftnint *number, char *ptr, ftnlen len)\n+integer\n+do_ud (ftnint * number, char *ptr, ftnlen len)\n {\n-\tf__recpos += (int)(*number * len);\n-\tif(f__recpos > f__curunit->url && f__curunit->url!=1)\n-\t\terr(f__elist->cierr,110,\"do_ud\");\n-\tif(f__reading)\n-\t{\n+  f__recpos += (int) (*number * len);\n+  if (f__recpos > f__curunit->url && f__curunit->url != 1)\n+    err (f__elist->cierr, 110, \"do_ud\");\n+  if (f__reading)\n+    {\n #ifdef Pad_UDread\n-\tsize_t i;\n-\t\tif (!(i = fread(ptr,(size_t)len,(size_t)(*number),f__cf))\n-\t\t && !(f__recpos - *number*len))\n-\t\t\terr(f__elist->cierr,EOF,\"do_ud\");\n-\t\tif (i < *number)\n-\t\t\tmemset(ptr + i*len, 0, (*number - i)*len);\n-\t\treturn 0;\n+      size_t i;\n+      if (!(i = fread (ptr, (size_t) len, (size_t) (*number), f__cf))\n+\t  && !(f__recpos - *number * len))\n+\terr (f__elist->cierr, EOF, \"do_ud\");\n+      if (i < *number)\n+\tmemset (ptr + i * len, 0, (*number - i) * len);\n+      return 0;\n #else\n-\t\tif(fread(ptr,(size_t)len,(size_t)(*number),f__cf) != *number)\n-\t\t\terr(f__elist->cierr,EOF,\"do_ud\");\n-\t\telse return(0);\n+      if (fread (ptr, (size_t) len, (size_t) (*number), f__cf) != *number)\n+\terr (f__elist->cierr, EOF, \"do_ud\");\n+      else\n+\treturn (0);\n #endif\n-\t}\n-\t(void) fwrite(ptr,(size_t)len,(size_t)(*number),f__cf);\n-\treturn(0);\n+    }\n+  (void) fwrite (ptr, (size_t) len, (size_t) (*number), f__cf);\n+  return (0);\n }\n-integer do_uio(ftnint *number, char *ptr, ftnlen len)\n+\n+integer\n+do_uio (ftnint * number, char *ptr, ftnlen len)\n {\n-\tif(f__sequential)\n-\t\treturn(do_us(number,ptr,len));\n-\telse\treturn(do_ud(number,ptr,len));\n+  if (f__sequential)\n+    return (do_us (number, ptr, len));\n+  else\n+    return (do_ud (number, ptr, len));\n }"}, {"sha": "6e7c52b14ce798f15a705f5c37ae3a96678ea4c4", "filename": "libf2c/libI77/util.c", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Futil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Futil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Futil.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -9,34 +9,44 @@\n #include \"fio.h\"\n \n void\n-g_char(char *a, ftnlen alen, char *b)\n+g_char (char *a, ftnlen alen, char *b)\n {\n-\tchar *x = a + alen, *y = b + alen;\n+  char *x = a + alen, *y = b + alen;\n \n-\tfor(;; y--) {\n-\t\tif (x <= a) {\n-\t\t\t*b = 0;\n-\t\t\treturn;\n-\t\t\t}\n-\t\tif (*--x != ' ')\n-\t\t\tbreak;\n-\t\t}\n-\t*y-- = 0;\n-\tdo *y-- = *x;\n-\t\twhile(x-- > a);\n+  for (;; y--)\n+    {\n+      if (x <= a)\n+\t{\n+\t  *b = 0;\n+\t  return;\n \t}\n+      if (*--x != ' ')\n+\tbreak;\n+    }\n+  *y-- = 0;\n+  do\n+    *y-- = *x;\n+  while (x-- > a);\n+}\n \n void\n-b_char(char *a, char *b, ftnlen blen)\n-{\tint i;\n-\tfor(i=0;i<blen && *a!=0;i++) *b++= *a++;\n-\tfor(;i<blen;i++) *b++=' ';\n+b_char (char *a, char *b, ftnlen blen)\n+{\n+  int i;\n+  for (i = 0; i < blen && *a != 0; i++)\n+    *b++ = *a++;\n+  for (; i < blen; i++)\n+    *b++ = ' ';\n }\n+\n #ifndef NON_UNIX_STDIO\n-long f__inode(char *a, int *dev)\n-{\tstruct stat x;\n-\tif(stat(a,&x)<0) return(-1);\n-\t*dev = x.st_dev;\n-\treturn(x.st_ino);\n+long\n+f__inode (char *a, int *dev)\n+{\n+  struct stat x;\n+  if (stat (a, &x) < 0)\n+    return (-1);\n+  *dev = x.st_dev;\n+  return (x.st_ino);\n }\n #endif"}, {"sha": "c2600a1cccba33bcab7f5b4d98f6a37552c3977b", "filename": "libf2c/libI77/wref.c", "status": "modified", "additions": 247, "deletions": 211, "changes": 458, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwref.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -13,254 +13,290 @@\n #include \"fmt.h\"\n #include \"fp.h\"\n \n-wrt_E(ufloat *p, int w, int d, int e, ftnlen len)\n+wrt_E (ufloat * p, int w, int d, int e, ftnlen len)\n {\n-\tchar buf[FMAX+EXPMAXDIGS+4], *s, *se;\n-\tint d1, delta, e1, i, sign, signspace;\n-\tdouble dd;\n+  char buf[FMAX + EXPMAXDIGS + 4], *s, *se;\n+  int d1, delta, e1, i, sign, signspace;\n+  double dd;\n #ifdef WANT_LEAD_0\n-\tint insert0 = 0;\n+  int insert0 = 0;\n #endif\n #ifndef VAX\n-\tint e0 = e;\n+  int e0 = e;\n #endif\n \n-\tif(e <= 0)\n-\t\te = 2;\n-\tif(f__scale) {\n-\t\tif(f__scale >= d + 2 || f__scale <= -d)\n-\t\t\tgoto nogood;\n-\t\t}\n-\tif(f__scale <= 0)\n-\t\t--d;\n-\tif (len == sizeof(real))\n-\t\tdd = p->pf;\n-\telse\n-\t\tdd = p->pd;\n-\tif (dd < 0.) {\n-\t\tsignspace = sign = 1;\n-\t\tdd = -dd;\n-\t\t}\n-\telse {\n-\t\tsign = 0;\n-\t\tsignspace = (int)f__cplus;\n+  if (e <= 0)\n+    e = 2;\n+  if (f__scale)\n+    {\n+      if (f__scale >= d + 2 || f__scale <= -d)\n+\tgoto nogood;\n+    }\n+  if (f__scale <= 0)\n+    --d;\n+  if (len == sizeof (real))\n+    dd = p->pf;\n+  else\n+    dd = p->pd;\n+  if (dd < 0.)\n+    {\n+      signspace = sign = 1;\n+      dd = -dd;\n+    }\n+  else\n+    {\n+      sign = 0;\n+      signspace = (int) f__cplus;\n #ifndef VAX\n-\t\tif (!dd)\n-\t\t\tdd = 0.;\t/* avoid -0 */\n+      if (!dd)\n+\tdd = 0.;\t\t/* avoid -0 */\n #endif\n-\t\t}\n-\tdelta = w - (2 /* for the . and the d adjustment above */\n-\t\t\t+ 2 /* for the E+ */ + signspace + d + e);\n+    }\n+  delta = w - (2\t\t/* for the . and the d adjustment above */\n+\t       + 2 /* for the E+ */  + signspace + d + e);\n #ifdef WANT_LEAD_0\n-\tif (f__scale <= 0 && delta > 0) {\n-\t\tdelta--;\n-\t\tinsert0 = 1;\n-\t\t}\n-\telse\n+  if (f__scale <= 0 && delta > 0)\n+    {\n+      delta--;\n+      insert0 = 1;\n+    }\n+  else\n #endif\n-\tif (delta < 0) {\n-nogood:\n-\t\twhile(--w >= 0)\n-\t\t\tPUT('*');\n-\t\treturn(0);\n-\t\t}\n-\tif (f__scale < 0)\n-\t\td += f__scale;\n-\tif (d > FMAX) {\n-\t\td1 = d - FMAX;\n-\t\td = FMAX;\n-\t\t}\n-\telse\n-\t\td1 = 0;\n-\tsprintf(buf,\"%#.*E\", d, dd);\n+  if (delta < 0)\n+    {\n+    nogood:\n+      while (--w >= 0)\n+\tPUT ('*');\n+      return (0);\n+    }\n+  if (f__scale < 0)\n+    d += f__scale;\n+  if (d > FMAX)\n+    {\n+      d1 = d - FMAX;\n+      d = FMAX;\n+    }\n+  else\n+    d1 = 0;\n+  sprintf (buf, \"%#.*E\", d, dd);\n #ifndef VAX\n-\t/* check for NaN, Infinity */\n-\tif (!isdigit(buf[0])) {\n-\t\tswitch(buf[0]) {\n-\t\t\tcase 'n':\n-\t\t\tcase 'N':\n-\t\t\t\tsignspace = 0;\t/* no sign for NaNs */\n-\t\t\t}\n-\t\tdelta = w - strlen(buf) - signspace;\n-\t\tif (delta < 0)\n-\t\t\tgoto nogood;\n-\t\twhile(--delta >= 0)\n-\t\t\tPUT(' ');\n-\t\tif (signspace)\n-\t\t\tPUT(sign ? '-' : '+');\n-\t\tfor(s = buf; *s; s++)\n-\t\t\tPUT(*s);\n-\t\treturn 0;\n-\t\t}\n+  /* check for NaN, Infinity */\n+  if (!isdigit (buf[0]))\n+    {\n+      switch (buf[0])\n+\t{\n+\tcase 'n':\n+\tcase 'N':\n+\t  signspace = 0;\t/* no sign for NaNs */\n+\t}\n+      delta = w - strlen (buf) - signspace;\n+      if (delta < 0)\n+\tgoto nogood;\n+      while (--delta >= 0)\n+\tPUT (' ');\n+      if (signspace)\n+\tPUT (sign ? '-' : '+');\n+      for (s = buf; *s; s++)\n+\tPUT (*s);\n+      return 0;\n+    }\n #endif\n-\tse = buf + d + 3;\n-#ifdef GOOD_SPRINTF_EXPONENT /* When possible, exponent has 2 digits. */\n-\tif (f__scale != 1 && dd)\n-\t\tsprintf(se, \"%+.2d\", atoi(se) + 1 - f__scale);\n+  se = buf + d + 3;\n+#ifdef GOOD_SPRINTF_EXPONENT\t/* When possible, exponent has 2 digits. */\n+  if (f__scale != 1 && dd)\n+    sprintf (se, \"%+.2d\", atoi (se) + 1 - f__scale);\n #else\n-\tif (dd)\n-\t\tsprintf(se, \"%+.2d\", atoi(se) + 1 - f__scale);\n-\telse\n-\t\tstrcpy(se, \"+00\");\n+  if (dd)\n+    sprintf (se, \"%+.2d\", atoi (se) + 1 - f__scale);\n+  else\n+    strcpy (se, \"+00\");\n #endif\n-\ts = ++se;\n-\tif (e < 2) {\n-\t\tif (*s != '0')\n-\t\t\tgoto nogood;\n-\t\t}\n+  s = ++se;\n+  if (e < 2)\n+    {\n+      if (*s != '0')\n+\tgoto nogood;\n+    }\n #ifndef VAX\n-\t/* accommodate 3 significant digits in exponent */\n-\tif (s[2]) {\n+  /* accommodate 3 significant digits in exponent */\n+  if (s[2])\n+    {\n #ifdef Pedantic\n-\t\tif (!e0 && !s[3])\n-\t\t\tfor(s -= 2, e1 = 2; s[0] = s[1]; s++);\n+      if (!e0 && !s[3])\n+\tfor (s -= 2, e1 = 2; s[0] = s[1]; s++);\n \n-\t/* Pedantic gives the behavior that Fortran 77 specifies,\t*/\n-\t/* i.e., requires that E be specified for exponent fields\t*/\n-\t/* of more than 3 digits.  With Pedantic undefined, we get\t*/\n-\t/* the behavior that Cray displays -- you get a bigger\t\t*/\n-\t/* exponent field if it fits.\t*/\n+      /* Pedantic gives the behavior that Fortran 77 specifies,       */\n+      /* i.e., requires that E be specified for exponent fields       */\n+      /* of more than 3 digits.  With Pedantic undefined, we get      */\n+      /* the behavior that Cray displays -- you get a bigger          */\n+      /* exponent field if it fits.   */\n #else\n-\t\tif (!e0) {\n-\t\t\tfor(s -= 2, e1 = 2; s[0] = s[1]; s++)\n+      if (!e0)\n+\t{\n+\t  for (s -= 2, e1 = 2; s[0] = s[1]; s++)\n #ifdef CRAY\n-\t\t\t\tdelta--;\n-\t\t\tif ((delta += 4) < 0)\n-\t\t\t\tgoto nogood\n+\t    delta--;\n+\t  if ((delta += 4) < 0)\n+\t    goto nogood\n #endif\n-\t\t\t\t;\n-\t\t\t}\n+\t      ;\n+\t}\n #endif\n-\t\telse if (e0 >= 0)\n-\t\t\tgoto shift;\n-\t\telse\n-\t\t\te1 = e;\n-\t\t}\n-\telse\n- shift:\n+      else if (e0 >= 0)\n+\tgoto shift;\n+      else\n+\te1 = e;\n+    }\n+  else\n+  shift:\n #endif\n-\t\tfor(s += 2, e1 = 2; *s; ++e1, ++s)\n-\t\t\tif (e1 >= e)\n-\t\t\t\tgoto nogood;\n-\twhile(--delta >= 0)\n-\t\tPUT(' ');\n-\tif (signspace)\n-\t\tPUT(sign ? '-' : '+');\n-\ts = buf;\n-\ti = f__scale;\n-\tif (f__scale <= 0) {\n+    for (s += 2, e1 = 2; *s; ++e1, ++s)\n+      if (e1 >= e)\n+\tgoto nogood;\n+  while (--delta >= 0)\n+    PUT (' ');\n+  if (signspace)\n+    PUT (sign ? '-' : '+');\n+  s = buf;\n+  i = f__scale;\n+  if (f__scale <= 0)\n+    {\n #ifdef WANT_LEAD_0\n-\t\tif (insert0)\n-\t\t\tPUT('0');\n+      if (insert0)\n+\tPUT ('0');\n #endif\n-\t\tPUT('.');\n-\t\tfor(; i < 0; ++i)\n-\t\t\tPUT('0');\n-\t\tPUT(*s);\n-\t\ts += 2;\n-\t\t}\n-\telse if (f__scale > 1) {\n-\t\tPUT(*s);\n-\t\ts += 2;\n-\t\twhile(--i > 0)\n-\t\t\tPUT(*s++);\n-\t\tPUT('.');\n-\t\t}\n-\tif (d1) {\n-\t\tse -= 2;\n-\t\twhile(s < se) PUT(*s++);\n-\t\tse += 2;\n-\t\tdo PUT('0'); while(--d1 > 0);\n-\t\t}\n-\twhile(s < se)\n-\t\tPUT(*s++);\n-\tif (e < 2)\n-\t\tPUT(s[1]);\n-\telse {\n-\t\twhile(++e1 <= e)\n-\t\t\tPUT('0');\n-\t\twhile(*s)\n-\t\t\tPUT(*s++);\n-\t\t}\n-\treturn 0;\n-\t}\n+      PUT ('.');\n+      for (; i < 0; ++i)\n+\tPUT ('0');\n+      PUT (*s);\n+      s += 2;\n+    }\n+  else if (f__scale > 1)\n+    {\n+      PUT (*s);\n+      s += 2;\n+      while (--i > 0)\n+\tPUT (*s++);\n+      PUT ('.');\n+    }\n+  if (d1)\n+    {\n+      se -= 2;\n+      while (s < se)\n+\tPUT (*s++);\n+      se += 2;\n+      do\n+\tPUT ('0');\n+      while (--d1 > 0);\n+    }\n+  while (s < se)\n+    PUT (*s++);\n+  if (e < 2)\n+    PUT (s[1]);\n+  else\n+    {\n+      while (++e1 <= e)\n+\tPUT ('0');\n+      while (*s)\n+\tPUT (*s++);\n+    }\n+  return 0;\n+}\n \n-wrt_F(ufloat *p, int w, int d, ftnlen len)\n+wrt_F (ufloat * p, int w, int d, ftnlen len)\n {\n-\tint d1, sign, n;\n-\tdouble x;\n-\tchar *b, buf[MAXINTDIGS+MAXFRACDIGS+4], *s;\n+  int d1, sign, n;\n+  double x;\n+  char *b, buf[MAXINTDIGS + MAXFRACDIGS + 4], *s;\n \n-\tx= (len==sizeof(real)?p->pf:p->pd);\n-\tif (d < MAXFRACDIGS)\n-\t\td1 = 0;\n-\telse {\n-\t\td1 = d - MAXFRACDIGS;\n-\t\td = MAXFRACDIGS;\n-\t\t}\n-\tif (x < 0.)\n-\t\t{ x = -x; sign = 1; }\n-\telse {\n-\t\tsign = 0;\n+  x = (len == sizeof (real) ? p->pf : p->pd);\n+  if (d < MAXFRACDIGS)\n+    d1 = 0;\n+  else\n+    {\n+      d1 = d - MAXFRACDIGS;\n+      d = MAXFRACDIGS;\n+    }\n+  if (x < 0.)\n+    {\n+      x = -x;\n+      sign = 1;\n+    }\n+  else\n+    {\n+      sign = 0;\n #ifndef VAX\n-\t\tif (!x)\n-\t\t\tx = 0.;\n+      if (!x)\n+\tx = 0.;\n #endif\n-\t\t}\n+    }\n \n-\tif (n = f__scale)\n-\t\tif (n > 0)\n-\t\t\tdo x *= 10.; while(--n > 0);\n-\t\telse\n-\t\t\tdo x *= 0.1; while(++n < 0);\n+  if (n = f__scale)\n+    if (n > 0)\n+      do\n+\tx *= 10.;\n+      while (--n > 0);\n+    else\n+      do\n+\tx *= 0.1;\n+      while (++n < 0);\n \n #ifdef USE_STRLEN\n-\tsprintf(b = buf, \"%#.*f\", d, x);\n-\tn = strlen(b) + d1;\n+  sprintf (b = buf, \"%#.*f\", d, x);\n+  n = strlen (b) + d1;\n #else\n-\tn = sprintf(b = buf, \"%#.*f\", d, x) + d1;\n+  n = sprintf (b = buf, \"%#.*f\", d, x) + d1;\n #endif\n \n #ifndef WANT_LEAD_0\n-\tif (buf[0] == '0' && d)\n-\t\t{ ++b; --n; }\n+  if (buf[0] == '0' && d)\n+    {\n+      ++b;\n+      --n;\n+    }\n #endif\n-\tif (sign) {\n-\t\t/* check for all zeros */\n-\t\tfor(s = b;;) {\n-\t\t\twhile(*s == '0') s++;\n-\t\t\tswitch(*s) {\n-\t\t\t\tcase '.':\n-\t\t\t\t\ts++; continue;\n-\t\t\t\tcase 0:\n-\t\t\t\t\tsign = 0;\n-\t\t\t\t}\n-\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\tif (sign || f__cplus)\n-\t\t++n;\n-\tif (n > w) {\n+  if (sign)\n+    {\n+      /* check for all zeros */\n+      for (s = b;;)\n+\t{\n+\t  while (*s == '0')\n+\t    s++;\n+\t  switch (*s)\n+\t    {\n+\t    case '.':\n+\t      s++;\n+\t      continue;\n+\t    case 0:\n+\t      sign = 0;\n+\t    }\n+\t  break;\n+\t}\n+    }\n+  if (sign || f__cplus)\n+    ++n;\n+  if (n > w)\n+    {\n #ifdef WANT_LEAD_0\n-\t\tif (buf[0] == '0' && --n == w)\n-\t\t\t++b;\n-\t\telse\n+      if (buf[0] == '0' && --n == w)\n+\t++b;\n+      else\n #endif\n-\t\t{\n-\t\t\twhile(--w >= 0)\n-\t\t\t\tPUT('*');\n-\t\t\treturn 0;\n-\t\t\t}\n-\t\t}\n-\tfor(w -= n; --w >= 0; )\n-\t\tPUT(' ');\n-\tif (sign)\n-\t\tPUT('-');\n-\telse if (f__cplus)\n-\t\tPUT('+');\n-\twhile(n = *b++)\n-\t\tPUT(n);\n-\twhile(--d1 >= 0)\n-\t\tPUT('0');\n-\treturn 0;\n+\t{\n+\t  while (--w >= 0)\n+\t    PUT ('*');\n+\t  return 0;\n \t}\n+    }\n+  for (w -= n; --w >= 0;)\n+    PUT (' ');\n+  if (sign)\n+    PUT ('-');\n+  else if (f__cplus)\n+    PUT ('+');\n+  while (n = *b++)\n+    PUT (n);\n+  while (--d1 >= 0)\n+    PUT ('0');\n+  return 0;\n+}"}, {"sha": "c2a440fcb9052ae8e1f76d00e36b79f8f4c19eb9", "filename": "libf2c/libI77/wrtfmt.c", "status": "modified", "additions": 352, "deletions": 276, "changes": 628, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwrtfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwrtfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwrtfmt.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -6,317 +6,393 @@\n extern icilist *f__svic;\n extern char *f__icptr;\n \n- static int\n-mv_cur(void)\t/* shouldn't use fseek because it insists on calling fflush */\n+static int\n+mv_cur (void)\t\t\t/* shouldn't use fseek because it insists on calling fflush */\n \t\t/* instead we know too much about stdio */\n {\n-\tint cursor = f__cursor;\n-\tf__cursor = 0;\n-\tif(f__external == 0) {\n-\t\tif(cursor < 0) {\n-\t\t\tif(f__hiwater < f__recpos)\n-\t\t\t\tf__hiwater = f__recpos;\n-\t\t\tf__recpos += cursor;\n-\t\t\tf__icptr += cursor;\n-\t\t\tif(f__recpos < 0)\n-\t\t\t\terr(f__elist->cierr, 110, \"left off\");\n-\t\t}\n-\t\telse if(cursor > 0) {\n-\t\t\tif(f__recpos + cursor >= f__svic->icirlen)\n-\t\t\t\terr(f__elist->cierr, 110, \"recend\");\n-\t\t\tif(f__hiwater <= f__recpos)\n-\t\t\t\tfor(; cursor > 0; cursor--)\n-\t\t\t\t\t(*f__putn)(' ');\n-\t\t\telse if(f__hiwater <= f__recpos + cursor) {\n-\t\t\t\tcursor -= f__hiwater - f__recpos;\n-\t\t\t\tf__icptr += f__hiwater - f__recpos;\n-\t\t\t\tf__recpos = f__hiwater;\n-\t\t\t\tfor(; cursor > 0; cursor--)\n-\t\t\t\t\t(*f__putn)(' ');\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tf__icptr += cursor;\n-\t\t\t\tf__recpos += cursor;\n-\t\t\t}\n-\t\t}\n-\t\treturn(0);\n+  int cursor = f__cursor;\n+  f__cursor = 0;\n+  if (f__external == 0)\n+    {\n+      if (cursor < 0)\n+\t{\n+\t  if (f__hiwater < f__recpos)\n+\t    f__hiwater = f__recpos;\n+\t  f__recpos += cursor;\n+\t  f__icptr += cursor;\n+\t  if (f__recpos < 0)\n+\t    err (f__elist->cierr, 110, \"left off\");\n+\t}\n+      else if (cursor > 0)\n+\t{\n+\t  if (f__recpos + cursor >= f__svic->icirlen)\n+\t    err (f__elist->cierr, 110, \"recend\");\n+\t  if (f__hiwater <= f__recpos)\n+\t    for (; cursor > 0; cursor--)\n+\t      (*f__putn) (' ');\n+\t  else if (f__hiwater <= f__recpos + cursor)\n+\t    {\n+\t      cursor -= f__hiwater - f__recpos;\n+\t      f__icptr += f__hiwater - f__recpos;\n+\t      f__recpos = f__hiwater;\n+\t      for (; cursor > 0; cursor--)\n+\t\t(*f__putn) (' ');\n+\t    }\n+\t  else\n+\t    {\n+\t      f__icptr += cursor;\n+\t      f__recpos += cursor;\n+\t    }\n \t}\n-\tif (cursor > 0) {\n-\t\tif(f__hiwater <= f__recpos)\n-\t\t\tfor(;cursor>0;cursor--) (*f__putn)(' ');\n-\t\telse if(f__hiwater <= f__recpos + cursor) {\n-\t\t\tcursor -= f__hiwater - f__recpos;\n-\t\t\tf__recpos = f__hiwater;\n-\t\t\tfor(; cursor > 0; cursor--)\n-\t\t\t\t(*f__putn)(' ');\n-\t\t}\n-\t\telse {\n-\t\t\tf__recpos += cursor;\n-\t\t}\n+      return (0);\n+    }\n+  if (cursor > 0)\n+    {\n+      if (f__hiwater <= f__recpos)\n+\tfor (; cursor > 0; cursor--)\n+\t  (*f__putn) (' ');\n+      else if (f__hiwater <= f__recpos + cursor)\n+\t{\n+\t  cursor -= f__hiwater - f__recpos;\n+\t  f__recpos = f__hiwater;\n+\t  for (; cursor > 0; cursor--)\n+\t    (*f__putn) (' ');\n \t}\n-\telse if (cursor < 0)\n+      else\n \t{\n-\t\tif(cursor + f__recpos < 0)\n-\t\t\terr(f__elist->cierr,110,\"left off\");\n-\t\tif(f__hiwater < f__recpos)\n-\t\t\tf__hiwater = f__recpos;\n-\t\tf__recpos += cursor;\n+\t  f__recpos += cursor;\n \t}\n-\treturn(0);\n+    }\n+  else if (cursor < 0)\n+    {\n+      if (cursor + f__recpos < 0)\n+\terr (f__elist->cierr, 110, \"left off\");\n+      if (f__hiwater < f__recpos)\n+\tf__hiwater = f__recpos;\n+      f__recpos += cursor;\n+    }\n+  return (0);\n }\n \n- static int\n-wrt_Z(Uint *n, int w, int minlen, ftnlen len)\n+static int\n+wrt_Z (Uint * n, int w, int minlen, ftnlen len)\n {\n-\tregister char *s, *se;\n-\tregister int i, w1;\n-\tstatic int one = 1;\n-\tstatic char hex[] = \"0123456789ABCDEF\";\n-\ts = (char *)n;\n-\t--len;\n-\tif (*(char *)&one) {\n-\t\t/* little endian */\n-\t\tse = s;\n-\t\ts += len;\n-\t\ti = -1;\n-\t\t}\n-\telse {\n-\t\tse = s + len;\n-\t\ti = 1;\n-\t\t}\n-\tfor(;; s += i)\n-\t\tif (s == se || *s)\n-\t\t\tbreak;\n-\tw1 = (i*(se-s) << 1) + 1;\n-\tif (*s & 0xf0)\n-\t\tw1++;\n-\tif (w1 > w)\n-\t\tfor(i = 0; i < w; i++)\n-\t\t\t(*f__putn)('*');\n-\telse {\n-\t\tif ((minlen -= w1) > 0)\n-\t\t\tw1 += minlen;\n-\t\twhile(--w >= w1)\n-\t\t\t(*f__putn)(' ');\n-\t\twhile(--minlen >= 0)\n-\t\t\t(*f__putn)('0');\n-\t\tif (!(*s & 0xf0)) {\n-\t\t\t(*f__putn)(hex[*s & 0xf]);\n-\t\t\tif (s == se)\n-\t\t\t\treturn 0;\n-\t\t\ts += i;\n-\t\t\t}\n-\t\tfor(;; s += i) {\n-\t\t\t(*f__putn)(hex[*s >> 4 & 0xf]);\n-\t\t\t(*f__putn)(hex[*s & 0xf]);\n-\t\t\tif (s == se)\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\treturn 0;\n+  register char *s, *se;\n+  register int i, w1;\n+  static int one = 1;\n+  static char hex[] = \"0123456789ABCDEF\";\n+  s = (char *) n;\n+  --len;\n+  if (*(char *) &one)\n+    {\n+      /* little endian */\n+      se = s;\n+      s += len;\n+      i = -1;\n+    }\n+  else\n+    {\n+      se = s + len;\n+      i = 1;\n+    }\n+  for (;; s += i)\n+    if (s == se || *s)\n+      break;\n+  w1 = (i * (se - s) << 1) + 1;\n+  if (*s & 0xf0)\n+    w1++;\n+  if (w1 > w)\n+    for (i = 0; i < w; i++)\n+      (*f__putn) ('*');\n+  else\n+    {\n+      if ((minlen -= w1) > 0)\n+\tw1 += minlen;\n+      while (--w >= w1)\n+\t(*f__putn) (' ');\n+      while (--minlen >= 0)\n+\t(*f__putn) ('0');\n+      if (!(*s & 0xf0))\n+\t{\n+\t  (*f__putn) (hex[*s & 0xf]);\n+\t  if (s == se)\n+\t    return 0;\n+\t  s += i;\n+\t}\n+      for (;; s += i)\n+\t{\n+\t  (*f__putn) (hex[*s >> 4 & 0xf]);\n+\t  (*f__putn) (hex[*s & 0xf]);\n+\t  if (s == se)\n+\t    break;\n \t}\n+    }\n+  return 0;\n+}\n \n- static int\n-wrt_I(Uint *n, int w, ftnlen len, register int base)\n-{\tint ndigit,sign,spare,i;\n-\tlongint x;\n-\tchar *ans;\n-\tif(len==sizeof(integer)) x=n->il;\n-\telse if(len == sizeof(char)) x = n->ic;\n+static int\n+wrt_I (Uint * n, int w, ftnlen len, register int base)\n+{\n+  int ndigit, sign, spare, i;\n+  longint x;\n+  char *ans;\n+  if (len == sizeof (integer))\n+    x = n->il;\n+  else if (len == sizeof (char))\n+    x = n->ic;\n #ifdef Allow_TYQUAD\n-\telse if (len == sizeof(longint)) x = n->ili;\n+  else if (len == sizeof (longint))\n+    x = n->ili;\n #endif\n-\telse x=n->is;\n-\tans=f__icvt(x,&ndigit,&sign, base);\n-\tspare=w-ndigit;\n-\tif(sign || f__cplus) spare--;\n-\tif(spare<0)\n-\t\tfor(i=0;i<w;i++) (*f__putn)('*');\n-\telse\n-\t{\tfor(i=0;i<spare;i++) (*f__putn)(' ');\n-\t\tif(sign) (*f__putn)('-');\n-\t\telse if(f__cplus) (*f__putn)('+');\n-\t\tfor(i=0;i<ndigit;i++) (*f__putn)(*ans++);\n-\t}\n-\treturn(0);\n+  else\n+    x = n->is;\n+  ans = f__icvt (x, &ndigit, &sign, base);\n+  spare = w - ndigit;\n+  if (sign || f__cplus)\n+    spare--;\n+  if (spare < 0)\n+    for (i = 0; i < w; i++)\n+      (*f__putn) ('*');\n+  else\n+    {\n+      for (i = 0; i < spare; i++)\n+\t(*f__putn) (' ');\n+      if (sign)\n+\t(*f__putn) ('-');\n+      else if (f__cplus)\n+\t(*f__putn) ('+');\n+      for (i = 0; i < ndigit; i++)\n+\t(*f__putn) (*ans++);\n+    }\n+  return (0);\n }\n- static int\n-wrt_IM(Uint *n, int w, int m, ftnlen len, int base)\n-{\tint ndigit,sign,spare,i,xsign;\n-\tlongint x;\n-\tchar *ans;\n-\tif(sizeof(integer)==len) x=n->il;\n-\telse if(len == sizeof(char)) x = n->ic;\n+static int\n+wrt_IM (Uint * n, int w, int m, ftnlen len, int base)\n+{\n+  int ndigit, sign, spare, i, xsign;\n+  longint x;\n+  char *ans;\n+  if (sizeof (integer) == len)\n+    x = n->il;\n+  else if (len == sizeof (char))\n+    x = n->ic;\n #ifdef Allow_TYQUAD\n-\telse if (len == sizeof(longint)) x = n->ili;\n+  else if (len == sizeof (longint))\n+    x = n->ili;\n #endif\n-\telse x=n->is;\n-\tans=f__icvt(x,&ndigit,&sign, base);\n-\tif(sign || f__cplus) xsign=1;\n-\telse xsign=0;\n-\tif(ndigit+xsign>w || m+xsign>w)\n-\t{\tfor(i=0;i<w;i++) (*f__putn)('*');\n-\t\treturn(0);\n-\t}\n-\tif(x==0 && m==0)\n-\t{\tfor(i=0;i<w;i++) (*f__putn)(' ');\n-\t\treturn(0);\n-\t}\n-\tif(ndigit>=m)\n-\t\tspare=w-ndigit-xsign;\n-\telse\n-\t\tspare=w-m-xsign;\n-\tfor(i=0;i<spare;i++) (*f__putn)(' ');\n-\tif(sign) (*f__putn)('-');\n-\telse if(f__cplus) (*f__putn)('+');\n-\tfor(i=0;i<m-ndigit;i++) (*f__putn)('0');\n-\tfor(i=0;i<ndigit;i++) (*f__putn)(*ans++);\n-\treturn(0);\n+  else\n+    x = n->is;\n+  ans = f__icvt (x, &ndigit, &sign, base);\n+  if (sign || f__cplus)\n+    xsign = 1;\n+  else\n+    xsign = 0;\n+  if (ndigit + xsign > w || m + xsign > w)\n+    {\n+      for (i = 0; i < w; i++)\n+\t(*f__putn) ('*');\n+      return (0);\n+    }\n+  if (x == 0 && m == 0)\n+    {\n+      for (i = 0; i < w; i++)\n+\t(*f__putn) (' ');\n+      return (0);\n+    }\n+  if (ndigit >= m)\n+    spare = w - ndigit - xsign;\n+  else\n+    spare = w - m - xsign;\n+  for (i = 0; i < spare; i++)\n+    (*f__putn) (' ');\n+  if (sign)\n+    (*f__putn) ('-');\n+  else if (f__cplus)\n+    (*f__putn) ('+');\n+  for (i = 0; i < m - ndigit; i++)\n+    (*f__putn) ('0');\n+  for (i = 0; i < ndigit; i++)\n+    (*f__putn) (*ans++);\n+  return (0);\n }\n- static int\n-wrt_AP(char *s)\n-{\tchar quote;\n-\tint i;\n+static int\n+wrt_AP (char *s)\n+{\n+  char quote;\n+  int i;\n \n-\tif(f__cursor && (i = mv_cur()))\n-\t\treturn i;\n-\tquote = *s++;\n-\tfor(;*s;s++)\n-\t{\tif(*s!=quote) (*f__putn)(*s);\n-\t\telse if(*++s==quote) (*f__putn)(*s);\n-\t\telse return(1);\n-\t}\n-\treturn(1);\n+  if (f__cursor && (i = mv_cur ()))\n+    return i;\n+  quote = *s++;\n+  for (; *s; s++)\n+    {\n+      if (*s != quote)\n+\t(*f__putn) (*s);\n+      else if (*++s == quote)\n+\t(*f__putn) (*s);\n+      else\n+\treturn (1);\n+    }\n+  return (1);\n }\n- static int\n-wrt_H(int a, char *s)\n+static int\n+wrt_H (int a, char *s)\n {\n-\tint i;\n+  int i;\n \n-\tif(f__cursor && (i = mv_cur()))\n-\t\treturn i;\n-\twhile(a--) (*f__putn)(*s++);\n-\treturn(1);\n+  if (f__cursor && (i = mv_cur ()))\n+    return i;\n+  while (a--)\n+    (*f__putn) (*s++);\n+  return (1);\n }\n-wrt_L(Uint *n, int len, ftnlen sz)\n-{\tint i;\n-\tlong x;\n-\tif(sizeof(long)==sz) x=n->il;\n-\telse if(sz == sizeof(char)) x = n->ic;\n-\telse x=n->is;\n-\tfor(i=0;i<len-1;i++)\n-\t\t(*f__putn)(' ');\n-\tif(x) (*f__putn)('T');\n-\telse (*f__putn)('F');\n-\treturn(0);\n+\n+wrt_L (Uint * n, int len, ftnlen sz)\n+{\n+  int i;\n+  long x;\n+  if (sizeof (long) == sz)\n+    x = n->il;\n+  else if (sz == sizeof (char))\n+    x = n->ic;\n+  else\n+    x = n->is;\n+  for (i = 0; i < len - 1; i++)\n+    (*f__putn) (' ');\n+  if (x)\n+    (*f__putn) ('T');\n+  else\n+    (*f__putn) ('F');\n+  return (0);\n }\n- static int\n-wrt_A(char *p, ftnlen len)\n+static int\n+wrt_A (char *p, ftnlen len)\n {\n-\twhile(len-- > 0) (*f__putn)(*p++);\n-\treturn(0);\n+  while (len-- > 0)\n+    (*f__putn) (*p++);\n+  return (0);\n }\n- static int\n-wrt_AW(char * p, int w, ftnlen len)\n+static int\n+wrt_AW (char *p, int w, ftnlen len)\n {\n-\twhile(w>len)\n-\t{\tw--;\n-\t\t(*f__putn)(' ');\n-\t}\n-\twhile(w-- > 0)\n-\t\t(*f__putn)(*p++);\n-\treturn(0);\n+  while (w > len)\n+    {\n+      w--;\n+      (*f__putn) (' ');\n+    }\n+  while (w-- > 0)\n+    (*f__putn) (*p++);\n+  return (0);\n }\n \n- static int\n-wrt_G(ufloat *p, int w, int d, int e, ftnlen len)\n-{\tdouble up = 1,x;\n-\tint i=0,oldscale,n,j;\n-\tx = len==sizeof(real)?p->pf:p->pd;\n-\tif(x < 0 ) x = -x;\n-\tif(x<.1) {\n-\t\tif (x != 0.)\n-\t\t\treturn(wrt_E(p,w,d,e,len));\n-\t\ti = 1;\n-\t\tgoto have_i;\n-\t\t}\n-\tfor(;i<=d;i++,up*=10)\n-\t{\tif(x>=up) continue;\n- have_i:\n-\t\toldscale = f__scale;\n-\t\tf__scale = 0;\n-\t\tif(e==0) n=4;\n-\t\telse\tn=e+2;\n-\t\ti=wrt_F(p,w-n,d-i,len);\n-\t\tfor(j=0;j<n;j++) (*f__putn)(' ');\n-\t\tf__scale=oldscale;\n-\t\treturn(i);\n-\t}\n-\treturn(wrt_E(p,w,d,e,len));\n+static int\n+wrt_G (ufloat * p, int w, int d, int e, ftnlen len)\n+{\n+  double up = 1, x;\n+  int i = 0, oldscale, n, j;\n+  x = len == sizeof (real) ? p->pf : p->pd;\n+  if (x < 0)\n+    x = -x;\n+  if (x < .1)\n+    {\n+      if (x != 0.)\n+\treturn (wrt_E (p, w, d, e, len));\n+      i = 1;\n+      goto have_i;\n+    }\n+  for (; i <= d; i++, up *= 10)\n+    {\n+      if (x >= up)\n+\tcontinue;\n+    have_i:\n+      oldscale = f__scale;\n+      f__scale = 0;\n+      if (e == 0)\n+\tn = 4;\n+      else\n+\tn = e + 2;\n+      i = wrt_F (p, w - n, d - i, len);\n+      for (j = 0; j < n; j++)\n+\t(*f__putn) (' ');\n+      f__scale = oldscale;\n+      return (i);\n+    }\n+  return (wrt_E (p, w, d, e, len));\n }\n-w_ed(struct syl *p, char *ptr, ftnlen len)\n+\n+w_ed (struct syl * p, char *ptr, ftnlen len)\n {\n-\tint i;\n+  int i;\n \n-\tif(f__cursor && (i = mv_cur()))\n-\t\treturn i;\n-\tswitch(p->op)\n-\t{\n-\tdefault:\n-\t\tfprintf(stderr,\"w_ed, unexpected code: %d\\n\", p->op);\n-\t\tsig_die(f__fmtbuf, 1);\n-\tcase I:\treturn(wrt_I((Uint *)ptr,p->p1,len, 10));\n-\tcase IM:\n-\t\treturn(wrt_IM((Uint *)ptr,p->p1,p->p2.i[0],len,10));\n+  if (f__cursor && (i = mv_cur ()))\n+    return i;\n+  switch (p->op)\n+    {\n+    default:\n+      fprintf (stderr, \"w_ed, unexpected code: %d\\n\", p->op);\n+      sig_die (f__fmtbuf, 1);\n+    case I:\n+      return (wrt_I ((Uint *) ptr, p->p1, len, 10));\n+    case IM:\n+      return (wrt_IM ((Uint *) ptr, p->p1, p->p2.i[0], len, 10));\n \n-\t\t/* O and OM don't work right for character, double, complex, */\n-\t\t/* or doublecomplex, and they differ from Fortran 90 in */\n-\t\t/* showing a minus sign for negative values. */\n+      /* O and OM don't work right for character, double, complex, */\n+      /* or doublecomplex, and they differ from Fortran 90 in */\n+      /* showing a minus sign for negative values. */\n \n-\tcase O:\treturn(wrt_I((Uint *)ptr, p->p1, len, 8));\n-\tcase OM:\n-\t\treturn(wrt_IM((Uint *)ptr,p->p1,p->p2.i[0],len,8));\n-\tcase L:\treturn(wrt_L((Uint *)ptr,p->p1, len));\n-\tcase A: return(wrt_A(ptr,len));\n-\tcase AW:\n-\t\treturn(wrt_AW(ptr,p->p1,len));\n-\tcase D:\n-\tcase E:\n-\tcase EE:\n-\t\treturn(wrt_E((ufloat *)ptr,p->p1,p->p2.i[0],p->p2.i[1],len));\n-\tcase G:\n-\tcase GE:\n-\t\treturn(wrt_G((ufloat *)ptr,p->p1,p->p2.i[0],p->p2.i[1],len));\n-\tcase F:\treturn(wrt_F((ufloat *)ptr,p->p1,p->p2.i[0],len));\n+    case O:\n+      return (wrt_I ((Uint *) ptr, p->p1, len, 8));\n+    case OM:\n+      return (wrt_IM ((Uint *) ptr, p->p1, p->p2.i[0], len, 8));\n+    case L:\n+      return (wrt_L ((Uint *) ptr, p->p1, len));\n+    case A:\n+      return (wrt_A (ptr, len));\n+    case AW:\n+      return (wrt_AW (ptr, p->p1, len));\n+    case D:\n+    case E:\n+    case EE:\n+      return (wrt_E ((ufloat *) ptr, p->p1, p->p2.i[0], p->p2.i[1], len));\n+    case G:\n+    case GE:\n+      return (wrt_G ((ufloat *) ptr, p->p1, p->p2.i[0], p->p2.i[1], len));\n+    case F:\n+      return (wrt_F ((ufloat *) ptr, p->p1, p->p2.i[0], len));\n \n-\t\t/* Z and ZM assume 8-bit bytes. */\n+      /* Z and ZM assume 8-bit bytes. */\n \n-\tcase Z: return(wrt_Z((Uint *)ptr,p->p1,0,len));\n-\tcase ZM:\n-\t\treturn(wrt_Z((Uint *)ptr,p->p1,p->p2.i[0],len));\n-\t}\n+    case Z:\n+      return (wrt_Z ((Uint *) ptr, p->p1, 0, len));\n+    case ZM:\n+      return (wrt_Z ((Uint *) ptr, p->p1, p->p2.i[0], len));\n+    }\n }\n-w_ned(struct syl *p)\n+\n+w_ned (struct syl * p)\n {\n-\tswitch(p->op)\n-\t{\n-\tdefault: fprintf(stderr,\"w_ned, unexpected code: %d\\n\", p->op);\n-\t\tsig_die(f__fmtbuf, 1);\n-\tcase SLASH:\n-\t\treturn((*f__donewrec)());\n-\tcase T: f__cursor = p->p1-f__recpos - 1;\n-\t\treturn(1);\n-\tcase TL: f__cursor -= p->p1;\n-\t\tif(f__cursor < -f__recpos)\t/* TL1000, 1X */\n-\t\t\tf__cursor = -f__recpos;\n-\t\treturn(1);\n-\tcase TR:\n-\tcase X:\n-\t\tf__cursor += p->p1;\n-\t\treturn(1);\n-\tcase APOS:\n-\t\treturn(wrt_AP(p->p2.s));\n-\tcase H:\n-\t\treturn(wrt_H(p->p1,p->p2.s));\n-\t}\n+  switch (p->op)\n+    {\n+    default:\n+      fprintf (stderr, \"w_ned, unexpected code: %d\\n\", p->op);\n+      sig_die (f__fmtbuf, 1);\n+    case SLASH:\n+      return ((*f__donewrec) ());\n+    case T:\n+      f__cursor = p->p1 - f__recpos - 1;\n+      return (1);\n+    case TL:\n+      f__cursor -= p->p1;\n+      if (f__cursor < -f__recpos)\t/* TL1000, 1X */\n+\tf__cursor = -f__recpos;\n+      return (1);\n+    case TR:\n+    case X:\n+      f__cursor += p->p1;\n+      return (1);\n+    case APOS:\n+      return (wrt_AP (p->p2.s));\n+    case H:\n+      return (wrt_H (p->p1, p->p2.s));\n+    }\n }"}, {"sha": "2c71957bae3da6ca72b3841052a3d8e52c2e3a3e", "filename": "libf2c/libI77/wsfe.c", "status": "modified", "additions": 61, "deletions": 54, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwsfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwsfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwsfe.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -5,68 +5,75 @@\n #include \"fmt.h\"\n extern int f__hiwater;\n \n- int\n-x_wSL(void)\n+int\n+x_wSL (void)\n {\n-\tint n = f__putbuf('\\n');\n-\tf__hiwater = f__recpos = f__cursor = 0;\n-\treturn(n == 0);\n+  int n = f__putbuf ('\\n');\n+  f__hiwater = f__recpos = f__cursor = 0;\n+  return (n == 0);\n }\n \n- static int\n-xw_end(void)\n+static int\n+xw_end (void)\n {\n-\tint n;\n+  int n;\n \n-\tif(f__nonl) {\n-\t\tf__putbuf(n = 0);\n-\t\tfflush(f__cf);\n-\t\t}\n-\telse\n-\t\tn = f__putbuf('\\n');\n-\tf__hiwater = f__recpos = f__cursor = 0;\n-\treturn n;\n+  if (f__nonl)\n+    {\n+      f__putbuf (n = 0);\n+      fflush (f__cf);\n+    }\n+  else\n+    n = f__putbuf ('\\n');\n+  f__hiwater = f__recpos = f__cursor = 0;\n+  return n;\n }\n \n- static int\n-xw_rev(void)\n+static int\n+xw_rev (void)\n {\n-\tint n = 0;\n-\tif(f__workdone) {\n-\t\tn = f__putbuf('\\n');\n-\t\tf__workdone = 0;\n-\t\t}\n-\tf__hiwater = f__recpos = f__cursor = 0;\n-\treturn n;\n+  int n = 0;\n+  if (f__workdone)\n+    {\n+      n = f__putbuf ('\\n');\n+      f__workdone = 0;\n+    }\n+  f__hiwater = f__recpos = f__cursor = 0;\n+  return n;\n }\n \n-integer s_wsfe(cilist *a)\t/*start*/\n-{\tint n;\n-\tif(f__init != 1) f_init();\n-\tf__init = 3;\n-\tf__reading=0;\n-\tf__sequential=1;\n-\tf__formatted=1;\n-\tf__external=1;\n-\tif(n=c_sfe(a)) return(n);\n-\tf__elist=a;\n-\tf__hiwater = f__cursor=f__recpos=0;\n-\tf__nonl = 0;\n-\tf__scale=0;\n-\tf__fmtbuf=a->cifmt;\n-\tf__curunit = &f__units[a->ciunit];\n-\tf__cf=f__curunit->ufd;\n-\tif(pars_f(f__fmtbuf)<0) err(a->cierr,100,\"startio\");\n-\tf__putn= x_putc;\n-\tf__doed= w_ed;\n-\tf__doned= w_ned;\n-\tf__doend=xw_end;\n-\tf__dorevert=xw_rev;\n-\tf__donewrec=x_wSL;\n-\tfmt_bg();\n-\tf__cplus=0;\n-\tf__cblank=f__curunit->ublnk;\n-\tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n-\t\terr(a->cierr,errno,\"write start\");\n-\treturn(0);\n+integer\n+s_wsfe (cilist * a)\t\t/*start */\n+{\n+  int n;\n+  if (f__init != 1)\n+    f_init ();\n+  f__init = 3;\n+  f__reading = 0;\n+  f__sequential = 1;\n+  f__formatted = 1;\n+  f__external = 1;\n+  if (n = c_sfe (a))\n+    return (n);\n+  f__elist = a;\n+  f__hiwater = f__cursor = f__recpos = 0;\n+  f__nonl = 0;\n+  f__scale = 0;\n+  f__fmtbuf = a->cifmt;\n+  f__curunit = &f__units[a->ciunit];\n+  f__cf = f__curunit->ufd;\n+  if (pars_f (f__fmtbuf) < 0)\n+    err (a->cierr, 100, \"startio\");\n+  f__putn = x_putc;\n+  f__doed = w_ed;\n+  f__doned = w_ned;\n+  f__doend = xw_end;\n+  f__dorevert = xw_rev;\n+  f__donewrec = x_wSL;\n+  fmt_bg ();\n+  f__cplus = 0;\n+  f__cblank = f__curunit->ublnk;\n+  if (f__curunit->uwrt != 1 && f__nowwriting (f__curunit))\n+    err (a->cierr, errno, \"write start\");\n+  return (0);\n }"}, {"sha": "b418707dd0131a2f41ba9c5338b227c383229256", "filename": "libf2c/libI77/wsle.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwsle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwsle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwsle.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -5,31 +5,34 @@\n #include \"lio.h\"\n #include \"string.h\"\n \n-integer s_wsle(cilist *a)\n+integer\n+s_wsle (cilist * a)\n {\n-\tint n;\n-\tif(n=c_le(a)) return(n);\n-\tf__reading=0;\n-\tf__external=1;\n-\tf__formatted=1;\n-\tf__putn = x_putc;\n-\tf__lioproc = l_write;\n-\tL_len = LINE;\n-\tf__donewrec = x_wSL;\n-\tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n-\t\terr(a->cierr, errno, \"list output start\");\n-\treturn(0);\n-\t}\n+  int n;\n+  if (n = c_le (a))\n+    return (n);\n+  f__reading = 0;\n+  f__external = 1;\n+  f__formatted = 1;\n+  f__putn = x_putc;\n+  f__lioproc = l_write;\n+  L_len = LINE;\n+  f__donewrec = x_wSL;\n+  if (f__curunit->uwrt != 1 && f__nowwriting (f__curunit))\n+    err (a->cierr, errno, \"list output start\");\n+  return (0);\n+}\n \n-integer e_wsle(void)\n+integer\n+e_wsle (void)\n {\n-\tint n;\n-\tf__init = 1;\n-\tn = f__putbuf('\\n');\n-\tf__recpos=0;\n+  int n;\n+  f__init = 1;\n+  n = f__putbuf ('\\n');\n+  f__recpos = 0;\n #ifdef ALWAYS_FLUSH\n-\tif (!n && fflush(f__cf))\n-\t\terr(f__elist->cierr, errno, \"write end\");\n+  if (!n && fflush (f__cf))\n+    err (f__elist->cierr, errno, \"write end\");\n #endif\n-\treturn(n);\n-\t}\n+  return (n);\n+}"}, {"sha": "8211ca76cea606dd081e8ba4f6a61be5a48dab85", "filename": "libf2c/libI77/wsne.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwsne.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fwsne.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwsne.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -2,21 +2,21 @@\n #include \"fio.h\"\n #include \"lio.h\"\n \n- integer\n-s_wsne(cilist *a)\n+integer\n+s_wsne (cilist * a)\n {\n-\tint n;\n+  int n;\n \n-\tif(n=c_le(a))\n-\t\treturn(n);\n-\tf__reading=0;\n-\tf__external=1;\n-\tf__formatted=1;\n-\tf__putn = x_putc;\n-\tL_len = LINE;\n-\tf__donewrec = x_wSL;\n-\tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n-\t\terr(a->cierr, errno, \"namelist output start\");\n-\tx_wsne(a);\n-\treturn e_wsle();\n-\t}\n+  if (n = c_le (a))\n+    return (n);\n+  f__reading = 0;\n+  f__external = 1;\n+  f__formatted = 1;\n+  f__putn = x_putc;\n+  L_len = LINE;\n+  f__donewrec = x_wSL;\n+  if (f__curunit->uwrt != 1 && f__nowwriting (f__curunit))\n+    err (a->cierr, errno, \"namelist output start\");\n+  x_wsne (a);\n+  return e_wsle ();\n+}"}, {"sha": "68b606c8276c3d62573920dcb1c6691eee7637c2", "filename": "libf2c/libI77/xwsne.c", "status": "modified", "additions": 52, "deletions": 49, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fxwsne.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibI77%2Fxwsne.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fxwsne.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -7,62 +7,65 @@\n extern int f__Aquote;\n \n static void\n-nl_donewrec(void)\n+nl_donewrec (void)\n {\n-\t(*f__donewrec)();\n-\tPUT(' ');\n-\t}\n+  (*f__donewrec) ();\n+  PUT (' ');\n+}\n \n #include <string.h>\n \n void\n-x_wsne(cilist *a)\n+x_wsne (cilist * a)\n {\n-\tNamelist *nl;\n-\tchar *s;\n-\tVardesc *v, **vd, **vde;\n-\tftnint number, type;\n-\tftnlen *dims;\n-\tftnlen size;\n-\textern ftnlen f__typesize[];\n+  Namelist *nl;\n+  char *s;\n+  Vardesc *v, **vd, **vde;\n+  ftnint number, type;\n+  ftnlen *dims;\n+  ftnlen size;\n+  extern ftnlen f__typesize[];\n \n-\tnl = (Namelist *)a->cifmt;\n-\tPUT('&');\n-\tfor(s = nl->name; *s; s++)\n-\t\tPUT(*s);\n-\tPUT(' ');\n-\tf__Aquote = 1;\n-\tvd = nl->vars;\n-\tvde = vd + nl->nvars;\n-\twhile(vd < vde) {\n-\t\tv = *vd++;\n-\t\ts = v->name;\n+  nl = (Namelist *) a->cifmt;\n+  PUT ('&');\n+  for (s = nl->name; *s; s++)\n+    PUT (*s);\n+  PUT (' ');\n+  f__Aquote = 1;\n+  vd = nl->vars;\n+  vde = vd + nl->nvars;\n+  while (vd < vde)\n+    {\n+      v = *vd++;\n+      s = v->name;\n #ifdef No_Extra_Namelist_Newlines\n-\t\tif (f__recpos+strlen(s)+2 >= L_len)\n+      if (f__recpos + strlen (s) + 2 >= L_len)\n #endif\n-\t\t\tnl_donewrec();\n-\t\twhile(*s)\n-\t\t\tPUT(*s++);\n-\t\tPUT(' ');\n-\t\tPUT('=');\n-\t\tnumber = (dims = v->dims) ? dims[1] : 1;\n-\t\ttype = v->type;\n-\t\tif (type < 0) {\n-\t\t\tsize = -type;\n-\t\t\ttype = TYCHAR;\n-\t\t\t}\n-\t\telse\n-\t\t\tsize = f__typesize[type];\n-\t\tl_write(&number, v->addr, size, type);\n-\t\tif (vd < vde) {\n-\t\t\tif (f__recpos+2 >= L_len)\n-\t\t\t\tnl_donewrec();\n-\t\t\tPUT(',');\n-\t\t\tPUT(' ');\n-\t\t\t}\n-\t\telse if (f__recpos+1 >= L_len)\n-\t\t\tnl_donewrec();\n-\t\t}\n-\tf__Aquote = 0;\n-\tPUT('/');\n+\tnl_donewrec ();\n+      while (*s)\n+\tPUT (*s++);\n+      PUT (' ');\n+      PUT ('=');\n+      number = (dims = v->dims) ? dims[1] : 1;\n+      type = v->type;\n+      if (type < 0)\n+\t{\n+\t  size = -type;\n+\t  type = TYCHAR;\n+\t}\n+      else\n+\tsize = f__typesize[type];\n+      l_write (&number, v->addr, size, type);\n+      if (vd < vde)\n+\t{\n+\t  if (f__recpos + 2 >= L_len)\n+\t    nl_donewrec ();\n+\t  PUT (',');\n+\t  PUT (' ');\n \t}\n+      else if (f__recpos + 1 >= L_len)\n+\tnl_donewrec ();\n+    }\n+  f__Aquote = 0;\n+  PUT ('/');\n+}"}, {"sha": "02dcd51f5bc24bddd7ec73c01fa184f9c829cf26", "filename": "libf2c/libU77/access_.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Faccess_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Faccess_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Faccess_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -45,27 +45,40 @@ Boston, MA 02111-1307, USA.  */\n #  define F_OK 0\n #endif\n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_access_0 (const char *name, const char *mode, ftnlen Lname, ftnlen Lmode)\n+integer\n+G77_access_0 (const char *name, const char *mode, ftnlen Lname, ftnlen Lmode)\n {\n   char *buff;\n   char *bp, *blast;\n   int amode, i;\n \n-  buff = malloc (Lname+1);\n-  if (!buff) return -1;\n+  buff = malloc (Lname + 1);\n+  if (!buff)\n+    return -1;\n   g_char (name, Lname, buff);\n   amode = 0;\n-  for (i=0;i<Lmode;i++) {\n-    switch (mode[i]) {\n-    case 'r': amode |= R_OK; break;\n-    case 'w': amode |= W_OK; break;\n-    case 'x': amode |= X_OK; break;\n-    case ' ': amode |= F_OK; break; /* as per Sun, at least */\n-    default: return EINVAL;\n+  for (i = 0; i < Lmode; i++)\n+    {\n+      switch (mode[i])\n+\t{\n+\tcase 'r':\n+\t  amode |= R_OK;\n+\t  break;\n+\tcase 'w':\n+\t  amode |= W_OK;\n+\t  break;\n+\tcase 'x':\n+\t  amode |= X_OK;\n+\t  break;\n+\tcase ' ':\n+\t  amode |= F_OK;\n+\t  break;\t\t/* as per Sun, at least */\n+\tdefault:\n+\t  return EINVAL;\n+\t}\n     }\n-  }\n   i = access (buff, amode);\n   free (buff);\n   return i;"}, {"sha": "d2c93824490cbb769550dbe83463e5a3f184f9d8", "filename": "libf2c/libU77/alarm_.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Falarm_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Falarm_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Falarm_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -31,20 +31,21 @@ Boston, MA 02111-1307, USA.  */\n /* we shouldn't rely on this... */\n #define RETSIGTYPE void\n #endif\n-typedef RETSIGTYPE (*sig_type)();\n+typedef RETSIGTYPE (*sig_type) ();\n \n #include <signal.h>\n-typedef int (*sig_proc)(int);\n+typedef int (*sig_proc) (int);\n \n #ifndef SIG_ERR\n #define SIG_ERR ((sig_type) -1)\n #endif\n \n-integer G77_alarm_0 (integer *seconds, sig_proc proc)\n+integer\n+G77_alarm_0 (integer * seconds, sig_proc proc)\n {\n   int status;\n #if defined (HAVE_ALARM) && defined (SIGALRM)\n-  if (signal(SIGALRM, (sig_type)proc) == SIG_ERR)\n+  if (signal (SIGALRM, (sig_type) proc) == SIG_ERR)\n     status = -1;\n   else\n     status = alarm (*seconds);"}, {"sha": "73373fdd223b652c04ee2860af1b0aaf6d515ac4", "filename": "libf2c/libU77/bes.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fbes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fbes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fbes.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -16,31 +16,43 @@ License along with GNU Fortran; see the file COPYING.LIB.  If\n not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#if 0 \t/* Don't include these unless necessary -- jcb. */\n+#if 0\t\t\t\t/* Don't include these unless necessary -- jcb. */\n #include \"f2c.h\"\n #include <math.h>\n \n-double G77_besj0_0 (const real *x) {\n-    return j0 (*x);\n+double\n+G77_besj0_0 (const real * x)\n+{\n+  return j0 (*x);\n }\n \n-double G77_besj1_0 (const real *x) {\n-    return j1 (*x);\n+double\n+G77_besj1_0 (const real * x)\n+{\n+  return j1 (*x);\n }\n \n-double G77_besjn_0 (const integer *n, real *x) {\n-     return jn (*n, *x);\n- }\n+double\n+G77_besjn_0 (const integer * n, real * x)\n+{\n+  return jn (*n, *x);\n+}\n \n-double G77_besy0_0 (const real *x) {\n-    return y0 (*x);\n+double\n+G77_besy0_0 (const real * x)\n+{\n+  return y0 (*x);\n }\n \n-double G77_besy1_0 (const real *x) {\n-    return y1 (*x);\n+double\n+G77_besy1_0 (const real * x)\n+{\n+  return y1 (*x);\n }\n \n-double G77_besyn_0 (const integer *n, real *x) {\n-    return yn (*n, *x);\n+double\n+G77_besyn_0 (const integer * n, real * x)\n+{\n+  return yn (*n, *x);\n }\n #endif"}, {"sha": "d9afb5736594245faa44b7ba405c6bf199d7fd4c", "filename": "libf2c/libU77/chdir_.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fchdir_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fchdir_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fchdir_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -32,16 +32,18 @@ Boston, MA 02111-1307, USA.  */\n #include \"f2c.h\"\n \n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_chdir_0 (const char *name, const ftnlen Lname)\n+integer\n+G77_chdir_0 (const char *name, const ftnlen Lname)\n {\n   char *buff;\n   char *bp, *blast;\n   int i;\n \n-  buff = malloc (Lname+1);\n-  if (!buff) return -1;\n+  buff = malloc (Lname + 1);\n+  if (!buff)\n+    return -1;\n   g_char (name, Lname, buff);\n   i = chdir (buff);\n   free (buff);"}, {"sha": "554d259a6d93b831cd743ce64622944dab091ae6", "filename": "libf2c/libU77/chmod_.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fchmod_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fchmod_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fchmod_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -41,10 +41,13 @@ Boston, MA 02111-1307, USA.  */\n #define CHMOD_PATH \"/bin/chmod\"\n #endif\n \n-extern void s_cat(char *lp, char *rpp[], ftnlen rnp[], ftnlen *np, ftnlen ll);\n-void g_char(const char *a, ftnlen alen, char *b);\n+extern void s_cat (char *lp, char *rpp[], ftnlen rnp[], ftnlen * np,\n+\t\t   ftnlen ll);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_chmod_0 (/* const */ char *name, /* const */ char *mode, const ftnlen Lname, const ftnlen Lmode)\n+integer\n+G77_chmod_0 ( /* const */ char *name, /* const */ char *mode,\n+\t     const ftnlen Lname, const ftnlen Lmode)\n {\n   char *buff;\n   char *bp, *blast;\n@@ -53,20 +56,27 @@ integer G77_chmod_0 (/* const */ char *name, /* const */ char *mode, const ftnle\n   ftnlen six = 6;\n   address a[6];\n   ftnlen ii[6];\n-  char chmod_path [] = CHMOD_PATH;\n+  char chmod_path[] = CHMOD_PATH;\n   l = strlen (chmod_path);\n-  buff = malloc (Lname+Lmode+l+3+13+1);\n-  if (!buff) return -1;\n-  ii[0] = l; a[0] = chmod_path;\n-  ii[1] = 1; a[1] = \" \";\n-  ii[2] = Lmode; a[2] = mode;\n-  ii[3] = 2; a[3] = \" '\";\n-  for (l2=Lname; (l2 > 1) && (name[l2-1] == ' '); )\n+  buff = malloc (Lname + Lmode + l + 3 + 13 + 1);\n+  if (!buff)\n+    return -1;\n+  ii[0] = l;\n+  a[0] = chmod_path;\n+  ii[1] = 1;\n+  a[1] = \" \";\n+  ii[2] = Lmode;\n+  a[2] = mode;\n+  ii[3] = 2;\n+  a[3] = \" '\";\n+  for (l2 = Lname; (l2 > 1) && (name[l2 - 1] == ' ');)\n     l2--;\n-  ii[4] = l2; a[4] = name;\n-  ii[5] = 13; a[5] = \"' 2>/dev/null\";\n-  s_cat (buff, a, ii, &six, Lname+Lmode+l+3+13);\n-  buff[Lname+Lmode+l+3+13] = '\\0';\n+  ii[4] = l2;\n+  a[4] = name;\n+  ii[5] = 13;\n+  a[5] = \"' 2>/dev/null\";\n+  s_cat (buff, a, ii, &six, Lname + Lmode + l + 3 + 13);\n+  buff[Lname + Lmode + l + 3 + 13] = '\\0';\n   i = system (buff);\n   free (buff);\n   return i;"}, {"sha": "34e6d7c712e1f54d3b582b97e6c79efcfc03b64e", "filename": "libf2c/libU77/ctime_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fctime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fctime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fctime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -39,7 +39,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* may need sys/time.h & long arg for stime (bsd, svr1-3) */\n \n-/* Character */ void G77_ctime_0 (char *chtime, const ftnlen Lchtime, longint * xstime)\n+/* Character */ void\n+G77_ctime_0 (char *chtime, const ftnlen Lchtime, longint * xstime)\n {\n   int i, l;\n   int s_copy ();"}, {"sha": "fffbe20d496ad1ae5247a2eb1e637e9421b5dea5", "filename": "libf2c/libU77/date_.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdate_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdate_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fdate_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -9,47 +9,47 @@\n \n static integer c__5 = 5;\n \n-/* Subroutine */ int G77_date_y2kbug_0 (char *buf, ftnlen buf_len)\n+/* Subroutine */ int\n+G77_date_y2kbug_0 (char *buf, ftnlen buf_len)\n {\n-    /* System generated locals */\n-    address a__1[5];\n-    longint i__1;\n-    integer i__2[5];\n-    char ch__1[24];\n-\n-    /* Builtin functions */\n-    /* Subroutine */ int s_copy(), s_cat();\n-\n-    /* Local variables */\n-    static char cbuf[24];\n-    extern longint G77_time_0 ();\n-    extern /* Character */ void G77_ctime_0 ();\n-\n-    i__1 = G77_time_0 ();\n-    G77_ctime_0 (ch__1, 24L, &i__1);\n-    s_copy(cbuf, ch__1, 24L, 24L);\n+  /* System generated locals */\n+  address a__1[5];\n+  longint i__1;\n+  integer i__2[5];\n+  char ch__1[24];\n+\n+  /* Builtin functions */\n+  /* Subroutine */ int s_copy (), s_cat ();\n+\n+  /* Local variables */\n+  static char cbuf[24];\n+  extern longint G77_time_0 ();\n+  extern /* Character */ void G77_ctime_0 ();\n+\n+  i__1 = G77_time_0 ();\n+  G77_ctime_0 (ch__1, 24L, &i__1);\n+  s_copy (cbuf, ch__1, 24L, 24L);\n /* Writing concatenation */\n-    i__2[0] = 2, a__1[0] = cbuf + 8;\n-    i__2[1] = 1, a__1[1] = \"-\";\n-    i__2[2] = 3, a__1[2] = cbuf + 4;\n-    i__2[3] = 1, a__1[3] = \"-\";\n-    i__2[4] = 2, a__1[4] = cbuf + 22;\n-    s_cat(buf, a__1, i__2, &c__5, buf_len);\n-    return 0;\n-} /* date_ */\n+  i__2[0] = 2, a__1[0] = cbuf + 8;\n+  i__2[1] = 1, a__1[1] = \"-\";\n+  i__2[2] = 3, a__1[2] = cbuf + 4;\n+  i__2[3] = 1, a__1[3] = \"-\";\n+  i__2[4] = 2, a__1[4] = cbuf + 22;\n+  s_cat (buf, a__1, i__2, &c__5, buf_len);\n+  return 0;\n+}\t\t\t\t/* date_ */\n \n #ifdef PIC\n #  include <stdio.h>\n \n const char *G77_Non_Y2K_Compliance_Message =\n-   \"Call to non Y2K compliant subroutine detected.\";\n+  \"Call to non Y2K compliant subroutine detected.\";\n \n-int G77_date_y2kbuggy_0 (char *buf, ftnlen buf_len)\n+int\n+G77_date_y2kbuggy_0 (char *buf, ftnlen buf_len)\n {\n-  extern int G77_abort_0();\n+  extern int G77_abort_0 ();\n   fprintf (stderr, \"%s\\n\", G77_Non_Y2K_Compliance_Message);\n-  G77_abort_0();\n+  G77_abort_0 ();\n }\n #endif\n-\n-"}, {"sha": "40786ed8e6dc1f6f9d9014060677a3fc60a13ed6", "filename": "libf2c/libU77/datetime_.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdatetime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdatetime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fdatetime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -33,14 +33,15 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);\n+void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);\n \n-int G77_date_and_time_0 (char *date, char *fftime, char *zone,\n-\t\t\t integer *values, ftnlen date_len,\n-\t\t\t ftnlen fftime_len, ftnlen zone_len)\n+int\n+G77_date_and_time_0 (char *date, char *fftime, char *zone,\n+\t\t     integer * values, ftnlen date_len,\n+\t\t     ftnlen fftime_len, ftnlen zone_len)\n {\n-  time_t lt=time(&lt);\n-  struct tm ltime = *localtime(&lt), gtime = *gmtime(&lt);\n+  time_t lt = time (&lt);\n+  struct tm ltime = *localtime (&lt), gtime = *gmtime (&lt);\n   char dat[9], zon[6], ftim[11];\n   int i, vals[8];\n \n@@ -49,18 +50,18 @@ int G77_date_and_time_0 (char *date, char *fftime, char *zone,\n   vals[2] = ltime.tm_mday;\n   /* fixme: year boundaries */\n   vals[3] = (ltime.tm_min - gtime.tm_min +\n-\t     60*(ltime.tm_hour - gtime.tm_hour +\n-\t\t 24*(ltime.tm_yday -gtime.tm_yday)));\n+\t     60 * (ltime.tm_hour - gtime.tm_hour +\n+\t\t   24 * (ltime.tm_yday - gtime.tm_yday)));\n   vals[4] = ltime.tm_hour;\n   vals[5] = ltime.tm_min;\n   vals[6] = ltime.tm_sec;\n-  vals[7] = 0;                  /* no STDC/POSIX way to get this */\n+  vals[7] = 0;\t\t\t/* no STDC/POSIX way to get this */\n   /* GNUish way; maybe use `ftime' on other systems. */\n #if HAVE_GETTIMEOFDAY\n   {\n     struct timeval tp;\n #  if GETTIMEOFDAY_ONE_ARGUMENT\n-    if (! gettimeofday (&tp))\n+    if (!gettimeofday (&tp))\n #  else\n #    if HAVE_STRUCT_TIMEZONE\n     struct timezone tzp;\n@@ -70,26 +71,28 @@ int G77_date_and_time_0 (char *date, char *fftime, char *zone,\n        HPUX.  Configure checks if gettimeofday actually fails with a\n        non-NULL arg and pretends that struct timezone is missing if it\n        does fail.  */\n-    if (! gettimeofday (&tp, &tzp))\n+    if (!gettimeofday (&tp, &tzp))\n #    else\n-    if (! gettimeofday (&tp, (void *) 0))\n+    if (!gettimeofday (&tp, (void *) 0))\n #    endif /* HAVE_STRUCT_TIMEZONE */\n #  endif /* GETTIMEOFDAY_ONE_ARGUMENT */\n-      vals[7] = tp.tv_usec/1000;\n+      vals[7] = tp.tv_usec / 1000;\n   }\n #endif /* HAVE_GETTIMEOFDAY */\n   if (values)\t\t\t/* null pointer for missing optional */\n-    for (i=0; i<=7; i++)\n+    for (i = 0; i <= 7; i++)\n       values[i] = vals[i];\n   sprintf (dat, \"%04d%02d%02d\", vals[0], vals[1], vals[2]);\n-  s_copy(date, dat, date_len, 8);\n-  if (zone) {\n-    sprintf(zon, \"%+03d%02d\", vals[3] / 60, abs(vals[3] % 60));\n-    s_copy(zone, zon, zone_len, 5);\n-  }\n-  if (fftime) {\n-    sprintf (ftim, \"%02d%02d%02d.%03d\", vals[4], vals[5], vals[6], vals[7]);\n-    s_copy(fftime, ftim, fftime_len, 10);\n-  }\n+  s_copy (date, dat, date_len, 8);\n+  if (zone)\n+    {\n+      sprintf (zon, \"%+03d%02d\", vals[3] / 60, abs (vals[3] % 60));\n+      s_copy (zone, zon, zone_len, 5);\n+    }\n+  if (fftime)\n+    {\n+      sprintf (ftim, \"%02d%02d%02d.%03d\", vals[4], vals[5], vals[6], vals[7]);\n+      s_copy (fftime, ftim, fftime_len, 10);\n+    }\n   return 0;\n }"}, {"sha": "8a31746102e8cf16556d6491a5f38d8c3ab1ecf0", "filename": "libf2c/libU77/dbes.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdbes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdbes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fdbes.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -16,31 +16,43 @@ License along with GNU Fortran; see the file COPYING.LIB.  If\n not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#if 0 \t/* Don't include these unless necessary -- dnp. */\n+#if 0\t\t\t\t/* Don't include these unless necessary -- dnp. */\n #include \"f2c.h\"\n #include <math.h>\n \n-double G77_dbesj0_0 (const double *x) {\n-    return j0 (*x);\n+double\n+G77_dbesj0_0 (const double *x)\n+{\n+  return j0 (*x);\n }\n \n-double G77_dbesj1_0 (const double *x) {\n-    return j1 (*x);\n+double\n+G77_dbesj1_0 (const double *x)\n+{\n+  return j1 (*x);\n }\n \n-double G77_dbesjn_0 (const integer *n, double *x) {\n-     return jn (*n, *x);\n- }\n+double\n+G77_dbesjn_0 (const integer * n, double *x)\n+{\n+  return jn (*n, *x);\n+}\n \n-double G77_dbesy0_0 (const double *x) {\n-    return y0 (*x);\n+double\n+G77_dbesy0_0 (const double *x)\n+{\n+  return y0 (*x);\n }\n \n-double G77_dbesy1_0 (const double *x) {\n-    return y1 (*x);\n+double\n+G77_dbesy1_0 (const double *x)\n+{\n+  return y1 (*x);\n }\n \n-double G77_dbesyn_0 (const integer *n, double *x) {\n-    return yn (*n, *x);\n+double\n+G77_dbesyn_0 (const integer * n, double *x)\n+{\n+  return yn (*n, *x);\n }\n #endif"}, {"sha": "cc3961b4dffb3df2a526e1ed474070472d92d0ee", "filename": "libf2c/libU77/dtime_.c", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdtime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fdtime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fdtime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -51,7 +51,8 @@ Boston, MA 02111-1307, USA.  */\n    different to all others. */\n static long clk_tck = 0;\n \n-double G77_dtime_0 (real tarray[2])\n+double\n+G77_dtime_0 (real tarray[2])\n {\n #if defined (_WIN32)\n   static int win32_platform = -1;\n@@ -63,7 +64,7 @@ double G77_dtime_0 (real tarray[2])\n       GetVersionEx (&osv);\n       win32_platform = osv.dwPlatformId;\n     }\n-  \n+\n   /* We need to use this hack on non-NT platforms, where the first call\n      returns 0.0 and subsequent ones return the correct value. */\n   if (win32_platform != VER_PLATFORM_WIN32_NT)\n@@ -77,23 +78,23 @@ double G77_dtime_0 (real tarray[2])\n       if (clock_freq == 0)\n \t{\n \t  LARGE_INTEGER freq;\n-\t  if (! QueryPerformanceFrequency (&freq))\n+\t  if (!QueryPerformanceFrequency (&freq))\n \t    {\n \t      errno = ENOSYS;\n \t      return 0.0;\n \t    }\n \t  else\n \t    {\n \t      clock_freq = ((unsigned long long) freq.HighPart << 32)\n-                           + ((unsigned) freq.LowPart);\n+\t\t+ ((unsigned) freq.LowPart);\n \t    }\n \t}\n \n-      if (! QueryPerformanceCounter (&counter_val))\n+      if (!QueryPerformanceCounter (&counter_val))\n \treturn -1.0;\n \n       count = ((unsigned long long) counter_val.HighPart << 32)\n-              + (unsigned) counter_val.LowPart;\n+\t+ (unsigned) counter_val.LowPart;\n       delta = ((double) (count - old_count)) / clock_freq;\n       tarray[0] = (float) delta;\n       tarray[1] = 0.0;\n@@ -107,10 +108,10 @@ double G77_dtime_0 (real tarray[2])\n \n       GetProcessTimes (GetCurrentProcess (), &creation_time, &exit_time,\n \t\t       &kernel_time, &user_time);\n-      utime = ((unsigned long long) user_time.dwHighDateTime << 32) \n-\t      + (unsigned) user_time.dwLowDateTime;\n-      stime = ((unsigned long long) kernel_time.dwHighDateTime << 32) \n-\t      + (unsigned) kernel_time.dwLowDateTime;\n+      utime = ((unsigned long long) user_time.dwHighDateTime << 32)\n+\t+ (unsigned) user_time.dwLowDateTime;\n+      stime = ((unsigned long long) kernel_time.dwHighDateTime << 32)\n+\t+ (unsigned) kernel_time.dwLowDateTime;\n \n       tarray[0] = (utime - old_utime) / 1.0e7;\n       tarray[1] = (stime - old_stime) / 1.0e7;\n@@ -126,40 +127,47 @@ double G77_dtime_0 (real tarray[2])\n   static float old_utime = 0.0, old_stime = 0.0;\n   struct rusage rbuff;\n \n-   if (getrusage (RUSAGE_SELF, &rbuff) != 0)\n-     abort ();\n-   utime = (float) (rbuff.ru_utime).tv_sec +\n-\t   (float) (rbuff.ru_utime).tv_usec/1000000.0;\n-   tarray[0] = utime - (float) old_utime;\n-   stime = (float) (rbuff.ru_stime).tv_sec +\n-\t   (float) (rbuff.ru_stime).tv_usec/1000000.0;\n+  if (getrusage (RUSAGE_SELF, &rbuff) != 0)\n+    abort ();\n+  utime = (float) (rbuff.ru_utime).tv_sec +\n+    (float) (rbuff.ru_utime).tv_usec / 1000000.0;\n+  tarray[0] = utime - (float) old_utime;\n+  stime = (float) (rbuff.ru_stime).tv_sec +\n+    (float) (rbuff.ru_stime).tv_usec / 1000000.0;\n   tarray[1] = stime - old_stime;\n-#else  /* HAVE_GETRUSAGE */\n+#else /* HAVE_GETRUSAGE */\n   time_t utime, stime;\n   static time_t old_utime = 0, old_stime = 0;\n   struct tms buffer;\n \n /* NeXTStep seems to define _SC_CLK_TCK but not to have sysconf;\n    fixme: does using _POSIX_VERSION help? */\n #  if defined _SC_CLK_TCK && defined _POSIX_VERSION\n-  if (! clk_tck) clk_tck = sysconf(_SC_CLK_TCK);\n+  if (!clk_tck)\n+    clk_tck = sysconf (_SC_CLK_TCK);\n #  elif defined CLOCKS_PER_SECOND\n-  if (! clk_tck) clk_tck = CLOCKS_PER_SECOND;\n+  if (!clk_tck)\n+    clk_tck = CLOCKS_PER_SECOND;\n #  elif defined CLK_TCK\n-  if (! clk_tck) clk_tck = CLK_TCK;\n+  if (!clk_tck)\n+    clk_tck = CLK_TCK;\n #  elif defined HZ\n-  if (! clk_tck) clk_tck = HZ;\n+  if (!clk_tck)\n+    clk_tck = HZ;\n #  elif defined HAVE_GETRUSAGE\n #  else\n-  #error Dont know clock tick length\n+#error Dont know clock tick length\n #  endif\n-  if (times(&buffer) == (clock_t)-1) return -1.0;\n-  utime = buffer.tms_utime; stime = buffer.tms_stime;\n-  tarray[0] = ((float)(utime - old_utime)) / (float)clk_tck;\n-  tarray[1] = ((float)(stime - old_stime)) / (float)clk_tck;\n+  if (times (&buffer) == (clock_t) - 1)\n+    return -1.0;\n+  utime = buffer.tms_utime;\n+  stime = buffer.tms_stime;\n+  tarray[0] = ((float) (utime - old_utime)) / (float) clk_tck;\n+  tarray[1] = ((float) (stime - old_stime)) / (float) clk_tck;\n #endif /* HAVE_GETRUSAGE */\n-  old_utime = utime; old_stime = stime;\n-  return (tarray[0]+tarray[1]);\n+  old_utime = utime;\n+  old_stime = stime;\n+  return (tarray[0] + tarray[1]);\n #else /* ! HAVE_GETRUSAGE && ! HAVE_TIMES */\n   errno = ENOSYS;\n   return 0.0;"}, {"sha": "f942ea829b6e747b28802eff48136569d83e676f", "filename": "libf2c/libU77/etime_.c", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fetime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fetime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fetime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -51,7 +51,8 @@ Boston, MA 02111-1307, USA.  */\n    different to all others. */\n static long clk_tck = 0;\n \n-double G77_etime_0 (real tarray[2])\n+double\n+G77_etime_0 (real tarray[2])\n {\n #if defined (_WIN32)\n   static int win32_platform = -1;\n@@ -64,7 +65,7 @@ double G77_etime_0 (real tarray[2])\n       GetVersionEx (&osv);\n       win32_platform = osv.dwPlatformId;\n     }\n-  \n+\n   /* non-NT platforms don't have a clue as to how long a process has\n      been running, so simply return the uptime. Bad judgement call? */\n   if (win32_platform != VER_PLATFORM_WIN32_NT)\n@@ -77,27 +78,27 @@ double G77_etime_0 (real tarray[2])\n       if (clock_freq == 0)\n \t{\n \t  LARGE_INTEGER freq;\n-\t  if (! QueryPerformanceFrequency (&freq))\n+\t  if (!QueryPerformanceFrequency (&freq))\n \t    {\n \t      errno = ENOSYS;\n \t      return 0.0;\n \t    }\n \t  else\n \t    {\n \t      clock_freq = ((unsigned long long) freq.HighPart << 32)\n-                           + ((unsigned) freq.LowPart);\n-\t      if (! QueryPerformanceCounter (&counter_val))\n+\t\t+ ((unsigned) freq.LowPart);\n+\t      if (!QueryPerformanceCounter (&counter_val))\n \t\treturn -1.0;\n \t      old_count = ((unsigned long long) counter_val.HighPart << 32)\n-\t                  + (unsigned) counter_val.LowPart;\n+\t\t+ (unsigned) counter_val.LowPart;\n \t    }\n \t}\n \n-      if (! QueryPerformanceCounter (&counter_val))\n+      if (!QueryPerformanceCounter (&counter_val))\n \treturn -1.0;\n \n       count = ((unsigned long long) counter_val.HighPart << 32)\n-              + (unsigned) counter_val.LowPart;\n+\t+ (unsigned) counter_val.LowPart;\n       tarray[0] = usertime = (double) (count - old_count) / clock_freq;\n       tarray[1] = systime = 0.0;\n     }\n@@ -109,48 +110,53 @@ double G77_etime_0 (real tarray[2])\n       GetProcessTimes (GetCurrentProcess (), &creation_time, &exit_time,\n \t\t       &kernel_time, &user_time);\n       utime = ((unsigned long long) user_time.dwHighDateTime << 32)\n-\t      + (unsigned) user_time.dwLowDateTime;\n+\t+ (unsigned) user_time.dwLowDateTime;\n       stime = ((unsigned long long) kernel_time.dwHighDateTime << 32)\n-\t      + (unsigned) kernel_time.dwLowDateTime;\n+\t+ (unsigned) kernel_time.dwLowDateTime;\n \n       tarray[0] = usertime = utime / 1.0e7;\n       tarray[1] = systime = stime / 1.0e7;\n-  }\n+    }\n   return usertime + systime;\n \n #elif defined (HAVE_GETRUSAGE) || defined (HAVE_TIMES)\n   /* The getrusage version is only the default for convenience. */\n #ifdef HAVE_GETRUSAGE\n   struct rusage rbuff;\n \n-   if (getrusage (RUSAGE_SELF, &rbuff) != 0)\n-     abort ();\n-   tarray[0] = ((float) (rbuff.ru_utime).tv_sec +\n-\t       (float) (rbuff.ru_utime).tv_usec/1000000.0);\n-   tarray[1] = ((float) (rbuff.ru_stime).tv_sec +\n-\t       (float) (rbuff.ru_stime).tv_usec/1000000.0);\n-#else  /* HAVE_GETRUSAGE */\n+  if (getrusage (RUSAGE_SELF, &rbuff) != 0)\n+    abort ();\n+  tarray[0] = ((float) (rbuff.ru_utime).tv_sec +\n+\t       (float) (rbuff.ru_utime).tv_usec / 1000000.0);\n+  tarray[1] = ((float) (rbuff.ru_stime).tv_sec +\n+\t       (float) (rbuff.ru_stime).tv_usec / 1000000.0);\n+#else /* HAVE_GETRUSAGE */\n   struct tms buffer;\n \n /* NeXTStep seems to define _SC_CLK_TCK but not to have sysconf;\n    fixme: does using _POSIX_VERSION help? */\n #  if defined _SC_CLK_TCK && defined _POSIX_VERSION\n-  if (! clk_tck) clk_tck = sysconf(_SC_CLK_TCK);\n+  if (!clk_tck)\n+    clk_tck = sysconf (_SC_CLK_TCK);\n #  elif defined CLOCKS_PER_SECOND\n-  if (! clk_tck) clk_tck = CLOCKS_PER_SECOND;\n+  if (!clk_tck)\n+    clk_tck = CLOCKS_PER_SECOND;\n #  elif defined CLK_TCK\n-  if (! clk_tck) clk_tck = CLK_TCK;\n+  if (!clk_tck)\n+    clk_tck = CLK_TCK;\n #  elif defined HZ\n-  if (! clk_tck) clk_tck = HZ;\n+  if (!clk_tck)\n+    clk_tck = HZ;\n #  elif defined HAVE_GETRUSAGE\n #  else\n-  #error Dont know clock tick length\n+#error Dont know clock tick length\n #  endif\n-  if (times(&buffer) == (clock_t)-1) return -1.0;\n-  tarray[0] = (float) buffer.tms_utime / (float)clk_tck;\n-  tarray[1] = (float) buffer.tms_stime / (float)clk_tck;\n+  if (times (&buffer) == (clock_t) - 1)\n+    return -1.0;\n+  tarray[0] = (float) buffer.tms_utime / (float) clk_tck;\n+  tarray[1] = (float) buffer.tms_stime / (float) clk_tck;\n #endif /* HAVE_GETRUSAGE */\n-  return (tarray[0]+tarray[1]);\n+  return (tarray[0] + tarray[1]);\n #else /* ! HAVE_GETRUSAGE && ! HAVE_TIMES */\n   errno = ENOSYS;\n   return 0.0;"}, {"sha": "d710a5cb3be61daa01f07885fc48450ab5382217", "filename": "libf2c/libU77/fdate_.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffdate_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffdate_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Ffdate_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -43,12 +43,13 @@ Boston, MA 02111-1307, USA.  */\n    also a subroutine version.  Of course, the calling convention is\n    essentially the same for both. */\n \n-/* Character *24 */ void G77_fdate_0 (char *ret_val, ftnlen ret_val_len)\n+/* Character *24 */ void\n+G77_fdate_0 (char *ret_val, ftnlen ret_val_len)\n {\n-    int s_copy ();\n-    time_t tloc;\n-    tloc = time (NULL);\n-    /* Allow a length other than 24 for compatibility with what other\n-       systems do, despite it being documented as 24. */\n-    s_copy (ret_val, ctime ((time_t *) &tloc), ret_val_len, 24);\n+  int s_copy ();\n+  time_t tloc;\n+  tloc = time (NULL);\n+  /* Allow a length other than 24 for compatibility with what other\n+     systems do, despite it being documented as 24. */\n+  s_copy (ret_val, ctime ((time_t *) & tloc), ret_val_len, 24);\n }"}, {"sha": "ec94829a6a1e743fec8788afcf5dc49da3a1c699", "filename": "libf2c/libU77/fgetc_.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffgetc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffgetc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Ffgetc_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -26,30 +26,36 @@ Boston, MA 02111-1307, USA.  */\n #include \"f2c.h\"\n #include \"fio.h\"\n \n-integer G77_fgetc_0 (const integer *lunit, char *c, ftnlen Lc)\n+integer\n+G77_fgetc_0 (const integer * lunit, char *c, ftnlen Lc)\n {\n   int err;\n   FILE *f = f__units[*lunit].ufd;\n \n-  if (*lunit>=MXUNIT || *lunit<0)\n+  if (*lunit >= MXUNIT || *lunit < 0)\n     return 101;\t\t\t/* bad unit error */\n   err = getc (f);\n-  if (err == EOF) {\n-    if (feof (f))\n-      return -1;\n-    else\n-      return ferror (f); }\n-  else {\n-    if (Lc == 0)\n+  if (err == EOF)\n+    {\n+      if (feof (f))\n+\treturn -1;\n+      else\n+\treturn ferror (f);\n+    }\n+  else\n+    {\n+      if (Lc == 0)\n+\treturn 0;\n+\n+      c[0] = err;\n+      while (--Lc)\n+\t*++c = ' ';\n       return 0;\n-\n-    c[0] = err;\n-    while (--Lc)\n-      *++c = ' ';\n-    return 0; }\n+    }\n }\n \n-integer G77_fget_0 (char *c, const ftnlen Lc)\n+integer\n+G77_fget_0 (char *c, const ftnlen Lc)\n {\n   integer five = 5;\n "}, {"sha": "7327593be8f92de2b93dd9537f0827de349cc84a", "filename": "libf2c/libU77/flush1_.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fflush1_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fflush1_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fflush1_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -27,13 +27,14 @@ Boston, MA 02111-1307, USA.  */\n \n extern integer G77_fnum_0 (integer *);\n \n-/* Subroutine */ int G77_flush1_0 (const integer *lunit)\n+/* Subroutine */ int\n+G77_flush1_0 (const integer * lunit)\n {\n-  if (*lunit>=MXUNIT || *lunit<0)\n-    err(1,101,\"flush\");\n+  if (*lunit >= MXUNIT || *lunit < 0)\n+    err (1, 101, \"flush\");\n   /* f__units is a table of descriptions for the unit numbers (defined\n      in io.h) with file descriptors rather than streams */\n   if (f__units[*lunit].ufd != NULL && f__units[*lunit].uwrt)\n-    fflush(f__units[*lunit].ufd);\n+    fflush (f__units[*lunit].ufd);\n   return 0;\n }"}, {"sha": "daf8f3dc0807333fa61a871c1ea1442d7a4ef06b", "filename": "libf2c/libU77/fnum_.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffnum_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffnum_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Ffnum_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -22,12 +22,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"f2c.h\"\n #include \"fio.h\"\n \n-integer G77_fnum_0 (integer *lunit)\n+integer\n+G77_fnum_0 (integer * lunit)\n {\n-  if (*lunit>=MXUNIT || *lunit<0)\n-    err(1,101,\"fnum\");\n+  if (*lunit >= MXUNIT || *lunit < 0)\n+    err (1, 101, \"fnum\");\n   /* f__units is a table of descriptions for the unit numbers (defined\n      in io.h).  Use file descriptor (ufd) and fileno rather than udev\n      field since udev is unix specific */\n-  return fileno(f__units[*lunit].ufd);\n+  return fileno (f__units[*lunit].ufd);\n }"}, {"sha": "0a878bd6644c39ec7856a6d608025cc934846a4b", "filename": "libf2c/libU77/fputc_.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffputc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffputc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Ffputc_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -26,25 +26,28 @@ Boston, MA 02111-1307, USA.  */\n #include \"f2c.h\"\n #include \"fio.h\"\n \n-integer G77_fputc_0 (const integer *lunit, const char *c, const ftnlen Lc)\n+integer\n+G77_fputc_0 (const integer * lunit, const char *c, const ftnlen Lc)\n {\n   int err;\n   FILE *f = f__units[*lunit].ufd;\n \n-  if (*lunit>=MXUNIT || *lunit<0)\n+  if (*lunit >= MXUNIT || *lunit < 0)\n     return 101;\t\t\t/* bad unit error */\n   err = putc (c[0], f);\n-  if (err == EOF) {\n-    if (feof (f))\n-      return -1;\n-    else\n-      return ferror (f);\n-  }\n+  if (err == EOF)\n+    {\n+      if (feof (f))\n+\treturn -1;\n+      else\n+\treturn ferror (f);\n+    }\n   else\n     return 0;\n }\n \n-integer G77_fput_0 (const char *c, const ftnlen Lc)\n+integer\n+G77_fput_0 (const char *c, const ftnlen Lc)\n {\n   integer six = 6;\n "}, {"sha": "e978c6adb2ebf3a2d02ff7df2f1b62f09ccc6212", "filename": "libf2c/libU77/fstat_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffstat_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ffstat_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Ffstat_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -28,7 +28,8 @@ Boston, MA 02111-1307, USA.  */\n \n extern integer G77_fnum_0 (const integer *);\n \n-integer G77_fstat_0 (const integer *lunit, integer statb[13])\n+integer\n+G77_fstat_0 (const integer * lunit, integer statb[13])\n {\n   int err;\n   struct stat buf;"}, {"sha": "252440dc85b1a09fdfa9d0fce4a6eacc0b4bb70c", "filename": "libf2c/libU77/gerror_.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgerror_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgerror_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fgerror_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -29,15 +29,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"f2c.h\"\n \n #ifndef HAVE_STRERROR\n-     extern char *sys_errlist [];\n+extern char *sys_errlist[];\n #    define strerror(i) (sys_errlist[i])\n #endif\n-extern void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);\n-/* Subroutine */ int G77_gerror_0 (char *str, ftnlen Lstr)\n+extern void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);\n+/* Subroutine */ int\n+G77_gerror_0 (char *str, ftnlen Lstr)\n {\n-  char * s;\n+  char *s;\n \n-  s = strerror(errno);\n+  s = strerror (errno);\n   s_copy (str, s, Lstr, strlen (s));\n   return 0;\n }"}, {"sha": "75277af0f74584077ccfe5e1335c4a5d21f7ce05", "filename": "libf2c/libU77/getcwd_.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetcwd_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetcwd_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fgetcwd_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -34,46 +34,53 @@ Boston, MA 02111-1307, USA.  */\n #ifdef HAVE_UNISTD_H\n #  include <unistd.h>\n #else\n-  extern char *getcwd ();\n+extern char *getcwd ();\n #endif\n \n-extern void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);\n-integer G77_getcwd_0 (char *str, const ftnlen Lstr)\n+extern void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);\n+integer\n+G77_getcwd_0 (char *str, const ftnlen Lstr)\n {\n-    int i;\n-    char *ret;\n+  int i;\n+  char *ret;\n \n-    ret = getcwd (str, Lstr);\n-    if (ret == NULL) return errno;\n-    for (i=strlen(str); i<Lstr; i++)\n-\tstr[i] = ' ';\n-    return 0;\n+  ret = getcwd (str, Lstr);\n+  if (ret == NULL)\n+    return errno;\n+  for (i = strlen (str); i < Lstr; i++)\n+    str[i] = ' ';\n+  return 0;\n }\n \n #elif HAVE_GETWD\t\t/* HAVE_GETCWD */\n \n /* getwd usage taken from SunOS4 man */\n \n #  include <sys/param.h>\n-  extern char *getwd ();\n-extern void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);\n-integer G77_getcwd_0 (char *str, const ftnlen Lstr)\n+extern char *getwd ();\n+extern void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);\n+integer\n+G77_getcwd_0 (char *str, const ftnlen Lstr)\n {\n   char pathname[MAXPATHLEN];\n   size_t l;\n \n-  if (getwd (pathname) == NULL) {\n-    return errno;\n-  } else {\n-    s_copy (str, pathname, Lstr, strlen (str));\n-    return 0;\n-  }\n+  if (getwd (pathname) == NULL)\n+    {\n+      return errno;\n+    }\n+  else\n+    {\n+      s_copy (str, pathname, Lstr, strlen (str));\n+      return 0;\n+    }\n }\n \n-#else  /* !HAVE_GETWD && !HAVE_GETCWD */\n+#else /* !HAVE_GETWD && !HAVE_GETCWD */\n \n-extern void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);\n-integer G77_getcwd_0 (char *str, const ftnlen Lstr)\n+extern void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);\n+integer\n+G77_getcwd_0 (char *str, const ftnlen Lstr)\n {\n   return errno = ENOSYS;\n }"}, {"sha": "7dcbdf80b57946e4f37ad0c24e804b7ce0212d93", "filename": "libf2c/libU77/getgid_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetgid_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetgid_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fgetgid_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -26,7 +26,8 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-integer G77_getgid_0 (void)\n+integer\n+G77_getgid_0 (void)\n {\n #if defined (HAVE_GETGID)\n   return getgid ();"}, {"sha": "94c5f416067e5fa3bde4d6020018f79845433035", "filename": "libf2c/libU77/getlog_.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetlog_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetlog_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fgetlog_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -41,21 +41,25 @@ Boston, MA 02111-1307, USA.  */\n \n /* SGI also has character*(*) function getlog() */\n \n-extern void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);\n-/* Subroutine */ int G77_getlog_0 (char *str, const ftnlen Lstr)\n+extern void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);\n+/* Subroutine */ int\n+G77_getlog_0 (char *str, const ftnlen Lstr)\n {\n   size_t i;\n   char *p;\n   int status;\n \n #if defined (HAVE_GETLOGIN)\n   p = getlogin ();\n-  if (p != NULL) {\n-    i = strlen (p);\n-    s_copy (str, p, Lstr, i);\n-  } else {\n-    s_copy (str, \" \", Lstr, 1);\n-  }\n+  if (p != NULL)\n+    {\n+      i = strlen (p);\n+      s_copy (str, p, Lstr, i);\n+    }\n+  else\n+    {\n+      s_copy (str, \" \", Lstr, 1);\n+    }\n   status = 0;\n #else\n   errno = ENOSYS;"}, {"sha": "6f1d8d7eede81aa873ec622c04913af9fe8023f7", "filename": "libf2c/libU77/getpid_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetpid_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetpid_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fgetpid_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -25,7 +25,8 @@ Boston, MA 02111-1307, USA.  */\n #include <sys/types.h>\n #include \"f2c.h\"\n \n-integer G77_getpid_0 (void)\n+integer\n+G77_getpid_0 (void)\n {\n   return getpid ();\n }"}, {"sha": "d88b8e2cd9ab1ea13605466ca438ee5bf864db52", "filename": "libf2c/libU77/getuid_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetuid_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgetuid_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fgetuid_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -26,7 +26,8 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-integer G77_getuid_0 (void)\n+integer\n+G77_getuid_0 (void)\n {\n #if defined (HAVE_GETUID)\n   return getuid ();"}, {"sha": "9de3c5a8de5e82df4202f2e82b2fddafd3efccc7", "filename": "libf2c/libU77/gmtime_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgmtime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fgmtime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fgmtime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -33,7 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-/* Subroutine */ int G77_gmtime_0 (const integer * xstime, integer tarray[9])\n+/* Subroutine */ int\n+G77_gmtime_0 (const integer * xstime, integer tarray[9])\n {\n   struct tm *lt;\n   time_t stime = *xstime;"}, {"sha": "7f511f422bb36d80365d009e3e05f2da19aa826e", "filename": "libf2c/libU77/hostnm_.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fhostnm_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fhostnm_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fhostnm_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -30,20 +30,22 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-integer G77_hostnm_0 (char *name, ftnlen Lname)\n+integer\n+G77_hostnm_0 (char *name, ftnlen Lname)\n {\n-    int ret, i;\n+  int ret, i;\n \n #if HAVE_GETHOSTNAME\n-    ret = gethostname (name, Lname);\n-    if (ret==0) {\n-\t/* Pad with blanks (assuming gethostname will make an error\n-           return if it can't fit in the null). */\n-\tfor (i=strlen(name); i<Lname; i++)\n-\t    name[i] = ' ';\n+  ret = gethostname (name, Lname);\n+  if (ret == 0)\n+    {\n+      /* Pad with blanks (assuming gethostname will make an error\n+         return if it can't fit in the null). */\n+      for (i = strlen (name); i < Lname; i++)\n+\tname[i] = ' ';\n     }\n-    return ret;\n+  return ret;\n #else\n-    return errno = ENOSYS;\n+  return errno = ENOSYS;\n #endif\n }"}, {"sha": "f2bea12e59daa98a5655c6cf8caa6f56dc916d49", "filename": "libf2c/libU77/idate_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fidate_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fidate_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fidate_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -37,12 +37,13 @@ Boston, MA 02111-1307, USA.  */\n \n /* libU77 one: */\n \n-/* Subroutine */ int G77_idate_0 (int iarray[3])\n+/* Subroutine */ int\n+G77_idate_0 (int iarray[3])\n {\n   struct tm *lt;\n   time_t tim;\n-  tim = time(NULL);\n-  lt = localtime(&tim);\n+  tim = time (NULL);\n+  lt = localtime (&tim);\n   iarray[0] = lt->tm_mday;\n   iarray[1] = lt->tm_mon + 1;\t/* in range 1-12 in SunOS (experimentally) */\n   /* The `+1900' is consistent with SunOS and Irix, but they don't say"}, {"sha": "0dc76b0262fc801fb7fe5826925f62e14bd90dbb", "filename": "libf2c/libU77/ierrno_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fierrno_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fierrno_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fierrno_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -22,7 +22,8 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\n #include \"f2c.h\"\n \n-integer G77_ierrno_0 (void)\n+integer\n+G77_ierrno_0 (void)\n {\n   return errno;\n }"}, {"sha": "a90543115153586493e32bb76a83b81b3f0668a0", "filename": "libf2c/libU77/irand_.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Firand_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Firand_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Firand_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -31,22 +31,18 @@ Boston, MA 02111-1307, USA.  */\n \n /* Note this is per SunOS -- other s may have no arg. */\n \n-integer G77_irand_0 (integer *flag)\n+integer\n+G77_irand_0 (integer * flag)\n {\n-  switch (*flag) {\n-  case 0:\n-    break;\n-  case 1:\n-    srand (0);\t\t\t/* Arbitrary choice of initialiser. */\n-    break;\n-  default:\n-    srand (*flag);\n-  }\n+  switch (*flag)\n+    {\n+    case 0:\n+      break;\n+    case 1:\n+      srand (0);\t\t/* Arbitrary choice of initialiser. */\n+      break;\n+    default:\n+      srand (*flag);\n+    }\n   return rand ();\n }\n-\n-\n-\n-\n-\n-"}, {"sha": "fa2f56dafab52fa7a11add62eb8ba20da1c30b0a", "filename": "libf2c/libU77/isatty_.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fisatty_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fisatty_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fisatty_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -27,11 +27,12 @@ Boston, MA 02111-1307, USA.  */\n \n extern integer G77_fnum_0 (integer *);\n \n-logical G77_isatty_0 (integer *lunit)\n+logical\n+G77_isatty_0 (integer * lunit)\n {\n-  if (*lunit>=MXUNIT || *lunit<0)\n-    err(1,101,\"isatty\");\n+  if (*lunit >= MXUNIT || *lunit < 0)\n+    err (1, 101, \"isatty\");\n   /* f__units is a table of descriptions for the unit numbers (defined\n      in io.h) with file descriptors rather than streams */\n-  return (isatty(G77_fnum_0 (lunit)) ? TRUE_ : FALSE_);\n+  return (isatty (G77_fnum_0 (lunit)) ? TRUE_ : FALSE_);\n }"}, {"sha": "12a7864fd9728538892c5a6af9464d901679c018", "filename": "libf2c/libU77/itime_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fitime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fitime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fitime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -33,13 +33,14 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-/* Subroutine */ int G77_itime_0 (integer tarray[3])\n+/* Subroutine */ int\n+G77_itime_0 (integer tarray[3])\n {\n   struct tm *lt;\n   time_t tim;\n \n-  tim = time(NULL);\n-  lt = localtime(&tim);\n+  tim = time (NULL);\n+  lt = localtime (&tim);\n   tarray[0] = lt->tm_hour;\n   tarray[1] = lt->tm_min;\n   tarray[2] = lt->tm_sec;"}, {"sha": "41eab152cbf7470fc792206381aea0ed14fe3c63", "filename": "libf2c/libU77/kill_.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fkill_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fkill_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fkill_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -26,10 +26,11 @@ Boston, MA 02111-1307, USA.  */\n \n /* fixme: bsd, svr1-3 use int, not pid_t */\n \n-integer G77_kill_0 (const integer *pid, const integer *signum)\n+integer\n+G77_kill_0 (const integer * pid, const integer * signum)\n {\n #if defined (HAVE_KILL)\n-  return kill ((pid_t) *pid, *signum) ? errno : 0;\n+  return kill ((pid_t) * pid, *signum) ? errno : 0;\n #else\n   errno = ENOSYS;\n   return -1;"}, {"sha": "88c110f4f5e48bd677d1f30c8cf53c4d9a5a244e", "filename": "libf2c/libU77/link_.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Flink_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Flink_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Flink_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -34,23 +34,28 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_link_0 (const char *path1, const char *path2, const ftnlen Lpath1, const ftnlen Lpath2)\n+integer\n+G77_link_0 (const char *path1, const char *path2, const ftnlen Lpath1,\n+\t    const ftnlen Lpath2)\n {\n #if defined (HAVE_LINK)\n   char *buff1, *buff2;\n   char *bp, *blast;\n   int i;\n \n-  buff1 = malloc (Lpath1+1);\n-  if (buff1 == NULL) return -1;\n+  buff1 = malloc (Lpath1 + 1);\n+  if (buff1 == NULL)\n+    return -1;\n   g_char (path1, Lpath1, buff1);\n-  buff2 = malloc (Lpath2+1);\n-  if (buff2 == NULL) return -1;\n+  buff2 = malloc (Lpath2 + 1);\n+  if (buff2 == NULL)\n+    return -1;\n   g_char (path2, Lpath2, buff2);\n   i = link (buff1, buff2);\n-  free (buff1); free (buff2);\n+  free (buff1);\n+  free (buff2);\n   return i ? errno : 0;\n #else /* ! HAVE_LINK */\n   errno = ENOSYS;"}, {"sha": "f21ac42398b4b5dba7b042b937e03334393428ff", "filename": "libf2c/libU77/lnblnk_.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Flnblnk_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Flnblnk_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Flnblnk_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -21,15 +21,18 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"f2c.h\"\n \n-integer G77_lnblnk_0 (char *str, ftnlen str_len)\n+integer\n+G77_lnblnk_0 (char *str, ftnlen str_len)\n {\n-    integer ret_val;\n-    integer i_len();\n-\n-    for (ret_val = str_len; ret_val >= 1; --ret_val) {\n-\tif (*(unsigned char *)&str[ret_val - 1] != ' ') {\n-\t    return ret_val;\n+  integer ret_val;\n+  integer i_len ();\n+\n+  for (ret_val = str_len; ret_val >= 1; --ret_val)\n+    {\n+      if (*(unsigned char *) &str[ret_val - 1] != ' ')\n+\t{\n+\t  return ret_val;\n \t}\n     }\n-    return ret_val;\n+  return ret_val;\n }"}, {"sha": "0d5a8300910e71e6425083a56336e9e01a283133", "filename": "libf2c/libU77/lstat_.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Flstat_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Flstat_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Flstat_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -30,18 +30,20 @@ Boston, MA 02111-1307, USA.  */\n \n /* lstat isn't posix */\n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_lstat_0 (const char *name, integer statb[13], const ftnlen Lname)\n+integer\n+G77_lstat_0 (const char *name, integer statb[13], const ftnlen Lname)\n {\n #if HAVE_LSTAT\n   char *buff;\n   char *bp, *blast;\n   int err;\n   struct stat buf;\n \n-  buff = malloc (Lname+1);\n-  if (buff == NULL) return -1;\n+  buff = malloc (Lname + 1);\n+  if (buff == NULL)\n+    return -1;\n   g_char (name, Lname, buff);\n   err = lstat (buff, &buf);\n   free (buff);\n@@ -71,7 +73,7 @@ integer G77_lstat_0 (const char *name, integer statb[13], const ftnlen Lname)\n   statb[12] = -1;\n #endif\n   return err;\n-#else\t/* !HAVE_LSTAT */\n+#else /* !HAVE_LSTAT */\n   return errno = ENOSYS;\n-#endif\t/* !HAVE_LSTAT */\n+#endif /* !HAVE_LSTAT */\n }"}, {"sha": "008df1dd08dd1873acc415332d8f4b4cd9eab335", "filename": "libf2c/libU77/ltime_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fltime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fltime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fltime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -33,7 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-/* Subroutine */ int G77_ltime_0 (const integer * xstime, integer tarray[9])\n+/* Subroutine */ int\n+G77_ltime_0 (const integer * xstime, integer tarray[9])\n {\n   struct tm *lt;\n   time_t stime = *xstime;"}, {"sha": "686c49067516eccac49cccbb6359da12fe148b92", "filename": "libf2c/libU77/mclock_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fmclock_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fmclock_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fmclock_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -33,7 +33,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Reported by wd42ej@sgi83.wwb.noaa.gov (Russ Jones AUTO-Sun3) on AIX. */\n \n-longint G77_mclock_0 (void)\n+longint\n+G77_mclock_0 (void)\n {\n #if HAVE_CLOCK\n   return clock ();"}, {"sha": "6fe96aa6fc2314355cba22f842ef713eb2503959", "filename": "libf2c/libU77/perror_.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fperror_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fperror_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fperror_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -28,14 +28,15 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-/* Subroutine */ int G77_perror_0 (const char *str, const ftnlen Lstr)\n+/* Subroutine */ int\n+G77_perror_0 (const char *str, const ftnlen Lstr)\n {\n   char buff[1000];\n   char *bp, *blast;\n \n   /* same technique as `system' -- what's wrong with malloc? */\n   blast = buff + (Lstr < 1000 ? Lstr : 1000);\n-  for (bp = buff ; bp<blast && *str!='\\0' ; )\n+  for (bp = buff; bp < blast && *str != '\\0';)\n     *bp++ = *str++;\n   *bp = '\\0';\n   perror (buff);"}, {"sha": "1592dc5ab386fab34e53f32d13862f1eec56cd1f", "filename": "libf2c/libU77/rand_.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Frand_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Frand_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Frand_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -34,16 +34,18 @@ Boston, MA 02111-1307, USA.  */\n \n /* Note this is per SunOS -- other s may have no arg. */\n \n-double G77_rand_0 (integer *flag)\n+double\n+G77_rand_0 (integer * flag)\n {\n-  switch (*flag) {\n-  case 0:\n-    break;\n-  case 1:\n-    srand (0);\t\t\t/* Arbitrary choice of initialiser. */\n-    break;\n-  default:\n-    srand (*flag);\n-  }\n+  switch (*flag)\n+    {\n+    case 0:\n+      break;\n+    case 1:\n+      srand (0);\t\t/* Arbitrary choice of initialiser. */\n+      break;\n+    default:\n+      srand (*flag);\n+    }\n   return (float) rand () / RAND_MAX;\n }"}, {"sha": "bef384b6fea43e51c14ea8ef19cf03e582b835ca", "filename": "libf2c/libU77/rename_.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Frename_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Frename_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Frename_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -29,21 +29,26 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\n #include \"f2c.h\"\n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_rename_0 (const char *path1, const char *path2, const ftnlen Lpath1, const ftnlen Lpath2)\n+integer\n+G77_rename_0 (const char *path1, const char *path2, const ftnlen Lpath1,\n+\t      const ftnlen Lpath2)\n {\n   char *buff1, *buff2;\n   char *bp, *blast;\n   int i;\n \n-  buff1 = malloc (Lpath1+1);\n-  if (buff1 == NULL) return -1;\n+  buff1 = malloc (Lpath1 + 1);\n+  if (buff1 == NULL)\n+    return -1;\n   g_char (path1, Lpath1, buff1);\n-  buff2 = malloc (Lpath2+1);\n-  if (buff2 == NULL) return -1;\n+  buff2 = malloc (Lpath2 + 1);\n+  if (buff2 == NULL)\n+    return -1;\n   g_char (path2, Lpath2, buff2);\n   i = rename (buff1, buff2);\n-  free (buff1); free (buff2);\n+  free (buff1);\n+  free (buff2);\n   return i ? errno : 0;\n }"}, {"sha": "1d661a9ad6b050f1557fe202dbad824834adf3b6", "filename": "libf2c/libU77/secnds_.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsecnds_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsecnds_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fsecnds_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -36,16 +36,16 @@ Boston, MA 02111-1307, USA.  */\n \n /* This is a VMS intrinsic. */\n \n-double G77_secnds_0 (real *r)\n+double\n+G77_secnds_0 (real * r)\n {\n-    struct tm *lt;\n-    time_t clock;\n-    float f;\n-\n-    clock = time (NULL);\n-    lt = localtime (&clock);\n-    f= (3600.0*((real)lt->tm_hour) + 60.0*((real)lt->tm_min) +\n-\t    (real)lt->tm_sec - *r);\n-    return f;\n+  struct tm *lt;\n+  time_t clock;\n+  float f;\n+\n+  clock = time (NULL);\n+  lt = localtime (&clock);\n+  f = (3600.0 * ((real) lt->tm_hour) + 60.0 * ((real) lt->tm_min) +\n+       (real) lt->tm_sec - *r);\n+  return f;\n }\n-"}, {"sha": "b40474a49a7d59905bce30c809e2ee152e92a884", "filename": "libf2c/libU77/second_.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsecond_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsecond_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fsecond_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -18,7 +18,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"f2c.h\"\n \n-double G77_second_0 () {\n+double\n+G77_second_0 ()\n+{\n   extern double G77_etime_0 ();\n   real tarray[2];\n "}, {"sha": "fcf112a1c6a19a0c3fb80917a87083d341559027", "filename": "libf2c/libU77/sleep_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsleep_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsleep_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fsleep_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -25,7 +25,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"f2c.h\"\n \n /* Subroutine */\n-int G77_sleep_0 (const integer *seconds)\n+int\n+G77_sleep_0 (const integer * seconds)\n {\n   (void) sleep ((unsigned int) *seconds);\n   return 0;"}, {"sha": "822d980dd0fb723beb04d182e60b6d6fa9262595", "filename": "libf2c/libU77/srand_.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsrand_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsrand_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fsrand_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -24,8 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-/* Subroutine */ \n-int G77_srand_0 (const integer *seed)\n+/* Subroutine */\n+int\n+G77_srand_0 (const integer * seed)\n {\n   srand ((unsigned int) *seed);\n   return 0;"}, {"sha": "b864da298e33a50bd5bc922248a157fff7386b7f", "filename": "libf2c/libU77/stat_.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fstat_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fstat_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fstat_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -27,17 +27,19 @@ Boston, MA 02111-1307, USA.  */\n #include <sys/stat.h>\n #include \"f2c.h\"\n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_stat_0 (const char *name, integer statb[13], const ftnlen Lname)\n+integer\n+G77_stat_0 (const char *name, integer statb[13], const ftnlen Lname)\n {\n   char *buff;\n   char *bp, *blast;\n   int err;\n   struct stat buf;\n \n-  buff = malloc (Lname+1);\n-  if (buff == NULL) return -1;\n+  buff = malloc (Lname + 1);\n+  if (buff == NULL)\n+    return -1;\n   g_char (name, Lname, buff);\n   err = stat (buff, &buf);\n   free (buff);"}, {"sha": "f51739a7867cc625d8d613f5053cdf33110d53ef", "filename": "libf2c/libU77/symlnk_.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsymlnk_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsymlnk_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fsymlnk_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -33,25 +33,30 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_symlnk_0 (const char *path1, const char *path2, const ftnlen Lpath1, const ftnlen Lpath2)\n+integer\n+G77_symlnk_0 (const char *path1, const char *path2, const ftnlen Lpath1,\n+\t      const ftnlen Lpath2)\n {\n #if HAVE_SYMLINK\n   char *buff1, *buff2;\n   char *bp, *blast;\n   int i;\n \n-  buff1 = (char *) malloc (Lpath1+1);\n-  if (buff1 == NULL) return -1;\n+  buff1 = (char *) malloc (Lpath1 + 1);\n+  if (buff1 == NULL)\n+    return -1;\n   g_char (path1, Lpath1, buff1);\n-  buff2 = (char *) malloc (Lpath2+1);\n-  if (buff2 == NULL) return -1;\n+  buff2 = (char *) malloc (Lpath2 + 1);\n+  if (buff2 == NULL)\n+    return -1;\n   g_char (path2, Lpath2, buff2);\n   i = symlink (buff1, buff2);\n-  free (buff1); free (buff2);\n+  free (buff1);\n+  free (buff2);\n   return i ? errno : 0;\n-#else\t/* !HAVE_SYMLINK */\n+#else /* !HAVE_SYMLINK */\n   return errno = ENOSYS;\n-#endif\t/* !HAVE_SYMLINK */\n+#endif /* !HAVE_SYMLINK */\n }"}, {"sha": "ea39eead4f0da4e0866de6b01d7238a45617819a", "filename": "libf2c/libU77/sys_clock_.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsys_clock_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fsys_clock_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fsys_clock_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -43,26 +43,29 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-int G77_system_clock_0 (integer *count, integer *count_rate, integer *count_max)\n+int\n+G77_system_clock_0 (integer * count, integer * count_rate,\n+\t\t    integer * count_max)\n {\n #if defined (HAVE_TIMES)\n   struct tms buffer;\n   unsigned long cnt;\n-  if (count_rate) {\n+  if (count_rate)\n+    {\n #ifdef _SC_CLK_TCK\n-    *count_rate = sysconf(_SC_CLK_TCK);\n+      *count_rate = sysconf (_SC_CLK_TCK);\n #elif defined CLOCKS_PER_SECOND\n-    *count_rate = CLOCKS_PER_SECOND;\n+      *count_rate = CLOCKS_PER_SECOND;\n #elif defined CLK_TCK\n-    *count_rate = CLK_TCK;\n+      *count_rate = CLK_TCK;\n #elif defined HZ\n-    *count_rate = HZ;\n+      *count_rate = HZ;\n #else\n #error Dont know clock tick length\n #endif\n-  }\n+    }\n   if (count_max)\t\t/* optional arg present? */\n-    *count_max = INT_MAX;\t\t/* dubious */\n+    *count_max = INT_MAX;\t/* dubious */\n   cnt = times (&buffer);\n   if (cnt > (unsigned long) (INT_MAX))\n     *count = INT_MAX;\t\t/* also dubious */"}, {"sha": "2eb8a413991c2ad8de458f436a31a54f3ea22e0d", "filename": "libf2c/libU77/time_.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ftime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Ftime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Ftime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -35,7 +35,8 @@ Boston, MA 02111-1307, USA.  */\n /* As well as this external function some compilers have an intrinsic\n    subroutine which fills a character argument (which is the VMS way)\n    -- caveat emptor. */\n-longint G77_time_0 (void)\n+longint\n+G77_time_0 (void)\n {\n   /* There are potential problems with the cast of the time_t here. */\n   return time (NULL);"}, {"sha": "ffdf5bfdf9a8053f1cdaceb5c85489d9a460e30c", "filename": "libf2c/libU77/ttynam_.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fttynam_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fttynam_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fttynam_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -35,21 +35,25 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-extern integer G77_fnum_0 (integer *lunit);\n-extern void s_copy(register char *a, register char *b, ftnlen la, ftnlen lb);\n-/* Character */ void G77_ttynam_0 (char *ret_val, ftnlen ret_val_len, integer *lunit)\n+extern integer G77_fnum_0 (integer * lunit);\n+extern void s_copy (register char *a, register char *b, ftnlen la, ftnlen lb);\n+/* Character */ void\n+G77_ttynam_0 (char *ret_val, ftnlen ret_val_len, integer * lunit)\n {\n #if defined (HAVE_TTYNAME)\n   size_t i;\n   char *p;\n \n   p = ttyname (G77_fnum_0 (lunit));\n-  if (p != NULL) {\n-    i = strlen (p);\n-    s_copy (ret_val, p, ret_val_len, i);\n-  } else {\n-    s_copy (ret_val, \" \", ret_val_len, 1);\n-  }\n+  if (p != NULL)\n+    {\n+      i = strlen (p);\n+      s_copy (ret_val, p, ret_val_len, i);\n+    }\n+  else\n+    {\n+      s_copy (ret_val, \" \", ret_val_len, 1);\n+    }\n #else\n   errno = ENOSYS;\n   s_copy (ret_val, \" \", ret_val_len, 1);"}, {"sha": "5c4546a83acd6e28ac5d39622e5052ae81c455b2", "filename": "libf2c/libU77/umask_.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fumask_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fumask_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fumask_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -23,7 +23,8 @@ Boston, MA 02111-1307, USA.  */\n #include <sys/stat.h>\n #include \"f2c.h\"\n \n-integer G77_umask_0 (integer *mask)\n+integer\n+G77_umask_0 (integer * mask)\n {\n-  return umask ((mode_t) *mask);\n+  return umask ((mode_t) * mask);\n }"}, {"sha": "2d8fbcba87c8745b4286e76b0b0079633e91b845", "filename": "libf2c/libU77/unlink_.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Funlink_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Funlink_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Funlink_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -33,16 +33,18 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include \"f2c.h\"\n \n-void g_char(const char *a, ftnlen alen, char *b);\n+void g_char (const char *a, ftnlen alen, char *b);\n \n-integer G77_unlink_0 (const char *str, const ftnlen Lstr)\n+integer\n+G77_unlink_0 (const char *str, const ftnlen Lstr)\n {\n   char *buff;\n   char *bp, *blast;\n   int i;\n \n-  buff = malloc (Lstr+1);\n-  if (buff == NULL) return -1;\n+  buff = malloc (Lstr + 1);\n+  if (buff == NULL)\n+    return -1;\n   g_char (str, Lstr, buff);\n   i = unlink (buff);\n   free (buff);"}, {"sha": "7bf0ec9a11511b5561b1fcf91d55c96764bca813", "filename": "libf2c/libU77/vxtidate_.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fvxtidate_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fvxtidate_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fvxtidate_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -38,24 +38,26 @@ Boston, MA 02111-1307, USA.  */\n /* VMS style: */\n \n /* Subroutine */\n-int G77_vxtidate_y2kbug_0 (integer *m, integer *d, integer *y)\n+int\n+G77_vxtidate_y2kbug_0 (integer * m, integer * d, integer * y)\n {\n   struct tm *lt;\n   time_t tim;\n-  tim = time(NULL);\n-  lt = localtime(&tim);\n+  tim = time (NULL);\n+  lt = localtime (&tim);\n   *y = lt->tm_year % 100;\n-  *m = lt->tm_mon+1;\n+  *m = lt->tm_mon + 1;\n   *d = lt->tm_mday;\n   return 0;\n }\n \n #ifdef PIC\n extern const char *G77_Non_Y2K_Compliance_Message;\n-int G77_vxtidate_y2kbuggy_0 (integer *m, integer *d, integer *y)\n+int\n+G77_vxtidate_y2kbuggy_0 (integer * m, integer * d, integer * y)\n {\n-  extern int G77_abort_0();\n+  extern int G77_abort_0 ();\n   fprintf (stderr, \"%s\\n\", G77_Non_Y2K_Compliance_Message);\n-  G77_abort_0();\n+  G77_abort_0 ();\n }\n #endif"}, {"sha": "c283aacf962139b42efca49d25f4064b3e312632", "filename": "libf2c/libU77/vxttime_.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fvxttime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407c72cb298e71da241639399ee64e65308d21a1/libf2c%2FlibU77%2Fvxttime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fvxttime_.c?ref=407c72cb298e71da241639399ee64e65308d21a1", "patch": "@@ -39,11 +39,12 @@ Boston, MA 02111-1307, USA.  */\n #include \"f2c.h\"\n \n /* Subroutine */\n-void G77_vxttime_0 (char chtime[8], const ftnlen Lchtime)\n+void\n+G77_vxttime_0 (char chtime[8], const ftnlen Lchtime)\n {\n   time_t tim;\n   char *ctim;\n-  tim = time(NULL);\n+  tim = time (NULL);\n   ctim = ctime (&tim);\n-  strncpy (chtime, ctim+11, 8);\n+  strncpy (chtime, ctim + 11, 8);\n }"}]}