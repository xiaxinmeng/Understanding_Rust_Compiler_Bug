{"sha": "a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjZGY3YzBjYWRjYTY0ZmYwZWZhOWM1NmZmMWVkNTBmZWU3MDU3NQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-10-29T10:33:46Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2014-10-29T10:33:46Z"}, "message": "optimize-bswapsi-1.c (swap32_e): New bswap test.\n\n2014-10-29  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/testsuite/\n    * gcc.dg/optimize-bswapsi-1.c (swap32_e): New bswap test.\n    * gcc.dg/optimize-bswapsi-3.c: New test.\n\nFrom-SVN: r216830", "tree": {"sha": "6c067516d9fd680da15ee82b952475abeeb9124d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c067516d9fd680da15ee82b952475abeeb9124d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dab67d2ca2788745393a57b54ed59afb7585602c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab67d2ca2788745393a57b54ed59afb7585602c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab67d2ca2788745393a57b54ed59afb7585602c"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "52a9e5490751365a8d2dc8cbe893bd354ff6d912", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575", "patch": "@@ -1,3 +1,8 @@\n+2014-10-29  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* gcc.dg/optimize-bswapsi-1.c (swap32_e): New bswap test.\n+\t* gcc.dg/optimize-bswapsi-3.c: New test.\n+\n 2014-10-20  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "cfde2182e4cb0bc8de607744b5e95b9e0fdb8171", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-1.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c?ref=a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575", "patch": "@@ -64,5 +64,19 @@ swap32_d (SItype in)\n \t | (((in >> 24) & 0xFF) << 0);\n }\n \n-/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 4 \"bswap\" } } */\n+/* This variant is adapted from swap32_d above.  It detects missing cast of\n+   MARKER_BYTE_UNKNOWN to uint64_t for the CASE_CONVERT case for host\n+   architecture where a left shift with too big an operand mask its high\n+   bits.  */\n+\n+SItype\n+swap32_e (SItype in)\n+{\n+  return (((in >> 0) & 0xFF) << 24)\n+\t | (((in >> 8) & 0xFF) << 16)\n+\t | (((((int64_t) in) & 0xFF0000FF0000) >> 16) << 8)\n+\t | (((in >> 24) & 0xFF) << 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 5 \"bswap\" } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "79f2147e3a29e7677c8f46fee0524aef4ce520d5", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-3.c?ref=a3cdf7c0cadca64ff0efa9c56ff1ed50fee70575", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target bswap32 } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O2 -fdump-tree-bswap\" } */\n+/* { dg-additional-options \"-march=z900\" { target s390-*-* } } */\n+\n+typedef int SItype __attribute__ ((mode (SI)));\n+typedef int DItype __attribute__ ((mode (DI)));\n+\n+/* This variant comes from optimize-bswapsi-1.c swap32_d.  It detects a missing\n+   cast of MARKER_BYTE_UNKNOWN to uint64_t for the CASE_CONVERT case for host\n+   architecture where a left shift with too big an operand gives zero.  */\n+\n+SItype\n+swap32 (SItype in)\n+{\n+  return (((in >> 0) & 0xFF) << 24)\n+\t | (((in >> 8) & 0xFF) << 16)\n+\t | (((((DItype) in) & 0xFF00FF0000llu) >> 16) << 8)\n+\t | (((in >> 24) & 0xFF) << 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"32 bit bswap implementation found at\" \"bswap\" } } */\n+/* { dg-final { cleanup-tree-dump \"bswap\" } } */"}]}