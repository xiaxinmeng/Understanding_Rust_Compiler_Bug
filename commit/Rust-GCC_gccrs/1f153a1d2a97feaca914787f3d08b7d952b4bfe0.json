{"sha": "1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxNTNhMWQyYTk3ZmVhY2E5MTQ3ODdmM2QwOGI3ZDk1MmI0YmZlMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-07T15:22:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-07T15:22:51Z"}, "message": "Replace dynamic exception specifications in testsuite\n\n\t* testsuite/util/testsuite_hooks.h (THROW): Define.\n\t* testsuite/util/replacement_memory_operators.h: Include\n\ttestsuite_hooks.h and use THROW macro.\n\t* testsuite/util/testsuite_tr1.h: Likewise.\n\t* testsuite/20_util/allocator/1.cc: Use THROW macro.\n\t* testsuite/22_locale/locale/cons/12352.cc: Likewise.\n\t* testsuite/23_containers/vector/zero_sized_allocations.cc: Likewise.\n\t* testsuite/30_threads/lock_guard/cons/1.cc: Replace dynamic exception\n\tspecification with noexcept-specifier.\n\t* testsuite/ext/pool_allocator/allocate_chunk.cc: Include\n\ttestsuite_hooks.h and use THROW macro.\n\t* testsuite/ext/profile/replace_new.cc: Likewise.\n\nFrom-SVN: r243353", "tree": {"sha": "3ba08e59fdfc71363ecc1ae48190ef94110c34ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba08e59fdfc71363ecc1ae48190ef94110c34ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba454dfbbec81fafed8f14b2fe59d895bd0255ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba454dfbbec81fafed8f14b2fe59d895bd0255ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba454dfbbec81fafed8f14b2fe59d895bd0255ac"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "c102e607804e154a6f449dc839cb95aa71276d78", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -1,5 +1,18 @@\n 2016-12-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/util/testsuite_hooks.h (THROW): Define.\n+\t* testsuite/util/replacement_memory_operators.h: Include\n+\ttestsuite_hooks.h and use THROW macro.\n+\t* testsuite/util/testsuite_tr1.h: Likewise.\n+\t* testsuite/20_util/allocator/1.cc: Use THROW macro.\n+\t* testsuite/22_locale/locale/cons/12352.cc: Likewise.\n+\t* testsuite/23_containers/vector/zero_sized_allocations.cc: Likewise.\n+\t* testsuite/30_threads/lock_guard/cons/1.cc: Replace dynamic exception\n+\tspecification with noexcept-specifier.\n+\t* testsuite/ext/pool_allocator/allocate_chunk.cc: Include\n+\ttestsuite_hooks.h and use THROW macro.\n+\t* testsuite/ext/profile/replace_new.cc: Likewise.\n+\n \t* include/ext/bitmap_allocator.h (bitmap_allocator::_S_refill_pool)\n \t(bitmap_allocator::_M_allocate_single_object)\n \t(bitmap_allocator::_M_get): Use _GLIBCXX_THROW macro."}, {"sha": "0c068394c9a53565b2327c2bc019301f8fc2d1af", "filename": "libstdc++-v3/testsuite/20_util/allocator/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F1.cc?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -30,7 +30,7 @@ bool check_new = false;\n bool check_delete = false;\n \n void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n+operator new(std::size_t n) THROW(std::bad_alloc)\n {\n   check_new = true;\n   return std::malloc(n);"}, {"sha": "d514b2affcb9fc9ee682507b28ffdc3876d6e544", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/12352.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -45,15 +45,15 @@ void deallocate(void* p)\n     std::free(p);\n }\n \n-void* operator new(std::size_t n) throw (std::bad_alloc)\n+void* operator new(std::size_t n) THROW (std::bad_alloc)\n {\n   void* ret = allocate(n);\n   if (!ret)\n     throw std::bad_alloc();\n   return ret;\n }\n \n-void* operator new[](std::size_t n) throw (std::bad_alloc)\n+void* operator new[](std::size_t n) THROW (std::bad_alloc)\n {\n   void* ret = allocate(n);\n   if (!ret)"}, {"sha": "524241b3fdda6b22c6cde99dcdf377bf0f4ba4fe", "filename": "libstdc++-v3/testsuite/23_containers/vector/zero_sized_allocations.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fzero_sized_allocations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fzero_sized_allocations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fzero_sized_allocations.cc?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -22,7 +22,7 @@\n \n unsigned int zero_sized_news = 0;\n \n-void *operator new(std::size_t size) throw (std::bad_alloc)\n+void *operator new(std::size_t size) THROW (std::bad_alloc)\n {\n   /* malloc(0) is unpredictable; avoid it.  */\n   if (size == 0)"}, {"sha": "414b678c6c9d238d0dad98cf191e8dd5ee1cb400", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/cons/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -26,7 +26,7 @@ struct Mutex\n {\n   Mutex() : locked(false) { }\n \n-  ~Mutex() throw(int)\n+  ~Mutex() noexcept(false)\n   {\n     if (locked)\n       throw 0;"}, {"sha": "78380398421eead13e94e133646955566387ad58", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/allocate_chunk.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -20,6 +20,7 @@\n // 20.4.1.1 allocator members\n \n #include <ext/pool_allocator.h>\n+#include <testsuite_hooks.h>\n \n struct small\n {\n@@ -32,7 +33,7 @@ struct big\n };\n \n void*\n-operator new(size_t n) throw(std::bad_alloc)\n+operator new(size_t n) THROW(std::bad_alloc)\n {\n   static bool first = true;\n   if (!first)"}, {"sha": "9c9459488e476cfcbc8cfbfbf33ba916c12fa5a8", "filename": "libstdc++-v3/testsuite/ext/profile/replace_new.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Freplace_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Freplace_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Freplace_new.cc?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -20,10 +20,11 @@\n // { dg-require-profile-mode \"\" }\n \n #include <vector>\n+#include <testsuite_hooks.h>\n \n using std::vector;\n \n-void* operator new(std::size_t size) throw(std::bad_alloc)\n+void* operator new(std::size_t size) THROW(std::bad_alloc)\n {\n   void* p = std::malloc(size);\n   if (!p)"}, {"sha": "5ea6753e445789e00df0a9fbd4a6546179adbc24", "filename": "libstdc++-v3/testsuite/util/replacement_memory_operators.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -20,6 +20,7 @@\n #include <stdexcept>\n #include <cstdlib>\n #include <cstdio>\n+#include <testsuite_hooks.h>\n \n namespace __gnu_test\n {\n@@ -32,7 +33,7 @@ namespace __gnu_test\n \n     counter() : _M_count(0), _M_throw(true) { }\n \n-    ~counter() throw (counter_error)\n+    ~counter() THROW (counter_error)\n     {\n       if (_M_throw && _M_count != 0)\n \tthrow counter_error();\n@@ -86,7 +87,7 @@ namespace __gnu_test\n     }\n } // namespace __gnu_test\n \n-void* operator new(std::size_t size) throw(std::bad_alloc)\n+void* operator new(std::size_t size) THROW(std::bad_alloc)\n {\n   std::printf(\"operator new is called \\n\");\n   void* p = std::malloc(size);"}, {"sha": "9974faa40cb9681cb91a081dd4e56f1b598b5568", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -75,6 +75,12 @@\n          #langTERR \".ISO8859-\" #part \"@euro\" : #langTERR \".ISO8859-\" #part)\n #endif\n \n+#if __cplusplus < 201103L\n+# define THROW(X) throw(X)\n+#else\n+# define THROW(X) noexcept(false)\n+#endif\n+\n namespace __gnu_test\n {\n   // All macros are defined in GLIBCXX_CONFIGURE_TESTSUITE and imported"}, {"sha": "c6a4986b983dc3b2855fd2142e232bf506dbf1e0", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f153a1d2a97feaca914787f3d08b7d952b4bfe0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=1f153a1d2a97feaca914787f3d08b7d952b4bfe0", "patch": "@@ -23,6 +23,7 @@\n #define _GLIBCXX_TESTSUITE_TR1_H\n \n #include <ext/type_traits.h>\n+#include <testsuite_hooks.h>\n \n namespace __gnu_test\n {\n@@ -146,25 +147,25 @@ namespace __gnu_test\n \n   struct ThrowExplicitClass\n   {\n-    ThrowExplicitClass(double&) throw(int);\n-    explicit ThrowExplicitClass(int&) throw(int);\n-    ThrowExplicitClass(double&, int&, double&) throw(int);\n+    ThrowExplicitClass(double&) THROW(int);\n+    explicit ThrowExplicitClass(int&) THROW(int);\n+    ThrowExplicitClass(double&, int&, double&) THROW(int);\n   };\n \n   struct ThrowDefaultClass\n   {\n-    ThrowDefaultClass() throw(int);\n+    ThrowDefaultClass() THROW(int);\n   };\n \n   struct ThrowCopyConsClass\n   {\n-    ThrowCopyConsClass(const ThrowCopyConsClass&) throw(int);\n+    ThrowCopyConsClass(const ThrowCopyConsClass&) THROW(int);\n   };\n \n #if __cplusplus >= 201103L\n   struct ThrowMoveConsClass\n   {\n-    ThrowMoveConsClass(ThrowMoveConsClass&&) throw(int);\n+    ThrowMoveConsClass(ThrowMoveConsClass&&) THROW(int);\n   };\n \n   struct NoexceptExplicitClass\n@@ -558,7 +559,7 @@ namespace __gnu_test\n \n     struct TD2\n     {\n-      ~TD2() throw(int);\n+      ~TD2() THROW(int);\n     };\n \n     struct Aggr"}]}