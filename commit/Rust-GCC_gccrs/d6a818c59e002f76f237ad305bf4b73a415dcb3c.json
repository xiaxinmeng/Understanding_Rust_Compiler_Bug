{"sha": "d6a818c59e002f76f237ad305bf4b73a415dcb3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZhODE4YzU5ZTAwMmY3NmYyMzdhZDMwNWJmNGI3M2E0MTVkY2IzYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:15:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:15:44Z"}, "message": "tree-hash-traits.h: New file.\n\ngcc/\n\t* tree-hash-traits.h: New file.\n\t(tree_operand_hash): New class.\n\t* sanopt.c: Include tree-hash-traits.h.\n\t(sanopt_tree_map_traits): Use tree_operand_hash.\n\t* tree-if-conv.c: Include tree-hash-traits.h.\n\t(phi_args_hash_traits): Use tree_operand_hash.\n\t* tree-ssa-uncprop.c: Include tree-hash-traits.h.\n\t(val_ssa_equiv_hash_traits): Use tree_operand_hash.\n\nFrom-SVN: r224967", "tree": {"sha": "eb230717d9cde4170f937a1e9235ca357475e5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb230717d9cde4170f937a1e9235ca357475e5be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6a818c59e002f76f237ad305bf4b73a415dcb3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a818c59e002f76f237ad305bf4b73a415dcb3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a818c59e002f76f237ad305bf4b73a415dcb3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a818c59e002f76f237ad305bf4b73a415dcb3c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ef7b52a932fffd5a43c26183515dcafc735c9a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef7b52a932fffd5a43c26183515dcafc735c9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef7b52a932fffd5a43c26183515dcafc735c9a2"}], "stats": {"total": 109, "additions": 60, "deletions": 49}, "files": [{"sha": "9087350f2cd15d54ad22666525c247aea536922b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6a818c59e002f76f237ad305bf4b73a415dcb3c", "patch": "@@ -1,3 +1,14 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-hash-traits.h: New file.\n+\t(tree_operand_hash): New class.\n+\t* sanopt.c: Include tree-hash-traits.h.\n+\t(sanopt_tree_map_traits): Use tree_operand_hash.\n+\t* tree-if-conv.c: Include tree-hash-traits.h.\n+\t(phi_args_hash_traits): Use tree_operand_hash.\n+\t* tree-ssa-uncprop.c: Include tree-hash-traits.h.\n+\t(val_ssa_equiv_hash_traits): Use tree_operand_hash.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-map-traits.h: Include hash-traits.h."}, {"sha": "f0ca8e00dd850da1797bb4b05ca2be435802947c", "filename": "gcc/sanopt.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=d6a818c59e002f76f237ad305bf4b73a415dcb3c", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ubsan.h\"\n #include \"params.h\"\n #include \"tree-ssa-operands.h\"\n+#include \"tree-hash-traits.h\"\n \n \n /* This is used to carry information about basic blocks.  It is\n@@ -96,20 +97,7 @@ maybe_get_single_definition (tree t)\n   return NULL_TREE;\n }\n \n-/* Traits class for tree hash maps below.  */\n-\n-struct sanopt_tree_map_traits : default_hashmap_traits\n-{\n-  static inline hashval_t hash (const_tree ref)\n-  {\n-    return iterative_hash_expr (ref, 0);\n-  }\n-\n-  static inline bool equal_keys (const_tree ref1, const_tree ref2)\n-  {\n-    return operand_equal_p (ref1, ref2, 0);\n-  }\n-}; \n+typedef simple_hashmap_traits <tree_operand_hash> sanopt_tree_map_traits;\n \n /* Tree triplet for vptr_check_map.  */\n struct sanopt_tree_triplet"}, {"sha": "eab8c300d5e0eca27a96091f76fcc6b62b7acf92", "filename": "gcc/tree-hash-traits.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Ftree-hash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Ftree-hash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-hash-traits.h?ref=d6a818c59e002f76f237ad305bf4b73a415dcb3c", "patch": "@@ -0,0 +1,42 @@\n+/* Traits for hashing trees.\n+   Copyright (C) 2014-2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef tree_hash_traits_h\n+#define tree_hash_traits_h\n+\n+/* Hash for trees based on operand_equal_p.  */\n+struct tree_operand_hash : ggc_ptr_hash <tree_node>\n+{\n+  static inline hashval_t hash (const_tree);\n+  static inline bool equal_keys (const_tree, const_tree);\n+};\n+\n+inline hashval_t\n+tree_operand_hash::hash (const_tree t)\n+{\n+  return iterative_hash_expr (t, 0);\n+}\n+\n+inline bool\n+tree_operand_hash::equal_keys (const_tree t1, const_tree t2)\n+{\n+  return operand_equal_p (t1, t2, 0);\n+}\n+\n+#endif"}, {"sha": "59853c8addeadd14d9337cff99e631ebcaa9092e", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=d6a818c59e002f76f237ad305bf4b73a415dcb3c", "patch": "@@ -133,6 +133,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"insn-codes.h\"\n #include \"optabs.h\"\n+#include \"tree-hash-traits.h\"\n \n /* List of basic blocks in if-conversion-suitable order.  */\n static basic_block *ifc_bbs;\n@@ -1588,27 +1589,9 @@ convert_scalar_cond_reduction (gimple reduc, gimple_stmt_iterator *gsi,\n   return rhs;\n }\n \n-/* Helpers for PHI arguments hashtable map.  */\n+typedef simple_hashmap_traits <tree_operand_hash> phi_args_hash_traits;\n \n-struct phi_args_hash_traits : default_hashmap_traits\n-{\n-  static inline hashval_t hash (tree);\n-  static inline bool equal_keys (tree, tree);\n-};\n-\n-inline hashval_t\n-phi_args_hash_traits::hash (tree value)\n-{\n-  return iterative_hash_expr (value, 0);\n-}\n-\n-inline bool\n-phi_args_hash_traits::equal_keys (tree value1, tree value2)\n-{\n-  return operand_equal_p (value1, value2, 0);\n-}\n-\n-  /* Produce condition for all occurrences of ARG in PHI node.  */\n+/* Produce condition for all occurrences of ARG in PHI node.  */\n \n static tree\n gen_phi_arg_condition (gphi *phi, vec<int> *occur,"}, {"sha": "cf03a54ae54663aaec1b44fd155aaf006477188b", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a818c59e002f76f237ad305bf4b73a415dcb3c/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=d6a818c59e002f76f237ad305bf4b73a415dcb3c", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"domwalk.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-hash-traits.h\"\n \n /* The basic structure describing an equivalency created by traversing\n    an edge.  Traversing the edge effectively means that we can assume\n@@ -291,25 +292,11 @@ struct equiv_hash_elt\n \n /* Value to ssa name equivalence hashtable helpers.  */\n \n-struct val_ssa_equiv_hash_traits : default_hashmap_traits\n+struct val_ssa_equiv_hash_traits : simple_hashmap_traits <tree_operand_hash>\n {\n-  static inline hashval_t hash (tree);\n-  static inline bool equal_keys (tree, tree);\n   template<typename T> static inline void remove (T &);\n };\n \n-inline hashval_t\n-val_ssa_equiv_hash_traits::hash (tree value)\n-{\n-  return iterative_hash_expr (value, 0);\n-}\n-\n-inline bool\n-val_ssa_equiv_hash_traits::equal_keys (tree value1, tree value2)\n-{\n-  return operand_equal_p (value1, value2, 0);\n-}\n-\n /* Free an instance of equiv_hash_elt.  */\n \n template<typename T>"}]}