{"sha": "ddd88925273e86018b6cf57c9f6acc798a38e112", "node_id": "C_kwDOANBUbNoAKGRkZDg4OTI1MjczZTg2MDE4YjZjZjU3YzlmNmFjYzc5OGEzOGUxMTI", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2022-03-24T18:42:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:45:52Z"}, "message": "[Ada] Incorrect accessibility check on return of discriminated type\n\nThis patch corrects an error in the compiler whereby the presence of a\ncall to a function returning a type with an access discriminant within\nan expanded loop condition caused the wrong value to be supplied for the\nextra- accessibility-of-result actual, thus causing incorrect checks\nwithin the callee at the point of return.\n\nThis change also corrects a problem where spurious \"null value not\nallowed\" warnings were generated for tagged type declarations with an\naccess discriminant specified as \"null.\"\n\ngcc/ada/\n\n\t* sem_disp.adb (Most_Descendant_Use_Clause): Remove call to\n\tdeprecated Is_Internal.\n\t* sem_util.adb (Innermost_Master_Scope_Depth): Use\n\tFind_Enclosing_Scope instead of Nearest_Dynamic_Scope to avoid\n\tcases where relevant scopes get skipped leading to an incorrect\n\tscope depth calculation.", "tree": {"sha": "b8ba74a459a71abd5b2995a6e4d7eeb175a601dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ba74a459a71abd5b2995a6e4d7eeb175a601dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd88925273e86018b6cf57c9f6acc798a38e112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd88925273e86018b6cf57c9f6acc798a38e112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd88925273e86018b6cf57c9f6acc798a38e112", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd88925273e86018b6cf57c9f6acc798a38e112/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd5056736b642f0124e6cb26f9c2fd8be028908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd5056736b642f0124e6cb26f9c2fd8be028908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd5056736b642f0124e6cb26f9c2fd8be028908"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "226142f2b41c579029dd3a51d229a310c3040620", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd88925273e86018b6cf57c9f6acc798a38e112/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd88925273e86018b6cf57c9f6acc798a38e112/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=ddd88925273e86018b6cf57c9f6acc798a38e112", "patch": "@@ -508,12 +508,11 @@ package body Sem_Disp is\n          return Empty;\n \n       --  The dispatching type and the primitive operation must be defined in\n-      --  the same scope, except in the case of internal operations and formal\n-      --  abstract subprograms.\n+      --  the same scope, except in the case of abstract formal subprograms.\n \n-      elsif ((Scope (Subp) = Scope (Tagged_Type) or else Is_Internal (Subp))\n-               and then (not Is_Generic_Type (Tagged_Type)\n-                          or else not Comes_From_Source (Subp)))\n+      elsif (Scope (Subp) = Scope (Tagged_Type)\n+              and then (not Is_Generic_Type (Tagged_Type)\n+                         or else not Comes_From_Source (Subp)))\n         or else\n           (Is_Formal_Subprogram (Subp) and then Is_Abstract_Subprogram (Subp))\n         or else"}, {"sha": "addad83c6ae872984e72b339eaf65ccb460cfcf8", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd88925273e86018b6cf57c9f6acc798a38e112/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd88925273e86018b6cf57c9f6acc798a38e112/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ddd88925273e86018b6cf57c9f6acc798a38e112", "patch": "@@ -275,9 +275,9 @@ package body Sem_Util is\n       --  with its type set to Natural.\n \n       function Innermost_Master_Scope_Depth (N : Node_Id) return Uint;\n-      --  Returns the scope depth of the given node's innermost\n-      --  enclosing dynamic scope (effectively the accessibility\n-      --  level of the innermost enclosing master).\n+      --  Returns the scope depth of the given node's innermost enclosing\n+      --  scope (effectively the accessibility level of the innermost\n+      --  enclosing master).\n \n       function Function_Call_Or_Allocator_Level (N : Node_Id) return Node_Id;\n       --  Centralized processing of subprogram calls which may appear in\n@@ -301,7 +301,7 @@ package body Sem_Util is\n       begin\n          --  Locate the nearest enclosing node (by traversing Parents)\n          --  that Defining_Entity can be applied to, and return the\n-         --  depth of that entity's nearest enclosing dynamic scope.\n+         --  depth of that entity's nearest enclosing scope.\n \n          --  The rules that define what a master are defined in\n          --  RM 7.6.1 (3), and include statements and conditions for loops\n@@ -311,13 +311,13 @@ package body Sem_Util is\n             Ent := Defining_Entity_Or_Empty (Node_Par);\n \n             if Present (Ent) then\n-               Encl_Scop := Nearest_Dynamic_Scope (Ent);\n+               Encl_Scop := Find_Enclosing_Scope (Ent);\n \n                --  Ignore transient scopes made during expansion\n \n                if Comes_From_Source (Node_Par) then\n                   return\n-                    Scope_Depth_Default_0 (Encl_Scop) + Master_Lvl_Modifier;\n+                    Scope_Depth (Encl_Scop) + Master_Lvl_Modifier;\n                end if;\n \n             --  For a return statement within a function, return"}]}