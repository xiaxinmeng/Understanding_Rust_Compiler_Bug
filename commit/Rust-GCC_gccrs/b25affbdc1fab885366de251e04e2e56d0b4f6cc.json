{"sha": "b25affbdc1fab885366de251e04e2e56d0b4f6cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1YWZmYmRjMWZhYjg4NTM2NmRlMjUxZTA0ZTJlNTZkMGI0ZjZjYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2015-01-26T21:12:19Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-01-26T21:12:19Z"}, "message": "re PR fortran/64771 (ICE(segfault) when passing coarrays around; ICE in gfc_zero_size_array in arith.c:1637)\n\n2015-01-26  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/64771\ngcc/fortran/\n        * interface.c (check_dummy_characteristics): Fix coarray\n        * handling.\n\ntestsuite/\n        * gfortran.dg/coarray_36.f: New.\n        * gfortran.dg/coarray_37.f90: New.\n\nFrom-SVN: r220136", "tree": {"sha": "c3c65b84bda2dd5d66a147c222c325042311cdf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c65b84bda2dd5d66a147c222c325042311cdf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b25affbdc1fab885366de251e04e2e56d0b4f6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25affbdc1fab885366de251e04e2e56d0b4f6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25affbdc1fab885366de251e04e2e56d0b4f6cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25affbdc1fab885366de251e04e2e56d0b4f6cc/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c123c5ba64cc59cceb71594b415c75c1f7618349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c123c5ba64cc59cceb71594b415c75c1f7618349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c123c5ba64cc59cceb71594b415c75c1f7618349"}], "stats": {"total": 395, "additions": 392, "deletions": 3}, "files": [{"sha": "d73bab2feeacf98d62eb7949b8e39b7b169a8863", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b25affbdc1fab885366de251e04e2e56d0b4f6cc", "patch": "@@ -1,3 +1,8 @@\n+2015-01-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/64771\n+\t* interface.c (check_dummy_characteristics): Fix coarray handling.\n+\n 2015-01-26  Tobias Burnus  <burnus@net-b.de>\n \n \t* io.c (gfc_match_inquire): Replace \"-1\" by a defined constant."}, {"sha": "0463a58fa7f6fd9c841feac929252c1995a3e8c2", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=b25affbdc1fab885366de251e04e2e56d0b4f6cc", "patch": "@@ -63,6 +63,8 @@ along with GCC; see the file COPYING3.  If not see\n    formal argument list points to symbols within the same namespace as\n    the program unit name.  */\n \n+#include <algorithm>  /* For std::max.  */\n+\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -1205,8 +1207,15 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \t  return false;\n \t}\n \n+      if (s1->as->corank != s2->as->corank)\n+\t{\n+\t  snprintf (errmsg, err_len, \"Corank mismatch in argument '%s' (%i/%i)\",\n+\t\t    s1->name, s1->as->corank, s2->as->corank);\n+\t  return false;\n+\t}\n+\n       if (s1->as->type == AS_EXPLICIT)\n-\tfor (i = 0; i < s1->as->rank + s1->as->corank; i++)\n+\tfor (i = 0; i < s1->as->rank + std::max(0, s1->as->corank-1); i++)\n \t  {\n \t    shape1 = gfc_subtract (gfc_copy_expr (s1->as->upper[i]),\n \t\t\t\t  gfc_copy_expr (s1->as->lower[i]));\n@@ -1220,8 +1229,12 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \t      case -1:\n \t      case  1:\n \t      case -3:\n-\t\tsnprintf (errmsg, err_len, \"Shape mismatch in dimension %i of \"\n-\t\t\t  \"argument '%s'\", i + 1, s1->name);\n+\t\tif (i < s1->as->rank)\n+\t\t  snprintf (errmsg, err_len, \"Shape mismatch in dimension %i of\"\n+\t\t\t    \" argument '%s'\", i + 1, s1->name);\n+\t\telse\n+\t\t  snprintf (errmsg, err_len, \"Shape mismatch in codimension %i \"\n+\t\t\t    \"of argument '%s'\", i - s1->as->rank + 1, s1->name);\n \t\treturn false;\n \n \t      case -2:"}, {"sha": "7fabc0396ade023aacc7804446d974bdf087da87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b25affbdc1fab885366de251e04e2e56d0b4f6cc", "patch": "@@ -1,3 +1,9 @@\n+2015-01-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/64771\n+\t* gfortran.dg/coarray_36.f: New.\n+\t* gfortran.dg/coarray_37.f90: New.\n+\n 2015-01-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/64230"}, {"sha": "d06a01ec6bc04ad2cdf94d61c039d980f62b78b8", "filename": "gcc/testsuite/gfortran.dg/coarray_36.f", "status": "added", "additions": 347, "deletions": 0, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_36.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_36.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_36.f?ref=b25affbdc1fab885366de251e04e2e56d0b4f6cc", "patch": "@@ -0,0 +1,347 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+!\n+! PR fortran/64771\n+!\n+! Contributed by Alessandro Fanfarill\n+!\n+! Reduced version of the full NAS CG benchmark\n+!\n+\n+!-------------------------------------------------------------------------!\n+!                                                                         !\n+!        N  A  S     P A R A L L E L     B E N C H M A R K S  3.3         !\n+!                                                                         !\n+!                                   C G                                   !\n+!                                                                         !\n+!-------------------------------------------------------------------------!\n+!                                                                         !\n+!    This benchmark is part of the NAS Parallel Benchmark 3.3 suite.      !\n+!    It is described in NAS Technical Reports 95-020 and 02-007           !\n+!                                                                         !\n+!    Permission to use, copy, distribute and modify this software         !\n+!    for any purpose with or without fee is hereby granted.  We           !\n+!    request, however, that all derived work reference the NAS            !\n+!    Parallel Benchmarks 3.3. This software is provided \"as is\"           !\n+!    without express or implied warranty.                                 !\n+!                                                                         !\n+!    Information on NPB 3.3, including the technical report, the          !\n+!    original specifications, source code, results and information        !\n+!    on how to submit new results, is available at:                       !\n+!                                                                         !\n+!           http://www.nas.nasa.gov/Software/NPB/                         !\n+!                                                                         !\n+!    Send comments or suggestions to  npb@nas.nasa.gov                    !\n+!                                                                         !\n+!          NAS Parallel Benchmarks Group                                  !\n+!          NASA Ames Research Center                                      !\n+!          Mail Stop: T27A-1                                              !\n+!          Moffett Field, CA   94035-1000                                 !\n+!                                                                         !\n+!          E-mail:  npb@nas.nasa.gov                                      !\n+!          Fax:     (650) 604-3957                                        !\n+!                                                                         !\n+!-------------------------------------------------------------------------!\n+\n+\n+c---------------------------------------------------------------------\n+c\n+c Authors: M. Yarrow\n+c          C. Kuszmaul\n+c          R. F. Van der Wijngaart\n+c          H. Jin\n+c\n+c---------------------------------------------------------------------\n+\n+\n+c---------------------------------------------------------------------\n+c---------------------------------------------------------------------\n+      program cg\n+c---------------------------------------------------------------------\n+c---------------------------------------------------------------------\n+      implicit none\n+\n+      integer            na, nonzer, niter\n+      double precision   shift, rcond\n+      parameter(  na=75000,\n+     >     nonzer=13,\n+     >     niter=75,\n+     >     shift=60.,\n+     >     rcond=1.0d-1 )\n+\n+\n+\n+      integer num_proc_rows, num_proc_cols\n+      parameter( num_proc_rows = 2, num_proc_cols = 2)\n+      integer    num_procs\n+      parameter( num_procs = num_proc_cols * num_proc_rows )\n+\n+      integer    nz\n+      parameter( nz = na*(nonzer+1)/num_procs*(nonzer+1)+nonzer\n+     >              + na*(nonzer+2+num_procs/256)/num_proc_cols )\n+\n+      common / partit_size  /  naa, nzz,\n+     >                         npcols, nprows,\n+     >                         proc_col, proc_row,\n+     >                         firstrow,\n+     >                         lastrow,\n+     >                         firstcol,\n+     >                         lastcol,\n+     >                         exch_proc,\n+     >                         exch_recv_length,\n+     >                         send_start,\n+     >                         send_len\n+      integer                  naa, nzz,\n+     >                         npcols, nprows,\n+     >                         proc_col, proc_row,\n+     >                         firstrow,\n+     >                         lastrow,\n+     >                         firstcol,\n+     >                         lastcol,\n+     >                         exch_proc,\n+     >                         exch_recv_length,\n+     >                         send_start,\n+     >                         send_len\n+\n+\n+      common / main_int_mem /  colidx,     rowstr,\n+     >                         iv,         arow,     acol\n+      integer                  colidx(nz), rowstr(na+1),\n+     >                         iv(2*na+1), arow(nz), acol(nz)\n+\n+\n+c---------------------------------\n+c     Coarray Decalarations\n+c---------------------------------\n+      double precision         v(na+1)[0:*], aelt(nz)[0:*], a(nz)[0:*],\n+     >                         x(na/num_proc_rows+2)[0:*],\n+     >                         z(na/num_proc_rows+2)[0:*],\n+     >                         p(na/num_proc_rows+2)[0:*],\n+     >                         q(na/num_proc_rows+2)[0:*],\n+     >                         r(na/num_proc_rows+2)[0:*],\n+     >                         w(na/num_proc_rows+2)[0:*]\n+\n+\n+      common /urando/          amult, tran\n+      double precision         amult, tran\n+\n+\n+\n+      integer            l2npcols\n+      integer            reduce_exch_proc(num_proc_cols)\n+      integer            reduce_send_starts(num_proc_cols)\n+      integer            reduce_send_lengths(num_proc_cols)\n+      integer            reduce_recv_lengths(num_proc_cols)\n+      integer            reduce_rrecv_starts(num_proc_cols)\n+c---------------------------------\n+c     Coarray Decalarations\n+c---------------------------------\n+      integer            reduce_recv_starts(num_proc_cols)[0:*]\n+\n+      integer            i, j, k, it, me, nprocs, root\n+\n+      double precision   zeta, randlc\n+      external           randlc\n+      double precision   rnorm\n+c---------------------------------\n+c     Coarray Decalarations\n+c---------------------------------\n+      double precision   norm_temp1(2)[0:*], norm_temp2(2)[0:*]\n+\n+      double precision   t, tmax, mflops\n+      double precision   u(1), umax(1)\n+      external           timer_read\n+      double precision   timer_read\n+      character          class\n+      logical            verified\n+      double precision   zeta_verify_value, epsilon, err\n+\n+c---------------------------------------------------------------------\n+c  Explicit interface for conj_grad, due to coarray args\n+c---------------------------------------------------------------------\n+      interface\n+\n+      subroutine conj_grad ( colidx,\n+     >                       rowstr,\n+     >                       x,\n+     >                       z,\n+     >                       a,\n+     >                       p,\n+     >                       q,\n+     >                       r,\n+     >                       w,\n+     >                       rnorm,\n+     >                       l2npcols,\n+     >                       reduce_exch_proc,\n+     >                       reduce_send_starts,\n+     >                       reduce_send_lengths,\n+     >                       reduce_recv_starts,\n+     >                       reduce_recv_lengths,\n+     >                       reduce_rrecv_starts )\n+\n+      common / partit_size  /  naa, nzz,\n+     >                         npcols, nprows,\n+     >                         proc_col, proc_row,\n+     >                         firstrow,\n+     >                         lastrow,\n+     >                         firstcol,\n+     >                         lastcol,\n+     >                         exch_proc,\n+     >                         exch_recv_length,\n+     >                         send_start,\n+     >                         send_len\n+\n+      integer                  naa, nzz,\n+     >                         npcols, nprows,\n+     >                         proc_col, proc_row,\n+     >                         firstrow,\n+     >                         lastrow,\n+     >                         firstcol,\n+     >                         lastcol,\n+     >                         exch_proc,\n+     >                         exch_recv_length,\n+     >                         send_start,\n+     >                         send_len\n+\n+      double precision   x(*),\n+     >                   z(*),\n+     >                   a(nzz)\n+      integer            colidx(nzz), rowstr(naa+1)\n+\n+      double precision   p(*),\n+     >                   q(*)[0:*],\n+     >                   r(*)[0:*],\n+     >                   w(*)[0:*]        ! used as work temporary\n+\n+      integer   l2npcols\n+      integer   reduce_exch_proc(l2npcols)\n+      integer   reduce_send_starts(l2npcols)\n+      integer   reduce_send_lengths(l2npcols)\n+      integer   reduce_recv_starts(l2npcols)[0:*]\n+      integer   reduce_recv_lengths(l2npcols)\n+      integer   reduce_rrecv_starts(l2npcols)\n+\n+      double precision   rnorm\n+\n+      end subroutine\n+\n+      end interface\n+\n+c---------------------------------------------------------------------\n+c  The call to the conjugate gradient routine:\n+c---------------------------------------------------------------------\n+         call conj_grad ( colidx,\n+     >                    rowstr,\n+     >                    x,\n+     >                    z,\n+     >                    a,\n+     >                    p,\n+     >                    q,\n+     >                    r,\n+     >                    w,\n+     >                    rnorm,\n+     >                    l2npcols,\n+     >                    reduce_exch_proc,\n+     >                    reduce_send_starts,\n+     >                    reduce_send_lengths,\n+     >                    reduce_recv_starts,\n+     >                    reduce_recv_lengths,\n+     >                    reduce_rrecv_starts ) \n+\n+\n+      sync all\n+\n+      end                              ! end main\n+\n+c---------------------------------------------------------------------\n+c---------------------------------------------------------------------\n+      subroutine conj_grad ( colidx,\n+     >                       rowstr,\n+     >                       x,\n+     >                       z,\n+     >                       a,\n+     >                       p,\n+     >                       q,\n+     >                       r,\n+     >                       w,\n+     >                       rnorm,\n+     >                       l2npcols,\n+     >                       reduce_exch_proc,\n+     >                       reduce_send_starts,\n+     >                       reduce_send_lengths,\n+     >                       reduce_recv_starts,\n+     >                       reduce_recv_lengths,\n+     >                       reduce_rrecv_starts )\n+c---------------------------------------------------------------------\n+c---------------------------------------------------------------------\n+\n+c---------------------------------------------------------------------\n+c  Floaging point arrays here are named as in NPB1 spec discussion of\n+c  CG algorithm\n+c---------------------------------------------------------------------\n+\n+      implicit none\n+\n+c      include 'cafnpb.h'\n+\n+      common / partit_size  /  naa, nzz,\n+     >                         npcols, nprows,\n+     >                         proc_col, proc_row,\n+     >                         firstrow,\n+     >                         lastrow,\n+     >                         firstcol,\n+     >                         lastcol,\n+     >                         exch_proc,\n+     >                         exch_recv_length,\n+     >                         send_start,\n+     >                         send_len\n+      integer                  naa, nzz,\n+     >                         npcols, nprows,\n+     >                         proc_col, proc_row,\n+     >                         firstrow,\n+     >                         lastrow,\n+     >                         firstcol,\n+     >                         lastcol,\n+     >                         exch_proc,\n+     >                         exch_recv_length,\n+     >                         send_start,\n+     >                         send_len\n+\n+\n+\n+      double precision   x(*),\n+     >                   z(*),\n+     >                   a(nzz)\n+      integer            colidx(nzz), rowstr(naa+1)\n+\n+      double precision   p(*),\n+     >                   q(*)[0:*],\n+     >                   r(*)[0:*],\n+     >                   w(*)[0:*]        ! used as work temporary\n+\n+      integer   l2npcols\n+      integer   reduce_exch_proc(l2npcols)\n+      integer   reduce_send_starts(l2npcols)\n+      integer   reduce_send_lengths(l2npcols)\n+      integer   reduce_recv_starts(l2npcols)[0:*]\n+      integer   reduce_recv_lengths(l2npcols)\n+      integer   reduce_rrecv_starts(l2npcols)\n+\n+      integer   recv_start_idx, recv_end_idx, send_start_idx,\n+     >          send_end_idx, recv_length\n+\n+      integer   i, j, k, ierr\n+      integer   cgit, cgitmax\n+\n+      double precision, save :: d[0:*], rho[0:*]\n+      double precision   sum, rho0, alpha, beta, rnorm\n+\n+      external         timer_read\n+      double precision timer_read\n+\n+      data      cgitmax / 25 /\n+\n+\n+      return\n+      end                       ! end of routine conj_grad\n+"}, {"sha": "6f56c323d2e4b56b6cc9ab6d1a60ab924d9143b5", "filename": "gcc/testsuite/gfortran.dg/coarray_37.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_37.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25affbdc1fab885366de251e04e2e56d0b4f6cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_37.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_37.f90?ref=b25affbdc1fab885366de251e04e2e56d0b4f6cc", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+      program cg\n+        implicit none\n+        integer reduce_recv_starts(2)[1,0:*]\n+        interface\n+          subroutine conj_grad (reduce_recv_starts) ! { dg-warning \"Interface mismatch in global procedure 'conj_grad' at \\\\(1\\\\): Corank mismatch in argument 'reduce_recv_starts' \\\\(2/1\\\\)\" }\n+            integer   reduce_recv_starts(2)[2, 2:*]\n+          end subroutine\n+        end interface\n+        call conj_grad (reduce_recv_starts) ! Corank mismatch is okay\n+      end\n+\n+      subroutine conj_grad (reduce_recv_starts)\n+        implicit none\n+        integer reduce_recv_starts(2)[2:*]\n+      end"}]}