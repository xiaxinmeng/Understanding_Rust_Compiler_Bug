{"sha": "60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "node_id": "C_kwDOANBUbNoAKDYwNDY4ZDZjZDQ2YTNiZDNhZmU4ZmY4NTZmODJhZmNkNGM2NWEyMTc", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2022-08-01T18:49:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-08-16T19:15:38Z"}, "message": "c++: Fix pragma suppression of -Wc++20-compat diagnostics [PR106423]\n\nGcc's '#pragma GCC diagnostic' directives are processed in \"early mode\"\n(see handle_pragma_diagnostic_early) for the C++ frontend and, as such,\nrequire that the target diagnostic option be enabled for the preprocessor\n(see c_option_is_from_cpp_diagnostics).  This change modifies the\n-Wc++20-compat option definition to register it as a preprocessor option\nso that its associated diagnostics can be suppressed.  The changes also\nimplicitly disable the option in C++20 and later modes.  These changes\nare consistent with the definition of the -Wc++11-compat option.\n\nThis support is motivated by the need to suppress the following diagnostic\notherwise issued in C++17 and earlier modes due to the char8_t typedef\npresent in the uchar.h header file in glibc 2.36.\n  warning: identifier \u2018char8_t\u2019 is a keyword in C++20 [-Wc++20-compat]\n\nTests are added to validate suppression of both -Wc++11-compat and\n-Wc++20-compat related diagnostics (fixes were only needed for the C++20\ncase).\n\n\tPR c++/106423\n\ngcc/c-family/ChangeLog:\n\t* c-opts.cc (c_common_post_options): Disable -Wc++20-compat\n\tdiagnostics in C++20 and later.\n\t* c.opt (Wc++20-compat): Enable hooks for the preprocessor.\n\ngcc/cp/ChangeLog:\n\t* parser.cc (cp_lexer_saving_tokens): Add comment regarding\n\tdiagnostic requirements.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/cpp0x/keywords2.C: New test.\n\t* g++.dg/cpp2a/keywords2.C: New test.\n\nlibcpp/ChangeLog:\n\t* include/cpplib.h (cpp_warning_reason): Add CPP_W_CXX20_COMPAT.\n\t* init.cc (cpp_create_reader): Add cpp_warn_cxx20_compat.", "tree": {"sha": "3308c16996216b7b352a5bb9d447dd6dbfc004d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3308c16996216b7b352a5bb9d447dd6dbfc004d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9580ab573dd59e7eaff768b1e5fc736be8c63d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9580ab573dd59e7eaff768b1e5fc736be8c63d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9580ab573dd59e7eaff768b1e5fc736be8c63d20"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "337a52443721978fb0126f0c2d4b180d64fff37c", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "patch": "@@ -1046,6 +1046,13 @@ c_common_post_options (const char **pfilename)\n   else if (warn_narrowing == -1)\n     warn_narrowing = 0;\n \n+  if (cxx_dialect >= cxx20)\n+    {\n+      /* Don't warn about C++20 compatibility changes in C++20 or later.  */\n+      warn_cxx20_compat = 0;\n+      cpp_opts->cpp_warn_cxx20_compat = 0;\n+    }\n+\n   /* C++17 has stricter evaluation order requirements; let's use some of them\n      for earlier C++ as well, so chaining works as expected.  */\n   if (c_dialect_cxx ()"}, {"sha": "dfdebd596ef98ae8869895805c9f48d807e75187", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "patch": "@@ -455,7 +455,7 @@ Wc++2a-compat\n C++ ObjC++ Warning Alias(Wc++20-compat) Undocumented\n \n Wc++20-compat\n-C++ ObjC++ Var(warn_cxx20_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n+C++ ObjC++ Var(warn_cxx20_compat) Warning LangEnabledBy(C++ ObjC++,Wall) Init(0) CPP(cpp_warn_cxx20_compat) CppReason(CPP_W_CXX20_COMPAT)\n Warn about C++ constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.\n \n Wc++11-extensions"}, {"sha": "68fc78e7c5c15e6d30be70c0debcc764513c7213", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "patch": "@@ -924,7 +924,10 @@ cp_lexer_saving_tokens (const cp_lexer* lexer)\n /* Store the next token from the preprocessor in *TOKEN.  Return true\n    if we reach EOF.  If LEXER is NULL, assume we are handling an\n    initial #pragma pch_preprocess, and thus want the lexer to return\n-   processed strings.  */\n+   processed strings.\n+\n+   Diagnostics issued from this function must have their controlling option (if\n+   any) in c.opt annotated as a libcpp option via the CppReason property.  */\n \n static void\n cp_lexer_get_preprocessor_token (unsigned flags, cp_token *token)"}, {"sha": "d67d01e31edb32e7f4d7fc8f82e1694037c6756f", "filename": "gcc/testsuite/g++.dg/cpp0x/keywords2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fkeywords2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fkeywords2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fkeywords2.C?ref=60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++98_only } }\n+// { dg-options \"-Wc++11-compat\" }\n+\n+// Validate suppression of -Wc++11-compat diagnostics.\n+#pragma GCC diagnostic ignored \"-Wc++11-compat\"\n+int alignof;\n+int alignas;\n+int constexpr;\n+int decltype;\n+int noexcept;\n+int nullptr;\n+int static_assert;\n+int thread_local;\n+int _Alignas;\n+int _Alignof;\n+int _Thread_local;"}, {"sha": "8714a7b26b788cbde8db6f089f40b0b92bb442a6", "filename": "gcc/testsuite/g++.dg/cpp2a/keywords2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fkeywords2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fkeywords2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fkeywords2.C?ref=60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile { target c++17_down } }\n+// { dg-options \"-Wc++20-compat\" }\n+\n+// Validate suppression of -Wc++20-compat diagnostics.\n+#pragma GCC diagnostic ignored \"-Wc++20-compat\"\n+int constinit;\n+int consteval;\n+int requires;\n+int concept;\n+int co_await;\n+int co_yield;\n+int co_return;\n+int char8_t;"}, {"sha": "26e2b4cf4723866e60c2a1fc4ecf8ceaf53a0325", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "patch": "@@ -547,6 +547,9 @@ struct cpp_options\n   /* True if warn about differences between C++98 and C++11.  */\n   bool cpp_warn_cxx11_compat;\n \n+  /* True if warn about differences between C++17 and C++20.  */\n+  bool cpp_warn_cxx20_compat;\n+\n   /* Nonzero if bidirectional control characters checking is on.  See enum\n      cpp_bidirectional_level.  */\n   unsigned char cpp_warn_bidirectional;\n@@ -655,6 +658,7 @@ enum cpp_warning_reason {\n   CPP_W_C90_C99_COMPAT,\n   CPP_W_C11_C2X_COMPAT,\n   CPP_W_CXX11_COMPAT,\n+  CPP_W_CXX20_COMPAT,\n   CPP_W_EXPANSION_TO_DEFINED,\n   CPP_W_BIDIRECTIONAL\n };"}, {"sha": "59641a7f876e1968818c2694365711199107f10f", "filename": "libcpp/init.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60468d6cd46a3bd3afe8ff856f82afcd4c65a217/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=60468d6cd46a3bd3afe8ff856f82afcd4c65a217", "patch": "@@ -202,6 +202,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, cpp_warn_c90_c99_compat) = -1;\n   CPP_OPTION (pfile, cpp_warn_c11_c2x_compat) = -1;\n   CPP_OPTION (pfile, cpp_warn_cxx11_compat) = 0;\n+  CPP_OPTION (pfile, cpp_warn_cxx20_compat) = 0;\n   CPP_OPTION (pfile, cpp_warn_deprecated) = 1;\n   CPP_OPTION (pfile, cpp_warn_long_long) = 0;\n   CPP_OPTION (pfile, dollars_in_ident) = 1;"}]}