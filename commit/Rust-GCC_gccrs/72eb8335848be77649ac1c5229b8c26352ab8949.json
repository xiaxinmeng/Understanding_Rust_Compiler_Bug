{"sha": "72eb8335848be77649ac1c5229b8c26352ab8949", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlYjgzMzU4NDhiZTc3NjQ5YWMxYzUyMjliOGMyNjM1MmFiODk0OQ==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-10-13T07:07:21Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-10-15T03:12:39Z"}, "message": "RISC-V: Add support for -mcpu option.\n\n - The behavior of -mcpu basically equal to -march plus -mtune, but it\n   has lower priority than -march and -mtune.\n\n - The behavior and available options has sync with clang except we don't add\n   few LLVM specific value, and add more sifive processor to the list.\n\n - -mtune also accept all available options of -mcpu, and use it setting.\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.c (riscv_cpu_tables): New.\n\t(riscv_arch_str): Return empty string if current_subset_list\n\tis NULL.\n\t(riscv_find_cpu): New.\n\t(riscv_handle_option): Verify option value of -mcpu.\n\t(riscv_expand_arch): Using std::string.\n\t(riscv_default_mtune): New.\n\t(riscv_expand_arch_from_cpu): Ditto.\n\t* config/riscv/riscv-cores.def: New.\n\t* config/riscv/riscv-protos.h (riscv_find_cpu): New.\n\t(riscv_cpu_info): New.\n\t* config/riscv/riscv.c (riscv_tune_info): Rename ...\n\t(riscv_tune_param): ... to this.\n\t(riscv_cpu_info): Rename ...\n\t(riscv_tune_info): ... to this.\n\t(tune_info): Rename ...\n\t(tune_param): ... to this.\n\t(rocket_tune_info): Update data type name.\n\t(sifive_7_tune_info): Ditto.\n\t(optimize_size_tune_info): Ditto.\n\t(riscv_cpu_info_table): Rename ...\n\t(riscv_tune_info_table): ... to this.\n\t(riscv_parse_cpu): Rename ...\n\t(riscv_parse_tune): ... to this, and translate valid -mcpu option to\n\t-mtune option.\n\t(riscv_rtx_costs): Rename tune_info to tune_param.\n\t(riscv_class_max_nregs): Ditto.\n\t(riscv_memory_move_cost): Ditto.\n\t(riscv_init_machine_status): Use value of -mcpu if -mtune is not\n\tgiven, and rename tune_info to tune_param.\n\t* config/riscv/riscv.h (riscv_expand_arch_from_cpu): New.\n\t(riscv_default_mtune): Ditto.\n\t(EXTRA_SPEC_FUNCTIONS): Add riscv_expand_arch_from_cpu and\n\triscv_default_mtune.\n\t(OPTION_DEFAULT_SPECS): Handle default value of -march/-mabi.\n\t(DRIVER_SELF_SPECS): Expand -march from -mcpu if -march is not\n\tgiven.\n\t* config/riscv/riscv.opt (-mcpu): New option.\n\t* config/riscv/t-riscv ($(common_out_file)): Add\n\triscv-cores.def to dependency.\n\t* doc/invoke.texi (RISC-V Option): Add -mcpu, and update the\n\tdescription of default value for -mtune and -march.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/mcpu-1.c: New.\n\t* gcc.target/riscv/mcpu-2.c: Ditto.\n\t* gcc.target/riscv/mcpu-3.c: Ditto.\n\t* gcc.target/riscv/mcpu-4.c: Ditto.\n\t* gcc.target/riscv/mcpu-5.c: Ditto.\n\t* gcc.target/riscv/mcpu-6.c: Ditto.\n\t* gcc.target/riscv/mcpu-7.c: Ditto.", "tree": {"sha": "0e37516358d838fad0ff170d9e98d863be23e7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e37516358d838fad0ff170d9e98d863be23e7e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72eb8335848be77649ac1c5229b8c26352ab8949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72eb8335848be77649ac1c5229b8c26352ab8949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72eb8335848be77649ac1c5229b8c26352ab8949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72eb8335848be77649ac1c5229b8c26352ab8949/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83927c63897ec25b2efb5dac58f20a0561d28f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83927c63897ec25b2efb5dac58f20a0561d28f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83927c63897ec25b2efb5dac58f20a0561d28f26"}], "stats": {"total": 417, "additions": 356, "deletions": 61}, "files": [{"sha": "4b6bdf8685d7ed4a32aef074a5ade4fbc7b92efb", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 86, "deletions": 5, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -60,6 +60,14 @@ riscv_implied_info_t riscv_implied_info[] =\n   {NULL, NULL}\n };\n \n+static const riscv_cpu_info riscv_cpu_tables[] =\n+{\n+#define RISCV_CORE(CORE_NAME, ARCH, TUNE) \\\n+    {CORE_NAME, ARCH, TUNE},\n+#include \"../../../config/riscv/riscv-cores.def\"\n+    {NULL, NULL, NULL}\n+};\n+\n /* Subset list.  */\n class riscv_subset_list\n {\n@@ -604,8 +612,10 @@ riscv_subset_list::parse (const char *arch, location_t loc)\n std::string\n riscv_arch_str (bool version_p)\n {\n-  gcc_assert (current_subset_list);\n-  return current_subset_list->to_string (version_p);\n+  if (current_subset_list)\n+    return current_subset_list->to_string (version_p);\n+  else\n+    return std::string();\n }\n \n /* Parse a RISC-V ISA string into an option mask.  Must clear or set all arch\n@@ -653,6 +663,21 @@ riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n   current_subset_list = subset_list;\n }\n \n+/* Return the riscv_cpu_info entry for CPU, NULL if not found.  */\n+\n+const riscv_cpu_info *\n+riscv_find_cpu (const char *cpu)\n+{\n+  const riscv_cpu_info *cpu_info = &riscv_cpu_tables[0];\n+  for (;cpu_info->name != NULL; ++cpu_info)\n+    {\n+      const char *name = cpu_info->name;\n+      if (strcmp (cpu, name) == 0)\n+\treturn cpu_info;\n+    }\n+  return NULL;\n+}\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -667,6 +692,12 @@ riscv_handle_option (struct gcc_options *opts,\n       riscv_parse_arch_string (decoded->arg, &opts->x_target_flags, loc);\n       return true;\n \n+    case OPT_mcpu_:\n+      if (riscv_find_cpu (decoded->arg) == NULL)\n+\terror_at (loc, \"%<-mcpu=%s%>: unknown CPU\",\n+\t\t  decoded->arg);\n+      return true;\n+\n     default:\n       return true;\n     }\n@@ -678,15 +709,65 @@ const char *\n riscv_expand_arch (int argc ATTRIBUTE_UNUSED,\n \t\t   const char **argv)\n {\n-  static char *_arch_buf;\n   gcc_assert (argc == 1);\n   int flags;\n   location_t loc = UNKNOWN_LOCATION;\n   riscv_parse_arch_string (argv[0], &flags, loc);\n-  _arch_buf = xstrdup (riscv_arch_str (false).c_str ());\n-  return _arch_buf;\n+  const std::string arch = riscv_arch_str (false);\n+  if (arch.length())\n+    return xasprintf (\"-march=%s\", arch.c_str());\n+  else\n+    return \"\";\n }\n \n+/* Expand default -mtune option from -mcpu option, use default --with-tune value\n+   if -mcpu don't have valid value.  */\n+\n+const char *\n+riscv_default_mtune (int argc, const char **argv)\n+{\n+  gcc_assert (argc == 2);\n+  const riscv_cpu_info *cpu = riscv_find_cpu (argv[0]);\n+  const char *default_mtune = argv[1];\n+  if (cpu)\n+    return cpu->tune;\n+  else\n+    return default_mtune;\n+}\n+\n+/* Expand arch string with implied extensions from -mcpu option.  */\n+\n+const char *\n+riscv_expand_arch_from_cpu (int argc ATTRIBUTE_UNUSED,\n+\t\t\t    const char **argv)\n+{\n+  gcc_assert (argc > 0 && argc <= 2);\n+  const char *default_arch_str = NULL;\n+  const char *arch_str = NULL;\n+  if (argc >= 2)\n+    default_arch_str = argv[1];\n+\n+  const riscv_cpu_info *cpu = riscv_find_cpu (argv[0]);\n+\n+  if (cpu == NULL)\n+    {\n+      if (default_arch_str == NULL)\n+\treturn \"\";\n+      else\n+\tarch_str = default_arch_str;\n+    }\n+  else\n+    arch_str = cpu->arch;\n+\n+  location_t loc = UNKNOWN_LOCATION;\n+  int flags;\n+\n+  riscv_parse_arch_string (arch_str, &flags, loc);\n+  const std::string arch = riscv_arch_str (false);\n+  return xasprintf (\"-march=%s\", arch.c_str());\n+}\n+\n+\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options riscv_option_optimization_table[] =\n   {"}, {"sha": "6a13f3e453c45fd01b905c347ae7e98a972599a3", "filename": "gcc/config/riscv/riscv-cores.def", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-cores.def?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,49 @@\n+/* List of supported core and tune info for RISC-V.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This is a list of cores that implement RISC-V.\n+\n+   Before using #include to read this file, define a macro:\n+\n+      RISCV_CORE(CORE_NAME, ARCH, MICRO_ARCH, TUNE_INFO)\n+\n+   The CORE_NAME is the name of the core, represented as a string.\n+   The ARCH is the default arch of the core, represented as a string,\n+   can be NULL if no default arch.\n+   The MICRO_ARCH is the name of the core for which scheduling decisions\n+   will be made, represented as an identifier.\n+   The TUNE_INFO is the detail cost model for this core, represented as an\n+   identifier, reference to riscv-tunes.def.  */\n+\n+RISCV_CORE(\"sifive-e20\",      \"rv32imc\",    \"rocket\")\n+RISCV_CORE(\"sifive-e21\",      \"rv32imac\",   \"rocket\")\n+RISCV_CORE(\"sifive-e24\",      \"rv32imafc\",  \"rocket\")\n+RISCV_CORE(\"sifive-e31\",      \"rv32imac\",   \"sifive-3-series\")\n+RISCV_CORE(\"sifive-e34\",      \"rv32imafc\",  \"sifive-3-series\")\n+RISCV_CORE(\"sifive-e76\",      \"rv32imafc\",  \"sifive-7-series\")\n+\n+RISCV_CORE(\"sifive-s21\",      \"rv64imac\",   \"rocket\")\n+RISCV_CORE(\"sifive-s51\",      \"rv64imac\",   \"sifive-5-series\")\n+RISCV_CORE(\"sifive-s54\",      \"rv64imafdc\", \"sifive-5-series\")\n+RISCV_CORE(\"sifive-s76\",      \"rv64imafdc\", \"sifive-7-series\")\n+\n+RISCV_CORE(\"sifive-u54\",      \"rv64imafdc\", \"sifive-5-series\")\n+RISCV_CORE(\"sifive-u74\",      \"rv64imafdc\", \"sifive-7-series\")\n+\n+#undef RISCV_CORE"}, {"sha": "256dab1d0cff57f5d578d49e3b3b69984d3db062", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -94,4 +94,18 @@ extern bool riscv_hard_regno_rename_ok (unsigned, unsigned);\n \n rtl_opt_pass * make_pass_shorten_memrefs (gcc::context *ctxt);\n \n+/* Information about one CPU we know about.  */\n+struct riscv_cpu_info {\n+  /* This CPU's canonical name.  */\n+  const char *name;\n+\n+  /* Default arch for this CPU, could be NULL if no default arch.  */\n+  const char *arch;\n+\n+  /* Which automaton to use for tuning.  */\n+  const char *tune;\n+};\n+\n+extern const riscv_cpu_info *riscv_find_cpu (const char *);\n+\n #endif /* ! GCC_RISCV_PROTOS_H */"}, {"sha": "989a9f15250c2fc1decb4f7e2ea0c2b2618f6892", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 52, "deletions": 45, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -209,7 +209,7 @@ struct riscv_integer_op {\n \n /* Costs of various operations on the different architectures.  */\n \n-struct riscv_tune_info\n+struct riscv_tune_param\n {\n   unsigned short fp_add[2];\n   unsigned short fp_mul[2];\n@@ -222,16 +222,16 @@ struct riscv_tune_info\n   bool slow_unaligned_access;\n };\n \n-/* Information about one CPU we know about.  */\n-struct riscv_cpu_info {\n-  /* This CPU's canonical name.  */\n+/* Information about one micro-arch we know about.  */\n+struct riscv_tune_info {\n+  /* This micro-arch canonical name.  */\n   const char *name;\n \n   /* Which automaton to use for tuning.  */\n   enum riscv_microarchitecture_type microarchitecture;\n \n-  /* Tuning parameters for this CPU.  */\n-  const struct riscv_tune_info *tune_info;\n+  /* Tuning parameters for this micro-arch.  */\n+  const struct riscv_tune_param *tune_param;\n };\n \n /* Global variables for machine-dependent things.  */\n@@ -248,7 +248,7 @@ unsigned riscv_stack_boundary;\n static int epilogue_cfa_sp_offset;\n \n /* Which tuning parameters to use.  */\n-static const struct riscv_tune_info *tune_info;\n+static const struct riscv_tune_param *tune_param;\n \n /* Which automaton to use for tuning.  */\n enum riscv_microarchitecture_type riscv_microarchitecture;\n@@ -275,7 +275,7 @@ const enum reg_class riscv_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n };\n \n /* Costs to use when optimizing for rocket.  */\n-static const struct riscv_tune_info rocket_tune_info = {\n+static const struct riscv_tune_param rocket_tune_info = {\n   {COSTS_N_INSNS (4), COSTS_N_INSNS (5)},\t/* fp_add */\n   {COSTS_N_INSNS (4), COSTS_N_INSNS (5)},\t/* fp_mul */\n   {COSTS_N_INSNS (20), COSTS_N_INSNS (20)},\t/* fp_div */\n@@ -288,7 +288,7 @@ static const struct riscv_tune_info rocket_tune_info = {\n };\n \n /* Costs to use when optimizing for Sifive 7 Series.  */\n-static const struct riscv_tune_info sifive_7_tune_info = {\n+static const struct riscv_tune_param sifive_7_tune_info = {\n   {COSTS_N_INSNS (4), COSTS_N_INSNS (5)},\t/* fp_add */\n   {COSTS_N_INSNS (4), COSTS_N_INSNS (5)},\t/* fp_mul */\n   {COSTS_N_INSNS (20), COSTS_N_INSNS (20)},\t/* fp_div */\n@@ -301,7 +301,7 @@ static const struct riscv_tune_info sifive_7_tune_info = {\n };\n \n /* Costs to use when optimizing for size.  */\n-static const struct riscv_tune_info optimize_size_tune_info = {\n+static const struct riscv_tune_param optimize_size_tune_info = {\n   {COSTS_N_INSNS (1), COSTS_N_INSNS (1)},\t/* fp_add */\n   {COSTS_N_INSNS (1), COSTS_N_INSNS (1)},\t/* fp_mul */\n   {COSTS_N_INSNS (1), COSTS_N_INSNS (1)},\t/* fp_div */\n@@ -343,25 +343,30 @@ static const unsigned gpr_save_reg_order[] = {\n };\n \n /* A table describing all the processors GCC knows about.  */\n-static const struct riscv_cpu_info riscv_cpu_info_table[] = {\n+static const struct riscv_tune_info riscv_tune_info_table[] = {\n   { \"rocket\", generic, &rocket_tune_info },\n   { \"sifive-3-series\", generic, &rocket_tune_info },\n   { \"sifive-5-series\", generic, &rocket_tune_info },\n   { \"sifive-7-series\", sifive_7, &sifive_7_tune_info },\n   { \"size\", generic, &optimize_size_tune_info },\n };\n \n-/* Return the riscv_cpu_info entry for the given name string.  */\n+/* Return the riscv_tune_info entry for the given name string.  */\n \n-static const struct riscv_cpu_info *\n-riscv_parse_cpu (const char *cpu_string)\n+static const struct riscv_tune_info *\n+riscv_parse_tune (const char *tune_string)\n {\n-  for (unsigned i = 0; i < ARRAY_SIZE (riscv_cpu_info_table); i++)\n-    if (strcmp (riscv_cpu_info_table[i].name, cpu_string) == 0)\n-      return riscv_cpu_info_table + i;\n+  const riscv_cpu_info *cpu = riscv_find_cpu (tune_string);\n \n-  error (\"unknown cpu %qs for %<-mtune%>\", cpu_string);\n-  return riscv_cpu_info_table;\n+  if (cpu)\n+    tune_string = cpu->tune;\n+\n+  for (unsigned i = 0; i < ARRAY_SIZE (riscv_tune_info_table); i++)\n+    if (strcmp (riscv_tune_info_table[i].name, tune_string) == 0)\n+      return riscv_tune_info_table + i;\n+\n+  error (\"unknown cpu %qs for %<-mtune%>\", tune_string);\n+  return riscv_tune_info_table;\n }\n \n /* Helper function for riscv_build_integer; arguments are as for\n@@ -1703,7 +1708,7 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \t instructions it needs.  */\n       if ((cost = riscv_address_insns (XEXP (x, 0), mode, true)) > 0)\n \t{\n-\t  *total = COSTS_N_INSNS (cost + tune_info->memory_cost);\n+\t  *total = COSTS_N_INSNS (cost + tune_param->memory_cost);\n \t  return true;\n \t}\n       /* Otherwise use the default handling.  */\n@@ -1770,7 +1775,7 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \t mode instead.  */\n       mode = GET_MODE (XEXP (x, 0));\n       if (float_mode_p)\n-\t*total = tune_info->fp_add[mode == DFmode];\n+\t*total = tune_param->fp_add[mode == DFmode];\n       else\n \t*total = riscv_binary_cost (x, 1, 3);\n       return false;\n@@ -1779,19 +1784,19 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n     case ORDERED:\n       /* (FEQ(A, A) & FEQ(B, B)) compared against 0.  */\n       mode = GET_MODE (XEXP (x, 0));\n-      *total = tune_info->fp_add[mode == DFmode] + COSTS_N_INSNS (2);\n+      *total = tune_param->fp_add[mode == DFmode] + COSTS_N_INSNS (2);\n       return false;\n \n     case UNEQ:\n       /* (FEQ(A, A) & FEQ(B, B)) compared against FEQ(A, B).  */\n       mode = GET_MODE (XEXP (x, 0));\n-      *total = tune_info->fp_add[mode == DFmode] + COSTS_N_INSNS (3);\n+      *total = tune_param->fp_add[mode == DFmode] + COSTS_N_INSNS (3);\n       return false;\n \n     case LTGT:\n       /* (FLT(A, A) || FGT(B, B)).  */\n       mode = GET_MODE (XEXP (x, 0));\n-      *total = tune_info->fp_add[mode == DFmode] + COSTS_N_INSNS (2);\n+      *total = tune_param->fp_add[mode == DFmode] + COSTS_N_INSNS (2);\n       return false;\n \n     case UNGE:\n@@ -1800,13 +1805,13 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n     case UNLT:\n       /* FLT or FLE, but guarded by an FFLAGS read and write.  */\n       mode = GET_MODE (XEXP (x, 0));\n-      *total = tune_info->fp_add[mode == DFmode] + COSTS_N_INSNS (4);\n+      *total = tune_param->fp_add[mode == DFmode] + COSTS_N_INSNS (4);\n       return false;\n \n     case MINUS:\n     case PLUS:\n       if (float_mode_p)\n-\t*total = tune_info->fp_add[mode == DFmode];\n+\t*total = tune_param->fp_add[mode == DFmode];\n       else\n \t*total = riscv_binary_cost (x, 1, 4);\n       return false;\n@@ -1816,7 +1821,7 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \trtx op = XEXP (x, 0);\n \tif (GET_CODE (op) == FMA && !HONOR_SIGNED_ZEROS (mode))\n \t  {\n-\t    *total = (tune_info->fp_mul[mode == DFmode]\n+\t    *total = (tune_param->fp_mul[mode == DFmode]\n \t\t      + set_src_cost (XEXP (op, 0), mode, speed)\n \t\t      + set_src_cost (XEXP (op, 1), mode, speed)\n \t\t      + set_src_cost (XEXP (op, 2), mode, speed));\n@@ -1825,31 +1830,31 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n       }\n \n       if (float_mode_p)\n-\t*total = tune_info->fp_add[mode == DFmode];\n+\t*total = tune_param->fp_add[mode == DFmode];\n       else\n \t*total = COSTS_N_INSNS (GET_MODE_SIZE (mode) > UNITS_PER_WORD ? 4 : 1);\n       return false;\n \n     case MULT:\n       if (float_mode_p)\n-\t*total = tune_info->fp_mul[mode == DFmode];\n+\t*total = tune_param->fp_mul[mode == DFmode];\n       else if (!TARGET_MUL)\n \t/* Estimate the cost of a library call.  */\n \t*total = COSTS_N_INSNS (speed ? 32 : 6);\n       else if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n-\t*total = 3 * tune_info->int_mul[0] + COSTS_N_INSNS (2);\n+\t*total = 3 * tune_param->int_mul[0] + COSTS_N_INSNS (2);\n       else if (!speed)\n \t*total = COSTS_N_INSNS (1);\n       else\n-\t*total = tune_info->int_mul[mode == DImode];\n+\t*total = tune_param->int_mul[mode == DImode];\n       return false;\n \n     case DIV:\n     case SQRT:\n     case MOD:\n       if (float_mode_p)\n \t{\n-\t  *total = tune_info->fp_div[mode == DFmode];\n+\t  *total = tune_param->fp_div[mode == DFmode];\n \t  return false;\n \t}\n       /* Fall through.  */\n@@ -1860,7 +1865,7 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \t/* Estimate the cost of a library call.  */\n \t*total = COSTS_N_INSNS (speed ? 32 : 6);\n       else if (speed)\n-\t*total = tune_info->int_div[mode == DImode];\n+\t*total = tune_param->int_div[mode == DImode];\n       else\n \t*total = COSTS_N_INSNS (1);\n       return false;\n@@ -1882,11 +1887,11 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n     case FIX:\n     case FLOAT_EXTEND:\n     case FLOAT_TRUNCATE:\n-      *total = tune_info->fp_add[mode == DFmode];\n+      *total = tune_param->fp_add[mode == DFmode];\n       return false;\n \n     case FMA:\n-      *total = (tune_info->fp_mul[mode == DFmode]\n+      *total = (tune_param->fp_mul[mode == DFmode]\n \t\t+ set_src_cost (XEXP (x, 0), mode, speed)\n \t\t+ set_src_cost (XEXP (x, 1), mode, speed)\n \t\t+ set_src_cost (XEXP (x, 2), mode, speed));\n@@ -4546,7 +4551,7 @@ riscv_class_max_nregs (reg_class_t rclass, machine_mode mode)\n static int\n riscv_memory_move_cost (machine_mode mode, reg_class_t rclass, bool in)\n {\n-  return (tune_info->memory_cost\n+  return (tune_param->memory_cost\n \t  + memory_move_secondary_cost (mode, rclass, in));\n }\n \n@@ -4555,7 +4560,7 @@ riscv_memory_move_cost (machine_mode mode, reg_class_t rclass, bool in)\n static int\n riscv_issue_rate (void)\n {\n-  return tune_info->issue_rate;\n+  return tune_param->issue_rate;\n }\n \n /* Auxiliary function to emit RISC-V ELF attribute. */\n@@ -4683,7 +4688,7 @@ riscv_init_machine_status (void)\n static void\n riscv_option_override (void)\n {\n-  const struct riscv_cpu_info *cpu;\n+  const struct riscv_tune_info *cpu;\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n@@ -4705,26 +4710,28 @@ riscv_option_override (void)\n   if (TARGET_HARD_FLOAT && (target_flags_explicit & MASK_FDIV) == 0)\n     target_flags |= MASK_FDIV;\n \n-  /* Handle -mtune.  */\n-  cpu = riscv_parse_cpu (riscv_tune_string ? riscv_tune_string :\n-\t\t\t RISCV_TUNE_STRING_DEFAULT);\n+  /* Handle -mtune, use -mcpu if -mtune is not given, and use default -mtune\n+     if -mtune and -mcpu both not not given.  */\n+  cpu = riscv_parse_tune (riscv_tune_string ? riscv_tune_string :\n+\t\t\t  (riscv_cpu_string ? riscv_cpu_string :\n+\t\t\t   RISCV_TUNE_STRING_DEFAULT));\n   riscv_microarchitecture = cpu->microarchitecture;\n-  tune_info = optimize_size ? &optimize_size_tune_info : cpu->tune_info;\n+  tune_param = optimize_size ? &optimize_size_tune_info : cpu->tune_param;\n \n   /* Use -mtune's setting for slow_unaligned_access, even when optimizing\n      for size.  For architectures that trap and emulate unaligned accesses,\n      the performance cost is too great, even for -Os.  Similarly, if\n      -m[no-]strict-align is left unspecified, heed -mtune's advice.  */\n-  riscv_slow_unaligned_access_p = (cpu->tune_info->slow_unaligned_access\n+  riscv_slow_unaligned_access_p = (cpu->tune_param->slow_unaligned_access\n \t\t\t\t   || TARGET_STRICT_ALIGN);\n   if ((target_flags_explicit & MASK_STRICT_ALIGN) == 0\n-      && cpu->tune_info->slow_unaligned_access)\n+      && cpu->tune_param->slow_unaligned_access)\n     target_flags |= MASK_STRICT_ALIGN;\n \n   /* If the user hasn't specified a branch cost, use the processor's\n      default.  */\n   if (riscv_branch_cost == 0)\n-    riscv_branch_cost = tune_info->branch_cost;\n+    riscv_branch_cost = tune_param->branch_cost;\n \n   /* Function to allocate machine-dependent function status.  */\n   init_machine_status = &riscv_init_machine_status;"}, {"sha": "172c7ca7c98bdcbe63440d1035871977136dd87f", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -41,17 +41,27 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n extern const char *riscv_expand_arch (int argc, const char **argv);\n+extern const char *riscv_expand_arch_from_cpu (int argc, const char **argv);\n+extern const char *riscv_default_mtune (int argc, const char **argv);\n \n # define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n-  { \"riscv_expand_arch\", riscv_expand_arch },\n+  { \"riscv_expand_arch\", riscv_expand_arch },\t\t\t\t\\\n+  { \"riscv_expand_arch_from_cpu\", riscv_expand_arch_from_cpu },\t\t\\\n+  { \"riscv_default_mtune\", riscv_default_mtune },\n \n /* Support for a compile-time default CPU, et cetera.  The rules are:\n-   --with-arch is ignored if -march is specified.\n+   --with-arch is ignored if -march or -mcpu is specified.\n    --with-abi is ignored if -mabi is specified.\n-   --with-tune is ignored if -mtune is specified.  */\n+   --with-tune is ignored if -mtune or -mcpu is specified.\n+\n+   But using default -march/-mtune value if -mcpu don't have valid option.  */\n #define OPTION_DEFAULT_SPECS \\\n-  {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }, \\\n-  {\"arch\", \"%{!march=*:-march=%(VALUE)}\" }, \\\n+  {\"tune\", \"%{!mtune=*:\"\t\t\t\t\t\t\\\n+\t   \"  %{!mcpu=*:-mtune=%(VALUE)}\"\t\t\t\t\\\n+\t   \"  %{mcpu=*:-mtune=%:riscv_default_mtune(%* %(VALUE))}}\" },\t\\\n+  {\"arch\", \"%{!march=*:\"\t\t\t\t\t\t\\\n+\t   \"  %{!mcpu=*:-march=%(VALUE)}\"\t\t\t\t\\\n+\t   \"  %{mcpu=*:%:riscv_expand_arch_from_cpu(%* %(VALUE))}}\" },\t\\\n   {\"abi\", \"%{!mabi=*:-mabi=%(VALUE)}\" }, \\\n \n #ifdef IN_LIBGCC2\n@@ -69,8 +79,9 @@ extern const char *riscv_expand_arch (int argc, const char **argv);\n %(subtarget_asm_spec)\"\n \n #undef DRIVER_SELF_SPECS\n-#define DRIVER_SELF_SPECS \\\n-\"%{march=*:-march=%:riscv_expand_arch(%*)}\"\n+#define DRIVER_SELF_SPECS\t\t\t\t\t\\\n+\"%{march=*:%:riscv_expand_arch(%*)} \"\t\t\t\t\\\n+\"%{!march=*:%{mcpu=*:%:riscv_expand_arch_from_cpu(%*)}} \"\n \n #define TARGET_DEFAULT_CMODEL CM_MEDLOW\n "}, {"sha": "808b4a04405487db49aeaf91cb442772db36e102", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -79,6 +79,10 @@ mtune=\n Target RejectNegative Joined Var(riscv_tune_string)\n -mtune=PROCESSOR\tOptimize the output for PROCESSOR.\n \n+mcpu=\n+Target RejectNegative Joined Var(riscv_cpu_string)\n+-mcpu=PROCESSOR\tUse architecture of and optimize the output for PROCESSOR.\n+\n msmall-data-limit=\n Target Joined Separate UInteger Var(g_switch_value) Init(8)\n -msmall-data-limit=N\tPut global and static data smaller than <number> bytes into a special section (on some targets)."}, {"sha": "702767c17362a6d55691a2248c69989f573e42d4", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -24,3 +24,5 @@ riscv-shorten-memrefs.o: $(srcdir)/config/riscv/riscv-shorten-memrefs.c\n \t$(POSTCOMPILE)\n \n PASSES_EXTRA += $(srcdir)/config/riscv/riscv-passes.def\n+\n+$(common_out_file): $(srcdir)/config/riscv/riscv-cores.def"}, {"sha": "289d81614b2f540c6a19f7ace395767850ffc111", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -26001,14 +26001,30 @@ Generate code for given RISC-V ISA (e.g.@: @samp{rv64im}).  ISA strings must be\n lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, @samp{rv32e}, and\n @samp{rv32imaf}.\n \n+When @option{-march=} is not specified, use the setting from @option{-mcpu}.\n+\n+If both @option{-march} and @option{-mcpu=} are not specified, the default for\n+this argument is system dependent, users who want a specific architecture\n+extensions should specify one explicitly.\n+\n+@item -mcpu=@var{processor-string}\n+@opindex mcpu\n+Use architecture of and optimize the output for the given processor, specified\n+by particular CPU name.\n+Permissible values for this option are: @samp{sifive-e20}, @samp{sifive-e21},\n+@samp{sifive-e24}, @samp{sifive-e31}, @samp{sifive-e34}, @samp{sifive-e76},\n+@samp{sifive-s21}, @samp{sifive-s51}, @samp{sifive-s54}, @samp{sifive-s76},\n+@samp{sifive-u54}, and @samp{sifive-u74}.\n+\n @item -mtune=@var{processor-string}\n @opindex mtune\n-Optimize the output for the given processor, specified by microarchitecture\n-name.  Permissible values for this option are: @samp{rocket},\n+Optimize the output for the given processor, specified by microarchitecture or\n+particular CPU name.  Permissible values for this option are: @samp{rocket},\n @samp{sifive-3-series}, @samp{sifive-5-series}, @samp{sifive-7-series},\n-and @samp{size}.\n+@samp{size}, and all valid options for @option{-mcpu=}.\n \n-When @option{-mtune=} is not specified, the default is @samp{rocket}.\n+When @option{-mtune=} is not specified, use the setting from @option{-mcpu},\n+the default is @samp{rocket} if both are not specified.\n \n The @samp{size} choice is not intended for use by end-users.  This is used\n when @option{-Os} is specified.  It overrides the instruction cost info"}, {"sha": "6f6005c79eb04adc113ae9a016c27c0daf8b9173", "filename": "gcc/testsuite/gcc.target/riscv/mcpu-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-1.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"-march given\" { *-*-* } { \"-march=*\" } } */\n+/* { dg-options \"-mcpu=sifive-e20 -mabi=ilp32\" } */\n+/* sifive-e20 = rv32imc */\n+\n+#if !((__riscv_xlen == 32)\t\t\\\n+      && !defined(__riscv_32e)\t\t\\\n+      && defined(__riscv_mul)\t\t\\\n+      && !defined(__riscv_atomic)\t\\\n+      && !defined(__riscv_flen)\t\t\\\n+      && defined(__riscv_compressed))\n+#error \"unexpected arch\"\n+#endif\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "2992f4e108364e1a603ed3c30295340d01b4c590", "filename": "gcc/testsuite/gcc.target/riscv/mcpu-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-2.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"-march given\" { *-*-* } { \"-march=*\" } } */\n+/* { dg-options \"-mcpu=sifive-e34 -mabi=ilp32\" } */\n+/* sifive-e34 = rv32imafc */\n+\n+#if !((__riscv_xlen == 32)\t\t\\\n+      && !defined(__riscv_32e)\t\t\\\n+      && defined(__riscv_mul)\t\t\\\n+      && defined(__riscv_atomic)\t\\\n+      && (__riscv_flen == 32)\t\t\\\n+      && defined(__riscv_compressed))\n+#error \"unexpected arch\"\n+#endif\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "97b3f8190faf20aa91be3652cbb778e6324a2ad2", "filename": "gcc/testsuite/gcc.target/riscv/mcpu-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-3.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"-march given\" { *-*-* } { \"-march=*\" } } */\n+/* { dg-options \"-mcpu=sifive-s51 -mabi=lp64\" } */\n+/* sifive-s51 = rv64imac */\n+\n+#if !((__riscv_xlen == 64)\t\t\\\n+      && !defined(__riscv_32e)\t\t\\\n+      && defined(__riscv_mul)\t\t\\\n+      && defined(__riscv_atomic)\t\\\n+      && !defined(__riscv_flen)\t\t\\\n+      && defined(__riscv_compressed))\n+#error \"unexpected arch\"\n+#endif\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "52c598754227bf8d1e44c8a5e34c0821ac0876a2", "filename": "gcc/testsuite/gcc.target/riscv/mcpu-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-4.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"-march given\" { *-*-* } { \"-march=*\" } } */\n+/* { dg-options \"-mcpu=sifive-u74 -mabi=lp64\" } */\n+/* sifive-u74 = rv64imafdc */\n+\n+#if !((__riscv_xlen == 64)\t\t\\\n+      && !defined(__riscv_32e)\t\t\\\n+      && defined(__riscv_mul)\t\t\\\n+      && defined(__riscv_atomic)\t\\\n+      && (__riscv_flen == 64)\t\t\\\n+      && defined(__riscv_compressed))\n+#error \"unexpected arch\"\n+#endif\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "c4ea7b5e41a37ff3a3c0455f9bc3a98554d72c75", "filename": "gcc/testsuite/gcc.target/riscv/mcpu-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-5.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"-march given\" { *-*-* } { \"-march=*\" } } */\n+/* Verify -march will override arch option from -mcpu.  */\n+/* { dg-options \"-mcpu=sifive-u74 -march=rv32ic -mabi=ilp32\" } */\n+/* sifive-s51 = rv64imafdc */\n+\n+#if !((__riscv_xlen == 32)\t\t\\\n+      && !defined(__riscv_32e)\t\t\\\n+      && !defined(__riscv_mul)\t\t\\\n+      && !defined(__riscv_atomic)\t\\\n+      && !defined(__riscv_flen)\t\t\\\n+      && defined(__riscv_compressed))\n+#error \"unexpected arch\"\n+#endif\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "57e3345630c382f2e6a7e7b07543eba65359c592", "filename": "gcc/testsuite/gcc.target/riscv/mcpu-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-6.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* Verify -mtune has higher priority than -mcpu for pipeline model .  */\n+/* { dg-options \"-mcpu=sifive-u74 -mtune=rocket -fdump-rtl-sched2-details -O3 -march=rv32i -mabi=ilp32\" } */\n+/* { dg-final { scan-rtl-dump \"simple_return\\[ \\]+:alu\" \"sched2\" } } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+"}, {"sha": "fe3c04be4b6d1f4cb71b117c6849908a0f0799c0", "filename": "gcc/testsuite/gcc.target/riscv/mcpu-7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eb8335848be77649ac1c5229b8c26352ab8949/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fmcpu-7.c?ref=72eb8335848be77649ac1c5229b8c26352ab8949", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* Verify -mtune has higher priority than -mcpu for pipeline model .  */\n+/* { dg-options \"-mcpu=sifive-s21 -mtune=sifive-u74 -fdump-rtl-sched2-details -O3 -march=rv32i -mabi=ilp32\" } */\n+/* { dg-final { scan-rtl-dump \"simple_return\\[ \\]+:sifive_7_B\" \"sched2\" } } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+"}]}