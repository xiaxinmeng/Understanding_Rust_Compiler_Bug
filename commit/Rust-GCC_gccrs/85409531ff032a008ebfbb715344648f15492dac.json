{"sha": "85409531ff032a008ebfbb715344648f15492dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0MDk1MzFmZjAzMmEwMDhlYmZiYjcxNTM0NDY0OGYxNTQ5MmRhYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-04T22:18:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-04T22:25:09Z"}, "message": "c++: Fix error-recovery with concepts.\n\nHere, push_tinst_level refused to push into the scope of Foo::Foo\nbecause it was triggered from the ill-formed function fun.  But we didn't\ncheck the return value and tried to pop the un-pushed level.\n\n\tPR c++/93551\n\t* constraint.cc (satisfy_declaration_constraints): Check return\n\tvalue of push_tinst_level.", "tree": {"sha": "b921d2b26e88dd58a1501ccd1f25b266a0506e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b921d2b26e88dd58a1501ccd1f25b266a0506e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85409531ff032a008ebfbb715344648f15492dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85409531ff032a008ebfbb715344648f15492dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85409531ff032a008ebfbb715344648f15492dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85409531ff032a008ebfbb715344648f15492dac/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0712ea6313bc44f9ae8feb235c1b02c92cdd0527"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "4e4235d638b02d79a616f3b99c6947a5d270c240", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85409531ff032a008ebfbb715344648f15492dac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85409531ff032a008ebfbb715344648f15492dac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85409531ff032a008ebfbb715344648f15492dac", "patch": "@@ -1,5 +1,9 @@\n 2020-02-04  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/93551\n+\t* constraint.cc (satisfy_declaration_constraints): Check return\n+\tvalue of push_tinst_level.\n+\n \tPR c++/90951\n \t* constexpr.c (cxx_eval_array_reference): {}-initialize missing\n \telements instead of value-initializing them."}, {"sha": "58044cd0f9db340faaa565949de166bb2d36c815", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85409531ff032a008ebfbb715344648f15492dac/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85409531ff032a008ebfbb715344648f15492dac/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=85409531ff032a008ebfbb715344648f15492dac", "patch": "@@ -2692,7 +2692,8 @@ satisfy_declaration_constraints (tree t, subst_info info)\n   tree result = boolean_true_node;\n   if (norm)\n     {\n-      push_tinst_level (t);\n+      if (!push_tinst_level (t))\n+\treturn result;\n       push_access_scope (t);\n       result = satisfy_associated_constraints (norm, args, info);\n       pop_access_scope (t);"}, {"sha": "e482ba05b462a4384b29c172fbf879fc1f61dc25", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-err1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85409531ff032a008ebfbb715344648f15492dac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-err1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85409531ff032a008ebfbb715344648f15492dac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-err1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-err1.C?ref=85409531ff032a008ebfbb715344648f15492dac", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/93551\n+// { dg-do compile { target concepts } }\n+\n+namespace std {\n+  template<typename _Tp, _Tp __v>\n+  struct integral_constant\n+  {\n+    static constexpr _Tp                  value = __v;\n+    typedef _Tp                           value_type;\n+    typedef integral_constant<_Tp, __v>   type;\n+    constexpr operator value_type() const noexcept { return value; }\n+  };\n+  template<typename _Base, typename _Derived>\n+  struct is_base_of\n+    : public integral_constant<bool, __is_base_of(_Base, _Derived)>\n+  { };\n+  template <typename _Base, typename _Derived>\n+  inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n+}\n+class Bar { };\n+struct Foo {\n+  template <typename P> requires std::is_base_of_v<Bar, P>\n+  Foo(P const&);\n+};\n+template <typename P>\n+Foo fun(P const& arg) {\n+  (bool)arg;\t\t\t// { dg-error \"\" }\n+  return Foo {arg};\n+}\n+int main() {\n+  fun(Bar{});\n+  return 0;\n+}"}]}