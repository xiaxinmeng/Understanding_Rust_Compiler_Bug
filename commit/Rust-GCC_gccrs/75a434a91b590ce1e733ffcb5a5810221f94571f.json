{"sha": "75a434a91b590ce1e733ffcb5a5810221f94571f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhNDM0YTkxYjU5MGNlMWU3MzNmZmNiNWE1ODEwMjIxZjk0NTcxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-21T15:19:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-21T15:19:52Z"}, "message": "dwarf2out.c (ranges_table): Change into vec<dw_ranges, va_gc> *.\n\n\t* dwarf2out.c (ranges_table): Change into vec<dw_ranges, va_gc> *.\n\t(ranges_by_label): Change into vec<dw_ranges_by_label, va_gc> *.\n\t(ranges_table_allocated, ranges_table_in_use,\n\tranges_by_label_allocated, ranges_by_label_in_use,\n\tRANGES_TABLE_INCREMENT): Removed.\n\t(add_ranges_num): Use vec_safe_push into ranges_table.\n\t(add_ranges_by_labels): Use vec_safe_push into ranges_by_label.\n\t(output_ranges): Adjust for ranges_table and ranges_by_label\n\tconversion from arrays to vec.\n\t(add_high_low_attributes, dwarf2out_finish): Adjust for range_table\n\tconversion from arrays to vec.\n\t(dwarf2out_c_finalize): Don't clear ranges_table_allocated,\n\tranges_table_in_use, ranges_by_label_allocated and\n\tranges_by_label_in_use.  Set ranges_by_label to NULL instead of 0.\n\nFrom-SVN: r241409", "tree": {"sha": "c6278306de56193fe3dde9a59b034a60309e8800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6278306de56193fe3dde9a59b034a60309e8800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a434a91b590ce1e733ffcb5a5810221f94571f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a434a91b590ce1e733ffcb5a5810221f94571f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a434a91b590ce1e733ffcb5a5810221f94571f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a434a91b590ce1e733ffcb5a5810221f94571f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e6982f7aac4c8d539f194e302fb67179f98c3f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6982f7aac4c8d539f194e302fb67179f98c3f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6982f7aac4c8d539f194e302fb67179f98c3f1"}], "stats": {"total": 107, "additions": 39, "deletions": 68}, "files": [{"sha": "299ffe41a70c65f13654b94ba2a3bb703512d74d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a434a91b590ce1e733ffcb5a5810221f94571f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a434a91b590ce1e733ffcb5a5810221f94571f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75a434a91b590ce1e733ffcb5a5810221f94571f", "patch": "@@ -1,5 +1,20 @@\n 2016-10-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (ranges_table): Change into vec<dw_ranges, va_gc> *.\n+\t(ranges_by_label): Change into vec<dw_ranges_by_label, va_gc> *.\n+\t(ranges_table_allocated, ranges_table_in_use,\n+\tranges_by_label_allocated, ranges_by_label_in_use,\n+\tRANGES_TABLE_INCREMENT): Removed.\n+\t(add_ranges_num): Use vec_safe_push into ranges_table.\n+\t(add_ranges_by_labels): Use vec_safe_push into ranges_by_label.\n+\t(output_ranges): Adjust for ranges_table and ranges_by_label\n+\tconversion from arrays to vec.\n+\t(add_high_low_attributes, dwarf2out_finish): Adjust for range_table\n+\tconversion from arrays to vec.\n+\t(dwarf2out_c_finalize): Don't clear ranges_table_allocated,\n+\tranges_table_in_use, ranges_by_label_allocated and\n+\tranges_by_label_in_use.  Set ranges_by_label to NULL instead of 0.\n+\n \t* dwarf2out.c (gen_variable_die): Emit DW_AT_const_expr attribute\n \tif needed.  Re-add origin_die variable and its initialization.\n "}, {"sha": "4683e1c3826f3e76c4f2993efecdac206e075a91", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 68, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a434a91b590ce1e733ffcb5a5810221f94571f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a434a91b590ce1e733ffcb5a5810221f94571f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=75a434a91b590ce1e733ffcb5a5810221f94571f", "patch": "@@ -3066,28 +3066,11 @@ static GTY (()) vec<macinfo_entry, va_gc> *macinfo_table;\n    && debug_info_level >= DINFO_LEVEL_VERBOSE \\\n    && !macinfo_table->is_empty ())\n \n-/* Array of dies for which we should generate .debug_ranges info.  */\n-static GTY ((length (\"ranges_table_allocated\"))) dw_ranges *ranges_table;\n+/* Vector of dies for which we should generate .debug_ranges info.  */\n+static GTY (()) vec<dw_ranges, va_gc> *ranges_table;\n \n-/* Number of elements currently allocated for ranges_table.  */\n-static GTY(()) unsigned ranges_table_allocated;\n-\n-/* Number of elements in ranges_table currently in use.  */\n-static GTY(()) unsigned ranges_table_in_use;\n-\n-/* Array of pairs of labels referenced in ranges_table.  */\n-static GTY ((length (\"ranges_by_label_allocated\")))\n-     dw_ranges_by_label *ranges_by_label;\n-\n-/* Number of elements currently allocated for ranges_by_label.  */\n-static GTY(()) unsigned ranges_by_label_allocated;\n-\n-/* Number of elements in ranges_by_label currently in use.  */\n-static GTY(()) unsigned ranges_by_label_in_use;\n-\n-/* Size (in elements) of increments by which we may expand the\n-   ranges_table.  */\n-#define RANGES_TABLE_INCREMENT 64\n+/* Vector of pairs of labels referenced in ranges_table.  */\n+static GTY (()) vec<dw_ranges_by_label, va_gc> *ranges_by_label;\n \n /* Whether we have location lists that need outputting */\n static GTY(()) bool have_location_lists;\n@@ -10153,21 +10136,9 @@ output_aranges (void)\n static unsigned int\n add_ranges_num (int num)\n {\n-  unsigned int in_use = ranges_table_in_use;\n-\n-  if (in_use == ranges_table_allocated)\n-    {\n-      ranges_table_allocated += RANGES_TABLE_INCREMENT;\n-      ranges_table = GGC_RESIZEVEC (dw_ranges, ranges_table,\n-\t\t\t\t    ranges_table_allocated);\n-      memset (ranges_table + ranges_table_in_use, 0,\n-\t      RANGES_TABLE_INCREMENT * sizeof (dw_ranges));\n-    }\n-\n-  ranges_table[in_use].num = num;\n-  ranges_table_in_use = in_use + 1;\n-\n-  return in_use * 2 * DWARF2_ADDR_SIZE;\n+  dw_ranges r = { num };\n+  vec_safe_push (ranges_table, r);\n+  return (vec_safe_length (ranges_table) - 1) * 2 * DWARF2_ADDR_SIZE;\n }\n \n /* Add a new entry to .debug_ranges corresponding to a block, or a\n@@ -10188,22 +10159,10 @@ static void\n add_ranges_by_labels (dw_die_ref die, const char *begin, const char *end,\n                       bool *added, bool force_direct)\n {\n-  unsigned int in_use = ranges_by_label_in_use;\n+  unsigned int in_use = vec_safe_length (ranges_by_label);\n   unsigned int offset;\n-\n-  if (in_use == ranges_by_label_allocated)\n-    {\n-      ranges_by_label_allocated += RANGES_TABLE_INCREMENT;\n-      ranges_by_label = GGC_RESIZEVEC (dw_ranges_by_label, ranges_by_label,\n-\t\t\t\t       ranges_by_label_allocated);\n-      memset (ranges_by_label + ranges_by_label_in_use, 0,\n-\t      RANGES_TABLE_INCREMENT * sizeof (dw_ranges_by_label));\n-    }\n-\n-  ranges_by_label[in_use].begin = begin;\n-  ranges_by_label[in_use].end = end;\n-  ranges_by_label_in_use = in_use + 1;\n-\n+  dw_ranges_by_label rbl = { begin, end };\n+  vec_safe_push (ranges_by_label, rbl);\n   offset = add_ranges_num (-(int)in_use - 1);\n   if (!*added)\n     {\n@@ -10218,10 +10177,11 @@ output_ranges (void)\n   unsigned i;\n   static const char *const start_fmt = \"Offset %#x\";\n   const char *fmt = start_fmt;\n+  dw_ranges *r;\n \n-  for (i = 0; i < ranges_table_in_use; i++)\n+  FOR_EACH_VEC_SAFE_ELT (ranges_table, i, r)\n     {\n-      int block_num = ranges_table[i].num;\n+      int block_num = r->num;\n \n       if (block_num > 0)\n \t{\n@@ -10270,21 +10230,21 @@ output_ranges (void)\n \t\t function section, all we have to do is to take out\n \t\t the #if 0 above.  */\n \t      dw2_asm_output_delta (DWARF2_ADDR_SIZE,\n-\t\t\t\t    ranges_by_label[lab_idx].begin,\n+\t\t\t\t    (*ranges_by_label)[lab_idx].begin,\n \t\t\t\t    text_section_label,\n \t\t\t\t    fmt, i * 2 * DWARF2_ADDR_SIZE);\n \t      dw2_asm_output_delta (DWARF2_ADDR_SIZE,\n-\t\t\t\t    ranges_by_label[lab_idx].end,\n+\t\t\t\t    (*ranges_by_label)[lab_idx].end,\n \t\t\t\t    text_section_label, NULL);\n #endif\n \t    }\n \t  else\n \t    {\n \t      dw2_asm_output_addr (DWARF2_ADDR_SIZE,\n-\t\t\t\t   ranges_by_label[lab_idx].begin,\n+\t\t\t\t   (*ranges_by_label)[lab_idx].begin,\n \t\t\t\t   fmt, i * 2 * DWARF2_ADDR_SIZE);\n \t      dw2_asm_output_addr (DWARF2_ADDR_SIZE,\n-\t\t\t\t   ranges_by_label[lab_idx].end,\n+\t\t\t\t   (*ranges_by_label)[lab_idx].end,\n \t\t\t\t   NULL);\n \t    }\n \t}\n@@ -21662,8 +21622,8 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n \t  superblock = BLOCK_SUPERCONTEXT (chain);\n \t}\n       if (attr != NULL\n-\t  && (ranges_table[attr->dw_attr_val.v.val_offset\n-\t\t\t   / 2 / DWARF2_ADDR_SIZE].num\n+\t  && ((*ranges_table)[attr->dw_attr_val.v.val_offset\n+\t\t\t      / 2 / DWARF2_ADDR_SIZE].num\n \t      == BLOCK_NUMBER (superblock))\n \t  && BLOCK_FRAGMENT_CHAIN (superblock))\n \t{\n@@ -21674,10 +21634,10 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n \t       chain; chain = BLOCK_FRAGMENT_CHAIN (chain))\n \t    {\n \t      ++supercnt;\n-\t      gcc_checking_assert (ranges_table[off + supercnt].num\n+\t      gcc_checking_assert ((*ranges_table)[off + supercnt].num\n \t\t\t\t   == BLOCK_NUMBER (chain));\n \t    }\n-\t  gcc_checking_assert (ranges_table[off + supercnt + 1].num == 0);\n+\t  gcc_checking_assert ((*ranges_table)[off + supercnt + 1].num == 0);\n \t  for (chain = BLOCK_FRAGMENT_CHAIN (stmt);\n \t       chain; chain = BLOCK_FRAGMENT_CHAIN (chain))\n \t    ++thiscnt;\n@@ -28130,7 +28090,7 @@ dwarf2out_finish (const char *)\n \n       /* Add the base offset of the ranges table to the skeleton\n         comp-unit DIE.  */\n-      if (ranges_table_in_use)\n+      if (!vec_safe_is_empty (ranges_table))\n         add_AT_lineptr (main_comp_unit_die, DW_AT_GNU_ranges_base,\n                         ranges_section_label);\n \n@@ -28177,7 +28137,7 @@ dwarf2out_finish (const char *)\n     }\n \n   /* Output ranges section if necessary.  */\n-  if (ranges_table_in_use)\n+  if (!vec_safe_is_empty (ranges_table))\n     {\n       switch_to_section (debug_ranges_section);\n       ASM_OUTPUT_LABEL (asm_out_file, ranges_section_label);\n@@ -28392,11 +28352,7 @@ dwarf2out_c_finalize (void)\n   pubtype_table = NULL;\n   macinfo_table = NULL;\n   ranges_table = NULL;\n-  ranges_table_allocated = 0;\n-  ranges_table_in_use = 0;\n-  ranges_by_label = 0;\n-  ranges_by_label_allocated = 0;\n-  ranges_by_label_in_use = 0;\n+  ranges_by_label = NULL;\n   have_location_lists = false;\n   loclabel_num = 0;\n   poc_label_num = 0;"}]}