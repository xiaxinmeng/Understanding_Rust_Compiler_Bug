{"sha": "de40e1df94369fb1bc02f5f89571157e39b5e0da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0MGUxZGY5NDM2OWZiMWJjMDJmNWY4OTU3MTE1N2UzOWI1ZTBkYQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-10-21T21:56:40Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-10-21T21:56:40Z"}, "message": "Fix fastmath-specific crash PR 7133.\n\nFrom-SVN: r58389", "tree": {"sha": "cfd41cc1232d36db2dfec902be06975693bd6ec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfd41cc1232d36db2dfec902be06975693bd6ec7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de40e1df94369fb1bc02f5f89571157e39b5e0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40e1df94369fb1bc02f5f89571157e39b5e0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de40e1df94369fb1bc02f5f89571157e39b5e0da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40e1df94369fb1bc02f5f89571157e39b5e0da/comments", "author": null, "committer": null, "parents": [{"sha": "e3ccdd508a2befa298813b1975141572b462c84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ccdd508a2befa298813b1975141572b462c84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ccdd508a2befa298813b1975141572b462c84f"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "40370bfd6af0c2a0a2d0119f2cd4980d27c761fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e1df94369fb1bc02f5f89571157e39b5e0da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e1df94369fb1bc02f5f89571157e39b5e0da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de40e1df94369fb1bc02f5f89571157e39b5e0da", "patch": "@@ -1,3 +1,10 @@\n+2002-10-21  Dale Johannesen  <dalej@apple.com>\n+\n+        * config/rs6000/rs6000.c (rs6000_reverse_condition): Handle\n+\t    unsafe math reversals correctly for RTL generation.\n+\t  (output_cbranch):  Replace rs6000_reverse_condition call\n+\t    by its former definition.\n+\n 2002-10-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (x86_64_sign_extended_value): Add allow_rip\n@@ -355,6 +362,7 @@ Sat Oct 19 10:46:52 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* doc/c-tree.texi: Update description of COND_EXPR tree nodes.\n \n+>>>>>>> 1.15743\n 2002-10-17  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/rs6000.h (HARD_REGNO_MODE_OK): Allow arbitrary modes"}, {"sha": "cf930e9e0e5b6ff9bcdbaa8a541659cfc61ff008", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e1df94369fb1bc02f5f89571157e39b5e0da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e1df94369fb1bc02f5f89571157e39b5e0da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=de40e1df94369fb1bc02f5f89571157e39b5e0da", "patch": "@@ -8125,7 +8125,7 @@ rs6000_reverse_condition (mode, code)\n {\n   /* Reversal of FP compares takes care -- an ordered compare\n      becomes an unordered compare and vice versa.  */\n-  if (mode == CCFPmode)\n+  if (mode == CCFPmode && !flag_unsafe_math_optimizations)\n     return reverse_condition_maybe_unordered (code);\n   else\n     return reverse_condition (code);\n@@ -8397,7 +8397,14 @@ output_cbranch (op, label, reversed, insn)\n      reverse_condition_maybe_unordered here always but this\n      makes the resulting assembler clearer.  */\n   if (really_reversed)\n-    code = rs6000_reverse_condition (mode, code);\n+    {\n+      /* Reversal of FP compares takes care -- an ordered compare\n+\t becomes an unordered compare and vice versa.  */\n+      if (mode == CCFPmode)\n+\tcode = reverse_condition_maybe_unordered (code);\n+      else\n+\tcode = reverse_condition (code);\n+    }\n \n   if ((TARGET_SPE && TARGET_HARD_FLOAT) && mode == CCFPmode)\n     {"}, {"sha": "898c183e6b0867ffad2965b453bd311b453d4c84", "filename": "gcc/testsuite/gcc.dg/fastmath-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40e1df94369fb1bc02f5f89571157e39b5e0da/gcc%2Ftestsuite%2Fgcc.dg%2Ffastmath-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40e1df94369fb1bc02f5f89571157e39b5e0da/gcc%2Ftestsuite%2Fgcc.dg%2Ffastmath-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffastmath-1.c?ref=de40e1df94369fb1bc02f5f89571157e39b5e0da", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+int foo ( float* dists,  int k) \n+{ \n+if ( ( dists [ 0 ] > 0 ) == ( dists [ 1 ] > 0 ) ) \n+  return k;\n+return 0;\n+} \n+main() {\n+  float dists[16] = { 0., 1., 1., 0., 0., -1., -1., 0.,\n+\t\t     1., 1., 1., -1., -1., 1., -1., -1. };\n+  if ( foo(&dists[0], 1) +\n+       foo(&dists[2], 2) +\n+       foo(&dists[4], 4) +\n+       foo(&dists[6], 8) +\n+       foo(&dists[8], 16) +\n+       foo(&dists[10], 32) +\n+       foo(&dists[12], 64) +\n+       foo(&dists[14], 128)\n+\t!= 156)\n+    abort();\n+}\n\\ No newline at end of file"}]}