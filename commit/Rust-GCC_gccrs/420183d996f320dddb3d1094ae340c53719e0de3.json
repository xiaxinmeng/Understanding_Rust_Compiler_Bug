{"sha": "420183d996f320dddb3d1094ae340c53719e0de3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwMTgzZDk5NmYzMjBkZGRiM2QxMDk0YWUzNDBjNTM3MTllMGRlMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-01-18T13:05:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-01-18T13:05:18Z"}, "message": "c-family: Update unaligned adress of packed member check\n\nCheck unaligned pointer conversion and strip NOPS.\n\ngcc/c-family/\n\n\tPR c/51628\n\tPR c/88664\n\t* c-common.h (warn_for_address_or_pointer_of_packed_member):\n\tRemove the boolean argument.\n\t* c-warn.c (check_address_of_packed_member): Renamed to ...\n\t(check_address_or_pointer_of_packed_member): This.  Also\n\twarn pointer conversion.\n\t(check_and_warn_address_of_packed_member): Renamed to ...\n\t(check_and_warn_address_or_pointer_of_packed_member): This.\n\tAlso warn pointer conversion.\n\t(warn_for_address_or_pointer_of_packed_member): Remove the\n\tboolean argument.  Don't check pointer conversion here.\n\ngcc/c\n\n\tPR c/51628\n\tPR c/88664\n\t* c-typeck.c (convert_for_assignment): Upate the\n\twarn_for_address_or_pointer_of_packed_member call.\n\ngcc/cp\n\n\tPR c/51628\n\tPR c/88664\n\t* call.c (convert_for_arg_passing): Upate the\n\twarn_for_address_or_pointer_of_packed_member call.\n\t* typeck.c (convert_for_assignment): Likewise.\n\ngcc/testsuite/\n\n\tPR c/51628\n\tPR c/88664\n\t* c-c++-common/pr51628-33.c: New test.\n\t* c-c++-common/pr51628-35.c: New test.\n\t* c-c++-common/pr88664-1.c: Likewise.\n\t* c-c++-common/pr88664-2.c: Likewise.\n\t* gcc.dg/pr51628-34.c: Likewise.\n\nFrom-SVN: r268075", "tree": {"sha": "3606267c6b36098a85b4a09a3a0d4db540ce8c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3606267c6b36098a85b4a09a3a0d4db540ce8c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/420183d996f320dddb3d1094ae340c53719e0de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420183d996f320dddb3d1094ae340c53719e0de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420183d996f320dddb3d1094ae340c53719e0de3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420183d996f320dddb3d1094ae340c53719e0de3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea"}], "stats": {"total": 338, "additions": 250, "deletions": 88}, "files": [{"sha": "4aaf8197e7e7bbe3edaeace20c58ef54b4982905", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -1,3 +1,18 @@\n+2019-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\tPR c/88664\n+\t* c-common.h (warn_for_address_or_pointer_of_packed_member):\n+\tRemove the boolean argument.\n+\t* c-warn.c (check_address_of_packed_member): Renamed to ...\n+\t(check_address_or_pointer_of_packed_member): This.  Also\n+\twarn pointer conversion.\n+\t(check_and_warn_address_of_packed_member): Renamed to ...\n+\t(check_and_warn_address_or_pointer_of_packed_member): This.\n+\tAlso warn pointer conversion.\n+\t(warn_for_address_or_pointer_of_packed_member): Remove the\n+\tboolean argument.  Don't check pointer conversion here.\n+\n 2019-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR inline-asm/52813"}, {"sha": "69cb76cf49dd54acf7c8b8a659c866ac888966f0", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -1293,7 +1293,7 @@ extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool,\n \t\t\t\t  bool);\n extern void warn_for_omitted_condop (location_t, tree);\n extern bool warn_for_restrict (unsigned, tree *, unsigned);\n-extern void warn_for_address_or_pointer_of_packed_member (bool, tree, tree);\n+extern void warn_for_address_or_pointer_of_packed_member (tree, tree);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n    Used to select diagnostic messages in lvalue_error and"}, {"sha": "7821cc894a70da2aa79c3518aab89e943b151298", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 96, "deletions": 81, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -2713,19 +2713,61 @@ check_alignment_of_packed_member (tree type, tree field)\n   return NULL_TREE;\n }\n \n-/* Return struct or union type if the right hand value, RHS, takes the\n-   unaligned address of packed member of struct or union when assigning\n-   to TYPE.  Otherwise, return NULL_TREE.  */\n+/* Return struct or union type if the right hand value, RHS:\n+   1. Is a pointer value which isn't aligned to a pointer type TYPE.\n+   2. Is an address which takes the unaligned address of packed member\n+      of struct or union when assigning to TYPE.\n+   Otherwise, return NULL_TREE.  */\n \n static tree\n-check_address_of_packed_member (tree type, tree rhs)\n+check_address_or_pointer_of_packed_member (tree type, tree rhs)\n {\n   if (INDIRECT_REF_P (rhs))\n     rhs = TREE_OPERAND (rhs, 0);\n \n   if (TREE_CODE (rhs) == ADDR_EXPR)\n     rhs = TREE_OPERAND (rhs, 0);\n \n+  if (POINTER_TYPE_P (type))\n+    type = TREE_TYPE (type);\n+\n+  if (TREE_CODE (rhs) == PARM_DECL\n+      || VAR_P (rhs)\n+      || TREE_CODE (rhs) == CALL_EXPR)\n+    {\n+      if (TREE_CODE (rhs) == CALL_EXPR)\n+\t{\n+\t  rhs = CALL_EXPR_FN (rhs);\t/* Pointer expression.  */\n+\t  if (rhs == NULL_TREE)\n+\t    return NULL_TREE;\n+\t  rhs = TREE_TYPE (rhs);\t/* Pointer type.  */\n+\t  rhs = TREE_TYPE (rhs);\t/* Function type.  */\n+\t}\n+      tree rhstype = TREE_TYPE (rhs);\n+      if ((POINTER_TYPE_P (rhstype)\n+\t   || TREE_CODE (rhstype) == ARRAY_TYPE)\n+\t  && TYPE_PACKED (TREE_TYPE (rhstype)))\n+\t{\n+\t  unsigned int type_align = TYPE_ALIGN_UNIT (type);\n+\t  unsigned int rhs_align = TYPE_ALIGN_UNIT (TREE_TYPE (rhstype));\n+\t  if ((rhs_align % type_align) != 0)\n+\t    {\n+\t      location_t location = EXPR_LOC_OR_LOC (rhs, input_location);\n+\t      warning_at (location, OPT_Waddress_of_packed_member,\n+\t\t\t  \"converting a packed %qT pointer (alignment %d) \"\n+\t\t\t  \"to %qT (alignment %d) may result in an \"\n+\t\t\t  \"unaligned pointer value\",\n+\t\t\t  rhstype, rhs_align, type, type_align);\n+\t      tree decl = TYPE_STUB_DECL (TREE_TYPE (rhstype));\n+\t      inform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n+\t      decl = TYPE_STUB_DECL (type);\n+\t      if (decl)\n+\t\tinform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n+\t    }\n+\t}\n+      return NULL_TREE;\n+    }\n+\n   tree context = NULL_TREE;\n \n   /* Check alignment of the object.  */\n@@ -2744,18 +2786,56 @@ check_address_of_packed_member (tree type, tree rhs)\n   return context;\n }\n \n-/* Check and warn if the right hand value, RHS, takes the unaligned\n-   address of packed member of struct or union when assigning to TYPE.  */\n+/* Check and warn if the right hand value, RHS:\n+   1. Is a pointer value which isn't aligned to a pointer type TYPE.\n+   2. Is an address which takes the unaligned address of packed member\n+      of struct or union when assigning to TYPE.\n+ */\n \n static void\n-check_and_warn_address_of_packed_member (tree type, tree rhs)\n+check_and_warn_address_or_pointer_of_packed_member (tree type, tree rhs)\n {\n-  if (TREE_CODE (rhs) != COND_EXPR)\n+  bool nop_p;\n+\n+  while (TREE_CODE (rhs) == COMPOUND_EXPR)\n+    rhs = TREE_OPERAND (rhs, 1);\n+\n+  tree orig_rhs = rhs;\n+  STRIP_NOPS (rhs);\n+  nop_p = orig_rhs != rhs;\n+\n+  if (TREE_CODE (rhs) == COND_EXPR)\n     {\n-      while (TREE_CODE (rhs) == COMPOUND_EXPR)\n-\trhs = TREE_OPERAND (rhs, 1);\n+      /* Check the THEN path.  */\n+      check_and_warn_address_or_pointer_of_packed_member\n+\t(type, TREE_OPERAND (rhs, 1));\n \n-      tree context = check_address_of_packed_member (type, rhs);\n+      /* Check the ELSE path.  */\n+      check_and_warn_address_or_pointer_of_packed_member\n+\t(type, TREE_OPERAND (rhs, 2));\n+    }\n+  else\n+    {\n+      if (nop_p)\n+\t{\n+\t  switch (TREE_CODE (rhs))\n+\t    {\n+\t    case ADDR_EXPR:\n+\t      /* Address is taken.   */\n+\t    case PARM_DECL:\n+\t    case VAR_DECL:\n+\t      /* Pointer conversion.  */\n+\t      break;\n+\t    case CALL_EXPR:\n+\t      /* Function call. */\n+\t      break;\n+\t    default:\n+\t      return;\n+\t    }\n+\t}\n+\n+      tree context\n+\t= check_address_or_pointer_of_packed_member (type, rhs);\n       if (context)\n \t{\n \t  location_t loc = EXPR_LOC_OR_LOC (rhs, input_location);\n@@ -2764,26 +2844,17 @@ check_and_warn_address_of_packed_member (tree type, tree rhs)\n \t\t      \"in an unaligned pointer value\",\n \t\t      context);\n \t}\n-      return;\n     }\n-\n-  /* Check the THEN path.  */\n-  check_and_warn_address_of_packed_member (type, TREE_OPERAND (rhs, 1));\n-\n-  /* Check the ELSE path.  */\n-  check_and_warn_address_of_packed_member (type, TREE_OPERAND (rhs, 2));\n }\n \n /* Warn if the right hand value, RHS:\n-   1. For CONVERT_P == true, is a pointer value which isn't aligned to a\n-      pointer type TYPE.\n-   2. For CONVERT_P == false, is an address which takes the unaligned\n-      address of packed member of struct or union when assigning to TYPE.\n+   1. Is a pointer value which isn't aligned to a pointer type TYPE.\n+   2. Is an address which takes the unaligned address of packed member\n+      of struct or union when assigning to TYPE.\n */\n \n void\n-warn_for_address_or_pointer_of_packed_member (bool convert_p, tree type,\n-\t\t\t\t\t      tree rhs)\n+warn_for_address_or_pointer_of_packed_member (tree type, tree rhs)\n {\n   if (!warn_address_of_packed_member)\n     return;\n@@ -2792,61 +2863,5 @@ warn_for_address_or_pointer_of_packed_member (bool convert_p, tree type,\n   if (!POINTER_TYPE_P (type))\n     return;\n \n-  while (TREE_CODE (rhs) == COMPOUND_EXPR)\n-    rhs = TREE_OPERAND (rhs, 1);\n-\n-  if (convert_p)\n-    {\n-      bool rhspointer_p;\n-      tree rhstype;\n-\n-      /* Check the original type of RHS.  */\n-      switch (TREE_CODE (rhs))\n-\t{\n-\tcase PARM_DECL:\n-\tcase VAR_DECL:\n-\t  rhstype = TREE_TYPE (rhs);\n-\t  rhspointer_p = POINTER_TYPE_P (rhstype);\n-\t  break;\n-\tcase NOP_EXPR:\n-\t  rhs = TREE_OPERAND (rhs, 0);\n-\t  if (TREE_CODE (rhs) == ADDR_EXPR)\n-\t    rhs = TREE_OPERAND (rhs, 0);\n-\t  rhstype = TREE_TYPE (rhs);\n-\t  rhspointer_p = TREE_CODE (rhstype) == ARRAY_TYPE;\n-\t  break;\n-\tdefault:\n-\t  return;\n-\t}\n-\n-      if (rhspointer_p && TYPE_PACKED (TREE_TYPE (rhstype)))\n-\t{\n-\t  unsigned int type_align = TYPE_ALIGN_UNIT (TREE_TYPE (type));\n-\t  unsigned int rhs_align = TYPE_ALIGN_UNIT (TREE_TYPE (rhstype));\n-\t  if ((rhs_align % type_align) != 0)\n-\t    {\n-\t      location_t location = EXPR_LOC_OR_LOC (rhs, input_location);\n-\t      warning_at (location, OPT_Waddress_of_packed_member,\n-\t\t\t  \"converting a packed %qT pointer (alignment %d) \"\n-\t\t\t  \"to %qT (alignment %d) may result in an \"\n-\t\t\t  \"unaligned pointer value\",\n-\t\t\t  rhstype, rhs_align, type, type_align);\n-\t      tree decl = TYPE_STUB_DECL (TREE_TYPE (rhstype));\n-\t      inform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n-\t      decl = TYPE_STUB_DECL (TREE_TYPE (type));\n-\t      if (decl)\n-\t\tinform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n-\t    }\n-\t}\n-    }\n-  else\n-    {\n-      /* Get the type of the pointer pointing to.  */\n-      type = TREE_TYPE (type);\n-\n-      if (TREE_CODE (rhs) == NOP_EXPR)\n-\trhs = TREE_OPERAND (rhs, 0);\n-\n-      check_and_warn_address_of_packed_member (type, rhs);\n-    }\n+  check_and_warn_address_or_pointer_of_packed_member (type, rhs);\n }"}, {"sha": "fe83d69de8777cd6fd52284df31be5fddd5d5145", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -1,3 +1,10 @@\n+2019-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\tPR c/88664\n+\t* c-typeck.c (convert_for_assignment): Upate the\n+\twarn_for_address_or_pointer_of_packed_member call.\n+\n 2019-01-16  Tom Honermann  <tom@honermann.net>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "cbd612c4fb936c3b3893260ce92e80d583bae387", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -6729,8 +6729,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (rhstype))\n     {\n-      warn_for_address_or_pointer_of_packed_member (false, type,\n-\t\t\t\t\t\t    orig_rhs);\n+      warn_for_address_or_pointer_of_packed_member (type, orig_rhs);\n       return rhs;\n     }\n \n@@ -7289,8 +7288,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \n       /* If RHS isn't an address, check pointer or array of packed\n \t struct or union.  */\n-      warn_for_address_or_pointer_of_packed_member\n-\t(TREE_CODE (orig_rhs) != ADDR_EXPR, type, orig_rhs);\n+      warn_for_address_or_pointer_of_packed_member (type, orig_rhs);\n \n       return convert (type, rhs);\n     }"}, {"sha": "d224b72c0bb94dd5bc1cf63802e05b664b9d0381", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -1,3 +1,11 @@\n+2019-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\tPR c/88664\n+\t* call.c (convert_for_arg_passing): Upate the\n+\twarn_for_address_or_pointer_of_packed_member call.\n+\t* typeck.c (convert_for_assignment): Likewise.\n+\n 2019-01-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86205 - ICE with ?: of throw and template-id."}, {"sha": "499894b353f01a93c866cfd1ac5062d06be10af4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -7644,7 +7644,7 @@ convert_for_arg_passing (tree type, tree val, tsubst_flags_t complain)\n     }\n \n   if (complain & tf_warning)\n-    warn_for_address_or_pointer_of_packed_member (false, type, val);\n+    warn_for_address_or_pointer_of_packed_member (type, val);\n \n   return val;\n }"}, {"sha": "47e407d1faae97a380b6253f12039702ecd60434", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -9069,7 +9069,7 @@ convert_for_assignment (tree type, tree rhs,\n     }\n \n   if (complain & tf_warning)\n-    warn_for_address_or_pointer_of_packed_member (false, type, rhs);\n+    warn_for_address_or_pointer_of_packed_member (type, rhs);\n \n   return perform_implicit_conversion_flags (strip_top_quals (type), rhs,\n \t\t\t\t\t    complain, flags);"}, {"sha": "88a590ee9fa93d0261106973b92833f90a2c46f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -1,3 +1,13 @@\n+2019-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\tPR c/88664\n+\t* c-c++-common/pr51628-33.c: New test.\n+\t* c-c++-common/pr51628-35.c: New test.\n+\t* c-c++-common/pr88664-1.c: Likewise.\n+\t* c-c++-common/pr88664-2.c: Likewise.\n+\t* gcc.dg/pr51628-34.c: Likewise.\n+\n 2019-01-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/88799"}, {"sha": "0092f32202faed11bd3761d6814fff2d1d83f992", "filename": "gcc/testsuite/c-c++-common/pr51628-33.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-33.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  char x;\n+  int i[4];\n+} __attribute__ ((packed, aligned (4)));\n+\n+extern struct pair_t p;\n+extern void bar (int *);\n+\n+void\n+foo (struct pair_t *p)\n+{\n+  bar (p ? p->i : (int *) 0);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "20877792fd8acc34673d6a86887ce157f1a6fd0e", "filename": "gcc/testsuite/c-c++-common/pr51628-35.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-35.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -0,0 +1,23 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct B { int i; };\n+struct C { struct B b; } __attribute__ ((packed));\n+\n+extern struct C *p;\n+extern struct C *bar (void);\n+\n+long *\n+foo1 (void)\n+{\n+  return (long *) p;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+long *\n+foo2 (void)\n+{\n+  return (long *) bar ();\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "5e680b9ae900b35550c1554ccb68de4d3daf68de", "filename": "gcc/testsuite/c-c++-common/pr88664-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr88664-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr88664-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr88664-1.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -0,0 +1,20 @@\n+/* PR c/88664.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct data\n+{\n+  void *ptr;\n+} __attribute__((packed));\n+\n+int *\n+fun1 (struct data *p)\n+{\n+  return (int *) p->ptr;\n+}\n+\n+int *\n+fun2 (struct data *p, int *x)\n+{\n+  return x ? (*x = 1, (int *) p->ptr) : (int *) 0;\n+}"}, {"sha": "d2d880a66d77fe40b3fd44019f00cc9a6111e35b", "filename": "gcc/testsuite/c-c++-common/pr88664-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr88664-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr88664-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr88664-2.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -0,0 +1,22 @@\n+/* PR c/88664.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct data\n+{\n+  void *ptr;\n+} __attribute__((packed));\n+\n+void **\n+fun1 (struct data *p)\n+{\n+  return &p->ptr;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+int *\n+fun2 (struct data *p, int *x)\n+{\n+  return p ? (*x = 1, (int *) &p->ptr) : (int *) 0;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "51d4b26a114df8fa913046367ddc8eb03956ddbc", "filename": "gcc/testsuite/gcc.dg/pr51628-34.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420183d996f320dddb3d1094ae340c53719e0de3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-34.c?ref=420183d996f320dddb3d1094ae340c53719e0de3", "patch": "@@ -0,0 +1,25 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct __attribute__((packed)) S { char p; int a, b, c; };\n+\n+short *\n+baz (int x, struct S *p)\n+{\n+  return (x\n+\t  ? &p->a \n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\t  : &p->b);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+short *\n+qux (int x, struct S *p)\n+{\n+  return (short *) (x\n+\t\t    ?  &p->a\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\t\t    : &p->b);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}]}