{"sha": "e7c7cdc5f427281c675b7a42a1554dfdaa03e185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjN2NkYzVmNDI3MjgxYzY3NWI3YTQyYTE1NTRkZmRhYTAzZTE4NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-21T08:14:56Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-21T08:14:56Z"}, "message": "mklog: support parsing of DR.\n\n\t* mklog.py: Support DR parsing.\n\t* test_mklog.py: New test for DR parsing.", "tree": {"sha": "fe2130bc8667df58770a448f7ec9299628bb6a04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2130bc8667df58770a448f7ec9299628bb6a04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c7cdc5f427281c675b7a42a1554dfdaa03e185", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7GOIAACgkQTcGC3A+n\nN4WTdAf/f6iqw5UObbQO6CxcwL975gKWSkbCSC0zJcDylNyMI4T+LSA7C4IGBZhC\nsanoYebUkzQoEKd2JoWCv6bAaroF+YO5o/TfZg/ZQnW4Und0pMuGKIzueubTySwi\nmLU847df8tpcJ991iDFaTnhT/f5A1VK/LwDDf/IrLN3nb4j+88JxQOScJq6YPyzM\nlSHM/1YB3+xWJFm6559KShipUu+pBEPOhHhKKn7sndshR3BZYsfIr1C7T4zfQIuC\n1b2LdkDiWp/SSk7hbFwhn6lMQP4+yMg26wRl7K7Ya0m/BoscAUO2wFLiTgEv8wXe\n0T/KUjePVsNWtacKP5bV5sfR/gGoxg==\n=wrv5\n-----END PGP SIGNATURE-----", "payload": "tree fe2130bc8667df58770a448f7ec9299628bb6a04\nparent f094665d465cdf8903797cc58bea13007e588616\nauthor Martin Liska <mliska@suse.cz> 1590048896 +0200\ncommitter Martin Liska <mliska@suse.cz> 1590048896 +0200\n\nmklog: support parsing of DR.\n\n\t* mklog.py: Support DR parsing.\n\t* test_mklog.py: New test for DR parsing.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c7cdc5f427281c675b7a42a1554dfdaa03e185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c7cdc5f427281c675b7a42a1554dfdaa03e185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c7cdc5f427281c675b7a42a1554dfdaa03e185/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f094665d465cdf8903797cc58bea13007e588616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f094665d465cdf8903797cc58bea13007e588616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f094665d465cdf8903797cc58bea13007e588616"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "83960ba1f9456384ce44e87bab36f08d1913ed05", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c7cdc5f427281c675b7a42a1554dfdaa03e185/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c7cdc5f427281c675b7a42a1554dfdaa03e185/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e7c7cdc5f427281c675b7a42a1554dfdaa03e185", "patch": "@@ -1,3 +1,8 @@\n+2020-05-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Support DR parsing.\n+\t* test_mklog.py: New test for DR parsing.\n+\n 2020-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Add author_tuple"}, {"sha": "7a19b5d094902e65c51457cdef614fb7427dea02", "filename": "contrib/mklog.py", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c7cdc5f427281c675b7a42a1554dfdaa03e185/contrib%2Fmklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c7cdc5f427281c675b7a42a1554dfdaa03e185/contrib%2Fmklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog.py?ref=e7c7cdc5f427281c675b7a42a1554dfdaa03e185", "patch": "@@ -36,6 +36,7 @@\n from unidiff import PatchSet\n \n pr_regex = re.compile(r'(\\/(\\/|\\*)|[Cc*!])\\s+(?P<pr>PR [a-z+-]+\\/[0-9]+)')\n+dr_regex = re.compile(r'(\\/(\\/|\\*)|[Cc*!])\\s+(?P<dr>DR [0-9]+)')\n identifier_regex = re.compile(r'^([a-zA-Z0-9_#].*)')\n comment_regex = re.compile(r'^\\/\\*')\n struct_regex = re.compile(r'^(class|struct|union|enum)\\s+'\n@@ -142,7 +143,13 @@ def generate_changelog(data, no_functions=False, fill_pr_titles=False):\n                     if pr not in prs:\n                         prs.append(pr)\n                 else:\n-                    break\n+                    m = dr_regex.search(line.value)\n+                    if m:\n+                        dr = m.group('dr')\n+                        if dr not in prs:\n+                            prs.append(dr)\n+                    else:\n+                        break\n \n     if fill_pr_titles:\n         out += get_pr_titles(prs)"}, {"sha": "ef7f2b1a59428065895c7bb76919ea3b2646b320", "filename": "contrib/test_mklog.py", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c7cdc5f427281c675b7a42a1554dfdaa03e185/contrib%2Ftest_mklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c7cdc5f427281c675b7a42a1554dfdaa03e185/contrib%2Ftest_mklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftest_mklog.py?ref=e7c7cdc5f427281c675b7a42a1554dfdaa03e185", "patch": "@@ -344,6 +344,41 @@\n \n '''\n \n+PATCH7 = '''\\\n+diff --git a/gcc/testsuite/g++.dg/DRs/dr2237.C b/gcc/testsuite/g++.dg/DRs/dr2237.C\n+new file mode 100644\n+index 00000000000..f3d6d11e61e\n+--- /dev/null\n++++ b/gcc/testsuite/g++.dg/DRs/dr2237.C\n+@@ -0,0 +1,18 @@\n++// DR 2237 - Can a template-id name a constructor?\n++\n++template<class T>\n++struct X {\n++  X<T>(); // { dg-error \"expected\" \"\" { target c++20 } }\n++  X(int); // OK, injected-class-name used\n++  ~X<T>(); // { dg-error \"template-id not allowed for destructor\" \"\" { target c++20 } }\n++};\n++\n++// ill-formed since DR1435\n++template<typename T> X<T>::X<T>() {} // { dg-error \"names the constructor|as no template constructors\" }\n++template<typename T> X<T>::~X<T>() {} // { dg-error \"template-id not allowed for destructor\" \"\" { target c++20 } }\n++\n++struct Q {\n++  // ill-formed since DR1435\n++  template<typename T> friend X<T>::X<T>(); // { dg-error \"names the constructor|as no template constructors\" }\n++  template<typename T> friend X<T>::~X<T>(); // { dg-error \"template-id not allowed for destructor\" \"\" { target c++20 } }\n++};\n+'''\n+\n+EXPECTED7 = '''\\\n+gcc/testsuite/ChangeLog:\n+\n+\tDR 2237\n+\t* g++.dg/DRs/dr2237.C: New test.\n+\n+'''\n+\n class TestMklog(unittest.TestCase):\n     def test_macro_definition(self):\n         changelog = generate_changelog(PATCH1)\n@@ -372,3 +407,7 @@ def test_pr_bugzilla_download(self):\n     def test_gty_in_struct(self):\n         changelog = generate_changelog(PATCH6, fill_pr_titles=True)\n         assert changelog == EXPECTED6\n+\n+    def test_dr_detection_in_test_case(self):\n+        changelog = generate_changelog(PATCH7)\n+        assert changelog == EXPECTED7"}]}