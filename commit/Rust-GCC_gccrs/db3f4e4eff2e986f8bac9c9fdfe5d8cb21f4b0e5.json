{"sha": "db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzZjRlNGVmZjJlOTg2ZjhiYWM5YzlmZGZlNWQ4Y2IyMWY0YjBlNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-15T09:30:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-15T09:30:03Z"}, "message": "pt.c (check_nontype_parm): New function.\n\ncp:\n\t* pt.c (check_nontype_parm): New function.\n\t(process_template_parm): Use it.\n\t(convert_template_argument): Use it.\n\t(convert_nontype_argument, RECORD_TYPE): Assert it's a ptr to\n\tmember.\ntestsuite:\n\t* g++.old-deja/g++.pt/nontype5.C: New test.\n\nFrom-SVN: r39034", "tree": {"sha": "6af14d88765d4932617eb76dc22f4f1303827f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6af14d88765d4932617eb76dc22f4f1303827f49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/comments", "author": null, "committer": null, "parents": [{"sha": "eeb9ab559d1835646f8bfb83f4f2f7adda206332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb9ab559d1835646f8bfb83f4f2f7adda206332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb9ab559d1835646f8bfb83f4f2f7adda206332"}], "stats": {"total": 96, "additions": 74, "deletions": 22}, "files": [{"sha": "0eb13f8801c84200b0220affd3c1ef80987914ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "patch": "@@ -1,3 +1,11 @@\n+2001-01-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (check_nontype_parm): New function.\n+\t(process_template_parm): Use it.\n+\t(convert_template_argument): Use it.\n+\t(convert_nontype_argument, RECORD_TYPE): Assert it's a ptr to\n+\tmember.\n+\n 2001-01-14  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* tree.c: Add defaults.h"}, {"sha": "8c492d51f0d35d1b3a30265a7342b7ec27176aca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "patch": "@@ -169,6 +169,7 @@ static tree for_each_template_parm_r PARAMS ((tree *, int *, void *));\n static tree instantiate_clone PARAMS ((tree, tree));\n static tree copy_default_args_to_explicit_spec_1 PARAMS ((tree, tree));\n static void copy_default_args_to_explicit_spec PARAMS ((tree));\n+static int check_nontype_parm PARAMS ((tree, int));\n \n /* Called once to initialize pt.c.  */\n \n@@ -1933,21 +1934,8 @@ process_template_parm (list, next)\n \n       /* A template parameter is not modifiable.  */\n       TREE_READONLY (parm) = 1;\n-      if (IS_AGGR_TYPE (TREE_TYPE (parm))\n-\t  && TREE_CODE (TREE_TYPE (parm)) != TEMPLATE_TYPE_PARM\n-\t  && TREE_CODE (TREE_TYPE (parm)) != TYPENAME_TYPE)\n-\t{\n-\t  cp_error (\"`%#T' is not a valid type for a template constant parameter\",\n-\t\t    TREE_TYPE (parm));\n-\t  if (DECL_NAME (parm) == NULL_TREE)\n-\t    error (\"  a template type parameter must begin with `class' or `typename'\");\n-\t  TREE_TYPE (parm) = void_type_node;\n-\t}\n-      else if (pedantic\n-\t       && (TREE_CODE (TREE_TYPE (parm)) == REAL_TYPE\n-\t\t   || TREE_CODE (TREE_TYPE (parm)) == COMPLEX_TYPE))\n-\tcp_pedwarn (\"`%T' is not a valid type for a template constant parameter\",\n-\t\t    TREE_TYPE (parm));\n+      if (check_nontype_parm (TREE_TYPE (parm), 1))\n+        TREE_TYPE (parm) = void_type_node;\n       decl = build_decl (CONST_DECL, DECL_NAME (parm), TREE_TYPE (parm));\n       DECL_INITIAL (parm) = DECL_INITIAL (decl) \n \t= build_template_parm_index (idx, processing_template_decl,\n@@ -3134,13 +3122,7 @@ convert_nontype_argument (type, expr)\n \n     case RECORD_TYPE:\n       {\n-\tif (!TYPE_PTRMEMFUNC_P (type))\n-\t  /* This handles templates like\n-\t       template<class T, T t> void f();\n-\t     when T is substituted with any class.  The second template\n-\t     parameter becomes invalid and the template candidate is\n-\t     rejected.  */\n-\t  return error_mark_node;\n+\tmy_friendly_assert (TYPE_PTRMEMFUNC_P (type), 20010112);\n \n \t/* For a non-type template-parameter of type pointer to member\n \t   function, no conversions apply.  If the template-argument\n@@ -3435,6 +3417,9 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n     {\n       tree t = tsubst (TREE_TYPE (parm), args, complain, in_decl);\n \n+      if (check_nontype_parm (t, complain))\n+        return error_mark_node;\n+      \n       if (processing_template_decl)\n \targ = maybe_fold_nontype_arg (arg);\n \n@@ -10316,3 +10301,35 @@ current_instantiation ()\n {\n   return current_tinst_level;\n }\n+\n+/* [temp.param] Check that template non-type parm TYPE is of an allowable\n+   type. Return zero for ok, non-zero for disallowed. If COMPLAIN is\n+   non-zero, then complain. */\n+\n+static int\n+check_nontype_parm (type, complain)\n+     tree type;\n+     int complain;\n+{\n+  if (INTEGRAL_TYPE_P (type))\n+    return 0;\n+  else if (POINTER_TYPE_P (type))\n+    return 0;\n+  else if (TYPE_PTRMEM_P (type))\n+    return 0;\n+  else if (TYPE_PTRMEMFUNC_P (type))\n+    return 0;\n+  else if (!pedantic && TREE_CODE (type) == REAL_TYPE)\n+    return 0; /* GNU extension */\n+  else if (!pedantic && TREE_CODE (type) == COMPLEX_TYPE)\n+    return 0; /* GNU extension */\n+  else if (TREE_CODE (type) == TEMPLATE_TYPE_PARM)\n+    return 0;\n+  else if (TREE_CODE (type) == TYPENAME_TYPE)\n+    return 0;\n+           \n+  if (complain)\n+    cp_error (\"`%#T' is not a valid type for a template constant parameter\",\n+              type);\n+  return 1;\n+}"}, {"sha": "3ea7b8086e9bd44524641b63fb4fd030debd6556", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "patch": "@@ -1,3 +1,7 @@\n+2001-01-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/nontype5.C: New test.\n+\n 2001-01-15  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * gcc.dg/cpp/if-2.c: Comment out occasionally bogus test; we "}, {"sha": "1268f05bcefb03f493e6447a1c022319723c7c6e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/nontype5.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnontype5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnontype5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnontype5.C?ref=db3f4e4eff2e986f8bac9c9fdfe5d8cb21f4b0e5", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link:\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 10 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1509. We ICE'd on trying to coerce a non-type template parm\n+// that wouldn't.\n+\n+template<class T>\n+struct A {\n+typedef int F();\n+};\n+\n+template<class T, A<T>::F f>\n+struct B {\n+static int g() { return f(); };\n+};\n+\n+int f() { return 0; };\n+\n+int main() {\n+return B<int,&f>::g();  // ERROR - could not convert arg\n+};"}]}