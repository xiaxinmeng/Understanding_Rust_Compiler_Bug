{"sha": "e094c0bfe982c21cd39741efde87591b59af8a55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5NGMwYmZlOTgyYzIxY2QzOTc0MWVmZGU4NzU5MWI1OWFmOGE1NQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-02-11T15:26:11Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-02-11T15:26:11Z"}, "message": "[LVU] deal with md final_scan_insn\n\nPorts call final_scan_insn with seen == NULL, and then\nmaybe_output_next_view crashes because it assumes it's\nnon-NULL.  Oops.  Fixed.\n\nfor  gcc/ChangeLog\n\n\t* final.c (final_scan_insn_1): Renamed from...\n\t(final_scan_insn): ... this.  New wrapper, to recover\n\tseen from the outermost call in recursive ones.\n\t* config/sparc/sparc.c (output_return): Drop seen from call.\n\t(output_sibcall): Likewise.\n\t* config/visium/visium.c (output_branch): Likewise.\n\nFrom-SVN: r257562", "tree": {"sha": "65bfd469f2b7a7806341aa9e156d133ff4f0b0f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65bfd469f2b7a7806341aa9e156d133ff4f0b0f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e094c0bfe982c21cd39741efde87591b59af8a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e094c0bfe982c21cd39741efde87591b59af8a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e094c0bfe982c21cd39741efde87591b59af8a55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e094c0bfe982c21cd39741efde87591b59af8a55/comments", "author": null, "committer": null, "parents": [{"sha": "e5a6b70e88b852b5a1932d4cefd619b6d82a02ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a6b70e88b852b5a1932d4cefd619b6d82a02ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a6b70e88b852b5a1932d4cefd619b6d82a02ba"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "fc842d91c83aa7427b86f4e4366656174fb67a6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e094c0bfe982c21cd39741efde87591b59af8a55", "patch": "@@ -1,3 +1,12 @@\n+2018-02-11  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* final.c (final_scan_insn_1): Renamed from...\n+\t(final_scan_insn): ... this.  New wrapper, to recover\n+\tseen from the outermost call in recursive ones.\n+\t* config/sparc/sparc.c (output_return): Drop seen from call.\n+\t(output_sibcall): Likewise.\n+\t* config/visium/visium.c (output_branch): Likewise.\n+\n 2018-02-10  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.c (hppa_profile_hook): Mark SYMBOL_REF for _mcount as"}, {"sha": "7126b57ba0110559e0b7e01fd0d8def4f2b36fa9", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e094c0bfe982c21cd39741efde87591b59af8a55", "patch": "@@ -6422,7 +6422,6 @@ output_return (rtx_insn *insn)\n \t{\n \t  rtx_insn *delay;\n \t  rtx pat;\n-\t  int seen;\n \n \t  delay = NEXT_INSN (insn);\n \t  gcc_assert (delay);\n@@ -6442,7 +6441,7 @@ output_return (rtx_insn *insn)\n \t\t Make sure to output its source location first.  */\n \t      PATTERN (delay) = gen_blockage ();\n \t      INSN_CODE (delay) = -1;\n-\t      final_scan_insn (delay, asm_out_file, optimize, 0, &seen);\n+\t      final_scan_insn (delay, asm_out_file, optimize, 0, NULL);\n \t      INSN_LOCATION (delay) = UNKNOWN_LOCATION;\n \n \t      output_restore (pat);\n@@ -6503,7 +6502,6 @@ output_sibcall (rtx_insn *insn, rtx call_operand)\n \t{\n \t  rtx_insn *delay;\n \t  rtx pat;\n-\t  int seen;\n \n \t  delay = NEXT_INSN (insn);\n \t  gcc_assert (delay);\n@@ -6514,7 +6512,7 @@ output_sibcall (rtx_insn *insn, rtx call_operand)\n \t     Make sure to output its source location first.  */\n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;\n-\t  final_scan_insn (delay, asm_out_file, optimize, 0, &seen);\n+\t  final_scan_insn (delay, asm_out_file, optimize, 0, NULL);\n \t  INSN_LOCATION (delay) = UNKNOWN_LOCATION;\n \n \t  output_restore (pat);"}, {"sha": "106cdaf9e3f937106f81a264296ee81499a20a46", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=e094c0bfe982c21cd39741efde87591b59af8a55", "patch": "@@ -3094,10 +3094,9 @@ output_branch (rtx label, const char *cond, rtx_insn *insn)\n \t  if (final_sequence)\n \t    {\n \t      rtx_insn *delay = NEXT_INSN (insn);\n-\t      int seen;\n \t      gcc_assert (delay);\n \n-\t      final_scan_insn (delay, asm_out_file, optimize, 0, &seen);\n+\t      final_scan_insn (delay, asm_out_file, optimize, 0, NULL);\n \t      PATTERN (delay) = gen_blockage ();\n \t      INSN_CODE (delay) = -1;\n \t    }"}, {"sha": "cbebbfdf5b077e4a01b0acd29b4e4ddf9d23ad4f", "filename": "gcc/final.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e094c0bfe982c21cd39741efde87591b59af8a55/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e094c0bfe982c21cd39741efde87591b59af8a55", "patch": "@@ -2236,9 +2236,9 @@ asm_show_source (const char *filename, int linenum)\n    debug information.  We force the emission of a line note after\n    both NOTE_INSN_PROLOGUE_END and NOTE_INSN_FUNCTION_BEG.  */\n \n-rtx_insn *\n-final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n-\t\t int nopeepholes ATTRIBUTE_UNUSED, int *seen)\n+static rtx_insn *\n+final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n+\t\t   int nopeepholes ATTRIBUTE_UNUSED, int *seen)\n {\n #if HAVE_cc0\n   rtx set;\n@@ -3189,6 +3189,36 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n     }\n   return NEXT_INSN (insn);\n }\n+\n+/* This is a wrapper around final_scan_insn_1 that allows ports to\n+   call it recursively without a known value for SEEN.  The value is\n+   saved at the outermost call, and recovered for recursive calls.\n+   Recursive calls MUST pass NULL, or the same pointer if they can\n+   otherwise get to it.  */\n+\n+rtx_insn *\n+final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p,\n+\t\t int nopeepholes, int *seen)\n+{\n+  static int *enclosing_seen;\n+  static int recursion_counter;\n+\n+  gcc_assert (seen || recursion_counter);\n+  gcc_assert (!recursion_counter || !seen || seen == enclosing_seen);\n+\n+  if (!recursion_counter++)\n+    enclosing_seen = seen;\n+  else if (!seen)\n+    seen = enclosing_seen;\n+\n+  rtx_insn *ret = final_scan_insn_1 (insn, file, optimize_p, nopeepholes, seen);\n+\n+  if (!--recursion_counter)\n+    enclosing_seen = NULL;\n+\n+  return ret;\n+}\n+\n \f\n /* Return whether a source line note needs to be emitted before INSN.\n    Sets IS_STMT to TRUE if the line should be marked as a possible"}]}