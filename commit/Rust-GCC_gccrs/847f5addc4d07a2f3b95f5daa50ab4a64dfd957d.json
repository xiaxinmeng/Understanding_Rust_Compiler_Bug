{"sha": "847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "node_id": "C_kwDOANBUbNoAKDg0N2Y1YWRkYzRkMDdhMmYzYjk1ZjVkYWE1MGFiNGE2NGRmZDk1N2Q", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-06T08:39:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-06T08:39:41Z"}, "message": "openmp: Map holds clause to IFN_ASSUME for C/C++\n\nNow that [[assume (cond)]] support is in, this simple patch makes\n  #pragma omp assume holds(cond)\nuse it.\n\n2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n\n\t* c-parser.cc (c_parser_omp_assumption_clauses): Emit IFN_ASSUME\n\tcall for holds clause on assume construct.\n\n\t* parser.cc (cp_parser_omp_assumption_clauses): Emit IFN_ASSUME\n\tcall for holds clause on assume construct.\n\n\t* c-c++-common/gomp/assume-4.c: New test.", "tree": {"sha": "0ce51845a3d521b129664927810852f72e264775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ce51845a3d521b129664927810852f72e264775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b51baddc53d64aa4c5e7a81ef3c4bf320293be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b51baddc53d64aa4c5e7a81ef3c4bf320293be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b51baddc53d64aa4c5e7a81ef3c4bf320293be"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "67b919c0b181b50d91f3a286f19fe2a728ce417a", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "patch": "@@ -23571,10 +23571,12 @@ c_parser_omp_assumption_clauses (c_parser *parser, bool is_assume)\n \t      tree t = convert_lvalue_to_rvalue (eloc, expr, true, true).value;\n \t      t = c_objc_common_truthvalue_conversion (eloc, t);\n \t      t = c_fully_fold (t, false, NULL);\n-\t      if (is_assume)\n+\t      if (is_assume && t != error_mark_node)\n \t\t{\n-\t\t  /* FIXME: Emit .ASSUME (t) call here.  */\n-\t\t  (void) t;\n+\t\t  tree fn = build_call_expr_internal_loc (eloc, IFN_ASSUME,\n+\t\t\t\t\t\t\t  void_type_node, 1,\n+\t\t\t\t\t\t\t  t);\n+\t\t  add_stmt (fn);\n \t\t}\n \t      parens.skip_until_found_close (parser);\n \t    }"}, {"sha": "90e06f914fb1373b0d41f9b88d5d057583d746fb", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "patch": "@@ -46023,13 +46023,15 @@ cp_parser_omp_assumption_clauses (cp_parser *parser, cp_token *pragma_tok,\n \t  matching_parens parens;\n \t  if (parens.require_open (parser))\n \t    {\n+\t      location_t eloc = cp_lexer_peek_token (parser->lexer)->location;\n \t      tree t = cp_parser_assignment_expression (parser);\n \t      if (!type_dependent_expression_p (t))\n \t\tt = contextual_conv_bool (t, tf_warning_or_error);\n-\t      if (is_assume)\n+\t      if (is_assume && !error_operand_p (t))\n \t\t{\n-\t\t  /* FIXME: Emit .ASSUME (t) call here.  */\n-\t\t  (void) t;\n+\t\t  t = build_call_expr_internal_loc (eloc, IFN_ASSUME,\n+\t\t\t\t\t\t    void_type_node, 1, t);\n+\t\t  finish_expr_stmt (t);\n \t\t}\n \t      if (!parens.require_close (parser))\n \t\tcp_parser_skip_to_closing_parenthesis (parser,"}, {"sha": "9da2296fd1d660961c6819e5896e2f1f4f885cf5", "filename": "gcc/testsuite/c-c++-common/gomp/assume-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fassume-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fassume-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fassume-4.c?ref=847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return 42;\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"return -1;\" \"optimized\" } } */\n+\n+int\n+foo (int x)\n+{\n+  int y;\n+  #pragma omp assume holds (x == 42)\n+  y = x;\n+  return y;\n+}\n+\n+int\n+bar (int x)\n+{\n+  #pragma omp assume holds (x < 42)\n+  ;\n+  if (x == 42)\n+    return -1;\n+  return 42;\n+}"}]}