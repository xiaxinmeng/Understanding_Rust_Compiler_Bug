{"sha": "d3465d72bacd65663da8f8b4977f2936a799c3cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0NjVkNzJiYWNkNjU2NjNkYThmOGI0OTc3ZjI5MzZhNzk5YzNjZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-05-24T10:15:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-05-24T10:15:36Z"}, "message": "Avoid unnecessary peeling for gaps with LD3\n\nvectorizable_load forces peeling for gaps if the vectorisation factor\nis not a multiple of the group size, since in that case we'd normally load\nbeyond the original scalar accesses but drop the excess elements as part\nof a following permute:\n\n          if (loop_vinfo\n              && ! STMT_VINFO_STRIDED_P (stmt_info)\n              && (GROUP_GAP (vinfo_for_stmt (first_stmt)) != 0\n                  || (!slp && vf % GROUP_SIZE (vinfo_for_stmt (first_stmt)) != 0)))\n\nThis isn't necessary for LOAD_LANES though, since it loads only the\ndata needed and does the permute itself.\n\nTested on aarch64-linux-gnu and x86_64-linux-gnu.\n\ngcc/\n\t* tree-vect-stmts.c (vectorizable_load): Reorder checks so that\n\tload_lanes/grouped_load classification comes first.  Don't check\n\twhether the vectorization factor is a multiple of the group size\n\tfor load_lanes.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-load-lanes-peeling-1.c: New test.\n\nFrom-SVN: r236632", "tree": {"sha": "15d92b71f80740174fee4dd8fb61fd75530eaef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d92b71f80740174fee4dd8fb61fd75530eaef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3465d72bacd65663da8f8b4977f2936a799c3cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3465d72bacd65663da8f8b4977f2936a799c3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3465d72bacd65663da8f8b4977f2936a799c3cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3465d72bacd65663da8f8b4977f2936a799c3cd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "836dbb1a27f3e793ad32723aeb6630237887e6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/836dbb1a27f3e793ad32723aeb6630237887e6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/836dbb1a27f3e793ad32723aeb6630237887e6d5"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "8f726b2c6497afa2f11df29d3eebc8a9835b3d6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3465d72bacd65663da8f8b4977f2936a799c3cd", "patch": "@@ -1,3 +1,10 @@\n+2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): Reorder checks so that\n+\tload_lanes/grouped_load classification comes first.  Don't check\n+\twhether the vectorization factor is a multiple of the group size\n+\tfor load_lanes.\n+\n 2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-data-refs.c (vect_analyze_group_access_1): Set"}, {"sha": "cb78cc2c5805b918ea25b7756e968577f91b1c0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3465d72bacd65663da8f8b4977f2936a799c3cd", "patch": "@@ -1,3 +1,7 @@\n+2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-load-lanes-peeling-1.c: New test.\n+\n 2016-05-24  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70434"}, {"sha": "c9cd104e8e5885601d502c0a3ef4baa13d34150f", "filename": "gcc/testsuite/gcc.dg/vect/vect-load-lanes-peeling-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-load-lanes-peeling-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-load-lanes-peeling-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-load-lanes-peeling-1.c?ref=d3465d72bacd65663da8f8b4977f2936a799c3cd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_load_lanes } */\n+\n+void\n+f (int *__restrict a, int *__restrict b)\n+{\n+  for (int i = 0; i < 96; ++i)\n+    a[i] = b[i * 3] + b[i * 3 + 1] + b[i * 3 + 2];\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Data access with gaps\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"epilog loop required\" \"vect\" } } */"}, {"sha": "1252d33510472d85fc0f258145e8ba2379e78315", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3465d72bacd65663da8f8b4977f2936a799c3cd/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=d3465d72bacd65663da8f8b4977f2936a799c3cd", "patch": "@@ -6303,6 +6303,17 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       gcc_assert (!nested_in_vect_loop && !STMT_VINFO_GATHER_SCATTER_P (stmt_info));\n \n       first_stmt = GROUP_FIRST_ELEMENT (stmt_info);\n+      group_size = GROUP_SIZE (vinfo_for_stmt (first_stmt));\n+\n+      if (!slp\n+\t  && !PURE_SLP_STMT (stmt_info)\n+\t  && !STMT_VINFO_STRIDED_P (stmt_info))\n+\t{\n+\t  if (vect_load_lanes_supported (vectype, group_size))\n+\t    load_lanes_p = true;\n+\t  else if (!vect_grouped_load_supported (vectype, group_size))\n+\t    return false;\n+\t}\n \n       /* If this is single-element interleaving with an element distance\n          that leaves unused vector loads around punt - we at least create\n@@ -6330,7 +6341,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       if (loop_vinfo\n \t  && ! STMT_VINFO_STRIDED_P (stmt_info)\n \t  && (GROUP_GAP (vinfo_for_stmt (first_stmt)) != 0\n-\t      || (!slp && vf % GROUP_SIZE (vinfo_for_stmt (first_stmt)) != 0)))\n+\t      || (!slp && !load_lanes_p && vf % group_size != 0)))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -6350,8 +6361,6 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       if (slp && SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())\n \tslp_perm = true;\n \n-      group_size = GROUP_SIZE (vinfo_for_stmt (first_stmt));\n-\n       /* ???  The following is overly pessimistic (as well as the loop\n          case above) in the case we can statically determine the excess\n \t elements loaded are within the bounds of a decl that is accessed.\n@@ -6364,16 +6373,6 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t  return false;\n \t}\n \n-      if (!slp\n-\t  && !PURE_SLP_STMT (stmt_info)\n-\t  && !STMT_VINFO_STRIDED_P (stmt_info))\n-\t{\n-\t  if (vect_load_lanes_supported (vectype, group_size))\n-\t    load_lanes_p = true;\n-\t  else if (!vect_grouped_load_supported (vectype, group_size))\n-\t    return false;\n-\t}\n-\n       /* Invalidate assumptions made by dependence analysis when vectorization\n \t on the unrolled body effectively re-orders stmts.  */\n       if (!PURE_SLP_STMT (stmt_info)"}]}