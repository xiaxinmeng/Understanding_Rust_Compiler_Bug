{"sha": "29a63d67791eb9a7bea3c64425ff3b3494968812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhNjNkNjc3OTFlYjlhN2JlYTNjNjQ0MjVmZjNiMzQ5NDk2ODgxMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-01-13T16:32:33Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-01-13T16:32:33Z"}, "message": "re PR fortran/45848 ([OOP] ICE on invalid code in fortran/symbol.c:2410)\n\n2011-01-13  Tobias Burnus  <burnus@net-b.de>\n            Mikael Morin  <mikael@gcc.gnu.org>\n\n        PR fortran/45848\n        PR fortran/47204\n        * gfortran.h (gfc_code): Move union ext's case_list into\n        the struct block.\n        * dump-parse-tree.c (show_code_node): Adapt by prefixing\n        * case_list\n        by \"block.\".\n        * frontend-passes.c (gfc_code_walker): Ditto.\n        * match.c (gfc_match_goto, gfc_match_call, gfc_match_case,\n        gfc_match_type_is, gfc_match_class_is): Ditto.\n        * resolve.c (resolve_select, resolve_select_type): Ditto.\n        * st.c (gfc_free_statement): Ditto.\n        * trans-stmt.c (gfc_trans_integer_select,\n        * gfc_trans_logical_select,\n        gfc_trans_character_select): Ditto.\n        * parse.c (resolve_all_program_units): For error recovery, avoid\n        segfault is proc_name is NULL.\n\n2011-01-13  Tobias Burnus  <burnus@net-b.de>\n            Mikael Morin  <mikael@gcc.gnu.org>\n\n        PR fortran/45848\n        PR fortran/47204\n        * gfortran.dg/select_type_20.f90: New.\n        * gfortran.dg/select_type_21.f90: New.\n\n\nCo-Authored-By: Mikael Morin <mikael@gcc.gnu.org>\n\nFrom-SVN: r168753", "tree": {"sha": "f2bef0c7e12ae3147eefdbda3213ebc7162d7c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2bef0c7e12ae3147eefdbda3213ebc7162d7c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a63d67791eb9a7bea3c64425ff3b3494968812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a63d67791eb9a7bea3c64425ff3b3494968812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a63d67791eb9a7bea3c64425ff3b3494968812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a63d67791eb9a7bea3c64425ff3b3494968812/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b41f0b3440bc8fe4982404c16a63b41521929450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41f0b3440bc8fe4982404c16a63b41521929450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41f0b3440bc8fe4982404c16a63b41521929450"}], "stats": {"total": 151, "additions": 111, "deletions": 40}, "files": [{"sha": "fa84641adb818eb7f93bc72f3d312948178921ae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -1,3 +1,22 @@\n+2011-01-13  Tobias Burnus  <burnus@net-b.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/45848\n+\tPR fortran/47204\n+\t* gfortran.h (gfc_code): Move union ext's case_list into\n+\tthe struct block.\n+\t* dump-parse-tree.c (show_code_node): Adapt by prefixing case_list\n+\tby \"block.\".\n+\t* frontend-passes.c (gfc_code_walker): Ditto.\n+\t* match.c (gfc_match_goto, gfc_match_call, gfc_match_case,\n+\tgfc_match_type_is, gfc_match_class_is): Ditto.\n+\t* resolve.c (resolve_select, resolve_select_type): Ditto.\n+\t* st.c (gfc_free_statement): Ditto.\n+\t* trans-stmt.c (gfc_trans_integer_select, gfc_trans_logical_select,\n+\tgfc_trans_character_select): Ditto.\n+\t* parse.c (resolve_all_program_units): For error recovery, avoid\n+\tsegfault is proc_name is NULL.\n+\n 2011-01-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/47051"}, {"sha": "24e9ea5d1d5845970ded3c3783acbeea5d2a0eb8", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -1467,7 +1467,7 @@ show_code_node (int level, gfc_code *c)\n \t  code_indent (level, 0);\n \n \t  fputs (\"CASE \", dumpfile);\n-\t  for (cp = d->ext.case_list; cp; cp = cp->next)\n+\t  for (cp = d->ext.block.case_list; cp; cp = cp->next)\n \t    {\n \t      fputc ('(', dumpfile);\n \t      show_expr (cp->low);"}, {"sha": "7c557679822e5236cb0de316878d82d15a9cf321", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -659,7 +659,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t      for (b = (*c)->block; b; b = b->block)\n \t\t{\n \t\t  gfc_case *cp;\n-\t\t  for (cp = b->ext.case_list; cp; cp = cp->next)\n+\t\t  for (cp = b->ext.block.case_list; cp; cp = cp->next)\n \t\t    {\n \t\t      WALK_SUBEXPR (cp->low);\n \t\t      WALK_SUBEXPR (cp->high);"}, {"sha": "2622f22fd85178741e7ffdf73bf305c64e449cdb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -2079,7 +2079,6 @@ typedef struct gfc_code\n   union\n   {\n     gfc_actual_arglist *actual;\n-    gfc_case *case_list;\n     gfc_iterator *iterator;\n \n     struct\n@@ -2093,6 +2092,7 @@ typedef struct gfc_code\n     {\n       gfc_namespace *ns;\n       gfc_association_list *assoc;\n+      gfc_case *case_list;\n     }\n     block;\n "}, {"sha": "70f586254632ab1be7584d62a2b6dddb4e250198", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -2651,7 +2651,7 @@ gfc_match_goto (void)\n \t\t\t\t\t     NULL, i++);\n \n       tail->op = EXEC_SELECT;\n-      tail->ext.case_list = cp;\n+      tail->ext.block.case_list = cp;\n \n       tail->next = gfc_get_code ();\n       tail->next->op = EXEC_GOTO;\n@@ -3607,7 +3607,7 @@ gfc_match_call (void)\n \t  new_case = gfc_get_case ();\n \t  new_case->high = gfc_get_int_expr (gfc_default_integer_kind, NULL, i);\n \t  new_case->low = new_case->high;\n-\t  c->ext.case_list = new_case;\n+\t  c->ext.block.case_list = new_case;\n \n \t  c->next = gfc_get_code ();\n \t  c->next->op = EXEC_GOTO;\n@@ -4658,7 +4658,7 @@ gfc_match_case (void)\n       new_st.op = EXEC_SELECT;\n       c = gfc_get_case ();\n       c->where = gfc_current_locus;\n-      new_st.ext.case_list = c;\n+      new_st.ext.block.case_list = c;\n       return MATCH_YES;\n     }\n \n@@ -4690,7 +4690,7 @@ gfc_match_case (void)\n     goto cleanup;\n \n   new_st.op = EXEC_SELECT;\n-  new_st.ext.case_list = head;\n+  new_st.ext.block.case_list = head;\n \n   return MATCH_YES;\n \n@@ -4738,7 +4738,7 @@ gfc_match_type_is (void)\n     goto cleanup;\n \n   new_st.op = EXEC_SELECT_TYPE;\n-  new_st.ext.case_list = c;\n+  new_st.ext.block.case_list = c;\n \n   /* Create temporary variable.  */\n   select_type_set_tmp (&c->ts);\n@@ -4778,7 +4778,7 @@ gfc_match_class_is (void)\n       c = gfc_get_case ();\n       c->where = gfc_current_locus;\n       c->ts.type = BT_UNKNOWN;\n-      new_st.ext.case_list = c;\n+      new_st.ext.block.case_list = c;\n       select_type_set_tmp (NULL);\n       return MATCH_YES;\n     }\n@@ -4811,7 +4811,7 @@ gfc_match_class_is (void)\n     goto cleanup;\n \n   new_st.op = EXEC_SELECT_TYPE;\n-  new_st.ext.case_list = c;\n+  new_st.ext.block.case_list = c;\n   \n   /* Create temporary variable.  */\n   select_type_set_tmp (&c->ts);"}, {"sha": "b51e12bee4676c2beb490e8937f54acad08fcfa8", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -4190,7 +4190,8 @@ resolve_all_program_units (gfc_namespace *gfc_global_ns_list)\n   gfc_current_ns = gfc_global_ns_list;\n   for (; gfc_current_ns; gfc_current_ns = gfc_current_ns->sibling)\n     {\n-      gfc_current_locus = gfc_current_ns->proc_name->declared_at;\n+      if (gfc_current_ns->proc_name)\n+\tgfc_current_locus = gfc_current_ns->proc_name->declared_at;\n       gfc_resolve (gfc_current_ns);\n       gfc_current_ns->derived_types = gfc_derived_types;\n       gfc_derived_types = NULL;"}, {"sha": "a1c991794b013e305d4bc3a1188458c7e25583bc", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -7361,7 +7361,7 @@ resolve_select (gfc_code *code)\n \n   if (type == BT_INTEGER)\n     for (body = code->block; body; body = body->block)\n-      for (cp = body->ext.case_list; cp; cp = cp->next)\n+      for (cp = body->ext.block.case_list; cp; cp = cp->next)\n \t{\n \t  if (cp->low\n \t      && gfc_check_integer_range (cp->low->value.integer,\n@@ -7389,7 +7389,7 @@ resolve_select (gfc_code *code)\n       for (body = code->block; body; body = body->block)\n \t{\n \t  /* Walk the case label list.  */\n-\t  for (cp = body->ext.case_list; cp; cp = cp->next)\n+\t  for (cp = body->ext.block.case_list; cp; cp = cp->next)\n \t    {\n \t      /* Intercept the DEFAULT case.  It does not have a kind.  */\n \t      if (cp->low == NULL && cp->high == NULL)\n@@ -7426,7 +7426,7 @@ resolve_select (gfc_code *code)\n \n       /* Walk the case label list, making sure that all case labels\n \t are legal.  */\n-      for (cp = body->ext.case_list; cp; cp = cp->next)\n+      for (cp = body->ext.block.case_list; cp; cp = cp->next)\n \t{\n \t  /* Count the number of cases in the whole construct.  */\n \t  ncases++;\n@@ -7527,19 +7527,19 @@ resolve_select (gfc_code *code)\n       if (seen_unreachable)\n       {\n \t/* Advance until the first case in the list is reachable.  */\n-\twhile (body->ext.case_list != NULL\n-\t       && body->ext.case_list->unreachable)\n+\twhile (body->ext.block.case_list != NULL\n+\t       && body->ext.block.case_list->unreachable)\n \t  {\n-\t    gfc_case *n = body->ext.case_list;\n-\t    body->ext.case_list = body->ext.case_list->next;\n+\t    gfc_case *n = body->ext.block.case_list;\n+\t    body->ext.block.case_list = body->ext.block.case_list->next;\n \t    n->next = NULL;\n \t    gfc_free_case_list (n);\n \t  }\n \n \t/* Strip all other unreachable cases.  */\n-\tif (body->ext.case_list)\n+\tif (body->ext.block.case_list)\n \t  {\n-\t    for (cp = body->ext.case_list; cp->next; cp = cp->next)\n+\t    for (cp = body->ext.block.case_list; cp->next; cp = cp->next)\n \t      {\n \t\tif (cp->next->unreachable)\n \t\t  {\n@@ -7575,7 +7575,7 @@ resolve_select (gfc_code *code)\n      unreachable case labels for a block.  */\n   for (body = code; body && body->block; body = body->block)\n     {\n-      if (body->block->ext.case_list == NULL)\n+      if (body->block->ext.block.case_list == NULL)\n \t{\n \t  /* Cut the unreachable block from the code chain.  */\n \t  gfc_code *c = body->block;\n@@ -7714,7 +7714,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n   /* Loop over TYPE IS / CLASS IS cases.  */\n   for (body = code->block; body; body = body->block)\n     {\n-      c = body->ext.case_list;\n+      c = body->ext.block.case_list;\n \n       /* Check F03:C815.  */\n       if ((c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)\n@@ -7744,7 +7744,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t    {\n \t      gfc_error (\"The DEFAULT CASE at %L cannot be followed \"\n \t\t\t \"by a second DEFAULT CASE at %L\",\n-\t\t\t &default_case->ext.case_list->where, &c->where);\n+\t\t\t &default_case->ext.block.case_list->where, &c->where);\n \t      error++;\n \t      continue;\n \t    }\n@@ -7799,7 +7799,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n   /* Loop over TYPE IS / CLASS IS cases.  */\n   for (body = code->block; body; body = body->block)\n     {\n-      c = body->ext.case_list;\n+      c = body->ext.block.case_list;\n \n       if (c->ts.type == BT_DERIVED)\n \tc->low = c->high = gfc_get_int_expr (gfc_default_integer_kind, NULL,\n@@ -7845,7 +7845,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n   body = code;\n   while (body && body->block)\n     {\n-      if (body->block->ext.case_list->ts.type == BT_CLASS)\n+      if (body->block->ext.block.case_list->ts.type == BT_CLASS)\n \t{\n \t  /* Add to class_is list.  */\n \t  if (class_is == NULL)\n@@ -7878,8 +7878,8 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t  tail->block = gfc_get_code ();\n \t  tail = tail->block;\n \t  tail->op = EXEC_SELECT_TYPE;\n-\t  tail->ext.case_list = gfc_get_case ();\n-\t  tail->ext.case_list->ts.type = BT_UNKNOWN;\n+\t  tail->ext.block.case_list = gfc_get_case ();\n+\t  tail->ext.block.case_list->ts.type = BT_UNKNOWN;\n \t  tail->next = NULL;\n \t  default_case = tail;\n \t}\n@@ -7897,15 +7897,16 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t\t{\n \t\t  c2 = (*c1)->block;\n \t\t  /* F03:C817 (check for doubles).  */\n-\t\t  if ((*c1)->ext.case_list->ts.u.derived->hash_value\n-\t\t      == c2->ext.case_list->ts.u.derived->hash_value)\n+\t\t  if ((*c1)->ext.block.case_list->ts.u.derived->hash_value\n+\t\t      == c2->ext.block.case_list->ts.u.derived->hash_value)\n \t\t    {\n \t\t      gfc_error (\"Double CLASS IS block in SELECT TYPE \"\n-\t\t\t\t \"statement at %L\", &c2->ext.case_list->where);\n+\t\t\t\t \"statement at %L\",\n+\t\t\t\t &c2->ext.block.case_list->where);\n \t\t      return;\n \t\t    }\n-\t\t  if ((*c1)->ext.case_list->ts.u.derived->attr.extension\n-\t\t      < c2->ext.case_list->ts.u.derived->attr.extension)\n+\t\t  if ((*c1)->ext.block.case_list->ts.u.derived->attr.extension\n+\t\t      < c2->ext.block.case_list->ts.u.derived->attr.extension)\n \t\t    {\n \t\t      /* Swap.  */\n \t\t      (*c1)->block = c2->block;\n@@ -7940,7 +7941,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t  new_st->expr1->value.function.actual->expr = gfc_get_variable_expr (code->expr1->symtree);\n \t  new_st->expr1->value.function.actual->expr->where = code->loc;\n \t  gfc_add_vptr_component (new_st->expr1->value.function.actual->expr);\n-\t  vtab = gfc_find_derived_vtab (body->ext.case_list->ts.u.derived);\n+\t  vtab = gfc_find_derived_vtab (body->ext.block.case_list->ts.u.derived);\n \t  st = gfc_find_symtree (vtab->ns->sym_root, vtab->name);\n \t  new_st->expr1->value.function.actual->next = gfc_get_actual_arglist ();\n \t  new_st->expr1->value.function.actual->next->expr = gfc_get_variable_expr (st);"}, {"sha": "28d69b929834b9888dd6c694e9b722322723f066", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -129,8 +129,8 @@ gfc_free_statement (gfc_code *p)\n \n     case EXEC_SELECT:\n     case EXEC_SELECT_TYPE:\n-      if (p->ext.case_list)\n-\tgfc_free_case_list (p->ext.case_list);\n+      if (p->ext.block.case_list)\n+\tgfc_free_case_list (p->ext.block.case_list);\n       break;\n \n     case EXEC_DO:"}, {"sha": "8781d0e723cddb45b48e97ffc880f286366f9d08", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -1560,7 +1560,7 @@ gfc_trans_integer_select (gfc_code * code)\n \n   for (c = code->block; c; c = c->block)\n     {\n-      for (cp = c->ext.case_list; cp; cp = cp->next)\n+      for (cp = c->ext.block.case_list; cp; cp = cp->next)\n \t{\n \t  tree low, high;\n           tree label;\n@@ -1672,7 +1672,7 @@ gfc_trans_logical_select (gfc_code * code)\n      always executed, and we don't generate code a COND_EXPR.  */\n   for (c = code->block; c; c = c->block)\n     {\n-      for (cp = c->ext.case_list; cp; cp = cp->next)\n+      for (cp = c->ext.block.case_list; cp; cp = cp->next)\n \t{\n \t  if (cp->low)\n \t    {\n@@ -1771,7 +1771,7 @@ gfc_trans_character_select (gfc_code *code)\n   static tree ss_string2[2], ss_string2_len[2];\n   static tree ss_target[2];\n \n-  cp = code->block->ext.case_list;\n+  cp = code->block->ext.block.case_list;\n   while (cp->left != NULL)\n     cp = cp->left;\n \n@@ -1840,7 +1840,7 @@ gfc_trans_character_select (gfc_code *code)\n \n \t  for (c = code->block; c; c = c->block)\n \t    {\n-\t      for (cp = c->ext.case_list; cp; cp = cp->next)\n+\t      for (cp = c->ext.block.case_list; cp; cp = cp->next)\n \t\t{\n \t\t  tree low, high;\n \t\t  tree label;\n@@ -1969,7 +1969,7 @@ gfc_trans_character_select (gfc_code *code)\n \n   for (c = code->block; c; c = c->block)\n     {\n-      for (d = c->ext.case_list; d; d = d->next)\n+      for (d = c->ext.block.case_list; d; d = d->next)\n         {\n \t  label = gfc_build_label_decl (NULL_TREE);\n \t  tmp = fold_build3_loc (input_location, CASE_LABEL_EXPR,"}, {"sha": "5bbc5d895e43724289eea117cb85eb24569a6a7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -1,3 +1,11 @@\n+2011-01-13  Tobias Burnus  <burnus@net-b.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/45848\n+\tPR fortran/47204\n+\t* gfortran.dg/select_type_20.f90: New.\n+\t* gfortran.dg/select_type_21.f90: New.\n+\n 2011-01-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/47251"}, {"sha": "a247f7b0cfb5cf745b4ee66c27e7bca713670c85", "filename": "gcc/testsuite/gfortran.dg/select_type_20.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_20.f90?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! PR fortran/45848\n+! PR fortran/47204\n+!\n+! Contributed by Harald Anlauf and Zdenek Sojka\n+!\n+module gfcbug111\n+  implicit none\n+\n+  type, abstract :: inner_product_class\n+  end type inner_product_class\n+\n+  type, extends(inner_product_class) :: trivial_inner_product_type\n+  end type trivial_inner_product_type\n+\n+contains\n+\n+  function my_dot_v_v (this,a,b) ! { dg-error \"has no IMPLICIT type\" }\n+    class(trivial_inner_product_type), intent(in) :: this\n+    class(vector_class),               intent(in) :: a,b ! { dg-error \"Derived type\" }\n+    real :: my_dot_v_v\n+\n+    select type (a)\n+    class is (trivial_vector_type) ! { dg-error \"Syntax error in CLASS IS\" }\n+       select type (b) ! { dg-error \"Expected TYPE IS\" }\n+       class is (trivial_vector_type) ! { dg-error \"Syntax error in CLASS IS\" }\n+       class default\n+       end select\n+    class default ! { dg-error \"Unclassifiable statement\" }\n+    end select ! { dg-error \"Expecting END FUNCTION\" }\n+  end function my_dot_v_v\n+end module gfcbug111\n+\n+select type (a)\n+! { dg-excess-errors \"Unexpected end of file\" }"}, {"sha": "48d6968135cc61f5c8761dda63b213a7ceafda19", "filename": "gcc/testsuite/gfortran.dg/select_type_21.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a63d67791eb9a7bea3c64425ff3b3494968812/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_21.f90?ref=29a63d67791eb9a7bea3c64425ff3b3494968812", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+! PR fortran/45848\n+! PR fortran/47204\n+!\n+select type (a) ! { dg-error \"Selector shall be polymorphic\" }\n+end select\n+end"}]}