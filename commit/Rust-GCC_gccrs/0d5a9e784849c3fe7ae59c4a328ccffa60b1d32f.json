{"sha": "0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1YTllNzg0ODQ5YzNmZTdhZTU5YzRhMzI4Y2NmZmE2MGIxZDMyZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-05-24T11:51:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-05-24T11:51:09Z"}, "message": "re PR tree-optimization/53465 (wrong code with -O1 -ftree-vrp)\n\n\tPR tree-optimization/53465\n\t* tree-vrp.c (extract_range_from_cond_expr): First copy_value_range\n\tvr0 into *vr, then vrp_meet that.\n\t(vrp_meet): If one vr type is VR_UNDEFINED, ensure the result doesn't\n\thave any equivalences.\n\t(vrp_visit_phi_node): Call copy_value_range instead of vrp_meet the\n\tfirst time.\n\n\t* gcc.c-torture/execute/pr53465.c: New test.\n\nFrom-SVN: r187827", "tree": {"sha": "472f2a2aa52fdca9e0ab2f7f9b21adaeeeb6d935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/472f2a2aa52fdca9e0ab2f7f9b21adaeeeb6d935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/comments", "author": null, "committer": null, "parents": [{"sha": "e7bcc691204350945d31fcb27b6d421cdf6d8453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7bcc691204350945d31fcb27b6d421cdf6d8453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7bcc691204350945d31fcb27b6d421cdf6d8453"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "aec62a07a0e75026038f04c6220125be0f42453f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "patch": "@@ -1,4 +1,14 @@\n-2012-05-24  Jim MacArthur<jim.macarthur@arm.com>\n+2012-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53465\n+\t* tree-vrp.c (extract_range_from_cond_expr): First copy_value_range\n+\tvr0 into *vr, then vrp_meet that.\n+\t(vrp_meet): If one vr type is VR_UNDEFINED, ensure the result doesn't\n+\thave any equivalences.\n+\t(vrp_visit_phi_node): Call copy_value_range instead of vrp_meet the\n+\tfirst time.\n+\n+2012-05-24  Jim MacArthur  <jim.macarthur@arm.com>\n \n \t* recog.c (reg_fits_class_p): Check both regno and regno + offset are\n \thard registers.\n@@ -2897,7 +2907,7 @@\n \tis enabled.\n \t(movdi_vfp_cortexa8): Likewise.\n \n-2012-04-30  Ian Bolton\t<ian.bolton@arm.com>\n+2012-04-30  Ian Bolton  <ian.bolton@arm.com>\n \t    Sameera Deshpande  <sameera.deshpande@arm.com>\n \t    Greta Yorsh\t <greta.yorsh@arm.com>\n "}, {"sha": "3ee4008b5d88b5c301e8ba1f6735ca50b7b4d644", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "patch": "@@ -1,3 +1,8 @@\n+2012-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53465\n+\t* gcc.c-torture/execute/pr53465.c: New test.\n+\n 2012-05-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51055"}, {"sha": "6a31719b8725f875c2de03c948fa0cb09dec2b18", "filename": "gcc/testsuite/gcc.c-torture/execute/pr53465.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr53465.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr53465.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr53465.c?ref=0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/53465 */\n+\n+extern void abort ();\n+\n+static const int a[] = { 1, 2 };\n+\n+void\n+foo (const int *x, int y)\n+{\n+  int i;\n+  int b = 0;\n+  int c;\n+  for (i = 0; i < y; i++)\n+    {\n+      int d = x[i];\n+      if (d == 0)\n+\tbreak;\n+      if (b && d <= c)\n+\tabort ();\n+      c = d;\n+      b = 1;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  foo (a, 2);\n+  return 0;\n+}"}, {"sha": "2c1bcad95079e41e8b3b7e8e1ee0e97fa4e67c6d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "patch": "@@ -3282,8 +3282,8 @@ extract_range_from_cond_expr (value_range_t *vr, gimple stmt)\n     set_value_range_to_varying (&vr1);\n \n   /* The resulting value range is the union of the operand ranges */\n-  vrp_meet (&vr0, &vr1);\n   copy_value_range (vr, &vr0);\n+  vrp_meet (vr, &vr1);\n }\n \n \n@@ -6888,13 +6888,17 @@ vrp_meet (value_range_t *vr0, value_range_t *vr1)\n {\n   if (vr0->type == VR_UNDEFINED)\n     {\n-      copy_value_range (vr0, vr1);\n+      /* Drop equivalences.  See PR53465.  */\n+      set_value_range (vr0, vr1->type, vr1->min, vr1->max, NULL);\n       return;\n     }\n \n   if (vr1->type == VR_UNDEFINED)\n     {\n-      /* Nothing to do.  VR0 already has the resulting range.  */\n+      /* VR0 already has the resulting range, just drop equivalences.\n+\t See PR53465.  */\n+      if (vr0->equiv)\n+\tbitmap_clear (vr0->equiv);\n       return;\n     }\n \n@@ -7036,6 +7040,7 @@ vrp_visit_phi_node (gimple phi)\n   tree lhs = PHI_RESULT (phi);\n   value_range_t *lhs_vr = get_value_range (lhs);\n   value_range_t vr_result = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n+  bool first = true;\n   int edges, old_edges;\n   struct loop *l;\n \n@@ -7092,7 +7097,11 @@ vrp_visit_phi_node (gimple phi)\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n-\t  vrp_meet (&vr_result, &vr_arg);\n+\t  if (first)\n+\t    copy_value_range (&vr_result, &vr_arg);\n+\t  else\n+\t    vrp_meet (&vr_result, &vr_arg);\n+\t  first = false;\n \n \t  if (vr_result.type == VR_VARYING)\n \t    break;"}]}