{"sha": "79977c82ff9ef0a79229a57277feac3cbcc17a83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5NzdjODJmZjllZjBhNzkyMjlhNTcyNzdmZWFjM2NiY2MxN2E4Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-01-30T12:41:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-01-30T12:41:13Z"}, "message": "re PR tree-optimization/89111 (wrong code at -O1 and above on x86_64-linux-gnu)\n\n2019-01-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/89111\n\t* tree-ssa-loop-im.c (gather_mem_refs_stmt): Restrict\n\tcanonicalization to appropriately sized access types.\n\n\t* gcc.dg/torture/pr89111.c: New testcase.\n\nFrom-SVN: r268388", "tree": {"sha": "689724d088ee83d8265fbd0cf2e7dce51105eeeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/689724d088ee83d8265fbd0cf2e7dce51105eeeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79977c82ff9ef0a79229a57277feac3cbcc17a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79977c82ff9ef0a79229a57277feac3cbcc17a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79977c82ff9ef0a79229a57277feac3cbcc17a83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79977c82ff9ef0a79229a57277feac3cbcc17a83/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c11f2693e3f55d7fbf37642c3e75d03a9e58013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c11f2693e3f55d7fbf37642c3e75d03a9e58013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c11f2693e3f55d7fbf37642c3e75d03a9e58013"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "4962f4735017ce003166e56f9afeffd832b8b802", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79977c82ff9ef0a79229a57277feac3cbcc17a83", "patch": "@@ -1,3 +1,9 @@\n+2019-01-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89111\n+\t* tree-ssa-loop-im.c (gather_mem_refs_stmt): Restrict\n+\tcanonicalization to appropriately sized access types.\n+\n 2019-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89105"}, {"sha": "3488fdd717fe506253797a4e0fb68fee6043691e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79977c82ff9ef0a79229a57277feac3cbcc17a83", "patch": "@@ -1,7 +1,11 @@\n+2019-01-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89111\n+\t* gcc.dg/torture/pr89111.c: New testcase.\n+\n 2019-01-30  Andrew Stubbs  <ams@codesourcery.com>\n \n \tPR testsuite/88920\n-\n \t* lib/target-supports.exp: Cache result.\n \n 2019-01-30  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "3f1d6d95bf56a36b31570663bccc2cdc877b0574", "filename": "gcc/testsuite/gcc.dg/torture/pr89111.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89111.c?ref=79977c82ff9ef0a79229a57277feac3cbcc17a83", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+struct __attribute__((packed)) A {  int b : 24; } c[243], f;\n+\n+int d, e, g, j;\n+\n+__attribute__((noipa)) int\n+foo (int x)\n+{\n+  if (x != 0)\n+    __builtin_abort ();\n+  return 2;\n+}\n+\n+int\n+main ()\n+{ \n+  struct A h = f;\n+  h.b = 0;\n+  while (e++ < 3)\n+    { \n+      while (d++ < 3)\n+\tc[46].b ^= 9890739;\n+      f = c[46] = h;\n+    }\n+  while (g++ < 9)\n+    j = foo (c[g * 9 + j].b);\n+  return 0;\n+}"}, {"sha": "631dd9059ae51cea0e5fa3985a98d757f02a9783", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79977c82ff9ef0a79229a57277feac3cbcc17a83/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=79977c82ff9ef0a79229a57277feac3cbcc17a83", "patch": "@@ -1472,6 +1472,11 @@ gather_mem_refs_stmt (struct loop *loop, gimple *stmt)\n \t  && aor.max_size.is_constant (&max_size)\n \t  && size == max_size\n \t  && (size % BITS_PER_UNIT) == 0\n+\t  /* We're canonicalizing to a MEM where TYPE_SIZE specifies the\n+\t     size.  Make sure this is consistent with the extraction.  */\n+\t  && poly_int_tree_p (TYPE_SIZE (TREE_TYPE (*mem)))\n+\t  && known_eq (wi::to_poly_offset (TYPE_SIZE (TREE_TYPE (*mem))),\n+\t\t       aor.size)\n \t  && (mem_base = get_addr_base_and_unit_offset (aor.ref, &mem_off)))\n \t{\n \t  hash = iterative_hash_expr (ao_ref_base (&aor), 0);"}]}