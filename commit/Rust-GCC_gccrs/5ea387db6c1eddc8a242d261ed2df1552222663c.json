{"sha": "5ea387db6c1eddc8a242d261ed2df1552222663c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVhMzg3ZGI2YzFlZGRjOGEyNDJkMjYxZWQyZGYxNTUyMjIyNjYzYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-23T13:15:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-23T13:15:12Z"}, "message": "libstdc++/77334 move assign RB trees of non-copyable types\n\n\tPR libstdc++/77334\n\t* include/bits/stl_tree.h (_Rb_tree::_M_move_assign): New functions.\n\t(_Rb_tree::operator=(_Rb_tree&&)): Dispatch to _M_move_assign.\n\t* testsuite/23_containers/map/77334.cc: New test.\n\nFrom-SVN: r239698", "tree": {"sha": "7fb0c286c829219a9df5322e0b6d9dff281bfe28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb0c286c829219a9df5322e0b6d9dff281bfe28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ea387db6c1eddc8a242d261ed2df1552222663c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea387db6c1eddc8a242d261ed2df1552222663c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea387db6c1eddc8a242d261ed2df1552222663c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea387db6c1eddc8a242d261ed2df1552222663c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d1c6b3e76b52656d266ffae2a16550086e6906f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1c6b3e76b52656d266ffae2a16550086e6906f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d1c6b3e76b52656d266ffae2a16550086e6906f"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "5e943b130d81d27a427bca6b08d42c02e9bea6ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea387db6c1eddc8a242d261ed2df1552222663c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea387db6c1eddc8a242d261ed2df1552222663c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ea387db6c1eddc8a242d261ed2df1552222663c", "patch": "@@ -1,5 +1,10 @@\n 2016-08-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/77334\n+\t* include/bits/stl_tree.h (_Rb_tree::_M_move_assign): New functions.\n+\t(_Rb_tree::operator=(_Rb_tree&&)): Dispatch to _M_move_assign.\n+\t* testsuite/23_containers/map/77334.cc: New test.\n+\n \t* doc/xml/manual/using.xml: Remove reference to -pthreads option.\n \t* doc/html/*: Regenerate.\n "}, {"sha": "25580e4cc5c6eba6a92a3cee8f873c0a29fb778c", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea387db6c1eddc8a242d261ed2df1552222663c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea387db6c1eddc8a242d261ed2df1552222663c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=5ea387db6c1eddc8a242d261ed2df1552222663c", "patch": "@@ -1264,6 +1264,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // which might result in a copy not a move.\n       void\n       _M_move_data(_Rb_tree&, std::false_type);\n+\n+      // Move assignment from container with equal allocator.\n+      void\n+      _M_move_assign(_Rb_tree&, std::true_type);\n+\n+      // Move assignment from container with possibly non-equal allocator,\n+      // which might result in a copy not a move.\n+      void\n+      _M_move_assign(_Rb_tree&, std::false_type);\n #endif\n     };\n \n@@ -1379,24 +1388,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&\n+    inline void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    operator=(_Rb_tree&& __x)\n-    noexcept(_Alloc_traits::_S_nothrow_move()\n-\t     && is_nothrow_move_assignable<_Compare>::value)\n+    _M_move_assign(_Rb_tree& __x, true_type)\n     {\n-      _M_impl._M_key_compare = __x._M_impl._M_key_compare;\n-      if (_Alloc_traits::_S_propagate_on_move_assign()\n-\t  || _Alloc_traits::_S_always_equal()\n-\t  || _M_get_Node_allocator() == __x._M_get_Node_allocator())\n-\t{\n-\t  clear();\n-\t  if (__x._M_root() != nullptr)\n-\t    _M_move_data(__x, std::true_type());\n-\t  std::__alloc_on_move(_M_get_Node_allocator(),\n-\t\t\t       __x._M_get_Node_allocator());\n-\t  return *this;\n-\t}\n+      clear();\n+      if (__x._M_root() != nullptr)\n+\t_M_move_data(__x, std::true_type());\n+      std::__alloc_on_move(_M_get_Node_allocator(),\n+\t\t\t   __x._M_get_Node_allocator());\n+    }\n+\n+  template<typename _Key, typename _Val, typename _KeyOfValue,\n+           typename _Compare, typename _Alloc>\n+    void\n+    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n+    _M_move_assign(_Rb_tree& __x, false_type)\n+    {\n+      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())\n+\treturn _M_move_assign(__x, true_type{});\n \n       // Try to move each node reusing existing nodes and copying __x nodes\n       // structure.\n@@ -1416,6 +1426,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_impl._M_node_count = __x._M_impl._M_node_count;\n \t  __x.clear();\n \t}\n+    }\n+\n+  template<typename _Key, typename _Val, typename _KeyOfValue,\n+           typename _Compare, typename _Alloc>\n+    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&\n+    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n+    operator=(_Rb_tree&& __x)\n+    noexcept(_Alloc_traits::_S_nothrow_move()\n+\t     && is_nothrow_move_assignable<_Compare>::value)\n+    {\n+      _M_impl._M_key_compare = __x._M_impl._M_key_compare;\n+      constexpr bool __move_storage =\n+\t  _Alloc_traits::_S_propagate_on_move_assign()\n+\t  || _Alloc_traits::_S_always_equal();\n+      _M_move_assign(__x, __bool_constant<__move_storage>());\n       return *this;\n     }\n "}, {"sha": "917896bed2bb994006a40138bc92e08397516270", "filename": "libstdc++-v3/testsuite/23_containers/map/77334.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea387db6c1eddc8a242d261ed2df1552222663c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F77334.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea387db6c1eddc8a242d261ed2df1552222663c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F77334.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F77334.cc?ref=5ea387db6c1eddc8a242d261ed2df1552222663c", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <map>\n+\n+struct A { A(A&&) = delete; };\n+\n+void test01()\n+{\n+   std::map<int, A> m1, m2;\n+   m2 = std::move(m1);\n+}"}]}