{"sha": "b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkYTlmZDQyZGNhNmVmYmJhMzRlZmE3ODUzOWJmYTE0YjNmNGUzOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-10-27T20:09:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-10-27T20:09:07Z"}, "message": "re PR c++/41819 (ICE with try/catch and -fno-exceptions)\n\n        PR c++/41819\n        * tree-eh.c (eh_region_may_contain_throw_map): Rename from\n        eh_region_may_contain_throw; update users.\n        (eh_region_may_contain_throw): New function.\n        (lower_catch): Check flag_exceptions before creating exception region.\n        (lower_eh_filter, lower_eh_must_not_throw): Likewise.\n        (lower_cleanup): Tidy existing flag_exceptions check to match.\n\nFrom-SVN: r153615", "tree": {"sha": "3b83609dda542261a93defac50d33dae41699308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b83609dda542261a93defac50d33dae41699308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7da9fd42dca6efbba34efa78539bfa14b3f4e39/comments", "author": null, "committer": null, "parents": [{"sha": "df66d1652823a218e63ed72cc590e707b312f804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df66d1652823a218e63ed72cc590e707b312f804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df66d1652823a218e63ed72cc590e707b312f804"}], "stats": {"total": 131, "additions": 84, "deletions": 47}, "files": [{"sha": "1dbcf18f1562e4948647c4762d6c9bb1f7246c12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7da9fd42dca6efbba34efa78539bfa14b3f4e39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7da9fd42dca6efbba34efa78539bfa14b3f4e39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "patch": "@@ -1,3 +1,13 @@\n+2009-10-27  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/41819\n+\t* tree-eh.c (eh_region_may_contain_throw_map): Rename from\n+\teh_region_may_contain_throw; update users.\n+\t(eh_region_may_contain_throw): New function.\n+\t(lower_catch): Check flag_exceptions before creating exception region.\n+\t(lower_eh_filter, lower_eh_must_not_throw): Likewise.\n+\t(lower_cleanup): Tidy existing flag_exceptions check to match.\n+\n 2009-10-27  Kai Tietz <kai.tietz@onevision.com>\n \n \tPR/41799"}, {"sha": "07894a2995381354544ec1c8d96a5c77d0120f07", "filename": "gcc/testsuite/g++.dg/eh/pr41819.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7da9fd42dca6efbba34efa78539bfa14b3f4e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr41819.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7da9fd42dca6efbba34efa78539bfa14b3f4e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr41819.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr41819.C?ref=b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-options \"-fno-exceptions\" }\n+\n+struct S { ~S(); };\n+extern void bar();\n+\n+void f0()\n+{\n+  S s;\n+  bar();\n+}\n+\n+void f1()\n+{\n+  try {} catch (...) {}\t\t// { dg-error \"\" }\n+}\n+\n+void f2() throw(int)\n+{\n+  bar();\n+}"}, {"sha": "c5c7f7146c8191c8a35c462760edc5f80179b1ea", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 53, "deletions": 47, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7da9fd42dca6efbba34efa78539bfa14b3f4e39/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7da9fd42dca6efbba34efa78539bfa14b3f4e39/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "patch": "@@ -340,7 +340,7 @@ static gimple_seq eh_seq;\n \n /* Record whether an EH region contains something that can throw,\n    indexed by EH region number.  */\n-static bitmap eh_region_may_contain_throw;\n+static bitmap eh_region_may_contain_throw_map;\n \n /* The GOTO_QUEUE is is an array of GIMPLE_GOTO and GIMPLE_RETURN\n    statements that are seen to escape this GIMPLE_TRY_FINALLY node.\n@@ -863,15 +863,24 @@ emit_eh_dispatch (gimple_seq *seq, eh_region region)\n static void\n note_eh_region_may_contain_throw (eh_region region)\n {\n-  while (!bitmap_bit_p (eh_region_may_contain_throw, region->index))\n+  while (!bitmap_bit_p (eh_region_may_contain_throw_map, region->index))\n     {\n-      bitmap_set_bit (eh_region_may_contain_throw, region->index);\n+      bitmap_set_bit (eh_region_may_contain_throw_map, region->index);\n       region = region->outer;\n       if (region == NULL)\n \tbreak;\n     }\n }\n \n+/* Check if REGION has been marked as containing a throw.  If REGION is\n+   NULL, this predicate is false.  */\n+\n+static inline bool\n+eh_region_may_contain_throw (eh_region r)\n+{\n+  return r && bitmap_bit_p (eh_region_may_contain_throw_map, r->index);\n+}\n+\n /* We want to transform\n \ttry { body; } catch { stuff; }\n    to\n@@ -1559,8 +1568,7 @@ lower_try_finally (struct leh_state *state, gimple tp)\n \n   /* Determine if any exceptions are possible within the try block.  */\n   if (using_eh_for_cleanups_p)\n-    this_tf.may_throw = bitmap_bit_p (eh_region_may_contain_throw,\n-\t\t\t\t      this_tf.region->index);\n+    this_tf.may_throw = eh_region_may_contain_throw (this_tf.region);\n   if (this_tf.may_throw)\n     honor_protect_cleanup_actions (state, &this_state, &this_tf);\n \n@@ -1618,22 +1626,23 @@ lower_try_finally (struct leh_state *state, gimple tp)\n static gimple_seq\n lower_catch (struct leh_state *state, gimple tp)\n {\n-  eh_region try_region;\n-  struct leh_state this_state;\n+  eh_region try_region = NULL;\n+  struct leh_state this_state = *state;\n   gimple_stmt_iterator gsi;\n   tree out_label;\n   gimple_seq new_seq;\n   gimple x;\n   location_t try_catch_loc = gimple_location (tp);\n \n-  try_region = gen_eh_region_try (state->cur_region);\n-\n-  this_state = *state;\n-  this_state.cur_region = try_region;\n+  if (flag_exceptions)\n+    {\n+      try_region = gen_eh_region_try (state->cur_region);\n+      this_state.cur_region = try_region;\n+    }\n \n   lower_eh_constructs_1 (&this_state, gimple_try_eval (tp));\n \n-  if (!bitmap_bit_p (eh_region_may_contain_throw, try_region->index))\n+  if (!eh_region_may_contain_throw (try_region))\n     return gimple_try_eval (tp);\n \n   new_seq = NULL;\n@@ -1686,21 +1695,23 @@ lower_catch (struct leh_state *state, gimple tp)\n static gimple_seq\n lower_eh_filter (struct leh_state *state, gimple tp)\n {\n-  struct leh_state this_state;\n-  eh_region this_region;\n+  struct leh_state this_state = *state;\n+  eh_region this_region = NULL;\n   gimple inner, x;\n   gimple_seq new_seq;\n \n   inner = gimple_seq_first_stmt (gimple_try_cleanup (tp));\n \n-  this_region = gen_eh_region_allowed (state->cur_region,\n-\t\t\t\t       gimple_eh_filter_types (inner));\n-  this_state = *state;\n-  this_state.cur_region = this_region;\n+  if (flag_exceptions)\n+    {\n+      this_region = gen_eh_region_allowed (state->cur_region,\n+\t\t\t\t           gimple_eh_filter_types (inner));\n+      this_state.cur_region = this_region;\n+    }\n \n   lower_eh_constructs_1 (&this_state, gimple_try_eval (tp));\n \n-  if (!bitmap_bit_p (eh_region_may_contain_throw, this_region->index))\n+  if (!eh_region_may_contain_throw (this_region))\n     return gimple_try_eval (tp);\n \n   new_seq = NULL;\n@@ -1729,24 +1740,25 @@ lower_eh_filter (struct leh_state *state, gimple tp)\n static gimple_seq\n lower_eh_must_not_throw (struct leh_state *state, gimple tp)\n {\n-  struct leh_state this_state;\n-  eh_region this_region;\n-  gimple inner;\n+  struct leh_state this_state = *state;\n \n-  inner = gimple_seq_first_stmt (gimple_try_cleanup (tp));\n+  if (flag_exceptions)\n+    {\n+      gimple inner = gimple_seq_first_stmt (gimple_try_cleanup (tp));\n+      eh_region this_region;\n \n-  this_region = gen_eh_region_must_not_throw (state->cur_region);\n-  this_region->u.must_not_throw.failure_decl\n-    = gimple_eh_must_not_throw_fndecl (inner);\n-  this_region->u.must_not_throw.failure_loc = gimple_location (tp);\n+      this_region = gen_eh_region_must_not_throw (state->cur_region);\n+      this_region->u.must_not_throw.failure_decl\n+\t= gimple_eh_must_not_throw_fndecl (inner);\n+      this_region->u.must_not_throw.failure_loc = gimple_location (tp);\n \n-  /* In order to get mangling applied to this decl, we must mark it\n-     used now.  Otherwise, pass_ipa_free_lang_data won't think it\n-     needs to happen.  */\n-  TREE_USED (this_region->u.must_not_throw.failure_decl) = 1;\n+      /* In order to get mangling applied to this decl, we must mark it\n+\t used now.  Otherwise, pass_ipa_free_lang_data won't think it\n+\t needs to happen.  */\n+      TREE_USED (this_region->u.must_not_throw.failure_decl) = 1;\n \n-  this_state = *state;\n-  this_state.cur_region = this_region;\n+      this_state.cur_region = this_region;\n+    }\n \n   lower_eh_constructs_1 (&this_state, gimple_try_eval (tp));\n \n@@ -1759,26 +1771,20 @@ lower_eh_must_not_throw (struct leh_state *state, gimple tp)\n static gimple_seq\n lower_cleanup (struct leh_state *state, gimple tp)\n {\n-  struct leh_state this_state;\n-  eh_region this_region;\n+  struct leh_state this_state = *state;\n+  eh_region this_region = NULL;\n   struct leh_tf_state fake_tf;\n   gimple_seq result;\n \n-  /* If not using eh, then exception-only cleanups are no-ops.  */\n-  if (!flag_exceptions)\n+  if (flag_exceptions)\n     {\n-      result = gimple_try_eval (tp);\n-      lower_eh_constructs_1 (state, result);\n-      return result;\n+      this_region = gen_eh_region_cleanup (state->cur_region);\n+      this_state.cur_region = this_region;\n     }\n \n-  this_region = gen_eh_region_cleanup (state->cur_region);\n-  this_state = *state;\n-  this_state.cur_region = this_region;\n-\n   lower_eh_constructs_1 (&this_state, gimple_try_eval (tp));\n \n-  if (!bitmap_bit_p (eh_region_may_contain_throw, this_region->index))\n+  if (!eh_region_may_contain_throw (this_region))\n     return gimple_try_eval (tp);\n \n   /* Build enough of a try-finally state so that we can reuse\n@@ -1979,7 +1985,7 @@ lower_eh_constructs (void)\n     return 0;\n \n   finally_tree = htab_create (31, struct_ptr_hash, struct_ptr_eq, free);\n-  eh_region_may_contain_throw = BITMAP_ALLOC (NULL);\n+  eh_region_may_contain_throw_map = BITMAP_ALLOC (NULL);\n   memset (&null_state, 0, sizeof (null_state));\n \n   collect_finally_tree_1 (bodyp, NULL);\n@@ -1996,7 +2002,7 @@ lower_eh_constructs (void)\n   gcc_assert (bodyp == gimple_body (current_function_decl));\n \n   htab_delete (finally_tree);\n-  BITMAP_FREE (eh_region_may_contain_throw);\n+  BITMAP_FREE (eh_region_may_contain_throw_map);\n   eh_seq = NULL;\n \n   /* If this function needs a language specific EH personality routine"}]}