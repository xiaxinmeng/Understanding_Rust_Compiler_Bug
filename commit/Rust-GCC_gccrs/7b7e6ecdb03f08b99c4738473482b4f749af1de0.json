{"sha": "7b7e6ecdb03f08b99c4738473482b4f749af1de0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3ZTZlY2RiMDNmMDhiOTljNDczODQ3MzQ4MmI0Zjc0OWFmMWRlMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-12-13T21:49:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-12-13T21:49:09Z"}, "message": "re PR middle-end/33088 (spurious exceptions with -ffloat-store)\n\n\tPR middle-end/33088\n\t* gimplify.c (gimplify_modify_expr_complex_part): Add note to comment.\n\t* tree-complex.c (init_dont_simulate_again): Return true if there are\n\tuninitialized loads generated by gimplify_modify_expr_complex_part.\n\t* tree-gimple.c (is_gimple_reg_type): Return false for complex types\n\tif not optimizing.\n\t* tree-ssa.c (ssa_undefined_value_p): New predicate extracted from...\n\t(warn_uninit): ...here.  Use ssa_undefined_value_p.\n\t* tree-ssa-pre.c (is_undefined_value): Delete.\n\t(phi_translate_1): Use ssa_undefined_value_p.\n\t(add_to_exp_gen): Likewise.\n\t(make_values_for_stmt): Likewise.\n\t* tree-flow.h (ssa_undefined_value_p): Declare.\n\nFrom-SVN: r130917", "tree": {"sha": "1a2db453ef003669b76c5fe7b06ef0c746c75775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2db453ef003669b76c5fe7b06ef0c746c75775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b7e6ecdb03f08b99c4738473482b4f749af1de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7e6ecdb03f08b99c4738473482b4f749af1de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7e6ecdb03f08b99c4738473482b4f749af1de0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7e6ecdb03f08b99c4738473482b4f749af1de0/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e49f4f07da9c797eb0efadb36161b36cdc7fef47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49f4f07da9c797eb0efadb36161b36cdc7fef47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49f4f07da9c797eb0efadb36161b36cdc7fef47"}], "stats": {"total": 169, "additions": 133, "deletions": 36}, "files": [{"sha": "f187e61d11fa8293cc805a1e27a6c898ed2ad369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -1,3 +1,19 @@\n+2007-12-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/33088\n+\t* gimplify.c (gimplify_modify_expr_complex_part): Add note to comment.\n+\t* tree-complex.c (init_dont_simulate_again): Return true if there are\n+\tuninitialized loads generated by gimplify_modify_expr_complex_part.\n+\t* tree-gimple.c (is_gimple_reg_type): Return false for complex types\n+\tif not optimizing.\n+\t* tree-ssa.c (ssa_undefined_value_p): New predicate extracted from...\n+\t(warn_uninit): ...here.  Use ssa_undefined_value_p.\n+\t* tree-ssa-pre.c (is_undefined_value): Delete.\n+\t(phi_translate_1): Use ssa_undefined_value_p.\n+\t(add_to_exp_gen): Likewise.\n+\t(make_values_for_stmt): Likewise.\n+\t* tree-flow.h (ssa_undefined_value_p): Declare.\n+\n 2007-12-13  Andrew Pinski  <pinskia@gmail.com>\n \t    David Daney  <ddaney@avtrex.com>\n "}, {"sha": "a58738e34ef08f1a9849c63baf2359b574419fcf", "filename": "gcc/gimplify.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -3728,7 +3728,15 @@ tree_to_gimple_tuple (tree *tp)\n \n /* Promote partial stores to COMPLEX variables to total stores.  *EXPR_P is\n    a MODIFY_EXPR with a lhs of a REAL/IMAGPART_EXPR of a variable with\n-   DECL_GIMPLE_REG_P set.  */\n+   DECL_GIMPLE_REG_P set.\n+\n+   IMPORTANT NOTE: This promotion is performed by introducing a load of the\n+   other, unmodified part of the complex object just before the total store.\n+   As a consequence, if the object is still uninitialized, an undefined value\n+   will be loaded into a register, which may result in a spurious exception\n+   if the register is floating-point and the value happens to be a signaling\n+   NaN for example.  Then the fully-fledged complex operations lowering pass\n+   followed by a DCE pass are necessary in order to fix things up.  */\n \n static enum gimplify_status\n gimplify_modify_expr_complex_part (tree *expr_p, tree *pre_p, bool want_value)\n@@ -6462,7 +6470,7 @@ gimplify_function_tree (tree fndecl)\n \n   ret = DECL_RESULT (fndecl);\n   if ((TREE_CODE (TREE_TYPE (ret)) == COMPLEX_TYPE\n-\t   || TREE_CODE (TREE_TYPE (ret)) == VECTOR_TYPE)\n+       || TREE_CODE (TREE_TYPE (ret)) == VECTOR_TYPE)\n       && !needs_to_live_in_memory (ret))\n     DECL_GIMPLE_REG_P (ret) = 1;\n "}, {"sha": "59fd225289c3a5569d6781f52d2c1e0eb23a51c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -1,3 +1,8 @@\n+2007-12-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/uninit-13.c: UnXFAIL.\n+\t* gcc.dg/complex-5.c: New testcase.\n+\n 2007-12-13  Olga Golovanevsky  <olga@il.ibm.com>\n \n \t* gcc.dg/struct/struct-reorg.exp: Replace "}, {"sha": "41c4ba0b909771d96ca312e21f69eed0dc343fd4", "filename": "gcc/testsuite/gcc.dg/complex-5.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftestsuite%2Fgcc.dg%2Fcomplex-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftestsuite%2Fgcc.dg%2Fcomplex-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcomplex-5.c?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -0,0 +1,55 @@\n+/* PR middle-end/33088 */\n+/* Origin: Joseph S. Myers <jsm28@gcc.gnu.org> */\n+\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-std=c99 -O -ffloat-store -lm\" } */\n+\n+#include <fenv.h>\n+#include <stdlib.h>\n+\n+volatile int x[1024];\n+\n+void __attribute__((noinline))\n+fill_stack (void)\n+{\n+  volatile int y[1024];\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    y[i] = 0x7ff00000;\n+  for (i = 0; i < 1024; i++)\n+    x[i] = y[i];\n+}\n+\n+volatile _Complex double vc;\n+\n+void __attribute__((noinline))\n+use_complex (_Complex double c)\n+{\n+  vc = c;\n+}\n+\n+double t0, t1, t2, t3;\n+\n+#define USE_COMPLEX(X, R, C) \\\n+  do { __real__ X = R; __imag__ X = C; use_complex (X); } while (0)\n+\n+void __attribute__((noinline))\n+use_stack (void)\n+{\n+  _Complex double a, b, c, d;\n+  USE_COMPLEX (a, t0, t1);\n+  USE_COMPLEX (b, t1, t2);\n+  USE_COMPLEX (c, t2, t3);\n+  USE_COMPLEX (d, t3, t0);\n+}\n+\n+int\n+main (void)\n+{\n+  fill_stack ();\n+  feclearexcept (FE_INVALID);\n+  use_stack ();\n+  if (fetestexcept (FE_INVALID))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "631e8de3ada6d6f49db5df96e3bfe976c3bcdc96", "filename": "gcc/testsuite/gcc.dg/uninit-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-13.c?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -5,6 +5,6 @@ typedef _Complex float C;\n C foo()\n {\n   C f;\n-  __imag__ f = 0;\n-  return f;\t\t/* { dg-warning \"\" \"uninit\" { xfail *-*-* } } */\n+  __imag__ f = 0;\t/* { dg-warning \"is used\" \"unconditional\" } */\n+  return f;\n }"}, {"sha": "a1964ee6813a90544e120b6ea63479b66ac7ce5a", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -246,6 +246,17 @@ init_dont_simulate_again (void)\n \t\t  saw_a_complex_op = true;\n \t\tbreak;\n \n+\t      case REALPART_EXPR:\n+\t      case IMAGPART_EXPR:\n+\t\t/* The total store transformation performed during\n+\t\t   gimplification creates such uninitialized loads\n+\t\t   and we need to lower the statement to be able\n+\t\t   to fix things up.  */\n+\t\tif (TREE_CODE (TREE_OPERAND (rhs, 0)) == SSA_NAME\n+\t\t    && ssa_undefined_value_p (TREE_OPERAND (rhs, 0)))\n+\t\t  saw_a_complex_op = true;\n+\t\tbreak;\n+\n \t      default:\n \t\tbreak;\n \t      }"}, {"sha": "6ab91a1793fe36cfaeaac961c855ee122149aa62", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -884,6 +884,7 @@ extern void verify_ssa (bool);\n extern void delete_tree_ssa (void);\n extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *, bool);\n extern bool stmt_references_memory_p (tree);\n+extern bool ssa_undefined_value_p (tree);\n \n /* In tree-into-ssa.c  */\n void update_ssa (unsigned);"}, {"sha": "d1e47f65edab38c19c56f9799fc6d19524954bdd", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -285,7 +285,13 @@ is_gimple_id (tree t)\n bool\n is_gimple_reg_type (tree type)\n {\n-  return !AGGREGATE_TYPE_P (type);\n+  /* In addition to aggregate types, we also exclude complex types if not\n+     optimizing because they can be subject to partial stores in GNU C by\n+     means of the __real__ and __imag__ operators and we cannot promote\n+     them to total stores (see gimplify_modify_expr_complex_part).  */\n+  return !(AGGREGATE_TYPE_P (type)\n+\t   || (TREE_CODE (type) == COMPLEX_TYPE && !optimize));\n+\n }\n \n /* Return true if T is a non-aggregate register variable.  */\n@@ -328,8 +334,8 @@ is_gimple_reg (tree t)\n   if (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t))\n     return false;\n \n-  /* Complex values must have been put into ssa form.  That is, no \n-     assignments to the individual components.  */\n+  /* Complex and vector values must have been put into SSA-like form.\n+     That is, no assignments to the individual components.  */\n   if (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n       || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n     return DECL_GIMPLE_REG_P (t);"}, {"sha": "69dbfb2b9a3beca9bd35bb36bb13295d68e5fc1e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -383,7 +383,6 @@ static void bitmap_set_copy (bitmap_set_t, bitmap_set_t);\n static bool bitmap_set_contains_value (bitmap_set_t, tree);\n static void bitmap_insert_into_set (bitmap_set_t, tree);\n static bitmap_set_t bitmap_set_new (void);\n-static bool is_undefined_value (tree);\n static tree create_expression_by_pieces (basic_block, tree, tree);\n static tree find_or_generate_expression (basic_block, tree, tree);\n \n@@ -1328,7 +1327,7 @@ phi_translate_1 (tree expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    if (is_gimple_min_invariant (def))\n \t      return def;\n \n-\t    if (is_undefined_value (def))\n+\t    if (TREE_CODE (def) == SSA_NAME && ssa_undefined_value_p (def))\n \t      return NULL;\n \n \t    val = get_value_handle (def);\n@@ -2889,18 +2888,6 @@ insert (void)\n }\n \n \n-/* Return true if VAR is an SSA variable with no defining statement in\n-   this procedure, *AND* isn't a live-on-entry parameter.  */\n-\n-static bool\n-is_undefined_value (tree expr)\n-{\n-  return (TREE_CODE (expr) == SSA_NAME\n-\t  && IS_EMPTY_STMT (SSA_NAME_DEF_STMT (expr))\n-\t  /* PARM_DECLs and hard registers are always defined.  */\n-\t  && TREE_CODE (SSA_NAME_VAR (expr)) != PARM_DECL);\n-}\n-\n /* Add OP to EXP_GEN (block), and possibly to the maximal set if it is\n    not defined by a phi node.\n    PHI nodes can't go in the maximal sets because they are not in\n@@ -2912,7 +2899,7 @@ add_to_exp_gen (basic_block block, tree op)\n {\n   if (!in_fre)\n     {\n-      if (TREE_CODE (op) == SSA_NAME && is_undefined_value (op))\n+      if (TREE_CODE (op) == SSA_NAME && ssa_undefined_value_p (op))\n \treturn;\n       bitmap_value_insert_into_set (EXP_GEN (block), op);\n       if (TREE_CODE (op) != SSA_NAME\n@@ -3415,7 +3402,7 @@ make_values_for_stmt (tree stmt, basic_block block)\n \t\t       AVAIL_OUT (block));\n \t}\n       /* None of the rest of these can be PRE'd.  */\n-      if (TREE_CODE (rhs) == SSA_NAME && !is_undefined_value (rhs))\n+      if (TREE_CODE (rhs) == SSA_NAME && !ssa_undefined_value_p (rhs))\n \tadd_to_exp_gen (block, rhs);\n       return true;\n     }"}, {"sha": "6c06df094b175c70d61e33a26f525e526ceb5958", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7e6ecdb03f08b99c4738473482b4f749af1de0/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=7b7e6ecdb03f08b99c4738473482b4f749af1de0", "patch": "@@ -1228,9 +1228,28 @@ walk_use_def_chains (tree var, walk_use_def_chains_fn fn, void *data,\n }\n \n \f\n+/* Return true if T, an SSA_NAME, has an undefined value.  */\n+\n+bool\n+ssa_undefined_value_p (tree t)\n+{\n+  tree var = SSA_NAME_VAR (t);\n+\n+  /* Parameters get their initial value from the function entry.  */\n+  if (TREE_CODE (var) == PARM_DECL)\n+    return false;\n+\n+  /* Hard register variables get their initial value from the ether.  */\n+  if (TREE_CODE (var) == VAR_DECL && DECL_HARD_REGISTER (var))\n+    return false;\n+\n+  /* The value is undefined iff its definition statement is empty.  */\n+  return IS_EMPTY_STMT (SSA_NAME_DEF_STMT (t));\n+}\n+\n /* Emit warnings for uninitialized variables.  This is done in two passes.\n \n-   The first pass notices real uses of SSA names with default definitions.\n+   The first pass notices real uses of SSA names with undefined values.\n    Such uses are unconditionally uninitialized, and we can be certain that\n    such a use is a mistake.  This pass is run before most optimizations,\n    so that we catch as many as we can.\n@@ -1250,22 +1269,11 @@ static void\n warn_uninit (tree t, const char *gmsgid, void *data)\n {\n   tree var = SSA_NAME_VAR (t);\n-  tree def = SSA_NAME_DEF_STMT (t);\n   tree context = (tree) data;\n   location_t *locus;\n   expanded_location xloc, floc;\n \n-  /* Default uses (indicated by an empty definition statement),\n-     are uninitialized.  */\n-  if (!IS_EMPTY_STMT (def))\n-    return;\n-\n-  /* Except for PARMs of course, which are always initialized.  */\n-  if (TREE_CODE (var) == PARM_DECL)\n-    return;\n-\n-  /* Hard register variables get their initial value from the ether.  */\n-  if (TREE_CODE (var) == VAR_DECL && DECL_HARD_REGISTER (var))\n+  if (!ssa_undefined_value_p (t))\n     return;\n \n   /* TREE_NO_WARNING either means we already warned, or the front end"}]}