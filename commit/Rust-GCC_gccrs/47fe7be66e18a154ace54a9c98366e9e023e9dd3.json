{"sha": "47fe7be66e18a154ace54a9c98366e9e023e9dd3", "node_id": "C_kwDOANBUbNoAKDQ3ZmU3YmU2NmUxOGExNTRhY2U1NGE5Yzk4MzY2ZTllMDIzZTlkZDM", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-12-01T10:46:46Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-12-01T10:56:37Z"}, "message": "d: Update documentation of new D language options.\n\nAdds documentation for the following:\n\n    - New switch that controls what code is generated on a contract\n      failure (throw or abort).\n    - New switch that controls mangling of D types in `extern(C++)`\n      code, as well as setting the compile-time value of\n      `__traits(getTargetInfo \"cppStd\")`\n    - New switches that generate C++ headers from D source files.\n    - New switch to save expanded mixins to a file.\n    - New switches that now distinguish between D language changes that\n      are either (a) an experimental feature or an upcoming breaking\n      change, (b) a warning or help on an upcoming change, or (c) revert\n      of a change for users who don't want to deal with the breaking\n      change for now.\n\ngcc/d/ChangeLog:\n\n\t* gdc.texi (Runtime Options): Document -fcheckaction=, -fextern-std=,\n\t-fpreview=, -frevert=.\n\t(Code Generation): Document -fdump-c++-spec=, -fdump-c++-spec-verbose,\n\t-fsave-mixins=.\n\t(Warnings): Update list of supported -ftransitions=.", "tree": {"sha": "c2c48ed89a7e1a624513a7b249797527bdad86cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c48ed89a7e1a624513a7b249797527bdad86cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47fe7be66e18a154ace54a9c98366e9e023e9dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47fe7be66e18a154ace54a9c98366e9e023e9dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47fe7be66e18a154ace54a9c98366e9e023e9dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47fe7be66e18a154ace54a9c98366e9e023e9dd3/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a7daa31a31922bbe44a878cd0313c048a02130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a7daa31a31922bbe44a878cd0313c048a02130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a7daa31a31922bbe44a878cd0313c048a02130"}], "stats": {"total": 114, "additions": 109, "deletions": 5}, "files": [{"sha": "c98eb1f45d958c7df11ccbb53c1d9048c0665181", "filename": "gcc/d/gdc.texi", "status": "modified", "additions": 109, "deletions": 5, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47fe7be66e18a154ace54a9c98366e9e023e9dd3/gcc%2Fd%2Fgdc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47fe7be66e18a154ace54a9c98366e9e023e9dd3/gcc%2Fd%2Fgdc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fgdc.texi?ref=47fe7be66e18a154ace54a9c98366e9e023e9dd3", "patch": "@@ -216,6 +216,20 @@ Don't recognize built-in functions unless they begin with the prefix\n @samp{__builtin_}.  By default, the compiler will recognize when a\n function in the @code{core.stdc} package is a built-in function.\n \n+@item -fcheckaction=@var{value}\n+@cindex @option{-fcheckaction}\n+This option controls what code is generated on an assertion, bounds check, or\n+final switch failure.  The following values are supported:\n+\n+@table @samp\n+@item context\n+Throw an @code{AssertError} with extra context information.\n+@item halt\n+Halt the program execution.\n+@item throw\n+Throw an @code{AssertError} (the default).\n+@end table\n+\n @item -fdebug\n @item -fdebug=@var{value}\n @cindex @option{-fdebug}\n@@ -245,6 +259,25 @@ This is equivalent to compiling with the following options:\n gdc -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti\n @end example\n \n+@item -fextern-std=@var{standard}\n+@cindex @option{-fextern-std}\n+Sets the C++ name mangling compatibility to the version identified by\n+@var{standard}.  The following values are supported:\n+\n+@table @samp\n+@item c++98\n+@item c++03\n+Sets @code{__traits(getTargetInfo \"cppStd\")} to @code{199711}.\n+@item c++11\n+Sets @code{__traits(getTargetInfo \"cppStd\")} to @code{201103}.\n+@item c++14\n+Sets @code{__traits(getTargetInfo \"cppStd\")} to @code{201402}.\n+@item c++17\n+Sets @code{__traits(getTargetInfo \"cppStd\")} to @code{201703}.\n+@item c++20\n+Sets @code{__traits(getTargetInfo \"cppStd\")} to @code{202002}.\n+@end table\n+\n @item -fno-invariants\n @cindex @option{-finvariants}\n @cindex @option{-fno-invariants}\n@@ -276,6 +309,48 @@ Turns off code generation for postcondition @code{out} contracts.\n @cindex @option{-fno-preconditions}\n Turns off code generation for precondition @code{in} contracts.\n \n+@item -fpreview=@var{id}\n+@cindex @option{-fpreview}\n+Turns on an upcoming D language change identified by @var{id}.  The following\n+values are supported:\n+\n+@table @samp\n+@item all\n+Turns on all upcoming D language features.\n+@item dip1000\n+Implements @uref{http://wiki.dlang.org/DIP1000} (Scoped pointers).\n+@item dip1008\n+Implements @uref{http://wiki.dlang.org/DIP1008} (Allow exceptions in\n+@code{@@nogc} code).\n+@item dip1021\n+Implements @uref{http://wiki.dlang.org/DIP1021} (Mutable function arguments).\n+@item dip25\n+Implements @uref{http://wiki.dlang.org/DIP25} (Sealed references).\n+@item dtorfields\n+Turns on generation for destructing fields of partially constructed objects.\n+@item fieldwise\n+Turns on generation of struct equality to use field-wise comparisons.\n+@item fixaliasthis\n+Implements new lookup rules that check the current scope for @code{alias this}\n+before searching in upper scopes.\n+@item in\n+Implements @code{in} parameters to mean @code{scope const [ref]} and accepts\n+rvalues.\n+@item inclusiveincontracts\n+Implements @code{in} contracts of overridden methods to be a superset of parent\n+contract.\n+@item intpromote\n+Implements C-style integral promotion for unary @code{+}, @code{-} and @code{~}\n+expressions.\n+@item nosharedaccess\n+Turns off and disallows all access to shared memory objects.\n+@item rvaluerefparam\n+Implements rvalue arguments to @code{ref} parameters.\n+@item shortenedmethods\n+Implements use of @code{=>} for methods and top-level functions in addition to\n+lambdas.\n+@end table\n+\n @item -frelease\n @cindex @option{-frelease}\n @cindex @option{-fno-release}\n@@ -291,6 +366,22 @@ gdc -fno-assert -fbounds-check=safe -fno-invariants \\\n     -fno-postconditions -fno-preconditions -fno-switch-errors\n @end example\n \n+@item -frevert=\n+@cindex @option{-frevert}\n+Turns off a D language feature identified by @var{id}.  The following values\n+are supported:\n+\n+@table @samp\n+@item all\n+Turns off all revertable D language features.\n+@item dip25\n+Reverts @uref{http://wiki.dlang.org/DIP25} (Sealed references).\n+@item dtorfields\n+Turns off generation for destructing fields of partially constructed objects.\n+@item markdown\n+Turns off Markdown replacements in Ddoc comments.\n+@end table\n+\n @item -fno-rtti\n @cindex @option{-frtti}\n @cindex @option{-fno-rtti}\n@@ -524,6 +615,19 @@ Specify @var{file} as a @var{Ddoc} macro file to be read.  Multiple\n @option{-fdoc-inc} options can be used, and files are read and processed\n in the same order.\n \n+@item -fdump-c++-spec=@var{file}\n+For D source files, generate corresponding C++ declarations in @var{file}.\n+\n+@item -fdump-c++-spec-verbose\n+In conjunction with @option{-fdump-c++-spec=} above, add comments for ignored\n+declarations in the generated C++ header.\n+\n+@item -fsave-mixins=@var{file}\n+@cindex @option{-fsave-mixins}\n+Generates code expanded from D @code{mixin} statements and writes the\n+processed sources to @var{file}.  This is useful to debug errors in compilation\n+and provides source for debuggers to show when requested.\n+\n @end table\n \n @node Warnings\n@@ -633,19 +737,19 @@ Report additional information about D language changes identified by\n \n @table @samp\n @item all\n-List information on all language changes.\n+List information on all D language transitions.\n @item complex\n List all usages of complex or imaginary types.\n-@item dip1000\n-Implements @uref{http://wiki.dlang.org/DIP1000} (experimental).\n-@item dip25\n-Implements @uref{http://wiki.dlang.org/DIP25} (experimental).\n @item field\n List all non-mutable fields which occupy an object instance.\n @item nogc\n List all hidden GC allocations.\n+@item templates\n+List statistics on template instantiations.\n @item tls\n List all variables going into thread local storage.\n+@item vmarkdown\n+List instances of Markdown replacements in Ddoc.\n @end table\n \n @end table"}]}