{"sha": "10766209ec09ef42deb8cb877f1893a8a03f2a97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3NjYyMDllYzA5ZWY0MmRlYjhjYjg3N2YxODkzYThhMDNmMmE5Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:55:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:55:13Z"}, "message": "Make builtin_vectorized_function take a combined_fn\n\nThis patch replaces the fndecl argument to builtin_vectorized_function\nwith a combined_fn and gets the vectoriser to call it for internal\nfunctions too.  The patch also moves vectorisation of machine-specific\nbuilt-ins to a new hook, builtin_md_vectorized_function.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu, arm-linux-gnu and\npowerpc64-linux-gnu.\n\ngcc/\n\t* target.def (builtin_vectorized_function): Take a combined_fn (in\n\tthe form of an unsigned int) rather than a function decl.\n\t(builtin_md_vectorized_function): New.\n\t* targhooks.h (default_builtin_vectorized_function): Replace the\n\tfndecl argument with an unsigned int.\n\t(default_builtin_md_vectorized_function): Declare.\n\t* targhooks.c (default_builtin_vectorized_function): Replace the\n\tfndecl argument with an unsigned int.\n\t(default_builtin_md_vectorized_function): New function.\n\t* doc/tm.texi.in (TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION):\n\tNew hook.\n\t* doc/tm.texi: Regenerate.\n\t* tree-vect-stmts.c (vectorizable_function): Update call to\n\tbuiltin_vectorized_function, also passing internal functions.\n\tCall builtin_md_vectorized_function for target-specific builtins.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_builtin_vectorized_function): Replace fndecl argument\n\twith an unsigned int.\n\t* config/aarch64/aarch64-builtins.c: Include case-cfn-macros.h.\n\t(aarch64_builtin_vectorized_function): Update after above changes.\n\tUse CASE_CFN_*.\n\t* config/arm/arm-protos.h (arm_builtin_vectorized_function): Replace\n\tfndecl argument with an unsigned int.\n\t* config/arm/arm-builtins.c: Include case-cfn-macros.h\n\t(arm_builtin_vectorized_function): Update after above changes.\n\tUse CASE_CFN_*.\n\t* config/i386/i386.c: Include case-cfn-macros.h\n\t(ix86_veclib_handler): Take a combined_fn rather than a\n\tbuilt_in_function.\n\t(ix86_veclibabi_svml, ix86_veclibabi_acml): Likewise.  Use\n\tmathfn_built_in rather than calling builtin_decl_implicit directly.\n\t(ix86_builtin_vectorized_function) Update after above changes.\n\tUse CASE_CFN_*.\n\t* config/rs6000/rs6000.c: Include case-cfn-macros.h\n\t(rs6000_builtin_vectorized_libmass): Replace fndecl argument\n\twith a combined_fn.  Use CASE_CFN_*.  Use mathfn_built_in rather\n\tthan calling builtin_decl_implicit directly.\n\t(rs6000_builtin_vectorized_function): Update after above changes.\n\tUse CASE_CFN_*.  Move BUILT_IN_MD to...\n\t(rs6000_builtin_md_vectorized_function): ...this new function.\n\t(TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION): Define.\n\nFrom-SVN: r230491", "tree": {"sha": "c88d08c65eaf313e5097eff3218602232238db96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88d08c65eaf313e5097eff3218602232238db96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10766209ec09ef42deb8cb877f1893a8a03f2a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10766209ec09ef42deb8cb877f1893a8a03f2a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10766209ec09ef42deb8cb877f1893a8a03f2a97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10766209ec09ef42deb8cb877f1893a8a03f2a97/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4e5bc4782bafd5f44b12f43f86ad3bf31182206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e5bc4782bafd5f44b12f43f86ad3bf31182206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e5bc4782bafd5f44b12f43f86ad3bf31182206"}], "stats": {"total": 1236, "additions": 577, "deletions": 659}, "files": [{"sha": "5c6a83da0589ddaa3e33222d70e7ea4881de0ba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -1,3 +1,47 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target.def (builtin_vectorized_function): Take a combined_fn (in\n+\tthe form of an unsigned int) rather than a function decl.\n+\t(builtin_md_vectorized_function): New.\n+\t* targhooks.h (default_builtin_vectorized_function): Replace the\n+\tfndecl argument with an unsigned int.\n+\t(default_builtin_md_vectorized_function): Declare.\n+\t* targhooks.c (default_builtin_vectorized_function): Replace the\n+\tfndecl argument with an unsigned int.\n+\t(default_builtin_md_vectorized_function): New function.\n+\t* doc/tm.texi.in (TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION):\n+\tNew hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* tree-vect-stmts.c (vectorizable_function): Update call to\n+\tbuiltin_vectorized_function, also passing internal functions.\n+\tCall builtin_md_vectorized_function for target-specific builtins.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_builtin_vectorized_function): Replace fndecl argument\n+\twith an unsigned int.\n+\t* config/aarch64/aarch64-builtins.c: Include case-cfn-macros.h.\n+\t(aarch64_builtin_vectorized_function): Update after above changes.\n+\tUse CASE_CFN_*.\n+\t* config/arm/arm-protos.h (arm_builtin_vectorized_function): Replace\n+\tfndecl argument with an unsigned int.\n+\t* config/arm/arm-builtins.c: Include case-cfn-macros.h\n+\t(arm_builtin_vectorized_function): Update after above changes.\n+\tUse CASE_CFN_*.\n+\t* config/i386/i386.c: Include case-cfn-macros.h\n+\t(ix86_veclib_handler): Take a combined_fn rather than a\n+\tbuilt_in_function.\n+\t(ix86_veclibabi_svml, ix86_veclibabi_acml): Likewise.  Use\n+\tmathfn_built_in rather than calling builtin_decl_implicit directly.\n+\t(ix86_builtin_vectorized_function) Update after above changes.\n+\tUse CASE_CFN_*.\n+\t* config/rs6000/rs6000.c: Include case-cfn-macros.h\n+\t(rs6000_builtin_vectorized_libmass): Replace fndecl argument\n+\twith a combined_fn.  Use CASE_CFN_*.  Use mathfn_built_in rather\n+\tthan calling builtin_decl_implicit directly.\n+\t(rs6000_builtin_vectorized_function): Update after above changes.\n+\tUse CASE_CFN_*.  Move BUILT_IN_MD to...\n+\t(rs6000_builtin_md_vectorized_function): ...this new function.\n+\t(TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION): Define.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-patterns.c: Include internal-fn.h."}, {"sha": "c4cda4f31a3a64334cdbac391de6bf019ae07108", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 99, "deletions": 108, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -38,6 +38,7 @@\n #include \"expr.h\"\n #include \"langhooks.h\"\n #include \"gimple-iterator.h\"\n+#include \"case-cfn-macros.h\"\n \n #define v8qi_UP  V8QImode\n #define v4hi_UP  V4HImode\n@@ -1258,7 +1259,8 @@ aarch64_expand_builtin (tree exp,\n }\n \n tree\n-aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n+aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n+\t\t\t\t     tree type_in)\n {\n   machine_mode in_mode, out_mode;\n   int in_n, out_n;\n@@ -1282,130 +1284,119 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n \t: (AARCH64_CHECK_BUILTIN_MODE (2, S) \\\n \t   ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_##N##v2sf] \\\n \t   : NULL_TREE)))\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  switch (fn)\n     {\n-      enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n-      switch (fn)\n-\t{\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == N##Fmode && out_n == C \\\n    && in_mode == N##Fmode && in_n == C)\n-\tcase BUILT_IN_FLOOR:\n-\tcase BUILT_IN_FLOORF:\n-\t  return AARCH64_FIND_FRINT_VARIANT (floor);\n-\tcase BUILT_IN_CEIL:\n-\tcase BUILT_IN_CEILF:\n-\t  return AARCH64_FIND_FRINT_VARIANT (ceil);\n-\tcase BUILT_IN_TRUNC:\n-\tcase BUILT_IN_TRUNCF:\n-\t  return AARCH64_FIND_FRINT_VARIANT (btrunc);\n-\tcase BUILT_IN_ROUND:\n-\tcase BUILT_IN_ROUNDF:\n-\t  return AARCH64_FIND_FRINT_VARIANT (round);\n-\tcase BUILT_IN_NEARBYINT:\n-\tcase BUILT_IN_NEARBYINTF:\n-\t  return AARCH64_FIND_FRINT_VARIANT (nearbyint);\n-\tcase BUILT_IN_SQRT:\n-\tcase BUILT_IN_SQRTF:\n-\t  return AARCH64_FIND_FRINT_VARIANT (sqrt);\n+    CASE_CFN_FLOOR:\n+      return AARCH64_FIND_FRINT_VARIANT (floor);\n+    CASE_CFN_CEIL:\n+      return AARCH64_FIND_FRINT_VARIANT (ceil);\n+    CASE_CFN_TRUNC:\n+      return AARCH64_FIND_FRINT_VARIANT (btrunc);\n+    CASE_CFN_ROUND:\n+      return AARCH64_FIND_FRINT_VARIANT (round);\n+    CASE_CFN_NEARBYINT:\n+      return AARCH64_FIND_FRINT_VARIANT (nearbyint);\n+    CASE_CFN_SQRT:\n+      return AARCH64_FIND_FRINT_VARIANT (sqrt);\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == SImode && out_n == C \\\n    && in_mode == N##Imode && in_n == C)\n-        case BUILT_IN_CLZ:\n-          {\n-            if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-              return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_clzv4si];\n-            return NULL_TREE;\n-          }\n-\tcase BUILT_IN_CTZ:\n-          {\n-\t    if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t      return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv2si];\n-\t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t      return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv4si];\n-\t    return NULL_TREE;\n-          }\n+    CASE_CFN_CLZ:\n+      {\n+\tif (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\t  return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_clzv4si];\n+\treturn NULL_TREE;\n+      }\n+    CASE_CFN_CTZ:\n+      {\n+\tif (AARCH64_CHECK_BUILTIN_MODE (2, S))\n+\t  return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv2si];\n+\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\t  return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_ctzv4si];\n+\treturn NULL_TREE;\n+      }\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == N##Imode && out_n == C \\\n    && in_mode == N##Fmode && in_n == C)\n-\tcase BUILT_IN_LFLOOR:\n-\tcase BUILT_IN_LFLOORF:\n-\tcase BUILT_IN_LLFLOOR:\n-\tcase BUILT_IN_IFLOORF:\n-\t  {\n-\t    enum aarch64_builtins builtin;\n-\t    if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2dfv2di;\n-\t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv4sfv4si;\n-\t    else if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2sfv2si;\n-\t    else\n-\t      return NULL_TREE;\n-\n-\t    return aarch64_builtin_decls[builtin];\n-\t  }\n-\tcase BUILT_IN_LCEIL:\n-\tcase BUILT_IN_LCEILF:\n-\tcase BUILT_IN_LLCEIL:\n-\tcase BUILT_IN_ICEILF:\n-\t  {\n-\t    enum aarch64_builtins builtin;\n-\t    if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2dfv2di;\n-\t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv4sfv4si;\n-\t    else if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2sfv2si;\n-\t    else\n-\t      return NULL_TREE;\n-\n-\t    return aarch64_builtin_decls[builtin];\n-\t  }\n-\tcase BUILT_IN_LROUND:\n-\tcase BUILT_IN_IROUNDF:\n-\t  {\n-\t    enum aarch64_builtins builtin;\n-\t    if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t      builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2dfv2di;\n-\t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t      builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv4sfv4si;\n-\t    else if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t      builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2sfv2si;\n-\t    else\n-\t      return NULL_TREE;\n-\n-\t    return aarch64_builtin_decls[builtin];\n-\t  }\n-\tcase BUILT_IN_BSWAP16:\n+    CASE_CFN_IFLOOR:\n+    CASE_CFN_LFLOOR:\n+    CASE_CFN_LLFLOOR:\n+      {\n+\tenum aarch64_builtins builtin;\n+\tif (AARCH64_CHECK_BUILTIN_MODE (2, D))\n+\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2dfv2di;\n+\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv4sfv4si;\n+\telse if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n+\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2sfv2si;\n+\telse\n+\t  return NULL_TREE;\n+\n+\treturn aarch64_builtin_decls[builtin];\n+      }\n+    CASE_CFN_ICEIL:\n+    CASE_CFN_LCEIL:\n+    CASE_CFN_LLCEIL:\n+      {\n+\tenum aarch64_builtins builtin;\n+\tif (AARCH64_CHECK_BUILTIN_MODE (2, D))\n+\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2dfv2di;\n+\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv4sfv4si;\n+\telse if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n+\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2sfv2si;\n+\telse\n+\t  return NULL_TREE;\n+\n+\treturn aarch64_builtin_decls[builtin];\n+      }\n+    CASE_CFN_IROUND:\n+    CASE_CFN_LROUND:\n+    CASE_CFN_LLROUND:\n+      {\n+\tenum aarch64_builtins builtin;\n+\tif (AARCH64_CHECK_BUILTIN_MODE (2, D))\n+\t  builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2dfv2di;\n+\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\t  builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv4sfv4si;\n+\telse if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n+\t  builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2sfv2si;\n+\telse\n+\t  return NULL_TREE;\n+\n+\treturn aarch64_builtin_decls[builtin];\n+      }\n+    case CFN_BUILT_IN_BSWAP16:\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == N##Imode && out_n == C \\\n    && in_mode == N##Imode && in_n == C)\n-\t  if (AARCH64_CHECK_BUILTIN_MODE (4, H))\n-\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv4hi];\n-\t  else if (AARCH64_CHECK_BUILTIN_MODE (8, H))\n-\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv8hi];\n-\t  else\n-\t    return NULL_TREE;\n-\tcase BUILT_IN_BSWAP32:\n-\t  if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv2si];\n-\t  else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv4si];\n-\t  else\n-\t    return NULL_TREE;\n-\tcase BUILT_IN_BSWAP64:\n-\t  if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv2di];\n-\t  else\n-\t    return NULL_TREE;\n-\tdefault:\n-\t  return NULL_TREE;\n-      }\n+      if (AARCH64_CHECK_BUILTIN_MODE (4, H))\n+\treturn aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv4hi];\n+      else if (AARCH64_CHECK_BUILTIN_MODE (8, H))\n+\treturn aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv8hi];\n+      else\n+\treturn NULL_TREE;\n+    case CFN_BUILT_IN_BSWAP32:\n+      if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n+\treturn aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv2si];\n+      else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\treturn aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv4si];\n+      else\n+\treturn NULL_TREE;\n+    case CFN_BUILT_IN_BSWAP64:\n+      if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n+\treturn aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv2di];\n+      else\n+\treturn NULL_TREE;\n+    default:\n+      return NULL_TREE;\n     }\n \n   return NULL_TREE;"}, {"sha": "e0a050ce5bc24b0269a5c6664d8a7dc4901bfe0e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -409,10 +409,7 @@ tree aarch64_builtin_decl (unsigned, bool ATTRIBUTE_UNUSED);\n \n tree aarch64_builtin_rsqrt (unsigned int, bool);\n \n-tree\n-aarch64_builtin_vectorized_function (tree fndecl,\n-\t\t\t\t     tree type_out,\n-\t\t\t\t     tree type_in);\n+tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);\n \n extern void aarch64_split_combinev16qi (rtx operands[3]);\n extern void aarch64_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel);"}, {"sha": "11cd17d0b8f3c29ccbe16cb463a17d55ba0fa1e3", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 52, "deletions": 55, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -35,6 +35,7 @@\n #include \"explow.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n+#include \"case-cfn-macros.h\"\n \n #define SIMD_MAX_BUILTIN_ARGS 5\n \n@@ -2842,7 +2843,7 @@ arm_expand_builtin (tree exp,\n }\n \n tree\n-arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n+arm_builtin_vectorized_function (unsigned int fn, tree type_out, tree type_in)\n {\n   machine_mode in_mode, out_mode;\n   int in_n, out_n;\n@@ -2879,19 +2880,16 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n       ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v4sf, false) \\\n       : NULL_TREE))\n \n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  switch (fn)\n     {\n-      enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n-      switch (fn)\n-        {\n-          case BUILT_IN_FLOORF:\n-            return ARM_FIND_VRINT_VARIANT (vrintm);\n-          case BUILT_IN_CEILF:\n-            return ARM_FIND_VRINT_VARIANT (vrintp);\n-          case BUILT_IN_TRUNCF:\n-            return ARM_FIND_VRINT_VARIANT (vrintz);\n-          case BUILT_IN_ROUNDF:\n-            return ARM_FIND_VRINT_VARIANT (vrinta);\n+    CASE_CFN_FLOOR:\n+      return ARM_FIND_VRINT_VARIANT (vrintm);\n+    CASE_CFN_CEIL:\n+      return ARM_FIND_VRINT_VARIANT (vrintp);\n+    CASE_CFN_TRUNC:\n+      return ARM_FIND_VRINT_VARIANT (vrintz);\n+    CASE_CFN_ROUND:\n+      return ARM_FIND_VRINT_VARIANT (vrinta);\n #undef ARM_CHECK_BUILTIN_MODE_1\n #define ARM_CHECK_BUILTIN_MODE_1(C) \\\n   (out_mode == SImode && out_n == C \\\n@@ -2910,52 +2908,51 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n    : (ARM_CHECK_BUILTIN_MODE (4) \\\n      ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##uv4sfv4si, false) \\\n      : NULL_TREE))\n-          case BUILT_IN_LROUNDF:\n-            return out_unsigned_p\n-                     ? ARM_FIND_VCVTU_VARIANT (vcvta)\n-                     : ARM_FIND_VCVT_VARIANT (vcvta);\n-          case BUILT_IN_LCEILF:\n-            return out_unsigned_p\n-                     ? ARM_FIND_VCVTU_VARIANT (vcvtp)\n-                     : ARM_FIND_VCVT_VARIANT (vcvtp);\n-          case BUILT_IN_LFLOORF:\n-            return out_unsigned_p\n-                     ? ARM_FIND_VCVTU_VARIANT (vcvtm)\n-                     : ARM_FIND_VCVT_VARIANT (vcvtm);\n+    CASE_CFN_LROUND:\n+      return (out_unsigned_p\n+\t      ? ARM_FIND_VCVTU_VARIANT (vcvta)\n+\t      : ARM_FIND_VCVT_VARIANT (vcvta));\n+    CASE_CFN_LCEIL:\n+      return (out_unsigned_p\n+\t      ? ARM_FIND_VCVTU_VARIANT (vcvtp)\n+\t      : ARM_FIND_VCVT_VARIANT (vcvtp));\n+    CASE_CFN_LFLOOR:\n+      return (out_unsigned_p\n+\t      ? ARM_FIND_VCVTU_VARIANT (vcvtm)\n+\t      : ARM_FIND_VCVT_VARIANT (vcvtm));\n #undef ARM_CHECK_BUILTIN_MODE\n #define ARM_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == N##mode && out_n == C \\\n    && in_mode == N##mode && in_n == C)\n-          case BUILT_IN_BSWAP16:\n-            if (ARM_CHECK_BUILTIN_MODE (4, HI))\n-              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4hi, false);\n-            else if (ARM_CHECK_BUILTIN_MODE (8, HI))\n-              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv8hi, false);\n-            else\n-              return NULL_TREE;\n-          case BUILT_IN_BSWAP32:\n-            if (ARM_CHECK_BUILTIN_MODE (2, SI))\n-              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2si, false);\n-            else if (ARM_CHECK_BUILTIN_MODE (4, SI))\n-              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4si, false);\n-            else\n-              return NULL_TREE;\n-          case BUILT_IN_BSWAP64:\n-            if (ARM_CHECK_BUILTIN_MODE (2, DI))\n-              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2di, false);\n-            else\n-              return NULL_TREE;\n-\t  case BUILT_IN_COPYSIGNF:\n-\t    if (ARM_CHECK_BUILTIN_MODE (2, SF))\n-              return arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv2sf, false);\n-\t    else if (ARM_CHECK_BUILTIN_MODE (4, SF))\n-              return arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv4sf, false);\n-\t    else\n-\t      return NULL_TREE;\n-\n-          default:\n-            return NULL_TREE;\n-        }\n+    case CFN_BUILT_IN_BSWAP16:\n+      if (ARM_CHECK_BUILTIN_MODE (4, HI))\n+\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4hi, false);\n+      else if (ARM_CHECK_BUILTIN_MODE (8, HI))\n+\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv8hi, false);\n+      else\n+\treturn NULL_TREE;\n+    case CFN_BUILT_IN_BSWAP32:\n+      if (ARM_CHECK_BUILTIN_MODE (2, SI))\n+\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2si, false);\n+      else if (ARM_CHECK_BUILTIN_MODE (4, SI))\n+\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4si, false);\n+      else\n+\treturn NULL_TREE;\n+    case CFN_BUILT_IN_BSWAP64:\n+      if (ARM_CHECK_BUILTIN_MODE (2, DI))\n+\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2di, false);\n+      else\n+\treturn NULL_TREE;\n+    CASE_CFN_COPYSIGN:\n+      if (ARM_CHECK_BUILTIN_MODE (2, SF))\n+\treturn arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv2sf, false);\n+      else if (ARM_CHECK_BUILTIN_MODE (4, SF))\n+\treturn arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv4sf, false);\n+      else\n+\treturn NULL_TREE;\n+\n+    default:\n+      return NULL_TREE;\n     }\n   return NULL_TREE;\n }"}, {"sha": "e4b8fb3feda74d60e7f6628bb51b9d6d6a431e54", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -84,7 +84,7 @@ extern char *neon_output_shift_immediate (const char *, char, rtx *,\n extern void neon_pairwise_reduce (rtx, rtx, machine_mode,\n \t\t\t\t  rtx (*) (rtx, rtx, rtx));\n extern rtx neon_make_constant (rtx);\n-extern tree arm_builtin_vectorized_function (tree, tree, tree);\n+extern tree arm_builtin_vectorized_function (unsigned int, tree, tree);\n extern void neon_expand_vector_init (rtx, rtx);\n extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT, const_tree);\n extern void neon_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);"}, {"sha": "763230a7a385334f75a355340a2ebbbf3708df7d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 84, "deletions": 192, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-chkp.h\"\n #include \"rtl-chkp.h\"\n #include \"dbgcnt.h\"\n+#include \"case-cfn-macros.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -2612,10 +2613,10 @@ static int ix86_tune_defaulted;\n static int ix86_arch_specified;\n \n /* Vectorization library interface and handlers.  */\n-static tree (*ix86_veclib_handler) (enum built_in_function, tree, tree);\n+static tree (*ix86_veclib_handler) (combined_fn, tree, tree);\n \n-static tree ix86_veclibabi_svml (enum built_in_function, tree, tree);\n-static tree ix86_veclibabi_acml (enum built_in_function, tree, tree);\n+static tree ix86_veclibabi_svml (combined_fn, tree, tree);\n+static tree ix86_veclibabi_acml (combined_fn, tree, tree);\n \n /* Processor target table, indexed by processor number */\n struct ptt\n@@ -41989,21 +41990,19 @@ ix86_store_returned_bounds (rtx slot, rtx bounds)\n   emit_move_insn (slot, bounds);\n }\n \n-/* Returns a function decl for a vectorized version of the builtin function\n-   with builtin function code FN and the result vector type TYPE, or NULL_TREE\n+/* Returns a function decl for a vectorized version of the combined function\n+   with combined_fn code FN and the result vector type TYPE, or NULL_TREE\n    if it is not available.  */\n \n static tree\n-ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n+ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t\t\t\t  tree type_in)\n {\n   machine_mode in_mode, out_mode;\n   int in_n, out_n;\n-  enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n \n   if (TREE_CODE (type_out) != VECTOR_TYPE\n-      || TREE_CODE (type_in) != VECTOR_TYPE\n-      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+      || TREE_CODE (type_in) != VECTOR_TYPE)\n     return NULL_TREE;\n \n   out_mode = TYPE_MODE (TREE_TYPE (type_out));\n@@ -42013,7 +42012,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \n   switch (fn)\n     {\n-    case BUILT_IN_SQRT:\n+    CASE_CFN_SQRT:\n       if (out_mode == DFmode && in_mode == DFmode)\n \t{\n \t  if (out_n == 2 && in_n == 2)\n@@ -42023,17 +42022,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_SQRTPD512);\n \t}\n-      break;\n-\n-    case BUILT_IN_EXP2F:\n-      if (out_mode == SFmode && in_mode == SFmode)\n-\t{\n-\t  if (out_n == 16 && in_n == 16)\n-\t    return ix86_get_builtin (IX86_BUILTIN_EXP2PS);\n-\t}\n-      break;\n-\n-    case BUILT_IN_SQRTF:\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42045,9 +42033,17 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_IFLOOR:\n-    case BUILT_IN_LFLOOR:\n-    case BUILT_IN_LLFLOOR:\n+    CASE_CFN_EXP2:\n+      if (out_mode == SFmode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_EXP2PS);\n+\t}\n+      break;\n+\n+    CASE_CFN_IFLOOR:\n+    CASE_CFN_LFLOOR:\n+    CASE_CFN_LLFLOOR:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42061,15 +42057,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 16 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX512);\n \t}\n-      break;\n-\n-    case BUILT_IN_IFLOORF:\n-    case BUILT_IN_LFLOORF:\n-    case BUILT_IN_LLFLOORF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SImode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42079,9 +42066,9 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_ICEIL:\n-    case BUILT_IN_LCEIL:\n-    case BUILT_IN_LLCEIL:\n+    CASE_CFN_ICEIL:\n+    CASE_CFN_LCEIL:\n+    CASE_CFN_LLCEIL:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42095,15 +42082,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 16 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPD_VEC_PACK_SFIX512);\n \t}\n-      break;\n-\n-    case BUILT_IN_ICEILF:\n-    case BUILT_IN_LCEILF:\n-    case BUILT_IN_LLCEILF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SImode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42113,21 +42091,16 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_IRINT:\n-    case BUILT_IN_LRINT:\n-    case BUILT_IN_LLRINT:\n+    CASE_CFN_IRINT:\n+    CASE_CFN_LRINT:\n+    CASE_CFN_LLRINT:\n       if (out_mode == SImode && in_mode == DFmode)\n \t{\n \t  if (out_n == 4 && in_n == 2)\n \t    return ix86_get_builtin (IX86_BUILTIN_VEC_PACK_SFIX);\n \t  else if (out_n == 8 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_VEC_PACK_SFIX256);\n \t}\n-      break;\n-\n-    case BUILT_IN_IRINTF:\n-    case BUILT_IN_LRINTF:\n-    case BUILT_IN_LLRINTF:\n       if (out_mode == SImode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42137,9 +42110,9 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_IROUND:\n-    case BUILT_IN_LROUND:\n-    case BUILT_IN_LLROUND:\n+    CASE_CFN_IROUND:\n+    CASE_CFN_LROUND:\n+    CASE_CFN_LLROUND:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42153,15 +42126,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 16 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX512);\n \t}\n-      break;\n-\n-    case BUILT_IN_IROUNDF:\n-    case BUILT_IN_LROUNDF:\n-    case BUILT_IN_LLROUNDF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SImode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42171,7 +42135,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_COPYSIGN:\n+    CASE_CFN_COPYSIGN:\n       if (out_mode == DFmode && in_mode == DFmode)\n \t{\n \t  if (out_n == 2 && in_n == 2)\n@@ -42181,9 +42145,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 8 && in_n == 8)\n \t    return ix86_get_builtin (IX86_BUILTIN_CPYSGNPD512);\n \t}\n-      break;\n-\n-    case BUILT_IN_COPYSIGNF:\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42195,7 +42156,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_FLOOR:\n+    CASE_CFN_FLOOR:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42207,13 +42168,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPD256);\n \t}\n-      break;\n-\n-    case BUILT_IN_FLOORF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42223,7 +42177,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_CEIL:\n+    CASE_CFN_CEIL:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42235,13 +42189,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPD256);\n \t}\n-      break;\n-\n-    case BUILT_IN_CEILF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42251,7 +42198,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_TRUNC:\n+    CASE_CFN_TRUNC:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42263,13 +42210,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPD256);\n \t}\n-      break;\n-\n-    case BUILT_IN_TRUNCF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42279,7 +42219,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_RINT:\n+    CASE_CFN_RINT:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42291,13 +42231,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_RINTPD256);\n \t}\n-      break;\n-\n-    case BUILT_IN_RINTF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42307,7 +42240,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_ROUND:\n+    CASE_CFN_ROUND:\n       /* The round insn does not trap on denormals.  */\n       if (flag_trapping_math || !TARGET_ROUND)\n \tbreak;\n@@ -42319,13 +42252,6 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t  else if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_ROUNDPD_AZ256);\n \t}\n-      break;\n-\n-    case BUILT_IN_ROUNDF:\n-      /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n-\tbreak;\n-\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42335,17 +42261,14 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n-    case BUILT_IN_FMA:\n+    CASE_CFN_FMA:\n       if (out_mode == DFmode && in_mode == DFmode)\n \t{\n \t  if (out_n == 2 && in_n == 2)\n \t    return ix86_get_builtin (IX86_BUILTIN_VFMADDPD);\n \t  if (out_n == 4 && in_n == 4)\n \t    return ix86_get_builtin (IX86_BUILTIN_VFMADDPD256);\n \t}\n-      break;\n-\n-    case BUILT_IN_FMAF:\n       if (out_mode == SFmode && in_mode == SFmode)\n \t{\n \t  if (out_n == 4 && in_n == 4)\n@@ -42361,8 +42284,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \n   /* Dispatch to a handler for a vectorization library.  */\n   if (ix86_veclib_handler)\n-    return ix86_veclib_handler ((enum built_in_function) fn, type_out,\n-\t\t\t\ttype_in);\n+    return ix86_veclib_handler (combined_fn (fn), type_out, type_in);\n \n   return NULL_TREE;\n }\n@@ -42371,7 +42293,7 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n    a library with vectorized intrinsics.  */\n \n static tree\n-ix86_veclibabi_svml (enum built_in_function fn, tree type_out, tree type_in)\n+ix86_veclibabi_svml (combined_fn fn, tree type_out, tree type_in)\n {\n   char name[20];\n   tree fntype, new_fndecl, args;\n@@ -42394,59 +42316,39 @@ ix86_veclibabi_svml (enum built_in_function fn, tree type_out, tree type_in)\n \n   switch (fn)\n     {\n-    case BUILT_IN_EXP:\n-    case BUILT_IN_LOG:\n-    case BUILT_IN_LOG10:\n-    case BUILT_IN_POW:\n-    case BUILT_IN_TANH:\n-    case BUILT_IN_TAN:\n-    case BUILT_IN_ATAN:\n-    case BUILT_IN_ATAN2:\n-    case BUILT_IN_ATANH:\n-    case BUILT_IN_CBRT:\n-    case BUILT_IN_SINH:\n-    case BUILT_IN_SIN:\n-    case BUILT_IN_ASINH:\n-    case BUILT_IN_ASIN:\n-    case BUILT_IN_COSH:\n-    case BUILT_IN_COS:\n-    case BUILT_IN_ACOSH:\n-    case BUILT_IN_ACOS:\n-      if (el_mode != DFmode || n != 2)\n-\treturn NULL_TREE;\n-      break;\n-\n-    case BUILT_IN_EXPF:\n-    case BUILT_IN_LOGF:\n-    case BUILT_IN_LOG10F:\n-    case BUILT_IN_POWF:\n-    case BUILT_IN_TANHF:\n-    case BUILT_IN_TANF:\n-    case BUILT_IN_ATANF:\n-    case BUILT_IN_ATAN2F:\n-    case BUILT_IN_ATANHF:\n-    case BUILT_IN_CBRTF:\n-    case BUILT_IN_SINHF:\n-    case BUILT_IN_SINF:\n-    case BUILT_IN_ASINHF:\n-    case BUILT_IN_ASINF:\n-    case BUILT_IN_COSHF:\n-    case BUILT_IN_COSF:\n-    case BUILT_IN_ACOSHF:\n-    case BUILT_IN_ACOSF:\n-      if (el_mode != SFmode || n != 4)\n+    CASE_CFN_EXP:\n+    CASE_CFN_LOG:\n+    CASE_CFN_LOG10:\n+    CASE_CFN_POW:\n+    CASE_CFN_TANH:\n+    CASE_CFN_TAN:\n+    CASE_CFN_ATAN:\n+    CASE_CFN_ATAN2:\n+    CASE_CFN_ATANH:\n+    CASE_CFN_CBRT:\n+    CASE_CFN_SINH:\n+    CASE_CFN_SIN:\n+    CASE_CFN_ASINH:\n+    CASE_CFN_ASIN:\n+    CASE_CFN_COSH:\n+    CASE_CFN_COS:\n+    CASE_CFN_ACOSH:\n+    CASE_CFN_ACOS:\n+      if ((el_mode != DFmode || n != 2)\n+\t  && (el_mode != SFmode || n != 4))\n \treturn NULL_TREE;\n       break;\n \n     default:\n       return NULL_TREE;\n     }\n \n-  bname = IDENTIFIER_POINTER (DECL_NAME (builtin_decl_implicit (fn)));\n+  tree fndecl = mathfn_built_in (TREE_TYPE (type_in), fn);\n+  bname = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n \n-  if (fn == BUILT_IN_LOGF)\n+  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LOGF)\n     strcpy (name, \"vmlsLn4\");\n-  else if (fn == BUILT_IN_LOG)\n+  else if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_LOG)\n     strcpy (name, \"vmldLn2\");\n   else if (n == 4)\n     {\n@@ -42460,9 +42362,7 @@ ix86_veclibabi_svml (enum built_in_function fn, tree type_out, tree type_in)\n   name[4] &= ~0x20;\n \n   arity = 0;\n-  for (args = DECL_ARGUMENTS (builtin_decl_implicit (fn));\n-       args;\n-       args = TREE_CHAIN (args))\n+  for (args = DECL_ARGUMENTS (fndecl); args; args = TREE_CHAIN (args))\n     arity++;\n \n   if (arity == 1)\n@@ -42485,7 +42385,7 @@ ix86_veclibabi_svml (enum built_in_function fn, tree type_out, tree type_in)\n    a library with vectorized intrinsics.  */\n \n static tree\n-ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)\n+ix86_veclibabi_acml (combined_fn fn, tree type_out, tree type_in)\n {\n   char name[20] = \"__vr.._\";\n   tree fntype, new_fndecl, args;\n@@ -42511,44 +42411,36 @@ ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)\n \n   switch (fn)\n     {\n-    case BUILT_IN_SIN:\n-    case BUILT_IN_COS:\n-    case BUILT_IN_EXP:\n-    case BUILT_IN_LOG:\n-    case BUILT_IN_LOG2:\n-    case BUILT_IN_LOG10:\n-      name[4] = 'd';\n-      name[5] = '2';\n-      if (el_mode != DFmode\n-\t  || n != 2)\n-\treturn NULL_TREE;\n-      break;\n-\n-    case BUILT_IN_SINF:\n-    case BUILT_IN_COSF:\n-    case BUILT_IN_EXPF:\n-    case BUILT_IN_POWF:\n-    case BUILT_IN_LOGF:\n-    case BUILT_IN_LOG2F:\n-    case BUILT_IN_LOG10F:\n-      name[4] = 's';\n-      name[5] = '4';\n-      if (el_mode != SFmode\n-\t  || n != 4)\n+    CASE_CFN_SIN:\n+    CASE_CFN_COS:\n+    CASE_CFN_EXP:\n+    CASE_CFN_LOG:\n+    CASE_CFN_LOG2:\n+    CASE_CFN_LOG10:\n+      if (el_mode == DFmode && n == 2)\n+\t{\n+\t  name[4] = 'd';\n+\t  name[5] = '2';\n+\t}\n+      else if (el_mode == SFmode && n == 4)\n+\t{\n+\t  name[4] = 's';\n+\t  name[5] = '4';\n+\t}\n+      else\n \treturn NULL_TREE;\n       break;\n \n     default:\n       return NULL_TREE;\n     }\n \n-  bname = IDENTIFIER_POINTER (DECL_NAME (builtin_decl_implicit (fn)));\n+  tree fndecl = mathfn_built_in (TREE_TYPE (type_in), fn);\n+  bname = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n   sprintf (name + 7, \"%s\", bname+10);\n \n   arity = 0;\n-  for (args = DECL_ARGUMENTS (builtin_decl_implicit (fn));\n-       args;\n-       args = TREE_CHAIN (args))\n+  for (args = DECL_ARGUMENTS (fndecl); args; args = TREE_CHAIN (args))\n     arity++;\n \n   if (arity == 1)"}, {"sha": "688f1db3959af36f7cb4ce5d095ac6c935afee04", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 248, "deletions": 276, "changes": 524, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -70,6 +70,7 @@\n #if TARGET_MACHO\n #include \"gstab.h\"  /* for N_SLINE */\n #endif\n+#include \"case-cfn-macros.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1107,7 +1108,7 @@ static const struct rs6000_builtin_info_type rs6000_builtin_info[] =\n #undef RS6000_BUILTIN_X\n \n /* Support for -mveclibabi=<xxx> to control which vector library to use.  */\n-static tree (*rs6000_veclib_handler) (tree, tree, tree);\n+static tree (*rs6000_veclib_handler) (combined_fn, tree, tree);\n \n \f\n static bool rs6000_debug_legitimate_address_p (machine_mode, rtx, bool);\n@@ -1117,7 +1118,7 @@ static int rs6000_ra_ever_killed (void);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n static tree rs6000_handle_struct_attribute (tree *, tree, tree, int, bool *);\n-static tree rs6000_builtin_vectorized_libmass (tree, tree, tree);\n+static tree rs6000_builtin_vectorized_libmass (combined_fn, tree, tree);\n static void rs6000_emit_set_long_const (rtx, HOST_WIDE_INT);\n static int rs6000_memory_move_cost (machine_mode, reg_class_t, bool);\n static bool rs6000_debug_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n@@ -1606,6 +1607,10 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   rs6000_builtin_vectorized_function\n \n+#undef TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION\n+#define TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION \\\n+  rs6000_builtin_md_vectorized_function\n+\n #if !TARGET_MACHO\n #undef TARGET_STACK_PROTECT_FAIL\n #define TARGET_STACK_PROTECT_FAIL rs6000_stack_protect_fail\n@@ -5173,7 +5178,8 @@ rs6000_destroy_cost_data (void *data)\n    library with vectorized intrinsics.  */\n \n static tree\n-rs6000_builtin_vectorized_libmass (tree fndecl, tree type_out, tree type_in)\n+rs6000_builtin_vectorized_libmass (combined_fn fn, tree type_out,\n+\t\t\t\t   tree type_in)\n {\n   char name[32];\n   const char *suffix = NULL;\n@@ -5198,93 +5204,57 @@ rs6000_builtin_vectorized_libmass (tree fndecl, tree type_out, tree type_in)\n       || n != in_n)\n     return NULL_TREE;\n \n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n-    {\n-      enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n-      switch (fn)\n-\t{\n-\tcase BUILT_IN_ATAN2:\n-\tcase BUILT_IN_HYPOT:\n-\tcase BUILT_IN_POW:\n-\t  n_args = 2;\n-\t  /* fall through */\n-\n-\tcase BUILT_IN_ACOS:\n-\tcase BUILT_IN_ACOSH:\n-\tcase BUILT_IN_ASIN:\n-\tcase BUILT_IN_ASINH:\n-\tcase BUILT_IN_ATAN:\n-\tcase BUILT_IN_ATANH:\n-\tcase BUILT_IN_CBRT:\n-\tcase BUILT_IN_COS:\n-\tcase BUILT_IN_COSH:\n-\tcase BUILT_IN_ERF:\n-\tcase BUILT_IN_ERFC:\n-\tcase BUILT_IN_EXP2:\n-\tcase BUILT_IN_EXP:\n-\tcase BUILT_IN_EXPM1:\n-\tcase BUILT_IN_LGAMMA:\n-\tcase BUILT_IN_LOG10:\n-\tcase BUILT_IN_LOG1P:\n-\tcase BUILT_IN_LOG2:\n-\tcase BUILT_IN_LOG:\n-\tcase BUILT_IN_SIN:\n-\tcase BUILT_IN_SINH:\n-\tcase BUILT_IN_SQRT:\n-\tcase BUILT_IN_TAN:\n-\tcase BUILT_IN_TANH:\n-\t  bdecl = builtin_decl_implicit (fn);\n-\t  suffix = \"d2\";\t\t\t\t/* pow -> powd2 */\n-\t  if (el_mode != DFmode\n-\t      || n != 2\n-\t      || !bdecl)\n-\t    return NULL_TREE;\n-\t  break;\n+  switch (fn)\n+    {\n+    CASE_CFN_ATAN2:\n+    CASE_CFN_HYPOT:\n+    CASE_CFN_POW:\n+      n_args = 2;\n+      /* fall through */\n \n-\tcase BUILT_IN_ATAN2F:\n-\tcase BUILT_IN_HYPOTF:\n-\tcase BUILT_IN_POWF:\n-\t  n_args = 2;\n-\t  /* fall through */\n-\n-\tcase BUILT_IN_ACOSF:\n-\tcase BUILT_IN_ACOSHF:\n-\tcase BUILT_IN_ASINF:\n-\tcase BUILT_IN_ASINHF:\n-\tcase BUILT_IN_ATANF:\n-\tcase BUILT_IN_ATANHF:\n-\tcase BUILT_IN_CBRTF:\n-\tcase BUILT_IN_COSF:\n-\tcase BUILT_IN_COSHF:\n-\tcase BUILT_IN_ERFF:\n-\tcase BUILT_IN_ERFCF:\n-\tcase BUILT_IN_EXP2F:\n-\tcase BUILT_IN_EXPF:\n-\tcase BUILT_IN_EXPM1F:\n-\tcase BUILT_IN_LGAMMAF:\n-\tcase BUILT_IN_LOG10F:\n-\tcase BUILT_IN_LOG1PF:\n-\tcase BUILT_IN_LOG2F:\n-\tcase BUILT_IN_LOGF:\n-\tcase BUILT_IN_SINF:\n-\tcase BUILT_IN_SINHF:\n-\tcase BUILT_IN_SQRTF:\n-\tcase BUILT_IN_TANF:\n-\tcase BUILT_IN_TANHF:\n-\t  bdecl = builtin_decl_implicit (fn);\n+    CASE_CFN_ACOS:\n+    CASE_CFN_ACOSH:\n+    CASE_CFN_ASIN:\n+    CASE_CFN_ASINH:\n+    CASE_CFN_ATAN:\n+    CASE_CFN_ATANH:\n+    CASE_CFN_CBRT:\n+    CASE_CFN_COS:\n+    CASE_CFN_COSH:\n+    CASE_CFN_ERF:\n+    CASE_CFN_ERFC:\n+    CASE_CFN_EXP2:\n+    CASE_CFN_EXP:\n+    CASE_CFN_EXPM1:\n+    CASE_CFN_LGAMMA:\n+    CASE_CFN_LOG10:\n+    CASE_CFN_LOG1P:\n+    CASE_CFN_LOG2:\n+    CASE_CFN_LOG:\n+    CASE_CFN_SIN:\n+    CASE_CFN_SINH:\n+    CASE_CFN_SQRT:\n+    CASE_CFN_TAN:\n+    CASE_CFN_TANH:\n+      if (el_mode == DFmode && n == 2)\n+\t{\n+\t  bdecl = mathfn_built_in (double_type_node, fn);\n+\t  suffix = \"d2\";\t\t\t\t/* pow -> powd2 */\n+\t}\n+      else if (el_mode == SFmode && n == 4)\n+\t{\n+\t  bdecl = mathfn_built_in (float_type_node, fn);\n \t  suffix = \"4\";\t\t\t\t\t/* powf -> powf4 */\n-\t  if (el_mode != SFmode\n-\t      || n != 4\n-\t      || !bdecl)\n-\t    return NULL_TREE;\n-\t  break;\n-\n-\tdefault:\n-\t  return NULL_TREE;\n \t}\n+      else\n+\treturn NULL_TREE;\n+      if (!bdecl)\n+\treturn NULL_TREE;\n+      break;\n+\n+    default:\n+      return NULL_TREE;\n     }\n-  else\n-    return NULL_TREE;\n \n   gcc_assert (suffix != NULL);\n   bname = IDENTIFIER_POINTER (DECL_NAME (bdecl));\n@@ -5317,15 +5287,15 @@ rs6000_builtin_vectorized_libmass (tree fndecl, tree type_out, tree type_in)\n    if it is not available.  */\n \n static tree\n-rs6000_builtin_vectorized_function (tree fndecl, tree type_out,\n+rs6000_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t\t\t\t    tree type_in)\n {\n   machine_mode in_mode, out_mode;\n   int in_n, out_n;\n \n   if (TARGET_DEBUG_BUILTIN)\n     fprintf (stderr, \"rs6000_builtin_vectorized_function (%s, %s, %s)\\n\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (fndecl)),\n+\t     combined_fn_name (combined_fn (fn)),\n \t     GET_MODE_NAME (TYPE_MODE (type_out)),\n \t     GET_MODE_NAME (TYPE_MODE (type_in)));\n \n@@ -5339,203 +5309,205 @@ rs6000_builtin_vectorized_function (tree fndecl, tree type_out,\n   in_mode = TYPE_MODE (TREE_TYPE (type_in));\n   in_n = TYPE_VECTOR_SUBPARTS (type_in);\n \n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+  switch (fn)\n     {\n-      enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n-      switch (fn)\n+    CASE_CFN_CLZ:\n+      if (TARGET_P8_VECTOR && in_mode == out_mode && out_n == in_n)\n \t{\n-\tcase BUILT_IN_CLZIMAX:\n-\tcase BUILT_IN_CLZLL:\n-\tcase BUILT_IN_CLZL:\n-\tcase BUILT_IN_CLZ:\n-\t  if (TARGET_P8_VECTOR && in_mode == out_mode && out_n == in_n)\n-\t    {\n-\t      if (out_mode == QImode && out_n == 16)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VCLZB];\n-\t      else if (out_mode == HImode && out_n == 8)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VCLZH];\n-\t      else if (out_mode == SImode && out_n == 4)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VCLZW];\n-\t      else if (out_mode == DImode && out_n == 2)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VCLZD];\n-\t    }\n-\t  break;\n-\tcase BUILT_IN_COPYSIGN:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_CPSGNDP];\n-\t  break;\n-\tcase BUILT_IN_COPYSIGNF:\n-\t  if (out_mode != SFmode || out_n != 4\n-\t      || in_mode != SFmode || in_n != 4)\n-\t    break;\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode))\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_CPSGNSP];\n-\t  if (VECTOR_UNIT_ALTIVEC_P (V4SFmode))\n-\t    return rs6000_builtin_decls[ALTIVEC_BUILTIN_COPYSIGN_V4SF];\n-\t  break;\n-\tcase BUILT_IN_POPCOUNTIMAX:\n-\tcase BUILT_IN_POPCOUNTLL:\n-\tcase BUILT_IN_POPCOUNTL:\n-\tcase BUILT_IN_POPCOUNT:\n-\t  if (TARGET_P8_VECTOR && in_mode == out_mode && out_n == in_n)\n-\t    {\n-\t      if (out_mode == QImode && out_n == 16)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTB];\n-\t      else if (out_mode == HImode && out_n == 8)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTH];\n-\t      else if (out_mode == SImode && out_n == 4)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTW];\n-\t      else if (out_mode == DImode && out_n == 2)\n-\t\treturn rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTD];\n-\t    }\n-\t  break;\n-\tcase BUILT_IN_SQRT:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVSQRTDP];\n-\t  break;\n-\tcase BUILT_IN_SQRTF:\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode)\n-\t      && out_mode == SFmode && out_n == 4\n-\t      && in_mode == SFmode && in_n == 4)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVSQRTSP];\n-\t  break;\n-\tcase BUILT_IN_CEIL:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRDPIP];\n-\t  break;\n-\tcase BUILT_IN_CEILF:\n-\t  if (out_mode != SFmode || out_n != 4\n-\t      || in_mode != SFmode || in_n != 4)\n-\t    break;\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode))\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRSPIP];\n-\t  if (VECTOR_UNIT_ALTIVEC_P (V4SFmode))\n-\t    return rs6000_builtin_decls[ALTIVEC_BUILTIN_VRFIP];\n-\t  break;\n-\tcase BUILT_IN_FLOOR:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRDPIM];\n-\t  break;\n-\tcase BUILT_IN_FLOORF:\n-\t  if (out_mode != SFmode || out_n != 4\n-\t      || in_mode != SFmode || in_n != 4)\n-\t    break;\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode))\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRSPIM];\n-\t  if (VECTOR_UNIT_ALTIVEC_P (V4SFmode))\n-\t    return rs6000_builtin_decls[ALTIVEC_BUILTIN_VRFIM];\n-\t  break;\n-\tcase BUILT_IN_FMA:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVMADDDP];\n-\t  break;\n-\tcase BUILT_IN_FMAF:\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode)\n-\t      && out_mode == SFmode && out_n == 4\n-\t      && in_mode == SFmode && in_n == 4)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVMADDSP];\n-\t  else if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n-\t      && out_mode == SFmode && out_n == 4\n-\t      && in_mode == SFmode && in_n == 4)\n-\t    return rs6000_builtin_decls[ALTIVEC_BUILTIN_VMADDFP];\n-\t  break;\n-\tcase BUILT_IN_TRUNC:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRDPIZ];\n-\t  break;\n-\tcase BUILT_IN_TRUNCF:\n-\t  if (out_mode != SFmode || out_n != 4\n-\t      || in_mode != SFmode || in_n != 4)\n-\t    break;\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode))\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRSPIZ];\n-\t  if (VECTOR_UNIT_ALTIVEC_P (V4SFmode))\n-\t    return rs6000_builtin_decls[ALTIVEC_BUILTIN_VRFIZ];\n-\t  break;\n-\tcase BUILT_IN_NEARBYINT:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && flag_unsafe_math_optimizations\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRDPI];\n-\t  break;\n-\tcase BUILT_IN_NEARBYINTF:\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode)\n-\t      && flag_unsafe_math_optimizations\n-\t      && out_mode == SFmode && out_n == 4\n-\t      && in_mode == SFmode && in_n == 4)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRSPI];\n-\t  break;\n-\tcase BUILT_IN_RINT:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && !flag_trapping_math\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRDPIC];\n-\t  break;\n-\tcase BUILT_IN_RINTF:\n-\t  if (VECTOR_UNIT_VSX_P (V4SFmode)\n-\t      && !flag_trapping_math\n-\t      && out_mode == SFmode && out_n == 4\n-\t      && in_mode == SFmode && in_n == 4)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_XVRSPIC];\n-\t  break;\n-\tdefault:\n-\t  break;\n+\t  if (out_mode == QImode && out_n == 16)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VCLZB];\n+\t  else if (out_mode == HImode && out_n == 8)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VCLZH];\n+\t  else if (out_mode == SImode && out_n == 4)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VCLZW];\n+\t  else if (out_mode == DImode && out_n == 2)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VCLZD];\n \t}\n-    }\n-\n-  else if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-    {\n-      enum rs6000_builtins fn\n-\t= (enum rs6000_builtins)DECL_FUNCTION_CODE (fndecl);\n-      switch (fn)\n-\t{\n-\tcase RS6000_BUILTIN_RSQRTF:\n-\t  if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n-\t      && out_mode == SFmode && out_n == 4\n-\t      && in_mode == SFmode && in_n == 4)\n-\t    return rs6000_builtin_decls[ALTIVEC_BUILTIN_VRSQRTFP];\n-\t  break;\n-\tcase RS6000_BUILTIN_RSQRT:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_RSQRT_2DF];\n-\t  break;\n-\tcase RS6000_BUILTIN_RECIPF:\n-\t  if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n-\t      && out_mode == SFmode && out_n == 4\n-\t      && in_mode == SFmode && in_n == 4)\n-\t    return rs6000_builtin_decls[ALTIVEC_BUILTIN_VRECIPFP];\n-\t  break;\n-\tcase RS6000_BUILTIN_RECIP:\n-\t  if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t      && out_mode == DFmode && out_n == 2\n-\t      && in_mode == DFmode && in_n == 2)\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_RECIP_V2DF];\n-\t  break;\n-\tdefault:\n-\t  break;\n+      break;\n+    CASE_CFN_COPYSIGN:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_CPSGNDP];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_CPSGNSP];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[ALTIVEC_BUILTIN_COPYSIGN_V4SF];\n+      break;\n+    CASE_CFN_POPCOUNT:\n+      if (TARGET_P8_VECTOR && in_mode == out_mode && out_n == in_n)\n+\t{\n+\t  if (out_mode == QImode && out_n == 16)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTB];\n+\t  else if (out_mode == HImode && out_n == 8)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTH];\n+\t  else if (out_mode == SImode && out_n == 4)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTW];\n+\t  else if (out_mode == DImode && out_n == 2)\n+\t    return rs6000_builtin_decls[P8V_BUILTIN_VPOPCNTD];\n \t}\n+      break;\n+    CASE_CFN_SQRT:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVSQRTDP];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVSQRTSP];\n+      break;\n+    CASE_CFN_CEIL:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRDPIP];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRSPIP];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[ALTIVEC_BUILTIN_VRFIP];\n+      break;\n+    CASE_CFN_FLOOR:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRDPIM];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRSPIM];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[ALTIVEC_BUILTIN_VRFIM];\n+      break;\n+    CASE_CFN_FMA:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVMADDDP];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVMADDSP];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[ALTIVEC_BUILTIN_VMADDFP];\n+      break;\n+    CASE_CFN_TRUNC:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRDPIZ];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRSPIZ];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[ALTIVEC_BUILTIN_VRFIZ];\n+      break;\n+    CASE_CFN_NEARBYINT:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && flag_unsafe_math_optimizations\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRDPI];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && flag_unsafe_math_optimizations\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRSPI];\n+      break;\n+    CASE_CFN_RINT:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && !flag_trapping_math\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRDPIC];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && !flag_trapping_math\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_XVRSPIC];\n+      break;\n+    default:\n+      break;\n     }\n \n   /* Generate calls to libmass if appropriate.  */\n   if (rs6000_veclib_handler)\n-    return rs6000_veclib_handler (fndecl, type_out, type_in);\n+    return rs6000_veclib_handler (combined_fn (fn), type_out, type_in);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Implement TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION.  */\n \n+static tree\n+rs6000_builtin_md_vectorized_function (tree fndecl, tree type_out,\n+\t\t\t\t       tree type_in)\n+{\n+  machine_mode in_mode, out_mode;\n+  int in_n, out_n;\n+\n+  if (TARGET_DEBUG_BUILTIN)\n+    fprintf (stderr, \"rs6000_builtin_md_vectorized_function (%s, %s, %s)\\n\",\n+\t     IDENTIFIER_POINTER (DECL_NAME (fndecl)),\n+\t     GET_MODE_NAME (TYPE_MODE (type_out)),\n+\t     GET_MODE_NAME (TYPE_MODE (type_in)));\n+\n+  if (TREE_CODE (type_out) != VECTOR_TYPE\n+      || TREE_CODE (type_in) != VECTOR_TYPE\n+      || !TARGET_VECTORIZE_BUILTINS)\n+    return NULL_TREE;\n+\n+  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  out_n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+\n+  enum rs6000_builtins fn\n+    = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+  switch (fn)\n+    {\n+    case RS6000_BUILTIN_RSQRTF:\n+      if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[ALTIVEC_BUILTIN_VRSQRTFP];\n+      break;\n+    case RS6000_BUILTIN_RSQRT:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_RSQRT_2DF];\n+      break;\n+    case RS6000_BUILTIN_RECIPF:\n+      if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls[ALTIVEC_BUILTIN_VRECIPFP];\n+      break;\n+    case RS6000_BUILTIN_RECIP:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls[VSX_BUILTIN_RECIP_V2DF];\n+      break;\n+    default:\n+      break;\n+    }\n   return NULL_TREE;\n }\n \f"}, {"sha": "bde808b6180abd930a8af6363e0dac5a2c2d31ec", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -5673,11 +5673,17 @@ If this hook is defined, the autovectorizer will use the\n conversion. Otherwise, it will return @code{NULL_TREE}.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (tree @var{fndecl}, tree @var{vec_type_out}, tree @var{vec_type_in})\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (unsigned @var{code}, tree @var{vec_type_out}, tree @var{vec_type_in})\n This hook should return the decl of a function that implements the\n-vectorized variant of the builtin function with builtin function code\n+vectorized variant of the function with the @code{combined_fn} code\n @var{code} or @code{NULL_TREE} if such a function is not available.\n-The value of @var{fndecl} is the builtin function declaration.  The\n+The return type of the vectorized function shall be of vector type\n+@var{vec_type_out} and the argument types should be @var{vec_type_in}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION (tree @var{fndecl}, tree @var{vec_type_out}, tree @var{vec_type_in})\n+This hook should return the decl of a function that implements the\n+vectorized variant of target built-in function @code{fndecl}.  The\n return type of the vectorized function shall be of vector type\n @var{vec_type_out} and the argument types should be @var{vec_type_in}.\n @end deftypefn"}, {"sha": "0677fc1c8cc16ff428e337f791cbb6810de97f40", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -4235,6 +4235,8 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n \n+@hook TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION\n+\n @hook TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT\n \n @hook TARGET_VECTORIZE_PREFERRED_SIMD_MODE"}, {"sha": "b0ad09e0fed6a069d9d4b9cee85abb0a901ac959", "filename": "gcc/target.def", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -1728,18 +1728,28 @@ the argument @var{OFF} to @code{REALIGN_LOAD}, in which case the low\\n\\\n log2(@var{VS}) @minus{} 1 bits of @var{addr} will be considered.\",\n  tree, (void), NULL)\n \n-/* Returns a code for builtin that realizes vectorized version of\n-   function, or NULL_TREE if not available.  */\n+/* Returns a built-in function that realizes the vectorized version of\n+   a target-independent function, or NULL_TREE if not available.  */\n DEFHOOK\n (builtin_vectorized_function,\n  \"This hook should return the decl of a function that implements the\\n\\\n-vectorized variant of the builtin function with builtin function code\\n\\\n+vectorized variant of the function with the @code{combined_fn} code\\n\\\n @var{code} or @code{NULL_TREE} if such a function is not available.\\n\\\n-The value of @var{fndecl} is the builtin function declaration.  The\\n\\\n+The return type of the vectorized function shall be of vector type\\n\\\n+@var{vec_type_out} and the argument types should be @var{vec_type_in}.\",\n+ tree, (unsigned code, tree vec_type_out, tree vec_type_in),\n+ default_builtin_vectorized_function)\n+\n+/* Returns a built-in function that realizes the vectorized version of\n+   a target-specific function, or NULL_TREE if not available.  */\n+DEFHOOK\n+(builtin_md_vectorized_function,\n+ \"This hook should return the decl of a function that implements the\\n\\\n+vectorized variant of target built-in function @code{fndecl}.  The\\n\\\n return type of the vectorized function shall be of vector type\\n\\\n @var{vec_type_out} and the argument types should be @var{vec_type_in}.\",\n  tree, (tree fndecl, tree vec_type_out, tree vec_type_in),\n- default_builtin_vectorized_function)\n+ default_builtin_md_vectorized_function)\n \n /* Returns a function declaration for a builtin that realizes the\n    vector conversion, or NULL_TREE if not available.  */"}, {"sha": "01d3686299b5d1aa4fe8ff82f29d9b6a4cb2d08a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -534,9 +534,15 @@ default_invalid_within_doloop (const rtx_insn *insn)\n /* Mapping of builtin functions to vectorized variants.  */\n \n tree\n-default_builtin_vectorized_function (tree fndecl ATTRIBUTE_UNUSED,\n-\t\t\t\t     tree type_out ATTRIBUTE_UNUSED,\n-\t\t\t\t     tree type_in ATTRIBUTE_UNUSED)\n+default_builtin_vectorized_function (unsigned int, tree, tree)\n+{\n+  return NULL_TREE;\n+}\n+\n+/* Mapping of target builtin functions to vectorized variants.  */\n+\n+tree\n+default_builtin_md_vectorized_function (tree, tree, tree)\n {\n   return NULL_TREE;\n }"}, {"sha": "f5d04e6c91494dc5ae3e50bf9348c3ef69fa6e63", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -83,7 +83,8 @@ extern bool default_has_ifunc_p (void);\n \n extern const char * default_invalid_within_doloop (const rtx_insn *);\n \n-extern tree default_builtin_vectorized_function (tree, tree, tree);\n+extern tree default_builtin_vectorized_function (unsigned int, tree, tree);\n+extern tree default_builtin_md_vectorized_function (tree, tree, tree);\n \n extern tree default_builtin_vectorized_conversion (unsigned int, tree, tree);\n "}, {"sha": "0a3cac5c44683f4df7bed5c6739b108696f1a3d3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10766209ec09ef42deb8cb877f1893a8a03f2a97/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=10766209ec09ef42deb8cb877f1893a8a03f2a97", "patch": "@@ -1648,20 +1648,20 @@ vect_finish_stmt_generation (gimple *stmt, gimple *vec_stmt,\n tree\n vectorizable_function (gcall *call, tree vectype_out, tree vectype_in)\n {\n-  tree fndecl = gimple_call_fndecl (call);\n-\n-  /* We only handle functions that do not read or clobber memory -- i.e.\n-     const or novops ones.  */\n-  if (!(gimple_call_flags (call) & (ECF_CONST | ECF_NOVOPS)))\n+  /* We only handle functions that do not read or clobber memory.  */\n+  if (gimple_vuse (call))\n     return NULL_TREE;\n \n-  if (!fndecl\n-      || TREE_CODE (fndecl) != FUNCTION_DECL\n-      || !DECL_BUILT_IN (fndecl))\n-    return NULL_TREE;\n+  combined_fn fn = gimple_call_combined_fn (call);\n+  if (fn != CFN_LAST)\n+    return targetm.vectorize.builtin_vectorized_function\n+      (fn, vectype_out, vectype_in);\n+\n+  if (gimple_call_builtin_p (call, BUILT_IN_MD))\n+    return targetm.vectorize.builtin_md_vectorized_function\n+      (gimple_call_fndecl (call), vectype_out, vectype_in);\n \n-  return targetm.vectorize.builtin_vectorized_function (fndecl, vectype_out,\n-\t\t\t\t\t\t        vectype_in);\n+  return NULL_TREE;\n }\n \n "}]}