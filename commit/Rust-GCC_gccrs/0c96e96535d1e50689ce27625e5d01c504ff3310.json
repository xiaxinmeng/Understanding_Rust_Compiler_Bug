{"sha": "0c96e96535d1e50689ce27625e5d01c504ff3310", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5NmU5NjUzNWQxZTUwNjg5Y2UyNzYyNWU1ZDAxYzUwNGZmMzMxMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-09-22T15:13:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-09-22T15:13:42Z"}, "message": "c-common.c (format_attribute_table): Remove decl.\n\n\t* c-common.c (format_attribute_table): Remove decl.\n\t* tree.h (format_attribute_table, lang_attribute_table): New decls.\n\t(lang_attribute_common): Likewise.\n\nFrom-SVN: r45754", "tree": {"sha": "6b34238871ed2a82c32557e0119183a69fd00ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b34238871ed2a82c32557e0119183a69fd00ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c96e96535d1e50689ce27625e5d01c504ff3310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c96e96535d1e50689ce27625e5d01c504ff3310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c96e96535d1e50689ce27625e5d01c504ff3310", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c96e96535d1e50689ce27625e5d01c504ff3310/comments", "author": null, "committer": null, "parents": [{"sha": "aaed02065e41d8385592ce84f9585c88eac7d2f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaed02065e41d8385592ce84f9585c88eac7d2f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaed02065e41d8385592ce84f9585c88eac7d2f5"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "e3f1a65bac87520faf7ad75e80e44d7dd96757e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c96e96535d1e50689ce27625e5d01c504ff3310/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c96e96535d1e50689ce27625e5d01c504ff3310/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c96e96535d1e50689ce27625e5d01c504ff3310", "patch": "@@ -1,5 +1,9 @@\n Sat Sep 22 09:09:32 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* c-common.c (format_attribute_table): Remove decl.\n+\t* tree.h (format_attribute_table, lang_attribute_table): New decls.\n+\t(lang_attribute_common): Likewise.\n+\n \t* function.c (fix_lexical_address): Use set_mem_alias_set.\n \t(expand_function_start): Likewise.\n \t* config/alpha/alpha.h (SETUP_INCOMING_VARARGS): Likewise."}, {"sha": "74a55525015525223ab650e0ebf98b08af319196", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c96e96535d1e50689ce27625e5d01c504ff3310/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c96e96535d1e50689ce27625e5d01c504ff3310/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0c96e96535d1e50689ce27625e5d01c504ff3310", "patch": "@@ -3784,8 +3784,6 @@ static const struct attribute_spec c_format_attribute_table[] =\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n-extern const struct attribute_spec *format_attribute_table;\n-\n /* Do the parts of lang_init common to C and C++.  */\n void\n c_common_lang_init ()"}, {"sha": "b95a4aaca40f7bc6c3c547e2a65381d349c6164e", "filename": "gcc/tree.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c96e96535d1e50689ce27625e5d01c504ff3310/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c96e96535d1e50689ce27625e5d01c504ff3310/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0c96e96535d1e50689ce27625e5d01c504ff3310", "patch": "@@ -2907,8 +2907,26 @@ extern rtx emit_line_note\t\tPARAMS ((const char *, int));\n extern int setjmp_call_p\t\tPARAMS ((tree));\n \n /* In attribs.c.  */\n+\n+/* Process the attributes listed in ATTRIBUTES and install them in *NODE,\n+   which is either a DECL (including a TYPE_DECL) or a TYPE.  If a DECL,\n+   it should be modified in place; if a TYPE, a copy should be created\n+   unless ATTR_FLAG_TYPE_IN_PLACE is set in FLAGS.  FLAGS gives further\n+   information, in the form of a bitwise OR of flags in enum attribute_flags\n+   from tree.h.  Depending on these flags, some attributes may be\n+   returned to be applied at a later stage (for example, to apply\n+   a decl attribute to the declaration rather than to its type).  */\n extern tree decl_attributes\t\tPARAMS ((tree *, tree, int));\n \n+/* Table of machine-independent attributes for checking formats, if used.  */\n+extern const struct attribute_spec *format_attribute_table;\n+\n+/* Table of machine-independent attributes for a particular language.  */\n+extern const struct attribute_spec *lang_attribute_table;\n+\n+/* Flag saying whether common language attributes are to be supported.  */\n+extern int lang_attribute_common;\n+\n /* In front end.  */\n \n extern int mark_addressable\t\tPARAMS ((tree));"}]}