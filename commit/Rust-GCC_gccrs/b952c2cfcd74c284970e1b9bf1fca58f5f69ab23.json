{"sha": "b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1MmMyY2ZjZDc0YzI4NDk3MGUxYjliZjFmY2E1OGY1ZjY5YWIyMw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-10T00:16:47Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-10T00:16:47Z"}, "message": "Daily bump.", "tree": {"sha": "b73d7b203e9ef4730610d52baceb8aef0b5acb79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73d7b203e9ef4730610d52baceb8aef0b5acb79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/comments", "author": null, "committer": null, "parents": [{"sha": "733167f9d5ca5b9417559b7362d91e967be95a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733167f9d5ca5b9417559b7362d91e967be95a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733167f9d5ca5b9417559b7362d91e967be95a01"}], "stats": {"total": 531, "additions": 530, "deletions": 1}, "files": [{"sha": "458989eda3cebd83bb9e0a48b2298ce82cbb2cc0", "filename": "contrib/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,14 @@\n+2020-06-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* gcc-changelog/git_email.py: Set exit status on error.\n+\n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Fix ChangeLog regex in order to\n+\tmatch the top-level ChangeLog.\n+\t* gcc-changelog/test_email.py: Add test.\n+\t* gcc-changelog/test_patches.txt: Likewise.\n+\n 2020-06-02  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Support foo/bar/*: patterns in"}, {"sha": "5f2b16a17a19a680e279316b15b0d6fc8d35f59a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -9,6 +9,95 @@\n \t* config/rs6000/rs6000.c (CLONE_ISA_3_1): New clone support.\n \t(rs6000_clone_map): Add 'future' system target_clones support.\n \n+2020-06-09  Michael Kuhn  <gcc@ikkoku.de>\n+\n+\t* Makefile.in (ZSTD_INC): Define.\n+\t(ZSTD_LIB): Include ZSTD_LDFLAGS.\n+\t(CFLAGS-lto-compress.o): Add ZSTD_INC.\n+\t* configure.ac (ZSTD_CPPFLAGS, ZSTD_LDFLAGS): New variables for\n+\tAC_SUBST.\n+\t* configure: Rebuilt.\n+\n+2020-06-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95552\n+\t* tree.c (walk_tree_1): Call func on the TYPE_DECL of a DECL_EXPR.\n+\n+2020-06-09  Marco Elver  <elver@google.com>\n+\n+\t* params.opt: Define --param=tsan-distinguish-volatile=[0,1].\n+\t* sanitizer.def (BUILT_IN_TSAN_VOLATILE_READ1): Define new\n+\tbuiltin for volatile instrumentation of reads/writes.\n+\t(BUILT_IN_TSAN_VOLATILE_READ2): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_READ4): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_READ8): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_READ16): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_WRITE1): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_WRITE2): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_WRITE4): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_WRITE8): Likewise.\n+\t(BUILT_IN_TSAN_VOLATILE_WRITE16): Likewise.\n+\t* tsan.c (get_memory_access_decl): Argument if access is\n+\tvolatile. If param tsan-distinguish-volatile is non-zero, and\n+\taccess if volatile, return volatile instrumentation decl.\n+\t(instrument_expr): Check if access is volatile.\n+\n+2020-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vectorizable_induction): Remove dead code.\n+\n+2020-06-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp-offload.c (add_decls_addresses_to_decl_constructor,\n+\tomp_finish_file): With in_lto_p, stream out all offload-table\n+\titems even if the symtab_node does not exist.\n+\n+2020-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vect_transform_stmt): Remove dead code.\n+\n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov-dump.c (print_usage): Fix spacing for --raw option\n+\tin --help.\n+\n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* cif-code.def (ATTRIBUTE_MISMATCH): Rename to...\n+\t(SANITIZE_ATTRIBUTE_MISMATCH): ...this.\n+\t* ipa-inline.c (sanitize_attrs_match_for_inline_p):\n+\tHandle all sanitizer options.\n+\t(can_inline_edge_p): Use renamed CIF_* enum value.\n+\n+2020-06-09  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (<optab><mode>2): Add support for\n+\tunpacked vectors.\n+\t(@aarch64_pred_<optab><mode>): Add support for unpacked vectors.\n+\t(@aarch64_bic<mode>): Enable unpacked BIC.\n+\t(*bic<mode>3): Enable unpacked BIC.\n+\n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/95365\n+\t* doc/gcov.texi: Compile and link one example in 2 steps.\n+\n+2020-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95527\n+\t* match.pd (__builtin_ffs (X) cmp CST): New optimizations.\n+\n+2020-06-09  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/ppc-auxv.h (PPC_PLATFORM_FUTURE): Allocate\n+\t'future' PowerPC platform.\n+\t(PPC_FEATURE2_ARCH_3_1): New HWCAP2 bit for ISA 3.1.\n+\t(PPC_FEATURE2_MMA): New HWCAP2 bit for MMA.\n+\t* config/rs6000/rs6000-call.c (cpu_supports_info): Add ISA 3.1 and\n+\tMMA HWCAP2 bits.\n+\t* config/rs6000/rs6000.c (CLONE_ISA_3_1): New clone support.\n+\t(rs6000_clone_map): Add 'future' system target_clones support.\n+\n 2020-06-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR lto/94848"}, {"sha": "51c41f0bb81c4df739feede47a3ca8a09b817ce7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1 +1 @@\n-20200609\n+20200610"}, {"sha": "f125850ccdbefb527bce9cd9edcb1acddbfa8c8a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,281 @@\n+2020-06-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): Add missing call to check\n+\tsubtype conformance of overriding dispatching primitive.\n+\t* sem_eval.adb (Subtypes_Statically_Match): Handle derivations\n+\tof private subtypes.\n+\t* libgnat/g-exptty.adb, libgnat/g-exptty.ads\n+\t(Set_Up_Communications): Fix the profile since null-exclusion is\n+\tmissing in the access type formals.\n+\t* sem_disp.ads (Check_Operation_From_Private_View): Adding\n+\tdocumentation.\n+\n+2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (XEINFO section): Update format description.\n+\t(Is_Subprogram_Or_Entry): Move pragma to regular section.\n+\t(Is_Subprogram_Or_Generic_Subprogram): Likewise.\n+\t* xeinfo.adb (Get_B4): Rename to...\n+\t(Get_B0): ...this.\n+\t(Translate_Expr): New procedure extracted from...\n+\t(XEinfo): ...here.  Try to apply Get_B0 first and then\n+\tcall Translate_Expr to translate supported constructs.\n+\n+2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Freeze_Subprogram): Deal with convention C_Family.\n+\t* freeze.adb (Freeze_Profile): Likewise.  Add missing guard.\n+\t* sem_mech.adb (Set_Mechanisms): Likewise.\n+\t* lib-xref.adb (Output_Import_Export_Info): Ditto for C_Variadic.\n+\t* repinfo.adb (List_Subprogram_Info): Likewise.\n+\t* sem_prag.adb (Set_Convention_From_Pragma): Move main checks for\n+\tStdcall to...\n+\t(Process_Convention): ...here.  Add checks for C_Variadic.\n+\t* snames.ads-tmpl: Add Name_C_Variadic_0 .. Name_C_Variadic_16.\n+\tUse consistent format for subtype declarations.\n+\t(Convention_Id): Add Convention_C_Variadic_0 .. C_Variadic_16\n+\tand move Convention_CPP up.\n+\t(Convention_C_Family): New subtype of Convention_Id.\n+\t(Convention_C_Variadic): Likewise.\n+\t(Foreign_Convention): Use explicit upper bound.\n+\tAdd pragma Inline for Is_Configuration_Pragma_Name,\n+\tIs_Function_Attribute_Name, Is_Internal_Attribute_Name\n+\tand Is_Procedure_Attribute_Name.\n+\t* snames.adb-tmpl (Get_Convention_Id): Deal with Name_Variadic_n.\n+\t(Get_Convention_Name): Deal with Convention_Variadic_n.\n+\t* types.h (Convention_Id): New typedef.\n+\t* xsnamest.adb (Name2): New variable.\n+\t(Is_Conv): New pattern.\n+\t(Get_Subt1): Likewise.\n+\t(Get_Subt2): Likewise.\n+\tOutput subtypes of Convention_Id into the C header file.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch3.adb, exp_ch4.adb, exp_ch6.adb, exp_ch9.adb,\n+\texp_disp.adb, exp_util.adb: Add comments related to errors that\n+\tshould be moved to semantic analysis. Also replace \"?\" with \"??\"\n+\tin warning messages.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-strunb__shared.ads, libgnat/a-strunb__shared.adb\n+\t(Reference, Unreference): No-op for Empty_Shared_String.\n+\tRemove unneeded calls to Reference.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment): Remove kludge for\n+\tAI05-0087.\n+\t* sem_ch12.adb (Validate_Derived_Type_Instance): Implement\n+\tAI05-0087 retroactively since it's a binding interpretation.\n+\n+2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Has_Foreign_Convention): Fix description.\n+\t(Component_Alignment): Move around.\n+\t(Has_DIC): Likewise.\n+\t(Has_Interrupt_Handler): Likewise.\n+\t(Has_Invariants): Likewise.\n+\t(Is_Atomic_Or_VFA): Likewise.\n+\t(Next_Index): Likewise.\n+\t(Scope_Depth): Likewise.\n+\t(Init_Component_Size): Likewise.\n+\t(Init_Component_Location): Likewise.\n+\t(Init_Size): Likewise.\n+\t(Inline Pragmas for functions): Add Corresponding_Function,\n+\tCorresponding_Procedure, Entry_Max_Queue_Lengths_Array,\n+\tFinalize_Storage_Only, Has_DIC, Has_Invariants,\n+\tInitialization_Statements, Is_Anonymous_Access_Type,\n+\tNext_Stored_Discriminant, Address_Clause, Alignment_Clause,\n+\tFloat_Rep, Has_Foreign_Convention, Has_Non_Limited_View,\n+\tIs_Constant_Object, Is_Discriminal, Is_Finalizer, Is_Null_State,\n+\tIs_Prival, Is_Protected_Component, Is_Protected_Record_Type,\n+\tIs_Subprogram_Or_Entry, Is_Task_Record_Type, Size_Clause,\n+\tStream_Size_Clause, Type_High_Bound, Type_Low_Bound, Known_*,\n+\tUnknown_*.\n+\t(Inline Pragmas for procedures): Add Set_Corresponding_Function,\n+\tSet_Corresponding_Procedure, Set_Finalize_Storage_Only,\n+\tSet_Float_Rep, Set_Initialization_Statements,\n+\tInit_Normalized_First_Bit, Init_Normalized_Position,\n+\tInit_Normalized_Position_Max.\n+\t* einfo.adb (Was_Hidden): Move around.\n+\t(Is_Packed_Array): Likewise.\n+\t(Model_Emin_Value): Likewise.\n+\t(Model_Epsilon_Value): Likewise.\n+\t(Model_Mantissa_Value): Likewise.\n+\t(Model_Small_Value): Likewise.\n+\n+2020-06-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Require\n+\texact match between formal and actual for aspects Atomic and\n+\tVolatile only for formal derived types.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_util.adb (Side_Effect_Free): Improve handling of\n+\tN_Aggregate.\n+\n+2020-06-09  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Qualified_Expression): Use Subtype_Mark\n+\ttype.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Max_Aggregate_Size): New function to factorize\n+\tcode.\n+\t(Convert_To_Positional, Aggr_Size_OK): Use Max_Aggregate_Size.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Set_Debug_Info_Defining_Id): New.\n+\t* exp_ch3.adb, exp_ch8.adb: Call Set_Debug_Info_Defining_Id when\n+\trelevant.\n+\n+2020-06-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* einfo.ads (Returns_By_Ref): Modify documentation to reflect\n+\tthat Returns_By_Ref can be applied to E_Subprogram_Type\n+\tentities.\n+\n+2020-06-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Modify expansion\n+\tof 'Overlaps_Storage to take into account zero sized arrays.\n+\n+2020-06-09  Bob Duff  <duff@adacore.com>\n+\n+\t* bindo-graphs.adb, bindo-graphs.ads: For each invocation graph,\n+\trecord the corresponding library graph.\n+\t* bindo-writers.adb (Write_Invocation_Graph_Vertex): Print the\n+\tlib item name. Remove library graph parameters.\n+\t* bindo-augmentors.adb, bindo-augmentors.ads,\n+\tbindo-builders.adb, bindo-diagnostics.adb,\n+\tbindo-diagnostics.ads, bindo-elaborators.adb: Remove library\n+\tgraph parameters.\n+\n+2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Apply_Predicate_Check): Extend trick used for\n+\taggregates to qualified aggregates and object declarations\n+\t* einfo.ads (Has_Own_DIC): Mention the underlying full view.\n+\t(Has_Own_Invariants): Likewise.\n+\t(Has_Predicates): Likewise.\n+\t* exp_util.adb (Build_DIC_Procedure_Declaration): Do not deal\n+\twith base types explicitly but with underlying full views.\n+\t(Build_Invariant_Procedure_Declaration): Likewise.\n+\t* sem_ch13.adb (Build_Predicate_Functions): Do not deal with\n+\tthe full view manually but call Propagate_Predicate_Attributes\n+\tto propagate attributes to views.\n+\t(Build_Predicate_Function_Declaration): Likewise.\n+\t* sem_ch3.adb (Build_Assertion_Bodies_For_Type): Build bodies\n+\tfor private full views with an underlying full view.\n+\t(Build_Derived_Private_Type): Small comment tweak.\n+\t(Complete_Private_Subtype): Call Propagate_Predicate_Attributes.\n+\t(Process_Full_View): Do not deal with base types explicitly for\n+\tDIC and Invariant attributes.  Deal with underlying full views\n+\tfor them.  Call Propagate_Predicate_Attributes and deal with\n+\tunderlying full views for them.\n+\t* sem_ch7.adb (Preserve_Full_Attributes): Do not cross propagate\n+\tDIC and Invariant attributes between full type and its base type.\n+\tPropagate Predicate attributes from the full to the private view.\n+\t* sem_ch9.adb (Analyze_Protected_Type_Declaration): Likewise.\n+\t(Analyze_Task_Type_Declaration): Likewise.\n+\t* sem_util.ads (Get_Views): Remove Full_Base parameter and add\n+\tUFull_Typ parameter.\n+\t(Propagate_Predicate_Attributes): New procedure.\n+\t* sem_util.adb (Get_Views): Remove Full_Base parameter and add\n+\tUFull_Typ parameter.  Retrieve the Corresponding_Record_Type\n+\tfrom the underlying full view, if any.\n+\t(Propagate_DIC_Attributes): Remove useless tests.\n+\t(Propagate_Invariant_Attributes): Likewise.\n+\t(Propagate_Predicate_Attributes): New procedure.\n+\n+2020-06-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Predicated_Loop): Perserve the original\n+\tloop identifier within the expansion.\n+\n+2020-06-09  Bob Duff  <duff@adacore.com>\n+\n+\t* bindo-graphs.ads (Library_Graph_Edge_Kind): Reorder enumerals\n+\tto reflect the order of adding edges. Clarify comments.\n+\t* bindo-graphs.adb (Add_Edge_Kind_Check): Correct the\n+\tassertions.  Reorder the \"when\"s to match the order of adding\n+\tedges, and therefore the order of enumerals in type\n+\tLibrary_Graph_Edge_Kind.  Change names to \"Old_\" and \"New_\" to\n+\tclarify what's what.  Combine Invocation_Edge into the \"<=\"\n+\ttest.  Fix the \"raise Program_Error\" message, which was\n+\tbackwards.\n+\n+2020-06-09  Bob Duff  <duff@adacore.com>\n+\n+\t* bindo-graphs.adb (Add_Edge_Kind_Check): Add the Image of the\n+\told and new Kinds to the raise Program_Error message.\n+\n+2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Is_Visible_Component): Do not special-case\n+\tbodies of instances.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_In): Fix handling of null exclusion.\n+\n+2020-06-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Require\n+\texact match between formal and actual for aspects Atomic,\n+\tAtomic_Component, Volatile, and Volatile_Components.\n+\n+2020-06-09  Bob Duff  <duff@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Add documentation for\n+\tthe --no-separate-return switch of gnatpp.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Add proper\n+\twarning tag.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_type.adb (Covers): Fix implementation of AI05-0149.\n+\t* sem_res.adb: Fix typo.\n+\n+2020-06-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Master_Renaming): Make name in renaming\n+\tdeclaration unique by adding a numeric suffix, to prevent\n+\taccidental name conflict when several instantiations of a\n+\tpackage containing an access_to_incomplete type that designate\n+\ttasks appear in the same scope.\n+\n+2020-06-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnarl/a-synbar.ads, libgnarl/a-synbar.adb,\n+\tlibgnarl/a-synbar__posix.ads, libgnarl/a-synbar__posix.adb\n+\t(Ada.Synchronous_Barriers): Annotate with SPARK_Mode => Off.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Relational_Op, Eval_String_Literal,\n+\tEval_Type_Conversion): Relax rules on relational operators and\n+\ttype conversions of static string types.\n+\n+2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Partially_Initialized_Type):\n+\tTake Default_Value and Default_Component_Value into account.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Update comment.\n+\n+2020-06-09  Bob Duff  <duff@adacore.com>\n+\n+\t* bindo-graphs.adb (Add_Edge_Kind_Check): Disable failing part\n+\tof the assertion.\n+\n 2020-06-08  Steve Baird  <baird@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma.Set_Ravenscar_Profile): Add"}, {"sha": "b9da4b9fa376469af20bfbe8692922d086420dd1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,9 @@\n+2020-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/95580\n+\t* c-pretty-print.c (c_pretty_printer::unary_expression): Handle the\n+\tcase when MEM_REF's first argument has type pointer to incomplete type.\n+\n 2020-06-05  Jason Merrill  <jason@redhat.com>\n \n \t* c-pretty-print.c (pp_c_additive_expression): Handle negative"}, {"sha": "0fc815a81b0f4370ed7834dd68e3ad207b303fa8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,16 @@\n+2020-06-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95137\n+\t* coroutines.cc (expand_one_await_expression): Build separate\n+\tDTOR trees for the awaitable object on the destroy and resume\n+\tpaths.\n+\n+2020-06-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95552\n+\t* cp-gimplify.c (predeclare_vla): Only predeclare a VLA if it's\n+\twrapped in a pointer type.\n+\n 2020-06-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95369"}, {"sha": "110e9ad55f8fc3889340bc11f2c2d640f33a560c", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,18 @@\n+2020-06-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 13d67c575.\n+\t* d-builtins.cc (build_frontend_type): Update call to\n+\tTypeVector::create.\n+\t* d-frontend.cc (Global::_init): Move setting of errorLimit to ...\n+\t* d-lang.cc (d_init_options): ... here.  Update for new field\n+\tlocation of errorLimit.\n+\t(d_post_options): Likewise.\n+\t* d-port.cc (Port::readwordLE): Update signature.\n+\t(Port::readwordBE): Likewise.\n+\t(Port::readlongLE): Likewise.\n+\t(Port::readlongBE): Likewise.\n+\t* decl.cc (get_symbol_decl): Update for new field types.\n+\n 2020-06-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/95573"}, {"sha": "7a33e89b5fa2618ddfb7b959a6392cfd1e73cf23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -3,6 +3,81 @@\n \t* gcc.target/powerpc/clone3.c: New test for using 'future' with\n \tthe target_clones attribute.\n \n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/asan/inline-kernel.c: Add missing\n+\t-fno-sanitize-address option.\n+\n+2020-06-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95552\n+\t* g++.dg/ext/vla23.C: New test.\n+\n+2020-06-09  Marco Elver  <elver@google.com>\n+\n+\t* c-c++-common/tsan/volatile.c: New test.\n+\n+2020-06-09  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_powerpc_pcrel):\n+\tNew.\n+\t(check_effective_target_powerpc_prefixed_addr): New.\n+\n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/asan/inline.c: New test.\n+\t* c-c++-common/asan/inline-kernel.c: New test.\n+\t* c-c++-common/tsan/inline.c: New test.\n+\t* c-c++-common/ubsan/inline.c: New test.\n+\n+2020-06-09  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* gcc.target/aarch64/sve/logical_unpacked_abs.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_bic_1.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_bic_2.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_bic_3.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_bic_4.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_neg.c: New test.\n+\t* gcc.target/aarch64/sve/logical_unpacked_not.c: New test.\n+\n+2020-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/95580\n+\t* gcc.dg/pr95580.c: New test.\n+\n+2020-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95527\n+\t* gcc.dg/tree-ssa/pr95527.c: New test.\n+\n+2020-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/torture/pr95493.C: Add -Wno-psabi -w to dg-additional-options.\n+\n+2020-06-09  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* g++.target/xtensa/pr95571.C: New test.\n+\t* g++.target/xtensa/xtensa.exp: New testsuite.\n+\n+2020-06-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/fold-vec-perm-char.c: Allow both vperm/vpermr and\n+\txxperm/xxpermr.\n+\t* gcc.target/powerpc/fold-vec-perm-double.c: Ditto.\n+\t* gcc.target/powerpc/fold-vec-perm-float.c: Ditto.\n+\t* gcc.target/powerpc/fold-vec-perm-int.c: Ditto.\n+\t* gcc.target/powerpc/fold-vec-perm-longlong.c: Ditto.\n+\t* gcc.target/powerpc/fold-vec-perm-pixel.c: Ditto.\n+\t* gcc.target/powerpc/fold-vec-perm-short.c: Ditto.\n+\t* gcc.target/powerpc/lvsl-lvsr.c: Ditto.\n+\t* gcc.target/powerpc/vec-mult-char-2.c: Ditto.\n+\t* gcc.target/powerpc/vsx-vector-6.p9.c: Also allow xxpermr.\n+\n+2020-06-09  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/clone3.c: New test for using 'future' with\n+\tthe target_clones attribute.\n+\n 2020-06-09  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* lib/target-supports.exp (check_effective_target_powerpc_pcrel):"}, {"sha": "e3456b657ae14dae2dfbcd4d76f6aeab9a56a987", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,17 @@\n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/95494\n+\t* libgcov-driver.c (write_top_counters): Cast first to\n+\tintptr_t as sizeof(*) != sizeof(gcov_type).\n+\t* libgcov.h (gcov_counter_set_if_null): Remove.\n+\t(gcov_topn_add_value): Cast first to intptr_t and update\n+\tlinked list directly.\n+\n+2020-06-09  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/unwind-dw2-xtensa.c (uw_install_context): Merge\n+\twith uw_install_context_1.\n+\n 2020-06-04  Andreas Schwab  <schwab@suse.de>\n \n \tPR target/59230"}, {"sha": "bbf95fbbdf27d59faf628d68ca9ecb5681dc118d", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,20 @@\n+2020-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* asan/Makefile.am: Replace gnu++11 with gnu++14.\n+\t* interception/Makefile.am: Likewise.\n+\t* libbacktrace/Makefile.am: Likewise.\n+\t* lsan/Makefile.am: Likewise.\n+\t* sanitizer_common/Makefile.am: Likewise.\n+\t* tsan/Makefile.am: Likewise.\n+\t* ubsan/Makefile.am: Likewise.\n+\t* asan/Makefile.in: Regenerate.\n+\t* interception/Makefile.in: Likewise.\n+\t* libbacktrace/Makefile.in: Likewise.\n+\t* lsan/Makefile.in: Likewise.\n+\t* sanitizer_common/Makefile.in: Likewise.\n+\t* tsan/Makefile.in: Likewise.\n+\t* ubsan/Makefile.in: Likewise.\n+\n 2020-06-02  Martin Liska  <mliska@suse.cz>\n \n \t* LOCAL_PATCHES: Update hash of local patches."}, {"sha": "b068f4f04513f317ee857881c62d2e6822996e7c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b952c2cfcd74c284970e1b9bf1fca58f5f69ab23/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b952c2cfcd74c284970e1b9bf1fca58f5f69ab23", "patch": "@@ -1,3 +1,14 @@\n+2020-06-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (move_iterator::operator=): Define.\n+\t* testsuite/24_iterators/move_iterator/dr3265.cc: New test.\n+\n+2020-06-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/optional (bad_optional_access): Define default\n+\tconstructor and destructor as defaulted.\n+\t* testsuite/20_util/optional/bad_access.cc: New test.\n+\n 2020-06-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/default_delete/48631_neg.cc: Adjust dg-error"}]}