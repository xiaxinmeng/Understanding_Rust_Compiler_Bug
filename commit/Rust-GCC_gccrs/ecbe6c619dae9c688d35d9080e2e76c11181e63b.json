{"sha": "ecbe6c619dae9c688d35d9080e2e76c11181e63b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiZTZjNjE5ZGFlOWM2ODhkMzVkOTA4MGUyZTc2YzExMTgxZTYzYg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-07-27T01:45:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-07-27T01:45:41Z"}, "message": "reload.c (find_reloads_toplev): Reload a paradoxical subreg of a mem if the address is a mode_dependent_address_p.\n\n        * reload.c (find_reloads_toplev): Reload a paradoxical subreg of a\n        mem if the address is a mode_dependent_address_p.\n\nFrom-SVN: r35280", "tree": {"sha": "b5fd8f2d6936fa8632e177ad7b97cd1f5be05964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5fd8f2d6936fa8632e177ad7b97cd1f5be05964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecbe6c619dae9c688d35d9080e2e76c11181e63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbe6c619dae9c688d35d9080e2e76c11181e63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbe6c619dae9c688d35d9080e2e76c11181e63b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbe6c619dae9c688d35d9080e2e76c11181e63b/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc5f1cca41afa1c7635156a1eaa81d9050a5d0ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5f1cca41afa1c7635156a1eaa81d9050a5d0ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5f1cca41afa1c7635156a1eaa81d9050a5d0ab"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "2ee5949ab066188dbc27b84be83f944f6bc1a74d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbe6c619dae9c688d35d9080e2e76c11181e63b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbe6c619dae9c688d35d9080e2e76c11181e63b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecbe6c619dae9c688d35d9080e2e76c11181e63b", "patch": "@@ -1,3 +1,8 @@\n+Wed Jul 26 19:44:05 2000   Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* reload.c (find_reloads_toplev): Reload a paradoxical subreg of a\n+\tmem if the address is a mode_dependent_address_p.\n+\n 2000-07-26  Kazu Hirata  <kazu@hxi.com>\n \n \t* h8300.c (print_operand): Print \":8\" when the 'R' operand is"}, {"sha": "d519708408e7c67fa22114738bc1f351d54b164d", "filename": "gcc/reload.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbe6c619dae9c688d35d9080e2e76c11181e63b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbe6c619dae9c688d35d9080e2e76c11181e63b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=ecbe6c619dae9c688d35d9080e2e76c11181e63b", "patch": "@@ -4335,6 +4335,25 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest, insn,\n \tx = find_reloads_subreg_address (x, 1, opnum, type, ind_levels,\n \t\t\t\t\t insn);\n     }\n+  else if (code == SUBREG && GET_CODE (SUBREG_REG (x)) == MEM\n+\t   && (GET_MODE_SIZE (GET_MODE (x))\n+\t       > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n+\t   && mode_dependent_address_p (XEXP (SUBREG_REG (x), 0)))\n+    {\n+      /* A paradoxical subreg will simply have the mode of the access\n+\t changed, so we need to reload such a memory operand to stabilize\n+\t the meaning of the memory access.  */\n+      enum machine_mode subreg_mode = GET_MODE (SUBREG_REG (x));\n+\n+      if (is_set_dest)\n+\tpush_reload (NULL_RTX, SUBREG_REG (x), NULL_PTR, &SUBREG_REG (x),\n+\t\t     find_valid_class (subreg_mode, SUBREG_WORD (x)),\n+\t\t     VOIDmode, subreg_mode, 0, 0, opnum, type);\n+      else\n+\tpush_reload (SUBREG_REG (x), NULL_RTX, &SUBREG_REG (x), NULL_PTR,\n+\t\t     find_valid_class (subreg_mode, SUBREG_WORD (x)),\n+\t\t     subreg_mode, VOIDmode, 0, 0, opnum, type);\n+    }\n \n   for (copied = 0, i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n@@ -5530,7 +5549,7 @@ find_reloads_subreg_address (x, force_replace, opnum, type,\n \f\n /* Substitute into the current INSN the registers into which we have reloaded\n    the things that need reloading.  The array `replacements'\n-   says contains the locations of all pointers that must be changed\n+   contains the locations of all pointers that must be changed\n    and says what to replace them with.\n \n    Return the rtx that X translates into; usually X, but modified.  */"}]}