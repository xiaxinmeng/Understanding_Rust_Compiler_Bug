{"sha": "14a43348bc523d889df7918ae8672b233b2ccf37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRhNDMzNDhiYzUyM2Q4ODlkZjc5MThhZTg2NzJiMjMzYjJjY2YzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-08-24T12:29:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-08-24T12:29:14Z"}, "message": "expr.c (store_expr): Optimize initialization of an array with STRING_CST.\n\n\t* expr.c (store_expr): Optimize initialization of an array\n\twith STRING_CST.\n\t* expr.h (builtin_strncpy_read_str): New prototype.\n\t* builtins.c (builtin_strncpy_read_str): Remove prototype.\n\tNo longer static.\n\n\t* gcc.dg/array-init-1.c: New test.\n\nFrom-SVN: r127769", "tree": {"sha": "e71678ea0f33cc3508fd3fe0dc995e4b09ea4872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e71678ea0f33cc3508fd3fe0dc995e4b09ea4872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14a43348bc523d889df7918ae8672b233b2ccf37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a43348bc523d889df7918ae8672b233b2ccf37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a43348bc523d889df7918ae8672b233b2ccf37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a43348bc523d889df7918ae8672b233b2ccf37/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "492fc3e65ab2623ed56b8cbbcf0d8bd1c3552c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492fc3e65ab2623ed56b8cbbcf0d8bd1c3552c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/492fc3e65ab2623ed56b8cbbcf0d8bd1c3552c12"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "18e9586769af592858a8b03b43a9ca1a9990415c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14a43348bc523d889df7918ae8672b233b2ccf37", "patch": "@@ -1,3 +1,11 @@\n+2007-08-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* expr.c (store_expr): Optimize initialization of an array\n+\twith STRING_CST.\n+\t* expr.h (builtin_strncpy_read_str): New prototype.\n+\t* builtins.c (builtin_strncpy_read_str): Remove prototype.\n+\tNo longer static.\n+\n 2007-08-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/33157"}, {"sha": "8d2657b3c8298d02a0c7ad17ae6fc3ba6cd85ac8", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=14a43348bc523d889df7918ae8672b233b2ccf37", "patch": "@@ -125,7 +125,6 @@ static rtx expand_builtin_bcopy (tree, int);\n static rtx expand_builtin_strcpy (tree, tree, rtx, enum machine_mode);\n static rtx expand_builtin_strcpy_args (tree, tree, tree, rtx, enum machine_mode);\n static rtx expand_builtin_stpcpy (tree, rtx, enum machine_mode);\n-static rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n static rtx expand_builtin_strncpy (tree, rtx, enum machine_mode);\n static rtx builtin_memset_gen_str (void *, HOST_WIDE_INT, enum machine_mode);\n static rtx expand_builtin_memset (tree, rtx, enum machine_mode);\n@@ -3734,7 +3733,7 @@ expand_builtin_stpcpy (tree exp, rtx target, enum machine_mode mode)\n    bytes from constant string DATA + OFFSET and return it as target\n    constant.  */\n \n-static rtx\n+rtx\n builtin_strncpy_read_str (void *data, HOST_WIDE_INT offset,\n \t\t\t  enum machine_mode mode)\n {"}, {"sha": "97116b33daa18c17419f85dc87a9b7c639593049", "filename": "gcc/expr.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=14a43348bc523d889df7918ae8672b233b2ccf37", "patch": "@@ -4472,10 +4472,52 @@ store_expr (tree exp, rtx target, int call_param_p, bool nontemporal)\n \n       return NULL_RTX;\n     }\n+  else if (TREE_CODE (exp) == STRING_CST\n+\t   && !nontemporal && !call_param_p\n+\t   && TREE_STRING_LENGTH (exp) > 0\n+\t   && TYPE_MODE (TREE_TYPE (exp)) == BLKmode)\n+    {\n+      /* Optimize initialization of an array with a STRING_CST.  */\n+      HOST_WIDE_INT exp_len, str_copy_len;\n+      rtx dest_mem;\n+\n+      exp_len = int_expr_size (exp);\n+      if (exp_len <= 0)\n+\tgoto normal_expr;\n+\n+      str_copy_len = strlen (TREE_STRING_POINTER (exp));\n+      if (str_copy_len < TREE_STRING_LENGTH (exp) - 1)\n+\tgoto normal_expr;\n+\n+      str_copy_len = TREE_STRING_LENGTH (exp);\n+      if ((STORE_MAX_PIECES & (STORE_MAX_PIECES - 1)) == 0)\n+\t{\n+\t  str_copy_len += STORE_MAX_PIECES - 1;\n+\t  str_copy_len &= ~(STORE_MAX_PIECES - 1);\n+\t}\n+      str_copy_len = MIN (str_copy_len, exp_len);\n+      if (!can_store_by_pieces (str_copy_len, builtin_strncpy_read_str,\n+\t\t\t\t(void *) TREE_STRING_POINTER (exp),\n+\t\t\t\tMEM_ALIGN (target)))\n+\tgoto normal_expr;\n+\n+      dest_mem = target;\n+\n+      dest_mem = store_by_pieces (dest_mem,\n+\t\t\t\t  str_copy_len, builtin_strncpy_read_str,\n+\t\t\t\t  (void *) TREE_STRING_POINTER (exp),\n+\t\t\t\t  MEM_ALIGN (target),\n+\t\t\t\t  exp_len > str_copy_len ? 1 : 0);\n+      if (exp_len > str_copy_len)\n+\tclear_storage (dest_mem, GEN_INT (exp_len - str_copy_len),\n+\t\t       BLOCK_OP_NORMAL);\n+      return NULL_RTX;\n+    }\n   else\n     {\n       rtx tmp_target;\n \n+  normal_expr:\n       /* If we want to use a nontemporal store, force the value to\n \t register first.  */\n       tmp_target = nontemporal ? NULL_RTX : target;"}, {"sha": "242329a37bef7b24cf3a3c3a87a0bd914d641739", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=14a43348bc523d889df7918ae8672b233b2ccf37", "patch": "@@ -341,6 +341,7 @@ extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);\n extern rtx expand_builtin_saveregs (void);\n extern void expand_builtin_trap (void);\n+extern rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n \f\n /* Functions from expr.c:  */\n "}, {"sha": "f7092ecf2cb10cecbceb18f7623c7a5c4308a21a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14a43348bc523d889df7918ae8672b233b2ccf37", "patch": "@@ -1,5 +1,7 @@\n 2007-08-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/array-init-1.c: New test.\n+\n \tPR c++/32567\n \t* g++.dg/parse/crash36.C: New test.\n "}, {"sha": "8b866cca3f3e8c73c7b35f7fc470a1197c05babd", "filename": "gcc/testsuite/gcc.dg/array-init-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Ftestsuite%2Fgcc.dg%2Farray-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a43348bc523d889df7918ae8672b233b2ccf37/gcc%2Ftestsuite%2Fgcc.dg%2Farray-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-init-1.c?ref=14a43348bc523d889df7918ae8672b233b2ccf37", "patch": "@@ -0,0 +1,24 @@\n+/* Test that both arrays are initialized by store_by_pieces.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct A { char c[10]; };\n+extern void baz (struct A *);\n+\n+void\n+foo (void)\n+{\n+  struct A a = { \"abcdefghi\" };\n+  baz (&a);\n+}\n+\n+void\n+bar (void)\n+{\n+  struct A a;\n+  __builtin_strcpy (&a.c[0], \"abcdefghi\");\n+  baz (&a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"abcdefghi\" { target i?86-*-* x86_64-*-* ia64-*-* } } } */\n+/* { dg-final { scan-assembler-times \"7523094288207667809\\|6867666564636261\\|1684234849\\|64636261\" 2 { target i?86-*-* x86_64-*-* ia64-*-* } } } */"}]}