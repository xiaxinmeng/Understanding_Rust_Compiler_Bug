{"sha": "8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2OGJmZThjYjA2NWQ0ZDdiMTdhMzlhNzU2ZmVkOGNiNjZlM2E3YQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-10-24T20:20:12Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-10-24T20:20:12Z"}, "message": "libstdc++.exp (check_v3_target_normal_mode): Add c++config.h include.\n\n2017-10-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* testsuite/lib/libstdc++.exp (check_v3_target_normal_mode): Add\n\tc++config.h include.\n\t(check_v3_target_normal_namespace): New.\n\t* testsuite/lib/dg-options.exp (dg-require-normal-namespace): New.\n\t* testsuite/18_support/headers/limits/synopsis.cc: Add latter.\n\t* testsuite/20_util/from_chars/requirements.cc: Likewise.\n\t* testsuite/20_util/headers/functional/synopsis.cc: Likewise.\n\t* testsuite/20_util/headers/memory/synopsis.cc: Likewise.\n\t* testsuite/20_util/headers/utility/synopsis.cc: Likewise.\n\t* testsuite/20_util/to_chars/requirements.cc: Likewise.\n\t* testsuite/21_strings/headers/string/synopsis.cc: Likewise.\n\t* testsuite/22_locale/headers/locale/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/bitset/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/deque/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/forward_list/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/list/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/map/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/queue/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/set/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/stack/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/vector/synopsis.cc: Likewise.\n\t* testsuite/23_containers/map/modifiers/erase/abi_tag.cc: Likewise.\n\t* testsuite/23_containers/multimap/modifiers/erase/abi_tag.cc: Likewise.\n\t* testsuite/23_containers/multiset/modifiers/erase/abi_tag.cc: Likewise.\n\t* testsuite/23_containers/set/modifiers/erase/abi_tag.cc: Likewise.\n\t* testsuite/24_iterators/headers/iterator/synopsis.cc: Likewise.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++11.cc: Likewise.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++14.cc: Likewise.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++17.cc: Likewise.\n\t* testsuite/26_numerics/complex/abi_tag.cc: Likewise.\n\t* testsuite/26_numerics/headers/complex/synopsis.cc: Likewise.\n\t* testsuite/26_numerics/headers/valarray/synopsis.cc: Likewise.\n\t* testsuite/27_io/headers/fstream/synopsis.cc: Likewise.\n\t* testsuite/27_io/headers/ios/synopsis.cc: Likewise.\n\t* testsuite/27_io/headers/istream/synopsis.cc: Likewise.\n\t* testsuite/27_io/headers/ostream/synopsis.cc: Likewise.\n\t* testsuite/27_io/headers/sstream/synopsis.cc: Likewise.\n\t* testsuite/27_io/headers/streambuf/synopsis.cc: Likewise.\n\nFrom-SVN: r254060", "tree": {"sha": "3a55adbd0bcdae23e7a206a35b03e83848e68f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a55adbd0bcdae23e7a206a35b03e83848e68f7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/comments", "author": null, "committer": null, "parents": [{"sha": "6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab5a6f30f2a3a9db37604195ff4b802779f83bc"}], "stats": {"total": 810, "additions": 472, "deletions": 338}, "files": [{"sha": "4bcfbb25d254a1f10a0003b2eefb0c7c8fa185f4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,3 +1,44 @@\n+2017-10-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_normal_mode): Add\n+\tc++config.h include.\n+\t(check_v3_target_normal_namespace): New.\n+\t* testsuite/lib/dg-options.exp (dg-require-normal-namespace): New.\n+\t* testsuite/18_support/headers/limits/synopsis.cc: Add latter.\n+\t* testsuite/20_util/from_chars/requirements.cc: Likewise.\n+\t* testsuite/20_util/headers/functional/synopsis.cc: Likewise.\n+\t* testsuite/20_util/headers/memory/synopsis.cc: Likewise.\n+\t* testsuite/20_util/headers/utility/synopsis.cc: Likewise.\n+\t* testsuite/20_util/to_chars/requirements.cc: Likewise.\n+\t* testsuite/21_strings/headers/string/synopsis.cc: Likewise.\n+\t* testsuite/22_locale/headers/locale/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/bitset/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/deque/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/forward_list/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/list/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/map/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/queue/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/set/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/stack/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/headers/vector/synopsis.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/erase/abi_tag.cc: Likewise.\n+\t* testsuite/23_containers/multimap/modifiers/erase/abi_tag.cc: Likewise.\n+\t* testsuite/23_containers/multiset/modifiers/erase/abi_tag.cc: Likewise.\n+\t* testsuite/23_containers/set/modifiers/erase/abi_tag.cc: Likewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis.cc: Likewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++11.cc: Likewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++14.cc: Likewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++17.cc: Likewise.\n+\t* testsuite/26_numerics/complex/abi_tag.cc: Likewise.\n+\t* testsuite/26_numerics/headers/complex/synopsis.cc: Likewise.\n+\t* testsuite/26_numerics/headers/valarray/synopsis.cc: Likewise.\n+\t* testsuite/27_io/headers/fstream/synopsis.cc: Likewise.\n+\t* testsuite/27_io/headers/ios/synopsis.cc: Likewise.\n+\t* testsuite/27_io/headers/istream/synopsis.cc: Likewise.\n+\t* testsuite/27_io/headers/ostream/synopsis.cc: Likewise.\n+\t* testsuite/27_io/headers/sstream/synopsis.cc: Likewise.\n+\t* testsuite/27_io/headers/streambuf/synopsis.cc: Likewise.\n+\n 2017-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/locale/gnu/c_locale.cc [_GLIBCXX_LONG_DOUBLE_COMPAT]: Ignore"}, {"sha": "91fdf37be53fee0ee3da696c0d0c08ace9b3a2a4", "filename": "libstdc++-v3/testsuite/18_support/headers/limits/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Flimits%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Flimits%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Flimits%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "6afc918909a3f3b6de69674773a8c6daa2e008b1", "filename": "libstdc++-v3/testsuite/20_util/from_chars/requirements.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2Frequirements.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -17,6 +17,7 @@\n \n // { dg-options \"-std=gnu++17\" }\n // { dg-do compile { target c++17 } }\n+// { dg-require-normal-namespace \"\" }\n \n #include <charconv>\n "}, {"sha": "c001daa955abce5894fd112ab1dde02febf96ef2", "filename": "libstdc++-v3/testsuite/20_util/headers/functional/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "95f42acb7cf75aadd971c0e0738c568dff4c824c", "filename": "libstdc++-v3/testsuite/20_util/headers/memory/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "95308139d5d0cfaff7aa3db7d99d7df615144e83", "filename": "libstdc++-v3/testsuite/20_util/headers/utility/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Futility%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "4c13d8ae71a6e972d51b8ad40e052368aaa7df1c", "filename": "libstdc++-v3/testsuite/20_util/to_chars/requirements.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Frequirements.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -17,6 +17,7 @@\n \n // { dg-options \"-std=gnu++17\" }\n // { dg-do compile { target c++17 } }\n+// { dg-require-normal-namespace \"\" }\n \n #include <charconv>\n "}, {"sha": "568d846cba7b011cd4182d80ff9df3b42d9299a7", "filename": "libstdc++-v3/testsuite/21_strings/headers/string/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "236d2e39348e9a8d9120ee984a724ba4c5651cc1", "filename": "libstdc++-v3/testsuite/22_locale/headers/locale/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fheaders%2Flocale%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "8f07ce22bbba34db5258bf91384d4d2ebf7bd8ea", "filename": "libstdc++-v3/testsuite/23_containers/headers/bitset/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "76f10a5f5f9afbed79b98c8c69c90fcca1bd1f88", "filename": "libstdc++-v3/testsuite/23_containers/headers/deque/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "c9f1df572af1ae08b0c5b5c5542bd33b47bf3e91", "filename": "libstdc++-v3/testsuite/23_containers/headers/forward_list/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2008-2017 Free Software Foundation, Inc.\n //"}, {"sha": "bcc03764b05659067824cecf5959b6bc9d96eae5", "filename": "libstdc++-v3/testsuite/23_containers/headers/list/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "8d43335cbb17796b37c7505328e286d7fca95f4b", "filename": "libstdc++-v3/testsuite/23_containers/headers/map/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "8c549b3c4f5b5d09c23fdac9b82d4eff3a317275", "filename": "libstdc++-v3/testsuite/23_containers/headers/queue/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "9a8df57b41198a74d6180632a62ba24e3374c122", "filename": "libstdc++-v3/testsuite/23_containers/headers/set/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "aff07dcea0d2950ff090acbacf1cf76d7342a035", "filename": "libstdc++-v3/testsuite/23_containers/headers/stack/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fstack%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fstack%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fstack%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "12a7197032af3b014302a489a79579aab7eed8fc", "filename": "libstdc++-v3/testsuite/23_containers/headers/vector/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "7b5beee523890f09c29a172d7e1ee2da780ee7b2", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/erase/abi_tag.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2013-2017 Free Software Foundation, Inc.\n //"}, {"sha": "10d1efef3e8e9fadbcec99b3c97321ea387ee6fc", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/erase/abi_tag.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2013-2017 Free Software Foundation, Inc.\n //"}, {"sha": "0ea0c7ea229cc065c098d026049285f52d6a2646", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/erase/abi_tag.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2013-2017 Free Software Foundation, Inc.\n //"}, {"sha": "f89797a4780bf07e82f6100bf0d3e647c2af06fe", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/erase/abi_tag.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target c++11 } }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2013-2017 Free Software Foundation, Inc.\n //"}, {"sha": "58b731a77d3d4b2e4656e656c2d0e144ca41a410", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++98\" }\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "87f1488d016ed39b5433c29f57e737a62470aa39", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++11.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B11.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++11\" }\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //"}, {"sha": "7370a52d44baa925922aaf11230bd3c731bff7a2", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++14.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B14.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++14\" }\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //"}, {"sha": "8f4dd433fca7dbdf7c4eb6f2dec8c6bf6bd9d719", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++17.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++17\" }\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //"}, {"sha": "2f8569eb8b9d0f789653683936bf16e290d6f7ca", "filename": "libstdc++-v3/testsuite/26_numerics/complex/abi_tag.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,5 +1,6 @@\n // Test that the C++11 variants of real/imag have an ABI tag\n // { dg-do compile { target c++11 } }\n+// { dg-require-normal-namespace \"\" }\n \n #include <complex>\n "}, {"sha": "7ab5e7628e5b2c8396751e6c15a589a51d22d0a1", "filename": "libstdc++-v3/testsuite/26_numerics/headers/complex/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcomplex%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcomplex%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcomplex%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "886d817b2d181a87bed8922036653693e5282964", "filename": "libstdc++-v3/testsuite/26_numerics/headers/valarray/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fvalarray%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "bc914b646989eb4f401248056eb72ba2b521b223", "filename": "libstdc++-v3/testsuite/27_io/headers/fstream/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Ffstream%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Ffstream%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Ffstream%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "1d3ba285166a1075b49e3ed362cda0fc147cff86", "filename": "libstdc++-v3/testsuite/27_io/headers/ios/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fios%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fios%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fios%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "894964a871af9c454c4cd6fddcf6a7af1dbc7779", "filename": "libstdc++-v3/testsuite/27_io/headers/istream/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fistream%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fistream%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fistream%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "f3778cc1b2bb1b2cb78d284897cbed07084deb54", "filename": "libstdc++-v3/testsuite/27_io/headers/ostream/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fostream%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fostream%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fostream%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "b7463685bf07f4bdd3d6bdf9c5bb9c353ef355fb", "filename": "libstdc++-v3/testsuite/27_io/headers/sstream/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fsstream%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fsstream%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fsstream%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "93658ff717891a3eca5bb2daf81f05e8ecd21eb3", "filename": "libstdc++-v3/testsuite/27_io/headers/streambuf/synopsis.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fstreambuf%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fstreambuf%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fstreambuf%2Fsynopsis.cc?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-normal-namespace \"\" }\n \n // Copyright (C) 2007-2017 Free Software Foundation, Inc.\n //"}, {"sha": "57eff708ecafb203624efac5a8f21e071f533c2b", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -52,6 +52,15 @@ proc dg-require-normal-mode { args } {\n     return\n }\n \n+proc dg-require-normal-namespace { args } {\n+    if { ![ check_v3_target_normal_namespace ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}\n+\n proc dg-require-parallel-mode { args } {\n     if { ![ check_v3_target_parallel_mode ] } {\n \tupvar dg-do-what dg-do-what"}, {"sha": "02c88ede2abf49b737beb8ef09d2f40906c93a12", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 388, "deletions": 338, "changes": 726, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a", "patch": "@@ -126,7 +126,7 @@ proc libstdc++_init { testfile } {\n     # If a test doesn't have special options, use DEFAULT_CXXFLAGS.\n     # Use this variable if the behavior\n     #   1) only applies to libstdc++ testing\n-    #   2) might need to be negated \n+    #   2) might need to be negated\n     # In particular, some tests have to be run without precompiled\n     # headers, or without assertions.\n \n@@ -135,10 +135,10 @@ proc libstdc++_init { testfile } {\n \t# Host specific goo here.\n \tif { [string match \"powerpc-*-darwin*\" $target_triplet] } {\n \t    append DEFAULT_CXXFLAGS \" -multiply_defined suppress\"\n-\t} \n+\t}\n \tif { [string match \"powerpc-ibm-aix*\" $target_triplet] } {\n \t    append DEFAULT_CXXFLAGS \" -Wl,-bmaxdata:0x20000000\"\n-\t} \n+\t}\n     }\n     v3track DEFAULT_CXXFLAGS 2\n \n@@ -156,7 +156,7 @@ proc libstdc++_init { testfile } {\n     # SHLIB_EXT on different platforms\n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n     if {$gccdir != \"\"} {\n-        set gccdir [file dirname $gccdir]\n+\tset gccdir [file dirname $gccdir]\n \tappend ld_library_path_tmp \":${gccdir}\"\n     }\n     v3track gccdir 3\n@@ -166,7 +166,7 @@ proc libstdc++_init { testfile } {\n     set libgompdir [lookfor_file $blddir/../libgomp .libs/libgomp.$shlib_ext]\n     if {$libgompdir != \"\"} {\n \tset v3-libgomp 1\n-        set libgompdir [file dirname $libgompdir]\n+\tset libgompdir [file dirname $libgompdir]\n \tappend ld_library_path_tmp \":${libgompdir}\"\n \tverbose -log \"libgomp support detected\"\n     }\n@@ -177,7 +177,7 @@ proc libstdc++_init { testfile } {\n     set libvtvdir [lookfor_file $blddir/../libvtv .libs/libvtv.$shlib_ext]\n     if {$libvtvdir != \"\"} {\n \tset v3-libvtv 1\n-        set libvtvdir [file dirname $libvtvdir]\n+\tset libvtvdir [file dirname $libvtvdir]\n \tappend ld_library_path_tmp \":${libvtvdir}\"\n \tverbose -log \"libvtv support detected\"\n     }\n@@ -193,7 +193,7 @@ proc libstdc++_init { testfile } {\n \t     && [isnative] } then {\n \t    set v3-sharedlib 1\n \t    verbose -log \"shared library support detected\"\n-\t} \n+\t}\n     }\n     v3track v3-sharedlib 3\n \n@@ -252,25 +252,25 @@ proc libstdc++_init { testfile } {\n \t# $srcdir so we copy the testsuite headers into the current\n \t# directory, and then add that to the search path.\n \tforeach src [glob \"${srcdir}/util/*.h\" \\\n-\t\t          \"${srcdir}/util/*.cc\" \\\n-\t\t          \"${srcdir}/util/*.tcc\" \\\n-\t\t          \"${srcdir}/util/*.hpp\" \\\n- \t\t          \"${srcdir}/util/*/*.h\" \\\n-\t\t          \"${srcdir}/util/*/*.cc\" \\\n-\t\t          \"${srcdir}/util/*/*.tcc\" \\\n+\t\t\t  \"${srcdir}/util/*.cc\" \\\n+\t\t\t  \"${srcdir}/util/*.tcc\" \\\n+\t\t\t  \"${srcdir}/util/*.hpp\" \\\n+\t\t\t  \"${srcdir}/util/*/*.h\" \\\n+\t\t\t  \"${srcdir}/util/*/*.cc\" \\\n+\t\t\t  \"${srcdir}/util/*/*.tcc\" \\\n \t\t\t  \"${srcdir}/util/*/*.hpp\" \\\n-\t\t          \"${srcdir}/util/*/*/*.h\" \\\n-\t\t          \"${srcdir}/util/*/*/*.cc\" \\\n-\t\t          \"${srcdir}/util/*/*/*.tcc\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*.h\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*.cc\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*.tcc\" \\\n \t\t\t  \"${srcdir}/util/*/*/*.hpp\" \\\n-\t\t          \"${srcdir}/util/*/*/*/*.h\" \\\n-\t\t          \"${srcdir}/util/*/*/*/*.cc\" \\\n-\t\t          \"${srcdir}/util/*/*/*/*.tcc\" \\\n-  \t\t\t  \"${srcdir}/util/*/*/*/*.hpp\" \\\n-\t\t          \"${srcdir}/util/*/*/*/*/*.h\" \\\n-\t\t          \"${srcdir}/util/*/*/*/*/*.cc\" \\\n-\t\t          \"${srcdir}/util/*/*/*/*/*.tcc\" \\\n-  \t\t\t  \"${srcdir}/util/*/*/*/*/*.hpp\" ] {\n+\t\t\t  \"${srcdir}/util/*/*/*/*.h\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*/*.cc\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*/*.tcc\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*/*.hpp\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*/*/*.h\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*/*/*.cc\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*/*/*.tcc\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*/*/*.hpp\" ] {\n \t    # Remove everything up to \"util/...\"\n \t    set dst [string range $src [string length \"${srcdir}/\"] end]\n \t    # Create the directory containing the file.\n@@ -285,7 +285,7 @@ proc libstdc++_init { testfile } {\n \t}\n \tset includes \"-Iutil\"\n     } elseif { [file exists $flags_file] } {\n-        # If we find a testsuite_flags file, we're testing in the build dir.\n+\t# If we find a testsuite_flags file, we're testing in the build dir.\n \tset cxx [exec sh $flags_file --build-cxx]\n \tset cxxflags [exec sh $flags_file --cxxflags]\n \tset cxxpchflags [exec sh $flags_file --cxxpchflags]\n@@ -328,9 +328,9 @@ proc libstdc++_init { testfile } {\n \t    verbose -log \"Requested PCH file: $cxxpchflags\"\n \t    verbose -log \"is not working, and will not be used.\"\n \t    set cxxpchflags \"\"\n-\t} \n+\t}\n \tfile delete $src\n-     } \n+     }\n     v3track cxxpchflags 2\n \n     global PCH_CXXFLAGS\n@@ -356,36 +356,36 @@ proc libstdc++_exit { } {\n proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n     # Set up the compiler flags, based on what we're going to do.\n     switch $do_what {\n-        \"preprocess\" {\n-            set compile_type \"preprocess\"\n-            set output_file \"[file rootname [file tail $prog]].i\"\n-        }\n-        \"compile\" {\n-            set compile_type \"assembly\"\n-            set output_file \"[file rootname [file tail $prog]].s\"\n-        }\n-        \"assemble\" {\n-            set compile_type \"object\"\n-            set output_file \"[file rootname [file tail $prog]].o\"\n-        }\n-        \"link\" {\n-            set compile_type \"executable\"\n-            set output_file \"./[file rootname [file tail $prog]].exe\"\n-        }\n-        \"run\" {\n-            set compile_type \"executable\"\n-            # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n-            # Should this be handled elsewhere?\n-            # YES.\n-            set output_file \"./[file rootname [file tail $prog]].exe\"\n-            # This is the only place where we care if an executable was\n-            # created or not.  If it was, dg.exp will try to run it.\n-            catch { remote_file build delete $output_file }\n-        }\n+\t\"preprocess\" {\n+\t    set compile_type \"preprocess\"\n+\t    set output_file \"[file rootname [file tail $prog]].i\"\n+\t}\n+\t\"compile\" {\n+\t    set compile_type \"assembly\"\n+\t    set output_file \"[file rootname [file tail $prog]].s\"\n+\t}\n+\t\"assemble\" {\n+\t    set compile_type \"object\"\n+\t    set output_file \"[file rootname [file tail $prog]].o\"\n+\t}\n+\t\"link\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n+\t}\n+\t\"run\" {\n+\t    set compile_type \"executable\"\n+\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+\t    # Should this be handled elsewhere?\n+\t    # YES.\n+\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n+\t    # This is the only place where we care if an executable was\n+\t    # created or not.  If it was, dg.exp will try to run it.\n+\t    catch { remote_file build delete $output_file }\n+\t}\n \tdefault {\n-            perror \"$do_what: not a valid dg-do keyword\"\n-            return \"\"\n-        }\n+\t    perror \"$do_what: not a valid dg-do keyword\"\n+\t    return \"\"\n+\t}\n     }\n \n     # Short-circut a bunch of complicated goo here for the special\n@@ -404,7 +404,7 @@ proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n \t    regsub -all \".x c\" $edit_tool_flags \"\" edit_tool_flags\n \t    lappend options \"additional_flags=$edit_tool_flags\"\n \t    set select_compile \"v3_target_compile_as_c\"\n-        } else {\n+\t} else {\n \t    lappend options \"additional_flags=$extra_tool_flags\"\n \t}\n     }\n@@ -461,7 +461,7 @@ set v3-symver 0\n # Called from libstdc++-dg-test above.  Calls back into system's\n # target_compile to actually do the work.\n proc v3_target_compile { source dest type options } {\n-    global gluefile \n+    global gluefile\n     global wrap_flags\n     global cxx\n     global cxxflags\n@@ -474,8 +474,8 @@ proc v3_target_compile { source dest type options } {\n     lappend options \"additional_flags=-fno-diagnostics-show-caret -fdiagnostics-color=never\"\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n-        lappend options \"libs=${gluefile}\"\n-        lappend options \"ldflags=${wrap_flags}\"\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n     set cxx_final $cxx\n@@ -509,7 +509,7 @@ proc v3_target_compile { source dest type options } {\n # Called from libstdc++-dg-test above, but only for \"C\" compilation.\n # Calls back into system's target_compile to actually do the work.\n proc v3_target_compile_as_c { source dest type options } {\n-    global gluefile \n+    global gluefile\n     global wrap_flags\n     global includes\n     global flags_file\n@@ -520,8 +520,8 @@ proc v3_target_compile_as_c { source dest type options } {\n     global tool\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n-        lappend options \"libs=${gluefile}\"\n-        lappend options \"ldflags=${wrap_flags}\"\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n     set tname [target_info name]\n@@ -554,15 +554,15 @@ proc v3_target_compile_as_c { source dest type options } {\n \tset crossbase \"${comp_base_dir}/${machine}/include/c++/${version}\"\n \tset crosstarget \"${crossbase}/${machine}\"\n \tset cc_final [concat $cc_final \"-I$crossbase -I$crosstarget\"]\n-\t# For a native compiler, the header files will be located at \n+\t# For a native compiler, the header files will be located at\n \t# the top level.\n \tset includesbase \"${comp_base_dir}/include/c++/${version}\"\n \tset includestarget \"${includesbase}/${machine}\"\n \tset cc_final [concat $cc_final \"-I$includesbase -I$includestarget\"]\n \n-        set libdir \"-L${comp_base_dir}/lib\"\n+\tset libdir \"-L${comp_base_dir}/lib\"\n     } else {\n-        set libdir \"-L${blddir}/libsupc++/.libs\"\n+\tset libdir \"-L${blddir}/libsupc++/.libs\"\n \tset libdir [concat $libdir \"-L${blddir}/src/.libs\"]\n     }\n \n@@ -632,14 +632,14 @@ proc v3-build_support { } {\n     # Build the support objects.\n     set source_files [list testsuite_abi.cc testsuite_allocator.cc \\\n \t\t\t  testsuite_character.cc testsuite_hooks.cc \\\n-\t       \t          io/verified_cmd_line_input.cc \\\n+\t\t\t  io/verified_cmd_line_input.cc \\\n \t\t\t  io/prog_bar.cc performance/time/elapsed_timer.cc ]\n     foreach f $source_files {\n \tset obj [file rootname $f].o\n \tset object_file [file tail $obj]\n \t# Compile with \"-w\" so that warnings issued by the compiler\n \t# do not prevent compilation.\n-        # Disable LTO so that ar/ranlib don't need the LTO plugin.\n+\t# Disable LTO so that ar/ranlib don't need the LTO plugin.\n \tif { [v3_target_compile $srcdir/util/$f $object_file \"object\" \\\n \t\t  [list \"incdir=$srcdir\" \"additional_flags=-w -fno-lto\"]]\n \t     != \"\" } {\n@@ -691,7 +691,7 @@ proc v3-build_support { } {\n proc check_v3_target_fileio { } {\n     global et_fileio_saved\n     global et_fileio_target_name\n-    global tool\t\n+    global tool\n     global srcdir\n \n     if { ![info exists et_fileio_target_name] } {\n@@ -728,7 +728,7 @@ proc check_v3_target_fileio { } {\n \tputs $f \"#include <unistd.h>\"\n \tputs $f \"#include <errno.h>\"\n \tputs $f \"#include <string.h>\"\n-\tputs $f \"using namespace std;\"\t\n+\tputs $f \"using namespace std;\"\n \tputs $f \"int main ()\"\n \tputs $f \"{\"\n \tputs $f \"  int fd  = open (\\\"$testfile\\\", O_RDONLY);\"\n@@ -751,7 +751,7 @@ proc check_v3_target_fileio { } {\n \tputs $f \"    close (fd);\"\n \tputs $f \"  }\"\n \tputs $f \"  return ret;\"\n-\tputs $f \"}\" \n+\tputs $f \"}\"\n \tclose $f\n \n \tset lines [v3_target_compile $src $exe executable \"\"]\n@@ -779,7 +779,7 @@ proc check_v3_target_fileio { } {\n proc check_v3_target_c_std { } {\n     global et_c_std_saved\n     global et_c_std_target_name\n-    global tool\t\n+    global tool\n \n     if { ![info exists et_c_std_target_name] } {\n \tset et_c_std_target_name \"\"\n@@ -803,7 +803,7 @@ proc check_v3_target_c_std { } {\n \n \t# Set up, compile, and execute a C++ test program that tries to use\n \t# C99 functionality.\n-        # For math bits, could use check_effective_target_c99_math.\n+\t# For math bits, could use check_effective_target_c99_math.\n \tset src fileio[pid].cc\n \tset exe fileio[pid].x\n \n@@ -817,7 +817,7 @@ proc check_v3_target_c_std { } {\n \tputs $f \"  \"\n \tputs $f \"  using std::wctomb;\"\n \tputs $f \"  return i;\"\n-\tputs $f \"}\" \n+\tputs $f \"}\"\n \tclose $f\n \n \tset lines [v3_target_compile $src $exe executable \"\"]\n@@ -849,7 +849,7 @@ proc check_v3_target_sharedlib { } {\n proc check_v3_target_time { } {\n     global et_time_saved\n     global et_time_target_name\n-    global tool\t\n+    global tool\n \n     if { ![info exists et_time_target_name] } {\n \tset et_time_target_name \"\"\n@@ -877,11 +877,11 @@ proc check_v3_target_time { } {\n \n \tset f [open $src \"w\"]\n \tputs $f \"#include <time.h>\"\n-\tputs $f \"using namespace std;\"\t\n+\tputs $f \"using namespace std;\"\n \tputs $f \"int main ()\"\n \tputs $f \"{\"\n-\tputs $f \"  time (0);\"\t\n-\tputs $f \"}\" \n+\tputs $f \"  time (0);\"\n+\tputs $f \"}\"\n \tclose $f\n \n \tset lines [v3_target_compile $src /dev/null executable \"\"]\n@@ -956,12 +956,12 @@ proc check_v3_target_namedlocale { args } {\n       file delete $src\n \n       if ![string match \"\" $lines] {\n-        verbose \"check_v3_target_namedlocale: compilation failed\" 2\n-        return $et_namedlocale\n+\tverbose \"check_v3_target_namedlocale: compilation failed\" 2\n+\treturn $et_namedlocale\n       }\n       # else No error message, compilation succeeded.\n     }\n-\t\n+\n     set result [${tool}_load \"./$exe\" \"$args\" \"\"]\n     set status [lindex $result 0]\n \n@@ -975,7 +975,7 @@ proc check_v3_target_namedlocale { args } {\n \n proc check_v3_target_debug_mode { } {\n     global et_debug_mode\n-    global tool\t\n+    global tool\n \n     if { ![info exists et_debug_mode_target_name] } {\n \tset et_debug_mode_target_name \"\"\n@@ -1067,7 +1067,7 @@ proc check_v3_target_profile_mode { } {\n \n proc check_v3_target_normal_mode { } {\n     global et_normal_mode\n-    global tool\t\n+    global tool\n \n     if { ![info exists et_normal_mode_target_name] } {\n \tset et_normal_mode_target_name \"\"\n@@ -1094,7 +1094,10 @@ proc check_v3_target_normal_mode { } {\n \tset src normal_mode[pid].cc\n \n \tset f [open $src \"w\"]\n-\tputs $f \"#if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PROFILE) || defined(_GLIBCXX_PARALLEL)\"\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#if defined(_GLIBCXX_DEBUG) || \\\\\"\n+\tputs $f \"    defined(_GLIBCXX_PROFILE) || \\\\\"\n+\tputs $f \"    defined(_GLIBCXX_PARALLEL)\"\n \tputs $f \"#  error No normal mode\"\n \tputs $f \"#endif\"\n \tclose $f\n@@ -1111,12 +1114,59 @@ proc check_v3_target_normal_mode { } {\n     return $et_normal_mode\n }\n \n+proc check_v3_target_normal_namespace { } {\n+    global et_normal_namespace\n+    global tool\n+\n+    if { ![info exists et_normal_namespace_target_name] } {\n+\tset et_normal_namespace_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_normal_namespace_target_name } {\n+\tverbose \"check_v3_target_normal_namespace: `$et_normal_namespace_target_name'\" 2\n+\tset et_normal_namespace_target_name $current_target\n+\tif [info exists et_normal_namespace] {\n+\t    verbose \"check_v3_target_normal_namespace: removing cached result\" 2\n+\t    unset et_normal_namespace\n+\t}\n+    }\n+\n+    if [info exists et_normal_namespace] {\n+\tverbose \"check_v3_target_normal_namespace: using cached result\" 2\n+    } else {\n+\tset et_normal_namespace 0\n+\n+\t# Set up and compile a C++ test program that depends\n+\t# on normal std namespace.\n+\tset src normal_namespace[pid].cc\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#if _GLIBCXX_INLINE_VERSION\"\n+\tputs $f \"#  error No normal namespace\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, compilation succeeded.\n+\t    set et_normal_namespace 1\n+\t}\n+    }\n+    verbose \"check_v3_target_normal_namespace: $et_normal_namespace\" 2\n+    return $et_normal_namespace\n+}\n+\n proc check_v3_target_parallel_mode { } {\n     global cxxflags\n     global v3-libgomp\n     global et_parallel_mode\n \n-    global tool\t\n+    global tool\n \n     if { ![info exists et_parallel_mode_target_name] } {\n \tset et_parallel_mode_target_name \"\"\n@@ -1152,7 +1202,7 @@ proc check_v3_target_cstdint { } {\n     global DEFAULT_CXXFLAGS\n     global et_cstdint\n \n-    global tool\t\n+    global tool\n \n     if { ![info exists et_cstdint_target_name] } {\n \tset et_cstdint_target_name \"\"\n@@ -1381,49 +1431,49 @@ proc check_v3_target_gthreads { } {\n     global tool\n \n     if { ![info exists et_gthreads_target_name] } {\n-        set et_gthreads_target_name \"\"\n+\tset et_gthreads_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_gthreads_target_name } {\n-        verbose \"check_v3_target_gthreads: `$et_gthreads_target_name'\" 2\n-        set et_gthreads_target_name $current_target\n-        if [info exists et_gthreads] {\n-            verbose \"check_v3_target_gthreads: removing cached result\" 2\n-            unset et_gthreads\n-        }\n+\tverbose \"check_v3_target_gthreads: `$et_gthreads_target_name'\" 2\n+\tset et_gthreads_target_name $current_target\n+\tif [info exists et_gthreads] {\n+\t    verbose \"check_v3_target_gthreads: removing cached result\" 2\n+\t    unset et_gthreads\n+\t}\n     }\n \n     if [info exists et_gthreads] {\n-        verbose \"check_v3_target_gthreads: using cached result\" 2\n+\tverbose \"check_v3_target_gthreads: using cached result\" 2\n     } else {\n-        set et_gthreads 0\n+\tset et_gthreads 0\n \n-        # Set up and preprocess a C++0x test program that depends\n-        # on the gthreads facilities to be available.\n-        set src gthreads[pid].cc\n+\t# Set up and preprocess a C++0x test program that depends\n+\t# on the gthreads facilities to be available.\n+\tset src gthreads[pid].cc\n \n-        set f [open $src \"w\"]\n+\tset f [open $src \"w\"]\n \tputs $f \"#include <bits/c++config.h>\"\n-        puts $f \"#ifndef _GLIBCXX_HAS_GTHREADS\"\n-        puts $f \"#  error No gthread\"\n-        puts $f \"#endif\"\n-        close $f\n+\tputs $f \"#ifndef _GLIBCXX_HAS_GTHREADS\"\n+\tputs $f \"#  error No gthread\"\n+\tputs $f \"#endif\"\n+\tclose $f\n \n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n \n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_gthreads 1\n-        } else {\n-            verbose \"check_v3_target_gthreads: compilation failed\" 2\n-        }\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_gthreads 1\n+\t} else {\n+\t    verbose \"check_v3_target_gthreads: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_gthreads: $et_gthreads\" 2\n     return $et_gthreads\n@@ -1437,52 +1487,52 @@ proc check_v3_target_gthreads_timed { } {\n     global tool\n \n     if { ![info exists et_gthreads_timed_target_name] } {\n-        set et_gthreads_timed_target_name \"\"\n+\tset et_gthreads_timed_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_gthreads_timed_target_name } {\n-        verbose \"check_v3_target_gthreads_timed: `$et_gthreads_timed_target_name'\" 2\n-        set et_gthreads_timed_target_name $current_target\n-        if [info exists et_gthreads_timed] {\n-            verbose \"check_v3_target_gthreads_timed: removing cached result\" 2\n-            unset et_gthreads_timed\n-        }\n+\tverbose \"check_v3_target_gthreads_timed: `$et_gthreads_timed_target_name'\" 2\n+\tset et_gthreads_timed_target_name $current_target\n+\tif [info exists et_gthreads_timed] {\n+\t    verbose \"check_v3_target_gthreads_timed: removing cached result\" 2\n+\t    unset et_gthreads_timed\n+\t}\n     }\n \n     if [info exists et_gthreads_timed] {\n-        verbose \"check_v3_target_gthreads_timed: using cached result\" 2\n+\tverbose \"check_v3_target_gthreads_timed: using cached result\" 2\n     } else {\n-        set et_gthreads_timed 0\n+\tset et_gthreads_timed 0\n \n-        # Set up and preprocess a C++0x test program that depends\n-        # on the gthreads timed mutex facilities to be available.\n-        set src gthreads_timed[pid].cc\n+\t# Set up and preprocess a C++0x test program that depends\n+\t# on the gthreads timed mutex facilities to be available.\n+\tset src gthreads_timed[pid].cc\n \n-        set f [open $src \"w\"]\n+\tset f [open $src \"w\"]\n \tputs $f \"#include <bits/c++config.h>\"\n-        puts $f \"#ifndef _GLIBCXX_HAS_GTHREADS\"\n-        puts $f \"#  error No gthread\"\n-        puts $f \"#endif\"\n-        puts $f \"#if !_GTHREAD_USE_MUTEX_TIMEDLOCK\"\n-        puts $f \"#  error No gthread timed mutexes\"\n-        puts $f \"#endif\"\n-        close $f\n-\n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n-\n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n-\n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_gthreads_timed 1\n-        } else {\n-            verbose \"check_v3_target_gthreads_timed: compilation failed\" 2\n-        }\n+\tputs $f \"#ifndef _GLIBCXX_HAS_GTHREADS\"\n+\tputs $f \"#  error No gthread\"\n+\tputs $f \"#endif\"\n+\tputs $f \"#if !_GTHREAD_USE_MUTEX_TIMEDLOCK\"\n+\tputs $f \"#  error No gthread timed mutexes\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_gthreads_timed 1\n+\t} else {\n+\t    verbose \"check_v3_target_gthreads_timed: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_gthreads_timed: $et_gthreads_timed\" 2\n     return $et_gthreads_timed\n@@ -1497,51 +1547,51 @@ proc check_v3_target_sleep { } {\n     global tool\n \n     if { ![info exists et_sleep_target_name] } {\n-        set et_sleep_target_name \"\"\n+\tset et_sleep_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_sleep_target_name } {\n-        verbose \"check_v3_target_sleep: `$et_sleep_target_name'\" 2\n-        set et_sleep_target_name $current_target\n-        if [info exists et_sleep] {\n-            verbose \"check_v3_target_sleep: removing cached result\" 2\n-            unset et_sleep\n-        }\n+\tverbose \"check_v3_target_sleep: `$et_sleep_target_name'\" 2\n+\tset et_sleep_target_name $current_target\n+\tif [info exists et_sleep] {\n+\t    verbose \"check_v3_target_sleep: removing cached result\" 2\n+\t    unset et_sleep\n+\t}\n     }\n \n     if [info exists et_sleep] {\n-        verbose \"check_v3_target_sleep: using cached result\" 2\n+\tverbose \"check_v3_target_sleep: using cached result\" 2\n     } else {\n-        set et_sleep 0\n+\tset et_sleep 0\n \t\n \t# Set up and preprocess a C++11 test program that depends\n-        # on the sleep facilities to be available.\n-        set src sleep[pid].cc\n-\n-        set f [open $src \"w\"]\n-        puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"#ifndef _GLIBCXX_USE_NANOSLEEP\"\n-        puts $f \"# ifndef _GLIBCXX_HAVE_SLEEP\"\n-        puts $f \"#  error No nanosleep or sleep\"\n-        puts $f \"# endif\"\n-        puts $f \"#endif\"\n-        close $f\n-\n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n-\n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n-\n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_sleep 1\n-        } else {\n-            verbose \"check_v3_target_sleep: compilation failed\" 2\n-        }\n+\t# on the sleep facilities to be available.\n+\tset src sleep[pid].cc\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#ifndef _GLIBCXX_USE_NANOSLEEP\"\n+\tputs $f \"# ifndef _GLIBCXX_HAVE_SLEEP\"\n+\tputs $f \"#  error No nanosleep or sleep\"\n+\tputs $f \"# endif\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_sleep 1\n+\t} else {\n+\t    verbose \"check_v3_target_sleep: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_sleep: $et_sleep\" 2\n     return $et_sleep\n@@ -1555,49 +1605,49 @@ proc check_v3_target_sched_yield { } {\n     global tool\n \n     if { ![info exists et_sched_yield_target_name] } {\n-        set et_sched_yield_target_name \"\"\n+\tset et_sched_yield_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_sched_yield_target_name } {\n-        verbose \"check_v3_target_sched_yield: `$et_sched_yield_target_name'\" 2\n-        set et_sched_yield_target_name $current_target\n-        if [info exists et_sched_yield] {\n-            verbose \"check_v3_target_sched_yield: removing cached result\" 2\n-            unset et_sched_yield\n-        }\n+\tverbose \"check_v3_target_sched_yield: `$et_sched_yield_target_name'\" 2\n+\tset et_sched_yield_target_name $current_target\n+\tif [info exists et_sched_yield] {\n+\t    verbose \"check_v3_target_sched_yield: removing cached result\" 2\n+\t    unset et_sched_yield\n+\t}\n     }\n \n     if [info exists et_sched_yield] {\n-        verbose \"check_v3_target_sched_yield: using cached result\" 2\n+\tverbose \"check_v3_target_sched_yield: using cached result\" 2\n     } else {\n-        set et_sched_yield 0\n+\tset et_sched_yield 0\n \n-        # Set up and preprocess a C++0x test program that depends\n-        # on the sched_yield facility to be available.\n-        set src sched_yield[pid].cc\n+\t# Set up and preprocess a C++0x test program that depends\n+\t# on the sched_yield facility to be available.\n+\tset src sched_yield[pid].cc\n \n-        set f [open $src \"w\"]\n-        puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"#ifndef _GLIBCXX_USE_SCHED_YIELD\"\n-        puts $f \"#  error No sched yield\"\n-        puts $f \"#endif\"\n-        close $f\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#ifndef _GLIBCXX_USE_SCHED_YIELD\"\n+\tputs $f \"#  error No sched yield\"\n+\tputs $f \"#endif\"\n+\tclose $f\n \n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n \n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_sched_yield 1\n-        } else {\n-            verbose \"check_v3_target_sched_yield: compilation failed\" 2\n-        }\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_sched_yield 1\n+\t} else {\n+\t    verbose \"check_v3_target_sched_yield: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_sched_yield: $et_sched_yield\" 2\n     return $et_sched_yield\n@@ -1611,49 +1661,49 @@ proc check_v3_target_string_conversions { } {\n     global tool\n \n     if { ![info exists et_string_conversions_target_name] } {\n-        set et_string_conversions_target_name \"\"\n+\tset et_string_conversions_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_string_conversions_target_name } {\n-        verbose \"check_v3_target_string_conversions: `$et_string_conversions_target_name'\" 2\n-        set et_string_conversions_target_name $current_target\n-        if [info exists et_string_conversions] {\n-            verbose \"check_v3_target_string_conversions: removing cached result\" 2\n-            unset et_string_conversions\n-        }\n+\tverbose \"check_v3_target_string_conversions: `$et_string_conversions_target_name'\" 2\n+\tset et_string_conversions_target_name $current_target\n+\tif [info exists et_string_conversions] {\n+\t    verbose \"check_v3_target_string_conversions: removing cached result\" 2\n+\t    unset et_string_conversions\n+\t}\n     }\n \n     if [info exists et_string_conversions] {\n-        verbose \"check_v3_target_string_conversions: using cached result\" 2\n+\tverbose \"check_v3_target_string_conversions: using cached result\" 2\n     } else {\n-        set et_string_conversions 0\n+\tset et_string_conversions 0\n \t\n \t# Set up and preprocess a C++0x test program that depends\n-        # on the string_conversions facilities to be available.\n-        set src string_conversions[pid].cc\n-\n-        set f [open $src \"w\"]\n-        puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"#if !(_GLIBCXX_USE_C99_STDIO && _GLIBCXX_USE_C99_STDLIB && _GLIBCXX_USE_C99_WCHAR) || defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n-        puts $f \"#  error No string conversions\"\n-        puts $f \"#endif\"\n-        close $f\n-\n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n-\n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n-\n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_string_conversions 1\n-        } else {\n-            verbose \"check_v3_target_string_conversions: compilation failed\" 2\n-        }\n+\t# on the string_conversions facilities to be available.\n+\tset src string_conversions[pid].cc\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#if !(_GLIBCXX_USE_C99_STDIO && _GLIBCXX_USE_C99_STDLIB && _GLIBCXX_USE_C99_WCHAR) || defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n+\tputs $f \"#  error No string conversions\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_string_conversions 1\n+\t} else {\n+\t    verbose \"check_v3_target_string_conversions: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_string_conversions: $et_string_conversions\" 2\n     return $et_string_conversions\n@@ -1667,49 +1717,49 @@ proc check_v3_target_swprintf { } {\n     global tool\n \n     if { ![info exists et_swprintf_target_name] } {\n-        set et_swprintf_target_name \"\"\n+\tset et_swprintf_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_swprintf_target_name } {\n-        verbose \"check_v3_target_swprintf: `$et_swprintf_target_name'\" 2\n-        set et_swprintf_target_name $current_target\n-        if [info exists et_swprintf] {\n-            verbose \"check_v3_target_swprintf: removing cached result\" 2\n-            unset et_swprintf\n-        }\n+\tverbose \"check_v3_target_swprintf: `$et_swprintf_target_name'\" 2\n+\tset et_swprintf_target_name $current_target\n+\tif [info exists et_swprintf] {\n+\t    verbose \"check_v3_target_swprintf: removing cached result\" 2\n+\t    unset et_swprintf\n+\t}\n     }\n \n     if [info exists et_swprintf] {\n-        verbose \"check_v3_target_swprintf: using cached result\" 2\n+\tverbose \"check_v3_target_swprintf: using cached result\" 2\n     } else {\n-        set et_swprintf 0\n+\tset et_swprintf 0\n \t\n \t# Set up and preprocess a C++0x test program that depends\n-        # on a standard swprintf function to be available.\n-        set src swprintf[pid].cc\n-\n-        set f [open $src \"w\"]\n-        puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"#if defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n-        puts $f \"#  error No swprintf\"\n-        puts $f \"#endif\"\n-        close $f\n-\n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n-\n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n-\n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_swprintf 1\n-        } else {\n-            verbose \"check_v3_target_swprintf: compilation failed\" 2\n-        }\n+\t# on a standard swprintf function to be available.\n+\tset src swprintf[pid].cc\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#if defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF)\"\n+\tputs $f \"#  error No swprintf\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_swprintf 1\n+\t} else {\n+\t    verbose \"check_v3_target_swprintf: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_swprintf: $et_swprintf\" 2\n     return $et_swprintf\n@@ -1723,49 +1773,49 @@ proc check_v3_target_binary_io { } {\n     global tool\n \n     if { ![info exists et_binary_io_target_name] } {\n-        set et_binary_io_target_name \"\"\n+\tset et_binary_io_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_binary_io_target_name } {\n-        verbose \"check_v3_target_binary_io: `$et_binary_io_target_name'\" 2\n-        set et_binary_io_target_name $current_target\n-        if [info exists et_binary_io] {\n-            verbose \"check_v3_target_binary_io: removing cached result\" 2\n-            unset et_binary_io\n-        }\n+\tverbose \"check_v3_target_binary_io: `$et_binary_io_target_name'\" 2\n+\tset et_binary_io_target_name $current_target\n+\tif [info exists et_binary_io] {\n+\t    verbose \"check_v3_target_binary_io: removing cached result\" 2\n+\t    unset et_binary_io\n+\t}\n     }\n \n     if [info exists et_binary_io] {\n-        verbose \"check_v3_target_binary_io: using cached result\" 2\n+\tverbose \"check_v3_target_binary_io: using cached result\" 2\n     } else {\n-        set et_binary_io 0\n+\tset et_binary_io 0\n \t\n \t# Set up and preprocess a C++0x test program that depends\n-        # on text and binary I/O being the same.\n-        set src binary_io[pid].cc\n-\n-        set f [open $src \"w\"]\n-        puts $f \"#include <bits/c++config.h>\"\n-        puts $f \"#if defined(_GLIBCXX_HAVE_DOS_BASED_FILESYSTEM)\"\n-        puts $f \"#  error No binary io\"\n-        puts $f \"#endif\"\n-        close $f\n-\n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n-\n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n-\n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_binary_io 1\n-        } else {\n-            verbose \"check_v3_target_binary_io: compilation failed\" 2\n-        }\n+\t# on text and binary I/O being the same.\n+\tset src binary_io[pid].cc\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#if defined(_GLIBCXX_HAVE_DOS_BASED_FILESYSTEM)\"\n+\tputs $f \"#  error No binary io\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_binary_io 1\n+\t} else {\n+\t    verbose \"check_v3_target_binary_io: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_binary_io: $et_binary_io\" 2\n     return $et_binary_io\n@@ -1803,7 +1853,7 @@ proc check_v3_target_nprocs { } {\n \tset src nprocs[pid].cc\n \n \tset f [open $src \"w\"]\n-        puts $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#include <bits/c++config.h>\"\n \tputs $f \"#if defined(_GLIBCXX_USE_GET_NPROCS)\"\n \tputs $f \"#elif defined(_GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP)\"\n \tputs $f \"#elif defined(_GLIBCXX_USE_SYSCTL_HW_NCPU)\"\n@@ -1849,7 +1899,7 @@ proc check_v3_target_static_libstdcxx { } {\n \tset src static-maybe[pid].cc\n \n \tset f [open $src \"w\"]\n-        puts $f \"#include <iostream>\"\n+\tputs $f \"#include <iostream>\"\n \tputs $f \"int main() {\"\n \tputs $f \"int i(415);\"\n \tputs $f \"std::cout<< i << std::endl;\"\n@@ -1883,46 +1933,46 @@ proc check_v3_target_little_endian { } {\n     global tool\n \n     if { ![info exists et_little_endian_target_name] } {\n-        set et_little_endian_target_name \"\"\n+\tset et_little_endian_target_name \"\"\n     }\n \n     # If the target has changed since we set the cached value, clear it.\n     set current_target [current_target_name]\n     if { $current_target != $et_little_endian_target_name } {\n-        verbose \"check_v3_target_little_endian: `$et_little_endian_target_name'\" 2\n-        set et_little_endian_target_name $current_target\n-        if [info exists et_little_endian] {\n-            verbose \"check_v3_target_little_endian: removing cached result\" 2\n-            unset et_little_endian\n-        }\n+\tverbose \"check_v3_target_little_endian: `$et_little_endian_target_name'\" 2\n+\tset et_little_endian_target_name $current_target\n+\tif [info exists et_little_endian] {\n+\t    verbose \"check_v3_target_little_endian: removing cached result\" 2\n+\t    unset et_little_endian\n+\t}\n     }\n \n     if [info exists et_little_endian] {\n-        verbose \"check_v3_target_little_endian: using cached result\" 2\n+\tverbose \"check_v3_target_little_endian: using cached result\" 2\n     } else {\n-        set et_little_endian 0\n+\tset et_little_endian 0\n \t\n-        set src little_endian[pid].cc\n+\tset src little_endian[pid].cc\n \n-        set f [open $src \"w\"]\n-        puts $f \"#if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__\"\n-        puts $f \"#  error Not little endian\"\n-        puts $f \"#endif\"\n-        close $f\n+\tset f [open $src \"w\"]\n+\tputs $f \"#if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__\"\n+\tputs $f \"#  error Not little endian\"\n+\tputs $f \"#endif\"\n+\tclose $f\n \n-        set cxxflags_saved $cxxflags\n-        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n-        set lines [v3_target_compile $src /dev/null preprocess \"\"]\n-        set cxxflags $cxxflags_saved\n-        file delete $src\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n \n-        if [string match \"\" $lines] {\n-            # No error message, preprocessing succeeded.\n-            set et_little_endian 1\n-        } else {\n-            verbose \"check_v3_target_little_endian: compilation failed\" 2\n-        }\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    set et_little_endian 1\n+\t} else {\n+\t    verbose \"check_v3_target_little_endian: compilation failed\" 2\n+\t}\n     }\n     verbose \"check_v3_target_little_endian: $et_little_endian\" 2\n     return $et_little_endian\n@@ -2002,9 +2052,9 @@ proc check_effective_target_cxx11-abi { } {\n     file delete $src\n \n     if [string match \"\" $lines] {\n-        # No error message, preprocessing succeeded.\n-        verbose \"check_v3_cxx11_abi: `1'\" 2\n-        return 1\n+\t# No error message, preprocessing succeeded.\n+\tverbose \"check_v3_cxx11_abi: `1'\" 2\n+\treturn 1\n     }\n \n     verbose \"check_v3_cxx11_abi: `0'\" 2"}]}