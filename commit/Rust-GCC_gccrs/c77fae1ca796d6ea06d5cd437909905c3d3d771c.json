{"sha": "c77fae1ca796d6ea06d5cd437909905c3d3d771c", "node_id": "C_kwDOANBUbNoAKGM3N2ZhZTFjYTc5NmQ2ZWEwNmQ1Y2Q0Mzc5MDk5MDVjM2QzZDc3MWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-19T12:12:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-22T06:17:24Z"}, "message": "tree-optimization/105937 - avoid uninit diagnostics crossing iterations\n\nThe following avoids adding PHIs to the worklist for uninit processing\nif we reach them following backedges.  That confuses predicate analysis\nbecause it assumes the use is happening in the same iteration as the the\ndefinition.  For the testcase in the PR the situation is like\n\nvoid foo (int val)\n{\n  int uninit;\n  # val = PHI <..> (B)\n  for (..)\n    {\n      if (..)\n        {\n          .. = val; (C)\n          val = uninit;\n        }\n      # val = PHI <..> (A)\n    }\n}\n\nand starting from (A) with 'uninit' as argument we arrive at (B)\nand from there at (C).  Predicate analysis then tries to prove\nthe predicate of (B) (not the backedge) can prove that the\npath from (B) to (C) is unreachable which isn't really what it\nnecessary - that's what we'd need to do when the preheader\nedge of the loop were the edge with the uninitialized def.\n\nSo the following makes those cases intentionally false negatives.\n\n\tPR tree-optimization/105937\n\t* tree-ssa-uninit.cc (find_uninit_use): Do not queue PHIs\n\ton backedges.\n\t(execute_late_warn_uninitialized): Mark backedges.\n\n\t* g++.dg/uninit-pr105937.C: New testcase.", "tree": {"sha": "7fcf868410795cb8909115d3c18912e080e4c71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fcf868410795cb8909115d3c18912e080e4c71a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77fae1ca796d6ea06d5cd437909905c3d3d771c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77fae1ca796d6ea06d5cd437909905c3d3d771c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77fae1ca796d6ea06d5cd437909905c3d3d771c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77fae1ca796d6ea06d5cd437909905c3d3d771c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66cf626c72d5872fc3181e81535afbff7263287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66cf626c72d5872fc3181e81535afbff7263287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66cf626c72d5872fc3181e81535afbff7263287"}], "stats": {"total": 249, "additions": 247, "deletions": 2}, "files": [{"sha": "26b4f74c5e1e446657b7cba5ad32b7ba833b7e8a", "filename": "gcc/testsuite/g++.dg/uninit-pr105937.C", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77fae1ca796d6ea06d5cd437909905c3d3d771c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Funinit-pr105937.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77fae1ca796d6ea06d5cd437909905c3d3d771c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Funinit-pr105937.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Funinit-pr105937.C?ref=c77fae1ca796d6ea06d5cd437909905c3d3d771c", "patch": "@@ -0,0 +1,235 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++17 }\n+// { dg-options \"-O2 -Wall\" }\n+\n+#include <stdint.h>\n+#include <optional>\n+#include <string_view>\n+\n+using utf8 = char;\n+\n+enum\n+{\n+    FONT_SIZE_TINY = 2,\n+    FONT_SIZE_SMALL = 0,\n+    FONT_SIZE_MEDIUM = 1,\n+    FONT_SIZE_COUNT = 3\n+};\n+\n+constexpr const uint16_t FONT_SPRITE_GLYPH_COUNT = 224;\n+\n+enum class FontSpriteBase : int16_t\n+{\n+    MEDIUM_EXTRA_DARK = -2,\n+    MEDIUM_DARK = -1,\n+\n+    TINY = FONT_SIZE_TINY * FONT_SPRITE_GLYPH_COUNT,\n+    SMALL = FONT_SIZE_SMALL * FONT_SPRITE_GLYPH_COUNT,\n+    MEDIUM = FONT_SIZE_MEDIUM * FONT_SPRITE_GLYPH_COUNT,\n+};\n+\n+struct TTFSurface;\n+\n+class CodepointView\n+{\n+private:\n+    std::string_view _str;\n+\n+public:\n+    class iterator\n+    {\n+    private:\n+        std::string_view _str;\n+        size_t _index;\n+\n+    public:\n+        iterator(std::string_view str, size_t index)\n+            : _str(str)\n+            , _index(index)\n+        {\n+        }\n+\n+        bool operator==(const iterator& rhs) const\n+        {\n+            return _index == rhs._index;\n+        }\n+        bool operator!=(const iterator& rhs) const\n+        {\n+            return _index != rhs._index;\n+        }\n+        char32_t operator*() const\n+        {\n+            return GetNextCodepoint(&_str[_index], nullptr);\n+        }\n+        iterator& operator++()\n+        {\n+            return *this;\n+        }\n+        iterator operator++(int)\n+        {\n+            auto result = *this;\n+            if (_index < _str.size())\n+            {\n+                const utf8* nextch;\n+                GetNextCodepoint(&_str[_index], &nextch);\n+                _index = nextch - _str.data();\n+            }\n+            return result;\n+        }\n+\n+        size_t GetIndex() const\n+        {\n+            return _index;\n+        }\n+\n+        static char32_t GetNextCodepoint(const char* ch, const char** next);\n+    };\n+\n+    CodepointView(std::string_view str)\n+        : _str(str)\n+    {\n+    }\n+\n+    iterator begin() const\n+    {\n+        return iterator(_str, 0);\n+    }\n+\n+    iterator end() const\n+    {\n+        return iterator(_str, _str.size());\n+    }\n+};\n+\n+struct InternalTTFFont;\n+using TTF_Font = InternalTTFFont;\n+struct TTFFontDescriptor\n+{\n+    const utf8* filename;\n+    const utf8* font_name;\n+    int32_t ptSize;\n+    int32_t offset_x;\n+    int32_t offset_y;\n+    int32_t line_height;\n+    int32_t hinting_threshold;\n+    TTF_Font* font;\n+};\n+using codepoint_t = uint32_t;\n+\n+#define abstract = 0\n+\n+struct ITTF\n+{\n+    virtual ~ITTF() = default;\n+    virtual TTFFontDescriptor* ttf_get_font_from_sprite_base(FontSpriteBase spriteBase) abstract;\n+    virtual TTFSurface* ttf_surface_cache_get_or_add(TTF_Font* font, std::string_view text) abstract;\n+};\n+\n+namespace OpenRCT2 {\n+    struct IContext\n+    {\n+        virtual ~IContext() = default;\n+\n+        virtual ITTF* GetTTF() abstract;\n+    };\n+}\n+\n+static void ttf_draw_string_raw_ttf(OpenRCT2::IContext* context, std::string_view text)\n+{\n+    TTFFontDescriptor* fontDesc = context->GetTTF()->ttf_get_font_from_sprite_base(FontSpriteBase::MEDIUM_EXTRA_DARK);\n+    if (fontDesc->font == nullptr)\n+    {\n+        return;\n+    }\n+\n+    TTFSurface* surface = context->GetTTF()->ttf_surface_cache_get_or_add(fontDesc->font, text);\n+    if (surface == nullptr)\n+        return;\n+}\n+\n+namespace UnicodeChar\n+{\n+    // Punctuation\n+    constexpr char32_t leftguillemet = 0xAB;\n+    constexpr char32_t rightguillemet = 0xBB;\n+    constexpr char32_t german_quote_open = 0x201E;\n+    constexpr char32_t quote_open = 0x201C;\n+    constexpr char32_t quote_close = 0x201D;\n+\n+    // Dingbats\n+    constexpr char32_t up = 0x25B2;\n+    constexpr char32_t small_up = 0x25B4;\n+    constexpr char32_t right = 0x25B6;\n+    constexpr char32_t down = 0x25BC;\n+    constexpr char32_t small_down = 0x25BE;\n+    constexpr char32_t left = 0x25C0;\n+    constexpr char32_t tick = 0x2713;\n+    constexpr char32_t plus = 0x2795;\n+    constexpr char32_t minus = 0x2796;\n+\n+    // Emoji\n+    constexpr char32_t cross = 0x274C;\n+    constexpr char32_t variation_selector = 0xFE0F;\n+    constexpr char32_t eye = 0x1F441;\n+    constexpr char32_t road = 0x1F6E3;\n+    constexpr char32_t railway = 0x1F6E4;\n+}; // namespace UnicodeChar\n+\n+\n+static bool ShouldUseSpriteForCodepoint(char32_t codepoint)\n+{\n+    switch (codepoint)\n+    {\n+        case UnicodeChar::up:\n+        case UnicodeChar::down:\n+        case UnicodeChar::leftguillemet:\n+        case UnicodeChar::tick:\n+        case UnicodeChar::cross:\n+        case UnicodeChar::right:\n+        case UnicodeChar::rightguillemet:\n+        case UnicodeChar::small_up:\n+        case UnicodeChar::small_down:\n+        case UnicodeChar::left:\n+        case UnicodeChar::quote_open:\n+        case UnicodeChar::quote_close:\n+        case UnicodeChar::german_quote_open:\n+        case UnicodeChar::plus:\n+        case UnicodeChar::minus:\n+        case UnicodeChar::variation_selector:\n+        case UnicodeChar::eye:\n+        case UnicodeChar::road:\n+        case UnicodeChar::railway:\n+            return true;\n+        default:\n+            return false;\n+    }\n+}\n+\n+void ttf_process_string_literal(OpenRCT2::IContext* context, std::string_view text)\n+{\n+    CodepointView codepoints(text);\n+    std::optional<size_t> ttfRunIndex;\n+    for (auto it = codepoints.begin(); it != codepoints.end(); it++)\n+    {\n+        auto codepoint = *it;\n+        if (ShouldUseSpriteForCodepoint(codepoint))\n+        {\n+            if (ttfRunIndex.has_value())\n+            {\n+                // Draw the TTF run\n+                auto len = it.GetIndex() - ttfRunIndex.value();  // { dg-bogus \"may be used uninitialized\" }\n+                ttf_draw_string_raw_ttf(context, text.substr(ttfRunIndex.value(), len));\n+                ttfRunIndex = std::nullopt;\n+            }\n+\n+            // Draw the sprite font glyph\n+        }\n+        else\n+        {\n+            if (!ttfRunIndex.has_value())\n+            {\n+                ttfRunIndex = it.GetIndex();\n+            }\n+        }\n+    }\n+}"}, {"sha": "7074c9117b28077a2ab98922c7a7b20622fb9173", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77fae1ca796d6ea06d5cd437909905c3d3d771c/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77fae1ca796d6ea06d5cd437909905c3d3d771c/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=c77fae1ca796d6ea06d5cd437909905c3d3d771c", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-predicate-analysis.h\"\n #include \"domwalk.h\"\n #include \"tree-ssa-sccvn.h\"\n+#include \"cfganal.h\"\n \n /* This implements the pass that does predicate aware warning on uses of\n    possibly uninitialized variables.  The pass first collects the set of\n@@ -1191,8 +1192,16 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n \n       basic_block use_bb;\n       if (gphi *use_phi = dyn_cast<gphi *> (use_stmt))\n-\tuse_bb = gimple_phi_arg_edge (use_phi,\n-\t\t\t\t      PHI_ARG_INDEX_FROM_USE (use_p))->src;\n+\t{\n+\t  edge e = gimple_phi_arg_edge (use_phi,\n+\t\t\t\t\tPHI_ARG_INDEX_FROM_USE (use_p));\n+\t  use_bb = e->src;\n+\t  /* Do not look for uses in the next iteration of a loop, predicate\n+\t     analysis will not use the appropriate predicates to prove\n+\t     reachability.  */\n+\t  if (e->flags & EDGE_DFS_BACK)\n+\t    continue;\n+\t}\n       else\n \tuse_bb = gimple_bb (use_stmt);\n \n@@ -1342,6 +1351,7 @@ execute_late_warn_uninitialized (function *fun)\n   /* Mark all edges executable, warn_uninitialized_vars will skip\n      unreachable blocks.  */\n   set_all_edges_as_executable (fun);\n+  mark_dfs_back_edges (fun);\n \n   /* Re-do the plain uninitialized variable check, as optimization may have\n      straightened control flow.  Do this first so that we don't accidentally"}]}