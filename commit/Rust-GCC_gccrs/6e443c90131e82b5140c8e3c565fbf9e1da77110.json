{"sha": "6e443c90131e82b5140c8e3c565fbf9e1da77110", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0NDNjOTAxMzFlODJiNTE0MGM4ZTNjNTY1ZmJmOWUxZGE3NzExMA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-10-31T17:51:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:51:56Z"}, "message": "einfo.ads, einfo.adb (Obsolescent_Warning): Now defined on all entities.\n\n2006-10-31  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\t    Bob Duff  <duff@adacore.com>\n\n\t* einfo.ads, einfo.adb (Obsolescent_Warning): Now defined on all\n\tentities. Move other fields around to make this possible\n\t(Is_Derived_Type): Add missing call to Is_Type.\n\t(Extra_Formals): New function for subprograms, entries, subprogram\n\ttypes.\n\t(Set_Extra_Formals): New procedure for subprograms, entries, subp types.\n\t(First_Formal_With_Extras): New function for subprogs, entries, subp\n\ttypes.\n\t(Write_Field28_Name): New procedure for node display of \"Extra_Formals\".\n\tAdd node information for E_Return_Statement.\n\t(Elaborate_Body_Desirable): New flag\n\t(Is_Return_By_Reference_Type): Rename Is_Return_By_Reference_Type\n\tto be Is_Inherently_Limited_Type, because return-by-reference has\n\tno meaning in Ada 2005.\n\t(E_Return_Statement): New entity kind.\n\t(Return_Applies_To): Field of E_Return_Statement.\n\t(Is_Return_Object): New flag in object entities.\n\t(Is_Dynamic_Scope): Make it True for E_Return_Statement.\n\t(Must_Have_Preelab_Init): New flag\n\t(Known_To_Have_Preelab_Init): New flag\n\t(Is_Formal_Object): Move from Sem_Ch8 body to Einfo\n\t(Is_Visible_Formal): New flag on entities in formal packages.\n\t(Low_Bound_Known): New flag\n\t(Non_Limited_View, Set_Non_Limited_View): Add membership test agains\n\tIncomplete_Kind.\n\t(Write_Field17_Name): Correct spelling of Non_Limited_View. Add name\n\toutput when Id is an incomplete subtype.\n\nFrom-SVN: r118250", "tree": {"sha": "4efd02d5d8b22995e16ba3aff882dd26c626792a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4efd02d5d8b22995e16ba3aff882dd26c626792a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e443c90131e82b5140c8e3c565fbf9e1da77110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e443c90131e82b5140c8e3c565fbf9e1da77110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e443c90131e82b5140c8e3c565fbf9e1da77110", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e443c90131e82b5140c8e3c565fbf9e1da77110/comments", "author": null, "committer": null, "parents": [{"sha": "cce685621b46adb534ec20fcf9a76606596288be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce685621b46adb534ec20fcf9a76606596288be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce685621b46adb534ec20fcf9a76606596288be"}], "stats": {"total": 859, "additions": 622, "deletions": 237}, "files": [{"sha": "51c97daaaebbcd5c84e0be934cf92ebcf28cec05", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 283, "deletions": 92, "changes": 375, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e443c90131e82b5140c8e3c565fbf9e1da77110/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e443c90131e82b5140c8e3c565fbf9e1da77110/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=6e443c90131e82b5140c8e3c565fbf9e1da77110", "patch": "@@ -71,15 +71,17 @@ package body Einfo is\n    --    Homonym                         Node4\n    --    First_Rep_Item                  Node6\n    --    Freeze_Node                     Node7\n+   --    Obsolescent_Warning             Node24\n \n-   --  The usage of each field (and the entity kinds to which it applies)\n+   --  The usage of other fields (and the entity kinds to which it applies)\n    --  depends on the particular field (see Einfo spec for details).\n \n    --    Associated_Node_For_Itype       Node8\n    --    Dependent_Instances             Elist8\n    --    Hiding_Loop_Variable            Node8\n    --    Mechanism                       Uint8 (but returns Mechanism_Type)\n    --    Normalized_First_Bit            Uint8\n+   --    Return_Applies_To               Node8\n \n    --    Class_Wide_Type                 Node9\n    --    Current_Value                   Node9\n@@ -174,6 +176,7 @@ package body Einfo is\n    --    Directly_Designated_Type        Node20\n    --    Discriminant_Checking_Func      Node20\n    --    Discriminant_Default_Value      Node20\n+   --    Last_Assignment                 Node20\n    --    Last_Entity                     Node20\n    --    Register_Exception_Call         Node20\n    --    Scalar_Range                    Node20\n@@ -209,19 +212,19 @@ package body Einfo is\n    --    Privals_Chain                   Elist23\n    --    Protected_Operation             Node23\n \n-   --    DT_Offset_To_Top_Func           Node24\n-   --    Obsolescent_Warning             Node24\n-   --    Task_Body_Procedure             Node24\n-   --    Abstract_Interfaces             Elist24\n-\n    --    Abstract_Interface_Alias        Node25\n+   --    Abstract_Interfaces             Elist25\n    --    Current_Use_Clause              Node25\n+   --    DT_Offset_To_Top_Func           Node25\n+   --    Task_Body_Procedure             Node25\n \n    --    Overridden_Operation            Node26\n    --    Package_Instantiation           Node26\n \n    --    Wrapped_Entity                  Node27\n \n+   --    Extra_Formals                   Node28\n+\n    ---------------------------------------------\n    -- Usage of Flags in Defining Entity Nodes --\n    ---------------------------------------------\n@@ -434,7 +437,7 @@ package body Einfo is\n    --    Has_Xref_Entry                 Flag182\n    --    Must_Be_On_Byte_Boundary       Flag183\n    --    Has_Stream_Size_Clause         Flag184\n-   --    Is_Ada_2005                    Flag185\n+   --    Is_Ada_2005_Only               Flag185\n    --    Is_Interface                   Flag186\n    --    Has_Constrained_Partial_View   Flag187\n    --    Has_Persistent_BSS             Flag188\n@@ -456,14 +459,15 @@ package body Einfo is\n    --    Itype_Printed                  Flag202\n    --    Has_Pragma_Pure                Flag203\n    --    Is_Known_Null                  Flag204\n+   --    Low_Bound_Known                Flag205\n+   --    Is_Visible_Formal              Flag206\n+   --    Known_To_Have_Preelab_Init     Flag207\n+   --    Must_Have_Preelab_Init         Flag208\n+   --    Is_Return_Object               Flag209\n+   --    Elaborate_Body_Desirable       Flag210\n+\n+   --    Has_Static_Discriminants       Flag211\n \n-   --    (unused)                       Flag205\n-   --    (unused)                       Flag206\n-   --    (unused)                       Flag207\n-   --    (unused)                       Flag208\n-   --    (unused)                       Flag209\n-   --    (unused)                       Flag210\n-   --    (unused)                       Flag211\n    --    (unused)                       Flag212\n    --    (unused)                       Flag213\n    --    (unused)                       Flag214\n@@ -511,7 +515,7 @@ package body Einfo is\n           or else Ekind (Id) = E_Record_Type_With_Private\n           or else Ekind (Id) = E_Record_Subtype_With_Private\n           or else Ekind (Id) = E_Class_Wide_Type);\n-      return Elist24 (Id);\n+      return Elist25 (Id);\n    end Abstract_Interfaces;\n \n    function Abstract_Interface_Alias (Id : E) return E is\n@@ -836,7 +840,7 @@ package body Einfo is\n    function DT_Offset_To_Top_Func (Id : E) return E is\n    begin\n       pragma Assert (Ekind (Id) = E_Component and then Is_Tag (Id));\n-      return Node24 (Id);\n+      return Node25 (Id);\n    end DT_Offset_To_Top_Func;\n \n    function DT_Position (Id : E) return U is\n@@ -855,6 +859,12 @@ package body Einfo is\n       return Node16 (Id);\n    end DTC_Entity;\n \n+   function Elaborate_Body_Desirable (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      return Flag210 (Id);\n+   end Elaborate_Body_Desirable;\n+\n    function Elaboration_Entity (Id : E) return E is\n    begin\n       pragma Assert\n@@ -981,6 +991,16 @@ package body Einfo is\n       return Node15 (Id);\n    end Extra_Formal;\n \n+   function Extra_Formals (Id : E) return E is\n+   begin\n+      pragma Assert\n+        (Is_Overloadable (Id)\n+          or else Ekind (Id) = E_Entry_Family\n+          or else Ekind (Id) = E_Subprogram_Body\n+          or else Ekind (Id) = E_Subprogram_Type);\n+      return Node28 (Id);\n+   end Extra_Formals;\n+\n    function Finalization_Chain_Entity (Id : E) return E is\n    begin\n       return Node19 (Id);\n@@ -1018,10 +1038,7 @@ package body Einfo is\n    begin\n       pragma Assert (Ekind (Id) = E_Package\n                        or else Ekind (Id) = E_Generic_Package\n-                       or else Ekind (Id) = E_Protected_Type\n-                       or else Ekind (Id) = E_Protected_Subtype\n-                       or else Ekind (Id) = E_Task_Type\n-                       or else Ekind (Id) = E_Task_Subtype);\n+                       or else Ekind (Id) in Concurrent_Kind);\n       return Node16 (Id);\n    end First_Private_Entity;\n \n@@ -1346,6 +1363,12 @@ package body Einfo is\n       return Flag193 (Id);\n    end Has_Specified_Stream_Write;\n \n+   function Has_Static_Discriminants (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Flag211 (Id);\n+   end Has_Static_Discriminants;\n+\n    function Has_Storage_Size_Clause (Id : E) return B is\n    begin\n       pragma Assert (Is_Access_Type (Id) or else Is_Task_Type (Id));\n@@ -1443,10 +1466,10 @@ package body Einfo is\n       return Flag69 (Id);\n    end Is_Access_Constant;\n \n-   function Is_Ada_2005 (Id : E) return B is\n+   function Is_Ada_2005_Only (Id : E) return B is\n    begin\n       return Flag185 (Id);\n-   end Is_Ada_2005;\n+   end Is_Ada_2005_Only;\n \n    function Is_Aliased (Id : E) return B is\n    begin\n@@ -1819,6 +1842,11 @@ package body Einfo is\n       return Flag112 (Id);\n    end Is_Renaming_Of_Object;\n \n+   function Is_Return_Object (Id : E) return B is\n+   begin\n+      return Flag209 (Id);\n+   end Is_Return_Object;\n+\n    function Is_Shared_Passive (Id : E) return B is\n    begin\n       return Flag60 (Id);\n@@ -1885,6 +1913,11 @@ package body Einfo is\n       return Flag116 (Id);\n    end Is_Visible_Child_Unit;\n \n+   function Is_Visible_Formal (Id : E) return B is\n+   begin\n+      return Flag206 (Id);\n+   end Is_Visible_Formal;\n+\n    function Is_VMS_Exception (Id : E) return B is\n    begin\n       return Flag133 (Id);\n@@ -1922,6 +1955,18 @@ package body Einfo is\n       return Flag34 (Id);\n    end Kill_Tag_Checks;\n \n+   function Known_To_Have_Preelab_Init (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Flag207 (Id);\n+   end Known_To_Have_Preelab_Init;\n+\n+   function Last_Assignment (Id : E) return N is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Variable);\n+      return Node20 (Id);\n+   end Last_Assignment;\n+\n    function Last_Entity (Id : E) return E is\n    begin\n       return Node20 (Id);\n@@ -1945,6 +1990,11 @@ package body Einfo is\n       return Node16 (Id);\n    end Lit_Strings;\n \n+   function Low_Bound_Known (Id : E) return B is\n+   begin\n+      return Flag205 (Id);\n+   end Low_Bound_Known;\n+\n    function Machine_Radix_10 (Id : E) return B is\n    begin\n       pragma Assert (Is_Decimal_Fixed_Point_Type (Id));\n@@ -1979,6 +2029,12 @@ package body Einfo is\n       return Flag183 (Id);\n    end Must_Be_On_Byte_Boundary;\n \n+   function Must_Have_Preelab_Init (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Flag208 (Id);\n+   end Must_Have_Preelab_Init;\n+\n    function Needs_Debug_Info (Id : E) return B is\n    begin\n       return Flag147 (Id);\n@@ -2029,7 +2085,7 @@ package body Einfo is\n    function Non_Limited_View (Id : E) return E is\n    begin\n       pragma Assert (False\n-        or else Ekind (Id) = E_Incomplete_Type);\n+        or else Ekind (Id) in Incomplete_Kind);\n       return Node17 (Id);\n    end Non_Limited_View;\n \n@@ -2068,8 +2124,6 @@ package body Einfo is\n \n    function Obsolescent_Warning (Id : E) return N is\n    begin\n-      pragma Assert\n-        (Is_Subprogram (Id) or else Is_Package_Or_Generic_Package (Id));\n       return Node24 (Id);\n    end Obsolescent_Warning;\n \n@@ -2231,6 +2285,11 @@ package body Einfo is\n       return Flag54 (Id);\n    end Return_Present;\n \n+   function Return_Applies_To (Id : E) return N is\n+   begin\n+      return Node8 (Id);\n+   end Return_Applies_To;\n+\n    function Returns_By_Ref (Id : E) return B is\n    begin\n       return Flag90 (Id);\n@@ -2361,9 +2420,8 @@ package body Einfo is\n \n    function Task_Body_Procedure (Id : E) return N is\n    begin\n-      pragma Assert (Ekind (Id) = E_Task_Type\n-                      or else Ekind (Id) = E_Task_Subtype);\n-      return Node24 (Id);\n+      pragma Assert (Ekind (Id) in Task_Kind);\n+      return Node25 (Id);\n    end Task_Body_Procedure;\n \n    function Treat_As_Volatile (Id : E) return B is\n@@ -2502,6 +2560,11 @@ package body Einfo is\n       return Ekind (Id) in Formal_Kind;\n    end Is_Formal;\n \n+   function Is_Formal_Object                    (Id : E) return B is\n+   begin\n+      return Ekind (Id) in Formal_Object_Kind;\n+   end Is_Formal_Object;\n+\n    function Is_Generic_Subprogram               (Id : E) return B is\n    begin\n       return Ekind (Id) in Generic_Subprogram_Kind;\n@@ -2518,6 +2581,12 @@ package body Einfo is\n         Incomplete_Or_Private_Kind;\n    end Is_Incomplete_Or_Private_Type;\n \n+   function Is_Incomplete_Type                  (Id : E) return B is\n+   begin\n+      return Ekind (Id) in\n+        Incomplete_Kind;\n+   end Is_Incomplete_Type;\n+\n    function Is_Integer_Type                     (Id : E) return B is\n    begin\n       return Ekind (Id) in Integer_Kind;\n@@ -2613,13 +2682,15 @@ package body Einfo is\n           or else Ekind (Id) = E_Record_Type_With_Private\n           or else Ekind (Id) = E_Record_Subtype_With_Private\n           or else Ekind (Id) = E_Class_Wide_Type);\n-      Set_Elist24 (Id, V);\n+      Set_Elist25 (Id, V);\n    end Set_Abstract_Interfaces;\n \n    procedure Set_Abstract_Interface_Alias (Id : E; V : E) is\n    begin\n       pragma Assert\n-        (Ekind (Id) = E_Procedure or Ekind (Id) = E_Function);\n+        (Is_Hidden (Id)\n+          and then\n+           (Ekind (Id) = E_Procedure or else Ekind (Id) = E_Function));\n       Set_Node25 (Id, V);\n    end Set_Abstract_Interface_Alias;\n \n@@ -2946,7 +3017,7 @@ package body Einfo is\n    procedure Set_DT_Offset_To_Top_Func (Id : E; V : E) is\n    begin\n       pragma Assert (Ekind (Id) = E_Component and then Is_Tag (Id));\n-      Set_Node24 (Id, V);\n+      Set_Node25 (Id, V);\n    end Set_DT_Offset_To_Top_Func;\n \n    procedure Set_DT_Position (Id : E; V : U) is\n@@ -2962,6 +3033,12 @@ package body Einfo is\n       Set_Node16 (Id, V);\n    end Set_DTC_Entity;\n \n+   procedure Set_Elaborate_Body_Desirable (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      Set_Flag210 (Id, V);\n+   end Set_Elaborate_Body_Desirable;\n+\n    procedure Set_Elaboration_Entity (Id : E; V : E) is\n    begin\n       pragma Assert\n@@ -3089,6 +3166,16 @@ package body Einfo is\n       Set_Node15 (Id, V);\n    end Set_Extra_Formal;\n \n+   procedure Set_Extra_Formals (Id : E; V : E) is\n+   begin\n+      pragma Assert\n+        (Is_Overloadable (Id)\n+          or else Ekind (Id) = E_Entry_Family\n+          or else Ekind (Id) = E_Subprogram_Body\n+          or else Ekind (Id) = E_Subprogram_Type);\n+      Set_Node28 (Id, V);\n+   end Set_Extra_Formals;\n+\n    procedure Set_Finalization_Chain_Entity (Id : E; V : E) is\n    begin\n       Set_Node19 (Id, V);\n@@ -3126,10 +3213,7 @@ package body Einfo is\n    begin\n       pragma Assert (Ekind (Id) = E_Package\n                        or else Ekind (Id) = E_Generic_Package\n-                       or else Ekind (Id) = E_Protected_Type\n-                       or else Ekind (Id) = E_Protected_Subtype\n-                       or else Ekind (Id) = E_Task_Type\n-                       or else Ekind (Id) = E_Task_Subtype);\n+                       or else Ekind (Id) in Concurrent_Kind);\n       Set_Node16 (Id, V);\n    end Set_First_Private_Entity;\n \n@@ -3220,7 +3304,7 @@ package body Einfo is\n \n    procedure Set_Has_Completion_In_Body (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Incomplete_Type);\n+      pragma Assert (Is_Type (Id));\n       Set_Flag71 (Id, V);\n    end Set_Has_Completion_In_Body;\n \n@@ -3463,6 +3547,11 @@ package body Einfo is\n       Set_Flag193 (Id, V);\n    end Set_Has_Specified_Stream_Write;\n \n+   procedure Set_Has_Static_Discriminants (Id : E; V : B := True) is\n+   begin\n+      Set_Flag211 (Id, V);\n+   end Set_Has_Static_Discriminants;\n+\n    procedure Set_Has_Storage_Size_Clause (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Access_Type (Id) or else Is_Task_Type (Id));\n@@ -3565,10 +3654,10 @@ package body Einfo is\n       Set_Flag69 (Id, V);\n    end Set_Is_Access_Constant;\n \n-   procedure Set_Is_Ada_2005 (Id : E; V : B := True) is\n+   procedure Set_Is_Ada_2005_Only (Id : E; V : B := True) is\n    begin\n       Set_Flag185 (Id, V);\n-   end Set_Is_Ada_2005;\n+   end Set_Is_Ada_2005_Only;\n \n    procedure Set_Is_Aliased (Id : E; V : B := True) is\n    begin\n@@ -3965,6 +4054,11 @@ package body Einfo is\n       Set_Flag112 (Id, V);\n    end Set_Is_Renaming_Of_Object;\n \n+   procedure Set_Is_Return_Object (Id : E; V : B := True) is\n+   begin\n+      Set_Flag209 (Id, V);\n+   end Set_Is_Return_Object;\n+\n    procedure Set_Is_Shared_Passive (Id : E; V : B := True) is\n    begin\n       Set_Flag60 (Id, V);\n@@ -4038,6 +4132,11 @@ package body Einfo is\n       Set_Flag116 (Id, V);\n    end Set_Is_Visible_Child_Unit;\n \n+   procedure Set_Is_Visible_Formal (Id : E; V : B := True) is\n+   begin\n+      Set_Flag206 (Id, V);\n+   end Set_Is_Visible_Formal;\n+\n    procedure Set_Is_VMS_Exception (Id : E; V : B := True) is\n    begin\n       pragma Assert (Ekind (Id) = E_Exception);\n@@ -4071,6 +4170,18 @@ package body Einfo is\n       Set_Flag34 (Id, V);\n    end Set_Kill_Tag_Checks;\n \n+   procedure Set_Known_To_Have_Preelab_Init (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      Set_Flag207 (Id, V);\n+   end Set_Known_To_Have_Preelab_Init;\n+\n+   procedure Set_Last_Assignment (Id : E; V : N) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Variable);\n+      Set_Node20 (Id, V);\n+   end Set_Last_Assignment;\n+\n    procedure Set_Last_Entity (Id : E; V : E) is\n    begin\n       Set_Node20 (Id, V);\n@@ -4094,6 +4205,12 @@ package body Einfo is\n       Set_Node16 (Id, V);\n    end Set_Lit_Strings;\n \n+   procedure Set_Low_Bound_Known (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Formal (Id));\n+      Set_Flag205 (Id, V);\n+   end Set_Low_Bound_Known;\n+\n    procedure Set_Machine_Radix_10 (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Decimal_Fixed_Point_Type (Id));\n@@ -4128,6 +4245,12 @@ package body Einfo is\n       Set_Flag183 (Id, V);\n    end Set_Must_Be_On_Byte_Boundary;\n \n+   procedure Set_Must_Have_Preelab_Init (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      Set_Flag208 (Id, V);\n+   end Set_Must_Have_Preelab_Init;\n+\n    procedure Set_Needs_Debug_Info (Id : E; V : B := True) is\n    begin\n       Set_Flag147 (Id, V);\n@@ -4180,9 +4303,9 @@ package body Einfo is\n    end Set_Non_Binary_Modulus;\n \n    procedure Set_Non_Limited_View (Id : E; V : E) is\n-      pragma Assert (False\n-        or else Ekind (Id) = E_Incomplete_Type);\n    begin\n+      pragma Assert (False\n+        or else Ekind (Id) in Incomplete_Kind);\n       Set_Node17 (Id, V);\n    end Set_Non_Limited_View;\n \n@@ -4223,8 +4346,6 @@ package body Einfo is\n \n    procedure Set_Obsolescent_Warning (Id : E; V : N) is\n    begin\n-      pragma Assert\n-        (Is_Subprogram (Id) or else Is_Package_Or_Generic_Package (Id));\n       Set_Node24 (Id, V);\n    end Set_Obsolescent_Warning;\n \n@@ -4386,6 +4507,11 @@ package body Einfo is\n       Set_Flag54 (Id, V);\n    end Set_Return_Present;\n \n+   procedure Set_Return_Applies_To (Id : E; V : N) is\n+   begin\n+      Set_Node8 (Id, V);\n+   end Set_Return_Applies_To;\n+\n    procedure Set_Returns_By_Ref (Id : E; V : B := True) is\n    begin\n       Set_Flag90 (Id, V);\n@@ -4521,9 +4647,8 @@ package body Einfo is\n \n    procedure Set_Task_Body_Procedure (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Task_Type\n-                      or else Ekind (Id) = E_Task_Subtype);\n-      Set_Node24 (Id, V);\n+      pragma Assert (Ekind (Id) in Task_Kind);\n+      Set_Node25 (Id, V);\n    end Set_Task_Body_Procedure;\n \n    procedure Set_Treat_As_Volatile (Id : E; V : B := True) is\n@@ -5214,6 +5339,34 @@ package body Einfo is\n       end if;\n    end First_Formal;\n \n+   ------------------------------\n+   -- First_Formal_With_Extras --\n+   ------------------------------\n+\n+   function First_Formal_With_Extras (Id : E) return E is\n+      Formal : E;\n+\n+   begin\n+      pragma Assert\n+        (Is_Overloadable (Id)\n+          or else Ekind (Id) = E_Entry_Family\n+          or else Ekind (Id) = E_Subprogram_Body\n+          or else Ekind (Id) = E_Subprogram_Type);\n+\n+      if Ekind (Id) = E_Enumeration_Literal then\n+         return Empty;\n+\n+      else\n+         Formal := First_Entity (Id);\n+\n+         if Present (Formal) and then Is_Formal (Formal) then\n+            return Formal;\n+         else\n+            return Extra_Formals (Id);  -- Empty if no extra formals\n+         end if;\n+      end if;\n+   end First_Formal_With_Extras;\n+\n    -------------------------------\n    -- First_Stored_Discriminant --\n    -------------------------------\n@@ -5661,7 +5814,8 @@ package body Einfo is\n       Par : Node_Id;\n \n    begin\n-      if Base_Type (Id) /= Root_Type (Id)\n+      if Is_Type (Id)\n+        and then Base_Type (Id) /= Root_Type (Id)\n         and then not Is_Generic_Type (Id)\n         and then not Is_Class_Wide_Type (Id)\n       then\n@@ -5701,7 +5855,9 @@ package body Einfo is\n           or else\n         Ekind (Id) = E_Entry\n           or else\n-        Ekind (Id) = E_Entry_Family;\n+        Ekind (Id) = E_Entry_Family\n+          or else\n+        Ekind (Id) = E_Return_Statement;\n    end Is_Dynamic_Scope;\n \n    --------------------\n@@ -5868,13 +6024,11 @@ package body Einfo is\n           and then Is_Protected_Type (Corresponding_Concurrent_Type (Id));\n    end Is_Protected_Record_Type;\n \n-   ---------------------------------\n-   -- Is_Return_By_Reference_Type --\n-   ---------------------------------\n-\n-   --  Note: this predicate has disappeared from Ada 2005: see AI-318-2\n+   --------------------------------\n+   -- Is_Inherently_Limited_Type --\n+   --------------------------------\n \n-   function Is_Return_By_Reference_Type (Id : E) return B is\n+   function Is_Inherently_Limited_Type (Id : E) return B is\n       Btype : constant Entity_Id := Base_Type (Id);\n \n    begin\n@@ -5885,7 +6039,7 @@ package body Einfo is\n             if No (Utyp) then\n                return False;\n             else\n-               return Is_Return_By_Reference_Type (Utyp);\n+               return Is_Inherently_Limited_Type (Utyp);\n             end if;\n          end;\n \n@@ -5900,7 +6054,7 @@ package body Einfo is\n               or else Is_Task_Interface (Btype);\n \n          elsif Is_Class_Wide_Type (Btype) then\n-            return Is_Return_By_Reference_Type (Root_Type (Btype));\n+            return Is_Inherently_Limited_Type (Root_Type (Btype));\n \n          else\n             declare\n@@ -5909,7 +6063,7 @@ package body Einfo is\n             begin\n                C := First_Component (Btype);\n                while Present (C) loop\n-                  if Is_Return_By_Reference_Type (Etype (C)) then\n+                  if Is_Inherently_Limited_Type (Etype (C)) then\n                      return True;\n                   end if;\n \n@@ -5921,12 +6075,12 @@ package body Einfo is\n          end if;\n \n       elsif Is_Array_Type (Btype) then\n-         return Is_Return_By_Reference_Type (Component_Type (Btype));\n+         return Is_Inherently_Limited_Type (Component_Type (Btype));\n \n       else\n          return False;\n       end if;\n-   end Is_Return_By_Reference_Type;\n+   end Is_Inherently_Limited_Type;\n \n    --------------------\n    -- Is_String_Type --\n@@ -6477,11 +6631,12 @@ package body Einfo is\n    ---------------------\n \n    function Type_High_Bound (Id : E) return Node_Id is\n+      Rng : constant Node_Id := Scalar_Range (Id);\n    begin\n-      if Nkind (Scalar_Range (Id)) = N_Subtype_Indication then\n-         return High_Bound (Range_Expression (Constraint (Scalar_Range (Id))));\n+      if Nkind (Rng) = N_Subtype_Indication then\n+         return High_Bound (Range_Expression (Constraint (Rng)));\n       else\n-         return High_Bound (Scalar_Range (Id));\n+         return High_Bound (Rng);\n       end if;\n    end Type_High_Bound;\n \n@@ -6490,11 +6645,12 @@ package body Einfo is\n    --------------------\n \n    function Type_Low_Bound (Id : E) return Node_Id is\n+      Rng : constant Node_Id := Scalar_Range (Id);\n    begin\n-      if Nkind (Scalar_Range (Id)) = N_Subtype_Indication then\n-         return Low_Bound (Range_Expression (Constraint (Scalar_Range (Id))));\n+      if Nkind (Rng) = N_Subtype_Indication then\n+         return Low_Bound (Range_Expression (Constraint (Rng)));\n       else\n-         return Low_Bound (Scalar_Range (Id));\n+         return Low_Bound (Rng);\n       end if;\n    end Type_Low_Bound;\n \n@@ -6621,6 +6777,7 @@ package body Einfo is\n       W (\"Depends_On_Private\",            Flag14  (Id));\n       W (\"Discard_Names\",                 Flag88  (Id));\n       W (\"Elaboration_Entity_Required\",   Flag174 (Id));\n+      W (\"Elaborate_Body_Desirable\",      Flag210 (Id));\n       W (\"Entry_Accepted\",                Flag152 (Id));\n       W (\"Finalize_Storage_Only\",         Flag158 (Id));\n       W (\"From_With_Type\",                Flag159 (Id));\n@@ -6675,6 +6832,7 @@ package body Einfo is\n       W (\"Has_Specified_Stream_Output\",   Flag191 (Id));\n       W (\"Has_Specified_Stream_Read\",     Flag192 (Id));\n       W (\"Has_Specified_Stream_Write\",    Flag193 (Id));\n+      W (\"Has_Static_Discriminants\",      Flag211 (Id));\n       W (\"Has_Storage_Size_Clause\",       Flag23  (Id));\n       W (\"Has_Stream_Size_Clause\",        Flag184 (Id));\n       W (\"Has_Subprogram_Descriptor\",     Flag93  (Id));\n@@ -6690,7 +6848,7 @@ package body Einfo is\n       W (\"Is_Abstract\",                   Flag19  (Id));\n       W (\"Is_Local_Anonymous_Access\",     Flag194 (Id));\n       W (\"Is_Access_Constant\",            Flag69  (Id));\n-      W (\"Is_Ada_2005\",                   Flag185 (Id));\n+      W (\"Is_Ada_2005_Only\",              Flag185 (Id));\n       W (\"Is_Aliased\",                    Flag15  (Id));\n       W (\"Is_Asynchronous\",               Flag81  (Id));\n       W (\"Is_Atomic\",                     Flag85  (Id));\n@@ -6759,6 +6917,7 @@ package body Einfo is\n       W (\"Is_Remote_Call_Interface\",      Flag62  (Id));\n       W (\"Is_Remote_Types\",               Flag61  (Id));\n       W (\"Is_Renaming_Of_Object\",         Flag112 (Id));\n+      W (\"Is_Return_Object\",              Flag209 (Id));\n       W (\"Is_Shared_Passive\",             Flag60  (Id));\n       W (\"Is_Synchronized_Interface\",     Flag199 (Id));\n       W (\"Is_Statically_Allocated\",       Flag28  (Id));\n@@ -6772,14 +6931,18 @@ package body Einfo is\n       W (\"Is_VMS_Exception\",              Flag133 (Id));\n       W (\"Is_Valued_Procedure\",           Flag127 (Id));\n       W (\"Is_Visible_Child_Unit\",         Flag116 (Id));\n+      W (\"Is_Visible_Formal\",             Flag206 (Id));\n       W (\"Is_Volatile\",                   Flag16  (Id));\n       W (\"Itype_Printed\",                 Flag202 (Id));\n       W (\"Kill_Elaboration_Checks\",       Flag32  (Id));\n       W (\"Kill_Range_Checks\",             Flag33  (Id));\n       W (\"Kill_Tag_Checks\",               Flag34  (Id));\n+      W (\"Known_To_Have_Preelab_Init\",    Flag207 (Id));\n+      W (\"Low_Bound_Known\",               Flag205 (Id));\n       W (\"Machine_Radix_10\",              Flag84  (Id));\n       W (\"Materialize_Entity\",            Flag168 (Id));\n       W (\"Must_Be_On_Byte_Boundary\",      Flag183 (Id));\n+      W (\"Must_Have_Preelab_Init\",        Flag208 (Id));\n       W (\"Needs_Debug_Info\",              Flag147 (Id));\n       W (\"Needs_No_Actuals\",              Flag22  (Id));\n       W (\"Never_Set_In_Source\",           Flag115 (Id));\n@@ -6820,6 +6983,10 @@ package body Einfo is\n       procedure Write_Kind (Id : Entity_Id);\n       --  Write Ekind field of entity\n \n+      ---------------------\n+      -- Write_Attribute --\n+      ---------------------\n+\n       procedure Write_Attribute (Which : String; Nam : E) is\n       begin\n          Write_Str (Prefix);\n@@ -6830,6 +6997,10 @@ package body Einfo is\n          Write_Str (\" \");\n       end Write_Attribute;\n \n+      ----------------\n+      -- Write_Kind --\n+      ----------------\n+\n       procedure Write_Kind (Id : Entity_Id) is\n          K : constant String := Entity_Kind'Image (Ekind (Id));\n \n@@ -6934,7 +7105,6 @@ package body Einfo is\n \n    procedure Write_Field6_Name (Id : Entity_Id) is\n       pragma Warnings (Off, Id);\n-\n    begin\n       Write_Str (\"First_Rep_Item\");\n    end Write_Field6_Name;\n@@ -6945,7 +7115,6 @@ package body Einfo is\n \n    procedure Write_Field7_Name (Id : Entity_Id) is\n       pragma Warnings (Off, Id);\n-\n    begin\n       Write_Str (\"Freeze_Node\");\n    end Write_Field7_Name;\n@@ -6972,6 +7141,9 @@ package body Einfo is\n          when E_Package                                  =>\n             Write_Str (\"Dependent_Instances\");\n \n+         when E_Return_Statement                         =>\n+            Write_Str (\"Return_Applies_To\");\n+\n          when E_Variable                                 =>\n             Write_Str (\"Hiding_Loop_Variable\");\n \n@@ -7319,6 +7491,7 @@ package body Einfo is\n               E_Procedure                                |\n               E_Record_Type                              |\n               E_Record_Subtype                           |\n+              E_Return_Statement                         |\n               E_Subprogram_Body                          |\n               E_Subprogram_Type                          =>\n             Write_Str (\"First_Entity\");\n@@ -7339,13 +7512,18 @@ package body Einfo is\n             Write_Str (\"Modulus\");\n \n          when Formal_Kind                                |\n-               E_Constant                                |\n-               E_Generic_In_Out_Parameter                |\n-               E_Variable                                =>\n+              E_Constant                                 |\n+              E_Generic_In_Out_Parameter                 |\n+              E_Variable                                 =>\n             Write_Str (\"Actual_Subtype\");\n \n          when E_Incomplete_Type                          =>\n-            Write_Str (\"Non-limited view\");\n+            Write_Str (\"Non_Limited_View\");\n+\n+         when E_Incomplete_Subtype                       =>\n+            if From_With_Type (Id) then\n+               Write_Str (\"Non_Limited_View\");\n+            end if;\n \n          when others                                     =>\n             Write_Str (\"Field17??\");\n@@ -7490,6 +7668,7 @@ package body Einfo is\n               E_Procedure                                |\n               E_Record_Type                              |\n               E_Record_Subtype                           |\n+              E_Return_Statement                         |\n               E_Subprogram_Body                          |\n               E_Subprogram_Type                          =>\n \n@@ -7501,6 +7680,9 @@ package body Einfo is\n          when E_Exception                                =>\n             Write_Str (\"Register_Exception_Call\");\n \n+         when E_Variable                                 =>\n+            Write_Str (\"Last_Assignment\");\n+\n          when others                                     =>\n             Write_Str (\"Field20??\");\n       end case;\n@@ -7592,6 +7774,7 @@ package body Einfo is\n               E_Generic_Procedure                        |\n               E_Procedure                                |\n               E_Protected_Type                           |\n+              E_Return_Statement                         |\n               E_Subprogram_Body                          |\n               E_Task_Type                                =>\n             Write_Str (\"Scope_Depth_Value\");\n@@ -7679,28 +7862,9 @@ package body Einfo is\n    ------------------------\n \n    procedure Write_Field24_Name (Id : Entity_Id) is\n+      pragma Warnings (Off, Id);\n    begin\n-      case Ekind (Id) is\n-         when E_Record_Type                              |\n-              E_Record_Subtype                           |\n-              E_Record_Type_With_Private                 |\n-              E_Record_Subtype_With_Private              =>\n-            Write_Str (\"Abstract_Interfaces\");\n-\n-         when E_Component                                =>\n-            Write_Str (\"DT_Offset_To_Top_Func\");\n-\n-         when Subprogram_Kind                            |\n-              E_Package                                  |\n-              E_Generic_Package                          =>\n-            Write_Str (\"Obsolescent_Warning\");\n-\n-         when Task_Kind                                  =>\n-            Write_Str (\"Task_Body_Procedure\");\n-\n-         when others                                     =>\n-            Write_Str (\"Field24??\");\n-      end case;\n+      Write_Str (\"Obsolescent_Warning\");\n    end Write_Field24_Name;\n \n    ------------------------\n@@ -7710,13 +7874,25 @@ package body Einfo is\n    procedure Write_Field25_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n+         when E_Component                                =>\n+            Write_Str (\"DT_Offset_To_Top_Func\");\n+\n          when E_Procedure                                |\n               E_Function                                 =>\n             Write_Str (\"Abstract_Interface_Alias\");\n \n          when E_Package                                  =>\n             Write_Str (\"Current_Use_Clause\");\n \n+         when E_Record_Type                              |\n+              E_Record_Subtype                           |\n+              E_Record_Type_With_Private                 |\n+              E_Record_Subtype_With_Private              =>\n+            Write_Str (\"Abstract_Interfaces\");\n+\n+         when Task_Kind                                  =>\n+            Write_Str (\"Task_Body_Procedure\");\n+\n          when others                                     =>\n             Write_Str (\"Field25??\");\n       end case;\n@@ -7757,6 +7933,21 @@ package body Einfo is\n       end case;\n    end Write_Field27_Name;\n \n+   ------------------------\n+   -- Write_Field28_Name --\n+   ------------------------\n+\n+   procedure Write_Field28_Name (Id : Entity_Id) is\n+   begin\n+      case Ekind (Id) is\n+         when E_Procedure | E_Function | E_Entry         =>\n+            Write_Str (\"Extra_Formals\");\n+\n+         when others                                     =>\n+            Write_Str (\"Field28??\");\n+      end case;\n+   end Write_Field28_Name;\n+\n    -------------------------\n    -- Iterator Procedures --\n    -------------------------"}, {"sha": "46f03a92d59fcd7617b180d7e9589812d67c2f5e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 339, "deletions": 145, "changes": 484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e443c90131e82b5140c8e3c565fbf9e1da77110/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e443c90131e82b5140c8e3c565fbf9e1da77110/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=6e443c90131e82b5140c8e3c565fbf9e1da77110", "patch": "@@ -84,8 +84,10 @@ package Einfo is\n --------------------------------\n \n --  XEINFO is a utility program which automatically produces a C header file,\n---  a-xeinfo.h from the spec and body of package Einfo. It reads the input\n---  files einfo.ads and einfo.adb and produces the output file a-xeinfo.h.\n+--  einfo.h from the spec and body of package Einfo. It reads the input\n+--  files einfo.ads and einfo.adb and produces the output file einfo.h.\n+--  XEINFO is run automatically by the build scripts when you do a full\n+--  bootstrap.\n \n --  In order for this utility program to operate correctly, the form of the\n --  einfo.ads and einfo.adb files must meet certain requirements and be laid\n@@ -107,7 +109,7 @@ package Einfo is\n \n --  XEINFO reads and processes the function specs and the pragma Inlines. For\n --  functions that are declared as inlined, XEINFO reads the corresponding body\n---  from xeinfo.adb, and processes it into C code. This results in some strict\n+--  from einfo.adb, and processes it into C code. This results in some strict\n --  restrictions on which functions can be inlined:\n \n --     The function spec must be on a single line\n@@ -286,16 +288,17 @@ package Einfo is\n --  and if assertions are enabled, an attempt to set the attribute on a\n --  subtype will raise an assert error.\n \n---    Abstract_Interfaces (Elist24)\n+--    Abstract_Interfaces (Elist25)\n --       Present in record types and subtypes. List of abstract interfaces\n --       implemented by a tagged type that are not already implemented by the\n --       ancestors (Ada 2005: AI-251).\n \n --    Abstract_Interface_Alias (Node25)\n --       Present in subprograms that cover a primitive operation of an abstract\n---       interface type. Points to its associated interface subprogram. It is\n---       used to register the subprogram in secondary dispatch table of the\n---       interface (Ada 2005: AI-251).\n+--       interface type. Can be set only if the Is_Hidden flag is also set,\n+--       since such entities are always hidden. Points to its associated\n+--       interface subprogram. It is used to register the subprogram in\n+--       secondary dispatch table of the interface (Ada 2005: AI-251).\n \n --    Accept_Address (Elist21)\n --       Present in entries. If an accept has a statement sequence, then an\n@@ -344,10 +347,14 @@ package Einfo is\n --       make sure that the address can be meaningfully taken.\n \n --    Alias (Node18)\n---       Present in overloaded entities (literals, subprograms, entries).\n---       Points to parent subprogram of a derived subprogram. Also used for\n---       a subprogram renaming, where it points to the renamed subprogram.\n---       Always empty for entries.\n+--       Present in overloaded entities (literals, subprograms, entries) and\n+--       subprograms that cover a primitive operation of an abstract interface\n+--       (that is, subprograms with the Abstract_Interface_Alias attribute).\n+--       In case of overloaded entities it points to the parent subprogram of\n+--       a derived subprogram. In case of abstract interface subprograms it\n+--       points to the subprogram that covers the abstract interface primitive.\n+--       Also used for a subprogram renaming, where it points to the renamed\n+--       subprogram. Always empty for entries.\n \n --    Alignment (Uint14)\n --       Present in entities for types and also in constants, variables,\n@@ -591,41 +598,40 @@ package Einfo is\n --       (see Exp_Ch9). This type is used to represent values of the task type.\n \n --    Corresponding_Remote_Type (Node22)\n---      Present in record types that describe the fat pointer structure for\n---      Remote_Access_To_Subrogram types. References the original access type.\n+--       Present in record types that describe the fat pointer structure for\n+--       Remote_Access_To_Subrogram types. References the original access type.\n \n --    CR_Discriminant (Node23)\n---      Present in discriminants of concurrent types. Denotes the homologous\n---      discriminant of the corresponding record type. The CR_Discriminant is\n---      created at the same time as the discriminal, and used to replace\n---      occurrences of the discriminant within the type declaration.\n+--       Present in discriminants of concurrent types. Denotes the homologous\n+--       discriminant of the corresponding record type. The CR_Discriminant is\n+--       created at the same time as the discriminal, and used to replace\n+--       occurrences of the discriminant within the type declaration.\n \n --    Current_Use_Clause (Node25)\n---      Present in packages. Indicates the use clause currently in scope\n---      that makes the package use_visible. Used to detect redundant use\n---      clauses for the same package.\n+--       Present in packages. Indicates the use clause currently in scope\n+--       that makes the package use_visible. Used to detect redundant use\n+--       clauses for the same package.\n \n --    Current_Value (Node9)\n---       Present in E_Variable, E_Out_Parameter and E_In_Out_Parameter\n---       entities. Set non-Empty if the (constant) current value of the\n---       variable is known. This value is valid only for references from\n---       the same sequential scope as the entity. The sequential scope\n---       of an entity includes the immediate scope and any contained\n---       scopes that are package specs, package bodies, or blocks (at\n---       any nesting level). For convenience in coding, this field is\n---       also present in other object entities (E_Loop_Parameter and\n---       E_In_Parameter and E_Constant), but is not used to hold a\n---       constant value, since value tracking is not needed in this case.\n+--       Present in all object entities. Set in E_Variable, E_Constant, formal\n+--       parameters and E_Loop_Parameter entities if we have trackable current\n+--       values. Set non-Empty if the (constant) current value of the variable\n+--       is known, This value is valid only for references from the same\n+--       sequential scope as the entity. The sequential scope of an entity\n+--       includes the immediate scope and any contained scopes that are package\n+--       specs, package bodies, blocks (at any nesting level) or statement\n+--       sequences in IF or loop statements.\n --\n---       Another related use of this field is to record information\n---       about the value obtained from an IF statement condition.\n---       If the IF/ELSIF condition has the form \"[NOT] OBJ RELOP VAL\",\n---       where OBJ is a reference to an entity with a Current_Value field,\n---       RELOP is one of the six relational operators, and VAL is a compile-\n---       time known value, then the Current_Value field if OBJ is set to\n---       point to the N_If_Statement or N_Elsif_Part node of the relevant\n---       construct. For more details on this usage, see the procedure\n---       Exp_Util.Get_Current_Value_Condition.\n+--       Another related use of this field is to record information about the\n+--       value obtained from an IF or WHILE statement condition. If the IF or\n+--       ELSIF or WHILE condition has the form \"NOT {,NOT] OBJ RELOP VAL \",\n+--       or OBJ [AND [THEN]] expr, where OBJ refers to an entity with a\n+--       Current_Value field, RELOP is one of the six relational operators, and\n+--       VAL is a compile-time known value then the Current_Value field of OBJ\n+--       points to the N_If_Statement, N_Elsif_Part, or N_Iteration_Scheme node\n+--       of the relevant construct, and the Condition field of this can be\n+--       consulted to give information about the value of OBJ. For more details\n+--       on this usage, see the procedure Exp_Util.Get_Current_Value_Condition.\n \n --    Debug_Info_Off (Flag166)\n --       Present in all entities. Set if a pragma Suppress_Debug_Info applies\n@@ -802,7 +808,7 @@ package Einfo is\n --       Present in E_Component entities. Only used for component marked\n --       Is_Tag. Store the number of entries in the Vtable (or Dispatch Table)\n \n---    DT_Offset_To_Top_Func (Node24)\n+--    DT_Offset_To_Top_Func (Node25)\n --       Present in E_Component entities. Only used for component marked\n --       Is_Tag. If present it stores the Offset_To_Top function used to\n --       provide this value in tagged types whose ancestor has discriminants.\n@@ -817,6 +823,14 @@ package Einfo is\n --       Present in all entities. Contains a value of the enumeration type\n --       Entity_Kind declared in a subsequent section in this spec.\n \n+--    Elaborate_Body_Desirable (Flag210)\n+--       Present in package entities. Set if the elaboration circuitry detects\n+--       a case where there is a package body that modifies one or more visible\n+--       entities in the package spec and there is no explicit Elaborate_Body\n+--       pragma for the package. This information is passed on to the binder,\n+--       which attempts, but does not promise, to elaborate the body as close\n+--       to the spec as possible.\n+\n --    Elaboration_Entity (Node13)\n --       Present in generic and non-generic package and subprogram\n --       entities. This is a boolean entity associated with the unit that\n@@ -846,8 +860,8 @@ package Einfo is\n --       is no need to set the flag.\n \n --    Enclosing_Dynamic_Scope (synthesized)\n---      Appliesa to all entities. Returns the closest dynamic scope in which\n---      the entity is declared or Standard_Standard for library-level entities\n+--       Applies to all entities. Returns the closest dynamic scope in which\n+--       the entity is declared or Standard_Standard for library-level entities\n \n --    Enclosing_Scope (Node18)\n --       Present in labels. Denotes the innermost enclosing construct that\n@@ -999,6 +1013,11 @@ package Einfo is\n --       one, with Empty indicating the end of the list of extra\n --       formals.\n \n+--    Extra_Formals (Node28)\n+--       Applies to subprograms and subprogram types, and also in entries\n+--       and entry families. Returns first extra formal of the subprogram\n+--       or entry. Returns Empty if there are no extra formals.\n+\n --    Extra_Accessibility (Node13)\n --       Present in formal parameters in the non-generic case if\n --       expansion is active. Normally Empty, but if a parameter is\n@@ -1074,6 +1093,12 @@ package Einfo is\n --       a subprogram type (the designated type of an Access_To_Subprogram\n --       definition) or in an entry.\n \n+--    First_Formal_With_Extras (synthesized)\n+--       Applies to subprograms and subprogram types, and also in entries\n+--       and entry families. Returns first formal of the subprogram or entry.\n+--       Returns Empty if there are no formals. The list returned includes\n+--       all the extra formals (see description of Extra_Formals field).\n+\n --    First_Index (Node17)\n --       Present in array types and subtypes and in string types and subtypes.\n --       By introducing implicit subtypes for the index constraints, we have\n@@ -1287,8 +1312,9 @@ package Einfo is\n --       completion has been encountered and analyzed.\n \n --    Has_Completion_In_Body (Flag71)\n---       Present in  \"Taft amendment types\" that is to say incomplete types\n---       whose full declaration appears in the package body.\n+--       Present in all entities for types and subtypes. Set only in \"Taft\n+--       amendment types\" (incomplete types whose full declaration appears in\n+--       the package body).\n \n --    Has_Complex_Representation (Flag140) [implementation base type only]\n --       Present in all type entities. Set only for a record base type to\n@@ -1500,6 +1526,15 @@ package Einfo is\n --       entity has no references, but a warning should be given if it is\n --       in fact referenced.\n \n+--    Known_To_Have_Preelab_Init (Flag207)\n+--       Present in all type and subtype entities. If set, then the type is\n+--       known to have preelaborable initialization. In the case of a partial\n+--       view of a private type, it is only possible for this tobe set if a\n+--       pragma Preelaborable_Initialization is given for the type. For other\n+--       types, it is never set if the type does not have preelaborable\n+--       initialization, it may or may not be set if the type does have\n+--       preelaborable initialization.\n+\n --    Has_Primitive_Operations (Flag120) [base type only]\n --       Present in all type entities. Set if at least one primitive operation\n --       is defined for the type.\n@@ -1570,7 +1605,13 @@ package Einfo is\n --       attribute definition clause. When such a clause occurs, a TSS is set\n --       on the underlying full view; the flags are used to track visibility of\n --       the attribute definition clause for partial or incomplete views.\n-\n+--\n+--    Has_Static_Discriminants (Flag211)\n+--       Present in record subtypes constrained by discriminant values. Set if\n+--       all the discriminant values have static values, meaning that in the\n+--       case of a variant record, the component list can be trimmed down to\n+--       include only the components corresponding to these discriminants.\n+--\n --    Has_Storage_Size_Clause (Flag23) [implementation base type only]\n --       Present in task types and access types. It is set if a Storage_Size\n --       clause is present for the type. Used to prevent multiple clauses for\n@@ -1655,26 +1696,28 @@ package Einfo is\n \n --    Implementation_Base_Type (synthesized)\n --       Applies to all types. Similar to Base_Type, but never returns a\n---       private type when applied to a non-private type. Instead in this\n---       case, it always returns the Underlying_Type of the base type, so that\n---       we still have a concrete type. Note: it is allowed to apply\n---       Implementation_Base_Type to other than a type, in which case it\n---       simply returns the entity unchanged.\n+--       private type when applied to a non-private type. Instead in this case,\n+--       it always returns the Underlying_Type of the base type, so that we\n+--       still have a concrete type. Note: it is allowed to apply\n+--       Implementation_Base_Type to other than a type, in which case it simply\n+--       returns the entity unchanged.\n \n --    In_Package_Body (Flag48)\n --       Set on the entity that denotes the package (the defining occurrence\n --       of the package declaration) while analyzing and expanding the package\n --       body. Reset on completion of analysis/expansion.\n \n --    In_Private_Part (Flag45)\n---       Present in package entities. Flag is set to indicate that the\n---       private part is being analyzed. The flag is reset at the end of the\n---       package declaration.\n+--       Present in all entities. Can be set only in package entities and\n+--       objects. For package entities, this flag is set to indicate that the\n+--       private part of the package is being analyzed. The flag is reset at\n+--       the end of the package declaration. For objects it indicates that the\n+--       declaration of the object occurs in the private part of a package.\n \n --    Inner_Instances (Elist23)\n---      Present in generic units. Contains element list of units that are\n---      instantiated within the given generic. Used to diagnose circular\n---      instantiations.\n+--       Present in generic units. Contains element list of units that are\n+--       instantiated within the given generic. Used to diagnose circular\n+--       instantiations.\n \n --    Interface_Name (Node21)\n --       Present in exceptions, functions, procedures, variables, constants,\n@@ -1725,9 +1768,11 @@ package Einfo is\n --    Is_Access_Type (synthesized)\n --       Applies to all entities, true for access types and subtypes\n \n---    Is_Ada_2005 (Flag185)\n+--    Is_Ada_2005_Only (Flag185)\n --       Applies to all entities, true if a valid pragma Ada_05 applies to the\n---       entity, indicating that the entity is Ada 2005 only.\n+--       entity which specifically names the entity, indicating that the entity\n+--       is Ada 2005 only. Note that this flag is not set if the entity is part\n+--       of a unit compiled with the normal no-argument form of pragma Ada_05.\n \n --    Is_Aliased (Flag15)\n --       Present in objects whose declarations carry the keyword aliased,\n@@ -1870,8 +1915,8 @@ package Einfo is\n --       types and subtypes.\n \n --    Is_Derived_Type (synthesized)\n---       Applies to all type entities. Determine if given entity is a\n---       derived type\n+--       Applies to all entities. Determine if given entity is a derived type.\n+--       Always false if argument is not a type.\n \n --    Is_Discrete_Type (synthesized)\n --       Applies to all entities, true for all discrete types and subtypes\n@@ -1891,7 +1936,8 @@ package Einfo is\n \n --    Is_Dynamic_Scope (synthesized)\n --       Applies to all Entities. Returns True if the entity is a dynamic\n---       scope (i.e. a block, a subprogram a task_type or an entry).\n+--       scope (i.e. a block, subprogram, task_type, entry\n+--       or extended return statement).\n \n --    Is_Elementary_Type (synthesized)\n --       Applies to all entities, true for all elementary types and\n@@ -1940,6 +1986,9 @@ package Einfo is\n --    Is_Formal (synthesized)\n --       Applies to all entities, true for IN, IN OUT and OUT parameters\n \n+--    Is_Formal_Object (synthesized)\n+--       Applies to all entities, true for generic IN and IN OUT parameters\n+\n --    Is_Formal_Subprogram (Flag111)\n --       Defined on all entities, true for generic formal subprograms.\n \n@@ -1959,7 +2008,8 @@ package Einfo is\n \n --    Is_Generic_Instance (Flag130)\n --       Present in all entities. Set to indicate that the entity is an\n---       instance of a generic unit.\n+--       instance of a generic unit, or a formal package (which is an instance\n+--       of the template).\n \n --    Is_Generic_Subprogram (synthesized)\n --       Applies to all entities. Yields True for a generic subprogram\n@@ -2000,6 +2050,9 @@ package Einfo is\n --    Is_Incomplete_Or_Private_Type (synthesized)\n --       Applies to all entities, true for private and incomplete types\n \n+--    Is_Incomplete_Type (synthesized)\n+--       Applies to all entities, true for incomplete types and subtypes\n+\n --    Is_Indefinite_Subtype (synthesized)\n --       Applies to all entities for types and subtypes. Determines if given\n --       entity is an unconstrained array type or subtype, a discriminated\n@@ -2196,8 +2249,8 @@ package Einfo is\n --       including generic formal parameters.\n \n --    Is_Obsolescent (Flag153)\n---       Present in all entities. Set only for packages and subprograms to\n---       which a valid pragma Obsolescent applies.\n+--       Present in all entities. Set for any entity for which a valid pragma\n+--       Obsolescent applies.\n \n --    Is_Optional_Parameter (Flag134)\n --       Present in parameter entities. Set if the parameter is specified as\n@@ -2361,9 +2414,18 @@ package Einfo is\n --       renaming is handled by the front end, by macro substitution of\n --       a copy of the (evaluated) name tree whereever the variable is used.\n \n---    Is_Return_By_Reference_Type (synthesized)\n---       Applies to all type entities. True if the type is required to\n---       be returned by reference, as defined in 6.5(11-16).\n+--    Is_Inherently_Limited_Type (synthesized)\n+--       Applies to all type entities. True if the type is \"inherently\"\n+--       limited (i.e. cannot become nonlimited). From the Ada 2005\n+--       RM-7.5(8.1/2), \"a type with a part that is of a task, protected, or\n+--       explicitly limited record type\". These are the types that are defined\n+--       as return-by-reference types in Ada 95 (see RM95-6.5(11-16)). In Ada\n+--       2005, these are the types that require build-in-place for function\n+--       calls. Note that build-in-place is allowed for other types, too.\n+\n+--    Is_Return_Object (Flag209)\n+--       Applies to all object entities. True if the object is the return\n+--       object of an extended_return_statement; False otherwise.\n \n --    Is_Scalar_Type (synthesized)\n --       Applies to all entities, true for scalar types and subtypes\n@@ -2475,6 +2537,13 @@ package Einfo is\n --       a separate flag must be used to indicate whether the names are\n --       visible by selected notation, or not.\n \n+--    Is_Visible_Formal (Flag206)\n+--       Present in all entities. Set for instances of the formals of a formal\n+--       package. Indicates that the entity must be made visible in the body\n+--       of the instance, to reproduce the visibility of the generic. This\n+--       simplifies visibility settings in instance bodies.\n+--       ??? confusion in abovecomments between being present and being set\n+\n --    Is_VMS_Exception (Flag133)\n --       Present in all entities. Set only for exception entities where the\n --       exception was specified in an Import_Exception or Export_Exception\n@@ -2511,11 +2580,11 @@ package Einfo is\n --       subsequent pragma Unsuppress.\n \n --    Kill_Range_Checks (Flag33)\n---       Present in all entities. Set by the expander to kill elaboration\n---       checks which are known not to be needed. Equivalent in effect to\n---       the use of pragma Supress (Range_Checks) for that entity except\n---       that the result is permanent and cannot be undone by a subsequent\n---       pragma Unsuppress.\n+--       Present in all entities. Equivalent in effect to the use of pragma\n+--       Supress (Range_Checks) for that entity except that the result is\n+--       permanent and cannot be undone by a subsequent pragma Unsuppress.\n+--       This is currently only used in one odd situation in Sem_Ch3 for\n+--       record types, and it would be good to get rid of it???\n \n --    Kill_Tag_Checks (Flag34)\n --       Present in all entities. Set by the expander to kill elaboration\n@@ -2524,6 +2593,12 @@ package Einfo is\n --       that the result is permanent and cannot be undone by a subsequent\n --       pragma Unsuppress.\n \n+--    Last_Assignment (Node20)\n+--       Present in entities for variables. Set for a local variable to point\n+--       to the left side of an assignment statement assigning a value to the\n+--       variable. Cleared if the value of the variable is referenced. Used to\n+--       warn about dubious assignment statements whose value is not used.\n+\n --    Last_Entity (Node20)\n --       Present in all entities which act as scopes to which a list of\n --       associated entities is attached (blocks, class subtypes and types,\n@@ -2553,6 +2628,16 @@ package Einfo is\n --       the nature and use of this entity for implementing the Image and\n --       Value attributes for the enumeration type in question.\n \n+--    Low_Bound_Known (Flag205)\n+--       Present in all entities. Currently this can only be set True for\n+--       formal parameter entries of a standard unconstrained one-dimensional\n+--       array or string type, where the lower bound of the index type is zero\n+--       or one. Indicates that the low bound is known to be equal to the lower\n+--       bound of the index type (e.g. 1 for String, since the index type is\n+--       Positive). This flag can only be set by a pragma Assert which\n+--       specifies this. If this flag is set, warnings about assuming the index\n+--       low bound to be zero or one are suppressed.\n+\n --    Machine_Radix_10 (Flag84)\n --       Present in decimal types and subtypes, set if the Machine_Radix\n --       is 10, as the result of the specification of a machine radix\n@@ -2593,6 +2678,13 @@ package Einfo is\n --       flag is set only for packed arrays longer than 64 bits where\n --       the component size is not a power of 2.\n \n+--    Must_Have_Preelab_Init (Flag208)\n+--       Present in entities for types and subtypes. Set in the full type of a\n+--       private type or subtype if a pragma Has_Preelaborable_Initialization\n+--       is present for the private type. Used to check that the full type has\n+--       preelaborable initialization at freeze time (this has to be deferred\n+--       to the freeze point because of the rule about overriding Initialize).\n+\n --    Needs_Debug_Info (Flag147)\n --       Present in all entities. Set if the entity requires debugging\n --       information to be generated. This is true of all entities that\n@@ -2789,9 +2881,10 @@ package Einfo is\n --       formals as a value of type Pos.\n \n --    Obsolescent_Warning (Node24)\n---       Present in package and subprogram entities. Set non-empty only if the\n---       pragma Obsolescent had a string argument, in which case it records the\n---       contents of the corresponding string literal node.\n+--       Present in all entities. Set non-empty only if a pragma Obsolescent\n+--       applying to the entity had a string argument, in which case it records\n+--       the contents of the corresponding string literal node. This field is\n+--       only accessed if the flag Is_Obsolescent is set.\n \n --    Original_Access_Type (Node21)\n --       Present in access to subprogram types. Anonymous access to protected\n@@ -3017,6 +3110,13 @@ package Einfo is\n --       entities (for convenience in setting it), but is only tested\n --       for the function case.\n \n+--    Return_Applies_To (Node8)\n+--       Present in E_Return_Statement. Points to the entity representing\n+--       the construct to which the return statement applies, as defined in\n+--       RM-6.5(4/2). Note that a (simple) return statement within an\n+--       extended_return_statement applies to the extended_return_statement,\n+--       even though it causes the whole function to return.\n+\n --    Returns_By_Ref (Flag90)\n --       Present in function entities, to indicate that the function\n --       returns the result by reference, either because its return type is a\n@@ -3193,14 +3293,15 @@ package Einfo is\n --       or a copy of the low bound of the index base type if not.\n \n --    Suppress_Elaboration_Warnings (Flag148)\n---       Present in all entities, relevant only for subprogram entities. If\n---       this flag is set then Sem_Elab will not generate elaboration warnings\n---       for the subprogram. Suppression of such warnings is automatic for\n---       subprograms for which elaboration checks are suppressed (without the\n---       need to set this flag), but the flag is also set for various internal\n---       entities (such as init procs) which are known not to generate any\n---       possible access before elaboration. (we need a clear description of\n---       how this flag differs in effect from Elaboration_Checks_Suppressed???)\n+--       Present in all entities, relevant only for subprogram entities and\n+--       for variables. If this flag is set then Sem_Elab will not generate\n+--       elaboration warnings for the subprogram or variable. Suppression of\n+--       such warnings is automatic for subprograms for which elaboration\n+--       checks are suppressed (without the need to set this flag), but the\n+--       flag is also set for various internal entities (such as init procs)\n+--       which are known not to generate any possible access before\n+--       elaboration, and it is set on variables when a warning is given to\n+--       avoid multiple elaboration warnings for the same variable.\n \n --    Suppress_Init_Proc (Flag105) [base type only]\n --       Present in all type entities. Set to suppress the generation of\n@@ -3211,11 +3312,13 @@ package Einfo is\n --       Present in all entities. Suppresses any style checks specifically\n --       associated with the given entity if set.\n \n---    Task_Body_Procedure (Node24)\n+--    Task_Body_Procedure (Node25)\n --       Present in task types and subtypes. Points to the entity for\n --       the task body procedure (as further described in Exp_Ch9, task\n --       bodies are expanded into procedures). A convenient function to\n --       retrieve this field is Sem_Util.Get_Task_Body_Procedure.\n+--       The last sentence is odd ??? Why not have Task_Body_Procedure\n+--       go to the Underlying_Type of the Root_Type???\n \n --    Treat_As_Volatile (Flag41)\n --       Present in all type entities, and also in constants, components and\n@@ -3231,51 +3334,50 @@ package Einfo is\n --       end should test Treat_As_Volatile rather than Is_Volatile.\n \n --    Type_High_Bound (synthesized)\n---       Applies to scalar types. Returns the tree node (Node_Id) that\n---       contains the high bound of a scalar type. The returned value is a\n---       literal for a base type, but may be an expression in the case of a\n---       scalar type with dynamic bounds. Note that in the case of a fixed\n---       point type, the high bound is in units of small, and is an integer.\n+--       Applies to scalar types. Returns the tree node (Node_Id) that contains\n+--       the high bound of a scalar type. The returned value is literal for a\n+--       base type, but may be an expression in the case of scalar type with\n+--       dynamic bounds. Note that in the case of a fixed point type, the high\n+--       bound is in units of small, and is an integer.\n \n --    Type_Low_Bound (synthesized)\n---       Applies to scalar types. Returns the tree node (Node_Id) that\n---       contains the low bound of a scalar type. The returned value is a\n---       literal for a base type, but may be an expression in the case of a\n---       scalar type with dynamic bounds. Note that in the case of a fixed\n---       point type, the low bound is in units of small, and is an integer.\n+--       Applies to scalar types. Returns the tree node (Node_Id) that contains\n+--       the low bound of a scalar type. The returned value is literal for a\n+--       base type, but may be an expression in the case of scalar type with\n+--       dynamic bounds. Note that in the case of a fixed point type, the low\n+--       bound is in units of small, and is an integer.\n \n --    Underlying_Full_View (Node19)\n --       Present in private subtypes that are the completion of other private\n---       types, or in private types that are derived from private subtypes.\n---       If the full view of a private type T is derived from another\n---       private type with discriminants Td, the full view of T is also\n---       private, and there is no way to attach to it a further full view that\n---       would convey the structure of T to the back end. The Underlying_Full_\n---       View is an attribute of the full view that is a subtype of Td with\n---       the same constraint as the declaration for T. The declaration for this\n---       subtype is built at the point of the declaration of T, either as a\n---       completion, or as a subtype declaration where the base type is private\n---       and has a private completion. If Td is already constrained, then its\n---       full view can serve directly as the full view of T.\n+--       types, or in private types that are derived from private subtypes. If\n+--       the full view of a private type T is derived from another private type\n+--       with discriminants Td, the full view of T is also private, and there\n+--       is no way to attach to it a further full view that would convey the\n+--       structure of T to the back end. The Underlying_Full_ View is an\n+--       attribute of the full view that is a subtype of Td with the same\n+--       constraint as the declaration for T. The declaration for this subtype\n+--       is built at the point of the declaration of T, either as completion,\n+--       or as a subtype declaration where the base type is private and has a\n+--       private completion. If Td is already constrained, then its full view\n+--       can serve directly as the full view of T.\n \n --    Underlying_Type (synthesized)\n---       Applies to all entities. This is the identity function except in\n---       the case where it is applied to an incomplete or private type,\n---       in which case it is the underlying type of the type declared by\n---       the completion, or Empty if the completion has not yet been\n---       encountered and analyzed.\n+--       Applies to all entities. This is the identity function except in the\n+--       case where it is applied to an incomplete or private type, in which\n+--       case it is the underlying type of the type declared by the completion,\n+--       or Empty if the completion has not yet been encountered and analyzed.\n --\n---       Note: the reason this attribute applies to all entities, and not\n---       just types, is to legitimize code where Underlying_Type is applied\n---       to an entity which may or may not be a type, with the intent that\n---       if it is a type, its underlying type is taken.\n+--       Note: the reason this attribute applies to all entities, and not just\n+--       types, is to legitimize code where Underlying_Type is applied to an\n+--       entity which may or may not be a type, with the intent that if it is a\n+--       type, its underlying type is taken.\n \n --    Unset_Reference (Node16)\n---       Present in variables and out parameters. This is normally Empty.\n---       It is set to point to an identifier that represents a reference\n---       to the entity before any value has been set. Only the first such\n---       reference is identified. This field is used to generate a warning\n---       message if necessary (see Sem_Warn.Check_Unset_Reference).\n+--       Present in variables and out parameters. This is normally Empty. It\n+--       is set to point to an identifier that represents a reference to the\n+--       entity before any value has been set. Only the first such reference\n+--       is identified. This field is used to generate a warning message if\n+--       necessary (see Sem_Warn.Check_Unset_Reference).\n \n --    Uses_Sec_Stack (Flag95)\n --       Present in scope entities (blocks,functions, procedures, tasks,\n@@ -3297,7 +3399,7 @@ package Einfo is\n --       attribute when the limited-view is installed (Ada 2005: AI-217).\n \n --    Wrapped_Entity (Node27)\n---       Present in an E_Procedure classified as a Is_Primitive_Wrapper. Set\n+--       Present in an E_Procedure classified as an Is_Primitive_Wrapper. Set\n --       to the entity that is being wrapped.\n \n    ------------------\n@@ -3600,6 +3702,10 @@ package Einfo is\n       E_Incomplete_Type,\n       --  An incomplete type, created by an incomplete type declaration\n \n+      E_Incomplete_Subtype,\n+      --  An incomplete subtype, created by a subtype declaration where the\n+      --  subtype mark denotes an incomplete type.\n+\n       E_Task_Type,\n       --  A task type, created by a task type declaration. An entity with this\n       --  Ekind is also created to describe the anonymous type of a task that\n@@ -3699,6 +3805,14 @@ package Einfo is\n       --  A loop identifier, created by an explicit or implicit label on a\n       --  loop statement.\n \n+      E_Return_Statement,\n+      --  A dummy entity created for each return statement. Used to hold\n+      --  information about the return statement (what it applies to) and in\n+      --  rules checking. For example, a simple_return_statement that applies\n+      --  to an extended_return_statement cannot have an expression; this\n+      --  requires putting the E_Return_Statement entity for the\n+      --  extended_return_statement on the scope stack.\n+\n       E_Package,\n       --  A package, created by a package declaration\n \n@@ -3734,11 +3848,11 @@ package Einfo is\n    -- Subtype Declarations --\n    --------------------------\n \n-   --  The above entities are arranged so that they can be conveniently\n-   --  grouped into subtype ranges. Note that for each of the xxx_Kind\n-   --  ranges defined below, there is a corresponding Is_xxx.. predicate\n-   --  which is to be used in preference to direct range tests using the\n-   --  subtype name. However, the subtype names are available for direct\n+   --  The above entities are arranged so that they can be conveniently grouped\n+   --  into subtype ranges. Note that for each of the xxx_Kind ranges defined\n+   --  below, there is a corresponding Is_xxx (or for types, Is_xxx_Type)\n+   --  predicate which is to be used in preference to direct range tests using\n+   --  the subtype name. However, the subtype names are available for direct\n    --  use, e.g. as choices in case statements.\n \n    subtype Access_Kind                 is Entity_Kind range\n@@ -3781,6 +3895,7 @@ package Einfo is\n    --  E_Limited_Private_Type\n    --  E_Limited_Private_Subtype\n    --  E_Incomplete_Type\n+   --  E_Incomplete_Subtype\n    --  E_Task_Type\n    --  E_Task_Subtype,\n    --  E_Protected_Type,\n@@ -3871,7 +3986,11 @@ package Einfo is\n    subtype Formal_Kind                 is Entity_Kind range\n        E_In_Parameter ..\n    --  E_Out_Parameter\n-       E_In_Out_Parameter;\n+     E_In_Out_Parameter;\n+\n+   subtype Formal_Object_Kind          is Entity_Kind range\n+       E_Generic_In_Out_Parameter ..\n+       E_Generic_In_Parameter;\n \n    subtype Generic_Subprogram_Kind     is Entity_Kind range\n        E_Generic_Function ..\n@@ -3882,14 +4001,19 @@ package Einfo is\n    --  E_Generic_Procedure\n        E_Generic_Package;\n \n+   subtype Incomplete_Kind             is Entity_Kind range\n+       E_Incomplete_Type ..\n+       E_Incomplete_Subtype;\n+\n    subtype Incomplete_Or_Private_Kind  is Entity_Kind range\n        E_Record_Type_With_Private ..\n    --  E_Record_Subtype_With_Private\n    --  E_Private_Type\n    --  E_Private_Subtype\n    --  E_Limited_Private_Type\n    --  E_Limited_Private_Subtype\n-       E_Incomplete_Type;\n+   --  E_Incomplete_Type\n+       E_Incomplete_Subtype;\n \n    subtype Integer_Kind                is Entity_Kind range\n        E_Signed_Integer_Type ..\n@@ -4039,6 +4163,7 @@ package Einfo is\n    --  E_Limited_Private_Type\n    --  E_Limited_Private_Subtype\n    --  E_Incomplete_Type\n+   --  E_Incomplete_Subtype\n    --  E_Task_Type\n    --  E_Task_Subtype\n    --  E_Protected_Type\n@@ -4067,6 +4192,7 @@ package Einfo is\n    --    Etype                         (Node5)\n    --    First_Rep_Item                (Node6)\n    --    Freeze_Node                   (Node7)\n+   --    Obsolescent_Warning           (Node24)\n \n    --    Address_Taken                 (Flag104)\n    --    Can_Never_Be_Null             (Flag38)\n@@ -4089,7 +4215,7 @@ package Einfo is\n    --    Has_Qualified_Name            (Flag161)\n    --    Has_Unknown_Discriminants     (Flag72)\n    --    Has_Xref_Entry                (Flag182)\n-   --    Is_Ada_2005                   (Flag185)\n+   --    Is_Ada_2005_Only              (Flag185)\n    --    Is_Bit_Packed_Array           (Flag122)  (base type only)\n    --    Is_Child_Unit                 (Flag73)\n    --    Is_Compilation_Unit           (Flag149)\n@@ -4125,10 +4251,12 @@ package Einfo is\n    --    Is_Shared_Passive             (Flag60)\n    --    Is_Statically_Allocated       (Flag28)\n    --    Is_Unchecked_Union            (Flag117)\n+   --    Is_Visible_Formal             (Flag206)\n    --    Is_VMS_Exception              (Flag133)\n    --    Kill_Elaboration_Checks       (Flag32)\n    --    Kill_Range_Checks             (Flag33)\n    --    Kill_Tag_Checks               (Flag34)\n+   --    Low_Bound_Known               (Flag205)\n    --    Materialize_Entity            (Flag168)\n    --    Needs_Debug_Info              (Flag147)\n    --    No_Return                     (Flag113)\n@@ -4141,6 +4269,7 @@ package Einfo is\n    --    Declaration_Node              (synth)\n    --    Enclosing_Dynamic_Scope       (synth)\n    --    Has_Foreign_Convention        (synth)\n+   --    Is_Derived_Type               (synth)\n    --    Is_Dynamic_Scope              (synth)\n    --    Is_Limited_Type               (synth)\n    --    Underlying_Type               (synth)\n@@ -4165,6 +4294,7 @@ package Einfo is\n    --    Has_Aliased_Components        (Flag135)  (base type only)\n    --    Has_Alignment_Clause          (Flag46)\n    --    Has_Atomic_Components         (Flag86)   (base type only)\n+   --    Has_Completion_In_Body        (Flag71)\n    --    Has_Complex_Representation    (Flag140)  (base type only)\n    --    Has_Constrained_Partial_View  (Flag187)\n    --    Has_Discriminants             (Flag5)\n@@ -4203,7 +4333,9 @@ package Einfo is\n    --    Is_Unsigned_Type              (Flag144)\n    --    Is_Volatile                   (Flag16)\n    --    Itype_Printed                 (Flag202)  (itypes only)\n+   --    Known_To_Have_Preelab_Init    (Flag207)\n    --    Must_Be_On_Byte_Boundary      (Flag183)\n+   --    Must_Have_Preelab_Init        (Flag208)\n    --    Size_Depends_On_Discriminant  (Flag177)\n    --    Size_Known_At_Compile_Time    (Flag92)\n    --    Strict_Alignment              (Flag145)  (base type only)\n@@ -4218,7 +4350,7 @@ package Einfo is\n    --    Implementation_Base_Type      (synth)\n    --    Is_By_Copy_Type               (synth)\n    --    Is_By_Reference_Type          (synth)\n-   --    Is_Return_By_Reference_Type   (synth)\n+   --    Is_Inherently_Limited_Type    (synth)\n    --    Root_Type                     (synth)\n    --    Size_Clause                   (synth)\n \n@@ -4328,13 +4460,14 @@ package Einfo is\n    --    Interface_Name                (Node21)   (JGNAT usage only)\n    --    Original_Record_Component     (Node22)\n    --    Protected_Operation           (Node23)\n-   --    DT_Offset_To_Top_Func         (Node24)\n+   --    DT_Offset_To_Top_Func         (Node25)\n    --    Has_Biased_Representation     (Flag139)\n    --    Has_Per_Object_Constraint     (Flag154)\n    --    Is_Atomic                     (Flag85)\n    --    Is_Tag                        (Flag78)\n    --    Is_Volatile                   (Flag16)\n    --    Treat_As_Volatile             (Flag41)\n+   --    Is_Return_Object              (Flag209)\n    --    Is_Protected_Private          (synth)\n    --    Next_Component                (synth)\n    --    Next_Tag_Component            (synth)\n@@ -4349,6 +4482,7 @@ package Einfo is\n    --    Actual_Subtype                (Node17)\n    --    Renamed_Object                (Node18)\n    --    Size_Check_Code               (Node19)   (constants only)\n+   --    In_Private_Part               (Flag45)\n    --    Interface_Name                (Node21)\n    --    Has_Alignment_Clause          (Flag46)\n    --    Has_Atomic_Components         (Flag86)\n@@ -4362,6 +4496,7 @@ package Einfo is\n    --    Is_Volatile                   (Flag16)\n    --    Never_Set_In_Source           (Flag115)\n    --    Treat_As_Volatile             (Flag41)\n+   --    Is_Return_Object              (Flag209)\n    --    Address_Clause                (synth)\n    --    Alignment_Clause              (synth)\n    --    Constant_Value                (synth)\n@@ -4396,6 +4531,7 @@ package Einfo is\n    --    Interface_Name                (Node21)   (JGNAT usage only)\n    --    Original_Record_Component     (Node22)\n    --    CR_Discriminant               (Node23)\n+   --    Is_Return_Object              (Flag209)\n    --    Next_Discriminant             (synth)\n    --    Next_Stored_Discriminant      (synth)\n \n@@ -4419,6 +4555,7 @@ package Einfo is\n    --    Uses_Sec_Stack                (Flag95)\n    --    Address_Clause                (synth)\n    --    First_Formal                  (synth)\n+   --    First_Formal_With_Extras      (synth)\n    --    Entry_Index_Type              (synth)\n    --    Number_Formals                (synth)\n    --    Scope_Depth                   (synth)\n@@ -4492,9 +4629,9 @@ package Einfo is\n    --    Generic_Renamings             (Elist23)  (for an instance)\n    --    Inner_Instances               (Elist23)  (for a generic function)\n    --    Privals_Chain                 (Elist23)  (for a protected function)\n-   --    Obsolescent_Warning           (Node24)\n    --    Abstract_Interface_Alias      (Node25)\n    --    Overridden_Operation          (Node26)\n+   --    Extra_Formals                 (Node28)\n    --    Body_Needed_For_SAL           (Flag40)\n    --    Elaboration_Entity_Required   (Flag174)\n    --    Function_Returns_With_DSP     (Flag169)\n@@ -4529,6 +4666,7 @@ package Einfo is\n    --    Uses_Sec_Stack                (Flag95)\n    --    Address_Clause                (synth)\n    --    First_Formal                  (synth)\n+   --    First_Formal_With_Extras      (synth)\n    --    Number_Formals                (synth)\n    --    Scope_Depth                   (synth)\n \n@@ -4550,9 +4688,11 @@ package Einfo is\n    --    Protected_Formal              (Node22)\n    --    Is_Controlling_Formal         (Flag97)\n    --    Is_Entry_Formal               (Flag52)\n+   --    Is_Return_Object              (Flag209)\n    --    Parameter_Mode                (synth)\n \n    --  E_Incomplete_Type\n+   --  E_Incomplete_Subtype\n    --    Non_Limited_View              (Node17)\n    --    Private_Dependents            (Elist18)\n    --    Discriminant_Constraint       (Elist21)\n@@ -4565,7 +4705,7 @@ package Einfo is\n    --  E_In_Out_Parameter\n    --  E_Out_Parameter\n    --    Mechanism                     (Uint8)    (returns Mechanism_Type)\n-   --    Current_Value                 (Node9)    (always Empty for IN case)\n+   --    Current_Value                 (Node9)\n    --    Discriminal_Link              (Node10)   (discriminals only)\n    --    Entry_Component               (Node11)\n    --    Esize                         (Uint12)\n@@ -4583,7 +4723,9 @@ package Einfo is\n    --    Is_Controlling_Formal         (Flag97)\n    --    Is_Entry_Formal               (Flag52)\n    --    Is_Optional_Parameter         (Flag134)\n+   --    Low_Bound_Known               (Flag205)\n    --    Never_Set_In_Source           (Flag115)\n+   --    Is_Return_Object              (Flag209)\n    --    Parameter_Mode                (synth)\n \n    --  E_Label\n@@ -4600,7 +4742,6 @@ package Einfo is\n    --    Private_View                  (Node22)\n    --    Stored_Constraint             (Elist23)\n    --    Has_Completion                (Flag26)\n-   --    Has_Completion_In_Body        (Flag71)\n    --    First_Discriminant            (synth)\n    --    First_Stored_Discriminant     (synth)\n    --    (plus type attributes)\n@@ -4667,13 +4808,13 @@ package Einfo is\n    --    Generic_Renamings             (Elist23)  (for an instance)\n    --    Inner_Instances               (Elist23)  (generic case only)\n    --    Limited_View                  (Node23)   (non-generic, not instance)\n-   --    Obsolescent_Warning           (Node24)\n    --    Current_Use_Clause            (Node25)\n    --    Package_Instantiation         (Node26)\n    --    Delay_Subprogram_Descriptors  (Flag50)\n    --    Body_Needed_For_SAL           (Flag40)\n    --    Discard_Names                 (Flag88)\n    --    Elaboration_Entity_Required   (Flag174)\n+   --    Elaborate_Body_Desirable      (Flag210)  (non-generic case only)\n    --    From_With_Type                (Flag159)\n    --    Has_All_Calls_Remote          (Flag79)\n    --    Has_Completion                (Flag26)\n@@ -4711,7 +4852,6 @@ package Einfo is\n    --    Private_View                  (Node22)\n    --    Stored_Constraint             (Elist23)\n    --    Has_Completion                (Flag26)\n-   --    Has_Completion_In_Body        (Flag71)\n    --    Is_Controlled                 (Flag42)   (base type only)\n    --    Is_For_Access_Subtype         (Flag118)  (subtype only)\n    --    First_Discriminant            (synth)\n@@ -4739,10 +4879,10 @@ package Einfo is\n    --    Generic_Renamings             (Elist23)  (for an instance)\n    --    Inner_Instances               (Elist23)  (for a generic procedure)\n    --    Privals_Chain                 (Elist23)  (for a protected procedure)\n-   --    Obsolescent_Warning           (Node24)\n    --    Abstract_Interface_Alias      (Node25)\n    --    Overridden_Operation          (Node26)\n    --    Wrapped_Entity                (Node27)   (non-generic case only)\n+   --    Extra_Formals                 (Node28)\n    --    Body_Needed_For_SAL           (Flag40)\n    --    Elaboration_Entity_Required   (Flag174)\n    --    Function_Returns_With_DSP     (Flag169)  (always False for procedure)\n@@ -4777,6 +4917,7 @@ package Einfo is\n    --    Sec_Stack_Needed_For_Return   (Flag167)\n    --    Address_Clause                (synth)\n    --    First_Formal                  (synth)\n+   --    First_Formal_With_Extras      (synth)\n    --    Number_Formals                (synth)\n \n    --  E_Protected_Body\n@@ -4815,11 +4956,12 @@ package Einfo is\n    --    Discriminant_Constraint       (Elist21)\n    --    Corresponding_Remote_Type     (Node22)\n    --    Stored_Constraint             (Elist23)\n-   --    Abstract_Interfaces           (Elist24)\n+   --    Abstract_Interfaces           (Elist25)\n    --    Component_Alignment           (special)  (base type only)\n    --    C_Pass_By_Copy                (Flag125)  (base type only)\n    --    Has_External_Tag_Rep_Clause   (Flag110)\n    --    Has_Record_Rep_Clause         (Flag65)   (base type only)\n+   --    Has_Static_Discriminants      (Flag211)  (subtype only)\n    --    Is_Class_Wide_Equivalent_Type (Flag35)\n    --    Is_Concurrent_Record_Type     (Flag20)\n    --    Is_Constrained                (Flag12)\n@@ -4843,9 +4985,8 @@ package Einfo is\n    --    Discriminant_Constraint       (Elist21)\n    --    Private_View                  (Node22)\n    --    Stored_Constraint             (Elist23)\n-   --    Abstract_Interfaces           (Elist24)\n+   --    Abstract_Interfaces           (Elist25)\n    --    Has_Completion                (Flag26)\n-   --    Has_Completion_In_Body        (Flag71)\n    --    Has_Record_Rep_Clause         (Flag65)   (base type only)\n    --    Has_External_Tag_Rep_Clause   (Flag110)\n    --    Is_Concurrent_Record_Type     (Flag20)\n@@ -4859,6 +5000,9 @@ package Einfo is\n    --    First_Tag_Component           (synth)\n    --    (plus type attributes)\n \n+   --  E_Return_Statement\n+   --    Return_Applies_To             (Node8)\n+\n    --  E_Signed_Integer_Type\n    --  E_Signed_Integer_Subtype\n    --    Scalar_Range                  (Node20)\n@@ -4893,6 +5037,7 @@ package Einfo is\n    --  E_Subprogram_Type\n    --    Directly_Designated_Type      (Node20)\n    --    First_Formal                  (synth)\n+   --    First_Formal_With_Extras      (synth)\n    --    Number_Formals                (synth)\n    --    Function_Returns_With_DSP     (Flag169)\n    --    (plus type attributes)\n@@ -4912,7 +5057,7 @@ package Einfo is\n    --    Scope_Depth_Value             (Uint22)\n    --    Scope_Depth                   (synth)\n    --    Stored_Constraint             (Elist23)\n-   --    Task_Body_Procedure           (Node24)\n+   --    Task_Body_Procedure           (Node25)\n    --    Delay_Cleanups                (Flag114)\n    --    Has_Master_Entity             (Flag21)\n    --    Has_Storage_Size_Clause       (Flag23)   (base type only)\n@@ -4933,6 +5078,7 @@ package Einfo is\n    --    Actual_Subtype                (Node17)\n    --    Renamed_Object                (Node18)\n    --    Size_Check_Code               (Node19)\n+   --    Last_Assignment               (Node20)\n    --    Interface_Name                (Node21)\n    --    Shared_Var_Assign_Proc        (Node22)\n    --    Extra_Constrained             (Node23)\n@@ -4941,13 +5087,15 @@ package Einfo is\n    --    Has_Biased_Representation     (Flag139)\n    --    Has_Size_Clause               (Flag29)\n    --    Has_Volatile_Components       (Flag87)\n+   --    In_Private_Part               (Flag45)\n    --    Is_Atomic                     (Flag85)\n    --    Is_Eliminated                 (Flag124)\n    --    Is_Shared_Passive             (Flag60)\n    --    Is_True_Constant              (Flag163)\n    --    Is_Volatile                   (Flag16)\n    --    Never_Set_In_Source           (Flag115)\n    --    Treat_As_Volatile             (Flag41)\n+   --    Is_Return_Object              (Flag209)\n    --    Address_Clause                (synth)\n    --    Alignment_Clause              (synth)\n    --    Constant_Value                (synth)\n@@ -5239,6 +5387,7 @@ package Einfo is\n    function Discriminant_Constraint            (Id : E) return L;\n    function Discriminant_Default_Value         (Id : E) return N;\n    function Discriminant_Number                (Id : E) return U;\n+   function Elaborate_Body_Desirable           (Id : E) return B;\n    function Elaboration_Entity                 (Id : E) return E;\n    function Elaboration_Entity_Required        (Id : E) return B;\n    function Enclosing_Scope                    (Id : E) return E;\n@@ -5260,6 +5409,7 @@ package Einfo is\n    function Extra_Accessibility                (Id : E) return E;\n    function Extra_Constrained                  (Id : E) return E;\n    function Extra_Formal                       (Id : E) return E;\n+   function Extra_Formals                      (Id : E) return E;\n    function Finalization_Chain_Entity          (Id : E) return E;\n    function Finalize_Storage_Only              (Id : E) return B;\n    function First_Entity                       (Id : E) return E;\n@@ -5326,6 +5476,7 @@ package Einfo is\n    function Has_Specified_Stream_Output        (Id : E) return B;\n    function Has_Specified_Stream_Read          (Id : E) return B;\n    function Has_Specified_Stream_Write         (Id : E) return B;\n+   function Has_Static_Discriminants           (Id : E) return B;\n    function Has_Storage_Size_Clause            (Id : E) return B;\n    function Has_Stream_Size_Clause             (Id : E) return B;\n    function Has_Subprogram_Descriptor          (Id : E) return B;\n@@ -5345,7 +5496,7 @@ package Einfo is\n    function Is_Abstract                        (Id : E) return B;\n    function Is_Local_Anonymous_Access          (Id : E) return B;\n    function Is_Access_Constant                 (Id : E) return B;\n-   function Is_Ada_2005                        (Id : E) return B;\n+   function Is_Ada_2005_Only                   (Id : E) return B;\n    function Is_Aliased                         (Id : E) return B;\n    function Is_Asynchronous                    (Id : E) return B;\n    function Is_Atomic                          (Id : E) return B;\n@@ -5408,6 +5559,7 @@ package Einfo is\n    function Is_Remote_Call_Interface           (Id : E) return B;\n    function Is_Remote_Types                    (Id : E) return B;\n    function Is_Renaming_Of_Object              (Id : E) return B;\n+   function Is_Return_Object                   (Id : E) return B;\n    function Is_Shared_Passive                  (Id : E) return B;\n    function Is_Statically_Allocated            (Id : E) return B;\n    function Is_Synchronized_Interface          (Id : E) return B;\n@@ -5421,21 +5573,26 @@ package Einfo is\n    function Is_VMS_Exception                   (Id : E) return B;\n    function Is_Valued_Procedure                (Id : E) return B;\n    function Is_Visible_Child_Unit              (Id : E) return B;\n+   function Is_Visible_Formal                  (Id : E) return B;\n    function Is_Volatile                        (Id : E) return B;\n    function Itype_Printed                      (Id : E) return B;\n    function Kill_Elaboration_Checks            (Id : E) return B;\n    function Kill_Range_Checks                  (Id : E) return B;\n    function Kill_Tag_Checks                    (Id : E) return B;\n+   function Known_To_Have_Preelab_Init         (Id : E) return B;\n+   function Last_Assignment                    (Id : E) return N;\n    function Last_Entity                        (Id : E) return E;\n    function Limited_View                       (Id : E) return E;\n    function Lit_Indexes                        (Id : E) return E;\n    function Lit_Strings                        (Id : E) return E;\n+   function Low_Bound_Known                    (Id : E) return B;\n    function Machine_Radix_10                   (Id : E) return B;\n    function Master_Id                          (Id : E) return E;\n    function Materialize_Entity                 (Id : E) return B;\n    function Mechanism                          (Id : E) return M;\n    function Modulus                            (Id : E) return U;\n    function Must_Be_On_Byte_Boundary           (Id : E) return B;\n+   function Must_Have_Preelab_Init             (Id : E) return B;\n    function Needs_Debug_Info                   (Id : E) return B;\n    function Needs_No_Actuals                   (Id : E) return B;\n    function Never_Set_In_Source                (Id : E) return B;\n@@ -5478,6 +5635,7 @@ package Einfo is\n    function Renamed_Object                     (Id : E) return N;\n    function Renaming_Map                       (Id : E) return U;\n    function Return_Present                     (Id : E) return B;\n+   function Return_Applies_To                  (Id : E) return N;\n    function Returns_By_Ref                     (Id : E) return B;\n    function Reverse_Bit_Order                  (Id : E) return B;\n    function Scalar_Range                       (Id : E) return N;\n@@ -5537,12 +5695,14 @@ package Einfo is\n    function Is_Fixed_Point_Type                (Id : E) return B;\n    function Is_Floating_Point_Type             (Id : E) return B;\n    function Is_Formal                          (Id : E) return B;\n+   function Is_Formal_Object                   (Id : E) return B;\n    function Is_Formal_Subprogram               (Id : E) return B;\n    function Is_Generic_Actual_Type             (Id : E) return B;\n    function Is_Generic_Unit                    (Id : E) return B;\n    function Is_Generic_Type                    (Id : E) return B;\n    function Is_Generic_Subprogram              (Id : E) return B;\n    function Is_Incomplete_Or_Private_Type      (Id : E) return B;\n+   function Is_Incomplete_Type                 (Id : E) return B;\n    function Is_Integer_Type                    (Id : E) return B;\n    function Is_Limited_Record                  (Id : E) return B;\n    function Is_Modular_Integer_Type            (Id : E) return B;\n@@ -5580,6 +5740,7 @@ package Einfo is\n    function First_Component                    (Id : E) return E;\n    function First_Discriminant                 (Id : E) return E;\n    function First_Formal                       (Id : E) return E;\n+   function First_Formal_With_Extras           (Id : E) return E;\n    function First_Stored_Discriminant          (Id : E) return E;\n    function First_Subtype                      (Id : E) return E;\n    function Has_Attach_Handler                 (Id : E) return B;\n@@ -5599,7 +5760,7 @@ package Einfo is\n    function Is_Package_Or_Generic_Package      (Id : E) return B;\n    function Is_Protected_Private               (Id : E) return B;\n    function Is_Protected_Record_Type           (Id : E) return B;\n-   function Is_Return_By_Reference_Type        (Id : E) return B;\n+   function Is_Inherently_Limited_Type         (Id : E) return B;\n    function Is_String_Type                     (Id : E) return B;\n    function Is_Task_Record_Type                (Id : E) return B;\n    function Is_Wrapper_Package                 (Id : E) return B;\n@@ -5741,6 +5902,7 @@ package Einfo is\n    procedure Set_Discriminant_Constraint       (Id : E; V : L);\n    procedure Set_Discriminant_Default_Value    (Id : E; V : N);\n    procedure Set_Discriminant_Number           (Id : E; V : U);\n+   procedure Set_Elaborate_Body_Desirable      (Id : E; V : B := True);\n    procedure Set_Elaboration_Entity            (Id : E; V : E);\n    procedure Set_Elaboration_Entity_Required   (Id : E; V : B := True);\n    procedure Set_Enclosing_Scope               (Id : E; V : E);\n@@ -5761,6 +5923,7 @@ package Einfo is\n    procedure Set_Extra_Accessibility           (Id : E; V : E);\n    procedure Set_Extra_Constrained             (Id : E; V : E);\n    procedure Set_Extra_Formal                  (Id : E; V : E);\n+   procedure Set_Extra_Formals                 (Id : E; V : E);\n    procedure Set_Finalization_Chain_Entity     (Id : E; V : E);\n    procedure Set_Finalize_Storage_Only         (Id : E; V : B := True);\n    procedure Set_First_Entity                  (Id : E; V : E);\n@@ -5827,6 +5990,7 @@ package Einfo is\n    procedure Set_Has_Specified_Stream_Output   (Id : E; V : B := True);\n    procedure Set_Has_Specified_Stream_Read     (Id : E; V : B := True);\n    procedure Set_Has_Specified_Stream_Write    (Id : E; V : B := True);\n+   procedure Set_Has_Static_Discriminants      (Id : E; V : B := True);\n    procedure Set_Has_Storage_Size_Clause       (Id : E; V : B := True);\n    procedure Set_Has_Stream_Size_Clause        (Id : E; V : B := True);\n    procedure Set_Has_Subprogram_Descriptor     (Id : E; V : B := True);\n@@ -5846,7 +6010,7 @@ package Einfo is\n    procedure Set_Is_Abstract                   (Id : E; V : B := True);\n    procedure Set_Is_Local_Anonymous_Access     (Id : E; V : B := True);\n    procedure Set_Is_Access_Constant            (Id : E; V : B := True);\n-   procedure Set_Is_Ada_2005                   (Id : E; V : B := True);\n+   procedure Set_Is_Ada_2005_Only              (Id : E; V : B := True);\n    procedure Set_Is_Aliased                    (Id : E; V : B := True);\n    procedure Set_Is_Asynchronous               (Id : E; V : B := True);\n    procedure Set_Is_Atomic                     (Id : E; V : B := True);\n@@ -5915,6 +6079,7 @@ package Einfo is\n    procedure Set_Is_Remote_Call_Interface      (Id : E; V : B := True);\n    procedure Set_Is_Remote_Types               (Id : E; V : B := True);\n    procedure Set_Is_Renaming_Of_Object         (Id : E; V : B := True);\n+   procedure Set_Is_Return_Object              (Id : E; V : B := True);\n    procedure Set_Is_Shared_Passive             (Id : E; V : B := True);\n    procedure Set_Is_Statically_Allocated       (Id : E; V : B := True);\n    procedure Set_Is_Synchronized_Interface     (Id : E; V : B := True);\n@@ -5928,21 +6093,26 @@ package Einfo is\n    procedure Set_Is_VMS_Exception              (Id : E; V : B := True);\n    procedure Set_Is_Valued_Procedure           (Id : E; V : B := True);\n    procedure Set_Is_Visible_Child_Unit         (Id : E; V : B := True);\n+   procedure Set_Is_Visible_Formal             (Id : E; V : B := True);\n    procedure Set_Is_Volatile                   (Id : E; V : B := True);\n    procedure Set_Itype_Printed                 (Id : E; V : B := True);\n    procedure Set_Kill_Elaboration_Checks       (Id : E; V : B := True);\n    procedure Set_Kill_Range_Checks             (Id : E; V : B := True);\n    procedure Set_Kill_Tag_Checks               (Id : E; V : B := True);\n+   procedure Set_Known_To_Have_Preelab_Init    (Id : E; V : B := True);\n+   procedure Set_Last_Assignment               (Id : E; V : N);\n    procedure Set_Last_Entity                   (Id : E; V : E);\n    procedure Set_Limited_View                  (Id : E; V : E);\n    procedure Set_Lit_Indexes                   (Id : E; V : E);\n    procedure Set_Lit_Strings                   (Id : E; V : E);\n+   procedure Set_Low_Bound_Known               (Id : E; V : B := True);\n    procedure Set_Machine_Radix_10              (Id : E; V : B := True);\n    procedure Set_Master_Id                     (Id : E; V : E);\n    procedure Set_Materialize_Entity            (Id : E; V : B := True);\n    procedure Set_Mechanism                     (Id : E; V : M);\n    procedure Set_Modulus                       (Id : E; V : U);\n    procedure Set_Must_Be_On_Byte_Boundary      (Id : E; V : B := True);\n+   procedure Set_Must_Have_Preelab_Init        (Id : E; V : B := True);\n    procedure Set_Needs_Debug_Info              (Id : E; V : B := True);\n    procedure Set_Needs_No_Actuals              (Id : E; V : B := True);\n    procedure Set_Never_Set_In_Source           (Id : E; V : B := True);\n@@ -5985,6 +6155,7 @@ package Einfo is\n    procedure Set_Renamed_Object                (Id : E; V : N);\n    procedure Set_Renaming_Map                  (Id : E; V : U);\n    procedure Set_Return_Present                (Id : E; V : B := True);\n+   procedure Set_Return_Applies_To             (Id : E; V : N);\n    procedure Set_Returns_By_Ref                (Id : E; V : B := True);\n    procedure Set_Reverse_Bit_Order             (Id : E; V : B := True);\n    procedure Set_Scalar_Range                  (Id : E; V : N);\n@@ -6228,6 +6399,7 @@ package Einfo is\n    procedure Write_Field25_Name (Id : Entity_Id);\n    procedure Write_Field26_Name (Id : Entity_Id);\n    procedure Write_Field27_Name (Id : Entity_Id);\n+   procedure Write_Field28_Name (Id : Entity_Id);\n    --  These routines are used to output a nice symbolic name for the given\n    --  field, depending on the Ekind. No blanks or end of lines are output,\n    --  just the characters of the field name.\n@@ -6297,6 +6469,7 @@ package Einfo is\n    pragma Inline (Discriminant_Constraint);\n    pragma Inline (Discriminant_Default_Value);\n    pragma Inline (Discriminant_Number);\n+   pragma Inline (Elaborate_Body_Desirable);\n    pragma Inline (Elaboration_Entity);\n    pragma Inline (Elaboration_Entity_Required);\n    pragma Inline (Enclosing_Scope);\n@@ -6318,6 +6491,7 @@ package Einfo is\n    pragma Inline (Extra_Accessibility);\n    pragma Inline (Extra_Constrained);\n    pragma Inline (Extra_Formal);\n+   pragma Inline (Extra_Formals);\n    pragma Inline (Finalization_Chain_Entity);\n    pragma Inline (First_Entity);\n    pragma Inline (First_Index);\n@@ -6383,6 +6557,7 @@ package Einfo is\n    pragma Inline (Has_Specified_Stream_Output);\n    pragma Inline (Has_Specified_Stream_Read);\n    pragma Inline (Has_Specified_Stream_Write);\n+   pragma Inline (Has_Static_Discriminants);\n    pragma Inline (Has_Storage_Size_Clause);\n    pragma Inline (Has_Stream_Size_Clause);\n    pragma Inline (Has_Subprogram_Descriptor);\n@@ -6402,7 +6577,7 @@ package Einfo is\n    pragma Inline (Is_Abstract);\n    pragma Inline (Is_Local_Anonymous_Access);\n    pragma Inline (Is_Access_Constant);\n-   pragma Inline (Is_Ada_2005);\n+   pragma Inline (Is_Ada_2005_Only);\n    pragma Inline (Is_Access_Type);\n    pragma Inline (Is_Aliased);\n    pragma Inline (Is_Array_Type);\n@@ -6444,6 +6619,7 @@ package Einfo is\n    pragma Inline (Is_Floating_Point_Type);\n    pragma Inline (Is_For_Access_Subtype);\n    pragma Inline (Is_Formal);\n+   pragma Inline (Is_Formal_Object);\n    pragma Inline (Is_Formal_Subprogram);\n    pragma Inline (Is_Frozen);\n    pragma Inline (Is_Generic_Actual_Type);\n@@ -6456,6 +6632,7 @@ package Einfo is\n    pragma Inline (Is_Immediately_Visible);\n    pragma Inline (Is_Imported);\n    pragma Inline (Is_Incomplete_Or_Private_Type);\n+   pragma Inline (Is_Incomplete_Type);\n    pragma Inline (Is_Inlined);\n    pragma Inline (Is_Interface);\n    pragma Inline (Is_Instantiated);\n@@ -6501,6 +6678,7 @@ package Einfo is\n    pragma Inline (Is_Remote_Call_Interface);\n    pragma Inline (Is_Remote_Types);\n    pragma Inline (Is_Renaming_Of_Object);\n+   pragma Inline (Is_Return_Object);\n    pragma Inline (Is_Scalar_Type);\n    pragma Inline (Is_Shared_Passive);\n    pragma Inline (Is_Signed_Integer_Type);\n@@ -6519,20 +6697,25 @@ package Einfo is\n    pragma Inline (Is_VMS_Exception);\n    pragma Inline (Is_Valued_Procedure);\n    pragma Inline (Is_Visible_Child_Unit);\n+   pragma Inline (Is_Visible_Formal);\n    pragma Inline (Itype_Printed);\n    pragma Inline (Kill_Elaboration_Checks);\n    pragma Inline (Kill_Range_Checks);\n    pragma Inline (Kill_Tag_Checks);\n+   pragma Inline (Known_To_Have_Preelab_Init);\n+   pragma Inline (Last_Assignment);\n    pragma Inline (Last_Entity);\n    pragma Inline (Limited_View);\n    pragma Inline (Lit_Indexes);\n    pragma Inline (Lit_Strings);\n+   pragma Inline (Low_Bound_Known);\n    pragma Inline (Machine_Radix_10);\n    pragma Inline (Master_Id);\n    pragma Inline (Materialize_Entity);\n    pragma Inline (Mechanism);\n    pragma Inline (Modulus);\n    pragma Inline (Must_Be_On_Byte_Boundary);\n+   pragma Inline (Must_Have_Preelab_Init);\n    pragma Inline (Needs_Debug_Info);\n    pragma Inline (Needs_No_Actuals);\n    pragma Inline (Never_Set_In_Source);\n@@ -6578,6 +6761,7 @@ package Einfo is\n    pragma Inline (Renamed_Object);\n    pragma Inline (Renaming_Map);\n    pragma Inline (Return_Present);\n+   pragma Inline (Return_Applies_To);\n    pragma Inline (Returns_By_Ref);\n    pragma Inline (Reverse_Bit_Order);\n    pragma Inline (Scalar_Range);\n@@ -6673,6 +6857,7 @@ package Einfo is\n    pragma Inline (Set_Discriminant_Constraint);\n    pragma Inline (Set_Discriminant_Default_Value);\n    pragma Inline (Set_Discriminant_Number);\n+   pragma Inline (Set_Elaborate_Body_Desirable);\n    pragma Inline (Set_Elaboration_Entity);\n    pragma Inline (Set_Elaboration_Entity_Required);\n    pragma Inline (Set_Enclosing_Scope);\n@@ -6692,6 +6877,7 @@ package Einfo is\n    pragma Inline (Set_Extra_Accessibility);\n    pragma Inline (Set_Extra_Constrained);\n    pragma Inline (Set_Extra_Formal);\n+   pragma Inline (Set_Extra_Formals);\n    pragma Inline (Set_Finalization_Chain_Entity);\n    pragma Inline (Set_First_Entity);\n    pragma Inline (Set_First_Index);\n@@ -6745,6 +6931,7 @@ package Einfo is\n    pragma Inline (Set_Has_Pragma_Pure);\n    pragma Inline (Set_Has_Pragma_Pure_Function);\n    pragma Inline (Set_Has_Pragma_Unreferenced);\n+   pragma Inline (Set_Known_To_Have_Preelab_Init);\n    pragma Inline (Set_Has_Primitive_Operations);\n    pragma Inline (Set_Has_Private_Declaration);\n    pragma Inline (Set_Has_Qualified_Name);\n@@ -6757,6 +6944,7 @@ package Einfo is\n    pragma Inline (Set_Has_Specified_Stream_Output);\n    pragma Inline (Set_Has_Specified_Stream_Read);\n    pragma Inline (Set_Has_Specified_Stream_Write);\n+   pragma Inline (Set_Has_Static_Discriminants);\n    pragma Inline (Set_Has_Storage_Size_Clause);\n    pragma Inline (Set_Has_Subprogram_Descriptor);\n    pragma Inline (Set_Has_Task);\n@@ -6775,7 +6963,7 @@ package Einfo is\n    pragma Inline (Set_Is_Abstract);\n    pragma Inline (Set_Is_Local_Anonymous_Access);\n    pragma Inline (Set_Is_Access_Constant);\n-   pragma Inline (Set_Is_Ada_2005);\n+   pragma Inline (Set_Is_Ada_2005_Only);\n    pragma Inline (Set_Is_Aliased);\n    pragma Inline (Set_Is_Asynchronous);\n    pragma Inline (Set_Is_Atomic);\n@@ -6844,6 +7032,7 @@ package Einfo is\n    pragma Inline (Set_Is_Remote_Call_Interface);\n    pragma Inline (Set_Is_Remote_Types);\n    pragma Inline (Set_Is_Renaming_Of_Object);\n+   pragma Inline (Set_Is_Return_Object);\n    pragma Inline (Set_Is_Shared_Passive);\n    pragma Inline (Set_Is_Statically_Allocated);\n    pragma Inline (Set_Is_Synchronized_Interface);\n@@ -6857,21 +7046,25 @@ package Einfo is\n    pragma Inline (Set_Is_VMS_Exception);\n    pragma Inline (Set_Is_Valued_Procedure);\n    pragma Inline (Set_Is_Visible_Child_Unit);\n+   pragma Inline (Set_Is_Visible_Formal);\n    pragma Inline (Set_Is_Volatile);\n    pragma Inline (Set_Itype_Printed);\n    pragma Inline (Set_Kill_Elaboration_Checks);\n    pragma Inline (Set_Kill_Range_Checks);\n    pragma Inline (Set_Kill_Tag_Checks);\n+   pragma Inline (Set_Last_Assignment);\n    pragma Inline (Set_Last_Entity);\n    pragma Inline (Set_Limited_View);\n    pragma Inline (Set_Lit_Indexes);\n    pragma Inline (Set_Lit_Strings);\n+   pragma Inline (Set_Low_Bound_Known);\n    pragma Inline (Set_Machine_Radix_10);\n    pragma Inline (Set_Master_Id);\n    pragma Inline (Set_Materialize_Entity);\n    pragma Inline (Set_Mechanism);\n    pragma Inline (Set_Modulus);\n    pragma Inline (Set_Must_Be_On_Byte_Boundary);\n+   pragma Inline (Set_Must_Have_Preelab_Init);\n    pragma Inline (Set_Needs_Debug_Info);\n    pragma Inline (Set_Needs_No_Actuals);\n    pragma Inline (Set_Never_Set_In_Source);\n@@ -6914,6 +7107,7 @@ package Einfo is\n    pragma Inline (Set_Renamed_Object);\n    pragma Inline (Set_Renaming_Map);\n    pragma Inline (Set_Return_Present);\n+   pragma Inline (Set_Return_Applies_To);\n    pragma Inline (Set_Returns_By_Ref);\n    pragma Inline (Set_Reverse_Bit_Order);\n    pragma Inline (Set_Scalar_Range);"}]}