{"sha": "183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgzYmEzNzhjYTQyYmI4OGNhOGUzMGJkZmFjMmE1ZWZkM2QxYWQyMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2019-06-28T20:19:54Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-06-28T20:19:54Z"}, "message": "Update pc-relative support.\n\n2019-06-28  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/predicates.md (pcrel_address):  Use\n\tSYMBOL_REF_LOCAL_P to determine if a label is local.\n\t(pcrel_external_address): New predicate.\n\t(non_prefixed_mem_operand): Delete, predicate not used.\n\t* config/rs6000/rs6000.h (SYMBOL_FLAG_PCREL_P): Delete, we now use\n\tSYMBOL_REF_LOCAL_P to determine if we can use pc-relative\n\taddressing.\n\t(SYMBOL_REF_PCREL_P): Likewise.\n\nFrom-SVN: r272792", "tree": {"sha": "f9d0fef29410e8d3af1a0505c17d78956ae309d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9d0fef29410e8d3af1a0505c17d78956ae309d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20/comments", "author": null, "committer": null, "parents": [{"sha": "afbde658c8cff7ac10b015e3c4ce478a6a77b24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afbde658c8cff7ac10b015e3c4ce478a6a77b24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afbde658c8cff7ac10b015e3c4ce478a6a77b24b"}], "stats": {"total": 71, "additions": 55, "deletions": 16}, "files": [{"sha": "80790ed76f54c2d0ab63aef48e52010e2e7ab5c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20", "patch": "@@ -1,5 +1,14 @@\n 2019-06-28   Michael Meissner  <meissner@linux.ibm.com>\n \n+\t* config/rs6000/predicates.md (pcrel_address):  Use\n+\tSYMBOL_REF_LOCAL_P to determine if a label is local.\n+\t(pcrel_external_address): New predicate.\n+\t(non_prefixed_mem_operand): Delete, predicate not used.\n+\t* config/rs6000/rs6000.h (SYMBOL_FLAG_PCREL_P): Delete, we now use\n+\tSYMBOL_REF_LOCAL_P to determine if we can use pc-relative\n+\taddressing.\n+\t(SYMBOL_REF_PCREL_P): Likewise.\n+\n \tPR target/91009\n \t* config/rs6000/rs6000.md (floatsi<mode>2_lfiwax): Add non-VSX\n \talternative."}, {"sha": "45fa40a404509fb919a3e38e659c21b80390596e", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20", "patch": "@@ -1626,10 +1626,9 @@\n (define_predicate \"pcrel_address\"\n   (match_code \"label_ref,symbol_ref,const\")\n {\n-  if (!TARGET_PCREL)\n+  if (!rs6000_pcrel_p (cfun))\n     return false;\n \n-  /* Discard any CONST's.  */\n   if (GET_CODE (op) == CONST)\n     op = XEXP (op, 0);\n \n@@ -1645,21 +1644,59 @@\n       op = op0;\n     }\n \n-  return LABEL_REF_P (op) || SYMBOL_REF_PCREL_P (op);\n+  if (LABEL_REF_P (op))\n+    return true;\n+\n+  return (SYMBOL_REF_P (op) && SYMBOL_REF_LOCAL_P (op));\n+})\n+\n+;; Return true if the operand is an external symbol whose address can be loaded\n+;; into a register using:\n+;;\tPLA reg,label@pcrel@got\n+;;\n+;; The linker will either optimize this to either a PADDI if the label is\n+;; defined locally in another module or a PLD of the address if the label is\n+;; defined in another module.\n+\n+(define_predicate \"pcrel_external_address\"\n+  (match_code \"symbol_ref,const\")\n+{\n+  if (!rs6000_pcrel_p (cfun))\n+    return false;\n+\n+  if (GET_CODE (op) == CONST)\n+    op = XEXP (op, 0);\n+\n+  /* Validate offset.  */\n+  if (GET_CODE (op) == PLUS)\n+    {\n+      rtx op0 = XEXP (op, 0);\n+      rtx op1 = XEXP (op, 1);\n+\n+      if (!CONST_INT_P (op1) || !SIGNED_34BIT_OFFSET_P (INTVAL (op1), 0))\n+\treturn false;\n+\n+      op = op0;\n+    }\n+\n+  return (SYMBOL_REF_P (op) && !SYMBOL_REF_LOCAL_P (op));\n })\n \n-;; Return 1 if op is a prefixed memory operand\n+;; Return 1 if op is a prefixed memory operand.\n (define_predicate \"prefixed_mem_operand\"\n   (match_code \"mem\")\n {\n   return rs6000_prefixed_address (XEXP (op, 0), GET_MODE (op));\n })\n \n-;; Return 1 if op is a memory operand that is not a prefixed memory\n-;; operand.\n-(define_predicate \"non_prefixed_mem_operand\"\n-  (and (match_operand 0 \"memory_operand\")\n-       (not (match_operand 0 \"prefixed_mem_operand\"))))\n+;; Return 1 if op is a memory operand to an external variable when we\n+;; support pc-relative addressing and the PCREL_OPT relocation to\n+;; optimize references to it.\n+(define_predicate \"pcrel_external_mem_operand\"\n+  (match_code \"mem\")\n+{\n+  return pcrel_external_address (XEXP (op, 0), Pmode);\n+})\n \n ;; Match the first insn (addis) in fusing the combination of addis and loads to\n ;; GPR registers on power8."}, {"sha": "9193d9e8a54a8590d8e179ef7b1591e01b47d32b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=183ba378ca42bb88ca8e30bdfac2a5efd3d1ad20", "patch": "@@ -2539,10 +2539,3 @@ typedef struct GTY(()) machine_function\n   IN_RANGE (VALUE,\t\t\t\t\t\t\t\\\n \t    -(HOST_WIDE_INT_1 << 33),\t\t\t\t\t\\\n \t    (HOST_WIDE_INT_1 << 33) - 1 - (EXTRA))\n-\n-/* Flag to mark SYMBOL_REF objects to say they are local addresses and are used\n-   in pc-relative addresses.  */\n-#define SYMBOL_FLAG_PCREL\tSYMBOL_FLAG_MACH_DEP\n-\n-#define SYMBOL_REF_PCREL_P(X)\t\t\t\t\t\t\\\n-  (SYMBOL_REF_P (X) && SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_PCREL)"}]}