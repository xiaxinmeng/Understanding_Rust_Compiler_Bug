{"sha": "a528594cf9a74e5a0fbac13ef673064ed73e1b89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyODU5NGNmOWE3NGU1YTBmYmFjMTNlZjY3MzA2NGVkNzNlMWI4OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-07T18:55:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-07T19:27:47Z"}, "message": "c++: using overloaded with local decl [PR92918]\n\nThe problem here was that the lookup for 'impl' when parsing the template\nonly found the using-declaration, not the member function declaration.\n\nThis happened because when trying to add the member function declaration,\npush_class_level_binding_1 saw that the current binding was a USING_DECL and\nthe new value is an overload, and decided to just return success.\n\nThat 'return true' dates back to r69921.  In\nhttps://gcc.gnu.org/pipermail/gcc-patches/2003-July/110632.html Nathan\nmentions that we only push dependent USING_DECLs, which is no longer the\ncase; now that we retain more USING_DECLs, handling this case like the other\noverloaded function cases seems like the obvious solution.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/92918\n\t* name-lookup.c (push_class_level_binding_1): Do overload a new\n\tfunction with a previous using-declaration.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/92918\n\t* g++.dg/lookup/using66.C: New test.", "tree": {"sha": "5dbb8daeeb056ef015ea9d873737e5cd13014950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dbb8daeeb056ef015ea9d873737e5cd13014950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a528594cf9a74e5a0fbac13ef673064ed73e1b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a528594cf9a74e5a0fbac13ef673064ed73e1b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a528594cf9a74e5a0fbac13ef673064ed73e1b89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a528594cf9a74e5a0fbac13ef673064ed73e1b89/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12029c04d01c7ba0f775cdc208edf29490ee5db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12029c04d01c7ba0f775cdc208edf29490ee5db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12029c04d01c7ba0f775cdc208edf29490ee5db6"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "4e84e2f99874cea7ab438cdc9ff5566d8a44ea22", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a528594cf9a74e5a0fbac13ef673064ed73e1b89/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a528594cf9a74e5a0fbac13ef673064ed73e1b89/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=a528594cf9a74e5a0fbac13ef673064ed73e1b89", "patch": "@@ -5520,7 +5520,7 @@ push_class_level_binding_1 (tree name, tree x)\n \told_decl = bval;\n       else if (TREE_CODE (bval) == USING_DECL\n \t       && OVL_P (target_decl))\n-\treturn true;\n+\told_decl = bval;\n       else if (OVL_P (target_decl)\n \t       && OVL_P (target_bval))\n \told_decl = bval;"}, {"sha": "02383bbea3e0fe149287cf373182c3c82ec8f308", "filename": "gcc/testsuite/g++.dg/lookup/using66.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a528594cf9a74e5a0fbac13ef673064ed73e1b89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a528594cf9a74e5a0fbac13ef673064ed73e1b89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing66.C?ref=a528594cf9a74e5a0fbac13ef673064ed73e1b89", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/92918\n+// { dg-do compile { target c++11 } }\n+\n+struct Base03\n+{\n+    static void impl();\n+};\n+\n+struct Problem : Base03\n+{\n+    using Base03::impl;\n+    static int impl(char const *);\n+\n+    template <typename T>\n+    auto f(const T &t) const\n+    -> decltype(impl(t))\n+    {\n+        return impl(t);\n+    }\n+};\n+\n+Problem t;\n+int i = t.f(\"42\");"}]}