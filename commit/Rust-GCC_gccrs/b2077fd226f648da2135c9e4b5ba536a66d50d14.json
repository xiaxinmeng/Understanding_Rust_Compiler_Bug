{"sha": "b2077fd226f648da2135c9e4b5ba536a66d50d14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwNzdmZDIyNmY2NDhkYTIxMzVjOWU0YjViYTUzNmE2NmQ1MGQxNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-08T10:09:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-08T10:09:37Z"}, "message": "i386.h (ix86_size_cost): Declare.\n\n\n\t* i386.h (ix86_size_cost): Declare.\n\t(ix86_cur_cost): New function macro.\n\t* i386.md (peepholes expanding size and splitters): Predicate by\n\toptimize_insn_for_speed_p.\n\t(peepholes reduce size and splitters): Predicate by\n\toptimize_insn_for_size_p.\n\t* i386.c (ix86_size_cost): Rename from ...\n\t(size_cost): This one.\n\t(override_options): Update.\n\t(decide_alg): Likewise.\n\t(ix86_expand_clear): Use RTL profile.\n\t(ix86_pad_returns): Use RTL profile.\n\nFrom-SVN: r138864", "tree": {"sha": "fac39d17764843d5fa33d6cd083a8e4d399945ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac39d17764843d5fa33d6cd083a8e4d399945ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2077fd226f648da2135c9e4b5ba536a66d50d14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2077fd226f648da2135c9e4b5ba536a66d50d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2077fd226f648da2135c9e4b5ba536a66d50d14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2077fd226f648da2135c9e4b5ba536a66d50d14/comments", "author": null, "committer": null, "parents": [{"sha": "a8ba47cb4108fb929ceff43d1feb127d4122825d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ba47cb4108fb929ceff43d1feb127d4122825d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8ba47cb4108fb929ceff43d1feb127d4122825d"}], "stats": {"total": 146, "additions": 84, "deletions": 62}, "files": [{"sha": "f3e43e485444f33635c5e5028eb5e242ac8c2d2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2077fd226f648da2135c9e4b5ba536a66d50d14", "patch": "@@ -1,3 +1,18 @@\n+2008-08-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (ix86_size_cost): Declare.\n+\t(ix86_cur_cost): New function macro.\n+\t* i386.md (peepholes expanding size and splitters): Predicate by\n+\toptimize_insn_for_speed_p.\n+\t(peepholes reduce size and splitters): Predicate by\n+\toptimize_insn_for_size_p.\n+\t* i386.c (ix86_size_cost): Rename from ...\n+\t(size_cost): This one.\n+\t(override_options): Update.\n+\t(decide_alg): Likewise.\n+\t(ix86_expand_clear): Use RTL profile.\n+\t(ix86_pad_returns): Use RTL profile.\n+\n 2008-08-07  Jan Hubicka  <jh@suse.cz>\n \n \t* recog.c (split_all_insns): Set RTL profile"}, {"sha": "73d1bb40874e45e4844e469df2b78d4d4bd08984", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b2077fd226f648da2135c9e4b5ba536a66d50d14", "patch": "@@ -75,8 +75,8 @@ static rtx legitimize_dllimport_symbol (rtx, bool);\n \n #define DUMMY_STRINGOP_ALGS {libcall, {{-1, libcall}}}\n \n-static const\n-struct processor_costs size_cost = {\t/* costs for tuning for size */\n+const\n+struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n   COSTS_N_BYTES (2),\t\t\t/* cost of an add instruction */\n   COSTS_N_BYTES (3),\t\t\t/* cost of a lea instruction */\n   COSTS_N_BYTES (2),\t\t\t/* variable shift costs */\n@@ -2841,7 +2841,7 @@ override_options (bool main_args_p)\n     ix86_tune_features[i] = !!(initial_ix86_tune_features[i] & ix86_tune_mask);\n \n   if (optimize_size)\n-    ix86_cost = &size_cost;\n+    ix86_cost = &ix86_size_cost;\n   else\n     ix86_cost = processor_target_table[ix86_tune].cost;\n \n@@ -11541,7 +11541,7 @@ ix86_expand_clear (rtx dest)\n   tmp = gen_rtx_SET (VOIDmode, dest, const0_rtx);\n \n   /* This predicate should match that for movsi_xor and movdi_xor_rex64.  */\n-  if (reload_completed && (!TARGET_USE_MOV0 || optimize_size))\n+  if (reload_completed && (!TARGET_USE_MOV0 || optimize_insn_for_speed_p ()))\n     {\n       rtx clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n       tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n@@ -16632,7 +16632,7 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n \t\t\t       && alg != rep_prefix_8_byte))\n   const struct processor_costs *cost;\n   \n-  cost = optimize_insn_for_size_p () ? &size_cost : ix86_cost;\n+  cost = optimize_insn_for_size_p () ? &ix86_size_cost : ix86_cost;\n \n   *dynamic_check = -1;\n   if (memset)\n@@ -24828,7 +24828,7 @@ ix86_pad_returns (void)\n       bool replace = false;\n \n       if (!JUMP_P (ret) || GET_CODE (PATTERN (ret)) != RETURN\n-\t  || !maybe_hot_bb_p (bb))\n+\t  || optimize_bb_for_size_p (bb))\n \tcontinue;\n       for (prev = PREV_INSN (ret); prev; prev = PREV_INSN (prev))\n \tif (active_insn_p (prev) || LABEL_P (prev))"}, {"sha": "238715615443ea957f368857110a207d66683f21", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b2077fd226f648da2135c9e4b5ba536a66d50d14", "patch": "@@ -170,6 +170,10 @@ struct processor_costs {\n };\n \n extern const struct processor_costs *ix86_cost;\n+extern const struct processor_costs ix86_size_cost;\n+\n+#define ix86_cur_cost() \\\n+  (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)\n \n /* Macros used in the machine description to test the flags.  */\n "}, {"sha": "f8d4c7db118507744dda9957a40379f7c951a2d5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 59, "deletions": 56, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2077fd226f648da2135c9e4b5ba536a66d50d14/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b2077fd226f648da2135c9e4b5ba536a66d50d14", "patch": "@@ -20030,7 +20030,7 @@\n \t   (const_int 0)]))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n    && ! TARGET_FAST_PREFIX\n-   && ! optimize_size\n+   && optimize_insn_for_speed_p ()\n    /* Ensure that the operand will remain sign-extended immediate.  */\n    && ix86_match_ccmode (insn, INTVAL (operands[3]) >= 0 ? CCNOmode : CCZmode)\"\n   [(set (match_dup 0)\n@@ -20050,7 +20050,8 @@\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n    && (GET_MODE (operands[0]) == HImode\n        || (GET_MODE (operands[0]) == QImode\n-\t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n+\t   && (TARGET_PROMOTE_QImode\n+\t       || optimize_insn_for_size_p ())))\"\n   [(parallel [(set (match_dup 0)\n \t\t   (neg:SI (match_dup 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -20063,7 +20064,8 @@\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n    && (GET_MODE (operands[0]) == HImode\n        || (GET_MODE (operands[0]) == QImode\n-\t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n+\t   && (TARGET_PROMOTE_QImode\n+\t       || optimize_insn_for_size_p ())))\"\n   [(set (match_dup 0)\n \t(not:SI (match_dup 1)))]\n   \"operands[0] = gen_lowpart (SImode, operands[0]);\n@@ -20078,7 +20080,8 @@\n   \"! TARGET_PARTIAL_REG_STALL && TARGET_CMOVE\n    && (GET_MODE (operands[0]) == HImode\n        || (GET_MODE (operands[0]) == QImode\n-\t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n+\t   && (TARGET_PROMOTE_QImode\n+\t       || optimize_insn_for_size_p ())))\"\n   [(set (match_dup 0)\n \t(if_then_else:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n   \"operands[0] = gen_lowpart (SImode, operands[0]);\n@@ -20094,7 +20097,7 @@\n   [(set (match_operand:SI 0 \"push_operand\" \"\")\n \t(match_operand:SI 1 \"memory_operand\" \"\"))\n    (match_scratch:SI 2 \"r\")]\n-  \"!optimize_size && !TARGET_PUSH_MEMORY\n+  \"optimize_insn_for_speed_p () && !TARGET_PUSH_MEMORY\n    && !RTX_FRAME_RELATED_P (peep2_next_insn (0))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n@@ -20104,7 +20107,7 @@\n   [(set (match_operand:DI 0 \"push_operand\" \"\")\n \t(match_operand:DI 1 \"memory_operand\" \"\"))\n    (match_scratch:DI 2 \"r\")]\n-  \"!optimize_size && !TARGET_PUSH_MEMORY\n+  \"optimize_insn_for_speed_p () && !TARGET_PUSH_MEMORY\n    && !RTX_FRAME_RELATED_P (peep2_next_insn (0))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n@@ -20116,7 +20119,7 @@\n   [(set (match_operand:SF 0 \"push_operand\" \"\")\n \t(match_operand:SF 1 \"memory_operand\" \"\"))\n    (match_scratch:SF 2 \"r\")]\n-  \"!optimize_size && !TARGET_PUSH_MEMORY\n+  \"optimize_insn_for_speed_p () && !TARGET_PUSH_MEMORY\n    && !RTX_FRAME_RELATED_P (peep2_next_insn (0))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n@@ -20126,7 +20129,7 @@\n   [(set (match_operand:HI 0 \"push_operand\" \"\")\n \t(match_operand:HI 1 \"memory_operand\" \"\"))\n    (match_scratch:HI 2 \"r\")]\n-  \"!optimize_size && !TARGET_PUSH_MEMORY\n+  \"optimize_insn_for_speed_p () && !TARGET_PUSH_MEMORY\n    && !RTX_FRAME_RELATED_P (peep2_next_insn (0))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n@@ -20136,7 +20139,7 @@\n   [(set (match_operand:QI 0 \"push_operand\" \"\")\n \t(match_operand:QI 1 \"memory_operand\" \"\"))\n    (match_scratch:QI 2 \"q\")]\n-  \"!optimize_size && !TARGET_PUSH_MEMORY\n+  \"optimize_insn_for_speed_p () && !TARGET_PUSH_MEMORY\n    && !RTX_FRAME_RELATED_P (peep2_next_insn (0))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n@@ -20148,10 +20151,10 @@\n   [(match_scratch:SI 1 \"r\")\n    (set (match_operand:SI 0 \"memory_operand\" \"\")\n         (const_int 0))]\n-  \"! optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && ! TARGET_USE_MOV0\n    && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cost->large_insn\n+   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 1) (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])\n@@ -20162,10 +20165,10 @@\n   [(match_scratch:HI 1 \"r\")\n    (set (match_operand:HI 0 \"memory_operand\" \"\")\n         (const_int 0))]\n-  \"! optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && ! TARGET_USE_MOV0\n    && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cost->large_insn\n+   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 2) (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])\n@@ -20176,10 +20179,10 @@\n   [(match_scratch:QI 1 \"q\")\n    (set (match_operand:QI 0 \"memory_operand\" \"\")\n         (const_int 0))]\n-  \"! optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && ! TARGET_USE_MOV0\n    && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cost->large_insn\n+   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 2) (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])\n@@ -20190,9 +20193,9 @@\n   [(match_scratch:SI 2 \"r\")\n    (set (match_operand:SI 0 \"memory_operand\" \"\")\n         (match_operand:SI 1 \"immediate_operand\" \"\"))]\n-  \"! optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cost->large_insn\"\n+   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -20201,9 +20204,9 @@\n   [(match_scratch:HI 2 \"r\")\n    (set (match_operand:HI 0 \"memory_operand\" \"\")\n         (match_operand:HI 1 \"immediate_operand\" \"\"))]\n-  \"! optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cost->large_insn\"\n+   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -20212,9 +20215,9 @@\n   [(match_scratch:QI 2 \"q\")\n    (set (match_operand:QI 0 \"memory_operand\" \"\")\n         (match_operand:QI 1 \"immediate_operand\" \"\"))]\n-  \"! optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cost->large_insn\"\n+   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -20226,7 +20229,7 @@\n \t  [(match_operand:SI 2 \"memory_operand\" \"\")\n \t   (const_int 0)]))\n    (match_scratch:SI 3 \"r\")]\n-  \" ! optimize_size && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"optimize_insn_for_speed_p () && ix86_match_ccmode (insn, CCNOmode)\"\n   [(set (match_dup 3) (match_dup 2))\n    (set (match_dup 0) (match_op_dup 1 [(match_dup 3) (const_int 0)]))]\n   \"\")\n@@ -20245,7 +20248,7 @@\n (define_peephole2\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"!optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], SImode)))\n@@ -20259,7 +20262,7 @@\n (define_peephole2\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n-  \"!optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], HImode)))\n@@ -20273,7 +20276,7 @@\n (define_peephole2\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n-  \"!optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && ((TARGET_NOT_UNPAIRABLE\n         && (!MEM_P (operands[0])\n             || !memory_displacement_operand (operands[0], QImode)))\n@@ -20372,7 +20375,7 @@\n                      [(match_dup 0)\n                       (match_operand:SI 1 \"memory_operand\" \"\")]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"! optimize_size && ! TARGET_READ_MODIFY\"\n+  \"optimize_insn_for_speed_p ()\"\n   [(set (match_dup 2) (match_dup 1))\n    (parallel [(set (match_dup 0)\n                    (match_op_dup 3 [(match_dup 0) (match_dup 2)]))\n@@ -20386,7 +20389,7 @@\n                      [(match_operand:SI 1 \"memory_operand\" \"\")\n                       (match_dup 0)]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"! optimize_size && ! TARGET_READ_MODIFY\"\n+  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY\"\n   [(set (match_dup 2) (match_dup 1))\n    (parallel [(set (match_dup 0)\n                    (match_op_dup 3 [(match_dup 2) (match_dup 0)]))\n@@ -20406,7 +20409,7 @@\n                      [(match_dup 0)\n                       (match_operand:SI 1 \"nonmemory_operand\" \"\")]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"! optimize_size && ! TARGET_READ_MODIFY_WRITE\"\n+  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY_WRITE\"\n   [(set (match_dup 2) (match_dup 0))\n    (parallel [(set (match_dup 2)\n                    (match_op_dup 3 [(match_dup 2) (match_dup 1)]))\n@@ -20421,7 +20424,7 @@\n                      [(match_operand:SI 1 \"nonmemory_operand\" \"\")\n                       (match_dup 0)]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"! optimize_size && ! TARGET_READ_MODIFY_WRITE\"\n+  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY_WRITE\"\n   [(set (match_dup 2) (match_dup 0))\n    (parallel [(set (match_dup 2)\n                    (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n@@ -20434,7 +20437,7 @@\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(match_operand 1 \"const0_operand\" \"\"))]\n   \"GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n-   && (! TARGET_USE_MOV0 || optimize_size)\n+   && (! TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n    && GENERAL_REG_P (operands[0])\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (const_int 0))\n@@ -20448,7 +20451,7 @@\n \t(const_int 0))]\n   \"(GET_MODE (operands[0]) == QImode\n     || GET_MODE (operands[0]) == HImode)\n-   && (! TARGET_USE_MOV0 || optimize_size)\n+   && (! TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (strict_low_part (match_dup 0)) (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])])\n@@ -20460,7 +20463,7 @@\n   \"(GET_MODE (operands[0]) == HImode\n     || GET_MODE (operands[0]) == SImode\n     || (GET_MODE (operands[0]) == DImode && TARGET_64BIT))\n-   && (optimize_size || TARGET_MOVE_M1_VIA_OR)\n+   && (optimize_insn_for_size_p () || TARGET_MOVE_M1_VIA_OR)\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (const_int -1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -20551,7 +20554,7 @@\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -4)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_SUB_ESP_4\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_4\"\n   [(clobber (match_dup 0))\n    (parallel [(set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))\n \t      (clobber (mem:BLK (scratch)))])])\n@@ -20561,7 +20564,7 @@\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -8)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_SUB_ESP_8\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_8\"\n   [(clobber (match_dup 0))\n    (set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))\n    (parallel [(set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))\n@@ -20572,15 +20575,15 @@\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -4)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_size || !TARGET_SUB_ESP_4\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_4\"\n   [(clobber (match_dup 0))\n    (set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))])\n \n (define_peephole2\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -8)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_size || !TARGET_SUB_ESP_8\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_8\"\n   [(clobber (match_dup 0))\n    (set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))\n    (set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))])\n@@ -20591,7 +20594,7 @@\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_ADD_ESP_4\"\n+  \"optimize_insn_for_size_p () || !TARGET_ADD_ESP_4\"\n   [(parallel [(set (match_dup 0) (mem:SI (reg:SI SP_REG)))\n \t      (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))\n \t      (clobber (mem:BLK (scratch)))])]\n@@ -20605,7 +20608,7 @@\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 8)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_ADD_ESP_8\"\n+  \"optimize_insn_for_size_p () || !TARGET_ADD_ESP_8\"\n   [(parallel [(set (match_dup 0) (mem:SI (reg:SI SP_REG)))\n \t      (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))\n \t      (clobber (mem:BLK (scratch)))])\n@@ -20618,7 +20621,7 @@\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 8)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size\"\n+  \"optimize_insn_for_size_p ()\"\n   [(parallel [(set (match_dup 0) (mem:SI (reg:SI SP_REG)))\n \t      (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))\n \t      (clobber (mem:BLK (scratch)))])\n@@ -20654,7 +20657,7 @@\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 8)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_size\"\n+  \"optimize_insn_for_size_p ()\"\n   [(parallel [(set (match_dup 0) (mem:SI (reg:SI SP_REG)))\n \t      (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))])\n    (parallel [(set (match_dup 0) (mem:SI (reg:SI SP_REG)))\n@@ -20683,7 +20686,7 @@\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int -8)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_SUB_ESP_4\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_4\"\n   [(clobber (match_dup 0))\n    (parallel [(set (mem:DI (pre_dec:DI (reg:DI SP_REG))) (match_dup 0))\n \t      (clobber (mem:BLK (scratch)))])])\n@@ -20693,7 +20696,7 @@\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int -16)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_SUB_ESP_8\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_8\"\n   [(clobber (match_dup 0))\n    (set (mem:DI (pre_dec:DI (reg:DI SP_REG))) (match_dup 0))\n    (parallel [(set (mem:DI (pre_dec:DI (reg:DI SP_REG))) (match_dup 0))\n@@ -20704,15 +20707,15 @@\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int -8)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_size || !TARGET_SUB_ESP_4\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_4\"\n   [(clobber (match_dup 0))\n    (set (mem:DI (pre_dec:DI (reg:DI SP_REG))) (match_dup 0))])\n \n (define_peephole2\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int -16)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_size || !TARGET_SUB_ESP_8\"\n+  \"optimize_insn_for_size_p () || !TARGET_SUB_ESP_8\"\n   [(clobber (match_dup 0))\n    (set (mem:DI (pre_dec:DI (reg:DI SP_REG))) (match_dup 0))\n    (set (mem:DI (pre_dec:DI (reg:DI SP_REG))) (match_dup 0))])\n@@ -20723,7 +20726,7 @@\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 8)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_ADD_ESP_4\"\n+  \"optimize_insn_for_size_p () || !TARGET_ADD_ESP_4\"\n   [(parallel [(set (match_dup 0) (mem:DI (reg:DI SP_REG)))\n \t      (set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 8)))\n \t      (clobber (mem:BLK (scratch)))])]\n@@ -20737,7 +20740,7 @@\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 16)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size || !TARGET_ADD_ESP_8\"\n+  \"optimize_insn_for_size_p () || !TARGET_ADD_ESP_8\"\n   [(parallel [(set (match_dup 0) (mem:DI (reg:DI SP_REG)))\n \t      (set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 8)))\n \t      (clobber (mem:BLK (scratch)))])\n@@ -20750,7 +20753,7 @@\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 16)))\n \t      (clobber (reg:CC FLAGS_REG))\n \t      (clobber (mem:BLK (scratch)))])]\n-  \"optimize_size\"\n+  \"optimize_insn_for_size_p ()\"\n   [(parallel [(set (match_dup 0) (mem:DI (reg:DI SP_REG)))\n \t      (set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 8)))\n \t      (clobber (mem:BLK (scratch)))])\n@@ -20786,7 +20789,7 @@\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 16)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_size\"\n+  \"optimize_insn_for_size_p ()\"\n   [(parallel [(set (match_dup 0) (mem:DI (reg:DI SP_REG)))\n \t      (set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 8)))])\n    (parallel [(set (match_dup 0) (mem:DI (reg:DI SP_REG)))\n@@ -20814,7 +20817,7 @@\n           (mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n                    (match_operand:SI 2 \"const_int_operand\" \"\")))\n      (clobber (reg:CC FLAGS_REG))])]\n-  \"!optimize_size\n+  \"optimize_insn_for_speed_p ()\n    && (INTVAL (operands[2]) == 3\n        || INTVAL (operands[2]) == 5\n        || INTVAL (operands[2]) == 9)\"\n@@ -20846,7 +20849,7 @@\n                    (match_operand:DI 2 \"const_int_operand\" \"\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT\n-   && !optimize_size\n+   && optimize_insn_for_speed_p ()\n    && (INTVAL (operands[2]) == 3\n        || INTVAL (operands[2]) == 5\n        || INTVAL (operands[2]) == 9)\"\n@@ -20864,7 +20867,7 @@\n \t\t   (mult:DI (match_operand:DI 1 \"memory_operand\" \"\")\n \t\t\t    (match_operand:DI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_SLOW_IMUL_IMM32_MEM && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM32_MEM && optimize_insn_for_speed_p ()\n    && !satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (mult:DI (match_dup 3) (match_dup 2)))\n@@ -20877,7 +20880,7 @@\n \t\t   (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_SLOW_IMUL_IMM32_MEM && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM32_MEM && optimize_insn_for_speed_p ()\n    && !satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (mult:SI (match_dup 3) (match_dup 2)))\n@@ -20891,7 +20894,7 @@\n \t\t     (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"immediate_operand\" \"\"))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_SLOW_IMUL_IMM32_MEM && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM32_MEM && optimize_insn_for_speed_p ()\n    && !satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (zero_extend:DI (mult:SI (match_dup 3) (match_dup 2))))\n@@ -20908,7 +20911,7 @@\n \t\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:DI 3 \"r\")]\n-  \"TARGET_SLOW_IMUL_IMM8 && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM8 && optimize_insn_for_speed_p ()\n    && satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:DI (match_dup 0) (match_dup 3)))\n@@ -20924,7 +20927,7 @@\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:SI 3 \"r\")]\n-  \"TARGET_SLOW_IMUL_IMM8 && !optimize_size\n+  \"TARGET_SLOW_IMUL_IMM8 && optimize_insn_for_speed_p ()\n    && satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:SI (match_dup 0) (match_dup 3)))\n@@ -20940,7 +20943,7 @@\n \t\t\t    (match_operand:HI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:HI 3 \"r\")]\n-  \"TARGET_SLOW_IMUL_IMM8 && !optimize_size\"\n+  \"TARGET_SLOW_IMUL_IMM8 && optimize_insn_for_speed_p ()\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:HI (match_dup 0) (match_dup 3)))\n \t      (clobber (reg:CC FLAGS_REG))])]"}]}