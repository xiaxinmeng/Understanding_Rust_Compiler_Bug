{"sha": "2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhN2JhNjNhMTI3OWJkNmU3NGMyYzMzYTJhNTZlYzQyYjM3NGM3Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-08-05T00:46:17Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-05T00:46:17Z"}, "message": "gcc-dg.exp: Set up TORTURE_OPTIONS...\n\n\t* lib/gcc-dg.exp: Set up TORTURE_OPTIONS, torture_with_loops,\n\tand torture_without_loops as is done by c-torture.exp.\n\t(search_for): Copy from c-torture.exp.\n\t(gcc-dg-runtest): New function, drives a directory of tests\n\titerating over the TORTURE_OPTIONS.\n\t(scan-assembler, scan-assembler-not): Move here from\n\tindividual directory drivers.\n\n\t* gcc.dg/dg.exp: scan-assembler, scan-assembler-not now\n\tdefined by lib/gcc-dg.exp.\n\t* gcc.dg/cpp/cpp.exp: Likewise.\n\t* gcc.dg/noncompile/noncompile.exp: Likewise.  Use\n\tgcc-dg-runtest, so we cycle over optimization options.\n\n\t* gcc.dg/cpp/20000625-2.c: Expect warning on line 8, not 9.\n\t* gcc.dg/compare2.c: No longer expected to fail.\n\nFrom-SVN: r35500", "tree": {"sha": "7fb2f0719dcc7471ba42244cc76f838c6603691d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb2f0719dcc7471ba42244cc76f838c6603691d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/comments", "author": null, "committer": null, "parents": [{"sha": "3af4c87ccabe4c19026c9e3444f8714bf07675c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af4c87ccabe4c19026c9e3444f8714bf07675c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af4c87ccabe4c19026c9e3444f8714bf07675c2"}], "stats": {"total": 247, "additions": 139, "deletions": 108}, "files": [{"sha": "463c14c36bf516ce36f932efe1e1bb8de0149cca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "patch": "@@ -1,3 +1,22 @@\n+2000-08-04  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lib/gcc-dg.exp: Set up TORTURE_OPTIONS, torture_with_loops,\n+\tand torture_without_loops as is done by c-torture.exp.\n+\t(search_for): Copy from c-torture.exp.\n+\t(gcc-dg-runtest): New function, drives a directory of tests\n+\titerating over the TORTURE_OPTIONS.\n+\t(scan-assembler, scan-assembler-not): Move here from\n+\tindividual directory drivers.\n+\n+\t* gcc.dg/dg.exp: scan-assembler, scan-assembler-not now\n+\tdefined by lib/gcc-dg.exp.\n+\t* gcc.dg/cpp/cpp.exp: Likewise.\n+\t* gcc.dg/noncompile/noncompile.exp: Likewise.  Use\n+\tgcc-dg-runtest, so we cycle over optimization options.\n+\n+\t* gcc.dg/cpp/20000625-2.c: Expect warning on line 8, not 9.\n+\t* gcc.dg/compare2.c: No longer expected to fail.\n+\n Fri Aug  4 23:00:50 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* gcc.c-torture/execute/20000804-1.c: New test."}, {"sha": "34f585249902cc43c42899df7000007b33943abb", "filename": "gcc/testsuite/gcc.dg/compare2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c?ref=2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "patch": "@@ -26,7 +26,7 @@ void f(int x, unsigned int y)\n \n   /* Statement expression.  */\n   x > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 9\" } */\n-  y > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 10\" { xfail *-*-* } } */\n+  y > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 10\" } */\n \n   /* Statement expression with recursive ?: .  */\n   x > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 11\" } */"}, {"sha": "0bd7903985a0a4bb84c681aa69e6b1021b16fc80", "filename": "gcc/testsuite/gcc.dg/cpp/20000625-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c?ref=2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "patch": "@@ -6,7 +6,7 @@\n #define xstr(x) #x\n \n const char a[] = str(symbol_version(getrlimit, GLIBC_2.0));\n-/* { dg-warning \"valid preprocessing token\" \"\" { target *-*-* } 9 } */\n+/* { dg-warning \"valid preprocessing token\" \"\" { target *-*-* } 8 } */\n const char b[] = str(getrlimit@GLIBC_2.0);\n const char c[] = \"getrlimit@GLIBC_2.0\";\n "}, {"sha": "67b350598d648830c85da3b9fbd993a0696e71ba", "filename": "gcc/testsuite/gcc.dg/cpp/cpp.exp", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp?ref=2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "patch": "@@ -22,37 +22,6 @@\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# Utility for scanning compiler result, invoked via dg-final.\n-# Call pass if pattern is present, otherwise fail.\n-proc scan-assembler { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if [regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler\"\n-    }\n-}\n-\n-# Call pass if pattern is not present, otherwise fail.\n-proc scan-assembler-not { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if ![regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler-not\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler-not\"\n-    }\n-}\n-\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "6053a044e83853a42bac42dd064a560c91e983dc", "filename": "gcc/testsuite/gcc.dg/dg.exp", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdg.exp?ref=2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "patch": "@@ -22,37 +22,6 @@\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# Utility for scanning compiler result, invoked via dg-final.\n-# Call pass if pattern is present, otherwise fail.\n-proc scan-assembler { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if [regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler\"\n-    }\n-}\n-\n-# Call pass if pattern is not present, otherwise fail.\n-proc scan-assembler-not { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if ![regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler-not\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler-not\"\n-    }\n-}\n-\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "9e204691efa70d08d046180d611d03282174c98b", "filename": "gcc/testsuite/gcc.dg/noncompile/noncompile.exp", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fnoncompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fnoncompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fnoncompile.exp?ref=2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "patch": "@@ -17,48 +17,12 @@\n # Please email any bugs, comments, and/or additions to this file to:\n # bug-gcc@prep.ai.mit.edu\n \n-# GCC testsuite that uses the `dg.exp' driver.\n+# Test error reporting.\n+# Don't run this directory with any default CFLAGS, but do cycle through\n+# torture options.\n \n-# Load support procs.\n load_lib gcc-dg.exp\n \n-# Utility for scanning compiler result, invoked via dg-final.\n-# Call pass if pattern is present, otherwise fail.\n-proc scan-assembler { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if [regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler\"\n-    }\n-}\n-\n-# Call pass if pattern is not present, otherwise fail.\n-proc scan-assembler-not { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if ![regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler-not\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler-not\"\n-    }\n-}\n-\n-# Initialize `dg'.\n dg-init\n-\n-# Main loop.\n-# Don't run this directory with any default CFLAGS.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \"\" \"\"\n-\n-# All done.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \"\"\n dg-finish"}, {"sha": "0fe06abec02785ae03ece13d8bfd6fcb476bdd0c", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 114, "deletions": 4, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=2ba7ba63a1279bd6e74c2c33a2a56ec42b374c7c", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n+#   Copyright (C) 1997, 1999, 2000 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -17,12 +17,44 @@\n # Please email any bugs, comments, and/or additions to this file to:\n # bug-gcc@prep.ai.mit.edu\n \n-# Define gcc callbacks for dg.exp.\n-\n load_lib dg.exp\n load_lib file-format.exp\n load_lib target-supports.exp\n \n+if ![info exists TORTURE_OPTIONS] {\n+    # It is theoretically beneficial to group all of the O2/O3 options together,\n+    # as in many cases the compiler will generate identical executables for\n+    # all of them--and the c-torture testsuite will skip testing identical\n+    # executables multiple times.\n+    # Also note that -finline-functions is explicitly included in one of the\n+    # items below, even though -O3 is also specified, because some ports may\n+    # choose to disable inlining functions by default, even when optimizing.\n+    set TORTURE_OPTIONS [list \\\n+\t{ -O0 } \\\n+\t{ -O1 } \\\n+\t{ -O2 } \\\n+\t{ -O3 -fomit-frame-pointer } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-loops } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions } \\\n+\t{ -O3 -g } \\\n+\t{ -O3 -fssa } \\\n+\t{ -Os } ]\n+}\n+\n+\n+# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n+# one for testcases without loops.\n+\n+set torture_with_loops $TORTURE_OPTIONS\n+set torture_without_loops \"\"\n+foreach option $TORTURE_OPTIONS {\n+    if ![string match \"*loop*\" $option] {\n+\tlappend torture_without_loops $option\n+    }\n+}\n+\n+# Define gcc callbacks for dg.exp.\n+\n proc gcc-dg-test { prog do_what extra_tool_flags } {\n     # Set up the compiler flags, based on what we're going to do.\n \n@@ -70,7 +102,6 @@ proc gcc-dg-test { prog do_what extra_tool_flags } {\n     return [list $comp_output $output_file]\n }\n \n-\n proc gcc-dg-prune { system text } {\n     set text [prune_gcc_output $text]\n \n@@ -84,3 +115,82 @@ proc gcc-dg-prune { system text } {\n \n     return $text\n }\n+\n+# Utility routines.\n+\n+#\n+# search_for -- looks for a string match in a file\n+#\n+proc search_for { file pattern } {\n+    set fd [open $file r]\n+    while { [gets $fd cur_line]>=0 } {\n+\tif [string match \"*$pattern*\" $cur_line] then {\n+\t    close $fd\n+\t    return 1\n+\t}\n+    }\n+    close $fd\n+    return 0\n+}\n+\n+# Modified dg-runtest that can cycle through a list of optimization options\n+# as c-torture does.\n+proc gcc-dg-runtest { testcases default-extra-flags } {\n+    global runtests\n+\n+    foreach test $testcases {\n+\t# If we're only testing specific files and this isn't one of \n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+        }\n+\n+\t# Look for a loop within the source code - if we don't find one,\n+\t# don't pass -funroll[-all]-loops.\n+\tglobal torture_with_loops torture_without_loops\n+\tif [expr [search_for $test \"for*(\"]+[search_for $test \"while*(\"]] {\n+\t    set option_list $torture_with_loops\n+\t} else {\n+\t    set option_list $torture_without_loops\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags $option_list {\n+\t    verbose \"Testing $nshort, $flags\" 1\n+\t    dg-test $test $flags ${default-extra-flags}\n+\t}\n+    }\n+}\n+\n+# Utility for scanning compiler result, invoked via dg-final.\n+# Call pass if pattern is present, otherwise fail.\n+proc scan-assembler { testcase pattern } {\n+    global subdir\n+\n+    set fd [open [file rootname $testcase].s r]\n+    set text [read $fd]\n+    close $fd\n+\n+    if [regexp -- $pattern $text] {\n+\tpass \"$subdir/$testcase scan-assembler\"\n+    } else {\n+\tfail \"$subdir/$testcase scan-assembler\"\n+    }\n+}\n+\n+# Call pass if pattern is not present, otherwise fail.\n+proc scan-assembler-not { testcase pattern } {\n+    global subdir\n+\n+    set fd [open [file rootname $testcase].s r]\n+    set text [read $fd]\n+    close $fd\n+\n+    if ![regexp -- $pattern $text] {\n+\tpass \"$subdir/$testcase scan-assembler-not\"\n+    } else {\n+\tfail \"$subdir/$testcase scan-assembler-not\"\n+    }\n+}\n+"}]}