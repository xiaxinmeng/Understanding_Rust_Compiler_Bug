{"sha": "be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUyZGY4YmMzOGExNDY1OWY2YTU2MDRjMjIyNTJmMTdlZjJhMmE2Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-09-25T14:26:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-25T14:26:11Z"}, "message": "i386.md (frndintxf2_mask_pm): Remove.\n\n\t* config/i386/i386.md (frndintxf2_mask_pm): Remove.\n\t(frndintxf2_mask_pm_i387): Ditto.\n\t(nearbyintxf2): Rewrite expander pattern to match rintxf2.\n\tEnable for !flag_trapping_math.\n\t(nearbyint<mode>2): Enable x87 modes for !flag_trapping_math.\n\tEnable SSE modes for TARGET_SSE4_1 and expand them with round insn.\n\tChange operand 1 predicate to nonimmediate_operand.\n\t(attr \"i387_cw\"): Remove mask_pm.\n\t* config/i386/i386.h (enum ix86_stack_slot): Remove SLOT_CW_MASK_PM.\n\t(enum ix86_entity): Remove I387_MASK_PM.\n\t* config/i386/i386.c (ix86_i387_mode_needed): Do not\n\thandle I387_MASK_PM.\n\t(ix86_mode_needed): Ditto.\n\t(ix86_mode_after): Ditto.\n\t(ix86_mode_entry): Ditto.\n\t(ix86_mode_exit): Ditto.\n\t(emit_i387_cw_initialization): Do not handle I387_CW_MASK_PM.\n\nFrom-SVN: r264571", "tree": {"sha": "8876632c2b2cae7e57d3840e7d7917086e50a9e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8876632c2b2cae7e57d3840e7d7917086e50a9e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b16084d244418d5421505f09851b5adf5abc35ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16084d244418d5421505f09851b5adf5abc35ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16084d244418d5421505f09851b5adf5abc35ec"}], "stats": {"total": 118, "additions": 43, "deletions": 75}, "files": [{"sha": "b9e6ec286067456a8cf44c794230dccc2474973d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "patch": "@@ -1,3 +1,23 @@\n+2018-09-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (frndintxf2_mask_pm): Remove.\n+\t(frndintxf2_mask_pm_i387): Ditto.\n+\t(nearbyintxf2): Rewrite expander pattern to match rintxf2.\n+\tEnable for !flag_trapping_math.\n+\t(nearbyint<mode>2): Enable x87 modes for !flag_trapping_math.\n+\tEnable SSE modes for TARGET_SSE4_1 and expand them with round insn.\n+\tChange operand 1 predicate to nonimmediate_operand.\n+\t(attr \"i387_cw\"): Remove mask_pm.\n+\t* config/i386/i386.h (enum ix86_stack_slot): Remove SLOT_CW_MASK_PM.\n+\t(enum ix86_entity): Remove I387_MASK_PM.\n+\t* config/i386/i386.c (ix86_i387_mode_needed): Do not\n+\thandle I387_MASK_PM.\n+\t(ix86_mode_needed): Ditto.\n+\t(ix86_mode_after): Ditto.\n+\t(ix86_mode_entry): Ditto.\n+\t(ix86_mode_exit): Ditto.\n+\t(emit_i387_cw_initialization): Do not handle I387_CW_MASK_PM.\n+\n 2018-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* vr-values.c (vr_values::vr_values): Initialize to_remove_edges and"}, {"sha": "6c7da3d5d30333049e842861ac76ad3e7d148c6e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "patch": "@@ -18880,11 +18880,6 @@ ix86_i387_mode_needed (int entity, rtx_insn *insn)\n \treturn mode;\n       break;\n \n-    case I387_MASK_PM:\n-      if (mode == I387_CW_MASK_PM)\n-\treturn mode;\n-      break;\n-\n     default:\n       gcc_unreachable ();\n     }\n@@ -18907,7 +18902,6 @@ ix86_mode_needed (int entity, rtx_insn *insn)\n     case I387_TRUNC:\n     case I387_FLOOR:\n     case I387_CEIL:\n-    case I387_MASK_PM:\n       return ix86_i387_mode_needed (entity, insn);\n     default:\n       gcc_unreachable ();\n@@ -18968,7 +18962,6 @@ ix86_mode_after (int entity, int mode, rtx_insn *insn)\n     case I387_TRUNC:\n     case I387_FLOOR:\n     case I387_CEIL:\n-    case I387_MASK_PM:\n       return mode;\n     default:\n       gcc_unreachable ();\n@@ -19021,7 +19014,6 @@ ix86_mode_entry (int entity)\n     case I387_TRUNC:\n     case I387_FLOOR:\n     case I387_CEIL:\n-    case I387_MASK_PM:\n       return I387_CW_ANY;\n     default:\n       gcc_unreachable ();\n@@ -19056,7 +19048,6 @@ ix86_mode_exit (int entity)\n     case I387_TRUNC:\n     case I387_FLOOR:\n     case I387_CEIL:\n-    case I387_MASK_PM:\n       return I387_CW_ANY;\n     default:\n       gcc_unreachable ();\n@@ -19108,12 +19099,6 @@ emit_i387_cw_initialization (int mode)\n       slot = SLOT_CW_CEIL;\n       break;\n \n-    case I387_CW_MASK_PM:\n-      /* mask precision exception for nearbyint() */\n-      emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0020)));\n-      slot = SLOT_CW_MASK_PM;\n-      break;\n-\n     default:\n       gcc_unreachable ();\n     }\n@@ -19169,7 +19154,6 @@ ix86_emit_mode_set (int entity, int mode, int prev_mode ATTRIBUTE_UNUSED,\n     case I387_TRUNC:\n     case I387_FLOOR:\n     case I387_CEIL:\n-    case I387_MASK_PM:\n       if (mode != I387_CW_ANY\n \t  && mode != I387_CW_UNINITIALIZED)\n \temit_i387_cw_initialization (mode);"}, {"sha": "b68fc8017184b4a57174d5d58ee9be6ac689007c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "patch": "@@ -2456,7 +2456,6 @@ enum ix86_stack_slot\n   SLOT_CW_TRUNC,\n   SLOT_CW_FLOOR,\n   SLOT_CW_CEIL,\n-  SLOT_CW_MASK_PM,\n   SLOT_STV_TEMP,\n   MAX_386_STACK_LOCALS\n };\n@@ -2468,7 +2467,6 @@ enum ix86_entity\n   I387_TRUNC,\n   I387_FLOOR,\n   I387_CEIL,\n-  I387_MASK_PM,\n   MAX_386_ENTITIES\n };\n "}, {"sha": "75e2edb791cb3c4cdca1e4d8b7ecc9f1536bef56", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 56, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "patch": "@@ -144,7 +144,6 @@\n   UNSPEC_FRNDINT_FLOOR\n   UNSPEC_FRNDINT_CEIL\n   UNSPEC_FRNDINT_TRUNC\n-  UNSPEC_FRNDINT_MASK_PM\n   UNSPEC_FIST_FLOOR\n   UNSPEC_FIST_CEIL\n \n@@ -775,7 +774,7 @@\n \n ;; Defines rounding mode of an FP operation.\n \n-(define_attr \"i387_cw\" \"trunc,floor,ceil,mask_pm,uninitialized,any\"\n+(define_attr \"i387_cw\" \"trunc,floor,ceil,uninitialized,any\"\n   (const_string \"any\"))\n \n ;; Define attribute to classify add/sub insns that consumes carry flag (CF)\n@@ -16341,67 +16340,35 @@\n   DONE;\n })\n \n-;; Rounding mode control word calculation could clobber FLAGS_REG.\n-(define_insn_and_split \"frndintxf2_mask_pm\"\n+(define_expand \"nearbyintxf2\"\n   [(set (match_operand:XF 0 \"register_operand\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\")]\n-\t\t   UNSPEC_FRNDINT_MASK_PM))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\n-   && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n-{\n-  ix86_optimize_mode_switching[I387_MASK_PM] = 1;\n-\n-  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n-  operands[3] = assign_386_stack_local (HImode, SLOT_CW_MASK_PM);\n-\n-  emit_insn (gen_frndintxf2_mask_pm_i387 (operands[0], operands[1],\n-\t\t\t\t\t  operands[2], operands[3]));\n-  DONE;\n-}\n-  [(set_attr \"type\" \"frndint\")\n-   (set_attr \"i387_cw\" \"mask_pm\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"frndintxf2_mask_pm_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n-\t\t   UNSPEC_FRNDINT_MASK_PM))\n-   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n-   (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n-  \"fldcw\\t%3\\n\\tfrndint\\n\\tfclex\\n\\tfldcw\\t%2\"\n-  [(set_attr \"type\" \"frndint\")\n-   (set_attr \"i387_cw\" \"mask_pm\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_expand \"nearbyintxf2\"\n-  [(parallel [(set (match_operand:XF 0 \"register_operand\")\n-\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\")]\n-\t\t\t      UNSPEC_FRNDINT_MASK_PM))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n+\t\t   UNSPEC_FRNDINT))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\")\n+   && !flag_trapping_math\")\n \n (define_expand \"nearbyint<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n-   (use (match_operand:MODEF 1 \"register_operand\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-       || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-{\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+   (use (match_operand:MODEF 1 \"nonimmediate_operand\"))]\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+\t  || TARGET_MIX_SSE_I387)\n+    && !flag_trapping_math)\n+   || (TARGET_SSE4_1 && TARGET_SSE_MATH)\"\n+{\n+  if (TARGET_SSE4_1 && TARGET_SSE_MATH)\n+    emit_insn (gen_sse4_1_round<mode>2\n+\t       (operands[0], operands[1], GEN_INT (ROUND_MXCSR\n+\t\t\t\t\t\t   | ROUND_NO_EXC)));\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n-  emit_insn (gen_frndintxf2_mask_pm (op0, op1));\n-  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+      emit_insn (gen_nearbyintxf2 (op0, op1));\n+      emit_insn (gen_truncxf<mode>2_i387_noop_unspec (operands[0], op0));\n+    }\n   DONE;\n })\n "}, {"sha": "8b45ecf0ec534e787aca4ffd2436f074d72061e7", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2df8bc38a14659f6a5604c22252f17ef2a2a6c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=be2df8bc38a14659f6a5604c22252f17ef2a2a6c", "patch": "@@ -1818,7 +1818,6 @@ subst_stack_regs_pat (rtx_insn *insn, stack_ptr regstack, rtx pat)\n \t      case UNSPEC_FRNDINT_FLOOR:\n \t      case UNSPEC_FRNDINT_CEIL:\n \t      case UNSPEC_FRNDINT_TRUNC:\n-\t      case UNSPEC_FRNDINT_MASK_PM:\n \n \t\t/* Above insns operate on the top of the stack.  */\n "}]}