{"sha": "ebdc0d4b15c424a4a953024a71598d16bf503ea7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkYzBkNGIxNWM0MjRhNGE5NTMwMjRhNzE1OThkMTZiZjUwM2VhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-01T16:08:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-06-01T16:08:48Z"}, "message": "var-tracking.c (create_entry_value): New function.\n\n\t* var-tracking.c (create_entry_value): New function.\n\t(vt_add_function_parameter): Use it.\n\nFrom-SVN: r174534", "tree": {"sha": "292335cf2143a85c415d5ac3ef795e01360c4822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/292335cf2143a85c415d5ac3ef795e01360c4822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebdc0d4b15c424a4a953024a71598d16bf503ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdc0d4b15c424a4a953024a71598d16bf503ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdc0d4b15c424a4a953024a71598d16bf503ea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdc0d4b15c424a4a953024a71598d16bf503ea7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0699e415bc4e5ecac90580da110ee5fe14b60c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0699e415bc4e5ecac90580da110ee5fe14b60c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0699e415bc4e5ecac90580da110ee5fe14b60c38"}], "stats": {"total": 92, "additions": 41, "deletions": 51}, "files": [{"sha": "ef16a1ce5d8cb6dc4b9232cd0946865e25ed0caf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdc0d4b15c424a4a953024a71598d16bf503ea7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdc0d4b15c424a4a953024a71598d16bf503ea7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebdc0d4b15c424a4a953024a71598d16bf503ea7", "patch": "@@ -1,3 +1,8 @@\n+2011-06-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* var-tracking.c (create_entry_value): New function.\n+\t(vt_add_function_parameter): Use it.\n+\n 2011-06-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/crtfastmath.c [!__x86_64__ && __sun__ && __svr4__]:"}, {"sha": "db261c0f03d23a8091e16a2e1b27aed8acd8a4e7", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 36, "deletions": 51, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdc0d4b15c424a4a953024a71598d16bf503ea7/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdc0d4b15c424a4a953024a71598d16bf503ea7/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=ebdc0d4b15c424a4a953024a71598d16bf503ea7", "patch": "@@ -8378,6 +8378,39 @@ vt_get_decl_and_offset (rtx rtl, tree *declp, HOST_WIDE_INT *offsetp)\n   return false;\n }\n \n+/* Helper function for vt_add_function_parameter.  RTL is\n+   the expression and VAL corresponding cselib_val pointer\n+   for which ENTRY_VALUE should be created.  */\n+\n+static void\n+create_entry_value (rtx rtl, cselib_val *val)\n+{\n+  cselib_val *val2;\n+  struct elt_loc_list *el;\n+  el = (struct elt_loc_list *) ggc_alloc_cleared_atomic (sizeof (*el));\n+  el->next = val->locs;\n+  el->loc = gen_rtx_ENTRY_VALUE (GET_MODE (rtl));\n+  ENTRY_VALUE_EXP (el->loc) = rtl;\n+  el->setting_insn = get_insns ();\n+  val->locs = el;\n+  val2 = cselib_lookup_from_insn (el->loc, GET_MODE (rtl), true,\n+\t\t\t\t  VOIDmode, get_insns ());\n+  if (val2\n+      && val2 != val\n+      && val2->locs\n+      && rtx_equal_p (val2->locs->loc, el->loc))\n+    {\n+      struct elt_loc_list *el2;\n+\n+      preserve_value (val2);\n+      el2 = (struct elt_loc_list *) ggc_alloc_cleared_atomic (sizeof (*el2));\n+      el2->next = val2->locs;\n+      el2->loc = val->val_rtx;\n+      el2->setting_insn = get_insns ();\n+      val2->locs = el2;\n+    }\n+}\n+\n /* Insert function parameter PARM in IN and OUT sets of ENTRY_BLOCK.  */\n \n static void\n@@ -8501,32 +8534,8 @@ vt_add_function_parameter (tree parm)\n \t\t\t VAR_INIT_STATUS_INITIALIZED, NULL, INSERT);\n       if (dv_is_value_p (dv))\n \t{\n-\t  cselib_val *val = CSELIB_VAL_PTR (dv_as_value (dv)), *val2;\n-\t  struct elt_loc_list *el;\n-\t  el = (struct elt_loc_list *)\n-\t    ggc_alloc_cleared_atomic (sizeof (*el));\n-\t  el->next = val->locs;\n-\t  el->loc = gen_rtx_ENTRY_VALUE (GET_MODE (incoming));\n-\t  ENTRY_VALUE_EXP (el->loc) = incoming;\n-\t  el->setting_insn = get_insns ();\n-\t  val->locs = el;\n-\t  val2 = cselib_lookup_from_insn (el->loc, GET_MODE (incoming),\n-\t\t\t\t\t  true, VOIDmode, get_insns ());\n-\t  if (val2\n-\t      && val2 != val\n-\t      && val2->locs\n-\t      && rtx_equal_p (val2->locs->loc, el->loc))\n-\t    {\n-\t      struct elt_loc_list *el2;\n-\n-\t      preserve_value (val2);\n-\t      el2 = (struct elt_loc_list *)\n-\t\tggc_alloc_cleared_atomic (sizeof (*el2));\n-\t      el2->next = val2->locs;\n-\t      el2->loc = dv_as_value (dv);\n-\t      el2->setting_insn = get_insns ();\n-\t      val2->locs = el2;\n-\t    }\n+\t  cselib_val *val = CSELIB_VAL_PTR (dv_as_value (dv));\n+\t  create_entry_value (incoming, val);\n \t  if (TREE_CODE (TREE_TYPE (parm)) == REFERENCE_TYPE\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (parm))))\n \t    {\n@@ -8538,31 +8547,7 @@ vt_add_function_parameter (tree parm)\n \t      if (val)\n \t\t{\n \t\t  preserve_value (val);\n-\t\t  el = (struct elt_loc_list *)\n-\t\t    ggc_alloc_cleared_atomic (sizeof (*el));\n-\t\t  el->next = val->locs;\n-\t\t  el->loc = gen_rtx_ENTRY_VALUE (indmode);\n-\t\t  ENTRY_VALUE_EXP (el->loc) = mem;\n-\t\t  el->setting_insn = get_insns ();\n-\t\t  val->locs = el;\n-\t\t  val2 = cselib_lookup_from_insn (el->loc, GET_MODE (mem),\n-\t\t\t\t\t\t  true, VOIDmode,\n-\t\t\t\t\t\t  get_insns ());\n-\t\t  if (val2\n-\t\t      && val2 != val\n-\t\t      && val2->locs\n-\t\t      && rtx_equal_p (val2->locs->loc, el->loc))\n-\t\t    {\n-\t\t      struct elt_loc_list *el2;\n-\n-\t\t      preserve_value (val2);\n-\t\t      el2 = (struct elt_loc_list *)\n-\t\t\tggc_alloc_cleared_atomic (sizeof (*el2));\n-\t\t      el2->next = val2->locs;\n-\t\t      el2->loc = val->val_rtx;\n-\t\t      el2->setting_insn = get_insns ();\n-\t\t      val2->locs = el2;\n-\t\t    }\n+\t\t  create_entry_value (mem, val);\n \t\t}\n \t    }\n \t}"}]}