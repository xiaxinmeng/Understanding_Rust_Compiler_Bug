{"sha": "c376dbfba163068f1caeb1b7749bb74366a5efad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3NmRiZmJhMTYzMDY4ZjFjYWViMWI3NzQ5YmI3NDM2NmE1ZWZhZA==", "commit": {"author": {"name": "David Daney", "email": "ddaney@caviumnetworks.com", "date": "2009-10-29T17:39:52Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2009-10-29T17:39:52Z"}, "message": "invoke.texi (mmcount-ra-address): Document new command line option.\n\n2009-10-29  David Daney  <ddaney@caviumnetworks.com>\n\n\t* doc/invoke.texi (mmcount-ra-address): Document new command line\n\toption.\n\t* config/mips/mips.opt (mmcount-ra-address): New option.\n\t* config/mips/mips-protos.h (mips_function_profiler): Declare new\n\tfunction.\n\t* config/mips/mips.c (struct mips_frame_info): Add ra_fp_offset\n\tmember.\n\t(mips_for_each_saved_gpr_and_fpr): Set ra_fp_offset.\n\t(mips_function_profiler): Moved from FUNCTION_PROFILER, and\n\trewritten.\n\t* config/mips/mips.h (FUNCTION_PROFILER): Body of macro moved to\n\tmips_function_profiler.\n\n2009-10-29  David Daney  <ddaney@caviumnetworks.com>\n\n\t* gcc.target/mips/mips.exp (mips_option_groups): Add\n\tmcount-ra-address.\n\t* gcc.target/mips/mmcount-ra-address-1.c: New test.\n\t* gcc.target/mips/mmcount-ra-address-2.c: New test.\n\t* gcc.target/mips/mmcount-ra-address-3.c: New test.\n\nFrom-SVN: r153717", "tree": {"sha": "60e94e291058dd033915cf8b9ec971575d6b5cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60e94e291058dd033915cf8b9ec971575d6b5cae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c376dbfba163068f1caeb1b7749bb74366a5efad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c376dbfba163068f1caeb1b7749bb74366a5efad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c376dbfba163068f1caeb1b7749bb74366a5efad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c376dbfba163068f1caeb1b7749bb74366a5efad/comments", "author": null, "committer": null, "parents": [{"sha": "2b7e2984ce29a528a8a280191947742a19624b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7e2984ce29a528a8a280191947742a19624b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b7e2984ce29a528a8a280191947742a19624b0b"}], "stats": {"total": 174, "additions": 135, "deletions": 39}, "files": [{"sha": "7c6d21154d2633c7732c21b4375ed820d94b1601", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -1,3 +1,18 @@\n+2009-10-29  David Daney  <ddaney@caviumnetworks.com>\n+\n+\t* doc/invoke.texi (mmcount-ra-address): Document new command line\n+\toption.\n+\t* config/mips/mips.opt (mmcount-ra-address): New option.\n+\t* config/mips/mips-protos.h (mips_function_profiler): Declare new\n+\tfunction.\n+\t* config/mips/mips.c (struct mips_frame_info): Add ra_fp_offset\n+\tmember.\n+\t(mips_for_each_saved_gpr_and_fpr): Set ra_fp_offset.\n+\t(mips_function_profiler): Moved from FUNCTION_PROFILER, and\n+\trewritten.\n+\t* config/mips/mips.h (FUNCTION_PROFILER): Body of macro moved to\n+\tmips_function_profiler.\n+\n 2009-10-29  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR middle-end/37565"}, {"sha": "716b7acad82cfed956108cfbb5917bc65fe711a8", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -344,5 +344,6 @@ extern bool mips_eh_uses (unsigned int);\n extern bool mips_epilogue_uses (unsigned int);\n extern void mips_final_prescan_insn (rtx, rtx *, int);\n extern int mips_trampoline_code_size (void);\n+extern void mips_function_profiler (FILE *);\n \n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "c8c1dca25ce37a26cde44951b738db583513eaef", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -319,6 +319,9 @@ struct GTY(())  mips_frame_info {\n   HOST_WIDE_INT acc_sp_offset;\n   HOST_WIDE_INT cop0_sp_offset;\n \n+  /* Similar, but the value passed to _mcount.  */\n+  HOST_WIDE_INT ra_fp_offset;\n+\n   /* The offset of arg_pointer_rtx from the bottom of the frame.  */\n   HOST_WIDE_INT arg_pointer_offset;\n \n@@ -9666,6 +9669,9 @@ mips_for_each_saved_gpr_and_fpr (HOST_WIDE_INT sp_offset,\n   for (regno = GP_REG_LAST; regno >= GP_REG_FIRST; regno--)\n     if (BITSET_P (cfun->machine->frame.mask, regno - GP_REG_FIRST))\n       {\n+\t/* Record the ra offset for use by mips_function_profiler.  */\n+\tif (regno == RETURN_ADDR_REGNUM)\n+\t  cfun->machine->frame.ra_fp_offset = offset + sp_offset;\n \tmips_save_restore_reg (word_mode, regno, offset, fn);\n \toffset -= UNITS_PER_WORD;\n       }\n@@ -16138,6 +16144,59 @@ mips_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   emit_insn (gen_add3_insn (end_addr, addr, GEN_INT (TRAMPOLINE_SIZE)));\n   emit_insn (gen_clear_cache (addr, end_addr));\n }\n+\n+/* Implement FUNCTION_PROFILER.  */\n+\n+void mips_function_profiler (FILE *file)\n+{\n+  if (TARGET_MIPS16)\n+    sorry (\"mips16 function profiling\");\n+  if (TARGET_LONG_CALLS)\n+    {\n+      /* For TARGET_LONG_CALLS use $3 for the address of _mcount.  */\n+      if (Pmode == DImode)\n+\tfprintf (file, \"\\tdla\\t%s,_mcount\\n\", reg_names[3]);\n+      else\n+\tfprintf (file, \"\\tla\\t%s,_mcount\\n\", reg_names[3]);\n+    }\n+  mips_push_asm_switch (&mips_noat);\n+  fprintf (file, \"\\tmove\\t%s,%s\\t\\t# save current return address\\n\",\n+\t   reg_names[AT_REGNUM], reg_names[RETURN_ADDR_REGNUM]);\n+  /* _mcount treats $2 as the static chain register.  */\n+  if (cfun->static_chain_decl != NULL)\n+    fprintf (file, \"\\tmove\\t%s,%s\\n\", reg_names[2],\n+\t     reg_names[STATIC_CHAIN_REGNUM]);\n+  if (TARGET_MCOUNT_RA_ADDRESS)\n+    {\n+      /* If TARGET_MCOUNT_RA_ADDRESS load $12 with the address of the\n+\t ra save location.  */\n+      if (cfun->machine->frame.ra_fp_offset == 0)\n+\t/* ra not saved, pass zero.  */\n+\tfprintf (file, \"\\tmove\\t%s,%s\\n\", reg_names[12], reg_names[0]);\n+      else\n+\tfprintf (file, \"\\t%s\\t%s,\" HOST_WIDE_INT_PRINT_DEC \"(%s)\\n\",\n+\t\t Pmode == DImode ? \"dla\" : \"la\", reg_names[12],\n+\t\t cfun->machine->frame.ra_fp_offset,\n+\t\t reg_names[STACK_POINTER_REGNUM]);\n+    }\n+  if (!TARGET_NEWABI)\n+    fprintf (file,\n+\t     \"\\t%s\\t%s,%s,%d\\t\\t# _mcount pops 2 words from  stack\\n\",\n+\t     TARGET_64BIT ? \"dsubu\" : \"subu\",\n+\t     reg_names[STACK_POINTER_REGNUM],\n+\t     reg_names[STACK_POINTER_REGNUM],\n+\t     Pmode == DImode ? 16 : 8);\n+\n+  if (TARGET_LONG_CALLS)\n+    fprintf (file, \"\\tjalr\\t%s\\n\", reg_names[3]);\n+  else\n+    fprintf (file, \"\\tjal\\t_mcount\\n\");\n+  mips_pop_asm_switch (&mips_noat);\n+  /* _mcount treats $2 as the static chain register.  */\n+  if (cfun->static_chain_decl != NULL)\n+    fprintf (file, \"\\tmove\\t%s,%s\\n\", reg_names[STATIC_CHAIN_REGNUM],\n+\t     reg_names[2]);\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP"}, {"sha": "282970890f8da5c790eb40759c9eb6b87af5ff11", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -2372,44 +2372,7 @@ typedef struct mips_args {\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n-#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_MIPS16)\t\t\t\t\t\t\t\\\n-    sorry (\"mips16 function profiling\");\t\t\t\t\\\n-  if (TARGET_LONG_CALLS)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      /*  For TARGET_LONG_CALLS use $3 for the address of _mcount.  */\t\\\n-      if (Pmode == DImode)\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tdla\\t%s,_mcount\\n\", reg_names[GP_REG_FIRST + 3]); \\\n-      else\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tla\\t%s,_mcount\\n\", reg_names[GP_REG_FIRST + 3]); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  mips_push_asm_switch (&mips_noat);\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tmove\\t%s,%s\\t\\t# save current return address\\n\",\t\\\n-\t   reg_names[AT_REGNUM], reg_names[RETURN_ADDR_REGNUM]);\t\\\n-  /* _mcount treats $2 as the static chain register.  */\t\t\\\n-  if (cfun->static_chain_decl != NULL)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tmove\\t%s,%s\\n\", reg_names[2],\t\t\t\\\n-\t     reg_names[STATIC_CHAIN_REGNUM]);\t\t\t\t\\\n-  if (!TARGET_NEWABI)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t       \"\\t%s\\t%s,%s,%d\\t\\t# _mcount pops 2 words from  stack\\n\", \\\n-\t       TARGET_64BIT ? \"dsubu\" : \"subu\",\t\t\t\t\\\n-\t       reg_names[STACK_POINTER_REGNUM],\t\t\t\t\\\n-\t       reg_names[STACK_POINTER_REGNUM],\t\t\t\t\\\n-\t       Pmode == DImode ? 16 : 8);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_LONG_CALLS)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tjalr\\t%s\\n\", reg_names[GP_REG_FIRST + 3]);\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tjal\\t_mcount\\n\");\t\t\t\t\t\\\n-  mips_pop_asm_switch (&mips_noat);\t\t\t\t\t\\\n-  /* _mcount treats $2 as the static chain register.  */\t\t\\\n-  if (cfun->static_chain_decl != NULL)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tmove\\t%s,%s\\n\", reg_names[STATIC_CHAIN_REGNUM],\t\\\n-\t     reg_names[2]);\t\t\t\t\t\t\\\n-}\n+#define FUNCTION_PROFILER(FILE, LABELNO) mips_function_profiler ((FILE))\n \n /* The profiler preserves all interesting registers, including $31.  */\n #define MIPS_SAVE_REG_FOR_PROFILING_P(REGNO) false"}, {"sha": "188d5e1700690f5d4acdd7d338ebe0f53b81319f", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -208,6 +208,10 @@ mlong64\n Target Report RejectNegative Mask(LONG64)\n Use a 64-bit long type\n \n+mmcount-ra-address\n+Target Report Var(TARGET_MCOUNT_RA_ADDRESS)\n+Pass the address of the ra save location to _mcount in $12\n+\n mmemcpy\n Target Report Mask(MEMCPY)\n Don't optimize block moves"}, {"sha": "93d87ccae667deebfcd12943211d6ad9254ae31c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -709,7 +709,7 @@ Objective-C and Objective-C++ Dialects}.\n -mbranch-cost=@var{num}  -mbranch-likely  -mno-branch-likely @gol\n -mfp-exceptions -mno-fp-exceptions @gol\n -mvr4130-align -mno-vr4130-align -msynci -mno-synci @gol\n--mrelax-pic-calls -mno-relax-pic-calls}\n+-mrelax-pic-calls -mno-relax-pic-calls -mmcount-ra-address}\n \n @emph{MMIX Options}\n @gccoptlist{-mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu @gol\n@@ -14208,6 +14208,27 @@ an assembler and a linker that supports the @code{.reloc} assembly\n directive and @code{-mexplicit-relocs} is in effect.  With\n @code{-mno-explicit-relocs}, this optimization can be performed by the\n assembler and the linker alone without help from the compiler.\n+\n+@item -mmcount-ra-address\n+@itemx -mno-mcount-ra-address\n+@opindex mmcount-ra-address\n+@opindex mno-mcount-ra-address\n+Emit (do not emit) code that allows @code{_mcount} to modify the\n+colling function's return address.  When enabled, this option extends\n+the usual @code{_mcount} interface with a new @var{ra-address}\n+parameter, which has type @code{intptr_t *} and is passed in register\n+@code{$12}.  @code{_mcount} can then modify the return address by\n+doing both of the following:\n+@itemize\n+@item\n+Returning the new address in register @code{$31}.\n+@item\n+Storing the new address in @code{*@var{ra-address}},\n+if @var{ra-address} is nonnull.\n+@end itemize\n+\n+The default is @option{-mno-mcount-ra-address}.\n+\n @end table\n \n @node MMIX Options"}, {"sha": "2617493687831f7f62f12f538d057736e7fc6cec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -1,3 +1,11 @@\n+2009-10-29  David Daney  <ddaney@caviumnetworks.com>\n+\n+\t* gcc.target/mips/mips.exp (mips_option_groups): Add\n+\tmcount-ra-address.\n+\t* gcc.target/mips/mmcount-ra-address-1.c: New test.\n+\t* gcc.target/mips/mmcount-ra-address-2.c: New test.\n+\t* gcc.target/mips/mmcount-ra-address-3.c: New test.\n+\n 2009-10-29  Michael Matz  <matz@suse.de>\n \n \t* gcc.target/i386/sse-recip.c: Use fabsf instead of != ."}, {"sha": "02e031cd15c9741cc1b7826bef1b4f37e3eea61a", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -263,6 +263,7 @@ foreach option {\n     sym32\n     synci\n     relax-pic-calls\n+    mcount-ra-address\n } {\n     lappend mips_option_groups $option \"-m(no-|)$option\"\n }"}, {"sha": "cf5b044d6363ddd3de117df795e844891efc2a74", "filename": "gcc/testsuite/gcc.target/mips/mmcount-ra-address-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-1.c?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -pg -mmcount-ra-address -mabi=64\" } */\n+/* { dg-final { scan-assembler \"\\tmove\\t\\\\\\$12,\\\\\\$0\" } } */\n+int bazl(int i)\n+{\n+  return i + 2;\n+}"}, {"sha": "bef9dd93d804f9e80258edfa0b80c3dcb375413b", "filename": "gcc/testsuite/gcc.target/mips/mmcount-ra-address-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-2.c?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -pg -mmcount-ra-address -mabi=64\" } */\n+/* { dg-final { scan-assembler \"\\tdla\\t\\\\\\$12,8\\\\(\\\\\\$sp\\\\)\" } } */\n+int foo (int);\n+int bar (int i)\n+{\n+  return foo (i) + 2;\n+}"}, {"sha": "59007e6ef3cc47c5f4e766acd48b91306b381200", "filename": "gcc/testsuite/gcc.target/mips/mmcount-ra-address-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c376dbfba163068f1caeb1b7749bb74366a5efad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmmcount-ra-address-3.c?ref=c376dbfba163068f1caeb1b7749bb74366a5efad", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -pg -mmcount-ra-address -mabi=64\" } */\n+/* { dg-final { scan-assembler \"\\tdla\\t\\\\\\$12,200008\\\\(\\\\\\$sp\\\\)\" } } */\n+int foo (int *);\n+int bar(int i)\n+{\n+  int big[50000];\n+  return foo (big) + 2;\n+}"}]}