{"sha": "627a2f592382c96daaa3bce4a22245f0614892d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3YTJmNTkyMzgyYzk2ZGFhYTNiY2U0YTIyMjQ1ZjA2MTQ4OTJkMA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-11-14T20:47:44Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-11-14T20:47:44Z"}, "message": "Implement P0504R0 (Revisiting in-place tag types for any/optional/variant).\n\nImplement P0504R0 (Revisiting in-place tag types for\nany/optional/variant).\n* include/std/any (any(_ValueType&& __value)): Constrain\nthe __is_in_place_type with the decayed type.\n(make_any): Adjust to use the new tag type.\n* include/std/utility (in_place_tag): Remove.\n(in_place_t): Turn into a non-reference tag type.\n(__in_place, __in_place_type, __in_place_index): Remove.\n(in_place): Turn into an inline variable of non-reference\ntag type.\n(in_place<_Tp>): Remove.\n(in_place_index<_Idx>): Remove.\n(in_place_type_t): New.\n(in_place_type): Turn into a variable template of non-reference\ntype.\n(in_place_index_t): New.\n(in_place_index): Turn into a variable template of non-reference\ntype.\n* include/std/variant\n(_Variant_storage(in_place_index_t<_Np>, _Args&&...)): Adjust to\nuse the new tag type.\n(_Union(in_place_index_t<0>, _Args&&...)): Likewise.\n(_Union(in_place_index_t<_Np>, _Args&&...)): Likewise.\n(_Variant_base()): Likewise.\n(variant(_Tp&&)): Likewise.\n(variant(in_place_type_t<_Tp>, _Args&&...)): Likewise.\n(variant(in_place_type_t<_Tp>, initializer_list<_Up>,\n_Args&&...)): Likewise.\n(variant(in_place_index_t<_Np>, _Args&&...)): Likewise.\n(variant(in_place_index_t<_Np>, initializer_list<_Up>,\n_Args&&...)): Likewise\n(variant(allocator_arg_t, const _Alloc&)): Likewise.\n(variant(allocator_arg_t, const _Alloc&, _Tp&&)): Likewise.\n(variant(allocator_arg_t, const _Alloc&, in_place_type_t<_Tp>,\n_Args&&...)): Likewise.\n(variant(allocator_arg_t, const _Alloc&, in_place_type_t<_Tp>,\ninitializer_list<_Up>, _Args&&...)): Likewise.\n(variant(allocator_arg_t, const _Alloc&, in_place_index_t<_Np>,\n_Args&&...)): Likewise.\n(variant(allocator_arg_t, const _Alloc&, in_place_index_t<_Np>,\ninitializer_list<_Up>, _Args&&...)): Likewise.\n(emplace(_Args&&...)): Likewise.\n(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n* testsuite/20_util/any/cons/explicit.cc: Likewise.\n* testsuite/20_util/any/cons/in_place.cc: Likewise.\n* testsuite/20_util/any/requirements.cc: Add tests to\ncheck that any is not constructible from the new in_place_type_t\nof any value category.\n* testsuite/20_util/in_place/requirements.cc: Adjust to\nuse the new tag type.\n* testsuite/20_util/variant/compile.cc: Likewise.\n* testsuite/20_util/variant/run.cc: Likewise.\n\nFrom-SVN: r242401", "tree": {"sha": "ff762da0e37a6eb4da26f6b67b3cb98d698dd274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff762da0e37a6eb4da26f6b67b3cb98d698dd274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/627a2f592382c96daaa3bce4a22245f0614892d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627a2f592382c96daaa3bce4a22245f0614892d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627a2f592382c96daaa3bce4a22245f0614892d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627a2f592382c96daaa3bce4a22245f0614892d0/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb9a772e9287057d8c20fc04c91e716ecff36fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb9a772e9287057d8c20fc04c91e716ecff36fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb9a772e9287057d8c20fc04c91e716ecff36fe"}], "stats": {"total": 260, "additions": 167, "deletions": 93}, "files": [{"sha": "fd309713686a711f1225dc2e7414fe2aae6469eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -1,3 +1,58 @@\n+2016-11-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement P0504R0 (Revisiting in-place tag types for\n+\tany/optional/variant).\n+\t* include/std/any (any(_ValueType&& __value)): Constrain\n+\tthe __is_in_place_type with the decayed type.\n+\t(make_any): Adjust to use the new tag type.\n+\t* include/std/utility (in_place_tag): Remove.\n+\t(in_place_t): Turn into a non-reference tag type.\n+\t(__in_place, __in_place_type, __in_place_index): Remove.\n+\t(in_place): Turn into an inline variable of non-reference\n+\ttag type.\n+\t(in_place<_Tp>): Remove.\n+\t(in_place_index<_Idx>): Remove.\n+\t(in_place_type_t): New.\n+\t(in_place_type): Turn into a variable template of non-reference\n+\ttype.\n+\t(in_place_index_t): New.\n+\t(in_place_index): Turn into a variable template of non-reference\n+\ttype.\n+\t* include/std/variant\n+\t(_Variant_storage(in_place_index_t<_Np>, _Args&&...)): Adjust to\n+\tuse the new tag type.\n+\t(_Union(in_place_index_t<0>, _Args&&...)): Likewise.\n+\t(_Union(in_place_index_t<_Np>, _Args&&...)): Likewise.\n+\t(_Variant_base()): Likewise.\n+\t(variant(_Tp&&)): Likewise.\n+\t(variant(in_place_type_t<_Tp>, _Args&&...)): Likewise.\n+\t(variant(in_place_type_t<_Tp>, initializer_list<_Up>,\n+\t_Args&&...)): Likewise.\n+\t(variant(in_place_index_t<_Np>, _Args&&...)): Likewise.\n+\t(variant(in_place_index_t<_Np>, initializer_list<_Up>,\n+\t_Args&&...)): Likewise\n+\t(variant(allocator_arg_t, const _Alloc&)): Likewise.\n+\t(variant(allocator_arg_t, const _Alloc&, _Tp&&)): Likewise.\n+\t(variant(allocator_arg_t, const _Alloc&, in_place_type_t<_Tp>,\n+\t_Args&&...)): Likewise.\n+\t(variant(allocator_arg_t, const _Alloc&, in_place_type_t<_Tp>,\n+\tinitializer_list<_Up>, _Args&&...)): Likewise.\n+\t(variant(allocator_arg_t, const _Alloc&, in_place_index_t<_Np>,\n+\t_Args&&...)): Likewise.\n+\t(variant(allocator_arg_t, const _Alloc&, in_place_index_t<_Np>,\n+\tinitializer_list<_Up>, _Args&&...)): Likewise.\n+\t(emplace(_Args&&...)): Likewise.\n+\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* testsuite/20_util/any/cons/explicit.cc: Likewise.\n+\t* testsuite/20_util/any/cons/in_place.cc: Likewise.\n+\t* testsuite/20_util/any/requirements.cc: Add tests to\n+\tcheck that any is not constructible from the new in_place_type_t\n+\tof any value category.\n+\t* testsuite/20_util/in_place/requirements.cc: Adjust to\n+\tuse the new tag type.\n+\t* testsuite/20_util/variant/compile.cc: Likewise.\n+\t* testsuite/20_util/variant/run.cc: Likewise.\n+\n 2016-11-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tUse constexpr addressof in optional, SFINAE housekeeping"}, {"sha": "ded2bb275222f27d2e3cad25456e044db15f466d", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -179,7 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n               __any_constructible_t<_Tp, _ValueType&&> = true,\n-\t      enable_if_t<!__is_in_place_type<_ValueType>::value, bool> = true>\n+\t      enable_if_t<!__is_in_place_type<_Tp>::value, bool> = true>\n       any(_ValueType&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n@@ -191,7 +191,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      typename _Mgr = _Manager<_Tp>,\n               enable_if_t<__and_<is_copy_constructible<_Tp>,\n \t\t\t\t __not_<is_constructible<_Tp, _ValueType&&>>,\n-\t\t\t         __not_<__is_in_place_type<_ValueType>>>::value,\n+\t\t\t         __not_<__is_in_place_type<_Tp>>>::value,\n \t\t\t  bool> = false>\n       any(_ValueType&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n@@ -423,14 +423,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp, typename... _Args>\n     any make_any(_Args&&... __args)\n     {\n-      return any(in_place<_Tp>, std::forward<_Args>(__args)...);\n+      return any(in_place_type<_Tp>, std::forward<_Args>(__args)...);\n     }\n \n   /// Create an any holding a @c _Tp constructed from @c __il and @c __args.\n   template <typename _Tp, typename _Up, typename... _Args>\n     any make_any(initializer_list<_Up> __il, _Args&&... __args)\n     {\n-      return any(in_place<_Tp>, __il, std::forward<_Args>(__args)...);\n+      return any(in_place_type<_Tp>, __il, std::forward<_Args>(__args)...);\n     }\n \n   /**"}, {"sha": "2ca52fe699ae10f271a693667c5e76028c074c2a", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -336,25 +336,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L\n \n-  struct in_place_tag {\n-    in_place_tag() = delete;\n+  struct in_place_t {\n+    explicit in_place_t() = default;\n   };\n \n-  struct __in_place;\n-  template<typename _Tp> struct __in_place_type;\n-  template<size_t _Idx> struct __in_place_index;\n-\n-  using in_place_t = in_place_tag(&)(__in_place*);\n-  template <class _Tp>\n-    using in_place_type_t = in_place_tag(&)(__in_place_type<_Tp>*);\n-  template <int _Idx>\n-    using in_place_index_t = in_place_tag(&)(__in_place_index<_Idx>*);\n-\n-  inline in_place_tag in_place(__in_place*) {terminate();}\n-  template <class _Tp>\n-    in_place_tag in_place(__in_place_type<_Tp>*) {terminate();}\n-  template <size_t _Idx>\n-    in_place_tag in_place(__in_place_index<_Idx>*) {terminate();}\n+  inline constexpr in_place_t in_place{};\n+\n+  template<typename _Tp> struct in_place_type_t\n+  {\n+    explicit in_place_type_t() = default;\n+  };\n+\n+  template<typename _Tp>\n+    inline constexpr in_place_type_t<_Tp> in_place_type{};\n+\n+  template<size_t _Idx> struct in_place_index_t\n+  {\n+    explicit in_place_index_t() = default;\n+  };\n+\n+  template<size_t _Idx>\n+    inline constexpr in_place_index_t<_Idx> in_place_index{};\n \n   template<typename>\n     struct __is_in_place_type_impl : false_type"}, {"sha": "0d5fa56670b909f4352a61a917d4bd7994db3e3a", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -302,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<size_t _Np, typename... _Args>\n \tconstexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)\n-\t: _M_union(in_place<_Np>, std::forward<_Args>(__args)...)\n+\t: _M_union(in_place_index<_Np>, std::forward<_Args>(__args)...)\n \t{ }\n \n       ~_Variant_storage() = default;\n@@ -320,13 +320,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \ttemplate<typename... _Args>\n \t  constexpr _Union(in_place_index_t<0>, _Args&&... __args)\n-\t  : _M_first(in_place<0>, std::forward<_Args>(__args)...)\n+\t  : _M_first(in_place_index<0>, std::forward<_Args>(__args)...)\n \t  { }\n \n \ttemplate<size_t _Np, typename... _Args,\n \t\t typename = enable_if_t<0 < _Np && _Np < sizeof...(_Rest) + 1>>\n \t  constexpr _Union(in_place_index_t<_Np>, _Args&&... __args)\n-\t  : _M_rest(in_place<_Np - 1>, std::forward<_Args>(__args)...)\n+\t  : _M_rest(in_place_index<_Np - 1>, std::forward<_Args>(__args)...)\n \t  { }\n \n \t_Uninitialized<__storage<_First>> _M_first;\n@@ -361,7 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Variant_base()\n       noexcept(is_nothrow_default_constructible_v<\n \t\t variant_alternative_t<0, variant<_Types...>>>)\n-      : _Variant_base(in_place<0>) { }\n+      : _Variant_base(in_place_index<0>) { }\n \n       _Variant_base(const _Variant_base& __rhs)\n       : _Storage(), _M_index(__rhs._M_index)\n@@ -1018,15 +1018,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconstexpr\n \tvariant(_Tp&& __t)\n \tnoexcept(is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp&&>)\n-\t: variant(in_place<__accepted_index<_Tp&&>>, std::forward<_Tp>(__t))\n+\t: variant(in_place_index<__accepted_index<_Tp&&>>, std::forward<_Tp>(__t))\n \t{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }\n \n       template<typename _Tp, typename... _Args,\n \t       typename = enable_if_t<__exactly_once<_Tp>\n \t\t\t  && is_constructible_v<_Tp, _Args&&...>>>\n \tconstexpr explicit\n \tvariant(in_place_type_t<_Tp>, _Args&&... __args)\n-\t: variant(in_place<__index_of<_Tp>>, std::forward<_Args>(__args)...)\n+\t: variant(in_place_index<__index_of<_Tp>>, std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n       template<typename _Tp, typename _Up, typename... _Args,\n@@ -1036,7 +1036,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconstexpr explicit\n \tvariant(in_place_type_t<_Tp>, initializer_list<_Up> __il,\n \t\t_Args&&... __args)\n-\t: variant(in_place<__index_of<_Tp>>, __il,\n+\t: variant(in_place_index<__index_of<_Tp>>, __il,\n \t\t  std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n@@ -1045,7 +1045,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t is_constructible_v<__to_type<_Np>, _Args&&...>>>\n \tconstexpr explicit\n \tvariant(in_place_index_t<_Np>, _Args&&... __args)\n-\t: _Base(in_place<_Np>, std::forward<_Args>(__args)...),\n+\t: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n@@ -1055,15 +1055,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconstexpr explicit\n \tvariant(in_place_index_t<_Np>, initializer_list<_Up> __il,\n \t\t_Args&&... __args)\n-\t: _Base(in_place<_Np>, __il, std::forward<_Args>(__args)...),\n+\t: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n       template<typename _Alloc,\n \t       typename = enable_if_t<\n \t\t __is_uses_allocator_constructible_v<__to_type<0>, _Alloc>>>\n \tvariant(allocator_arg_t, const _Alloc& __a)\n-\t: variant(allocator_arg, __a, in_place<0>)\n+\t: variant(allocator_arg, __a, in_place_index<0>)\n \t{ }\n \n       template<typename _Alloc,\n@@ -1091,7 +1091,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   __accepted_type<_Tp&&>, _Alloc, _Tp&&>\n \t\t && !is_same_v<decay_t<_Tp>, variant>, variant&>>\n \tvariant(allocator_arg_t, const _Alloc& __a, _Tp&& __t)\n-\t: variant(allocator_arg, __a, in_place<__accepted_index<_Tp&&>>,\n+\t: variant(allocator_arg, __a, in_place_index<__accepted_index<_Tp&&>>,\n \t\t  std::forward<_Tp>(__t))\n \t{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }\n \n@@ -1102,7 +1102,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _Tp, _Alloc, _Args&&...>>>\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_type_t<_Tp>,\n \t\t_Args&&... __args)\n-\t: variant(allocator_arg, __a, in_place<__index_of<_Tp>>,\n+\t: variant(allocator_arg, __a, in_place_index<__index_of<_Tp>>,\n \t\t  std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n@@ -1113,7 +1113,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _Tp, _Alloc, initializer_list<_Up>&, _Args&&...>>>\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_type_t<_Tp>,\n \t\tinitializer_list<_Up> __il, _Args&&... __args)\n-\t: variant(allocator_arg, __a, in_place<__index_of<_Tp>>, __il,\n+\t: variant(allocator_arg, __a, in_place_index<__index_of<_Tp>>, __il,\n \t\t  std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n@@ -1123,7 +1123,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   __to_type<_Np>, _Alloc, _Args&&...>>>\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_index_t<_Np>,\n \t\t_Args&&... __args)\n-\t: _Base(__a, in_place<_Np>, std::forward<_Args>(__args)...),\n+\t: _Base(__a, in_place_index<_Np>, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n@@ -1133,7 +1133,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   __to_type<_Np>, _Alloc, initializer_list<_Up>&, _Args&&...>>>\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_index_t<_Np>,\n \t\tinitializer_list<_Up> __il, _Args&&... __args)\n-\t: _Base(__a, in_place<_Np>, __il, std::forward<_Args>(__args)...),\n+\t: _Base(__a, in_place_index<_Np>, __il, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n@@ -1188,7 +1188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->~variant();\n \t  __try\n \t    {\n-\t      ::new (this) variant(in_place<_Np>,\n+\t      ::new (this) variant(in_place_index<_Np>,\n \t\t\t\t   std::forward<_Args>(__args)...);\n \t    }\n \t  __catch (...)\n@@ -1207,7 +1207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->~variant();\n \t  __try\n \t    {\n-\t      ::new (this) variant(in_place<_Np>, __il,\n+\t      ::new (this) variant(in_place_index<_Np>, __il,\n \t\t\t\t   std::forward<_Args>(__args)...);\n \t    }\n \t  __catch (...)"}, {"sha": "f0d64dbe3c748ef6671864e939b32fc5796853da", "filename": "libstdc++-v3/testsuite/20_util/any/cons/explicit.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fexplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fexplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fexplicit.cc?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -24,7 +24,7 @@\n \n int main()\n {\n-  std::any a = {std::in_place<int>, 42}; // { dg-error \"converting\" }\n-  std::any a2 =\n-    {std::in_place<std::vector<int>>, {42, 666}}; // { dg-error \"converting\" }  \n+  std::any a = {std::in_place_type<int>, 42}; // { dg-error \"converting\" }\n+  std::any a2 = {std::in_place_type<std::vector<int>>,\n+\t\t {42, 666}}; // { dg-error \"converting\" }\n }"}, {"sha": "374a10a61faf061bb058597681d26ae09aab1b7c", "filename": "libstdc++-v3/testsuite/20_util/any/cons/in_place.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -36,30 +36,30 @@ struct combined {\n int main()\n {\n   const int i = 42;\n-  std::any o(std::in_place<int>, i);\n+  std::any o(std::in_place_type<int>, i);\n   int& i2 = std::any_cast<int&>(o);\n   VERIFY( i2 == 42 );\n   VERIFY( &i2 != &i );\n-  std::any o2(std::in_place<std::tuple<int, int>>, 1, 2);\n+  std::any o2(std::in_place_type<std::tuple<int, int>>, 1, 2);\n   std::tuple<int, int>& t = std::any_cast<std::tuple<int, int>&>(o2);\n   VERIFY( std::get<0>(t) == 1 && std::get<1>(t) == 2);\n-  std::any o3(std::in_place<std::vector<int>>, {42, 666});\n+  std::any o3(std::in_place_type<std::vector<int>>, {42, 666});\n   std::vector<int>& v = std::any_cast<std::vector<int>&>(o3);\n   VERIFY(v[0] == 42 && v[1] == 666);\n-  std::any o4(std::in_place<combined>, {42, 666});\n+  std::any o4(std::in_place_type<combined>, {42, 666});\n   combined& c = std::any_cast<combined&>(o4);\n   VERIFY(c.v[0] == 42 && c.v[1] == 666\n \t && std::get<0>(c.t) == 0 && std::get<1>(c.t) == 0 );\n-  std::any o5(std::in_place<combined>, {1, 2}, 3, 4);\n+  std::any o5(std::in_place_type<combined>, {1, 2}, 3, 4);\n   combined& c2 = std::any_cast<combined&>(o5);\n   VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n \t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n-  std::any o6(std::in_place<int&>, i);\n+  std::any o6(std::in_place_type<int&>, i);\n   VERIFY(o6.type() == o.type());\n-  std::any o7(std::in_place<void()>, nullptr);\n-  std::any o8(std::in_place<void(*)()>, nullptr);\n+  std::any o7(std::in_place_type<void()>, nullptr);\n+  std::any o8(std::in_place_type<void(*)()>, nullptr);\n   VERIFY(o7.type() == o8.type());\n-  std::any o9(std::in_place<char(&)[42]>, nullptr);\n-  std::any o10(std::in_place<char*>, nullptr);\n+  std::any o9(std::in_place_type<char(&)[42]>, nullptr);\n+  std::any o10(std::in_place_type<char*>, nullptr);\n   VERIFY(o9.type() == o10.type());\n }"}, {"sha": "80ab2a630f159d6d61bef3227bcc8dd694cd0f67", "filename": "libstdc++-v3/testsuite/20_util/any/requirements.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -42,3 +42,15 @@ struct NoDefaultCtor\n \n static_assert(!std::is_constructible<any,\n \t      std::in_place_type_t<NoDefaultCtor>>::value);\n+\n+static_assert(!std::is_constructible<any,\n+\t      std::in_place_type_t<NoDefaultCtor>&>::value);\n+\n+static_assert(!std::is_constructible<any,\n+\t      std::in_place_type_t<NoDefaultCtor>&&>::value);\n+\n+static_assert(!std::is_constructible<any,\n+\t      const std::in_place_type_t<NoDefaultCtor>&>::value);\n+\n+static_assert(!std::is_constructible<any,\n+\t      const std::in_place_type_t<NoDefaultCtor>&&>::value);"}, {"sha": "a31a1533ee8b6592e67fea7402469d367a5a4e62", "filename": "libstdc++-v3/testsuite/20_util/in_place/requirements.cc", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fin_place%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fin_place%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fin_place%2Frequirements.cc?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -32,16 +32,21 @@ char f(in_place_index_t<0>);\n unsigned int f(in_place_index_t<1>);\n int f(in_place_t);\n \n-static_assert(std::is_same<decltype(f(in_place_t(std::in_place))), int>::value);\n-static_assert(std::is_same<decltype(f(std::in_place<float>)), float>::value);\n-static_assert(std::is_same<decltype(f(std::in_place<double>)), double>::value);\n-static_assert(std::is_same<decltype(f(std::in_place<0>)), char>::value);\n-static_assert(std::is_same<decltype(f(std::in_place<1>)), unsigned int>::value);\n+static_assert(std::is_same<decltype(f(std::in_place)), int>::value);\n+static_assert(std::is_same<decltype(f(std::in_place_type<float>)),\n+\t      float>::value);\n+static_assert(std::is_same<decltype(f(std::in_place_type<double>)),\n+\t      double>::value);\n+static_assert(std::is_same<decltype(f(std::in_place_index<0>)), char>::value);\n+static_assert(std::is_same<decltype(f(std::in_place_index<1>)),\n+\t      unsigned int>::value);\n \n template <class T, class... Args> float h(in_place_type_t<T>, Args&&...);\n template <size_t N, class... Args> int h(in_place_index_t<N>, Args&&...);\n template <class T> double h(in_place_t, T&&);\n \n static_assert(std::is_same<decltype(h(std::in_place, 1)), double>::value);\n-static_assert(std::is_same<decltype(h(std::in_place<float>, 1)), float>::value);\n-static_assert(std::is_same<decltype(h(std::in_place<0>, 1)), int>::value);\n+static_assert(std::is_same<decltype(h(std::in_place_type<float>, 1)),\n+\t      float>::value);\n+static_assert(std::is_same<decltype(h(std::in_place_index<0>, 1)),\n+\t      int>::value);"}, {"sha": "08de71e7cceaba31a1a91a3c6efc6ca533629bfb", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -107,14 +107,14 @@ void arbitrary_ctor()\n \n void in_place_index_ctor()\n {\n-  variant<string, string> a(in_place<0>, \"a\");\n-  variant<string, string> b(in_place<1>, {'a'});\n+  variant<string, string> a(in_place_index<0>, \"a\");\n+  variant<string, string> b(in_place_index<1>, {'a'});\n }\n \n void in_place_type_ctor()\n {\n-  variant<int, string, int> a(in_place<string>, \"a\");\n-  variant<int, string, int> b(in_place<string>, {'a'});\n+  variant<int, string, int> a(in_place_type<string>, \"a\");\n+  variant<int, string, int> b(in_place_type<string>, {'a'});\n   static_assert(!is_constructible_v<variant<string, string>, in_place_type_t<string>, const char*>, \"\");\n }\n \n@@ -136,18 +136,18 @@ void uses_alloc_ctors()\n     static_assert(!is_constructible_v<variant<string, string>, allocator_arg_t, std::allocator<char>, const char*>, \"\");\n   }\n   {\n-    variant<string, int> b(allocator_arg, alloc, in_place<0>, \"a\");\n-    variant<string, string> c(allocator_arg, alloc, in_place<1>, \"a\");\n+    variant<string, int> b(allocator_arg, alloc, in_place_index<0>, \"a\");\n+    variant<string, string> c(allocator_arg, alloc, in_place_index<1>, \"a\");\n   }\n   {\n-    variant<string, int> b(allocator_arg, alloc, in_place<0>, {'a'});\n-    variant<string, string> c(allocator_arg, alloc, in_place<1>, {'a'});\n+    variant<string, int> b(allocator_arg, alloc, in_place_index<0>, {'a'});\n+    variant<string, string> c(allocator_arg, alloc, in_place_index<1>, {'a'});\n   }\n   {\n-    variant<int, string, int> b(allocator_arg, alloc, in_place<string>, \"a\");\n+    variant<int, string, int> b(allocator_arg, alloc, in_place_type<string>, \"a\");\n   }\n   {\n-    variant<int, string, int> b(allocator_arg, alloc, in_place<string>, {'a'});\n+    variant<int, string, int> b(allocator_arg, alloc, in_place_type<string>, {'a'});\n   }\n }\n \n@@ -371,13 +371,13 @@ void test_constexpr()\n {\n   constexpr variant<int> a;\n   static_assert(holds_alternative<int>(a), \"\");\n-  constexpr variant<int, char> b(in_place<0>, int{});\n+  constexpr variant<int, char> b(in_place_index<0>, int{});\n   static_assert(holds_alternative<int>(b), \"\");\n-  constexpr variant<int, char> c(in_place<int>, int{});\n+  constexpr variant<int, char> c(in_place_type<int>, int{});\n   static_assert(holds_alternative<int>(c), \"\");\n-  constexpr variant<int, char> d(in_place<1>, char{});\n+  constexpr variant<int, char> d(in_place_index<1>, char{});\n   static_assert(holds_alternative<char>(d), \"\");\n-  constexpr variant<int, char> e(in_place<char>, char{});\n+  constexpr variant<int, char> e(in_place_type<char>, char{});\n   static_assert(holds_alternative<char>(e), \"\");\n   constexpr variant<int, char> f(char{});\n   static_assert(holds_alternative<char>(f), \"\");\n@@ -392,8 +392,8 @@ void test_constexpr()\n     };\n \n     constexpr variant<literal, nonliteral> v{};\n-    constexpr variant<literal, nonliteral> v1{in_place<literal>};\n-    constexpr variant<literal, nonliteral> v2{in_place<0>};\n+    constexpr variant<literal, nonliteral> v1{in_place_type<literal>};\n+    constexpr variant<literal, nonliteral> v2{in_place_index<0>};\n   }\n }\n \n@@ -448,20 +448,20 @@ void test_adl()\n    v0.emplace<0>(x);\n    v0.emplace<0>(il, x);\n    visit(vis, v0);\n-   variant<X> v1{in_place<0>, x};\n-   variant<X> v2{in_place<X>, x};\n-   variant<X> v3{in_place<0>, il, x};\n-   variant<X> v4{in_place<X>, il, x};\n-   variant<X> v5{allocator_arg, a, in_place<0>, x};\n-   variant<X> v6{allocator_arg, a, in_place<X>, x};\n-   variant<X> v7{allocator_arg, a, in_place<0>, il, x};\n-   variant<X> v8{allocator_arg, a, in_place<X>, il, x};\n-   variant<X> v9{allocator_arg, a, in_place<X>, 1};\n+   variant<X> v1{in_place_index<0>, x};\n+   variant<X> v2{in_place_type<X>, x};\n+   variant<X> v3{in_place_index<0>, il, x};\n+   variant<X> v4{in_place_type<X>, il, x};\n+   variant<X> v5{allocator_arg, a, in_place_index<0>, x};\n+   variant<X> v6{allocator_arg, a, in_place_type<X>, x};\n+   variant<X> v7{allocator_arg, a, in_place_index<0>, il, x};\n+   variant<X> v8{allocator_arg, a, in_place_type<X>, il, x};\n+   variant<X> v9{allocator_arg, a, in_place_type<X>, 1};\n \n    std::variant<X&> vr0(x);\n    vr0 = x;\n-   variant<X&> vr1{in_place<0>, x};\n-   variant<X&> vr2{in_place<X&>, x};\n-   variant<X&> vr3{allocator_arg, a, in_place<0>, x};\n-   variant<X&> vr4{allocator_arg, a, in_place<X&>, x};\n+   variant<X&> vr1{in_place_index<0>, x};\n+   variant<X&> vr2{in_place_type<X&>, x};\n+   variant<X&> vr3{allocator_arg, a, in_place_index<0>, x};\n+   variant<X&> vr4{allocator_arg, a, in_place_type<X&>, x};\n }"}, {"sha": "71e01767ff678923214bd77a23b657d56903e5f2", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a2f592382c96daaa3bce4a22245f0614892d0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=627a2f592382c96daaa3bce4a22245f0614892d0", "patch": "@@ -122,25 +122,25 @@ void dtor()\n   };\n   {\n     int called = 0;\n-    { variant<string, A> a(in_place<1>, called); }\n+    { variant<string, A> a(in_place_index<1>, called); }\n     VERIFY(called == 1);\n   }\n   {\n     int called = 0;\n-    { variant<string, A> a(in_place<0>); }\n+    { variant<string, A> a(in_place_index<0>); }\n     VERIFY(called == 0);\n   }\n }\n \n void in_place_index_ctor()\n {\n   {\n-    variant<int, string> v(in_place<1>, \"a\");\n+    variant<int, string> v(in_place_index<1>, \"a\");\n     VERIFY(holds_alternative<string>(v));\n     VERIFY(get<1>(v) == \"a\");\n   }\n   {\n-    variant<int, string> v(in_place<1>, {'a', 'b'});\n+    variant<int, string> v(in_place_index<1>, {'a', 'b'});\n     VERIFY(holds_alternative<string>(v));\n     VERIFY(get<1>(v) == \"ab\");\n   }\n@@ -149,12 +149,12 @@ void in_place_index_ctor()\n void in_place_type_ctor()\n {\n   {\n-    variant<int, string> v(in_place<string>, \"a\");\n+    variant<int, string> v(in_place_type<string>, \"a\");\n     VERIFY(holds_alternative<string>(v));\n     VERIFY(get<1>(v) == \"a\");\n   }\n   {\n-    variant<int, string> v(in_place<string>, {'a', 'b'});\n+    variant<int, string> v(in_place_type<string>, {'a', 'b'});\n     VERIFY(holds_alternative<string>(v));\n     VERIFY(get<1>(v) == \"ab\");\n   }"}]}