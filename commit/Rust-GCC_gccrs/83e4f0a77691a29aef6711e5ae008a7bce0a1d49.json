{"sha": "83e4f0a77691a29aef6711e5ae008a7bce0a1d49", "node_id": "C_kwDOANBUbNoAKDgzZTRmMGE3NzY5MWEyOWFlZjY3MTFlNWFlMDA4YTdiY2UwYTFkNDk", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-04-06T06:07:50Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-04-07T03:53:43Z"}, "message": "Refine and/ior/xor/andn masked patterns for V*HFmode.\n\nThere's no masked vpandw or vpandb, similar for vpxor/vpor/vpandn.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (<sse2_avx2>_andnot<mode>3_mask):\n\tRemoved.\n\t(<sse>_andnot<mode>3<mask_name>): Disable V*HFmode patterns\n\tfor mask_applied.\n\t(<code><mode>3<mask_name>): Ditto.\n\t(*<code><mode>3<mask_name>): Ditto.\n\t(VFB_128_256): Adjust condition of V8HF/V16HFmode according to\n\treal instruction.\n\t(VFB_512): Ditto.\n\t(VFB): Ditto.", "tree": {"sha": "d7511071f8e2375fda5a341a3ab2c9bbdf6b1d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7511071f8e2375fda5a341a3ab2c9bbdf6b1d20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e4f0a77691a29aef6711e5ae008a7bce0a1d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e4f0a77691a29aef6711e5ae008a7bce0a1d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e4f0a77691a29aef6711e5ae008a7bce0a1d49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e4f0a77691a29aef6711e5ae008a7bce0a1d49/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f44a5c700f409b96ba923864158349700628133d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44a5c700f409b96ba923864158349700628133d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44a5c700f409b96ba923864158349700628133d"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "5e93aa23b47a40dee70872bea958c0d3a9e5f25d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e4f0a77691a29aef6711e5ae008a7bce0a1d49/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e4f0a77691a29aef6711e5ae008a7bce0a1d49/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=83e4f0a77691a29aef6711e5ae008a7bce0a1d49", "patch": "@@ -327,9 +327,7 @@\n \n ;; 128-, 256- and 512-bit float vector modes for bitwise operations\n (define_mode_iterator VFB\n-  [(V32HF \"TARGET_AVX512FP16\")\n-   (V16HF \"TARGET_AVX512FP16\")\n-   (V8HF \"TARGET_AVX512FP16\")\n+  [(V32HF \"TARGET_AVX512F\") (V16HF \"TARGET_AVX\") (V8HF \"TARGET_SSE2\")\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n \n@@ -340,8 +338,7 @@\n \n ;; 128- and 256-bit float vector modes for bitwise operations\n (define_mode_iterator VFB_128_256\n-  [(V16HF \"TARGET_AVX512FP16\")\n-   (V8HF \"TARGET_AVX512FP16\")\n+  [(V16HF \"TARGET_AVX\") (V8HF \"TARGET_SSE2\")\n    (V8SF \"TARGET_AVX\") V4SF\n    (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n \n@@ -399,7 +396,7 @@\n \n ;; All 512bit vector float modes for bitwise operations\n (define_mode_iterator VFB_512\n-  [(V32HF \"TARGET_AVX512FP16\") V16SF V8DF])\n+  [V32HF V16SF V8DF])\n \n (define_mode_iterator VI48_AVX512VL\n   [V16SI (V8SI  \"TARGET_AVX512VL\") (V4SI  \"TARGET_AVX512VL\")\n@@ -4581,7 +4578,8 @@\n \t  (not:VFB_128_256\n \t    (match_operand:VFB_128_256 1 \"register_operand\" \"0,x,v,v\"))\n \t  (match_operand:VFB_128_256 2 \"vector_operand\" \"xBm,xm,vm,vm\")))]\n-  \"TARGET_SSE && <mask_avx512vl_condition>\"\n+  \"TARGET_SSE && <mask_avx512vl_condition>\n+   && (!<mask_applied> || <ssescalarmode>mode != HFmode)\"\n {\n   char buf[128];\n   const char *ops;\n@@ -4648,7 +4646,7 @@\n \t  (not:VFB_512\n \t    (match_operand:VFB_512 1 \"register_operand\" \"v\"))\n \t  (match_operand:VFB_512 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && (!<mask_applied> || <ssescalarmode>mode != HFmode)\"\n {\n   char buf[128];\n   const char *ops;\n@@ -4683,15 +4681,16 @@\n        (any_logic:VFB_128_256\n          (match_operand:VFB_128_256 1 \"vector_operand\")\n          (match_operand:VFB_128_256 2 \"vector_operand\")))]\n-  \"TARGET_SSE && <mask_avx512vl_condition>\"\n+  \"TARGET_SSE && <mask_avx512vl_condition>\n+   && (!<mask_applied> || <ssescalarmode>mode != HFmode)\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_expand \"<code><mode>3<mask_name>\"\n   [(set (match_operand:VFB_512 0 \"register_operand\")\n        (any_logic:VFB_512\n          (match_operand:VFB_512 1 \"nonimmediate_operand\")\n          (match_operand:VFB_512 2 \"nonimmediate_operand\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && (!<mask_applied> || <ssescalarmode>mode != HFmode)\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<code><mode>3<mask_name>\"\n@@ -4700,6 +4699,7 @@\n \t  (match_operand:VFB_128_256 1 \"vector_operand\" \"%0,x,v,v\")\n \t  (match_operand:VFB_128_256 2 \"vector_operand\" \"xBm,xm,vm,vm\")))]\n   \"TARGET_SSE && <mask_avx512vl_condition>\n+   && (!<mask_applied> || <ssescalarmode>mode != HFmode)\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n   char buf[128];\n@@ -4766,7 +4766,8 @@\n \t(any_logic:VFB_512\n \t  (match_operand:VFB_512 1 \"nonimmediate_operand\" \"%v\")\n \t  (match_operand:VFB_512 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n+   && (!<mask_applied> || <ssescalarmode>mode != HFmode)\"\n {\n   char buf[128];\n   const char *ops;\n@@ -16741,17 +16742,6 @@\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n   \"TARGET_AVX512F\")\n \n-(define_expand \"<sse2_avx2>_andnot<mode>3_mask\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:VI12_AVX512VL\n-\t  (and:VI12_AVX512VL\n-\t    (not:VI12_AVX512VL\n-\t      (match_operand:VI12_AVX512VL 1 \"register_operand\"))\n-\t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\"))\n-\t  (match_operand:VI12_AVX512VL 3 \"nonimm_or_0_operand\")\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n-  \"TARGET_AVX512BW\")\n-\n (define_insn \"*andnot<mode>3\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=x,x,v\")\n \t(and:VI"}]}