{"sha": "e803d3b218c6f3861dd7081a63d057d3eec1b368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwM2QzYjIxOGM2ZjM4NjFkZDcwODFhNjNkMDU3ZDNlZWMxYjM2OA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-05-01T21:46:29Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-05-01T21:46:29Z"}, "message": "re GNATS gcj/195: (gcj fail on code to implement an inner interface.)\n\n2000-04-25  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * parse.y (register_incomplete_type): Handle JDEP_ANONYMOUS.\n\n(This is a fix for the Java PR #195:\n http://sourceware.cygnus.com/ml/java-prs/2000-q2/msg00009.html)\n\nFrom-SVN: r33588", "tree": {"sha": "577032d24c90d9ad4d186738c2ae0596f052208c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577032d24c90d9ad4d186738c2ae0596f052208c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e803d3b218c6f3861dd7081a63d057d3eec1b368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e803d3b218c6f3861dd7081a63d057d3eec1b368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e803d3b218c6f3861dd7081a63d057d3eec1b368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e803d3b218c6f3861dd7081a63d057d3eec1b368/comments", "author": null, "committer": null, "parents": [{"sha": "1f577886584a329a05106e5a74c273eb680cb817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f577886584a329a05106e5a74c273eb680cb817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f577886584a329a05106e5a74c273eb680cb817"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "29ac87fbcce617203f8b06ee0bb9a0492485acba", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e803d3b218c6f3861dd7081a63d057d3eec1b368/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e803d3b218c6f3861dd7081a63d057d3eec1b368/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e803d3b218c6f3861dd7081a63d057d3eec1b368", "patch": "@@ -20,6 +20,10 @@ Wed Apr 26 14:29:33 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t* zextract.c (find_zip_file_start): New function.\n \t(read_zip_archive): Use it.\n \n+2000-04-25  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (register_incomplete_type): Handle JDEP_ANONYMOUS.\n+\n Mon Apr 24 14:59:36 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (end_class_declaration): Reset the interface number\n@@ -124,6 +128,18 @@ Thu Apr 20 18:20:58 2000  Jason Schroeder  <shrode@subnature.com>\n \t(patch_binop): New temp `cn'. Call patch_string on LHS/RHS of\n \tthe `==' and `!=' operators.\n \n+2000-04-05  Tom Tromey  <tromey@cygnus.com>\n+\n+\tFix for PR gcj/2:\n+\t* expr.c (expand_invoke): Generate check to see if object pointer\n+\tis null in nonvirtual invocation case.\n+\t* java-tree.h (soft_nullpointer_node): Declare.\n+\t* decl.c (soft_nullpointer_node): New global.\n+\t(init_decl_processing): Initialize soft_nullpointer_node.\n+\t* parse.y (invocation_mode): Return INVOKE_NONVIRTUAL for `final'\n+\tor `private' methods.\n+\t(patch_invoke): Handle INVOKE_NONVIRTUAL case.\n+\n 2000-04-05  Tom Tromey  <tromey@cygnus.com>\n \n \tFix for PR gcj/140:"}, {"sha": "0b14bcae7aa98218413b818f80e03ac154b18301", "filename": "gcc/java/parse.y", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e803d3b218c6f3861dd7081a63d057d3eec1b368/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e803d3b218c6f3861dd7081a63d057d3eec1b368/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=e803d3b218c6f3861dd7081a63d057d3eec1b368", "patch": "@@ -4513,7 +4513,7 @@ finish_method_declaration (method_body)\n       && TREE_TYPE (current_function_decl) \n       && TREE_TYPE (TREE_TYPE (current_function_decl)) == void_type_node)\n     method_body = build1 (RETURN_EXPR, void_type_node, NULL);\n-    \n+\n   BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (current_function_decl)) = method_body;\n   maybe_absorb_scoping_blocks ();\n   /* Exit function's body */\n@@ -4936,7 +4936,9 @@ register_incomplete_type (kind, wfl, decl, ptr)\n   JDEP_WFL (new) = wfl;\n   JDEP_CHAIN (new) = NULL;\n   JDEP_MISC (new) = NULL_TREE;\n-  if ((kind == JDEP_SUPER || kind == JDEP_INTERFACE)\n+  /* For some dependencies, set the enclosing class of the current\n+     class to be the enclosing context */\n+  if ((kind == JDEP_SUPER || kind == JDEP_INTERFACE || kind == JDEP_ANONYMOUS)\n       && GET_ENCLOSING_CPC ())\n     JDEP_ENCLOSING (new) = TREE_VALUE (GET_ENCLOSING_CPC ());\n   else\n@@ -7295,10 +7297,19 @@ java_complete_expand_methods (class_decl)\n   /* First, do the ordinary methods. */\n   for (decl = first_decl; decl; decl = TREE_CHAIN (decl))\n     {\n-      /* Skip abstract or native methods */\n-      if (METHOD_ABSTRACT (decl) || METHOD_NATIVE (decl) \n+      /* Skip abstract or native methods -- but do handle native\n+\t methods when generating JNI stubs.  */\n+      if (METHOD_ABSTRACT (decl)\n+\t  || (! flag_jni && METHOD_NATIVE (decl))\n \t  || DECL_CONSTRUCTOR_P (decl) || DECL_CLINIT_P (decl))\n \tcontinue;\n+\n+      if (METHOD_NATIVE (decl))\n+\t{\n+\t  tree body = build_jni_stub (decl);\n+\t  BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (decl)) = body;\n+\t}\n+\n       java_complete_expand_method (decl);\n     }\n \n@@ -7428,10 +7439,11 @@ java_complete_expand_method (mdecl)\n \t{\n \t  block_body = java_complete_tree (block_body);\n \n-\t  if (!flag_emit_xref)\n+\t  if (! flag_emit_xref && ! METHOD_NATIVE (mdecl))\n \t    check_for_initialization (block_body);\n \t  ctxp->explicit_constructor_p = 0;\n \t}\n+\n       BLOCK_EXPR_BODY (fbody) = block_body;\n \n       /* If we saw a return but couldn't evaluate it properly, we'll"}]}