{"sha": "65f6fa241ef5f929b29192751f6db5f17f32d8ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmNmZhMjQxZWY1ZjkyOWIyOTE5Mjc1MWY2ZGI1ZjE3ZjMyZDhhZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-20T03:59:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-20T03:59:57Z"}, "message": "flow.c (propagate_block): Replace FIRST, LAST and BNUM arguments with BB.\n\n        * flow.c (propagate_block): Replace FIRST, LAST and BNUM\n        arguments with BB.  Update all callers.  Tidy line wrapping.\n\nFrom-SVN: r31534", "tree": {"sha": "d1fb875a7c0fe7e5c5b9d4d33e9f2d6051a17638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1fb875a7c0fe7e5c5b9d4d33e9f2d6051a17638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f6fa241ef5f929b29192751f6db5f17f32d8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f6fa241ef5f929b29192751f6db5f17f32d8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f6fa241ef5f929b29192751f6db5f17f32d8ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f6fa241ef5f929b29192751f6db5f17f32d8ae/comments", "author": null, "committer": null, "parents": [{"sha": "ba52f355e32ed5652dd545982dc6baeac06ba5d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba52f355e32ed5652dd545982dc6baeac06ba5d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba52f355e32ed5652dd545982dc6baeac06ba5d9"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "6cdd053bf13e0b9630c0f600dde07e3162fe0fe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f6fa241ef5f929b29192751f6db5f17f32d8ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f6fa241ef5f929b29192751f6db5f17f32d8ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65f6fa241ef5f929b29192751f6db5f17f32d8ae", "patch": "@@ -1,3 +1,8 @@\n+2000-01-19  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (propagate_block): Replace FIRST, LAST and BNUM \n+\targuments with BB.  Update all callers.  Tidy line wrapping.\n+\n 2000-01-19  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* emit-rtl.c (try_split): Return last_insn if we split the "}, {"sha": "dbbb580c9a0bccd29e6e8133a736b27f938d1240", "filename": "gcc/flow.c", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f6fa241ef5f929b29192751f6db5f17f32d8ae/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f6fa241ef5f929b29192751f6db5f17f32d8ae/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=65f6fa241ef5f929b29192751f6db5f17f32d8ae", "patch": "@@ -324,8 +324,8 @@ static void mark_reg\t\t\tPARAMS ((regset, rtx));\n static void mark_regs_live_at_end\tPARAMS ((regset));\n static void life_analysis_1\t\tPARAMS ((rtx, int, int));\n static void calculate_global_regs_live\tPARAMS ((sbitmap, sbitmap, int));\n-static void propagate_block\t\tPARAMS ((regset, rtx, rtx,\n-\t\t\t\t\t\t regset, int, int));\n+static void propagate_block\t\tPARAMS ((basic_block, regset,\n+\t\t\t\t\t\t regset, int));\n static int insn_dead_p\t\t\tPARAMS ((rtx, regset, int, rtx));\n static int libcall_dead_p\t\tPARAMS ((rtx, regset, rtx, rtx));\n static void mark_set_regs\t\tPARAMS ((regset, regset, rtx,\n@@ -2591,8 +2591,7 @@ update_life_info (blocks, extent, prop_flags)\n       basic_block bb = BASIC_BLOCK (i);\n \n       COPY_REG_SET (tmp, bb->global_live_at_end);\n-      propagate_block (tmp, bb->head, bb->end, (regset) NULL, i,\n-\t\t       prop_flags);\n+      propagate_block (bb, tmp, (regset) NULL, prop_flags);\n \n       if (extent == UPDATE_LIFE_LOCAL)\n \tverify_local_live_at_start (tmp, bb);\n@@ -2957,7 +2956,7 @@ life_analysis_1 (f, nregs, flags)\n         basic_block bb = BASIC_BLOCK (i);\n \n \tCOPY_REG_SET (tmp, bb->global_live_at_end);\n-\tpropagate_block (tmp, bb->head, bb->end, (regset) NULL, i, flags);\n+\tpropagate_block (bb, tmp, (regset) NULL, flags);\n       }\n \n     FREE_REG_SET (tmp);\n@@ -3116,8 +3115,7 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \n \t  /* Rescan the block insn by insn to turn (a copy of) live_at_end\n \t     into live_at_start.  */\n-\t  propagate_block (new_live_at_end, bb->head, bb->end,\n-\t\t\t   bb->local_set, bb->index, flags);\n+\t  propagate_block (bb, new_live_at_end, bb->local_set, flags);\n \n \t  /* If live_at start didn't change, no need to go farther.  */\n \t  if (REG_SET_EQUAL_P (bb->global_live_at_start, new_live_at_end))\n@@ -3221,12 +3219,10 @@ allocate_reg_life_data ()\n    BNUM is the number of the basic block.  */\n \n static void\n-propagate_block (old, first, last, significant, bnum, flags)\n-     register regset old;\n-     rtx first;\n-     rtx last;\n+propagate_block (bb, old, significant, flags)\n+     basic_block bb;\n+     regset old;\n      regset significant;\n-     int bnum;\n      int flags;\n {\n   register rtx insn;\n@@ -3238,7 +3234,7 @@ propagate_block (old, first, last, significant, bnum, flags)\n      middle of the basic block -- for register allocation purposes, the \n      important uses will be in the blocks wholely contained within the loop\n      not in the loop pre-header or post-trailer.  */\n-  loop_depth = BASIC_BLOCK (bnum)->loop_depth;\n+  loop_depth = bb->loop_depth;\n \n   dead = ALLOCA_REG_SET ();\n   live = ALLOCA_REG_SET ();\n@@ -3259,7 +3255,7 @@ propagate_block (old, first, last, significant, bnum, flags)\n \n   /* Scan the block an insn at a time from end to beginning.  */\n \n-  for (insn = last; ; insn = prev)\n+  for (insn = bb->end; ; insn = prev)\n     {\n       prev = PREV_INSN (insn);\n \n@@ -3289,11 +3285,14 @@ propagate_block (old, first, last, significant, bnum, flags)\n \n \t  if (flags & PROP_SCAN_DEAD_CODE)\n \t    {\n-\t      insn_is_dead = (insn_dead_p (PATTERN (insn), old, 0, REG_NOTES (insn))\n-\t                      /* Don't delete something that refers to volatile storage!  */\n+\t      insn_is_dead = (insn_dead_p (PATTERN (insn), old, 0,\n+\t\t\t\t\t   REG_NOTES (insn))\n+\t                      /* Don't delete something that refers to\n+\t\t\t\t volatile storage!  */\n \t                      && ! INSN_VOLATILE (insn));\n \t      libcall_is_dead = (insn_is_dead && note != 0\n-\t                         && libcall_dead_p (PATTERN (insn), old, note, insn));\n+\t                         && libcall_dead_p (PATTERN (insn), old,\n+\t\t\t\t\t\t    note, insn));\n \t    }\n \n \t  /* We almost certainly don't want to delete prologue or epilogue\n@@ -3330,8 +3329,8 @@ propagate_block (old, first, last, significant, bnum, flags)\n \t\t      LABEL_NUSES (label)--;\n \n \t\t      /* If this label was attached to an ADDR_VEC, it's\n-\t\t\t safe to delete the ADDR_VEC.  In fact, it's pretty much\n-\t\t\t mandatory to delete it, because the ADDR_VEC may\n+\t\t\t safe to delete the ADDR_VEC.  In fact, it's pretty\n+\t\t\t much mandatory to delete it, because the ADDR_VEC may\n \t\t\t be referencing labels that no longer exist.  */\n \t\t      if (LABEL_NUSES (label) == 0\n \t\t\t  && (next = next_nonnote_insn (label)) != NULL\n@@ -3513,14 +3512,13 @@ propagate_block (old, first, last, significant, bnum, flags)\n \n \t    }\n \n-\t  /* On final pass, update counts of how many insns each reg is live\n-\t     at.  */\n+\t  /* On final pass, update counts of how many insns in which\n+\t     each reg is live.  */\n \t  if (flags & PROP_REG_INFO)\n-\t    EXECUTE_IF_SET_IN_REG_SET (old, 0, i,\n-\t\t\t\t       { REG_LIVE_LENGTH (i)++; });\n+\t    EXECUTE_IF_SET_IN_REG_SET (old, 0, i, { REG_LIVE_LENGTH (i)++; });\n \t}\n-    flushed: ;\n-      if (insn == first)\n+    flushed:\n+      if (insn == bb->head)\n \tbreak;\n     }\n "}]}