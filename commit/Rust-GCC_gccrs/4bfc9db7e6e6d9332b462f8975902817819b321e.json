{"sha": "4bfc9db7e6e6d9332b462f8975902817819b321e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJmYzlkYjdlNmU2ZDkzMzJiNDYyZjg5NzU5MDI4MTc4MTliMzIxZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-05-24T22:45:45Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-05-24T22:45:45Z"}, "message": "altivec.md (VParity): New mode iterator for vector parity built-in functions.\n\n[gcc]\n2016-05-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.md (VParity): New mode iterator for vector\n\tparity built-in functions.\n\t(p9v_ctz<mode>2): Add support for ISA 3.0 vector count trailing\n\tzeros.\n\t(p9v_parity<mode>2): Likewise.\n\t* config/rs6000/vector.md (VEC_IP): New mode iterator for vector\n\tparity.\n\t(ctz<mode>2): ISA 3.0 expander for vector count trailing zeros.\n\t(parity<mode>2): ISA 3.0 expander for vector parity.\n\t* config/rs6000/rs6000-builtin.def (BU_P9_MISC_1): New macros for\n\tpower9 built-ins.\n\t(BU_P9_64BIT_MISC_0): Likewise.\n\t(BU_P9_MISC_0): Likewise.\n\t(BU_P9V_AV_1): Likewise.\n\t(BU_P9V_AV_2): Likewise.\n\t(BU_P9V_AV_3): Likewise.\n\t(BU_P9V_AV_P): Likewise.\n\t(BU_P9V_VSX_1): Likewise.\n\t(BU_P9V_OVERLOAD_1): Likewise.\n\t(BU_P9V_OVERLOAD_2): Likewise.\n\t(BU_P9V_OVERLOAD_3): Likewise.\n\t(VCTZB): Add vector count trailing zeros support.\n\t(VCTZH): Likewise.\n\t(VCTZW): Likewise.\n\t(VCTZD): Likewise.\n\t(VPRTYBD): Add vector parity support.\n\t(VPRTYBQ): Likewise.\n\t(VPRTYBW): Likewise.\n\t(VCTZ): Add overloaded vector count trailing zeros support.\n\t(VPRTYB): Add overloaded vector parity support.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\toverloaded vector count trailing zeros and parity instructions.\n\t* config/rs6000/rs6000.md (wd mode attribute): Add V1TI and TI for\n\tvector parity support.\n\t* config/rs6000/altivec.h (vec_vctz): Add ISA 3.0 vector count\n\ttrailing zeros support.\n\t(vec_cntlz): Likewise.\n\t(vec_vctzb): Likewise.\n\t(vec_vctzd): Likewise.\n\t(vec_vctzh): Likewise.\n\t(vec_vctzw): Likewise.\n\t(vec_vprtyb): Add ISA 3.0 vector parity support.\n\t(vec_vprtybd): Likewise.\n\t(vec_vprtybw): Likewise.\n\t(vec_vprtybq): Likewise.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n\tthe ISA 3.0 vector count trailing zeros and vector parity built-in\n\tfunctions.\n\n[gcc/testsuite]\n2016-05-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-vparity.c: New file to check ISA 3.0\n\tvector parity built-in functions.\n\t* gcc.target/powerpc/ctz-3.c: New file to check ISA 3.0 vector\n\tcount trailing zeros automatic vectorization.\n\t* gcc.target/powerpc/ctz-4.c: New file to check ISA 3.0 vector\n\tcount trailing zeros built-in functions.\n\nFrom-SVN: r236677", "tree": {"sha": "5be0755c9807fdf2e33e2df51c285b5eeb9ccede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be0755c9807fdf2e33e2df51c285b5eeb9ccede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bfc9db7e6e6d9332b462f8975902817819b321e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfc9db7e6e6d9332b462f8975902817819b321e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bfc9db7e6e6d9332b462f8975902817819b321e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfc9db7e6e6d9332b462f8975902817819b321e/comments", "author": null, "committer": null, "parents": [{"sha": "fe3473a6862371d7e520aedee8e38225692f440d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3473a6862371d7e520aedee8e38225692f440d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe3473a6862371d7e520aedee8e38225692f440d"}], "stats": {"total": 664, "additions": 659, "deletions": 5}, "files": [{"sha": "ae5094b63337e90591812c7dde43633238544d55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -1,3 +1,54 @@\n+2016-05-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.md (VParity): New mode iterator for vector\n+\tparity built-in functions.\n+\t(p9v_ctz<mode>2): Add support for ISA 3.0 vector count trailing\n+\tzeros.\n+\t(p9v_parity<mode>2): Likewise.\n+\t* config/rs6000/vector.md (VEC_IP): New mode iterator for vector\n+\tparity.\n+\t(ctz<mode>2): ISA 3.0 expander for vector count trailing zeros.\n+\t(parity<mode>2): ISA 3.0 expander for vector parity.\n+\t* config/rs6000/rs6000-builtin.def (BU_P9_MISC_1): New macros for\n+\tpower9 built-ins.\n+\t(BU_P9_64BIT_MISC_0): Likewise.\n+\t(BU_P9_MISC_0): Likewise.\n+\t(BU_P9V_AV_1): Likewise.\n+\t(BU_P9V_AV_2): Likewise.\n+\t(BU_P9V_AV_3): Likewise.\n+\t(BU_P9V_AV_P): Likewise.\n+\t(BU_P9V_VSX_1): Likewise.\n+\t(BU_P9V_OVERLOAD_1): Likewise.\n+\t(BU_P9V_OVERLOAD_2): Likewise.\n+\t(BU_P9V_OVERLOAD_3): Likewise.\n+\t(VCTZB): Add vector count trailing zeros support.\n+\t(VCTZH): Likewise.\n+\t(VCTZW): Likewise.\n+\t(VCTZD): Likewise.\n+\t(VPRTYBD): Add vector parity support.\n+\t(VPRTYBQ): Likewise.\n+\t(VPRTYBW): Likewise.\n+\t(VCTZ): Add overloaded vector count trailing zeros support.\n+\t(VPRTYB): Add overloaded vector parity support.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\toverloaded vector count trailing zeros and parity instructions.\n+\t* config/rs6000/rs6000.md (wd mode attribute): Add V1TI and TI for\n+\tvector parity support.\n+\t* config/rs6000/altivec.h (vec_vctz): Add ISA 3.0 vector count\n+\ttrailing zeros support.\n+\t(vec_cntlz): Likewise.\n+\t(vec_vctzb): Likewise.\n+\t(vec_vctzd): Likewise.\n+\t(vec_vctzh): Likewise.\n+\t(vec_vctzw): Likewise.\n+\t(vec_vprtyb): Add ISA 3.0 vector parity support.\n+\t(vec_vprtybd): Likewise.\n+\t(vec_vprtybw): Likewise.\n+\t(vec_vprtybq): Likewise.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n+\tthe ISA 3.0 vector count trailing zeros and vector parity built-in\n+\tfunctions.\n+\n 2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* tree-ssa-reassoc.c (sort_by_operand_rank): Skip checking gimple_bb"}, {"sha": "f9fac682b7b3e54210c906f9ff40a3220ba844c5", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -384,6 +384,23 @@\n #define vec_vupklsw __builtin_vec_vupklsw\n #endif\n \n+#ifdef _ARCH_PWR9\n+/* Vector additions added in ISA 3.0.  */\n+#define vec_vctz __builtin_vec_vctz\n+#define vec_cntlz __builtin_vec_vctz\n+#define vec_vctzb __builtin_vec_vctzb\n+#define vec_vctzd __builtin_vec_vctzd\n+#define vec_vctzh __builtin_vec_vctzh\n+#define vec_vctzw __builtin_vec_vctzw\n+#define vec_vprtyb __builtin_vec_vprtyb\n+#define vec_vprtybd __builtin_vec_vprtybd\n+#define vec_vprtybw __builtin_vec_vprtybw\n+\n+#ifdef _ARCH_PPC64\n+#define vec_vprtybq __builtin_vec_vprtybq\n+#endif\n+#endif\n+\n /* Predicates.\n    For C++, we use templates in order to allow non-parenthesized arguments.\n    For C, instead, we use macros since non-parenthesized arguments were"}, {"sha": "03ae1d94ce04a565217ff90169afba77f4168cfb", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -193,6 +193,13 @@\n \t\t\t   (KF \"FLOAT128_VECTOR_P (KFmode)\")\n \t\t\t   (TF \"FLOAT128_VECTOR_P (TFmode)\")])\n \n+;; Specific iterator for parity which does not have a byte/half-word form, but\n+;; does have a quad word form\n+(define_mode_iterator VParity [V4SI\n+\t\t\t       V2DI\n+\t\t\t       V1TI\n+\t\t\t       (TI \"TARGET_VSX_TIMODE\")])\n+\n (define_mode_attr VI_char [(V2DI \"d\") (V4SI \"w\") (V8HI \"h\") (V16QI \"b\")])\n (define_mode_attr VI_scalar [(V2DI \"DI\") (V4SI \"SI\") (V8HI \"HI\") (V16QI \"QI\")])\n (define_mode_attr VI_unit [(V16QI \"VECTOR_UNIT_ALTIVEC_P (V16QImode)\")\n@@ -3415,7 +3422,7 @@\n }\")\n \n \f\n-;; Power8 vector instructions encoded as Altivec instructions\n+;; Power8/power9 vector instructions encoded as Altivec instructions\n \n ;; Vector count leading zeros\n (define_insn \"*p8v_clz<mode>2\"\n@@ -3426,6 +3433,15 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"vecsimple\")])\n \n+;; Vector count trailing zeros\n+(define_insn \"*p9v_ctz<mode>2\"\n+  [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n+\t(ctz:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vctz<wd> %0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"vecsimple\")])\n+\n ;; Vector population count\n (define_insn \"*p8v_popcount<mode>2\"\n   [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n@@ -3435,6 +3451,15 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"vecsimple\")])\n \n+;; Vector parity\n+(define_insn \"*p9v_parity<mode>2\"\n+  [(set (match_operand:VParity 0 \"register_operand\" \"=v\")\n+        (parity:VParity (match_operand:VParity 1 \"register_operand\" \"v\")))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vprtyb<wd> %0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"vecsimple\")])\n+\n ;; Vector Gather Bits by Bytes by Doubleword\n (define_insn \"p8v_vgbbd\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")"}, {"sha": "079b6960a35ee58c0a3969905cc0824a476bf7d2", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -687,8 +687,113 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+\n+/* Miscellaneous builtins for instructions added in ISA 3.0.  These\n+   instructions don't require either the DFP or VSX options, just the basic\n+   ISA 3.0 enablement since they operate on general purpose registers.  */\n+#define BU_P9_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MODULO,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* Miscellaneous builtins for instructions added in ISA 3.0.  These\n+   instructions don't require either the DFP or VSX options, just the basic\n+   ISA 3.0 enablement since they operate on general purpose registers,\n+   and they require 64-bit addressing.  */\n+#define BU_P9_64BIT_MISC_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_0 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MODULO                                   \\\n+                     | RS6000_BTM_64BIT,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* Miscellaneous builtins for instructions added in ISA 3.0.  These\n+   instructions don't require either the DFP or VSX options, just the basic\n+   ISA 3.0 enablement since they operate on general purpose registers.  */\n+#define BU_P9_MISC_0(ENUM, NAME, ATTR, ICODE)                      \\\n+  RS6000_BUILTIN_0 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MODULO,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* ISA 3.0 (power9) vector convenience macros.  */\n+/* For the instructions that are encoded as altivec instructions use\n+   __builtin_altivec_ as the builtin name.  */\n+#define BU_P9V_AV_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_P9V_AV_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_P9V_AV_3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_3 (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_P9V_AV_P(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_P (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_PREDICATE),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* For the instructions encoded as VSX instructions use __builtin_vsx as the\n+   builtin name.  */\n+#define BU_P9V_VSX_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P9V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_P9V_OVERLOAD_1(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P9V_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_P9V_OVERLOAD_2(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P9V_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_P9V_OVERLOAD_3(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_3 (P9V_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n #endif\n \n+\f\n /* Insure 0 is not a legitimate index.  */\n BU_SPECIAL_X (RS6000_BUILTIN_NONE, NULL, 0, RS6000_BTC_MISC)\n \n@@ -1704,6 +1809,26 @@ BU_LDBL128_2 (UNPACK_TF,\t\"unpack_longdouble\",\tCONST,\tunpacktf)\n BU_P7_MISC_2 (PACK_V1TI,\t\"pack_vector_int128\",\tCONST,\tpackv1ti)\n BU_P7_MISC_2 (UNPACK_V1TI,\t\"unpack_vector_int128\",\tCONST,\tunpackv1ti)\n \n+/* 1 argument vector functions added in ISA 3.0 (power9).  */\n+BU_P9V_AV_1 (VCTZB,\t\t\"vctzb\",\t\tCONST,  ctzv16qi2)\n+BU_P9V_AV_1 (VCTZH,\t\t\"vctzh\",\t\tCONST,  ctzv8hi2)\n+BU_P9V_AV_1 (VCTZW,\t\t\"vctzw\",\t\tCONST,  ctzv4si2)\n+BU_P9V_AV_1 (VCTZD,\t\t\"vctzd\",\t\tCONST,  ctzv2di2)\n+BU_P9V_AV_1 (VPRTYBD,\t\t\"vprtybd\",\t\tCONST,  parityv2di2)\n+BU_P9V_AV_1 (VPRTYBQ,\t\t\"vprtybq\",\t\tCONST,  parityv1ti2)\n+BU_P9V_AV_1 (VPRTYBW,\t\t\"vprtybw\",\t\tCONST,  parityv4si2)\n+\n+/* ISA 3.0 vector overloaded 1 argument functions.  */\n+BU_P9V_OVERLOAD_1 (VCTZ,\t\"vctz\")\n+BU_P9V_OVERLOAD_1 (VCTZB,\t\"vctzb\")\n+BU_P9V_OVERLOAD_1 (VCTZH,\t\"vctzh\")\n+BU_P9V_OVERLOAD_1 (VCTZW,\t\"vctzw\")\n+BU_P9V_OVERLOAD_1 (VCTZD,\t\"vctzd\")\n+BU_P9V_OVERLOAD_1 (VPRTYB,\t\"vprtyb\")\n+BU_P9V_OVERLOAD_1 (VPRTYBD,\t\"vprtybd\")\n+BU_P9V_OVERLOAD_1 (VPRTYBQ,\t\"vprtybq\")\n+BU_P9V_OVERLOAD_1 (VPRTYBW,\t\"vprtybw\")\n+\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox)"}, {"sha": "90e445a9a8a2a77873e0ec2491e404f1656a6b79", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -4210,6 +4210,43 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VCLZD, P8V_BUILTIN_VCLZD,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n \n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZB,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZB,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZH,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZH,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZW,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VCTZB, P9V_BUILTIN_VCTZB,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZB, P9V_BUILTIN_VCTZB,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VCTZH, P9V_BUILTIN_VCTZH,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZH, P9V_BUILTIN_VCTZH,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VCTZW, P9V_BUILTIN_VCTZW,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZW, P9V_BUILTIN_VCTZW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VCTZD, P9V_BUILTIN_VCTZD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZD, P9V_BUILTIN_VCTZD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,\n@@ -4339,6 +4376,42 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VPOPCNTD, P8V_BUILTIN_VPOPCNTD,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n \n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBW,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_INTTI, RS6000_BTI_INTTI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYB, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_UINTTI, RS6000_BTI_UINTTI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VPRTYBW, P9V_BUILTIN_VPRTYBW,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYBW, P9V_BUILTIN_VPRTYBW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VPRTYBD, P9V_BUILTIN_VPRTYBD,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYBD, P9V_BUILTIN_VPRTYBD,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_VPRTYBQ, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYBQ, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYBQ, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_INTTI, RS6000_BTI_INTTI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VPRTYBQ, P9V_BUILTIN_VPRTYBQ,\n+    RS6000_BTI_UINTTI, RS6000_BTI_UINTTI, 0, 0 },\n+\n   { P8V_BUILTIN_VEC_VPKUDUM, P8V_BUILTIN_VPKUDUM,\n     RS6000_BTI_V4SI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { P8V_BUILTIN_VEC_VPKUDUM, P8V_BUILTIN_VPKUDUM,"}, {"sha": "011acebd70791e56ada58dc3c7d092d6d7a5e925", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -577,7 +577,9 @@\n \t\t      (V16QI \"b\")\n \t\t      (V8HI  \"h\")\n \t\t      (V4SI  \"w\")\n-\t\t      (V2DI  \"d\")])\n+\t\t      (V2DI  \"d\")\n+\t\t      (V1TI  \"q\")\n+\t\t      (TI    \"q\")])\n \n ;; How many bits in this mode?\n (define_mode_attr bits [(QI \"8\") (HI \"16\") (SI \"32\") (DI \"64\")])"}, {"sha": "51a91657d49b423af11f326b1f1a83d3a3175569", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -26,6 +26,13 @@\n ;; Vector int modes\n (define_mode_iterator VEC_I [V16QI V8HI V4SI V2DI])\n \n+;; Vector int modes for parity\n+(define_mode_iterator VEC_IP [V8HI\n+\t\t\t      V4SI\n+\t\t\t      V2DI\n+\t\t\t      V1TI\n+\t\t\t      (TI \"TARGET_VSX_TIMODE\")])\n+\n ;; Vector float modes\n (define_mode_iterator VEC_F [V4SF V2DF])\n \n@@ -752,12 +759,24 @@\n \t(clz:VEC_I (match_operand:VEC_I 1 \"register_operand\" \"\")))]\n   \"TARGET_P8_VECTOR\")\n \n+;; Vector count trailing zeros\n+(define_expand \"ctz<mode>2\"\n+  [(set (match_operand:VEC_I 0 \"register_operand\" \"\")\n+\t(ctz:VEC_I (match_operand:VEC_I 1 \"register_operand\" \"\")))]\n+  \"TARGET_P9_VECTOR\")\n+\n ;; Vector population count\n (define_expand \"popcount<mode>2\"\n   [(set (match_operand:VEC_I 0 \"register_operand\" \"\")\n         (popcount:VEC_I (match_operand:VEC_I 1 \"register_operand\" \"\")))]\n   \"TARGET_P8_VECTOR\")\n \n+;; Vector parity\n+(define_expand \"parity<mode>2\"\n+  [(set (match_operand:VEC_IP 0 \"register_operand\" \"\")\n+\t(parity:VEC_IP (match_operand:VEC_IP 1 \"register_operand\" \"\")))]\n+  \"TARGET_P9_VECTOR\")\n+\n \f\n ;; Same size conversions\n (define_expand \"float<VEC_int><mode>2\""}, {"sha": "2d4f02888df310f4590396cf89eb626f0fea7c57", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -17251,17 +17251,17 @@ vector __uint128_t vec_vadduqm (vector __uint128_t, vector __uint128_t);\n \n vector __int128_t vec_vaddecuq (vector __int128_t, vector __int128_t,\n                                 vector __int128_t);\n-vector __uint128_t vec_vaddecuq (vector __uint128_t, vector __uint128_t, \n+vector __uint128_t vec_vaddecuq (vector __uint128_t, vector __uint128_t,\n                                  vector __uint128_t);\n \n vector __int128_t vec_vaddeuqm (vector __int128_t, vector __int128_t,\n                                 vector __int128_t);\n-vector __uint128_t vec_vaddeuqm (vector __uint128_t, vector __uint128_t, \n+vector __uint128_t vec_vaddeuqm (vector __uint128_t, vector __uint128_t,\n                                  vector __uint128_t);\n \n vector __int128_t vec_vsubecuq (vector __int128_t, vector __int128_t,\n                                 vector __int128_t);\n-vector __uint128_t vec_vsubecuq (vector __uint128_t, vector __uint128_t, \n+vector __uint128_t vec_vsubecuq (vector __uint128_t, vector __uint128_t,\n                                  vector __uint128_t);\n \n vector __int128_t vec_vsubeuqm (vector __int128_t, vector __int128_t,\n@@ -17287,6 +17287,60 @@ int __builtin_bcdsub_gt (vector __int128_t, vector__int128_t);\n int __builtin_bcdsub_ov (vector __int128_t, vector__int128_t);\n @end smallexample\n \n+If the ISA 3.0 additions to the vector/scalar (power9-vector)\n+instruction set are available:\n+\n+@smallexample\n+vector long long vec_vctz (vector long long);\n+vector unsigned long long vec_vctz (vector unsigned long long);\n+vector int vec_vctz (vector int);\n+vector unsigned int vec_vctz (vector int);\n+vector short vec_vctz (vector short);\n+vector unsigned short vec_vctz (vector unsigned short);\n+vector signed char vec_vctz (vector signed char);\n+vector unsigned char vec_vctz (vector unsigned char);\n+\n+vector signed char vec_vctzb (vector signed char);\n+vector unsigned char vec_vctzb (vector unsigned char);\n+\n+vector long long vec_vctzd (vector long long);\n+vector unsigned long long vec_vctzd (vector unsigned long long);\n+\n+vector short vec_vctzh (vector short);\n+vector unsigned short vec_vctzh (vector unsigned short);\n+\n+vector int vec_vctzw (vector int);\n+vector unsigned int vec_vctzw (vector int);\n+\n+vector int vec_vprtyb (vector int);\n+vector unsigned int vec_vprtyb (vector unsigned int);\n+vector long long vec_vprtyb (vector long long);\n+vector unsigned long long vec_vprtyb (vector unsigned long long);\n+\n+vector int vec_vprtybw (vector int);\n+vector unsigned int vec_vprtybw (vector unsigned int);\n+\n+vector long long vec_vprtybd (vector long long);\n+vector unsigned long long vec_vprtybd (vector unsigned long long);\n+@end smallexample\n+\n+\n+If the ISA 3.0 additions to the vector/scalar (power9-vector)\n+instruction set are available for 64-bit targets:\n+\n+@smallexample\n+vector long vec_vprtyb (vector long);\n+vector unsigned long vec_vprtyb (vector unsigned long);\n+vector __int128_t vec_vprtyb (vector __int128_t);\n+vector __uint128_t vec_vprtyb (vector __uint128_t);\n+\n+vector long vec_vprtybd (vector long);\n+vector unsigned long vec_vprtybd (vector unsigned long);\n+\n+vector __int128_t vec_vprtybq (vector __int128_t);\n+vector __uint128_t vec_vprtybd (vector __uint128_t);\n+@end smallexample\n+\n If the cryptographic instructions are enabled (@option{-mcrypto} or\n @option{-mcpu=power8}), the following builtins are enabled.\n "}, {"sha": "1cde48184c04254053fe06bd6d241d972278a4ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -1,3 +1,12 @@\n+2016-05-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-vparity.c: New file to check ISA 3.0\n+\tvector parity built-in functions.\n+\t* gcc.target/powerpc/ctz-3.c: New file to check ISA 3.0 vector\n+\tcount trailing zeros automatic vectorization.\n+\t* gcc.target/powerpc/ctz-4.c: New file to check ISA 3.0 vector\n+\tcount trailing zeros built-in functions.\n+\n 2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* gcc.dg/tree-ssa/reassoc-44.c: New test."}, {"sha": "468a1f935405cb337b5e793c5ff9ed4a14de8d40", "filename": "gcc/testsuite/gcc.target/powerpc/ctz-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fctz-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fctz-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fctz-3.c?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2 -ftree-vectorize -fvect-cost-model=dynamic -fno-unroll-loops -fno-unroll-all-loops\" } */\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#define ALIGN_ATTR __attribute__((__aligned__(ALIGN)))\n+\n+#define DO_BUILTIN(PREFIX, TYPE, CTZ)\t\t\t\t\t\\\n+TYPE PREFIX ## _a[SIZE] ALIGN_ATTR;\t\t\t\t\t\\\n+TYPE PREFIX ## _b[SIZE] ALIGN_ATTR;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+PREFIX ## _ctz (void)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  unsigned long i;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < SIZE; i++)\t\t\t\t\t\t\\\n+    PREFIX ## _a[i] = CTZ (PREFIX ## _b[i]);\t\t\t\t\\\n+}\n+\n+#if !defined(DO_LONG_LONG) && !defined(DO_LONG) && !defined(DO_INT) && !defined(DO_SHORT) && !defined(DO_CHAR)\n+#define DO_INT 1\n+#endif\n+\n+#if DO_LONG_LONG\n+/* At the moment, only int is auto vectorized.  */\n+DO_BUILTIN (sll, long long,\t\t__builtin_ctzll)\n+DO_BUILTIN (ull, unsigned long long,\t__builtin_ctzll)\n+#endif\n+\n+#if defined(_ARCH_PPC64) && DO_LONG\n+DO_BUILTIN (sl,  long,\t\t\t__builtin_ctzl)\n+DO_BUILTIN (ul,  unsigned long,\t\t__builtin_ctzl)\n+#endif\n+\n+#if DO_INT\n+DO_BUILTIN (si,  int,\t\t\t__builtin_ctz)\n+DO_BUILTIN (ui,  unsigned int,\t\t__builtin_ctz)\n+#endif\n+\n+#if DO_SHORT\n+DO_BUILTIN (ss,  short,\t\t\t__builtin_ctz)\n+DO_BUILTIN (us,  unsigned short,\t__builtin_ctz)\n+#endif\n+\n+#if DO_CHAR\n+DO_BUILTIN (sc,  signed char,\t\t__builtin_ctz)\n+DO_BUILTIN (uc,  unsigned char,\t\t__builtin_ctz)\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"vctzw\" 2 } } */\n+/* { dg-final { scan-assembler-not \"cnttzd\" } } */\n+/* { dg-final { scan-assembler-not \"cnttzw\" } } */"}, {"sha": "2d04a9b6579e84bd73279b3e6e4eb4ffe0093536", "filename": "gcc/testsuite/gcc.target/powerpc/ctz-4.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fctz-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fctz-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fctz-4.c?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+count_trailing_zeros_v16qi_1s (vector signed char a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector signed char\n+count_trailing_zeros_v16qi_2s (vector signed char a)\n+{\n+  return vec_vctzb (a);\n+}\n+\n+vector unsigned char\n+count_trailing_zeros_v16qi_1u (vector unsigned char a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector unsigned char\n+count_trailing_zeros_v16qi_2u (vector unsigned char a)\n+{\n+  return vec_vctzb (a);\n+}\n+\n+vector short\n+count_trailing_zeros_v8hi_1s (vector short a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector short\n+count_trailing_zeros_v8hi_2s (vector short a)\n+{\n+  return vec_vctzh (a);\n+}\n+\n+vector unsigned short\n+count_trailing_zeros_v8hi_1u (vector unsigned short a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector unsigned short\n+count_trailing_zeros_v8hi_2u (vector unsigned short a)\n+{\n+  return vec_vctzh (a);\n+}\n+\n+vector int\n+count_trailing_zeros_v4si_1s (vector int a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector int\n+count_trailing_zeros_v4si_2s (vector int a)\n+{\n+  return vec_vctzw (a);\n+}\n+\n+vector unsigned int\n+count_trailing_zeros_v4si_1u (vector unsigned int a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector unsigned int\n+count_trailing_zeros_v4si_2u (vector unsigned int a)\n+{\n+  return vec_vctzw (a);\n+}\n+\n+vector long long\n+count_trailing_zeros_v2di_1s (vector long long a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector long long\n+count_trailing_zeros_v2di_2s (vector long long a)\n+{\n+  return vec_vctzd (a);\n+}\n+\n+vector unsigned long long\n+count_trailing_zeros_v2di_1u (vector unsigned long long a)\n+{\n+  return vec_vctz (a);\n+}\n+\n+vector unsigned long long\n+count_trailing_zeros_v2di_2u (vector unsigned long long a)\n+{\n+  return vec_vctzd (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctzb\" } } */\n+/* { dg-final { scan-assembler \"vctzd\" } } */\n+/* { dg-final { scan-assembler \"vctzh\" } } */\n+/* { dg-final { scan-assembler \"vctzw\" } } */\n+/* { dg-final { scan-assembler-not \"cnttzd\" } } */\n+/* { dg-final { scan-assembler-not \"cnttzw\" } } */"}, {"sha": "e4c2087071740cf0dff52936b09c807f0e1a5b2c", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vparity.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vparity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfc9db7e6e6d9332b462f8975902817819b321e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vparity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vparity.c?ref=4bfc9db7e6e6d9332b462f8975902817819b321e", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2 -mlra -mvsx-timode\" } */\n+\n+#include <altivec.h>\n+\n+vector int\n+parity_v4si_1s (vector int a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+vector int\n+parity_v4si_2s (vector int a)\n+{\n+  return vec_vprtybw (a);\n+}\n+\n+vector unsigned int\n+parity_v4si_1u (vector unsigned int a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+vector unsigned int\n+parity_v4si_2u (vector unsigned int a)\n+{\n+  return vec_vprtybw (a);\n+}\n+\n+vector long long\n+parity_v2di_1s (vector long long a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+vector long long\n+parity_v2di_2s (vector long long a)\n+{\n+  return vec_vprtybd (a);\n+}\n+\n+vector unsigned long long\n+parity_v2di_1u (vector unsigned long long a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+vector unsigned long long\n+parity_v2di_2u (vector unsigned long long a)\n+{\n+  return vec_vprtybd (a);\n+}\n+\n+vector __int128_t\n+parity_v1ti_1s (vector __int128_t a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+vector __int128_t\n+parity_v1ti_2s (vector __int128_t a)\n+{\n+  return vec_vprtybq (a);\n+}\n+\n+__int128_t\n+parity_ti_3s (__int128_t a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+__int128_t\n+parity_ti_4s (__int128_t a)\n+{\n+  return vec_vprtybq (a);\n+}\n+\n+vector __uint128_t\n+parity_v1ti_1u (vector __uint128_t a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+vector __uint128_t\n+parity_v1ti_2u (vector __uint128_t a)\n+{\n+  return vec_vprtybq (a);\n+}\n+\n+__uint128_t\n+parity_ti_3u (__uint128_t a)\n+{\n+  return vec_vprtyb (a);\n+}\n+\n+__uint128_t\n+parity_ti_4u (__uint128_t a)\n+{\n+  return vec_vprtybq (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vprtybd\" } } */\n+/* { dg-final { scan-assembler \"vprtybq\" } } */\n+/* { dg-final { scan-assembler \"vprtybw\" } } */"}]}