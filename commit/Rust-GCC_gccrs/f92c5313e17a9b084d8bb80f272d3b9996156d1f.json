{"sha": "f92c5313e17a9b084d8bb80f272d3b9996156d1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyYzUzMTNlMTdhOWIwODRkOGJiODBmMjcyZDNiOTk5NjE1NmQxZg==", "commit": {"author": {"name": "Gawain Bolton", "email": "gp.bolton@computer.org", "date": "2003-07-05T15:47:09Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-05T15:47:09Z"}, "message": "stl_tree.h: _Rb_tree_rebalance(): Add local variable for grandparent and use const\n\n\n2003-07-05  Gawain Bolton  <gp.bolton@computer.org>\n\n\t* include/bits/stl_tree.h: _Rb_tree_rebalance():  Add local\n          variable for grandparent and use const\n\nFrom-SVN: r68977", "tree": {"sha": "acc9a4f15c444bf467d1418164c9bdc9b01c00bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acc9a4f15c444bf467d1418164c9bdc9b01c00bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f92c5313e17a9b084d8bb80f272d3b9996156d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92c5313e17a9b084d8bb80f272d3b9996156d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92c5313e17a9b084d8bb80f272d3b9996156d1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92c5313e17a9b084d8bb80f272d3b9996156d1f/comments", "author": null, "committer": null, "parents": [{"sha": "39e3f58cbc14b15c3e0486295ef9d002a3253a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e3f58cbc14b15c3e0486295ef9d002a3253a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e3f58cbc14b15c3e0486295ef9d002a3253a51"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "4ab9076ac77e9ff7b4578a28e4985bc8e0009f71", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92c5313e17a9b084d8bb80f272d3b9996156d1f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92c5313e17a9b084d8bb80f272d3b9996156d1f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f92c5313e17a9b084d8bb80f272d3b9996156d1f", "patch": "@@ -1,3 +1,8 @@\n+2003-07-05  Gawain Bolton  <gp.bolton@computer.org>\n+\n+\t* include/bits/stl_tree.h: _Rb_tree_rebalance():  Add local\n+          variable for grandparent and use const\n+\n 2003-07-05  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* testsuite/27_io/basic_filebuf/close/char/4879.cc: xfail on cygwin"}, {"sha": "eb124de11e1b2fd18112f92e954406a54a473561", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92c5313e17a9b084d8bb80f272d3b9996156d1f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92c5313e17a9b084d8bb80f272d3b9996156d1f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=f92c5313e17a9b084d8bb80f272d3b9996156d1f", "patch": "@@ -265,9 +265,9 @@ namespace std\n     { return __x._M_node != __y._M_node; }\n \n   inline void \n-  _Rb_tree_rotate_left(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)\n+  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)\n   {\n-    _Rb_tree_node_base* __y = __x->_M_right;\n+    _Rb_tree_node_base* const __y = __x->_M_right;\n     __x->_M_right = __y->_M_left;\n     if (__y->_M_left !=0)\n       __y->_M_left->_M_parent = __x;\n@@ -284,9 +284,9 @@ namespace std\n   }\n \n   inline void \n-  _Rb_tree_rotate_right(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)\n+  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)\n   {\n-    _Rb_tree_node_base* __y = __x->_M_left;\n+    _Rb_tree_node_base* const __y = __x->_M_left;\n     __x->_M_left = __y->_M_right;\n     if (__y->_M_right != 0)\n       __y->_M_right->_M_parent = __x;\n@@ -309,15 +309,17 @@ namespace std\n     while (__x != __root \n \t   && __x->_M_parent->_M_color == _S_red) \n       {\n-\tif (__x->_M_parent == __x->_M_parent->_M_parent->_M_left) \n+\t_Rb_tree_node_base* const __xpp = __x->_M_parent->_M_parent;\n+\n+\tif (__x->_M_parent == __xpp->_M_left) \n \t  {\n-\t    _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_right;\n+\t    _Rb_tree_node_base* const __y = __xpp->_M_right;\n \t    if (__y && __y->_M_color == _S_red) \n \t      {\n \t\t__x->_M_parent->_M_color = _S_black;\n \t\t__y->_M_color = _S_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n-\t\t__x = __x->_M_parent->_M_parent;\n+\t\t__xpp->_M_color = _S_red;\n+\t\t__x = __xpp;\n \t      }\n \t    else \n \t      {\n@@ -327,19 +329,19 @@ namespace std\n \t\t    _Rb_tree_rotate_left(__x, __root);\n \t\t  }\n \t\t__x->_M_parent->_M_color = _S_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n-\t\t_Rb_tree_rotate_right(__x->_M_parent->_M_parent, __root);\n+\t\t__xpp->_M_color = _S_red;\n+\t\t_Rb_tree_rotate_right(__xpp, __root);\n \t      }\n \t  }\n \telse \n \t  {\n-\t    _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_left;\n+\t    _Rb_tree_node_base* const __y = __xpp->_M_left;\n \t    if (__y && __y->_M_color == _S_red) \n \t      {\n \t\t__x->_M_parent->_M_color = _S_black;\n \t\t__y->_M_color = _S_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n-\t\t__x = __x->_M_parent->_M_parent;\n+\t\t__xpp->_M_color = _S_red;\n+\t\t__x = __xpp;\n \t      }\n \t    else \n \t      {\n@@ -349,19 +351,19 @@ namespace std\n \t\t    _Rb_tree_rotate_right(__x, __root);\n \t\t  }\n \t\t__x->_M_parent->_M_color = _S_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n-\t\t_Rb_tree_rotate_left(__x->_M_parent->_M_parent, __root);\n+\t\t__xpp->_M_color = _S_red;\n+\t\t_Rb_tree_rotate_left(__xpp, __root);\n \t      }\n \t  }\n       }\n     __root->_M_color = _S_black;\n   }\n \n   inline _Rb_tree_node_base*\n-  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* __z, \n-\t\t\t       _Rb_tree_node_base*& __root,\n-\t\t\t       _Rb_tree_node_base*& __leftmost,\n-\t\t\t       _Rb_tree_node_base*& __rightmost)\n+  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z, \n+\t\t\t       _Rb_tree_node_base*& \t __root,\n+\t\t\t       _Rb_tree_node_base*& \t __leftmost,\n+\t\t\t       _Rb_tree_node_base*& \t __rightmost)\n   {\n     _Rb_tree_node_base* __y = __z;\n     _Rb_tree_node_base* __x = 0;"}]}