{"sha": "20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBmMmQwM2E4ZWJlOGE2NzllYmZkNDc3Y2UxZGQ3NGYxZTk0YTE5NQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-06-30T01:41:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-30T01:41:45Z"}, "message": "choose-temp.c (make_temp_file): Accept new argument for the file suffix to use.\n\n        * choose-temp.c (make_temp_file): Accept new argument for the\n        file suffix to use.  Allocate space for it and add it to the\n        template.\n        * mkstemp.c (mkstemps): Renamed from mkstemp.  Accept new argument\n        for the length of the suffix.  Update template struture checks\n        to handle optinal suffix.\n        * collect2.c (make_temp_file): Update prototype.\n        (main): Put proper suffixes on temporary files.\n        * gcc.c (make_temp_file): Update prototype.\n        (do_spec_1): Put proper suffixes on temporary files.\nShould fix irix build problems.\n\nFrom-SVN: r20812", "tree": {"sha": "0003a692de847d6e5ea1c512950f3fe3d7f44a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0003a692de847d6e5ea1c512950f3fe3d7f44a1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/comments", "author": null, "committer": null, "parents": [{"sha": "af24816977a00f6a1b9ede9b4a5291b96b6c67eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af24816977a00f6a1b9ede9b4a5291b96b6c67eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af24816977a00f6a1b9ede9b4a5291b96b6c67eb"}], "stats": {"total": 86, "additions": 60, "deletions": 26}, "files": [{"sha": "07d38952125a6012aea78733f215807155fd956a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "patch": "@@ -1,3 +1,16 @@\n+Tue Jun 30 02:34:02 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* choose-temp.c (make_temp_file): Accept new argument for the\n+\tfile suffix to use.  Allocate space for it and add it to the\n+\ttemplate.\n+\t* mkstemp.c (mkstemps): Renamed from mkstemp.  Accept new argument\n+\tfor the length of the suffix.  Update template struture checks\n+\tto handle optinal suffix.\n+\t* collect2.c (make_temp_file): Update prototype.\n+\t(main): Put proper suffixes on temporary files.\n+\t* gcc.c (make_temp_file): Update prototype.\n+\t(do_spec_1): Put proper suffixes on temporary files.\n+\n Tue Jun 30 00:56:19 1998  Bruno Haible <haible@ilog.fr>\n \n \t* invoke.texi: Document new implicit structure initialization"}, {"sha": "46293367613b5ac18f4bb8a0faca3e82abc76852", "filename": "gcc/choose-temp.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchoose-temp.c?ref=20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "patch": "@@ -152,11 +152,12 @@ choose_temp_base ()\n    one.  */\n \n char *\n-make_temp_file ()\n+make_temp_file (suffix)\n+     char *suffix;\n {\n   char *base = 0;\n   char *temp_filename;\n-  int len;\n+  int base_len, suffix_len;\n   int fd;\n   static char tmp[] = { DIR_SEPARATOR, 't', 'm', 'p', 0 };\n   static char usrtmp[] = { DIR_SEPARATOR, 'u', 's', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };\n@@ -177,19 +178,29 @@ make_temp_file ()\n   if (base == 0)\n     base = \".\";\n \n-  len = strlen (base);\n-  temp_filename = xmalloc (len + 1 /*DIR_SEPARATOR*/\n-\t\t\t   + strlen (TEMP_FILE) + 1);\n+  base_len = strlen (base);\n+\n+  if (suffix)\n+    suffix_len = strlen (suffix);\n+  else\n+    suffix_len = 0;\n+\n+  temp_filename = xmalloc (base_len + 1 /*DIR_SEPARATOR*/\n+\t\t\t   + strlen (TEMP_FILE)\n+\t\t\t   + suffix_len + 1);\n   strcpy (temp_filename, base);\n \n-  if (len != 0\n-      && temp_filename[len-1] != '/'\n-      && temp_filename[len-1] != DIR_SEPARATOR)\n-    temp_filename[len++] = DIR_SEPARATOR;\n-  strcpy (temp_filename + len, TEMP_FILE);\n+  if (base_len != 0\n+      && temp_filename[base_len-1] != '/'\n+      && temp_filename[base_len-1] != DIR_SEPARATOR)\n+    temp_filename[base_len++] = DIR_SEPARATOR;\n+  strcpy (temp_filename + base_len, TEMP_FILE);\n+\n+  if (suffix)\n+    strcat (temp_filename, suffix);\n \n-  fd = mkstemp (temp_filename);\n-  /* If mkstemp failed, then something bad is happening.  Maybe we should\n+  fd = mkstemps (temp_filename, suffix_len);\n+  /* If mkstemps failed, then something bad is happening.  Maybe we should\n      issue a message about a possible security attack in progress?  */\n   if (fd == -1)\n     abort ();"}, {"sha": "442af243459f7df88e12dcca54cfb2d833fef1ac", "filename": "gcc/collect2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "patch": "@@ -60,7 +60,7 @@ Boston, MA 02111-1307, USA.  */\n #define WEXITSTATUS(S) (((S) & 0xff00) >> 8)\n #endif\n \n-extern char *make_temp_file ();\n+extern char *make_temp_file PROTO ((char *));\n \f\n /* On certain systems, we have code that works by scanning the object file\n    directly.  But this code uses system-specific header files and library\n@@ -1129,13 +1129,13 @@ main (argc, argv)\n   *ld1++ = *ld2++ = ld_file_name;\n \n   /* Make temp file names.  */\n-  c_file = make_temp_file ();\n-  o_file = make_temp_file ();\n+  c_file = make_temp_file (\".c\");\n+  o_file = make_temp_file (\".o\");\n #ifdef COLLECT_EXPORT_LIST\n-  export_file = make_temp_file ();\n-  import_file = make_temp_file ();\n+  export_file = make_temp_file (\".x\");\n+  import_file = make_temp_file (\".p\");\n #endif\n-  ldout = make_temp_file ();\n+  ldout = make_temp_file (\".ld\");\n   *c_ptr++ = c_file_name;\n   *c_ptr++ = \"-lang-c\";\n   *c_ptr++ = \"-c\";"}, {"sha": "bb33edf4039b76737a408396fbb5060fdba09859", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "patch": "@@ -1276,7 +1276,7 @@ static int argbuf_index;\n \n #ifdef MKTEMP_EACH_FILE\n \n-extern char *make_temp_file PROTO((void));\n+extern char *make_temp_file PROTO((char *));\n \n /* This is the list of suffixes and codes (%g/%u/%U) and the associated\n    temp file.  */\n@@ -3524,7 +3524,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t    t->length = p - suffix;\n \t\t    t->suffix = save_string (suffix, p - suffix);\n \t\t    t->unique = (c != 'g');\n-\t\t    temp_filename = make_temp_file ();\n+\t\t    temp_filename = make_temp_file (suffix);\n \t\t    temp_filename_length = strlen (temp_filename);\n \t\t    t->filename = temp_filename;\n \t\t    t->filename_length = temp_filename_length;"}, {"sha": "d55e5837f15883491012a948a3678e8b3806872e", "filename": "gcc/mkstemp.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fmkstemp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195/gcc%2Fmkstemp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkstemp.c?ref=20f2d03a8ebe8a679ebfd477ce1dd74f1e94a195", "patch": "@@ -1,5 +1,5 @@\n /* Copyright (C) 1991, 1992, 1996, 1998 Free Software Foundation, Inc.\n-   This file is part of the GNU C Library.\n+   This file is derived from mkstemp.c from the GNU C Library.\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Library General Public License as\n@@ -43,12 +43,21 @@ typedef unsigned long gcc_uint64_t;\n #endif\n \n /* Generate a unique temporary file name from TEMPLATE.\n-   The last six characters of TEMPLATE must be \"XXXXXX\";\n+\n+   TEMPLATE has the form:\n+\n+   <path>/ccXXXXXX<suffix>\n+\n+   SUFFIX_LEN tells us how long <suffix> is (it can be zero length).\n+\n+   The last six characters of TEMPLATE before <suffix> must be \"XXXXXX\";\n    they are replaced with a string that makes the filename unique.\n+\n    Returns a file descriptor open on the file for reading and writing.  */\n int\n-mkstemp (template)\n+mkstemps (template, suffix_len)\n      char *template;\n+     int suffix_len;\n {\n   static const char letters[]\n     = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n@@ -61,13 +70,14 @@ mkstemp (template)\n   int count;\n \n   len = strlen (template);\n-  if (len < 6 || strcmp (&template[len - 6], \"XXXXXX\"))\n+\n+  if (len < 6 + suffix_len\n+      || strncmp (&template[len - 6 - suffix_len], \"XXXXXX\", 6))\n     {\n       return -1;\n     }\n \n-  /* This is where the Xs start.  */\n-  XXXXXX = &template[len - 6];\n+  XXXXXX = &template[len - 6 - suffix_len];\n \n #ifdef HAVE_GETTIMEOFDAY\n   /* Get some more or less random data.  */"}]}