{"sha": "a59afbe2fecf938caff8462378acc0506ea4ff5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5YWZiZTJmZWNmOTM4Y2FmZjg0NjIzNzhhY2MwNTA2ZWE0ZmY1Yw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-01-16T23:43:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-01-16T23:43:05Z"}, "message": "re PR tree-optimization/79090 (DSE wrongly removes store at variable offset)\n\n2017-01-16  Jeff Law  <law@redhat.com>\n\n\tPR tree-optimization/79090\n\tPR tree-optimization/33562\n\tPR tree-optimization/61912\n\tPR tree-optimization/77485\n\t* tree-ssa-dse.c (compute_trims): Accept STMT argument.  Dump STMT\n\tand computed trims into the dump file.\n\n\tPR tree-optimization/79090\n\tPR tree-optimization/33562\n\tPR tree-optimization/61912\n\tPR tree-optimization/77485\n\t* tree-ssa-dse.c (compute_trims): Accept STMT argument.  Dump STMT\n\tand computed trims into the dump file.\n\nFrom-SVN: r244509", "tree": {"sha": "11d8f3ff64aa25c82afcf28c2a86958b42e643b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11d8f3ff64aa25c82afcf28c2a86958b42e643b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a59afbe2fecf938caff8462378acc0506ea4ff5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59afbe2fecf938caff8462378acc0506ea4ff5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59afbe2fecf938caff8462378acc0506ea4ff5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59afbe2fecf938caff8462378acc0506ea4ff5c/comments", "author": null, "committer": null, "parents": [{"sha": "af995bf0190c406341949d0e6a24636ac906b1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af995bf0190c406341949d0e6a24636ac906b1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af995bf0190c406341949d0e6a24636ac906b1b1"}], "stats": {"total": 128, "additions": 122, "deletions": 6}, "files": [{"sha": "850752829e61baaa757d9c9a7d022b34bc6a6a07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a59afbe2fecf938caff8462378acc0506ea4ff5c", "patch": "@@ -1,3 +1,12 @@\n+2017-01-16  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/79090\n+\tPR tree-optimization/33562\n+\tPR tree-optimization/61912\n+\tPR tree-optimization/77485\n+\t* tree-ssa-dse.c (compute_trims): Accept STMT argument.  Dump STMT\n+\tand computed trims into the dump file.\n+\n 2017-01-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Remove."}, {"sha": "09c5d52aa4bf1ec33a7426cc67ef8454415a3e9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a59afbe2fecf938caff8462378acc0506ea4ff5c", "patch": "@@ -1,3 +1,12 @@\n+2017-01-16  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/33562\n+\tPR tree-optimization/61912\n+\tPR tree-optimization/77485\n+\tPR tree-optimization/79090\n+\t* gcc.dg/tree-ssa/ssa-dse-29.c: New test.\n+\t* g++.dg/tree-ssa/ssa-dse-2.C: New test.\n+\n 2017-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/79089"}, {"sha": "d69edd2dedcd07bde1427f8a6518ad211714dd0d", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-dse-2.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-2.C?ref=a59afbe2fecf938caff8462378acc0506ea4ff5c", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse2-details\" } */\n+\n+typedef long unsigned int size_t;\n+extern \"C\"\n+{\n+  extern void *memmove (void *__dest, const void *__src, size_t __n) throw ()\n+    __attribute__ ((__nonnull__ (1, 2)));\n+}\n+extern void abort () __attribute__ ((__noreturn__));\n+struct vec_prefix { unsigned m_num; };\n+struct vl_embed { };\n+struct vl_ptr { };\n+struct va_heap { typedef vl_ptr default_layout; };\n+template < typename T, typename A = va_heap, typename L = typename A::default_layout > struct vec { };\n+template < typename T, typename A > struct vec < T, A, vl_embed >\n+{\n+  unsigned length (void) const { return m_vecpfx.  m_num; }\n+  bool is_empty (void) const { return m_vecpfx.  m_num == 0; }\n+  void block_remove (unsigned, unsigned);\n+  vec_prefix m_vecpfx;\n+  T m_vecdata[1];\n+};\n+template < typename T, typename A > inline void vec < T, A, vl_embed >::block_remove (unsigned ix, unsigned len)\n+{\n+  T * slot = &m_vecdata[ix];\n+  m_vecpfx.m_num -= len;\n+  memmove (slot, slot + len, (m_vecpfx.m_num - ix) * sizeof (T));\n+}\n+\n+template < typename T > struct vec < T, va_heap, vl_ptr >\n+{\n+  bool is_empty (void) const { return m_vec ?  m_vec-> is_empty () : true; }\n+  unsigned length (void) const { return m_vec ?  m_vec-> length () : 0; }\n+  void block_remove (unsigned, unsigned);\n+  vec < T, va_heap, vl_embed > * m_vec;\n+};\n+template < typename T > inline void vec < T, va_heap, vl_ptr >::block_remove (unsigned ix, unsigned len)\n+{\n+  m_vec->block_remove (ix, len);\n+}\n+\n+typedef struct _list_node * _list_t;\n+typedef struct _expr expr_def;\n+typedef expr_def * expr_t;\n+typedef _list_t av_set_t;\n+static vec < expr_t > vec_av_set;\n+bool\n+fill_vec_av_set (av_set_t av)\n+{\n+  if (vec_av_set.length () > 0)\n+    vec_av_set.block_remove (0, vec_av_set.length ());\n+  ((!(vec_av_set.is_empty ())? abort () , 0 : 0));\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Trimming statement .head = -\" \"dse2\" } } */\n+/* { dg-final { scan-tree-dump \"Deleted dead call: \" \"dse2\" } } */\n+\n+"}, {"sha": "31529e7caedbf2f4ec2c5b8e53eb7fb946d2de6f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-29.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c?ref=a59afbe2fecf938caff8462378acc0506ea4ff5c", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse-details\" } */\n+\n+struct z {\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+int\n+foo(int cond, struct z *s)\n+{\n+\n+  if (cond)\n+    {\n+      s->a = 1;\n+      s->b = 2;\n+      s->c = 3;\n+    }\n+  __builtin_memset (s, 0, sizeof (struct z));\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleted dead store\" 3 \"dse1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse2\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse3\"} } */\n+"}, {"sha": "84c0b11f53b87340194ff59d664028d856a94a38", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59afbe2fecf938caff8462378acc0506ea4ff5c/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=a59afbe2fecf938caff8462378acc0506ea4ff5c", "patch": "@@ -212,10 +212,14 @@ setup_live_bytes_from_ref (ao_ref *ref, sbitmap live_bytes)\n    tail of ORIG resulting in a bitmap that is a superset of LIVE.\n \n    Store the number of elements trimmed from the head and tail in\n-   TRIM_HEAD and TRIM_TAIL.  */\n+   TRIM_HEAD and TRIM_TAIL.\n+\n+   STMT is the statement being trimmed and is used for debugging dump\n+   output only.  */\n \n static void\n-compute_trims (ao_ref *ref, sbitmap live, int *trim_head, int *trim_tail)\n+compute_trims (ao_ref *ref, sbitmap live, int *trim_head, int *trim_tail,\n+\t       gimple *stmt)\n {\n   /* We use sbitmaps biased such that ref->offset is bit zero and the bitmap\n      extends through ref->size.  So we know that in the original bitmap\n@@ -231,6 +235,15 @@ compute_trims (ao_ref *ref, sbitmap live, int *trim_head, int *trim_tail)\n   int first_orig = 0;\n   int first_live = bitmap_first_set_bit (live);\n   *trim_head = (first_live - first_orig) & ~0x1;\n+\n+  if ((*trim_head || *trim_tail)\n+      && dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"  Trimming statement (head = %d, tail = %d): \",\n+\t       *trim_head, *trim_tail);\n+      print_gimple_stmt (dump_file, stmt, dump_flags, 0);\n+      fprintf (dump_file, \"\\n\");\n+    }\n }\n \n /* STMT initializes an object from COMPLEX_CST where one or more of the\n@@ -244,7 +257,7 @@ static void\n maybe_trim_complex_store (ao_ref *ref, sbitmap live, gimple *stmt)\n {\n   int trim_head, trim_tail;\n-  compute_trims (ref, live, &trim_head, &trim_tail);\n+  compute_trims (ref, live, &trim_head, &trim_tail, stmt);\n \n   /* The amount of data trimmed from the head or tail must be at\n      least half the size of the object to ensure we're trimming\n@@ -296,7 +309,7 @@ maybe_trim_constructor_store (ao_ref *ref, sbitmap live, gimple *stmt)\n \n   int head_trim = 0;\n   int tail_trim = 0;\n-  compute_trims (ref, live, &head_trim, &tail_trim);\n+  compute_trims (ref, live, &head_trim, &tail_trim, stmt);\n \n   /* Now we want to replace the constructor initializer\n      with memset (object + head_trim, 0, size - head_trim - tail_trim).  */\n@@ -384,7 +397,7 @@ maybe_trim_memstar_call (ao_ref *ref, sbitmap live, gimple *stmt)\n     case BUILT_IN_MEMMOVE:\n       {\n \tint head_trim, tail_trim;\n-\tcompute_trims (ref, live, &head_trim, &tail_trim);\n+\tcompute_trims (ref, live, &head_trim, &tail_trim, stmt);\n \n \t/* Tail trimming is easy, we can just reduce the count.  */\n         if (tail_trim)\n@@ -405,7 +418,7 @@ maybe_trim_memstar_call (ao_ref *ref, sbitmap live, gimple *stmt)\n     case BUILT_IN_MEMSET:\n       {\n \tint head_trim, tail_trim;\n-\tcompute_trims (ref, live, &head_trim, &tail_trim);\n+\tcompute_trims (ref, live, &head_trim, &tail_trim, stmt);\n \n \t/* Tail trimming is easy, we can just reduce the count.  */\n         if (tail_trim)"}]}