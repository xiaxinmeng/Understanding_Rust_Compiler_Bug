{"sha": "60d9f254876a00260992b2f37639ef4d82d9db8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkOWYyNTQ4NzZhMDAyNjA5OTJiMmYzNzYzOWVmNGQ4MmQ5ZGI4Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-31T07:16:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-31T12:54:03Z"}, "message": "libstdc++: Prefer double to long double in std::shuffle_order_engine\n\nThe transition algorithm for std::shuffle_order_engine uses long double\nto ensure that the value (max() - min() + 1) can be accurately\nrepresented, to avoid bias in the shuffling. However, when the base\nengine's range is small enough we can avoid slower long double\narithmetic by using double. For example, long double is unnecessary for\nany base engine returning 32-bit values.\n\nThis makes std::knuth_b::operator() about 15% faster on x86_64, and\nprobably even more on targets where long double uses soft-float.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/random.h (independent_bit_engine): Fix typo\n\tin comment.\n\t(shuffle_order_engine): Fix incorrect description in comment.\n\t* include/bits/random.tcc (__representable_as_double\n\t(__p1_representable_as_double): New helper functions.\n\t(shuffle_order_engine::operator()): Use double for calculation\n\tif (max() - min() + 1) is representable as double.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n\tline number.", "tree": {"sha": "d66e59eeb69d6a4960e67224b7093d6d8eaa8923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66e59eeb69d6a4960e67224b7093d6d8eaa8923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d9f254876a00260992b2f37639ef4d82d9db8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d9f254876a00260992b2f37639ef4d82d9db8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d9f254876a00260992b2f37639ef4d82d9db8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d9f254876a00260992b2f37639ef4d82d9db8f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7a23a3fab74ebd45203d48fa09681c9945ee7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7a23a3fab74ebd45203d48fa09681c9945ee7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7a23a3fab74ebd45203d48fa09681c9945ee7a"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "32537f80df7210d3e439d29d7b306387eb20aa6d", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d9f254876a00260992b2f37639ef4d82d9db8f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d9f254876a00260992b2f37639ef4d82d9db8f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=60d9f254876a00260992b2f37639ef4d82d9db8f", "patch": "@@ -1099,7 +1099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * Produces random numbers by combining random numbers from some base\n-   * engine to produce random numbers with a specifies number of bits @p __w.\n+   * engine to produce random numbers with a specified number of bits @p __w.\n    */\n   template<typename _RandomNumberEngine, size_t __w, typename _UIntType>\n     class independent_bits_engine\n@@ -1316,9 +1316,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \n   /**\n-   * @brief Produces random numbers by combining random numbers from some\n-   * base engine to produce random numbers with a specifies number of bits\n-   * @p __k.\n+   * @brief Produces random numbers by reordering random numbers from some\n+   * base engine.\n+   *\n+   * The values from the base engine are stored in a sequence of size @p __k\n+   * and shuffled by an algorithm that depends on those values.\n    */\n   template<typename _RandomNumberEngine, size_t __k>\n     class shuffle_order_engine"}, {"sha": "3205442f2f693064ea04d3db12b2ebeb80f94b23", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d9f254876a00260992b2f37639ef4d82d9db8f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d9f254876a00260992b2f37639ef4d82d9db8f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=60d9f254876a00260992b2f37639ef4d82d9db8f", "patch": "@@ -804,13 +804,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr size_t\n     shuffle_order_engine<_RandomNumberEngine, __k>::table_size;\n \n+  namespace __detail\n+  {\n+    // Determine whether an integer is representable as double.\n+    template<typename _Tp>\n+      constexpr bool\n+      __representable_as_double(_Tp __x) noexcept\n+      {\n+\tstatic_assert(numeric_limits<_Tp>::is_integer);\n+\tstatic_assert(!numeric_limits<_Tp>::is_signed);\n+\t// All integers <= 2^53 are representable.\n+\treturn (__x <= (1ull << __DBL_MANT_DIG__))\n+\t  // Between 2^53 and 2^54 only even numbers are representable.\n+\t  || (!(__x & 1) && __detail::__representable_as_double(__x >> 1));\n+      }\n+\n+    // Determine whether x+1 is representable as double.\n+    template<typename _Tp>\n+      constexpr bool\n+      __p1_representable_as_double(_Tp __x) noexcept\n+      {\n+\tstatic_assert(numeric_limits<_Tp>::is_integer);\n+\tstatic_assert(!numeric_limits<_Tp>::is_signed);\n+\treturn numeric_limits<_Tp>::digits < __DBL_MANT_DIG__\n+\t  || (bool(__x + 1u) // return false if x+1 wraps around to zero\n+\t      && __detail::__representable_as_double(__x + 1u));\n+      }\n+  }\n+\n   template<typename _RandomNumberEngine, size_t __k>\n     typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type\n     shuffle_order_engine<_RandomNumberEngine, __k>::\n     operator()()\n     {\n-      size_t __j = __k * ((_M_y - _M_b.min())\n-\t\t\t  / (_M_b.max() - _M_b.min() + 1.0L));\n+      constexpr result_type __range = max() - min();\n+      size_t __j = __k;\n+      const result_type __y = _M_y - min();\n+      // Avoid using slower long double arithmetic if possible.\n+      if _GLIBCXX17_CONSTEXPR (__detail::__p1_representable_as_double(__range))\n+\t__j *= __y / (__range + 1.0);\n+      else\n+\t__j *= __y / (__range + 1.0L);\n       _M_y = _M_v[__j];\n       _M_v[__j] = _M_b();\n "}, {"sha": "ba252ef34fe46d7a53033899d57385502d366326", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d9f254876a00260992b2f37639ef4d82d9db8f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d9f254876a00260992b2f37639ef4d82d9db8f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=60d9f254876a00260992b2f37639ef4d82d9db8f", "patch": "@@ -12,4 +12,4 @@ auto x = std::generate_canonical<std::size_t,\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 167 }\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3312 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3346 }"}]}