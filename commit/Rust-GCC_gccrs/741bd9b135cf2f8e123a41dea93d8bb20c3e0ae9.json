{"sha": "741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQxYmQ5YjEzNWNmMmY4ZTEyM2E0MWRlYTkzZDhiYjIwYzNlMGFlOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-02-24T11:03:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-02-24T11:03:08Z"}, "message": "decl.c (gnat_to_gnu_field): Do not remove the wrapper around a justified modular type if...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Do not remove the wrapper\n\taround a justified modular type if it doesn't have the same scalar\n\tstorage order as the enclosing record type.\n\nFrom-SVN: r245710", "tree": {"sha": "f47f21e750a47b6012707167a1c79015a0b1111d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f47f21e750a47b6012707167a1c79015a0b1111d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9/comments", "author": null, "committer": null, "parents": [{"sha": "70e1d145c876a7880a03cd1f1777c0d73f0ba1f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e1d145c876a7880a03cd1f1777c0d73f0ba1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e1d145c876a7880a03cd1f1777c0d73f0ba1f1"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "e4ce4d52e0f900222d86ac18a79d7c6b8b823044", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9", "patch": "@@ -1,3 +1,9 @@\n+2017-02-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_field): Do not remove the wrapper\n+\taround a justified modular type if it doesn't have the same scalar\n+\tstorage order as the enclosing record type.\n+\n 2017-02-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): Do not apply special handling"}, {"sha": "35fd92f33ddb4cc74e87eb6609160d8ba3ecee23", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=741bd9b135cf2f8e123a41dea93d8bb20c3e0ae9", "patch": "@@ -7031,6 +7031,7 @@ static tree\n gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t   bool definition, bool debug_info_p)\n {\n+  const Entity_Id gnat_record_type = Underlying_Type (Scope (gnat_field));\n   const Entity_Id gnat_field_type = Etype (gnat_field);\n   const bool is_aliased\n     = Is_Aliased (gnat_field);\n@@ -7117,8 +7118,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   if (Present (Component_Clause (gnat_field)))\n     {\n       Node_Id gnat_clause = Component_Clause (gnat_field);\n-      Entity_Id gnat_parent\n-\t= Parent_Subtype (Underlying_Type (Scope (gnat_field)));\n+      Entity_Id gnat_parent = Parent_Subtype (gnat_record_type);\n \n       gnu_pos = UI_To_gnu (Component_Bit_Offset (gnat_field), bitsizetype);\n       gnu_size = validate_size (Esize (gnat_field), gnu_field_type,\n@@ -7237,7 +7237,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \n   /* If the record has rep clauses and this is the tag field, make a rep\n      clause for it as well.  */\n-  else if (Has_Specified_Layout (Scope (gnat_field))\n+  else if (Has_Specified_Layout (gnat_record_type)\n \t   && Chars (gnat_field) == Name_uTag)\n     {\n       gnu_pos = bitsize_zero_node;\n@@ -7274,11 +7274,14 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n       /* If the field's type is justified modular, we would need to remove\n \t the wrapper to (better) meet the layout requirements.  However we\n \t can do so only if the field is not aliased to preserve the unique\n-\t layout and if the prescribed size is not greater than that of the\n-\t packed array to preserve the justification.  */\n+\t layout, if it has the same storage order as the enclosing record\n+\t and if the prescribed size is not greater than that of the packed\n+\t array to preserve the justification.  */\n       if (!needs_strict_alignment\n \t  && TREE_CODE (gnu_field_type) == RECORD_TYPE\n \t  && TYPE_JUSTIFIED_MODULAR_P (gnu_field_type)\n+\t  && TYPE_REVERSE_STORAGE_ORDER (gnu_field_type)\n+\t     == Reverse_Storage_Order (gnat_record_type)\n \t  && tree_int_cst_compare (gnu_size, TYPE_ADA_SIZE (gnu_field_type))\n \t       <= 0)\n \tgnu_field_type = TREE_TYPE (TYPE_FIELDS (gnu_field_type));"}]}