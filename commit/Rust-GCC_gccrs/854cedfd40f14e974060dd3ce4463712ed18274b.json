{"sha": "854cedfd40f14e974060dd3ce4463712ed18274b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0Y2VkZmQ0MGYxNGU5NzQwNjBkZDNjZTQ0NjM3MTJlZDE4Mjc0Yg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-11-30T16:44:27Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-11-30T16:44:27Z"}, "message": "Initialize backtrace state once\n\nFrom backtrace.h for backtrace_create_state:\n\n   Calling this function allocates resources that can not be freed.\n   There is no backtrace_free_state function.  The state is used to\n   cache information that is expensive to recompute.  Programs are\n   expected to call this function at most once and to save the return\n   value for all later calls to backtrace functions.\n\nSo instead of calling backtrace_create_state every time we wish to\nshow a backtrace, do it once and store the result in a static\nvariable.  libbacktrace allows multiple threads to access the state,\nso no need to use TLS.\n\nRegtested on x86_64-pc-linux-gnu.\n\nlibgfortran/ChangeLog:\n\n2018-11-30  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/88137\n\t* runtime/backtrace.c (show_backtrace): Make lbstate a static\n\tvariable, initialize once.\n\nFrom-SVN: r266677", "tree": {"sha": "40de8bda791fc96b25048a081dc59b2d314e2f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40de8bda791fc96b25048a081dc59b2d314e2f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854cedfd40f14e974060dd3ce4463712ed18274b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854cedfd40f14e974060dd3ce4463712ed18274b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854cedfd40f14e974060dd3ce4463712ed18274b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854cedfd40f14e974060dd3ce4463712ed18274b/comments", "author": null, "committer": null, "parents": [{"sha": "5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd624fbde5f6307fb71041a38aa0914eab9f6f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd624fbde5f6307fb71041a38aa0914eab9f6f9"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "f1f7cbe4effee5e164b744b3f3d92d0932ffb35a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854cedfd40f14e974060dd3ce4463712ed18274b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854cedfd40f14e974060dd3ce4463712ed18274b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=854cedfd40f14e974060dd3ce4463712ed18274b", "patch": "@@ -1,3 +1,9 @@\n+2018-11-30  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/88137\n+\t* runtime/backtrace.c (show_backtrace): Make lbstate a static\n+\tvariable, initialize once.\n+\n 2018-11-23  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* runtime/error.c (MAGIC): Remove."}, {"sha": "3fc973a5e6daf7cfa42b836d1213ca13cb915ee2", "filename": "libgfortran/runtime/backtrace.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854cedfd40f14e974060dd3ce4463712ed18274b/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854cedfd40f14e974060dd3ce4463712ed18274b/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=854cedfd40f14e974060dd3ce4463712ed18274b", "patch": "@@ -146,11 +146,15 @@ full_callback (void *data, uintptr_t pc, const char *filename,\n void\n show_backtrace (bool in_signal_handler)\n {\n-  struct backtrace_state *lbstate;\n+  /* Note that libbacktrace allows the state to be accessed from\n+     multiple threads, so we don't need to use a TLS variable for the\n+     state here.  */\n+  static struct backtrace_state *lbstate;\n   struct mystate state = { 0, false, in_signal_handler };\n- \n-  lbstate = backtrace_create_state (NULL, __gthread_active_p (),\n-\t\t\t\t    error_callback, NULL);\n+\n+  if (!lbstate)\n+    lbstate = backtrace_create_state (NULL, __gthread_active_p (),\n+\t\t\t\t      error_callback, NULL);\n \n   if (lbstate == NULL)\n     return;"}]}