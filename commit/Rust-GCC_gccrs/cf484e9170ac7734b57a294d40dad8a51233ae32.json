{"sha": "cf484e9170ac7734b57a294d40dad8a51233ae32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0ODRlOTE3MGFjNzczNGI1N2EyOTRkNDBkYWQ4YTUxMjMzYWUzMg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-26T13:55:30Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-26T13:55:30Z"}, "message": "class.c (utf8_decl_list): Delete.\n\n\t* class.c (utf8_decl_list): Delete.\n\t(build_utf8_ref): Remove references to it.\n\t* java-tree.h (all_class_list): Delete.\n\t(predef_filenames): Delete.\n\t(enum java_tree_index) [JTI ALL_CLASS_LIST,JTI_PREDEF_FILENAMES]:\n\tDelete.\n\t* jcf-parse.c (parse_roots): Decrease size to 2.\n\t(current_file_list): Convert to a VEC.\n\t(all_class_list): Declare.\n\t(jcf_parse): Adjust for new type of all_class_list.\n\t(java_layout_seen_class_methods): Likewise.\n\t(predefined_filenames): Declare.\n\t(add_predefined_file): Use it.\n\t(predefined_filename_p): Likewise.\n\t(java_parse_file): Adjust for new type of current_file_list.                                                                                                                                                     *\n\nFrom-SVN: r159870", "tree": {"sha": "d7090aa8ea8d699205d27a0d02e5b8fbb2502533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7090aa8ea8d699205d27a0d02e5b8fbb2502533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf484e9170ac7734b57a294d40dad8a51233ae32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf484e9170ac7734b57a294d40dad8a51233ae32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf484e9170ac7734b57a294d40dad8a51233ae32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf484e9170ac7734b57a294d40dad8a51233ae32/comments", "author": null, "committer": null, "parents": [{"sha": "5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0f4a3bc5e8f25e586b6983d6c8138a89aa030e"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "6b8100df271eee91cca6fe444ab56aee3f7db28e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cf484e9170ac7734b57a294d40dad8a51233ae32", "patch": "@@ -1,3 +1,21 @@\n+2010-05-26  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* class.c (utf8_decl_list): Delete.\n+\t(build_utf8_ref): Remove references to it.\n+\t* java-tree.h (all_class_list): Delete.\n+\t(predef_filenames): Delete.\n+\t(enum java_tree_index) [JTI ALL_CLASS_LIST,JTI_PREDEF_FILENAMES]:\n+\tDelete.\n+\t* jcf-parse.c (parse_roots): Decrease size to 2.\n+\t(current_file_list): Convert to a VEC.\n+\t(all_class_list): Declare.\n+\t(jcf_parse): Adjust for new type of all_class_list.\n+\t(java_layout_seen_class_methods): Likewise.\n+\t(predefined_filenames): Declare.\n+\t(add_predefined_file): Use it.\n+\t(predefined_filename_p): Likewise.\n+\t(java_parse_file): Adjust for new type of current_file_list.                                                                                                                                                     *\n+\n 2010-05-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lang.c (java_classify_record): Return RECORD_IS_INTERFACE"}, {"sha": "5f91ddc32d1bc2c84514e6ce4f29982220595a2c", "filename": "gcc/java/class.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=cf484e9170ac7734b57a294d40dad8a51233ae32", "patch": "@@ -930,8 +930,6 @@ hashUtf8String (const char *str, int len)\n   return hash;\n }\n \n-static GTY(()) tree utf8_decl_list = NULL_TREE;\n-\n tree\n build_utf8_ref (tree name)\n {\n@@ -996,14 +994,12 @@ build_utf8_ref (tree name)\n \t}\n     }\n \n-  TREE_CHAIN (decl) = utf8_decl_list;\n   layout_decl (decl, 0);\n   DECL_SIZE (decl) = TYPE_SIZE (ctype);\n   DECL_SIZE_UNIT (decl) = TYPE_SIZE_UNIT (ctype);\n   pushdecl (decl);\n   rest_of_decl_compilation (decl, global_bindings_p (), 0);\n   varpool_mark_needed_node (varpool_node (decl));\n-  utf8_decl_list = decl;\n   ref = build1 (ADDR_EXPR, utf8const_ptr_type, decl);\n   IDENTIFIER_UTF8_REF (name) = ref;\n   return ref;"}, {"sha": "0482abec36c1b8beb7847671b74f416c2db330ef", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=cf484e9170ac7734b57a294d40dad8a51233ae32", "patch": "@@ -102,10 +102,6 @@ struct JCF;\n #define output_class \\\n   java_global_trees[JTI_OUTPUT_CLASS]\n \n-/* List of all class DECLs seen so far.  */\n-#define all_class_list \\\n-  java_global_trees[JTI_ALL_CLASS_LIST]\n-\n /* List of virtual decls referred to by this translation unit, used to\n    generate virtual method offset symbol table.  */\n \n@@ -370,9 +366,6 @@ enum java_tree_index\n   JTI_MAIN_CLASS,\n   JTI_CURRENT_CLASS,\n   JTI_OUTPUT_CLASS,\n-  JTI_ALL_CLASS_LIST,\n-\n-  JTI_PREDEF_FILENAMES,\n \n   JTI_MAX\n };\n@@ -630,9 +623,6 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n #define nativecode_ptr_array_type_node \\\n   java_global_trees[JTI_NATIVECODE_PTR_ARRAY_TYPE_NODE]\n \n-#define predef_filenames \\\n-  java_global_trees[JTI_PREDEF_FILENAMES]\n-\n #define nativecode_ptr_type_node ptr_type_node\n \n /* The decl for \"_Jv_ResolvePoolEntry\".  */"}, {"sha": "9ce5561b51fb37fa74f6404f04898668c160e99c", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=cf484e9170ac7734b57a294d40dad8a51233ae32", "patch": "@@ -71,7 +71,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n extern struct obstack temporary_obstack;\n \n-static GTY(()) tree parse_roots[3];\n+static GTY(()) tree parse_roots[2];\n \n /* The FIELD_DECL for the current field.  */\n #define current_field parse_roots[0]\n@@ -80,14 +80,17 @@ static GTY(()) tree parse_roots[3];\n #define current_method parse_roots[1]\n \n /* A list of TRANSLATION_UNIT_DECLs for the files to be compiled.  */\n-#define current_file_list parse_roots[2]\n+static GTY(()) VEC(tree,gc) *current_file_list;\n \n /* Line 0 in current file, if compiling from bytecode. */\n static location_t file_start_location;\n \n /* The Java archive that provides main_class;  the main input file. */\n static GTY(()) struct JCF * main_jcf;\n \n+/* A list of all the class DECLs seen so far.  */\n+static GTY(()) VEC(tree,gc) *all_class_list;\n+\n /* The number of source files passed to us by -fsource-filename and an\n    array of pointers to each name.  Used by find_sourcefile().  */\n static int num_files = 0;\n@@ -1479,8 +1482,7 @@ jcf_parse (JCF* jcf)\n   if (current_class == object_type_node)\n     layout_class_methods (object_type_node);\n   else\n-    all_class_list = tree_cons (NULL_TREE,\n-\t\t\t\tTYPE_NAME (current_class), all_class_list );\n+    VEC_safe_push (tree, gc, all_class_list, TYPE_NAME (current_class));\n }\n \n /* If we came across inner classes, load them now. */\n@@ -1511,16 +1513,17 @@ duplicate_class_warning (const char *filename)\n static void\n java_layout_seen_class_methods (void)\n {\n-  tree previous_list = all_class_list;\n-  tree end = NULL_TREE;\n-  tree current;\n+  unsigned start = 0;\n+  unsigned end = VEC_length (tree, all_class_list);\n \n   while (1)\n     {\n-      for (current = previous_list;\n-\t   current != end; current = TREE_CHAIN (current))\n+      unsigned ix;\n+      unsigned new_length;\n+\n+      for (ix = start; ix != end; ix++)\n         {\n-\t  tree decl = TREE_VALUE (current);\n+\t  tree decl = VEC_index (tree, all_class_list, ix);\n           tree cls = TREE_TYPE (decl);\n \n \t  input_location = DECL_SOURCE_LOCATION (decl);\n@@ -1533,11 +1536,11 @@ java_layout_seen_class_methods (void)\n \n       /* Note that new classes might have been added while laying out\n          methods, changing the value of all_class_list.  */\n-\n-      if (previous_list != all_class_list)\n+      new_length = VEC_length (tree, all_class_list);\n+      if (end != new_length)\n \t{\n-\t  end = previous_list;\n-\t  previous_list = all_class_list;\n+\t  start = end;\n+\t  end = new_length;\n \t}\n       else\n \tbreak;\n@@ -1664,22 +1667,24 @@ parse_class_file (void)\n   input_location = save_location;\n }\n \n+static VEC(tree,gc) *predefined_filenames;\n+\n void\n add_predefined_file (tree name)\n {\n-  predef_filenames = tree_cons (NULL_TREE, name, predef_filenames);\n+  VEC_safe_push (tree, gc, predefined_filenames, name);\n }\n \n int\n predefined_filename_p (tree node)\n {\n-  tree iter;\n+  unsigned ix;\n+  tree f;\n+\n+  for (ix = 0; VEC_iterate (tree, predefined_filenames, ix, f); ix++)\n+    if (f == node)\n+      return 1;\n \n-  for (iter = predef_filenames; iter != NULL_TREE; iter = TREE_CHAIN (iter))\n-    {\n-      if (TREE_VALUE (iter) == node)\n-\treturn 1;\n-    }\n   return 0;\n }\n \n@@ -1735,6 +1740,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n   tree node;\n   FILE *finput = NULL;\n   int in_quotes = 0;\n+  unsigned ix;\n  \n   bitmap_obstack_initialize (&bit_obstack);\n   field_offsets = BITMAP_ALLOC (&bit_obstack);\n@@ -1834,8 +1840,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t    {\n \t      tree file_decl = build_decl (input_location,\n \t\t\t\t\t   TRANSLATION_UNIT_DECL, node, NULL);\n-\t      TREE_CHAIN (file_decl) = current_file_list;\n-\t      current_file_list = file_decl;\n+\t      VEC_safe_push (tree, gc, current_file_list, file_decl);\n \t      IS_A_COMMAND_LINE_FILENAME_P (node) = 1;\n \t    }\n \t}\n@@ -1853,17 +1858,16 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       const char *resource_filename;\n       \n       /* Only one resource file may be compiled at a time.  */\n-      assert (TREE_CHAIN (current_file_list) == NULL);\n+      assert (VEC_length (tree, current_file_list) == 1);\n \n-      resource_filename = IDENTIFIER_POINTER (DECL_NAME (current_file_list));\n+      resource_filename = IDENTIFIER_POINTER (DECL_NAME (VEC_index (tree, current_file_list, 0)));\n       compile_resource_file (resource_name, resource_filename);\n \n       goto finish;\n     }\n \n   current_jcf = main_jcf;\n-  current_file_list = nreverse (current_file_list);\n-  for (node = current_file_list; node; node = TREE_CHAIN (node))\n+  for (ix = 0; VEC_iterate (tree, current_file_list, ix, node); ix++)\n     {\n       unsigned char magic_string[4];\n       char *real_path;\n@@ -1952,7 +1956,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t}\n     }\n \n-  for (node = current_file_list; node; node = TREE_CHAIN (node))\n+  for (ix = 0; VEC_iterate (tree, current_file_list, ix, node); ix++)\n     {\n       input_location = DECL_SOURCE_LOCATION (node);\n       if (CLASS_FILE_P (node))"}, {"sha": "56a0a1b04d6309352586425d337430c92cbc328e", "filename": "gcc/java/resource.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf484e9170ac7734b57a294d40dad8a51233ae32/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=cf484e9170ac7734b57a294d40dad8a51233ae32", "patch": "@@ -43,7 +43,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #endif\n \n /* A list of all the resources files.  */\n-static GTY(()) tree resources = NULL;\n+static GTY(()) VEC(tree,gc) *resources;\n \n void\n compile_resource_data (const char *name, const char *buffer, int length)\n@@ -86,13 +86,14 @@ compile_resource_data (const char *name, const char *buffer, int length)\n   rest_of_decl_compilation (decl, global_bindings_p (), 0);\n   varpool_finalize_decl (decl);\n \n-  resources = tree_cons (NULL_TREE, decl, resources);\n+  VEC_safe_push (tree, gc, resources, decl);\n }\n \n void\n write_resource_constructor (tree *list_p)\n {\n-  tree iter, t, register_resource_fn;\n+  tree decl, t, register_resource_fn;\n+  unsigned ix;\n \n   if (resources == NULL)\n     return;\n@@ -105,9 +106,9 @@ write_resource_constructor (tree *list_p)\n   register_resource_fn = t;\n \n   /* Write out entries in the same order in which they were defined.  */\n-  for (iter = nreverse (resources); iter ; iter = TREE_CHAIN (iter))\n+  for (ix = 0; VEC_iterate (tree, resources, ix, decl); ix++)\n     {\n-      t = build_fold_addr_expr (TREE_VALUE (iter));\n+      t = build_fold_addr_expr (decl);\n       t = build_call_expr (register_resource_fn, 1, t);\n       append_to_statement_list (t, list_p);\n     }"}]}