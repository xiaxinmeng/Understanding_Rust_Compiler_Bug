{"sha": "387b37c1acab0791f19cfced1e345543855d764e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3YjM3YzFhY2FiMDc5MWYxOWNmY2VkMWUzNDU1NDM4NTVkNzY0ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-25T21:17:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-25T21:17:47Z"}, "message": "compiler: Accept numeric literals with leading zeroes.\n\n    \n    When a numeric literal with leading zeroes was seen in the parser, it\n    would only be accepted if it were a valid hex or octal literal.  Any\n    invalid numeric literal would be split up into multiple tokens: the\n    valid hex/octal literal followed by the rest of the characters.\n    Instead, when scanning a numeric literal with leading zeroes, always\n    accept the number and give an appropriate error if the accepted number\n    does not fit in the expected base.\n    \n    Fixes golang/go#11532, golang/go#11533.\n    \n    Reviewed-on: https://go-review.googlesource.com/13791\n\nFrom-SVN: r227193", "tree": {"sha": "51e3958a1fe1dce71f49ef708a9b04152b34b6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e3958a1fe1dce71f49ef708a9b04152b34b6c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387b37c1acab0791f19cfced1e345543855d764e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387b37c1acab0791f19cfced1e345543855d764e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387b37c1acab0791f19cfced1e345543855d764e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387b37c1acab0791f19cfced1e345543855d764e/comments", "author": null, "committer": null, "parents": [{"sha": "60c47c007366840f15fe17913d0592c2819b7c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c47c007366840f15fe17913d0592c2819b7c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c47c007366840f15fe17913d0592c2819b7c99"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "c30efd919ecee9575b784bca467b1897f2e6cfc9", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387b37c1acab0791f19cfced1e345543855d764e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387b37c1acab0791f19cfced1e345543855d764e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=387b37c1acab0791f19cfced1e345543855d764e", "patch": "@@ -1,4 +1,4 @@\n-14ca4b6130b9a7132d132f418e9ea283b3a52c08\n+f97d579fa8431af5cfde9b0a48604caabfd09377\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "632a1c9e353ced3ee94255e76a1ce2fda7569cb3", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387b37c1acab0791f19cfced1e345543855d764e/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387b37c1acab0791f19cfced1e345543855d764e/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=387b37c1acab0791f19cfced1e345543855d764e", "patch": "@@ -1047,7 +1047,7 @@ Lex::gather_number()\n \t  pnum = p;\n \t  while (p < pend)\n \t    {\n-\t      if (*p < '0' || *p > '7')\n+\t      if (*p < '0' || *p > '9')\n \t\tbreak;\n \t      ++p;\n \t    }\n@@ -1060,7 +1060,13 @@ Lex::gather_number()\n \t  std::string s(pnum, p - pnum);\n \t  mpz_t val;\n \t  int r = mpz_init_set_str(val, s.c_str(), base);\n-\t  go_assert(r == 0);\n+          if (r != 0)\n+            {\n+              if (base == 8)\n+                error_at(this->location(), \"invalid octal literal\");\n+              else\n+                error_at(this->location(), \"invalid hex literal\");\n+            }\n \n \t  if (neg)\n \t    mpz_neg(val, val);"}]}