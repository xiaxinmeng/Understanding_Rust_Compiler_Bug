{"sha": "124a9e08b7a83795bd4d09001955f0eef68ecd00", "node_id": "C_kwDOANBUbNoAKDEyNGE5ZTA4YjdhODM3OTViZDRkMDkwMDE5NTVmMGVlZjY4ZWNkMDA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-23T04:24:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-23T15:07:21Z"}, "message": "c++: -Waddress and if constexpr [PR94554]\n\nLike we avoid various warnings for seemingly tautological expressions when\nsubstituting a template, we should avoid warning for the implicit conversion\nto bool in an if statement.  I considered also doing this for the conditions\nin loop expressions, but that seems unnecessary, as a loop condition is\nunlikely to be a constant.\n\nThe change to finish_if_stmt_cond isn't necessary since dependent_operand_p\nlooks through IMPLICIT_CONV_EXPR, but makes it more constent with\ne.g. build_x_binary_op that determines the type of an expression and then\nbuilds it using the original operands.\n\n\tPR c++/94554\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (dependent_operand_p): Split out from...\n\t(tsubst_copy_and_build): ...here.\n\t(tsubst_expr) [IF_STMT]: Use it.\n\t* semantics.cc (finish_if_stmt_cond): Keep the pre-conversion\n\tcondition in the template tree.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/constexpr-if38.C: New test.", "tree": {"sha": "95a4355dedee97c8354af62b54c689262cbf461f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a4355dedee97c8354af62b54c689262cbf461f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/124a9e08b7a83795bd4d09001955f0eef68ecd00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124a9e08b7a83795bd4d09001955f0eef68ecd00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124a9e08b7a83795bd4d09001955f0eef68ecd00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124a9e08b7a83795bd4d09001955f0eef68ecd00/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4d5300c1f62c3f0cd1bf859b0ee6bb4e31e434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4d5300c1f62c3f0cd1bf859b0ee6bb4e31e434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4d5300c1f62c3f0cd1bf859b0ee6bb4e31e434"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "12a2b57d9e3d561b16cb57bdb79c97f5d8416887", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a9e08b7a83795bd4d09001955f0eef68ecd00/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a9e08b7a83795bd4d09001955f0eef68ecd00/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=124a9e08b7a83795bd4d09001955f0eef68ecd00", "patch": "@@ -18547,6 +18547,29 @@ lookup_init_capture_pack (tree decl)\n   return r;\n }\n \n+/* T is an operand of a template tree being substituted.  Return whether\n+   T is dependent such that we should suppress some warnings that would\n+   make sense if the substituted expression were written directly, like\n+     template <int I> bool f() { return I == 2; }\n+   We don't want to warn when instantiating f that comparing two constants\n+   always has the same value.\n+\n+   This is a more limited concept of dependence than instantiation-dependent;\n+   here we don't care whether substitution could fail.  */\n+\n+static bool\n+dependent_operand_p (tree t)\n+{\n+  while (TREE_CODE (t) == IMPLICIT_CONV_EXPR)\n+    t = TREE_OPERAND (t, 0);\n+  ++processing_template_decl;\n+  bool r = (potential_constant_expression (t)\n+\t    ? value_dependent_expression_p (t)\n+\t    : type_dependent_expression_p (t));\n+  --processing_template_decl;\n+  return r;\n+}\n+\n /* Like tsubst_copy for expressions, etc. but also does semantic\n    processing.  */\n \n@@ -18872,8 +18895,13 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       IF_STMT_CONSTEVAL_P (stmt) = IF_STMT_CONSTEVAL_P (t);\n       if (IF_STMT_CONSTEXPR_P (t))\n \targs = add_extra_args (IF_STMT_EXTRA_ARGS (t), args, complain, in_decl);\n-      tmp = RECUR (IF_COND (t));\n-      tmp = finish_if_stmt_cond (tmp, stmt);\n+      {\n+\ttree cond = IF_COND (t);\n+\tbool was_dep = dependent_operand_p (cond);\n+\tcond = RECUR (cond);\n+\twarning_sentinel s1(warn_address, was_dep);\n+\ttmp = finish_if_stmt_cond (cond, stmt);\n+      }\n       if (IF_STMT_CONSTEXPR_P (t)\n \t  && instantiation_dependent_expression_p (tmp))\n \t{\n@@ -20422,15 +20450,8 @@ tsubst_copy_and_build (tree t,\n \t   warnings that depend on the range of the types involved.  */\n \ttree op0 = TREE_OPERAND (t, 0);\n \ttree op1 = TREE_OPERAND (t, 1);\n-\tauto dep_p = [](tree t) {\n-\t  ++processing_template_decl;\n-\t  bool r = (potential_constant_expression (t)\n-\t\t    ? value_dependent_expression_p (t)\n-\t\t    : type_dependent_expression_p (t));\n-\t  --processing_template_decl;\n-\t  return r;\n-\t};\n-\tconst bool was_dep = dep_p (op0) || dep_p (op1);\n+\tconst bool was_dep = (dependent_operand_p (op0)\n+\t\t\t      || dependent_operand_p (op1));\n \top0 = RECUR (op0);\n \top1 = RECUR (op1);\n "}, {"sha": "2344b5eea002295882a786ef3351f46a73b8e4d6", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a9e08b7a83795bd4d09001955f0eef68ecd00/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a9e08b7a83795bd4d09001955f0eef68ecd00/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=124a9e08b7a83795bd4d09001955f0eef68ecd00", "patch": "@@ -1029,9 +1029,9 @@ maybe_warn_for_constant_evaluated (tree cond, bool constexpr_if)\n    IF_STMT.  */\n \n tree\n-finish_if_stmt_cond (tree cond, tree if_stmt)\n+finish_if_stmt_cond (tree orig_cond, tree if_stmt)\n {\n-  cond = maybe_convert_cond (cond);\n+  tree cond = maybe_convert_cond (orig_cond);\n   if (IF_STMT_CONSTEXPR_P (if_stmt)\n       && !type_dependent_expression_p (cond)\n       && require_constant_expression (cond)\n@@ -1045,7 +1045,11 @@ finish_if_stmt_cond (tree cond, tree if_stmt)\n       cond = cxx_constant_value (cond, NULL_TREE);\n     }\n   else\n-    maybe_warn_for_constant_evaluated (cond, /*constexpr_if=*/false);\n+    {\n+      maybe_warn_for_constant_evaluated (cond, /*constexpr_if=*/false);\n+      if (processing_template_decl)\n+\tcond = orig_cond;\n+    }\n   finish_cond (&IF_COND (if_stmt), cond);\n   add_stmt (if_stmt);\n   THEN_CLAUSE (if_stmt) = push_stmt_list ();"}, {"sha": "3e4fd446dcaa94513667c76e283038a31a999113", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if38.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a9e08b7a83795bd4d09001955f0eef68ecd00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a9e08b7a83795bd4d09001955f0eef68ecd00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if38.C?ref=124a9e08b7a83795bd4d09001955f0eef68ecd00", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/94554\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options -Wall }\n+\n+int meow() { return 1; }\n+void kitty(int);\n+template <int (*F)()>\n+void test() {\n+    if constexpr (F) {\n+        kitty(F());\n+    } else {\n+        kitty(2);\n+    }\n+}\n+template void test<nullptr>();\n+template void test<meow>();"}]}