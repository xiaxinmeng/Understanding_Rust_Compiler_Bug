{"sha": "5351f1ca744b9d3e5285ff813839df3e43fe40b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1MWYxY2E3NDRiOWQzZTUyODVmZjgxMzgzOWRmM2U0M2ZlNDBiNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-07T22:10:18Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-07T22:10:18Z"}, "message": "c-common.c (c_common_post_options): Update prototype; don't init backends if preprocessing only.\n\n\t* c-common.c (c_common_post_options): Update prototype;\n\tdon't init backends if preprocessing only.\n\t* langhooks-def.h (LANG_HOOKS_POST_OPTIONS): Update.\n\t* langhooks.h (struct lang_hooks): Update post_options to\n\treturn a boolean.\n\t* toplev.c (parse_options_and_default_flags, do_compile,\n\tlang_independent_init): Update prototypes.  Allow the\n\tfront end to specify that there is no need to initialize\n\tthe back end.\n\t(general_init): Move call to hex_init here...\n\t(toplev_main): ...from here.  Pass flag for back end init\n\tsuppression.\njava:\n\t* lang.c (java_post_options): Update prototype.\n\nFrom-SVN: r55306", "tree": {"sha": "3e569be0339cedb2fa3b07094857f01594bed4f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e569be0339cedb2fa3b07094857f01594bed4f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5351f1ca744b9d3e5285ff813839df3e43fe40b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5351f1ca744b9d3e5285ff813839df3e43fe40b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5351f1ca744b9d3e5285ff813839df3e43fe40b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5351f1ca744b9d3e5285ff813839df3e43fe40b4/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "5b8a058ebce1f946dbdec3b9fb33fca0cd14d16b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -1,3 +1,18 @@\n+2002-07-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.c (c_common_post_options): Update prototype;\n+\tdon't init backends if preprocessing only.\n+\t* langhooks-def.h (LANG_HOOKS_POST_OPTIONS): Update.\n+\t* langhooks.h (struct lang_hooks): Update post_options to\n+\treturn a boolean.\n+\t* toplev.c (parse_options_and_default_flags, do_compile,\n+\tlang_independent_init): Update prototypes.  Allow the\n+\tfront end to specify that there is no need to initialize\n+\tthe back end.\n+\t(general_init): Move call to hex_init here...\n+\t(toplev_main): ...from here.  Pass flag for back end init\n+\tsuppression.\n+\n Sun Jul  7 20:38:38 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.h (PRINT_OPERAND_PUNCT_VALID_P): Allow '\\''."}, {"sha": "a948959da703bea665efc7f68396b273165f95ab", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -4244,7 +4244,7 @@ c_common_init_options (lang)\n }\n \n /* Post-switch processing.  */\n-void\n+bool\n c_common_post_options ()\n {\n   cpp_post_options (parse_in);\n@@ -4286,6 +4286,8 @@ c_common_post_options ()\n   /* If an error has occurred in cpplib, note it so we fail\n      immediately.  */\n   errorcount += cpp_errors (parse_in);\n+\n+  return flag_preprocess_only;\n }\n \n /* Hook that registers front end and target-specific built-ins.  */"}, {"sha": "8aac85761a6fa7f3ead1b9fbff86e4ce34d10d66", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -594,7 +594,7 @@ extern void disable_builtin_function\t\tPARAMS ((const char *));\n extern tree build_va_arg\t\t\tPARAMS ((tree, tree));\n \n extern void c_common_init_options\t\tPARAMS ((enum c_language_kind));\n-extern void c_common_post_options\t\tPARAMS ((void));\n+extern bool c_common_post_options\t\tPARAMS ((void));\n extern const char *c_common_init\t\tPARAMS ((const char *));\n extern void c_common_finish\t\t\tPARAMS ((void));\n extern void c_common_parse_file\t\t\tPARAMS ((int));"}, {"sha": "3863b14b0df0a66c7f89b83184dee31d31d5c1f6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -1,3 +1,7 @@\n+2002-07-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.c (java_post_options): Update prototype.\n+\n 2002-07-05  Roger Sayle  <roger@eyesopen.com>\n \n \t* java/builtins.c (initialize_builtins): Ignore the additional"}, {"sha": "60f1a1c593128e061f63e7dda03a10b9999cf703", "filename": "gcc/java/lang.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -51,7 +51,7 @@ struct string_option\n static const char *java_init PARAMS ((const char *));\n static void java_finish PARAMS ((void));\n static void java_init_options PARAMS ((void));\n-static void java_post_options PARAMS ((void));\n+static bool java_post_options PARAMS ((void));\n \n static int java_decode_option PARAMS ((int, char **));\n static void put_decl_string PARAMS ((const char *, int));\n@@ -780,7 +780,7 @@ java_init_options ()\n }\n \n /* Post-switch processing.  */\n-static void\n+static bool\n java_post_options ()\n {\n   /* Turn off RTL inliner unless -finline-functions was really specified.  */\n@@ -789,6 +789,9 @@ java_post_options ()\n       flag_no_inline = 1;\n       flag_inline_functions = 0;\n     }\n+\n+  /* Initialize the compiler back end.  */\n+  return false;\n }\n \n #include \"gt-java-lang.h\""}, {"sha": "246fea93214a4d6b4ca06968b32f5e4515127b97", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -88,7 +88,7 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_do_nothing\n #define LANG_HOOKS_DECODE_OPTION\tlhd_decode_option\n-#define LANG_HOOKS_POST_OPTIONS\t\thook_void_void\n+#define LANG_HOOKS_POST_OPTIONS\t\thook_void_bool_false\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n #define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr"}, {"sha": "0ec3c88c29d880d44f604f9fe421a43b9a575021", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -198,9 +198,12 @@ struct lang_hooks\n      initialization should be left to the \"init\" callback, since GC\n      and the identifier hashes are set up between now and then.\n \n+     Should return zero unless the compiler back-end does not need to\n+     be initialized, such as with the -E option.\n+     \n      If errorcount is non-zero after this call the compiler exits\n      immediately and the finish hook is not called.  */\n-  void (*post_options) PARAMS ((void));\n+  bool (*post_options) PARAMS ((void));\n \n   /* Called after post_options, to initialize the front end.  The main\n      input filename is passed, which may be NULL; the front end should"}, {"sha": "d1af33e9b675f776c807cb7698a068288d17b72f", "filename": "gcc/toplev.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5351f1ca744b9d3e5285ff813839df3e43fe40b4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5351f1ca744b9d3e5285ff813839df3e43fe40b4", "patch": "@@ -96,10 +96,10 @@ extern int size_directive_output;\n extern tree last_assemble_variable_decl;\n \n static void general_init PARAMS ((char *));\n-static void parse_options_and_default_flags PARAMS ((int, char **));\n-static void do_compile PARAMS ((void));\n+static bool parse_options_and_default_flags PARAMS ((int, char **));\n+static void do_compile PARAMS ((int));\n static void process_options PARAMS ((void));\n-static void lang_independent_init PARAMS ((void));\n+static void lang_independent_init PARAMS ((int));\n static int lang_dependent_init PARAMS ((const char *));\n static void init_asm_output PARAMS ((const char *));\n static void finalize PARAMS ((void));\n@@ -4584,6 +4584,8 @@ general_init (argv0)\n \n   xmalloc_set_program_name (progname);\n \n+  hex_init ();\n+\n   gcc_init_libintl ();\n \n   /* Trap fatal signals, e.g. SIGSEGV, and convert them to ICE messages.  */\n@@ -4614,8 +4616,10 @@ general_init (argv0)\n /* Parse command line options and set default flag values, called\n    after language-independent option-independent initialization.  Do\n    minimal options processing.  Outputting diagnostics is OK, but GC\n-   and identifier hashtables etc. are not initialized yet.  */\n-static void\n+   and identifier hashtables etc. are not initialized yet.\n+\n+   Return non-zero to suppress compiler back end initialization.  */\n+static bool\n parse_options_and_default_flags (argc, argv)\n      int argc;\n      char **argv;\n@@ -4846,7 +4850,7 @@ parse_options_and_default_flags (argc, argv)\n \n   /* All command line options have been parsed; allow the front end to\n      perform consistency checks, etc.  */\n-  (*lang_hooks.post_options) ();\n+  return (*lang_hooks.post_options) ();\n }\n \f\n /* Process the options that have been parsed.  */\n@@ -5025,14 +5029,18 @@ process_options ()\n /* Language-independent initialization, before language-dependent\n    initialization.  */\n static void\n-lang_independent_init ()\n+lang_independent_init (no_backend)\n+     int no_backend;\n {\n   /* Initialize the garbage-collector, and string pools.  */\n   init_ggc ();\n \n   init_stringpool ();\n   init_obstacks ();\n \n+  if (no_backend)\n+    return;\n+\n   /* init_emit_once uses reg_raw_mode and therefore must be called\n      after init_regs which initialized reg_raw_mode.  */\n   init_regs ();\n@@ -5167,7 +5175,8 @@ finalize ()\n \f\n /* Initialize the compiler, and compile the input file.  */\n static void\n-do_compile ()\n+do_compile (no_backend)\n+     int no_backend;\n {\n   /* The bulk of command line switch processing.  */\n   process_options ();\n@@ -5178,8 +5187,8 @@ do_compile ()\n   timevar_start (TV_TOTAL);\n \n   /* Language-independent initialization.  Also sets up GC, identifier\n-     hashes etc.  */\n-  lang_independent_init ();\n+     hashes etc., and the back-end if requested.  */\n+  lang_independent_init (no_backend);\n \n   /* Language-dependent initialization.  Returns true on success.  */\n   if (lang_dependent_init (filename))\n@@ -5204,18 +5213,18 @@ toplev_main (argc, argv)\n      int argc;\n      char **argv;\n {\n-  hex_init ();\n+  bool no_backend;\n \n   /* Initialization of GCC's environment, and diagnostics.  */\n   general_init (argv[0]);\n \n   /* Parse the options and do minimal processing; basically just\n      enough to default flags appropriately.  */\n-  parse_options_and_default_flags (argc, argv);\n+  no_backend = parse_options_and_default_flags (argc, argv);\n \n   /* Exit early if we can (e.g. -help).  */\n   if (!errorcount && !exit_after_options)\n-    do_compile ();\n+    do_compile (no_backend);\n \n   if (errorcount || sorrycount)\n     return (FATAL_EXIT_CODE);"}]}