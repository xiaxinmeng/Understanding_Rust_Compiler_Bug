{"sha": "d750887f5f4273e10625e13d1bac1db9aeef849e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1MDg4N2Y1ZjQyNzNlMTA2MjVlMTNkMWJhYzFkYjlhZWVmODQ5ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-05-30T14:25:09Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-05-30T14:25:09Z"}, "message": "re PR preprocessor/36320 (Required diagnosis of syntax error missed)\n\ngcc/testsuite\n\tPR preprocessor/36320:\n\t* gcc.dg/cpp/pr36320.c: New file.\nlibcpp\n\tPR preprocessor/36320:\n\t* internal.h (_cpp_parse_expr): Update.\n\t* expr.c (_cpp_parse_expr): Add 'is_if' argument.  Update error\n\tmessages.\n\t* directives.c (do_if): Update.\n\t(do_elif): Require expression if processing group.\n\nFrom-SVN: r136209", "tree": {"sha": "5c6c1e4ce1846b970214259abb76f69f5370d6be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6c1e4ce1846b970214259abb76f69f5370d6be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d750887f5f4273e10625e13d1bac1db9aeef849e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d750887f5f4273e10625e13d1bac1db9aeef849e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d750887f5f4273e10625e13d1bac1db9aeef849e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d750887f5f4273e10625e13d1bac1db9aeef849e/comments", "author": null, "committer": null, "parents": [{"sha": "bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfab40f8e5c12b8fd32dfd55a7437528def52f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfab40f8e5c12b8fd32dfd55a7437528def52f3e"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "6a5083a3309578e43eb35caeb28cb4e934d4d192", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d750887f5f4273e10625e13d1bac1db9aeef849e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d750887f5f4273e10625e13d1bac1db9aeef849e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d750887f5f4273e10625e13d1bac1db9aeef849e", "patch": "@@ -1,3 +1,8 @@\n+2008-05-30  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/36320:\n+\t* gcc.dg/cpp/pr36320.c: New file.\n+\n 2008-05-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n         PR c++/35243"}, {"sha": "d136a69b6b2db2d2630553f0108bdeef0a6a2486", "filename": "gcc/testsuite/gcc.dg/cpp/pr36320.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d750887f5f4273e10625e13d1bac1db9aeef849e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr36320.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d750887f5f4273e10625e13d1bac1db9aeef849e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr36320.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr36320.c?ref=d750887f5f4273e10625e13d1bac1db9aeef849e", "patch": "@@ -0,0 +1,8 @@\n+/* PR 36320 - #elif still requires valid expression.  */\n+\n+/* { dg-do preprocess } */\n+\n+int z;\n+#if 1\n+#elif   /* { dg-error \"with no expression\" } */\n+#endif"}, {"sha": "3935dff57acc30b8f1a551d889a8ad4590129b09", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d750887f5f4273e10625e13d1bac1db9aeef849e", "patch": "@@ -1,3 +1,12 @@\n+2008-05-30  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/36320:\n+\t* internal.h (_cpp_parse_expr): Update.\n+\t* expr.c (_cpp_parse_expr): Add 'is_if' argument.  Update error\n+\tmessages.\n+\t* directives.c (do_if): Update.\n+\t(do_elif): Require expression if processing group.\n+\n 2008-05-30  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* include/cpplib.h (struct cpp_dir): Add new field, canonical_name."}, {"sha": "370f4ff5b0d3884706008bfd181173e18ede8e28", "filename": "libcpp/directives.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=d750887f5f4273e10625e13d1bac1db9aeef849e", "patch": "@@ -1737,7 +1737,7 @@ do_if (cpp_reader *pfile)\n   int skip = 1;\n \n   if (! pfile->state.skipping)\n-    skip = _cpp_parse_expr (pfile) == false;\n+    skip = _cpp_parse_expr (pfile, true) == false;\n \n   push_conditional (pfile, skip, T_IF, pfile->mi_ind_cmacro);\n }\n@@ -1796,15 +1796,23 @@ do_elif (cpp_reader *pfile)\n \t}\n       ifs->type = T_ELIF;\n \n-      /* Only evaluate this if we aren't skipping elses.  During\n-\t evaluation, set skipping to false to get lexer warnings.  */\n-      if (ifs->skip_elses)\n-\tpfile->state.skipping = 1;\n-      else\n+      if (! ifs->was_skipping)\n \t{\n+\t  bool value;\n+\t  /* The standard mandates that the expression be parsed even\n+\t     if we are skipping elses at this point -- the lexical\n+\t     restrictions on #elif only apply to skipped groups, but\n+\t     this group is not being skipped.  Temporarily set\n+\t     skipping to false to get lexer warnings.  */\n \t  pfile->state.skipping = 0;\n-\t  pfile->state.skipping = ! _cpp_parse_expr (pfile);\n-\t  ifs->skip_elses = ! pfile->state.skipping;\n+\t  value = _cpp_parse_expr (pfile, false);\n+\t  if (ifs->skip_elses)\n+\t    pfile->state.skipping = 1;\n+\t  else\n+\t    {\n+\t      pfile->state.skipping = ! value;\n+\t      ifs->skip_elses = value;\n+\t    }\n \t}\n \n       /* Invalidate any controlling macro.  */"}, {"sha": "c0e3cbd8006fc9345e50589462937c3e061ce9e0", "filename": "libcpp/expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=d750887f5f4273e10625e13d1bac1db9aeef849e", "patch": "@@ -852,7 +852,7 @@ static const struct cpp_operator\n    stored in the 'value' field of the stack element of the operator\n    that precedes it.  */\n bool\n-_cpp_parse_expr (cpp_reader *pfile)\n+_cpp_parse_expr (cpp_reader *pfile, bool is_if)\n {\n   struct op *top = pfile->op_stack;\n   unsigned int lex_count;\n@@ -927,7 +927,7 @@ _cpp_parse_expr (cpp_reader *pfile)\n \t    SYNTAX_ERROR (\"missing expression between '(' and ')'\");\n \n \t  if (op.op == CPP_EOF && top->op == CPP_EOF)\n- \t    SYNTAX_ERROR (\"#if with no expression\");\n+ \t    SYNTAX_ERROR2 (\"%s with no expression\", is_if ? \"#if\" : \"#elif\");\n \n  \t  if (top->op != CPP_EOF && top->op != CPP_OPEN_PAREN)\n  \t    SYNTAX_ERROR2 (\"operator '%s' has no right operand\",\n@@ -988,7 +988,8 @@ _cpp_parse_expr (cpp_reader *pfile)\n \n   if (top != pfile->op_stack)\n     {\n-      cpp_error (pfile, CPP_DL_ICE, \"unbalanced stack in #if\");\n+      cpp_error (pfile, CPP_DL_ICE, \"unbalanced stack in %s\",\n+\t\t is_if ? \"#if\" : \"#elif\");\n     syntax_error:\n       return false;  /* Return false on syntax error.  */\n     }"}, {"sha": "65cac325186a2b0be4c7973e2426fbbb844847e0", "filename": "libcpp/internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d750887f5f4273e10625e13d1bac1db9aeef849e/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=d750887f5f4273e10625e13d1bac1db9aeef849e", "patch": "@@ -557,7 +557,7 @@ extern bool _cpp_read_file_entries (cpp_reader *, FILE *);\n extern struct stat *_cpp_get_file_stat (_cpp_file *);\n \n /* In expr.c */\n-extern bool _cpp_parse_expr (cpp_reader *);\n+extern bool _cpp_parse_expr (cpp_reader *, bool);\n extern struct op *_cpp_expand_op_stack (cpp_reader *);\n \n /* In lex.c */"}]}