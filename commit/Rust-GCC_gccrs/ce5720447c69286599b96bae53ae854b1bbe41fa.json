{"sha": "ce5720447c69286599b96bae53ae854b1bbe41fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1NzIwNDQ3YzY5Mjg2NTk5Yjk2YmFlNTNhZTg1NGIxYmJlNDFmYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-02-04T21:50:23Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-02-04T21:53:38Z"}, "message": "PR c/97882 - Segmentation Fault on improper redeclaration of function\n\ngcc/c/ChangeLog:\n\n\tPR c/97882\n\t* c-decl.c (locate_old_decl): Add type to diagnostic output.\n\t(diagnose_mismatched_decls): Same.\n\t(start_function): Introduce temporaries for better readability.\n\t* c-typeck.c (comptypes_internal): Only consider complete enum\n\ttypes in comparisons with integers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/97882\n\t* gcc.dg/decl-8.c: Adjust text of expected diagnostic.\n\t* gcc.dg/label-decl-4.c: Same.\n\t* gcc.dg/mismatch-decl-1.c: Same.\n\t* gcc.dg/old-style-then-proto-1.c: Same.\n\t* gcc.dg/parm-mismatch-1.c: Same.\n\t* gcc.dg/pr35445.c: Same.\n\t* gcc.dg/redecl-11.c: Same.\n\t* gcc.dg/redecl-12.c: Same.\n\t* gcc.dg/redecl-13.c: Same.\n\t* gcc.dg/redecl-15.c: Same.\n\t* gcc.dg/tls/thr-init-1.c: Same.\n\t* objc.dg/id-1.m: Same.\n\t* objc.dg/tls/diag-3.m: Same.\n\t* gcc.dg/pr97882.c: New test.\n\t* gcc.dg/qual-return-7.c: New test.\n\t* gcc.dg/qual-return-8.c: New test.", "tree": {"sha": "b7f6a4fb020f9b00c93319630e674f9aea57b92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7f6a4fb020f9b00c93319630e674f9aea57b92b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce5720447c69286599b96bae53ae854b1bbe41fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce5720447c69286599b96bae53ae854b1bbe41fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce5720447c69286599b96bae53ae854b1bbe41fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce5720447c69286599b96bae53ae854b1bbe41fa/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e7c24d97dd65083a770252ce942f43d408fe11d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7c24d97dd65083a770252ce942f43d408fe11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7c24d97dd65083a770252ce942f43d408fe11d"}], "stats": {"total": 298, "additions": 251, "deletions": 47}, "files": [{"sha": "a5852a3bae7af79e7b145464fe7587573ad07709", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -1910,15 +1910,22 @@ validate_proto_after_old_defn (tree newdecl, tree newtype, tree oldtype)\n static void\n locate_old_decl (tree decl)\n {\n-  if (TREE_CODE (decl) == FUNCTION_DECL && fndecl_built_in_p (decl)\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && fndecl_built_in_p (decl)\n       && !C_DECL_DECLARED_BUILTIN (decl))\n     ;\n   else if (DECL_INITIAL (decl))\n-    inform (input_location, \"previous definition of %q+D was here\", decl);\n+    inform (input_location,\n+\t    \"previous definition of %q+D with type %qT\",\n+\t    decl, TREE_TYPE (decl));\n   else if (C_DECL_IMPLICIT (decl))\n-    inform (input_location, \"previous implicit declaration of %q+D was here\", decl);\n+    inform (input_location,\n+\t    \"previous implicit declaration of %q+D with type %qT\",\n+\t    decl, TREE_TYPE (decl));\n   else\n-    inform (input_location, \"previous declaration of %q+D was here\", decl);\n+    inform (input_location,\n+\t    \"previous declaration of %q+D with type %qT\",\n+\t    decl, TREE_TYPE (decl));\n }\n \n /* Subroutine of duplicate_decls.  Compare NEWDECL to OLDDECL.\n@@ -2083,7 +2090,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t       && C_DECL_IMPLICIT (olddecl) && !DECL_INITIAL (olddecl))\n \t{\n \t  pedwarned = pedwarn (input_location, 0,\n-\t\t\t       \"conflicting types for %q+D\", newdecl);\n+\t\t\t       \"conflicting types for %q+D; have %qT\",\n+\t\t\t       newdecl, newtype);\n \t  /* Make sure we keep void as the return type.  */\n \t  TREE_TYPE (olddecl) = *oldtypep = oldtype = newtype;\n \t}\n@@ -2119,7 +2127,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\terror (\"conflicting type qualifiers for %q+D\", newdecl);\n \t    }\n \t  else\n-\t    error (\"conflicting types for %q+D\", newdecl);\n+\t    error (\"conflicting types for %q+D; have %qT\", newdecl, newtype);\n \t  diagnose_arglist_conflict (newdecl, olddecl, newtype, oldtype);\n \t  locate_old_decl (olddecl);\n \t  return false;\n@@ -9457,27 +9465,29 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   current_function_prototype_locus = UNKNOWN_LOCATION;\n   current_function_prototype_built_in = false;\n   current_function_prototype_arg_types = NULL_TREE;\n-  if (!prototype_p (TREE_TYPE (decl1)))\n+  tree newtype = TREE_TYPE (decl1);\n+  tree oldtype = old_decl ? TREE_TYPE (old_decl) : newtype;\n+  if (!prototype_p (newtype))\n     {\n+      tree oldrt = TREE_TYPE (oldtype);\n+      tree newrt = TREE_TYPE (newtype);\n       if (old_decl != NULL_TREE\n-\t  && TREE_CODE (TREE_TYPE (old_decl)) == FUNCTION_TYPE\n-\t  && comptypes (TREE_TYPE (TREE_TYPE (decl1)),\n-\t\t\tTREE_TYPE (TREE_TYPE (old_decl))))\n+\t  && TREE_CODE (oldtype) == FUNCTION_TYPE\n+\t  && comptypes (oldrt, newrt))\n \t{\n-\t  if (stdarg_p (TREE_TYPE (old_decl)))\n+\t  if (stdarg_p (oldtype))\n \t    {\n \t      auto_diagnostic_group d;\n \t      warning_at (loc, 0, \"%q+D defined as variadic function \"\n \t\t\t  \"without prototype\", decl1);\n \t      locate_old_decl (old_decl);\n \t    }\n-\t  TREE_TYPE (decl1) = composite_type (TREE_TYPE (old_decl),\n-\t\t\t\t\t      TREE_TYPE (decl1));\n+\t  TREE_TYPE (decl1) = composite_type (oldtype, newtype);\n \t  current_function_prototype_locus = DECL_SOURCE_LOCATION (old_decl);\n \t  current_function_prototype_built_in\n \t    = C_DECL_BUILTIN_PROTOTYPE (old_decl);\n \t  current_function_prototype_arg_types\n-\t    = TYPE_ARG_TYPES (TREE_TYPE (decl1));\n+\t    = TYPE_ARG_TYPES (newtype);\n \t}\n       if (TREE_PUBLIC (decl1))\n \t{"}, {"sha": "725dc510dc727e6e80acc83ac3e41267e3c54a1a", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -1107,7 +1107,9 @@ comptypes_internal (const_tree type1, const_tree type2, bool *enum_and_int_p,\n      not transitive: two enumerated types in the same translation unit\n      are compatible with each other only if they are the same type.  */\n \n-  if (TREE_CODE (t1) == ENUMERAL_TYPE && TREE_CODE (t2) != ENUMERAL_TYPE)\n+  if (TREE_CODE (t1) == ENUMERAL_TYPE\n+      && COMPLETE_TYPE_P (t1)\n+      && TREE_CODE (t2) != ENUMERAL_TYPE)\n     {\n       t1 = c_common_type_for_size (TYPE_PRECISION (t1), TYPE_UNSIGNED (t1));\n       if (TREE_CODE (t2) != VOID_TYPE)\n@@ -1118,7 +1120,9 @@ comptypes_internal (const_tree type1, const_tree type2, bool *enum_and_int_p,\n \t    *different_types_p = true;\n \t}\n     }\n-  else if (TREE_CODE (t2) == ENUMERAL_TYPE && TREE_CODE (t1) != ENUMERAL_TYPE)\n+  else if (TREE_CODE (t2) == ENUMERAL_TYPE\n+\t   && COMPLETE_TYPE_P (t2)\n+\t   && TREE_CODE (t1) != ENUMERAL_TYPE)\n     {\n       t2 = c_common_type_for_size (TYPE_PRECISION (t2), TYPE_UNSIGNED (t2));\n       if (TREE_CODE (t1) != VOID_TYPE)"}, {"sha": "608ff97d7fc264ca3d542f5ec2ae68294d1fd337", "filename": "gcc/testsuite/gcc.dg/decl-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -3,8 +3,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu89 -pedantic-errors\" } */\n \n-typedef int I; /* { dg-message \"note: previous declaration of 'I' was here\" } */\n+typedef int I; /* { dg-message \"note: previous declaration of 'I'\" \"note\" } */\n typedef int I; /* { dg-error \"redefinition of typedef 'I'\" } */\n \n-typedef int I1; /* { dg-message \"note: previous declaration of 'I1' was here\" } */\n+typedef int I1; /* { dg-message \"note: previous declaration of 'I1'\" \"note\" } */\n typedef long I1; /* { dg-error \"conflicting types for 'I1'\" } */"}, {"sha": "82f1af050b0f93eadade0f0e3fedefed4c1e20ec", "filename": "gcc/testsuite/gcc.dg/label-decl-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -7,8 +7,8 @@ void\n f (void)\n {\n   __label__ a, b, a; /* { dg-error \"duplicate label declaration 'a'\" } */\n-  /* { dg-message \"note: previous declaration of 'a' was here\" \"previous\" { target *-*-* } .-1 } */\n-  __label__ c; /* { dg-message \"note: previous declaration of 'c' was here\" } */\n+  /* { dg-message \"note: previous declaration of 'a'\" \"previous\" { target *-*-* } .-1 } */\n+  __label__ c; /* { dg-message \"note: previous declaration of 'c'\" \"note\" } */\n   __label__ c; /* { dg-error \"duplicate label declaration 'c'\" } */\n   return;\n }"}, {"sha": "b6dd5431a483884921fa738ce04060882d1328cd", "filename": "gcc/testsuite/gcc.dg/mismatch-decl-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fmismatch-decl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fmismatch-decl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmismatch-decl-1.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -4,12 +4,12 @@\n \n /* The bug this is testing is that if a new decl conflicts with an\n    explicit decl, you don't get the \"changes type of builtin\" message,\n-   but if there was *also* a builtin, you *also* don't get the\n-   \"previous declaration was here\" message, leaving you with no clue\n-   where the previous declaration came from.  */\n+   but if there was *also* a builtin, you *also* don't get the \"previous\n+   declaration\" message, leaving you with no clue where the previous\n+   declaration came from.  */\n \n-extern char foo(int,int); /* { dg-message \"previous declaration of 'foo' was here\" } */\n-extern char *index(const char *,int); /* { dg-message \"previous declaration of 'index' was here\" } */\n+extern char foo(int,int); /* { dg-message \"previous declaration of 'foo'\" \"note\" } */\n+extern char *index(const char *,int); /* { dg-message \"previous declaration of 'index'\" \"note\" } */\n \n /* This changes the type of \"index\", which is both a builtin and an\n    explicit decl.  */"}, {"sha": "e3e61861673a8653dea604f0ae15e91c6167db84", "filename": "gcc/testsuite/gcc.dg/old-style-then-proto-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -7,38 +7,38 @@\n void f1() {}\n void f1(void); /* { dg-warning \"prototype for 'f1' follows non-prototype definition\" } */\n \n-void f2() {} /* { dg-message \"note: previous definition of 'f2' was here\" } */\n+void f2() {} /* { dg-message \"note: previous definition of 'f2'\" \"note\" } */\n void f2(int); /* { dg-error \"prototype for 'f2' declares more arguments than previous old-style definition\" } */\n \n-void f3(a) int a; {} /* { dg-message \"note: previous definition of 'f3' was here\" } */\n+void f3(a) int a; {} /* { dg-message \"note: previous definition of 'f3'\" \"note\" } */\n void f3(void); /* { dg-error \"prototype for 'f3' declares fewer arguments than previous old-style definition\" } */\n \n void f4(a) int a; {}\n void f4(int); /* { dg-warning \"prototype for 'f4' follows non-prototype definition\" } */\n \n-void f5(a) int a; {} /* { dg-message \"note: previous definition of 'f5' was here\" } */\n+void f5(a) int a; {} /* { dg-message \"note: previous definition of 'f5'\" \"note\" } */\n void f5(int, int); /* { dg-error \"prototype for 'f5' declares more arguments than previous old-style definition\" } */\n \n-void f6(a) int a; {} /* { dg-message \"note: previous definition of 'f6' was here\" } */\n+void f6(a) int a; {} /* { dg-message \"note: previous definition of 'f6'\" \"note\" } */\n void f6(int, ...); /* { dg-error \"conflicting types for 'f6'\" } */\n \n-void f7(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f7' was here\" } */\n+void f7(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f7'\" \"note\" } */\n void f7(int); /* { dg-error \"prototype for 'f7' declares fewer arguments than previous old-style definition\" } */\n \n-void f8(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f8' was here\" } */\n+void f8(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f8'\" \"note\" } */\n void f8(int, ...); /* { dg-error \"conflicting types for 'f8'\" } */\n \n void f9(a, b) int a, b; {}\n void f9(int, int); /* { dg-warning \"prototype for 'f9' follows non-prototype definition\" } */\n \n-void f10(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f10' was here\" } */\n+void f10(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f10'\" \"note\" } */\n void f10(int, long); /* { dg-error \"prototype for 'f10' declares argument 2 with incompatible type\" } */\n \n-void f11(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f11' was here\" } */\n+void f11(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f11'\" \"note\" } */\n void f11(long, int); /* { dg-error \"prototype for 'f11' declares argument 1 with incompatible type\" } */\n \n void f12(a, b) const int a; volatile int b; {}\n void f12(volatile int, const int); /* { dg-warning \"prototype for 'f12' follows non-prototype definition\" } */\n \n-void f13(a) const int a[2][2]; {} /* { dg-message \"note: previous definition of 'f13' was here\" } */\n+void f13(a) const int a[2][2]; {} /* { dg-message \"note: previous definition of 'f13'\" \"note\" } */\n void f13(volatile int [2][2]); /* { dg-error \"prototype for 'f13' declares argument 1 with incompatible type\" } */"}, {"sha": "d7621bcd6b2bc1709d0c6c3d06b4e5fb9de709ec", "filename": "gcc/testsuite/gcc.dg/parm-mismatch-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -4,15 +4,15 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-void f0(); /* { dg-message \"note: previous declaration of 'f0' was here\" } */\n+void f0(); /* { dg-message \"note: previous declaration of 'f0'\" \"note\" } */\n void f0(int, ...); /* { dg-error \"conflicting types for 'f0'\" } */\n /* { dg-message \"note: a parameter list with an ellipsis cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n-void f1(int, ...); /* { dg-message \"note: previous declaration of 'f1' was here\" } */\n+void f1(int, ...); /* { dg-message \"note: previous declaration of 'f1'\" \"note\" } */\n void f1(); /* { dg-error \"conflicting types for 'f1'\" } */\n /* { dg-message \"note: a parameter list with an ellipsis cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n-void f2(); /* { dg-message \"note: previous declaration of 'f2' was here\" } */\n+void f2(); /* { dg-message \"note: previous declaration of 'f2'\" \"note\" } */\n void f2(char); /* { dg-error \"conflicting types for 'f2'\" } */\n /* { dg-message \"note: an argument type that has a default promotion cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */\n-void f3(char); /* { dg-message \"note: previous declaration of 'f3' was here\" } */\n+void f3(char); /* { dg-message \"note: previous declaration of 'f3'\" \"note\" } */\n void f3(); /* { dg-error \"conflicting types for 'f3'\" } */\n /* { dg-message \"note: an argument type that has a default promotion cannot match an empty parameter name list declaration\" \"note\" { target *-*-* } .-1 } */"}, {"sha": "30c29f4c3bc59a3d2c640ae1c06047a2efc80923", "filename": "gcc/testsuite/gcc.dg/pr35445.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35445.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35445.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35445.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -2,5 +2,5 @@\n /* { dg-do compile } */\n \n extern int i;\n-extern int i; /* { dg-message \"was here\" } */\n+extern int i; /* { dg-message \"previous declaration of 'i'\" } */\n int i[] = { 0 }; /* { dg-error \"conflicting types\" } */"}, {"sha": "48ea93d53c79fa06d852299b89a23b094cfe06a2", "filename": "gcc/testsuite/gcc.dg/pr97882.c", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97882.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97882.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97882.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -0,0 +1,144 @@\n+/* PR c/97882 - Segmentation Fault on improper redeclaration of function\n+   { dg-do compile }\n+   { dg-options \"\" } */\n+\n+// Check pointer declaration incompatibiliies.\n+\n+extern enum E e_u;      // { dg-message \"note: previous declaration of 'e_u' with type 'enum E'\" \"note\" }\n+unsigned e_u;           // { dg-error \"conflicting types for 'e_u'; have 'unsigned int'\" }\n+\n+\n+extern enum E *p;       // { dg-message \"note: previous declaration of 'p' with type 'enum E \\\\*'\" \"note\" }\n+unsigned *p;            // { dg-error \"conflicting types for 'p'; have 'unsigned int \\\\*'\" }\n+\n+extern enum E **p2;     // { dg-message \"note: previous declaration of 'p2' with type 'enum E \\\\*\\\\*'\" \"note\" }\n+unsigned **p2;          // { dg-error \"conflicting types for 'p2'; have 'unsigned int \\\\*\\\\*'\" }\n+\n+extern enum E ***p3;    // { dg-message \"note: previous declaration of 'p3' with type 'enum E \\\\*\\\\*\\\\*'\" \"note\" }\n+unsigned ***p3;         // { dg-error \"conflicting types for 'p3'; have 'unsigned int \\\\*\\\\*\\\\*'\" }\n+\n+extern enum F *q;       // { dg-message \"note: previous declaration of 'q' with type 'enum F \\\\*'\" \"note\" }\n+int *q;                 // { dg-error \"conflicting types for 'q'; have 'int \\\\*'\" }\n+\n+extern enum E* r[];     // { dg-message \"note: previous declaration of 'r' with type 'enum E \\\\*\\\\\\[]'\" \"note\" }\n+extern unsigned *r[1];  // { dg-error \"conflicting types for 'r'; have 'unsigned int \\\\*\\\\\\[1]'\" }\n+\n+extern enum E **r2[];   // { dg-message \"note: previous declaration of 'r2' with type 'enum E \\\\*\\\\*\\\\\\[]'\" \"note\" }\n+extern unsigned **r2[2];// { dg-error \"conflicting types for 'r2'; have 'unsigned int \\\\*\\\\*\\\\\\[2]'\" }\n+\n+\n+typedef enum E* EPAx[];\n+typedef unsigned* UPAx[];\n+\n+extern EPAx* peax;      //  { dg-message \"note: previous declaration of 'peax' with type 'enum E \\\\* \\\\(\\\\*\\\\)\\\\\\[]'\" \"note\" }\n+extern UPAx* peax;      // { dg-error \"conflicting types for 'peax'; have 'unsigned int \\\\* \\\\(\\\\*\\\\)\\\\\\[]'\" }\n+\n+\n+/* Check incompatibilities in the return type in a redeclaration\n+   of a function without a prototye.  */\n+\n+/* Verify the following isn't rejected.  */\n+void f_v ();\n+void f_v (void);\n+\n+enum E fE_u ();        // { dg-message \"previous declaration of 'fE_u' with type 'enum E\\\\(\\\\)'\" \"note\" }\n+unsigned fE_u ();      // { dg-error \"conflicting types for 'fE_u'; have 'unsigned int\\\\(\\\\)'\" }\n+\n+enum E* fpE_u ();      // { dg-message \"previous declaration of 'fpE_u' with type 'enum E \\\\*\\\\(\\\\)'\" \"note\" }\n+unsigned* fpE_u ();    // { dg-error \"conflicting types for 'fpE_u'; have 'unsigned int \\\\*\\\\(\\\\)'\" }\n+\n+enum E** fppE_u ();     // { dg-message \"previous declaration of 'fppE_u' with type 'enum E \\\\*\\\\*\\\\(\\\\)'\" \"note\" }\n+unsigned** fppE_u ();   // { dg-error \"conflicting types for 'fppE_u'; have 'unsigned int \\\\*\\\\*\\\\(\\\\)'\" }\n+\n+enum E** fppE_u ();     // { dg-message \"previous declaration of 'fppE_u' with type 'enum E \\\\*\\\\*\\\\(\\\\)'\" \"note\" }\n+unsigned** fppE_u ();   // { dg-error \"conflicting types for 'fppE_u'; have 'unsigned int \\\\*\\\\*\\\\(\\\\)'\" }\n+\n+enum E gE_u ();        // { dg-message \"previous declaration of 'gE_u' with type 'enum E\\\\(\\\\)'\" \"note\" }\n+unsigned gE_u ()       // { dg-error \"conflicting types for 'gE_u'; have 'unsigned int\\\\(\\\\)'\" }\n+{ return 0; }\n+\n+enum E** gppE_u ();    // { dg-message \"previous declaration of 'gppE_u' with type 'enum E \\\\*\\\\*\\\\(\\\\)'\" \"note\" }\n+unsigned** gppE_u ()   // { dg-error \"conflicting types for 'gppE_u'; have 'unsigned int \\\\*\\\\*\\\\(\\\\)'\" }\n+{ return 0; }\n+\n+unsigned fu_E ();      // { dg-message \"previous declaration of 'fu_E' with type 'unsigned int\\\\(\\\\)'\" \"note\" }\n+enum E fu_E ();        // { dg-error \"conflicting types for 'fu_E'; have 'enum E\\\\(\\\\)'\" }\n+\n+unsigned gu_E ();      // { dg-message \"previous declaration of 'gu_E' with type 'unsigned int\\\\(\\\\)'\" \"note\" }\n+enum E gu_E () { }     // { dg-error \"conflicting types for 'gu_E'\" }\n+                       // { dg-error \"incomplete type\" \"return type\" { target *-*-* } .-1 }\n+\n+typedef enum E FE_ ();\n+typedef unsigned Fuv (void);\n+\n+FE_* fpF_u ();         // // { dg-message \"previous declaration of 'fpF_u' with type 'enum E \\\\(\\\\*\\\\(\\\\)\\\\)\\\\(\\\\)'\" \"note\" }\n+Fuv* fpF_u ();         // { dg-error \"conflicting types for 'fpF_u'; have 'unsigned int \\\\(\\\\*\\\\(\\\\)\\\\)\\\\(void\\\\)'\" }\n+\n+\n+typedef void Fv_ ();\n+typedef void Fvv (void);\n+\n+/* Verify the following isn't rejected.  */\n+Fv_* f ();\n+Fvv* f ();\n+\n+\n+/* Check incompatibilities in argument types of a function redeclaration.  */\n+\n+void fvE_u (enum E);    // { dg-message \"note: previous declaration of 'fvE_u' with type 'void\\\\(enum E\\\\)'\" \"note\" }\n+void fvE_u (unsigned);  // { dg-error \"conflicting types for 'fvE_u'; have 'void\\\\(unsigned int\\\\)'\" }\n+\n+void fviE_u (int, enum E);    // { dg-message \"note: previous declaration of 'fviE_u' with type 'void\\\\(int, *enum E\\\\)'\" \"note\" }\n+void fviE_u (int, unsigned);  // { dg-error \"conflicting types for 'fviE_u'; have 'void\\\\(int, *unsigned int\\\\)'\" }\n+\n+void fvE_el (enum E, ...);    // { dg-message \"note: previous declaration of 'fvE_el' with type 'void\\\\(enum E, \\\\.\\\\.\\\\.\\\\)'\" \"note\" }\n+void fvE_el (unsigned, ...);  // { dg-error \"conflicting types for 'fvE_el'; have 'void\\\\(unsigned int, \\\\.\\\\.\\\\.\\\\)'\" }\n+\n+\n+/* Check incompatibilities in the return type in a redeclaration\n+   of a nested function without a prototye.  */\n+\n+void f1 (void)\n+{\n+  enum G f11 ();        // { dg-message \"note: previous declaration of 'f11' with type 'enum G\\\\(\\\\)'\" \"note\" }\n+  unsigned f11 () { }   // { dg-error \"conflicting types for 'f11'; have 'unsigned int\\\\(\\\\)'\" }\n+}\n+\n+\n+void f2 (void)\n+{\n+  const enum G f21 ();  // { dg-message \"note: previous declaration of 'f21' with type 'enum G\\\\(\\\\)'\" \"note\" }\n+  unsigned f21 () { }   // { dg-error \"conflicting types for 'f21'; have 'unsigned int\\\\(\\\\)'\" }\n+}\n+\n+\n+void f3 (void)\n+{\n+  enum G f31 ();        // { dg-message \"note: previous declaration of 'f31' with type 'enum G\\\\(\\\\)'\" \"note\" }\n+  const unsigned f31 () { }   // { dg-error \"conflicting types for 'f31'; have 'unsigned int\\\\(\\\\)'\" }\n+}\n+\n+\n+void f4 (void)\n+{\n+  auto enum G f31 ();         // { dg-message \"note: previous declaration of 'f31' with type 'enum G\\\\(\\\\)'\" \"note\" }\n+  const unsigned f31 () { }   // { dg-error \"conflicting types for 'f31'; have 'unsigned int\\\\(\\\\)'\" }\n+}\n+\n+\n+void f5 (void)\n+{\n+  enum G* f51 ();       // { dg-message \"note: previous declaration of 'f51' with type 'enum G \\\\*\\\\(\\\\)'\" \"note\" }\n+  int* f51 () { }       // { dg-error \"conflicting types for 'f51'; have 'int \\\\*\\\\(\\\\)'\" }\n+}\n+\n+\n+void f6 (void)\n+{\n+  enum G;\n+  void f61 (enum G);    // { dg-message \"note: previous declaration of 'f61' with type 'void\\\\(enum G\\\\)'\" \"note\" }\n+  void f61 (unsigned)   // { dg-error \"conflicting types for 'f61'; have 'void\\\\(unsigned int\\\\)'\" }\n+  { }\n+}\n+\n+// { dg-prune-output \"nested function '\\[^\\n\\r ]+' declared but never defined\" }"}, {"sha": "96f7f16305d46d3116e83e2498d731205578d3f8", "filename": "gcc/testsuite/gcc.dg/qual-return-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-7.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -0,0 +1,18 @@\n+/* Same as qual-return-3.c but with nested functions.\n+   { dg-do compile }\n+   { dg-options \"-std=gnu99\" } */\n+\n+void test_local (void)\n+{\n+  auto int foo ();                /* { dg-message \"note: previous declaration\" \"different qualifiers\" } */\n+\n+  const int foo () { return 0; }  /* { dg-error \"conflicting types\" \"different qualifiers\" } */\n+\n+  auto void bar (void);\n+  volatile void bar () { }        /* { dg-warning \"qualified|volatile\" \"different qualifiers\" } */\n+\n+  auto volatile void baz (void);\n+  void baz () { }                 /* { dg-warning \"not compatible\" \"different qualifiers\" } */\n+}\n+\n+/* { dg-prune-output \"nested function 'foo' declared but never defined\" } */"}, {"sha": "de1e7cb7b64d830f85824a38206ee73fec48c3b7", "filename": "gcc/testsuite/gcc.dg/qual-return-8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-8.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -0,0 +1,28 @@\n+/* Same as qual-return-7.c but in C11 mode.\n+   { dg-do compile }\n+   { dg-options \"-std=gnu11\" } */\n+\n+void test_local (void)\n+{\n+#if 0\n+  /* _Atomic is not considered a qualifier and so is not ignored\n+     on a return type.  As a result, the redeclaration below isn't\n+     valid.  See also qual-return-5.c.  */\n+  auto int fi_ai ();\n+  _Atomic int fi_ai () { return 0; }\n+#endif\n+\n+  auto int fi_ci ();\n+  const int fi_ci () { return 0; }\n+\n+  auto enum E fe_ce ();\n+\n+  enum E { e };\n+  const enum E fe_ce () { return 0; }\n+\n+  auto void fv_vv (void);\n+  volatile void fv_vv () { }\n+\n+  auto volatile void fvv_v (void);\n+  void fvv_v () { }\n+}"}, {"sha": "3c6f64fca51cf0a3d466ae3fa8e70ad9695c4694", "filename": "gcc/testsuite/gcc.dg/redecl-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n int f(int (*)[]);\n-void g() { int f(int (*)[2]); } /* { dg-message \"note: previous declaration of 'f' was here\" } */\n+void g() { int f(int (*)[2]); } /* { dg-message \"note: previous declaration of 'f'\" \"note\" } */\n int f(int (*)[3]); /* { dg-error \"conflicting types for 'f'\" } */"}, {"sha": "9922cf49fc589e2356b9c837d9cb49e44831a4a9", "filename": "gcc/testsuite/gcc.dg/redecl-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n extern int a[];\n-void f(void) { extern int a[]; extern int a[10]; } /* { dg-message \"note: previous declaration of 'a' was here\" } */\n+void f(void) { extern int a[]; extern int a[10]; } /* { dg-message \"note: previous declaration of 'a'\" \"note\" } */\n extern int a[5]; /* { dg-error \"conflicting types for 'a'\" } */"}, {"sha": "556a3cd69b6a5bb49e361783bd93473ac27faa01", "filename": "gcc/testsuite/gcc.dg/redecl-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n extern int a[];\n-void f(void) { extern int a[10]; } /* { dg-message \"note: previous declaration of 'a' was here\" } */\n+void f(void) { extern int a[10]; } /* { dg-message \"note: previous declaration of 'a'\" \"note\" } */\n extern int a[5]; /* { dg-error \"conflicting types for 'a'\" } */"}, {"sha": "06d6523eea68108c15fb1c86686a845221dbd7ed", "filename": "gcc/testsuite/gcc.dg/redecl-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -7,7 +7,7 @@\n void\n f (void)\n {\n-  g(); /* { dg-message \"note: previous implicit declaration of 'g' was here\" } */\n+  g(); /* { dg-message \"note: previous implicit declaration of 'g'\" } */\n   {\n     void g(); /* { dg-warning \"conflicting types for 'g'\" } */\n   }"}, {"sha": "af51484b49169e86cb95da1434e6e6e41998e8bc", "filename": "gcc/testsuite/gcc.dg/tls/thr-init-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-init-1.c?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -6,4 +6,4 @@ static __thread int fstat = 1 ; /* { dg-line fstat_prev } */\n static __thread int fstat ;\n static __thread int fstat = 2;\n /* { dg-error \"redefinition of 'fstat'\" \"\" { target *-*-* } .-1 } */\n-/* { dg-message \"note: previous definition of 'fstat' was here\" \"\" { target *-*-* } fstat_prev } */\n+/* { dg-message \"note: previous definition of 'fstat'\" \"note\" { target *-*-* } fstat_prev } */"}, {"sha": "271dbe64e967fa4a605b5d62f4323c66ec171c34", "filename": "gcc/testsuite/objc.dg/id-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -2,6 +2,6 @@\n /* { dg-do compile } */\n \n typedef int id;  /* { dg-error \"conflicting types for .id.\" } */\n-/* { dg-message \"previous declaration of .id. was here\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"previous declaration of .id.\" \"\" { target *-*-* } 0 } */\n \n id b;"}, {"sha": "b39d5658c91e38d38f759ba644ce2ddc5fa346e6", "filename": "gcc/testsuite/objc.dg/tls/diag-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce5720447c69286599b96bae53ae854b1bbe41fa/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-3.m?ref=ce5720447c69286599b96bae53ae854b1bbe41fa", "patch": "@@ -1,10 +1,10 @@\n /* Report invalid extern and __thread combinations. */\n /* { dg-require-effective-target tls } */\n \n-extern int j;\t\t/* { dg-message \"previous declaration of 'j' was here\" } */\n+extern int j;\t\t/* { dg-message \"previous declaration of 'j'\" } */\n __thread int j;\t\t/* { dg-error \"follows non-thread-local\" } */\n \n-extern __thread int i;\t/* { dg-message \"previous declaration of 'i' was here\" } */\n+extern __thread int i;\t/* { dg-message \"previous declaration of 'i'\" } */\n int i;\t\t\t/* { dg-error \"follows thread-local\" } */\n \n extern __thread int k;\t/* This is fine. */"}]}