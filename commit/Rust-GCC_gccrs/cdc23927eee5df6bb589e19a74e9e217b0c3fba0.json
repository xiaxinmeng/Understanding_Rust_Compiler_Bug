{"sha": "cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjMjM5MjdlZWU1ZGY2YmI1ODllMTlhNzRlOWUyMTdiMGMzZmJhMA==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2016-02-10T15:22:17Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-02-10T15:22:17Z"}, "message": "re PR tree-optimization/69652 ([ICE] verify_ssa fail w/ -O2 -ffast-math -ftree-vectorize)\n\ngcc/\n\n2016-02-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n\n\tPR tree-optimization/69652\n\t* tree-vect-loop.c (optimize_mask_stores): Move declaration of STMT1\n\tto nested loop, did source re-formatting, skip debug statements,\n\tadd check on statement with volatile operand, remove dead scalar\n\tstatements.\n\ngcc/testsuite/\n\n2016-02-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n\n\tPR tree-optimization/69652\n\t* gcc.dg/torture/pr69652.c: New test.\n\nFrom-SVN: r233275", "tree": {"sha": "66b4063da6e73d757c82171c1d49da53c3d631f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b4063da6e73d757c82171c1d49da53c3d631f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03a0ae7d98f05b0a5576622ecd0ebe8247c30711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a0ae7d98f05b0a5576622ecd0ebe8247c30711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a0ae7d98f05b0a5576622ecd0ebe8247c30711"}], "stats": {"total": 161, "additions": 102, "deletions": 59}, "files": [{"sha": "ac3dbbc8b1da145a52c6f45df25f7f3c99226201", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "patch": "@@ -1,3 +1,11 @@\n+2016-02-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/69652\n+\t* tree-vect-loop.c (optimize_mask_stores): Move declaration of STMT1\n+\tto nested loop, did source re-formatting, skip debug statements,\n+\tadd check on statement with volatile operand, remove dead scalar\n+\tstatements.\n+\n 2016-02-10  Jakub Jelinek  <jakub@redhat.com>\n \t    Patrick Palka  <ppalka@gcc.gnu.org>\n "}, {"sha": "6eb0aaa74eb02777de643147d7314cd808ac6177", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "patch": "@@ -1,3 +1,8 @@\n+2016-02-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/69652\n+\t* gcc.dg/torture/pr69652.c: New test.\n+\n 2016-02-10  Jakub Jelinek  <jakub@redhat.com>\n \t    Patrick Palka  <ppalka@gcc.gnu.org>\n "}, {"sha": "ab7b69842c6b128098fabfa05a19931be100d580", "filename": "gcc/testsuite/gcc.dg/torture/pr69652.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69652.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69652.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69652.c?ref=cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize \" } */\n+/* { dg-additional-options \"-mavx\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+void fn1(double **matrix, int column, int row, int n)\n+{\n+  int k;\n+  for (k = 0; k < n; k++)\n+    if (matrix[row][k] != matrix[column][k])\n+      {\n+\tmatrix[column][k] = -matrix[column][k];\n+\tmatrix[row][k] = matrix[row][k] - matrix[column][k];\n+      }\n+}"}, {"sha": "bbef502db3fcbe3d422dc3525bec55d6e4853d30", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 75, "deletions": 59, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc23927eee5df6bb589e19a74e9e217b0c3fba0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=cdc23927eee5df6bb589e19a74e9e217b0c3fba0", "patch": "@@ -6970,7 +6970,7 @@ optimize_mask_stores (struct loop *loop)\n   unsigned i;\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n-  gimple *stmt, *stmt1 = NULL;\n+  gimple *stmt;\n   auto_vec<gimple *> worklist;\n \n   vect_location = find_loop_location (loop);\n@@ -7049,6 +7049,8 @@ optimize_mask_stores (struct loop *loop)\n       while (true)\n \t{\n \t  gimple_stmt_iterator gsi_from;\n+\t  gimple *stmt1 = NULL;\n+\n \t  /* Move masked store to STORE_BB.  */\n \t  last_store = last;\n \t  gsi = gsi_for_stmt (last);\n@@ -7065,67 +7067,81 @@ optimize_mask_stores (struct loop *loop)\n \t\t\t       \"Move stmt to created bb\\n\");\n \t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, last, 0);\n \t    }\n-\t    /* Move all stored value producers if possible.  */\n-\t    while (!gsi_end_p (gsi))\n-\t      {\n-\t\ttree lhs;\n-\t\timm_use_iterator imm_iter;\n-\t\tuse_operand_p use_p;\n-\t\tbool res;\n-\t\tstmt1 = gsi_stmt (gsi);\n-\t\t/* Do not consider statements writing to memory.  */\n-\t\tif (gimple_vdef (stmt1))\n-\t\t  break;\n-\t\tgsi_from = gsi;\n-\t\tgsi_prev (&gsi);\n-\t\tlhs = gimple_get_lhs (stmt1);\n-\t\tif (!lhs)\n-\t\t  break;\n-\n-\t\t/* LHS of vectorized stmt must be SSA_NAME.  */\n-\t\tif (TREE_CODE (lhs) != SSA_NAME)\n-\t\t  break;\n-\n-\t\t/* Skip scalar statements.  */\n-\t\tif (!VECTOR_TYPE_P (TREE_TYPE (lhs)))\n-\t\t  continue;\n+\t  /* Move all stored value producers if possible.  */\n+\t  while (!gsi_end_p (gsi))\n+\t    {\n+\t      tree lhs;\n+\t      imm_use_iterator imm_iter;\n+\t      use_operand_p use_p;\n+\t      bool res;\n \n-\t\t/* Check that LHS does not have uses outside of STORE_BB.  */\n-\t\tres = true;\n-\t\tFOR_EACH_IMM_USE_FAST (use_p, imm_iter, lhs)\n-\t\t  {\n-\t\t    gimple *use_stmt;\n-\t\t    use_stmt = USE_STMT (use_p);\n-\t\t    if (gimple_bb (use_stmt) != store_bb)\n-\t\t      {\n-\t\t\tres = false;\n-\t\t\tbreak;\n-\t\t      }\n-\t\t  }\n-\t\tif (!res)\n-\t\t  break;\n+\t      /* Skip debug statements.  */\n+\t      if (is_gimple_debug (gsi_stmt (gsi)))\n+\t\tcontinue;\n+\t      stmt1 = gsi_stmt (gsi);\n+\t      /* Do not consider statements writing to memory or having\n+\t\t volatile operand.  */\n+\t      if (gimple_vdef (stmt1)\n+\t\t  || gimple_has_volatile_ops (stmt1))\n+\t\tbreak;\n+\t      gsi_from = gsi;\n+\t      gsi_prev (&gsi);\n+\t      lhs = gimple_get_lhs (stmt1);\n+\t      if (!lhs)\n+\t\tbreak;\n \n-\t\tif (gimple_vuse (stmt1)\n-\t\t    && gimple_vuse (stmt1) != gimple_vuse (last_store))\n-\t\t  break;\n+\t      /* LHS of vectorized stmt must be SSA_NAME.  */\n+\t      if (TREE_CODE (lhs) != SSA_NAME)\n+\t\tbreak;\n \n-\t\t/* Can move STMT1 to STORE_BB.  */\n-\t\tif (dump_enabled_p ())\n-\t\t  {\n-\t\t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t\t     \"Move stmt to created bb\\n\");\n-\t\t    dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt1, 0);\n-\t\t  }\n-\t\tgsi_move_before (&gsi_from, &gsi_to);\n-\t\t/* Shift GSI_TO for further insertion.  */\n-\t\tgsi_prev (&gsi_to);\n-\t      }\n-\t    /* Put other masked stores with the same mask to STORE_BB.  */\n-\t    if (worklist.is_empty ()\n-\t\t|| gimple_call_arg (worklist.last (), 2) != mask\n-\t\t|| worklist.last () != stmt1)\n-\t      break;\n-\t    last = worklist.pop ();\n+\t      if (!VECTOR_TYPE_P (TREE_TYPE (lhs)))\n+\t\t{\n+\t\t  /* Remove dead scalar statement.  */\n+\t\t  if (has_zero_uses (lhs))\n+\t\t    {\n+\t\t      gsi_remove (&gsi_from, true);\n+\t\t      continue;\n+\t\t    }\n+\t\t}\n+\n+\t      /* Check that LHS does not have uses outside of STORE_BB.  */\n+\t      res = true;\n+\t      FOR_EACH_IMM_USE_FAST (use_p, imm_iter, lhs)\n+\t\t{\n+\t\t  gimple *use_stmt;\n+\t\t  use_stmt = USE_STMT (use_p);\n+\t\t  if (is_gimple_debug (use_stmt))\n+\t\t    continue;\n+\t\t  if (gimple_bb (use_stmt) != store_bb)\n+\t\t    {\n+\t\t      res = false;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      if (!res)\n+\t\tbreak;\n+\n+\t      if (gimple_vuse (stmt1)\n+\t\t  && gimple_vuse (stmt1) != gimple_vuse (last_store))\n+\t\tbreak;\n+\n+\t      /* Can move STMT1 to STORE_BB.  */\n+\t      if (dump_enabled_p ())\n+\t\t{\n+\t\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t   \"Move stmt to created bb\\n\");\n+\t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt1, 0);\n+\t\t}\n+\t      gsi_move_before (&gsi_from, &gsi_to);\n+\t      /* Shift GSI_TO for further insertion.  */\n+\t      gsi_prev (&gsi_to);\n+\t    }\n+\t  /* Put other masked stores with the same mask to STORE_BB.  */\n+\t  if (worklist.is_empty ()\n+\t      || gimple_call_arg (worklist.last (), 2) != mask\n+\t      || worklist.last () != stmt1)\n+\t    break;\n+\t  last = worklist.pop ();\n \t}\n       add_phi_arg (phi, gimple_vuse (last_store), e, UNKNOWN_LOCATION);\n     }"}]}