{"sha": "88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjZTNkNWZiYjk0OGNjNjAwODAwYjE1ZjRjYTc3NGEwY2U4ZTdhNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-02T20:53:00Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-02T20:53:00Z"}, "message": "Daily bump.", "tree": {"sha": "aefd01a11fa4670cf14d4cc54452ad6b12fcc7a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aefd01a11fa4670cf14d4cc54452ad6b12fcc7a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/comments", "author": null, "committer": null, "parents": [{"sha": "9e3c694afacf965293fe8b3b7b9a5022415e03c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3c694afacf965293fe8b3b7b9a5022415e03c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3c694afacf965293fe8b3b7b9a5022415e03c9"}], "stats": {"total": 968, "additions": 967, "deletions": 1}, "files": [{"sha": "b7f8a0ca1531e14ccc1c7bc0520bbb74036f33c9", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,10 @@\n+2020-10-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Handle empty groups in\n+\tfile description.\n+\t* gcc-changelog/test_email.py: New test.\n+\t* gcc-changelog/test_patches.txt: Likewise.\n+\n 2020-09-21  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* mklog.py: Parse first 10 lines for PR/DR number"}, {"sha": "bfdd1e566e09b2824004228a2a4af599aa8f126b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 456, "deletions": 0, "changes": 456, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,459 @@\n+2020-11-02  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/invoke.texi (-Wstringop-overflow): Correct default setting.\n+\t(-Wstringop-overread): Move past -Wstringop-overflow.\n+\n+2020-11-02  Fran\u00e7ois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR bootstrap/57076\n+\t* Makefile.in (gcc-vers.texi): Quote @, { and }.\n+\n+2020-11-02  Carl Love  <cel@us.ibm.com>\n+\n+\tPR target/93449\n+\t* config/rs6000/altivec.h (__builtin_bcdadd, __builtin_bcdadd_lt,\n+\t__builtin_bcdadd_eq, __builtin_bcdadd_gt, __builtin_bcdadd_ofl,\n+\t__builtin_bcdadd_ov, __builtin_bcdsub, __builtin_bcdsub_lt,\n+\t__builtin_bcdsub_eq, __builtin_bcdsub_gt, __builtin_bcdsub_ofl,\n+\t__builtin_bcdsub_ov, __builtin_bcdinvalid, __builtin_bcdmul10,\n+\t__builtin_bcddiv10, __builtin_bcd2dfp, __builtin_bcdcmpeq,\n+\t__builtin_bcdcmpgt, __builtin_bcdcmplt, __builtin_bcdcmpge,\n+\t__builtin_bcdcmple): Add defines.\n+\t* config/rs6000/altivec.md: Add UNSPEC_BCDSHIFT.\n+\t(BCD_TEST): Add le, ge to code iterator.\n+\tAdd VBCD mode iterator.\n+\t(bcd<bcd_add_sub>_test, *bcd<bcd_add_sub>_test2,\n+\tbcd<bcd_add_sub>_<code>, bcd<bcd_add_sub>_<code>): Add mode to name.\n+\tChange iterator from V1TI to VBCD.\n+\t(*bcdinvalid_<mode>, bcdshift_v16qi): New define_insn.\n+\t(bcdinvalid_<mode>, bcdmul10_v16qi, bcddiv10_v16qi): New define.\n+\t* config/rs6000/dfp.md (dfp_denbcd_v16qi_inst): New define_insn.\n+\t(dfp_denbcd_v16qi): New define_expand.\n+\t* config/rs6000/rs6000-builtin.def (BU_P8V_MISC_1): New define.\n+\t(BCDADD): Replaced with BCDADD_V1TI and BCDADD_V16QI.\n+\t(BCDADD_LT): Replaced with BCDADD_LT_V1TI and BCDADD_LT_V16QI.\n+\t(BCDADD_EQ): Replaced with BCDADD_EQ_V1TI and BCDADD_EQ_V16QI.\n+\t(BCDADD_GT): Replaced with BCDADD_GT_V1TI and BCDADD_GT_V16QI.\n+\t(BCDADD_OV): Replaced with BCDADD_OV_V1TI and BCDADD_OV_V16QI.\n+\t(BCDSUB_V1TI, BCDSUB_V16QI, BCDSUB_LT_V1TI, BCDSUB_LT_V16QI,\n+\tBCDSUB_LE_V1TI, BCDSUB_LE_V16QI, BCDSUB_EQ_V1TI, BCDSUB_EQ_V16QI,\n+\tBCDSUB_GT_V1TI, BCDSUB_GT_V16QI, BCDSUB_GE_V1TI, BCDSUB_GE_V16QI,\n+\tBCDSUB_OV_V1TI, BCDSUB_OV_V16QI, BCDINVALID_V1TI, BCDINVALID_V16QI,\n+\tBCDMUL10_V16QI, BCDDIV10_V16QI, DENBCD_V16QI): New builtin definitions.\n+\t(BCDADD, BCDADD_LT, BCDADD_EQ, BCDADD_GT, BCDADD_OV, BCDSUB, BCDSUB_LT,\n+\tBCDSUB_LE, BCDSUB_EQ, BCDSUB_GT, BCDSUB_GE, BCDSUB_OV, BCDINVALID,\n+\tBCDMUL10, BCDDIV10, DENBCD): New overload definitions.\n+\t* config/rs6000/rs6000-call.c (P8V_BUILTIN_VEC_BCDADD, P8V_BUILTIN_VEC_BCDADD_LT,\n+\tP8V_BUILTIN_VEC_BCDADD_EQ, P8V_BUILTIN_VEC_BCDADD_GT, P8V_BUILTIN_VEC_BCDADD_OV,\n+\tP8V_BUILTIN_VEC_BCDINVALID, P9V_BUILTIN_VEC_BCDMUL10, P8V_BUILTIN_VEC_DENBCD.\n+\tP8V_BUILTIN_VEC_BCDSUB, P8V_BUILTIN_VEC_BCDSUB_LT, P8V_BUILTIN_VEC_BCDSUB_LE,\n+\tP8V_BUILTIN_VEC_BCDSUB_EQ, P8V_BUILTIN_VEC_BCDSUB_GT, P8V_BUILTIN_VEC_BCDSUB_GE,\n+\tP8V_BUILTIN_VEC_BCDSUB_OV): New overloaded specifications.\n+\t(CODE_FOR_bcdadd): Replaced with CODE_FOR_bcdadd_v16qi and CODE_FOR_bcdadd_v1ti.\n+\t(CODE_FOR_bcdadd_lt): Replaced with CODE_FOR_bcdadd_lt_v16qi and CODE_FOR_bcdadd_lt_v1ti.\n+\t(CODE_FOR_bcdadd_eq): Replaced with CODE_FOR_bcdadd_eq_v16qi and CODE_FOR_bcdadd_eq_v1ti.\n+\t(CODE_FOR_bcdadd_gt): Replaced with CODE_FOR_bcdadd_gt_v16qi and CODE_FOR_bcdadd_gt_v1ti.\n+\t(CODE_FOR_bcdsub): Replaced with CODE_FOR_bcdsub_v16qi and CODE_FOR_bcdsub_v1ti.\n+\t(CODE_FOR_bcdsub_lt): Replaced with CODE_FOR_bcdsub_lt_v16qi and CODE_FOR_bcdsub_lt_v1ti.\n+\t(CODE_FOR_bcdsub_eq): Replaced with CODE_FOR_bcdsub_eq_v16qi and CODE_FOR_bcdsub_eq_v1ti.\n+\t(CODE_FOR_bcdsub_gt): Replaced with CODE_FOR_bcdsub_gt_v16qi and CODE_FOR_bcdsub_gt_v1ti.\n+\t(rs6000_expand_ternop_builtin):  Add CODE_FOR_dfp_denbcd_v16qi to else if.\n+\t* doc/extend.texi: Add documentation for new builtins.\n+\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.c (cache_integer_cst): Fixup pointer caching to match\n+\twide_int_to_type_1's expectations.  Add comment.\n+\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.h (id_equal): Call the symetric predicate with swapped\n+\targuments.\n+\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* print-tree.c (print_node): Display all the operands of a call\n+\texpr.\n+\n+2020-11-02  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* config/rs6000/vsx.md (*vsx_extract_<mode>_store_p9): Add hint *\n+\tto 2nd alternative of the 1st scratch.\n+\n+2020-11-02  Sudakshina Das  <sudi.das@arm.com>\n+\n+\tPR target/97638\n+\t* config/aarch64/aarch64-bti-insert.c (aarch64_pac_insn_p): Update\n+\treturn value on INSN_P check.\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.h (build_real_from_wide): Declare.\n+\t* tree.c (build_real_from_wide): New function.\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Remove\n+\trestriction on induction vectorization, represent\n+\tthe initial value.\n+\t* tree-vect-loop.c (vect_model_induction_cost): Inline ...\n+\t(vectorizable_induction): ... here.  Rewrite SLP\n+\tcode generation.\n+\n+2020-11-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* dbgcnt.def (ipa_cp_values): New counter.\n+\t(ipa_cp_vr): Likewise.\n+\t* ipa-cp.c (decide_about_value): Check and bump ipa_cp_values debug\n+\tcounter.\n+\t(decide_whether_version_node): Likewise.\n+\t(ipcp_store_vr_results):Check and bump ipa_cp_vr debug counter.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm.c (arm_thumb1_mi_thunk): Build mi_delta in r3 and\n+\tdo not emit function address and delta when -mpure-code is used.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/thumb1.md (thumb1_movsi_insn): Call\n+\tthumb1_gen_const_int_print.\n+\t* config/arm/arm-protos.h (thumb1_gen_const_int_print): Add\n+\tprototype.\n+\t* config/arm/arm.c (thumb1_gen_const_int_print): New.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm.c (thumb1_const_rtl, thumb1_const_print): New\n+\tclasses.\n+\t(thumb1_gen_const_int): Rename to ...\n+\t(thumb1_gen_const_int_1): ... New helper function. Add capability\n+\tto emit either RTL or asm, improve generated code.\n+\t(thumb1_gen_const_int_rtl): New function.\n+\t* config/arm/arm-protos.h (thumb1_gen_const_int): Rename to\n+\tthumb1_gen_const_int_rtl.\n+\t* config/arm/thumb1.md: Call thumb1_gen_const_int_rtl instead\n+\tof thumb1_gen_const_int.\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97558\n+\t* tree-vect-loop.c (vectorizable_reduction): For nested SLP\n+\tcycles compute invariant operands vector type.\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97558\n+\t* tree-vect-loop.c (vect_fixup_scalar_cycles_with_patterns):\n+\tCheck for any mismatch in pattern vs. non-pattern and dissolve\n+\tthe group if there is one.\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Avoid\n+\tanalyzing not relevant reductions.\n+\t(vect_analyze_slp): Avoid analyzing not relevant reduction\n+\tgroups.\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97650\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Check\n+\tfor SSA_NAME before checking SSA_NAME_IS_DEFAULT_DEF.\n+\n+2020-11-02  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c\n+\t(riscv_subset_list::parse_multiletter_ext): Checking multiletter\n+\textension has more than 1 letter.\n+\n+2020-11-02  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config.gcc (riscv*-*-*): Handle --with-multilib-generator.\n+\t* configure: Regen.\n+\t* configure.ac: Add --with-multilib-generator.\n+\t* config/riscv/multilib-generator: Exit when parsing arch string error.\n+\t* config/riscv/t-withmultilib-generator: New.\n+\t* doc/install.texi: Document --with-multilib-generator.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96770\n+\t* config/arm/arm.c (thumb_legitimate_constant_p): Accept\n+\t(symbol_ref + addend) when literal pool is disabled.\n+\t(arm_valid_symbolic_address_p): Add support for thumb-1 without\n+\tMOVT/MOVW.\n+\t* config/arm/thumb1.md (*thumb1_movsi_insn): Accept (symbol_ref +\n+\taddend) in the pure-code alternative.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96967\n+\t* config/arm/arm.c (thumb_legitimate_constant_p): Add support for\n+\tdisabled literal pool in thumb-1.\n+\t* config/arm/thumb1.md (thumb1_movsi_symbol_ref): Remove.\n+\t(*thumb1_movsi_insn): Add support for SYMBOL_REF with -mpure-code.\n+\n+2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/host-darwin.c: Align pch_address_space to 16384.\n+\n+2020-11-01  Pat Bernardi  <bernardi@adacore.com>\n+\n+\t* config/i386/i386.c (ix86_expand_prologue): Set the stack usage to 0\n+\tfor naked functions.\n+\n+2020-11-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR ipa/97660\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Don't call\n+\tclone_info::get when cgraph_node::get returns NULL.\n+\n+2020-10-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in: (OBJS): Add symtab-clones.o\n+\t(GTFILES): Add symtab-clones.h\n+\t* cgraph.c: Include symtab-clones.h.\n+\t(cgraph_edge::resolve_speculation): Fix formating\n+\t(cgraph_edge::redirect_call_stmt_to_callee): Update.\n+\t(cgraph_update_edges_for_call_stmt): Update\n+\t(release_function_body): Fix formating.\n+\t(cgraph_node::remove): Fix formating.\n+\t(cgraph_node::dump): Fix formating.\n+\t(cgraph_node::get_availability): Fix formating.\n+\t(cgraph_node::call_for_symbol_thunks_and_aliases): Fix formating.\n+\t(set_const_flag_1): Fix formating.\n+\t(set_pure_flag_1): Fix formating.\n+\t(cgraph_node::can_remove_if_no_direct_calls_p): Fix formating.\n+\t(collect_callers_of_node_1): Fix formating.\n+\t(clone_of_p): Update.\n+\t(cgraph_node::verify_node): Update.\n+\t(cgraph_c_finalize): Call clone_info::release ().\n+\t* cgraph.h (struct cgraph_clone_info): Move to symtab-clones.h.\n+\t(cgraph_node): Remove clone_info.\n+\t(symbol_table): Add m_clones.\n+\t* cgraphclones.c: Include symtab-clone.h.\n+\t(duplicate_thunk_for_node): Update.\n+\t(cgraph_node::create_clone): Update.\n+\t(cgraph_node::create_virtual_clone): Update.\n+\t(cgraph_node::find_replacement): Update.\n+\t(cgraph_node::materialize_clone): Update.\n+\t* gengtype.c (open_base_files): Include symtab-clones.h.\n+\t* ipa-cp.c: Include symtab-clones.h.\n+\t(initialize_node_lattices): Update.\n+\t(want_remove_some_param_p): Update.\n+\t(create_specialized_node): Update.\n+\t* ipa-fnsummary.c: Include symtab-clones.h.\n+\t(ipa_fn_summary_t::duplicate): Update.\n+\t* ipa-modref.c: Include symtab-clones.h.\n+\t(update_signature): Update.\n+\t* ipa-param-manipulation.c: Include symtab-clones.h.\n+\t(ipa_param_body_adjustments::common_initialization): Update.\n+\t* ipa-prop.c: Include symtab-clones.h.\n+\t(adjust_agg_replacement_values): Update.\n+\t(ipcp_get_parm_bits): Update.\n+\t(ipcp_update_bits): Update.\n+\t(ipcp_update_vr): Update.\n+\t* ipa-sra.c: Include symtab-clones.h.\n+\t(process_isra_node_results): Update.\n+\t(disable_unavailable_parameters): Update.\n+\t* lto-cgraph.c: Include symtab-clone.h.\n+\t(output_cgraph_opt_summary_p): Update.\n+\t(output_node_opt_summary): Update.\n+\t(input_node_opt_summary): Update.\n+\t* symtab-clones.cc: New file.\n+\t* symtab-clones.h: New file.\n+\t* tree-inline.c (expand_call_inline): Update.\n+\t(update_clone_info): Update.\n+\t(tree_function_versioning): Update.\n+\n+2020-10-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (modref_summary::dump): Dump writes_errno.\n+\t(parm_map_for_arg): Break out from ...\n+\t(merge_call_side_effects): ... here.\n+\t(get_access_for_fnspec): New function.\n+\t(process_fnspec): New function.\n+\t(analyze_call): Use it.\n+\t(analyze_stmt): Update.\n+\t(analyze_function): Initialize writes_errno.\n+\t(modref_summaries::duplicate): Duplicate writes_errno.\n+\t* ipa-modref.h (struct modref_summary): Add writes_errno.\n+\t* tree-ssa-alias.c (call_may_clobber_ref_p_1): Check errno.\n+\n+2020-10-30  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (glibc_supports_ieee_128bit): New helper\n+\tfunction.\n+\t(rs6000_option_override_internal): Call it.\n+\n+2020-10-30  Qing Zhao  <qing.zhao@oracle.com>\n+\t    H.J.Lu  <hjl.tools@gmail.com>\n+\n+\t* common.opt: Add new option -fzero-call-used-regs\n+\t* config/i386/i386.c (zero_call_used_regno_p): New function.\n+\t(zero_call_used_regno_mode): Likewise.\n+\t(zero_all_vector_registers): Likewise.\n+\t(zero_all_st_registers): Likewise.\n+\t(zero_all_mm_registers): Likewise.\n+\t(ix86_zero_call_used_regs): Likewise.\n+\t(TARGET_ZERO_CALL_USED_REGS): Define.\n+\t* df-scan.c (df_epilogue_uses_p): New function.\n+\t(df_get_exit_block_use_set): Replace EPILOGUE_USES with\n+\tdf_epilogue_uses_p.\n+\t* df.h (df_epilogue_uses_p): Declare.\n+\t* doc/extend.texi: Document the new zero_call_used_regs attribute.\n+\t* doc/invoke.texi: Document the new -fzero-call-used-regs option.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in (TARGET_ZERO_CALL_USED_REGS): New hook.\n+\t* emit-rtl.h (struct rtl_data): New field must_be_zero_on_return.\n+\t* flag-types.h (namespace zero_regs_flags): New namespace.\n+\t* function.c (gen_call_used_regs_seq): New function.\n+\t(class pass_zero_call_used_regs): New class.\n+\t(pass_zero_call_used_regs::execute): New function.\n+\t(make_pass_zero_call_used_regs): New function.\n+\t* optabs.c (expand_asm_reg_clobber_mem_blockage): New function.\n+\t* optabs.h (expand_asm_reg_clobber_mem_blockage): Declare.\n+\t* opts.c (zero_call_used_regs_opts): New structure array\n+\tinitialization.\n+\t(parse_zero_call_used_regs_options): New function.\n+\t(common_handle_option): Handle -fzero-call-used-regs.\n+\t* opts.h (zero_call_used_regs_opts): New structure array.\n+\t* passes.def: Add new pass pass_zero_call_used_regs.\n+\t* recog.c (valid_insn_p): New function.\n+\t* recog.h (valid_insn_p): Declare.\n+\t* resource.c (init_resource_info): Replace EPILOGUE_USES with\n+\tdf_epilogue_uses_p.\n+\t* target.def (zero_call_used_regs): New hook.\n+\t* targhooks.c (default_zero_call_used_regs): New function.\n+\t* targhooks.h (default_zero_call_used_regs): Declare.\n+\t* tree-pass.h (make_pass_zero_call_used_regs): Declare.\n+\n+2020-10-30  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* lra.c (get_scratch_reg): New function.\n+\t(remove_scratches_1): Rename remove_insn_scratches.  Use\n+\tira_remove_insn_scratches and get_scratch_reg.\n+\t(remove_scratches): Do not\n+\tinitialize scratches, scratch_bitmap, and scratch_operand_bitmap.\n+\t(lra): Call ira_restore_scratches instead of restore_scratches.\n+\t(struct sloc, sloc_t, scratches, scratch_bitmap)\n+\t(scratch_operand_bitmap, lra_former_scratch_p)\n+\t(lra_former_scratch_operand_p, lra_register_new_scratch_op)\n+\t(restore_scratches): Move them to ...\n+\t* ira.c: ... here.\n+\t(former_scratch_p, former_scratch_operand_p): Rename to\n+\tira_former_scratch_p and ira_former_scratch_operand_p.\n+\t(contains_X_constraint_p): New function.\n+\t(register_new_scratch_op): Rename to ira_register_new_scratch_op.\n+\tChange it to work for IRA and LRA.\n+\t(restore_scratches): Rename to ira_restore_scratches.\n+\t(get_scratch_reg, ira_remove_insn_scratches): New functions.\n+\t(ira): Call ira_remove_scratches if we use LRA.\n+\t* ira.h (ira_former_scratch_p, ira_former_scratch_operand_p): New\n+\tprototypes.\n+\t(ira_register_new_scratch_op, ira_restore_scratches): New prototypes.\n+\t(ira_remove_insn_scratches): New prototype.\n+\t* lra-int.h (lra_former_scratch_p, lra_former_scratch_operand_p):\n+\tRemove prototypes.\n+\t(lra_register_new_scratch_op): Ditto.\n+\t* lra-constraints.c: Rename lra_former_scratch_p and\n+\tlra_former_scratch_p to ira_former_scratch_p and to\n+\tira_former_scratch_p.\n+\t* lra-remat.c: Ditto.\n+\t* lra-spills.c: Rename lra_former_scratch_p to ira_former_scratch_p.\n+\n+2020-10-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97556\n+\t* builtins.c (access_ref::add_offset): Cap offset lower bound\n+\tto at most the the upper bound.\n+\n+2020-10-30  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR pch/97593\n+\t* cgraph.c (cgraph_node::create_thunk): Register thunk as early during\n+\tparsing.\n+\t* cgraphunit.c (analyze_functions): Call\n+\tthunk_info::process_early_thunks.\n+\t* symtab-thunks.cc (struct unprocessed_thunk): New struct.\n+\t(thunks): New static variable.\n+\t(thunk_info::register_early): New member function.\n+\t(thunk_info::process_early_thunks): New member function.\n+\t* symtab-thunks.h (thunk_info::register_early): Declare.\n+\t(thunk_info::process_early_thunks): Declare.\n+\n+2020-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97623\n+\t* tree-ssa-pre.c (insert): First do hoist insertion in\n+\ta backward walk.\n+\n+2020-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97626\n+\t* tree-vect-slp.c (vect_slp_analyze_node_operations):\n+\tExchange the lvisited hash-set for a vector, roll back\n+\trecursive adds to visited when analysis failed.\n+\t(vect_slp_analyze_operations): Likewise.\n+\n+2020-10-30  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\t    Nannan Zheng  <zhengnannan@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor conversion intrinsics.\n+\n+2020-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97633\n+\t* tree-vect-slp.c (): Update backedges in single-node cycles.\n+\tOptimize processing of externals.\n+\n+2020-10-30  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/96998\n+\t* combine.c (make_extraction): Also handle shifts written as\n+\t(mult x 2^n), avoid creating an extract rtx for these.\n+\t* config/aarch64/aarch64.c (aarch64_is_extend_from_extract): Delete.\n+\t(aarch64_classify_index): Remove extract-based address handling.\n+\t(aarch64_strip_extend): Likewise.\n+\t(aarch64_rtx_arith_op_extract_p): Likewise, remove now-unused parameter.\n+\tUpdate callers...\n+\t(aarch64_rtx_costs): ... here.\n+\n+2020-10-30  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/rs6000/vxworks.h (TARGET_OS_CPP_BUILTINS): Also\n+\tbuiltin_define __ppc and __ppc__ for VxWorks 7.\n+\n+2020-10-30  Olivier Hainque  <hainque@adacore.com>\n+\t    Douglas Rupp  <rupp@adacore.com>\n+\t    Pat Bernardi  <bernardi@adacore.com>\n+\n+\t* config.gcc: Adjust the ix86/x86_64-wrs-vxworks filters\n+\tto apply to VxWorks 7 as well.\n+\t* config/i386/t-vxworks (MULTILIB_OPTIONS, MULTILIB_DIRNAMES):\n+\tRemove the fPIC multilib and add one for the large code model\n+\ton x86_64.\n+\t* config/i386/vxworks.h: Separate sections for TARGET_VXWORKS7,\n+\tother variants and common bits.\n+\t(TARGET_OS_CPP_BUILTINS): Augment to support a range of CPU\n+\tfamilies. Leverage VX_CPU_PREFIX.\n+\t(CC1_SPEC): Add definition.\n+\t(STACK_CHECK_PROTECT): Use conditional expression instead of\n+\theavier to read conditioned macro definitions.\n+\n+2020-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (gimplify_scan_omp_clauses): Force\n+\tOMP_CLAUSE_ALLOCATE_ALLOCATOR into a temporary if it is non-NULL and\n+\tnon-constant.\n+\t(gimplify_omp_for): Only put allocate on inner taskloop if lastprivate\n+\tfor the same variable is going to be put there, and in that case\n+\tif the OMP_CLAUSE_ALLOCATE_ALLOCATOR is non-NULL non-constant, make\n+\tthe allocator firstprivate on task.\n+\n+2020-10-30  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Allow\n+\tlong double type to be changed for C/C++ if glibc 2.32 or newer.\n+\t(rs6000_invalid_binary_op): Update error messages about mixing IBM\n+\tlong double and IEEE 128-bit.\n+\n 2020-10-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (compute_avail): Free operands consistently."}, {"sha": "f676795e9a565ed298fa329e6908e8054bd416dc", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1 +1 @@\n-20201030\n+20201102"}, {"sha": "e03861bbca1d486be7641ecddaf189615d6293e2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,20 @@\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-opts.c (c_common_post_options): Move var decl to its\n+\tinitialization point.\n+\n+2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* c-lex.c (c_lex_with_flags): When combining '@' with a\n+\tkeyword for Objective-C, combine the location ranges too.\n+\n+2020-10-30  Qing Zhao  <qing.zhao@oracle.com>\n+\t    H.J.Lu  <hjl.tools@gmail.com>\n+\n+\t* c-attribs.c (c_common_attribute_table): Add new attribute\n+\tzero_call_used_regs.\n+\t(handle_zero_call_used_regs_attribute): New function.\n+\n 2020-10-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97573"}, {"sha": "875b6c8e3108bcc19d8603ba8d73668dc88ccb3d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,44 @@\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (start_decl_1): Refactor declarations.  Fixup some\n+\twhitespace.\n+\t(lookup_and_check_tag): Fixup some whitespace.\n+\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (duplicate_decls): Refactor some template & builtin\n+\thandling.\n+\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct cxx_int_tree_map): Delete.\n+\t(struct cxx_int_tree_map_hasher): Delete.\n+\t* cp-gimplify.c (cxx_int_tree_map_hasher::equal): Delete.\n+\t(cxx_int_tree_map_hasher::hash): Delete.\n+\n+2020-11-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* class.c (finish_struct_1): Don't call clear_satisfaction_cache.\n+\t* constexpr.c (clear_cv_and_fold_caches): Likewise.  Remove bool\n+\tparameter.\n+\t* constraint.cc (clear_satisfaction_cache): Remove definition.\n+\t* cp-tree.h (clear_satisfaction_cache): Remove declaration.\n+\t(clear_cv_and_fold_caches): Remove bool parameter.\n+\t* typeck2.c (store_init_value): Remove argument to\n+\tclear_cv_and_fold_caches.\n+\n+2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* parser.c (cp_parser_objc_at_property_declaration): Use any\n+\texisiting syntax error to suppress complaints about a missing\n+\tclosing parenthesis in parsing property attributes.\n+\n+2020-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* semantics.c (finish_omp_clauses) <case OMP_CLAUSE_ALLOCATE>: Handle\n+\tnon-static members in methods.\n+\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_ALLOCATE.\n+\n 2020-10-29  Marek Polacek  <polacek@redhat.com>\n \n \tDR 625"}, {"sha": "de146c95ea53a91ec93eb87d1bd0cc789f537e9c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,44 @@\n+2020-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/92793\n+\t* trans.c (gfc_set_backend_locus): Use 'gfc_get_location'.\n+\t(gfc_restore_backend_locus): Adjust.\n+\n+2020-11-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97655\n+\t* openmp.c (gfc_match_omp_atomic): Fix mem-order handling;\n+\treject specifying update + capture together.\n+\n+2020-10-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses): Handle atomic clauses.\n+\t(show_omp_node): Call it for atomic.\n+\t* gfortran.h (enum gfc_omp_atomic_op): Add GFC_OMP_ATOMIC_UNSET,\n+\tremove GFC_OMP_ATOMIC_SEQ_CST and GFC_OMP_ATOMIC_ACQ_REL.\n+\t(enum gfc_omp_memorder): Replace OMP_MEMORDER_LAST by\n+\tOMP_MEMORDER_UNSET, add OMP_MEMORDER_SEQ_CST/OMP_MEMORDER_RELAXED.\n+\t(gfc_omp_clauses): Add capture and atomic_op.\n+\t(gfc_code): remove omp_atomic.\n+\t* openmp.c (enum omp_mask1): Add atomic, capture, memorder clauses.\n+\t(gfc_match_omp_clauses): Match them.\n+\t(OMP_ATOMIC_CLAUSES): Add.\n+\t(gfc_match_omp_flush): Update for 'last' to 'unset' change.\n+\t(gfc_match_omp_oacc_atomic): Removed and placed content ..\n+\t(gfc_match_omp_atomic): ... here. Update for OpenMP 5 clauses.\n+\t(gfc_match_oacc_atomic): Match directly here.\n+\t(resolve_omp_atomic, gfc_resolve_omp_directive): Update.\n+\t* parse.c (parse_omp_oacc_atomic): Update for struct gfc_code changes.\n+\t* resolve.c (gfc_resolve_blocks): Update assert.\n+\t* st.c (gfc_free_statement): Also call for EXEC_O{ACC,MP}_ATOMIC.\n+\t* trans-openmp.c (gfc_trans_omp_atomic): Update.\n+\t(gfc_trans_omp_flush): Update for 'last' to 'unset' change.\n+\n+2020-10-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* trans-types.c: Include alias.h\n+\t(gfc_get_array_type_bounds): Set typeless storage.\n+\n 2020-10-27  Harald Anlauf  <anlauf@gmx.de>\n \n \t* resolve.c (gfc_impure_variable): A dummy argument with the VALUE"}, {"sha": "4ddee9c6de4a9a7ba23897eb82a11f0bdec3ad66", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,15 @@\n+2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* objc-act.c (synth_module_prologue): Get the SEL identifier.\n+\t* objc-act.h (enum objc_tree_index): Add OCTI_SEL_NAME.\n+\t(objc_selector_name): New.\n+\t(SEL_TYPEDEF_NAME): New.\n+\t* objc-gnu-runtime-abi-01.c\n+\t(gnu_runtime_01_initialize): Initialize SEL typedef.\n+\t* objc-next-runtime-abi-01.c\n+\t(next_runtime_01_initialize): Likewise.\n+\t* objc-next-runtime-abi-02.c\n+\n 2020-10-11  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* objc-next-runtime-abi-02.c"}, {"sha": "bb727a1be52c4edf9288ba6f88413db856f7ef59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,215 @@\n+2020-11-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-complete1.C: Delete test that became\n+\till-formed after P2104.\n+\n+2020-11-02  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/bcd-2.c: Add include altivec.h.\n+\t* gcc.target/powerpc/bcd-3.c: Add include altivec.h.\n+\t* gcc.target/powerpc/bcd-4.c: New test.\n+\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/concepts/pack-1.C: New.\n+\t* g++.dg/lookup/using53.C: Add an enum.\n+\t* g++.dg/template/error25.C: Relax 'export' error check.\n+\n+2020-11-02  Sudakshina Das  <sudi.das@arm.com>\n+\n+\tPR target/97638\n+\t* gcc.target/aarch64/pr97638.c: New test.a\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-49.c: New testcase.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/pure-code/no-literal-pool-m23.c: New.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/pure-code/no-literal-pool-m0.c: New.\n+\n+2020-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/92793\n+\t* gfortran.dg/goacc/pr92793-1.f90: Adjust.\n+\n+2020-11-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97655\n+\t* gfortran.dg/gomp/atomic.f90: Update tree-dump counts; move\n+\tinvalid OMP 5.0 code to ...\n+\t* gfortran.dg/gomp/atomic-2.f90: ... here; update dg-error.\n+\t* gfortran.dg/gomp/requires-9.f90: Update tree dump scan.\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97558\n+\t* gcc.dg/vect/pr97558-2.c: New testcase.\n+\n+2020-11-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97505\n+\t* gcc.dg/pr97505.c: New test.\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97558\n+\t* gcc.dg/vect/pr97558.c: New testcase.\n+\n+2020-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97650\n+\t* gcc.dg/vect/bb-slp-pr97650.c: New testcase.\n+\n+2020-11-02  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/arch-7.c: New.\n+\t* gcc.target/riscv/attribute-10.c: Update test arch string.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96770\n+\t* gcc.target/arm/pure-code/pr96770.c: New test.\n+\n+2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96967\n+\t* gcc.target/arm/pure-code/pr96767.c: New test.\n+\n+2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* obj-c++.dg/SEL-typedef.mm: New test.\n+\t* objc.dg/SEL-typedef.m: New test.\n+\n+2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* obj-c++.dg/property/at-property-1.mm: Adjust test after\n+\tfixing spurious error output.\n+\n+2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.target/i386/amxbf16-asmintel-1.c: Require masm_intel.\n+\t* gcc.target/i386/amxint8-asmintel-1.c: Likewise.\n+\t* gcc.target/i386/amxtile-asmintel-1.c: Likewise.\n+\n+2020-10-30  Qing Zhao  <qing.zhao@oracle.com>\n+\t    H.J.Lu  <hjl.tools@gmail.com>\n+\n+\t* c-c++-common/zero-scratch-regs-1.c: New test.\n+\t* c-c++-common/zero-scratch-regs-10.c: New test.\n+\t* c-c++-common/zero-scratch-regs-11.c: New test.\n+\t* c-c++-common/zero-scratch-regs-2.c: New test.\n+\t* c-c++-common/zero-scratch-regs-3.c: New test.\n+\t* c-c++-common/zero-scratch-regs-4.c: New test.\n+\t* c-c++-common/zero-scratch-regs-5.c: New test.\n+\t* c-c++-common/zero-scratch-regs-6.c: New test.\n+\t* c-c++-common/zero-scratch-regs-7.c: New test.\n+\t* c-c++-common/zero-scratch-regs-8.c: New test.\n+\t* c-c++-common/zero-scratch-regs-9.c: New test.\n+\t* c-c++-common/zero-scratch-regs-attr-usages.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-1.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-10.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-11.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-12.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-13.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-14.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-15.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-16.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-17.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-18.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-19.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-2.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-20.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-21.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-22.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-23.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-24.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-25.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-26.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-27.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-28.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-29.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-30.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-31.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-3.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-4.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-5.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-6.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-7.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-8.c: New test.\n+\t* gcc.target/i386/zero-scratch-regs-9.c: New test.\n+\n+2020-10-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97556\n+\t* gcc.dg/Warray-bounds-70.c: New test.\n+\n+2020-10-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* g++.dg/guality/guality.exp: Skip $rootme-based check if unset.\n+\t* gcc.dg/guality/guality.exp: Likewise.\n+\t* gfortran.dg/guality/guality.exp: Likewise.\n+\t* lib/asan-dg.exp: Don't use $asan_saved_library_path if not set.\n+\t* lib/tsan-dg.exp: Don't use $tsan_saved_library_path if not set.\n+\t* lib/ubsan-dg.exp: Don't use $ubsan_saved_library_path if not set.\n+\n+2020-10-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/atomic-2.f90: New test.\n+\t* gfortran.dg/gomp/atomic.f90: New test.\n+\n+2020-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97623\n+\t* gcc.dg/tree-ssa/ssa-hoist-7.c: New testcase.\n+\n+2020-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97626\n+\t* gcc.dg/vect/bb-slp-pr97626.c: New testcase.\n+\n+2020-10-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/92793\n+\t* c-c++-common/goacc/clause-locations.c: Rewrite into...\n+\t* c-c++-common/goacc/pr92793-1.c: ... this.\n+\t* gfortran.dg/goacc/clause-locations.f90: Rewrite into...\n+\t* gfortran.dg/goacc/pr92793-1.f90: ... this.\n+\n+2020-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97633\n+\t* g++.dg/vect/slp-pr97636.cc: New testcase.\n+\t* gcc.dg/vect/bb-slp-pr97633.c: Likewise.\n+\n+2020-10-30  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/96998\n+\t* gcc.c-torture/compile/pr96998.c: New test.\n+\n+2020-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/allocate-3.c: New test.\n+\n+2020-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/allocate-1.c (qux): Add another test.\n+\t* g++.dg/gomp/allocate-1.C: New test.\n+\n+2020-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-pr65935.c: Adjust.\n+\n+2020-10-30  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-mix-2.c: New test.\n+\t* gcc.target/powerpc/float128-mix-3.c: New test.\n+\t* gcc.target/powerpc/float128-mix.c: Update failure messages.\n+\n 2020-10-29  Marek Polacek  <polacek@redhat.com>\n \n \tDR 625"}, {"sha": "ed2c541846960a75b87ca8fed1e1722c831f5c9f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,19 @@\n+2020-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* internal.h (_cpp_notify_macro_use): Add location parm.\n+\t(_cpp_maybe_notify_macro_use): Likewise.\n+\t* directives.c (_cpp_do_file_change): Check we've not changed file\n+\twhen optimizing a rewind.\n+\t(do_ifdef): Pass location to _cpp_maybe_notify_macro_use.\n+\t(do_ifndef): Likewise.  Delete obsolete comment about powerpc.\n+\t* expr.c (parse_defined): Pass location to\n+\t_cpp_maybe_notify_macro_use.\n+\t* macro.c (enter_macro_context): Likewise.\n+\t(warn_of_redefinition): Break out helper function.  Call it.\n+\t(compare_macros): New function broken out of warn_of_redefinition.\n+\t(_cpp_new_macro): Zero all fields.\n+\t(_cpp_notify_macro_use): Add location parameter.\n+\n 2020-10-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* lex.c (_cpp_lex_direct): Do not complete EOF processing when"}, {"sha": "b44a1fee6bacb29828e567e4795251cd4513a3a0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,10 @@\n+2020-10-30  Olivier Hainque  <hainque@adacore.com>\n+\t    Douglas Rupp  <rupp@adacore.com>\n+\t    Pat Bernardi  <bernardi@adacore.com>\n+\n+\t* config.host: Adjust the ix86/x86_64-wrs-vxworks filters\n+\tto apply to VxWorks 7 as well.\n+\n 2020-10-29  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/gthr-vxworks-tls.c: Fix preprocessor logic"}, {"sha": "a4af74b4caa4e8361139d9d34aeb8e41a5081d1c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,11 @@\n+2020-10-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* intrinsics/random.c (SZ_IN_INT_4): Define size of state in int32_t.\n+\t(SZ_IN_INT_8): Define size of state in int64_t.\n+\t(SZ): Remove.\n+\t(random_seed_i4): Use size SZ_IN_INT_4 instead of SZ.\n+\t(random_seed_i8): Use size SZ_IN_INT_8 instead of SZ.\n+\n 2020-10-18  Harald Anlauf  <anlauf@gmx.de>\n \n \t* m4/matmul_internal.m4: Move check for rank-1 times rank-2 before"}, {"sha": "2c0d207283e15491de786850d2aa9614ff7758ed", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,22 @@\n+2020-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR target/85486\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486-2.c: Simplify and enhance.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486-3.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: Likewise.\n+\n+2020-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR testsuite/80219\n+\tPR testsuite/85303\n+\t* testsuite/lib/libgomp.exp (libgomp_init): Set\n+\t'gcc_warning_prefix', 'gcc_error_prefix'.\n+\n+2020-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* target.c (gomp_map_vars_internal): Use FIELD_TGT_EMPTY macro\n+\teven in field_tgt_clear initializer.\n+\n 2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c/target-42.c: New test."}, {"sha": "403e1318ae206683e8bed0bdec135ea0d4f96787", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "patch": "@@ -1,3 +1,133 @@\n+2020-11-02  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (INPUT): Add new header.\n+\t* include/Makefile.am (std_headers): Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/precompiled/stdc++.h: Include new header.\n+\t* include/std/syncstream: New header.\n+\t* include/std/version: Add __cpp_lib_syncbuf.\n+\t* testsuite/27_io/basic_syncbuf/1.cc: New test.\n+\t* testsuite/27_io/basic_syncbuf/2.cc: Likewise.\n+\t* testsuite/27_io/basic_syncbuf/basic_ops/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_syncbuf/requirements/types.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_syncbuf/sync_ops/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_syncstream/1.cc: Likewise.\n+\t* testsuite/27_io/basic_syncstream/2.cc: Likewise.\n+\t* testsuite/27_io/basic_syncstream/basic_ops/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_syncstream/requirements/types.cc:\n+\tLikewise.\n+\n+2020-11-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (is_integral<wchar_t>)\n+\t(make_unsigned<wchar_t>, make_signed<wchar_t>): Define based\n+\ton #ifdef __WCHAR_TYPE__ instead of _GLIBCXX_USE_WCHAR_T.\n+\t* include/bits/cpp_type_traits.h (__is_integer<wchar_t>)\n+\t(__is_char<wchar_t>): Likewise.\n+\n+2020-10-31  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* src/c++17/floating_from_chars.cc (_GLIBCXX_USE_CX11_ABI): Add define.\n+\t(buffering_string): New.\n+\t[!_GLIBCXX_USE_CXX11_ABI](reserve_string): New.\n+\t(from_chars): Adapt.\n+\t* src/c++20/sstream-inst.cc: Limit instantiations to\n+\t_GLIBCXX_USE_CXX11_ABI.\n+\n+2020-10-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (independent_bit_engine): Fix typo\n+\tin comment.\n+\t(shuffle_order_engine): Fix incorrect description in comment.\n+\t* include/bits/random.tcc (__representable_as_double\n+\t(__p1_representable_as_double): New helper functions.\n+\t(shuffle_order_engine::operator()): Use double for calculation\n+\tif (max() - min() + 1) is representable as double.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline number.\n+\n+2020-10-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96958\n+\t* include/bits/hashtable_policy.h (_Prime_rehash_policy)\n+\t(_Power2_rehash_policy): Use ceil and floor instead of ceill and\n+\tfloorl.\n+\t* src/c++11/hashtable_c++0x.cc (_Prime_rehash_policy): Likewise.\n+\tUse double instead of long double.\n+\n+2020-10-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/97600\n+\t* include/std/ranges (basic_istream_view::begin): Initialize\n+\t_Iterator from 'this' instead of '*this'.\n+\t(basic_istream_view::_Iterator::_Iterator): Adjust constructor\n+\taccordingly.\n+\t(filter_view::_Iterator::_Iterator): Take a filter_view*\n+\targument instead of a filter_view& argument.\n+\t(filter_view::_Sentinel::_Sentinel): Likewise.\n+\t(filter_view::begin): Initialize _Iterator from 'this' instead\n+\tof '*this'.\n+\t(filter_view::end): Likewise.\n+\t(transform_view::_Iterator::_Iterator): Take a _Parent* instead\n+\tof a _Parent&.\n+\t(filter_view::_Iterator::operator+): Adjust accordingly.\n+\t(filter_view::_Iterator::operator-): Likewise.\n+\t(filter_view::begin): Initialize _Iterator from 'this' instead\n+\tof '*this'.\n+\t(filter_view::end): Likewise.\n+\t(join_view::_Iterator): Take a _Parent* instead of a _Parent&.\n+\t(join_view::_Sentinel): Likewise.\n+\t(join_view::begin): Initialize _Iterator from 'this' instead of\n+\t'*this'.\n+\t(join_view::end): Initialize _Sentinel from 'this' instead of\n+\t'*this'.\n+\t(split_view::_OuterIter): Take a _Parent& instead of a _Parent*.\n+\t(split_view::begin): Initialize _OuterIter from 'this' instead\n+\tof '*this'.\n+\t(split_view::end): Likewise.\n+\t* testsuite/std/ranges/97600.cc: New test.\n+\n+2020-10-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (enable_borrowed_view<take_view<T>>)\n+\t(enable_borrowed_view<drop_view<T>>)\n+\t(enable_borrowed_view<drop_while_view<T>>)\n+\t(enable_borrowed_view<reverse_view<T>>)\n+\t(enable_borrowed_view<common_view<T>>)\n+\t(enable_borrowed_view<elements_view<T>>): Add partial\n+\tspecializations as per P2017R1.\n+\t* testsuite/std/ranges/adaptors/conditionally_borrowed.cc:\n+\tNew test.\n+\n+2020-10-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96958\n+\t* include/bits/hashtable_policy.h (_Prime_rehash_policy)\n+\t(_Power2_rehash_policy): Use double instead of long double.\n+\n+2020-10-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc:\n+\tAvoid -Wcatch-value warnings.\n+\n+2020-10-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::__box): For the partial\n+\tspecialization used by types that are already semiregular,\n+\tmake the default constructor value-initialize the underlying\n+\tobject instead of default-initializing it.  Make its in place\n+\tconstructor explicit.\n+\t* testsuite/std/ranges/adaptors/detail/semiregular_box.cc:\n+\tAugment test.\n+\n+2020-10-30  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* testsuite/20_util/unique_ptr/creation/for_overwrite.cc: XFAIL on AIX.\n+\n 2020-10-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Tighten patterns"}]}