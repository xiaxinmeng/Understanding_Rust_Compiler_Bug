{"sha": "e0ae4e94e9d2794ea89724bd7a7986728d019f15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhZTRlOTRlOWQyNzk0ZWE4OTcyNGJkN2E3OTg2NzI4ZDAxOWYxNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-10-31T18:15:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:15:40Z"}, "message": "s-osinte-tru64.adb: Mark Asm statements Volatile to prevent warnings (seems a reasonable change...\n\n2006-10-31  Robert Dewar  <dewar@adacore.com>\n\n\t* s-osinte-tru64.adb: \n\tMark Asm statements Volatile to prevent warnings (seems a\n\treasonable change anyway)\n\tFixes new warnings\n\n\t* s-mastop-irix.adb: Add Volatile to Asm statements\n\tSuppresses warning, and seems appropriate in any case\n\n\t* s-osinte-vms.adb: Add Volatile to Asm statement\n\n\t* s-vaflop-vms-alpha.adb: Add Volatile to Asm statements\n\n\t* exp_code.ads, exp_code.adb (Asm_Input_Value): Note that Error can be\n\treturned.\n\tAdd call to Check_Code_Statement\n\nFrom-SVN: r118329", "tree": {"sha": "a0fad22476c6b71855e4e022da5369a844414a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0fad22476c6b71855e4e022da5369a844414a66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ae4e94e9d2794ea89724bd7a7986728d019f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ae4e94e9d2794ea89724bd7a7986728d019f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ae4e94e9d2794ea89724bd7a7986728d019f15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ae4e94e9d2794ea89724bd7a7986728d019f15/comments", "author": null, "committer": null, "parents": [{"sha": "ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1cbfb946aef122c53787e3c6b5dd8ff32a539c"}], "stats": {"total": 358, "additions": 220, "deletions": 138}, "files": [{"sha": "2a2842a825a3ca3f533e20dfc81e56fbcecc05d3", "filename": "gcc/ada/exp_code.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fexp_code.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fexp_code.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_code.adb?ref=e0ae4e94e9d2794ea89724bd7a7986728d019f15", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,6 +36,7 @@ with Opt;      use Opt;\n with Rtsfind;  use Rtsfind;\n with Sem_Eval; use Sem_Eval;\n with Sem_Util; use Sem_Util;\n+with Sem_Warn; use Sem_Warn;\n with Sinfo;    use Sinfo;\n with Stringt;  use Stringt;\n with Tbuild;   use Tbuild;\n@@ -124,6 +125,8 @@ package body Exp_Code is\n    begin\n       if No (Operand_Var) then\n          return Empty;\n+      elsif Error_Posted (Operand_Var) then\n+         return Error;\n       else\n          return Next (First (Expressions (Operand_Var)));\n       end if;\n@@ -227,7 +230,6 @@ package body Exp_Code is\n \n       Name_Buffer (Name_Len + 1) := ASCII.NUL;\n       return Name_Buffer'Address;\n-\n    end Clobber_Get_Next;\n \n    -------------------\n@@ -240,12 +242,10 @@ package body Exp_Code is\n                                    Next_Actual (\n                                      Next_Actual (\n                                        First_Actual (Call))));\n-\n    begin\n       if not Is_OK_Static_Expression (Clob) then\n          Flag_Non_Static_Expr (\"asm clobber argument is not static!\", Clob);\n          Clobber_Node := Empty;\n-\n       else\n          Clobber_Node := Get_String_Node (Clob);\n          Clobber_Ptr := 1;\n@@ -262,11 +262,15 @@ package body Exp_Code is\n       procedure Check_IO_Operand (N : Node_Id);\n       --  Check for incorrect input or output operand\n \n+      ----------------------\n+      -- Check_IO_Operand --\n+      ----------------------\n+\n       procedure Check_IO_Operand (N : Node_Id) is\n          Err : Node_Id := N;\n \n       begin\n-         --  The only identifier allows is No_xxput_Operands. Since we\n+         --  The only identifier allowed is No_xxput_Operands. Since we\n          --  know the type is right, it is sufficient to see if the\n          --  referenced entity is in a runtime routine.\n \n@@ -333,7 +337,6 @@ package body Exp_Code is\n       declare\n          Arg_Output : constant Node_Id := Next_Actual (First_Actual (N));\n          Arg_Input  : constant Node_Id := Next_Actual (Arg_Output);\n-\n       begin\n          Check_IO_Operand (Arg_Output);\n          Check_IO_Operand (Arg_Input);\n@@ -364,9 +367,13 @@ package body Exp_Code is\n \n          --  There is no need to reanalyze this node, it is completely analyzed\n          --  already, at least sufficiently for the purposes of the abstract\n-         --  procedural interface defined in this package.\n+         --  procedural interface defined in this package. Furthermore if we\n+         --  let it go through the normal analysis, that would include some\n+         --  inappropriate checks that apply only to explicit code statements\n+         --  in the source, and not to calls to intrinsics.\n \n          Set_Analyzed (N);\n+         Check_Code_Statement (N);\n       end if;\n    end Expand_Asm_Call;\n \n@@ -378,7 +385,6 @@ package body Exp_Code is\n    begin\n       if Nkind (S) = N_String_Literal then\n          return S;\n-\n       else\n          pragma Assert (Ekind (Entity (S)) = E_Constant);\n          return Get_String_Node (Constant_Value (Entity (S)));\n@@ -397,12 +403,10 @@ package body Exp_Code is\n                    Next_Actual (\n                      Next_Actual (\n                        First_Actual (Call)))));\n-\n    begin\n       if not Is_OK_Static_Expression (Vol) then\n          Flag_Non_Static_Expr (\"asm volatile argument is not static!\", Vol);\n          return False;\n-\n       else\n          return Is_True (Expr_Value (Vol));\n       end if;\n@@ -427,7 +431,6 @@ package body Exp_Code is\n \n       if Nkind (Parent (Operand_Var)) = N_Aggregate then\n          Operand_Var := Next (Operand_Var);\n-\n       else\n          Operand_Var := Empty;\n       end if;\n@@ -448,7 +451,6 @@ package body Exp_Code is\n \n    procedure Setup_Asm_Inputs (N : Node_Id) is\n       Call : constant Node_Id := Expression (Expression (N));\n-\n    begin\n       Setup_Asm_IO_Args\n         (Next_Actual (Next_Actual (First_Actual (Call))),\n@@ -488,7 +490,6 @@ package body Exp_Code is\n \n    procedure Setup_Asm_Outputs (N : Node_Id) is\n       Call : constant Node_Id := Expression (Expression (N));\n-\n    begin\n       Setup_Asm_IO_Args\n         (Next_Actual (First_Actual (Call)),"}, {"sha": "f844d085f5eb163c41c7eae6beef95ce093bfd46", "filename": "gcc/ada/exp_code.ads", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fexp_code.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fexp_code.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_code.ads?ref=e0ae4e94e9d2794ea89724bd7a7986728d019f15", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 1996 Free Software Foundation, Inc.            --\n+--          Copyright (C) 1996-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,17 +32,16 @@ with System; use System;\n package Exp_Code is\n \n    procedure Expand_Asm_Call (N : Node_Id);\n-   --  Expands a call to Asm or Asm_Volatile into an equivalent\n-   --  N_Code_Statement node.\n+   --  Expands a call to Asm into an equivalent N_Code_Statement node\n \n    --  The following routines provide an abstract interface to analyze\n    --  code statements, for use by Gigi processing for code statements.\n    --  Note that the implementations of these routines must not attempt\n    --  to expand tables that are frozen on entry to Gigi.\n \n    function Is_Asm_Volatile (N : Node_Id) return Boolean;\n-   --  Given an N_Code_Statement node N, return True in the Asm_Volatile\n-   --  case and False in the Asm case.\n+   --  Given an N_Code_Statement node N, return True if Volatile=True is\n+   --  specified, and False if Volatile=False is specified (or set by default).\n \n    function Asm_Template (N : Node_Id) return Node_Id;\n    --  Given an N_Code_Statement node N, returns string literal node for\n@@ -82,7 +81,10 @@ package Exp_Code is\n    --  Called within a loop initialized by Setup_Asm_Inputs and controlled\n    --  by Next_Asm_Input as described above. Returns the expression node for\n    --  the value component of the current Asm_Input parameter, or Empty if\n-   --  there are no more Asm_Input parameters.\n+   --  there are no more Asm_Input parameters, or Error if an error was\n+   --  previously detected in the input parameters (note that the backend\n+   --  need not worry about this case, since it won't be called if there\n+   --  were any such serious errors detected).\n \n    procedure Next_Asm_Input;\n    --  Step to next Asm_Input parameter. It is an error to call this procedure\n@@ -94,7 +96,7 @@ package Exp_Code is\n    --  arguments. The protocol is to construct a loop as follows:\n    --\n    --    Setup_Asm_Outputs (N);\n-   --    while Present (Asm_Output_Value)\n+   --    while Present (Asm_Output_Variable)\n    --      body\n    --      Next_Asm_Output;\n    --    end loop;\n@@ -110,10 +112,13 @@ package Exp_Code is\n    --  Empty if there are no more Asm_Output parameters.\n \n    function Asm_Output_Variable return Node_Id;\n-   --  Called within a loop initialized by Setup_Asm_Outputs and controlled\n-   --  by Next_Asm_Output as described above. Returns the expression node for\n-   --  the output variable component of the current Asm_Output parameter, or\n-   --  Empty if there are no more Asm_Output parameters.\n+   --  Called within a loop initialized by Setup_Asm_Outputs and controlled by\n+   --  Next_Asm_Output as described above. Returns the expression node for the\n+   --  output variable component of the current Asm_Output parameter, or Empty\n+   --  if there are no more Asm_Output parameters, or Error if an error was\n+   --  previously detected in the input parameters (note that the backend need\n+   --  not worry about this case, since it won't be called if there were any\n+   --  such serious errors detected).\n \n    procedure Next_Asm_Output;\n    --  Step to next Asm_Output parameter. It is an error to call this procedure"}, {"sha": "bbab83327edb2dfc33765d6554732c40e36062d9", "filename": "gcc/ada/s-mastop-irix.adb", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-mastop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-mastop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop-irix.adb?ref=e0ae4e94e9d2794ea89724bd7a7986728d019f15", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                         (Version for IRIX/MIPS)                          --\n --                                                                          --\n---          Copyright (C) 1999-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -278,12 +278,15 @@ package body System.Machine_State_Operations is\n \n    procedure Set_Machine_State (M : Machine_State) is\n \n-      STOREI : constant String (1 .. 2) := 's' & LSC;\n+      SI : constant String (1 .. 2) := 's' & LSC;\n       --  This is \"sw\" in o32 mode, and \"sd\" in n32 mode\n \n-      STOREF : constant String (1 .. 4) := 's' & LSC & \"c1\";\n+      SF : constant String (1 .. 4) := 's' & LSC & \"c1\";\n       --  This is \"swc1\" in o32 mode and \"sdc1\" in n32 mode\n \n+      PI : String renames SC_Regs_Pos;\n+      PF : String renames SC_Fpregs_Pos;\n+\n       Scp : Sigcontext_Ptr;\n \n    begin\n@@ -294,41 +297,41 @@ package body System.Machine_State_Operations is\n \n       <<Past_Prolog>>\n \n-      Asm (STOREI & \" $16,  16*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $17,  17*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $18,  18*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $19,  19*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $20,  20*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $21,  21*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $22,  22*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $23,  23*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $24,  24*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $25,  25*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $26,  26*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $27,  27*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $28,  28*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $29,  29*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $30,  30*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n-      Asm (STOREI & \" $31,  31*8+\" & Roff & \"+\" & SC_Regs_Pos & \"($4)\");\n+      Asm (SI & \" $16,  16*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $17,  17*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $18,  18*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $19,  19*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $20,  20*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $21,  21*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $22,  22*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $23,  23*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $24,  24*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $25,  25*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $26,  26*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $27,  27*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $28,  28*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $29,  29*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $30,  30*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n+      Asm (SI & \" $31,  31*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n \n       --  Restore floating-point registers from machine state\n \n-      Asm (STOREF & \" $f16, 16*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f17, 17*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f18, 18*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f19, 19*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f20, 20*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f21, 21*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f22, 22*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f23, 23*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f24, 24*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f25, 25*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f26, 26*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f27, 27*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f28, 28*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f29, 29*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f30, 30*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n-      Asm (STOREF & \" $f31, 31*8+\" & Roff & \"+\" & SC_Fpregs_Pos & \"($4)\");\n+      Asm (SF & \" $f16, 16*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f17, 17*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f18, 18*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f19, 19*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f20, 20*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f21, 21*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f22, 22*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f23, 23*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f24, 24*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f25, 25*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f26, 26*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f27, 27*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f28, 28*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f29, 29*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f30, 30*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n+      Asm (SF & \" $f31, 31*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n \n       --  Set the PC value for the context to a location after the\n       --  prolog has been executed."}, {"sha": "52987466185560def9def36e7b969e5108d51d1a", "filename": "gcc/ada/s-osinte-tru64.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-osinte-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-osinte-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-tru64.adb?ref=e0ae4e94e9d2794ea89724bd7a7986728d019f15", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -73,8 +73,9 @@ package body System.OS_Interface is\n    begin\n       Asm (\"call_pal 0x9e\" & ASCII.LF & ASCII.HT &\n            \"bis $31, $0, %0\",\n-           Outputs => pthread_t'Asm_Output (\"=r\", Self),\n-           Clobber => \"$0\");\n+           Outputs  => pthread_t'Asm_Output (\"=r\", Self),\n+           Clobber  => \"$0\",\n+           Volatile => True);\n       return Self;\n    end pthread_self;\n \n@@ -93,8 +94,9 @@ package body System.OS_Interface is\n \n       Asm (\"call_pal 0x9e\" & ASCII.LF & ASCII.HT &\n            \"bis $31, $0, %0\",\n-           Outputs => Teb_Ptr'Asm_Output (\"=r\", Teb),\n-           Clobber => \"$0\");\n+           Outputs  => Teb_Ptr'Asm_Output (\"=r\", Teb),\n+           Clobber  => \"$0\",\n+           Volatile => True);\n \n       --  Stick a guard page right above the Yellow Zone if it exists\n "}, {"sha": "411bac3a7713695f8c0bb79c5d4d53e4c4579a80", "filename": "gcc/ada/s-osinte-vms.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-osinte-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-osinte-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vms.adb?ref=e0ae4e94e9d2794ea89724bd7a7986728d019f15", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2006, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,8 +57,9 @@ package body System.OS_Interface is\n    begin\n       Asm (\"call_pal 0x9e\" & LF & HT &\n            \"bis $31, $0, %0\",\n-           Outputs => pthread_t'Asm_Output (\"=r\", Self),\n-           Clobber => \"$0\");\n+           Outputs  => pthread_t'Asm_Output (\"=r\", Self),\n+           Clobber  => \"$0\",\n+           Volatile => True);\n       return Self;\n    end pthread_self;\n "}, {"sha": "e7d561bed16f0aecfb97afa79808ce1296317f1e", "filename": "gcc/ada/s-vaflop-vms-alpha.adb", "status": "modified", "additions": 141, "deletions": 71, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae4e94e9d2794ea89724bd7a7986728d019f15/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop-vms-alpha.adb?ref=e0ae4e94e9d2794ea89724bd7a7986728d019f15", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2006, Free Software Foundation, Inc.         --\n --                       (Version for Alpha OpenVMS)                        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n@@ -69,9 +69,12 @@ package body System.Vax_Float_Operations is\n       A, B : T;\n       C    : G;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), D'Asm_Input (\"m\", X));\n-      Asm (\"cvtdg %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), D'Asm_Input (\"m\", X),\n+           Volatile => True);\n+      Asm (\"cvtdg %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n+           Volatile => True);\n       return C;\n    end D_To_G;\n \n@@ -83,8 +86,10 @@ package body System.Vax_Float_Operations is\n       A : T;\n       B : G;\n    begin\n-      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n       return B;\n    end F_To_G;\n \n@@ -100,7 +105,8 @@ package body System.Vax_Float_Operations is\n       --  Because converting to a wider FP format is a no-op, we say\n       --  A is 64-bit even though we are loading 32 bits into it.\n \n-      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n+      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X),\n+           Volatile => True);\n \n       B := S (Cvt_G_T (A));\n       return B;\n@@ -114,9 +120,12 @@ package body System.Vax_Float_Operations is\n       A, B : T;\n       C    : D;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cvtgd %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n-      Asm (\"stg %1,%0\", D'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n+           Volatile => True);\n+      Asm (\"cvtgd %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", D'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n+           Volatile => True);\n       return C;\n    end G_To_D;\n \n@@ -129,9 +138,12 @@ package body System.Vax_Float_Operations is\n       B : S;\n       C : F;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cvtgf %1,%0\", S'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n+           Volatile => True);\n+      Asm (\"cvtgf %1,%0\", S'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B),\n+           Volatile => True);\n       return C;\n    end G_To_F;\n \n@@ -143,8 +155,10 @@ package body System.Vax_Float_Operations is\n       A : T;\n       B : Q;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cvtgq %1,%0\", Q'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n+           Volatile => True);\n+      Asm (\"cvtgq %1,%0\", Q'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n       return B;\n    end G_To_Q;\n \n@@ -155,7 +169,8 @@ package body System.Vax_Float_Operations is\n    function G_To_T (X : G) return T is\n       A, B : T;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n+           Volatile => True);\n       B := Cvt_G_T (A);\n       return B;\n    end G_To_T;\n@@ -177,8 +192,10 @@ package body System.Vax_Float_Operations is\n       A : S;\n       B : F;\n    begin\n-      Asm (\"cvtqf %1,%0\", S'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A));\n+      Asm (\"cvtqf %1,%0\", S'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A),\n+           Volatile => True);\n       return B;\n    end Q_To_F;\n \n@@ -190,8 +207,10 @@ package body System.Vax_Float_Operations is\n       A : T;\n       B : G;\n    begin\n-      Asm (\"cvtqg %1,%0\", T'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"cvtqg %1,%0\", T'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n       return B;\n    end Q_To_G;\n \n@@ -204,7 +223,8 @@ package body System.Vax_Float_Operations is\n       B : F;\n    begin\n       A := Cvt_T_F (T (X));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A),\n+           Volatile => True);\n       return B;\n    end S_To_F;\n \n@@ -226,7 +246,8 @@ package body System.Vax_Float_Operations is\n       B : G;\n    begin\n       A := Cvt_T_G (X);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n       return B;\n    end T_To_G;\n \n@@ -238,9 +259,12 @@ package body System.Vax_Float_Operations is\n       A, B : S;\n       C    : F;\n    begin\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n-      Asm (\"cpys $f31,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X),\n+           Volatile => True);\n+      Asm (\"cpys $f31,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B),\n+           Volatile => True);\n       return C;\n    end Abs_F;\n \n@@ -253,8 +277,10 @@ package body System.Vax_Float_Operations is\n       C    : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cpys $f31,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n+      Asm (\"cpys $f31,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n+           Volatile => True);\n       return C;\n    end Abs_G;\n \n@@ -267,10 +293,13 @@ package body System.Vax_Float_Operations is\n       R1        : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"addf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Add_F;\n \n@@ -283,10 +312,13 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"addg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Add_G;\n \n@@ -362,10 +394,13 @@ package body System.Vax_Float_Operations is\n       R1        : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"divf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Div_F;\n \n@@ -378,10 +413,13 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"divg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Div_G;\n \n@@ -393,9 +431,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpgeq %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R /= 0.0;\n    end Eq_F;\n \n@@ -407,9 +447,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpgeq %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R /= 0.0;\n    end Eq_G;\n \n@@ -421,9 +463,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpgle %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R /= 0.0;\n    end Le_F;\n \n@@ -435,9 +479,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpgle %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R /= 0.0;\n    end Le_G;\n \n@@ -449,9 +495,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpglt %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R /= 0.0;\n    end Lt_F;\n \n@@ -463,9 +511,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpglt %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R /= 0.0;\n    end Lt_G;\n \n@@ -478,10 +528,13 @@ package body System.Vax_Float_Operations is\n       R1        : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"mulf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Mul_F;\n \n@@ -494,10 +547,13 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"mulg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Mul_G;\n \n@@ -509,9 +565,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpgeq %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R = 0.0;\n    end Ne_F;\n \n@@ -523,9 +581,11 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"cmpgeq %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n       return R = 0.0;\n    end Ne_G;\n \n@@ -538,8 +598,10 @@ package body System.Vax_Float_Operations is\n       C    : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n-      Asm (\"cpysn %1,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B));\n+      Asm (\"cpysn %1,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B),\n+           Volatile => True);\n       return C;\n    end Neg_F;\n \n@@ -552,8 +614,10 @@ package body System.Vax_Float_Operations is\n       C    : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cpysn %1,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n+      Asm (\"cpysn %1,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n+           Volatile => True);\n       return C;\n    end Neg_G;\n \n@@ -594,10 +658,13 @@ package body System.Vax_Float_Operations is\n \n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"subf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Sub_F;\n \n@@ -610,10 +677,13 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n+           Volatile => True);\n       Asm (\"subg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n+           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n+           Volatile => True);\n       return R1;\n    end Sub_G;\n "}]}