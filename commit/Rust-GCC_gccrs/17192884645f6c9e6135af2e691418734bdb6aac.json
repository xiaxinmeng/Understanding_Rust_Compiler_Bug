{"sha": "17192884645f6c9e6135af2e691418734bdb6aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcxOTI4ODQ2NDVmNmM5ZTYxMzVhZjJlNjkxNDE4NzM0YmRiNmFhYw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-06-16T23:03:34Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-06-16T23:03:34Z"}, "message": "tree.h (PHI_CHAIN): New.\n\n\t* tree.h (PHI_CHAIN): New.\n\t* (tree-cfg.c, tree-dfa.c, tree-flow-inline.h, tree-into-ssa.c,\n\ttree-outof-ssa.c, tree-phinodes.c, tree-pretty-print.c,\n\ttree-ssa-alias.c, tree-ssa-ccp.c, tree-ssa-dom.c, tree-ssa-dse.c,\n\ttree-ssa-live.c, tree-ssa-loop.c, tree-ssa-phiopt.c, tree-ssa-pre.c,\n\ttree-ssa.c, tree-tailcall.c): Use PHI_CHAIN instead of TREE_CHAIN\n\twhen traversing a list of PHI_NODEs.\n\nFrom-SVN: r83273", "tree": {"sha": "dde82bd9f48e0a3f866df03c17efa0827619c51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde82bd9f48e0a3f866df03c17efa0827619c51e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17192884645f6c9e6135af2e691418734bdb6aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17192884645f6c9e6135af2e691418734bdb6aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17192884645f6c9e6135af2e691418734bdb6aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17192884645f6c9e6135af2e691418734bdb6aac/comments", "author": null, "committer": null, "parents": [{"sha": "bf83cc10ca01f0da835a13d9bda9ca52cd251bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf83cc10ca01f0da835a13d9bda9ca52cd251bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf83cc10ca01f0da835a13d9bda9ca52cd251bea"}], "stats": {"total": 184, "additions": 103, "deletions": 81}, "files": [{"sha": "7745ee927eb44a90a6fdc8accacc34de85cd1121", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -1,3 +1,13 @@\n+2004-06-16  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* tree.h (PHI_CHAIN): New.\n+\t* (tree-cfg.c, tree-dfa.c, tree-flow-inline.h, tree-into-ssa.c,\n+\ttree-outof-ssa.c, tree-phinodes.c, tree-pretty-print.c,\n+\ttree-ssa-alias.c, tree-ssa-ccp.c, tree-ssa-dom.c, tree-ssa-dse.c,\n+\ttree-ssa-live.c, tree-ssa-loop.c, tree-ssa-phiopt.c, tree-ssa-pre.c,\n+\ttree-ssa.c, tree-tailcall.c): Use PHI_CHAIN instead of TREE_CHAIN\n+\twhen traversing a list of PHI_NODEs.\n+\n 2004-06-16  Bernardo Innocenti  <bernie@develer.com>\n \n \tPR target/13292\n@@ -72,8 +82,8 @@\n \t\n 2004-06-16  Dale Johannesen  <dalej@apple.com>\n \n-        * loop.c (loop_givs_reduce): Avoid miscompilation of\n-        loops entered at bottom.\n+\t* loop.c (loop_givs_reduce): Avoid miscompilation of\n+\tloops entered at bottom.\n \n 2004-06-16  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -559,7 +569,7 @@\n \tautomake 1.8.5.\n \n 2004-06-15  Eric Botcazou  <ebotcazou@act-europe.fr>\n-            Olivier Hainque  <hainque@act-europe.fr>\n+\t    Olivier Hainque  <hainque@act-europe.fr>\n \n \t* function.c (fixup_var_refs): Also adjust the start of sequence\n \tafter fixing up the insns."}, {"sha": "0624ade3db3175a6164e4bfb2115c9c427487b83", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -1768,7 +1768,7 @@ remove_phi_nodes_and_edges_for_unreachable_block (basic_block bb)\n   phi = phi_nodes (bb);\n   while (phi)\n     {\n-      tree next = TREE_CHAIN (phi);\n+      tree next = PHI_CHAIN (phi);\n       remove_phi_node (phi, NULL_TREE, bb);\n       phi = next;\n     }\n@@ -2113,7 +2113,7 @@ phi_alternatives_equal (basic_block dest, edge e1, edge e2)\n   tree phi, val1, val2;\n   int n1, n2;\n \n-  for (phi = phi_nodes (dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (dest); phi; phi = PHI_CHAIN (phi))\n     {\n       n1 = phi_arg_from_edge (phi, e1);\n       n2 = phi_arg_from_edge (phi, e2);\n@@ -3100,7 +3100,7 @@ tree_split_edge (edge edge_in)\n   /* Find all the PHI arguments on the original edge, and change them to\n      the new edge.  Do it before redirection, so that the argument does not\n      get removed.  */\n-  for (phi = phi_nodes (dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (dest); phi; phi = PHI_CHAIN (phi))\n     {\n       num_elem = PHI_NUM_ARGS (phi);\n       for (i = 0; i < num_elem; i++)\n@@ -3386,7 +3386,7 @@ verify_stmts (void)\n       tree phi;\n       int i;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  int phi_num_args = PHI_NUM_ARGS (phi);\n \n@@ -3733,7 +3733,7 @@ tree_make_forwarder_block (edge fallthru)\n {\n   edge e;\n   basic_block dummy, bb;\n-  tree phi, new_phi, var;\n+  tree phi, new_phi, var, prev, next;\n \n   dummy = fallthru->src;\n   bb = fallthru->dest;\n@@ -3743,7 +3743,7 @@ tree_make_forwarder_block (edge fallthru)\n \n   /* If we redirected a branch we must create new phi nodes at the\n      start of BB.  */\n-  for (phi = phi_nodes (dummy); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (dummy); phi; phi = PHI_CHAIN (phi))\n     {\n       var = PHI_RESULT (phi);\n       new_phi = create_phi_node (var, bb);\n@@ -3752,8 +3752,15 @@ tree_make_forwarder_block (edge fallthru)\n       add_phi_arg (&new_phi, PHI_RESULT (phi), fallthru);\n     }\n \n-  /* Ensure that the PHI node chains are in the same order.  */\n-  set_phi_nodes (bb, nreverse (phi_nodes (bb)));\n+  /* Ensure that the PHI node chain is in the same order.  */\n+  prev = NULL;\n+  for (phi = phi_nodes (bb); phi; phi = next)\n+    {\n+      next = PHI_CHAIN (phi);\n+      PHI_CHAIN (phi) = prev;\n+      prev = phi;\n+    }\n+  set_phi_nodes (bb, prev);\n \n   /* Add the arguments we have stored on edges.  */\n   for (e = bb->pred; e; e = e->pred_next)\n@@ -3763,7 +3770,7 @@ tree_make_forwarder_block (edge fallthru)\n \n       for (phi = phi_nodes (bb), var = PENDING_STMT (e);\n \t   phi;\n-\t   phi = TREE_CHAIN (phi), var = TREE_CHAIN (var))\n+\t   phi = PHI_CHAIN (phi), var = TREE_CHAIN (var))\n \tadd_phi_arg (&phi, TREE_VALUE (var), e);\n \n       PENDING_STMT (e) = NULL;\n@@ -3944,7 +3951,7 @@ thread_jumps (void)\n \t      /* Update PHI nodes.   We know that the new argument should\n \t\t have the same value as the argument associated with LAST.\n \t\t Otherwise we would have changed our target block above.  */\n-\t      for (phi = phi_nodes (dest); phi; phi = TREE_CHAIN (phi))\n+\t      for (phi = phi_nodes (dest); phi; phi = PHI_CHAIN (phi))\n \t\t{\n \t\t  arg = phi_arg_from_edge (phi, last);\n \t\t  if (arg < 0)"}, {"sha": "ca8004387ee1a4dee1201d4a4f454e87dabe0d45", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -181,7 +181,7 @@ compute_immediate_uses (int flags, bool (*calc_for)(tree))\n     {\n       tree phi;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tcompute_immediate_uses_for_phi (phi, calc_for);\n \n       for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n@@ -227,7 +227,7 @@ free_df (void)\n     {\n       tree phi;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tfree_df_for_stmt (phi);\n \n       for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n@@ -636,7 +636,7 @@ dump_immediate_uses (FILE *file)\n     {\n       tree phi;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tdump_immediate_uses_for (file, phi);\n \n       for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n@@ -818,7 +818,7 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p)\n   FOR_EACH_BB (bb)\n     {\n       tree phi;\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  dfa_stats_p->num_phis++;\n \t  dfa_stats_p->num_phi_args += PHI_NUM_ARGS (phi);"}, {"sha": "4fe44ef112e4055bfc620d1a4298aa4635f63db7", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -427,7 +427,7 @@ set_phi_nodes (basic_block bb, tree l)\n   tree phi;\n \n   bb_ann (bb)->phi_nodes = l;\n-  for (phi = l; phi; phi = TREE_CHAIN (phi))\n+  for (phi = l; phi; phi = PHI_CHAIN (phi))\n     set_bb_for_stmt (phi, bb);\n }\n "}, {"sha": "0f9268604270e6a0d0a6e61fba01834a11d64edb", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -514,7 +514,7 @@ rewrite_initialize_block (struct dom_walk_data *walk_data, basic_block bb)\n   /* Step 1.  Register new definitions for every PHI node in the block.\n      Conceptually, all the PHI nodes are executed in parallel and each PHI\n      node introduces a new version for the associated variable.  */\n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       tree result = PHI_RESULT (phi);\n \n@@ -538,7 +538,7 @@ rewrite_add_phi_arguments (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n     {\n       tree phi;\n \n-      for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree currdef;\n "}, {"sha": "ec52f6939fb9008ebfd86eb51ee4d516efb5ea24", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -343,7 +343,7 @@ eliminate_build (elim_graph g, basic_block B, int i)\n \n   clear_elim_graph (g);\n   \n-  for (phi = phi_nodes (B); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (B); phi; phi = PHI_CHAIN (phi))\n     {\n       T0 = var_to_partition_to_var (g->map, PHI_RESULT (phi));\n       \n@@ -588,7 +588,7 @@ coalesce_abnormal_edges (var_map map, conflict_graph graph, root_var_p rv)\n   FOR_EACH_BB (bb)\n     for (e = bb->succ; e; e = e->succ_next)\n       if (e->dest != EXIT_BLOCK_PTR && e->flags & EDGE_ABNORMAL)\n-\tfor (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+\tfor (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t  {\n \t    /* Visit each PHI on the destination side of this abnormal\n \t       edge, and attempt to coalesce the argument with the result.  */\n@@ -698,7 +698,7 @@ coalesce_ssa_name (var_map map, int flags)\n       /* Add all potential copies via PHI arguments to the list.  */\n       FOR_EACH_BB (bb)\n \t{\n-\t  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+\t  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t    {\n \t      tree res = PHI_RESULT (phi);\n \t      int p = var_to_partition (map, res);\n@@ -970,7 +970,7 @@ eliminate_virtual_phis (void)\n     {\n       for (phi = phi_nodes (bb); phi; phi = next)\n         {\n-\t  next = TREE_CHAIN (phi);\n+\t  next = PHI_CHAIN (phi);\n \t  if (!is_gimple_reg (SSA_NAME_VAR (PHI_RESULT (phi))))\n \t    {\n #ifdef ENABLE_CHECKING\n@@ -1031,7 +1031,7 @@ coalesce_vars (var_map map, tree_live_info_p liveinfo)\n     {\n       tree phi, arg;\n       int p;\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  p = var_to_partition (map, PHI_RESULT (phi));\n \n@@ -1794,7 +1794,7 @@ rewrite_trees (var_map map, tree *values)\n     {\n       tree phi;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree T0 = var_to_partition_to_var (map, PHI_RESULT (phi));\n       \n@@ -1987,7 +1987,7 @@ remove_ssa_form (FILE *dump, var_map map, int flags)\n     {\n       for (phi = phi_nodes (bb); phi; phi = next)\n \t{\n-\t  next = TREE_CHAIN (phi);\n+\t  next = PHI_CHAIN (phi);\n \t  if ((flags & SSANORM_REMOVE_ALL_PHIS) \n \t      || var_to_partition (map, PHI_RESULT (phi)) != NO_PARTITION)\n \t    remove_phi_node (phi, NULL_TREE, bb);\n@@ -2029,7 +2029,7 @@ rewrite_vars_out_of_ssa (bitmap vars)\n \t to manually take variables out of SSA form here.  */\n       FOR_EACH_BB (bb)\n \t{\n-\t  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+\t  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t    {\n \t      tree result = SSA_NAME_VAR (PHI_RESULT (phi));\n "}, {"sha": "1b98fcd05bcf4b6c163692f5bc3e67e34d60fed7", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -183,7 +183,7 @@ make_phi_node (tree var, int len)\n     {\n       free_phinode_count--;\n       phi = free_phinodes[bucket];\n-      free_phinodes[bucket] = TREE_CHAIN (free_phinodes[bucket]);\n+      free_phinodes[bucket] = PHI_CHAIN (free_phinodes[bucket]);\n #ifdef GATHER_STATISTICS\n       phi_nodes_reused++;\n #endif\n@@ -220,7 +220,7 @@ release_phi_node (tree phi)\n \n   bucket = len > NUM_BUCKETS - 1 ? NUM_BUCKETS - 1 : len;\n   bucket -= 2;\n-  TREE_CHAIN (phi) = free_phinodes[bucket];\n+  PHI_CHAIN (phi) = free_phinodes[bucket];\n   free_phinodes[bucket] = phi;\n   free_phinode_count++;\n }\n@@ -256,7 +256,7 @@ resize_phi_node (tree *phi, int len)\n     {\n       free_phinode_count--;\n       new_phi = free_phinodes[bucket];\n-      free_phinodes[bucket] = TREE_CHAIN (free_phinodes[bucket]);\n+      free_phinodes[bucket] = PHI_CHAIN (free_phinodes[bucket]);\n #ifdef GATHER_STATISTICS\n       phi_nodes_reused++;\n #endif\n@@ -300,7 +300,7 @@ create_phi_node (tree var, basic_block bb)\n   PHI_REWRITTEN (phi) = 0;\n \n   /* Add the new PHI node to the list of PHI nodes for block BB.  */\n-  TREE_CHAIN (phi) = phi_nodes (bb);\n+  PHI_CHAIN (phi) = phi_nodes (bb);\n   bb_ann (bb)->phi_nodes = phi;\n \n   /* Associate BB to the PHI node.  */\n@@ -345,14 +345,14 @@ add_phi_arg (tree *phi, tree def, edge e)\n \t      tree p;\n \n \t      for (p = phi_nodes (e->dest);\n-\t\t   p && TREE_CHAIN (p) != old_phi;\n-\t\t   p = TREE_CHAIN (p))\n+\t\t   p && PHI_CHAIN (p) != old_phi;\n+\t\t   p = PHI_CHAIN (p))\n \t\t;\n \n \t      if (!p)\n \t\tabort ();\n \n-\t      TREE_CHAIN (p) = *phi;\n+\t      PHI_CHAIN (p) = *phi;\n \t    }\n \t}\n     }\n@@ -434,7 +434,7 @@ remove_phi_node (tree phi, tree prev, basic_block bb)\n   if (prev)\n     {\n       /* Rewire the list if we are given a PREV pointer.  */\n-      TREE_CHAIN (prev) = TREE_CHAIN (phi);\n+      PHI_CHAIN (prev) = PHI_CHAIN (phi);\n \n       /* If we are deleting the PHI node, then we should release the\n \t SSA_NAME node so that it can be reused.  */\n@@ -444,7 +444,7 @@ remove_phi_node (tree phi, tree prev, basic_block bb)\n   else if (phi == phi_nodes (bb))\n     {\n       /* Update the list head if removing the first element.  */\n-      bb_ann (bb)->phi_nodes = TREE_CHAIN (phi);\n+      bb_ann (bb)->phi_nodes = PHI_CHAIN (phi);\n \n       /* If we are deleting the PHI node, then we should release the\n \t SSA_NAME node so that it can be reused.  */\n@@ -456,7 +456,7 @@ remove_phi_node (tree phi, tree prev, basic_block bb)\n       /* Traverse the list looking for the node to remove.  */\n       tree prev, t;\n       prev = NULL_TREE;\n-      for (t = phi_nodes (bb); t && t != phi; t = TREE_CHAIN (t))\n+      for (t = phi_nodes (bb); t && t != phi; t = PHI_CHAIN (t))\n \tprev = t;\n       if (t)\n \tremove_phi_node (t, prev, bb);\n@@ -481,7 +481,7 @@ remove_all_phi_nodes_for (bitmap vars)\n \t{\n \t  tree var = SSA_NAME_VAR (PHI_RESULT (phi));\n \n-\t  next = TREE_CHAIN (phi);\n+\t  next = PHI_CHAIN (phi);\n \t  /* Only add PHI nodes for variables not in VARS.  */\n \t  if (!bitmap_bit_p (vars, var_ann (var)->uid))\n \t    {\n@@ -494,7 +494,7 @@ remove_all_phi_nodes_for (bitmap vars)\n \t\tnew_phi_list = last_phi = phi;\n \t      else\n \t\t{\n-\t\t  TREE_CHAIN (last_phi) = phi;\n+\t\t  PHI_CHAIN (last_phi) = phi;\n \t\t  last_phi = phi;\n \t\t}\n \t    }\n@@ -509,11 +509,11 @@ remove_all_phi_nodes_for (bitmap vars)\n \n       /* Make sure the last node in the new list has no successors.  */\n       if (last_phi)\n-\tTREE_CHAIN (last_phi) = NULL_TREE;\n+\tPHI_CHAIN (last_phi) = NULL_TREE;\n       bb_ann (bb)->phi_nodes = new_phi_list;\n \n #if defined ENABLE_CHECKING\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree var = SSA_NAME_VAR (PHI_RESULT (phi));\n \t  if (bitmap_bit_p (vars, var_ann (var)->uid))"}, {"sha": "4b8d2d400805a3e9076ae013c63cb0a596122912", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -2123,7 +2123,7 @@ dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent, int flags)\n   if (!phi)\n     return;\n \n-  for (; phi; phi = TREE_CHAIN (phi))\n+  for (; phi; phi = PHI_CHAIN (phi))\n     {\n       if (is_gimple_reg (PHI_RESULT (phi)) || (flags & TDF_VOPS))\n         {"}, {"sha": "75c98e12d3d7a7f500187c81b8ebb7c013aa2348", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -2094,7 +2094,7 @@ dump_points_to_info (FILE *file)\n     {\n       tree phi;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree ptr = PHI_RESULT (phi);\n \t  if (POINTER_TYPE_P (TREE_TYPE (ptr)))"}, {"sha": "405591fd4aa36af18a9e75419b6ba5a3f2c2dfde", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -289,7 +289,7 @@ simulate_block (basic_block block)\n \n   /* Always simulate PHI nodes, even if we have simulated this block\n      before.  */\n-  for (phi = phi_nodes (block); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (block); phi; phi = PHI_CHAIN (phi))\n     visit_phi_node (phi);\n \n   /* If this is the first time we've simulated this block, then we\n@@ -382,7 +382,7 @@ substitute_and_fold (void)\n       tree phi;\n \n       /* Propagate our known constants into PHI nodes.  */\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  int i;\n \n@@ -1184,7 +1184,7 @@ initialize (void)\n     {\n       tree phi, var;\n       int x;\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n         {\n \t  value *val;\n \t  val = get_value (PHI_RESULT (phi));"}, {"sha": "71574d4df001469aac24295da76fe5e13fa05a29", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -313,7 +313,7 @@ cprop_into_successor_phis (basic_block bb,\n \t the entries.  */\n       phi_num_args = PHI_NUM_ARGS (phi);\n       hint = phi_num_args;\n-      for ( ; phi; phi = TREE_CHAIN (phi))\n+      for ( ; phi; phi = PHI_CHAIN (phi))\n \t{\n \t  int i;\n \t  tree new;"}, {"sha": "a355b2d5b7d732779a5eda23d14870ac23c184d9", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -320,7 +320,7 @@ rename_ssa_copies (void)\n   FOR_EACH_BB (bb)\n     {\n       /* Treat PHI nodes as copies between the result and each argument.  */\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n         {\n           int i;\n \t  tree res = PHI_RESULT (phi);"}, {"sha": "344f2249ada2d17126b608e65262a2900561bbf9", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -432,7 +432,7 @@ find_obviously_necessary_stmts (struct edge_list *el)\n       tree phi;\n \n       /* Check any PHI nodes in the block.  */\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  NECESSARY (phi) = 0;\n \n@@ -664,7 +664,7 @@ remove_dead_phis (basic_block bb)\n \n       if (! NECESSARY (phi))\n \t{\n-\t  tree next = TREE_CHAIN (phi);\n+\t  tree next = PHI_CHAIN (phi);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -680,7 +680,7 @@ remove_dead_phis (basic_block bb)\n       else\n \t{\n \t  prev = phi;\n-\t  phi = TREE_CHAIN (phi);\n+\t  phi = PHI_CHAIN (phi);\n \t}\n     }\n }"}, {"sha": "636af8e583481d2456870a9b485f0e00cb6c6177", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -331,7 +331,7 @@ redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n \n       /* All variables referenced in PHI nodes we bypass must be\n \t renamed.  */\n-      for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree result = SSA_NAME_VAR (PHI_RESULT (phi));\n \n@@ -381,7 +381,7 @@ redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n \n       /* Finally, any variables in PHI nodes at our final destination\n          must also be taken our of SSA form.  */\n-      for (phi = phi_nodes (tgt); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (tgt); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree result = SSA_NAME_VAR (PHI_RESULT (phi));\n \n@@ -515,7 +515,7 @@ redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n \t{\n \t  tree result = PHI_RESULT (phi);\n \n-\t  next = TREE_CHAIN (phi);\n+\t  next = PHI_CHAIN (phi);\n \n \t  if (bitmap_bit_p (virtuals_to_rename,\n \t\t\t    var_ann (SSA_NAME_VAR (result))->uid))\n@@ -698,7 +698,7 @@ thread_across_edge (struct dom_walk_data *walk_data, edge e)\n   tree phi;\n \n   /* Each PHI creates a temporary equivalence, record them.  */\n-  for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n     {\n       tree src = PHI_ARG_DEF (phi, phi_arg_from_edge (phi, e));\n       tree dst = PHI_RESULT (phi);\n@@ -1334,7 +1334,7 @@ record_equivalences_from_phis (struct dom_walk_data *walk_data, basic_block bb)\n     = VARRAY_TOP_GENERIC_PTR (walk_data->block_data_stack);\n   tree phi;\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n       tree lhs = PHI_RESULT (phi);\n       tree rhs = NULL;"}, {"sha": "e5ba66f56aa986725d3bf077afbdcd3b9393f0b1", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -333,7 +333,7 @@ dse_record_phis (struct dom_walk_data *walk_data, basic_block bb)\n   struct dse_global_data *dse_gd = walk_data->global_data;\n   tree phi;\n \n-  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     if (need_imm_uses_for (PHI_RESULT (phi)))\n       record_voperand_set (dse_gd->stores,\n \t\t\t   &bd->stores,\n@@ -373,7 +373,7 @@ tree_ssa_dse (void)\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n \tstmt_ann (bsi_stmt (bsi))->uid = uid++;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tstmt_ann (phi)->uid = uid++;\n     }\n "}, {"sha": "2f9288b7114c62669d0772a01d02daa2bfc792d0", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -329,7 +329,7 @@ create_ssa_var_map (int flags)\n   FOR_EACH_BB (bb)\n     {\n       tree phi, arg;\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  int i;\n \t  register_ssa_partition (map, PHI_RESULT (phi), false);\n@@ -578,7 +578,7 @@ calculate_live_on_entry (var_map map)\n     {\n       bitmap_clear (saw_def);\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n \t    {\n@@ -603,7 +603,7 @@ calculate_live_on_entry (var_map map)\n \t The a_3 referred to in b_3's PHI node is the one incoming on the\n \t edge, *not* the PHI node just seen.  */\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n         {\n \t  var = PHI_RESULT (phi);\n \t  set_if_valid (map, saw_def, var);\n@@ -701,7 +701,7 @@ calculate_live_on_entry (var_map map)\n \t\tint z, ok = 0;\n \t\tfor (phi = phi_nodes (e->dest); \n \t\t     phi && !ok; \n-\t\t     phi = TREE_CHAIN (phi))\n+\t\t     phi = PHI_CHAIN (phi))\n \t\t  {\n \t\t    for (z = 0; z < PHI_NUM_ARGS (phi); z++)\n \t\t      if (var == PHI_ARG_DEF (phi, z))\n@@ -751,7 +751,7 @@ calculate_live_on_exit (tree_live_info_p liveinfo)\n   /* Set all the live-on-exit bits for uses in PHIs.  */\n   FOR_EACH_BB (bb)\n     {\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \tfor (i = 0; i < PHI_NUM_ARGS (phi); i++)\n \t  { \n \t    t = PHI_ARG_DEF (phi, i);\n@@ -1418,7 +1418,7 @@ build_tree_conflict_graph (tree_live_info_p liveinfo, tpa_p tpa,\n \t going to be translated out of SSA form we must record a conflict\n \t between the result of the PHI and any variables with are live. \n \t Otherwise the out-of-ssa translation may create incorrect code.  */\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  tree result = PHI_RESULT (phi);\n \t  int p = var_to_partition (map, result);\n@@ -1837,7 +1837,7 @@ register_ssa_partitions_for_vars (bitmap vars, var_map map)\n \t    {\n \t      tree result = SSA_NAME_VAR (PHI_RESULT (phi));\n \n-\t      next = TREE_CHAIN (phi);\n+\t      next = PHI_CHAIN (phi);\n \t      if (bitmap_bit_p (vars, var_ann (result)->uid))\n \t\t{\n \t\t  if (! is_gimple_reg (result))"}, {"sha": "89692a277059bc4a5e35b9bc46ba03b8861953e8", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -109,7 +109,7 @@ mark_defs_for_rewrite (basic_block bb)\n   v_must_def_optype v_must_defs;\n   unsigned i;\n \n-  for (stmt = phi_nodes (bb); stmt; stmt = TREE_CHAIN (stmt))\n+  for (stmt = phi_nodes (bb); stmt; stmt = PHI_CHAIN (stmt))\n     {\n       var = SSA_NAME_VAR (PHI_RESULT (stmt));\n       bitmap_set_bit (vars_to_rename, var_ann (var)->uid);\n@@ -223,7 +223,7 @@ duplicate_blocks (varray_type bbs_to_duplicate)\n \t  for (e1 = new_header->succ; e1->dest != e->dest; e1 = e1->succ_next)\n \t    continue;\n \n-\t  for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n+\t  for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n \t    {\n \t      tree def = phi_element_for_edge (phi, e)->def;\n \t      add_phi_arg (&phi, def, e1);"}, {"sha": "bc14dc48d808cfa7c965ccb9199ee4e57e201899", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -121,7 +121,7 @@ tree_ssa_phiopt (void)\n       /* We're searching for blocks with one PHI node which has two\n \t arguments.  */\n       phi = phi_nodes (bb);\n-      if (phi && TREE_CHAIN (phi) == NULL\n+      if (phi && PHI_CHAIN (phi) == NULL\n \t  && PHI_NUM_ARGS (phi) == 2)\n \t{\n \t  arg0 = PHI_ARG_DEF (phi, 0);"}, {"sha": "3d4371e413fea9af1827603ddf26867dfe19c254", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -1606,7 +1606,7 @@ compute_avail (basic_block block)\n       dom = get_immediate_dominator (CDI_DOMINATORS, block);\n       if (dom)\n \tset_copy (AVAIL_OUT (block), AVAIL_OUT (dom));\n-      for (phi = phi_nodes (block); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (block); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  /* Ignore virtual PHIs until we can do PRE on expressions\n \t     with virtual operands.  */"}, {"sha": "175ce4878a78e0bd415e978fba93470178ba6bf6", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -58,7 +58,7 @@ ssa_remove_edge (edge e)\n   /* Remove the appropriate PHI arguments in E's destination block.  */\n   for (phi = phi_nodes (e->dest); phi; phi = next)\n     {\n-      next = TREE_CHAIN (phi);\n+      next = PHI_CHAIN (phi);\n       remove_phi_arg (phi, e->src);\n     }\n \n@@ -80,7 +80,7 @@ ssa_redirect_edge (edge e, basic_block dest)\n   /* Remove the appropriate PHI arguments in E's destination block.  */\n   for (phi = phi_nodes (e->dest); phi; phi = next)\n     {\n-      next = TREE_CHAIN (phi);\n+      next = PHI_CHAIN (phi);\n \n       i = phi_arg_from_edge (phi, e);\n       if (i < 0)\n@@ -305,7 +305,7 @@ verify_ssa (void)\n       tree phi;\n       block_stmt_iterator bsi;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \terr |= verify_def (bb, definition_block, PHI_RESULT (phi), phi);\n \n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n@@ -389,7 +389,7 @@ verify_ssa (void)\n \t}\n \n       /* Verify the arguments for every PHI node in the block.  */\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \terr |= verify_phi_args (phi, bb, definition_block);\n \n       /* Now verify all the uses and vuses in every statement of the block. \n@@ -881,7 +881,7 @@ kill_redundant_phi_nodes (void)\n \n   FOR_EACH_BB (bb)\n     {\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  var = PHI_RESULT (phi);\n \n@@ -1077,7 +1077,7 @@ execute_late_warn_uninitialized (void)\n   execute_early_warn_uninitialized ();\n \n   FOR_EACH_BB (bb)\n-    for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+    for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n       warn_uninitialized_phi (phi);\n }\n "}, {"sha": "379594e9321df51108783dd99bd3ff322c9bb88c", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -339,7 +339,7 @@ propagate_through_phis (tree var, edge e)\n   basic_block dest = e->dest;\n   tree phi;\n \n-  for (phi = phi_nodes (dest); phi; phi = TREE_CHAIN (phi))\n+  for (phi = phi_nodes (dest); phi; phi = PHI_CHAIN (phi))\n     if (phi_element_for_edge (phi, e)->def == var)\n       return PHI_RESULT (phi);\n \n@@ -558,7 +558,7 @@ adjust_accumulator_values (block_stmt_iterator bsi, tree m, tree a, edge back)\n \n   if (a_acc)\n     {\n-      for (phi = phi_nodes (back->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (back->dest); phi; phi = PHI_CHAIN (phi))\n \tif (PHI_RESULT (phi) == a_acc)\n \t  break;\n \n@@ -567,7 +567,7 @@ adjust_accumulator_values (block_stmt_iterator bsi, tree m, tree a, edge back)\n \n   if (m_acc)\n     {\n-      for (phi = phi_nodes (back->dest); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (back->dest); phi; phi = PHI_CHAIN (phi))\n \tif (PHI_RESULT (phi) == m_acc)\n \t  break;\n \n@@ -684,7 +684,7 @@ eliminate_tail_call (struct tailcall *t)\n        args = TREE_CHAIN (args))\n     {\n       \n-      for (phi = phi_nodes (first); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (first); phi; phi = PHI_CHAIN (phi))\n \tif (param == SSA_NAME_VAR (PHI_RESULT (phi)))\n \t  break;\n \n@@ -701,7 +701,7 @@ eliminate_tail_call (struct tailcall *t)\n   for (i = 0; i < NUM_V_MAY_DEFS (v_may_defs); i++)\n     {\n       param = SSA_NAME_VAR (V_MAY_DEF_RESULT (v_may_defs, i));\n-      for (phi = phi_nodes (first); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (first); phi; phi = PHI_CHAIN (phi))\n \tif (param == SSA_NAME_VAR (PHI_RESULT (phi)))\n \t  break;\n "}, {"sha": "5a87055ff3120ea444481d65b76f95a8bd545494", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17192884645f6c9e6135af2e691418734bdb6aac/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=17192884645f6c9e6135af2e691418734bdb6aac", "patch": "@@ -1208,6 +1208,11 @@ struct tree_ssa_name GTY(())\n /* In a PHI_NODE node.  */\n #define PHI_RESULT(NODE)\tPHI_NODE_CHECK (NODE)->phi.result\n \n+/* PHI_NODEs for each basic block are chained together in a single linked\n+   list.  The head of the list is linked from the block annotation, and\n+   the link to the next PHI is in PHI_CHAIN.  */\n+#define PHI_CHAIN(NODE)\t\tTREE_CHAIN (PHI_NODE_CHECK (NODE))\n+\n /* Nonzero if the PHI node was rewritten by a previous pass through the\n    SSA renamer.  */\n #define PHI_REWRITTEN(NODE)\tPHI_NODE_CHECK (NODE)->phi.rewritten"}]}