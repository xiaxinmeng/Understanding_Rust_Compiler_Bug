{"sha": "9102daddaba2ffd48272bd61db08e71203641d62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwMmRhZGRhYmEyZmZkNDgyNzJiZDYxZGIwOGU3MTIwMzY0MWQ2Mg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-01-21T21:26:33Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-01-21T21:26:33Z"}, "message": "re PR rtl-optimization/59896 (Bootstrap: Thumb-1 LRA unable to generate reloads for jump_insn)\n\n2014-01-21  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/59896\n\t* lra-constraints.c (process_alt_operands): Check unused note for\n\tmatched operands of insn with no output reloads.\n\n2014-01-21  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/59896\n\t* gcc.target/arm/pr59896.c: New.\n\nFrom-SVN: r206908", "tree": {"sha": "88adcd42f6a533b3aa9f77003b81e52ad6a9c285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88adcd42f6a533b3aa9f77003b81e52ad6a9c285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9102daddaba2ffd48272bd61db08e71203641d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9102daddaba2ffd48272bd61db08e71203641d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9102daddaba2ffd48272bd61db08e71203641d62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9102daddaba2ffd48272bd61db08e71203641d62/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca376eb8906f017e36271a101d95d42a4243bb2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca376eb8906f017e36271a101d95d42a4243bb2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca376eb8906f017e36271a101d95d42a4243bb2f"}], "stats": {"total": 1395, "additions": 1393, "deletions": 2}, "files": [{"sha": "bcbb7dd989506350f7aea5d1d3a748c4f74d5559", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9102daddaba2ffd48272bd61db08e71203641d62", "patch": "@@ -1,3 +1,9 @@\n+2014-01-21  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/59896\n+\t* lra-constraints.c (process_alt_operands): Check unused note for\n+\tmatched operands of insn with no output reloads.\n+\n 2014-01-21  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_move_to_gpr_cost): Add M16_REGS case."}, {"sha": "dc5e59a74704a1a8b7c66c24426a14518b5f70c9", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=9102daddaba2ffd48272bd61db08e71203641d62", "patch": "@@ -2199,7 +2199,13 @@ process_alt_operands (int only_alternative)\n \t\t  || (curr_static_id->operand[nop].type != OP_OUT\n \t\t      && no_input_reloads_p && ! const_to_mem)\n \t\t  || (this_alternative_matches >= 0\n-\t\t      && (no_input_reloads_p || no_output_reloads_p)))\n+\t\t      && (no_input_reloads_p\n+\t\t\t  || (no_output_reloads_p\n+\t\t\t      && (curr_static_id->operand\n+\t\t\t\t  [this_alternative_matches].type != OP_IN)\n+\t\t\t      && ! find_reg_note (curr_insn, REG_UNUSED,\n+\t\t\t\t\t\t  no_subreg_reg_operand\n+\t\t\t\t\t\t  [this_alternative_matches])))))\n \t\t{\n \t\t  if (lra_dump_file != NULL)\n \t\t    fprintf"}, {"sha": "859a5c4fb7a417806fa1348ae4cba60327ccbd52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9102daddaba2ffd48272bd61db08e71203641d62", "patch": "@@ -1,3 +1,8 @@\n+2014-01-21  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/59896\n+\t* gcc.target/arm/pr59896.c: New.\n+\n 2014-01-21  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/59858\n@@ -15,7 +20,7 @@\n 2014-01-20  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \t* gfortran.dg/round_3.f08: Add more cases.\n-\t\n+\n 2014-01-20  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* lib/target-supports.exp (force_conventional_output_for): New"}, {"sha": "5896e73799dc65a9a6814e039710cc16a7f1b0f3", "filename": "gcc/testsuite/gcc.target/arm/pr59896.c", "status": "added", "additions": 1374, "deletions": 0, "changes": 1374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr59896.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9102daddaba2ffd48272bd61db08e71203641d62/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr59896.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr59896.c?ref=9102daddaba2ffd48272bd61db08e71203641d62", "patch": "@@ -0,0 +1,1374 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mthumb -O2\" } */\n+\n+typedef unsigned int size_t;\n+typedef unsigned int wchar_t;\n+typedef int ptrdiff_t;\n+typedef signed char __int8_t ;\n+typedef unsigned char __uint8_t ;\n+typedef signed short __int16_t;\n+typedef unsigned short __uint16_t;\n+typedef __int16_t __int_least16_t;\n+typedef __uint16_t __uint_least16_t;\n+typedef signed int __int32_t;\n+typedef unsigned int __uint32_t;\n+typedef __int32_t __int_least32_t;\n+typedef __uint32_t __uint_least32_t;\n+typedef signed long long __int64_t;\n+typedef unsigned long long __uint64_t;\n+typedef int _LOCK_T;\n+typedef int _LOCK_RECURSIVE_T;\n+typedef long _off_t;\n+typedef short __dev_t;\n+typedef unsigned short __uid_t;\n+typedef unsigned short __gid_t;\n+__extension__ typedef long long _off64_t;\n+typedef long _fpos_t;\n+typedef signed int _ssize_t;\n+typedef unsigned int wint_t;\n+typedef struct\n+{\n+  int __count;\n+  union\n+  {\n+    wint_t __wch;\n+    unsigned char __wchb[4];\n+  } __value;\n+} _mbstate_t;\n+typedef _LOCK_RECURSIVE_T _flock_t;\n+typedef void *_iconv_t;\n+typedef unsigned long __ULong;\n+struct _reent;\n+struct _Bigint\n+{\n+  struct _Bigint *_next;\n+  int _k, _maxwds, _sign, _wds;\n+  __ULong _x[1];\n+};\n+struct __tm\n+{\n+  int __tm_sec;\n+  int __tm_min;\n+  int __tm_hour;\n+  int __tm_mday;\n+  int __tm_mon;\n+  int __tm_year;\n+  int __tm_wday;\n+  int __tm_yday;\n+  int __tm_isdst;\n+};\n+struct _on_exit_args {\n+ void * _fnargs[32];\n+ void * _dso_handle[32];\n+ __ULong _fntypes;\n+ __ULong _is_cxa;\n+};\n+struct _atexit {\n+ struct _atexit *_next;\n+ int _ind;\n+ void (*_fns[32])(void);\n+        struct _on_exit_args _on_exit_args;\n+};\n+struct __sbuf {\n+ unsigned char *_base;\n+ int _size;\n+};\n+struct __sFILE {\n+  unsigned char *_p;\n+  int _r;\n+  int _w;\n+  short _flags;\n+  short _file;\n+  struct __sbuf _bf;\n+  int _lbfsize;\n+  void * _cookie;\n+  int (* _read) (struct _reent *, void *, char *, int)\n+                                          ;\n+  int (* _write) (struct _reent *, void *, const char *, int)\n+                                   ;\n+  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);\n+  int (* _close) (struct _reent *, void *);\n+  struct __sbuf _ub;\n+  unsigned char *_up;\n+  int _ur;\n+  unsigned char _ubuf[3];\n+  unsigned char _nbuf[1];\n+  struct __sbuf _lb;\n+  int _blksize;\n+  _off_t _offset;\n+  struct _reent *_data;\n+  _flock_t _lock;\n+  _mbstate_t _mbstate;\n+  int _flags2;\n+};\n+typedef struct __sFILE __FILE;\n+struct _glue\n+{\n+  struct _glue *_next;\n+  int _niobs;\n+  __FILE *_iobs;\n+};\n+struct _rand48 {\n+  unsigned short _seed[3];\n+  unsigned short _mult[3];\n+  unsigned short _add;\n+};\n+struct _reent\n+{\n+  int _errno;\n+  __FILE *_stdin, *_stdout, *_stderr;\n+  int _inc;\n+  char _emergency[25];\n+  int _current_category;\n+  const char *_current_locale;\n+  int __sdidinit;\n+  void (* __cleanup) (struct _reent *);\n+  struct _Bigint *_result;\n+  int _result_k;\n+  struct _Bigint *_p5s;\n+  struct _Bigint **_freelist;\n+  int _cvtlen;\n+  char *_cvtbuf;\n+  union\n+    {\n+      struct\n+        {\n+          unsigned int _unused_rand;\n+          char * _strtok_last;\n+          char _asctime_buf[26];\n+          struct __tm _localtime_buf;\n+          int _gamma_signgam;\n+          __extension__ unsigned long long _rand_next;\n+          struct _rand48 _r48;\n+          _mbstate_t _mblen_state;\n+          _mbstate_t _mbtowc_state;\n+          _mbstate_t _wctomb_state;\n+          char _l64a_buf[8];\n+          char _signal_buf[24];\n+          int _getdate_err;\n+          _mbstate_t _mbrlen_state;\n+          _mbstate_t _mbrtowc_state;\n+          _mbstate_t _mbsrtowcs_state;\n+          _mbstate_t _wcrtomb_state;\n+          _mbstate_t _wcsrtombs_state;\n+   int _h_errno;\n+        } _reent;\n+      struct\n+        {\n+          unsigned char * _nextf[30];\n+          unsigned int _nmalloc[30];\n+        } _unused;\n+    } _new;\n+  struct _atexit *_atexit;\n+  struct _atexit _atexit0;\n+  void (**(_sig_func))(int);\n+  struct _glue __sglue;\n+  __FILE __sf[3];\n+};\n+extern struct _reent *_impure_ptr ;\n+extern struct _reent *const _global_impure_ptr ;\n+void _reclaim_reent (struct _reent *);\n+typedef struct\n+{\n+  int quot;\n+  int rem;\n+} div_t;\n+typedef struct\n+{\n+  long quot;\n+  long rem;\n+} ldiv_t;\n+typedef struct\n+{\n+  long long int quot;\n+  long long int rem;\n+} lldiv_t;\n+typedef int (*__compar_fn_t) (const void *, const void *);\n+int __locale_mb_cur_max (void);\n+void abort (void) __attribute__ ((noreturn));\n+int abs (int);\n+int atexit (void (*__func)(void));\n+double atof (const char *__nptr);\n+float atoff (const char *__nptr);\n+int atoi (const char *__nptr);\n+int _atoi_r (struct _reent *, const char *__nptr);\n+long atol (const char *__nptr);\n+long _atol_r (struct _reent *, const char *__nptr);\n+void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)\n+                                ;\n+void * calloc (size_t __nmemb, size_t __size) ;\n+div_t div (int __numer, int __denom);\n+void exit (int __status) __attribute__ ((noreturn));\n+void free (void *) ;\n+char * getenv (const char *__string);\n+char * _getenv_r (struct _reent *, const char *__string);\n+char * _findenv (const char *, int *);\n+char * _findenv_r (struct _reent *, const char *, int *);\n+extern char *suboptarg;\n+int getsubopt (char **, char * const *, char **);\n+long labs (long);\n+ldiv_t ldiv (long __numer, long __denom);\n+void * malloc (size_t __size) ;\n+int mblen (const char *, size_t);\n+int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);\n+int mbtowc (wchar_t *, const char *, size_t);\n+int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);\n+int wctomb (char *, wchar_t);\n+int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);\n+size_t mbstowcs (wchar_t *, const char *, size_t);\n+size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);\n+size_t wcstombs (char *, const wchar_t *, size_t);\n+size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);\n+char * mkdtemp (char *);\n+int mkostemp (char *, int);\n+int mkostemps (char *, int, int);\n+int mkstemp (char *);\n+int mkstemps (char *, int);\n+char * mktemp (char *) __attribute__ ((__warning__ (\"the use of `mktemp' is dangerous; use `mkstemp' instead\")));\n+char * _mkdtemp_r (struct _reent *, char *);\n+int _mkostemp_r (struct _reent *, char *, int);\n+int _mkostemps_r (struct _reent *, char *, int, int);\n+int _mkstemp_r (struct _reent *, char *);\n+int _mkstemps_r (struct _reent *, char *, int);\n+char * _mktemp_r (struct _reent *, char *) __attribute__ ((__warning__ (\"the use of `mktemp' is dangerous; use `mkstemp' instead\")));\n+void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);\n+int rand (void);\n+void * realloc (void * __r, size_t __size) ;\n+void * reallocf (void * __r, size_t __size);\n+void srand (unsigned __seed);\n+double strtod (const char *__n, char **__end_PTR);\n+double _strtod_r (struct _reent *,const char *__n, char **__end_PTR);\n+float strtof (const char *__n, char **__end_PTR);\n+long strtol (const char *__n, char **__end_PTR, int __base);\n+long _strtol_r (struct _reent *,const char *__n, char **__end_PTR, int __base);\n+unsigned long strtoul (const char *__n, char **__end_PTR, int __base);\n+unsigned long _strtoul_r (struct _reent *,const char *__n, char **__end_PTR, int __base);\n+int system (const char *__string);\n+long a64l (const char *__input);\n+char * l64a (long __input);\n+char * _l64a_r (struct _reent *,long __input);\n+int on_exit (void (*__func)(int, void *),void * __arg);\n+void _Exit (int __status) __attribute__ ((noreturn));\n+int putenv (char *__string);\n+int _putenv_r (struct _reent *, char *__string);\n+void * _reallocf_r (struct _reent *, void *, size_t);\n+int setenv (const char *__string, const char *__value, int __overwrite);\n+int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);\n+char * gcvt (double,int,char *);\n+char * gcvtf (float,int,char *);\n+char * fcvt (double,int,int *,int *);\n+char * fcvtf (float,int,int *,int *);\n+char * ecvt (double,int,int *,int *);\n+char * ecvtbuf (double, int, int*, int*, char *);\n+char * fcvtbuf (double, int, int*, int*, char *);\n+char * ecvtf (float,int,int *,int *);\n+char * dtoa (double, int, int, int *, int*, char**);\n+int rand_r (unsigned *__seed);\n+double drand48 (void);\n+double _drand48_r (struct _reent *);\n+double erand48 (unsigned short [3]);\n+double _erand48_r (struct _reent *, unsigned short [3]);\n+long jrand48 (unsigned short [3]);\n+long _jrand48_r (struct _reent *, unsigned short [3]);\n+void lcong48 (unsigned short [7]);\n+void _lcong48_r (struct _reent *, unsigned short [7]);\n+long lrand48 (void);\n+long _lrand48_r (struct _reent *);\n+long mrand48 (void);\n+long _mrand48_r (struct _reent *);\n+long nrand48 (unsigned short [3]);\n+long _nrand48_r (struct _reent *, unsigned short [3]);\n+unsigned short *\n+       seed48 (unsigned short [3]);\n+unsigned short *\n+       _seed48_r (struct _reent *, unsigned short [3]);\n+void srand48 (long);\n+void _srand48_r (struct _reent *, long);\n+long long atoll (const char *__nptr);\n+long long _atoll_r (struct _reent *, const char *__nptr);\n+long long llabs (long long);\n+lldiv_t lldiv (long long __numer, long long __denom);\n+long long strtoll (const char *__n, char **__end_PTR, int __base);\n+long long _strtoll_r (struct _reent *, const char *__n, char **__end_PTR, int __base);\n+unsigned long long strtoull (const char *__n, char **__end_PTR, int __base);\n+unsigned long long _strtoull_r (struct _reent *, const char *__n, char **__end_PTR, int __base);\n+void cfree (void *);\n+int unsetenv (const char *__string);\n+int _unsetenv_r (struct _reent *, const char *__string);\n+char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);\n+void * _malloc_r (struct _reent *, size_t) ;\n+void * _calloc_r (struct _reent *, size_t, size_t) ;\n+void _free_r (struct _reent *, void *) ;\n+void * _realloc_r (struct _reent *, void *, size_t) ;\n+void _mstats_r (struct _reent *, char *);\n+int _system_r (struct _reent *, const char *);\n+void __eprintf (const char *, const char *, unsigned int, const char *);\n+extern long double strtold (const char *, char **);\n+extern long double wcstold (const wchar_t *, wchar_t **);\n+typedef long int __off_t;\n+typedef int __pid_t;\n+__extension__ typedef long long int __loff_t;\n+struct stat;\n+struct tms;\n+struct timeval;\n+struct timezone;\n+extern int _close_r (struct _reent *, int);\n+extern int _execve_r (struct _reent *, const char *, char *const *, char *const *);\n+extern int _fcntl_r (struct _reent *, int, int, int);\n+extern int _fork_r (struct _reent *);\n+extern int _fstat_r (struct _reent *, int, struct stat *);\n+extern int _getpid_r (struct _reent *);\n+extern int _isatty_r (struct _reent *, int);\n+extern int _kill_r (struct _reent *, int, int);\n+extern int _link_r (struct _reent *, const char *, const char *);\n+extern _off_t _lseek_r (struct _reent *, int, _off_t, int);\n+extern int _mkdir_r (struct _reent *, const char *, int);\n+extern int _open_r (struct _reent *, const char *, int, int);\n+extern _ssize_t _read_r (struct _reent *, int, void *, size_t);\n+extern int _rename_r (struct _reent *, const char *, const char *);\n+extern void *_sbrk_r (struct _reent *, ptrdiff_t);\n+extern int _stat_r (struct _reent *, const char *, struct stat *);\n+extern unsigned long _times_r (struct _reent *, struct tms *);\n+extern int _unlink_r (struct _reent *, const char *);\n+extern int _wait_r (struct _reent *, int *);\n+extern _ssize_t _write_r (struct _reent *, int, const void *, size_t);\n+extern int _gettimeofday_r (struct _reent *, struct timeval *__tp, void *__tzp);\n+typedef signed char int8_t ;\n+typedef unsigned char uint8_t ;\n+typedef signed char int_least8_t;\n+typedef unsigned char uint_least8_t;\n+typedef signed short int16_t;\n+typedef unsigned short uint16_t;\n+typedef int16_t int_least16_t;\n+typedef uint16_t uint_least16_t;\n+typedef signed long int32_t;\n+typedef unsigned long uint32_t;\n+typedef int32_t int_least32_t;\n+typedef uint32_t uint_least32_t;\n+typedef signed long long int64_t;\n+typedef unsigned long long uint64_t;\n+typedef int64_t int_least64_t;\n+typedef uint64_t uint_least64_t;\n+  typedef signed int int_fast8_t;\n+  typedef unsigned int uint_fast8_t;\n+  typedef signed int int_fast16_t;\n+  typedef unsigned int uint_fast16_t;\n+  typedef signed int int_fast32_t;\n+  typedef unsigned int uint_fast32_t;\n+  typedef int_least64_t int_fast64_t;\n+  typedef uint_least64_t uint_fast64_t;\n+  typedef long long int intmax_t;\n+  typedef long long unsigned int uintmax_t;\n+typedef signed int intptr_t;\n+typedef unsigned int uintptr_t;\n+void * memchr (const void *, int, size_t);\n+int memcmp (const void *, const void *, size_t);\n+void * memcpy (void * , const void * , size_t);\n+void * memmove (void *, const void *, size_t);\n+void * memset (void *, int, size_t);\n+char *strcat (char *, const char *);\n+char *strchr (const char *, int);\n+int strcmp (const char *, const char *);\n+int strcoll (const char *, const char *);\n+char *strcpy (char *, const char *);\n+size_t strcspn (const char *, const char *);\n+char *strerror (int);\n+size_t strlen (const char *);\n+char *strncat (char *, const char *, size_t);\n+int strncmp (const char *, const char *, size_t);\n+char *strncpy (char *, const char *, size_t);\n+char *strpbrk (const char *, const char *);\n+char *strrchr (const char *, int);\n+size_t strspn (const char *, const char *);\n+char *strstr (const char *, const char *);\n+char *strtok (char *, const char *);\n+size_t strxfrm (char *, const char *, size_t);\n+char *strtok_r (char *, const char *, char **);\n+int bcmp (const void *, const void *, size_t);\n+void bcopy (const void *, void *, size_t);\n+void bzero (void *, size_t);\n+int ffs (int);\n+char *index (const char *, int);\n+void * memccpy (void * , const void * , int, size_t);\n+void * mempcpy (void *, const void *, size_t);\n+void * memmem (const void *, size_t, const void *, size_t);\n+void * memrchr (const void *, int, size_t);\n+void * rawmemchr (const void *, int);\n+char *rindex (const char *, int);\n+char *stpcpy (char *, const char *);\n+char *stpncpy (char *, const char *, size_t);\n+int strcasecmp (const char *, const char *);\n+char *strcasestr (const char *, const char *);\n+char *strchrnul (const char *, int);\n+char *strdup (const char *);\n+char *_strdup_r (struct _reent *, const char *);\n+char *strndup (const char *, size_t);\n+char *_strndup_r (struct _reent *, const char *, size_t);\n+int strerror_r (int, char *, size_t) __asm__ (\"\" \"__xpg_strerror_r\");\n+size_t strlcat (char *, const char *, size_t);\n+size_t strlcpy (char *, const char *, size_t);\n+int strncasecmp (const char *, const char *, size_t);\n+size_t strnlen (const char *, size_t);\n+char *strsep (char **, const char *);\n+char *strlwr (char *);\n+char *strupr (char *);\n+char *strsignal (int __signo);\n+char * _strerror_r (struct _reent *, int, int, int *);\n+typedef union\n+{\n+  double value;\n+  struct\n+  {\n+    unsigned int fraction1:32;\n+    unsigned int fraction0:20;\n+    unsigned int exponent :11;\n+    unsigned int sign : 1;\n+  } number;\n+  struct\n+  {\n+    unsigned int function1:32;\n+    unsigned int function0:19;\n+    unsigned int quiet:1;\n+    unsigned int exponent: 11;\n+    unsigned int sign : 1;\n+  } nan;\n+  struct\n+  {\n+    unsigned long lsw;\n+    unsigned long msw;\n+  } parts;\n+  long aslong[2];\n+} __ieee_double_shape_type;\n+typedef union\n+{\n+  float value;\n+  struct\n+  {\n+    unsigned int fraction0: 7;\n+    unsigned int fraction1: 16;\n+    unsigned int exponent: 8;\n+    unsigned int sign : 1;\n+  } number;\n+  struct\n+  {\n+    unsigned int function1:16;\n+    unsigned int function0:6;\n+    unsigned int quiet:1;\n+    unsigned int exponent:8;\n+    unsigned int sign:1;\n+  } nan;\n+  long p1;\n+} __ieee_float_shape_type;\n+typedef int fp_rnd;\n+fp_rnd fpgetround (void);\n+fp_rnd fpsetround (fp_rnd);\n+typedef int fp_except;\n+fp_except fpgetmask (void);\n+fp_except fpsetmask (fp_except);\n+fp_except fpgetsticky (void);\n+fp_except fpsetsticky (fp_except);\n+typedef int fp_rdi;\n+fp_rdi fpgetroundtoi (void);\n+fp_rdi fpsetroundtoi (fp_rdi);\n+int isnan (double);\n+int isinf (double);\n+int finite (double);\n+int isnanf (float);\n+int isinff (float);\n+int finitef (float);\n+union __dmath\n+{\n+  double d;\n+  __ULong i[2];\n+};\n+union __fmath\n+{\n+  float f;\n+  __ULong i[1];\n+};\n+union __ldmath\n+{\n+  long double ld;\n+  __ULong i[4];\n+};\n+extern double atan (double);\n+extern double cos (double);\n+extern double sin (double);\n+extern double tan (double);\n+extern double tanh (double);\n+extern double frexp (double, int *);\n+extern double modf (double, double *);\n+extern double ceil (double);\n+extern double fabs (double);\n+extern double floor (double);\n+extern double acos (double);\n+extern double asin (double);\n+extern double atan2 (double, double);\n+extern double cosh (double);\n+extern double sinh (double);\n+extern double exp (double);\n+extern double ldexp (double, int);\n+extern double log (double);\n+extern double log10 (double);\n+extern double pow (double, double);\n+extern double sqrt (double);\n+extern double fmod (double, double);\n+    typedef float float_t;\n+    typedef double double_t;\n+extern int __isinff (float x);\n+extern int __isinfd (double x);\n+extern int __isnanf (float x);\n+extern int __isnand (double x);\n+extern int __fpclassifyf (float x);\n+extern int __fpclassifyd (double x);\n+extern int __signbitf (float x);\n+extern int __signbitd (double x);\n+extern double infinity (void);\n+extern double nan (const char *);\n+extern int finite (double);\n+extern double copysign (double, double);\n+extern double logb (double);\n+extern int ilogb (double);\n+extern double asinh (double);\n+extern double cbrt (double);\n+extern double nextafter (double, double);\n+extern double rint (double);\n+extern double scalbn (double, int);\n+extern double exp2 (double);\n+extern double scalbln (double, long int);\n+extern double tgamma (double);\n+extern double nearbyint (double);\n+extern long int lrint (double);\n+extern long long int llrint (double);\n+extern double round (double);\n+extern long int lround (double);\n+extern long long int llround (double);\n+extern double trunc (double);\n+extern double remquo (double, double, int *);\n+extern double fdim (double, double);\n+extern double fmax (double, double);\n+extern double fmin (double, double);\n+extern double fma (double, double, double);\n+extern double log1p (double);\n+extern double expm1 (double);\n+extern double acosh (double);\n+extern double atanh (double);\n+extern double remainder (double, double);\n+extern double gamma (double);\n+extern double lgamma (double);\n+extern double erf (double);\n+extern double erfc (double);\n+extern double log2 (double);\n+extern double hypot (double, double);\n+extern float atanf (float);\n+extern float cosf (float);\n+extern float sinf (float);\n+extern float tanf (float);\n+extern float tanhf (float);\n+extern float frexpf (float, int *);\n+extern float modff (float, float *);\n+extern float ceilf (float);\n+extern float fabsf (float);\n+extern float floorf (float);\n+extern float acosf (float);\n+extern float asinf (float);\n+extern float atan2f (float, float);\n+extern float coshf (float);\n+extern float sinhf (float);\n+extern float expf (float);\n+extern float ldexpf (float, int);\n+extern float logf (float);\n+extern float log10f (float);\n+extern float powf (float, float);\n+extern float sqrtf (float);\n+extern float fmodf (float, float);\n+extern float exp2f (float);\n+extern float scalblnf (float, long int);\n+extern float tgammaf (float);\n+extern float nearbyintf (float);\n+extern long int lrintf (float);\n+extern long long llrintf (float);\n+extern float roundf (float);\n+extern long int lroundf (float);\n+extern long long int llroundf (float);\n+extern float truncf (float);\n+extern float remquof (float, float, int *);\n+extern float fdimf (float, float);\n+extern float fmaxf (float, float);\n+extern float fminf (float, float);\n+extern float fmaf (float, float, float);\n+extern float infinityf (void);\n+extern float nanf (const char *);\n+extern int finitef (float);\n+extern float copysignf (float, float);\n+extern float logbf (float);\n+extern int ilogbf (float);\n+extern float asinhf (float);\n+extern float cbrtf (float);\n+extern float nextafterf (float, float);\n+extern float rintf (float);\n+extern float scalbnf (float, int);\n+extern float log1pf (float);\n+extern float expm1f (float);\n+extern float acoshf (float);\n+extern float atanhf (float);\n+extern float remainderf (float, float);\n+extern float gammaf (float);\n+extern float lgammaf (float);\n+extern float erff (float);\n+extern float erfcf (float);\n+extern float log2f (float);\n+extern float hypotf (float, float);\n+extern long double atanl (long double);\n+extern long double cosl (long double);\n+extern long double sinl (long double);\n+extern long double tanl (long double);\n+extern long double tanhl (long double);\n+extern long double frexpl (long double value, int *);\n+extern long double modfl (long double, long double *);\n+extern long double ceill (long double);\n+extern long double fabsl (long double);\n+extern long double floorl (long double);\n+extern long double log1pl (long double);\n+extern long double expm1l (long double);\n+extern long double acosl (long double);\n+extern long double asinl (long double);\n+extern long double atan2l (long double, long double);\n+extern long double coshl (long double);\n+extern long double sinhl (long double);\n+extern long double expl (long double);\n+extern long double ldexpl (long double, int);\n+extern long double logl (long double);\n+extern long double log10l (long double);\n+extern long double powl (long double, long double);\n+extern long double sqrtl (long double);\n+extern long double fmodl (long double, long double);\n+extern long double hypotl (long double, long double);\n+extern long double copysignl (long double, long double);\n+extern long double nanl (const char *);\n+extern int ilogbl (long double);\n+extern long double asinhl (long double);\n+extern long double cbrtl (long double);\n+extern long double nextafterl (long double, long double);\n+extern long double rintl (long double);\n+extern long double scalbnl (long double, int);\n+extern long double exp2l (long double);\n+extern long double scalblnl (long double, long);\n+extern long double tgammal (long double);\n+extern long double nearbyintl (long double);\n+extern long int lrintl (long double);\n+extern long long int llrintl (long double);\n+extern long double roundl (long double);\n+extern long lroundl (long double);\n+extern long long int llroundl (long double);\n+extern long double truncl (long double);\n+extern long double remquol (long double, long double, int *);\n+extern long double fdiml (long double, long double);\n+extern long double fmaxl (long double, long double);\n+extern long double fminl (long double, long double);\n+extern long double fmal (long double, long double, long double);\n+extern long double acoshl (long double);\n+extern long double atanhl (long double);\n+extern long double remainderl (long double, long double);\n+extern long double lgammal (long double);\n+extern long double erfl (long double);\n+extern long double erfcl (long double);\n+extern double drem (double, double);\n+extern void sincos (double, double *, double *);\n+extern double gamma_r (double, int *);\n+extern double lgamma_r (double, int *);\n+extern double y0 (double);\n+extern double y1 (double);\n+extern double yn (int, double);\n+extern double j0 (double);\n+extern double j1 (double);\n+extern double jn (int, double);\n+extern float dremf (float, float);\n+extern void sincosf (float, float *, float *);\n+extern float gammaf_r (float, int *);\n+extern float lgammaf_r (float, int *);\n+extern float y0f (float);\n+extern float y1f (float);\n+extern float ynf (int, float);\n+extern float j0f (float);\n+extern float j1f (float);\n+extern float jnf (int, float);\n+extern double exp10 (double);\n+extern double pow10 (double);\n+extern float exp10f (float);\n+extern float pow10f (float);\n+extern int *__signgam (void);\n+struct exception\n+{\n+  int type;\n+  char *name;\n+  double arg1;\n+  double arg2;\n+  double retval;\n+  int err;\n+};\n+extern int matherr (struct exception *e);\n+enum __fdlibm_version\n+{\n+  __fdlibm_ieee = -1,\n+  __fdlibm_svid,\n+  __fdlibm_xopen,\n+  __fdlibm_posix\n+};\n+extern enum __fdlibm_version __fdlib_version;\n+typedef int error_t;\n+extern int *__errno (void);\n+extern const char * const _sys_errlist[];\n+extern int _sys_nerr;\n+typedef unsigned char u_char;\n+typedef unsigned short u_short;\n+typedef unsigned int u_int;\n+typedef unsigned long u_long;\n+typedef unsigned short ushort;\n+typedef unsigned int uint;\n+typedef unsigned long ulong;\n+typedef unsigned long clock_t;\n+typedef long time_t;\n+struct timespec {\n+  time_t tv_sec;\n+  long tv_nsec;\n+};\n+struct itimerspec {\n+  struct timespec it_interval;\n+  struct timespec it_value;\n+};\n+typedef long daddr_t;\n+typedef char * caddr_t;\n+typedef unsigned short ino_t;\n+typedef _off_t off_t;\n+typedef __dev_t dev_t;\n+typedef __uid_t uid_t;\n+typedef __gid_t gid_t;\n+typedef int pid_t;\n+typedef long key_t;\n+typedef _ssize_t ssize_t;\n+typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__)));\n+typedef unsigned short nlink_t;\n+typedef long fd_mask;\n+typedef struct _types_fd_set {\n+ fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];\n+} _types_fd_set;\n+typedef unsigned long clockid_t;\n+typedef unsigned long timer_t;\n+typedef unsigned long useconds_t;\n+typedef long suseconds_t;\n+union double_union\n+{\n+  double d;\n+  __uint32_t i[2];\n+};\n+typedef __int32_t Long;\n+typedef union { double d; __ULong i[2]; } U;\n+typedef struct _Bigint _Bigint;\n+struct _reent ;\n+struct FPI;\n+double __ulp (double x);\n+double __b2d (_Bigint *a , int *e);\n+_Bigint * _Balloc (struct _reent *p, int k);\n+void _Bfree (struct _reent *p, _Bigint *v);\n+_Bigint * __multadd (struct _reent *p, _Bigint *, int, int);\n+_Bigint * __s2b (struct _reent *, const char*, int, int, __ULong);\n+_Bigint * __i2b (struct _reent *,int);\n+_Bigint * __multiply (struct _reent *, _Bigint *, _Bigint *);\n+_Bigint * __pow5mult (struct _reent *, _Bigint *, int k);\n+int __hi0bits (__ULong);\n+int __lo0bits (__ULong *);\n+_Bigint * __d2b (struct _reent *p, double d, int *e, int *bits);\n+_Bigint * __lshift (struct _reent *p, _Bigint *b, int k);\n+_Bigint * __mdiff (struct _reent *p, _Bigint *a, _Bigint *b);\n+int __mcmp (_Bigint *a, _Bigint *b);\n+int __gethex (struct _reent *p, const char **sp, const struct FPI *fpi, Long *exp, _Bigint **bp, int sign);\n+double __ratio (_Bigint *a, _Bigint *b);\n+__ULong __any_on (_Bigint *b, int k);\n+void __copybits (__ULong *c, int n, _Bigint *b);\n+int __hexnan (const char **sp, const struct FPI *fpi, __ULong *x0);\n+extern const double __mprec_tinytens[];\n+extern const double __mprec_bigtens[];\n+extern const double __mprec_tens[];\n+extern const unsigned char __hexdig[];\n+double _mprec_log10 (int);\n+static int\n+quorem(_Bigint * b , _Bigint * S)\n+{\n+  int n;\n+  long borrow, y;\n+  __ULong carry, q, ys;\n+  __ULong *bx, *bxe, *sx, *sxe;\n+  long z;\n+  __ULong si, zs;\n+  n = S->_wds;\n+  if (b->_wds < n)\n+    return 0;\n+  sx = S->_x;\n+  sxe = sx + --n;\n+  bx = b->_x;\n+  bxe = bx + n;\n+  q = *bxe / (*sxe + 1);\n+  if (q)\n+    {\n+      borrow = 0;\n+      carry = 0;\n+      do\n+ {\n+   si = *sx++;\n+   ys = (si & 0xffff) * q + carry;\n+   zs = (si >> 16) * q + (ys >> 16);\n+   carry = zs >> 16;\n+   y = (*bx & 0xffff) - (ys & 0xffff) + borrow;\n+   borrow = y >> 16;\n+   ;\n+   z = (*bx >> 16) - (zs & 0xffff) + borrow;\n+   borrow = z >> 16;\n+   ;\n+   (*(bx)++ = ((z) << 16) | ((y) & 0xffff));\n+ }\n+      while (sx <= sxe);\n+      if (!*bxe)\n+ {\n+   bx = b->_x;\n+   while (--bxe > bx && !*bxe)\n+     --n;\n+   b->_wds = n;\n+ }\n+    }\n+  if (__mcmp (b, S) >= 0)\n+    {\n+      q++;\n+      borrow = 0;\n+      carry = 0;\n+      bx = b->_x;\n+      sx = S->_x;\n+      do\n+ {\n+   si = *sx++;\n+   ys = (si & 0xffff) + carry;\n+   zs = (si >> 16) + (ys >> 16);\n+   carry = zs >> 16;\n+   y = (*bx & 0xffff) - (ys & 0xffff) + borrow;\n+   borrow = y >> 16;\n+   ;\n+   z = (*bx >> 16) - (zs & 0xffff) + borrow;\n+   borrow = z >> 16;\n+   ;\n+   (*(bx)++ = ((z) << 16) | ((y) & 0xffff));\n+ }\n+      while (sx <= sxe);\n+      bx = b->_x;\n+      bxe = bx + n;\n+      if (!*bxe)\n+ {\n+   while (--bxe > bx && !*bxe)\n+     --n;\n+   b->_wds = n;\n+ }\n+    }\n+  return q;\n+}\n+char *\n+_dtoa_r(struct _reent *ptr , double _d , int mode , int ndigits , int *decpt , int *sign , char **rve)\n+{\n+  int bbits, b2, b5, be, dig, i, ieps, ilim, ilim0, ilim1, j, j1, k, k0,\n+    k_check, leftright, m2, m5, s2, s5, spec_case, try_quick;\n+  union double_union d, d2, eps;\n+  long L;\n+  int denorm;\n+  __ULong x;\n+  _Bigint *b, *b1, *delta, *mlo = ((void *)0), *mhi, *S;\n+  double ds;\n+  char *s, *s0;\n+  d.d = _d;\n+  ;\n+  if (((ptr)->_result))\n+    {\n+      ((ptr)->_result)->_k = ((ptr)->_result_k);\n+      ((ptr)->_result)->_maxwds = 1 << ((ptr)->_result_k);\n+      _Bfree (ptr, ((ptr)->_result));\n+      ((ptr)->_result) = 0;\n+    }\n+  if ((d.i[1]) & ((__uint32_t)0x80000000L))\n+    {\n+      *sign = 1;\n+      (d.i[1]) &= ~((__uint32_t)0x80000000L);\n+    }\n+  else\n+    *sign = 0;\n+  if (((d.i[1]) & ((__uint32_t)0x7ff00000L)) == ((__uint32_t)0x7ff00000L))\n+    {\n+      *decpt = 9999;\n+      s =\n+ !(d.i[0]) && !((d.i[1]) & 0xfffff) ? \"Infinity\" :\n+ \"NaN\";\n+      if (rve)\n+ *rve =\n+   s[3] ? s + 8 :\n+   s + 3;\n+      return s;\n+    }\n+  if (!d.d)\n+    {\n+      *decpt = 1;\n+      s = \"0\";\n+      if (rve)\n+ *rve = s + 1;\n+      return s;\n+    }\n+  b = __d2b (ptr, d.d, &be, &bbits);\n+  if ((i = (int) ((d.i[1]) >> 20 & (((__uint32_t)0x7ff00000L) >> 20))) != 0)\n+    {\n+      d2.d = d.d;\n+      (d2.i[1]) &= ((__uint32_t)0xfffffL);\n+      (d2.i[1]) |= ((__uint32_t)0x3ff00000L);\n+      i -= 1023;\n+      denorm = 0;\n+    }\n+  else\n+    {\n+      i = bbits + be + (1023 + (53 - 1) - 1);\n+      x = (i > 32) ? ((d.i[1]) << (64 - i)) | ((d.i[0]) >> (i - 32))\n+       : ((d.i[0]) << (32 - i));\n+      d2.d = x;\n+      (d2.i[1]) -= 31 * ((__uint32_t)0x100000L);\n+      i -= (1023 + (53 - 1) - 1) + 1;\n+      denorm = 1;\n+    }\n+  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;\n+  k = (int) ds;\n+  if (ds < 0. && ds != k)\n+    k--;\n+  k_check = 1;\n+  if (k >= 0 && k <= 22)\n+    {\n+      if (d.d < __mprec_tens[k])\n+ k--;\n+      k_check = 0;\n+    }\n+  j = bbits - i - 1;\n+  if (j >= 0)\n+    {\n+      b2 = 0;\n+      s2 = j;\n+    }\n+  else\n+    {\n+      b2 = -j;\n+      s2 = 0;\n+    }\n+  if (k >= 0)\n+    {\n+      b5 = 0;\n+      s5 = k;\n+      s2 += k;\n+    }\n+  else\n+    {\n+      b2 -= k;\n+      b5 = -k;\n+      s5 = 0;\n+    }\n+  if (mode < 0 || mode > 9)\n+    mode = 0;\n+  try_quick = 1;\n+  if (mode > 5)\n+    {\n+      mode -= 4;\n+      try_quick = 0;\n+    }\n+  leftright = 1;\n+  ilim = ilim1 = -1;\n+  switch (mode)\n+    {\n+    case 0:\n+    case 1:\n+      i = 18;\n+      ndigits = 0;\n+      break;\n+    case 2:\n+      leftright = 0;\n+    case 4:\n+      if (ndigits <= 0)\n+ ndigits = 1;\n+      ilim = ilim1 = i = ndigits;\n+      break;\n+    case 3:\n+      leftright = 0;\n+    case 5:\n+      i = ndigits + k + 1;\n+      ilim = i;\n+      ilim1 = i - 1;\n+      if (i <= 0)\n+ i = 1;\n+    }\n+  j = sizeof (__ULong);\n+  for (((ptr)->_result_k) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;\n+       j <<= 1)\n+    ((ptr)->_result_k)++;\n+  ((ptr)->_result) = _Balloc (ptr, ((ptr)->_result_k));\n+  s = s0 = (char *) ((ptr)->_result);\n+  if (ilim >= 0 && ilim <= 14 && try_quick)\n+    {\n+      i = 0;\n+      d2.d = d.d;\n+      k0 = k;\n+      ilim0 = ilim;\n+      ieps = 2;\n+      if (k > 0)\n+ {\n+   ds = __mprec_tens[k & 0xf];\n+   j = k >> 4;\n+   if (j & 0x10)\n+     {\n+       j &= 0x10 - 1;\n+       d.d /= __mprec_bigtens[5 - 1];\n+       ieps++;\n+     }\n+   for (; j; j >>= 1, i++)\n+     if (j & 1)\n+       {\n+  ieps++;\n+  ds *= __mprec_bigtens[i];\n+       }\n+   d.d /= ds;\n+ }\n+      else if ((j1 = -k) != 0)\n+ {\n+   d.d *= __mprec_tens[j1 & 0xf];\n+   for (j = j1 >> 4; j; j >>= 1, i++)\n+     if (j & 1)\n+       {\n+  ieps++;\n+  d.d *= __mprec_bigtens[i];\n+       }\n+ }\n+      if (k_check && d.d < 1. && ilim > 0)\n+ {\n+   if (ilim1 <= 0)\n+     goto fast_failed;\n+   ilim = ilim1;\n+   k--;\n+   d.d *= 10.;\n+   ieps++;\n+ }\n+      eps.d = ieps * d.d + 7.;\n+      (eps.i[1]) -= (53 - 1) * ((__uint32_t)0x100000L);\n+      if (ilim == 0)\n+ {\n+   S = mhi = 0;\n+   d.d -= 5.;\n+   if (d.d > eps.d)\n+     goto one_digit;\n+   if (d.d < -eps.d)\n+     goto no_digits;\n+   goto fast_failed;\n+ }\n+      if (leftright)\n+ {\n+   eps.d = 0.5 / __mprec_tens[ilim - 1] - eps.d;\n+   for (i = 0;;)\n+     {\n+       L = d.d;\n+       d.d -= L;\n+       *s++ = '0' + (int) L;\n+       if (d.d < eps.d)\n+  goto ret1;\n+       if (1. - d.d < eps.d)\n+  goto bump_up;\n+       if (++i >= ilim)\n+  break;\n+       eps.d *= 10.;\n+       d.d *= 10.;\n+     }\n+ }\n+      else\n+ {\n+   eps.d *= __mprec_tens[ilim - 1];\n+   for (i = 1;; i++, d.d *= 10.)\n+     {\n+       L = d.d;\n+       d.d -= L;\n+       *s++ = '0' + (int) L;\n+       if (i == ilim)\n+  {\n+    if (d.d > 0.5 + eps.d)\n+      goto bump_up;\n+    else if (d.d < 0.5 - eps.d)\n+      {\n+        while (*--s == '0');\n+        s++;\n+        goto ret1;\n+      }\n+    break;\n+  }\n+     }\n+ }\n+    fast_failed:\n+      s = s0;\n+      d.d = d2.d;\n+      k = k0;\n+      ilim = ilim0;\n+    }\n+  if (be >= 0 && k <= 14)\n+    {\n+      ds = __mprec_tens[k];\n+      if (ndigits < 0 && ilim <= 0)\n+ {\n+   S = mhi = 0;\n+   if (ilim < 0 || d.d <= 5 * ds)\n+     goto no_digits;\n+   goto one_digit;\n+ }\n+      for (i = 1;; i++)\n+ {\n+   L = d.d / ds;\n+   d.d -= L * ds;\n+   *s++ = '0' + (int) L;\n+   if (i == ilim)\n+     {\n+       d.d += d.d;\n+             if ((d.d > ds) || ((d.d == ds) && (L & 1)))\n+  {\n+  bump_up:\n+    while (*--s == '9')\n+      if (s == s0)\n+        {\n+   k++;\n+   *s = '0';\n+   break;\n+        }\n+    ++*s++;\n+  }\n+       break;\n+     }\n+   if (!(d.d *= 10.))\n+     break;\n+ }\n+      goto ret1;\n+    }\n+  m2 = b2;\n+  m5 = b5;\n+  mhi = mlo = 0;\n+  if (leftright)\n+    {\n+      if (mode < 2)\n+ {\n+   i =\n+     denorm ? be + (1023 + (53 - 1) - 1 + 1) :\n+     1 + 53 - bbits;\n+ }\n+      else\n+ {\n+   j = ilim - 1;\n+   if (m5 >= j)\n+     m5 -= j;\n+   else\n+     {\n+       s5 += j -= m5;\n+       b5 += j;\n+       m5 = 0;\n+     }\n+   if ((i = ilim) < 0)\n+     {\n+       m2 -= i;\n+       i = 0;\n+     }\n+ }\n+      b2 += i;\n+      s2 += i;\n+      mhi = __i2b (ptr, 1);\n+    }\n+  if (m2 > 0 && s2 > 0)\n+    {\n+      i = m2 < s2 ? m2 : s2;\n+      b2 -= i;\n+      m2 -= i;\n+      s2 -= i;\n+    }\n+  if (b5 > 0)\n+    {\n+      if (leftright)\n+ {\n+   if (m5 > 0)\n+     {\n+       mhi = __pow5mult (ptr, mhi, m5);\n+       b1 = __multiply (ptr, mhi, b);\n+       _Bfree (ptr, b);\n+       b = b1;\n+     }\n+         if ((j = b5 - m5) != 0)\n+     b = __pow5mult (ptr, b, j);\n+ }\n+      else\n+ b = __pow5mult (ptr, b, b5);\n+    }\n+  S = __i2b (ptr, 1);\n+  if (s5 > 0)\n+    S = __pow5mult (ptr, S, s5);\n+  spec_case = 0;\n+  if (mode < 2)\n+    {\n+      if (!(d.i[0]) && !((d.i[1]) & ((__uint32_t)0xfffffL))\n+   && (d.i[1]) & ((__uint32_t)0x7ff00000L)\n+ )\n+ {\n+   b2 += 1;\n+   s2 += 1;\n+   spec_case = 1;\n+ }\n+    }\n+  if ((i = ((s5 ? 32 - __hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)\n+    i = 32 - i;\n+  if (i > 4)\n+    {\n+      i -= 4;\n+      b2 += i;\n+      m2 += i;\n+      s2 += i;\n+    }\n+  else if (i < 4)\n+    {\n+      i += 28;\n+      b2 += i;\n+      m2 += i;\n+      s2 += i;\n+    }\n+  if (b2 > 0)\n+    b = __lshift (ptr, b, b2);\n+  if (s2 > 0)\n+    S = __lshift (ptr, S, s2);\n+  if (k_check)\n+    {\n+      if (__mcmp (b, S) < 0)\n+ {\n+   k--;\n+   b = __multadd (ptr, b, 10, 0);\n+   if (leftright)\n+     mhi = __multadd (ptr, mhi, 10, 0);\n+   ilim = ilim1;\n+ }\n+    }\n+  if (ilim <= 0 && mode > 2)\n+    {\n+      if (ilim < 0 || __mcmp (b, S = __multadd (ptr, S, 5, 0)) <= 0)\n+ {\n+ no_digits:\n+   k = -1 - ndigits;\n+   goto ret;\n+ }\n+    one_digit:\n+      *s++ = '1';\n+      k++;\n+      goto ret;\n+    }\n+  if (leftright)\n+    {\n+      if (m2 > 0)\n+ mhi = __lshift (ptr, mhi, m2);\n+      mlo = mhi;\n+      if (spec_case)\n+ {\n+   mhi = _Balloc (ptr, mhi->_k);\n+   memcpy((char *)&mhi->_sign, (char *)&mlo->_sign, mlo->_wds*sizeof(long) + 2*sizeof(int));\n+   mhi = __lshift (ptr, mhi, 1);\n+ }\n+      for (i = 1;; i++)\n+ {\n+   dig = quorem (b, S) + '0';\n+   j = __mcmp (b, mlo);\n+   delta = __mdiff (ptr, S, mhi);\n+   j1 = delta->_sign ? 1 : __mcmp (b, delta);\n+   _Bfree (ptr, delta);\n+   if (j1 == 0 && !mode && !((d.i[0]) & 1))\n+     {\n+       if (dig == '9')\n+  goto round_9_up;\n+       if (j > 0)\n+  dig++;\n+       *s++ = dig;\n+       goto ret;\n+     }\n+         if ((j < 0) || ((j == 0) && !mode\n+       && !((d.i[0]) & 1)\n+           ))\n+     {\n+       if (j1 > 0)\n+  {\n+    b = __lshift (ptr, b, 1);\n+    j1 = __mcmp (b, S);\n+                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))\n+        && dig++ == '9')\n+      goto round_9_up;\n+  }\n+       *s++ = dig;\n+       goto ret;\n+     }\n+   if (j1 > 0)\n+     {\n+       if (dig == '9')\n+  {\n+  round_9_up:\n+    *s++ = '9';\n+    goto roundoff;\n+  }\n+       *s++ = dig + 1;\n+       goto ret;\n+     }\n+   *s++ = dig;\n+   if (i == ilim)\n+     break;\n+   b = __multadd (ptr, b, 10, 0);\n+   if (mlo == mhi)\n+     mlo = mhi = __multadd (ptr, mhi, 10, 0);\n+   else\n+     {\n+       mlo = __multadd (ptr, mlo, 10, 0);\n+       mhi = __multadd (ptr, mhi, 10, 0);\n+     }\n+ }\n+    }\n+  else\n+    for (i = 1;; i++)\n+      {\n+ *s++ = dig = quorem (b, S) + '0';\n+ if (i >= ilim)\n+   break;\n+ b = __multadd (ptr, b, 10, 0);\n+      }\n+  b = __lshift (ptr, b, 1);\n+  j = __mcmp (b, S);\n+  if ((j > 0) || ((j == 0) && (dig & 1)))\n+    {\n+    roundoff:\n+      while (*--s == '9')\n+ if (s == s0)\n+   {\n+     k++;\n+     *s++ = '1';\n+     goto ret;\n+   }\n+      ++*s++;\n+    }\n+  else\n+    {\n+      while (*--s == '0');\n+      s++;\n+    }\n+ret:\n+  _Bfree (ptr, S);\n+  if (mhi)\n+    {\n+      if (mlo && mlo != mhi)\n+ _Bfree (ptr, mlo);\n+      _Bfree (ptr, mhi);\n+    }\n+ret1:\n+  _Bfree (ptr, b);\n+  *s = 0;\n+  *decpt = k + 1;\n+  if (rve)\n+    *rve = s;\n+  return s0;\n+}"}]}