{"sha": "34e4536eaf1433a0b364f7f038e5fb2759ce745a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlNDUzNmVhZjE0MzNhMGIzNjRmN2YwMzhlNWZiMjc1OWNlNzQ1YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-05T09:57:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-05T09:57:49Z"}, "message": "re PR middle-end/37286 (gfortran, trunk: ICE subst_stack_regs_pat, at reg-stack.c:1537)\n\n\tPR middle-end/37286\n\t* reg-stack.c (subst_stack_regs_pat) [MINUS, DIV, MULT, PLUS]:\n\tInitialize uninitialized input registers with a NaN.\n\ntestsuite/ChangeLog:\n\n\tPR middle-end/37286\n\t* gfortran.dg/pr37286.f90: New test.\n\nFrom-SVN: r141603", "tree": {"sha": "b697a42591d93cdc1589d01203f88cfe8d6c216a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b697a42591d93cdc1589d01203f88cfe8d6c216a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e4536eaf1433a0b364f7f038e5fb2759ce745a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e4536eaf1433a0b364f7f038e5fb2759ce745a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e4536eaf1433a0b364f7f038e5fb2759ce745a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e4536eaf1433a0b364f7f038e5fb2759ce745a/comments", "author": null, "committer": null, "parents": [{"sha": "8e66def0a1bc07d210f40e5df3e12745c8453043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e66def0a1bc07d210f40e5df3e12745c8453043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e66def0a1bc07d210f40e5df3e12745c8453043"}], "stats": {"total": 184, "additions": 134, "deletions": 50}, "files": [{"sha": "cade56fb79fbddf63edb9c3273ec66bc490b40dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34e4536eaf1433a0b364f7f038e5fb2759ce745a", "patch": "@@ -1,3 +1,9 @@\n+2008-11-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/37286\n+\t* reg-stack.c (subst_stack_regs_pat) [MINUS, DIV, MULT, PLUS]:\n+\tInitialize uninitialized input registers with a NaN.\n+\n 2008-11-05  Tobias Grosser  <grosser@fim.uni-passau.de>\n \n \tPR middle-end/37833\n@@ -38,7 +44,7 @@\n \n 2008-11-03  Mikael Pettersson  <mikpe@it.uu.se>\n \n-        PR target/37989\n+\tPR target/37989\n \t* config/i386/mingw32.h (REAL_LIBGCC_SPEC): Only add libgcc_s.a\n \tor libgcc_eh.a to spec if ENABLE_SHARED_LIBGCC.\n \n@@ -47,7 +53,7 @@\n \t* config/mips.c (mips_conditional_register_usage):  Handle the\n \tDSP control register.\n \t* doc/extend.texi: Document the DSP control register.\n-\t\t\t    \n+\n 2008-11-03  Steve Ellcey <sje@cup.hp.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n \n@@ -404,16 +410,14 @@\n 2008-10-27  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/37813\n-\t* ira-conflicts.c (process_regs_for_copy): Remove class subset\n-\tcheck.\n+\t* ira-conflicts.c (process_regs_for_copy): Remove class subset check.\n \n \t* ira-int.h (ira_hard_regno_cover_class): New.\n \n \t* ira-lives.c (mark_reg_live, mark_reg_dead,\n \tprocess_bb_node_lives): Use ira_hard_regno_cover_class.\n \n-\t* ira.c (reg_class ira_hard_regno_cover_class): New global\n-\tvariable.\n+\t* ira.c (reg_class ira_hard_regno_cover_class): New global variable.\n \t(setup_hard_regno_cover_class): New function.\n \t(ira_init): Call setup_hard_regno_cover_class.\n \n@@ -431,8 +435,8 @@\n 2008-10-26  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/37316\n-\t* pa.c (function_arg_padding):  Pad complex and vector types upward in\n-\t64-bit runtime.\n+\t* pa.c (function_arg_padding):  Pad complex and vector types\n+\tupward in 64-bit runtime.\n \t(function_arg): Use BLKmode for PARALLEL in 64-bit runtime.\n \n 2008-10-26  Matthias Klose  <doko@ubuntu.com>\n@@ -453,8 +457,7 @@\n \t* doc/tm.texi (FUNCTION_ARG_OFFSET): Document new macro.\n \n \t* config/spu/spu.h (FUNCTION_ARG_OFFSET): New macro to move char\n-\tand short arguments to the correct location as mandated by the\n-\tABI.\n+\tand short arguments to the correct location as mandated by the ABI.\n \n 2008-10-24  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n@@ -500,8 +503,7 @@\n \tcheck_p_tool, check_p_vars, check_p_subno, check_p_comma,\n \tcheck_p_subwork, check_p_numbers, check_p_subdir, check_p_subdirs):\n \tNew variables.\n-\t(check-subtargets, check-%-subtargets, check-parallel-%): New\n-\ttargets.\n+\t(check-subtargets, check-%-subtargets, check-parallel-%): New targets.\n \t(check-%): For test targets listed in lang_checks_parallelized\n \tif -j is used and RUNTESTFLAGS doesn't specify tests to execute,\n \trun the testing in multiple make goals, possibly parallel, and\n@@ -740,8 +742,7 @@\n \n 2008-10-15  Jan Hubicka  <jh@suse.cz>\n \n-\t* ira-emit.c (change_regs): Return false when replacing reg by\n-\titself.\n+\t* ira-emit.c (change_regs): Return false when replacing reg by itself.\n \n 2008-10-14  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -942,8 +943,8 @@\n \tDefine new target hooks.\n \t(TARGET_SCHED_GEN_CHECK): Rename to TARGET_SCHED_GEN_SPEC_CHECK.\n \t(ia64_optimization_options): Turn on selective scheduling with -O3,\n-\tdisable -fauto-inc-dec. Set mflag_sched_control_spec to true by default\n-\twith selective scheduling.\n+\tdisable -fauto-inc-dec. Set mflag_sched_control_spec to true by\n+\tdefault with selective scheduling.\n \t(ia64_override_options): Initialize align_loops and align_functions\n \tto 32 and 64, respectively.  Set global selective scheduling flags\n \taccording to target-dependent flags.\n@@ -1005,8 +1006,8 @@\n \t(final_emit_insn_group_barriers): Emit stop bits before insns starting\n \ta new cycle.\n \t(sel2_run): New variable.\n-\t(ia64_reorg): When flag_selective_scheduling2 is set, run the selective\n-\tscheduling pass instead of schedule_ebbs.\n+\t(ia64_reorg): When flag_selective_scheduling2 is set, run the\n+\tselective scheduling pass instead of schedule_ebbs.\n \t\n \t* config/ia64/ia64.md (speculable1, speculable2): New attributes.\n \t(UNSPEC_LDS_A): New UNSPEC.\n@@ -1077,8 +1078,8 @@\n \t* config/rs6000/rs6000.h (FINAL_PRESCAN_INSN): Define.\n \t* config/rs6000/rs6000.md\n \tReplace cc_reg_not_cr0_operand with cc_reg_not_micro_cr0_operand if\n-\tthe instruction would have been microcoded on the Cell.  Set cell_micro\n-\tto always on unnamed patterns for the string instructions.\n+\tthe instruction would have been microcoded on the Cell.  Set\n+\tcell_micro to always on unnamed patterns for the string instructions.\n \t(cell_micro): Update definition, remove load/store conditional\n \tmicrocoded.\n \t(sign_extend:DI): Define new pattern for non microcoded version.\n@@ -1380,8 +1381,8 @@\n \t* pa.md (call, call_value): Generate an rtx for register r4 and pass\n \tit to PIC call patterns.\n \t(call_symref_pic): Revise pattern to expose PIC register save.  Remove\n-\tcode generation and attributes from pattern.  Change peephole2 to split\n-\tfor noreturn case.  Revise split pattern for non noreturn case.\n+\tcode generation and attributes from pattern.  Change peephole2 to\n+\tsplit for noreturn case.  Revise split pattern for non noreturn case.\n \t(call_symref_64bit, call_reg_pic, call_reg_64bit, call_val_symref_pic,\n \tcall_val_symref_64bit, call_val_reg_pic, call_val_reg_64bit): Likewise.\n \t* pa.c (attr_length_call): Simplify extraction of call rtx.  Add some\n@@ -1507,8 +1508,8 @@\n \t* tree.h (get_object_alignment): Declare.\n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Call\n \tget_object_alignment if needed.\n-\t* builtins.c (get_pointer_alignment): Move ADDR_EXPR operand handling\n-\tto ...\n+\t* builtins.c (get_pointer_alignment): Move ADDR_EXPR operand\n+\thandling to ...\n \t(get_object_alignment): ... here.  New function.  Try harder to\n \tdetermine alignment from get_inner_reference returned offset.\n "}, {"sha": "0cde0cbc26ed09d657d6f467ff642bf49d1ebf29", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=34e4536eaf1433a0b364f7f038e5fb2759ce745a", "patch": "@@ -1527,15 +1527,30 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t    else\n \t      {\n \t\t/* Both operands are REG.  If neither operand is already\n-\t\t   at the top of stack, choose to make the one that is the dest\n-\t\t   the new top of stack.  */\n+\t\t   at the top of stack, choose to make the one that is the\n+\t\t   dest the new top of stack.  */\n \n \t\tint src1_hard_regnum, src2_hard_regnum;\n \n \t\tsrc1_hard_regnum = get_hard_regnum (regstack, *src1);\n \t\tsrc2_hard_regnum = get_hard_regnum (regstack, *src2);\n-\t\tgcc_assert (src1_hard_regnum != -1);\n-\t\tgcc_assert (src2_hard_regnum != -1);\n+\n+\t\t/* If the source is not live, this is yet another case of\n+\t\t   uninitialized variables.  Load up a NaN instead.  */\n+\t\tif (src1_hard_regnum == -1)\n+\t\t  {\n+\t\t    rtx pat2 = gen_rtx_CLOBBER (VOIDmode, *src1);\n+\t\t    rtx insn2 = emit_insn_before (pat2, insn);\n+\t\t    control_flow_insn_deleted\n+\t\t      |= move_nan_for_stack_reg (insn2, regstack, *src1);\n+\t\t  }\n+\t\tif (src2_hard_regnum == -1)\n+\t\t  {\n+\t\t    rtx pat2 = gen_rtx_CLOBBER (VOIDmode, *src2);\n+\t\t    rtx insn2 = emit_insn_before (pat2, insn);\n+\t\t    control_flow_insn_deleted\n+\t\t      |= move_nan_for_stack_reg (insn2, regstack, *src2);\n+\t\t  }\n \n \t\tif (src1_hard_regnum != FIRST_STACK_REG\n \t\t    && src2_hard_regnum != FIRST_STACK_REG)"}, {"sha": "252227899f7280d5a3afc2f707072c00a30a313a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34e4536eaf1433a0b364f7f038e5fb2759ce745a", "patch": "@@ -1,7 +1,12 @@\n+2008-11-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/37286\n+\t* gfortran.dg/pr37286.f90: New test.\n+\n 2008-11-04  Paul Thomas  <pault@gcc.gnu.org>\n \n-        PR fortran/37597\n-        * gfortran.dg/host_assoc_call_5.f90: New test.\n+\tPR fortran/37597\n+\t* gfortran.dg/host_assoc_call_5.f90: New test.\n \n 2008-11-04  Jakub Jelinek  <jakub@redhat.com>\n \t    Andrew Pinski  <andrew_pinski@playstation.sony.com>\n@@ -274,22 +279,22 @@\n \t* gcc.target/bfin/hisilh-O0.c: New file.\n \n \tFrom Mike Frysinger  <michael.frysinger@analog.com>\n-\t* gcc.target/bfin/mcpu-bf522.c: Check SILICON_REVISION is 0x0002.  Invert\n-\tcheck for __WORKAROUND_RETS when SILICON_REVISION is 0x0002+.\n+\t* gcc.target/bfin/mcpu-bf522.c: Check SILICON_REVISION is 0x0002.\n+\tInvert check for __WORKAROUND_RETS when SILICON_REVISION is 0x0002+.\n \t* gcc.target/bfin/mcpu-bf523.c: Likewise.\n \t* gcc.target/bfin/mcpu-bf524.c: Likewise.\n \t* gcc.target/bfin/mcpu-bf525.c: Likewise.\n \t* gcc.target/bfin/mcpu-bf526.c: Likewise.\n \t* gcc.target/bfin/mcpu-bf527.c: Likewise.\n-\t* gcc.target/bfin/mcpu-bf531.c: Check SILICON_REVISION is 0x0006.  Invert\n-\tcheck for __WORKAROUND_RETS when SILICON_REVISION is 0x0006+.\n+\t* gcc.target/bfin/mcpu-bf531.c: Check SILICON_REVISION is 0x0006.\n+\tInvert check for __WORKAROUND_RETS when SILICON_REVISION is 0x0006+.\n \t* gcc.target/bfin/mcpu-bf532.c: Likewise.\n \t* gcc.target/bfin/mcpu-bf533.c: Likewise.\n-\t* gcc.target/bfin/mcpu-bf538.c: Check SILICON_REVISION is 0x0005.  Invert\n-\tcheck for __WORKAROUND_RETS when SILICON_REVISION is 0x0005+.\n+\t* gcc.target/bfin/mcpu-bf538.c: Check SILICON_REVISION is 0x0005.\n+\tInvert check for __WORKAROUND_RETS when SILICON_REVISION is 0x0005+.\n \t* gcc.target/bfin/mcpu-bf539.c: Likewise.\n-\t* gcc.target/bfin/mcpu-bf542.c: Check SILICON_REVISION is 0x0002.  Invert\n-\tcheck for __WORKAROUND_RETS when SILICON_REVISION is 0x0002+.\n+\t* gcc.target/bfin/mcpu-bf542.c: Check SILICON_REVISION is 0x0002.\n+\tInvert check for __WORKAROUND_RETS when SILICON_REVISION is 0x0002+.\n \t* gcc.target/bfin/mcpu-bf544.c: Likewise.\n \t* gcc.target/bfin/mcpu-bf547.c: Likewise.\n \t* gcc.target/bfin/mcpu-bf548.c: Likewise.\n@@ -3192,8 +3197,8 @@\n \n 2008-08-24  Daniel Kraft  <d@domob.eu>\n \n-\t* gfortran.dg/finalize_5.f03:  Adapted expected error message to changes\n-\tto handling of CONTAINS in derived-type declarations.\n+\t* gfortran.dg/finalize_5.f03:  Adapted expected error message to\n+\tchanges to handling of CONTAINS in derived-type declarations.\n \t* gfortran.dg/typebound_proc_1.f08:  New test.\n \t* gfortran.dg/typebound_proc_2.f90:  New test.\n \t* gfortran.dg/typebound_proc_3.f03:  New test.\n@@ -7000,11 +7005,16 @@\n 2008-05-08  Rafael Esp\u00edndola  <espindola@google.com>\n \n \t* gcc.dg/vect/vect-111.c: Rename to no-trapping-math-vect-111.c\n-\t* gcc.dg/vect/vect-ifcvt-11.c: Rename to no-trapping-math-vect-ifcvt-11.c\n-\t* gcc.dg/vect/vect-ifcvt-12.c: Rename to no-trapping-math-vect-ifcvt-12.c\n-\t* gcc.dg/vect/vect-ifcvt-13.c: Rename to no-trapping-math-vect-ifcvt-13.c\n-\t* gcc.dg/vect/vect-ifcvt-14.c: Rename to no-trapping-math-vect-ifcvt-14.c\n-\t* gcc.dg/vect/vect-ifcvt-15.c: Rename to no-trapping-math-vect-ifcvt-15.c\n+\t* gcc.dg/vect/vect-ifcvt-11.c: Rename to\n+\tno-trapping-math-vect-ifcvt-11.c\n+\t* gcc.dg/vect/vect-ifcvt-12.c: Rename to\n+\tno-trapping-math-vect-ifcvt-12.c\n+\t* gcc.dg/vect/vect-ifcvt-13.c: Rename to\n+\tno-trapping-math-vect-ifcvt-13.c\n+\t* gcc.dg/vect/vect-ifcvt-14.c: Rename to\n+\tno-trapping-math-vect-ifcvt-14.c\n+\t* gcc.dg/vect/vect-ifcvt-15.c: Rename to\n+\tno-trapping-math-vect-ifcvt-15.c\n \n 2008-05-08  David Daney  <ddaney@avtrex.com>\n \n@@ -9083,8 +9093,7 @@\n \tgfortran.dg/fmt_t_5.f90, gfortran.dg/namelist_12.f,\n \tgfortran.dg/backspace_7.f90, gfortran.dg/write_rewind_2.f,\n \tgfortran.dg/ftell_1.f90, gfortran.dg/fseek.f90,\n-\tgfortran.dg/write_back.f: Gate test on effective_target\n-\tfd_truncate.\n+\tgfortran.dg/write_back.f: Gate test on effective_target fd_truncate.\n \n 2008-03-04  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -10493,7 +10502,8 @@\n \n 2008-01-18  Tobias Burnus  <burnus@net-b.de>\n \n-\t* gfortran.dg/large_real_kind_form_io_1.f90: Enlarge string for internal I/O.\n+\t* gfortran.dg/large_real_kind_form_io_1.f90: Enlarge string for\n+\tinternal I/O.\n \n 2008-01-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n@@ -11049,8 +11059,8 @@\n 2008-01-02  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/34562\n-\t* g++.dg/other/first-global.C: Also accept _GLOBAL__I_65535_0_foobar in\n-\tscan-assembler check.\n+\t* g++.dg/other/first-global.C: Also accept _GLOBAL__I_65535_0_foobar\n+\tin scan-assembler check.\n \n 2008-01-03  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "75c6814415c65f178707a1c9f32ce63e203e36f9", "filename": "gcc/testsuite/gfortran.dg/pr37286.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr37286.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e4536eaf1433a0b364f7f038e5fb2759ce745a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr37286.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr37286.f90?ref=34e4536eaf1433a0b364f7f038e5fb2759ce745a", "patch": "@@ -0,0 +1,58 @@\n+! { dg-do compile }\n+\n+module general_rand\n+  implicit none\n+  private\n+\n+  integer, public, parameter :: GNDP = kind(1.0d0)\n+\n+  real(kind = GNDP), save :: &\n+    gnc = 362436.0 / 16777216.0, &\n+    gncd = 7654321.0 / 16777216.0, &\n+    gncm = 16777213.0 / 16777216.0\n+  integer, save :: &\n+    gni97 = 97, &\n+    gnj97 = 33\n+\n+  real(kind = GNDP), save :: gnu(97)\n+\n+contains\n+  subroutine gn_fatal(message)\n+    character(len = *), intent(in) :: message\n+\n+    stop 1 \n+  end subroutine gn_fatal\n+\n+  function gn_monte_rand(min, max) result(monte)\n+    real(kind = GNDP), intent(in) :: min \n+    real(kind = GNDP), intent(in) :: max\n+    real(kind = GNDP) :: monte\n+\n+    real :: monte_temp\n+\n+    if (min > max) then\n+      call gn_fatal('gn_monte_rand: min > max')\n+    else if (min == max) then\n+      call gn_fatal('gn_monte_rand: min = max: returning min')\n+      monte_temp = min\n+    else\n+\n+      monte_temp = gnu(gni97) - gnu(gnj97)\n+      if (monte_temp < 0.0) then\n+        monte_temp = monte_temp + 1.0\n+      end if\n+\n+      gnu(gni97) = monte_temp\n+      gni97 = gni97 - 1\n+      if (gni97 == 0) then\n+        gni97 = 97\n+      end if\n+    end if\n+\n+    monte = min + monte_temp * (max - min)\n+\n+  end function gn_monte_rand\n+\n+end module general_rand\n+\n+! { dg-final { cleanup-modules \"general_rand\" } }"}]}