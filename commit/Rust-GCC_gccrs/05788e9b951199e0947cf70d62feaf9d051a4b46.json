{"sha": "05788e9b951199e0947cf70d62feaf9d051a4b46", "node_id": "C_kwDOANBUbNoAKDA1Nzg4ZTliOTUxMTk5ZTA5NDdjZjcwZDYyZmVhZjlkMDUxYTRiNDY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-06T11:05:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-06T11:05:22Z"}, "message": "Daily bump.", "tree": {"sha": "0d8f78e610943007f7d111dbfa230ab74ab51865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d8f78e610943007f7d111dbfa230ab74ab51865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05788e9b951199e0947cf70d62feaf9d051a4b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05788e9b951199e0947cf70d62feaf9d051a4b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05788e9b951199e0947cf70d62feaf9d051a4b46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05788e9b951199e0947cf70d62feaf9d051a4b46/comments", "author": null, "committer": null, "parents": [{"sha": "2175b3976f66e9c34900b3dcca8c7b706e24f457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2175b3976f66e9c34900b3dcca8c7b706e24f457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2175b3976f66e9c34900b3dcca8c7b706e24f457"}], "stats": {"total": 617, "additions": 616, "deletions": 1}, "files": [{"sha": "7222e2bd9484f1e5e5aaef499f39dae60cb171a5", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,8 @@\n+2022-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-changelog/git_update_version.py: Add\n+\te4cba49413ca429dc82f6aa2e88129ecb3fdd943 to ignored commits.\n+\n 2022-10-20  Jonathan Wakely   <jwakely@redhat.com>\n \t    Ulrich Drepper  <drepper@redhat.com>\n "}, {"sha": "9f89f46c8887a8a422f441606ac86a96ac6d0e4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,166 @@\n+2022-11-06  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/loongarch.md (UNSPEC_FCOPYSIGN): New unspec.\n+\t(type): Add fcopysign.\n+\t(copysign<mode>3): New instruction template.\n+\n+2022-11-06  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* multiple_target.cc (expand_target_clones): Free memory.\n+\n+2022-11-06  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* cgraph.cc (cgraph_node::make_local): Remove redundant set_section.\n+\t* multiple_target.cc (create_dispatcher_calls): Likewise.\n+\n+2022-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c/41041\n+\t* doc/cppopts.texi: Document -fwide-exec-charset defaults\n+\tcorrectly.\n+\n+2022-11-05  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* common.opt (fmultiflags): New.\n+\t* doc/invoke.texi: Document it.\n+\t* gcc.cc (driver_self_specs): Discard it.\n+\t* opts.cc (common_handle_option): Ignore it in the driver.\n+\n+2022-11-04  Jeff Chapman II  <jchapman@lock3software.com>\n+\t    Jason Merrill   <jason@redhat.com>\n+\n+\t* input.cc (get_source_text_between): New fn.\n+\t* input.h (get_source_text_between): Declare.\n+\n+2022-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107342\n+\t* range-op.cc (operator_mult::fold_range): New.\n+\t(operator_div::fold_range): New.\n+\n+2022-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.cc (operand_compare::operand_equal_p) <COMPONENT_REF>:\n+\tDo not take into account operand 2.\n+\t(operand_compare::hash_operand) <COMPONENT_REF>: Likewise.\n+\n+2022-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.cc (emit_group_store): Do not use subword paradoxical subregs\n+\n+2022-11-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-sve2.md: Fix typo in Cryptographic\n+\textensions comment.\n+\n+2022-11-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* Makefile.in (OBJS): Remove 'dbxout.o'.\n+\t* config/nvptx/nvptx.cc: Don't '#include \"dbxout.h\"'.\n+\t* dbxout.cc: Remove.\n+\t* dbxout.h: Likewise.\n+\t* target-def.h (TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR):\n+\tDefault to 'default_asm_out_constructor',\n+\t'default_asm_out_destructor'.\n+\t* targhooks.cc (default_asm_out_constructor)\n+\t(default_asm_out_destructor): New.\n+\t* targhooks.h (default_asm_out_constructor)\n+\t(default_asm_out_destructor): Declare.\n+\n+2022-11-04  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* Makefile.in (OBJS): Add 'dbxout.o'.\n+\t* config/nvptx/nvptx.cc: '#include \"dbxout.h\"'.\n+\t* dbxout.cc: New.\n+\t* dbxout.h: Likewise.\n+\t* target-def.h (TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR):\n+\tDefault to 'default_stabs_asm_out_constructor',\n+\t'default_stabs_asm_out_destructor'.\n+\n+2022-11-04  Hongyu Wang  <hongyu.wang@intel.com>\n+\t    Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features): Detect\n+\tamx-fp16.\n+\t* common/config/i386/i386-common.cc (OPTION_MASK_ISA2_AMX_FP16_SET,\n+\tOPTION_MASK_ISA2_AMX_FP16_UNSET): New macros.\n+\t(ix86_handle_option): Handle -mamx-fp16.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_AMX_FP16.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n+\tamx-fp16.\n+\t* config.gcc: Add amxfp16intrin.h.\n+\t* config/i386/cpuid.h (bit_AMX_FP16): New.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n+\t__AMX_FP16__.\n+\t* config/i386/i386-isa.def: Add DEF_PTA for AMX_FP16.\n+\t* config/i386/i386-options.cc (isa2_opts): Add -mamx-fp16.\n+\t(ix86_valid_target_attribute_inner_p): Add new ATTR.\n+\t(ix86_option_override_internal): Handle AMX-FP16.\n+\t* config/i386/i386.opt: Add -mamx-fp16.\n+\t* config/i386/immintrin.h: Include amxfp16intrin.h.\n+\t* doc/extend.texi: Document -mamx-fp16.\n+\t* doc/invoke.texi: Document amx-fp16.\n+\t* doc/sourcebuild.texi: Document amx_fp16.\n+\t* config/i386/amxfp16intrin.h: New file.\n+\n+2022-11-04  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_intel_cpu):\n+\tAdd Sierra Forest.\n+\t* common/config/i386/i386-common.cc\n+\t(processor_names): Add Sierra Forest.\n+\t(processor_alias_table): Ditto.\n+\t* common/config/i386/i386-cpuinfo.h\n+\t(enum processor_types): Add INTEL_SIERRAFOREST.\n+\t* config.gcc: Add -march=sierraforest.\n+\t* config/i386/driver-i386.cc (host_detect_local_cpu):\n+\tHandle Sierra Forest.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal):\n+\tDitto.\n+\t* config/i386/i386-options.cc (m_SIERRAFOREST): New define.\n+\t(processor_cost_table): Add sierra forest.\n+\t* config/i386/i386.h (enum processor_type):\n+\tAdd PROCESSOR_SIERRA_FOREST.\n+\t(PTA_SIERRAFOREST): Ditto.\n+\t* doc/extend.texi: Add sierra forest.\n+\t* doc/invoke.texi: Ditto.\n+\n+2022-11-04  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect cmpccxadd.\n+\t* common/config/i386/i386-common.cc\n+\t(OPTION_MASK_ISA2_CMPCCXADD_SET,\n+\tOPTION_MASK_ISA2_CMPCCXADD_UNSET): New.\n+\t(ix86_handle_option): Handle -mcmpccxadd.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_CMPCCXADD.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n+\tcmpccxadd.\n+\t* config.gcc: Add cmpccxaddintrin.h.\n+\t* config/i386/cpuid.h (bit_CMPCCXADD): New.\n+\t* config/i386/i386-builtin-types.def:\n+\tAdd DEF_FUNCTION_TYPE(INT, PINT, INT, INT, INT)\n+\tand DEF_FUNCTION_TYPE(LONGLONG, PLONGLONG, LONGLONG, LONGLONG, INT).\n+\t* config/i386/i386-builtin.def (BDESC): Add new builtins.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n+\t__CMPCCXADD__.\n+\t* config/i386/i386-expand.cc (ix86_expand_special_args_builtin):\n+\tAdd new parameter to indicate constant position.\n+\tHandle INT_FTYPE_PINT_INT_INT_INT\n+\tand LONGLONG_FTYPE_PLONGLONG_LONGLONG_LONGLONG_INT.\n+\t* config/i386/i386-isa.def (CMPCCXADD): Add DEF_PTA(CMPCCXADD).\n+\t* config/i386/i386-options.cc (isa2_opts): Add -mcmpccxadd.\n+\t(ix86_valid_target_attribute_inner_p): Handle cmpccxadd.\n+\t* config/i386/i386.opt: Add option -mcmpccxadd.\n+\t* config/i386/sync.md (cmpccxadd_<mode>): New define insn.\n+\t* config/i386/x86gprintrin.h: Include cmpccxaddintrin.h.\n+\t* doc/extend.texi: Document cmpccxadd.\n+\t* doc/invoke.texi: Document -mcmpccxadd.\n+\t* doc/sourcebuild.texi: Document target cmpccxadd.\n+\t* config/i386/cmpccxaddintrin.h: New file.\n+\n 2022-11-03  Jason Merrill  <jason@redhat.com>\n \n \t* doc/invoke.texi: -fconcepts no longer implies"}, {"sha": "a9017fbbe6b3313ad3568b305dbcf5a4afa590eb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1 +1 @@\n-20221104\n+20221106"}, {"sha": "4b0877b2de54b5c9d345ee3ddb293bffcfc5d977", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,248 @@\n+2022-11-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Skip operand\n+\tvalidity checks for attributes Has_Same_Storage and\n+\tOverlaps_Storage.\n+\n+2022-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* errout.adb (Remove_Warning_Messages.Check_For_Warning): Do not\n+\treinstate the Original_Node in the tree.\n+\t* exp_aggr.adb (Build_Array_Aggr_Code.Gen_Loop): Copy the bounds\n+\ton all paths.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/g-excact.ads\n+\t(Register_Global_Action): Refill comment.\n+\t(Name_To_Id): Change pragma Restriction from singular to plural.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): Remove redundant guard, as it\n+\tis implied by a preceding call to Referenced_Check_Spec.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): Remove useless query for \"spec\"\n+\tof a variable; refactor nested if-statements into a single\n+\tcondition.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb\n+\t(In_Pragma_Expression): Add standard guard against searching too\n+\tfar.\n+\t(In_Quantified_Expression): Likewise.\n+\t* sem_warn.adb\n+\t(May_Need_Initialized_Actual): Remove redundant parens.\n+\t(Check_References): Remove guard that duplicates a condition from\n+\tthe enclosing if-statement; only assign E1T variable when\n+\tnecessary.\n+\t(Within_Postcondition): Fix layout.\n+\t(No_Warn_On_In_Out): Balance parens in comment.\n+\n+2022-11-04  Steve Baird  <baird@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add the standard\n+\t'... \"On\" enables this extension.' sentence to the description of\n+\tstatic intrinsic functions.\n+\t* sem_ch13.adb\n+\t(Analyze_Aspect_Spec): In the call to Error_Msg_GNAT_Extension for\n+\ta Static aspect specification for an intrinsic function, specify\n+\tIs_Core_Extension => True.\n+\t* sem_eval.adb\n+\t(Eval_Intrinsic_Call): Test Core_Extensions_Allowed instead of\n+\ttesting All_Extensions_Allowed.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* aspects.adb (Relocate_Aspect): Remove call to Set_Has_Aspects.\n+\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): Likewise.\n+\t* sem_util.adb (Copy_Ghost_Aspect, Copy_SPARK_Mode_Aspect):\n+\tLikewise.\n+\n+2022-11-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_intr.adb\n+\t(Expand_Dispatching_Constructor_Call): Report an error on\n+\tunsupported dispatching constructor calls and report a warning on\n+\tcalls that may fail at run time.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb\n+\t(Check_Components): Iterate using\n+\tFirst/Next_Component_Or_Discriminant.\n+\t(Has_Preelaborable_Initialization): Avoid repeated iteration with\n+\tcalls to Check_Components with First_Entity and\n+\tFirst_Private_Entity.\n+\t(Is_Independent_Object_Entity): Tune indentation.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch7.adb (Clear_Constants): Only iterate from First_Entity\n+\tthrough Next_Entity; only examine variables because packages have\n+\tno assignable formal parameters.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Fix\n+\ttypos.\n+\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst: Fix typos\n+\tand refill as necessary; remove trailing whitespace.\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix typos.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-11-04  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_util.ads (Add_Block_Identifier): Add new extra Scope\n+\targument.\n+\t* sem_util.adb (Add_Block_Identifier): Likewise and use this scope\n+\tvariable instead of Current_Scope.\n+\t* exp_util.adb (Wrap_Statements_In_Block): Add new scope argument\n+\tto Add_Block_Identifier call.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Kill_Current_Values): Only iterate from\n+\tFirst_Entity through Next_Entity.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Controlling_Formal): Iterate with First/Next_Formal\n+\tand not with First/Next_Entity.\n+\n+2022-11-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb\n+\t(Expand_Interface_Conversion): Fix typo in comment.\n+\n+2022-11-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb\n+\t(Expand_Interface_Conversion): Under configurable runtime, when\n+\tthe target type is an interface that is an ancestor of the operand\n+\ttype, skip generating code to displace the pointer to reference\n+\tthe target dispatch table.\n+\t* sem_disp.adb\n+\t(Propagate_Tag): Handle class-wide types when checking for the\n+\taddition of an implicit interface conversion.\n+\n+2022-11-04  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* doc/gnat_rm/standard_library_routines.rst: Fix typo.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-11-04  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sa_messages.ads, sa_messages.adb: Remove files.\n+\n+2022-11-04  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* checks.adb, exp_atag.adb, exp_attr.adb, exp_ch4.adb, exp_ch6.adb,\n+\texp_ch7.adb, exp_dbug.adb, exp_disp.adb, exp_unst.adb, exp_util.adb,\n+\tfreeze.adb, layout.adb, pprint.adb, rtsfind.adb, sem_aggr.adb,\n+\tsem_attr.adb, sem_case.adb, sem_ch12.adb, sem_ch13.adb, sem_ch3.adb,\n+\tsem_ch5.adb, sem_ch6.adb, sem_ch8.adb, sem_dim.adb, sem_prag.adb,\n+\tsem_util.adb, sem_warn.adb:\n+\tReplace uses of `not Present (X)` with `No (X)`.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.ads: Fix typos in comments; refill as necessary.\n+\t* sinfo.ads: Likewise.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_aspects.rst: Fix typos.\n+\t* doc/gnat_rm/implementation_defined_attributes.rst: Likewise\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Likewise\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Likewise\n+\t* doc/gnat_rm/standard_library_routines.rst: Likewise.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch8.adb (Restore_Scope_Stack): Remove elements from the head\n+\tand not the tail of an element list.\n+\n+2022-11-04  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* sinfo.ads: Small editorial changes.\n+\n+2022-11-04  Steve Baird  <baird@adacore.com>\n+\n+\t* opt.ads: Replace Ada_Version_Type enumeration literal\n+\tAda_With_Extensions with two literals, Ada_With_Core_Extensions\n+\tand Ada_With_All_Extensions. Update uses of the deleted literal.\n+\tReplace Extensions_Allowed function with two functions:\n+\tAll_Extensions_Allowed and Core_Extensions_Allowed.\n+\t* errout.ads, errout.adb: Add Boolean parameter to\n+\tError_Msg_GNAT_Extension to indicate whether the construct in\n+\tquestion belongs to the curated subset.\n+\t* exp_ch5.adb, par-ch4.adb, sem_case.adb, sem_ch3.adb:\n+\t* sem_ch4.adb, sem_ch5.adb, sem_ch8.adb: Replace calls to\n+\tExtensions_Allowed with calls to Core_Extensions_Allowed for\n+\tconstructs that are in the curated subset.\n+\t* sem_attr.adb, sem_ch13.adb, sem_eval.adb, sem_util.adb: Replace\n+\tcalls to Extensions_Allowed with calls to All_Extensions_Allowed\n+\tfor constructs that are not in the curated subset.\n+\t* par-ch3.adb: Override default for new parameter in calls to\n+\tError_Msg_GNAT_Extension for constructs in the curated subset.\n+\t* par-prag.adb: Add Boolean parameter to Check_Arg_Is_On_Or_Off to\n+\talso allow ALL. Set Opt.Ada_Version appropriately for ALL or ON\n+\targuments.\n+\t* sem_prag.adb: Allowed ALL argument for an Extensions_Allowed\n+\tpragma. Set Opt.Ada_Version appropriately for ALL or ON arguments.\n+\t* switch-c.adb: The -gnatX switch now enables only the curated\n+\tsubset of language extensions (formerly it enabled all of them);\n+\tthe new -gnatX0 switch enables all of them.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument new \"-gnatX0\" switch and update documentation for\n+\t\"-gnatX\" switch.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document new ALL\n+\targument for pragma Extensions_Allowed and update documentation\n+\tfor the ON argument. Delete mention of Ada 2022 Reduce attribute\n+\tas an extension.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2022-11-04  Steve Baird  <baird@adacore.com>\n+\n+\t* bindgen.adb: Introduce two new string constants for the names of\n+\tthe C-String variables that are assigned the names for adainit and\n+\tadafinal. Replace string literals in Gen_CUDA_Init with references\n+\tto these constants. In Gen_CUDA_Defs, generate C-String variable\n+\tdeclarations where these constants are the names of the variables.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch9.adb (Satisfies_Lock_Free_Requirements): Ignore\n+\treferences to global variables inserted due to pragma\n+\tInitialize_Scalars.\n+\n+2022-11-04  Cedric Landet  <landet@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Remove VxWorks\n+\tversion 6.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2022-11-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch9.adb (Satisfies_Lock_Free_Requirements): Detect\n+\treferences via expanded names.\n+\n+2022-11-04  Steve Baird  <baird@adacore.com>\n+\n+\t* bindgen.adb\n+\t(Gen_CUDA_Init): Move existing loop body into a new local\n+\tprocedure, Gen_CUDA_Register_Function_Call, and replace that loop\n+\tbody with a call to this procedure. This first part is just\n+\tsemantics-preserving refactoring. The second part is to add\n+\tGen_CUDA_Register_Function_Call calls after the loop for the\n+\tdevice-side adainit and adafinal procedures.\n+\n 2022-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* libgnat/system-linux-sparc.ads (Support_Atomic_Primitives): New"}, {"sha": "c0ccb0073df6940f49ec8d4e3593a0fbefb3b70d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,8 @@\n+2022-11-05  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/55971\n+\t* c-ppoutput.cc (adjust_for_newlines): Update comment.\n+\n 2022-11-03  Jason Merrill  <jason@redhat.com>\n \n \t* c-opts.cc (c_common_post_options): -fconcepts no longer implies"}, {"sha": "1281c4ec6544169f13ccae79468dd1bc7a75343f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,9 @@\n+2022-11-04  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX  <yvan.roux@foss.st.com>\n+\n+\t* mapper-client.cc: Use in-process client when networking is\n+\tdisabled.\n+\n 2022-11-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107488"}, {"sha": "33de09496c602ab97b3a0a4baf420baffe12829b", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,18 @@\n+2022-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.cc (Target::isVectorOpSupported): Remove cases for\n+\tcomparison operators.\n+\t* intrinsics.cc (maybe_set_intrinsic): Remove cases for vector\n+\tcomparison intrinsics.\n+\t(maybe_warn_intrinsic_mismatch): Likewise.\n+\t(expand_intrinsic_vec_cond): Remove.\n+\t(maybe_expand_intrinsic): Remove cases for vector comparison\n+\tintrinsics.\n+\t* intrinsics.def (INTRINSIC_EQUALMASK): Remove.\n+\t(INTRINSIC_NOTEQUALMASK): Remove.\n+\t(INTRINSIC_GREATERMASK): Remove.\n+\t(INTRINSIC_GREATEREQUALMASK): Remove.\n+\n 2022-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-attribs.cc (apply_user_attributes): Update for new front-end"}, {"sha": "6e8aa0508bfd5d7ea47eec76a06229176ef9200a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,118 @@\n+2022-11-06  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/fcopysign.c: New test.\n+\n+2022-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/attr_register2.d: Adjust test.\n+\n+2022-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/Wbuiltin_declaration_mismatch2.d: Remove comparision tests.\n+\t* gdc.dg/simd2a.d: Update comparison tests.\n+\t* gdc.dg/simd2b.d: Likewise.\n+\t* gdc.dg/simd2c.d: Likewise.\n+\t* gdc.dg/simd2d.d: Likewise.\n+\t* gdc.dg/simd2e.d: Likewise.\n+\t* gdc.dg/simd2f.d: Likewise.\n+\t* gdc.dg/simd2g.d: Likewise.\n+\t* gdc.dg/simd2h.d: Likewise.\n+\t* gdc.dg/simd2i.d: Likewise.\n+\t* gdc.dg/simd2j.d: Likewise.\n+\n+2022-11-05  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/55971\n+\t* c-c++-common/raw-string-directive-1.c: New test.\n+\t* c-c++-common/raw-string-directive-2.c: New test.\n+\n+2022-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp23/charset1.C: New testcase from C++23 P2314R4.\n+\n+2022-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/cpp/named-universal-char-escape-1.c: Add tests for some\n+\tcharacters newly added in Unicode 15.0.0.\n+\n+2022-11-04  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/mgeneral-regs_3.c: Fix testcase.\n+\n+2022-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107342\n+\t* gcc.dg/tree-ssa/vrp122.c: New test.\n+\t* gcc.dg/tree-ssa/vrp123.c: New test.\n+\n+2022-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt99.adb: New test.\n+\t* gnat.dg/opt99_pkg1.ads, gnat.dg/opt99_pkg1.adb: New helper.\n+\t* gnat.dg/opt99_pkg2.ads: Likewise.\n+\n+2022-11-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/abstract1.ads: Cleanup whitespaces.\n+\t* gnat.dg/abstract1.adb: Likewise and add -gnatws to silence new\n+\twarning.\n+\n+2022-11-04  Hongyu Wang  <hongyu.wang@intel.com>\n+\t    Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mamx-fp16.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* lib/target-supports.exp: (check_effective_target_amx_fp16):\n+\tNew proc.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/amx-check.h: Add AMX_FP16.\n+\t* gcc.target/i386/amx-helper.h: New file to support amx-fp16.\n+\t* gcc.target/i386/amxfp16-asmatt-1.c: New test.\n+\t* gcc.target/i386/amxfp16-asmintel-1.c: Ditto.\n+\t* gcc.target/i386/amxfp16-dpfp16ps-2.c: Ditto.\n+\n+2022-11-04  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\n+\t* gcc.target/arm/cmse/bitfield-1.c: Use overridable location.\n+\t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n+\t* gcc.target/arm/cmse/bitfield-3.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse-20.c: Likewise.\n+\t* gcc.target/arm/cmse/struct-1.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse.exp (cmse_sgstubs): New.\n+\n+2022-11-04  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX  <yvan.roux@foss.st.com>\n+\n+\t* g++.dg/modules/bad-mapper-3.C: Update dg-error pattern.\n+\n+2022-11-04  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* g++.target/i386/mv16.C: Add sierra forest.\n+\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n+\n+2022-11-04  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mcmpccxadd.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/avx-1.c: Ditto.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/sse-13.c: Add -mcmpccxadd.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-1.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-4.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-5.c: Ditto.\n+\t* lib/target-supports.exp (check_effective_target_cmpccxadd):\n+\tNew.\n+\t* gcc.target/i386/cmpccxadd-1.c: New test.\n+\t* gcc.target/i386/cmpccxadd-2.c: Ditto.\n+\n 2022-11-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107488"}, {"sha": "d1dd151cc16f21852004b5064e41799a297f65af", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,19 @@\n+2022-11-05  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/55971\n+\t* lex.cc (get_fresh_line_impl): New function refactoring the code\n+\tfrom...\n+\t(_cpp_get_fresh_line): ...here.\n+\t(lex_raw_string): Use the new version of get_fresh_line_impl() to\n+\tsupport raw strings containing new lines when processing a directive.\n+\n+2022-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* makeuname2c.cc (struct generated): Update from Unicode 15.0.0\n+\ttable 4-8.\n+\t* ucnid.h: Regenerated for Unicode 15.0.0.\n+\t* uname2c.h: Likewise.\n+\n 2022-10-19  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* include/cpplib.h (struct cpp_string): Use new \"string_length\" GTY."}, {"sha": "124bfdb42cc6041e57119a3a9155ec1b873dab96", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,8 @@\n+2022-11-04  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* unwind-dw2-fde-dip.c (find_fde_tail): Special-case encoding\n+\tvalues actually used by BFD ld.\n+\n 2022-10-23  LIU Hao  <lh_mouse@126.com>\n \n \t* config/i386/gthr-mcf.h: Include 'gthr_libobjc.h' when building"}, {"sha": "c7ed192a017a785d40e11131e1e6eb31c0fa93de", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,13 @@\n+2022-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/gcc/simd.d (equalMask): Implement using generics.\n+\t(notEqualMask): Likewise.\n+\t(greaterMask): Likewise.\n+\t(greaterOrEqualMask): Likewise.\n+\t(notMask): Likewise.\n+\t(andAndMask): Likewise.\n+\t(orOrMask): Likewise.\n+\n 2022-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime e4f8919591."}, {"sha": "cda4f18b6de7bbf6d140d4484d8b0f5e6f81843c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05788e9b951199e0947cf70d62feaf9d051a4b46/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05788e9b951199e0947cf70d62feaf9d051a4b46/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=05788e9b951199e0947cf70d62feaf9d051a4b46", "patch": "@@ -1,3 +1,33 @@\n+2022-11-05  Jakob Hasse  <0xjakob@users.noreply.github.com>\n+\n+\tPR libstdc++/105387\n+\t* libsupc++/pbase_type_info.cc (__do_catch) [!__cpp_rtti]: Add\n+\tcheck that the thrown type is actually a pointer.\n+\t* testsuite/18_support/105387.cc: New test.\n+\t* testsuite/18_support/105387_memptr.cc: New test.\n+\n+2022-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107525\n+\t* include/experimental/propagate_const (operator element_type*()):\n+\tMove into base class that can be partially specilized to iompose\n+\tconstraints.\n+\t(operator const element_type*()): Likewise.\n+\t* testsuite/experimental/propagate_const/observers/107525.cc: New test.\n+\n+2022-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107500\n+\t* libsupc++/eh_globals.cc (eh_globals): Remove immortalizing\n+\twrapper.\n+\t(__cxxabiv1::__cxa_get_globals_fast): Adjust.\n+\t(__cxxabiv1::__cxa_get_globals): Adjust.\n+\n+2022-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107511\n+\t* libsupc++/eh_alloc.cc (_GNU_SOURCE): Define.\n+\n 2022-11-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/ranges_algobase.h (__detail::__copy_or_move):"}]}