{"sha": "85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "node_id": "C_kwDOANBUbNoAKDg1YjRkODgxMzI3ZTMxYWU3ZDJiZDQwNzJkY2JlNDI1ZGIzMGY4ZmU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-24T08:00:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-24T10:16:10Z"}, "message": "Fix memory leaks\n\nWhen changing the predcom pass to use auto_vec leaks were introduced by\nfailing to replace deallocation with C++ delete.  The following does\nthis.  It also fixes leaks in vectorization and range folding.\n\n2022-03-24  Richard Biener  <rguenther@suse.de>\n\n\t* tree-predcom.cc (chain::chain): Add CTOR.\n\t(component::component): Likewise.\n\t(pcom_worker::release_chain): Use delete.\n\t(release_components): Likewise.\n\t(pcom_worker::filter_suitable_components): Likewise.\n\t(pcom_worker::split_data_refs_to_components): Use new.\n\t(make_invariant_chain): Likewise.\n\t(make_rooted_chain): Likewise.\n\t(pcom_worker::combine_chains): Likewise.\n\t* tree-vect-loop.cc (vect_create_epilog_for_reduction):\n\tMake sure to release previously constructed scalar_results.\n\t* tree-vect-stmts.cc (vectorizable_load): Use auto_vec\n\tfor vec_offsets.\n\t* vr-values.cc (simplify_using_ranges::~simplify_using_ranges):\n\tRelease m_flag_set_edges.", "tree": {"sha": "df70be8f91e2fc038a6e20350082a73a4212792c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df70be8f91e2fc038a6e20350082a73a4212792c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d233e3334df07cfb4f732ace4d93d3cbc28bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d233e3334df07cfb4f732ace4d93d3cbc28bca"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "e4aea7cdcb47541d7133ff2577e53a6978fdf249", "filename": "gcc/tree-predcom.cc", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Ftree-predcom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Ftree-predcom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.cc?ref=85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "patch": "@@ -297,6 +297,11 @@ enum chain_type\n \n typedef struct chain\n {\n+  chain (chain_type t) : type (t), op (ERROR_MARK), rslt_type (NULL_TREE),\n+    ch1 (NULL), ch2 (NULL), length (0), init_seq (NULL), fini_seq (NULL),\n+    has_max_use_after (false), all_always_accessed (false), combined (false),\n+    inv_store_elimination (false) {}\n+\n   /* Type of the chain.  */\n   enum chain_type type;\n \n@@ -362,6 +367,8 @@ enum ref_step_type\n \n struct component\n {\n+  component (bool es) : eliminate_store_p (es), next (NULL) {}\n+\n   /* The references in the component.  */\n   auto_vec<dref> refs;\n \n@@ -698,7 +705,7 @@ pcom_worker::release_chain (chain_p chain)\n   if (chain->fini_seq)\n     gimple_seq_discard (chain->fini_seq);\n \n-  free (chain);\n+  delete chain;\n }\n \n /* Frees CHAINS.  */\n@@ -723,7 +730,7 @@ release_components (struct component *comps)\n   for (act = comps; act; act = next)\n     {\n       next = act->next;\n-      XDELETE (act);\n+      delete act;\n     }\n }\n \n@@ -1023,9 +1030,8 @@ pcom_worker::split_data_refs_to_components ()\n       comp = comps[ca];\n       if (!comp)\n \t{\n-\t  comp = XCNEW (struct component);\n-\t  comp->refs.create (comp_size[ca]);\n-\t  comp->eliminate_store_p = eliminate_store_p;\n+\t  comp = new component (eliminate_store_p);\n+\t  comp->refs.reserve_exact (comp_size[ca]);\n \t  comps[ca] = comp;\n \t}\n \n@@ -1142,7 +1148,7 @@ pcom_worker::filter_suitable_components (struct component *comps)\n \t  *comp = act->next;\n \t  FOR_EACH_VEC_ELT (act->refs, i, ref)\n \t    free (ref);\n-\t  XDELETE (act);\n+\t  delete act;\n \t}\n     }\n \n@@ -1255,12 +1261,10 @@ add_ref_to_chain (chain_p chain, dref ref)\n static chain_p\n make_invariant_chain (struct component *comp)\n {\n-  chain_p chain = XCNEW (struct chain);\n+  chain_p chain = new struct chain (CT_INVARIANT);\n   unsigned i;\n   dref ref;\n \n-  chain->type = CT_INVARIANT;\n-\n   chain->all_always_accessed = true;\n \n   FOR_EACH_VEC_ELT (comp->refs, i, ref)\n@@ -1280,9 +1284,8 @@ make_invariant_chain (struct component *comp)\n static chain_p\n make_rooted_chain (dref ref, enum chain_type type)\n {\n-  chain_p chain = XCNEW (struct chain);\n+  chain_p chain = new struct chain (type);\n \n-  chain->type = type;\n   chain->refs.safe_push (ref);\n   chain->all_always_accessed = ref->always_accessed;\n   ref->distance = 0;\n@@ -2873,8 +2876,7 @@ pcom_worker::combine_chains (chain_p ch1, chain_p ch2)\n   if (swap)\n     std::swap (ch1, ch2);\n \n-  new_chain = XCNEW (struct chain);\n-  new_chain->type = CT_COMBINATION;\n+  new_chain = new struct chain (CT_COMBINATION);\n   new_chain->op = op;\n   new_chain->ch1 = ch1;\n   new_chain->ch2 = ch2;"}, {"sha": "7a74633e0b43997120e942e5426616c477e6f049", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "patch": "@@ -5466,7 +5466,8 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n   \n   scalar_dest = gimple_get_lhs (orig_stmt_info->stmt);\n   scalar_type = TREE_TYPE (scalar_dest);\n-  scalar_results.create (group_size); \n+  scalar_results.truncate (0);\n+  scalar_results.reserve_exact (group_size);\n   new_scalar_dest = vect_create_destination_var (scalar_dest, NULL);\n   bitsize = TYPE_SIZE (scalar_type);\n "}, {"sha": "f7449a79d1cae1e7d67d49acb7778225e14f5428", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "patch": "@@ -9480,7 +9480,7 @@ vectorizable_load (vec_info *vinfo,\n \t\t\t\t\t  memory_access_type);\n     }\n \n-  vec<tree> vec_offsets = vNULL;\n+  auto_vec<tree> vec_offsets;\n   auto_vec<tree> vec_masks;\n   if (mask)\n     {"}, {"sha": "f94da3130e3fce9d19f84d33afd2c9ad281fbadc", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b4d881327e31ae7d2bd4072dcbe425db30f8fe/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=85b4d881327e31ae7d2bd4072dcbe425db30f8fe", "patch": "@@ -4221,6 +4221,7 @@ simplify_using_ranges::simplify_using_ranges (range_query *query,\n simplify_using_ranges::~simplify_using_ranges ()\n {\n   cleanup_edges_and_switches ();\n+  m_flag_set_edges.release ();\n }\n \n /* Simplify STMT using ranges if possible.  */"}]}