{"sha": "27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkNjU5MmNjNzIwMDFiNGQ0YzliOWI0NTU1ZWVjYzE5ZDAyMDNlOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-01-06T20:21:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-01-06T20:21:13Z"}, "message": "re PR c++/19244 (Typedef of anonymous class incorrectly handled in member function definition)\n\n\tPR c++/19244\n\t* class.c (add_implicitly_declared_members): Remove dead code.\n\t* decl.c (grokfndecl): Add sfk parameter.  Use it do set\n\tDECL_CONSTRUCTOR_P.\n\t(grokdeclarator): Adjust calls to grokfndecl.\n\t* method.c (implicitly_declare_fn): Improve documentation.\n\t* parser.c (cp_parser_direct_declarator): Do not consider a\n\tfunction to be a constructor if the containing class was\n\toriginally anonymous.\n\n        PR c++/19244\n\t* g++.dg/parser/ctor2.C: New test.\n\nFrom-SVN: r93004", "tree": {"sha": "307172f1e13dfc0be1ce45edfd079614f0da9c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/307172f1e13dfc0be1ce45edfd079614f0da9c2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/comments", "author": null, "committer": null, "parents": [{"sha": "27916b83f5f371d27f728fcc003fe93b0e44b3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27916b83f5f371d27f728fcc003fe93b0e44b3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27916b83f5f371d27f728fcc003fe93b0e44b3cc"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "dee21a972b4543bc65d608554f0f7c0a8f6998b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "patch": "@@ -1,3 +1,15 @@\n+2005-01-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19244\n+\t* class.c (add_implicitly_declared_members): Remove dead code.\n+\t* decl.c (grokfndecl): Add sfk parameter.  Use it do set\n+\tDECL_CONSTRUCTOR_P.\n+\t(grokdeclarator): Adjust calls to grokfndecl.\n+\t* method.c (implicitly_declare_fn): Improve documentation.\n+\t* parser.c (cp_parser_direct_declarator): Do not consider a\n+\tfunction to be a constructor if the containing class was\n+\toriginally anonymous.\n+\n 2005-01-06  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/17154"}, {"sha": "00e6a7eeae2db0625611e984c0a6424499fb250c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "patch": "@@ -2485,17 +2485,11 @@ add_implicitly_declared_members (tree t,\n       default_fn = implicitly_declare_fn (sfk_destructor, t, /*const_p=*/0);\n       check_for_override (default_fn, t);\n \n-      /* If we couldn't make it work, then pretend we didn't need it.  */\n-      if (default_fn == void_type_node)\n-\tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = 0;\n-      else\n-\t{\n-\t  TREE_CHAIN (default_fn) = implicit_fns;\n-\t  implicit_fns = default_fn;\n-\n-\t  if (DECL_VINDEX (default_fn))\n-\t    virtual_dtor = default_fn;\n-\t}\n+      TREE_CHAIN (default_fn) = implicit_fns;\n+      implicit_fns = default_fn;\n+      \n+      if (DECL_VINDEX (default_fn))\n+\tvirtual_dtor = default_fn;\n     }\n   else\n     /* Any non-implicit destructor is non-trivial.  */"}, {"sha": "e664b1c6aff62895b718ced9fdbb025ee9ea2739", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "patch": "@@ -61,10 +61,6 @@ static int ambi_op_p (enum tree_code);\n static int unary_op_p (enum tree_code);\n static void push_local_name (tree);\n static tree grok_reference_init (tree, tree, tree, tree *);\n-static tree grokfndecl (tree, tree, tree, tree, tree, int,\n-\t\t\tenum overload_flags, cp_cv_quals,\n-\t\t\ttree, int, int, int, int, int, int, tree, \n-\t\t\ttree *);\n static tree grokvardecl (tree, tree, const cp_decl_specifier_seq *,\n \t\t\t int, int, tree);\n static void record_unknown_type (tree, const char *);\n@@ -5616,6 +5612,8 @@ bad_specifiers (tree object,\n    CHECK is 1 if we must find this method in CTYPE, 0 if we should\n    not look, and -1 if we should not call `grokclassfn' at all.\n \n+   SFK is the kind of special function (if any) for the new function.\n+\n    Returns `NULL_TREE' if something goes wrong, after issuing\n    applicable error messages.  */\n \n@@ -5633,6 +5631,7 @@ grokfndecl (tree ctype,\n             int friendp,\n             int publicp,\n             int inlinep,\n+\t    special_function_kind sfk,\n             int funcdef_flag,\n             int template_count,\n             tree in_namespace,\n@@ -5843,14 +5842,13 @@ grokfndecl (tree ctype,\n   if (check < 0)\n     return decl;\n \n-  if (flags == NO_SPECIAL && ctype && constructor_name_p (declarator, ctype))\n-    DECL_CONSTRUCTOR_P (decl) = 1;\n-\n-  /* Function gets the ugly name, field gets the nice one.  This call\n-     may change the type of the function (because of default\n-     parameters)!  */\n   if (ctype != NULL_TREE)\n-    grokclassfn (ctype, decl, flags, quals);\n+    {\n+      if (sfk == sfk_constructor)\n+\tDECL_CONSTRUCTOR_P (decl) = 1;\n+\n+      grokclassfn (ctype, decl, flags, quals);\n+    }\n \n   decl = check_explicit_specialization (orig_declarator, decl,\n \t\t\t\t\ttemplate_count,\n@@ -7981,6 +7979,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       unqualified_id,\n \t\t\t       virtualp, flags, quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, publicp, inlinep,\n+\t\t\t       sfk,\n \t\t\t       funcdef_flag, template_count, in_namespace, attrlist);\n \t    if (decl == NULL_TREE)\n \t      return decl;\n@@ -8027,8 +8026,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       parms,\n \t\t\t       unqualified_id,\n \t\t\t       virtualp, flags, quals, raises,\n-\t\t\t       friendp ? -1 : 0, friendp, 1, 0, funcdef_flag,\n-\t\t\t       template_count, in_namespace, attrlist);\n+\t\t\t       friendp ? -1 : 0, friendp, 1, 0, sfk,\n+\t\t\t       funcdef_flag, template_count, in_namespace, \n+\t\t\t       attrlist); \n \t    if (decl == NULL_TREE)\n \t      return NULL_TREE;\n \t  }\n@@ -8213,7 +8213,7 @@ grokdeclarator (const cp_declarator *declarator,\n \tdecl = grokfndecl (ctype, type, original_name, parms, unqualified_id,\n \t\t\t   virtualp, flags, quals, raises,\n \t\t\t   1, friendp,\n-\t\t\t   publicp, inlinep, funcdef_flag,\n+\t\t\t   publicp, inlinep, sfk, funcdef_flag,\n \t\t\t   template_count, in_namespace, attrlist);\n \tif (decl == NULL_TREE)\n \t  return NULL_TREE;"}, {"sha": "8cb9e20b301583c45e3bca8881e92c964f786083", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "patch": "@@ -925,7 +925,8 @@ locate_copy (tree type, void *client_)\n /* Implicitly declare the special function indicated by KIND, as a\n    member of TYPE.  For copy constructors and assignment operators,\n    CONST_P indicates whether these functions should take a const\n-   reference argument or a non-const reference.  */\n+   reference argument or a non-const reference.  Returns the\n+   FUNCTION_DECL for the implicitly declared function.  */\n \n tree\n implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)"}, {"sha": "86a96fb71ecc84b3f1d8018e4fb4ce02ba6883a8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "patch": "@@ -11109,11 +11109,16 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t    declarator->u.id.sfk = sfk_destructor;\n \t\t  else if (IDENTIFIER_TYPENAME_P (unqualified_name))\n \t\t    declarator->u.id.sfk = sfk_conversion;\n-\t\t  else if (constructor_name_p (unqualified_name,\n-\t\t\t\t\t       class_type)\n-\t\t\t   || (TREE_CODE (unqualified_name) == TYPE_DECL\n-\t\t\t       && same_type_p (TREE_TYPE (unqualified_name),\n-\t\t\t\t\t       class_type)))\n+\t\t  else if (/* There's no way to declare a constructor\n+\t\t\t      for an anonymous type, even if the type\n+\t\t\t      got a name for linkage purposes.  */\n+\t\t\t   !TYPE_WAS_ANONYMOUS (class_type)\n+\t\t\t   && (constructor_name_p (unqualified_name,\n+\t\t\t\t\t\t   class_type)\n+\t\t\t       || (TREE_CODE (unqualified_name) == TYPE_DECL\n+\t\t\t\t   && (same_type_p \n+\t\t\t\t       (TREE_TYPE (unqualified_name),\n+\t\t\t\t\tclass_type)))))\n \t\t    declarator->u.id.sfk = sfk_constructor;\n \n \t\t  if (ctor_dtor_or_conv_p && declarator->u.id.sfk != sfk_none)"}, {"sha": "d5638925572a4f2f62bcbc19dda9fbc47ced0abf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "patch": "@@ -1,3 +1,8 @@\n+2005-01-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+        PR c++/19244\n+\t* g++.dg/parser/ctor2.C: New test.\n+\n 2004-01-06  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/17154"}, {"sha": "604fb2ffd8a70354a2f1f1b9a9a03ab400d93486", "filename": "gcc/testsuite/g++.dg/parse/ctor2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6592cc72001b4d4c9b9b4555eecc19d0203e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor2.C?ref=27d6592cc72001b4d4c9b9b4555eecc19d0203e9", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/19244\n+\n+typedef struct { void f(); } f;\n+void f::f() { }"}]}