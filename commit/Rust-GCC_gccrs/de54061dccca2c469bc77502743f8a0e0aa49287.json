{"sha": "de54061dccca2c469bc77502743f8a0e0aa49287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU1NDA2MWRjY2NhMmM0NjliYzc3NTAyNzQzZjhhMGUwYWE0OTI4Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-05-30T16:34:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-05-30T16:34:54Z"}, "message": "lto-plugin.c: (non_claimed_files): New static var.\n\n\n\t* lto-plugin.c: (non_claimed_files): New static var.\n\t(linker_ouput_known): New static var.\n\t(all_symbols_read_handler): When user specifies linker output do not\n\timply it; output warning when nonlto-rel mode is forced.\n\t(claim_file_header): Record number of nonclaimed files.\n\t(process_option): Remember if linker output is known\n\nFrom-SVN: r260960", "tree": {"sha": "d7aa0117be471f20bd08ddc22d5a32a969955e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7aa0117be471f20bd08ddc22d5a32a969955e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de54061dccca2c469bc77502743f8a0e0aa49287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de54061dccca2c469bc77502743f8a0e0aa49287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de54061dccca2c469bc77502743f8a0e0aa49287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de54061dccca2c469bc77502743f8a0e0aa49287/comments", "author": null, "committer": null, "parents": [{"sha": "3d63e711a882a42e2812e680ff0b8285f508a5ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d63e711a882a42e2812e680ff0b8285f508a5ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d63e711a882a42e2812e680ff0b8285f508a5ed"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "c3a082368311f560611fdc4a840af294591f679d", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de54061dccca2c469bc77502743f8a0e0aa49287/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de54061dccca2c469bc77502743f8a0e0aa49287/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=de54061dccca2c469bc77502743f8a0e0aa49287", "patch": "@@ -1,3 +1,12 @@\n+2018-05-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-plugin.c: (non_claimed_files): New static var.\n+\t(linker_ouput_known): New static var.\n+\t(all_symbols_read_handler): When user specifies linker output do not\n+\timply it; output warning when nonlto-rel mode is forced.\n+\t(claim_file_header): Record number of nonclaimed files.\n+\t(process_option): Remember if linker output is known\n+\n 2018-04-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/85384"}, {"sha": "2361fe558032fc0899fd2f9ecc2fe7f7eb561f88", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de54061dccca2c469bc77502743f8a0e0aa49287/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de54061dccca2c469bc77502743f8a0e0aa49287/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=de54061dccca2c469bc77502743f8a0e0aa49287", "patch": "@@ -27,10 +27,13 @@ along with this program; see the file COPYING3.  If not see\n    More information at http://gcc.gnu.org/wiki/whopr/driver.\n \n    This plugin should be passed the lto-wrapper options and will forward them.\n-   It also has 2 options of its own:\n+   It also has options at his own:\n    -debug: Print the command line used to run lto-wrapper.\n    -nop: Instead of running lto-wrapper, pass the original to the plugin. This\n-   only works if the input files are hybrid.  */\n+   only works if the input files are hybrid. \n+   -linker-output-known: Do not determine linker output\n+   -sym-style={none,win32,underscore|uscore}\n+   -pass-through  */\n \n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n@@ -159,6 +162,7 @@ static ld_plugin_add_symbols add_symbols;\n \n static struct plugin_file_info *claimed_files = NULL;\n static unsigned int num_claimed_files = 0;\n+static unsigned int non_claimed_files = 0;\n \n /* List of files with offloading.  */\n static struct plugin_offload_file *offload_files;\n@@ -185,6 +189,7 @@ static char nop;\n static char *resolution_file = NULL;\n static enum ld_plugin_output_file_type linker_output;\n static int linker_output_set;\n+static int linker_output_known;\n \n /* The version of gold being used, or -1 if not gold.  The number is\n    MAJOR * 100 + MINOR.  */\n@@ -637,7 +642,8 @@ static enum ld_plugin_status\n all_symbols_read_handler (void)\n {\n   unsigned i;\n-  unsigned num_lto_args = num_claimed_files + lto_wrapper_num_args + 3;\n+  unsigned num_lto_args = num_claimed_files + lto_wrapper_num_args + 2\n+    \t   + !linker_output_known;\n   char **lto_argv;\n   const char *linker_output_str = NULL;\n   const char **lto_arg_ptr;\n@@ -661,26 +667,37 @@ all_symbols_read_handler (void)\n   for (i = 0; i < lto_wrapper_num_args; i++)\n     *lto_arg_ptr++ = lto_wrapper_argv[i];\n \n-  assert (linker_output_set);\n-  switch (linker_output)\n+  if (!linker_output_known)\n     {\n-    case LDPO_REL:\n-      linker_output_str = \"-flinker-output=rel\";\n-      break;\n-    case LDPO_DYN:\n-      linker_output_str = \"-flinker-output=dyn\";\n-      break;\n-    case LDPO_PIE:\n-      linker_output_str = \"-flinker-output=pie\";\n-      break;\n-    case LDPO_EXEC:\n-      linker_output_str = \"-flinker-output=exec\";\n-      break;\n-    default:\n-      message (LDPL_FATAL, \"unsupported linker output %i\", linker_output);\n-      break;\n+      assert (linker_output_set);\n+      switch (linker_output)\n+\t{\n+\tcase LDPO_REL:\n+\t  if (non_claimed_files)\n+\t    {\n+\t      message (LDPL_WARNING, \"incremental linking of LTO and non-LTO \"\n+\t\t       \"objects; using -flinker-output=nolto-rel which will \"\n+\t\t       \"bypass whole program optimization\");\n+\t      linker_output_str = \"-flinker-output=nolto-rel\";\n+\t    }\n+\t  else\n+\t    linker_output_str = \"-flinker-output=rel\";\n+\t  break;\n+\tcase LDPO_DYN:\n+\t  linker_output_str = \"-flinker-output=dyn\";\n+\t  break;\n+\tcase LDPO_PIE:\n+\t  linker_output_str = \"-flinker-output=pie\";\n+\t  break;\n+\tcase LDPO_EXEC:\n+\t  linker_output_str = \"-flinker-output=exec\";\n+\t  break;\n+\tdefault:\n+\t  message (LDPL_FATAL, \"unsupported linker output %i\", linker_output);\n+\t  break;\n+\t}\n+      *lto_arg_ptr++ = xstrdup (linker_output_str);\n     }\n-  *lto_arg_ptr++ = xstrdup (linker_output_str);\n \n   if (num_offload_files > 0)\n     {\n@@ -1108,6 +1125,7 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n   goto cleanup;\n \n  err:\n+  non_claimed_files++;\n   free (lto_file.name);\n \n  cleanup:\n@@ -1122,6 +1140,8 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n static void\n process_option (const char *option)\n {\n+  if (strcmp (option, \"-linker-output-known\") == 0)\n+    linker_output_known = 1;\n   if (strcmp (option, \"-debug\") == 0)\n     debug = 1;\n   else if (strcmp (option, \"-nop\") == 0)"}]}