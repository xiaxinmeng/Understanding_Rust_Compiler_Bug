{"sha": "d2d42a917c2a65769e78d4d430e47962b2d24ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkNDJhOTE3YzJhNjU3NjllNzhkNGQ0MzBlNDc5NjJiMmQyNGJhNQ==", "commit": {"author": {"name": "Simon Law", "email": "sfllaw@engmail.uwaterloo.ca", "date": "2003-04-11T21:35:01Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2003-04-11T21:35:01Z"}, "message": "bugreport.texi: Fix paragraph breaking between sections in preparation for TeXinfo's paragraph...\n\n\t* doc/bugreport.texi: Fix paragraph breaking between sections\n\tin preparation for TeXinfo's paragraph indentation fixes.\n\t* doc/extend.texi: Ditto.\n\t* doc/invoke.texi: Ditto.\n\t* doc/objc.texi: Ditto.\n\t* doc/gcov.texi: Wrap 'gcov' in @command{}.\n\t* doc/invoke.texi (Darwin Options): Add a preamble.\n\nFrom-SVN: r65482", "tree": {"sha": "6f93da0308336c27a3f98d6b3a5a8eb0bf058778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f93da0308336c27a3f98d6b3a5a8eb0bf058778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2d42a917c2a65769e78d4d430e47962b2d24ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d42a917c2a65769e78d4d430e47962b2d24ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d42a917c2a65769e78d4d430e47962b2d24ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d42a917c2a65769e78d4d430e47962b2d24ba5/comments", "author": null, "committer": null, "parents": [{"sha": "62520b200418a0fe365740c18da27f1b0c852315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62520b200418a0fe365740c18da27f1b0c852315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62520b200418a0fe365740c18da27f1b0c852315"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "ae76043bd310f06e813b6b4941e48dcc2054779f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2d42a917c2a65769e78d4d430e47962b2d24ba5", "patch": "@@ -1,3 +1,13 @@\n+2003-04-11  Simon Law  <sfllaw@engmail.uwaterloo.ca>\n+\n+\t* doc/bugreport.texi: Fix paragraph breaking between sections\n+\tin preparation for TeXinfo's paragraph indentation fixes.\n+\t* doc/extend.texi: Ditto.\n+\t* doc/invoke.texi: Ditto.\n+\t* doc/objc.texi: Ditto.\n+\t* doc/gcov.texi: Wrap 'gcov' in @command{}.\n+\t* doc/invoke.texi (Darwin Options): Add a preamble.\n+\n 2003-04-11  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (tls_model_chars): Remove."}, {"sha": "aa7e4e3b6e1c823505de0974999f50a293e0441a", "filename": "gcc/doc/bugreport.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fbugreport.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fbugreport.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fbugreport.texi?ref=d2d42a917c2a65769e78d4d430e47962b2d24ba5", "patch": "@@ -103,6 +103,7 @@ suggestions for improvement of GCC are welcome in any case.\n @section Where to Report Bugs\n @cindex bug report mailing lists\n @kindex gcc-bugs@@gcc.gnu.org or bug-gcc@@gnu.org\n+\n Send bug reports for the GNU Compiler Collection to\n @email{gcc-bugs@@gcc.gnu.org}.  In accordance with the GNU-wide\n convention, in which bug reports for tool ``foo'' are sent"}, {"sha": "a265672c967bdfa98ff8a5fec8e202351c49f73e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d2d42a917c2a65769e78d4d430e47962b2d24ba5", "patch": "@@ -486,7 +486,6 @@ extensions, accepted by GCC in C89 mode and in C++.\n \n @c the above section title wrapped and causes an underfull hbox.. i\n @c changed it from \"within\" to \"in\". --mew 4feb93\n-\n A compound statement enclosed in parentheses may appear as an expression\n in GNU C@.  This allows you to use loops, switches, and local variables\n within an expression.\n@@ -1033,6 +1032,7 @@ This will work with all versions of GCC@.\n @cindex lvalues, generalized\n @cindex extensions, @code{?:}\n @cindex @code{?:} extensions\n+\n Compound expressions, conditional expressions and casts are allowed as\n lvalues provided their operands are lvalues.  This means that you can take\n their addresses or store values into them.\n@@ -7309,7 +7309,6 @@ If any calls were not inlined, you will get linker errors.\n \n @node Template Instantiation\n @section Where's the Template?\n-\n @cindex template instantiation\n \n C++ templates are the first language feature to require more\n@@ -7455,7 +7454,6 @@ more discussion of these pragmas.\n \n @node Bound member functions\n @section Extracting the function pointer from a bound pointer to member function\n-\n @cindex pmf\n @cindex pointer to member function\n @cindex bound pointer to member function"}, {"sha": "5995e31cfc52901a77fa28fdc3ee607eea156c29", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=d2d42a917c2a65769e78d4d430e47962b2d24ba5", "patch": "@@ -209,14 +209,15 @@ Unconditional branches are normally not interesting.\n \n @end table\n \n-Gcov should be run with the current directory the same as that when you\n-invoked the compiler. Otherwise it will not be able to locate the source\n-files. Gcov produces files called @file{@var{mangledname}.gcov} in the\n-current directory. These contain the coverage information of the source\n-file they correspond to. One @file{.gcov} file is produced for each\n-source file containing code, which was compiled to produce the data\n-files. The @file{.gcov} files contain the ':' separated fields along\n-with program source code. The format is\n+@command{gcov} should be run with the current directory the same as that \n+when you invoked the compiler. Otherwise it will not be able to locate \n+the source files. @command{gcov} produces files called \n+@file{@var{mangledname}.gcov} in the current directory. These contain \n+the coverage information of the source file they correspond to. \n+One @file{.gcov} file is produced for each source file containing code, \n+which was compiled to produce the data files. The @file{.gcov} files \n+contain the ':' separated fields along with program source code. The \n+format is\n \n @smallexample\n @var{execution_count}:@var{line_number}:@var{source line text}"}, {"sha": "f89983070afbb16b442e8cd6ef1dbf1a5ec3cc79", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d2d42a917c2a65769e78d4d430e47962b2d24ba5", "patch": "@@ -66,7 +66,6 @@ for contributors to GCC@.\n @cindex options, GCC command\n \n @c man begin DESCRIPTION\n-\n When you invoke GCC, it normally does preprocessing, compilation,\n assembly and linking.  The ``overall options'' allow you to stop this\n process at an intermediate stage.  For example, the @option{-c} option\n@@ -4987,6 +4986,7 @@ are processed in order, from left to right.\n @node Spec Files\n @section Specifying subprocesses and the switches to pass to them\n @cindex Spec Files\n+\n @command{gcc} is a driver program.  It performs its job by invoking a\n sequence of other programs to do the work of compiling, assembling and\n linking.  GCC interprets its command-line parameters and uses these to\n@@ -6441,6 +6441,7 @@ of executing a function pointer if this option is enabled.\n @node MN10200 Options\n @subsection MN10200 Options\n @cindex MN10200 options\n+\n These @option{-m} options are defined for Matsushita MN10200 architectures:\n @table @gcctabopt\n \n@@ -6456,6 +6457,7 @@ This option makes symbolic debugging impossible.\n @node MN10300 Options\n @subsection MN10300 Options\n @cindex MN10300 options\n+\n These @option{-m} options are defined for Matsushita MN10300 architectures:\n \n @table @gcctabopt\n@@ -7414,6 +7416,10 @@ This option sets flags for both the preprocessor and linker.\n @node Darwin Options\n @subsection Darwin Options\n @cindex Darwin options\n+\n+These options are defined for all architectures running the Darwin operating\n+system.  They are useful for compatibility with other Mac OS compilers.\n+\n @table @gcctabopt\n @item -all_load    \n @opindex all_load   \n@@ -11176,7 +11182,6 @@ The default without @option{-fpic} is @code{initial-exec}; with\n @cindex environment variables\n \n @c man begin ENVIRONMENT\n-\n This section describes several environment variables that affect how GCC\n operates.  Some of them work by specifying directories or prefixes to use\n when searching for various kinds of files.  Some are used to specify other"}, {"sha": "a0c40f7296e67798f597d4a956a07725137c9fa5", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d42a917c2a65769e78d4d430e47962b2d24ba5/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=d2d42a917c2a65769e78d4d430e47962b2d24ba5", "patch": "@@ -25,7 +25,6 @@ comments about this document to Ovidiu Predescu\n @node Executing code before main, Type encoding, Objective-C, Objective-C\n @section @code{+load}: Executing code before main\n \n-\n The GNU Objective-C runtime provides a way that allows you to execute\n code before the execution of the program enters the @code{main}\n function.  The code is executed on a per-class and a per-category basis,"}]}