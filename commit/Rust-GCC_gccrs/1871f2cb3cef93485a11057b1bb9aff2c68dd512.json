{"sha": "1871f2cb3cef93485a11057b1bb9aff2c68dd512", "node_id": "C_kwDOANBUbNoAKDE4NzFmMmNiM2NlZjkzNDg1YTExMDU3YjFiYjlhZmYyYzY4ZGQ1MTI", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-12-10T15:54:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:41Z"}, "message": "[Ada] Remove unnecessary declare block\n\ngcc/ada/\n\n\t* errout.adb (Adjust_Name_Case): Remove unnecessary declare\n\tblock.", "tree": {"sha": "75b5ec337f8a3cc2b6ca4a7b83c91015140a4946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75b5ec337f8a3cc2b6ca4a7b83c91015140a4946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1871f2cb3cef93485a11057b1bb9aff2c68dd512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1871f2cb3cef93485a11057b1bb9aff2c68dd512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1871f2cb3cef93485a11057b1bb9aff2c68dd512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1871f2cb3cef93485a11057b1bb9aff2c68dd512/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42dd6f60d8fefe1b026989d78eabf0108c528e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42dd6f60d8fefe1b026989d78eabf0108c528e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42dd6f60d8fefe1b026989d78eabf0108c528e4b"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "8ae6f17c75ee896a5a383d84c00fa99951151465", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1871f2cb3cef93485a11057b1bb9aff2c68dd512/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1871f2cb3cef93485a11057b1bb9aff2c68dd512/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=1871f2cb3cef93485a11057b1bb9aff2c68dd512", "patch": "@@ -3391,60 +3391,57 @@ package body Errout is\n      (Buf : in out Bounded_String;\n       Loc : Source_Ptr)\n    is\n+      Src_Ind : constant Source_File_Index := Get_Source_File_Index (Loc);\n+      Sbuffer : Source_Buffer_Ptr;\n+      Ref_Ptr : Integer;\n+      Src_Ptr : Source_Ptr;\n+\n    begin\n       --  We have an all lower case name from Namet, and now we want to set\n       --  the appropriate case. If possible we copy the actual casing from\n       --  the source. If not we use standard identifier casing.\n \n-      declare\n-         Src_Ind : constant Source_File_Index := Get_Source_File_Index (Loc);\n-         Sbuffer : Source_Buffer_Ptr;\n-         Ref_Ptr : Integer;\n-         Src_Ptr : Source_Ptr;\n+      Ref_Ptr := 1;\n+      Src_Ptr := Loc;\n \n-      begin\n-         Ref_Ptr := 1;\n-         Src_Ptr := Loc;\n+      --  For standard locations, always use mixed case\n \n-         --  For standard locations, always use mixed case\n+      if Loc <= No_Location then\n+         Set_Casing (Buf, Mixed_Case);\n \n-         if Loc <= No_Location then\n-            Set_Casing (Buf, Mixed_Case);\n+      else\n+         --  Determine if the reference we are dealing with corresponds to text\n+         --  at the point of the error reference. This will often be the case\n+         --  for simple identifier references, and is the case where we can\n+         --  copy the casing from the source.\n+\n+         Sbuffer := Source_Text (Src_Ind);\n+\n+         while Ref_Ptr <= Buf.Length loop\n+            exit when\n+              Fold_Lower (Sbuffer (Src_Ptr)) /=\n+                Fold_Lower (Buf.Chars (Ref_Ptr));\n+            Ref_Ptr := Ref_Ptr + 1;\n+            Src_Ptr := Src_Ptr + 1;\n+         end loop;\n \n-         else\n-            --  Determine if the reference we are dealing with corresponds to\n-            --  text at the point of the error reference. This will often be\n-            --  the case for simple identifier references, and is the case\n-            --  where we can copy the casing from the source.\n+         --  If we get through the loop without a mismatch, then output the\n+         --  name the way it is cased in the source program.\n \n-            Sbuffer := Source_Text (Src_Ind);\n+         if Ref_Ptr > Buf.Length then\n+            Src_Ptr := Loc;\n \n-            while Ref_Ptr <= Buf.Length loop\n-               exit when\n-                 Fold_Lower (Sbuffer (Src_Ptr)) /=\n-                   Fold_Lower (Buf.Chars (Ref_Ptr));\n-               Ref_Ptr := Ref_Ptr + 1;\n+            for J in 1 .. Buf.Length loop\n+               Buf.Chars (J) := Sbuffer (Src_Ptr);\n                Src_Ptr := Src_Ptr + 1;\n             end loop;\n \n-            --  If we get through the loop without a mismatch, then output the\n-            --  name the way it is cased in the source program\n-\n-            if Ref_Ptr > Buf.Length then\n-               Src_Ptr := Loc;\n+         --  Otherwise set the casing using the default identifier casing\n \n-               for J in 1 .. Buf.Length loop\n-                  Buf.Chars (J) := Sbuffer (Src_Ptr);\n-                  Src_Ptr := Src_Ptr + 1;\n-               end loop;\n-\n-            --  Otherwise set the casing using the default identifier casing\n-\n-            else\n-               Set_Casing (Buf, Identifier_Casing (Src_Ind));\n-            end if;\n+         else\n+            Set_Casing (Buf, Identifier_Casing (Src_Ind));\n          end if;\n-      end;\n+      end if;\n    end Adjust_Name_Case;\n \n    ---------------------------"}]}