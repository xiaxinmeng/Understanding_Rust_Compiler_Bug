{"sha": "1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiNTllMDVhZDBiODFhMmU1NmFkZWQ4ZmMxZDg2YWNhYjlmNTZmYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-15T16:53:02Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-01-15T16:53:02Z"}, "message": "hashtable_policy.h: Fix some long lines.\n\n2014-01-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/hashtable_policy.h: Fix some long lines.\n\t* include/bits/hashtable.h (__hash_code_base_access): Define and\n\tuse it to check its _M_bucket_index noexcept qualification. Use\n\talso in place of...\n\t(__access_protected_ctor): ...this.\n\t* testsuite/23_containers/unordered_set/instantiation_neg.cc:\n\tAdapt line number.\n\t* testsuite/23_containers/unordered_set/\n\tnot_default_constructible_hash_neg.cc: Likewise.\n\nFrom-SVN: r206632", "tree": {"sha": "b8f30eb81b0ae54ff76b9857e1079c46a5bfb64d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8f30eb81b0ae54ff76b9857e1079c46a5bfb64d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/comments", "author": null, "committer": null, "parents": [{"sha": "e033516b82c64a9097beb9c4f146048fb35f88b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e033516b82c64a9097beb9c4f146048fb35f88b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e033516b82c64a9097beb9c4f146048fb35f88b0"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "4da658bf16f25e5fa2793545e67d96d7b315c05c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "patch": "@@ -1,3 +1,15 @@\n+2014-01-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h: Fix some long lines.\n+\t* include/bits/hashtable.h (__hash_code_base_access): Define and\n+\tuse it to check its _M_bucket_index noexcept qualification. Use\n+\talso in place of...\n+\t(__access_protected_ctor): ...this.\n+\t* testsuite/23_containers/unordered_set/instantiation_neg.cc:\n+\tAdapt line number.\n+\t* testsuite/23_containers/unordered_set/\n+\tnot_default_constructible_hash_neg.cc: Likewise.\n+\n 2014-01-13  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/set.h (set): Implement C++11 allocator-aware"}, {"sha": "e427c7f2383561ba4ee19978cfbf79bb32e2f019", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "patch": "@@ -260,9 +260,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Compile-time diagnostics.\n \n+      // _Hash_code_base has everything protected, so use this derived type to\n+      // access it.\n+      struct __hash_code_base_access : __hash_code_base\n+      { using __hash_code_base::_M_bucket_index; };\n+\n       // Getting a bucket index from a node shall not throw because it is used\n       // in methods (erase, swap...) that shall not throw.\n-      static_assert(noexcept(declval<const _Hashtable&>()\n+      static_assert(noexcept(declval<const __hash_code_base_access&>()\n \t\t\t     ._M_bucket_index((const __node_type*)nullptr,\n \t\t\t\t\t      (std::size_t)0)),\n \t\t    \"Cache the hash code or qualify your functors involved\"\n@@ -277,15 +282,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    \"Functor used to map hash code to bucket index\"\n \t\t    \" must be default constructible\");\n \n-      // _Hash_code_base has a protected default constructor, so use this\n-      // derived type to tell if it's usable.\n-      struct __access_protected_ctor : __hash_code_base { };\n-\n       // When hash codes are not cached local iterator inherits from\n       // __hash_code_base above to compute node bucket index so it has to be\n       // default constructible.\n       static_assert(__if_hash_not_cached<\n-\t\t    is_default_constructible<__access_protected_ctor>>::value,\n+\t\t    is_default_constructible<__hash_code_base_access>>::value,\n \t\t    \"Cache the hash code or make functors involved in hash code\"\n \t\t    \" and bucket index computation default constructible\");\n "}, {"sha": "e5aed59322d22e4fe6cbc42ed70edbf1e002f49f", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "patch": "@@ -161,7 +161,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __hashtable_alloc& _M_h;\n     };\n \n-  // Functor similar to the previous one but without any pool of node to recycle.\n+  // Functor similar to the previous one but without any pool of nodes to\n+  // recycle.\n   template<typename _NodeAlloc>\n     struct _AllocNode\n     {\n@@ -1088,7 +1089,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       std::size_t\n       _M_bucket_index(const __node_type* __p, std::size_t __n) const\n-\tnoexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>(), (std::size_t)0)) )\n+\tnoexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>(),\n+\t\t\t\t\t\t   (std::size_t)0)) )\n       { return _M_ranged_hash()(_M_extract()(__p->_M_v()), __n); }\n \n       void\n@@ -1175,7 +1177,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::size_t\n       _M_bucket_index(const __node_type* __p, std::size_t __n) const\n \tnoexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))\n-\t\t  && noexcept(declval<const _H2&>()((__hash_code)0, (std::size_t)0)) )\n+\t\t  && noexcept(declval<const _H2&>()((__hash_code)0,\n+\t\t\t\t\t\t    (std::size_t)0)) )\n       { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }\n \n       void"}, {"sha": "83bc9d821e3b124355897ed36d8a39b9a4de4bf1", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/instantiation_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc?ref=1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"with noexcept\" \"\" { target *-*-* } 265 }\n+// { dg-error \"with noexcept\" \"\" { target *-*-* } 270 }\n \n #include <unordered_set>\n "}, {"sha": "2365556767c25db0ce9fa6426a34074e46a3de6f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/not_default_constructible_hash_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc?ref=1bb59e05ad0b81a2e56aded8fc1d86acab9f56fb", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"default constructible\" \"\" { target *-*-* } 287 }\n+// { dg-error \"default constructible\" \"\" { target *-*-* } 288 }\n \n #include <unordered_set>\n "}]}