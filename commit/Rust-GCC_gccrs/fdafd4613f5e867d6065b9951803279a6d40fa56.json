{"sha": "fdafd4613f5e867d6065b9951803279a6d40fa56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhZmQ0NjEzZjVlODY3ZDYwNjViOTk1MTgwMzI3OWE2ZDQwZmE1Ng==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-05-10T17:17:20Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-05-10T17:17:20Z"}, "message": "prims.cc (_Jv_soleIndirectCompiledEngine): New.\n\n2006-05-09  Andrew Haley  <aph@redhat.com>\n\n        * prims.cc (_Jv_soleIndirectCompiledEngine): New.\n        * include/execution.h (Jv_CompiledEngine::do_allocate_static_fields):\n        Remove body.\n        (_Jv_CompiledEngine::allocate_field_initializers): New.\n        (_Jv_CompiledEngine::_Jv_CompiledEngine): Initialize\n        allocate_field_initializers.\n        (class _Jv_IndirectCompiledClass): New.\n        (struct _Jv_IndirectCompiledEngine): New.\n        * java/lang/Class.h: (IndirectCompiledEngine): New.\n        * java/lang/natClassLoader.cc (_Jv_NewClassFromInitializer): Set\n        engine to _Jv_soleIndirectCompiledEngine\n        * link.cc (ensure_fields_laid_out): Call\n        engine->allocate_field_initializers().\n\nFrom-SVN: r113674", "tree": {"sha": "3d05e19771942fcb867ce8da5bf1c3330d200872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d05e19771942fcb867ce8da5bf1c3330d200872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdafd4613f5e867d6065b9951803279a6d40fa56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdafd4613f5e867d6065b9951803279a6d40fa56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdafd4613f5e867d6065b9951803279a6d40fa56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdafd4613f5e867d6065b9951803279a6d40fa56/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05a79eb6bce1cb36c961e6d5421a960395a7a0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a79eb6bce1cb36c961e6d5421a960395a7a0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a79eb6bce1cb36c961e6d5421a960395a7a0a1"}], "stats": {"total": 140, "additions": 119, "deletions": 21}, "files": [{"sha": "4221240d1eda9c4f6458a6ac3531cc6d8b332b44", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fdafd4613f5e867d6065b9951803279a6d40fa56", "patch": "@@ -1,3 +1,19 @@\n+2006-05-09  Andrew Haley  <aph@redhat.com>\n+\n+\t* prims.cc (_Jv_soleIndirectCompiledEngine): New.\n+\t* include/execution.h (Jv_CompiledEngine::do_allocate_static_fields):\n+\tRemove body.\n+\t(_Jv_CompiledEngine::allocate_field_initializers): New.\n+\t(_Jv_CompiledEngine::_Jv_CompiledEngine): Initialize\n+\tallocate_field_initializers.\n+\t(class _Jv_IndirectCompiledClass): New.\n+\t(struct _Jv_IndirectCompiledEngine): New.\n+\t* java/lang/Class.h: (IndirectCompiledEngine): New.\n+\t* java/lang/natClassLoader.cc (_Jv_NewClassFromInitializer): Set\n+\tengine to _Jv_soleIndirectCompiledEngine\n+\t* link.cc (ensure_fields_laid_out): Call\n+\tengine->allocate_field_initializers().\n+\n 2006-05-06  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/libjava.jni/jni.exp (gcj_jni_compile_c_to_so): Add check for"}, {"sha": "19d136c027e5955c9ab4cd3189f13dc3fde30f51", "filename": "libjava/gnu/gcj/runtime/natSharedLibLoader.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatSharedLibLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatSharedLibLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatSharedLibLoader.cc?ref=fdafd4613f5e867d6065b9951803279a6d40fa56", "patch": "@@ -44,7 +44,8 @@ _Jv_sharedlib_register_hook (jclass cls)\n {\n   cls->protectionDomain = curHelper->domain;\n   cls->loader = curLoader;\n-  cls->engine = &_Jv_soleCompiledEngine;\n+  if (! cls->engine)\n+    cls->engine = &_Jv_soleCompiledEngine;\n   curHelper->registerClass(cls->getName(), cls);\n }\n \n@@ -95,6 +96,7 @@ gnu::gcj::runtime::SharedLibHelper::init(void)\n     {\n       const char *msg = dlerror();\n       throw new java::lang::UnknownError(JvNewStringLatin1(msg));\n+      fprintf (stderr, \"failed loading %s: %s\\n\", lname, msg);\n     }\n   handler = (gnu::gcj::RawData*) h;\n #else"}, {"sha": "279e9c1b872700c3cd2cc3f9c80b58e8e98301b5", "filename": "libjava/include/execution.h", "status": "modified", "additions": 91, "deletions": 19, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Finclude%2Fexecution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Finclude%2Fexecution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fexecution.h?ref=fdafd4613f5e867d6065b9951803279a6d40fa56", "patch": "@@ -24,13 +24,15 @@ struct _Jv_ExecutionEngine\n   bool (*need_resolve_string_fields) ();\n   void (*verify) (jclass);\n   void (*allocate_static_fields) (jclass, int, int);\n+  void (*allocate_field_initializers) (jclass);\n   void (*create_ncode) (jclass);\n   _Jv_ResolvedMethod *(*resolve_method) (_Jv_Method *, jclass,\n \t\t\t\t\t jboolean);\n   void (*post_miranda_hook) (jclass);\n };\n \n-// This handles all gcj-compiled code, including BC ABI.\n+// This handles gcj-compiled code except that compiled with\n+// -findirect-classes.\n struct _Jv_CompiledEngine : public _Jv_ExecutionEngine\n {\n  public:\n@@ -55,25 +57,14 @@ struct _Jv_CompiledEngine : public _Jv_ExecutionEngine\n     return NULL;\n   }\n \n-  static void do_allocate_static_fields (jclass klass,\n-\t\t\t\t\t int pointer_size,\n-\t\t\t\t\t int other_size)\n+  static void do_allocate_static_fields (jclass,\n+\t\t\t\t\t int,\n+\t\t\t\t\t int)\n   {\n-    // Splitting the allocations here lets us scan reference fields\n-    // and avoid scanning non-reference fields.\n-    char *reference_fields = (char *) _Jv_AllocRawObj (pointer_size);\n-    char *non_reference_fields = (char *) _Jv_AllocBytes (other_size);\n-\n-    for (int i = 0; i < klass->field_count; i++)\n-      {\n-\t_Jv_Field *field = &klass->fields[i];\n-\n-\tif ((field->flags & java::lang::reflect::Modifier::STATIC) == 0)\n-\t  continue;\n+  }\n \n-\tchar *base = field->isRef() ? reference_fields : non_reference_fields;\n-\tfield->u.addr  = base + field->u.boffset;\n-      } \n+  static void do_allocate_field_initializers (jclass)\n+  {\n   }\n \n   static void do_create_ncode (jclass)\n@@ -92,6 +83,7 @@ struct _Jv_CompiledEngine : public _Jv_ExecutionEngine\n     need_resolve_string_fields = do_need_resolve_string_fields;\n     verify = do_verify;\n     allocate_static_fields = do_allocate_static_fields;\n+    allocate_field_initializers = do_allocate_field_initializers;\n     create_ncode = do_create_ncode;\n     resolve_method = do_resolve_method;\n     post_miranda_hook = do_post_miranda_hook;\n@@ -109,6 +101,81 @@ struct _Jv_CompiledEngine : public _Jv_ExecutionEngine\n   }\n };\n \n+class _Jv_IndirectCompiledClass\n+{\n+public:\n+  void **field_initializers;\n+};\n+\n+// This handles gcj-compiled code compiled with -findirect-classes.\n+struct _Jv_IndirectCompiledEngine : public _Jv_CompiledEngine\n+{\n+  _Jv_IndirectCompiledEngine () : _Jv_CompiledEngine ()\n+  {\n+    allocate_static_fields = do_allocate_static_fields;\n+    allocate_field_initializers = do_allocate_field_initializers;\n+  }\n+  \n+  static void do_allocate_field_initializers (jclass klass)\n+  {\n+    _Jv_IndirectCompiledClass *aux \n+      =  (_Jv_IndirectCompiledClass*)\n+        _Jv_AllocRawObj (sizeof (_Jv_IndirectCompiledClass));\n+    klass->aux_info = aux;\n+\n+    aux->field_initializers = (void **)_Jv_Malloc (klass->field_count \n+\t\t\t\t\t\t   * sizeof (void*));    \n+\n+    for (int i = 0; i < klass->field_count; i++)\n+      {\n+\t_Jv_Field *field = &klass->fields[i];\n+\tif (field->flags & java::lang::reflect::Modifier::STATIC)\n+\t  {\n+\t    aux->field_initializers[i] = field->u.addr;\n+\t    field->u.addr = NULL; \n+\t  }\n+      }\n+  }\n+\n+  static void do_allocate_static_fields (jclass klass,\n+\t\t\t\t\t int pointer_size,\n+\t\t\t\t\t int other_size)\n+  {\n+    // Splitting the allocations here lets us scan reference fields\n+    // and avoid scanning non-reference fields.\n+    char *reference_fields = (char *) _Jv_AllocRawObj (pointer_size);\n+    char *non_reference_fields = (char *) _Jv_AllocBytes (other_size);\n+\n+    _Jv_IndirectCompiledClass *aux \n+      =  (_Jv_IndirectCompiledClass*)klass->aux_info;\n+\n+    for (int i = 0; i < klass->field_count; i++)\n+      {\n+\t_Jv_Field *field = &klass->fields[i];\n+\n+\tif ((field->flags & java::lang::reflect::Modifier::STATIC) == 0)\n+\t  continue;\n+\n+\tchar *base = field->isRef() ? reference_fields : non_reference_fields;\n+\tfield->u.addr  = base + field->u.boffset;\n+\n+\tif (aux->field_initializers[i])\n+\t  {\n+\t    int field_size;\n+\t    if (! field->isRef ())\n+\t      field_size = field->type->size ();\n+\t    else \n+\t      field_size = sizeof (jobject);\n+\n+\t    memcpy (field->u.addr, aux->field_initializers[i], field_size);\n+\t  }\n+      } \n+    _Jv_Free (aux->field_initializers);\n+  }\n+};\n+\n+\n+\n // This handles interpreted code.\n class _Jv_InterpreterEngine : public _Jv_ExecutionEngine\n {\n@@ -130,6 +197,10 @@ class _Jv_InterpreterEngine : public _Jv_ExecutionEngine\n     _Jv_UnregisterClass(klass);\n   }\n \n+  static void do_allocate_field_initializers (jclass)\n+  {\n+  }\n+\n   static void do_post_miranda_hook (jclass);\n \n   _Jv_InterpreterEngine ()\n@@ -138,6 +209,7 @@ class _Jv_InterpreterEngine : public _Jv_ExecutionEngine\n     need_resolve_string_fields = do_need_resolve_string_fields;\n     verify = do_verify;\n     allocate_static_fields = do_allocate_static_fields;\n+    allocate_field_initializers = do_allocate_field_initializers;\n     create_ncode = do_create_ncode;\n     resolve_method = do_resolve_method;\n     post_miranda_hook = do_post_miranda_hook;\n@@ -158,5 +230,5 @@ class _Jv_InterpreterEngine : public _Jv_ExecutionEngine\n \n extern _Jv_InterpreterEngine _Jv_soleInterpreterEngine;\n extern _Jv_CompiledEngine _Jv_soleCompiledEngine;\n-\n+extern _Jv_IndirectCompiledEngine _Jv_soleIndirectCompiledEngine;\n #endif // __JAVA_EXECUTION_H__"}, {"sha": "22a078df2fc3d4471ead7044148745364b8bd946", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=fdafd4613f5e867d6065b9951803279a6d40fa56", "patch": "@@ -96,6 +96,7 @@ struct _Jv_ArrayVTable;\n class _Jv_Linker;\n class _Jv_ExecutionEngine;\n class _Jv_CompiledEngine;\n+class _Jv_IndirectCompiledEngine;\n class _Jv_InterpreterEngine;\n \n #ifdef INTERPRETER\n@@ -538,6 +539,7 @@ class java::lang::Class : public java::lang::Object\n   friend class ::_Jv_Linker;\n   friend class ::_Jv_ExecutionEngine;\n   friend class ::_Jv_CompiledEngine;\n+  friend class ::_Jv_IndirectCompiledEngine;\n   friend class ::_Jv_InterpreterEngine;\n \n   friend void ::_Jv_sharedlib_register_hook (jclass klass);"}, {"sha": "43e624a3f747b9107e34e3b87975ce4713799f15", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=fdafd4613f5e867d6065b9951803279a6d40fa56", "patch": "@@ -200,6 +200,8 @@ _Jv_NewClassFromInitializer (const jclass class_initializer)\n \t\t\t\t\t   &java::lang::Class::class$);  \n   memcpy ((void*)new_class, (void*)class_initializer, sizeof *new_class);\n \n+  new_class->engine = &_Jv_soleIndirectCompiledEngine;\n+\n   if (_Jv_CheckABIVersion ((unsigned long) new_class->next_or_version))\n     (*_Jv_RegisterClassHook) (new_class);\n   "}, {"sha": "4f01cb545640174c3e79f3c013a55605c3be116b", "filename": "libjava/link.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=fdafd4613f5e867d6065b9951803279a6d40fa56", "patch": "@@ -1527,6 +1527,8 @@ _Jv_Linker::ensure_fields_laid_out (jclass klass)\n   else\n     instance_size = java::lang::Object::class$.size();\n \n+  klass->engine->allocate_field_initializers (klass); \n+\n   for (int i = 0; i < klass->field_count; i++)\n     {\n       int field_size;\n@@ -1539,7 +1541,6 @@ _Jv_Linker::ensure_fields_laid_out (jclass klass)\n \t  // It is safe to resolve the field here, since it's a\n \t  // primitive class, which does not cause loading to happen.\n \t  resolve_field (field, klass->loader);\n-\n \t  field_size = field->type->size ();\n \t  field_align = get_alignment_from_class (field->type);\n \t}"}, {"sha": "2536ca47e645f47c988ffe0b9743b287beabd0a0", "filename": "libjava/prims.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdafd4613f5e867d6065b9951803279a6d40fa56/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=fdafd4613f5e867d6065b9951803279a6d40fa56", "patch": "@@ -74,6 +74,9 @@ details.  */\n // Execution engine for compiled code.\n _Jv_CompiledEngine _Jv_soleCompiledEngine;\n \n+// Execution engine for code compiled with -findirect-classes\n+_Jv_IndirectCompiledEngine _Jv_soleIndirectCompiledEngine;\n+\n // We allocate a single OutOfMemoryError exception which we keep\n // around for use if we run out of memory.\n static java::lang::OutOfMemoryError *no_memory;"}]}