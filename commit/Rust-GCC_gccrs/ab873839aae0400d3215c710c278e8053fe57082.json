{"sha": "ab873839aae0400d3215c710c278e8053fe57082", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI4NzM4MzlhYWUwNDAwZDMyMTVjNzEwYzI3OGU4MDUzZmU1NzA4Mg==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2007-02-01T05:36:17Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-02-01T05:36:17Z"}, "message": "c-tree.texi (Expression trees): Improve markup.\n\n2007-01-31  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n\n\t* doc/c-tree.texi (Expression trees): Improve markup.\n\t* doc/tm.texi (Register Classes, Addressing Modes)\n\t(Floating Point): Fix spacing after abbreviations.  Fix some\n\ttypos.\n\nFrom-SVN: r121457", "tree": {"sha": "ff6df307974a049a5aeb5eef5d9226f004557251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff6df307974a049a5aeb5eef5d9226f004557251"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab873839aae0400d3215c710c278e8053fe57082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab873839aae0400d3215c710c278e8053fe57082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab873839aae0400d3215c710c278e8053fe57082", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab873839aae0400d3215c710c278e8053fe57082/comments", "author": null, "committer": null, "parents": [{"sha": "20fdc40c5acca41e679fe7e789d0313bd6d932da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fdc40c5acca41e679fe7e789d0313bd6d932da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fdc40c5acca41e679fe7e789d0313bd6d932da"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "56c4ca79e428361f4c80a41a6f6ab9c10a592435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab873839aae0400d3215c710c278e8053fe57082/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab873839aae0400d3215c710c278e8053fe57082/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab873839aae0400d3215c710c278e8053fe57082", "patch": "@@ -1,3 +1,10 @@\n+2007-02-01  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/c-tree.texi (Expression trees): Improve markup.\n+\t* doc/tm.texi (Register Classes, Addressing Modes)\n+\t(Floating Point): Fix spacing after abbreviations.  Fix some\n+\ttypos.\n+\n 2007-02-01  Ben Elliston  <bje@au.ibm.com>\n \n \t* doc/invoke.texi: Replace \"bugfix\" with \"bug fix\" throughout."}, {"sha": "46af3abff9fcb568548b58836a0758c6ec1bef70", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab873839aae0400d3215c710c278e8053fe57082/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab873839aae0400d3215c710c278e8053fe57082/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=ab873839aae0400d3215c710c278e8053fe57082", "patch": "@@ -2272,11 +2272,11 @@ type.\n \n @item TRUTH_ANDIF_EXPR\n @itemx TRUTH_ORIF_EXPR\n-These nodes represent logical and and logical or, respectively.  These\n-operators are not strict; i.e., the second operand is evaluated only if\n-the value of the expression is not determined by evaluation of the first\n-operand.  The type of the operands and that of the result are always of\n-@code{BOOLEAN_TYPE} or @code{INTEGER_TYPE}.\n+These nodes represent logical ``and'' and logical ``or'', respectively.\n+These operators are not strict; i.e., the second operand is evaluated\n+only if the value of the expression is not determined by evaluation of\n+the first operand.  The type of the operands and that of the result are\n+always of @code{BOOLEAN_TYPE} or @code{INTEGER_TYPE}.\n \n @item TRUTH_AND_EXPR\n @itemx TRUTH_OR_EXPR"}, {"sha": "77c83f4a3aa4ea4a6cb40e2133a2ea72f79ec38b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab873839aae0400d3215c710c278e8053fe57082/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab873839aae0400d3215c710c278e8053fe57082/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ab873839aae0400d3215c710c278e8053fe57082", "patch": "@@ -2386,8 +2386,9 @@ that expression may examine the mode of the memory reference in\n @var{mode}.  You should define this macro if the mode of the memory\n reference affects whether a register may be used as a base register.  If\n you define this macro, the compiler will use it instead of\n-@code{REGNO_OK_FOR_BASE_P}.  The mode may be @code{VOIDmode} for addresses\n-that appear outside a @code{MEM}, i.e. as an @code{address_operand}.\n+@code{REGNO_OK_FOR_BASE_P}.  The mode may be @code{VOIDmode} for\n+addresses that appear outside a @code{MEM}, i.e., as an\n+@code{address_operand}.\n \n @end defmac\n \n@@ -2404,14 +2405,15 @@ Use of this macro is deprecated; please use the more general\n @end defmac\n \n @defmac REGNO_MODE_CODE_OK_FOR_BASE_P (@var{num}, @var{mode}, @var{outer_code}, @var{index_code})\n-A C expression that is just like @code{REGNO_MODE_OK_FOR_BASE_P}, except that\n-that expression may examine the context in which the register appears in the\n-memory reference.  @var{outer_code} is the code of the immediately enclosing\n-expression (@code{MEM} if at the top level of the address, @code{ADDRESS} for\n-something that occurs in an @code{address_operand}).  @var{index_code} is the\n-code of the corresponding index expression if @var{outer_code} is @code{PLUS};\n+A C expression that is just like @code{REGNO_MODE_OK_FOR_BASE_P}, except\n+that that expression may examine the context in which the register\n+appears in the memory reference.  @var{outer_code} is the code of the\n+immediately enclosing expression (@code{MEM} if at the top level of the\n+address, @code{ADDRESS} for something that occurs in an\n+@code{address_operand}).  @var{index_code} is the code of the\n+corresponding index expression if @var{outer_code} is @code{PLUS};\n @code{SCRATCH} otherwise.  The mode may be @code{VOIDmode} for addresses\n-that appear outside a @code{MEM}, i.e. as an @code{address_operand}.\n+that appear outside a @code{MEM}, i.e., as an @code{address_operand}.\n @end defmac\n \n @defmac REGNO_OK_FOR_INDEX_P (@var{num})\n@@ -5267,7 +5269,7 @@ the address has become legitimate.\n \n @findex copy_rtx\n If you want to change only a part of @var{x}, one standard way of doing\n-this is to use @code{copy_rtx}.  Note, however, that is unshares only a\n+this is to use @code{copy_rtx}.  Note, however, that it unshares only a\n single level of rtl.  Thus, if the part to be changed is not at the\n top level, you'll need to replace first the top level.\n It is not necessary for this macro to come up with a legitimate\n@@ -5333,7 +5335,7 @@ address @var{addr} as an argument returns a mask @var{m} that can be\n used to extract from two vectors the relevant data that resides in\n @var{addr} in case @var{addr} is not properly aligned.\n \n-The autovectrizer, when vectorizing a load operation from an address\n+The autovectorizer, when vectorizing a load operation from an address\n @var{addr} that may be unaligned, will generate two vector loads from\n the two aligned addresses around @var{addr}. It then generates a\n @code{REALIGN_LOAD} operation to extract the relevant data from the\n@@ -8786,7 +8788,7 @@ Returns the absolute value of @var{x}.\n @deftypefn Macro REAL_VALUE_TYPE REAL_VALUE_TRUNCATE (REAL_VALUE_TYPE @var{mode}, enum machine_mode @var{x})\n Truncates the floating point value @var{x} to fit in @var{mode}.  The\n return value is still a full-size @code{REAL_VALUE_TYPE}, but it has an\n-appropriate bit pattern to be output asa floating constant whose\n+appropriate bit pattern to be output as a floating constant whose\n precision accords with mode @var{mode}.\n @end deftypefn\n "}]}