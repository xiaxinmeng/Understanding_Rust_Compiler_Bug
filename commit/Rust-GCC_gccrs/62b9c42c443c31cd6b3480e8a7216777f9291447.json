{"sha": "62b9c42c443c31cd6b3480e8a7216777f9291447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiOWM0MmM0NDNjMzFjZDZiMzQ4MGU4YTcyMTY3NzdmOTI5MTQ0Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-04-13T11:18:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-04-13T11:18:36Z"}, "message": "invoke.texi: Fix typos.\n\n\t* doc/invoke.texi: Fix typos.\n\t* doc/tm.texi: Likewise.\n\nFrom-SVN: r65544", "tree": {"sha": "e5b04e592b41ae1b9c9cad9bc36acb7cfa8ea088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b04e592b41ae1b9c9cad9bc36acb7cfa8ea088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62b9c42c443c31cd6b3480e8a7216777f9291447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b9c42c443c31cd6b3480e8a7216777f9291447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b9c42c443c31cd6b3480e8a7216777f9291447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b9c42c443c31cd6b3480e8a7216777f9291447/comments", "author": null, "committer": null, "parents": [{"sha": "26af0e5d071455ed468c4ac41df3b79e80eae1d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26af0e5d071455ed468c4ac41df3b79e80eae1d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26af0e5d071455ed468c4ac41df3b79e80eae1d7"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "337f0cffbbd964099f3de8dc698e43ff11881329", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b9c42c443c31cd6b3480e8a7216777f9291447/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b9c42c443c31cd6b3480e8a7216777f9291447/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62b9c42c443c31cd6b3480e8a7216777f9291447", "patch": "@@ -1,3 +1,8 @@\n+2003-04-13  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* doc/invoke.texi: Fix typos.\n+\t* doc/tm.texi: Likewise.\n+\n 2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-typeck.c (digest_init, push_init_level): Use CONSTRUCTOR_ELTS."}, {"sha": "b69ea7e7fc22387ddba63591358cd2f5fe51a035", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b9c42c443c31cd6b3480e8a7216777f9291447/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b9c42c443c31cd6b3480e8a7216777f9291447/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=62b9c42c443c31cd6b3480e8a7216777f9291447", "patch": "@@ -2485,7 +2485,7 @@ Subscripting an array which has been declared @samp{register}.\n Taking the address of a variable which has been declared @samp{register}.\n \n @item @r{(C++ only)}\n-A base class is not initialized in a derived class' copy constrcutor.\n+A base class is not initialized in a derived class' copy constructor.\n @end itemize\n \n @item -Wno-div-by-zero\n@@ -3915,9 +3915,9 @@ sense when scheduling before register allocation, i.e.@: with\n @item -fsched2-use-superblocks\n @opindex fsched2-use-superblocks\n When schedulilng after register allocation, do use superblock scheduling\n-algorithm.  Superblock scheduling allows motion acress basic block boundaries\n+algorithm.  Superblock scheduling allows motion across basic block boundaries\n resulting on faster schedules.  This option is experimental, as not all machine\n-descriptions used by GCC model the CPU closely enought to avoid unreliable\n+descriptions used by GCC model the CPU closely enough to avoid unreliable\n results from the algorithm. \n \n This only makes sense when scheduling after register allocation, i.e.@: with\n@@ -3930,7 +3930,7 @@ allocation and additionally perform code duplication in order to increase the\n size of superblocks using tracer pass.  See @option{-ftracer} for details on\n trace formation.\n \n-This mode should produce faster but singificantly longer programs.  Also\n+This mode should produce faster but significantly longer programs.  Also\n without @code{-fbranch-probabilities} the traces constructed may not match the\n reality and hurt the performance.  This only makes\n sense when scheduling after register allocation, i.e.@: with\n@@ -6386,7 +6386,7 @@ problems with invalid Maverick instruction combinations.  This option\n is only valid if the @option{-mcpu=ep9312} option has been used to\n enable generation of instructions for the Cirrus Maverick floating\n point co-processor.  This option is not enabled by default, since the\n-problem is only present in older Maverick implemenations.  The default\n+problem is only present in older Maverick implementations.  The default\n can be re-enabled by use of the @option{-mno-cirrus-fix-invalid-insns}\n switch.\n "}, {"sha": "f9da5e289e12d12d5d402ef8df51bbb0be345069", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b9c42c443c31cd6b3480e8a7216777f9291447/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b9c42c443c31cd6b3480e8a7216777f9291447/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=62b9c42c443c31cd6b3480e8a7216777f9291447", "patch": "@@ -5738,7 +5738,7 @@ considered for the multipass insn scheduling.  If the hook returns\n zero for insn passed as the parameter, the insn will be not chosen to\n be issued.\n \n-The default is that any ready insns can be choosen to be issued.\n+The default is that any ready insns can be chosen to be issued.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_SCHED_DFA_NEW_CYCLE (FILE *, int, rtx, int, int, int *)"}]}