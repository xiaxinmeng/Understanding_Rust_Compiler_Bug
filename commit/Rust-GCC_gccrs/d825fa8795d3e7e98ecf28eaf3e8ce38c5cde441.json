{"sha": "d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyNWZhODc5NWQzZTdlOThlY2YyOGVhZjNlOGNlMzhjNWNkZTQ0MQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "1999-04-15T21:33:39Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "1999-04-15T21:33:39Z"}, "message": "Makefile.am (ordinary_java_source_files): Added new Connection and Handler classes in gnu.gcj.protocol.file package.\n\n\t* Makefile.am (ordinary_java_source_files): Added new Connection\n\tand Handler classes in gnu.gcj.protocol.file package.\n\t* Makefile.in: Rebuilt.\n\t* gnu/gcj/protocol/file/Connection.java: New file.\n\t* gnu/gcj/protocol/file/Handler.java: New file.\n\t* gnu/gcj/protocol/http/Connection.java (getInputStream): Check\n\tif doInput allows input.\n\t(getOutputStream): Check if doOutput allows output.\n\t* java/net/URLStreamHandler.java (parseURL): Fix indentation.\n\nFrom-SVN: r26479", "tree": {"sha": "010bb1005a87dbbb7c22463d782b9cdf1ebaba4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/010bb1005a87dbbb7c22463d782b9cdf1ebaba4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/comments", "author": null, "committer": null, "parents": [{"sha": "30bf7f73a61652863d415ca55f6aa4f6fa0e9f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bf7f73a61652863d415ca55f6aa4f6fa0e9f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30bf7f73a61652863d415ca55f6aa4f6fa0e9f51"}], "stats": {"total": 244, "additions": 243, "deletions": 1}, "files": [{"sha": "92b21d11ed1be7ada37af7d3e105fa3111c73483", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "patch": "@@ -1,3 +1,16 @@\n+1999-04-15  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* Makefile.am (ordinary_java_source_files): Added new Connection \n+\tand Handler classes in gnu.gcj.protocol.file package.\n+\t* Makefile.in: Rebuilt.\n+\n+\t* gnu/gcj/protocol/file/Connection.java: New file.\n+\t* gnu/gcj/protocol/file/Handler.java: New file.\n+\t* gnu/gcj/protocol/http/Connection.java (getInputStream): Check\n+\tif doInput allows input.\n+\t(getOutputStream): Check if doOutput allows output.\n+\t* java/net/URLStreamHandler.java (parseURL): Fix indentation.\n+\n 1999-04-14  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/net/natInetAddress.cc (lookup): On glibc2.0 systems, make"}, {"sha": "9c1aca1f1285a6f761ff38fbed7c51057dc9f2ae", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "patch": "@@ -332,6 +332,8 @@ gnu/gcj/text/LocaleData_en.java\t\\\n gnu/gcj/text/LocaleData_en_US.java \\\n gnu/gcj/text/SentenceBreakIterator.java\t\\\n gnu/gcj/text/WordBreakIterator.java \\\n+gnu/gcj/protocol/file/Connection.java \\\n+gnu/gcj/protocol/file/Handler.java \\\n gnu/gcj/protocol/http/Connection.java \\\n gnu/gcj/protocol/http/Handler.java \\\n java/io/BufferedInputStream.java \\"}, {"sha": "857b79cc8a3f0fe42766d77469a3ab2c0e576c3f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "patch": "@@ -212,6 +212,8 @@ gnu/gcj/text/LocaleData_en.java\t\\\n gnu/gcj/text/LocaleData_en_US.java \\\n gnu/gcj/text/SentenceBreakIterator.java\t\\\n gnu/gcj/text/WordBreakIterator.java \\\n+gnu/gcj/protocol/file/Connection.java \\\n+gnu/gcj/protocol/file/Handler.java \\\n gnu/gcj/protocol/http/Connection.java \\\n gnu/gcj/protocol/http/Handler.java \\\n java/io/BufferedInputStream.java \\\n@@ -552,6 +554,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P .deps/boehm.P \\\n .deps/gnu/gcj/convert/Output_JavaSrc.P \\\n .deps/gnu/gcj/convert/Output_UTF8.P \\\n .deps/gnu/gcj/convert/UnicodeToBytes.P \\\n+.deps/gnu/gcj/protocol/file/Connection.P \\\n+.deps/gnu/gcj/protocol/file/Handler.P \\\n .deps/gnu/gcj/protocol/http/Connection.P \\\n .deps/gnu/gcj/protocol/http/Handler.P \\\n .deps/gnu/gcj/text/BaseBreakIterator.P \\"}, {"sha": "7ad7ca0d659c1d099a5c0810ee284b5e8d98d167", "filename": "libjava/gnu/gcj/protocol/file/Connection.java", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fgnu%2Fgcj%2Fprotocol%2Ffile%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fgnu%2Fgcj%2Fprotocol%2Ffile%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Ffile%2FConnection.java?ref=d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "patch": "@@ -0,0 +1,169 @@\n+// Connection.java - Implementation of URLConnection for file protocol.\n+\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.protocol.file;\n+\n+import java.net.*;\n+import java.io.*;\n+import java.util.Vector;\n+import java.util.Hashtable;\n+import java.util.Enumeration;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date April 13, 1999.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification, as well\n+ * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n+ * Status:  Minimal subset of functionality.\n+ */\n+\n+class Connection extends URLConnection\n+{\n+  private Hashtable hdrHash = new Hashtable();\n+  private Vector hdrVec = new Vector();\n+  private boolean gotHeaders = false;\n+  private File fileIn;\n+\n+  public Connection(URL url)\n+  {\n+    super(url);\n+  }\n+\n+  // Implementation of abstract method.\n+  public void connect() throws IOException\n+  {\n+    // Call is ignored if already connected.\n+    if (connected)\n+      return;\n+\n+    // If not connected, then file needs to be openned.\n+    fileIn = new File(url.getFile());\n+    connected = true;\n+  }\n+\n+  public InputStream getInputStream() throws IOException\n+  {\n+    if (!connected)\n+      connect();\n+\n+    if (! doInput)\n+      throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n+    return new BufferedInputStream(new FileInputStream(fileIn));\n+  }\n+\n+  // Override default method in URLConnection.\n+  public OutputStream getOutputStream() throws IOException\n+  {\n+    if (!connected)\n+      connect();\n+\n+    if (! doOutput)\n+      throw new\n+\tProtocolException(\"Can't open OutputStream if doOutput is false\");\n+    return new BufferedOutputStream(new FileOutputStream(fileIn));\n+  }\n+\n+  // Override default method in URLConnection.\n+  public String getHeaderField(String name)\n+  {\n+    try\n+      {\n+\tgetHeaders();\n+      }\n+    catch (IOException x)\n+      {\n+\treturn null;\n+      }\n+    return (String) hdrHash.get(name.toLowerCase());\n+  }\n+\n+  // Override default method in URLConnection.\n+  public String getHeaderField(int n)\n+  {\n+    try\n+      {\n+\tgetHeaders();\n+      }\n+    catch (IOException x)\n+      {\n+\treturn null;\n+      }\n+    if (n < hdrVec.size())\n+      return getField((String) hdrVec.elementAt(n));\n+\n+    return null;\n+  }\n+\n+  // Override default method in URLConnection.\n+  public String getHeaderFieldKey(int n)\n+  {\n+    try\n+      {\n+\tgetHeaders();\n+      }\n+    catch (IOException x)\n+      {\n+\treturn null;\n+      }\n+    if (n < hdrVec.size())\n+      return getKey((String) hdrVec.elementAt(n));\n+\n+    return null;\n+  }\n+\n+  private String getKey(String str)\n+  {\n+    if (str == null)\n+      return null;\n+    int index = str.indexOf(':');\n+    if (index >= 0)\n+      return str.substring(0, index);\n+    else\n+      return null;\n+  }\n+\n+  private String getField(String str)\n+  {\n+    if (str == null)\n+      return null;\n+    int index = str.indexOf(':');\n+    if (index >= 0)\n+      return str.substring(index + 1).trim();\n+    else\n+      return str;\n+  }\n+\n+  private void getHeaders() throws IOException\n+  {\n+    if (gotHeaders)\n+      return;\n+    gotHeaders = true;\n+\n+    connect();\n+\n+    // Yes, it is overkill to use the hash table and vector here since\n+    // we're only putting one header in the file, but in case we need\n+    // to add others later and for consistency, we'll implement it this way.\n+\n+    // Add the only header we know about right now:  Content-length.\n+    long len = fileIn.length();\n+    String line = \"Content-length: \" + len;\n+    hdrVec.addElement(line);\n+\n+    // The key will never be null in this scenario since we build up the\n+    // headers ourselves.  If we ever rely on getting a header from somewhere\n+    // else, then we may have to check if the result of getKey() is null.\n+    String key = getKey(line);\n+    hdrHash.put(key.toLowerCase(), Long.toString(len));\n+  }\n+}"}, {"sha": "de7d79b35d0cfde427f654641bd7136c97c28399", "filename": "libjava/gnu/gcj/protocol/file/Handler.java", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fgnu%2Fgcj%2Fprotocol%2Ffile%2FHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fgnu%2Fgcj%2Fprotocol%2Ffile%2FHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Ffile%2FHandler.java?ref=d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "patch": "@@ -0,0 +1,49 @@\n+// Handler.java - URLStreamHandler for file protocol.\n+\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.protocol.file;\n+\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.io.IOException;\n+\n+/**\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date April 13, 1999.\n+ */\n+\n+/**\n+ * Written using on-line Java Platform 1.2 API Specification, as well\n+ * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n+ * Status:  Minimal functionality.\n+ */\n+\n+public class Handler extends URLStreamHandler\n+{\n+  protected URLConnection openConnection(URL url) throws IOException\n+  {\n+    // If a hostname is set, then we need to switch protocols to ftp\n+    // in order to transfer this from the remote host.\n+    if (! url.getHost().equals(\"\"))\n+      {\n+\t// Reset the protocol (and implicitly the handler) for this URL.\n+\t// Then have the URL attempt the connection again, as it will\n+\t// get the changed handler the next time around.\n+\turl.set(\"ftp\", url.getHost(), url.getPort(), url.getFile(),\n+\t\turl.getRef());\n+\t// Until the ftp protocol handler is written, this will cause\n+\t// a NullPointerException.\n+\treturn url.openConnection();\n+      }\n+\n+    return new Connection(url);\n+  }\n+}"}, {"sha": "e76aa772a134dc619e8ce5ef53b82caeb9aec03e", "filename": "libjava/gnu/gcj/protocol/http/Connection.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fhttp%2FConnection.java?ref=d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "patch": "@@ -135,6 +135,8 @@ public InputStream getInputStream() throws IOException\n     if (!connected)\n       connect();\n \n+    if (! doInput)\n+      throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n     if (bufferedIn == null)\n       bufferedIn = new BufferedInputStream(sock.getInputStream());\n     return bufferedIn;\n@@ -146,6 +148,9 @@ public OutputStream getOutputStream() throws IOException\n     if (!connected)\n       connect();\n \n+    if (! doOutput)\n+      throw new\n+\tProtocolException(\"Can't open OutputStream if doOutput is false\");\n     return sock.getOutputStream();\n   }\n "}, {"sha": "ae364e4dbf9fe3f46e3cac383a83ebc369171e74", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=d825fa8795d3e7e98ecf28eaf3e8ce38c5cde441", "patch": "@@ -26,7 +26,7 @@\n   protected abstract URLConnection openConnection(URL u)\n     throws java.io.IOException;\n \n-protected void parseURL(URL u, String spec, int start, int limit)\n+  protected void parseURL(URL u, String spec, int start, int limit)\n   {\n     String tmpStr;\n     String host = \"\";\t// Initialize to null string."}]}