{"sha": "c448a43e24ae85ee584aac5113081e4e360c1d81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ0OGE0M2UyNGFlODVlZTU4NGFhYzUxMTMwODFlNGUzNjBjMWQ4MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T22:27:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-21T22:27:25Z"}, "message": "(can_combine_p...\n\n(can_combine_p, combinable_i3pat, try_combine): Allow combination\ninvolving hard regs if the hard reg is a user variable.\n\nFrom-SVN: r7131", "tree": {"sha": "b9927bf68f93b7799a862ecba3ec63de13209b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9927bf68f93b7799a862ecba3ec63de13209b32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c448a43e24ae85ee584aac5113081e4e360c1d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c448a43e24ae85ee584aac5113081e4e360c1d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c448a43e24ae85ee584aac5113081e4e360c1d81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c448a43e24ae85ee584aac5113081e4e360c1d81/comments", "author": null, "committer": null, "parents": [{"sha": "defb5dab7df1a5162db4718d785ef01d004306e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defb5dab7df1a5162db4718d785ef01d004306e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defb5dab7df1a5162db4718d785ef01d004306e9"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "41c83dc39613cc7fbae1b3012cc2c5474e4715e2", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c448a43e24ae85ee584aac5113081e4e360c1d81/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c448a43e24ae85ee584aac5113081e4e360c1d81/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c448a43e24ae85ee584aac5113081e4e360c1d81", "patch": "@@ -927,14 +927,16 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n       if (GET_CODE (src) == REG\n \t  && ((REGNO (dest) < FIRST_PSEUDO_REGISTER\n \t       && ! HARD_REGNO_MODE_OK (REGNO (dest), GET_MODE (dest)))\n-#ifdef SMALL_REGISTER_CLASSES\n-\t      /* Don't extend the life of a hard register.  */\n-\t      || REGNO (src) < FIRST_PSEUDO_REGISTER\n-#else\n+\t      /* Don't extend the life of a hard register unless it is\n+\t\t user variable (if we have few registers) or it can't\n+\t\t fit into the desired register (meaning something special\n+\t\t is going on).  */\n \t      || (REGNO (src) < FIRST_PSEUDO_REGISTER\n-\t\t  && ! HARD_REGNO_MODE_OK (REGNO (src), GET_MODE (src)))\n+\t\t  && (! HARD_REGNO_MODE_OK (REGNO (src), GET_MODE (src))\n+#ifdef SMALL_REGISTER_CLASSES\n+\t\t      || ! REG_USERVAR_P (src)\n #endif\n-\t  ))\n+\t\t      ))))\n \treturn 0;\n     }\n   else if (GET_CODE (dest) != CC0)\n@@ -1038,7 +1040,8 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n    of a SET must prevent combination from occurring.\n \n    On machines where SMALL_REGISTER_CLASSES is defined, we don't combine\n-   if the destination of a SET is a hard register.\n+   if the destination of a SET is a hard register that isn't a user\n+   variable.\n \n    Before doing the above check, we first try to expand a field assignment\n    into a set of logical operations.\n@@ -1108,14 +1111,12 @@ combinable_i3pat (i3, loc, i2dest, i1dest, i1_not_in_src, pi3dest_killed)\n \t     CALL operation.  */\n \t  || (GET_CODE (inner_dest) == REG\n \t      && REGNO (inner_dest) < FIRST_PSEUDO_REGISTER\n+\t      && (! HARD_REGNO_MODE_OK (REGNO (inner_dest),\n+\t\t\t\t\tGET_MODE (inner_dest))\n #ifdef SMALL_REGISTER_CLASSES\n-\t      && GET_CODE (src) != CALL\n-#else\n-\t      && ! HARD_REGNO_MODE_OK (REGNO (inner_dest),\n-\t\t\t\t       GET_MODE (inner_dest))\n+\t\t || (GET_CODE (src) != CALL && ! REG_USERVAR_P (inner_dest))\n #endif\n-\t      )\n-\n+\t\t  ))\n \t  || (i1_not_in_src && reg_overlap_mentioned_p (i1dest, src)))\n \treturn 0;\n \n@@ -1254,7 +1255,8 @@ try_combine (i3, i2, i1)\n       && REGNO (SET_SRC (PATTERN (i3))) >= FIRST_PSEUDO_REGISTER\n #ifdef SMALL_REGISTER_CLASSES\n       && (GET_CODE (SET_DEST (PATTERN (i3))) != REG\n-\t  || REGNO (SET_DEST (PATTERN (i3))) >= FIRST_PSEUDO_REGISTER)\n+\t  || REGNO (SET_DEST (PATTERN (i3))) >= FIRST_PSEUDO_REGISTER\n+\t  || REG_USERVAR_P (SET_DEST (PATTERN (i3))))\n #endif\n       && find_reg_note (i3, REG_DEAD, SET_SRC (PATTERN (i3)))\n       && GET_CODE (PATTERN (i2)) == PARALLEL"}]}