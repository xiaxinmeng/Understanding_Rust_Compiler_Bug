{"sha": "5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhNTc1MTgyMzM4YTI2NzBmM2U3ZDYzNmM0OGEyZTJlZjJkMzJkYw==", "commit": {"author": {"name": "eric fang", "email": "eric.fang@arm.com", "date": "2020-04-20T08:42:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-05-12T00:36:24Z"}, "message": "runtime: fix TestCallersNilPointerPanic\n\nThe expected result of TestCallersNilPointerPanic has changed in\nGoLLVM.  This CL makes some elements of the expected result optional\nso that this test passes in both gccgo and GoLLVM.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/230138", "tree": {"sha": "1762e727216a89e5f13e95b3b0e6e8f6d96ed750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1762e727216a89e5f13e95b3b0e6e8f6d96ed750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca575182338a2670f3e7d636c48a2e2ef2d32dc/comments", "author": {"login": "erifan", "id": 31343225, "node_id": "MDQ6VXNlcjMxMzQzMjI1", "avatar_url": "https://avatars.githubusercontent.com/u/31343225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erifan", "html_url": "https://github.com/erifan", "followers_url": "https://api.github.com/users/erifan/followers", "following_url": "https://api.github.com/users/erifan/following{/other_user}", "gists_url": "https://api.github.com/users/erifan/gists{/gist_id}", "starred_url": "https://api.github.com/users/erifan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erifan/subscriptions", "organizations_url": "https://api.github.com/users/erifan/orgs", "repos_url": "https://api.github.com/users/erifan/repos", "events_url": "https://api.github.com/users/erifan/events{/privacy}", "received_events_url": "https://api.github.com/users/erifan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f157ed7749fd13c3562dd09696f7d675b86434f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f157ed7749fd13c3562dd09696f7d675b86434f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f157ed7749fd13c3562dd09696f7d675b86434f"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "02f6746cf6b6f1742424b77db226bd0d1f449fe0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca575182338a2670f3e7d636c48a2e2ef2d32dc/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca575182338a2670f3e7d636c48a2e2ef2d32dc/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "patch": "@@ -1,4 +1,4 @@\n-8645632618262d1661ece0c9e6fe9e04c6e3a878\n+876bdf3df3bb33dbf1414237d84be5da32a48082\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1fc7f8618943294495b53a66558d809b6789c2a7", "filename": "libgo/go/runtime/callers_test.go", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca575182338a2670f3e7d636c48a2e2ef2d32dc/libgo%2Fgo%2Fruntime%2Fcallers_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca575182338a2670f3e7d636c48a2e2ef2d32dc/libgo%2Fgo%2Fruntime%2Fcallers_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fcallers_test.go?ref=5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "patch": "@@ -67,7 +67,7 @@ func testCallers(t *testing.T, pcs []uintptr, pan bool) {\n \t}\n }\n \n-func testCallersEqual(t *testing.T, pcs []uintptr, want []string) {\n+func testCallersEqual(t *testing.T, pcs []uintptr, want []string, ignore map[string]struct{}) {\n \tgot := make([]string, 0, len(want))\n \n \tframes := runtime.CallersFrames(pcs)\n@@ -76,7 +76,9 @@ func testCallersEqual(t *testing.T, pcs []uintptr, want []string) {\n \t\tif !more || len(got) >= len(want) {\n \t\t\tbreak\n \t\t}\n-\t\tgot = append(got, frame.Function)\n+\t\tif _, ok := ignore[frame.Function]; !ok {\n+\t\t\tgot = append(got, frame.Function)\n+\t\t}\n \t}\n \tif !reflect.DeepEqual(want, got) {\n \t\tt.Fatalf(\"wanted %v, got %v\", want, got)\n@@ -106,7 +108,7 @@ func TestCallersPanic(t *testing.T) {\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n \t\ttestCallers(t, pcs, true)\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, nil)\n \t}()\n \tf1(true)\n }\n@@ -128,7 +130,7 @@ func TestCallersDoublePanic(t *testing.T) {\n \t\t\tif recover() == nil {\n \t\t\t\tt.Fatal(\"did not panic\")\n \t\t\t}\n-\t\t\ttestCallersEqual(t, pcs, want)\n+\t\t\ttestCallersEqual(t, pcs, want, nil)\n \t\t}()\n \t\tif recover() == nil {\n \t\t\tt.Fatal(\"did not panic\")\n@@ -149,7 +151,7 @@ func TestCallersAfterRecovery(t *testing.T) {\n \tdefer func() {\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, nil)\n \t}()\n \tdefer func() {\n \t\tif recover() == nil {\n@@ -177,7 +179,7 @@ func TestCallersAbortedPanic(t *testing.T) {\n \t\t// recovered, there is no remaining panic on the stack.\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, nil)\n \t}()\n \tdefer func() {\n \t\tr := recover()\n@@ -208,7 +210,7 @@ func TestCallersAbortedPanic2(t *testing.T) {\n \tdefer func() {\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, nil)\n \t}()\n \tfunc() {\n \t\tdefer func() {\n@@ -233,10 +235,16 @@ func TestCallersNilPointerPanic(t *testing.T) {\n \twant := []string{\"runtime.Callers\", \"runtime_test.TestCallersNilPointerPanic.func1\",\n \t\t\"runtime.gopanic\", \"runtime.panicmem\", \"runtime.sigpanic\",\n \t\t\"runtime_test.TestCallersNilPointerPanic\"}\n+\tign := make(map[string]struct{})\n \tif runtime.Compiler == \"gccgo\" {\n+\t\t// The expected results of gollvm and gccgo are slightly different, the result\n+\t\t// of gccgo does not contain tRunner, and the result of gollvm does not contain\n+\t\t// sigpanic. Make these two elementes optional to pass both of gollvm and gccgo.\n \t\twant = []string{\"runtime.Callers\", \"runtime_test.TestCallersNilPointerPanic..func1\",\n-\t\t\t\"runtime.gopanic\", \"runtime.panicmem\", \"runtime.sigpanic\",\n+\t\t\t\"runtime.gopanic\", \"runtime.panicmem\",\n \t\t\t\"runtime_test.TestCallersNilPointerPanic\"}\n+\t\tign[\"runtime.sigpanic\"] = struct{}{}\n+\t\tign[\"testing.tRunner\"] = struct{}{}\n \t}\n \n \tdefer func() {\n@@ -245,7 +253,7 @@ func TestCallersNilPointerPanic(t *testing.T) {\n \t\t}\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, ign)\n \t}()\n \tvar p *int\n \tif *p == 3 {\n@@ -271,7 +279,7 @@ func TestCallersDivZeroPanic(t *testing.T) {\n \t\t}\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, nil)\n \t}()\n \tvar n int\n \tif 5/n == 1 {\n@@ -298,7 +306,7 @@ func TestCallersDeferNilFuncPanic(t *testing.T) {\n \t\t}\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, nil)\n \t\tif state == 1 {\n \t\t\tt.Fatal(\"nil defer func panicked at defer time rather than function exit time\")\n \t\t}\n@@ -328,7 +336,7 @@ func TestCallersDeferNilFuncPanicWithLoop(t *testing.T) {\n \t\t}\n \t\tpcs := make([]uintptr, 20)\n \t\tpcs = pcs[:runtime.Callers(0, pcs)]\n-\t\ttestCallersEqual(t, pcs, want)\n+\t\ttestCallersEqual(t, pcs, want, nil)\n \t\tif state == 1 {\n \t\t\tt.Fatal(\"nil defer func panicked at defer time rather than function exit time\")\n \t\t}"}]}