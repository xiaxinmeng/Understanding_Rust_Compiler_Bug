{"sha": "f1612b8ae8a60f62cf5456b3357a341550534a7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2MTJiOGFlOGE2MGY2MmNmNTQ1NmIzMzU3YTM0MTU1MDUzNGE3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-08-17T20:36:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-08-19T20:08:17Z"}, "message": "c++: Check satisfaction before non-dep convs. [CWG2369]\n\nIt's very hard to use concepts to protect a template from hard errors due to\nunwanted instantiation if constraints aren't checked until after doing all\nsubstitution and checking of non-dependent conversions.\n\nIt was pretty straightforward to insert the satisfaction check into the\nlogic, but I needed to make the 3-parameter version of\nsatisfy_declaration_constraints call push_tinst_level like the 2-parameter\nversion already does.  For simplicity, I also made it add any needed outer\ntemplate arguments from the TEMPLATE_DECL to the args.\n\nThe testsuite changes are mostly because this change causes unsatisfaction\nto cause deduction to fail rather than reject the candidate later in\noverload resolution.\n\ngcc/cp/ChangeLog:\n\n\tDR 2369\n\t* cp-tree.h (push_tinst_level, push_tinst_level_loc): Declare.\n\t* constraint.cc (satisfy_declaration_constraints):\n\tUse add_outermost_template_args and push_tinst_level.\n\t* pt.c (add_outermost_template_args): Handle getting\n\ta TEMPLATE_DECL as the first argument.\n\t(push_tinst_level, push_tinst_level_loc): No longer static.\n\t(fn_type_unification): Check satisfaction before non-dependent\n\tconversions.\n\ngcc/testsuite/ChangeLog:\n\n\tDR 2369\n\t* g++.dg/concepts/diagnostic10.C: Adjust expexcted errors.\n\t* g++.dg/concepts/diagnostic13.C: Adjust expexcted errors.\n\t* g++.dg/concepts/diagnostic2.C: Adjust expexcted errors.\n\t* g++.dg/concepts/diagnostic3.C: Adjust expexcted errors.\n\t* g++.dg/concepts/diagnostic4.C: Adjust expexcted errors.\n\t* g++.dg/concepts/diagnostic5.C: Adjust expexcted errors.\n\t* g++.dg/concepts/diagnostic9.C: Adjust expexcted errors.\n\t* g++.dg/concepts/expression2.C: Adjust expexcted errors.\n\t* g++.dg/concepts/fn5.C: Adjust expexcted errors.\n\t* g++.dg/concepts/placeholder5.C: Adjust expexcted errors.\n\t* g++.dg/concepts/pr67595.C: Adjust expexcted errors.\n\t* g++.dg/cpp2a/concepts-pr78752-2.C: Adjust expexcted errors.\n\t* g++.dg/cpp2a/concepts-pr84140.C: Adjust expexcted errors.\n\t* g++.dg/cpp2a/concepts-recursive-sat3.C: Adjust expexcted errors.\n\t* g++.dg/cpp2a/concepts-requires18.C: Adjust expexcted errors.\n\t* g++.dg/cpp2a/concepts-requires19.C: Adjust expexcted errors.\n\t* g++.dg/cpp2a/concepts3.C: Adjust expexcted errors.\n\t* g++.dg/cpp2a/concepts-nondep1.C: New test.\n\t* g++.dg/cpp2a/concepts-nondep1a.C: New test.", "tree": {"sha": "1bd0b125354fadd755b4f4ac1af3d9e35292288a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd0b125354fadd755b4f4ac1af3d9e35292288a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1612b8ae8a60f62cf5456b3357a341550534a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1612b8ae8a60f62cf5456b3357a341550534a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1612b8ae8a60f62cf5456b3357a341550534a7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1612b8ae8a60f62cf5456b3357a341550534a7e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e01618e83bcd9eb3a2b27df30ed87106a748b4"}], "stats": {"total": 144, "additions": 106, "deletions": 38}, "files": [{"sha": "7a2f3b9fde02f5c90602ab201615e7336c3e8e92", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -2814,16 +2814,22 @@ satisfy_declaration_constraints (tree t, tree args, subst_info info)\n   info.in_decl = t;\n \n   gcc_assert (TREE_CODE (t) == TEMPLATE_DECL);\n+\n+  args = add_outermost_template_args (t, args);\n+\n+  tree result = boolean_true_node;\n   if (tree norm = normalize_template_requirements (t, info.noisy ()))\n     {\n+      if (!push_tinst_level (t, args))\n+\treturn result;\n       tree pattern = DECL_TEMPLATE_RESULT (t);\n       push_access_scope (pattern);\n-      tree result = satisfy_associated_constraints (norm, args, info);\n+      result = satisfy_associated_constraints (norm, args, info);\n       pop_access_scope (pattern);\n-      return result;\n+      pop_tinst_level ();\n     }\n \n-  return boolean_true_node;\n+  return result;\n }\n \n static tree"}, {"sha": "3f3717a6bb51696a4d5d1078f7557d1d9f9626d1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -6981,7 +6981,9 @@ extern bool template_parm_object_p\t\t(const_tree);\n extern tree tparm_object_argument\t\t(tree);\n extern bool explicit_class_specialization_p     (tree);\n extern bool push_tinst_level                    (tree);\n+extern bool push_tinst_level                    (tree, tree);\n extern bool push_tinst_level_loc                (tree, location_t);\n+extern bool push_tinst_level_loc                (tree, tree, location_t);\n extern void pop_tinst_level                     (void);\n extern struct tinst_level *outermost_tinst_level(void);\n extern void init_template_processing\t\t(void);"}, {"sha": "5dbdd37f6e3ed6b34e8457125fb3bbe22e1d00dd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -586,13 +586,23 @@ add_to_template_args (tree args, tree extra_args)\n    (EXTRA_ARGS) levels are added.  This function is used to combine\n    the template arguments from a partial instantiation with the\n    template arguments used to attain the full instantiation from the\n-   partial instantiation.  */\n+   partial instantiation.\n+\n+   If ARGS is a TEMPLATE_DECL, use its parameters as args.  */\n \n tree\n add_outermost_template_args (tree args, tree extra_args)\n {\n   tree new_args;\n \n+  if (!args)\n+    return extra_args;\n+  if (TREE_CODE (args) == TEMPLATE_DECL)\n+    {\n+      tree ti = get_template_info (DECL_TEMPLATE_RESULT (args));\n+      args = TI_ARGS (ti);\n+    }\n+\n   /* If there are more levels of EXTRA_ARGS than there are ARGS,\n      something very fishy is going on.  */\n   gcc_assert (TMPL_ARGS_DEPTH (args) >= TMPL_ARGS_DEPTH (extra_args));\n@@ -10772,7 +10782,7 @@ static GTY(()) struct tinst_level *last_error_tinst_level;\n /* We're starting to instantiate D; record the template instantiation context\n    at LOC for diagnostics and to restore it later.  */\n \n-static bool\n+bool\n push_tinst_level_loc (tree tldcl, tree targs, location_t loc)\n {\n   struct tinst_level *new_level;\n@@ -10826,7 +10836,7 @@ push_tinst_level_loc (tree tldcl, tree targs, location_t loc)\n /* We're starting substitution of TMPL<ARGS>; record the template\n    substitution context for diagnostics and to restore it later.  */\n \n-static bool\n+bool\n push_tinst_level (tree tmpl, tree args)\n {\n   return push_tinst_level_loc (tmpl, args, input_location);\n@@ -21297,13 +21307,24 @@ fn_type_unification (tree fn,\n       goto fail;\n     }\n \n+ deduced:\n+\n+  /* CWG2369: Check satisfaction before non-deducible conversions.  */\n+  if (!constraints_satisfied_p (fn, targs))\n+    {\n+      if (explain_p)\n+\tdiagnose_constraints (DECL_SOURCE_LOCATION (fn), fn, targs);\n+      goto fail;\n+    }\n+\n   /* DR 1391: All parameters have args, now check non-dependent parms for\n-     convertibility.  */\n-  if (check_non_deducible_conversions (parms, args, nargs, fn, strict, flags,\n-\t\t\t\t       convs, explain_p))\n+     convertibility.  We don't do this if all args were explicitly specified,\n+     as the standard says that we substitute explicit args immediately.  */\n+  if (incomplete\n+      && check_non_deducible_conversions (parms, args, nargs, fn, strict, flags,\n+\t\t\t\t\t  convs, explain_p))\n     goto fail;\n \n- deduced:\n   /* All is well so far.  Now, check:\n \n      [temp.deduct]"}, {"sha": "7a90b836143bde71936f6afe4953cf358fb20512", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic10.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -14,5 +14,5 @@ struct S\n void\n bar()\n {\n-  foo<S>(); // { dg-error \"unsatisfied constraints\" }\n+  foo<S>(); // { dg-error \"no match\" }\n }"}, {"sha": "1aff859f0bbe251d200327d5980f4de93bcc3700", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic13.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -10,5 +10,5 @@ void foo() { }\n \n void bar()\n {\n-  foo<int, char>(); // { dg-error \"unsatisfied constraints\" }\n+  foo<int, char>(); // { dg-error \"no match\" }\n }"}, {"sha": "004c7a378e7173f6bc0f4b0e094ef4b794ef65ce", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -22,7 +22,7 @@ template<typename T>\n void\n baz()\n {\n-  bar<int>(); // { dg-error \"unsatisfied constraints\" }\n+  bar<int>(); // { dg-error \"no match\" }\n /* { dg-begin-multiline-output \"\" }\n    bar<int>();\n             ^"}, {"sha": "7796e2642519f6d634460e4d170d6d027977d513", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -24,6 +24,6 @@ baz() // { dg-message \"with Is = .2, 3, 4... evaluated to .false.\" }\n void\n baz()\n {\n-  bar<int, char>(); // { dg-error \"unsatisfied constraints\" }\n-  baz<2,3,4>(); // { dg-error \"unsatisfied constraints\" }\n+  bar<int, char>(); // { dg-error \"no match\" }\n+  baz<2,3,4>(); // { dg-error \"no match\" }\n }"}, {"sha": "e38e35a4d009c5e6584a5919024d48377fcdb7a5", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic4.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -15,4 +15,4 @@ template<typename T>\n   // { dg-message \"typename remove_reference<T>::type\" \"\" { target *-*-* } .-1 }\n   void foo() { }\n \n-void bar() { foo<int> (); } // { dg-error \"use of\" }\n+void bar() { foo<int> (); } // { dg-error \"no match\" }"}, {"sha": "70426ea30994957b470630e47ed067094de871e6", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -39,5 +39,5 @@ template<typename T>\n void\n bar()\n {\n-  foo<char>(); // { dg-error \"use of\" }\n+  foo<char>(); // { dg-error \"no match\" }\n }"}, {"sha": "8eecfe6f81dd2b28d85a133247d2f4de32031fe6", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic9.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic9.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -1,11 +1,12 @@\n // PR c++/85278\n // { dg-do compile { target concepts } }\n \n+// { dg-message \"candidate: .*const decltype\\\\(f2::a\\\\)&&\" \"\" { target *-*-* } .+2 }\n template<typename T>\n void f2(T a)\n   requires requires (const decltype(a) &&x) { -x; }\n { }\n \n int main() {\n-  f2<void*>(nullptr); // { dg-error \"use of function .*const decltype\\\\(f2::a\\\\)&&\" }\n+  f2<void*>(nullptr); // { dg-error \"no match\" }\n }"}, {"sha": "4bb5bc71462c9c0c67b478d4b86d1a53445d22fd", "filename": "gcc/testsuite/g++.dg/concepts/expression2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression2.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -31,7 +31,7 @@ class S\n \n int main()\n {\n-  f1(s); // { dg-error \"unsatisfied|private\" }\n+  f1(s); // { dg-error \"no match\" }\n   f2(s); // { dg-error \"\" }\n \n   // When used in non-SFINAE contexts, make sure that we fail"}, {"sha": "bf277135e791a5bfe91d98d45aefb71b03046e58", "filename": "gcc/testsuite/g++.dg/concepts/fn5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn5.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -19,6 +19,6 @@ int main() {\n   S1<char> s1;      // { dg-error \"constraint|invalid\" }\n   S2<int, char> s2; // { dg-error \"constraint|invalid\" }\n \n-  f('a');    // { dg-error \"unsatisfied\" }\n-  g(0, 'a'); // { dg-error \"unsatisfied\" }\n+  f('a');    // { dg-error \"no match\" }\n+  g(0, 'a'); // { dg-error \"no match\" }\n }"}, {"sha": "3f29c9339739e062c311df85cec4e9219902f7e4", "filename": "gcc/testsuite/g++.dg/concepts/placeholder5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder5.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -14,5 +14,5 @@ concept bool C =\n template <C c>\n constexpr bool f() { return true; }\n \n-static_assert(f<double>(), \"\");\t// { dg-error \"unsatisfied|as type\" }\n-static_assert(f<int>(), \"\"); // { dg-error \"unsatisfied|as type\" }\n+static_assert(f<double>(), \"\");\t// { dg-error \"no match\" }\n+static_assert(f<int>(), \"\"); // { dg-error \"no match\" }"}, {"sha": "37adf931fb5d33a7cea7b048d3571c8f4a61fbdd", "filename": "gcc/testsuite/g++.dg/concepts/pr67595.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr67595.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr67595.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr67595.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -5,7 +5,7 @@ template <class X> concept bool allocatable = requires{{new X}->X *; };\n template <class X> concept bool semiregular = allocatable<X>;\n template <class X> concept bool readable = requires{requires semiregular<X>;};\n template <class> int weak_input_iterator = requires{{0}->readable;};\n-template <class X> bool input_iterator{weak_input_iterator<X>}; // { dg-warning \"narrowing conversion\" }\n+template <class X> bool input_iterator{weak_input_iterator<X>}; // { dg-prune-output \"narrowing conversion\" }\n template <class X> bool forward_iterator{input_iterator<X>};\n template <class X> bool bidirectional_iterator{forward_iterator<X>};\n template <class X>"}, {"sha": "5304b661d2ac895c283cf03dc921f0f5d65a4170", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-nondep1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep1.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -0,0 +1,19 @@\n+// DR 2369\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> struct Z {\n+  typedef typename T::x xx;\n+};\n+template <class T> concept C = requires { typename T::A; };\n+template <C T> typename Z<T>::xx f(void *, T); // #1\n+template <class T> void f(int, T); // #2\n+struct A {} a;\n+struct ZZ {\n+  template <class T, class = typename Z<T>::xx> operator T *();\n+  operator int();\n+};\n+int main() {\n+  ZZ zz;\n+  f(1, a); // OK, deduction fails for #1 because there is no conversion from int to void*\n+  f(zz, 42); // OK, deduction fails for #1 because C<int> is not satisfied\n+}"}, {"sha": "2ba4dbc84d6e442ba32e9a1328a752a2f4b2cb69", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-nondep1a.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nondep1a.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -0,0 +1,20 @@\n+// DR 2369\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> struct Z {\n+  typedef typename T::x xx;\n+};\n+template <class T> concept C = requires { typename T::A; }; // { dg-message \"T::A\" }\n+template <C T> typename Z<T>::xx f(void *, T); // { dg-message \"not satisfied\" }\n+\n+struct A {} a;\n+struct ZZ {\n+  template <class T, class = typename Z<T>::xx> operator T *();\n+  operator int();\n+};\n+int main() {\n+  ZZ zz;\n+  f(1, a); // { dg-error \"no match\" } no conversion from int to void*\n+  // { dg-message \"cannot convert\" \"\" { target *-*-* } .-1 }\n+  f(zz, 42); // { dg-error \"no match\" } C<int> is not satisfied\n+}"}, {"sha": "7d7c716cfecf705882e8b7caba9f722ea9983dd0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr78752-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr78752-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr78752-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr78752-2.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -17,5 +17,5 @@ int main()\n   func(1, 2, 3);\n \n   t.func(1, 2, \"\"); // { dg-error \"no match\" }\n-  func(1, 2, \"\"); // { dg-error \"unsatisfied constraints\" }\n+  func(1, 2, \"\"); // { dg-error \"no match\" }\n }"}, {"sha": "7eff65bee9e5a8b7d199340fde5d5d9c6df83d21", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84140.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -34,4 +34,3 @@ int main()\n {\n   return distance(I<int>{}, I<void>{});\n }\n-"}, {"sha": "b2a6a796ea7cfbd4a9645dd443aa6ac1b1836701", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-recursive-sat3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat3.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -8,5 +8,5 @@ void foo(T t) { }\n \n void test()\n {\n-  foo(0); // { dg-error \"unsatisfied constraints\" }\n+  foo(0); // { dg-error \"no match\" }\n }"}, {"sha": "a9b7720cc6c1a97aae4d3da148f7f529745bd81a", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires18.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -67,11 +67,11 @@ void test()\n {\n   f1<int>();\n   f1<bool>();\n-  f1<void>(); // { dg-error \"unsatisfied\" }\n+  f1<void>(); // { dg-error \"no match\" }\n \n   f2<int>();\n   f2<bool>();\n-  f2<void>(); // { dg-error \"unsatisfied\" }\n+  f2<void>(); // { dg-error \"no match\" }\n \n   data<char> x;\n   x.f1<int>();"}, {"sha": "68aeccf3197eaa9d664146b1e6cee50ca83db46b", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires19.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires19.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -47,12 +47,12 @@ void f6(T x) requires requires { requires check_v<decltype(x)>; } { }\n \n void test()\n {\n-  f1<int>(); // { dg-error \"unsatisfied\" }\n-  f2(0); // { dg-error \"unsatisfied\" }\n+  f1<int>(); // { dg-error \"no match\" }\n+  f2(0); // { dg-error \"no match\" }\n \n-  f3<int>(); // { dg-error \"unsatisfied\" }\n-  f4(0); // { dg-error \"unsatisfied\" }\n+  f3<int>(); // { dg-error \"no match\" }\n+  f4(0); // { dg-error \"no match\" }\n \n-  f5<int>(); // { dg-error \"unsatisfied\" }\n-  f6(0); // { dg-error \"unsatisfied\" }\n+  f5<int>(); // { dg-error \"no match\" }\n+  f6(0); // { dg-error \"no match\" }\n }"}, {"sha": "1e28e31ad88a1ca91a68297261f67270d5576c31", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1612b8ae8a60f62cf5456b3357a341550534a7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts3.C?ref=f1612b8ae8a60f62cf5456b3357a341550534a7e", "patch": "@@ -42,7 +42,7 @@ template<typename T>\n void f3() { }\n \n void driver2() {\n-  f1<S1>(); // { dg-error \"unsatisfied|is private\" }\n-  f2<S1>(); // { dg-error \"unsatisfied|is private\" }\n-  f3<S1>(); // { dg-error \"unsatisfied|is private\" }\n+  f1<S1>(); // { dg-error \"no match\" }\n+  f2<S1>(); // { dg-error \"no match\" }\n+  f3<S1>(); // { dg-error \"no match\" }\n }"}]}