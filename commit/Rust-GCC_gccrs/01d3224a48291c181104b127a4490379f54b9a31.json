{"sha": "01d3224a48291c181104b127a4490379f54b9a31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkMzIyNGE0ODI5MWMxODExMDRiMTI3YTQ0OTAzNzlmNTRiOWEzMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-06-04T07:13:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-06-04T07:13:03Z"}, "message": "re PR rtl-optimization/11018 ([SPARC] -mcpu=ultrasparc busts tar-1.13.25)\n\n\tPR optimization/11018\n\t* config/sparc/sparc.c (sparc_v8plus_shift): Use which_alternative\n\tconsistently to decide whether the scratch register is really\n\trequired.\n\nFrom-SVN: r67429", "tree": {"sha": "eafe7d8651fbe62104030c889a1ac08787a4a629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eafe7d8651fbe62104030c889a1ac08787a4a629"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01d3224a48291c181104b127a4490379f54b9a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d3224a48291c181104b127a4490379f54b9a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d3224a48291c181104b127a4490379f54b9a31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d3224a48291c181104b127a4490379f54b9a31/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef0139b122ef79e4773e2c495fff8075c68b0c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0139b122ef79e4773e2c495fff8075c68b0c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0139b122ef79e4773e2c495fff8075c68b0c6c"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "5c585961cc1e0866f073ba01bd9e54a49135e1ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d3224a48291c181104b127a4490379f54b9a31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d3224a48291c181104b127a4490379f54b9a31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01d3224a48291c181104b127a4490379f54b9a31", "patch": "@@ -1,3 +1,10 @@\n+2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/11018\n+\t* config/sparc/sparc.c (sparc_v8plus_shift): Use which_alternative\n+\tconsistently to decide whether the scratch register is really\n+\trequired.\n+\n 2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR optimization/10876"}, {"sha": "f368e967071501b7380674372fb386b6edad224e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d3224a48291c181104b127a4490379f54b9a31/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d3224a48291c181104b127a4490379f54b9a31/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=01d3224a48291c181104b127a4490379f54b9a31", "patch": "@@ -3401,7 +3401,7 @@ mem_min_alignment (mem, desired)\n \n \f\n /* Vectors to keep interesting information about registers where it can easily\n-   be got.  We use to use the actual mode value as the bit number, but there\n+   be got.  We used to use the actual mode value as the bit number, but there\n    are more than 32 modes now.  Instead we use two tables: one indexed by\n    hard register number, and one indexed by mode.  */\n \n@@ -7969,6 +7969,8 @@ sparc_check_64 (x, insn)\n   return 0;\n }\n \n+/* Returns assembly code to perform a DImode shift using\n+   a 64-bit global or out register on SPARC-V8+.  */\n char *\n sparc_v8plus_shift (operands, insn, opcode)\n      rtx *operands;\n@@ -7977,8 +7979,11 @@ sparc_v8plus_shift (operands, insn, opcode)\n {\n   static char asm_code[60];\n \n-  if (GET_CODE (operands[3]) == SCRATCH)\n+  /* The scratch register is only required when the destination\n+     register is not a 64-bit global or out register.  */\n+  if (which_alternative != 2)\n     operands[3] = operands[0];\n+\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n       output_asm_insn (\"mov\\t%1, %3\", operands);\n@@ -7992,6 +7997,7 @@ sparc_v8plus_shift (operands, insn, opcode)\n     }\n \n   strcpy(asm_code, opcode);\n+\n   if (which_alternative != 2)\n     return strcat (asm_code, \"\\t%0, %2, %L0\\n\\tsrlx\\t%L0, 32, %H0\");\n   else"}, {"sha": "ab76c7b8343f6cf5b595272d9701752646192194", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d3224a48291c181104b127a4490379f54b9a31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d3224a48291c181104b127a4490379f54b9a31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01d3224a48291c181104b127a4490379f54b9a31", "patch": "@@ -1,3 +1,7 @@\n+2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/ultrasp9.c: New test.\n+\n 2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/compile/20030604-1.c: New test."}, {"sha": "885420e0509c31110c0842dcd84699c0a9f177f7", "filename": "gcc/testsuite/gcc.dg/ultrasp9.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d3224a48291c181104b127a4490379f54b9a31/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d3224a48291c181104b127a4490379f54b9a31/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp9.c?ref=01d3224a48291c181104b127a4490379f54b9a31", "patch": "@@ -0,0 +1,39 @@\n+/* PR optimization/11018 */\n+/* Originator: <partain@dcs.gla.ac.uk> */\n+/* { dg-do run { target sparc*-*-* } } */\n+/* { dg-options \"-O2 -mcpu=ultrasparc\" } */\n+\n+/* This used to fail on 32-bit Ultrasparc because\n+   of broken DImode shift patterns.  */\n+\n+extern void abort(void);\n+\n+typedef unsigned long long uint64_t;\n+typedef unsigned int size_t;\n+\n+\n+void to_octal (uint64_t value, char *where, size_t size)\n+{\n+  uint64_t v = value;\n+  size_t i = size;\n+\n+  do\n+    {\n+      where[--i] = '0' + (v & ((1 << 3) - 1));\n+      v >>= 3;\n+    }\n+  while (i);\n+}\n+\n+\n+int main (void)\n+{\n+  char buf[8];\n+\n+  to_octal(010644, buf, 6);\n+\n+  if (buf[1] != '1')\n+     abort();\n+\n+  return 0;\n+}"}]}