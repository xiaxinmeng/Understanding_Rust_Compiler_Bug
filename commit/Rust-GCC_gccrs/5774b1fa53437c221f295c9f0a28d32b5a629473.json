{"sha": "5774b1fa53437c221f295c9f0a28d32b5a629473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3NGIxZmE1MzQzN2MyMjFmMjk1YzlmMGEyOGQzMmI1YTYyOTQ3Mw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:36:21Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:36:21Z"}, "message": "[Patch ARM 17/17] Enable _Float16 for ARM and fix PR target/63250\n\ngcc/\n\n\tPR target/63250\n\t* config/arm/arm-builtins.c (arm_simd_floatHF_type_node): Rename to...\n\t(arm_fp16_type_node): ...This, make visibile.\n\t(arm_simd_builtin_std_type): Rename arm_simd_floatHF_type_node to\n\tarm_fp16_type_node.\n\t(arm_init_simd_builtin_types): Likewise.\n\t(arm_init_fp16_builtins): Likewise.\n\t* config/arm/arm.c (arm_excess_precision): New.\n\t(arm_floatn_mode): Likewise.\n\t(TARGET_C_EXCESS_PRECISION): Likewise.\n\t(TARGET_FLOATN_MODE): Likewise.\n\t(arm_promoted_type): Only promote arm_fp16_type_node.\n\t* config/arm/arm.h (arm_fp16_type_node): Declare.\n\ngcc/testsuite/\n\n\tPR target/63250\n\t* lib/target-supports.exp (add_options_for_float16): Add\n\t-mfp16-format=ieee when testign arm*-*-*.\n\nFrom-SVN: r242784", "tree": {"sha": "4c6744904be9fd9860e06838a84db579accf3217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c6744904be9fd9860e06838a84db579accf3217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5774b1fa53437c221f295c9f0a28d32b5a629473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5774b1fa53437c221f295c9f0a28d32b5a629473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5774b1fa53437c221f295c9f0a28d32b5a629473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5774b1fa53437c221f295c9f0a28d32b5a629473/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e0f10a0f590b31bd7d78bd194c1c9808008f378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0f10a0f590b31bd7d78bd194c1c9808008f378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0f10a0f590b31bd7d78bd194c1c9808008f378"}], "stats": {"total": 114, "additions": 105, "deletions": 9}, "files": [{"sha": "600a9ef747ae24769e3e8de573f973945a2010f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5774b1fa53437c221f295c9f0a28d32b5a629473", "patch": "@@ -1,3 +1,19 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/63250\n+\t* config/arm/arm-builtins.c (arm_simd_floatHF_type_node): Rename to...\n+\t(arm_fp16_type_node): ...This, make visibile.\n+\t(arm_simd_builtin_std_type): Rename arm_simd_floatHF_type_node to\n+\tarm_fp16_type_node.\n+\t(arm_init_simd_builtin_types): Likewise.\n+\t(arm_init_fp16_builtins): Likewise.\n+\t* config/arm/arm.c (arm_excess_precision): New.\n+\t(arm_floatn_mode): Likewise.\n+\t(TARGET_C_EXCESS_PRECISION): Likewise.\n+\t(TARGET_FLOATN_MODE): Likewise.\n+\t(arm_promoted_type): Only promote arm_fp16_type_node.\n+\t* config/arm/arm.h (arm_fp16_type_node): Declare.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm.c (arm_convert_to_type): Delete."}, {"sha": "5ed38d1608cfbfbd1248d76705fcf675bc36c2b2", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=5774b1fa53437c221f295c9f0a28d32b5a629473", "patch": "@@ -652,7 +652,8 @@ static struct arm_simd_type_info arm_simd_types [] = {\n };\n #undef ENTRY\n \n-static tree arm_simd_floatHF_type_node = NULL_TREE;\n+/* The user-visible __fp16 type.  */\n+tree arm_fp16_type_node = NULL_TREE;\n static tree arm_simd_intOI_type_node = NULL_TREE;\n static tree arm_simd_intEI_type_node = NULL_TREE;\n static tree arm_simd_intCI_type_node = NULL_TREE;\n@@ -739,7 +740,7 @@ arm_simd_builtin_std_type (enum machine_mode mode,\n     case XImode:\n       return arm_simd_intXI_type_node;\n     case HFmode:\n-      return arm_simd_floatHF_type_node;\n+      return arm_fp16_type_node;\n     case SFmode:\n       return float_type_node;\n     case DFmode:\n@@ -840,8 +841,8 @@ arm_init_simd_builtin_types (void)\n   /* Continue with standard types.  */\n   /* The __builtin_simd{64,128}_float16 types are kept private unless\n      we have a scalar __fp16 type.  */\n-  arm_simd_types[Float16x4_t].eltype = arm_simd_floatHF_type_node;\n-  arm_simd_types[Float16x8_t].eltype = arm_simd_floatHF_type_node;\n+  arm_simd_types[Float16x4_t].eltype = arm_fp16_type_node;\n+  arm_simd_types[Float16x8_t].eltype = arm_fp16_type_node;\n   arm_simd_types[Float32x2_t].eltype = float_type_node;\n   arm_simd_types[Float32x4_t].eltype = float_type_node;\n \n@@ -1754,11 +1755,11 @@ arm_init_iwmmxt_builtins (void)\n static void\n arm_init_fp16_builtins (void)\n {\n-  arm_simd_floatHF_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (arm_simd_floatHF_type_node) = GET_MODE_PRECISION (HFmode);\n-  layout_type (arm_simd_floatHF_type_node);\n+  arm_fp16_type_node = make_node (REAL_TYPE);\n+  TYPE_PRECISION (arm_fp16_type_node) = GET_MODE_PRECISION (HFmode);\n+  layout_type (arm_fp16_type_node);\n   if (arm_fp16_format)\n-    (*lang_hooks.types.register_builtin_type) (arm_simd_floatHF_type_node,\n+    (*lang_hooks.types.register_builtin_type) (arm_fp16_type_node,\n \t\t\t\t\t       \"__fp16\");\n }\n "}, {"sha": "74cb64ce7892244bca5bb4a73631e67cd67ed285", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5774b1fa53437c221f295c9f0a28d32b5a629473", "patch": "@@ -266,6 +266,7 @@ static bool arm_builtin_support_vector_misalignment (machine_mode mode,\n \t\t\t\t\t\t     int misalignment,\n \t\t\t\t\t\t     bool is_packed);\n static void arm_conditional_register_usage (void);\n+static enum flt_eval_method arm_excess_precision (enum excess_precision_type);\n static reg_class_t arm_preferred_rename_class (reg_class_t rclass);\n static unsigned int arm_autovectorize_vector_sizes (void);\n static int arm_default_branch_cost (bool, bool);\n@@ -299,6 +300,7 @@ static bool arm_asm_elf_flags_numeric (unsigned int flags, unsigned int *num);\n static unsigned int arm_elf_section_type_flags (tree decl, const char *name,\n \t\t\t\t\t\tint reloc);\n static void arm_expand_divmod_libfunc (rtx, machine_mode, rtx, rtx, rtx *, rtx *);\n+static machine_mode arm_floatn_mode (int, bool);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -444,6 +446,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef  TARGET_ASM_INTERNAL_LABEL\n #define TARGET_ASM_INTERNAL_LABEL arm_internal_label\n \n+#undef TARGET_FLOATN_MODE\n+#define TARGET_FLOATN_MODE arm_floatn_mode\n+\n #undef  TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL arm_function_ok_for_sibcall\n \n@@ -734,6 +739,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_EXPAND_DIVMOD_LIBFUNC\n #define TARGET_EXPAND_DIVMOD_LIBFUNC arm_expand_divmod_libfunc\n \n+#undef TARGET_C_EXCESS_PRECISION\n+#define TARGET_C_EXCESS_PRECISION arm_excess_precision\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -22512,7 +22520,9 @@ arm_debugger_arg_offset (int value, rtx addr)\n static tree\n arm_promoted_type (const_tree t)\n {\n-  if (SCALAR_FLOAT_TYPE_P (t) && TYPE_PRECISION (t) == 16)\n+  if (SCALAR_FLOAT_TYPE_P (t)\n+      && TYPE_PRECISION (t) == 16\n+      && TYPE_MAIN_VARIANT (t) == arm_fp16_type_node)\n     return float_type_node;\n   return NULL_TREE;\n }\n@@ -22534,6 +22544,61 @@ arm_scalar_mode_supported_p (machine_mode mode)\n     return default_scalar_mode_supported_p (mode);\n }\n \n+/* Set the value of FLT_EVAL_METHOD.\n+   ISO/IEC TS 18661-3 defines two values that we'd like to make use of:\n+\n+    0: evaluate all operations and constants, whose semantic type has at\n+       most the range and precision of type float, to the range and\n+       precision of float; evaluate all other operations and constants to\n+       the range and precision of the semantic type;\n+\n+    N, where _FloatN is a supported interchange floating type\n+       evaluate all operations and constants, whose semantic type has at\n+       most the range and precision of _FloatN type, to the range and\n+       precision of the _FloatN type; evaluate all other operations and\n+       constants to the range and precision of the semantic type;\n+\n+   If we have the ARMv8.2-A extensions then we support _Float16 in native\n+   precision, so we should set this to 16.  Otherwise, we support the type,\n+   but want to evaluate expressions in float precision, so set this to\n+   0.  */\n+\n+static enum flt_eval_method\n+arm_excess_precision (enum excess_precision_type type)\n+{\n+  switch (type)\n+    {\n+      case EXCESS_PRECISION_TYPE_FAST:\n+      case EXCESS_PRECISION_TYPE_STANDARD:\n+\t/* We can calculate either in 16-bit range and precision or\n+\t   32-bit range and precision.  Make that decision based on whether\n+\t   we have native support for the ARMv8.2-A 16-bit floating-point\n+\t   instructions or not.  */\n+\treturn (TARGET_VFP_FP16INST\n+\t\t? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n+\t\t: FLT_EVAL_METHOD_PROMOTE_TO_FLOAT);\n+      case EXCESS_PRECISION_TYPE_IMPLICIT:\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+}\n+\n+\n+/* Implement TARGET_FLOATN_MODE.  Make very sure that we don't provide\n+   _Float16 if we are using anything other than ieee format for 16-bit\n+   floating point.  Otherwise, punt to the default implementation.  */\n+static machine_mode\n+arm_floatn_mode (int n, bool extended)\n+{\n+  if (!extended && n == 16)\n+    return arm_fp16_format == ARM_FP16_FORMAT_IEEE ? HFmode : VOIDmode;\n+\n+  return default_floatn_mode (n, extended);\n+}\n+\n+\n /* Set up OPERANDS for a register copy from SRC to DEST, taking care\n    not to early-clobber SRC registers in the process.\n "}, {"sha": "464710b2a98ee737810816ac50aca77e5610e7fa", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=5774b1fa53437c221f295c9f0a28d32b5a629473", "patch": "@@ -73,6 +73,11 @@ extern int arm_ccfsm_state;\n extern GTY(()) rtx arm_target_insn;\n /* Callback to output language specific object attributes.  */\n extern void (*arm_lang_output_object_attributes_hook)(void);\n+\n+/* This type is the user-visible __fp16.  We need it in a few places in\n+   the backend.  Defined in arm-builtins.c.  */\n+extern tree arm_fp16_type_node;\n+\n \f\n #undef  CPP_SPEC\n #define CPP_SPEC \"%(subtarget_cpp_spec)\t\t\t\t\t\\"}, {"sha": "0b5c305921473c5970d017320ed33d985bc24687", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5774b1fa53437c221f295c9f0a28d32b5a629473", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/63250\n+\t* lib/target-supports.exp (add_options_for_float16): Add\n+\t-mfp16-format=ieee when testign arm*-*-*.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/arm/fp16-rounding-alt-1.c (ROUNDED): Change expected"}, {"sha": "2192eb6539b12896816f8844e056f3bf5016e4d9", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5774b1fa53437c221f295c9f0a28d32b5a629473/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5774b1fa53437c221f295c9f0a28d32b5a629473", "patch": "@@ -2626,6 +2626,9 @@ proc check_effective_target_floatn_nx_runtime {} {\n # the function name.\n \n proc add_options_for_float16 { flags } {\n+    if { [istarget arm*-*-*] } {\n+\treturn \"$flags -mfp16-format=ieee\"\n+    }\n     return \"$flags\"\n }\n "}]}