{"sha": "3615587a37d3a302ab9ac8d3ac638bdc9eb24e71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYxNTU4N2EzN2QzYTMwMmFiOWFjOGQzYWM2MzhiZGM5ZWIyNGU3MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-24T22:49:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-24T22:49:55Z"}, "message": "entered into RCS\n\nFrom-SVN: r3872", "tree": {"sha": "0c031e40dc6a360f20f49377929a76b791abfffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c031e40dc6a360f20f49377929a76b791abfffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71/comments", "author": null, "committer": null, "parents": [{"sha": "5aac39057ba46e7f94a8aae9c5a3c4b29d8ed0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aac39057ba46e7f94a8aae9c5a3c4b29d8ed0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aac39057ba46e7f94a8aae9c5a3c4b29d8ed0a9"}], "stats": {"total": 259, "additions": 184, "deletions": 75}, "files": [{"sha": "a2755569bfd8568d51f34dbd5f88082d92351b94", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=3615587a37d3a302ab9ac8d3ac638bdc9eb24e71", "patch": "@@ -186,10 +186,13 @@ extern int target_flags;\n \n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n-   On the clipper, 0-15 hold int, 16-31 hold float.  */\n+   On the clipper, 0-15 hold int, 16-31 hold float. DImode regs must be\n+   even */\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\\\n-  ((GET_MODE_CLASS(MODE) == MODE_FLOAT) ? (REGNO) >= 16 : (REGNO) < 16)\n+  ((GET_MODE_CLASS(MODE) == MODE_FLOAT)\t\t\\\n+   ? (REGNO) >= 16\t\t\t\t\\\n+   : (REGNO) < 16 && ((MODE) !=DImode || ((REGNO) & 1) == 0))\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2."}, {"sha": "d53312d9fabe6bea86afd733cf35ec880066d4f8", "filename": "gcc/config/clipper/clipper.md", "status": "modified", "additions": 179, "deletions": 73, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71/gcc%2Fconfig%2Fclipper%2Fclipper.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3615587a37d3a302ab9ac8d3ac638bdc9eb24e71/gcc%2Fconfig%2Fclipper%2Fclipper.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.md?ref=3615587a37d3a302ab9ac8d3ac638bdc9eb24e71", "patch": "@@ -206,7 +206,9 @@\n     }\n \n   return \\\"stord  %1,%0\\\";\t\t/* f-> m */\n-}\")\n+}\"\n+[(set_attr \"type\" \"store,store\")\n+ (set_attr \"cc\" \"clobber,unchanged\")])\n \n \n (define_expand \"movsf\"\n@@ -278,7 +280,8 @@\n     return \\\"stors  %1,%0\\\";\t\t/* f-> m */\n \n   return \\\"storw   %1,%0\\\";\t\t/* r -> m */\n-}\")\n+}\"\n+[(set_attr \"type\" \"store\")])\n \n \n (define_expand \"movdi\"\n@@ -389,6 +392,10 @@\n   if (which_alternative == 2)\n     {\n       val = INTVAL (operands[1]);\t/* known const ->reg */\n+\n+      if (val == -1)\n+\treturn \\\"notq   $0,%0\\\";\n+\n       if (val < 0 || val >= 16)\n \treturn \\\"loadi  %1,%0\\\";\n \n@@ -478,6 +485,7 @@\n   \"storb  %1,%0\"\n [(set_attr \"type\" \"store\")])\n \n+\f\n ;;\n ;; block move\n ;;\n@@ -624,7 +632,7 @@\n   \"\"\n   \"cnvwd  %1,%0\")\n \n-\f\n+\n ;; Float-to-fix conversion insns.\n \n (define_insn \"fix_truncsfsi2\"\n@@ -646,15 +654,17 @@\n \t(plus:DF (match_operand:DF 1 \"fp_reg_operand\" \"0\")\n \t\t (match_operand:DF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"addd   %2,%0\")\n+  \"addd   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n \n (define_insn \"addsf3\"\n   [(set (match_operand:SF 0 \"fp_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"fp_reg_operand\" \"0\")\n \t\t (match_operand:SF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"adds   %2,%0\")\n+  \"adds   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n (define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n@@ -678,16 +688,12 @@\n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"=r,r,r\")\n \t(plus:SI (match_operand:SI 1 \"int_reg_operand\" \"%0,r,r\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"rn,0,rn\")))]\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"rn,0,r\")))]\n   \"\"\n   \"*\n {\n   if (which_alternative == 2)\t\t/* 3 address version */\n-    {\n-      if (GET_CODE (operands[2]) == CONST_INT)\n-\treturn \\\"loada  %a2(%1),%0\\\";\n-      return \\\"loada  [%2](%1),%0\\\";\n-    }\n+    return \\\"loada  [%2](%1),%0\\\";\n \t\t\t\t\t/* 2 address version */\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -772,14 +778,16 @@\n \t(minus:DF (match_operand:DF 1 \"fp_reg_operand\" \"0\")\n \t\t  (match_operand:DF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"subd   %2,%0\")\n+  \"subd   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n (define_insn \"subsf3\"\n   [(set (match_operand:SF 0 \"fp_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"fp_reg_operand\" \"0\")\n \t\t  (match_operand:SF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"subs   %2,%0\")\n+  \"subs   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n \f\n ;;- Multiply instructions.\n@@ -789,14 +797,34 @@\n \t(mult:DF (match_operand:DF 1 \"fp_reg_operand\" \"0\")\n \t\t (match_operand:DF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"muld   %2,%0\")\n+  \"muld   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"fp_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"fp_reg_operand\" \"0\")\n \t\t (match_operand:SF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"muls   %2,%0\")\n+  \"muls   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"mulsidi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"int_reg_operand\" \"%0\"))\n+\t         (sign_extend:DI (match_operand:SI 2 \"int_reg_operand\" \"r\"))))]\n+  \"\"\n+  \"mulwx  %2,%0\"\n+[(set_attr \"type\" \"arith\")\n+ (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"umulsidi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"int_reg_operand\" \"%0\"))\n+\t         (zero_extend:DI (match_operand:SI 2 \"int_reg_operand\" \"r\"))))]\n+  \"\"\n+  \"mulwux %2,%0\"\n+[(set_attr \"type\" \"arith\")\n+ (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"=r\")\n@@ -807,7 +835,6 @@\n  [(set_attr \"type\" \"arith\")\n   (set_attr \"cc\" \"clobber\")])\n \n-\n \f\n ;;- Divide and mod instructions.\n \n@@ -816,14 +843,16 @@\n \t(div:DF (match_operand:DF 1 \"fp_reg_operand\" \"0\")\n \t\t(match_operand:DF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"divd   %2,%0\")\n+  \"divd   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n (define_insn \"divsf3\"\n   [(set (match_operand:SF 0 \"fp_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"fp_reg_operand\" \"0\")\n \t\t(match_operand:SF 2 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"divs   %2,%0\")\n+  \"divs   %2,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n (define_insn \"divsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"=r\")\n@@ -899,13 +928,15 @@\n   [(set (match_operand:DF 0 \"fp_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"negd   %1,%0\")\n+  \"negd   %1,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"fp_reg_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"fp_reg_operand\" \"f\")))]\n   \"\"\n-  \"negs   %1,%0\")\n+  \"negs   %1,%0\"\n+ [(set_attr \"type\" \"fp\")])\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"=r\")\n@@ -928,6 +959,33 @@\n ;; then emitting a right shift with the shift count negated.  This means\n ;; that all actual shift counts in the RTL will be positive.\n \n+(define_expand \"ashrdi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"int_reg_operand\" \"\")\n+\t             (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    operands[2] = gen_rtx (NEG, SImode, negate_rtx (SImode, operands[2]));\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"int_reg_operand\" \"0\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"shali  $%n2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"int_reg_operand\" \"0\")\n+\t\t     (neg:SI (match_operand:SI 2 \"nonmemory_operand\" \"r\"))))]\n+  \"\"\n+  \"shal   %2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n (define_expand \"ashrsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"int_reg_operand\" \"\")\n@@ -955,6 +1013,21 @@\n   \"shaw   %2,%0\"\n  [(set_attr \"type\" \"arith\")])\n \n+;;\n+;; left shift\n+;;\n+\n+(define_insn \"ashldi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r,r\")\n+\t(ashift:DI (match_operand:DI 1 \"int_reg_operand\" \"0,0\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n+  \"\"\n+  \"@\n+   shal   %2,%0\n+   shali  %2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n+\n (define_insn \"ashlsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"=r,r\")\n \t(ashift:SI (match_operand:SI 1 \"int_reg_operand\" \"0,0\")\n@@ -979,6 +1052,36 @@\n }\"\n [(set_attr \"type\" \"arith\")])\n \n+;;\n+;; logical shift\n+;;\n+\n+(define_expand \"lshrdi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"int_reg_operand\" \"\")\n+\t             (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    operands[2] = gen_rtx (NEG, SImode, negate_rtx (SImode, operands[2]));\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"int_reg_operand\" \"0\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"shlli  $%n2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"int_reg_operand\" \"0\")\n+\t\t     (neg:SI (match_operand:SI 2 \"nonmemory_operand\" \"r\"))))]\n+  \"\"\n+  \"shll   %2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n \n (define_expand \"lshrsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"\")\n@@ -1007,6 +1110,16 @@\n   \"shlw   %2,%0\"\n  [(set_attr \"type\" \"arith\")])\n \n+(define_insn \"lshldi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r,r\")\n+\t(lshift:DI (match_operand:DI 1 \"int_reg_operand\" \"0,0\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n+  \"\"\n+  \"@\n+   shll   %2,%0\n+   shlli  %2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n (define_insn \"lshlsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"=r,r\")\n \t(lshift:SI (match_operand:SI 1 \"int_reg_operand\" \"0,0\")\n@@ -1017,7 +1130,36 @@\n    shli   %2,%0\"\n  [(set_attr \"type\" \"arith\")])\n \n-;; rotate\n+;;\n+;; rotate insn\n+;;\n+(define_expand \"rotrdi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"\")\n+\t(rotatert:DI (match_operand:DI 1 \"int_reg_operand\" \"\")\n+\t             (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    operands[2] = gen_rtx (NEG, SImode, negate_rtx (SImode, operands[2]));\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(rotatert:DI (match_operand:DI 1 \"int_reg_operand\" \"0\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"rotli  $%n2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r\")\n+\t(rotatert:DI (match_operand:DI 1 \"int_reg_operand\" \"0\")\n+\t\t     (neg:SI (match_operand:SI 2 \"nonmemory_operand\" \"r\"))))]\n+  \"\"\n+  \"rotl   %2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n (define_expand \"rotrsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"\")\n \t(rotatert:SI (match_operand:SI 1 \"int_reg_operand\" \"\")\n@@ -1045,6 +1187,16 @@\n   \"rotw   %2,%0\"\n  [(set_attr \"type\" \"arith\")])\n \n+(define_insn \"rotldi3\"\n+  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r,r\")\n+\t(rotate:DI (match_operand:DI 1 \"int_reg_operand\" \"0,0\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n+  \"\"\n+  \"@\n+   rotl   %2,%0\n+   rotli  %2,%0\"\n+ [(set_attr \"type\" \"arith\")])\n+\n (define_insn \"rotlsi3\"\n   [(set (match_operand:SI 0 \"int_reg_operand\" \"=r,r\")\n \t(rotate:SI (match_operand:SI 1 \"int_reg_operand\" \"0,0\")\n@@ -1056,6 +1208,9 @@\n  [(set_attr \"type\" \"arith\")])\n \n \f\n+;;\n+;; jump and branch insns\n+;;\n (define_insn \"jump\"\n   [(set (pc)\n \t(label_ref (match_operand 0 \"\" \"\")))]\n@@ -1215,62 +1370,13 @@\n   (set_attr \"cc\" \"unchanged\")])\n \n \f\n-;;\n-;; define insns for loops\n-;; subtract, test and branch are tied together and the test can be omitted\n-;;\n-\n-;; while (--foo > 0)\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (gt (plus:SI (match_operand:SI 0 \"int_reg_operand\" \"+r\")\n-\t\t      (const_int -1))\n-\t     (const_int 0))\n-\t (label_ref (match_operand 1 \"\" \"\"))\n-\t (pc)))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (const_int -1)))]\n-  \"\"\n-  \"subq   $1,%0\\;brgt   %l1\")\n \n ;; while (--foo >= 0)\n ;;\n-;; this does not work and I don't know why\n-;; gcc 2.3.3 says that is doesn't match its contraint ?!?\n-;; the problem seem to be the \"+r\" constraint. \"r\" works, but is this okay??\n+;; Combiners for 'decrement test and branch' do not work for clipper.\n+;; These patters are jump_insns that do not allow output reloads and clipper\n+;; can only decrement and test registers.\n ;;\n-;;(define_insn \"\"\n-;;  [(set (pc)\n-;;\t(if_then_else\n-;;\t (ge (plus:SI (match_operand:SI 0 \"int_reg_operand\" \"+r\")\n-;;\t\t      (const_int -1))\n-;;\t     (const_int 0))\n-;;\t (label_ref (match_operand 1 \"\" \"\"))\n-;;\t (pc)))\n-;;   (set (match_dup 0)\n-;;\t(plus:SI (match_dup 0)\n-;;\t\t (const_int -1)))]\n-;;  \"\"\n-;;  \"subq   $1,%0\\;brge   %l1\")\n-\n-\n-;;  `while (foo--)'  ->  `while (--foo != -1)'.\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (ne (match_operand:SI 0 \"int_reg_operand\" \"+r\")\n-\t     (const_int 0))\n-\t (label_ref (match_operand 1 \"\" \"\"))\n-\t (pc)))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (const_int -1)))]\n-  \"\"\n-  \"subq   $1,%0\\;brgeu  %l1\")\n \n \f\n ;;- Local variables:"}]}