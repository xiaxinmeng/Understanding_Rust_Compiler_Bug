{"sha": "026116ce2a4dedad81518b0ca89dd8243b545778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI2MTE2Y2UyYTRkZWRhZDgxNTE4YjBjYTg5ZGQ4MjQzYjU0NTc3OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-10T18:56:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-10T18:56:31Z"}, "message": "Remove no_caller_save_reg_set\n\nReusing the reasoning from the call_fixed_reg_set patch:\n\n  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n    for (j = 1; j <= MOVE_MAX_WORDS; j++)\n      if (reg_save_code (i,regno_save_mode[i][j]) == -1)\n\nshould be true whenever regno_save_mode[i][j] == VOIDmode,\nwhich it is for:\n\n  ~call_used_reg_set | ~have_save_mode\n\nSo this condition amounts to:\n\n  ~call_used_reg_set | ~have_save_mode | ~have_save_insn\n  == ~call_used_reg_set | ~savable_regs\n\nno_caller_save_reg_set is then set if call_used_regs[i], so\nno_caller_save_reg_set is:\n\n  call_used_reg_set & (~call_used_reg_set | ~savable_regs)\n  == call_used_reg_set & ~savable_regs\n\nThis patch expands its single user accordingly.\n\nNote that ~savable_regs is always empty on LRA targets.\n\n2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* hard-reg-set.h (target_hard_regs::x_no_caller_save_reg_set): Delete.\n\t(no_caller_save_reg_set): Delete.\n\t* caller-save.c (init_caller_save): Don't initialize it.\n\t* ira-conflicts.c (ira_build_conflicts): Calculate\n\tno_caller_save_reg_set locally from call_used_reg_set and savable_regs.\n\nFrom-SVN: r275599", "tree": {"sha": "28a5af82fb797ac35103431c00f3c8fbcd0dc2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28a5af82fb797ac35103431c00f3c8fbcd0dc2f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/026116ce2a4dedad81518b0ca89dd8243b545778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026116ce2a4dedad81518b0ca89dd8243b545778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026116ce2a4dedad81518b0ca89dd8243b545778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026116ce2a4dedad81518b0ca89dd8243b545778/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df1f0eef67939274e9ddd3df426e8dfc5184086b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1f0eef67939274e9ddd3df426e8dfc5184086b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1f0eef67939274e9ddd3df426e8dfc5184086b"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "7c6d9ea29c6425e63778de621a8aa4331cfd1708", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=026116ce2a4dedad81518b0ca89dd8243b545778", "patch": "@@ -1,3 +1,11 @@\n+2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hard-reg-set.h (target_hard_regs::x_no_caller_save_reg_set): Delete.\n+\t(no_caller_save_reg_set): Delete.\n+\t* caller-save.c (init_caller_save): Don't initialize it.\n+\t* ira-conflicts.c (ira_build_conflicts): Calculate\n+\tno_caller_save_reg_set locally from call_used_reg_set and savable_regs.\n+\n 2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hard-reg-set.h (target_hard_regs::x_call_fixed_reg_set): Delete."}, {"sha": "58ea14f653e78c129d255a26e42442f514fcdbae", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=026116ce2a4dedad81518b0ca89dd8243b545778", "patch": "@@ -192,7 +192,6 @@ init_caller_save (void)\n \n   caller_save_initialized_p = true;\n \n-  CLEAR_HARD_REG_SET (no_caller_save_reg_set);\n   /* First find all the registers that we need to deal with and all\n      the modes that they can have.  If we can't find a mode to use,\n      we can't have the register live over calls.  */\n@@ -264,11 +263,7 @@ init_caller_save (void)\n \t{\n \t  regno_save_mode[i][j] = VOIDmode;\n \t  if (j == 1)\n-\t    {\n-\t      CLEAR_HARD_REG_BIT (savable_regs, i);\n-\t      if (call_used_regs[i])\n-\t\tSET_HARD_REG_BIT (no_caller_save_reg_set, i);\n-\t    }\n+\t    CLEAR_HARD_REG_BIT (savable_regs, i);\n \t}\n }\n "}, {"sha": "945e49966643a1a7996708eb53ff10e3f6eaeb61", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=026116ce2a4dedad81518b0ca89dd8243b545778", "patch": "@@ -424,10 +424,6 @@ struct target_hard_regs {\n      with the local stack frame are safe, but scant others.  */\n   HARD_REG_SET x_regs_invalidated_by_call;\n \n-  /* Call used hard registers which cannot be saved because there is no\n-     insn for this.  */\n-  HARD_REG_SET x_no_caller_save_reg_set;\n-\n   /* Table of register numbers in the order in which to try to use them.  */\n   int x_reg_alloc_order[FIRST_PSEUDO_REGISTER];\n \n@@ -490,8 +486,6 @@ extern struct target_hard_regs *this_target_hard_regs;\n   (this_target_hard_regs->x_savable_regs)\n #define regs_invalidated_by_call \\\n   (this_target_hard_regs->x_regs_invalidated_by_call)\n-#define no_caller_save_reg_set \\\n-  (this_target_hard_regs->x_no_caller_save_reg_set)\n #define reg_alloc_order \\\n   (this_target_hard_regs->x_reg_alloc_order)\n #define inv_reg_alloc_order \\"}, {"sha": "430c6a6f0791c734c5cc8b8e32da1f69f4c570c1", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026116ce2a4dedad81518b0ca89dd8243b545778/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=026116ce2a4dedad81518b0ca89dd8243b545778", "patch": "@@ -765,6 +765,8 @@ ira_build_conflicts (void)\n \t    }\n \t  else if (ALLOCNO_CALLS_CROSSED_NUM (a) != 0)\n \t    {\n+\t      HARD_REG_SET no_caller_save_reg_set\n+\t\t= (call_used_reg_set & ~savable_regs);\n \t      OBJECT_TOTAL_CONFLICT_HARD_REGS (obj) |= no_caller_save_reg_set;\n \t      OBJECT_TOTAL_CONFLICT_HARD_REGS (obj) |= temp_hard_reg_set;\n \t      OBJECT_CONFLICT_HARD_REGS (obj) |= no_caller_save_reg_set;"}]}