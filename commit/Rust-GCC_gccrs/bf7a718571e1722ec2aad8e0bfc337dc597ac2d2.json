{"sha": "bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3YTcxODU3MWUxNzIyZWMyYWFkOGUwYmZjMzM3ZGM1OTdhYzJkMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-19T09:29:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-19T09:29:57Z"}, "message": "re PR other/53316 (Introduce -Og)\n\n2012-09-19  Richard Guenther  <rguenther@suse.de>\n\n\tPR other/53316\n\t* common.opt (optimize_debug): New variable.\n\t(Og): New optimization level.\n\t* doc/invoke.texi (Og): Document.\n\t* opts.c (maybe_default_option): Add debug parameter.\n\t(maybe_default_options): Likewise.\n\t(default_options_optimization): Handle -Og.\n\t(common_handle_option): Likewise.\n\t* passes.c (gate_all_optimizations): Do not run with -Og.\n\t(gate_all_optimizations_g): New gate, run with -Og.\n\t(pass_all_optimizations_g): New container pass, run with -Og.\n\t(init_optimization_passes): Schedule pass_all_optimizations_g\n\talongside pass_all_optimizations.\n\nFrom-SVN: r191464", "tree": {"sha": "4dffe7fee5a1a31e84a3c34642c6d71e05ef8e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dffe7fee5a1a31e84a3c34642c6d71e05ef8e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f20132e7aefa8b3615154925559dd19f204c8eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20132e7aefa8b3615154925559dd19f204c8eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20132e7aefa8b3615154925559dd19f204c8eca"}], "stats": {"total": 134, "additions": 117, "deletions": 17}, "files": [{"sha": "e066b14dab1228762c4a9a831b6013927c575b34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "patch": "@@ -1,3 +1,19 @@\n+2012-09-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR other/53316\n+\t* common.opt (optimize_debug): New variable.\n+\t(Og): New optimization level.\n+\t* doc/invoke.texi (Og): Document.\n+\t* opts.c (maybe_default_option): Add debug parameter.\n+\t(maybe_default_options): Likewise.\n+\t(default_options_optimization): Handle -Og.\n+\t(common_handle_option): Likewise.\n+\t* passes.c (gate_all_optimizations): Do not run with -Og.\n+\t(gate_all_optimizations_g): New gate, run with -Og.\n+\t(pass_all_optimizations_g): New container pass, run with -Og.\n+\t(init_optimization_passes): Schedule pass_all_optimizations_g\n+\talongside pass_all_optimizations.\n+\n 2012-09-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54132"}, {"sha": "31b6210f97d4026c376eba68a12e73657cff9c41", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "patch": "@@ -32,6 +32,9 @@ int optimize\n Variable\n int optimize_size\n \n+Variable\n+int optimize_debug\n+\n ; Not used directly to control optimizations, only to save -Ofast\n ; setting for \"optimize\" attributes.\n Variable\n@@ -449,6 +452,10 @@ Ofast\n Common Optimization\n Optimize for speed disregarding exact standards compliance\n \n+Og\n+Common Optimization\n+Optimize for debugging experience rather than speed or size\n+\n Q\n Driver\n "}, {"sha": "e5ffdc993e0490033f82ce96d6362564b0afaae8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "patch": "@@ -422,7 +422,7 @@ Objective-C and Objective-C++ Dialects}.\n -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb @gol\n -fwhole-program -fwpa -fuse-linker-plugin @gol\n --param @var{name}=@var{value}\n--O  -O0  -O1  -O2  -O3  -Os -Ofast}\n+-O  -O0  -O1  -O2  -O3  -Os -Ofast -Og}\n \n @item Preprocessor Options\n @xref{Preprocessor Options,,Options Controlling the Preprocessor}.\n@@ -6364,6 +6364,14 @@ valid for all standard-compliant programs.\n It turns on @option{-ffast-math} and the Fortran-specific\n @option{-fno-protect-parens} and @option{-fstack-arrays}.\n \n+@item -Og\n+@opindex Og\n+Optimize debugging experience.  @option{-Og} enables optimizations\n+that do not interfere with debugging. It should be the optimization\n+level of choice for the standard edit-compile-debug cycle, offering\n+a reasonable level of optimization while maintaining fast compilation\n+and a good debugging experience.\n+\n If you use multiple @option{-O} options, with or without level numbers,\n the last such option is the one that is effective.\n @end table"}, {"sha": "5ab9ad9c42d973fcd89499068e3ff0d79e5baf80", "filename": "gcc/opts.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "patch": "@@ -314,15 +314,15 @@ init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n }\n \n /* If indicated by the optimization level LEVEL (-Os if SIZE is set,\n-   -Ofast if FAST is set), apply the option DEFAULT_OPT to OPTS and\n-   OPTS_SET, diagnostic context DC, location LOC, with language mask\n-   LANG_MASK and option handlers HANDLERS.  */\n+   -Ofast if FAST is set, -Og if DEBUG is set), apply the option DEFAULT_OPT\n+   to OPTS and OPTS_SET, diagnostic context DC, location LOC, with language\n+   mask LANG_MASK and option handlers HANDLERS.  */\n \n static void\n maybe_default_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct default_options *default_opt,\n-\t\t      int level, bool size, bool fast,\n+\t\t      int level, bool size, bool fast, bool debug,\n \t\t      unsigned int lang_mask,\n \t\t      const struct cl_option_handlers *handlers,\n \t\t      location_t loc,\n@@ -335,6 +335,8 @@ maybe_default_option (struct gcc_options *opts,\n     gcc_assert (level == 2);\n   if (fast)\n     gcc_assert (level == 3);\n+  if (debug)\n+    gcc_assert (level == 1);\n \n   switch (default_opt->levels)\n     {\n@@ -351,15 +353,19 @@ maybe_default_option (struct gcc_options *opts,\n       break;\n \n     case OPT_LEVELS_1_PLUS_SPEED_ONLY:\n-      enabled = (level >= 1 && !size);\n+      enabled = (level >= 1 && !size && !debug);\n+      break;\n+\n+    case OPT_LEVELS_1_PLUS_NOT_DEBUG:\n+      enabled = (level >= 1 && !debug);\n       break;\n \n     case OPT_LEVELS_2_PLUS:\n       enabled = (level >= 2);\n       break;\n \n     case OPT_LEVELS_2_PLUS_SPEED_ONLY:\n-      enabled = (level >= 2 && !size);\n+      enabled = (level >= 2 && !size && !debug);\n       break;\n \n     case OPT_LEVELS_3_PLUS:\n@@ -405,7 +411,7 @@ static void\n maybe_default_options (struct gcc_options *opts,\n \t\t       struct gcc_options *opts_set,\n \t\t       const struct default_options *default_opts,\n-\t\t       int level, bool size, bool fast,\n+\t\t       int level, bool size, bool fast, bool debug,\n \t\t       unsigned int lang_mask,\n \t\t       const struct cl_option_handlers *handlers,\n \t\t       location_t loc,\n@@ -415,7 +421,8 @@ maybe_default_options (struct gcc_options *opts,\n \n   for (i = 0; default_opts[i].levels != OPT_LEVELS_NONE; i++)\n     maybe_default_option (opts, opts_set, &default_opts[i],\n-\t\t\t  level, size, fast, lang_mask, handlers, loc, dc);\n+\t\t\t  level, size, fast, debug,\n+\t\t\t  lang_mask, handlers, loc, dc);\n }\n \n /* Table of options enabled by default at different levels.  */\n@@ -444,7 +451,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS, OPT_ftree_dominator_opts, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_dse, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_ter, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_ftree_sra, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_ftree_sra, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_copyrename, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_fre, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_ftree_copy_prop, NULL, 1 },\n@@ -498,7 +505,7 @@ static const struct default_options default_options_table[] =\n     /* Inlining of functions reducing size is a good idea with -Os\n        regardless of them being declared inline.  */\n     { OPT_LEVELS_3_PLUS_AND_SIZE, OPT_finline_functions, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_finline_functions_called_once, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_finline_functions_called_once, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_funswitch_loops, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fgcse_after_reload, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_vectorize, NULL, 1 },\n@@ -540,6 +547,7 @@ default_options_optimization (struct gcc_options *opts,\n \t      opts->x_optimize = 1;\n \t      opts->x_optimize_size = 0;\n \t      opts->x_optimize_fast = 0;\n+\t      opts->x_optimize_debug = 0;\n \t    }\n \t  else\n \t    {\n@@ -555,6 +563,7 @@ default_options_optimization (struct gcc_options *opts,\n \t\t    opts->x_optimize = 255;\n \t\t  opts->x_optimize_size = 0;\n \t\t  opts->x_optimize_fast = 0;\n+\t\t  opts->x_optimize_debug = 0;\n \t\t}\n \t    }\n \t  break;\n@@ -565,13 +574,23 @@ default_options_optimization (struct gcc_options *opts,\n \t  /* Optimizing for size forces optimize to be 2.  */\n \t  opts->x_optimize = 2;\n \t  opts->x_optimize_fast = 0;\n+\t  opts->x_optimize_debug = 0;\n \t  break;\n \n \tcase OPT_Ofast:\n \t  /* -Ofast only adds flags to -O3.  */\n \t  opts->x_optimize_size = 0;\n \t  opts->x_optimize = 3;\n \t  opts->x_optimize_fast = 1;\n+\t  opts->x_optimize_debug = 0;\n+\t  break;\n+\n+\tcase OPT_Og:\n+\t  /* -Og selects optimization level 1.  */\n+\t  opts->x_optimize_size = 0;\n+\t  opts->x_optimize = 1;\n+\t  opts->x_optimize_fast = 0;\n+\t  opts->x_optimize_debug = 1;\n \t  break;\n \n \tdefault:\n@@ -582,7 +601,8 @@ default_options_optimization (struct gcc_options *opts,\n \n   maybe_default_options (opts, opts_set, default_options_table,\n \t\t\t opts->x_optimize, opts->x_optimize_size,\n-\t\t\t opts->x_optimize_fast, lang_mask, handlers, loc, dc);\n+\t\t\t opts->x_optimize_fast, opts->x_optimize_debug,\n+\t\t\t lang_mask, handlers, loc, dc);\n \n   /* -O2 param settings.  */\n   opt2 = (opts->x_optimize >= 2);\n@@ -612,7 +632,8 @@ default_options_optimization (struct gcc_options *opts,\n   maybe_default_options (opts, opts_set,\n \t\t\t targetm_common.option_optimization_table,\n \t\t\t opts->x_optimize, opts->x_optimize_size,\n-\t\t\t opts->x_optimize_fast, lang_mask, handlers, loc, dc);\n+\t\t\t opts->x_optimize_fast, opts->x_optimize_debug,\n+\t\t\t lang_mask, handlers, loc, dc);\n }\n \n /* After all options at LOC have been read into OPTS and OPTS_SET,\n@@ -1408,6 +1429,7 @@ common_handle_option (struct gcc_options *opts,\n     case OPT_O:\n     case OPT_Os:\n     case OPT_Ofast:\n+    case OPT_Og:\n       /* Currently handled in a prescan.  */\n       break;\n "}, {"sha": "c96d5333efefda5958cb5966db04bb9bb42b11ee", "filename": "gcc/passes.c", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7a718571e1722ec2aad8e0bfc337dc597ac2d2/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=bf7a718571e1722ec2aad8e0bfc337dc597ac2d2", "patch": "@@ -337,10 +337,7 @@ static struct gimple_opt_pass pass_all_early_optimizations =\n static bool\n gate_all_optimizations (void)\n {\n-  return (optimize >= 1\n-\t  /* Don't bother doing anything if the program has errors.\n-\t     We have to pass down the queue if we already went into SSA */\n-\t  && (!seen_error () || gimple_in_ssa_p (cfun)));\n+  return optimize >= 1 && !optimize_debug;\n }\n \n static struct gimple_opt_pass pass_all_optimizations =\n@@ -362,6 +359,33 @@ static struct gimple_opt_pass pass_all_optimizations =\n  }\n };\n \n+/* Gate: execute, or not, all of the non-trivial optimizations.  */\n+\n+static bool\n+gate_all_optimizations_g (void)\n+{\n+  return optimize >= 1 && optimize_debug;\n+}\n+\n+static struct gimple_opt_pass pass_all_optimizations_g =\n+{\n+ {\n+  GIMPLE_PASS,\n+  \"*all_optimizations_g\",\t\t/* name */\n+  gate_all_optimizations_g,\t\t/* gate */\n+  NULL,\t\t\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_OPTIMIZE,\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n+};\n+\n static bool\n gate_rest_of_compilation (void)\n {\n@@ -1494,6 +1518,29 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_uncprop);\n       NEXT_PASS (pass_local_pure_const);\n     }\n+  NEXT_PASS (pass_all_optimizations_g);\n+    {\n+      struct opt_pass **p = &pass_all_optimizations_g.pass.sub;\n+      NEXT_PASS (pass_remove_cgraph_callee_edges);\n+      NEXT_PASS (pass_strip_predict_hints);\n+      /* Lower remaining pieces of GIMPLE.  */\n+      NEXT_PASS (pass_lower_complex);\n+      NEXT_PASS (pass_lower_vector_ssa);\n+      /* Perform simple scalar cleanup which is constant/copy propagation.  */\n+      NEXT_PASS (pass_ccp);\n+      NEXT_PASS (pass_copy_prop);\n+      NEXT_PASS (pass_rename_ssa_copies);\n+      NEXT_PASS (pass_dce);\n+      /* Fold remaining builtins.  */\n+      NEXT_PASS (pass_object_sizes);\n+      NEXT_PASS (pass_fold_builtins);\n+      /* ???  We do want some kind of loop invariant motion, but we possibly\n+         need to adjust LIM to be more friendly towards preserving accurate\n+\t debug information here.  */\n+      NEXT_PASS (pass_late_warn_uninitialized);\n+      NEXT_PASS (pass_uncprop);\n+      NEXT_PASS (pass_local_pure_const);\n+    }\n   NEXT_PASS (pass_tm_init);\n     {\n       struct opt_pass **p = &pass_tm_init.pass.sub;"}]}