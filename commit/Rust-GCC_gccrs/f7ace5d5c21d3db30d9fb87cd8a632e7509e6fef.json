{"sha": "f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhY2U1ZDVjMjFkM2RiMzBkOWZiODdjZDhhNjMyZTc1MDllNmZlZg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-04-09T15:05:19Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-04-09T15:05:19Z"}, "message": "[ARC] Add/update combiner patterns.\n\ngcc/\n2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (add_shift): New pattern.\n\t(add_shift2): Likewise.\n\t(sub_shift): Likewise.\n\t(sub_shift_cmp0_noout): Likewise.\n\t(compare_si_ashiftsi): Likewise.\n\t(xbfu_cmp0_noout): New combine pattern.\n\t(xbfu_cmp0\"): Likewise.\n\t(movsi_set_cc_insn): Place the predicable variant first.\n\t(commutative_binary_cmp0_noout): Remove clobber.\n\t(commutative_binary_cmp0): New pattern.\n\t(noncommutative_binary_cmp0): Likewise.\n\t(noncommutative_binary_cmp0_noout): Likewise.\n\t(noncommutative_binary_comparison_result_used): Removed.\n\t(rsub_cmp0): New pattern.\n\t(rsub_cmp0_noout): Likewise.\n\t(extzvsi): Changed, keep only meaningful variants.\n\t(SQH, SEZ): New iterators.\n\t(SQH_postfix): New mode attribute.\n\t(SEZ_prefix): New code attribute.\n\t(<SEZ_prefix>xt<SQH_postfix>_cmp0_noout): New instruction pattern.\n\t(<SEZ_prefix>xt<SQH_postfix>_cmp0): Likewise.\n\t* config/arc/predicates.md (cc_set_register): Use CC_REG instead\n\tof numerical value.\n\t(noncommutative_operator): Check the availability of barrel\n\tshifter option.\n\nFrom-SVN: r259237", "tree": {"sha": "91cade17984df7dd342878d6531393f3df12a842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91cade17984df7dd342878d6531393f3df12a842"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46e58e180d6ab1fa37acc96f0b8cbf569bbf4105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e58e180d6ab1fa37acc96f0b8cbf569bbf4105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e58e180d6ab1fa37acc96f0b8cbf569bbf4105"}], "stats": {"total": 308, "additions": 261, "deletions": 47}, "files": [{"sha": "2328fd781023a0df82b5af31d7dd518a3afa0530", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef", "patch": "@@ -1,3 +1,31 @@\n+2018-04-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (add_shift): New pattern.\n+\t(add_shift2): Likewise.\n+\t(sub_shift): Likewise.\n+\t(sub_shift_cmp0_noout): Likewise.\n+\t(compare_si_ashiftsi): Likewise.\n+\t(xbfu_cmp0_noout): New combine pattern.\n+\t(xbfu_cmp0\"): Likewise.\n+\t(movsi_set_cc_insn): Place the predicable variant first.\n+\t(commutative_binary_cmp0_noout): Remove clobber.\n+\t(commutative_binary_cmp0): New pattern.\n+\t(noncommutative_binary_cmp0): Likewise.\n+\t(noncommutative_binary_cmp0_noout): Likewise.\n+\t(noncommutative_binary_comparison_result_used): Removed.\n+\t(rsub_cmp0): New pattern.\n+\t(rsub_cmp0_noout): Likewise.\n+\t(extzvsi): Changed, keep only meaningful variants.\n+\t(SQH, SEZ): New iterators.\n+\t(SQH_postfix): New mode attribute.\n+\t(SEZ_prefix): New code attribute.\n+\t(<SEZ_prefix>xt<SQH_postfix>_cmp0_noout): New instruction pattern.\n+\t(<SEZ_prefix>xt<SQH_postfix>_cmp0): Likewise.\n+\t* config/arc/predicates.md (cc_set_register): Use CC_REG instead\n+\tof numerical value.\n+\t(noncommutative_operator): Check the availability of barrel\n+\tshifter option.\n+\n 2018-04-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85284"}, {"sha": "127ed8ebee99920496c385662e86f6cb98a9085a", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 229, "deletions": 45, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef", "patch": "@@ -794,20 +794,90 @@\n   \"st%U0 %1,%0\\;st%U0.di %1,%0\"\n   [(set_attr \"type\" \"store\")])\n \n+;; Combiner patterns for compare with zero\n+(define_mode_iterator SQH [QI HI])\n+(define_mode_attr SQH_postfix [(QI \"b\") (HI \"%_\")])\n+\n+(define_code_iterator SEZ [sign_extend zero_extend])\n+(define_code_attr SEZ_prefix [(sign_extend \"sex\") (zero_extend \"ext\")])\n+\n+(define_insn \"*<SEZ_prefix>xt<SQH_postfix>_cmp0_noout\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(compare:CC_ZN (SEZ:SI (match_operand:SQH 1 \"register_operand\" \"r\"))\n+\t\t       (const_int 0)))]\n+  \"\"\n+  \"<SEZ_prefix><SQH_postfix>.f\\\\t0,%1\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"cond\" \"set_zn\")])\n+\n+(define_insn \"*<SEZ_prefix>xt<SQH_postfix>_cmp0\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(compare:CC_ZN (SEZ:SI (match_operand:SQH 1 \"register_operand\" \"r\"))\n+\t\t       (const_int 0)))\n+   (set (match_operand:SI 2 \"register_operand\" \"=r\")\n+\t(SEZ:SI (match_dup 1)))]\n+  \"\"\n+  \"<SEZ_prefix><SQH_postfix>.f\\\\t%2,%1\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"cond\" \"set_zn\")])\n+\n+(define_insn \"*xbfu_cmp0_noout\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(compare:CC_Z\n+\t (zero_extract:SI\n+\t  (match_operand:SI 1 \"register_operand\"  \"  r,r\")\n+\t  (match_operand:SI 2 \"const_int_operand\" \"C3p,n\")\n+\t  (match_operand:SI 3 \"const_int_operand\" \"  n,n\"))\n+\t (const_int 0)))]\n+  \"TARGET_HS && TARGET_BARREL_SHIFTER\"\n+  {\n+   int assemble_op2 = (((INTVAL (operands[2]) - 1) & 0x1f) << 5) | (INTVAL (operands[3]) & 0x1f);\n+   operands[2] = GEN_INT (assemble_op2);\n+   return \"xbfu%?.f\\\\t0,%1,%2\";\n+  }\n+  [(set_attr \"type\"       \"shift\")\n+   (set_attr \"iscompact\"  \"false\")\n+   (set_attr \"length\"     \"4,8\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\"       \"set_zn\")])\n+\n+(define_insn \"*xbfu_cmp0\"\n+  [(set (match_operand 4 \"cc_set_register\" \"\")\n+\t(compare:CC_Z\n+\t (zero_extract:SI\n+\t  (match_operand:SI 1 \"register_operand\"  \"0  ,r,0\")\n+\t  (match_operand:SI 2 \"const_int_operand\" \"C3p,n,n\")\n+\t  (match_operand:SI 3 \"const_int_operand\" \"n  ,n,n\"))\n+\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\"  \"=r,r,r\")\n+\t(zero_extract:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n+  \"TARGET_HS && TARGET_BARREL_SHIFTER\"\n+  {\n+   int assemble_op2 = (((INTVAL (operands[2]) - 1) & 0x1f) << 5) | (INTVAL (operands[3]) & 0x1f);\n+   operands[2] = GEN_INT (assemble_op2);\n+   return \"xbfu%?.f\\\\t%0,%1,%2\";\n+  }\n+  [(set_attr \"type\"       \"shift\")\n+   (set_attr \"iscompact\"  \"false\")\n+   (set_attr \"length\"     \"4,8,8\")\n+   (set_attr \"predicable\" \"yes,no,yes\")\n+   (set_attr \"cond\"       \"set_zn\")])\n+\n+; splitting to 'tst' allows short insns and combination into brcc.\n (define_insn_and_split \"*movsi_set_cc_insn\"\n-  [(set (match_operand:CC_ZN 2 \"cc_set_register\" \"\")\n-\t(match_operator:CC_ZN 3 \"zn_compare_operator\"\n-\t  [(match_operand:SI 1 \"nonmemory_operand\" \"cI,cL,Cal\") (const_int 0)]))\n-   (set (match_operand:SI 0 \"register_operand\" \"=w,w,w\")\n+  [(set (match_operand 2 \"cc_set_register\" \"\")\n+\t(match_operator 3 \"zn_compare_operator\"\n+\t\t\t[(match_operand:SI 1 \"nonmemory_operand\" \"rL,rI,Cal\")\n+\t\t\t (const_int 0)]))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n \t(match_dup 1))]\n   \"\"\n-  \"mov%?.f %0,%1\"\n-  ; splitting to 'tst' allows short insns and combination into brcc.\n+  \"mov%?.f\\\\t%0,%1\"\n   \"reload_completed && operands_match_p (operands[0], operands[1])\"\n   [(set (match_dup 2) (match_dup 3))]\n   \"\"\n   [(set_attr \"type\" \"compare\")\n-   (set_attr \"predicable\" \"no,yes,yes\")\n+   (set_attr \"predicable\" \"yes,no,yes\")\n    (set_attr \"cond\" \"set_zn\")\n    (set_attr \"length\" \"4,4,8\")])\n \n@@ -957,19 +1027,35 @@\n    (set_attr \"cond\" \"set_zn\")\n    (set_attr \"length\" \"*,4,4,4,8\")])\n \n-(define_insn \"*commutative_binary_comparison\"\n-  [(set (match_operand:CC_ZN 0 \"cc_set_register\" \"\")\n-\t(match_operator:CC_ZN 5 \"zn_compare_operator\"\n+;; The next two patterns are for plos, ior, xor, and, and mult.\n+(define_insn \"*commutative_binary_cmp0_noout\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(match_operator 4 \"zn_compare_operator\"\n+\t  [(match_operator:SI 3 \"commutative_operator\"\n+\t     [(match_operand:SI 1 \"register_operand\" \"%r,r\")\n+\t      (match_operand:SI 2 \"nonmemory_operand\" \"rL,Cal\")])\n+\t   (const_int 0)]))]\n+  \"\"\n+  \"%O3.f\\\\t0,%1,%2\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"cond\" \"set_zn\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*commutative_binary_cmp0\"\n+  [(set (match_operand 3 \"cc_set_register\" \"\")\n+\t(match_operator 5 \"zn_compare_operator\"\n \t  [(match_operator:SI 4 \"commutative_operator\"\n-\t     [(match_operand:SI 1 \"register_operand\" \"%c,c\")\n-\t      (match_operand:SI 2 \"nonmemory_operand\" \"cL,Cal\")])\n+\t     [(match_operand:SI 1 \"register_operand\"  \"%0, 0,r,r\")\n+\t      (match_operand:SI 2 \"nonmemory_operand\" \"rL,rI,r,Cal\")])\n \t   (const_int 0)]))\n-   (clobber (match_scratch:SI 3 \"=X,X\"))]\n+   (set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(match_dup 4))]\n   \"\"\n-  \"%O4.f 0,%1,%2\"\n+  \"%O4.f\\\\t%0,%1,%2\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"cond\" \"set_zn\")\n-   (set_attr \"length\" \"4,8\")])\n+   (set_attr \"predicable\" \"yes,yes,no,no\")\n+   (set_attr \"length\" \"4,4,4,8\")])\n \n ; for flag setting 'add' instructions like if (a+b) { ...}\n ; the combiner needs this pattern\n@@ -1043,32 +1129,60 @@\n    (set_attr \"cond\" \"set_zn,set_zn,set_zn\")\n    (set_attr \"length\" \"4,4,8\")])\n \n-; this pattern is needed by combiner for cases like if (c=a<<b) { ... }\n-(define_insn \"*noncommutative_binary_comparison_result_used\"\n-  [(set (match_operand 3 \"cc_register\" \"\")\n+(define_insn \"*noncommutative_binary_cmp0\"\n+  [(set (match_operand 3 \"cc_set_register\" \"\")\n \t(match_operator 5 \"zn_compare_operator\"\n \t  [(match_operator:SI 4 \"noncommutative_operator\"\n-\t     [(match_operand:SI 1 \"register_operand\" \"c,0,c\")\n-\t      (match_operand:SI 2 \"nonmemory_operand\" \"cL,I,?Cal\")])\n-\t       (const_int 0)]))\n-   (set (match_operand:SI 0 \"register_operand\" \"=w,w,w\")\n-\t(match_dup 4 ))]\n-  \"TARGET_BARREL_SHIFTER || GET_CODE (operands[4]) == MINUS\"\n-  \"%O4.f %0,%1,%2\"\n-  [(set_attr \"type\" \"compare,compare,compare\")\n-   (set_attr \"cond\" \"set_zn,set_zn,set_zn\")\n-   (set_attr \"length\" \"4,4,8\")])\n+\t     [(match_operand:SI 1 \"register_operand\"   \"0,r,0,  0,r\")\n+\t      (match_operand:SI 2 \"nonmemory_operand\" \"rL,r,I,Cal,Cal\")])\n+\t   (const_int 0)]))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r\")\n+\t(match_dup 4))]\n+  \"\"\n+  \"%O4%?.f\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"cond\" \"set_zn\")\n+   (set_attr \"predicable\" \"yes,no,no,yes,no\")\n+   (set_attr \"length\" \"4,4,4,8,8\")])\n \n-(define_insn \"*noncommutative_binary_comparison\"\n-  [(set (match_operand:CC_ZN 0 \"cc_set_register\" \"\")\n-\t(match_operator:CC_ZN 5 \"zn_compare_operator\"\n+(define_insn \"*noncommutative_binary_cmp0_noout\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(match_operator 3 \"zn_compare_operator\"\n \t  [(match_operator:SI 4 \"noncommutative_operator\"\n-\t     [(match_operand:SI 1 \"register_operand\" \"c,c\")\n-\t      (match_operand:SI 2 \"nonmemory_operand\" \"cL,Cal\")])\n+\t     [(match_operand:SI 1 \"register_operand\"   \"r,r\")\n+\t      (match_operand:SI 2 \"nonmemory_operand\" \"rL,Cal\")])\n+\t   (const_int 0)]))]\n+  \"\"\n+  \"%O4.f\\\\t0,%1,%2\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"cond\" \"set_zn\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+;;rsub variants\n+(define_insn \"*rsub_cmp0\"\n+  [(set (match_operand 4 \"cc_set_register\" \"\")\n+\t(match_operator 3 \"zn_compare_operator\"\n+\t  [(minus:SI\n+\t    (match_operand:SI 1 \"nonmemory_operand\" \"rL,Cal\")\n+\t    (match_operand:SI 2 \"register_operand\"   \"r,r\"))\n \t   (const_int 0)]))\n-   (clobber (match_scratch:SI 3 \"=X,X\"))]\n-  \"TARGET_BARREL_SHIFTER || GET_CODE (operands[4]) == MINUS\"\n-  \"%O4.f 0,%1,%2\"\n+   (set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"rsub.f\\\\t%0,%2,%1\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"cond\" \"set_zn\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*rsub_cmp0_noout\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(match_operator 3 \"zn_compare_operator\"\n+\t  [(minus:SI\n+\t    (match_operand:SI 1 \"nonmemory_operand\" \"rL,Cal\")\n+\t    (match_operand:SI 2 \"register_operand\"   \"r,r\"))\n+\t   (const_int 0)]))]\n+  \"\"\n+  \"rsub.f\\\\t0,%2,%1\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"cond\" \"set_zn\")\n    (set_attr \"length\" \"4,8\")])\n@@ -5608,23 +5722,22 @@\n  DONE;\n })\n \n-\n (define_insn \"extzvsi\"\n-  [(set (match_operand:SI 0 \"register_operand\"                  \"=r  , r  , r, r, r\")\n-\t(zero_extract:SI (match_operand:SI 1 \"register_operand\"  \"0  , r  , 0, 0, r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"C3p, C3p, i, i, i\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i  , i  , i, i, i\")))]\n+  [(set (match_operand:SI 0 \"register_operand\"                  \"=r  ,  r,r,r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\"  \"0  ,  r,r,0\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"C3p,C3p,n,n\")\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n  ,  n,n,n\")))]\n   \"TARGET_HS && TARGET_BARREL_SHIFTER\"\n   {\n    int assemble_op2 = (((INTVAL (operands[2]) - 1) & 0x1f) << 5) | (INTVAL (operands[3]) & 0x1f);\n    operands[2] = GEN_INT (assemble_op2);\n-   return \"xbfu%? %0,%1,%2\";\n+   return \"xbfu%?\\\\t%0,%1,%2\";\n   }\n   [(set_attr \"type\"       \"shift\")\n    (set_attr \"iscompact\"  \"false\")\n-   (set_attr \"length\"     \"4,4,4,8,8\")\n-   (set_attr \"predicable\" \"yes,no,no,yes,no\")\n-   (set_attr \"cond\"       \"canuse,nocond,nocond,canuse,nocond\")])\n+   (set_attr \"length\"     \"4,4,8,8\")\n+   (set_attr \"predicable\" \"yes,no,no,yes\")\n+   (set_attr \"cond\"       \"canuse,nocond,nocond,canuse_limm\")])\n \n (define_insn \"kflag\"\n   [(unspec_volatile [(match_operand:SI 0 \"nonmemory_operand\" \"rL,I,Cal\")]\n@@ -6423,6 +6536,77 @@\n    (set_attr \"type\" \"block\")]\n   )\n \n+(define_insn \"*add_shift\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q,r,r\")\n+\t(plus:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"q,r,r\")\n+\t\t\t    (match_operand:SI 2 \"_1_2_3_operand\" \"\"))\n+\t\t (match_operand:SI 3 \"nonmemory_operand\"  \"0,r,Cal\")))]\n+  \"\"\n+  \"add%2%?\\\\t%0,%3,%1\"\n+  [(set_attr \"length\" \"*,4,8\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"iscompact\" \"maybe,false,false\")\n+   (set_attr \"cond\" \"canuse,nocond,nocond\")])\n+\n+(define_insn \"*add_shift2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q,r,r\")\n+\t(plus:SI (match_operand:SI 1 \"nonmemory_operand\"  \"0,r,Cal\")\n+\t\t (ashift:SI (match_operand:SI 2 \"register_operand\" \"q,r,r\")\n+\t\t\t    (match_operand:SI 3 \"_1_2_3_operand\" \"\"))))]\n+  \"\"\n+  \"add%3%?\\\\t%0,%1,%2\"\n+  [(set_attr \"length\" \"*,4,8\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"iscompact\" \"maybe,false,false\")\n+   (set_attr \"cond\" \"canuse,nocond,nocond\")])\n+\n+(define_insn \"*sub_shift\"\n+  [(set (match_operand:SI 0\"register_operand\" \"=r,r,r\")\n+\t (minus:SI (match_operand:SI 1 \"nonmemory_operand\" \"0,r,Cal\")\n+\t\t   (ashift:SI (match_operand:SI 2 \"register_operand\" \"r,r,r\")\n+\t\t\t      (match_operand:SI 3 \"_1_2_3_operand\" \"\"))))]\n+  \"\"\n+  \"sub%3\\\\t%0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,8\")\n+   (set_attr \"cond\" \"canuse,nocond,nocond\")\n+   (set_attr \"predicable\" \"yes,no,no\")])\n+\n+(define_insn \"*sub_shift_cmp0_noout\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(compare:CC\n+\t (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 3 \"_1_2_3_operand\" \"\")))\n+\t (const_int 0)))]\n+  \"\"\n+  \"sub%3.f\\\\t0,%1,%2\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"*compare_si_ashiftsi\"\n+  [(set (match_operand 0 \"cc_set_register\" \"\")\n+\t(compare:CC (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t       (match_operand:SI 3 \"_1_2_3_operand\" \"\"))))]\n+  \"\"\n+  \"sub%3.f\\\\t0,%1,%2\"\n+  [(set_attr \"length\" \"4\")])\n+\n+;; Convert the sequence\n+;;  asl rd,rn,_1_2_3\n+;;  cmp ra,rd\n+;; into\n+;;  sub{123}.f 0,ra,rn\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"_1_2_3_operand\" \"\")))\n+   (set (reg:CC CC_REG)\n+\t(compare:CC (match_operand:SI 3 \"register_operand\" \"\")\n+\t\t    (match_dup 0)))]\n+  \"peep2_reg_dead_p (2, operands[0])\"\n+  [(set (reg:CC CC_REG) (compare:CC (match_dup 3)\n+\t\t\t\t    (ashift:SI (match_dup 1) (match_dup 2))))])\n+\n ;; include the arc-FPX instructions\n (include \"fpx.md\")\n "}, {"sha": "0abfc839b078774372a8090546043577d5d3f49e", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=f7ace5d5c21d3db30d9fb87cd8a632e7509e6fef", "patch": "@@ -522,7 +522,7 @@\n \treturn FALSE;\n     }\n \n-  if (REGNO (op) != 61)\n+  if (REGNO (op) != CC_REG)\n     return FALSE;\n   if (mode == rmode\n       || (mode == CC_ZNmode && rmode == CC_Zmode)\n@@ -609,7 +609,9 @@\n )\n \n (define_predicate \"noncommutative_operator\"\n-  (ior (match_code \"minus,ashift,ashiftrt,lshiftrt,rotatert\")\n+  (ior (and (match_code \"ashift,ashiftrt,lshiftrt,rotatert\")\n+\t    (match_test \"TARGET_BARREL_SHIFTER\"))\n+       (match_code \"minus\")\n        (and (match_code \"ss_minus\")\n \t    (match_test \"TARGET_ARC700 || TARGET_EA_SET\")))\n )"}]}