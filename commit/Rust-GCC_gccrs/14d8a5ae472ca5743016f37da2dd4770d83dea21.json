{"sha": "14d8a5ae472ca5743016f37da2dd4770d83dea21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRkOGE1YWU0NzJjYTU3NDMwMTZmMzdkYTJkZDQ3NzBkODNkZWEyMQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-02T19:30:15Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-02T19:30:15Z"}, "message": "libstdc++: Add missing std::move to ranges::copy/move/reverse_copy [PR101599]\n\nIn passing, this also renames the template parameter _O2 to _Out2 in\nranges::partition_copy and uglifies two of its function parameters,\nout_true and out_false.\n\n\tPR libstdc++/101599\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algo.h (__reverse_copy_fn::operator()):\n\tAdd missing std::move in return statement.\n\t(__partition_copy_fn::operator()): Rename templtae parameter\n\t_O2 to _Out2.  Uglify function parameters out_true and out_false.\n\t* include/bits/ranges_algobase.h (__copy_or_move): Add missing\n\tstd::move to recursive call that unwraps a __normal_iterator\n\toutput iterator.\n\t* testsuite/25_algorithms/copy/constrained.cc (test06): New test.\n\t* testsuite/25_algorithms/move/constrained.cc (test05): New test.", "tree": {"sha": "b2f302b2cbf13dc9d6d116f9dc15da7bf6805548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2f302b2cbf13dc9d6d116f9dc15da7bf6805548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14d8a5ae472ca5743016f37da2dd4770d83dea21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d8a5ae472ca5743016f37da2dd4770d83dea21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d8a5ae472ca5743016f37da2dd4770d83dea21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d8a5ae472ca5743016f37da2dd4770d83dea21/comments", "author": null, "committer": null, "parents": [{"sha": "4414057186b227edf5b5efa527732bfcdf39d575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4414057186b227edf5b5efa527732bfcdf39d575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4414057186b227edf5b5efa527732bfcdf39d575"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "8462521c3693fa2e2d67ed4c8a03e31d363e411d", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=14d8a5ae472ca5743016f37da2dd4770d83dea21", "patch": "@@ -1343,7 +1343,7 @@ namespace ranges\n \t    *__result = *__tail;\n \t    ++__result;\n \t  }\n-\treturn {__i, __result};\n+\treturn {__i, std::move(__result)};\n       }\n \n     template<bidirectional_range _Range, weakly_incrementable _Out>\n@@ -2423,14 +2423,14 @@ namespace ranges\n   struct __partition_copy_fn\n   {\n     template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n-\t     weakly_incrementable _Out1, weakly_incrementable _O2,\n+\t     weakly_incrementable _Out1, weakly_incrementable _Out2,\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       requires indirectly_copyable<_Iter, _Out1>\n-\t&& indirectly_copyable<_Iter, _O2>\n-      constexpr partition_copy_result<_Iter, _Out1, _O2>\n+\t&& indirectly_copyable<_Iter, _Out2>\n+      constexpr partition_copy_result<_Iter, _Out1, _Out2>\n       operator()(_Iter __first, _Sent __last,\n-\t\t _Out1 __out_true, _O2 __out_false,\n+\t\t _Out1 __out_true, _Out2 __out_false,\n \t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n@@ -2450,18 +2450,18 @@ namespace ranges\n       }\n \n     template<input_range _Range, weakly_incrementable _Out1,\n-\t     weakly_incrementable _O2,\n+\t     weakly_incrementable _Out2,\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out1>\n-\t&& indirectly_copyable<iterator_t<_Range>, _O2>\n-      constexpr partition_copy_result<borrowed_iterator_t<_Range>, _Out1, _O2>\n-      operator()(_Range&& __r, _Out1 out_true, _O2 out_false,\n+\t&& indirectly_copyable<iterator_t<_Range>, _Out2>\n+      constexpr partition_copy_result<borrowed_iterator_t<_Range>, _Out1, _Out2>\n+      operator()(_Range&& __r, _Out1 __out_true, _Out2 __out_false,\n \t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t       std::move(out_true), std::move(out_false),\n+\t\t       std::move(__out_true), std::move(__out_false),\n \t\t       std::move(__pred), std::move(__proj));\n       }\n   };"}, {"sha": "78c295981d534886820b438634da03aab7ee00e3", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=14d8a5ae472ca5743016f37da2dd4770d83dea21", "patch": "@@ -244,7 +244,7 @@ namespace ranges\n       else if constexpr (__is_normal_iterator<_Out>)\n \t{\n \t  auto [__in,__out]\n-\t    = ranges::__copy_or_move<_IsMove>(__first, __last, __result.base());\n+\t    = ranges::__copy_or_move<_IsMove>(std::move(__first), __last, __result.base());\n \t  return {std::move(__in), decltype(__result){__out}};\n \t}\n       else if constexpr (sized_sentinel_for<_Sent, _Iter>)"}, {"sha": "a05948a49c6575f303633d11afaf827438da1c06", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/constrained.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstrained.cc?ref=14d8a5ae472ca5743016f37da2dd4770d83dea21", "patch": "@@ -26,6 +26,7 @@\n using __gnu_test::test_container;\n using __gnu_test::test_range;\n using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::input_iterator_wrapper_nocopy;\n using __gnu_test::output_iterator_wrapper;\n using __gnu_test::forward_iterator_wrapper;\n \n@@ -214,6 +215,17 @@ test05()\n   return ok;\n }\n \n+void\n+test06()\n+{\n+  // PR libstdc++/101599\n+  int x[] = {1,2,3};\n+  test_range<int, input_iterator_wrapper_nocopy> rx(x);\n+  std::vector<int> v(4, 0);\n+  ranges::copy(rx, v.begin());\n+  VERIFY( ranges::equal(v, (int[]){1,2,3,0}) );\n+}\n+\n int\n main()\n {\n@@ -222,4 +234,5 @@ main()\n   static_assert(test03());\n   test04();\n   static_assert(test05());\n+  test06();\n }"}, {"sha": "2ce27b663a2e7a186e32cd6d369c7e1c8e8d15e6", "filename": "libstdc++-v3/testsuite/25_algorithms/move/constrained.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstrained.cc?ref=14d8a5ae472ca5743016f37da2dd4770d83dea21", "patch": "@@ -26,6 +26,7 @@\n using __gnu_test::test_container;\n using __gnu_test::test_range;\n using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::input_iterator_wrapper_nocopy;\n using __gnu_test::output_iterator_wrapper;\n using __gnu_test::forward_iterator_wrapper;\n \n@@ -193,11 +194,23 @@ test04()\n   VERIFY( ranges::count(y, 0, &X::moved) == 6 );\n }\n \n+void\n+test05()\n+{\n+  // PR libstdc++/101599\n+  int x[] = {1,2,3};\n+  test_range<int, input_iterator_wrapper_nocopy> rx(x);\n+  std::vector<int> v(4, 0);\n+  ranges::move(rx, v.begin());\n+  VERIFY( ranges::equal(v, (int[]){1,2,3,0}) );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   static_assert(test03());\n   test04();\n+  test05();\n }"}]}