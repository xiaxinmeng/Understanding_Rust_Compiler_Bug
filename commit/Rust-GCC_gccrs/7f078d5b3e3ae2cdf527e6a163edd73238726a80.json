{"sha": "7f078d5b3e3ae2cdf527e6a163edd73238726a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwNzhkNWIzZTNhZTJjZGY1MjdlNmExNjNlZGQ3MzIzODcyNmE4MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-13T08:08:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:08:32Z"}, "message": "[Ada] Fix spurious instantiation error on private record type\n\nThis change was initially aimed at fixing a spurious instantiation error\ndue to a disambiguation issue which happens when a generic unit with two\nformal type parameters is instantiated on a single actual type that is\nprivate.\n\nThe compiler internally sets the Is_Generic_Actual_Type flag on the\nactual subtypes built for the instantiation in order to ease the\ndisambiguation, but it would fail to set it on the full view if the\nsubtypes are private.  The change makes it so that the flag is properly\nset and reset on the full view in this case.\n\nBut this uncovered an issue in Subtypes_Statically_Match, which was\nrelying on a stalled Is_Generic_Actual_Type flag set on a full view\noutside of the instantiation to return a positive answer.  This bypass\nwas meant to solve an issue arising with a private discriminated record\ntype whose completion is a discriminated record type itself derived from\na private discriminated record type, which is used as actual type in an\ninstantiation in another unit, and the instantiation is used in a child\nunit of the original unit.  In this case, the private and full views of\nthe generic actual type are swapped in the child unit, but there was a\nmismatch between the chain of full and underlying full views of the\nprivate discriminated record type and that of the generic actual type.\n\nThis secondary issue is solved by avoiding to skip the full view in the\npreparation of the completion of the private subtype and by directly\nconstraining the underlying full view of the full view of the base type\ninstead of building an underlying full view from scratch.\n\n2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Build_Underlying_Full_View): Delete.\n\t(Complete_Private_Subtype): Do not set the full view on the\n\tprivate subtype here.  If the full base is itself derived from\n\tprivate, do not re-derive the parent type but instead constrain\n\tan existing underlying full view.\n\t(Prepare_Private_Subtype_Completion): Do not get to the\n\tunderlying full view, if any.  Set the full view on the private\n\tsubtype here.\n\t(Process_Full_View): Likewise.\n\t* sem_ch12.adb (Check_Generic_Actuals): Also set\n\tIs_Generic_Actual_Type on the full view if the type of the\n\tactual is private.\n\t(Restore_Private_Views): Also reset Is_Generic_Actual_Type on\n\tthe full view if the type of the actual is private.\n\t* sem_eval.adb (Subtypes_Statically_Match): Remove bypass for\n\tgeneric actual types.\n\ngcc/testsuite/\n\n\t* gnat.dg/generic_inst10.adb, gnat.dg/generic_inst10_pkg.ads:\n\tNew testcase.\n\nFrom-SVN: r274357", "tree": {"sha": "5a9c1d85c24d546cdd613adfc293535d4476b014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a9c1d85c24d546cdd613adfc293535d4476b014"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f078d5b3e3ae2cdf527e6a163edd73238726a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f078d5b3e3ae2cdf527e6a163edd73238726a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f078d5b3e3ae2cdf527e6a163edd73238726a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f078d5b3e3ae2cdf527e6a163edd73238726a80/comments", "author": null, "committer": null, "parents": [{"sha": "5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0"}], "stats": {"total": 246, "additions": 90, "deletions": 156}, "files": [{"sha": "dc039a6d9197a9f59de142475b6f3bfd75d273ac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7f078d5b3e3ae2cdf527e6a163edd73238726a80", "patch": "@@ -1,3 +1,22 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Underlying_Full_View): Delete.\n+\t(Complete_Private_Subtype): Do not set the full view on the\n+\tprivate subtype here.  If the full base is itself derived from\n+\tprivate, do not re-derive the parent type but instead constrain\n+\tan existing underlying full view.\n+\t(Prepare_Private_Subtype_Completion): Do not get to the\n+\tunderlying full view, if any.  Set the full view on the private\n+\tsubtype here.\n+\t(Process_Full_View): Likewise.\n+\t* sem_ch12.adb (Check_Generic_Actuals): Also set\n+\tIs_Generic_Actual_Type on the full view if the type of the\n+\tactual is private.\n+\t(Restore_Private_Views): Also reset Is_Generic_Actual_Type on\n+\tthe full view if the type of the actual is private.\n+\t* sem_eval.adb (Subtypes_Statically_Match): Remove bypass for\n+\tgeneric actual types.\n+\n 2019-08-13  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_res.adb (Resolve_Selected_Component): When the type of the"}, {"sha": "f98f2fa49a7801027453baf69b7d1d82684e2fa1", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=7f078d5b3e3ae2cdf527e6a163edd73238726a80", "patch": "@@ -6804,7 +6804,12 @@ package body Sem_Ch12 is\n                Check_Private_View (Subtype_Indication (Parent (E)));\n             end if;\n \n-            Set_Is_Generic_Actual_Type (E, True);\n+            Set_Is_Generic_Actual_Type (E);\n+\n+            if Is_Private_Type (E) and then Present (Full_View (E)) then\n+               Set_Is_Generic_Actual_Type (Full_View (E));\n+            end if;\n+\n             Set_Is_Hidden (E, False);\n             Set_Is_Potentially_Use_Visible (E, In_Use (Instance));\n \n@@ -14603,6 +14608,10 @@ package body Sem_Ch12 is\n                null;\n             else\n                Set_Is_Generic_Actual_Type (E, False);\n+\n+               if Is_Private_Type (E) and then Present (Full_View (E)) then\n+                  Set_Is_Generic_Actual_Type (Full_View (E), False);\n+               end if;\n             end if;\n \n             --  An unusual case of aliasing: the actual may also be directly"}, {"sha": "ae8600c980333693281ebd354829148ced47d71a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 18, "deletions": 144, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7f078d5b3e3ae2cdf527e6a163edd73238726a80", "patch": "@@ -232,18 +232,6 @@ package body Sem_Ch3 is\n    --  Needs a more complete spec--what are the parameters exactly, and what\n    --  exactly is the returned value, and how is Bound affected???\n \n-   procedure Build_Underlying_Full_View\n-     (N   : Node_Id;\n-      Typ : Entity_Id;\n-      Par : Entity_Id);\n-   --  If the completion of a private type is itself derived from a private\n-   --  type, or if the full view of a private subtype is itself private, the\n-   --  back-end has no way to compute the actual size of this type. We build\n-   --  an internal subtype declaration of the proper parent type to convey\n-   --  this information. This extra mechanism is needed because a full\n-   --  view cannot itself have a full view (it would get clobbered during\n-   --  view exchanges).\n-\n    procedure Check_Access_Discriminant_Requires_Limited\n      (D   : Node_Id;\n       Loc : Node_Id);\n@@ -10447,111 +10435,6 @@ package body Sem_Ch3 is\n       return New_Bound;\n    end Build_Scalar_Bound;\n \n-   --------------------------------\n-   -- Build_Underlying_Full_View --\n-   --------------------------------\n-\n-   procedure Build_Underlying_Full_View\n-     (N   : Node_Id;\n-      Typ : Entity_Id;\n-      Par : Entity_Id)\n-   is\n-      Loc  : constant Source_Ptr := Sloc (N);\n-      Subt : constant Entity_Id :=\n-               Make_Defining_Identifier\n-                 (Loc, New_External_Name (Chars (Typ), 'S'));\n-\n-      Constr : Node_Id;\n-      Indic  : Node_Id;\n-      C      : Node_Id;\n-      Id     : Node_Id;\n-\n-      procedure Set_Discriminant_Name (Id : Node_Id);\n-      --  If the derived type has discriminants, they may rename discriminants\n-      --  of the parent. When building the full view of the parent, we need to\n-      --  recover the names of the original discriminants if the constraint is\n-      --  given by named associations.\n-\n-      ---------------------------\n-      -- Set_Discriminant_Name --\n-      ---------------------------\n-\n-      procedure Set_Discriminant_Name (Id : Node_Id) is\n-         Disc : Entity_Id;\n-\n-      begin\n-         Set_Original_Discriminant (Id, Empty);\n-\n-         if Has_Discriminants (Typ) then\n-            Disc := First_Discriminant (Typ);\n-            while Present (Disc) loop\n-               if Chars (Disc) = Chars (Id)\n-                 and then Present (Corresponding_Discriminant (Disc))\n-               then\n-                  Set_Chars (Id, Chars (Corresponding_Discriminant (Disc)));\n-               end if;\n-               Next_Discriminant (Disc);\n-            end loop;\n-         end if;\n-      end Set_Discriminant_Name;\n-\n-   --  Start of processing for Build_Underlying_Full_View\n-\n-   begin\n-      if Nkind (N) = N_Full_Type_Declaration then\n-         Constr := Constraint (Subtype_Indication (Type_Definition (N)));\n-\n-      elsif Nkind (N) = N_Subtype_Declaration then\n-         Constr := New_Copy_Tree (Constraint (Subtype_Indication (N)));\n-\n-      elsif Nkind (N) = N_Component_Declaration then\n-         Constr :=\n-           New_Copy_Tree\n-             (Constraint (Subtype_Indication (Component_Definition (N))));\n-\n-      else\n-         raise Program_Error;\n-      end if;\n-\n-      C := First (Constraints (Constr));\n-      while Present (C) loop\n-         if Nkind (C) = N_Discriminant_Association then\n-            Id := First (Selector_Names (C));\n-            while Present (Id) loop\n-               Set_Discriminant_Name (Id);\n-               Next (Id);\n-            end loop;\n-         end if;\n-\n-         Next (C);\n-      end loop;\n-\n-      Indic :=\n-        Make_Subtype_Declaration (Loc,\n-          Defining_Identifier => Subt,\n-          Subtype_Indication  =>\n-            Make_Subtype_Indication (Loc,\n-              Subtype_Mark => New_Occurrence_Of (Par, Loc),\n-              Constraint   => New_Copy_Tree (Constr)));\n-\n-      --  If this is a component subtype for an outer itype, it is not\n-      --  a list member, so simply set the parent link for analysis: if\n-      --  the enclosing type does not need to be in a declarative list,\n-      --  neither do the components.\n-\n-      if Is_List_Member (N)\n-        and then Nkind (N) /= N_Component_Declaration\n-      then\n-         Insert_Before (N, Indic);\n-      else\n-         Set_Parent (Indic, Parent (N));\n-      end if;\n-\n-      Analyze (Indic);\n-      Set_Underlying_Full_View (Typ, Full_View (Subt));\n-      Set_Is_Underlying_Full_View (Full_View (Subt));\n-   end Build_Underlying_Full_View;\n-\n    -------------------------------\n    -- Check_Abstract_Overriding --\n    -------------------------------\n@@ -12471,7 +12354,6 @@ package body Sem_Ch3 is\n \n       Set_Freeze_Node (Full, Empty);\n       Set_Is_Frozen (Full, False);\n-      Set_Full_View (Priv, Full);\n \n       if Has_Discriminants (Full) then\n          Set_Stored_Constraint_From_Discriminant_Constraint (Full);\n@@ -12492,26 +12374,24 @@ package body Sem_Ch3 is\n            (Full, Related_Nod, Full_Base, Discriminant_Constraint (Priv));\n \n       --  If the full base is itself derived from private, build a congruent\n-      --  subtype of its underlying type, for use by the back end. For a\n-      --  constrained record component, the declaration cannot be placed on\n-      --  the component list, but it must nevertheless be built an analyzed, to\n-      --  supply enough information for Gigi to compute the size of component.\n+      --  subtype of its underlying full view, for use by the back end.\n \n       elsif Ekind (Full_Base) in Private_Kind\n-        and then Is_Derived_Type (Full_Base)\n-        and then Has_Discriminants (Full_Base)\n-        and then (Ekind (Current_Scope) /= E_Record_Subtype)\n+        and then Present (Underlying_Full_View (Full_Base))\n       then\n-         if not Is_Itype (Priv)\n-           and then\n-             Nkind (Subtype_Indication (Parent (Priv))) = N_Subtype_Indication\n-         then\n-            Build_Underlying_Full_View\n-              (Parent (Priv), Full, Etype (Full_Base));\n-\n-         elsif Nkind (Related_Nod) = N_Component_Declaration then\n-            Build_Underlying_Full_View (Related_Nod, Full, Etype (Full_Base));\n-         end if;\n+         declare\n+            Underlying_Full_Base : constant Entity_Id\n+                                           := Underlying_Full_View (Full_Base);\n+            Underlying_Full : constant Entity_Id\n+                       := Make_Defining_Identifier (Sloc (Priv), Chars (Priv));\n+         begin\n+            Set_Is_Itype (Underlying_Full);\n+            Set_Associated_Node_For_Itype (Underlying_Full, Related_Nod);\n+            Complete_Private_Subtype\n+              (Priv, Underlying_Full, Underlying_Full_Base, Related_Nod);\n+            Set_Underlying_Full_View (Full, Underlying_Full);\n+            Set_Is_Underlying_Full_View (Underlying_Full);\n+         end;\n \n       elsif Is_Record_Type (Full_Base) then\n \n@@ -19928,20 +19808,12 @@ package body Sem_Ch3 is\n       Related_Nod : Node_Id)\n    is\n       Id_B   : constant Entity_Id := Base_Type (Id);\n-      Full_B : Entity_Id := Full_View (Id_B);\n+      Full_B : constant Entity_Id := Full_View (Id_B);\n       Full   : Entity_Id;\n \n    begin\n       if Present (Full_B) then\n \n-         --  Get to the underlying full view if necessary\n-\n-         if Is_Private_Type (Full_B)\n-           and then Present (Underlying_Full_View (Full_B))\n-         then\n-            Full_B := Underlying_Full_View (Full_B);\n-         end if;\n-\n          --  The Base_Type is already completed, we can complete the subtype\n          --  now. We have to create a new entity with the same name, Thus we\n          --  can't use Create_Itype.\n@@ -19950,6 +19822,7 @@ package body Sem_Ch3 is\n          Set_Is_Itype (Full);\n          Set_Associated_Node_For_Itype (Full, Related_Nod);\n          Complete_Private_Subtype (Id, Full, Full_B, Related_Nod);\n+         Set_Full_View (Id, Full);\n       end if;\n \n       --  The parent subtype may be private, but the base might not, in some\n@@ -20755,6 +20628,7 @@ package body Sem_Ch3 is\n                end if;\n \n                Complete_Private_Subtype (Full, Priv, Full_T, N);\n+               Set_Full_View (Full, Priv);\n \n                if Present (Priv_Scop) then\n                   Pop_Scope;"}, {"sha": "78740b956eeaddfbedfb288b29e939a02dce7050", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=7f078d5b3e3ae2cdf527e6a163edd73238726a80", "patch": "@@ -6031,17 +6031,7 @@ package body Sem_Eval is\n          --  same base type.\n \n          if Has_Discriminants (T1) /= Has_Discriminants (T2) then\n-            --  A generic actual type is declared through a subtype declaration\n-            --  and may have an inconsistent indication of the presence of\n-            --  discriminants, so check the type it renames.\n-\n-            if Is_Generic_Actual_Type (T1)\n-              and then not Has_Discriminants (Etype (T1))\n-              and then not Has_Discriminants (T2)\n-            then\n-               return True;\n-\n-            elsif In_Instance then\n+            if In_Instance then\n                if Is_Private_Type (T2)\n                  and then Present (Full_View (T2))\n                  and then Has_Discriminants (Full_View (T2))"}, {"sha": "f3882db65fbc11e6eee6d5b41087a73f946629e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f078d5b3e3ae2cdf527e6a163edd73238726a80", "patch": "@@ -1,3 +1,8 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/generic_inst10.adb, gnat.dg/generic_inst10_pkg.ads:\n+\tNew testcase.\n+\n 2019-08-13  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/tagged3.adb, gnat.dg/tagged3_pkg.adb,"}, {"sha": "75bb65a7f1af3efefcf4a6e6da0a5f26ba7f86db", "filename": "gcc/testsuite/gnat.dg/generic_inst10.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst10.adb?ref=7f078d5b3e3ae2cdf527e6a163edd73238726a80", "patch": "@@ -0,0 +1,26 @@\n+--  { dg-do compile }\n+\n+with Generic_Inst10_Pkg; use Generic_Inst10_Pkg;\n+\n+procedure Generic_Inst10 is\n+\n+   function Image (S : XString) return String is (S.To_String);\n+\n+   generic\n+      type Left_Type (<>) is private;\n+      type Right_Type (<>) is private;\n+      with function Image (L : Left_Type) return String is <>;\n+      with function Image (L : Right_Type) return String is <>;\n+   procedure G (Left : Left_Type; Right : Right_Type);\n+\n+   procedure G (Left : Left_Type; Right : Right_Type) is\n+      A : String := Image (Left) & Image (Right);\n+   begin\n+      null;\n+   end;\n+\n+   procedure My_G is new G (XString, XString);\n+\n+begin\n+   null;\n+end;"}, {"sha": "d9009ac3c320998dccbfda678c97ec3421136eb9", "filename": "gcc/testsuite/gnat.dg/generic_inst10_pkg.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst10_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f078d5b3e3ae2cdf527e6a163edd73238726a80/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst10_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst10_pkg.ads?ref=7f078d5b3e3ae2cdf527e6a163edd73238726a80", "patch": "@@ -0,0 +1,11 @@\n+package Generic_Inst10_Pkg is\n+\n+   type XString is tagged private;\n+\n+   function To_String (S : XString) return String;\n+\n+private\n+\n+   type XString is tagged null record;\n+\n+end Generic_Inst10_Pkg;"}]}