{"sha": "9407c6fa534498ea87bbd6640cc212016779cd52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwN2M2ZmE1MzQ0OThlYTg3YmJkNjY0MGNjMjEyMDE2Nzc5Y2Q1Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-02T12:38:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-02T12:38:44Z"}, "message": "any (any::_Storage): Make non-copyable.\n\n\t* include/experimental/any (any::_Storage): Make non-copyable.\n\t(any::any): Do not copy _Storage object.\n\t(any::operator=): Implement more efficiently than swapping.\n\t(any::swap): Use new _Op_xfer operation.\n\t(any::_Op::_Op_xfer): New enumerator.\n\t(_Manager_internal::_S_alloc): Remove unused function.\n\t(_Manager_internal::_S_create, _Manager_external::_S_create): Use out\n\tparameter instead of returning a _Storage object.\n\t(_Manager_internal::_S_manage, _Manager_external::_S_manage): Add\n\t_Op_xfer operation for moving and swapping.\n\t* testsuite/experimental/any/cons/nontrivial.cc: New.\n\t* testsuite/experimental/any/misc/any_cast_neg.cc: Adjust dg-error.\n\nFrom-SVN: r222721", "tree": {"sha": "c80d0cd99b2fbf4638ebafad68b347ebb363b39b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c80d0cd99b2fbf4638ebafad68b347ebb363b39b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9407c6fa534498ea87bbd6640cc212016779cd52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9407c6fa534498ea87bbd6640cc212016779cd52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9407c6fa534498ea87bbd6640cc212016779cd52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9407c6fa534498ea87bbd6640cc212016779cd52/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b244a78dc61f1461882f1a751b047ea81a8c2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b244a78dc61f1461882f1a751b047ea81a8c2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b244a78dc61f1461882f1a751b047ea81a8c2d5"}], "stats": {"total": 214, "additions": 180, "deletions": 34}, "files": [{"sha": "9ebae195eda39b70ddfb525230d9859cabb23466", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9407c6fa534498ea87bbd6640cc212016779cd52", "patch": "@@ -1,5 +1,18 @@\n 2015-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/any (any::_Storage): Make non-copyable.\n+\t(any::any): Do not copy _Storage object.\n+\t(any::operator=): Implement more efficiently than swapping.\n+\t(any::swap): Use new _Op_xfer operation.\n+\t(any::_Op::_Op_xfer): New enumerator.\n+\t(_Manager_internal::_S_alloc): Remove unused function.\n+\t(_Manager_internal::_S_create, _Manager_external::_S_create): Use out\n+\tparameter instead of returning a _Storage object.\n+\t(_Manager_internal::_S_manage, _Manager_external::_S_manage): Add\n+\t_Op_xfer operation for moving and swapping.\n+\t* testsuite/experimental/any/cons/nontrivial.cc: New.\n+\t* testsuite/experimental/any/misc/any_cast_neg.cc: Adjust dg-error.\n+\n \t* include/experimental/fs_path.h (filesystem_error::~filesystem_error):\n \tDeclare.\n \t* src/filesystem/path.cc (filesystem_error::~filesystem_error):"}, {"sha": "b2d1b9c1e48ffd3a798cfbf9a11f158aae24144c", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 91, "deletions": 33, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=9407c6fa534498ea87bbd6640cc212016779cd52", "patch": "@@ -90,6 +90,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Holds either pointer to a heap object or the contained object itself.\n     union _Storage\n     {\n+      // This constructor intentionally doesn't initialize anything.\n+      _Storage() = default;\n+\n+      // Prevent trivial copies of this type, buffer might hold a non-POD.\n+      _Storage(const _Storage&) = delete;\n+      _Storage& operator=(const _Storage&) = delete;\n+\n       void* _M_ptr;\n       std::aligned_storage<sizeof(_M_ptr), sizeof(_M_ptr)>::type _M_buffer;\n     };\n@@ -119,33 +126,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     any() noexcept : _M_manager(nullptr) { }\n \n     /// Copy constructor, copies the state of @p __other\n-    any(const any& __other) : _M_manager(__other._M_manager)\n+    any(const any& __other)\n     {\n-      if (!__other.empty())\n+      if (__other.empty())\n+\t_M_manager = nullptr;\n+      else\n \t{\n \t  _Arg __arg;\n \t  __arg._M_any = this;\n-\t  _M_manager(_Op_clone, &__other, &__arg);\n+\t  __other._M_manager(_Op_clone, &__other, &__arg);\n \t}\n     }\n \n     /**\n      * @brief Move constructor, transfer the state from @p __other\n      *\n-     * @post @c __other.empty() (not guaranteed for other implementations)\n+     * @post @c __other.empty() (this postcondition is a GNU extension)\n      */\n     any(any&& __other) noexcept\n-    : _M_manager(__other._M_manager),\n-      _M_storage(__other._M_storage)\n-    { __other._M_manager = nullptr; }\n+    {\n+      if (__other.empty())\n+\t_M_manager = nullptr;\n+      else\n+\t{\n+\t  _Arg __arg;\n+\t  __arg._M_any = this;\n+\t  __other._M_manager(_Op_xfer, &__other, &__arg);\n+\t}\n+    }\n \n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>>\n       any(_ValueType&& __value)\n-      : _M_manager(&_Mgr::_S_manage),\n-        _M_storage(_Mgr::_S_create(std::forward<_ValueType>(__value)))\n+      : _M_manager(&_Mgr::_S_manage)\n       {\n+        _Mgr::_S_create(_M_storage, std::forward<_ValueType>(__value));\n \tstatic_assert(is_copy_constructible<_Tp>::value,\n \t\t      \"The contained object must be CopyConstructible\");\n       }\n@@ -155,10 +171,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // assignments\n \n-    /// Copy the state of \n+    /// Copy the state of another object.\n     any& operator=(const any& __rhs)\n     {\n-      any(__rhs).swap(*this);\n+      if (__rhs.empty())\n+\tclear();\n+      else\n+\t{\n+\t  if (!empty())\n+\t    _M_manager(_Op_destroy, this, nullptr);\n+\t  _Arg __arg;\n+\t  __arg._M_any = this;\n+\t  __rhs._M_manager(_Op_clone, &__rhs, &__arg);\n+\t}\n       return *this;\n     }\n \n@@ -169,15 +194,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      */\n     any& operator=(any&& __rhs) noexcept\n     {\n-      any(std::move(__rhs)).swap(*this);\n+      if (__rhs.empty())\n+\tclear();\n+      else\n+\t{\n+\t  if (!empty())\n+\t    _M_manager(_Op_destroy, this, nullptr);\n+\t  _Arg __arg;\n+\t  __arg._M_any = this;\n+\t  __rhs._M_manager(_Op_xfer, &__rhs, &__arg);\n+\t}\n       return *this;\n     }\n \n     /// Store a copy of @p __rhs as the contained object.\n     template<typename _ValueType>\n       any& operator=(_ValueType&& __rhs)\n       {\n-\tany(std::forward<_ValueType>(__rhs)).swap(*this);\n+\t*this = any(std::forward<_ValueType>(__rhs));\n \treturn *this;\n       }\n \n@@ -195,10 +229,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// Exchange state with another object.\n     void swap(any& __rhs) noexcept\n-    {\n-      std::swap(_M_manager, __rhs._M_manager);\n-      std::swap(_M_storage, __rhs._M_storage);\n-    }\n+      {\n+\tif (empty() && __rhs.empty())\n+\t  return;\n+\n+\tif (!empty() && !__rhs.empty())\n+\t  {\n+\t    any __tmp;\n+\t    _Arg __arg;\n+\t    __arg._M_any = &__tmp;\n+\t    __rhs._M_manager(_Op_xfer, &__rhs, &__arg);\n+\t    __arg._M_any = &__rhs;\n+\t    _M_manager(_Op_xfer, this, &__arg);\n+\t    __arg._M_any = this;\n+\t    __tmp._M_manager(_Op_xfer, &__tmp, &__arg);\n+\t  }\n+\telse\n+\t  {\n+\t    any* __empty = empty() ? this : &__rhs;\n+\t    any* __full = empty() ? &__rhs : this;\n+\t    _Arg __arg;\n+\t    __arg._M_any = __empty;\n+\t    __full->_M_manager(_Op_xfer, __full, &__arg);\n+\t  }\n+      }\n \n     // observers\n \n@@ -222,7 +276,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __or_<is_reference<_Tp>, is_copy_constructible<_Tp>>::value; }\n \n   private:\n-    enum _Op { _Op_access, _Op_get_type_info, _Op_clone, _Op_destroy };\n+    enum _Op {\n+\t_Op_access, _Op_get_type_info, _Op_clone, _Op_destroy, _Op_xfer\n+    };\n \n     union _Arg\n     {\n@@ -252,20 +308,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_S_manage(_Op __which, const any* __anyp, _Arg* __arg);\n \n \ttemplate<typename _Up>\n-\t  static _Storage\n-\t  _S_create(_Up&& __value)\n+\t  static void\n+\t  _S_create(_Storage& __storage, _Up&& __value)\n \t  {\n-\t    _Storage __storage;\n \t    void* __addr = &__storage._M_buffer;\n \t    ::new (__addr) _Tp(std::forward<_Up>(__value));\n-\t    return __storage;\n-\t  }\n-\n-\ttemplate<typename _Alloc, typename _Up>\n-\t  static _Storage\n-\t  _S_alloc(const _Alloc&, _Up&& __value)\n-\t  {\n-\t    return _S_create(std::forward<_Up>(__value));\n \t  }\n       };\n \n@@ -277,12 +324,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_S_manage(_Op __which, const any* __anyp, _Arg* __arg);\n \n \ttemplate<typename _Up>\n-\t  static _Storage\n-\t  _S_create(_Up&& __value)\n+\t  static void\n+\t  _S_create(_Storage& __storage, _Up&& __value)\n \t  {\n-\t    _Storage __storage;\n \t    __storage._M_ptr = new _Tp(std::forward<_Up>(__value));\n-\t    return __storage;\n \t  }\n       };\n   };\n@@ -393,10 +438,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbreak;\n       case _Op_clone:\n \t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp(*__ptr);\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n \tbreak;\n       case _Op_destroy:\n \t__ptr->~_Tp();\n \tbreak;\n+      case _Op_xfer:\n+\t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp(*__ptr);\n+\t__ptr->~_Tp();\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n+\tconst_cast<any*>(__any)->_M_manager = nullptr;\n+\tbreak;\n       }\n     }\n \n@@ -419,10 +471,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbreak;\n       case _Op_clone:\n \t__arg->_M_any->_M_storage._M_ptr = new _Tp(*__ptr);\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n \tbreak;\n       case _Op_destroy:\n \tdelete __ptr;\n \tbreak;\n+      case _Op_xfer:\n+\t__arg->_M_any->_M_storage._M_ptr = __any->_M_storage._M_ptr;\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n+\tconst_cast<any*>(__any)->_M_manager = nullptr;\n+\tbreak;\n       }\n     }\n "}, {"sha": "14b77655c48fd8449789a5d53e6fe4cec53a6b3f", "filename": "libstdc++-v3/testsuite/experimental/any/cons/nontrivial.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2Fnontrivial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2Fnontrivial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2Fnontrivial.cc?ref=9407c6fa534498ea87bbd6640cc212016779cd52", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++14\" }\n+\n+#include <experimental/any>\n+#include <testsuite_hooks.h>\n+\n+struct LocationAware\n+{\n+  LocationAware() { }\n+  ~LocationAware() { VERIFY(self == this); }\n+  LocationAware(const LocationAware&) { }\n+  LocationAware& operator=(const LocationAware&) { return *this; }\n+  LocationAware(LocationAware&&) noexcept { }\n+  LocationAware& operator=(LocationAware&&) noexcept { return *this; }\n+\n+  void* const self = this;\n+};\n+static_assert(std::is_nothrow_move_constructible<LocationAware>::value, \"\");\n+static_assert(!std::is_trivially_copyable<LocationAware>::value, \"\");\n+\n+using std::experimental::any;\n+\n+void\n+test01()\n+{\n+\n+  LocationAware l;\n+  any a = l;\n+}\n+\n+void\n+test02()\n+{\n+  LocationAware l;\n+  any a = l;\n+  any b = a;\n+  {\n+    any tmp = std::move(a);\n+    a = std::move(b);\n+    b = std::move(tmp);\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  LocationAware l;\n+  any a = l;\n+  any b = a;\n+  swap(a, b);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "5823175cbeb2b9efed12f282a44297376e83374c", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9407c6fa534498ea87bbd6640cc212016779cd52/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=9407c6fa534498ea87bbd6640cc212016779cd52", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::experimental::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 310 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 355 }\n }"}]}