{"sha": "d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0YTU3NWY2MmI2MjFlM2RmNzVjMmNkNzgyM2E2NjEzYTJmMWRjOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-10-07T07:07:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-10-07T07:07:07Z"}, "message": "re PR c++/10147 (Confusing error message for invalid template function argument)\n\n\tPR c++/10147\n\t* call.c (initialize_reference): Tweak error message.\n\n\tPR c++/12337\n\t* init.c (build_new_1): Make sure that the expression returned is\n\tnot an lvalue.\n\n\tPR c++/12344, c++/12236, c++/8656\n\t* decl.c (start_function): Do not ignore attributes embedded in a\n\tfunction declarator.\n\n\tPR c++/12337\n\t* g++.dg/init/new9.C: New test.\n\n\tPR c++/12334, c++/12236, c++/8656\n\t* g++.dg/ext/attrib8.C: New test.\n\nFrom-SVN: r72183", "tree": {"sha": "c12092a2354ac3c5aa978d1c9dc718ab56108813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c12092a2354ac3c5aa978d1c9dc718ab56108813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/comments", "author": null, "committer": null, "parents": [{"sha": "be7630230540a61c7e9db3d922acc6680e89e7d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7630230540a61c7e9db3d922acc6680e89e7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7630230540a61c7e9db3d922acc6680e89e7d2"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "3cbb85c7dbd633c70bc74e2e82a1c8028b00bb57", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -1,3 +1,20 @@\n+2003-10-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10147\n+\t* call.c (initialize_reference): Tweak error message.\n+\t* cxx-pretty-print.h (cxx_pretty_printer_flags): Remove\n+\tpp_cxx_flag_qualified_id and pp_cxx_flag_global_scope.\n+\t* cxx-pretty-print.c (pp_cxx_id_expression): Always display\n+\tqualified entities using qualified names.\n+\t\n+\tPR c++/12337\n+\t* init.c (build_new_1): Make sure that the expression returned is\n+\tnot an lvalue.\n+\n+\tPR c++/12344, c++/12236, c++/8656\n+\t* decl.c (start_function): Do not ignore attributes embedded in a\n+\tfunction declarator.\n+\n 2003-10-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Make-lang.in (c++.info): Remove."}, {"sha": "a8dcd2ae77ac5f228bf642ac80b98dc26e6ea636", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -6055,7 +6055,9 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n                \"type '%T' from a temporary of type '%T'\",\n                type, TREE_TYPE (expr));\n       else\n-        error (\"could not convert `%E' to `%T'\", expr, type);\n+        error (\"invalid initialization of reference of type \"\n+\t       \"'%T' from expression of type '%T'\", type, \n+\t       TREE_TYPE (expr));\n       return error_mark_node;\n     }\n "}, {"sha": "834cf88a0447c81f3742b534d9ceef4df12589d2", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -268,9 +268,7 @@ pp_cxx_id_expression (cxx_pretty_printer *pp, tree t)\n {\n   if (TREE_CODE (t) == OVERLOAD)\n     t = OVL_CURRENT (t);\n-  if ((TREE_CODE (t) == FUNCTION_DECL && DECL_FUNCTION_MEMBER_P (t))\n-      || (pp_c_base (pp)->flags\n-          & (pp_cxx_flag_qualified_id | pp_cxx_flag_global_scope)))\n+  if (DECL_P (t) && DECL_CONTEXT (t))\n     pp_cxx_qualified_id (pp, t);\n   else\n     pp_cxx_unqualified_id (pp, t);"}, {"sha": "b47eff0ef1969cc7a103e237a70fdbbda4131d4f", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -30,9 +30,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n typedef enum\n {\n   /* Ask for an qualified-id.  */\n-  pp_cxx_flag_qualified_id = 1 << pp_c_flag_last_bit,\n-  pp_cxx_flag_global_scope = 1 << (pp_c_flag_last_bit + 1),\n-  pp_cxx_flag_default_argument = 1 << (pp_c_flag_last_bit + 2)\n+  pp_cxx_flag_default_argument = 1 << pp_c_flag_last_bit\n   \n } cxx_pretty_printer_flags;\n "}, {"sha": "4b23ee286989c07449b6c2b5c94b79a01b990c07", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -13135,7 +13135,7 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n     }\n   else\n     {\n-      decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, 1, NULL);\n+      decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, 1, &attrs);\n       /* If the declarator is not suitable for a function definition,\n \t cause a syntax error.  */\n       if (decl1 == NULL_TREE || TREE_CODE (decl1) != FUNCTION_DECL)"}, {"sha": "503034569915b508b45e52e4fbe2373dd6b2fec6", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -2276,7 +2276,13 @@ build_new_1 (tree exp)\n     }\n \n   /* Convert to the final type.  */\n-  return build_nop (pointer_type, rval);\n+  rval = build_nop (pointer_type, rval);\n+\n+  /* A new-expression is never an lvalue.  */\n+  if (real_lvalue_p (rval))\n+    rval = build1 (NON_LVALUE_EXPR, TREE_TYPE (rval), rval);\n+\n+  return rval;\n }\n \f\n static tree"}, {"sha": "21f4e1588cb862da3c358b49a14aeb434513fb58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -1,3 +1,15 @@\n+2003-10-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10147\n+\t* g++.dg/other/error4.C: Update error messages.\n+\t* g++.dg/template/ptrmem4.C: Likewise.\n+\t\n+\tPR c++/12337\n+\t* g++.dg/init/new9.C: New test.\n+\t\n+\tPR c++/12334, c++/12236, c++/8656\n+\t* g++.dg/ext/attrib8.C: New test.\n+\n 2003-10-06  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/debug/dwarf2-3.h: New test."}, {"sha": "12f6d0b39d51fea262190eb123e1026f077eb8c3", "filename": "gcc/testsuite/g++.dg/ext/attrib8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib8.C?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -0,0 +1,9 @@\n+// PR 8656\n+\n+extern int * (__attribute__((stdcall)) *fooPtr)( void);\n+int * __attribute__((stdcall)) myFn01( void) { return 0; }\n+\n+void snafu( void)\n+{\n+  fooPtr = myFn01;\n+}"}, {"sha": "6729d76fd00cb420461ea4f2e3a3fa66ae4e7890", "filename": "gcc/testsuite/g++.dg/init/new9.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew9.C?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -0,0 +1,22 @@\n+// PR 12337\n+\n+class A {};\n+\n+template <typename T>\n+class X : public A {\n+public:\n+  X(T&);\n+};\n+\n+class B {\n+public:\n+  bool foo(A*);\n+  template <typename T>\n+  bool foo(T& t) { return foo(new X<T>(t)); }\n+};\n+\n+int main()\n+{\n+  B x, y;\n+  x.foo(y);\n+}"}, {"sha": "bd740d92a3143c0a45365c4b2b071843fc0863ed", "filename": "gcc/testsuite/g++.dg/other/error4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror4.C?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -11,5 +11,5 @@ void Foo(int const &); // { dg-error \"in passing\" \"\" }\n \n void Baz ()\n {\n-  Foo (Wrapper ()); // { dg-error \"convert `Wrapper *\\\\(\\\\)' to\" \"\" }\n+  Foo (Wrapper ()); // { dg-error \"Wrapper\" \"\" }\n }"}, {"sha": "5cfd8c7c8d604d9f22d1f45b5d2bcac50ca7e5c6", "filename": "gcc/testsuite/g++.dg/template/ptrmem4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04a575f62b621e3df75c2cd7823a6613a2f1dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem4.C?ref=d04a575f62b621e3df75c2cd7823a6613a2f1dc8", "patch": "@@ -16,5 +16,5 @@ struct SpyExample\n \n void SpyExample::ready()\n {\n-  queryAliases(inputs);\t// { dg-error \"convert\" }\n+  queryAliases(inputs);\t// { dg-error \"\" }\n }"}]}