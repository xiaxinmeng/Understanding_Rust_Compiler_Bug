{"sha": "a13ab2bcf79b87e83bbc44e8c766b1120b875e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzYWIyYmNmNzliODdlODNiYmM0NGU4Yzc2NmIxMTIwYjg3NWUzYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-10-11T22:18:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-11T22:18:27Z"}, "message": "hashtable_policy.h: Revert libstdc++/53067 quick hacks thanks to the resolution of c++/51213.\n\n2012-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable_policy.h: Revert libstdc++/53067 quick\n\thacks thanks to the resolution of c++/51213.\n\nFrom-SVN: r192380", "tree": {"sha": "48acd6bae3b44d70db5f7b88f645ed2e49b27547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48acd6bae3b44d70db5f7b88f645ed2e49b27547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c/comments", "author": null, "committer": null, "parents": [{"sha": "bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd37e09f8545b89cc6ddb2b315fa5cc711134c7f"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "f9fb77c5a16ba4c1d8ecddaa9c97f720a42795dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a13ab2bcf79b87e83bbc44e8c766b1120b875e3c", "patch": "@@ -1,3 +1,8 @@\n+2012-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable_policy.h: Revert libstdc++/53067 quick\n+\thacks thanks to the resolution of c++/51213.\n+\n 2012-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/23_containers/bitset/45713.cc: Tweak."}, {"sha": "c1331ce6588726790a721a93dc376c2de47f9952", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13ab2bcf79b87e83bbc44e8c766b1120b875e3c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=a13ab2bcf79b87e83bbc44e8c766b1120b875e3c", "patch": "@@ -921,8 +921,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Specialization using EBO.\n   template<int _Nm, typename _Tp>\n     struct _Hashtable_ebo_helper<_Nm, _Tp, true>\n-    // See PR53067.\n-    : public _Tp\n+    : private _Tp\n     {\n       _Hashtable_ebo_helper() = default;\n \n@@ -989,9 +988,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Value, typename _ExtractKey,\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>\n-    // See PR53067.\n-    : public  _Hashtable_ebo_helper<0, _ExtractKey>,\n-      public  _Hashtable_ebo_helper<1, _Hash>\n+    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n+      private _Hashtable_ebo_helper<1, _Hash>\n     {\n     private:\n       typedef _Hashtable_ebo_helper<0, _ExtractKey> \t_EboExtractKey;\n@@ -1066,10 +1064,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, false>\n-    // See PR53067.\n-    : public  _Hashtable_ebo_helper<0, _ExtractKey>,\n-      public  _Hashtable_ebo_helper<1, _H1>,\n-      public  _Hashtable_ebo_helper<2, _H2>\n+    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n+      private _Hashtable_ebo_helper<1, _H1>,\n+      private _Hashtable_ebo_helper<2, _H2>\n     {\n     private:\n       typedef _Hashtable_ebo_helper<0, _ExtractKey> \t_EboExtractKey;\n@@ -1150,10 +1147,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, true>\n-    // See PR53067.\n-    : public  _Hashtable_ebo_helper<0, _ExtractKey>,\n-      public  _Hashtable_ebo_helper<1, _H1>,\n-      public  _Hashtable_ebo_helper<2, _H2>\n+    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n+      private _Hashtable_ebo_helper<1, _H1>,\n+      private _Hashtable_ebo_helper<2, _H2>\n     {\n     private:\n       typedef _Hashtable_ebo_helper<0, _ExtractKey>\t_EboExtractKey;\n@@ -1272,8 +1268,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, true>\n-    // See PR53067.\n-    : public _H2\n+    : private _H2\n     {\n       _Local_iterator_base() = default;\n       _Local_iterator_base(_Hash_node<_Value, true>* __p,\n@@ -1305,9 +1300,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, false>\n-    // See PR53067.\n-    : public _Hash_code_base<_Key, _Value, _ExtractKey,\n-\t\t\t     _H1, _H2, _Hash, false>\n+    : private _Hash_code_base<_Key, _Value, _ExtractKey,\n+\t\t\t      _H1, _H2, _Hash, false>\n     {\n       _Local_iterator_base() = default;\n       _Local_iterator_base(_Hash_node<_Value, false>* __p,\n@@ -1470,10 +1464,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _Traits>\n   struct _Hashtable_base\n-  // See PR53067.\n-  : public  _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,\n-\t\t\t      _Traits::__hash_cached::value>,\n-    public _Hashtable_ebo_helper<0, _Equal>\n+  : public _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,\n+\t\t\t   _Traits::__hash_cached::value>,\n+    private _Hashtable_ebo_helper<0, _Equal>\n   {\n   public:\n     typedef _Key                                    key_type;"}]}