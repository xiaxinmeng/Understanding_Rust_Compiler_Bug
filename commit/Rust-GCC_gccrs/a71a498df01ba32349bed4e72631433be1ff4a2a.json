{"sha": "a71a498df01ba32349bed4e72631433be1ff4a2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcxYTQ5OGRmMDFiYTMyMzQ5YmVkNGU3MjYzMTQzM2JlMWZmNGEyYQ==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-05-25T11:52:13Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-25T11:52:13Z"}, "message": "loop-doloop.c: Include \"target.h\".\n\n2005-05-25  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* loop-doloop.c: Include \"target.h\".\n\t  (doloop_valid_p): Move tests to function in targhooks.c.\n\t* target.h (struct gcc_target): New target hook\n\t  \"insn_valid_within_doloop\".\n\t* target-def.h: Define default value for \"insn_valid_within_doloop\".\n\t  (TARGET_INITIALIZER): Insert new target hook into initializer.\n\t* targhooks.c (default_insn_valid_within_doloop): New function.\n\t* targhooks.h (default_insn_valid_within_doloop): Declare.\n\t* hooks.c (hook_bool_rtx_true): New function.\n\t* hooks.h (hook_bool_rtx_true): Declare.\n\t* doc/tm.texi: Add documentation for new target hook.\n\nFrom-SVN: r100143", "tree": {"sha": "f896023adb7eb858c67b994bbe4eac93db8874ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f896023adb7eb858c67b994bbe4eac93db8874ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a71a498df01ba32349bed4e72631433be1ff4a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71a498df01ba32349bed4e72631433be1ff4a2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71a498df01ba32349bed4e72631433be1ff4a2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71a498df01ba32349bed4e72631433be1ff4a2a/comments", "author": null, "committer": null, "parents": [{"sha": "be62afb4d55d42c776c13a70800f3d0300f9bb6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be62afb4d55d42c776c13a70800f3d0300f9bb6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be62afb4d55d42c776c13a70800f3d0300f9bb6a"}], "stats": {"total": 98, "additions": 79, "deletions": 19}, "files": [{"sha": "5acda30aa5f64b59a0e1fc3ebbaf4b13405f5679", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -1,3 +1,17 @@\n+2005-05-25  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* loop-doloop.c: Include \"target.h\". \n+\t  (doloop_valid_p): Move tests to function in targhooks.c.\n+\t* target.h (struct gcc_target): New target hook\n+\t  \"insn_valid_within_doloop\".\n+\t* target-def.h: Define default value for \"insn_valid_within_doloop\".\n+\t  (TARGET_INITIALIZER): Insert new target hook into initializer.\n+\t* targhooks.c (default_insn_valid_within_doloop): New function.\n+\t* targhooks.h (default_insn_valid_within_doloop): Declare.\n+\t* hooks.c (hook_bool_rtx_true): New function.\n+\t* hooks.h (hook_bool_rtx_true): Declare.\n+\t* doc/tm.texi: Add documentation for new target hook.\n+\n 2005-05-25  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/21412"}, {"sha": "e541a20d2a9d003125b670193b5a2626166ad7c4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -9511,6 +9511,17 @@ simplified expression for the call's result.  If @var{ignore} is true\n the value will be ignored.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_INSN_VALID_WITHIN_DOLOOP (rtx @var{insn})\n+\n+Take an instruction in @var{insn} and return true if it is valid within a\n+low-overhead loop.\n+\n+Many targets use special registers for low-overhead looping. This function\n+should return false for any instruction that clobbers these. \n+By default, the RTL loop optimizer does not use a present doloop pattern for\n+loops containing function calls or brach on table instructions.  \n+@end deftypefn\n+\n @defmac MD_CAN_REDIRECT_BRANCH (@var{branch1}, @var{branch2})\n \n Take a branch insn in @var{branch1} and another in @var{branch2}."}, {"sha": "30ba6d100dad89fe28688906786d2c5bab01745d", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -191,6 +191,12 @@ hook_bool_rtx_false (rtx a ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+bool\n+hook_bool_rtx_true (rtx a ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n bool\n hook_bool_uintp_uintp_false (unsigned int *a ATTRIBUTE_UNUSED,\n \t\t\t     unsigned int *b ATTRIBUTE_UNUSED)"}, {"sha": "b78f497054998223e6c37e48a0ff9f39dc34a7e8", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -35,6 +35,7 @@ extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_IN\n extern bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t       tree);\n extern bool hook_bool_rtx_false (rtx);\n+extern bool hook_bool_rtx_true (rtx);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n extern bool hook_bool_constcharptr_size_t_false (const char *, size_t);"}, {"sha": "4a2bb8774ee278baadc9c85d2d06e22c110370a5", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cfgloop.h\"\n #include \"output.h\"\n #include \"params.h\"\n+#include \"target.h\"\n \n /* This module is used to modify loops with a determinable number of\n    iterations to use special low-overhead looping instructions.\n@@ -187,27 +188,14 @@ doloop_valid_p (struct loop *loop, struct niter_desc *desc)\n \t   insn != NEXT_INSN (BB_END (bb));\n \t   insn = NEXT_INSN (insn))\n \t{\n-\t  /* A called function may clobber any special registers required for\n-\t     low-overhead looping.  */\n-\t  if (CALL_P (insn))\n-\t    {\n-\t      if (dump_file)\n-\t\tfprintf (dump_file, \"Doloop: Function call in loop.\\n\");\n+\t  /* Different targets have different necessities for low-overhead\n+\t     looping.  Call the back end for each instruction within the loop\n+\t     to let it decide whether the insn is valid.  */\n+\t  if (!targetm.insn_valid_within_doloop (insn))\n+\t  {\n \t      result = false;\n \t      goto cleanup;\n-\t    }\n-\n-\t  /* Some targets (eg, PPC) use the count register for branch on table\n-\t     instructions.  ??? This should be a target specific check.  */\n-\t  if (JUMP_P (insn)\n-\t      && (GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC))\n-\t    {\n-\t      if (dump_file)\n-\t\tfprintf (dump_file, \"Doloop: Computed branch in the loop.\\n\");\n-\t      result = false;\n-\t      goto cleanup;\n-\t    }\n+\t  }\n \t}\n     }\n   result = true;"}, {"sha": "49e25a168baf4b067cf0d2eb81a09990c789336d", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -137,6 +137,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_HAVE_NAMED_SECTIONS false\n #endif\n \n+#ifndef TARGET_INSN_VALID_WITHIN_DOLOOP\n+#define TARGET_INSN_VALID_WITHIN_DOLOOP default_insn_valid_within_doloop\n+#endif\n+\n #ifndef TARGET_HAVE_TLS\n #define TARGET_HAVE_TLS false\n #endif\n@@ -553,6 +557,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_DWARF_CALLING_CONVENTION,              \\\n   TARGET_DWARF_HANDLE_FRAME_UNSPEC,\t\t\\\n   TARGET_STDARG_OPTIMIZE_HOOK,\t\t\t\\\n+  TARGET_INSN_VALID_WITHIN_DOLOOP,\t\t\\\n   TARGET_CALLS,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\"}, {"sha": "38f09b01e0555463d53e1d40dde748497d69ae6d", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -520,6 +520,9 @@ struct gcc_target\n      to be checked for va_list references.  */\n   bool (*stdarg_optimize_hook) (struct stdarg_info *ai, tree lhs, tree rhs);\n \n+  /* Returns true if target supports the insn within a doloop block.  */\n+  bool (*insn_valid_within_doloop) (rtx);\n+    \n   /* Functions relating to calls - argument passing, returns, etc.  */\n   struct calls {\n     bool (*promote_function_args) (tree fntype);"}, {"sha": "1f8b5b76ee7d2bfcd80e4c824dda3621cc3b51ed", "filename": "gcc/targhooks.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -262,6 +262,36 @@ default_scalar_mode_supported_p (enum machine_mode mode)\n     }\n }\n \n+/* TRUE if INSN insn is valid within a low-overhead loop.\n+  \n+   This function checks wheter a given INSN is valid within a low-overhead\n+   loop.  A called function may clobber any special registers required for\n+   low-overhead looping. Additionally, some targets (eg, PPC) use the count\n+   register for branch on table instructions. We reject the doloop pattern in\n+   these cases.  */\n+\n+bool \n+default_insn_valid_within_doloop (rtx insn)\n+{\n+  if (CALL_P (insn))\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \"Doloop: Function call in loop.\\n\");\n+\treturn false;\n+    }\n+  \n+  if (JUMP_P (insn)\n+      && (GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n+\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC))\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \"Doloop: Computed branch in the loop.\\n\");\n+      return false;\n+    }\n+  \n+  return true;\n+}\n+\n bool\n hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false (\n \tCUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,"}, {"sha": "b4906ae1b3ac5d0d384cbd707cd0d74e59163e4b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71a498df01ba32349bed4e72631433be1ff4a2a/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=a71a498df01ba32349bed4e72631433be1ff4a2a", "patch": "@@ -46,6 +46,8 @@ extern void default_unwind_emit (FILE *, rtx);\n \n extern bool default_scalar_mode_supported_p (enum machine_mode);\n \n+extern bool default_insn_valid_within_doloop (rtx);\n+\n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */\n "}]}