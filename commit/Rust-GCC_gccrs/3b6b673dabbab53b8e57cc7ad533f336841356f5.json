{"sha": "3b6b673dabbab53b8e57cc7ad533f336841356f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I2YjY3M2RhYmJhYjUzYjhlNTdjYzdhZDUzM2YzMzY4NDEzNTZmNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-13T06:04:19Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-13T06:04:19Z"}, "message": "2003-05-13  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/ByteBufferImpl.java\n\t(ByteBufferImpl): All constructors revised.\n\t(slice): Reimplemented.\n\t(duplicate): Reimplemented.\n\t(asReadOnlyBuffer): Reimplemented.\n\t* java/nio/ByteBuffer.java:\n\tReformatted.\n\t(array_offset): Renamed from \"offset\" to match all other buffer\n\tclasses.\n\t(ByteBuffer): All constructors revised.\n\t(allocateDirect): Implemented.\n\t(allocate): New implementation, documentation reworked.\n\t(wrap): Likewise.\n\t(get): Documentation reworked.\n\t(put): New implementation, documentation reworked.\n\t(hasArray): Documentation reworked.\n\t(arrayOffset): Likewise.\n\t(hashCode): Likewise.\n\t(equals): Likewise.\n\t(compareTo): Likewise.\n\t(order): Likewise.\n\t(compact): Likewise.\n\t(isDirect): Likewise.\n\t(slice): Likewise.\n\t(duplicate): Likewise.\n\t(asReadOnlyBuffer): Likewise.\n\t* Makefile.am\n\t(ordinary_java_source_files):\n\tAdded gnu/java/nio/DirectByteBufferImpl.java.\n\t(nat_source_files):\n\tAdded gnu/java/nio/natDirectByteBufferImpl.cc.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r66749", "tree": {"sha": "44f31eb3b58450408facde2f506a93324a6ebc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44f31eb3b58450408facde2f506a93324a6ebc41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b6b673dabbab53b8e57cc7ad533f336841356f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6b673dabbab53b8e57cc7ad533f336841356f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6b673dabbab53b8e57cc7ad533f336841356f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6b673dabbab53b8e57cc7ad533f336841356f5/comments", "author": null, "committer": null, "parents": [{"sha": "250ab7c3087404b67719302f92721f43b0bf365e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250ab7c3087404b67719302f92721f43b0bf365e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/250ab7c3087404b67719302f92721f43b0bf365e"}], "stats": {"total": 371, "additions": 215, "deletions": 156}, "files": [{"sha": "baa470a94611bd7ada1d328f9f2cb02fece223c0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3b6b673dabbab53b8e57cc7ad533f336841356f5", "patch": "@@ -1,3 +1,38 @@\n+2003-05-13  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/ByteBufferImpl.java\n+\t(ByteBufferImpl): All constructors revised.\n+\t(slice): Reimplemented.\n+\t(duplicate): Reimplemented.\n+\t(asReadOnlyBuffer): Reimplemented.\n+\t* java/nio/ByteBuffer.java:\n+\tReformatted.\n+\t(array_offset): Renamed from \"offset\" to match all other buffer\n+\tclasses.\n+\t(ByteBuffer): All constructors revised.\n+\t(allocateDirect): Implemented.\n+\t(allocate): New implementation, documentation reworked.\n+\t(wrap): Likewise.\n+\t(get): Documentation reworked.\n+\t(put): New implementation, documentation reworked.\n+\t(hasArray): Documentation reworked.\n+\t(arrayOffset): Likewise.\n+\t(hashCode): Likewise.\n+\t(equals): Likewise.\n+\t(compareTo): Likewise.\n+\t(order): Likewise.\n+\t(compact): Likewise.\n+\t(isDirect): Likewise.\n+\t(slice): Likewise.\n+\t(duplicate): Likewise.\n+\t(asReadOnlyBuffer): Likewise.\n+\t* Makefile.am\n+\t(ordinary_java_source_files):\n+\tAdded gnu/java/nio/DirectByteBufferImpl.java.\n+\t(nat_source_files):\n+\tAdded gnu/java/nio/natDirectByteBufferImpl.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2003-05-12  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/ByteBufferImpl.java: Reformatted."}, {"sha": "2f394ddd42e4c46e5f32107128d4b4ec24f6278c", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=3b6b673dabbab53b8e57cc7ad533f336841356f5", "patch": "@@ -2100,6 +2100,7 @@ gnu/java/nio/ByteBufferImpl.java \\\n gnu/java/nio/CharBufferImpl.java \\\n gnu/java/nio/CharViewBufferImpl.java \\\n gnu/java/nio/DatagramChannelImpl.java \\\n+gnu/java/nio/DirectByteBufferImpl.java \\\n gnu/java/nio/DoubleBufferImpl.java \\\n gnu/java/nio/DoubleViewBufferImpl.java \\\n gnu/java/nio/FileChannelImpl.java \\\n@@ -2561,6 +2562,7 @@ gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natStackTrace.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n+gnu/java/nio/natDirectByteBufferImpl.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\"}, {"sha": "78eec34c1bb9e871e0134172405a8eabb507375d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=3b6b673dabbab53b8e57cc7ad533f336841356f5", "patch": "@@ -1862,6 +1862,7 @@ gnu/java/nio/ByteBufferImpl.java \\\n gnu/java/nio/CharBufferImpl.java \\\n gnu/java/nio/CharViewBufferImpl.java \\\n gnu/java/nio/DatagramChannelImpl.java \\\n+gnu/java/nio/DirectByteBufferImpl.java \\\n gnu/java/nio/DoubleBufferImpl.java \\\n gnu/java/nio/DoubleViewBufferImpl.java \\\n gnu/java/nio/FileChannelImpl.java \\\n@@ -2322,6 +2323,7 @@ gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natStackTrace.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n+gnu/java/nio/natDirectByteBufferImpl.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n@@ -2496,7 +2498,9 @@ gnu/gcj/io/shs.lo gnu/gcj/protocol/core/natCoreInputStream.lo \\\n gnu/gcj/runtime/natFinalizerThread.lo gnu/gcj/runtime/natFirstThread.lo \\\n gnu/gcj/runtime/natNameFinder.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n gnu/gcj/runtime/natStackTrace.lo gnu/gcj/runtime/natStringBuffer.lo \\\n-gnu/gcj/runtime/natVMClassLoader.lo gnu/java/nio/natFileChannelImpl.lo \\\n+gnu/gcj/runtime/natVMClassLoader.lo \\\n+gnu/java/nio/natDirectByteBufferImpl.lo \\\n+gnu/java/nio/natFileChannelImpl.lo \\\n gnu/java/nio/natMappedByteFileBuffer.lo gnu/java/nio/natSelectorImpl.lo \\\n gnu/java/nio/natSocketChannelImpl.lo java/io/natFile.lo \\\n java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n@@ -2963,6 +2967,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/CharBufferImpl.P \\\n .deps/gnu/java/nio/CharViewBufferImpl.P \\\n .deps/gnu/java/nio/DatagramChannelImpl.P \\\n+.deps/gnu/java/nio/DirectByteBufferImpl.P \\\n .deps/gnu/java/nio/DoubleBufferImpl.P \\\n .deps/gnu/java/nio/DoubleViewBufferImpl.P \\\n .deps/gnu/java/nio/FileChannelImpl.P \\\n@@ -2988,6 +2993,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/charset/UTF_16Encoder.P \\\n .deps/gnu/java/nio/charset/UTF_16LE.P \\\n .deps/gnu/java/nio/charset/UTF_8.P \\\n+.deps/gnu/java/nio/natDirectByteBufferImpl.P \\\n .deps/gnu/java/nio/natFileChannelImpl.P \\\n .deps/gnu/java/nio/natMappedByteFileBuffer.P \\\n .deps/gnu/java/nio/natSelectorImpl.P \\"}, {"sha": "cc7fabb594106a3679c58161575b22cb6142b59e", "filename": "libjava/gnu/java/nio/ByteBufferImpl.java", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java?ref=3b6b673dabbab53b8e57cc7ad533f336841356f5", "patch": "@@ -53,19 +53,16 @@\n public final class ByteBufferImpl extends ByteBuffer\n {\n   private boolean readOnly;\n-  \n-  public ByteBufferImpl (int cap, int off, int lim)\n+\n+  ByteBufferImpl (int capacity)\n   {\n-    super (cap, lim, off, 0);\n-    this.backing_buffer = new byte [cap];\n-    readOnly = false;\n+    this (new byte [capacity], 0, capacity, capacity, 0, -1, false);\n   }\n-\n-  public ByteBufferImpl (byte[] array, int offset, int length)\n+  \n+  ByteBufferImpl (byte[] buffer, int offset, int capacity, int limit, int position, int mark, boolean readOnly)\n   {\n-    super (array.length, length, offset, 0);\n-    this.backing_buffer = array;\n-    readOnly = false;\n+    super (buffer, offset, capacity, limit, position, mark);\n+    this.readOnly = readOnly;\n   }\n   \n   public ByteBufferImpl (ByteBufferImpl copy)\n@@ -117,19 +114,17 @@ public boolean isReadOnly ()\n   \n   public ByteBuffer slice ()\n   {\n-    return new ByteBufferImpl (this);\n+    return new ByteBufferImpl (backing_buffer, array_offset + position (), remaining (), remaining (), 0, -1, isReadOnly ());\n   }\n   \n   public ByteBuffer duplicate ()\n   {\n-    return new ByteBufferImpl (this);\n+    return new ByteBufferImpl (backing_buffer, array_offset, capacity (), limit (), position (), mark, isReadOnly ());\n   }\n   \n   public ByteBuffer asReadOnlyBuffer ()\n   {\n-    ByteBufferImpl a = new ByteBufferImpl (this);\n-    a.readOnly = true;\n-    return a;\n+    return new ByteBufferImpl (backing_buffer, array_offset, capacity (), limit (), position (), mark, true);\n   }\n   \n   public ByteBuffer compact ()"}, {"sha": "66c31ed76bbc7b1c27ab4261c9e63b53126fb107", "filename": "libjava/java/nio/ByteBuffer.java", "status": "modified", "additions": 161, "deletions": 140, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2Fjava%2Fnio%2FByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b6b673dabbab53b8e57cc7ad533f336841356f5/libjava%2Fjava%2Fnio%2FByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBuffer.java?ref=3b6b673dabbab53b8e57cc7ad533f336841356f5", "patch": "@@ -1,5 +1,5 @@\n /* ByteBuffer.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,70 +38,81 @@\n package java.nio;\n \n import gnu.java.nio.ByteBufferImpl;\n+import gnu.java.nio.DirectByteBufferImpl;\n \n /**\n  * @since 1.4\n  */\n-public abstract class ByteBuffer extends Buffer implements Comparable\n+public abstract class ByteBuffer extends Buffer\n+  implements Comparable\n {\n   private ByteOrder endian = ByteOrder.BIG_ENDIAN;\n \n-  int offset;\n+  int array_offset;\n   byte[] backing_buffer;\n-  \n+\n+  ByteBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+    array_offset = 0;\n+  }\n+\n+  ByteBuffer (byte[] buffer, int offset, int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+    this.backing_buffer = buffer;\n+    this.array_offset = offset;\n+  }\n   /**\n    * Allocates a new direct byte buffer.\n    */ \n   public static ByteBuffer allocateDirect (int capacity)\n   {\n-    throw new Error (\"direct buffers are not implemented\");\n+    return DirectByteBufferImpl.allocate (capacity);\n   }\n \n   /**\n-   * Allocates a new byte buffer.\n+   * Allocates a new <code>ByteBuffer</code> object with a given capacity.\n    */\n   public static ByteBuffer allocate (int capacity)\n   {\n-    return new ByteBufferImpl (capacity, 0, capacity);\n+    return new ByteBufferImpl (capacity);\n   }\n- \n+\n   /**\n-   * Wraps a byte array into a buffer.\n-   * \n+   * Wraps a <code>byte</code> array into a <code>ByteBuffer</code>\n+   * object.\n+   *\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n   final public static ByteBuffer wrap (byte[] array, int offset, int length)\n   {\n-    return new ByteBufferImpl (array, offset, length);\n+    return new ByteBufferImpl (array, 0, array.length, offset + length, offset, -1, false);\n   }\n \n   /**\n-   * Wraps a byte array into a buffer.\n+   * Wraps a <code>byte</code> array into a <code>ByteBuffer</code>\n+   * object.\n    */\n   final public static ByteBuffer wrap (byte[] array)\n   {\n     return wrap (array, 0, array.length);\n   }\n-\n-  ByteBuffer (int capacity, int limit, int position, int mark)\n-  {\n-    super (capacity, limit, position, mark);\n-  }\n-\n+  \n   /**\n-   * This method transfers bytes from this buffer into\n-   * the given destination array.\n+   * This method transfers <code>bytes<code> from this buffer into the given\n+   * destination array.\n    *\n    * @param dst The destination array\n-   * @param offset The offset within the array of the first byte to be written;\n-   * must be non-negative and no larger than dst.length.\n+   * @param offset The offset within the array of the first <code>byte</code>\n+   * to be written; must be non-negative and no larger than dst.length.\n    * @param length The maximum number of bytes to be written to the given array;\n    * must be non-negative and no larger than dst.length - offset.\n    *\n-   * @exception BufferUnderflowException If there are fewer than length bytes\n-   * remaining in this buffer.\n-   * @exception IndexOutOfBoundsException - If the preconditions on the offset\n+   * @exception BufferUnderflowException If there are fewer than length\n+   * <code>bytes</code> remaining in this buffer.\n+   * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public ByteBuffer get (byte[] dst, int offset, int length)\n@@ -114,61 +125,70 @@ public ByteBuffer get (byte[] dst, int offset, int length)\n \n     for (int i = offset; i < offset + length; i++)\n       {\n-        dst [i] = get();\n+        dst [i] = get ();\n       }\n \n     return this;\n   }\n \n   /**\n-   * This method transfers bytes from this buffer into the given\n+   * This method transfers <code>bytes<code> from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * bytes remaining in this buffer.\n+   * <code>bytes</code> remaining in this buffer.\n    */\n   public ByteBuffer get (byte[] dst)\n   {\n     return get (dst, 0, dst.length);\n   }\n- \n+\n   /**\n-   * Writes the content of src into the buffer.\n+   * Writes the content of the the <code>ByteBUFFER</code> src\n+   * into the buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining bytes in the source buffer.\n+   * buffer for the remaining <code>bytes<code> in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n-   * @exception ReadOnlyBufferException If this buffer is read only.\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public ByteBuffer put (ByteBuffer src)\n   {\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    while (src.hasRemaining ())\n-      put (src.get ());\n-    \n+    if (src.remaining () > remaining ())\n+      throw new BufferOverflowException ();\n+\n+    if (src.remaining () > 0)\n+      {\n+        byte[] toPut = new byte [src.remaining ()];\n+        src.get (toPut);\n+        src.put (toPut);\n+      }\n+\n     return this;\n   }\n \n   /**\n-   * Writes the content of the the array src into the buffer.\n+   * Writes the content of the the <code>byte array</code> src\n+   * into the buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n    * must be non-negative and no larger than src.length.\n    * @param length The number of bytes to be read from the given array;\n    * must be non-negative and no larger than src.length - offset.\n-   *\n+   * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining bytes in the source buffer.\n+   * buffer for the remaining <code>bytes<code> in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n-   * and length parameters do not hold.\n-   * @exception ReadOnlyBufferException If this buffer is read only.\n+   * and length parameters do not hold\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public ByteBuffer put (byte[] src, int offset, int length)\n   {\n@@ -180,38 +200,39 @@ public ByteBuffer put (byte[] src, int offset, int length)\n \n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n-    \n+\n     return this;\n   }\n \n   /**\n-   * Writes the content of the the array src into the buffer.\n+   * Writes the content of the the <code>byte array</code> src\n+   * into the buffer.\n    *\n    * @param src The array to copy into the buffer.\n-   *\n+   * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining bytes in the source buffer.\n-   * @exception ReadOnlyBufferException If this buffer is read only.\n+   * buffer for the remaining <code>bytes<code> in the source array.\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final ByteBuffer put (byte[] src)\n   {\n     return put (src, 0, src.length);\n   }\n \n   /**\n-   * Tells whether or not this buffer is backed by an accessible array.\n+   * Tells whether ot not this buffer is backed by an accessible\n+   * <code>byte</code> array.\n    */\n   public final boolean hasArray ()\n   {\n     return (backing_buffer != null\n-             && !isReadOnly ());\n+            && !isReadOnly ());\n   }\n \n   /**\n-   * Returns the byte array that backs this buffer.\n+   * Returns the <code>byte</code> array that backs this buffer.\n    *\n-   * @exception ReadOnlyBufferException If this buffer is backed by an array\n-   * but is read-only.\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n    * @exception UnsupportedOperationException If this buffer is not backed\n    * by an accessible array.\n    */\n@@ -222,16 +243,14 @@ public final byte[] array ()\n \n     if (isReadOnly ())\n       throw new ReadOnlyBufferException ();\n-\n+    \n     return backing_buffer;\n   }\n \n   /**\n-   * Returns the offset within this buffer's backing array of the first element\n-   * of the buffer  \n+   * Returns the offset within this buffer's backing array of the first element.\n    *\n-   * @exception ReadOnlyBufferException If this buffer is backed by an array\n-   * but is read-only.\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n    * @exception UnsupportedOperationException If this buffer is not backed\n    * by an accessible array.\n    */\n@@ -242,21 +261,21 @@ public final int arrayOffset ()\n \n     if (isReadOnly ())\n       throw new ReadOnlyBufferException ();\n-\n-    return offset;\n+    \n+    return array_offset;\n   }\n-  \n+\n   /**\n-   * Returns the current hash code of this buffer.\n+   * Calculates a hash code for this buffer.\n    */\n-  public int hashCode()\n+  public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here\n-    return super.hashCode();\n+    // FIXME: Check what SUN calculates here.\n+    return super.hashCode ();\n   }\n \n   /**\n-   * Tells whether or not this buffer is equal to another object.\n+   * Checks if this buffer is equal to obj.\n    */\n   public boolean equals (Object obj)\n   {\n@@ -265,51 +284,50 @@ public boolean equals (Object obj)\n       {\n         return compareTo (obj) == 0;\n       }\n-    \n+\n     return false;\n   }\n- \n+\n   /**\n-   * Compares this buffer to another object.\n+   * Compares two <code>ByteBuffer</code> objects.\n    *\n-   * @exception ClassCastException If the argument is not a byte buffer\n+   * @exception ClassCastException If obj is not an object derived from\n+   * <code>ByteBuffer</code>.\n    */\n   public int compareTo (Object obj)\n   {\n     ByteBuffer a = (ByteBuffer) obj;\n \n-    if (a.remaining() != remaining())\n-      {\n-        return 1;\n-      }\n-   \n-    if (! hasArray() ||\n-        ! a.hasArray())\n+    if (a.remaining () != remaining ())\n+      return 1;\n+\n+    if (! hasArray () ||\n+        ! a.hasArray ())\n       {\n         return 1;\n       }\n-   \n-    int r = remaining();\n+\n+    int r = remaining ();\n     int i1 = position ();\n     int i2 = a.position ();\n-   \n+\n     for (int i = 0; i < r; i++)\n       {\n         int t = (int) (get (i1) - a.get (i2));\n-   \n+\n         if (t != 0)\n           {\n             return (int) t;\n           }\n       }\n-  \n+\n     return 0;\n   }\n \n   /**\n-   * Retrieves this buffer's byte order.\n+   * Returns the byte order of this buffer.\n    */  \n-  public final ByteOrder order()\n+  public final ByteOrder order ()\n   {\n     return endian;\n   }\n@@ -324,289 +342,292 @@ public final ByteBuffer order (ByteOrder endian)\n   }\n   \n   /**\n-   * Reads the byte at this buffer's current position,\n+   * Reads the <code>byte</code> at this buffer's current position,\n    * and then increments the position.\n    *\n-   * @exception BufferUnderflowException If the buffer's current position\n-   * is not smaller than its limit.\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>bytes</code> in this buffer.\n    */\n   public abstract byte get ();\n-  \n+\n   /**\n-   * Relative put method.\n+   * Writes the <code>byte</code> at this buffer's current position,\n+   * and then increments the position.\n    *\n-   * @exception BufferOverflowException If this buffer's current position is\n-   * not smaller than its limit.\n+   * @exception BufferOverflowException If there no remaining \n+   * <code>bytes</code> in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract ByteBuffer put (byte b);\n-  \n+\n   /**\n    * Absolute get method.\n    *\n-   * @exception IndexOutOfBoundsException If index &lt; 0 or index &gt;= this\n-   * buffers limit.\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n    */\n   public abstract byte get (int index);\n   \n   /**\n    * Absolute put method.\n    *\n-   * @exception ReadOnlyBufferException If this buffer is read-only\n-   * @exception IndexOutOfBoundsException If index &lt; 0 or index &gt;= this\n-   * buffers limit.\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract ByteBuffer put (int index, byte b);\n-  \n+\n   /**\n    * Compacts this buffer.\n-   *\n-   * @exception ReadOnlyBufferException If this buffer is read-only\n+   * \n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n-  public abstract ByteBuffer compact();\n+  public abstract ByteBuffer compact ();\n \n   /**\n-   * Tells whether or not this buffer is direct.\n+   * Tells wether or not this buffer is direct.\n    */\n-  public abstract boolean isDirect();\n-  \n+  public abstract boolean isDirect ();\n+\n   /**\n-   * Creates a new byte buffer whose content is a shared subsequence of this\n-   * buffer's content.\n+   * Creates a new <code>ByteBuffer</code> whose content is a shared\n+   * subsequence of this buffer's content.\n    */\n-  public abstract ByteBuffer slice();\n-  \n+  public abstract ByteBuffer slice ();\n+\n   /**\n-   * Creates a new byte buffer that shares this buffer's content.\n+   * Creates a new <code>ByteBuffer</code> that shares this buffer's\n+   * content.\n    */\n-  public abstract ByteBuffer duplicate();\n-  \n+  public abstract ByteBuffer duplicate ();\n+\n   /**\n-   * Creates a new, read-only byte buffer that shares this buffer's content.\n+   * Creates a new read-only <code>ByteBuffer</code> that shares this\n+   * buffer's content.\n    */\n-  public abstract ByteBuffer asReadOnlyBuffer();\n+  public abstract ByteBuffer asReadOnlyBuffer ();\n  \n   /**\n    * Creates a view of this byte buffer as a short buffer.\n    */\n-  public abstract ShortBuffer asShortBuffer();\n+  public abstract ShortBuffer asShortBuffer ();\n   \n   /**\n    * Creates a view of this byte buffer as a char buffer.\n    */\n-  public abstract CharBuffer asCharBuffer();\n+  public abstract CharBuffer asCharBuffer ();\n   \n   /**\n    * Creates a view of this byte buffer as an integer buffer.\n    */\n-  public abstract IntBuffer asIntBuffer();\n+  public abstract IntBuffer asIntBuffer ();\n   \n   /**\n    * Creates a view of this byte buffer as a long buffer.\n    */\n-  public abstract LongBuffer asLongBuffer();\n+  public abstract LongBuffer asLongBuffer ();\n   \n   /**\n    * Creates a view of this byte buffer as a float buffer.\n    */\n-  public abstract FloatBuffer asFloatBuffer();\n+  public abstract FloatBuffer asFloatBuffer ();\n   \n   /**\n    * Creates a view of this byte buffer as a double buffer.\n    */\n-  public abstract DoubleBuffer asDoubleBuffer();\n+  public abstract DoubleBuffer asDoubleBuffer ();\n \n   /**\n    * Relative get method for reading a character value.\n    *\n    * @exception BufferUnderflowException  If there are fewer than two bytes\n    * remaining in this buffer.\n    */\n-  public abstract char getChar();\n+  public abstract char getChar ();\n   \n   /**\n    * Relative put method for writing a character value.\n    *\n    * @exception BufferOverflowException If this buffer's current position is\n    * not smaller than its limit.\n    */\n-  public abstract ByteBuffer putChar(char value);\n+  public abstract ByteBuffer putChar (char value);\n   \n   /**\n    * Absolute get method for reading a character value.\n    *\n    * @exception IndexOutOfBoundsException If there are fewer than two bytes\n    * remaining in this buffer\n    */\n-  public abstract char getChar(int index);\n+  public abstract char getChar (int index);\n   \n   /**\n    * Absolute put method for writing a character value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus one.\n    */\n-  public abstract ByteBuffer putChar(int index, char value);\n+  public abstract ByteBuffer putChar (int index, char value);\n   \n   /**\n    * Relative get method for reading a short value.\n    *\n    * @exception BufferUnderflowException If index is negative or not smaller\n    * than the buffer's limit, minus one.\n    */\n-  public abstract short getShort();\n+  public abstract short getShort ();\n   \n   /**\n    * Relative put method for writing a short value.\n    *\n    * @exception BufferOverflowException If this buffer's current position is\n    * not smaller than its limit.\n    */\n-  public abstract ByteBuffer putShort(short value);\n+  public abstract ByteBuffer putShort (short value);\n   \n   /**\n    * Absolute get method for reading a short value.\n    *\n    * @exception IndexOutOfBoundsException If there are fewer than two bytes\n    * remaining in this buffer\n    */\n-  public abstract short getShort(int index);\n+  public abstract short getShort (int index);\n  \n   /**\n    * Absolute put method for writing a short value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus one.\n    */\n-  public abstract ByteBuffer putShort(int index, short value);\n+  public abstract ByteBuffer putShort (int index, short value);\n   \n   /**\n    * Relative get method for reading an integer value.\n    *\n    * @exception BufferUnderflowException If there are fewer than four bytes\n    * remaining in this buffer.\n    */\n-  public abstract int getInt();\n+  public abstract int getInt ();\n   \n   /**\n    * Relative put method for writing an integer value.\n    *\n    * @exception BufferOverflowException If this buffer's current position is\n    * not smaller than its limit.\n    */\n-  public abstract ByteBuffer putInt(int value);\n+  public abstract ByteBuffer putInt (int value);\n   \n   /**\n    * Absolute get method for reading an integer value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus three.\n    */\n-  public abstract int getInt(int index);\n+  public abstract int getInt (int index);\n   \n   /**\n    * Absolute put method for writing an integer value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus three.\n    */\n-  public abstract ByteBuffer putInt(int index, int value);\n+  public abstract ByteBuffer putInt (int index, int value);\n   \n   /**\n    * Relative get method for reading a long value.\n    *\n    * @exception BufferUnderflowException If there are fewer than eight bytes\n    * remaining in this buffer.\n    */\n-  public abstract long getLong();\n+  public abstract long getLong ();\n   \n   /**\n    * Relative put method for writing a long value.\n    *\n    * @exception BufferOverflowException If this buffer's current position is\n    * not smaller than its limit.\n    */\n-  public abstract ByteBuffer putLong(long value);\n+  public abstract ByteBuffer putLong (long value);\n   \n   /**\n    * Absolute get method for reading a long value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus seven.\n    */\n-  public abstract long getLong(int index);\n+  public abstract long getLong (int index);\n   \n   /**\n    * Absolute put method for writing a float value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus seven.\n    */\n-  public abstract ByteBuffer putLong(int index, long value);\n+  public abstract ByteBuffer putLong (int index, long value);\n   \n   /**\n    * Relative get method for reading a float value.\n    *\n    * @exception BufferUnderflowException If there are fewer than four bytes\n    * remaining in this buffer.\n    */\n-  public abstract float getFloat();\n+  public abstract float getFloat ();\n   \n   /**\n    * Relative put method for writing a float value.\n    *\n    * @exception BufferOverflowException If there are fewer than four bytes\n    * remaining in this buffer.\n    */\n-  public abstract ByteBuffer putFloat(float value);\n+  public abstract ByteBuffer putFloat (float value);\n   \n   /**\n    * Absolute get method for reading a float value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus three.\n    */\n-  public abstract float getFloat(int index);\n+  public abstract float getFloat (int index);\n   \n   /**\n    * Relative put method for writing a float value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus three.\n    */\n-  public abstract ByteBuffer putFloat(int index, float value);\n+  public abstract ByteBuffer putFloat (int index, float value);\n   \n   /**\n    * Relative get method for reading a double value.\n    *\n    * @exception BufferUnderflowException If there are fewer than eight bytes\n    * remaining in this buffer.\n    */\n-  public abstract double getDouble();\n+  public abstract double getDouble ();\n   \n   /**\n    * Relative put method for writing a double value.\n    *\n    * @exception BufferOverflowException If this buffer's current position is\n    * not smaller than its limit.\n    */\n-  public abstract ByteBuffer putDouble(double value);\n+  public abstract ByteBuffer putDouble (double value);\n   \n   /**\n    * Absolute get method for reading a double value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus seven.\n    */\n-  public abstract double getDouble(int index);\n+  public abstract double getDouble (int index);\n   \n   /**\n    * Absolute put method for writing a double value.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit, minus seven.\n    */\n-  public abstract ByteBuffer putDouble(int index, double value);\n+  public abstract ByteBuffer putDouble (int index, double value);\n \n   /**\n    * Returns a string summarizing the state of this buffer."}]}