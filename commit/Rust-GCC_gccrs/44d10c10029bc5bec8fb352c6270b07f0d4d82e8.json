{"sha": "44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRkMTBjMTAwMjliYzViZWM4ZmIzNTJjNjI3MGIwN2YwZDRkODJlOA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-08-04T15:33:51Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-04T15:33:51Z"}, "message": "target-def.h (TARGET_CXX_CDTOR_RETURNS_THIS): Define.\n\ngcc/\n\t* target-def.h (TARGET_CXX_CDTOR_RETURNS_THIS): Define.\n\t(TARGET_CXX): Use it.\n\t* target.h (struct gcc_target): Add cdtor_returns_this.\n\t* config/arm/arm.c (arm_cxx_cdtor_returns_this): New function.\n\t(TARGET_CXX_CDTOR_RETURNS_THIS): Define.\n\t* doc/tm.texi: Document TARGET_CXX_CDTOR_RETURNS_THIS.\ngcc/cp/\n\t* Make-lang.in (cp/semantics.o, cp/optimize.o): Depend on TARGET_H.\n\t* cp-tree.h (struct language_function): Rename x_dtor_label to\n\tx_cdtor_label.\n\t(dtor_label): Rename ...\n\t(cdtor_label): ... to this.\n\t* decl.c (begin_constructor_body): Remove.\n\t(check_special_function_return_type): Maybe change the return type.\n\t(grokdeclarator): Pass the class type.\n\t(start_preparsed_function): Constructors may need a return label.\n\t(finish_constructor_body, finish_destructor_body): Set the return\n\tvalue.\n\t(begin_function_body): Don't call begin_constructor_body.\n\t(finish_function): Don't warn for constructors or destructors.\n\t(implicitly_declare_fn): Maybe change the return type.\n\t* optimize.c: Include target.h.\n\t(maybe_clone_body): Remap the function result.\n\t* semantics.c: Include target.h.\n\t(finish_return_stmt): Maybe jump to return label for constructors.\n\nFrom-SVN: r85561", "tree": {"sha": "c6669d1a536c5ee91ed55f661a6f7a5a2bd88e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6669d1a536c5ee91ed55f661a6f7a5a2bd88e47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/comments", "author": null, "committer": null, "parents": [{"sha": "20c176ab4b4e79436d7229f91cdda768bab64241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c176ab4b4e79436d7229f91cdda768bab64241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c176ab4b4e79436d7229f91cdda768bab64241"}], "stats": {"total": 178, "additions": 146, "deletions": 32}, "files": [{"sha": "64fff1d6140e381c20e3b01fa6a2345f4f0cfd24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -1,3 +1,12 @@\n+2004-08-04  Paul Brook  <paul@codesourcery.com>\n+\n+\t* target-def.h (TARGET_CXX_CDTOR_RETURNS_THIS): Define.\n+\t(TARGET_CXX): Use it.\n+\t* target.h (struct gcc_target): Add cdtor_returns_this.\n+\t* config/arm/arm.c (arm_cxx_cdtor_returns_this): New function.\n+\t(TARGET_CXX_CDTOR_RETURNS_THIS): Define.\n+\t* doc/tm.texi: Document TARGET_CXX_CDTOR_RETURNS_THIS.\n+\n 2004-08-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-lex.c (narrowest_unsigned_type, narrowest_signed_type): Take"}, {"sha": "8b1ae87f757eefb49b17b2d85cf52eb8a61cecd6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -168,6 +168,7 @@ static tree arm_cxx_guard_type (void);\n static bool arm_cxx_guard_mask_bit (void);\n static tree arm_get_cookie_size (tree);\n static bool arm_cookie_has_size (void);\n+static bool arm_cxx_cdtor_returns_this (void);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -282,6 +283,9 @@ static bool arm_cookie_has_size (void);\n #undef TARGET_CXX_COOKIE_HAS_SIZE\n #define TARGET_CXX_COOKIE_HAS_SIZE arm_cookie_has_size\n \n+#undef TARGET_CXX_CDTOR_RETURNS_THIS\n+#define TARGET_CXX_CDTOR_RETURNS_THIS arm_cxx_cdtor_returns_this\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -14578,3 +14582,13 @@ arm_cookie_has_size (void)\n {\n   return TARGET_AAPCS_BASED;\n }\n+\n+\n+/* The EABI says constructors and destructors should return a pointer to\n+   the object constructed/destroyed.  */\n+\n+static bool\n+arm_cxx_cdtor_returns_this (void)\n+{\n+  return TARGET_AAPCS_BASED;\n+}"}, {"sha": "81ac439762718128a8e34a094d0ab40d9ad86eb0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -1,3 +1,24 @@\n+2004-08-04  Paul Brook  <paul@codesourcery.com>\n+\n+\t* Make-lang.in (cp/semantics.o, cp/optimize.o): Depend on TARGET_H.\n+\t* cp-tree.h (struct language_function): Rename x_dtor_label to\n+\tx_cdtor_label.\n+\t(dtor_label): Rename ...\n+\t(cdtor_label): ... to this.\n+\t* decl.c (begin_constructor_body): Remove.\n+\t(check_special_function_return_type): Maybe change the return type.\n+\t(grokdeclarator): Pass the class type.\n+\t(start_preparsed_function): Constructors may need a return label.\n+\t(finish_constructor_body, finish_destructor_body): Set the return\n+\tvalue.\n+\t(begin_function_body): Don't call begin_constructor_body.\n+\t(finish_function): Don't warn for constructors or destructors.\n+\t(implicitly_declare_fn): Maybe change the return type.\n+\t* optimize.c: Include target.h.\n+\t(maybe_clone_body): Remap the function result.\n+\t* semantics.c: Include target.h.\n+\t(finish_return_stmt): Maybe jump to return label for constructors.\n+\n 2004-08-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (build_vtable): Do not set DECL_VISIBILITY here."}, {"sha": "52337392d0b45454ed4ae34e7f59aef4d412b200", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -260,10 +260,10 @@ cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h diagnostic.h \\\n   gt-cp-repo.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) except.h toplev.h \\\n   flags.h debug.h output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H) \\\n-  tree-inline.h cgraph.h\n+  tree-inline.h cgraph.h $(TAREGT_H)\n cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) tree-dump.h\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h integrate.h insn-config.h \\\n-  input.h $(PARAMS_H) debug.h tree-inline.h tree-gimple.h\n+  input.h $(PARAMS_H) debug.h tree-inline.h tree-gimple.h $(TARGET_H)\n cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h real.h gt-cp-mangle.h \\\n   $(TARGET_H) $(TM_P_H)\n "}, {"sha": "e2c94f25ed27d7cc17aec0841c307afed0d5d166", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -708,7 +708,7 @@ struct language_function GTY(())\n {\n   struct c_language_function base;\n \n-  tree x_dtor_label;\n+  tree x_cdtor_label;\n   tree x_current_class_ptr;\n   tree x_current_class_ref;\n   tree x_eh_spec_block;\n@@ -735,10 +735,12 @@ struct language_function GTY(())\n \n #define cp_function_chain (cfun->language)\n \n-/* In a destructor, the point at which all derived class destroying\n-   has been done, just before any base class destroying will be done.  */\n+/* In a constructor destructor, the point at which all derived class\n+   destroying/contruction has been has been done. Ie. just before a\n+   constuctor returns, or before any base class destroying will be done\n+   in a destructor.  */\n \n-#define dtor_label cp_function_chain->x_dtor_label\n+#define cdtor_label cp_function_chain->x_cdtor_label\n \n /* When we're processing a member function, current_class_ptr is the\n    PARM_DECL for the `this' pointer.  The current_class_ref is an"}, {"sha": "0f489976a637ba8cf40555b4de460b257fcac60e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -100,7 +100,6 @@ static tree check_initializer (tree, tree, int, tree *);\n static void make_rtl_for_nonlocal_decl (tree, tree, const char *);\n static void save_function_data (tree);\n static void check_function_type (tree, tree);\n-static void begin_constructor_body (void);\n static void finish_constructor_body (void);\n static void begin_destructor_body (void);\n static void finish_destructor_body (void);\n@@ -6182,7 +6181,8 @@ create_array_type_for_decl (tree name, tree type, tree size)\n /* Check that it's OK to declare a function with the indicated TYPE.\n    SFK indicates the kind of special function (if any) that this\n    function is.  OPTYPE is the type given in a conversion operator\n-   declaration.  Returns the actual return type of the function; that\n+   declaration, or the class type for a constructor/destructor.\n+   Returns the actual return type of the function; that\n    may be different than TYPE if an error occurs, or for certain\n    special functions.  */\n \n@@ -6197,13 +6197,23 @@ check_special_function_return_type (special_function_kind sfk,\n       if (type)\n \terror (\"return type specification for constructor invalid\");\n \n-      type = void_type_node;\n+      if (targetm.cxx.cdtor_returns_this () && !TYPE_FOR_JAVA (optype))\n+\ttype = build_pointer_type (optype);\n+      else\n+\ttype = void_type_node;\n       break;\n \n     case sfk_destructor:\n       if (type)\n \terror (\"return type specification for destructor invalid\");\n-      type = void_type_node;\n+      /* We can't use the proper return type here because we run into\n+\t problems with abiguous bases and covariant returns.\n+\t Java classes are left unchanged because (void *) isn't a valid\n+\t Java type, and we don't want to change the Java ABI.  */\n+      if (targetm.cxx.cdtor_returns_this () && !TYPE_FOR_JAVA (optype))\n+\ttype = build_pointer_type (void_type_node);\n+      else\n+\ttype = void_type_node;\n       break;\n \n     case sfk_conversion:\n@@ -6589,6 +6599,9 @@ grokdeclarator (const cp_declarator *declarator,\n   typedef_type = type;\n \n \n+  if (sfk != sfk_conversion)\n+    ctor_return_type = ctype;\n+\n   if (sfk != sfk_none)\n     type = check_special_function_return_type (sfk, type,\n \t\t\t\t\t       ctor_return_type);\n@@ -9879,10 +9892,12 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n   ++function_depth;\n \n-  if (DECL_DESTRUCTOR_P (decl1))\n+  if (DECL_DESTRUCTOR_P (decl1)\n+      || (DECL_CONSTRUCTOR_P (decl1)\n+\t  && targetm.cxx.cdtor_returns_this ()))\n     {\n-      dtor_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n-      DECL_CONTEXT (dtor_label) = current_function_decl;\n+      cdtor_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n+      DECL_CONTEXT (cdtor_label) = current_function_decl;\n     }\n \n   start_fname_decls ();\n@@ -10050,22 +10065,27 @@ save_function_data (tree decl)\n   f->x_local_names = NULL;\n }\n \n-/* Add a note to mark the beginning of the main body of the constructor.\n-   This is used to set up the data structures for the cleanup regions for\n-   fully-constructed bases and members.  */\n \n-static void\n-begin_constructor_body (void)\n-{\n-}\n-\n-/* Add a note to mark the end of the main body of the constructor.  This is\n-   used to end the cleanup regions for fully-constructed bases and\n-   members.  */\n+/* Set the return value of the constructor (if present).  */\n \n static void\n finish_constructor_body (void)\n {\n+  tree val;\n+  tree exprstmt;\n+\n+  if (targetm.cxx.cdtor_returns_this ())\n+    {\n+      /* Any return from a constructor will end up here.  */\n+      add_stmt (build_stmt (LABEL_EXPR, cdtor_label));\n+\n+      val = DECL_ARGUMENTS (current_function_decl);\n+      val = build (MODIFY_EXPR, TREE_TYPE (val),\n+\t\t   DECL_RESULT (current_function_decl), val);\n+      /* Return the address of the object.  */\n+      exprstmt = build_stmt (RETURN_EXPR, val);\n+      add_stmt (exprstmt);\n+    }\n }\n \n /* Do all the processing for the beginning of a destructor; set up the\n@@ -10125,7 +10145,7 @@ finish_destructor_body (void)\n \n   /* Any return from a destructor will end up here; that way all base\n      and member cleanups will be run when the function returns.  */\n-  add_stmt (build_stmt (LABEL_EXPR, dtor_label));\n+  add_stmt (build_stmt (LABEL_EXPR, cdtor_label));\n \n   /* In a virtual destructor, we must call delete.  */\n   if (DECL_VIRTUAL_P (current_function_decl))\n@@ -10152,6 +10172,18 @@ finish_destructor_body (void)\n       finish_then_clause (if_stmt);\n       finish_if_stmt (if_stmt);\n     }\n+\n+  if (targetm.cxx.cdtor_returns_this ())\n+    {\n+      tree val;\n+\n+      val = DECL_ARGUMENTS (current_function_decl);\n+      val = build (MODIFY_EXPR, TREE_TYPE (val),\n+\t\t   DECL_RESULT (current_function_decl), val);\n+      /* Return the address of the object.  */\n+      exprstmt = build_stmt (RETURN_EXPR, val);\n+      add_stmt (exprstmt);\n+    }\n }\n \n /* Do the necessary processing for the beginning of a function body, which\n@@ -10177,8 +10209,6 @@ begin_function_body (void)\n \n   if (processing_template_decl)\n     /* Do nothing now.  */;\n-  else if (DECL_CONSTRUCTOR_P (current_function_decl))\n-    begin_constructor_body ();\n   else if (DECL_DESTRUCTOR_P (current_function_decl))\n     begin_destructor_body ();\n \n@@ -10363,7 +10393,10 @@ finish_function (int flags)\n       && !DECL_NAME (DECL_RESULT (fndecl))\n       /* Normally, with -Wreturn-type, flow will complain.  Unless we're an\n \t inline function, as we might never be compiled separately.  */\n-      && (DECL_INLINE (fndecl) || processing_template_decl))\n+      && (DECL_INLINE (fndecl) || processing_template_decl)\n+      /* Structor return values (if any) are set by the compiler.  */\n+      && !DECL_CONSTRUCTOR_P (fndecl)\n+      && !DECL_DESTRUCTOR_P (fndecl))\n     warning (\"no return statement in function returning non-void\");\n \n   /* Store the end of the function, so that we get good line number"}, {"sha": "317790e877f1c0f41890bdaefbd3190f6b1b34cc", "filename": "gcc/cp/method.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -929,14 +929,25 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n {\n   tree fn;\n   tree parameter_types = void_list_node;\n-  tree return_type = void_type_node;\n+  tree return_type;\n   tree fn_type;\n   tree raises = empty_except_spec;\n   tree rhs_parm_type = NULL_TREE;\n   tree name;\n \n   type = TYPE_MAIN_VARIANT (type);\n \n+  if (targetm.cxx.cdtor_returns_this () && !TYPE_FOR_JAVA (type))\n+    {\n+      if (kind == sfk_destructor)\n+\t/* See comment in check_special_function_return_type.  */\n+\treturn_type = build_pointer_type (void_type_node);\n+      else\n+\treturn_type = build_pointer_type (type);\n+    }\n+  else\n+    return_type = void_type_node;\n+\n   switch (kind)\n     {\n     case sfk_destructor:"}, {"sha": "7ccfaffbf0db38ab8ed0a1e73e422bc3207f39a8", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"varray.h\"\n #include \"params.h\"\n #include \"hashtab.h\"\n+#include \"target.h\"\n #include \"debug.h\"\n #include \"tree-inline.h\"\n #include \"flags.h\"\n@@ -184,6 +185,13 @@ maybe_clone_body (tree fn)\n \t    }\n \t}\n \n+      if (targetm.cxx.cdtor_returns_this ())\n+\t{\n+\t  parm = DECL_RESULT (fn);\n+\t  clone_parm = DECL_RESULT (clone);\n+\t  splay_tree_insert (decl_map, (splay_tree_key) parm,\n+\t\t\t     (splay_tree_value) clone_parm);\n+\t}\n       /* Clone the body.  */\n       clone_body (clone, fn, decl_map);\n "}, {"sha": "cf61c221e7284c271a9beb66c0e3abc3db3edea6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -45,6 +45,7 @@\n #include \"cgraph.h\"\n #include \"tree-iterator.h\"\n #include \"vec.h\"\n+#include \"target.h\"\n \n /* There routines provide a modular interface to perform many parsing\n    operations.  They may therefore be used during actual parsing, or\n@@ -703,13 +704,15 @@ finish_return_stmt (tree expr)\n   expr = check_return_expr (expr);\n   if (!processing_template_decl)\n     {\n-      if (DECL_DESTRUCTOR_P (current_function_decl))\n+      if (DECL_DESTRUCTOR_P (current_function_decl)\n+\t  || (DECL_CONSTRUCTOR_P (current_function_decl) \n+\t      && targetm.cxx.cdtor_returns_this ()))\n \t{\n \t  /* Similarly, all destructors must run destructors for\n \t     base-classes before returning.  So, all returns in a\n \t     destructor get sent to the DTOR_LABEL; finish_function emits\n \t     code to return a value there.  */\n-\t  return finish_goto_stmt (dtor_label);\n+\t  return finish_goto_stmt (cdtor_label);\n \t}\n     }\n "}, {"sha": "cc3cfeebee420c97465704f61804e3318289fa66", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -8469,6 +8469,12 @@ modified value and perform any other actions necessary to support the\n backend's targeted operating system.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CXX_CDTOR_RETURNS_THIS (void)\n+This hook should return @code{true} if constructors and destructors return\n+the address of the object created/destroyed.  The default is to return\n+@code{false}.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "fe06c8c702a7f6f4a4fa3995880f9fa23bf06247", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -412,13 +412,18 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_CXX_IMPORT_EXPORT_CLASS NULL\n #endif\n \n+#ifndef TARGET_CXX_CDTOR_RETURNS_THIS\n+#define TARGET_CXX_CDTOR_RETURNS_THIS hook_bool_void_false\n+#endif\n+\n #define TARGET_CXX\t\t\\\n   {\t\t\t\t\\\n     TARGET_CXX_GUARD_TYPE,\t\\\n     TARGET_CXX_GUARD_MASK_BIT,\t\\\n     TARGET_CXX_GET_COOKIE_SIZE,\t\\\n     TARGET_CXX_COOKIE_HAS_SIZE,\t\\\n-    TARGET_CXX_IMPORT_EXPORT_CLASS\t\\\n+    TARGET_CXX_IMPORT_EXPORT_CLASS,\t\\\n+    TARGET_CXX_CDTOR_RETURNS_THIS\t\\\n   }\n \n /* The whole shebang.  */"}, {"sha": "44562da3964d0d7a4987e79b49b83b610146da52", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d10c10029bc5bec8fb352c6270b07f0d4d82e8/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=44d10c10029bc5bec8fb352c6270b07f0d4d82e8", "patch": "@@ -492,6 +492,8 @@ struct gcc_target\n     /* Allows backends to perform additional processing when\n        deciding if a class should be exported or imported.  */\n     int (*import_export_class) (tree, int);\n+    /* Returns true if constructors and destructors return \"this\".  */\n+    bool (*cdtor_returns_this) (void);\n   } cxx;\n \n   /* Leave the boolean fields at the end.  */"}]}