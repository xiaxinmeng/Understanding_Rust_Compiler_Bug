{"sha": "d5125819d86274383041571daa3698d72bbac661", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxMjU4MTlkODYyNzQzODMwNDE1NzFkYWEzNjk4ZDcyYmJhYzY2MQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-06-24T13:20:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-24T13:33:20Z"}, "message": "libstdc++: Avoid raising fp exceptions in trunc, floor, and ceil\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_x86.h (_S_trunc, _S_floor)\n\t(_S_ceil): Set bit 8 (_MM_FROUND_NO_EXC) on AVX and SSE4.1\n\troundp[sd] calls.", "tree": {"sha": "713d7b97d61e6d8c70f5078ffab2cbccfeaf2e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/713d7b97d61e6d8c70f5078ffab2cbccfeaf2e5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5125819d86274383041571daa3698d72bbac661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5125819d86274383041571daa3698d72bbac661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5125819d86274383041571daa3698d72bbac661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5125819d86274383041571daa3698d72bbac661/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5014f12509980d51cfbb34bb61b1605356592afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5014f12509980d51cfbb34bb61b1605356592afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5014f12509980d51cfbb34bb61b1605356592afd"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "34633c096b1e4ab45e4cc0079ded808e2a89a8eb", "filename": "libstdc++-v3/include/experimental/bits/simd_x86.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5125819d86274383041571daa3698d72bbac661/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5125819d86274383041571daa3698d72bbac661/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h?ref=d5125819d86274383041571daa3698d72bbac661", "patch": "@@ -2657,13 +2657,13 @@ template <typename _Abi>\n \telse if constexpr (__is_avx512_pd<_Tp, _Np>())\n \t  return _mm512_roundscale_pd(__x, 0x0b);\n \telse if constexpr (__is_avx_ps<_Tp, _Np>())\n-\t  return _mm256_round_ps(__x, 0x3);\n+\t  return _mm256_round_ps(__x, 0xb);\n \telse if constexpr (__is_avx_pd<_Tp, _Np>())\n-\t  return _mm256_round_pd(__x, 0x3);\n+\t  return _mm256_round_pd(__x, 0xb);\n \telse if constexpr (__have_sse4_1 && __is_sse_ps<_Tp, _Np>())\n-\t  return __auto_bitcast(_mm_round_ps(__to_intrin(__x), 0x3));\n+\t  return __auto_bitcast(_mm_round_ps(__to_intrin(__x), 0xb));\n \telse if constexpr (__have_sse4_1 && __is_sse_pd<_Tp, _Np>())\n-\t  return _mm_round_pd(__x, 0x3);\n+\t  return _mm_round_pd(__x, 0xb);\n \telse if constexpr (__is_sse_ps<_Tp, _Np>())\n \t  {\n \t    auto __truncated\n@@ -2786,13 +2786,13 @@ template <typename _Abi>\n \telse if constexpr (__is_avx512_pd<_Tp, _Np>())\n \t  return _mm512_roundscale_pd(__x, 0x09);\n \telse if constexpr (__is_avx_ps<_Tp, _Np>())\n-\t  return _mm256_round_ps(__x, 0x1);\n+\t  return _mm256_round_ps(__x, 0x9);\n \telse if constexpr (__is_avx_pd<_Tp, _Np>())\n-\t  return _mm256_round_pd(__x, 0x1);\n+\t  return _mm256_round_pd(__x, 0x9);\n \telse if constexpr (__have_sse4_1 && __is_sse_ps<_Tp, _Np>())\n-\t  return __auto_bitcast(_mm_floor_ps(__to_intrin(__x)));\n+\t  return __auto_bitcast(_mm_round_ps(__to_intrin(__x), 0x9));\n \telse if constexpr (__have_sse4_1 && __is_sse_pd<_Tp, _Np>())\n-\t  return _mm_floor_pd(__x);\n+\t  return _mm_round_pd(__x, 0x9);\n \telse\n \t  return _Base::_S_floor(__x);\n       }\n@@ -2808,13 +2808,13 @@ template <typename _Abi>\n \telse if constexpr (__is_avx512_pd<_Tp, _Np>())\n \t  return _mm512_roundscale_pd(__x, 0x0a);\n \telse if constexpr (__is_avx_ps<_Tp, _Np>())\n-\t  return _mm256_round_ps(__x, 0x2);\n+\t  return _mm256_round_ps(__x, 0xa);\n \telse if constexpr (__is_avx_pd<_Tp, _Np>())\n-\t  return _mm256_round_pd(__x, 0x2);\n+\t  return _mm256_round_pd(__x, 0xa);\n \telse if constexpr (__have_sse4_1 && __is_sse_ps<_Tp, _Np>())\n-\t  return __auto_bitcast(_mm_ceil_ps(__to_intrin(__x)));\n+\t  return __auto_bitcast(_mm_round_ps(__to_intrin(__x), 0xa));\n \telse if constexpr (__have_sse4_1 && __is_sse_pd<_Tp, _Np>())\n-\t  return _mm_ceil_pd(__x);\n+\t  return _mm_round_pd(__x, 0xa);\n \telse\n \t  return _Base::_S_ceil(__x);\n       }"}]}