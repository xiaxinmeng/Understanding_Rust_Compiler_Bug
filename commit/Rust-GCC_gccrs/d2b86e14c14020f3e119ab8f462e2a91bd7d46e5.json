{"sha": "d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiODZlMTRjMTQwMjBmM2UxMTlhYjhmNDYyZTJhOTFiZDdkNDZlNQ==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-07-29T17:04:40Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-08-04T10:22:41Z"}, "message": "aarch64: Add missing clobber for fjcvtzs\n\ngcc/ChangeLog\n\n2020-07-30  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* config/aarch64/aarch64.md (aarch64_fjcvtzs): Add missing\n\tclobber.\n\t* doc/sourcebuild.texi (aarch64_fjcvtzs_hw) Document new\n\ttarget supports option.\n\ngcc/testsuite/ChangeLog\n\n2020-07-30  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* gcc.target/aarch64/acle/jcvt_2.c: New testcase.\n\t* lib/target-supports.exp\n\t(check_effective_target_aarch64_fjcvtzs_hw): Add new check for\n\tFJCVTZS hw.", "tree": {"sha": "42dc2744ad3176539e1ddc9b119447f1ec383c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42dc2744ad3176539e1ddc9b119447f1ec383c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344f09a756ebd50510cc1eb3db111fd61c527702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344f09a756ebd50510cc1eb3db111fd61c527702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344f09a756ebd50510cc1eb3db111fd61c527702"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "df780b863707fb83119ddc8359917a9e7bfc9e6e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "patch": "@@ -7059,7 +7059,8 @@\n (define_insn \"aarch64_fjcvtzs\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(match_operand:DF 1 \"register_operand\" \"w\")]\n-\t\t   UNSPEC_FJCVTZS))]\n+\t\t   UNSPEC_FJCVTZS))\n+   (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_JSCVT\"\n   \"fjcvtzs\\\\t%w0, %d1\"\n   [(set_attr \"type\" \"f_cvtf2i\")]"}, {"sha": "63216a0daba48ed3aefb9e2df59cd2268439c11e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "patch": "@@ -2063,6 +2063,9 @@ whether it does so by default).\n @itemx aarch64_sve2048_hw\n Like @code{aarch64_sve_hw}, but also test for an exact hardware vector length.\n \n+@item aarch64_fjcvtzs_hw\n+AArch64 target that is able to generate and execute armv8.3-a FJCVTZS\n+instruction.\n @end table\n \n @subsubsection MIPS-specific attributes"}, {"sha": "ea2dfd14cf297a21b6a67c551f9147849efc01db", "filename": "gcc/testsuite/gcc.target/aarch64/acle/jcvt_2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fjcvt_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fjcvt_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fjcvt_2.c?ref=d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "patch": "@@ -0,0 +1,33 @@\n+/* Test the __jcvt ACLE intrinsic.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -march=armv8.3-a -save-temps\" } */\n+/* { dg-require-effective-target aarch64_fjcvtzs_hw } */\n+\n+#include <arm_acle.h>\n+\n+extern void abort (void);\n+\n+#ifdef __ARM_FEATURE_JCVT\n+volatile int32_t x;\n+\n+int __attribute__((noinline))\n+foo (double a, int b, int c)\n+{\n+  b = b > c;\n+  x = __jcvt (a);\n+  return b;\n+}\n+\n+int\n+main (void)\n+{\n+  int x = foo (1.1, 2, 3);\n+  if (x)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"fjcvtzs\\tw\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */"}, {"sha": "e79015b4d5489eb1c9e159fc65a4b5aa11f2eb93", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "patch": "@@ -4848,6 +4848,27 @@ proc check_effective_target_aarch64_bti_hw { } {\n     } \"-O2\" ]\n }\n \n+# Return 1 if the target supports executing the armv8.3-a FJCVTZS\n+# instruction.\n+proc check_effective_target_aarch64_fjcvtzs_hw { } {\n+    if { ![istarget aarch64*-*-*] } {\n+\treturn 0\n+    }\n+    return [check_runtime aarch64_fjcvtzs_hw_available {\n+\tint\n+\tmain (void)\n+\t{\n+\t  double in = 25.1;\n+\t  int out;\n+\t  asm volatile (\"fjcvtzs %w0, %d1\"\n+\t\t\t: \"=r\" (out)\n+\t\t\t: \"w\" (in)\n+\t\t\t: /* No clobbers.  */);\n+\t  return out != 25;\n+\t}\n+    } \"-march=armv8.3-a\" ]\n+}\n+\n # Return 1 if GCC was configured with --enable-standard-branch-protection\n proc check_effective_target_default_branch_protection { } {\n     return [check_configured_with \"enable-standard-branch-protection\"]"}]}