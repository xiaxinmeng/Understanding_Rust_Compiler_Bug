{"sha": "d9f6800d4a88a3cccd0653b7d415abcd5969c00e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmNjgwMGQ0YTg4YTNjY2NkMDY1M2I3ZDQxNWFiY2Q1OTY5YzAwZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-12T21:17:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-12T21:17:43Z"}, "message": "rs6000.c (rs6000_elf_asm_out_constructor): New.\n\n        * config/rs6000/rs6000.c (rs6000_elf_asm_out_constructor): New.\n        (rs6000_elf_asm_out_destructor): New.                                           * config/rs6000/sysv4.h (CTORS_SECTION_ASM_OP): Remove.\n        (DTORS_SECTION_ASM_OP): Remove.                                                 (TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n        (ASM_OUTPUT_INT): Don't hack TARGET_RELOCATABLE for constructors.\n\nFrom-SVN: r44835", "tree": {"sha": "3da5fe45664b1476b336fd58c4f5b607379a2785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3da5fe45664b1476b336fd58c4f5b607379a2785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f6800d4a88a3cccd0653b7d415abcd5969c00e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f6800d4a88a3cccd0653b7d415abcd5969c00e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f6800d4a88a3cccd0653b7d415abcd5969c00e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f6800d4a88a3cccd0653b7d415abcd5969c00e/comments", "author": null, "committer": null, "parents": [{"sha": "6ba57472689cf8fc1b1610de3543e5a9f77960d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba57472689cf8fc1b1610de3543e5a9f77960d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba57472689cf8fc1b1610de3543e5a9f77960d2"}], "stats": {"total": 91, "additions": 82, "deletions": 9}, "files": [{"sha": "45cf6169e6dca574cca649985da8eade77cb18d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f6800d4a88a3cccd0653b7d415abcd5969c00e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f6800d4a88a3cccd0653b7d415abcd5969c00e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9f6800d4a88a3cccd0653b7d415abcd5969c00e", "patch": "@@ -1,3 +1,12 @@\n+2001-08-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_elf_asm_out_constructor): New.\n+\t(rs6000_elf_asm_out_destructor): New.\n+\t* config/rs6000/sysv4.h (CTORS_SECTION_ASM_OP): Remove.\n+\t(DTORS_SECTION_ASM_OP): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n+\t(ASM_OUTPUT_INT): Don't hack TARGET_RELOCATABLE for constructors.\n+\n 2001-08-12  David Edelsohn  <edelsohn@gnu.org>\n \n \tRevert:"}, {"sha": "a7221c2ceee738ffa580fe53f9d7605562eb2235", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f6800d4a88a3cccd0653b7d415abcd5969c00e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f6800d4a88a3cccd0653b7d415abcd5969c00e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d9f6800d4a88a3cccd0653b7d415abcd5969c00e", "patch": "@@ -134,6 +134,8 @@ static rtx rs6000_emit_set_long_const PARAMS ((rtx,\n #if TARGET_ELF\n static unsigned int rs6000_elf_section_type_flags PARAMS ((tree, const char *,\n \t\t\t\t\t\t\t   int));\n+static void rs6000_elf_asm_out_constructor PARAMS ((rtx, int));\n+static void rs6000_elf_asm_out_destructor PARAMS ((rtx, int));\n #endif\n #ifdef OBJECT_FORMAT_COFF\n static void xcoff_asm_named_section PARAMS ((const char *, unsigned int,\n@@ -8707,6 +8709,73 @@ rs6000_elf_section_type_flags (decl, name, reloc)\n \n   return flags;\n }\n+\n+/* Record an element in the table of global constructors.  SYMBOL is\n+   a SYMBOL_REF of the function to be called; PRIORITY is a number\n+   between 0 and MAX_INIT_PRIORITY.\n+\n+   This differs from default_named_section_asm_out_constructor in\n+   that we have special handling for -mrelocatable.  */\n+\n+static void\n+rs6000_elf_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  const char *section = \".ctors\";\n+  char buf[16];\n+\n+  if (priority != DEFAULT_INIT_PRIORITY)\n+    {\n+      sprintf (buf, \".ctors.%.5u\",\n+               /* Invert the numbering so the linker puts us in the proper\n+                  order; constructors are run from right to left, and the\n+                  linker sorts in increasing order.  */\n+               MAX_INIT_PRIORITY - priority);\n+      section = buf;\n+    }\n+\n+  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+\n+  if (TARGET_RELOCATABLE)\n+    {\n+      fputs (\"\\t.long (\", asm_out_file);\n+      output_addr_const (asm_out_file, symbol);\n+      fputs (\")@fixup\\n\", asm_out_file);\n+    }\n+  else\n+    assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+}\n+\n+static void\n+rs6000_elf_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  const char *section = \".dtors\";\n+  char buf[16];\n+\n+  if (priority != DEFAULT_INIT_PRIORITY)\n+    {\n+      sprintf (buf, \".dtors.%.5u\",\n+               /* Invert the numbering so the linker puts us in the proper\n+                  order; constructors are run from right to left, and the\n+                  linker sorts in increasing order.  */\n+               MAX_INIT_PRIORITY - priority);\n+      section = buf;\n+    }\n+\n+  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+\n+  if (TARGET_RELOCATABLE)\n+    {\n+      fputs (\"\\t.long (\", asm_out_file);\n+      output_addr_const (asm_out_file, symbol);\n+      fputs (\")@fixup\\n\", asm_out_file);\n+    }\n+  else\n+    assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+}\n #endif\n \n #ifdef OBJECT_FORMAT_COFF"}, {"sha": "39813b6409bb6d5d5a5015af7caad44d389b0d2c", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f6800d4a88a3cccd0653b7d415abcd5969c00e/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f6800d4a88a3cccd0653b7d415abcd5969c00e/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=d9f6800d4a88a3cccd0653b7d415abcd5969c00e", "patch": "@@ -555,13 +555,6 @@ fini_section ()\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* Ordinarily, we wouldn't need to define these, since generic code would\n-   do the right thing based on knowing that we have named sections.\n-   However, -mrelocatable needs to know when we're in [cd]tors sections,\n-   and the easiest way to do that is rely on varasm.c defining in_[cd]tors.  */\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n-\n /* A C statement or statements to switch to the appropriate section\n    for output of RTX in mode MODE.  You can assume that RTX is some\n    kind of constant in RTL.  The argument MODE is redundant except in\n@@ -816,6 +809,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n extern int fixuplabelno;\n \n+/* Handle constructors specially for -mrelocatable.  */\n+#define TARGET_ASM_CONSTRUCTOR  rs6000_elf_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR   rs6000_elf_asm_out_destructor\n+\n /* This is how to output an assembler line defining an `int' constant.\n    For -mrelocatable, we mark all addresses that need to be fixed up\n    in the .fixup section.  */\n@@ -827,8 +824,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE\t\t\t\t\t\t\\\n       && in_section != in_toc\t\t\t\t\t\t\\\n       && in_section != in_text\t\t\t\t\t\t\\\n-      && in_section != in_ctors\t\t\t\t\t\t\\\n-      && in_section != in_dtors\t\t\t\t\t\t\\\n       && !recurse\t\t\t\t\t\t\t\\\n       && GET_CODE (VALUE) != CONST_INT\t\t\t\t\t\\\n       && GET_CODE (VALUE) != CONST_DOUBLE\t\t\t\t\\"}]}