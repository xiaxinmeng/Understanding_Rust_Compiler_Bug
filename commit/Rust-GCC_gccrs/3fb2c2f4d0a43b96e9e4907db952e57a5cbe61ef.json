{"sha": "3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiMmMyZjRkMGE0M2I5NmU5ZTQ5MDdkYjk1MmU1N2E1Y2JlNjFlZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-23T19:49:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-24T11:14:41Z"}, "message": "x86: Fold arch_names_table into processor_alias_table\n\nIn i386-builtins.c, arch_names_table is used to to map architecture name\nstring to internal model.  A switch statement is used to map internal\nprocessor name to architecture name string and internal priority.\n\nmodel and priority are added to processor_alias_table so that a single\nentry contains architecture name string, internal processor name,\ninternal model and internal priority.  6 entries are appended for\ni386-builtins.c, which have special architecture name strings: amd,\namdfam10h, amdfam15h, amdfam17h, shanghai and istanbul, and pta_size is\nadjusted to exclude them.  Entries which are not used by i386-builtins.c\nhave internal model 0.  P_PROC_DYNAMIC is added to internal priority to\nmake entries with dynamic architecture name string or priority.\n\n\tPR target/95842\n\t* common/config/i386/i386-common.c (processor_alias_table): Add\n\tprocessor model and priority to each entry.\n\t(pta_size): Updated with -6.\n\t(num_arch_names): New.\n\t* common/config/i386/i386-cpuinfo.h: New file.\n\t* config/i386/i386-builtins.c (feature_priority): Removed.\n\t(processor_model): Likewise.\n\t(_arch_names_table): Likewise.\n\t(arch_names_table): Likewise.\n\t(_isa_names_table): Replace P_ZERO with P_NONE.\n\t(get_builtin_code_for_version): Replace P_ZERO with P_NONE.  Use\n\tprocessor_alias_table.\n\t(fold_builtin_cpu): Replace arch_names_table with\n\tprocessor_alias_table.\n\t* config/i386/i386.h: Include \"common/config/i386/i386-cpuinfo.h\".\n\t(pta): Add model and priority.\n\t(num_arch_names): New.", "tree": {"sha": "c15243f3b89fbae134ca777b805ea5b891a0faa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c15243f3b89fbae134ca777b805ea5b891a0faa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6924b5e6bd3c89e229c52eafb1353bcbe17ab405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6924b5e6bd3c89e229c52eafb1353bcbe17ab405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6924b5e6bd3c89e229c52eafb1353bcbe17ab405"}], "stats": {"total": 749, "additions": 366, "deletions": 383}, "files": [{"sha": "654df68d6885b12d595c9ed479c9a1806d5cdde3", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 149, "deletions": 90, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "patch": "@@ -1619,172 +1619,211 @@ STATIC_ASSERT (ARRAY_SIZE (processor_names) == PROCESSOR_max);\n \n const pta processor_alias_table[] =\n {\n-  {\"i386\", PROCESSOR_I386, CPU_NONE, 0},\n-  {\"i486\", PROCESSOR_I486, CPU_NONE, 0},\n-  {\"i586\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n-  {\"pentium\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n-  {\"lakemont\", PROCESSOR_LAKEMONT, CPU_PENTIUM, PTA_NO_80387},\n-  {\"pentium-mmx\", PROCESSOR_PENTIUM, CPU_PENTIUM, PTA_MMX},\n-  {\"winchip-c6\", PROCESSOR_I486, CPU_NONE, PTA_MMX},\n-  {\"winchip2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n-  {\"c3\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n-  {\"samuel-2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n+  {\"i386\", PROCESSOR_I386, CPU_NONE, 0, 0, P_NONE},\n+  {\"i486\", PROCESSOR_I486, CPU_NONE, 0, 0, P_NONE},\n+  {\"i586\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0, 0, P_NONE},\n+  {\"pentium\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0, 0, P_NONE},\n+  {\"lakemont\", PROCESSOR_LAKEMONT, CPU_PENTIUM, PTA_NO_80387,\n+    0, P_NONE},\n+  {\"pentium-mmx\", PROCESSOR_PENTIUM, CPU_PENTIUM, PTA_MMX, 0, P_NONE},\n+  {\"winchip-c6\", PROCESSOR_I486, CPU_NONE, PTA_MMX, 0, P_NONE},\n+  {\"winchip2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW,\n+    0, P_NONE},\n+  {\"c3\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW, 0, P_NONE},\n+  {\"samuel-2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW,\n+    0, P_NONE},\n   {\"c3-2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-    PTA_MMX | PTA_SSE | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"nehemiah\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-    PTA_MMX | PTA_SSE | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"c7\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR, 0, P_NONE},\n   {\"esther\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n-  {\"i686\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n-  {\"pentiumpro\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n-  {\"pentium2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, PTA_MMX | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR, 0, P_NONE},\n+  {\"i686\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0, 0, P_NONE},\n+  {\"pentiumpro\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0, 0, P_NONE},\n+  {\"pentium2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, PTA_MMX | PTA_FXSR,\n+    0, P_NONE},\n   {\"pentium3\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-    PTA_MMX | PTA_SSE | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"pentium3m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-    PTA_MMX | PTA_SSE | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"pentium-m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR, 0, P_NONE},\n   {\"pentium4\", PROCESSOR_PENTIUM4, CPU_NONE,\n-    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR, 0, P_NONE},\n   {\"pentium4m\", PROCESSOR_PENTIUM4, CPU_NONE,\n-    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR, 0, P_NONE},\n   {\"prescott\", PROCESSOR_NOCONA, CPU_NONE,\n-    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR, 0, P_NONE},\n   {\"nocona\", PROCESSOR_NOCONA, CPU_NONE,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_CX16 | PTA_NO_SAHF | PTA_FXSR},\n-  {\"core2\", PROCESSOR_CORE2, CPU_CORE2, PTA_CORE2},\n-  {\"nehalem\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM},\n-  {\"corei7\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM},\n-  {\"westmere\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_WESTMERE},\n+      | PTA_CX16 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n+  {\"core2\", PROCESSOR_CORE2, CPU_CORE2, PTA_CORE2,\n+   M_CPU_TYPE (INTEL_CORE2), P_PROC_SSSE3},\n+  {\"nehalem\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM,\n+    M_CPU_SUBTYPE (INTEL_COREI7_NEHALEM), P_PROC_DYNAMIC},\n+  {\"corei7\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM,\n+    M_CPU_TYPE (INTEL_COREI7), P_PROC_DYNAMIC},\n+  {\"westmere\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_WESTMERE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_WESTMERE), P_PROC_DYNAMIC},\n   {\"sandybridge\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-    PTA_SANDYBRIDGE},\n+    PTA_SANDYBRIDGE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_SANDYBRIDGE), P_PROC_DYNAMIC},\n   {\"corei7-avx\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-    PTA_SANDYBRIDGE},\n+    PTA_SANDYBRIDGE, 0, P_PROC_DYNAMIC},\n   {\"ivybridge\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-    PTA_IVYBRIDGE},\n+    PTA_IVYBRIDGE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_IVYBRIDGE), P_PROC_DYNAMIC},\n   {\"core-avx-i\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-    PTA_IVYBRIDGE},\n-  {\"haswell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n-  {\"core-avx2\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n-  {\"broadwell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_BROADWELL},\n-  {\"skylake\", PROCESSOR_SKYLAKE, CPU_HASWELL, PTA_SKYLAKE},\n+    PTA_IVYBRIDGE, 0, P_PROC_DYNAMIC},\n+  {\"haswell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL,\n+    M_CPU_SUBTYPE (INTEL_COREI7_HASWELL), P_PROC_DYNAMIC},\n+  {\"core-avx2\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL,\n+    0, P_PROC_DYNAMIC},\n+  {\"broadwell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_BROADWELL,\n+    M_CPU_SUBTYPE (INTEL_COREI7_BROADWELL), P_PROC_DYNAMIC},\n+  {\"skylake\", PROCESSOR_SKYLAKE, CPU_HASWELL, PTA_SKYLAKE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_SKYLAKE), P_PROC_AVX2},\n   {\"skylake-avx512\", PROCESSOR_SKYLAKE_AVX512, CPU_HASWELL,\n-    PTA_SKYLAKE_AVX512},\n-  {\"cannonlake\", PROCESSOR_CANNONLAKE, CPU_HASWELL, PTA_CANNONLAKE},\n+    PTA_SKYLAKE_AVX512,\n+    M_CPU_SUBTYPE (INTEL_COREI7_SKYLAKE_AVX512), P_PROC_AVX512F},\n+  {\"cannonlake\", PROCESSOR_CANNONLAKE, CPU_HASWELL, PTA_CANNONLAKE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_CANNONLAKE), P_PROC_AVX512F},\n   {\"icelake-client\", PROCESSOR_ICELAKE_CLIENT, CPU_HASWELL,\n-    PTA_ICELAKE_CLIENT},\n+    PTA_ICELAKE_CLIENT,\n+    M_CPU_SUBTYPE (INTEL_COREI7_ICELAKE_CLIENT), P_PROC_AVX512F},\n   {\"icelake-server\", PROCESSOR_ICELAKE_SERVER, CPU_HASWELL,\n-    PTA_ICELAKE_SERVER},\n+    PTA_ICELAKE_SERVER,\n+    M_CPU_SUBTYPE (INTEL_COREI7_ICELAKE_SERVER), P_PROC_AVX512F},\n   {\"cascadelake\", PROCESSOR_CASCADELAKE, CPU_HASWELL,\n-    PTA_CASCADELAKE},\n-  {\"tigerlake\", PROCESSOR_TIGERLAKE, CPU_HASWELL, PTA_TIGERLAKE},\n-  {\"cooperlake\", PROCESSOR_COOPERLAKE, CPU_HASWELL, PTA_COOPERLAKE},\n-  {\"bonnell\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n-  {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n-  {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n-  {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n-  {\"goldmont\", PROCESSOR_GOLDMONT, CPU_GLM, PTA_GOLDMONT},\n-  {\"goldmont-plus\", PROCESSOR_GOLDMONT_PLUS, CPU_GLM, PTA_GOLDMONT_PLUS},\n-  {\"tremont\", PROCESSOR_TREMONT, CPU_GLM, PTA_TREMONT},\n-  {\"knl\", PROCESSOR_KNL, CPU_SLM, PTA_KNL},\n-  {\"knm\", PROCESSOR_KNM, CPU_SLM, PTA_KNM},\n-  {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM},\n+    PTA_CASCADELAKE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_CASCADELAKE), P_PROC_AVX512F},\n+  {\"tigerlake\", PROCESSOR_TIGERLAKE, CPU_HASWELL, PTA_TIGERLAKE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_TIGERLAKE), P_PROC_AVX512F},\n+  {\"cooperlake\", PROCESSOR_COOPERLAKE, CPU_HASWELL, PTA_COOPERLAKE,\n+    M_CPU_SUBTYPE (INTEL_COREI7_COOPERLAKE), P_PROC_AVX512F},\n+  {\"bonnell\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL,\n+    M_CPU_TYPE (INTEL_BONNELL), P_PROC_SSSE3},\n+  {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL,\n+    M_CPU_TYPE (INTEL_BONNELL), P_PROC_SSSE3},\n+  {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT,\n+    M_CPU_TYPE (INTEL_SILVERMONT), P_PROC_SSE4_2},\n+  {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT,\n+    M_CPU_TYPE (INTEL_SILVERMONT), P_PROC_SSE4_2},\n+  {\"goldmont\", PROCESSOR_GOLDMONT, CPU_GLM, PTA_GOLDMONT,\n+    M_CPU_TYPE (INTEL_GOLDMONT), P_PROC_SSE4_2},\n+  {\"goldmont-plus\", PROCESSOR_GOLDMONT_PLUS, CPU_GLM, PTA_GOLDMONT_PLUS,\n+    M_CPU_TYPE (INTEL_GOLDMONT_PLUS), P_PROC_SSE4_2},\n+  {\"tremont\", PROCESSOR_TREMONT, CPU_GLM, PTA_TREMONT,\n+    M_CPU_TYPE (INTEL_TREMONT), P_PROC_SSE4_2},\n+  {\"knl\", PROCESSOR_KNL, CPU_SLM, PTA_KNL,\n+    M_CPU_TYPE (INTEL_KNL), P_PROC_AVX512F},\n+  {\"knm\", PROCESSOR_KNM, CPU_SLM, PTA_KNM,\n+   M_CPU_TYPE (INTEL_KNM), P_PROC_AVX512F},\n+  {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM,\n+    M_VENDOR (VENDOR_INTEL), P_NONE},\n   {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n-    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n-  {\"k6\", PROCESSOR_K6, CPU_K6, PTA_MMX},\n-  {\"k6-2\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW},\n-  {\"k6-3\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW},\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE, 0, P_NONE},\n+  {\"k6\", PROCESSOR_K6, CPU_K6, PTA_MMX, 0, P_NONE},\n+  {\"k6-2\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW, 0, P_NONE},\n+  {\"k6-3\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW, 0, P_NONE},\n   {\"athlon\", PROCESSOR_ATHLON, CPU_ATHLON,\n-    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE, 0, P_NONE},\n   {\"athlon-tbird\", PROCESSOR_ATHLON, CPU_ATHLON,\n-    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE, 0, P_NONE},\n   {\"athlon-4\", PROCESSOR_ATHLON, CPU_ATHLON,\n-    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"athlon-xp\", PROCESSOR_ATHLON, CPU_ATHLON,\n-    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"athlon-mp\", PROCESSOR_ATHLON, CPU_ATHLON,\n-    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"x86-64\", PROCESSOR_K8, CPU_K8,\n-    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR,\n+    0, P_NONE},\n   {\"eden-x2\", PROCESSOR_K8, CPU_K8,\n-    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR,\n+    0, P_NONE},\n   {\"nano\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_SSSE3 | PTA_FXSR},\n+      | PTA_SSSE3 | PTA_FXSR, 0, P_NONE},\n   {\"nano-1000\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_SSSE3 | PTA_FXSR},\n+      | PTA_SSSE3 | PTA_FXSR, 0, P_NONE},\n   {\"nano-2000\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_SSSE3 | PTA_FXSR},\n+      | PTA_SSSE3 | PTA_FXSR, 0, P_NONE},\n   {\"nano-3000\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR, 0, P_NONE},\n   {\"nano-x2\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR, 0, P_NONE},\n   {\"eden-x4\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR, 0, P_NONE},\n   {\"nano-x4\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR, 0, P_NONE},\n   {\"k8\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n   {\"k8-sse3\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n+      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n   {\"opteron\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n   {\"opteron-sse3\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n+      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n   {\"athlon64\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n   {\"athlon64-sse3\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n+      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n   {\"athlon-fx\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},\n   {\"amdfam10\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n-      | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR},\n+      | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR,\n+    0, P_PROC_DYNAMIC},\n   {\"barcelona\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n-      | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR},\n+      | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR,\n+    M_CPU_SUBTYPE (AMDFAM10H_BARCELONA), P_PROC_DYNAMIC},\n   {\"bdver1\", PROCESSOR_BDVER1, CPU_BDVER1,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n       | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n-      | PTA_XOP | PTA_LWP | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n+      | PTA_XOP | PTA_LWP | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE,\n+    M_CPU_TYPE (AMDFAM15H_BDVER1), P_PROC_XOP},\n   {\"bdver2\", PROCESSOR_BDVER2, CPU_BDVER2,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n       | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n       | PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n-      | PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n+      | PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE,\n+    M_CPU_TYPE (AMDFAM15H_BDVER2), P_PROC_FMA},\n   {\"bdver3\", PROCESSOR_BDVER3, CPU_BDVER3,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n       | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n       | PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n       | PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE\n-      | PTA_XSAVEOPT | PTA_FSGSBASE},\n+      | PTA_XSAVEOPT | PTA_FSGSBASE,\n+    M_CPU_SUBTYPE (AMDFAM15H_BDVER3), P_PROC_FMA},\n   {\"bdver4\", PROCESSOR_BDVER4, CPU_BDVER4,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n       | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_AVX2\n       | PTA_FMA4 | PTA_XOP | PTA_LWP | PTA_BMI | PTA_BMI2\n       | PTA_TBM | PTA_F16C | PTA_FMA | PTA_PRFCHW | PTA_FXSR\n       | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE | PTA_RDRND\n-      | PTA_MOVBE | PTA_MWAITX},\n+      | PTA_MOVBE | PTA_MWAITX,\n+    M_CPU_SUBTYPE (AMDFAM15H_BDVER4), P_PROC_AVX2},\n   {\"znver1\", PROCESSOR_ZNVER1, CPU_ZNVER1,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n@@ -1793,7 +1832,8 @@ const pta processor_alias_table[] =\n       | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE\n       | PTA_RDRND | PTA_MOVBE | PTA_MWAITX | PTA_ADX | PTA_RDSEED\n       | PTA_CLZERO | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES\n-      | PTA_SHA | PTA_LZCNT | PTA_POPCNT},\n+      | PTA_SHA | PTA_LZCNT | PTA_POPCNT,\n+    M_CPU_SUBTYPE (AMDFAM17H_ZNVER1), P_PROC_AVX2},\n   {\"znver2\", PROCESSOR_ZNVER2, CPU_ZNVER2,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n@@ -1803,24 +1843,43 @@ const pta processor_alias_table[] =\n       | PTA_RDRND | PTA_MOVBE | PTA_MWAITX | PTA_ADX | PTA_RDSEED\n       | PTA_CLZERO | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES\n       | PTA_SHA | PTA_LZCNT | PTA_POPCNT | PTA_CLWB | PTA_RDPID\n-      | PTA_WBNOINVD},\n+      | PTA_WBNOINVD,\n+    M_CPU_SUBTYPE (AMDFAM17H_ZNVER2), P_PROC_AVX2},\n   {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSSE3 | PTA_SSE4A | PTA_ABM | PTA_CX16 | PTA_PRFCHW\n-      | PTA_FXSR | PTA_XSAVE},\n+      | PTA_FXSR | PTA_XSAVE,\n+   M_CPU_SUBTYPE (AMDFAM15H_BDVER1), P_PROC_SSE4_A},\n   {\"btver2\", PROCESSOR_BTVER2, CPU_BTVER2,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSSE3 | PTA_SSE4A | PTA_ABM | PTA_CX16 | PTA_SSE4_1\n       | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX\n       | PTA_BMI | PTA_F16C | PTA_MOVBE | PTA_PRFCHW\n-      | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n+      | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT,\n+    M_CPU_TYPE (AMD_BTVER2), P_PROC_BMI},\n \n   {\"generic\", PROCESSOR_GENERIC, CPU_GENERIC,\n     PTA_64BIT\n-      | PTA_HLE /* flags are only used for -march switch.  */ },\n+      | PTA_HLE /* flags are only used for -march switch.  */,\n+    0, P_NONE},\n+\n+  {\"amd\", PROCESSOR_GENERIC, CPU_GENERIC, 0,\n+   M_VENDOR (VENDOR_AMD), P_NONE},\n+  {\"amdfam10h\", PROCESSOR_GENERIC, CPU_GENERIC, 0,\n+    M_CPU_TYPE (AMDFAM10H), P_NONE},\n+  {\"amdfam15h\", PROCESSOR_GENERIC, CPU_GENERIC, 0,\n+    M_CPU_TYPE (AMDFAM15H), P_NONE},\n+  {\"amdfam17h\", PROCESSOR_GENERIC, CPU_GENERIC, 0,\n+    M_CPU_TYPE (AMDFAM17H), P_NONE},\n+  {\"shanghai\", PROCESSOR_GENERIC, CPU_GENERIC, 0,\n+    M_CPU_TYPE (AMDFAM10H_SHANGHAI), P_NONE},\n+  {\"istanbul\", PROCESSOR_GENERIC, CPU_GENERIC, 0,\n+    M_CPU_TYPE (AMDFAM10H_ISTANBUL), P_NONE},\n };\n \n-int const pta_size = ARRAY_SIZE (processor_alias_table);\n+/* NB: processor_alias_table stops at the \"generic\" entry.  */\n+int const pta_size = ARRAY_SIZE (processor_alias_table) - 6;\n+unsigned int const num_arch_names = ARRAY_SIZE (processor_alias_table);\n \n /* Provide valid option values for -march and -mtune options.  */\n "}, {"sha": "e11c68f46dd52d448f54a990cae7cef786806c05", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "patch": "@@ -0,0 +1,134 @@\n+/* Get CPU type and Features for x86 processors.\n+   Copyright (C) 2012-2020 Free Software Foundation, Inc.\n+   Contributed by Sriraman Tallam (tmsriram@google.com)\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Processor Vendor and Models. */\n+\n+enum processor_vendor\n+{\n+  VENDOR_INTEL = 1,\n+  VENDOR_AMD,\n+  VENDOR_OTHER,\n+  BUILTIN_VENDOR_MAX = VENDOR_OTHER,\n+  VENDOR_MAX\n+};\n+\n+/* Any new types or subtypes have to be inserted at the end. */\n+\n+enum processor_types\n+{\n+  INTEL_BONNELL = 1,\n+  INTEL_CORE2,\n+  INTEL_COREI7,\n+  AMDFAM10H,\n+  AMDFAM15H,\n+  INTEL_SILVERMONT,\n+  INTEL_KNL,\n+  AMD_BTVER1,\n+  AMD_BTVER2,\n+  AMDFAM17H,\n+  INTEL_KNM,\n+  INTEL_GOLDMONT,\n+  INTEL_GOLDMONT_PLUS,\n+  INTEL_TREMONT,\n+  CPU_TYPE_MAX,\n+  BUILTIN_CPU_TYPE_MAX = CPU_TYPE_MAX\n+};\n+\n+enum processor_subtypes\n+{\n+  INTEL_COREI7_NEHALEM = 1,\n+  INTEL_COREI7_WESTMERE,\n+  INTEL_COREI7_SANDYBRIDGE,\n+  AMDFAM10H_BARCELONA,\n+  AMDFAM10H_SHANGHAI,\n+  AMDFAM10H_ISTANBUL,\n+  AMDFAM15H_BDVER1,\n+  AMDFAM15H_BDVER2,\n+  AMDFAM15H_BDVER3,\n+  AMDFAM15H_BDVER4,\n+  AMDFAM17H_ZNVER1,\n+  INTEL_COREI7_IVYBRIDGE,\n+  INTEL_COREI7_HASWELL,\n+  INTEL_COREI7_BROADWELL,\n+  INTEL_COREI7_SKYLAKE,\n+  INTEL_COREI7_SKYLAKE_AVX512,\n+  INTEL_COREI7_CANNONLAKE,\n+  INTEL_COREI7_ICELAKE_CLIENT,\n+  INTEL_COREI7_ICELAKE_SERVER,\n+  AMDFAM17H_ZNVER2,\n+  INTEL_COREI7_CASCADELAKE,\n+  INTEL_COREI7_TIGERLAKE,\n+  INTEL_COREI7_COOPERLAKE,\n+  CPU_SUBTYPE_MAX\n+};\n+\n+/* Priority of i386 features, greater value is higher priority.   This is\n+   used to decide the order in which function dispatch must happen.  For\n+   instance, a version specialized for SSE4.2 should be checked for dispatch\n+   before a version for SSE3, as SSE4.2 implies SSE3.  */\n+enum feature_priority\n+{\n+  P_NONE = 0,\n+  P_MMX,\n+  P_SSE,\n+  P_SSE2,\n+  P_SSE3,\n+  P_SSSE3,\n+  P_PROC_SSSE3,\n+  P_SSE4_A,\n+  P_PROC_SSE4_A,\n+  P_SSE4_1,\n+  P_SSE4_2,\n+  P_PROC_SSE4_2,\n+  P_POPCNT,\n+  P_AES,\n+  P_PCLMUL,\n+  P_AVX,\n+  P_PROC_AVX,\n+  P_BMI,\n+  P_PROC_BMI,\n+  P_FMA4,\n+  P_XOP,\n+  P_PROC_XOP,\n+  P_FMA,\n+  P_PROC_FMA,\n+  P_BMI2,\n+  P_AVX2,\n+  P_PROC_AVX2,\n+  P_AVX512F,\n+  P_PROC_AVX512F,\n+  P_PROC_DYNAMIC\n+};\n+\n+/* These are the values for vendor types, cpu types and subtypes.  Cpu\n+   types and subtypes should be subtracted by the corresponding start\n+   value.  */\n+\n+#define M_CPU_TYPE_START (BUILTIN_VENDOR_MAX)\n+#define M_CPU_SUBTYPE_START \\\n+  (M_CPU_TYPE_START + BUILTIN_CPU_TYPE_MAX)\n+#define M_VENDOR(a) (a)\n+#define M_CPU_TYPE(a) (M_CPU_TYPE_START + a)\n+#define M_CPU_SUBTYPE(a) (M_CPU_SUBTYPE_START + a)"}, {"sha": "6f6a8328ef15787f5d369dd225fce4ba70abe6d1", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 78, "deletions": 293, "changes": 371, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "patch": "@@ -1835,43 +1835,6 @@ ix86_builtin_reciprocal (tree fndecl)\n     }\n }\n \n-/* Priority of i386 features, greater value is higher priority.   This is\n-   used to decide the order in which function dispatch must happen.  For\n-   instance, a version specialized for SSE4.2 should be checked for dispatch\n-   before a version for SSE3, as SSE4.2 implies SSE3.  */\n-enum feature_priority\n-{\n-  P_ZERO = 0,\n-  P_MMX,\n-  P_SSE,\n-  P_SSE2,\n-  P_SSE3,\n-  P_SSSE3,\n-  P_PROC_SSSE3,\n-  P_SSE4_A,\n-  P_PROC_SSE4_A,\n-  P_SSE4_1,\n-  P_SSE4_2,\n-  P_PROC_SSE4_2,\n-  P_POPCNT,\n-  P_AES,\n-  P_PCLMUL,\n-  P_AVX,\n-  P_PROC_AVX,\n-  P_BMI,\n-  P_PROC_BMI,\n-  P_FMA4,\n-  P_XOP,\n-  P_PROC_XOP,\n-  P_FMA,\n-  P_PROC_FMA,\n-  P_BMI2,\n-  P_AVX2,\n-  P_PROC_AVX2,\n-  P_AVX512F,\n-  P_PROC_AVX512F\n-};\n-\n /* This is the order of bit-fields in __processor_features in cpuinfo.c */\n enum processor_features\n {\n@@ -1916,105 +1879,6 @@ enum processor_features\n   F_MAX\n };\n \n-/* These are the values for vendor types and cpu types  and subtypes\n-   in cpuinfo.c.  Cpu types and subtypes should be subtracted by\n-   the corresponding start value.  */\n-enum processor_model\n-{\n-  M_INTEL = 1,\n-  M_AMD,\n-  M_CPU_TYPE_START,\n-  M_INTEL_BONNELL,\n-  M_INTEL_CORE2,\n-  M_INTEL_COREI7,\n-  M_AMDFAM10H,\n-  M_AMDFAM15H,\n-  M_INTEL_SILVERMONT,\n-  M_INTEL_KNL,\n-  M_AMD_BTVER1,\n-  M_AMD_BTVER2,\n-  M_AMDFAM17H,\n-  M_INTEL_KNM,\n-  M_INTEL_GOLDMONT,\n-  M_INTEL_GOLDMONT_PLUS,\n-  M_INTEL_TREMONT,\n-  M_CPU_SUBTYPE_START,\n-  M_INTEL_COREI7_NEHALEM,\n-  M_INTEL_COREI7_WESTMERE,\n-  M_INTEL_COREI7_SANDYBRIDGE,\n-  M_AMDFAM10H_BARCELONA,\n-  M_AMDFAM10H_SHANGHAI,\n-  M_AMDFAM10H_ISTANBUL,\n-  M_AMDFAM15H_BDVER1,\n-  M_AMDFAM15H_BDVER2,\n-  M_AMDFAM15H_BDVER3,\n-  M_AMDFAM15H_BDVER4,\n-  M_AMDFAM17H_ZNVER1,\n-  M_INTEL_COREI7_IVYBRIDGE,\n-  M_INTEL_COREI7_HASWELL,\n-  M_INTEL_COREI7_BROADWELL,\n-  M_INTEL_COREI7_SKYLAKE,\n-  M_INTEL_COREI7_SKYLAKE_AVX512,\n-  M_INTEL_COREI7_CANNONLAKE,\n-  M_INTEL_COREI7_ICELAKE_CLIENT,\n-  M_INTEL_COREI7_ICELAKE_SERVER,\n-  M_AMDFAM17H_ZNVER2,\n-  M_INTEL_COREI7_CASCADELAKE,\n-  M_INTEL_COREI7_TIGERLAKE,\n-  M_INTEL_COREI7_COOPERLAKE\n-};\n-\n-struct _arch_names_table\n-{\n-  const char *const name;\n-  const enum processor_model model;\n-};\n-\n-static const _arch_names_table arch_names_table[] =\n-{\n-  {\"amd\", M_AMD},\n-  {\"intel\", M_INTEL},\n-  {\"atom\", M_INTEL_BONNELL},\n-  {\"slm\", M_INTEL_SILVERMONT},\n-  {\"core2\", M_INTEL_CORE2},\n-  {\"corei7\", M_INTEL_COREI7},\n-  {\"nehalem\", M_INTEL_COREI7_NEHALEM},\n-  {\"westmere\", M_INTEL_COREI7_WESTMERE},\n-  {\"sandybridge\", M_INTEL_COREI7_SANDYBRIDGE},\n-  {\"ivybridge\", M_INTEL_COREI7_IVYBRIDGE},\n-  {\"haswell\", M_INTEL_COREI7_HASWELL},\n-  {\"broadwell\", M_INTEL_COREI7_BROADWELL},\n-  {\"skylake\", M_INTEL_COREI7_SKYLAKE},\n-  {\"skylake-avx512\", M_INTEL_COREI7_SKYLAKE_AVX512},\n-  {\"cannonlake\", M_INTEL_COREI7_CANNONLAKE},\n-  {\"icelake-client\", M_INTEL_COREI7_ICELAKE_CLIENT},\n-  {\"icelake-server\", M_INTEL_COREI7_ICELAKE_SERVER},\n-  {\"cascadelake\", M_INTEL_COREI7_CASCADELAKE},\n-  {\"tigerlake\", M_INTEL_COREI7_TIGERLAKE},\n-  {\"cooperlake\", M_INTEL_COREI7_COOPERLAKE},\n-  {\"bonnell\", M_INTEL_BONNELL},\n-  {\"silvermont\", M_INTEL_SILVERMONT},\n-  {\"goldmont\", M_INTEL_GOLDMONT},\n-  {\"goldmont-plus\", M_INTEL_GOLDMONT_PLUS},\n-  {\"tremont\", M_INTEL_TREMONT},\n-  {\"knl\", M_INTEL_KNL},\n-  {\"knm\", M_INTEL_KNM},\n-  {\"amdfam10h\", M_AMDFAM10H},\n-  {\"barcelona\", M_AMDFAM10H_BARCELONA},\n-  {\"shanghai\", M_AMDFAM10H_SHANGHAI},\n-  {\"istanbul\", M_AMDFAM10H_ISTANBUL},\n-  {\"btver1\", M_AMD_BTVER1},\n-  {\"amdfam15h\", M_AMDFAM15H},\n-  {\"bdver1\", M_AMDFAM15H_BDVER1},\n-  {\"bdver2\", M_AMDFAM15H_BDVER2},\n-  {\"bdver3\", M_AMDFAM15H_BDVER3},\n-  {\"bdver4\", M_AMDFAM15H_BDVER4},\n-  {\"btver2\", M_AMD_BTVER2},\n-  {\"amdfam17h\", M_AMDFAM17H},\n-  {\"znver1\", M_AMDFAM17H_ZNVER1},\n-  {\"znver2\", M_AMDFAM17H_ZNVER2},\n-};\n-\n /* These are the target attribute strings for which a dispatcher is\n    available, from fold_builtin_cpu.  */\n struct _isa_names_table\n@@ -2026,7 +1890,7 @@ struct _isa_names_table\n \n static const _isa_names_table isa_names_table[] =\n {\n-  {\"cmov\",    F_CMOV,\tP_ZERO},\n+  {\"cmov\",    F_CMOV,\tP_NONE},\n   {\"mmx\",     F_MMX,\tP_MMX},\n   {\"popcnt\",  F_POPCNT,\tP_POPCNT},\n   {\"sse\",     F_SSE,\tP_SSE},\n@@ -2046,24 +1910,24 @@ static const _isa_names_table isa_names_table[] =\n   {\"bmi2\",    F_BMI2,\tP_BMI2},\n   {\"aes\",     F_AES,\tP_AES},\n   {\"pclmul\",  F_PCLMUL,\tP_PCLMUL},\n-  {\"avx512vl\",F_AVX512VL, P_ZERO},\n-  {\"avx512bw\",F_AVX512BW, P_ZERO},\n-  {\"avx512dq\",F_AVX512DQ, P_ZERO},\n-  {\"avx512cd\",F_AVX512CD, P_ZERO},\n-  {\"avx512er\",F_AVX512ER, P_ZERO},\n-  {\"avx512pf\",F_AVX512PF, P_ZERO},\n-  {\"avx512vbmi\",F_AVX512VBMI, P_ZERO},\n-  {\"avx512ifma\",F_AVX512IFMA, P_ZERO},\n-  {\"avx5124vnniw\",F_AVX5124VNNIW, P_ZERO},\n-  {\"avx5124fmaps\",F_AVX5124FMAPS, P_ZERO},\n-  {\"avx512vpopcntdq\",F_AVX512VPOPCNTDQ,\tP_ZERO},\n-  {\"avx512vbmi2\", F_AVX512VBMI2, P_ZERO},\n-  {\"gfni\",\tF_GFNI,\tP_ZERO},\n-  {\"vpclmulqdq\", F_VPCLMULQDQ, P_ZERO},\n-  {\"avx512vnni\", F_AVX512VNNI, P_ZERO},\n-  {\"avx512bitalg\", F_AVX512BITALG, P_ZERO},\n-  {\"avx512bf16\", F_AVX512BF16, P_ZERO},\n-  {\"avx512vp2intersect\",F_AVX512VP2INTERSECT, P_ZERO}\n+  {\"avx512vl\",F_AVX512VL, P_NONE},\n+  {\"avx512bw\",F_AVX512BW, P_NONE},\n+  {\"avx512dq\",F_AVX512DQ, P_NONE},\n+  {\"avx512cd\",F_AVX512CD, P_NONE},\n+  {\"avx512er\",F_AVX512ER, P_NONE},\n+  {\"avx512pf\",F_AVX512PF, P_NONE},\n+  {\"avx512vbmi\",F_AVX512VBMI, P_NONE},\n+  {\"avx512ifma\",F_AVX512IFMA, P_NONE},\n+  {\"avx5124vnniw\",F_AVX5124VNNIW, P_NONE},\n+  {\"avx5124fmaps\",F_AVX5124FMAPS, P_NONE},\n+  {\"avx512vpopcntdq\",F_AVX512VPOPCNTDQ,\tP_NONE},\n+  {\"avx512vbmi2\", F_AVX512VBMI2, P_NONE},\n+  {\"gfni\",\tF_GFNI,\tP_NONE},\n+  {\"vpclmulqdq\", F_VPCLMULQDQ, P_NONE},\n+  {\"avx512vnni\", F_AVX512VNNI, P_NONE},\n+  {\"avx512bitalg\", F_AVX512BITALG, P_NONE},\n+  {\"avx512bf16\", F_AVX512BF16, P_NONE},\n+  {\"avx512vp2intersect\",F_AVX512VP2INTERSECT, P_NONE}\n };\n \n /* This parses the attribute arguments to target in DECL and determines\n@@ -2084,7 +1948,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n   char *tok_str = NULL;\n   char *token;\n \n-  enum feature_priority priority = P_ZERO;\n+  enum feature_priority priority = P_NONE;\n \n   static unsigned int NUM_FEATURES\n     = sizeof (isa_names_table) / sizeof (_isa_names_table);\n@@ -2125,140 +1989,62 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n       gcc_assert (new_target);\n       \n       if (new_target->arch_specified && new_target->arch > 0)\n-\t{\n-\t  switch (new_target->arch)\n+\tfor (i = 0; i < (unsigned int) pta_size; i++)\n+\t  if (processor_alias_table[i].processor == new_target->arch)\n \t    {\n-\t    case PROCESSOR_CORE2:\n-\t      arg_str = \"core2\";\n-\t      priority = P_PROC_SSSE3;\n-\t      break;\n-\t    case PROCESSOR_NEHALEM:\n-\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_PCLMUL)\n+\t      const pta *arch_info = &processor_alias_table[i];\n+\t      switch (arch_info->priority)\n \t\t{\n-\t\t  arg_str = \"westmere\";\n-\t\t  priority = P_PCLMUL;\n+\t\tdefault:\n+\t\t  arg_str = arch_info->name;\n+\t\t  priority = arch_info->priority;\n+\t\t  break;\n+\t\tcase P_PROC_DYNAMIC:\n+\t\t  switch (new_target->arch)\n+\t\t    {\n+\t\t    case PROCESSOR_NEHALEM:\n+\t\t      if (TARGET_PCLMUL_P (new_target->x_ix86_isa_flags))\n+\t\t\t{\n+\t\t\t  arg_str = \"westmere\";\n+\t\t\t  priority = P_PCLMUL;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  /* We translate \"arch=corei7\" and \"arch=nehalem\"\n+\t\t\t     to \"corei7\" so that it will be mapped to\n+\t\t\t     M_INTEL_COREI7 as cpu type to cover all\n+\t\t\t     M_INTEL_COREI7_XXXs.  */\n+\t\t\t  arg_str = \"corei7\";\n+\t\t\t  priority = P_PROC_SSE4_2;\n+\t\t\t}\n+\t\t      break;\n+\t\t    case PROCESSOR_SANDYBRIDGE:\n+\t\t      if (TARGET_F16C_P (new_target->x_ix86_isa_flags))\n+\t\t\targ_str = \"ivybridge\";\n+\t\t      else\n+\t\t\targ_str = \"sandybridge\";\n+\t\t      priority = P_PROC_AVX;\n+\t\t      break;\n+\t\t    case PROCESSOR_HASWELL:\n+\t\t      if (TARGET_ADX_P (new_target->x_ix86_isa_flags))\n+\t\t\targ_str = \"broadwell\";\n+\t\t      else\n+\t\t\targ_str = \"haswell\";\n+\t\t      priority = P_PROC_AVX2;\n+\t\t      break;\n+\t\t    case PROCESSOR_AMDFAM10:\n+\t\t      arg_str = \"amdfam10h\";\n+\t\t      priority = P_PROC_SSE4_A;\n+\t\t      break;\n+\t\t    default:\n+\t\t      gcc_unreachable ();\n+\t\t    }\n+\t\t  break;\n+\t\tcase P_NONE:\n+\t\t  break;\n \t\t}\n-\t      else\n-\t\t{\n-\t\t  /* We translate \"arch=corei7\" and \"arch=nehalem\" to\n-\t\t     \"corei7\" so that it will be mapped to M_INTEL_COREI7\n-\t\t     as cpu type to cover all M_INTEL_COREI7_XXXs.  */\n-\t\t  arg_str = \"corei7\";\n-\t\t  priority = P_PROC_SSE4_2;\n-\t\t}\n-\t      break;\n-\t    case PROCESSOR_SANDYBRIDGE:\n-\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_F16C)\n-\t\targ_str = \"ivybridge\";\n-\t      else\n-\t\targ_str = \"sandybridge\";\n-\t      priority = P_PROC_AVX;\n-\t      break;\n-\t    case PROCESSOR_HASWELL:\n-\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_ADX)\n-\t\targ_str = \"broadwell\";\n-\t      else\n-\t\targ_str = \"haswell\";\n-\t      priority = P_PROC_AVX2;\n-\t      break;\n-\t    case PROCESSOR_SKYLAKE:\n-\t      arg_str = \"skylake\";\n-\t      priority = P_PROC_AVX2;\n-\t      break;\n-\t    case PROCESSOR_SKYLAKE_AVX512:\n-\t      arg_str = \"skylake-avx512\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_CANNONLAKE:\n-\t      arg_str = \"cannonlake\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_ICELAKE_CLIENT:\n-\t      arg_str = \"icelake-client\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_ICELAKE_SERVER:\n-\t      arg_str = \"icelake-server\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_CASCADELAKE:\n-\t      arg_str = \"cascadelake\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_TIGERLAKE:\n-\t      arg_str = \"tigerlake\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_COOPERLAKE:\n-\t      arg_str = \"cooperlake\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_BONNELL:\n-\t      arg_str = \"bonnell\";\n-\t      priority = P_PROC_SSSE3;\n-\t      break;\n-\t    case PROCESSOR_KNL:\n-\t      arg_str = \"knl\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_KNM:\n-\t      arg_str = \"knm\";\n-\t      priority = P_PROC_AVX512F;\n-\t      break;\n-\t    case PROCESSOR_SILVERMONT:\n-\t      arg_str = \"silvermont\";\n-\t      priority = P_PROC_SSE4_2;\n-\t      break;\n-\t    case PROCESSOR_GOLDMONT:\n-\t      arg_str = \"goldmont\";\n-\t      priority = P_PROC_SSE4_2;\n-\t      break;\n-\t    case PROCESSOR_GOLDMONT_PLUS:\n-\t      arg_str = \"goldmont-plus\";\n-\t      priority = P_PROC_SSE4_2;\n-\t      break;\n-\t    case PROCESSOR_TREMONT:\n-\t      arg_str = \"tremont\";\n-\t      priority = P_PROC_SSE4_2;\n-\t      break;\n-\t    case PROCESSOR_AMDFAM10:\n-\t      arg_str = \"amdfam10h\";\n-\t      priority = P_PROC_SSE4_A;\n-\t      break;\n-\t    case PROCESSOR_BTVER1:\n-\t      arg_str = \"btver1\";\n-\t      priority = P_PROC_SSE4_A;\n-\t      break;\n-\t    case PROCESSOR_BTVER2:\n-\t      arg_str = \"btver2\";\n-\t      priority = P_PROC_BMI;\n-\t      break;\n-\t    case PROCESSOR_BDVER1:\n-\t      arg_str = \"bdver1\";\n-\t      priority = P_PROC_XOP;\n-\t      break;\n-\t    case PROCESSOR_BDVER2:\n-\t      arg_str = \"bdver2\";\n-\t      priority = P_PROC_FMA;\n-\t      break;\n-\t    case PROCESSOR_BDVER3:\n-\t      arg_str = \"bdver3\";\n-\t      priority = P_PROC_FMA;\n-\t      break;\n-\t    case PROCESSOR_BDVER4:\n-\t      arg_str = \"bdver4\";\n-\t      priority = P_PROC_AVX2;\n-\t      break;\n-\t    case PROCESSOR_ZNVER1:\n-\t      arg_str = \"znver1\";\n-\t      priority = P_PROC_AVX2;\n-\t      break;\n-\t    case PROCESSOR_ZNVER2:\n-\t      arg_str = \"znver2\";\n-\t      priority = P_PROC_AVX2;\n \t      break;\n \t    }\n-\t}\n \n       cl_target_option_restore (&global_options, &cur_target);\n \t\n@@ -2312,7 +2098,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      break;\n \t    }\n \t}\n-      if (predicate_list && priority == P_ZERO)\n+      if (predicate_list && priority == P_NONE)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (decl),\n \t\t    \"ISA %qs is not supported in %<target%> attribute, \"\n@@ -2442,23 +2228,22 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       tree final;\n \n       unsigned int field_val = 0;\n-      unsigned int NUM_ARCH_NAMES\n-\t= sizeof (arch_names_table) / sizeof (struct _arch_names_table);\n \n-      for (i = 0; i < NUM_ARCH_NAMES; i++)\n-\tif (strcmp (arch_names_table[i].name,\n-\t    TREE_STRING_POINTER (param_string_cst)) == 0)\n+      for (i = 0; i < num_arch_names; i++)\n+\tif (processor_alias_table[i].model != 0\n+\t    && strcmp (processor_alias_table[i].name,\n+\t\t       TREE_STRING_POINTER (param_string_cst)) == 0)\n \t  break;\n \n-      if (i == NUM_ARCH_NAMES)\n+      if (i == num_arch_names)\n \t{\n \t  error (\"parameter to builtin not valid: %s\",\n \t         TREE_STRING_POINTER (param_string_cst));\n \t  return integer_zero_node;\n \t}\n \n       field = TYPE_FIELDS (__processor_model_type);\n-      field_val = arch_names_table[i].model;\n+      field_val = processor_alias_table[i].model;\n \n       /* CPU types are stored in the next field.  */\n       if (field_val > M_CPU_TYPE_START"}, {"sha": "e1775ff0b5d41a2ed1c6d92560f56462335adee9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3fb2c2f4d0a43b96e9e4907db952e57a5cbe61ef", "patch": "@@ -2498,17 +2498,22 @@ const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n \n #include \"insn-attr-common.h\"\n \n+#include \"common/config/i386/i386-cpuinfo.h\"\n+\n class pta\n {\n public:\n   const char *const name;\t\t/* processor name or nickname.  */\n   const enum processor_type processor;\n   const enum attr_cpu schedule;\n   const wide_int_bitmask flags;\n+  const int model;\n+  const enum feature_priority priority;\n };\n \n extern const pta processor_alias_table[];\n extern int const pta_size;\n+extern unsigned int const num_arch_names;\n #endif\n \n #endif"}]}