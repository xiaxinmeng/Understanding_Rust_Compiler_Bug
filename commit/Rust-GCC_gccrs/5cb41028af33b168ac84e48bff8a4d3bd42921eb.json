{"sha": "5cb41028af33b168ac84e48bff8a4d3bd42921eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNiNDEwMjhhZjMzYjE2OGFjODRlNDhiZmY4YTRkM2JkNDI5MjFlYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-08T06:34:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-08T06:34:18Z"}, "message": "* ChangeLog: Fix whitespace.\n\nFrom-SVN: r192195", "tree": {"sha": "8aaaf9ef2f10ce60d582dd127a4fcaa5de435153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aaaf9ef2f10ce60d582dd127a4fcaa5de435153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb41028af33b168ac84e48bff8a4d3bd42921eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb41028af33b168ac84e48bff8a4d3bd42921eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb41028af33b168ac84e48bff8a4d3bd42921eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb41028af33b168ac84e48bff8a4d3bd42921eb/comments", "author": null, "committer": null, "parents": [{"sha": "fb521d54f196ecb7e236159567083f22867c8e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb521d54f196ecb7e236159567083f22867c8e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb521d54f196ecb7e236159567083f22867c8e7b"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "d3835a3f43720537d0b804b9e8a92e2781a27c86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb41028af33b168ac84e48bff8a4d3bd42921eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb41028af33b168ac84e48bff8a4d3bd42921eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cb41028af33b168ac84e48bff8a4d3bd42921eb", "patch": "@@ -37,8 +37,7 @@\n \t* ipa-inline-analysis.c (do_estimate_edge_time): Return actual\n \ttime spent by the inlined sequence.\n \t(do_estimate_edge_growth): Rename to ...\n-\t(do_estimate_edge_time): ... this one; return size of inlined\n-\tsequence.\n+\t(do_estimate_edge_time): ... this one; return size of inlined sequence.\n \t* ipa-inline.h (do_estimate_edge_size): New.\n \t(do_estimate_edge_growth): Remove.\n \t(estimate_edge_size): New function.\n@@ -51,7 +50,7 @@\n \t(lto_symtab_encoder_encode): Update.\n \t(compute_ltrans_boundary): Update.\n \t(input_symtab): Update.\n- \t* lto-streamer.h (lto_symtab_encoder_new): Update.\n+\t* lto-streamer.h (lto_symtab_encoder_new): Update.\n \n 2012-10-07  Richard Sandiford  <rdsandiford@googlemail.com>\n \n@@ -81,8 +80,7 @@\n \t(mips_sim_next_cycle): Assign to curr_state.  Use advance_state\n \tinstead of state_transition.\n \t(mips_sim_issue_insn): Assign to curr_state.  Use\n-\ttargetm.sched.variable_issue to see how many more insns\n-\tcan be issued.\n+\ttargetm.sched.variable_issue to see how many more insns can be issued.\n \t(mips_seq_time, mips_mult_zero_zero_cost)\n \t(mips_set_fast_mult_zero_zero_p, mips_set_tuning_info)\n \t(mips_expand_to_rtl_hook): New functions.\n@@ -145,8 +143,7 @@\n 2012-10-06  Andreas Schwab  <schwab@linux-m68k.org>\n \n \tPR rtl-optimization/54739\n-\t* config/m68k/m68k.md (anddi3, iordi3, xordi3, one_cmpldi2):\n-\tRemove.\n+\t* config/m68k/m68k.md (anddi3, iordi3, xordi3, one_cmpldi2): Remove.\n \n 2012-10-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \n@@ -189,12 +186,10 @@\n \tinto id->block's BLOCK_VARS.\n \n \tPR debug/54519\n-\t* ipa-split.c (split_function): Add debug args and\n-\tdebug source and normal stmts for args_to_skip which are\n-\tgimple regs.\n-\t* tree-inline.c (copy_debug_stmt): When inlining, adjust\n-\tsource debug bind stmts to debug binds of corresponding\n-\tDEBUG_EXPR_DECL.\n+\t* ipa-split.c (split_function): Add debug args and debug source\n+\tand normal stmts for args_to_skip which are gimple regs.\n+\t* tree-inline.c (copy_debug_stmt): When inlining, adjust source\n+\tdebug bind stmts to debug binds of corresponding DEBUG_EXPR_DECL.\n \n 2012-10-05  Georg-Johann Lay  <avr@gjlay.de>\n \n@@ -219,7 +214,8 @@\n \t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Declare here.\n \t(vect_analyze_loop_operations): Use loop count estimate to rule out\n \tunprofitable vectorization.\n-\t(vect_estimate_min_profitable_iters): Return ret_min_profitable_estimate.\n+\t(vect_estimate_min_profitable_iters): Return\n+\tret_min_profitable_estimate.\n \n 2012-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -297,10 +293,10 @@\n \t* config/i386/i386.c (ix86_dep_by_shift_count_body) : Add\n \tcheck on reload_completed since it can be invoked before\n \tregister allocation phase in pre-reload schedule.\n-\t(ia32_multipass_dfa_lookahead) : Do not use dfa_lookahead for pre-reload\n-\tschedule to save compile time.\n-\t(ix86_sched_reorder) : Do not perform ready list reordering for pre-reload\n-\tschedule to save compile time.\n+\t(ia32_multipass_dfa_lookahead) : Do not use dfa_lookahead for\n+\tpre-reload schedule to save compile time.\n+\t(ix86_sched_reorder) : Do not perform ready list reordering for\n+\tpre-reload schedule to save compile time.\n \t(insn_is_function_arg) : New function. Returns true if lhs of insn is\n \tHW function argument register.\n \t(add_parameter_dependencies) : New function. Add output dependencies\n@@ -312,14 +308,14 @@\n \t(add_dependee_for_func_arg) : New function. Avoid cross block motion of\n \tfunction argument through adding dependency from the first non-jump\n \tinsn in bb.\n-\t(ix86_dependencies_evaluation_hook) : New function. Hook for pre-reload schedule:\n-\tavoid motion of function arguments passed in passed in likely spilled\n-\tHW registers.\n-\t(ix86_adjust_priority) : New function. Hook for pre-reload schedule: set priority\n-\tof moves from likely spilled HW registers to maximum to schedule them\n-\tas soon as possible.\n-\t(ix86_sched_init_global): Do not perform multipass scheduling for pre-reload\n-\tschedule to save compile time.\n+\t(ix86_dependencies_evaluation_hook) : New function. Hook for\n+\tpre-reload schedule: avoid motion of function arguments passed in\n+\tlikely spilled HW registers.\n+\t(ix86_adjust_priority) : New function. Hook for pre-reload schedule:\n+\tset priority of moves from likely spilled HW registers to maximum to\n+\tschedule them as soon as possible.\n+\t(ix86_sched_init_global): Do not perform multipass scheduling for\n+\tpre-reload schedule to save compile time.\n \n 2012-10-04  Uros Bizjak  <ubizjak@gmail.com>\n "}]}