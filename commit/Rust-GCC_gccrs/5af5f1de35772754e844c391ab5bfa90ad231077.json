{"sha": "5af5f1de35772754e844c391ab5bfa90ad231077", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmNWYxZGUzNTc3Mjc1NGU4NDRjMzkxYWI1YmZhOTBhZDIzMTA3Nw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-01-29T22:40:26Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-01-29T22:40:26Z"}, "message": "re PR fortran/57048 (Handling of C_PTR and C_FUNPTR leads to reject valid)\n\n2019-01-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/57048\n\t* interface.c (gfc_compare_types): If a derived type and an\n\tinteger both have a derived type, and they are identical,\n\tthis is a C binding type and compares equal.\n\n2019-01-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/57048\n\t* gfortran.dg/c_funptr_1.f90: New file.\n\t* gfortran.dg/c_funptr_1_mod.f90: New file.\n\nFrom-SVN: r268372", "tree": {"sha": "8225cc326bf0ad06d96ec04962463e1b0ca5af95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8225cc326bf0ad06d96ec04962463e1b0ca5af95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5af5f1de35772754e844c391ab5bfa90ad231077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af5f1de35772754e844c391ab5bfa90ad231077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af5f1de35772754e844c391ab5bfa90ad231077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af5f1de35772754e844c391ab5bfa90ad231077/comments", "author": null, "committer": null, "parents": [{"sha": "b33d65e3023d5366404e99e4a06e6452d1204b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33d65e3023d5366404e99e4a06e6452d1204b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33d65e3023d5366404e99e4a06e6452d1204b83"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "5b30ac62b7029b937689cd2cd09945038b9c7115", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5af5f1de35772754e844c391ab5bfa90ad231077", "patch": "@@ -1,3 +1,10 @@\n+2019-01-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/57048\n+\t* interface.c (gfc_compare_types): If a derived type and an\n+\tinteger both have a derived type, and they are identical,\n+\tthis is a C binding type and compares equal.\n+\n 2019-01-26  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/57553"}, {"sha": "a07e658db881c71e7b53f32bf59c7db3e14371ea", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=5af5f1de35772754e844c391ab5bfa90ad231077", "patch": "@@ -692,6 +692,16 @@ gfc_compare_types (gfc_typespec *ts1, gfc_typespec *ts2)\n   if (ts1->type == BT_VOID || ts2->type == BT_VOID)\n     return true;\n \n+  /* Special case for our C interop types.  FIXME: There should be a\n+     better way of doing this.  When ISO C binding is cleared up,\n+     this can probably be removed.  See PR 57048.  */\n+\n+  if (((ts1->type == BT_INTEGER && ts2->type == BT_DERIVED)\n+       || (ts1->type == BT_DERIVED && ts2->type == BT_INTEGER))\n+      && ts1->u.derived && ts2->u.derived\n+      && ts1->u.derived == ts2->u.derived)\n+    return true;\n+\n   /* The _data component is not always present, therefore check for its\n      presence before assuming, that its derived->attr is available.\n      When the _data component is not present, then nevertheless the"}, {"sha": "45e3c7f917b8991d1b876f2d0ad4535d15e86db5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5af5f1de35772754e844c391ab5bfa90ad231077", "patch": "@@ -1,3 +1,9 @@\n+2019-01-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/57048\n+\t* gfortran.dg/c_funptr_1.f90: New file.\n+\t* gfortran.dg/c_funptr_1_mod.f90: New file.\n+\n 2019-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/66676"}, {"sha": "541f07659604f9aac7f6ef9574cb5c00385b65fd", "filename": "gcc/testsuite/gfortran.dg/c_funptr_1.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funptr_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funptr_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funptr_1.f90?ref=5af5f1de35772754e844c391ab5bfa90ad231077", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do preprocess }\n+! { dg-additional-options \"-cpp\" }\n+! PR 57048 - this used not to compile. Original test case by Angelo\n+! Graziosi.  Only works if compiled c_funptr_1_mod.f90, hence the\n+! do-nothing directive above.\n+module procs\n+  \n+  implicit none\n+  private\n+\n+  public WndProc\n+\n+contains\n+  function WndProc()\n+    integer :: WndProc\n+    \n+    WndProc = 0\n+  end function WndProc\n+end module procs\n+\n+function WinMain()\n+  use, intrinsic :: iso_c_binding, only: C_INT,c_sizeof,c_funloc\n+  use win32_types\n+  use procs\n+  implicit none\n+\n+  integer :: WinMain\n+\n+  type(WNDCLASSEX_T) :: WndClass\n+\n+  WndClass%cbSize = int(c_sizeof(Wndclass),C_INT)\n+  WndClass%lpfnWndProc = c_funloc(WndProc)\n+\n+  WinMain = 0\n+end function WinMain\n+\n+program main\n+end "}, {"sha": "6db515bdf16e304058f7001be1acf6631c2fa20d", "filename": "gcc/testsuite/gfortran.dg/c_funptr_1_mod.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funptr_1_mod.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af5f1de35772754e844c391ab5bfa90ad231077/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funptr_1_mod.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funptr_1_mod.f90?ref=5af5f1de35772754e844c391ab5bfa90ad231077", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do  run }\n+! { dg-additional-sources c_funptr_1.f90 }\n+! Additional module to go with c_funptr_1.f90\n+module win32_types\n+  use, intrinsic :: iso_c_binding, only: C_INT,C_FUNPTR\n+  implicit none\n+  private\n+\n+  public WNDCLASSEX_T\n+  type, bind(C) :: WNDCLASSEX_T\n+     integer(C_INT) :: cbSize\n+     type(C_FUNPTR) :: lpfnWndProc\n+\n+  end type WNDCLASSEX_T\n+\n+end module win32_types"}]}