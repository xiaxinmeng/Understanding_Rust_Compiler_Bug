{"sha": "4864297f7858617a5fe406d3651a46446b41db7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2NDI5N2Y3ODU4NjE3YTVmZTQwNmQzNjUxYTQ2NDQ2YjQxZGI3YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-20T14:01:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-20T14:01:05Z"}, "message": "re PR c++/78655 (gcc doesn't exploit the fact that the result of pointer addition can not be nullptr)\n\n2018-08-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/78655\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Make\n\tpointer + offset nonnull if either operand is nonnull work.\n\n\t* gcc.dg/tree-ssa/evrp11.c: New testcase.\n\nFrom-SVN: r263662", "tree": {"sha": "de3c91f061f06808d33eae5fc49ebd56fd9fc3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de3c91f061f06808d33eae5fc49ebd56fd9fc3a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4864297f7858617a5fe406d3651a46446b41db7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4864297f7858617a5fe406d3651a46446b41db7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4864297f7858617a5fe406d3651a46446b41db7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4864297f7858617a5fe406d3651a46446b41db7a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c5e1ae5988cef25799a569f3255ac14c8ba41a"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "6cf673c7382941f5f662f57b05ad3eb4062bd4de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4864297f7858617a5fe406d3651a46446b41db7a", "patch": "@@ -1,3 +1,9 @@\n+2018-08-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78655\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Make\n+\tpointer + offset nonnull if either operand is nonnull work.\n+\n 2018-08-20  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf2out.c (add_scalar_info): Don't add reference to existing die"}, {"sha": "1eaec9008da98272b0c8c7e99402007f2722aef8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4864297f7858617a5fe406d3651a46446b41db7a", "patch": "@@ -1,3 +1,8 @@\n+2018-08-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78655\n+\t* gcc.dg/tree-ssa/evrp11.c: New testcase.\n+\n 2018-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.dg/debug/dwarf2/pr80263.c: Suppress pubtypes output"}, {"sha": "f1373bd8683cc064e7843106b4ae4ded0bf00f6b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp11.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp11.c?ref=4864297f7858617a5fe406d3651a46446b41db7a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+extern void link_error ();\n+\n+void foo (int *x)\n+{\n+  int *p = x + 1;\n+  if (p == 0)\n+    link_error ();\n+}\n+\n+void bar (char *x, int a)\n+{\n+  if (a != 0)\n+    {\n+      char *p = x + a;\n+      if (p == 0)\n+\tlink_error ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"evrp\" } }  */"}, {"sha": "2ddb0c2c197e9ade56ed67ac266d84d33171ee35", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4864297f7858617a5fe406d3651a46446b41db7a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4864297f7858617a5fe406d3651a46446b41db7a", "patch": "@@ -1437,6 +1437,7 @@ extract_range_from_binary_expr_1 (value_range *vr,\n       && code != PLUS_EXPR\n       && code != MINUS_EXPR\n       && code != RSHIFT_EXPR\n+      && code != POINTER_PLUS_EXPR\n       && (vr0.type == VR_VARYING\n \t  || vr1.type == VR_VARYING\n \t  || vr0.type != vr1.type\n@@ -1467,7 +1468,11 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t{\n \t  /* For pointer types, we are really only interested in asserting\n \t     whether the expression evaluates to non-NULL.  */\n-\t  if (range_is_nonnull (&vr0) || range_is_nonnull (&vr1))\n+\t  if (range_is_nonnull (&vr0)\n+\t      || range_is_nonnull (&vr1)\n+\t      || (vr1.type == VR_RANGE\n+\t\t  && !symbolic_range_p (&vr1)\n+\t\t  && !range_includes_zero_p (vr1.min, vr1.max)))\n \t    set_value_range_to_nonnull (vr, expr_type);\n \t  else if (range_is_null (&vr0) && range_is_null (&vr1))\n \t    set_value_range_to_null (vr, expr_type);"}]}