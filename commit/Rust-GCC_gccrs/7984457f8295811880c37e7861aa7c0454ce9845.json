{"sha": "7984457f8295811880c37e7861aa7c0454ce9845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4NDQ1N2Y4Mjk1ODExODgwYzM3ZTc4NjFhYTdjMDQ1NGNlOTg0NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-26T16:09:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-26T16:09:17Z"}, "message": "Stop print_hex from printing bits above the precision\n\n2017-10-26  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* wide-int-print.cc (print_hex): Loop based on extract_uhwi.\n\tDon't print any bits outside the precision of the value.\n\t* wide-int.cc (test_printing): Add some new tests.\n\nFrom-SVN: r254109", "tree": {"sha": "8520bb6366825f7c10916bd90242062701968241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8520bb6366825f7c10916bd90242062701968241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7984457f8295811880c37e7861aa7c0454ce9845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7984457f8295811880c37e7861aa7c0454ce9845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7984457f8295811880c37e7861aa7c0454ce9845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7984457f8295811880c37e7861aa7c0454ce9845/comments", "author": null, "committer": null, "parents": [{"sha": "18b279715c298992748426a41083ec76f3875bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b279715c298992748426a41083ec76f3875bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b279715c298992748426a41083ec76f3875bfa"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "9cf528c433592b43dde37ac8cfa50a1fbd3ce13c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7984457f8295811880c37e7861aa7c0454ce9845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7984457f8295811880c37e7861aa7c0454ce9845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7984457f8295811880c37e7861aa7c0454ce9845", "patch": "@@ -1,3 +1,9 @@\n+2017-10-26  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* wide-int-print.cc (print_hex): Loop based on extract_uhwi.\n+\tDon't print any bits outside the precision of the value.\n+\t* wide-int.cc (test_printing): Add some new tests.\n+\n 2017-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (gcc_cv_as_ix86_xbrace_comment): Check if assembler"}, {"sha": "8874e81968516c694cd747b384dfa29416d54055", "filename": "gcc/wide-int-print.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7984457f8295811880c37e7861aa7c0454ce9845/gcc%2Fwide-int-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7984457f8295811880c37e7861aa7c0454ce9845/gcc%2Fwide-int-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-print.cc?ref=7984457f8295811880c37e7861aa7c0454ce9845", "patch": "@@ -103,30 +103,28 @@ print_decu (const wide_int_ref &wi, FILE *file)\n }\n \n void\n-print_hex (const wide_int_ref &wi, char *buf)\n+print_hex (const wide_int_ref &val, char *buf)\n {\n-  int i = wi.get_len ();\n-\n-  if (wi == 0)\n+  if (val == 0)\n     buf += sprintf (buf, \"0x0\");\n   else\n     {\n-      if (wi::neg_p (wi))\n+      buf += sprintf (buf, \"0x\");\n+      int start = ROUND_DOWN (val.get_precision (), HOST_BITS_PER_WIDE_INT);\n+      int width = val.get_precision () - start;\n+      bool first_p = true;\n+      for (int i = start; i >= 0; i -= HOST_BITS_PER_WIDE_INT)\n \t{\n-\t  int j;\n-\t  /* If the number is negative, we may need to pad value with\n-\t     0xFFF...  because the leading elements may be missing and\n-\t     we do not print a '-' with hex.  */\n-\t  buf += sprintf (buf, \"0x\");\n-\t  for (j = BLOCKS_NEEDED (wi.get_precision ()); j > i; j--)\n-\t    buf += sprintf (buf, HOST_WIDE_INT_PRINT_PADDED_HEX, HOST_WIDE_INT_M1);\n-\n+\t  unsigned HOST_WIDE_INT uhwi = wi::extract_uhwi (val, i, width);\n+\t  if (!first_p)\n+\t    buf += sprintf (buf, HOST_WIDE_INT_PRINT_PADDED_HEX, uhwi);\n+\t  else if (uhwi != 0)\n+\t    {\n+\t      buf += sprintf (buf, HOST_WIDE_INT_PRINT_HEX_PURE, uhwi);\n+\t      first_p = false;\n+\t    }\n+\t  width = HOST_BITS_PER_WIDE_INT;\n \t}\n-      else\n-\tbuf += sprintf (buf, \"0x\" HOST_WIDE_INT_PRINT_HEX_PURE, wi.elt (--i));\n-\n-      while (--i >= 0)\n-\tbuf += sprintf (buf, HOST_WIDE_INT_PRINT_PADDED_HEX, wi.elt (i));\n     }\n }\n "}, {"sha": "ba0fd25b093fdf688e19c5f8583ed0189206ba23", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7984457f8295811880c37e7861aa7c0454ce9845/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7984457f8295811880c37e7861aa7c0454ce9845/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=7984457f8295811880c37e7861aa7c0454ce9845", "patch": "@@ -2253,6 +2253,17 @@ test_printing ()\n   VALUE_TYPE a = from_int<VALUE_TYPE> (42);\n   assert_deceq (\"42\", a, SIGNED);\n   assert_hexeq (\"0x2a\", a);\n+  assert_hexeq (\"0x1fffffffffffffffff\", wi::shwi (-1, 69));\n+  assert_hexeq (\"0xffffffffffffffff\", wi::mask (64, false, 69));\n+  assert_hexeq (\"0xffffffffffffffff\", wi::mask <widest_int> (64, false));\n+  if (WIDE_INT_MAX_PRECISION > 128)\n+    {\n+      assert_hexeq (\"0x20000000000000000fffffffffffffffe\",\n+\t\t    wi::lshift (1, 129) + wi::lshift (1, 64) - 2);\n+      assert_hexeq (\"0x200000000000004000123456789abcdef\",\n+\t\t    wi::lshift (1, 129) + wi::lshift (1, 74)\n+\t\t    + wi::lshift (0x1234567, 32) + 0x89abcdef);\n+    }\n }\n \n /* Verify that various operations work correctly for VALUE_TYPE,"}]}