{"sha": "cd323d97d0592135ca4345701ef051659d8d4507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzMjNkOTdkMDU5MjEzNWNhNDM0NTcwMWVmMDUxNjU5ZDhkNDUwNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-05-18T16:29:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-05-18T16:29:58Z"}, "message": "analyzer: fix missing leak after call to strsep [PR100615]\n\nPR analyzer/100615 reports a missing leak diagnostic.\nThe issue is that the code calls strsep which the analyzer doesn't\nhave special knowledge of, and so conservatively assumes that it\ncould free the pointer, so drops malloc state for it.\n\nProperly \"teaching\" the analyzer about strsep would require it\nto support bifurcating state at a call, which is currently fiddly to\ndo, so for now this patch notes that strsep doesn't affect the\nmalloc state machine, allowing the analyzer to correctly detect the leak.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/100615\n\t* sm-malloc.cc: Include \"analyzer/function-set.h\".\n\t(malloc_state_machine::on_stmt): Call unaffected_by_call_p and\n\tbail on the functions it recognizes.\n\t(malloc_state_machine::unaffected_by_call_p): New.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/100615\n\t* gcc.dg/analyzer/pr100615.c: New test.", "tree": {"sha": "beceb65d66cbe4f39fbd7c287ed5de89a8bbea8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beceb65d66cbe4f39fbd7c287ed5de89a8bbea8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd323d97d0592135ca4345701ef051659d8d4507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd323d97d0592135ca4345701ef051659d8d4507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd323d97d0592135ca4345701ef051659d8d4507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd323d97d0592135ca4345701ef051659d8d4507/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ca31d65092e5afcef292f807fcf14c5363280d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ca31d65092e5afcef292f807fcf14c5363280d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ca31d65092e5afcef292f807fcf14c5363280d"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "a1582ca2f1fe0bde26efc9188a4df60a49b40e05", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd323d97d0592135ca4345701ef051659d8d4507/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd323d97d0592135ca4345701ef051659d8d4507/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=cd323d97d0592135ca4345701ef051659d8d4507", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/region-model.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"analyzer/function-set.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -384,6 +385,8 @@ class malloc_state_machine : public state_machine\n   bool reset_when_passed_to_unknown_fn_p (state_t s,\n \t\t\t\t\t  bool is_mutable) const FINAL OVERRIDE;\n \n+  static bool unaffected_by_call_p (tree fndecl);\n+\n   standard_deallocator_set m_free;\n   standard_deallocator_set m_scalar_delete;\n   standard_deallocator_set m_vector_delete;\n@@ -1569,6 +1572,9 @@ malloc_state_machine::on_stmt (sm_context *sm_ctxt,\n \t    return true;\n \t  }\n \n+\tif (unaffected_by_call_p (callee_fndecl))\n+\t  return true;\n+\n \t/* Cast away const-ness for cache-like operations.  */\n \tmalloc_state_machine *mutable_this\n \t  = const_cast <malloc_state_machine *> (this);\n@@ -1925,6 +1931,28 @@ malloc_state_machine::reset_when_passed_to_unknown_fn_p (state_t s,\n   return is_mutable;\n }\n \n+/* Return true if calls to FNDECL are known to not affect this sm-state.  */\n+\n+bool\n+malloc_state_machine::unaffected_by_call_p (tree fndecl)\n+{\n+  /* A set of functions that are known to not affect allocation\n+     status, even if we haven't fully modelled the rest of their\n+     behavior yet.  */\n+  static const char * const funcnames[] = {\n+    /* This array must be kept sorted.  */\n+    \"strsep\",\n+  };\n+  const size_t count\n+    = sizeof(funcnames) / sizeof (funcnames[0]);\n+  function_set fs (funcnames, count);\n+\n+  if (fs.contains_decl_p (fndecl))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Shared logic for handling GIMPLE_ASSIGNs and GIMPLE_PHIs that\n    assign zero to LHS.  */\n "}, {"sha": "7a06f987d4138ffd2c3b17e38a75544ce4999011", "filename": "gcc/testsuite/gcc.dg/analyzer/pr100615.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd323d97d0592135ca4345701ef051659d8d4507/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr100615.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd323d97d0592135ca4345701ef051659d8d4507/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr100615.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr100615.c?ref=cd323d97d0592135ca4345701ef051659d8d4507", "patch": "@@ -0,0 +1,53 @@\n+/* Adapted from\n+   https://github.com/stackpath/rxtxcpu/blob/816d86c5d49c4db2ea5649f6b87e96da5af660f1/cpu.c\n+   which is MIT-licensed.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+#define NULL ((void *)0)\n+\n+extern size_t strlen (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__pure__))\n+  __attribute__ ((__nonnull__ (1)));\n+extern char *strdup (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__malloc__))\n+  __attribute__ ((__nonnull__ (1)));\n+extern char *strsep (char **__restrict __stringp,\n+\t\t     const char *__restrict __delim)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__nonnull__ (1, 2)));\n+extern long int strtol (const char *__restrict __nptr,\n+\t\t\tchar **__restrict __endptr, int __base)\n+  __attribute__ ((__nothrow__ , __leaf__))\n+  __attribute__ ((__nonnull__ (1)));\n+extern void free (void *__ptr)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+\n+#define CPU_LIST_BASE 10\n+\n+int parse_cpu_list(char *cpu_list) {\n+  if (strlen(cpu_list) == 0) {\n+    return 0;\n+  }\n+\n+  char *endptr;\n+  char *tofree, *string, *range;\n+\n+  tofree = string = strdup(cpu_list); /* { dg-message \"allocated here\" } */\n+\n+  while ((range = strsep(&string, \",\")) != NULL) {\n+    int first = strtol(range, &endptr, CPU_LIST_BASE);\n+    if (!*endptr) {\n+      continue;\n+    }\n+    char *save = endptr;\n+    endptr++;\n+    int last = strtol(endptr, &endptr, CPU_LIST_BASE);\n+    if (save[0] != '-' || *endptr || last < first) {\n+      return -1; /* { dg-warning \"leak of 'tofree'\" } */\n+    }\n+  }\n+  free(tofree);\n+  return 0;\n+}"}]}