{"sha": "4017ae6e8b8f427065a97d0e99afa7347186c1ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxN2FlNmU4YjhmNDI3MDY1YTk3ZDBlOTlhZmE3MzQ3MTg2YzFhYg==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2002-12-23T19:59:31Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2002-12-23T19:59:31Z"}, "message": "exception.cc (PERSONALITY_FUNCTION): Clear least-significant-bit of catch_type.\n\n* exception.cc (PERSONALITY_FUNCTION): Clear least-significant-bit\nof catch_type.\n* java/lang/natClass.cc (initializeClass): Link vtable, otable,\nidt tables after initializing superclass.\n* java/lang/natClassLoader.cc (uaddr): New typedef.\n(_Jv_PrepareCompiledClass): Resolve superclass, interfaces\nif they are constant pool indicies.  Don't link vtable, otable yet.\n\nFrom-SVN: r60450", "tree": {"sha": "a094b01d9cbc1da5277a2f87e776b7fb146d7e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a094b01d9cbc1da5277a2f87e776b7fb146d7e2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4017ae6e8b8f427065a97d0e99afa7347186c1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4017ae6e8b8f427065a97d0e99afa7347186c1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4017ae6e8b8f427065a97d0e99afa7347186c1ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4017ae6e8b8f427065a97d0e99afa7347186c1ab/comments", "author": null, "committer": null, "parents": [{"sha": "d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ab697ba4d1eeeecc4ab37337cbcad455c80057"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "2044fc4969470f0c33713949aa405833fc72567b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4017ae6e8b8f427065a97d0e99afa7347186c1ab", "patch": "@@ -1,3 +1,13 @@\n+2002-12-23  Jeff Sturm  <jsturm@one-point.com>\n+\n+\t* exception.cc (PERSONALITY_FUNCTION): Clear least-significant-bit\n+\tof catch_type.\n+\t* java/lang/natClass.cc (initializeClass): Link vtable, otable,\n+\tidt tables after initializing superclass.\n+\t* java/lang/natClassLoader.cc (uaddr): New typedef.\n+\t(_Jv_PrepareCompiledClass): Resolve superclass, interfaces\n+\tif they are constant pool indicies.  Don't link vtable, otable yet.\n+\n 2002-12-21  Anthony Green  <green@redhat.com>\n \n \t* Makefile.am: Move org.xml.sax and org.w3c.dom into their own"}, {"sha": "d983f98f8faaaaff3cb9d269c3f78de990caf1fd", "filename": "libjava/exception.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=4017ae6e8b8f427065a97d0e99afa7347186c1ab", "patch": "@@ -338,7 +338,7 @@ PERSONALITY_FUNCTION (int version,\n \t      // The catch_type is either a (java::lang::Class*) or\n \t      // is one more than a (Utf8Const*).\n \t      if ((size_t)catch_type & 1)\n-\t\tcatch_type = _Jv_FindClass ((Utf8Const*)catch_type - 1, NULL);\n+\t\tcatch_type = _Jv_FindClass ((Utf8Const*)((size_t)catch_type ^ 1), NULL);\n \n \t      if (_Jv_IsInstanceOf (xh->value, catch_type))\n \t\t{"}, {"sha": "0960649e71cb5a2835473d42a04d873221c8910c", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=4017ae6e8b8f427065a97d0e99afa7347186c1ab", "patch": "@@ -758,9 +758,6 @@ java::lang::Class::initializeClass (void)\n \t}\n     }\n \n-  if (state <= JV_STATE_LINKED)\n-    _Jv_PrepareConstantTimeTables (this);\n-\n   // Step 2.\n   java::lang::Thread *self = java::lang::Thread::currentThread();\n   // FIXME: `self' can be null at startup.  Hence this nasty trick.\n@@ -805,6 +802,14 @@ java::lang::Class::initializeClass (void)\n \t}\n     }\n \n+  _Jv_PrepareConstantTimeTables (this);\n+\n+  if (vtable == NULL)\n+    _Jv_MakeVTable(this);\n+\n+  if (otable != NULL && otable->state == 0)\n+    _Jv_LinkOffsetTable(this);\n+\n   // Steps 8, 9, 10, 11.\n   try\n     {"}, {"sha": "176f16a734363c396e17bbba706b072da4e103ad", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017ae6e8b8f427065a97d0e99afa7347186c1ab/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=4017ae6e8b8f427065a97d0e99afa7347186c1ab", "patch": "@@ -178,6 +178,8 @@ java::lang::VMClassLoader::getPrimitiveClass (jchar type)\n   return _Jv_FindClassFromSignature (sig, NULL);\n }\n \n+typedef unsigned int uaddr __attribute__ ((mode (pointer)));\n+\n /** This function does class-preparation for compiled classes.  \n     NOTE: It contains replicated functionality from\n     _Jv_ResolvePoolEntry, and this is intentional, since that function\n@@ -193,6 +195,9 @@ _Jv_PrepareCompiledClass (jclass klass)\n   klass->state = JV_STATE_LINKED;\n \n   _Jv_Constants *pool = &klass->constants;\n+\n+  // Resolve class constants first, since other constant pool\n+  // entries may rely on these.\n   for (int index = 1; index < pool->size; ++index)\n     {\n       if (pool->tags[index] == JV_CONSTANT_Class)\n@@ -215,7 +220,22 @@ _Jv_PrepareCompiledClass (jclass klass)\n \t  pool->data[index].clazz = found;\n \t  pool->tags[index] |= JV_CONSTANT_ResolvedFlag;\n \t}\n-      else if (pool->tags[index] == JV_CONSTANT_String)\n+    }\n+\n+  // If superclass looks like a constant pool entry,\n+  // resolve it now.\n+  if ((uaddr) klass->superclass < pool->size)\n+    klass->superclass = pool->data[(int) klass->superclass].clazz;\n+\n+  // Likewise for interfaces.\n+  for (int i = 0; i < klass->interface_count; i++)\n+    if ((uaddr) klass->interfaces[i] < pool->size)\n+      klass->interfaces[i] = pool->data[(int) klass->interfaces[i]].clazz;\n+\n+  // Resolve the remaining constant pool entries.\n+  for (int index = 1; index < pool->size; ++index)\n+    {\n+      if (pool->tags[index] == JV_CONSTANT_String)\n \t{\n \t  jstring str;\n \n@@ -251,12 +271,6 @@ _Jv_PrepareCompiledClass (jclass klass)\n     }\n #endif /* INTERPRETER */\n \n-  if (klass->vtable == NULL)\n-    _Jv_MakeVTable(klass);\n-\n-  if (klass->otable != NULL && klass->otable->state == 0)\n-    _Jv_LinkOffsetTable(klass);\n-\n   klass->notifyAll ();\n \n   _Jv_PushClass (klass);"}]}