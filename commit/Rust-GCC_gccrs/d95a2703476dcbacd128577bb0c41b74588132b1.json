{"sha": "d95a2703476dcbacd128577bb0c41b74588132b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1YTI3MDM0NzZkY2JhY2QxMjg1NzdiYjBjNDFiNzQ1ODgxMzJiMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-10-22T11:07:10Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-10-22T11:07:10Z"}, "message": "New syntax for -fsanitize-recover.\n\n2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n\t    Yury Gribov  <y.gribov@samsung.com>\n\ngcc/\n\t* common.opt (flag_sanitize_recover): New variable.\n\t(fsanitize-recover): Remove Var/Init, deprecate.\n\t(fsanitize-recover=): New option.\n\t* doc/invoke.texi (fsanitize-recover): Update docs.\n\t* opts.c (finish_options): Use opts->x_flag_sanitize\n\tinstead of flag_sanitize.  Prohibit -fsanitize-recover\n\tfor anything besides UBSan.  Formatting.\n\t(common_handle_option): Handle OPT_fsanitize_recover_\n\tand OPT_fsanitize_recover.  Use opts->x_flag_sanitize\n\tinstead of flag_sanitize.\n\t* asan.c (pass_sanopt::execute): Fix up formatting.\n\t* ubsan.c (ubsan_expand_bounds_ifn, ubsan_expand_null_ifn,\n\tubsan_expand_objsize_ifn, ubsan_build_overflow_builtin,\n\tinstrument_bool_enum_load, ubsan_instrument_float_cast,\n\tinstrument_nonnull_arg, instrument_nonnull_return): Check\n\tbits in flag_sanitize_recover bitmask instead of\n\tflag_sanitize_recover as bool flag.\n\ngcc/c-family/\n\t* c-ubsan.c (ubsan_instrument_division, ubsan_instrument_shift,\n\tubsan_instrument_vla): Check bits in flag_sanitize_recover bitmask\n\tinstead of flag_sanitize_recover as bool flag.\n\ngcc/testsuite/\n\t* c-c++-common/ubsan/align-1.c: Update cmdline options.\n\t* c-c++-common/ubsan/align-3.c: Likewise.\n\t* c-c++-common/ubsan/bounds-1.c: Likewise.\n\t* c-c++-common/ubsan/div-by-zero-7.c: Likewise.\n\t* c-c++-common/ubsan/float-cast-overflow-10.c: Likewise.\n\t* c-c++-common/ubsan/float-cast-overflow-7.c: Likewise.\n\t* c-c++-common/ubsan/float-cast-overflow-8.c: Likewise.\n\t* c-c++-common/ubsan/float-cast-overflow-9.c: Likewise.\n\t* c-c++-common/ubsan/nonnull-2.c: Likewise.\n\t* c-c++-common/ubsan/nonnull-3.c: Likewise.\n\t* c-c++-common/ubsan/object-size-3.c: Likewise.\n\t* c-c++-common/ubsan/overflow-1.c: Likewise.\n\t* c-c++-common/ubsan/overflow-add-1.c: Likewise.\n\t* c-c++-common/ubsan/overflow-add-3.c: Likewise.\n\t* c-c++-common/ubsan/overflow-mul-1.c: Likewise.\n\t* c-c++-common/ubsan/overflow-mul-3.c: Likewise.\n\t* c-c++-common/ubsan/overflow-negate-2.c: Likewise.\n\t* c-c++-common/ubsan/overflow-sub-1.c: Likewise.\n\t* c-c++-common/ubsan/pr59503.c: Likewise.\n\t* c-c++-common/ubsan/pr60613-1.c: Likewise.\n\t* c-c++-common/ubsan/save-expr-1.c: Likewise.\n\t* c-c++-common/ubsan/shift-3.c: Likewise.\n\t* c-c++-common/ubsan/shift-6.c: Likewise.\n\t* c-c++-common/ubsan/undefined-1.c: Likewise.\n\t* c-c++-common/ubsan/vla-2.c: Likewise.\n\t* c-c++-common/ubsan/vla-3.c: Likewise.\n\t* c-c++-common/ubsan/vla-4.c: Likewise.\n\t* g++.dg/ubsan/cxx11-shift-1.C: Likewise.\n\t* g++.dg/ubsan/return-2.C: Likewise.\n\t* c-c++-common/ubsan/recovery-1.c: New test.\n\t* c-c++-common/ubsan/recovery-2.c: New test.\n\t* c-c++-common/ubsan/recovery-3.c: New test.\n\t* c-c++-common/ubsan/recovery-common.inc: New file.\n\nCo-Authored-By: Yury Gribov <y.gribov@samsung.com>\n\nFrom-SVN: r216552", "tree": {"sha": "f073707e8126a2ace9bb536a76fb513d5fe1121a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f073707e8126a2ace9bb536a76fb513d5fe1121a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d95a2703476dcbacd128577bb0c41b74588132b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95a2703476dcbacd128577bb0c41b74588132b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95a2703476dcbacd128577bb0c41b74588132b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95a2703476dcbacd128577bb0c41b74588132b1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18a3415e239132c0273e306421147d79a7d3ae28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a3415e239132c0273e306421147d79a7d3ae28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a3415e239132c0273e306421147d79a7d3ae28"}], "stats": {"total": 306, "additions": 232, "deletions": 74}, "files": [{"sha": "f944f7654911b5c776477007a2865b11fa7f98ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,3 +1,24 @@\n+2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\t    Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* common.opt (flag_sanitize_recover): New variable.\n+\t(fsanitize-recover): Remove Var/Init, deprecate.\n+\t(fsanitize-recover=): New option.\n+\t* doc/invoke.texi (fsanitize-recover): Update docs.\n+\t* opts.c (finish_options): Use opts->x_flag_sanitize\n+\tinstead of flag_sanitize.  Prohibit -fsanitize-recover\n+\tfor anything besides UBSan.  Formatting.\n+\t(common_handle_option): Handle OPT_fsanitize_recover_\n+\tand OPT_fsanitize_recover.  Use opts->x_flag_sanitize\n+\tinstead of flag_sanitize.\n+\t* asan.c (pass_sanopt::execute): Fix up formatting.\n+\t* ubsan.c (ubsan_expand_bounds_ifn, ubsan_expand_null_ifn,\n+\tubsan_expand_objsize_ifn, ubsan_build_overflow_builtin,\n+\tinstrument_bool_enum_load, ubsan_instrument_float_cast,\n+\tinstrument_nonnull_arg, instrument_nonnull_return): Check\n+\tbits in flag_sanitize_recover bitmask instead of\n+\tflag_sanitize_recover as bool flag.\n+\n 2014-10-22  Jiong Wang <jiong.wang@arm.com>\n \n \t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Add missing '\\'."}, {"sha": "97f0b4cd61c6b4d2c5c989ac07d168be66d46f70", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -2884,10 +2884,8 @@ pass_sanopt::execute (function *fun)\n \t\t  no_next = ubsan_expand_objsize_ifn (&gsi);\n \t\t  break;\n \t\tcase IFN_ASAN_CHECK:\n-\t\t  {\n-\t\t    no_next = asan_expand_check_ifn (&gsi, use_calls);\n-\t\t    break;\n-\t\t  }\n+\t\t  no_next = asan_expand_check_ifn (&gsi, use_calls);\n+\t\t  break;\n \t\tdefault:\n \t\t  break;\n \t\t}"}, {"sha": "f95866c729a96f2c823f1baa195410bbcb3a33a1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,3 +1,10 @@\n+2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\t    Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* c-ubsan.c (ubsan_instrument_division, ubsan_instrument_shift,\n+\tubsan_instrument_vla): Check bits in flag_sanitize_recover bitmask\n+\tinstead of flag_sanitize_recover as bool flag.\n+\n 2014-10-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* cilk.c: Revert previous change."}, {"sha": "5a42303c14ab90830c250519cf1ff9daf6e1f50e", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -104,7 +104,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n \t\t\t\t     NULL_TREE);\n       data = build_fold_addr_expr_loc (loc, data);\n       enum built_in_function bcode\n-\t= flag_sanitize_recover\n+\t= (flag_sanitize_recover & SANITIZE_DIVIDE)\n \t  ? BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW\n \t  : BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT;\n       tt = builtin_decl_explicit (bcode);\n@@ -199,7 +199,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       data = build_fold_addr_expr_loc (loc, data);\n \n       enum built_in_function bcode\n-\t= flag_sanitize_recover\n+\t= (flag_sanitize_recover & SANITIZE_SHIFT)\n \t  ? BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS\n \t  : BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT;\n       tt = builtin_decl_explicit (bcode);\n@@ -229,7 +229,7 @@ ubsan_instrument_vla (location_t loc, tree size)\n \t\t\t\t     NULL_TREE);\n       data = build_fold_addr_expr_loc (loc, data);\n       enum built_in_function bcode\n-\t= flag_sanitize_recover\n+\t= (flag_sanitize_recover & SANITIZE_VLA)\n \t  ? BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE\n \t  : BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT;\n       tt = builtin_decl_explicit (bcode);"}, {"sha": "da5250b1a27c3f9bfe31df8dec5f9ab0d5e1c274", "filename": "gcc/common.opt", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -211,6 +211,10 @@ bool flag_opts_finished\n Variable\n unsigned int flag_sanitize\n \n+; What sanitizers should recover from errors\n+Variable\n+unsigned int flag_sanitize_recover = SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT\n+\n ; Flag whether a prefix has been added to dump_base_name\n Variable\n bool dump_base_name_prefixed = false\n@@ -879,10 +883,14 @@ fsanitize=\n Common Driver Report Joined\n Select what to sanitize\n \n-fsanitize-recover\n-Common Report Var(flag_sanitize_recover) Init(1)\n+fsanitize-recover=\n+Common Report Joined\n After diagnosing undefined behavior attempt to continue execution\n \n+fsanitize-recover\n+Common Report\n+This switch is deprecated; use -fsanitize-recover= instead\n+\n fsanitize-undefined-trap-on-error\n Common Report Var(flag_sanitize_undefined_trap_on_error) Init(0)\n Use trap instead of a library function for undefined behavior sanitization"}, {"sha": "c9ca404dae1192c4fef4aa0a55b880e94e993aba", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -296,7 +296,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n--fsanitize=@var{style} -fsanitize-recover @gol\n+-fsanitize=@var{style} -fsanitize-recover -fsanitize-recover=@var{style} @gol\n -fsanitize-undefined-trap-on-error @gol\n -fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n -fdisable-ipa-@var{pass_name} @gol\n@@ -5642,18 +5642,29 @@ While @option{-ftrapv} causes traps for signed overflows to be emitted,\n @option{-fsanitize=undefined} gives a diagnostic message.\n This currently works only for the C family of languages.\n \n-@item -fsanitize-recover\n+@item -fsanitize-recover@r{[}=@var{opts}@r{]}\n @opindex fsanitize-recover\n-By default @option{-fsanitize=undefined} sanitization (and its suboptions\n-except for @option{-fsanitize=unreachable} and @option{-fsanitize=return})\n-after reporting undefined behavior attempts to continue running the\n-program as if no undefined behavior happened.  This means multiple undefined\n-behavior runtime errors can be reported in a single program run, and the exit\n-code of the program may indicate success even when undefined behavior\n-has been reported.  The @option{-fno-sanitize-recover} can be used to alter\n-this behavior, only the first detected undefined behavior will be reported\n+@opindex fno-sanitize-recover\n+@option{-fsanitize-recover=} controls error recovery mode for sanitizers\n+mentioned in comma-separated list of @var{opts}.  Enabling this option\n+for a sanitizer component would cause it to attempt to continue\n+running the program as if no error happened.  This means multiple\n+runtime errors can be reported in a single program run, and the exit\n+code of the program may indicate success even when errors\n+have been reported.  The @option{-fno-sanitize-recover=} can be used to alter\n+this behavior, only the first detected error will be reported\n and program will exit after that with non-zero exit code.\n \n+Currently this feature only works for @option{-fsanitize=undefined} (and its suboptions\n+except for @option{-fsanitize=unreachable} and @option{-fsanitize=return}),\n+@option{-fsanitize=float-cast-overflow} and @option{-fsanitize=float-divide-by-zero}.\n+For these sanitizers error recovery is turned on by default.\n+\n+Syntax without explicit @var{opts} parameter is deprecated.  It is equivalent to\n+@option{-fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero}.\n+Similarly @option{-fno-sanitize-recover} is equivalent to\n+@option{-fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero}.\n+\n @item -fsanitize-undefined-trap-on-error\n @opindex fsanitize-undefined-trap-on-error\n The @option{-fsanitize-undefined-trap-on-error} instructs the compiler to"}, {"sha": "25f52353218a30f6ed05ebe5d2769276b2fb1b30", "filename": "gcc/opts.c", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -879,17 +879,28 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   /* Userspace and kernel ASan conflict with each other and with TSan.  */\n \n-  if ((flag_sanitize & SANITIZE_USER_ADDRESS)\n-      && (flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n+  if ((opts->x_flag_sanitize & SANITIZE_USER_ADDRESS)\n+      && (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n     error_at (loc,\n-              \"-fsanitize=address is incompatible with \"\n-              \"-fsanitize=kernel-address\");\n+\t      \"-fsanitize=address is incompatible with \"\n+\t      \"-fsanitize=kernel-address\");\n \n-  if ((flag_sanitize & SANITIZE_ADDRESS)\n-      && (flag_sanitize & SANITIZE_THREAD))\n+  if ((opts->x_flag_sanitize & SANITIZE_ADDRESS)\n+      && (opts->x_flag_sanitize & SANITIZE_THREAD))\n     error_at (loc,\n-              \"-fsanitize=address and -fsanitize=kernel-address \"\n-              \"are incompatible with -fsanitize=thread\");\n+\t      \"-fsanitize=address and -fsanitize=kernel-address \"\n+\t      \"are incompatible with -fsanitize=thread\");\n+\n+  /* Error recovery is not allowed for ASan and TSan.  */\n+\n+  if (opts->x_flag_sanitize_recover & SANITIZE_USER_ADDRESS)\n+    error_at (loc, \"-fsanitize-recover=address is not supported\");\n+\n+  if (opts->x_flag_sanitize_recover & SANITIZE_THREAD)\n+    error_at (loc, \"-fsanitize-recover=thread is not supported\");\n+\n+  if (opts->x_flag_sanitize_recover & SANITIZE_LEAK)\n+    error_at (loc, \"-fsanitize-recover=leak is not supported\");\n }\n \n #define LEFT_COLUMN\t27\n@@ -1517,8 +1528,12 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fsanitize_:\n+    case OPT_fsanitize_recover_:\n       {\n \tconst char *p = arg;\n+\tunsigned int *flag\n+\t  = code == OPT_fsanitize_ ? &opts->x_flag_sanitize\n+\t  : &opts->x_flag_sanitize_recover;\n \twhile (*p != 0)\n \t  {\n \t    static const struct\n@@ -1584,32 +1599,35 @@ common_handle_option (struct gcc_options *opts,\n \t\t{\n \t\t  /* Handle both -fsanitize and -fno-sanitize cases.  */\n \t\t  if (value)\n-\t\t    flag_sanitize |= spec[i].flag;\n+\t\t    *flag |= spec[i].flag;\n \t\t  else\n-\t\t    flag_sanitize &= ~spec[i].flag;\n+\t\t    *flag &= ~spec[i].flag;\n \t\t  found = true;\n \t\t  break;\n \t\t}\n \n \t    if (! found)\n \t      error_at (loc,\n-\t\t\t\"unrecognized argument to -fsanitize= option: %q.*s\",\n-\t\t\t(int) len, p);\n+\t\t\t\"unrecognized argument to -fsanitize%s= option: %q.*s\",\n+\t\t\tcode == OPT_fsanitize_ ? \"\" : \"-recover\", (int) len, p);\n \n \t    if (comma == NULL)\n \t      break;\n \t    p = comma + 1;\n \t  }\n \n+\tif (code != OPT_fsanitize_)\n+\t  break;\n+\n \t/* When instrumenting the pointers, we don't want to remove\n \t   the null pointer checks.  */\n-\tif (flag_sanitize & (SANITIZE_NULL | SANITIZE_NONNULL_ATTRIBUTE\n-\t\t\t     | SANITIZE_RETURNS_NONNULL_ATTRIBUTE))\n+\tif (opts->x_flag_sanitize & (SANITIZE_NULL | SANITIZE_NONNULL_ATTRIBUTE\n+\t\t\t\t     | SANITIZE_RETURNS_NONNULL_ATTRIBUTE))\n \t  opts->x_flag_delete_null_pointer_checks = 0;\n \n \t/* Kernel ASan implies normal ASan but does not yet support\n \t   all features.  */\n-\tif (flag_sanitize & SANITIZE_KERNEL_ADDRESS)\n+\tif (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS)\n \t  {\n \t    maybe_set_param_value (PARAM_ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD, 0,\n \t\t\t\t   opts->x_param_values,\n@@ -1628,6 +1646,15 @@ common_handle_option (struct gcc_options *opts,\n \tbreak;\n       }\n \n+    case OPT_fsanitize_recover:\n+      if (value)\n+\topts->x_flag_sanitize_recover\n+\t  |= SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT;\n+      else\n+\topts->x_flag_sanitize_recover\n+\t  &= ~(SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT);\n+      break;\n+\n     case OPT_O:\n     case OPT_Os:\n     case OPT_Ofast:"}, {"sha": "49e2537d51de1de133ca6b309f7054a8781c3395", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,3 +1,40 @@\n+2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\t    Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* c-c++-common/ubsan/align-1.c: Update cmdline options.\n+\t* c-c++-common/ubsan/align-3.c: Likewise.\n+\t* c-c++-common/ubsan/bounds-1.c: Likewise.\n+\t* c-c++-common/ubsan/div-by-zero-7.c: Likewise.\n+\t* c-c++-common/ubsan/float-cast-overflow-10.c: Likewise.\n+\t* c-c++-common/ubsan/float-cast-overflow-7.c: Likewise.\n+\t* c-c++-common/ubsan/float-cast-overflow-8.c: Likewise.\n+\t* c-c++-common/ubsan/float-cast-overflow-9.c: Likewise.\n+\t* c-c++-common/ubsan/nonnull-2.c: Likewise.\n+\t* c-c++-common/ubsan/nonnull-3.c: Likewise.\n+\t* c-c++-common/ubsan/object-size-3.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-1.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-add-1.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-add-3.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-mul-1.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-mul-3.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-negate-2.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-sub-1.c: Likewise.\n+\t* c-c++-common/ubsan/pr59503.c: Likewise.\n+\t* c-c++-common/ubsan/pr60613-1.c: Likewise.\n+\t* c-c++-common/ubsan/save-expr-1.c: Likewise.\n+\t* c-c++-common/ubsan/shift-3.c: Likewise.\n+\t* c-c++-common/ubsan/shift-6.c: Likewise.\n+\t* c-c++-common/ubsan/undefined-1.c: Likewise.\n+\t* c-c++-common/ubsan/vla-2.c: Likewise.\n+\t* c-c++-common/ubsan/vla-3.c: Likewise.\n+\t* c-c++-common/ubsan/vla-4.c: Likewise.\n+\t* g++.dg/ubsan/cxx11-shift-1.C: Likewise.\n+\t* g++.dg/ubsan/return-2.C: Likewise.\n+\t* c-c++-common/ubsan/recovery-1.c: New test.\n+\t* c-c++-common/ubsan/recovery-2.c: New test.\n+\t* c-c++-common/ubsan/recovery-3.c: New test.\n+\t* c-c++-common/ubsan/recovery-common.inc: New file.\n+\n 2014-10-22  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/pic-constantpool1.c: Add explicit declaration."}, {"sha": "b2ccb30ec1a3ea1a22c066ae48ca1c0eee02a56a", "filename": "gcc/testsuite/c-c++-common/ubsan/align-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n \n struct S { int a; char b; long long c; short d[10]; };\n struct T { char a; long long b; };"}, {"sha": "bbacc4299c66ba393395e51a2d37b7f364c3db8d", "filename": "gcc/testsuite/c-c++-common/ubsan/align-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n \n int c;\n "}, {"sha": "20e390f13d5de0d4f6e82d0ffa67553956fdd348", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=bounds -fno-sanitize-recover -Wall\" } */\n+/* { dg-options \"-fsanitize=bounds -fno-sanitize-recover=bounds -Wall\" } */\n \n /* Don't fail on valid uses.  */\n "}, {"sha": "5f53bef74ea5f977852bfac2d47dadc5cda501c0", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -fno-sanitize-recover=integer-divide-by-zero\" } */\n /* { dg-shouldfail \"ubsan\" } */\n \n #include <stdio.h>"}, {"sha": "269a0ed7029fae43e64b0c8fe4435690e3827efd", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target dfp } } */\n /* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n-/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover\" } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover=float-cast-overflow\" } */\n /* { dg-additional-options \"-DUSE_INT128\" { target int128 } } */\n /* FIXME: When _DecimalXX <-> {signed, unsigned} __int128 conversions are\n    supported, -DBROKEN_DECIMAL_INT128 can be removed.  */"}, {"sha": "69d46284b5ecb82d77bef6ca5ad7f020c34385d1", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n-/* { dg-options \"-fsanitize=float-cast-overflow -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -fno-sanitize-recover=float-cast-overflow\" } */\n /* FIXME: When _DecimalXX <-> {signed, unsigned} __int128 conversions are\n    supported, -DBROKEN_DECIMAL_INT128 can be removed.  */\n /* { dg-additional-options \"-DUSE_DFP -DBROKEN_DECIMAL_INT128\" { target dfp } } */"}, {"sha": "5b1837d5a1046851fac1ab7cb5d0d1518cf7d9e2", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n-/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover -DUSE_FLT_DBL_LDBL\" } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -DUSE_FLT_DBL_LDBL\" } */\n /* { dg-additional-options \"-DUSE_INT128\" { target int128 } } */\n \n #include \"float-cast-overflow-7.h\""}, {"sha": "05399e74022b68fdca6a0efcbc32201c6b09fbcd", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n /* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n-/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover -DUSE_FLOAT80 -DUSE_FLOAT128\" } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover=float-cast-overflow -DUSE_FLOAT80 -DUSE_FLOAT128\" } */\n /* { dg-additional-options \"-DUSE_INT128\" { target int128 } } */\n \n #include \"float-cast-overflow-8.c\""}, {"sha": "3eb6ae71becdebd0ac5cb3489c27d609a1891a62", "filename": "gcc/testsuite/c-c++-common/ubsan/nonnull-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-2.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-shouldfail \"ubsan\" } */\n-/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n \n int q, r;\n void *a, *b, *c = (void *) &q, *d, *e, *f = (void *) &q, *g, *h;"}, {"sha": "67fd6dde2e4185fcbfde64ba35dd78815f837f77", "filename": "gcc/testsuite/c-c++-common/ubsan/nonnull-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-shouldfail \"ubsan\" } */\n-/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n \n int q, r;\n void *a, *b, *c = (void *) &q, *d, *e, *f = (void *) &q, *g, *h;"}, {"sha": "a88081c02a99e3501b2e18e0ee995ef4ca22dc20", "filename": "gcc/testsuite/c-c++-common/ubsan/object-size-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n-/* { dg-options \"-fsanitize=object-size -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=object-size -fno-sanitize-recover=object-size\" } */\n \n /* Test valid uses.  */\n "}, {"sha": "22bacb3cf2f71267596ca877a7be65b818bbf35b", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover=signed-integer-overflow\" } */\n \n #ifndef ASM1\n # define ASM1(a) /* Nothing */"}, {"sha": "960f1b0afaf98eaa75acfca87de410c094b99c45", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-add-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow\" } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SHRT_MAX __SHRT_MAX__"}, {"sha": "f4062768369cbd14ab6719714b16611cdba1942a", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-add-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow\" } */\n /* { dg-shouldfail \"ubsan\" } */\n \n #define INT_MAX __INT_MAX__"}, {"sha": "04a9ec7c27d273dad6cad236e876901a6b22de37", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-mul-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow\" } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SHRT_MAX __SHRT_MAX__"}, {"sha": "9bca1f8f5b9e5794fe1810413d1c47a412be029e", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-mul-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover=signed-integer-overflow\" } */\n \n __attribute__((noinline, noclone)) long long\n mul (long long x, long long y)"}, {"sha": "db54b27aa3f76b724dacc5b86255240897a5cc3f", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-negate-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow\" } */\n \n #define SCHAR_MIN (-__SCHAR_MAX__ - 1)\n #define SHRT_MIN (-__SHRT_MAX__ - 1)"}, {"sha": "e92aaf4ce33c4e5f98a45ed4088b5829a44aabff", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-sub-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover=signed-integer-overflow\" } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SCHAR_MIN (-__SCHAR_MAX__ - 1)"}, {"sha": "36356d532c8ebb56be865b52412513f7215fd516", "filename": "gcc/testsuite/c-c++-common/ubsan/pr59503.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59503.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59503.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59503.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover=signed-integer-overflow\" } */\n \n int\n main (void)"}, {"sha": "f358e19da9b1d4d419d6565c9d6dac96714b1723", "filename": "gcc/testsuite/c-c++-common/ubsan/pr60613-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* PR sanitizer/60613 */\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n \n long long y;\n "}, {"sha": "8043a5cbb6e280bc7a84ca2b39ce64488f02ff71", "filename": "gcc/testsuite/c-c++-common/ubsan/recovery-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined -fsanitize-recover=signed-integer-overflow -w\" } */\n+\n+#include \"recovery-common.inc\"\n+\n+/* { dg-output \"shift exponent 152 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 153 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 2147483647 \\\\+ 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 2147483647 \\\\+ 2 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "ad5e410d9f1126b4ef03b703323944427eebac2a", "filename": "gcc/testsuite/c-c++-common/ubsan/recovery-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-2.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=signed-integer-overflow -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+#include \"recovery-common.inc\"\n+\n+/* { dg-output \"shift exponent 152 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 153 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 2147483647 \\\\+ 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*(?!.*signed integer overflow)\" } */"}, {"sha": "02f22724999b0c5823c974f9e3976d72095c0c2c", "filename": "gcc/testsuite/c-c++-common/ubsan/recovery-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined -w\" } */\n+\n+#include \"recovery-common.inc\"\n+\n+/* { dg-output \"shift exponent 152 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 153 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 2147483647 \\\\+ 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 2147483647 \\\\+ 2 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "1e0667adba4755f4b4284c9c131cee332293dbaa", "filename": "gcc/testsuite/c-c++-common/ubsan/recovery-common.inc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-common.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-common.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Frecovery-common.inc?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -0,0 +1,19 @@\n+typedef const unsigned long long int CULLI;\n+typedef volatile int VI;\n+struct s { signed long int a; };\n+\n+int\n+main (void)\n+{\n+  volatile int shiftcount = 153;\n+  volatile int a = __INT_MAX__;\n+  volatile int b = __INT_MAX__;\n+\n+  a << 152;\n+  b << shiftcount;\n+  a += 1;\n+  b += 2;\n+\n+  return 0;\n+}\n+"}, {"sha": "ff6c5cff0b15dda4d856e8efa5e4af122603de17", "filename": "gcc/testsuite/c-c++-common/ubsan/save-expr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsave-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsave-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsave-expr-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fsanitize=shift -Wall -Werror -O -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=shift -Wall -Werror -O -fno-sanitize-recover=shift\" } */\n \n static int x;\n int"}, {"sha": "d57d73e62e8b63935f4efadb3f2b7d0bc838e6c7", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover=shift\" } */\n \n int\n main (void)"}, {"sha": "d596459b3eaf0c162e2f9579481b0870cb2587f2", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,6 +1,6 @@\n /* PR sanitizer/58413 */\n /* { dg-do run { target int32plus } } */\n-/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover=shift\" } */\n \n int x = 7;\n int"}, {"sha": "b67b013282268d783d074757addb82bf9b312ea6", "filename": "gcc/testsuite/c-c++-common/ubsan/undefined-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fundefined-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fundefined-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fundefined-1.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n \n int\n foo (int x, int y)"}, {"sha": "9cd4ddff2196bba3ead0f746824c21a3f9f93b0b", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable -fno-sanitize-recover=vla-bound\" } */\n \n int\n main (void)"}, {"sha": "6003fdddf3a227b1b567f5b71806cae159d913a4", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=vla-bound -fno-sanitize-recover=vla-bound\" } */\n \n /* Don't instrument the arrays here.  */\n int"}, {"sha": "c9060177606e949f9e486a5bd6927e0f377fbeb9", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound -fno-sanitize-recover\" } */\n+/* { dg-options \"-fsanitize=vla-bound -fno-sanitize-recover=vla-bound\" } */\n \n int\n main (void)"}, {"sha": "431eab12d3e414e55df3225f7925b72b92b6486c", "filename": "gcc/testsuite/g++.dg/ubsan/cxx11-shift-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover -std=c++11\" } */\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover=shift -std=c++11\" } */\n \n int\n main (void)"}, {"sha": "90c48b5b1d564cb9b8122f36ac3632f48798279d", "filename": "gcc/testsuite/g++.dg/ubsan/return-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-fsanitize=return -fno-sanitize-recover\" }\n+// { dg-options \"-fsanitize=return -fno-sanitize-recover=return\" }\n \n struct S { S (); ~S (); };\n "}, {"sha": "f143fcef6bf0e34d645b50fbd68d5cc66bcfeca2", "filename": "gcc/ubsan.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95a2703476dcbacd128577bb0c41b74588132b1/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=d95a2703476dcbacd128577bb0c41b74588132b1", "patch": "@@ -638,7 +638,7 @@ ubsan_expand_bounds_ifn (gimple_stmt_iterator *gsi)\n \t\t\t     NULL_TREE, NULL_TREE);\n       data = build_fold_addr_expr_loc (loc, data);\n       enum built_in_function bcode\n-\t= flag_sanitize_recover\n+\t= (flag_sanitize_recover & SANITIZE_BOUNDS)\n \t  ? BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS\n \t  : BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT;\n       tree fn = builtin_decl_explicit (bcode);\n@@ -741,7 +741,8 @@ ubsan_expand_null_ifn (gimple_stmt_iterator *gsip)\n   else\n     {\n       enum built_in_function bcode\n-\t= flag_sanitize_recover\n+\t= (flag_sanitize_recover & ((check_align ? SANITIZE_ALIGNMENT : 0)\n+\t\t\t\t    | (check_null ? SANITIZE_NULL : 0)))\n \t  ? BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH\n \t  : BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_ABORT;\n       tree fn = builtin_decl_implicit (bcode);\n@@ -879,7 +880,7 @@ ubsan_expand_objsize_ifn (gimple_stmt_iterator *gsi)\n \t\t\t\t NULL_TREE);\n \t  data = build_fold_addr_expr_loc (loc, data);\n \t  enum built_in_function bcode\n-\t    = flag_sanitize_recover\n+\t    = (flag_sanitize_recover & SANITIZE_OBJECT_SIZE)\n \t      ? BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH\n \t      : BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_ABORT;\n \t  tree p = make_ssa_name (pointer_sized_int_node, NULL);\n@@ -964,22 +965,22 @@ ubsan_build_overflow_builtin (tree_code code, location_t loc, tree lhstype,\n   switch (code)\n     {\n     case PLUS_EXPR:\n-      fn_code = flag_sanitize_recover\n+      fn_code = (flag_sanitize_recover & SANITIZE_SI_OVERFLOW)\n \t\t? BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW\n \t\t: BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT;\n       break;\n     case MINUS_EXPR:\n-      fn_code = flag_sanitize_recover\n+      fn_code = (flag_sanitize_recover & SANITIZE_SI_OVERFLOW)\n \t\t? BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW\n \t\t: BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT;\n       break;\n     case MULT_EXPR:\n-      fn_code = flag_sanitize_recover\n+      fn_code = (flag_sanitize_recover & SANITIZE_SI_OVERFLOW)\n \t\t? BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW\n \t\t: BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT;\n       break;\n     case NEGATE_EXPR:\n-      fn_code = flag_sanitize_recover\n+      fn_code = (flag_sanitize_recover & SANITIZE_SI_OVERFLOW)\n \t\t? BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW\n \t\t: BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT;\n       break;\n@@ -1156,7 +1157,8 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n \t\t\t\t     NULL_TREE);\n       data = build_fold_addr_expr_loc (loc, data);\n       enum built_in_function bcode\n-\t= flag_sanitize_recover\n+\t= (flag_sanitize_recover & (TREE_CODE (type) == BOOLEAN_TYPE\n+\t\t\t\t    ? SANITIZE_BOOL : SANITIZE_ENUM))\n \t  ? BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE\n \t  : BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT;\n       tree fn = builtin_decl_explicit (bcode);\n@@ -1278,7 +1280,7 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n \t\t\t\t     ubsan_type_descriptor (type), NULL_TREE,\n \t\t\t\t     NULL_TREE);\n       enum built_in_function bcode\n-\t= flag_sanitize_recover\n+\t= (flag_sanitize_recover & SANITIZE_FLOAT_CAST)\n \t  ? BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW\n \t  : BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT;\n       fn = builtin_decl_explicit (bcode);\n@@ -1344,7 +1346,7 @@ instrument_nonnull_arg (gimple_stmt_iterator *gsi)\n \t\t\t\t\t     NULL_TREE);\n \t      data = build_fold_addr_expr_loc (loc[0], data);\n \t      enum built_in_function bcode\n-\t\t= flag_sanitize_recover\n+\t\t= (flag_sanitize_recover & SANITIZE_NONNULL_ATTRIBUTE)\n \t\t  ? BUILT_IN_UBSAN_HANDLE_NONNULL_ARG\n \t\t  : BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT;\n \t      tree fn = builtin_decl_explicit (bcode);\n@@ -1396,7 +1398,7 @@ instrument_nonnull_return (gimple_stmt_iterator *gsi)\n \t\t\t\t\t 2, loc, NULL_TREE, NULL_TREE);\n \t  data = build_fold_addr_expr_loc (loc[0], data);\n \t  enum built_in_function bcode\n-\t    = flag_sanitize_recover\n+\t    = (flag_sanitize_recover & SANITIZE_RETURNS_NONNULL_ATTRIBUTE)\n \t      ? BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN\n \t      : BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_ABORT;\n \t  tree fn = builtin_decl_explicit (bcode);"}]}