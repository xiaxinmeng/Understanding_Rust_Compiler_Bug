{"sha": "937ec71aba5b3c633bd5979d6346254e83f46d1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM3ZWM3MWFiYTViM2M2MzNiZDU5NzlkNjM0NjI1NGU4M2Y0NmQxYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-06T21:22:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-06T21:22:35Z"}, "message": "Make std::scoped_allocator_adaptor's OUTERMOST recursive\n\n\t* doc/xml/manual/status_cxx2011.xml: Update status.\n\t* include/std/scoped_allocator (__outer_allocator_t, __outermost_type):\n\tNew helpers for recursive OUTERMOST.\n\t(__outermost): Use __outermost_type::_S_outermost.\n\t(__do_outermost, scoped_allocator_adaptor::__outermost_type): Remove.\n\t(scoped_allocator_adaptor::__outermost_alloc_traits): Use new\n\t__outermost_type helper.\n\t* testsuite/20_util/scoped_allocator/outermost.cc: New test.\n\nFrom-SVN: r240844", "tree": {"sha": "9ab09f7a0d1d9503b161ec0df9c7a9604f664baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab09f7a0d1d9503b161ec0df9c7a9604f664baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/937ec71aba5b3c633bd5979d6346254e83f46d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937ec71aba5b3c633bd5979d6346254e83f46d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937ec71aba5b3c633bd5979d6346254e83f46d1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937ec71aba5b3c633bd5979d6346254e83f46d1c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342cfb3e736afcc7397b4199a4c96fb602f5d68b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342cfb3e736afcc7397b4199a4c96fb602f5d68b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342cfb3e736afcc7397b4199a4c96fb602f5d68b"}], "stats": {"total": 229, "additions": 208, "deletions": 21}, "files": [{"sha": "d9fa88af6e9e07d7f6d01a02ce279c5befb8eb8e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=937ec71aba5b3c633bd5979d6346254e83f46d1c", "patch": "@@ -1,3 +1,18 @@\n+2016-10-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2011.xml: Update status.\n+\t* include/std/scoped_allocator (__outer_allocator_t, __outermost_type):\n+\tNew helpers for recursive OUTERMOST.\n+\t(__outermost): Use __outermost_type::_S_outermost.\n+\t(__do_outermost, scoped_allocator_adaptor::__outermost_type): Remove.\n+\t(scoped_allocator_adaptor::__outermost_alloc_traits): Use new\n+\t__outermost_type helper.\n+\t(scoped_allocator_adaptor::_Constructible): New alias template.\n+\t(scoped_allocator_adaptor::scoped_allocator_adaptor<_Outer2>):\n+\tConstrain template constructors.\n+\t* testsuite/20_util/scoped_allocator/3.cc: New test.\n+\t* testsuite/20_util/scoped_allocator/outermost.cc: New test.\n+\n 2016-10-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/70564"}, {"sha": "e1b372d643fb2abe7416b044501596c045f06df2", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=937ec71aba5b3c633bd5979d6346254e83f46d1c", "patch": "@@ -1007,11 +1007,10 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>20.12.4</entry>\n       <entry>Scoped allocator adaptor members</entry>\n-      <entry>Partial</entry>\n-      <entry>OUTERMOST is not recursive.</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <entry>20.12.5</entry>"}, {"sha": "39762fe444d4f8c46b2db5f1da493b5b29e5e6c6", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=937ec71aba5b3c633bd5979d6346254e83f46d1c", "patch": "@@ -49,21 +49,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n \n   template<typename _Alloc>\n-    inline auto\n-    __do_outermost(_Alloc& __a, int) -> decltype(__a.outer_allocator())\n-    { return __a.outer_allocator(); }\n+    using __outer_allocator_t\n+      = decltype(std::declval<_Alloc>().outer_allocator());\n+\n+  template<typename _Alloc, typename = void>\n+    struct __outermost_type\n+    {\n+      using type = _Alloc;\n+      static type& _S_outermost(_Alloc& __a) { return __a; }\n+    };\n \n   template<typename _Alloc>\n-    inline _Alloc&\n-    __do_outermost(_Alloc& __a, ...)\n-    { return __a; }\n+    struct __outermost_type<_Alloc, __void_t<__outer_allocator_t<_Alloc>>>\n+    : __outermost_type<\n+      typename remove_reference<__outer_allocator_t<_Alloc>>::type\n+    >\n+    {\n+      using __base = __outermost_type<\n+        typename remove_reference<__outer_allocator_t<_Alloc>>::type\n+      >;\n+\n+      static typename __base::type&\n+      _S_outermost(_Alloc& __a)\n+      { return __base::_S_outermost(__a.outer_allocator()); }\n+    };\n \n-  // TODO: make recursive (see note in 20.12.4/1)\n   template<typename _Alloc>\n-    inline auto\n+    inline typename __outermost_type<_Alloc>::type&\n     __outermost(_Alloc& __a)\n-    -> decltype(__do_outermost(__a, 0))\n-    { return __do_outermost(__a, 0); }\n+    { return __outermost_type<_Alloc>::_S_outermost(__a); }\n \n   template<typename _OuterAlloc, typename... _InnerAllocs>\n     class scoped_allocator_adaptor;\n@@ -169,13 +183,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_tie() const noexcept\n       { return std::tuple_cat(std::tie(outer_allocator()), _M_inner._M_tie()); }\n \n-      template<typename _Alloc>\n-\tusing __outermost_type = typename\n-\t  std::decay<decltype(__outermost(std::declval<_Alloc&>()))>::type;\n-\n       template<typename _Alloc>\n \tusing __outermost_alloc_traits\n-\t  = allocator_traits<__outermost_type<_Alloc>>;\n+\t  = allocator_traits<typename __outermost_type<_Alloc>::type>;\n \n       template<typename _Tp, typename... _Args>\n         void\n@@ -225,6 +235,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           _M_inner(_S_select_on_copy(std::get<_Indices+1>(__refs))...)\n         { }\n \n+      // Used to constrain constructors to disallow invalid conversions.\n+      template<typename _Alloc>\n+        using _Constructible = typename enable_if<\n+            is_constructible<_OuterAlloc, _Alloc>::value\n+          >::type;\n+\n     public:\n       typedef _OuterAlloc                       outer_allocator_type;\n       typedef typename __inner_type::__type     inner_allocator_type;\n@@ -270,7 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       scoped_allocator_adaptor() : _OuterAlloc(), _M_inner() { }\n \n-      template<typename _Outer2>\n+      template<typename _Outer2, typename = _Constructible<_Outer2>>\n         scoped_allocator_adaptor(_Outer2&& __outer,\n                                  const _InnerAllocs&... __inner)\n         : _OuterAlloc(std::forward<_Outer2>(__outer)),\n@@ -287,14 +303,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_inner(std::move(__other._M_inner))\n       { }\n \n-      template<typename _Outer2>\n+      template<typename _Outer2, typename = _Constructible<const _Outer2&>>\n         scoped_allocator_adaptor(\n             const scoped_allocator_adaptor<_Outer2, _InnerAllocs...>& __other)\n         : _OuterAlloc(__other.outer_allocator()),\n           _M_inner(__other._M_inner)\n         { }\n \n-      template<typename _Outer2>\n+      template<typename _Outer2, typename = _Constructible<_Outer2>>\n         scoped_allocator_adaptor(\n             scoped_allocator_adaptor<_Outer2, _InnerAllocs...>&& __other)\n         : _OuterAlloc(std::move(__other.outer_allocator())),"}, {"sha": "246122048d883271f4f71db36a18f28ec0af9b43", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/3.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F3.cc?ref=937ec71aba5b3c633bd5979d6346254e83f46d1c", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <scoped_allocator>\n+#include <testsuite_allocator.h>\n+\n+template<typename T>\n+struct alloc\n+{\n+  using value_type = T;\n+  alloc() = default;\n+  template<typename U>\n+    alloc(alloc<U>) { }\n+  T* allocate(std::size_t);\n+  void deallocate(T*, std::size_t);\n+};\n+\n+template<typename T, typename U>\n+  bool operator==(alloc<T>, alloc<U>) { return true; }\n+\n+template<typename T, typename U>\n+  bool operator!=(alloc<T>, alloc<U>) { return false; }\n+\n+using scoped = std::scoped_allocator_adaptor<alloc<int>>;\n+using other_alloc = __gnu_test::SimpleAllocator<int>;\n+using other_scoped = std::scoped_allocator_adaptor<other_alloc>;\n+\n+using std::is_constructible;\n+\n+static_assert( is_constructible<scoped, const scoped&>::value,\n+    \"is_constructible<scoped, const scoped&>\");\n+static_assert( is_constructible<scoped, scoped>::value,\n+    \"is_constructible<scoped, scoped>\");\n+static_assert( is_constructible<scoped, const alloc<int>&>::value,\n+    \"is_constructible<scoped, const outer_allocator_type&>\");\n+static_assert( is_constructible<scoped, alloc<int>>::value,\n+    \"is_constructible<scoped, outer_allocator_type>\");\n+static_assert( is_constructible<scoped, const alloc<long>&>::value,\n+    \"is_constructible<scoped, const outer_allocator_type::rebind<U>::type&>\");\n+static_assert( is_constructible<scoped, alloc<long>>::value,\n+    \"is_constructible<scoped, outer_allocator_type::rebind<U>::type>\");\n+\n+static_assert( !is_constructible<scoped, const other_alloc&>::value,\n+    \"!is_constructible<scoped, const other_alloc&>\");\n+static_assert( !is_constructible<scoped, other_alloc>::value,\n+    \"!is_constructible<scoped, other_alloc>\");\n+static_assert( !is_constructible<scoped, const other_scoped&>::value,\n+    \"!is_constructible<scoped, const other_scoped&>\");\n+static_assert( !is_constructible<scoped, other_scoped>::value,\n+    \"!is_constructible<scoped, other_scoped>\");"}, {"sha": "af313484def718d6c7ebd20bf4c0fc03ae5c44f1", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/outermost.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Foutermost.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/937ec71aba5b3c633bd5979d6346254e83f46d1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Foutermost.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Foutermost.cc?ref=937ec71aba5b3c633bd5979d6346254e83f46d1c", "patch": "@@ -0,0 +1,91 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <scoped_allocator>\n+\n+template<typename T>\n+struct alloc\n+{\n+  using value_type = T;\n+  alloc() = default;\n+  template<typename U>\n+    alloc(alloc<U>) { }\n+  T* allocate(std::size_t);\n+  void deallocate(T*, std::size_t);\n+};\n+\n+template<typename T, typename U>\n+  bool operator==(alloc<T>, alloc<U>) { return true; }\n+\n+template<typename T, typename U>\n+  bool operator!=(alloc<T>, alloc<U>) { return false; }\n+\n+struct X\n+{\n+  using allocator_type = alloc<int>;\n+  X(const allocator_type&);\n+};\n+\n+template<typename A>\n+struct nested_alloc : A\n+{\n+  nested_alloc() = default;\n+  template<typename U>\n+    nested_alloc(nested_alloc<U>) { }\n+\n+  A& outer_allocator() { return *this; }\n+\n+  template<typename U, typename... Args>\n+    void construct(U*, Args&&...)\n+    {\n+      static_assert(!std::is_same<U, X>::value,\n+          \"OUTERMOST should recurse and use alloc<int> to construct X\");\n+    }\n+};\n+\n+template<typename T, typename U>\n+  bool operator==(nested_alloc<T> l, nested_alloc<U> r)\n+  { return l.outer_allocator() == r.outer_allocator(); }\n+\n+template<typename T, typename U>\n+  bool operator!=(nested_alloc<T> l, nested_alloc<U> r)\n+  { return !(l == r); }\n+\n+template<typename A>\n+  using scoped_alloc = std::scoped_allocator_adaptor<A>;\n+\n+void\n+test01()\n+{\n+  scoped_alloc<nested_alloc<alloc<int>>> a;\n+  alignas(X) char buf[sizeof(X)];\n+  X* p = (X*)buf;\n+  // Test that OUTERMOST is recursive and doesn't just unwrap one level:\n+  a.construct(p);\n+}\n+\n+void\n+test02()\n+{\n+  scoped_alloc<scoped_alloc<nested_alloc<alloc<int>>>> a;\n+  alignas(X) char buf[sizeof(X)];\n+  X* p = (X*)buf;\n+  // Test that OUTERMOST is recursive and doesn't just unwrap one level:\n+  a.construct(p);\n+}"}]}