{"sha": "0c6ce8b02716646c4ecf998a96c40621a5cba15e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2Y2U4YjAyNzE2NjQ2YzRlY2Y5OThhOTZjNDA2MjFhNWNiYTE1ZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-08T15:14:33Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-08T15:14:33Z"}, "message": "re PR fortran/34476 (Parameters: Bogus out of bounds error in array constructor)\n\n2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34476\n\t* expr.c (find_array_element): Check that the array bounds are\n\tconstant before using them.  Use lower, as well as upper bound.\n\t(check_restricted): Allow implied index variable.\n\n2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34476\n\t* gfortran.dg/parameter_array_init_3.f90: New test.\n\nFrom-SVN: r131396", "tree": {"sha": "428f9813996262ab2e07f6030752e8726adc9784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/428f9813996262ab2e07f6030752e8726adc9784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6ce8b02716646c4ecf998a96c40621a5cba15e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6ce8b02716646c4ecf998a96c40621a5cba15e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6ce8b02716646c4ecf998a96c40621a5cba15e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6ce8b02716646c4ecf998a96c40621a5cba15e/comments", "author": null, "committer": null, "parents": [{"sha": "3672065a1dc197ed785e6b1ffae1449621c5e3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3672065a1dc197ed785e6b1ffae1449621c5e3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3672065a1dc197ed785e6b1ffae1449621c5e3d2"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "40c98afa2c3418db514ee365cea36e1532d4233d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0c6ce8b02716646c4ecf998a96c40621a5cba15e", "patch": "@@ -1,3 +1,10 @@\n+2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34476\n+\t* expr.c (find_array_element): Check that the array bounds are\n+\tconstant before using them.  Use lower, as well as upper bound.\n+\t(check_restricted): Allow implied index variable.\n+\n 2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34681"}, {"sha": "e8b65483e76c8dc953023a312c0a141f7338263b", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=0c6ce8b02716646c4ecf998a96c40621a5cba15e", "patch": "@@ -1024,14 +1024,17 @@ find_array_element (gfc_constructor *cons, gfc_array_ref *ar,\n \t  cons = NULL;\n \t  goto depart;\n \t}\n-\n-      /* Check the bounds.  */\n-      if (ar->as->upper[i]\n-\t  && (mpz_cmp (e->value.integer, ar->as->upper[i]->value.integer) > 0\n-\t      || mpz_cmp (e->value.integer,\n-\t\t\t  ar->as->lower[i]->value.integer) < 0))\n+        /* Check the bounds.  */\n+      if ((ar->as->upper[i]\n+\t     && ar->as->upper[i]->expr_type == EXPR_CONSTANT\n+\t     && mpz_cmp (e->value.integer,\n+\t\t\t ar->as->upper[i]->value.integer) > 0)\n+\t\t||\n+\t  (ar->as->lower[i]->expr_type == EXPR_CONSTANT\n+\t     && mpz_cmp (e->value.integer,\n+\t\t\t ar->as->lower[i]->value.integer) < 0))\n \t{\n-\t  gfc_error (\"index in dimension %d is out of bounds \"\n+\t  gfc_error (\"Index in dimension %d is out of bounds \"\n \t\t     \"at %L\", i + 1, &ar->c_where[i]);\n \t  cons = NULL;\n \t  t = FAILURE;\n@@ -2496,6 +2499,7 @@ check_restricted (gfc_expr *e)\n       if (sym->attr.in_common\n \t  || sym->attr.use_assoc\n \t  || sym->attr.dummy\n+\t  || sym->attr.implied_index\n \t  || sym->ns != gfc_current_ns\n \t  || (sym->ns->proc_name != NULL\n \t      && sym->ns->proc_name->attr.flavor == FL_MODULE)"}, {"sha": "01389c9fa12ec53e9ab380f8048d0b5e34116ed3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c6ce8b02716646c4ecf998a96c40621a5cba15e", "patch": "@@ -1,3 +1,8 @@\n+2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34476\n+\t* gfortran.dg/parameter_array_init_3.f90: New test.\n+\n 2008-01-08  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34681"}, {"sha": "e39da8e8063a3d0863aa0ec59dc63a9f279dda2a", "filename": "gcc/testsuite/gfortran.dg/parameter_array_init_3.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6ce8b02716646c4ecf998a96c40621a5cba15e/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_3.f90?ref=0c6ce8b02716646c4ecf998a96c40621a5cba15e", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! Test the fix for PR34476 in which an 'out of bounds' error would be\n+! generated for the array initializations AND the implicit index 'i'\n+! would be rejected.\n+!\n+! Reported by Tobias Burnus <burnus@gcc.gnu.org> following a thread\n+! on comp.lang.fortran (see PR)\n+!\n+module abuse_mod\n+   implicit none\n+   integer i\n+   character(8), parameter :: HEX1 = '40490FDB'\n+   integer(1), parameter :: MSKa1(len(HEX1)) =  [(1,i=1,len(HEX1))]\n+   integer(1), parameter :: ARR1(len(HEX1)) = [( MSKa1(i), i=1,len(HEX1) )]\n+end module abuse_mod\n+! { dg-final { cleanup-modules \"abuse_mod\" } }"}]}