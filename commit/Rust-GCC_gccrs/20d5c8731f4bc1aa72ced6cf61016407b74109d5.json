{"sha": "20d5c8731f4bc1aa72ced6cf61016407b74109d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkNWM4NzMxZjRiYzFhYTcyY2VkNmNmNjEwMTY0MDdiNzQxMDlkNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-12T17:51:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-12T17:51:52Z"}, "message": "compiler: avoid orphaning Bexpressions when processing conversions\n    \n    The method Type_conversion_expression::do_get_backend was (in some\n    circumstances) creating a Bexpression for the source expression of the\n    conversion and then throwing it away before using it. Fix up this\n    method to insure that the call to get_backend() on the source\n    expression is only made when the result will be used.\n    \n    Reviewed-on: https://go-review.googlesource.com/45350\n\nFrom-SVN: r249131", "tree": {"sha": "65218f1f3dbd2484a4cafa7fafda0b3ed2155fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65218f1f3dbd2484a4cafa7fafda0b3ed2155fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20d5c8731f4bc1aa72ced6cf61016407b74109d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d5c8731f4bc1aa72ced6cf61016407b74109d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d5c8731f4bc1aa72ced6cf61016407b74109d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d5c8731f4bc1aa72ced6cf61016407b74109d5/comments", "author": null, "committer": null, "parents": [{"sha": "754d67d5ba4a1f9994210d402893a4cf49ce6a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754d67d5ba4a1f9994210d402893a4cf49ce6a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754d67d5ba4a1f9994210d402893a4cf49ce6a71"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "aebab77b1d3977ff75c2f5dd09a0b4b216742aba", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d5c8731f4bc1aa72ced6cf61016407b74109d5/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d5c8731f4bc1aa72ced6cf61016407b74109d5/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=20d5c8731f4bc1aa72ced6cf61016407b74109d5", "patch": "@@ -1,4 +1,4 @@\n-d4875b19266d5f726e0e32843b903075f5c50b4c\n+61222d34c1b33a369bd86008a0541455dd17727e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "5eec731733fbd0dce2a97d8c7f82d27cacbc3fea", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d5c8731f4bc1aa72ced6cf61016407b74109d5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d5c8731f4bc1aa72ced6cf61016407b74109d5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=20d5c8731f4bc1aa72ced6cf61016407b74109d5", "patch": "@@ -3410,11 +3410,13 @@ Type_conversion_expression::do_get_backend(Translate_context* context)\n \n   Gogo* gogo = context->gogo();\n   Btype* btype = type->get_backend(gogo);\n-  Bexpression* bexpr = this->expr_->get_backend(context);\n   Location loc = this->location();\n \n   if (Type::are_identical(type, expr_type, false, NULL))\n-    return gogo->backend()->convert_expression(btype, bexpr, loc);\n+    {\n+      Bexpression* bexpr = this->expr_->get_backend(context);\n+      return gogo->backend()->convert_expression(btype, bexpr, loc);\n+    }\n   else if (type->interface_type() != NULL\n \t   || expr_type->interface_type() != NULL)\n     {\n@@ -3483,6 +3485,7 @@ Type_conversion_expression::do_get_backend(Translate_context* context)\n   else if (type->is_numeric_type())\n     {\n       go_assert(Type::are_convertible(type, expr_type, NULL));\n+      Bexpression* bexpr = this->expr_->get_backend(context);\n       return gogo->backend()->convert_expression(btype, bexpr, loc);\n     }\n   else if ((type->is_unsafe_pointer_type()\n@@ -3493,7 +3496,10 @@ Type_conversion_expression::do_get_backend(Translate_context* context)\n            || (this->may_convert_function_types_\n                && type->function_type() != NULL\n                && expr_type->function_type() != NULL))\n-    return gogo->backend()->convert_expression(btype, bexpr, loc);\n+    {\n+      Bexpression* bexpr = this->expr_->get_backend(context);\n+      return gogo->backend()->convert_expression(btype, bexpr, loc);\n+    }\n   else\n     {\n       Expression* conversion ="}]}