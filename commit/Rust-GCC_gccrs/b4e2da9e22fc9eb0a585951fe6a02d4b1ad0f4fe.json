{"sha": "b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMmRhOWUyMmZjOWViMGE1ODU5NTFmZTZhMDJkNGIxYWQwZjRmZQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-09-21T18:01:01Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-09-21T18:01:01Z"}, "message": "rs6000.md (iorxor): New code_iterator.\n\n2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000.md (iorxor): New code_iterator.\n\t(iorxor): New code_attr.\n\t(IORXOR): New code_attr.\n\t(*and<mode>3, *and<mode>3_dot, *and<mode>3_dot2): Delete.\n\t(ior<mode>3, xor<mode>3): Delete.\n\t(<iorxor><mode>3): New.\n\t(splitter for \"big\" integer ior, xor): New.\n\t(*bool<mode>3): Move.  Also handle AND.\n\t(*bool<mode>3_dot, *bool<mode>3_dot2): Also handle AND.\n\t(splitter for \"big\" integer ior, xor): Delete.\n\nFrom-SVN: r215433", "tree": {"sha": "f165d53bd0f95fb3d2c1d5c383a14873ef5e6e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f165d53bd0f95fb3d2c1d5c383a14873ef5e6e24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f0a3313526d7aababacc3aa920a6571a6980184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0a3313526d7aababacc3aa920a6571a6980184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0a3313526d7aababacc3aa920a6571a6980184"}], "stats": {"total": 171, "additions": 54, "deletions": 117}, "files": [{"sha": "af1ebbc64a0d968b531f9a3166b84118d0fbef16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "patch": "@@ -1,3 +1,16 @@\n+2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (iorxor): New code_iterator.\n+\t(iorxor): New code_attr.\n+\t(IORXOR): New code_attr.\n+\t(*and<mode>3, *and<mode>3_dot, *and<mode>3_dot2): Delete.\n+\t(ior<mode>3, xor<mode>3): Delete.\n+\t(<iorxor><mode>3): New.\n+\t(splitter for \"big\" integer ior, xor): New.\n+\t(*bool<mode>3): Move.  Also handle AND.\n+\t(*bool<mode>3_dot, *bool<mode>3_dot2): Also handle AND.\n+\t(splitter for \"big\" integer ior, xor): Delete.\n+\n 2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (*neg<mode>2_internal): Delete."}, {"sha": "b2f5c55534fa8b8d18ddd276876c8b055a8a419d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 41, "deletions": 117, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b4e2da9e22fc9eb0a585951fe6a02d4b1ad0f4fe", "patch": "@@ -438,6 +438,11 @@\n \t\t\t       (simple_return \"1\")])\n (define_code_attr return_str [(return \"\") (simple_return \"simple_\")])\n \n+; Logical operators.\n+(define_code_iterator iorxor [ior xor])\n+(define_code_attr iorxor [(ior \"ior\") (xor \"xor\")])\n+(define_code_attr IORXOR [(ior \"IOR\") (xor \"XOR\")])\n+\n ; Signed/unsigned variants of ops.\n (define_code_iterator any_extend [sign_extend zero_extend])\n (define_code_attr u [(sign_extend \"\") (zero_extend \"u\")])\n@@ -2640,61 +2645,6 @@\n })\n \n \n-(define_insn \"*and<mode>3\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n-\t(and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n-\t\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n-  \"\"\n-  \"and %0,%1,%2\"\n-  [(set_attr \"type\" \"logical\")])\n-\n-(define_insn_and_split \"*and<mode>3_dot\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t     (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n-  \"@\n-   and. %0,%1,%2\n-   #\"\n-  \"&& reload_completed && cc_reg_not_cr0_operand (operands[3], CCmode)\"\n-  [(set (match_dup 0)\n-\t(and:GPR (match_dup 1)\n-\t\t (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\"\n-  [(set_attr \"type\" \"logical\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn_and_split \"*and<mode>3_dot2\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t     (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(and:GPR (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n-  \"@\n-   and. %0,%1,%2\n-   #\"\n-  \"&& reload_completed && cc_reg_not_cr0_operand (operands[3], CCmode)\"\n-  [(set (match_dup 0)\n-\t(and:GPR (match_dup 1)\n-\t\t (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\"\n-  [(set_attr \"type\" \"logical\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-\n (define_insn \"and<mode>3_imm\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"%r\")\n@@ -2913,15 +2863,15 @@\n   [(set_attr \"length\" \"8\")])\n \n \n-(define_expand \"ior<mode>3\"\n+(define_expand \"<iorxor><mode>3\"\n   [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(ior:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SDI 2 \"reg_or_cint_operand\" \"\")))]\n+\t(iorxor:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n+\t\t    (match_operand:SDI 2 \"reg_or_cint_operand\" \"\")))]\n   \"\"\n {\n   if (<MODE>mode == DImode && !TARGET_POWERPC64)\n     {\n-      rs6000_split_logical (operands, IOR, false, false, false);\n+      rs6000_split_logical (operands, <IORXOR>, false, false, false);\n       DONE;\n     }\n \n@@ -2930,58 +2880,44 @@\n       rtx tmp = ((!can_create_pseudo_p ()\n \t\t  || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (<MODE>mode));\n-      HOST_WIDE_INT value = INTVAL (operands[2]);\n \n-      emit_insn (gen_ior<mode>3 (tmp, operands[1],\n-\t\t\t     GEN_INT (value & (~ (HOST_WIDE_INT) 0xffff))));\n+      HOST_WIDE_INT value = INTVAL (operands[2]);\n+      HOST_WIDE_INT lo = value & 0xffff;\n+      HOST_WIDE_INT hi = value - lo;\n \n-      emit_insn (gen_ior<mode>3 (operands[0], tmp, GEN_INT (value & 0xffff)));\n+      emit_insn (gen_<iorxor><mode>3 (tmp, operands[1], GEN_INT (hi)));\n+      emit_insn (gen_<iorxor><mode>3 (operands[0], tmp, GEN_INT (lo)));\n       DONE;\n     }\n \n   if (!reg_or_logical_cint_operand (operands[2], <MODE>mode))\n     operands[2] = force_reg (<MODE>mode, operands[2]);\n })\n \n-(define_expand \"xor<mode>3\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(xor:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SDI 2 \"reg_or_cint_operand\" \"\")))]\n+(define_split\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n+\t(iorxor:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n+\t\t    (match_operand:GPR 2 \"non_logical_cint_operand\" \"\")))]\n   \"\"\n+  [(set (match_dup 3)\n+\t(iorxor:GPR (match_dup 1)\n+\t\t    (match_dup 4)))\n+   (set (match_dup 0)\n+\t(iorxor:GPR (match_dup 3)\n+\t\t    (match_dup 5)))]\n {\n-  if (<MODE>mode == DImode && !TARGET_POWERPC64)\n-    {\n-      rs6000_split_logical (operands, XOR, false, false, false);\n-      DONE;\n-    }\n-\n-  if (non_logical_cint_operand (operands[2], <MODE>mode))\n-    {\n-      rtx tmp = ((!can_create_pseudo_p ()\n+  operands[3] = ((!can_create_pseudo_p ()\n \t\t  || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (<MODE>mode));\n-      HOST_WIDE_INT value = INTVAL (operands[2]);\n-\n-      emit_insn (gen_xor<mode>3 (tmp, operands[1],\n-\t\t\t     GEN_INT (value & (~ (HOST_WIDE_INT) 0xffff))));\n \n-      emit_insn (gen_xor<mode>3 (operands[0], tmp, GEN_INT (value & 0xffff)));\n-      DONE;\n-    }\n+  HOST_WIDE_INT value = INTVAL (operands[2]);\n+  HOST_WIDE_INT lo = value & 0xffff;\n+  HOST_WIDE_INT hi = value - lo;\n \n-  if (!reg_or_logical_cint_operand (operands[2], <MODE>mode))\n-    operands[2] = force_reg (<MODE>mode, operands[2]);\n+  operands[4] = GEN_INT (hi);\n+  operands[5] = GEN_INT (lo);\n })\n \n-(define_insn \"*bool<mode>3\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n-\t(match_operator:GPR 3 \"boolean_or_operator\"\n-\t [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n-\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")]))]\n-  \"\"\n-  \"%q3 %0,%1,%2\"\n-  [(set_attr \"type\" \"logical\")])\n-\n (define_insn \"*bool<mode>3_imm\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(match_operator:GPR 3 \"boolean_or_operator\"\n@@ -2991,9 +2927,18 @@\n   \"%q3i%e2 %0,%1,%u2\"\n   [(set_attr \"type\" \"logical\")])\n \n+(define_insn \"*bool<mode>3\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(match_operator:GPR 3 \"boolean_operator\"\n+\t [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")]))]\n+  \"\"\n+  \"%q3 %0,%1,%2\"\n+  [(set_attr \"type\" \"logical\")])\n+\n (define_insn_and_split \"*bool<mode>3_dot\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (match_operator:GPR 3 \"boolean_or_operator\"\n+\t(compare:CC (match_operator:GPR 3 \"boolean_operator\"\n \t [(match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n \t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n@@ -3015,7 +2960,7 @@\n \n (define_insn_and_split \"*bool<mode>3_dot2\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (match_operator:GPR 3 \"boolean_or_operator\"\n+\t(compare:CC (match_operator:GPR 3 \"boolean_operator\"\n \t [(match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n \t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n@@ -3036,27 +2981,6 @@\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])\n \n-;; Split a logical operation that we can't do in one insn into two insns,\n-;; each of which does one 16-bit part.  This is used by combine.\n-\n-(define_split\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(match_operator:GPR 3 \"boolean_or_operator\"\n-\t [(match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t  (match_operand:GPR 2 \"non_logical_cint_operand\" \"\")]))]\n-  \"\"\n-  [(set (match_dup 0) (match_dup 4))\n-   (set (match_dup 0) (match_dup 5))]\n-{\n-  rtx i;\n-  i = GEN_INT (INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff));\n-  operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\toperands[1], i);\n-  i = GEN_INT (INTVAL (operands[2]) & 0xffff);\n-  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\toperands[0], i);\n-})\n-\n \n (define_insn \"*boolc<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")"}]}