{"sha": "5c1f274e3e090ee03bedc22dd7169b28e759974e", "node_id": "C_kwDOANBUbNoAKDVjMWYyNzRlM2UwOTBlZTAzYmVkYzIyZGQ3MTY5YjI4ZTc1OTk3NGU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-25T10:22:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-25T21:05:16Z"}, "message": "libstdc++: Avoid some more warnings [PR104019]\n\nWith -fno-exceptions we get a -Wmisleading-indentation warning for:\n\n  if (cond)\n    __try {}\n    __catch (...) {}\n\nThis is because the __catch(...) expands to if (false), but is indented\nas though it is controlled by the preceding 'if'. Surround it in braces.\n\nThe new make_shared<T[]> code triggers a bogus warning due to PR 61596,\nwhich can be disabled with a pragma.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104019\n\t* include/bits/istream.tcc (basic_istream::sentry): Add braces\n\taround try-block.\n\t* include/bits/shared_ptr_base.h (_Sp_counted_array_base::_M_init):\n\tAdd pragmas to disable bogus warnings from PR 61596.", "tree": {"sha": "91f9c3138e620e19319856eca72d27f466c4fd7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91f9c3138e620e19319856eca72d27f466c4fd7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c1f274e3e090ee03bedc22dd7169b28e759974e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1f274e3e090ee03bedc22dd7169b28e759974e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1f274e3e090ee03bedc22dd7169b28e759974e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1f274e3e090ee03bedc22dd7169b28e759974e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20486d508afdf22790a271e90ca76d8df5fa7a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20486d508afdf22790a271e90ca76d8df5fa7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e20486d508afdf22790a271e90ca76d8df5fa7a5"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "a1a7d89335e08985e178752496a67314ccd9b3db", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1f274e3e090ee03bedc22dd7169b28e759974e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1f274e3e090ee03bedc22dd7169b28e759974e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=5c1f274e3e090ee03bedc22dd7169b28e759974e", "patch": "@@ -48,36 +48,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       ios_base::iostate __err = ios_base::goodbit;\n       if (__in.good())\n-\t__try\n-\t  {\n-\t    if (__in.tie())\n-\t      __in.tie()->flush();\n-\t    if (!__noskip && bool(__in.flags() & ios_base::skipws))\n-\t      {\n-\t\tconst __int_type __eof = traits_type::eof();\n-\t\t__streambuf_type* __sb = __in.rdbuf();\n-\t\t__int_type __c = __sb->sgetc();\n-\n-\t\tconst __ctype_type& __ct = __check_facet(__in._M_ctype);\n-\t\twhile (!traits_type::eq_int_type(__c, __eof)\n-\t\t       && __ct.is(ctype_base::space,\n-\t\t\t\t  traits_type::to_char_type(__c)))\n-\t\t  __c = __sb->snextc();\n-\n-\t\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t\t// 195. Should basic_istream::sentry's constructor ever\n-\t\t// set eofbit?\n-\t\tif (traits_type::eq_int_type(__c, __eof))\n-\t\t  __err |= ios_base::eofbit;\n-\t      }\n-\t  }\n-\t__catch(__cxxabiv1::__forced_unwind&)\n-\t  {\n-\t    __in._M_setstate(ios_base::badbit);\n-\t    __throw_exception_again;\n-\t  }\n-\t__catch(...)\n-\t  { __in._M_setstate(ios_base::badbit); }\n+\t{\n+\t  __try\n+\t    {\n+\t      if (__in.tie())\n+\t\t__in.tie()->flush();\n+\t      if (!__noskip && bool(__in.flags() & ios_base::skipws))\n+\t\t{\n+\t\t  const __int_type __eof = traits_type::eof();\n+\t\t  __streambuf_type* __sb = __in.rdbuf();\n+\t\t  __int_type __c = __sb->sgetc();\n+\n+\t\t  const __ctype_type& __ct = __check_facet(__in._M_ctype);\n+\t\t  while (!traits_type::eq_int_type(__c, __eof)\n+\t\t\t && __ct.is(ctype_base::space,\n+\t\t\t\t    traits_type::to_char_type(__c)))\n+\t\t    __c = __sb->snextc();\n+\n+\t\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t\t  // 195. Should basic_istream::sentry's constructor ever\n+\t\t  // set eofbit?\n+\t\t  if (traits_type::eq_int_type(__c, __eof))\n+\t\t    __err |= ios_base::eofbit;\n+\t\t}\n+\t    }\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n+\t    {\n+\t      __in._M_setstate(ios_base::badbit);\n+\t      __throw_exception_again;\n+\t    }\n+\t  __catch(...)\n+\t    { __in._M_setstate(ios_base::badbit); }\n+\t}\n \n       if (__in.good() && __err == ios_base::goodbit)\n \t_M_ok = true;"}, {"sha": "d9230b7220339d69d5cacda5a9114a72cf0c30fc", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1f274e3e090ee03bedc22dd7169b28e759974e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1f274e3e090ee03bedc22dd7169b28e759974e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=5c1f274e3e090ee03bedc22dd7169b28e759974e", "patch": "@@ -762,6 +762,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    std::__uninitialized_fill_n_a(__p, _M_n, *__init, _M_alloc);\n \t  else\n \t    {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wunused-local-typedefs\"\n \t      struct _Iter\n \t      {\n \t\tusing value_type = _Up;\n@@ -783,6 +785,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tbool operator==(const _Iter& __i) const\n \t\t{ return _M_pos == __i._M_pos; }\n \t      };\n+#pragma GCC diagnostic pop\n \n \t      _Iter __first{_S_first_elem(__init), sizeof(_Tp) / sizeof(_Up)};\n \t      _Iter __last = __first;"}]}