{"sha": "5689294cd95ee6209a55359b710ca9bce81d98d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4OTI5NGNkOTVlZTYyMDlhNTUzNTliNzEwY2E5YmNlODFkOThkOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2013-11-05T14:17:33Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-11-05T14:17:33Z"}, "message": "Don't use mode wider than Pmode for size in movmem/setmem\n\ngcc/\n\n\tPR middle-end/58981\n\t* doc/md.texi (@code{movmem@var{m}}): Specify Pmode as mode of\n\tpattern, instead of word_mode.\n\n\t* expr.c (emit_block_move_via_movmem): Don't use mode wider than\n\tPmode for size.\n\t(set_storage_via_setmem): Likewise.\n\ngcc/testsuite/\n\n\tPR middle-end/58981\n\t* gcc.dg/pr58981.c: New test.\n\nFrom-SVN: r204394", "tree": {"sha": "ff433ccdf462aa7465faa04380de59abd9507cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff433ccdf462aa7465faa04380de59abd9507cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5689294cd95ee6209a55359b710ca9bce81d98d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5689294cd95ee6209a55359b710ca9bce81d98d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5689294cd95ee6209a55359b710ca9bce81d98d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5689294cd95ee6209a55359b710ca9bce81d98d8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37"}], "stats": {"total": 93, "additions": 83, "deletions": 10}, "files": [{"sha": "9b21a3a544579c73f0f125c7601393572037f935", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5689294cd95ee6209a55359b710ca9bce81d98d8", "patch": "@@ -1,3 +1,13 @@\n+2013-11-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/58981\n+\t* doc/md.texi (@code{movmem@var{m}}): Specify Pmode as mode of\n+\tpattern, instead of word_mode.\n+\n+\t* expr.c (emit_block_move_via_movmem): Don't use mode wider than\n+\tPmode for size.\n+\t(set_storage_via_setmem): Likewise.\n+\n 2013-11-05  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-outof-ssa.c (queue_phi_copy_p): Combine phi_ssa_name_p from "}, {"sha": "1e22b88f6081eca91f49f480c1e7f939bf673145", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=5689294cd95ee6209a55359b710ca9bce81d98d8", "patch": "@@ -5291,12 +5291,13 @@ are the first two operands, and both are @code{mem:BLK}s with an\n address in mode @code{Pmode}.\n \n The number of bytes to move is the third operand, in mode @var{m}.\n-Usually, you specify @code{word_mode} for @var{m}.  However, if you can\n+Usually, you specify @code{Pmode} for @var{m}.  However, if you can\n generate better code knowing the range of valid lengths is smaller than\n-those representable in a full word, you should provide a pattern with a\n+those representable in a full Pmode pointer, you should provide\n+a pattern with a\n mode corresponding to the range of values you can handle efficiently\n (e.g., @code{QImode} for values in the range 0--127; note we avoid numbers\n-that appear negative) and also a pattern with @code{word_mode}.\n+that appear negative) and also a pattern with @code{Pmode}.\n \n The fourth operand is the known shared alignment of the source and\n destination, in the form of a @code{const_int} rtx.  Thus, if the"}, {"sha": "8ef28709a4e7aa71f052b1afad4f521a4a180a16", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5689294cd95ee6209a55359b710ca9bce81d98d8", "patch": "@@ -1297,11 +1297,12 @@ emit_block_move_via_movmem (rtx x, rtx y, rtx size, unsigned int align,\n \t  /* We don't need MODE to be narrower than BITS_PER_HOST_WIDE_INT\n \t     here because if SIZE is less than the mode mask, as it is\n \t     returned by the macro, it will definitely be less than the\n-\t     actual mode mask.  */\n+\t     actual mode mask.  Since SIZE is within the Pmode address\n+\t     space, we limit MODE to Pmode.  */\n \t  && ((CONST_INT_P (size)\n \t       && ((unsigned HOST_WIDE_INT) INTVAL (size)\n \t\t   <= (GET_MODE_MASK (mode) >> 1)))\n-\t      || GET_MODE_BITSIZE (mode) >= BITS_PER_WORD))\n+\t      || GET_MODE_BITSIZE (mode) >= GET_MODE_BITSIZE (Pmode)))\n \t{\n \t  struct expand_operand ops[6];\n \t  unsigned int nops;\n@@ -2879,14 +2880,15 @@ set_storage_via_setmem (rtx object, rtx size, rtx val, unsigned int align,\n       enum insn_code code = direct_optab_handler (setmem_optab, mode);\n \n       if (code != CODE_FOR_nothing\n-\t  /* We don't need MODE to be narrower than\n-\t     BITS_PER_HOST_WIDE_INT here because if SIZE is less than\n-\t     the mode mask, as it is returned by the macro, it will\n-\t     definitely be less than the actual mode mask.  */\n+\t  /* We don't need MODE to be narrower than BITS_PER_HOST_WIDE_INT\n+\t     here because if SIZE is less than the mode mask, as it is\n+\t     returned by the macro, it will definitely be less than the\n+\t     actual mode mask.  Since SIZE is within the Pmode address\n+\t     space, we limit MODE to Pmode.  */\n \t  && ((CONST_INT_P (size)\n \t       && ((unsigned HOST_WIDE_INT) INTVAL (size)\n \t\t   <= (GET_MODE_MASK (mode) >> 1)))\n-\t      || GET_MODE_BITSIZE (mode) >= BITS_PER_WORD))\n+\t      || GET_MODE_BITSIZE (mode) >= GET_MODE_BITSIZE (Pmode)))\n \t{\n \t  struct expand_operand ops[6];\n \t  unsigned int nops;"}, {"sha": "21864c690c7c4a869799f3f2f5a1e52a0b28a090", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5689294cd95ee6209a55359b710ca9bce81d98d8", "patch": "@@ -1,3 +1,8 @@\n+2013-11-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/58981\n+\t* gcc.dg/pr58981.c: New test.\n+\n 2013-11-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/58941"}, {"sha": "1c8293e498523d3ecb1c7a5f77a357310222b0d7", "filename": "gcc/testsuite/gcc.dg/pr58981.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58981.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5689294cd95ee6209a55359b710ca9bce81d98d8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58981.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58981.c?ref=5689294cd95ee6209a55359b710ca9bce81d98d8", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-minline-all-stringops\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+extern void abort (void);\n+\n+#define MAX_OFFSET (sizeof (long long))\n+#define MAX_COPY (8 * sizeof (long long))\n+#define MAX_EXTRA (sizeof (long long))\n+\n+#define MAX_LENGTH (MAX_OFFSET + MAX_COPY + MAX_EXTRA)\n+\n+static union {\n+  char buf[MAX_LENGTH];\n+  long long align_int;\n+  long double align_fp;\n+} u;\n+\n+char A[MAX_LENGTH];\n+\n+int\n+main ()\n+{\n+  int off, len, i;\n+  char *p, *q;\n+\n+  for (i = 0; i < MAX_LENGTH; i++)\n+    A[i] = 'A';\n+\n+  for (off = 0; off < MAX_OFFSET; off++)\n+    for (len = 1; len < MAX_COPY; len++)\n+      {\n+\tfor (i = 0; i < MAX_LENGTH; i++)\n+\t  u.buf[i] = 'a';\n+\n+\tp = __builtin_memcpy (u.buf + off, A, len);\n+\tif (p != u.buf + off)\n+\t  abort ();\n+\n+\tq = u.buf;\n+\tfor (i = 0; i < off; i++, q++)\n+\t  if (*q != 'a')\n+\t    abort ();\n+\n+\tfor (i = 0; i < len; i++, q++)\n+\t  if (*q != 'A')\n+\t    abort ();\n+\n+\tfor (i = 0; i < MAX_EXTRA; i++, q++)\n+\t  if (*q != 'a')\n+\t    abort ();\n+      }\n+\n+  return 0;\n+}"}]}