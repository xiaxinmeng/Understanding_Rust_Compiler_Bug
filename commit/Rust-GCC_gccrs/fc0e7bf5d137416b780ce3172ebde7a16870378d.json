{"sha": "fc0e7bf5d137416b780ce3172ebde7a16870378d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwZTdiZjVkMTM3NDE2Yjc4MGNlMzE3MmViZGU3YTE2ODcwMzc4ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-09T01:47:02Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-09T01:47:02Z"}, "message": "cp-tree.h (saved_scope): Remove old_binding_level and function_decl.\n\n\t* cp-tree.h (saved_scope): Remove old_binding_level and\n\tfunction_decl.  Tidy up.\n\t* decl.c (mark_saved_scope): Don't set them.\n\t(maybe_push_to_top_level): Clear memory.\n\nFrom-SVN: r29221", "tree": {"sha": "99fb477a3cc844029dcf76027bc5741f2b2330df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99fb477a3cc844029dcf76027bc5741f2b2330df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc0e7bf5d137416b780ce3172ebde7a16870378d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0e7bf5d137416b780ce3172ebde7a16870378d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0e7bf5d137416b780ce3172ebde7a16870378d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0e7bf5d137416b780ce3172ebde7a16870378d/comments", "author": null, "committer": null, "parents": [{"sha": "c82dbd958872662840fa7e33e9c0a47c7608938e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82dbd958872662840fa7e33e9c0a47c7608938e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c82dbd958872662840fa7e33e9c0a47c7608938e"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "a15b3bb28208d9588cfd331cf00ecf28b91206c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0e7bf5d137416b780ce3172ebde7a16870378d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0e7bf5d137416b780ce3172ebde7a16870378d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc0e7bf5d137416b780ce3172ebde7a16870378d", "patch": "@@ -1,5 +1,10 @@\n 1999-09-08  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (saved_scope): Remove old_binding_level and \n+\tfunction_decl.  Tidy up.\n+\t* decl.c (mark_saved_scope): Don't set them.\n+\t(maybe_push_to_top_level): Clear memory.\n+\n \t* decl.c (layout_var_decl): Change prototype.  Don't complete\n \ttypes for external objects.\n \t(check_initializer): Likewise.  Tidy."}, {"sha": "6da2463350d009750faacc5e0c95ed661b643715", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0e7bf5d137416b780ce3172ebde7a16870378d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0e7bf5d137416b780ce3172ebde7a16870378d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fc0e7bf5d137416b780ce3172ebde7a16870378d", "patch": "@@ -520,25 +520,28 @@ extern tree cp_global_trees[CPTI_MAX];\n /* Global state.  */\n \n struct saved_scope {\n-  struct binding_level *old_binding_level;\n   tree old_bindings;\n   tree old_namespace;\n-  struct saved_scope *prev;\n-  tree class_name, class_type;\n+  tree class_name;\n+  tree class_type;\n   tree access_specifier;\n-  tree function_decl;\n-  struct binding_level *class_bindings;\n   varray_type lang_base;\n   tree *lang_stack;\n   tree lang_name;\n   tree x_function_parms;\n   tree template_parms;\n-  HOST_WIDE_INT x_processing_template_decl;\n   tree x_previous_class_type;\n   tree x_previous_class_values;\n+\n+  HOST_WIDE_INT x_processing_template_decl;\n   int x_processing_specialization;\n   int x_processing_explicit_instantiation;\n+\n   char *firstobj;\n+\n+  struct binding_level *class_bindings;\n+\n+  struct saved_scope *prev;\n };\n \n /* The current open namespace.  */"}, {"sha": "dc2850e24481f0f17bef6bb1d40385287b27f4f8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0e7bf5d137416b780ce3172ebde7a16870378d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0e7bf5d137416b780ce3172ebde7a16870378d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fc0e7bf5d137416b780ce3172ebde7a16870378d", "patch": "@@ -2382,14 +2382,12 @@ mark_saved_scope (arg)\n   struct saved_scope *t = *(struct saved_scope **)arg;\n   while (t)\n     {\n-      mark_binding_level (&t->old_binding_level);\n       mark_binding_level (&t->class_bindings);\n       ggc_mark_tree (t->old_bindings);\n       ggc_mark_tree (t->old_namespace);\n       ggc_mark_tree (t->class_name);\n       ggc_mark_tree (t->class_type);\n       ggc_mark_tree (t->access_specifier);\n-      ggc_mark_tree (t->function_decl);\n       if (t->lang_base)\n \tggc_mark_tree_varray (t->lang_base);\n       ggc_mark_tree (t->lang_name);\n@@ -2451,7 +2449,7 @@ maybe_push_to_top_level (pseudo)\n      int pseudo;\n {\n   struct saved_scope *s\n-    = (struct saved_scope *) xmalloc (sizeof (struct saved_scope));\n+    = (struct saved_scope *) xcalloc (1, sizeof (struct saved_scope));\n   struct binding_level *b;\n   tree old_bindings = NULL_TREE;\n \n@@ -2485,28 +2483,18 @@ maybe_push_to_top_level (pseudo)\n       for (t = b->type_shadowed; t; t = TREE_CHAIN (t))\n \tSET_IDENTIFIER_TYPE_VALUE (TREE_PURPOSE (t), TREE_VALUE (t));\n     }\n-  if (scope_chain)\n-    *s = *scope_chain;\n-  s->old_binding_level = scope_chain ? current_binding_level : 0;\n-  s->old_bindings = old_bindings;\n-  s->prev = scope_chain;\n-  scope_chain = s;\n   current_binding_level = b;\n \n-  current_class_name = current_class_type = NULL_TREE;\n+  s->prev = scope_chain;\n+  s->old_bindings = old_bindings;\n+\n+  scope_chain = s;\n   current_function_decl = NULL_TREE;\n-  class_binding_level = (struct binding_level *)0;\n   VARRAY_TREE_INIT (current_lang_base, 10, \"current_lang_base\");\n   current_lang_stack = &VARRAY_TREE (current_lang_base, 0);\n   current_lang_name = lang_name_cplusplus;\n   strict_prototype = strict_prototypes_lang_cplusplus;\n   named_labels = NULL_TREE;\n-  previous_class_type = previous_class_values = NULL_TREE;\n-  class_cache_firstobj = 0;\n-  processing_specialization = 0;\n-  processing_explicit_instantiation = 0;\n-  current_template_parms = NULL_TREE;\n-  processing_template_decl = 0;\n   current_namespace = global_namespace;\n \n   push_obstacks (&permanent_obstack, &permanent_obstack);\n@@ -7486,6 +7474,8 @@ check_initializer (decl, init)\n   if (TREE_CODE (decl) == FIELD_DECL)\n     return init;\n \n+  type = TREE_TYPE (decl);\n+\n   /* If `start_decl' didn't like having an initialization, ignore it now.  */\n   if (init != NULL_TREE && DECL_INITIAL (decl) == NULL_TREE)\n     init = NULL_TREE;"}]}