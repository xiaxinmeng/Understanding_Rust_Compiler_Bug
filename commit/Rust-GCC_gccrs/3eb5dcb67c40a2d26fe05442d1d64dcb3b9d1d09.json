{"sha": "3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "node_id": "C_kwDOANBUbNoAKDNlYjVkY2I2N2M0MGEyZDI2ZmUwNTQ0MmQxZDY0ZGNiM2I5ZDFkMDk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-21T16:37:47Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-25T08:47:56Z"}, "message": "expand: Rename AttrVisitor -> CfgStrip\n\nSince the expansion and stripping phase are now separated, it does not\nmake sense to keep AttrVisitor named AttrVisitor. Furthermore, the visitor\nis already very complex, with a heavy mental load (erasing iterators,\nrearranging them, performing cfg-expansion, etc) so further attribute\nhandling should probably happen in rust-attribute-checker.h\n\ngcc/rust/ChangeLog:\n\n\t* Make-lang.in: Rename rust-asttribute-visitor.o -> rust-cfg-strip.o\n\t* expand/rust-attribute-visitor.cc: Moved to...\n\t* expand/rust-cfg-strip.cc: ...here.\n\t* expand/rust-attribute-visitor.h: Moved to...\n\t* expand/rust-cfg-strip.h: ...here.\n\t* expand/rust-macro-expand.cc: Fix include of rust-attribute-visitor.h\n\t* expand/rust-macro-builtins.cc: Likewise.\n\t* rust-session-manager.cc (Session::expansion): Call CfgStrip instead of\n\tAttrVisitor.", "tree": {"sha": "1ded79f30c1bf60f3e149e8be9095512e8abe33e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ded79f30c1bf60f3e149e8be9095512e8abe33e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267d80f146da679e44aa377f889d717032102268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267d80f146da679e44aa377f889d717032102268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267d80f146da679e44aa377f889d717032102268"}], "stats": {"total": 468, "additions": 234, "deletions": 234}, "files": [{"sha": "f0c0980c5f160655226fcd5e6b0c265bfcfd932d", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "patch": "@@ -81,7 +81,7 @@ GRS_OBJS = \\\n     rust/rust-mangle.o \\\n     rust/rust-compile-resolve-path.o \\\n     rust/rust-macro-expand.o \\\n-    rust/rust-attribute-visitor.o \\\n+    rust/rust-cfg-strip.o \\\n \trust/rust-expand-visitor.o \\\n     rust/rust-macro-invoc-lexer.o \\\n     rust/rust-macro-substitute-ctx.o \\"}, {"sha": "b1020499bb1b3ac180b92a6da8d6f42ed97c3eb4", "filename": "gcc/rust/expand/rust-cfg-strip.cc", "status": "renamed", "additions": 214, "deletions": 213, "changes": 427, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc?ref=3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "patch": "@@ -16,7 +16,8 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include \"rust-attribute-visitor.h\"\n+#include \"rust-cfg-strip.h\"\n+#include \"rust-ast-full.h\"\n #include \"rust-session-manager.h\"\n \n namespace Rust {\n@@ -130,7 +131,7 @@ expand_cfg_attrs (AST::AttrVec &attrs)\n }\n \n void\n-AttrVisitor::go (AST::Crate &crate)\n+CfgStrip::go (AST::Crate &crate)\n {\n   // expand crate cfg_attr attributes\n   expand_cfg_attrs (crate.inner_attrs);\n@@ -160,7 +161,7 @@ AttrVisitor::go (AST::Crate &crate)\n \n // Visitor used to expand attributes.\n void\n-AttrVisitor::expand_struct_fields (std::vector<AST::StructField> &fields)\n+CfgStrip::maybe_strip_struct_fields (std::vector<AST::StructField> &fields)\n {\n   for (auto it = fields.begin (); it != fields.end ();)\n     {\n@@ -188,7 +189,7 @@ AttrVisitor::expand_struct_fields (std::vector<AST::StructField> &fields)\n }\n \n void\n-AttrVisitor::expand_tuple_fields (std::vector<AST::TupleField> &fields)\n+CfgStrip::maybe_strip_tuple_fields (std::vector<AST::TupleField> &fields)\n {\n   for (auto it = fields.begin (); it != fields.end ();)\n     {\n@@ -215,7 +216,7 @@ AttrVisitor::expand_tuple_fields (std::vector<AST::TupleField> &fields)\n }\n \n void\n-AttrVisitor::expand_function_params (std::vector<AST::FunctionParam> &params)\n+CfgStrip::maybe_strip_function_params (std::vector<AST::FunctionParam> &params)\n {\n   for (auto it = params.begin (); it != params.end ();)\n     {\n@@ -249,7 +250,7 @@ AttrVisitor::expand_function_params (std::vector<AST::FunctionParam> &params)\n }\n \n void\n-AttrVisitor::expand_generic_args (AST::GenericArgs &args)\n+CfgStrip::maybe_strip_generic_args (AST::GenericArgs &args)\n {\n   // lifetime args can't be expanded\n   // FIXME: Can we have macro invocations for lifetimes?\n@@ -301,7 +302,7 @@ AttrVisitor::expand_generic_args (AST::GenericArgs &args)\n }\n \n void\n-AttrVisitor::expand_qualified_path_type (AST::QualifiedPathType &path_type)\n+CfgStrip::maybe_strip_qualified_path_type (AST::QualifiedPathType &path_type)\n {\n   auto &type = path_type.get_type ();\n   type->accept_vis (*this);\n@@ -320,7 +321,7 @@ AttrVisitor::expand_qualified_path_type (AST::QualifiedPathType &path_type)\n }\n \n void\n-AttrVisitor::AttrVisitor::expand_closure_params (\n+CfgStrip::CfgStrip::maybe_strip_closure_params (\n   std::vector<AST::ClosureParam> &params)\n {\n   for (auto it = params.begin (); it != params.end ();)\n@@ -357,7 +358,7 @@ AttrVisitor::AttrVisitor::expand_closure_params (\n }\n \n void\n-AttrVisitor::expand_self_param (AST::SelfParam &self_param)\n+CfgStrip::maybe_strip_self_param (AST::SelfParam &self_param)\n {\n   if (self_param.has_type ())\n     {\n@@ -373,23 +374,23 @@ AttrVisitor::expand_self_param (AST::SelfParam &self_param)\n }\n \n void\n-AttrVisitor::expand_where_clause (AST::WhereClause &where_clause)\n+CfgStrip::maybe_strip_where_clause (AST::WhereClause &where_clause)\n {\n   // items cannot be stripped conceptually, so just accept visitor\n   for (auto &item : where_clause.get_items ())\n     item->accept_vis (*this);\n }\n \n void\n-AttrVisitor::expand_trait_function_decl (AST::TraitFunctionDecl &decl)\n+CfgStrip::maybe_strip_trait_function_decl (AST::TraitFunctionDecl &decl)\n {\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &param : decl.get_generic_params ())\n     param->accept_vis (*this);\n \n   /* strip function parameters if required - this is specifically\n    * allowed by spec */\n-  expand_function_params (decl.get_function_params ());\n+  maybe_strip_function_params (decl.get_function_params ());\n \n   if (decl.has_return_type ())\n     {\n@@ -402,11 +403,11 @@ AttrVisitor::expand_trait_function_decl (AST::TraitFunctionDecl &decl)\n     }\n \n   if (decl.has_where_clause ())\n-    expand_where_clause (decl.get_where_clause ());\n+    maybe_strip_where_clause (decl.get_where_clause ());\n }\n \n void\n-AttrVisitor::expand_trait_method_decl (AST::TraitMethodDecl &decl)\n+CfgStrip::maybe_strip_trait_method_decl (AST::TraitMethodDecl &decl)\n {\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &param : decl.get_generic_params ())\n@@ -415,11 +416,11 @@ AttrVisitor::expand_trait_method_decl (AST::TraitMethodDecl &decl)\n   /* assuming you can't strip self param - wouldn't be a method\n    * anymore. spec allows outer attrs on self param, but doesn't\n    * specify whether cfg is used. */\n-  expand_self_param (decl.get_self_param ());\n+  maybe_strip_self_param (decl.get_self_param ());\n \n   /* strip function parameters if required - this is specifically\n    * allowed by spec */\n-  expand_function_params (decl.get_function_params ());\n+  maybe_strip_function_params (decl.get_function_params ());\n \n   if (decl.has_return_type ())\n     {\n@@ -432,26 +433,26 @@ AttrVisitor::expand_trait_method_decl (AST::TraitMethodDecl &decl)\n     }\n \n   if (decl.has_where_clause ())\n-    expand_where_clause (decl.get_where_clause ());\n+    maybe_strip_where_clause (decl.get_where_clause ());\n }\n \n void\n-AttrVisitor::visit (AST::Token &)\n+CfgStrip::visit (AST::Token &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::DelimTokenTree &)\n+CfgStrip::visit (AST::DelimTokenTree &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::AttrInputMetaItemContainer &)\n+CfgStrip::visit (AST::AttrInputMetaItemContainer &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::IdentifierExpr &ident_expr)\n+CfgStrip::visit (AST::IdentifierExpr &ident_expr)\n {\n   // strip test based on outer attrs\n   expand_cfg_attrs (ident_expr.get_outer_attrs ());\n@@ -462,23 +463,23 @@ AttrVisitor::visit (AST::IdentifierExpr &ident_expr)\n     }\n }\n void\n-AttrVisitor::visit (AST::Lifetime &)\n+CfgStrip::visit (AST::Lifetime &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::LifetimeParam &)\n+CfgStrip::visit (AST::LifetimeParam &)\n {\n   // supposedly does not require - cfg does nothing\n }\n void\n-AttrVisitor::visit (AST::ConstGenericParam &)\n+CfgStrip::visit (AST::ConstGenericParam &)\n {\n   // likewise\n }\n \n void\n-AttrVisitor::visit (AST::MacroInvocation &macro_invoc)\n+CfgStrip::visit (AST::MacroInvocation &macro_invoc)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (macro_invoc.get_outer_attrs ());\n@@ -496,7 +497,7 @@ AttrVisitor::visit (AST::MacroInvocation &macro_invoc)\n }\n \n void\n-AttrVisitor::visit (AST::PathInExpression &path)\n+CfgStrip::visit (AST::PathInExpression &path)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (path.get_outer_attrs ());\n@@ -509,26 +510,26 @@ AttrVisitor::visit (AST::PathInExpression &path)\n   for (auto &segment : path.get_segments ())\n     {\n       if (segment.has_generic_args ())\n-\texpand_generic_args (segment.get_generic_args ());\n+\tmaybe_strip_generic_args (segment.get_generic_args ());\n     }\n }\n void\n-AttrVisitor::visit (AST::TypePathSegment &)\n+CfgStrip::visit (AST::TypePathSegment &)\n {\n   // shouldn't require\n }\n void\n-AttrVisitor::visit (AST::TypePathSegmentGeneric &segment)\n+CfgStrip::visit (AST::TypePathSegmentGeneric &segment)\n {\n   // TODO: strip inside generic args\n \n   if (!segment.has_generic_args ())\n     return;\n \n-  expand_generic_args (segment.get_generic_args ());\n+  maybe_strip_generic_args (segment.get_generic_args ());\n }\n void\n-AttrVisitor::visit (AST::TypePathSegmentFunction &segment)\n+CfgStrip::visit (AST::TypePathSegmentFunction &segment)\n {\n   auto &type_path_function = segment.get_type_path_function ();\n \n@@ -551,14 +552,14 @@ AttrVisitor::visit (AST::TypePathSegmentFunction &segment)\n     }\n }\n void\n-AttrVisitor::visit (AST::TypePath &path)\n+CfgStrip::visit (AST::TypePath &path)\n {\n   // this shouldn't strip any segments, but can strip inside them\n   for (auto &segment : path.get_segments ())\n     segment->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::QualifiedPathInExpression &path)\n+CfgStrip::visit (AST::QualifiedPathInExpression &path)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (path.get_outer_attrs ());\n@@ -568,26 +569,26 @@ AttrVisitor::visit (AST::QualifiedPathInExpression &path)\n       return;\n     }\n \n-  expand_qualified_path_type (path.get_qualified_path_type ());\n+  maybe_strip_qualified_path_type (path.get_qualified_path_type ());\n \n   for (auto &segment : path.get_segments ())\n     {\n       if (segment.has_generic_args ())\n-\texpand_generic_args (segment.get_generic_args ());\n+\tmaybe_strip_generic_args (segment.get_generic_args ());\n     }\n }\n void\n-AttrVisitor::visit (AST::QualifiedPathInType &path)\n+CfgStrip::visit (AST::QualifiedPathInType &path)\n {\n-  expand_qualified_path_type (path.get_qualified_path_type ());\n+  maybe_strip_qualified_path_type (path.get_qualified_path_type ());\n \n   // this shouldn't strip any segments, but can strip inside them\n   for (auto &segment : path.get_segments ())\n     segment->accept_vis (*this);\n }\n \n void\n-AttrVisitor::visit (AST::LiteralExpr &expr)\n+CfgStrip::visit (AST::LiteralExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -598,22 +599,22 @@ AttrVisitor::visit (AST::LiteralExpr &expr)\n     }\n }\n void\n-AttrVisitor::visit (AST::AttrInputLiteral &)\n+CfgStrip::visit (AST::AttrInputLiteral &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::MetaItemLitExpr &)\n+CfgStrip::visit (AST::MetaItemLitExpr &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::MetaItemPathLit &)\n+CfgStrip::visit (AST::MetaItemPathLit &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::BorrowExpr &expr)\n+CfgStrip::visit (AST::BorrowExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -634,7 +635,7 @@ AttrVisitor::visit (AST::BorrowExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::DereferenceExpr &expr)\n+CfgStrip::visit (AST::DereferenceExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -655,7 +656,7 @@ AttrVisitor::visit (AST::DereferenceExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ErrorPropagationExpr &expr)\n+CfgStrip::visit (AST::ErrorPropagationExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -676,7 +677,7 @@ AttrVisitor::visit (AST::ErrorPropagationExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::NegationExpr &expr)\n+CfgStrip::visit (AST::NegationExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -697,7 +698,7 @@ AttrVisitor::visit (AST::NegationExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ArithmeticOrLogicalExpr &expr)\n+CfgStrip::visit (AST::ArithmeticOrLogicalExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * two direct descendant expressions, can strip ones below that */\n@@ -724,7 +725,7 @@ AttrVisitor::visit (AST::ArithmeticOrLogicalExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ComparisonExpr &expr)\n+CfgStrip::visit (AST::ComparisonExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * two direct descendant expressions, can strip ones below that */\n@@ -751,7 +752,7 @@ AttrVisitor::visit (AST::ComparisonExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::LazyBooleanExpr &expr)\n+CfgStrip::visit (AST::LazyBooleanExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * two direct descendant expressions, can strip ones below that */\n@@ -778,7 +779,7 @@ AttrVisitor::visit (AST::LazyBooleanExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::TypeCastExpr &expr)\n+CfgStrip::visit (AST::TypeCastExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * direct descendant expression, can strip ones below that */\n@@ -801,7 +802,7 @@ AttrVisitor::visit (AST::TypeCastExpr &expr)\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n }\n void\n-AttrVisitor::visit (AST::AssignmentExpr &expr)\n+CfgStrip::visit (AST::AssignmentExpr &expr)\n {\n   expand_cfg_attrs (expr.get_outer_attrs ());\n   if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n@@ -832,7 +833,7 @@ AttrVisitor::visit (AST::AssignmentExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::CompoundAssignmentExpr &expr)\n+CfgStrip::visit (AST::CompoundAssignmentExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * two direct descendant expressions, can strip ones below that */\n@@ -859,7 +860,7 @@ AttrVisitor::visit (AST::CompoundAssignmentExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::GroupedExpr &expr)\n+CfgStrip::visit (AST::GroupedExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -889,14 +890,14 @@ AttrVisitor::visit (AST::GroupedExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ArrayElemsValues &elems)\n+CfgStrip::visit (AST::ArrayElemsValues &elems)\n {\n   /* apparently outer attributes are allowed in \"elements of array\n    * expressions\" according to spec */\n-  expand_pointer_allow_strip (elems.get_values ());\n+  maybe_strip_pointer_allow_strip (elems.get_values ());\n }\n void\n-AttrVisitor::visit (AST::ArrayElemsCopied &elems)\n+CfgStrip::visit (AST::ArrayElemsCopied &elems)\n {\n   /* apparently outer attributes are allowed in \"elements of array\n    * expressions\" according to spec. on the other hand, it would not\n@@ -919,7 +920,7 @@ AttrVisitor::visit (AST::ArrayElemsCopied &elems)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ArrayExpr &expr)\n+CfgStrip::visit (AST::ArrayExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -943,7 +944,7 @@ AttrVisitor::visit (AST::ArrayExpr &expr)\n   expr.get_array_elems ()->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::ArrayIndexExpr &expr)\n+CfgStrip::visit (AST::ArrayIndexExpr &expr)\n {\n   /* it is unclear whether outer attributes are supposed to be\n    * allowed, but conceptually it wouldn't make much sense, but\n@@ -974,7 +975,7 @@ AttrVisitor::visit (AST::ArrayIndexExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::TupleExpr &expr)\n+CfgStrip::visit (AST::TupleExpr &expr)\n {\n   /* according to spec, outer attributes are allowed on \"elements of\n    * tuple expressions\" */\n@@ -998,10 +999,10 @@ AttrVisitor::visit (AST::TupleExpr &expr)\n \n   /* apparently outer attributes are allowed in \"elements of tuple\n    * expressions\" according to spec */\n-  expand_pointer_allow_strip (expr.get_tuple_elems ());\n+  maybe_strip_pointer_allow_strip (expr.get_tuple_elems ());\n }\n void\n-AttrVisitor::visit (AST::TupleIndexExpr &expr)\n+CfgStrip::visit (AST::TupleIndexExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1022,7 +1023,7 @@ AttrVisitor::visit (AST::TupleIndexExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::StructExprStruct &expr)\n+CfgStrip::visit (AST::StructExprStruct &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1049,12 +1050,12 @@ AttrVisitor::visit (AST::StructExprStruct &expr)\n \t\t   \"cannot strip path in this position\");\n }\n void\n-AttrVisitor::visit (AST::StructExprFieldIdentifier &)\n+CfgStrip::visit (AST::StructExprFieldIdentifier &)\n {\n   // as no attrs (at moment, at least), no stripping possible\n }\n void\n-AttrVisitor::visit (AST::StructExprFieldIdentifierValue &field)\n+CfgStrip::visit (AST::StructExprFieldIdentifierValue &field)\n {\n   /* as no attrs possible (at moment, at least), only sub-expression\n    * stripping is possible */\n@@ -1066,7 +1067,7 @@ AttrVisitor::visit (AST::StructExprFieldIdentifierValue &field)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::StructExprFieldIndexValue &field)\n+CfgStrip::visit (AST::StructExprFieldIndexValue &field)\n {\n   /* as no attrs possible (at moment, at least), only sub-expression\n    * stripping is possible */\n@@ -1078,7 +1079,7 @@ AttrVisitor::visit (AST::StructExprFieldIndexValue &field)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::StructExprStructFields &expr)\n+CfgStrip::visit (AST::StructExprStructFields &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1127,7 +1128,7 @@ AttrVisitor::visit (AST::StructExprStructFields &expr)\n     }\n }\n void\n-AttrVisitor::visit (AST::StructExprStructBase &expr)\n+CfgStrip::visit (AST::StructExprStructBase &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1164,7 +1165,7 @@ AttrVisitor::visit (AST::StructExprStructBase &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::CallExpr &expr)\n+CfgStrip::visit (AST::CallExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1188,10 +1189,10 @@ AttrVisitor::visit (AST::CallExpr &expr)\n    * of call expressions, so full stripping possible */\n   // FIXME: Arthur: Figure out how to refactor this - This is similar to\n   // expanding items in the crate or stmts in blocks\n-  expand_pointer_allow_strip (expr.get_params ());\n+  maybe_strip_pointer_allow_strip (expr.get_params ());\n }\n void\n-AttrVisitor::visit (AST::MethodCallExpr &expr)\n+CfgStrip::visit (AST::MethodCallExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1213,14 +1214,14 @@ AttrVisitor::visit (AST::MethodCallExpr &expr)\n \n   auto &method_name = expr.get_method_name ();\n   if (method_name.has_generic_args ())\n-    expand_generic_args (method_name.get_generic_args ());\n+    maybe_strip_generic_args (method_name.get_generic_args ());\n \n   /* spec says outer attributes are specifically allowed for elements\n    * of method call expressions, so full stripping possible */\n-  expand_pointer_allow_strip (expr.get_params ());\n+  maybe_strip_pointer_allow_strip (expr.get_params ());\n }\n void\n-AttrVisitor::visit (AST::FieldAccessExpr &expr)\n+CfgStrip::visit (AST::FieldAccessExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1241,7 +1242,7 @@ AttrVisitor::visit (AST::FieldAccessExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ClosureExprInner &expr)\n+CfgStrip::visit (AST::ClosureExprInner &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1253,7 +1254,7 @@ AttrVisitor::visit (AST::ClosureExprInner &expr)\n \n   /* strip closure parameters if required - this is specifically\n    * allowed by spec */\n-  expand_closure_params (expr.get_params ());\n+  maybe_strip_closure_params (expr.get_params ());\n \n   // can't strip expression itself, but can strip sub-expressions\n   auto &definition_expr = expr.get_definition_expr ();\n@@ -1265,7 +1266,7 @@ AttrVisitor::visit (AST::ClosureExprInner &expr)\n }\n \n void\n-AttrVisitor::visit (AST::BlockExpr &expr)\n+CfgStrip::visit (AST::BlockExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1284,7 +1285,7 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n       return;\n     }\n \n-  expand_pointer_allow_strip (expr.get_statements ());\n+  maybe_strip_pointer_allow_strip (expr.get_statements ());\n \n   // strip tail expression if exists - can actually fully remove it\n   if (expr.has_tail_expr ())\n@@ -1299,7 +1300,7 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n }\n \n void\n-AttrVisitor::visit (AST::ClosureExprInnerTyped &expr)\n+CfgStrip::visit (AST::ClosureExprInnerTyped &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1311,7 +1312,7 @@ AttrVisitor::visit (AST::ClosureExprInnerTyped &expr)\n \n   /* strip closure parameters if required - this is specifically\n    * allowed by spec */\n-  expand_closure_params (expr.get_params ());\n+  maybe_strip_closure_params (expr.get_params ());\n \n   // can't strip return type, but can strip sub-types\n   auto &type = expr.get_return_type ();\n@@ -1329,7 +1330,7 @@ AttrVisitor::visit (AST::ClosureExprInnerTyped &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ContinueExpr &expr)\n+CfgStrip::visit (AST::ContinueExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1340,7 +1341,7 @@ AttrVisitor::visit (AST::ContinueExpr &expr)\n     }\n }\n void\n-AttrVisitor::visit (AST::BreakExpr &expr)\n+CfgStrip::visit (AST::BreakExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1366,7 +1367,7 @@ AttrVisitor::visit (AST::BreakExpr &expr)\n     }\n }\n void\n-AttrVisitor::visit (AST::RangeFromToExpr &expr)\n+CfgStrip::visit (AST::RangeFromToExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * two direct descendant expressions, can strip ones below that */\n@@ -1390,7 +1391,7 @@ AttrVisitor::visit (AST::RangeFromToExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::RangeFromExpr &expr)\n+CfgStrip::visit (AST::RangeFromExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * direct descendant expression, can strip ones below that */\n@@ -1407,7 +1408,7 @@ AttrVisitor::visit (AST::RangeFromExpr &expr)\n \t\t   \"attributes are never allowed before range exprs\");\n }\n void\n-AttrVisitor::visit (AST::RangeToExpr &expr)\n+CfgStrip::visit (AST::RangeToExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * direct descendant expression, can strip ones below that */\n@@ -1424,12 +1425,12 @@ AttrVisitor::visit (AST::RangeToExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::RangeFullExpr &)\n+CfgStrip::visit (AST::RangeFullExpr &)\n {\n   // outer attributes never allowed before these, so no stripping\n }\n void\n-AttrVisitor::visit (AST::RangeFromToInclExpr &expr)\n+CfgStrip::visit (AST::RangeFromToInclExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * two direct descendant expressions, can strip ones below that */\n@@ -1453,7 +1454,7 @@ AttrVisitor::visit (AST::RangeFromToInclExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::RangeToInclExpr &expr)\n+CfgStrip::visit (AST::RangeToInclExpr &expr)\n {\n   /* outer attributes never allowed before these. while cannot strip\n    * direct descendant expression, can strip ones below that */\n@@ -1470,7 +1471,7 @@ AttrVisitor::visit (AST::RangeToInclExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ReturnExpr &expr)\n+CfgStrip::visit (AST::ReturnExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1501,7 +1502,7 @@ AttrVisitor::visit (AST::ReturnExpr &expr)\n    * can't do this either. */\n }\n void\n-AttrVisitor::visit (AST::UnsafeBlockExpr &expr)\n+CfgStrip::visit (AST::UnsafeBlockExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1520,7 +1521,7 @@ AttrVisitor::visit (AST::UnsafeBlockExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::LoopExpr &expr)\n+CfgStrip::visit (AST::LoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1539,7 +1540,7 @@ AttrVisitor::visit (AST::LoopExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::WhileLoopExpr &expr)\n+CfgStrip::visit (AST::WhileLoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1566,7 +1567,7 @@ AttrVisitor::visit (AST::WhileLoopExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::WhileLetLoopExpr &expr)\n+CfgStrip::visit (AST::WhileLetLoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1601,7 +1602,7 @@ AttrVisitor::visit (AST::WhileLetLoopExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::ForLoopExpr &expr)\n+CfgStrip::visit (AST::ForLoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1635,7 +1636,7 @@ AttrVisitor::visit (AST::ForLoopExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfExpr &expr)\n+CfgStrip::visit (AST::IfExpr &expr)\n {\n   // rust playground test shows that IfExpr does support outer attrs, at least\n   // when used as statement\n@@ -1665,7 +1666,7 @@ AttrVisitor::visit (AST::IfExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfExprConseqElse &expr)\n+CfgStrip::visit (AST::IfExprConseqElse &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1700,7 +1701,7 @@ AttrVisitor::visit (AST::IfExprConseqElse &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfExprConseqIf &expr)\n+CfgStrip::visit (AST::IfExprConseqIf &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1735,7 +1736,7 @@ AttrVisitor::visit (AST::IfExprConseqIf &expr)\n \t\t   \"position - outer attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfExprConseqIfLet &expr)\n+CfgStrip::visit (AST::IfExprConseqIfLet &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1771,7 +1772,7 @@ AttrVisitor::visit (AST::IfExprConseqIfLet &expr)\n \t\t   \"allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfLetExpr &expr)\n+CfgStrip::visit (AST::IfLetExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1806,7 +1807,7 @@ AttrVisitor::visit (AST::IfLetExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfLetExprConseqElse &expr)\n+CfgStrip::visit (AST::IfLetExprConseqElse &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1849,7 +1850,7 @@ AttrVisitor::visit (AST::IfLetExprConseqElse &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfLetExprConseqIf &expr)\n+CfgStrip::visit (AST::IfLetExprConseqIf &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1892,7 +1893,7 @@ AttrVisitor::visit (AST::IfLetExprConseqIf &expr)\n \t\t   \"position - outer attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::IfLetExprConseqIfLet &expr)\n+CfgStrip::visit (AST::IfLetExprConseqIfLet &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -1936,7 +1937,7 @@ AttrVisitor::visit (AST::IfLetExprConseqIfLet &expr)\n \t\t   \"allowed\");\n }\n void\n-AttrVisitor::visit (AST::MatchExpr &expr)\n+CfgStrip::visit (AST::MatchExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -2013,7 +2014,7 @@ AttrVisitor::visit (AST::MatchExpr &expr)\n     }\n }\n void\n-AttrVisitor::visit (AST::AwaitExpr &expr)\n+CfgStrip::visit (AST::AwaitExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -2033,7 +2034,7 @@ AttrVisitor::visit (AST::AwaitExpr &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::AsyncBlockExpr &expr)\n+CfgStrip::visit (AST::AsyncBlockExpr &expr)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (expr.get_outer_attrs ());\n@@ -2053,7 +2054,7 @@ AttrVisitor::visit (AST::AsyncBlockExpr &expr)\n }\n \n void\n-AttrVisitor::visit (AST::TypeParam &param)\n+CfgStrip::visit (AST::TypeParam &param)\n {\n   // outer attributes don't actually do anything, so ignore them\n \n@@ -2075,12 +2076,12 @@ AttrVisitor::visit (AST::TypeParam &param)\n     }\n }\n void\n-AttrVisitor::visit (AST::LifetimeWhereClauseItem &)\n+CfgStrip::visit (AST::LifetimeWhereClauseItem &)\n {\n   // shouldn't require\n }\n void\n-AttrVisitor::visit (AST::TypeBoundWhereClauseItem &item)\n+CfgStrip::visit (AST::TypeBoundWhereClauseItem &item)\n {\n   // for lifetimes shouldn't require\n \n@@ -2095,7 +2096,7 @@ AttrVisitor::visit (AST::TypeBoundWhereClauseItem &item)\n     bound->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::Method &method)\n+CfgStrip::visit (AST::Method &method)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (method.get_outer_attrs ());\n@@ -2112,11 +2113,11 @@ AttrVisitor::visit (AST::Method &method)\n   /* assuming you can't strip self param - wouldn't be a method\n    * anymore. spec allows outer attrs on self param, but doesn't\n    * specify whether cfg is used. */\n-  expand_self_param (method.get_self_param ());\n+  maybe_strip_self_param (method.get_self_param ());\n \n   /* strip method parameters if required - this is specifically\n    * allowed by spec */\n-  expand_function_params (method.get_function_params ());\n+  maybe_strip_function_params (method.get_function_params ());\n \n   if (method.has_return_type ())\n     {\n@@ -2129,7 +2130,7 @@ AttrVisitor::visit (AST::Method &method)\n     }\n \n   if (method.has_where_clause ())\n-    expand_where_clause (method.get_where_clause ());\n+    maybe_strip_where_clause (method.get_where_clause ());\n \n   /* body should always exist - if error state, should have returned\n    * before now */\n@@ -2142,7 +2143,7 @@ AttrVisitor::visit (AST::Method &method)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::Module &module)\n+CfgStrip::visit (AST::Module &module)\n {\n   // strip test based on outer attrs\n   expand_cfg_attrs (module.get_outer_attrs ());\n@@ -2165,10 +2166,10 @@ AttrVisitor::visit (AST::Module &module)\n     }\n \n   // strip items if required\n-  expand_pointer_allow_strip (module.get_items ());\n+  maybe_strip_pointer_allow_strip (module.get_items ());\n }\n void\n-AttrVisitor::visit (AST::ExternCrate &extern_crate)\n+CfgStrip::visit (AST::ExternCrate &extern_crate)\n {\n   // strip test based on outer attrs\n   expand_cfg_attrs (extern_crate.get_outer_attrs ());\n@@ -2186,22 +2187,22 @@ AttrVisitor::visit (AST::ExternCrate &extern_crate)\n     }\n }\n void\n-AttrVisitor::visit (AST::UseTreeGlob &)\n+CfgStrip::visit (AST::UseTreeGlob &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::UseTreeList &)\n+CfgStrip::visit (AST::UseTreeList &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::UseTreeRebind &)\n+CfgStrip::visit (AST::UseTreeRebind &)\n {\n   // shouldn't require?\n }\n void\n-AttrVisitor::visit (AST::UseDeclaration &use_decl)\n+CfgStrip::visit (AST::UseDeclaration &use_decl)\n {\n   // strip test based on outer attrs\n   expand_cfg_attrs (use_decl.get_outer_attrs ());\n@@ -2212,7 +2213,7 @@ AttrVisitor::visit (AST::UseDeclaration &use_decl)\n     }\n }\n void\n-AttrVisitor::visit (AST::Function &function)\n+CfgStrip::visit (AST::Function &function)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (function.get_outer_attrs ());\n@@ -2228,7 +2229,7 @@ AttrVisitor::visit (AST::Function &function)\n \n   /* strip function parameters if required - this is specifically\n    * allowed by spec */\n-  expand_function_params (function.get_function_params ());\n+  maybe_strip_function_params (function.get_function_params ());\n \n   if (function.has_return_type ())\n     {\n@@ -2241,7 +2242,7 @@ AttrVisitor::visit (AST::Function &function)\n     }\n \n   if (function.has_where_clause ())\n-    expand_where_clause (function.get_where_clause ());\n+    maybe_strip_where_clause (function.get_where_clause ());\n \n   /* body should always exist - if error state, should have returned\n    * before now */\n@@ -2254,7 +2255,7 @@ AttrVisitor::visit (AST::Function &function)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::TypeAlias &type_alias)\n+CfgStrip::visit (AST::TypeAlias &type_alias)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (type_alias.get_outer_attrs ());\n@@ -2269,15 +2270,15 @@ AttrVisitor::visit (AST::TypeAlias &type_alias)\n     param->accept_vis (*this);\n \n   if (type_alias.has_where_clause ())\n-    expand_where_clause (type_alias.get_where_clause ());\n+    maybe_strip_where_clause (type_alias.get_where_clause ());\n \n   auto &type = type_alias.get_type_aliased ();\n   type->accept_vis (*this);\n   if (type->is_marked_for_strip ())\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n }\n void\n-AttrVisitor::visit (AST::StructStruct &struct_item)\n+CfgStrip::visit (AST::StructStruct &struct_item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (struct_item.get_outer_attrs ());\n@@ -2292,10 +2293,10 @@ AttrVisitor::visit (AST::StructStruct &struct_item)\n     param->accept_vis (*this);\n \n   if (struct_item.has_where_clause ())\n-    expand_where_clause (struct_item.get_where_clause ());\n+    maybe_strip_where_clause (struct_item.get_where_clause ());\n }\n void\n-AttrVisitor::visit (AST::TupleStruct &tuple_struct)\n+CfgStrip::visit (AST::TupleStruct &tuple_struct)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (tuple_struct.get_outer_attrs ());\n@@ -2311,13 +2312,13 @@ AttrVisitor::visit (AST::TupleStruct &tuple_struct)\n \n   /* strip struct fields if required - this is presumably\n    * allowed by spec */\n-  expand_tuple_fields (tuple_struct.get_fields ());\n+  maybe_strip_tuple_fields (tuple_struct.get_fields ());\n \n   if (tuple_struct.has_where_clause ())\n-    expand_where_clause (tuple_struct.get_where_clause ());\n+    maybe_strip_where_clause (tuple_struct.get_where_clause ());\n }\n void\n-AttrVisitor::visit (AST::EnumItem &item)\n+CfgStrip::visit (AST::EnumItem &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2328,7 +2329,7 @@ AttrVisitor::visit (AST::EnumItem &item)\n     }\n }\n void\n-AttrVisitor::visit (AST::EnumItemTuple &item)\n+CfgStrip::visit (AST::EnumItemTuple &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2340,10 +2341,10 @@ AttrVisitor::visit (AST::EnumItemTuple &item)\n \n   /* strip item fields if required - this is presumably\n    * allowed by spec */\n-  expand_tuple_fields (item.get_tuple_fields ());\n+  maybe_strip_tuple_fields (item.get_tuple_fields ());\n }\n void\n-AttrVisitor::visit (AST::EnumItemStruct &item)\n+CfgStrip::visit (AST::EnumItemStruct &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2355,10 +2356,10 @@ AttrVisitor::visit (AST::EnumItemStruct &item)\n \n   /* strip item fields if required - this is presumably\n    * allowed by spec */\n-  expand_struct_fields (item.get_struct_fields ());\n+  maybe_strip_struct_fields (item.get_struct_fields ());\n }\n void\n-AttrVisitor::visit (AST::EnumItemDiscriminant &item)\n+CfgStrip::visit (AST::EnumItemDiscriminant &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2379,7 +2380,7 @@ AttrVisitor::visit (AST::EnumItemDiscriminant &item)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::Enum &enum_item)\n+CfgStrip::visit (AST::Enum &enum_item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (enum_item.get_outer_attrs ());\n@@ -2394,14 +2395,14 @@ AttrVisitor::visit (AST::Enum &enum_item)\n     param->accept_vis (*this);\n \n   if (enum_item.has_where_clause ())\n-    expand_where_clause (enum_item.get_where_clause ());\n+    maybe_strip_where_clause (enum_item.get_where_clause ());\n \n   /* strip enum fields if required - this is presumably\n    * allowed by spec */\n-  expand_pointer_allow_strip (enum_item.get_variants ());\n+  maybe_strip_pointer_allow_strip (enum_item.get_variants ());\n }\n void\n-AttrVisitor::visit (AST::Union &union_item)\n+CfgStrip::visit (AST::Union &union_item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (union_item.get_outer_attrs ());\n@@ -2416,14 +2417,14 @@ AttrVisitor::visit (AST::Union &union_item)\n     param->accept_vis (*this);\n \n   if (union_item.has_where_clause ())\n-    expand_where_clause (union_item.get_where_clause ());\n+    maybe_strip_where_clause (union_item.get_where_clause ());\n \n   /* strip union fields if required - this is presumably\n    * allowed by spec */\n-  expand_struct_fields (union_item.get_variants ());\n+  maybe_strip_struct_fields (union_item.get_variants ());\n }\n void\n-AttrVisitor::visit (AST::ConstantItem &const_item)\n+CfgStrip::visit (AST::ConstantItem &const_item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (const_item.get_outer_attrs ());\n@@ -2451,7 +2452,7 @@ AttrVisitor::visit (AST::ConstantItem &const_item)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::StaticItem &static_item)\n+CfgStrip::visit (AST::StaticItem &static_item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (static_item.get_outer_attrs ());\n@@ -2479,7 +2480,7 @@ AttrVisitor::visit (AST::StaticItem &static_item)\n \t\t   \"attributes not allowed\");\n }\n void\n-AttrVisitor::visit (AST::TraitItemFunc &item)\n+CfgStrip::visit (AST::TraitItemFunc &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2489,7 +2490,7 @@ AttrVisitor::visit (AST::TraitItemFunc &item)\n       return;\n     }\n \n-  expand_trait_function_decl (item.get_trait_function_decl ());\n+  maybe_strip_trait_function_decl (item.get_trait_function_decl ());\n \n   if (item.has_definition ())\n     {\n@@ -2505,7 +2506,7 @@ AttrVisitor::visit (AST::TraitItemFunc &item)\n     }\n }\n void\n-AttrVisitor::visit (AST::TraitItemMethod &item)\n+CfgStrip::visit (AST::TraitItemMethod &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2515,7 +2516,7 @@ AttrVisitor::visit (AST::TraitItemMethod &item)\n       return;\n     }\n \n-  expand_trait_method_decl (item.get_trait_method_decl ());\n+  maybe_strip_trait_method_decl (item.get_trait_method_decl ());\n \n   if (item.has_definition ())\n     {\n@@ -2531,7 +2532,7 @@ AttrVisitor::visit (AST::TraitItemMethod &item)\n     }\n }\n void\n-AttrVisitor::visit (AST::TraitItemConst &item)\n+CfgStrip::visit (AST::TraitItemConst &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2562,7 +2563,7 @@ AttrVisitor::visit (AST::TraitItemConst &item)\n     }\n }\n void\n-AttrVisitor::visit (AST::TraitItemType &item)\n+CfgStrip::visit (AST::TraitItemType &item)\n {\n   // initial test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2580,7 +2581,7 @@ AttrVisitor::visit (AST::TraitItemType &item)\n     }\n }\n void\n-AttrVisitor::visit (AST::Trait &trait)\n+CfgStrip::visit (AST::Trait &trait)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (trait.get_outer_attrs ());\n@@ -2610,12 +2611,12 @@ AttrVisitor::visit (AST::Trait &trait)\n     }\n \n   if (trait.has_where_clause ())\n-    expand_where_clause (trait.get_where_clause ());\n+    maybe_strip_where_clause (trait.get_where_clause ());\n \n-  expand_pointer_allow_strip (trait.get_trait_items ());\n+  maybe_strip_pointer_allow_strip (trait.get_trait_items ());\n }\n void\n-AttrVisitor::visit (AST::InherentImpl &impl)\n+CfgStrip::visit (AST::InherentImpl &impl)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (impl.get_outer_attrs ());\n@@ -2644,12 +2645,12 @@ AttrVisitor::visit (AST::InherentImpl &impl)\n     rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n   if (impl.has_where_clause ())\n-    expand_where_clause (impl.get_where_clause ());\n+    maybe_strip_where_clause (impl.get_where_clause ());\n \n-  expand_pointer_allow_strip (impl.get_impl_items ());\n+  maybe_strip_pointer_allow_strip (impl.get_impl_items ());\n }\n void\n-AttrVisitor::visit (AST::TraitImpl &impl)\n+CfgStrip::visit (AST::TraitImpl &impl)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (impl.get_outer_attrs ());\n@@ -2684,13 +2685,13 @@ AttrVisitor::visit (AST::TraitImpl &impl)\n \t\t   \"cannot strip typepath in this position\");\n \n   if (impl.has_where_clause ())\n-    expand_where_clause (impl.get_where_clause ());\n+    maybe_strip_where_clause (impl.get_where_clause ());\n \n-  expand_pointer_allow_strip (impl.get_impl_items ());\n+  maybe_strip_pointer_allow_strip (impl.get_impl_items ());\n }\n \n void\n-AttrVisitor::visit (AST::ExternalTypeItem &item)\n+CfgStrip::visit (AST::ExternalTypeItem &item)\n {\n   expand_cfg_attrs (item.get_outer_attrs ());\n \n@@ -2703,7 +2704,7 @@ AttrVisitor::visit (AST::ExternalTypeItem &item)\n }\n \n void\n-AttrVisitor::visit (AST::ExternalStaticItem &item)\n+CfgStrip::visit (AST::ExternalStaticItem &item)\n {\n   // strip test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2721,7 +2722,7 @@ AttrVisitor::visit (AST::ExternalStaticItem &item)\n }\n \n void\n-AttrVisitor::visit (AST::ExternalFunctionItem &item)\n+CfgStrip::visit (AST::ExternalFunctionItem &item)\n {\n   // strip test based on outer attrs\n   expand_cfg_attrs (item.get_outer_attrs ());\n@@ -2778,11 +2779,11 @@ AttrVisitor::visit (AST::ExternalFunctionItem &item)\n     }\n \n   if (item.has_where_clause ())\n-    expand_where_clause (item.get_where_clause ());\n+    maybe_strip_where_clause (item.get_where_clause ());\n }\n \n void\n-AttrVisitor::visit (AST::ExternBlock &block)\n+CfgStrip::visit (AST::ExternBlock &block)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (block.get_outer_attrs ());\n@@ -2800,21 +2801,21 @@ AttrVisitor::visit (AST::ExternBlock &block)\n       return;\n     }\n \n-  expand_pointer_allow_strip (block.get_extern_items ());\n+  maybe_strip_pointer_allow_strip (block.get_extern_items ());\n }\n \n // I don't think it would be possible to strip macros without expansion\n void\n-AttrVisitor::visit (AST::MacroMatchFragment &)\n+CfgStrip::visit (AST::MacroMatchFragment &)\n {}\n void\n-AttrVisitor::visit (AST::MacroMatchRepetition &)\n+CfgStrip::visit (AST::MacroMatchRepetition &)\n {}\n void\n-AttrVisitor::visit (AST::MacroMatcher &)\n+CfgStrip::visit (AST::MacroMatcher &)\n {}\n void\n-AttrVisitor::visit (AST::MacroRulesDefinition &rules_def)\n+CfgStrip::visit (AST::MacroRulesDefinition &rules_def)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (rules_def.get_outer_attrs ());\n@@ -2826,31 +2827,31 @@ AttrVisitor::visit (AST::MacroRulesDefinition &rules_def)\n }\n \n void\n-AttrVisitor::visit (AST::MetaItemPath &)\n+CfgStrip::visit (AST::MetaItemPath &)\n {}\n void\n-AttrVisitor::visit (AST::MetaItemSeq &)\n+CfgStrip::visit (AST::MetaItemSeq &)\n {}\n void\n-AttrVisitor::visit (AST::MetaWord &)\n+CfgStrip::visit (AST::MetaWord &)\n {}\n void\n-AttrVisitor::visit (AST::MetaNameValueStr &)\n+CfgStrip::visit (AST::MetaNameValueStr &)\n {}\n void\n-AttrVisitor::visit (AST::MetaListPaths &)\n+CfgStrip::visit (AST::MetaListPaths &)\n {}\n void\n-AttrVisitor::visit (AST::MetaListNameValueStr &)\n+CfgStrip::visit (AST::MetaListNameValueStr &)\n {}\n \n void\n-AttrVisitor::visit (AST::LiteralPattern &)\n+CfgStrip::visit (AST::LiteralPattern &)\n {\n   // not possible\n }\n void\n-AttrVisitor::visit (AST::IdentifierPattern &pattern)\n+CfgStrip::visit (AST::IdentifierPattern &pattern)\n {\n   // can only strip sub-patterns of the inner pattern to bind\n   if (!pattern.has_pattern_to_bind ())\n@@ -2863,22 +2864,22 @@ AttrVisitor::visit (AST::IdentifierPattern &pattern)\n \t\t   \"cannot strip pattern in this position\");\n }\n void\n-AttrVisitor::visit (AST::WildcardPattern &)\n+CfgStrip::visit (AST::WildcardPattern &)\n {\n   // not possible\n }\n void\n-AttrVisitor::visit (AST::RestPattern &)\n+CfgStrip::visit (AST::RestPattern &)\n {\n   // not possible\n }\n void\n-AttrVisitor::visit (AST::RangePatternBoundLiteral &)\n+CfgStrip::visit (AST::RangePatternBoundLiteral &)\n {\n   // not possible\n }\n void\n-AttrVisitor::visit (AST::RangePatternBoundPath &bound)\n+CfgStrip::visit (AST::RangePatternBoundPath &bound)\n {\n   // can expand path, but not strip it directly\n   auto &path = bound.get_path ();\n@@ -2887,7 +2888,7 @@ AttrVisitor::visit (AST::RangePatternBoundPath &bound)\n     rust_error_at (path.get_locus (), \"cannot strip path in this position\");\n }\n void\n-AttrVisitor::visit (AST::RangePatternBoundQualPath &bound)\n+CfgStrip::visit (AST::RangePatternBoundQualPath &bound)\n {\n   // can expand path, but not strip it directly\n   auto &path = bound.get_qualified_path ();\n@@ -2896,14 +2897,14 @@ AttrVisitor::visit (AST::RangePatternBoundQualPath &bound)\n     rust_error_at (path.get_locus (), \"cannot strip path in this position\");\n }\n void\n-AttrVisitor::visit (AST::RangePattern &pattern)\n+CfgStrip::visit (AST::RangePattern &pattern)\n {\n   // should have no capability to strip lower or upper bounds, only expand\n   pattern.get_lower_bound ()->accept_vis (*this);\n   pattern.get_upper_bound ()->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::ReferencePattern &pattern)\n+CfgStrip::visit (AST::ReferencePattern &pattern)\n {\n   auto &sub_pattern = pattern.get_referenced_pattern ();\n   sub_pattern->accept_vis (*this);\n@@ -2912,7 +2913,7 @@ AttrVisitor::visit (AST::ReferencePattern &pattern)\n \t\t   \"cannot strip pattern in this position\");\n }\n void\n-AttrVisitor::visit (AST::StructPatternFieldTuplePat &field)\n+CfgStrip::visit (AST::StructPatternFieldTuplePat &field)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (field.get_outer_attrs ());\n@@ -2930,7 +2931,7 @@ AttrVisitor::visit (AST::StructPatternFieldTuplePat &field)\n \t\t   \"cannot strip pattern in this position\");\n }\n void\n-AttrVisitor::visit (AST::StructPatternFieldIdentPat &field)\n+CfgStrip::visit (AST::StructPatternFieldIdentPat &field)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (field.get_outer_attrs ());\n@@ -2948,7 +2949,7 @@ AttrVisitor::visit (AST::StructPatternFieldIdentPat &field)\n \t\t   \"cannot strip pattern in this position\");\n }\n void\n-AttrVisitor::visit (AST::StructPatternFieldIdent &field)\n+CfgStrip::visit (AST::StructPatternFieldIdent &field)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (field.get_outer_attrs ());\n@@ -2959,7 +2960,7 @@ AttrVisitor::visit (AST::StructPatternFieldIdent &field)\n     }\n }\n void\n-AttrVisitor::visit (AST::StructPattern &pattern)\n+CfgStrip::visit (AST::StructPattern &pattern)\n {\n   // expand (but don't strip) path\n   auto &path = pattern.get_path ();\n@@ -2975,7 +2976,7 @@ AttrVisitor::visit (AST::StructPattern &pattern)\n   auto &elems = pattern.get_struct_pattern_elems ();\n \n   // assuming you can strip struct pattern fields\n-  expand_pointer_allow_strip (elems.get_struct_pattern_fields ());\n+  maybe_strip_pointer_allow_strip (elems.get_struct_pattern_fields ());\n \n   // assuming you can strip the \"..\" part\n   if (elems.has_etc ())\n@@ -2986,7 +2987,7 @@ AttrVisitor::visit (AST::StructPattern &pattern)\n     }\n }\n void\n-AttrVisitor::visit (AST::TupleStructItemsNoRange &tuple_items)\n+CfgStrip::visit (AST::TupleStructItemsNoRange &tuple_items)\n {\n   // can't strip individual patterns, only sub-patterns\n   for (auto &pattern : tuple_items.get_patterns ())\n@@ -3000,7 +3001,7 @@ AttrVisitor::visit (AST::TupleStructItemsNoRange &tuple_items)\n     }\n }\n void\n-AttrVisitor::visit (AST::TupleStructItemsRange &tuple_items)\n+CfgStrip::visit (AST::TupleStructItemsRange &tuple_items)\n {\n   // can't strip individual patterns, only sub-patterns\n   for (auto &lower_pattern : tuple_items.get_lower_patterns ())\n@@ -3023,7 +3024,7 @@ AttrVisitor::visit (AST::TupleStructItemsRange &tuple_items)\n     }\n }\n void\n-AttrVisitor::visit (AST::TupleStructPattern &pattern)\n+CfgStrip::visit (AST::TupleStructPattern &pattern)\n {\n   // expand (but don't strip) path\n   auto &path = pattern.get_path ();\n@@ -3035,7 +3036,7 @@ AttrVisitor::visit (AST::TupleStructPattern &pattern)\n     pattern.get_items ()->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::TuplePatternItemsMultiple &tuple_items)\n+CfgStrip::visit (AST::TuplePatternItemsMultiple &tuple_items)\n {\n   // can't strip individual patterns, only sub-patterns\n   for (auto &pattern : tuple_items.get_patterns ())\n@@ -3049,7 +3050,7 @@ AttrVisitor::visit (AST::TuplePatternItemsMultiple &tuple_items)\n     }\n }\n void\n-AttrVisitor::visit (AST::TuplePatternItemsRanged &tuple_items)\n+CfgStrip::visit (AST::TuplePatternItemsRanged &tuple_items)\n {\n   // can't strip individual patterns, only sub-patterns\n   for (auto &lower_pattern : tuple_items.get_lower_patterns ())\n@@ -3072,13 +3073,13 @@ AttrVisitor::visit (AST::TuplePatternItemsRanged &tuple_items)\n     }\n }\n void\n-AttrVisitor::visit (AST::TuplePattern &pattern)\n+CfgStrip::visit (AST::TuplePattern &pattern)\n {\n   if (pattern.has_tuple_pattern_items ())\n     pattern.get_items ()->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::GroupedPattern &pattern)\n+CfgStrip::visit (AST::GroupedPattern &pattern)\n {\n   // can't strip inner pattern, only sub-patterns\n   auto &pattern_in_parens = pattern.get_pattern_in_parens ();\n@@ -3090,7 +3091,7 @@ AttrVisitor::visit (AST::GroupedPattern &pattern)\n \t\t   \"cannot strip pattern in this position\");\n }\n void\n-AttrVisitor::visit (AST::SlicePattern &pattern)\n+CfgStrip::visit (AST::SlicePattern &pattern)\n {\n   // can't strip individual patterns, only sub-patterns\n   for (auto &item : pattern.get_items ())\n@@ -3104,7 +3105,7 @@ AttrVisitor::visit (AST::SlicePattern &pattern)\n     }\n }\n void\n-AttrVisitor::visit (AST::AltPattern &pattern)\n+CfgStrip::visit (AST::AltPattern &pattern)\n {\n   // can't strip individual patterns, only sub-patterns\n   for (auto &alt : pattern.get_alts ())\n@@ -3119,12 +3120,12 @@ AttrVisitor::visit (AST::AltPattern &pattern)\n }\n \n void\n-AttrVisitor::visit (AST::EmptyStmt &)\n+CfgStrip::visit (AST::EmptyStmt &)\n {\n   // assuming no outer attributes, so nothing can happen\n }\n void\n-AttrVisitor::visit (AST::LetStmt &stmt)\n+CfgStrip::visit (AST::LetStmt &stmt)\n {\n   // initial strip test based on outer attrs\n   expand_cfg_attrs (stmt.get_outer_attrs ());\n@@ -3167,7 +3168,7 @@ AttrVisitor::visit (AST::LetStmt &stmt)\n     }\n }\n void\n-AttrVisitor::visit (AST::ExprStmtWithoutBlock &stmt)\n+CfgStrip::visit (AST::ExprStmtWithoutBlock &stmt)\n {\n   // outer attributes associated with expr, so rely on expr\n \n@@ -3185,7 +3186,7 @@ AttrVisitor::visit (AST::ExprStmtWithoutBlock &stmt)\n     }\n }\n void\n-AttrVisitor::visit (AST::ExprStmtWithBlock &stmt)\n+CfgStrip::visit (AST::ExprStmtWithBlock &stmt)\n {\n   // outer attributes associated with expr, so rely on expr\n \n@@ -3204,7 +3205,7 @@ AttrVisitor::visit (AST::ExprStmtWithBlock &stmt)\n }\n \n void\n-AttrVisitor::visit (AST::TraitBound &bound)\n+CfgStrip::visit (AST::TraitBound &bound)\n {\n   // nothing in for lifetimes to strip\n \n@@ -3216,21 +3217,21 @@ AttrVisitor::visit (AST::TraitBound &bound)\n \t\t   \"cannot strip type path in this position\");\n }\n void\n-AttrVisitor::visit (AST::ImplTraitType &type)\n+CfgStrip::visit (AST::ImplTraitType &type)\n {\n   // don't strip directly, only components of bounds\n   for (auto &bound : type.get_type_param_bounds ())\n     bound->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::TraitObjectType &type)\n+CfgStrip::visit (AST::TraitObjectType &type)\n {\n   // don't strip directly, only components of bounds\n   for (auto &bound : type.get_type_param_bounds ())\n     bound->accept_vis (*this);\n }\n void\n-AttrVisitor::visit (AST::ParenthesisedType &type)\n+CfgStrip::visit (AST::ParenthesisedType &type)\n {\n   // expand but don't strip inner type\n   auto &inner_type = type.get_type_in_parens ();\n@@ -3240,19 +3241,19 @@ AttrVisitor::visit (AST::ParenthesisedType &type)\n \t\t   \"cannot strip type in this position\");\n }\n void\n-AttrVisitor::visit (AST::ImplTraitTypeOneBound &type)\n+CfgStrip::visit (AST::ImplTraitTypeOneBound &type)\n {\n   // no stripping possible\n   visit (type.get_trait_bound ());\n }\n void\n-AttrVisitor::visit (AST::TraitObjectTypeOneBound &type)\n+CfgStrip::visit (AST::TraitObjectTypeOneBound &type)\n {\n   // no stripping possible\n   visit (type.get_trait_bound ());\n }\n void\n-AttrVisitor::visit (AST::TupleType &type)\n+CfgStrip::visit (AST::TupleType &type)\n {\n   // TODO: assuming that types can't be stripped as types don't have outer\n   // attributes\n@@ -3265,12 +3266,12 @@ AttrVisitor::visit (AST::TupleType &type)\n     }\n }\n void\n-AttrVisitor::visit (AST::NeverType &)\n+CfgStrip::visit (AST::NeverType &)\n {\n   // no stripping possible\n }\n void\n-AttrVisitor::visit (AST::RawPointerType &type)\n+CfgStrip::visit (AST::RawPointerType &type)\n {\n   // expand but don't strip type pointed to\n   auto &pointed_type = type.get_type_pointed_to ();\n@@ -3280,7 +3281,7 @@ AttrVisitor::visit (AST::RawPointerType &type)\n \t\t   \"cannot strip type in this position\");\n }\n void\n-AttrVisitor::visit (AST::ReferenceType &type)\n+CfgStrip::visit (AST::ReferenceType &type)\n {\n   // expand but don't strip type referenced\n   auto &referenced_type = type.get_type_referenced ();\n@@ -3290,7 +3291,7 @@ AttrVisitor::visit (AST::ReferenceType &type)\n \t\t   \"cannot strip type in this position\");\n }\n void\n-AttrVisitor::visit (AST::ArrayType &type)\n+CfgStrip::visit (AST::ArrayType &type)\n {\n   // expand but don't strip type referenced\n   auto &base_type = type.get_elem_type ();\n@@ -3307,7 +3308,7 @@ AttrVisitor::visit (AST::ArrayType &type)\n \t\t   \"cannot strip expression in this position\");\n }\n void\n-AttrVisitor::visit (AST::SliceType &type)\n+CfgStrip::visit (AST::SliceType &type)\n {\n   // expand but don't strip elem type\n   auto &elem_type = type.get_elem_type ();\n@@ -3317,12 +3318,12 @@ AttrVisitor::visit (AST::SliceType &type)\n \t\t   \"cannot strip type in this position\");\n }\n void\n-AttrVisitor::visit (AST::InferredType &)\n+CfgStrip::visit (AST::InferredType &)\n {\n   // none possible\n }\n void\n-AttrVisitor::visit (AST::BareFunctionType &type)\n+CfgStrip::visit (AST::BareFunctionType &type)\n {\n   // seem to be no generics\n ", "previous_filename": "gcc/rust/expand/rust-attribute-visitor.cc"}, {"sha": "34a8e565292db38615bdfa606280da03fa9675bb", "filename": "gcc/rust/expand/rust-cfg-strip.h", "status": "renamed", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h?ref=3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "patch": "@@ -18,36 +18,35 @@\n \n #include \"rust-ast-visitor.h\"\n #include \"rust-ast.h\"\n-#include \"rust-macro-expand.h\"\n \n namespace Rust {\n-// Visitor used to expand attributes.\n-class AttrVisitor : public AST::ASTVisitor\n+// Visitor used to maybe_strip attributes.\n+class CfgStrip : public AST::ASTVisitor\n {\n private:\n public:\n-  AttrVisitor () {}\n+  CfgStrip () {}\n \n   /* Run the AttrVisitor on an entire crate */\n   void go (AST::Crate &crate);\n \n-  void expand_struct_fields (std::vector<AST::StructField> &fields);\n-  void expand_tuple_fields (std::vector<AST::TupleField> &fields);\n-  void expand_function_params (std::vector<AST::FunctionParam> &params);\n-  void expand_generic_args (AST::GenericArgs &args);\n-  void expand_qualified_path_type (AST::QualifiedPathType &path_type);\n-  void expand_closure_params (std::vector<AST::ClosureParam> &params);\n-  void expand_self_param (AST::SelfParam &self_param);\n-  void expand_where_clause (AST::WhereClause &where_clause);\n-  void expand_trait_function_decl (AST::TraitFunctionDecl &decl);\n-  void expand_trait_method_decl (AST::TraitMethodDecl &decl);\n+  void maybe_strip_struct_fields (std::vector<AST::StructField> &fields);\n+  void maybe_strip_tuple_fields (std::vector<AST::TupleField> &fields);\n+  void maybe_strip_function_params (std::vector<AST::FunctionParam> &params);\n+  void maybe_strip_generic_args (AST::GenericArgs &args);\n+  void maybe_strip_qualified_path_type (AST::QualifiedPathType &path_type);\n+  void maybe_strip_closure_params (std::vector<AST::ClosureParam> &params);\n+  void maybe_strip_self_param (AST::SelfParam &self_param);\n+  void maybe_strip_where_clause (AST::WhereClause &where_clause);\n+  void maybe_strip_trait_function_decl (AST::TraitFunctionDecl &decl);\n+  void maybe_strip_trait_method_decl (AST::TraitMethodDecl &decl);\n \n   /**\n-   * Expand a set of values, erasing them if they are marked for strip.\n+   * maybe_strip a set of values, erasing them if they are marked for strip.\n    *\n    * @param values Iterable reference over values to replace or erase\n    */\n-  template <typename T> void expand_pointer_allow_strip (T &values)\n+  template <typename T> void maybe_strip_pointer_allow_strip (T &values)\n   {\n     for (auto it = values.begin (); it != values.end ();)\n       {", "previous_filename": "gcc/rust/expand/rust-attribute-visitor.h"}, {"sha": "fe401aa868e7def056f5d863c057fca69af23e14", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "patch": "@@ -20,7 +20,7 @@\n #include \"rust-macro-builtins.h\"\n #include \"rust-ast-fragment.h\"\n #include \"rust-ast.h\"\n-#include \"rust-attribute-visitor.h\"\n+#include \"rust-cfg-strip.h\"\n #include \"rust-diagnostics.h\"\n #include \"rust-early-name-resolver.h\"\n #include \"rust-expr.h\""}, {"sha": "c28f4b67703faa0e9c2d0d19e6715be9316784fe", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "patch": "@@ -22,7 +22,7 @@\n #include \"rust-ast-visitor.h\"\n #include \"rust-diagnostics.h\"\n #include \"rust-parse.h\"\n-#include \"rust-attribute-visitor.h\"\n+#include \"rust-cfg-strip.h\"\n #include \"rust-early-name-resolver.h\"\n \n namespace Rust {"}, {"sha": "b8fa0c0b5b0330e88967e88a7a38c83645814d8b", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=3eb5dcb67c40a2d26fe05442d1d64dcb3b9d1d09", "patch": "@@ -40,7 +40,7 @@\n #include \"rust-extern-crate.h\"\n #include \"rust-attributes.h\"\n #include \"rust-early-name-resolver.h\"\n-#include \"rust-attribute-visitor.h\"\n+#include \"rust-cfg-strip.h\"\n #include \"rust-expand-visitor.h\"\n \n #include \"diagnostic.h\"\n@@ -848,7 +848,7 @@ Session::expansion (AST::Crate &crate)\n \n   while (!fixed_point_reached && iterations < cfg.recursion_limit)\n     {\n-      AttrVisitor ().go (crate);\n+      CfgStrip ().go (crate);\n       Resolver::EarlyNameResolver ().go (crate);\n       ExpandVisitor (expander).go (crate);\n "}]}