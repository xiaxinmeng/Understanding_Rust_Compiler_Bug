{"sha": "df8690f28379795a44aa4b6c737df08828168b6a", "node_id": "C_kwDOANBUbNoAKGRmODY5MGYyODM3OTc5NWE0NGFhNGI2YzczN2RmMDg4MjgxNjhiNmE", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-11-09T10:32:20Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-11-09T10:37:17Z"}, "message": "ipa: Fix segfault when remapping debug_binds with expressions (PR 103132)\n\nMy initial implementation of the method\nipa_param_body_adjustments::remap_with_debug_expressions was based on\nthe assumption that if it was asked to remap an expression (as opposed\nto a simple SSA_NAME), the expression would not contain an SSA_NAME\noperand which is to be debug-reset.  While that is true for when\ncalled from ipa_param_body_adjustments::prepare_debug_expressions, it\nturns out it is not true when invoked from remap_gimple_stmt in\ntree-inline.c.  This patch adds a simple logic to handle such cases\nand simply map the entire value to NULL_TREE in those cases.\n\ngcc/ChangeLog:\n\n2021-11-08  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103132\n\t* ipa-param-manipulation.c (replace_with_mapped_expr): Early\n\treturn with error_mark_mode when part of expression is mapped to\n\tNULL.\n\t(ipa_param_body_adjustments::remap_with_debug_expressions): Set\n\tmapped value to NULL if walk_tree returns error_mark_mode.\n\ngcc/testsuite/ChangeLog:\n\n2021-11-08  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103132\n\t* gcc.dg/ipa/pr103132.c: New test.", "tree": {"sha": "2753929a1be7fd687d5472c67569bf8505933d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2753929a1be7fd687d5472c67569bf8505933d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df8690f28379795a44aa4b6c737df08828168b6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmGKT10ACgkQv2PBvD+k\nNUBTmw/+IB8J+2SKEoNTfFT8Umhlzm+JPvNbx5wYwuWPec50d3vLiA2Td3VSNnDb\n1H12ECd+sDyy3OXCjXHIUrNH/3L1vr3GlowClEoaPo9j+O6lwkRm/3ebwHx/4aOv\n6dHcSec1cvjGOvEUildGc/Bjo4grMD/I/G4fR8yJDo1G1YiF3effP5bZYgXumyGO\n+ct3zpHfz8MPk+P6GemSmaRfAKUtHgZyzPpxSgVFRBpoicJEW4ZxoOJksaxex6Ek\noP6vfibA8t8ur8WsM5pqpc5UhuDDSgS1CYbDfTqwjjTYGCY/xraMnyJzD//kn7Ld\neHbqxYCBAjlP0BcWNMakdi+kzeNSiNrgMuErlr0Zz0XW1SCS9Be1rtYuYSmWkl6w\n2KZeO4iLz4DZdOKIB2Iq/O91Rte28ketuMntOuYllf1cJJgEoPPn/iO4xTBQ98j4\nr41GET7Ore/bJkmwLmjLfcmoI4rrt1mfLeNz3vkyqhW6BbON3MXGqakBwdnlstnG\nm7y3NlXrtHo9mQMb4toA8Epes+QELERnDEQPv/6UeEkyFlcSz7RvEXy8YKsy4NKm\nV9gR7WUu3hYKPFG9/T7mwRlnVY2NUx2Hton2NlNpdXW+uslPqOxCS/rd7G5KaFPe\n8iv7uGFgXsTLohCNvJ87mWbtxLEaZ3hnublDqxn8imtZDQWQN5Y=\n=yis2\n-----END PGP SIGNATURE-----", "payload": "tree 2753929a1be7fd687d5472c67569bf8505933d8e\nparent 77eb8c649d6dff15e63e2ea71a4a1b513a4be844\nauthor Martin Jambor <mjambor@suse.cz> 1636453940 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1636454237 +0100\n\nipa: Fix segfault when remapping debug_binds with expressions (PR 103132)\n\nMy initial implementation of the method\nipa_param_body_adjustments::remap_with_debug_expressions was based on\nthe assumption that if it was asked to remap an expression (as opposed\nto a simple SSA_NAME), the expression would not contain an SSA_NAME\noperand which is to be debug-reset.  While that is true for when\ncalled from ipa_param_body_adjustments::prepare_debug_expressions, it\nturns out it is not true when invoked from remap_gimple_stmt in\ntree-inline.c.  This patch adds a simple logic to handle such cases\nand simply map the entire value to NULL_TREE in those cases.\n\ngcc/ChangeLog:\n\n2021-11-08  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103132\n\t* ipa-param-manipulation.c (replace_with_mapped_expr): Early\n\treturn with error_mark_mode when part of expression is mapped to\n\tNULL.\n\t(ipa_param_body_adjustments::remap_with_debug_expressions): Set\n\tmapped value to NULL if walk_tree returns error_mark_mode.\n\ngcc/testsuite/ChangeLog:\n\n2021-11-08  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103132\n\t* gcc.dg/ipa/pr103132.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8690f28379795a44aa4b6c737df08828168b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8690f28379795a44aa4b6c737df08828168b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8690f28379795a44aa4b6c737df08828168b6a/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77eb8c649d6dff15e63e2ea71a4a1b513a4be844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eb8c649d6dff15e63e2ea71a4a1b513a4be844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77eb8c649d6dff15e63e2ea71a4a1b513a4be844"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "4610fc4ac030f0fcd9eb47221491f4743de034f6", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8690f28379795a44aa4b6c737df08828168b6a/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8690f28379795a44aa4b6c737df08828168b6a/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=df8690f28379795a44aa4b6c737df08828168b6a", "patch": "@@ -1071,8 +1071,9 @@ ipa_param_body_adjustments::mark_dead_statements (tree dead_param,\n }\n \n /* Callback to walk_tree.  If REMAP is an SSA_NAME that is present in hash_map\n-   passed in DATA, replace it with unshared version of what it was mapped\n-   to.  */\n+   passed in DATA, replace it with unshared version of what it was mapped to.\n+   If an SSA argument would be remapped to NULL, the whole operation needs to\n+   abort which is signaled by returning error_mark_node.  */\n \n static tree\n replace_with_mapped_expr (tree *remap, int *walk_subtrees, void *data)\n@@ -1089,7 +1090,11 @@ replace_with_mapped_expr (tree *remap, int *walk_subtrees, void *data)\n \n   hash_map<tree, tree> *equivs = (hash_map<tree, tree> *) data;\n   if (tree *p = equivs->get (*remap))\n-    *remap = unshare_expr (*p);\n+    {\n+      if (!*p)\n+\treturn error_mark_node;\n+      *remap = unshare_expr (*p);\n+    }\n   return 0;\n }\n \n@@ -1100,16 +1105,22 @@ void\n ipa_param_body_adjustments::remap_with_debug_expressions (tree *t)\n {\n   /* If *t is an SSA_NAME which should have its debug statements reset, it is\n-     mapped to NULL in the hash_map.  We need to handle that case separately or\n-     otherwise the walker would segfault.  No expression that is more\n-     complicated than that can have its operands mapped to NULL.  */\n+     mapped to NULL in the hash_map.\n+\n+     It is perhaps simpler to handle the SSA_NAME cases directly and only\n+     invoke walk_tree on more complex expressions.  When\n+     remap_with_debug_expressions is called from tree-inline.c, a to-be-reset\n+     SSA_NAME can be an operand to such expressions and the entire debug\n+     variable we are remapping should be reset.  This is signaled by walk_tree\n+     returning error_mark_node and done by setting *t to NULL.  */\n   if (TREE_CODE (*t) == SSA_NAME)\n     {\n       if (tree *p = m_dead_ssa_debug_equiv.get (*t))\n \t*t = *p;\n     }\n-  else\n-    walk_tree (t, replace_with_mapped_expr, &m_dead_ssa_debug_equiv, NULL);\n+  else if (walk_tree (t, replace_with_mapped_expr,\n+\t\t      &m_dead_ssa_debug_equiv, NULL) == error_mark_node)\n+    *t = NULL_TREE;\n }\n \n /* For an SSA_NAME DEAD_SSA which is about to be DCEd because it is based on a"}, {"sha": "bef56494c03c0998b3e0216914b5d5d1214e66cc", "filename": "gcc/testsuite/gcc.dg/ipa/pr103132.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8690f28379795a44aa4b6c737df08828168b6a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr103132.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8690f28379795a44aa4b6c737df08828168b6a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr103132.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr103132.c?ref=df8690f28379795a44aa4b6c737df08828168b6a", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+int globus_i_GLOBUS_GRIDFTP_SERVER_debug_handle_1;\n+int globus_l_gfs_ipc_unpack_data__sz;\n+void globus_i_GLOBUS_GRIDFTP_SERVER_debug_printf(const char *, ...);\n+static void globus_l_gfs_ipc_unpack_cred(int len) {\n+  if (globus_i_GLOBUS_GRIDFTP_SERVER_debug_handle_1)\n+    globus_i_GLOBUS_GRIDFTP_SERVER_debug_printf(\"\", __func__);\n+}\n+static void globus_l_gfs_ipc_unpack_data(int len) {\n+  for (; globus_l_gfs_ipc_unpack_data__sz;)\n+    len--;\n+  len -= 4;\n+  len -= 4;\n+  globus_l_gfs_ipc_unpack_cred(len);\n+}\n+void globus_l_gfs_ipc_reply_read_body_cb(int len)\n+{ globus_l_gfs_ipc_unpack_data(len); }"}]}