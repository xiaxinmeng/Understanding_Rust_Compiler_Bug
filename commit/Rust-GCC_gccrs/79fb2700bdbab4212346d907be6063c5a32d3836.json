{"sha": "79fb2700bdbab4212346d907be6063c5a32d3836", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmYjI3MDBiZGJhYjQyMTIzNDZkOTA3YmU2MDYzYzVhMzJkMzgzNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-06-18T16:13:04Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-08-24T10:45:12Z"}, "message": "arm: testsuite: improve detection of CMSE hardware.\n\nThe test for CMSE support being available in hardware currently\nrelies on the compiler not optimizing away a secure gateway operation.\nBut even that is suspect, because the SG instruction is just a NOP\non armv8-m implementations that do not support the security extension.\n\nReplace the existing test with a new one that reads and checks\nthe appropriate hardware feature register (memory mapped).  This has\nto be run from secure mode, but that shouldn't matter, because if we\ncan't do that we can't really test the CMSE extensions anyway.  We\nretain the SG instruction to ensure the test can't pass accidentally\nif run on pre-armv8-m devices.\n\ngcc/testsuite:\n\t* lib/target-supports.exp (check_effective_target_arm_cmse_hw):\n\tCheck the CMSE feature register, rather than relying on the\n\tSG operation causing an execution fault.", "tree": {"sha": "78c3f7d662ccb0a9057b45910a4deb4067f899e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78c3f7d662ccb0a9057b45910a4deb4067f899e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79fb2700bdbab4212346d907be6063c5a32d3836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fb2700bdbab4212346d907be6063c5a32d3836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79fb2700bdbab4212346d907be6063c5a32d3836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fb2700bdbab4212346d907be6063c5a32d3836/comments", "author": null, "committer": null, "parents": [{"sha": "4702d3cf044924970a9a00142542da1edacfd76c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4702d3cf044924970a9a00142542da1edacfd76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4702d3cf044924970a9a00142542da1edacfd76c"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "06f5b1eb54def1b1b8ebb6b2c3a676434afa6916", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fb2700bdbab4212346d907be6063c5a32d3836/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fb2700bdbab4212346d907be6063c5a32d3836/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=79fb2700bdbab4212346d907be6063c5a32d3836", "patch": "@@ -4878,15 +4878,16 @@ proc check_effective_target_arm_cmse_ok {} {\n \n proc check_effective_target_arm_cmse_hw { } {\n     return [check_runtime arm_cmse_hw_available {\n-\tint __attribute__ ((cmse_nonsecure_entry)) ns_func(void)\n-\t{\n-\t    return 0;\n-\t}\n \tint main (void)\n \t{\n-\t    return ns_func();\n-\t}\n-    } \"-mcmse -Wl,--section-start,.gnu.sgstubs=0x00400000\"]\n+\t    unsigned id_pfr1;\n+\t    asm (\"ldr\\t%0, =0xe000ed44\\n\" \\\n+\t\t \"ldr\\t%0, [%0]\\n\" \\\n+\t\t \"sg\" : \"=l\" (id_pfr1));\n+\t    /* Exit with code 0 iff security extension is available.  */\n+\t    return !(id_pfr1 & 0xf0);\n+\t}\n+    } \"-mcmse\"]\n }\n # Return 1 if the target supports executing MVE instructions, 0\n # otherwise."}]}