{"sha": "38179091cc37de50c92d821b3670e94943d41bfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxNzkwOTFjYzM3ZGU1MGM5MmQ4MjFiMzY3MGU5NDk0M2Q0MWJmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-10-06T22:29:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-10-06T22:29:42Z"}, "message": "PR c++/37376, other mangling issues\n\ngcc/cp/:\n        PR c++/37376, other mangling issues\n        * mangle.c (write_type): Update TYPE_PACK_EXPANSION mangling.\n        (write_member_name): Break out from...\n        (write_expression): ...here.  Handle dependent COMPONENT_REF.\n        (write_template_arg): Wrap an argument pack in 'I'/'E'.\n        (write_builtin_type): Update char16/32_t mangling.\n        (write_nested_name, write_prefix): Don't forget template args\n        for typename types.\n        * operators.def: Add ARROW_EXPR, update COMPONENT_REF and\n        EXPR_PACK_EXPANSION.\nlibstdc++-v3/:\n        * config/abi/pre/gnu.ver: Update char16/32_t manglings.\ninclude/:\n        * demangle.h (enum demangle_component_type): Add\n        DEMANGLE_COMPONENT_PACK_EXPANSION.\nlibiberty/:\n        * cp-demangle.c (struct d_print_info): Add pack_index.\n        (d_dump): Add DEMANGLE_COMPONENT_PACK_EXPANSION.\n        (d_make_comp): Likewise.  DEMANGLE_COMPONENT_ARGLIST and\n        DEMANGLE_COMPONENT_TEMPLATE_ARGLIST can have two null args.\n        (cplus_demangle_builtin_types): Add char16/32_t.\n        (cplus_demangle_type): Recognize them.\n        (d_template_args): Handle empty argument packs.\n        (d_template_arg): Handle argument packs.\n        (d_expression): Handle dependent name.\n        (d_index_template_argument): New fn.\n        (d_lookup_template_argument): New fn.\n        (d_find_pack, d_pack_length): New fn.\n        (d_print_subexpr): Split out...\n        (d_print_comp): ...from here.  Use d_*_template_argument.\n        Handle empty arg lists.  Support pack expansions.\n        * cp-demangle.h (D_BUILTIN_TYPE_COUNT): Increase to 32.\n\nFrom-SVN: r140916", "tree": {"sha": "bc6ed12ab486e9243fadc7deb1fa88cc3d721bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc6ed12ab486e9243fadc7deb1fa88cc3d721bdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38179091cc37de50c92d821b3670e94943d41bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38179091cc37de50c92d821b3670e94943d41bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38179091cc37de50c92d821b3670e94943d41bfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38179091cc37de50c92d821b3670e94943d41bfc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecbeb53b5654ccc6efdbdbdb47ef6e29271bb120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbeb53b5654ccc6efdbdbdb47ef6e29271bb120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbeb53b5654ccc6efdbdbdb47ef6e29271bb120"}], "stats": {"total": 625, "additions": 487, "deletions": 138}, "files": [{"sha": "222693f2a525ab55cc35415a5a84d959b62b3ca2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -1,3 +1,16 @@\n+2008-10-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37376, other mangling issues\n+\t* mangle.c (write_type): Update TYPE_PACK_EXPANSION mangling.\n+\t(write_member_name): Break out from...\n+\t(write_expression): ...here.  Handle dependent COMPONENT_REF.\n+\t(write_template_arg): Wrap an argument pack in 'I'/'E'.\n+\t(write_builtin_type): Update char16/32_t mangling.\n+\t(write_nested_name, write_prefix): Don't forget template args\n+\tfor typename types.\n+\t* operators.def: Add ARROW_EXPR, update COMPONENT_REF and \n+\tEXPR_PACK_EXPANSION.\n+\n 2008-10-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* typeck.c (build_x_indirect_ref): Add location argument."}, {"sha": "c0282d8ade51bd7cb02ffaad93767be24af02baf", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 89, "deletions": 27, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -887,6 +887,20 @@ write_nested_name (const tree decl)\n       write_template_prefix (decl);\n       write_template_args (TI_ARGS (template_info));\n     }\n+  else if (TREE_CODE (TREE_TYPE (decl)) == TYPENAME_TYPE)\n+    {\n+      tree name = TYPENAME_TYPE_FULLNAME (TREE_TYPE (decl));\n+      if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n+\t{\n+\t  write_template_prefix (decl);\n+\t  write_template_args (TREE_OPERAND (name, 1));\n+\t}\n+      else\n+\t{\n+\t  write_prefix (CP_DECL_CONTEXT (decl));\n+\t  write_unqualified_name (decl);\n+\t}\n+    }\n   else\n     {\n       /* No, just use <prefix>  */\n@@ -953,6 +967,20 @@ write_prefix (const tree node)\n       write_template_prefix (decl);\n       write_template_args (TI_ARGS (template_info));\n     }\n+  else if (TREE_CODE (TREE_TYPE (decl)) == TYPENAME_TYPE)\n+    {\n+      tree name = TYPENAME_TYPE_FULLNAME (TREE_TYPE (decl));\n+      if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n+\t{\n+\t  write_template_prefix (decl);\n+\t  write_template_args (TREE_OPERAND (name, 1));\n+\t}\n+      else\n+\t{\n+\t  write_prefix (CP_DECL_CONTEXT (decl));\n+\t  write_unqualified_name (decl);\n+\t}\n+    }\n   else\n     /* Not templated.  */\n     {\n@@ -982,6 +1010,9 @@ write_template_prefix (const tree node)\n   /* Find the template decl.  */\n   if (decl_is_template_id (decl, &template_info))\n     templ = TI_TEMPLATE (template_info);\n+  else if (TREE_CODE (type) == TYPENAME_TYPE)\n+    /* For a typename type, all we have is the name.  */\n+    templ = DECL_NAME (decl);\n   else\n     {\n       gcc_assert (CLASSTYPE_TEMPLATE_ID_P (type));\n@@ -1020,11 +1051,13 @@ write_template_prefix (const tree node)\n     return;\n \n   /* In G++ 3.2, the name of the template template parameter was used.  */\n-  if (TREE_CODE (TREE_TYPE (templ)) == TEMPLATE_TEMPLATE_PARM\n+  if (TREE_TYPE (templ)\n+      && TREE_CODE (TREE_TYPE (templ)) == TEMPLATE_TEMPLATE_PARM\n       && !abi_version_at_least (2))\n     G.need_abi_warning = true;\n \n-  if (TREE_CODE (TREE_TYPE (templ)) == TEMPLATE_TEMPLATE_PARM\n+  if (TREE_TYPE (templ)\n+      && TREE_CODE (TREE_TYPE (templ)) == TEMPLATE_TEMPLATE_PARM\n       && abi_version_at_least (2))\n     write_template_param (TREE_TYPE (templ));\n   else\n@@ -1636,7 +1669,7 @@ write_type (tree type)\n \t      break;\n \n             case TYPE_PACK_EXPANSION:\n-              write_string (\"U10__variadic\");\n+              write_string (\"Dp\");\n               write_type (PACK_EXPANSION_PATTERN (type));\n               break;\n \n@@ -1750,9 +1783,9 @@ write_builtin_type (tree type)\n       if (type == wchar_type_node)\n \twrite_char ('w');\n       else if (type == char16_type_node)\n-\twrite_string (\"u8char16_t\");\n+\twrite_string (\"Ds\");\n       else if (type == char32_type_node)\n-\twrite_string (\"u8char32_t\");\n+\twrite_string (\"Di\");\n       else if (TYPE_FOR_JAVA (type))\n \twrite_java_integer_type_codes (type);\n       else\n@@ -2009,6 +2042,35 @@ write_template_args (tree args)\n   write_char ('E');\n }\n \n+/* Write out the\n+   <unqualified-name>\n+   <unqualified-name> <template-args>\n+   part of SCOPE_REF or COMPONENT_REF mangling.  */\n+\n+static void\n+write_member_name (tree member)\n+{\n+  if (TREE_CODE (member) == IDENTIFIER_NODE)\n+    write_source_name (member);\n+  else if (DECL_P (member))\n+    {\n+      /* G++ 3.2 incorrectly put out both the \"sr\" code and\n+\t the nested name of the qualified name.  */\n+      G.need_abi_warning = 1;\n+      write_unqualified_name (member);\n+    }\n+  else if (TREE_CODE (member) == TEMPLATE_ID_EXPR)\n+    {\n+      tree name = TREE_OPERAND (member, 0);\n+      if (TREE_CODE (name) == OVERLOAD)\n+\tname = OVL_FUNCTION (name);\n+      write_member_name (name);\n+      write_template_args (TREE_OPERAND (member, 1));\n+    }\n+  else\n+    write_expression (member);\n+}\n+\n /* <expression> ::= <unary operator-name> <expression>\n \t\t::= <binary operator-name> <expression> <expression>\n \t\t::= <expr-primary>\n@@ -2161,6 +2223,20 @@ write_expression (tree expr)\n \t    write_template_args (template_args);\n \t}\n     }\n+  else if (code == COMPONENT_REF)\n+    {\n+      tree ob = TREE_OPERAND (expr, 0);\n+\n+      if (TREE_CODE (ob) == ARROW_EXPR)\n+\t{\n+\t  code = ARROW_EXPR;\n+\t  ob = TREE_OPERAND (ob, 0);\n+\t}\n+\n+      write_string (operator_name_info[(int)code].mangled_name);\n+      write_expression (ob);\n+      write_member_name (TREE_OPERAND (expr, 1));\n+    }\n   else\n     {\n       int i;\n@@ -2198,8 +2274,12 @@ write_expression (tree expr)\n \tcase CAST_EXPR:\n \t  write_type (TREE_TYPE (expr));\n \t  if (!TREE_OPERAND (expr, 0))\n-\t  /* \"T()\" is mangled as \"T(void)\".  */\n+\t    /* \"T()\" is mangled as \"T(void)\".  */\n \t    write_char ('v');\n+\t  else if (list_length (TREE_OPERAND (expr, 0)) > 1)\n+\t    /* FIXME the above hack for T() needs to be replaced with\n+\t       something more general.  */\n+\t    sorry (\"mangling function-style cast with more than one argument\");\n \t  else\n \t    write_expression (TREE_VALUE (TREE_OPERAND (expr, 0)));\n \t  break;\n@@ -2213,27 +2293,7 @@ write_expression (tree expr)\n \t/* Handle pointers-to-members specially.  */\n \tcase SCOPE_REF:\n \t  write_type (TREE_OPERAND (expr, 0));\n-\t  if (TREE_CODE (TREE_OPERAND (expr, 1)) == IDENTIFIER_NODE)\n-\t    write_source_name (TREE_OPERAND (expr, 1));\n-\t  else if (TREE_CODE (TREE_OPERAND (expr, 1)) == TEMPLATE_ID_EXPR)\n-\t    {\n-\t      tree template_id;\n-\t      tree name;\n-\n-\t      template_id = TREE_OPERAND (expr, 1);\n-\t      name = TREE_OPERAND (template_id, 0);\n-\t      /* FIXME: What about operators?  */\n-\t      gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n-\t      write_source_name (TREE_OPERAND (template_id, 0));\n-\t      write_template_args (TREE_OPERAND (template_id, 1));\n-\t    }\n-\t  else\n-\t    {\n-\t      /* G++ 3.2 incorrectly put out both the \"sr\" code and\n-\t\t the nested name of the qualified name.  */\n-\t      G.need_abi_warning = 1;\n-\t      write_encoding (TREE_OPERAND (expr, 1));\n-\t    }\n+\t  write_member_name (TREE_OPERAND (expr, 1));\n \t  break;\n \n \tdefault:\n@@ -2338,8 +2398,10 @@ write_template_arg (tree node)\n       /* Expand the template argument pack. */\n       tree args = ARGUMENT_PACK_ARGS (node);\n       int i, length = TREE_VEC_LENGTH (args);\n+      write_char ('I');\n       for (i = 0; i < length; ++i)\n         write_template_arg (TREE_VEC_ELT (args, i));\n+      write_char ('E');\n     }\n   else if (TYPE_P (node))\n     write_type (node);"}, {"sha": "20c74d882201dd4f1f5aca91c4433b17e61f03c5", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -125,7 +125,8 @@ DEF_SIMPLE_OPERATOR (\"&&\", TRUTH_ANDIF_EXPR, \"aa\", 2)\n DEF_SIMPLE_OPERATOR (\"||\", TRUTH_ORIF_EXPR, \"oo\", 2)\n DEF_SIMPLE_OPERATOR (\",\", COMPOUND_EXPR, \"cm\", 2)\n DEF_SIMPLE_OPERATOR (\"->*\", MEMBER_REF, \"pm\", 2)\n-DEF_SIMPLE_OPERATOR (\"->\", COMPONENT_REF, \"pt\", 2)\n+DEF_SIMPLE_OPERATOR (\"->\", ARROW_EXPR, \"pt\", 2)\n+DEF_SIMPLE_OPERATOR (\".\", COMPONENT_REF, \"dt\", 2)\n DEF_SIMPLE_OPERATOR (\"[]\", ARRAY_REF, \"ix\", 2)\n DEF_SIMPLE_OPERATOR (\"++\", POSTINCREMENT_EXPR, \"pp\", 2)\n DEF_SIMPLE_OPERATOR (\"--\", POSTDECREMENT_EXPR, \"mm\", 2)\n@@ -152,4 +153,4 @@ DEF_SIMPLE_OPERATOR (\"?:\", COND_EXPR, \"qu\", 3)\n DEF_SIMPLE_OPERATOR (\"()\", CALL_EXPR, \"cl\", -1)\n \n /* Variadic templates extension. */\n-DEF_SIMPLE_OPERATOR (\"...\", EXPR_PACK_EXPANSION, \"pu\", 1)\n+DEF_SIMPLE_OPERATOR (\"...\", EXPR_PACK_EXPANSION, \"sp\", 1)"}, {"sha": "f0b83dbe9299ba0f951340b1cf25984f59be630f", "filename": "gcc/testsuite/g++.dg/abi/mangle30.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle30.C?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -0,0 +1,22 @@\n+// Test for mangling of template args in a typename type.\n+\n+struct A\n+{\n+  template <class T>\n+  struct B\n+  {\n+    typedef T myT;\n+  };\n+};\n+\n+struct C {};\n+\n+template <class T>\n+void f (T t, typename T::template B<C>::myT u, typename T::template B<int>::myT v);\n+\n+int main()\n+{\n+  f (A(), C(), 1);\n+}\n+\n+// { dg-final { scan-assembler \"_Z1fI1AEvT_NS1_1BI1CE3myTENS2_IiE3myTE\" } }"}, {"sha": "d2bcfedb63c658e04a644d0687521dc31c712f69", "filename": "gcc/testsuite/g++.dg/cpp0x/auto6.C", "status": "modified", "additions": 68, "deletions": 3, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto6.C?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -1,3 +1,4 @@\n+// Tests for late-specified return type.\n // { dg-options \"-std=c++0x\" }\n \n auto f() -> int\n@@ -12,17 +13,81 @@ auto add(T t, U u) -> decltype (t+u)\n }\n \n template<class T, class U>\n-decltype(T()+U()) add2(T t, U u);\n+decltype(T()+U()) add2(T t, U u)\n+{\n+  return t+u;\n+}\n \n template <class T, class U>\n-U g (T, U);\n+U ag (T, U)\n+{\n+  return U();\n+}\n \n template<class T, class U>\n-auto add3(T t, U u) -> decltype (g(t,u));\n+auto add3(T t, U u) -> decltype (ag(t,u))\n+{\n+  return ag(t,u);\n+}\n+\n+template <class T>\n+struct A\n+{\n+  T f() {}\n+  template <class U>\n+  T g() {}\n+  template <class V>\n+  struct B\n+  {\n+    int MEM;\n+  };\n+};\n+\n+template <class T>\n+auto f(T* t) -> decltype (t->f())\n+{\n+  return t->f();\n+}\n+\n+template <class T>\n+auto g(T t) -> decltype (t.f())\n+{\n+  return t.f();\n+}\n+\n+template <class T, class U>\n+auto h(T t, U u) -> decltype (t.template g<U>())\n+{\n+  return t.template g<U>();\n+}\n+\n+struct D { };\n+struct C: public A<int>::B<D>\n+{\n+};\n+\n+template <class T, class U, class V>\n+auto k(T t, U u, V v) -> decltype (t.U::template B<V>::MEM)\n+{\n+  return t.U::template B<V>::MEM;\n+}\n+\n+A<int> a, *p;\n \n int main()\n {\n+  // { dg-final { scan-assembler \"_Z3addIidEDTplsTT_sTT0_ES0_S1_\" } }\n   auto i = add(1, 2.0);\n+  // { dg-final { scan-assembler \"_Z4add2IidEDTplcvT_vcvT0_vES0_S1_\" } }\n   auto i2 = add2(1, 2.0);\n+  // { dg-final { scan-assembler \"_Z4add3IidEDTclL_Z2agEsTT_sTT0_EES0_S1_\" } }\n   auto i3 = add3(1, 2.0);\n+  // { dg-final { scan-assembler \"_Z1fI1AIiEEDTclptsTPT_1fEES3_\" } }\n+  f(p);\n+  // { dg-final { scan-assembler \"_Z1gI1AIiEEDTcldtsTT_1fEES2_\" } }\n+  g(a);\n+  // { dg-final { scan-assembler \"_Z1hI1AIiEdEDTcldtsTT_1gIT0_EEES2_S3_\" } }\n+  h(a,1.0);\n+  // { dg-final { scan-assembler \"_Z1kI1C1AIiE1DEDtdtsTT_srNT0_1BIT1_EE3MEMES4_S5_S7_\" } }\n+  k( C(), A<int>(), D() );\n }"}, {"sha": "9257a92d5b9bcc8cfb3aae60b66fcf50b721fd07", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -9,7 +9,7 @@ void f_two(tuple<int, float>) {}\n void f_nested(tuple<int, tuple<double, char>, float>) { }\n \n \n-// { dg-final { scan-assembler \"_Z6f_none5tupleIE\" } }\n-// { dg-final { scan-assembler \"_Z5f_one5tupleIiE\" } }\n-// { dg-final { scan-assembler \"_Z5f_two5tupleIifE\" } }\n-// { dg-final { scan-assembler \"_Z8f_nested5tupleIiS_IdcEfE\" } }\n+// { dg-final { scan-assembler \"_Z6f_none5tupleIIEE\" } }\n+// { dg-final { scan-assembler \"_Z5f_one5tupleIIiEE\" } }\n+// { dg-final { scan-assembler \"_Z5f_two5tupleIIifEE\" } }\n+// { dg-final { scan-assembler \"_Z8f_nested5tupleIIiS_IIdcEEfEE\" } }"}, {"sha": "47d9b66da58bfc21b466d90d3695a6622ea8eaf6", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic42.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -8,5 +8,5 @@ void g()\n   f<int*, float*, double*>(0, 0, 0);\n   f<int*>(0,0,0);\n }\n-// { dg-final { scan-assembler \"_Z1fIPiPfPdEvU10__variadicT_\" } }\n-// { dg-final { scan-assembler \"_Z1fIPiiiEvU10__variadicT_\" } }\n+// { dg-final { scan-assembler \"_Z1fIIPiPfPdEEvDpT_\" } }\n+// { dg-final { scan-assembler \"_Z1fIIPiiiEEvDpT_\" } }"}, {"sha": "a131887882a15a8b04878d826ca81f06f1745364", "filename": "gcc/testsuite/g++.dg/ext/utf-mangle.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-mangle.C?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -8,7 +8,7 @@ void f1 (char32_t c) {}\n void f2 (char16_t *s) {}\n void f3 (char32_t *s) {}\n \n-// { dg-final { scan-assembler \"_Z2f0u8char16_t:\" } }\n-// { dg-final { scan-assembler \"_Z2f1u8char32_t:\" } }\n-// { dg-final { scan-assembler \"_Z2f2Pu8char16_t:\" } }\n-// { dg-final { scan-assembler \"_Z2f3Pu8char32_t:\" } }\n+// { dg-final { scan-assembler \"_Z2f0Ds:\" } }\n+// { dg-final { scan-assembler \"_Z2f1Di:\" } }\n+// { dg-final { scan-assembler \"_Z2f2PDs:\" } }\n+// { dg-final { scan-assembler \"_Z2f3PDi:\" } }"}, {"sha": "44bc3f0f2828725afd10e6024f44be0f0e999620", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -2559,7 +2559,7 @@ struct tree_memory_partition_tag GTY(())\n /* For a FUNCTION_DECL, holds the tree of BINDINGs.\n    For a TRANSLATION_UNIT_DECL, holds the namespace's BLOCK.\n    For a VAR_DECL, holds the initial value.\n-   For a PARM_DECL, not used--default\n+   For a PARM_DECL, used for DECL_ARG_TYPE--default\n    values for parameters are encoded in the type of the function,\n    not in the PARM_DECL slot.\n    For a FIELD_DECL, this is used for enumeration values and the C"}, {"sha": "20da6186ff0fec1e7902caa55def7d6f5db00b53", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -1,3 +1,8 @@\n+2008-10-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_PACK_EXPANSION.\n+\n 2008-09-09  Jason Merrill  <jason@redhat.com>\n \n \t* demangle.h (enum demangle_component_type): Add"}, {"sha": "0ea639d62ba370f36e44b30835a0f2afb0ae41c7", "filename": "include/demangle.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -372,7 +372,9 @@ enum demangle_component_type\n   /* A name formed by a single character.  */\n   DEMANGLE_COMPONENT_CHARACTER,\n   /* A decltype type.  */\n-  DEMANGLE_COMPONENT_DECLTYPE\n+  DEMANGLE_COMPONENT_DECLTYPE,\n+  /* A pack expansion.  */\n+  DEMANGLE_COMPONENT_PACK_EXPANSION\n };\n \n /* Types which are only used internally.  */"}, {"sha": "b0c1c203ac5b78c5702c15f4f4ffd048fd04ee40", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -1,3 +1,22 @@\n+2008-10-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (struct d_print_info): Add pack_index.\n+\t(d_dump): Add DEMANGLE_COMPONENT_PACK_EXPANSION.\n+\t(d_make_comp): Likewise.  DEMANGLE_COMPONENT_ARGLIST and\n+\tDEMANGLE_COMPONENT_TEMPLATE_ARGLIST can have two null args.\n+\t(cplus_demangle_builtin_types): Add char16/32_t.\n+\t(cplus_demangle_type): Recognize them.\n+\t(d_template_args): Handle empty argument packs.\n+\t(d_template_arg): Handle argument packs.\n+\t(d_expression): Handle dependent name.\n+\t(d_index_template_argument): New fn.\n+\t(d_lookup_template_argument): New fn.\n+\t(d_find_pack, d_pack_length): New fn.\n+\t(d_print_subexpr): Split out...\n+\t(d_print_comp): ...from here.  Use d_*_template_argument.\n+\tHandle empty arg lists.  Support pack expansions.\n+\t* cp-demangle.h (D_BUILTIN_TYPE_COUNT): Increase to 32.\n+\n 2008-09-09  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_DECLTYPE."}, {"sha": "3fa5f1f21d3b2e30e2a6df7e3f01df7e69451bd6", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 225, "deletions": 73, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -299,6 +299,9 @@ struct d_print_info\n   struct d_print_mod *modifiers;\n   /* Set to 1 if we saw a demangling error.  */\n   int demangle_failure;\n+  /* The current index into any template argument packs we are using\n+     for printing.  */\n+  int pack_index;\n };\n \n #ifdef CP_DEMANGLE_DEBUG\n@@ -663,6 +666,9 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_DECLTYPE:\n       printf (\"decltype\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_PACK_EXPANSION:\n+      printf (\"pack expansion\\n\");\n+      break;\n     }\n \n   d_dump (d_left (dc), indent + 2);\n@@ -806,11 +812,10 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_COMPLEX:\n     case DEMANGLE_COMPONENT_IMAGINARY:\n     case DEMANGLE_COMPONENT_VENDOR_TYPE:\n-    case DEMANGLE_COMPONENT_ARGLIST:\n-    case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n     case DEMANGLE_COMPONENT_CAST:\n     case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n     case DEMANGLE_COMPONENT_DECLTYPE:\n+    case DEMANGLE_COMPONENT_PACK_EXPANSION:\n       if (left == NULL)\n \treturn NULL;\n       break;\n@@ -831,6 +836,8 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_RESTRICT_THIS:\n     case DEMANGLE_COMPONENT_VOLATILE_THIS:\n     case DEMANGLE_COMPONENT_CONST_THIS:\n+    case DEMANGLE_COMPONENT_ARGLIST:\n+    case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n       break;\n \n       /* Other types should not be seen here.  */\n@@ -1433,6 +1440,7 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"da\", NL (\"delete[]\"),  1 },\n   { \"de\", NL (\"*\"),         1 },\n   { \"dl\", NL (\"delete\"),    1 },\n+  { \"dt\", NL (\".\"),         2 },\n   { \"dv\", NL (\"/\"),         2 },\n   { \"eO\", NL (\"^=\"),        2 },\n   { \"eo\", NL (\"^\"),         2 },\n@@ -1875,21 +1883,24 @@ cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT] =\n   /* n */ { NL (\"__int128\"),\tNL (\"__int128\"),\tD_PRINT_DEFAULT },\n   /* o */ { NL (\"unsigned __int128\"), NL (\"unsigned __int128\"),\n \t    D_PRINT_DEFAULT },\n-  /* The decimal floating point and half-precision floating point types\n-     don't use the normal builtin type encoding, they're just stuck into\n-     holes in the table for convenience.  */\n-  /* p */ { NL (\"decimal32\"),\tNL (\"decimal32\"),\tD_PRINT_DEFAULT },\n-  /* q */ { NL (\"decimal64\"),\tNL (\"decimal64\"),\tD_PRINT_DEFAULT },\n-  /* r */ { NL (\"decimal128\"),\tNL (\"decimal128\"),\tD_PRINT_DEFAULT },\n+  /* p */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n+  /* q */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n+  /* r */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n   /* s */ { NL (\"short\"),\tNL (\"short\"),\t\tD_PRINT_DEFAULT },\n   /* t */ { NL (\"unsigned short\"), NL (\"unsigned short\"), D_PRINT_DEFAULT },\n-  /* u */ { NL (\"half\"),\tNL (\"half\"),\t\tD_PRINT_FLOAT },\n+  /* u */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n   /* v */ { NL (\"void\"),\tNL (\"void\"),\t\tD_PRINT_VOID },\n   /* w */ { NL (\"wchar_t\"),\tNL (\"char\"),\t\tD_PRINT_DEFAULT },\n   /* x */ { NL (\"long long\"),\tNL (\"long\"),\t\tD_PRINT_LONG_LONG },\n   /* y */ { NL (\"unsigned long long\"), NL (\"unsigned long long\"),\n \t    D_PRINT_UNSIGNED_LONG_LONG },\n   /* z */ { NL (\"...\"),\t\tNL (\"...\"),\t\tD_PRINT_DEFAULT },\n+  /* 26 */ { NL (\"decimal32\"),\tNL (\"decimal32\"),\tD_PRINT_DEFAULT },\n+  /* 27 */ { NL (\"decimal64\"),\tNL (\"decimal64\"),\tD_PRINT_DEFAULT },\n+  /* 28 */ { NL (\"decimal128\"),\tNL (\"decimal128\"),\tD_PRINT_DEFAULT },\n+  /* 29 */ { NL (\"half\"),\tNL (\"half\"),\t\tD_PRINT_FLOAT },\n+  /* 30 */ { NL (\"char16_t\"),\tNL (\"char16_t\"),\tD_PRINT_DEFAULT },\n+  /* 31 */ { NL (\"char32_t\"),\tNL (\"char32_t\"),\tD_PRINT_DEFAULT },\n };\n \n CP_STATIC_IF_GLIBCPP_V3\n@@ -2070,30 +2081,38 @@ cplus_demangle_type (struct d_info *di)\n \t  \n \tcase 'p':\n \t  /* Pack expansion.  */\n-\t  return NULL;\n+\t  ret = d_make_comp (di, DEMANGLE_COMPONENT_PACK_EXPANSION,\n+\t\t\t     cplus_demangle_type (di), NULL);\n+\t  break;\n \t  \n \tcase 'f':\n-\t  /* 32-bit DFP */\n-\t  ret = d_make_builtin_type (di,\n-\t\t\t\t     &cplus_demangle_builtin_types['p' - 'a']);\n+\t  /* 32-bit decimal floating point */\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[26]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \tcase 'd':\n-\t  /* 64-bit decimal floating point */\n-\t  ret = d_make_builtin_type (di,\n-\t\t\t\t     &cplus_demangle_builtin_types['q' - 'a']);\n+\t  /* 64-bit DFP */\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[27]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \tcase 'e':\n \t  /* 128-bit DFP */\n-\t  ret = d_make_builtin_type (di,\n-\t\t\t\t     &cplus_demangle_builtin_types['r' - 'a']);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[28]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \tcase 'h':\n \t  /* 16-bit half-precision FP */\n-\t  ret = d_make_builtin_type (di,\n-\t\t\t\t     &cplus_demangle_builtin_types['u' - 'a']);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[29]);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n+\tcase 's':\n+\t  /* char16_t */\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[30]);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n+\tcase 'i':\n+\t  /* char32_t */\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[31]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \t}\n@@ -2390,6 +2409,13 @@ d_template_args (struct d_info *di)\n   if (! d_check_char (di, 'I'))\n     return NULL;\n \n+  if (d_peek_char (di) == 'E')\n+    {\n+      /* An argument pack can be empty.  */\n+      d_advance (di, 1);\n+      return d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE_ARGLIST, NULL, NULL);\n+    }\n+\n   al = NULL;\n   pal = &al;\n   while (1)\n@@ -2439,6 +2465,10 @@ d_template_arg (struct d_info *di)\n     case 'L':\n       return d_expr_primary (di);\n \n+    case 'I':\n+      /* An argument pack.  */\n+      return d_template_args (di);\n+\n     default:\n       return cplus_demangle_type (di);\n     }\n@@ -2452,6 +2482,12 @@ d_exprlist (struct d_info *di)\n   struct demangle_component *list = NULL;\n   struct demangle_component **p = &list;\n \n+  if (d_peek_char (di) == 'E')\n+    {\n+      d_advance (di, 1);\n+      return d_make_comp (di, DEMANGLE_COMPONENT_ARGLIST, NULL, NULL);\n+    }\n+\n   while (1)\n     {\n       struct demangle_component *arg = d_expression (di);\n@@ -2515,6 +2551,19 @@ d_expression (struct d_info *di)\n       d_advance (di, 2);\n       return cplus_demangle_type (di);\n     }\n+  else if (IS_DIGIT (peek))\n+    {\n+      /* We can get an unqualified name as an expression in the case of\n+         a dependent member access, i.e. decltype(T().i).  */\n+      struct demangle_component *name = d_unqualified_name (di);\n+      if (name == NULL)\n+\treturn NULL;\n+      if (d_peek_char (di) == 'I')\n+\treturn d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, name,\n+\t\t\t    d_template_args (di));\n+      else\n+\treturn name;\n+    }\n   else\n     {\n       struct demangle_component *op;\n@@ -3067,6 +3116,123 @@ cplus_demangle_print (int options, const struct demangle_component *dc,\n   return dgs.buf;\n }\n \n+/* Returns the I'th element of the template arglist ARGS, or NULL on\n+   failure.  */\n+\n+static struct demangle_component *\n+d_index_template_argument (struct demangle_component *args, int i)\n+{\n+  struct demangle_component *a;\n+\n+  for (a = args;\n+       a != NULL;\n+       a = d_right (a))\n+    {\n+      if (a->type != DEMANGLE_COMPONENT_TEMPLATE_ARGLIST)\n+\treturn NULL;\n+      if (i <= 0)\n+\tbreak;\n+      --i;\n+    }\n+  if (i != 0 || a == NULL)\n+    return NULL;\n+\n+  return d_left (a);\n+}\n+\n+/* Returns the template argument from the current context indicated by DC,\n+   which is a DEMANGLE_COMPONENT_TEMPLATE_PARAM, or NULL.  */\n+\n+static struct demangle_component *\n+d_lookup_template_argument (struct d_print_info *dpi,\n+\t\t\t    const struct demangle_component *dc)\n+{\n+  if (dpi->templates == NULL)\n+    {\n+      d_print_error (dpi);\n+      return NULL;\n+    }\n+\t\n+  return d_index_template_argument\n+    (d_right (dpi->templates->template_decl),\n+     dc->u.s_number.number);\n+}\n+\n+/* Returns a template argument pack used in DC (any will do), or NULL.  */\n+\n+static struct demangle_component *\n+d_find_pack (struct d_print_info *dpi,\n+\t     const struct demangle_component *dc)\n+{\n+  struct demangle_component *a;\n+  if (dc == NULL)\n+    return NULL;\n+\n+  switch (dc->type)\n+    {\n+    case DEMANGLE_COMPONENT_TEMPLATE_PARAM:\n+      a = d_lookup_template_argument (dpi, dc);\n+      if (a && a->type == DEMANGLE_COMPONENT_TEMPLATE_ARGLIST)\n+\treturn a;\n+      return NULL;\n+\n+    case DEMANGLE_COMPONENT_PACK_EXPANSION:\n+      return NULL;\n+      \n+    case DEMANGLE_COMPONENT_NAME:\n+    case DEMANGLE_COMPONENT_OPERATOR:\n+    case DEMANGLE_COMPONENT_BUILTIN_TYPE:\n+    case DEMANGLE_COMPONENT_SUB_STD:\n+    case DEMANGLE_COMPONENT_CHARACTER:\n+      return NULL;\n+\n+    case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:\n+      return d_find_pack (dpi, dc->u.s_extended_operator.name);\n+    case DEMANGLE_COMPONENT_CTOR:\n+      return d_find_pack (dpi, dc->u.s_ctor.name);\n+    case DEMANGLE_COMPONENT_DTOR:\n+      return d_find_pack (dpi, dc->u.s_dtor.name);\n+\n+    default:\n+      a = d_find_pack (dpi, d_left (dc));\n+      if (a)\n+\treturn a;\n+      return d_find_pack (dpi, d_right (dc));\n+    }\n+}\n+\n+/* Returns the length of the template argument pack DC.  */\n+\n+static int\n+d_pack_length (const struct demangle_component *dc)\n+{\n+  int count = 0;\n+  while (dc && dc->type == DEMANGLE_COMPONENT_TEMPLATE_ARGLIST\n+\t && d_left (dc) != NULL)\n+    {\n+      ++count;\n+      dc = d_right (dc);\n+    }\n+  return count;\n+}\n+\n+/* DC is a component of a mangled expression.  Print it, wrapped in parens\n+   if needed.  */\n+\n+static void\n+d_print_subexpr (struct d_print_info *dpi,\n+\t\t const struct demangle_component *dc)\n+{\n+  int simple = 0;\n+  if (dc->type == DEMANGLE_COMPONENT_NAME)\n+    simple = 1;\n+  if (!simple)\n+    d_append_char (dpi, '(');\n+  d_print_comp (dpi, dc);\n+  if (!simple)\n+    d_append_char (dpi, ')');\n+}\n+\n /* Subroutine to handle components.  */\n \n static void\n@@ -3252,30 +3418,13 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_TEMPLATE_PARAM:\n       {\n-\tlong i;\n-\tstruct demangle_component *a;\n \tstruct d_print_template *hold_dpt;\n+\tstruct demangle_component *a = d_lookup_template_argument (dpi, dc);\n \n-\tif (dpi->templates == NULL)\n-\t  {\n-\t    d_print_error (dpi);\n-\t    return;\n-\t  }\n-\ti = dc->u.s_number.number;\n-\tfor (a = d_right (dpi->templates->template_decl);\n-\t     a != NULL;\n-\t     a = d_right (a))\n-\t  {\n-\t    if (a->type != DEMANGLE_COMPONENT_TEMPLATE_ARGLIST)\n-\t      {\n-\t\td_print_error (dpi);\n-\t\treturn;\n-\t      }\n-\t    if (i <= 0)\n-\t      break;\n-\t    --i;\n-\t  }\n-\tif (i != 0 || a == NULL)\n+\tif (a && a->type == DEMANGLE_COMPONENT_TEMPLATE_ARGLIST)\n+\t  a = d_index_template_argument (a, dpi->pack_index);\n+\n+\tif (a == NULL)\n \t  {\n \t    d_print_error (dpi);\n \t    return;\n@@ -3289,7 +3438,7 @@ d_print_comp (struct d_print_info *dpi,\n \thold_dpt = dpi->templates;\n \tdpi->templates = hold_dpt->next;\n \n-\td_print_comp (dpi, d_left (a));\n+\td_print_comp (dpi, a);\n \n \tdpi->templates = hold_dpt;\n \n@@ -3578,7 +3727,8 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_ARGLIST:\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n-      d_print_comp (dpi, d_left (dc));\n+      if (d_left (dc) != NULL)\n+\td_print_comp (dpi, d_left (dc));\n       if (d_right (dc) != NULL)\n \t{\n \t  d_append_string (dpi, \", \");\n@@ -3618,11 +3768,12 @@ d_print_comp (struct d_print_info *dpi,\n \t  d_print_cast (dpi, d_left (dc));\n \t  d_append_char (dpi, ')');\n \t}\n-      d_append_char (dpi, '(');\n-      if (d_left (dc)->type != DEMANGLE_COMPONENT_CAST\n-\t  || d_right (dc)->type != DEMANGLE_COMPONENT_BUILTIN_TYPE)\n-\td_print_comp (dpi, d_right (dc));\n-      d_append_char (dpi, ')');\n+      if (d_left (dc)->type == DEMANGLE_COMPONENT_CAST\n+\t  && d_right (dc)->type == DEMANGLE_COMPONENT_BUILTIN_TYPE)\n+\t/* type() -- FIXME what about type(multiple,args) */\n+\td_append_string (dpi, \"()\");\n+      else\n+\td_print_subexpr (dpi, d_right (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_BINARY:\n@@ -3632,15 +3783,6 @@ d_print_comp (struct d_print_info *dpi,\n \t  return;\n \t}\n \n-      if (!strcmp (d_left (dc)->u.s_operator.op->code, \"cl\"))\n-\t{\n-\t  d_print_comp (dpi, d_left (d_right (dc)));\n-\t  d_append_string (dpi, \" (\");\n-\t  d_print_comp (dpi, d_right (d_right (dc)));\n-\t  d_append_char (dpi, ')');\n-\t  return;\n-\t}\n-\n       /* We wrap an expression which uses the greater-than operator in\n \t an extra layer of parens so that it does not get confused\n \t with the '>' which ends the template parameters.  */\n@@ -3649,13 +3791,10 @@ d_print_comp (struct d_print_info *dpi,\n \t  && d_left (dc)->u.s_operator.op->name[0] == '>')\n \td_append_char (dpi, '(');\n \n-      d_append_char (dpi, '(');\n-      d_print_comp (dpi, d_left (d_right (dc)));\n-      d_append_string (dpi, \") \");\n-      d_print_expr_op (dpi, d_left (dc));\n-      d_append_string (dpi, \" (\");\n-      d_print_comp (dpi, d_right (d_right (dc)));\n-      d_append_char (dpi, ')');\n+      d_print_subexpr (dpi, d_left (d_right (dc)));\n+      if (strcmp (d_left (dc)->u.s_operator.op->code, \"cl\") != 0)\n+\td_print_expr_op (dpi, d_left (dc));\n+      d_print_subexpr (dpi, d_right (d_right (dc)));\n \n       if (d_left (dc)->type == DEMANGLE_COMPONENT_OPERATOR\n \t  && d_left (dc)->u.s_operator.op->len == 1\n@@ -3676,15 +3815,11 @@ d_print_comp (struct d_print_info *dpi,\n \t  d_print_error (dpi);\n \t  return;\n \t}\n-      d_append_char (dpi, '(');\n-      d_print_comp (dpi, d_left (d_right (dc)));\n-      d_append_string (dpi, \") \");\n+      d_print_subexpr (dpi, d_left (d_right (dc)));\n       d_print_expr_op (dpi, d_left (dc));\n-      d_append_string (dpi, \" (\");\n-      d_print_comp (dpi, d_left (d_right (d_right (dc))));\n-      d_append_string (dpi, \") : (\");\n-      d_print_comp (dpi, d_right (d_right (d_right (dc))));\n-      d_append_char (dpi, ')');\n+      d_print_subexpr (dpi, d_left (d_right (d_right (dc))));\n+      d_append_string (dpi, \" : \");\n+      d_print_subexpr (dpi, d_right (d_right (d_right (dc))));\n       return;\n \n     case DEMANGLE_COMPONENT_TRINARY_ARG1:\n@@ -3797,6 +3932,23 @@ d_print_comp (struct d_print_info *dpi,\n       d_append_char (dpi, ')');\n       return;\n \n+    case DEMANGLE_COMPONENT_PACK_EXPANSION:\n+      {\n+\tstruct demangle_component *a = d_find_pack (dpi, d_left (dc));\n+\tint len = d_pack_length (a);\n+\tint i;\n+\n+\tdc = d_left (dc);\n+\tfor (i = 0; i < len; ++i)\n+\t  {\n+\t    dpi->pack_index = i;\n+\t    d_print_comp (dpi, dc);\n+\t    if (i < len-1)\n+\t      d_append_string (dpi, \", \");\n+\t  }\n+      }\n+      return;\n+\n     default:\n       d_print_error (dpi);\n       return;"}, {"sha": "aad37437400248a744566566c9a1a7e57c525906", "filename": "libiberty/cp-demangle.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2Fcp-demangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2Fcp-demangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.h?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -147,7 +147,7 @@ struct d_info\n extern const struct demangle_operator_info cplus_demangle_operators[];\n #endif\n \n-#define D_BUILTIN_TYPE_COUNT (26)\n+#define D_BUILTIN_TYPE_COUNT (32)\n \n CP_STATIC_IF_GLIBCPP_V3\n const struct demangle_builtin_type_info"}, {"sha": "d9efbc0d24e08933b0fc073e155b15d972d694f9", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -3345,7 +3345,7 @@ f<X>\n #\n --format=gnu-v3 --no-params\n _ZngILi42EEvN1AIXplT_Li2EEE1TE\n-void operator-<42>(A<(42) + (2)>::T)\n+void operator-<42>(A<(42)+(2)>::T)\n operator-<42>\n #\n --format=gnu-v3 --no-params\n@@ -3385,7 +3385,7 @@ int* const volatile restrict _far\n # \n --format=gnu-v3 --no-params\n _Z3fooILi2EEvRAplT_Li1E_i\n-void foo<2>(int (&) [(2) + (1)])\n+void foo<2>(int (&) [(2)+(1)])\n foo<2>\n # \n --format=gnu-v3 --no-params\n@@ -3612,13 +3612,13 @@ hairyfunc5\n # This is from gcc PR 8861\n --format=gnu-v3 --no-params\n _Z1fILi1ELc120EEv1AIXplT_cviLd810000000000000000703DAD7A370C5EEE\n-void f<1, (char)120>(A<(1) + ((int)((double)[810000000000000000703DAD7A370C5]))>)\n+void f<1, (char)120>(A<(1)+((int)((double)[810000000000000000703DAD7A370C5]))>)\n f<1, (char)120>\n #\n # This is also from gcc PR 8861\n --format=gnu-v3 --no-params\n _Z1fILi1EEv1AIXplT_cvingLf3f800000EEE\n-void f<1>(A<(1) + ((int)(-((float)[3f800000])))>)\n+void f<1>(A<(1)+((int)(-((float)[3f800000])))>)\n f<1>\n #\n # This is from a libstdc++ debug mode patch.\n@@ -3643,7 +3643,7 @@ f\n # confusion with the '>' which ends the template parameters.\n --format=gnu-v3 --no-params\n _Z4dep9ILi3EEvP3fooIXgtT_Li2EEE\n-void dep9<3>(foo<((3) > (2))>*)\n+void dep9<3>(foo<((3)>(2))>*)\n dep9<3>\n #\n # Watch out for templated version of `operator<'--it needs an extra\n@@ -3885,16 +3885,20 @@ java resource java/util/iso4217.properties\n # decltype/param placeholder test\n --format=gnu-v3\n _Z3addIidEDTplsTT_sTT0_ES0_S1_\n-decltype ((int) + (double)) add<int, double>(int, double)\n-# decltype/T() test\n---format=gnu-v3\n-_Z4add2IidEDTplcvT_vcvT0_vES0_S1_\n-decltype (((int)()) + ((double)())) add2<int, double>(int, double)\n+decltype ((int)+(double)) add<int, double>(int, double)\n # decltype/fn call test\n --format=gnu-v3\n _Z4add3IidEDTclL_Z1gEsTT_sTT0_EES0_S1_\n-decltype (g (int, double)) add3<int, double>(int, double)\n-# Extended floating point types test\n+decltype (g(int, double)) add3<int, double>(int, double)\n+# new (2008) built in types test\n+--format=gnu-v3\n+_Z1fDfDdDeDhDsDi\n+f(decimal32, decimal64, decimal128, half, char16_t, char32_t)\n+# pack expansion test\n+--format=gnu-v3\n+_Z1fIIPiPfPdEEvDpT_\n+void f<int*, float*, double*>(int*, float*, double*)\n+# '.' test\n --format=gnu-v3\n-_Z1fDfDdDeDh\n-f(decimal32, decimal64, decimal128, half)\n+_Z1hI1AIiEdEDTcldtsTT_1gIT0_EEES2_S3_\n+decltype (((A<int>).(g<double>))()) h<A<int>, double>(A<int>, double)"}, {"sha": "7ab200becd45fdf7759f1abd4b3ac47c52b2a0c3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -1,3 +1,7 @@\n+2008-10-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver: Update char16/32_t manglings.\n+\n 2008-10-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/reference_wrapper/invoke.cc: New."}, {"sha": "024fcfd40869c172954c586b6f6b03d989e6f2e2", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38179091cc37de50c92d821b3670e94943d41bfc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38179091cc37de50c92d821b3670e94943d41bfc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=38179091cc37de50c92d821b3670e94943d41bfc", "patch": "@@ -1104,12 +1104,12 @@ CXXABI_1.3.2 {\n CXXABI_1.3.3 {\n \n     # typeinfo for char16_t and char32_t\n-    _ZTIu8char16_t;\n-    _ZTIPu8char16_t;\n-    _ZTIPKu8char16_t;\n-    _ZTIu8char32_t;\n-    _ZTIPu8char32_t;\n-    _ZTIPKu8char32_t;\n+    _ZTIDs;\n+    _ZTIPDs;\n+    _ZTIPKDs;\n+    _ZTIDi;\n+    _ZTIPDi;\n+    _ZTIPKDi;\n \n     # exception_ptr\n     _ZNSt15__exception_ptr13exception_ptrC1Ev;"}]}