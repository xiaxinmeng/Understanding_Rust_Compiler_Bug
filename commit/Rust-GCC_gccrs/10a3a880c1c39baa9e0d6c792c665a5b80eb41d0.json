{"sha": "10a3a880c1c39baa9e0d6c792c665a5b80eb41d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhM2E4ODBjMWMzOWJhYTllMGQ2Yzc5MmM2NjVhNWI4MGViNDFkMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-07-24T13:50:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-07-24T13:50:31Z"}, "message": "re PR lto/61802 (AArch64 execute.exp failures with LTO after r212467)\n\n\tPR lto/61802\n\t* varasm.c (bss_initializer_p): Handle offlined ctors.\n\t(align_variable, get_variable_align): Likewise.\n\t(make_decl_one_only): Likewise.\n\t(default_binds_local_p_1): Likewise.\n\t(decl_binds_to_current_def_p): Likewise.\n\t(get_variable_section): Get constructor if it is offlined.\n\t(assemble_variable_contents): Sanity check that the caller\n\tstreamed in the ctor in LTO.\n\nFrom-SVN: r212991", "tree": {"sha": "9627af636077948ca1b0b54017736df9f2a61982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9627af636077948ca1b0b54017736df9f2a61982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0/comments", "author": null, "committer": null, "parents": [{"sha": "c4bc3399f7605a632da40532e19d5fd3c33cc09d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bc3399f7605a632da40532e19d5fd3c33cc09d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4bc3399f7605a632da40532e19d5fd3c33cc09d"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "f902436949ada0c2944d833658ed0e6679acf155", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a3a880c1c39baa9e0d6c792c665a5b80eb41d0", "patch": "@@ -1,3 +1,15 @@\n+2014-07-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/61802\n+\t* varasm.c (bss_initializer_p): Handle offlined ctors.\n+\t(align_variable, get_variable_align): Likewise.\n+\t(make_decl_one_only): Likewise.\n+\t(default_binds_local_p_1): Likewise.\n+\t(decl_binds_to_current_def_p): Likewise.\n+\t(get_variable_section): Get constructor if it is offlined.\n+\t(assemble_variable_contents): Sanity check that the caller\n+\tstreamed in the ctor in LTO.\n+\n 2014-07-24  Roman Gareev  <gareevroman@gmail.com>\n \n \t* graphite-isl-ast-to-gimple.c:"}, {"sha": "819ec26feded7d985152e73f192b49cf140babd0", "filename": "gcc/varasm.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a3a880c1c39baa9e0d6c792c665a5b80eb41d0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=10a3a880c1c39baa9e0d6c792c665a5b80eb41d0", "patch": "@@ -956,7 +956,10 @@ bool\n bss_initializer_p (const_tree decl)\n {\n   return (DECL_INITIAL (decl) == NULL\n-\t  || DECL_INITIAL (decl) == error_mark_node\n+\t  /* In LTO we have no errors in program; error_mark_node is used\n+\t     to mark offlined constructors.  */\n+\t  || (DECL_INITIAL (decl) == error_mark_node\n+\t      && !in_lto_p)\n \t  || (flag_zero_initialized_in_bss\n \t      /* Leave constant zeroes in .rodata so they\n \t\t can be shared.  */\n@@ -1017,7 +1020,9 @@ align_variable (tree decl, bool dont_output_data)\n #endif\n #ifdef CONSTANT_ALIGNMENT\n \t  if (DECL_INITIAL (decl) != 0\n-\t      && DECL_INITIAL (decl) != error_mark_node)\n+\t      /* In LTO we have no errors in program; error_mark_node is used\n+\t\t to mark offlined constructors.  */\n+\t      && (in_lto_p || DECL_INITIAL (decl) != error_mark_node))\n \t    {\n \t      unsigned int const_align\n \t\t= CONSTANT_ALIGNMENT (DECL_INITIAL (decl), align);\n@@ -1068,7 +1073,10 @@ get_variable_align (tree decl)\n \talign = data_align;\n #endif\n #ifdef CONSTANT_ALIGNMENT\n-      if (DECL_INITIAL (decl) != 0 && DECL_INITIAL (decl) != error_mark_node)\n+      if (DECL_INITIAL (decl) != 0\n+\t  /* In LTO we have no errors in program; error_mark_node is used\n+\t     to mark offlined constructors.  */\n+\t  && (in_lto_p || DECL_INITIAL (decl) != error_mark_node))\n \t{\n \t  unsigned int const_align = CONSTANT_ALIGNMENT (DECL_INITIAL (decl),\n \t\t\t\t\t\t\t align);\n@@ -1092,13 +1100,20 @@ get_variable_section (tree decl, bool prefer_noswitch_p)\n {\n   addr_space_t as = ADDR_SPACE_GENERIC;\n   int reloc;\n-  symtab_node *snode = symtab_node::get (decl);\n-  if (snode)\n-    decl = snode->ultimate_alias_target ()->decl;\n+  varpool_node *vnode = varpool_node::get (decl);\n+  if (vnode)\n+    {\n+      vnode = vnode->ultimate_alias_target ();\n+      decl = vnode->decl;\n+    }\n \n   if (TREE_TYPE (decl) != error_mark_node)\n     as = TYPE_ADDR_SPACE (TREE_TYPE (decl));\n \n+  /* We need the constructor to figure out reloc flag.  */\n+  if (vnode)\n+    vnode->get_constructor ();\n+\n   if (DECL_COMMON (decl))\n     {\n       /* If the decl has been given an explicit section name, or it resides\n@@ -1963,6 +1978,9 @@ assemble_variable_contents (tree decl, const char *name,\n \n   if (!dont_output_data)\n     {\n+      /* Caller is supposed to use varpool_get_constructor when it wants\n+\t to output the body.  */\n+      gcc_assert (!in_lto_p || DECL_INITIAL (decl) != error_mark_node);\n       if (DECL_INITIAL (decl)\n \t  && DECL_INITIAL (decl) != error_mark_node\n \t  && !initializer_zerop (DECL_INITIAL (decl)))\n@@ -5890,7 +5908,8 @@ make_decl_one_only (tree decl, tree comdat_group)\n       symbol->set_comdat_group (comdat_group);\n     }\n   else if (TREE_CODE (decl) == VAR_DECL\n-      && (DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node))\n+           && (DECL_INITIAL (decl) == 0\n+\t       || (!in_lto_p && DECL_INITIAL (decl) == error_mark_node)))\n     DECL_COMMON (decl) = 1;\n   else\n     {\n@@ -6752,7 +6771,7 @@ default_binds_local_p_1 (const_tree exp, int shlib)\n   else if (DECL_COMMON (exp)\n \t   && !resolved_locally\n \t   && (DECL_INITIAL (exp) == NULL\n-\t       || DECL_INITIAL (exp) == error_mark_node))\n+\t       || (!in_lto_p && DECL_INITIAL (exp) == error_mark_node)))\n     local_p = false;\n   /* Otherwise we're left with initialized (or non-common) global data\n      which is of necessity defined locally.  */\n@@ -6807,7 +6826,7 @@ decl_binds_to_current_def_p (const_tree decl)\n     return false;\n   if (DECL_COMMON (decl)\n       && (DECL_INITIAL (decl) == NULL\n-\t  || DECL_INITIAL (decl) == error_mark_node))\n+\t  || (!in_lto_p && DECL_INITIAL (decl) == error_mark_node)))\n     return false;\n   if (DECL_EXTERNAL (decl))\n     return false;"}]}