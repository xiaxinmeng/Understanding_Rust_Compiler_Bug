{"sha": "c9212f333ae38c52c16184bb00e8af622d88901b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyMTJmMzMzYWUzOGM1MmMxNjE4NGJiMDBlOGFmNjIyZDg4OTAxYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-24T02:18:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-24T02:18:38Z"}, "message": "* loop.c (canonicalize_condition): Move to reversed_comparison_code.\n\nFrom-SVN: r40019", "tree": {"sha": "2186cff4853d0aa47c65773c4f8c9d82f441fa18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2186cff4853d0aa47c65773c4f8c9d82f441fa18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9212f333ae38c52c16184bb00e8af622d88901b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9212f333ae38c52c16184bb00e8af622d88901b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9212f333ae38c52c16184bb00e8af622d88901b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9212f333ae38c52c16184bb00e8af622d88901b/comments", "author": null, "committer": null, "parents": [{"sha": "4f0a3098c58f0f9740d3c6f9deb348d04f042575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a3098c58f0f9740d3c6f9deb348d04f042575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a3098c58f0f9740d3c6f9deb348d04f042575"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "15881bdc9bce6c57b4b03d8750cb46edd043fc14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9212f333ae38c52c16184bb00e8af622d88901b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9212f333ae38c52c16184bb00e8af622d88901b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9212f333ae38c52c16184bb00e8af622d88901b", "patch": "@@ -1,3 +1,7 @@\n+Sat Feb 24 03:17:09 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* loop.c (canonicalize_condition): Move to reversed_comparison_code.\n+\n 2001-02-21  DJ Delorie  <dj@redhat.com>\n \n \t* config/i960/i960.h (FRAME_POINTER_REQUIRED): Revert removal of"}, {"sha": "252e27eb087739e4510fd813c399fe8dca294911", "filename": "gcc/loop.c", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9212f333ae38c52c16184bb00e8af622d88901b/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9212f333ae38c52c16184bb00e8af622d88901b/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=c9212f333ae38c52c16184bb00e8af622d88901b", "patch": "@@ -8305,7 +8305,6 @@ canonicalize_condition (insn, cond, reverse, earliest, want_reg)\n   rtx tem;\n   rtx op0, op1;\n   int reverse_code = 0;\n-  int did_reverse_condition = 0;\n   enum machine_mode mode;\n \n   code = GET_CODE (cond);\n@@ -8314,10 +8313,9 @@ canonicalize_condition (insn, cond, reverse, earliest, want_reg)\n   op1 = XEXP (cond, 1);\n \n   if (reverse)\n-    {\n-      code = reverse_condition (code);\n-      did_reverse_condition ^= 1;\n-    }\n+    code = reversed_comparison_code (cond, insn);\n+  if (code == UNKNOWN)\n+    return 0;\n \n   if (earliest)\n     *earliest = insn;\n@@ -8368,13 +8366,19 @@ canonicalize_condition (insn, cond, reverse, earliest, want_reg)\n \n       if ((prev = prev_nonnote_insn (prev)) == 0\n \t  || GET_CODE (prev) != INSN\n-\t  || FIND_REG_INC_NOTE (prev, 0)\n-\t  || (set = single_set (prev)) == 0)\n+\t  || FIND_REG_INC_NOTE (prev, 0))\n+\tbreak;\n+\n+      set = set_of (op0, prev);\n+\n+      if (set\n+\t  && (GET_CODE (set) != SET\n+\t      || !rtx_equal_p (SET_DEST (set), op0)))\n \tbreak;\n \n       /* If this is setting OP0, get what it sets it to if it looks\n \t relevant.  */\n-      if (rtx_equal_p (SET_DEST (set), op0))\n+      if (set)\n \t{\n \t  enum machine_mode inner_mode = GET_MODE (SET_DEST (set));\n \n@@ -8434,10 +8438,6 @@ canonicalize_condition (insn, cond, reverse, earliest, want_reg)\n \t\t       || mode == VOIDmode || inner_mode == VOIDmode))\n \n \t    {\n-\t      /* We might have reversed a LT to get a GE here.  But this wasn't\n-\t\t actually the comparison of data, so we don't flag that we\n-\t\t have had to reverse the condition.  */\n-\t      did_reverse_condition ^= 1;\n \t      reverse_code = 1;\n \t      x = SET_SRC (set);\n \t    }\n@@ -8455,10 +8455,9 @@ canonicalize_condition (insn, cond, reverse, earliest, want_reg)\n \t    code = GET_CODE (x);\n \t  if (reverse_code)\n \t    {\n-\t      code = reverse_condition (code);\n+\t      code = reversed_comparison_code (x, prev);\n \t      if (code == UNKNOWN)\n \t\treturn 0;\n-\t      did_reverse_condition ^= 1;\n \t      reverse_code = 0;\n \t    }\n \n@@ -8521,15 +8520,6 @@ canonicalize_condition (insn, cond, reverse, earliest, want_reg)\n \t}\n     }\n \n-  /* If this was floating-point and we reversed anything other than an\n-     EQ or NE or (UN)ORDERED, return zero.  */\n-  if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n-      && did_reverse_condition\n-      && code != NE && code != EQ && code != UNORDERED && code != ORDERED\n-      && ! flag_fast_math\n-      && GET_MODE_CLASS (GET_MODE (op0)) == MODE_FLOAT)\n-    return 0;\n-\n #ifdef HAVE_cc0\n   /* Never return CC0; return zero instead.  */\n   if (op0 == cc0_rtx)"}]}