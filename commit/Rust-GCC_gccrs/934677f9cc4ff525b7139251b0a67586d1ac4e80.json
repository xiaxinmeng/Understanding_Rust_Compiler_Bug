{"sha": "934677f9cc4ff525b7139251b0a67586d1ac4e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0Njc3ZjljYzRmZjUyNWI3MTM5MjUxYjBhNjc1ODZkMWFjNGU4MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-02-15T09:26:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-02-15T09:26:27Z"}, "message": "bb-reorder.c (find_traces_1_round): Force fallthru edge from a call to be best_edge.\n\n        * bb-reorder.c (find_traces_1_round): Force fallthru edge from a\n        call to be best_edge.\n\nFrom-SVN: r95062", "tree": {"sha": "961babd85411d8ffc1c9470e5cd19e24e4031630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/961babd85411d8ffc1c9470e5cd19e24e4031630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934677f9cc4ff525b7139251b0a67586d1ac4e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934677f9cc4ff525b7139251b0a67586d1ac4e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934677f9cc4ff525b7139251b0a67586d1ac4e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934677f9cc4ff525b7139251b0a67586d1ac4e80/comments", "author": null, "committer": null, "parents": [{"sha": "e22857eb9d98ed0dff03bb311988f18335a5bf71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e22857eb9d98ed0dff03bb311988f18335a5bf71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e22857eb9d98ed0dff03bb311988f18335a5bf71"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "4f92feb7aa07e9ae958dd0f525514ffe3dcdd2df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934677f9cc4ff525b7139251b0a67586d1ac4e80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934677f9cc4ff525b7139251b0a67586d1ac4e80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=934677f9cc4ff525b7139251b0a67586d1ac4e80", "patch": "@@ -1,3 +1,8 @@\n+2005-02-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* bb-reorder.c (find_traces_1_round): Force fallthru edge from a \n+\tcall to be best_edge.\n+\n 2005-02-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* basic-block.h: Adjust the prototype for find_basic_blocks."}, {"sha": "d054ffd9201cecbcb68bc9993ad4828a5cbf9dec", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934677f9cc4ff525b7139251b0a67586d1ac4e80/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934677f9cc4ff525b7139251b0a67586d1ac4e80/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=934677f9cc4ff525b7139251b0a67586d1ac4e80", "patch": "@@ -488,6 +488,7 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n       do\n \t{\n \t  int prob, freq;\n+\t  bool ends_in_call;\n \n \t  /* The probability and frequency of the best edge.  */\n \t  int best_prob = INT_MIN / 2;\n@@ -501,6 +502,8 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n \t    fprintf (dump_file, \"Basic block %d was visited in trace %d\\n\",\n \t\t     bb->index, *n_traces - 1);\n \n+          ends_in_call = block_ends_with_call_p (bb);\n+\n \t  /* Select the successor that will be placed after BB.  */\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    {\n@@ -520,6 +523,19 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n \t      prob = e->probability;\n \t      freq = EDGE_FREQUENCY (e);\n \n+\t      /* The only sensible preference for a call instruction is the\n+\t\t fallthru edge.  Don't bother selecting anything else.  */\n+\t      if (ends_in_call)\n+\t\t{\n+\t\t  if (e->flags & EDGE_CAN_FALLTHRU)\n+\t\t    {\n+\t\t      best_edge = e;\n+\t\t      best_prob = prob;\n+\t\t      best_freq = freq;\n+\t\t    }\n+\t\t  continue;\n+\t\t}\n+\n \t      /* Edge that cannot be fallthru or improbable or infrequent\n \t\t successor (i.e. it is unsuitable successor).  */\n \t      if (!(e->flags & EDGE_CAN_FALLTHRU) || (e->flags & EDGE_COMPLEX)"}]}