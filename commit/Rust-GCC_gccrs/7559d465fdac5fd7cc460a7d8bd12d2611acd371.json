{"sha": "7559d465fdac5fd7cc460a7d8bd12d2611acd371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1OWQ0NjVmZGFjNWZkN2NjNDYwYTdkOGJkMTJkMjYxMWFjZDM3MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-22T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-22T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "4d00fbc4f06266f012ef045950a23dd5e7d27843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d00fbc4f06266f012ef045950a23dd5e7d27843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7559d465fdac5fd7cc460a7d8bd12d2611acd371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7559d465fdac5fd7cc460a7d8bd12d2611acd371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7559d465fdac5fd7cc460a7d8bd12d2611acd371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7559d465fdac5fd7cc460a7d8bd12d2611acd371/comments", "author": null, "committer": null, "parents": [{"sha": "9929d04ee24dfe0a8b27eff7aaa4ff7a768186e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9929d04ee24dfe0a8b27eff7aaa4ff7a768186e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9929d04ee24dfe0a8b27eff7aaa4ff7a768186e5"}], "stats": {"total": 174, "additions": 173, "deletions": 1}, "files": [{"sha": "413476237562c1ccd9080895350f523798b6c34f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7559d465fdac5fd7cc460a7d8bd12d2611acd371", "patch": "@@ -1,3 +1,52 @@\n+2021-01-21  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/98777\n+\t* lra-int.h (lra_pmode_pseudo): New extern.\n+\t* lra.c (lra_pmode_pseudo): New global.\n+\t(lra): Set it up.\n+\t* lra-eliminations.c (eliminate_regs_in_insn): Use it.\n+\n+2021-01-21  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* fwprop.c (fwprop_propagation::classify_result): Allow\n+\t(subreg (mem)) simplifications.\n+\n+2021-01-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_sqdml<SBINQOPS:as>l<mode>):\n+\tSplit into...\n+\t(aarch64_sqdmlal<mode>): ... This...\n+\t(aarch64_sqdmlsl<mode>): ... And this.\n+\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>): Split into...\n+\t(aarch64_sqdmlal_lane<mode>): ... This...\n+\t(aarch64_sqdmlsl_lane<mode>): ... And this.\n+\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>): Split into...\n+\t(aarch64_sqdmlsl_laneq<mode>): ... This...\n+\t(aarch64_sqdmlal_laneq<mode>):  ... And this.\n+\t(aarch64_sqdml<SBINQOPS:as>l_n<mode>): Split into...\n+\t(aarch64_sqdmlsl_n<mode>): ... This...\n+\t(aarch64_sqdmlal_n<mode>): ... And this.\n+\t(aarch64_sqdml<SBINQOPS:as>l2<mode>_internal): Split into...\n+\t(aarch64_sqdmlal2<mode>_internal): ... This...\n+\t(aarch64_sqdmlsl2<mode>_internal): ... And this.\n+\n+2021-01-21  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm_mve.h (__arm_vcmpneq_s8): Fix return type.\n+\n+2021-01-21  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\tPR target/96372\n+\t* doc/sourcebuild.texi (arm_thumb2_no_arm_v8_1_lob): Document.\n+\n+2021-01-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR rtl-optimization/98694\n+\t* regcprop.c (copy_value): If SRC had been assigned a mode\n+\tnarrower than the copy, we can't link DEST into the chain even\n+\tthey have same hard_regno_nregs(i.e. HImode/SImode in i386\n+\tbackend).\n+\n 2021-01-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_get_lane<mode>):"}, {"sha": "b319abb1d461184fd4013302bced3644d7ea5d1d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7559d465fdac5fd7cc460a7d8bd12d2611acd371", "patch": "@@ -1 +1 @@\n-20210121\n+20210122"}, {"sha": "4ca833b5b134da4248f2abdd6bd036bf31cfb947", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7559d465fdac5fd7cc460a7d8bd12d2611acd371", "patch": "@@ -1,3 +1,41 @@\n+2021-01-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/71879\n+\t* semantics.c (finish_decltype_type): Set up a cp_unevaluated\n+\tsentinel at the start of the function.  Remove a now-redundant\n+\tmanual adjustment of cp_unevaluated_operand.\n+\n+2021-01-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98624\n+\t* module.cc (depset::hash::find_dependencies): Add\n+\tmodule arg.\n+\t(trees_out::core_vals): Check state before calling\n+\twrite_location.\n+\t(sort_cluster, module_state::write): Adjust\n+\tfind_dependencies call.\n+\n+2021-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98672\n+\t* constexpr.c (check_for_return_continue_data): Add break_stmt member.\n+\t(check_for_return_continue): Also look for BREAK_STMT.  Handle\n+\tSWITCH_STMT by ignoring break_stmt from its body.\n+\t(potential_constant_expression_1) <case FOR_STMT>,\n+\t<case WHILE_STMT>: If the condition isn't constant true, check if\n+\tthe loop body can contain a return stmt.\n+\t<case SWITCH_STMT>: Adjust check_for_return_continue_data initializer.\n+\t<case IF_STMT>: If recursion with tf_none is successful,\n+\tmerge *jump_target from the branches - returns with highest priority,\n+\tbreaks or continues lower.  If then branch is potentially constant and\n+\tdoesn't return, check the else branch if it could return, break or\n+\tcontinue.\n+\n+2021-01-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98530\n+\t* name-lookup.c (lookup_class_binding): Rearrange a stat-hack.\n+\n 2021-01-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* module.cc (bytes_in::i, bytes_in::wi): Avoid left shift of"}, {"sha": "646c79c58e4c1a6b1bd230ebe9f21b8848f94307", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=7559d465fdac5fd7cc460a7d8bd12d2611acd371", "patch": "@@ -1,3 +1,7 @@\n+2021-01-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 3a7ebef73.\n+\n 2021-01-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 2d3d13748."}, {"sha": "6ffaff005fb02259fc5172b72d040f236e4a2198", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7559d465fdac5fd7cc460a7d8bd12d2611acd371", "patch": "@@ -1,3 +1,18 @@\n+2021-01-21  Jorge D'Elia  <jdelia@cimec.unl.edu.ar>\n+\n+\t* intrinsic.texi (CO_MAX): Fix typo.\n+\n+2021-01-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96320\n+\t* decl.c (gfc_match_modproc): It is not an error to find a\n+\tmodule procedure declaration within a contains block.\n+\t* expr.c (gfc_check_vardef_context): Pure procedure result is\n+\tassignable. Change 'own_scope' accordingly.\n+\t* resolve.c (resolve_typebound_procedure): A procedure that\n+\thas the module procedure attribute is almost certainly a\n+\tmodule procedure, whatever its interface.\n+\n 2021-01-19  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/98476"}, {"sha": "9f1a25a8449a0fd61990f2492f26477248baf626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7559d465fdac5fd7cc460a7d8bd12d2611acd371/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7559d465fdac5fd7cc460a7d8bd12d2611acd371", "patch": "@@ -1,3 +1,65 @@\n+2021-01-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/cpp2a/lambda-uneval1.C: Ignore preceding \"l\" and\n+\tintervening period.\n+\t* g++.dg/cpp2a/lambda-uneval5.C: Ignore preceding \"l\" and\n+\texplicitly check for intervening space, tab or period.\n+\n+2021-01-21  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/98777\n+\t* gcc.target/riscv/pr98777.c: New.\n+\n+2021-01-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/71879\n+\t* g++.dg/cpp0x/decltype-71879.C: New test.\n+\n+2021-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98672\n+\t* g++.dg/cpp1y/constexpr-98672.C: New test.\n+\n+2021-01-21  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\tPR target/96372\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_thumb2_no_arm_v8_1_lob): Define proc.\n+\t* gcc.target/arm/ivopts.c: Use target\n+\t'arm_thumb2_no_arm_v8_1_lob'.\n+\n+2021-01-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98530\n+\t* g++.dg/modules/stat-mem-1.h: New.\n+\t* g++.dg/modules/stat-mem-1_a.H: New.\n+\t* g++.dg/modules/stat-mem-1_b.C: New.\n+\n+2021-01-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96320\n+\t* gfortran.dg/module_procedure_5.f90 : New test.\n+\t* gfortran.dg/module_procedure_6.f90 : New test.\n+\n+2021-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97299\n+\t* gcc.dg/vect/slp-reduc-3.c: Amend target selectors.\n+\n+2021-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/98241\n+\t* gcc.dg/pr78973.c: Remove ilp32 XFAIL.\n+\n+2021-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/Walloca-2.c: Un-XFAIL.\n+\n+2021-01-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR rtl-optimization/98694\n+\t* gcc.target/i386/pr98694.c: New test.\n+\n 2021-01-20  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/torture/ftrapv-2.c: Make overflow instruction unremovable."}, {"sha": "090c7ae651f7e1ea28d058748068beff6863bfff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7559d465fdac5fd7cc460a7d8bd12d2611acd371/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7559d465fdac5fd7cc460a7d8bd12d2611acd371/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7559d465fdac5fd7cc460a7d8bd12d2611acd371", "patch": "@@ -1,3 +1,7 @@\n+2021-01-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/Makefile.in: Regenerate.\n+\n 2021-01-20  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/os/aix/ctype_inline.h (bool ctype<char>:: is): Cast"}]}