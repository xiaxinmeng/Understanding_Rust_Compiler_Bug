{"sha": "9cbad0a3624eb087ff3c05457aa41d5c595f5a85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiYWQwYTM2MjRlYjA4N2ZmM2MwNTQ1N2FhNDFkNWM1OTVmNWE4NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-06-11T08:02:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-06-11T08:02:35Z"}, "message": "decl.c (gnat_to_gnu_entity): Translate the Esize on entry only for elementary types and abort if it is too large.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Translate the Esize on\n\tentry only for elementary types and abort if it is too large.\n\t<E_Record_Type>: Make sure the Esize is known before using it.\n\nFrom-SVN: r188378", "tree": {"sha": "c5323547beeb6dc6bdf7344aedec86de9f171cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5323547beeb6dc6bdf7344aedec86de9f171cc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cbad0a3624eb087ff3c05457aa41d5c595f5a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbad0a3624eb087ff3c05457aa41d5c595f5a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cbad0a3624eb087ff3c05457aa41d5c595f5a85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbad0a3624eb087ff3c05457aa41d5c595f5a85/comments", "author": null, "committer": null, "parents": [{"sha": "ebf780036e6d8a464abe41017ccaa8b090f6d48d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf780036e6d8a464abe41017ccaa8b090f6d48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf780036e6d8a464abe41017ccaa8b090f6d48d"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "dcd94738647e2a5400055708aa7efba661d5bfe1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbad0a3624eb087ff3c05457aa41d5c595f5a85/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbad0a3624eb087ff3c05457aa41d5c595f5a85/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9cbad0a3624eb087ff3c05457aa41d5c595f5a85", "patch": "@@ -1,3 +1,9 @@\n+2012-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Translate the Esize on\n+\tentry only for elementary types and abort if it is too large.\n+\t<E_Record_Type>: Make sure the Esize is known before using it.\n+\n 2012-06-04  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gcc-interface/utils2.c: Do not include output.h."}, {"sha": "1c7f337b38f9c2cf424d4f1dd82338f6f08958e1", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbad0a3624eb087ff3c05457aa41d5c595f5a85/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbad0a3624eb087ff3c05457aa41d5c595f5a85/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=9cbad0a3624eb087ff3c05457aa41d5c595f5a85", "patch": "@@ -377,11 +377,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tprepend_attributes (First_Subtype (Base_Type (gnat_entity)),\n \t\t\t    &attr_list);\n \n-      /* Compute a default value for the size of the type.  */\n-      if (Known_Esize (gnat_entity)\n-\t  && UI_Is_In_Int_Range (Esize (gnat_entity)))\n+      /* Compute a default value for the size of an elementary type.  */\n+      if (Known_Esize (gnat_entity) && Is_Elementary_Type (gnat_entity))\n \t{\n \t  unsigned int max_esize;\n+\n+\t  gcc_assert (UI_Is_In_Int_Range (Esize (gnat_entity)));\n \t  esize = UI_To_Int (Esize (gnat_entity));\n \n \t  if (IN (kind, Float_Kind))\n@@ -2948,14 +2949,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tif (Known_Alignment (gnat_entity))\n \t  TYPE_ALIGN (gnu_type)\n \t    = validate_alignment (Alignment (gnat_entity), gnat_entity, 0);\n-\telse if (Is_Atomic (gnat_entity))\n-\t  TYPE_ALIGN (gnu_type)\n-\t    = esize >= BITS_PER_WORD ? BITS_PER_WORD : ceil_pow2 (esize);\n+\telse if (Is_Atomic (gnat_entity) && Known_Esize (gnat_entity))\n+\t  {\n+\t    unsigned int size = UI_To_Int (Esize (gnat_entity));\n+\t    TYPE_ALIGN (gnu_type)\n+\t      = size >= BITS_PER_WORD ? BITS_PER_WORD : ceil_pow2 (size);\n+\t  }\n \t/* If a type needs strict alignment, the minimum size will be the\n \t   type size instead of the RM size (see validate_size).  Cap the\n \t   alignment, lest it causes this type size to become too large.  */\n-\telse if (Strict_Alignment (gnat_entity)\n-\t\t && Known_RM_Size (gnat_entity))\n+\telse if (Strict_Alignment (gnat_entity) && Known_RM_Size (gnat_entity))\n \t  {\n \t    unsigned int raw_size = UI_To_Int (RM_Size (gnat_entity));\n \t    unsigned int raw_align = raw_size & -raw_size;"}]}