{"sha": "5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg0MGUzYjhmZjkxOWMzZWUxZjllNzIxM2FjNjEyZmU2OWM2ZjUzYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-06T14:16:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-06T14:16:13Z"}, "message": "PR libstdc++/84928 use std::move in <numeric> algorithms\n\nP0616R0 altered the effects of the <numeric> algorithms to use std::move\non the accumulator values (resolving LWG 2055). This implements the\nchange for C++2a, but retains the previous behaviour for older\nstandards.\n\n\t* include/bits/stl_numeric.h (_GLIBCXX_MOVE_IF_20): Define macro to\n\tconditionally move, according to __cplusplus value.\n\t(accumulate, inner_product, partial_sum, adjacent_difference): Use\n\t_GLIBCXX_MOVE_IF_20.\n\t* testsuite/26_numerics/accumulate/lwg2055.cc: New test.\n\t* testsuite/26_numerics/adjacent_difference/lwg2055.cc: New test.\n\t* testsuite/26_numerics/inner_product/lwg2055.cc: New test.\n\t* testsuite/26_numerics/partial_sum/lwg2055.cc: New test.\n\nFrom-SVN: r262477", "tree": {"sha": "4ea8c82daef88b270de86e93a4385101d6f28954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ea8c82daef88b270de86e93a4385101d6f28954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b3168d7f2bec7f349ec9c27f0bb5a7e2e5b543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b3168d7f2bec7f349ec9c27f0bb5a7e2e5b543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b3168d7f2bec7f349ec9c27f0bb5a7e2e5b543"}], "stats": {"total": 488, "additions": 480, "deletions": 8}, "files": [{"sha": "df9a914a53efe0a833d6bb0490af6f1177b466fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "patch": "@@ -1,5 +1,15 @@\n 2018-07-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/84928 use std::move in <numeric> algorithms\n+\t* include/bits/stl_numeric.h (_GLIBCXX_MOVE_IF_20): Define macro to\n+\tconditionally move, according to __cplusplus value.\n+\t(accumulate, inner_product, partial_sum, adjacent_difference): Use\n+\t_GLIBCXX_MOVE_IF_20.\n+\t* testsuite/26_numerics/accumulate/lwg2055.cc: New test.\n+\t* testsuite/26_numerics/adjacent_difference/lwg2055.cc: New test.\n+\t* testsuite/26_numerics/inner_product/lwg2055.cc: New test.\n+\t* testsuite/26_numerics/partial_sum/lwg2055.cc: New test.\n+\n \t* config/abi/pre/gnu.ver: Use wildcards to combine related patterns.\n \n \tP0935R0 Eradicating unnecessarily explicit default constructors"}, {"sha": "f4f6f9ef5ae2511d08ee9231e6f32d4bcaafea45", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "patch": "@@ -104,6 +104,14 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n+#if __cplusplus > 201703L\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 2055. std::move in std::accumulate and other algorithms\n+# define _GLIBCXX_MOVE_IF_20(_E) std::move(_E)\n+#else\n+# define _GLIBCXX_MOVE_IF_20(_E) _E\n+#endif\n+\n   /**\n    *  @brief  Accumulate values in a range.\n    *\n@@ -124,7 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first, __last);\n \n       for (; __first != __last; ++__first)\n-\t__init = __init + *__first;\n+\t__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n       return __init;\n     }\n \n@@ -151,7 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first, __last);\n \n       for (; __first != __last; ++__first)\n-\t__init = __binary_op(__init, *__first);\n+\t__init = __binary_op(_GLIBCXX_MOVE_IF_20(__init), *__first);\n       return __init;\n     }\n \n@@ -180,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n       for (; __first1 != __last1; ++__first1, (void)++__first2)\n-\t__init = __init + (*__first1 * *__first2);\n+\t__init = _GLIBCXX_MOVE_IF_20(__init) + (*__first1 * *__first2);\n       return __init;\n     }\n \n@@ -214,7 +222,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n       for (; __first1 != __last1; ++__first1, (void)++__first2)\n-\t__init = __binary_op1(__init, __binary_op2(*__first1, *__first2));\n+\t__init = __binary_op1(_GLIBCXX_MOVE_IF_20(__init),\n+\t\t\t      __binary_op2(*__first1, *__first2));\n       return __init;\n     }\n \n@@ -251,7 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       *__result = __value;\n       while (++__first != __last)\n \t{\n-\t  __value = __value + *__first;\n+\t  __value = _GLIBCXX_MOVE_IF_20(__value) + *__first;\n \t  *++__result = __value;\n \t}\n       return ++__result;\n@@ -292,7 +301,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       *__result = __value;\n       while (++__first != __last)\n \t{\n-\t  __value = __binary_op(__value, *__first);\n+\t  __value = __binary_op(_GLIBCXX_MOVE_IF_20(__value), *__first);\n \t  *++__result = __value;\n \t}\n       return ++__result;\n@@ -332,7 +341,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       while (++__first != __last)\n \t{\n \t  _ValueType __tmp = *__first;\n-\t  *++__result = __tmp - __value;\n+\t  *++__result = __tmp - _GLIBCXX_MOVE_IF_20(__value);\n \t  __value = _GLIBCXX_MOVE(__tmp);\n \t}\n       return ++__result;\n@@ -375,12 +384,14 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       while (++__first != __last)\n \t{\n \t  _ValueType __tmp = *__first;\n-\t  *++__result = __binary_op(__tmp, __value);\n+\t  *++__result = __binary_op(__tmp, _GLIBCXX_MOVE_IF_20(__value));\n \t  __value = _GLIBCXX_MOVE(__tmp);\n \t}\n       return ++__result;\n     }\n \n+#undef _GLIBCXX_MOVE_IF_20\n+\n _GLIBCXX_END_NAMESPACE_ALGO\n } // namespace std\n "}, {"sha": "1686f393e7e89d227928470bc426154cf127b0f8", "filename": "libstdc++-v3/testsuite/26_numerics/accumulate/lwg2055.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2Flwg2055.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2Flwg2055.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2Flwg2055.cc?ref=5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "patch": "@@ -0,0 +1,93 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <numeric>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct Int\n+{\n+  Int(int v) : val(v) { }\n+\n+  ~Int() = default;\n+\n+  Int(const Int& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { ++copies; }\n+\n+  Int(Int&& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { x.moved_from = true; }\n+\n+  Int& operator=(const Int& x)\n+  {\n+    val = x.val;\n+    copies = x.copies + 1;\n+    moved_from = x.moved_from;\n+    return *this;\n+  }\n+\n+  Int& operator=(Int&& x)\n+  {\n+    val = x.val;\n+    copies = x.copies;\n+    moved_from = x.moved_from;\n+    x.moved_from = true;\n+    return *this;\n+  }\n+\n+  int val = 0;\n+  int copies = 0;\n+  bool moved_from = false;\n+};\n+\n+Int operator+(Int x, Int y) { x.val += y.val; return x; }\n+\n+struct Add\n+{\n+  Int operator()(Int x, Int y) const { x.val += y.val; return x; }\n+};\n+\n+void\n+test01()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  Int res = std::accumulate(std::begin(i), std::end(i), Int{0});\n+  VERIFY( res.copies == 0 );\n+  VERIFY( !res.moved_from );\n+  for (const auto& r : i)\n+    VERIFY( !r.moved_from );\n+}\n+\n+void\n+test02()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  Int res = std::accumulate(std::begin(i), std::end(i), Int{0}, Add{});\n+  VERIFY( res.copies == 0 );\n+  VERIFY( !res.moved_from );\n+  for (const auto& r : i)\n+    VERIFY( !r.moved_from );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "766581a5d66f8b8e8122c25b235c711be643126c", "filename": "libstdc++-v3/testsuite/26_numerics/adjacent_difference/lwg2055.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2Flwg2055.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2Flwg2055.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2Flwg2055.cc?ref=5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "patch": "@@ -0,0 +1,126 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <numeric>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct Int\n+{\n+  Int(int v) : val(v) { }\n+\n+  ~Int() = default;\n+\n+  Int(const Int& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { ++copies; }\n+\n+  Int(Int&& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { x.moved_from = true; }\n+\n+  Int& operator=(const Int& x)\n+  {\n+    val = x.val;\n+    copies = x.copies + 1;\n+    moved_from = x.moved_from;\n+    return *this;\n+  }\n+\n+  Int& operator=(Int&& x)\n+  {\n+    val = x.val;\n+    copies = x.copies;\n+    moved_from = x.moved_from;\n+    x.moved_from = true;\n+    return *this;\n+  }\n+\n+  int val = 0;\n+  int copies = 0;\n+  bool moved_from = false;\n+};\n+\n+Int operator-(Int x, Int y) { x.val -= y.val; return x; }\n+\n+struct Subtract\n+{\n+  Int operator()(Int x, Int y) const { x.val -= y.val; return x; }\n+};\n+\n+void\n+test01()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::adjacent_difference(std::begin(i), std::end(i), std::begin(i));\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 2 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::adjacent_difference(std::begin(i), std::end(i), std::begin(i),\n+\t\t\t   Subtract{});\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 2 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::adjacent_difference(std::make_move_iterator(std::begin(i)),\n+\t\t\t   std::make_move_iterator(std::end(i)),\n+\t\t\t   std::begin(i));\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 1 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+void\n+test04()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::adjacent_difference(std::make_move_iterator(std::begin(i)),\n+\t\t\t   std::make_move_iterator(std::end(i)),\n+\t\t\t   std::begin(i), Subtract{});\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 1 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "7fea5d094762b6808fb6a536af663e3b51015b28", "filename": "libstdc++-v3/testsuite/26_numerics/inner_product/lwg2055.cc", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2Flwg2055.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2Flwg2055.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2Flwg2055.cc?ref=5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "patch": "@@ -0,0 +1,107 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <numeric>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct Int\n+{\n+  Int(int v) : val(v) { }\n+\n+  ~Int() = default;\n+\n+  Int(const Int& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { ++copies; }\n+\n+  Int(Int&& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { x.moved_from = true; }\n+\n+  Int& operator=(const Int& x)\n+  {\n+    val = x.val;\n+    copies = x.copies + 1;\n+    moved_from = x.moved_from;\n+    return *this;\n+  }\n+\n+  Int& operator=(Int&& x)\n+  {\n+    val = x.val;\n+    copies = x.copies;\n+    moved_from = x.moved_from;\n+    x.moved_from = true;\n+    return *this;\n+  }\n+\n+  int val = 0;\n+  int copies = 0;\n+  bool moved_from = false;\n+};\n+\n+Int operator+(Int x, Int y) { x.val += y.val; return x; }\n+Int operator*(Int x, Int y) { x.val *= y.val; return x; }\n+\n+struct Add\n+{\n+  Int operator()(Int x, Int y) const { x.val += y.val; return x; }\n+};\n+\n+struct Multiply\n+{\n+  Int operator()(Int x, Int y) const { x.val *= y.val; return x; }\n+};\n+\n+void\n+test01()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  Int j[] = { 5, 6, 7, 8, 9 };\n+  Int res = std::inner_product(std::begin(i), std::end(i), std::begin(j),\n+\t\t\t       Int{0});\n+  VERIFY( res.copies == 0 );\n+  VERIFY( !res.moved_from );\n+  for (const auto& r : i)\n+    VERIFY( !r.moved_from );\n+  for (const auto& r : j)\n+    VERIFY( !r.moved_from );\n+}\n+\n+void\n+test02()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  Int j[] = { 5, 6, 7, 8, 9 };\n+  Int res = std::inner_product(std::begin(i), std::end(i), std::begin(j),\n+\t\t\t       Int{0}, Add{}, Multiply{});\n+  VERIFY( res.copies == 0 );\n+  VERIFY( !res.moved_from );\n+  for (const auto& r : i)\n+    VERIFY( !r.moved_from );\n+  for (const auto& r : j)\n+    VERIFY( !r.moved_from );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "871ddaf4c5eab1bc3a662f46110081c234c672d1", "filename": "libstdc++-v3/testsuite/26_numerics/partial_sum/lwg2055.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2Flwg2055.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2Flwg2055.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2Flwg2055.cc?ref=5840e3b8ff919c3ee1f9e7213ac612fe69c6f53a", "patch": "@@ -0,0 +1,125 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <numeric>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct Int\n+{\n+  Int(int v) : val(v) { }\n+\n+  ~Int() = default;\n+\n+  Int(const Int& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { ++copies; }\n+\n+  Int(Int&& x) : val(x.val), copies(x.copies), moved_from(x.moved_from)\n+  { x.moved_from = true; }\n+\n+  Int& operator=(const Int& x)\n+  {\n+    val = x.val;\n+    copies = x.copies + 1;\n+    moved_from = x.moved_from;\n+    return *this;\n+  }\n+\n+  Int& operator=(Int&& x)\n+  {\n+    val = x.val;\n+    copies = x.copies;\n+    moved_from = x.moved_from;\n+    x.moved_from = true;\n+    return *this;\n+  }\n+\n+  int val = 0;\n+  int copies = 0;\n+  bool moved_from = false;\n+};\n+\n+Int operator+(Int x, Int y) { x.val += y.val; return x; }\n+\n+struct Add\n+{\n+  Int operator()(Int x, Int y) const { x.val += y.val; return x; }\n+};\n+\n+void\n+test01()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::partial_sum(std::begin(i), std::end(i), std::begin(i));\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 2 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::partial_sum(std::begin(i), std::end(i), std::begin(i), Add{});\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 2 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::partial_sum(std::make_move_iterator(std::begin(i)),\n+\t\t   std::make_move_iterator(std::end(i)),\n+\t\t   std::begin(i));\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 1 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+void\n+test04()\n+{\n+  Int i[] = { 0, 1, 2, 3, 4 };\n+  std::partial_sum(std::make_move_iterator(std::begin(i)),\n+\t\t   std::make_move_iterator(std::end(i)),\n+\t\t   std::begin(i), Add{});\n+  for (const auto& r : i)\n+  {\n+    VERIFY( r.copies == 1 );\n+    VERIFY( !r.moved_from );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}