{"sha": "200fcd339802e67a444ba78dd941eebe8fd8e1f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwZmNkMzM5ODAyZTY3YTQ0NGJhNzhkZDk0MWVlYmU4ZmQ4ZTFmNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-06-16T21:04:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-06-16T21:04:53Z"}, "message": "list.tcc (list::operator=(const list&), [...]): Use __addressof instead of operator&.\n\n\t* include/bits/list.tcc (list::operator=(const list&), list::merge):\n\tUse __addressof instead of operator&.\n\t(list::sort): Use array-to-pointer decay instead of operator&.\n\t* include/bits/stl_list.h (list::splice): Use __addressof instead of\n\toperator&.\n\t* include/debug/formatter.h (_Error_formatter::_Parameter::_Parameter):\n\tLikewise.\n\t* include/debug/functions.h (__check_singular): Likewise.\n\t* include/debug/list (list::splice, list::merge): Likewise.\n\t* testsuite/23_containers/list/modifiers/addressof.cc: New.\n\nFrom-SVN: r224539", "tree": {"sha": "89080d583c5abe32c49745438079e3ab79e37c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89080d583c5abe32c49745438079e3ab79e37c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/200fcd339802e67a444ba78dd941eebe8fd8e1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200fcd339802e67a444ba78dd941eebe8fd8e1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200fcd339802e67a444ba78dd941eebe8fd8e1f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200fcd339802e67a444ba78dd941eebe8fd8e1f5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba394ca69b1444dd743bcea7c5c0825837cc108e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba394ca69b1444dd743bcea7c5c0825837cc108e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba394ca69b1444dd743bcea7c5c0825837cc108e"}], "stats": {"total": 94, "additions": 69, "deletions": 25}, "files": [{"sha": "e6ed6ab168951c00cfdee5a30433da3427fd0fea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=200fcd339802e67a444ba78dd941eebe8fd8e1f5", "patch": "@@ -1,5 +1,16 @@\n 2015-06-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/list.tcc (list::operator=(const list&), list::merge):\n+\tUse __addressof instead of operator&.\n+\t(list::sort): Use array-to-pointer decay instead of operator&.\n+\t* include/bits/stl_list.h (list::splice): Use __addressof instead of\n+\toperator&.\n+\t* include/debug/formatter.h (_Error_formatter::_Parameter::_Parameter):\n+\tLikewise.\n+\t* include/debug/functions.h (__check_singular): Likewise.\n+\t* include/debug/list (list::splice, list::merge): Likewise.\n+\t* testsuite/23_containers/list/modifiers/addressof.cc: New.\n+\n \tPR libstdc++/65393\n \t* src/c++11/thread.cc (thread::_M_make_thread): Replace shared_ptr\n \tcopies with moves."}, {"sha": "95193c19a2447a3cf415cdf7cc50cfb97b663c60", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=200fcd339802e67a444ba78dd941eebe8fd8e1f5", "patch": "@@ -265,7 +265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     list<_Tp, _Alloc>::\n     operator=(const list& __x)\n     {\n-      if (this != &__x)\n+      if (this != std::__addressof(__x))\n \t{\n \t  iterator __first1 = begin();\n \t  iterator __last1 = end();\n@@ -373,7 +373,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 300. list::merge() specification incomplete\n-      if (this != &__x)\n+      if (this != std::__addressof(__x))\n \t{\n \t  _M_check_equal_allocators(__x); \n \n@@ -410,7 +410,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 300. list::merge() specification incomplete\n-\tif (this != &__x)\n+\tif (this != std::__addressof(__x))\n \t  {\n \t    _M_check_equal_allocators(__x);\n \n@@ -446,14 +446,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n         list __carry;\n         list __tmp[64];\n-        list * __fill = &__tmp[0];\n+        list * __fill = __tmp;\n         list * __counter;\n \n         do\n \t  {\n \t    __carry.splice(__carry.begin(), *this, begin());\n \n-\t    for(__counter = &__tmp[0];\n+\t    for(__counter = __tmp;\n \t\t__counter != __fill && !__counter->empty();\n \t\t++__counter)\n \t      {\n@@ -466,7 +466,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  }\n \twhile ( !empty() );\n \n-        for (__counter = &__tmp[1]; __counter != __fill; ++__counter)\n+        for (__counter = __tmp + 1; __counter != __fill; ++__counter)\n           __counter->merge(*(__counter - 1));\n         swap( *(__fill - 1) );\n       }\n@@ -523,14 +523,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  {\n \t    list __carry;\n \t    list __tmp[64];\n-\t    list * __fill = &__tmp[0];\n+\t    list * __fill = __tmp;\n \t    list * __counter;\n \n \t    do\n \t      {\n \t\t__carry.splice(__carry.begin(), *this, begin());\n \n-\t\tfor(__counter = &__tmp[0];\n+\t\tfor(__counter = __tmp;\n \t\t    __counter != __fill && !__counter->empty();\n \t\t    ++__counter)\n \t\t  {\n@@ -543,7 +543,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      }\n \t    while ( !empty() );\n \n-\t    for (__counter = &__tmp[1]; __counter != __fill; ++__counter)\n+\t    for (__counter = __tmp + 1; __counter != __fill; ++__counter)\n \t      __counter->merge(*(__counter - 1), __comp);\n \t    swap(*(__fill - 1));\n \t  }"}, {"sha": "a498de5d3a65e1558f01496a0d6688c52b792a08", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=200fcd339802e67a444ba78dd941eebe8fd8e1f5", "patch": "@@ -1438,7 +1438,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tif (__position == __i || __position == __j)\n \t  return;\n \n-\tif (this != &__x)\n+\tif (this != std::__addressof(__x))\n \t  _M_check_equal_allocators(__x);\n \n \tthis->_M_transfer(__position._M_const_cast(),\n@@ -1501,7 +1501,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n \tif (__first != __last)\n \t  {\n-\t    if (this != &__x)\n+\t    if (this != std::__addressof(__x))\n \t      _M_check_equal_allocators(__x);\n \n \t    size_t __n = this->_M_distance(__first._M_node, __last._M_node);"}, {"sha": "56ee8078681f6d8b72be9056f444a01be0213c4a", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=200fcd339802e67a444ba78dd941eebe8fd8e1f5", "patch": "@@ -241,7 +241,7 @@ namespace __gnu_debug\n \t: _M_kind(__iterator),  _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n-\t  _M_variant._M_iterator._M_address = &__it;\n+\t  _M_variant._M_iterator._M_address = std::__addressof(__it);\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n \t  _M_variant._M_iterator._M_constness =\n \t    std::__are_same<_Safe_iterator<_Iterator, _Sequence>,\n@@ -271,7 +271,7 @@ namespace __gnu_debug\n \t: _M_kind(__iterator),  _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n-\t  _M_variant._M_iterator._M_address = &__it;\n+\t  _M_variant._M_iterator._M_address = std::__addressof(__it);\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n \t  _M_variant._M_iterator._M_constness =\n \t    std::__are_same<_Safe_local_iterator<_Iterator, _Sequence>,\n@@ -298,7 +298,7 @@ namespace __gnu_debug\n \t: _M_kind(__iterator), _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n-\t  _M_variant._M_iterator._M_address = &__it;\n+\t  _M_variant._M_iterator._M_address = std::__addressof(__it);\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n \t  _M_variant._M_iterator._M_constness = __const_iterator;\n \t  _M_variant._M_iterator._M_state = __it ? __unknown_state : __singular;\n@@ -311,7 +311,7 @@ namespace __gnu_debug\n \t: _M_kind(__iterator), _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n-\t  _M_variant._M_iterator._M_address = &__it;\n+\t  _M_variant._M_iterator._M_address = std::__addressof(__it);\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n \t  _M_variant._M_iterator._M_constness = __mutable_iterator;\n \t  _M_variant._M_iterator._M_state = __it ? __unknown_state : __singular;\n@@ -324,7 +324,7 @@ namespace __gnu_debug\n \t: _M_kind(__iterator), _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n-\t  _M_variant._M_iterator._M_address = &__it;\n+\t  _M_variant._M_iterator._M_address = std::__addressof(__it);\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n \t  _M_variant._M_iterator._M_constness = __unknown_constness;\n \t  _M_variant._M_iterator._M_state =\n@@ -340,7 +340,7 @@ namespace __gnu_debug\n \t{\n \t  _M_variant._M_sequence._M_name = __name;\n \t  _M_variant._M_sequence._M_address =\n-\t    static_cast<const _Sequence*>(&__seq);\n+\t    static_cast<const _Sequence*>(std::__addressof(__seq));\n \t  _M_variant._M_sequence._M_type = _GLIBCXX_TYPEID(_Sequence);\n \t}\n \n@@ -349,7 +349,7 @@ namespace __gnu_debug\n \t: _M_kind(__sequence), _M_variant()\n \t{\n \t  _M_variant._M_sequence._M_name = __name;\n-\t  _M_variant._M_sequence._M_address = &__seq;\n+\t  _M_variant._M_sequence._M_address = std::__addressof(__seq);\n \t  _M_variant._M_sequence._M_type = _GLIBCXX_TYPEID(_Sequence);\n \t}\n "}, {"sha": "bf60ccc23c6872e3987a4d7c166dcd3b31ce3cab", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=200fcd339802e67a444ba78dd941eebe8fd8e1f5", "patch": "@@ -64,7 +64,7 @@ namespace __gnu_debug\n   template<typename _Iterator>\n     inline bool\n     __check_singular(const _Iterator& __x)\n-    { return __check_singular_aux(&__x); }\n+    { return __check_singular_aux(std::__addressof(__x)); }\n \n   /** Non-NULL pointers are nonsingular. */\n   template<typename _Tp>"}, {"sha": "9f4c9c0a9741794c09007b8b917d511107c8a80b", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=200fcd339802e67a444ba78dd941eebe8fd8e1f5", "patch": "@@ -524,7 +524,7 @@ namespace __debug\n       splice(iterator __position, list& __x)\n #endif\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(&__x != this,\n+\t_GLIBCXX_DEBUG_VERIFY(std::__addressof(__x) != this,\n \t\t\t      _M_message(__gnu_debug::__msg_self_splice)\n \t\t\t      ._M_sequence(*this, \"this\"));\n \tthis->_M_transfer_from_if(__x, _Not_equal(__x._M_base().end()));\n@@ -552,7 +552,7 @@ namespace __debug\n \t_GLIBCXX_DEBUG_VERIFY(__i._M_dereferenceable(),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_bad)\n \t\t\t      ._M_iterator(__i, \"__i\"));\n-\t_GLIBCXX_DEBUG_VERIFY(__i._M_attached_to(&__x),\n+\t_GLIBCXX_DEBUG_VERIFY(__i._M_attached_to(std::__addressof(__x)),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n \t\t\t     ._M_iterator(__i, \"__i\")._M_sequence(__x, \"__x\"));\n \n@@ -580,7 +580,7 @@ namespace __debug\n       {\n \t__glibcxx_check_insert(__position);\n \t__glibcxx_check_valid_range(__first, __last);\n-\t_GLIBCXX_DEBUG_VERIFY(__first._M_attached_to(&__x),\n+\t_GLIBCXX_DEBUG_VERIFY(__first._M_attached_to(std::__addressof(__x)),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n \t\t\t      ._M_sequence(__x, \"x\")\n \t\t\t      ._M_iterator(__first, \"first\"));\n@@ -595,7 +595,8 @@ namespace __debug\n \t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n-\t    _GLIBCXX_DEBUG_VERIFY(&__x != this || __tmp != __position.base(),\n+\t    _GLIBCXX_DEBUG_VERIFY(std::__addressof(__x) != this\n+\t\t\t\t  || __tmp != __position.base(),\n \t\t\t\t_M_message(__gnu_debug::__msg_splice_overlap)\n \t\t\t\t  ._M_iterator(__tmp, \"position\")\n \t\t\t\t  ._M_iterator(__first, \"first\")\n@@ -685,7 +686,7 @@ namespace __debug\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 300. list::merge() specification incomplete\n-\tif (this != &__x)\n+\tif (this != std::__addressof(__x))\n \t  {\n \t    __glibcxx_check_sorted(_Base::begin(), _Base::end());\n \t    __glibcxx_check_sorted(__x.begin().base(), __x.end().base());\n@@ -710,7 +711,7 @@ namespace __debug\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 300. list::merge() specification incomplete\n-\t  if (this != &__x)\n+\t  if (this != std::__addressof(__x))\n \t    {\n \t      __glibcxx_check_sorted_pred(_Base::begin(), _Base::end(),\n \t\t\t\t\t  __comp);"}, {"sha": "b4429ddd2e44e66ae36e031f060adc808655003d", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/addressof.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Faddressof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200fcd339802e67a444ba78dd941eebe8fd8e1f5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Faddressof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Faddressof.cc?ref=200fcd339802e67a444ba78dd941eebe8fd8e1f5", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <list>\n+\n+namespace N\n+{\n+  // This operator& must not be found by ADL.\n+  template<typename T> void operator&(const T&) { }\n+  struct X { };\n+  bool operator==(const X&, const X&);\n+  bool operator<(const X&, const X&);\n+}\n+\n+template class std::list<N::X>;"}]}