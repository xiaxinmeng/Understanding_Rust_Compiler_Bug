{"sha": "2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4MjE0N2UwZmQyZGQ0YzI4MGI3YjY4YTViMWQ3ODRhN2EwNzdiMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-04-01T17:49:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-04-01T17:49:38Z"}, "message": "re PR c++/60642 (Unclear diagnostic with invalid use of abi_tag attribute on explicit instantiation)\n\n\tPR c++/60642\n\t* decl2.c (is_late_template_attribute): Don't defer abi_tag.\n\t* mangle.c (write_unqualified_name): Fix abi_tag on templates.\n\t* pt.c (get_template_info): Handle NAMESPACE_DECL.\n\t(most_general_template): Handle more kinds of template.\n\t* tree.c (handle_abi_tag_attribute): Ignore abi_tag on template\n\tinstantiations and specializations.\n\nFrom-SVN: r208992", "tree": {"sha": "c54130f7a2a0a694cfbc8ec485ff5ca05b1525c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c54130f7a2a0a694cfbc8ec485ff5ca05b1525c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bcbca7e7c8f6e1c750d23134af9706fce360dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bcbca7e7c8f6e1c750d23134af9706fce360dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bcbca7e7c8f6e1c750d23134af9706fce360dd5"}], "stats": {"total": 117, "additions": 93, "deletions": 24}, "files": [{"sha": "72e28aa391b98772179bd3648cfa0096a7acae7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -1,3 +1,13 @@\n+2014-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60642\n+\t* decl2.c (is_late_template_attribute): Don't defer abi_tag.\n+\t* mangle.c (write_unqualified_name): Fix abi_tag on templates.\n+\t* pt.c (get_template_info): Handle NAMESPACE_DECL.\n+\t(most_general_template): Handle more kinds of template.\n+\t* tree.c (handle_abi_tag_attribute): Ignore abi_tag on template\n+\tinstantiations and specializations.\n+\n 2014-03-31  Patrick Palka  patrick@parcs.ath.cx\n \n \tPR c++/44859"}, {"sha": "6c52e53bca017fef0e0f0dccb8b633aae24e7dc2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -1169,8 +1169,9 @@ is_late_template_attribute (tree attr, tree decl)\n       /* Also defer most attributes on dependent types.  This is not\n \t necessary in all cases, but is the better default.  */\n       else if (dependent_type_p (type)\n-\t       /* But attribute visibility specifically works on\n-\t\t  templates.  */\n+\t       /* But attributes abi_tag and visibility specifically apply\n+\t\t  to templates.  */\n+\t       && !is_attribute_p (\"abi_tag\", name)\n \t       && !is_attribute_p (\"visibility\", name))\n \treturn true;\n       else"}, {"sha": "da82dd6acda90ee07a93bdcd48a6b26b5edc8487", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -180,7 +180,7 @@ static void write_unscoped_template_name (const tree);\n static void write_nested_name (const tree);\n static void write_prefix (const tree);\n static void write_template_prefix (const tree);\n-static void write_unqualified_name (const tree);\n+static void write_unqualified_name (tree);\n static void write_conversion_operator_name (const tree);\n static void write_source_name (tree);\n static void write_literal_operator_name (tree);\n@@ -1195,7 +1195,7 @@ write_unqualified_id (tree identifier)\n }\n \n static void\n-write_unqualified_name (const tree decl)\n+write_unqualified_name (tree decl)\n {\n   MANGLE_TRACE_TREE (\"unqualified-name\", decl);\n \n@@ -1280,10 +1280,21 @@ write_unqualified_name (const tree decl)\n         write_source_name (DECL_NAME (decl));\n     }\n \n-  tree attrs = (TREE_CODE (decl) == TYPE_DECL\n-\t\t? TYPE_ATTRIBUTES (TREE_TYPE (decl))\n-\t\t: DECL_ATTRIBUTES (decl));\n-  write_abi_tags (lookup_attribute (\"abi_tag\", attrs));\n+  /* We use the ABI tags from the primary template, ignoring tags on any\n+     specializations.  This is necessary because C++ doesn't require a\n+     specialization to be declared before it is used unless the use\n+     requires a complete type, but we need to get the tags right on\n+     incomplete types as well.  */\n+  if (tree tmpl = most_general_template (decl))\n+    decl = DECL_TEMPLATE_RESULT (tmpl);\n+  /* Don't crash on an unbound class template.  */\n+  if (decl)\n+    {\n+      tree attrs = (TREE_CODE (decl) == TYPE_DECL\n+\t\t    ? TYPE_ATTRIBUTES (TREE_TYPE (decl))\n+\t\t    : DECL_ATTRIBUTES (decl));\n+      write_abi_tags (lookup_attribute (\"abi_tag\", attrs));\n+    }\n }\n \n /* Write the unqualified-name for a conversion operator to TYPE.  */"}, {"sha": "bfb49d7f8244bf9fd8f906c64c28ae5b44ea084c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -320,6 +320,9 @@ get_template_info (const_tree t)\n   if (!t || t == error_mark_node)\n     return NULL;\n \n+  if (TREE_CODE (t) == NAMESPACE_DECL)\n+    return NULL;\n+\n   if (DECL_P (t) && DECL_LANG_SPECIFIC (t))\n     tinfo = DECL_TEMPLATE_INFO (t);\n \n@@ -18758,23 +18761,18 @@ most_specialized_instantiation (tree templates)\n tree\n most_general_template (tree decl)\n {\n-  /* If DECL is a FUNCTION_DECL, find the TEMPLATE_DECL of which it is\n-     an immediate specialization.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n+  if (TREE_CODE (decl) != TEMPLATE_DECL)\n     {\n-      if (DECL_TEMPLATE_INFO (decl)) {\n-\tdecl = DECL_TI_TEMPLATE (decl);\n-\n-\t/* The DECL_TI_TEMPLATE can be an IDENTIFIER_NODE for a\n-\t   template friend.  */\n-\tif (TREE_CODE (decl) != TEMPLATE_DECL)\n-\t  return NULL_TREE;\n-      } else\n+      if (tree tinfo = get_template_info (decl))\n+\tdecl = TI_TEMPLATE (tinfo);\n+      /* The TI_TEMPLATE can be an IDENTIFIER_NODE for a\n+\t template friend, or a FIELD_DECL for a capture pack.  */\n+      if (TREE_CODE (decl) != TEMPLATE_DECL)\n \treturn NULL_TREE;\n     }\n \n   /* Look for more and more general templates.  */\n-  while (DECL_TEMPLATE_INFO (decl))\n+  while (DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl))\n     {\n       /* The DECL_TI_TEMPLATE can be an IDENTIFIER_NODE in some cases.\n \t (See cp-tree.h for details.)  */"}, {"sha": "3429d2396f2d67dc083552088488e8c36d925ac4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -3364,6 +3364,18 @@ handle_abi_tag_attribute (tree* node, tree name, tree args,\n \t\t name, *node);\n \t  goto fail;\n \t}\n+      else if (CLASSTYPE_TEMPLATE_INSTANTIATION (*node))\n+\t{\n+\t  warning (OPT_Wattributes, \"ignoring %qE attribute applied to \"\n+\t\t   \"template instantiation %qT\", name, *node);\n+\t  goto fail;\n+\t}\n+      else if (CLASSTYPE_TEMPLATE_SPECIALIZATION (*node))\n+\t{\n+\t  warning (OPT_Wattributes, \"ignoring %qE attribute applied to \"\n+\t\t   \"template specialization %qT\", name, *node);\n+\t  goto fail;\n+\t}\n \n       tree attributes = TYPE_ATTRIBUTES (*node);\n       tree decl = TYPE_NAME (*node);"}, {"sha": "2c84e407995f9838f3b74970f5774b1391c48523", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -17542,6 +17542,10 @@ unimportant.\n A redeclaration of a function or class must not add new ABI tags,\n since doing so would change the mangled name.\n \n+The ABI tags apply to a name, so all instantiations and\n+specializations of a template have the same tags.  The attribute will\n+be ignored if applied to an explicit specialization or instantiation.\n+\n The @option{-Wabi-tag} flag enables a warning about a class which does\n not have all the ABI tags used by its subobjects and virtual functions; for users with code\n that needs to coexist with an earlier ABI, using this option can help"}, {"sha": "13cb3c2f2e91a2697b61421963a4c7a19574a97c", "filename": "gcc/testsuite/g++.dg/abi/abi-tag3.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag3.C?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -1,5 +1,4 @@\n-// An explicit specialization doesn't get the tag from its template unless\n-// it is specified there, too.\n+// An explicit specialization gets the tag from its template.\n \n // { dg-final { scan-assembler \"_ZN3FooB5cxx11IcE1fEv\" } }\n template<typename T>\n@@ -12,12 +11,12 @@ struct __attribute ((abi_tag(\"cxx11\"))) Foo\n template<>\n struct\n __attribute ((abi_tag(\"cxx11\")))\n-Foo<int>\n+Foo<int>\t\t\t// { dg-warning \"attribute\" }\n {\n   int f();\n };\n \n-// { dg-final { scan-assembler \"_ZN3FooIdE1fEv\" } }\n+// { dg-final { scan-assembler \"_ZN3FooB5cxx11IdE1fEv\" } }\n template<>\n struct\n Foo<double>"}, {"sha": "94ea2f37b6b8009d32acab9d112b42eb2e6d25fe", "filename": "gcc/testsuite/g++.dg/abi/abi-tag6.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag6.C?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/60642\n+\n+struct __attribute((abi_tag(\"test\"))) foo\n+{\n+  void f();\n+  virtual ~foo();\n+};\n+\n+template<typename>\n+struct __attribute((abi_tag(\"test\"))) bar\n+{\n+  void f();\n+  virtual ~bar();\n+};\n+\n+int main()\n+{\n+  foo f;\n+  f.f();\n+\n+  bar<int> b;\n+  b.f();\n+}\n+\n+// { dg-final { scan-assembler \"_ZTV3barB4testIiE\" } }"}, {"sha": "4c47725c5362f4f35b779cd52ba674e731eec872", "filename": "gcc/testsuite/g++.dg/abi/abi-tag7.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2982147e0fd2dd4c280b7b68a5b1d784a7a077b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag7.C?ref=2982147e0fd2dd4c280b7b68a5b1d784a7a077b1", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/60642\n+\n+template<typename T>\n+class __attribute((abi_tag(\"foo\"))) test{  };\n+\n+template class __attribute((abi_tag(\"foo\"))) test<int>; // { dg-warning \"attribute\" }\n+\n+void f(test<char>*) {}\n+// { dg-final { scan-assembler \"_Z1fP4testB3fooIcE\" } }"}]}