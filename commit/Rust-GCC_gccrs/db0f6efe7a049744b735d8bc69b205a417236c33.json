{"sha": "db0f6efe7a049744b735d8bc69b205a417236c33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwZjZlZmU3YTA0OTc0NGI3MzVkOGJjNjliMjA1YTQxNzIzNmMzMw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-26T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-26T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "1eed96929e436db446922f3bcdd114b8e1ec28cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eed96929e436db446922f3bcdd114b8e1ec28cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db0f6efe7a049744b735d8bc69b205a417236c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0f6efe7a049744b735d8bc69b205a417236c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0f6efe7a049744b735d8bc69b205a417236c33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0f6efe7a049744b735d8bc69b205a417236c33/comments", "author": null, "committer": null, "parents": [{"sha": "4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f73bf20d9c0ad1cd143db39d73f70841dcc1471"}], "stats": {"total": 345, "additions": 344, "deletions": 1}, "files": [{"sha": "f6605eae08c1bbe502d35765bbc0bca64667d187", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db0f6efe7a049744b735d8bc69b205a417236c33", "patch": "@@ -1,3 +1,122 @@\n+2020-08-25  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95863\n+\t* config/i386/i386.h (CTZ_DEFINED_VALUE_AT_ZERO): Return 0/2.\n+\t(CLZ_DEFINED_VALUE_AT_ZERO): Likewise.\n+\n+2020-08-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/87256\n+\t* config/pa/pa.c (hppa_rtx_costs_shadd_p): New helper function\n+\tto check for coefficients supported by shNadd and shladd,l.\n+\t(hppa_rtx_costs):  Rewrite to avoid using estimates based upon\n+\tFACTOR and enable recursing deeper into RTL expressions.\n+\n+2020-08-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/pa/pa.md (ashldi3): Additionally, on !TARGET_64BIT\n+\tgenerate a two instruction shd/zdep sequence when shifting\n+\tregisters by suitable constants.\n+\t(shd_internal): New define_expand to provide gen_shd_internal.\n+\n+2020-08-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Rename\n+\t__ARM_FEATURE_SVE_VECTOR_OPERATIONS to\n+\t__ARM_FEATURE_SVE_VECTOR_OPERATORS.\n+\n+2020-08-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.cc (add_sve_type_attribute):\n+\tTake the ACLE name of the type as a parameter and add it as fourth\n+\targument to the \"SVE type\" attribute.\n+\t(register_builtin_types): Update call accordingly.\n+\t(register_tuple_type): Likewise.  Construct the name of the type\n+\tearlier in order to do this.\n+\t(get_arm_sve_vector_bits_attributes): New function.\n+\t(handle_arm_sve_vector_bits_attribute): Report a more sensible\n+\terror message if the attribute is applied to an SVE tuple type.\n+\tDon't allow the attribute to be applied to an existing fixed-length\n+\tSVE type.  Mangle the new type as __SVE_VLS<type, vector-bits>.\n+\tAdd a dummy TYPE_DECL to the new type.\n+\n+2020-08-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.cc (DEF_SVE_TYPE): Add a\n+\tleading \"u\" to each mangled name.\n+\n+2020-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96548\n+\tPR tree-optimization/96760\n+\t* tree-ssa-loop-im.c (tree_ssa_lim): Recompute RPO after\n+\tstore-motion.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96722\n+\t* gimple.c (infer_nonnull_range): Formatting fix.\n+\t(infer_nonnull_range_by_dereference): Return false for clobber stmts.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96758\n+\t* tree-ssa-strlen.c (handle_builtin_string_cmp): If both cstlen1\n+\tand cstlen2 are set, set cmpsiz to their minimum, otherwise use the\n+\tone that is set.  If bound is used and smaller than cmpsiz, set cmpsiz\n+\tto bound.  If both cstlen1 and cstlen2 are set, perform the optimization.\n+\n+2020-08-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/96730\n+\t* tree-sra.c (create_access): Disqualify any aggregate with negative\n+\toffset access.\n+\t(build_ref_for_model): Add assert that offset is non-negative.\n+\n+2020-08-25  Wei Wentao  <weiwt.fnst@cn.fujitsu.com>\n+\n+\t* rtl.def: Fix typo in comment.\n+\n+2020-08-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/21137\n+\t* fold-const.c (fold_binary_loc) [NE_EXPR/EQ_EXPR]: Call\n+\tSTRIP_NOPS when checking whether to simplify ((x>>C1)&C2) != 0.\n+\n+2020-08-25  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR middle-end/64242\n+\t* config/mips/mips.md (builtin_longjmp): Restore the frame\n+\tpointer and stack pointer and gp.\n+\n+2020-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96690\n+\t* dwarf2out.c (reference_to_unused): Make FUNCTION_DECL\n+\tprocessing more consistent with respect to\n+\tsymtab->global_info_ready.\n+\t(tree_add_const_value_attribute): Unconditionally call\n+\trtl_for_decl_init to do all mangling early but throw\n+\taway the result if early_dwarf.\n+\n+2020-08-25  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/96755\n+\t* config/i386/sse.md: Correct the mode of NOT operands to\n+\tSImode.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96715\n+\t* match.pd (copysign(x,-x) -> -x): New simplification.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95450\n+\t* fold-const.c (native_interpret_real): For MODE_COMPOSITE_P modes\n+\tpunt if the to be returned REAL_CST does not encode to the bitwise\n+\tsame representation.\n+\n 2020-08-24  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Configuration): Switch valgrind.com to https."}, {"sha": "1aa5e58d9a2b651c4f292991409fd4bbf8476cba", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=db0f6efe7a049744b735d8bc69b205a417236c33", "patch": "@@ -1 +1 @@\n-20200825\n+20200826"}, {"sha": "b04b6fd755f89aeb231707b1a2c30b5bab6ae4d7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=db0f6efe7a049744b735d8bc69b205a417236c33", "patch": "@@ -1,3 +1,9 @@\n+2020-08-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/96678\n+\t* c-typeck.c (handle_omp_array_sections_1): Talk about\n+\tarray function parameter in the error message.\n+\n 2020-08-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/96571"}, {"sha": "ddc5f1b73016997daf11271917d067e79ecd64c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db0f6efe7a049744b735d8bc69b205a417236c33", "patch": "@@ -1,3 +1,26 @@\n+2020-08-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/96678\n+\t* semantics.c (handle_omp_array_sections_1): Talk about\n+\tarray function parameter in the error message.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96721\n+\t* cp-tree.h (build_trivial_dtor_call): Add bool argument defaulted\n+\tto false.\n+\t* call.c (build_trivial_dtor_call): Add NO_PTR_DEREF argument.  If\n+\tinstance is a pointer and NO_PTR_DEREF is true, clobber the pointer\n+\trather than what it points to.\n+\t* semantics.c (finish_call_expr): Call build_trivial_dtor_call with\n+\ttrue as NO_PTR_DEREF.\n+\n+2020-08-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95428\n+\t* optimize.c (populate_clone_array): Revert PR70462 change.\n+\t(maybe_clone_body): Likewise.\n+\n 2020-08-24  Nathan Sidwell  <nathan@acm.org>\n \n \t* ptree.c (debug_overload): New."}, {"sha": "4b1082ee25ae0e9deed24c8cfb9233be80873545", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0f6efe7a049744b735d8bc69b205a417236c33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db0f6efe7a049744b735d8bc69b205a417236c33", "patch": "@@ -1,3 +1,100 @@\n+2020-08-25  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95863\n+\t* gcc.target/i386/pr95863-1.c: New test.\n+\t* gcc.target/i386/pr95863-2.c: Likewise.\n+\n+2020-08-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/96678\n+\t* c-c++-common/gomp/map-4.c: New test.\n+\t* c-c++-common/gomp/depend-1.c: Update dg-error.\n+\t* c-c++-common/gomp/map-1.c: Likewise.\n+\t* c-c++-common/gomp/reduction-1.c: Likewise.\n+\t* g++.dg/gomp/depend-1.C: Likewise.\n+\t* g++.dg/gomp/depend-2.C: Likewise.\n+\n+2020-08-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/attributes_1.c: Rename\n+\t__ARM_FEATURE_SVE_VECTOR_OPERATIONS to\n+\t__ARM_FEATURE_SVE_VECTOR_OPERATORS.\n+\n+2020-08-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/acle/general-c++/attributes_2.C: New test.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_6.C: Likewise.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_7.C: Likewise.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_8.C: Likewise.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_9.C: Likewise.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_10.C: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general/attributes_7.c: Check the\n+\terror messages reported when arm_sve_vector_bits is applied to\n+\tSVE tuple types or to existing fixed-length SVE types.\n+\n+2020-08-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_1.C: Add a leading\n+\t\"u\" to the mangling of each SVE vector and predicate type.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_2.C: Likewise.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_3.C: Likewise.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_5.C: Likewise.\n+\n+2020-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96548\n+\tPR tree-optimization/96760\n+\t* gcc.dg/torture/pr96548.c: New testcase.\n+\t* gcc.dg/torture/pr96760.c: Likewise.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96722\n+\t* g++.dg/opt/pr96722.C: New test.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96758\n+\t* gcc.dg/strcmpopt_12.c: New test.\n+\n+2020-08-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/96730\n+\t* gcc.dg/tree-ssa/pr96730.c: New test.\n+\n+2020-08-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/21137\n+\t* gcc.dg/pr21137.c: New test.\n+\n+2020-08-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96690\n+\t* g++.dg/lto/pr96690_0.C: New testcase.\n+\n+2020-08-25  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr96755.c: New test.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96715\n+\t* gcc.dg/tree-ssa/copy-sign-3.c: New test.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96721\n+\t* g++.dg/opt/flifetime-dse8.C: New test.\n+\n+2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95450\n+\t* gcc.target/powerpc/pr95450.c: New test.\n+\n+2020-08-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/other/final8.C: Adjust expected output.\n+\n 2020-08-24  Mark Eggleston  <markeggleston@gcc.gnu.org>\n \n \tPR fortran/96486"}, {"sha": "dd25ec5e8b9391741fcdadfe26c04bb4bee66253", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0f6efe7a049744b735d8bc69b205a417236c33/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0f6efe7a049744b735d8bc69b205a417236c33/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=db0f6efe7a049744b735d8bc69b205a417236c33", "patch": "@@ -1,3 +1,101 @@\n+2020-08-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/21_strings/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/deque/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/deque/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/forward_list/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/forward_list/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/list/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/list/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/map/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/map/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/multimap/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/multimap/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/multiset/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/multiset/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/set/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/set/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/unordered_map/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/unordered_map/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/unordered_multimap/debug/iterator_self_move_assign_neg.cc:\n+\tRemoved.\n+\t* testsuite/23_containers/unordered_multimap/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/unordered_multiset/debug/iterator_self_move_assign_neg.cc:\n+\tRemoved.\n+\t* testsuite/23_containers/unordered_multiset/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/unordered_set/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/unordered_set/debug/self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/vector/debug/iterator_self_move_assign_neg.cc: Removed.\n+\t* testsuite/23_containers/vector/debug/self_move_assign_neg.cc: Removed.\n+\n+2020-08-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/chrono (year_month_weekday::ok): Fix assert.\n+\n+2020-08-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future (future, shared_future. promise): Add\n+\tis_destructible assertion (LWG 3466). Adjust string-literal for\n+\t!is_array and !is_function assertions.\n+\t* testsuite/30_threads/future/requirements/lwg3458.cc: Check\n+\ttypes with no accessible destructor. Adjust expected errors.\n+\t* testsuite/30_threads/promise/requirements/lwg3466.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/shared_future/requirements/lwg3458.cc:\n+\tLikewise.\n+\n+2020-08-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/chrono (time_point::operator++)\n+\t(time_point::operator--): Define.\n+\t(utc_clock, tai_clock, gps_clock): Forward declare.\n+\t(utc_time, utc_seconds, tai_time, tai_seconds, gps_time)\n+\t(gps_seconds): Define.\n+\t(is_clock<utc_clock>, is_clock<tai_clock>, is_clock<gps_clock>)\n+\t(is_clock_v<utc_clock>, is_clock_v<tai_clock>)\n+\t(is_clock_v<gps_clock>): Define these specializations.\n+\t(leap_second_info): Define.\n+\t(day, month, year, weekday, weekday_indexed)\n+\t(weekday_last, month_day, month_day_last, month_weekday)\n+\t(month_weekday_last, year_month, year_month_day)\n+\t(year_month_day_last, year_month_weekday, year_month_weekday_last):\n+\tDeclare and later define.\n+\t(last_spec, last, __detail::__days_per_month)\n+\t(__detail::__days_per_month, __detail::__last_day): Define.\n+\t(January, February, March, April, May, June, July, August)\n+\t(September, October, November, December, Sunday, Monday, Tuesday)\n+\t(Wednesday, Thursday, Friday, Saturday): Define.\n+\t(weekday::operator[]): Define out-of-line.\n+\t(year_month_day::_S_from_days, year_month_day::M_days_since_epoch):\n+\tLikewise.\n+\t(year_month_day::year_month_day, year_month_day::ok): Likewise.\n+\t(__detail::__pow10, hh_mm_ss): Define.\n+\t(literals::chrono_literals::operator\"\"d)\n+\t(literals::chrono_literals::operator\"\"y): Define.\n+\t(is_am, is_pm, make12, make24): Define.\n+\t* testsuite/20_util/time_point/4.cc: New test.\n+\t* testsuite/std/time/day/1.cc: New test.\n+\t* testsuite/std/time/hh_mm_ss/1.cc: New test.\n+\t* testsuite/std/time/is_am/1.cc: New test.\n+\t* testsuite/std/time/is_pm/1.cc: New test.\n+\t* testsuite/std/time/make12/1.cc: New test.\n+\t* testsuite/std/time/make24/1.cc: New test.\n+\t* testsuite/std/time/month/1.cc: New test.\n+\t* testsuite/std/time/month_day/1.cc: New test.\n+\t* testsuite/std/time/month_day_last/1.cc: New test.\n+\t* testsuite/std/time/month_weekday/1.cc: New test.\n+\t* testsuite/std/time/month_weekday_last/1.cc: New test.\n+\t* testsuite/std/time/weekday/1.cc: New test.\n+\t* testsuite/std/time/weekday_indexed/1.cc: New test.\n+\t* testsuite/std/time/weekday_last/1.cc: New test.\n+\t* testsuite/std/time/year/1.cc: New test.\n+\t* testsuite/std/time/year_month/1.cc: New test.\n+\t* testsuite/std/time/year_month_day/1.cc: New test.\n+\t* testsuite/std/time/year_month_day_last/1.cc: New test.\n+\t* testsuite/std/time/year_month_weekday/1.cc: New test.\n+\t* testsuite/std/time/year_month_weekday_last/1.cc: New test.\n+\n 2020-08-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/ranges (join_view): Add deduction guide (LWG 3474)."}]}