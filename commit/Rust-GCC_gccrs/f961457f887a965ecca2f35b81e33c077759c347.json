{"sha": "f961457f887a965ecca2f35b81e33c077759c347", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2MTQ1N2Y4ODdhOTY1ZWNjYTJmMzViODFlMzNjMDc3NzU5YzM0Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-12T04:03:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-12T04:03:49Z"}, "message": "symtab.c (section_hash): New hash.\n\n\n\t* symtab.c (section_hash): New hash.\n\t(symtab_unregister_node): Clear section before freeing.\n\t(hash_section_hash_entry): New haser.\n\t(eq_sections): New function.\n\t(symtab_node::set_section_for_node): New method.\n\t(set_section_1): Update.\n\t(symtab_node::set_section): Take string instead of tree as parameter.\n\t(symtab_resolve_alias): Update.\n\t* cgraph.h (section_hash_entry_d): New structure.\n\t(section_hash_entry): New typedef.\n\t(cgraph_node): Change comdat_group_ to x_comdat_group,\n\tchange section_ to x_section and turn into section_hash_entry;\n\tupdate accestors; put set_section_for_node offline.\n\t* tree.c (decl_section_name): Turn into string.\n\t(set_decl_section_name): Change parameter to be string.\n\t* tree.h (decl_section_name, set_decl_section_name): Update prototypes.\n\t* sdbout.c (sdbout_one_type): Update.\n\t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p): Update.\n\t* varasm.c (IN_NAMED_SECTION, get_named_section, resolve_unique_section,\n\thot_function_section, get_named_text_section, USE_SELECT_SECTION_FOR_FUNCTIONS,\n\tdefault_function_rodata_section, make_decl_rtl, default_unique_section):\n\tUpdate.\n\t* config/c6x/c6x.c (c6x_in_small_data_p): Update.\n\t(c6x_elf_unique_section): Update.\n\t* config/nios2/nios2.c (nios2_in_small_data_p): Update.\n\t* config/pa/pa.c (pa_function_section): Update.\n\t* config/pa/pa.h (IN_NAMED_SECTION_P): Update.\n\t* config/ia64/ia64.c (ia64_in_small_data_p): Update.\n\t* config/arc/arc.c (arc_in_small_data_p): Update.\n\t* config/arm/unknown-elf.h (IN_NAMED_SECTION_P): Update.\n\t* config/mcore/mcore.c (mcore_unique_section): Update.\n\t* config/mips/mips.c (mips16_build_function_stub): Update.\n\t(mips16_build_call_stub): Update.\n\t(mips_function_rodata_section): Update.\n\t(mips_in_small_data_p): Update.\n\t* config/score/score.c (score_in_small_data_p): Update.\n\t* config/rx/rx.c (rx_in_small_data): Update.\n\t* config/rs6000/rs6000.c (rs6000_elf_in_small_data_p): Update.\n\t(rs6000_xcoff_asm_named_section): Update.\n\t(rs6000_xcoff_unique_section): Update.\n\t* config/frv/frv.c (frv_string_begins_with): Update.\n\t(frv_in_small_data_p): Update.\n\t* config/v850/v850.c (v850_encode_data_area): Update.\n\t* config/bfin/bfin.c (DECL_SECTION_NAME): Update.\n\t(bfin_handle_l1_data_attribute): Update.\n\t(bfin_handle_l2_attribute): Update.\n\t* config/mep/mep.c (mep_unique_section): Update.\n\t* config/microblaze/microblaze.c (microblaze_elf_in_small_data_p): Update.\n\t* config/h8300/h8300.c (h8300_handle_eightbit_data_attribute): Update.\n\t(h8300_handle_tiny_data_attribute): Update.\n\t* config/m32r/m32r.c (m32r_in_small_data_p): Update.\n\t(m32r_in_small_data_p): Update.\n\t* config/alpha/alpha.c (alpha_in_small_data_p): Update.\n\t* config/i386/i386.c (ix86_in_large_data_p): Update.\n\t* config/i386/winnt.c (i386_pe_unique_section): Update.\n\t* config/darwin.c (darwin_function_section): Update.\n\t* config/lm32/lm32.c (lm32_in_small_data_p): Update.\n\t* tree-emutls.c (get_emutls_init_templ_addr): Update.\n\t(new_emutls_decl): Update.\n\t* lto-cgraph.c (lto_output_node, input_node, input_varpool_node,\n\tinput_varpool_node): Update.\n\t(ead_string_cst): Turn to ...\n\t(read_string): ... this one.\n\t* dwarf2out.c (secname_for_decl): Update.\n\t* asan.c (asan_protect_global): Update.\n\n\t* c-family/c-common.c (handle_section_attribute): Update handling for\n\tsection names that are no longer trees.\n\n\t* java/class.c (build_utf8_ref): Update handling for section names\n\tthat are no longer trees.\n\t(emit_register_classes_in_jcr_section): Update.\n\n\t* vtable-class-hierarchy.c: Update handling for section names\n\tthat are no longer trees.\n\t* decl.c (duplicate_decls): Likewise.\n\n\t* gcc-interface/utils.c:  Update handling for section names\n\tthat are no longer trees.\n\nFrom-SVN: r211489", "tree": {"sha": "40360d8b10e6d2d13c2b1ae77545f00bc6f2121b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40360d8b10e6d2d13c2b1ae77545f00bc6f2121b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f961457f887a965ecca2f35b81e33c077759c347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f961457f887a965ecca2f35b81e33c077759c347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f961457f887a965ecca2f35b81e33c077759c347", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f961457f887a965ecca2f35b81e33c077759c347/comments", "author": null, "committer": null, "parents": [{"sha": "e35889871c9e5e6f8ea0d8c10f3d6d9fe2d9c854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35889871c9e5e6f8ea0d8c10f3d6d9fe2d9c854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35889871c9e5e6f8ea0d8c10f3d6d9fe2d9c854"}], "stats": {"total": 439, "additions": 291, "deletions": 148}, "files": [{"sha": "04736b8cd9f98ce6b4fff74e594c4f294802efec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1,3 +1,71 @@\n+2014-06-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* symtab.c (section_hash): New hash.\n+\t(symtab_unregister_node): Clear section before freeing.\n+\t(hash_section_hash_entry): New haser.\n+\t(eq_sections): New function.\n+\t(symtab_node::set_section_for_node): New method.\n+\t(set_section_1): Update.\n+\t(symtab_node::set_section): Take string instead of tree as parameter.\n+\t(symtab_resolve_alias): Update.\n+\t* cgraph.h (section_hash_entry_d): New structure.\n+\t(section_hash_entry): New typedef.\n+\t(cgraph_node): Change comdat_group_ to x_comdat_group,\n+\tchange section_ to x_section and turn into section_hash_entry;\n+\tupdate accestors; put set_section_for_node offline.\n+\t* tree.c (decl_section_name): Turn into string.\n+\t(set_decl_section_name): Change parameter to be string.\n+\t* tree.h (decl_section_name, set_decl_section_name): Update prototypes.\n+\t* sdbout.c (sdbout_one_type): Update.\n+\t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p): Update.\n+\t* varasm.c (IN_NAMED_SECTION, get_named_section, resolve_unique_section,\n+\thot_function_section, get_named_text_section, USE_SELECT_SECTION_FOR_FUNCTIONS,\n+\tdefault_function_rodata_section, make_decl_rtl, default_unique_section):\n+\tUpdate.\n+\t* config/c6x/c6x.c (c6x_in_small_data_p): Update.\n+\t(c6x_elf_unique_section): Update.\n+\t* config/nios2/nios2.c (nios2_in_small_data_p): Update.\n+\t* config/pa/pa.c (pa_function_section): Update.\n+\t* config/pa/pa.h (IN_NAMED_SECTION_P): Update.\n+\t* config/ia64/ia64.c (ia64_in_small_data_p): Update.\n+\t* config/arc/arc.c (arc_in_small_data_p): Update.\n+\t* config/arm/unknown-elf.h (IN_NAMED_SECTION_P): Update.\n+\t* config/mcore/mcore.c (mcore_unique_section): Update.\n+\t* config/mips/mips.c (mips16_build_function_stub): Update.\n+\t(mips16_build_call_stub): Update.\n+\t(mips_function_rodata_section): Update.\n+\t(mips_in_small_data_p): Update.\n+\t* config/score/score.c (score_in_small_data_p): Update.\n+\t* config/rx/rx.c (rx_in_small_data): Update.\n+\t* config/rs6000/rs6000.c (rs6000_elf_in_small_data_p): Update.\n+\t(rs6000_xcoff_asm_named_section): Update.\n+\t(rs6000_xcoff_unique_section): Update.\n+\t* config/frv/frv.c (frv_string_begins_with): Update.\n+\t(frv_in_small_data_p): Update.\n+\t* config/v850/v850.c (v850_encode_data_area): Update.\n+\t* config/bfin/bfin.c (DECL_SECTION_NAME): Update.\n+\t(bfin_handle_l1_data_attribute): Update.\n+\t(bfin_handle_l2_attribute): Update.\n+\t* config/mep/mep.c (mep_unique_section): Update.\n+\t* config/microblaze/microblaze.c (microblaze_elf_in_small_data_p): Update.\n+\t* config/h8300/h8300.c (h8300_handle_eightbit_data_attribute): Update.\n+\t(h8300_handle_tiny_data_attribute): Update.\n+\t* config/m32r/m32r.c (m32r_in_small_data_p): Update.\n+\t(m32r_in_small_data_p): Update.\n+\t* config/alpha/alpha.c (alpha_in_small_data_p): Update.\n+\t* config/i386/i386.c (ix86_in_large_data_p): Update.\n+\t* config/i386/winnt.c (i386_pe_unique_section): Update.\n+\t* config/darwin.c (darwin_function_section): Update.\n+\t* config/lm32/lm32.c (lm32_in_small_data_p): Update.\n+\t* tree-emutls.c (get_emutls_init_templ_addr): Update.\n+\t(new_emutls_decl): Update.\n+\t* lto-cgraph.c (lto_output_node, input_node, input_varpool_node,\n+\tinput_varpool_node): Update.\n+\t(ead_string_cst): Turn to ...\n+\t(read_string): ... this one.\n+\t* dwarf2out.c (secname_for_decl): Update.\n+\t* asan.c (asan_protect_global): Update.\n+\n 2014-06-11  DJ Delorie  <dj@redhat.com>\n \n \t* config/rx/rx.h (FUNCTION_BOUNDARY): Adjust for RX100/200 4-byte"}, {"sha": "d6b86461567e1fb59e5a75077f056be8ecb8fc75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1,3 +1,8 @@\n+2014-06-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc-interface/utils.c:  Update handling for section names\n+\tthat are no longer trees.\n+\n 2014-06-11  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb: Minor reformatting."}, {"sha": "bb4d513db8c73bed0df31a690ba74bef3db3f1c4", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -2476,9 +2476,7 @@ process_attributes (tree *node, struct attrib **attr_list, bool in_place,\n       case ATTR_LINK_SECTION:\n \tif (targetm_common.have_named_sections)\n \t  {\n-\t    tree name = build_string (IDENTIFIER_LENGTH (attr->name),\n-\t\t\t\t      IDENTIFIER_POINTER (attr->name));\n-\t    set_decl_section_name (*node, name);\n+\t    set_decl_section_name (*node, attr->name);\n \t    DECL_COMMON (*node) = 0;\n \t  }\n \telse"}, {"sha": "651cfedc0707c37dd1313090e2a69a9b15c7fc0d", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1288,7 +1288,7 @@ asan_protect_global (tree decl)\n \t into user section from multiple TUs are then assumed\n \t to be an array of such vars, putting padding in there\n \t breaks this assumption.  */\n-      || (DECL_SECTION_NAME (decl) != NULL_TREE\n+      || (DECL_SECTION_NAME (decl) != NULL\n \t  && !symtab_get_node (decl)->implicit_section)\n       || DECL_SIZE (decl) == 0\n       || ASAN_RED_ZONE_SIZE * BITS_PER_UNIT > MAX_OFILE_ALIGNMENT"}, {"sha": "e7c87db04565edfba13a931303a67c41ea46dc95", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1,3 +1,8 @@\n+2014-06-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-family/c-common.c (handle_section_attribute): Update handling for\n+\tsection names that are no longer trees.\n+\n 2014-06-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/60928"}, {"sha": "b010653ddcc439892b11246747a800a943a053a5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -7426,8 +7426,8 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \n \t  /* The decl may have already been given a section attribute\n \t     from a previous declaration.  Ensure they match.  */\n-\t  else if (DECL_SECTION_NAME (decl) != NULL_TREE\n-\t\t   && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t  else if (DECL_SECTION_NAME (decl) != NULL\n+\t\t   && strcmp (DECL_SECTION_NAME (decl),\n \t\t\t      TREE_STRING_POINTER (TREE_VALUE (args))) != 0)\n \t    {\n \t      error (\"section of %q+D conflicts with previous declaration\",\n@@ -7442,7 +7442,8 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t      *no_add_attrs = true;\n \t    }\n \t  else\n-\t    set_decl_section_name (decl, TREE_VALUE (args));\n+\t    set_decl_section_name (decl,\n+\t\t\t\t   TREE_STRING_POINTER (TREE_VALUE (args)));\n \t}\n       else\n \t{"}, {"sha": "4acb4f9f50dfa36b0a74d5682e977064be951e8f", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -2305,7 +2305,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t must be done later in decl_attributes since we are called\n \t before attributes are assigned.  */\n       if ((DECL_EXTERNAL (olddecl) || TREE_PUBLIC (olddecl) || TREE_STATIC (olddecl))\n-\t  && DECL_SECTION_NAME (newdecl) == NULL_TREE\n+\t  && DECL_SECTION_NAME (newdecl) == NULL\n \t  && DECL_SECTION_NAME (olddecl))\n \tset_decl_section_name (newdecl, DECL_SECTION_NAME (olddecl));\n "}, {"sha": "1a5e85e2a6acb8e03ef819cf85543221d73dbcf4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -37,6 +37,19 @@ enum symtab_type\n   SYMTAB_VARIABLE\n };\n \n+/* Section names are stored as reference counted strings in GGC safe hashtable\n+   (to make them survive through PCH).  */\n+\n+struct GTY(()) section_hash_entry_d\n+{\n+  int ref_count;\n+  char *name;  /* As long as this datastructure stays in GGC, we can not put\n+\t\t  string at the tail of structure of GGC dies in horrible\n+\t\t  way  */\n+};\n+\n+typedef struct section_hash_entry_d section_hash_entry;\n+\n /* Base of all entries in the symbol table.\n    The symtab_node is inherited by cgraph and varpol nodes.  */\n class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n@@ -147,47 +160,30 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Return comdat group.  */\n   tree get_comdat_group ()\n     {\n-      return comdat_group_;\n+      return x_comdat_group;\n     }\n \n   tree get_comdat_group_id ()\n     {\n-      if (comdat_group_ && TREE_CODE (comdat_group_) != IDENTIFIER_NODE)\n-\tcomdat_group_ = DECL_ASSEMBLER_NAME (comdat_group_);\n-      return comdat_group_;\n+      if (x_comdat_group && TREE_CODE (x_comdat_group) != IDENTIFIER_NODE)\n+\tx_comdat_group = DECL_ASSEMBLER_NAME (x_comdat_group);\n+      return x_comdat_group;\n     }\n \n   /* Set comdat group.  */\n   void set_comdat_group (tree group)\n     {\n       gcc_checking_assert (!group || TREE_CODE (group) == IDENTIFIER_NODE\n \t\t\t   || DECL_P (group));\n-      comdat_group_ = group;\n-    }\n-\n-  /* Return section as STRING_CST.  */\n-  tree get_section_name ()\n-    {\n-      return section_;\n+      x_comdat_group = group;\n     }\n \n   /* Return section as string.  */\n   const char * get_section ()\n     {\n-      if (!section_)\n+      if (!x_section)\n \treturn NULL;\n-      return TREE_STRING_POINTER (section_);\n-    }\n-\n-  /* Set section, do not recurse into aliases.\n-     When one wants to change section of symbol and its aliases,\n-     use set_section  */\n-  void set_section_for_node (tree section)\n-    {\n-      gcc_checking_assert (!section || TREE_CODE (section) == STRING_CST);\n-      section_ = section;\n-      if (!section)\n-\timplicit_section = false;\n+      return x_section->name;\n     }\n \n   /* Vectors of referring and referenced entities.  */\n@@ -204,13 +200,14 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   PTR GTY ((skip)) aux;\n \n   /* Comdat group the symbol is in.  Can be private if GGC allowed that.  */\n-  tree comdat_group_;\n+  tree x_comdat_group;\n \n   /* Section name. Again can be private, if allowed.  */\n-  tree section_;\n+  section_hash_entry *x_section;\n \n   /* Set section for symbol and its aliases.  */\n-  void set_section (tree section);\n+  void set_section (const char *section);\n+  void set_section_for_node (const char *section);\n };\n \n enum availability"}, {"sha": "b06a5aafa6dca62d55de3df76106415d5c9b2ed6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -682,7 +682,7 @@ alpha_in_small_data_p (const_tree exp)\n \n   if (TREE_CODE (exp) == VAR_DECL && DECL_SECTION_NAME (exp))\n     {\n-      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (exp));\n+      const char *section = DECL_SECTION_NAME (exp);\n       if (strcmp (section, \".sdata\") == 0\n \t  || strcmp (section, \".sbss\") == 0)\n \treturn true;"}, {"sha": "6e558cb76bcd6eb17900ac7d6123221c7e19e415", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -6277,7 +6277,7 @@ arc_in_small_data_p (const_tree decl)\n       const char *name;\n \n       /* Reject anything that isn't in a known small-data section.  */\n-      name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      name = DECL_SECTION_NAME (decl);\n       if (strcmp (name, \".sdata\") != 0 && strcmp (name, \".sbss\") != 0)\n \treturn false;\n "}, {"sha": "56aa166272f9c568cdcfd699ada54f8a90efdccd", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -50,7 +50,7 @@\n /* Return a nonzero value if DECL has a section attribute.  */\n #define IN_NAMED_SECTION_P(DECL)\t\t\t\t\t\\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL)\t\\\n-   && DECL_SECTION_NAME (DECL) != NULL_TREE)\n+   && DECL_SECTION_NAME (DECL) != NULL)\n \n #undef  ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)   \t\\"}, {"sha": "35bbace4c079ab4583d382b192c1266aade5c759", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -4760,16 +4760,16 @@ bfin_handle_l1_text_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n   /* The decl may have already been given a section attribute\n      from a previous declaration. Ensure they match.  */\n-  else if (DECL_SECTION_NAME (decl) != NULL_TREE\n-\t   && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+  else if (DECL_SECTION_NAME (decl) != NULL\n+\t   && strcmp (DECL_SECTION_NAME (decl),\n \t\t      \".l1.text\") != 0)\n     {\n       error (\"section of %q+D conflicts with previous declaration\",\n \t     decl);\n       *no_add_attrs = true;\n     }\n   else\n-    set_decl_section_name (decl, build_string (9, \".l1.text\"));\n+    set_decl_section_name (decl, \".l1.text\");\n \n   return NULL_TREE;\n }\n@@ -4811,17 +4811,16 @@ bfin_handle_l1_data_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n       /* The decl may have already been given a section attribute\n \t from a previous declaration. Ensure they match.  */\n-      if (DECL_SECTION_NAME (decl) != NULL_TREE\n-\t  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+      if (DECL_SECTION_NAME (decl) != NULL\n+\t  && strcmp (DECL_SECTION_NAME (decl),\n \t\t     section_name) != 0)\n \t{\n \t  error (\"section of %q+D conflicts with previous declaration\",\n \t\t decl);\n \t  *no_add_attrs = true;\n \t}\n       else\n-\tDECL_SECTION_NAME (decl)\n-\t  = build_string (strlen (section_name) + 1, section_name);\n+\tset_decl_section_name (decl, section_name);\n     }\n \n  return NULL_TREE;\n@@ -4838,29 +4837,29 @@ bfin_handle_l2_attribute (tree *node, tree ARG_UNUSED (name),\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      if (DECL_SECTION_NAME (decl) != NULL_TREE\n-\t  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+      if (DECL_SECTION_NAME (decl) != NULL\n+\t  && strcmp (DECL_SECTION_NAME (decl),\n \t\t     \".l2.text\") != 0)\n \t{\n \t  error (\"section of %q+D conflicts with previous declaration\",\n \t\t decl);\n \t  *no_add_attrs = true;\n \t}\n       else\n-\tset_decl_section_name (decl, build_string (9, \".l2.text\"));\n+\tset_decl_section_name (decl, \".l2.text\");\n     }\n   else if (TREE_CODE (decl) == VAR_DECL)\n     {\n-      if (DECL_SECTION_NAME (decl) != NULL_TREE\n-\t  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+      if (DECL_SECTION_NAME (decl) != NULL\n+\t  && strcmp (DECL_SECTION_NAME (decl),\n \t\t     \".l2.data\") != 0)\n \t{\n \t  error (\"section of %q+D conflicts with previous declaration\",\n \t\t decl);\n \t  *no_add_attrs = true;\n \t}\n       else\n-\tset_decl_section_name (decl, build_string (9, \".l2.data\"));\n+\tset_decl_section_name (decl, \".l2.data\");\n     }\n \n   return NULL_TREE;"}, {"sha": "7fa60b96e1d0a260e9c421908bce1a03236eec79", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -868,7 +868,7 @@ c6x_in_small_data_p (const_tree exp)\n \n   if (TREE_CODE (exp) == VAR_DECL && DECL_SECTION_NAME (exp))\n     {\n-      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (exp));\n+      const char *section = DECL_SECTION_NAME (exp);\n \n       if (strcmp (section, \".neardata\") == 0\n \t  || strncmp (section, \".neardata.\", 10) == 0\n@@ -1060,7 +1060,7 @@ c6x_elf_unique_section (tree decl, int reloc)\n \n       string = ACONCAT ((linkonce, prefix, \".\", name, NULL));\n \n-      set_decl_section_name (decl, build_string (strlen (string), string));\n+      set_decl_section_name (decl, string);\n       return;\n     }\n   default_unique_section (decl, reloc);"}, {"sha": "d13983ce811d5cf38f69bcdc9ab7d0297a044711", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -3604,7 +3604,7 @@ darwin_function_section (tree decl, enum node_frequency freq,\n \n   /* If there is a specified section name, we should not be trying to\n      override.  */\n-  if (decl && DECL_SECTION_NAME (decl) != NULL_TREE)\n+  if (decl && DECL_SECTION_NAME (decl) != NULL)\n     return get_named_section (decl, NULL, 0);\n \n   /* We always put unlikely executed stuff in the cold section.  */"}, {"sha": "98a5336a9951596417335f83e4bd5f1a5a900f1d", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -263,7 +263,7 @@ static frv_stack_t *frv_stack_cache = (frv_stack_t *)0;\n static void frv_option_override\t\t\t(void);\n static bool frv_legitimate_address_p\t\t(enum machine_mode, rtx, bool);\n static int frv_default_flags_for_cpu\t\t(void);\n-static int frv_string_begins_with\t\t(const_tree, const char *);\n+static int frv_string_begins_with\t\t(const char *, const char *);\n static FRV_INLINE bool frv_small_data_reloc_p\t(rtx, int);\n static void frv_print_operand\t\t\t(FILE *, rtx, int);\n static void frv_print_operand_address\t\t(FILE *, rtx);\n@@ -773,13 +773,12 @@ frv_option_override (void)\n /* Return true if NAME (a STRING_CST node) begins with PREFIX.  */\n \n static int\n-frv_string_begins_with (const_tree name, const char *prefix)\n+frv_string_begins_with (const char *name, const char *prefix)\n {\n   const int prefix_len = strlen (prefix);\n \n   /* Remember: NAME's length includes the null terminator.  */\n-  return (TREE_STRING_LENGTH (name) > prefix_len\n-\t  && strncmp (TREE_STRING_POINTER (name), prefix, prefix_len) == 0);\n+  return (strncmp (name, prefix, prefix_len) == 0);\n }\n \f\n /* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */\n@@ -9475,7 +9474,7 @@ static bool\n frv_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n-  const_tree section_name;\n+  const char *section_name;\n \n   /* Don't apply the -G flag to internal compiler structures.  We\n      should leave such structures in the main data section, partly"}, {"sha": "998afd510be03c5aef663a11ea2aa6b83454ec2f", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -5461,7 +5461,7 @@ h8300_handle_eightbit_data_attribute (tree *node, tree name,\n \n   if (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n     {\n-      set_decl_section_name (decl, build_string (7, \".eight\"));\n+      set_decl_section_name (decl, \".eight\");\n     }\n   else\n     {\n@@ -5485,7 +5485,7 @@ h8300_handle_tiny_data_attribute (tree *node, tree name,\n \n   if (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n     {\n-      set_decl_section_name (decl, build_string (6, \".tiny\"));\n+      set_decl_section_name (decl, \".tiny\");\n     }\n   else\n     {"}, {"sha": "41f1b7f84bc7969c684ed0a482c4c209bd34ea7b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -5028,7 +5028,7 @@ ix86_in_large_data_p (tree exp)\n \n   if (TREE_CODE (exp) == VAR_DECL && DECL_SECTION_NAME (exp))\n     {\n-      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (exp));\n+      const char *section = DECL_SECTION_NAME (exp);\n       if (strcmp (section, \".ldata\") == 0\n \t  || strcmp (section, \".lbss\") == 0)\n \treturn true;\n@@ -5193,7 +5193,7 @@ x86_64_elf_unique_section (tree decl, int reloc)\n \n \t  string = ACONCAT ((linkonce, prefix, \".\", name, NULL));\n \n-\t  set_decl_section_name (decl, build_string (strlen (string), string));\n+\t  set_decl_section_name (decl, string);\n \t  return;\n \t}\n     }"}, {"sha": "10c0b003f8d532a5c82dc4a944b5f3fc908b4a20", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -438,7 +438,7 @@ i386_pe_unique_section (tree decl, int reloc)\n   string = XALLOCAVEC (char, len + 1);\n   sprintf (string, \"%s%s\", prefix, name);\n \n-  set_decl_section_name (decl, build_string (len, string));\n+  set_decl_section_name (decl, string);\n }\n \n /* Local and global relocs can be placed always into readonly memory for"}, {"sha": "de486c6dfac33d54c08ccc56f0fc7b721dcce5c8", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -9893,7 +9893,7 @@ ia64_in_small_data_p (const_tree exp)\n \n   if (TREE_CODE (exp) == VAR_DECL && DECL_SECTION_NAME (exp))\n     {\n-      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (exp));\n+      const char *section = DECL_SECTION_NAME (exp);\n \n       if (strcmp (section, \".sdata\") == 0\n \t  || strncmp (section, \".sdata.\", 7) == 0"}, {"sha": "bfba048997484e4e71986b75e91c0acc1f5d191b", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -791,7 +791,7 @@ lm32_in_small_data_p (const_tree exp)\n \n   if (TREE_CODE (exp) == VAR_DECL && DECL_SECTION_NAME (exp))\n     {\n-      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (exp));\n+      const char *section = DECL_SECTION_NAME (exp);\n       if (strcmp (section, \".sdata\") == 0 || strcmp (section, \".sbss\") == 0)\n \treturn true;\n     }"}, {"sha": "35c136edb994a59f963c48b9a79afc43deb38fac", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -463,7 +463,7 @@ m32r_encode_section_info (tree decl, rtx rtl, int first)\n static bool\n m32r_in_small_data_p (const_tree decl)\n {\n-  const_tree section;\n+  const char *section;\n \n   if (TREE_CODE (decl) != VAR_DECL)\n     return false;\n@@ -474,8 +474,7 @@ m32r_in_small_data_p (const_tree decl)\n   section = DECL_SECTION_NAME (decl);\n   if (section)\n     {\n-      const char *const name = TREE_STRING_POINTER (section);\n-      if (strcmp (name, \".sdata\") == 0 || strcmp (name, \".sbss\") == 0)\n+      if (strcmp (section, \".sdata\") == 0 || strcmp (section, \".sbss\") == 0)\n \treturn true;\n     }\n   else"}, {"sha": "5ff8daf015e111295620f490444229c92152714a", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -3089,7 +3089,7 @@ mcore_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n   \n   sprintf (string, \"%s%s\", prefix, name);\n \n-  set_decl_section_name (decl, build_string (len, string));\n+  set_decl_section_name (decl, string);\n }\n \n int"}, {"sha": "853821c877141e98697daa95c1035b4cb7f5d20d", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -4658,7 +4658,7 @@ mep_unique_section (tree decl, int reloc)\n \n   sprintf (string, \"%s%s\", prefix, name);\n \n-  set_decl_section_name (decl, build_string (len, string));\n+  set_decl_section_name (decl, string);\n }\n \n /* Given a decl, a section name, and whether the decl initializer"}, {"sha": "0c2aec84ac2d49055ad530fecc8911a9b35095a1", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -3067,7 +3067,7 @@ microblaze_elf_in_small_data_p (const_tree decl)\n \n   if (TREE_CODE (decl) == VAR_DECL && DECL_SECTION_NAME (decl))\n     {\n-      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      const char *section = DECL_SECTION_NAME (decl);\n       if (strcmp (section, \".sdata\") == 0\n \t  || strcmp (section, \".sdata2\") == 0\n \t  || strcmp (section, \".sbss\") == 0"}, {"sha": "585b7555765783a10e04739c197e58da9fd7adf6", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -6618,7 +6618,7 @@ mips16_build_function_stub (void)\n   stubdecl = build_decl (BUILTINS_LOCATION,\n \t\t\t FUNCTION_DECL, get_identifier (stubname),\n \t\t\t build_function_type_list (void_type_node, NULL_TREE));\n-  set_decl_section_name (stubdecl, build_string (strlen (secname), secname));\n+  set_decl_section_name (stubdecl, secname);\n   DECL_RESULT (stubdecl) = build_decl (BUILTINS_LOCATION,\n \t\t\t\t       RESULT_DECL, NULL_TREE, void_type_node);\n \n@@ -6872,7 +6872,7 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n \t\t\t     FUNCTION_DECL, stubid,\n \t\t\t     build_function_type_list (void_type_node,\n \t\t\t\t\t\t       NULL_TREE));\n-      set_decl_section_name (stubdecl, build_string (strlen (secname), secname));\n+      set_decl_section_name (stubdecl, secname);\n       DECL_RESULT (stubdecl) = build_decl (BUILTINS_LOCATION,\n \t\t\t\t\t   RESULT_DECL, NULL_TREE,\n \t\t\t\t\t   void_type_node);\n@@ -8490,7 +8490,7 @@ mips_function_rodata_section (tree decl)\n \n   if (decl && DECL_SECTION_NAME (decl))\n     {\n-      const char *name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      const char *name = DECL_SECTION_NAME (decl);\n       if (DECL_COMDAT_GROUP (decl) && strncmp (name, \".gnu.linkonce.t.\", 16) == 0)\n \t{\n \t  char *rname = ASTRDUP (name);\n@@ -8530,7 +8530,7 @@ mips_in_small_data_p (const_tree decl)\n       const char *name;\n \n       /* Reject anything that isn't in a known small-data section.  */\n-      name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      name = DECL_SECTION_NAME (decl);\n       if (strcmp (name, \".sdata\") != 0 && strcmp (name, \".sbss\") != 0)\n \treturn false;\n "}, {"sha": "354e3d9a6e66e0f4841ec3ce1c50d24ce2becb11", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1628,7 +1628,7 @@ nios2_in_small_data_p (const_tree exp)\n     {\n       if (DECL_SECTION_NAME (exp))\n \t{\n-\t  const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (exp));\n+\t  const char *section = DECL_SECTION_NAME (exp);\n \t  if (nios2_section_threshold > 0\n \t      && nios2_small_section_name_p (section))\n \t    return true;"}, {"sha": "e13674143fe7957f42790e4416a2951ca7b4b537", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -10262,10 +10262,10 @@ pa_function_section (tree decl, enum node_frequency freq,\n   /* Force nested functions into the same section as the containing\n      function.  */\n   if (decl\n-      && DECL_SECTION_NAME (decl) == NULL_TREE\n+      && DECL_SECTION_NAME (decl) == NULL\n       && DECL_CONTEXT (decl) != NULL_TREE\n       && TREE_CODE (DECL_CONTEXT (decl)) == FUNCTION_DECL\n-      && DECL_SECTION_NAME (DECL_CONTEXT (decl)) == NULL_TREE)\n+      && DECL_SECTION_NAME (DECL_CONTEXT (decl)) == NULL)\n     return function_section (DECL_CONTEXT (decl));\n \n   /* Otherwise, use the default function section.  */"}, {"sha": "3f9f06bb6f280031040b6840d1b7e647e51f4706", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -955,7 +955,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Return a nonzero value if DECL has a section attribute.  */\n #define IN_NAMED_SECTION_P(DECL) \\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n-   && DECL_SECTION_NAME (DECL) != NULL_TREE)\n+   && DECL_SECTION_NAME (DECL) != NULL)\n \n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or"}, {"sha": "98abcf211b4015b83bfd7b3f953032820411c142", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -28508,7 +28508,7 @@ rs6000_elf_in_small_data_p (const_tree decl)\n \n   if (TREE_CODE (decl) == VAR_DECL && DECL_SECTION_NAME (decl))\n     {\n-      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      const char *section = DECL_SECTION_NAME (decl);\n       if (compare_section_name (section, \".sdata\")\n \t  || compare_section_name (section, \".sdata2\")\n \t  || compare_section_name (section, \".gnu.linkonce.s\")\n@@ -29277,7 +29277,7 @@ rs6000_xcoff_asm_named_section (const char *name, unsigned int flags,\n \n #define IN_NAMED_SECTION(DECL) \\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n-   && DECL_SECTION_NAME (DECL) != NULL_TREE)\n+   && DECL_SECTION_NAME (DECL) != NULL)\n \n static section *\n rs6000_xcoff_select_section (tree decl, int reloc,\n@@ -29342,7 +29342,7 @@ rs6000_xcoff_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   name = (*targetm.strip_name_encoding) (name);\n-  set_decl_section_name (decl, build_string (strlen (name), name));\n+  set_decl_section_name (decl, name);\n }\n \n /* Select section for constant in constant pool."}, {"sha": "3fc2847ac60cbf2e416df1b92a0ba7f1d7f3a3b5", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -2219,7 +2219,7 @@ static bool\n rx_in_small_data (const_tree decl)\n {\n   int size;\n-  const_tree section;\n+  const char * section;\n \n   if (rx_small_data_limit == 0)\n     return false;\n@@ -2238,11 +2238,7 @@ rx_in_small_data (const_tree decl)\n \n   section = DECL_SECTION_NAME (decl);\n   if (section)\n-    {\n-      const char * const name = TREE_STRING_POINTER (section);\n-\n-      return (strcmp (name, \"D_2\") == 0) || (strcmp (name, \"B_2\") == 0);\n-    }\n+    return (strcmp (section, \"D_2\") == 0) || (strcmp (section, \"B_2\") == 0);\n \n   size = int_size_in_bytes (TREE_TYPE (decl));\n "}, {"sha": "d65684c45e49a64f0dbeb88c3d33da2f286dca2b", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -668,7 +668,7 @@ score_in_small_data_p (const_tree decl)\n   if (TREE_CODE (decl) == VAR_DECL && DECL_SECTION_NAME (decl) != 0)\n     {\n       const char *name;\n-      name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      name = DECL_SECTION_NAME (decl);\n       if (strcmp (name, \".sdata\") != 0\n           && strcmp (name, \".sbss\") != 0)\n         return true;"}, {"sha": "f736c44bae8cf51ea310ed5abdb413018f78d4d8", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -2190,7 +2190,7 @@ v850_encode_data_area (tree decl, rtx symbol)\n     {\n       if (DECL_SECTION_NAME (decl))\n \t{\n-\t  const char *name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+\t  const char *name = DECL_SECTION_NAME (decl);\n \t  \n \t  if (streq (name, \".zdata\") || streq (name, \".zbss\"))\n \t    v850_set_data_area (decl, DATA_AREA_ZDA);"}, {"sha": "df9f3b9b10a2b0a4fd517e1992835935e547456f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1,3 +1,9 @@\n+2014-06-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* vtable-class-hierarchy.c: Update handling for section names\n+\tthat are no longer trees.\n+\t* decl.c (duplicate_decls): Likewise.\n+\n 2014-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/19200"}, {"sha": "fba0cc958ee97e07e8c57db15557085d5ed98b4f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -2020,8 +2020,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t done later in decl_attributes since we are called before attributes\n \t are assigned.  */\n       if ((DECL_EXTERNAL (olddecl) || TREE_PUBLIC (olddecl) || TREE_STATIC (olddecl))\n-\t  && DECL_SECTION_NAME (newdecl) == NULL_TREE\n-\t  && DECL_SECTION_NAME (olddecl) != NULL_TREE)\n+\t  && DECL_SECTION_NAME (newdecl) == NULL\n+\t  && DECL_SECTION_NAME (olddecl) != NULL)\n \tset_decl_section_name (newdecl, DECL_SECTION_NAME (olddecl));\n \n       if (TREE_CODE (newdecl) == FUNCTION_DECL)"}, {"sha": "b481273ae8506643ea88a22c2b31e83e17c841bd", "filename": "gcc/cp/vtable-class-hierarchy.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcp%2Fvtable-class-hierarchy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fcp%2Fvtable-class-hierarchy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvtable-class-hierarchy.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1247,8 +1247,7 @@ vtable_find_or_create_map_decl (tree base_type)\n       /* Put these mmap variables in thr .vtable_map_vars section, so\n          we can find and protect them.  */\n \n-      set_decl_section_name (var_decl, build_string (strlen (\".vtable_map_vars\"),\n-                                                     \".vtable_map_vars\"));\n+      set_decl_section_name (var_decl, \".vtable_map_vars\");\n       symtab_get_node (var_decl)->implicit_section = true;\n       DECL_INITIAL (var_decl) = initial_value;\n "}, {"sha": "7b17d4c9203b1496437a594cfce56f683642db4b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -13614,15 +13614,9 @@ secname_for_decl (const_tree decl)\n   if (VAR_OR_FUNCTION_DECL_P (decl)\n       && (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl) || TREE_STATIC (decl))\n       && DECL_SECTION_NAME (decl))\n-    {\n-      tree sectree = DECL_SECTION_NAME (decl);\n-      secname = TREE_STRING_POINTER (sectree);\n-    }\n+    secname = DECL_SECTION_NAME (decl);\n   else if (current_function_decl && DECL_SECTION_NAME (current_function_decl))\n-    {\n-      tree sectree = DECL_SECTION_NAME (current_function_decl);\n-      secname = TREE_STRING_POINTER (sectree);\n-    }\n+    secname = DECL_SECTION_NAME (current_function_decl);\n   else if (cfun && in_cold_section_p)\n     secname = crtl->subsections.cold_section_label;\n   else"}, {"sha": "09e7978d942873e73f6a4db35c80b215962beaab", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1,3 +1,9 @@\n+2014-06-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* java/class.c (build_utf8_ref): Update handling for section names\n+\tthat are no longer trees.\n+\t(emit_register_classes_in_jcr_section): Update.\n+\n 2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* class.c (build_utf8_ref): Use set_decl_section_name."}, {"sha": "dae321890f8fc516b9834b6b459accb8c3be6ee4", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -991,7 +991,7 @@ build_utf8_ref (tree name)\n \t\t       | SECTION_MERGE | (SECTION_ENTSIZE & decl_size));\n \t  sprintf (buf, \".rodata.jutf8.%d\", decl_size);\n \t  switch_to_section (get_section (buf, flags, NULL));\n-\t  set_decl_section_name (decl, build_string (strlen (buf), buf));\n+\t  set_decl_section_name (decl, buf);\n \t}\n     }\n \n@@ -2815,8 +2815,7 @@ emit_register_classes_in_jcr_section (void)\n   DECL_ARTIFICIAL (cdecl) = 1;\n   DECL_IGNORED_P (cdecl) = 1;\n   DECL_PRESERVE_P (cdecl) = 1;\n-  set_decl_section_name (cdecl, build_string (strlen (JCR_SECTION_NAME),\n-\t\t\t\t\t      JCR_SECTION_NAME));\n+  set_decl_section_name (cdecl, JCR_SECTION_NAME);\n   pushdecl_top_level (cdecl);\n   relayout_decl (cdecl);\n   rest_of_decl_compilation (cdecl, 1, 0);"}, {"sha": "803b66a2c4ce09c5ad8700a091ba07ad038a3ca8", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -504,7 +504,6 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   section = node->get_section ();\n   if (!section)\n     section = \"\";\n-  lto_output_data_stream (ob->main_stream, section, strlen (section) + 1);\n \n   streamer_write_hwi_stream (ob->main_stream, node->tp_first_run);\n \n@@ -546,6 +545,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_enum (&bp, ld_plugin_symbol_resolution,\n \t        LDPR_NUM_KNOWN, node->resolution);\n   streamer_write_bitpack (&bp);\n+  lto_output_data_stream (ob->main_stream, section, strlen (section) + 1);\n \n   if (node->thunk.thunk_p && !boundary_p)\n     {\n@@ -1006,13 +1006,13 @@ read_identifier (struct lto_input_block *ib)\n   return id;\n }\n \n-/* Return identifier encoded in IB as a plain string.  */\n+/* Return string encoded in IB, NULL if string is empty.  */\n \n-static tree\n-read_string_cst (struct lto_input_block *ib)\n+static const char *\n+read_string (struct lto_input_block *ib)\n {\n   unsigned int len = strnlen (ib->data + ib->p, ib->len - ib->p - 1);\n-  tree id;\n+  const char *str;\n \n   if (ib->data[ib->p + len])\n     lto_section_overrun (ib);\n@@ -1021,9 +1021,9 @@ read_string_cst (struct lto_input_block *ib)\n       ib->p++;\n       return NULL;\n     }\n-  id = build_string (len, ib->data + ib->p);\n+  str = ib->data + ib->p;\n   ib->p += len + 1;\n-  return id;\n+  return str;\n }\n \n /* Overwrite the information in NODE based on FILE_DATA, TAG, FLAGS,\n@@ -1116,7 +1116,7 @@ input_node (struct lto_file_decl_data *file_data,\n   int order;\n   int i, count;\n   tree group;\n-  tree section;\n+  const char *section;\n \n   order = streamer_read_hwi (ib) + order_base;\n   clone_ref = streamer_read_hwi (ib);\n@@ -1165,7 +1165,6 @@ input_node (struct lto_file_decl_data *file_data,\n   group = read_identifier (ib);\n   if (group)\n     ref2 = streamer_read_hwi (ib);\n-  section = read_string_cst (ib);\n \n   /* Make sure that we have not read this node before.  Nodes that\n      have already been read will have their tag stored in the 'aux'\n@@ -1192,6 +1191,7 @@ input_node (struct lto_file_decl_data *file_data,\n     }\n   else\n     node->same_comdat_group = (symtab_node *) (intptr_t) LCC_NOT_FOUND;\n+  section = read_string (ib);\n   if (section)\n     node->set_section_for_node (section);\n \n@@ -1226,7 +1226,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   int ref = LCC_NOT_FOUND;\n   int order;\n   tree group;\n-  tree section;\n+  const char *section;\n \n   order = streamer_read_hwi (ib) + order_base;\n   decl_index = streamer_read_uhwi (ib);\n@@ -1275,7 +1275,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n     }\n   else\n     node->same_comdat_group = (symtab_node *) (intptr_t) LCC_NOT_FOUND;\n-  section = read_string_cst (ib);\n+  section = read_string (ib);\n   if (section)\n     node->set_section_for_node (section);\n   node->resolution = streamer_read_enum (ib, ld_plugin_symbol_resolution,"}, {"sha": "144caa96a7dfa385890ebdf2015087a6e8de02d7", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -1017,7 +1017,7 @@ static void\n sdbout_one_type (tree type)\n {\n   if (current_function_decl != NULL_TREE\n-      && DECL_SECTION_NAME (current_function_decl) != NULL_TREE)\n+      && DECL_SECTION_NAME (current_function_decl) != NULL)\n     ; /* Don't change section amid function.  */\n   else\n     switch_to_section (current_function_section ());"}, {"sha": "8158acc5bda8acb9d04e7acf52bd0ee771ad7279", "filename": "gcc/symtab.c", "status": "modified", "additions": 82, "deletions": 4, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -57,6 +57,10 @@ const char * const ld_plugin_symbol_resolution_names[]=\n   \"prevailing_def_ironly_exp\"\n };\n \n+\n+/* Hash table used to hold sectoons.  */\n+static GTY((param_is (section_hash_entry))) htab_t section_hash;\n+\n /* Hash table used to convert assembler names into nodes.  */\n static GTY((param_is (symtab_node))) htab_t assembler_name_hash;\n \n@@ -307,6 +311,9 @@ symtab_unregister_node (symtab_node *node)\n   ipa_remove_all_references (&node->ref_list);\n   ipa_remove_all_referring (&node->ref_list);\n \n+  /* Remove reference to section.  */\n+  node->set_section_for_node (NULL);\n+\n   symtab_remove_from_same_comdat_group (node);\n \n   if (node->previous)\n@@ -1081,22 +1088,92 @@ fixup_same_cpp_alias_visibility (symtab_node *node, symtab_node *target)\n   node->externally_visible = target->externally_visible;\n }\n \n+/* Hash sections by their names.  */\n+\n+static hashval_t\n+hash_section_hash_entry (const void *p)\n+{\n+  const section_hash_entry *n = (const section_hash_entry *) p;\n+  return htab_hash_string (n->name);\n+}\n+\n+/* Return true if section P1 name equals to P2.  */\n+\n+static int\n+eq_sections (const void *p1, const void *p2)\n+{\n+  const section_hash_entry *n1 = (const section_hash_entry *) p1;\n+  const char *name = (const char *)p2;\n+  return n1->name == name || !strcmp (n1->name, name);\n+}\n+\n+/* Set section, do not recurse into aliases.\n+   When one wants to change section of symbol and its aliases,\n+   use set_section  */\n+\n+void\n+symtab_node::set_section_for_node (const char *section)\n+{\n+  const char *current = get_section ();\n+  void **slot;\n+\n+  if (current == section\n+      || (current && section\n+\t  && !strcmp (current, section)))\n+    return;\n+\n+  if (current)\n+    {\n+      x_section->ref_count--;\n+      if (!x_section->ref_count)\n+\t{\n+\t  slot = htab_find_slot_with_hash (section_hash, x_section->name,\n+\t\t\t\t\t   htab_hash_string (x_section->name),\n+\t\t\t\t\t   INSERT);\n+\t  ggc_free (x_section);\n+\t  htab_clear_slot (section_hash, slot);\n+\t}\n+      x_section = NULL;\n+    }\n+  if (!section)\n+    {\n+      implicit_section = false;\n+      return;\n+    }\n+  if (!section_hash)\n+    section_hash = htab_create_ggc (10, hash_section_hash_entry,\n+\t\t\t\t    eq_sections, NULL);\n+  slot = htab_find_slot_with_hash (section_hash, section,\n+\t\t\t\t   htab_hash_string (section),\n+\t\t\t\t   INSERT);\n+  if (*slot)\n+    x_section = (section_hash_entry *)*slot;\n+  else\n+    {\n+      int len = strlen (section);\n+      *slot = x_section = ggc_cleared_alloc<section_hash_entry> ();\n+      x_section->name = ggc_vec_alloc<char> (len + 1);\n+      memcpy (x_section->name, section, len + 1);\n+    }\n+  x_section->ref_count++;\n+}\n+\n /* Worker for set_section.  */\n \n static bool\n set_section_1 (struct symtab_node *n, void *s)\n {\n-  n->set_section_for_node ((tree)s);\n+  n->set_section_for_node ((char *)s);\n   return false;\n }\n \n /* Set section of symbol and its aliases.  */\n \n void\n-symtab_node::set_section (tree section)\n+symtab_node::set_section (const char *section)\n {\n   gcc_assert (!this->alias);\n-  symtab_for_node_and_aliases (this, set_section_1, section, true);\n+  symtab_for_node_and_aliases (this, set_section_1, const_cast<char *>(section), true);\n }\n \n /* Worker for symtab_resolve_alias.  */\n@@ -1156,7 +1233,8 @@ symtab_resolve_alias (symtab_node *node, symtab_node *target)\n       error (\"section of alias %q+D must match section of its target\",\n \t     node->decl);\n     }\n-  symtab_for_node_and_aliases (node, set_section_1, target->get_section_name (), true);\n+  symtab_for_node_and_aliases (node, set_section_1,\n+\t\t\t       const_cast<char *>(target->get_section ()), true);\n   if (target->implicit_section)\n     symtab_for_node_and_aliases (node,\n \t\t\t\t set_implicit_section, NULL, true);"}, {"sha": "5bb96ce0b55741e6cd12573e63e4e6fd73300e29", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -264,10 +264,7 @@ get_emutls_init_templ_addr (tree decl)\n \n   if (targetm.emutls.tmpl_section)\n     {\n-      set_decl_section_name\n-\t(to,\n-         build_string (strlen (targetm.emutls.tmpl_section),\n-\t\t       targetm.emutls.tmpl_section));\n+      set_decl_section_name (to, targetm.emutls.tmpl_section);\n     }\n   else\n     set_decl_section_name (to, DECL_SECTION_NAME (decl));\n@@ -325,10 +322,7 @@ new_emutls_decl (tree decl, tree alias_of)\n   /* If the target wants the control variables grouped, do so.  */\n   if (!DECL_COMMON (to) && targetm.emutls.var_section)\n     {\n-      set_decl_section_name \n-        (to,\n-         build_string (strlen (targetm.emutls.var_section),\n-\t\t       targetm.emutls.var_section));\n+      set_decl_section_name (to, targetm.emutls.var_section);\n     }\n \n   /* If this variable is defined locally, then we need to initialize the"}, {"sha": "3c5a3b3bc6f383aef6159c328b395e7f931ba09c", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -5339,7 +5339,7 @@ vect_can_force_dr_alignment_p (const_tree decl, unsigned int alignment)\n      section name is also used.  This is a common idiom used by many\n      software projects.  */\n   if (TREE_STATIC (decl) \n-      && DECL_SECTION_NAME (decl) != NULL_TREE\n+      && DECL_SECTION_NAME (decl) != NULL\n       && !symtab_get_node (decl)->implicit_section)\n     return false;\n "}, {"sha": "62477c3b1b367b1fe3acc2297ae9af0c8a775795", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -628,19 +628,19 @@ decl_comdat_group_id (const_tree node)\n \n /* When the target supports named section, return its name as IDENTIFIER_NODE\n    or NULL if it is in no section.  */\n-tree\n+const char *\n decl_section_name (const_tree node)\n {\n   struct symtab_node *snode = symtab_get_node (node);\n   if (!snode)\n     return NULL;\n-  return snode->get_section_name ();\n+  return snode->get_section ();\n }\n \n /* Set section section name of NODE to VALUE (that is expected to\n    be identifier node)  */\n void\n-set_decl_section_name (tree node, tree value)\n+set_decl_section_name (tree node, const char *value)\n {\n   struct symtab_node *snode;\n "}, {"sha": "31a9a87d2d1771b96d8d7888b1b5438cb610bfc2", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -3427,8 +3427,8 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n extern tree decl_assembler_name (tree);\n extern tree decl_comdat_group (const_tree);\n extern tree decl_comdat_group_id (const_tree);\n-extern tree decl_section_name (const_tree);\n-extern void set_decl_section_name (tree, tree);\n+extern const char *decl_section_name (const_tree);\n+extern void set_decl_section_name (tree, const char *);\n \n /* Compute the number of bytes occupied by 'node'.  This routine only\n    looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */"}, {"sha": "7be56f1e1eef50dbd15a6702a808ed8b6acb9004", "filename": "gcc/varasm.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f961457f887a965ecca2f35b81e33c077759c347/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f961457f887a965ecca2f35b81e33c077759c347", "patch": "@@ -173,7 +173,7 @@ static GTY(()) section *unnamed_sections;\n /* Return a nonzero value if DECL has a section attribute.  */\n #define IN_NAMED_SECTION(DECL) \\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n-   && DECL_SECTION_NAME (DECL) != NULL_TREE)\n+   && DECL_SECTION_NAME (DECL) != NULL)\n \n /* Hash table of named sections.  */\n static GTY((param_is (section))) htab_t section_htab;\n@@ -411,7 +411,7 @@ get_named_section (tree decl, const char *name, int reloc)\n   if (name == NULL)\n     {\n       gcc_assert (decl && DECL_P (decl) && DECL_SECTION_NAME (decl));\n-      name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      name = DECL_SECTION_NAME (decl);\n     }\n \n   flags = targetm.section_type_flags (decl, name, reloc);\n@@ -433,7 +433,7 @@ void\n resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \t\t\tint flag_function_or_data_sections)\n {\n-  if (DECL_SECTION_NAME (decl) == NULL_TREE\n+  if (DECL_SECTION_NAME (decl) == NULL\n       && targetm_common.have_named_sections\n       && (flag_function_or_data_sections\n \t  || DECL_COMDAT_GROUP (decl)))\n@@ -483,7 +483,7 @@ static section *\n hot_function_section (tree decl)\n {\n   if (decl != NULL_TREE\n-      && DECL_SECTION_NAME (decl) != NULL_TREE\n+      && DECL_SECTION_NAME (decl) != NULL\n       && targetm_common.have_named_sections)\n     return get_named_section (decl, NULL, 0);\n   else\n@@ -508,13 +508,13 @@ get_named_text_section (tree decl,\n     {\n       if (named_section_suffix)\n \t{\n-\t  tree dsn = DECL_SECTION_NAME (decl);\n+\t  const char *dsn = DECL_SECTION_NAME (decl);\n \t  const char *stripped_name;\n \t  char *name, *buffer;\n \n-\t  name = (char *) alloca (TREE_STRING_LENGTH (dsn) + 1);\n-\t  memcpy (name, TREE_STRING_POINTER (dsn),\n-\t\t  TREE_STRING_LENGTH (dsn) + 1);\n+\t  name = (char *) alloca (strlen (dsn) + 1);\n+\t  memcpy (name, dsn,\n+\t\t  strlen (dsn) + 1);\n \n \t  stripped_name = targetm.strip_name_encoding (name);\n \n@@ -620,7 +620,7 @@ function_section_1 (tree decl, bool force_cold)\n \n #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n   if (decl != NULL_TREE\n-      && DECL_SECTION_NAME (decl) != NULL_TREE)\n+      && DECL_SECTION_NAME (decl) != NULL)\n     {\n       if (targetm.asm_out.function_section)\n \tsection = targetm.asm_out.function_section (decl, freq,\n@@ -694,7 +694,7 @@ default_function_rodata_section (tree decl)\n {\n   if (decl != NULL_TREE && DECL_SECTION_NAME (decl))\n     {\n-      const char *name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      const char *name = DECL_SECTION_NAME (decl);\n \n       if (DECL_COMDAT_GROUP (decl) && HAVE_COMDAT_GROUP)\n         {\n@@ -1380,7 +1380,7 @@ make_decl_rtl (tree decl)\n      we take care of recomputing the DECL_RTL after visibility is changed.  */\n   if (TREE_CODE (decl) == VAR_DECL\n       && (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n-      && DECL_SECTION_NAME (decl) != NULL_TREE\n+      && DECL_SECTION_NAME (decl) != NULL\n       && DECL_INITIAL (decl) == NULL_TREE\n       && DECL_COMMON (decl))\n     DECL_COMMON (decl) = 0;\n@@ -6471,7 +6471,7 @@ default_unique_section (tree decl, int reloc)\n \n   string = ACONCAT ((linkonce, prefix, \".\", name, NULL));\n \n-  set_decl_section_name (decl, build_string (strlen (string), string));\n+  set_decl_section_name (decl, string);\n }\n \n /* Like compute_reloc_for_constant, except for an RTX.  The return value"}]}