{"sha": "5486a99614790b4b310fedb774f086222490b2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4NmE5OTYxNDc5MGI0YjMxMGZlZGI3NzRmMDg2MjIyNDkwYjJjMA==", "commit": {"author": {"name": "Jun Ma", "email": "JunMa@linux.alibaba.com", "date": "2019-05-16T08:21:17Z"}, "committer": {"name": "Jun Ma", "email": "junma@gcc.gnu.org", "date": "2019-05-16T08:21:17Z"}, "message": "re PR tree-optimization/90106 (builtin sqrt() ignoring libm's sqrt call result)\n\n\tPR tree-optimization/90106\n\t* tree-call-cdce.c (shrink_wrap_one_built_in_call_with_conds): Add\n\tnew parameter as new internal function call, also move it to new\n\tbasic block.\n\t(use_internal_fn): Pass internal function call to\n\tshrink_wrap_one_built_in_call_with_conds.\n\n\tgcc/testsuite\n\t* gcc.dg/cdce1.c: Check tailcall code generation after cdce pass.\n\t* gcc.dg/cdce2.c: Likewise.\n\nFrom-SVN: r271281", "tree": {"sha": "27d0ef9c5c491b3deb501657cb30ce0854125fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d0ef9c5c491b3deb501657cb30ce0854125fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5486a99614790b4b310fedb774f086222490b2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5486a99614790b4b310fedb774f086222490b2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5486a99614790b4b310fedb774f086222490b2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5486a99614790b4b310fedb774f086222490b2c0/comments", "author": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd893bf1e9a5e54a9b0677070a68fc9d96322f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd893bf1e9a5e54a9b0677070a68fc9d96322f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd893bf1e9a5e54a9b0677070a68fc9d96322f94"}], "stats": {"total": 127, "additions": 85, "deletions": 42}, "files": [{"sha": "4a891c90048e04983c3bdddf093e075b6f04a71d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5486a99614790b4b310fedb774f086222490b2c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5486a99614790b4b310fedb774f086222490b2c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5486a99614790b4b310fedb774f086222490b2c0", "patch": "@@ -1,20 +1,11 @@\n-2019-05-16  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n-\n-\t* config/arm/t-rtems: Replace ARMv7-M multilibs with Cortex-M\n-\tmultilibs.\n-\n-2019-05-16  Richard Biener  <rguenther@suse.de>\n-\n-\tPR tree-optimization/90424\n-\t* tree-ssa.c (non_rewritable_lvalue_p): Handle inserts from\n-\taligned subvectors.\n-\t(execute_update_addresses_taken): Likewise.\n-\t* tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n-\n-2019-05-16  Richard Biener  <rguenther@suse.de>\n-\n-\t* gimple-pretty-print.c (dump_ternary_rhs): Dump BIT_INSERT_EXPR\n-\tas __BIT_INSERT with -gimple.\n+2019-05-16  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\tPR tree-optimization/90106\n+\t* tree-call-cdce.c (shrink_wrap_one_built_in_call_with_conds): Add\n+\tnew parameter as new internal function call, also move it to new\n+\tbasic block.\n+\t(use_internal_fn): Pass internal function call to\n+\tshrink_wrap_one_built_in_call_with_conds.\n \n 2019-05-15  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "dc4edeffabce1e981aaff245f3e887d6564f2ef9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5486a99614790b4b310fedb774f086222490b2c0", "patch": "@@ -1,3 +1,9 @@\n+2019-05-16  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\tPR tree-optimization/90106\n+\t* gcc.dg/cdce1.c: Check tailcall code generation after cdce pass.\n+\t* gcc.dg/cdce2.c: Likewise.\n+\n 2019-05-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90424"}, {"sha": "424d80fcdec34ff75439facd4bfa7a9f6f93d5bc", "filename": "gcc/testsuite/gcc.dg/cdce1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c?ref=5486a99614790b4b310fedb774f086222490b2c0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do  run  } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n /* { dg-require-effective-target int32plus } */\n-/* { dg-final { scan-tree-dump  \"cdce1.c:16: .* function call is shrink-wrapped into error conditions\\.\"  \"cdce\" } } */\n+/* { dg-final { scan-tree-dump  \"cdce1.c:17: .* function call is shrink-wrapped into error conditions\\.\"  \"cdce\" } } */\n+/* { dg-final { scan-assembler     \"jmp pow\" } } */\n /* { dg-require-effective-target large_double } */\n \n #include <stdlib.h>"}, {"sha": "2af2893549d17ac63bd5bfcf52a237974174eda6", "filename": "gcc/testsuite/gcc.dg/cdce2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c?ref=5486a99614790b4b310fedb774f086222490b2c0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do  run  } */\n /* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n-/* { dg-final { scan-tree-dump  \"cdce2.c:15: .* function call is shrink-wrapped into error conditions\\.\" \"cdce\" } } */\n+/* { dg-final { scan-tree-dump  \"cdce2.c:16: .* function call is shrink-wrapped into error conditions\\.\" \"cdce\" } } */\n+/* { dg-final { scan-assembler \"jmp log\" } } */\n  \n #include <stdlib.h>\n #include <math.h>"}, {"sha": "9e3372fe56c3d8df26a9a48f7cbdaaf812e0941d", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 67, "deletions": 23, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5486a99614790b4b310fedb774f086222490b2c0/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=5486a99614790b4b310fedb774f086222490b2c0", "patch": "@@ -93,10 +93,10 @@ along with GCC; see the file COPYING3.  If not see\n \n \ty = sqrt (x);\n      ==>\n-\ty = IFN_SQRT (x);\n \tif (__builtin_isless (x, 0))\n-\t    sqrt (x);\n-\n+\t  y =  sqrt (x);\n+\telse\n+\t  y = IFN_SQRT (x);\n      In the vast majority of cases we should then never need to call sqrt.\n \n    Note that library functions are not supposed to clear errno to zero without\n@@ -793,14 +793,16 @@ gen_shrink_wrap_conditions (gcall *bi_call, vec<gimple *> conds,\n }\n \n /* Shrink-wrap BI_CALL so that it is only called when one of the NCONDS\n-   conditions in CONDS is false.  */\n+   conditions in CONDS is false.  Also move BI_NEWCALL to a new basic block\n+   when it is non-null, it is called while all of the CONDS are true.  */\n \n static void\n shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n-\t\t\t\t\t  unsigned int nconds)\n+\t\t\t\t\t  unsigned int nconds,\n+\t\t\t\t\t  gcall *bi_newcall = NULL)\n {\n   gimple_stmt_iterator bi_call_bsi;\n-  basic_block bi_call_bb, join_tgt_bb, guard_bb;\n+  basic_block bi_call_bb, bi_newcall_bb, join_tgt_bb, guard_bb;\n   edge join_tgt_in_edge_from_call, join_tgt_in_edge_fall_thru;\n   edge bi_call_in_edge0, guard_bb_in_edge;\n   unsigned tn_cond_stmts;\n@@ -809,27 +811,26 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n   gimple *cond_expr_start;\n \n   /* The cfg we want to create looks like this:\n-\n-\t   [guard n-1]         <- guard_bb (old block)\n-\t     |    \\\n-\t     | [guard n-2]                   }\n-\t     |    / \\                        }\n-\t     |   /  ...                      } new blocks\n-\t     |  /  [guard 0]                 }\n-\t     | /    /   |                    }\n-\t    [ call ]    |     <- bi_call_bb  }\n-\t     | \\        |\n-\t     |  \\       |\n-\t     |   [ join ]     <- join_tgt_bb (old iff call must end bb)\n-\t     |\n+          [guard n-1]         <- guard_bb (old block)\n+            |    \\\n+            | [guard n-2]                   }\n+            |    / \\                        }\n+            |   /  ...                      } new blocks\n+            |  /  [guard 0]                 }\n+            | /  /    |                     }\n+           [call]     |      <- bi_call_bb  }\n+             \\    [newcall]  <-bi_newcall_bb}\n+              \\       |\n+                [join]       <- join_tgt_bb (old iff call must end bb)\n \t possible EH edges (only if [join] is old)\n \n      When [join] is new, the immediate dominators for these blocks are:\n \n      1. [guard n-1]: unchanged\n      2. [call]: [guard n-1]\n-     3. [guard m]: [guard m+1] for 0 <= m <= n-2\n-     4. [join]: [guard n-1]\n+     3. [newcall]: [guard 0]\n+     4. [guard m]: [guard m+1] for 0 <= m <= n-2\n+     5. [join]: [guard n-1]\n \n      We punt for the more complex case case of [join] being old and\n      simply free the dominance info.  We also punt on postdominators,\n@@ -927,6 +928,47 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n       edges.quick_push (edge_pair (bi_call_in_edge, guard_bb_in_edge));\n     }\n \n+  /* Move BI_NEWCALL to new basic block when it is non-null.  */\n+  if (bi_newcall)\n+    {\n+      /* Get bi_newcall_bb by split join_tgt_in_edge_fall_thru edge,\n+         and move BI_NEWCALL to bi_newcall_bb.  */\n+      bi_newcall_bb = split_edge (join_tgt_in_edge_fall_thru);\n+      gimple_stmt_iterator to_gsi = gsi_start_bb (bi_newcall_bb);\n+      gimple_stmt_iterator from_gsi = gsi_for_stmt (bi_newcall);\n+      gsi_move_before (&from_gsi, &to_gsi);\n+      join_tgt_in_edge_fall_thru = EDGE_SUCC (bi_newcall_bb, 0);\n+      join_tgt_bb = join_tgt_in_edge_fall_thru->dest;\n+\n+      tree bi_newcall_lhs = gimple_call_lhs (bi_newcall);\n+      tree bi_call_lhs = gimple_call_lhs (bi_call);\n+      if (!bi_call_lhs)\n+        {\n+          bi_call_lhs = copy_ssa_name (bi_newcall_lhs);\n+          gimple_call_set_lhs (bi_call, bi_call_lhs);\n+          SSA_NAME_DEF_STMT (bi_call_lhs) = bi_call;\n+        }\n+\n+      /* Create phi node for lhs of BI_CALL and BI_NEWCALL.  */\n+      gphi *new_phi = create_phi_node (copy_ssa_name (bi_newcall_lhs),\n+\t\t\t\t       join_tgt_bb);\n+      SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (new_phi))\n+        = SSA_NAME_OCCURS_IN_ABNORMAL_PHI (bi_newcall_lhs);\n+      add_phi_arg (new_phi, bi_call_lhs, join_tgt_in_edge_from_call,\n+                   gimple_location (bi_call));\n+      add_phi_arg (new_phi, bi_newcall_lhs, join_tgt_in_edge_fall_thru,\n+                   gimple_location (bi_newcall));\n+\n+      /* Replace all use of original return value with result of phi node.  */\n+      use_operand_p use_p;\n+      gimple *use_stmt;\n+      imm_use_iterator iterator;\n+      FOR_EACH_IMM_USE_STMT (use_stmt, iterator, bi_newcall_lhs)\n+        if (use_stmt != new_phi)\n+\t  FOR_EACH_IMM_USE_ON_STMT (use_p, iterator)\n+\t    SET_USE (use_p, PHI_RESULT (new_phi));\n+    }\n+\n   /* Now update the probability and profile information, processing the\n      guards in order of execution.\n \n@@ -1030,9 +1072,11 @@ use_internal_fn (gcall *call)\n \n   unsigned nconds = 0;\n   auto_vec<gimple *, 12> conds;\n+  bool is_arg_conds = false;\n   if (can_test_argument_range (call))\n     {\n       gen_shrink_wrap_conditions (call, conds, &nconds);\n+      is_arg_conds = true;\n       gcc_assert (nconds != 0);\n     }\n   else\n@@ -1082,8 +1126,8 @@ use_internal_fn (gcall *call)\n \t  call = new_call;\n \t}\n     }\n-\n-  shrink_wrap_one_built_in_call_with_conds (call, conds, nconds);\n+  shrink_wrap_one_built_in_call_with_conds (call, conds, nconds,\n+\t\t\t\t\t    is_arg_conds ? new_call : NULL);\n }\n \n /* The top level function for conditional dead code shrink"}]}