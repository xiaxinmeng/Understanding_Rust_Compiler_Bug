{"sha": "8c2451ba4601739654e2ea4907d6fa2a00d660aa", "node_id": "C_kwDOANBUbNoAKDhjMjQ1MWJhNDYwMTczOTY1NGUyZWE0OTA3ZDZmYTJhMDBkNjYwYWE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-14T13:54:28Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-14T13:54:28Z"}, "message": "AArch64: div-by-255, ensure that arguments are registers. [PR107988]\n\nAt -O0 (as opposed to e.g. volatile) we can get into the situation where the\nin0 and result RTL arguments passed to the division function are memory\nlocations instead of registers.  I think we could reject these early on by\nchecking that the gimple values are GIMPLE registers, but I think it's better to\nhandle it.\n\nAs such I force them to registers and emit a move to the memory locations and\nleave it up to reload to handle.  This fixes the ICE and still allows the\noptimization in these cases,  which improves the code quality a lot.\n\ngcc/ChangeLog:\n\n\tPR target/107988\n\t* config/aarch64/aarch64.cc\n\t(aarch64_vectorize_can_special_div_by_constant): Ensure input and output\n\tRTL are registers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/107988\n\t* gcc.target/aarch64/pr107988-1.c: New test.", "tree": {"sha": "dc2e12cf402acff854796b8ad4bf1de73c91bb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc2e12cf402acff854796b8ad4bf1de73c91bb3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c2451ba4601739654e2ea4907d6fa2a00d660aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2451ba4601739654e2ea4907d6fa2a00d660aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2451ba4601739654e2ea4907d6fa2a00d660aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2451ba4601739654e2ea4907d6fa2a00d660aa/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f86cb969cf409bf62e72129d4e19208fe75b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f86cb969cf409bf62e72129d4e19208fe75b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f86cb969cf409bf62e72129d4e19208fe75b3f"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "9a79a9e79288d67c8181d25b0c983f13c6cc3751", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2451ba4601739654e2ea4907d6fa2a00d660aa/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2451ba4601739654e2ea4907d6fa2a00d660aa/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=8c2451ba4601739654e2ea4907d6fa2a00d660aa", "patch": "@@ -24395,7 +24395,8 @@ aarch64_vectorize_can_special_div_by_constant (enum tree_code code,\n       || !TYPE_UNSIGNED (vectype))\n     return false;\n \n-  unsigned int flags = aarch64_classify_vector_mode (TYPE_MODE (vectype));\n+  machine_mode mode = TYPE_MODE (vectype);\n+  unsigned int flags = aarch64_classify_vector_mode (mode);\n   if ((flags & VEC_ANY_SVE) && !TARGET_SVE2)\n     return false;\n \n@@ -24411,15 +24412,14 @@ aarch64_vectorize_can_special_div_by_constant (enum tree_code code,\n   if (in0 == NULL_RTX && in1 == NULL_RTX)\n     return true;\n \n-  if (!VECTOR_TYPE_P (vectype))\n-   return false;\n-\n   gcc_assert (output);\n \n-  if (!*output)\n-    *output = gen_reg_rtx (TYPE_MODE (vectype));\n-\n-  emit_insn (gen_aarch64_bitmask_udiv3 (TYPE_MODE (vectype), *output, in0, in1));\n+  expand_operand ops[3];\n+  create_output_operand (&ops[0], *output, mode);\n+  create_input_operand (&ops[1], in0, mode);\n+  create_fixed_operand (&ops[2], in1);\n+  expand_insn (insn_code, 3, ops);\n+  *output = ops[0].value;\n   return true;\n }\n "}, {"sha": "c4fd290271b738345173b569bdc58c092fba7fe9", "filename": "gcc/testsuite/gcc.target/aarch64/pr107988-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2451ba4601739654e2ea4907d6fa2a00d660aa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr107988-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2451ba4601739654e2ea4907d6fa2a00d660aa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr107988-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr107988-1.c?ref=8c2451ba4601739654e2ea4907d6fa2a00d660aa", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O0\" } */\n+typedef unsigned short __attribute__((__vector_size__ (16))) V;\n+\n+V\n+foo (V v)\n+{\n+  v /= 255;\n+  return v;\n+}"}]}