{"sha": "87a80d27218f2325d05adc5382abe7d582062306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhODBkMjcyMThmMjMyNWQwNWFkYzUzODJhYmU3ZDU4MjA2MjMwNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:26:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:26:11Z"}, "message": "[AArch64] Pattern-match SVE extending gather loads\n\nThis patch pattern-matches a partial gather load followed by a sign or\nzero extension into an extending gather load.  (The partial gather load\nis already an extending load; we just don't rely on the upper bits of\nthe elements.)\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_2BHSI, SVE_2HSDI, SVE_4BHI)\n\t(SVE_4HSI): New mode iterators.\n\t(ANY_EXTEND2): New code iterator.\n\t* config/aarch64/aarch64-sve.md\n\t(@aarch64_gather_load_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>):\n\tExtend to...\n\t(@aarch64_gather_load_<ANY_EXTEND:optab><SVE_4HSI:mode><SVE_4BHI:mode>):\n\t...this, handling extension to partial modes as well as full modes.\n\tDescribe the extension as a predicated rather than unpredicated\n\textension.\n\t(@aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>):\n\tLikewise extend to...\n\t(@aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>):\n\t...this, making the same adjustments.\n\t(*aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_sxtw):\n\tLikewise extend to...\n\t(*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_sxtw)\n\t...this, making the same adjustments.\n\t(*aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_uxtw):\n\tLikewise extend to...\n\t(*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_uxtw)\n\t...this, making the same adjustments.\n\t(*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_<ANY_EXTEND2:su>xtw_unpacked):\n\tNew pattern.\n\t(*aarch64_ldff1_gather<mode>_sxtw): Canonicalize to a constant\n\textension predicate.\n\t(@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>)\n\t(@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>)\n\t(*aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_uxtw):\n\tDescribe the extension as a predicated rather than unpredicated\n\textension.\n\t(*aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_sxtw):\n\tLikewise.  Canonicalize to a constant extension predicate.\n\t* config/aarch64/aarch64-sve-builtins-base.cc\n\t(svld1_gather_extend_impl::expand): Add an extra predicate for\n\tthe extension.\n\t(svldff1_gather_extend_impl::expand): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/gather_load_extend_1.c: New test.\n\t* gcc.target/aarch64/sve/gather_load_extend_2.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_3.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_4.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_5.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_6.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_7.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_8.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_9.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_10.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_11.c: Likewise.\n\t* gcc.target/aarch64/sve/gather_load_extend_12.c: Likewise.\n\nFrom-SVN: r278346", "tree": {"sha": "cad94262d891bb42c12279735065fc6e128a6e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cad94262d891bb42c12279735065fc6e128a6e54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a80d27218f2325d05adc5382abe7d582062306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a80d27218f2325d05adc5382abe7d582062306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a80d27218f2325d05adc5382abe7d582062306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a80d27218f2325d05adc5382abe7d582062306/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8186eeaf3567bdaad38b5da577c8021f8588886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8186eeaf3567bdaad38b5da577c8021f8588886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8186eeaf3567bdaad38b5da577c8021f8588886"}], "stats": {"total": 838, "additions": 710, "deletions": 128}, "files": [{"sha": "78a79aec0e93a455c5a2a7ab7c1922fc8678ba72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -1,3 +1,43 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_2BHSI, SVE_2HSDI, SVE_4BHI)\n+\t(SVE_4HSI): New mode iterators.\n+\t(ANY_EXTEND2): New code iterator.\n+\t* config/aarch64/aarch64-sve.md\n+\t(@aarch64_gather_load_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>):\n+\tExtend to...\n+\t(@aarch64_gather_load_<ANY_EXTEND:optab><SVE_4HSI:mode><SVE_4BHI:mode>):\n+\t...this, handling extension to partial modes as well as full modes.\n+\tDescribe the extension as a predicated rather than unpredicated\n+\textension.\n+\t(@aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>):\n+\tLikewise extend to...\n+\t(@aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>):\n+\t...this, making the same adjustments.\n+\t(*aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_sxtw):\n+\tLikewise extend to...\n+\t(*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_sxtw)\n+\t...this, making the same adjustments.\n+\t(*aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_uxtw):\n+\tLikewise extend to...\n+\t(*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_uxtw)\n+\t...this, making the same adjustments.\n+\t(*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_<ANY_EXTEND2:su>xtw_unpacked):\n+\tNew pattern.\n+\t(*aarch64_ldff1_gather<mode>_sxtw): Canonicalize to a constant\n+\textension predicate.\n+\t(@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>)\n+\t(@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>)\n+\t(*aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_uxtw):\n+\tDescribe the extension as a predicated rather than unpredicated\n+\textension.\n+\t(*aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_sxtw):\n+\tLikewise.  Canonicalize to a constant extension predicate.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc\n+\t(svld1_gather_extend_impl::expand): Add an extra predicate for\n+\tthe extension.\n+\t(svldff1_gather_extend_impl::expand): Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SVE_24, SVE_2, SVE_4): New mode"}, {"sha": "52166c4d88937317627084076263ee267849a972", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -1097,6 +1097,8 @@ class svld1_gather_extend_impl : public extending_load\n     /* Put the predicate last, since the extending gathers use the same\n        operand order as mask_gather_load_optab.  */\n     e.rotate_inputs_left (0, 5);\n+    /* Add a constant predicate for the extension rtx.  */\n+    e.args.quick_push (CONSTM1_RTX (VNx16BImode));\n     insn_code icode = code_for_aarch64_gather_load (extend_rtx_code (),\n \t\t\t\t\t\t    e.vector_mode (0),\n \t\t\t\t\t\t    e.memory_vector_mode ());\n@@ -1234,6 +1236,8 @@ class svldff1_gather_extend : public extending_load\n     /* Put the predicate last, since ldff1_gather uses the same operand\n        order as mask_gather_load_optab.  */\n     e.rotate_inputs_left (0, 5);\n+    /* Add a constant predicate for the extension rtx.  */\n+    e.args.quick_push (CONSTM1_RTX (VNx16BImode));\n     insn_code icode = code_for_aarch64_ldff1_gather (extend_rtx_code (),\n \t\t\t\t\t\t     e.vector_mode (0),\n \t\t\t\t\t\t     e.memory_vector_mode ());"}, {"sha": "1dcbb4b84de9458873e3987dc59ce30bb343d594", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 210, "deletions": 128, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -1446,93 +1446,150 @@\n \n ;; Predicated extending gather loads for 32-bit elements.  Operand 3 is\n ;; true for unsigned extension and false for signed extension.\n-(define_insn \"@aarch64_gather_load_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>\"\n-  [(set (match_operand:VNx4_WIDE 0 \"register_operand\" \"=w, w, w, w, w, w\")\n-\t(ANY_EXTEND:VNx4_WIDE\n-\t  (unspec:VNx4_NARROW\n-\t    [(match_operand:VNx4BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_sve_gather_offset_<VNx4_NARROW:Vesize>\" \"Z, vg<VNx4_NARROW:Vesize>, rk, rk, rk, rk\")\n-\t     (match_operand:VNx4_WIDE 2 \"register_operand\" \"w, w, w, w, w, w\")\n-\t     (match_operand:DI 3 \"const_int_operand\" \"Ui1, Ui1, Z, Ui1, Z, Ui1\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx4_NARROW:Vesize>\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n-\t     (mem:BLK (scratch))]\n-\t    UNSPEC_LD1_GATHER)))]\n-  \"TARGET_SVE\"\n-  \"@\n-   ld1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%2.s]\n-   ld1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%2.s, #%1]\n-   ld1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%1, %2.s, sxtw]\n-   ld1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw]\n-   ld1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%1, %2.s, sxtw %p4]\n-   ld1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw %p4]\"\n+(define_insn_and_rewrite \"@aarch64_gather_load_<ANY_EXTEND:optab><SVE_4HSI:mode><SVE_4BHI:mode>\"\n+  [(set (match_operand:SVE_4HSI 0 \"register_operand\" \"=w, w, w, w, w, w\")\n+\t(unspec:SVE_4HSI\n+\t  [(match_operand:VNx4BI 6 \"general_operand\" \"UplDnm, UplDnm, UplDnm, UplDnm, UplDnm, UplDnm\")\n+\t   (ANY_EXTEND:SVE_4HSI\n+\t     (unspec:SVE_4BHI\n+\t       [(match_operand:VNx4BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_sve_gather_offset_<SVE_4BHI:Vesize>\" \"Z, vg<SVE_4BHI:Vesize>, rk, rk, rk, rk\")\n+\t\t(match_operand:VNx4SI 2 \"register_operand\" \"w, w, w, w, w, w\")\n+\t\t(match_operand:DI 3 \"const_int_operand\" \"Ui1, Ui1, Z, Ui1, Z, Ui1\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<SVE_4BHI:Vesize>\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n+\t\t(mem:BLK (scratch))]\n+\t       UNSPEC_LD1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_4HSI:narrower_mask> & <SVE_4BHI:self_mask>) == 0\"\n+  \"@\n+   ld1<ANY_EXTEND:s><SVE_4BHI:Vesize>\\t%0.s, %5/z, [%2.s]\n+   ld1<ANY_EXTEND:s><SVE_4BHI:Vesize>\\t%0.s, %5/z, [%2.s, #%1]\n+   ld1<ANY_EXTEND:s><SVE_4BHI:Vesize>\\t%0.s, %5/z, [%1, %2.s, sxtw]\n+   ld1<ANY_EXTEND:s><SVE_4BHI:Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw]\n+   ld1<ANY_EXTEND:s><SVE_4BHI:Vesize>\\t%0.s, %5/z, [%1, %2.s, sxtw %p4]\n+   ld1<ANY_EXTEND:s><SVE_4BHI:Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw %p4]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n+  {\n+    operands[6] = CONSTM1_RTX (VNx4BImode);\n+  }\n )\n \n ;; Predicated extending gather loads for 64-bit elements.  The value of\n ;; operand 3 doesn't matter in this case.\n-(define_insn \"@aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>\"\n-  [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w, w, w, w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_sve_gather_offset_<VNx2_NARROW:Vesize>\" \"Z, vg<VNx2_NARROW:Vesize>, rk, rk\")\n-\t     (match_operand:VNx2_WIDE 2 \"register_operand\" \"w, w, w, w\")\n-\t     (match_operand:DI 3 \"const_int_operand\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, Ui1, Ui1, i\")\n-\t     (mem:BLK (scratch))]\n-\t    UNSPEC_LD1_GATHER)))]\n-  \"TARGET_SVE\"\n+(define_insn_and_rewrite \"@aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>\"\n+  [(set (match_operand:SVE_2HSDI 0 \"register_operand\" \"=w, w, w, w\")\n+\t(unspec:SVE_2HSDI\n+\t  [(match_operand:VNx2BI 6 \"general_operand\" \"UplDnm, UplDnm, UplDnm, UplDnm\")\n+\t   (ANY_EXTEND:SVE_2HSDI\n+\t     (unspec:SVE_2BHSI\n+\t       [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_sve_gather_offset_<SVE_2BHSI:Vesize>\" \"Z, vg<SVE_2BHSI:Vesize>, rk, rk\")\n+\t\t(match_operand:VNx2DI 2 \"register_operand\" \"w, w, w, w\")\n+\t\t(match_operand:DI 3 \"const_int_operand\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<SVE_2BHSI:Vesize>\" \"Ui1, Ui1, Ui1, i\")\n+\t\t(mem:BLK (scratch))]\n+\t       UNSPEC_LD1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_2HSDI:narrower_mask> & <SVE_2BHSI:self_mask>) == 0\"\n   \"@\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%2.d]\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%2.d, #%1]\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d]\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, lsl %p4]\"\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%2.d]\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%2.d, #%1]\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d]\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d, lsl %p4]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n+  {\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n+  }\n )\n \n-;; Likewise, but with the offset being sign-extended from 32 bits.\n-(define_insn_and_rewrite \"*aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_sxtw\"\n-  [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w, w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n-\t     (unspec:VNx2DI\n-\t       [(match_operand 6)\n-\t\t(sign_extend:VNx2DI\n-\t\t  (truncate:VNx2SI\n-\t\t    (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")))]\n-\t       UNSPEC_PRED_X)\n-\t     (match_operand:DI 3 \"const_int_operand\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, i\")\n-\t     (mem:BLK (scratch))]\n-\t    UNSPEC_LD1_GATHER)))]\n-  \"TARGET_SVE\"\n+;; Likewise, but with the offset being extended from 32 bits.\n+(define_insn_and_rewrite \"*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_<ANY_EXTEND2:su>xtw_unpacked\"\n+  [(set (match_operand:SVE_2HSDI 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_2HSDI\n+\t  [(match_operand 6)\n+\t   (ANY_EXTEND:SVE_2HSDI\n+\t     (unspec:SVE_2BHSI\n+\t       [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n+\t\t(unspec:VNx2DI\n+\t\t  [(match_operand 7)\n+\t\t   (ANY_EXTEND2:VNx2DI\n+\t\t     (match_operand:VNx2SI 2 \"register_operand\" \"w, w\"))]\n+\t\t  UNSPEC_PRED_X)\n+\t\t(match_operand:DI 3 \"const_int_operand\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<SVE_2BHSI:Vesize>\" \"Ui1, i\")\n+\t\t(mem:BLK (scratch))]\n+\t       UNSPEC_LD1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_2HSDI:narrower_mask> & <SVE_2BHSI:self_mask>) == 0\"\n   \"@\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw]\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw %p4]\"\n-  \"&& !rtx_equal_p (operands[5], operands[6])\"\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d, <ANY_EXTEND2:su>xtw]\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d, <ANY_EXTEND2:su>xtw %p4]\"\n+  \"&& (!CONSTANT_P (operands[6]) || !CONSTANT_P (operands[7]))\"\n   {\n-    operands[6] = copy_rtx (operands[5]);\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n+    operands[7] = CONSTM1_RTX (VNx2BImode);\n   }\n )\n \n-;; Likewise, but with the offset being zero-extended from 32 bits.\n-(define_insn \"*aarch64_gather_load_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_uxtw\"\n-  [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w, w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n-\t     (and:VNx2DI\n-\t       (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")\n-\t       (match_operand:VNx2DI 6 \"aarch64_sve_uxtw_immediate\"))\n-\t     (match_operand:DI 3 \"const_int_operand\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, i\")\n-\t     (mem:BLK (scratch))]\n-\t    UNSPEC_LD1_GATHER)))]\n-  \"TARGET_SVE\"\n+;; Likewise, but with the offset being truncated to 32 bits and then\n+;; sign-extended.\n+(define_insn_and_rewrite \"*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_sxtw\"\n+  [(set (match_operand:SVE_2HSDI 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_2HSDI\n+\t  [(match_operand 6)\n+\t   (ANY_EXTEND:SVE_2HSDI\n+\t     (unspec:SVE_2BHSI\n+\t       [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n+\t\t(unspec:VNx2DI\n+\t\t  [(match_operand 7)\n+\t\t   (sign_extend:VNx2DI\n+\t\t     (truncate:VNx2SI\n+\t\t       (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")))]\n+\t\t  UNSPEC_PRED_X)\n+\t\t(match_operand:DI 3 \"const_int_operand\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<SVE_2BHSI:Vesize>\" \"Ui1, i\")\n+\t\t(mem:BLK (scratch))]\n+\t       UNSPEC_LD1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_2HSDI:narrower_mask> & <SVE_2BHSI:self_mask>) == 0\"\n+  \"@\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw]\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw %p4]\"\n+  \"&& (!CONSTANT_P (operands[6]) || !CONSTANT_P (operands[7]))\"\n+  {\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n+    operands[7] = CONSTM1_RTX (VNx2BImode);\n+  }\n+)\n+\n+;; Likewise, but with the offset being truncated to 32 bits and then\n+;; zero-extended.\n+(define_insn_and_rewrite \"*aarch64_gather_load_<ANY_EXTEND:optab><SVE_2HSDI:mode><SVE_2BHSI:mode>_uxtw\"\n+  [(set (match_operand:SVE_2HSDI 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_2HSDI\n+\t  [(match_operand 7)\n+\t   (ANY_EXTEND:SVE_2HSDI\n+\t     (unspec:SVE_2BHSI\n+\t       [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n+\t\t(and:VNx2DI\n+\t\t  (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")\n+\t\t  (match_operand:VNx2DI 6 \"aarch64_sve_uxtw_immediate\"))\n+\t\t(match_operand:DI 3 \"const_int_operand\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<SVE_2BHSI:Vesize>\" \"Ui1, i\")\n+\t\t(mem:BLK (scratch))]\n+\t       UNSPEC_LD1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_2HSDI:narrower_mask> & <SVE_2BHSI:self_mask>) == 0\"\n   \"@\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw]\n-   ld1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw %p4]\"\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw]\n+   ld1<ANY_EXTEND:s><SVE_2BHSI:Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw %p4]\"\n+  \"&& !CONSTANT_P (operands[7])\"\n+  {\n+    operands[7] = CONSTM1_RTX (VNx2BImode);\n+  }\n )\n \n ;; -------------------------------------------------------------------------\n@@ -1608,9 +1665,9 @@\n   \"@\n    ldff1d\\t%0.d, %5/z, [%1, %2.d, sxtw]\n    ldff1d\\t%0.d, %5/z, [%1, %2.d, sxtw %p4]\"\n-  \"&& !rtx_equal_p (operands[5], operands[6])\"\n+  \"&& !CONSTANT_P (operands[6])\"\n   {\n-    operands[6] = copy_rtx (operands[5]);\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n   }\n )\n \n@@ -1648,18 +1705,21 @@\n \n ;; Predicated extending first-faulting gather loads for 32-bit elements.\n ;; Operand 3 is true for unsigned extension and false for signed extension.\n-(define_insn \"@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>\"\n+(define_insn_and_rewrite \"@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx4_WIDE:mode><VNx4_NARROW:mode>\"\n   [(set (match_operand:VNx4_WIDE 0 \"register_operand\" \"=w, w, w, w, w, w\")\n-\t(ANY_EXTEND:VNx4_WIDE\n-\t  (unspec:VNx4_NARROW\n-\t    [(match_operand:VNx4BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_sve_gather_offset_<VNx4_NARROW:Vesize>\" \"Z, vg<VNx4_NARROW:Vesize>, rk, rk, rk, rk\")\n-\t     (match_operand:VNx4_WIDE 2 \"register_operand\" \"w, w, w, w, w, w\")\n-\t     (match_operand:DI 3 \"const_int_operand\" \"i, i, Z, Ui1, Z, Ui1\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx4_NARROW:Vesize>\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n-\t     (mem:BLK (scratch))\n-\t     (reg:VNx16BI FFRT_REGNUM)]\n-\t    UNSPEC_LDFF1_GATHER)))]\n+\t(unspec:VNx4_WIDE\n+\t  [(match_operand:VNx4BI 6 \"general_operand\" \"UplDnm, UplDnm, UplDnm, UplDnm, UplDnm, UplDnm\")\n+\t   (ANY_EXTEND:VNx4_WIDE\n+\t     (unspec:VNx4_NARROW\n+\t       [(match_operand:VNx4BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_sve_gather_offset_<VNx4_NARROW:Vesize>\" \"Z, vg<VNx4_NARROW:Vesize>, rk, rk, rk, rk\")\n+\t\t(match_operand:VNx4_WIDE 2 \"register_operand\" \"w, w, w, w, w, w\")\n+\t\t(match_operand:DI 3 \"const_int_operand\" \"i, i, Z, Ui1, Z, Ui1\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx4_NARROW:Vesize>\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n+\t\t(mem:BLK (scratch))\n+\t\t(reg:VNx16BI FFRT_REGNUM)]\n+\t       UNSPEC_LDFF1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    ldff1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%2.s]\n@@ -1668,77 +1728,99 @@\n    ldff1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw]\n    ldff1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%1, %2.s, sxtw %p4]\n    ldff1<ANY_EXTEND:s><VNx4_NARROW:Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw %p4]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n+  {\n+    operands[6] = CONSTM1_RTX (VNx4BImode);\n+  }\n )\n \n ;; Predicated extending first-faulting gather loads for 64-bit elements.\n ;; The value of operand 3 doesn't matter in this case.\n-(define_insn \"@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>\"\n+(define_insn_and_rewrite \"@aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>\"\n   [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w, w, w, w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_sve_gather_offset_<VNx2_NARROW:Vesize>\" \"Z, vg<VNx2_NARROW:Vesize>, rk, rk\")\n-\t     (match_operand:VNx2_WIDE 2 \"register_operand\" \"w, w, w, w\")\n-\t     (match_operand:DI 3 \"const_int_operand\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, Ui1, Ui1, i\")\n-\t     (mem:BLK (scratch))\n-\t     (reg:VNx16BI FFRT_REGNUM)]\n-\t    UNSPEC_LDFF1_GATHER)))]\n+\t(unspec:VNx2_WIDE\n+\t  [(match_operand:VNx2BI 6 \"general_operand\" \"UplDnm, UplDnm, UplDnm, UplDnm\")\n+\t   (ANY_EXTEND:VNx2_WIDE\n+\t     (unspec:VNx2_NARROW\n+\t       [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_sve_gather_offset_<VNx2_NARROW:Vesize>\" \"Z, vg<VNx2_NARROW:Vesize>, rk, rk\")\n+\t\t(match_operand:VNx2_WIDE 2 \"register_operand\" \"w, w, w, w\")\n+\t\t(match_operand:DI 3 \"const_int_operand\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, Ui1, Ui1, i\")\n+\t\t(mem:BLK (scratch))\n+\t\t(reg:VNx16BI FFRT_REGNUM)]\n+\t       UNSPEC_LDFF1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%2.d]\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%2.d, #%1]\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d]\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, lsl %p4]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n+  {\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n+  }\n )\n \n ;; Likewise, but with the offset being sign-extended from 32 bits.\n (define_insn_and_rewrite \"*aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_sxtw\"\n   [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w, w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n-\t     (unspec:VNx2DI\n-\t       [(match_operand 6)\n-\t\t(sign_extend:VNx2DI\n-\t\t  (truncate:VNx2SI\n-\t\t    (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")))]\n-\t       UNSPEC_PRED_X)\n-\t     (match_operand:DI 3 \"const_int_operand\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, i\")\n-\t     (mem:BLK (scratch))\n-\t     (reg:VNx16BI FFRT_REGNUM)]\n-\t    UNSPEC_LDFF1_GATHER)))]\n+\t(unspec:VNx2_WIDE\n+\t  [(match_operand 6)\n+\t   (ANY_EXTEND:VNx2_WIDE\n+\t     (unspec:VNx2_NARROW\n+\t       [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n+\t\t(unspec:VNx2DI\n+\t\t  [(match_operand 7)\n+\t\t   (sign_extend:VNx2DI\n+\t\t     (truncate:VNx2SI\n+\t\t       (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")))]\n+\t\t  UNSPEC_PRED_X)\n+\t\t(match_operand:DI 3 \"const_int_operand\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, i\")\n+\t\t(mem:BLK (scratch))\n+\t\t(reg:VNx16BI FFRT_REGNUM)]\n+\t       UNSPEC_LDFF1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw]\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw %p4]\"\n-  \"&& !rtx_equal_p (operands[5], operands[6])\"\n+  \"&& (!CONSTANT_P (operands[6]) || !CONSTANT_P (operands[7]))\"\n   {\n-    operands[6] = copy_rtx (operands[5]);\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n+    operands[7] = CONSTM1_RTX (VNx2BImode);\n   }\n )\n \n ;; Likewise, but with the offset being zero-extended from 32 bits.\n-(define_insn \"*aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_uxtw\"\n+(define_insn_and_rewrite \"*aarch64_ldff1_gather_<ANY_EXTEND:optab><VNx2_WIDE:mode><VNx2_NARROW:mode>_uxtw\"\n   [(set (match_operand:VNx2_WIDE 0 \"register_operand\" \"=w, w\")\n-\t(ANY_EXTEND:VNx2_WIDE\n-\t  (unspec:VNx2_NARROW\n-\t    [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n-\t     (match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n-\t     (and:VNx2DI\n-\t       (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")\n-\t       (match_operand:VNx2DI 6 \"aarch64_sve_uxtw_immediate\"))\n-\t     (match_operand:DI 3 \"const_int_operand\")\n-\t     (match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, i\")\n-\t     (mem:BLK (scratch))\n-\t     (reg:VNx16BI FFRT_REGNUM)]\n-\t    UNSPEC_LDFF1_GATHER)))]\n+\t(unspec:VNx2_WIDE\n+\t  [(match_operand 7)\n+\t   (ANY_EXTEND:VNx2_WIDE\n+\t     (unspec:VNx2_NARROW\n+\t       [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n+\t\t(match_operand:DI 1 \"aarch64_reg_or_zero\" \"rk, rk\")\n+\t\t(and:VNx2DI\n+\t\t  (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")\n+\t\t  (match_operand:VNx2DI 6 \"aarch64_sve_uxtw_immediate\"))\n+\t\t(match_operand:DI 3 \"const_int_operand\")\n+\t\t(match_operand:DI 4 \"aarch64_gather_scale_operand_<VNx2_NARROW:Vesize>\" \"Ui1, i\")\n+\t\t(mem:BLK (scratch))\n+\t\t(reg:VNx16BI FFRT_REGNUM)]\n+\t       UNSPEC_LDFF1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw]\n    ldff1<ANY_EXTEND:s><VNx2_NARROW:Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw %p4]\"\n+  \"&& !CONSTANT_P (operands[7])\"\n+  {\n+    operands[7] = CONSTM1_RTX (VNx2BImode);\n+  }\n )\n \n ;; ========================================================================="}, {"sha": "bfeebe9b7724bceff5980fc9f42f895d565d67bc", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -371,9 +371,21 @@\n ;; SVE modes with 2 elements.\n (define_mode_iterator SVE_2 [VNx2QI VNx2HI VNx2HF VNx2SI VNx2SF VNx2DI VNx2DF])\n \n+;; SVE integer modes with 2 elements, excluding the widest element.\n+(define_mode_iterator SVE_2BHSI [VNx2QI VNx2HI VNx2SI])\n+\n+;; SVE integer modes with 2 elements, excluding the narrowest element.\n+(define_mode_iterator SVE_2HSDI [VNx2HI VNx2SI VNx2DI])\n+\n ;; SVE modes with 4 elements.\n (define_mode_iterator SVE_4 [VNx4QI VNx4HI VNx4HF VNx4SI VNx4SF])\n \n+;; SVE integer modes with 4 elements, excluding the widest element.\n+(define_mode_iterator SVE_4BHI [VNx4QI VNx4HI])\n+\n+;; SVE integer modes with 4 elements, excluding the narrowest element.\n+(define_mode_iterator SVE_4HSI [VNx4HI VNx4SI])\n+\n ;; Modes involved in extending or truncating SVE data, for 8 elements per\n ;; 128-bit block.\n (define_mode_iterator VNx8_NARROW [VNx8QI])\n@@ -1443,6 +1455,7 @@\n \n ;; Code iterator for sign/zero extension\n (define_code_iterator ANY_EXTEND [sign_extend zero_extend])\n+(define_code_iterator ANY_EXTEND2 [sign_extend zero_extend])\n \n ;; All division operations (signed/unsigned)\n (define_code_iterator ANY_DIV [div udiv])"}, {"sha": "e9535af36ebbab9dbe7cc75d941860376832a430", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -1,3 +1,18 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/gather_load_extend_1.c: New test.\n+\t* gcc.target/aarch64/sve/gather_load_extend_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_11.c: Likewise.\n+\t* gcc.target/aarch64/sve/gather_load_extend_12.c: Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/gather_load_1.c (TEST_LOOP): Start at 0."}, {"sha": "005c33b2b4eac6321c5adbd34fdcc74ac69c5079", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_1.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, uint32_t *restrict index,\t\\\n+\t\t       int n)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[index[i]];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (uint16_t, uint8_t) \\\n+  T (uint32_t, uint8_t) \\\n+  T (uint64_t, uint8_t) \\\n+  T (uint32_t, uint16_t) \\\n+  T (uint64_t, uint16_t) \\\n+  T (uint64_t, uint32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, uxtw 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 2\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 7 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tuxt.\\t} } } */"}, {"sha": "09b55059d8f13709fdd59abde73588d04e36777a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_10.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_10.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (int64_t *restrict dst, int16_t *src1, int8_t *src2, uint32_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int16_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f2 (int64_t *restrict dst, int16_t *src1, int8_t *src2, uint64_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int16_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f3 (int64_t *restrict dst, int16_t *src1, int8_t **src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int16_t) (src1[i] + *src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d, p[0-7]/z, \\[x2, z[0-9]+\\.d\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[x1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x0\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x2\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\t} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "5a93bb7610e07eb9936d7ea5e4816526d563db44", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_11.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_11.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (int64_t *restrict dst, int32_t *src1, int8_t *src2, uint32_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f2 (int64_t *restrict dst, int32_t *src1, int8_t *src2, uint64_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f3 (int64_t *restrict dst, int32_t *src1, int8_t **src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + *src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d, p[0-7]/z, \\[x2, z[0-9]+\\.d\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x0\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x2\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\t} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtw\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "f5989cea6b4d849924c792f5f7a4d67a564b47be", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_12.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_12.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (int64_t *restrict dst, int32_t *src1, int16_t *src2, uint32_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f2 (int64_t *restrict dst, int32_t *src1, int16_t *src2, uint64_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f3 (int64_t *restrict dst, int32_t *src1, int16_t **src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + *src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.d, p[0-7]/z, \\[x2, z[0-9]+\\.d, lsl 1\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x0\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x2\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\t} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtw\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "bd1081f07b7c68107b1d249036f352bab5dcef00", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_2.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, uint32_t *restrict index,\t\\\n+\t\t       int n)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[index[i]];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t) \\\n+  T (int32_t, int8_t) \\\n+  T (int64_t, int8_t) \\\n+  T (int32_t, int16_t) \\\n+  T (int64_t, int16_t) \\\n+  T (int64_t, int32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, uxtw 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sw\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 2\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 7 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsxt.\\t} } } */"}, {"sha": "440f8f63829bdebf14aecc7524408245d67d1326", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_3.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, int32_t *restrict index,\t\\\n+\t\t       int n)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[index[i]];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (uint16_t, uint8_t) \\\n+  T (uint32_t, uint8_t) \\\n+  T (uint64_t, uint8_t) \\\n+  T (uint32_t, uint16_t) \\\n+  T (uint64_t, uint16_t) \\\n+  T (uint64_t, uint32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, sxtw 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 2\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 7 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sw\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tuxt.\\t} } } */"}, {"sha": "8cc8e75a86d004b44ec5cb47bb6a236a1b6185a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_4.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, int32_t *restrict index,\t\\\n+\t\t       int n)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[index[i]];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t) \\\n+  T (int32_t, int8_t) \\\n+  T (int64_t, int8_t) \\\n+  T (int32_t, int16_t) \\\n+  T (int64_t, int16_t) \\\n+  T (int64_t, int32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.s, sxtw 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sw\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 2\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 7 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sw\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsxt.\\t} } } */"}, {"sha": "4916a1ef4cac36fc95f891bece197c6391b48455", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_5.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, uint64_t *restrict index,\t\\\n+\t\t       int n)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[index[i]];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (uint16_t, uint8_t) \\\n+  T (uint32_t, uint8_t) \\\n+  T (uint64_t, uint8_t) \\\n+  T (uint32_t, uint16_t) \\\n+  T (uint64_t, uint16_t) \\\n+  T (uint64_t, uint32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 1\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 2\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tuxt.\\t} } } */"}, {"sha": "60a73b3d6cbf2894472b4514cad037a2a422d93e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_6.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_6.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, uint64_t *restrict index,\t\\\n+\t\t       int n)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + src2[index[i]];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t) \\\n+  T (int32_t, int8_t) \\\n+  T (int64_t, int8_t) \\\n+  T (int32_t, int16_t) \\\n+  T (int64_t, int16_t) \\\n+  T (int64_t, int32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1sb\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sh\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 1\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1sw\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+\\.d, lsl 2\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsxt.\\t} } } */"}, {"sha": "bdfb0f764a1e2ef5513a8655adb0f74a557d1409", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_7.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *restrict dst, uint16_t *src1, uint8_t *src2, uint32_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint16_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f2 (uint64_t *restrict dst, uint16_t *src1, uint8_t *src2, uint64_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint16_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f3 (uint64_t *restrict dst, uint16_t *src1, uint8_t **src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint16_t) (src1[i] + *src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[x2, z[0-9]+\\.d\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[x1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x0\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x2\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\t} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "20976eaa2c36eceb87fe10c8ef5fb8ab99977a7f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_8.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_8.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *restrict dst, uint32_t *src1, uint8_t *src2, uint32_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f2 (uint64_t *restrict dst, uint32_t *src1, uint8_t *src2, uint64_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f3 (uint64_t *restrict dst, uint32_t *src1, uint8_t **src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + *src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[x2, z[0-9]+\\.d\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x0\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x2\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\t} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtw\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "b2f75e99d9846312513368d247939a92d1e4da3a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_extend_9.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a80d27218f2325d05adc5382abe7d582062306/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_extend_9.c?ref=87a80d27218f2325d05adc5382abe7d582062306", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *restrict dst, uint32_t *src1, uint16_t *src2, uint32_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f2 (uint64_t *restrict dst, uint32_t *src1, uint16_t *src2, uint64_t *index)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + src2[index[i]]);\n+}\n+\n+void\n+f3 (uint64_t *restrict dst, uint32_t *src1, uint16_t **src2)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + *src2[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[x2, z[0-9]+\\.d, lsl 1\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+\\.d\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x0\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x2\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x3\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\t} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtw\\tz[0-9]+\\.d,} 3 } } */"}]}