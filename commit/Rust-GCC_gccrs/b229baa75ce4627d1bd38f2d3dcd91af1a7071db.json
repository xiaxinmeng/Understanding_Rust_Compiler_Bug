{"sha": "b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyOWJhYTc1Y2U0NjI3ZDFiZDM4ZjJkM2RjZDkxYWYxYTcwNzFkYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-05T09:22:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-05T09:22:07Z"}, "message": "c++: Fix ICE with structured binding initialized to incomplete array [PR97878]\n\nWe ICE on the following testcase, for incomplete array a on auto [b] { a }; without\ngiving any kind of diagnostics, with auto [c] = a; during error-recovery.\nThe problem is that we get too far through check_initializer and e.g.\nstore_init_value -> constexpr stuff can't deal with incomplete array types.\n\nAs the type of the structured binding artificial variable is always deduced,\nI think it is easiest to diagnose this early, even if they have array types\nwe'll need their deduced type to be complete rather than just its element\ntype.\n\n2021-02-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/97878\n\t* decl.c (check_array_initializer): For structured bindings, require\n\tthe array type to be complete.\n\n\t* g++.dg/cpp1z/decomp54.C: New test.", "tree": {"sha": "ecfd4a3604de808caeb8e4e3938cd81e5491da9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecfd4a3604de808caeb8e4e3938cd81e5491da9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b229baa75ce4627d1bd38f2d3dcd91af1a7071db/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9bb52150db4eb282bd8adf0397e848373f85a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9bb52150db4eb282bd8adf0397e848373f85a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9bb52150db4eb282bd8adf0397e848373f85a70"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "b0265fc36107548d31d05788e128f5750c993f1f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b229baa75ce4627d1bd38f2d3dcd91af1a7071db/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b229baa75ce4627d1bd38f2d3dcd91af1a7071db/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "patch": "@@ -6768,6 +6768,19 @@ check_array_initializer (tree decl, tree type, tree init)\n {\n   tree element_type = TREE_TYPE (type);\n \n+  /* Structured binding when initialized with an array type needs\n+     to have complete type.  */\n+  if (decl\n+      && DECL_DECOMPOSITION_P (decl)\n+      && !DECL_DECOMP_BASE (decl)\n+      && !COMPLETE_TYPE_P (type))\n+    {\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"structured binding has incomplete type %qT\", type);\n+      TREE_TYPE (decl) = error_mark_node;\n+      return true;\n+    }\n+\n   /* The array type itself need not be complete, because the\n      initializer may tell us how many elements are in the array.\n      But, the elements of the array must be complete.  */"}, {"sha": "1bee772d5ba5e32dd44169bab5dddb6125812901", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp54.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b229baa75ce4627d1bd38f2d3dcd91af1a7071db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b229baa75ce4627d1bd38f2d3dcd91af1a7071db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp54.C?ref=b229baa75ce4627d1bd38f2d3dcd91af1a7071db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/97878\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+extern int a[];\n+auto [b] { a };\t// { dg-error \"has incomplete type\" }\n+\t\t// { dg-warning \"only available with\" \"\" { target c++14_down } .-1 }\n+auto [c] = a;\t// { dg-error \"has incomplete type\" }\n+\t\t// { dg-warning \"only available with\" \"\" { target c++14_down } .-1 }\n+extern int d[0];\n+auto [e] { d };\t// { dg-error \"too many initializers for\" }\n+\t\t// { dg-error \"1 name provided for structured binding\" \"\" { target *-*-* } .-1 }\n+\t\t// { dg-message \"decomposes into 0 elements\" \"\" { target *-*-* } .-2 }\n+\t\t// { dg-warning \"only available with\" \"\" { target c++14_down } .-3 }\n+auto [f] = d;\t// { dg-error \"1 name provided for structured binding\" }\n+\t\t// { dg-message \"decomposes into 0 elements\" \"\" { target *-*-* } .-1 }\n+\t\t// { dg-warning \"only available with\" \"\" { target c++14_down } .-2 }"}]}