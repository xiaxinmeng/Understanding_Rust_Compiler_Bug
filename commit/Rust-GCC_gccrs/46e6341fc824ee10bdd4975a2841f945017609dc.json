{"sha": "46e6341fc824ee10bdd4975a2841f945017609dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlNjM0MWZjODI0ZWUxMGJkZDQ5NzVhMjg0MWY5NDUwMTc2MDlkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-03T10:12:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2020-01-03T10:12:31Z"}, "message": "re PR target/93089 (Force mprefer-vector-width=512 in 'e' simd clones)\n\n\tPR target/93089\n\t* config/i386/i386.opt (x_prefer_vector_width_type): Remove TargetSave\n\tentry.\n\t(mprefer-vector-width=): Add Save.\n\t* config/i386/i386-options.c (ix86_target_string): Add PVW argument, print\n\t-mprefer-vector-width= if non-zero.  Fix up -mfpmath= comment.\n\t(ix86_debug_options, ix86_function_specific_print): Adjust\n\tix86_target_string callers.\n\t(ix86_valid_target_attribute_inner_p): Handle prefer-vector-width=.\n\t(ix86_valid_target_attribute_tree): Likewise.\n\t* config/i386/i386-options.h (ix86_target_string): Add PVW argument.\n\t* config/i386/i386-expand.c (ix86_expand_builtin): Adjust\n\tix86_target_string caller.\n\n\t* gcc.target/i386/pr93089-1.c: New test.\n\nFrom-SVN: r279856", "tree": {"sha": "0f654fabc913ecd6b1b82bd9e2839625d877bd76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f654fabc913ecd6b1b82bd9e2839625d877bd76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e6341fc824ee10bdd4975a2841f945017609dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e6341fc824ee10bdd4975a2841f945017609dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e6341fc824ee10bdd4975a2841f945017609dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e6341fc824ee10bdd4975a2841f945017609dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5499c8628ac3ab7baa673013c7dacd4a03fbb0d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5499c8628ac3ab7baa673013c7dacd4a03fbb0d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5499c8628ac3ab7baa673013c7dacd4a03fbb0d6"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "c1936a53bb39aaf546a0aaf90aeed3dcf0106a05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46e6341fc824ee10bdd4975a2841f945017609dc", "patch": "@@ -1,5 +1,19 @@\n 2020-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93089\n+\t* config/i386/i386.opt (x_prefer_vector_width_type): Remove TargetSave\n+\tentry.\n+\t(mprefer-vector-width=): Add Save.\n+\t* config/i386/i386-options.c (ix86_target_string): Add PVW argument, print\n+\t-mprefer-vector-width= if non-zero.  Fix up -mfpmath= comment.\n+\t(ix86_debug_options, ix86_function_specific_print): Adjust\n+\tix86_target_string callers.\n+\t(ix86_valid_target_attribute_inner_p): Handle prefer-vector-width=.\n+\t(ix86_valid_target_attribute_tree): Likewise.\n+\t* config/i386/i386-options.h (ix86_target_string): Add PVW argument.\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Adjust\n+\tix86_target_string caller.\n+\n \tPR target/93110\n \t* config/i386/i386.md (abs<mode>2): Use expand_simple_binop instead of\n \temitting ASHIFTRT, XOR and MINUS by hand.  Use gen_int_mode with QImode"}, {"sha": "2a7bf72318a01ad29a762b377f0d7acc747d0384", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=46e6341fc824ee10bdd4975a2841f945017609dc", "patch": "@@ -11009,7 +11009,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       else\n \tbisa |= OPTION_MASK_ABI_64;\n       char *opts = ix86_target_string (bisa, bisa2, 0, 0, NULL, NULL,\n-\t\t\t\t       (enum fpmath_unit) 0, false, add_abi_p);\n+\t\t\t\t       (enum fpmath_unit) 0,\n+\t\t\t\t       (enum prefer_vector_width) 0,\n+\t\t\t\t       false, add_abi_p);\n       if (!opts)\n \terror (\"%qE needs unknown isa option\", fndecl);\n       else"}, {"sha": "a4c66e4aebf9aef0ec3ebd96aafc6075e109bf0c", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=46e6341fc824ee10bdd4975a2841f945017609dc", "patch": "@@ -339,7 +339,9 @@ char *\n ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \t\t    int flags, int flags2,\n \t\t    const char *arch, const char *tune,\n-\t\t    enum fpmath_unit fpmath, bool add_nl_p, bool add_abi_p)\n+\t\t    enum fpmath_unit fpmath,\n+\t\t    enum prefer_vector_width pvw,\n+\t\t    bool add_nl_p, bool add_abi_p)\n {\n   /* Flag options.  */\n   static struct ix86_target_opts flag_opts[] =\n@@ -493,7 +495,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n       sprintf (flags2_other, \"(other flags2: %#x)\", flags2);\n     }\n \n-  /* Add -fpmath= option.  */\n+  /* Add -mfpmath= option.  */\n   if (fpmath)\n     {\n       opts[num][0] = \"-mfpmath=\";\n@@ -516,6 +518,29 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \t}\n     }\n \n+  /* Add -mprefer-vector-width= option.  */\n+  if (pvw)\n+    {\n+      opts[num][0] = \"-mprefer-vector-width=\";\n+      switch ((int) pvw)\n+\t{\n+\tcase PVW_AVX128:\n+\t  opts[num++][1] = \"128\";\n+\t  break;\n+\n+\tcase PVW_AVX256:\n+\t  opts[num++][1] = \"256\";\n+\t  break;\n+\n+\tcase PVW_AVX512:\n+\t  opts[num++][1] = \"512\";\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   /* Any options?  */\n   if (num == 0)\n     return NULL;\n@@ -579,8 +604,9 @@ ix86_debug_options (void)\n {\n   char *opts = ix86_target_string (ix86_isa_flags, ix86_isa_flags2,\n \t\t\t\t   target_flags, ix86_target_flags,\n-\t\t\t\t   ix86_arch_string,ix86_tune_string,\n-\t\t\t\t   ix86_fpmath, true, true);\n+\t\t\t\t   ix86_arch_string, ix86_tune_string,\n+\t\t\t\t   ix86_fpmath, prefer_vector_width_type,\n+\t\t\t\t   true, true);\n \n   if (opts)\n     {\n@@ -847,7 +873,8 @@ ix86_function_specific_print (FILE *file, int indent,\n   char *target_string\n     = ix86_target_string (ptr->x_ix86_isa_flags, ptr->x_ix86_isa_flags2,\n \t\t\t  ptr->x_target_flags, ptr->x_ix86_target_flags,\n-\t\t\t  NULL, NULL, ptr->x_ix86_fpmath, false, true);\n+\t\t\t  NULL, NULL, ptr->x_ix86_fpmath,\n+\t\t\t  ptr->x_prefer_vector_width_type, false, true);\n \n   gcc_assert (ptr->arch < PROCESSOR_max);\n   fprintf (file, \"%*sarch = %d (%s)\\n\",\n@@ -992,6 +1019,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n+    IX86_ATTR_ENUM (\"prefer-vector-width=\", OPT_mprefer_vector_width_),\n \n     /* string options */\n     IX86_ATTR_STR (\"arch=\",\tIX86_FUNCTION_SPECIFIC_ARCH),\n@@ -1213,6 +1241,7 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n   const char *orig_arch_string = opts->x_ix86_arch_string;\n   const char *orig_tune_string = opts->x_ix86_tune_string;\n   enum fpmath_unit orig_fpmath_set = opts_set->x_ix86_fpmath;\n+  enum prefer_vector_width orig_pvw_set = opts_set->x_prefer_vector_width_type;\n   int orig_tune_defaulted = ix86_tune_defaulted;\n   int orig_arch_specified = ix86_arch_specified;\n   char *option_strings[IX86_FUNCTION_SPECIFIC_MAX] = { NULL, NULL };\n@@ -1238,7 +1267,8 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n       || opts->x_target_flags != def->x_target_flags\n       || option_strings[IX86_FUNCTION_SPECIFIC_ARCH]\n       || option_strings[IX86_FUNCTION_SPECIFIC_TUNE]\n-      || enum_opts_set.x_ix86_fpmath)\n+      || enum_opts_set.x_ix86_fpmath\n+      || enum_opts_set.x_prefer_vector_width_type)\n     {\n       /* If we are using the default tune= or arch=, undo the string assigned,\n \t and use the default.  */\n@@ -1257,6 +1287,8 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n       /* If fpmath= is not set, and we now have sse2 on 32-bit, use it.  */\n       if (enum_opts_set.x_ix86_fpmath)\n \topts_set->x_ix86_fpmath = (enum fpmath_unit) 1;\n+      if (enum_opts_set.x_prefer_vector_width_type)\n+\topts_set->x_prefer_vector_width_type = (enum prefer_vector_width) 1;\n \n       /* Do any overrides, such as arch=xxx, or tune=xxx support.  */\n       bool r = ix86_option_override_internal (false, opts, opts_set);\n@@ -1276,6 +1308,7 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n       opts->x_ix86_arch_string = orig_arch_string;\n       opts->x_ix86_tune_string = orig_tune_string;\n       opts_set->x_ix86_fpmath = orig_fpmath_set;\n+      opts_set->x_prefer_vector_width_type = orig_pvw_set;\n \n       release_options_strings (option_strings);\n     }"}, {"sha": "646d3d55515572983ef4e4385888dd0d78dd3d6d", "filename": "gcc/config/i386/i386-options.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.h?ref=46e6341fc824ee10bdd4975a2841f945017609dc", "patch": "@@ -25,7 +25,8 @@ extern int ix86_omp_device_kind_arch_isa (enum omp_device_kind_arch_isa trait,\n char *ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \t\t\t  int flags, int flags2,\n \t\t\t  const char *arch, const char *tune,\n-\t\t\t  enum fpmath_unit fpmath, bool add_nl_p,\n+\t\t\t  enum fpmath_unit fpmath,\n+\t\t\t  enum prefer_vector_width pvw, bool add_nl_p,\n \t\t\t  bool add_abi_p);\n \n extern enum attr_cpu ix86_schedule;"}, {"sha": "185a1d0686b9539c01a63dfce28239ab52d62d20", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=46e6341fc824ee10bdd4975a2841f945017609dc", "patch": "@@ -182,10 +182,6 @@ int x_ix86_tune_no_default\n TargetSave\n enum ix86_veclibabi x_ix86_veclibabi_type\n \n-;; -mprefer-vector-width=\n-TargetSave\n-enum prefer_vector_width x_prefer_vector_width_type\n-\n ;; x86 options\n m128bit-long-double\n Target RejectNegative Report Mask(128BIT_LONG_DOUBLE) Save\n@@ -595,7 +591,7 @@ Target Alias(mprefer-vector-width=, 128, 256)\n Use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer.\n \n mprefer-vector-width=\n-Target Report RejectNegative Joined Var(prefer_vector_width_type) Enum(prefer_vector_width) Init(PVW_NONE)\n+Target Report RejectNegative Joined Var(prefer_vector_width_type) Enum(prefer_vector_width) Init(PVW_NONE) Save\n Use given register vector width instructions instead of maximum register width in the auto-vectorizer.\n \n Enum"}, {"sha": "48493605dc88c276770f034051cba75cf9c688cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46e6341fc824ee10bdd4975a2841f945017609dc", "patch": "@@ -1,5 +1,8 @@\n 2020-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93089\n+\t* gcc.target/i386/pr93089-1.c: New test.\n+\n \tPR target/93110\n \t* gcc.dg/torture/pr93110.c: New test.\n "}, {"sha": "1b6f2eee974bb5db8f0125ede95033074c52cb8f", "filename": "gcc/testsuite/gcc.target/i386/pr93089-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93089-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e6341fc824ee10bdd4975a2841f945017609dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93089-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93089-1.c?ref=46e6341fc824ee10bdd4975a2841f945017609dc", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/93089 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512f -mtune=skylake-avx512\" } */\n+/* { dg-final { scan-assembler \"vmulps\\[^\\n\\r]*zmm\" } } */\n+/* { dg-final { scan-assembler-not \"vaddps\\[^\\n\\r]*zmm\" } } */\n+/* { dg-final { scan-assembler \"vaddps\\[^\\n\\r]*ymm\" } } */\n+\n+float a[16], b[16];\n+\n+__attribute__((target (\"prefer-vector-width=512\"))) void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < 16; ++i)\n+    b[i] = 3.0f * a[i];\n+}\n+\n+void\n+bar (void)\n+{\n+  int i;\n+  for (i = 0; i < 16; ++i)\n+    b[i] = 3.0f + a[i];\n+}"}]}