{"sha": "7121e32beac871f5fcd1a141c23844a41303efc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyMWUzMmJlYWM4NzFmNWZjZDFhMTQxYzIzODQ0YTQxMzAzZWZjNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-06-23T08:50:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-23T08:50:12Z"}, "message": "re PR target/66560 (Fails to generate ADDSUBPS)\n\n\tPR target/66560\n\t* config/i386/predicates.md (addsub_vm_operator): New predicate.\n\t(addsub_vs_operator): Ditto.\n\t(addsub_vs_parallel): Ditto.\n\t* config/i386/sse.md (ssedoublemode): Add V4SF and V2DF modes.\n\t(avx_addsubv4df3, avx_addsubv8sf3, sse3_addsubv2df3, sse3_addsubv4sf3):\n\tPut minus RTX before plus and adjust vec_merge selector.\n\t(*avx_addsubv4df3_1, *avx_addsubv4df3_1s, *sse3_addsubv2df3_1)\n\t(*sse_addsubv2df3_1s, *avx_addsubv8sf3_1, *avx_addsubv8sf3_1s)\n\t(*sse3_addsubv4sf3_1, *sse_addsubv4sf3_1s): Remove insn patterns.\n\t(addsub vec_merge splitters): New combiner splitters.\n\t(addsub vec_select/vec_concat splitters): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/66560\n\t* gcc.target/i386/pr66560-1.c: New test.\n\t* gcc.target/i386/pr66560-2.c: Ditto.\n\t* gcc.target/i386/pr66560-3.c: Ditto.\n\t* gcc.target/i386/pr66560-4.c: Ditto.\n\nFrom-SVN: r224824", "tree": {"sha": "3f45d6db406100cc28f0045d15e667e61159413d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f45d6db406100cc28f0045d15e667e61159413d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7121e32beac871f5fcd1a141c23844a41303efc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7121e32beac871f5fcd1a141c23844a41303efc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7121e32beac871f5fcd1a141c23844a41303efc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7121e32beac871f5fcd1a141c23844a41303efc5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31575896b2380fea53d76e24c2f811d4209253ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31575896b2380fea53d76e24c2f811d4209253ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31575896b2380fea53d76e24c2f811d4209253ae"}], "stats": {"total": 556, "additions": 395, "deletions": 161}, "files": [{"sha": "b514755f19bfe8488234c0877a735a608e89d2a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -1,3 +1,18 @@\n+2015-06-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66560\n+\t* config/i386/predicates.md (addsub_vm_operator): New predicate.\n+\t(addsub_vs_operator): Ditto.\n+\t(addsub_vs_parallel): Ditto.\n+\t* config/i386/sse.md (ssedoublemode): Add V4SF and V2DF modes.\n+\t(avx_addsubv4df3, avx_addsubv8sf3, sse3_addsubv2df3, sse3_addsubv4sf3):\n+\tPut minus RTX before plus and adjust vec_merge selector.\n+\t(*avx_addsubv4df3_1, *avx_addsubv4df3_1s, *sse3_addsubv2df3_1)\n+\t(*sse_addsubv2df3_1s, *avx_addsubv8sf3_1, *avx_addsubv8sf3_1s)\n+\t(*sse3_addsubv4sf3_1, *sse_addsubv4sf3_1s): Remove insn patterns.\n+\t(addsub vec_merge splitters): New combiner splitters.\n+\t(addsub vec_select/vec_concat splitters): Ditto.\n+\n 2015-06-23  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/66449"}, {"sha": "4e45246e069cc0d56dbe5d0a4e7aeef3b7691f9a", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -1426,8 +1426,105 @@\n   (and (match_code \"unspec_volatile\")\n        (match_test \"XINT (op, 1) == UNSPECV_VZEROUPPER\")))\n \n-;; Return true if OP is a parallel for a vbroadcast permute.\n+;; Return true if OP is an addsub vec_merge operation\n+(define_predicate \"addsub_vm_operator\"\n+  (match_code \"vec_merge\")\n+{\n+  rtx op0, op1;\n+  int swapped;\n+  HOST_WIDE_INT mask;\n+  int nunits, elt;\n+\n+  op0 = XEXP (op, 0);\n+  op1 = XEXP (op, 1);\n+\n+  /* Sanity check.  */\n+  if (GET_CODE (op0) == MINUS && GET_CODE (op1) == PLUS)\n+    swapped = 0;\n+  else if (GET_CODE (op0) == PLUS && GET_CODE (op1) == MINUS)\n+    swapped = 1;\n+  else\n+    gcc_unreachable ();\n+\n+  mask = INTVAL (XEXP (op, 2));\n+  nunits = GET_MODE_NUNITS (mode);\n+\n+  for (elt = 0; elt < nunits; elt++)\n+    {\n+      /* bit clear: take from op0, set: take from op1  */\n+      int bit = !(mask & (HOST_WIDE_INT_1U << elt));\n+\n+      if (bit != ((elt & 1) ^ swapped))\n+\treturn false;\n+    }\n+\n+  return true;\n+})\n+\n+;; Return true if OP is an addsub vec_select/vec_concat operation\n+(define_predicate \"addsub_vs_operator\"\n+  (and (match_code \"vec_select\")\n+       (match_code \"vec_concat\" \"0\"))\n+{\n+  rtx op0, op1;\n+  bool swapped;\n+  int nunits, elt;\n+\n+  op0 = XEXP (XEXP (op, 0), 0);\n+  op1 = XEXP (XEXP (op, 0), 1);\n+\n+  /* Sanity check.  */\n+  if (GET_CODE (op0) == MINUS && GET_CODE (op1) == PLUS)\n+    swapped = false;\n+  else if (GET_CODE (op0) == PLUS && GET_CODE (op1) == MINUS)\n+    swapped = true;\n+  else\n+    gcc_unreachable ();\n+\n+  nunits = GET_MODE_NUNITS (mode);\n+  if (XVECLEN (XEXP (op, 1), 0) != nunits)\n+    return false;\n+\n+  /* We already checked that permutation is suitable for addsub,\n+     so only look at the first element of the parallel.  */\n+  elt = INTVAL (XVECEXP (XEXP (op, 1), 0, 0));\n \n+  return elt == (swapped ? nunits : 0);\n+})\n+\n+;; Return true if OP is a parallel for an addsub vec_select.\n+(define_predicate \"addsub_vs_parallel\"\n+  (and (match_code \"parallel\")\n+       (match_code \"const_int\" \"a\"))\n+{\n+  int nelt = XVECLEN (op, 0);\n+  int elt, i;\n+  \n+  if (nelt < 2)\n+    return false;\n+\n+  /* Check that the permutation is suitable for addsub.\n+     For example, { 0 9 2 11 4 13 6 15 } or { 8 1 10 3 12 5 14 7 }.  */\n+  elt = INTVAL (XVECEXP (op, 0, 0));\n+  if (elt == 0)\n+    {\n+      for (i = 1; i < nelt; ++i)\n+\tif (INTVAL (XVECEXP (op, 0, i)) != (i + (i & 1) * nelt))\n+\t  return false;\n+    }\n+  else if (elt == nelt)\n+    {\n+      for (i = 1; i < nelt; ++i)\n+\tif (INTVAL (XVECEXP (op, 0, i)) != (elt + i - (i & 1) * nelt))\n+\t  return false;\n+    }\n+  else\n+    return false;\n+\n+  return true;\n+})\n+\n+;; Return true if OP is a parallel for a vbroadcast permute.\n (define_predicate \"avx_vbroadcast_operand\"\n   (and (match_code \"parallel\")\n        (match_code \"const_int\" \"a\"))"}, {"sha": "9c9581674514b52eb788a8da84fd1943ce3c4153", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 134, "deletions": 160, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -487,10 +487,12 @@\n    (V4SI \"v4di\")   (V8SI \"v8di\")   (V16SI \"v16di\")])\n \n (define_mode_attr ssedoublemode\n-  [(V16SF \"V32SF\") (V16SI \"V32SI\") (V8DI \"V16DI\") (V8DF \"V16DF\")\n-   (V8SF \"V16SF\") (V8SI \"V16SI\") (V4DI \"V8DI\") (V4DF \"V8DF\")\n-   (V16HI \"V16SI\") (V8HI \"V8SI\") (V4HI \"V4SI\") (V4SI \"V4DI\")\n-   (V32HI \"V32SI\") (V32QI \"V32HI\") (V16QI \"V16HI\") (V64QI \"V64HI\")])\n+  [(V4SF \"V8SF\") (V8SF \"V16SF\") (V16SF \"V32SF\")\n+   (V2DF \"V4DF\") (V4DF \"V8DF\") (V8DF \"V16DF\")\n+   (V16QI \"V16HI\") (V32QI \"V32HI\") (V64QI \"V64HI\")\n+   (V4HI \"V4SI\") (V8HI \"V8SI\") (V16HI \"V16SI\") (V32HI \"V32SI\")\n+   (V4SI \"V4DI\") (V8SI \"V16SI\") (V16SI \"V32SI\")\n+   (V4DI \"V8DI\") (V8DI \"V16DI\")])\n \n (define_mode_attr ssebytemode\n   [(V8DI \"V64QI\") (V4DI \"V32QI\") (V2DI \"V16QI\")])\n@@ -2021,43 +2023,11 @@\n (define_insn \"avx_addsubv4df3\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4DF\n-\t  (plus:V4DF\n+\t  (minus:V4DF\n \t    (match_operand:V4DF 1 \"register_operand\" \"x\")\n \t    (match_operand:V4DF 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (minus:V4DF (match_dup 1) (match_dup 2))\n-\t  (const_int 10)))]\n-  \"TARGET_AVX\"\n-  \"vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V4DF\")])\n-\n-(define_insn \"*avx_addsubv4df3_1\"\n-  [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n-  \t(vec_select:V4DF\n-\t  (vec_concat:V8DF\n-\t    (minus:V4DF\n-\t      (match_operand:V4DF 1 \"register_operand\" \"x\")\n-\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"xm\"))\n-\t    (plus:V4DF (match_dup 1) (match_dup 2)))\n-\t  (parallel [(const_int 0) (const_int 5)\n-\t\t     (const_int 2) (const_int 7)])))]\n-  \"TARGET_AVX\"\n-  \"vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V4DF\")])\n-\n-(define_insn \"*avx_addsubv4df3_1s\"\n-  [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n-  \t(vec_select:V4DF\n-\t  (vec_concat:V8DF\n-\t    (minus:V4DF\n-\t      (match_operand:V4DF 1 \"register_operand\" \"x\")\n-\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"xm\"))\n-\t    (plus:V4DF (match_dup 2) (match_dup 1)))\n-\t  (parallel [(const_int 0) (const_int 5)\n-\t\t     (const_int 2) (const_int 7)])))]\n+\t  (plus:V4DF (match_dup 1) (match_dup 2))\n+\t  (const_int 5)))]\n   \"TARGET_AVX\"\n   \"vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n@@ -2067,49 +2037,11 @@\n (define_insn \"sse3_addsubv2df3\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V2DF\n-\t  (plus:V2DF\n+\t  (minus:V2DF\n \t    (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n \t    (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\"))\n-\t  (minus:V2DF (match_dup 1) (match_dup 2))\n-\t  (const_int 2)))]\n-  \"TARGET_SSE3\"\n-  \"@\n-   addsubpd\\t{%2, %0|%0, %2}\n-   vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"atom_unit\" \"complex\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"V2DF\")])\n-\n-(define_insn \"*sse3_addsubv2df3_1\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n-\t(vec_select:V2DF\n-\t  (vec_concat:V4DF\n-\t    (minus:V2DF\n-\t      (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\"))\n-\t    (plus:V2DF (match_dup 1) (match_dup 2)))\n-\t  (parallel [(const_int 0) (const_int 3)])))]\n-  \"TARGET_SSE3\"\n-  \"@\n-   addsubpd\\t{%2, %0|%0, %2}\n-   vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"atom_unit\" \"complex\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"V2DF\")])\n-\n-(define_insn \"*sse3_addsubv2df3_1s\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n-\t(vec_select:V2DF\n-\t  (vec_concat:V4DF\n-\t    (minus:V2DF\n-\t      (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\"))\n-\t    (plus:V2DF (match_dup 2) (match_dup 1)))\n-\t  (parallel [(const_int 0) (const_int 3)])))]\n+\t  (plus:V2DF (match_dup 1) (match_dup 2))\n+\t  (const_int 1)))]\n   \"TARGET_SSE3\"\n   \"@\n    addsubpd\\t{%2, %0|%0, %2}\n@@ -2123,47 +2055,11 @@\n (define_insn \"avx_addsubv8sf3\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V8SF\n-\t  (plus:V8SF\n+\t  (minus:V8SF\n \t    (match_operand:V8SF 1 \"register_operand\" \"x\")\n \t    (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (minus:V8SF (match_dup 1) (match_dup 2))\n-\t  (const_int 170)))]\n-  \"TARGET_AVX\"\n-  \"vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n-\n-(define_insn \"*avx_addsubv8sf3_1\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n-\t(vec_select:V8SF\n-\t  (vec_concat:V16SF\n-\t    (minus:V8SF\n-\t      (match_operand:V8SF 1 \"register_operand\" \"x\")\n-\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n-\t    (plus:V8SF (match_dup 1) (match_dup 2)))\n-\t  (parallel [(const_int 0) (const_int 9)\n-\t\t     (const_int 2) (const_int 11)\n-\t\t     (const_int 4) (const_int 13)\n-\t\t     (const_int 6) (const_int 15)])))]\n-  \"TARGET_AVX\"\n-  \"vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n-\n-(define_insn \"*avx_addsubv8sf3_1s\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n-\t(vec_select:V8SF\n-\t  (vec_concat:V16SF\n-\t    (minus:V8SF\n-\t      (match_operand:V8SF 1 \"register_operand\" \"x\")\n-\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n-\t    (plus:V8SF (match_dup 2) (match_dup 1)))\n-\t  (parallel [(const_int 0) (const_int 9)\n-\t\t     (const_int 2) (const_int 11)\n-\t\t     (const_int 4) (const_int 13)\n-\t\t     (const_int 6) (const_int 15)])))]\n+\t  (plus:V8SF (match_dup 1) (match_dup 2))\n+\t  (const_int 85)))]\n   \"TARGET_AVX\"\n   \"vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n@@ -2173,11 +2069,11 @@\n (define_insn \"sse3_addsubv4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SF\n-\t  (plus:V4SF\n+\t  (minus:V4SF\n \t    (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n \t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n-\t  (minus:V4SF (match_dup 1) (match_dup 2))\n-\t  (const_int 10)))]\n+\t  (plus:V4SF (match_dup 1) (match_dup 2))\n+\t  (const_int 5)))]\n   \"TARGET_SSE3\"\n   \"@\n    addsubps\\t{%2, %0|%0, %2}\n@@ -2188,45 +2084,123 @@\n    (set_attr \"prefix_rep\" \"1,*\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"*sse3_addsubv4sf3_1\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n-\t(vec_select:V4SF\n-\t  (vec_concat:V8SF\n-\t    (minus:V4SF\n-\t      (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n-\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n-\t    (plus:V4SF (match_dup 1) (match_dup 2)))\n-\t  (parallel [(const_int 0) (const_int 5)\n-\t\t     (const_int 2) (const_int 7)])))]\n-  \"TARGET_SSE3\"\n-  \"@\n-   addsubps\\t{%2, %0|%0, %2}\n-   vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"prefix_rep\" \"1,*\")\n-   (set_attr \"mode\" \"V4SF\")])\n+(define_split\n+  [(set (match_operand:VF_128_256 0 \"register_operand\")\n+\t(match_operator:VF_128_256 6 \"addsub_vm_operator\"\n+\t  [(minus:VF_128_256\n+\t     (match_operand:VF_128_256 1 \"register_operand\")\n+\t     (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t   (plus:VF_128_256\n+\t     (match_operand:VF_128_256 3 \"nonimmediate_operand\")\n+\t     (match_operand:VF_128_256 4 \"nonimmediate_operand\"))\n+\t   (match_operand 5 \"const_int_operand\")]))]\n+  \"TARGET_SSE3\n+   && can_create_pseudo_p ()\n+   && ((rtx_equal_p (operands[1], operands[3])\n+\t&& rtx_equal_p (operands[2], operands[4]))\n+       || (rtx_equal_p (operands[1], operands[4])\n+\t   && rtx_equal_p (operands[2], operands[3])))\"\n+  [(set (match_dup 0)\n+\t(vec_merge:VF_128_256\n+\t  (minus:VF_128_256 (match_dup 1) (match_dup 2))\n+\t  (plus:VF_128_256 (match_dup 1) (match_dup 2))\n+\t  (match_dup 5)))])\n \n-(define_insn \"*sse3_addsubv4sf3_1s\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n-\t(vec_select:V4SF\n-\t  (vec_concat:V8SF\n-\t    (minus:V4SF\n-\t      (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n-\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n-\t    (plus:V4SF (match_dup 2) (match_dup 1)))\n-\t  (parallel [(const_int 0) (const_int 5)\n-\t\t     (const_int 2) (const_int 7)])))]\n-  \"TARGET_SSE3\"\n-  \"@\n-   addsubps\\t{%2, %0|%0, %2}\n-   vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"prefix_rep\" \"1,*\")\n-   (set_attr \"mode\" \"V4SF\")])\n+(define_split\n+  [(set (match_operand:VF_128_256 0 \"register_operand\")\n+\t(match_operator:VF_128_256 6 \"addsub_vm_operator\"\n+\t  [(plus:VF_128_256\n+\t     (match_operand:VF_128_256 1 \"nonimmediate_operand\")\n+\t     (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t   (minus:VF_128_256\n+\t     (match_operand:VF_128_256 3 \"register_operand\")\n+\t     (match_operand:VF_128_256 4 \"nonimmediate_operand\"))\n+\t   (match_operand 5 \"const_int_operand\")]))]\n+  \"TARGET_SSE3\n+   && can_create_pseudo_p ()\n+   && ((rtx_equal_p (operands[1], operands[3])\n+\t&& rtx_equal_p (operands[2], operands[4]))\n+       || (rtx_equal_p (operands[1], operands[4])\n+\t   && rtx_equal_p (operands[2], operands[3])))\"\n+  [(set (match_dup 0)\n+\t(vec_merge:VF_128_256\n+\t  (minus:VF_128_256 (match_dup 3) (match_dup 4))\n+\t  (plus:VF_128_256 (match_dup 3) (match_dup 4))\n+\t  (match_dup 5)))]\n+{\n+  /* Negate mask bits to compensate for swapped PLUS and MINUS RTXes.  */\n+  operands[5]\n+    = GEN_INT (~INTVAL (operands[5])\n+\t       & ((HOST_WIDE_INT_1U << GET_MODE_NUNITS (<MODE>mode)) - 1));\n+})\n+\n+(define_split\n+  [(set (match_operand:VF_128_256 0 \"register_operand\")\n+\t(match_operator:VF_128_256 7 \"addsub_vs_operator\"\n+\t  [(vec_concat:<ssedoublemode>\n+\t     (minus:VF_128_256\n+\t       (match_operand:VF_128_256 1 \"register_operand\")\n+\t       (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t     (plus:VF_128_256\n+\t       (match_operand:VF_128_256 3 \"nonimmediate_operand\")\n+\t       (match_operand:VF_128_256 4 \"nonimmediate_operand\")))\n+\t   (match_parallel 5 \"addsub_vs_parallel\"\n+\t     [(match_operand 6 \"const_int_operand\")])]))]\n+  \"TARGET_SSE3\n+   && can_create_pseudo_p ()\n+   && ((rtx_equal_p (operands[1], operands[3])\n+\t&& rtx_equal_p (operands[2], operands[4]))\n+       || (rtx_equal_p (operands[1], operands[4])\n+\t   && rtx_equal_p (operands[2], operands[3])))\"\n+  [(set (match_dup 0)\n+\t(vec_merge:VF_128_256\n+\t  (minus:VF_128_256 (match_dup 1) (match_dup 2))\n+\t  (plus:VF_128_256 (match_dup 1) (match_dup 2))\n+\t  (match_dup 5)))]\n+{\n+  int i, nelt = XVECLEN (operands[5], 0);\n+  HOST_WIDE_INT ival = 0;\n+\n+  for (i = 0; i < nelt; i++)\n+    if (INTVAL (XVECEXP (operands[5], 0, i)) < GET_MODE_NUNITS (<MODE>mode))\n+      ival |= HOST_WIDE_INT_1 << i;\n+\n+  operands[5] = GEN_INT (ival);\n+})\n+\n+(define_split\n+  [(set (match_operand:VF_128_256 0 \"register_operand\")\n+\t(match_operator:VF_128_256 7 \"addsub_vs_operator\"\n+\t  [(vec_concat:<ssedoublemode>\n+\t     (plus:VF_128_256\n+\t       (match_operand:VF_128_256 1 \"nonimmediate_operand\")\n+\t       (match_operand:VF_128_256 2 \"nonimmediate_operand\"))\n+\t     (minus:VF_128_256\n+\t       (match_operand:VF_128_256 3 \"register_operand\")\n+\t       (match_operand:VF_128_256 4 \"nonimmediate_operand\")))\n+\t   (match_parallel 5 \"addsub_vs_parallel\"\n+\t     [(match_operand 6 \"const_int_operand\")])]))]\n+  \"TARGET_SSE3\n+   && can_create_pseudo_p ()\n+   && ((rtx_equal_p (operands[1], operands[3])\n+\t&& rtx_equal_p (operands[2], operands[4]))\n+       || (rtx_equal_p (operands[1], operands[4])\n+\t   && rtx_equal_p (operands[2], operands[3])))\"\n+  [(set (match_dup 0)\n+\t(vec_merge:VF_128_256\n+\t  (minus:VF_128_256 (match_dup 3) (match_dup 4))\n+\t  (plus:VF_128_256 (match_dup 3) (match_dup 4))\n+\t  (match_dup 5)))]\n+{\n+  int i, nelt = XVECLEN (operands[5], 0);\n+  HOST_WIDE_INT ival = 0;\n+\n+  for (i = 0; i < nelt; i++)\n+    if (INTVAL (XVECEXP (operands[5], 0, i)) >= GET_MODE_NUNITS (<MODE>mode))\n+      ival |= HOST_WIDE_INT_1 << i;\n+\n+  operands[5] = GEN_INT (ival);\n+})\n \n (define_insn \"avx_h<plusminus_insn>v4df3\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")"}, {"sha": "8e2ab43089ec13aae66338ee81fdeb8e95fc294d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -1,3 +1,11 @@\n+2015-06-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66560\n+\t* gcc.target/i386/pr66560-1.c: New test.\n+\t* gcc.target/i386/pr66560-2.c: Ditto.\n+\t* gcc.target/i386/pr66560-3.c: Ditto.\n+\t* gcc.target/i386/pr66560-4.c: Ditto.\n+\n 2015-06-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gcc.target/nvptx/nvptx.exp: New file."}, {"sha": "b535ca7d7b388d31003b737ec699ca7606a06388", "filename": "gcc/testsuite/gcc.target/i386/pr66560-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-1.c?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/66560 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4\" } */\n+\n+typedef float v4sf __attribute__((vector_size(16)));\n+typedef int v4si __attribute__((vector_size(16)));\n+v4sf foo1 (v4sf x, v4sf y)\n+{\n+  v4sf tem0 = x - y;\n+  v4sf tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v4si) { 0, 5, 2, 7 });\n+}\n+\n+v4sf foo2 (v4sf x, v4sf y)\n+{\n+  v4sf tem0 = x - y;\n+  v4sf tem1 = y + x;\n+  return __builtin_shuffle (tem0, tem1, (v4si) { 0, 5, 2, 7 });\n+}\n+\n+v4sf foo3 (v4sf x, v4sf y)\n+{\n+  v4sf tem0 = x + y;\n+  v4sf tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v4si) { 4, 1, 6, 3 });\n+}\n+\n+v4sf foo4 (v4sf x, v4sf y)\n+{\n+  v4sf tem0 = y + x;\n+  v4sf tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v4si) { 4, 1, 6, 3 });\n+}\n+\n+/* { dg-final { scan-assembler-times \"addsubps\" 4 } } */"}, {"sha": "c308f3d19fb2d9ed8ef6cefcd822581eb65a7e84", "filename": "gcc/testsuite/gcc.target/i386/pr66560-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-2.c?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/66560 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4\" } */\n+\n+typedef double v2df __attribute__((vector_size(16)));\n+typedef long long v2di __attribute__((vector_size(16)));\n+v2df foo1 (v2df x, v2df y)\n+{\n+  v2df tem0 = x - y;\n+  v2df tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v2di) { 0, 3 });\n+}\n+\n+v2df foo2 (v2df x, v2df y)\n+{\n+  v2df tem0 = x - y;\n+  v2df tem1 = y + x;\n+  return __builtin_shuffle (tem0, tem1, (v2di) { 0, 3 });\n+}\n+\n+v2df foo3 (v2df x, v2df y)\n+{\n+  v2df tem0 = x + y;\n+  v2df tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v2di) { 2, 1 });\n+}\n+\n+v2df foo4 (v2df x, v2df y)\n+{\n+  v2df tem0 = y + x;\n+  v2df tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v2di) { 2, 1 });\n+}\n+\n+/* { dg-final { scan-assembler-times \"addsubpd\" 4 } } */"}, {"sha": "22f19d5ff130ffde80d92c151886fdb583f564e8", "filename": "gcc/testsuite/gcc.target/i386/pr66560-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-3.c?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/66560 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+typedef float v8sf __attribute__((vector_size(32)));\n+typedef int v8si __attribute__((vector_size(32)));\n+v8sf foo1 (v8sf x, v8sf y)\n+{\n+  v8sf tem0 = x - y;\n+  v8sf tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v8si) { 0, 9, 2, 11, 4, 13, 6, 15 });\n+}\n+\n+v8sf foo2 (v8sf x, v8sf y)\n+{\n+  v8sf tem0 = x - y;\n+  v8sf tem1 = y + x;\n+  return __builtin_shuffle (tem0, tem1, (v8si) { 0, 9, 2, 11, 4, 13, 6, 15 });\n+}\n+\n+v8sf foo3 (v8sf x, v8sf y)\n+{\n+  v8sf tem0 = x + y;\n+  v8sf tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v8si) { 8, 1, 10, 3, 12, 5, 14, 7 });\n+}\n+\n+v8sf foo4 (v8sf x, v8sf y)\n+{\n+  v8sf tem0 = y + x;\n+  v8sf tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v8si) { 8, 1, 10, 3, 12, 5, 14, 7 });\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddsubps\" 4 } } */"}, {"sha": "a8a6e907f959337aa29bcabc789b5e980c0896e5", "filename": "gcc/testsuite/gcc.target/i386/pr66560-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7121e32beac871f5fcd1a141c23844a41303efc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66560-4.c?ref=7121e32beac871f5fcd1a141c23844a41303efc5", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/66560 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+typedef double v4df __attribute__((vector_size(32)));\n+typedef long long v4di __attribute__((vector_size(32)));\n+v4df foo1 (v4df x, v4df y)\n+{\n+  v4df tem0 = x - y;\n+  v4df tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v4di) { 0, 5, 2, 7 });\n+}\n+\n+v4df foo2 (v4df x, v4df y)\n+{\n+  v4df tem0 = x - y;\n+  v4df tem1 = y + x;\n+  return __builtin_shuffle (tem0, tem1, (v4di) { 0, 5, 2, 7 });\n+}\n+\n+v4df foo3 (v4df x, v4df y)\n+{\n+  v4df tem0 = x + y;\n+  v4df tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v4di) { 4, 1, 6, 3 });\n+}\n+\n+v4df foo4 (v4df x, v4df y)\n+{\n+  v4df tem0 = y + x;\n+  v4df tem1 = x - y;\n+  return __builtin_shuffle (tem0, tem1, (v4di) { 4, 1, 6, 3 });\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddsubpd\" 4 } } */"}]}