{"sha": "0c5a1cbc0722b9c94daf1a87d51d7a078015a834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1YTFjYmMwNzIyYjljOTRkYWYxYTg3ZDUxZDdhMDc4MDE1YTgzNA==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-01-03T23:49:10Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-01-03T23:49:10Z"}, "message": "* intrinsic.texi: Various minor cleanups.\n\nFrom-SVN: r120409", "tree": {"sha": "d29dd1dedd03271e02329858eeb264801012a934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29dd1dedd03271e02329858eeb264801012a934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c5a1cbc0722b9c94daf1a87d51d7a078015a834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5a1cbc0722b9c94daf1a87d51d7a078015a834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5a1cbc0722b9c94daf1a87d51d7a078015a834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5a1cbc0722b9c94daf1a87d51d7a078015a834/comments", "author": null, "committer": null, "parents": [{"sha": "5b3e666315f8d173a883a778dc7b500730977cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3e666315f8d173a883a778dc7b500730977cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3e666315f8d173a883a778dc7b500730977cd5"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "92c423c8210e525827e6983ee01a8a0699662716", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5a1cbc0722b9c94daf1a87d51d7a078015a834/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5a1cbc0722b9c94daf1a87d51d7a078015a834/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0c5a1cbc0722b9c94daf1a87d51d7a078015a834", "patch": "@@ -1,3 +1,7 @@\n+2007-01-03  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi: Various minor cleanups.\n+\n 2007-01-02  Steven G. Kargl  <kargls@comcast.net>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_ibits): Fix call to"}, {"sha": "2e0194e6b971e3b8c96cbb47dd5ba82a5f06d41d", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5a1cbc0722b9c94daf1a87d51d7a078015a834/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5a1cbc0722b9c94daf1a87d51d7a078015a834/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=0c5a1cbc0722b9c94daf1a87d51d7a078015a834", "patch": "@@ -275,7 +275,7 @@ names for an intrinsic procedure the kind type parameter will be explicitly\n given (e.g., @code{REAL(KIND=4)} or @code{REAL(KIND=8)}).  Finally, for\n brevity the optional @code{KIND=} syntax will be omitted.\n \n-Many of the intrinsics procedures take one or more optional arguments.\n+Many of the intrinsic procedures take one or more optional arguments.\n This document follows the convention used in the Fortran 95 standard,\n and denotes such arguments by square brackets.\n \n@@ -291,7 +291,6 @@ cannot be intermixed in a given subprogram.  In the descriptions that follow,\n the applicable option(s) is noted.\n \n \n-\n @node ABORT\n @section @code{ABORT} --- Abort the program  \n @findex @code{ABORT} intrinsic\n@@ -329,7 +328,6 @@ end program test_abort\n @end table\n \n \n-\n @node ABS\n @section @code{ABS} --- Absolute value  \n @findex @code{ABS} intrinsic\n@@ -731,8 +729,7 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = AINT(X)} \n-@code{X = AINT(X, KIND)}\n+@code{X = AINT(X [, KIND])} \n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -791,8 +788,7 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL ALARM(SECONDS, HANDLER)} \n-@code{CALL ALARM(SECONDS, HANDLER, STATUS)}\n+@code{CALL ALARM(SECONDS, HANDLER [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -838,8 +834,7 @@ F95 and later\n transformational function\n \n @item @emph{Syntax}:\n-@code{L = ALL(MASK)} \n-@code{L = ALL(MASK, DIM)}\n+@code{L = ALL(MASK [, DIM])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3354,7 +3349,7 @@ Subroutine\n @end multitable\n \n @item @emph{Return value}:\n-The current date and time as a string.\n+The current date as a string.\n \n @item @emph{Example}:\n @smallexample\n@@ -3437,7 +3432,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL fget(C[,STATUS])}\n+@code{CALL FGET(C[,STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3492,7 +3487,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL fgetc(UNIT,C[,STATUS])}\n+@code{CALL FGETC(UNIT,C[,STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3665,7 +3660,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL fput(C[,STATUS])}\n+@code{CALL FPUT(C[,STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -3715,7 +3710,7 @@ GNU extension\n Non-elemental subroutine\n \n @item @emph{Syntax}:\n-@code{CALL fputc(UNIT,C[,STATUS])}\n+@code{CALL FPUTC(UNIT,C[,STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -4119,7 +4114,7 @@ GNU extension\n Non-elemental subroutine.\n \n @item @emph{Syntax}:\n-@code{CALL getcwd(CWD[,STATUS])}\n+@code{CALL GETCWD(CWD[,STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n@@ -5418,7 +5413,7 @@ GNU extension\n @item @emph{Specific names}:\n \n @item @emph{See also}:\n-@ref{INDEX}\n+@ref{INDEX}, @ref{LEN_TRIM}\n @end table\n \n \n@@ -5448,8 +5443,9 @@ Inquiry function\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{INTEGER(n)}, where @code{n} is the\n-size (in bytes) of a memory address on the target machine.\n+The return value is of type @code{INTEGER}, with a @code{KIND}\n+corresponding to the size (in bytes) of a memory address on the target\n+machine.\n \n @item @emph{Example}:\n @smallexample"}]}