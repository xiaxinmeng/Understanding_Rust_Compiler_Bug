{"sha": "661ee09b8ba949e88fcf085784e846b0254f0ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxZWUwOWI4YmE5NDllODhmY2YwODU3ODRlODQ2YjAyNTRmMGFjMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-15T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-15T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "9eef5716cc40746478614a11db78f02566c7b2d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eef5716cc40746478614a11db78f02566c7b2d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/661ee09b8ba949e88fcf085784e846b0254f0ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661ee09b8ba949e88fcf085784e846b0254f0ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661ee09b8ba949e88fcf085784e846b0254f0ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661ee09b8ba949e88fcf085784e846b0254f0ac0/comments", "author": null, "committer": null, "parents": [{"sha": "f00008b45ade9e63edf785838b34f5e55909af5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00008b45ade9e63edf785838b34f5e55909af5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00008b45ade9e63edf785838b34f5e55909af5e"}], "stats": {"total": 266, "additions": 265, "deletions": 1}, "files": [{"sha": "bb7a5750b672561c27d47891c6d46bc19bf1ec9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=661ee09b8ba949e88fcf085784e846b0254f0ac0", "patch": "@@ -1,3 +1,71 @@\n+2020-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/78257\n+\t* builtins.c (expand_builtin_memory_copy_args): Rename called function.\n+\t(expand_builtin_stpcpy_1): Remove argument from call.\n+\t(expand_builtin_memcmp): Rename called function.\n+\t(inline_expand_builtin_bytecmp): Same.\n+\t* expr.c (convert_to_bytes): New function.\n+\t(constant_byte_string): New function (formerly string_constant).\n+\t(string_constant): Call constant_byte_string.\n+\t(byte_representation): New function.\n+\t* expr.h (byte_representation): Declare.\n+\t* fold-const-call.c (fold_const_call): Rename called function.\n+\t* fold-const.c (c_getstr): Remove an argument.\n+\t(getbyterep): Define a new function.\n+\t* fold-const.h (c_getstr): Remove an argument.\n+\t(getbyterep): Declare a new function.\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Rename callee.\n+\t(gimple_fold_builtin_string_compare): Same.\n+\t(gimple_fold_builtin_memchr): Same.\n+\n+2020-08-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi (Overview): Add tip about how to get a\n+\tgimple dump if the analyzer ICEs.\n+\n+2020-08-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-builtin.def (__builtin_ia32_llwpcb)\n+\t(__builtin_ia32_slwpcb, __builtin_ia32_lwpval32)\n+\t(__builtin_ia32_lwpval64, __builtin_ia32_lwpins32)\n+\t(__builtin_ia32_lwpins64): Use CODE_FOR_nothing.\n+\t* config/i386/i386.md (@lwp_llwpcb<mode>):\n+\tImplement as parametrized name pattern.\n+\t(@lwp_slwpcb<mode>): Ditto.\n+\t(@lwp_lwpval<mode>): Ditto.\n+\t(@lwp_lwpins<mode>): Ditto.\n+\t* config/i386/i386-expand.c (ix86_expand_special_args_builtin)\n+\t[case VOID_FTYPE_UINT_UINT_UINT, case VOID_FTYPE_UINT64_UINT_UINT]\n+\t[case UCHAR_FTYPE_UINT_UINT_UINT, case UCHAR_FTYPE_UINT64_UINT_UINT]:\n+\tRemove.\n+\t(ix86_expand_builtin)\n+\t[ case IX86_BUILTIN_LLWPCB, case IX86_BUILTIN_LLWPCB]:\n+\tUpdate for parameterized name patterns.\n+\t[case IX86_BUILTIN_LWPVAL32, case IX86_BUILTIN_LWPVAL64]\n+\t[case IX86_BUILTIN_LWPINS32, case IX86_BUILTIN_LWPINS64]: Expand here.\n+\n+2020-08-14  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* common.opt: Add new option -fdiagnostics-plain-output.\n+\t* doc/invoke.texi: Document it.\n+\t* opts-common.c (decode_cmdline_options_to_array): Implement it.\n+\t(decode_cmdline_option): Add missing const qualifier to argv.\n+\n+2020-08-14  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\t    Jonathan Wakely   <jwakely@redhat.com>\n+\n+\t* system.h: Include type_traits.\n+\t* vec.h (vec<T, A, vl_embed>::embedded_size): Use offsetof and asserts\n+\ton vec_stdlayout, which is conditionally a vec (for standard layout T)\n+\tand otherwise vec_embedded.\n+\n+2020-08-14  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* config/csky/csky-elf.h (ASM_SPEC): Use mfloat-abi.\n+\t* config/csky/csky-linux-elf.h (ASM_SPEC): mfloat-abi.\n+\n 2020-08-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93032"}, {"sha": "e6ef660d478cc60f967e0175aceb4c93945fcab1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=661ee09b8ba949e88fcf085784e846b0254f0ac0", "patch": "@@ -1 +1 @@\n-20200814\n+20200815"}, {"sha": "906796523e305a34b616db2fc054a574832d0ba1", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=661ee09b8ba949e88fcf085784e846b0254f0ac0", "patch": "@@ -1,3 +1,22 @@\n+2020-08-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR testsuite/96609\n+\tPR analyzer/96616\n+\t* region-model.cc (region_model::get_store_value): Call\n+\tmaybe_get_constant_value on decl_regions first.\n+\t* region-model.h (decl_region::maybe_get_constant_value): New decl.\n+\t* region.cc (decl_region::get_stack_depth): Likewise.\n+\t(decl_region::maybe_get_constant_value): New.\n+\t* store.cc (get_subregion_within_ctor): New.\n+\t(binding_map::apply_ctor_to_region): New.\n+\t* store.h (binding_map::apply_ctor_to_region): New decl.\n+\n+2020-08-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96611\n+\t* store.cc (store::mark_as_escaped): Reject attempts to\n+\tget a cluster for an unknown pointer.\n+\n 2020-08-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93032"}, {"sha": "0244459e2b8d38aee8b488ee3a09dbda5fb90df3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=661ee09b8ba949e88fcf085784e846b0254f0ac0", "patch": "@@ -1,3 +1,126 @@\n+2020-08-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.h (lookup_name_real, lookup_name_nonclass): Rename\n+\tto ...\n+\t(lookup_name): ... these new overloads.\n+\t* name-lookup.c (identifier_type_value_1): Rename lookup_name_real\n+\tcall.\n+\t(lookup_name_real_1): Rename to ...\n+\t(lookup_name_1): ... here.\n+\t(lookup_name_real): Rename to ...\n+\t(lookup_name): ... here.  Rename lookup_name_real_1 call.\n+\t(lookup_name_nonclass): Delete.\n+\t* call.c (build_operator_new_call): Rename lookup_name_real call.\n+\t(add_operator_candidates): Likewise.\n+\t(build_op_delete_call): Rename lookup_name_nonclass call.\n+\t* parser.c (cp_parser_lookup_name): Likewise.\n+\t* pt.c (tsubst_friend_class, lookup_init_capture_pack): Likewise.\n+\t(tsubst_expr): Likewise.\n+\t* semantics.c (capture_decltype): Likewise.\n+\n+2020-08-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (LOOKUP_HIDDEN): Delete.\n+\t(LOOKUP_PREFER_RVALUE): Adjust initializer.\n+\t* name-lookup.h (enum class LOOK_want): Add HIDDEN_FRIEND and\n+\tHIDDEN_LAMBDA flags.\n+\t(lookup_name_real): Drop flags parm.\n+\t(lookup_qualified_name): Drop find_hidden parm.\n+\t* name-lookup.c (class name_lookup): Drop hidden field, adjust\n+\tctors.\n+\t(name_lookup::add_overload): Check want for hiddenness.\n+\t(name_lookup::process_binding): Likewise.\n+\t(name_lookup::search_unqualified): Likewise.\n+\t(identifier_type_value_1): Adjust lookup_name_real call.\n+\t(set_decl_namespace): Adjust name_lookup ctor.\n+\t(qualify_lookup): Drop flags parm, use want for hiddenness.\n+\t(lookup_qualified_name): Drop find_hidden parm.\n+\t(lookup_name_real_1): Drop flags parm, adjust qualify_lookup\n+\tcalls.\n+\t(lookup_name_real): Drop flags parm.\n+\t(lookup_name_nonclass, lookup_name): Adjust lookup_name_real\n+\tcalls.\n+\t(lookup_type_scope_1): Adjust qualify_lookup calls.\n+\t* call.c (build_operator_new_call): Adjust lookup_name_real call.\n+\t(add_operator_candidates): Likewise.\n+\t* coroutines.cc (morph_fn_to_coro): Adjust lookup_qualified_name\n+\tcall.\n+\t* parser.c (cp_parser_lookup_name): Adjust lookup_name_real calls.\n+\t* pt.c (check_explicit_specialization): Adjust\n+\tlookup_qualified_name call.\n+\t(deduction_guides_for): Likewise.\n+\t(tsubst_friend_class): Adjust lookup_name_real call.\n+\t(lookup_init_capture_pack): Likewise.\n+\t(tsubst_expr): Likewise, don't look in namespaces.\n+\t* semantics.c (capture_decltype): Adjust lookup_name_real.  Don't\n+\tlook in namespaces.\n+\n+2020-08-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90254\n+\tPR c++/93711\n+\t* cp-tree.h (unsafe_return_slot_p): Declare.\n+\t* call.c (is_base_field_ref): Rename to unsafe_return_slot_p.\n+\t(build_over_call): Check unsafe_return_slot_p.\n+\t(build_special_member_call): Likewise.\n+\t* init.c (expand_default_init): Likewise.\n+\t* typeck2.c (split_nonconstant_init_1): Likewise.\n+\n+2020-08-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (LOOKUP_PREFER_TYPES, LOOKUP_PREFER_NAMESPACES)\n+\t(LOOKUP_NAMESPACES_ONLY, LOOKUP_TYPES_ONLY)\n+\t(LOOKUP_QUALIFIERS_ONL): Delete.\n+\t(LOOKUP_HIDDEN): Adjust.\n+\t* name-lookup.h (enum class LOOK_want): New.\n+\t(operator|, operator&): Overloads for it.\n+\t(lookup_name_real): Replace prefer_type & namespaces_only with\n+\tLOOK_want parm.\n+\t(lookup_qualified_name): Replace prefer_type with LOOK_want.\n+\t(lookup_name_prefer_type): Replace with ...\n+\t(lookup_name): ... this.  New overload with LOOK_want parm.\n+\t* name-lookup.c (struct name_lookup): Replace flags with want and\n+\thidden fields.  Adjust constructors.\n+\t(name_lookyp::add_overload): Correct hidden stripping test.  Update\n+\tfor new LOOK_want type.\n+\t(name_lookup::process_binding): Likewise.\n+\t(name_lookup::search_unqualified): Use hidden flag.\n+\t(identifier_type_value_1): Adjust lookup_name_real call.\n+\t(set_decl_namespace): Adjust name_lookup ctor.\n+\t(lookup_flags): Delete.\n+\t(qualify_lookup): Add LOOK_want parm, adjust.\n+\t(lookup_qualified_name): Replace prefer_type parm with LOOK_want.\n+\t(lookup_name_real_1): Replace prefer_type and namespaces_only with\n+\tLOOK_want parm.\n+\t(lookup_name_real): Likewise.\n+\t(lookup_name_nonclass, lookup_name): Adjust lookup_name_real call.\n+\t(lookup_name_prefer_type): Rename to ...\n+\t(lookup_name): ... here.  New overload with LOOK_want parm.\n+\t(lookup_type_scope_1): Adjust qualify_lookup calls.\n+\t* call.c (build_operator_new_call)\n+\t(add_operator_candidates): Adjust lookup_name_real calls.\n+\t* coroutines.cc (find_coro_traits_template_decl)\n+\t(find_coro_handle_template_decl, morph_fn_to_coro): Adjust\n+\tlookup_qualified_name calls.\n+\t* cp-objcp-common.c (identifier_global_tag): Likewise.\n+\t* decl.c (get_tuple_size, get_tuple_decomp_init): Likewise.\n+\t(lookup_and_check_tag): Use lookup_name overload.\n+\t* parser.c (cp_parser_userdef_numeric_literal): Adjust\n+\tlookup_qualified_name call.\n+\t(prefer_arg_type): Drop template_mem_access parm, return LOOK_want\n+\tvalue.\n+\t(cp_parser_lookup_name): Adjust lookup_member, lookup_name_real\n+\tcalls.\n+\t* pt.c (check_explicit_specialization): Adjust lookup_qualified_name\n+\tcall.\n+\t(tsubst_copy_and_build, tsubst_qualified_name): Likewise\n+\t(deduction_guides_for): Likewise.\n+\t(tsubst_friend_class): Adjust lookup_name_real call.\n+\t(lookup_init_capture, tsubst_expr): Likewise.\n+\t* rtti.c (emit_support_tinfos): Adjust lookup_qualified_name call.\n+\t* semantics.c (omp_reduction_lookup): Likewise.\n+\t(capture_decltype): Adjust lookup_name_real call.\n+\n 2020-08-13  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.h (enum class LOOK_where): New."}, {"sha": "9e4e5891b173550d1081ec8ae46942c812e8c354", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661ee09b8ba949e88fcf085784e846b0254f0ac0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=661ee09b8ba949e88fcf085784e846b0254f0ac0", "patch": "@@ -1,3 +1,37 @@\n+2020-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/78257\n+\t* gcc.dg/memchr.c: New test.\n+\t* gcc.dg/memcmp-2.c: New test.\n+\t* gcc.dg/memcmp-3.c: New test.\n+\t* gcc.dg/memcmp-4.c: New test.\n+\n+2020-08-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96611\n+\t* gcc.dg/analyzer/pr96611.c: New test.\n+\n+2020-08-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90254\n+\tPR c++/93711\n+\t* g++.dg/cpp1z/aggr-base10.C: New test.\n+\t* g++.dg/cpp2a/no_unique_address7.C: New test.\n+\t* g++.dg/cpp2a/no_unique_address7a.C: New test.\n+\n+2020-08-14  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* lib/prune.exp: Change TEST_ALWAYS_FLAGS to use -fdiagnostics-plain-output.\n+\t* lib/c-compat.exp: Adapt to the prune.exp change.\n+\n+2020-08-14  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/torture/pr92088-1.c: Add require-effective-target alloca.\n+\t* gcc.dg/torture/pr92088-2.c: Same.\n+\t* gcc.dg/torture/pr93124.c: Same.\n+\t* gcc.dg/torture/pr94479.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-22.c: Same.\n+\n 2020-08-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96598"}, {"sha": "fbf238eb8bc7f70507a30e97629e480e69bc9054", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661ee09b8ba949e88fcf085784e846b0254f0ac0/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661ee09b8ba949e88fcf085784e846b0254f0ac0/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=661ee09b8ba949e88fcf085784e846b0254f0ac0", "patch": "@@ -1,3 +1,18 @@\n+2020-08-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_dependent_expr): Rename\n+\tlookup_name_real call.\n+\n+2020-08-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_dependent_exp): Adjust\n+\tlookup_name_real call.\n+\n+2020-08-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_dependent_expr): Adjust\n+\tlookup_name_real & lookup_qualified_name calls.\n+\n 2020-08-13  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_build_dependent_expr): Likewise."}, {"sha": "fe6884bf33771b3488453aa6d4b9040e9107332c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661ee09b8ba949e88fcf085784e846b0254f0ac0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661ee09b8ba949e88fcf085784e846b0254f0ac0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=661ee09b8ba949e88fcf085784e846b0254f0ac0", "patch": "@@ -1,3 +1,8 @@\n+2020-08-14  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* testsuite/lib/libstdc++.exp: Use the new option\n+\t-fdiagnostics-plain-output.\n+\n 2020-08-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_CHEADERS): Warn if the c_std"}]}