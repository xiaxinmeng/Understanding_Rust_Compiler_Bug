{"sha": "30a96b3b0c49394c861df8c07a7c506b95082937", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhOTZiM2IwYzQ5Mzk0Yzg2MWRmOGMwN2E3YzUwNmI5NTA4MjkzNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-06-10T17:10:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-06-10T17:10:42Z"}, "message": "*: Doxygen markup redo.\n\n2011-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/*: Doxygen markup redo.\n\t* include/Makefile.am: Fold in constructors_destructor_fn_imps.hpp.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r174917", "tree": {"sha": "74446e56ccc71502be50a655826c2c14ac161381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74446e56ccc71502be50a655826c2c14ac161381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a96b3b0c49394c861df8c07a7c506b95082937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a96b3b0c49394c861df8c07a7c506b95082937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a96b3b0c49394c861df8c07a7c506b95082937", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a96b3b0c49394c861df8c07a7c506b95082937/comments", "author": null, "committer": null, "parents": [{"sha": "0818c24cb0dde57da9431661b79cd7e299fc6cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0818c24cb0dde57da9431661b79cd7e299fc6cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0818c24cb0dde57da9431661b79cd7e299fc6cf9"}], "stats": {"total": 2674, "additions": 1294, "deletions": 1380}, "files": [{"sha": "f02cede550628cbbdbe0561a7053c42cc1242d24", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -1,3 +1,9 @@\n+2011-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/*: Doxygen markup redo.\n+\t* include/Makefile.am: Fold in constructors_destructor_fn_imps.hpp.\n+\t* include/Makefile.in: Regenerate.\n+\n 2011-06-10  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/20_util/bind/ref_neg.cc: Remove wrong test lines."}, {"sha": "6a21c162216fe242b6d53725384a67910f1d79ff", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -314,7 +314,6 @@ pb_headers2 = \\\n pb_headers3 = \\\n \t${pb_srcdir}/detail/cc_hash_table_map_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/cond_dealtor.hpp \\\n-\t${pb_srcdir}/detail/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/container_base_dispatch.hpp \\\n \t${pb_srcdir}/detail/eq_fn/eq_by_less.hpp \\\n \t${pb_srcdir}/detail/eq_fn/hash_eq_fn.hpp \\"}, {"sha": "5b05ef3fe6cc81ec4d4c9c9a082963da7e96a32a", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -564,7 +564,6 @@ pb_headers2 = \\\n pb_headers3 = \\\n \t${pb_srcdir}/detail/cc_hash_table_map_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/cond_dealtor.hpp \\\n-\t${pb_srcdir}/detail/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/container_base_dispatch.hpp \\\n \t${pb_srcdir}/detail/eq_fn/eq_by_less.hpp \\\n \t${pb_srcdir}/detail/eq_fn/hash_eq_fn.hpp \\"}, {"sha": "e31da0e442e98b2a4ba453ced9d72f7d80a4c7f9", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 375, "deletions": 151, "changes": 526, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -51,17 +51,47 @@\n namespace __gnu_pbds\n {\n   /**\n-   *  @addtogroup pbds\n+   *  @defgroup containers-pbds Containers\n+   *  @ingroup pbds\n    *  @{\n    */\n \n+  /**\n+   *  @defgroup hash-based\n+   *  @ingroup containers-pbds\n+   *  @{\n+   */\n #define PB_DS_HASH_BASE \\\n   detail::container_base_dispatch<Key, Mapped, _Alloc, Tag, \\\n     typename __gnu_cxx::typelist::append< \\\n     typename __gnu_cxx::typelist::create4<Hash_Fn, Eq_Fn, Resize_Policy, \\\n     detail::integral_constant<int, Store_Hash> >::type, Policy_Tl>::type>::type\n \n-  /// An abstract basic hash-based associative container.\n+  /**\n+   *  @defgroup hash-detail Base and Policy Classes\n+   *  @ingroup hash-based\n+   */\n+\n+  /**\n+   *  A hashed container abstraction.\n+   *\n+   *  @tparam Key \t    \tKey type.\n+   *  @tparam Mapped \t    \tMap type.\n+   *  @tparam Hash_Fn\t    \tHashing functor.\n+   *  @tparam Eq_Fn\t    \tEqual functor.\n+   *  @tparam Resize_Policy \tResizes hash.\n+   *  @tparam Store_Hash    \tIndicates whether the hash value\n+   *                            will be stored along with each key.\n+   *  @tparam Tag \t    \tInstantiating data structure type,\n+   *\t\t\t    \tsee container_tag.\n+   *  @tparam Policy_TL\t    \tPolicy typelist.\n+   *  @tparam _Alloc \t    \tAllocator type.\n+   *\n+   *  Base is dispatched at compile time via Tag, from the following\n+   *  choices: cc_hash_tag, gp_hash_tag, and descendants of basic_hash_tag.\n+   *\n+   *  Base choices are: detail::cc_ht_map, detail::gp_ht_map\n+   */\n   template<typename Key,\n \t   typename Mapped,\n \t   typename Hash_Fn,\n@@ -81,9 +111,49 @@ namespace __gnu_pbds\n     ~basic_hash_table() { }\n \n   protected:\n-#define PB_DS_CLASS_NAME basic_hash_table\n-#include <ext/pb_ds/detail/constructors_destructor_fn_imps.hpp>\n-#undef PB_DS_CLASS_NAME\n+    basic_hash_table() { }\n+\n+    basic_hash_table(const basic_hash_table& other)\n+    : base_type((const base_type&)other) { }\n+\n+    template<typename T0>\n+      basic_hash_table(T0 t0) : base_type(t0) { }\n+\n+    template<typename T0, typename T1>\n+      basic_hash_table(T0 t0, T1 t1) : base_type(t0, t1) { }\n+\n+    template<typename T0, typename T1, typename T2>\n+      basic_hash_table(T0 t0, T1 t1, T2 t2) : base_type(t0, t1, t2) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3>\n+      basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3)\n+      : base_type(t0, t1, t2, t3) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4>\n+      basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4)\n+      : base_type(t0, t1, t2, t3, t4) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t     typename T5>\n+      basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)\n+      : base_type(t0, t1, t2, t3, t4, t5) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t     typename T5, typename T6>\n+      basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)\n+      : base_type(t0, t1, t2, t3, t4, t5, t6) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t     typename T5, typename T6, typename T7>\n+      basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7)\n+      : base_type(t0, t1, t2, t3, t4, t5, t6, t7) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t     typename T5, typename T6, typename T7, typename T8>\n+      basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6,\n+\t\t       T7 t7, T8 t8)\n+      : base_type(t0, t1, t2, t3, t4, t5, t6, t7, t8)\n+      { }\n \n   private:\n     basic_hash_table&\n@@ -98,7 +168,31 @@ namespace __gnu_pbds\n \t\t   cc_hash_tag,\t\\\n \t  typename __gnu_cxx::typelist::create1<Comb_Hash_Fn>::type, _Alloc>\n \n-  /// A concrete collision-chaining hash-based associative container.\n+\n+  /**\n+   *  A collision-chaining hash-based associative container.\n+   *\n+   *  @tparam Key \t    \tKey type.\n+   *  @tparam Mapped \t    \tMap type.\n+   *  @tparam Hash_Fn\t    \tHashing functor.\n+   *  @tparam Eq_Fn\t    \tEqual functor.\n+   *  @tparam Comb_Hash_Fn\tCombining hash functor.\n+   *                            If Hash_Fn is not null_type, then this\n+   *                            is the ranged-hash functor; otherwise,\n+   *                            this is the range-hashing functor.\n+   *                    XXX(See Design::Hash-Based Containers::Hash Policies.)\n+   *  @tparam Resize_Policy \tResizes hash.\n+   *  @tparam Store_Hash    \tIndicates whether the hash value\n+   *                            will be stored along with each key.\n+   *                            If Hash_Fn is null_type, then the\n+   *                            container will not compile if this\n+   *                            value is true\n+   *  @tparam _Alloc \t    \tAllocator type.\n+   *\n+   *  Base tag choices are: \tcc_hash_tag.\n+   *\n+   *  Base is basic_hash_table.\n+   */\n   template<typename Key,\n \t   typename Mapped,\n \t   typename Hash_Fn = typename detail::default_hash_fn<Key>::type,\n@@ -119,86 +213,86 @@ namespace __gnu_pbds\n     typedef Resize_Policy \t\t\tresize_policy;\n     typedef Comb_Hash_Fn \t\t\tcomb_hash_fn;\n \n-    // Default constructor.\n+    /// Default constructor.\n     cc_hash_table() { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the Hash_Fn object of the container object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the Hash_Fn object of the container object.\n     cc_hash_table(const hash_fn& h)\n     : base_type(h) { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object, and\n-    // r_eq_fn will be copied by the eq_fn object of the container\n-    // object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object, and\n+    /// r_eq_fn will be copied by the eq_fn object of the container\n+    /// object.\n     cc_hash_table(const hash_fn& h, const eq_fn& e)\n     : base_type(h, e) { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object, r_eq_fn\n-    // will be copied by the eq_fn object of the container object, and\n-    // r_comb_hash_fn will be copied by the comb_hash_fn object of the\n-    // container object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object, r_eq_fn\n+    /// will be copied by the eq_fn object of the container object,\n+    /// and r_comb_hash_fn will be copied by the comb_hash_fn object\n+    /// of the container object.\n     cc_hash_table(const hash_fn& h, const eq_fn& e, const comb_hash_fn& ch)\n     : base_type(h, e, ch) { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object, r_eq_fn\n-    // will be copied by the eq_fn object of the container object,\n-    // r_comb_hash_fn will be copied by the comb_hash_fn object of the\n-    // container object, and r_resize_policy will be copied by the\n-    // resize_policy object of the container object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object, r_eq_fn\n+    /// will be copied by the eq_fn object of the container object,\n+    /// r_comb_hash_fn will be copied by the comb_hash_fn object of\n+    /// the container object, and r_resize_policy will be copied by\n+    /// the resize_policy object of the container object.\n     cc_hash_table(const hash_fn& h, const eq_fn& e, const comb_hash_fn& ch,\n \t\t  const resize_policy& rp)\n     : base_type(h, e, ch, rp) { }\n \n-    // Constructor taking __iterators to a range of value_types. The\n-    // value_types between first_it and last_it will be inserted into\n-    // the container object.\n+    /// Constructor taking __iterators to a range of value_types. The\n+    /// value_types between first_it and last_it will be inserted into\n+    /// the container object.\n     template<typename It>\n     cc_hash_table(It first, It last)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects. The value_types between first_it and\n-    // last_it will be inserted into the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects. The value_types between first_it and\n+    /// last_it will be inserted into the container object.\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h)\n     : base_type(h)\n     { this->copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object,\n-    // and r_eq_fn will be copied by the eq_fn object of the container\n-    // object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object,\n+    /// and r_eq_fn will be copied by the eq_fn object of the\n+    /// container object.\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e)\n     : base_type(h, e)\n     { this->copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object,\n-    // r_eq_fn will be copied by the eq_fn object of the container\n-    // object, and r_comb_hash_fn will be copied by the comb_hash_fn\n-    // object of the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object,\n+    /// r_eq_fn will be copied by the eq_fn object of the container\n+    /// object, and r_comb_hash_fn will be copied by the comb_hash_fn\n+    /// object of the container object.\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_hash_fn& ch)\n     : base_type(h, e, ch)\n     { this->copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object,\n-    // r_eq_fn will be copied by the eq_fn object of the container\n-    // object, r_comb_hash_fn will be copied by the comb_hash_fn\n-    // object of the container object, and r_resize_policy will be\n-    // copied by the resize_policy object of the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object,\n+    /// r_eq_fn will be copied by the eq_fn object of the container\n+    /// object, r_comb_hash_fn will be copied by the comb_hash_fn\n+    /// object of the container object, and r_resize_policy will be\n+    /// copied by the resize_policy object of the container object.\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_hash_fn& ch, const resize_policy& rp)\n@@ -236,7 +330,32 @@ namespace __gnu_pbds\n \t\t   gp_hash_tag, \\\n   typename __gnu_cxx::typelist::create2<Comb_Probe_Fn, Probe_Fn>::type, _Alloc>\n \n-  /// A concrete general-probing hash-based associative container.\n+\n+  /**\n+   *  A general-probing hash-based associative container.\n+   *\n+   *  @tparam Key \t    \tKey type.\n+   *  @tparam Mapped \t    \tMap type.\n+   *  @tparam Hash_Fn\t    \tHashing functor.\n+   *  @tparam Eq_Fn\t    \tEqual functor.\n+   *  @tparam Comb_Probe_Fn\tCombining probe functor.\n+   *                            If Hash_Fn is not null_type, then this\n+   *                            is the ranged-probe functor; otherwise,\n+   *                            this is the range-hashing functor.\n+   *                    XXX See Design::Hash-Based Containers::Hash Policies.\n+   *  @tparam Probe_Fn\t\tProbe functor.\n+   *  @tparam Resize_Policy \tResizes hash.\n+   *  @tparam Store_Hash    \tIndicates whether the hash value\n+   *                            will be stored along with each key.\n+   *                            If Hash_Fn is null_type, then the\n+   *                            container will not compile if this\n+   *                            value is true\n+   *  @tparam _Alloc \t    \tAllocator type.\n+   *\n+   *  Base tag choices are: \tgp_hash_tag.\n+   *\n+   *  Base is basic_hash_table.\n+   */\n   template<typename Key,\n \t   typename Mapped,\n \t   typename Hash_Fn = typename detail::default_hash_fn<Key>::type,\n@@ -259,114 +378,115 @@ namespace __gnu_pbds\n     typedef Probe_Fn \t\t\t\tprobe_fn;\n     typedef Resize_Policy \t\t\tresize_policy;\n \n-    // Default constructor.\n+    /// Default constructor.\n     gp_hash_table() { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object.\n     gp_hash_table(const hash_fn& h)\n     : base_type(h) { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object, and\n-    // r_eq_fn will be copied by the eq_fn object of the container\n-    // object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object, and\n+    /// r_eq_fn will be copied by the eq_fn object of the container\n+    /// object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e)\n     : base_type(h, e) { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object, r_eq_fn\n-    // will be copied by the eq_fn object of the container object, and\n-    // r_comb_probe_fn will be copied by the comb_probe_fn object of\n-    // the container object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object, r_eq_fn\n+    /// will be copied by the eq_fn object of the container object,\n+    /// and r_comb_probe_fn will be copied by the comb_probe_fn object\n+    /// of the container object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp)\n     : base_type(h, e, cp) { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object, r_eq_fn\n-    // will be copied by the eq_fn object of the container object,\n-    // r_comb_probe_fn will be copied by the comb_probe_fn object of\n-    // the container object, and r_probe_fn will be copied by the\n-    // probe_fn object of the container object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object, r_eq_fn\n+    /// will be copied by the eq_fn object of the container object,\n+    /// r_comb_probe_fn will be copied by the comb_probe_fn object of\n+    /// the container object, and r_probe_fn will be copied by the\n+    /// probe_fn object of the container object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp,\n \t\t  const probe_fn& p)\n     : base_type(h, e, cp, p) { }\n \n-    // Constructor taking some policy objects. r_hash_fn will be\n-    // copied by the hash_fn object of the container object, r_eq_fn\n-    // will be copied by the eq_fn object of the container object,\n-    // r_comb_probe_fn will be copied by the comb_probe_fn object of\n-    // the container object, r_probe_fn will be copied by the probe_fn\n-    // object of the container object, and r_resize_policy will be\n-    // copied by the Resize_Policy object of the container object.\n+    /// Constructor taking some policy objects. r_hash_fn will be\n+    /// copied by the hash_fn object of the container object, r_eq_fn\n+    /// will be copied by the eq_fn object of the container object,\n+    /// r_comb_probe_fn will be copied by the comb_probe_fn object of\n+    /// the container object, r_probe_fn will be copied by the\n+    /// probe_fn object of the container object, and r_resize_policy\n+    /// will be copied by the Resize_Policy object of the container\n+    /// object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp,\n \t\t  const probe_fn& p, const resize_policy& rp)\n     : base_type(h, e, cp, p, rp) { }\n \n-    // Constructor taking __iterators to a range of value_types. The\n-    // value_types between first_it and last_it will be inserted into\n-    // the container object.\n+    /// Constructor taking __iterators to a range of value_types. The\n+    /// value_types between first_it and last_it will be inserted into\n+    /// the container object.\n     template<typename It>\n     gp_hash_table(It first, It last)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects. The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects. The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object.\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h)\n     : base_type(h)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects. The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object,\n-    // and r_eq_fn will be copied by the eq_fn object of the container\n-    // object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects. The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object,\n+    /// and r_eq_fn will be copied by the eq_fn object of the\n+    /// container object.\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e)\n     : base_type(h, e)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects. The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object,\n-    // r_eq_fn will be copied by the eq_fn object of the container\n-    // object, and r_comb_probe_fn will be copied by the comb_probe_fn\n-    // object of the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects. The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object,\n+    /// r_eq_fn will be copied by the eq_fn object of the container\n+    /// object, and r_comb_probe_fn will be copied by the\n+    /// comb_probe_fn object of the container object.\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_probe_fn& cp)\n     : base_type(h, e, cp)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects. The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object,\n-    // r_eq_fn will be copied by the eq_fn object of the container\n-    // object, r_comb_probe_fn will be copied by the comb_probe_fn\n-    // object of the container object, and r_probe_fn will be copied\n-    // by the probe_fn object of the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects. The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object,\n+    /// r_eq_fn will be copied by the eq_fn object of the container\n+    /// object, r_comb_probe_fn will be copied by the comb_probe_fn\n+    /// object of the container object, and r_probe_fn will be copied\n+    /// by the probe_fn object of the container object.\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_probe_fn& cp, const probe_fn& p)\n     : base_type(h, e, cp, p)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects. The value_types between first_it and\n-    // last_it will be inserted into the container object. r_hash_fn\n-    // will be copied by the hash_fn object of the container object,\n-    // r_eq_fn will be copied by the eq_fn object of the container\n-    // object, r_comb_probe_fn will be copied by the comb_probe_fn\n-    // object of the container object, r_probe_fn will be copied by\n-    // the probe_fn object of the container object, and\n-    // r_resize_policy will be copied by the resize_policy object of\n-    // the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects. The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_hash_fn\n+    /// will be copied by the hash_fn object of the container object,\n+    /// r_eq_fn will be copied by the eq_fn object of the container\n+    /// object, r_comb_probe_fn will be copied by the comb_probe_fn\n+    /// object of the container object, r_probe_fn will be copied by\n+    /// the probe_fn object of the container object, and\n+    /// r_resize_policy will be copied by the resize_policy object of\n+    /// the container object.\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_probe_fn& cp, const probe_fn& p,\n@@ -396,13 +516,40 @@ namespace __gnu_pbds\n     swap(gp_hash_table& other)\n     { base_type::swap(other); }\n   };\n-\n+  //@} hash-based\n #undef PB_DS_GP_HASH_BASE\n \n+\n+  /**\n+   *  @defgroup branch-based\n+   *  @ingroup containers-pbds\n+   *  @{\n+   */\n #define PB_DS_BRANCH_BASE \\\n   detail::container_base_dispatch<Key, Mapped, _Alloc, Tag, Policy_Tl>::type\n \n-  /// An abstract basic tree-like (tree, trie) associative container.\n+  /**\n+   *  @defgroup branch-detail Base and Policy Classes\n+   *  @ingroup branch-based\n+   */\n+\n+  /**\n+   *  A branched, tree-like (tree, trie) container abstraction.\n+   *\n+   *  @tparam Key \t  \tKey type.\n+   *  @tparam Mapped \t  \tMap type.\n+   *  @tparam Tag \t  \tInstantiating data structure type,\n+   *                            see container_tag.\n+   *  @tparam Node_Update \tUpdates nodes, restores invariants.\n+   *  @tparam Policy_TL         Policy typelist.\n+   *  @tparam _Alloc \t  \tAllocator type.\n+   *\n+   *  Base is dispatched at compile time via Tag, from the following\n+   *  choices: tree_tag, trie_tag, and their descendants.\n+   *\n+   *  Base choices are: detail::ov_tree_map, detail::rb_tree_map,\n+   *\t\t       \tdetail::splay_tree_map, and detail::pat_trie_map.\n+   */\n   template<typename Key, typename Mapped, typename Tag,\n \t   typename Node_Update, typename Policy_Tl, typename _Alloc>\n   class basic_branch : public PB_DS_BRANCH_BASE\n@@ -417,11 +564,38 @@ namespace __gnu_pbds\n     ~basic_branch() { }\n \n   protected:\n-#define PB_DS_CLASS_NAME \t\tbasic_branch\n-#include <ext/pb_ds/detail/constructors_destructor_fn_imps.hpp>\n-#undef PB_DS_CLASS_NAME\n-  };\n+    basic_branch() { }\n+\n+    basic_branch(const basic_branch& other)\n+    : base_type((const base_type&)other) { }\n \n+    template<typename T0>\n+      basic_branch(T0 t0) : base_type(t0) { }\n+\n+    template<typename T0, typename T1>\n+      basic_branch(T0 t0, T1 t1) : base_type(t0, t1) { }\n+\n+    template<typename T0, typename T1, typename T2>\n+      basic_branch(T0 t0, T1 t1, T2 t2) : base_type(t0, t1, t2) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3>\n+      basic_branch(T0 t0, T1 t1, T2 t2, T3 t3)\n+      : base_type(t0, t1, t2, t3) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4>\n+      basic_branch(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4)\n+      : base_type(t0, t1, t2, t3, t4) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t     typename T5>\n+      basic_branch(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)\n+      : base_type(t0, t1, t2, t3, t4, t5) { }\n+\n+    template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t     typename T5, typename T6>\n+      basic_branch(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)\n+      : base_type(t0, t1, t2, t3, t4, t5, t6) { }\n+  };\n #undef PB_DS_BRANCH_BASE\n \n \n@@ -434,7 +608,24 @@ namespace __gnu_pbds\n \t       typename __gnu_cxx::typelist::create2<Cmp_Fn, \\\n \t       PB_DS_TREE_NODE_AND_IT_TRAITS>::type, _Alloc>\n \n-  /// A basic tree-based associative container.\n+\n+  /**\n+   *  A tree-based container.\n+   *\n+   *  @tparam Key \t \tKey type.\n+   *  @tparam Mapped \t \tMap type.\n+   *  @tparam Cmp_Fn\t \tComparison functor.\n+   *  @tparam Tag \t \tInstantiating data structure type,\n+   *                            see container_tag.\n+   *  @tparam Node_Update \tUpdates nodes,\n+   *                            restores invariants when invalidated.\n+   *                     XXX See design::tree-based-containers::node invariants.\n+   *  @tparam _Alloc \t \tAllocator type.\n+   *\n+   *  Base tag choices are: ov_tree_tag, rb_tree_tag, splay_tree_tag.\n+   *\n+   *  Base is basic_branch.\n+   */\n   template<typename Key, typename Mapped, typename Cmp_Fn = std::less<Key>,\n \t   typename Tag = rb_tree_tag,\n \t   template<typename Node_CItr, typename Node_Itr,\n@@ -447,30 +638,30 @@ namespace __gnu_pbds\n     typedef PB_DS_TREE_BASE \t\t\tbase_type;\n \n   public:\n-    // Comparison functor type.\n+    /// Comparison functor type.\n     typedef Cmp_Fn \t\t\t\tcmp_fn;\n \n     tree() { }\n \n-    // Constructor taking some policy objects. r_cmp_fn will be copied\n-    // by the Cmp_Fn object of the container object.\n+    /// Constructor taking some policy objects. r_cmp_fn will be\n+    /// copied by the Cmp_Fn object of the container object.\n     tree(const cmp_fn& c)\n     : base_type(c) { }\n \n-    // Constructor taking __iterators to a range of value_types. The\n-    // value_types between first_it and last_it will be inserted into\n-    // the container object.\n+    /// Constructor taking __iterators to a range of value_types. The\n+    /// value_types between first_it and last_it will be inserted into\n+    /// the container object.\n     template<typename It>\n     tree(It first, It last)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects The value_types between first_it and\n-    // last_it will be inserted into the container object. r_cmp_fn\n-    // will be copied by the cmp_fn object of the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_cmp_fn\n+    /// will be copied by the cmp_fn object of the container object.\n     template<typename It>\n     tree(It first, It last, const cmp_fn& c)\n-      : base_type(c)\n+    : base_type(c)\n     { base_type::copy_from_range(first, last); }\n \n     tree(const tree& other)\n@@ -508,7 +699,24 @@ namespace __gnu_pbds\n \t       typename __gnu_cxx::typelist::create2<_ATraits, \\\n \t       PB_DS_TRIE_NODE_AND_IT_TRAITS >::type, _Alloc>\n \n-  /// A basic trie-based associative container.\n+\n+  /**\n+   *  A trie-based container.\n+   *\n+   *  @tparam Key \t  \tKey type.\n+   *  @tparam Mapped \t  \tMap type.\n+   *  @tparam _ATraits\t  \tElement access traits.\n+   *  @tparam Tag \t  \tInstantiating data structure type,\n+   *                            see container_tag.\n+   *  @tparam Node_Update \tUpdates nodes,\n+   *                            restores invariants when invalidated.\n+   *                     XXX See design::tree-based-containers::node invariants.\n+   *  @tparam _Alloc \t  \tAllocator type.\n+   *\n+   *  Base tag choice is pat_trie_tag.\n+   *\n+   *  Base is basic_branch.\n+   */\n   template<typename Key,\n \t   typename Mapped,\n \t   typename _ATraits = \\\n@@ -526,27 +734,26 @@ namespace __gnu_pbds\n     typedef PB_DS_TRIE_BASE\t\t\tbase_type;\n \n   public:\n-    // Element access traits type.\n+    /// Element access traits type.\n     typedef _ATraits \t\t\t\taccess_traits;\n \n     trie() { }\n \n-    // Constructor taking some policy objects. r_access_traits will\n-    // be copied by the _ATraits object of the container\n-    // object.\n+    /// Constructor taking some policy objects. r_access_traits will\n+    /// be copied by the _ATraits object of the container object.\n     trie(const access_traits& t)\n     : base_type(t) { }\n \n-    // Constructor taking __iterators to a range of value_types. The\n-    // value_types between first_it and last_it will be inserted into\n-    // the container object.\n+    /// Constructor taking __iterators to a range of value_types. The\n+    /// value_types between first_it and last_it will be inserted into\n+    /// the container object.\n     template<typename It>\n     trie(It first, It last)\n     { base_type::copy_from_range(first, last); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects. The value_types between first_it and\n-    // last_it will be inserted into the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects. The value_types between first_it and\n+    /// last_it will be inserted into the container object.\n     template<typename It>\n     trie(It first, It last, const access_traits& t)\n     : base_type(t)\n@@ -573,16 +780,33 @@ namespace __gnu_pbds\n     swap(trie& other)\n     { base_type::swap(other); }\n   };\n-\n+  //@} branch-based\n #undef PB_DS_TRIE_BASE\n #undef PB_DS_TRIE_NODE_AND_IT_TRAITS\n \n \n+  /**\n+   *  @defgroup list-based\n+   *  @ingroup containers-pbds\n+   *  @{\n+   */\n #define PB_DS_LU_BASE \\\n   detail::container_base_dispatch<Key, Mapped, _Alloc, list_update_tag,\t\\\n     typename __gnu_cxx::typelist::create2<Eq_Fn, Update_Policy>::type>::type\n \n-  /// A list-update based associative container.\n+\n+  /**\n+   *  A list-update based associative container.\n+   *\n+   *  @tparam Key \t    \tKey type.\n+   *  @tparam Mapped \t    \tMap type.\n+   *  @tparam Eq_Fn\t    \tEqual functor.\n+   *  @tparam Update_Policy\tUpdate policy, determines when an element\n+   *                            will be moved to the front of the list.\n+   *  @tparam _Alloc \t    \tAllocator type.\n+   *\n+   *  Base is detail::lu_map.\n+   */\n   template<typename Key,\n \t   typename Mapped,\n \t   class Eq_Fn = typename detail::default_eq_fn<Key>::type,\n@@ -600,9 +824,9 @@ namespace __gnu_pbds\n \n     list_update() { }\n \n-    // Constructor taking __iterators to a range of value_types. The\n-    // value_types between first_it and last_it will be inserted into\n-    // the container object.\n+    /// Constructor taking __iterators to a range of value_types. The\n+    /// value_types between first_it and last_it will be inserted into\n+    /// the container object.\n     template<typename It>\n     list_update(It first, It last)\n     { base_type::copy_from_range(first, last); }\n@@ -628,10 +852,10 @@ namespace __gnu_pbds\n     swap(list_update& other)\n     { base_type::swap(other); }\n   };\n-\n+  //@} list-based\n #undef PB_DS_LU_BASE\n \n-  // @} group pbds\n+  // @} group containers-pbds\n } // namespace __gnu_pbds\n \n #endif"}, {"sha": "0ca90dbc791e7ffc85af978d5d2475df59a6a096", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_tree_policy/basic_tree_policy_base.hpp", "status": "removed", "additions": 0, "deletions": 173, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fbasic_tree_policy_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fbasic_tree_policy_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fbasic_tree_policy_base.hpp?ref=0818c24cb0dde57da9431661b79cd7e299fc6cf9", "patch": "@@ -1,173 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file basic_tree_policy_base.hpp\n- * Contains a base class for tree_like policies.\n- */\n-\n-#ifndef PB_DS_TREE_LIKE_POLICY_BASE_HPP\n-#define PB_DS_TREE_LIKE_POLICY_BASE_HPP\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    basic_tree_policy_base<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\tConst_Node_Iterator, \\\n-\t\t\t\t\t\t\tNode_Iterator,\t\\\n-\t\t\t\t\t\t\tAllocator>\n-\n-    template<typename Const_Node_Iterator,\n-\t     typename Node_Iterator,\n-\t     typename Allocator>\n-    struct basic_tree_policy_base\n-    {\n-    protected:\n-      typedef typename Node_Iterator::value_type it_type;\n-\n-      typedef typename std::iterator_traits< it_type>::value_type value_type;\n-\n-      typedef typename value_type::first_type key_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tkey_type>::type>::other::const_reference\n-      const_key_reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tvalue_type>::type>::other::const_reference\n-      const_reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tvalue_type>::type>::other::reference\n-      reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tvalue_type>::type>::other::const_pointer\n-      const_pointer;\n-\n-      static inline const_key_reference\n-      extract_key(const_reference r_val)\n-      {\n-\treturn (r_val.first);\n-      }\n-\n-      virtual it_type\n-      end() = 0;\n-\n-      it_type\n-      end_iterator() const\n-      {\n-\treturn (const_cast<PB_DS_CLASS_C_DEC* >(this)->end());\n-      }\n-\n-      virtual\n-      ~basic_tree_policy_base()\n-      { }\n-    };\n-\n-    template<typename Const_Node_Iterator, typename Allocator>\n-    struct basic_tree_policy_base<\n-      Const_Node_Iterator,\n-      Const_Node_Iterator,\n-      Allocator>\n-    {\n-    protected:\n-      typedef typename Const_Node_Iterator::value_type it_type;\n-\n-      typedef typename std::iterator_traits< it_type>::value_type value_type;\n-\n-      typedef value_type key_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tkey_type>::type>::other::const_reference\n-      const_key_reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tvalue_type>::type>::other::const_reference\n-      const_reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tvalue_type>::type>::other::reference\n-      reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\ttypename remove_const<\n-\tvalue_type>::type>::other::const_pointer\n-      const_pointer;\n-\n-      static inline const_key_reference\n-      extract_key(const_reference r_val)\n-      {\n-\treturn (r_val);\n-      }\n-\n-      virtual it_type\n-      end() const = 0;\n-\n-      it_type\n-      end_iterator() const\n-      {\n-\treturn (end());\n-      }\n-\n-      virtual\n-      ~basic_tree_policy_base()\n-      { }\n-    };\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif // #ifndef PB_DS_TREE_LIKE_POLICY_BASE_HPP"}, {"sha": "e600f2ca36e7911733fc699e05c1193bc5e3ff91", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_tree_policy/null_node_metadata.hpp", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp?ref=0818c24cb0dde57da9431661b79cd7e299fc6cf9", "patch": "@@ -1,67 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file null_node_metadata.hpp\n- * Contains an implementation class for tree-like classes.\n- */\n-\n-#ifndef PB_DS_0_NODE_METADATA_HPP\n-#define PB_DS_0_NODE_METADATA_HPP\n-\n-#include <ext/pb_ds/detail/types_traits.hpp>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-    template<typename Key, class Data, class Allocator>\n-    struct dumconst_node_iterator\n-    {\n-    private:\n-      typedef typename types_traits<Key, Data, Allocator, false>::pointer const_iterator;\n-\n-    public:\n-      typedef const_iterator value_type;\n-      typedef const_iterator const_reference;\n-      typedef const_reference reference;\n-    };\n-\n-    struct null_node_metadata\n-    { };\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif "}, {"sha": "d245127c875c1d6e6ba41aea14bff00e5c4fa770", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_tree_policy/traits.hpp", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Ftraits.hpp?ref=0818c24cb0dde57da9431661b79cd7e299fc6cf9", "patch": "@@ -1,92 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file traits.hpp\n- * Contains an implementation class for tree-like classes.\n- */\n-\n-#ifndef PB_DS_NODE_AND_IT_TRAITS_HPP\n-#define PB_DS_NODE_AND_IT_TRAITS_HPP\n-\n-#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n-\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n-\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n-\t\t\t   ,__file,__line)\n-\n-#include <ext/pb_ds/detail/types_traits.hpp>\n-#include <ext/pb_ds/detail/bin_search_tree_/traits.hpp>\n-#include <ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp>\n-#include <ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {    \n-    template<typename Key,\n-\t     typename Data,\n-\t     class Cmp_Fn,\n-\t     template<typename Const_Node_Iterator,\n-\t\t      class Node_Iterator,\n-\t\t      class Cmp_Fn_,\n-\t\t      class Allocator>\n-    class Node_Update,\n-\t     class Tag,\n-\t     class Allocator>\n-    struct tree_traits;\n-\n-    template<typename Key,\n-\t     typename Data,\n-\t     class E_Access_Traits,\n-\t     template<typename Const_Node_Iterator,\n-\t\t      class Node_Iterator,\n-\t\t      class E_Access_Traits_,\n-\t\t      class Allocator>\n-    class Node_Update,\n-\t     class Tag,\n-\t     class Allocator>\n-    struct trie_traits;\n-\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#include <ext/pb_ds/detail/rb_tree_map_/traits.hpp>\n-#include <ext/pb_ds/detail/splay_tree_/traits.hpp>\n-#include <ext/pb_ds/detail/ov_tree_map_/traits.hpp>\n-#include <ext/pb_ds/detail/pat_trie_/traits.hpp>\n-#undef PB_DS_DEBUG_VERIFY\n-\n-#endif // #ifndef PB_DS_NODE_AND_IT_TRAITS_HPP"}, {"sha": "4f847083ba7d91e2347901d0e9e064bcfefd1825", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -237,15 +237,23 @@ namespace __gnu_pbds\n       inline const_reverse_iterator\n       rend() const;\n \n+      /// Returns a const node_iterator corresponding to the node at the\n+      /// root of the tree.\n       inline node_const_iterator\n       node_begin() const;\n \n+      /// Returns a node_iterator corresponding to the node at the\n+      /// root of the tree.\n       inline node_iterator\n       node_begin();\n \n+      /// Returns a const node_iterator corresponding to a node just\n+      /// after a leaf of the tree.\n       inline node_const_iterator\n       node_end() const;\n \n+      /// Returns a node_iterator corresponding to a node just\n+      /// after a leaf of the tree.\n       inline node_iterator\n       node_end();\n "}, {"sha": "8fa80b73b7898c961a9f934f2fac2938baa00140", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp", "status": "modified", "additions": 47, "deletions": 83, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -47,12 +47,8 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-#define PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\t\t\t\\\n-    bin_search_tree_const_node_it_<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tNode,\t\t\\\n-\t\t\t\t\t\t\tConst_Iterator,\t\\\n-\t\t\t\t\t\t\tIterator,\t\\\n-\t\t\t\t\t\t\t_Alloc>\n+#define PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC \\\n+    bin_search_tree_const_node_it_<Node, Const_Iterator, Iterator, _Alloc>\n \n     /// Const node iterator.\n     template<typename Node,\n@@ -68,99 +64,76 @@ namespace __gnu_pbds\n       node_pointer;\n \n     public:\n-      // Category.\n+      /// Category.\n       typedef trivial_iterator_tag iterator_category;\n \n-      // Difference type.\n+      /// Difference type.\n       typedef trivial_iterator_difference_type difference_type;\n \n-      // __Iterator's value type.\n+      /// Iterator's value type.\n       typedef Const_Iterator value_type;\n \n-      // __Iterator's reference type.\n+      /// Iterator's reference type.\n       typedef Const_Iterator reference;\n \n-      // __Iterator's __const reference type.\n+      /// Iterator's __const reference type.\n       typedef Const_Iterator const_reference;\n \n-      // Metadata type.\n+      /// Metadata type.\n       typedef typename Node::metadata_type metadata_type;\n \n-      // Const metadata reference type.\n+      /// Const metadata reference type.\n       typedef\n-      typename _Alloc::template rebind<\n-\tmetadata_type>::other::const_reference\n+      typename _Alloc::template rebind<metadata_type>::other::const_reference\n       metadata_const_reference;\n \n-      // Default constructor.\n-      /*\n-\tinline\n-\tbin_search_tree_const_node_it_()\n-      */\n \n-      inline\n-      bin_search_tree_const_node_it_(const node_pointer p_nd = 0) \n+      bin_search_tree_const_node_it_(const node_pointer p_nd = 0)\n       : m_p_nd(const_cast<node_pointer>(p_nd))\n       { }\n \n-      // Access.\n-      inline const_reference\n+      /// Access.\n+      const_reference\n       operator*() const\n-      {\n-\treturn (Const_Iterator(m_p_nd));\n-      }\n+      { return Const_Iterator(m_p_nd); }\n \n-      // Metadata access.\n-      inline metadata_const_reference\n+      /// Metadata access.\n+      metadata_const_reference\n       get_metadata() const\n-      {\n-\treturn (m_p_nd->get_metadata());\n-      }\n+      { return m_p_nd->get_metadata(); }\n \n-      // Returns the __const node iterator associated with the left node.\n-      inline PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n+      /// Returns the __const node iterator associated with the left node.\n+      PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n       get_l_child() const\n-      {\n-\treturn (PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(m_p_nd->m_p_left));\n-      }\n+      { return PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(m_p_nd->m_p_left); }\n \n-      // Returns the __const node iterator associated with the right node.\n-      inline PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n+      /// Returns the __const node iterator associated with the right node.\n+      PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n       get_r_child() const\n-      {\n-\treturn (PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(m_p_nd->m_p_right));\n-      }\n+      { return PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(m_p_nd->m_p_right); }\n \n-      // Compares to a different iterator object.\n-      inline bool\n+      /// Compares to a different iterator object.\n+      bool\n       operator==(const PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC& other) const\n-      {\n-\treturn (m_p_nd == other.m_p_nd);\n-      }\n+      { return m_p_nd == other.m_p_nd; }\n \n-      // Compares (negatively) to a different iterator object.\n-      inline bool\n+      /// Compares (negatively) to a different iterator object.\n+      bool\n       operator!=(const PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC& other) const\n-      {\n-\treturn (m_p_nd != other.m_p_nd);\n-      }\n+      { return m_p_nd != other.m_p_nd; }\n \n       node_pointer m_p_nd;\n     };\n \n-#define PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC\t\t\t\\\n-    bin_search_tree_node_it_<\t\t\t\t\t\\\n-\t\t\t\t\t\tNode,\t\t\\\n-\t\t\t\t\t\tConst_Iterator, \\\n-\t\t\t\t\t\tIterator,\t\\\n-\t\t\t\t\t\t_Alloc>\n+#define PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC \\\n+    bin_search_tree_node_it_<Node, Const_Iterator, Iterator, _Alloc>\n \n     /// Node iterator.\n     template<typename Node,\n \t     class Const_Iterator,\n \t     class Iterator,\n \t     typename _Alloc>\n-    class bin_search_tree_node_it_ \n+    class bin_search_tree_node_it_\n     : public PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n     {\n     private:\n@@ -170,47 +143,39 @@ namespace __gnu_pbds\n       node_pointer;\n \n     public:\n-      // __Iterator's value type.\n+      /// Iterator's value type.\n       typedef Iterator value_type;\n \n-      // __Iterator's reference type.\n+      /// Iterator's reference type.\n       typedef Iterator reference;\n \n-      // __Iterator's __const reference type.\n+      /// Iterator's __const reference type.\n       typedef Iterator const_reference;\n \n-      // Default constructor.\n-      /*\n-\tinline\n-\tbin_search_tree_node_it_();\n-      */\n-\n       inline\n-      bin_search_tree_node_it_(const node_pointer p_nd = 0) \n+      bin_search_tree_node_it_(const node_pointer p_nd = 0)\n       : PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(const_cast<node_pointer>(p_nd))\n       { }\n \n-      // Access.\n-      inline Iterator\n+      /// Access.\n+      Iterator\n       operator*() const\n-      {\n-\treturn (Iterator(PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC::m_p_nd));\n-      }\n+      { return Iterator(PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC::m_p_nd); }\n \n-      // Returns the node iterator associated with the left node.\n-      inline PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC\n+      /// Returns the node iterator associated with the left node.\n+      PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC\n       get_l_child() const\n       {\n-\treturn (PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC(\n-\t\t\t\t\t\t     PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC::m_p_nd->m_p_left));\n+\treturn PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC(\n+\t\t\t\t\t\t    PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC::m_p_nd->m_p_left);\n       }\n \n-      // Returns the node iterator associated with the right node.\n-      inline PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC\n+      /// Returns the node iterator associated with the right node.\n+      PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC\n       get_r_child() const\n       {\n-\treturn (PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC(\n-\t\t\t\t\t\t     PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC::m_p_nd->m_p_right));\n+\treturn PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC(\n+\t\t\t\t\t\t    PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC::m_p_nd->m_p_right);\n       }\n \n     };\n@@ -222,4 +187,3 @@ namespace __gnu_pbds\n } // namespace __gnu_pbds\n \n #endif // #ifndef PB_DS_BIN_SEARCH_TREE_NODE_ITERATORS_HPP\n-"}, {"sha": "416815e762e46a7882e96df01f6697e2568f74a2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/traits.hpp", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -48,15 +48,16 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    /// Binary search tree traits, primary template.\n+    /// Binary search tree traits, primary template\n+    /// @ingroup traits\n     template<typename Key,\n \t     typename Mapped,\n \t     class Cmp_Fn,\n \t     template<typename Node_CItr,\n \t\t      class Node_Itr,\n \t\t      class Cmp_Fn,\n \t\t      typename _Alloc>\n-    class Node_Update,\n+\t     class Node_Update,\n \t     class Node,\n \t     typename _Alloc>\n     struct bin_search_tree_traits\n@@ -119,6 +120,8 @@ namespace __gnu_pbds\n \t_Alloc>\n       reverse_iterator;\n \n+      /// This is an iterator to an iterator: it iterates over nodes,\n+      /// and de-referencing it returns one of the tree's iterators.\n       typedef\n       bin_search_tree_const_node_it_<\n \tNode,\n@@ -153,13 +156,14 @@ namespace __gnu_pbds\n     };\n \n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     class Cmp_Fn,\n \t     template<typename Node_CItr,\n \t\t      class Node_Itr,\n \t\t      class Cmp_Fn,\n \t\t      typename _Alloc>\n-    class Node_Update,\n+\t     class Node_Update,\n \t     class Node,\n \t     typename _Alloc>\n     struct bin_search_tree_traits<\n@@ -206,6 +210,8 @@ namespace __gnu_pbds\n \n       typedef const_reverse_iterator reverse_iterator;\n \n+      /// This is an iterator to an iterator: it iterates over nodes,\n+      /// and de-referencing it returns one of the tree's iterators.\n       typedef\n       bin_search_tree_const_node_it_<\n \tNode,"}, {"sha": "8d91c4ca0b62ddecc860e3ba4e76a3a19f163c04", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -74,7 +74,9 @@ namespace __gnu_pbds\n     __gnu_pbds::detail::resize_policy<typename _Alloc::size_type>\n \n     /**\n-     *  @brief Binary heaps composed of resize and compare policies.\n+     *  Binary heaps composed of resize and compare policies.\n+     *\n+     *  @ingroup heap-detail\n      *\n      *  Based on CLRS.\n      */"}, {"sha": "aaadd67e6f2f1e25e83eba094d3776891e1a302e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -64,48 +64,48 @@ namespace __gnu_pbds\n       typedef typename base_type::entry_pointer \tentry_pointer;\n \n     public:\n-      // Category.\n+      /// Category.\n       typedef std::forward_iterator_tag \t\titerator_category;\n \n-      // Difference type.\n+      /// Difference type.\n       typedef typename _Alloc::difference_type \t\tdifference_type;\n \n-      // Iterator's value type.\n+      /// Iterator's value type.\n       typedef typename base_type::value_type \t\tvalue_type;\n \n-      // Iterator's pointer type.\n+      /// Iterator's pointer type.\n       typedef typename base_type::pointer \t\tpointer;\n \n-      // Iterator's const pointer type.\n+      /// Iterator's const pointer type.\n       typedef typename base_type::const_pointer \tconst_pointer;\n \n-      // Iterator's reference type.\n+      /// Iterator's reference type.\n       typedef typename base_type::reference \t\treference;\n \n-      // Iterator's const reference type.\n+      /// Iterator's const reference type.\n       typedef typename base_type::const_reference \tconst_reference;\n \n       inline\n       binary_heap_const_iterator_(entry_pointer p_e) : base_type(p_e)\n       { }\n \n-      // Default constructor.\n+      /// Default constructor.\n       inline\n       binary_heap_const_iterator_()\n       { }\n \n-      // Copy constructor.\n+      /// Copy constructor.\n       inline\n       binary_heap_const_iterator_(const binary_heap_const_iterator_& other) \n       : base_type(other)\n       { }\n \n-      // Compares content to a different iterator object.\n+      /// Compares content to a different iterator object.\n       inline bool\n       operator==(const binary_heap_const_iterator_& other) const\n       { return base_type::m_p_e == other.m_p_e; }\n \n-      // Compares content (negatively) to a different iterator object.\n+      /// Compares content (negatively) to a different iterator object.\n       inline bool\n       operator!=(const binary_heap_const_iterator_& other) const\n       { return base_type::m_p_e != other.m_p_e; }"}, {"sha": "f88dd4ae4ed4eaa179d3d515eeb6ff852d4ff7d3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/point_const_iterator.hpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,7 +49,7 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    // Const point-type iterator.\n+    /// Const point-type iterator.\n     template<typename Value_Type, typename Entry, bool Simple, \n \t     typename _Alloc>\n     class binary_heap_point_const_iterator_\n@@ -58,30 +58,30 @@ namespace __gnu_pbds\n       typedef typename _Alloc::template rebind<Entry>::other::pointer entry_pointer;\n \n     public:\n-      // Category.\n+      /// Category.\n       typedef trivial_iterator_tag iterator_category;\n \n-      // Difference type.\n+      /// Difference type.\n       typedef trivial_iterator_difference_type difference_type;\n \n-      // Iterator's value type.\n+      /// Iterator's value type.\n       typedef Value_Type value_type;\n \n-      // Iterator's pointer type.\n+      /// Iterator's pointer type.\n       typedef typename _Alloc::template rebind<value_type>::other::pointer\n       pointer;\n \n-      // Iterator's const pointer type.\n+      /// Iterator's const pointer type.\n       typedef\n       typename _Alloc::template rebind<value_type>::other::const_pointer\n       const_pointer;\n \n-      // Iterator's reference type.\n+      /// Iterator's reference type.\n       typedef\n       typename _Alloc::template rebind<value_type>::other::reference\n       reference;\n \n-      // Iterator's const reference type.\n+      /// Iterator's const reference type.\n       typedef\n       typename _Alloc::template rebind<value_type>::other::const_reference\n       const_reference;\n@@ -90,38 +90,38 @@ namespace __gnu_pbds\n       binary_heap_point_const_iterator_(entry_pointer p_e) : m_p_e(p_e)\n       { }\n \n-      // Default constructor.\n+      /// Default constructor.\n       inline\n       binary_heap_point_const_iterator_() : m_p_e(0) { }\n \n-      // Copy constructor.\n+      /// Copy constructor.\n       inline\n       binary_heap_point_const_iterator_(const binary_heap_point_const_iterator_& other)\n       : m_p_e(other.m_p_e)\n       { }\n \n-      // Access.\n+      /// Access.\n       inline const_pointer\n       operator->() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_e != 0);\n \treturn to_ptr(integral_constant<int, Simple>());\n       }\n \n-      // Access.\n+      /// Access.\n       inline const_reference\n       operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_e != 0);\n \treturn *to_ptr(integral_constant<int, Simple>());\n       }\n \n-      // Compares content to a different iterator object.\n+      /// Compares content to a different iterator object.\n       inline bool\n       operator==(const binary_heap_point_const_iterator_& other) const\n       { return m_p_e == other.m_p_e; }\n \n-      // Compares content (negatively) to a different iterator object.\n+      /// Compares content (negatively) to a different iterator object.\n       inline bool\n       operator!=(const binary_heap_point_const_iterator_& other) const\n       { return m_p_e != other.m_p_e; }"}, {"sha": "ab9b0ecc0b226137cee6fd29612d78617a76d2c7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -58,10 +58,10 @@ namespace __gnu_pbds\n \t  factor = 2\n \t};\n \n-      // Next shrink size.\n+      /// Next shrink size.\n       _Tp \t\tm_shrink_size;\n \n-      // Next grow size.\n+      /// Next grow size.\n       _Tp \t\tm_grow_size;\n \n     public:"}, {"sha": "5f22f95823cc3cf214b2123ad2fabbeda8c1ed45", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -59,7 +59,11 @@ namespace __gnu_pbds\n #define PB_DS_CLASS_C_DEC \\\n     binomial_heap<Value_Type, Cmp_Fn, _Alloc>\n \n-    /// Binomial heap.\n+    /**\n+     *  Binomial heap.\n+     *\n+     *  @ingroup heap-detail\n+     */\n     template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n     class binomial_heap\n     : public binomial_heap_base<Value_Type, Cmp_Fn, _Alloc>"}, {"sha": "3c90b49d1f7c00004067e1100a6c27e571083677", "filename": "libstdc++-v3/include/ext/pb_ds/detail/branch_policy/branch_policy.hpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -45,11 +45,6 @@\n \n namespace __gnu_pbds\n {\n-  /// A null node updator, indicating that no node updates are required.\n-  template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n-    struct null_node_update : public null_type\n-    { };\n-\n   namespace detail\n   {\n     /// Primary template, base class for branch structure policies."}, {"sha": "ee487ff76deb7e3d040ad40f320aabae5fd327a6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -91,7 +91,44 @@ namespace __gnu_pbds\n \t\t  typename _Alloc::template rebind<Key>::other::const_reference>\n #endif\n \n-    /// Collision chaining hash.\n+\n+    /**\n+     *  A collision-chaining hash-based container.\n+     *\n+     *\n+     *  @ingroup hash-detail\n+     *\n+     *  @tparam Key \t    \tKey type.\n+     *\n+     *  @tparam Mapped \t    \tMap type.\n+     *\n+     *  @tparam Hash_Fn\t      \tHashing functor.\n+     *                          Default is __gnu_cxx::hash.\n+     *\n+     *  @tparam Eq_Fn\t      \tEqual functor.\n+     *                          Default std::equal_to<Key>\n+     *\n+     *  @tparam _Alloc \t    \tAllocator type.\n+     *\n+     *  @tparam Store_Hash    \tIf key type stores extra metadata.\n+     *                          Defaults to false.\n+     *\n+     *  @tparam Comb_Hash_Fn\tCombining hash functor.\n+     *                          If Hash_Fn is not null_type, then this\n+     *                          is the ranged-hash functor; otherwise,\n+     *                          this is the range-hashing functor.\n+     *                    XXX(See Design::Hash-Based Containers::Hash Policies.)\n+     *                          Default direct_mask_range_hashing.\n+     *\n+     *  @tparam Resize_Policy \tResizes hash.\n+     *                          Defaults to hash_standard_resize_policy,\n+     *                          using hash_exponential_size_policy and\n+     *                          hash_load_check_resize_trigger.\n+     *\n+     *\n+     *  Bases are: detail::hash_eq_fn, Resize_Policy, detail::ranged_hash_fn,\n+     *             detail::types_traits. (Optional: detail::debug_map_base.)\n+     */\n     template<typename Key,\n \t     typename Mapped,\n \t     typename Hash_Fn,\n@@ -160,6 +197,7 @@ namespace __gnu_pbds\n       typedef Comb_Hash_Fn \t\t\tcomb_hash_fn;\n       typedef Resize_Policy \t\t\tresize_policy;\n \n+      /// Value stores hash, true or false.\n       enum\n \t{\n \t  store_hash = Store_Hash\n@@ -233,30 +271,39 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n+      /// True if size() == 0.\n       inline bool\n       empty() const;\n \n+      /// Return current hash_fn.\n       Hash_Fn&\n       get_hash_fn();\n \n+      /// Return current const hash_fn.\n       const Hash_Fn&\n       get_hash_fn() const;\n \n+      /// Return current eq_fn.\n       Eq_Fn&\n       get_eq_fn();\n \n+      /// Return current const eq_fn.\n       const Eq_Fn&\n       get_eq_fn() const;\n \n+      /// Return current comb_hash_fn.\n       Comb_Hash_Fn&\n       get_comb_hash_fn();\n \n+      /// Return current const comb_hash_fn.\n       const Comb_Hash_Fn&\n       get_comb_hash_fn() const;\n \n+      /// Return current resize_policy.\n       Resize_Policy&\n       get_resize_policy();\n \n+      /// Return current const resize_policy.\n       const Resize_Policy&\n       get_resize_policy() const;\n "}, {"sha": "a960b7d2317049454a0a3c55057b649fee0b80ea", "filename": "libstdc++-v3/include/ext/pb_ds/detail/constructors_destructor_fn_imps.hpp", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818c24cb0dde57da9431661b79cd7e299fc6cf9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp?ref=0818c24cb0dde57da9431661b79cd7e299fc6cf9", "patch": "@@ -1,103 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file detail/constructors_destructor_fn_imps.hpp\n- * Contains constructors_destructor_fn_imps applicable to different containers.\n- */\n-\n-inline\n-PB_DS_CLASS_NAME()\n-{ }\n-\n-inline\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_NAME& other) \n-: base_type((const base_type&)other)\n-{ }\n-\n-template<typename T0>\n-inline\n-PB_DS_CLASS_NAME(T0 t0) : base_type(t0)\n-{ }\n-\n-template<typename T0, typename T1>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1) : base_type(t0, t1)\n-{ }\n-\n-template<typename T0, typename T1, typename T2>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2) : base_type(t0, t1, t2)\n-{ }\n-\n-template<typename T0, typename T1, typename T2, typename T3>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3) \n-: base_type(t0, t1, t2, t3)\n-{ }\n-\n-template<typename T0, typename T1, typename T2, typename T3, typename T4>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4) \n-: base_type(t0, t1, t2, t3, t4)\n-{ }\n-\n-template<typename T0, typename T1, typename T2, typename T3, typename T4,\n-\t typename T5>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) \n-: base_type(t0, t1, t2, t3, t4, t5)\n-{ }\n-\n-template<typename T0, typename T1, typename T2, typename T3, typename T4,\n-\t typename T5, typename T6>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6) \n-: base_type(t0, t1, t2, t3, t4, t5, t6)\n-{ }\n-\n-template<typename T0, typename T1, typename T2, typename T3, typename T4,\n-\t typename T5, typename T6, typename T7>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7) \n-: base_type(t0, t1, t2, t3, t4, t5, t6, t7)\n-{ }\n-\n-template<typename T0, typename T1, typename T2, typename T3, typename T4,\n-\t typename T5, typename T6, typename T7, typename T8>\n-inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8)\n-: base_type(t0, t1, t2, t3, t4, t5, t6, t7, t8)\n-{ }"}, {"sha": "52844f6f9d9fbab7692289a3e705752a846fb1db", "filename": "libstdc++-v3/include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,6 +49,7 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /// Primary template.\n     template<typename Key, typename Eq_Fn, typename _Alloc, bool Store_Hash>\n       struct hash_eq_fn;\n "}, {"sha": "e1161fb5d7c37948433590abb6a45624675f86a0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -90,7 +90,47 @@ namespace __gnu_pbds\n #endif\n \n \n-    /// General probing hash.\n+    /**\n+     *  A general-probing hash-based container.\n+     *\n+     *\n+     *  @ingroup hash-detail\n+     *\n+     *  @tparam Key \t    \tKey type.\n+     *\n+     *  @tparam Mapped \t    \tMap type.\n+     *\n+     *  @tparam Hash_Fn\t      \tHashing functor.\n+     *                          Default is __gnu_cxx::hash.\n+     *\n+     *  @tparam Eq_Fn\t      \tEqual functor.\n+     *                          Default std::equal_to<Key>\n+     *\n+     *  @tparam _Alloc \t    \tAllocator type.\n+     *\n+     *  @tparam Store_Hash    \tIf key type stores extra metadata.\n+     *                          Defaults to false.\n+     *\n+     *  @tparam Comb_Probe_Fn\tCombining probe functor.\n+     *                          If Hash_Fn is not null_type, then this\n+     *                          is the ranged-probe functor; otherwise,\n+     *                          this is the range-hashing functor.\n+     *                    XXX See Design::Hash-Based Containers::Hash Policies.\n+     *                          Default direct_mask_range_hashing.\n+     *\n+     *  @tparam Probe_Fn       \tProbe functor.\n+     *                          Defaults to linear_probe_fn,\n+     *                          also quadratic_probe_fn.\n+     *\n+     *  @tparam Resize_Policy \tResizes hash.\n+     *                          Defaults to hash_standard_resize_policy,\n+     *                          using hash_exponential_size_policy and\n+     *                          hash_load_check_resize_trigger.\n+     *\n+     *\n+     *  Bases are: detail::hash_eq_fn, Resize_Policy, detail::ranged_probe_fn,\n+     *             detail::types_traits. (Optional: detail::debug_map_base.)\n+     */\n     template<typename Key,\n \t     typename Mapped,\n \t     typename Hash_Fn,\n@@ -165,6 +205,7 @@ namespace __gnu_pbds\n       typedef Comb_Probe_Fn \t\t\tcomb_probe_fn;\n       typedef Resize_Policy \t\t\tresize_policy;\n \n+      /// Value stores hash, true or false.\n       enum\n \t{\n \t  store_hash = Store_Hash\n@@ -217,10 +258,10 @@ namespace __gnu_pbds\n       PB_DS_GP_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&);\n \n       PB_DS_GP_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&,\n-\t\t       const Probe_Fn&);\n+\t\t\t const Probe_Fn&);\n \n       PB_DS_GP_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&,\n-\t\t       const Probe_Fn&, const Resize_Policy&);\n+\t\t\t const Probe_Fn&, const Resize_Policy&);\n \n       template<typename It>\n       void\n@@ -238,36 +279,47 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n+      /// True if size() == 0.\n       inline bool\n       empty() const;\n \n+      /// Return current hash_fn.\n       Hash_Fn&\n       get_hash_fn();\n \n+      /// Return current const hash_fn.\n       const Hash_Fn&\n       get_hash_fn() const;\n \n+      /// Return current eq_fn.\n       Eq_Fn&\n       get_eq_fn();\n \n+      /// Return current const eq_fn.\n       const Eq_Fn&\n       get_eq_fn() const;\n \n+      /// Return current probe_fn.\n       Probe_Fn&\n       get_probe_fn();\n \n+      /// Return current const probe_fn.\n       const Probe_Fn&\n       get_probe_fn() const;\n \n+      /// Return current comb_probe_fn.\n       Comb_Probe_Fn&\n       get_comb_probe_fn();\n \n+      /// Return current const comb_probe_fn.\n       const Comb_Probe_Fn&\n       get_comb_probe_fn() const;\n \n+      /// Return current resize_policy.\n       Resize_Policy&\n       get_resize_policy();\n \n+      /// Return current const resize_policy.\n       const Resize_Policy&\n       get_resize_policy() const;\n \n@@ -305,8 +357,8 @@ namespace __gnu_pbds\n       erase(key_const_reference);\n \n       template<typename Pred>\n-      inline size_type\n-      erase_if(Pred);\n+        inline size_type\n+        erase_if(Pred);\n \n       void\n       clear();\n@@ -319,7 +371,7 @@ namespace __gnu_pbds\n \n       inline iterator\n       end();\n-\n+      \n       inline const_iterator\n       end() const;\n \n@@ -406,7 +458,7 @@ namespace __gnu_pbds\n       insert_new_imp(const_reference r_val, comp_hash& r_pos_hash_pair)\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_entries[r_pos_hash_pair.first].m_stat !=\n-\t\t\t valid_entry_status);\n+\t\t\t      valid_entry_status);\n \n \tif (do_resize_if_needed())\n \t  r_pos_hash_pair = find_ins_pos(PB_DS_V2F(r_val),"}, {"sha": "6fe8465c64518547b260638666229fef7a08b392", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/mask_based_range_hashing.hpp", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmask_based_range_hashing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmask_based_range_hashing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmask_based_range_hashing.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -45,14 +45,12 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-#define PB_DS_CLASS_T_DEC template<typename Size_Type>\n-#define PB_DS_CLASS_C_DEC mask_based_range_hashing<Size_Type>\n-\n+    /// Range hashing policy.\n     template<typename Size_Type>\n     class mask_based_range_hashing\n     {\n     protected:\n-      typedef Size_Type size_type;\n+      typedef Size_Type \tsize_type;\n \n       void\n       swap(mask_based_range_hashing& other)\n@@ -71,18 +69,18 @@ namespace __gnu_pbds\n       const static size_type \ts_highest_bit_1;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    const typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::s_num_bits_in_size_type =\n-      sizeof(typename PB_DS_CLASS_C_DEC::size_type) << 3;\n+    template<typename Size_Type>\n+    const typename mask_based_range_hashing<Size_Type>::size_type\n+    mask_based_range_hashing<Size_Type>::s_num_bits_in_size_type =\n+      sizeof(typename mask_based_range_hashing<Size_Type>::size_type) << 3;\n \n-    PB_DS_CLASS_T_DEC\n-    const typename PB_DS_CLASS_C_DEC::size_type PB_DS_CLASS_C_DEC::s_highest_bit_1 = static_cast<typename PB_DS_CLASS_C_DEC::size_type>(1) << (s_num_bits_in_size_type - 1);\n+    template<typename Size_Type>\n+    const typename mask_based_range_hashing<Size_Type>::size_type mask_based_range_hashing<Size_Type>::s_highest_bit_1 = static_cast<typename mask_based_range_hashing<Size_Type>::size_type>(1) << (s_num_bits_in_size_type - 1);\n \n  \n-    PB_DS_CLASS_T_DEC\n+    template<typename Size_Type>\n     void\n-    PB_DS_CLASS_C_DEC::\n+    mask_based_range_hashing<Size_Type>::\n     notify_resized(size_type size)\n     {\n       size_type i = 0;\n@@ -97,10 +95,6 @@ namespace __gnu_pbds\n       while (i++ < s_num_bits_in_size_type)\n         m_mask = (m_mask << 1) ^ 1;\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "2c14c8607bc45f6760deb6193a328ff6aa32e0e0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/mod_based_range_hashing.hpp", "status": "modified", "additions": 8, "deletions": 42, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmod_based_range_hashing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmod_based_range_hashing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmod_based_range_hashing.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -43,64 +43,30 @@\n \n namespace __gnu_pbds\n {\n-\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Size_Type>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    mod_based_range_hashing<\t\t\t\t\t\\\n-\t\t\t\t\t\tSize_Type>\n-\n+    /// Mod based range hashing.\n     template<typename Size_Type>\n     class mod_based_range_hashing\n     {\n     protected:\n-      typedef Size_Type size_type;\n+      typedef Size_Type \tsize_type;\n \n-    protected:\n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(mod_based_range_hashing& other)\n+      { std::swap(m_size, other.m_size); }\n \n       void\n-      notify_resized(size_type size);\n+      notify_resized(size_type s)\n+      { m_size = s; }\n \n       inline size_type\n-      range_hash(size_type hash) const;\n+      range_hash(size_type s) const\n+      { return s % m_size; }\n \n     private:\n       size_type m_size;\n     };\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    swap(PB_DS_CLASS_C_DEC& other)\n-    {\n-      std::swap(m_size, other.m_size);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    notify_resized(size_type size)\n-    {\n-      m_size = size;\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    range_hash(size_type hash) const\n-    {\n-      return (hash % m_size);\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace detail\n \n } // namespace __gnu_pbds"}, {"sha": "8907f0858581b01088c33f54673a4f48d6181fc0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/probe_fn_base.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -47,6 +47,7 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /// Probe functor base.\n     template<typename _Alloc>\n     class probe_fn_base\n     {"}, {"sha": "f71b843f01786dcdb4f3871383d1e7776c389d53", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,6 +49,7 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /// Primary template.\n     template<typename Key, typename Hash_Fn, typename _Alloc, \n \t     typename Comb_Hash_Fn, bool Store_Hash>\n     class ranged_hash_fn;"}, {"sha": "4c24f492651fd8a850d92ddb28ecbb0154b86281", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,6 +49,7 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /// Primary template.\n     template<typename Key, typename Hash_Fn, typename _Alloc,\n \t     typename Comb_Probe_Fn, typename Probe_Fn, bool Store_Hash>\n     class ranged_probe_fn;"}, {"sha": "921547188aae67ab1d42755adcfd63fbd4c3c69f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_probe_fn.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,18 +49,18 @@ namespace __gnu_pbds\n   public:\n     typedef std::size_t size_type;\n \n-    // Default constructor.\n+    /// Default constructor.\n     sample_probe_fn();\n \n-    // Copy constructor.\n+    /// Copy constructor.\n     sample_probe_fn(const sample_probe_fn&);\n \n-    // Swaps content.\n+    /// Swaps content.\n     inline void\n     swap(sample_probe_fn&);\n \n   protected:\n-    // Returns the i-th offset from the hash value of some key r_key.\n+    /// Returns the i-th offset from the hash value of some key r_key.\n     inline size_type\n     operator()(key_const_reference r_key, size_type i) const;\n   };"}, {"sha": "1fbcf8c0dae78ff6e7fc773f6cc5123cc73496c3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_range_hashing.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -47,26 +47,26 @@ namespace __gnu_pbds\n   class sample_range_hashing\n   {\n   public:\n-    // Size type.\n+    /// Size type.\n     typedef std::size_t size_type;\n \n-    // Default constructor.\n+    /// Default constructor.\n     sample_range_hashing();\n \n-    // Copy constructor.\n+    /// Copy constructor.\n     sample_range_hashing(const sample_range_hashing& other);\n \n-    // Swaps content.\n+    /// Swaps content.\n     inline void\n     swap(sample_range_hashing& other);\n \n   protected:\n-    // Notifies the policy object that the container's __size has\n-    // changed to size.\n+    /// Notifies the policy object that the container's size has\n+    /// changed to argument's size.\n     void\n     notify_resized(size_type);\n \n-    // Transforms the __hash value hash into a ranged-hash value.\n+    /// Transforms the __hash value hash into a ranged-hash value.\n     inline size_type\n     operator()(size_type ) const;\n   };"}, {"sha": "759d93cf119a423f2293b9fe96748844c41c1440", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_ranged_hash_fn.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,24 +49,24 @@ namespace __gnu_pbds\n   public:\n     typedef std::size_t size_type;\n \n-    // Default constructor.\n+    /// Default constructor.\n     sample_ranged_hash_fn();\n \n-    // Copy constructor.\n+    /// Copy constructor.\n     sample_ranged_hash_fn(const sample_ranged_hash_fn&);\n \n-    // Swaps content.\n+    /// Swaps content.\n     inline void\n     swap(sample_ranged_hash_fn&);\n \n   protected:\n \n-    // Notifies the policy object that the container's __size has\n-    // changed to size.\n+    /// Notifies the policy object that the container's __size has\n+    /// changed to size.\n     void\n     notify_resized(size_type);\n \n-    // Transforms key_const_reference into a position within the table.\n+    /// Transforms key_const_reference into a position within the table.\n     inline size_type\n     operator()(key_const_reference) const;\n "}, {"sha": "7fc50576ae28df3cb4f0a43087a9d1e90118c49f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/const_iterator.hpp", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -65,61 +65,61 @@ namespace __gnu_pbds\n       typedef typename base_type::node_pointer\t\tnode_pointer;\n \n     public:\n-      // Category.\n+      /// Category.\n       typedef std::forward_iterator_tag \t\titerator_category;\n \n-      // Difference type.\n+      /// Difference type.\n       typedef typename _Alloc::difference_type \t\tdifference_type;\n \n-      // Iterator's value type.\n+      /// Iterator's value type.\n       typedef typename base_type::value_type \t\tvalue_type;\n \n-      // Iterator's pointer type.\n+      /// Iterator's pointer type.\n       typedef typename base_type::pointer \t\tpointer;\n \n-      // Iterator's const pointer type.\n+      /// Iterator's const pointer type.\n       typedef typename base_type::const_pointer \tconst_pointer;\n \n-      // Iterator's reference type.\n+      /// Iterator's reference type.\n       typedef typename base_type::reference \t\treference;\n \n-      // Iterator's const reference type.\n+      /// Iterator's const reference type.\n       typedef typename base_type::const_reference \tconst_reference;\n \n       inline\n       left_child_next_sibling_heap_const_iterator_(node_pointer p_nd)\n       : base_type(p_nd)\n       { }\n \n-      // Default constructor.\n+      /// Default constructor.\n       inline\n       left_child_next_sibling_heap_const_iterator_()\n       { }\n \n-      // Copy constructor.\n+      /// Copy constructor.\n       inline\n       left_child_next_sibling_heap_const_iterator_(const PB_DS_CLASS_C_DEC& other) : base_type(other)\n       { }\n \n-      // Compares content to a different iterator object.\n-      inline bool\n+      /// Compares content to a different iterator object.\n+      bool\n       operator==(const PB_DS_CLASS_C_DEC& other) const\n       { return (base_type::m_p_nd == other.m_p_nd); }\n \n-      // Compares content (negatively) to a different iterator object.\n-      inline bool\n+      /// Compares content (negatively) to a different iterator object.\n+      bool\n       operator!=(const PB_DS_CLASS_C_DEC& other) const\n       { return (base_type::m_p_nd != other.m_p_nd); }\n \n-      inline PB_DS_CLASS_C_DEC&\n+      PB_DS_CLASS_C_DEC&\n       operator++()\n       {\n \t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd != 0);\n \tinc();\n \treturn (*this);\n       }\n \n-      inline PB_DS_CLASS_C_DEC\n+      PB_DS_CLASS_C_DEC\n       operator++(int)\n       {\n \tPB_DS_CLASS_C_DEC ret_it(base_type::m_p_nd);"}, {"sha": "9642f18e90c3ac4e74a639805e213622f40c07ac", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -92,7 +92,7 @@ namespace __gnu_pbds\n     protected:\n       typedef\n       typename _Alloc::template rebind<\n-      left_child_next_sibling_heap_node_<Value_Type, Node_Metadata, \n+      left_child_next_sibling_heap_node_<Value_Type, Node_Metadata,\n \t\t\t\t\t _Alloc> >::other\n       node_allocator;\n \n@@ -135,8 +135,6 @@ namespace __gnu_pbds\n       typedef Cmp_Fn \t\t\t\t\tcmp_fn;\n       typedef _Alloc \t\t\t\t\tallocator_type;\n \n-    public:\n-\n       left_child_next_sibling_heap();\n       left_child_next_sibling_heap(const Cmp_Fn&);\n       left_child_next_sibling_heap(const left_child_next_sibling_heap&);\n@@ -182,7 +180,6 @@ namespace __gnu_pbds\n #endif\n \n     protected:\n-\n       inline node_pointer\n       get_new_node_for_insert(const_reference);\n \n@@ -260,16 +257,15 @@ namespace __gnu_pbds\n       trace_node_metadata(node_const_pointer, type_to_type<Metadata_>);\n \n       static void\n-      trace_node_metadata(node_const_pointer,\n-\t\t\t  type_to_type<null_type>);\n+      trace_node_metadata(node_const_pointer, type_to_type<null_type>);\n #endif\n-    protected:\n-      node_pointer \t\tm_p_root;\n-      size_type \t\tm_size;\n \n-    private:\n       static node_allocator \ts_node_allocator;\n       static no_throw_copies_t \ts_no_throw_copies_ind;\n+\n+    protected:\n+      node_pointer \t\tm_p_root;\n+      size_type \t\tm_size;\n     };\n \n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp>"}, {"sha": "5d3251f1e97979b036bad7f446ab41b702ecae06", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/point_const_iterator.hpp", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -60,88 +60,83 @@ namespace __gnu_pbds\n     template<typename Node, typename _Alloc>\n     class left_child_next_sibling_heap_node_point_const_iterator_\n     {\n-\n     protected:\n       typedef typename _Alloc::template rebind<Node>::other::pointer node_pointer;\n \n     public:\n-\n-      // Category.\n+      /// Category.\n       typedef trivial_iterator_tag iterator_category;\n \n-      // Difference type.\n+      /// Difference type.\n       typedef trivial_iterator_difference_type difference_type;\n \n-      // Iterator's value type.\n+      /// Iterator's value type.\n       typedef typename Node::value_type value_type;\n \n-      // Iterator's pointer type.\n+      /// Iterator's pointer type.\n       typedef\n       typename _Alloc::template rebind<\n \tvalue_type>::other::pointer\n       pointer;\n \n-      // Iterator's const pointer type.\n+      /// Iterator's const pointer type.\n       typedef\n       typename _Alloc::template rebind<\n \tvalue_type>::other::const_pointer\n       const_pointer;\n \n-      // Iterator's reference type.\n+      /// Iterator's reference type.\n       typedef\n       typename _Alloc::template rebind<\n \tvalue_type>::other::reference\n       reference;\n \n-      // Iterator's const reference type.\n+      /// Iterator's const reference type.\n       typedef\n       typename _Alloc::template rebind<\n \tvalue_type>::other::const_reference\n       const_reference;\n \n-    public:\n-\n       inline\n       left_child_next_sibling_heap_node_point_const_iterator_(node_pointer p_nd) : m_p_nd(p_nd)\n       { }\n \n-      // Default constructor.\n+      /// Default constructor.\n       inline\n       left_child_next_sibling_heap_node_point_const_iterator_() : m_p_nd(0)\n       { }\n \n-      // Copy constructor.\n+      /// Copy constructor.\n       inline\n       left_child_next_sibling_heap_node_point_const_iterator_(const PB_DS_CLASS_C_DEC& other) : m_p_nd(other.m_p_nd)\n       { }\n \n-      // Access.\n-      inline const_pointer\n+      /// Access.\n+      const_pointer\n       operator->() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_nd != 0);\n \treturn &m_p_nd->m_value;\n       }\n \n-      // Access.\n-      inline const_reference\n+      /// Access.\n+      const_reference\n       operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_nd != 0);\n \treturn m_p_nd->m_value;\n       }\n \n-      // Compares content to a different iterator object.\n-      inline bool\n+      /// Compares content to a different iterator object.\n+      bool\n       operator==(const PB_DS_CLASS_C_DEC& other) const\n       { return m_p_nd == other.m_p_nd; }\n \n-      // Compares content (negatively) to a different iterator object.\n-      inline bool\n+      /// Compares content (negatively) to a different iterator object.\n+      bool\n       operator!=(const PB_DS_CLASS_C_DEC& other) const\n       { return m_p_nd != other.m_p_nd; }\n \n-    public:\n       node_pointer m_p_nd;\n     };\n \n@@ -151,4 +146,4 @@ namespace __gnu_pbds\n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "a446c3f11f2cb18f201c6c7c23327c41075f243b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/sample_update_policy.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -46,29 +46,29 @@ namespace __gnu_pbds\n   /// A sample list-update policy.\n   struct sample_update_policy\n   {\n-    // Default constructor.\n+    /// Default constructor.\n     sample_update_policy();\n \n-    // Copy constructor.\n+    /// Copy constructor.\n     sample_update_policy(const sample_update_policy&);\n \n-    // Swaps content.\n+    /// Swaps content.\n     inline void\n     swap(sample_update_policy& other);\n \n   protected:\n-    // Metadata on which this functor operates.\n+    /// Metadata on which this functor operates.\n     typedef some_metadata_type metadata_type;\n \n-    // Creates a metadata object.\n+    /// Creates a metadata object.\n     metadata_type\n     operator()() const;\n \n-    // Decides whether a metadata object should be moved to the front of\n-    // the list. A list-update based containers object will call this\n-    // method to decide whether to move a node to the front of the\n-    // list. The method shoule return true if the node should be moved\n-    // to the front of the list.\n+    /// Decides whether a metadata object should be moved to the front\n+    /// of the list. A list-update based containers object will call\n+    /// this method to decide whether to move a node to the front of\n+    /// the list. The method shoule return true if the node should be\n+    /// moved to the front of the list.\n     bool\n     operator()(metadata_reference) const;\n   };"}, {"sha": "19a424d822fb28774433fdd8f64aea882ec9a0b9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -137,6 +137,7 @@ namespace __gnu_pbds\n \treturn *m_p_metadata;\n       }\n \n+      /// Returns the node iterator associated with the left node.\n       inline this_type\n       get_l_child() const\n       {\n@@ -152,11 +153,12 @@ namespace __gnu_pbds\n \t\t\t  mid_pointer(p_begin_metadata, m_p_metadata)));\n       }\n \n+      /// Returns the node iterator associated with the right node.\n       inline this_type\n       get_r_child() const\n       {\n \tif (m_p_value == m_p_end_value)\n-\t  return (this_type(m_p_end_value,  m_p_end_value,  m_p_end_value));\n+\t  return (this_type(m_p_end_value, m_p_end_value, m_p_end_value));\n \n \tconst_metadata_pointer p_end_metadata =\n \t  m_p_metadata + (m_p_end_value - m_p_value);\n@@ -201,7 +203,6 @@ namespace __gnu_pbds\n     template<typename Value_Type, typename Metadata_Type, typename _Alloc>\n     class ov_tree_node_it_ : public PB_DS_OV_TREE_CONST_NODE_ITERATOR_C_DEC\n     {\n-\n     private:\n       typedef PB_DS_OV_TREE_NODE_ITERATOR_C_DEC this_type;\n \n@@ -216,7 +217,6 @@ namespace __gnu_pbds\n       const_metadata_pointer;\n \n     public:\n-\n       typedef trivial_iterator_tag iterator_category;\n \n       typedef trivial_iterator_difference_type difference_type;\n@@ -238,17 +238,16 @@ namespace __gnu_pbds\n \tValue_Type>::type>::other::pointer\n       const_reference;\n \n-    public:\n       inline\n       ov_tree_node_it_(const_pointer p_nd = 0,  const_pointer p_begin_nd = 0,  const_pointer p_end_nd = 0,  const_metadata_pointer p_metadata = 0) : base_type(p_nd,  p_begin_nd,  p_end_nd,  p_metadata)\n       { }\n \n-      // Access.\n+      /// Access.\n       inline reference\n       operator*() const\n       { return reference(base_type::m_p_value); }\n \n-      // Returns the node reference associated with the left node.\n+      /// Returns the node reference associated with the left node.\n       inline ov_tree_node_it_\n       get_l_child() const\n       {\n@@ -264,13 +263,12 @@ namespace __gnu_pbds\n \t\t\t  base_type::mid_pointer(p_begin_metadata, base_type::m_p_metadata)));\n       }\n \n-      // Returns the node reference associated with the right node.\n+      /// Returns the node reference associated with the right node.\n       inline ov_tree_node_it_\n       get_r_child() const\n       {\n \tif (base_type::m_p_value == base_type::m_p_end_value)\n-\t  return this_type(base_type::m_p_end_value,\n-\t\t\t   base_type::m_p_end_value,  \n+\t  return this_type(base_type::m_p_end_value, base_type::m_p_end_value,  \n \t\t\t   base_type::m_p_end_value);\n \n \tconst_metadata_pointer p_end_metadata ="}, {"sha": "c24ae557a70fe4fc3cf4c88a11b3caf8281e3418", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -35,7 +35,7 @@\n \n /**\n  * @file ov_tree_map_/ov_tree_map_.hpp\n- * Contains an implementation class for ov_tree_.\n+ * Contains an implementation class for ov_tree.\n  */\n \n #include <map>\n@@ -97,7 +97,10 @@ namespace __gnu_pbds\n #  error Missing definition\n #endif\n \n-    /// Ordered-vector tree associative-container.\n+    /**\n+     *  @brief Ordered-vector tree associative-container.\n+     *  @ingroup branch-detail\n+     */\n     template<typename Key, typename Mapped, typename Cmp_Fn,\n \t     typename Node_And_It_Traits, typename _Alloc>\n     class PB_DS_OV_TREE_NAME :\n@@ -377,15 +380,23 @@ namespace __gnu_pbds\n       end() const\n       { return m_end_it; }\n \n+      /// Returns a const node_iterator corresponding to the node at the\n+      /// root of the tree.\n       inline node_const_iterator\n       node_begin() const;\n \n-      inline node_const_iterator\n-      node_end() const;\n-\n+      /// Returns a node_iterator corresponding to the node at the\n+      /// root of the tree.\n       inline node_iterator\n       node_begin();\n \n+      /// Returns a const node_iterator corresponding to a node just\n+      /// after a leaf of the tree.\n+      inline node_const_iterator\n+      node_end() const;\n+\n+      /// Returns a node_iterator corresponding to a node just\n+      /// after a leaf of the tree.\n       inline node_iterator\n       node_end();\n "}, {"sha": "ac933136bdf6d4750488401e4b23a76b590e038e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/traits.hpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ftraits.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -48,6 +48,7 @@ namespace __gnu_pbds\n   namespace detail\n   {\n     /// Tree traits.\n+    /// @ingroup traits\n     template<typename Key,\n \t     typename Mapped,\n \t     class Cmp_Fn,\n@@ -84,6 +85,8 @@ namespace __gnu_pbds\n       _Alloc>::type\n       metadata_type;\n \n+      /// This is an iterator to an iterator: it iterates over nodes,\n+      /// and de-referencing it returns one of the tree's iterators.\n       typedef\n       ov_tree_node_const_it_<\n \tvalue_type,\n@@ -115,7 +118,9 @@ namespace __gnu_pbds\n       null_node_update_pointer;\n     };\n \n+\n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     class Cmp_Fn,\n \t     template<typename Node_CItr,\n@@ -151,6 +156,8 @@ namespace __gnu_pbds\n       _Alloc>::type\n       metadata_type;\n \n+      /// This is an iterator to an iterator: it iterates over nodes,\n+      /// and de-referencing it returns one of the tree's iterators.\n       typedef\n       ov_tree_node_const_it_<\n \tvalue_type,"}, {"sha": "7c9e6e3ee954f15fb312fb43b4068201401c6a65", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -68,7 +68,11 @@ namespace __gnu_pbds\n   left_child_next_sibling_heap<Value_Type, Cmp_Fn, null_type, _Alloc>\n #endif\n \n-    /// Pairing heap.\n+    /**\n+     *  Pairing heap.\n+     *\n+     *  @ingroup heap-detail\n+     */\n     template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n     class pairing_heap : public PB_DS_P_HEAP_BASE\n     {"}, {"sha": "66272b3119eafa84a332bb97dec1604c902e642f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -90,11 +90,12 @@ namespace __gnu_pbds\n \n     /**\n      *  @brief PATRICIA trie.\n+     *  @ingroup branch-detail\n      *\n-     * This implementation loosely borrows ideas from:\n-     * 1) Fast Mergeable Integer Maps, Okasaki, Gill 1998\n-     * 2) Ptset: Sets of integers implemented as Patricia trees,\n-     *    Jean-Christophe Filliatr, 2000\n+     *  This implementation loosely borrows ideas from:\n+     *  1) Fast Mergeable Integer Maps, Okasaki, Gill 1998\n+     *  2) Ptset: Sets of integers implemented as Patricia trees,\n+     *     Jean-Christophe Filliatr, 2000\n      */\n     template<typename Key, typename Mapped, typename Node_And_It_Traits,\n \t     typename _Alloc>\n@@ -388,15 +389,23 @@ namespace __gnu_pbds\n       inline const_reverse_iterator\n       rend() const;\n \n+      /// Returns a const node_iterator corresponding to the node at the\n+      /// root of the tree.\n       inline node_const_iterator\n       node_begin() const;\n \n+      /// Returns a node_iterator corresponding to the node at the\n+      /// root of the tree.\n       inline node_iterator\n       node_begin();\n \n+      /// Returns a const node_iterator corresponding to a node just\n+      /// after a leaf of the tree.\n       inline node_const_iterator\n       node_end() const;\n \n+      /// Returns a node_iterator corresponding to a node just\n+      /// after a leaf of the tree.\n       inline node_iterator\n       node_end();\n "}, {"sha": "f5326e944fb0d8d6d5a5f0b2911e076a594a191b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -858,10 +858,10 @@ namespace __gnu_pbds\n       typedef value_type \t\t\t\treference;\n       typedef value_type \t\t\t\tconst_reference;\n \n-      // Metadata type.\n+      /// Metadata type.\n       typedef typename Node::metadata_type \t\tmetadata_type;\n \n-      // Const metadata reference type.\n+      /// Const metadata reference type.\n       typedef typename _Alloc::template rebind<metadata_type> __rebind_m;\n       typedef typename __rebind_m::other \t\t__rebind_ma;\n       typedef typename __rebind_ma::const_reference    metadata_const_reference;\n@@ -871,26 +871,26 @@ namespace __gnu_pbds\n       : m_p_nd(const_cast<node_pointer>(p_nd)), m_p_traits(p_traits)\n       { }\n \n-      // Subtree valid prefix.\n+      /// Subtree valid prefix.\n       std::pair<a_const_iterator, a_const_iterator>\n       valid_prefix() const\n       { return std::make_pair(pref_begin(), pref_end()); }\n \n-      // Const access; returns the __const iterator* associated with\n-      // the current leaf.\n+      /// Const access; returns the __const iterator* associated with\n+      /// the current leaf.\n       const_reference\n       operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(num_children() == 0);\n \treturn _CIterator(m_p_nd);\n       }\n \n-      // Metadata access.\n+      /// Metadata access.\n       metadata_const_reference\n       get_metadata() const\n       { return m_p_nd->get_metadata(); }\n \n-      // Returns the number of children in the corresponding node.\n+      /// Returns the number of children in the corresponding node.\n       size_type\n       num_children() const\n       {\n@@ -901,8 +901,8 @@ namespace __gnu_pbds\n \treturn std::distance(inp->begin(), inp->end());\n       }\n \n-      // Returns a __const node __iterator to the corresponding node's\n-      // i-th child.\n+      /// Returns a __const node __iterator to the corresponding node's\n+      /// i-th child.\n       _Node_citer\n       get_child(size_type i) const\n       {\n@@ -913,12 +913,12 @@ namespace __gnu_pbds\n \treturn _Node_citer(*it, m_p_traits);\n       }\n \n-      // Compares content to a different iterator object.\n+      /// Compares content to a different iterator object.\n       bool\n       operator==(const _Node_citer& other) const\n       { return m_p_nd == other.m_p_nd; }\n \n-      // Compares content (negatively) to a different iterator object.\n+      /// Compares content (negatively) to a different iterator object.\n       bool\n       operator!=(const _Node_citer& other) const\n       { return m_p_nd != other.m_p_nd; }\n@@ -959,15 +959,15 @@ namespace __gnu_pbds\n       : base_type(p_nd, p_traits)\n       { }\n \n-      // Access; returns the iterator*  associated with the current leaf.\n+      /// Access; returns the iterator*  associated with the current leaf.\n       reference\n       operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(base_type::num_children() == 0);\n \treturn iterator(base_type::m_p_nd);\n       }\n \n-      // Returns a node __iterator to the corresponding node's i-th child.\n+      /// Returns a node __iterator to the corresponding node's i-th child.\n       _Node_iter\n       get_child(size_type i) const\n       {"}, {"sha": "6113393da0e06858b26a5d0d5628a71f90ab95f3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/traits.hpp", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,6 +49,7 @@ namespace __gnu_pbds\n   namespace detail\n   {\n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     typename Mapped,\n \t     typename _ATraits,\n@@ -69,6 +70,7 @@ namespace __gnu_pbds\n       typedef base_type::_Metadata<metadata_type, _Alloc>      \tmetadata;\n       typedef _ATraits \t\t       \t\t\t       \taccess_traits;\n \n+      /// Type for synthesized traits.\n       typedef __gnu_pbds::detail::synth_access_traits<type_traits, false, access_traits>   synth_access_traits;\n \n       typedef base_type::_Node_base<synth_access_traits, metadata>     \tnode;\n@@ -81,17 +83,21 @@ namespace __gnu_pbds\n       typedef base_type::_Iter<node, leaf, head, inode, false> \t\treverse_iterator;\n       typedef base_type::_CIter<node, leaf, head, inode, false>\t \tconst_reverse_iterator;\n \n-\n+      /// This is an iterator to an iterator: it iterates over nodes,\n+      /// and de-referencing it returns one of the tree's iterators.\n       typedef base_type::_Node_citer<node, leaf, head, inode, const_iterator, iterator, _Alloc> node_const_iterator;\n \n       typedef base_type::_Node_iter<node, leaf, head, inode, const_iterator, iterator, _Alloc> node_iterator;\n \n+      /// Type for node update.\n       typedef Node_Update<node_const_iterator, node_iterator, _ATraits, _Alloc> \t\tnode_update;\n \n       typedef null_node_update<node_const_iterator, node_iterator, _ATraits, _Alloc>* \t\tnull_node_update_pointer;\n     };\n \n+\n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     typename _ATraits,\n \t     template<typename Node_CItr,\n@@ -110,6 +116,8 @@ namespace __gnu_pbds\n       typedef typename trie_node_metadata_dispatch<Key, null_type, _ATraits, Node_Update, _Alloc>::type metadata_type;\n       typedef base_type::_Metadata<metadata_type, _Alloc>\t\t\t\tmetadata;\n       typedef _ATraits \t\t\t\t     \t\t\t\t\taccess_traits;\n+\n+      /// Type for synthesized traits.\n       typedef __gnu_pbds::detail::synth_access_traits<type_traits, true, access_traits> synth_access_traits;\n \n       typedef base_type::_Node_base<synth_access_traits, metadata>     \tnode;\n@@ -122,11 +130,13 @@ namespace __gnu_pbds\n       typedef base_type::_CIter<node, leaf, head, inode, false>\t       \tconst_reverse_iterator;\n       typedef const_reverse_iterator \t\t\t       \t\treverse_iterator;\n \n-\n+      /// This is an iterator to an iterator: it iterates over nodes,\n+      /// and de-referencing it returns one of the tree's iterators.\n       typedef base_type::_Node_citer<node, leaf, head, inode, const_iterator, iterator, _Alloc> node_const_iterator;\n \n       typedef node_const_iterator \t\t\t\t\t\t\t\tnode_iterator;\n \n+      /// Type for node update.\n       typedef Node_Update<node_const_iterator, node_iterator, _ATraits, _Alloc> \t\tnode_update;\n \n       typedef null_node_update<node_const_iterator, node_const_iterator, _ATraits, _Alloc>* \tnull_node_update_pointer;"}, {"sha": "fadb7c1a1dc465799c852bd4aab8f8d872ce9ef3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/priority_queue_base_dispatch.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -107,7 +107,7 @@ namespace __gnu_pbds\n \t/// Dispatched type.\n \ttypedef thin_heap<_VTp, Cmp_Fn, _Alloc> \t\ttype;\n       };\n-    // @} group pbds\n+    //@} group pbds\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "ff120331dd162606462655843e33f2265e1fc0ee", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -69,8 +69,9 @@ namespace __gnu_pbds\n     PB_DS_RB_TREE_BASE_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, _Alloc>\n \n \n-    /*\n+    /**\n      *  @brief Red-Black tree.\n+     *  @ingroup branch-detail\n      *\n      *  This implementation uses an idea from the SGI STL (using a\n      *  @a header node which is needed for efficient iteration)."}, {"sha": "33ec735c5c13a0667734c54140e62b39232b3442", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/traits.hpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -48,6 +48,7 @@ namespace __gnu_pbds\n   namespace detail\n   {\n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     typename Mapped,\n \t     typename Cmp_Fn,\n@@ -57,7 +58,7 @@ namespace __gnu_pbds\n \t\t      typename _Alloc_>\n \t     class Node_Update,\n \t     typename _Alloc>\n-    struct tree_traits<Key, Mapped, Cmp_Fn, Node_Update, rb_tree_tag, _Alloc> \n+    struct tree_traits<Key, Mapped, Cmp_Fn, Node_Update, rb_tree_tag,_Alloc> \n     : public bin_search_tree_traits<\n       Key,\n       Mapped,\n@@ -72,6 +73,7 @@ namespace __gnu_pbds\n     { };\n \n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     typename Cmp_Fn,\n \t     template<typename Node_CItr,\n@@ -80,7 +82,7 @@ namespace __gnu_pbds\n \t\t      typename _Alloc_>\n \t     class Node_Update,\n \t     typename _Alloc>\n-    struct tree_traits<Key, null_type, Cmp_Fn, Node_Update, rb_tree_tag, _Alloc> \n+    struct tree_traits<Key, null_type, Cmp_Fn, Node_Update, rb_tree_tag,_Alloc> \n     : public bin_search_tree_traits<\n       Key,\n       null_type,"}, {"sha": "a8562470650968d5d65e8ec6fcc1dcc88b44e531", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc_binomial_heap_.hpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -57,7 +57,11 @@ namespace __gnu_pbds\n #define PB_DS_RC_C_DEC \\\n     rc<typename binomial_heap_base<Value_Type, Cmp_Fn, _Alloc>::node, _Alloc>\n \n-    /// Base class for redundant-counter binomial heap.\n+    /**\n+     *  Redundant-counter binomial heap.\n+     *\n+     *  @ingroup heap-detail\n+     */\n     template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n     class rc_binomial_heap\n     : public binomial_heap_base<Value_Type, Cmp_Fn, _Alloc>"}, {"sha": "a4344e7c59f85a4343a049c6fdae39f92ed8a81d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_size_base.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_size_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_size_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_size_base.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -45,11 +45,11 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    // Primary template.\n+    /// Primary template.\n     template<typename Size_Type, bool Hold_Size>\n     class hash_load_check_resize_trigger_size_base;\n \n-    // Specializations.\n+    /// Specializations.\n     template<typename Size_Type>\n     class hash_load_check_resize_trigger_size_base<Size_Type, true>\n     {"}, {"sha": "9bbdf159e9c525a55f08a46ada1a4918a3d28df1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_policy.hpp", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -47,77 +47,77 @@ namespace __gnu_pbds\n   class sample_resize_policy\n   {\n   public:\n-    // Size type.\n+    /// Size type.\n     typedef std::size_t size_type;\n \n-    // Default constructor.\n+    /// Default constructor.\n     sample_resize_policy();\n \n-    // Copy constructor.\n+    /// Copy constructor.\n     sample_range_hashing(const sample_resize_policy& other);\n \n-    // Swaps content.\n+    /// Swaps content.\n     inline void\n     swap(sample_resize_policy& other);\n \n   protected:\n-    // Notifies a search started.\n+    /// Notifies a search started.\n     inline void\n     notify_insert_search_start();\n \n-    // Notifies a search encountered a collision.\n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_insert_search_collision();\n \n-    // Notifies a search ended.\n+    /// Notifies a search ended.\n     inline void\n     notify_insert_search_end();\n \n-    // Notifies a search started.\n+    /// Notifies a search started.\n     inline void\n     notify_find_search_start();\n \n-    // Notifies a search encountered a collision.\n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_find_search_collision();\n \n-    // Notifies a search ended.\n+    /// Notifies a search ended.\n     inline void\n     notify_find_search_end();\n \n-    // Notifies a search started.\n+    /// Notifies a search started.\n     inline void\n     notify_erase_search_start();\n \n-    // Notifies a search encountered a collision.\n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_erase_search_collision();\n \n-    // Notifies a search ended.\n+    /// Notifies a search ended.\n     inline void\n     notify_erase_search_end();\n \n-    // Notifies an element was inserted.\n+    /// Notifies an element was inserted.\n     inline void\n     notify_inserted(size_type num_e);\n \n-    // Notifies an element was erased.\n+    /// Notifies an element was erased.\n     inline void\n     notify_erased(size_type num_e);\n \n-    // Notifies the table was cleared.\n+    /// Notifies the table was cleared.\n     void\n     notify_cleared();\n \n-    // Notifies the table was resized to new_size.\n+    /// Notifies the table was resized to new_size.\n     void\n     notify_resized(size_type new_size);\n \n-    // Queries whether a resize is needed.\n+    /// Queries whether a resize is needed.\n     inline bool\n     is_resize_needed() const;\n \n-    // Queries what the new size should be.\n+    /// Queries what the new size should be.\n     size_type\n     get_new_size(size_type size, size_type num_used_e) const;\n   };"}, {"sha": "1640a120c79d4e90a2fd98e1486ebc21401390db", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_trigger.hpp", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -48,88 +48,88 @@ namespace __gnu_pbds\n   class sample_resize_trigger\n   {\n   public:\n-    // Size type.\n+    /// Size type.\n     typedef std::size_t size_type;\n \n-    // Default constructor.\n+    /// Default constructor.\n     sample_resize_trigger();\n \n-    // Copy constructor.\n+    /// Copy constructor.\n     sample_range_hashing(const sample_resize_trigger&);\n \n-    // Swaps content.\n+    /// Swaps content.\n     inline void\n     swap(sample_resize_trigger&);\n \n   protected:\n-    // Notifies a search started.\n+    /// Notifies a search started.\n     inline void\n     notify_insert_search_start();\n \n-    // Notifies a search encountered a collision.\n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_insert_search_collision();\n \n-    // Notifies a search ended.\n+    /// Notifies a search ended.\n     inline void\n     notify_insert_search_end();\n \n-    // Notifies a search started.\n+    /// Notifies a search started.\n     inline void\n     notify_find_search_start();\n \n-    // Notifies a search encountered a collision.\n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_find_search_collision();\n \n-    // Notifies a search ended.\n+    /// Notifies a search ended.\n     inline void\n     notify_find_search_end();\n \n-    // Notifies a search started.\n+    /// Notifies a search started.\n     inline void\n     notify_erase_search_start();\n \n-    // Notifies a search encountered a collision.\n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_erase_search_collision();\n \n-    // Notifies a search ended.\n+    /// Notifies a search ended.\n     inline void\n     notify_erase_search_end();\n \n-    // Notifies an element was inserted. the total number of entries in\n-    // the table is num_entries.\n+    /// Notifies an element was inserted. the total number of entries in\n+    /// the table is num_entries.\n     inline void\n     notify_inserted(size_type num_entries);\n \n-    // Notifies an element was erased.\n+    /// Notifies an element was erased.\n     inline void\n     notify_erased(size_type num_entries);\n \n-    // Notifies the table was cleared.\n+    /// Notifies the table was cleared.\n     void\n     notify_cleared();\n \n-    // Notifies the table was resized as a result of this object's\n-    // signifying that a resize is needed.\n+    /// Notifies the table was resized as a result of this object's\n+    /// signifying that a resize is needed.\n     void\n     notify_resized(size_type new_size);\n \n-    // Notifies the table was resized externally.\n+    /// Notifies the table was resized externally.\n     void\n     notify_externally_resized(size_type new_size);\n \n-    // Queries whether a resize is needed.\n+    /// Queries whether a resize is needed.\n     inline bool\n     is_resize_needed() const;\n \n-    // Queries whether a grow is needed.\n+    /// Queries whether a grow is needed.\n     inline bool\n     is_grow_needed(size_type size, size_type num_entries) const;\n \n   private:\n-    // Resizes to new_size.\n+    /// Resizes to new_size.\n     virtual void\n     do_resize(size_type);\n   };"}, {"sha": "0779925491f4eec0964f4ffd29145c22cea24206", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -47,25 +47,25 @@ namespace __gnu_pbds\n   class sample_size_policy\n   {\n   public:\n-    // Size type.\n+    /// Size type.\n     typedef std::size_t size_type;\n \n-    // Default constructor.\n+    /// Default constructor.\n     sample_size_policy();\n \n-    // Copy constructor.\n+    /// Copy constructor.\n     sample_range_hashing(const sample_size_policy&);\n \n-    // Swaps content.\n+    /// Swaps content.\n     inline void\n     swap(sample_size_policy& other);\n \n   protected:\n-    // Given a __size size, returns a __size that is larger.\n+    /// Given a __size size, returns a __size that is larger.\n     inline size_type\n     get_nearest_larger_size(size_type size) const;\n \n-    // Given a __size size, returns a __size that is smaller.\n+    /// Given a __size size, returns a __size that is smaller.\n     inline size_type\n     get_nearest_smaller_size(size_type size) const;\n   };"}, {"sha": "a83ed555722450c9fefbefa48a58b5b1ba6a4d85", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -98,7 +98,10 @@ namespace __gnu_pbds\n     PB_DS_S_TREE_BASE_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, _Alloc>\n \n \n-    /// Splay Tree.\n+    /**\n+     *  @brief Splay tree.\n+     *  @ingroup branch-detail\n+     */\n     template<typename Key, typename Mapped, typename Cmp_Fn,\n \t     typename Node_And_It_Traits, typename _Alloc>\n     class PB_DS_S_TREE_NAME : public PB_DS_S_TREE_BASE"}, {"sha": "d9ed261bfceeba294d24021e14c9b9028f9e510c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/traits.hpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -48,6 +48,7 @@ namespace __gnu_pbds\n   namespace detail\n   {\n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     typename Mapped,\n \t     typename Cmp_Fn,\n@@ -68,6 +69,7 @@ namespace __gnu_pbds\n     { };\n \n     /// Specialization.\n+    /// @ingroup traits\n     template<typename Key,\n \t     class Cmp_Fn,\n \t     template<typename Node_CItr,"}, {"sha": "7596f8b56d59ca43ea32b12e6756086a66bd0da1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/standard_policies.hpp", "status": "modified", "additions": 50, "deletions": 34, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -54,87 +54,103 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    /// default_hash_fn\n+    /// Primary template, default_hash_fn.\n     template<typename Key>\n     struct default_hash_fn\n     {\n-      typedef std::tr1::hash<Key> type;\n+\t/// Dispatched type.\n+      typedef std::tr1::hash<Key> \t\t\t\ttype;\n     };\n \n-    /// default_eq_fn\n+    /// Primary template, default_eq_fn.\n     template<typename Key>\n     struct default_eq_fn\n     {\n-      typedef std::equal_to<Key> type;\n+\t/// Dispatched type.\n+      typedef std::equal_to<Key> \t\t\t\ttype;\n     };\n \n+    /// Enumeration for default behavior of stored hash data.\n     enum\n       {\n \tdefault_store_hash = false\n       };\n \n-    /// default_comb_hash_fn\n+    /// Primary template, default_comb_hash_fn.\n     struct default_comb_hash_fn\n     {\n-      typedef __gnu_pbds::direct_mask_range_hashing<> type;\n+\t/// Dispatched type.\n+      typedef direct_mask_range_hashing<> \t\t\ttype;\n     };\n \n-    /// default_resize_policy\n+    /// Primary template, default_resize_policy.\n     template<typename Comb_Hash_Fn>\n     struct default_resize_policy\n     {\n     private:\n-      typedef typename Comb_Hash_Fn::size_type size_type;\n+      typedef typename Comb_Hash_Fn::size_type \t\t\tsize_type;\n \n-      typedef __gnu_pbds::direct_mask_range_hashing<size_type> default_fn;\n-      typedef is_same<default_fn, Comb_Hash_Fn> same_type;\n-      typedef __gnu_pbds::hash_exponential_size_policy<size_type> iftrue;\n-      typedef __gnu_pbds::hash_prime_size_policy iffalse;\n+      typedef direct_mask_range_hashing<size_type> \t\tdefault_fn;\n+      typedef is_same<default_fn, Comb_Hash_Fn> \t\tsame_type;\n+      typedef hash_exponential_size_policy<size_type> \t\tiftrue;\n+      typedef hash_prime_size_policy \t\t\t\tiffalse;\n       typedef __conditional_type<same_type::value, iftrue, iffalse> cond_type;\n-      typedef typename cond_type::__type size_policy_type;\n+      typedef typename cond_type::__type \t\t       size_policy_type;\n \n-      typedef __gnu_pbds::hash_load_check_resize_trigger<false, size_type> trigger;\n+      typedef hash_load_check_resize_trigger<false, size_type> \ttrigger;\n \n     public:\n-      typedef __gnu_pbds::hash_standard_resize_policy<size_policy_type, trigger, false, size_type> type;\n+\t/// Dispatched type.\n+      typedef hash_standard_resize_policy<size_policy_type, trigger, \n+\t\t\t\t\t  false, size_type> \ttype;\n     };\n \n-    /// default_update_policy\n+    /// Default update policy.\n     struct default_update_policy\n     {\n-      typedef __gnu_pbds::lu_move_to_front_policy<> type;\n+\t/// Dispatched type.\n+      typedef lu_move_to_front_policy<> \t\t\ttype;\n     };\n \n-    /// default_probe_fn\n+    /// Primary template, default_probe_fn.\n     template<typename Comb_Probe_Fn>\n     struct default_probe_fn\n     {\n     private:\n-      typedef typename Comb_Probe_Fn::size_type size_type;\n-\n-      typedef __gnu_pbds::direct_mask_range_hashing<size_type> default_fn;\n-      typedef is_same<default_fn, Comb_Probe_Fn> same_type;\n-      typedef __gnu_pbds::linear_probe_fn<size_type> iftrue;\n-      typedef __gnu_pbds::quadratic_probe_fn<size_type> iffalse;\n+      typedef typename Comb_Probe_Fn::size_type \t\tsize_type;\n+      typedef direct_mask_range_hashing<size_type> \t\tdefault_fn;\n+      typedef is_same<default_fn, Comb_Probe_Fn> \t\tsame_type;\n+      typedef linear_probe_fn<size_type> \t\t\tiftrue;\n+      typedef quadratic_probe_fn<size_type> \t\t\tiffalse;\n       typedef __conditional_type<same_type::value, iftrue, iffalse> cond_type;\n \n     public:\n-      typedef typename cond_type::__type type;\n+\t/// Dispatched type.\n+      typedef typename cond_type::__type \t\t\ttype;\n     };\n \n-    /// default_trie_access_traits\n+\n+    /// Primary template, default_trie_access_traits.\n     template<typename Key>\n-    struct default_trie_access_traits;\n+      struct default_trie_access_traits;\n+\n+#define __dtrie_alloc std::allocator<char>  \n+#define __dtrie_string std::basic_string<Char, Char_Traits, __dtrie_alloc> \n \n+    /// Partial specialization, default_trie_access_traits.\n     template<typename Char, typename Char_Traits>\n-    struct default_trie_access_traits<std::basic_string<Char, Char_Traits, std::allocator<char> > >\n-    {\n-    private:\n-      typedef std::basic_string<Char, Char_Traits, std::allocator<char> > string_type;\n+      struct default_trie_access_traits<__dtrie_string>\n+      {\n+      private:\n+\ttypedef __dtrie_string\t\t\t\t\tstring_type;\n \n-    public:\n-      typedef __gnu_pbds::trie_string_access_traits<string_type> type;\n-    };\n+      public:\n+\t/// Dispatched type.\n+\ttypedef trie_string_access_traits<string_type> \t\ttype;\n+      };\n+\n+#undef __dtrie_alloc\n+#undef __dtrie_string\n \n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "e040203ceeb26183986ab2d8e86d866e719728ed", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -65,9 +65,11 @@ namespace __gnu_pbds\n     <Value_Type, Cmp_Fn, typename _Alloc::size_type, _Alloc>\n #endif\n \n+\n     /**\n      *  Thin heap.\n-     *  Base class for @ref priority_queue.\n+     *\n+     *  @ingroup heap-detail\n      *\n      *  See Tarjan and Kaplan.\n      */"}, {"sha": "fbaace2c29e93b0172cb30a038f5695ebbc28e5f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -48,16 +48,23 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /**\n+     *  @addtogroup traits Traits\n+     *  @{\n+     */\n+\n     /// Tree metadata helper.\n     template<typename Node_Update, bool _BTp>\n       struct tree_metadata_helper;\n \n+    /// Specialization, false.\n     template<typename Node_Update>\n       struct tree_metadata_helper<Node_Update, false>\n       {\n \ttypedef typename Node_Update::metadata_type \ttype;\n       };\n \n+    /// Specialization, true.\n     template<typename Node_Update>\n       struct tree_metadata_helper<Node_Update, true>\n       {\n@@ -89,6 +96,7 @@ namespace __gnu_pbds\n     public:\n       typedef typename tree_metadata_helper<__node_u, null_update>::type type;\n     };\n+    //@}\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "e8033f62d42ebce85b8d989cd71dd5d910841676", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/sample_tree_node_update.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -50,11 +50,11 @@ namespace __gnu_pbds\n   {\n     typedef std::size_t metadata_type;\n \n-    // Default constructor.\n+    /// Default constructor.\n     sample_tree_node_update();\n \n-    // Updates the rank of a node through a node_iterator node_it;\n-    // end_nd_it is the end node iterator.\n+    /// Updates the rank of a node through a node_iterator node_it;\n+    /// end_nd_it is the end node iterator.\n     inline void\n     operator()(node_iterator node_it, node_const_iterator end_nd_it) const;\n   };"}, {"sha": "da25ebbc467a5ca5cf7f654fd77560e3b8e15d96", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -48,16 +48,23 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /**\n+     *  @addtogroup traits Traits\n+     *  @{\n+     */\n+\n     /// Trie metadata helper.\n     template<typename Node_Update, bool _BTp>\n       struct trie_metadata_helper;\n \n+    /// Specialization, false.\n     template<typename Node_Update>\n       struct trie_metadata_helper<Node_Update, false>\n       {\n \ttypedef typename Node_Update::metadata_type \ttype;\n       };\n \n+    /// Specialization, true.\n     template<typename Node_Update>\n       struct trie_metadata_helper<Node_Update, true>\n       {\n@@ -89,6 +96,7 @@ namespace __gnu_pbds\n     public:\n       typedef typename trie_metadata_helper<__node_u, null_update>::type type;\n     };\n+    //@}\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "467c0773663f518d1ca2f3d006c4671195369d22", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_access_traits.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -53,23 +53,23 @@ namespace __gnu_pbds\n     typedef typename __rebind_k::other::const_reference\tkey_const_reference;\n     typedef std::string::const_iterator \t\tconst_iterator;\n \n-    // Element type.\n+    /// Element type.\n     typedef char \t\t\t\t       \te_type;\n \n     enum\n       {\n \tmax_size = 4\n       };\n \n-    // Returns a const_iterator to the first element of r_key.\n+    /// Returns a const_iterator to the first element of r_key.\n     inline static const_iterator\n     begin(key_const_reference);\n \n-    // Returns a const_iterator to the after-last element of r_key.\n+    /// Returns a const_iterator to the after-last element of r_key.\n     inline static const_iterator\n     end(key_const_reference);\n \n-    // Maps an element to a position.\n+    /// Maps an element to a position.\n     inline static size_type\n     e_pos(e_type);\n   };"}, {"sha": "6c71ba81ce78e5b88db02a3eddbe5caba5e2093f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_node_update.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -52,11 +52,11 @@ namespace __gnu_pbds\n     typedef std::size_t \t\tmetadata_type;\n \n   protected:\n-    // Default constructor.\n+    /// Default constructor.\n     sample_trie_node_update();\n \n-    // Updates the rank of a node through a node_iterator node_it;\n-    // end_nd_it is the end node iterator.\n+    /// Updates the rank of a node through a node_iterator node_it;\n+    /// end_nd_it is the end node iterator.\n     inline void\n     operator()(node_iterator, node_const_iterator) const;\n   };"}, {"sha": "cb0afdbd70e54aed2a149e628b5ff4e38fc6e684", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -51,6 +51,11 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /**\n+     *  @addtogroup traits Traits\n+     *  @{\n+     */\n+\n     /// Primary template.\n     template<typename Key, typename Mapped>\n       struct no_throw_copies\n@@ -68,11 +73,6 @@ namespace __gnu_pbds\n       };\n \n \n-    //@{\n-    /**\n-     *  Data properties computation.\n-     */\n-\n     /// Stored value.\n     template<typename _Tv>\n       struct stored_value"}, {"sha": "0cd75fc05a640d27d41acd8f8abf88702a4fcce9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/const_iterator.hpp", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -39,83 +39,66 @@\n  * table.\n  */\n \n-// Const range-type iterator.\n-class const_iterator_ : \n-  public point_const_iterator_\n-\n+/// Const range-type iterator.\n+class const_iterator_\n+: public point_const_iterator_\n {\n-\n public:\n-\n-  // Category.\n+  /// Category.\n   typedef std::forward_iterator_tag iterator_category;\n \n-  // Difference type.\n+  /// Difference type.\n   typedef typename _Alloc::difference_type difference_type;\n \n-  // Iterator's value type.\n+  /// Iterator's value type.\n   typedef value_type_ value_type;\n \n-  // Iterator's pointer type.\n+  /// Iterator's pointer type.\n   typedef pointer_ pointer;\n \n-  // Iterator's const pointer type.\n+  /// Iterator's const pointer type.\n   typedef const_pointer_ const_pointer;\n \n-  // Iterator's reference type.\n+  /// Iterator's reference type.\n   typedef reference_ reference;\n \n-  // Iterator's const reference type.\n+  /// Iterator's const reference type.\n   typedef const_reference_ const_reference;\n \n-public:\n-\n-  // Default constructor.\n-  inline\n-  const_iterator_()\n-\n-    : m_p_tbl(0)\n+  /// Default constructor.\n+  const_iterator_() : m_p_tbl(0)\n   { }\n \n-  // Increments.\n-  inline const_iterator_& \n+  /// Increments.\n+  const_iterator_&\n   operator++()\n   {\n     m_p_tbl->inc_it_state(base_type::m_p_value, m_pos);\n-\n-    return (*this);\n+    return *this;\n   }\n \n-  // Increments.\n-  inline const_iterator_\n+  /// Increments.\n+  const_iterator_\n   operator++(int)\n   {\n     const_iterator_ ret =* this;\n-\n     m_p_tbl->inc_it_state(base_type::m_p_value, m_pos);\n-\n-    return (ret);\n+    return ret;\n   }\n \n protected:\n-\n   typedef point_const_iterator_ base_type;\n \n-protected:\n-\n   /**\n    *  Constructor used by the table to initiate the generalized\n    *      pointer and position (e.g., this is called from within a find()\n    *      of a table.\n    * */\n-  inline\n-  const_iterator_(const_pointer_ p_value,  PB_DS_GEN_POS pos,  const PB_DS_CLASS_C_DEC* p_tbl) : point_const_iterator_(p_value),\n-\t\t\t\t\t\t\t\t\t\t\t\t m_p_tbl(p_tbl),\n-\t\t\t\t\t\t\t\t\t\t\t\t m_pos(pos)\n+  const_iterator_(const_pointer_ p_value,  PB_DS_GEN_POS pos,\n+\t\t  const PB_DS_CLASS_C_DEC* p_tbl)\n+  : point_const_iterator_(p_value), m_p_tbl(p_tbl), m_pos(pos)\n   { }\n \n-protected:\n-\n   /**\n    *  Pointer to the table object which created the iterator (used for\n    *      incrementing its position.\n@@ -126,4 +109,3 @@ class const_iterator_ :\n \n   friend class PB_DS_CLASS_C_DEC;\n };\n-"}, {"sha": "781bd44206c658328bd2cd91e94f159b358cc62f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/iterator.hpp", "status": "modified", "additions": 28, "deletions": 48, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -39,112 +39,92 @@\n  *    table.\n  */\n \n-// Range-type iterator.\n-class iterator_ : \n-  public const_iterator_\n-\n+/// Range-type iterator.\n+class iterator_\n+: public const_iterator_\n {\n-\n public:\n-\n-  // Category.\n+  /// Category.\n   typedef std::forward_iterator_tag iterator_category;\n \n-  // Difference type.\n+  /// Difference type.\n   typedef typename _Alloc::difference_type difference_type;\n \n-  // Iterator's value type.\n+  /// Iterator's value type.\n   typedef value_type_ value_type;\n \n-  // Iterator's pointer type.\n+  /// Iterator's pointer type.\n   typedef pointer_ pointer;\n \n-  // Iterator's const pointer type.\n+  /// Iterator's const pointer type.\n   typedef const_pointer_ const_pointer;\n \n-  // Iterator's reference type.\n+  /// Iterator's reference type.\n   typedef reference_ reference;\n \n-  // Iterator's const reference type.\n+  /// Iterator's const reference type.\n   typedef const_reference_ const_reference;\n \n-public:\n-\n-  // Default constructor.\n+  /// Default constructor.\n   inline\n   iterator_()\n+  : const_iterator_(0, PB_DS_GEN_POS(), 0) { }\n \n-    : const_iterator_(0, PB_DS_GEN_POS(), 0)\n-  { }\n-\n-  // Conversion to a point-type iterator.\n+  /// Conversion to a point-type iterator.\n   inline\n   operator point_iterator_()\n-  {\n-    return (point_iterator_(\n-\t\t\t    const_cast<pointer>(const_iterator_::m_p_value)));\n-  }\n+  { return point_iterator_(const_cast<pointer>(const_iterator_::m_p_value)); }\n \n-  // Conversion to a point-type iterator.\n+  /// Conversion to a point-type iterator.\n   inline\n   operator const point_iterator_() const\n-  {\n-    return (point_iterator_(\n-\t\t\t    const_cast<pointer>(const_iterator_::m_p_value)));\n-  }\n+  { return point_iterator_(const_cast<pointer>(const_iterator_::m_p_value)); }\n \n-  // Access.\n-  inline pointer\n+  /// Access.\n+  pointer\n   operator->() const\n   {\n     _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != 0);\n-\n     return (const_cast<pointer>(base_type::m_p_value));\n   }\n \n-  // Access.\n-  inline reference\n+  /// Access.\n+  reference\n   operator*() const\n   {\n     _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != 0);\n-\n     return (const_cast<reference>(*base_type::m_p_value));\n   }\n \n-  // Increments.\n-  inline iterator_& \n+  /// Increments.\n+  iterator_&\n   operator++()\n   {\n     base_type::m_p_tbl->inc_it_state(base_type::m_p_value, base_type::m_pos);\n-\n-    return (*this);\n+    return *this;\n   }\n \n-  // Increments.\n-  inline iterator_\n+  /// Increments.\n+  iterator_\n   operator++(int)\n   {\n     iterator_ ret =* this;\n-\n     base_type::m_p_tbl->inc_it_state(base_type::m_p_value, base_type::m_pos);\n-\n-    return (ret);\n+    return ret;\n   }\n \n protected:\n   typedef const_iterator_ base_type;\n \n-protected:\n-\n   /**\n    *  Constructor used by the table to initiate the generalized\n    *      pointer and position (e.g., this is called from within a find()\n    *      of a table.\n    * */\n   inline\n-  iterator_(pointer p_value, PB_DS_GEN_POS pos, PB_DS_CLASS_C_DEC* p_tbl) : const_iterator_(p_value, pos, p_tbl)\n+  iterator_(pointer p_value, PB_DS_GEN_POS pos, PB_DS_CLASS_C_DEC* p_tbl)\n+  : const_iterator_(p_value, pos, p_tbl)\n   { }\n \n   friend class PB_DS_CLASS_C_DEC;\n };\n-"}, {"sha": "fa33f22df4b445296d17bf3b7abbfebc896215c8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/point_const_iterator.hpp", "status": "modified", "additions": 32, "deletions": 50, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_const_iterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -41,105 +41,87 @@\n \n class point_iterator_;\n \n-// Const point-type iterator.\n+/// Const point-type iterator.\n class point_const_iterator_\n {\n-\n public:\n-\n-  // Category.\n+  /// Category.\n   typedef trivial_iterator_tag iterator_category;\n \n-  // Difference type.\n+  /// Difference type.\n   typedef trivial_iterator_difference_type difference_type;\n \n-  // Iterator's value type.\n+  /// Iterator's value type.\n   typedef value_type_ value_type;\n \n-  // Iterator's pointer type.\n+  /// Iterator's pointer type.\n   typedef pointer_ pointer;\n \n-  // Iterator's const pointer type.\n+  /// Iterator's const pointer type.\n   typedef const_pointer_ const_pointer;\n \n-  // Iterator's reference type.\n+  /// Iterator's reference type.\n   typedef reference_ reference;\n \n-  // Iterator's const reference type.\n+  /// Iterator's const reference type.\n   typedef const_reference_ const_reference;\n \n-public:\n-\n   inline\n   point_const_iterator_(const_pointer p_value) : m_p_value(p_value)\n   { }\n \n-  // Default constructor.\n+  /// Default constructor.\n   inline\n-  point_const_iterator_()\n-\n-    : m_p_value(0)\n+  point_const_iterator_() : m_p_value(0)\n   { }\n \n-  // Copy constructor.\n+  /// Copy constructor.\n   inline\n   point_const_iterator_(const point_const_iterator_& other)\n-\n-    : m_p_value(other.m_p_value)\n+  : m_p_value(other.m_p_value)\n   { }\n \n-  // Copy constructor.\n+  /// Copy constructor.\n   inline\n   point_const_iterator_(const point_iterator_& other)\n-\n-    : m_p_value(other.m_p_value)\n+  : m_p_value(other.m_p_value)\n   { }\n \n-  // Access.\n-  inline const_pointer\n+  /// Access.\n+  const_pointer\n   operator->() const\n   {\n     _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n-\n-    return (m_p_value);\n+    return m_p_value;\n   }\n \n-  // Access.\n-  inline const_reference\n+  /// Access.\n+  const_reference\n   operator*() const\n   {\n     _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n-\n-    return (*m_p_value);\n+    return *m_p_value;\n   }\n \n-  // Compares content to a different iterator object.\n-  inline bool\n+  /// Compares content to a different iterator object.\n+  bool\n   operator==(const point_iterator_& other) const\n-  {\n-    return (m_p_value == other.m_p_value);\n-  }\n+  { return m_p_value == other.m_p_value; }\n \n-  // Compares content to a different iterator object.\n-  inline bool\n+  /// Compares content to a different iterator object.\n+  bool\n   operator==(const point_const_iterator_& other) const\n-  {\n-    return (m_p_value == other.m_p_value);\n-  }\n+  { return m_p_value == other.m_p_value; }\n \n-  // Compares content (negatively) to a different iterator object.\n-  inline bool\n+  /// Compares content (negatively) to a different iterator object.\n+  bool\n   operator!=(const point_iterator_& other) const\n-  {\n-    return (m_p_value != other.m_p_value);\n-  }\n+  { return m_p_value != other.m_p_value; }\n \n-  // Compares content (negatively) to a different iterator object.\n-  inline bool\n+  /// Compares content (negatively) to a different iterator object.\n+  bool\n   operator!=(const point_const_iterator_& other) const\n-  {\n-    return (m_p_value != other.m_p_value);\n-  }\n+  { return m_p_value != other.m_p_value; }\n \n protected:\n   const_pointer m_p_value;"}, {"sha": "0dd3946bf52427c86b71ccadaf01264685654018", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -39,94 +39,78 @@\n  *     methods.\n  */\n \n-// Find type iterator.\n+/// Find type iterator.\n class point_iterator_\n {\n-\n public:\n-\n-  // Category.\n+  /// Category.\n   typedef trivial_iterator_tag iterator_category;\n \n-  // Difference type.\n+  /// Difference type.\n   typedef trivial_iterator_difference_type difference_type;\n \n-  // Iterator's value type.\n+  /// Iterator's value type.\n   typedef value_type_ value_type;\n \n-  // Iterator's pointer type.\n+  /// Iterator's pointer type.\n   typedef pointer_ pointer;\n \n-  // Iterator's const pointer type.\n+  /// Iterator's const pointer type.\n   typedef const_pointer_ const_pointer;\n \n-  // Iterator's reference type.\n+  /// Iterator's reference type.\n   typedef reference_ reference;\n \n-  // Iterator's const reference type.\n+  /// Iterator's const reference type.\n   typedef const_reference_ const_reference;\n \n-public:\n-\n-  // Default constructor.\n+  /// Default constructor.\n   inline\n   point_iterator_()\n-\n-    : m_p_value(0)\n+  : m_p_value(0)\n   { }\n \n-  // Copy constructor.\n+  /// Copy constructor.\n   inline\n   point_iterator_(const point_iterator_& other)\n-\n-    : m_p_value(other.m_p_value)\n+  : m_p_value(other.m_p_value)\n   { }\n \n-  // Access.\n-  inline pointer\n+  /// Access.\n+  pointer\n   operator->() const\n   {\n     _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n-\n     return (m_p_value);\n   }\n \n-  // Access.\n-  inline reference\n+  /// Access.\n+  reference\n   operator*() const\n   {\n     _GLIBCXX_DEBUG_ASSERT(m_p_value != 0);\n-\n     return (*m_p_value);\n   }\n \n-  // Compares content to a different iterator object.\n-  inline bool\n+  /// Compares content to a different iterator object.\n+  bool\n   operator==(const point_iterator_& other) const\n-  {\n-    return (m_p_value == other.m_p_value);\n-  }\n+  { return m_p_value == other.m_p_value; }\n \n-  // Compares content to a different iterator object.\n-  inline bool\n+  /// Compares content to a different iterator object.\n+  bool\n   operator==(const point_const_iterator_& other) const\n-  {\n-    return (m_p_value == other.m_p_value);\n-  }\n+  { return m_p_value == other.m_p_value; }\n \n-  // Compares content to a different iterator object.\n-  inline bool\n+  /// Compares content to a different iterator object.\n+  bool\n   operator!=(const point_iterator_& other) const\n-  {\n-    return (m_p_value != other.m_p_value);\n-  }\n+  { return m_p_value != other.m_p_value; }\n \n-  // Compares content (negatively) to a different iterator object.\n-  inline bool\n+  /// Compares content (negatively) to a different iterator object.\n+  bool\n   operator!=(const point_const_iterator_& other) const\n-  {\n-    return (m_p_value != other.m_p_value);\n-  }\n+  { return m_p_value != other.m_p_value; }\n \n   inline\n   point_iterator_(pointer p_value) : m_p_value(p_value)\n@@ -140,4 +124,3 @@ class point_iterator_\n protected:\n   pointer m_p_value;\n };\n-"}, {"sha": "5213fa43aa9c9ffda97004a91662ba0800598b81", "filename": "libstdc++-v3/include/ext/pb_ds/exception.hpp", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,23 +48,29 @@\n \n namespace __gnu_pbds\n {\n-  // Base class for exceptions.\n+  /**\n+   *  @defgroup exceptions-pbds Exceptions\n+   *  @ingroup pbds\n+   *  @{\n+   */\n+\n+  /// Base class for exceptions.\n   struct container_error : public std::logic_error\n   {\n-    container_error() \n+    container_error()\n     : std::logic_error(__N(\"__gnu_pbds::container_error\")) { }\n   };\n \n-  // An entry cannot be inserted into a container object for logical\n-  // reasons (not, e.g., if memory is unabvailable, in which case\n-  // the allocator_type's exception will be thrown).\n+  /// An entry cannot be inserted into a container object for logical\n+  /// reasons (not, e.g., if memory is unabvailable, in which case\n+  /// the allocator_type's exception will be thrown).\n   struct insert_error : public container_error { };\n \n-  // A join cannot be performed logical reasons (i.e., the ranges of\n-  // the two container objects being joined overlaps.\n+  /// A join cannot be performed logical reasons (i.e., the ranges of\n+  /// the two container objects being joined overlaps.\n   struct join_error : public container_error { };\n \n-  // A container cannot be resized.\n+  /// A container cannot be resized.\n   struct resize_error : public container_error { };\n \n #if __EXCEPTIONS\n@@ -100,6 +106,7 @@ namespace __gnu_pbds\n   __throw_resize_error(void)\n   { std::abort(); }\n #endif\n+  //@}\n } // namespace __gnu_pbds\n \n #endif"}, {"sha": "dbada2110f9f032d39279948d6694f74fc8bcea1", "filename": "libstdc++-v3/include/ext/pb_ds/hash_policy.hpp", "status": "modified", "additions": 88, "deletions": 66, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -67,7 +67,7 @@ namespace __gnu_pbds\n     swap(PB_DS_CLASS_C_DEC& other);\n \n   protected:\n-    // Returns the i-th offset from the hash value.\n+    /// Returns the i-th offset from the hash value.\n     inline size_type\n     operator()(size_type i) const;\n   };\n@@ -91,7 +91,7 @@ namespace __gnu_pbds\n     swap(PB_DS_CLASS_C_DEC& other);\n \n   protected:\n-    // Returns the i-th offset from the hash value.\n+    /// Returns the i-th offset from the hash value.\n     inline size_type\n     operator()(size_type i) const;\n   };\n@@ -104,9 +104,9 @@ namespace __gnu_pbds\n #define PB_DS_CLASS_T_DEC template<typename Size_Type>\n #define PB_DS_CLASS_C_DEC direct_mask_range_hashing<Size_Type>\n \n-  /// A mask range-hashing class (uses a bit-mask).\n+  /// A mask range-hashing class (uses a bitmask).\n   template<typename Size_Type = std::size_t>\n-  class direct_mask_range_hashing \n+  class direct_mask_range_hashing\n   : public detail::mask_based_range_hashing<Size_Type>\n   {\n   private:\n@@ -122,8 +122,8 @@ namespace __gnu_pbds\n     void\n     notify_resized(size_type size);\n \n-    // Transforms the __hash value hash into a ranged-hash value\n-    // (using a bit-mask).\n+    /// Transforms the __hash value hash into a ranged-hash value\n+    /// (using a bit-mask).\n     inline size_type\n     operator()(size_type hash) const;\n   };\n@@ -138,24 +138,24 @@ namespace __gnu_pbds\n \n   /// A mod range-hashing class (uses the modulo function).\n   template<typename Size_Type = std::size_t>\n-  class direct_mod_range_hashing \n+  class direct_mod_range_hashing\n   : public detail::mod_based_range_hashing<Size_Type>\n   {\n   public:\n     typedef Size_Type size_type;\n-      \n+\n     void\n     swap(PB_DS_CLASS_C_DEC& other);\n \n   protected:\n     void\n     notify_resized(size_type size);\n-      \n-    // Transforms the __hash value hash into a ranged-hash value\n-    // (using a modulo operation).\n+\n+    /// Transforms the __hash value hash into a ranged-hash value\n+    /// (using a modulo operation).\n     inline size_type\n     operator()(size_type hash) const;\n-      \n+\n   private:\n     typedef detail::mod_based_range_hashing<size_type> mod_based_base;\n   };\n@@ -179,12 +179,15 @@ namespace __gnu_pbds\n \n     enum\n       {\n+\t/// Specifies whether the load factor can be accessed\n+\t/// externally. The two options have different trade-offs in\n+\t/// terms of flexibility, genericity, and encapsulation.\n \texternal_load_access = External_Load_Access\n       };\n \n-    // Default constructor, or constructor taking load_min and\n-    // load_max load factors between which this policy will keep the\n-    // actual load.\n+    /// Default constructor, or constructor taking load_min and\n+    /// load_max load factors between which this policy will keep the\n+    /// actual load.\n     hash_load_check_resize_trigger(float load_min = 0.125,\n \t\t\t\t   float load_max = 0.5);\n \n@@ -194,12 +197,12 @@ namespace __gnu_pbds\n     virtual\n     ~hash_load_check_resize_trigger();\n \n-    // Returns a pair of the minimal and maximal loads, respectively.\n+    /// Returns a pair of the minimal and maximal loads, respectively.\n     inline std::pair<float, float>\n     get_loads() const;\n \n-    // Sets the loads through a pair of the minimal and maximal\n-    // loads, respectively.\n+    /// Sets the loads through a pair of the minimal and maximal\n+    /// loads, respectively.\n     void\n     set_loads(std::pair<float, float> load_pair);\n \n@@ -231,20 +234,20 @@ namespace __gnu_pbds\n     inline void\n     notify_erase_search_end();\n \n-    // Notifies an element was inserted. The total number of entries\n-    // in the table is num_entries.\n+    /// Notifies an element was inserted. The total number of entries\n+    /// in the table is num_entries.\n     inline void\n     notify_inserted(size_type num_entries);\n \n     inline void\n     notify_erased(size_type num_entries);\n \n-    // Notifies the table was cleared.\n+    /// Notifies the table was cleared.\n     void\n     notify_cleared();\n \n-    // Notifies the table was resized as a result of this object's\n-    // signifying that a resize is needed.\n+    /// Notifies the table was resized as a result of this object's\n+    /// signifying that a resize is needed.\n     void\n     notify_resized(size_type new_size);\n \n@@ -266,7 +269,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n     void\n     assert_valid(const char* file, int line) const;\n-#endif \n+#endif\n \n     float \tm_load_min;\n     float \tm_load_max;\n@@ -290,76 +293,95 @@ namespace __gnu_pbds\n   class cc_hash_max_collision_check_resize_trigger\n   {\n   public:\n-    typedef Size_Type size_type;\n+    typedef Size_Type \tsize_type;\n \n     enum\n       {\n+\t/// Specifies whether the load factor can be accessed\n+\t/// externally. The two options have different trade-offs in\n+\t/// terms of flexibility, genericity, and encapsulation.\n \texternal_load_access = External_Load_Access\n       };\n \n-    // Default constructor, or constructor taking load, a __load\n-    // factor which it will attempt to maintain.\n+    /// Default constructor, or constructor taking load, a __load\n+    /// factor which it will attempt to maintain.\n     cc_hash_max_collision_check_resize_trigger(float load = 0.5);\n \n     void\n     swap(PB_DS_CLASS_C_DEC& other);\n \n-    // Returns the current load.\n+    /// Returns the current load.\n     inline float\n     get_load() const;\n \n-    // Sets the load; does not resize the container.\n+    /// Sets the load; does not resize the container.\n     void\n     set_load(float load);\n \n   protected:\n+    /// Notifies an insert search started.\n     inline void\n     notify_insert_search_start();\n \n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_insert_search_collision();\n \n+    /// Notifies a search ended.\n     inline void\n     notify_insert_search_end();\n \n+    /// Notifies a find search started.\n     inline void\n     notify_find_search_start();\n \n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_find_search_collision();\n \n+    /// Notifies a search ended.\n     inline void\n     notify_find_search_end();\n \n+    /// Notifies an erase search started.\n     inline void\n     notify_erase_search_start();\n \n+    /// Notifies a search encountered a collision.\n     inline void\n     notify_erase_search_collision();\n \n+    /// Notifies a search ended.\n     inline void\n     notify_erase_search_end();\n \n+    /// Notifies an element was inserted.\n     inline void\n     notify_inserted(size_type num_entries);\n \n+    /// Notifies an element was erased.\n     inline void\n     notify_erased(size_type num_entries);\n \n+    /// Notifies the table was cleared.\n     void\n     notify_cleared();\n \n-    // Notifies the table was resized as a result of this object's\n-    // signifying that a resize is needed.\n+    /// Notifies the table was resized as a result of this object's\n+    /// signifying that a resize is needed.\n     void\n     notify_resized(size_type new_size);\n \n+    /// Notifies the table was resized externally.\n     void\n     notify_externally_resized(size_type new_size);\n \n+    /// Queries whether a resize is needed.\n     inline bool\n     is_resize_needed() const;\n \n+    /// Queries whether a grow is needed. This method is called only\n+    /// if this object indicated is needed.\n     inline bool\n     is_grow_needed(size_type size, size_type num_entries) const;\n \n@@ -393,10 +415,10 @@ namespace __gnu_pbds\n   public:\n     typedef Size_Type size_type;\n \n-    // Default constructor, or onstructor taking a start_size, or\n-    // constructor taking a start size and grow_factor. The policy\n-    // will use the sequence of sizes start_size, start_size*\n-    // grow_factor, start_size* grow_factor^2, ...\n+    /// Default constructor, or onstructor taking a start_size, or\n+    /// constructor taking a start size and grow_factor. The policy\n+    /// will use the sequence of sizes start_size, start_size*\n+    /// grow_factor, start_size* grow_factor^2, ...\n     hash_exponential_size_policy(size_type start_size = 8,\n \t\t\t\t size_type grow_factor = 2);\n \n@@ -428,12 +450,12 @@ namespace __gnu_pbds\n   class hash_prime_size_policy\n   {\n   public:\n-    // Size type.\n+    /// Size type.\n     typedef std::size_t size_type;\n \n-    // Default constructor, or onstructor taking a start_size The\n-    // policy will use the sequence of sizes approximately\n-    // start_size, start_size* 2, start_size* 2^2, ...\n+    /// Default constructor, or onstructor taking a start_size The\n+    /// policy will use the sequence of sizes approximately\n+    /// start_size, start_size* 2, start_size* 2^2, ...\n     hash_prime_size_policy(size_type start_size = 8);\n \n     inline void\n@@ -464,7 +486,7 @@ namespace __gnu_pbds\n \t   typename Trigger_Policy = hash_load_check_resize_trigger<>,\n \t   bool External_Size_Access = false,\n \t   typename Size_Type = std::size_t>\n-  class hash_standard_resize_policy \n+  class hash_standard_resize_policy\n   : public Size_Policy, public Trigger_Policy\n   {\n   public:\n@@ -477,18 +499,18 @@ namespace __gnu_pbds\n \texternal_size_access = External_Size_Access\n       };\n \n-    // Default constructor.\n+    /// Default constructor.\n     hash_standard_resize_policy();\n \n-    // constructor taking some policies r_size_policy will be copied\n-    // by the Size_Policy object of this object.\n+    /// constructor taking some policies r_size_policy will be copied\n+    /// by the Size_Policy object of this object.\n     hash_standard_resize_policy(const Size_Policy& r_size_policy);\n \n-    // constructor taking some policies. r_size_policy will be\n-    // copied by the Size_Policy object of this\n-    // object. r_trigger_policy will be copied by the Trigger_Policy\n-    // object of this object.\n-    hash_standard_resize_policy(const Size_Policy& r_size_policy, \n+    /// constructor taking some policies. r_size_policy will be\n+    /// copied by the Size_Policy object of this\n+    /// object. r_trigger_policy will be copied by the Trigger_Policy\n+    /// object of this object.\n+    hash_standard_resize_policy(const Size_Policy& r_size_policy,\n \t\t\t\tconst Trigger_Policy& r_trigger_policy);\n \n     virtual\n@@ -497,29 +519,29 @@ namespace __gnu_pbds\n     inline void\n     swap(PB_DS_CLASS_C_DEC& other);\n \n-    // Access to the Size_Policy object used.\n-    Size_Policy& \n+    /// Access to the Size_Policy object used.\n+    Size_Policy&\n     get_size_policy();\n \n-    // Const access to the Size_Policy object used.\n-    const Size_Policy& \n+    /// Const access to the Size_Policy object used.\n+    const Size_Policy&\n     get_size_policy() const;\n \n-    // Access to the Trigger_Policy object used.\n-    Trigger_Policy& \n+    /// Access to the Trigger_Policy object used.\n+    Trigger_Policy&\n     get_trigger_policy();\n \n-    // Access to the Trigger_Policy object used.\n-    const Trigger_Policy& \n+    /// Access to the Trigger_Policy object used.\n+    const Trigger_Policy&\n     get_trigger_policy() const;\n \n-    // Returns the actual size of the container.\n+    /// Returns the actual size of the container.\n     inline size_type\n     get_actual_size() const;\n \n-    // Resizes the container to suggested_new_size, a suggested size\n-    // (the actual size will be determined by the Size_Policy\n-    // object).\n+    /// Resizes the container to suggested_new_size, a suggested size\n+    /// (the actual size will be determined by the Size_Policy\n+    /// object).\n     void\n     resize(size_type suggested_new_size);\n \n@@ -566,15 +588,15 @@ namespace __gnu_pbds\n     inline bool\n     is_resize_needed() const;\n \n-    // Queries what the new size should be, when the container is\n-    // resized naturally. The current __size of the container is\n-    // size, and the number of used entries within the container is\n-    // num_used_e.\n+    /// Queries what the new size should be, when the container is\n+    /// resized naturally. The current __size of the container is\n+    /// size, and the number of used entries within the container is\n+    /// num_used_e.\n     size_type\n     get_new_size(size_type size, size_type num_used_e) const;\n \n   private:\n-    // Resizes to new_size.\n+    /// Resizes to new_size.\n     virtual void\n     do_resize(size_type new_size);\n \n@@ -592,4 +614,4 @@ namespace __gnu_pbds\n \n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "d73d55f0aaaac941f67320c28f04553a8444a59a", "filename": "libstdc++-v3/include/ext/pb_ds/list_update_policy.hpp", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -60,23 +60,23 @@ namespace __gnu_pbds\n    public:\n      typedef _Alloc \t\t\t\t\tallocator_type;\n \n-     // Metadata on which this functor operates.\n+     /// Metadata on which this functor operates.\n      typedef null_type \t\t\t\t\tmetadata_type;\n \n    private:\n      typedef typename _Alloc::template rebind<metadata_type> __rebind_m;\n \n    public:\n-     // Reference to metadata on which this functor operates.\n+     /// Reference to metadata on which this functor operates.\n      typedef typename __rebind_m::other::reference \tmetadata_reference;\n \n-     // Creates a metadata object.\n+     /// Creates a metadata object.\n      metadata_type\n      operator()() const\n      { return s_metadata; }\n \n-     // Decides whether a metadata object should be moved to the front\n-     // of the list.\n+     /// Decides whether a metadata object should be moved to the front\n+     /// of the list.\n      inline bool\n      operator()(metadata_reference r_metadata) const\n      { return true; }\n@@ -99,27 +99,29 @@ namespace __gnu_pbds\n \n       enum\n \t{\n+\t  /// When some element is accessed this number of times, it\n+\t  /// will be moved to the front of the list.\n \t  max_count = Max_Count\n \t};\n \n-      // Metadata on which this functor operates.\n+      /// Metadata on which this functor operates.\n       typedef detail::lu_counter_metadata<size_type> \tmetadata_type;\n \n     private:\n       typedef detail::lu_counter_policy_base<size_type> \tbase_type;\n       typedef typename _Alloc::template rebind<metadata_type> __rebind_m;\n \n     public:\n-      // Reference to metadata on which this functor operates.\n+      /// Reference to metadata on which this functor operates.\n       typedef typename __rebind_m::other::reference \tmetadata_reference;\n \n-      // Creates a metadata object.\n+      /// Creates a metadata object.\n       metadata_type\n       operator()() const\n       { return base_type::operator()(max_count); }\n \n-      // Decides whether a metadata object should be moved to the front\n-      // of the list.\n+      /// Decides whether a metadata object should be moved to the front\n+      /// of the list.\n       bool\n       operator()(metadata_reference r_data) const\n       { return base_type::operator()(r_data, max_count); }"}, {"sha": "825699f4685b1a5b87007e044fc83a79b0d0435c", "filename": "libstdc++-v3/include/ext/pb_ds/priority_queue.hpp", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -49,10 +49,34 @@\n namespace __gnu_pbds\n {\n   /**\n-   *  @brief A priority queue composed of one specific heap policy.\n-   *  @ingroup pbds\n+   *  @defgroup heap-based\n+   *  @ingroup containers-pbds\n+   *  @{\n    */\n-  template<typename _Tv,\n+\n+  /**\n+   *  @defgroup heap-detail Base and Policy Classes\n+   *  @ingroup heap-based\n+   */\n+\n+  /**\n+   *  A priority queue composed of one specific heap policy.\n+   *\n+   *  @tparam _Tv \t    \tValue type.\n+   *  @tparam Cmp_Fn\t    \tComparison functor.\n+   *  @tparam Tag \t    \tInstantiating data structure type,\n+   *\t\t\t    \tsee container_tag.\n+   *  @tparam _Alloc \t    \tAllocator type.\n+   *\n+   *  Base is dispatched at compile time via Tag, from the following\n+   *  choices: binary_heap_tag, binomial_heap_tag, pairing_heap_tag,\n+   *           rc_binomial_heap_tag, thin_heap_tag\n+   *\n+   *  Base choices are: detail::binary_heap, detail::binomial_heap,\n+   *                    detail::pairing_heap, detail::rc_binomial_heap,\n+   *                    detail::thin_heap.\n+   */\n+   template<typename _Tv,\n \t   typename Cmp_Fn = std::less<_Tv>,\n \t   typename Tag = pairing_heap_tag,\n \t   typename _Alloc = std::allocator<char> >\n@@ -87,21 +111,21 @@ namespace __gnu_pbds\n \n     priority_queue() { }\n \n-    // Constructor taking some policy objects. r_cmp_fn will be copied\n-    // by the Cmp_Fn object of the container object.\n+    /// Constructor taking some policy objects. r_cmp_fn will be\n+    /// copied by the Cmp_Fn object of the container object.\n     priority_queue(const cmp_fn& r_cmp_fn) : base_type(r_cmp_fn) { }\n \n-    // Constructor taking __iterators to a range of value_types. The\n-    // value_types between first_it and last_it will be inserted into\n-    // the container object.\n+    /// Constructor taking __iterators to a range of value_types. The\n+    /// value_types between first_it and last_it will be inserted into\n+    /// the container object.\n     template<typename It>\n     priority_queue(It first_it, It last_it)\n     { base_type::copy_from_range(first_it, last_it); }\n \n-    // Constructor taking __iterators to a range of value_types and\n-    // some policy objects The value_types between first_it and\n-    // last_it will be inserted into the container object. r_cmp_fn\n-    // will be copied by the cmp_fn object of the container object.\n+    /// Constructor taking __iterators to a range of value_types and\n+    /// some policy objects The value_types between first_it and\n+    /// last_it will be inserted into the container object. r_cmp_fn\n+    /// will be copied by the cmp_fn object of the container object.\n     template<typename It>\n     priority_queue(It first_it, It last_it, const cmp_fn& r_cmp_fn)\n     : base_type(r_cmp_fn)\n@@ -129,5 +153,5 @@ namespace __gnu_pbds\n     { base_type::swap(other); }\n   };\n } // namespace __gnu_pbds\n-\n+ //@} heap-based\n #endif"}, {"sha": "f7544ff7ef3f24ca97531ba29a55fb53b0fd1056", "filename": "libstdc++-v3/include/ext/pb_ds/tag_and_trait.hpp", "status": "modified", "additions": 41, "deletions": 29, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -72,7 +72,7 @@ namespace __gnu_pbds\n    *  @{   \n    */\n   /// A trivial iterator tag. Signifies that the iterators has none of\n-  /// the STL's movement abilities.\n+  /// std::iterators's movement abilities.\n   struct trivial_iterator_tag\n   { };\n \n@@ -81,7 +81,7 @@ namespace __gnu_pbds\n \n \n   /**\n-   *  @defgroup invalidation_tags  Invalidation Guarantees.\n+   *  @defgroup invalidation_tags  Invalidation Guarantees\n    *  @ingroup tags\n    *  @{\n    */\n@@ -118,7 +118,7 @@ namespace __gnu_pbds\n \n \n   /**\n-   *  @defgroup ds_tags Data Structure Tag Hierarchy.\n+   *  @defgroup ds_tags Data Structure Type\n    *  @ingroup tags\n    *  @{\n    */\n@@ -147,7 +147,7 @@ namespace __gnu_pbds\n   /// Basic branch structure.\n   struct basic_branch_tag : public associative_tag { };\n \n-  /// tree.\n+  /// Basic tree structure.\n   struct tree_tag : public basic_branch_tag { };\n \n   /// Red-black tree.\n@@ -159,7 +159,7 @@ namespace __gnu_pbds\n   /// Ordered-vector tree.\n   struct ov_tree_tag : public tree_tag { };\n \n-  /// trie.\n+  /// Basic trie structure.\n   struct trie_tag : public basic_branch_tag { };\n \n   /// PATRICIA trie.\n@@ -210,6 +210,11 @@ namespace __gnu_pbds\n    */\n   struct null_type { };\n \n+  /// A null node updator, indicating that no node updates are required.\n+  template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n+    struct null_node_update : public null_type\n+    { };\n+\n \n   /// Primary template, container traits base.\n   template<typename _Tag>\n@@ -219,8 +224,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<cc_hash_tag>\n   {\n-    typedef cc_hash_tag \t\t\tcontainer_category;\n-    typedef point_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef cc_hash_tag \t\t\t\tcontainer_category;\n+    typedef point_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -235,8 +240,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<gp_hash_tag>\n   {\n-    typedef gp_hash_tag \t\t\tcontainer_category;\n-    typedef basic_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef gp_hash_tag \t\t\t\tcontainer_category;\n+    typedef basic_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -251,8 +256,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<rb_tree_tag>\n   {\n-    typedef rb_tree_tag \t\t\tcontainer_category;\n-    typedef range_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef rb_tree_tag \t\t\t\tcontainer_category;\n+    typedef range_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -267,8 +272,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<splay_tree_tag>\n   {\n-    typedef splay_tree_tag \t\t\tcontainer_category;\n-    typedef range_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef splay_tree_tag \t\t\t\tcontainer_category;\n+    typedef range_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -283,8 +288,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<ov_tree_tag>\n   {\n-    typedef ov_tree_tag \t\t\tcontainer_category;\n-    typedef basic_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef ov_tree_tag \t\t\t\tcontainer_category;\n+    typedef basic_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -299,8 +304,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<pat_trie_tag>\n   {\n-    typedef pat_trie_tag \t\t\tcontainer_category;\n-    typedef range_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef pat_trie_tag \t\t\t\tcontainer_category;\n+    typedef range_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -315,8 +320,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<list_update_tag>\n   {\n-    typedef list_update_tag \t\t\tcontainer_category;\n-    typedef point_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef list_update_tag \t\t\t\tcontainer_category;\n+    typedef point_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -331,8 +336,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<pairing_heap_tag>\n   {\n-    typedef pairing_heap_tag \t\t\tcontainer_category;\n-    typedef point_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef pairing_heap_tag \t\t\t\tcontainer_category;\n+    typedef point_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -347,8 +352,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<thin_heap_tag>\n   {\n-    typedef thin_heap_tag \t\t\tcontainer_category;\n-    typedef point_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef thin_heap_tag \t\t\t\tcontainer_category;\n+    typedef point_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -363,8 +368,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<binomial_heap_tag>\n   {\n-    typedef binomial_heap_tag \t\t\tcontainer_category;\n-    typedef point_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef binomial_heap_tag \t\t\t\tcontainer_category;\n+    typedef point_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -379,8 +384,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<rc_binomial_heap_tag>\n   {\n-    typedef rc_binomial_heap_tag \t\tcontainer_category;\n-    typedef point_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef rc_binomial_heap_tag \t\t\tcontainer_category;\n+    typedef point_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -395,8 +400,8 @@ namespace __gnu_pbds\n   template<>\n   struct container_traits_base<binary_heap_tag>\n   {\n-    typedef binary_heap_tag \t\t\tcontainer_category;\n-    typedef basic_invalidation_guarantee \tinvalidation_guarantee;\n+    typedef binary_heap_tag \t\t\t\tcontainer_category;\n+    typedef basic_invalidation_guarantee \t\tinvalidation_guarantee;\n \n     enum\n       {\n@@ -421,9 +426,16 @@ namespace __gnu_pbds\n \n     enum\n       {\n+\t/// True only if Cntnr objects guarantee storing  keys by order.\n \torder_preserving = base_type::order_preserving,\n+\n+\t/// True only if erasing a key can throw.\n \terase_can_throw = base_type::erase_can_throw,\n+\n+\t/// True only if split or join operations can throw.\n \tsplit_join_can_throw = base_type::split_join_can_throw,\n+\n+\t/// True only reverse iterators are supported.\n \treverse_iteration = base_type::reverse_iteration\n       };\n   };"}, {"sha": "ecc4991f720254d9ea4fab39b90450ba5c2e61b3", "filename": "libstdc++-v3/include/ext/pb_ds/tree_policy.hpp", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftree_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -79,66 +79,66 @@ namespace __gnu_pbds\n     typedef typename node_const_iterator::value_type \tconst_iterator;\n     typedef typename node_iterator::value_type \t\titerator;\n \n-    // Finds an entry by __order. Returns a const_iterator to the\n-    // entry with the __order order, or a const_iterator to the\n-    // container object's end if order is at least the size of the\n-    // container object.\n+    /// Finds an entry by __order. Returns a const_iterator to the\n+    /// entry with the __order order, or a const_iterator to the\n+    /// container object's end if order is at least the size of the\n+    /// container object.\n     inline const_iterator\n     find_by_order(size_type) const;\n \n-    // Finds an entry by __order. Returns an iterator to the entry\n-    // with the __order order, or an iterator to the container\n-    // object's end if order is at least the size of the container\n-    // object.\n+    /// Finds an entry by __order. Returns an iterator to the entry\n+    /// with the __order order, or an iterator to the container\n+    /// object's end if order is at least the size of the container\n+    /// object.\n     inline iterator\n     find_by_order(size_type);\n \n-    // Returns the order of a key within a sequence. For exapmle, if\n-    // r_key is the smallest key, this method will return 0; if r_key\n-    // is a key between the smallest and next key, this method will\n-    // return 1; if r_key is a key larger than the largest key, this\n-    // method will return the size of r_c.\n+    /// Returns the order of a key within a sequence. For exapmle, if\n+    /// r_key is the smallest key, this method will return 0; if r_key\n+    /// is a key between the smallest and next key, this method will\n+    /// return 1; if r_key is a key larger than the largest key, this\n+    /// method will return the size of r_c.\n     inline size_type\n     order_of_key(key_const_reference) const;\n \n   private:\n-    // Const reference to the container's value-type.\n+    /// Const reference to the container's value-type.\n     typedef typename base_type::const_reference \tconst_reference;\n \n-    // Const pointer to the container's value-type.\n+    /// Const pointer to the container's value-type.\n     typedef typename base_type::const_pointer \t\tconst_pointer;\n \n     typedef typename _Alloc::template rebind<metadata_type>::other __rebind_m;\n \n-    // Const metadata reference.\n+    /// Const metadata reference.\n     typedef typename __rebind_m::const_reference       metadata_const_reference;\n \n-    // Metadata reference.\n+    /// Metadata reference.\n     typedef typename __rebind_m::reference \t\tmetadata_reference;\n \n-    // Returns the node_const_iterator associated with the tree's root node.\n+    /// Returns the node_const_iterator associated with the tree's root node.\n     virtual node_const_iterator\n     node_begin() const = 0;\n \n-    // Returns the node_iterator associated with the tree's root node.\n+    /// Returns the node_iterator associated with the tree's root node.\n     virtual node_iterator\n     node_begin() = 0;\n \n-    // Returns the node_const_iterator associated with a just-after leaf node.\n+    /// Returns the node_const_iterator associated with a just-after leaf node.\n     virtual node_const_iterator\n     node_end() const = 0;\n \n-    // Returns the node_iterator associated with a just-after leaf node.\n+    /// Returns the node_iterator associated with a just-after leaf node.\n     virtual node_iterator\n     node_end() = 0;\n \n-    // Access to the cmp_fn object.\n+    /// Access to the cmp_fn object.\n     virtual cmp_fn& \n     get_cmp_fn() = 0;\n \n   protected:\n-    // Updates the rank of a node through a node_iterator node_it;\n-    // end_nd_it is the end node iterator.\n+    /// Updates the rank of a node through a node_iterator node_it;\n+    /// end_nd_it is the end node iterator.\n     inline void\n     operator()(node_iterator, node_const_iterator) const;\n "}, {"sha": "a5c3399f3f45114e20c6f9f9f9e42916826c02b2", "filename": "libstdc++-v3/include/ext/pb_ds/trie_policy.hpp", "status": "modified", "additions": 67, "deletions": 58, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a96b3b0c49394c861df8c07a7c506b95082937/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftrie_policy.hpp?ref=30a96b3b0c49394c861df8c07a7c506b95082937", "patch": "@@ -57,7 +57,16 @@ namespace __gnu_pbds\n #define PB_DS_CLASS_C_DEC \\\n   trie_string_access_traits<String, Min_E_Val,Max_E_Val,Reverse,_Alloc>\n \n-  /// Element access traits for string types.\n+  /**\n+   *  Element access traits for string types.\n+   *\n+   *  @tparam String \t    \tString type.\n+   *  @tparam Min_E_Val        \tMinimal element value.\n+   *  @tparam Max_E_Val\t    \tMaximum element value.\n+   *  @tparam Reverse\t        Reverse iteration should be used.\n+   *                            Default: false.\n+   *  @tparam _Alloc \t    \tAllocator type.\n+   */\n   template<typename String = std::string,\n \t   typename String::value_type Min_E_Val = detail::__numeric_traits<typename String::value_type>::__min,\n \t   typename String::value_type Max_E_Val = detail::__numeric_traits<typename String::value_type>::__max,\n@@ -76,12 +85,12 @@ namespace __gnu_pbds\n \treverse = Reverse\n       };\n \n-    // Element const iterator type.\n+    /// Element const iterator type.\n     typedef typename detail::__conditional_type<Reverse, \\\n \t\t       typename String::const_reverse_iterator, \\\n \t\t       typename String::const_iterator>::__type const_iterator;\n \n-    // Element type.\n+    /// Element type.\n     typedef typename std::iterator_traits<const_iterator>::value_type e_type;\n \n     enum\n@@ -92,17 +101,17 @@ namespace __gnu_pbds\n       };\n     PB_DS_STATIC_ASSERT(min_max_size, max_size >= 2);\n \n-    // Returns a const_iterator to the first element of\n-    // key_const_reference agumnet.\n+    /// Returns a const_iterator to the first element of\n+    /// key_const_reference agumnet.\n     inline static const_iterator\n     begin(key_const_reference);\n \n-    // Returns a const_iterator to the after-last element of\n-    // key_const_reference argument.\n+    /// Returns a const_iterator to the after-last element of\n+    /// key_const_reference argument.\n     inline static const_iterator\n     end(key_const_reference);\n \n-    // Maps an element to a position.\n+    /// Maps an element to a position.\n     inline static size_type\n     e_pos(e_type e);\n \n@@ -153,45 +162,45 @@ namespace __gnu_pbds\n     typedef typename base_type::key_type \t\tkey_type;\n     typedef typename base_type::key_const_reference \tkey_const_reference;\n \n-    // Element access traits.\n+    /// Element access traits.\n     typedef _ATraits \t\t\t\taccess_traits;\n \n-    // Const element iterator.\n+    /// Const element iterator.\n     typedef typename access_traits::const_iterator \ta_const_iterator;\n \n-    // _Alloc type.\n+    /// _Alloc type.\n     typedef _Alloc \t       \t\t\t\tallocator_type;\n \n-    // Size type.\n+    /// Size type.\n     typedef typename allocator_type::size_type \t\tsize_type;\n     typedef null_type \t\t\t\t\tmetadata_type;\n     typedef Node_Itr \t\t\t\t\tnode_iterator;\n     typedef Node_CItr \t\t\t\t\tnode_const_iterator;\n     typedef typename node_iterator::value_type \t\titerator;\n     typedef typename node_const_iterator::value_type \tconst_iterator;\n \n-    // Finds the const iterator range corresponding to all values\n-    // whose prefixes match r_key.\n+    /// Finds the const iterator range corresponding to all values\n+    /// whose prefixes match r_key.\n     std::pair<const_iterator, const_iterator>\n     prefix_range(key_const_reference) const;\n \n-    // Finds the iterator range corresponding to all values whose\n-    // prefixes match r_key.\n+    /// Finds the iterator range corresponding to all values whose\n+    /// prefixes match r_key.\n     std::pair<iterator, iterator>\n     prefix_range(key_const_reference);\n \n-    // Finds the const iterator range corresponding to all values\n-    // whose prefixes match [b, e).\n+    /// Finds the const iterator range corresponding to all values\n+    /// whose prefixes match [b, e).\n     std::pair<const_iterator, const_iterator>\n     prefix_range(a_const_iterator, a_const_iterator) const;\n \n-    // Finds the iterator range corresponding to all values whose\n-    // prefixes match [b, e).\n+    /// Finds the iterator range corresponding to all values whose\n+    /// prefixes match [b, e).\n     std::pair<iterator, iterator>\n     prefix_range(a_const_iterator, a_const_iterator);\n \n   protected:\n-    // Called to update a node's metadata.\n+    /// Called to update a node's metadata.\n     inline void\n     operator()(node_iterator node_it, node_const_iterator end_nd_it) const;\n \n@@ -200,31 +209,31 @@ namespace __gnu_pbds\n     next_child(node_iterator, a_const_iterator, a_const_iterator,\n \t       node_iterator, const access_traits&);\n \n-    // Returns the const iterator associated with the just-after last element.\n+    /// Returns the const iterator associated with the just-after last element.\n     virtual const_iterator\n     end() const = 0;\n \n-    // Returns the iterator associated with the just-after last element.\n+    /// Returns the iterator associated with the just-after last element.\n     virtual iterator\n     end() = 0;\n \n-    // Returns the node_const_iterator associated with the trie's root node.\n+    /// Returns the node_const_iterator associated with the trie's root node.\n     virtual node_const_iterator\n     node_begin() const = 0;\n \n-    // Returns the node_iterator associated with the trie's root node.\n+    /// Returns the node_iterator associated with the trie's root node.\n     virtual node_iterator\n     node_begin() = 0;\n \n-    // Returns the node_const_iterator associated with a just-after leaf node.\n+    /// Returns the node_const_iterator associated with a just-after leaf node.\n     virtual node_const_iterator\n     node_end() const = 0;\n \n-    // Returns the node_iterator associated with a just-after leaf node.\n+    /// Returns the node_iterator associated with a just-after leaf node.\n     virtual node_iterator\n     node_end() = 0;\n \n-    // Access to the cmp_fn object.\n+    /// Access to the cmp_fn object.\n     virtual const access_traits&\n     get_access_traits() const = 0;\n   };\n@@ -261,39 +270,39 @@ namespace __gnu_pbds\n     typedef typename node_const_iterator::value_type \tconst_iterator;\n     typedef typename node_iterator::value_type \t\titerator;\n \n-    // Finds an entry by __order. Returns a const_iterator to the\n-    // entry with the __order order, or a const_iterator to the\n-    // container object's end if order is at least the size of the\n-    // container object.\n+    /// Finds an entry by __order. Returns a const_iterator to the\n+    /// entry with the __order order, or a const_iterator to the\n+    /// container object's end if order is at least the size of the\n+    /// container object.\n     inline const_iterator\n     find_by_order(size_type) const;\n \n-    // Finds an entry by __order. Returns an iterator to the entry\n-    // with the __order order, or an iterator to the container\n-    // object's end if order is at least the size of the container\n-    // object.\n+    /// Finds an entry by __order. Returns an iterator to the entry\n+    /// with the __order order, or an iterator to the container\n+    /// object's end if order is at least the size of the container\n+    /// object.\n     inline iterator\n     find_by_order(size_type);\n \n-    // Returns the order of a key within a sequence. For exapmle, if\n-    // r_key is the smallest key, this method will return 0; if r_key\n-    // is a key between the smallest and next key, this method will\n-    // return 1; if r_key is a key larger than the largest key, this\n-    // method will return the size of r_c.\n+    /// Returns the order of a key within a sequence. For exapmle, if\n+    /// r_key is the smallest key, this method will return 0; if r_key\n+    /// is a key between the smallest and next key, this method will\n+    /// return 1; if r_key is a key larger than the largest key, this\n+    /// method will return the size of r_c.\n     inline size_type\n     order_of_key(key_const_reference) const;\n \n-    // Returns the order of a prefix within a sequence. For exapmle,\n-    // if [b, e] is the smallest prefix, this method will return 0; if\n-    // r_key is a key between the smallest and next key, this method\n-    // will return 1; if r_key is a key larger than the largest key,\n-    // this method will return the size of r_c.\n+    /// Returns the order of a prefix within a sequence. For exapmle,\n+    /// if [b, e] is the smallest prefix, this method will return 0; if\n+    /// r_key is a key between the smallest and next key, this method\n+    /// will return 1; if r_key is a key larger than the largest key,\n+    /// this method will return the size of r_c.\n     inline size_type\n     order_of_prefix(a_const_iterator, a_const_iterator) const;\n \n   protected:\n-    // Updates the rank of a node through a node_iterator node_it;\n-    // end_nd_it is the end node iterator.\n+    /// Updates the rank of a node through a node_iterator node_it;\n+    /// end_nd_it is the end node iterator.\n     inline void\n     operator()(node_iterator, node_const_iterator) const;\n \n@@ -306,37 +315,37 @@ namespace __gnu_pbds\n     typedef typename __rebind_ma::const_reference      metadata_const_reference;\n     typedef typename __rebind_ma::reference \t\tmetadata_reference;\n \n-    // Returns true if the container is empty.\n+    /// Returns true if the container is empty.\n     virtual bool\n     empty() const = 0;\n \n-    // Returns the iterator associated with the trie's first element.\n+    /// Returns the iterator associated with the trie's first element.\n     virtual iterator\n     begin() = 0;\n \n-    // Returns the iterator associated with the trie's\n-    // just-after-last element.\n+    /// Returns the iterator associated with the trie's\n+    /// just-after-last element.\n     virtual iterator\n     end() = 0;\n \n-    // Returns the node_const_iterator associated with the trie's root node.\n+    /// Returns the node_const_iterator associated with the trie's root node.\n     virtual node_const_iterator\n     node_begin() const = 0;\n \n-    // Returns the node_iterator associated with the trie's root node.\n+    /// Returns the node_iterator associated with the trie's root node.\n     virtual node_iterator\n     node_begin() = 0;\n \n-    // Returns the node_const_iterator associated with a just-after\n-    // leaf node.\n+    /// Returns the node_const_iterator associated with a just-after\n+    /// leaf node.\n     virtual node_const_iterator\n     node_end() const = 0;\n \n-    // Returns the node_iterator associated with a just-after leaf node.\n+    /// Returns the node_iterator associated with a just-after leaf node.\n     virtual node_iterator\n     node_end() = 0;\n \n-    // Access to the cmp_fn object.\n+    /// Access to the cmp_fn object.\n     virtual access_traits&\n     get_access_traits() = 0;\n   };"}]}