{"sha": "06fcf75439fbafae348fa33a0630f7bd83a835aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmY2Y3NTQzOWZiYWZhZTM0OGZhMzNhMDYzMGY3YmQ4M2E4MzVhYQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-09-14T01:17:31Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-09-14T01:17:31Z"}, "message": "posix.cc (_Jv_platform_nanotime): Return nanoseconds, not microseconds; use gettimeofday when available.\n\n\t* posix.cc (_Jv_platform_nanotime): Return nanoseconds, not\n\tmicroseconds; use gettimeofday when available.\n\t* posix-threads.cc (_Jv_CondWait): Improve accuracy and range of\n\ttimeout calculation.\n\t* testsuite/libjava.lang/Thread_Sleep_2.java: New.\n\t* testsuite/libjava.lang/Thread_Sleep_2.out: New.\n\t* testsuite/libjava.lang/Thread_Sleep_2.xfail: New.\n\nFrom-SVN: r116941", "tree": {"sha": "a5280d81d511353d5613e3482a10f15f1a24c4c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5280d81d511353d5613e3482a10f15f1a24c4c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06fcf75439fbafae348fa33a0630f7bd83a835aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06fcf75439fbafae348fa33a0630f7bd83a835aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06fcf75439fbafae348fa33a0630f7bd83a835aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06fcf75439fbafae348fa33a0630f7bd83a835aa/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5efb27f743ce6bab0fe4f33a9573313e24dacdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5efb27f743ce6bab0fe4f33a9573313e24dacdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5efb27f743ce6bab0fe4f33a9573313e24dacdb"}], "stats": {"total": 97, "additions": 81, "deletions": 16}, "files": [{"sha": "3c7ee13f1954a46301479656e8af8c148cef208f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=06fcf75439fbafae348fa33a0630f7bd83a835aa", "patch": "@@ -1,3 +1,13 @@\n+2006-09-13  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* posix.cc (_Jv_platform_nanotime): Return nanoseconds, not\n+\tmicroseconds; use gettimeofday when available.\n+\t* posix-threads.cc (_Jv_CondWait): Improve accuracy and range of\n+\ttimeout calculation.\n+\t* testsuite/libjava.lang/Thread_Sleep_2.java: New.\n+\t* testsuite/libjava.lang/Thread_Sleep_2.out: New.\n+\t* testsuite/libjava.lang/Thread_Sleep_2.xfail: New.\n+\n 2006-09-12  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/29013:"}, {"sha": "41937db6c52aa0e259f40238201841c928b54cae", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=06fcf75439fbafae348fa33a0630f7bd83a835aa", "patch": "@@ -96,16 +96,29 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n   if (millis > 0 || nanos > 0)\n     {\n       // Calculate the abstime corresponding to the timeout.\n-      // Everything is in milliseconds.\n-      //\n-      // We use `unsigned long long' rather than jlong because our\n-      // caller may pass up to Long.MAX_VALUE millis.  This would\n-      // overflow the range of a jlong when added to the current time.\n-      \n-      unsigned long long startTime \n-\t= (unsigned long long)java::lang::System::currentTimeMillis();\n-      unsigned long long m = (unsigned long long)millis + startTime;\n-      unsigned long long seconds = m / 1000; \n+      unsigned long long seconds;\n+      unsigned long usec;\n+\n+      // For better accuracy, should use pthread_condattr_setclock\n+      // and clock_gettime.\n+#ifdef HAVE_GETTIMEOFDAY\n+      timeval tv;\n+      gettimeofday (&tv, NULL);\n+      usec = tv.tv_usec;\n+      seconds = tv.tv_sec;\n+#else\n+      unsigned long long startTime = java::lang::System::currentTimeMillis();\n+      seconds = startTime / 1000;\n+      /* Assume we're about half-way through this millisecond.  */\n+      usec = (startTime % 1000) * 1000 + 500;\n+#endif\n+      /* These next two statements cannot overflow.  */\n+      usec += nanos / 1000;\n+      usec += (millis % 1000) * 1000;\n+      /* These two statements could overflow only if tv.tv_sec was\n+\t insanely large.  */\n+      seconds += millis / 1000;\n+      seconds += usec / 1000000;\n \n       ts.tv_sec = seconds;\n       if (ts.tv_sec < 0 || (unsigned long long)ts.tv_sec != seconds)\n@@ -115,10 +128,8 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n           millis = nanos = 0;\n         }\n       else\n-        {\n-          m %= 1000;\n-          ts.tv_nsec = m * 1000000 + (unsigned long long)nanos;\n-        }\n+\t/* This next statement also cannot overflow.  */\n+\tts.tv_nsec = (usec % 1000000) * 1000 + (nanos % 1000);\n     }\n \n   _Jv_Thread_t *current = _Jv_ThreadCurrentData ();"}, {"sha": "df798b88a2b4a0d18b42b9ee5ad4a2286ee390bd", "filename": "libjava/posix.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=06fcf75439fbafae348fa33a0630f7bd83a835aa", "patch": "@@ -87,12 +87,20 @@ _Jv_platform_nanotime ()\n   if (clock_gettime (id, &now) == 0)\n     {\n       jlong result = (jlong) now.tv_sec;\n-      result = result * 1000 * 1000 + now.tv_nsec;\n+      result = result * 1000000000LL + now.tv_nsec;\n       return result;\n     }\n   // clock_gettime failed, but we can fall through.\n #endif // HAVE_CLOCK_GETTIME\n-  return _Jv_platform_gettimeofday () * 1000LL;\n+#if defined (HAVE_GETTIMEOFDAY)\n+ {\n+   timeval tv;\n+   gettimeofday (&tv, NULL);\n+   return (tv.tv_sec * 1000000000LL) + tv.tv_usec * 1000LL;\n+ }\n+#else\n+  return _Jv_platform_gettimeofday () * 1000000LL;\n+#endif\n }\n \n // Platform-specific VM initialization."}, {"sha": "37c0d3bb6650c58c4dbf092b78ad9352952ec7ce", "filename": "libjava/testsuite/libjava.lang/Thread_Sleep_2.java", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.java?ref=06fcf75439fbafae348fa33a0630f7bd83a835aa", "patch": "@@ -0,0 +1,34 @@\n+// Test that Thread.sleep() is accurate\n+// and that nanoTime actually measures in nanoseconds.\n+\n+public class Thread_Sleep_2\n+{\n+  public static void main(String args[])\n+  {\n+    try\n+    {\n+      boolean ok = true;\n+      for (int i = 0; i < 100; i++)\n+\t{\n+\t  long start = System.nanoTime();\n+\t  Thread.sleep(10);\n+\t  long end = System.nanoTime();\n+\t  if ((end - start) < 10000000)\n+\t    {\n+\t      System.out.print (\"failed, iteration \");\n+\t      System.out.print (i);\n+\t      System.out.print (\", time \");\n+\t      System.out.print (end - start);\n+\t      System.out.println (\"ns\");\n+\t      ok = false;\n+\t    }\n+\t}\n+      if (ok)\n+\tSystem.out.println (\"ok\");\n+    }\n+    catch (InterruptedException x)\n+    {\n+      System.out.println(\"error: Thread interrupted.\");\n+    }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Thread_Sleep_2.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.out?ref=06fcf75439fbafae348fa33a0630f7bd83a835aa", "patch": "@@ -0,0 +1 @@\n+ok"}, {"sha": "3f95317a45002fabbf1795b806f82f076eeb5760", "filename": "libjava/testsuite/libjava.lang/Thread_Sleep_2.xfail", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fcf75439fbafae348fa33a0630f7bd83a835aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep_2.xfail?ref=06fcf75439fbafae348fa33a0630f7bd83a835aa", "patch": "@@ -0,0 +1 @@\n+need-threads"}]}