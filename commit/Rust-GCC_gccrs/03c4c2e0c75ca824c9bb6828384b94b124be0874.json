{"sha": "03c4c2e0c75ca824c9bb6828384b94b124be0874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjNGMyZTBjNzVjYTgyNGM5YmI2ODI4Mzg0Yjk0YjEyNGJlMDg3NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-27T11:10:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-27T11:10:09Z"}, "message": "re PR tree-optimization/33870 (miscompiles sqlite)\n\n2007-10-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/33870\n\t* tree-ssa-operands.c (add_vars_for_offset): Reduce code\n\tduplication.  Remove redundant call to access_can_touch_variable.\n\t(add_vars_for_bitmap): New helper for recursing over MPT contents.\n\t(add_virtual_operand): Use it.\n\n\t* gcc.dg/tree-ssa/alias-15.c: New testcase.\n\t* gcc.c-torture/execute/pr33870.c: Likewise.\n\nFrom-SVN: r129675", "tree": {"sha": "d85cb716334c8b33922dc03cb2aa35570be10c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85cb716334c8b33922dc03cb2aa35570be10c3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03c4c2e0c75ca824c9bb6828384b94b124be0874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c4c2e0c75ca824c9bb6828384b94b124be0874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c4c2e0c75ca824c9bb6828384b94b124be0874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c4c2e0c75ca824c9bb6828384b94b124be0874/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bd1ffcd4a2d604b701e6463191782c3836a8bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd1ffcd4a2d604b701e6463191782c3836a8bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd1ffcd4a2d604b701e6463191782c3836a8bf0"}], "stats": {"total": 229, "additions": 168, "deletions": 61}, "files": [{"sha": "78bb02d48f64e71c904dd681899543c5a5ff6c2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03c4c2e0c75ca824c9bb6828384b94b124be0874", "patch": "@@ -1,3 +1,11 @@\n+2007-10-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33870\n+\t* tree-ssa-operands.c (add_vars_for_offset): Reduce code\n+\tduplication.  Remove redundant call to access_can_touch_variable.\n+\t(add_vars_for_bitmap): New helper for recursing over MPT contents.\n+\t(add_virtual_operand): Use it.\n+\n 2007-10-26  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR fortran/31608"}, {"sha": "6d69fa1776b403a976bd2ea953890022db944a59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03c4c2e0c75ca824c9bb6828384b94b124be0874", "patch": "@@ -1,3 +1,9 @@\n+2007-10-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33870\n+\t* gcc.dg/tree-ssa/alias-15.c: New testcase.\n+\t* gcc.c-torture/execute/pr33870.c: Likewise.\n+\n 2007-10-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/33162"}, {"sha": "9189b4a905458fc4b0ec9c725bef774b35a42ac1", "filename": "gcc/testsuite/gcc.c-torture/execute/pr33870.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr33870.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr33870.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr33870.c?ref=03c4c2e0c75ca824c9bb6828384b94b124be0874", "patch": "@@ -0,0 +1,87 @@\n+extern void abort (void);\n+\n+typedef struct PgHdr PgHdr;\n+typedef unsigned char u8;\n+struct PgHdr {\n+  unsigned int pgno;\n+  PgHdr *pNextHash, *pPrevHash;\n+  PgHdr *pNextFree, *pPrevFree;\n+  PgHdr *pNextAll;\n+  u8 inJournal;\n+  short int nRef;\n+  PgHdr *pDirty, *pPrevDirty;\n+  unsigned int notUsed;\n+};\n+\n+static inline PgHdr *merge_pagelist(PgHdr *pA, PgHdr *pB)\n+{\n+  PgHdr result;\n+  PgHdr *pTail;\n+  pTail = &result;\n+  while( pA && pB ){\n+    if( pA->pgno<pB->pgno ){\n+      pTail->pDirty = pA;\n+      pTail = pA;\n+      pA = pA->pDirty;\n+    }else{\n+      pTail->pDirty = pB;\n+      pTail = pB;\n+      pB = pB->pDirty;\n+    }\n+  }\n+  if( pA ){\n+    pTail->pDirty = pA;\n+  }else if( pB ){\n+    pTail->pDirty = pB;\n+  }else{\n+    pTail->pDirty = 0;\n+  }\n+  return result.pDirty;\n+}\n+\n+PgHdr * __attribute__((noinline)) sort_pagelist(PgHdr *pIn)\n+{\n+  PgHdr *a[25], *p;\n+  int i;\n+  __builtin_memset (a, 0, sizeof (a));\n+  while( pIn ){\n+    p = pIn;\n+    pIn = p->pDirty;\n+    p->pDirty = 0;\n+    for(i=0; i<25 -1; i++){\n+      if( a[i]==0 ){\n+        a[i] = p;\n+        break;\n+      }else{\n+        p = merge_pagelist(a[i], p);\n+        a[i] = 0;\n+      }\n+    }\n+    if( i==25 -1 ){\n+      a[i] = merge_pagelist(a[i], p);\n+    }\n+  }\n+  p = a[0];\n+  for(i=1; i<25; i++){\n+    p = merge_pagelist (p, a[i]);\n+  }\n+  return p;\n+}\n+\n+int main()\n+{\n+  PgHdr a[5];\n+  PgHdr *p;\n+  a[0].pgno = 5;\n+  a[0].pDirty = &a[1];\n+  a[1].pgno = 4;\n+  a[1].pDirty = &a[2];\n+  a[2].pgno = 1;\n+  a[2].pDirty = &a[3];\n+  a[3].pgno = 3;\n+  a[3].pDirty = 0;\n+  p = sort_pagelist (&a[0]);\n+  if (p->pDirty == p)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "9e409f082167350b0f86c6eb92319ceafb2a48f7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-15.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-15.c?ref=03c4c2e0c75ca824c9bb6828384b94b124be0874", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-early-inlining -fdump-tree-salias-vops-details\" } */\n+\n+struct foo {\n+  int a;\n+  struct X {\n+    int b[4];\n+  } b;\n+} m;\n+static inline struct X *wrap(struct X *p) { return p; }\n+int test2(void)\n+{\n+  struct X *p = wrap(&m.b);\n+  /* Both memory references need to alias the same SFT.  */\n+  return p->b[3] - m.b.b[3];\n+}\n+\n+/* { dg-final { scan-tree-dump \"SFT.1 created for var m offset 128\" \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"VUSE <SFT.1_\" 2 \"salias\" } } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "206c04bd484ddc6e6c855582baf4c24b237299ef", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 47, "deletions": 61, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c4c2e0c75ca824c9bb6828384b94b124be0874/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=03c4c2e0c75ca824c9bb6828384b94b124be0874", "patch": "@@ -1419,55 +1419,57 @@ add_vars_for_offset (tree full_ref, tree var, HOST_WIDE_INT offset,\n     }\n   else if (TREE_CODE (var) == STRUCT_FIELD_TAG)\n     {      \n-      if (size == -1)\n+      bool added = false;\n+      subvar_t sv = get_subvars_for_var (SFT_PARENT_VAR (var));\n+      for (; sv; sv = sv->next)\n \t{\n-\t  bool added = false;\n-\t  subvar_t sv = get_subvars_for_var (SFT_PARENT_VAR (var));\n-\t  for (; sv; sv = sv->next)\n-\t    {\n-\t      if (overlap_subvar (SFT_OFFSET (var) + offset, size,\n-\t\t\t\t  sv->var, NULL)\n-\t\t  && access_can_touch_variable (full_ref, sv->var,\n-\t\t\t\t\t\toffset, size))\n-\t\t{\n-\t\t  added = true;\n-\t\t  if (is_def)\n-\t\t    append_vdef (sv->var);\n-\t\t  else\n-\t\t    append_vuse (sv->var);\n-\t\t}\n-\t    }\n-\t  return added;\n-\t}\n-      else\n-\t{\n-\t  bool added = false;\n-\t  subvar_t sv = get_subvars_for_var (SFT_PARENT_VAR (var));\n-\t  for (; sv; sv = sv->next)\n+\t  /* Once we hit the end of the parts that could touch,\n+\t     stop looking.  */\n+\t  if (size != -1\n+\t      && SFT_OFFSET (var) + offset + size <= SFT_OFFSET (sv->var))\n+\t    break;\n+\t  if (overlap_subvar (SFT_OFFSET (var) + offset, size, sv->var, NULL))\n \t    {\n-\t      /* Once we hit the end of the parts that could touch,\n-\t\t stop looking.  */\n-\t      if (SFT_OFFSET (var) + offset + size <= SFT_OFFSET (sv->var))\n-\t\tbreak;\n-\t      if (overlap_subvar (SFT_OFFSET (var) + offset, size,\n-\t\t\t\t  sv->var, NULL)\n-\t\t  && access_can_touch_variable (full_ref, sv->var, offset, \n-\t\t\t\t\t\tsize))\n-\t\t{\n-\t\t  added = true;\n-\t\t  if (is_def)\n-\t\t    append_vdef (sv->var);\n-\t\t  else\n-\t\t    append_vuse (sv->var);\n-\t\t}\n+\t      added = true;\n+\t      if (is_def)\n+\t\tappend_vdef (sv->var);\n+\t      else\n+\t\tappend_vuse (sv->var);\n \t    }\n-\t  return added;\n \t}\n+      return added;\n     }\n   \n   return false;\n }\n \n+/* Add all aliases from ALIASES as virtual operands for the access\n+   FULL_REF at OFFSET and size SIZE.  IS_CALL_SITE is true if the\n+   stmt of the reference is a call.  IS_DEF is true if we should add\n+   VDEF virtual operands, otherwise we'll add VUSEs.  *NONE_ADDED\n+   is set to false once the first virtual operand was added.  */\n+\n+static void\n+add_vars_for_bitmap (bitmap aliases, tree full_ref,\n+\t\t     HOST_WIDE_INT offset, HOST_WIDE_INT size,\n+\t\t     bool is_call_site, bool is_def, bool *none_added)\n+{\n+  bitmap_iterator bi;\n+  unsigned int i;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (aliases, 0, i, bi)\n+    {\n+      tree al = referenced_var (i);\n+\n+      if (TREE_CODE (al) == MEMORY_PARTITION_TAG)\n+\tadd_vars_for_bitmap (MPT_SYMBOLS (al), full_ref,\n+\t\t\t     offset, size, is_call_site, is_def, none_added);\n+      else\n+\t*none_added &= !add_vars_for_offset (full_ref, al, offset, size,\n+\t\t\t\t\t     is_call_site, is_def);\n+    }\n+}\n+\n /* Add VAR to the virtual operands array.  FLAGS is as in\n    get_expr_operands.  FULL_REF is a tree that contains the entire\n    pointer dereference expression, if available, or NULL otherwise.\n@@ -1530,24 +1532,17 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n     }\n   else\n     {\n-      bitmap_iterator bi;\n-      unsigned int i;\n-      tree al;\n+      bool none_added = true;\n       \n       /* The variable is aliased.  Add its aliases to the virtual\n \t operands.  */\n       gcc_assert (!bitmap_empty_p (aliases));\n-      \n+\n+      add_vars_for_bitmap (aliases, full_ref, offset, size,\n+\t\t\t   is_call_site, flags & opf_def, &none_added);\n+\n       if (flags & opf_def)\n \t{\n-\t  bool none_added = true;\n-\t  EXECUTE_IF_SET_IN_BITMAP (aliases, 0, i, bi)\n-\t    {\n-\t      al = referenced_var (i);\n-\t      none_added &= !add_vars_for_offset (full_ref, al, offset, size,\n-\t\t\t\t\t\t  is_call_site, true);\n-\t    }\n-\n \t  /* If the variable is also an alias tag, add a virtual\n \t     operand for it, otherwise we will miss representing\n \t     references to the members of the variable's alias set.\t     \n@@ -1566,15 +1561,6 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t}\n       else\n \t{\n-\t  bool none_added = true;\n-\t  EXECUTE_IF_SET_IN_BITMAP (aliases, 0, i, bi)\n-\t    {\n-\t      al = referenced_var (i);\n-\t      none_added &= !add_vars_for_offset (full_ref, al, offset, size,\n-\t\t\t\t\t\t  is_call_site, false);\n-\t      \n-\t    }\n-\t  \n \t  /* Even if no aliases have been added, we still need to\n \t     establish def-use and use-def chains, lest\n \t     transformations think that this is not a memory"}]}