{"sha": "98ad452728f51d6f44c7ff71e3d20c6c1dca20fd", "node_id": "C_kwDOANBUbNoAKDk4YWQ0NTI3MjhmNTFkNmY0NGM3ZmY3MWUzZDIwYzZjMWRjYTIwZmQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-05T18:23:15Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-10T09:39:42Z"}, "message": "Add op1_range for __builtin_signbit.\n\nThis is the op1_range range-op entry for __builtin_signbit.  It allows\nus to wind back through a call to signbit.\n\nFor example, on the true side of if (__builtin_signbit(x_5) != 0) we\ncan crop down the range of x_5 to:\n\n\t[frange] float [-Inf, -0.0 (-0x0.0p+0)] -NAN\n\nSimilarly on the false side, we can crop to:\n\n\t[frange] float [0.0 (0x0.0p+0), +Inf] +NAN\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-op.cc: Add op1_range entry for __builtin_signbit.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp-float-signbit-3.c: New test.", "tree": {"sha": "c1c9dd3ec59576e070deb906741388e0974f49d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1c9dd3ec59576e070deb906741388e0974f49d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8520fa9d745b3a974d5eb98cb4b9a9021b215d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8520fa9d745b3a974d5eb98cb4b9a9021b215d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8520fa9d745b3a974d5eb98cb4b9a9021b215d"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "abc33e7af0ce879f0d9eeb8641f19a831ead0f2e", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=98ad452728f51d6f44c7ff71e3d20c6c1dca20fd", "patch": "@@ -306,6 +306,7 @@ class cfn_signbit : public range_operator_float\n {\n public:\n   using range_operator_float::fold_range;\n+  using range_operator_float::op1_range;\n   virtual bool fold_range (irange &r, tree type, const frange &lh,\n \t\t\t   const irange &, relation_kind) const\n   {\n@@ -320,6 +321,25 @@ class cfn_signbit : public range_operator_float\n       }\n    return false;\n   }\n+  virtual bool op1_range (frange &r, tree type, const irange &lhs,\n+\t\t\t  const frange &, relation_kind) const override\n+  {\n+    if (lhs.zero_p ())\n+      {\n+\tr.set (type, dconst0, frange_val_max (type));\n+\tr.update_nan (false);\n+\treturn true;\n+      }\n+    if (!lhs.contains_p (build_zero_cst (lhs.type ())))\n+      {\n+\tREAL_VALUE_TYPE dconstm0 = dconst0;\n+\tdconstm0.sign = 1;\n+\tr.set (type, frange_val_min (type), dconstm0);\n+\tr.update_nan (true);\n+\treturn true;\n+      }\n+    return false;\n+  }\n } op_cfn_signbit;\n \n // Implement range operator for CFN_BUILT_IN_TOUPPER and CFN_BUILT_IN_TOLOWER."}, {"sha": "182a33fca6e324abded473a0e2f1109fa337794f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp-float-signbit-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ad452728f51d6f44c7ff71e3d20c6c1dca20fd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-3.c?ref=98ad452728f51d6f44c7ff71e3d20c6c1dca20fd", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -ffinite-math-only -fdump-tree-evrp\" }\n+\n+void link_error();\n+\n+void foo(float x)\n+{\n+  if (__builtin_signbit (x))\n+    {\n+      if (x > 0.0)\n+\tlink_error();\n+    }\n+}\n+\n+// { dg-final { scan-tree-dump-not \"link_error\" \"evrp\" } }"}]}