{"sha": "dffb1e2279fc9df82b2817c87a9a6319e7508532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZmYjFlMjI3OWZjOWRmODJiMjgxN2M4N2E5YTYzMTllNzUwODUzMg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-02-23T09:07:24Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-02-23T09:07:24Z"}, "message": "PR 84519 Handle optional QUIET specifier for STOP and ERROR STOP\n\nFortran 2018 adds a new QUIET specifier for the STOP and ERROR STOP\nstatements, in order to suppress the printing of signaling FP\nexceptions and the stop code. This patch adds the necessary library\nchanges, but for now the new specifier is not parsed and the frontend\nunconditionally adds a false value for the new argument.\n\nRegtested on x86_64-pc-linux-gnu.\n\ngcc/fortran/ChangeLog:\n\n2018-02-23  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/84519\n\t* trans-decl.c (gfc_build_builtin_function_decls): Add bool\n\targument to stop and error stop decls.\n\t* trans-stmt.c (gfc_trans_stop): Add false value to argument\n\tlists.\n\nlibgfortran/ChangeLog:\n\n2018-02-23  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/84519\n\t* caf/libcaf.h (_gfortran_caf_stop_numeric): Add bool argument.\n\t(_gfortran_caf_stop_str): Likewise.\n\t(_gfortran_caf_error_stop_str): Likewise.\n\t(_gfortran_caf_error_stop): Likewise.\n\t* caf/mpi.c (_gfortran_caf_error_stop_str): Handle new argument.\n\t(_gfortran_caf_error_stop): Likewise.\n\t* caf/single.c (_gfortran_caf_stop_numeric): Likewise.\n\t(_gfortran_caf_stop_str): Likewise.\n\t(_gfortran_caf_error_stop_str): Likewise.\n\t(_gfortran_caf_error_stop): Likewise.\n\t(_gfortran_caf_lock): Likewise.\n\t(_gfortran_caf_unlock): Likewise.\n\t* libgfortran.h (stop_string): Add bool argument.\n\t* runtime/pause.c (do_pause): Add false argument.\n\t* runtime/stop.c (stop_numeric): Handle new argument.\n\t(stop_string): Likewise.\n\t(error_stop_string): Likewise.\n\t(error_stop_numeric): Likewise.\n\nFrom-SVN: r257928", "tree": {"sha": "858fec6d98338d83564c6149d999223d2f44d204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/858fec6d98338d83564c6149d999223d2f44d204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dffb1e2279fc9df82b2817c87a9a6319e7508532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffb1e2279fc9df82b2817c87a9a6319e7508532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dffb1e2279fc9df82b2817c87a9a6319e7508532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffb1e2279fc9df82b2817c87a9a6319e7508532/comments", "author": null, "committer": null, "parents": [{"sha": "355436fb15420a1b05d3e333f202fa3296b4baaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355436fb15420a1b05d3e333f202fa3296b4baaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355436fb15420a1b05d3e333f202fa3296b4baaf"}], "stats": {"total": 157, "additions": 95, "deletions": 62}, "files": [{"sha": "3b56c37d96f17a6f5c333fb42351e0be76358941", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -1,3 +1,11 @@\n+2018-02-23  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/84519\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Add bool\n+\targument to stop and error stop decls.\n+\t* trans-stmt.c (gfc_trans_stop): Add false value to argument\n+\tlists.\n+\n 2018-02-22  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR 78534"}, {"sha": "c233a0ee81f7c7b172bfd081c66c001a2ff7b137", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -3503,25 +3503,27 @@ gfc_build_builtin_function_decls (void)\n \n   gfor_fndecl_stop_numeric = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"stop_numeric\")),\n-\tvoid_type_node, 1, integer_type_node);\n+\tvoid_type_node, 2, integer_type_node, boolean_type_node);\n   /* STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_stop_numeric) = 1;\n \n   gfor_fndecl_stop_string = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"stop_string\")), \".R.\",\n-\tvoid_type_node, 2, pchar_type_node, size_type_node);\n+\tvoid_type_node, 3, pchar_type_node, size_type_node,\n+\tboolean_type_node);\n   /* STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_stop_string) = 1;\n \n   gfor_fndecl_error_stop_numeric = gfc_build_library_function_decl (\n         get_identifier (PREFIX(\"error_stop_numeric\")),\n-        void_type_node, 1, integer_type_node);\n+        void_type_node, 2, integer_type_node, boolean_type_node);\n   /* ERROR STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_error_stop_numeric) = 1;\n \n   gfor_fndecl_error_stop_string = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"error_stop_string\")), \".R.\",\n-\tvoid_type_node, 2, pchar_type_node, size_type_node);\n+\tvoid_type_node, 3, pchar_type_node, size_type_node,\n+\tboolean_type_node);\n   /* ERROR STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_error_stop_string) = 1;\n "}, {"sha": "cf76fd0162bd06de4b03735f7d6d5af9e5862c43", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -642,7 +642,8 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n \t\t\t\t : (flag_coarray == GFC_FCOARRAY_LIB\n \t\t\t\t    ? gfor_fndecl_caf_stop_str\n \t\t\t\t    : gfor_fndecl_stop_string),\n-\t\t\t\t 2, build_int_cst (pchar_type_node, 0), tmp);\n+\t\t\t\t 3, build_int_cst (pchar_type_node, 0), tmp,\n+\t\t\t\t boolean_false_node);\n     }\n   else if (code->expr1->ts.type == BT_INTEGER)\n     {\n@@ -654,8 +655,9 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n \t\t\t\t    : gfor_fndecl_error_stop_numeric)\n \t\t\t\t : (flag_coarray == GFC_FCOARRAY_LIB\n \t\t\t\t    ? gfor_fndecl_caf_stop_numeric\n-\t\t\t\t    : gfor_fndecl_stop_numeric), 1,\n-\t\t\t\t fold_convert (integer_type_node, se.expr));\n+\t\t\t\t    : gfor_fndecl_stop_numeric), 2,\n+\t\t\t\t fold_convert (integer_type_node, se.expr),\n+\t\t\t\t boolean_false_node);\n     }\n   else\n     {\n@@ -668,8 +670,9 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n \t\t\t\t : (flag_coarray == GFC_FCOARRAY_LIB\n \t\t\t\t    ? gfor_fndecl_caf_stop_str\n \t\t\t\t    : gfor_fndecl_stop_string),\n-\t\t\t\t 2, se.expr, fold_convert (size_type_node,\n-\t\t\t\t\t\t\t   se.string_length));\n+\t\t\t\t 3, se.expr, fold_convert (size_type_node,\n+\t\t\t\t\t\t\t   se.string_length),\n+\t\t\t\t boolean_false_node);\n     }\n \n   gfc_add_expr_to_block (&se.pre, tmp);"}, {"sha": "dd97166952c1479cf3ad2a4f1de9e2ce339e5f01", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -197,13 +197,13 @@ void _gfortran_caf_sync_all (int *, char *, size_t);\n void _gfortran_caf_sync_memory (int *, char *, size_t);\n void _gfortran_caf_sync_images (int, int[], int *, char *, size_t);\n \n-void _gfortran_caf_stop_numeric (int)\n+void _gfortran_caf_stop_numeric (int, bool)\n      __attribute__ ((noreturn));\n-void _gfortran_caf_stop_str (const char *, size_t)\n+void _gfortran_caf_stop_str (const char *, size_t, bool)\n      __attribute__ ((noreturn));\n-void _gfortran_caf_error_stop_str (const char *, size_t)\n+void _gfortran_caf_error_stop_str (const char *, size_t, bool)\n      __attribute__ ((noreturn));\n-void _gfortran_caf_error_stop (int) __attribute__ ((noreturn));\n+void _gfortran_caf_error_stop (int, bool) __attribute__ ((noreturn));\n void _gfortran_caf_fail_image (void) __attribute__ ((noreturn));\n \n void _gfortran_caf_co_broadcast (gfc_descriptor_t *, int, int *, char *, size_t);"}, {"sha": "55d9908b8de5aa94136f489784445070814781b4", "filename": "libgfortran/caf/mpi.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fcaf%2Fmpi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fcaf%2Fmpi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fmpi.c?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -358,22 +358,25 @@ error_stop (int error)\n /* ERROR STOP function for string arguments.  */\n \n void\n-_gfortran_caf_error_stop_str (const char *string, size_t len)\n+_gfortran_caf_error_stop_str (const char *string, size_t len, bool quiet)\n {\n-  fputs (\"ERROR STOP \", stderr);\n-  while (len--)\n-    fputc (*(string++), stderr);\n-  fputs (\"\\n\", stderr);\n-\n+  if (!quiet)\n+    {\n+      fputs (\"ERROR STOP \", stderr);\n+      while (len--)\n+\tfputc (*(string++), stderr);\n+      fputs (\"\\n\", stderr);\n+    }\n   error_stop (1);\n }\n \n \n /* ERROR STOP function for numerical arguments.  */\n \n void\n-_gfortran_caf_error_stop (int error)\n+_gfortran_caf_error_stop (int error, bool quiet)\n {\n-  fprintf (stderr, \"ERROR STOP %d\\n\", error);\n+  if (!quiet)\n+    fprintf (stderr, \"ERROR STOP %d\\n\", error);\n   error_stop (error);\n }"}, {"sha": "1ad13bd5643843e4342a9ae3a0505dafce7a74fa", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -267,33 +267,38 @@ _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n \n \n void\n-_gfortran_caf_stop_numeric(int stop_code)\n+_gfortran_caf_stop_numeric(int stop_code, bool quiet)\n {\n-  fprintf (stderr, \"STOP %d\\n\", stop_code);\n+  if (!quiet)\n+    fprintf (stderr, \"STOP %d\\n\", stop_code);\n   exit (0);\n }\n \n \n void\n-_gfortran_caf_stop_str(const char *string, size_t len)\n+_gfortran_caf_stop_str(const char *string, size_t len, bool quiet)\n {\n-  fputs (\"STOP \", stderr);\n-  while (len--)\n-    fputc (*(string++), stderr);\n-  fputs (\"\\n\", stderr);\n-\n+  if (!quiet)\n+    {\n+      fputs (\"STOP \", stderr);\n+      while (len--)\n+\tfputc (*(string++), stderr);\n+      fputs (\"\\n\", stderr);\n+    }\n   exit (0);\n }\n \n \n void\n-_gfortran_caf_error_stop_str (const char *string, size_t len)\n+_gfortran_caf_error_stop_str (const char *string, size_t len, bool quiet)\n {\n-  fputs (\"ERROR STOP \", stderr);\n-  while (len--)\n-    fputc (*(string++), stderr);\n-  fputs (\"\\n\", stderr);\n-\n+  if (!quiet)\n+    {\n+      fputs (\"ERROR STOP \", stderr);\n+      while (len--)\n+\tfputc (*(string++), stderr);\n+      fputs (\"\\n\", stderr);\n+    }\n   exit (1);\n }\n \n@@ -367,9 +372,10 @@ _gfortran_caf_stopped_images (gfc_descriptor_t *array,\n \n \n void\n-_gfortran_caf_error_stop (int error)\n+_gfortran_caf_error_stop (int error, bool quiet)\n {\n-  fprintf (stderr, \"ERROR STOP %d\\n\", error);\n+  if (!quiet)\n+    fprintf (stderr, \"ERROR STOP %d\\n\", error);\n   exit (error);\n }\n \n@@ -2990,7 +2996,7 @@ _gfortran_caf_lock (caf_token_t token, size_t index,\n \t}\n       return;\n     }\n-  _gfortran_caf_error_stop_str (msg, strlen (msg));\n+  _gfortran_caf_error_stop_str (msg, strlen (msg), false);\n }\n \n \n@@ -3023,7 +3029,7 @@ _gfortran_caf_unlock (caf_token_t token, size_t index,\n \t}\n       return;\n     }\n-  _gfortran_caf_error_stop_str (msg, strlen (msg));\n+  _gfortran_caf_error_stop_str (msg, strlen (msg), false);\n }\n \n int"}, {"sha": "ca06e6db6205beb248d9594ed7d3caaa2fef3d03", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -888,7 +888,7 @@ internal_proto(filename_from_unit);\n \n /* stop.c */\n \n-extern _Noreturn void stop_string (const char *, size_t);\n+extern _Noreturn void stop_string (const char *, size_t, bool);\n export_proto(stop_string);\n \n /* reshape_packed.c */"}, {"sha": "37672d4a02cbbb03e6c7aebb50c33beb43e823f4", "filename": "libgfortran/runtime/pause.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fruntime%2Fpause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fruntime%2Fpause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fpause.c?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -40,7 +40,7 @@ do_pause (void)\n \n   fgets(buff, 4, stdin);\n   if (strncmp(buff, \"go\\n\", 3) != 0)\n-    stop_string ('\\0', 0);\n+    stop_string ('\\0', 0, false);\n   estr_write (\"RESUMED\\n\");\n }\n "}, {"sha": "1e6dd8c28d0acabc3bc2597e40e2dfac12c3235c", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1e2279fc9df82b2817c87a9a6319e7508532/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=dffb1e2279fc9df82b2817c87a9a6319e7508532", "patch": "@@ -81,29 +81,35 @@ report_exception (void)\n \n /* A numeric STOP statement.  */\n \n-extern _Noreturn void stop_numeric (int);\n+extern _Noreturn void stop_numeric (int, bool);\n export_proto(stop_numeric);\n \n void\n-stop_numeric (int code)\n+stop_numeric (int code, bool quiet)\n {\n-  report_exception ();\n-  st_printf (\"STOP %d\\n\", code);\n+  if (!quiet)\n+    {\n+      report_exception ();\n+      st_printf (\"STOP %d\\n\", code);\n+    }\n   exit (code);\n }\n \n \n /* A character string or blank STOP statement.  */\n \n void\n-stop_string (const char *string, size_t len)\n+stop_string (const char *string, size_t len, bool quiet)\n {\n-  report_exception ();\n-  if (string)\n+  if (!quiet)\n     {\n-      estr_write (\"STOP \");\n-      (void) write (STDERR_FILENO, string, len);\n-      estr_write (\"\\n\");\n+      report_exception ();\n+      if (string)\n+\t{\n+\t  estr_write (\"STOP \");\n+\t  (void) write (STDERR_FILENO, string, len);\n+\t  estr_write (\"\\n\");\n+\t}\n     }\n   exit (0);\n }\n@@ -114,30 +120,35 @@ stop_string (const char *string, size_t len)\n    initiates error termination of execution.\"  Thus, error_stop_string returns\n    a nonzero exit status code.  */\n \n-extern _Noreturn void error_stop_string (const char *, size_t);\n+extern _Noreturn void error_stop_string (const char *, size_t, bool);\n export_proto(error_stop_string);\n \n void\n-error_stop_string (const char *string, size_t len)\n+error_stop_string (const char *string, size_t len, bool quiet)\n {\n-  report_exception ();\n-  estr_write (\"ERROR STOP \");\n-  (void) write (STDERR_FILENO, string, len);\n-  estr_write (\"\\n\");\n-\n+  if (!quiet)\n+    {\n+      report_exception ();\n+      estr_write (\"ERROR STOP \");\n+      (void) write (STDERR_FILENO, string, len);\n+      estr_write (\"\\n\");\n+    }\n   exit_error (1);\n }\n \n \n /* A numeric ERROR STOP statement.  */\n \n-extern _Noreturn void error_stop_numeric (int);\n+extern _Noreturn void error_stop_numeric (int, bool);\n export_proto(error_stop_numeric);\n \n void\n-error_stop_numeric (int code)\n+error_stop_numeric (int code, bool quiet)\n {\n-  report_exception ();\n-  st_printf (\"ERROR STOP %d\\n\", code);\n+  if (!quiet)\n+    {\n+      report_exception ();\n+      st_printf (\"ERROR STOP %d\\n\", code);\n+    }\n   exit_error (code);\n }"}]}