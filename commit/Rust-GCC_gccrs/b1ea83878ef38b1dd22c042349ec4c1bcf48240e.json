{"sha": "b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlYTgzODc4ZWYzOGIxZGQyMmMwNDIzNDllYzRjMWJjZjQ4MjQwZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-04-26T14:49:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-04-26T14:49:32Z"}, "message": "i386.md (\"isa\" attribute): Add x64_sse2.\n\n\t* config/i386/i386.md (\"isa\" attribute): Add x64_sse2.\n\t(\"enabled\" attribute): Handle \"isa\" attribute.\n\t(*movdi_internal): Substitute Yi and Yj constraint with x\n\tand Ym and Yn constraint with y constraint.  Update \"isa\"\n\tattribute and set \"preferred_for_speed\" attribute from\n\tTARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC for updated alternatives.\n\t(*movsi_internal): Ditto.\n\t(*movdf_internal): Ditto.\n\t(*movsf_internal): Ditto.\n\t(*zero_extendsidi2): Ditto.\n\t* config/i386/sse.md (vec_set<mode>_0): Ditto.\n\t(sse2_loadld): Ditto.\n\t(*vec_extract<ssevecmodelower>_0): Ditto.\n\t(*vec_extractv4si_0_zext_sse4): Ditto.\n\t(vec_concatv2di): Ditto.\n\t(*vec_dup<mode>): Ditto.\n\t* config/i386/mmx.md (*mov<mode>_internal): Ditto.\n\t* config/i386/constraints.md (Yi): Remove.\n\t(Yj): Remove.\n\t(Ym): Remove.\n\t(Yn): Remove.\n\nFrom-SVN: r259682", "tree": {"sha": "429555262e9e035e56b9f03c04953ac7cd741bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/429555262e9e035e56b9f03c04953ac7cd741bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d8b352a10e17d4c798859f00d68e4d8ba27e0ca"}], "stats": {"total": 233, "additions": 171, "deletions": 62}, "files": [{"sha": "27e56f233e49293c9ef2ccc17e925192b61a238d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "patch": "@@ -1,3 +1,27 @@\n+2018-04-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (\"isa\" attribute): Add x64_sse2.\n+\t(\"enabled\" attribute): Handle \"isa\" attribute.\n+\t(*movdi_internal): Substitute Yi and Yj constraint with x\n+\tand Ym and Yn constraint with y constraint.  Update \"isa\"\n+\tattribute and set \"preferred_for_speed\" attribute from\n+\tTARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC for updated alternatives.\n+\t(*movsi_internal): Ditto.\n+\t(*movdf_internal): Ditto.\n+\t(*movsf_internal): Ditto.\n+\t(*zero_extendsidi2): Ditto.\n+\t* config/i386/sse.md (vec_set<mode>_0): Ditto.\n+\t(sse2_loadld): Ditto.\n+\t(*vec_extract<ssevecmodelower>_0): Ditto.\n+\t(*vec_extractv4si_0_zext_sse4): Ditto.\n+\t(vec_concatv2di): Ditto.\n+\t(*vec_dup<mode>): Ditto.\n+\t* config/i386/mmx.md (*mov<mode>_internal): Ditto.\n+\t* config/i386/constraints.md (Yi): Remove.\n+\t(Yj): Remove.\n+\t(Ym): Remove.\n+\t(Yn): Remove.\n+\n 2018-04-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* dumpfile.c (dump_open): New."}, {"sha": "e750dc4cec7405054207c89b56bd55a69517e7d6", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "patch": "@@ -99,14 +99,10 @@\n \n ;; We use the Y prefix to denote any number of conditional register sets:\n ;;  z\tFirst SSE register.\n-;;  i\tSSE2 inter-unit moves to SSE register enabled\n-;;  j\tSSE2 inter-unit moves from SSE register enabled\n ;;  d\tany EVEX encodable SSE register for AVX512BW target or any SSE register\n ;;\tfor SSE4_1 target, when inter-unit moves to SSE register are enabled\n ;;  e\tany EVEX encodable SSE register for AVX512BW target or any SSE register\n ;;\tfor SSE4_1 target, when inter-unit moves from SSE register are enabled\n-;;  m\tMMX inter-unit moves to MMX register enabled\n-;;  n\tMMX inter-unit moves from MMX register enabled\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  a\tInteger register when zero extensions with AND are disabled\n ;;  b\tAny register that can be used as the GOT base when calling\n@@ -123,14 +119,6 @@\n (define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n  \"First SSE register (@code{%xmm0}).\")\n \n-(define_register_constraint \"Yi\"\n- \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC ? ALL_SSE_REGS : NO_REGS\"\n- \"@internal Any SSE register, when SSE2 and inter-unit moves to vector registers are enabled.\")\n-\n-(define_register_constraint \"Yj\"\n- \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC ? ALL_SSE_REGS : NO_REGS\"\n- \"@internal Any SSE register, when SSE2 and inter-unit moves from vector registers are enabled.\")\n-\n (define_register_constraint \"Yd\"\n  \"TARGET_INTER_UNIT_MOVES_TO_VEC\n   ? (TARGET_AVX512DQ\n@@ -147,14 +135,6 @@\n   : NO_REGS\"\n  \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512DQ target or any SSE register for SSE4_1 target, when inter-unit moves from vector registers are enabled.\")\n \n-(define_register_constraint \"Ym\"\n- \"TARGET_MMX && TARGET_INTER_UNIT_MOVES_TO_VEC ? MMX_REGS : NO_REGS\"\n- \"@internal Any MMX register, when inter-unit moves to vector registers are enabled.\")\n-\n-(define_register_constraint \"Yn\"\n- \"TARGET_MMX && TARGET_INTER_UNIT_MOVES_FROM_VEC ? MMX_REGS : NO_REGS\"\n- \"@internal Any MMX register, when inter-unit moves from vector registers are enabled.\")\n-\n (define_register_constraint \"Yp\"\n  \"TARGET_PARTIAL_REG_STALL ? NO_REGS : GENERAL_REGS\"\n  \"@internal Any integer register when TARGET_PARTIAL_REG_STALL is disabled.\")"}, {"sha": "99dcfc75a977f3a2e996f687386a1bbe8576595a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "patch": "@@ -812,7 +812,7 @@\n (define_attr \"movu\" \"0,1\" (const_string \"0\"))\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n-(define_attr \"isa\" \"base,x64,x64_sse4,x64_sse4_noavx,x64_avx,nox64,\n+(define_attr \"isa\" \"base,x64,x64_sse2,x64_sse4,x64_sse4_noavx,x64_avx,nox64,\n \t\t    sse2,sse2_noavx,sse3,sse4,sse4_noavx,avx,noavx,\n \t\t    avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    avx512bw,noavx512bw,avx512dq,noavx512dq,\n@@ -821,6 +821,8 @@\n \n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"isa\" \"x64\") (symbol_ref \"TARGET_64BIT\")\n+\t (eq_attr \"isa\" \"x64_sse2\")\n+\t   (symbol_ref \"TARGET_64BIT && TARGET_SSE2\")\n \t (eq_attr \"isa\" \"x64_sse4\")\n \t   (symbol_ref \"TARGET_64BIT && TARGET_SSE4_1\")\n \t (eq_attr \"isa\" \"x64_sse4_noavx\")\n@@ -2223,9 +2225,9 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,m,?r ,?*Yd,?r ,?*Yi,?*Ym,?*Yi,*k,*k ,*r,*m\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,m,?r ,?*Yd,?r,?*v,?*y,?*x,*k,*k ,*r,*m\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,v,*Ye,r   ,*Yj,r   ,*Yj ,*Yn ,*r,*km,*k,*k\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,v,*Ye,r   ,*v,r  ,*x ,*y ,*r,*km,*k,*k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2303,8 +2305,12 @@\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1,17,18\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,19,20,23,25\")\n+\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,23,25\")\n \t      (const_string \"x64\")\n+\t    (eq_attr \"alternative\" \"19,20\")\n+\t      (const_string \"x64_sse2\")\n+\t    (eq_attr \"alternative\" \"21,22\")\n+\t      (const_string \"sse2\")\n \t   ]\n \t   (const_string \"*\")))\n    (set (attr \"type\")\n@@ -2372,6 +2378,13 @@\n \t      (const_string \"V2SF\")\n \t   ]\n \t   (const_string \"DI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"10,19\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"11,20\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))\n    (set (attr \"enabled\")\n      (cond [(eq_attr \"alternative\" \"15\")\n               (if_then_else\n@@ -2452,9 +2465,9 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-    \"=r,m ,*y,*y,?*y,?m,?r ,?*Ym,*v,*v,*v,m ,?r ,?*Yi,*k,*k ,*rm\")\n+    \"=r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,?r,?*v,*k,*k ,*rm\")\n \t(match_operand:SI 1 \"general_operand\"\n-    \"g ,re,C ,*y,m  ,*y,*Yn,r   ,C ,*v,m ,*v,*Yj,r   ,*r,*km,*k\"))]\n+    \"g ,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,*v,r  ,*r,*km,*k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2515,7 +2528,12 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set (attr \"type\")\n+  [(set (attr \"isa\")\n+     (cond [(eq_attr \"alternative\" \"12,13\")\n+\t      (const_string \"sse2\")\n+\t   ]\n+\t   (const_string \"*\")))\n+   (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"3,4,5,6,7\")\n@@ -2560,7 +2578,14 @@\n \t         (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"SF\")\n \t   ]\n-\t   (const_string \"SI\")))])\n+\t   (const_string \"SI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"6,12\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"7,13\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,k,k ,r,m\")\n@@ -3472,9 +3497,9 @@\n ;; Possible store forwarding (partial memory) stall in alternatives 4, 6 and 7.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-    \"=Yf*f,m   ,Yf*f,?r ,!o,?*r ,!o,!o,?r,?m,?r,?r,v,v,v,m,*x,*x,*x,m ,r ,Yi,r  ,o ,r  ,m\")\n+    \"=Yf*f,m   ,Yf*f,?r ,!o,?*r ,!o,!o,?r,?m,?r,?r,v,v,v,m,*x,*x,*x,m ,r ,v,r  ,o ,r  ,m\")\n \t(match_operand:DF 1 \"general_operand\"\n-    \"Yf*fm,Yf*f,G   ,roF,r ,*roF,*r,F ,rm,rC,C ,F ,C,v,m,v,C ,*x,m ,*x,Yj,r ,roF,rF,rmF,rC\"))]\n+    \"Yf*fm,Yf*f,G   ,roF,r ,*roF,*r,F ,rm,rC,C ,F ,C,v,m,v,C ,*x,m ,*x,v,r ,roF,rF,rmF,rC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (lra_in_progress || reload_completed\n        || !CONST_DOUBLE_P (operands[1])\n@@ -3550,10 +3575,12 @@\n   [(set (attr \"isa\")\n \t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,22,23\")\n \t\t (const_string \"nox64\")\n-\t       (eq_attr \"alternative\" \"8,9,10,11,20,21,24,25\")\n+\t       (eq_attr \"alternative\" \"8,9,10,11,24,25\")\n \t\t (const_string \"x64\")\n \t       (eq_attr \"alternative\" \"12,13,14,15\")\n \t\t (const_string \"sse2\")\n+\t       (eq_attr \"alternative\" \"20,21\")\n+\t\t (const_string \"x64_sse2\")\n \t      ]\n \t      (const_string \"*\")))\n    (set (attr \"type\")\n@@ -3654,7 +3681,12 @@\n            (symbol_ref \"true\")))\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"3,4\")\n-              (symbol_ref \"TARGET_INTEGER_DFMODE_MOVES\")]\n+              (symbol_ref \"TARGET_INTEGER_DFMODE_MOVES\")\n+\t    (eq_attr \"alternative\" \"20\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"21\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n            (symbol_ref \"true\")))\n    (set (attr \"enabled\")\n      (cond [(eq_attr \"alternative\" \"22,23,24,25\")\n@@ -3676,9 +3708,9 @@\n \n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t  \"=Yf*f,m   ,Yf*f,?r ,?m,v,v,v,m,?r,?Yi,!*y,!*y,!m,!r ,!*Ym,r  ,m\")\n+\t  \"=Yf*f,m   ,Yf*f,?r ,?m,v,v,v,m,?r,?v,!*y,!*y,!m,!r,!*y,r  ,m\")\n \t(match_operand:SF 1 \"general_operand\"\n-\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,v,m,v,Yj,r  ,*y ,m  ,*y,*Yn,r   ,rmF,rF\"))]\n+\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,v,m,v,v ,r ,*y ,m  ,*y,*y,r  ,rmF,rF\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (lra_in_progress || reload_completed\n        || !CONST_DOUBLE_P (operands[1])\n@@ -3740,7 +3772,12 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set (attr \"type\")\n+  [(set (attr \"isa\")\n+     (cond [(eq_attr \"alternative\" \"14,15\")\n+\t      (const_string \"sse2\")\n+\t   ]\n+\t   (const_string \"*\")))\n+   (set (attr \"type\")\n \t(cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"fmov\")\n \t       (eq_attr \"alternative\" \"3,4,16,17\")\n@@ -3802,6 +3839,13 @@\n \t\t       (const_string \"SF\"))\n \t      ]\n \t      (const_string \"SF\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"9,14\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"10,15\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+           (symbol_ref \"true\")))\n    (set (attr \"enabled\")\n      (cond [(eq_attr \"alternative\" \"16,17\")\n               (if_then_else\n@@ -3891,10 +3935,10 @@\n \n (define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,$r,$Yi,$x,*x,*v,*r\")\n+\t\t\"=r,?r,?o,r   ,o,?*y,?!*y,$r,$v,$x,*x,*v,*r\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"x86_64_zext_operand\"\n-\t        \"0 ,rm,r ,rmWz,0,r   ,m   ,Yj,r  ,m ,*x,*v,*k\")))]\n+\t        \"0 ,rm,r ,rmWz,0,r  ,m   ,v ,r ,m ,*x,*v,*k\")))]\n   \"\"\n {\n   switch (get_attr_type (insn))\n@@ -3938,7 +3982,7 @@\n \t      (const_string \"nox64\")\n \t    (eq_attr \"alternative\" \"3\")\n \t      (const_string \"x64\")\n-\t    (eq_attr \"alternative\" \"9\")\n+\t    (eq_attr \"alternative\" \"7,8,9\")\n \t      (const_string \"sse2\")\n \t    (eq_attr \"alternative\" \"10\")\n \t      (const_string \"sse4\")\n@@ -3984,7 +4028,14 @@\n \t    (eq_attr \"alternative\" \"8,10,11\")\n \t      (const_string \"TI\")\n \t   ]\n-\t   (const_string \"SI\")))])\n+\t   (const_string \"SI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"7\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"5,8\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+           (symbol_ref \"true\")))])\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\")"}, {"sha": "a75807c4fd99957a152cd67044a746f1aad8fc58", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "patch": "@@ -78,9 +78,9 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\"\n-    \"=r ,o ,r,r ,m ,?!y,!y,?!y,m  ,r   ,?!Ym,v,v,v,m,r ,Yi,!Ym,*Yi\")\n+    \"=r ,o ,r,r ,m ,?!y,!y,?!y,m  ,r  ,?!y,v,v,v,m,r,v,!y,*x\")\n \t(match_operand:MMXMODE 1 \"vector_move_operand\"\n-    \"rCo,rC,C,rm,rC,C  ,!y,m  ,?!y,?!Yn,r   ,C,v,m,v,Yj,r ,*Yj,!Yn\"))]\n+    \"rCo,rC,C,rm,rC,C  ,!y,m  ,?!y,?!y,r  ,C,v,m,v,v,r,*x,!y\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n@@ -146,8 +146,12 @@\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"2,3,4,9,10,15,16\")\n+\t    (eq_attr \"alternative\" \"2,3,4,9,10\")\n \t      (const_string \"x64\")\n+\t    (eq_attr \"alternative\" \"15,16\")\n+\t      (const_string \"x64_sse2\")\n+\t    (eq_attr \"alternative\" \"17,18\")\n+\t      (const_string \"sse2\")\n \t   ]\n \t   (const_string \"*\")))\n    (set (attr \"type\")\n@@ -202,7 +206,14 @@\n \t\t      (not (match_test \"TARGET_SSE2\"))))\n \t      (const_string \"V2SF\")\n \t   ]\n-\t   (const_string \"DI\")))])\n+\t   (const_string \"DI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"10,15\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"11,16\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_split\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_gr_operand\")"}, {"sha": "858c29ec3e262ae8cd75a2784c6c4d8dc2329a4e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 62, "deletions": 19, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ea83878ef38b1dd22c042349ec4c1bcf48240e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b1ea83878ef38b1dd22c042349ec4c1bcf48240e", "patch": "@@ -7008,7 +7008,7 @@\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"vec_set<mode>_0\"\n   [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=Yr,*x,v,v,Yi,x,x,v,Yr ,*x ,x  ,m ,m   ,m\")\n+\t  \"=Yr,*x,v,v,v,x,x,v,Yr ,*x ,x  ,m ,m   ,m\")\n \t(vec_merge:VI4F_128\n \t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n@@ -7071,7 +7071,12 @@\n \t      (const_string \"vex\")\n \t   ]\n \t   (const_string \"*\")))\n-   (set_attr \"mode\" \"SF,SF,SF,<ssescalarmode>,SI,SF,SF,SF,TI,TI,TI,*,*,*\")])\n+   (set_attr \"mode\" \"SF,SF,SF,<ssescalarmode>,SI,SF,SF,SF,TI,TI,TI,*,*,*\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"4\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n ;; A subset is vec_setv4sf.\n (define_insn \"*vec_setv4sf_sse4_1\"\n@@ -7107,7 +7112,7 @@\n \n ;; All of vinsertps, vmovss, vmovd clear also the higher bits.\n (define_insn \"vec_set<mode>_0\"\n-  [(set (match_operand:VI4F_256_512 0 \"register_operand\" \"=v,v,Yi\")\n+  [(set (match_operand:VI4F_256_512 0 \"register_operand\" \"=v,v,v\")\n \t(vec_merge:VI4F_256_512\n \t  (vec_duplicate:VI4F_256_512\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\" \"v,m,r\"))\n@@ -7123,7 +7128,12 @@\n \t\t   (const_string \"sselog\")\n \t\t   (const_string \"ssemov\")))\n    (set_attr \"prefix\" \"maybe_evex\")\n-   (set_attr \"mode\" \"SF,<ssescalarmode>,SI\")])\n+   (set_attr \"mode\" \"SF,<ssescalarmode>,SI\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"sse4_1_insertps\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=Yr,*x,v\")\n@@ -13606,7 +13616,7 @@\n   \"operands[2] = CONST0_RTX (V4SImode);\")\n \n (define_insn \"sse2_loadld\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=v,Yi,x,x,v\")\n+  [(set (match_operand:V4SI 0 \"register_operand\"       \"=v,v,x,x,v\")\n \t(vec_merge:V4SI\n \t  (vec_duplicate:V4SI\n \t    (match_operand:SI 2 \"nonimmediate_operand\" \"m ,r ,m,x,v\"))\n@@ -13622,7 +13632,12 @@\n   [(set_attr \"isa\" \"sse2,sse2,noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,orig,maybe_evex\")\n-   (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")])\n+   (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n ;; QI and HI modes handled by pextr patterns.\n (define_mode_iterator PEXTR_MODE12\n@@ -13687,12 +13702,18 @@\n   \"#\")\n \n (define_insn \"*vec_extract<ssevecmodelower>_0\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r ,v ,m\")\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r,r,v ,m\")\n \t(vec_select:SWI48\n-\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"mYj,vm,v\")\n+\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"m ,v,vm,v\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"#\")\n+  \"#\"\n+  [(set_attr \"isa\" \"*,sse2,*,*\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"*vec_extractv2di_0_sse\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=v,m\")\n@@ -13716,11 +13737,16 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,x,v\")\n \t(zero_extend:DI\n \t  (vec_select:SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"Yj,x,v\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"v,x,v\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n-  [(set_attr \"isa\" \"x64,*,avx512f\")])\n+  [(set_attr \"isa\" \"x64,*,avx512f\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"*vec_extractv4si_0_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -14064,10 +14090,10 @@\n ;; movd instead of movq is required to handle broken assemblers.\n (define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"\n-\t  \"=Yr,*x,x ,v ,Yi,v ,x    ,x,v ,x,x,v\")\n+\t  \"=Yr,*x,x ,v ,v,v ,x   ,x,v ,x,x,v\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-\t  \"  0, 0,x ,Yv,r ,vm,?!*Yn,0,Yv,0,0,v\")\n+\t  \"  0, 0,x ,Yv,r,vm,?!*y,0,Yv,0,0,v\")\n \t  (match_operand:DI 2 \"vector_move_operand\"\n \t  \" rm,rm,rm,rm,C ,C ,C ,x,Yv,x,m,m\")))]\n   \"TARGET_SSE\"\n@@ -14092,7 +14118,7 @@\n \t    (eq_attr \"alternative\" \"3\")\n \t      (const_string \"x64_avx512dq\")\n \t    (eq_attr \"alternative\" \"4\")\n-\t      (const_string \"x64\")\n+\t      (const_string \"x64_sse2\")\n \t    (eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"sse2\")\n \t    (eq_attr \"alternative\" \"7\")\n@@ -14129,11 +14155,18 @@\n \t      (const_string \"maybe_evex\")\n \t   ]\n \t   (const_string \"orig\")))\n-   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"4\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t    (eq_attr \"alternative\" \"6\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n ;; vmovq clears also the higher bits.\n (define_insn \"vec_set<mode>_0\"\n-  [(set (match_operand:VI8_AVX_AVX512F 0 \"register_operand\" \"=Yi,v\")\n+  [(set (match_operand:VI8_AVX_AVX512F 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VI8_AVX_AVX512F\n \t  (vec_duplicate:VI8_AVX_AVX512F\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\" \"r,vm\"))\n@@ -14145,7 +14178,12 @@\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_rex\" \"1,*\")\n    (set_attr \"prefix\" \"maybe_evex\")\n-   (set_attr \"mode\" \"TI\")])\n+   (set_attr \"mode\" \"TI\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n@@ -17901,7 +17939,7 @@\n   [V32QI V16QI V16HI V8HI V8SI V4SI])\n \n (define_insn \"*vec_dup<mode>\"\n-  [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,Yi\")\n+  [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,v\")\n \t(vec_duplicate:AVX2_VEC_DUP_MODE\n \t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,x,$r\")))]\n   \"TARGET_AVX2\"\n@@ -17913,7 +17951,12 @@\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"vec_dup<mode>\"\n   [(set (match_operand:AVX_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,x,v,x\")"}]}