{"sha": "9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5ZjNjOGYxZTA1Y2VjMDViMDJiOGI3OWU2YTU1MzFiYThkYzM3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-09-23T18:07:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-09-23T18:07:59Z"}, "message": "re PR c++/61857 (An init-capturing lambda is parsed incorrectly when used in a braced-init-list)\n\n/cp\n2014-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/61857\n\t* parser.c (cp_parser_skip_to_closing_square_bracket,\n\tcp_parser_array_designator_p): New.\n\t(cp_parser_initializer_list): Use the latter.\n\n/testsuite\n2014-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/61857\n\t* g++.dg/cpp1y/lambda-init10.C: New.\n\nFrom-SVN: r215528", "tree": {"sha": "cc7176301d6b9e77036a648226d04212b4efe368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc7176301d6b9e77036a648226d04212b4efe368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/comments", "author": null, "committer": null, "parents": [{"sha": "866e32ad336f1698809cc03c48f884379d6b39e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866e32ad336f1698809cc03c48f884379d6b39e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866e32ad336f1698809cc03c48f884379d6b39e0"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "8058348bc8ed9fee5bbfa64ebaf3c100898ba1fc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "patch": "@@ -1,3 +1,10 @@\n+2014-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/61857\n+\t* parser.c (cp_parser_skip_to_closing_square_bracket,\n+\tcp_parser_array_designator_p): New.\n+\t(cp_parser_initializer_list): Use the latter.\n+\n 2014-09-22  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (finish_non_static_data_member): In diagnostic, give"}, {"sha": "33ad886524e76e27e84b5a03fe15a094a5bce746", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "patch": "@@ -2487,6 +2487,10 @@ static cp_declarator * cp_parser_make_indirect_declarator\n   (enum tree_code, tree, cp_cv_quals, cp_declarator *, tree);\n static bool cp_parser_compound_literal_p\n   (cp_parser *);\n+static bool cp_parser_array_designator_p\n+  (cp_parser *);\n+static bool cp_parser_skip_to_closing_square_bracket\n+  (cp_parser *);\n \n /* Returns nonzero if we are parsing tentatively.  */\n \n@@ -19157,6 +19161,69 @@ cp_parser_braced_list (cp_parser* parser, bool* non_constant_p)\n   return initializer;\n }\n \n+/* Consume tokens up to, and including, the next non-nested closing `]'.\n+   Returns true iff we found a closing `]'.  */\n+\n+static bool\n+cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n+{\n+  unsigned square_depth = 0;\n+\n+  while (true)\n+    {\n+      cp_token * token = cp_lexer_peek_token (parser->lexer);\n+\n+      switch (token->type)\n+\t{\n+\tcase CPP_EOF:\n+\tcase CPP_PRAGMA_EOL:\n+\t  /* If we've run out of tokens, then there is no closing `]'.  */\n+\t  return false;\n+\n+        case CPP_OPEN_SQUARE:\n+          ++square_depth;\n+          break;\n+\n+        case CPP_CLOSE_SQUARE:\n+\t  if (!square_depth--)\n+\t    {\n+\t      cp_lexer_consume_token (parser->lexer);\n+\t      return true;\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      /* Consume the token.  */\n+      cp_lexer_consume_token (parser->lexer);\n+    }\n+}\n+\n+/* Return true if we are looking at an array-designator, false otherwise.  */\n+\n+static bool\n+cp_parser_array_designator_p (cp_parser *parser)\n+{\n+  /* Consume the `['.  */\n+  cp_lexer_consume_token (parser->lexer);\n+\n+  cp_lexer_save_tokens (parser->lexer);\n+\n+  /* Skip tokens until the next token is a closing square bracket.\n+     If we find the closing `]', and the next token is a `=', then\n+     we are looking at an array designator.  */\n+  bool array_designator_p\n+    = (cp_parser_skip_to_closing_square_bracket (parser)\n+       && cp_lexer_next_token_is (parser->lexer, CPP_EQ));\n+  \n+  /* Roll back the tokens we skipped.  */\n+  cp_lexer_rollback_tokens (parser->lexer);\n+\n+  return array_designator_p;\n+}\n+\n /* Parse an initializer-list.\n \n    initializer-list:\n@@ -19235,10 +19302,20 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n \t  bool non_const = false;\n \n \t  cp_parser_parse_tentatively (parser);\n-\t  cp_lexer_consume_token (parser->lexer);\n-\t  designator = cp_parser_constant_expression (parser, true, &non_const);\n-\t  cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);\n-\t  cp_parser_require (parser, CPP_EQ, RT_EQ);\n+\n+\t  if (!cp_parser_array_designator_p (parser))\n+\t    {\n+\t      cp_parser_simulate_error (parser);\n+\t      designator = NULL_TREE;\n+\t    }\n+\t  else\n+\t    {\n+\t      designator = cp_parser_constant_expression (parser, true,\n+\t\t\t\t\t\t\t  &non_const);\n+\t      cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);\n+\t      cp_parser_require (parser, CPP_EQ, RT_EQ);\n+\t    }\n+\n \t  if (!cp_parser_parse_definitely (parser))\n \t    designator = NULL_TREE;\n \t  else if (non_const)"}, {"sha": "206860a0f244d4c8cc695cbcb966f9c9eafa1e60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "patch": "@@ -1,3 +1,8 @@\n+2014-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/61857\n+\t* g++.dg/cpp1y/lambda-init10.C: New.\n+\n 2014-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/63331"}, {"sha": "230b3d173e2aa6329ecca9c9575853dff7aee266", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init10.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init10.C?ref=9a9f3c8f1e05cec05b02b8b79e6a5531ba8dc377", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/61857\n+// { dg-do compile { target c++14 } }\n+\n+struct A { \n+  A(int val) {}\n+};\n+\n+A a{ [x=123]{ return x; }() }; "}]}