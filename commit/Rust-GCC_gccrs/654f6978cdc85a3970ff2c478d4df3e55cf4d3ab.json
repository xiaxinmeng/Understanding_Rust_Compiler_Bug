{"sha": "654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "node_id": "C_kwDOANBUbNoAKDY1NGY2OTc4Y2RjODVhMzk3MGZmMmM0NzhkNGRmM2U1NWNmNGQzYWI", "commit": {"author": {"name": "Zhao Wei Liew", "email": "zhaoweiliew@gmail.com", "date": "2022-02-15T09:44:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-29T02:57:54Z"}, "message": "c++: Add diagnostic when operator= is used as truth cond [PR25689]\n\nWhen compiling the following code with g++ -Wparentheses, GCC does not\nwarn on the if statement. For example, there is no warning for this code:\n\nstruct A {\n\tA& operator=(int);\n\toperator bool();\n};\n\nvoid f(A a) {\n\tif (a = 0); // no warning\n}\n\nThis is because a = 0 is a call to operator=, which GCC does not handle.\n\nThis patch fixes this issue by handling calls to operator= when deciding\nto warn.\n\nBootstrapped and regression tested on x86_64-pc-linux-gnu.\n\n\tPR c++/25689\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (extract_call_expr): Return a NULL_TREE on failure\n\tinstead of asserting.\n\t(build_new_method_call): Suppress -Wparentheses diagnostic for\n\tMODIFY_EXPR.\n\t* semantics.cc (is_assignment_op_expr_p): Add function to check\n\tif an expression is a call to an op= operator expression.\n\t(maybe_convert_cond): Handle the case of a op= operator expression\n\tfor the -Wparentheses diagnostic.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wparentheses-31.C: New test.\n\nSigned-off-by: Zhao Wei Liew <zhaoweiliew@gmail.com>", "tree": {"sha": "0fc2caf7ab45e3612473ca30b0f76b852fa6ee9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fc2caf7ab45e3612473ca30b0f76b852fa6ee9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab/comments", "author": {"login": "zwliew", "id": 4538946, "node_id": "MDQ6VXNlcjQ1Mzg5NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4538946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zwliew", "html_url": "https://github.com/zwliew", "followers_url": "https://api.github.com/users/zwliew/followers", "following_url": "https://api.github.com/users/zwliew/following{/other_user}", "gists_url": "https://api.github.com/users/zwliew/gists{/gist_id}", "starred_url": "https://api.github.com/users/zwliew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zwliew/subscriptions", "organizations_url": "https://api.github.com/users/zwliew/orgs", "repos_url": "https://api.github.com/users/zwliew/repos", "events_url": "https://api.github.com/users/zwliew/events{/privacy}", "received_events_url": "https://api.github.com/users/zwliew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b6f53d8afdb3744530a93e1f8dc00de69052493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6f53d8afdb3744530a93e1f8dc00de69052493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6f53d8afdb3744530a93e1f8dc00de69052493"}], "stats": {"total": 94, "additions": 90, "deletions": 4}, "files": [{"sha": "959279d621603b4486b614fa18ff74aed818a950", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "patch": "@@ -7111,9 +7111,10 @@ extract_call_expr (tree call)\n       default:;\n       }\n \n-  gcc_assert (TREE_CODE (call) == CALL_EXPR\n-\t      || TREE_CODE (call) == AGGR_INIT_EXPR\n-\t      || call == error_mark_node);\n+  if (TREE_CODE (call) != CALL_EXPR\n+      && TREE_CODE (call) != AGGR_INIT_EXPR\n+      && call != error_mark_node)\n+    return NULL_TREE;\n   return call;\n }\n \n@@ -11180,6 +11181,12 @@ build_new_method_call (tree instance, tree fns, vec<tree, va_gc> **args,\n \t\t*fn_p = fn;\n \t      /* Build the actual CALL_EXPR.  */\n \t      call = build_over_call (cand, flags, complain);\n+\n+\t      /* Suppress warnings for if (my_struct.operator= (x)) where\n+\t\t my_struct is implicitly converted to bool. */\n+\t      if (TREE_CODE (call) == MODIFY_EXPR)\n+\t\tsuppress_warning (call, OPT_Wparentheses);\n+\n \t      /* In an expression of the form `a->f()' where `f' turns\n \t\t out to be a static member function, `a' is\n \t\t none-the-less evaluated.  */"}, {"sha": "9567559c96220745d8025083fb8f5124dcf3e5e2", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "patch": "@@ -826,6 +826,26 @@ finish_goto_stmt (tree destination)\n   return add_stmt (build_stmt (input_location, GOTO_EXPR, destination));\n }\n \n+/* Returns true if CALL is a (possibly wrapped) CALL_EXPR or AGGR_INIT_EXPR\n+   to operator= () that is written as an operator expression. */\n+static bool\n+is_assignment_op_expr_p (tree call)\n+{\n+  if (call == NULL_TREE)\n+    return false;\n+\n+  call = extract_call_expr (call);\n+  if (call == NULL_TREE\n+      || call == error_mark_node\n+      || !CALL_EXPR_OPERATOR_SYNTAX (call))\n+    return false;\n+\n+  tree fndecl = cp_get_callee_fndecl_nofold (call);\n+  return fndecl != NULL_TREE\n+    && DECL_ASSIGNMENT_OPERATOR_P (fndecl)\n+    && DECL_OVERLOADED_OPERATOR_IS (fndecl, NOP_EXPR);\n+}\n+\n /* COND is the condition-expression for an if, while, etc.,\n    statement.  Convert it to a boolean value, if appropriate.\n    In addition, verify sequence points if -Wsequence-point is enabled.  */\n@@ -847,7 +867,7 @@ maybe_convert_cond (tree cond)\n   /* Do the conversion.  */\n   cond = convert_from_reference (cond);\n \n-  if (TREE_CODE (cond) == MODIFY_EXPR\n+  if ((TREE_CODE (cond) == MODIFY_EXPR || is_assignment_op_expr_p (cond))\n       && warn_parentheses\n       && !warning_suppressed_p (cond, OPT_Wparentheses)\n       && warning_at (cp_expr_loc_or_input_loc (cond),"}, {"sha": "f29234ce589d81c14920b6059aee5ee0b3e811ef", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-31.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-31.C?ref=654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "patch": "@@ -0,0 +1,59 @@\n+/* Test that -Wparentheses warns for struct/class assignments,\n+   except for explicit calls to operator= (). */\n+/* PR c++/25689 */\n+/* { dg-options \"-Wparentheses\" }  */\n+\n+struct A\n+{\n+\tA& operator= (int);\n+\tA operator= (double);\n+\toperator bool ();\n+};\n+\n+struct B\n+{\n+\tbool x;\n+\tB& operator= (int);\n+\tB operator= (double);\n+\toperator bool ();\n+};\n+\n+struct C\n+{\n+\tC& operator= (int);\n+\tvirtual C operator= (double);\n+\toperator bool ();\n+};\n+\n+/* Test empty class */\n+void f1 (A a1, A a2)\n+{\n+\tif (a1 = 0); /* { dg-warning \"suggest parentheses\" } */\n+\tif (a1 = 0.); /* { dg-warning \"suggest parentheses\" } */\n+\tif (a1.operator= (0));\n+\tif (a1.operator= (a2));\n+\n+\t/* Ideally, we'd warn for empty classes using trivial operator= (below),\n+\t   but we don't do so yet as it is a non-trivial COMPOUND_EXPR. */\n+\tif (a1 = a2); /* { dg-warning \"suggest parentheses\" \"\" { xfail *-*-* } } */\n+}\n+\n+/* Test non-empty class */\n+void f2 (B b1, B b2)\n+{\n+\tif (b1 = 0); /* { dg-warning \"suggest parentheses\" } */\n+\tif (b1 = 0.); /* { dg-warning \"suggest parentheses\" } */\n+\tif (b1 = b2); /* { dg-warning \"suggest parentheses\" } */\n+\tif (b1.operator= (0));\n+\tif (b1.operator= (b2));\n+}\n+\n+/* Test class with vtable */\n+void f3 (C c1, C c2)\n+{\n+\tif (c1 = 0); /* { dg-warning \"suggest parentheses\" } */\n+\tif (c1 = 0.); /* { dg-warning \"suggest parentheses\" } */\n+\tif (c1 = c2); /* { dg-warning \"suggest parentheses\" } */\n+\tif (c1.operator= (0));\n+\tif (c1.operator= (c2));\n+}"}]}