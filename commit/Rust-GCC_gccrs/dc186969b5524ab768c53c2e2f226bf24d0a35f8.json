{"sha": "dc186969b5524ab768c53c2e2f226bf24d0a35f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMxODY5NjliNTUyNGFiNzY4YzUzYzJlMmYyMjZiZjI0ZDBhMzVmOA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-03-28T13:06:30Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-03-28T13:06:30Z"}, "message": "re PR fortran/38432 (Add warning for loops which are never executed)\n\n2009-03-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/38432\n        * resolve.c (gfc_resolve_iterator): Add zero-loop warning.\n\n2009-03-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/38432\n        * gfortran.dg/do_check_5.f90: New test.\n        * gfortran.dg/array_constructor_11.f90: Add dg-warning.\n        * gfortran.dg/array_constructor_18.f90: Ditto.\n        * gfortran.dg/array_constructor_22.f90: Ditto.\n        * gfortran.dg/do_3.F90: Ditto.\n        * gfortran.dg/do_1.f90: Ditto.\n\nFrom-SVN: r145186", "tree": {"sha": "80c4f2cc505e236babce61667792e399e907feb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80c4f2cc505e236babce61667792e399e907feb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc186969b5524ab768c53c2e2f226bf24d0a35f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc186969b5524ab768c53c2e2f226bf24d0a35f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc186969b5524ab768c53c2e2f226bf24d0a35f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc186969b5524ab768c53c2e2f226bf24d0a35f8/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17021bc8cbb9724e7cadb4984d11d5822e59df3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17021bc8cbb9724e7cadb4984d11d5822e59df3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17021bc8cbb9724e7cadb4984d11d5822e59df3a"}], "stats": {"total": 115, "additions": 91, "deletions": 24}, "files": [{"sha": "e3bacc1aa0f6a83bca9dd6f7e20bedc96102a856", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -1,3 +1,8 @@\n+2009-03-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/38432\n+\t* resolve.c (gfc_resolve_iterator): Add zero-loop warning.\n+\n 2009-03-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \t    Paul Thomas  <pault@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@net-b.de>"}, {"sha": "1d6ee852426ad64e6fcbd8e48eee55ef27035883", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -4918,6 +4918,26 @@ gfc_resolve_iterator (gfc_iterator *iter, bool real_ok)\n       || iter->step->ts.type != iter->var->ts.type)\n     gfc_convert_type (iter->step, &iter->var->ts, 2);\n \n+  if (iter->start->expr_type == EXPR_CONSTANT\n+      && iter->end->expr_type == EXPR_CONSTANT\n+      && iter->step->expr_type == EXPR_CONSTANT)\n+    {\n+      int sgn, cmp;\n+      if (iter->start->ts.type == BT_INTEGER)\n+\t{\n+\t  sgn = mpz_cmp_ui (iter->step->value.integer, 0);\n+\t  cmp = mpz_cmp (iter->end->value.integer, iter->start->value.integer);\n+\t}\n+      else\n+\t{\n+\t  sgn = mpfr_sgn (iter->step->value.real);\n+\t  cmp = mpfr_cmp (iter->end->value.real, iter->start->value.real);\n+\t}\n+      if ((sgn > 0 && cmp < 0) || (sgn < 0 && cmp > 0))\n+\tgfc_warning (\"DO loop at %L will be executed zero times\",\n+\t\t     &iter->step->where);\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "315f6cfc06ffcb6c4d5d6995b574d77084c997f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -1,3 +1,13 @@\n+2009-03-28 Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/38432\n+\t* gfortran.dg/do_check_5.f90: New test.\n+\t* gfortran.dg/array_constructor_11.f90: Add dg-warning.\n+\t* gfortran.dg/array_constructor_18.f90: Ditto.\n+\t* gfortran.dg/array_constructor_22.f90: Ditto.\n+\t* gfortran.dg/do_3.F90: Ditto.\n+\t* gfortran.dg/do_1.f90: Ditto.\n+\n 2009-03-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38180"}, {"sha": "bb9f0dddb1107363792a9ef331f714f24f79a3a7", "filename": "gcc/testsuite/gfortran.dg/array_constructor_11.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_11.f90?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -10,20 +10,20 @@ subroutine build (order)\n \n     call test (1, 11, 3, (/ (i, i = 1, 11, 3) /))\n     call test (3, 20, 2, (/ (i, i = 3, 20, 2) /))\n-    call test (4, 0, 11, (/ (i, i = 4, 0, 11) /))\n+    call test (4, 0, 11, (/ (i, i = 4, 0, 11) /)) ! { dg-warning \"will be executed zero times\" }\n \n     call test (110, 10, -3,  (/ (i, i = 110, 10, -3) /))\n     call test (200, 20, -12, (/ (i, i = 200, 20, -12) /))\n-    call test (29, 30, -6,   (/ (i, i = 29, 30, -6) /))\n+    call test (29, 30, -6,   (/ (i, i = 29, 30, -6) /)) ! { dg-warning \"will be executed zero times\" }\n \n     call test (1, order, 3,  (/ (i, i = 1, order, 3) /))\n     call test (order, 1, -3, (/ (i, i = order, 1, -3) /))\n \n     ! Triggers compile-time iterator calculations in trans-array.c\n     call test (1, 1000, 2,   (/ (i, i = 1, 1000, 2),   (i, i = order, 0, 1) /))\n-    call test (1, 0, 3,      (/ (i, i = 1, 0, 3),      (i, i = order, 0, 1) /))\n-    call test (1, 2000, -5,  (/ (i, i = 1, 2000, -5),  (i, i = order, 0, 1) /))\n-    call test (3000, 99, 4,  (/ (i, i = 3000, 99, 4),  (i, i = order, 0, 1) /))\n+    call test (1, 0, 3,      (/ (i, i = 1, 0, 3),      (i, i = order, 0, 1) /)) ! { dg-warning \"will be executed zero times\" }\n+    call test (1, 2000, -5,  (/ (i, i = 1, 2000, -5),  (i, i = order, 0, 1) /)) ! { dg-warning \"will be executed zero times\" }\n+    call test (3000, 99, 4,  (/ (i, i = 3000, 99, 4),  (i, i = order, 0, 1) /)) ! { dg-warning \"will be executed zero times\" }\n     call test (400, 77, -39, (/ (i, i = 400, 77, -39), (i, i = order, 0, 1) /))\n \n     do j = -10, 10"}, {"sha": "c78976839d0dc69d2c2f3e44de05fac1177c5a94", "filename": "gcc/testsuite/gfortran.dg/array_constructor_18.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_18.f90?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -5,7 +5,7 @@\n !\n ! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n !\n-  call foo ((/(S1(i),i=1,3,-1)/))\n+  call foo ((/(S1(i),i=1,3,-1)/)) ! { dg-warning \"will be executed zero times\" }\n CONTAINS\n   FUNCTION S1(i)\n     CHARACTER(LEN=1) :: S1"}, {"sha": "0dcdaea68c1a1aed01432ee6a27badf73ade8e1c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_22.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_22.f90?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -7,7 +7,7 @@ module test\n       function my_string(x) \n          integer i \n          real, intent(in) :: x(:) \n-         character(0) h4(1:minval([(1,i=1,0)],1)) \n+         character(0) h4(1:minval([(1,i=1,0)],1)) ! { dg-warning \"will be executed zero times\" }\n          character(0) sv1(size(x,1):size(h4)) \n          character(0) sv2(2*lbound(sv1,1):size(h4)) \n          character(lbound(sv2,1)-3) my_string "}, {"sha": "171275af3f2d6d836070e7d1d759ab2c9baa580c", "filename": "gcc/testsuite/gfortran.dg/do_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_1.f90?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -29,17 +29,17 @@ program do_1\n \n   ! Zero iterations\n   j = 0\n-  do i = 1, 0, 1\n+  do i = 1, 0, 1 ! { dg-warning \"executed zero times\" }\n     j = j + 1\n   end do\n   if (j .ne. 0) call abort\n   j = 0\n-  do i = 1, 0, 2\n+  do i = 1, 0, 2 ! { dg-warning \"executed zero times\" }\n     j = j + 1\n   end do\n   if (j .ne. 0) call abort\n   j = 0\n-  do i = 1, 2, -1\n+  do i = 1, 2, -1 ! { dg-warning \"executed zero times\" }\n     j = j + 1\n   end do\n   if (j .ne. 0) call abort"}, {"sha": "67723a508f43d8e621157aab9f46594c26d638d8", "filename": "gcc/testsuite/gfortran.dg/do_3.F90", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_3.F90?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -21,16 +21,16 @@ program test\n   TEST_LOOP(i, 0, 1, 2, 1, test_i, 2)\n   TEST_LOOP(i, 0, 1, 3, 1, test_i, 3)\n   TEST_LOOP(i, 0, 1, huge(0), 1, test_i, huge(0))\n-  TEST_LOOP(i, 0, 1, -1, 0, test_i, 0)\n-  TEST_LOOP(i, 0, 1, -2, 0, test_i, 0)\n-  TEST_LOOP(i, 0, 1, -3, 0, test_i, 0)\n-  TEST_LOOP(i, 0, 1, -huge(0), 0, test_i, 0)\n-  TEST_LOOP(i, 0, 1, -huge(0)-1, 0, test_i, 0)\n-\n-  TEST_LOOP(i, 1, 0, 1, 0, test_i, 1)\n-  TEST_LOOP(i, 1, 0, 2, 0, test_i, 1)\n-  TEST_LOOP(i, 1, 0, 3, 0, test_i, 1)\n-  TEST_LOOP(i, 1, 0, huge(0), 0, test_i, 1)\n+  TEST_LOOP(i, 0, 1, -1, 0, test_i, 0) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(i, 0, 1, -2, 0, test_i, 0) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(i, 0, 1, -3, 0, test_i, 0) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(i, 0, 1, -huge(0), 0, test_i, 0) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(i, 0, 1, -huge(0)-1, 0, test_i, 0) ! { dg-warning \"executed zero times\" }\n+\n+  TEST_LOOP(i, 1, 0, 1, 0, test_i, 1) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(i, 1, 0, 2, 0, test_i, 1) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(i, 1, 0, 3, 0, test_i, 1) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(i, 1, 0, huge(0), 0, test_i, 1) ! { dg-warning \"executed zero times\" }\n   TEST_LOOP(i, 1, 0, -1, 2, test_i, -1)\n   TEST_LOOP(i, 1, 0, -2, 1, test_i, -1)\n   TEST_LOOP(i, 1, 0, -3, 1, test_i, -2)\n@@ -58,14 +58,14 @@ program test\n   TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -huge(i1)-1_1, 2, test_i1, -huge(i1)-2_1)\n \n   TEST_LOOP(i1, -2_1, 3_1, huge(i1), 1, test_i1, huge(i1)-2_1)\n-  TEST_LOOP(i1, -2_1, 3_1, -huge(i1), 0, test_i1, -2_1)\n+  TEST_LOOP(i1, -2_1, 3_1, -huge(i1), 0, test_i1, -2_1) ! { dg-warning \"executed zero times\" }\n   TEST_LOOP(i1, 2_1, -3_1, -huge(i1), 1, test_i1, 2_1-huge(i1))\n-  TEST_LOOP(i1, 2_1, -3_1, huge(i1), 0, test_i1, 2_1)\n+  TEST_LOOP(i1, 2_1, -3_1, huge(i1), 0, test_i1, 2_1) ! { dg-warning \"executed zero times\" }\n \n   ! Real loops\n   TEST_LOOP(r, 0.0, 1.0, 0.11, 1 + int(1.0/0.11), test_r, 0.0)\n-  TEST_LOOP(r, 0.0, 1.0, -0.11, 0, test_r, 0.0)\n-  TEST_LOOP(r, 0.0, -1.0, 0.11, 0, test_r, 0.0)\n+  TEST_LOOP(r, 0.0, 1.0, -0.11, 0, test_r, 0.0) ! { dg-warning \"executed zero times\" }\n+  TEST_LOOP(r, 0.0, -1.0, 0.11, 0, test_r, 0.0) ! { dg-warning \"executed zero times\" }\n   TEST_LOOP(r, 0.0, -1.0, -0.11, 1 + int(1.0/0.11), test_r, 0.0)\n   TEST_LOOP(r, 0.0, 0.0, 0.11, 1, test_r, 0.0)\n   TEST_LOOP(r, 0.0, 0.0, -0.11, 1, test_r, 0.0)"}, {"sha": "081a228cfc783cb114fc7f1b9665c538d579e5ee", "filename": "gcc/testsuite/gfortran.dg/do_check_5.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc186969b5524ab768c53c2e2f226bf24d0a35f8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_5.f90?ref=dc186969b5524ab768c53c2e2f226bf24d0a35f8", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! \n+! PR/fortran 38432\n+! DO-loop compile-time checks\n+!\n+implicit none\n+integer :: i\n+real :: r\n+do i = 1, 0 ! { dg-warning \"executed zero times\" }\n+end do\n+\n+do i = 1, -1, 1 ! { dg-warning \"executed zero times\" }\n+end do\n+\n+do i = 1, 2, -1 ! { dg-warning \"executed zero times\" }\n+end do\n+\n+do i = 1, 2, 0 ! { dg-error \"cannot be zero\" }\n+end do\n+\n+do r = 1, 0 ! { dg-warning \"must be integer|executed zero times\" }\n+end do\n+\n+do r = 1, -1, 1 ! { dg-warning \"must be integer|executed zero times\" }\n+end do\n+\n+do r = 1, 2, -1 ! { dg-warning \"must be integer|executed zero times\" }\n+end do\n+\n+do r = 1, 2, 0 ! { dg-error \"must be integer|cannot be zero\" }\n+end do\n+end"}]}