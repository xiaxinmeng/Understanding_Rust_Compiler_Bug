{"sha": "f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmOTBhZTBkZWUzN2MxMzNmYjQ2ZWQ5NzNjMWVkZGZjZWEwMjNmYQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-07-23T01:21:40Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-07-23T01:21:40Z"}, "message": "Makefile.am (ordinary_java_source_files): Add DefaultContentHandlerFactory.java.\n\n2004-07-22  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* Makefile.am (ordinary_java_source_files): Add\n\tDefaultContentHandlerFactory.java.\n\t* Makefile.in: Rebuilt.\n\t* java/net/URLConnection.java (defaultFactory): New field.\n\t(getContent):\n\t(getContentHandler): Renamed from 'setContentHandler'. Try\n\tdefaultFactory after user-set factory, if any. Search for content\n\thandler implementations in gnu.java.net.content, not\n\tgnu.gcj.content.\n\t* gnu/java/net/protocol/file/Connection.java (getHeaderField):\n\tImplemented.\n\t(getLastModified): Implemented.\n\t(getPermission): Create file permission here, instead of in\n\tconstructor.\n\t* gnu/java/net/protocol/gcjlib/Connection.java (getHeaderField):\n\tImplemented.\n\t* gnu/java/net/protocol/jar/Connection.java (getHeaderField):\n\tImplemented.\n\t(getLastModified): Implemented.\n\t* gnu/java/awt/ClasspathToolkit.java (createImageProducer): New.\n\tDefault implementation.\n\t* gnu/java/awt/peer/gtk/GtkToolkit.java (createImageProducer): New.\n\tImplement using GdkPixbufDecoder.\n\nFrom-SVN: r85069", "tree": {"sha": "d02b2df079e500b6c08b6fc1f2a09b28c804beca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d02b2df079e500b6c08b6fc1f2a09b28c804beca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/comments", "author": null, "committer": null, "parents": [{"sha": "ef453534c4765aeca6b44c6b496f5a02458ebb1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef453534c4765aeca6b44c6b496f5a02458ebb1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef453534c4765aeca6b44c6b496f5a02458ebb1d"}], "stats": {"total": 217, "additions": 187, "deletions": 30}, "files": [{"sha": "f315687599df823bb2d3f9511d401a4bcfc50213", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -1,3 +1,28 @@\n+2004-07-22  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* Makefile.am (ordinary_java_source_files): Add\n+\tDefaultContentHandlerFactory.java.\n+\t* Makefile.in: Rebuilt.\n+\t* java/net/URLConnection.java (defaultFactory): New field.\n+\t(getContent): \n+\t(getContentHandler): Renamed from 'setContentHandler'. Try \n+\tdefaultFactory after user-set factory, if any. Search for content \n+\thandler implementations in gnu.java.net.content, not gnu.gcj.content.\n+\t* gnu/java/net/protocol/file/Connection.java (getHeaderField):\n+\tImplemented.\n+\t(getLastModified): Implemented.\n+\t(getPermission): Create file permission here, instead of in\n+\tconstructor.\n+\t* gnu/java/net/protocol/gcjlib/Connection.java (getHeaderField):\n+\tImplemented.\n+\t* gnu/java/net/protocol/jar/Connection.java (getHeaderField):\n+\tImplemented.\n+\t(getLastModified): Implemented.\n+\t* gnu/java/awt/ClasspathToolkit.java (createImageProducer): New.\n+\tDefault implementation.\n+\t* gnu/java/awt/peer/gtk/GtkToolkit.java (createImageProducer): New.\n+\tImplement using GdkPixbufDecoder.\n+\t\n 2004-07-21  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/JTextArea.java\n@@ -650,8 +675,6 @@\n \t(BasicPopupMenuUI.PopupMenuHandler): Implemented.\n \t(BasicPopupMenuUI.TopWindowListener): New ComponentListener.\n \tImplemented.\n-\t\n-\t\n \n 2004-07-21  Michael Koch  <konqueror@gmx.de>\n "}, {"sha": "005c8bf9e93a717e9c2b6fb24bea2eb22c0f4b22", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -2436,6 +2436,7 @@ gnu/java/locale/LocaleInformation_zh_HK.java \\\n gnu/java/locale/LocaleInformation_zh_SG.java \\\n gnu/java/locale/LocaleInformation_zh_TW.java \\\n gnu/java/math/MPN.java \\\n+gnu/java/net/DefaultContentHandlerFactory.java \\\n gnu/java/net/HeaderFieldHelper.java \\\n gnu/java/net/PlainDatagramSocketImpl.java \\\n gnu/java/net/PlainSocketImpl.java \\"}, {"sha": "9cf6bacb72b7d7958837a960e575092c9d95885c", "filename": "libjava/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -2119,6 +2119,7 @@ gnu/java/locale/LocaleInformation_zh_HK.java \\\n gnu/java/locale/LocaleInformation_zh_SG.java \\\n gnu/java/locale/LocaleInformation_zh_TW.java \\\n gnu/java/math/MPN.java \\\n+gnu/java/net/DefaultContentHandlerFactory.java \\\n gnu/java/net/HeaderFieldHelper.java \\\n gnu/java/net/PlainDatagramSocketImpl.java \\\n gnu/java/net/PlainSocketImpl.java \\\n@@ -3089,7 +3090,7 @@ libgcj-test.spec.in libgcj.pc.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -3389,7 +3390,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/locale/LocaleInformation_zh_HK.P \\\n .deps/gnu/java/locale/LocaleInformation_zh_SG.P \\\n .deps/gnu/java/locale/LocaleInformation_zh_TW.P \\\n-.deps/gnu/java/math/MPN.P .deps/gnu/java/net/HeaderFieldHelper.P \\\n+.deps/gnu/java/math/MPN.P \\\n+.deps/gnu/java/net/DefaultContentHandlerFactory.P \\\n+.deps/gnu/java/net/HeaderFieldHelper.P \\\n .deps/gnu/java/net/PlainDatagramSocketImpl.P \\\n .deps/gnu/java/net/PlainSocketImpl.P .deps/gnu/java/net/URLParseError.P \\\n .deps/gnu/java/net/natPlainDatagramSocketImpl.P \\"}, {"sha": "92934593d3994d2e98b0795338436b3b0cfb9c3e", "filename": "libjava/gnu/java/awt/ClasspathToolkit.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fawt%2FClasspathToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fawt%2FClasspathToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FClasspathToolkit.java?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -48,6 +48,7 @@\n import java.awt.HeadlessException;\n import java.awt.Toolkit;\n import java.awt.image.ColorModel;\n+import java.awt.image.ImageProducer;\n import java.io.File;\n import java.io.InputStream;\n import java.io.IOException;\n@@ -331,4 +332,17 @@ public Image createImage(String path)\n         .initCause(muex);\n     }\n   }\n+  \n+  /**\n+   * Creates an ImageProducer from the specified URL. The image is assumed\n+   * to be in a recognised format. If the toolkit does not implement the\n+   * image format or the image format is not recognised, null is returned.\n+   * This default implementation is overriden by the Toolkit implementations.\n+   *\n+   * @param url URL to read image data from.\n+   */\n+  public ImageProducer createImageProducer(URL url)\n+  {\n+    return null;\n+  }\n }"}, {"sha": "3f82159c3abf6cf9eed4f97de5d0601f93862d02", "filename": "libjava/gnu/java/awt/peer/gtk/GtkToolkit.java", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -278,6 +278,17 @@ public Image createImage (byte[] imagedata, int imageoffset,\n         return image;        \n       }\n   }\n+  \n+  /**\n+   * Creates an ImageProducer from the specified URL. The image is assumed\n+   * to be in a recognised format. \n+   *\n+   * @param url URL to read image data from.\n+   */  \n+  public ImageProducer createImageProducer(URL url)\n+  {\n+    return new GdkPixbufDecoder(url);  \n+  }\n \n   public ColorModel getColorModel () \n   {"}, {"sha": "4da6e882c002d4cda7de2df41a479e1d58801824", "filename": "libjava/gnu/java/net/protocol/file/Connection.java", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -50,6 +50,9 @@\n import java.net.URL;\n import java.net.URLConnection;\n import java.security.Permission;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n \n /**\n  * This subclass of java.net.URLConnection models a URLConnection via\n@@ -62,9 +65,11 @@\n public class Connection extends URLConnection\n {\n   /**\n-   * Default permission for a file\n+   * HTTP-style DateFormat, used to format the last-modified header.\n    */\n-  private static final String DEFAULT_PERMISSION = \"read\";\n+  private static SimpleDateFormat dateFormat\n+    = new SimpleDateFormat(\"EEE, dd MMM yyyy hh:mm:ss 'GMT'\",\n+                           new Locale (\"En\", \"Us\", \"Unix\"));\n \n   /**\n    * This is a File object for this connection\n@@ -81,19 +86,12 @@ public class Connection extends URLConnection\n    */\n   private OutputStream outputStream;\n   \n-  /**\n-   * FilePermission to read the file\n-   */\n-  private FilePermission permission;\n-\n   /**\n    * Calls superclass constructor to initialize.\n    */\n   public Connection(URL url)\n   {\n     super (url);\n-\n-    permission = new FilePermission(getURL().getFile(), DEFAULT_PERMISSION);\n   }\n   \n   /**\n@@ -156,45 +154,73 @@ public OutputStream getOutputStream()\n   }\n \n   /**\n-   * Get the last modified time of the resource.\n-   *\n-   * @return the time since epoch that the resource was modified.\n+   *  Get an http-style header field. Just handle a few common ones. \n    */\n-  public long getLastModified()\n+  public String getHeaderField(String field)\n   {\n     try\n       {\n \tif (!connected)\n \t  connect();\n \n-\treturn file.lastModified();\n+\tif (field.equals(\"content-type\"))\n+          return guessContentTypeFromName(file.getName());\n+\telse if (field.equals(\"content-length\"))\n+          return Long.toString(file.length());\n+\telse if (field.equals(\"last-modified\"))\n+\t  {\n+\t    synchronized (dateFormat)\n+\t      {\n+        \treturn dateFormat.format(new Date(file.lastModified()));\n+\t      }\n+\t  }\n       }\n     catch (IOException e)\n       {\n-\treturn -1;\n+        // Fall through.\n       }\n+    return null;\n   }\n \n   /**\n    * Get the length of content.\n-   *\n    * @return the length of the content.\n    */\n   public int getContentLength()\n+  {\n+    try\n+      {\n+ \tif (!connected)\n+ \t  connect();\n+\n+\treturn (int) file.length();\n+      }\n+    catch (IOException e)\n+      {\n+ \treturn -1;\n+      }\n+  }\n+\n+  /**\n+   * Get the last modified time of the resource.\n+   *\n+   * @return the time since epoch that the resource was modified.\n+   */\n+  public long getLastModified()\n   {\n     try\n       {\n \tif (!connected)\n \t  connect();\n-        \n-\treturn (int) file.length();\n+\n+\treturn file.lastModified();\n       }\n     catch (IOException e)\n       {\n \treturn -1;\n       }\n   }\n-  \n+\n   /**\n    * This method returns a <code>Permission</code> object representing the\n    * permissions required to access this URL.  This method returns a\n@@ -205,6 +231,6 @@ public int getContentLength()\n    */\n   public Permission getPermission() throws IOException\n   {\n-    return permission;\n+    return new FilePermission(getURL().getFile(), \"read\");\n   }\n }"}, {"sha": "4e6e462f26eab5d67e6233257d73d892a1e46b28", "filename": "libjava/gnu/java/net/protocol/gcjlib/Connection.java", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fgcjlib%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fgcjlib%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fgcjlib%2FConnection.java?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -61,4 +61,23 @@ public InputStream getInputStream() throws IOException\n     connect();\n     return new CoreInputStream(core);\n   }\n+  \n+  public String getHeaderField(String field)\n+  {\n+    try\n+      {\n+\tif (!connected)\n+\t  connect();\n+\n+\tif (field.equals(\"content-type\"))\n+          return guessContentTypeFromName(name);\n+\telse if (field.equals(\"content-length\"))\n+          return Long.toString(core.length);\n+      }\n+    catch (IOException e)\n+      {\n+        // Fall through.\n+      }\n+    return null;\n+  }  \n }"}, {"sha": "9ba2e3fd1ffc8850b76c534819a187f39c33b14b", "filename": "libjava/gnu/java/net/protocol/jar/Connection.java", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -49,8 +49,11 @@\n import java.net.ProtocolException;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.Hashtable;\n+import java.util.Locale;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.JarInputStream;\n@@ -66,6 +69,14 @@\n public final class Connection extends JarURLConnection\n {\n   private static Hashtable file_cache = new Hashtable();\n+\n+  /**\n+   * HTTP-style DateFormat, used to format the last-modified header.\n+   */\n+  private static SimpleDateFormat dateFormat\n+    = new SimpleDateFormat(\"EEE, dd MMM yyyy hh:mm:ss 'GMT'\",\n+                           new Locale (\"En\", \"Us\", \"Unix\"));\n+\n   private JarFile jar_file;\n \n   /**\n@@ -219,6 +230,32 @@ public synchronized JarFile getJarFile() throws IOException\n     return jar_file;\n   }\n \n+  public String getHeaderField(String field)\n+  {\n+    try\n+      {\n+\tif (!connected)\n+\t  connect();\n+\n+\tif (field.equals(\"content-type\"))\n+          return guessContentTypeFromName(getJarEntry().getName());\n+\telse if (field.equals(\"content-length\"))\n+          return Long.toString(getJarEntry().getSize());\n+\telse if (field.equals(\"last-modified\"))\n+\t  {\n+\t    synchronized (dateFormat)\n+\t      {\n+        \treturn dateFormat.format(new Date(getJarEntry().getTime()));\n+\t      }\n+\t  }\n+      }\n+    catch (IOException e)\n+      {\n+        // Fall through.\n+      }\n+    return null;\n+  }\n+\n   public int getContentLength()\n   {\n     if (!connected)\n@@ -233,4 +270,19 @@ public int getContentLength()\n \treturn -1;\n       }\n   }\n+\n+  public long getLastModified()\n+  {\n+    if (!connected)\n+      return -1;\n+\n+    try\n+      {\n+\treturn getJarEntry().getTime();\n+      }\n+    catch (IOException e)\n+      {\n+\treturn -1;\n+      }\n+  }\n }"}, {"sha": "4bf52b860cd1be16e07de615d143cbc64e578526", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f90ae0dee37c133fb46ed973c1eddfcea023fa/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=f1f90ae0dee37c133fb46ed973c1eddfcea023fa", "patch": "@@ -116,6 +116,9 @@\n    */\n   private static boolean defaultUseCaches = true;\n \n+  private static ContentHandlerFactory defaultFactory\n+    = new gnu.java.net.DefaultContentHandlerFactory();\n+\n   /**\n    * This variable determines whether or not interaction is allowed with\n    * the user.  For example, to prompt for a username and password.\n@@ -436,7 +439,7 @@ public Object getContent() throws IOException\n     // guessContentTypeFromName() and guessContentTypeFromStream methods\n     // as well as FileNameMap class & fileNameMap field & get/set methods.\n     String type = getContentType();\n-    ContentHandler ch = setContentHandler(type);\n+    ContentHandler ch = getContentHandler(type);\n \n     if (ch == null)\n       return getInputStream();\n@@ -963,7 +966,7 @@ public static void setFileNameMap(FileNameMap map)\n     fileNameMap = map;\n   }\n \n-  private ContentHandler setContentHandler(String contentType)\n+  private ContentHandler getContentHandler(String contentType)\n   {\n     ContentHandler handler;\n \n@@ -981,12 +984,17 @@ private ContentHandler setContentHandler(String contentType)\n       else\n \treturn null;\n \n-    // If a non-default factory has been set, use it to find the content type.\n+    // If a non-default factory has been set, use it.\n     if (factory != null)\n       handler = factory.createContentHandler(contentType);\n \n-    // Non-default factory may have returned null or a factory wasn't set.\n-    // Use the default search algorithm to find a handler for this content type.\n+    // Now try default factory. Using this factory to instantiate built-in\n+    // content handlers is preferable  \n+    if (handler == null)\n+      handler = defaultFactory.createContentHandler(contentType);\n+\n+    // User-set factory has not returned a handler. Use the default search \n+    // algorithm.\n     if (handler == null)\n       {\n \t// Get the list of packages to check and append our default handler\n@@ -995,7 +1003,7 @@ private ContentHandler setContentHandler(String contentType)\n \t// ever be needed (or available).\n \tString propVal = System.getProperty(\"java.content.handler.pkgs\");\n \tpropVal = (propVal == null) ? \"\" : (propVal + \"|\");\n-\tpropVal = propVal + \"gnu.gcj.content|sun.net.www.content\";\n+\tpropVal = propVal + \"gnu.java.net.content|sun.net.www.content\";\n \n \t// Replace the '/' character in the content type with '.' and\n \t// all other non-alphabetic, non-numeric characters with '_'."}]}