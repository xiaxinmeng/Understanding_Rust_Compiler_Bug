{"sha": "304b7a23a0d93aafbd53addd1c51f420467c4f63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0YjdhMjNhMGQ5M2FhZmJkNTNhZGRkMWM1MWY0MjA0NjdjNGY2Mw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-20T22:07:22Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-20T22:07:22Z"}, "message": "sparc.c (fcc_reg_operand): Ensure correct mode.\n\n\t* sparc/sparc.c (fcc_reg_operand): Ensure correct mode.\n\t(icc_or_fcc_reg_operand): Likewise.\n\t(gen_v9_scc): IF_THEN_ELSE must have a mode.\n\t(print_operand): New operand code `x' for all condition codes.\n\tNew operand codes `c,d' for reversed conditional moves.\n\t* sparc/sparc.md (movqicc,movhicc): New named patterns.\n\t(movsicc,movdicc,movsfcc,movdfcc,movtfcc): Rewrite.\n\t(conditional move matchers): Rewrite.\n\nFrom-SVN: r11583", "tree": {"sha": "27d065e66d9b50fa308acc1ceb93028f7362f8f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d065e66d9b50fa308acc1ceb93028f7362f8f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/304b7a23a0d93aafbd53addd1c51f420467c4f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304b7a23a0d93aafbd53addd1c51f420467c4f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304b7a23a0d93aafbd53addd1c51f420467c4f63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304b7a23a0d93aafbd53addd1c51f420467c4f63/comments", "author": null, "committer": null, "parents": [{"sha": "1cdbf242eb2776080b52d269771c054abac1187f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdbf242eb2776080b52d269771c054abac1187f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cdbf242eb2776080b52d269771c054abac1187f"}], "stats": {"total": 591, "additions": 316, "deletions": 275}, "files": [{"sha": "18284b30d5ad90180b3b408ebb1d98a1d397bb79", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 84, "deletions": 39, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304b7a23a0d93aafbd53addd1c51f420467c4f63/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304b7a23a0d93aafbd53addd1c51f420467c4f63/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=304b7a23a0d93aafbd53addd1c51f420467c4f63", "patch": "@@ -327,8 +327,12 @@ fcc_reg_operand (op, mode)\n      Fail instead of calling abort in this case.  */\n   if (GET_CODE (op) != REG)\n     return 0;\n+\n   if (mode != VOIDmode && mode != GET_MODE (op))\n     return 0;\n+  if (mode == VOIDmode\n+      && (GET_MODE (op) != CCFPmode && GET_MODE (op) != CCFPEmode))\n+    return 0;\n \n #if 0\t/* ??? ==> 1 when %fcc0-3 are pseudos first.  See gen_compare_reg().  */\n   if (reg_renumber == 0)\n@@ -347,7 +351,15 @@ icc_or_fcc_reg_operand (op, mode)\n      enum machine_mode mode;\n {\n   if (GET_CODE (op) == REG && REGNO (op) == SPARC_ICC_REG)\n-    return 1;\n+    {\n+      if (mode != VOIDmode && mode != GET_MODE (op))\n+\treturn 0;\n+      if (mode == VOIDmode\n+\t  && GET_MODE (op) != CCmode && GET_MODE (op) != CCXmode)\n+\treturn 0;\n+      return 1;\n+    }\n+\n   return fcc_reg_operand (op, mode);\n }\n \n@@ -987,7 +999,7 @@ gen_v9_scc (compare_code, operands)\n \t{\n \t  emit_insn (gen_rtx (SET, VOIDmode, operands[0], sparc_compare_op0));\n \t  emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t      gen_rtx (IF_THEN_ELSE, VOIDmode,\n+\t\t\t      gen_rtx (IF_THEN_ELSE, DImode,\n \t\t\t\t       gen_rtx (compare_code, DImode,\n \t\t\t\t\t\tsparc_compare_op0, const0_rtx),\n \t\t\t\t       const1_rtx,\n@@ -1006,7 +1018,7 @@ gen_v9_scc (compare_code, operands)\n \t  temp = sparc_compare_op0;\n \t}\n       emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t  gen_rtx (IF_THEN_ELSE, VOIDmode,\n+\t\t\t  gen_rtx (IF_THEN_ELSE, GET_MODE (operands[0]),\n \t\t\t\t   gen_rtx (compare_code, DImode,\n \t\t\t\t\t    temp, const0_rtx),\n \t\t\t\t   const1_rtx,\n@@ -1028,14 +1040,14 @@ gen_v9_scc (compare_code, operands)\n \t  default :\n \t    abort ();\n \t}\n-\temit_insn (gen_rtx (SET, VOIDmode, operands[0], const0_rtx));\n-\temit_insn (gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t    gen_rtx (IF_THEN_ELSE, VOIDmode,\n-\t\t\t\t     gen_rtx (compare_code,\n-\t\t\t\t\t      GET_MODE (operands[1]),\n-\t\t\t\t\t      operands[1], const0_rtx),\n-\t\t\t\t\t      const1_rtx, operands[0])));\n-\treturn 1;\n+      emit_insn (gen_rtx (SET, VOIDmode, operands[0], const0_rtx));\n+      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n+\t\t\t  gen_rtx (IF_THEN_ELSE, GET_MODE (operands[0]),\n+\t\t\t\t   gen_rtx (compare_code,\n+\t\t\t\t\t    GET_MODE (operands[1]),\n+\t\t\t\t\t    operands[1], const0_rtx),\n+\t\t\t\t    const1_rtx, operands[0])));\n+      return 1;\n     }\n }\n \n@@ -3884,6 +3896,23 @@ print_operand (file, x, code)\n \t I.e., T (%o0) => %o3.  */\n       fputs (reg_names[REGNO (x)+3], file);\n       return;\n+    case 'x':\n+      /* Print a condition code register.  */\n+      if (REGNO (x) == SPARC_ICC_REG)\n+\t{\n+\t  /* We don't handle CC[X]_NOOVmode because they're not supposed\n+\t     to occur here.  */\n+\t  if (GET_MODE (x) == CCmode)\n+\t    fputs (\"%icc\", file);\n+\t  else if (GET_MODE (x) == CCXmode)\n+\t    fputs (\"%xcc\", file);\n+\t  else\n+\t    abort ();\n+\t}\n+      else\n+\t/* %fccN register */\n+\tfputs (reg_names[REGNO (x)], file);\n+      return;\n     case 'm':\n       /* Print the operand's address only.  */\n       output_address (XEXP (x, 0));\n@@ -3920,37 +3949,53 @@ print_operand (file, x, code)\n \t}\n       return;\n \n-      /* This is used by the conditional move instructions.  */\n+      /* These are used by the conditional move instructions.  */\n+    case 'c' :\n     case 'C':\n-      switch (GET_CODE (x))\n-\t{\n-\tcase NE: fputs (\"ne\", file); break;\n-\tcase EQ: fputs (\"e\", file); break;\n-\tcase GE: fputs (\"ge\", file); break;\n-\tcase GT: fputs (\"g\", file); break;\n-\tcase LE: fputs (\"le\", file); break;\n-\tcase LT: fputs (\"l\", file); break;\n-\tcase GEU: fputs (\"geu\", file); break;\n-\tcase GTU: fputs (\"gu\", file); break;\n-\tcase LEU: fputs (\"leu\", file); break;\n-\tcase LTU: fputs (\"lu\", file); break;\n-\tdefault: output_operand_lossage (\"Invalid %%C operand\");\n-\t}\n-      return;\n+      {\n+\tenum rtx_code rc = (code == 'c'\n+\t\t\t    ? reverse_condition (GET_CODE (x))\n+\t\t\t    : GET_CODE (x));\n+\tswitch (rc)\n+\t  {\n+\t  case NE: fputs (\"ne\", file); break;\n+\t  case EQ: fputs (\"e\", file); break;\n+\t  case GE: fputs (\"ge\", file); break;\n+\t  case GT: fputs (\"g\", file); break;\n+\t  case LE: fputs (\"le\", file); break;\n+\t  case LT: fputs (\"l\", file); break;\n+\t  case GEU: fputs (\"geu\", file); break;\n+\t  case GTU: fputs (\"gu\", file); break;\n+\t  case LEU: fputs (\"leu\", file); break;\n+\t  case LTU: fputs (\"lu\", file); break;\n+\t  default: output_operand_lossage (code == 'c'\n+\t\t\t\t\t   ? \"Invalid %%c operand\"\n+\t\t\t\t\t   : \"Invalid %%C operand\");\n+\t  }\n+\treturn;\n+      }\n \n-      /* This is used by the movr instruction pattern.  */\n+      /* These are used by the movr instruction pattern.  */\n+    case 'd':\n     case 'D':\n-      switch (GET_CODE (x))\n-\t{\n-\tcase NE: fputs (\"ne\", file); break;\n-\tcase EQ: fputs (\"e\", file); break;\n-\tcase GE: fputs (\"gez\", file); break;\n-\tcase LT: fputs (\"lz\", file); break;\n-\tcase LE: fputs (\"lez\", file); break;\n-\tcase GT: fputs (\"gz\", file); break;\n-\tdefault: output_operand_lossage (\"Invalid %%D operand\");\n-\t}\n-      return;\n+      {\n+\tenum rtx_code rc = (code == 'd'\n+\t\t\t    ? reverse_condition (GET_CODE (x))\n+\t\t\t    : GET_CODE (x));\n+\tswitch (rc)\n+\t  {\n+\t  case NE: fputs (\"ne\", file); break;\n+\t  case EQ: fputs (\"e\", file); break;\n+\t  case GE: fputs (\"gez\", file); break;\n+\t  case LT: fputs (\"lz\", file); break;\n+\t  case LE: fputs (\"lez\", file); break;\n+\t  case GT: fputs (\"gz\", file); break;\n+\t  default: output_operand_lossage (code == 'd'\n+\t\t\t\t\t   ? \"Invalid %%d operand\"\n+\t\t\t\t\t   : \"Invalid %%D operand\");\n+\t  }\n+\treturn;\n+      }\n \n     case 'b':\n       {"}, {"sha": "8e8d7a1c9db6286cd5293d08a4a67b955447275d", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 232, "deletions": 236, "changes": 468, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304b7a23a0d93aafbd53addd1c51f420467c4f63/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304b7a23a0d93aafbd53addd1c51f420467c4f63/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=304b7a23a0d93aafbd53addd1c51f420467c4f63", "patch": "@@ -2388,17 +2388,84 @@\n \n ;; We can handle larger constants here for some flavors, but for now we play\n ;; it safe and only allow those constants supported by all flavours.\n+;; Note that emit_conditional_move canonicalizes operands 2,3 so that operand\n+;; 3 contains the constant if one is present, but we handle either for\n+;; generality (sparc.c puts a constant in operand 2).\n+\n+(define_expand \"movqicc\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(if_then_else:QI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:QI 2 \"arith10_operand\" \"\")\n+\t\t\t (match_operand:QI 3 \"arith10_operand\" \"\")))]\n+  \"TARGET_V9\"\n+  \"\n+{\n+  enum rtx_code code = GET_CODE (operands[1]);\n+\n+  if (GET_MODE (sparc_compare_op0) == DImode\n+      && ! TARGET_ARCH64)\n+    FAIL;\n+\n+  if (sparc_compare_op1 == const0_rtx\n+      && GET_CODE (sparc_compare_op0) == REG\n+      && GET_MODE (sparc_compare_op0) == DImode\n+      && v9_regcmp_p (code))\n+    {\n+      operands[1] = gen_rtx (code, DImode,\n+\t\t\t     sparc_compare_op0, sparc_compare_op1);\n+    }\n+  else\n+    {\n+      rtx cc_reg = gen_compare_reg (code,\n+\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      operands[1] = gen_rtx (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n+    }\n+}\")\n+\n+(define_expand \"movhicc\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(if_then_else:HI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:HI 2 \"arith10_operand\" \"\")\n+\t\t\t (match_operand:HI 3 \"arith10_operand\" \"\")))]\n+  \"TARGET_V9\"\n+  \"\n+{\n+  enum rtx_code code = GET_CODE (operands[1]);\n+\n+  if (GET_MODE (sparc_compare_op0) == DImode\n+      && ! TARGET_ARCH64)\n+    FAIL;\n+\n+  if (sparc_compare_op1 == const0_rtx\n+      && GET_CODE (sparc_compare_op0) == REG\n+      && GET_MODE (sparc_compare_op0) == DImode\n+      && v9_regcmp_p (code))\n+    {\n+      operands[1] = gen_rtx (code, DImode,\n+\t\t\t     sparc_compare_op0, sparc_compare_op1);\n+    }\n+  else\n+    {\n+      rtx cc_reg = gen_compare_reg (code,\n+\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      operands[1] = gen_rtx (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n+    }\n+}\")\n \n (define_expand \"movsicc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:SI 2 \"arith10_operand\" \"\")\n-\t\t      (match_operand:SI 3 \"register_operand\" \"\")))]\n-  \"TARGET_ARCH64\"\n+\t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SI 2 \"arith10_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"arith10_operand\" \"\")))]\n+  \"TARGET_V9\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n+  if (GET_MODE (sparc_compare_op0) == DImode\n+      && ! TARGET_ARCH64)\n+    FAIL;\n+\n   if (sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode\n@@ -2417,9 +2484,9 @@\n \n (define_expand \"movdicc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:DI 2 \"arith10_operand\" \"\")\n-\t\t      (match_operand:DI 3 \"register_operand\" \"\")))]\n+\t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:DI 2 \"arith10_double_operand\" \"\")\n+\t\t\t (match_operand:DI 3 \"arith10_double_operand\" \"\")))]\n   \"TARGET_ARCH64\"\n   \"\n {\n@@ -2443,14 +2510,18 @@\n \n (define_expand \"movsfcc\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:SF 2 \"register_operand\" \"\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"\")))]\n-  \"TARGET_ARCH64\"\n+\t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"\")\n+\t\t\t (match_operand:SF 3 \"register_operand\" \"\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n+  if (GET_MODE (sparc_compare_op0) == DImode\n+      && ! TARGET_ARCH64)\n+    FAIL;\n+\n   if (sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode\n@@ -2469,14 +2540,18 @@\n \n (define_expand \"movdfcc\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:DF 2 \"register_operand\" \"\")\n-\t\t      (match_operand:DF 3 \"register_operand\" \"\")))]\n-  \"TARGET_ARCH64\"\n+\t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:DF 2 \"register_operand\" \"\")\n+\t\t\t (match_operand:DF 3 \"register_operand\" \"\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n+  if (GET_MODE (sparc_compare_op0) == DImode\n+      && ! TARGET_ARCH64)\n+    FAIL;\n+\n   if (sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode\n@@ -2495,14 +2570,18 @@\n \n (define_expand \"movtfcc\"\n   [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:TF 2 \"register_operand\" \"\")\n-\t\t      (match_operand:TF 3 \"register_operand\" \"\")))]\n-  \"TARGET_ARCH64\"\n+\t(if_then_else:TF (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:TF 2 \"register_operand\" \"\")\n+\t\t\t (match_operand:TF 3 \"register_operand\" \"\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n+  if (GET_MODE (sparc_compare_op0) == DImode\n+      && ! TARGET_ARCH64)\n+    FAIL;\n+\n   if (sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode\n@@ -2519,271 +2598,188 @@\n     }\n }\")\n \n-/* Conditional move define_insns.  */\n+;; Conditional move define_insns.\n \n-(define_insn \"*movsi_cc_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CC 100) (const_int 0)])\n-\t\t      (match_operand:SI 2 \"arith11_operand\" \"ri\")\n-\t\t      (match_operand:SI 3 \"register_operand\" \"0\")))]\n+(define_insn \"*movqi_cc_sp64\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:QI (match_operator 1 \"comparison_operator\"\n+\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n+\t\t\t\t (const_int 0)])\n+\t\t      (match_operand:QI 3 \"arith11_operand\" \"ri,0\")\n+\t\t      (match_operand:QI 4 \"arith11_operand\" \"0,ri\")))]\n   \"TARGET_V9\"\n-  \"mov%C1 %%icc,%2,%0\"\n+  \"@\n+   mov%C1 %x2,%3,%0\n+   mov%c1 %x2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"*movdi_cc_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CC 100) (const_int 0)])\n-\t\t      (match_operand:DI 2 \"arith11_double_operand\" \"rHI\")\n-\t\t      (match_operand:DI 3 \"register_operand\" \"0\")))]\n-  \"TARGET_ARCH64\"\n-  \"mov%C1 %%icc,%2,%0\"\n+(define_insn \"*movhi_cc_sp64\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:HI (match_operator 1 \"comparison_operator\"\n+\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n+\t\t\t\t (const_int 0)])\n+\t\t      (match_operand:HI 3 \"arith11_operand\" \"ri,0\")\n+\t\t      (match_operand:HI 4 \"arith11_operand\" \"0,ri\")))]\n+  \"TARGET_V9\"\n+  \"@\n+   mov%C1 %x2,%3,%0\n+   mov%c1 %x2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"*movsi_ccx_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CCX 100) (const_int 0)])\n-\t\t      (match_operand:SI 2 \"arith11_operand\" \"ri\")\n-\t\t      (match_operand:SI 3 \"register_operand\" \"0\")))]\n-  \"TARGET_ARCH64\"\n-  \"mov%C1 %%xcc,%2,%0\"\n+(define_insn \"*movsi_cc_sp64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:SI (match_operator 1 \"comparison_operator\"\n+\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n+\t\t\t\t (const_int 0)])\n+\t\t      (match_operand:SI 3 \"arith11_operand\" \"ri,0\")\n+\t\t      (match_operand:SI 4 \"arith11_operand\" \"0,ri\")))]\n+  \"TARGET_V9\"\n+  \"@\n+   mov%C1 %x2,%3,%0\n+   mov%c1 %x2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"*movdi_ccx_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CCX 100) (const_int 0)])\n-\t\t      (match_operand:DI 2 \"arith11_double_operand\" \"rHI\")\n-\t\t      (match_operand:DI 3 \"register_operand\" \"0\")))]\n+(define_insn \"*movdi_cc_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:DI (match_operator 1 \"comparison_operator\"\n+\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n+\t\t\t\t (const_int 0)])\n+\t\t      (match_operand:DI 3 \"arith11_double_operand\" \"rHI,0\")\n+\t\t      (match_operand:DI 4 \"arith11_double_operand\" \"0,rHI\")))]\n   \"TARGET_ARCH64\"\n-  \"mov%C1 %%xcc,%2,%0\"\n+  \"@\n+   mov%C1 %x2,%3,%0\n+   mov%c1 %x2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"*movsi_ccfp_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFP 2 \"fcc_reg_operand\" \"c\")\n+(define_insn \"*movsf_cc_sp64\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+\t(if_then_else:SF (match_operator 1 \"comparison_operator\"\n+\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SI 3 \"arith11_operand\" \"ri\")\n-\t\t      (match_operand:SI 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n-  \"mov%C1 %2,%3,%0\"\n+\t\t      (match_operand:SF 3 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:SF 4 \"register_operand\" \"0,f\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n+  \"@\n+   fmovs%C1 %x2,%3,%0\n+   fmovs%c1 %x2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"*movsi_ccfpe_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFPE 2 \"fcc_reg_operand\" \"c\")\n+(define_insn \"*movdf_cc_sp64\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e,e\")\n+\t(if_then_else:DF (match_operator 1 \"comparison_operator\"\n+\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SI 3 \"arith11_operand\" \"ri\")\n-\t\t      (match_operand:SI 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n-  \"mov%C1 %2,%3,%0\"\n+\t\t      (match_operand:DF 3 \"register_operand\" \"e,0\")\n+\t\t      (match_operand:DF 4 \"register_operand\" \"0,e\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n+  \"@\n+   fmovd%C1 %x2,%3,%0\n+   fmovd%c1 %x2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"*movdi_ccfp_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFP 2 \"fcc_reg_operand\" \"c\")\n+(define_insn \"*movtf_cc_sp64\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n+\t(if_then_else:TF (match_operator 1 \"comparison_operator\"\n+\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DI 3 \"arith11_double_operand\" \"rHI\")\n-\t\t      (match_operand:DI 4 \"register_operand\" \"0\")))]\n+\t\t      (match_operand:TF 3 \"register_operand\" \"e,0\")\n+\t\t      (match_operand:TF 4 \"register_operand\" \"0,e\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n+  \"@\n+   fmovq%C1 %x2,%3,%0\n+   fmovq%c1 %x2,%4,%0\"\n+  [(set_attr \"type\" \"cmove\")])\n+\n+(define_insn \"*movqi_cc_reg_sp64\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:QI (match_operator 1 \"v9_regcmp_op\"\n+\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n+\t\t\t\t (const_int 0)])\n+\t\t      (match_operand:QI 3 \"arith10_operand\" \"ri,0\")\n+\t\t      (match_operand:QI 4 \"arith10_operand\" \"0,ri\")))]\n   \"TARGET_ARCH64\"\n-  \"mov%C1 %2,%3,%0\"\n+  \"@\n+   movr%D1 %2,%r3,%0\n+   movr%d1 %2,%r4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"*movdi_ccfpe_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFPE 2 \"fcc_reg_operand\" \"c\")\n+(define_insn \"*movhi_cc_reg_sp64\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:HI (match_operator 1 \"v9_regcmp_op\"\n+\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DI 3 \"arith11_double_operand\" \"rHI\")\n-\t\t      (match_operand:DI 4 \"register_operand\" \"0\")))]\n+\t\t      (match_operand:HI 3 \"arith10_operand\" \"ri,0\")\n+\t\t      (match_operand:HI 4 \"arith10_operand\" \"0,ri\")))]\n   \"TARGET_ARCH64\"\n-  \"mov%C1 %2,%3,%0\"\n+  \"@\n+   movr%D1 %2,%r3,%0\n+   movr%d1 %2,%r4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n (define_insn \"*movsi_cc_reg_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:SI (match_operator 1 \"v9_regcmp_op\"\n+\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SI 3 \"arith10_operand\" \"ri\")\n-\t\t      (match_operand:SI 4 \"register_operand\" \"0\")))]\n+\t\t      (match_operand:SI 3 \"arith10_operand\" \"ri,0\")\n+\t\t      (match_operand:SI 4 \"arith10_operand\" \"0,ri\")))]\n   \"TARGET_ARCH64\"\n-  \"movr%D1 %2,%r3,%0\"\n+  \"@\n+   movr%D1 %2,%r3,%0\n+   movr%d1 %2,%r4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n (define_insn \"*movdi_cc_reg_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:DI (match_operator 1 \"v9_regcmp_op\"\n+\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DI 3 \"arith10_double_operand\" \"ri\")\n-\t\t      (match_operand:DI 4 \"register_operand\" \"0\")))]\n+\t\t      (match_operand:DI 3 \"arith10_double_operand\" \"ri,0\")\n+\t\t      (match_operand:DI 4 \"arith10_double_operand\" \"0,ri\")))]\n   \"TARGET_ARCH64\"\n-  \"movr%D1 %2,%r3,%0\"\n+  \"@\n+   movr%D1 %2,%r3,%0\n+   movr%d1 %2,%r4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n (define_insn \"*movsf_cc_reg_sp64\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+\t(if_then_else:SF (match_operator 1 \"v9_regcmp_op\"\n+\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SF 3 \"register_operand\" \"f\")\n-\t\t      (match_operand:SF 4 \"register_operand\" \"0\")))]\n+\t\t      (match_operand:SF 3 \"register_operand\" \"f,0\")\n+\t\t      (match_operand:SF 4 \"register_operand\" \"0,f\")))]\n   \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"fmovrs%D1 %2,%3,%0\"\n+  \"@\n+   fmovrs%D1 %2,%3,%0\n+   fmovrs%d1 %2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n (define_insn \"*movdf_cc_reg_sp64\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e,e\")\n+\t(if_then_else:DF (match_operator 1 \"v9_regcmp_op\"\n+\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DF 3 \"register_operand\" \"e\")\n-\t\t      (match_operand:DF 4 \"register_operand\" \"0\")))]\n+\t\t      (match_operand:DF 3 \"register_operand\" \"e,0\")\n+\t\t      (match_operand:DF 4 \"register_operand\" \"0,e\")))]\n   \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"fmovrd%D1 %2,%3,%0\"\n+  \"@\n+   fmovrd%D1 %2,%3,%0\n+   fmovrd%d1 %2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n (define_insn \"*movtf_cc_reg_sp64\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t\t (const_int 0)])\n-\t\t      (match_operand:TF 3 \"register_operand\" \"e\")\n-\t\t      (match_operand:TF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"fmovrq%D1 %2,%3,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movsf_ccfp_sp64\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFP 2 \"fcc_reg_operand\" \"c\")\n-\t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SF 3 \"register_operand\" \"f\")\n-\t\t      (match_operand:SF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovs%C1 %2,%3,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movsf_ccfpe_sp64\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFPE 2 \"fcc_reg_operand\" \"c\")\n-\t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SF 3 \"register_operand\" \"f\")\n-\t\t      (match_operand:SF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovs%C1 %2,%3,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movdf_ccfp_sp64\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFP 2 \"fcc_reg_operand\" \"c\")\n-\t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DF 3 \"register_operand\" \"e\")\n-\t\t      (match_operand:DF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovd%C1 %2,%3,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movdf_ccfpe_sp64\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFPE 2 \"fcc_reg_operand\" \"c\")\n-\t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DF 3 \"register_operand\" \"e\")\n-\t\t      (match_operand:DF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovd%C1 %2,%3,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movtf_ccfp_sp64\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFP 2 \"fcc_reg_operand\" \"c\")\n-\t\t\t\t (const_int 0)])\n-\t\t      (match_operand:TF 3 \"register_operand\" \"e\")\n-\t\t      (match_operand:TF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovq%C1 %2,%3,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movtf_ccfpe_sp64\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand:CCFPE 2 \"fcc_reg_operand\" \"c\")\n+  [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n+\t(if_then_else:TF (match_operator 1 \"v9_regcmp_op\"\n+\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:TF 3 \"register_operand\" \"e\")\n-\t\t      (match_operand:TF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovq%C1 %2,%3,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movsf_cc_sp64\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CC 100) (const_int 0)])\n-\t\t      (match_operand:SF 2 \"register_operand\" \"f\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovs%C1 %%icc,%2,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movdf_cc_sp64\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CC 100) (const_int 0)])\n-\t\t      (match_operand:DF 2 \"register_operand\" \"e\")\n-\t\t      (match_operand:DF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovd%C1 %%icc,%2,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movtf_cc_sp64\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CC 100) (const_int 0)])\n-\t\t      (match_operand:TF 2 \"register_operand\" \"e\")\n-\t\t      (match_operand:TF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fmovq%C1 %%icc,%2,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movsf_ccx_sp64\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CCX 100) (const_int 0)])\n-\t\t      (match_operand:SF 2 \"register_operand\" \"f\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"fmovs%C1 %%xcc,%2,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movdf_ccx_sp64\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CCX 100) (const_int 0)])\n-\t\t      (match_operand:DF 2 \"register_operand\" \"e\")\n-\t\t      (match_operand:DF 3 \"register_operand\" \"0\")))]\n+\t\t      (match_operand:TF 3 \"register_operand\" \"e,0\")\n+\t\t      (match_operand:TF 4 \"register_operand\" \"0,e\")))]\n   \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"fmovd%C1 %%xcc,%2,%0\"\n-  [(set_attr \"type\" \"cmove\")])\n-\n-(define_insn \"*movtf_ccx_sp64\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-\t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(reg:CCX 100) (const_int 0)])\n-\t\t      (match_operand:TF 2 \"register_operand\" \"e\")\n-\t\t      (match_operand:TF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"fmovq%C1 %%xcc,%2,%0\"\n+  \"@\n+   fmovrq%D1 %2,%3,%0\n+   fmovrq%d1 %2,%4,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \f\n ;;- zero extension instructions"}]}