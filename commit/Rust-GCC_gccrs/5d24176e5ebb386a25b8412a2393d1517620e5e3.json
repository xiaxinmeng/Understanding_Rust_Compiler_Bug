{"sha": "5d24176e5ebb386a25b8412a2393d1517620e5e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyNDE3NmU1ZWJiMzg2YTI1Yjg0MTJhMjM5M2QxNTE3NjIwZTVlMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-02-08T19:40:23Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-02-08T19:40:23Z"}, "message": "re PR fortran/52151 (Segfault with realloc on assignment and RESHAPE to unallocated LHS)\n\n2012-02-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52151\n        * trans-expr.c (fcncall_realloc_result): Set also the stride.\n\n2012-02-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52151\n        * gfortran.dg/realloc_on_assign_12.f90: New.\n\nFrom-SVN: r184016", "tree": {"sha": "13a49e30b2832ccf41ebdc6ffe45b6e054a3f52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a49e30b2832ccf41ebdc6ffe45b6e054a3f52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d24176e5ebb386a25b8412a2393d1517620e5e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d24176e5ebb386a25b8412a2393d1517620e5e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d24176e5ebb386a25b8412a2393d1517620e5e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d24176e5ebb386a25b8412a2393d1517620e5e3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d465faf92900b572286d6e9701632c2b289b451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d465faf92900b572286d6e9701632c2b289b451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d465faf92900b572286d6e9701632c2b289b451"}], "stats": {"total": 119, "additions": 112, "deletions": 7}, "files": [{"sha": "10d4abc2866a2e12a0fe6471440271f3b9cc86e9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d24176e5ebb386a25b8412a2393d1517620e5e3", "patch": "@@ -1,3 +1,8 @@\n+2012-02-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52151\n+\t* trans-expr.c (fcncall_realloc_result): Set also the stride.\n+\n 2012-02-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51514"}, {"sha": "ec218384b760fd264c17d46cbc6428ba82e483ea", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=5d24176e5ebb386a25b8412a2393d1517620e5e3", "patch": "@@ -6370,16 +6370,15 @@ fcncall_realloc_result (gfc_se *se, int rank)\n       gfc_conv_descriptor_ubound_set (&se->post, desc,\n \t\t\t\t      gfc_rank_cst[n], tmp);\n \n-      /* Accumulate the offset.  */\n-      tmp = gfc_conv_descriptor_stride_get (desc, gfc_rank_cst[n]);\n+      /* Set stride and accumulate the offset.  */\n+      tmp = gfc_conv_descriptor_stride_get (res_desc, gfc_rank_cst[n]);\n+      gfc_conv_descriptor_stride_set (&se->post, desc,\n+\t\t\t\t      gfc_rank_cst[n], tmp);\n       tmp = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\tgfc_array_index_type,\n-\t\t\t\tlbound, tmp);\n+\t\t\t     gfc_array_index_type, lbound, tmp);\n       offset = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\tgfc_array_index_type,\n-\t\t\t\toffset, tmp);\n+\t\t\t\tgfc_array_index_type, offset, tmp);\n       offset = gfc_evaluate_now (offset, &se->post);\n-\n     }\n \n   gfc_conv_descriptor_offset_set (&se->post, desc, offset);"}, {"sha": "192f483ef4b04280cc73b53566f951d5bb75b58d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d24176e5ebb386a25b8412a2393d1517620e5e3", "patch": "@@ -1,3 +1,8 @@\n+2012-02-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52151\n+\t* gfortran.dg/realloc_on_assign_12.f90: New.\n+\n 2012-02-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/52170"}, {"sha": "3e0ceb1e3d16a78a9efe8e55c4669718f8162e76", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_12.f90", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d24176e5ebb386a25b8412a2393d1517620e5e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_12.f90?ref=5d24176e5ebb386a25b8412a2393d1517620e5e3", "patch": "@@ -0,0 +1,96 @@\n+! { dg-do run }\n+!\n+! PR fortran/52151\n+!\n+! Check that the bounds/shape/strides are correctly set\n+! for (re)alloc on assignment, if the LHS is either not\n+! allocated or has the wrong shape. This test is for\n+! code which is only invoked for libgfortran intrinsic\n+! such as RESHAPE.\n+!\n+! Based on the example of PR 52117 by Steven Hirshman\n+!\n+    PROGRAM RESHAPEIT\n+      call unalloc ()\n+      call wrong_shape ()\n+    contains\n+    subroutine unalloc ()\n+      INTEGER, PARAMETER :: n1=2, n2=2, n3=2\n+      INTEGER            :: m1, m2, m3, lc\n+      REAL, ALLOCATABLE  :: A(:,:), B(:,:,:)\n+      REAL               :: val\n+\n+      ALLOCATE (A(n1,n2*n3))\n+! << B is not allocated\n+\n+      val = 0\n+      lc = 0\n+      DO m3=1,n3\n+         DO m2=1,n2\n+            lc = lc+1\n+            DO m1=1,n1\n+               val = val+1\n+               A(m1, lc) = val\n+            END DO\n+         END DO\n+      END DO\n+\n+      B = RESHAPE(A, [n1,n2,n3])\n+\n+      if (any (shape (B)  /= [n1,n2,n3])) call abort ()\n+      if (any (ubound (B) /= [n1,n2,n3])) call abort ()\n+      if (any (lbound (B) /= [1,1,1])) call abort ()\n+\n+      lc = 0\n+      DO m3=1,n3\n+         DO m2=1,n2\n+            lc = lc+1\n+            DO m1=1,n1\n+!               PRINT *,'A(',m1,',',lc,') = ',A(m1,lc),' B = ',B(m1,m2,m3)\n+               if (A(m1,lc) /= B(m1,m2,m3)) call abort ()\n+            END DO\n+         END DO\n+      END DO\n+      DEALLOCATE(A, B)\n+    end subroutine unalloc\n+\n+    subroutine wrong_shape ()\n+      INTEGER, PARAMETER :: n1=2, n2=2, n3=2\n+      INTEGER            :: m1, m2, m3, lc\n+      REAL, ALLOCATABLE  :: A(:,:), B(:,:,:)\n+      REAL               :: val\n+\n+      ALLOCATE (A(n1,n2*n3))\n+      ALLOCATE (B(1,1,1))     ! << shape differs from RHS\n+\n+      val = 0\n+      lc = 0\n+      DO m3=1,n3\n+         DO m2=1,n2\n+            lc = lc+1\n+            DO m1=1,n1\n+               val = val+1\n+               A(m1, lc) = val\n+            END DO\n+         END DO\n+      END DO\n+\n+      B = RESHAPE(A, [n1,n2,n3])\n+\n+      if (any (shape (B)  /= [n1,n2,n3])) call abort ()\n+      if (any (ubound (B) /= [n1,n2,n3])) call abort ()\n+      if (any (lbound (B) /= [1,1,1])) call abort ()\n+\n+      lc = 0\n+      DO m3=1,n3\n+         DO m2=1,n2\n+            lc = lc+1\n+            DO m1=1,n1\n+!               PRINT *,'A(',m1,',',lc,') = ',A(m1,lc),' B = ',B(m1,m2,m3)\n+               if (A(m1,lc) /= B(m1,m2,m3)) call abort ()\n+            END DO\n+         END DO\n+      END DO\n+      DEALLOCATE(A, B)\n+    end subroutine wrong_shape\n+    END PROGRAM RESHAPEIT"}]}