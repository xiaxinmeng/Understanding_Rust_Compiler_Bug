{"sha": "6b2034c479e5882a8566393e4fb632a23cfd6ff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyMDM0YzQ3OWU1ODgyYTg1NjYzOTNlNGZiNjMyYTIzY2ZkNmZmMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T14:57:29Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T16:45:05Z"}, "message": "aarch64: Reimplement vabdl_* intrinsics using builtins\n\nAnother simple set of intrinsic moved to builtins in the straightforward\nway.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (sabdl, uabdl):\n\tDefine builtins.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abdl<mode>): New\n\tpattern.\n\t* config/aarch64/aarch64.md (unspec): Define UNSPEC_SABDL,\n\tUNSPEC_UABDL.\n\t* config/aarch64/arm_neon.h (vabdl_s8): Reimplemet using\n\tbuiltin.\n\t(vabdl_s16): Likewise.\n\t(vabdl_s32): Likewise.\n\t(vabdl_u8): Likewise.\n\t(vabdl_u16): Likewise.\n\t(vabdl_u32): Likewise.\n\t* config/aarch64/iterators.md (ABDL): New int iterator.\n\t(sur): Handle UNSPEC_SABDL, UNSPEC_UABDL.", "tree": {"sha": "8dd573be316f65761a3a052bba6c64a944187376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd573be316f65761a3a052bba6c64a944187376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b2034c479e5882a8566393e4fb632a23cfd6ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2034c479e5882a8566393e4fb632a23cfd6ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2034c479e5882a8566393e4fb632a23cfd6ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2034c479e5882a8566393e4fb632a23cfd6ff0/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2053773b894b7f347752396d64e28e326d733e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2053773b894b7f347752396d64e28e326d733e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2053773b894b7f347752396d64e28e326d733e"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "441a45648655db1f1b4460f9bf3998554b83e6c4", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=6b2034c479e5882a8566393e4fb632a23cfd6ff0", "patch": "@@ -172,6 +172,10 @@\n   BUILTIN_VQW (TERNOP, sabal2, 0, NONE)\n   BUILTIN_VQW (TERNOPU, uabal2, 0, NONE)\n \n+  /* Implemented by aarch64_<sur>abdl<mode>.  */\n+  BUILTIN_VD_BHSI (BINOP, sabdl, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOPU, uabdl, 0, NONE)\n+\n   /* Implemented by aarch64_<sur>abdl2<mode>.  */\n   BUILTIN_VQW (BINOP, sabdl2, 0, NONE)\n   BUILTIN_VQW (BINOPU, uabdl2, 0, NONE)"}, {"sha": "1d790f21424aec695f5a9476180d0b5d27e72413", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=6b2034c479e5882a8566393e4fb632a23cfd6ff0", "patch": "@@ -818,6 +818,17 @@\n   [(set_attr \"type\" \"neon_abd<q>\")]\n )\n \n+\n+(define_insn \"aarch64_<sur>abdl<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VWIDE> [(match_operand:VD_BHSI 1 \"register_operand\" \"w\")\n+\t\t\t (match_operand:VD_BHSI 2 \"register_operand\" \"w\")]\n+\tABDL))]\n+  \"TARGET_SIMD\"\n+  \"<sur>abdl\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_abd<q>\")]\n+)\n+\n (define_insn \"aarch64_<sur>abdl2<mode>\"\n   [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n \t(unspec:<VDBLW> [(match_operand:VQW 1 \"register_operand\" \"w\")"}, {"sha": "2c4066dd8f1003ee48a80956e856304efd60039e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=6b2034c479e5882a8566393e4fb632a23cfd6ff0", "patch": "@@ -198,6 +198,7 @@\n     UNSPEC_RBIT\n     UNSPEC_SABAL\n     UNSPEC_SABAL2\n+    UNSPEC_SABDL\n     UNSPEC_SABDL2\n     UNSPEC_SADALP\n     UNSPEC_SCVTF\n@@ -220,6 +221,7 @@\n     UNSPEC_TLSLE48\n     UNSPEC_UABAL\n     UNSPEC_UABAL2\n+    UNSPEC_UABDL\n     UNSPEC_UABDL2\n     UNSPEC_UADALP\n     UNSPEC_UCVTF"}, {"sha": "0911ddbb387df8372621fe5f5ead91a29daefb14", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=6b2034c479e5882a8566393e4fb632a23cfd6ff0", "patch": "@@ -6873,72 +6873,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sabdl %0.8h, %1.8b, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabdlv8qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sabdl %0.4s, %1.4h, %2.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabdlv4hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"sabdl %0.2d, %1.2s, %2.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabdlv2si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uabdl %0.8h, %1.8b, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabdlv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uabdl %0.4s, %1.4h, %2.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabdlv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"uabdl %0.2d, %1.2s, %2.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabdlv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t"}, {"sha": "51c7c15428793a4f965d9d36e3ee6fdc262b0ba3", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2034c479e5882a8566393e4fb632a23cfd6ff0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=6b2034c479e5882a8566393e4fb632a23cfd6ff0", "patch": "@@ -2189,6 +2189,9 @@\n ;; The unspec codes for the SABAL, UABAL AdvancedSIMD instructions.\n (define_int_iterator ABAL [UNSPEC_SABAL UNSPEC_UABAL])\n \n+;; The unspec codes for the SABDL, UABDL AdvancedSIMD instructions.\n+(define_int_iterator ABDL [UNSPEC_SABDL UNSPEC_UABDL])\n+\n ;; The unspec codes for the SABAL2, UABAL2 AdvancedSIMD instructions.\n (define_int_iterator ABAL2 [UNSPEC_SABAL2 UNSPEC_UABAL2])\n \n@@ -2979,6 +2982,7 @@\n \t\t      (UNSPEC_ADDHN \"\") (UNSPEC_RADDHN \"r\")\n \t\t      (UNSPEC_SABAL \"s\") (UNSPEC_UABAL \"u\")\n \t\t      (UNSPEC_SABAL2 \"s\") (UNSPEC_UABAL2 \"u\")\n+\t\t      (UNSPEC_SABDL \"s\") (UNSPEC_UABDL \"u\")\n \t\t      (UNSPEC_SABDL2 \"s\") (UNSPEC_UABDL2 \"u\")\n \t\t      (UNSPEC_SADALP \"s\") (UNSPEC_UADALP \"u\")\n \t\t      (UNSPEC_SUBHN \"\") (UNSPEC_RSUBHN \"r\")"}]}