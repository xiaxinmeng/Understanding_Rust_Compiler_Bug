{"sha": "881ed7fb273c8898310a1475aa2162bbd1030ee0", "node_id": "C_kwDOANBUbNoAKDg4MWVkN2ZiMjczYzg4OTgzMTBhMTQ3NWFhMjE2MmJiZDEwMzBlZTA", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-01-11T17:05:39Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:17Z"}, "message": "gccrs: Change how CompileVarDecl outputs Bvariable's\n\nThis allows patterns to declare multiple/no variables\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-base.cc (HIRCompileBase::compile_locals_for_block):\n\tAllow patterns to declare zero or multiple variables.\n\t* backend/rust-compile-var-decl.h: Change function declaration.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "9ea1af09c441331e1d994d39ca159a4c5a7ff2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ea1af09c441331e1d994d39ca159a4c5a7ff2e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/881ed7fb273c8898310a1475aa2162bbd1030ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881ed7fb273c8898310a1475aa2162bbd1030ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881ed7fb273c8898310a1475aa2162bbd1030ee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881ed7fb273c8898310a1475aa2162bbd1030ee0/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f8e47f9df3cb0adf9b6cd6e48d7c89e2556721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f8e47f9df3cb0adf9b6cd6e48d7c89e2556721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f8e47f9df3cb0adf9b6cd6e48d7c89e2556721"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "c108661d9838b8cce3cc8059904674a3b1dd2a56", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881ed7fb273c8898310a1475aa2162bbd1030ee0/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881ed7fb273c8898310a1475aa2162bbd1030ee0/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=881ed7fb273c8898310a1475aa2162bbd1030ee0", "patch": "@@ -457,9 +457,7 @@ HIRCompileBase::compile_locals_for_block (Context *ctx, Resolver::Rib &rib,\n \n       // compile the local\n       tree type = TyTyResolveCompile::compile (ctx, tyty);\n-      Bvariable *compiled\n-\t= CompileVarDecl::compile (fndecl, type, pattern, ctx);\n-      locals.push_back (compiled);\n+      CompileVarDecl::compile (fndecl, type, pattern, locals, ctx);\n     }\n   return locals;\n }"}, {"sha": "791ee9c111234d34cf15a73d800bbf45ead5eb84", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881ed7fb273c8898310a1475aa2162bbd1030ee0/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881ed7fb273c8898310a1475aa2162bbd1030ee0/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=881ed7fb273c8898310a1475aa2162bbd1030ee0", "patch": "@@ -30,39 +30,42 @@ class CompileVarDecl : public HIRCompileBase, public HIR::HIRPatternVisitor\n   using HIR::HIRPatternVisitor::visit;\n \n public:\n-  static ::Bvariable *compile (tree fndecl, tree translated_type,\n-\t\t\t       HIR::Pattern *pattern, Context *ctx)\n+  static void compile (tree fndecl, tree translated_type, HIR::Pattern *pattern,\n+\t\t       std::vector<Bvariable *> &locals, Context *ctx)\n   {\n-    CompileVarDecl compiler (ctx, fndecl, translated_type);\n+    CompileVarDecl compiler (ctx, fndecl, translated_type, locals);\n     pattern->accept_vis (compiler);\n-    return compiler.compiled_variable;\n   }\n \n   void visit (HIR::IdentifierPattern &pattern) override\n   {\n     if (!pattern.is_mut ())\n       translated_type = ctx->get_backend ()->immutable_type (translated_type);\n \n-    compiled_variable\n+    Bvariable *var\n       = ctx->get_backend ()->local_variable (fndecl, pattern.get_identifier (),\n \t\t\t\t\t     translated_type, NULL /*decl_var*/,\n \t\t\t\t\t     pattern.get_locus ());\n \n     HirId stmt_id = pattern.get_pattern_mappings ().get_hirid ();\n-    ctx->insert_var_decl (stmt_id, compiled_variable);\n+    ctx->insert_var_decl (stmt_id, var);\n+\n+    locals.push_back (var);\n   }\n \n   void visit (HIR::WildcardPattern &pattern) override\n   {\n     translated_type = ctx->get_backend ()->immutable_type (translated_type);\n \n-    compiled_variable\n+    Bvariable *var\n       = ctx->get_backend ()->local_variable (fndecl, \"_\", translated_type,\n \t\t\t\t\t     NULL /*decl_var*/,\n \t\t\t\t\t     pattern.get_locus ());\n \n     HirId stmt_id = pattern.get_pattern_mappings ().get_hirid ();\n-    ctx->insert_var_decl (stmt_id, compiled_variable);\n+    ctx->insert_var_decl (stmt_id, var);\n+\n+    locals.push_back (var);\n   }\n \n   // Empty visit for unused Pattern HIR nodes.\n@@ -78,15 +81,16 @@ class CompileVarDecl : public HIRCompileBase, public HIR::HIRPatternVisitor\n   void visit (HIR::TupleStructPattern &) override {}\n \n private:\n-  CompileVarDecl (Context *ctx, tree fndecl, tree translated_type)\n+  CompileVarDecl (Context *ctx, tree fndecl, tree translated_type,\n+\t\t  std::vector<Bvariable *> &locals)\n     : HIRCompileBase (ctx), fndecl (fndecl), translated_type (translated_type),\n-      compiled_variable (ctx->get_backend ()->error_variable ())\n+      locals (locals)\n   {}\n \n   tree fndecl;\n   tree translated_type;\n \n-  Bvariable *compiled_variable;\n+  std::vector<Bvariable *> &locals;\n };\n \n } // namespace Compile"}]}