{"sha": "b83604c75fee324cc4767d039178cba2fbbe017e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzNjA0Yzc1ZmVlMzI0Y2M0NzY3ZDAzOTE3OGNiYTJmYmJlMDE3ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-20T00:58:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-20T00:58:23Z"}, "message": "dwarf2out: reset generation count in toplev::finalize [PR98751]\n\nPR debug/98751 reports an issue in which most of libgccjit's tests\nfails in DWARF 5 handling with\n  `.Ldebug_loc2' is already defined\"\nasm errors.\n\nThe bogus label is being emitted at the 3rd in-process iteration, at:\n  31673\t      ASM_OUTPUT_LABEL (asm_out_file, loc_section_label);\nwhich on the initial iteration emits:\n\n 145   \u2502 .Ldebug_loc0:\n\non the 2nd iteration:\n 145   \u2502 .Ldebug_loc1:\n\nand on the 3rd iteration:\n 145   \u2502 .Ldebug_loc2:\n\nwhich is a duplicate of a label emitted earlier:\n 138   \u2502     .section    .debug_loclists,\"\",@progbits\n 139   \u2502     .long   .Ldebug_loc3-.Ldebug_loc2\n 140   \u2502 .Ldebug_loc2:\n 141   \u2502     .value  0x5\n 142   \u2502     .byte   0x8\n 143   \u2502     .byte   0\n 144   \u2502     .long   0\n 145   \u2502 .Ldebug_loc2:\n\nThe issue seems to be that init_sections_and_labels creates the label\n  ASM_GENERATE_INTERNAL_LABEL (loc_section_label, DEBUG_LOC_SECTION_LABEL,\n\t\t\t       generation);\n\nwhere \"generation\" is a static local to init_sections_and_labels that\nincrements, and thus eventually hits the duplicate value.\n\nIt appears that this value is intended to be either 0 or 1, but in\nthe libgccjit case the compilation code can be invoked an arbitrary\nnumber of times in-process, and hence can eventually lead to a\nlabel name collision.\n\nThis patch adds code to dwarf2out_c_finalize (called by\ntoplev::finalize in libgccjit) to reset the generation counts,\nfixing the issue.\n\ngcc/ChangeLog:\n\tPR debug/98751\n\t* dwarf2out.c (output_line_info): Rename static variable\n\t\"generation\", moving it out of the function to...\n\t(output_line_info_generation): New.\n\t(init_sections_and_labels): Likewise, renaming the variable to...\n\t(init_sections_and_labels_generation): New.\n\t(dwarf2out_c_finalize): Reset the new variables.", "tree": {"sha": "9bf03adefa3594b155e8a909f8e931a9d6b931bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf03adefa3594b155e8a909f8e931a9d6b931bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b83604c75fee324cc4767d039178cba2fbbe017e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83604c75fee324cc4767d039178cba2fbbe017e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83604c75fee324cc4767d039178cba2fbbe017e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83604c75fee324cc4767d039178cba2fbbe017e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35a4f96373f352c30ba5edce2a3b47993d15491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35a4f96373f352c30ba5edce2a3b47993d15491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35a4f96373f352c30ba5edce2a3b47993d15491"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "93e5d15e20ad7f5e1fe260825f387ca507b40474", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83604c75fee324cc4767d039178cba2fbbe017e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83604c75fee324cc4767d039178cba2fbbe017e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b83604c75fee324cc4767d039178cba2fbbe017e", "patch": "@@ -12709,22 +12709,27 @@ output_one_line_info_table (dw_line_info_table *table)\n   dw2_asm_output_data (1, DW_LNE_end_sequence, NULL);\n }\n \n+static unsigned int output_line_info_generation;\n+\n /* Output the source line number correspondence information.  This\n    information goes into the .debug_line section.  */\n \n static void\n output_line_info (bool prologue_only)\n {\n-  static unsigned int generation;\n   char l1[MAX_ARTIFICIAL_LABEL_BYTES], l2[MAX_ARTIFICIAL_LABEL_BYTES];\n   char p1[MAX_ARTIFICIAL_LABEL_BYTES], p2[MAX_ARTIFICIAL_LABEL_BYTES];\n   bool saw_one = false;\n   int opc;\n \n-  ASM_GENERATE_INTERNAL_LABEL (l1, LINE_NUMBER_BEGIN_LABEL, generation);\n-  ASM_GENERATE_INTERNAL_LABEL (l2, LINE_NUMBER_END_LABEL, generation);\n-  ASM_GENERATE_INTERNAL_LABEL (p1, LN_PROLOG_AS_LABEL, generation);\n-  ASM_GENERATE_INTERNAL_LABEL (p2, LN_PROLOG_END_LABEL, generation++);\n+  ASM_GENERATE_INTERNAL_LABEL (l1, LINE_NUMBER_BEGIN_LABEL,\n+\t\t\t       output_line_info_generation);\n+  ASM_GENERATE_INTERNAL_LABEL (l2, LINE_NUMBER_END_LABEL,\n+\t\t\t       output_line_info_generation);\n+  ASM_GENERATE_INTERNAL_LABEL (p1, LN_PROLOG_AS_LABEL,\n+\t\t\t       output_line_info_generation);\n+  ASM_GENERATE_INTERNAL_LABEL (p2, LN_PROLOG_END_LABEL,\n+\t\t\t       output_line_info_generation++);\n \n   if (!XCOFF_DEBUGGING_INFO)\n     {\n@@ -28589,17 +28594,17 @@ output_macinfo (const char *debug_line_label, bool early_lto_debug)\n   macinfo_label_base += macinfo_label_base_adj;\n }\n \n+/* As init_sections_and_labels may get called multiple times, have a\n+   generation count for labels.  */\n+static unsigned init_sections_and_labels_generation;\n+\n /* Initialize the various sections and labels for dwarf output and prefix\n    them with PREFIX if non-NULL.  Returns the generation (zero based\n    number of times function was called).  */\n \n static unsigned\n init_sections_and_labels (bool early_lto_debug)\n {\n-  /* As we may get called multiple times have a generation count for\n-     labels.  */\n-  static unsigned generation = 0;\n-\n   if (early_lto_debug)\n     {\n       if (!dwarf_split_debug_info)\n@@ -28634,7 +28639,7 @@ init_sections_and_labels (bool early_lto_debug)\n \t\t\t   SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n \t  ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_abbrev_section_label,\n \t\t\t\t       DEBUG_SKELETON_ABBREV_SECTION_LABEL,\n-\t\t\t\t       generation);\n+\t\t\t\t       init_sections_and_labels_generation);\n \n \t  /* Somewhat confusing detail: The skeleton_[abbrev|info] sections\n \t     stay in the main .o, but the skeleton_line goes into the split\n@@ -28644,14 +28649,14 @@ init_sections_and_labels (bool early_lto_debug)\n \t\t\t   SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n \t  ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_line_section_label,\n \t\t\t\t       DEBUG_SKELETON_LINE_SECTION_LABEL,\n-\t\t\t\t       generation);\n+\t\t\t\t       init_sections_and_labels_generation);\n \t  debug_str_offsets_section\n \t    = get_section (DEBUG_LTO_DWO_STR_OFFSETS_SECTION,\n \t\t\t   SECTION_DEBUG | SECTION_EXCLUDE,\n \t\t\t   NULL);\n \t  ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_info_section_label,\n \t\t\t\t       DEBUG_SKELETON_INFO_SECTION_LABEL,\n-\t\t\t\t       generation);\n+\t\t\t\t       init_sections_and_labels_generation);\n \t  debug_str_dwo_section = get_section (DEBUG_LTO_STR_DWO_SECTION,\n \t\t\t\t\t       DEBUG_STR_DWO_SECTION_FLAGS,\n \t\t\t\t\t       NULL);\n@@ -28667,7 +28672,8 @@ init_sections_and_labels (bool early_lto_debug)\n       debug_line_section = get_section (DEBUG_LTO_LINE_SECTION,\n \t\t\t\t\tSECTION_DEBUG | SECTION_EXCLUDE, NULL);\n       ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,\n-\t\t\t\t   DEBUG_LINE_SECTION_LABEL, generation);\n+\t\t\t\t   DEBUG_LINE_SECTION_LABEL,\n+\t\t\t\t   init_sections_and_labels_generation);\n \n       debug_str_section = get_section (DEBUG_LTO_STR_SECTION,\n \t\t\t\t       DEBUG_STR_SECTION_FLAGS\n@@ -28711,7 +28717,7 @@ init_sections_and_labels (bool early_lto_debug)\n \t\t\t\t\t\t       SECTION_DEBUG, NULL);\n \t  ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_abbrev_section_label,\n \t\t\t\t       DEBUG_SKELETON_ABBREV_SECTION_LABEL,\n-\t\t\t\t       generation);\n+\t\t\t\t       init_sections_and_labels_generation);\n \n \t  /* Somewhat confusing detail: The skeleton_[abbrev|info] sections\n \t     stay in the main .o, but the skeleton_line goes into the\n@@ -28721,13 +28727,13 @@ init_sections_and_labels (bool early_lto_debug)\n \t\t\t     SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n \t  ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_line_section_label,\n \t\t\t\t       DEBUG_SKELETON_LINE_SECTION_LABEL,\n-\t\t\t\t       generation);\n+\t\t\t\t       init_sections_and_labels_generation);\n \t  debug_str_offsets_section\n \t    = get_section (DEBUG_DWO_STR_OFFSETS_SECTION,\n \t\t\t   SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n \t  ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_info_section_label,\n \t\t\t\t       DEBUG_SKELETON_INFO_SECTION_LABEL,\n-\t\t\t\t       generation);\n+\t\t\t\t       init_sections_and_labels_generation);\n \t  debug_loc_section = get_section (dwarf_version >= 5\n \t\t\t\t\t   ? DEBUG_DWO_LOCLISTS_SECTION\n \t\t\t\t\t   : DEBUG_DWO_LOC_SECTION,\n@@ -28767,31 +28773,37 @@ init_sections_and_labels (bool early_lto_debug)\n     }\n \n   ASM_GENERATE_INTERNAL_LABEL (abbrev_section_label,\n-\t\t\t       DEBUG_ABBREV_SECTION_LABEL, generation);\n+\t\t\t       DEBUG_ABBREV_SECTION_LABEL,\n+\t\t\t       init_sections_and_labels_generation);\n   ASM_GENERATE_INTERNAL_LABEL (debug_info_section_label,\n-\t\t\t       DEBUG_INFO_SECTION_LABEL, generation);\n+\t\t\t       DEBUG_INFO_SECTION_LABEL,\n+\t\t\t       init_sections_and_labels_generation);\n   info_section_emitted = false;\n   ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,\n-\t\t\t       DEBUG_LINE_SECTION_LABEL, generation);\n+\t\t\t       DEBUG_LINE_SECTION_LABEL,\n+\t\t\t       init_sections_and_labels_generation);\n   /* There are up to 4 unique ranges labels per generation.\n      See also output_rnglists.  */\n   ASM_GENERATE_INTERNAL_LABEL (ranges_section_label,\n-\t\t\t       DEBUG_RANGES_SECTION_LABEL, generation * 4);\n+\t\t\t       DEBUG_RANGES_SECTION_LABEL,\n+\t\t\t       init_sections_and_labels_generation * 4);\n   if (dwarf_version >= 5 && dwarf_split_debug_info)\n     ASM_GENERATE_INTERNAL_LABEL (ranges_base_label,\n \t\t\t\t DEBUG_RANGES_SECTION_LABEL,\n-\t\t\t\t 1 + generation * 4);\n+\t\t\t\t 1 + init_sections_and_labels_generation * 4);\n   ASM_GENERATE_INTERNAL_LABEL (debug_addr_section_label,\n-\t\t\t       DEBUG_ADDR_SECTION_LABEL, generation);\n+\t\t\t       DEBUG_ADDR_SECTION_LABEL,\n+\t\t\t       init_sections_and_labels_generation);\n   ASM_GENERATE_INTERNAL_LABEL (macinfo_section_label,\n \t\t\t       (dwarf_strict && dwarf_version < 5)\n \t\t\t       ? DEBUG_MACINFO_SECTION_LABEL\n-\t\t\t       : DEBUG_MACRO_SECTION_LABEL, generation);\n+\t\t\t       : DEBUG_MACRO_SECTION_LABEL,\n+\t\t\t       init_sections_and_labels_generation);\n   ASM_GENERATE_INTERNAL_LABEL (loc_section_label, DEBUG_LOC_SECTION_LABEL,\n-\t\t\t       generation);\n+\t\t\t       init_sections_and_labels_generation);\n \n-  ++generation;\n-  return generation - 1;\n+  ++init_sections_and_labels_generation;\n+  return init_sections_and_labels_generation - 1;\n }\n \n /* Set up for Dwarf output at the start of compilation.  */\n@@ -32379,6 +32391,8 @@ dwarf2out_c_finalize (void)\n   base_types.release ();\n   XDELETEVEC (producer_string);\n   producer_string = NULL;\n+  output_line_info_generation = 0;\n+  init_sections_and_labels_generation = 0;\n }\n \n #include \"gt-dwarf2out.h\""}]}