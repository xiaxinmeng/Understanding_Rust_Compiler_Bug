{"sha": "2f080224cfa9de0e215324c6ac242d6ee3f27172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwODAyMjRjZmE5ZGUwZTIxNTMyNGM2YWMyNDJkNmVlM2YyNzE3Mg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-22T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-22T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "8dc0507347faac9b163ab8f0c4e2fbd45f3dad3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc0507347faac9b163ab8f0c4e2fbd45f3dad3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f080224cfa9de0e215324c6ac242d6ee3f27172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f080224cfa9de0e215324c6ac242d6ee3f27172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f080224cfa9de0e215324c6ac242d6ee3f27172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f080224cfa9de0e215324c6ac242d6ee3f27172/comments", "author": null, "committer": null, "parents": [{"sha": "6cf0040fff78a665db31a6a8dee60b12eef2e590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf0040fff78a665db31a6a8dee60b12eef2e590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf0040fff78a665db31a6a8dee60b12eef2e590"}], "stats": {"total": 543, "additions": 542, "deletions": 1}, "files": [{"sha": "61fc3e8fe342828afc011b64f999d8089af642c5", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,8 @@\n+2021-06-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* MAINTAINERS: Add myself as maintainer of the i386 vector\n+\textensions.\n+\n 2021-06-18  Antoni Boucher  <bouanto@zoho.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "9b3102282fe2ec57b853aee2d61bf14890c9528b", "filename": "contrib/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,14 @@\n+2021-06-21  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Martin Sebor  <msebor@redhat.com>\n+\n+\t* mklog.py (bugzilla_url): Fetch also component.\n+\t(pr_filename_regex): New.\n+\t(get_pr_titles): Update PR string with correct format and component.\n+\t(generate_changelog): Take additional PRs; extract PR from the\n+\tfilename.\n+\t(__main__): Add -b/--pr-numbers argument.\n+\t* test_mklog.py (EXPECTED4): Update to expect a PR for the new file.\n+\n 2021-06-17  Jason Merrill  <jason@redhat.com>\n \n \t* mklog.py: Add an initial component: [PRnnnnn] line when"}, {"sha": "5e73922b097e9d169086ddfd5c138a05e57868b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,91 @@\n+2021-06-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR target/88529\n+\t* df-scan.c (df_ref_record): Check that regno < endregno.\n+\t* function.c (assign_parms, expand_function_end): Do nothing with a\n+\tTYPE_EMPTY_P result.\n+\n+2021-06-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101120\n+\t* tree-vect-data-refs.c (bump_vector_ptr): Fold the\n+\tbuilt increment.\n+\t* tree-vect-slp.c (vect_transform_slp_perm_load): Add\n+\tDR chain DCE capability.\n+\t* tree-vectorizer.h (vect_transform_slp_perm_load): Adjust.\n+\t* tree-vect-stmts.c (vectorizable_load): Remove unused\n+\tloads in the DR chain for SLP.\n+\n+2021-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/100785\n+\t* gimplify.c (gimplify_asm_expr): Don't diagnose errors if\n+\toutput or input operands were already error_mark_node.\n+\t* cfgexpand.c (expand_asm_stmt): If errors are emitted,\n+\tremove all inputs, outputs and clobbers from the asm and\n+\tset template to \"\".\n+\n+2021-06-21  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/arm/arm_neon.h (vceq_s8): Replace builtin with __a == __b.\n+\t(vceq_s16): Likewise.\n+\t(vceq_s32): Likewise.\n+\t(vceq_u8): Likewise.\n+\t(vceq_u16): Likewise.\n+\t(vceq_u32): Likewise.\n+\t(vceq_p8): Likewise.\n+\t(vceqq_s8): Likewise.\n+\t(vceqq_s16): Likewise.\n+\t(vceqq_s32): Likewise.\n+\t(vceqq_u8): Likewise.\n+\t(vceqq_u16): Likewise.\n+\t(vceqq_u32): Likewise.\n+\t(vceqq_p8): Likewise.\n+\t(vceq_f32): Gate __a == __b on __FAST_MATH__.\n+\t(vceqq_f32): Likewise.\n+\t(vceq_f16): Likewise.\n+\t(vceqq_f16): Likewise.\n+\n+2021-06-21  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/97906\n+\t* config/arm/iterators.md (NEON_VACMP): Remove.\n+\t* config/arm/neon.md (neon_vca<cmp_op><mode>): Use GLTE instead of GTGE\n+\titerator.\n+\t(neon_vca<cmp_op><mode>_insn): Likewise.\n+\t(neon_vca<cmp_op_unsp><mode>_insn_unspec): Use NEON_VAGLTE instead of\n+\tNEON_VACMP.\n+\n+2021-06-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101121\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): To not fail fatally\n+\twhen we just lack a stmt with the desired op when doing permutation.\n+\t(vect_build_slp_tree): When caching a failed SLP build attempt\n+\tassert that at least one lane is marked as not matching.\n+\n+2021-06-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101142\n+\t* config/i386/i386.md: (*anddi_1): Disparage slightly the mask\n+\tregister alternative.\n+\t(*and<mode>_1): Ditto.\n+\t(*andqi_1): Ditto.\n+\t(*andn<mode>_1): Ditto.\n+\t(*<code><mode>_1): Ditto.\n+\t(*<code>qi_1): Ditto.\n+\t(*one_cmpl<mode>2_1): Ditto.\n+\t(*one_cmplsi2_1_zext): Ditto.\n+\t(*one_cmplqi2_1): Ditto.\n+\t* config/i386/i386.c (x86_order_regs_for_local_alloc): Change\n+\tthe order of mask registers to be before general registers.\n+\n+2021-06-21  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/11877\n+\t* config/i386/i386.md: New define_peephole2s to shrink writing\n+\t1, 2 or 4 consecutive zeros to memory when optimizing for size.\n+\n 2021-06-18  Jeff Law  <jeffreyalaw@gmail.com>\n \n \t* config/h8300/h8300.c (h8300_select_cc_mode): Handle SYMBOL_REF."}, {"sha": "bb14796c85b4b337f7d204e58e19c25d8e2102a5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1 +1 @@\n-20210621\n+20210622"}, {"sha": "11001cd7bc17377a3f328fe6a930e863f231b24b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,356 @@\n+2021-06-21  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.adb (Selected_Range_Checks): In the case of a\n+\tqualified_expression where the qualifying subtype is an\n+\tunconstrained array subtype with fixed lower bounds for some of\n+\tits indexes, generate tests to check that those bounds are equal\n+\tto the corresponding lower bounds of the qualified array object.\n+\n+2021-06-21  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-valuen.ads (Value_Enumeration,\n+\tValid_Enumeration_Value): Inline.\n+\t(Value_Enumeration_Pos): Add Pure_Function.\n+\n+2021-06-21  Justin Squirek  <squirek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document new\n+\tfeature under pragma Extensions_Allowed.\n+\t* gnat_rm.texi: Regenerate.\n+\t* errout.adb, errout.ads (Error_Msg_GNAT_Extension): Created to\n+\tissue errors when parsing extension only constructs.\n+\t* exp_ch11.adb, exp_ch11.ads (Expand_N_Raise_When_Statement):\n+\tCreated to expand raise ... when constucts.\n+\t* exp_ch5.adb, exp_ch5.ads (Expand_N_Goto_When_Statement):\n+\tCreated to expand goto ... when constructs.\n+\t* exp_ch6.adb, exp_ch6.ads (Expand_N_Return_When_Statement):\n+\tCreated to expand return ... when constructs.\n+\t* expander.adb (Expand): Add case entries for \"when\" constructs.\n+\t* gen_il-gen-gen_nodes.adb, gen_il-types.ads: Add entries for\n+\t\"when\" constructs.\n+\t* par-ch11.adb (P_Raise_Statement): Add processing for raise ...\n+\twhen.\n+\t* par-ch5.adb (Missing_Semicolon_On_Exit): Renamed to\n+\tMissing_Semicolon_On_When and moved to par-util.adb.\n+\t* par-ch6.adb (Get_Return_Kind): Renamed from Is_Simple and\n+\tprocessing added for \"return ... when\" return kind.\n+\t(Is_Simple): Renamed to Get_Return_Kind.\n+\t(P_Return_Statement): Add case for return ... when variant of\n+\treturn statement.\n+\t* par-util.adb, par.adb (Missing_Semicolon_On_When): Added to\n+\tcenteralize parsing of \"when\" keywords in the context of \"when\"\n+\tconstructs.\n+\t* sem.adb (Analyze): Add case for \"when\" constructs.\n+\t* sem_ch11.adb, sem_ch11.ads (Analyze_Raise_When_Statement):\n+\tCreated to analyze raise ... when constructs.\n+\t* sem_ch5.adb, sem_ch5.ads (Analyzed_Goto_When_Statement):\n+\tCreated to analyze goto ... when constructs.\n+\t* sem_ch6.adb, sem_ch6.ads (Analyze_Return_When_Statement):\n+\tCreated to analyze return ... when constructs.\n+\t* sprint.adb (Sprint_Node_Actual): Add entries for new \"when\"\n+\tnodes.\n+\n+2021-06-21  Steve Baird  <baird@adacore.com>\n+\n+\t* Make-generated.in (GEN_IL_FLAGS): Keep only GNAT flags.\n+\t(ada/stamp-gen_il): Remove dependencies on libgnat/ sources.  Do not\n+\tcopy libgnat/ sources locally and tidy up.\n+\t* Makefile.rtl: Include object files for new Text_Buffer units\n+\tin the GNATRTL_NONTASKING_OBJS list.\n+\t* exp_put_image.ads, exp_put_image.adb: Update Rtsfind calls to\n+\tmatch new specs. For example, calls to RE_Sink are replaced with\n+\tcalls to RE_Root_Buffer_Type. Update comments and change\n+\tsubprogram names accordingly (e.g., Preload_Sink is changed to\n+\tPreload_Root_Buffer_Type).\n+\t* impunit.adb: Add 6 new predefined units (Text_Buffers and 5\n+\tchild units thereof).\n+\t* rtsfind.ads, rtsfind.adb: Add interfaces for accessing the\n+\tAda.Strings.Text_Buffers package and declarations\n+\ttherein (including the Unbounded child unit). Do not (yet)\n+\tdelete interfaces for accessing the old Text_Output package.\n+\t* sem_attr.adb (Check_Put_Image_Attribute): Replace RE_Sink uses\n+\twith RE_Root_Buffer_Type and update comments accordingly.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Update call to\n+\treflect name change of callee (that is, the former Preload_Sink\n+\tis now Preload_Root_Buffer_Type).\n+\t* sem_ch13.adb (Has_Good_Profile): Replace RE_Sink use with\n+\tRE_Root_Buffer_Type.\n+\t(Build_Spec): Update comment describing a parameter type.\n+\t* gen_il.ads: Remove clauses for the old Text_Output package and\n+\tadd them for Ada.Streams.Stream_IO.\n+\t(Sink): Declare.\n+\t(Create_File): Likewise.\n+\t(Increase_Indent): Likewise.\n+\t(Decrease_Indent): Likewise.\n+\t(Put): Likewise.\n+\t(LF): Likewise.\n+\t* gen_il.adb: Add clauses for Ada.Streams.Stream_IO.\n+\t(Create_File): New procedure.\n+\t(Increase_Indent): Likewise.\n+\t(Decrease_Indent): Likewise.\n+\t(Put): New procedures.\n+\t* gen_il-gen.adb: Add clauses for Ada.Text_IO.  Replace\n+\tSink'Class with Sink throughout.  Use string concatenation and\n+\tLF marker instead of formatted strings and \"\\n\" marker.  Update\n+\tIndent/Outdent calls to use new Increase_Indent/Decrease_Indent\n+\tnames.\n+\t(Put_Membership_Query_Decl): Remove.\n+\t* gen_il-internals.ads: Replace Sink'Class with Sink throughout.\n+\t(Ptypes): Remove.\n+\t(Pfields): Likewise.\n+\t* gen_il-internals.adb: Remove clauses for GNAT.OS_Lib and\n+\tAda.Strings.Text_Buffers.Files.  Replace Sink'Class with Sink\n+\tthroughout.  Use string concatenation and LF marker instead of\n+\tformatted strings and \"\\n\" marker.\n+\t(Stdout): Remove.\n+\t(Ptypes): Likewise.\n+\t(Pfields): Likewise.\n+\t* libgnarl/s-putaim.ads: Modify context clause, update\n+\tdeclaration of subtype Sink to refer to\n+\tText_Buffers.Root_Buffer_Type instead of the old\n+\tText_Output.Sink type.\n+\t* libgnarl/s-putaim.adb: Modify context clause and add use\n+\tclause to refer to Text_Buffers package.\n+\t* libgnat/a-cbdlli.ads, libgnat/a-cbdlli.adb,\n+\tlibgnat/a-cbhama.ads, libgnat/a-cbhama.adb,\n+\tlibgnat/a-cbhase.ads, libgnat/a-cbhase.adb,\n+\tlibgnat/a-cbmutr.ads, libgnat/a-cbmutr.adb,\n+\tlibgnat/a-cborma.ads, libgnat/a-cborma.adb,\n+\tlibgnat/a-cborse.ads, libgnat/a-cborse.adb,\n+\tlibgnat/a-cdlili.ads, libgnat/a-cdlili.adb,\n+\tlibgnat/a-cidlli.ads, libgnat/a-cidlli.adb,\n+\tlibgnat/a-cihama.ads, libgnat/a-cihama.adb,\n+\tlibgnat/a-cihase.ads, libgnat/a-cihase.adb,\n+\tlibgnat/a-cimutr.ads, libgnat/a-cimutr.adb,\n+\tlibgnat/a-ciorma.ads, libgnat/a-ciorma.adb,\n+\tlibgnat/a-ciormu.ads, libgnat/a-ciormu.adb,\n+\tlibgnat/a-ciorse.ads, libgnat/a-ciorse.adb,\n+\tlibgnat/a-coboho.ads, libgnat/a-coboho.adb,\n+\tlibgnat/a-cobove.ads, libgnat/a-cobove.adb,\n+\tlibgnat/a-cohama.ads, libgnat/a-cohama.adb,\n+\tlibgnat/a-cohase.ads, libgnat/a-cohase.adb,\n+\tlibgnat/a-coinho.ads, libgnat/a-coinho.adb,\n+\tlibgnat/a-coinho__shared.ads, libgnat/a-coinho__shared.adb,\n+\tlibgnat/a-coinve.ads, libgnat/a-coinve.adb,\n+\tlibgnat/a-comutr.ads, libgnat/a-comutr.adb,\n+\tlibgnat/a-convec.ads, libgnat/a-convec.adb,\n+\tlibgnat/a-coorma.ads, libgnat/a-coorma.adb,\n+\tlibgnat/a-coormu.ads, libgnat/a-coormu.adb,\n+\tlibgnat/a-coorse.ads, libgnat/a-coorse.adb,\n+\tlibgnat/a-nbnbin.ads, libgnat/a-nbnbin.adb,\n+\tlibgnat/a-nbnbin__gmp.adb, libgnat/a-nbnbre.ads,\n+\tlibgnat/a-nbnbre.adb, libgnat/a-strunb.ads,\n+\tlibgnat/a-strunb.adb, libgnat/a-strunb__shared.ads,\n+\tlibgnat/a-strunb__shared.adb, libgnat/s-rannum.ads,\n+\tlibgnat/s-rannum.adb: Modify Put_Image procedure used in\n+\tPut_Image aspect specification to conform to Ada profile\n+\trules (in particular, the first parameter shall be of type\n+\tAda.Strings.Text_Buffers.Root_Buffer_Type'Class).\n+\t* libgnat/a-sttebu.ads, libgnat/a-sttebu.adb,\n+\tlibgnat/a-stbubo.ads, libgnat/a-stbubo.adb,\n+\tlibgnat/a-stbufi.ads, libgnat/a-stbufi.adb,\n+\tlibgnat/a-stbufo.ads, libgnat/a-stbufo.adb,\n+\tlibgnat/a-stbuun.ads, libgnat/a-stbuun.adb,\n+\tlibgnat/a-stbuut.ads, libgnat/a-stbuut.adb: A new predefined\n+\tunit, Ada.Strings.Text_Buffers, and five child units.  Two of\n+\tthe five are RM-defined: Bounded and Unbounded. The remaining\n+\tthree are GNAT-defined: Files, Utils, and Formatting. The buffer\n+\ttype corresponding to an output file, type Files.File_Buffer, is\n+\tsimpler (and perhaps therefore slower) than its predecessor.\n+\tCaching similar to what was being done before could be added\n+\tlater if that seems appropriate.\n+\t* libgnat/s-putima.ads: Modify context clause, update\n+\tdeclaration of subtype Sink to refer to\n+\tText_Buffers.Root_Buffer_Type instead of the old\n+\tText_Output.Sink type.\n+\t* libgnat/s-putima.adb: Modify context clause.  Update\n+\tIndent/Outdent calls to use new Increase_Indent/Decrease_Indent\n+\tnames; ditto for \"Put_String => Put\" name change.\n+\t* libgnat/a-stteou__bootstrap.ads: Delete.\n+\n+2021-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array_Bitfield_Fast): If big-endian\n+\tordering is in effect for the operands and they are small,\n+\tadjust the unchecked conversions done around them.\n+\n+2021-06-21  Richard Kenner  <kenner@adacore.com>\n+\n+\t* einfo.ads (Return_Statement): Add documentation.\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Set it.\n+\t* gen_il-fields.ads: Add it.\n+\t* gen_il-gen-gen_entities.adb: Add it.\n+\n+2021-06-21  Bob Duff  <duff@adacore.com>\n+\n+\t* rtsfind.ads, libgnat/s-bitfie.ads, libgnat/s-bituti.adb,\n+\tlibgnat/s-bituti.ads (Fast_Copy_Bitfield): New run-time library\n+\tfunction to copy bit fields faster than Copy_Bitfield. Cannot be\n+\tcalled with zero-size bit fields.  Remove obsolete ??? comments\n+\tfrom s-bituti.adb; we already do \"avoid calling this if\n+\tForwards_OK is False\".\n+\t* exp_ch5.adb (Expand_Assign_Array_Loop_Or_Bitfield,\n+\tExpand_Assign_Array_Bitfield_Fast): Generate calls to\n+\tFast_Copy_Bitfield when appropriate.\n+\t* sem_util.adb, sem_util.ads (Get_Index_Bounds): Two new\n+\tfunctions for getting the index bounds. These are more\n+\tconvenient than the procedure of the same name, because they can\n+\tbe used to initialize constants.\n+\n+2021-06-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gen_il-fields.ads: Add Default_Subtype_Mark to enumeration\n+\ttype for fields.\n+\t* gen_il-gen-gen_nodes.adb: Add call to create new field for\n+\tFormal_Type_Declaration node.\n+\t* par-ch12.adb (P_Formal_Type_Declaration): in Ada_2022 mode,\n+\trecognize new syntax for default: \"or use subtype_mark\".\n+\t(P_Formal_Type_Definition): Ditto for the case of a formal\n+\tincomplete type.\n+\t* sinfo.ads: Add field Default_Subtype_Mark to\n+\tN_Formal_Type_Declaration.\n+\t* sem_ch12.adb (Validate_Formal_Type_Default): New procedure, to\n+\tapply legality rules to default subtypes in formal type\n+\tdeclarations. Some legality rules apply to all defaults, such as\n+\tthe requirement that the default for a formal type that depends\n+\ton previous formal entities must itself be a previously declared\n+\tformal of the same unit. Other checks are kind- specific.\n+\t(Analyze_Associations): Use specified default if there is no\n+\tactual provided for a formal type in an instance.\n+\t(Analyze_Formal_Type_Declaration): Call\n+\tValidate_Formal_Type_Default when default subtype is present.\n+\n+2021-06-21  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-valuen.ads, libgnat/s-valuen.adb\n+\t(Value_Enumeration_Pos): New function to compute the 'Pos of the\n+\tenumeration literal for a given String.  Return a special value\n+\tinstead of raising an exception on invalid input. Called by both\n+\tValid_Enumeration_Image and Value_Enumeration.\n+\t(Valid_Enumeration_Image): Return a Boolean indicating whether\n+\tthe String is a valid Image for the given enumeration type.\n+\t(Value_Enumeration): Implement in terms of\n+\tValue_Enumeration_Pos.\n+\t* libgnat/s-vaenu8.ads, libgnat/s-vaen16.ads,\n+\tlibgnat/s-vaen32.ads: Rename Valid_Enumeration_Image from the\n+\tinstances.\n+\t* libgnat/s-valuti.ads: Correct documentation (it was not true\n+\tfor the null string).\n+\t* libgnat/s-valuti.adb (Normalize_String): Do not raise\n+\tConstraint_Error for the null string, nor strings containing\n+\tnothing but blanks, so that Valid_Enumeration_Image can return\n+\tFalse in these cases, rather than raising an exception.\n+\t* rtsfind.ads (RE_Value_Enumeration_8, RE_Value_Enumeration_16,\n+\tRE_Value_Enumeration_32): New functions.\n+\t(RTE_Available): Improve comment (E doesn't have to be a\n+\tsubprogram, although that's the usual case).\n+\t* sem_attr.adb (nalid_Value): Semantic analysis for new\n+\tattribute.\n+\t* exp_attr.adb: Call Expand_Valid_Value_Attribute for new\n+\tattribute.\n+\t* exp_imgv.ads, exp_imgv.adb (Expand_Valid_Value_Attribute): New\n+\tprocedure to expand Valid_Value into a call to\n+\tValid_Enumeration_Image_NN.\n+\t(Expand_Value_Attribute): Misc code cleanups.  Remove two ???\n+\tmark comments. RTE_Available won't work here.  For one thing,\n+\tRTE_Available (X) shouldn't be called until the compiler has\n+\tdecided to make use of X (see comments on RTE_Available), and in\n+\tthis case we're trying to AVOID calling something.\n+\t* snames.ads-tmpl: New attribute name.\n+\t* doc/gnat_rm/implementation_defined_attributes.rst: Document\n+\tnew attribute.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Assume_No_Invalid_Values): Declare.\n+\t* opt.ads (Assume_No_Invalid_Values): Add warning comment.\n+\n+2021-06-21  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-bituti.ads (Small_Size): Do not include 0 in this\n+\ttype.\n+\t* libgnat/s-bituti.adb (Copy_Bitfield): Do nothing for 0-bit\n+\tbitfields.\n+\n+2021-06-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Simple_Entry_Call): Add comment.\n+\t* libgnat/s-rannum.adb (Random): Update comment.\n+\t* libgnat/s-rannum.ads (Generator): Update comment.\n+\n+2021-06-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/representation_clauses_and_pragmas.rst (Address\n+\tClauses): Fix unbalanced parens.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-06-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* errout.adb (Handle_Serious_Error): Capitalize comment.\n+\t* exp_dbug.adb (Set_Entity_Name): Capitalize sentence.\n+\t* exp_dist.adb (Expand_All_Calls_Remote_Subprogram_Call): Fix\n+\ttypo.\n+\t* sem_ch3.adb (Modular_Type_Declaration): Add space after comma.\n+\n+2021-06-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* debug.adb: Document -gnatd_U as taken.\n+\t* err_vars.ads (Warning_Doc_Switch): Set to True.\n+\t* errout.ads (Errout): Update documentation.\n+\t* gnat1drv.adb (Adjust_Global_Switches): React to -gnatd_U.\n+\t* hostparm.ads (Tag_Errors): Set to True.\n+\t* opt.ads (Unique_Error_Tag): Document -gnatd_U.\n+\n+2021-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* urealp.ads (UR_Write_To_JSON): Declare.\n+\t* urealp.adb (Decimal_Exponent_Hi): Treat numbers in base 10\n+\tspecially and rewrite handling of numbers in other bases.\n+\t(Decimal_Exponent_Lo): Likewise.\n+\t(Normalize): Minor tweak.\n+\t(UR_Write_To_JSON): New wrapper procedure around UR_Write.\n+\t* repinfo.adb (List_Type_Info): When the output is to JSON, call\n+\tUR_Write_To_JSON instead of UR_Write.\n+\n+2021-06-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Indexed_Component_Bit_Offset): Return an unknown\n+\toffset for components within multidimensional arrays; remove\n+\tredundant parens.\n+\n+2021-06-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Find_Overlaid_Entity): Ignore references to\n+\tcomponents and discriminants.\n+\n+2021-06-21  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (aarch64-linux) [LIBGNAT_TARGET_PAIRS]: Add\n+\t$(TRASYM_DWARF_UNIX_PAIRS).\n+\t[EXTRA_GNAT_RTL_NONTASKING_OBJS]: Add $(TRASYM_DWARF_UNIX_OBJS)\n+\n+2021-06-21  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Expand_Sliding_Conversion): Only perform\n+\texpansion when Expander_Active is True. Add a comment about this\n+\tand refine existing comment regarding string literals.\n+\n+2021-06-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Denotes_Same_Object): Simplify handling of\n+\tslices.\n+\n+2021-06-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Object_Renaming): Rename from Is_Renaming;\n+\tsimplify; adapt callers.\n+\n+2021-06-21  Frederic Konrad  <konrad@adacore.com>\n+\n+\t* Makefile.rtl: Compiles both static and dynamic libgnat for\n+\tpowerpc64-wrs-vxworks7r2.\n+\n 2021-06-18  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_ch3.adb (Constrain_Array): Add error checking for"}, {"sha": "5751a3789e49c08d461050788df78136547782b2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,9 @@\n+2021-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/100785\n+\t* c-typeck.c (c_mark_addressable): Diagnose trying to make\n+\tbit-fields addressable.\n+\n 2021-06-15  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* c-decl.c (merge_decls): Copy DECL_USER_ALIGN if DECL_ALIGN is"}, {"sha": "cfe9aa4d0aebfa3ea755502e2a874121cb896ea2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,21 @@\n+2021-06-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/67302\n+\t* typeck.c (check_return_expr): Call maybe_undo_parenthesized_ref\n+\tsooner, before the NRVO handling.\n+\n+2021-06-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/80431\n+\t* tree.c (bot_replace): Use convert_to_base to build the\n+\tconversion to the (morally) virtual base.\n+\n+2021-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/100785\n+\t* typeck.c (cxx_mark_addressable): Diagnose trying to make\n+\tbit-fields addressable.\n+\n 2021-06-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/101106"}, {"sha": "3b11dcfe5cd3febb8602b56978f1ce7589f67c2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,48 @@\n+2021-06-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR target/88529\n+\t* g++.target/i386/empty-class1.C: New test.\n+\n+2021-06-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/67302\n+\t* g++.dg/opt/nrv21.C: New test.\n+\n+2021-06-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/80431\n+\t* g++.dg/cpp0x/nsdmi-virtual1a.C: New test.\n+\n+2021-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/100785\n+\t* c-c++-common/pr100785.c: New test.\n+\t* gcc.dg/pr48552-1.c: Don't expect invalid lvalue errors.\n+\t* gcc.dg/pr48552-2.c: Likewise.\n+\n+2021-06-21  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/97906\n+\t* gcc.target/arm/simd/pr97906.c: New test.\n+\n+2021-06-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101121\n+\t* gfortran.dg/pr101121.f: New testcase.\n+\n+2021-06-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101142\n+\t* gcc.target/i386/spill_to_mask-1.c: Adjust testcase.\n+\t* gcc.target/i386/spill_to_mask-2.c: Adjust testcase.\n+\t* gcc.target/i386/spill_to_mask-3.c: Adjust testcase.\n+\t* gcc.target/i386/spill_to_mask-4.c: Adjust testcase.\n+\n+2021-06-21  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/11877\n+\t* gcc.target/i386/pr11877.c: New test case.\n+\n 2021-06-18  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/fusion-p10-2logical.c: Update pattern"}, {"sha": "f652c4db7a2e44ea6fe73a3a07f0dcfd9291f3a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f080224cfa9de0e215324c6ac242d6ee3f27172/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f080224cfa9de0e215324c6ac242d6ee3f27172/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2f080224cfa9de0e215324c6ac242d6ee3f27172", "patch": "@@ -1,3 +1,18 @@\n+2021-06-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/mutex (__try_to_lock): Move to __detail namespace.\n+\t(struct __try_lock_impl): Replace with ...\n+\t(__detail::__try_lock_impl<Idx>(tuple<Lockables...>&)): New\n+\tfunction templates to implement std::try_lock.\n+\t(try_lock): Use new __try_lock_impl.\n+\t(__detail::__lock_impl(int, int&, L0&, L1&...)): New function\n+\ttemplate to implement std::lock.\n+\t(lock): Use __lock_impl.\n+\n+2021-06-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_cmp.h (__cpp_lib_ranges): Adjust value.\n+\n 2021-06-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (__non_propagating_cache::operator bool):"}]}