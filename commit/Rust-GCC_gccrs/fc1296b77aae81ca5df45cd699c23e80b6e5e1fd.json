{"sha": "fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMxMjk2Yjc3YWFlODFjYTVkZjQ1Y2Q2OTljMjNlODBiNmU1ZTFmZA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2001-08-01T21:40:43Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2001-08-01T21:40:43Z"}, "message": "regclass.c (call_really_used_regs): New array for registers which are actually used by a call.\n\n\n2001-08-01  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* regclass.c (call_really_used_regs): New array for registers which\n\tare actually used by a call.\n\t(init_reg_sets_1): Initialize regs_invalidated_by_call with the\n\tnew array.\n\t(fix_register): Set call_really_used too.\n\t* config/ia64/ia64.h (CALL_REALLY_USED_REGISTERS): Initialize.\n\t* doc/tm.texi (CALL_REALLY_USED_REGISTERS): Document.\n\nFrom-SVN: r44558", "tree": {"sha": "12aceb7d22a94c9c2c37a7ffda9fa08b77c49f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12aceb7d22a94c9c2c37a7ffda9fa08b77c49f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/comments", "author": null, "committer": null, "parents": [{"sha": "b38b083acf3d71c9a05858a5e5d9bde14ee7e9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38b083acf3d71c9a05858a5e5d9bde14ee7e9ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38b083acf3d71c9a05858a5e5d9bde14ee7e9ef"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "6639e9414566fdd85d03f34dee7e4dfd889384a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "patch": "@@ -1,3 +1,13 @@\n+2001-08-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* regclass.c (call_really_used_regs): New array for registers which\n+\tare actually used by a call.\n+\t(init_reg_sets_1): Initialize regs_invalidated_by_call with the\n+\tnew array.\n+\t(fix_register): Set call_really_used too.\n+\t* config/ia64/ia64.h (CALL_REALLY_USED_REGISTERS): Initialize.\n+\t* doc/tm.texi (CALL_REALLY_USED_REGISTERS): Document.\n+\n 2001-08-01  Richard Henderson  <rth@redhat.com>\n \n \t* read-rtl.c (read_name): Consider \\r whitespace."}, {"sha": "0df4ceb8b18489b55c9681aa245ee34b3be1ae99", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "patch": "@@ -633,6 +633,45 @@ while (0)\n      1, 1,  1,   1,  1, 0, 1\t\t\t\t\\\n }\n \n+/* Like `CALL_USED_REGISTERS' but used to overcome a historical \n+   problem which makes CALL_USED_REGISTERS *always* include\n+   all the FIXED_REGISTERS. Until this problem has been \n+   resolved this macro can be used to overcome this situation.\n+   In particular, block_propagate() requires this list \n+   be acurate, or we can remove registers which should be live.  \n+   This macro is used in regs_invalidated_by_call ()*/\n+\n+#define CALL_REALLY_USED_REGISTERS \\\n+{ /* General registers.  */\t\t\t\t\\\n+  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  /* Floating-point registers.  */\t\t\t\\\n+  1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  /* Predicate registers.  */\t\t\t\t\\\n+  1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  /* Branch registers.  */\t\t\t\t\\\n+  1, 0, 0, 0, 0, 0, 1, 1,\t\t\t\t\\\n+  /*FP RA CCV UNAT PFS LC EC */\t\t\t\t\\\n+     0, 0,  1,   1,  1, 0, 0\t\t\t\t\\\n+}\n+\n+\n /* Define this macro if the target machine has register windows.  This C\n    expression returns the register number as seen by the called function\n    corresponding to the register number OUT as seen by the calling function."}, {"sha": "34bea569d928a7dddc8a9cb1d89b1e4c1566dcf3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "patch": "@@ -1700,6 +1700,17 @@ If a register has 0 in @code{CALL_USED_REGISTERS}, the compiler\n automatically saves it on function entry and restores it on function\n exit, if the register is used within the function.\n \n+@findex CALL_REALLY_USED_REGISTERS\n+@item CALL_REALLY_USED_REGISTERS\n+@cindex call-used register\n+@cindex call-clobbered register\n+@cindex call-saved register\n+Like @code{CALL_USED_REGISTERS} except this macro doesn't require \n+that the entire set of @code{FIXED_REGISTERS} be included.  \n+(@code{CALL_USED_REGISTERS} must be a superset of @code{FIXED_REGISTERS}).\n+This macro is optional.  If not specified, it defaults to the value \n+of @code{CALL_USED_REGISTERS}.\n+\n @findex HARD_REGNO_CALL_PART_CLOBBERED\n @item HARD_REGNO_CALL_PART_CLOBBERED (@var{regno}, @var{mode})\n @cindex call-used register"}, {"sha": "9d1fe55b4b5d8e2a975a114042103793be81e4c0", "filename": "gcc/regclass.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1296b77aae81ca5df45cd699c23e80b6e5e1fd/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=fc1296b77aae81ca5df45cd699c23e80b6e5e1fd", "patch": "@@ -94,6 +94,18 @@ HARD_REG_SET losing_caller_save_reg_set;\n /* Data for initializing the above.  */\n \n static char initial_call_used_regs[] = CALL_USED_REGISTERS;\n+\n+/* This is much like call_used_regs, except it doesn't have to\n+   be a superset of FIXED_REGISTERS. This vector indicates\n+   what is really call clobbered, and is used when defining \n+   regs_invalidated_by_call.  */\n+\n+char call_really_used_regs[] = \n+#ifdef CALL_REALLY_USED_REGISTERS\n+\t\t\t\tCALL_REALLY_USED_REGISTERS;\n+#else\n+\t\t\t\tCALL_USED_REGISTERS;\n+#endif\n   \n /* Indexed by hard register number, contains 1 for registers that are\n    fixed use or call used registers that cannot hold quantities across\n@@ -464,7 +476,7 @@ init_reg_sets_1 ()\n       else if (i == PIC_OFFSET_TABLE_REGNUM && flag_pic)\n \t;\n #endif\n-      else if (call_used_regs[i] || global_regs[i])\n+      else if (call_really_used_regs[i] || global_regs[i])\n \tSET_HARD_REG_BIT (regs_invalidated_by_call, i);\n     }\n \n@@ -747,6 +759,8 @@ fix_register (name, fixed, call_used)\n \t{\n \t  fixed_regs[i] = fixed;\n \t  call_used_regs[i] = call_used;\n+\t  if (fixed == 0)\n+\t    call_really_used_regs[i] = call_used;\n \t}\n     }\n   else"}]}