{"sha": "8f16b6ca77d55ee47e256070b1efe34f03d08f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxNmI2Y2E3N2Q1NWVlNDdlMjU2MDcwYjFlZmUzNGYwM2QwOGY5YQ==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "m.ostapenko@samsung.com", "date": "2016-11-08T22:09:33Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2016-11-08T22:09:33Z"}, "message": "asan_globals.cc (RegisterGlobal): Do not call CheckODRViolationViaPoisoning.\n\nlibsanitizer/\n\n\t* asan/asan_globals.cc (RegisterGlobal): Do not call\n\tCheckODRViolationViaPoisoning.\n\t(CheckODRViolationViaPoisoning): Remove.\n\nFrom-SVN: r241981", "tree": {"sha": "fc259c154a7e47cb3ef4104068c84d998d0265da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc259c154a7e47cb3ef4104068c84d998d0265da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f16b6ca77d55ee47e256070b1efe34f03d08f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f16b6ca77d55ee47e256070b1efe34f03d08f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f16b6ca77d55ee47e256070b1efe34f03d08f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f16b6ca77d55ee47e256070b1efe34f03d08f9a/comments", "author": null, "committer": null, "parents": [{"sha": "789306de0fa860eebe32a2677d87d1203bbb81f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789306de0fa860eebe32a2677d87d1203bbb81f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789306de0fa860eebe32a2677d87d1203bbb81f4"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "dad373eb96712ad316a151db96f66826372b4a4a", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f16b6ca77d55ee47e256070b1efe34f03d08f9a/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f16b6ca77d55ee47e256070b1efe34f03d08f9a/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=8f16b6ca77d55ee47e256070b1efe34f03d08f9a", "patch": "@@ -1,3 +1,9 @@\n+2016-11-09  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\t* asan/asan_globals.cc (RegisterGlobal): Do not call\n+\tCheckODRViolationViaPoisoning.\n+\t(CheckODRViolationViaPoisoning): Remove.\n+\n 2016-11-09  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \t* sanitizer_common/sanitizer_stacktrace.cc (GetCanonicFrame): Assume we"}, {"sha": "f2292926e6af039657d21eabcc17e83b507e80c8", "filename": "libsanitizer/asan/asan_globals.cc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f16b6ca77d55ee47e256070b1efe34f03d08f9a/libsanitizer%2Fasan%2Fasan_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f16b6ca77d55ee47e256070b1efe34f03d08f9a/libsanitizer%2Fasan%2Fasan_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_globals.cc?ref=8f16b6ca77d55ee47e256070b1efe34f03d08f9a", "patch": "@@ -147,23 +147,6 @@ static void CheckODRViolationViaIndicator(const Global *g) {\n   }\n }\n \n-// Check ODR violation for given global G by checking if it's already poisoned.\n-// We use this method in case compiler doesn't use private aliases for global\n-// variables.\n-static void CheckODRViolationViaPoisoning(const Global *g) {\n-  if (__asan_region_is_poisoned(g->beg, g->size_with_redzone)) {\n-    // This check may not be enough: if the first global is much larger\n-    // the entire redzone of the second global may be within the first global.\n-    for (ListOfGlobals *l = list_of_all_globals; l; l = l->next) {\n-      if (g->beg == l->g->beg &&\n-          (flags()->detect_odr_violation >= 2 || g->size != l->g->size) &&\n-          !IsODRViolationSuppressed(g->name))\n-        ReportODRViolation(g, FindRegistrationSite(g),\n-                           l->g, FindRegistrationSite(l->g));\n-    }\n-  }\n-}\n-\n // Clang provides two different ways for global variables protection:\n // it can poison the global itself or its private alias. In former\n // case we may poison same symbol multiple times, that can help us to\n@@ -211,8 +194,6 @@ static void RegisterGlobal(const Global *g) {\n     // where two globals with the same name are defined in different modules.\n     if (UseODRIndicator(g))\n       CheckODRViolationViaIndicator(g);\n-    else\n-      CheckODRViolationViaPoisoning(g);\n   }\n   if (CanPoisonMemory())\n     PoisonRedZones(*g);"}]}