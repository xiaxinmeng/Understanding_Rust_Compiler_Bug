{"sha": "130869aa4280e1cfc0088c889dd96a93319b9941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwODY5YWE0MjgwZTFjZmMwMDg4Yzg4OWRkOTZhOTMzMTliOTk0MQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-08-24T15:46:36Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-08-24T15:46:36Z"}, "message": "rs6000.md: Fix thinko in the peephole2 I added yesterday.\n\n2005-08-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config/rs6000/rs6000.md: Fix thinko in the peephole2 I added\n\tyesterday.\n\nFrom-SVN: r103443", "tree": {"sha": "b54b9d335c1b38f79ec5c01f7504162b98198154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b54b9d335c1b38f79ec5c01f7504162b98198154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/130869aa4280e1cfc0088c889dd96a93319b9941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130869aa4280e1cfc0088c889dd96a93319b9941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130869aa4280e1cfc0088c889dd96a93319b9941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130869aa4280e1cfc0088c889dd96a93319b9941/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb7d32a918b86254669e38aeb10b16cdb2d43f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7d32a918b86254669e38aeb10b16cdb2d43f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7d32a918b86254669e38aeb10b16cdb2d43f81"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "b20069cb28a39106987ba403292646716ec13a67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130869aa4280e1cfc0088c889dd96a93319b9941/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130869aa4280e1cfc0088c889dd96a93319b9941/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=130869aa4280e1cfc0088c889dd96a93319b9941", "patch": "@@ -1,3 +1,8 @@\n+2005-08-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/rs6000/rs6000.md: Fix thinko in the peephole2 I added\n+\tyesterday.\n+\n 2005-08-24  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* bb-reorder.c (copy_bb, duplicate_computed_gotos): Add argument"}, {"sha": "397473c8c6e2f648b58ea17f8e3a78c06eef39d9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130869aa4280e1cfc0088c889dd96a93319b9941/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130869aa4280e1cfc0088c889dd96a93319b9941/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=130869aa4280e1cfc0088c889dd96a93319b9941", "patch": "@@ -10732,23 +10732,27 @@\n ;; we can do this with an XOR followed by a compare.  But this is profitable\n ;; only if the large constant is only used for the comparison (and in this\n ;; case we already have a register to reuse as scratch).\n+;;\n+;; For 64-bit registers, we could only do so if the constant's bit 15 is clear:\n+;; otherwise we'd need to XOR with FFFFFFFF????0000 which is not available.\n \n (define_peephole2\n-  [(set (match_operand:GPR 0 \"register_operand\")\n-        (match_operand:GPR 1 \"logical_operand\" \"\"))\n-   (set (match_dup 0) (match_operator:GPR 3 \"boolean_or_operator\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (match_operand:SI 1 \"logical_operand\" \"\"))\n+   (set (match_dup 0) (match_operator:SI 3 \"boolean_or_operator\"\n \t\t       [(match_dup 0)\n-\t\t\t(match_operand:GPR 2 \"logical_operand\" \"\")]))\n+\t\t\t(match_operand:SI 2 \"logical_operand\" \"\")]))\n    (set (match_operand:CC 4 \"cc_reg_operand\" \"\")\n-        (compare:CC (match_operand:GPR 5 \"gpc_reg_operand\" \"\")\n+        (compare:CC (match_operand:SI 5 \"gpc_reg_operand\" \"\")\n                     (match_dup 0)))\n    (set (pc)\n         (if_then_else (match_operator 6 \"equality_operator\"\n                        [(match_dup 4) (const_int 0)])\n                       (match_operand 7 \"\" \"\")\n                       (match_operand 8 \"\" \"\")))]\n-  \"peep2_reg_dead_p (3, operands[0])\"\n- [(set (match_dup 0) (xor:GPR (match_dup 5) (match_dup 9)))\n+  \"peep2_reg_dead_p (3, operands[0])\n+   && peep2_reg_dead_p (4, operands[4])\"\n+ [(set (match_dup 0) (xor:SI (match_dup 5) (match_dup 9)))\n   (set (match_dup 4) (compare:CC (match_dup 0) (match_dup 10)))\n   (set (pc) (if_then_else (match_dup 6) (match_dup 7) (match_dup 8)))]\n  \n@@ -10757,7 +10761,7 @@\n      when sign-extended from 16 to 32 bits.  Then see what constant we could\n      XOR with SEXTC to get the sign-extended value.  */\n   rtx cnst = simplify_const_binary_operation (GET_CODE (operands[3]),\n-\t\t\t\t\t      GET_MODE (operands[3]),\n+\t\t\t\t\t      SImode,\n \t\t\t\t\t      operands[1], operands[2]);\n   HOST_WIDE_INT c = INTVAL (cnst);\n   HOST_WIDE_INT sextc = ((c & 0xffff) ^ 0x8000) - 0x8000;"}]}