{"sha": "c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwMzQ1NjEwMzFhOTFlYjFiYjAwYzk0YzRkM2QxYjliZGY1ZDdlNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-04T21:36:08Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-04T21:36:08Z"}, "message": "* libfuncs.h\n\t(LTI_eqhf2, LTI_nehf2, LTI_gthf2, LTI_gehf2, LTI_lthf2)\n\t(LTI_lehf2, LTI_unordhf2, LTI_eqsf2, LTI_nesf2, LTI_gtsf2)\n\t(LTI_gesf2, LTI_ltsf2, LTI_lesf2, LTI_unordsf2, LTI_eqdf2)\n\t(LTI_nedf2, LTI_gtdf2, LTI_gedf2, LTI_ltdf2, LTI_ledf2)\n\t(LTI_unorddf2, LTI_eqxf2, LTI_nexf2, LTI_gtxf2, LTI_gexf2)\n\t(LTI_ltxf2, LTI_lexf2, LTI_unordxf2, LTI_eqtf2, LTI_netf2)\n\t(LTI_gttf2, LTI_getf2, LTI_lttf2, LTI_letf2, LTI_unordtf2)\n\t(eqhf2_libfunc, nehf2_libfunc, gthf2_libfunc, gehf2_libfunc)\n\t(lthf2_libfunc, lehf2_libfunc, unordhf2_libfunc, eqsf2_libfunc)\n\t(nesf2_libfunc, gtsf2_libfunc, gesf2_libfunc, ltsf2_libfunc)\n\t(lesf2_libfunc, unordsf2_libfunc eqdf2_libfunc, nedf2_libfunc)\n\t(gtdf2_libfunc, gedf2_libfunc, ltdf2_libfunc, ledf2_libfunc)\n\t(unorddf2_libfunc eqxf2_libfunc, nexf2_libfunc, gtxf2_libfunc)\n\t(gexf2_libfunc, ltxf2_libfunc, lexf2_libfunc, unordxf2_libfunc\n\t(eqtf2_libfunc, netf2_libfunc, gttf2_libfunc, getf2_libfunc)\n\t(lttf2_libfunc, letf2_libfunc, unordtf2_libfunc):\n\tDelete.\n\t* optabs.h (OTI_eq, OTI_ne, OTI_gt, OTI_ge, OTI_lt, OTI_le)\n\t(OTI_unord, eq_optab, ne_optab, gt_optab, ge_optab, lt_optab)\n\t(le_optab, unord_optab): New.\n\n\t* optabs.c (prepare_float_lib_cmp): Rewrite.  Get the libfuncs\n\tfrom the code_to_optab table, not a giant switch; use\n\tswap_condition; do widening only if a comparison function that\n\twe can call exists in a wider mode, not if a cmp_optab insn or\n\tlibfunc exists in a wider mode; call protect_from_queue\n\texactly once on each operand.\n\t(init_optabs): Initialize the new optabs, not the deleted libfuncs.\n\n\t* config/gofast.h, config/ia64/ia64.c, config/mips/mips.c\n\t* config/pa/pa.c, config/rs6000/rs6000.c, config/sparc/sparc.c:\n\tSet floating point comparison libfuncs using set_optab_libfunc\n\ton the appropriate optab.\n\n\t* config/ia64/ia64.c (ia64_hpux_init_libfuncs): Fix typo.\n\t* config/rs6000/rs6000.c (rs6000_init_libfuncs): Correct ABI\n\tselector conditionals.\n\nFrom-SVN: r72101", "tree": {"sha": "f6324710f59b8320a13b6d0d5d1869cf5e937d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6324710f59b8320a13b6d0d5d1869cf5e937d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/comments", "author": null, "committer": null, "parents": [{"sha": "ce59b97aeeec8d9cc9754a29b88081b8db4323dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce59b97aeeec8d9cc9754a29b88081b8db4323dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce59b97aeeec8d9cc9754a29b88081b8db4323dc"}], "stats": {"total": 658, "additions": 163, "deletions": 495}, "files": [{"sha": "4cdb2cfadf74ce068533fb280fc8ec52bc53c049", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -1,3 +1,44 @@\n+2003-10-04  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* libfuncs.h\n+\t(LTI_eqhf2, LTI_nehf2, LTI_gthf2, LTI_gehf2, LTI_lthf2)\n+\t(LTI_lehf2, LTI_unordhf2, LTI_eqsf2, LTI_nesf2, LTI_gtsf2)\n+\t(LTI_gesf2, LTI_ltsf2, LTI_lesf2, LTI_unordsf2, LTI_eqdf2)\n+\t(LTI_nedf2, LTI_gtdf2, LTI_gedf2, LTI_ltdf2, LTI_ledf2)\n+\t(LTI_unorddf2, LTI_eqxf2, LTI_nexf2, LTI_gtxf2, LTI_gexf2)\n+\t(LTI_ltxf2, LTI_lexf2, LTI_unordxf2, LTI_eqtf2, LTI_netf2)\n+\t(LTI_gttf2, LTI_getf2, LTI_lttf2, LTI_letf2, LTI_unordtf2)\n+\t(eqhf2_libfunc, nehf2_libfunc, gthf2_libfunc, gehf2_libfunc)\n+\t(lthf2_libfunc, lehf2_libfunc, unordhf2_libfunc, eqsf2_libfunc)\n+\t(nesf2_libfunc, gtsf2_libfunc, gesf2_libfunc, ltsf2_libfunc)\n+\t(lesf2_libfunc, unordsf2_libfunc eqdf2_libfunc, nedf2_libfunc)\n+\t(gtdf2_libfunc, gedf2_libfunc, ltdf2_libfunc, ledf2_libfunc)\n+\t(unorddf2_libfunc eqxf2_libfunc, nexf2_libfunc, gtxf2_libfunc)\n+\t(gexf2_libfunc, ltxf2_libfunc, lexf2_libfunc, unordxf2_libfunc\n+\t(eqtf2_libfunc, netf2_libfunc, gttf2_libfunc, getf2_libfunc)\n+\t(lttf2_libfunc, letf2_libfunc, unordtf2_libfunc):\n+\tDelete.\n+\t* optabs.h (OTI_eq, OTI_ne, OTI_gt, OTI_ge, OTI_lt, OTI_le)\n+\t(OTI_unord, eq_optab, ne_optab, gt_optab, ge_optab, lt_optab)\n+\t(le_optab, unord_optab): New.\n+\n+\t* optabs.c (prepare_float_lib_cmp): Rewrite.  Get the libfuncs\n+\tfrom the code_to_optab table, not a giant switch; use\n+\tswap_condition; do widening only if a comparison function that\n+\twe can call exists in a wider mode, not if a cmp_optab insn or\n+\tlibfunc exists in a wider mode; call protect_from_queue\n+\texactly once on each operand.\n+\t(init_optabs): Initialize the new optabs, not the deleted libfuncs.\n+\n+\t* config/gofast.h, config/ia64/ia64.c, config/mips/mips.c\n+\t* config/pa/pa.c, config/rs6000/rs6000.c, config/sparc/sparc.c:\n+\tSet floating point comparison libfuncs using set_optab_libfunc\n+\ton the appropriate optab.\n+\n+\t* config/ia64/ia64.c (ia64_hpux_init_libfuncs): Fix typo.\n+\t* config/rs6000/rs6000.c (rs6000_init_libfuncs): Correct ABI\n+\tselector conditionals.\n+\n 2003-10-04  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/t-m68hc11-gas (MULTILIB_MATCHES): m68hcs12 is\n@@ -33,9 +74,9 @@\n \n 2003-10-03  Robert Bowdidge <bowdidge@apple.com>\n \n-        * ggc-page.c (ggc_pch_write_object): Replace fseek() with fwrite() in \n-        PCH generation, avoiding too-frequent flushes when writing to NFS \n-        file system.\n+\t* ggc-page.c (ggc_pch_write_object): Replace fseek() with fwrite() in\n+\tPCH generation, avoiding too-frequent flushes when writing to NFS\n+\tfile system.\n \n 2003-10-03  Ziemowit Laski  <zlaski@apple.com>\n \n@@ -82,7 +123,7 @@\n \t* config/mips/mips.md (\"type\" attr): Add new \"prefetchx\" value,\n \tupdate comments.\n \t(prefetch_indexed_di, prefetch_indexed_si): New insns.\n-\t\n+\n 2003-10-03  Jeff Sturm  <jsturm@one-point.com>\n \t    Roger Sayle  <roger@eyesopen.com>\n \n@@ -123,7 +164,7 @@\n \toperand's constraint letter to 'I'.\n \t(prefetch_di_address): Likewise.\n \t(prefetch_si, prefetch_di): Set third operand to const0_rtx.\n-\t\n+\n 2003-10-02  Zack Weinberg  <zack@codesourcery.com>\n \n \t* system.h: Poison macros obsoleted by earlier patch."}, {"sha": "3b3efb97b49d902e2fdea6fb6e7ab0bf72e4b3b1", "filename": "gcc/config/gofast.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fgofast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fgofast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgofast.h?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -52,19 +52,19 @@ gofast_maybe_init_libfuncs (void)\n      libfuncs, we use our own functions, since GOFAST doesn't supply\n      them.  */\n \n-  eqsf2_libfunc = init_one_libfunc (\"fpcmp\");\n-  nesf2_libfunc = init_one_libfunc (\"fpcmp\");\n-  gtsf2_libfunc = NULL_RTX;\n-  gesf2_libfunc = NULL_RTX;\n-  ltsf2_libfunc = init_one_libfunc (\"fpcmp\");\n-  lesf2_libfunc = init_one_libfunc (\"fpcmp\");\n+  set_optab_libfunc (eq_optab, SFmode, \"fpcmp\");\n+  set_optab_libfunc (ne_optab, SFmode, \"fpcmp\");\n+  set_optab_libfunc (gt_optab, SFmode, 0);\n+  set_optab_libfunc (ge_optab, SFmode, 0);\n+  set_optab_libfunc (lt_optab, SFmode, \"fpcmp\");\n+  set_optab_libfunc (le_optab, SFmode, \"fpcmp\");\n \n-  eqdf2_libfunc = init_one_libfunc (\"dpcmp\");\n-  nedf2_libfunc = init_one_libfunc (\"dpcmp\");\n-  gtdf2_libfunc = NULL_RTX;\n-  gedf2_libfunc = NULL_RTX;\n-  ltdf2_libfunc = init_one_libfunc (\"dpcmp\");\n-  ledf2_libfunc = init_one_libfunc (\"dpcmp\");\n+  set_optab_libfunc (eq_optab, DFmode, \"dpcmp\");\n+  set_optab_libfunc (ne_optab, DFmode, \"dpcmp\");\n+  set_optab_libfunc (gt_optab, DFmode, 0);\n+  set_optab_libfunc (ge_optab, DFmode, 0);\n+  set_optab_libfunc (lt_optab, DFmode, \"dpcmp\");\n+  set_optab_libfunc (le_optab, DFmode, \"dpcmp\");\n \n   extendsfdf2_libfunc = init_one_libfunc (\"fptodp\");\n   truncdfsf2_libfunc = init_one_libfunc (\"dptofp\");"}, {"sha": "b10b9e9344c04e93afb8d5663ab5a5afefee9923", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -8313,13 +8313,20 @@ ia64_hpux_init_libfuncs (void)\n {\n   set_optab_libfunc (add_optab, TFmode, \"_U_Qfadd\");\n   set_optab_libfunc (sub_optab, TFmode, \"_U_Qfsub\");\n-  set_optab_libfunc (smul_optab, TFmode, \"_Q_Qfmpy\");\n+  set_optab_libfunc (smul_optab, TFmode, \"_U_Qfmpy\");\n   set_optab_libfunc (sdiv_optab, TFmode, \"_U_Qfdiv\");\n   set_optab_libfunc (smin_optab, TFmode, \"_U_Qfmin\");\n   set_optab_libfunc (smax_optab, TFmode, \"_U_Qfmax\");\n   set_optab_libfunc (abs_optab, TFmode, \"_U_Qfabs\");\n   set_optab_libfunc (neg_optab, TFmode, \"_U_Qfneg\");\n \n+  set_optab_libfunc (eq_optab, TFmode, \"_U_Qfeq\");\n+  set_optab_libfunc (ne_optab, TFmode, \"_U_Qfne\");\n+  set_optab_libfunc (gt_optab, TFmode, \"_U_Qfgt\");\n+  set_optab_libfunc (ge_optab, TFmode, \"_U_Qfge\");\n+  set_optab_libfunc (lt_optab, TFmode, \"_U_Qflt\");\n+  set_optab_libfunc (le_optab, TFmode, \"_U_Qfle\");\n+\n   extendsftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_sgl_to_quad\");\n   extenddftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_dbl_to_quad\");\n   trunctfsf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_quad_to_sgl\");\n@@ -8330,12 +8337,6 @@ ia64_hpux_init_libfuncs (void)\n   fixtfdi_libfunc = init_one_libfunc (\"_U_Qfcnvfxt_quad_to_dbl\");\n   fixunstfsi_libfunc = init_one_libfunc (\"_U_Qfcnvfxut_quad_to_sgl\");\n   fixunstfdi_libfunc = init_one_libfunc (\"_U_Qfcnvfxut_quad_to_dbl\");\n-  eqtf2_libfunc = init_one_libfunc (\"_U_Qfeq\");\n-  netf2_libfunc = init_one_libfunc (\"_U_Qfne\");\n-  gttf2_libfunc = init_one_libfunc (\"_U_Qfgt\");\n-  getf2_libfunc = init_one_libfunc (\"_U_Qfge\");\n-  lttf2_libfunc = init_one_libfunc (\"_U_Qflt\");\n-  letf2_libfunc = init_one_libfunc (\"_U_Qfle\");\n }\n \f\n /* Switch to the section to which we should output X.  The only thing"}, {"sha": "543b112cb7e720d4f69d3db31aaf21980c23a953", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -9015,12 +9015,12 @@ mips_init_libfuncs (void)\n       set_optab_libfunc (smul_optab, SFmode, \"__mips16_mulsf3\");\n       set_optab_libfunc (sdiv_optab, SFmode, \"__mips16_divsf3\");\n \n-      eqsf2_libfunc     = init_one_libfunc (\"__mips16_eqsf2\");\n-      nesf2_libfunc     = init_one_libfunc (\"__mips16_nesf2\");\n-      gtsf2_libfunc     = init_one_libfunc (\"__mips16_gtsf2\");\n-      gesf2_libfunc     = init_one_libfunc (\"__mips16_gesf2\");\n-      ltsf2_libfunc     = init_one_libfunc (\"__mips16_ltsf2\");\n-      lesf2_libfunc     = init_one_libfunc (\"__mips16_lesf2\");\n+      set_optab_libfunc (eq_optab, SFmode, \"__mips16_eqsf2\");\n+      set_optab_libfunc (ne_optab, SFmode, \"__mips16_nesf2\");\n+      set_optab_libfunc (gt_optab, SFmode, \"__mips16_gtsf2\");\n+      set_optab_libfunc (ge_optab, SFmode, \"__mips16_gesf2\");\n+      set_optab_libfunc (lt_optab, SFmode, \"__mips16_ltsf2\");\n+      set_optab_libfunc (le_optab, SFmode, \"__mips16_lesf2\");\n \n       floatsisf_libfunc = init_one_libfunc (\"__mips16_floatsisf\");\n       fixsfsi_libfunc   = init_one_libfunc (\"__mips16_fixsfsi\");\n@@ -9032,12 +9032,12 @@ mips_init_libfuncs (void)\n \t  set_optab_libfunc (smul_optab, DFmode, \"__mips16_muldf3\");\n \t  set_optab_libfunc (sdiv_optab, DFmode, \"__mips16_divdf3\");\n \n-\t  eqdf2_libfunc       = init_one_libfunc (\"__mips16_eqdf2\");\n-\t  nedf2_libfunc       = init_one_libfunc (\"__mips16_nedf2\");\n-\t  gtdf2_libfunc       = init_one_libfunc (\"__mips16_gtdf2\");\n-\t  gedf2_libfunc       = init_one_libfunc (\"__mips16_gedf2\");\n-\t  ltdf2_libfunc       = init_one_libfunc (\"__mips16_ltdf2\");\n-\t  ledf2_libfunc       = init_one_libfunc (\"__mips16_ledf2\");\n+\t  set_optab_libfunc (eq_optab, DFmode, \"__mips16_eqdf2\");\n+\t  set_optab_libfunc (ne_optab, DFmode, \"__mips16_nedf2\");\n+\t  set_optab_libfunc (gt_optab, DFmode, \"__mips16_gtdf2\");\n+\t  set_optab_libfunc (ge_optab, DFmode, \"__mips16_gedf2\");\n+\t  set_optab_libfunc (lt_optab, DFmode, \"__mips16_ltdf2\");\n+\t  set_optab_libfunc (le_optab, DFmode, \"__mips16_ledf2\");\n \n \t  floatsidf_libfunc   = init_one_libfunc (\"__mips16_floatsidf\");\n \t  fixdfsi_libfunc     = init_one_libfunc (\"__mips16_fixdfsi\");"}, {"sha": "a5b9a4dc22453bfcda976ba6b738d13f98a58185", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -4973,12 +4973,12 @@ pa_hpux_init_libfuncs (void)\n   set_optab_libfunc (abs_optab, TFmode, \"_U_Qfabs\");\n   set_optab_libfunc (neg_optab, TFmode, \"_U_Qfneg\");\n \n-  eqtf2_libfunc = init_one_libfunc (\"_U_Qfeq\");\n-  netf2_libfunc = init_one_libfunc (\"_U_Qfne\");\n-  gttf2_libfunc = init_one_libfunc (\"_U_Qfgt\");\n-  getf2_libfunc = init_one_libfunc (\"_U_Qfge\");\n-  lttf2_libfunc = init_one_libfunc (\"_U_Qflt\");\n-  letf2_libfunc = init_one_libfunc (\"_U_Qfle\");\n+  set_optab_libfunc (eq_optab, TFmode, \"_U_Qfeq\");\n+  set_optab_libfunc (ne_optab, TFmode, \"_U_Qfne\");\n+  set_optab_libfunc (gt_optab, TFmode, \"_U_Qfgt\");\n+  set_optab_libfunc (ge_optab, TFmode, \"_U_Qfge\");\n+  set_optab_libfunc (lt_optab, TFmode, \"_U_Qflt\");\n+  set_optab_libfunc (le_optab, TFmode, \"_U_Qfle\");\n \n   extendsftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_sgl_to_quad\");\n   extenddftf2_libfunc = init_one_libfunc (\"_U_Qfcnvff_dbl_to_quad\");"}, {"sha": "1f037d9f91065f5cc143811ccfa20634623c066a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -6779,25 +6779,24 @@ rs6000_init_libfuncs (void)\n   if (!TARGET_HARD_FLOAT)\n     return;\n \n-  if (TARGET_AIX)\n+  if (DEFAULT_ABI != ABI_V4)\n     {\n-      /* Optabs entries for the int->float routines and quad FP\n-\t operations using the standard AIX names.  */\n-      if (! TARGET_POWER2 && ! TARGET_POWERPC)\n+      if (TARGET_XCOFF && ! TARGET_POWER2 && ! TARGET_POWERPC)\n \t{\n+\t  /* AIX library routines for float->int conversion.  */\n \t  fixdfsi_libfunc = init_one_libfunc (\"__itrunc\");\n \t  fixunsdfsi_libfunc = init_one_libfunc (\"__uitrunc\");\n \t}\n \n+      /* Standard AIX/Darwin/64-bit SVR4 quad floating point routines.  */\n       set_optab_libfunc (add_optab, TFmode, \"_xlqadd\");\n       set_optab_libfunc (sub_optab, TFmode, \"_xlqsub\");\n       set_optab_libfunc (smul_optab, TFmode, \"_xlqmul\");\n       set_optab_libfunc (sdiv_optab, TFmode, \"_xlqdiv\");\n     }\n-  else if (TARGET_ELF)\n+  else\n     {\n-      /* Define library calls for quad FP operations.  These are all\n-\t part of the PowerPC 32bit ABI.  */\n+      /* 32-bit SVR4 quad floating point routines.  */\n \n       set_optab_libfunc (add_optab, TFmode, \"_q_add\");\n       set_optab_libfunc (sub_optab, TFmode, \"_q_sub\");\n@@ -6807,12 +6806,13 @@ rs6000_init_libfuncs (void)\n       if (TARGET_PPC_GPOPT || TARGET_POWER2)\n \tset_optab_libfunc (sqrt_optab, TFmode, \"_q_sqrt\");\n \n-      eqtf2_libfunc = init_one_libfunc (\"_q_feq\");\n-      netf2_libfunc = init_one_libfunc (\"_q_fne\");\n-      gttf2_libfunc = init_one_libfunc (\"_q_fgt\");\n-      getf2_libfunc = init_one_libfunc (\"_q_fge\");\n-      lttf2_libfunc = init_one_libfunc (\"_q_flt\");\n-      letf2_libfunc = init_one_libfunc (\"_q_fle\");\n+      set_optab_libfunc (eq_optab, TFmode, \"_q_feq\");\n+      set_optab_libfunc (ne_optab, TFmode, \"_q_fne\");\n+      set_optab_libfunc (gt_optab, TFmode, \"_q_fgt\");\n+      set_optab_libfunc (ge_optab, TFmode, \"_q_fge\");\n+      set_optab_libfunc (lt_optab, TFmode, \"_q_flt\");\n+      set_optab_libfunc (le_optab, TFmode, \"_q_fle\");\n+\n       trunctfsf2_libfunc = init_one_libfunc (\"_q_qtos\");\n       trunctfdf2_libfunc = init_one_libfunc (\"_q_qtod\");\n       extendsftf2_libfunc = init_one_libfunc (\"_q_stoq\");"}, {"sha": "adea22f4fd021ac243440893043c50ab3d0d096b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -8424,12 +8424,12 @@ sparc_init_libfuncs (void)\n       if (TARGET_FPU)\n \tset_optab_libfunc (sqrt_optab, TFmode, \"_Q_sqrt\");\n \n-      eqtf2_libfunc = init_one_libfunc (\"_Q_feq\");\n-      netf2_libfunc = init_one_libfunc (\"_Q_fne\");\n-      gttf2_libfunc = init_one_libfunc (\"_Q_fgt\");\n-      getf2_libfunc = init_one_libfunc (\"_Q_fge\");\n-      lttf2_libfunc = init_one_libfunc (\"_Q_flt\");\n-      letf2_libfunc = init_one_libfunc (\"_Q_fle\");\n+      set_optab_libfunc (eq_optab, TFmode, \"_Q_feq\");\n+      set_optab_libfunc (ne_optab, TFmode, \"_Q_fne\");\n+      set_optab_libfunc (gt_optab, TFmode, \"_Q_fgt\");\n+      set_optab_libfunc (ge_optab, TFmode, \"_Q_fge\");\n+      set_optab_libfunc (lt_optab, TFmode, \"_Q_flt\");\n+      set_optab_libfunc (le_optab, TFmode, \"_Q_fle\");\n \n       trunctfsf2_libfunc = init_one_libfunc (\"_Q_qtos\");\n       trunctfdf2_libfunc = init_one_libfunc (\"_Q_qtod\");"}, {"sha": "d919ddf8679503a27714b94b3ad03682ad3d712d", "filename": "gcc/libfuncs.h", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -53,46 +53,6 @@ enum libfunc_index\n   LTI_unwind_sjlj_register,\n   LTI_unwind_sjlj_unregister,\n \n-  LTI_eqhf2,\n-  LTI_nehf2,\n-  LTI_gthf2,\n-  LTI_gehf2,\n-  LTI_lthf2,\n-  LTI_lehf2,\n-  LTI_unordhf2,\n-\n-  LTI_eqsf2,\n-  LTI_nesf2,\n-  LTI_gtsf2,\n-  LTI_gesf2,\n-  LTI_ltsf2,\n-  LTI_lesf2,\n-  LTI_unordsf2,\n-\n-  LTI_eqdf2,\n-  LTI_nedf2,\n-  LTI_gtdf2,\n-  LTI_gedf2,\n-  LTI_ltdf2,\n-  LTI_ledf2,\n-  LTI_unorddf2,\n-\n-  LTI_eqxf2,\n-  LTI_nexf2,\n-  LTI_gtxf2,\n-  LTI_gexf2,\n-  LTI_ltxf2,\n-  LTI_lexf2,\n-  LTI_unordxf2,\n-\n-  LTI_eqtf2,\n-  LTI_netf2,\n-  LTI_gttf2,\n-  LTI_getf2,\n-  LTI_lttf2,\n-  LTI_letf2,\n-  LTI_unordtf2,\n-\n   LTI_floatsisf,\n   LTI_floatdisf,\n   LTI_floattisf,\n@@ -185,46 +145,6 @@ extern GTY(()) rtx libfunc_table[LTI_MAX];\n #define unwind_sjlj_unregister_libfunc \\\n   (libfunc_table[LTI_unwind_sjlj_unregister])\n \n-#define eqhf2_libfunc\t(libfunc_table[LTI_eqhf2])\n-#define nehf2_libfunc\t(libfunc_table[LTI_nehf2])\n-#define gthf2_libfunc\t(libfunc_table[LTI_gthf2])\n-#define gehf2_libfunc\t(libfunc_table[LTI_gehf2])\n-#define lthf2_libfunc\t(libfunc_table[LTI_lthf2])\n-#define lehf2_libfunc\t(libfunc_table[LTI_lehf2])\n-#define unordhf2_libfunc\t(libfunc_table[LTI_unordhf2])\n-\n-#define eqsf2_libfunc\t(libfunc_table[LTI_eqsf2])\n-#define nesf2_libfunc\t(libfunc_table[LTI_nesf2])\n-#define gtsf2_libfunc\t(libfunc_table[LTI_gtsf2])\n-#define gesf2_libfunc\t(libfunc_table[LTI_gesf2])\n-#define ltsf2_libfunc\t(libfunc_table[LTI_ltsf2])\n-#define lesf2_libfunc\t(libfunc_table[LTI_lesf2])\n-#define unordsf2_libfunc\t(libfunc_table[LTI_unordsf2])\n-\n-#define eqdf2_libfunc\t(libfunc_table[LTI_eqdf2])\n-#define nedf2_libfunc\t(libfunc_table[LTI_nedf2])\n-#define gtdf2_libfunc\t(libfunc_table[LTI_gtdf2])\n-#define gedf2_libfunc\t(libfunc_table[LTI_gedf2])\n-#define ltdf2_libfunc\t(libfunc_table[LTI_ltdf2])\n-#define ledf2_libfunc\t(libfunc_table[LTI_ledf2])\n-#define unorddf2_libfunc\t(libfunc_table[LTI_unorddf2])\n-\n-#define eqxf2_libfunc\t(libfunc_table[LTI_eqxf2])\n-#define nexf2_libfunc\t(libfunc_table[LTI_nexf2])\n-#define gtxf2_libfunc\t(libfunc_table[LTI_gtxf2])\n-#define gexf2_libfunc\t(libfunc_table[LTI_gexf2])\n-#define ltxf2_libfunc\t(libfunc_table[LTI_ltxf2])\n-#define lexf2_libfunc\t(libfunc_table[LTI_lexf2])\n-#define unordxf2_libfunc\t(libfunc_table[LTI_unordxf2])\n-\n-#define eqtf2_libfunc\t(libfunc_table[LTI_eqtf2])\n-#define netf2_libfunc\t(libfunc_table[LTI_netf2])\n-#define gttf2_libfunc\t(libfunc_table[LTI_gttf2])\n-#define getf2_libfunc\t(libfunc_table[LTI_getf2])\n-#define lttf2_libfunc\t(libfunc_table[LTI_lttf2])\n-#define letf2_libfunc\t(libfunc_table[LTI_letf2])\n-#define unordtf2_libfunc\t(libfunc_table[LTI_unordtf2])\n-\n #define floatsisf_libfunc\t(libfunc_table[LTI_floatsisf])\n #define floatdisf_libfunc\t(libfunc_table[LTI_floatdisf])\n #define floattisf_libfunc\t(libfunc_table[LTI_floattisf])"}, {"sha": "bd9306d4df130f41fe8b29ff29a2a54c80dfd386", "filename": "gcc/optabs.c", "status": "modified", "additions": 43, "deletions": 354, "changes": 397, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -3872,336 +3872,47 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n \t\t       enum machine_mode *pmode, int *punsignedp)\n {\n   enum rtx_code comparison = *pcomparison;\n-  rtx tmp;\n-  rtx x = *px = protect_from_queue (*px, 0);\n-  rtx y = *py = protect_from_queue (*py, 0);\n-  enum machine_mode mode = GET_MODE (x);\n+  enum rtx_code swapped = swap_condition (comparison);\n+  rtx x = protect_from_queue (*px, 0);\n+  rtx y = protect_from_queue (*py, 0);\n+  enum machine_mode orig_mode = GET_MODE (x);\n+  enum machine_mode mode;\n   rtx libfunc = 0;\n   rtx result;\n \n-  if (mode == HFmode)\n-    switch (comparison)\n-      {\n-      case EQ:\n-\tlibfunc = eqhf2_libfunc;\n-\tbreak;\n-\n-      case NE:\n-\tlibfunc = nehf2_libfunc;\n-\tbreak;\n-\n-      case GT:\n-\tlibfunc = gthf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LT;\n-\t    libfunc = lthf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case GE:\n-\tlibfunc = gehf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LE;\n-\t    libfunc = lehf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LT:\n-\tlibfunc = lthf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GT;\n-\t    libfunc = gthf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LE:\n-\tlibfunc = lehf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GE;\n-\t    libfunc = gehf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case UNORDERED:\n-\tlibfunc = unordhf2_libfunc;\n-\tbreak;\n-\n-      default:\n-\tbreak;\n-      }\n-  else if (mode == SFmode)\n-    switch (comparison)\n-      {\n-      case EQ:\n-\tlibfunc = eqsf2_libfunc;\n-\tbreak;\n-\n-      case NE:\n-\tlibfunc = nesf2_libfunc;\n-\tbreak;\n-\n-      case GT:\n-\tlibfunc = gtsf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LT;\n-\t    libfunc = ltsf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case GE:\n-\tlibfunc = gesf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LE;\n-\t    libfunc = lesf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LT:\n-\tlibfunc = ltsf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GT;\n-\t    libfunc = gtsf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LE:\n-\tlibfunc = lesf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GE;\n-\t    libfunc = gesf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case UNORDERED:\n-\tlibfunc = unordsf2_libfunc;\n-\tbreak;\n-\n-      default:\n-\tbreak;\n-      }\n-  else if (mode == DFmode)\n-    switch (comparison)\n-      {\n-      case EQ:\n-\tlibfunc = eqdf2_libfunc;\n-\tbreak;\n-\n-      case NE:\n-\tlibfunc = nedf2_libfunc;\n-\tbreak;\n-\n-      case GT:\n-\tlibfunc = gtdf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LT;\n-\t    libfunc = ltdf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case GE:\n-\tlibfunc = gedf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LE;\n-\t    libfunc = ledf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LT:\n-\tlibfunc = ltdf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GT;\n-\t    libfunc = gtdf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LE:\n-\tlibfunc = ledf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GE;\n-\t    libfunc = gedf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case UNORDERED:\n-\tlibfunc = unorddf2_libfunc;\n-\tbreak;\n-\n-      default:\n-\tbreak;\n-      }\n-  else if (mode == XFmode)\n-    switch (comparison)\n-      {\n-      case EQ:\n-\tlibfunc = eqxf2_libfunc;\n-\tbreak;\n-\n-      case NE:\n-\tlibfunc = nexf2_libfunc;\n-\tbreak;\n-\n-      case GT:\n-\tlibfunc = gtxf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LT;\n-\t    libfunc = ltxf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case GE:\n-\tlibfunc = gexf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LE;\n-\t    libfunc = lexf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LT:\n-\tlibfunc = ltxf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GT;\n-\t    libfunc = gtxf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LE:\n-\tlibfunc = lexf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GE;\n-\t    libfunc = gexf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case UNORDERED:\n-\tlibfunc = unordxf2_libfunc;\n-\tbreak;\n-\n-      default:\n-\tbreak;\n-      }\n-  else if (mode == TFmode)\n-    switch (comparison)\n-      {\n-      case EQ:\n-\tlibfunc = eqtf2_libfunc;\n-\tbreak;\n-\n-      case NE:\n-\tlibfunc = netf2_libfunc;\n-\tbreak;\n-\n-      case GT:\n-\tlibfunc = gttf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LT;\n-\t    libfunc = lttf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case GE:\n-\tlibfunc = getf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = LE;\n-\t    libfunc = letf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LT:\n-\tlibfunc = lttf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GT;\n-\t    libfunc = gttf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case LE:\n-\tlibfunc = letf2_libfunc;\n-\tif (libfunc == NULL_RTX)\n-\t  {\n-\t    tmp = x; x = y; y = tmp;\n-\t    *pcomparison = GE;\n-\t    libfunc = getf2_libfunc;\n-\t  }\n-\tbreak;\n-\n-      case UNORDERED:\n-\tlibfunc = unordtf2_libfunc;\n-\tbreak;\n-\n-      default:\n-\tbreak;\n-      }\n-  else\n+  for (mode = orig_mode; mode != VOIDmode; mode = GET_MODE_WIDER_MODE (mode))\n     {\n-      enum machine_mode wider_mode;\n+      if ((libfunc = code_to_optab[comparison]->handlers[mode].libfunc))\n+\tbreak;\n \n-      for (wider_mode = GET_MODE_WIDER_MODE (mode); wider_mode != VOIDmode;\n-\t   wider_mode = GET_MODE_WIDER_MODE (wider_mode))\n+      if ((libfunc = code_to_optab[swapped]->handlers[mode].libfunc))\n \t{\n-\t  if ((cmp_optab->handlers[(int) wider_mode].insn_code\n-\t       != CODE_FOR_nothing)\n-\t      || (cmp_optab->handlers[(int) wider_mode].libfunc != 0))\n-\t    {\n-\t      x = protect_from_queue (x, 0);\n-\t      y = protect_from_queue (y, 0);\n-\t      *px = convert_to_mode (wider_mode, x, 0);\n-\t      *py = convert_to_mode (wider_mode, y, 0);\n-\t      prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp);\n-\t      return;\n-\t    }\n+\t  rtx tmp;\n+\t  tmp = x; x = y; y = tmp;\n+\t  comparison = swapped;\n+\t  break;\n \t}\n-      abort ();\n     }\n \n-  if (libfunc == 0)\n+  if (mode == VOIDmode)\n     abort ();\n \n+  if (mode != orig_mode)\n+    {\n+      x = convert_to_mode (mode, x, 0);\n+      y = convert_to_mode (mode, y, 0);\n+    }\n+\n+  if (comparison == UNORDERED\n+      || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n+    comparison = NE;\n+\n   result = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST_MAKE_BLOCK,\n \t\t\t\t    word_mode, 2, x, mode, y, mode);\n   *px = result;\n   *py = const0_rtx;\n   *pmode = word_mode;\n-  if (comparison == UNORDERED\n-      || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n-    *pcomparison = NE;\n+  *pcomparison = comparison;\n   *punsignedp = 0;\n }\n \f\n@@ -5430,6 +5141,15 @@ init_optabs (void)\n \n   ucmp_optab = init_optab (UNKNOWN);\n   tst_optab = init_optab (UNKNOWN);\n+\n+  eq_optab = init_optab (EQ);\n+  ne_optab = init_optab (NE);\n+  gt_optab = init_optab (GT);\n+  ge_optab = init_optab (GE);\n+  lt_optab = init_optab (LT);\n+  le_optab = init_optab (LE);\n+  unord_optab = init_optab (UNORDERED);\n+\n   neg_optab = init_optab (NEG);\n   negv_optab = init_optabv (NEG);\n   abs_optab = init_optab (ABS);\n@@ -5530,6 +5250,15 @@ init_optabs (void)\n   init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n   init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n \n+  /* EQ etc are floating point only.  */\n+  init_floating_libfuncs (eq_optab, \"eq\", '2');\n+  init_floating_libfuncs (ne_optab, \"ne\", '2');\n+  init_floating_libfuncs (gt_optab, \"gt\", '2');\n+  init_floating_libfuncs (ge_optab, \"ge\", '2');\n+  init_floating_libfuncs (lt_optab, \"lt\", '2');\n+  init_floating_libfuncs (le_optab, \"le\", '2');\n+  init_floating_libfuncs (unord_optab, \"unord\", '2');\n+\n   /* Use cabs for DC complex abs, since systems generally have cabs.\n      Don't define any libcall for SCmode, so that cabs will be used.  */\n   abs_optab->handlers[(int) DCmode].libfunc\n@@ -5575,46 +5304,6 @@ init_optabs (void)\n   unwind_sjlj_unregister_libfunc\n     = init_one_libfunc (\"_Unwind_SjLj_Unregister\");\n \n-  eqhf2_libfunc = init_one_libfunc (\"__eqhf2\");\n-  nehf2_libfunc = init_one_libfunc (\"__nehf2\");\n-  gthf2_libfunc = init_one_libfunc (\"__gthf2\");\n-  gehf2_libfunc = init_one_libfunc (\"__gehf2\");\n-  lthf2_libfunc = init_one_libfunc (\"__lthf2\");\n-  lehf2_libfunc = init_one_libfunc (\"__lehf2\");\n-  unordhf2_libfunc = init_one_libfunc (\"__unordhf2\");\n-\n-  eqsf2_libfunc = init_one_libfunc (\"__eqsf2\");\n-  nesf2_libfunc = init_one_libfunc (\"__nesf2\");\n-  gtsf2_libfunc = init_one_libfunc (\"__gtsf2\");\n-  gesf2_libfunc = init_one_libfunc (\"__gesf2\");\n-  ltsf2_libfunc = init_one_libfunc (\"__ltsf2\");\n-  lesf2_libfunc = init_one_libfunc (\"__lesf2\");\n-  unordsf2_libfunc = init_one_libfunc (\"__unordsf2\");\n-\n-  eqdf2_libfunc = init_one_libfunc (\"__eqdf2\");\n-  nedf2_libfunc = init_one_libfunc (\"__nedf2\");\n-  gtdf2_libfunc = init_one_libfunc (\"__gtdf2\");\n-  gedf2_libfunc = init_one_libfunc (\"__gedf2\");\n-  ltdf2_libfunc = init_one_libfunc (\"__ltdf2\");\n-  ledf2_libfunc = init_one_libfunc (\"__ledf2\");\n-  unorddf2_libfunc = init_one_libfunc (\"__unorddf2\");\n-\n-  eqxf2_libfunc = init_one_libfunc (\"__eqxf2\");\n-  nexf2_libfunc = init_one_libfunc (\"__nexf2\");\n-  gtxf2_libfunc = init_one_libfunc (\"__gtxf2\");\n-  gexf2_libfunc = init_one_libfunc (\"__gexf2\");\n-  ltxf2_libfunc = init_one_libfunc (\"__ltxf2\");\n-  lexf2_libfunc = init_one_libfunc (\"__lexf2\");\n-  unordxf2_libfunc = init_one_libfunc (\"__unordxf2\");\n-\n-  eqtf2_libfunc = init_one_libfunc (\"__eqtf2\");\n-  netf2_libfunc = init_one_libfunc (\"__netf2\");\n-  gttf2_libfunc = init_one_libfunc (\"__gttf2\");\n-  getf2_libfunc = init_one_libfunc (\"__getf2\");\n-  lttf2_libfunc = init_one_libfunc (\"__lttf2\");\n-  letf2_libfunc = init_one_libfunc (\"__letf2\");\n-  unordtf2_libfunc = init_one_libfunc (\"__unordtf2\");\n-\n   floatsisf_libfunc = init_one_libfunc (\"__floatsisf\");\n   floatdisf_libfunc = init_one_libfunc (\"__floatdisf\");\n   floattisf_libfunc = init_one_libfunc (\"__floattisf\");"}, {"sha": "02c0af5d33ab0c6963061a657c524ebaec9b1b2c", "filename": "gcc/optabs.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=c9034561031a91eb1bb00c94c4d3d1b9bdf5d7e4", "patch": "@@ -161,6 +161,15 @@ enum optab_index\n   /* tst insn; compare one operand against 0 */\n   OTI_tst,\n \n+  /* Floating point comparison optabs - used primarily for libfuncs */\n+  OTI_eq,\n+  OTI_ne,\n+  OTI_gt,\n+  OTI_ge,\n+  OTI_lt,\n+  OTI_le,\n+  OTI_unord,\n+\n   /* String length */\n   OTI_strlen,\n \n@@ -243,6 +252,14 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define ucmp_optab (optab_table[OTI_ucmp])\n #define tst_optab (optab_table[OTI_tst])\n \n+#define eq_optab (optab_table[OTI_eq])\n+#define ne_optab (optab_table[OTI_ne])\n+#define gt_optab (optab_table[OTI_gt])\n+#define ge_optab (optab_table[OTI_ge])\n+#define lt_optab (optab_table[OTI_lt])\n+#define le_optab (optab_table[OTI_le])\n+#define unord_optab (optab_table[OTI_unord])\n+\n #define strlen_optab (optab_table[OTI_strlen])\n \n #define cbranch_optab (optab_table[OTI_cbranch])"}]}