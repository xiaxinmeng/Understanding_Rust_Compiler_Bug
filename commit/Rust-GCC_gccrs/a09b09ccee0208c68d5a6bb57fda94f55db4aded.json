{"sha": "a09b09ccee0208c68d5a6bb57fda94f55db4aded", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5YjA5Y2NlZTAyMDhjNjhkNWE2YmI1N2ZkYTk0ZjU1ZGI0YWRlZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-08-28T13:36:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-08-28T13:36:54Z"}, "message": "[PR c++/90613] Fix using-decl debug bloat\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-08/msg01888.html\n\tcp/\n\tPR c++/90613\n\t* name-lookup.c (cp_emit_debug_info): Check for builtins during\n\toverload iteration.\n\n\ttestsuite/\n\tPR c++/90613\n\t* g++.dg/lookup/using61.C: New.\n\nFrom-SVN: r274991", "tree": {"sha": "885f4aa75c6115de2990ceae576390db1f4f1ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/885f4aa75c6115de2990ceae576390db1f4f1ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09b09ccee0208c68d5a6bb57fda94f55db4aded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09b09ccee0208c68d5a6bb57fda94f55db4aded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09b09ccee0208c68d5a6bb57fda94f55db4aded", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09b09ccee0208c68d5a6bb57fda94f55db4aded/comments", "author": null, "committer": null, "parents": [{"sha": "629c4e52e48ae0a02cd757815c8dc25a41a53d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629c4e52e48ae0a02cd757815c8dc25a41a53d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629c4e52e48ae0a02cd757815c8dc25a41a53d88"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "08a44b6c6067f4a273f0c69943f63edbb35cfd21", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a09b09ccee0208c68d5a6bb57fda94f55db4aded", "patch": "@@ -1,3 +1,9 @@\n+2019-08-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/90613\n+\t* name-lookup.c (cp_emit_debug_info): Check for builtins during\n+\toverload iteration.\n+\n 2019-08-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/81676 - bogus -Wunused warnings in constexpr if."}, {"sha": "8bbb92ddc9faa4e0343a7329b6554d3ee883acdf", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=a09b09ccee0208c68d5a6bb57fda94f55db4aded", "patch": "@@ -7455,32 +7455,33 @@ cp_emit_debug_info_for_using (tree t, tree context)\n   if (seen_error ())\n     return;\n \n-  /* Ignore this FUNCTION_DECL if it refers to a builtin declaration\n-     of a builtin function.  */\n-  if (TREE_CODE (t) == FUNCTION_DECL\n-      && DECL_EXTERNAL (t)\n-      && fndecl_built_in_p (t))\n-    return;\n-\n   /* Do not supply context to imported_module_or_decl, if\n      it is a global namespace.  */\n   if (context == global_namespace)\n     context = NULL_TREE;\n \n   t = MAYBE_BASELINK_FUNCTIONS (t);\n \n-  /* FIXME: Handle TEMPLATE_DECLs.  */\n   for (lkp_iterator iter (t); iter; ++iter)\n     {\n       tree fn = *iter;\n-      if (TREE_CODE (fn) != TEMPLATE_DECL)\n-\t{\n-\t  if (building_stmt_list_p ())\n-\t    add_stmt (build_stmt (input_location, USING_STMT, fn));\n-\t  else\n-\t    debug_hooks->imported_module_or_decl (fn, NULL_TREE, context,\n-\t\t\t\t\t\t  false, false);\n-\t}\n+\n+      if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t/* FIXME: Handle TEMPLATE_DECLs.  */\n+\tcontinue;\n+      \n+      /* Ignore this FUNCTION_DECL if it refers to a builtin declaration\n+\t of a builtin function.  */\n+      if (TREE_CODE (fn) == FUNCTION_DECL\n+\t  && DECL_EXTERNAL (fn)\n+\t  && fndecl_built_in_p (fn))\n+\tcontinue;\n+\n+      if (building_stmt_list_p ())\n+\tadd_stmt (build_stmt (input_location, USING_STMT, fn));\n+      else\n+\tdebug_hooks->imported_module_or_decl (fn, NULL_TREE, context,\n+\t\t\t\t\t      false, false);\n     }\n }\n "}, {"sha": "480362e9d8af6bdc23081a13ba3de7aab950b6d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a09b09ccee0208c68d5a6bb57fda94f55db4aded", "patch": "@@ -1,3 +1,8 @@\n+2019-08-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/90613\n+\t* g++.dg/lookup/using61.C: New.\n+\n 2019-08-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/89544"}, {"sha": "33d6df037e6de26618d88cb3eeeafe29de9fe5af", "filename": "gcc/testsuite/g++.dg/lookup/using61.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09b09ccee0208c68d5a6bb57fda94f55db4aded/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing61.C?ref=a09b09ccee0208c68d5a6bb57fda94f55db4aded", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-gdwarf-2\" }\n+/* { dg-skip-if \"No Dwarf\" { { *-*-aix* hppa*-*-hpux* } && { ! hppa*64*-*-* } } } */\n+\n+extern \"C\" long double nanl(const char *);\n+using ::nanl;\n+\n+// We should elide the using for this extern C builtin\n+// { dg-final { scan-assembler-not \".debug_info\" } }"}]}