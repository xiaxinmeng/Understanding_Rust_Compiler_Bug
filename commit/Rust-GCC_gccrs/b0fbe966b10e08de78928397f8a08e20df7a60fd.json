{"sha": "b0fbe966b10e08de78928397f8a08e20df7a60fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBmYmU5NjZiMTBlMDhkZTc4OTI4Mzk3ZjhhMDhlMjBkZjdhNjBmZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-11-26T06:51:14Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-11-26T06:51:14Z"}, "message": "verify.cc (type::compatible): Check initialization status first.\n\n\t* verify.cc (type::compatible): Check initialization status\n\tfirst.\n\t* interpret.cc (run) [insn_invokespecial, invokespecial_resolved]:\n\tDon't use NULLCHECK.\n\nFrom-SVN: r59494", "tree": {"sha": "3523ae56e241e44fb26f03de32973be665940818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3523ae56e241e44fb26f03de32973be665940818"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0fbe966b10e08de78928397f8a08e20df7a60fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0fbe966b10e08de78928397f8a08e20df7a60fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0fbe966b10e08de78928397f8a08e20df7a60fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0fbe966b10e08de78928397f8a08e20df7a60fd/comments", "author": null, "committer": null, "parents": [{"sha": "32f0ffb38040ceae60ee324077080d932cee1529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f0ffb38040ceae60ee324077080d932cee1529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32f0ffb38040ceae60ee324077080d932cee1529"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "df1c794e3ac1d08fb13dec2c0cfd09108b50f5b1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0fbe966b10e08de78928397f8a08e20df7a60fd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0fbe966b10e08de78928397f8a08e20df7a60fd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b0fbe966b10e08de78928397f8a08e20df7a60fd", "patch": "@@ -1,3 +1,10 @@\n+2002-11-25  Tom Tromey  <tromey@redhat.com>\n+\n+\t* verify.cc (type::compatible): Check initialization status\n+\tfirst.\n+\t* interpret.cc (run) [insn_invokespecial, invokespecial_resolved]:\n+\tDon't use NULLCHECK.\n+\n 2002-11-23  Mark Wielaard  <mark@klomp.org>\n \n \t* javax/naming/AuthenticationException.java: Update copyright header."}, {"sha": "bc324b13ba97990778352cdab7b072c3ee765564", "filename": "libjava/interpret.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0fbe966b10e08de78928397f8a08e20df7a60fd/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0fbe966b10e08de78928397f8a08e20df7a60fd/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=b0fbe966b10e08de78928397f8a08e20df7a60fd", "patch": "@@ -2795,7 +2795,10 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args)\n \n \tsp -= rmeth->stack_item_count;\n \n-\tNULLCHECK (sp[0].o);\n+\t// We don't use NULLCHECK here because we can't rely on that\n+\t// working for <init>.  So instead we do an explicit test.\n+\tif (! sp[0].o)\n+\t  throw new java::lang::NullPointerException;\n \n \tfun = (void (*)()) rmeth->method->ncode;\n \n@@ -2813,7 +2816,10 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args)\n       {\n \trmeth = (_Jv_ResolvedMethod *) AVAL ();\n \tsp -= rmeth->stack_item_count;\n-\tNULLCHECK (sp[0].o);\n+\t// We don't use NULLCHECK here because we can't rely on that\n+\t// working for <init>.  So instead we do an explicit test.\n+\tif (! sp[0].o)\n+\t  throw new java::lang::NullPointerException;\n \tfun = (void (*)()) rmeth->method->ncode;\n       }\n       goto perform_invoke;"}, {"sha": "5917ce09c7708800d4cf76c3da6d6a0623a72ddc", "filename": "libjava/verify.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0fbe966b10e08de78928397f8a08e20df7a60fd/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0fbe966b10e08de78928397f8a08e20df7a60fd/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=b0fbe966b10e08de78928397f8a08e20df7a60fd", "patch": "@@ -458,8 +458,12 @@ class _Jv_BytecodeVerifier\n       if (key < reference_type || k.key < reference_type)\n \treturn key == k.key;\n \n+      // An initialized type and an uninitialized type are not\n+      // compatible.\n+      if (isinitialized () != k.isinitialized ())\n+\treturn false;\n+\n       // The `null' type is convertible to any reference type.\n-      // FIXME: is this correct for THIS?\n       if (key == null_type || k.key == null_type)\n \treturn true;\n \n@@ -469,11 +473,6 @@ class _Jv_BytecodeVerifier\n \t  && data.klass == &java::lang::Object::class$)\n \treturn true;\n \n-      // An initialized type and an uninitialized type are not\n-      // compatible.\n-      if (isinitialized () != k.isinitialized ())\n-\treturn false;\n-\n       // Two uninitialized objects are compatible if either:\n       // * The PCs are identical, or\n       // * One PC is UNINIT."}]}