{"sha": "f18be892cbd2d8fb0991c1779dab1120fc4c74b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4YmU4OTJjYmQyZDhmYjA5OTFjMTc3OWRhYjExMjBmYzRjNzRiMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-19T18:10:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-19T18:10:55Z"}, "message": "debug.cc: Make sure all the names are prefixed with double (or single) underscore.\n\n2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* src/debug.cc: Make sure all the names are prefixed with\n\tdouble (or single) underscore.\n\nFrom-SVN: r76163", "tree": {"sha": "b5264ee434931a3fc59035ac49af48b4735bf972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5264ee434931a3fc59035ac49af48b4735bf972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18be892cbd2d8fb0991c1779dab1120fc4c74b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18be892cbd2d8fb0991c1779dab1120fc4c74b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18be892cbd2d8fb0991c1779dab1120fc4c74b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18be892cbd2d8fb0991c1779dab1120fc4c74b1/comments", "author": null, "committer": null, "parents": [{"sha": "605d10f7f2c06334b8259cb59e920b1459454161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605d10f7f2c06334b8259cb59e920b1459454161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605d10f7f2c06334b8259cb59e920b1459454161"}], "stats": {"total": 197, "additions": 101, "deletions": 96}, "files": [{"sha": "d19d62a9b3e3075ec82c24783893304a8412d803", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18be892cbd2d8fb0991c1779dab1120fc4c74b1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18be892cbd2d8fb0991c1779dab1120fc4c74b1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f18be892cbd2d8fb0991c1779dab1120fc4c74b1", "patch": "@@ -1,3 +1,8 @@\n+2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* src/debug.cc: Make sure all the names are prefixed with\n+\tdouble (or single) underscore.\n+\n 2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/debug.cc: Trivial formatting change."}, {"sha": "1d1aee46627892949e109b27d1d2afcffabd55fb", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 96, "deletions": 96, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18be892cbd2d8fb0991c1779dab1120fc4c74b1/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18be892cbd2d8fb0991c1779dab1120fc4c74b1/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=f18be892cbd2d8fb0991c1779dab1120fc4c74b1", "patch": "@@ -1,6 +1,6 @@\n // Debugging mode support code -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -107,57 +107,57 @@ namespace __gnu_debug\n   _Safe_sequence_base::\n   _M_detach_all()\n   {\n-    for (_Safe_iterator_base* iter = _M_iterators; iter; )\n+    for (_Safe_iterator_base* __iter = _M_iterators; __iter; )\n       {\n-\t_Safe_iterator_base* old = iter;\n-\titer = iter->_M_next;\n-\told->_M_attach(0, false);\n+\t_Safe_iterator_base* __old = __iter;\n+\t__iter = __iter->_M_next;\n+\t__old->_M_attach(0, false);\n       }\n     \n-    for (_Safe_iterator_base* iter = _M_const_iterators; iter; )\n+    for (_Safe_iterator_base* __iter = _M_const_iterators; __iter; )\n       {\n-\t_Safe_iterator_base* old = iter;\n-\titer = iter->_M_next;\n-\told->_M_attach(0, true);\n+\t_Safe_iterator_base* __old = __iter;\n+\t__iter = __iter->_M_next;\n+\t__old->_M_attach(0, true);\n       }\n   }\n \n   void \n   _Safe_sequence_base::\n   _M_detach_singular()\n   {\n-    for (_Safe_iterator_base* iter = _M_iterators; iter; )\n+    for (_Safe_iterator_base* __iter = _M_iterators; __iter; )\n       {\n-\t_Safe_iterator_base* old = iter;\n-\titer = iter->_M_next;\n-\tif (old->_M_singular())\n-\t  old->_M_attach(0, false);\n+\t_Safe_iterator_base* __old = __iter;\n+\t__iter = __iter->_M_next;\n+\tif (__old->_M_singular())\n+\t  __old->_M_attach(0, false);\n       }\n \n-    for (_Safe_iterator_base* iter = _M_const_iterators; iter; )\n+    for (_Safe_iterator_base* __iter = _M_const_iterators; __iter; )\n       {\n-\t_Safe_iterator_base* old = iter;\n-\titer = iter->_M_next;\n-\tif (old->_M_singular())\n-\t  old->_M_attach(0, true);\n+\t_Safe_iterator_base* __old = __iter;\n+\t__iter = __iter->_M_next;\n+\tif (__old->_M_singular())\n+\t  __old->_M_attach(0, true);\n       }\n   }\n   \n   void \n   _Safe_sequence_base::\n   _M_revalidate_singular()\n   {\n-    _Safe_iterator_base* iter;\n-    for (iter = _M_iterators; iter; iter = iter->_M_next)\n+    _Safe_iterator_base* __iter;\n+    for (__iter = _M_iterators; __iter; __iter = __iter->_M_next)\n       {\n-\titer->_M_version = _M_version;\n-\titer = iter->_M_next;\n+\t__iter->_M_version = _M_version;\n+\t__iter = __iter->_M_next;\n       }\n     \n-    for (iter = _M_const_iterators; iter; iter = iter->_M_next)\n+    for (__iter = _M_const_iterators; __iter; __iter = __iter->_M_next)\n       {\n-\titer->_M_version = _M_version;\n-\titer = iter->_M_next;\n+\t__iter->_M_version = _M_version;\n+\t__iter = __iter->_M_next;\n       }\n   }\n \n@@ -168,15 +168,15 @@ namespace __gnu_debug\n     swap(_M_iterators, __x._M_iterators);\n     swap(_M_const_iterators, __x._M_const_iterators);\n     swap(_M_version, __x._M_version);\n-    _Safe_iterator_base* iter;\n-    for (iter = _M_iterators; iter; iter = iter->_M_next)\n-      iter->_M_sequence = this;\n-    for (iter = __x._M_iterators; iter; iter = iter->_M_next)\n-      iter->_M_sequence = &__x;\n-    for (iter = _M_const_iterators; iter; iter = iter->_M_next)\n-      iter->_M_sequence = this;\n-    for (iter = __x._M_const_iterators; iter; iter = iter->_M_next)\n-      iter->_M_sequence = &__x;\n+    _Safe_iterator_base* __iter;\n+    for (__iter = _M_iterators; __iter; __iter = __iter->_M_next)\n+      __iter->_M_sequence = this;\n+    for (__iter = __x._M_iterators; __iter; __iter = __iter->_M_next)\n+      __iter->_M_sequence = &__x;\n+    for (__iter = _M_const_iterators; __iter; __iter = __iter->_M_next)\n+      __iter->_M_sequence = this;\n+    for (__iter = __x._M_const_iterators; __iter; __iter = __iter->_M_next)\n+      __iter->_M_sequence = &__x;\n   }\n   \n   void \n@@ -250,8 +250,8 @@ namespace __gnu_debug\n   _M_print_field(const _Error_formatter* __formatter, const char* __name) const\n   {\n     assert(this->_M_kind != _Parameter::__unused_param);\n-    const int bufsize = 64;\n-    char buf[bufsize];\n+    const int __bufsize = 64;\n+    char __buf[__bufsize];\n     \n     if (_M_kind == __iterator)\n       {\n@@ -262,9 +262,9 @@ namespace __gnu_debug\n \t  }\n \telse if (strcmp(__name, \"address\") == 0)\n \t  {\n-\t    __formatter->_M_format_word(buf, bufsize, \"%p\", \n+\t    __formatter->_M_format_word(__buf, __bufsize, \"%p\", \n \t\t\t\t\t_M_variant._M_iterator._M_address);\n-\t    __formatter->_M_print_word(buf);\n+\t    __formatter->_M_print_word(__buf);\n \t  }\n \telse if (strcmp(__name, \"type\") == 0)\n \t  {\n@@ -297,9 +297,9 @@ namespace __gnu_debug\n \telse if (strcmp(__name, \"sequence\") == 0)\n \t  {\n \t    assert(_M_variant._M_iterator._M_sequence);\n-\t    __formatter->_M_format_word(buf, bufsize, \"%p\", \n+\t    __formatter->_M_format_word(__buf, __bufsize, \"%p\", \n \t\t\t\t\t_M_variant._M_iterator._M_sequence);\n-\t    __formatter->_M_print_word(buf);\n+\t    __formatter->_M_print_word(__buf);\n \t  }\n \telse if (strcmp(__name, \"seq_type\") == 0)\n \t  {\n@@ -320,9 +320,9 @@ namespace __gnu_debug\n \telse if (strcmp(__name, \"address\") == 0)\n \t  {\n \t    assert(_M_variant._M_sequence._M_address);\n-\t    __formatter->_M_format_word(buf, bufsize, \"%p\", \n+\t    __formatter->_M_format_word(__buf, __bufsize, \"%p\", \n \t\t\t\t\t_M_variant._M_sequence._M_address);\n-\t    __formatter->_M_print_word(buf);\n+\t    __formatter->_M_print_word(__buf);\n \t  }\n \telse if (strcmp(__name, \"type\") == 0)\n \t  {\n@@ -363,22 +363,22 @@ namespace __gnu_debug\n   _Error_formatter::_Parameter::\n   _M_print_description(const _Error_formatter* __formatter) const\n   {\n-    const int bufsize = 128;\n-    char buf[bufsize];\n+    const int __bufsize = 128;\n+    char __buf[__bufsize];\n     \n     if (_M_kind == __iterator)\n       {\n \t__formatter->_M_print_word(\"iterator \");\n \tif (_M_variant._M_iterator._M_name)\n \t  {\n-\t    __formatter->_M_format_word(buf, bufsize, \"\\\"%s\\\" \", \n+\t    __formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \", \n \t\t\t\t\t_M_variant._M_iterator._M_name);\n-\t    __formatter->_M_print_word(buf);\n+\t    __formatter->_M_print_word(__buf);\n \t  }\n \t\n-\t__formatter->_M_format_word(buf, bufsize, \"@ 0x%p {\\n\", \n+\t__formatter->_M_format_word(__buf, __bufsize, \"@ 0x%p {\\n\", \n \t\t\t\t    _M_variant._M_iterator._M_address);\n-\t__formatter->_M_print_word(buf);\n+\t__formatter->_M_print_word(__buf);\n \tif (_M_variant._M_iterator._M_type)\n \t  {\n \t    __formatter->_M_print_word(\"type = \");\n@@ -410,9 +410,9 @@ namespace __gnu_debug\n \t\t__formatter->_M_print_word(\"' \");\n \t      }\n \t    \n-\t    __formatter->_M_format_word(buf, bufsize, \"@ 0x%p\\n\", \n+\t    __formatter->_M_format_word(__buf, __bufsize, \"@ 0x%p\\n\", \n \t\t\t\t\t_M_variant._M_sequence._M_address);\n-\t    __formatter->_M_print_word(buf);\n+\t    __formatter->_M_print_word(__buf);\n \t  }\n \t__formatter->_M_print_word(\"}\\n\");\n       }\n@@ -421,14 +421,14 @@ namespace __gnu_debug\n \t__formatter->_M_print_word(\"sequence \");\n \tif (_M_variant._M_sequence._M_name)\n \t  {\n-\t    __formatter->_M_format_word(buf, bufsize, \"\\\"%s\\\" \", \n+\t    __formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \", \n \t\t\t\t\t_M_variant._M_sequence._M_name);\n-\t    __formatter->_M_print_word(buf);\n+\t    __formatter->_M_print_word(__buf);\n \t  }\n \t\n-\t__formatter->_M_format_word(buf, bufsize, \"@ 0x%p {\\n\", \n+\t__formatter->_M_format_word(__buf, __bufsize, \"@ 0x%p {\\n\", \n \t\t\t\t    _M_variant._M_sequence._M_address);\n-\t__formatter->_M_print_word(buf);\n+\t__formatter->_M_print_word(__buf);\n \t\n \tif (_M_variant._M_sequence._M_type)\n \t  {\n@@ -447,24 +447,24 @@ namespace __gnu_debug\n   void\n   _Error_formatter::_M_error() const\n   {\n-    const int bufsize = 128;\n-    char buf[bufsize];\n+    const int __bufsize = 128;\n+    char __buf[__bufsize];\n     \n     // Emit file & line number information\n     _M_column = 1;\n     _M_wordwrap = false;\n     if (_M_file)\n       {\n-\t_M_format_word(buf, bufsize, \"%s:\", _M_file);\n-\t_M_print_word(buf);\n-\t_M_column += strlen(buf);\n+\t_M_format_word(__buf, __bufsize, \"%s:\", _M_file);\n+\t_M_print_word(__buf);\n+\t_M_column += strlen(__buf);\n       }\n     \n     if (_M_line > 0)\n       {\n-\t_M_format_word(buf, bufsize, \"%u:\", _M_line);\n-\t_M_print_word(buf);\n-\t_M_column += strlen(buf);\n+\t_M_format_word(__buf, __bufsize, \"%u:\", _M_line);\n+\t_M_print_word(__buf);\n+\t_M_column += strlen(__buf);\n       }\n     \n     _M_wordwrap = true;\n@@ -477,19 +477,19 @@ namespace __gnu_debug\n     \n     // Emit descriptions of the objects involved in the operation\n     _M_wordwrap = false;\n-    bool has_noninteger_parameters = false;\n-    for (unsigned int i = 0; i < _M_num_parameters; ++i)\n+    bool __has_noninteger_parameters = false;\n+    for (unsigned int __i = 0; __i < _M_num_parameters; ++__i)\n       {\n-\tif (_M_parameters[i]._M_kind == _Parameter::__iterator\n-\t    || _M_parameters[i]._M_kind == _Parameter::__sequence)\n+\tif (_M_parameters[__i]._M_kind == _Parameter::__iterator\n+\t    || _M_parameters[__i]._M_kind == _Parameter::__sequence)\n \t  {\n-\t    if (!has_noninteger_parameters)\n+\t    if (!__has_noninteger_parameters)\n \t      {\n \t\t_M_first_line = true;\n \t\t_M_print_word(\"\\nObjects involved in the operation:\\n\");\n-\t\thas_noninteger_parameters = true;\n+\t\t__has_noninteger_parameters = true;\n \t      }\n-\t    _M_parameters[i]._M_print_description(this);\n+\t    _M_parameters[__i]._M_print_description(this);\n \t  }\n       }\n     \n@@ -529,11 +529,11 @@ namespace __gnu_debug\n \t// If this isn't the first line, indent\n \tif (_M_column == 1 && !_M_first_line)\n \t  {\n-\t    char spacing[_M_indent + 1];\n+\t    char __spacing[_M_indent + 1];\n \t    for (int i = 0; i < _M_indent; ++i)\n-\t      spacing[i] = ' ';\n-\t    spacing[_M_indent] = '\\0';\n-\t    fprintf(stderr, \"%s\", spacing);\n+\t      __spacing[i] = ' ';\n+\t    __spacing[_M_indent] = '\\0';\n+\t    fprintf(stderr, \"%s\", __spacing);\n \t    _M_column += _M_indent;\n \t  }\n \t\n@@ -560,8 +560,8 @@ namespace __gnu_debug\n   {\n     const char* __start = __string;\n     const char* __end = __start;\n-    const int bufsize = 128;\n-    char buf[bufsize];\n+    const int __bufsize = 128;\n+    char __buf[__bufsize];\n \n     while (*__start)\n       {\n@@ -573,9 +573,9 @@ namespace __gnu_debug\n \t    if (__start == __end) ++__end;\n \t    if (isspace(*__end)) ++__end;\n \t    \n-\t    assert(__end - __start + 1< bufsize);\n-\t    _M_format_word(buf, __end - __start + 1, \"%s\", __start);\n-\t    _M_print_word(buf);\n+\t    assert(__end - __start + 1< __bufsize);\n+\t    _M_format_word(__buf, __end - __start + 1, \"%s\", __start);\n+\t    _M_print_word(__buf);\n \t    __start = __end;\n \t    \n \t    // Skip extra whitespace\n@@ -596,9 +596,9 @@ namespace __gnu_debug\n \t\n \t// Get the parameter number\n \tassert(*__start >= '1' && *__start <= '9');\n-\tsize_t param = *__start - '0';\n-\t--param;\n-\tassert(param < _M_num_parameters);\n+\tsize_t __param = *__start - '0';\n+\t--__param;\n+\tassert(__param < _M_num_parameters);\n       \n \t// '.' separates the parameter number from the field\n \t// name, if there is one.\n@@ -607,33 +607,33 @@ namespace __gnu_debug\n \t  {\n \t    assert(*__start == ';');\n \t    ++__start;\n-\t    buf[0] = '\\0';\n-\t    if (_M_parameters[param]._M_kind == _Parameter::__integer)\n+\t    __buf[0] = '\\0';\n+\t    if (_M_parameters[__param]._M_kind == _Parameter::__integer)\n \t      {\n-\t\t_M_format_word(buf, bufsize, \"%ld\", \n-\t\t\t       _M_parameters[param]._M_variant._M_integer._M_value);\n-\t\t_M_print_word(buf);\n+\t\t_M_format_word(__buf, __bufsize, \"%ld\", \n+\t\t\t       _M_parameters[__param]._M_variant._M_integer._M_value);\n+\t\t_M_print_word(__buf);\n \t      }\n-\t    else if (_M_parameters[param]._M_kind == _Parameter::__string)\n-\t      _M_print_string(_M_parameters[param]._M_variant._M_string._M_value);\n+\t    else if (_M_parameters[__param]._M_kind == _Parameter::__string)\n+\t      _M_print_string(_M_parameters[__param]._M_variant._M_string._M_value);\n \t    continue;\n \t  }\n \t\n \t// Extract the field name we want\n-\tenum { max_field_len = 16 };\n-\tchar field[max_field_len];\n-\tint field_idx = 0;\n+\tenum { __max_field_len = 16 };\n+\tchar __field[__max_field_len];\n+\tint __field_idx = 0;\n \t++__start;\n \twhile (*__start != ';')\n \t  {\n \t    assert(*__start);\n-\t    assert(field_idx < max_field_len-1);\n-\t    field[field_idx++] = *__start++;\n+\t    assert(__field_idx < __max_field_len-1);\n+\t    __field[__field_idx++] = *__start++;\n \t  }\n \t++__start;\n-\tfield[field_idx] = 0;\n+\t__field[__field_idx] = 0;\n \t\n-\t_M_parameters[param]._M_print_field(this, field);\t\t  \n+\t_M_parameters[__param]._M_print_field(this, __field);\t\t  \n       }\n   }\n "}]}