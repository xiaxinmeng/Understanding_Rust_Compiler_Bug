{"sha": "b3aefde2131ab8147d9cad974b24798b1b0a5d91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNhZWZkZTIxMzFhYjgxNDdkOWNhZDk3NGIyNDc5OGIxYjBhNWQ5MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-03-17T09:53:40Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-03-17T09:53:40Z"}, "message": "re PR fortran/43331 (Cray pointers generate bogus IL for the middle-end)\n\n2010-03-17  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43331\n        * trans-array.c (gfc_conv_array_index_offset,gfc_conv_array_ref,\n        gfc_conv_ss_startstride): Remove no-longer-needed cp_was_assumed\n        check.\n        * decl.c (gfc_match_derived_decl): Don't mark assumed-size Cray\n        pointees as having explizit size.\n        * expr.c (gfc_check_assign): Remove now unreachable Cray pointee\n        check.\n        * trans-types.c (gfc_is_nodesc_array): Add cp_was_assumed to\n        * assert.\n        (gfc_sym_type): Don't mark Cray pointees as restricted pointers.\n        * resolve.c (resolve_symbol): Handle cp_was_assumed.\n        * trans-decl.c (gfc_trans_deferred_vars): Ditto.\n        (gfc_finish_var_decl): Don't mark Cray pointees as restricted\n        pointers.\n\n2010-03-17  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43331\n        * gfortran.dg/cray_pointers_1.f90: Update dg-error message.\n\nFrom-SVN: r157512", "tree": {"sha": "978b2f56225a8d013d78445f9deae7c75e80ae5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978b2f56225a8d013d78445f9deae7c75e80ae5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3aefde2131ab8147d9cad974b24798b1b0a5d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3aefde2131ab8147d9cad974b24798b1b0a5d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3aefde2131ab8147d9cad974b24798b1b0a5d91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3aefde2131ab8147d9cad974b24798b1b0a5d91/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e33c42db5d391a77a9178f3d150153ebc50229a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33c42db5d391a77a9178f3d150153ebc50229a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33c42db5d391a77a9178f3d150153ebc50229a8"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "e445a6a7577d88988d92c7baa04b433ceab8357c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -1,3 +1,20 @@\n+2010-03-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43331\n+\t* trans-array.c (gfc_conv_array_index_offset,gfc_conv_array_ref,\n+\tgfc_conv_ss_startstride): Remove no-longer-needed cp_was_assumed\n+\tcheck.\n+\t* decl.c (gfc_match_derived_decl): Don't mark assumed-size Cray\n+\tpointees as having explizit size.\n+\t* expr.c (gfc_check_assign): Remove now unreachable Cray pointee\n+\tcheck.\n+\t* trans-types.c (gfc_is_nodesc_array): Add cp_was_assumed to assert.\n+\t(gfc_sym_type): Don't mark Cray pointees as restricted pointers.\n+\t* resolve.c (resolve_symbol): Handle cp_was_assumed.\n+\t* trans-decl.c (gfc_trans_deferred_vars): Ditto.\n+\t(gfc_finish_var_decl): Don't mark Cray pointees as restricted\n+\tpointers.\n+\n 2010-03-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43362"}, {"sha": "692078a11d4f3f3f703c59d75e71fe3d50c10d2e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -6969,22 +6969,14 @@ gfc_match_derived_decl (void)\n \n \n /* Cray Pointees can be declared as: \n-      pointer (ipt, a (n,m,...,*)) \n-   By default, this is treated as an AS_ASSUMED_SIZE array.  We'll\n-   cheat and set a constant bound of 1 for the last dimension, if this\n-   is the case. Since there is no bounds-checking for Cray Pointees,\n-   this will be okay.  */\n+      pointer (ipt, a (n,m,...,*))  */\n \n match\n gfc_mod_pointee_as (gfc_array_spec *as)\n {\n   as->cray_pointee = true; /* This will be useful to know later.  */\n   if (as->type == AS_ASSUMED_SIZE)\n-    {\n-      as->type = AS_EXPLICIT;\n-      as->upper[as->rank - 1] = gfc_int_expr (1);\n-      as->cp_was_assumed = true;\n-    }\n+    as->cp_was_assumed = true;\n   else if (as->type == AS_ASSUMED_SHAPE)\n     {\n       gfc_error (\"Cray Pointee at %C cannot be assumed shape array\");"}, {"sha": "58c906375eac5c9ca8fc1685f585a7c166cabfa7", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -3010,16 +3010,6 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n \t}\n     }\n \n-   if (sym->attr.cray_pointee\n-       && lvalue->ref != NULL\n-       && lvalue->ref->u.ar.type == AR_FULL\n-       && lvalue->ref->u.ar.as->cp_was_assumed)\n-     {\n-       gfc_error (\"Vector assignment to assumed-size Cray Pointee at %L \"\n-\t\t  \"is illegal\", &lvalue->where);\n-       return FAILURE;\n-     }\n-\n   /* This is possibly a typo: x = f() instead of x => f().  */\n   if (gfc_option.warn_surprising \n       && rvalue->expr_type == EXPR_FUNCTION"}, {"sha": "de316da840ddcc6fd482acb5aee21dee4bf3e5d5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -11010,7 +11010,7 @@ resolve_symbol (gfc_symbol *sym)\n      arguments.  */\n \n   if (sym->as != NULL\n-      && (sym->as->type == AS_ASSUMED_SIZE\n+      && ((sym->as->type == AS_ASSUMED_SIZE && !sym->as->cp_was_assumed)\n \t  || sym->as->type == AS_ASSUMED_SHAPE)\n       && sym->attr.dummy == 0)\n     {"}, {"sha": "5eeead831c463bb51a83919d6577bad3c6c0ef07", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -2404,8 +2404,8 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \n \t  index = gfc_trans_array_bound_check (se, info->descriptor,\n \t\t\tindex, dim, &ar->where,\n-\t\t\t(ar->as->type != AS_ASSUMED_SIZE\n-\t\t\t && !ar->as->cp_was_assumed) || dim < ar->dimen - 1);\n+\t\t\tar->as->type != AS_ASSUMED_SIZE\n+\t\t\t|| dim < ar->dimen - 1);\n \t  break;\n \n \tcase DIMEN_VECTOR:\n@@ -2431,8 +2431,8 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \t  /* Do any bounds checking on the final info->descriptor index.  */\n \t  index = gfc_trans_array_bound_check (se, info->descriptor,\n \t\t\tindex, dim, &ar->where,\n-\t\t\t(ar->as->type != AS_ASSUMED_SIZE\n-\t\t\t && !ar->as->cp_was_assumed) || dim < ar->dimen - 1);\n+\t\t\tar->as->type != AS_ASSUMED_SIZE\n+\t\t\t|| dim < ar->dimen - 1);\n \t  break;\n \n \tcase DIMEN_RANGE:\n@@ -2581,8 +2581,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \n \t  /* Upper bound, but not for the last dimension of assumed-size\n \t     arrays.  */\n-\t  if (n < ar->dimen - 1\n-\t      || (ar->as->type != AS_ASSUMED_SIZE && !ar->as->cp_was_assumed))\n+\t  if (n < ar->dimen - 1 || ar->as->type != AS_ASSUMED_SIZE)\n \t    {\n \t      tmp = gfc_conv_array_ubound (se->expr, n);\n \t      if (sym->attr.temporary)\n@@ -3207,8 +3206,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\tcontinue;\n \n \t      if (dim == info->ref->u.ar.dimen - 1\n-\t\t  && (info->ref->u.ar.as->type == AS_ASSUMED_SIZE\n-\t\t      || info->ref->u.ar.as->cp_was_assumed))\n+\t\t  && info->ref->u.ar.as->type == AS_ASSUMED_SIZE)\n \t\tcheck_upper = false;\n \t      else\n \t\tcheck_upper = true;"}, {"sha": "6f5f7796da8a318b24f872dfc07113bd955d39a7", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -598,6 +598,7 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n \n   if (!sym->attr.target\n       && !sym->attr.pointer\n+      && !sym->attr.cray_pointee\n       && !sym->attr.proc_pointer)\n     DECL_RESTRICTED_P (decl) = 1;\n }\n@@ -3159,10 +3160,11 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \n \t    case AS_ASSUMED_SIZE:\n \t      /* Must be a dummy parameter.  */\n-\t      gcc_assert (sym->attr.dummy);\n+\t      gcc_assert (sym->attr.dummy || sym->as->cp_was_assumed);\n \n \t      /* We should always pass assumed size arrays the g77 way.  */\n-\t      fnbody = gfc_trans_g77_array (sym, fnbody);\n+\t      if (sym->attr.dummy)\n+\t\tfnbody = gfc_trans_g77_array (sym, fnbody);\n               break;\n \n \t    case AS_ASSUMED_SHAPE:"}, {"sha": "ebe4c2f832bfce5023857d034990dde19bb4586c", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -1193,7 +1193,7 @@ gfc_is_nodesc_array (gfc_symbol * sym)\n   if (sym->attr.result || sym->attr.function)\n     return 0;\n \n-  gcc_assert (sym->as->type == AS_EXPLICIT);\n+  gcc_assert (sym->as->type == AS_EXPLICIT || sym->as->cp_was_assumed);\n \n   return 1;\n }\n@@ -1775,7 +1775,7 @@ gfc_sym_type (gfc_symbol * sym)\n     byref = 0;\n \n   restricted = !sym->attr.target && !sym->attr.pointer\n-               && !sym->attr.proc_pointer;\n+               && !sym->attr.proc_pointer && !sym->attr.cray_pointee;\n   if (sym->attr.dimension)\n     {\n       if (gfc_is_nodesc_array (sym))"}, {"sha": "bd2b05e5bc603e5fea2deb67f3578885e0fa5728", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -1,3 +1,8 @@\n+2010-03-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43331\n+\t* gfortran.dg/cray_pointers_1.f90: Update dg-error message.\n+\n 2010-03-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/graphite/block-3.c: Add dg-timeout-factor."}, {"sha": "87ace6848bdabe151a923b05a9761ee212d3862a", "filename": "gcc/testsuite/gfortran.dg/cray_pointers_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3aefde2131ab8147d9cad974b24798b1b0a5d91/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_1.f90?ref=b3aefde2131ab8147d9cad974b24798b1b0a5d91", "patch": "@@ -21,7 +21,7 @@ subroutine err3\n   real array(*)\n   pointer (ipt, array)\n   ipt = loc (target)\n-  array = 0    ! { dg-error \"Vector assignment\" }\n+  array = 0    ! { dg-error \"upper bound in the last dimension\" }\n end subroutine err3\n \n subroutine err4"}]}