{"sha": "f886644bd4bad83fe0f6aa8682fb1c33247a1244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4NjY0NGJkNGJhZDgzZmUwZjZhYTg2ODJmYjFjMzMyNDdhMTI0NA==", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2019-06-17T19:39:01Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2020-05-05T17:42:56Z"}, "message": "PRU: Simplify machine description\n\nUse the new @insn syntax for simpler gen_* invocation.\n\ngcc/ChangeLog:\n\n2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n\n\t* config/pru/pru.c (pru_emit_doloop): Use new gen_doloop_end_internal\n\tand gen_doloop_begin_internal.\n\t(pru_reorg_loop): Use gen_pruloop with mode.\n\t* config/pru/pru.md: Use new @insn syntax.\n\nSigned-off-by: Dimitar Dimitrov <dimitar@dinux.eu>", "tree": {"sha": "64562b1da4d9c652c33404c8e9e1625ac2920e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64562b1da4d9c652c33404c8e9e1625ac2920e93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f886644bd4bad83fe0f6aa8682fb1c33247a1244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f886644bd4bad83fe0f6aa8682fb1c33247a1244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f886644bd4bad83fe0f6aa8682fb1c33247a1244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f886644bd4bad83fe0f6aa8682fb1c33247a1244/comments", "author": null, "committer": null, "parents": [{"sha": "3d1ca857784315920338fee4659707a34c283bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1ca857784315920338fee4659707a34c283bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d1ca857784315920338fee4659707a34c283bcb"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "6701bf168e0e04446bd5ae9ba85861cc99d9ace3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886644bd4bad83fe0f6aa8682fb1c33247a1244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886644bd4bad83fe0f6aa8682fb1c33247a1244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f886644bd4bad83fe0f6aa8682fb1c33247a1244", "patch": "@@ -1,3 +1,10 @@\n+2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* config/pru/pru.c (pru_emit_doloop): Use new gen_doloop_end_internal\n+\tand gen_doloop_begin_internal.\n+\t(pru_reorg_loop): Use gen_pruloop with mode.\n+\t* config/pru/pru.md: Use new @insn syntax.\n+\n 2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* config/pru/pru.c (pru_print_operand): Fix fall through comment."}, {"sha": "45b18ed6fe4b99ebfb72c73b0a5a83651f79d078", "filename": "gcc/config/pru/pru.c", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886644bd4bad83fe0f6aa8682fb1c33247a1244/gcc%2Fconfig%2Fpru%2Fpru.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886644bd4bad83fe0f6aa8682fb1c33247a1244/gcc%2Fconfig%2Fpru%2Fpru.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.c?ref=f886644bd4bad83fe0f6aa8682fb1c33247a1244", "patch": "@@ -2345,26 +2345,14 @@ pru_emit_doloop (rtx *operands, int is_end)\n \n   tag = GEN_INT (cfun->machine->doloop_tags - 1);\n   machine_mode opmode = GET_MODE (operands[0]);\n+  gcc_assert (opmode == HImode || opmode == SImode);\n+\n   if (is_end)\n-    {\n-      if (opmode == HImode)\n-\temit_jump_insn (gen_doloop_end_internalhi (operands[0],\n-\t\t\t\t\t\t   operands[1], tag));\n-      else if (opmode == SImode)\n-\temit_jump_insn (gen_doloop_end_internalsi (operands[0],\n-\t\t\t\t\t\t   operands[1], tag));\n-      else\n-\tgcc_unreachable ();\n-    }\n+    emit_jump_insn (gen_doloop_end_internal (opmode, operands[0],\n+\t\t\t\t\t     operands[1], tag));\n   else\n-    {\n-      if (opmode == HImode)\n-\temit_insn (gen_doloop_begin_internalhi (operands[0], operands[0], tag));\n-      else if (opmode == SImode)\n-\temit_insn (gen_doloop_begin_internalsi (operands[0], operands[0], tag));\n-      else\n-\tgcc_unreachable ();\n-    }\n+    emit_insn (gen_doloop_begin_internal (opmode, operands[0],\n+\t\t\t\t\t  operands[0], tag));\n }\n \n \n@@ -2607,6 +2595,7 @@ pru_reorg_loop (rtx_insn *insns)\n \t/* Case (1) or (2).  */\n \trtx_code_label *repeat_label;\n \trtx label_ref;\n+\trtx loop_rtx;\n \n \t/* Create a new label for the repeat insn.  */\n \trepeat_label = gen_label_rtx ();\n@@ -2616,23 +2605,16 @@ pru_reorg_loop (rtx_insn *insns)\n \t   will utilize an internal for the PRU core LOOP register.  */\n \tlabel_ref = gen_rtx_LABEL_REF (VOIDmode, repeat_label);\n \tmachine_mode loop_mode = GET_MODE (loop->begin->loop_count);\n-\tif (loop_mode == HImode)\n-\t  emit_insn_before (gen_pruloophi (loop->begin->loop_count, label_ref),\n-\t\t\t    loop->begin->insn);\n-\telse if (loop_mode == SImode)\n-\t  {\n-\t    rtx loop_rtx = gen_pruloopsi (loop->begin->loop_count, label_ref);\n-\t    emit_insn_before (loop_rtx, loop->begin->insn);\n-\t  }\n-\telse if (loop_mode == VOIDmode)\n+\tif (loop_mode == VOIDmode)\n \t  {\n \t    gcc_assert (CONST_INT_P (loop->begin->loop_count));\n \t    gcc_assert (UBYTE_INT ( INTVAL (loop->begin->loop_count)));\n-\t    rtx loop_rtx = gen_pruloopsi (loop->begin->loop_count, label_ref);\n-\t    emit_insn_before (loop_rtx, loop->begin->insn);\n+\t    loop_mode = SImode;\n \t  }\n-\telse\n-\t  gcc_unreachable ();\n+\tgcc_assert (loop_mode == HImode || loop_mode == SImode);\n+\tloop_rtx = gen_pruloop (loop_mode, loop->begin->loop_count, label_ref);\n+\temit_insn_before (loop_rtx, loop->begin->insn);\n+\n \tdelete_insn (loop->begin->insn);\n \n \t/* Insert the repeat label before the first doloop_end."}, {"sha": "2f1bc21f025af7642e1680ab47a8783727330eba", "filename": "gcc/config/pru/pru.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886644bd4bad83fe0f6aa8682fb1c33247a1244/gcc%2Fconfig%2Fpru%2Fpru.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886644bd4bad83fe0f6aa8682fb1c33247a1244/gcc%2Fconfig%2Fpru%2Fpru.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.md?ref=f886644bd4bad83fe0f6aa8682fb1c33247a1244", "patch": "@@ -887,7 +887,7 @@\n ;; This insn is volatile because we'd like it to stay in its original\n ;; position, just before the loop header.  If it stays there, we might\n ;; be able to convert it into a \"loop\" insn.\n-(define_insn \"doloop_begin_internal<mode>\"\n+(define_insn \"@doloop_begin_internal<mode>\"\n   [(set (match_operand:HISI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:HISI\n \t [(match_operand:HISI 1 \"reg_or_ubyte_operand\" \"rI\")\n@@ -909,7 +909,7 @@\n ; Note: \"JUMP_INSNs and CALL_INSNs are not allowed to have any output\n ; reloads;\".  Hence this insn must be prepared for a counter that is\n ; not a register.\n-(define_insn \"doloop_end_internal<mode>\"\n+(define_insn \"@doloop_end_internal<mode>\"\n   [(set (pc)\n \t(if_then_else (ne (match_operand:HISI 0 \"nonimmediate_operand\" \"+r,*m\")\n \t\t\t  (const_int 1))\n@@ -951,7 +951,7 @@\n   DONE;\n })\n \n-(define_insn \"pruloop<mode>\"\n+(define_insn \"@pruloop<mode>\"\n   [(set (reg:HISI LOOPCNTR_REGNUM)\n \t(unspec:HISI [(match_operand:HISI 0 \"reg_or_ubyte_operand\" \"rI\")\n \t\t    (label_ref (match_operand 1))]"}]}