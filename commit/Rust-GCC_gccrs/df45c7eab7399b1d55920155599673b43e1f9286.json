{"sha": "df45c7eab7399b1d55920155599673b43e1f9286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY0NWM3ZWFiNzM5OWIxZDU1OTIwMTU1NTk5NjczYjQzZTFmOTI4Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-02T07:21:47Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-02T07:21:47Z"}, "message": "alpha.c (alpha_cpu_name, [...]): Add the `const' keyword.\n\n        * alpha.c (alpha_cpu_name, alpha_cpu_string, alpha_tp_string,\n        alpha_fprm_string, alpha_fptm_string, alpha_mlat_string,\n        current_function_file): Add the `const' keyword.\n        (normal_memory_operand): Mark parameter `mode' with\n        ATTRIBUTE_UNUSED.\n        (alpha_expand_unaligned_load): Add a default case to a switch.\n        * alpha.h (alpha_cpu_string, alpha_fprm_string, alpha_fptm_string,\n        alpha_tp_string, alpha_mlat_string): Add the `const' keyword.\n        (normal_memory_operand): Add prototype.\n        * alpha.md: Cast an expression to `unsigned HOST_WIDE_INT' when\n        comparing against one.\n\nFrom-SVN: r25532", "tree": {"sha": "6e6c5cd87984a8a287fbc400726ee864e698334c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e6c5cd87984a8a287fbc400726ee864e698334c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df45c7eab7399b1d55920155599673b43e1f9286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df45c7eab7399b1d55920155599673b43e1f9286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df45c7eab7399b1d55920155599673b43e1f9286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df45c7eab7399b1d55920155599673b43e1f9286/comments", "author": null, "committer": null, "parents": [{"sha": "e2fe6abaf268001a639992d5c46bf384a936a8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fe6abaf268001a639992d5c46bf384a936a8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2fe6abaf268001a639992d5c46bf384a936a8c0"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "86d209ff1685fca7e87f67d1a57d212abe6c0c34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df45c7eab7399b1d55920155599673b43e1f9286", "patch": "@@ -1,3 +1,19 @@\n+Tue Mar  2 10:12:48 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha.c (alpha_cpu_name, alpha_cpu_string, alpha_tp_string,\n+ \talpha_fprm_string, alpha_fptm_string, alpha_mlat_string,\n+\tcurrent_function_file): Add the `const' keyword.\n+\t(normal_memory_operand): Mark parameter `mode' with\n+\tATTRIBUTE_UNUSED.\n+\t(alpha_expand_unaligned_load): Add a default case to a switch.\n+\n+\t* alpha.h (alpha_cpu_string, alpha_fprm_string, alpha_fptm_string,\n+\talpha_tp_string, alpha_mlat_string): Add the `const' keyword.\n+\t(normal_memory_operand): Add prototype.\n+\t\n+\t* alpha.md: Cast an expression to `unsigned HOST_WIDE_INT' when\n+ \tcomparing against one.\n+\n Tue Mar  2 10:00:21 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* mips.c (abort_with_insn): Make function static, add a prototype,"}, {"sha": "c833e11a9f4223a5e6254b50a1598549e9d69693", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=df45c7eab7399b1d55920155599673b43e1f9286", "patch": "@@ -49,7 +49,7 @@ extern int rtx_equal_function_value_matters;\n /* Specify which cpu to schedule for. */\n \n enum processor_type alpha_cpu;\n-static char* const alpha_cpu_name[] = \n+static const char * const alpha_cpu_name[] = \n {\n   \"ev4\", \"ev5\", \"ev6\"\n };\n@@ -68,11 +68,11 @@ enum alpha_fp_trap_mode alpha_fptm;\n \n /* Strings decoded into the above options.  */\n \n-char *alpha_cpu_string;\t\t/* -mcpu= */\n-char *alpha_tp_string;\t\t/* -mtrap-precision=[p|s|i] */\n-char *alpha_fprm_string;\t/* -mfp-rounding-mode=[n|m|c|d] */\n-char *alpha_fptm_string;\t/* -mfp-trap-mode=[n|u|su|sui] */\n-char *alpha_mlat_string;\t/* -mmemory-latency= */\n+const char *alpha_cpu_string;\t/* -mcpu= */\n+const char *alpha_tp_string;\t/* -mtrap-precision=[p|s|i] */\n+const char *alpha_fprm_string;\t/* -mfp-rounding-mode=[n|m|c|d] */\n+const char *alpha_fptm_string;\t/* -mfp-trap-mode=[n|u|su|sui] */\n+const char *alpha_mlat_string;\t/* -mmemory-latency= */\n \n /* Save information from a \"cmpxx\" operation until the branch or scc is\n    emitted.  */\n@@ -856,7 +856,7 @@ reg_not_elim_operand (op, mode)\n int\n normal_memory_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (reload_in_progress && GET_CODE (op) == REG\n       && REGNO (op) >= FIRST_PSEUDO_REGISTER)\n@@ -1576,6 +1576,8 @@ alpha_expand_unaligned_load (tgt, mem, size, ofs, sign)\n \t  emit_insn (gen_extqh (exth, memh, addr));\n \t  mode = DImode;\n \t  break;\n+\tdefault:\n+\t  abort();\n \t}\n \n       addr = expand_binop (mode, ior_optab, gen_lowpart (mode, extl),\n@@ -3958,7 +3960,7 @@ static int num_source_filenames = 0;\n \n /* Name of the file containing the current function.  */\n \n-static char *current_function_file = \"\";\n+static const char *current_function_file = \"\";\n \n /* Offsets to alpha virtual arg/local debugging pointers.  */\n "}, {"sha": "f5ab13bb1a644003cc309149fae008e85ceeb19f", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=df45c7eab7399b1d55920155599673b43e1f9286", "patch": "@@ -233,11 +233,11 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n \textern char *m88k_short_data;\n \t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n \n-extern char *alpha_cpu_string;  /* For -mcpu= */\n-extern char *alpha_fprm_string;\t/* For -mfp-rounding-mode=[n|m|c|d] */\n-extern char *alpha_fptm_string;\t/* For -mfp-trap-mode=[n|u|su|sui]  */\n-extern char *alpha_tp_string;\t/* For -mtrap-precision=[p|f|i] */\n-extern char *alpha_mlat_string;\t/* For -mmemory-latency= */\n+extern const char *alpha_cpu_string;\t/* For -mcpu= */\n+extern const char *alpha_fprm_string;\t/* For -mfp-rounding-mode=[n|m|c|d] */\n+extern const char *alpha_fptm_string;\t/* For -mfp-trap-mode=[n|u|su|sui]  */\n+extern const char *alpha_tp_string;\t/* For -mtrap-precision=[p|f|i] */\n+extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n \n #define TARGET_OPTIONS\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n@@ -783,6 +783,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    : (C) == 'S' ? (GET_CODE (OP) == CONST_INT\t\t\t\t\\\n \t\t   && (unsigned HOST_WIDE_INT) INTVAL (OP) < 64)\t\\\n    : 0)\n+extern int normal_memory_operand ();\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use."}, {"sha": "82c108958c2f19c35ccfbbadde6dcd80f7579b38", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df45c7eab7399b1d55920155599673b43e1f9286/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=df45c7eab7399b1d55920155599673b43e1f9286", "patch": "@@ -1691,22 +1691,22 @@\n   \"HOST_BITS_PER_WIDE_INT == 64\n    && GET_CODE (operands[3]) == CONST_INT\n    && (((unsigned HOST_WIDE_INT) 0xff << INTVAL (operands[2])\n-        == INTVAL (operands[3]))\n+        == (unsigned HOST_WIDE_INT) INTVAL (operands[3]))\n        || ((unsigned HOST_WIDE_INT) 0xffff << INTVAL (operands[2])\n-        == INTVAL (operands[3]))\n+        == (unsigned HOST_WIDE_INT) INTVAL (operands[3]))\n        || ((unsigned HOST_WIDE_INT) 0xffffffff << INTVAL (operands[2])\n-        == INTVAL (operands[3])))\"\n+        == (unsigned HOST_WIDE_INT) INTVAL (operands[3])))\"\n   \"*\n {\n #if HOST_BITS_PER_WIDE_INT == 64\n   if ((unsigned HOST_WIDE_INT) 0xff << INTVAL (operands[2])\n-      == INTVAL (operands[3]))\n+      == (unsigned HOST_WIDE_INT) INTVAL (operands[3]))\n     return \\\"insbl %1,%s2,%0\\\";\n   if ((unsigned HOST_WIDE_INT) 0xffff << INTVAL (operands[2])\n-      == INTVAL (operands[3]))\n+      == (unsigned HOST_WIDE_INT) INTVAL (operands[3]))\n     return \\\"inswl %1,%s2,%0\\\";\n   if ((unsigned HOST_WIDE_INT) 0xffffffff << INTVAL (operands[2])\n-      == INTVAL (operands[3]))\n+      == (unsigned HOST_WIDE_INT) INTVAL (operands[3]))\n     return \\\"insll %1,%s2,%0\\\";\n #endif\n   abort();"}]}