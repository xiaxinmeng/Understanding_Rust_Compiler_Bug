{"sha": "5505f548bb1e7140e23b3db245fe28c747fb1b77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUwNWY1NDhiYjFlNzE0MGUyM2IzZGIyNDVmZTI4Yzc0N2ZiMWI3Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-12T19:24:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-12T19:24:13Z"}, "message": "m68k-protos.h: New file.\n\n        * m68k-protos.h: New file.\n\n        * m68k.c: Include tm_p.h.  Add static prototypes.  Fix compile\n        time warnings.\n\n        * m68k.h: Move prototypes to m68k-protos.h.  Fix compile time warnings.\n\n        * mot3300.h: Likewise.\n\nFrom-SVN: r31358", "tree": {"sha": "2331c93b14c00e1ee8450188f15efd5e28c44377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2331c93b14c00e1ee8450188f15efd5e28c44377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5505f548bb1e7140e23b3db245fe28c747fb1b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5505f548bb1e7140e23b3db245fe28c747fb1b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5505f548bb1e7140e23b3db245fe28c747fb1b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5505f548bb1e7140e23b3db245fe28c747fb1b77/comments", "author": null, "committer": null, "parents": [{"sha": "394c46fe47e9d597c84387c41dfe27c5aa75fbca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394c46fe47e9d597c84387c41dfe27c5aa75fbca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394c46fe47e9d597c84387c41dfe27c5aa75fbca"}], "stats": {"total": 187, "additions": 114, "deletions": 73}, "files": [{"sha": "ce2fed003e25e5ed4520b7fa6e194e48ccf92c21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5505f548bb1e7140e23b3db245fe28c747fb1b77", "patch": "@@ -1,3 +1,14 @@\n+2000-01-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* m68k-protos.h: New file.\n+\n+\t* m68k.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* m68k.h: Move prototypes to m68k-protos.h.  Fix compile time warnings.\n+\t\n+\t* mot3300.h: Likewise.\n+\n 2000-01-12  Richard Earnshaw <rearnsha@arm.com>\n \n \t* haifa-sched.c (split_edges): Pass edgeset_size as second arg to"}, {"sha": "a31dc41996d6a264f3dc774431d67baf22ef989a", "filename": "gcc/config/m68k/m68k-protos.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=5505f548bb1e7140e23b3db245fe28c747fb1b77", "patch": "@@ -0,0 +1,69 @@\n+/* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Define functions defined in aux-output.c and used in templates.  */\n+\n+#ifdef RTX_CODE\n+extern const char *output_move_const_into_data_reg PARAMS ((rtx *));\n+extern const char *output_move_simode_const PARAMS ((rtx *));\n+extern const char *output_move_simode PARAMS ((rtx *));\n+extern const char *output_move_himode PARAMS ((rtx *));\n+extern const char *output_move_qimode PARAMS ((rtx *));\n+extern const char *output_move_stricthi PARAMS ((rtx *));\n+extern const char *output_move_strictqi PARAMS ((rtx *));\n+extern const char *output_move_double PARAMS ((rtx *));\n+extern const char *output_move_const_single PARAMS ((rtx *));\n+extern const char *output_move_const_double PARAMS ((rtx *));\n+extern const char *output_btst PARAMS ((rtx *, rtx, rtx, rtx, int));\n+extern const char *output_scc_di PARAMS ((rtx, rtx, rtx, rtx));\n+extern const char *output_addsi3 PARAMS ((rtx *));\n+extern const char *output_andsi3 PARAMS ((rtx *));\n+extern const char *output_iorsi3 PARAMS ((rtx *));\n+extern const char *output_xorsi3 PARAMS ((rtx *));\n+extern void output_dbcc_and_branch PARAMS ((rtx *));\n+extern int const_uint32_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_sint32_operand PARAMS ((rtx, enum machine_mode));\n+extern int floating_exact_log2 PARAMS ((rtx));\n+extern int not_sp_operand PARAMS ((rtx, enum machine_mode));\n+extern int valid_dbcc_comparison_p PARAMS ((rtx, enum machine_mode));\n+extern int extend_operator PARAMS ((rtx, enum machine_mode));\n+extern int strict_low_part_peephole_ok PARAMS ((enum machine_mode, rtx, rtx));\n+\n+/* Functions from m68k.c used in macros.  */\n+extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_int_cost PARAMS ((rtx));\n+extern int standard_68881_constant_p PARAMS ((rtx));\n+extern int standard_sun_fpa_constant_p PARAMS ((rtx));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void notice_update_cc PARAMS ((rtx, rtx));\n+//extern void finalize_pic PARAMS ((rtx, enum machine_mode));\n+extern int general_src_operand PARAMS ((rtx, enum machine_mode));\n+extern int nonimmediate_src_operand PARAMS ((rtx, enum machine_mode));\n+extern int memory_src_operand PARAMS ((rtx, enum machine_mode));\n+extern int pcrel_address PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+extern int flags_in_68881 PARAMS ((void));\n+extern void output_function_prologue PARAMS ((FILE *, int));\n+extern void output_function_epilogue PARAMS ((FILE *, int));\n+extern int use_return_insn PARAMS ((void));\n+extern void override_options PARAMS ((void));\n+extern void init_68881_table PARAMS ((void));"}, {"sha": "7854a828340abde7cbabfdb470ec349f5c938f8f", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=5505f548bb1e7140e23b3db245fe28c747fb1b77", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Motorola 68000 family.\n-   Copyright (C) 1987, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 93-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"recog.h\"\n #include \"toplev.h\"\n+#include \"tm_p.h\"\n \n /* Needed for use_return_insn.  */\n #include \"flags.h\"\n@@ -51,9 +52,9 @@ enum reg_class regno_reg_class[]\n    if SGS_SWITCH_TABLE.  */\n int switch_table_difference_label_flag;\n \n-static rtx find_addr_reg ();\n-rtx legitimize_pic_address ();\n-void print_operand_address ();\n+static rtx find_addr_reg PARAMS ((rtx));\n+rtx legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n+static const char *singlemove_string PARAMS ((rtx *));\n \f\n \n /* Alignment to use for loops and jumps */\n@@ -1030,7 +1031,7 @@ output_dbcc_and_branch (operands)\n     }\n }\n \n-char *\n+const char *\n output_scc_di(op, operand1, operand2, dest)\n      rtx op;\n      rtx operand1;\n@@ -1217,7 +1218,7 @@ output_scc_di(op, operand1, operand2, dest)\n   return \"\";\n }\n \n-char *\n+const char *\n output_btst (operands, countop, dataop, insn, signpos)\n      rtx *operands;\n      rtx countop, dataop;\n@@ -1404,9 +1405,11 @@ legitimize_pic_address (orig, mode, reg)\n \f\n typedef enum { MOVL, SWAP, NEGW, NOTW, NOTB, MOVQ } CONST_METHOD;\n \n+static CONST_METHOD const_method PARAMS ((rtx));\n+\n #define USE_MOVQ(i)\t((unsigned)((i) + 128) <= 255)\n \n-CONST_METHOD\n+static CONST_METHOD\n const_method (constant)\n      rtx constant;\n {\n@@ -1462,7 +1465,7 @@ const_int_cost (constant)\n     }\n }\n \n-char *\n+const char *\n output_move_const_into_data_reg (operands)\n      rtx *operands;\n {\n@@ -1515,7 +1518,7 @@ output_move_const_into_data_reg (operands)\n     }\n }\n \n-char *\n+const char *\n output_move_simode_const (operands)\n      rtx *operands;\n {\n@@ -1546,7 +1549,7 @@ output_move_simode_const (operands)\n   return \"move%.l %1,%0\";\n }\n \n-char *\n+const char *\n output_move_simode (operands)\n      rtx *operands;\n {\n@@ -1563,7 +1566,7 @@ output_move_simode (operands)\n   return \"move%.l %1,%0\";\n }\n \n-char *\n+const char *\n output_move_himode (operands)\n      rtx *operands;\n {\n@@ -1632,7 +1635,7 @@ output_move_himode (operands)\n   return \"move%.w %1,%0\";\n }\n \n-char *\n+const char *\n output_move_qimode (operands)\n      rtx *operands;\n {\n@@ -1706,7 +1709,7 @@ output_move_qimode (operands)\n   return \"move%.b %1,%0\";\n }\n \n-char *\n+const char *\n output_move_stricthi (operands)\n      rtx *operands;\n {\n@@ -1719,7 +1722,7 @@ output_move_stricthi (operands)\n   return \"move%.w %1,%0\";\n }\n \n-char *\n+const char *\n output_move_strictqi (operands)\n      rtx *operands;\n {\n@@ -1735,7 +1738,7 @@ output_move_strictqi (operands)\n /* Return the best assembler insn template\n    for moving operands[1] into operands[0] as a fullword.  */\n \n-static char *\n+static const char *\n singlemove_string (operands)\n      rtx *operands;\n {\n@@ -1752,7 +1755,7 @@ singlemove_string (operands)\n /* Output assembler code to perform a doubleword move insn\n    with operands OPERANDS.  */\n \n-char *\n+const char *\n output_move_double (operands)\n      rtx *operands;\n {\n@@ -2130,7 +2133,7 @@ find_addr_reg (addr)\n \n /* Output assembler code to perform a 32 bit 3 operand add.  */\n \n-char *\n+const char *\n output_addsi3 (operands)\n      rtx *operands;\n {\n@@ -2336,7 +2339,7 @@ notice_update_cc (exp, insn)\n     cc_status.flags = CC_IN_68881;\n }\n \f\n-char *\n+const char *\n output_move_const_double (operands)\n      rtx *operands;\n {\n@@ -2370,7 +2373,7 @@ output_move_const_double (operands)\n     }\n }\n \n-char *\n+const char *\n output_move_const_single (operands)\n      rtx *operands;\n {\n@@ -2413,7 +2416,7 @@ output_move_const_single (operands)\n   \n static int inited_68881_table = 0;\n \n-char *strings_68881[7] = {\n+static const char *const strings_68881[7] = {\n   \"0.0\",\n   \"1.0\",\n   \"10.0\",\n@@ -2545,7 +2548,7 @@ floating_exact_log2 (x)\n \n static int inited_FPA_table = 0;\n \n-char *strings_FPA[38] = {\n+static const char *const strings_FPA[38] = {\n /* small rationals */\n   \"0.0\",\n   \"1.0\",\n@@ -3464,13 +3467,13 @@ memory_src_operand (op, mode)\n int\n pcrel_address (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF\n \t  || GET_CODE (op) == CONST);\n }\n \n-char *\n+const char *\n output_andsi3 (operands)\n      rtx *operands;\n {\n@@ -3511,7 +3514,7 @@ output_andsi3 (operands)\n   return \"and%.l %2,%0\";\n }\n \n-char *\n+const char *\n output_iorsi3 (operands)\n      rtx *operands;\n {\n@@ -3550,7 +3553,7 @@ output_iorsi3 (operands)\n   return \"or%.l %2,%0\";\n }\n \n-char *\n+const char *\n output_xorsi3 (operands)\n      rtx *operands;\n {"}, {"sha": "5fda5f85ca80d8589fbeef9ec230c83ee80151c2", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=5505f548bb1e7140e23b3db245fe28c747fb1b77", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n-   Copyright (C) 1987, 88, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 93-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2153,34 +2153,6 @@ do { long l;\t\t\t\t\t\t\\\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n-/* Define functions defined in aux-output.c and used in templates.  */\n-\n-extern char *output_move_const_into_data_reg ();\n-extern char *output_move_simode_const ();\n-extern char *output_move_simode ();\n-extern char *output_move_himode ();\n-extern char *output_move_qimode ();\n-extern char *output_move_stricthi ();\n-extern char *output_move_strictqi ();\n-extern char *output_move_double ();\n-extern char *output_move_const_single ();\n-extern char *output_move_const_double ();\n-extern char *output_btst ();\n-extern char *output_scc_di ();\n-extern char *output_addsi3 ();\n-extern char *output_andsi3 ();\n-extern char *output_iorsi3 ();\n-extern char *output_xorsi3 ();\n-extern void output_dbcc_and_branch ();\n-extern int const_uint32_operand ();\n-extern int const_sint32_operand ();\n-extern int floating_exact_log2 ();\n-extern int not_sp_operand ();\n-extern int valid_dbcc_comparison_p ();\n-extern int extend_operator ();\n-extern int flags_in_68881 ();\n-extern int strict_low_part_peephole_ok ();\n-\n /* Variables in m68k.c */\n extern const char *m68k_align_loops_string;\n extern const char *m68k_align_jumps_string;\n@@ -2190,20 +2162,6 @@ extern int m68k_align_jumps;\n extern int m68k_align_funcs;\n extern int m68k_last_compare_had_fp_operands;\n \n-/* Functions from m68k.c used in macros.  */\n-extern int symbolic_operand ();\n-extern int const_int_cost ();\n-extern int standard_68881_constant_p ();\n-extern int standard_sun_fpa_constant_p ();\n-extern void output_function_prologue ();\n-extern void output_function_epilogue ();\n-extern int use_return_insn ();\n-extern void print_operand_address ();\n-extern void print_operand ();\n-extern void notice_update_cc ();\n-extern void finalize_pic ();\n-extern void override_options ();\n-\n \f\n /*\n Local variables:"}, {"sha": "f709719c5c2912ba746fc92f266c56b4bac6c827", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5505f548bb1e7140e23b3db245fe28c747fb1b77/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=5505f548bb1e7140e23b3db245fe28c747fb1b77", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    SysV68 Motorola 3300 Delta Series.\n-   Copyright (C) 1987, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 93-99, 2000 Free Software Foundation, Inc.\n    Contributed by Abramo and Roberto Bagnara (bagnara@dipisa.di.unipi.it)\n    based on Alex Crain's 3B1 definitions.\n    Maintained by Philippe De Muyter (phdm@info.ucl.ac.be).\n@@ -376,14 +376,14 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n do { long l[2];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\t%s 0x%x,0x%x\\n\", ASM_LONG, l[0], l[1]); \\\n+     fprintf (FILE, \"\\t%s 0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1]); \\\n    } while (0)\n \n #undef ASM_OUTPUT_LONG_DOUBLE\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\t%s 0x%x,0x%x,0x%x\\n\", ASM_LONG, l[0], l[1], l[2]);\t\\\n+     fprintf (FILE, \"\\t%s 0x%lx,0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n    } while (0)\n \n /* This is how to output an assembler line defining a `float' constant.  */\n@@ -392,7 +392,7 @@ do { long l[3];\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n do { long l;\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n-     fprintf ((FILE), \"\\t%s 0x%x\\n\", ASM_LONG, l);\t\\\n+     fprintf ((FILE), \"\\t%s 0x%lx\\n\", ASM_LONG, l);\t\\\n    } while (0)\n \n /* This is how to output an assembler line defining an `int' constant.  */\n@@ -522,7 +522,7 @@ do { long l;\t\t\t\t\t\\\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\\\n-  sprintf ((LABEL), \"%s%s%d\", LOCAL_LABEL_PREFIX, (PREFIX), (NUM))\n+  sprintf ((LABEL), \"%s%s%ld\", LOCAL_LABEL_PREFIX, (PREFIX), (long)(NUM))\n \n /* This is how to output an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */"}]}