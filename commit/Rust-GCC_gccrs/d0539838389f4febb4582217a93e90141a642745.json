{"sha": "d0539838389f4febb4582217a93e90141a642745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1Mzk4MzgzODlmNGZlYmI0NTgyMjE3YTkzZTkwMTQxYTY0Mjc0NQ==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2009-10-29T18:13:27Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2009-10-29T18:13:27Z"}, "message": "re PR debug/41700 (g++.dg/debug/dwarf2/icf.C)\n\ngcc/ChangeLog:\n\tPR debug/41700\n\t* dwarf2out.c (dwarf2_debug_hooks): Add entries for new hook (two\n\tlocations in the source).\n        (store_vcall_insn): New function.\n        (lookup_vcall_insn): New function.\n        (dwarf2out_virtual_call_token): Use store_vcall_insn.\n\t(dwarf2out_copy_call_info): New function.\n\t(dwarf2out_virtual_call): Use lookup_vcall_insn.\n\t* emit-rtl.c (try_split): Call copy_call_info debug hook.\n\t* debug.h (struct gcc_debug_hooks): Add copy_call_info hook.\n\t* debug.c (do_nothing_debug_hooks): Add dummy entry for new hook.\n\t(debug_nothing_rtx_rtx): New dummy hook.\n\t* dbxout.c (dbx_debug_hooks): Add dummy entry for new hook.\n\t(xcoff_debug_hooks): Likewise.\n\t* sdbout.c (sdb_debug_hooks): Likewise.\n\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n\nFrom-SVN: r153719", "tree": {"sha": "7087fae8b2855105cb47e6bdcf53fef7dda8d854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7087fae8b2855105cb47e6bdcf53fef7dda8d854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0539838389f4febb4582217a93e90141a642745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0539838389f4febb4582217a93e90141a642745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0539838389f4febb4582217a93e90141a642745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0539838389f4febb4582217a93e90141a642745/comments", "author": null, "committer": null, "parents": [{"sha": "c376dbfba163068f1caeb1b7749bb74366a5efad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c376dbfba163068f1caeb1b7749bb74366a5efad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c376dbfba163068f1caeb1b7749bb74366a5efad"}], "stats": {"total": 119, "additions": 98, "deletions": 21}, "files": [{"sha": "bc0413cb531062f36353cf89091ce1fd969a7f18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -1,3 +1,22 @@\n+2009-10-29  Cary Coutant  <ccoutant@google.com>\n+\n+\tPR debug/41700\n+\t* dwarf2out.c (dwarf2_debug_hooks): Add entries for new hook (two\n+\tlocations in the source).\n+        (store_vcall_insn): New function.\n+        (lookup_vcall_insn): New function.\n+        (dwarf2out_virtual_call_token): Use store_vcall_insn.\n+\t(dwarf2out_copy_call_info): New function.\n+\t(dwarf2out_virtual_call): Use lookup_vcall_insn.\n+\t* emit-rtl.c (try_split): Call copy_call_info debug hook.\n+\t* debug.h (struct gcc_debug_hooks): Add copy_call_info hook.\n+\t* debug.c (do_nothing_debug_hooks): Add dummy entry for new hook.\n+\t(debug_nothing_rtx_rtx): New dummy hook.\n+\t* dbxout.c (dbx_debug_hooks): Add dummy entry for new hook.\n+\t(xcoff_debug_hooks): Likewise.\n+\t* sdbout.c (sdb_debug_hooks): Likewise.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n+\n 2009-10-29  David Daney  <ddaney@caviumnetworks.com>\n \n \t* doc/invoke.texi (mmcount-ra-address): Document new command line"}, {"sha": "a7bae6003f60c82c0614af6ac1a94498a9b645fd", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -376,6 +376,7 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   debug_nothing_void,                    /* switch_text_section */\n   debug_nothing_tree,\t\t         /* direct_call */\n   debug_nothing_tree_int,\t\t /* virtual_call_token */\n+  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n   debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t\t /* set_name */\n   0                                      /* start_end_main_source_file */\n@@ -413,6 +414,7 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   debug_nothing_void,                    /* switch_text_section */\n   debug_nothing_tree,\t\t         /* direct_call */\n   debug_nothing_tree_int,\t\t /* virtual_call_token */\n+  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n   debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t         /* set_name */\n   0                                      /* start_end_main_source_file */"}, {"sha": "c60a78d4708f1afbd71a006632c452aec4a8a54c", "filename": "gcc/debug.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -53,6 +53,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_void,                    /* switch_text_section */\n   debug_nothing_tree,\t\t         /* direct_call */\n   debug_nothing_tree_int,\t         /* virtual_call_token */\n+  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n   debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t\t /* set_name */\n   0                                      /* start_end_main_source_file */\n@@ -96,6 +97,12 @@ debug_nothing_rtx (rtx insn ATTRIBUTE_UNUSED)\n {\n }\n \n+void\n+debug_nothing_rtx_rtx (rtx insn ATTRIBUTE_UNUSED,\n+\t\t       rtx new_insn ATTRIBUTE_UNUSED)\n+{\n+}\n+\n void\n debug_nothing_charstar (const char *main_filename ATTRIBUTE_UNUSED)\n {"}, {"sha": "079ecb623ad7ad00f2f9c11bd11c4829b11930fb", "filename": "gcc/debug.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -143,6 +143,12 @@ struct gcc_debug_hooks\n      point.  */\n   void (* virtual_call_token) (tree addr, int insn_uid);\n \n+  /* Copies the OBJ_TYPE_REF_TOKEN for a virtual call from OLD_INSN to\n+     NEW_INSN.  Called from emit-rtl.c:try_split when a CALL_INSN is\n+     split, so that the vtable slot index remains associated with the\n+     new CALL_INSN.  */\n+  void (* copy_call_info) (rtx old_insn, rtx new_insn);\n+\n   /* Records a virtual call given INSN_UID, which is the UID of the call\n      instruction.  The UID is then mapped to the vtable slot index noted\n      during the lowering phase.  Called from final_scan_insn when ICF\n@@ -174,6 +180,7 @@ extern void debug_nothing_tree_int (tree, int);\n extern void debug_nothing_tree_tree_tree_bool (tree, tree, tree, bool);\n extern bool debug_true_const_tree (const_tree);\n extern void debug_nothing_rtx (rtx);\n+extern void debug_nothing_rtx_rtx (rtx, rtx);\n extern void debug_nothing_uid (int);\n \n /* Hooks for various debug formats.  */"}, {"sha": "e5648090f9c12184f05fc747ebe125e2df6da8ec", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -5418,6 +5418,7 @@ static void dwarf2out_abstract_function (tree);\n static void dwarf2out_var_location (rtx);\n static void dwarf2out_direct_call (tree);\n static void dwarf2out_virtual_call_token (tree, int);\n+static void dwarf2out_copy_call_info (rtx, rtx);\n static void dwarf2out_virtual_call (int);\n static void dwarf2out_begin_function (tree);\n static void dwarf2out_set_name (tree, tree);\n@@ -5457,6 +5458,7 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   dwarf2out_switch_text_section,\n   dwarf2out_direct_call,\n   dwarf2out_virtual_call_token,\n+  dwarf2out_copy_call_info,\n   dwarf2out_virtual_call,\n   dwarf2out_set_name,\n   1                             /* start_end_main_source_file */\n@@ -19995,6 +19997,42 @@ vcall_insn_table_eq (const void *x, const void *y)\n           == ((const struct vcall_insn *) y)->insn_uid);\n }\n \n+/* Associate VTABLE_SLOT with INSN_UID in the VCALL_INSN_TABLE.  */\n+\n+static void\n+store_vcall_insn (unsigned int vtable_slot, int insn_uid)\n+{\n+  struct vcall_insn *item = GGC_NEW (struct vcall_insn);\n+  struct vcall_insn **slot;\n+\n+  gcc_assert (item);\n+  item->insn_uid = insn_uid;\n+  item->vtable_slot = vtable_slot;\n+  slot = (struct vcall_insn **)\n+      htab_find_slot_with_hash (vcall_insn_table, &item,\n+\t\t\t\t(hashval_t) insn_uid, INSERT);\n+  *slot = item;\n+}\n+\n+/* Return the VTABLE_SLOT associated with INSN_UID.  */\n+\n+static unsigned int\n+lookup_vcall_insn (unsigned int insn_uid)\n+{\n+  struct vcall_insn item;\n+  struct vcall_insn *p;\n+\n+  item.insn_uid = insn_uid;\n+  item.vtable_slot = 0;\n+  p = (struct vcall_insn *) htab_find_with_hash (vcall_insn_table,\n+                                                 (void *) &item,\n+                                                 (hashval_t) insn_uid);\n+  if (p == NULL)\n+    return (unsigned int) -1;\n+  return p->vtable_slot;\n+}\n+\n+\n /* Called when lowering indirect calls to RTL.  We make a note of INSN_UID\n    and the OBJ_TYPE_REF_TOKEN from ADDR.  For C++ virtual calls, the token\n    is the vtable slot index that we will need to put in the virtual call\n@@ -20007,21 +20045,23 @@ dwarf2out_virtual_call_token (tree addr, int insn_uid)\n     {\n       tree token = OBJ_TYPE_REF_TOKEN (addr);\n       if (TREE_CODE (token) == INTEGER_CST)\n-        {\n-          struct vcall_insn *item = GGC_NEW (struct vcall_insn);\n-          struct vcall_insn **slot;\n-\n-          gcc_assert (item);\n-          item->insn_uid = insn_uid;\n-          item->vtable_slot = TREE_INT_CST_LOW (token);\n-          slot = (struct vcall_insn **)\n-              htab_find_slot_with_hash (vcall_insn_table, &item,\n-                                        (hashval_t) insn_uid, INSERT);\n-          *slot = item;\n-        }\n+        store_vcall_insn (TREE_INT_CST_LOW (token), insn_uid);\n     }\n }\n \n+/* Called when scheduling RTL, when a CALL_INSN is split.  Copies the\n+   OBJ_TYPE_REF_TOKEN previously associated with OLD_INSN and associates it\n+   with NEW_INSN.  */\n+\n+static void\n+dwarf2out_copy_call_info (rtx old_insn, rtx new_insn)\n+{\n+  unsigned int vtable_slot = lookup_vcall_insn (INSN_UID (old_insn));\n+\n+  if (vtable_slot != (unsigned int) -1)\n+    store_vcall_insn (vtable_slot, INSN_UID (new_insn));\n+}\n+\n /* Called by the final INSN scan whenever we see a virtual function call.\n    Make an entry into the virtual call table, recording the point of call\n    and the slot index of the vtable entry used to call the virtual member\n@@ -20031,20 +20071,14 @@ dwarf2out_virtual_call_token (tree addr, int insn_uid)\n static void\n dwarf2out_virtual_call (int insn_uid)\n {\n+  unsigned int vtable_slot = lookup_vcall_insn (insn_uid);\n   vcall_entry e;\n-  struct vcall_insn item;\n-  struct vcall_insn *p;\n \n-  item.insn_uid = insn_uid;\n-  item.vtable_slot = 0;\n-  p = (struct vcall_insn *) htab_find_with_hash (vcall_insn_table,\n-                                                 (void *) &item,\n-                                                 (hashval_t) insn_uid);\n-  if (p == NULL)\n+  if (vtable_slot == (unsigned int) -1)\n     return;\n \n   e.poc_label_num = poc_label_num++;\n-  e.vtable_slot = p->vtable_slot;\n+  e.vtable_slot = vtable_slot;\n   VEC_safe_push (vcall_entry, gc, vcall_table, &e);\n \n   /* Drop a label at the return point to mark the point of call.  */\n@@ -21335,6 +21369,7 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   0,\t\t/* switch_text_section */\n   0,\t\t/* direct_call */\n   0,\t\t/* virtual_call_token */\n+  0,\t\t/* copy_call_info */\n   0,\t\t/* virtual_call */\n   0,\t\t/* set_name */\n   0\t\t/* start_end_main_source_file */"}, {"sha": "674bcc4e4b9b2bb79f8c62f1251521c304a9bce5", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -3516,6 +3516,10 @@ try_split (rtx pat, rtx trial, int last)\n \t      p = &XEXP (*p, 1);\n \t    *p = CALL_INSN_FUNCTION_USAGE (trial);\n \t    SIBLING_CALL_P (insn) = SIBLING_CALL_P (trial);\n+\n+\t    /* Update the debug information for the CALL_INSN.  */\n+\t    if (flag_enable_icf_debug)\n+\t      (*debug_hooks->copy_call_info) (trial, insn);\n \t  }\n     }\n "}, {"sha": "7d5c820e8d0426ac7f59640c9de92c580163b025", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -340,6 +340,7 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   debug_nothing_void,                    /* switch_text_section */\n   debug_nothing_tree,\t\t         /* direct_call */\n   debug_nothing_tree_int,\t\t /* virtual_call_token */\n+  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n   debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t\t /* set_name */\n   0                                      /* start_end_main_source_file */\n@@ -1732,6 +1733,7 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   0,\t\t/* switch_text_section */\n   0,\t\t/* direct_call */\n   0,\t\t/* virtual_call_token */\n+  0,\t        /* copy_call_info */\n   0,\t\t/* virtual_call */\n   0,\t\t/* set_name */\n   0\t\t/* start_end_main_source_file */"}, {"sha": "74285af56c6e16f76185478b147f252a39ffe958", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0539838389f4febb4582217a93e90141a642745/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0539838389f4febb4582217a93e90141a642745/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=d0539838389f4febb4582217a93e90141a642745", "patch": "@@ -217,6 +217,7 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    debug_nothing_void,            /* switch_text_section */\n    debug_nothing_tree,\t\t  /* direct_call */\n    debug_nothing_tree_int,\t  /* virtual_call_token */\n+   debug_nothing_rtx_rtx,\t  /* copy_call_info */\n    debug_nothing_uid,\t\t  /* virtual_call */\n    debug_nothing_tree_tree,\t  /* set_name */\n    0                              /* start_end_main_source_file */"}]}