{"sha": "97561cdcf018ec03d6267ee81f018e036452b09b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1NjFjZGNmMDE4ZWMwM2Q2MjY3ZWU4MWYwMThlMDM2NDUyYjA5Yg==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-10-26T13:03:22Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-10-26T13:03:22Z"}, "message": "re PR fortran/66927 (ICE in gfc_conf_procedure_call)\n\ngcc/fortran/ChangeLog:\n\n2015-10-26  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/66927\n\t* trans-array.c (evaluate_bound): For deferred length arrays get the\n\tbounds directly from the descriptor, i.e., prevent using constant\n\tzero lower bound from the gfc_conv_array_lbound () routine.\n\t(gfc_conv_section_startstride): Hand deferred array status to\n\tevaluate_bound ().\n\t(gfc_conv_expr_descriptor): Same.\n\nFrom-SVN: r229353", "tree": {"sha": "a9839ebf7f34391e9578bc8c276bded4d7834c4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9839ebf7f34391e9578bc8c276bded4d7834c4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97561cdcf018ec03d6267ee81f018e036452b09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97561cdcf018ec03d6267ee81f018e036452b09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97561cdcf018ec03d6267ee81f018e036452b09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97561cdcf018ec03d6267ee81f018e036452b09b/comments", "author": null, "committer": null, "parents": [{"sha": "9bdc432ac2147536e4b0a59892002f1e5a4380cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdc432ac2147536e4b0a59892002f1e5a4380cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bdc432ac2147536e4b0a59892002f1e5a4380cb"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "f7556305678eee1b8ee8643be0a3630227200911", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97561cdcf018ec03d6267ee81f018e036452b09b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97561cdcf018ec03d6267ee81f018e036452b09b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=97561cdcf018ec03d6267ee81f018e036452b09b", "patch": "@@ -1,3 +1,13 @@\n+2015-10-26  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/66927\n+\t* trans-array.c (evaluate_bound): For deferred length arrays get the\n+\tbounds directly from the descriptor, i.e., prevent using constant\n+\tzero lower bound from the gfc_conv_array_lbound () routine.\n+\t(gfc_conv_section_startstride): Hand deferred array status to\n+\tevaluate_bound ().\n+\t(gfc_conv_expr_descriptor): Same.\n+\n 2015-01-25  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/67171"}, {"sha": "f6e980d72aba4184aef0e083c4cdb94c2446886c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97561cdcf018ec03d6267ee81f018e036452b09b/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97561cdcf018ec03d6267ee81f018e036452b09b/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=97561cdcf018ec03d6267ee81f018e036452b09b", "patch": "@@ -3809,7 +3809,7 @@ gfc_trans_scalarized_loop_boundary (gfc_loopinfo * loop, stmtblock_t * body)\n \n static void\n evaluate_bound (stmtblock_t *block, tree *bounds, gfc_expr ** values,\n-\t\ttree desc, int dim, bool lbound)\n+\t\ttree desc, int dim, bool lbound, bool deferred)\n {\n   gfc_se se;\n   gfc_expr * input_val = values[dim];\n@@ -3824,6 +3824,17 @@ evaluate_bound (stmtblock_t *block, tree *bounds, gfc_expr ** values,\n       gfc_add_block_to_block (block, &se.pre);\n       *output = se.expr;\n     }\n+  else if (deferred)\n+    {\n+      /* The gfc_conv_array_lbound () routine returns a constant zero for\n+\t deferred length arrays, which in the scalarizer wrecks havoc, when\n+\t copying to a (newly allocated) one-based array.\n+\t Keep returning the actual result in sync for both bounds.  */\n+      *output = lbound ? gfc_conv_descriptor_lbound_get (desc,\n+\t\t\t\t\t\t\t gfc_rank_cst[dim]):\n+\t\t\t gfc_conv_descriptor_ubound_get (desc,\n+\t\t\t\t\t\t\t gfc_rank_cst[dim]);\n+    }\n   else\n     {\n       /* No specific bound specified so use the bound of the array.  */\n@@ -3864,14 +3875,18 @@ gfc_conv_section_startstride (stmtblock_t * block, gfc_ss * ss, int dim)\n   desc = info->descriptor;\n   stride = ar->stride[dim];\n \n+\n   /* Calculate the start of the range.  For vector subscripts this will\n      be the range of the vector.  */\n-  evaluate_bound (block, info->start, ar->start, desc, dim, true);\n+  evaluate_bound (block, info->start, ar->start, desc, dim, true,\n+\t\t  ar->as->type == AS_DEFERRED);\n \n   /* Similarly calculate the end.  Although this is not used in the\n      scalarizer, it is needed when checking bounds and where the end\n      is an expression with side-effects.  */\n-  evaluate_bound (block, info->end, ar->end, desc, dim, false);\n+  evaluate_bound (block, info->end, ar->end, desc, dim, false,\n+\t\t  ar->as->type == AS_DEFERRED);\n+\n \n   /* Calculate the stride.  */\n   if (stride == NULL)\n@@ -6965,7 +6980,8 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \n \t  gcc_assert (n == codim - 1);\n \t  evaluate_bound (&loop.pre, info->start, ar->start,\n-\t\t\t  info->descriptor, n + ndim, true);\n+\t\t\t  info->descriptor, n + ndim, true,\n+\t\t\t  ar->as->type == AS_DEFERRED);\n \t  loop.from[n + loop.dimen] = info->start[n + ndim];\n \t}\n       else"}]}