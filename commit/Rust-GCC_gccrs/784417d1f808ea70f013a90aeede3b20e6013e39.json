{"sha": "784417d1f808ea70f013a90aeede3b20e6013e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0NDE3ZDFmODA4ZWE3MGYwMTNhOTBhZWVkZTNiMjBlNjAxM2UzOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-15T23:51:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-15T23:51:31Z"}, "message": "re PR c++/88482 (ICE when wrongly declaring __cxa_allocate_exception)\n\n\tPR c++/88482\n\t* except.c (verify_library_fn): New function.\n\t(declare_library_fn): Use it.  Initialize TM even if the non-TM\n\tlibrary function has been user declared.\n\t(do_end_catch): Don't set TREE_NOTHROW on error_mark_node.\n\t(expand_start_catch_block): Don't call initialize_handler_parm\n\tfor error_mark_node.\n\t(build_throw): Use verify_library_fn.  Initialize TM even if the\n\tnon-TM library function has been user declared.  Don't crash if\n\tany library fn is error_mark_node.\n\n\t* g++.dg/eh/builtin5.C: New test.\n\t* g++.dg/eh/builtin6.C: New test.\n\t* g++.dg/eh/builtin7.C: New test.\n\t* g++.dg/eh/builtin8.C: New test.\n\t* g++.dg/eh/builtin9.C: New test.\n\t* g++.dg/eh/builtin10.C: New test.\n\t* g++.dg/eh/builtin11.C: New test.\n\t* g++.dg/parse/crash55.C: Adjust expected diagnostics.\n\n\t* eh_cpp.cc (__cxa_throw): Change DEST argument type from\n\tvoid * to void (*) (void *).\n\t(_ITM_cxa_throw): Likewise.\n\t* libitm.h (_ITM_cxa_throw): Likewise.\n\t* libitm.texi (_ITM_cxa_throw): Likewise.\n\nFrom-SVN: r267179", "tree": {"sha": "d5fb499587fc8a484ff6fc7e4c0565251f7971fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5fb499587fc8a484ff6fc7e4c0565251f7971fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/784417d1f808ea70f013a90aeede3b20e6013e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784417d1f808ea70f013a90aeede3b20e6013e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784417d1f808ea70f013a90aeede3b20e6013e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784417d1f808ea70f013a90aeede3b20e6013e39/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e310b38153d15c6d3ae9686eb38b6629f0f93393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e310b38153d15c6d3ae9686eb38b6629f0f93393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e310b38153d15c6d3ae9686eb38b6629f0f93393"}], "stats": {"total": 398, "additions": 361, "deletions": 37}, "files": [{"sha": "d12173e69e9dcbf8dee80c48161a3e729247a650", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -1,3 +1,16 @@\n+2018-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88482\n+\t* except.c (verify_library_fn): New function.\n+\t(declare_library_fn): Use it.  Initialize TM even if the non-TM\n+\tlibrary function has been user declared.\n+\t(do_end_catch): Don't set TREE_NOTHROW on error_mark_node.\n+\t(expand_start_catch_block): Don't call initialize_handler_parm\n+\tfor error_mark_node.\n+\t(build_throw): Use verify_library_fn.  Initialize TM even if the\n+\tnon-TM library function has been user declared.  Don't crash if\n+\tany library fn is error_mark_node.\n+\n 2018-12-14  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (tsubst_expr) [DECL_EXPR]: Ignore class-scope bindings when"}, {"sha": "b04eb0c53329a6fd643dbce79c547beade126a48", "filename": "gcc/cp/except.c", "status": "modified", "additions": 123, "deletions": 30, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -132,6 +132,49 @@ build_exc_ptr (void)\n \t\t       1, integer_zero_node);\n }\n \n+/* Check that user declared function FN is a function and has return\n+   type RTYPE and argument types ARG{1,2,3}TYPE.  */\n+\n+static bool\n+verify_library_fn (tree fn, const char *name, tree rtype,\n+\t\t   tree arg1type, tree arg2type, tree arg3type)\n+{\n+  if (TREE_CODE (fn) != FUNCTION_DECL\n+      || TREE_CODE (TREE_TYPE (fn)) != FUNCTION_TYPE)\n+    {\n+  bad:\n+      error_at (DECL_SOURCE_LOCATION (fn), \"%qs declared incorrectly\", name);\n+      return false;\n+    }\n+  tree fntype = TREE_TYPE (fn);\n+  if (!same_type_p (TREE_TYPE (fntype), rtype))\n+    goto bad;\n+  tree targs = TYPE_ARG_TYPES (fntype);\n+  tree args[3] = { arg1type, arg2type, arg3type };\n+  for (int i = 0; i < 3 && args[i]; i++)\n+    {\n+      if (targs == NULL_TREE)\n+\tgoto bad;\n+      if (!same_type_p (TREE_VALUE (targs), args[i]))\n+\t{\n+\t  if (i == 0)\n+\t    goto bad;\n+\t  /* Be less strict for second and following arguments, __cxa_throw\n+\t     needs to be more permissive.  */\n+\t  if (TYPE_PTROBV_P (TREE_VALUE (targs)) && TYPE_PTROBV_P (args[i]))\n+\t    /* Both object pointers.  */;\n+\t  else if (TYPE_PTRFN_P (TREE_VALUE (targs)) && TYPE_PTRFN_P (args[i]))\n+\t    /* Both function pointers.  */;\n+\t  else\n+\t    goto bad;\n+\t}\n+      targs = TREE_CHAIN (targs);\n+    }\n+  if (targs != void_list_node)\n+    goto bad;\n+  return true;\n+}\n+\n /* Find or declare a function NAME, returning RTYPE, taking a single\n    parameter PTYPE, with an empty exception specification. ECF are the\n    library fn flags.  If TM_ECF is non-zero, also find or create a\n@@ -148,21 +191,39 @@ declare_library_fn (const char *name, tree rtype, tree ptype,\n {\n   tree ident = get_identifier (name);\n   tree res = get_global_binding (ident);\n+  tree fntype = NULL_TREE;\n+  tree except = NULL_TREE;\n   if (!res)\n     {\n-      tree type = build_function_type_list (rtype, ptype, NULL_TREE);\n-      tree except = ecf & ECF_NOTHROW ? empty_except_spec : NULL_TREE;\n-      res = push_library_fn (ident, type, except, ecf);\n-      if (tm_ecf && flag_tm)\n+      fntype = build_function_type_list (rtype, ptype, NULL_TREE);\n+      if (ecf & ECF_NOTHROW)\n+\texcept = empty_except_spec;\n+      res = push_library_fn (ident, fntype, except, ecf);\n+    }\n+  else if (!verify_library_fn (res, name, rtype, ptype, NULL_TREE, NULL_TREE))\n+    return error_mark_node;\n+\n+  if (tm_ecf && flag_tm)\n+    {\n+      char *tm_name = concat (\"_ITM_\", name + 2, NULL_TREE);\n+      tree tm_ident = get_identifier (tm_name);\n+      tree tm_fn = get_global_binding (tm_ident);\n+      if (!tm_fn)\n \t{\n-\t  char *tm_name = concat (\"_ITM_\", name + 2, NULL_TREE);\n-\t  tree tm_ident = get_identifier (tm_name);\n-\t  free (tm_name);\n-\t  tree tm_fn = get_global_binding (tm_ident);\n-\t  if (!tm_fn)\n-\t    tm_fn = push_library_fn (tm_ident, type, except, ecf | tm_ecf);\n-\t  record_tm_replacement (res, tm_fn);\n+\t  if (!fntype)\n+\t    {\n+\t      fntype = build_function_type_list (rtype, ptype, NULL_TREE);\n+\t      if (ecf & ECF_NOTHROW)\n+\t\texcept = empty_except_spec;\n+\t    }\n+\t  tm_fn = push_library_fn (tm_ident, fntype, except, ecf | tm_ecf);\n \t}\n+      else if (!verify_library_fn (tm_fn, tm_name, rtype, ptype,\n+\t\t\t\t   NULL_TREE, NULL_TREE))\n+\ttm_fn = error_mark_node;\n+      free (tm_name);\n+      if (tm_fn != error_mark_node)\n+\trecord_tm_replacement (res, tm_fn);\n     }\n   return res;\n }\n@@ -236,7 +297,8 @@ do_end_catch (tree type)\n \n   tree cleanup = cp_build_function_call_vec (end_catch_fn,\n \t\t\t\t\t     NULL, tf_warning_or_error);\n-  TREE_NOTHROW (cleanup) = dtor_nothrow (type);\n+  if (cleanup != error_mark_node)\n+    TREE_NOTHROW (cleanup) = dtor_nothrow (type);\n \n   return cleanup;\n }\n@@ -400,7 +462,8 @@ expand_start_catch_block (tree decl)\n \t   && TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl)))\n     {\n       exp = do_get_exception_ptr ();\n-      initialize_handler_parm (decl, exp);\n+      if (exp != error_mark_node)\n+\tinitialize_handler_parm (decl, exp);\n       finish_expr_stmt (init);\n     }\n \n@@ -608,23 +671,44 @@ build_throw (tree exp)\n \n       if (!throw_fn)\n \t{\n-\t  tree name = get_identifier (\"__cxa_throw\");\n-\t  throw_fn = get_global_binding (name);\n+\t  const char *name = \"__cxa_throw\";\n+\t  tree ident = get_identifier (name);\n+\t  tree fntype = NULL_TREE;\n+\t  throw_fn = get_global_binding (ident);\n \t  if (!throw_fn)\n \t    {\n \t      /* Declare void __cxa_throw (void*, void*, void (*)(void*)).  */\n \t      /* ??? Second argument is supposed to be \"std::type_info*\".  */\n-\t      tmp = build_function_type_list (void_type_node,\n-\t\t\t\t\t      ptr_type_node, ptr_type_node,\n-\t\t\t\t\t      cleanup_type, NULL_TREE);\n-\t      throw_fn = push_throw_library_fn (name, tmp);\n+\t      fntype = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t ptr_type_node, ptr_type_node,\n+\t\t\t\t\t\t cleanup_type, NULL_TREE);\n+\t      throw_fn = push_throw_library_fn (ident, fntype);\n+\t    }\n+\t  else if (!verify_library_fn (throw_fn, name, void_type_node,\n+\t\t\t\t       ptr_type_node, ptr_type_node,\n+\t\t\t\t       cleanup_type))\n+\t    throw_fn = error_mark_node;\n \n-\t      if (flag_tm)\n+\t  if (flag_tm && throw_fn != error_mark_node)\n+\t    {\n+\t      const char *itm_name = \"_ITM_cxa_throw\";\n+\t      tree itm_ident = get_identifier (itm_name);\n+\t      tree itm_fn = get_global_binding (itm_ident);\n+\t      if (!itm_fn)\n+\t\t{\n+\t\t  if (!fntype)\n+\t\t    fntype\n+\t\t      = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t  ptr_type_node, ptr_type_node,\n+\t\t\t\t\t\t  cleanup_type, NULL_TREE);\n+\t\t  itm_fn = push_throw_library_fn (itm_ident, fntype);\n+\t\t}\n+\t      else if (!verify_library_fn (itm_fn, itm_name, void_type_node,\n+\t\t\t\t\t   ptr_type_node, ptr_type_node,\n+\t\t\t\t\t   cleanup_type))\n+\t\titm_fn = error_mark_node;\n+\t      if (itm_fn != error_mark_node)\n \t\t{\n-\t\t  tree itm_name = get_identifier (\"_ITM_cxa_throw\");\n-\t\t  tree itm_fn = get_global_binding (itm_name);\n-\t\t  if (!itm_fn)\n-\t\t    itm_fn = push_throw_library_fn (itm_name, tmp);\n \t\t  apply_tm_attr (itm_fn, get_identifier (\"transaction_pure\"));\n \t\t  record_tm_replacement (throw_fn, itm_fn);\n \t\t}\n@@ -658,6 +742,8 @@ build_throw (tree exp)\n \n       /* Allocate the space for the exception.  */\n       allocate_expr = do_allocate_exception (temp_type);\n+      if (allocate_expr == error_mark_node)\n+\treturn error_mark_node;\n       allocate_expr = get_target_expr (allocate_expr);\n       ptr = TARGET_EXPR_SLOT (allocate_expr);\n       TARGET_EXPR_CLEANUP (allocate_expr) = do_free_exception (ptr);\n@@ -760,14 +846,21 @@ build_throw (tree exp)\n       /* Rethrow current exception.  */\n       if (!rethrow_fn)\n \t{\n-\t  tree name = get_identifier (\"__cxa_rethrow\");\n-\t  rethrow_fn = get_global_binding (name);\n+\t  const char *name = \"__cxa_rethrow\";\n+\t  tree ident = get_identifier (name);\n+\t  rethrow_fn = get_global_binding (ident);\n \t  if (!rethrow_fn)\n-\t    /* Declare void __cxa_rethrow (void).  */\n-\t    rethrow_fn = push_throw_library_fn\n-\t      (name, build_function_type_list (void_type_node, NULL_TREE));\n+\t    {\n+\t      /* Declare void __cxa_rethrow (void).  */\n+\t      tree fntype\n+\t\t= build_function_type_list (void_type_node, NULL_TREE);\n+\t      rethrow_fn = push_throw_library_fn (ident, fntype);\n+\t    }\n+\t  else if (!verify_library_fn (rethrow_fn, name, void_type_node,\n+\t\t\t\t       NULL_TREE, NULL_TREE, NULL_TREE))\n+\t    rethrow_fn = error_mark_node;\n \n-\t  if (flag_tm)\n+\t  if (flag_tm && rethrow_fn != error_mark_node)\n \t    apply_tm_attr (rethrow_fn, get_identifier (\"transaction_pure\"));\n \t}\n "}, {"sha": "7977fdaaddedde4bc00aba54de62623a67dfb1a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -1,3 +1,15 @@\n+2018-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88482\n+\t* g++.dg/eh/builtin5.C: New test.\n+\t* g++.dg/eh/builtin6.C: New test.\n+\t* g++.dg/eh/builtin7.C: New test.\n+\t* g++.dg/eh/builtin8.C: New test.\n+\t* g++.dg/eh/builtin9.C: New test.\n+\t* g++.dg/eh/builtin10.C: New test.\n+\t* g++.dg/eh/builtin11.C: New test.\n+\t* g++.dg/parse/crash55.C: Adjust expected diagnostics.\n+\n 2019-12-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88138"}, {"sha": "8c48e3de6d3892691cdeb0e727e27423e3cc5cf2", "filename": "gcc/testsuite/g++.dg/eh/builtin10.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin10.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/88482\n+// { dg-do compile }\n+\n+extern \"C\" void __cxa_throw (void *, void *, void (*) (void *));\n+extern \"C\" float __cxa_get_exception_ptr (void *);\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_begin_catch (void *);\n+extern \"C\" void __cxa_end_catch ();\n+extern \"C\" void __cxa_rethrow ();\n+extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__);\n+extern \"C\" int __cxa_free_exception (void *);\t\t\t// { dg-error \"declared incorrectly\" }\n+\n+struct S { S (); S (const S &); ~S (); };\n+\n+int\n+foo (int x)\n+{\n+  if (x > 27)\n+    throw 19;\n+  try\n+    {\n+      if (x > 15)\n+\tthrow S ();\n+    }\n+  catch (S s)\n+    {\n+      throw;\n+    }\n+  return x + 3;\n+}"}, {"sha": "fb1d4f38ab302e7ca3363353a808280307a35a84", "filename": "gcc/testsuite/g++.dg/eh/builtin11.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin11.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/88482\n+// { dg-do compile }\n+\n+extern \"C\" void __cxa_throw (float, void *, void (*) (void *));\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_get_exception_ptr (void *);\n+extern \"C\" void *__cxa_begin_catch (int);\t\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void __cxa_end_catch (long long);\t\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void __cxa_rethrow (int);\t\t\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_allocate_exception (void *);\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void __cxa_free_exception (void *);\n+\n+struct S { S (); S (const S &); ~S (); };\n+\n+int\n+foo (int x)\n+{\n+  if (x > 27)\n+    throw 19;\n+  try\n+    {\n+      if (x > 15)\n+\tthrow S ();\n+    }\n+  catch (S s)\n+    {\n+      throw;\n+    }\n+  return x + 3;\n+}"}, {"sha": "eec6f2509a59f680ce3f3048867ff2d4f81d7edb", "filename": "gcc/testsuite/g++.dg/eh/builtin5.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin5.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/88482\n+// { dg-do compile }\n+\n+extern \"C\" void __cxa_throw (void *, void *, void (*) (void *));\n+extern \"C\" void *__cxa_get_exception_ptr (void *);\n+extern \"C\" void *__cxa_begin_catch (void *);\n+extern \"C\" void __cxa_end_catch ();\n+extern \"C\" void __cxa_rethrow ();\n+extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__);\n+extern \"C\" void __cxa_free_exception (void *);\n+\n+struct S { S (); S (const S &); ~S (); };\n+\n+int\n+foo (int x)\n+{\n+  if (x > 27)\n+    throw 19;\n+  try\n+    {\n+      if (x > 15)\n+\tthrow S ();\n+    }\n+  catch (S s)\n+    {\n+      throw;\n+    }\n+  return x + 3;\n+}"}, {"sha": "a70b406cf848784c72dcc69f0fec242bdde34cb3", "filename": "gcc/testsuite/g++.dg/eh/builtin6.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin6.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/88482\n+// { dg-do compile }\n+\n+float __cxa_throw;\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_get_exception_ptr (void *);\n+float __cxa_begin_catch;\t// { dg-error \"declared incorrectly\" }\n+float __cxa_end_catch;\t\t// { dg-error \"declared incorrectly\" }\n+float __cxa_rethrow;\t\t// { dg-error \"declared incorrectly\" }\n+float __cxa_allocate_exception;\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void __cxa_free_exception (void *);\n+\n+struct S { S (); S (const S &); ~S (); };\n+\n+int\n+foo (int x)\n+{\n+  if (x > 27)\n+    throw 19;\n+  try\n+    {\n+      if (x > 15)\n+\tthrow S ();\n+    }\n+  catch (S s)\n+    {\n+      throw;\n+    }\n+  return x + 3;\n+}"}, {"sha": "ad9c7f6802db44d9586aa742c220dbff5f3cb0c2", "filename": "gcc/testsuite/g++.dg/eh/builtin7.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin7.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/88482\n+// { dg-do compile }\n+\n+extern \"C\" void __cxa_throw (void *, void *, void (*) (void *));\n+int __cxa_get_exception_ptr;\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_begin_catch (void *);\n+extern \"C\" void __cxa_end_catch ();\n+extern \"C\" void __cxa_rethrow ();\n+extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__);\n+int __cxa_free_exception;\t\t// { dg-error \"declared incorrectly\" }\n+\n+struct S { S (); S (const S &); ~S (); };\n+\n+int\n+foo (int x)\n+{\n+  if (x > 27)\n+    throw 19;\n+  try\n+    {\n+      if (x > 15)\n+\tthrow S ();\n+    }\n+  catch (S s)\n+    {\n+      throw;\n+    }\n+  return x + 3;\n+}"}, {"sha": "19c32ae7c8b08cbf9f8eaaab4a156a2605480274", "filename": "gcc/testsuite/g++.dg/eh/builtin8.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin8.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/88482\n+// { dg-do compile }\n+\n+#include <cxxabi.h>\n+\n+struct S { S (); S (const S &); ~S (); };\n+\n+int\n+foo (int x)\n+{\n+  if (x > 27)\n+    throw 19;\n+  try\n+    {\n+      if (x > 15)\n+\tthrow S ();\n+    }\n+  catch (S s)\n+    {\n+      throw;\n+    }\n+  return x + 3;\n+}"}, {"sha": "acd1a5e7dd63ba501bb539ca301e4ac3d630af3d", "filename": "gcc/testsuite/g++.dg/eh/builtin9.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin9.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/88482\n+// { dg-do compile }\n+\n+extern \"C\" int __cxa_throw (void *, void *, void (*) (void *));\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_get_exception_ptr (void *);\n+extern \"C\" double __cxa_begin_catch (void *);\t\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" long *__cxa_end_catch ();\t\t\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" char __cxa_rethrow ();\t\t\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void __cxa_allocate_exception (__SIZE_TYPE__);\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void __cxa_free_exception (void *);\n+\n+struct S { S (); S (const S &); ~S (); };\n+\n+int\n+foo (int x)\n+{\n+  if (x > 27)\n+    throw 19;\n+  try\n+    {\n+      if (x > 15)\n+\tthrow S ();\n+    }\n+  catch (S s)\n+    {\n+      throw;\n+    }\n+  return x + 3;\n+}"}, {"sha": "23ce203b3b5ef6bf316d0ea89efe186f843d754c", "filename": "gcc/testsuite/g++.dg/parse/crash55.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -1,8 +1,8 @@\n // PR c++/42038\n \n-extern int __cxa_begin_catch;\n+extern int __cxa_begin_catch;\t// { dg-error \"declared incorrectly\" }\n \n void f(void)\n {\n-  try { } catch (int) { } // { dg-error \"cannot be used\" }\n+  try { } catch (int) { }\n }"}, {"sha": "5ca36bb31b670f6df55121688b06668112842551", "filename": "libitm/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -1,3 +1,12 @@\n+2018-12-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88482\n+\t* eh_cpp.cc (__cxa_throw): Change DEST argument type from\n+\tvoid * to void (*) (void *).\n+\t(_ITM_cxa_throw): Likewise.\n+\t* libitm.h (_ITM_cxa_throw): Likewise.\n+\t* libitm.texi (_ITM_cxa_throw): Likewise.\n+\n 2018-12-13  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* config/powerpc/target.h (htm_available):  Add support for"}, {"sha": "55b0c4e74fb463df3fad733dc02157304b258667", "filename": "libitm/eh_cpp.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2Feh_cpp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2Feh_cpp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Feh_cpp.cc?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -89,7 +89,7 @@ struct __cxa_eh_globals\n \n extern void *__cxa_allocate_exception (size_t) WEAK;\n extern void __cxa_free_exception (void *) WEAK;\n-extern void __cxa_throw (void *, void *, void *) WEAK;\n+extern void __cxa_throw (void *, void *, void (*) (void *)) WEAK;\n extern void *__cxa_begin_catch (void *) WEAK;\n extern void __cxa_end_catch (void) WEAK;\n extern void __cxa_tm_cleanup (void *, void *, unsigned int) WEAK;\n@@ -98,7 +98,7 @@ extern __cxa_eh_globals *__cxa_get_globals (void) WEAK;\n #if !defined (HAVE_ELF_STYLE_WEAKREF) \n void *__cxa_allocate_exception (size_t) { return NULL; }\n void __cxa_free_exception (void *) { return; }\n-void __cxa_throw (void *, void *, void *) { return; }\n+void __cxa_throw (void *, void *, void (*) (void *)) { return; }\n void *__cxa_begin_catch (void *) { return NULL; }\n void __cxa_end_catch (void) { return; }\n void __cxa_tm_cleanup (void *, void *, unsigned int) { return; }\n@@ -136,7 +136,7 @@ _ITM_cxa_free_exception (void *exc_ptr)\n }\n \n void\n-_ITM_cxa_throw (void *obj, void *tinfo, void *dest)\n+_ITM_cxa_throw (void *obj, void *tinfo, void (*dest) (void *))\n {\n   // This used to be instrumented, but does not need to be anymore.\n   __cxa_throw (obj, tinfo, dest);"}, {"sha": "dd9b5de585f658f8b4f11eef9167afbade904211", "filename": "libitm/libitm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2Flibitm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2Flibitm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm.h?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -284,7 +284,7 @@ extern void _ITM_deregisterTMCloneTable (void *);\n \n extern void *_ITM_cxa_allocate_exception (size_t);\n extern void _ITM_cxa_free_exception (void *exc_ptr);\n-extern void _ITM_cxa_throw (void *obj, void *tinfo, void *dest);\n+extern void _ITM_cxa_throw (void *obj, void *tinfo, void (*dest) (void *));\n extern void *_ITM_cxa_begin_catch (void *exc_ptr);\n extern void _ITM_cxa_end_catch (void);\n extern void _ITM_commitTransactionEH(void *exc_ptr) ITM_REGPARM;"}, {"sha": "d0b7b07e90b518c8919db6404ed00ab3afec636e", "filename": "libitm/libitm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2Flibitm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784417d1f808ea70f013a90aeede3b20e6013e39/libitm%2Flibitm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm.texi?ref=784417d1f808ea70f013a90aeede3b20e6013e39", "patch": "@@ -269,7 +269,7 @@ transactions.\n void _ITM_commitTransactionEH(void *exc_ptr) ITM_REGPARM;\n void *_ITM_cxa_allocate_exception (size_t);\n void _ITM_cxa_free_exception (void *exc_ptr);\n-void _ITM_cxa_throw (void *obj, void *tinfo, void *dest);\n+void _ITM_cxa_throw (void *obj, void *tinfo, void (*dest) (void *));\n void *_ITM_cxa_begin_catch (void *exc_ptr);\n void _ITM_cxa_end_catch (void);\n @end example"}]}