{"sha": "7ba8651ed253b29ee17a0d735cc74eac1b826492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhODY1MWVkMjUzYjI5ZWUxN2EwZDczNWNjNzRlYWMxYjgyNjQ5Mg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2017-03-22T13:52:10Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2017-03-22T13:52:10Z"}, "message": "re PR c++/80029 (valgrind error in new_omp_context(omp_region_type) (gimplify.c:400))\n\n\tPR c++/80029\n\n\tgcc/\n\t* gimplify.c (is_oacc_declared): New function.\n\t(oacc_default_clause): Use it to set default flags for acc declared\n\tvariables inside parallel regions.\n\t(gimplify_scan_omp_clauses): Strip firstprivate pointers for acc\n\tdeclared variables.\n\t(gimplify_oacc_declare): Gimplify the declare clauses.  Add the\n\tdeclare attribute to any decl as necessary.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/declare-vla.c: New test.\n\nFrom-SVN: r246381", "tree": {"sha": "d6411b1c55001c5719c4dc9933386850cae58c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6411b1c55001c5719c4dc9933386850cae58c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ba8651ed253b29ee17a0d735cc74eac1b826492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba8651ed253b29ee17a0d735cc74eac1b826492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba8651ed253b29ee17a0d735cc74eac1b826492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba8651ed253b29ee17a0d735cc74eac1b826492/comments", "author": null, "committer": null, "parents": [{"sha": "bf634d1c4c9cc3cd3a4523ab4178b94398892ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf634d1c4c9cc3cd3a4523ab4178b94398892ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf634d1c4c9cc3cd3a4523ab4178b94398892ded"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "f7202cf0b9017e9ac88b9290e866043b115b18b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8651ed253b29ee17a0d735cc74eac1b826492/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8651ed253b29ee17a0d735cc74eac1b826492/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ba8651ed253b29ee17a0d735cc74eac1b826492", "patch": "@@ -1,4 +1,15 @@\n-t2017-03-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+2017-03-22  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR c++/80029\n+\t* gimplify.c (is_oacc_declared): New function.\n+\t(oacc_default_clause): Use it to set default flags for acc declared\n+\tvariables inside parallel regions.\n+\t(gimplify_scan_omp_clauses): Strip firstprivate pointers for acc\n+\tdeclared variables.\n+\t(gimplify_oacc_declare): Gimplify the declare clauses.  Add the\n+\tdeclare attribute to any decl as necessary.\n+\n+2017-03-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR target/80082\n \t* config/arm/arm-isa.h (isa_bit_lpae): New feature bit."}, {"sha": "5658d0a2f0bbec0c33ba0b8a0259855e698e190a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8651ed253b29ee17a0d735cc74eac1b826492/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8651ed253b29ee17a0d735cc74eac1b826492/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7ba8651ed253b29ee17a0d735cc74eac1b826492", "patch": "@@ -6786,6 +6786,16 @@ device_resident_p (tree decl)\n   return false;\n }\n \n+/* Return true if DECL has an ACC DECLARE attribute.  */\n+\n+static bool\n+is_oacc_declared (tree decl)\n+{\n+  tree t = TREE_CODE (decl) == MEM_REF ? TREE_OPERAND (decl, 0) : decl;\n+  tree declared = lookup_attribute (\"oacc declare target\", DECL_ATTRIBUTES (t));\n+  return declared != NULL_TREE;\n+}\n+\n /* Determine outer default flags for DECL mentioned in an OMP region\n    but not declared in an enclosing clause.\n \n@@ -6886,6 +6896,7 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n {\n   const char *rkind;\n   bool on_device = false;\n+  bool declared = is_oacc_declared (decl);\n   tree type = TREE_TYPE (decl);\n \n   if (lang_hooks.decls.omp_privatize_by_reference (decl))\n@@ -6916,7 +6927,7 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n \n     case ORT_ACC_PARALLEL:\n       {\n-\tif (on_device || AGGREGATE_TYPE_P (type))\n+\tif (on_device || AGGREGATE_TYPE_P (type) || declared)\n \t  /* Aggregates default to 'present_or_copy'.  */\n \t  flags |= GOVD_MAP;\n \telse\n@@ -7345,6 +7356,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n       case OMP_TARGET_DATA:\n       case OMP_TARGET_ENTER_DATA:\n       case OMP_TARGET_EXIT_DATA:\n+      case OACC_DECLARE:\n       case OACC_HOST_DATA:\n \tctx->target_firstprivatize_array_bases = true;\n       default:\n@@ -9230,18 +9242,26 @@ gimplify_oacc_declare (tree *expr_p, gimple_seq *pre_p)\n {\n   tree expr = *expr_p;\n   gomp_target *stmt;\n-  tree clauses, t;\n+  tree clauses, t, decl;\n \n   clauses = OACC_DECLARE_CLAUSES (expr);\n \n   gimplify_scan_omp_clauses (&clauses, pre_p, ORT_TARGET_DATA, OACC_DECLARE);\n+  gimplify_adjust_omp_clauses (pre_p, NULL, &clauses, OACC_DECLARE);\n \n   for (t = clauses; t; t = OMP_CLAUSE_CHAIN (t))\n     {\n-      tree decl = OMP_CLAUSE_DECL (t);\n+      decl = OMP_CLAUSE_DECL (t);\n \n       if (TREE_CODE (decl) == MEM_REF)\n-\tcontinue;\n+\tdecl = TREE_OPERAND (decl, 0);\n+\n+      if (VAR_P (decl) && !is_oacc_declared (decl))\n+\t{\n+\t  tree attr = get_identifier (\"oacc declare target\");\n+\t  DECL_ATTRIBUTES (decl) = tree_cons (attr, NULL_TREE,\n+\t\t\t\t\t      DECL_ATTRIBUTES (decl));\n+\t}\n \n       if (VAR_P (decl)\n \t  && !is_global_var (decl)\n@@ -9257,7 +9277,8 @@ gimplify_oacc_declare (tree *expr_p, gimple_seq *pre_p)\n \t    }\n \t}\n \n-      omp_add_variable (gimplify_omp_ctxp, decl, GOVD_SEEN);\n+      if (gimplify_omp_ctxp)\n+\tomp_add_variable (gimplify_omp_ctxp, decl, GOVD_SEEN);\n     }\n \n   stmt = gimple_build_omp_target (NULL, GF_OMP_TARGET_KIND_OACC_DECLARE,"}, {"sha": "74f50e0f32f240945500a283e6cf50054a4080d1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8651ed253b29ee17a0d735cc74eac1b826492/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8651ed253b29ee17a0d735cc74eac1b826492/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7ba8651ed253b29ee17a0d735cc74eac1b826492", "patch": "@@ -1,3 +1,8 @@\n+2017-03-22  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR c++/80029\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-vla.c: New test.\n+\n 2017-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/79940"}, {"sha": "3ea148ed40db2449da0a18e8d653818d7e1cb992", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-vla.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8651ed253b29ee17a0d735cc74eac1b826492/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8651ed253b29ee17a0d735cc74eac1b826492/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c?ref=7ba8651ed253b29ee17a0d735cc74eac1b826492", "patch": "@@ -0,0 +1,25 @@\n+/* Verify that acc declare accept VLA variables.  */\n+\n+#include <assert.h>\n+\n+int\n+main ()\n+{\n+  int N = 1000;\n+  int i, A[N];\n+#pragma acc declare copy(A)\n+\n+  for (i = 0; i < N; i++)\n+    A[i] = -i;\n+\n+#pragma acc kernels\n+  for (i = 0; i < N; i++)\n+    A[i] = i;\n+\n+#pragma acc update host(A)\n+\n+  for (i = 0; i < N; i++)\n+    assert (A[i] == i);\n+\n+  return 0;\n+}"}]}