{"sha": "b370501f72e1efa7d1907d3f0e0850e5481f2c98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3MDUwMWY3MmUxZWZhN2QxOTA3ZDNmMGUwODUwZTU0ODFmMmM5OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-09-25T09:00:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-09-25T09:00:04Z"}, "message": "Warning fixes:\n\n\t* cp-tree.h (define_case_label): Remove unused parameter.\n\t(check_java_method): Likewise.\n\t(grokclassfn): Likewise.\n\t(expand_aggr_init): Likewise.\n\t(build_x_delete): Likewise.\n\t(maybe_end_member_template_processing): Likewise.\n\t(unshare_base_binfos): Add prototype.\n\t(string_conv_p): Likewise.\n\t(my_friendly_abort): Mark with ATTRIBUTE_NORETURN.\n\t* cvt.c (build_up_reference): Remove unused parameter\n \t`checkconst', all callers changed.\n\t(build_type_conversion): Mark parameter `code' with\n\tATTRIBUTE_UNUSED.\n\t(build_expr_type_conversion): Initialize variable `conv'.\n\t* decl.c (push_namespace): Initialize variable `d'.\n  \t(define_case_label): Remove unused parameter `decl', all callers\n \tchanged.\n\t* decl2.c (lang_decode_option): If !USE_CPPLIB, mark parameter\n \t`argc' with ATTRIBUTE_UNUSED.\n\t(grokclassfn): Remove unused parameter `cname', all callers\n \tchanged.\n\t(check_java_method): Likewise for parameter `ctype'.\n\t(copy_assignment_arg_p): Mark parameter `virtualp' with\n\tATTRIBUTE_UNUSED.\n\t(finish_prevtable_vardecl): Likewise for parameter `prev'.\n\t* expr.c (extract_init): Likewise for parameters `decl' and `init'.\n\t* init.c (expand_aggr_init_1): Remove unused parameter\n \t`alias_this', all callers changed.\n\t(expand_aggr_init): Likewise.\n\t(expand_default_init): Likewise.\n\t(build_new_1): Initialize variable `susp'.\n\t(build_x_delete): Remove unused parameter `type', all callers\n\tchanged.\n\t* lex.c (set_typedecl_interface_info): Mark parameter `prev' with\n\tATTRIBUTE_UNUSED.\n\t(readescape): Use (unsigned) value in shift.\n\t(real_yylex): Likewise.  Likewise.  Also cast `sizeof' to int when\n\tcomparing to a signed quantity.\n\t* pt.c (maybe_end_member_template_processing): Remove unused\n \tparameter `decl', all callers changed.\n\t(check_explicit_specialization): Add braces around empty body in\n\tan else-statement.\n\t(current_template_args): Initialize variable `args'.\n\t(lookup_template_class): Likewise for variable `prev_local_enum'.\n\t(tsubst_decl): Likewise for variable `r'.\n\t(set_mangled_name_for_template_decl): Initialize variable\n\t`context'.\n\t* spew.c (scan_tokens): Change type of parameter `n' to unsigned.\n\tLikewise for variable `i'.\n\t(yylex): Initialize variable `trrr'.\n\t* typeck.c (compparms): Mark variable `strict' with\n\tATTRIBUTE_UNUSED.\n\t* xref.c (simplify_type): Cast argument of ctype function to\n\t`unsigned char'.\n\nFrom-SVN: r22587", "tree": {"sha": "0ef2e9f706331259b192888a1264f44e0e38a901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef2e9f706331259b192888a1264f44e0e38a901"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b370501f72e1efa7d1907d3f0e0850e5481f2c98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b370501f72e1efa7d1907d3f0e0850e5481f2c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b370501f72e1efa7d1907d3f0e0850e5481f2c98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b370501f72e1efa7d1907d3f0e0850e5481f2c98/comments", "author": null, "committer": null, "parents": [{"sha": "3ee9b638ab0cf4af289e82038a4de864d6bf5f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee9b638ab0cf4af289e82038a4de864d6bf5f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee9b638ab0cf4af289e82038a4de864d6bf5f4f"}], "stats": {"total": 246, "additions": 156, "deletions": 90}, "files": [{"sha": "a2cb2fc636e054d3f2a4e8156315bc32c2c4eb1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -1,3 +1,70 @@\n+Fri Sep 25 11:45:38 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-tree.h (define_case_label): Remove unused parameter.\n+\t(check_java_method): Likewise.\n+\t(grokclassfn): Likewise.\n+\t(expand_aggr_init): Likewise.\n+\t(build_x_delete): Likewise.\n+\t(maybe_end_member_template_processing): Likewise.\n+\t(unshare_base_binfos): Add prototype.\n+\t(string_conv_p): Likewise.\n+\t(my_friendly_abort): Mark with ATTRIBUTE_NORETURN.\n+\n+\t* cvt.c (build_up_reference): Remove unused parameter\n+ \t`checkconst', all callers changed.\n+\t(build_type_conversion): Mark parameter `code' with\n+\tATTRIBUTE_UNUSED.\n+\t(build_expr_type_conversion): Initialize variable `conv'.\n+\n+\t* decl.c (push_namespace): Initialize variable `d'.\n+  \t(define_case_label): Remove unused parameter `decl', all callers\n+ \tchanged.\n+\n+\t* decl2.c (lang_decode_option): If !USE_CPPLIB, mark parameter\n+ \t`argc' with ATTRIBUTE_UNUSED.\n+\t(grokclassfn): Remove unused parameter `cname', all callers\n+ \tchanged.\n+\t(check_java_method): Likewise for parameter `ctype'.\n+\t(copy_assignment_arg_p): Mark parameter `virtualp' with\n+\tATTRIBUTE_UNUSED.\n+\t(finish_prevtable_vardecl): Likewise for parameter `prev'.\n+\n+\t* expr.c (extract_init): Likewise for parameters `decl' and `init'.\n+\n+\t* init.c (expand_aggr_init_1): Remove unused parameter\n+ \t`alias_this', all callers changed.\n+\t(expand_aggr_init): Likewise.\n+\t(expand_default_init): Likewise.\n+\t(build_new_1): Initialize variable `susp'.\n+\t(build_x_delete): Remove unused parameter `type', all callers\n+\tchanged.\n+\n+\t* lex.c (set_typedecl_interface_info): Mark parameter `prev' with\n+\tATTRIBUTE_UNUSED.\n+\t(readescape): Use (unsigned) value in shift.\n+\t(real_yylex): Likewise.  Likewise.  Also cast `sizeof' to int when\n+\tcomparing to a signed quantity.\n+\n+\t* pt.c (maybe_end_member_template_processing): Remove unused\n+ \tparameter `decl', all callers changed.\n+\t(check_explicit_specialization): Add braces around empty body in\n+\tan else-statement.\n+\t(current_template_args): Initialize variable `args'.\n+\t(lookup_template_class): Likewise for variable `prev_local_enum'.\n+\t(tsubst_decl): Likewise for variable `r'.\n+\t(set_mangled_name_for_template_decl): Initialize variable\n+\t`context'.\n+\n+\t* spew.c (scan_tokens): Change type of parameter `n' to unsigned.\n+\tLikewise for variable `i'.\n+\t(yylex): Initialize variable `trrr'.\n+\n+\t* typeck.c (compparms): Mark variable `strict' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* xref.c (simplify_type): Cast argument of ctype function to\n+\t`unsigned char'.\n+\n 1998-09-24  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (language_lvalue_valid): Remove."}, {"sha": "8d1247e7192bb2310b843a184bcd26fccb9ad354", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -2496,7 +2496,7 @@ extern tree shadow_label\t\t\tPROTO((tree));\n extern tree define_label\t\t\tPROTO((char *, int, tree));\n extern void push_switch\t\t\t\tPROTO((void));\n extern void pop_switch\t\t\t\tPROTO((void));\n-extern void define_case_label\t\t\tPROTO((tree));\n+extern void define_case_label\t\t\tPROTO((void));\n extern tree getdecls\t\t\t\tPROTO((void));\n extern tree gettags\t\t\t\tPROTO((void));\n #if 0\n@@ -2567,14 +2567,14 @@ extern void revert_static_member_fn             PROTO((tree*, tree*, tree*));\n extern void cat_namespace_levels                PROTO((void));\n \n /* in decl2.c */\n-extern int check_java_method\t\t\tPROTO((tree, tree));\n+extern int check_java_method\t\t\tPROTO((tree));\n extern int lang_decode_option\t\t\tPROTO((int, char **));\n extern tree grok_method_quals\t\t\tPROTO((tree, tree, tree));\n extern void warn_if_unknown_interface\t\tPROTO((tree));\n extern tree grok_x_components\t\t\tPROTO((tree, tree));\n extern void maybe_retrofit_in_chrg\t\tPROTO((tree));\n extern void maybe_make_one_only\t\t\tPROTO((tree));\n-extern void grokclassfn\t\t\t\tPROTO((tree, tree, tree, enum overload_flags, tree));\n+extern void grokclassfn\t\t\t\tPROTO((tree, tree, enum overload_flags, tree));\n extern tree grok_alignof\t\t\tPROTO((tree));\n extern tree grok_array_decl\t\t\tPROTO((tree, tree));\n extern tree delete_sanity\t\t\tPROTO((tree, tree, int, int));\n@@ -2687,7 +2687,7 @@ extern void expand_direct_vtbls_init\t\tPROTO((tree, tree, int, int, tree));\n extern void emit_base_init\t\t\tPROTO((tree, int));\n extern void check_base_init\t\t\tPROTO((tree));\n extern void expand_member_init\t\t\tPROTO((tree, tree, tree));\n-extern void expand_aggr_init\t\t\tPROTO((tree, tree, int, int));\n+extern void expand_aggr_init\t\t\tPROTO((tree, tree, int));\n extern int is_aggr_typedef\t\t\tPROTO((tree, int));\n extern int is_aggr_type\t\t\t\tPROTO((tree, int));\n extern tree get_aggr_from_typedef\t\tPROTO((tree, int));\n@@ -2699,7 +2699,7 @@ extern tree decl_constant_value\t\t\tPROTO((tree));\n extern tree build_new\t\t\t\tPROTO((tree, tree, tree, int));\n extern tree build_new_1\t\t\t\tPROTO((tree));\n extern tree expand_vec_init\t\t\tPROTO((tree, tree, tree, tree, int));\n-extern tree build_x_delete\t\t\tPROTO((tree, tree, int, tree));\n+extern tree build_x_delete\t\t\tPROTO((tree, int, tree));\n extern tree build_delete\t\t\tPROTO((tree, tree, tree, int, int));\n extern tree build_vbase_delete\t\t\tPROTO((tree, tree));\n extern tree build_vec_delete\t\t\tPROTO((tree, tree, tree, tree, int));\n@@ -2782,7 +2782,7 @@ extern tree tsubst_expr\t\t\t\tPROTO ((tree, tree, tree));\n extern tree tsubst_copy\t\t\t\tPROTO ((tree, tree, tree));\n extern tree tsubst_chain\t\t\tPROTO((tree, tree));\n extern void maybe_begin_member_template_processing PROTO((tree));\n-extern void maybe_end_member_template_processing PROTO((tree));\n+extern void maybe_end_member_template_processing PROTO((void));\n extern tree finish_member_template_decl         PROTO((tree, tree));\n extern void begin_template_parm_list\t\tPROTO((void));\n extern void begin_specialization                PROTO((void));\n@@ -2967,6 +2967,7 @@ extern int yylex\t\t\t\tPROTO((void));\n extern tree arbitrate_lookup\t\t\tPROTO((tree, tree, tree));\n \n /* in tree.c */\n+extern void unshare_base_binfos\t\t\tPROTO((tree));\n extern int member_p\t\t\t\tPROTO((tree));\n extern int real_lvalue_p\t\t\tPROTO((tree));\n extern tree build_min\t\t\t\tPVPROTO((enum tree_code, tree, ...));\n@@ -3041,6 +3042,7 @@ extern void push_expression_obstack\t\tPROTO((void));\n   hash_tree_cons (0, 0, 0, (PURPOSE), (VALUE), (CHAIN))\n \n /* in typeck.c */\n+extern int string_conv_p\t\t\tPROTO((tree, tree, int));\n extern tree condition_conversion\t\tPROTO((tree));\n extern tree target_type\t\t\t\tPROTO((tree));\n extern tree require_complete_type\t\tPROTO((tree));\n@@ -3117,7 +3119,8 @@ extern void readonly_error\t\t\tPROTO((tree, char *, int));\n extern void abstract_virtuals_error\t\tPROTO((tree, tree));\n extern void signature_error\t\t\tPROTO((tree, tree));\n extern void incomplete_type_error\t\tPROTO((tree, tree));\n-extern void my_friendly_abort\t\t\tPROTO((int));\n+extern void my_friendly_abort\t\t\tPROTO((int))\n+  ATTRIBUTE_NORETURN;\n extern void my_friendly_assert\t\t\tPROTO((int, int));\n extern tree store_init_value\t\t\tPROTO((tree, tree));\n extern tree digest_init\t\t\t\tPROTO((tree, tree, tree *));"}, {"sha": "c76b743dc256b33b77ea149f06b2a30c84341132", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -36,7 +36,7 @@ extern tree static_aggregates;\n \n static tree cp_convert_to_pointer PROTO((tree, tree));\n static tree convert_to_pointer_force PROTO((tree, tree));\n-static tree build_up_reference PROTO((tree, tree, int, int));\n+static tree build_up_reference PROTO((tree, tree, int));\n \n /* Change of width--truncation and extension of integers or reals--\n    is represented with NOP_EXPR.  Proper functioning of many things\n@@ -343,9 +343,9 @@ convert_to_pointer_force (type, expr)\n    DIRECT_BIND in FLAGS controls how any temporaries are generated.  */\n \n static tree\n-build_up_reference (type, arg, flags, checkconst)\n+build_up_reference (type, arg, flags)\n      tree type, arg;\n-     int flags, checkconst;\n+     int flags;\n {\n   tree rval;\n   tree argtype = TREE_TYPE (arg);\n@@ -471,8 +471,7 @@ convert_to_reference (reftype, expr, convtype, flags, decl)\n \t    }\n \t}\n \n-      return build_up_reference (reftype, expr, flags,\n-\t\t\t\t ! (convtype & CONV_CONST));\n+      return build_up_reference (reftype, expr, flags);\n     }\n   else if ((convtype & CONV_REINTERPRET) && lvalue_p (expr))\n     {\n@@ -501,7 +500,7 @@ convert_to_reference (reftype, expr, convtype, flags, decl)\n \t\t\t\t\t \"converting\", 0, 0);\n       if (rval == error_mark_node)\n \treturn error_mark_node;\n-      rval = build_up_reference (reftype, rval, flags, 1);\n+      rval = build_up_reference (reftype, rval, flags);\n \n       if (rval && ! TYPE_READONLY (TREE_TYPE (reftype)))\n \tcp_pedwarn (\"initializing non-const `%T' with `%T' will use a temporary\",\n@@ -920,7 +919,7 @@ convert_force (type, expr, convtype)\n \n tree\n build_type_conversion (code, xtype, expr, for_sure)\n-     enum tree_code code;\n+     enum tree_code code ATTRIBUTE_UNUSED;\n      tree xtype, expr;\n      int for_sure;\n {\n@@ -942,7 +941,7 @@ build_expr_type_conversion (desires, expr, complain)\n      int complain;\n {\n   tree basetype = TREE_TYPE (expr);\n-  tree conv;\n+  tree conv = NULL_TREE;\n   tree winner = NULL_TREE;\n \n   if (expr == null_node "}, {"sha": "48d25d94be9b8a79580fb0cdc607b1c8e28dd1c9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -1773,7 +1773,7 @@ void\n push_namespace (name)\n      tree name;\n {\n-  tree d;\n+  tree d = NULL_TREE;\n   int need_new = 1;\n   int implicit_use = 0;\n   int global = 0;\n@@ -4409,8 +4409,7 @@ pop_switch ()\n /* XXX Note decl is never actually used. (bpk) */\n \n void\n-define_case_label (decl)\n-     tree decl;\n+define_case_label ()\n {\n   tree cleanup = last_cleanup_this_contour ();\n   struct binding_level *b = current_binding_level;\n@@ -7537,7 +7536,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t\t{\n \t\t  emit_line_note (DECL_SOURCE_FILE (decl),\n \t\t\t\t  DECL_SOURCE_LINE (decl));\n-\t\t  expand_aggr_init (decl, init, 0, flags);\n+\t\t  expand_aggr_init (decl, init, flags);\n \t\t}\n \n \t      /* Set this to 0 so we can tell whether an aggregate which\n@@ -7668,7 +7667,7 @@ expand_static_init (decl, init)\n       if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl))\n \t  || (init && TREE_CODE (init) == TREE_LIST))\n \t{\n-\t  expand_aggr_init (decl, init, 0, 0);\n+\t  expand_aggr_init (decl, init, 0);\n \t  do_pending_stack_adjust ();\n \t}\n       else if (init)\n@@ -8026,7 +8025,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t the following calls is supposed to do.  */\n       DECL_CONSTRUCTOR_P (decl) = 1;\n \n-      grokclassfn (ctype, declarator, decl, flags, quals);\n+      grokclassfn (ctype, decl, flags, quals);\n \n       decl = check_explicit_specialization (orig_declarator, decl,\n \t\t\t\t\t    template_count, \n@@ -8035,7 +8034,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n       if (decl == error_mark_node)\n \treturn error_mark_node;\n \n-      if ((! TYPE_FOR_JAVA (ctype) || check_java_method (ctype, decl))\n+      if ((! TYPE_FOR_JAVA (ctype) || check_java_method (decl))\n \t  && check)\n \t{\n \t  tmp = check_classfn (ctype, decl);\n@@ -8075,7 +8074,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t This call may change the type of the function (because\n \t of default parameters)!  */\n       if (ctype != NULL_TREE)\n-\tgrokclassfn (ctype, cname, decl, flags, quals);\n+\tgrokclassfn (ctype, decl, flags, quals);\n \n       decl = check_explicit_specialization (orig_declarator, decl,\n \t\t\t\t\t    template_count, \n@@ -8085,7 +8084,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \treturn error_mark_node;\n \n       if (ctype != NULL_TREE\n-\t  && (! TYPE_FOR_JAVA (ctype) || check_java_method (ctype, decl))\n+\t  && (! TYPE_FOR_JAVA (ctype) || check_java_method (decl))\n \t  && check)\n \t{\n \t  tmp = check_classfn (ctype, decl);"}, {"sha": "76abe6801b4c5b51b77454517394ebf5afc707ce", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -496,7 +496,11 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n \n int   \n lang_decode_option (argc, argv)\n-     int argc;\n+     int argc\n+#if !USE_CPPLIB\n+  ATTRIBUTE_UNUSED\n+#endif\n+  ;\n      char **argv;\n \n {\n@@ -1040,8 +1044,8 @@ maybe_retrofit_in_chrg (fn)\n    QUALS are the qualifiers for the this pointer.  */\n \n void\n-grokclassfn (ctype, cname, function, flags, quals)\n-     tree ctype, cname, function;\n+grokclassfn (ctype, function, flags, quals)\n+     tree ctype, function;\n      enum overload_flags flags;\n      tree quals;\n {\n@@ -1395,8 +1399,8 @@ acceptable_java_type (type)\n    Otherwise, print appropriate error messages, and return 0.  */\n \n int\n-check_java_method (ctype, method)\n-     tree ctype, method;\n+check_java_method (method)\n+     tree method;\n {\n   int jerr = 0;\n   tree arg_types = TYPE_ARG_TYPES (TREE_TYPE (method));\n@@ -1937,7 +1941,7 @@ grokoptypename (declspecs, declarator)\n int\n copy_assignment_arg_p (parmtype, virtualp)\n      tree parmtype;\n-     int virtualp;\n+     int virtualp ATTRIBUTE_UNUSED;\n {\n   if (current_class_type == NULL_TREE)\n     return 0;\n@@ -2656,7 +2660,7 @@ import_export_class (ctype)\n     \n int\n finish_prevtable_vardecl (prev, vars)\n-     tree prev, vars;\n+     tree prev ATTRIBUTE_UNUSED, vars;\n {\n   tree ctype = DECL_CONTEXT (vars);\n   import_export_class (ctype);\n@@ -3292,7 +3296,7 @@ do_ctors (start)\n \n \t  if (IS_AGGR_TYPE (TREE_TYPE (decl))\n \t      || TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n-\t    expand_aggr_init (decl, init, 0, 0);\n+\t    expand_aggr_init (decl, init, 0);\n \t  else if (TREE_CODE (init) == TREE_VEC)\n \t    {\n \t      expand_expr (expand_vec_init (decl, TREE_VEC_ELT (init, 0),"}, {"sha": "ae8a374f86a0a2ba9af1f76b1a425482322fb28d", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -148,7 +148,7 @@ cplus_expand_expr (exp, target, tmode, modifier)\n \t    init = convert_from_reference (init);\n \n \t    flag_access_control = 0;\n-\t    expand_aggr_init (slot, init, 0, LOOKUP_ONLYCONVERTING);\n+\t    expand_aggr_init (slot, init, LOOKUP_ONLYCONVERTING);\n \t    flag_access_control = old_ac;\n \n \t    if (TYPE_NEEDS_DESTRUCTOR (type))\n@@ -304,7 +304,7 @@ extract_scalar_init (decl, init)\n \n int\n extract_init (decl, init)\n-     tree decl, init;\n+     tree decl ATTRIBUTE_UNUSED, init ATTRIBUTE_UNUSED;\n {\n   return 0;\n \n@@ -405,8 +405,5 @@ do_case (start, end)\n \t    cp_error (\"case label `%E' within scope of cleanup or variable array\", start);\n \t}\n     }\n-  if (start)\n-    define_case_label (label);\n-  else\n-    define_case_label (NULL_TREE);\n+  define_case_label ();\n }"}, {"sha": "91c3d34acc50038226471d895544f5c4e7f633b1", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -367,7 +367,7 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \t    DECL_CONSTRUCTOR_P (decl) = 1;\n \n \t  /* This will set up DECL_ARGUMENTS for us.  */\n-\t  grokclassfn (ctype, cname, decl, flags, quals);\n+\t  grokclassfn (ctype, decl, flags, quals);\n \n \t  if (is_friend_template)\n \t    decl = DECL_TI_TEMPLATE (push_template_decl (decl));"}, {"sha": "c5ba2c4d23352393e13d09f21b0fc3367273d57f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -47,10 +47,8 @@ tree current_base_init_list, current_member_init_list;\n \n static void expand_aggr_vbase_init_1 PROTO((tree, tree, tree, tree));\n static void expand_aggr_vbase_init PROTO((tree, tree, tree, tree));\n-static void expand_aggr_init_1 PROTO((tree, tree, tree, tree, int,\n-\t\t\t\t      int));\n-static void expand_default_init PROTO((tree, tree, tree, tree, int,\n-\t\t\t\t       int));\n+static void expand_aggr_init_1 PROTO((tree, tree, tree, tree, int));\n+static void expand_default_init PROTO((tree, tree, tree, tree, int));\n static tree build_vec_delete_1 PROTO((tree, tree, tree, tree, tree,\n \t\t\t\t      int));\n static void perform_member_init PROTO((tree, tree, tree, int));\n@@ -177,7 +175,7 @@ perform_member_init (member, name, init, explicit)\n \t\t\t   array_type_nelts (type), TREE_VALUE (init), 1);\n \t}\n       else\n-\texpand_aggr_init (decl, init, 0, 0);\n+\texpand_aggr_init (decl, init, 0);\n     }\n   else\n     {\n@@ -589,7 +587,7 @@ emit_base_init (t, immediately)\n \t  member = convert_pointer_to_real (base_binfo, current_class_ptr);\n \t  expand_aggr_init_1 (base_binfo, NULL_TREE,\n \t\t\t      build_indirect_ref (member, NULL_PTR), init,\n-\t\t\t      BINFO_OFFSET_ZEROP (base_binfo), LOOKUP_NORMAL);\n+\t\t\t      LOOKUP_NORMAL);\n \n \t  expand_end_target_temps ();\n \t  free_temp_slots ();\n@@ -784,7 +782,7 @@ expand_aggr_vbase_init_1 (binfo, exp, addr, init_list)\n   if (init)\n     init = TREE_VALUE (init);\n   /* Call constructors, but don't set up vtables.  */\n-  expand_aggr_init_1 (binfo, exp, ref, init, 0, LOOKUP_COMPLAIN);\n+  expand_aggr_init_1 (binfo, exp, ref, init, LOOKUP_COMPLAIN);\n \n   expand_end_target_temps ();\n   free_temp_slots ();\n@@ -1037,9 +1035,8 @@ expand_member_init (exp, name, init)\n    perform the initialization, but not both, as it would be ambiguous.  */\n \n void\n-expand_aggr_init (exp, init, alias_this, flags)\n+expand_aggr_init (exp, init, flags)\n      tree exp, init;\n-     int alias_this;\n      int flags;\n {\n   tree type = TREE_TYPE (exp);\n@@ -1108,18 +1105,17 @@ expand_aggr_init (exp, init, alias_this, flags)\n \n   TREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n   expand_aggr_init_1 (TYPE_BINFO (type), exp, exp,\n-\t\t      init, alias_this, LOOKUP_NORMAL|flags);\n+\t\t      init, LOOKUP_NORMAL|flags);\n   TREE_TYPE (exp) = type;\n   TREE_READONLY (exp) = was_const;\n   TREE_THIS_VOLATILE (exp) = was_volatile;\n }\n \n static void\n-expand_default_init (binfo, true_exp, exp, init, alias_this, flags)\n+expand_default_init (binfo, true_exp, exp, init, flags)\n      tree binfo;\n      tree true_exp, exp;\n      tree init;\n-     int alias_this;\n      int flags;\n {\n   tree type = TREE_TYPE (exp);\n@@ -1212,11 +1208,10 @@ expand_default_init (binfo, true_exp, exp, init, alias_this, flags)\n    its description.  */\n \n static void\n-expand_aggr_init_1 (binfo, true_exp, exp, init, alias_this, flags)\n+expand_aggr_init_1 (binfo, true_exp, exp, init, flags)\n      tree binfo;\n      tree true_exp, exp;\n      tree init;\n-     int alias_this;\n      int flags;\n {\n   tree type = TREE_TYPE (exp);\n@@ -1247,7 +1242,7 @@ expand_aggr_init_1 (binfo, true_exp, exp, init, alias_this, flags)\n \n   /* We know that expand_default_init can handle everything we want\n      at this point.  */\n-  expand_default_init (binfo, true_exp, exp, init, alias_this, flags);\n+  expand_default_init (binfo, true_exp, exp, init, flags);\n }\n \n /* Report an error if NAME is not the name of a user-defined,\n@@ -2311,7 +2306,7 @@ build_new_1 (exp)\n     }\n   else\n     {\n-      int susp;\n+      int susp = 0;\n \n       if (flag_exceptions)\n \t/* We will use RVAL when generating an exception handler for\n@@ -2622,7 +2617,7 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, auto_delete,\n       /* This is the real size */\n       virtual_size = size_binop (PLUS_EXPR, virtual_size, BI_header_size);\n       body = build_expr_list (NULL_TREE,\n-\t\t\t      build_x_delete (ptype, base_tbd,\n+\t\t\t      build_x_delete (base_tbd,\n \t\t\t\t\t      2 | use_global_delete,\n \t\t\t\t\t      virtual_size));\n       body = build (COND_EXPR, void_type_node,\n@@ -2679,7 +2674,7 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, auto_delete,\n \t  /* True size with header.  */\n \t  virtual_size = size_binop (PLUS_EXPR, virtual_size, BI_header_size);\n \t}\n-      deallocate_expr = build_x_delete (ptype, base_tbd,\n+      deallocate_expr = build_x_delete (base_tbd,\n \t\t\t\t\t2 | use_global_delete,\n \t\t\t\t\tvirtual_size);\n       if (auto_delete_vec != integer_one_node)\n@@ -2793,7 +2788,7 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n \t  while (elts)\n \t    {\n \t      host_i -= 1;\n-\t      expand_aggr_init (baseref, TREE_VALUE (elts), 0, 0);\n+\t      expand_aggr_init (baseref, TREE_VALUE (elts), 0);\n \n \t      expand_assignment (base, baseinc, 0, 0);\n \t      elts = TREE_CHAIN (elts);\n@@ -2883,7 +2878,7 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n \t  if (from_array == 2)\n \t    expand_expr_stmt (build_modify_expr (to, NOP_EXPR, from));\n \t  else if (TYPE_NEEDS_CONSTRUCTING (type))\n-\t    expand_aggr_init (to, from, 0, 0);\n+\t    expand_aggr_init (to, from, 0);\n \t  else if (from)\n \t    expand_assignment (to, from, 0, 0);\n \t  else\n@@ -2897,7 +2892,7 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n \t\t\t   array_type_nelts (type), 0, 0);\n \t}\n       else\n-\texpand_aggr_init (build1 (INDIRECT_REF, type, base), init, 0, 0);\n+\texpand_aggr_init (build1 (INDIRECT_REF, type, base), init, 0);\n \n       expand_assignment (base,\n \t\t\t build (PLUS_EXPR, build_pointer_type (type), base, size),\n@@ -2975,8 +2970,8 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n    This does not call any destructors.  */\n \n tree\n-build_x_delete (type, addr, which_delete, virtual_size)\n-     tree type, addr;\n+build_x_delete (addr, which_delete, virtual_size)\n+     tree addr;\n      int which_delete;\n      tree virtual_size;\n {"}, {"sha": "20e4700826562de044fa5027d6203d6a0554c5ab", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -1178,7 +1178,7 @@ interface_strcmp (s)\n \n static void\n set_typedecl_interface_info (prev, vars)\n-     tree prev, vars;\n+     tree prev ATTRIBUTE_UNUSED, vars;\n {\n   tree id = get_time_identifier (DECL_SOURCE_FILE (vars));\n   tree fileinfo = IDENTIFIER_CLASS_VALUE (id);\n@@ -1284,7 +1284,7 @@ process_next_inline (t)\n   tree context;\n   struct pending_inline *i = (struct pending_inline *) TREE_PURPOSE (t);\n   context = hack_decl_function_context (i->fndecl);  \n-  maybe_end_member_template_processing (i->fndecl);\n+  maybe_end_member_template_processing ();\n   if (context)\n     pop_cp_function_context (context);\n   i = i->next;\n@@ -1935,7 +1935,7 @@ do_pending_defargs ()\n \n       if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n \t{\n-\t  maybe_end_member_template_processing (defarg_fn);\n+\t  maybe_end_member_template_processing ();\n \t  check_default_args (defarg_fn);\n \t}\n \n@@ -2703,7 +2703,8 @@ readescape (ignore_ptr)\n \t;\n       else if ((count - 1) * 4 >= TYPE_PRECISION (integer_type_node)\n \t       || (count > 1\n-\t\t   && ((1 << (TYPE_PRECISION (integer_type_node) - (count - 1) * 4))\n+\t\t   && (((unsigned)1 <<\n+\t\t\t(TYPE_PRECISION (integer_type_node) - (count - 1) * 4))\n \t\t       <= firstdig)))\n \tpedwarn (\"hex escape out of range\");\n       return code;\n@@ -4016,7 +4017,7 @@ real_yylex ()\n \t\tif (ignore)\n \t\t  goto tryagain;\n \t\tif (width < HOST_BITS_PER_INT\n-\t\t    && (unsigned) c >= (1 << width))\n+\t\t    && (unsigned) c >= ((unsigned)1 << width))\n \t\t  pedwarn (\"escape sequence out of range for character\");\n #ifdef MAP_CHARACTER\n \t\tif (ISPRINT (c))\n@@ -4177,7 +4178,7 @@ real_yylex ()\n \t\tif (ignore)\n \t\t  goto skipnewline;\n \t\tif (width < HOST_BITS_PER_INT\n-\t\t    && (unsigned) c >= (1 << width))\n+\t\t    && (unsigned) c >= ((unsigned)1 << width))\n \t\t  warning (\"escape sequence out of range for character\");\n \t      }\n \t    else if (c == '\\n')\n@@ -4237,7 +4238,7 @@ real_yylex ()\n \t\tfor (byte = 0; byte < WCHAR_BYTES; ++byte)\n \t\t  {\n \t\t    int value;\n-\t\t    if (byte >= sizeof (c))\n+\t\t    if (byte >= (int) sizeof(c))\n \t\t      value = 0;\n \t\t    else\n \t\t      value = (c >> (byte * width)) & bytemask;"}, {"sha": "e08eaff3e8cb1bc515d03081814d23053164f078", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -396,8 +396,7 @@ maybe_begin_member_template_processing (decl)\n /* Undo the effects of begin_member_template_processing. */\n \n void \n-maybe_end_member_template_processing (decl)\n-     tree decl;\n+maybe_end_member_template_processing ()\n {\n   if (! processing_template_decl)\n     return;\n@@ -1242,19 +1241,21 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t       check_specialization_scope.  */\n \t    return error_mark_node;\n \t  else\n-\t    /* It's not legal to write an explicit instantiation in\n-\t       class scope, e.g.:\n+\t    {\n+\t      /* It's not legal to write an explicit instantiation in\n+\t\t class scope, e.g.:\n \n-\t         class C { template void f(); }\n+\t           class C { template void f(); }\n \n-\t       This case is caught by the parser.  However, on\n-\t       something like:\n+\t\t   This case is caught by the parser.  However, on\n+\t\t   something like:\n \t       \n-\t         template class C { void f(); };\n+\t\t   template class C { void f(); };\n \n-\t       (which is illegal) we can get here.  The error will be\n-\t       issued later.  */\n-\t    ;\n+\t\t   (which is illegal) we can get here.  The error will be\n+\t\t   issued later.  */\n+\t      ;\n+\t    }\n \n \t  return decl;\n \t}\n@@ -1712,7 +1713,7 @@ tree\n current_template_args ()\n {\n   tree header;\n-  tree args;\n+  tree args = NULL_TREE;\n   int length = TMPL_PARMS_DEPTH (current_template_parms);\n   int l = length;\n \n@@ -3388,7 +3389,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n       int arg_depth;\n       int parm_depth;\n       int is_partial_instantiation;\n-      tree prev_local_enum;\n+      tree prev_local_enum = NULL_TREE;\n \n       template = most_general_template (template);\n       parmlist = DECL_TEMPLATE_PARMS (template);\n@@ -4860,7 +4861,7 @@ tsubst_decl (t, args, type, in_decl)\n {\n   int saved_lineno;\n   char* saved_filename;\n-  tree r;\n+  tree r = NULL_TREE;\n \n   /* Set the filename and linenumber to improve error-reporting.  */\n   saved_lineno = lineno;\n@@ -8362,7 +8363,7 @@ set_mangled_name_for_template_decl (decl)\n      tree decl;\n {\n   tree saved_namespace;\n-  tree context;\n+  tree context = NULL_TREE;\n   tree fn_type;\n   tree ret_type;\n   tree parm_types;"}, {"sha": "17c68d34b40c3c316c0dd548a924f6010fa30a7b", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -47,7 +47,7 @@ struct token  {\n \n static int do_aggr PROTO((void));\n static int probe_obstack PROTO((struct obstack *, tree, unsigned int));\n-static void scan_tokens PROTO((int));\n+static void scan_tokens PROTO((unsigned int));\n \n #ifdef SPEW_DEBUG\n static int num_tokens PROTO((void));\n@@ -155,9 +155,9 @@ consume_token ()\n \n static void\n scan_tokens (n)\n-     int n;\n+     unsigned int n;\n {\n-  int i;\n+  unsigned int i;\n   struct token *tmp;\n \n   /* We cannot read past certain tokens, so make sure we don't.  */\n@@ -244,7 +244,7 @@ int\n yylex ()\n {\n   struct token tmp_token;\n-  tree trrr;\n+  tree trrr = NULL_TREE;\n   int old_looking_for_typename = 0;\n \n  retry:"}, {"sha": "a3c75d9433739a7cfad99aea0f5255ff9e8769e2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -1222,7 +1222,7 @@ common_base_type (tt1, tt2)\n int\n compparms (parms1, parms2, strict)\n      tree parms1, parms2;\n-     int strict;\n+     int strict ATTRIBUTE_UNUSED;\n {\n   register tree t1 = parms1, t2 = parms2;\n "}, {"sha": "e38546e036788aedff1eace8c83893ecade1a6d7", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b370501f72e1efa7d1907d3f0e0850e5481f2c98/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=b370501f72e1efa7d1907d3f0e0850e5481f2c98", "patch": "@@ -731,7 +731,7 @@ simplify_type(typ)\n   int lvl, i;\n \n   i = strlen(typ);\n-  while (i > 0 && ISSPACE(typ[i-1])) typ[--i] = 0;\n+  while (i > 0 && ISSPACE((unsigned char) typ[i-1])) typ[--i] = 0;\n \n   if (i > 7 && STREQL(&typ[i-5], \"const\"))\n     {"}]}