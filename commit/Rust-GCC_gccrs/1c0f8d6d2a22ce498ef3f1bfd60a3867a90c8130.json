{"sha": "1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwZjhkNmQyYTIyY2U0OThlZjNmMWJmZDYwYTM4NjdhOTBjODEzMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:37:29Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:40:19Z"}, "message": "This is the initial building blocks for Traits\n\nWe can compile TraitImpls, since before we can actually start checking\ntrait obligations we need to be able to implement the trait first.\n\nMore desugaring is needed in HIR to make TraitImpls contain normal impl\nitems to avoid seperation in how impl blocks are handled.\n\nFixes #395 #472", "tree": {"sha": "4ac87f4d6dc73a876525a3dc3c280283f9baa1ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ac87f4d6dc73a876525a3dc3c280283f9baa1ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69b3e488803f684d9d956223a7f410d219cced24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b3e488803f684d9d956223a7f410d219cced24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b3e488803f684d9d956223a7f410d219cced24"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "a4fb6d12174799a93715117012d1a96ef67e23ca", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "patch": "@@ -42,6 +42,14 @@ class CompileInherentImplItem : public HIRCompileBase\n     item->accept_vis (compiler);\n   }\n \n+  static void Compile (TyTy::BaseType *self, HIR::TraitImplItem *item,\n+\t\t       Context *ctx, bool compile_fns,\n+\t\t       TyTy::BaseType *concrete = nullptr)\n+  {\n+    CompileInherentImplItem compiler (self, ctx, compile_fns, concrete);\n+    item->accept_vis (compiler);\n+  }\n+\n   void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *resolved_type = nullptr;"}, {"sha": "e68165206e7b5d66112609e2728e3ba2538d9467", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "patch": "@@ -290,6 +290,22 @@ class CompileItem : public HIRCompileBase\n \t\t\t\t\tcompile_fns);\n   }\n \n+  void visit (HIR::TraitImpl &impl_block) override\n+  {\n+    TyTy::BaseType *self_lookup = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (\n+\t  impl_block.get_type ()->get_mappings ().get_hirid (), &self_lookup))\n+      {\n+\trust_error_at (impl_block.get_locus (),\n+\t\t       \"failed to resolve type of impl\");\n+\treturn;\n+      }\n+\n+    for (auto &impl_item : impl_block.get_impl_items ())\n+      CompileInherentImplItem::Compile (self_lookup, impl_item.get (), ctx,\n+\t\t\t\t\tcompile_fns);\n+  }\n+\n private:\n   CompileItem (Context *ctx, bool compile_fns, TyTy::BaseType *concrete)\n     : HIRCompileBase (ctx), compile_fns (compile_fns), concrete (concrete)"}, {"sha": "bed89b859228c004ce862c49da5cf9953bfb02a5", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "patch": "@@ -41,6 +41,14 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n     item->accept_vis (resolver);\n   }\n \n+  static void\n+  Resolve (HIR::TraitImplItem *item, TyTy::BaseType *self,\n+\t   std::vector<TyTy::SubstitutionParamMapping> substitutions)\n+  {\n+    TypeCheckTopLevelImplItem resolver (self, substitutions);\n+    item->accept_vis (resolver);\n+  }\n+\n   void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n@@ -219,6 +227,12 @@ class TypeCheckImplItem : public TypeCheckBase\n     item->accept_vis (resolver);\n   }\n \n+  static void Resolve (HIR::TraitImplItem *item, TyTy::BaseType *self)\n+  {\n+    TypeCheckImplItem resolver (self);\n+    item->accept_vis (resolver);\n+  }\n+\n   void visit (HIR::Function &function) override\n   {\n     TyTy::BaseType *lookup;"}, {"sha": "47d9a8accf71c184274547ef4283959d51beb626", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "patch": "@@ -55,6 +55,21 @@ class TypeCheckItem : public TypeCheckBase\n       TypeCheckImplItem::Resolve (impl_item.get (), self);\n   }\n \n+  void visit (HIR::TraitImpl &impl_block) override\n+  {\n+    TyTy::BaseType *self = nullptr;\n+    if (!context->lookup_type (\n+\t  impl_block.get_type ()->get_mappings ().get_hirid (), &self))\n+      {\n+\trust_error_at (impl_block.get_locus (),\n+\t\t       \"failed to resolve Self for TraitImpl\");\n+\treturn;\n+      }\n+\n+    for (auto &impl_item : impl_block.get_impl_items ())\n+      TypeCheckImplItem::Resolve (impl_item.get (), self);\n+  }\n+\n   void visit (HIR::Function &function) override\n   {\n     TyTy::BaseType *lookup;"}, {"sha": "3ec231f631fb1d828cb097f6c2da20a6ed9e95d6", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "patch": "@@ -273,6 +273,47 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t\t\t  substitutions);\n   }\n \n+  void visit (HIR::TraitImpl &impl_block) override\n+  {\n+    std::vector<TyTy::SubstitutionParamMapping> substitutions;\n+    if (impl_block.has_generics ())\n+      {\n+\tfor (auto &generic_param : impl_block.get_generic_params ())\n+\t  {\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n+    // TODO\n+    // resolve the trait and check all items implemented\n+\n+    auto self\n+      = TypeCheckType::Resolve (impl_block.get_type ().get (), &substitutions);\n+    if (self == nullptr || self->get_kind () == TyTy::TypeKind::ERROR)\n+      return;\n+\n+    for (auto &impl_item : impl_block.get_impl_items ())\n+      TypeCheckTopLevelImplItem::Resolve (impl_item.get (), self,\n+\t\t\t\t\t  substitutions);\n+  }\n+\n private:\n   TypeCheckTopLevel () : TypeCheckBase () {}\n };"}, {"sha": "18e2779baf2f80bb7c3b41899ebcbe6a50722783", "filename": "gcc/testsuite/rust/compile/torture/traits1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits1.rs?ref=1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "patch": "@@ -0,0 +1,17 @@\n+trait Foo {\n+    fn bar() -> i32;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+struct Test(i32, f32);\n+\n+impl Foo for Test {\n+    fn bar() -> i32 {\n+        123\n+    }\n+}\n+\n+fn main() {\n+    let a: i32;\n+    a = Test::bar();\n+}"}, {"sha": "6df369de59a5ee201bdf6693bf1d81656e731e89", "filename": "gcc/testsuite/rust/compile/torture/traits2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits2.rs?ref=1c0f8d6d2a22ce498ef3f1bfd60a3867a90c8130", "patch": "@@ -0,0 +1,17 @@\n+trait Foo {\n+    fn bar() -> i32;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+struct Test<T>(T);\n+\n+impl<T> Foo for Test<T> {\n+    fn bar() -> i32 {\n+        123\n+    }\n+}\n+\n+fn main() {\n+    let a: i32;\n+    a = Test::<i32>::bar();\n+}"}]}