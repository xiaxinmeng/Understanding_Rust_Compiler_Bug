{"sha": "70bb498ad4fcb4c3e502b770ab848334e0730b39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiYjQ5OGFkNGZjYjRjM2U1MDJiNzcwYWI4NDgzMzRlMDczMGIzOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-11T17:48:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-11T17:48:22Z"}, "message": "* expr.c (expand_expr_addr_expr_1) Rename from expand_expr_addr_expr.\n\n        (expand_expr_addr_expr): New function.  Take ADDR_EXPR instead of the\n        operand of the ADDR_EXPR.\n        (expand_expr_real_1): Update to match.\n\nFrom-SVN: r87355", "tree": {"sha": "854d5dc6fbfba7a5cf0b697767d56a2aa32db0d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/854d5dc6fbfba7a5cf0b697767d56a2aa32db0d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70bb498ad4fcb4c3e502b770ab848334e0730b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70bb498ad4fcb4c3e502b770ab848334e0730b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70bb498ad4fcb4c3e502b770ab848334e0730b39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70bb498ad4fcb4c3e502b770ab848334e0730b39/comments", "author": null, "committer": null, "parents": [{"sha": "d1909f7b3a52b80e948059ac121016f53318f3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1909f7b3a52b80e948059ac121016f53318f3c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1909f7b3a52b80e948059ac121016f53318f3c9"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "80d1437f0569029f9a4fc703440a68f0e31cf1a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70bb498ad4fcb4c3e502b770ab848334e0730b39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70bb498ad4fcb4c3e502b770ab848334e0730b39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70bb498ad4fcb4c3e502b770ab848334e0730b39", "patch": "@@ -1,3 +1,10 @@\n+2004-09-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (expand_expr_addr_expr_1) Rename from expand_expr_addr_expr.\n+\t(expand_expr_addr_expr): New function.  Take ADDR_EXPR instead of the\n+\toperand of the ADDR_EXPR.\n+\t(expand_expr_real_1): Update to match.\n+\n 2004-09-11  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/17277"}, {"sha": "83c8be5240f5986ddd0224c0c9667cb1c669b6aa", "filename": "gcc/expr.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70bb498ad4fcb4c3e502b770ab848334e0730b39/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70bb498ad4fcb4c3e502b770ab848334e0730b39/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=70bb498ad4fcb4c3e502b770ab848334e0730b39", "patch": "@@ -6048,12 +6048,12 @@ expand_operands (tree exp0, tree exp1, rtx target, rtx *op0, rtx *op1,\n }\n \n \f\n-/* A subroutine of expand_expr.  Evaluate the address of EXP.\n+/* A subroutine of expand_expr_addr_expr.  Evaluate the address of EXP.\n    The TARGET, TMODE and MODIFIER arguments are as for expand_expr.  */\n \n static rtx\n-expand_expr_addr_expr (tree exp, rtx target, enum machine_mode tmode,\n-\t\t       enum expand_modifier modifier)\n+expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n+\t\t         enum expand_modifier modifier)\n {\n   rtx result, subtarget;\n   tree inner, offset;\n@@ -6080,7 +6080,7 @@ expand_expr_addr_expr (tree exp, rtx target, enum machine_mode tmode,\n \n     case CONST_DECL:\n       /* Recurse and make the output_constant_def clause above handle this.  */\n-      return expand_expr_addr_expr (DECL_INITIAL (exp), target,\n+      return expand_expr_addr_expr_1 (DECL_INITIAL (exp), target,\n \t\t\t\t    tmode, modifier);\n \n     case REALPART_EXPR:\n@@ -6140,7 +6140,7 @@ expand_expr_addr_expr (tree exp, rtx target, enum machine_mode tmode,\n   gcc_assert (inner != exp);\n \n   subtarget = offset || bitpos ? NULL_RTX : target;\n-  result = expand_expr_addr_expr (inner, subtarget, tmode, modifier);\n+  result = expand_expr_addr_expr_1 (inner, subtarget, tmode, modifier);\n \n   if (tmode == VOIDmode)\n     {\n@@ -6181,6 +6181,33 @@ expand_expr_addr_expr (tree exp, rtx target, enum machine_mode tmode,\n   return result;\n }\n \n+/* A subroutine of expand_expr.  Evaluate EXP, which is an ADDR_EXPR.\n+   The TARGET, TMODE and MODIFIER arguments are as for expand_expr.  */\n+\n+static rtx\n+expand_expr_addr_expr (tree exp, rtx target, enum machine_mode tmode,\n+\t\t       enum expand_modifier modifier)\n+{\n+  enum machine_mode rmode;\n+  rtx result;\n+\n+  result = expand_expr_addr_expr_1 (TREE_OPERAND (exp, 0), target,\n+\t\t\t\t    tmode, modifier);\n+\n+  /* Despite expand_expr claims concerning ignoring TMODE when not\n+     strictly convenient, stuff breaks if we don't honor it.  */\n+  if (tmode == VOIDmode)\n+    tmode = TYPE_MODE (TREE_TYPE (exp));\n+  rmode = GET_MODE (result);\n+  if (rmode == VOIDmode)\n+    rmode = tmode;\n+  if (rmode != tmode)\n+    result = convert_memory_address (tmode, result);\n+ \n+  return result;\n+}\n+\n+\n /* expand_expr: generate code for computing expression EXP.\n    An rtx for the computed value is returned.  The value is never null.\n    In the case of a void EXP, const0_rtx is returned.\n@@ -8064,8 +8091,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return const0_rtx;\n \n     case ADDR_EXPR:\n-      return expand_expr_addr_expr (TREE_OPERAND (exp, 0), target,\n-\t\t\t\t    tmode, modifier);\n+      return expand_expr_addr_expr (exp, target, tmode, modifier);\n \n     /* COMPLEX type for Extended Pascal & Fortran  */\n     case COMPLEX_EXPR:"}]}