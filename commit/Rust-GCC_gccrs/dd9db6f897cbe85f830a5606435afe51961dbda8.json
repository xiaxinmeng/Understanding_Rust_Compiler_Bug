{"sha": "dd9db6f897cbe85f830a5606435afe51961dbda8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5ZGI2Zjg5N2NiZTg1ZjgzMGE1NjA2NDM1YWZlNTE5NjFkYmRhOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-12T19:10:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-12T19:10:55Z"}, "message": "P0935R0 Eradicating unnecessarily explicit default constructors\n\nExplicit default constructors are problematic, so this change removes\nthem from <random> and <ext/random>, as per P0935R0.\n\n\t* include/bits/random.h (linear_congruential_engine)\n\t(mersenne_twister_engine, subtract_with_carry_engine, random_device)\n\t(uniform_real_distribution, normal_distribution)\n\t(lognormal_distribution, gamma_distribution, chi_squared_distribution)\n\t(cauchy_distribution, fisher_f_distribution, student_t_distribution)\n\t(bernoulli_distribution, binomial_distribution,geometric_distribution)\n\t(negative_binomial_distribution, exponential_distribution)\n\t(weibull_distribution, extreme_value_distribution): Add non-explicit\n\tdefault constructors. Remove default argument for first parameter of\n\texplicit constructors.\n\t(piecewise_constant_distribution, piecewise_linear_distribution):\n\tMake default constructor non-explicit.\n\t* include/bits/uniform_int_dist.h (uniform_int_distribution): Add\n\tnon-explicit default constructors. Remove default argument for first\n\tparameter of explicit constructor.\n\t(simd_fast_mersenne_twister_engine, beta_distribution)\n\t(rice_distribution, nakagami_distribution, pareto_distribution)\n\t(k_distribution, arcsine_distribution, hoyt_distribution)\n\t(triangular_distribution, von_mises_distribution)\n\t(hypergeometric_distribution, logistic_distribution)\n\t(uniform_inside_sphere_distribution): Likewise.\n\t(uniform_on_sphere_distribution): Make default constructor\n\tnon-explicit.\n\t* testsuite/26_numerics/random/bernoulli_distribution/cons/default.cc:\n\tTest for non-explicit default constructor. Fix references to standard.\n\t* testsuite/26_numerics/random/binomial_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/cauchy_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/chi_squared_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/discrete_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/exponential_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/extreme_value_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/fisher_f_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/gamma_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/geometric_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/lognormal_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/normal_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/poisson_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/student_t_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/uniform_real_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/weibull_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/ext/random/arcsine_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/beta_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/hoyt_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/hypergeometric_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/ext/random/k_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/logistic_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/nakagami_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/normal_mv_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/ext/random/pareto_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/rice_distribution/cons/default.cc: Likewise.\n\t* testsuite/ext/random/triangular_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/ext/random/uniform_on_sphere_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/ext/random/von_mises_distribution/cons/default.cc:\n\tLikewise.\n\t* testsuite/util/testsuite_common_types.h\n\t(implicitly_default_constructible): New helper.\n\nFrom-SVN: r261522", "tree": {"sha": "569acda1ce35ce3401fadf07906c81347bc203df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/569acda1ce35ce3401fadf07906c81347bc203df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd9db6f897cbe85f830a5606435afe51961dbda8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9db6f897cbe85f830a5606435afe51961dbda8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9db6f897cbe85f830a5606435afe51961dbda8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9db6f897cbe85f830a5606435afe51961dbda8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80a188beea98da44228d6030932af0769946f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80a188beea98da44228d6030932af0769946f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b80a188beea98da44228d6030932af0769946f83"}], "stats": {"total": 817, "additions": 671, "deletions": 146}, "files": [{"sha": "368a91ebf33591eb29dbe77938d05f51e06727fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -1,3 +1,92 @@\n+2018-06-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tP0935R0 Eradicating unnecessarily explicit default constructors\n+\t* include/bits/random.h (linear_congruential_engine)\n+\t(mersenne_twister_engine, subtract_with_carry_engine, random_device)\n+\t(uniform_real_distribution, normal_distribution)\n+\t(lognormal_distribution, gamma_distribution, chi_squared_distribution)\n+\t(cauchy_distribution, fisher_f_distribution, student_t_distribution)\n+\t(bernoulli_distribution, binomial_distribution,geometric_distribution)\n+\t(negative_binomial_distribution, exponential_distribution)\n+\t(weibull_distribution, extreme_value_distribution): Add non-explicit\n+\tdefault constructors. Remove default argument for first parameter of\n+\texplicit constructors.\n+\t(piecewise_constant_distribution, piecewise_linear_distribution):\n+\tMake default constructor non-explicit.\n+\t* include/bits/uniform_int_dist.h (uniform_int_distribution): Add\n+\tnon-explicit default constructors. Remove default argument for first\n+\tparameter of explicit constructor.\n+\t(simd_fast_mersenne_twister_engine, beta_distribution)\n+\t(rice_distribution, nakagami_distribution, pareto_distribution)\n+\t(k_distribution, arcsine_distribution, hoyt_distribution)\n+\t(triangular_distribution, von_mises_distribution)\n+\t(hypergeometric_distribution, logistic_distribution)\n+\t(uniform_inside_sphere_distribution): Likewise.\n+\t(uniform_on_sphere_distribution): Make default constructor\n+\tnon-explicit.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/cons/default.cc:\n+\tTest for non-explicit default constructor. Fix references to standard.\n+\t* testsuite/26_numerics/random/binomial_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/cauchy_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/discrete_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/exponential_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/gamma_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/lognormal_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/normal_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/student_t_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/weibull_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/arcsine_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/beta_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/hoyt_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/hypergeometric_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/k_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/logistic_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/nakagami_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/normal_mv_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/pareto_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/rice_distribution/cons/default.cc: Likewise.\n+\t* testsuite/ext/random/triangular_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/ext/random/von_mises_distribution/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/util/testsuite_common_types.h\n+\t(implicitly_default_constructible): New helper.\n+\n 2018-06-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/ios_base.h (ios::Init::Init(const Init&))"}, {"sha": "252b14d6d11a5e7d61ef08fc233111f5c925a5b3", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 90, "deletions": 40, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -264,6 +264,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr result_type modulus      = __m;\n       static constexpr result_type default_seed = 1u;\n \n+      /**\n+       * @brief Constructs a %linear_congruential_engine random number\n+       *        generator engine with seed 1.\n+       */\n+      linear_congruential_engine() : linear_congruential_engine(default_seed)\n+      { }\n+\n       /**\n        * @brief Constructs a %linear_congruential_engine random number\n        *        generator engine with seed @p __s.  The default seed value\n@@ -272,7 +279,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __s The initial seed value.\n        */\n       explicit\n-      linear_congruential_engine(result_type __s = default_seed)\n+      linear_congruential_engine(result_type __s)\n       { seed(__s); }\n \n       /**\n@@ -504,9 +511,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr result_type initialization_multiplier = __f;\n       static constexpr result_type default_seed = 5489u;\n \n-      // constructors and member function\n+      // constructors and member functions\n+\n+      mersenne_twister_engine() : mersenne_twister_engine(default_seed) { }\n+\n       explicit\n-      mersenne_twister_engine(result_type __sd = default_seed)\n+      mersenne_twister_engine(result_type __sd)\n       { seed(__sd); }\n \n       /**\n@@ -691,12 +701,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr size_t      long_lag     = __r;\n       static constexpr result_type default_seed = 19780503u;\n \n+      subtract_with_carry_engine() : subtract_with_carry_engine(default_seed)\n+      { }\n+\n       /**\n-       * @brief Constructs an explicitly seeded % subtract_with_carry_engine\n+       * @brief Constructs an explicitly seeded %subtract_with_carry_engine\n        *        random number generator.\n        */\n       explicit\n-      subtract_with_carry_engine(result_type __sd = default_seed)\n+      subtract_with_carry_engine(result_type __sd)\n       { seed(__sd); }\n \n       /**\n@@ -1590,24 +1603,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // constructors, destructors and member functions\n \n #ifdef _GLIBCXX_USE_RANDOM_TR1\n+    random_device() { _M_init(\"default\"); }\n \n     explicit\n-    random_device(const std::string& __token = \"default\")\n-    {\n-      _M_init(__token);\n-    }\n+    random_device(const std::string& __token) { _M_init(__token); }\n \n     ~random_device()\n     { _M_fini(); }\n-\n #else\n+    random_device() { _M_init(\"mt19937\"); }\n \n     explicit\n     random_device(const std::string& __token = \"mt19937\")\n     { _M_init_pretr1(__token); }\n-\n-  public:\n-\n #endif\n \n     static constexpr result_type\n@@ -1767,15 +1775,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      /**\n+       * @brief Constructs a uniform_real_distribution object.\n+       *\n+       * The lower bound is set to 0.0 and the upper bound to 1.0\n+       */\n+      uniform_real_distribution() : uniform_real_distribution(0.0) { }\n+\n       /**\n        * @brief Constructs a uniform_real_distribution object.\n        *\n        * @param __a [IN]  The lower bound of the distribution.\n        * @param __b [IN]  The upper bound of the distribution.\n        */\n       explicit\n-      uniform_real_distribution(_RealType __a = _RealType(0),\n-\t\t\t\t_RealType __b = _RealType(1))\n+      uniform_real_distribution(_RealType __a, _RealType __b = _RealType(1))\n       : _M_param(__a, __b)\n       { }\n \n@@ -1991,12 +2005,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      normal_distribution() : normal_distribution(0.0) { }\n+\n       /**\n        * Constructs a normal distribution with parameters @f$mean@f$ and\n        * standard deviation.\n        */\n       explicit\n-      normal_distribution(result_type __mean = result_type(0),\n+      normal_distribution(result_type __mean,\n \t\t\t  result_type __stddev = result_type(1))\n       : _M_param(__mean, __stddev), _M_saved_available(false)\n       { }\n@@ -2205,9 +2221,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_s;\n       };\n \n+      lognormal_distribution() : lognormal_distribution(0.0) { }\n+\n       explicit\n-      lognormal_distribution(_RealType __m = _RealType(0),\n-\t\t\t     _RealType __s = _RealType(1))\n+      lognormal_distribution(_RealType __m, _RealType __s = _RealType(1))\n       : _M_param(__m, __s), _M_nd()\n       { }\n \n@@ -2425,12 +2442,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      /**\n+       * @brief Constructs a gamma distribution with parameters 1 and 1.\n+       */\n+      gamma_distribution() : gamma_distribution(1.0) { }\n+\n       /**\n        * @brief Constructs a gamma distribution with parameters\n        * @f$\\alpha@f$ and @f$\\beta@f$.\n        */\n       explicit\n-      gamma_distribution(_RealType __alpha_val = _RealType(1),\n+      gamma_distribution(_RealType __alpha_val,\n \t\t\t _RealType __beta_val = _RealType(1))\n       : _M_param(__alpha_val, __beta_val), _M_nd()\n       { }\n@@ -2630,8 +2652,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_n;\n       };\n \n+      chi_squared_distribution() : chi_squared_distribution(1) { }\n+\n       explicit\n-      chi_squared_distribution(_RealType __n = _RealType(1))\n+      chi_squared_distribution(_RealType __n)\n       : _M_param(__n), _M_gd(__n / 2)\n       { }\n \n@@ -2856,9 +2880,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_b;\n       };\n \n+      cauchy_distribution() : cauchy_distribution(0.0) { }\n+\n       explicit\n-      cauchy_distribution(_RealType __a = _RealType(0),\n-\t\t\t  _RealType __b = _RealType(1))\n+      cauchy_distribution(_RealType __a, _RealType __b = 1.0)\n       : _M_param(__a, __b)\n       { }\n \n@@ -3062,8 +3087,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_n;\n       };\n \n+      fisher_f_distribution() : fisher_f_distribution(1.0) { }\n+\n       explicit\n-      fisher_f_distribution(_RealType __m = _RealType(1),\n+      fisher_f_distribution(_RealType __m,\n \t\t\t    _RealType __n = _RealType(1))\n       : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)\n       { }\n@@ -3285,8 +3312,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_n;\n       };\n \n+      student_t_distribution() : student_t_distribution(1.0) { }\n+\n       explicit\n-      student_t_distribution(_RealType __n = _RealType(1))\n+      student_t_distribution(_RealType __n)\n       : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)\n       { }\n \n@@ -3508,14 +3537,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   public:\n+    /**\n+     * @brief Constructs a Bernoulli distribution with likelihood 0.5.\n+     */\n+    bernoulli_distribution() : bernoulli_distribution(0.5) { }\n+\n     /**\n      * @brief Constructs a Bernoulli distribution with likelihood @p p.\n      *\n      * @param __p  [IN]  The likelihood of a true result being returned.\n      *                   Must be in the interval @f$[0, 1]@f$.\n      */\n     explicit\n-    bernoulli_distribution(double __p = 0.5)\n+    bernoulli_distribution(double __p)\n     : _M_param(__p)\n     { }\n \n@@ -3739,10 +3773,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool   _M_easy;\n       };\n \n-      // constructors and member function\n+      // constructors and member functions\n+\n+      binomial_distribution() : binomial_distribution(1) { }\n+\n       explicit\n-      binomial_distribution(_IntType __t = _IntType(1),\n-\t\t\t    double __p = 0.5)\n+      binomial_distribution(_IntType __t, double __p = 0.5)\n       : _M_param(__t, __p), _M_nd()\n       { }\n \n@@ -3964,9 +4000,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tdouble _M_log_1_p;\n       };\n \n-      // constructors and member function\n+      // constructors and member functions\n+\n+      geometric_distribution() : geometric_distribution(0.5) { }\n+\n       explicit\n-      geometric_distribution(double __p = 0.5)\n+      geometric_distribution(double __p)\n       : _M_param(__p)\n       { }\n \n@@ -4166,8 +4205,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tdouble _M_p;\n       };\n \n+      negative_binomial_distribution() : negative_binomial_distribution(1) { }\n+\n       explicit\n-      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)\n+      negative_binomial_distribution(_IntType __k, double __p = 0.5)\n       : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)\n       { }\n \n@@ -4399,9 +4440,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n       };\n \n-      // constructors and member function\n+      // constructors and member functions\n+\n+      poisson_distribution() : poisson_distribution(1.0) { }\n+\n       explicit\n-      poisson_distribution(double __mean = 1.0)\n+      poisson_distribution(double __mean)\n       : _M_param(__mean), _M_nd()\n       { }\n \n@@ -4610,12 +4654,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      /**\n+       * @brief Constructs an exponential distribution with inverse scale\n+       *        parameter 1.0\n+       */\n+      exponential_distribution() : exponential_distribution(1.0) { }\n+\n       /**\n        * @brief Constructs an exponential distribution with inverse scale\n        *        parameter @f$\\lambda@f$.\n        */\n       explicit\n-      exponential_distribution(const result_type& __lambda = result_type(1))\n+      exponential_distribution(_RealType __lambda)\n       : _M_param(__lambda)\n       { }\n \n@@ -4820,9 +4870,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_b;\n       };\n \n+      weibull_distribution() : weibull_distribution(1.0) { }\n+\n       explicit\n-      weibull_distribution(_RealType __a = _RealType(1),\n-\t\t\t   _RealType __b = _RealType(1))\n+      weibull_distribution(_RealType __a, _RealType __b = _RealType(1))\n       : _M_param(__a, __b)\n       { }\n \n@@ -5028,9 +5079,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_b;\n       };\n \n+      extreme_value_distribution() : extreme_value_distribution(0.0) { }\n+\n       explicit\n-      extreme_value_distribution(_RealType __a = _RealType(0),\n-\t\t\t\t _RealType __b = _RealType(1))\n+      extreme_value_distribution(_RealType __a, _RealType __b = _RealType(1))\n       : _M_param(__a, __b)\n       { }\n \n@@ -5496,7 +5548,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstd::vector<double> _M_cp;\n       };\n \n-      explicit\n       piecewise_constant_distribution()\n       : _M_param()\n       { }\n@@ -5769,7 +5820,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstd::vector<double> _M_m;\n       };\n \n-      explicit\n       piecewise_linear_distribution()\n       : _M_param()\n       { }"}, {"sha": "3b6d504466df9a7bf4b68fd434d24626e3f1aa4b", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -98,11 +98,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      /**\n+       * @brief Constructs a uniform distribution object.\n+       */\n+      uniform_int_distribution() : uniform_int_distribution(0) { }\n+\n       /**\n        * @brief Constructs a uniform distribution object.\n        */\n       explicit\n-      uniform_int_distribution(_IntType __a = 0,\n+      uniform_int_distribution(_IntType __a,\n \t\t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n       : _M_param(__a, __b)\n       { }"}, {"sha": "3c714f5672cf18b9919262fd20bc261f75100587", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 78, "deletions": 20, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -96,9 +96,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t\t/ sizeof(result_type));\n       static constexpr result_type default_seed = 5489u;\n \n-      // constructors and member function\n+      // constructors and member functions\n+\n+      simd_fast_mersenne_twister_engine()\n+      : simd_fast_mersenne_twister_engine(default_seed)\n+      { }\n+\n       explicit\n-      simd_fast_mersenne_twister_engine(result_type __sd = default_seed)\n+      simd_fast_mersenne_twister_engine(result_type __sd)\n       { seed(__sd); }\n \n       template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n@@ -454,12 +459,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      beta_distribution() : beta_distribution(1.0) { }\n+\n       /**\n        * @brief Constructs a beta distribution with parameters\n        * @f$\\alpha@f$ and @f$\\beta@f$.\n        */\n       explicit\n-      beta_distribution(_RealType __alpha_val = _RealType(1),\n+      beta_distribution(_RealType __alpha_val,\n \t\t\t_RealType __beta_val = _RealType(1))\n       : _M_param(__alpha_val, __beta_val)\n       { }\n@@ -998,9 +1005,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * @{\n        */\n+\n+      rice_distribution() : rice_distribution(0) { }\n+\n       explicit\n-      rice_distribution(result_type __nu_val = result_type(0),\n+      rice_distribution(result_type __nu_val,\n \t\t\tresult_type __sigma_val = result_type(1))\n       : _M_param(__nu_val, __sigma_val),\n \t_M_ndx(__nu_val, __sigma_val),\n@@ -1014,6 +1025,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_ndy(result_type(0), __p.sigma())\n       { }\n \n+      // @}\n+\n       /**\n        * @brief Resets the distribution state.\n        */\n@@ -1244,9 +1257,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * @{\n        */\n+\n+      nakagami_distribution() : nakagami_distribution(1) { }\n+\n       explicit\n-      nakagami_distribution(result_type __mu_val = result_type(1),\n+      nakagami_distribution(result_type __mu_val,\n \t\t\t    result_type __omega_val = result_type(1))\n       : _M_param(__mu_val, __omega_val),\n \t_M_gd(__mu_val, __omega_val / __mu_val)\n@@ -1258,6 +1275,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_gd(__p.mu(), __p.omega() / __p.mu())\n       { }\n \n+      // @}\n+\n       /**\n        * @brief Resets the distribution state.\n        */\n@@ -1481,9 +1500,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * @{\n        */\n+\n+      pareto_distribution() : pareto_distribution(1) { }\n+\n       explicit\n-      pareto_distribution(result_type __alpha_val = result_type(1),\n+      pareto_distribution(result_type __alpha_val,\n \t\t\t  result_type __mu_val = result_type(1))\n       : _M_param(__alpha_val, __mu_val),\n \t_M_ud()\n@@ -1495,6 +1518,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_ud()\n       { }\n \n+      // @}\n+\n       /**\n        * @brief Resets the distribution state.\n        */\n@@ -1731,9 +1756,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * @{\n        */\n+\n+      k_distribution() : k_distribution(1) { }\n+\n       explicit\n-      k_distribution(result_type __lambda_val = result_type(1),\n+      k_distribution(result_type __lambda_val,\n \t\t     result_type __mu_val = result_type(1),\n \t\t     result_type __nu_val = result_type(1))\n       : _M_param(__lambda_val, __mu_val, __nu_val),\n@@ -1748,6 +1777,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_gd2(__p.nu(), __p.mu() / __p.nu())\n       { }\n \n+      // @}\n+\n       /**\n        * @brief Resets the distribution state.\n        */\n@@ -1965,10 +1996,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * :{\n        */\n+\n+      arcsine_distribution() : arcsine_distribution(0) { }\n+\n       explicit\n-      arcsine_distribution(result_type __a = result_type(0),\n-\t\t\t   result_type __b = result_type(1))\n+      arcsine_distribution(result_type __a, result_type __b = result_type(1))\n       : _M_param(__a, __b),\n \t_M_ud(-1.5707963267948966192313216916397514L,\n \t      +1.5707963267948966192313216916397514L)\n@@ -1981,6 +2015,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      +1.5707963267948966192313216916397514L)\n       { }\n \n+      // @}\n+\n       /**\n        * @brief Resets the distribution state.\n        */\n@@ -2207,10 +2243,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * @{\n        */\n+\n+      hoyt_distribution() : hoyt_distribution(0.5) { }\n+\n       explicit\n-      hoyt_distribution(result_type __q = result_type(0.5L),\n-\t\t\tresult_type __omega = result_type(1))\n+      hoyt_distribution(result_type __q, result_type __omega = result_type(1))\n       : _M_param(__q, __omega),\n \t_M_ad(result_type(0.5L) * (result_type(1) + __q * __q),\n \t      result_type(0.5L) * (result_type(1) + __q * __q)\n@@ -2459,12 +2498,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_f_bc_ac;\n       };\n \n+      triangular_distribution() : triangular_distribution(0.0) { }\n+\n       /**\n        * @brief Constructs a triangle distribution with parameters\n        * @f$ a @f$, @f$ b @f$ and @f$ c @f$.\n        */\n       explicit\n-      triangular_distribution(result_type __a = result_type(0),\n+      triangular_distribution(result_type __a,\n \t\t\t      result_type __b = result_type(0.5),\n \t\t\t      result_type __c = result_type(1))\n       : _M_param(__a, __b, __c)\n@@ -2668,6 +2709,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n+\n       /** Parameter type. */\n       struct param_type\n       {\n@@ -2711,14 +2753,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_RealType _M_r;\n       };\n \n+      von_mises_distribution() : von_mises_distribution(0.0) { }\n+\n       /**\n        * @brief Constructs a von Mises distribution with parameters\n        * @f$\\mu@f$ and @f$\\kappa@f$.\n        */\n       explicit\n-      von_mises_distribution(result_type __mu = result_type(0),\n+      von_mises_distribution(result_type __mu,\n \t\t\t     result_type __kappa = result_type(1))\n-\t: _M_param(__mu, __kappa)\n+      : _M_param(__mu, __kappa)\n       { }\n \n       explicit\n@@ -2956,9 +3000,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tresult_type _M_n;\n       };\n \n-      // constructors and member function\n+      // constructors and member functions\n+\n+      hypergeometric_distribution() : hypergeometric_distribution(10) { }\n+\n       explicit\n-      hypergeometric_distribution(result_type __N = 10, result_type __K = 5,\n+      hypergeometric_distribution(result_type __N, result_type __K = 5,\n \t\t\t\t  result_type __n = 1)\n       : _M_param{__N, __K, __n}\n       { }\n@@ -3209,10 +3256,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * @{\n        */\n+      logistic_distribution() : logistic_distribution(0.0) { }\n+\n       explicit\n-      logistic_distribution(result_type __a = result_type(0),\n-\t\t\t    result_type __b = result_type(1))\n+      logistic_distribution(result_type __a, result_type __b = result_type(1))\n       : _M_param(__a, __b)\n       { }\n \n@@ -3221,6 +3270,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_param(__p)\n       { }\n \n+      // @}\n+\n       /**\n        * @brief Resets the distribution state.\n        */\n@@ -3401,7 +3452,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        * @brief Constructs a uniform on sphere distribution.\n        */\n-      explicit\n       uniform_on_sphere_distribution()\n       : _M_param(), _M_nd()\n       { }\n@@ -3609,9 +3659,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * @brief Constructors.\n+       * @{\n        */\n+\n+      uniform_inside_sphere_distribution()\n+      : uniform_inside_sphere_distribution(1.0)\n+      { }\n+\n       explicit\n-      uniform_inside_sphere_distribution(_RealType __radius = _RealType(1))\n+      uniform_inside_sphere_distribution(_RealType __radius)\n       : _M_param(__radius), _M_uosd()\n       { }\n \n@@ -3620,6 +3676,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_param(__p), _M_uosd()\n       { }\n \n+      // @}\n+\n       /**\n        * @brief Resets the distribution state.\n        */"}, {"sha": "42096c0fd34f95ab888b41bb156e58a952514254", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.3.1 Class bernoulli_distribution [rand.dist.bern.bernoulli]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -35,8 +37,15 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<bool>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::bernoulli_distribution>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "6cf82f1b86c481a56fdb71e66944ee70b6eb48ad", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.3.2 Class template binomial_distribution [rand.dist.bern.bin]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -36,8 +38,15 @@ test01()\n   VERIFY( u.max() == u.t() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::binomial_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "c1c71ce2ce796839b192ef324051edf9c4e997fd", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.4.4 Class template cauchy_distribution [rand.dist.norm.cauchy]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.5.4 Class template cauchy_distribution [rand.dist.norm.cauchy]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,15 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::cauchy_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "8ecf7c0ce4ad0d9e3d39e02824b26c3a0bbb5421", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.5.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -36,8 +38,15 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::chi_squared_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "0e837ed1046a6f33e45883330b43b31b02f69e4d", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.6.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -35,8 +37,15 @@ test01()\n   VERIFY( probablility[0] == 1.0 );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::discrete_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "7285bd351a33b81235564d6ec5cd28de927c4d3c", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.4.2 Class template exponential_distribution [rand.dist.pois.exp]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -36,8 +38,15 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::exponential_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "f9187fc7586ef33604d8dd98772e21f17e07e898", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.4.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,15 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::extreme_value_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "3032adea816faf78744b70a26fd8327572c0b28c", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.5.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,15 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::fisher_f_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "84d2bb73502a44ed36ccc3290a9d6161420b3cab", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/cons/default.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.4.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,15 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::gamma_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "d16a2f06db2590f20dc03a88bc3cec49d1d8dc8c", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.2.3 Class template geometric_distribution [rand.dist.bern.geo]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.3.3 Class template geometric_distribution [rand.dist.bern.geo]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -36,8 +38,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::geometric_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "5512905cf612e0af06e11fbb0dd99d644c5008da", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.5.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::lognormal_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "32847dfe69977b452d351622222ddf18bbdee5af", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.2.4 Class template negative_binomial_distribution [rand.dist.bern.negbin]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.3.4 Class template negative_binomial_distribution [rand.dist.bern.negbin]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::negative_binomial_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "dd3e0d2165507a500fad1ba88f38fd32e501dd7c", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.5.1 Class template normal_distribution [rand.dist.norm.normal]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::normal_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "84507b45ae7cd8c3d8cf14fcab0848693ce2166a", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.6.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -39,8 +41,16 @@ test01()\n   VERIFY( density[0] == 1.0 );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::piecewise_constant_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "e439adf2a3f915a19702e6c477a9998fce4baeb8", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.6.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -40,8 +42,16 @@ test01()\n   VERIFY( density[1] == 1.0 );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::piecewise_linear_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "c357581785ee826b637882841d3cf995013d5ec7", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.4.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -36,8 +38,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::poisson_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "06c7deef0949c8617b567834f99ac525a08b043c", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.5.6 Class template student_t_distribution [rand.dist.norm.t]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -36,8 +38,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::student_t_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "8774e660e59a930475695802fd8e89714ecad219", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,12 +20,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist.uni.int]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.2.1 Class template uniform_int_distribution [rand.dist.uni.int]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <limits>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<int>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::uniform_int_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "6a47a4dc47362f907428830047f9942aaaf2e4d0", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.1.1 Class template uniform_real_distribution [rand.dist.uni.real]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.2.2 Class template uniform_real_distribution [rand.dist.uni.real]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -36,8 +38,16 @@ test01()\n   VERIFY( u.max() == 1.0 );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::uniform_real_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "96db58f2ca60ff790b0c5b3e4cf7c7559348bc06", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/cons/default.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -20,11 +20,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// C++11\n+// 26.5.8.4.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+// 26.5.1.6 random number distribution requirements [rand.req.dist]\n \n #include <random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,8 +39,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n-int main()\n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<std::weibull_distribution<>>();\n+}\n+\n+int\n+main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "76b5166caf59f4527d958849e3ff7483f6e283b1", "filename": "libstdc++-v3/testsuite/ext/random/arcsine_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Farcsine_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -22,6 +22,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -33,9 +34,16 @@ test01()\n   VERIFY( u.max() == 1.0 );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::arcsine_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "9675a557a9a2279856bf8da95751c1998dadc224", "filename": "libstdc++-v3/testsuite/ext/random/beta_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fbeta_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fbeta_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fbeta_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -23,6 +23,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -34,8 +35,15 @@ test01()\n   VERIFY( u.max() == 1.0 );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::beta_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "53022345aea1a55927a304faa9ef2c951bc99065", "filename": "libstdc++-v3/testsuite/ext/random/hoyt_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhoyt_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -22,6 +22,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -34,9 +35,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::hoyt_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "d4078d4df37693155c80432fb53f2d0ab13c0a46", "filename": "libstdc++-v3/testsuite/ext/random/hypergeometric_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fhypergeometric_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -25,6 +25,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,9 +38,16 @@ test01()\n   VERIFY( u.max() == 1 );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::hypergeometric_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "cc11ccb27018f95c70f4688626bff5dd94860d3c", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -25,6 +25,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -38,9 +39,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::k_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "3d7db75524d57427bb8d76a4519e252e4519f2ca", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -25,6 +25,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -38,9 +39,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::logistic_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "ea473f2fca5faf01366df3ec85baeeb8413fb8da", "filename": "libstdc++-v3/testsuite/ext/random/nakagami_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnakagami_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnakagami_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnakagami_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -25,6 +25,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,9 +38,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::nakagami_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "c209a8d89dcca264ca8136ba75368d7057031553", "filename": "libstdc++-v3/testsuite/ext/random/normal_mv_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -23,6 +23,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -40,8 +41,15 @@ test01()\n   VERIFY( u.max()[1] == std::numeric_limits<result_type::value_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::normal_mv_distribution<2>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "368d7da19101319c36ca1898276c537242659a74", "filename": "libstdc++-v3/testsuite/ext/random/pareto_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fpareto_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -25,6 +25,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,9 +38,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::pareto_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "1483f87000a6ae52e9a98bb4289c8dd511ef58ed", "filename": "libstdc++-v3/testsuite/ext/random/rice_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Frice_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Frice_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Frice_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -25,6 +25,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -37,9 +38,16 @@ test01()\n   VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::rice_distribution<>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "c7c6aba59364d12c0f4a77d295efa917a09bce9d", "filename": "libstdc++-v3/testsuite/ext/random/triangular_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Ftriangular_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Ftriangular_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Ftriangular_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -23,6 +23,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -35,8 +36,15 @@ test01()\n   VERIFY( u.max() == 1.0 );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::triangular_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "e15a12d79ae43e46c432398c0a9387afc457a8b2", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -23,6 +23,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -35,9 +36,16 @@ test01()\n   __gnu_cxx::uniform_inside_sphere_distribution<5, float> u5;\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::uniform_inside_sphere_distribution<2>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "8aa81b328a2417742ea3a4bb75632d85f5c89fb0", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -24,6 +24,7 @@\n // 26.5.1.6 Random number distribution requirements [rand.req.dist]\n \n #include <ext/random>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -34,9 +35,16 @@ test01()\n   __gnu_cxx::uniform_on_sphere_distribution<5, float> u5;\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::uniform_on_sphere_distribution<2>>();\n+}\n+\n int\n main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "1a4784d49d9bd649be603a512e648c8d31d89e8a", "filename": "libstdc++-v3/testsuite/ext/random/von_mises_distribution/cons/default.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fvon_mises_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fvon_mises_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fvon_mises_distribution%2Fcons%2Fdefault.cc?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -23,6 +23,7 @@\n \n #include <ext/random>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -34,8 +35,15 @@ test01()\n   VERIFY( u.max() == __gnu_cxx::__math_constants<double>::__pi );\n }\n \n+void\n+test02()\n+{\n+  __gnu_test::implicitly_default_constructible test;\n+  test.operator()<__gnu_cxx::von_mises_distribution<>>();\n+}\n+\n int main()\n {\n   test01();\n-  return 0;\n+  test02();\n }"}, {"sha": "2e977b57cf123ae178a3ca98e4f537f3e7a13067", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9db6f897cbe85f830a5606435afe51961dbda8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=dd9db6f897cbe85f830a5606435afe51961dbda8", "patch": "@@ -687,6 +687,26 @@ namespace __gnu_test\n   };\n \n #if __cplusplus >= 201103L\n+  // Generator to test non-explicit default constructor.\n+  struct implicitly_default_constructible\n+  {\n+    template<typename _Tp>\n+      void\n+      operator()()\n+      {\n+\tstruct _Concept\n+\t{\n+\t  struct Aggregate { _Tp v; };\n+\n+\t  void __constraint()\n+\t  { Aggregate __v __attribute__((unused)) = { }; }\n+\t};\n+\n+\tvoid (_Concept::*__x)() __attribute__((unused))\n+\t  = &_Concept::__constraint;\n+      }\n+  };\n+\n   // Generator to test default constructor.\n   struct constexpr_default_constructible\n   {"}]}