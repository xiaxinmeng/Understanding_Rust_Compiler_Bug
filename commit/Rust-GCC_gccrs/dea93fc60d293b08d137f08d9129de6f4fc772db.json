{"sha": "dea93fc60d293b08d137f08d9129de6f4fc772db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhOTNmYzYwZDI5M2IwOGQxMzdmMDhkOTEyOWRlNmY0ZmM3NzJkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-01-18T20:35:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-18T20:35:57Z"}, "message": "PR c++/88875 - error with explicit list constructor.\n\nIn my patch for CWG issue 2267, I changed reference_binding to clear\nCONSTRUCTOR_IS_DIRECT_INIT on the argument init-list.  But that breaks if\nthere's another candidate for which CONSTRUCTOR_IS_DIRECT_INIT is correct.\nSo instead, let's encode in the conversion that we want to override the\nflag.\n\n\t* call.c (reference_binding): Don't modify EXPR.  Set\n\tneed_temporary_p on the ck_user conversion for a temporary.\n\t(convert_like_real): Check it.\n\nFrom-SVN: r268085", "tree": {"sha": "01b860565979a75d1659e1bb91a2eccf062a56f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01b860565979a75d1659e1bb91a2eccf062a56f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea93fc60d293b08d137f08d9129de6f4fc772db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea93fc60d293b08d137f08d9129de6f4fc772db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea93fc60d293b08d137f08d9129de6f4fc772db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea93fc60d293b08d137f08d9129de6f4fc772db/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f4a855d82a889cebcfca150a7a43909bcb6a346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4a855d82a889cebcfca150a7a43909bcb6a346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4a855d82a889cebcfca150a7a43909bcb6a346"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "4292930daf380ae392ec11a175b5b6271ff54618", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea93fc60d293b08d137f08d9129de6f4fc772db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea93fc60d293b08d137f08d9129de6f4fc772db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dea93fc60d293b08d137f08d9129de6f4fc772db", "patch": "@@ -1,3 +1,10 @@\n+2019-01-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88875 - error with explicit list constructor.\n+\t* call.c (reference_binding): Don't modify EXPR.  Set\n+\tneed_temporary_p on the ck_user conversion for a temporary.\n+\t(convert_like_real): Check it.\n+\n 2019-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/51628"}, {"sha": "16c3706cc5c71de720dc5128654331217d7b0435", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea93fc60d293b08d137f08d9129de6f4fc772db/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea93fc60d293b08d137f08d9129de6f4fc772db/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=dea93fc60d293b08d137f08d9129de6f4fc772db", "patch": "@@ -94,7 +94,7 @@ struct conversion {\n   BOOL_BITFIELD bad_p : 1;\n   /* If KIND is ck_ref_bind ck_base_conv, true to indicate that a\n      temporary should be created to hold the result of the\n-     conversion.  If KIND is ck_ambig, true if the context is\n+     conversion.  If KIND is ck_ambig or ck_user, true means force\n      copy-initialization.  */\n   BOOL_BITFIELD need_temporary_p : 1;\n   /* If KIND is ck_ptr or ck_pmem, true to indicate that a conversion\n@@ -1560,6 +1560,7 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n       from = TREE_TYPE (expr);\n     }\n \n+  bool copy_list_init = false;\n   if (expr && BRACE_ENCLOSED_INITIALIZER_P (expr))\n     {\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n@@ -1582,7 +1583,7 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n       /* Otherwise, if T is a reference type, a prvalue temporary of the type\n \t referenced by T is copy-list-initialized, and the reference is bound\n \t to that temporary. */\n-      CONSTRUCTOR_IS_DIRECT_INIT (expr) = false;\n+      copy_list_init = true;\n     skip:;\n     }\n \n@@ -1770,6 +1771,10 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n \n   if (conv->user_conv_p)\n     {\n+      if (copy_list_init)\n+\t/* Remember this was copy-list-initialization.  */\n+\tconv->need_temporary_p = true;\n+\n       /* If initializing the temporary used a conversion function,\n \t recalculate the second conversion sequence.  */\n       for (conversion *t = conv; t; t = next_conversion (t))\n@@ -6941,7 +6946,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n \t    && BRACE_ENCLOSED_INITIALIZER_P (expr)\n \t    /* Unless this is for direct-list-initialization.  */\n-\t    && !CONSTRUCTOR_IS_DIRECT_INIT (expr)\n+\t    && (!CONSTRUCTOR_IS_DIRECT_INIT (expr) || convs->need_temporary_p)\n \t    /* And in C++98 a default constructor can't be explicit.  */\n \t    && cxx_dialect >= cxx11)\n \t  {"}, {"sha": "26a63bf2aa7f00a65d5d88256a642cd45ddd35b3", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-explicit2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea93fc60d293b08d137f08d9129de6f4fc772db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea93fc60d293b08d137f08d9129de6f4fc772db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit2.C?ref=dea93fc60d293b08d137f08d9129de6f4fc772db", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/88875\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+struct X {\n+  X();\n+  explicit X(const std::initializer_list<int>& init);\n+};\n+\n+struct Y \n+{\n+  X x { 1, 2 }; // error\n+\n+  Y (int)\n+    : x {1, 2} // ok\n+  {\n+  }\n+  \n+};"}]}