{"sha": "b423779d2d40eb0603d8b0b09cf8a5f068efaf49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyMzc3OWQyZDQwZWIwNjAzZDhiMGIwOWNmOGE1ZjA2OGVmYWY0OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-19T16:21:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-19T16:21:45Z"}, "message": "Add prototypes for all static functions.\n\nFrom-SVN: r12041", "tree": {"sha": "ffac175b28f06b79f79ac830bbf23b93ea9875e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffac175b28f06b79f79ac830bbf23b93ea9875e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b423779d2d40eb0603d8b0b09cf8a5f068efaf49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b423779d2d40eb0603d8b0b09cf8a5f068efaf49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b423779d2d40eb0603d8b0b09cf8a5f068efaf49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b423779d2d40eb0603d8b0b09cf8a5f068efaf49/comments", "author": null, "committer": null, "parents": [{"sha": "b0cb541bf4244fa512af4fe2501a37a273a98245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0cb541bf4244fa512af4fe2501a37a273a98245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0cb541bf4244fa512af4fe2501a37a273a98245"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "0eaf98190d12b873f3a07937191b70ffd89db0b4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b423779d2d40eb0603d8b0b09cf8a5f068efaf49/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b423779d2d40eb0603d8b0b09cf8a5f068efaf49/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b423779d2d40eb0603d8b0b09cf8a5f068efaf49", "patch": "@@ -411,16 +411,20 @@ tree static_ctors, static_dtors;\n \n /* Forward declarations.  */\n \n-static tree grokparms (), grokdeclarator ();\n-tree pushdecl ();\n-tree builtin_function ();\n-void shadow_tag_warned ();\n-\n-static tree lookup_tag ();\n-static tree lookup_tag_reverse ();\n-tree lookup_name_current_level ();\n-static char *redeclaration_error_message ();\n-static void layout_array_type ();\n+static struct binding_level * make_binding_level\tPROTO((void));\n+static void clear_limbo_values\t\tPROTO((tree));\n+static int duplicate_decls\t\tPROTO((tree, tree, int));\n+static char *redeclaration_error_message PROTO((tree, tree));\n+static void storedecls\t\t\tPROTO((tree));\n+static void storetags\t\t\tPROTO((tree));\n+static tree lookup_tag\t\t\tPROTO((enum tree_code, tree,\n+\t\t\t\t\t       struct binding_level *, int));\n+static tree lookup_tag_reverse\t\tPROTO((tree));\n+static tree grokdeclarator\t\tPROTO((tree, tree, enum decl_context,\n+\t\t\t\t\t       int));\n+static tree grokparms\t\t\tPROTO((tree, int));\n+static int field_decl_cmp\t\tPROTO((tree *, tree *));\n+static void layout_array_type\t\tPROTO((tree));\n \f\n /* C-specific option variables.  */\n \n@@ -6790,7 +6794,9 @@ combine_parm_decls (specparms, parmlist, void_at_end)\n   \n   if (void_at_end)\n     return saveable_tree_cons (parmdecls, nonparms,\n-\t\t\t       nreverse (saveable_tree_cons (NULL_TREE, void_type_node, types)));\n+\t\t\t       nreverse (saveable_tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t     void_type_node,\n+\t\t\t\t\t\t\t     types)));\n \n   return saveable_tree_cons (parmdecls, nonparms, nreverse (types));\n }"}, {"sha": "d365caf16bb298ddbb3739c186e1b058b0dda187", "filename": "gcc/c-iterate.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b423779d2d40eb0603d8b0b09cf8a5f068efaf49/gcc%2Fc-iterate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b423779d2d40eb0603d8b0b09cf8a5f068efaf49/gcc%2Fc-iterate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-iterate.c?ref=b423779d2d40eb0603d8b0b09cf8a5f068efaf49", "patch": "@@ -30,20 +30,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"obstack.h\"\n #include \"rtl.h\"\n-\n-static void expand_stmt_with_iterators_1 ();\n-static tree collect_iterators ();\n-static void iterator_loop_prologue ();\n-static void iterator_loop_epilogue ();\n-static void add_ixpansion ();\n-static void delete_ixpansion();\n-static int top_level_ixpansion_p ();\n-static void istack_sublevel_to_current ();\n-\n-/* A special obstack, and a pointer to the start of\n-   all the data in it (so we can free everything easily).  */\n-static struct obstack ixp_obstack;\n-static char *ixp_firstobj;\n \f\n /*\n \t\tKEEPING TRACK OF EXPANSIONS\n@@ -96,11 +82,26 @@ struct iter_stack_node\n };\n \n struct iter_stack_node *iter_stack;\n-\n struct iter_stack_node sublevel_ixpansions;\n \n+/* A special obstack, and a pointer to the start of\n+   all the data in it (so we can free everything easily).  */\n+static struct obstack ixp_obstack;\n+static char *ixp_firstobj;\n+\n /* During collect_iterators, a list of SAVE_EXPRs already scanned.  */\n static tree save_exprs;\n+\n+static void expand_stmt_with_iterators_1 PROTO((tree, tree));\n+static tree collect_iterators\t\tPROTO((tree, tree));\n+static void iterator_loop_prologue\tPROTO((tree, rtx *, rtx *));\n+static void iterator_loop_epilogue\tPROTO((tree, rtx *, rtx *));\n+static int top_level_ixpansion_p\tPROTO((void));\n+static void isn_append\t\t\tPROTO((struct iter_stack_node *,\n+\t\t\t\t\t       struct iter_stack_node *));\n+static void istack_sublevel_to_current\tPROTO((void));\n+static void add_ixpansion\t\tPROTO((tree, rtx, rtx, rtx, rtx));\n+static void delete_ixpansion\t\tPROTO((tree));\n \f\n /* Initialize our obstack once per compilation.  */\n "}]}