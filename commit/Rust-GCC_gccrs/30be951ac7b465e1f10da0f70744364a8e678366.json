{"sha": "30be951ac7b465e1f10da0f70744364a8e678366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiZTk1MWFjN2I0NjVlMWYxMGRhMGY3MDc0NDM2NGE4ZTY3ODM2Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-06-09T16:21:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-06-09T16:21:36Z"}, "message": "cgraphunit.c (cgraph_create_edges): Do not walk BLOCK; finalize local statics when doing unit-at-a-time.\n\n\t* cgraphunit.c (cgraph_create_edges): Do not walk BLOCK; finalize\n\tlocal statics when doing unit-at-a-time.\n\t(cgraph_varpool_assemble_pending_decls): Output debug info.\n\t* dwarf2out.c (decls_for_scope): Skip local statics.\n\t(dwarf2out_decl): Handle local statics.\n\t* passes.c (rest_of_decl_compilation): Do not differentiate\n\tlocal and global statics in unit-at-a-time.\n\t* tree-inline.c (remap_decls): Put local static into\n\tunexpanded_vars_list rather than introducing duplicated VAR_DECL\n\tnode.\n\nFrom-SVN: r100802", "tree": {"sha": "2fd919060d8ecfb55a3a393c028c7ba1f01c5856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fd919060d8ecfb55a3a393c028c7ba1f01c5856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30be951ac7b465e1f10da0f70744364a8e678366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30be951ac7b465e1f10da0f70744364a8e678366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30be951ac7b465e1f10da0f70744364a8e678366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30be951ac7b465e1f10da0f70744364a8e678366/comments", "author": null, "committer": null, "parents": [{"sha": "2ffa9a0ce504d59abfa34e2b92d0f3e1aa3f6218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffa9a0ce504d59abfa34e2b92d0f3e1aa3f6218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffa9a0ce504d59abfa34e2b92d0f3e1aa3f6218"}], "stats": {"total": 72, "additions": 53, "deletions": 19}, "files": [{"sha": "9eb7ed5f5809ea020bb78384cb3b1aede77dcddf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30be951ac7b465e1f10da0f70744364a8e678366", "patch": "@@ -1,3 +1,16 @@\n+2005-06-09  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (cgraph_create_edges): Do not walk BLOCK; finalize\n+\tlocal statics when doing unit-at-a-time.\n+\t(cgraph_varpool_assemble_pending_decls): Output debug info.\n+\t* dwarf2out.c (decls_for_scope): Skip local statics.\n+\t(dwarf2out_decl): Handle local statics.\n+\t* passes.c (rest_of_decl_compilation): Do not differentiate\n+\tlocal and global statics in unit-at-a-time.\n+\t* tree-inline.c (remap_decls): Put local static into\n+\tunexpanded_vars_list rather than introducing duplicated VAR_DECL\n+\tnode.\n+\n 2005-06-09  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* config/rs6000/rs6000.c: (rs6000_insn_valid_within_doloop): Fix"}, {"sha": "67d5e49a78794a82278a13797bca1312816412e2", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=30be951ac7b465e1f10da0f70744364a8e678366", "patch": "@@ -543,26 +543,19 @@ cgraph_create_edges (struct cgraph_node *node, tree body)\n \t  walk_tree (bsi_stmt_ptr (bsi), record_reference, node, visited_nodes);\n       }\n \n-  /* Walk over any private statics that may take addresses of functions.  */\n-  if (TREE_CODE (DECL_INITIAL (body)) == BLOCK)\n+  /* Look for initializers of constant variables and private statics.  */\n+  for (step = DECL_STRUCT_FUNCTION (body)->unexpanded_var_list;\n+       step;\n+       step = TREE_CHAIN (step))\n     {\n-      for (step = BLOCK_VARS (DECL_INITIAL (body));\n-\t   step;\n-\t   step = TREE_CHAIN (step))\n-\tif (DECL_INITIAL (step))\n-\t  walk_tree (&DECL_INITIAL (step), record_reference, node, visited_nodes);\n+      tree decl = TREE_VALUE (step);\n+      if (TREE_CODE (decl) == VAR_DECL\n+\t  && (TREE_STATIC (decl) && !DECL_EXTERNAL (decl))\n+\t  && flag_unit_at_a_time)\n+\tcgraph_varpool_finalize_decl (decl);\n+      else if (TREE_CODE (decl) == VAR_DECL && DECL_INITIAL (decl))\n+\twalk_tree (&DECL_INITIAL (decl), record_reference, node, visited_nodes);\n     }\n-\n-  /* Also look here for private statics.  */\n-  if (DECL_STRUCT_FUNCTION (body))\n-    for (step = DECL_STRUCT_FUNCTION (body)->unexpanded_var_list;\n-\t step;\n-\t step = TREE_CHAIN (step))\n-      {\n-\ttree decl = TREE_VALUE (step);\n-\tif (DECL_INITIAL (decl) && TREE_STATIC (decl))\n-\t  walk_tree (&DECL_INITIAL (decl), record_reference, node, visited_nodes);\n-      }\n     \n   pointer_set_destroy (visited_nodes);\n   visited_nodes = NULL;\n@@ -743,6 +736,14 @@ cgraph_varpool_assemble_pending_decls (void)\n       if (!TREE_ASM_WRITTEN (decl) && !node->alias && !DECL_EXTERNAL (decl))\n \t{\n \t  assemble_variable (decl, 0, 1, 0);\n+\t  /* Local static vairables are neever seen by check_global_declarations\n+\t     so we need to output debug info by hand.  */\n+\t  if (decl_function_context (decl) && errorcount == 0 && sorrycount == 0)\n+\t    {\n+\t      timevar_push (TV_SYMOUT);\n+\t      (*debug_hooks->global_decl) (decl);\n+\t      timevar_pop (TV_SYMOUT);\n+\t    }\n \t  changed = true;\n \t}\n       node->next_needed = NULL;"}, {"sha": "1ae49905806f99e9611bf0effc37ec28b2bb8f34", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=30be951ac7b465e1f10da0f70744364a8e678366", "patch": "@@ -12523,6 +12523,11 @@ decls_for_scope (tree stmt, dw_die_ref context_die, int depth)\n \t  \n \t  if (die != NULL && die->die_parent == NULL)\n \t    add_child_die (context_die, die);\n+\t  /* Do not produce debug information for static variables since\n+\t     these might be optimized out.  We are called for these later\n+\t     in cgraph_varpool_analyze_pending_decls. */\n+\t  if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+\t    ;\n \t  else\n \t    gen_decl_die (decl, context_die);\n \t}\n@@ -13070,6 +13075,10 @@ dwarf2out_decl (tree decl)\n       if (DECL_EXTERNAL (decl) && !TREE_USED (decl))\n \treturn;\n \n+      /* For local statics lookup proper context die.  */\n+      if (TREE_STATIC (decl) && decl_function_context (decl))\n+\tcontext_die = lookup_decl_die (DECL_CONTEXT (decl));\n+\n       /* If we are in terse mode, don't generate any DIEs to represent any\n \t variable declarations or definitions.  */\n       if (debug_info_level <= DINFO_LEVEL_TERSE)"}, {"sha": "93126b020ea5d84ef18be188e045ca041cc7818b", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=30be951ac7b465e1f10da0f70744364a8e678366", "patch": "@@ -227,7 +227,7 @@ rest_of_decl_compilation (tree decl,\n \t  && !DECL_EXTERNAL (decl))\n \t{\n \t  if (flag_unit_at_a_time && !cgraph_global_info_ready\n-\t      && TREE_CODE (decl) != FUNCTION_DECL && top_level)\n+\t      && TREE_CODE (decl) != FUNCTION_DECL)\n \t    cgraph_varpool_finalize_decl (decl);\n \t  else\n \t    assemble_variable (decl, top_level, at_end, 0);"}, {"sha": "db4b1e913066cbf070ebfef16e13a4e724581e47", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30be951ac7b465e1f10da0f70744364a8e678366/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=30be951ac7b465e1f10da0f70744364a8e678366", "patch": "@@ -385,6 +385,17 @@ remap_decls (tree decls, inline_data *id)\n     {\n       tree new_var;\n \n+      /* We can not chain the local static declarations into the unexpanded_var_list\n+         as we can't duplicate them or break one decl rule.  Go ahead and link\n+         them into unexpanded_var_list.  */\n+      if (!lang_hooks.tree_inlining.auto_var_in_fn_p (old_var, id->callee)\n+\t  && !DECL_EXTERNAL (old_var))\n+\t{\n+\t  cfun->unexpanded_var_list = tree_cons (NULL_TREE, old_var,\n+\t\t\t\t\t\t cfun->unexpanded_var_list);\n+\t  continue;\n+\t}\n+\n       /* Remap the variable.  */\n       new_var = remap_decl (old_var, id);\n "}]}