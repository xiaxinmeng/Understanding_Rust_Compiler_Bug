{"sha": "f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBkMjA2MzE1MWJkZGMxYWIzY2JkMTc4YWZlMzI4MGE2OGFiNzZhYQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-09-06T07:31:23Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-09-06T07:31:23Z"}, "message": "S/390: Remove UNSPEC_LTREL_BASE\n\nIt was needed only for g5/g6 machines, which are now gone.\n\ngcc/ChangeLog:\n\n2018-09-06  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_decompose_constant_pool_ref):\n\tRemove UNSPEC_LTREL_BASE check.\n\t(annotate_constant_pool_refs): Likewise.\n\t(find_constant_pool_ref): Likewise.\n\t(find_ltrel_base): Removed.\n\t(replace_ltrel_base): Removed.\n\t(s390_mainpool_finish): Remove replace_ltrel_base call.\n\t(s390_chunkify_start): Remove pending LTREL_BASE logic.\n\t(s390_chunkify_finish): Remove replace_ltrel_base call.\n\t* config/s390/s390.md: Remove UNSPEC_LTREL_BASE.\n\nFrom-SVN: r264141", "tree": {"sha": "d1559b889c166b427245afe4a3cee5772bf0b5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1559b889c166b427245afe4a3cee5772bf0b5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d2063151bddc1ab3cbd178afe3280a68ab76aa/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "308d9cda32faed5d49ce3d0732b4ff465c423300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308d9cda32faed5d49ce3d0732b4ff465c423300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308d9cda32faed5d49ce3d0732b4ff465c423300"}], "stats": {"total": 145, "additions": 18, "deletions": 127}, "files": [{"sha": "f24c52ed8bab6285faef9c3fc9b795343b4aa012", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d2063151bddc1ab3cbd178afe3280a68ab76aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d2063151bddc1ab3cbd178afe3280a68ab76aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "patch": "@@ -1,3 +1,16 @@\n+2018-09-06  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_decompose_constant_pool_ref):\n+\tRemove UNSPEC_LTREL_BASE check.\n+\t(annotate_constant_pool_refs): Likewise.\n+\t(find_constant_pool_ref): Likewise.\n+\t(find_ltrel_base): Removed.\n+\t(replace_ltrel_base): Removed.\n+\t(s390_mainpool_finish): Remove replace_ltrel_base call.\n+\t(s390_chunkify_start): Remove pending LTREL_BASE logic.\n+\t(s390_chunkify_finish): Remove replace_ltrel_base call.\n+\t* config/s390/s390.md: Remove UNSPEC_LTREL_BASE.\n+\n 2018-09-06  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/86779"}, {"sha": "3e183ddb55c17f7af45456b70b1c425990794b04", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 126, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d2063151bddc1ab3cbd178afe3280a68ab76aa/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d2063151bddc1ab3cbd178afe3280a68ab76aa/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "patch": "@@ -2748,18 +2748,16 @@ s390_short_displacement (rtx disp)\n   return false;\n }\n \n-/* Attempts to split `ref', which should be either UNSPEC_LTREF or\n-   UNSPEC_LTREL_BASE, into (base + `disp').  In case pool base is not known,\n-   caller-provided `pool_base' is used.  If successful, also determines the\n+/* Attempts to split `ref', which should be UNSPEC_LTREF, into (base + `disp').\n+   If successful, also determines the\n    following characteristics of `ref': `is_ptr' - whether it can be an\n    LA argument, `is_base_ptr' - whether the resulting base is a well-known\n    base register (stack/frame pointer, etc), `is_pool_ptr` - whether it is\n    considered a literal pool pointer for purposes of avoiding two different\n    literal pool pointers per insn during or after reload (`B' constraint).  */\n static bool\n s390_decompose_constant_pool_ref (rtx *ref, rtx *disp, bool *is_ptr,\n-\t\t\t\t  bool *is_base_ptr, bool *is_pool_ptr,\n-\t\t\t\t  rtx pool_base)\n+\t\t\t\t  bool *is_base_ptr, bool *is_pool_ptr)\n {\n   if (!*ref)\n     return true;\n@@ -2778,13 +2776,6 @@ s390_decompose_constant_pool_ref (rtx *ref, rtx *disp, bool *is_ptr,\n \t*ref = XVECEXP (*ref, 0, 1);\n \tbreak;\n \n-      case UNSPEC_LTREL_BASE:\n-\tif (XVECLEN (*ref, 0) == 1)\n-\t  *ref = pool_base, *is_pool_ptr = true;\n-\telse\n-\t  *ref = XVECEXP (*ref, 0, 1);\n-\tbreak;\n-\n       default:\n \treturn false;\n       }\n@@ -2921,12 +2912,12 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n \n   /* Validate base register.  */\n   if (!s390_decompose_constant_pool_ref (&base, &disp, &pointer, &base_ptr,\n-\t\t\t\t\t &literal_pool, fake_pool_base))\n+\t\t\t\t\t &literal_pool))\n     return false;\n \n   /* Validate index register.  */\n   if (!s390_decompose_constant_pool_ref (&indx, &disp, &pointer, &indx_ptr,\n-\t\t\t\t\t &literal_pool, fake_pool_base))\n+\t\t\t\t\t &literal_pool))\n     return false;\n \n   /* Prefer to use pointer as base, not index.  */\n@@ -8156,16 +8147,6 @@ annotate_constant_pool_refs (rtx *x)\n \t}\n     }\n \n-  /* Annotate LTREL_BASE as well.  */\n-  if (GET_CODE (*x) == UNSPEC\n-      && XINT (*x, 1) == UNSPEC_LTREL_BASE)\n-    {\n-      rtx base = cfun->machine->base_reg;\n-      *x = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, XVECEXP (*x, 0, 0), base),\n-\t\t\t\t  UNSPEC_LTREL_BASE);\n-      return;\n-    }\n-\n   fmt = GET_RTX_FORMAT (GET_CODE (*x));\n   for (i = GET_RTX_LENGTH (GET_CODE (*x)) - 1; i >= 0; i--)\n     {\n@@ -8195,10 +8176,6 @@ find_constant_pool_ref (rtx x, rtx *ref)\n   int i, j;\n   const char *fmt;\n \n-  /* Ignore LTREL_BASE references.  */\n-  if (GET_CODE (x) == UNSPEC\n-      && XINT (x, 1) == UNSPEC_LTREL_BASE)\n-    return;\n   /* Likewise POOL_ENTRY insns.  */\n   if (GET_CODE (x) == UNSPEC_VOLATILE\n       && XINT (x, 1) == UNSPECV_POOL_ENTRY)\n@@ -8281,73 +8258,6 @@ replace_constant_pool_ref (rtx *x, rtx ref, rtx offset)\n     }\n }\n \n-/* Check whether X contains an UNSPEC_LTREL_BASE.\n-   Return its constant pool symbol if found, NULL_RTX otherwise.  */\n-\n-static rtx\n-find_ltrel_base (rtx x)\n-{\n-  int i, j;\n-  const char *fmt;\n-\n-  if (GET_CODE (x) == UNSPEC\n-      && XINT (x, 1) == UNSPEC_LTREL_BASE)\n-    return XVECEXP (x, 0, 0);\n-\n-  fmt = GET_RTX_FORMAT (GET_CODE (x));\n-  for (i = GET_RTX_LENGTH (GET_CODE (x)) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\t{\n-\t  rtx fnd = find_ltrel_base (XEXP (x, i));\n-\t  if (fnd)\n-\t    return fnd;\n-\t}\n-      else if (fmt[i] == 'E')\n-\t{\n-\t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    {\n-\t      rtx fnd = find_ltrel_base (XVECEXP (x, i, j));\n-\t      if (fnd)\n-\t\treturn fnd;\n-\t    }\n-\t}\n-    }\n-\n-  return NULL_RTX;\n-}\n-\n-/* Replace any occurrence of UNSPEC_LTREL_BASE in X with its base.  */\n-\n-static void\n-replace_ltrel_base (rtx *x)\n-{\n-  int i, j;\n-  const char *fmt;\n-\n-  if (GET_CODE (*x) == UNSPEC\n-      && XINT (*x, 1) == UNSPEC_LTREL_BASE)\n-    {\n-      *x = XVECEXP (*x, 0, 1);\n-      return;\n-    }\n-\n-  fmt = GET_RTX_FORMAT (GET_CODE (*x));\n-  for (i = GET_RTX_LENGTH (GET_CODE (*x)) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\t{\n-\t  replace_ltrel_base (&XEXP (*x, i));\n-\t}\n-      else if (fmt[i] == 'E')\n-\t{\n-\t  for (j = 0; j < XVECLEN (*x, i); j++)\n-\t    replace_ltrel_base (&XVECEXP (*x, i, j));\n-\t}\n-    }\n-}\n-\n-\n /* We keep a list of constants which we have to add to internal\n    constant tables in the middle of large functions.  */\n \n@@ -8832,9 +8742,6 @@ s390_mainpool_finish (struct constant_pool *pool)\n \n   for (rtx_insn *insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n-      if (INSN_P (insn))\n-\treplace_ltrel_base (&PATTERN (insn));\n-\n       if (NONJUMP_INSN_P (insn) || CALL_P (insn))\n \t{\n \t  rtx addr, pool_ref = NULL_RTX;\n@@ -8868,7 +8775,6 @@ s390_chunkify_start (void)\n {\n   struct constant_pool *curr_pool = NULL, *pool_list = NULL;\n   bitmap far_labels;\n-  rtx pending_ltrel = NULL_RTX;\n   rtx_insn *insn;\n \n   /* We need correct insn addresses.  */\n@@ -8879,17 +8785,6 @@ s390_chunkify_start (void)\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n-      /* Check for pending LTREL_BASE.  */\n-      if (INSN_P (insn))\n-\t{\n-\t  rtx ltrel_base = find_ltrel_base (PATTERN (insn));\n-\t  if (ltrel_base)\n-\t    {\n-\t      gcc_assert (ltrel_base == pending_ltrel);\n-\t      pending_ltrel = NULL_RTX;\n-\t    }\n-\t}\n-\n       if (NONJUMP_INSN_P (insn) || CALL_P (insn))\n \t{\n \t  rtx pool_ref = NULL_RTX;\n@@ -8904,25 +8799,13 @@ s390_chunkify_start (void)\n \n \t      s390_add_constant (curr_pool, constant, mode);\n \t      s390_add_pool_insn (curr_pool, insn);\n-\n-\t      /* Don't split the pool chunk between a LTREL_OFFSET load\n-\t\t and the corresponding LTREL_BASE.  */\n-\t      if (GET_CODE (constant) == CONST\n-\t\t  && GET_CODE (XEXP (constant, 0)) == UNSPEC\n-\t\t  && XINT (XEXP (constant, 0), 1) == UNSPEC_LTREL_OFFSET)\n-\t\t{\n-\t\t  gcc_assert (!pending_ltrel);\n-\t\t  pending_ltrel = pool_ref;\n-\t\t}\n \t    }\n \t}\n \n       if (JUMP_P (insn) || JUMP_TABLE_DATA_P (insn) || LABEL_P (insn))\n \t{\n \t  if (curr_pool)\n \t    s390_add_pool_insn (curr_pool, insn);\n-\t  /* An LTREL_BASE must follow within the same basic block.  */\n-\t  gcc_assert (!pending_ltrel);\n \t}\n \n       if (NOTE_P (insn) && NOTE_KIND (insn) == NOTE_INSN_VAR_LOCATION)\n@@ -8942,7 +8825,6 @@ s390_chunkify_start (void)\n \n   if (curr_pool)\n     s390_end_pool (curr_pool, NULL);\n-  gcc_assert (!pending_ltrel);\n \n   /* Find all labels that are branched into\n      from an insn belonging to a different chunk.  */\n@@ -9056,9 +8938,6 @@ s390_chunkify_finish (struct constant_pool *pool_list)\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n-      if (INSN_P (insn))\n-\treplace_ltrel_base (&PATTERN (insn));\n-\n       curr_pool = s390_find_pool (pool_list, insn);\n       if (!curr_pool)\n \tcontinue;"}, {"sha": "0d0f2181bfd182f6cff6617799a20282be832a0f", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d2063151bddc1ab3cbd178afe3280a68ab76aa/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d2063151bddc1ab3cbd178afe3280a68ab76aa/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f0d2063151bddc1ab3cbd178afe3280a68ab76aa", "patch": "@@ -75,7 +75,6 @@\n \n    ; GOT/PLT and lt-relative accesses\n    UNSPEC_LTREL_OFFSET\n-   UNSPEC_LTREL_BASE\n    UNSPEC_POOL_OFFSET\n    UNSPEC_GOTENT\n    UNSPEC_GOT"}]}