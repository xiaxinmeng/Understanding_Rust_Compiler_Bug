{"sha": "cf01124384cddd2ab5526a356a5ad7628c73f017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwMTEyNDM4NGNkZGQyYWI1NTI2YTM1NmE1YWQ3NjI4YzczZjAxNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-01T20:35:36Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-01T20:35:36Z"}, "message": "tm.texi (REGISTER_MOVE_COST): Add a mode argument.\n\n* tm.texi (REGISTER_MOVE_COST): Add a mode argument.\n* reload.c (REGISTER_MOVE_COST): Likewise.  Adjust all callers.\n* reload1.c (REGISTER_MOVE_COST): Likewise.\n* regclass.c (REGISTER_MOVE_COST): Likewise.\n(move_cost, may_move_in_cost, may_move_out_cost): Add mode\ndimension.  Adjust all users.\n(init_reg_sets_1): Iterate on all modes.\n* config/1750a/1750a.h (REGISTER_MOVE_COST): Adjust.\n* config/a29k/a29k.h (REGISTER_MOVE_COST): Adjust.\n* config/alpha/alpha.h (REGISTER_MOVE_COST): Adjust.\n* config/arc/arc.h (REGISTER_MOVE_COST): Adjust.\n* config/arm/arm.h (REGISTER_MOVE_COST): Adjust.\n* config/avr/avr.h (REGISTER_MOVE_COST): Adjust.\n* config/c4x/c4x.h (REGISTER_MOVE_COST): Adjust.\n* config/d30v/d30v.h (REGISTER_MOVE_COST): Adjust.\n* config/dsp16xx/dsp16xx.h (REGISTER_MOVE_COST): Adjust.\n* config/h8300/h8300.h (REGISTER_MOVE_COST): Adjust.\n* config/i386/i386.h (REGISTER_MOVE_COST): Adjust.\n* config/ia64/ia64.h (REGISTER_MOVE_COST): Adjust.\n* config/m32r/m32r.h (REGISTER_MOVE_COST): Adjust.\n* config/m68hc11/m68hc11.h (REGISTER_MOVE_COST): Adjust.\n* config/m68k/m68k.h (REGISTER_MOVE_COST): Adjust.\n* config/mcore/mcore.h (REGISTER_MOVE_COST): Adjust.\n* config/mips/mips.h (REGISTER_MOVE_COST): Adjust.\n* config/mn10200/mn10200.h (REGISTER_MOVE_COST): Adjust.\n* config/mn10300/mn10300.h (REGISTER_MOVE_COST): Adjust.\n* config/ns32k/ns32k.h (REGISTER_MOVE_COST): Adjust.\n* config/pa/pa.h (REGISTER_MOVE_COST): Adjust.\n* config/pdp11/pdp11.h (REGISTER_MOVE_COST): Adjust.\n* config/pj/pj.h (REGISTER_MOVE_COST): Adjust.\n* config/romp/romp.h (REGISTER_MOVE_COST): Adjust.\n* config/rs6000/rs6000.h (REGISTER_MOVE_COST): Adjust.\n* config/sh/sh.h (REGISTER_MOVE_COST): Adjust.\n* config/sparc/sparc.h (REGISTER_MOVE_COST): Adjust.\n\nFrom-SVN: r38597", "tree": {"sha": "6dfbf9e75a7a04b3792f908d155d1d310cac34a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dfbf9e75a7a04b3792f908d155d1d310cac34a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf01124384cddd2ab5526a356a5ad7628c73f017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf01124384cddd2ab5526a356a5ad7628c73f017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf01124384cddd2ab5526a356a5ad7628c73f017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf01124384cddd2ab5526a356a5ad7628c73f017/comments", "author": null, "committer": null, "parents": [{"sha": "e38fe8e0cb53df06102d753bc27124ce5930af3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38fe8e0cb53df06102d753bc27124ce5930af3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38fe8e0cb53df06102d753bc27124ce5930af3e"}], "stats": {"total": 178, "additions": 112, "deletions": 66}, "files": [{"sha": "ae5143424f7312351df349cb028b3fea1ac7a812", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,3 +1,40 @@\n+2001-01-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tm.texi (REGISTER_MOVE_COST): Add a mode argument.\n+\t* reload.c (REGISTER_MOVE_COST): Likewise.  Adjust all callers.\n+\t* reload1.c (REGISTER_MOVE_COST): Likewise.\n+\t* regclass.c (REGISTER_MOVE_COST): Likewise.\n+\t(move_cost, may_move_in_cost, may_move_out_cost): Add mode\n+\tdimension.  Adjust all users.\n+\t(init_reg_sets_1): Iterate on all modes.\n+\t* config/1750a/1750a.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/a29k/a29k.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/alpha/alpha.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/arc/arc.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/arm/arm.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/avr/avr.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/c4x/c4x.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/d30v/d30v.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/dsp16xx/dsp16xx.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/h8300/h8300.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/i386/i386.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/ia64/ia64.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/m32r/m32r.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/m68hc11/m68hc11.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/m68k/m68k.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/mcore/mcore.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/mips/mips.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/mn10200/mn10200.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/mn10300/mn10300.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/ns32k/ns32k.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/pa/pa.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/pdp11/pdp11.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/pj/pj.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/romp/romp.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/rs6000/rs6000.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/sh/sh.h (REGISTER_MOVE_COST): Adjust.\n+\t* config/sparc/sparc.h (REGISTER_MOVE_COST): Adjust.\n+\n 2001-01-01  Bernd Schmidt  <bernds@redhat.com>\n \n \t* alias.c (fixed_scalar_and_varying_struct): Adjust prototype of"}, {"sha": "94f4262ef0f6ed95f7eb303178040025316a7661", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000 Free Software Foundation, Inc.\n+   2000, 2001 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n@@ -904,7 +904,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n #define ADDRESS_COST(ADDRESS)  (memop_valid (ADDRESS) ?  3 : 10)\n \n-#define REGISTER_MOVE_COST(FROM,TO)\t2\n+#define REGISTER_MOVE_COST(MODE,FROM,TO)\t2\n \n #define MEMORY_MOVE_COST(M,C,I)\t\t4\n "}, {"sha": "12c6526ad38c50486129e214acd0a51ed97a229f", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for AMD Am29000 CPU.\n    Copyright (C) 1988, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   2000 Free Software Foundation, Inc.\n+   2000, 2001 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n This file is part of GNU CC.\n@@ -668,7 +668,7 @@ enum reg_class { NO_REGS, LR0_REGS, GENERAL_REGS, BP_REGS, FC_REGS, CR_REGS,\n    involving a general register is cheap, but moving between the other types\n    (even within a class) is two insns.  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n   ((CLASS1) == GENERAL_REGS || (CLASS2) == GENERAL_REGS ? 2 : 4)\n \n /* A C expressions returning the cost of moving data of MODE from a register to"}, {"sha": "dc2a1ec4439f220f5bc246580c6664df2619e095", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000 Free Software Foundation, Inc.\n+   2000, 2001 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -882,7 +882,7 @@ enum reg_class { NO_REGS, PV_REG, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    reduce the impact of not being able to allocate a pseudo to a\n    hard register.  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n   (((CLASS1) == FLOAT_REGS) == ((CLASS2) == FLOAT_REGS)\t\\\n    ? 2\t\t\t\t\t\t\t\\\n    : TARGET_FIX ? 3 : 4+2*alpha_memory_latency)"}, {"sha": "520266b6d88572f33f6d9e4ae114d0ab31dd160a", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000\n+   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -1098,7 +1098,7 @@ arc_select_cc_mode (OP, X, Y)\n \n /* Compute extra cost of moving data between one register class\n    and another.  */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2) 2\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) 2\n \n /* Compute the cost of moving data between registers and memory.  */\n /* Memory is 3 times as expensive as registers."}, {"sha": "6170187f3b593f33984c0598e42035bd193cf8c0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for ARM.\n-   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com)\n@@ -1312,7 +1312,7 @@ enum reg_class\n   ((CLASS) == FPU_REGS ? 1 : NUM_REGS (MODE))\n \n /* Moves between FPU_REGS and GENERAL_REGS are two memory insns.  */\n-#define REGISTER_MOVE_COST(FROM, TO)\t\t\t\\\n+#define REGISTER_MOVE_COST(MODE, FROM, TO)\t\t\\\n   (TARGET_ARM ?\t\t\t\t\t\t\\\n    ((FROM) == FPU_REGS && (TO) != FPU_REGS ? 20 :\t\\\n     (FROM) != FPU_REGS && (TO) == FPU_REGS ? 20 : 2)\t\\"}, {"sha": "468860427c5f21f9c3917e2c11737f3ecf6de863", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for ATMEL AVR at90s8515, ATmega103/103L, ATmega603/603L microcontrollers.\n \n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n This file is part of GNU CC.\n@@ -1864,9 +1864,9 @@ do {\t\t\t\t\t\t\t\t\t    \\\n    This macro will normally either not be defined or be defined as a\n    constant.  */\n \n-#define REGISTER_MOVE_COST(FROM, TO) ((FROM) == STACK_REG ? 6 : \\\n-\t\t\t\t      (TO) == STACK_REG ? 12    \\\n-\t\t\t\t      : 2)\n+#define REGISTER_MOVE_COST(MODE, FROM, TO) ((FROM) == STACK_REG ? 6 \\\n+\t\t\t\t\t    : (TO) == STACK_REG ? 12 \\\n+\t\t\t\t\t    : 2)\n /* A C expression for the cost of moving data from a register in class\n    FROM to one in class TO.  The classes are expressed using the\n    enumeration values such as `GENERAL_REGS'.  A value of 2 is the"}, {"sha": "eec7916d8fd6c5701d5b65b1cf4f600d6a024517", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  TMS320C[34]x\n    Copyright (C) 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n    Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n               and Herman Ten Brugge (Haj.Ten.Brugge@net.HCC.nl).\n@@ -1889,7 +1889,7 @@ if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n /* Compute extra cost of moving data between one register class\n    and another.  */\n \n-#define REGISTER_MOVE_COST(FROM, TO)\t2\n+#define REGISTER_MOVE_COST(MODE, FROM, TO)\t2\n \n /* Memory move cost is same as fast register move.  Maybe this should\n    be bumped up?.  */"}, {"sha": "0792b074cb20c95e3903bbeb96b560f1ad571cf6", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for Mitsubishi D30V.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n    This file is part of GNU CC.\n@@ -3766,7 +3767,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the constraints are met.  You should do this if the `movM' pattern's\n    constraints do not allow such copying.  */\n \n-#define REGISTER_MOVE_COST(FROM, TO)\t\t\t\t\t\\\n+#define REGISTER_MOVE_COST(MODE, FROM, TO)\t\t\t\t\\\n   (((FROM) != GPR_REGS && (FROM) != EVEN_REGS\t\t\t\t\\\n    && (TO) != GPR_REGS && (TO) != EVEN_REGS) ? 4 : 2)\n "}, {"sha": "ccb637883fe456946916de592be21b1547426a47", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  AT&T DSP1600.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998,2000\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Michael Collison (collison@world.std.com).\n \n@@ -1517,7 +1517,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n    class FROM to one in class TO. The classes are expressed using\n    the enumeration values such as GENERAL_REGS. A value of 2 is\n    the default. */\n-#define REGISTER_MOVE_COST(FROM,TO)  dsp16xx_register_move_cost (FROM, TO)\n+#define REGISTER_MOVE_COST(MODE,FROM,TO)  dsp16xx_register_move_cost (FROM, TO)\n \n /* A C expression for the cost of moving data of mode MODE between\n    a register and memory. A value of 2 is the default. */"}, {"sha": "a0862c5ec8aa2cc1541fec8a8bbbb615173b2c93", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler. \n    Hitachi H8/300 version generating coff \n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000\n-   Free SoftwareFoundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n+   2000, 2001 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n \n@@ -471,7 +471,7 @@ enum reg_class {\n    so define REGISTER_MOVE_COST to be > 2 so that reload never\n    shortcuts.  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)  \\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)  \\\n   (CLASS1 == MAC_REGS || CLASS2 == MAC_REGS ? 6 : 3)\n \f\n /* Stack layout; function entry, exit and calling.  */"}, {"sha": "4f59fb86defdf4b4bcb7aa81db12a81106847147", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler for IA-32.\n-   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2339,7 +2339,7 @@ while (0)\n    arbitary high cost.\n  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\t\\\n   ((FLOAT_CLASS_P (CLASS1) && ! FLOAT_CLASS_P (CLASS2))\t\t\\\n    ? (MEMORY_MOVE_COST (DFmode, CLASS1, 0)\t\t\t\\\n      + MEMORY_MOVE_COST (DFmode, CLASS2, 1))\t\t\t\\"}, {"sha": "d959c70cda30d81474d7dddb7e17ae4b3c7c36e4", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -1885,7 +1885,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* A C expression for the cost of moving data from a register in class FROM to\n    one in class TO.  */\n \n-#define REGISTER_MOVE_COST(FROM, TO) \\\n+#define REGISTER_MOVE_COST(MODE, FROM, TO) \\\n   ia64_register_move_cost((FROM), (TO))\n \n /* A C expression for the cost of moving data of mode M between a"}, {"sha": "bdc8eaaab3ac83c046b4f84e8d3774024a6a6434", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler, Mitsubishi M32R cpu.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1469,7 +1470,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Compute extra cost of moving data between one register class\n    and another.  */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2) 2\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) 2\n \n /* Compute the cost of moving data between registers and memory.  */\n /* Memory is 3 times as expensive as registers."}, {"sha": "26ea8aa9e18a49e3856b3c17dbc5309f857e94cb", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n \n This file is part of GNU CC.\n@@ -1511,7 +1511,7 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n #define ADDRESS_COST(RTX) m68hc11_address_cost (RTX)\n \n /* Move costs between classes of registers */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n     (m68hc11_register_move_cost (CLASS1, CLASS2))\n \n /* Move cost between register and memory."}, {"sha": "c20cba1b99d5621ec38f46b413c72df35fd30819", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,7 @@\n-/* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n-   Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler.\n+   Sun 68000/68020 version.\n+   Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -869,7 +870,7 @@ extern enum reg_class regno_reg_class[];\n   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* Moves between fp regs and other regs are two insns.  */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n   (((CLASS1) == FP_REGS && (CLASS2) != FP_REGS)\t        \\\n     || ((CLASS2) == FP_REGS && (CLASS1) != FP_REGS)\t\\\n     ? 4 : 2)\n@@ -882,7 +883,7 @@ extern enum reg_class regno_reg_class[];\n \n /* Moves between fp regs and other regs are two insns.  */\n /* Likewise for high fpa regs and other regs.  */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n   ((((CLASS1) == FP_REGS && (CLASS2) != FP_REGS)\t\\\n     || ((CLASS2) == FP_REGS && (CLASS1) != FP_REGS)\t\\\n     || ((CLASS1) == FPA_REGS && (CLASS2) != FPA_REGS)\t\\"}, {"sha": "a6eb358a737177cb3372da9f9e0a48929265527d", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for Motorola M*CORE Processor.\n-   Copyright (C) 1993, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1066,7 +1066,7 @@ extern enum reg_class reg_class_from_letter[];\n \n /* Compute extra cost of moving data between one register class\n    and another.  All register moves are cheap.  */\n-#define REGISTER_MOVE_COST(SRCCLASS, DSTCLASS) 2\n+#define REGISTER_MOVE_COST(MODE, SRCCLASS, DSTCLASS) 2\n \n #define WORD_REGISTER_OPERATIONS\n "}, {"sha": "19d4b8f6ecae357272f6eb5513f6d374a5b3dc8d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n    64 bit r4000 support by Ian Lance Taylor (ian@cygnus.com) and\n@@ -3622,7 +3622,7 @@ while (0)\n    compare/branch to test the input value to see which instruction we\n    need to use.  This gets pretty messy, but it is feasible. */\n \n-#define REGISTER_MOVE_COST(FROM, TO)\t\\\n+#define REGISTER_MOVE_COST(MODE, FROM, TO)\t\\\n   ((FROM) == M16_REGS && GR_REG_CLASS_P (TO) ? 2\t\t\t\\\n    : (FROM) == M16_NA_REGS && GR_REG_CLASS_P (TO) ? 2\t\t\t\\\n    : GR_REG_CLASS_P (FROM) && (TO) == M16_REGS ? 2\t\t\t\\"}, {"sha": "fe552ce0d4644df1434b8448567c050a59290485", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,7 @@\n-/* Definitions of target machine for GNU compiler. Matsushita MN10200 series\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler.\n+   Matsushita MN10200 series\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -781,7 +783,7 @@ struct cum_arg { int nbytes; };\n \n /* Make moves between different classes more expensive than moves\n    within the same class.  */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)  (CLASS1 != CLASS2 ? 4 : 2)\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)  (CLASS1 != CLASS2 ? 4 : 2)\n \n /* Provide the costs of a rtl expression.  This is in the body of a\n    switch on CODE. "}, {"sha": "e6425376e6301e132d8a3e602149e2f82c380a4e", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,7 @@\n-/* Definitions of target machine for GNU compiler. Matsushita MN10300 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler.\n+   Matsushita MN10300 series\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -838,7 +840,7 @@ struct cum_arg {int nbytes; };\n   case CONST_DOUBLE:\t\t\t\t\t\t\t\\\n     return 8;\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2) \\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) \\\n   ((CLASS1 == CLASS2 && (CLASS1 == ADDRESS_REGS || CLASS1 == DATA_REGS)) ? 2 :\\\n    ((CLASS1 == ADDRESS_REGS || CLASS1 == DATA_REGS) && \\\n     (CLASS2 == ADDRESS_REGS || CLASS2 == DATA_REGS)) ? 4 : \\"}, {"sha": "150d6ba4436bff89755c4dda979b31d106c22f0d", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  NS32000 version.\n-   Copyright (C) 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1477,7 +1477,8 @@ while (0)\n   to memory move (default cost 4)\n  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)  register_move_cost(CLASS1, CLASS2)\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) \\\n+  register_move_cost (CLASS1, CLASS2)\n \n #define OUTPUT_JUMP(NORMAL, NO_OV)  \\\n { if (cc_status.flags & CC_NO_OVERFLOW)\t\t\t\t\\"}, {"sha": "ad8643c7748cdded68bef7274fd307638dbd0959", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for the HP Spectrum.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) of Cygnus Support\n    and Tim Moore (moore@defmacro.cs.utah.edu) of the Center for\n    Software Science at the University of Utah.\n@@ -1631,7 +1631,7 @@ while (0)\n    expensive because they must go through memory.\n \n    Other copies are reasonably cheap.  */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2) \\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) \\\n  (CLASS1 == SHIFT_REGS ? 0x100\t\t\t\t\t\\\n   : FP_REG_CLASS_P (CLASS1) && ! FP_REG_CLASS_P (CLASS2) ? 16\t\\\n   : FP_REG_CLASS_P (CLASS2) && ! FP_REG_CLASS_P (CLASS1) ? 16\t\\"}, {"sha": "39aac2ff6cfc22b04b36f963f6246bf31ef41b16", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for the pdp-11\n-   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000\n+   Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n@@ -979,7 +979,8 @@ extern int may_call_alloca;\n     return 4;\n \f\n /* cost of moving one register class to another */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2) register_move_cost(CLASS1, CLASS2)\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) \\\n+  register_move_cost (CLASS1, CLASS2)\n \n /* Tell emit-rtl.c how to initialize special values on a per-function base.  */\n extern int optimize;"}, {"sha": "39f8d797fb56c39ca12667b098832e073b3fb846", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for picoJava\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1030,7 +1030,7 @@ struct pj_args\n /* Compute extra cost of moving data between one register class and\n    another.  */\n \n-#define REGISTER_MOVE_COST(SRC_CLASS, DST_CLASS)                \\\n+#define REGISTER_MOVE_COST(MODE, SRC_CLASS, DST_CLASS)                \\\n       ((SRC_CLASS == STD_REGS || SRC_CLASS == ARG_REGS)?  2 : 10)\n \n \f"}, {"sha": "1ba8769f46034921d2a6ce03b629adf7cda5b30b", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for ROMP chip.\n-   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1998, 1999, 2000\n+   Copyright (C) 1989, 1991, 1993, 1995, 1996, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n@@ -246,7 +246,7 @@ extern int target_flags;\n \n    On the ROMP, access to floating-point registers is expensive (even between\n    two FP regs.)  */\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n   (2 + 10 * ((CLASS1) == FP_REGS) + 10 * (CLASS2 == FP_REGS))\n \n /* Specify the registers used for certain standard purposes."}, {"sha": "170e5a9d1a67348cbc0145c591c78626f4c9f29a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000 Free Software Foundation, Inc.\n+   2000, 2001 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -796,7 +796,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    On the RS/6000, copying between floating-point and fixed-point\n    registers is expensive.  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\t\\\n   ((CLASS1) == FLOAT_REGS && (CLASS2) == FLOAT_REGS ? 2\t\t\\\n    : (CLASS1) == FLOAT_REGS && (CLASS2) != FLOAT_REGS ? 10\t\\\n    : (CLASS1) != FLOAT_REGS && (CLASS2) == FLOAT_REGS ? 10\t\\"}, {"sha": "df377a3da9627e2b3db1ef117c4bece425e79c57", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for Hitachi Super-H.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com).\n    Improved by Jim Wilson (wilson@cygnus.com).\n@@ -1817,7 +1817,7 @@ while (0)\n    If SECONDARY*_RELOAD_CLASS says something about the src/dst pair,\n    it uses this information.  Hence, the general register <-> floating point\n    register information here is not used for SFmode.  */\n-#define REGISTER_MOVE_COST(SRCCLASS, DSTCLASS) \\\n+#define REGISTER_MOVE_COST(MODE, SRCCLASS, DSTCLASS) \\\n   ((((DSTCLASS) == T_REGS) || ((DSTCLASS) == PR_REGS)) ? 10\t\t\\\n    : ((((DSTCLASS) == FP0_REGS || (DSTCLASS) == FP_REGS || (DSTCLASS) == DF_REGS) \\\n        && ((SRCCLASS) == GENERAL_REGS || (SRCCLASS) == R0_REGS))\t\\"}, {"sha": "1ff6d318d42889e86181ebe1342ed1f49109b90a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf01124384cddd2ab5526a356a5ad7628c73f017/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=cf01124384cddd2ab5526a356a5ad7628c73f017", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for Sun SPARC.\n    Copyright (C) 1987, 1988, 1989, 1992, 1994, 1995, 1996, 1997, 1998, 1999\n-   2000 Free Software Foundation, Inc.\n+   2000, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n    64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n    at Cygnus Support.\n@@ -2858,7 +2858,7 @@ do {                                                                    \\\n /* Compute extra cost of moving data between one register class\n    and another.  */\n #define GENERAL_OR_I64(C) ((C) == GENERAL_REGS || (C) == I64_REGS)\n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\t\\\n+#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\t\\\n   (((FP_REG_CLASS_P (CLASS1) && GENERAL_OR_I64 (CLASS2)) \\\n     || (GENERAL_OR_I64 (CLASS1) && FP_REG_CLASS_P (CLASS2)) \\\n     || (CLASS1) == FPCC_REGS || (CLASS2) == FPCC_REGS)\t\t\\"}]}