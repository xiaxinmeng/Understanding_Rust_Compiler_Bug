{"sha": "874f6a6d1f62dd04490e67f5c19e4621902e9dfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0ZjZhNmQxZjYyZGQwNDQ5MGU2N2Y1YzE5ZTQ2MjE5MDJlOWRmYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2002-09-12T01:29:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-12T01:29:21Z"}, "message": "optabs.c (expand_binop): Minor cleanup.\n\n        * optabs.c (expand_binop): Minor cleanup.\n        (expand_twoval_binop): Convert CONST_INTs like in expand_binop.\n\nFrom-SVN: r57046", "tree": {"sha": "94e139a172be90d8bc489673c65732b9c68dacbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e139a172be90d8bc489673c65732b9c68dacbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/874f6a6d1f62dd04490e67f5c19e4621902e9dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874f6a6d1f62dd04490e67f5c19e4621902e9dfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874f6a6d1f62dd04490e67f5c19e4621902e9dfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874f6a6d1f62dd04490e67f5c19e4621902e9dfa/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1df930ba1d06255ee8f0f09fbd28ed77039f48f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1df930ba1d06255ee8f0f09fbd28ed77039f48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1df930ba1d06255ee8f0f09fbd28ed77039f48f"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "200f20f64fe7e1cb334ab82622ba6419ca423e3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874f6a6d1f62dd04490e67f5c19e4621902e9dfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874f6a6d1f62dd04490e67f5c19e4621902e9dfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=874f6a6d1f62dd04490e67f5c19e4621902e9dfa", "patch": "@@ -1,3 +1,8 @@\n+2002-09-09  Eric Botcazou  ebotcazou@libertysurf.fr\n+  \n+\t* optabs.c (expand_binop): Minor cleanup.\n+\t(expand_twoval_binop): Convert CONST_INTs like in expand_binop.\n+\n 2002-09-11  Dan Nicolaescu  <dann@ics.uci.edu>\n \n \t* print-tree.c (print_node): Print the restrict qualifier."}, {"sha": "f098aa6a092622bdb48eb787fa3adc6bb4df0176", "filename": "gcc/optabs.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874f6a6d1f62dd04490e67f5c19e4621902e9dfa/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874f6a6d1f62dd04490e67f5c19e4621902e9dfa/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=874f6a6d1f62dd04490e67f5c19e4621902e9dfa", "patch": "@@ -783,24 +783,20 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t seem that we don't need to convert CONST_INTs, but we do, so\n \t that they're properly zero-extended or sign-extended for their\n \t modes; shift operations are an exception, because the second\n-\t operand needs not be extended to the mode of the result.  */\n+\t operand need not be extended to the mode of the result.  */\n \n-      if (GET_MODE (op0) != mode0\n-\t  && mode0 != VOIDmode)\n+      if (GET_MODE (op0) != mode0 && mode0 != VOIDmode)\n \txop0 = convert_modes (mode0,\n \t\t\t      GET_MODE (op0) != VOIDmode\n \t\t\t      ? GET_MODE (op0)\n \t\t\t      : mode,\n \t\t\t      xop0, unsignedp);\n \n-      if (GET_MODE (xop1) != mode1\n-\t  && mode1 != VOIDmode)\n+      if (GET_MODE (op1) != mode1 && mode1 != VOIDmode)\n \txop1 = convert_modes (mode1,\n \t\t\t      GET_MODE (op1) != VOIDmode\n \t\t\t      ? GET_MODE (op1)\n-\t\t\t      : ! shift_op\n-\t\t\t      ? mode\n-\t\t\t      : mode1,\n+\t\t\t      : (shift_op ? mode1 : mode),\n \t\t\t      xop1, unsignedp);\n \n       /* Now, if insn's predicates don't allow our operands, put them into\n@@ -2235,13 +2231,25 @@ expand_twoval_binop (binoptab, op0, op1, targ0, targ1, unsignedp)\n       rtx pat;\n       rtx xop0 = op0, xop1 = op1;\n \n-      /* In case this insn wants input operands in modes different from the\n-\t result, convert the operands.  */\n-      if (GET_MODE (op0) != VOIDmode && GET_MODE (op0) != mode0)\n-\txop0 = convert_to_mode (mode0, xop0, unsignedp);\n+      /* In case the insn wants input operands in modes different from\n+\t those of the actual operands, convert the operands.  It would\n+\t seem that we don't need to convert CONST_INTs, but we do, so\n+\t that they're properly zero-extended or sign-extended for their\n+\t modes.  */\n+\n+      if (GET_MODE (op0) != mode0 && mode0 != VOIDmode)\n+\txop0 = convert_modes (mode0,\n+\t\t\t      GET_MODE (op0) != VOIDmode\n+\t\t\t      ? GET_MODE (op0)\n+\t\t\t      : mode,\n+\t\t\t      xop0, unsignedp);\n \n-      if (GET_MODE (op1) != VOIDmode && GET_MODE (op1) != mode1)\n-\txop1 = convert_to_mode (mode1, xop1, unsignedp);\n+      if (GET_MODE (op1) != mode1 && mode1 != VOIDmode)\n+\txop1 = convert_modes (mode1,\n+\t\t\t      GET_MODE (op1) != VOIDmode\n+\t\t\t      ? GET_MODE (op1)\n+\t\t\t      : mode,\n+\t\t\t      xop1, unsignedp);\n \n       /* Now, if insn doesn't accept these operands, put them into pseudos.  */\n       if (! (*insn_data[icode].operand[1].predicate) (xop0, mode0))"}]}