{"sha": "5a1717fbdfd1242a5beb3ac8300766a3534d3f88", "node_id": "C_kwDOANBUbNoAKDVhMTcxN2ZiZGZkMTI0MmE1YmViM2FjODMwMDc2NmEzNTM0ZDNmODg", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-22T15:12:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-22T19:29:59Z"}, "message": "c++: array bound partial ordering [PR108390]\n\nfold_convert doesn't work with a dependent argument, and problematically\ndiffered from the corresponding fold+build_nop further down in the\nfunction.  So change it to match.\n\n\tPR c++/108390\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (unify): Use fold of build_nop instead of fold_convert.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/partial-order3.C: New test.", "tree": {"sha": "fc4cba2400a29a036578e930925d1ced3aed4bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4cba2400a29a036578e930925d1ced3aed4bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1717fbdfd1242a5beb3ac8300766a3534d3f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1717fbdfd1242a5beb3ac8300766a3534d3f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1717fbdfd1242a5beb3ac8300766a3534d3f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1717fbdfd1242a5beb3ac8300766a3534d3f88/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e791f45ded89626bc1f9f8013728f6e035801b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e791f45ded89626bc1f9f8013728f6e035801b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e791f45ded89626bc1f9f8013728f6e035801b2"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "90bcaa787013b60e789ae3053b12fd7563265e25", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1717fbdfd1242a5beb3ac8300766a3534d3f88/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1717fbdfd1242a5beb3ac8300766a3534d3f88/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=5a1717fbdfd1242a5beb3ac8300766a3534d3f88", "patch": "@@ -24635,8 +24635,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t  if ((strict & UNIFY_ALLOW_INTEGER)\n \t      && TREE_TYPE (targ) && TREE_TYPE (arg)\n \t      && CP_INTEGRAL_TYPE_P (TREE_TYPE (targ)))\n-\t    /* We're deducing from an array bound, the type doesn't matter.  */\n-\t    arg = fold_convert (TREE_TYPE (targ), arg);\n+\t    /* We're deducing from an array bound, the type doesn't matter.\n+\t       This conversion should match the one below.  */\n+\t    arg = fold (build_nop (TREE_TYPE (targ), arg));\n \t  int x = !cp_tree_equal (targ, arg);\n \t  if (x)\n \t    unify_inconsistency (explain_p, parm, targ, arg);\n@@ -24684,7 +24685,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t       && CP_INTEGRAL_TYPE_P (tparm))\n \t/* Convert the ARG to the type of PARM; the deduced non-type\n \t   template argument must exactly match the types of the\n-\t   corresponding parameter.  */\n+\t   corresponding parameter.  This conversion should match the\n+\t   one above.  */\n \targ = fold (build_nop (tparm, arg));\n       else if (uses_template_parms (tparm))\n \t{"}, {"sha": "154505321bf48ddaa56092c3ac71a89c1f1f3c35", "filename": "gcc/testsuite/g++.dg/template/partial-order3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1717fbdfd1242a5beb3ac8300766a3534d3f88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-order3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1717fbdfd1242a5beb3ac8300766a3534d3f88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-order3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-order3.C?ref=5a1717fbdfd1242a5beb3ac8300766a3534d3f88", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/108390\n+// { dg-do compile { target c++11 } }\n+\n+template<class T, T t>  long f(int(*)[t], T(*)[t]);\n+template<class T, int i> int f(int(*)[i], T(*)[i]) = delete;\n+int n = f<int, 2>(0, 0);"}]}