{"sha": "4c11bdff4d725cd0a0079524e071b1b5c735b116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxMWJkZmY0ZDcyNWNkMGEwMDc5NTI0ZTA3MWIxYjVjNzM1YjExNg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-05-11T09:40:48Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-05-11T09:40:48Z"}, "message": "tree-ssa-loop-ivopts.c (struct iv_cand): New field inv_exprs.\n\n\t* tree-ssa-loop-ivopts.c (struct iv_cand): New field inv_exprs.\n\t(dump_cand): Support iv_cand.inv_exprs.\n\t(add_candidate_1): Record invariant exprs in iv_cand.inv_exprs\n\tfor candidates.\n\t(iv_ca_set_no_cp, iv_ca_set_cp, free_loop_data): Support\n\tiv_cand.inv_exprs.\n\nFrom-SVN: r247889", "tree": {"sha": "fa71ede95babf87f01978e00b6460b3ca10b1d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa71ede95babf87f01978e00b6460b3ca10b1d7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c11bdff4d725cd0a0079524e071b1b5c735b116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c11bdff4d725cd0a0079524e071b1b5c735b116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c11bdff4d725cd0a0079524e071b1b5c735b116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c11bdff4d725cd0a0079524e071b1b5c735b116/comments", "author": null, "committer": null, "parents": [{"sha": "3df50a94902155d7c14961ee8bd58b1fabede33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df50a94902155d7c14961ee8bd58b1fabede33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df50a94902155d7c14961ee8bd58b1fabede33c"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "ea4912bfa1b8b022fc7398ccb898b58ed2d290d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c11bdff4d725cd0a0079524e071b1b5c735b116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c11bdff4d725cd0a0079524e071b1b5c735b116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c11bdff4d725cd0a0079524e071b1b5c735b116", "patch": "@@ -1,3 +1,12 @@\n+2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (struct iv_cand): New field inv_exprs.\n+\t(dump_cand): Support iv_cand.inv_exprs.\n+\t(add_candidate_1): Record invariant exprs in iv_cand.inv_exprs\n+\tfor candidates.\n+\t(iv_ca_set_no_cp, iv_ca_set_cp, free_loop_data): Support\n+\tiv_cand.inv_exprs.\n+\n 2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p): Move"}, {"sha": "5d7391631d643fbae95aa12fc0dbecdf49ed7ac5", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c11bdff4d725cd0a0079524e071b1b5c735b116/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c11bdff4d725cd0a0079524e071b1b5c735b116/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=4c11bdff4d725cd0a0079524e071b1b5c735b116", "patch": "@@ -347,9 +347,10 @@ struct cost_pair\n   struct iv_cand *cand;\t/* The candidate.  */\n   comp_cost cost;\t/* The cost.  */\n   enum tree_code comp;\t/* For iv elimination, the comparison.  */\n-  bitmap inv_vars;\t/* The list of invariants that have to be\n-\t\t\t   preserved.  */\n-  bitmap inv_exprs;\t/* Loop invariant expressions.  */\n+  bitmap inv_vars;\t/* The list of invariant ssa_vars that have to be\n+\t\t\t   preserved when representing iv_use with iv_cand.  */\n+  bitmap inv_exprs;\t/* The list of newly created invariant expressions\n+\t\t\t   when representing iv_use with iv_cand.  */\n   tree value;\t\t/* For final value elimination, the expression for\n \t\t\t   the final value of the iv.  For iv elimination,\n \t\t\t   the new bound to compare with.  */\n@@ -418,8 +419,11 @@ struct iv_cand\n   unsigned cost_step;\t/* Cost of the candidate's increment operation.  */\n   struct iv_use *ainc_use; /* For IP_{BEFORE,AFTER}_USE candidates, the place\n \t\t\t      where it is incremented.  */\n-  bitmap inv_vars;\t/* The list of invariants that are used in step of the\n-\t\t\t   biv.  */\n+  bitmap inv_vars;\t/* The list of invariant ssa_vars used in step of the\n+\t\t\t   iv_cand.  */\n+  bitmap inv_exprs;\t/* If step is more complicated than a single ssa_var,\n+\t\t\t   hanlde it as a new invariant expression which will\n+\t\t\t   be hoisted out of loop.  */\n   struct iv *orig_iv;\t/* The original iv if this cand is added from biv with\n \t\t\t   smaller type.  */\n };\n@@ -789,6 +793,11 @@ dump_cand (FILE *file, struct iv_cand *cand)\n       fprintf (file, \"  Depend on inv.vars: \");\n       dump_bitmap (file, cand->inv_vars);\n     }\n+  if (cand->inv_exprs)\n+    {\n+      fprintf (file, \"  Depend on inv.exprs: \");\n+      dump_bitmap (file, cand->inv_exprs);\n+    }\n \n   if (cand->var_before)\n     {\n@@ -3025,7 +3034,23 @@ add_candidate_1 (struct ivopts_data *data,\n       data->vcands.safe_push (cand);\n \n       if (TREE_CODE (step) != INTEGER_CST)\n-\tfind_inv_vars (data, &step, &cand->inv_vars);\n+\t{\n+\t  find_inv_vars (data, &step, &cand->inv_vars);\n+\n+\t  iv_inv_expr_ent *inv_expr = get_loop_invariant_expr (data, step);\n+\t  /* Share bitmap between inv_vars and inv_exprs for cand.  */\n+\t  if (inv_expr != NULL)\n+\t    {\n+\t      cand->inv_exprs = cand->inv_vars;\n+\t      cand->inv_vars = NULL;\n+\t      if (cand->inv_exprs)\n+\t\tbitmap_clear (cand->inv_exprs);\n+\t      else\n+\t\tcand->inv_exprs = BITMAP_ALLOC (NULL);\n+\n+\t      bitmap_set_bit (cand->inv_exprs, inv_expr->id);\n+\t    }\n+\t}\n \n       if (pos == IP_AFTER_USE || pos == IP_BEFORE_USE)\n \tcand->ainc_use = use;\n@@ -5603,6 +5628,7 @@ iv_ca_set_no_cp (struct ivopts_data *data, struct iv_ca *ivs,\n       ivs->n_cands--;\n       ivs->cand_cost -= cp->cand->cost;\n       iv_ca_set_remove_invs (ivs, cp->cand->inv_vars, ivs->n_inv_var_uses);\n+      iv_ca_set_remove_invs (ivs, cp->cand->inv_exprs, ivs->n_inv_expr_uses);\n     }\n \n   ivs->cand_use_cost -= cp->cost;\n@@ -5659,6 +5685,7 @@ iv_ca_set_cp (struct ivopts_data *data, struct iv_ca *ivs,\n \t  ivs->n_cands++;\n \t  ivs->cand_cost += cp->cand->cost;\n \t  iv_ca_set_add_invs (ivs, cp->cand->inv_vars, ivs->n_inv_var_uses);\n+\t  iv_ca_set_add_invs (ivs, cp->cand->inv_exprs, ivs->n_inv_expr_uses);\n \t}\n \n       ivs->cand_use_cost += cp->cost;\n@@ -7140,6 +7167,8 @@ free_loop_data (struct ivopts_data *data)\n \n       if (cand->inv_vars)\n \tBITMAP_FREE (cand->inv_vars);\n+      if (cand->inv_exprs)\n+\tBITMAP_FREE (cand->inv_exprs);\n       free (cand);\n     }\n   data->vcands.truncate (0);"}]}