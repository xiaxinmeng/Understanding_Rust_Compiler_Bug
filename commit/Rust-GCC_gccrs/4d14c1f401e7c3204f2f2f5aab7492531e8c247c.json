{"sha": "4d14c1f401e7c3204f2f2f5aab7492531e8c247c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxNGMxZjQwMWU3YzMyMDRmMmYyZjVhYWI3NDkyNTMxZThjMjQ3Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2005-11-18T13:32:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2005-11-18T13:32:05Z"}, "message": "tree-ssa-dom.c (extract_range_from_cond): Deal with variable bounds on types.\n\n\t* tree-ssa-dom.c (extract_range_from_cond): Deal with variable bounds\n\ton types.\n\nFrom-SVN: r107182", "tree": {"sha": "b2b388d06c4605602ee74889020ecaa14aa865b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2b388d06c4605602ee74889020ecaa14aa865b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d14c1f401e7c3204f2f2f5aab7492531e8c247c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d14c1f401e7c3204f2f2f5aab7492531e8c247c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d14c1f401e7c3204f2f2f5aab7492531e8c247c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d14c1f401e7c3204f2f2f5aab7492531e8c247c/comments", "author": null, "committer": null, "parents": [{"sha": "e259b3c2b22e424c5814ba51f3373ff6da05dbd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e259b3c2b22e424c5814ba51f3373ff6da05dbd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e259b3c2b22e424c5814ba51f3373ff6da05dbd1"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "67eab96486c7f7df11444727f72992128083d27d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d14c1f401e7c3204f2f2f5aab7492531e8c247c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d14c1f401e7c3204f2f2f5aab7492531e8c247c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d14c1f401e7c3204f2f2f5aab7492531e8c247c", "patch": "@@ -1,5 +1,8 @@\n 2005-11-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* tree-ssa-dom.c (extract_range_from_cond): Deal with variable bounds\n+\ton types.\n+\n \t* expr.c (expand_expr_real): Don't call record_block_change unless\n \tib_boundaries_block is non-null\n "}, {"sha": "a0d2f28290731c87c519fca33039f540bd006140", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d14c1f401e7c3204f2f2f5aab7492531e8c247c/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d14c1f401e7c3204f2f2f5aab7492531e8c247c/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=4d14c1f401e7c3204f2f2f5aab7492531e8c247c", "patch": "@@ -3203,10 +3203,7 @@ extract_range_from_cond (tree cond, tree *hi_p, tree *lo_p, int *inverted_p)\n      record ranges for enumerations.  Presumably this is due to\n      the fact that they're rarely used directly.  They are typically\n      cast into an integer type and used that way.  */\n-  if (TREE_CODE (type) != INTEGER_TYPE\n-      /* We don't know how to deal with types with variable bounds.  */\n-      || TREE_CODE (TYPE_MIN_VALUE (type)) != INTEGER_CST\n-      || TREE_CODE (TYPE_MAX_VALUE (type)) != INTEGER_CST)\n+  if (TREE_CODE (type) != INTEGER_TYPE)\n     return 0;\n \n   switch (TREE_CODE (cond))\n@@ -3223,12 +3220,19 @@ extract_range_from_cond (tree cond, tree *hi_p, tree *lo_p, int *inverted_p)\n \n     case GE_EXPR:\n       low = op1;\n+\n+      /* Get the highest value of the type.  If not a constant, use that\n+\t of its base type, if it has one.  */\n       high = TYPE_MAX_VALUE (type);\n+      if (TREE_CODE (high) != INTEGER_CST && TREE_TYPE (type))\n+\thigh = TYPE_MAX_VALUE (TREE_TYPE (type));\n       inverted = 0;\n       break;\n \n     case GT_EXPR:\n       high = TYPE_MAX_VALUE (type);\n+      if (TREE_CODE (high) != INTEGER_CST && TREE_TYPE (type))\n+\thigh = TYPE_MAX_VALUE (TREE_TYPE (type));\n       if (!tree_int_cst_lt (op1, high))\n \treturn 0;\n       low = int_const_binop (PLUS_EXPR, op1, integer_one_node, 1);\n@@ -3238,11 +3242,15 @@ extract_range_from_cond (tree cond, tree *hi_p, tree *lo_p, int *inverted_p)\n     case LE_EXPR:\n       high = op1;\n       low = TYPE_MIN_VALUE (type);\n+      if (TREE_CODE (low) != INTEGER_CST && TREE_TYPE (type))\n+\tlow = TYPE_MIN_VALUE (TREE_TYPE (type));\n       inverted = 0;\n       break;\n \n     case LT_EXPR:\n       low = TYPE_MIN_VALUE (type);\n+      if (TREE_CODE (low) != INTEGER_CST && TREE_TYPE (type))\n+\tlow = TYPE_MIN_VALUE (TREE_TYPE (type));\n       if (!tree_int_cst_lt (low, op1))\n \treturn 0;\n       high = int_const_binop (MINUS_EXPR, op1, integer_one_node, 1);"}]}