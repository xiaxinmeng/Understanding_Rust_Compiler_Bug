{"sha": "8c3532055ae44c448bd0bff8952f60ce68e2f178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzNTMyMDU1YWU0NGM0NDhiZDBiZmY4OTUyZjYwY2U2OGUyZjE3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-14T15:05:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-14T15:05:55Z"}, "message": "sse.md (mulv2di3): Macroize using VI8_AVX2 iterator.\n\n\t* config/i386/sse.md (mulv2di3): Macroize using VI8_AVX2\n\titerator.\n\t(ashl<mode>3): Use VI248_AVX2 iterator instead of VI248_128.\n\tUse <sseinsnmode> instead of TI in mode attr.\n\nFrom-SVN: r179987", "tree": {"sha": "bde98e0083939cf1c2db52cb3b549491f0f94f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bde98e0083939cf1c2db52cb3b549491f0f94f6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c3532055ae44c448bd0bff8952f60ce68e2f178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3532055ae44c448bd0bff8952f60ce68e2f178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3532055ae44c448bd0bff8952f60ce68e2f178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3532055ae44c448bd0bff8952f60ce68e2f178/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af89615fea41b69ad6e5a3bf906dbaaefd118c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af89615fea41b69ad6e5a3bf906dbaaefd118c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af89615fea41b69ad6e5a3bf906dbaaefd118c17"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "30b9b0a092363c378d1981b8a50ccedf9afe34c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3532055ae44c448bd0bff8952f60ce68e2f178/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3532055ae44c448bd0bff8952f60ce68e2f178/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c3532055ae44c448bd0bff8952f60ce68e2f178", "patch": "@@ -1,3 +1,10 @@\n+2011-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (mulv2di3): Macroize using VI8_AVX2\n+\titerator.\n+\t(ashl<mode>3): Use VI248_AVX2 iterator instead of VI248_128.\n+\tUse <sseinsnmode> instead of TI in mode attr.\n+\n 2011-10-14  David Alan Gilbert  <david.gilbert@linaro.org>\n \n \t* config/arm/linux-atomic-64bit.c: New (based on linux-atomic.c)."}, {"sha": "372f8ee89aad24763ff0ea3f0bc5c94b6c86c7fb", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3532055ae44c448bd0bff8952f60ce68e2f178/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3532055ae44c448bd0bff8952f60ce68e2f178/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8c3532055ae44c448bd0bff8952f60ce68e2f178", "patch": "@@ -5419,10 +5419,10 @@\n   DONE;\n })\n \n-(define_insn_and_split \"mulv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(mult:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n+(define_insn_and_split \"mul<mode>3\"\n+  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"\")\n+\t(mult:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n+\t\t       (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\n    && can_create_pseudo_p ()\"\n   \"#\"\n@@ -5436,7 +5436,7 @@\n   op1 = operands[1];\n   op2 = operands[2];\n \n-  if (TARGET_XOP)\n+  if (TARGET_XOP && <MODE>mode == V2DImode)\n     {\n       /* op1: A,B,C,D, op2: E,F,G,H */\n       op1 = gen_lowpart (V4SImode, op1);\n@@ -5468,39 +5468,42 @@\n     }\n   else\n     {\n-      t1 = gen_reg_rtx (V2DImode);\n-      t2 = gen_reg_rtx (V2DImode);\n-      t3 = gen_reg_rtx (V2DImode);\n-      t4 = gen_reg_rtx (V2DImode);\n-      t5 = gen_reg_rtx (V2DImode);\n-      t6 = gen_reg_rtx (V2DImode);\n+      t1 = gen_reg_rtx (<MODE>mode);\n+      t2 = gen_reg_rtx (<MODE>mode);\n+      t3 = gen_reg_rtx (<MODE>mode);\n+      t4 = gen_reg_rtx (<MODE>mode);\n+      t5 = gen_reg_rtx (<MODE>mode);\n+      t6 = gen_reg_rtx (<MODE>mode);\n       thirtytwo = GEN_INT (32);\n \n       /* Multiply low parts.  */\n-      emit_insn (gen_sse2_umulv2siv2di3 (t1, gen_lowpart (V4SImode, op1),\n-\t\t\t\t\t gen_lowpart (V4SImode, op2)));\n+      emit_insn (gen_<sse2_avx2>_umulv<ssescalarnum>si<mode>3\n+\t\t  (t1, gen_lowpart (<ssepackmode>mode, op1),\n+\t\t   gen_lowpart (<ssepackmode>mode, op2)));\n \n-      /* Shift input vectors left 32 bits so we can multiply high parts.  */\n-      emit_insn (gen_lshrv2di3 (t2, op1, thirtytwo));\n-      emit_insn (gen_lshrv2di3 (t3, op2, thirtytwo));\n+      /* Shift input vectors right 32 bits so we can multiply high parts.  */\n+      emit_insn (gen_lshr<mode>3 (t2, op1, thirtytwo));\n+      emit_insn (gen_lshr<mode>3 (t3, op2, thirtytwo));\n \n       /* Multiply high parts by low parts.  */\n-      emit_insn (gen_sse2_umulv2siv2di3 (t4, gen_lowpart (V4SImode, op1),\n-\t\t\t\t\t gen_lowpart (V4SImode, t3)));\n-      emit_insn (gen_sse2_umulv2siv2di3 (t5, gen_lowpart (V4SImode, op2),\n-\t\t\t\t\t gen_lowpart (V4SImode, t2)));\n+      emit_insn (gen_<sse2_avx2>_umulv<ssescalarnum>si<mode>3\n+\t\t  (t4, gen_lowpart (<ssepackmode>mode, op1),\n+\t\t   gen_lowpart (<ssepackmode>mode, t3)));\n+      emit_insn (gen_<sse2_avx2>_umulv<ssescalarnum>si<mode>3\n+\t\t  (t5, gen_lowpart (<ssepackmode>mode, op2),\n+\t\t   gen_lowpart (<ssepackmode>mode, t2)));\n \n       /* Shift them back.  */\n-      emit_insn (gen_ashlv2di3 (t4, t4, thirtytwo));\n-      emit_insn (gen_ashlv2di3 (t5, t5, thirtytwo));\n+      emit_insn (gen_ashl<mode>3 (t4, t4, thirtytwo));\n+      emit_insn (gen_ashl<mode>3 (t5, t5, thirtytwo));\n \n       /* Add the three parts together.  */\n-      emit_insn (gen_addv2di3 (t6, t1, t4));\n-      emit_insn (gen_addv2di3 (op0, t6, t5));\n+      emit_insn (gen_add<mode>3 (t6, t1, t4));\n+      emit_insn (gen_add<mode>3 (op0, t6, t5));\n     }\n \n   set_unique_reg_note (get_last_insn (), REG_EQUAL,\n-\t\t       gen_rtx_MULT (V2DImode, operands[1], operands[2]));\n+\t\t       gen_rtx_MULT (<MODE>mode, operands[1], operands[2]));\n   DONE;\n })\n \n@@ -5768,9 +5771,9 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"ashl<mode>3\"\n-  [(set (match_operand:VI248_128 0 \"register_operand\" \"=x,x\")\n-\t(ashift:VI248_128\n-\t  (match_operand:VI248_128 1 \"register_operand\" \"0,x\")\n+  [(set (match_operand:VI248_AVX2 0 \"register_operand\" \"=x,x\")\n+\t(ashift:VI248_AVX2\n+\t  (match_operand:VI248_AVX2 1 \"register_operand\" \"0,x\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n   \"@\n@@ -5784,7 +5787,7 @@\n        (const_string \"0\")))\n    (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"vec_shl_<mode>\"\n   [(set (match_operand:VI_128 0 \"register_operand\" \"\")"}]}