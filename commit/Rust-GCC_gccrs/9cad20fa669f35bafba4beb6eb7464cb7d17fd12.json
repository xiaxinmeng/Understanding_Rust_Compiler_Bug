{"sha": "9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhZDIwZmE2NjlmMzViYWZiYTRiZWI2ZWI3NDY0Y2I3ZDE3ZmQxMg==", "commit": {"author": {"name": "Bill Seurer", "email": "seurer@linux.vnet.ibm.com", "date": "2016-05-20T20:31:52Z"}, "committer": {"name": "Bill Seurer", "email": "seurer@gcc.gnu.org", "date": "2016-05-20T20:31:52Z"}, "message": "This patch changes some of the dejagnu options to better restrict where the...\n\nThis patch changes some of the dejagnu options to better restrict\nwhere the test cases run so that they will no longer cause failures on\npower7 machines.\n\nBased on a subsequent patch I also updated the code formatting (indentation,\netc.) for the code from the original patch (r235577) in both the test cases\nand in rs6000-c.c.\n\n[gcc]\n\n2016-05-20  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Fix\n\tcode formatting in ALTIVEC_BUILTIN_VEC_ADDE section.\n\n[gcc/testsuite]\n\n2016-05-20  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vec-adde.c: Change dejagnu options, fix code\n\tformatting.\n\t* gcc.target/powerpc/vec-adde-int128.c: Change dejagnu options, fix code\n\tformatting.\n\nFrom-SVN: r236537", "tree": {"sha": "5f001c022cbd12e1756a8e87242874d55b7f05cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f001c022cbd12e1756a8e87242874d55b7f05cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/comments", "author": {"login": "BillSeurer", "id": 8561221, "node_id": "MDQ6VXNlcjg1NjEyMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8561221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillSeurer", "html_url": "https://github.com/BillSeurer", "followers_url": "https://api.github.com/users/BillSeurer/followers", "following_url": "https://api.github.com/users/BillSeurer/following{/other_user}", "gists_url": "https://api.github.com/users/BillSeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillSeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillSeurer/subscriptions", "organizations_url": "https://api.github.com/users/BillSeurer/orgs", "repos_url": "https://api.github.com/users/BillSeurer/repos", "events_url": "https://api.github.com/users/BillSeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/BillSeurer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae578943c00e669b6b18ce2588a29efcfb74ae19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae578943c00e669b6b18ce2588a29efcfb74ae19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae578943c00e669b6b18ce2588a29efcfb74ae19"}], "stats": {"total": 178, "additions": 103, "deletions": 75}, "files": [{"sha": "7d4241766c2e21c81a34e7102d393a526e6c2d84", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "patch": "@@ -1,3 +1,8 @@\n+2016-05-20  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Fix\n+\tcode formatting in ALTIVEC_BUILTIN_VEC_ADDE section.\n+\n 2016-05-20  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def (vec_addec): Change vec_addec to a"}, {"sha": "e09a86e8adab25d3f6e38f163fe131668bc1500e", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "patch": "@@ -4622,37 +4622,41 @@ assignment for unaligned loads and stores\");\n       /* All 3 arguments must be vectors of (signed or unsigned) (int or\n \t  __int128) and the types must match.  */\n       if ((arg0_type != arg1_type) || (arg1_type != arg2_type))\n-\tgoto bad; \n+\tgoto bad;\n       if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n-\tgoto bad; \n+\tgoto bad;\n \n       switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n \t{\n-\t  /* For {un}signed ints, \n-\t     vec_adde (va, vb, carryv) == vec_add (vec_add (va, vb), \n-\t\t\t\t\t\tvec_and (carryv, 0x1)).  */\n+\t  /* For {un}signed ints,\n+\t     vec_adde (va, vb, carryv) == vec_add (vec_add (va, vb),\n+\t\t\t\t\t\t   vec_and (carryv, 0x1)).  */\n \t  case SImode:\n \t    {\n-\t      vec<tree, va_gc> *params = make_tree_vector();\n+\t      vec<tree, va_gc> *params = make_tree_vector ();\n \t      vec_safe_push (params, arg0);\n \t      vec_safe_push (params, arg1);\n-\t      tree call = altivec_resolve_overloaded_builtin\n-\t\t (loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD], params);\n-\t      tree const1 = build_vector_from_val (arg0_type, \n-\t\t build_int_cstu(TREE_TYPE (arg0_type), 1));\n-\t      tree and_expr = fold_build2_loc (loc, BIT_AND_EXPR,\n-\t\t\t\targ0_type, arg2, const1);\n-\t      params = make_tree_vector();\n+\t      tree add_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD];\n+\t      tree call = altivec_resolve_overloaded_builtin (loc, add_builtin,\n+\t\t\t\t\t\t\t      params);\n+\t      tree const1 = build_int_cstu (TREE_TYPE (arg0_type), 1);\n+\t      tree ones_vector = build_vector_from_val (arg0_type, const1);\n+\t      tree and_expr = fold_build2_loc (loc, BIT_AND_EXPR, arg0_type,\n+\t\t\t\t\t       arg2, ones_vector);\n+\t      params = make_tree_vector ();\n \t      vec_safe_push (params, call);\n \t      vec_safe_push (params, and_expr);\n-\t      return altivec_resolve_overloaded_builtin\n-\t\t (loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD], params);\n+\t      return altivec_resolve_overloaded_builtin (loc, add_builtin,\n+\t\t\t\t\t\t\t params);\n \t    }\n \t  /* For {un}signed __int128s use the vaddeuqm instruction\n \t\tdirectly.  */\n \t  case TImode:\n-\t    return altivec_resolve_overloaded_builtin\n-\t\t(loc, rs6000_builtin_decls[P8V_BUILTIN_VEC_VADDEUQM], arglist);\n+\t    {\n+\t      tree adde_bii = rs6000_builtin_decls[P8V_BUILTIN_VEC_VADDEUQM];\n+\t      return altivec_resolve_overloaded_builtin (loc, adde_bii,\n+\t\t\t\t\t\t\t arglist);\n+\t    }\n \n \t  /* Types other than {un}signed int and {un}signed __int128\n \t\tare errors.  */\n@@ -4839,9 +4843,9 @@ assignment for unaligned loads and stores\");\n       arg1_type = TREE_TYPE (arg1);\n \n       if (TREE_CODE (arg1_type) != VECTOR_TYPE)\n-\tgoto bad; \n+\tgoto bad;\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (arg2)))\n-\tgoto bad; \n+\tgoto bad;\n \n       /* If we are targeting little-endian, but -maltivec=be has been\n \t specified to override the element order, adjust the element\n@@ -4942,9 +4946,9 @@ assignment for unaligned loads and stores\");\n       arg2 = (*arglist)[2];\n \n       if (TREE_CODE (arg1_type) != VECTOR_TYPE)\n-\tgoto bad; \n+\tgoto bad;\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (arg2)))\n-\tgoto bad; \n+\tgoto bad;\n \n       /* If we are targeting little-endian, but -maltivec=be has been\n \t specified to override the element order, adjust the element"}, {"sha": "cdb5fea6d48997f8b9ec52d2cdddc912f72e19f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "patch": "@@ -1,3 +1,10 @@\n+2016-05-20  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-adde.c: Change dejagnu options, fix code\n+\tformatting.\n+\t* gcc.target/powerpc/vec-adde-int128.c: Change dejagnu options, fix code\n+\tformatting.\n+\n 2016-05-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/all-non-failing-tests.h: Add"}, {"sha": "4f951a993db5003dac8de789146e5f9fc65e35b2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-adde-int128.c", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde-int128.c?ref=9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "patch": "@@ -1,7 +1,9 @@\n-/* { dg-do run { target { powerpc64-*-* } } } */\n+/* { dg-do run { target { powerpc64*-*-* } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-options \"-mcpu=power8 -O3\" } */\n \n+\n /* Test that the vec_adde builtin works as expected.  */\n \n #include \"altivec.h\"\n@@ -20,38 +22,43 @@ STYPE expected_##NAMESUFFIX[N]; \\\n \\\n __attribute__((noinline)) void vector_tests_##NAMESUFFIX () \\\n { \\\n-  int i; \\\n   vector STYPE v1, v2, v3, tmp; \\\n-  for (i = 0; i < N; i+=16/sizeof(STYPE)) { \\\n-    /* result=addend1+addend2+(carry & 0x1) */ \\\n-    v1 = (vector STYPE) { addend1_##NAMESUFFIX[i] }; \\\n-    v2 = (vector STYPE) { addend2_##NAMESUFFIX[i] }; \\\n-    v3 = (vector STYPE) { carry_##NAMESUFFIX[i] }; \\\n+  int i; \\\n+  for (i = 0; i < N; i+=16/sizeof (STYPE)) \\\n+    { \\\n+      /* result=addend1+addend2+(carry & 0x1).  */ \\\n+      v1 = (vector STYPE) { addend1_##NAMESUFFIX[i] }; \\\n+      v2 = (vector STYPE) { addend2_##NAMESUFFIX[i] }; \\\n+      v3 = (vector STYPE) { carry_##NAMESUFFIX[i] }; \\\n \\\n-    tmp = vec_adde (v1, v2, v3); \\\n-    result_##NAMESUFFIX[i] = tmp[0]; \\\n-  } \\\n+      tmp = vec_adde (v1, v2, v3); \\\n+      result_##NAMESUFFIX[i] = tmp[0]; \\\n+    } \\\n } \\\n \\\n __attribute__((noinline)) void init_##NAMESUFFIX () \\\n { \\\n   int i; \\\n-  for (i = 0; i < N; ++i) { \\\n-    result_##NAMESUFFIX[i] = 0; \\\n-    addend1_##NAMESUFFIX[i] = 1; \\\n-    addend2_##NAMESUFFIX[i] = 2; \\\n-    carry_##NAMESUFFIX[i] = (i%12); \\\n-    expected_##NAMESUFFIX[i] = addend1_##NAMESUFFIX[i] + \\\n-\t\taddend2_##NAMESUFFIX[i] + (carry_##NAMESUFFIX[i] & 0x1); \\\n-  } \\\n+  for (i = 0; i < N; ++i) \\\n+    { \\\n+      result_##NAMESUFFIX[i] = 0; \\\n+      addend1_##NAMESUFFIX[i] = 1; \\\n+      addend2_##NAMESUFFIX[i] = 2; \\\n+      carry_##NAMESUFFIX[i] = (i%12); \\\n+      expected_##NAMESUFFIX[i] = addend1_##NAMESUFFIX[i] + \\\n+\t\t\t\t addend2_##NAMESUFFIX[i] + \\\n+\t\t\t\t (carry_##NAMESUFFIX[i] & 0x1); \\\n+    } \\\n } \\\n \\\n __attribute__((noinline)) void verify_results_##NAMESUFFIX () \\\n { \\\n-  for (int i = 0; i < N; ++i) { \\\n-    if (result_##NAMESUFFIX[i] != expected_##NAMESUFFIX[i]) \\\n-      abort(); \\\n-  } \\\n+  int i; \\\n+  for (i = 0; i < N; ++i) \\\n+    { \\\n+      if (result_##NAMESUFFIX[i] != expected_##NAMESUFFIX[i]) \\\n+\tabort (); \\\n+    } \\\n }\n \n \n@@ -63,13 +70,13 @@ __attribute__((noinline)) void verify_results_##NAMESUFFIX () \\\n }\n \n \n-define_test_functions(signed __int128, si128);\n-define_test_functions(unsigned __int128, ui128);\n+define_test_functions (signed __int128, si128);\n+define_test_functions (unsigned __int128, ui128);\n \n int main ()\n {\n-  execute_test_functions(signed __int128, si128);\n-  execute_test_functions(unsigned __int128, ui128);\n+  execute_test_functions (signed __int128, si128);\n+  execute_test_functions (unsigned __int128, ui128);\n \n   return 0;\n }"}, {"sha": "a235a1c987d9fd526accc654f59ad481e733f562", "filename": "gcc/testsuite/gcc.target/powerpc/vec-adde.c", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad20fa669f35bafba4beb6eb7464cb7d17fd12/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde.c?ref=9cad20fa669f35bafba4beb6eb7464cb7d17fd12", "patch": "@@ -1,6 +1,6 @@\n-/* { dg-do run { target { powerpc64-*-* } } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O3\" } */\n+/* { dg-do run { target { powerpc64*-*-* } } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O3\" } */\n \n /* Test that the vec_adde builtin works as expected.  */\n \n@@ -20,38 +20,43 @@ STYPE expected_##NAMESUFFIX[N]; \\\n \\\n __attribute__((noinline)) void vector_tests_##NAMESUFFIX () \\\n { \\\n-  int i; \\\n   vector STYPE v1, v2, v3, tmp; \\\n-  for (i = 0; i < N; i+=16/sizeof(STYPE)) { \\\n-    /* result=addend1+addend2+(carry & 0x1) */ \\\n-    v1 = vec_vsx_ld (0, &addend1_##NAMESUFFIX[i]); \\\n-    v2 = vec_vsx_ld (0, &addend2_##NAMESUFFIX[i]); \\\n-    v3 = vec_vsx_ld (0, &carry_##NAMESUFFIX[i]); \\\n+  int i; \\\n+  for (i = 0; i < N; i+=16/sizeof (STYPE)) \\\n+    { \\\n+      /* result=addend1+addend2+(carry & 0x1).  */ \\\n+      v1 = vec_vsx_ld (0, &addend1_##NAMESUFFIX[i]); \\\n+      v2 = vec_vsx_ld (0, &addend2_##NAMESUFFIX[i]); \\\n+      v3 = vec_vsx_ld (0, &carry_##NAMESUFFIX[i]); \\\n \\\n-    tmp = vec_adde (v1, v2, v3); \\\n-    vec_vsx_st (tmp, 0, &result_##NAMESUFFIX[i]); \\\n-  } \\\n+      tmp = vec_adde (v1, v2, v3); \\\n+     vec_vsx_st (tmp, 0, &result_##NAMESUFFIX[i]); \\\n+    } \\\n } \\\n \\\n __attribute__((noinline)) void init_##NAMESUFFIX () \\\n { \\\n   int i; \\\n-  for (i = 0; i < N; ++i) { \\\n-    result_##NAMESUFFIX[i] = 0; \\\n-    addend1_##NAMESUFFIX[i] = 1; \\\n-    addend2_##NAMESUFFIX[i] = 2; \\\n-    carry_##NAMESUFFIX[i] = (i%12); \\\n-    expected_##NAMESUFFIX[i] = addend1_##NAMESUFFIX[i] + \\\n-\t\taddend2_##NAMESUFFIX[i] + (carry_##NAMESUFFIX[i] & 0x1); \\\n-  } \\\n+  for (i = 0; i < N; ++i) \\\n+    { \\\n+      result_##NAMESUFFIX[i] = 0; \\\n+      addend1_##NAMESUFFIX[i] = 1; \\\n+      addend2_##NAMESUFFIX[i] = 2; \\\n+      carry_##NAMESUFFIX[i] = (i%12); \\\n+      expected_##NAMESUFFIX[i] = addend1_##NAMESUFFIX[i] + \\\n+\t\t\t\t addend2_##NAMESUFFIX[i] + \\\n+\t\t\t\t (carry_##NAMESUFFIX[i] & 0x1); \\\n+    } \\\n } \\\n \\\n __attribute__((noinline)) void verify_results_##NAMESUFFIX () \\\n { \\\n-  for (int i = 0; i < N; ++i) { \\\n-    if (result_##NAMESUFFIX[i] != expected_##NAMESUFFIX[i]) \\\n-      abort(); \\\n-  } \\\n+  int i; \\\n+  for (i = 0; i < N; ++i) \\\n+    { \\\n+      if (result_##NAMESUFFIX[i] != expected_##NAMESUFFIX[i]) \\\n+\tabort (); \\\n+    } \\\n }\n \n \n@@ -63,13 +68,13 @@ __attribute__((noinline)) void verify_results_##NAMESUFFIX () \\\n }\n \n \n-define_test_functions(signed int, si);\n-define_test_functions(unsigned int, ui);\n+define_test_functions (signed int, si);\n+define_test_functions (unsigned int, ui);\n \n int main ()\n {\n-  execute_test_functions(signed int, si);\n-  execute_test_functions(unsigned int, ui);\n+  execute_test_functions (signed int, si);\n+  execute_test_functions (unsigned int, ui);\n \n   return 0;\n }"}]}