{"sha": "5e26e5a278abef7e0b5df09fcf54de6915fd4497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyNmU1YTI3OGFiZWY3ZTBiNWRmMDlmY2Y1NGRlNjkxNWZkNDQ5Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-10-22T00:17:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-22T00:17:15Z"}, "message": "real.c (sticky_rshift_significand): Return inexact, don't or it in immediately.\n\n        * real.c (sticky_rshift_significand): Return inexact, don't\n        or it in immediately.\n        (sub_significands): Accept incomming carry.\n        (div_significands, rtd_divmod): Update for sub_significands change.\n        (round_for_format): Update for sticky_rshift_significand change.\n        (do_add): Don't involve the inexact bit in addition, do give the\n        inexact bit as the subtraction carry-in.\n        (encode_internal, decode_internal, real_internal_format): New.\n        * real.h (real_internal_format): Declare.\n\nFrom-SVN: r58396", "tree": {"sha": "218e9e8df8d7472651e08012cd46de7a0fdc5d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/218e9e8df8d7472651e08012cd46de7a0fdc5d8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e26e5a278abef7e0b5df09fcf54de6915fd4497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e26e5a278abef7e0b5df09fcf54de6915fd4497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e26e5a278abef7e0b5df09fcf54de6915fd4497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e26e5a278abef7e0b5df09fcf54de6915fd4497/comments", "author": null, "committer": null, "parents": [{"sha": "ad03e4c4c79faea50454da03208b037dedeb4927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad03e4c4c79faea50454da03208b037dedeb4927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad03e4c4c79faea50454da03208b037dedeb4927"}], "stats": {"total": 97, "additions": 79, "deletions": 18}, "files": [{"sha": "de0f8b509934c698ff16e66151b1385d8b38e6c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e26e5a278abef7e0b5df09fcf54de6915fd4497/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e26e5a278abef7e0b5df09fcf54de6915fd4497/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e26e5a278abef7e0b5df09fcf54de6915fd4497", "patch": "@@ -1,3 +1,15 @@\n+2002-10-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* real.c (sticky_rshift_significand): Return inexact, don't\n+\tor it in immediately.\n+\t(sub_significands): Accept incomming carry.\n+\t(div_significands, rtd_divmod): Update for sub_significands change.\n+\t(round_for_format): Update for sticky_rshift_significand change.\n+\t(do_add): Don't involve the inexact bit in addition, do give the\n+\tinexact bit as the subtraction carry-in.\n+\t(encode_internal, decode_internal, real_internal_format): New.\n+\t* real.h (real_internal_format): Declare.\n+\n 2002-10-21  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* libgcc2.c: Fix __udiv_w_sdiv breakage on platforms that"}, {"sha": "a2c9d8af71a92632c880a120600541828eac9b07", "filename": "gcc/real.c", "status": "modified", "additions": 66, "deletions": 18, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e26e5a278abef7e0b5df09fcf54de6915fd4497/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e26e5a278abef7e0b5df09fcf54de6915fd4497/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=5e26e5a278abef7e0b5df09fcf54de6915fd4497", "patch": "@@ -81,7 +81,7 @@ static void get_zero PARAMS ((REAL_VALUE_TYPE *, int));\n static void get_canonical_qnan PARAMS ((REAL_VALUE_TYPE *, int));\n static void get_canonical_snan PARAMS ((REAL_VALUE_TYPE *, int));\n static void get_inf PARAMS ((REAL_VALUE_TYPE *, int));\n-static void sticky_rshift_significand PARAMS ((REAL_VALUE_TYPE *,\n+static bool sticky_rshift_significand PARAMS ((REAL_VALUE_TYPE *,\n \t\t\t\t\t       const REAL_VALUE_TYPE *,\n \t\t\t\t\t       unsigned int));\n static void rshift_significand PARAMS ((REAL_VALUE_TYPE *,\n@@ -97,7 +97,7 @@ static bool add_significands PARAMS ((REAL_VALUE_TYPE *r,\n \t\t\t\t      const REAL_VALUE_TYPE *));\n static bool sub_significands PARAMS ((REAL_VALUE_TYPE *,\n \t\t\t\t      const REAL_VALUE_TYPE *,\n-\t\t\t\t      const REAL_VALUE_TYPE *));\n+\t\t\t\t      const REAL_VALUE_TYPE *, int));\n static void neg_significand PARAMS ((REAL_VALUE_TYPE *,\n \t\t\t\t     const REAL_VALUE_TYPE *));\n static int cmp_significands PARAMS ((const REAL_VALUE_TYPE *,\n@@ -182,10 +182,9 @@ get_inf (r, sign)\n \n \f\n /* Right-shift the significand of A by N bits; put the result in the\n-   significand of R.  If any one bits are shifted out, set the least\n-   significant bit of R.  */\n+   significand of R.  If any one bits are shifted out, return true.  */\n \n-static void\n+static bool\n sticky_rshift_significand (r, a, n)\n      REAL_VALUE_TYPE *r;\n      const REAL_VALUE_TYPE *a;\n@@ -220,7 +219,7 @@ sticky_rshift_significand (r, a, n)\n \tr->sig[i] = 0;\n     }\n \n-  r->sig[0] |= (sticky != 0);\n+  return sticky != 0;\n }\n \n /* Right-shift the significand of A by N bits; put the result in the\n@@ -327,15 +326,16 @@ add_significands (r, a, b)\n   return carry;\n }\n \n-/* Subtract the significands of A and B, placing the result in R.\n-   Return true if there was carry out of the most significant word.  */\n+/* Subtract the significands of A and B, placing the result in R.  CARRY is\n+   true if there's a borrow incoming to the least significant word.\n+   Return true if there was borrow out of the most significant word.  */\n \n static inline bool\n-sub_significands (r, a, b)\n+sub_significands (r, a, b, carry)\n      REAL_VALUE_TYPE *r;\n      const REAL_VALUE_TYPE *a, *b;\n+     int carry;\n {\n-  bool carry = false;\n   int i;\n \n   for (i = 0; i < SIGSZ; ++i)\n@@ -500,7 +500,7 @@ div_significands (r, a, b)\n     start:\n       if (msb || cmp_significands (&u, b) >= 0)\n \t{\n-\t  sub_significands (&u, &u, b);\n+\t  sub_significands (&u, &u, b, 0);\n \t  set_significand_bit (r, bit);\n \t}\n     }\n@@ -570,6 +570,7 @@ do_add (r, a, b, subtract_p)\n {\n   int dexp, sign, exp;\n   REAL_VALUE_TYPE t;\n+  bool inexact = false;\n \n   /* Determine if we need to add or subtract.  */\n   sign = a->sign;\n@@ -648,13 +649,13 @@ do_add (r, a, b, subtract_p)\n \t  return;\n \t}\n \n-      sticky_rshift_significand (&t, b, dexp);\n+      inexact |= sticky_rshift_significand (&t, b, dexp);\n       b = &t;\n     }\n \n   if (subtract_p)\n     {\n-      if (sub_significands (r, a, b))\n+      if (sub_significands (r, a, b, inexact))\n \t{\n \t  /* We got a borrow out of the subtraction.  That means that\n \t     A and B had the same exponent, and B had the larger\n@@ -671,7 +672,7 @@ do_add (r, a, b, subtract_p)\n \t  /* We got carry out of the addition.  This means we need to\n \t     shift the significand back down one bit and increase the\n \t     exponent.  */\n-\t  sticky_rshift_significand (r, r, 1);\n+\t  inexact |= sticky_rshift_significand (r, r, 1);\n \t  r->sig[SIGSZ-1] |= SIG_MSB;\n \t  if (++exp > MAX_EXP)\n \t    {\n@@ -692,6 +693,8 @@ do_add (r, a, b, subtract_p)\n      is positive.  */\n   if (r->class == rvc_zero)\n     r->sign = 0;\n+  else\n+    r->sig[0] |= inexact;\n }\n \n /* Return R = A * B.  */\n@@ -1430,7 +1433,7 @@ rtd_divmod (num, den)\n     start:\n       if (msb || cmp_significands (num, den) >= 0)\n \t{\n-\t  sub_significands (num, num, den);\n+\t  sub_significands (num, num, den, 0);\n \t  q |= 1;\n \t}\n     }\n@@ -2329,7 +2332,7 @@ round_for_format (fmt, r)\n       if (shift)\n \t{\n \t  shift = fmt->log2_b - shift;\n-\t  sticky_rshift_significand (r, r, shift);\n+\t  r->sig[0] |= sticky_rshift_significand (r, r, shift);\n \t  r->exp += shift;\n \t}\n     }\n@@ -2355,7 +2358,7 @@ round_for_format (fmt, r)\n \t    goto underflow;\n \n \t  /* De-normalize the significand.  */\n-\t  sticky_rshift_significand (r, r, diff);\n+\t  r->sig[0] |= sticky_rshift_significand (r, r, diff);\n \t  r->exp += diff;\n \t}\n     }\n@@ -2395,7 +2398,7 @@ round_for_format (fmt, r)\n \t      if (shift)\n \t\t{\n \t\t  shift = fmt->log2_b - shift;\n-\t\t  sticky_rshift_significand (r, r, shift);\n+\t\t  rshift_significand (r, r, shift);\n \t\t  r->exp += shift;\n \t\t  if (r->exp > emax2)\n \t\t    goto overflow;\n@@ -4308,6 +4311,51 @@ const struct real_format c4x_extended_format =\n     false,\n     false\n   };\n+\n+\f\n+/* A synthetic \"format\" for internal arithmetic.  It's the size of the\n+   internal significand minus the two bits needed for proper rounding.\n+   The encode and decode routines exist only to satisfy our paranoia\n+   harness.  */\n+\n+static void encode_internal PARAMS ((const struct real_format *fmt,\n+\t\t\t\t     long *, const REAL_VALUE_TYPE *));\n+static void decode_internal PARAMS ((const struct real_format *,\n+\t\t\t\t     REAL_VALUE_TYPE *, const long *));\n+\n+static void\n+encode_internal (fmt, buf, r)\n+     const struct real_format *fmt ATTRIBUTE_UNUSED;\n+     long *buf;\n+     const REAL_VALUE_TYPE *r;\n+{\n+  memcpy (buf, r, sizeof (*r));\n+}\n+\n+static void\n+decode_internal (fmt, r, buf)\n+     const struct real_format *fmt ATTRIBUTE_UNUSED;\n+     REAL_VALUE_TYPE *r;\n+     const long *buf;\n+{\n+  memcpy (r, buf, sizeof (*r));\n+}\n+\n+const struct real_format real_internal_format = \n+  {\n+    encode_internal,\n+    decode_internal,\n+    2,\n+    1,\n+    SIGNIFICAND_BITS - 2,\n+    -MAX_EXP,\n+    MAX_EXP,\n+    true,\n+    true,\n+    false,\n+    true,\n+    true \n+  };\n \f\n /* Set up default mode to format mapping for IEEE.  Everyone else has\n    to set these values in OVERRIDE_OPTIONS.  */"}, {"sha": "a979cea67ac1a3265722d49194dbe5aa345a1103", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e26e5a278abef7e0b5df09fcf54de6915fd4497/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e26e5a278abef7e0b5df09fcf54de6915fd4497/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=5e26e5a278abef7e0b5df09fcf54de6915fd4497", "patch": "@@ -231,6 +231,7 @@ extern const struct real_format i370_single_format;\n extern const struct real_format i370_double_format;\n extern const struct real_format c4x_single_format;\n extern const struct real_format c4x_extended_format;\n+extern const struct real_format real_internal_format;\n \n \n /* ====================================================================== */"}]}