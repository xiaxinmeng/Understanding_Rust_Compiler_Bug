{"sha": "b4e49397cba8e290c274667a3a8985a6cefda778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlNDkzOTdjYmE4ZTI5MGMyNzQ2NjdhM2E4OTg1YTZjZWZkYTc3OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-08-16T16:24:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-08-16T16:24:46Z"}, "message": "tweak comment\n\nFrom-SVN: r44942", "tree": {"sha": "5a8ec5d207c582c4cc2b48cadfb508def25b50e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8ec5d207c582c4cc2b48cadfb508def25b50e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e49397cba8e290c274667a3a8985a6cefda778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e49397cba8e290c274667a3a8985a6cefda778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e49397cba8e290c274667a3a8985a6cefda778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e49397cba8e290c274667a3a8985a6cefda778/comments", "author": null, "committer": null, "parents": [{"sha": "5487f1ac2e9d7b50537920f9f6fe44e6b6a660cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5487f1ac2e9d7b50537920f9f6fe44e6b6a660cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5487f1ac2e9d7b50537920f9f6fe44e6b6a660cf"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "599f188bdc8c9f7acfbf988523eac8ee3c4f77a0", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e49397cba8e290c274667a3a8985a6cefda778/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e49397cba8e290c274667a3a8985a6cefda778/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b4e49397cba8e290c274667a3a8985a6cefda778", "patch": "@@ -834,7 +834,11 @@ expand_end_all_catch ()\n \n /* End an exception region for an exception type filter.  ALLOWED is a\n    TREE_LIST of types to be matched by the runtime.  FAILURE is an\n-   expression to invoke if a mismatch ocurrs.  */\n+   expression to invoke if a mismatch ocurrs.\n+\n+   ??? We could use these semantics for calls to rethrow, too; if we can\n+   see the surrounding catch clause, we know that the exception we're\n+   rethrowing satisfies the \"filter\" of the catch type.  */\n \n void\n expand_eh_region_end_allowed (allowed, failure)"}]}