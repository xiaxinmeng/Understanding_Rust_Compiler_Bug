{"sha": "a8105959bdd74007458c528e053dcf22c245474b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxMDU5NTliZGQ3NDAwNzQ1OGM1MjhlMDUzZGNmMjJjMjQ1NDc0Yg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-05-08T12:00:10Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-05-08T12:00:10Z"}, "message": "[AArch64] Idiomatic 64x1 comparisons in arm_neon.h\n\ngcc/:\n \n\t* config/aarch64/arm_neon.h (vceq_s64, vceq_u64, vceqz_s64, vceqz_u64,\n\tvcge_s64, vcge_u64, vcgez_s64, vcgt_s64, vcgt_u64, vcgtz_s64, vcle_s64,\n\tvcle_u64, vclez_s64, vclt_s64, vclt_u64, vcltz_s64, vtst_s64,\n\tvtst_u64): Rewrite using gcc vector extensions.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/singleton_intrinsics_1.c: Generalize regex to\n\tallow cmlt or sshr.\n\nFrom-SVN: r222909", "tree": {"sha": "dcd31339673c303b44da7ed3d62530ff84c645c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcd31339673c303b44da7ed3d62530ff84c645c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8105959bdd74007458c528e053dcf22c245474b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8105959bdd74007458c528e053dcf22c245474b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8105959bdd74007458c528e053dcf22c245474b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8105959bdd74007458c528e053dcf22c245474b/comments", "author": null, "committer": null, "parents": [{"sha": "8b5190aba09f9f1af9f655b543faee2b58f746ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5190aba09f9f1af9f655b543faee2b58f746ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5190aba09f9f1af9f655b543faee2b58f746ef"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "6f4558fad8a98545cd9fcf8679f6225528df7d1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8105959bdd74007458c528e053dcf22c245474b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8105959bdd74007458c528e053dcf22c245474b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8105959bdd74007458c528e053dcf22c245474b", "patch": "@@ -1,3 +1,10 @@\n+2015-05-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vceq_s64, vceq_u64, vceqz_s64, vceqz_u64,\n+\tvcge_s64, vcge_u64, vcgez_s64, vcgt_s64, vcgt_u64, vcgtz_s64, vcle_s64,\n+\tvcle_u64, vclez_s64, vclt_s64, vclt_u64, vcltz_s64, vtst_s64,\n+\tvtst_u64): Rewrite using gcc vector extensions.\n+\n 2015-05-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_vcond_internal<mode><mode>,"}, {"sha": "9896e8c21af061d6b42c831215eac95aa01f8c70", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8105959bdd74007458c528e053dcf22c245474b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8105959bdd74007458c528e053dcf22c245474b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=a8105959bdd74007458c528e053dcf22c245474b", "patch": "@@ -11619,7 +11619,7 @@ vceq_s32 (int32x2_t __a, int32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vceq_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] == __b[0] ? -1ll : 0ll};\n+  return (uint64x1_t) (__a == __b);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -11643,7 +11643,7 @@ vceq_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vceq_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] == __b[0] ? -1ll : 0ll};\n+  return (__a == __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -11779,7 +11779,7 @@ vceqz_s32 (int32x2_t __a)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vceqz_s64 (int64x1_t __a)\n {\n-  return (uint64x1_t) {__a[0] == 0ll ? -1ll : 0ll};\n+  return (uint64x1_t) (__a == __AARCH64_INT64_C (0));\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -11803,7 +11803,7 @@ vceqz_u32 (uint32x2_t __a)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vceqz_u64 (uint64x1_t __a)\n {\n-  return (uint64x1_t) {__a[0] == 0ll ? -1ll : 0ll};\n+  return (__a == __AARCH64_UINT64_C (0));\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -11933,7 +11933,7 @@ vcge_s32 (int32x2_t __a, int32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcge_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] >= __b[0] ? -1ll : 0ll};\n+  return (uint64x1_t) (__a >= __b);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -11957,7 +11957,7 @@ vcge_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcge_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] >= __b[0] ? -1ll : 0ll};\n+  return (__a >= __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -12081,7 +12081,7 @@ vcgez_s32 (int32x2_t __a)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcgez_s64 (int64x1_t __a)\n {\n-  return (uint64x1_t) {__a[0] >= 0ll ? -1ll : 0ll};\n+  return (uint64x1_t) (__a >= __AARCH64_INT64_C (0));\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -12175,7 +12175,7 @@ vcgt_s32 (int32x2_t __a, int32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcgt_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) (__a[0] > __b[0] ? -1ll : 0ll);\n+  return (uint64x1_t) (__a > __b);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -12199,7 +12199,7 @@ vcgt_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcgt_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) (__a[0] > __b[0] ? -1ll : 0ll);\n+  return (__a > __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -12323,7 +12323,7 @@ vcgtz_s32 (int32x2_t __a)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcgtz_s64 (int64x1_t __a)\n {\n-  return (uint64x1_t) {__a[0] > 0ll ? -1ll : 0ll};\n+  return (uint64x1_t) (__a > __AARCH64_INT64_C (0));\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -12417,7 +12417,7 @@ vcle_s32 (int32x2_t __a, int32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcle_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] <= __b[0] ? -1ll : 0ll};\n+  return (uint64x1_t) (__a <= __b);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -12441,7 +12441,7 @@ vcle_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcle_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] <= __b[0] ? -1ll : 0ll};\n+  return (__a <= __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -12565,7 +12565,7 @@ vclez_s32 (int32x2_t __a)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vclez_s64 (int64x1_t __a)\n {\n-  return (uint64x1_t) {__a[0] <= 0ll ? -1ll : 0ll};\n+  return (uint64x1_t) (__a <= __AARCH64_INT64_C (0));\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -12659,7 +12659,7 @@ vclt_s32 (int32x2_t __a, int32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vclt_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] < __b[0] ? -1ll : 0ll};\n+  return (uint64x1_t) (__a < __b);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -12683,7 +12683,7 @@ vclt_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vclt_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) {__a[0] < __b[0] ? -1ll : 0ll};\n+  return (__a < __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -12807,7 +12807,7 @@ vcltz_s32 (int32x2_t __a)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vcltz_s64 (int64x1_t __a)\n {\n-  return (uint64x1_t) {__a[0] < 0ll ? -1ll : 0ll};\n+  return (uint64x1_t) (__a < __AARCH64_INT64_C (0));\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n@@ -23767,7 +23767,7 @@ vtst_s32 (int32x2_t __a, int32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vtst_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) {(__a[0] & __b[0]) ? -1ll : 0ll};\n+  return (uint64x1_t) ((__a & __b) != __AARCH64_INT64_C (0));\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -23791,7 +23791,7 @@ vtst_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vtst_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) {(__a[0] & __b[0]) ? -1ll : 0ll};\n+  return ((__a & __b) != __AARCH64_UINT64_C (0));\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))"}, {"sha": "e71b8e043d71c1b203616c3f052fe9979d5814f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8105959bdd74007458c528e053dcf22c245474b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8105959bdd74007458c528e053dcf22c245474b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8105959bdd74007458c528e053dcf22c245474b", "patch": "@@ -1,3 +1,8 @@\n+2015-05-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/singleton_intrinsics_1.c: Generalize regex to\n+\tallow cmlt or sshr.\n+\n 2015-05-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64918"}, {"sha": "633a0d24eade982181d972b915f303b06e5087c4", "filename": "gcc/testsuite/gcc.target/aarch64/singleton_intrinsics_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8105959bdd74007458c528e053dcf22c245474b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsingleton_intrinsics_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8105959bdd74007458c528e053dcf22c245474b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsingleton_intrinsics_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsingleton_intrinsics_1.c?ref=a8105959bdd74007458c528e053dcf22c245474b", "patch": "@@ -235,8 +235,8 @@ test_vrshl_u64 (uint64x1_t a, int64x1_t b)\n   return vrshl_u64 (a, b);\n }\n \n-/* For int64x1_t, sshr...#63 is output instead of the equivalent cmlt...#0.  */\n-/* { dg-final { scan-assembler-times \"\\\\tsshr\\\\td\\[0-9\\]+\" 2 } } */\n+/* For int64x1_t, sshr...#63 is equivalent to cmlt...#0.  */\n+/* { dg-final { scan-assembler-times \"\\\\t(?:sshr|cmlt)\\\\td\\[0-9\\]+\" 2 } } */\n \n int64x1_t\n test_vshr_n_s64 (int64x1_t a)"}]}