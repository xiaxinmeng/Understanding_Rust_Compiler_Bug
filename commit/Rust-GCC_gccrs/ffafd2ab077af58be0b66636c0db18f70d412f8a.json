{"sha": "ffafd2ab077af58be0b66636c0db18f70d412f8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZhZmQyYWIwNzdhZjU4YmUwYjY2NjM2YzBkYjE4ZjcwZDQxMmY4YQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2018-07-16T14:09:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:09:58Z"}, "message": "[Ada] Adjust inlining in GNATprove mode for predicate/invariant/DIC\n\nThe frontend generates special functions for checking subtype predicates,\ntype invariants and Default_Initial_Condition aspect. These are translated\nas predicates in GNATprove, and as such should no call inside these\nfunctions should be inlined. This is similar to the existing handling of\ncalls inside expression functions.\n\nThere is no impact on compilation.\n\n2018-07-16  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Call): Do not inline calls inside\n\tcompiler-generated functions translated as predicates in GNATprove.\n\nFrom-SVN: r262701", "tree": {"sha": "d198fe3d136212a87b3f1095419ec1f1e569e476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d198fe3d136212a87b3f1095419ec1f1e569e476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffafd2ab077af58be0b66636c0db18f70d412f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffafd2ab077af58be0b66636c0db18f70d412f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffafd2ab077af58be0b66636c0db18f70d412f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffafd2ab077af58be0b66636c0db18f70d412f8a/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3181992f587d6d7de62c21ae93fb37d68f8d265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3181992f587d6d7de62c21ae93fb37d68f8d265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3181992f587d6d7de62c21ae93fb37d68f8d265"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "9b66735a5070537346a2077bf8573bd2e4bb599b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffafd2ab077af58be0b66636c0db18f70d412f8a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffafd2ab077af58be0b66636c0db18f70d412f8a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ffafd2ab077af58be0b66636c0db18f70d412f8a", "patch": "@@ -1,3 +1,8 @@\n+2018-07-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Do not inline calls inside\n+\tcompiler-generated functions translated as predicates in GNATprove.\n+\n 2018-07-16  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Allocator): Test for Storage_Pool being RTE in"}, {"sha": "b2cac71ce9f4fa4402826af7263aa0b37a19a2d0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffafd2ab077af58be0b66636c0db18f70d412f8a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffafd2ab077af58be0b66636c0db18f70d412f8a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ffafd2ab077af58be0b66636c0db18f70d412f8a", "patch": "@@ -5374,7 +5374,7 @@ package body Sem_Res is\n \n          --  A universal real conditional expression can appear in a fixed-type\n          --  context and must be resolved with that context to facilitate the\n-         --  code generation to the backend.\n+         --  code generation in the back end.\n \n          elsif Nkind_In (N, N_Case_Expression, N_If_Expression)\n            and then Etype (N) = Universal_Real\n@@ -6685,22 +6685,43 @@ package body Sem_Res is\n \n             elsif Full_Analysis then\n \n-               --  Do not inline calls inside expression functions, as this\n+               --  Do not inline calls inside expression functions or functions\n+               --  generated by the front end for subtype predicates, as this\n                --  would prevent interpreting them as logical formulas in\n                --  GNATprove. Only issue a message when the body has been seen,\n                --  otherwise this leads to spurious messages on callees that\n                --  are themselves expression functions.\n \n                if Present (Current_Subprogram)\n-                 and then Is_Expression_Function_Or_Completion\n-                            (Current_Subprogram)\n+                 and then\n+                   (Is_Expression_Function_Or_Completion (Current_Subprogram)\n+                     or else Is_Predicate_Function (Current_Subprogram)\n+                     or else Is_Invariant_Procedure (Current_Subprogram)\n+                     or else Is_DIC_Procedure (Current_Subprogram))\n                then\n                   if Present (Body_Id)\n                     and then Present (Body_To_Inline (Nam_Decl))\n                   then\n-                     Cannot_Inline\n-                       (\"cannot inline & (inside expression function)?\",\n-                        N, Nam_UA);\n+                     if Is_Predicate_Function (Current_Subprogram) then\n+                        Cannot_Inline\n+                          (\"cannot inline & (inside predicate)?\",\n+                           N, Nam_UA);\n+\n+                     elsif Is_Invariant_Procedure (Current_Subprogram) then\n+                        Cannot_Inline\n+                          (\"cannot inline & (inside invariant)?\",\n+                           N, Nam_UA);\n+\n+                     elsif Is_DIC_Procedure (Current_Subprogram) then\n+                        Cannot_Inline\n+                        (\"cannot inline & (inside Default_Initial_Condition)?\",\n+                         N, Nam_UA);\n+\n+                     else\n+                        Cannot_Inline\n+                          (\"cannot inline & (inside expression function)?\",\n+                           N, Nam_UA);\n+                     end if;\n                   end if;\n \n                --  With the one-pass inlining technique, a call cannot be\n@@ -11854,7 +11875,7 @@ package body Sem_Res is\n             Analyze_And_Resolve (String_Literal_Low_Bound (Subtype_Id));\n \n             --  Build bona fide subtype for the string, and wrap it in an\n-            --  unchecked conversion, because the backend expects the\n+            --  unchecked conversion, because the back end expects the\n             --  String_Literal_Subtype to have a static lower bound.\n \n             Index_Subtype :=\n@@ -11864,7 +11885,7 @@ package body Sem_Res is\n             Set_Parent (Drange, N);\n             Analyze_And_Resolve (Drange, Index_Type);\n \n-            --  In the context, the Index_Type may already have a constraint,\n+            --  In this context, the Index_Type may already have a constraint,\n             --  so use common base type on string subtype. The base type may\n             --  be used when generating attributes of the string, for example\n             --  in the context of a slice assignment."}]}