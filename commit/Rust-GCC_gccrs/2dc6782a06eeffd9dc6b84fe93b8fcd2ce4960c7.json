{"sha": "2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjNjc4MmEwNmVlZmZkOWRjNmI4NGZlOTNiOGZjZDJjZTQ5NjBjNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-08-30T22:43:16Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-08-31T06:28:27Z"}, "message": "Fix PR driver/79181 (and others), not deleting some /tmp/cc* files for LTO.\n\nSo the main issue here is that some signals are not setup unlike collect2.\nSo this merges the setting up of the signal handlers to one function in\ncollect-utils and has collect2 and lto-wrapper call that function.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR driver/79181\n\t* collect-utils.c (setup_signals): New declaration.\n\t* collect-utils.h (setup_signals): New function.\n\t* collect2.c (handler): Delete.\n\t(main): Instead of manually setting up the signals,\n\tjust call setup_signals.\n\t* lto-wrapper.c (main): Likewise.", "tree": {"sha": "0eefa07639eef1dfde32f69b24d7c9c07d4ce857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eefa07639eef1dfde32f69b24d7c9c07d4ce857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d86078881bb7bb57bc6e68c22211707d2b3dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d86078881bb7bb57bc6e68c22211707d2b3dc7"}], "stats": {"total": 92, "additions": 40, "deletions": 52}, "files": [{"sha": "19423d31885d400225acabe57959d4ca82402b71", "filename": "gcc/collect-utils.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Fcollect-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Fcollect-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.c?ref=2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "patch": "@@ -57,6 +57,43 @@ fatal_signal (int signum)\n      so its normal effect occurs.  */\n   kill (getpid (), signum);\n }\n+\n+/* Setup the signal handlers for the utils. */\n+void\n+setup_signals (void)\n+{\n+#ifdef SIGQUIT\n+  if (signal (SIGQUIT, SIG_IGN) != SIG_IGN)\n+    signal (SIGQUIT, fatal_signal);\n+#endif\n+  if (signal (SIGINT, SIG_IGN) != SIG_IGN)\n+    signal (SIGINT, fatal_signal);\n+#ifdef SIGALRM\n+  if (signal (SIGALRM, SIG_IGN) != SIG_IGN)\n+    signal (SIGALRM, fatal_signal);\n+#endif\n+#ifdef SIGHUP\n+  if (signal (SIGHUP, SIG_IGN) != SIG_IGN)\n+    signal (SIGHUP, fatal_signal);\n+#endif\n+  if (signal (SIGSEGV, SIG_IGN) != SIG_IGN)\n+    signal (SIGSEGV, fatal_signal);\n+  if (signal (SIGTERM, SIG_IGN) != SIG_IGN)\n+    signal (SIGTERM, fatal_signal);\n+#ifdef SIGPIPE\n+  if (signal (SIGPIPE, SIG_IGN) != SIG_IGN)\n+    signal (SIGPIPE, fatal_signal);\n+#endif\n+#ifdef SIGBUS\n+  if (signal (SIGBUS, SIG_IGN) != SIG_IGN)\n+    signal (SIGBUS, fatal_signal);\n+#endif\n+#ifdef SIGCHLD\n+  /* We *MUST* set SIGCHLD to SIG_DFL so that the wait4() call will\n+     receive the signal.  A different setting is inheritable */\n+  signal (SIGCHLD, SIG_DFL);\n+#endif\n+}\n \f\n /* Wait for a process to finish, and exit if a nonzero status is found.  */\n "}, {"sha": "15f831d778aa5d548eedba3dc275d455dd6f1947", "filename": "gcc/collect-utils.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Fcollect-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Fcollect-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.h?ref=2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n extern void notice (const char *, ...)\n   __attribute__ ((format (printf, 1, 2)));\n extern void fatal_signal (int);\n+extern void setup_signals (void);\n \n extern struct pex_obj *collect_execute (const char *, char **,\n \t\t\t\t\tconst char *, const char *,"}, {"sha": "cf04a58ba4dd9d36be2df4c20d1aaf3eec6c0424", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "patch": "@@ -301,7 +301,6 @@ const char tool_name[] = \"collect2\";\n \n static symkind is_ctor_dtor (const char *);\n \n-static void handler (int);\n static void maybe_unlink_list (char **);\n static void add_to_list (struct head *, const char *);\n static int extract_init_priority (const char *);\n@@ -408,14 +407,6 @@ collect_atexit (void)\n   tool_cleanup (false);\n }\n \n-static void\n-handler (int signo)\n-{\n-  tool_cleanup (true);\n-\n-  signal (signo, SIG_DFL);\n-  raise (signo);\n-}\n /* Notify user of a non-error, without translating the format string.  */\n void\n notice_translated (const char *cmsgid, ...)\n@@ -907,11 +898,7 @@ main (int argc, char **argv)\n   COLLECT2_HOST_INITIALIZATION;\n #endif\n \n-#ifdef SIGCHLD\n-  /* We *MUST* set SIGCHLD to SIG_DFL so that the wait4() call will\n-     receive the signal.  A different setting is inheritable */\n-  signal (SIGCHLD, SIG_DFL);\n-#endif\n+  setup_signals ();\n \n   /* Unlock the stdio streams.  */\n   unlock_std_streams ();\n@@ -1051,27 +1038,6 @@ main (int argc, char **argv)\n   if (argc < 2)\n     fatal_error (input_location, \"no arguments\");\n \n-#ifdef SIGQUIT\n-  if (signal (SIGQUIT, SIG_IGN) != SIG_IGN)\n-    signal (SIGQUIT, handler);\n-#endif\n-  if (signal (SIGINT, SIG_IGN) != SIG_IGN)\n-    signal (SIGINT, handler);\n-#ifdef SIGALRM\n-  if (signal (SIGALRM, SIG_IGN) != SIG_IGN)\n-    signal (SIGALRM, handler);\n-#endif\n-#ifdef SIGHUP\n-  if (signal (SIGHUP, SIG_IGN) != SIG_IGN)\n-    signal (SIGHUP, handler);\n-#endif\n-  if (signal (SIGSEGV, SIG_IGN) != SIG_IGN)\n-    signal (SIGSEGV, handler);\n-#ifdef SIGBUS\n-  if (signal (SIGBUS, SIG_IGN) != SIG_IGN)\n-    signal (SIGBUS, handler);\n-#endif\n-\n   /* Extract COMPILER_PATH and PATH into our prefix list.  */\n   prefix_from_env (\"COMPILER_PATH\", &cpath);\n   prefix_from_env (\"PATH\", &path);"}, {"sha": "903c258a03acf23cb424bf15b3b6ab572c9cbc5f", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=2dc6782a06eeffd9dc6b84fe93b8fcd2ce4960c7", "patch": "@@ -2125,23 +2125,7 @@ main (int argc, char *argv[])\n   if (atexit (lto_wrapper_cleanup) != 0)\n     fatal_error (input_location, \"%<atexit%> failed\");\n \n-  if (signal (SIGINT, SIG_IGN) != SIG_IGN)\n-    signal (SIGINT, fatal_signal);\n-#ifdef SIGHUP\n-  if (signal (SIGHUP, SIG_IGN) != SIG_IGN)\n-    signal (SIGHUP, fatal_signal);\n-#endif\n-  if (signal (SIGTERM, SIG_IGN) != SIG_IGN)\n-    signal (SIGTERM, fatal_signal);\n-#ifdef SIGPIPE\n-  if (signal (SIGPIPE, SIG_IGN) != SIG_IGN)\n-    signal (SIGPIPE, fatal_signal);\n-#endif\n-#ifdef SIGCHLD\n-  /* We *MUST* set SIGCHLD to SIG_DFL so that the wait4() call will\n-     receive the signal.  A different setting is inheritable */\n-  signal (SIGCHLD, SIG_DFL);\n-#endif\n+  setup_signals ();\n \n   /* We may be called with all the arguments stored in some file and\n      passed with @file.  Expand them into argv before processing.  */"}]}