{"sha": "9b270cce9339106ca876bf4369156ef5d2bb5588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyNzBjY2U5MzM5MTA2Y2E4NzZiZjQzNjkxNTZlZjVkMmJiNTU4OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-22T19:43:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-22T19:43:04Z"}, "message": "c-tree.texi (TRUTH_NOT_EXPR, [...]): Mention the restriction on types.\n\n\t* doc/c-tree.texi (TRUTH_NOT_EXPR, TRUTH_ANDIF_EXPR,\n\tTRUTH_ORIF_EXPR, TRUTH_AND_EXPR, TRUTH_OR_EXPR,\n\tTRUTH_XOR_EXPR): Mention the restriction on types.\n\nFrom-SVN: r87881", "tree": {"sha": "237d1cdae647c65eee7f903d58e521a5f253e93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/237d1cdae647c65eee7f903d58e521a5f253e93a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b270cce9339106ca876bf4369156ef5d2bb5588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b270cce9339106ca876bf4369156ef5d2bb5588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b270cce9339106ca876bf4369156ef5d2bb5588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b270cce9339106ca876bf4369156ef5d2bb5588/comments", "author": null, "committer": null, "parents": [{"sha": "942149531d595c7860a49a9688fd9cd160a62455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942149531d595c7860a49a9688fd9cd160a62455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942149531d595c7860a49a9688fd9cd160a62455"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "203a65bb44f9d43d1f2d98d7f025b289fe81610b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b270cce9339106ca876bf4369156ef5d2bb5588/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b270cce9339106ca876bf4369156ef5d2bb5588/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b270cce9339106ca876bf4369156ef5d2bb5588", "patch": "@@ -1,3 +1,9 @@\n+2004-09-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* doc/c-tree.texi (TRUTH_NOT_EXPR, TRUTH_ANDIF_EXPR,\n+\tTRUTH_ORIF_EXPR, TRUTH_AND_EXPR, TRUTH_OR_EXPR,\n+\tTRUTH_XOR_EXPR): Mention the restriction on types.\n+\n 2004-09-22  Matt Austern  <austern@apple.com>\n \n \t* config/darwin.c (darwin_make_decl_one_only)"}, {"sha": "653eb09874e78f43047784f3cfdbbda09f9a130d", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b270cce9339106ca876bf4369156ef5d2bb5588/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b270cce9339106ca876bf4369156ef5d2bb5588/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=9b270cce9339106ca876bf4369156ef5d2bb5588", "patch": "@@ -1908,7 +1908,9 @@ type.  The only operand is the value to be complemented.\n \n @item TRUTH_NOT_EXPR\n These nodes represent logical negation, and will always have integral\n-(or boolean) type.  The operand is the value being negated.\n+(or boolean) type.  The operand is the value being negated.  The type\n+of the operand and that of the result are always of @code{BOOLEAN_TYPE}\n+or @code{INTEGER_TYPE}.\n \n @item PREDECREMENT_EXPR\n @itemx PREINCREMENT_EXPR\n@@ -2024,8 +2026,8 @@ type.\n These nodes represent logical and and logical or, respectively.  These\n operators are not strict; i.e., the second operand is evaluated only if\n the value of the expression is not determined by evaluation of the first\n-operand.  The type of the operands, and the result type, is always of\n-boolean or integral type.\n+operand.  The type of the operands and that of the result are always of\n+@code{BOOLEAN_TYPE} or @code{INTEGER_TYPE}.\n \n @item TRUTH_AND_EXPR\n @itemx TRUTH_OR_EXPR\n@@ -2034,7 +2036,8 @@ These nodes represent logical and, logical or, and logical exclusive or.\n They are strict; both arguments are always evaluated.  There are no\n corresponding operators in C or C++, but the front end will sometimes\n generate these expressions anyhow, if it can tell that strictness does\n-not matter.\n+not matter.  The type of the operands and that of the result are\n+always of @code{BOOLEAN_TYPE} or @code{INTEGER_TYPE}.\n \n @itemx PLUS_EXPR\n @itemx MINUS_EXPR"}]}