{"sha": "1b867ae782244908713c24c26f526e65a35f6d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4NjdhZTc4MjI0NDkwODcxM2MyNGMyNmY1MjZlNjVhMzVmNmQxMg==", "commit": {"author": {"name": "Dennis Wassel", "email": "dennis.wassel@gmail.com", "date": "2008-11-01T10:24:15Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-11-01T10:24:15Z"}, "message": "re PR fortran/37159 (RANDOM_SEED:  GET=  check array size at compile time and respect -fdefault-integer-*)\n\n2008-11-01  Dennis Wassel  <dennis.wassel@gmail.com>\n\n\tPR fortran/37159\n\t* fortran/check.c (gfc_check_random_seed): Check PUT size\n\tat compile time.\n\n2008-11-01  Dennis Wassel  <dennis.wassel@gmail.com>\n\n\tPR fortran/37159\n\t* intrinsics/random.c: Added comment to adapt check.c, should\n\tkiss_size change.\n\tFew cosmetic changes to existing comments.\n\n2008-11-01  Dennis Wassel  <dennis.wassel@gmail.com>\n\n\tPR fortran/37159\n\t* gfortran.dg/random_seed_1.f90: New testcase.\n\nFrom-SVN: r141511", "tree": {"sha": "fef36684aa65e3fb961b23c40e1c912fdfd94a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fef36684aa65e3fb961b23c40e1c912fdfd94a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b867ae782244908713c24c26f526e65a35f6d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b867ae782244908713c24c26f526e65a35f6d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b867ae782244908713c24c26f526e65a35f6d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b867ae782244908713c24c26f526e65a35f6d12/comments", "author": null, "committer": null, "parents": [{"sha": "f9fd1e7778343ad0063bac8a10232d214d68f6f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fd1e7778343ad0063bac8a10232d214d68f6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fd1e7778343ad0063bac8a10232d214d68f6f2"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "8f0e58d15480df84d5cfdf67b11ed3d9f8fed807", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1b867ae782244908713c24c26f526e65a35f6d12", "patch": "@@ -1,3 +1,9 @@\n+2008-11-01  Dennis Wassel  <dennis.wassel@gmail.com>\n+\n+\tPR fortran/37159\n+\t* fortran/check.c (gfc_check_random_seed): Check PUT size\n+\tat compile time.\n+\n 2008-10-31  Mikael Morin  <mikael.morin@tele2.fr>\n \n \tPR fortran/35840"}, {"sha": "de507676491d6449f773d831a72d72eabbf33a4d", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=1b867ae782244908713c24c26f526e65a35f6d12", "patch": "@@ -3120,9 +3120,16 @@ gfc_check_random_number (gfc_expr *harvest)\n gfc_try\n gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n {\n-  unsigned int nargs = 0;\n+  unsigned int nargs = 0, kiss_size;\n   locus *where = NULL;\n+  mpz_t put_size;\n+  bool have_gfc_real_16; /* Try and mimic HAVE_GFC_REAL_16 in libgfortran.  */\n \n+  have_gfc_real_16 = gfc_validate_kind (BT_REAL, 16, true) != -1;\n+\n+  /* Keep these values in sync with kiss_size in libgfortran/random.c.  */\n+  kiss_size = have_gfc_real_16 ? 12 : 8;\n+  \n   if (size != NULL)\n     {\n       if (size->expr_type != EXPR_VARIABLE\n@@ -3162,6 +3169,12 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \n       if (kind_value_check (put, 1, gfc_default_integer_kind) == FAILURE)\n \treturn FAILURE;\n+\n+      if (gfc_array_size (put, &put_size) == SUCCESS\n+\t  && mpz_get_ui (put_size) < kiss_size)\n+\tgfc_error (\"Array PUT of intrinsic %s is too small (%i/%i) at %L\", \n+\t\t   gfc_current_intrinsic, (int) mpz_get_ui (put_size),\n+\t\t   kiss_size, where);\n     }\n \n   if (get != NULL)"}, {"sha": "db83bac28e30bc8f8502b918a64f6575a77d174c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b867ae782244908713c24c26f526e65a35f6d12", "patch": "@@ -1,3 +1,8 @@\n+2008-11-01  Dennis Wassel  <dennis.wassel@gmail.com>\n+\n+\tPR fortran/37159\n+\t* gfortran.dg/random_seed_1.f90: New testcase.\n+\n 2008-10-31  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc.dg/cpp/Wsignprom.c: Add column numbers."}, {"sha": "510badf7d68b3a3be927adc2908f7981613e45be", "filename": "gcc/testsuite/gfortran.dg/random_seed_1.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b867ae782244908713c24c26f526e65a35f6d12/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_1.f90?ref=1b867ae782244908713c24c26f526e65a35f6d12", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+\n+! Emit a diagnostic for too small PUT array at compile time\n+! See PR fortran/37159\n+\n+! Possible improvement:\n+! Provide a separate testcase for systems that support REAL(16),\n+! to test the minimum size of 12 (instead of 8).\n+\n+PROGRAM random_seed_1\n+  IMPLICIT NONE\n+  INTEGER :: small(7)\n+  CALL RANDOM_SEED(PUT=small)   ! { dg-error \"is too small\" }\n+END PROGRAM random_seed_1"}, {"sha": "2903760cb8c5b7fc7f6b048ea0f0ad884cf7e532", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b867ae782244908713c24c26f526e65a35f6d12/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b867ae782244908713c24c26f526e65a35f6d12/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1b867ae782244908713c24c26f526e65a35f6d12", "patch": "@@ -1,3 +1,10 @@\n+2008-11-01  Dennis Wassel  <dennis.wassel@gmail.com>\n+\n+\tPR fortran/37159\n+\t* intrinsics/random.c: Added comment to adapt check.c, should\n+\tkiss_size change.\n+\tFew cosmetic changes to existing comments.\n+\n 2008-10-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/37707"}, {"sha": "24ba1058e57cf996049c6e9bfa416df54c7f96c6", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b867ae782244908713c24c26f526e65a35f6d12/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b867ae782244908713c24c26f526e65a35f6d12/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=1b867ae782244908713c24c26f526e65a35f6d12", "patch": "@@ -75,8 +75,7 @@ static __gthread_mutex_t random_lock;\n    GFC_REAL_* types in the range of [0,1).  If GFC_REAL_*_RADIX are 2\n    or 16, respectively, we mask off the bits that don't fit into the\n    correct GFC_REAL_*, convert to the real type, then multiply by the\n-   correct offset.\n-*/\n+   correct offset.  */\n \n \n static inline void\n@@ -214,8 +213,7 @@ KISS algorithm.  */\n    We do this by using three generators with different seeds, the\n    first one always for the most significant bits, the second one\n    for bits 33..64 (if present in the REAL kind), and the third one\n-   (called twice) for REAL(16).\n-*/\n+   (called twice) for REAL(16).  */\n \n #define GFC_SL(k, n)\t((k)^((k)<<(n)))\n #define GFC_SR(k, n)\t((k)^((k)>>(n)))\n@@ -229,8 +227,11 @@ KISS algorithm.  */\n    with 0<=x<2^32, 0<y<2^32, 0<=z<2^32, 0<=c<698769069\n    except that the two pairs\n    z=0,c=0 and z=2^32-1,c=698769068\n-   should be avoided.\n-*/\n+   should be avoided.  */\n+\n+/* Any modifications to the seeds that change kiss_size below need to be\n+   reflected in check.c (gfc_check_random_seed) to enable correct\n+   compile-time checking of PUT size for the RANDOM_SEED intrinsic.  */\n \n #define KISS_DEFAULT_SEED_1 123456789, 362436069, 521288629, 316191069\n #define KISS_DEFAULT_SEED_2 987654321, 458629013, 582859209, 438195021\n@@ -390,7 +391,7 @@ arandom_r4 (gfc_array_r4 *x)\n \n   while (dest)\n     {\n-      /* random_r4 (dest); */\n+      /* random_r4 (dest);  */\n       kiss = kiss_random_kernel (kiss_seed_1);\n       rnumber_4 (dest, kiss);\n \n@@ -457,7 +458,7 @@ arandom_r8 (gfc_array_r8 *x)\n \n   while (dest)\n     {\n-      /* random_r8 (dest); */\n+      /* random_r8 (dest);  */\n       kiss = ((GFC_UINTEGER_8) kiss_random_kernel (kiss_seed_1)) << 32;\n       kiss += kiss_random_kernel (kiss_seed_2);\n       rnumber_8 (dest, kiss);\n@@ -527,7 +528,7 @@ arandom_r10 (gfc_array_r10 *x)\n \n   while (dest)\n     {\n-      /* random_r10 (dest); */\n+      /* random_r10 (dest);  */\n       kiss = ((GFC_UINTEGER_8) kiss_random_kernel (kiss_seed_1)) << 32;\n       kiss += kiss_random_kernel (kiss_seed_2);\n       rnumber_10 (dest, kiss);\n@@ -599,7 +600,7 @@ arandom_r16 (gfc_array_r16 *x)\n \n   while (dest)\n     {\n-      /* random_r16 (dest); */\n+      /* random_r16 (dest);  */\n       kiss1 = ((GFC_UINTEGER_8) kiss_random_kernel (kiss_seed_1)) << 32;\n       kiss1 += kiss_random_kernel (kiss_seed_2);\n "}]}