{"sha": "9da92cbda9b73a179f031d4d362b5374f9fcaa09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRhOTJjYmRhOWI3M2ExNzlmMDMxZDRkMzYyYjUzNzRmOWZjYWEwOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-11-06T19:15:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-11-06T19:15:45Z"}, "message": "libgo: Solaris portability fixes.\n\n    \n    Only build net/hook_cloexec.go on GNU/Linux and FreeBSD, because those\n    are the only systems with accept4.\n    \n    Add syscall/libcall_bsd.go to define sendfile for *BSD and Solaris.\n    \n    Revert tcpsockopt_solaris.go back to the earlier version, so that it\n    works on Solaris 10.\n    \n    Always pass the address of a Pid_t value to TIOCGPGRP and TIOCSPGRP.\n    \n    Include <unistd.h> in runtime/go-varargs.c.\n    \n    Reviewed-on: https://go-review.googlesource.com/16719\n\nFrom-SVN: r229880", "tree": {"sha": "3c89e373addb3b0abe146e923891ebbdfc72ced5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c89e373addb3b0abe146e923891ebbdfc72ced5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9da92cbda9b73a179f031d4d362b5374f9fcaa09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da92cbda9b73a179f031d4d362b5374f9fcaa09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da92cbda9b73a179f031d4d362b5374f9fcaa09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da92cbda9b73a179f031d4d362b5374f9fcaa09/comments", "author": null, "committer": null, "parents": [{"sha": "e78d485eb842bfe4209cec9da3725f5ef6a74abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78d485eb842bfe4209cec9da3725f5ef6a74abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78d485eb842bfe4209cec9da3725f5ef6a74abb"}], "stats": {"total": 102, "additions": 64, "deletions": 38}, "files": [{"sha": "b17ca93b24ca567913ed4015f89c894d6348e278", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -1,4 +1,4 @@\n-47f256e1ed527b2eb4041acf90d33e6abc5e1685\n+10c1d6756ed1dcc814c49921c2a5e27f4677e0e6\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "bf26a4cb667171107ef861743f4e7e184d91b6d3", "filename": "libgo/Makefile.am", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -787,10 +787,14 @@ endif\n endif\n \n if LIBGO_IS_LINUX\n-go_net_cloexec_file = go/net/sock_cloexec.go\n+go_net_cloexec_file = go/net/sock_cloexec.go go/net/hook_cloexec.go\n+else\n+if LIBGO_IS_FREEBSD\n+go_net_cloexec_file = go/net/sock_cloexec.go go/net/hook_cloexec.go\n else\n go_net_cloexec_file = go/net/sys_cloexec.go\n endif\n+endif\n \n if LIBGO_IS_OPENBSD\n go_net_tcpsockopt_file = go/net/tcpsockopt_openbsd.go\n@@ -825,7 +829,6 @@ go_net_common_files = \\\n \tgo/net/file.go \\\n \tgo/net/file_unix.go \\\n \tgo/net/hook.go \\\n-\tgo/net/hook_cloexec.go \\\n \tgo/net/hook_unix.go \\\n \tgo/net/hosts.go \\\n \tgo/net/interface.go \\\n@@ -1985,6 +1988,12 @@ else\n syscall_exec_test_file =\n endif\n \n+if LIBGO_IS_LINUX\n+syscall_os_file =\n+else\n+syscall_os_file = go/syscall/libcall_bsd.go\n+endif\n+\n go_base_syscall_files = \\\n \tgo/syscall/env_unix.go \\\n \tgo/syscall/syscall_errno.go \\\n@@ -2003,6 +2012,7 @@ go_base_syscall_files = \\\n \t$(syscall_sleep_file) \\\n \t$(syscall_errstr_file) \\\n \t$(syscall_size_file) \\\n+\t$(syscall_os_file) \\\n \t$(syscall_socket_file) \\\n \t$(syscall_socket_os_file) \\\n \t$(syscall_socket_type_file) \\"}, {"sha": "bcfed74b9271865a41269910201248d062baae6a", "filename": "libgo/Makefile.in", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -1089,8 +1089,9 @@ go_mime_files = \\\n @LIBGO_IS_DRAGONFLY_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@go_net_interface_file = go/net/interface_dragonfly.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@go_net_interface_file = go/net/interface_netbsd.go\n @LIBGO_IS_LINUX_TRUE@go_net_interface_file = go/net/interface_linux.go\n-@LIBGO_IS_LINUX_FALSE@go_net_cloexec_file = go/net/sys_cloexec.go\n-@LIBGO_IS_LINUX_TRUE@go_net_cloexec_file = go/net/sock_cloexec.go\n+@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@go_net_cloexec_file = go/net/sys_cloexec.go\n+@LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_cloexec_file = go/net/sock_cloexec.go go/net/hook_cloexec.go\n+@LIBGO_IS_LINUX_TRUE@go_net_cloexec_file = go/net/sock_cloexec.go go/net/hook_cloexec.go\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_DRAGONFLY_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_tcpsockopt_file = go/net/tcpsockopt_unix.go\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_DRAGONFLY_TRUE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_tcpsockopt_file = go/net/tcpsockopt_dragonfly.go\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_tcpsockopt_file = go/net/tcpsockopt_solaris.go\n@@ -1111,7 +1112,6 @@ go_net_common_files = \\\n \tgo/net/file.go \\\n \tgo/net/file_unix.go \\\n \tgo/net/hook.go \\\n-\tgo/net/hook_cloexec.go \\\n \tgo/net/hook_unix.go \\\n \tgo/net/hosts.go \\\n \tgo/net/interface.go \\\n@@ -2076,6 +2076,8 @@ go_unicode_utf8_files = \\\n @LIBGO_IS_LINUX_TRUE@syscall_creds_test_file = go/syscall/creds_test.go\n @LIBGO_IS_LINUX_FALSE@syscall_exec_test_file = \n @LIBGO_IS_LINUX_TRUE@syscall_exec_test_file = go/syscall/exec_linux_test.go go/syscall/syscall_linux_test.go\n+@LIBGO_IS_LINUX_FALSE@syscall_os_file = go/syscall/libcall_bsd.go\n+@LIBGO_IS_LINUX_TRUE@syscall_os_file = \n go_base_syscall_files = \\\n \tgo/syscall/env_unix.go \\\n \tgo/syscall/syscall_errno.go \\\n@@ -2094,6 +2096,7 @@ go_base_syscall_files = \\\n \t$(syscall_sleep_file) \\\n \t$(syscall_errstr_file) \\\n \t$(syscall_size_file) \\\n+\t$(syscall_os_file) \\\n \t$(syscall_socket_file) \\\n \t$(syscall_socket_os_file) \\\n \t$(syscall_socket_type_file) \\"}, {"sha": "eaab6b6787b524c62b336a3c43c124e2eeeb3a07", "filename": "libgo/go/net/tcpsockopt_solaris.go", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fnet%2Ftcpsockopt_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fnet%2Ftcpsockopt_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsockopt_solaris.go?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -1,7 +1,9 @@\n-// Copyright 2015 The Go Authors.  All rights reserved.\n+// Copyright 2013 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// TCP socket options for solaris\n+\n package net\n \n import (\n@@ -10,26 +12,16 @@ import (\n \t\"time\"\n )\n \n+// Set keep alive period.\n func setKeepAlivePeriod(fd *netFD, d time.Duration) error {\n \tif err := fd.incref(); err != nil {\n \t\treturn err\n \t}\n \tdefer fd.decref()\n-\t// The kernel expects milliseconds so round to next highest\n-\t// millisecond.\n-\td += (time.Millisecond - time.Nanosecond)\n-\tmsecs := int(d / time.Millisecond)\n \n-\t// Normally we'd do\n-\t//\tsyscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_TCP, syscall.TCP_KEEPINTVL, secs)\n-\t// here, but we can't because Solaris does not have TCP_KEEPINTVL.\n-\t// Solaris has TCP_KEEPALIVE_ABORT_THRESHOLD, but it's not the same\n-\t// thing, it refers to the total time until aborting (not between\n-\t// probes), and it uses an exponential backoff algorithm instead of\n-\t// waiting the same time between probes. We can't hope for the best\n-\t// and do it anyway, like on Darwin, because Solaris might eventually\n-\t// allocate a constant with a different meaning for the value of\n-\t// TCP_KEEPINTVL on illumos.\n+\t// The kernel expects seconds so round to next highest second.\n+\td += (time.Second - time.Nanosecond)\n+\tsecs := int(d.Seconds())\n \n-\treturn os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_TCP, syscall.TCP_KEEPALIVE_THRESHOLD, msecs))\n+\treturn os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_TCP, syscall.SO_KEEPALIVE, secs))\n }"}, {"sha": "9042ce263aae487b19114faba4be498be9794dc8", "filename": "libgo/go/syscall/exec_bsd.go", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -102,11 +102,9 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t}\n \n \tif sys.Foreground {\n-\t\tpgrp := sys.Pgid\n+\t\tpgrp := Pid_t(sys.Pgid)\n \t\tif pgrp == 0 {\n-\t\t\tr1 = raw_getpid()\n-\n-\t\t\tpgrp = int(r1)\n+\t\t\tpgrp = raw_getpid()\n \t\t}\n \n \t\t// Place process group in foreground."}, {"sha": "540efb3a6d8615e39e962c706f11f816fa3f8bcf", "filename": "libgo/go/syscall/exec_linux.go", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_linux.go?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -171,14 +171,9 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t}\n \n \tif sys.Foreground {\n-\t\tpgrp := int32(sys.Pgid)\n+\t\tpgrp := Pid_t(sys.Pgid)\n \t\tif pgrp == 0 {\n-\t\t\tr1 = uintptr(raw_getpid())\n-\t\t\tif err1 != 0 {\n-\t\t\t\tgoto childerror\n-\t\t\t}\n-\n-\t\t\tpgrp = int32(r1)\n+\t\t\tpgrp = raw_getpid()\n \t\t}\n \n \t\t// Place process group in foreground.\n@@ -236,7 +231,7 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t\t// using SIGKILL.\n \t\tr1 := raw_getppid()\n \t\tif r1 != ppid {\n-\t\t\tpid = raw_getpid()\n+\t\t\tpid := raw_getpid()\n \t\t\terr1 = raw_kill(pid, sys.Pdeathsig)\n \t\t\tif err1 != 0 {\n \t\t\t\tgoto childerror"}, {"sha": "d1927de9b4b6d19c009fb55895b146170f01b25a", "filename": "libgo/go/syscall/exec_unix.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_unix.go?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -17,10 +17,10 @@ import (\n //sysnb\traw_fork() (pid Pid_t, err Errno)\n //fork() Pid_t\n \n-//sysnb\traw_getpid() (pid int)\n+//sysnb\traw_getpid() (pid Pid_t)\n //getpid() Pid_t\n \n-//sysnb\traw_getppid() (pid int)\n+//sysnb\traw_getppid() (pid Pid_t)\n //getppid() Pid_t\n \n //sysnb raw_setsid() (err Errno)\n@@ -59,7 +59,7 @@ import (\n //sysnb raw_dup2(oldfd int, newfd int) (err Errno)\n //dup2(oldfd _C_int, newfd _C_int) _C_int\n \n-//sysnb raw_kill(pid int, sig Signal) (err Errno)\n+//sysnb raw_kill(pid Pid_t, sig Signal) (err Errno)\n //kill(pid Pid_t, sig _C_int) _C_int\n \n //sysnb raw_setgroups(size int, list unsafe.Pointer) (err Errno)"}, {"sha": "69c4a1f1798a84c2b4e1bb031430cf0c40be8ae4", "filename": "libgo/go/syscall/exec_unix_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Fexec_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_unix_test.go?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -169,7 +169,7 @@ func TestForeground(t *testing.T) {\n \t\tt.Skipf(\"Can't test Foreground. Couldn't open /dev/tty: %s\", err)\n \t}\n \n-\tfpgrp := 0\n+\tfpgrp := syscall.Pid_t(0)\n \n \terrno := syscall.Ioctl(tty.Fd(), syscall.TIOCGPGRP, uintptr(unsafe.Pointer(&fpgrp)))\n \tif errno != 0 {"}, {"sha": "4501f88ad481df685b8058355af01fabae33e36a", "filename": "libgo/go/syscall/libcall_bsd.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Flibcall_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fgo%2Fsyscall%2Flibcall_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_bsd.go?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// BSD library calls.\n+\n+package syscall\n+\n+import \"unsafe\"\n+\n+//sys\tsendfile(outfd int, infd int, offset *Offset_t, count int) (written int, err error)\n+//sendfile(outfd _C_int, infd _C_int, offset *Offset_t, count Size_t) Ssize_t\n+func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err error) {\n+\tif raceenabled {\n+\t\traceReleaseMerge(unsafe.Pointer(&ioSync))\n+\t}\n+\tvar soff Offset_t\n+\tvar psoff *Offset_t\n+\tif offset != nil {\n+\t\tpsoff = &soff\n+\t}\n+\twritten, err = sendfile(outfd, infd, psoff, count)\n+\tif offset != nil {\n+\t\t*offset = int64(soff)\n+\t}\n+\treturn\n+}"}, {"sha": "691ee56582d015efc0764ec7c195073be4f84295", "filename": "libgo/runtime/go-varargs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fruntime%2Fgo-varargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9da92cbda9b73a179f031d4d362b5374f9fcaa09/libgo%2Fruntime%2Fgo-varargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-varargs.c?ref=9da92cbda9b73a179f031d4d362b5374f9fcaa09", "patch": "@@ -8,6 +8,7 @@\n \n #include <errno.h>\n #include <stdint.h>\n+#include <unistd.h>\n #include <sys/types.h>\n #include <fcntl.h>\n #include <sys/ioctl.h>"}]}