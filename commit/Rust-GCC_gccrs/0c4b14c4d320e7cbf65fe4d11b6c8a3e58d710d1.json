{"sha": "0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM0YjE0YzRkMzIwZTdjYmY2NWZlNGQxMWI2YzhhM2U1OGQ3MTBkMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-29T19:05:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-29T19:05:04Z"}, "message": "[multiple changes]\n\nMon Sep 29 11:05:54 1997  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* lang-options.h: new -Wold-style-cast flag.\n\t* cp-tree.h (warn_old_style_cast): new variable.\n\t* decl2.c (warn_old_style_cast): ditto.\n\t(lang_decode_option): support -Wold-style-cast.\n\t(reparse_absdcl_as_casts): produce old-style-cast warning.\n\nMon Sep 29 09:20:53 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n\n\t* decl.c (cp_finish_decl): Allow expand_aggr_init to set\n \tTREE_USED, reset value based on already_used.\n\n\t* init.c (expand_member_init): Revert change.\n\nFrom-SVN: r15793", "tree": {"sha": "304c265c56c7614c75c0aa1c369245fcec038c4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/304c265c56c7614c75c0aa1c369245fcec038c4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/comments", "author": null, "committer": null, "parents": [{"sha": "974c50f907d067cdaba43812aba6a87314685346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974c50f907d067cdaba43812aba6a87314685346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974c50f907d067cdaba43812aba6a87314685346"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "2fce4349bde5f1d023163a61509951a920ea7cfe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "patch": "@@ -1,3 +1,18 @@\n+Mon Sep 29 11:05:54 1997  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* lang-options.h: new -Wold-style-cast flag.\n+\t* cp-tree.h (warn_old_style_cast): new variable.\n+\t* decl2.c (warn_old_style_cast): ditto.\n+\t(lang_decode_option): support -Wold-style-cast.\n+\t(reparse_absdcl_as_casts): produce old-style-cast warning.\n+\n+Mon Sep 29 09:20:53 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n+\n+\t* decl.c (cp_finish_decl): Allow expand_aggr_init to set\n+ \tTREE_USED, reset value based on already_used.\n+\n+\t* init.c (expand_member_init): Revert change.\n+\t\n Mon Sep 29 08:57:53 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.h, decl.c, decl2.c, pt.c:"}, {"sha": "9e04b698ba23ca864b62eb883b32ab58f616678e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "patch": "@@ -257,6 +257,10 @@ extern int warn_sign_promo;\n \n extern int warn_extern_inline;\n \n+/* Non-zero means warn when an old-style cast is used.  */\n+\n+extern int warn_old_style_cast;\n+\n /* Nonzero means to treat bitfields as unsigned unless they say `signed'.  */\n \n extern int flag_signed_bitfields;"}, {"sha": "695b1c4d39f4a74362cdc434c92e1cf14f74a048", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "patch": "@@ -6299,6 +6299,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n   int temporary = allocation_temporary_p ();\n   char *asmspec = NULL;\n   int was_readonly = 0;\n+  int already_used = 0;\n \n   /* If this is 0, then we did not change obstacks.  */\n   if (! decl)\n@@ -6858,6 +6859,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t    {\n \t      /* Compute and store the initial value.  */\n \t      expand_decl_init (decl);\n+       \t      already_used = TREE_USED (decl) || TREE_USED (type);\n \n \t      if (init || TYPE_NEEDS_CONSTRUCTING (type))\n \t\t{\n@@ -6870,10 +6872,15 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t\t was initialized was ever used.  Don't do this if it has a\n \t\t destructor, so we don't complain about the 'resource\n \t\t allocation is initialization' idiom.  */\n+\n \t      if (TYPE_NEEDS_CONSTRUCTING (type)\n+\t\t  && ! already_used\n \t\t  && cleanup == NULL_TREE\n \t\t  && DECL_NAME (decl))\n \t\tTREE_USED (decl) = 0;\n+\n+\t      if (already_used)\n+\t\tTREE_USED (decl) = 1;\n \t    }\n \n \t  /* Cleanup any temporaries needed for the initial value.  */"}, {"sha": "144502fb2b99faddbf7de745c7b32f5bdcc5b657", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "patch": "@@ -268,6 +268,10 @@ int warn_ecpp;\n \n int warn_sign_promo;\n \n+/* Nonzero means warn when an old-style cast is used.  */\n+\n+int warn_old_style_cast;\n+\n /* Nonzero means `$' can be in an identifier.\n    See cccp.c for reasons why this breaks some obscure ANSI C programs.  */\n \n@@ -649,6 +653,8 @@ lang_decode_option (p)\n \twarn_ecpp = setting;\n       else if (!strcmp (p, \"sign-promo\"))\n \twarn_sign_promo = setting;\n+      else if (!strcmp (p, \"old-style-cast\"))\n+\twarn_old_style_cast = setting;\n       else if (!strcmp (p, \"comment\"))\n \t;\t\t\t/* cpp handles this one.  */\n       else if (!strcmp (p, \"comments\"))\n@@ -3375,6 +3381,9 @@ reparse_absdcl_as_casts (decl, expr)\n       expr = build_c_cast (type, expr);\n     }\n \n+  if (warn_old_style_cast)\n+    warning (\"use of old-style cast\");\n+\n   return expr;\n }\n "}, {"sha": "045584965f8e3e26315f7e5315fc6ed6ea855bd1", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=0c4b14c4d320e7cbf65fe4d11b6c8a3e58d710d1", "patch": "@@ -111,3 +111,5 @@ Boston, MA 02111-1307, USA.  */\n   \"-Wno-effc++\",\n   \"-Wsign-promo\",\n   \"-Wno-sign-promo\",\n+  \"-Wold-style-cast\",\n+  \"-Wno-old-style-cast\","}]}