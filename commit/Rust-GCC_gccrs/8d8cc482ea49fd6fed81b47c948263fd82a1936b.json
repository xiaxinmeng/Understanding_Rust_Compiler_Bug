{"sha": "8d8cc482ea49fd6fed81b47c948263fd82a1936b", "node_id": "C_kwDOANBUbNoAKDhkOGNjNDgyZWE0OWZkNmZlZDgxYjQ3Yzk0ODI2M2ZkODJhMTkzNmI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-03T07:16:41Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T18:53:01Z"}, "message": "RISC-V: Fix backward_propagate_worthwhile_p\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vsetvl.cc (loop_basic_block_p): Adjust function.\n\t(backward_propagate_worthwhile_p): Fix non-worthwhile.", "tree": {"sha": "21c1a750deb0cc203a24febff8866333d1a1d778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c1a750deb0cc203a24febff8866333d1a1d778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d8cc482ea49fd6fed81b47c948263fd82a1936b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8cc482ea49fd6fed81b47c948263fd82a1936b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8cc482ea49fd6fed81b47c948263fd82a1936b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8cc482ea49fd6fed81b47c948263fd82a1936b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "011ba384b343e99bb86eb3ac86c7628c4cd98f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011ba384b343e99bb86eb3ac86c7628c4cd98f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011ba384b343e99bb86eb3ac86c7628c4cd98f8b"}], "stats": {"total": 91, "additions": 71, "deletions": 20}, "files": [{"sha": "4d0e97d7ed7f6f88905c998e893900ac2192f4e0", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 71, "deletions": 20, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8cc482ea49fd6fed81b47c948263fd82a1936b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8cc482ea49fd6fed81b47c948263fd82a1936b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=8d8cc482ea49fd6fed81b47c948263fd82a1936b", "patch": "@@ -116,10 +116,27 @@ vlmax_avl_insn_p (rtx_insn *rinsn)\n \t  || INSN_CODE (rinsn) == CODE_FOR_vlmax_avldi);\n }\n \n+/* Return true if the block is a loop itself:\n+\t  local_dem\n+\t     __________\n+\t ____|____     |\n+\t|        |     |\n+\t|________|     |\n+\t     |_________|\n+\t  reaching_out\n+*/\n static bool\n loop_basic_block_p (const basic_block cfg_bb)\n {\n-  return JUMP_P (BB_END (cfg_bb)) && any_condjump_p (BB_END (cfg_bb));\n+  if (JUMP_P (BB_END (cfg_bb)) && any_condjump_p (BB_END (cfg_bb)))\n+    {\n+      edge e;\n+      edge_iterator ei;\n+      FOR_EACH_EDGE (e, ei, cfg_bb->succs)\n+\tif (e->dest->index == cfg_bb->index)\n+\t  return true;\n+    }\n+  return false;\n }\n \n /* Return true if it is an RVV instruction depends on VTYPE global\n@@ -271,26 +288,60 @@ backward_propagate_worthwhile_p (const basic_block cfg_bb,\n {\n   if (loop_basic_block_p (cfg_bb))\n     {\n-      if (block_info.local_dem.compatible_p (block_info.reaching_out))\n-\treturn true;\n-\n-      /* There is a obvious case that is not worthwhile and meaningless\n-\t to propagate the demand information:\n-\t\t\t  local_dem\n-\t\t\t     __________\n-\t\t\t ____|____     |\n-\t\t\t|        |     |\n-\t\t\t|________|     |\n-\t\t\t     |_________|\n-\t\t\t  reaching_out\n-\t  Header is incompatible with reaching_out and the block is loop itself,\n-\t  we don't backward propagate the local_dem since we can't avoid emit\n-\t  vsetvl for the local_dem.  */\n-      edge e;\n-      edge_iterator ei;\n-      FOR_EACH_EDGE (e, ei, cfg_bb->succs)\n-\tif (e->dest->index == cfg_bb->index)\n+      if (block_info.reaching_out.valid_or_dirty_p ())\n+\t{\n+\t  if (block_info.local_dem.compatible_p (block_info.reaching_out))\n+\t    {\n+\t      /* Case 1 (Can backward propagate):\n+\t\t ....\n+\t\t bb0:\n+\t\t ...\n+\t\t for (int i = 0; i < n; i++)\n+\t\t   {\n+\t\t     vint16mf4_t v = __riscv_vle16_v_i16mf4 (in + i + 5, 7);\n+\t\t     __riscv_vse16_v_i16mf4 (out + i + 5, v, 7);\n+\t\t   }\n+\t\t The local_dem is compatible with reaching_out. Such case is\n+\t\t worthwhile backward propagation.  */\n+\t      return true;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Case 2 (Don't backward propagate):\n+\t\t    ....\n+\t\t    bb0:\n+\t\t    ...\n+\t\t    for (int i = 0; i < n; i++)\n+\t\t      {\n+\t\t\tvint16mf4_t v = __riscv_vle16_v_i16mf4 (in + i + 5, 7);\n+\t\t\t__riscv_vse16_v_i16mf4 (out + i + 5, v, 7);\n+\t\t\tvint16mf2_t v2 = __riscv_vle16_v_i16mf2 (in + i + 6, 8);\n+\t\t\t__riscv_vse16_v_i16mf2 (out + i + 6, v, 8);\n+\t\t      }\n+\t\t The local_dem is incompatible with reaching_out.\n+\t\t It makes no sense to backward propagate the local_dem since we\n+\t\t can't avoid VSETVL inside the loop.  */\n+\t      return false;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  gcc_assert (block_info.reaching_out.unknown_p ());\n+\t  /* Case 3 (Don't backward propagate):\n+\t\t....\n+\t\tbb0:\n+\t\t...\n+\t\tfor (int i = 0; i < n; i++)\n+\t\t  {\n+\t\t    vint16mf4_t v = __riscv_vle16_v_i16mf4 (in + i + 5, 7);\n+\t\t    __riscv_vse16_v_i16mf4 (out + i + 5, v, 7);\n+\t\t    fn3 ();\n+\t\t  }\n+\t    The local_dem is VALID, but the reaching_out is UNKNOWN.\n+\t    It makes no sense to backward propagate the local_dem since we\n+\t    can't avoid VSETVL inside the loop.  */\n \t  return false;\n+\t}\n     }\n \n   return true;"}]}