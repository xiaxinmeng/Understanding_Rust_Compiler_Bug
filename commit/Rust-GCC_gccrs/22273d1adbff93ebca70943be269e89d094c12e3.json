{"sha": "22273d1adbff93ebca70943be269e89d094c12e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyNzNkMWFkYmZmOTNlYmNhNzA5NDNiZTI2OWU4OWQwOTRjMTJlMw==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2014-11-27T07:34:26Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-11-27T07:34:26Z"}, "message": "revert: aarch64.c (aarch64_code_to_ccmode, [...]): New functions.\n\n\tRevert:\n\t2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\t* config/aarch64/aarch64.c (aarch64_code_to_ccmode,\n\taarch64_convert_mode, aarch64_gen_ccmp_first,\n\taarch64_gen_ccmp_next): New functions.\n\t(TARGET_GEN_CCMP_FIRST, TARGET_GEN_CCMP_NEXT): Define.\n\nFrom-SVN: r218111", "tree": {"sha": "f534d913ef35090684643a058d082f2a729a7914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f534d913ef35090684643a058d082f2a729a7914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22273d1adbff93ebca70943be269e89d094c12e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22273d1adbff93ebca70943be269e89d094c12e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22273d1adbff93ebca70943be269e89d094c12e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22273d1adbff93ebca70943be269e89d094c12e3/comments", "author": null, "committer": null, "parents": [{"sha": "a86461849d65b0e3a4e4384f5fae2538bacee0d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86461849d65b0e3a4e4384f5fae2538bacee0d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86461849d65b0e3a4e4384f5fae2538bacee0d2"}], "stats": {"total": 147, "additions": 9, "deletions": 138}, "files": [{"sha": "515128f07ecf6f381f3b9c6838831067e6bef45e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273d1adbff93ebca70943be269e89d094c12e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273d1adbff93ebca70943be269e89d094c12e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22273d1adbff93ebca70943be269e89d094c12e3", "patch": "@@ -1,3 +1,12 @@\n+2014-11-27  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\tRevert:\n+\t2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\t* config/aarch64/aarch64.c (aarch64_code_to_ccmode,\n+\taarch64_convert_mode, aarch64_gen_ccmp_first,\n+\taarch64_gen_ccmp_next): New functions.\n+\t(TARGET_GEN_CCMP_FIRST, TARGET_GEN_CCMP_NEXT): Define.\n+\n 2014-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c (SANITIZER_SPEC): Don't error on -fsanitize=thread"}, {"sha": "9f7cccc22316a5ad6f320a35dd15baf6845c70b4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22273d1adbff93ebca70943be269e89d094c12e3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22273d1adbff93ebca70943be269e89d094c12e3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=22273d1adbff93ebca70943be269e89d094c12e3", "patch": "@@ -10244,144 +10244,6 @@ aarch64_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n   return default_use_by_pieces_infrastructure_p (size, align, op, speed_p);\n }\n \n-static enum machine_mode\n-aarch64_code_to_ccmode (enum rtx_code code)\n-{\n-  switch (code)\n-    {\n-    case NE:\n-      return CC_DNEmode;\n-\n-    case EQ:\n-      return CC_DEQmode;\n-\n-    case LE:\n-      return CC_DLEmode;\n-\n-    case LT:\n-      return CC_DLTmode;\n-\n-    case GE:\n-      return CC_DGEmode;\n-\n-    case GT:\n-      return CC_DGTmode;\n-\n-    case LEU:\n-      return CC_DLEUmode;\n-\n-    case LTU:\n-      return CC_DLTUmode;\n-\n-    case GEU:\n-      return CC_DGEUmode;\n-\n-    case GTU:\n-      return CC_DGTUmode;\n-\n-    default:\n-      return CCmode;\n-    }\n-}\n-\n-static bool\n-aarch64_convert_mode (rtx* op0, rtx* op1, int unsignedp)\n-{\n-  enum machine_mode mode;\n-\n-  mode = GET_MODE (*op0);\n-  if (mode == VOIDmode)\n-    mode = GET_MODE (*op1);\n-\n-  if (mode == QImode || mode == HImode)\n-    {\n-      *op0 = convert_modes (SImode, mode, *op0, unsignedp);\n-      *op1 = convert_modes (SImode, mode, *op1, unsignedp);\n-    }\n-  else if (mode != SImode && mode != DImode)\n-    return false;\n-\n-  return true;\n-}\n-\n-static rtx\n-aarch64_gen_ccmp_first (int code, rtx op0, rtx op1)\n-{\n-  enum machine_mode mode;\n-  rtx cmp, target;\n-  int unsignedp = code == LTU || code == LEU || code == GTU || code == GEU;\n-\n-  mode = GET_MODE (op0);\n-  if (mode == VOIDmode)\n-    mode = GET_MODE (op1);\n-\n-  if (mode == VOIDmode)\n-    return NULL_RTX;\n-\n-  if (!register_operand (op0, GET_MODE (op0)))\n-    op0 = force_reg (mode, op0);\n-  if (!aarch64_plus_operand (op1, GET_MODE (op1)))\n-    op1 = force_reg (mode, op1);\n-\n-  if (!aarch64_convert_mode (&op0, &op1, unsignedp))\n-    return NULL_RTX;\n-\n-  mode = aarch64_code_to_ccmode ((enum rtx_code) code);\n-  if (mode == CCmode)\n-    return NULL_RTX;\n-\n-  cmp = gen_rtx_fmt_ee (COMPARE, CCmode, op0, op1);\n-  target = gen_rtx_REG (mode, CC_REGNUM);\n-  emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM), cmp));\n-  return target;\n-}\n-\n-static rtx\n-aarch64_gen_ccmp_next (rtx prev, int cmp_code, rtx op0, rtx op1, int bit_code)\n-{\n-  rtx cmp0, cmp1, target, bit_op;\n-  enum machine_mode mode;\n-  int unsignedp = cmp_code == LTU || cmp_code == LEU\n-\t\t  || cmp_code == GTU || cmp_code == GEU;\n-\n-  mode = GET_MODE (op0);\n-  if (mode == VOIDmode)\n-    mode = GET_MODE (op1);\n-  if (mode == VOIDmode)\n-    return NULL_RTX;\n-\n-  /* Give up if the operand is illegal since force_reg will introduce\n-     additional overhead.  */\n-  if (!register_operand (op0, GET_MODE (op0))\n-      || !aarch64_ccmp_operand (op1, GET_MODE (op1)))\n-    return NULL_RTX;\n-\n-  if (!aarch64_convert_mode (&op0, &op1, unsignedp))\n-    return NULL_RTX;\n-\n-  mode = aarch64_code_to_ccmode ((enum rtx_code) cmp_code);\n-  if (mode == CCmode)\n-    return NULL_RTX;\n-\n-  cmp1 = gen_rtx_fmt_ee ((enum rtx_code) cmp_code, SImode, op0, op1);\n-  cmp0 = gen_rtx_fmt_ee (NE, SImode, prev, const0_rtx);\n-\n-  bit_op = gen_rtx_fmt_ee ((enum rtx_code) bit_code, SImode, cmp0, cmp1);\n-\n-  /* Generate insn to match ccmp_and/ccmp_ior.  */\n-  target = gen_rtx_REG (mode, CC_REGNUM);\n-  emit_insn (gen_rtx_SET (VOIDmode, target,\n-                          gen_rtx_fmt_ee (COMPARE, mode,\n-                                          bit_op, const0_rtx)));\n-  return target;\n-}\n-\n-#undef TARGET_GEN_CCMP_FIRST\n-#define TARGET_GEN_CCMP_FIRST aarch64_gen_ccmp_first\n-\n-#undef TARGET_GEN_CCMP_NEXT\n-#define TARGET_GEN_CCMP_NEXT aarch64_gen_ccmp_next\n-\n /* Implement TARGET_SCHED_MACRO_FUSION_P.  Return true if target supports\n    instruction fusion of some sort.  */\n "}]}