{"sha": "d8e535fa827f53241eb8dae67b4165d56a7efced", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlNTM1ZmE4MjdmNTMyNDFlYjhkYWU2N2I0MTY1ZDU2YTdlZmNlZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-04-07T12:48:16Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-07T12:48:16Z"}, "message": "expr.c (do_store_flag): Remove last argument.\n\n2009-04-07  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expr.c (do_store_flag): Remove last argument.  Simplify code\n\tto avoid duplication of tests already done by can_compare_p.\n\t(expand_expr_real_1): Adjust caller.\n\nFrom-SVN: r145668", "tree": {"sha": "002279d773fe7a3367ecd03c61b639cd6dc69d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/002279d773fe7a3367ecd03c61b639cd6dc69d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e535fa827f53241eb8dae67b4165d56a7efced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e535fa827f53241eb8dae67b4165d56a7efced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e535fa827f53241eb8dae67b4165d56a7efced", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e535fa827f53241eb8dae67b4165d56a7efced/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3c64f5002375ee8e8c6264b633abdfbb866184f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c64f5002375ee8e8c6264b633abdfbb866184f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c64f5002375ee8e8c6264b633abdfbb866184f"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "c01b7d96f07ce9ab4fb8350cbbe651b9e4957568", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e535fa827f53241eb8dae67b4165d56a7efced/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e535fa827f53241eb8dae67b4165d56a7efced/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8e535fa827f53241eb8dae67b4165d56a7efced", "patch": "@@ -1,3 +1,9 @@\n+2009-04-07  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expr.c (do_store_flag): Remove last argument.  Simplify code\n+\tto avoid duplication of tests already done by can_compare_p.\n+\t(expand_expr_real_1): Adjust caller.\n+\n 2009-04-07  Paolo Bonzini  <bonzini@gnu.org>\n \n         * optabs.c (can_compare_p): Test the predicate of a"}, {"sha": "5836e58c58f3346d0a2e586d2f242b1628ca783f", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e535fa827f53241eb8dae67b4165d56a7efced/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e535fa827f53241eb8dae67b4165d56a7efced/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d8e535fa827f53241eb8dae67b4165d56a7efced", "patch": "@@ -151,7 +151,7 @@ static int is_aligning_offset (const_tree, const_tree);\n static void expand_operands (tree, tree, rtx, rtx*, rtx*,\n \t\t\t     enum expand_modifier);\n static rtx reduce_to_bit_field_precision (rtx, rtx, tree);\n-static rtx do_store_flag (tree, rtx, enum machine_mode, int);\n+static rtx do_store_flag (tree, rtx, enum machine_mode);\n #ifdef PUSH_ROUNDING\n static void emit_single_push_insn (enum machine_mode, rtx, tree);\n #endif\n@@ -9024,7 +9024,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case LTGT_EXPR:\n       temp = do_store_flag (exp,\n \t\t\t    modifier != EXPAND_STACK_PARM ? target : NULL_RTX,\n-\t\t\t    tmode != VOIDmode ? tmode : mode, 0);\n+\t\t\t    tmode != VOIDmode ? tmode : mode);\n       if (temp != 0)\n \treturn temp;\n \n@@ -9679,9 +9679,6 @@ string_constant (tree arg, tree *ptr_offset)\n \n    If TARGET is nonzero, store the result there if convenient.\n \n-   If ONLY_CHEAP is nonzero, only do this if it is likely to be very\n-   cheap.\n-\n    Return zero if there is no suitable set-flag instruction\n    available on this machine.\n \n@@ -9694,7 +9691,7 @@ string_constant (tree arg, tree *ptr_offset)\n    set/jump/set sequence.  */\n \n static rtx\n-do_store_flag (tree exp, rtx target, enum machine_mode mode, int only_cheap)\n+do_store_flag (tree exp, rtx target, enum machine_mode mode)\n {\n   enum rtx_code code;\n   tree arg0, arg1, type;\n@@ -9703,7 +9700,6 @@ do_store_flag (tree exp, rtx target, enum machine_mode mode, int only_cheap)\n   int invert = 0;\n   int unsignedp;\n   rtx op0, op1;\n-  enum insn_code icode;\n   rtx subtarget = target;\n   rtx result, label;\n \n@@ -9847,37 +9843,6 @@ do_store_flag (tree exp, rtx target, enum machine_mode mode, int only_cheap)\n   if (! can_compare_p (code, operand_mode, ccp_store_flag))\n     return 0;\n \n-  icode = setcc_gen_code[(int) code];\n-\n-  if (icode == CODE_FOR_nothing)\n-    {\n-      enum machine_mode wmode;\n-\n-      for (wmode = operand_mode;\n-\t   icode == CODE_FOR_nothing && wmode != VOIDmode;\n-\t   wmode = GET_MODE_WIDER_MODE (wmode))\n-\ticode = optab_handler (cstore_optab, wmode)->insn_code;\n-    }\n-\n-  if (icode == CODE_FOR_nothing\n-      || (only_cheap && insn_data[(int) icode].operand[0].mode != mode))\n-    {\n-      /* We can only do this if it is one of the special cases that\n-\t can be handled without an scc insn.  */\n-      if ((code == LT && integer_zerop (arg1))\n-\t  || (! only_cheap && code == GE && integer_zerop (arg1)))\n-\t;\n-      else if (! only_cheap && (code == NE || code == EQ)\n-\t       && TREE_CODE (type) != REAL_TYPE\n-\t       && ((optab_handler (abs_optab, operand_mode)->insn_code\n-\t\t    != CODE_FOR_nothing)\n-\t\t   || (optab_handler (ffs_optab, operand_mode)->insn_code\n-\t\t       != CODE_FOR_nothing)))\n-\t;\n-      else\n-\treturn 0;\n-    }\n-\n   if (! get_subtarget (target)\n       || GET_MODE (subtarget) != operand_mode)\n     subtarget = 0;"}]}