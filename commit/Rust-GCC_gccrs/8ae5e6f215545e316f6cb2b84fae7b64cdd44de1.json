{"sha": "8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFlNWU2ZjIxNTU0NWUzMTZmNmNiMmI4NGZhZTdiNjRjZGQ0NGRlMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2006-01-06T15:00:50Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-01-06T15:00:50Z"}, "message": "re PR tree-optimization/25528 (missed LIM on the tree level (complex types))\n\n2006-01-06  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/25528\n        * tree-ssa-alias.c (find_used_portions): Handle REALPART_EXPR\n        and IMAGPART_EXPR.\n        * tree-flow-inline.h (var_can_have_subvars): Handle complex types\n        on non gimple variables.  Also add checks at the top for decls and\n        mtags.\n        * tree-ssa-structalias.c (push_fields_onto_fieldstack): Handle\n        complex types.\n        * tree-ssa-operands.c (parse_ssa_operands): Handle REALPART_EXPR\n        and IMAGPART_EXPR for creating MUST_DEFs.\n        (get_expr_operands): Handle SSA_NAME, STRUCT_FIELD_TAG, TYPE_MEMORY_TAG,\n        and NAME_MEMORY_TAG separately from the DECLs.\n\nFrom-SVN: r109419", "tree": {"sha": "a2eb7c5a1ac7d7676af864386f00a8b4e000cc8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2eb7c5a1ac7d7676af864386f00a8b4e000cc8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/comments", "author": null, "committer": null, "parents": [{"sha": "cc4bb878f1aeec920683a8d6ec3774e161f386b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4bb878f1aeec920683a8d6ec3774e161f386b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4bb878f1aeec920683a8d6ec3774e161f386b7"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "65aba5c8428704d4f87396fa79fb1595d07a7c26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "patch": "@@ -1,3 +1,18 @@\n+2006-01-06  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/25528\n+\t* tree-ssa-alias.c (find_used_portions): Handle REALPART_EXPR\n+\tand IMAGPART_EXPR.\n+\t* tree-flow-inline.h (var_can_have_subvars): Handle complex types\n+\ton non gimple variables.  Also add checks at the top for decls and\n+\tmtags.\n+\t* tree-ssa-structalias.c (push_fields_onto_fieldstack): Handle\n+\tcomplex types.\n+\t* tree-ssa-operands.c (parse_ssa_operands): Handle REALPART_EXPR\n+\tand IMAGPART_EXPR for creating MUST_DEFs.\n+\t(get_expr_operands): Handle SSA_NAME, STRUCT_FIELD_TAG, TYPE_MEMORY_TAG,\n+\tand NAME_MEMORY_TAG separately from the DECLs.\n+\n 2006-01-06  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-dfa.c (mark_new_vars_to_rename): Create stmt"}, {"sha": "3f8e89d136199b9139b23aeb08c06025b9ffb195", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "patch": "@@ -1490,13 +1490,28 @@ get_subvar_at (tree var, unsigned HOST_WIDE_INT offset)\n \n /* Return true if V is a tree that we can have subvars for.\n    Normally, this is any aggregate type, however, due to implementation\n-   limitations ATM, we exclude array types as well.  */\n+   limitations ATM, we exclude array types as well.  Also complex\n+   types which are not gimple registers can have subvars.  */\n \n static inline bool\n var_can_have_subvars (tree v)\n {\n-  return (AGGREGATE_TYPE_P (TREE_TYPE (v)) &&\n-\t  TREE_CODE (TREE_TYPE (v)) != ARRAY_TYPE);\n+  /* Non decls or memory tags can never have subvars.  */\n+  if (!DECL_P (v) || MTAG_P (v))\n+    return false;\n+\n+  /* Aggregates besides arrays can have subvars.  */\n+  if (AGGREGATE_TYPE_P (TREE_TYPE (v))\n+      && TREE_CODE (TREE_TYPE (v)) != ARRAY_TYPE)\n+    return true;\n+\n+  /* Complex types variables which are not also a gimple register can\n+    have subvars. */\n+  if (TREE_CODE (TREE_TYPE (v)) == COMPLEX_TYPE\n+      && !DECL_COMPLEX_GIMPLE_REG_P (v))\n+    return true;\n+\n+  return false;\n }\n \n   "}, {"sha": "cb5deade167a70d393d775152997209f99f905bd", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "patch": "@@ -2694,6 +2694,8 @@ find_used_portions (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n   switch (TREE_CODE (*tp))\n     {\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n     case COMPONENT_REF:\n       {\n \tHOST_WIDE_INT bitsize;"}, {"sha": "60973ced8940cde2bd8e170ef1f1b8fc96d5750c", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "patch": "@@ -734,9 +734,7 @@ parse_ssa_operands (tree stmt)\n \n \tif (TREE_CODE (lhs) != ARRAY_REF\n \t    && TREE_CODE (lhs) != ARRAY_RANGE_REF\n-\t    && TREE_CODE (lhs) != BIT_FIELD_REF\n-\t    && TREE_CODE (lhs) != REALPART_EXPR\n-\t    && TREE_CODE (lhs) != IMAGPART_EXPR)\n+\t    && TREE_CODE (lhs) != BIT_FIELD_REF)\n \t  lhs_flags |= opf_kill_def;\n \n         get_expr_operands (stmt, &TREE_OPERAND (stmt, 0), lhs_flags);\n@@ -1065,6 +1063,10 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n     case STRUCT_FIELD_TAG:\n     case TYPE_MEMORY_TAG:\n     case NAME_MEMORY_TAG:\n+\n+     add_stmt_operand (expr_p, s_ann, flags);\n+     return;\n+\n     case VAR_DECL:\n     case PARM_DECL:\n     case RESULT_DECL:"}, {"sha": "0e2032c481a53dc519b618f50b6b72169235b22d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "patch": "@@ -3568,6 +3568,24 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n {\n   tree field;\n   int count = 0;\n+  \n+  if (TREE_CODE (type) == COMPLEX_TYPE)\n+    {\n+      fieldoff_s *real_part, *img_part;\n+      real_part = VEC_safe_push (fieldoff_s, heap, *fieldstack, NULL);\n+      real_part->type = TREE_TYPE (type);\n+      real_part->size = TYPE_SIZE (TREE_TYPE (type));\n+      real_part->offset = offset;\n+      real_part->decl = NULL_TREE;\n+      \n+      img_part = VEC_safe_push (fieldoff_s, heap, *fieldstack, NULL);\n+      img_part->type = TREE_TYPE (type);\n+      img_part->size = TYPE_SIZE (TREE_TYPE (type));\n+      img_part->offset = offset + TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (type)));\n+      img_part->decl = NULL_TREE;\n+      \n+      return 2;\n+    }\n \n   for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n     if (TREE_CODE (field) == FIELD_DECL)"}]}