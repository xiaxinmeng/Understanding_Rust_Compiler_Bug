{"sha": "81b29ad80a7fb41b5534c1ae45565e1c353dbf0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiMjlhZDgwYTdmYjQxYjU1MzRjMWFlNDU1NjVlMWMzNTNkYmYwZQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-09-19T13:32:54Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-09-19T13:32:54Z"}, "message": "fold-vec-ld-misc.c: New.\n\n\n[gcc/testsuite]\n\n2017-09-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n        * gcc.target/powerpc/fold-vec-ld-misc.c: New.\n\nFrom-SVN: r252974", "tree": {"sha": "6a34bc33e4531cc72e21ecf4e02dfb7ec8cf4ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a34bc33e4531cc72e21ecf4e02dfb7ec8cf4ffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "109bb9107bc49ad4d396c387dd29fa9f6eeb9c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109bb9107bc49ad4d396c387dd29fa9f6eeb9c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109bb9107bc49ad4d396c387dd29fa9f6eeb9c39"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "a69bce3177f00208d52087631323410cb22d0634", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81b29ad80a7fb41b5534c1ae45565e1c353dbf0e", "patch": "@@ -1,3 +1,7 @@\n+2017-09-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-ld-misc.c: New.\n+\n 2017-09-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82244"}, {"sha": "4b86a81337c5b3bd0b9905f6c0fcca2c81ef9382", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-ld-misc.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-misc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b29ad80a7fb41b5534c1ae45565e1c353dbf0e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-misc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-misc.c?ref=81b29ad80a7fb41b5534c1ae45565e1c353dbf0e", "patch": "@@ -0,0 +1,54 @@\n+/* Verify that overloaded built-ins for vec_ld with\n+   structure pointer / double inputs produce the right code.  */\n+\n+/* This test is to ensure that when a cast is associated with arg1 on a\n+   call to vec_ld (arg0, arg1), that the arg1 type is properly handled\n+   through the gimple folding code.\n+   We want something like this:\n+\tD.2736 = MEM[(voidD.44 *)D.2739];\n+   We specifically do not want 'struct S' showing up:\n+\tD.3212 = MEM[(struct S *)D.3215];\n+*/\n+\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2 -fdump-tree-gimple\" } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+\n+struct S {\n+  vector int *i1,*i2;\n+  vector long long *ll1;\n+  vector double *vd1;\n+  vector double *vd2;\n+  vector double *vd3;\n+  vector double *vd4;\n+};\n+\n+vector double\n+testld_struct1 (long long ll1, struct S *p)\n+{\n+  return __builtin_altivec_lvx_v2df (ll1, (double *)p);\n+}\n+\n+vector double\n+testld_struct1b (long long ll1, struct S *p)\n+{\n+  return vec_ld (ll1, (vector double *)p);\n+}\n+\n+vector double\n+testld_struct2 (struct S *p)\n+{\n+  return vec_ld (16, (vector double *)p);\n+}\n+\n+vector double\n+testld_struct3 (struct S *p)\n+{\n+  return vec_ld (16, (vector double *)p->vd2);\n+}\n+\n+// We do not want the \"struct S\" reference to show up.\n+/* { dg-final { scan-tree-dump-times \"MEM\\[\\(struct S *\\)D.\\[0-9\\]+\\]\" 0 \"gimple\" } } */"}]}