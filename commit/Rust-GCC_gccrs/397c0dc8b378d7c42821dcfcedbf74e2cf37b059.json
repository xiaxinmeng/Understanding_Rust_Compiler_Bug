{"sha": "397c0dc8b378d7c42821dcfcedbf74e2cf37b059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk3YzBkYzhiMzc4ZDdjNDI4MjFkY2ZjZWRiZjc0ZTJjZjM3YjA1OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-07T15:44:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-07T15:44:52Z"}, "message": "i386.c (ix86_print_operand_punct_valid_p): Add '^'.\n\n\t* config/i386/i386.c (ix86_print_operand_punct_valid_p): Add '^'.\n\t(ix86_print_operand): Handle '^'.\n\t* config/i386/i386.md (*strmovdi_rex_1): Macroize memory operands\n\tusing P mode iterator.  Add %^ to asm template to conditionally emit\n\taddr32 prefix.\n\t(*rep_movdi_rex64): Ditto.\n\t(*strsetdi_rex_1): Ditto.\n\t(*rep_stosdi_rex64): Ditto.\n\t(*strmov{si,hi,qi}_1): Add %^ to asm template to\n\tconditionally emit addr32 prefix.\n\t(*rep_mov{si,qi}): Ditto.\n\t(*strset{si,hi,qi}): Ditto.\n\t(*rep_stos{si,qi}): Ditto.\n\t(*cmpstrnqi_nz_1): Ditto.\n\t(*cmpstrnqi_1): Ditto.\n\t(*strlenqi_1): Ditto.\n\nFrom-SVN: r185058", "tree": {"sha": "f9af90b71ca0df0dcfb2b618645a3965ac5bd490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9af90b71ca0df0dcfb2b618645a3965ac5bd490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/397c0dc8b378d7c42821dcfcedbf74e2cf37b059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397c0dc8b378d7c42821dcfcedbf74e2cf37b059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397c0dc8b378d7c42821dcfcedbf74e2cf37b059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397c0dc8b378d7c42821dcfcedbf74e2cf37b059/comments", "author": null, "committer": null, "parents": [{"sha": "cccff71a90a9d9492bd85dd86042662bb23c2967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cccff71a90a9d9492bd85dd86042662bb23c2967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cccff71a90a9d9492bd85dd86042662bb23c2967"}], "stats": {"total": 133, "additions": 78, "deletions": 55}, "files": [{"sha": "2c270fb2aa4db5bc8932ce47a782e595288a7531", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397c0dc8b378d7c42821dcfcedbf74e2cf37b059/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397c0dc8b378d7c42821dcfcedbf74e2cf37b059/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=397c0dc8b378d7c42821dcfcedbf74e2cf37b059", "patch": "@@ -1,3 +1,22 @@\n+2012-03-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_print_operand_punct_valid_p): Add '^'.\n+\t(ix86_print_operand): Handle '^'.\n+\t* config/i386/i386.md (*strmovdi_rex_1): Macroize memory operands\n+\tusing P mode iterator.  Add %^ to asm template to conditionally emit\n+\taddr32 prefix.\n+\t(*rep_movdi_rex64): Ditto.\n+\t(*strsetdi_rex_1): Ditto.\n+\t(*rep_stosdi_rex64): Ditto.\n+\t(*strmov{si,hi,qi}_1): Add %^ to asm template to\n+\tconditionally emit addr32 prefix.\n+\t(*rep_mov{si,qi}): Ditto.\n+\t(*strset{si,hi,qi}): Ditto.\n+\t(*rep_stos{si,qi}): Ditto.\n+\t(*cmpstrnqi_nz_1): Ditto.\n+\t(*cmpstrnqi_1): Ditto.\n+\t(*strlenqi_1): Ditto.\n+\n 2012-03-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (function_value_64): Return pointers in\n@@ -10,8 +29,7 @@\n \t(get_gcov_unsigned_t): Likewise.\n \t* expr.c (store_constructor): Use type_for_mode.\n \t(try_casesi): Likewise.\n-\t* tree-ssa-loop-ivopts.c (add_standard_iv_candidates_for_size):\n-\tRemove.\n+\t* tree-ssa-loop-ivopts.c (add_standard_iv_candidates_for_size): Remove.\n \t(add_standard_iv_candidates): Use standard type trees.\n \t* dojump.c (do_jump): Remove dead code.\n \n@@ -48,13 +66,13 @@\n \tall callers to pass NULL except ...\n \t(reset_sched_cycles_in_current_ebb): ... here, save the value\n \tin new variable 'empty'.  Increase issue_rate only for\n-\tnon-empty insns. \n+\tnon-empty insns.\n \n 2012-03-07  Ralf Cors\u00e9pius  <ralf.corsepius@rtems.org>\n \n \tPR target/51417\n-\t* Makefile.in: Let install-gcc-ar depend on installdirs, gcc-ar$(exeext),\n-\tgcc-nm$(exeext), gcc-ranlib$(exeext).\n+\t* Makefile.in: Let install-gcc-ar depend on installdirs,\n+\tgcc-ar$(exeext), gcc-nm$(exeext), gcc-ranlib$(exeext).\n \tDon't double canonicalize if cross-compiling.\n \n 2012-03-07  Georg-Johann Lay  <avr@gjlay.de>\n@@ -129,8 +147,7 @@\n \t(vector_ltgt<mode>): Likewise.\n \t(vector_ordered<mode>): Likewise.\n \t(vector_unordered<mode>): Likewise.\n-\t* config/rs6000/rs6000.c (rs6000_emit_vector_compare_inner):\n-\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_emit_vector_compare_inner): Likewise.\n \n 2012-03-06  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -151,8 +168,7 @@\n \n 2012-03-06  Tristan Gingold  <gingold@adacore.com>\n \n-\t* config/vms/vms-c.c (vms_pragma_nomember_alignment): Handle\n-\toctaword.\n+\t* config/vms/vms-c.c (vms_pragma_nomember_alignment): Handle octaword.\n \t(external_model_kind): Improve documentation.\n \t(vms_pragma_extern_model): Handle relaxed_redef.\n \t(vms_c_register_pragma): Allow expansion for nomember_alignment.\n@@ -288,8 +304,7 @@\n \t* genautomata.c (parse_automata_opt): New static function.\n \t(initiate_automaton_gen): Remove all option handling code.  Remove\n \targc argument.  All callers changed.\n-\t(main): Call init_rtx_reader_args_cb with the new function as\n-\targument.\n+\t(main): Call init_rtx_reader_args_cb with the new function as argument.\n \n 2012-03-05  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "7361df894a421c05d63babc60d34d8023390e90a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397c0dc8b378d7c42821dcfcedbf74e2cf37b059/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397c0dc8b378d7c42821dcfcedbf74e2cf37b059/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=397c0dc8b378d7c42821dcfcedbf74e2cf37b059", "patch": "@@ -13743,6 +13743,7 @@ get_some_local_dynamic_name (void)\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n    ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n    @ -- print a segment register of thread base pointer load\n+   ^ -- print addr32 prefix if TARGET_64BIT and Pmode != word_mode\n  */\n \n void\n@@ -14248,6 +14249,11 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  putc (TARGET_AVX2 ? 'i' : 'f', file);\n \t  return;\n \n+\tcase '^':\n+\t  if (TARGET_64BIT && Pmode != word_mode)\n+\t    fputs (\"addr32 \", file);\n+\t  return;\n+\n \tdefault:\n \t    output_operand_lossage (\"invalid operand code '%c'\", code);\n \t}\n@@ -14387,8 +14393,8 @@ ix86_print_operand (FILE *file, rtx x, int code)\n static bool\n ix86_print_operand_punct_valid_p (unsigned char code)\n {\n-  return (code == '@' || code == '*' || code == '+'\n-\t  || code == '&' || code == ';' || code == '~');\n+  return (code == '@' || code == '*' || code == '+' || code == '&'\n+\t  || code == ';' || code == '~' || code == '^');\n }\n \f\n /* Print a memory operand whose address is ADDR.  */"}, {"sha": "f000cc6a271b2969c599fcb5d1ec8d575d604a60", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397c0dc8b378d7c42821dcfcedbf74e2cf37b059/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397c0dc8b378d7c42821dcfcedbf74e2cf37b059/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=397c0dc8b378d7c42821dcfcedbf74e2cf37b059", "patch": "@@ -60,7 +60,9 @@\n ;; Y -- print condition for XOP pcom* instruction.\n ;; + -- print a branch hint as 'cs' or 'ds' prefix\n ;; ; -- print a semicolon (after prefixes due to bug in older gas).\n+;; ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n ;; @ -- print a segment register of thread base pointer load\n+;; ^ -- print addr32 prefix if TARGET_64BIT and Pmode != word_mode\n \n (define_c_enum \"unspec\" [\n   ;; Relocation specifiers\n@@ -15678,17 +15680,17 @@\n   \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strmovdi_rex_1\"\n-  [(set (mem:DI (match_operand:DI 2 \"register_operand\" \"0\"))\n-\t(mem:DI (match_operand:DI 3 \"register_operand\" \"1\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 2)\n-\t\t (const_int 8)))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n-\t(plus:DI (match_dup 3)\n-\t\t (const_int 8)))]\n+  [(set (mem:DI (match_operand:P 2 \"register_operand\" \"0\"))\n+\t(mem:DI (match_operand:P 3 \"register_operand\" \"1\")))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 2)\n+\t\t(const_int 8)))\n+   (set (match_operand:P 1 \"register_operand\" \"=S\")\n+\t(plus:P (match_dup 3)\n+\t\t(const_int 8)))]\n   \"TARGET_64BIT\n    && !(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"movsq\"\n+  \"%^movsq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"DI\")])\n@@ -15703,7 +15705,7 @@\n \t(plus:P (match_dup 3)\n \t\t(const_int 4)))]\n   \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"movs{l|d}\"\n+  \"%^movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"SI\")])\n@@ -15718,7 +15720,7 @@\n \t(plus:P (match_dup 3)\n \t\t(const_int 2)))]\n   \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"movsw\"\n+  \"%^movsw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"HI\")])\n@@ -15733,7 +15735,7 @@\n \t(plus:P (match_dup 3)\n \t\t(const_int 1)))]\n   \"!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"movsb\"\n+  \"%^movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n    (set (attr \"prefix_rex\")\n@@ -15756,20 +15758,20 @@\n   \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*rep_movdi_rex64\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-        (plus:DI (ashift:DI (match_operand:DI 5 \"register_operand\" \"2\")\n-\t\t\t    (const_int 3))\n-\t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n-        (plus:DI (ashift:DI (match_dup 5) (const_int 3))\n-\t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n+  [(set (match_operand:P 2 \"register_operand\" \"=c\") (const_int 0))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+        (plus:P (ashift:P (match_operand:P 5 \"register_operand\" \"2\")\n+\t\t\t  (const_int 3))\n+\t\t(match_operand:P 3 \"register_operand\" \"0\")))\n+   (set (match_operand:P 1 \"register_operand\" \"=S\")\n+        (plus:P (ashift:P (match_dup 5) (const_int 3))\n+\t\t(match_operand:P 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"TARGET_64BIT\n    && !(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"rep{%;} movsq\"\n+  \"%^rep{%;} movsq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -15788,7 +15790,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"rep{%;} movs{l|d}\"\n+  \"%^rep{%;} movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -15805,7 +15807,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"rep{%;} movsb\"\n+  \"%^rep{%;} movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -15866,14 +15868,14 @@\n   \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strsetdi_rex_1\"\n-  [(set (mem:DI (match_operand:DI 1 \"register_operand\" \"0\"))\n+  [(set (mem:DI (match_operand:P 1 \"register_operand\" \"0\"))\n \t(match_operand:DI 2 \"register_operand\" \"a\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 1)\n-\t\t (const_int 8)))]\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 1)\n+\t\t(const_int 8)))]\n   \"TARGET_64BIT\n    && !(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n-  \"stosq\"\n+  \"%^stosq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"DI\")])\n@@ -15885,7 +15887,7 @@\n \t(plus:P (match_dup 1)\n \t\t(const_int 4)))]\n   \"!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n-  \"stos{l|d}\"\n+  \"%^stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n@@ -15897,7 +15899,7 @@\n \t(plus:P (match_dup 1)\n \t\t(const_int 2)))]\n   \"!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n-  \"stosw\"\n+  \"%^stosw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"HI\")])\n@@ -15909,7 +15911,7 @@\n \t(plus:P (match_dup 1)\n \t\t(const_int 1)))]\n   \"!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\"\n-  \"stosb\"\n+  \"%^stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n    (set (attr \"prefix_rex\")\n@@ -15930,18 +15932,18 @@\n   \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*rep_stosdi_rex64\"\n-  [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-        (plus:DI (ashift:DI (match_operand:DI 4 \"register_operand\" \"1\")\n-\t\t\t    (const_int 3))\n-\t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n+  [(set (match_operand:P 1 \"register_operand\" \"=c\") (const_int 0))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+        (plus:P (ashift:P (match_operand:P 4 \"register_operand\" \"1\")\n+\t\t\t  (const_int 3))\n+\t\t (match_operand:P 3 \"register_operand\" \"0\")))\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:DI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"TARGET_64BIT\n    && !(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n-  \"rep{%;} stosq\"\n+  \"%^rep{%;} stosq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -15958,7 +15960,7 @@\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n-  \"rep{%;} stos{l|d}\"\n+  \"%^rep{%;} stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -15974,7 +15976,7 @@\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n-  \"rep{%;} stosb\"\n+  \"%^rep{%;} stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -16095,7 +16097,7 @@\n    (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:P 2 \"register_operand\" \"=c\"))]\n   \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"repz{%;} cmpsb\"\n+  \"%^repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set (attr \"prefix_rex\")\n@@ -16135,7 +16137,7 @@\n    (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:P 2 \"register_operand\" \"=c\"))]\n   \"!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\"\n-  \"repz{%;} cmpsb\"\n+  \"%^repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set (attr \"prefix_rex\")\n@@ -16176,7 +16178,7 @@\n    (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\"\n-  \"repnz{%;} scasb\"\n+  \"%^repnz{%;} scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set (attr \"prefix_rex\")"}]}