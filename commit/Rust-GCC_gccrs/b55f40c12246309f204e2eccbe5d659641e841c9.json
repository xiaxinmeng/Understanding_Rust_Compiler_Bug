{"sha": "b55f40c12246309f204e2eccbe5d659641e841c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1ZjQwYzEyMjQ2MzA5ZjIwNGUyZWNjYmU1ZDY1OTY0MWU4NDFjOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-23T08:51:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-23T08:51:10Z"}, "message": "diagnostic-core.h (internal_error_no_backtrace): New prototype.\n\n\t* diagnostic-core.h (internal_error_no_backtrace): New prototype.\n\t* diagnostic.def (DK_ICE_NOBT): New kind.\n\t* diagnostic.c (diagnostic_action_after_output): Handle DK_ICE_NOBT\n\tlike DK_ICE, but never print backtrace.\n\t(diagnostic_report_diagnostic): Handle DK_ICE_NOBT like DK_ICE.\n\t(internal_error_no_backtrace): New function.\n\t* gcc.c (execute): Use internal_error_no_backtrace instead of\n\tinternal_error.\nfortran/\n\t* gfc-diagnostic.def (DK_ICE_NOBT): New kind.\n\nFrom-SVN: r220030", "tree": {"sha": "dddeb957b58b9b0f7e1d3254194afaf71ebeb8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dddeb957b58b9b0f7e1d3254194afaf71ebeb8f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55f40c12246309f204e2eccbe5d659641e841c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55f40c12246309f204e2eccbe5d659641e841c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55f40c12246309f204e2eccbe5d659641e841c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55f40c12246309f204e2eccbe5d659641e841c9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "652960d1809b326ad20adcaac1b5a72796413a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652960d1809b326ad20adcaac1b5a72796413a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652960d1809b326ad20adcaac1b5a72796413a2e"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "4a1cfcfc586cb49d908ce4311e8c61fea199f81f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b55f40c12246309f204e2eccbe5d659641e841c9", "patch": "@@ -1,3 +1,14 @@\n+2015-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* diagnostic-core.h (internal_error_no_backtrace): New prototype.\n+\t* diagnostic.def (DK_ICE_NOBT): New kind.\n+\t* diagnostic.c (diagnostic_action_after_output): Handle DK_ICE_NOBT\n+\tlike DK_ICE, but never print backtrace.\n+\t(diagnostic_report_diagnostic): Handle DK_ICE_NOBT like DK_ICE.\n+\t(internal_error_no_backtrace): New function.\n+\t* gcc.c (execute): Use internal_error_no_backtrace instead of\n+\tinternal_error.\n+\n 2015-01-22  Jeff Law  <law@redhat.com>\n \n \tPR target/52076"}, {"sha": "d97111dccacd5eeb477f9129ab3653c358b0b05d", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=b55f40c12246309f204e2eccbe5d659641e841c9", "patch": "@@ -56,6 +56,8 @@ extern const char *trim_filename (const char *);\n #endif\n extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n+extern void internal_error_no_backtrace (const char *, ...)\n+     ATTRIBUTE_GCC_DIAG(1,2) ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the first parameter.  */\n extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern bool warning_n (location_t, int, int, const char *, const char *, ...)"}, {"sha": "33eed3ec6f5fab3373e48ea067210f57716ed7a3", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=b55f40c12246309f204e2eccbe5d659641e841c9", "patch": "@@ -518,9 +518,11 @@ diagnostic_action_after_output (diagnostic_context *context,\n       break;\n \n     case DK_ICE:\n+    case DK_ICE_NOBT:\n       {\n-\tstruct backtrace_state *state =\n-\t  backtrace_create_state (NULL, 0, bt_err_callback, NULL);\n+\tstruct backtrace_state *state = NULL;\n+\tif (diag_kind == DK_ICE)\n+\t  state = backtrace_create_state (NULL, 0, bt_err_callback, NULL);\n \tint count = 0;\n \tif (state != NULL)\n \t  backtrace_full (state, 2, bt_callback, bt_err_callback,\n@@ -739,7 +741,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       /* If we're reporting an ICE in the middle of some other error,\n \t try to flush out the previous error, then let this one\n \t through.  Don't do this more than once.  */\n-      if (diagnostic->kind == DK_ICE && context->lock == 1)\n+      if ((diagnostic->kind == DK_ICE || diagnostic->kind == DK_ICE_NOBT)\n+\t  && context->lock == 1)\n \tpp_newline_and_flush (context->printer);\n       else\n \terror_recursion (context);\n@@ -812,7 +815,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \n   context->lock++;\n \n-  if (diagnostic->kind == DK_ICE)\n+  if (diagnostic->kind == DK_ICE || diagnostic->kind == DK_ICE_NOBT)\n     {\n #ifndef ENABLE_CHECKING\n       /* When not checking, ICEs are converted to fatal errors when an\n@@ -1239,6 +1242,23 @@ internal_error (const char *gmsgid, ...)\n \n   gcc_unreachable ();\n }\n+\n+/* Like internal_error, but no backtrace will be printed.  Used when\n+   the internal error does not happen at the current location, but happened\n+   somewhere else.  */\n+void\n+internal_error_no_backtrace (const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_ICE_NOBT);\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+\n+  gcc_unreachable ();\n+}\n \f\n /* Special case error functions.  Most are implemented in terms of the\n    above, or should be.  */"}, {"sha": "b90ca6934ee609fb45ec02e013326331e6e2363e", "filename": "gcc/diagnostic.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fdiagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fdiagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.def?ref=b55f40c12246309f204e2eccbe5d659641e841c9", "patch": "@@ -45,3 +45,6 @@ DEFINE_DIAGNOSTIC_KIND (DK_PERMERROR, \"permerror: \", NULL)\n /* This one is just for counting DK_WARNING promoted to DK_ERROR\n    due to -Werror and -Werror=warning.  */\n DEFINE_DIAGNOSTIC_KIND (DK_WERROR, \"error: \", NULL)\n+/* This is like DK_ICE, but backtrace is not printed.  Used in the driver\n+   when reporting fatal signal in the compiler.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_ICE_NOBT, \"internal compiler error: \", \"error\")"}, {"sha": "6b30eb272aeccc7bad6907cee9c7fe8fb8ef9090", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b55f40c12246309f204e2eccbe5d659641e841c9", "patch": "@@ -1,3 +1,7 @@\n+2015-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfc-diagnostic.def (DK_ICE_NOBT): New kind.\n+\n 2015-01-23  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/60922"}, {"sha": "f46d2738ae4d9ff73405ba5146227efd2b299df0", "filename": "gcc/fortran/gfc-diagnostic.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Ffortran%2Fgfc-diagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Ffortran%2Fgfc-diagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-diagnostic.def?ref=b55f40c12246309f204e2eccbe5d659641e841c9", "patch": "@@ -45,3 +45,6 @@ DEFINE_DIAGNOSTIC_KIND (DK_PERMERROR, \"permerror\", NULL)\n /* This one is just for counting DK_WARNING promoted to DK_ERROR\n    due to -Werror and -Werror=warning.  */\n DEFINE_DIAGNOSTIC_KIND (DK_WERROR, \"error\", NULL)\n+/* This is like DK_ICE, but backtrace is not printed.  Used in the driver\n+   when reporting fatal signal in the compiler.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_ICE_NOBT, \"internal compiler error\", \"error\")"}, {"sha": "9f98750aff6068f9db30d67f90cc72330dd1f485", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55f40c12246309f204e2eccbe5d659641e841c9/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b55f40c12246309f204e2eccbe5d659641e841c9", "patch": "@@ -2912,8 +2912,9 @@ execute (void)\n \t      }\n \t    else\n #endif\n-\t      internal_error (\"%s (program %s)\",\n-\t\t\t      strsignal (WTERMSIG (status)), commands[i].prog);\n+\t      internal_error_no_backtrace (\"%s (program %s)\",\n+\t\t\t\t\t   strsignal (WTERMSIG (status)),\n+\t\t\t\t\t   commands[i].prog);\n \t  }\n \telse if (WIFEXITED (status)\n \t\t && WEXITSTATUS (status) >= MIN_FATAL_STATUS)"}]}