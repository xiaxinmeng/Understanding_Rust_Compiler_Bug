{"sha": "fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjZjk2MWM4ZTMxYWFjNTBiN2I1ZjNmMWE5ZWE0Zjc3OTUwYzBkNw==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2007-08-14T08:44:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:44:42Z"}, "message": "adaint.c (__gnat_is_absolute_path): For VxWorks systems we accept dir/file...\n\n2007-08-14  Jose Ruiz  <ruiz@adacore.com>\n\n\t* adaint.c (__gnat_is_absolute_path): For VxWorks systems we accept\n\tdir/file, device:/dir/file, and device:drive_letter:/dir/file as\n\trepresenting absolute path names.\n\t__gnat_set_file_time_name [VMS]: Fix some 64/32 bit issues.\n\n\t* cstreams.c (__gnat_full_name for VxWorks): Use\n\t__gnat_is_absolute_path to detect whether we need to add the current\n\tdirectory to normalize the path.\n\nFrom-SVN: r127437", "tree": {"sha": "58769551a8aaa1a1ef84b4d604d79c600619dd0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58769551a8aaa1a1ef84b4d604d79c600619dd0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50b8a7b807b958ca96a40cd6b892627fda9c34ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b8a7b807b958ca96a40cd6b892627fda9c34ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b8a7b807b958ca96a40cd6b892627fda9c34ef"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "c0fb8d0d28ad5647058a7dad465c6a4927fa53ca", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7", "patch": "@@ -101,6 +101,7 @@\n \n /* Header files and definitions for __gnat_set_file_time_name.  */\n \n+#define __NEW_STARLET 1\n #include <vms/rms.h>\n #include <vms/atrdef.h>\n #include <vms/fibdef.h>\n@@ -119,17 +120,18 @@\n     Y = tmptime * 10000000 + reftime; }\n \n /* descrip.h doesn't have everything ... */\n+typedef struct fibdef* __fibdef_ptr32 __attribute__ (( mode (SI) ));\n struct dsc$descriptor_fib\n {\n-  unsigned long fib$l_len;\n-  struct fibdef *fib$l_addr;\n+  unsigned int fib$l_len;\n+  __fibdef_ptr32 fib$l_addr;\n };\n \n /* I/O Status Block.  */\n struct IOSB\n {\n   unsigned short status, count;\n-  unsigned long devdep;\n+  unsigned int devdep;\n };\n \n static char *tryfile;\n@@ -1261,7 +1263,7 @@ __gnat_set_file_time_name (char *name, time_t time_stamp)\n   struct\n     {\n       unsigned long long backup, create, expire, revise;\n-      unsigned long uic;\n+      unsigned int uic;\n       union\n \t{\n \t  unsigned short value;\n@@ -1552,12 +1554,36 @@ __gnat_file_exists (char *name)\n int\n __gnat_is_absolute_path (char *name, int length)\n {\n+#ifdef __vxworks\n+  /* On VxWorks systems, an absolute path can be represented (depending on\n+     the host platform) as either /dir/file, or device:/dir/file, or\n+     device:drive_letter:/dir/file. */\n+\n+  int index;\n+\n+  if (name[0] == '/')\n+    return 1;\n+\n+  for (index = 0; index < length; index++)\n+    {\n+      if (name[index] == ':' &&\n+          ((name[index + 1] == '/') ||\n+           (isalpha (name[index + 1]) && index + 2 <= length &&\n+            name[index + 2] == '/')))\n+        return 1;\n+\n+      else if (name[index] == '/')\n+        return 0;\n+    }\n+  return 0;\n+#else\n   return (length != 0) &&\n      (*name == '/' || *name == DIR_SEPARATOR\n #if defined (__EMX__) || defined (MSDOS) || defined (WINNT)\n       || (length > 1 && isalpha (name[0]) && name[1] == ':')\n #endif\n \t  );\n+#endif\n }\n \n int"}, {"sha": "fe81bcbe97e75f1e541cfae5ebcff8fe7aaec4fb", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=fdcf961c8e31aac50b7b5f3f1a9ea4f77950c0d7", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *              Auxiliary C functions for Interfaces.C.Streams              *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -200,6 +200,25 @@ __gnat_full_name (char *nam, char *buffer)\n       strncpy (buffer, __gnat_to_host_file_spec (buffer), __gnat_max_path_len);\n     }\n \n+#elif defined (__vxworks)\n+\n+  /* On VxWorks systems, an absolute path can be represented (depending on\n+     the host platform) as either /dir/file, or device:/dir/file, or\n+     device:drive_letter:/dir/file. Use the __gnat_is_absolute_path\n+     to verify it. */\n+\n+  int length;\n+\n+  if (__gnat_is_absolute_path (nam, strlen (nam)))\n+    strcpy (buffer, nam);\n+\n+  else\n+    {\n+      length = __gnat_max_path_len;\n+      __gnat_get_current_dir (buffer, &length);\n+      strncat (buffer, nam, __gnat_max_path_len - length - 1);\n+    }\n+\n #else\n   if (nam[0] != '/')\n     {\n@@ -211,20 +230,11 @@ __gnat_full_name (char *nam, char *buffer)\n \t  return 0;\n \t}\n \n-#ifdef __vxworks\n-      /* On VxWorks, getcwd always returns an absolute path. But this path\n-         can be also a device name like \"serial:\". In this case '/' should not\n-         be appended. As on VxWorks 6.x the returned path can starts with\n-         the device name (ex: machine:/directory), we need to test if the last\n-         character of the path is ':' to know if '/' should be appended. */\n-      if (buffer[strlen (buffer) - 1] != ':')\n-         strcat (buffer, \"/\");\n-#else\n+\n       /* If the name returned is an absolute path, it is safe to append '/'\n \t to the path and concatenate the name of the file. */\n       if (buffer[0] == '/')\n \tstrcat (buffer, \"/\");\n-#endif\n \n       strcat (buffer, nam);\n     }"}]}