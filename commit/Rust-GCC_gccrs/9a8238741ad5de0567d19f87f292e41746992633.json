{"sha": "9a8238741ad5de0567d19f87f292e41746992633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4MjM4NzQxYWQ1ZGUwNTY3ZDE5Zjg3ZjI5MmU0MTc0Njk5MjYzMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-01-29T19:18:06Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-01-29T19:18:06Z"}, "message": "bessel_6.f90: XFAIL on spu-*-*.\n\n\t* gfortran.dg/bessel_6.f90: XFAIL on spu-*-*.\n\t* gfortran.dg/bessel_7.f90: Likewise.\n\t* gfortran.dg/erf_2.F90: Likewise.  Always run with -O0.\n\n\t* gfortran.dg/complex_intrinsics_5.f90: Increase \"epsilon\".\n\t* gfortran.dg/sum_init_expr.f03: Likewise.\n\n\t* gfortran.dg/realloc_on_assign_2.f03: Skip on spu-*-*.\n\n\t* gfortran.dg/lto/20091016-1_0.f90: Replace -shared with\n\t-r -nostdlib.\n\n\t* gfortran.dg/vect/fast-math-vect-8.f90: Check for vectorized\n\tloop only on \"vect_intfloat_cvt\" targets.\n\nFrom-SVN: r169393", "tree": {"sha": "baefc60f959e19be48075cf3ebcb22ea9a3637b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baefc60f959e19be48075cf3ebcb22ea9a3637b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a8238741ad5de0567d19f87f292e41746992633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8238741ad5de0567d19f87f292e41746992633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8238741ad5de0567d19f87f292e41746992633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8238741ad5de0567d19f87f292e41746992633/comments", "author": null, "committer": null, "parents": [{"sha": "7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7320cf0901b5409c45d68b3c10cdd22eaf918fe5"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "ece39bc30e0bb837400599d03b7724809d8d7c25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -1,3 +1,20 @@\n+2011-01-29  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gfortran.dg/bessel_6.f90: XFAIL on spu-*-*.\n+\t* gfortran.dg/bessel_7.f90: Likewise.\n+\t* gfortran.dg/erf_2.F90: Likewise.  Always run with -O0.\n+\n+\t* gfortran.dg/complex_intrinsics_5.f90: Increase \"epsilon\".\n+\t* gfortran.dg/sum_init_expr.f03: Likewise.\n+\n+\t* gfortran.dg/realloc_on_assign_2.f03: Skip on spu-*-*.\n+\n+\t* gfortran.dg/lto/20091016-1_0.f90: Replace -shared with\n+\t-r -nostdlib.\n+\n+\t* gfortran.dg/vect/fast-math-vect-8.f90: Check for vectorized\n+\tloop only on \"vect_intfloat_cvt\" targets.\n+\n 2011-01-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47531"}, {"sha": "e760d4cdb74959531b919ec5c9d8a35f5109bf2b", "filename": "gcc/testsuite/gfortran.dg/bessel_6.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_6.f90?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -1,8 +1,11 @@\n-! { dg-do run }\n+! { dg-do run { xfail spu-*-* } }\n !\n ! PR fortran/36158\n ! PR fortran/33197\n !\n+! XFAILed for SPU targets since we don't have an accurate library\n+! implementation of the single-precision Bessel functions.\n+!\n ! Run-time tests for transformations BESSEL_JN\n !\n implicit none"}, {"sha": "10a6e966dfa0b99ff052fee55250dd59a8ff785d", "filename": "gcc/testsuite/gfortran.dg/bessel_7.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_7.f90?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do run { xfail *-*-mingw* } }\n+! { dg-do run { xfail *-*-mingw* spu-*-* } }\n !\n ! PR fortran/36158\n ! PR fortran/33197\n@@ -7,6 +7,9 @@\n ! of BESSEL_YN(n,x) has different results.  It returns NAN rather than\n ! -INF for \"x=0.0\" and all \"n\".\n !\n+! XFAILed for SPU targets since we don't have an accurate library\n+! implementation of the single-precision Bessel functions.\n+!\n ! Run-time tests for transformations BESSEL_YN\n !\n implicit none"}, {"sha": "49b8eaaa68e835329e292845cd5af3a94472e373", "filename": "gcc/testsuite/gfortran.dg/complex_intrinsic_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_5.f90?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -9,7 +9,7 @@\n !\n module test\n   implicit none\n-  real(4), parameter :: eps4 = epsilon(0.0_4)*2.0_4\n+  real(4), parameter :: eps4 = epsilon(0.0_4)*4.0_4\n   real(8), parameter :: eps8 = epsilon(0.0_8)*2.0_8\n   interface check\n     procedure check4, check8"}, {"sha": "c92f45b047682fdd57b2443ad9bbfc48214d178e", "filename": "gcc/testsuite/gfortran.dg/erf_2.F90", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -1,7 +1,10 @@\n-! { dg-do run }\n-! { dg-options \"-fno-range-check -ffree-line-length-none \" }\n+! { dg-do run { xfail spu-*-* } }\n+! { dg-options \"-fno-range-check -ffree-line-length-none -O0\" }\n ! { dg-add-options ieee }\n !\n+! XFAILed for SPU targets because our library implementation of\n+! the double-precision erf/erfc functions is not accurate enough.\n+!\n ! Check that simplification functions and runtime library agree on ERF,\n ! ERFC and ERFC_SCALED.\n "}, {"sha": "a882da042cd9aed8ab44d0dee9bfa75602b0057c", "filename": "gcc/testsuite/gfortran.dg/lto/20091016-1_0.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091016-1_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091016-1_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091016-1_0.f90?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -1,5 +1,5 @@\n ! { dg-lto-do link }\n-! { dg-lto-options {{-flto -g -fPIC -shared} {-O -flto -g -fPIC -shared}} }\n+! { dg-lto-options {{-flto -g -fPIC -r -nostdlib} {-O -flto -g -fPIC -r -nostdlib}} }\n \n       FUNCTION makenumberstring(x)\n       IMPLICIT NONE"}, {"sha": "0564d0d50647ddc7948be01bed94451dbd66a97b", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_2.f03", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_2.f03?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run }\n+! { dg-skip-if \"Too big for local store\" { spu-*-* } { \"*\" } { \"\" } }\n ! Tests the patch that implements F2003 automatic allocation and\n ! reallocation of allocatable arrays on assignment.  The tests\n ! below were generated in the final stages of the development of"}, {"sha": "9071a41f43c2760272e7229f4086da6a6cf6ac07", "filename": "gcc/testsuite/gfortran.dg/sum_init_expr.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fsum_init_expr.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fsum_init_expr.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsum_init_expr.f03?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -52,14 +52,14 @@ SUBROUTINE ilib_with_dim (array, dim, result)\n   SUBROUTINE rlib (array, result)\n     REAL, DIMENSION(:,:), INTENT(in) :: array\n     REAL, INTENT(in) :: result\n-    IF (ABS(SUM(array) - result) > 2e-6) CALL abort()\n+    IF (ABS(SUM(array) - result) > 4e-6) CALL abort()\n   END SUBROUTINE\n \n   SUBROUTINE rlib_with_dim (array, dim, result)\n     REAL, DIMENSION(:,:), INTENT(in) :: array\n     INTEGER, INTENT(iN)              :: dim\n     REAL, DIMENSION(:), INTENT(in)   :: result\n-    IF (ANY (ABS(SUM (array, dim=dim) - result) > 2e-6)) CALL abort()\n+    IF (ANY (ABS(SUM (array, dim=dim) - result) > 4e-6)) CALL abort()\n   END SUBROUTINE\n END\n "}, {"sha": "26d850de961e8c3978fd544f8e13037fcdae2b6e", "filename": "gcc/testsuite/gfortran.dg/vect/fast-math-vect-8.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-vect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8238741ad5de0567d19f87f292e41746992633/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-vect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-vect-8.f90?ref=9a8238741ad5de0567d19f87f292e41746992633", "patch": "@@ -89,5 +89,6 @@ end subroutine init_solve\n \n end module solv_cap\n \n-! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } \n+\n+! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_intfloat_cvt } } }\n ! { dg-final { cleanup-tree-dump \"vect\" } } "}]}