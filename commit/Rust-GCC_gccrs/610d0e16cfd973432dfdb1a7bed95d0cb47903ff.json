{"sha": "610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwZDBlMTZjZmQ5NzM0MzJkZmRiMWE3YmVkOTVkMGNiNDc5MDNmZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-08-23T04:58:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-08-23T04:58:30Z"}, "message": "compiler: Comparisons return untyped boolean value.\n\nFrom-SVN: r190612", "tree": {"sha": "22d4e74ca89b36cd6bb9102891e2dbd3e44d8156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22d4e74ca89b36cd6bb9102891e2dbd3e44d8156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610d0e16cfd973432dfdb1a7bed95d0cb47903ff/comments", "author": null, "committer": null, "parents": [{"sha": "c92900d1db111ce186aa834ba8ce47abd765e578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92900d1db111ce186aa834ba8ce47abd765e578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92900d1db111ce186aa834ba8ce47abd765e578"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "b66a193afeed3bba2a4f961aba9704d1b00bc961", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610d0e16cfd973432dfdb1a7bed95d0cb47903ff/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610d0e16cfd973432dfdb1a7bed95d0cb47903ff/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "patch": "@@ -5075,7 +5075,7 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n \t\t\t\t\t\t     &right_nc, location,\n \t\t\t\t\t\t     &result))\n \t      return this;\n-\t    return Expression::make_cast(Type::lookup_bool_type(),\n+\t    return Expression::make_cast(Type::make_boolean_type(),\n \t\t\t\t\t Expression::make_boolean(result,\n \t\t\t\t\t\t\t\t  location),\n \t\t\t\t\t location);\n@@ -5106,10 +5106,7 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n \t    {\n \t      int cmp = left_string.compare(right_string);\n \t      bool r = Binary_expression::cmp_to_bool(op, cmp);\n-\t      return Expression::make_cast(Type::lookup_bool_type(),\n-\t\t\t\t\t   Expression::make_boolean(r,\n-\t\t\t\t\t\t\t\t    location),\n-\t\t\t\t\t   location);\n+\t      return Expression::make_boolean(r, location);\n \t    }\n \t}\n     }\n@@ -5327,15 +5324,15 @@ Binary_expression::do_type()\n \n   switch (this->op_)\n     {\n-    case OPERATOR_OROR:\n-    case OPERATOR_ANDAND:\n     case OPERATOR_EQEQ:\n     case OPERATOR_NOTEQ:\n     case OPERATOR_LT:\n     case OPERATOR_LE:\n     case OPERATOR_GT:\n     case OPERATOR_GE:\n-      return Type::lookup_bool_type();\n+      if (this->type_ == NULL)\n+\tthis->type_ = Type::make_boolean_type();\n+      return this->type_;\n \n     case OPERATOR_PLUS:\n     case OPERATOR_MINUS:\n@@ -5346,6 +5343,8 @@ Binary_expression::do_type()\n     case OPERATOR_MOD:\n     case OPERATOR_AND:\n     case OPERATOR_BITCLEAR:\n+    case OPERATOR_OROR:\n+    case OPERATOR_ANDAND:\n       {\n \tType* type;\n \tif (!Binary_expression::operation_type(this->op_,\n@@ -5453,6 +5452,16 @@ Binary_expression::do_determine_type(const Type_context* context)\n     }\n \n   this->right_->determine_type(&subcontext);\n+\n+  if (is_comparison)\n+    {\n+      if (this->type_ != NULL && !this->type_->is_abstract())\n+\t;\n+      else if (context->type != NULL && context->type->is_boolean_type())\n+\tthis->type_ = context->type;\n+      else if (!context->may_be_abstract)\n+\tthis->type_ = Type::lookup_bool_type();\n+    }\n }\n \n // Report an error if the binary operator OP does not support TYPE.\n@@ -5664,7 +5673,7 @@ Binary_expression::do_get_tree(Translate_context* context)\n     case OPERATOR_LE:\n     case OPERATOR_GT:\n     case OPERATOR_GE:\n-      return Expression::comparison_tree(context, this->op_,\n+      return Expression::comparison_tree(context, this->type_, this->op_,\n \t\t\t\t\t this->left_->type(), left,\n \t\t\t\t\t this->right_->type(), right,\n \t\t\t\t\t this->location());\n@@ -6125,8 +6134,8 @@ Expression::make_binary(Operator op, Expression* left, Expression* right,\n // Implement a comparison.\n \n tree\n-Expression::comparison_tree(Translate_context* context, Operator op,\n-\t\t\t    Type* left_type, tree left_tree,\n+Expression::comparison_tree(Translate_context* context, Type* result_type,\n+\t\t\t    Operator op, Type* left_type, tree left_tree,\n \t\t\t    Type* right_type, tree right_tree,\n \t\t\t    Location location)\n {\n@@ -6367,7 +6376,13 @@ Expression::comparison_tree(Translate_context* context, Operator op,\n   if (left_tree == error_mark_node || right_tree == error_mark_node)\n     return error_mark_node;\n \n-  tree ret = fold_build2(code, boolean_type_node, left_tree, right_tree);\n+  tree result_type_tree;\n+  if (result_type == NULL)\n+    result_type_tree = boolean_type_node;\n+  else\n+    result_type_tree = type_to_tree(result_type->get_backend(context->gogo()));\n+\n+  tree ret = fold_build2(code, result_type_tree, left_tree, right_tree);\n   if (CAN_HAVE_LOCATION_P(ret))\n     SET_EXPR_LOCATION(ret, location.gcc_location());\n   return ret;"}, {"sha": "eea141fe776c855ec6fc693b4ec3d6b857b4d7df", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610d0e16cfd973432dfdb1a7bed95d0cb47903ff/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610d0e16cfd973432dfdb1a7bed95d0cb47903ff/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "patch": "@@ -623,9 +623,9 @@ class Expression\n   // Return a tree implementing the comparison LHS_TREE OP RHS_TREE.\n   // TYPE is the type of both sides.\n   static tree\n-  comparison_tree(Translate_context*, Operator op, Type* left_type,\n-\t\t  tree left_tree, Type* right_type, tree right_tree,\n-\t\t  Location);\n+  comparison_tree(Translate_context*, Type* result_type, Operator op,\n+\t\t  Type* left_type, tree left_tree, Type* right_type,\n+\t\t  tree right_tree, Location);\n \n   // Return a tree for the multi-precision integer VAL in TYPE.\n   static tree\n@@ -1149,7 +1149,7 @@ class Binary_expression : public Expression\n   Binary_expression(Operator op, Expression* left, Expression* right,\n \t\t    Location location)\n     : Expression(EXPRESSION_BINARY, location),\n-      op_(op), left_(left), right_(right)\n+      op_(op), left_(left), right_(right), type_(NULL)\n   { }\n \n   // Return the operator.\n@@ -1280,6 +1280,8 @@ class Binary_expression : public Expression\n   Expression* left_;\n   // The right hand side operand.\n   Expression* right_;\n+  // The type of a comparison operation.\n+  Type* type_;\n };\n \n // A call expression.  The go statement needs to dig inside this."}, {"sha": "561d84a43dcfa4564b6a2ca08bd9d68b78cbb692", "filename": "gcc/testsuite/go.test/test/named1.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610d0e16cfd973432dfdb1a7bed95d0cb47903ff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610d0e16cfd973432dfdb1a7bed95d0cb47903ff/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go?ref=610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "patch": "@@ -37,8 +37,8 @@ func main() {\n \tasBool(true)\n \tasBool(*&b)\n \tasBool(Bool(true))\n-\tasBool(1 != 2) // ERROR \"cannot use.*type bool.*as type Bool\"\n-\tasBool(i < j)  // ERROR \"cannot use.*type bool.*as type Bool\"\n+\tasBool(1 != 2) // ok now\n+\tasBool(i < j)  // ok now\n \n \t_, b = m[2] // ERROR \"cannot .* bool.*type Bool\"\n "}]}