{"sha": "87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlMjczOTJlOWM4ZmNmMDMwNWJhMWRmYjAyMjRmMWJiNWY2MzdmZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-07-24T19:01:55Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-07-24T19:01:55Z"}, "message": "Generate REG_FRAME_RELATED_EXPR notes that are compatible with\ndwarf2out_frame_debug_expt.\n\nFrom-SVN: r35233", "tree": {"sha": "fbd83afa4d621fdc2cc3e079436217dbf5dea1ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbd83afa4d621fdc2cc3e079436217dbf5dea1ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe/comments", "author": null, "committer": null, "parents": [{"sha": "e09bbb25359c38da60026c18d174430e0daca699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09bbb25359c38da60026c18d174430e0daca699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09bbb25359c38da60026c18d174430e0daca699"}], "stats": {"total": 68, "additions": 59, "deletions": 9}, "files": [{"sha": "eb65aa711ce1131a1bdfe7d1a9b2537e54e49ef2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe", "patch": "@@ -1,3 +1,9 @@\n+2000-07-24  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/arm.c (emit_multi_reg_push): Generate a\n+\tREG_FRAME_RELEATED_NOTE that is compatable with the code in\n+\tdwarf2out_debug_frame_expr.\n+\n 2000-07-24  Jason Merrill  <jason@redhat.com>\n \n \t* dwarf2out.c: Complain if DWARF2_DEBUGGING_INFO is defined without"}, {"sha": "ec8086356ba3b1bd29b345438db6b2d40ed66bb9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=87e27392e9c8fcf0305ba1dfb0224f1bb5f637fe", "patch": "@@ -93,6 +93,7 @@ static Mfix *    create_fix_barrier\t\tPARAMS ((Mfix *, Hint));\n static void\t push_minipool_barrier\t        PARAMS ((rtx, Hint));\n static void\t push_minipool_fix\t\tPARAMS ((rtx, Hint, rtx *, Mmode, rtx));\n static void\t note_invalid_constants\t        PARAMS ((rtx, Hint));\n+static int       current_file_function_operand\tPARAMS ((rtx));\n \f\n #undef Hint\n #undef Mmode\n@@ -1822,7 +1823,7 @@ arm_is_longcall_p (sym_ref, call_cookie, call_symbol)\n   if (TARGET_LONG_CALLS && flag_function_sections)\n     return 1;\n   \n-  if (current_file_function_operand (sym_ref, VOIDmode))\n+  if (current_file_function_operand (sym_ref))\n     return 0;\n   \n   return (call_cookie & CALL_LONG)\n@@ -7067,6 +7068,7 @@ emit_multi_reg_push (mask)\n   int i, j;\n   rtx par;\n   rtx dwarf;\n+  int dwarf_par_index;\n   rtx tmp, reg;\n \n   for (i = 0; i <= LAST_ARM_REGNUM; i++)\n@@ -7076,9 +7078,42 @@ emit_multi_reg_push (mask)\n   if (num_regs == 0 || num_regs > 16)\n     abort ();\n \n+  /* For the body of the insn we are going to generate an UNSPEC in\n+     parallel with several USEs.  This allows the insn to be recognised\n+     by the push_multi pattern in the arm.md file.  The insn looks\n+     something like this:\n+\n+       (parallel [ \n+           (set (mem:BLK (pre_dec:BLK (reg:SI sp))) (unspec:BLK [(reg:SI r4)] 2))\n+           (use (reg:SI 11 fp))\n+           (use (reg:SI 12 ip))\n+           (use (reg:SI 14 lr))\n+           (use (reg:SI 15 pc))\n+        ])\n+\n+     For the frame note however, we try to be more explicit and actually\n+     show each register being stored into the stack frame, plus a (single)\n+     decrement of the stack pointer.  We do it this way in order to be\n+     friendly to the stack unwinding code, which only wants to see a single\n+     stack decrement per instruction.  The RTL we generate for the note looks\n+     something like this:\n+\n+      (sequence [ \n+           (set (reg:SI sp) (plus:SI (reg:SI sp) (const_int -20)))\n+           (set (mem:SI (reg:SI sp)) (reg:SI r4))\n+           (set (mem:SI (plus:SI (reg:SI sp) (const_int 4))) (reg:SI fp))\n+           (set (mem:SI (plus:SI (reg:SI sp) (const_int 8))) (reg:SI ip))\n+           (set (mem:SI (plus:SI (reg:SI sp) (const_int 12))) (reg:SI lr))\n+           (set (mem:SI (plus:SI (reg:SI sp) (const_int 16))) (reg:SI pc))\n+        ])\n+\n+      This sequence is used both by the code to support stack unwinding for\n+      exceptions handlers and the code to generate dwarf2 frame debugging.  */\n+  \n   par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (num_regs));\n-  dwarf = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (num_regs));\n+  dwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (num_regs + 1));\n   RTX_FRAME_RELATED_P (dwarf) = 1;\n+  dwarf_par_index = 1;\n \n   for (i = 0; i <= LAST_ARM_REGNUM; i++)\n     {\n@@ -7096,12 +7131,11 @@ emit_multi_reg_push (mask)\n \t\t\t\t\t   2));\n \n \t  tmp = gen_rtx_SET (VOIDmode,\n-\t\t\t     gen_rtx_MEM (SImode,\n-\t\t\t\t\t  gen_rtx_PRE_DEC (BLKmode,\n-\t\t\t\t\t\t\t   stack_pointer_rtx)),\n+\t\t\t     gen_rtx_MEM (SImode, stack_pointer_rtx),\n \t\t\t     reg);\n \t  RTX_FRAME_RELATED_P (tmp) = 1;\n-\t  XVECEXP (dwarf, 0, num_regs - 1) = tmp;\t  \n+\t  XVECEXP (dwarf, 0, dwarf_par_index) = tmp;\n+\t  dwarf_par_index ++;\n \n \t  break;\n \t}\n@@ -7117,17 +7151,27 @@ emit_multi_reg_push (mask)\n \n \t  tmp = gen_rtx_SET (VOIDmode,\n \t\t\t     gen_rtx_MEM (SImode,\n-\t\t\t\t\t  gen_rtx_PRE_DEC (BLKmode,\n-\t\t\t\t\t\t\t   stack_pointer_rtx)),\n+\t\t\t\t\t  gen_rtx_PLUS (SImode,\n+\t\t\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\t\t\tGEN_INT (4 * j))),\n \t\t\t     reg);\n \t  RTX_FRAME_RELATED_P (tmp) = 1;\n-\t  XVECEXP (dwarf, 0, num_regs - j - 1) = tmp;\n+\t  XVECEXP (dwarf, 0, dwarf_par_index ++) = tmp;\n \t\t\t   \n \t  j++;\n \t}\n     }\n \n   par = emit_insn (par);\n+  \n+  tmp = gen_rtx_SET (SImode,\n+\t\t     stack_pointer_rtx,\n+\t\t     gen_rtx_PLUS (SImode,\n+\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t   GEN_INT (-4 * num_regs)));\n+  RTX_FRAME_RELATED_P (tmp) = 1;\n+  XVECEXP (dwarf, 0, 0) = tmp;\n+  \n   REG_NOTES (par) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, dwarf,\n \t\t\t\t       REG_NOTES (par));\n   return par;"}]}