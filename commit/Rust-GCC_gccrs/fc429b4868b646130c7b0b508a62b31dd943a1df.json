{"sha": "fc429b4868b646130c7b0b508a62b31dd943a1df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM0MjliNDg2OGI2NDYxMzBjN2IwYjUwOGE2MmIzMWRkOTQzYTFkZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-10-04T17:01:31Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-10-04T17:01:31Z"}, "message": "2012-10-03  Tobias Burnus  <burnus@net-b.de>\n\n        * gcc.c (record_temp_file, add_sysrooted_prefix,\n        * process_command,\n        do_self_spec, compare_debug_dump_opt_spec_function): Plug memleaks.\n        (do_spec_1): Ditto, fix out-of-bound access.\n        * opts.c (common_handle_option): Plug memleak.\n\nFrom-SVN: r192088", "tree": {"sha": "96769359ce012259654f91716b76a0672d78ae15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96769359ce012259654f91716b76a0672d78ae15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc429b4868b646130c7b0b508a62b31dd943a1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc429b4868b646130c7b0b508a62b31dd943a1df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc429b4868b646130c7b0b508a62b31dd943a1df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc429b4868b646130c7b0b508a62b31dd943a1df/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b674cffe6605b8949db5ddcdb7b0bc2546c1d6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b674cffe6605b8949db5ddcdb7b0bc2546c1d6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b674cffe6605b8949db5ddcdb7b0bc2546c1d6d5"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "191165604b9ed92b7a3beca73a40914e91777dd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc429b4868b646130c7b0b508a62b31dd943a1df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc429b4868b646130c7b0b508a62b31dd943a1df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc429b4868b646130c7b0b508a62b31dd943a1df", "patch": "@@ -1,3 +1,10 @@\n+2012-10-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gcc.c (record_temp_file, add_sysrooted_prefix, process_command,\n+\tdo_self_spec, compare_debug_dump_opt_spec_function): Plug memleaks.\n+\t(do_spec_1): Ditto, fix out-of-bound access.\n+\t* opts.c (common_handle_option): Plug memleak.\n+\n 2012-10-04  Jason Merrill  <jason@redhat.com>\n \n \t* config/darwin.c (darwin_assemble_visibility): Treat"}, {"sha": "bbca6d84e33a0e904bbf78ab314849fa13d6bbec", "filename": "gcc/gcc.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc429b4868b646130c7b0b508a62b31dd943a1df/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc429b4868b646130c7b0b508a62b31dd943a1df/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=fc429b4868b646130c7b0b508a62b31dd943a1df", "patch": "@@ -1988,7 +1988,10 @@ record_temp_file (const char *filename, int always_delete, int fail_delete)\n       struct temp_file *temp;\n       for (temp = failure_delete_queue; temp; temp = temp->next)\n \tif (! filename_cmp (name, temp->name))\n-\t  goto already2;\n+\t  {\n+\t    free (name);\n+\t    goto already2;\n+\t  }\n \n       temp = XNEW (struct temp_file);\n       temp->next = failure_delete_queue;\n@@ -2462,8 +2465,11 @@ add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,\n \tsysroot_no_trailing_dir_separator[sysroot_len - 1] = '\\0';\n \n       if (target_sysroot_suffix)\n-\t  prefix = concat (target_sysroot_suffix, prefix, NULL);\n-      prefix = concat (sysroot_no_trailing_dir_separator, prefix, NULL);\n+\tprefix = concat (sysroot_no_trailing_dir_separator,\n+\t\t\t target_sysroot_suffix, prefix, NULL);\n+      else\n+\tprefix = concat (sysroot_no_trailing_dir_separator, prefix, NULL);\n+\n       free (sysroot_no_trailing_dir_separator);\n \n       /* We have to override this because GCC's notion of sysroot\n@@ -3571,7 +3577,7 @@ process_command (unsigned int decoded_options_count,\n {\n   const char *temp;\n   char *temp1;\n-  const char *tooldir_prefix;\n+  char *tooldir_prefix, *tooldir_prefix2;\n   char *(*get_relative_prefix) (const char *, const char *,\n \t\t\t\tconst char *) = NULL;\n   struct cl_option_handlers handlers;\n@@ -3920,22 +3926,24 @@ process_command (unsigned int decoded_options_count,\n     }\n \n   gcc_assert (!IS_ABSOLUTE_PATH (tooldir_base_prefix));\n-  tooldir_prefix = concat (tooldir_base_prefix, spec_machine,\n-\t\t\t   dir_separator_str, NULL);\n+  tooldir_prefix2 = concat (tooldir_base_prefix, spec_machine,\n+\t\t\t    dir_separator_str, NULL);\n \n   /* Look for tools relative to the location from which the driver is\n      running, or, if that is not available, the configured prefix.  */\n   tooldir_prefix\n     = concat (gcc_exec_prefix ? gcc_exec_prefix : standard_exec_prefix,\n \t      spec_machine, dir_separator_str,\n-\t      spec_version, dir_separator_str, tooldir_prefix, NULL);\n+\t      spec_version, dir_separator_str, tooldir_prefix2, NULL);\n+  free (tooldir_prefix2);\n \n   add_prefix (&exec_prefixes,\n \t      concat (tooldir_prefix, \"bin\", dir_separator_str, NULL),\n \t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, 0);\n   add_prefix (&startfile_prefixes,\n \t      concat (tooldir_prefix, \"lib\", dir_separator_str, NULL),\n \t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, 1);\n+  free (tooldir_prefix);\n \n #if defined(TARGET_SYSTEM_ROOT_RELOCATABLE) && !defined(VMS)\n   /* If the normal TARGET_SYSTEM_ROOT is inside of $exec_prefix,\n@@ -4319,6 +4327,7 @@ do_self_spec (const char *spec)\n \t\t\t\t       argbuf_copy,\n \t\t\t\t       CL_DRIVER, &decoded_options,\n \t\t\t\t       &decoded_options_count);\n+      free (argbuf_copy);\n \n       set_option_handlers (&handlers);\n \n@@ -4740,8 +4749,8 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    memcpy (tmp, save_temps_prefix, save_temps_length);\n \t\t    memcpy (tmp + save_temps_length, suffix, suffix_length);\n \t\t    tmp[save_temps_length + suffix_length] = '\\0';\n-\t\t    temp_filename = save_string (tmp,\n-\t\t\t\t\t\t temp_filename_length + 1);\n+\t\t    temp_filename = save_string (tmp, save_temps_length\n+\t\t\t\t\t\t      + suffix_length);\n \t\t    obstack_grow (&obstack, temp_filename,\n \t\t\t\t  temp_filename_length);\n \t\t    arg_going = 1;\n@@ -5055,6 +5064,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \n \t      /* This option is new; add it.  */\n \t      add_linker_option (string, strlen (string));\n+\t      free (string);\n \t    }\n \t    break;\n \n@@ -8186,7 +8196,7 @@ static const char *\n compare_debug_dump_opt_spec_function (int arg,\n \t\t\t\t      const char **argv ATTRIBUTE_UNUSED)\n {\n-  const char *ret;\n+  char *ret;\n   char *name;\n   int which;\n   static char random_seed[HOST_BITS_PER_WIDE_INT / 4 + 3];\n@@ -8240,8 +8250,12 @@ compare_debug_dump_opt_spec_function (int arg,\n     }\n \n   if (*random_seed)\n-    ret = concat (\"%{!frandom-seed=*:-frandom-seed=\", random_seed, \"} \",\n-\t\t  ret, NULL);\n+    {\n+      char *tmp = ret;\n+      ret = concat (\"%{!frandom-seed=*:-frandom-seed=\", random_seed, \"} \",\n+\t\t    ret, NULL);\n+      free (tmp);\n+    }\n \n   if (which)\n     *random_seed = 0;"}, {"sha": "ccfe3c70a914fd8a89e184812825466c46e168a5", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc429b4868b646130c7b0b508a62b31dd943a1df/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc429b4868b646130c7b0b508a62b31dd943a1df/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fc429b4868b646130c7b0b508a62b31dd943a1df", "patch": "@@ -1475,6 +1475,8 @@ common_handle_option (struct gcc_options *opts,\n \tstrip_off_ending (tmp, strlen (tmp));\n \tif (tmp[0])\n \t  opts->x_aux_base_name = tmp;\n+\telse\n+\t  free (tmp);\n       }\n       break;\n "}]}