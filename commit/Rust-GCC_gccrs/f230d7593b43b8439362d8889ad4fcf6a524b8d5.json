{"sha": "f230d7593b43b8439362d8889ad4fcf6a524b8d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzMGQ3NTkzYjQzYjg0MzkzNjJkODg4OWFkNGZjZjZhNTI0YjhkNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-17T17:12:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-17T17:12:21Z"}, "message": "decl.c (elaborate_expression_1): Try harder to find out whether the expression is read-only.\n\n\t* gcc-interface/decl.c (elaborate_expression_1): Try harder to find\n\tout whether the expression is read-only.  Short-circuit placeholder\n\tcase and rename a couple of local variables.\n\nFrom-SVN: r171106", "tree": {"sha": "83cab8baf0af7122e9aee5a3b79bceaefe0eec0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83cab8baf0af7122e9aee5a3b79bceaefe0eec0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f230d7593b43b8439362d8889ad4fcf6a524b8d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f230d7593b43b8439362d8889ad4fcf6a524b8d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f230d7593b43b8439362d8889ad4fcf6a524b8d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f230d7593b43b8439362d8889ad4fcf6a524b8d5/comments", "author": null, "committer": null, "parents": [{"sha": "c1e41527443f54a454452b9b628ab215a73375b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e41527443f54a454452b9b628ab215a73375b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e41527443f54a454452b9b628ab215a73375b5"}], "stats": {"total": 126, "additions": 96, "deletions": 30}, "files": [{"sha": "fc87a82cb7da3375056e4e77b111ebec216651fa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f230d7593b43b8439362d8889ad4fcf6a524b8d5", "patch": "@@ -1,3 +1,9 @@\n+2011-03-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (elaborate_expression_1): Try harder to find\n+\tout whether the expression is read-only.  Short-circuit placeholder\n+\tcase and rename a couple of local variables.\n+\n 2011-03-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (smaller_form_type_p): Declare."}, {"sha": "696e49a703bbfc1ab671bc10bfed14b9e9b9a4a6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 47, "deletions": 30, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f230d7593b43b8439362d8889ad4fcf6a524b8d5", "patch": "@@ -6003,15 +6003,9 @@ static tree\n elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n \t\t\tbool definition, bool need_debug)\n {\n-  /* Skip any conversions and simple arithmetics to see if the expression\n-     is a read-only variable.\n-     ??? This really should remain read-only, but we have to think about\n-     the typing of the tree here.  */\n-  tree gnu_inner_expr\n-    = skip_simple_arithmetic (remove_conversions (gnu_expr, true));\n-  tree gnu_decl = NULL_TREE;\n-  bool expr_global = Is_Public (gnat_entity) || global_bindings_p ();\n-  bool expr_variable;\n+  const bool expr_global_p = Is_Public (gnat_entity) || global_bindings_p ();\n+  bool expr_variable_p;\n+  tree gnu_decl;\n \n   /* In most cases, we won't see a naked FIELD_DECL because a discriminant\n      reference will have been replaced with a COMPONENT_REF when the type\n@@ -6023,39 +6017,62 @@ elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n \t\t       build0 (PLACEHOLDER_EXPR, DECL_CONTEXT (gnu_expr)),\n \t\t       gnu_expr, NULL_TREE);\n \n-  /* If GNU_EXPR is neither a placeholder nor a constant, nor a variable\n-     that is read-only, make a variable that is initialized to contain the\n-     bound when the package containing the definition is elaborated.  If\n-     this entity is defined at top level and a bound or discriminant value\n-     isn't a constant or a reference to a discriminant, replace the bound\n-     by the variable; otherwise use a SAVE_EXPR if needed.  Note that we\n-     rely here on the fact that an expression cannot contain both the\n-     discriminant and some other variable.  */\n-  expr_variable = (!CONSTANT_CLASS_P (gnu_expr)\n-\t\t   && !(TREE_CODE (gnu_inner_expr) == VAR_DECL\n-\t\t\t&& (TREE_READONLY (gnu_inner_expr)\n-\t\t\t    || DECL_READONLY_ONCE_ELAB (gnu_inner_expr)))\n-\t\t   && !CONTAINS_PLACEHOLDER_P (gnu_expr));\n-\n-  /* If GNU_EXPR contains a discriminant, we can't elaborate a variable.  */\n-  if (need_debug && CONTAINS_PLACEHOLDER_P (gnu_expr))\n-    need_debug = false;\n+  /* If GNU_EXPR contains a placeholder, just return it.  We rely on the fact\n+     that an expression cannot contain both a discriminant and a variable.  */\n+  if (CONTAINS_PLACEHOLDER_P (gnu_expr))\n+    return gnu_expr;\n+\n+  /* If GNU_EXPR is neither a constant nor based on a read-only variable, make\n+     a variable that is initialized to contain the expression when the package\n+     containing the definition is elaborated.  If this entity is defined at top\n+     level, replace the expression by the variable; otherwise use a SAVE_EXPR\n+     if this is necessary.  */\n+  if (CONSTANT_CLASS_P (gnu_expr))\n+    expr_variable_p = false;\n+  else\n+    {\n+      /* Skip any conversions and simple arithmetics to see if the expression\n+\t is based on a read-only variable.\n+\t ??? This really should remain read-only, but we have to think about\n+\t the typing of the tree here.  */\n+      tree inner\n+\t= skip_simple_arithmetic (remove_conversions (gnu_expr, true));\n+\n+      if (handled_component_p (inner))\n+\t{\n+\t  HOST_WIDE_INT bitsize, bitpos;\n+\t  tree offset;\n+\t  enum machine_mode mode;\n+\t  int unsignedp, volatilep;\n+\n+\t  inner = get_inner_reference (inner, &bitsize, &bitpos, &offset,\n+\t\t\t\t       &mode, &unsignedp, &volatilep, false);\n+\t  /* If the offset is variable, err on the side of caution.  */\n+\t  if (offset)\n+\t    inner = NULL_TREE;\n+\t}\n+\n+      expr_variable_p\n+\t= !(inner\n+\t    && TREE_CODE (inner) == VAR_DECL\n+\t    && (TREE_READONLY (inner) || DECL_READONLY_ONCE_ELAB (inner)));\n+    }\n \n   /* Now create the variable if we need it.  */\n-  if (need_debug || (expr_variable && expr_global))\n+  if (need_debug || (expr_variable_p && expr_global_p))\n     gnu_decl\n       = create_var_decl (create_concat_name (gnat_entity,\n \t\t\t\t\t     IDENTIFIER_POINTER (gnu_name)),\n \t\t\t NULL_TREE, TREE_TYPE (gnu_expr), gnu_expr,\n \t\t\t !need_debug, Is_Public (gnat_entity),\n-\t\t\t !definition, expr_global, NULL, gnat_entity);\n+\t\t\t !definition, expr_global_p, NULL, gnat_entity);\n \n   /* We only need to use this variable if we are in global context since GCC\n      can do the right thing in the local case.  */\n-  if (expr_global && expr_variable)\n+  if (expr_global_p && expr_variable_p)\n     return gnu_decl;\n \n-  return expr_variable ? gnat_save_expr (gnu_expr) : gnu_expr;\n+  return expr_variable_p ? gnat_save_expr (gnu_expr) : gnu_expr;\n }\n \n /* Similar, but take an alignment factor and make it explicit in the tree.  */"}, {"sha": "e0b94d48b2b50c08d3911258f8ed3e5518bb3e18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f230d7593b43b8439362d8889ad4fcf6a524b8d5", "patch": "@@ -1,3 +1,8 @@\n+2011-03-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/elab2.ads: New test.\n+\t* gnat.dg/specs/elab2_pkg.ads: New helper.\n+\n 2011-03-17  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/decltype-1212.C: New."}, {"sha": "005871b08a48427f57150c89e200d61aeab684c5", "filename": "gcc/testsuite/gnat.dg/specs/elab2.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Felab2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Felab2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Felab2.ads?ref=f230d7593b43b8439362d8889ad4fcf6a524b8d5", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+\n+with Elab2_Pkg; use Elab2_Pkg;\n+\n+package Elab2 is\n+\n+   type Num is (One, Two);\n+\n+   type Rec2 (D : Index_Type := 0) is record\n+      Data : Rec1(D);\n+   end record;\n+\n+   type Rec3 (D : Num) is record\n+      case D is\n+         when One => R : Rec2;\n+         when others => null;\n+      end case;\n+   end record;\n+\n+end Elab2;"}, {"sha": "8d40cd1de9d1955811a44c0bbcb6b77ea1d91b2a", "filename": "gcc/testsuite/gnat.dg/specs/elab2_pkg.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Felab2_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f230d7593b43b8439362d8889ad4fcf6a524b8d5/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Felab2_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Felab2_pkg.ads?ref=f230d7593b43b8439362d8889ad4fcf6a524b8d5", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-excess-errors \"no code generated\" }\n+\n+package Elab2_Pkg is\n+\n+   function Get_Value (S : String) return Integer;\n+\n+   Max_Limit : constant array(1..2) of Integer :=\n+     (1 => Get_Value (\"One\"), 2 => Get_Value (\"Two\"));\n+\n+   type Index_Type is new Natural range 0 .. Max_Limit(1);\n+\n+   type Array_Type is array (Index_Type range <>) of Natural;\n+\n+   type Rec1(D : Index_Type) is record\n+      A : Array_Type(1 .. D);\n+   end record;\n+\n+end Elab2_Pkg;"}]}