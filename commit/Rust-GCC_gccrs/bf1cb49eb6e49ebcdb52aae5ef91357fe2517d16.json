{"sha": "bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxY2I0OWViNmU0OWViY2RiNTJhYWU1ZWY5MTM1N2ZlMjUxN2QxNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-07-08T14:00:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-07-08T14:00:26Z"}, "message": "re PR c++/43120 (Virtual inheritance with covariant return type confuses GCC)\n\n\tPR c++/43120\n\t* class.c (update_vtable_entry_for_fn): Fix handling of dummy\n\tvirtual bases for covariant thunks.\n\nFrom-SVN: r161954", "tree": {"sha": "b4a615519d887258689016d13781a8a21c025df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a615519d887258689016d13781a8a21c025df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02de68e16b0548f4ac9599cdd5dcd0b9703f02fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02de68e16b0548f4ac9599cdd5dcd0b9703f02fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02de68e16b0548f4ac9599cdd5dcd0b9703f02fb"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "0a3f54a7c1b9931e990b9ec975c1e788aa285266", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "patch": "@@ -1,7 +1,13 @@\n+2010-07-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43120\n+\t* class.c (update_vtable_entry_for_fn): Fix handling of dummy\n+\tvirtual bases for covariant thunks.\n+\n 2010-07-08  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* cp-tree.h: Do not include toplev.h.\n-\t\n+\n 2010-07-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44703"}, {"sha": "20b8c1245c17b9371d743e82631693596bc2f591", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "patch": "@@ -2058,8 +2058,9 @@ get_vcall_index (tree fn, tree type)\n }\n \n /* Update an entry in the vtable for BINFO, which is in the hierarchy\n-   dominated by T.  FN has been overridden in BINFO; VIRTUALS points to the\n-   corresponding position in the BINFO_VIRTUALS list.  */\n+   dominated by T.  FN is the old function; VIRTUALS points to the\n+   corresponding position in the new BINFO_VIRTUALS list.  IX is the index\n+   of that entry in the list.  */\n \n static void\n update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n@@ -2252,9 +2253,11 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n \t  virtual_base = probe;\n \n       if (virtual_base)\n-\t/* Even if we find a virtual base, the correct delta is\n-\t   between the overrider and the binfo we're building a vtable\n-\t   for.  */\n+\t/* OK, first_defn got this function from a (possibly lost) primary\n+\t   virtual base, so we're going to use the vcall offset for that\n+\t   primary virtual base.  But the caller is passing a first_defn*,\n+\t   not a virtual_base*, so the correct delta is the delta between\n+\t   first_defn* and itself, i.e. zero.  */\n \tgoto virtual_covariant;\n     }\n \n@@ -2272,12 +2275,12 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n        entry in our vtable.  Except possibly in a constructor vtable,\n        if we happen to get our primary back.  In that case, the offset\n        will be zero, as it will be a primary base.  */\n+   virtual_covariant:\n     delta = size_zero_node;\n   else\n     /* The `this' pointer needs to be adjusted from pointing to\n        BINFO to pointing at the base where the final overrider\n        appears.  */\n-    virtual_covariant:\n     delta = size_diffop_loc (input_location,\n \t\t\t convert (ssizetype,\n \t\t\t\t  BINFO_OFFSET (TREE_VALUE (overrider))),"}, {"sha": "7bf8c0254ceb6724b85ec63ebe64ef867f56fc1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "patch": "@@ -1,3 +1,9 @@\n+2010-07-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43120\n+\t* g++.dg/inherit/covariant17.C: New.\n+\t* g++.dg/abi/covariant1.C: Actually test for the bug.\n+\n 2010-07-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/44838"}, {"sha": "42522c1b92578e89afad3ed89ac564574d6d519a", "filename": "gcc/testsuite/g++.dg/abi/covariant1.C", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant1.C?ref=bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "patch": "@@ -16,6 +16,11 @@ struct c12 : c11 { };\n \n struct c14 : \n   virtual c12,\n-  virtual c11 { virtual c12* f17(); };\n+  virtual c11 { virtual void f(); c12* f17(); };\n \n-// { dg-final { scan-assembler-not \"\\n_ZTch0_v0_n16_N3c143f17Ev\\[: \\t\\n\\]\" } }\n+void c14::f() { }\n+\n+// { dg-final { scan-assembler \"_ZTcv0_n12_v0_n16_N3c143f17Ev\" { target ilp32 } } }\n+// { dg-final { scan-assembler-not \"_ZTch0_v0_n16_N3c143f17Ev\" } }\n+// { dg-final { scan-assembler \"_ZTcv0_n24_v0_n32_N3c143f17Ev\" { target lp64 } } }\n+// { dg-final { scan-assembler-not \"_ZTch0_v0_n32_N3c143f17Ev\" } }"}, {"sha": "26031d52ca942c2026ed2ae40a8e8521673eda9f", "filename": "gcc/testsuite/g++.dg/inherit/covariant17.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant17.C?ref=bf1cb49eb6e49ebcdb52aae5ef91357fe2517d16", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/43120\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+struct A {\n+  int a;\n+\n+  A(int a_) : a(a_) {}\n+\n+  A(const A &other) { }\n+\n+  virtual void dummy() {}\n+};\n+\n+struct B {\n+  virtual B *clone() const = 0;\n+};\n+\n+struct C : public virtual B {\n+  virtual B *clone() const = 0;\n+};\n+\n+struct E* ep;\n+struct E : public A, public C {\n+  E(int a_) : A(a_) { ep = this; }\n+\n+  virtual E *clone() const {\n+    if (this != ep)\n+      abort();\n+    return new E(*this);\n+  }\n+};\n+\n+int main() {\n+  E *a = new E(123);\n+  B *c = a;\n+  B *d = c->clone();\n+  return 0;\n+}"}]}