{"sha": "9f143008c73c60e02634d6b433139a035ef7bb65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxNDMwMDhjNzNjNjBlMDI2MzRkNmI0MzMxMzlhMDM1ZWY3YmI2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-04T15:04:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-04T15:06:31Z"}, "message": "c++: Fix reuse of class constants [PR94453]\n\nThe testcase hit an ICE trying to expand a TARGET_EXPR temporary cached from\nthe other lambda-expression.  This patch fixes this in two ways:\n\n1) Avoid reusing a TARGET_EXPR from another function.\n2) Avoid ending up with a TARGET_EXPR at all; the use of 'p' had become\n<TARGET_EXPR<NON_LVALUE_EXPR<TARGET_EXPR ...>>>, which doesn't make any\nsense.\n\ngcc/cp/ChangeLog\n2020-04-04  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/94453\n\t* constexpr.c (maybe_constant_value): Use break_out_target_exprs.\n\t* expr.c (mark_use) [VIEW_CONVERT_EXPR]: Don't wrap a TARGET_EXPR in\n\tNON_LVALUE_EXPR.", "tree": {"sha": "dde2a0566499fe03a7c93a2f784d3b3cad280477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde2a0566499fe03a7c93a2f784d3b3cad280477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f143008c73c60e02634d6b433139a035ef7bb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f143008c73c60e02634d6b433139a035ef7bb65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f143008c73c60e02634d6b433139a035ef7bb65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f143008c73c60e02634d6b433139a035ef7bb65/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2523d721cfc861a3abea6e97736446c99ba8b52d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2523d721cfc861a3abea6e97736446c99ba8b52d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2523d721cfc861a3abea6e97736446c99ba8b52d"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "f8229368eb984a74978c3339860e11538c5a9a98", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f143008c73c60e02634d6b433139a035ef7bb65", "patch": "@@ -1,3 +1,10 @@\n+2020-04-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94453\n+\t* constexpr.c (maybe_constant_value): Use break_out_target_exprs.\n+\t* expr.c (mark_use) [VIEW_CONVERT_EXPR]: Don't wrap a TARGET_EXPR in\n+\tNON_LVALUE_EXPR.\n+\n 2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/94441"}, {"sha": "8c693ea89efbf59b34b6603808270fdcd051ee9f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=9f143008c73c60e02634d6b433139a035ef7bb65", "patch": "@@ -6793,7 +6793,7 @@ maybe_constant_value (tree t, tree decl, bool manifestly_const_eval,\n       r = *cached;\n       if (r != t)\n \t{\n-\t  r = unshare_expr_without_location (r);\n+\t  r = break_out_target_exprs (r, /*clear_loc*/true);\n \t  protected_set_expr_location (r, EXPR_LOCATION (t));\n \t}\n       return r;"}, {"sha": "9b535708c57257cb42f08aa1dba9acf5ec71e806", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=9f143008c73c60e02634d6b433139a035ef7bb65", "patch": "@@ -195,11 +195,23 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n \t  tree nop = RECUR (op);\n \t  if (nop == error_mark_node)\n \t    return error_mark_node;\n-\t  TREE_OPERAND (expr, 0) = nop;\n-\t  /* If we're replacing a DECL with a constant, we also need to change\n-\t     the TREE_CODE of the location wrapper.  */\n-\t  if (op != nop && rvalue_p)\n-\t    TREE_SET_CODE (expr, NON_LVALUE_EXPR);\n+\t  else if (op == nop)\n+\t    /* No change.  */;\n+\t  else if (DECL_P (nop) || CONSTANT_CLASS_P (nop))\n+\t    {\n+\t      /* Reuse the location wrapper.  */\n+\t      TREE_OPERAND (expr, 0) = nop;\n+\t      /* If we're replacing a DECL with a constant, we also need to\n+\t\t change the TREE_CODE of the location wrapper.  */\n+\t      if (rvalue_p)\n+\t\tTREE_SET_CODE (expr, NON_LVALUE_EXPR);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Drop the location wrapper.  */\n+\t      expr = nop;\n+\t      protected_set_expr_location (expr, loc);\n+\t    }\n \t  return expr;\n \t}\n       gcc_fallthrough();"}, {"sha": "7cb1e239ebbfa8045a00313a0cdb69ff597fa057", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-constexpr1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-constexpr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f143008c73c60e02634d6b433139a035ef7bb65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-constexpr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-constexpr1.C?ref=9f143008c73c60e02634d6b433139a035ef7bb65", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/94453\n+// { dg-do compile { target c++11 } }\n+\n+void *ay();\n+template <typename f> f ay() { return *static_cast<f *>(ay()); }\n+template <typename h>\n+void bf() {\n+  ay<h>()();\n+}\n+struct az {\n+  template <typename h>\n+  az(h);\n+  using bk = void (*)();\n+  bk bl;\n+};\n+template <typename h>\n+az::az(h) { bl = bf<h>; }\n+struct A {};\n+void da(az);\n+void di(A, int);\n+void dk(A, az, az);\n+void b() {\n+  int data = 0;\n+  auto n = [] {};\n+  constexpr auto p = A{};\n+  auto q = [=] { di(p, data); };\n+  da([=] { dk(p, n, q); });\n+}"}]}