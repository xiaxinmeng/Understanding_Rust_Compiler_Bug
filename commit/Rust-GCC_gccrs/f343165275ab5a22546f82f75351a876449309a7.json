{"sha": "f343165275ab5a22546f82f75351a876449309a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM0MzE2NTI3NWFiNWEyMjU0NmY4MmY3NTM1MWE4NzY0NDkzMDlhNw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-10-05T16:43:11Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-10-05T16:43:11Z"}, "message": "PR tree-optimization/87490 - ICE in expand_builtin_strnlen with a constant argument and non-constant bound\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/87490\n\t* builtins.c (expand_builtin_strnlen): Handle a null data.decl\n\tconsistently.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/87490\n\t* gcc.dg/pr87490.c: New test.\n\t* gcc.dg/warn-strnlen-no-nul-2.c: Same.\n\nFrom-SVN: r264876", "tree": {"sha": "8f20c275050047b78af765ced840e7a2f5e38a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f20c275050047b78af765ced840e7a2f5e38a6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f343165275ab5a22546f82f75351a876449309a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f343165275ab5a22546f82f75351a876449309a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f343165275ab5a22546f82f75351a876449309a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f343165275ab5a22546f82f75351a876449309a7/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b9bc230ac50c67c63f303b70e72b34a7c516fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b9bc230ac50c67c63f303b70e72b34a7c516fb"}], "stats": {"total": 129, "additions": 119, "deletions": 10}, "files": [{"sha": "b12413f558fa1a51ea531e6b9f4a0bbcf4419d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f343165275ab5a22546f82f75351a876449309a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f343165275ab5a22546f82f75351a876449309a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f343165275ab5a22546f82f75351a876449309a7", "patch": "@@ -1,3 +1,9 @@\n+2018-10-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/87490\n+\t* builtins.c (expand_builtin_strnlen): Handle a null data.decl\n+\tconsistently.\n+\n 2018-10-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63155"}, {"sha": "25e01e4092b030a068abcfc8e9d322822e5e8c9e", "filename": "gcc/builtins.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f343165275ab5a22546f82f75351a876449309a7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f343165275ab5a22546f82f75351a876449309a7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f343165275ab5a22546f82f75351a876449309a7", "patch": "@@ -3151,21 +3151,39 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n \t\t     exp, func, min.to_uhwi (), max.to_uhwi (), maxobjsize))\n       TREE_NO_WARNING (exp) = true;\n \n+  bool exact = true;\n   if (!len || TREE_CODE (len) != INTEGER_CST)\n-    return NULL_RTX;\n+    {\n+      data.decl = unterminated_array (src, &len, &exact);\n+      if (!data.decl)\n+\treturn NULL_RTX;\n+    }\n \n-  if (!TREE_NO_WARNING (exp)\n-      && wi::ltu_p (wi::to_wide (len), min)\n-      && warning_at (loc, OPT_Wstringop_overflow_,\n-\t\t     \"%K%qD specified bound [%wu, %wu] \"\n-\t\t     \"exceeds the size %E of unterminated array\",\n-\t\t     exp, func, min.to_uhwi (), max.to_uhwi (), len))\n+  if (data.decl\n+      && !TREE_NO_WARNING (exp)\n+      && (wi::ltu_p (wi::to_wide (len), min)\n+\t  || !exact))\n     {\n-      inform (DECL_SOURCE_LOCATION (data.decl),\n-\t      \"referenced argument declared here\");\n-      TREE_NO_WARNING (exp) = true;\n+      location_t warnloc\n+\t= expansion_point_location_if_in_system_header (loc);\n+\n+      if (warning_at (warnloc, OPT_Wstringop_overflow_,\n+\t\t      exact\n+\t\t      ? G_(\"%K%qD specified bound [%wu, %wu] exceeds \"\n+\t\t\t   \"the size %E of unterminated array\")\n+\t\t      : G_(\"%K%qD specified bound [%wu, %wu] may exceed \"\n+\t\t\t   \"the size of at most %E of unterminated array\"),\n+\t\t      exp, func, min.to_uhwi (), max.to_uhwi (), len))\n+\t{\n+\t  inform (DECL_SOURCE_LOCATION (data.decl),\n+\t\t  \"referenced argument declared here\");\n+\t  TREE_NO_WARNING (exp) = true;\n+\t}\n     }\n \n+  if (data.decl)\n+    return NULL_RTX;\n+\n   if (wi::gtu_p (min, wi::to_wide (len)))\n     return expand_expr (len, target, target_mode, EXPAND_NORMAL);\n "}, {"sha": "90790612e36c32fbbf08a38ca658ea921b400e16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f343165275ab5a22546f82f75351a876449309a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f343165275ab5a22546f82f75351a876449309a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f343165275ab5a22546f82f75351a876449309a7", "patch": "@@ -1,3 +1,9 @@\n+2018-10-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/87490\n+\t* gcc.dg/pr87490.c: New test.\n+\t* gcc.dg/warn-strnlen-no-nul-2.c: Same.\n+\n 2018-10-05  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR tree-optimization/71625"}, {"sha": "61c36e3a69d27138d6b767c883441bbffd2f81c8", "filename": "gcc/testsuite/gcc.dg/pr87490.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f343165275ab5a22546f82f75351a876449309a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87490.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f343165275ab5a22546f82f75351a876449309a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87490.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87490.c?ref=f343165275ab5a22546f82f75351a876449309a7", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/87490 - ICE in expand_builtin_strnlen with a constant\n+   argument and non-constant bound\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fno-optimize-strlen\" }  */\n+\n+void test_O1 (int i)\n+{\n+  int n = (i & 3) | 1;\n+\n+  /* The ICE here triggers at -O1, with tree-ssa-strlen disabled.  */\n+  if (__builtin_strnlen (\"\", n) != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "e91e8cef7512d470042ceda04f95a1cf23a730b1", "filename": "gcc/testsuite/gcc.dg/warn-strnlen-no-nul-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f343165275ab5a22546f82f75351a876449309a7/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f343165275ab5a22546f82f75351a876449309a7/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul-2.c?ref=f343165275ab5a22546f82f75351a876449309a7", "patch": "@@ -0,0 +1,66 @@\n+/* Verify that calls to strnlen with an unterminated array and\n+   an excessive non-constant bound are diagnosed.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+#include \"range.h\"\n+\n+extern size_t strnlen (const char*, size_t);\n+\n+const char a[5] = \"12345\";   /* { dg-message \"declared here\" } */\n+enum { asz = sizeof a };\n+\n+int v0 = 0;\n+int v1 = 1;\n+\n+void sink (int, ...);\n+\n+#define CONCAT(a, b)   a ## b\n+#define CAT(a, b)      CONCAT(a, b)\n+\n+#define T(str, n)\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\t\\\n+  void CAT (test_, __LINE__) (void) {\t\t\t\\\n+    int i0 = 0, i1 = i0 + 1, i2 = i1 + 1, i3 = i2 + 1;\t\\\n+    sink (strnlen (str, n), i0, i1, i2, i3);\t\t\\\n+  } typedef void dummy_type\n+\n+\n+T (a, UR (asz, -1));\n+T (a, UR (asz - 1, -1));\n+T (a, UR (asz - 2, -1));\n+T (a, UR (asz - 5, -1));\n+T (&a[0], UR (asz, -1));\n+T (&a[0] + 1, UR (asz, asz + 1)); /* { dg-warning \"specified bound \\\\\\[5, 6] exceeds the size 4 of unterminated array\" } */\n+T (&a[1], UR (asz, 6));           /* { dg-warning \"specified bound \\\\\\[5, 6] exceeds the size 4 of unterminated array\" } */\n+T (&a[1], UR (asz - 1, 7));\n+T (&a[v0], UR (asz, 8));          /* { dg-warning \"specified bound \\\\\\[5, 8] may exceed the size of at most 5 of unterminated array\" } */\n+T (&a[v0] + 1, UR (asz, 9));      /* { dg-warning \"specified bound \\\\\\[5, 9] may exceed the size of at most 5 of unterminated array\" } */\n+\n+T (a, UR (asz + 1, asz + 2));     /* { dg-warning \"specified bound \\\\\\[6, 7] exceeds the size 5 \" } */\n+T (&a[0], UR (asz + 1, 10));      /* { dg-warning \"unterminated\" } */\n+T (&a[0] + 1, UR (asz - 1, 11));\n+T (&a[0] + 1, UR (asz + 1, 12));  /* { dg-warning \"unterminated\" } */\n+T (&a[1], UR (asz + 1, 13));      /* { dg-warning \"unterminated\" } */\n+T (&a[v0], UR (asz + 1, 14));     /* { dg-warning \"unterminated\" } */\n+T (&a[v0] + 1, UR (asz + 1, 15)); /* { dg-warning \"unterminated\" } */\n+\n+T (&a[v0] + 1, UR (DIFF_MAX, SIZE_MAX)); /* { dg-warning \"unterminated\" } */\n+\n+T (&a[v0] + 1, UR (DIFF_MAX + (size_t)1, SIZE_MAX)); /* { dg-warning \"specified bound \\\\\\[\\[0-9\\]+, \\[0-9\\]+] exceeds maximum object size \" } */\n+\n+\n+const char c[4] = \"1234\";\n+\n+void test (int n0)\n+{\n+  char a[] = \"123\";\n+\n+  if (n0 < 4)\n+    n0 = 4;\n+  int n1 = __builtin_strlen (a);\n+\n+  int n = n0 < n1 ? n1 : n0;\n+\n+  sink (strnlen (c + n, n + 1));    /* { dg-warning \"specified bound \\\\\\[5, \\[0-9\\]+] may exceed the size of at most 4 of unterminated array\" } */\n+}"}]}