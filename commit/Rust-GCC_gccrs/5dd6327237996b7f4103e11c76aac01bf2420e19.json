{"sha": "5dd6327237996b7f4103e11c76aac01bf2420e19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRkNjMyNzIzNzk5NmI3ZjQxMDNlMTFjNzZhYWMwMWJmMjQyMGUxOQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-09T07:53:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:53:55Z"}, "message": "[Ada] Expand type of static expressions in GNATprove mode\n\nIn the special mode for GNATprove, expand the type of static expressions\nlike done during compilation, to both get suitable legality checks and\nincrease the precision of the formal analysis.\n\nThere is no impact on compilation.\n\n2019-07-09  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.adb (Expand_Subtype_From_Expr): Still expand the type\n\tof static expressions in GNATprove_Mode.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Remove obsolete\n\tspecial case for GNATprove_Mode.\n\nFrom-SVN: r273273", "tree": {"sha": "75b40868a79ba88a16cdb312f380f4ee0d5f876d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75b40868a79ba88a16cdb312f380f4ee0d5f876d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dd6327237996b7f4103e11c76aac01bf2420e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd6327237996b7f4103e11c76aac01bf2420e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dd6327237996b7f4103e11c76aac01bf2420e19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd6327237996b7f4103e11c76aac01bf2420e19/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a569f21920e9f53489a59be84c44d6345bbbfa6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a569f21920e9f53489a59be84c44d6345bbbfa6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a569f21920e9f53489a59be84c44d6345bbbfa6d"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "8c0708271dfad509e8bb00e42f0dc20e5e0c8306", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd6327237996b7f4103e11c76aac01bf2420e19/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd6327237996b7f4103e11c76aac01bf2420e19/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5dd6327237996b7f4103e11c76aac01bf2420e19", "patch": "@@ -1,3 +1,10 @@\n+2019-07-09  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_util.adb (Expand_Subtype_From_Expr): Still expand the type\n+\tof static expressions in GNATprove_Mode.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Remove obsolete\n+\tspecial case for GNATprove_Mode.\n+\n 2019-07-09  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* doc/gnat_rm/the_gnat_library.rst,"}, {"sha": "6f73ec3bc1fb962350131d16081a095f7fad7777", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd6327237996b7f4103e11c76aac01bf2420e19/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd6327237996b7f4103e11c76aac01bf2420e19/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=5dd6327237996b7f4103e11c76aac01bf2420e19", "patch": "@@ -5067,9 +5067,15 @@ package body Exp_Util is\n       --  may be constants that depend on the bounds of a string literal, both\n       --  standard string types and more generally arrays of characters.\n \n-      --  In GNATprove mode, these extra subtypes are not needed\n-\n-      if GNATprove_Mode then\n+      --  In GNATprove mode, these extra subtypes are not needed, unless Exp is\n+      --  a static expression. In that case, the subtype will be constrained\n+      --  while the original type might be unconstrained, so expanding the type\n+      --  is necessary both for passing legality checks in GNAT and for precise\n+      --  analysis in GNATprove.\n+\n+      if GNATprove_Mode\n+        and then not Is_Static_Expression (Exp)\n+      then\n          return;\n       end if;\n "}, {"sha": "38fab902df8093d3c7d1d25c80d6d5e802c857f7", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd6327237996b7f4103e11c76aac01bf2420e19/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd6327237996b7f4103e11c76aac01bf2420e19/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5dd6327237996b7f4103e11c76aac01bf2420e19", "patch": "@@ -4592,14 +4592,6 @@ package body Sem_Ch3 is\n             elsif Is_Interface (T) then\n                null;\n \n-            --  In GNATprove mode, Expand_Subtype_From_Expr does nothing. Thus,\n-            --  we should prevent the generation of another Itype with the\n-            --  same name as the one already generated, or we end up with\n-            --  two identical types in GNATprove.\n-\n-            elsif GNATprove_Mode then\n-               null;\n-\n             --  If the type is an unchecked union, no subtype can be built from\n             --  the expression. Rewrite declaration as a renaming, which the\n             --  back-end can handle properly. This is a rather unusual case,"}]}