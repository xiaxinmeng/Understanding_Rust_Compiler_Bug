{"sha": "cb1180d547e3b28547134a06ee020163afa59cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxMTgwZDU0N2UzYjI4NTQ3MTM0YTA2ZWUwMjAxNjNhZmE1OWNjMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-13T21:35:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-13T21:35:10Z"}, "message": "Protect some checks of DECL_FUNCTION_CODE\n\nThis patch protects various uses of DECL_FUNCTION_CODE that didn't\nobviously check for BUILT_IN_NORMAL first (either directly or in callers).\nThey could therefore trigger for functions that either aren't built-ins\nor are a different kind of built-in.\n\nAlso, the patch removes a redundant GIMPLE_CALL check from\noptimize_stdarg_builtin, since it gave the impression that the stmt\nwas less well checked than it actually is.\n\n2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR middle-end/91421\n\t* attribs.c (decl_attributes): Check the DECL_BUILT_IN_CLASS\n\tbefore the DECL_FUNCTION_CODE.\n\t* calls.c (maybe_warn_alloc_args_overflow): Use fndecl_built_in_p\n\tto check for a BUILT_IN_ALLOCA call.\n\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Likewise for\n\tBUILT_IN_UNREACHABLE.  Don't check for a FUNCTION_TYPE.\n\t* ipa-devirt.c (possible_polymorphic_call_target_p): Likewise.\n\t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n\t* gimple-ssa-isolate-paths.c (is_addr_local): Check specifically\n\tfor BUILT_IN_NORMAL functions.\n\t* trans-mem.c (expand_block_edges): Use gimple_call_builtin_p to\n\ttest for BUILT_IN_TM_ABORT.\n\t* tree-ssa-ccp.c (optimize_stack_restore): Use fndecl_built_in_p\n\tto check for a BUILT_IN_STACK_RESTORE call.\n\t(optimize_stdarg_builtin): Remove redundant check for GIMPLE_CALL.\n\t* tree-ssa-threadedge.c\n\t(record_temporary_equivalences_from_stmts_at_dest): Check for a\n\tBUILT_IN_NORMAL decl before checking its DECL_FUNCTION_CODE.\n\t* tree-vect-patterns.c (vect_recog_pow_pattern): Use a positive\n\ttest for a BUILT_IN_NORMAL call instead of a negative test for\n\tan internal function call.\n\ngcc/c/\n\tPR middle-end/91421\n\t* c-decl.c (header_for_builtin_fn): Take a FUNCTION_DECL instead\n\tof a built_in_function.\n\t(diagnose_mismatched_decls, implicitly_declare): Update accordingly.\n\nFrom-SVN: r274403", "tree": {"sha": "27381416159b7f256dd96a13ec9d99d1db40c29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27381416159b7f256dd96a13ec9d99d1db40c29d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb1180d547e3b28547134a06ee020163afa59cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1180d547e3b28547134a06ee020163afa59cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1180d547e3b28547134a06ee020163afa59cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1180d547e3b28547134a06ee020163afa59cc3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b1fe8cf6f1dde656c505dde6d27279dff388962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1fe8cf6f1dde656c505dde6d27279dff388962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1fe8cf6f1dde656c505dde6d27279dff388962"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "272d084128486526c573d641fb3a63b76ecabc13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -1,3 +1,28 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* attribs.c (decl_attributes): Check the DECL_BUILT_IN_CLASS\n+\tbefore the DECL_FUNCTION_CODE.\n+\t* calls.c (maybe_warn_alloc_args_overflow): Use fndecl_built_in_p\n+\tto check for a BUILT_IN_ALLOCA call.\n+\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Likewise for\n+\tBUILT_IN_UNREACHABLE.  Don't check for a FUNCTION_TYPE.\n+\t* ipa-devirt.c (possible_polymorphic_call_target_p): Likewise.\n+\t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n+\t* gimple-ssa-isolate-paths.c (is_addr_local): Check specifically\n+\tfor BUILT_IN_NORMAL functions.\n+\t* trans-mem.c (expand_block_edges): Use gimple_call_builtin_p to\n+\ttest for BUILT_IN_TM_ABORT.\n+\t* tree-ssa-ccp.c (optimize_stack_restore): Use fndecl_built_in_p\n+\tto check for a BUILT_IN_STACK_RESTORE call.\n+\t(optimize_stdarg_builtin): Remove redundant check for GIMPLE_CALL.\n+\t* tree-ssa-threadedge.c\n+\t(record_temporary_equivalences_from_stmts_at_dest): Check for a\n+\tBUILT_IN_NORMAL decl before checking its DECL_FUNCTION_CODE.\n+\t* tree-vect-patterns.c (vect_recog_pow_pattern): Use a positive\n+\ttest for a BUILT_IN_NORMAL call instead of a negative test for\n+\tan internal function call.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree.h (build_vector_a_then_b): Declare."}, {"sha": "b89be5834de7e3cbb8810c7f980da8150e8a1708", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -691,6 +691,7 @@ decl_attributes (tree *node, tree attributes, int flags,\n \n \t  if (!built_in\n \t      || !DECL_P (*anode)\n+\t      || DECL_BUILT_IN_CLASS (*anode) != BUILT_IN_NORMAL\n \t      || (DECL_FUNCTION_CODE (*anode) != BUILT_IN_UNREACHABLE\n \t\t  && (DECL_FUNCTION_CODE (*anode)\n \t\t      != BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE)))"}, {"sha": "ada2e4b7200f8c2e754a9af0045d7cfb47edc145", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -1,3 +1,10 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* c-decl.c (header_for_builtin_fn): Take a FUNCTION_DECL instead\n+\tof a built_in_function.\n+\t(diagnose_mismatched_decls, implicitly_declare): Update accordingly.\n+\n 2019-08-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_name): Parse device_type."}, {"sha": "18a97db198daf96391723e2ebbbfa1ea732072ca", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -605,7 +605,7 @@ static tree grokparms (struct c_arg_info *, bool);\n static void layout_array_type (tree);\n static void warn_defaults_to (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n-static const char *header_for_builtin_fn (enum built_in_function);\n+static const char *header_for_builtin_fn (tree);\n \f\n /* T is a statement.  Add it to the statement-tree.  This is the\n    C/ObjC version--C++ has a slightly different version of this\n@@ -1953,7 +1953,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (!comptypes (oldtype, newtype))\n     {\n       if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t  && fndecl_built_in_p (olddecl) && !C_DECL_DECLARED_BUILTIN (olddecl))\n+\t  && fndecl_built_in_p (olddecl, BUILT_IN_NORMAL)\n+\t  && !C_DECL_DECLARED_BUILTIN (olddecl))\n \t{\n \t  /* Accept \"harmless\" mismatches in function types such\n \t     as missing qualifiers or pointer vs same size integer\n@@ -1975,8 +1976,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t      /* If types don't match for a built-in, throw away the\n \t\t built-in.  No point in calling locate_old_decl here, it\n \t\t won't print anything.  */\n-\t      const char *header\n-\t\t= header_for_builtin_fn (DECL_FUNCTION_CODE (olddecl));\n+\t      const char *header = header_for_builtin_fn (olddecl);\n \t      location_t loc = DECL_SOURCE_LOCATION (newdecl);\n \t      if (warning_at (loc, OPT_Wbuiltin_declaration_mismatch,\n \t\t\t      \"conflicting types for built-in function %q+D; \"\n@@ -3339,13 +3339,17 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n     hint.suppress ();\n }\n \n-/* This function represents mapping of a function code FCODE\n-   to its respective header.  */\n+/* Return the name of the header file that declares built-in function\n+   FNDECL, or null if either we don't know or don't expect to see an\n+   explicit declaration.  */\n \n static const char *\n-header_for_builtin_fn (enum built_in_function fcode)\n+header_for_builtin_fn (tree fndecl)\n {\n-  switch (fcode)\n+  if (DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+    return NULL;\n+\n+  switch (DECL_FUNCTION_CODE (fndecl))\n     {\n     CASE_FLT_FN (BUILT_IN_ACOS):\n     CASE_FLT_FN (BUILT_IN_ACOSH):\n@@ -3595,8 +3599,7 @@ implicitly_declare (location_t loc, tree functionid)\n \t\t\t\t\t    \"declaration of built-in \"\n \t\t\t\t\t    \"function %qD\", decl);\n \t\t  /* See if we can hint which header to include.  */\n-\t\t  const char *header\n-\t\t    = header_for_builtin_fn (DECL_FUNCTION_CODE (decl));\n+\t\t  const char *header = header_for_builtin_fn (decl);\n \t\t  if (header != NULL && warned)\n \t\t    {\n \t\t      rich_location richloc (line_table, loc);"}, {"sha": "54e30e6cb0dc304b0e4e584dab0b250fb5063802", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -1350,7 +1350,6 @@ maybe_warn_alloc_args_overflow (tree fn, tree exp, tree args[2], int idx[2])\n   location_t loc = EXPR_LOCATION (exp);\n \n   tree fntype = fn ? TREE_TYPE (fn) : TREE_TYPE (TREE_TYPE (exp));\n-  built_in_function fncode = fn ? DECL_FUNCTION_CODE (fn) : BUILT_IN_NONE;\n   bool warned = false;\n \n   /* Validate each argument individually.  */\n@@ -1376,11 +1375,10 @@ maybe_warn_alloc_args_overflow (tree fn, tree exp, tree args[2], int idx[2])\n \t\t friends.\n \t\t Also avoid issuing the warning for calls to function named\n \t\t \"alloca\".  */\n-\t      if ((fncode == BUILT_IN_ALLOCA\n-\t\t   && IDENTIFIER_LENGTH (DECL_NAME (fn)) != 6)\n-\t\t  || (fncode != BUILT_IN_ALLOCA\n-\t\t      && !lookup_attribute (\"returns_nonnull\",\n-\t\t\t\t\t    TYPE_ATTRIBUTES (fntype))))\n+\t      if (fn && fndecl_built_in_p (fn, BUILT_IN_ALLOCA)\n+\t\t  ? IDENTIFIER_LENGTH (DECL_NAME (fn)) != 6\n+\t\t  : !lookup_attribute (\"returns_nonnull\",\n+\t\t\t\t       TYPE_ATTRIBUTES (fntype)))\n \t\twarned = warning_at (loc, OPT_Walloc_zero,\n \t\t\t\t     \"%Kargument %i value is zero\",\n \t\t\t\t     exp, idx[i] + 1);"}, {"sha": "aca5304b10aad66a27cb5500666ea892c500e1b6", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -502,7 +502,7 @@ is_addr_local (gimple *return_stmt, tree exp, locmap_t *plocmap,\n \t}\n \n       if (code == GIMPLE_CALL\n-\t  && gimple_call_builtin_p (def_stmt))\n+\t  && gimple_call_builtin_p (def_stmt, BUILT_IN_NORMAL))\n \t{\n \t  /* Handle alloca and friends that return pointers to automatic\n \t     storage.  */"}, {"sha": "34e68544fe6fc5d445f03d34ce23fbe6770532da", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -2436,8 +2436,7 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n \t  if (can_refer)\n \t    {\n \t      if (!target\n-\t\t  || (TREE_CODE (TREE_TYPE (target)) == FUNCTION_TYPE\n-\t\t      && DECL_FUNCTION_CODE (target) == BUILT_IN_UNREACHABLE)\n+\t\t  || fndecl_built_in_p (target, BUILT_IN_UNREACHABLE)\n \t\t  || !possible_polymorphic_call_target_p\n \t\t       (ie, cgraph_node::get (target)))\n \t\t{"}, {"sha": "e5028bc6150f59e159a32af2323f34fc7e3ed36a", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -3426,12 +3426,10 @@ possible_polymorphic_call_target_p (tree otr_type,\n {\n   vec <cgraph_node *> targets;\n   unsigned int i;\n-  enum built_in_function fcode;\n   bool final;\n \n-  if (TREE_CODE (TREE_TYPE (n->decl)) == FUNCTION_TYPE\n-      && ((fcode = DECL_FUNCTION_CODE (n->decl)) == BUILT_IN_UNREACHABLE\n-          || fcode == BUILT_IN_TRAP))\n+  if (fndecl_built_in_p (n->decl, BUILT_IN_UNREACHABLE)\n+      || fndecl_built_in_p (n->decl, BUILT_IN_TRAP))\n     return true;\n \n   if (is_cxa_pure_virtual_p (n->decl))"}, {"sha": "1a0e12e6c0c5afdd5f084ed70458077399d48f70", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -3331,8 +3331,7 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n \t  if (can_refer)\n \t    {\n \t      if (!t\n-\t\t  || (TREE_CODE (TREE_TYPE (t)) == FUNCTION_TYPE\n-\t\t      && DECL_FUNCTION_CODE (t) == BUILT_IN_UNREACHABLE)\n+\t\t  || fndecl_built_in_p (t, BUILT_IN_UNREACHABLE)\n \t\t  || !possible_polymorphic_call_target_p\n \t\t       (ie, cgraph_node::get (t)))\n \t\t{"}, {"sha": "c39d6d0235ba7f11b6a932eff9e2eefa357b5f09", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -3237,8 +3237,7 @@ expand_block_edges (struct tm_region *const region, basic_block bb)\n \t  || (gimple_call_flags (call_stmt) & ECF_TM_BUILTIN) == 0)\n \tcontinue;\n \n-      if (DECL_FUNCTION_CODE (gimple_call_fndecl (call_stmt))\n-\t  == BUILT_IN_TM_ABORT)\n+      if (gimple_call_builtin_p (call_stmt, BUILT_IN_TM_ABORT))\n \t{\n \t  // If we have a ``_transaction_cancel [[outer]]'', there is only\n \t  // one abnormal edge: to the transaction marked OUTER."}, {"sha": "458b2184d3f4191b5fa0a925d6c639b4b1b7479c", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -2598,7 +2598,7 @@ optimize_stack_restore (gimple_stmt_iterator i)\n \t  || ALLOCA_FUNCTION_CODE_P (DECL_FUNCTION_CODE (callee)))\n \treturn NULL_TREE;\n \n-      if (DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE)\n+      if (fndecl_built_in_p (callee, BUILT_IN_STACK_RESTORE))\n \tgoto second_stack_restore;\n     }\n \n@@ -2657,9 +2657,6 @@ optimize_stdarg_builtin (gimple *call)\n   bool va_list_simple_ptr;\n   location_t loc = gimple_location (call);\n \n-  if (gimple_code (call) != GIMPLE_CALL)\n-    return NULL_TREE;\n-\n   callee = gimple_call_fndecl (call);\n \n   cfun_va_list = targetm.fn_abi_va_list (callee);"}, {"sha": "be6a27425798b763911dab77a95efb6268ef1bd0", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -331,6 +331,7 @@ record_temporary_equivalences_from_stmts_at_dest (edge e,\n \t{\n \t  tree fndecl = gimple_call_fndecl (stmt);\n \t  if (fndecl\n+\t      && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n \t      && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_OBJECT_SIZE\n \t\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CONSTANT_P))\n \t    continue;"}, {"sha": "ccb2e1edecda09db786c0d98ccd25f5be107c7e4", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1180d547e3b28547134a06ee020163afa59cc3/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=cb1180d547e3b28547134a06ee020163afa59cc3", "patch": "@@ -1297,7 +1297,7 @@ vect_recog_pow_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n     {\n       if (flag_unsafe_math_optimizations\n \t  && TREE_CODE (base) == REAL_CST\n-\t  && !gimple_call_internal_p (last_stmt))\n+\t  && gimple_call_builtin_p (last_stmt, BUILT_IN_NORMAL))\n \t{\n \t  combined_fn log_cfn;\n \t  built_in_function exp_bfn;"}]}