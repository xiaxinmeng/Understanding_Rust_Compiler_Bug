{"sha": "5ddaee94e247a189a8a17af7dce8d45e0c30adee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRkYWVlOTRlMjQ3YTE4OWE4YTE3YWY3ZGNlOGQ0NWUwYzMwYWRlZQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-07-07T03:09:03Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-07-07T03:09:03Z"}, "message": "rs6000: Make the ctr* patterns allow ints in vector regs (PR71763)\n\nSimilar to PR70098, which is about integers in floating point registers,\nwe can have the completely analogous problem with vector registers as well\nnow that we allow integers in vector registers.  So, this patch solves it\nin the same way.  This only works for targets with direct move.\n\nTo recap: register allocation can decide to put an integer mode value in\na floating point or vector register.  If that register is used in a bd*z\ninstruction, which is a jump instruction, reload can not do an output\nreload on it (it does not do output reloads on any jump insns), so the\nfloat or vector register will remain, and we have to allow it here or\nrecog will ICE.  Later on we will split this to valid instructions,\nincluding a move from that fp/vec register to an int register; it is this\nmove that will still fail (PR70098) if we do not have direct move enabled.\n\n\n\tPR target/70098\n\tPR target/71763\n\t* config/rs6000/rs6000.md (*ctr<mode>_internal1, *ctr<mode>_internal2,\n\t*ctr<mode>_internal5, *ctr<mode>_internal6): Add *wi to the output\n\tconstraint.\n\ngcc/testsuite/\n\tPR target/70098\n\tPR target/71763\n\t* gcc.target/powerpc/pr71763.c: New file.\n\nFrom-SVN: r238076", "tree": {"sha": "2de57a6ecd444e6768a4028bf841dbcf613dfea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2de57a6ecd444e6768a4028bf841dbcf613dfea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ddaee94e247a189a8a17af7dce8d45e0c30adee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ddaee94e247a189a8a17af7dce8d45e0c30adee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ddaee94e247a189a8a17af7dce8d45e0c30adee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ddaee94e247a189a8a17af7dce8d45e0c30adee/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "242fab3667f3c694204509a2d4c586954a858b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242fab3667f3c694204509a2d4c586954a858b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/242fab3667f3c694204509a2d4c586954a858b93"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "cbb4dcf49365a16d03d96a39ac88c65a58ed0d3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ddaee94e247a189a8a17af7dce8d45e0c30adee", "patch": "@@ -1,3 +1,11 @@\n+2016-07-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/70098\n+\tPR target/71763\n+\t* config/rs6000/rs6000.md (*ctr<mode>_internal1, *ctr<mode>_internal2,\n+\t*ctr<mode>_internal5, *ctr<mode>_internal6): Add *wi to the output\n+\tconstraint.\n+\n 2016-07-06  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* var-tracking.c (struct adjust_mem_data): Make side_effects a vector."}, {"sha": "7d9c6600f2aa7fa8f0b0c7a79a5a817ef09a0fae", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5ddaee94e247a189a8a17af7dce8d45e0c30adee", "patch": "@@ -12202,7 +12202,7 @@\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -12226,7 +12226,7 @@\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -12252,7 +12252,7 @@\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -12276,7 +12276,7 @@\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))"}, {"sha": "ad8cf4a8fa32c7c62b8238e3f6ccc78c39c35fc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ddaee94e247a189a8a17af7dce8d45e0c30adee", "patch": "@@ -1,3 +1,9 @@\n+2016-07-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/70098\n+\tPR target/71763\n+\t* gcc.target/powerpc/pr71763.c: New file.\n+\n 2016-07-06  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/71518"}, {"sha": "7910a90b9880e9e8ea24420f1f68ae3ab8c3dff7", "filename": "gcc/testsuite/gcc.target/powerpc/pr71763.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71763.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ddaee94e247a189a8a17af7dce8d45e0c30adee/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71763.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71763.c?ref=5ddaee94e247a189a8a17af7dce8d45e0c30adee", "patch": "@@ -0,0 +1,27 @@\n+// PR target/71763\n+// { dg-do compile }\n+// { dg-options \"-O1 -mvsx\" }\n+// { dg-xfail-if \"PR70098\" { lp64 && powerpc64_no_dm } }\n+// { dg-prune-output \".*internal compiler error.*\" }\n+\n+int a, b;\n+float c;\n+\n+void fn2(void);\n+\n+void fn1(void)\n+{\n+        long d;\n+\n+        for (d = 3; d; d--) {\n+                for (a = 0; a <= 1; a++) {\n+                        b &= 1;\n+                        if (b) {\n+                                for (;;) {\n+                                        fn2();\n+                                        c = d;\n+                                }\n+                        }\n+                }\n+        }\n+}"}]}