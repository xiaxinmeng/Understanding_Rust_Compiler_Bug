{"sha": "052ef81d2dbef6727f9684733cfbb70f7adcf066", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyZWY4MWQyZGJlZjY3MjdmOTY4NDczM2NmYmI3MGY3YWRjZjA2Ng==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2017-02-10T13:18:16Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2017-02-10T13:18:16Z"}, "message": "[ARM,AArch64] more poly64 intrinsics and tests\n\n2017-02-06  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/aarch64/arm_neon.h (vtst_p8): Rewrite without asm.\n\t(vtst_p16): Likewise.\n\t(vtstq_p8): Likewise.\n\t(vtstq_p16): Likewise.\n\t(vtst_p64): New.\n\t(vtstq_p64): Likewise.\n\t* config/arm/arm_neon.h (vgetq_lane_p64): New.\n\t(vset_lane_p64): New.\n\t(vsetq_lane_p64): New.\n\n2017-02-06  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c\n\t(vget_lane_expected, vset_lane_expected, vtst_expected_poly64x1):\n\tNew.\n\t(vmov_n_expected0, vmov_n_expected1, vmov_n_expected2)\n\t(expected_vld_st2_0, expected_vld_st2_1, expected_vld_st3_0)\n\t(expected_vld_st3_1, expected_vld_st3_2, expected_vld_st4_0)\n\t(expected_vld_st4_1, expected_vld_st4_2, expected_vld_st4_3)\n\t(vtst_expected_poly64x2): Move to aarch64-only section.\n\t(vget_lane_p64, vgetq_lane_p64, vset_lane_p64, vsetq_lane_p64)\n\t(vtst_p64, vtstq_p64): New tests.\n\nFrom-SVN: r245328", "tree": {"sha": "7ffc88a2f6899035ca19a30bbe57754aae6ab45e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ffc88a2f6899035ca19a30bbe57754aae6ab45e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/052ef81d2dbef6727f9684733cfbb70f7adcf066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052ef81d2dbef6727f9684733cfbb70f7adcf066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052ef81d2dbef6727f9684733cfbb70f7adcf066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052ef81d2dbef6727f9684733cfbb70f7adcf066/comments", "author": null, "committer": null, "parents": [{"sha": "a7c8ed0c361b549da67f9b83f91725fe1c84dbdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c8ed0c361b549da67f9b83f91725fe1c84dbdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c8ed0c361b549da67f9b83f91725fe1c84dbdb"}], "stats": {"total": 268, "additions": 199, "deletions": 69}, "files": [{"sha": "6bdfddf1fb557b4c637834432227f8eeebf8f8b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=052ef81d2dbef6727f9684733cfbb70f7adcf066", "patch": "@@ -1,3 +1,15 @@\n+2017-02-10  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/aarch64/arm_neon.h (vtst_p8): Rewrite without asm.\n+\t(vtst_p16): Likewise.\n+\t(vtstq_p8): Likewise.\n+\t(vtstq_p16): Likewise.\n+\t(vtst_p64): New.\n+\t(vtstq_p64): Likewise.\n+\t* config/arm/arm_neon.h (vgetq_lane_p64): New.\n+\t(vset_lane_p64): New.\n+\t(vsetq_lane_p64): New.\n+\n 2017-02-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79411"}, {"sha": "0753da32f59f1c56580f5d4b04a8d8275cf3c0d3", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=052ef81d2dbef6727f9684733cfbb70f7adcf066", "patch": "@@ -10862,48 +10862,47 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtst_p8 (poly8x8_t a, poly8x8_t b)\n {\n-  uint8x8_t result;\n-  __asm__ (\"cmtst %0.8b, %1.8b, %2.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n+  return (uint8x8_t) ((((uint8x8_t) a) & ((uint8x8_t) b))\n+\t\t       != 0);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtst_p16 (poly16x4_t a, poly16x4_t b)\n {\n-  uint16x4_t result;\n-  __asm__ (\"cmtst %0.4h, %1.4h, %2.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n+  return (uint16x4_t) ((((uint16x4_t) a) & ((uint16x4_t) b))\n+\t\t       != 0);\n+}\n+\n+__extension__ extern __inline uint64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vtst_p64 (poly64x1_t a, poly64x1_t b)\n+{\n+  return (uint64x1_t) ((a & b) != __AARCH64_INT64_C (0));\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtstq_p8 (poly8x16_t a, poly8x16_t b)\n {\n-  uint8x16_t result;\n-  __asm__ (\"cmtst %0.16b, %1.16b, %2.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n+  return (uint8x16_t) ((((uint8x16_t) a) & ((uint8x16_t) b))\n+\t\t       != 0);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtstq_p16 (poly16x8_t a, poly16x8_t b)\n {\n-  uint16x8_t result;\n-  __asm__ (\"cmtst %0.8h, %1.8h, %2.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n+  return (uint16x8_t) ((((uint16x8_t) a) & ((uint16x8_t) b))\n+\t\t       != 0);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vtstq_p64 (poly64x2_t a, poly64x2_t b)\n+{\n+  return (uint64x2_t) ((((uint64x2_t) a) & ((uint64x2_t) b))\n+\t\t       != __AARCH64_INT64_C (0));\n }\n \n /* End of temporary inline asm implementations.  */"}, {"sha": "f81d77ef741f829c19395e82cc0df11652b302fe", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=052ef81d2dbef6727f9684733cfbb70f7adcf066", "patch": "@@ -6309,6 +6309,16 @@ vgetq_lane_s64 (int64x2_t __a, const int __b)\n   return (int64_t)__builtin_neon_vget_lanev2di (__a, __b);\n }\n \n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n+__extension__ extern __inline poly64_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vgetq_lane_p64 (poly64x2_t __a, const int __b)\n+{\n+  return (poly64_t)__builtin_neon_vget_lanev2di ((int64x2_t) __a, __b);\n+}\n+\n+#pragma GCC pop_options\n __extension__ extern __inline uint64_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vgetq_lane_u64 (uint64x2_t __a, const int __b)\n@@ -6405,6 +6415,16 @@ vset_lane_u64 (uint64_t __a, uint64x1_t __b, const int __c)\n   return (uint64x1_t)__builtin_neon_vset_lanedi ((__builtin_neon_di) __a, (int64x1_t) __b, __c);\n }\n \n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n+__extension__ extern __inline poly64x1_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vset_lane_p64 (poly64_t __a, poly64x1_t __b, const int __c)\n+{\n+  return (poly64x1_t)__builtin_neon_vset_lanedi ((__builtin_neon_di) __a, (int64x1_t) __b, __c);\n+}\n+\n+#pragma GCC pop_options\n __extension__ extern __inline int8x16_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vsetq_lane_s8 (int8_t __a, int8x16_t __b, const int __c)\n@@ -6496,6 +6516,13 @@ vsetq_lane_u64 (uint64_t __a, uint64x2_t __b, const int __c)\n \n #pragma GCC push_options\n #pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n+__extension__ extern __inline poly64x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vsetq_lane_p64 (poly64_t __a, poly64x2_t __b, const int __c)\n+{\n+  return (poly64x2_t)__builtin_neon_vset_lanev2di ((__builtin_neon_di) __a, (int64x2_t) __b, __c);\n+}\n+\n __extension__ extern __inline poly64x1_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vcreate_p64 (uint64_t __a)"}, {"sha": "a1cee1b28126a360fb24e2bf9bf6a2e07088e084", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=052ef81d2dbef6727f9684733cfbb70f7adcf066", "patch": "@@ -1,3 +1,16 @@\n+2017-02-10  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c\n+\t(vget_lane_expected, vset_lane_expected, vtst_expected_poly64x1):\n+\tNew.\n+\t(vmov_n_expected0, vmov_n_expected1, vmov_n_expected2)\n+\t(expected_vld_st2_0, expected_vld_st2_1, expected_vld_st3_0)\n+\t(expected_vld_st3_1, expected_vld_st3_2, expected_vld_st4_0)\n+\t(expected_vld_st4_1, expected_vld_st4_2, expected_vld_st4_3)\n+\t(vtst_expected_poly64x2): Move to aarch64-only section.\n+\t(vget_lane_p64, vgetq_lane_p64, vset_lane_p64, vsetq_lane_p64)\n+\t(vtst_p64, vtstq_p64): New tests.\n+\n 2017-02-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/71737"}, {"sha": "a3210a94b1dcd00ea8b9f687a7805386ef5c0b08", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c", "status": "modified", "additions": 124, "deletions": 45, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052ef81d2dbef6727f9684733cfbb70f7adcf066/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c?ref=052ef81d2dbef6727f9684733cfbb70f7adcf066", "patch": "@@ -39,17 +39,6 @@ VECT_VAR_DECL(vdup_n_expected2,poly,64,1) [] = { 0xfffffffffffffff2 };\n VECT_VAR_DECL(vdup_n_expected2,poly,64,2) [] = { 0xfffffffffffffff2,\n \t\t\t\t\t\t 0xfffffffffffffff2 };\n \n-/* Expected results: vmov_n.  */\n-VECT_VAR_DECL(vmov_n_expected0,poly,64,1) [] = { 0xfffffffffffffff0 };\n-VECT_VAR_DECL(vmov_n_expected0,poly,64,2) [] = { 0xfffffffffffffff0,\n-\t\t\t\t\t\t 0xfffffffffffffff0 };\n-VECT_VAR_DECL(vmov_n_expected1,poly,64,1) [] = { 0xfffffffffffffff1 };\n-VECT_VAR_DECL(vmov_n_expected1,poly,64,2) [] = { 0xfffffffffffffff1,\n-\t\t\t\t\t\t 0xfffffffffffffff1 };\n-VECT_VAR_DECL(vmov_n_expected2,poly,64,1) [] = { 0xfffffffffffffff2 };\n-VECT_VAR_DECL(vmov_n_expected2,poly,64,2) [] = { 0xfffffffffffffff2,\n-\t\t\t\t\t\t 0xfffffffffffffff2 };\n-\n /* Expected results: vext.  */\n VECT_VAR_DECL(vext_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(vext_expected,poly,64,2) [] = { 0xfffffffffffffff1, 0x88 };\n@@ -124,6 +113,29 @@ VECT_VAR_DECL(vst1_lane_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(vst1_lane_expected,poly,64,2) [] = { 0xfffffffffffffff0,\n \t\t\t\t\t\t   0x3333333333333333 };\n \n+/* Expected results: vget_lane.  */\n+VECT_VAR_DECL(vget_lane_expected,poly,64,1) = 0xfffffffffffffff0;\n+VECT_VAR_DECL(vget_lane_expected,poly,64,2) = 0xfffffffffffffff0;\n+\n+/* Expected results: vset_lane.  */\n+VECT_VAR_DECL(vset_lane_expected,poly,64,1) [] = { 0x88 };\n+VECT_VAR_DECL(vset_lane_expected,poly,64,2) [] = { 0xfffffffffffffff0, 0x11 };\n+\n+/* Expected results: vtst.  */\n+VECT_VAR_DECL(vtst_expected,uint,64,1) [] = { 0x0 };\n+\n+#ifdef __aarch64__\n+/* Expected results: vmov_n.  */\n+VECT_VAR_DECL(vmov_n_expected0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vmov_n_expected0,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vmov_n_expected1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vmov_n_expected1,poly,64,2) [] = { 0xfffffffffffffff1,\n+\t\t\t\t\t\t 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vmov_n_expected2,poly,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(vmov_n_expected2,poly,64,2) [] = { 0xfffffffffffffff2,\n+\t\t\t\t\t\t 0xfffffffffffffff2 };\n+\n /* Expected results: vldX_lane.  */\n VECT_VAR_DECL(expected_vld_st2_0,poly,64,1) [] = { 0xfffffffffffffff0 };\n VECT_VAR_DECL(expected_vld_st2_0,poly,64,2) [] = { 0xfffffffffffffff0,\n@@ -153,9 +165,9 @@ VECT_VAR_DECL(expected_vld_st4_3,poly,64,1) [] = { 0xfffffffffffffff3 };\n VECT_VAR_DECL(expected_vld_st4_3,poly,64,2) [] = { 0xaaaaaaaaaaaaaaaa,\n \t\t\t\t\t\t   0xaaaaaaaaaaaaaaaa };\n \n-/* Expected results: vget_lane.  */\n-VECT_VAR_DECL(vget_lane_expected,poly,64,1) = 0xfffffffffffffff0;\n-VECT_VAR_DECL(vget_lane_expected,poly,64,2) = 0xfffffffffffffff0;\n+/* Expected results: vtst.  */\n+VECT_VAR_DECL(vtst_expected,uint,64,2) [] = { 0x0, 0xffffffffffffffff };\n+#endif\n \n int main (void)\n {\n@@ -727,7 +739,105 @@ int main (void)\n   CHECK_POLY(TEST_MSG, poly, 64, 1, PRIx64, vst1_lane_expected, \"\");\n   CHECK_POLY(TEST_MSG, poly, 64, 2, PRIx64, vst1_lane_expected, \"\");\n \n+  /* vget_lane_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VGET_LANE/VGETQ_LANE\"\n+\n+#define TEST_VGET_LANE(Q, T1, T2, W, N, L)\t\t\t\t   \\\n+  VECT_VAR(vget_lane_vector, T1, W, N) = vget##Q##_lane_##T2##W(VECT_VAR(vget_lane_vector1, T1, W, N), L); \\\n+  if (VECT_VAR(vget_lane_vector, T1, W, N) != VECT_VAR(vget_lane_expected, T1, W, N)) {\t\t\\\n+    fprintf(stderr,\t\t\t\t\t\t\t   \\\n+\t    \"ERROR in %s (%s line %d in result '%s') at type %s \"\t   \\\n+\t    \"got 0x%\" PRIx##W \" != 0x%\" PRIx##W \"\\n\",\t\t\t   \\\n+\t    TEST_MSG, __FILE__, __LINE__,\t\t\t\t   \\\n+\t    STR(VECT_VAR(vget_lane_expected, T1, W, N)),\t\t   \\\n+\t    STR(VECT_NAME(T1, W, N)),\t\t\t\t\t   \\\n+\t    VECT_VAR(vget_lane_vector, T1, W, N),\t\t\t   \\\n+\t    VECT_VAR(vget_lane_expected, T1, W, N));\t\t\t   \\\n+    abort ();\t\t\t\t\t\t\t\t   \\\n+  }\n+\n+  /* Initialize input values.  */\n+  DECL_VARIABLE(vget_lane_vector1, poly, 64, 1);\n+  DECL_VARIABLE(vget_lane_vector1, poly, 64, 2);\n+\n+  VLOAD(vget_lane_vector1, buffer,  , poly, p, 64, 1);\n+  VLOAD(vget_lane_vector1, buffer, q, poly, p, 64, 2);\n+\n+  VECT_VAR_DECL(vget_lane_vector, poly, 64, 1);\n+  VECT_VAR_DECL(vget_lane_vector, poly, 64, 2);\n+\n+  TEST_VGET_LANE( , poly, p, 64, 1, 0);\n+  TEST_VGET_LANE(q, poly, p, 64, 2, 0);\n+\n+\n+  /* vset_lane_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VSET_LANE/VSETQ_LANE\"\n+\n+#define TEST_VSET_LANE(Q, T1, T2, W, N, V, L)\t\t\t\t\\\n+  VECT_VAR(vset_lane_vector, T1, W, N) =\t\t\t\t\t\t\\\n+    vset##Q##_lane_##T2##W(V,\t\t\t\t\t\t\\\n+\t\t\t   VECT_VAR(vset_lane_vector, T1, W, N),\t\t\t\\\n+\t\t\t   L);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vset_lane_vector, T1, W, N))\n+\n+  /* Initialize input values.  */\n+  DECL_VARIABLE(vset_lane_vector, poly, 64, 1);\n+  DECL_VARIABLE(vset_lane_vector, poly, 64, 2);\n+\n+  CLEAN(result, uint, 64, 1);\n+  CLEAN(result, uint, 64, 2);\n+\n+  VLOAD(vset_lane_vector, buffer, , poly, p, 64, 1);\n+  VLOAD(vset_lane_vector, buffer, q, poly, p, 64, 2);\n+\n+  /* Choose value and lane arbitrarily.  */\n+  TEST_VSET_LANE(, poly, p, 64, 1, 0x88, 0);\n+  TEST_VSET_LANE(q, poly, p, 64, 2, 0x11, 1);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vset_lane_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vset_lane_expected, \"\");\n+\n+\n+  /* vtst_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VTST\"\n+  \n+#define TEST_VTST1(INSN, Q, T1, T2, W, N)\t\t\t\\\n+  VECT_VAR(vtst_vector_res, uint, W, N) =\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vtst_vector, T1, W, N),\t\t\\\n+\t\t      VECT_VAR(vtst_vector2, T1, W, N));\t\\\n+    vst1##Q##_u##W(VECT_VAR(result, uint, W, N),\t\t\\\n+\t\t   VECT_VAR(vtst_vector_res, uint, W, N))\n+\n+#define TEST_VTST(INSN, Q, T1, T2, W, N)\t\\\n+  TEST_VTST1(INSN, Q, T1, T2, W, N)\t\t\\\n+\n+  /* Initialize input values.  */\n+  DECL_VARIABLE(vtst_vector, poly, 64, 1);\n+  DECL_VARIABLE(vtst_vector2, poly, 64, 1);\n+  DECL_VARIABLE(vtst_vector_res, uint, 64, 1);\n+\n+  CLEAN(result, uint, 64, 1);\n+\n+  VLOAD(vtst_vector, buffer,  , poly, p, 64, 1);\n+  VDUP(vtst_vector2, , poly, p, 64, 1, 5);\n+\n+  TEST_VTST(vtst, , poly, p, 64, 1);\n+\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, vtst_expected, \"\");\n+\n+  /* vtstq_p64 is supported by aarch64 only.  */\n #ifdef __aarch64__\n+  DECL_VARIABLE(vtst_vector, poly, 64, 2);\n+  DECL_VARIABLE(vtst_vector2, poly, 64, 2);\n+  DECL_VARIABLE(vtst_vector_res, uint, 64, 2);\n+  CLEAN(result, uint, 64, 2);\n+  VLOAD(vtst_vector, buffer, q, poly, p, 64, 2);\n+  VDUP(vtst_vector2, q, poly, p, 64, 2, 5);\n+  TEST_VTST(vtst, q, poly, p, 64, 2);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, vtst_expected, \"\");\n \n   /* vmov_n_p64 tests.  */\n #undef TEST_MSG\n@@ -767,37 +877,6 @@ int main (void)\n     }\n   }\n \n-  /* vget_lane_p64 tests.  */\n-#undef TEST_MSG\n-#define TEST_MSG \"VGET_LANE/VGETQ_LANE\"\n-\n-#define TEST_VGET_LANE(Q, T1, T2, W, N, L)\t\t\t\t   \\\n-  VECT_VAR(vget_lane_vector, T1, W, N) = vget##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N), L); \\\n-  if (VECT_VAR(vget_lane_vector, T1, W, N) != VECT_VAR(vget_lane_expected, T1, W, N)) {\t\t\\\n-    fprintf(stderr,\t\t\t\t\t\t\t   \\\n-\t    \"ERROR in %s (%s line %d in result '%s') at type %s \"\t   \\\n-\t    \"got 0x%\" PRIx##W \" != 0x%\" PRIx##W \"\\n\",\t\t\t   \\\n-\t    TEST_MSG, __FILE__, __LINE__,\t\t\t\t   \\\n-\t    STR(VECT_VAR(vget_lane_expected, T1, W, N)),\t\t   \\\n-\t    STR(VECT_NAME(T1, W, N)),\t\t\t\t\t   \\\n-\t    (uint##W##_t)VECT_VAR(vget_lane_vector, T1, W, N),\t\t   \\\n-\t    (uint##W##_t)VECT_VAR(vget_lane_expected, T1, W, N));\t   \\\n-    abort ();\t\t\t\t\t\t\t\t   \\\n-  }\n-\n-  /* Initialize input values.  */\n-  DECL_VARIABLE(vector, poly, 64, 1);\n-  DECL_VARIABLE(vector, poly, 64, 2);\n-\n-  VLOAD(vector, buffer,  , poly, p, 64, 1);\n-  VLOAD(vector, buffer, q, poly, p, 64, 2);\n-\n-  VECT_VAR_DECL(vget_lane_vector, poly, 64, 1);\n-  VECT_VAR_DECL(vget_lane_vector, poly, 64, 2);\n-\n-  TEST_VGET_LANE( , poly, p, 64, 1, 0);\n-  TEST_VGET_LANE(q, poly, p, 64, 2, 0);\n-\n   /* vldx_lane_p64 tests.  */\n #undef TEST_MSG\n #define TEST_MSG \"VLDX_LANE/VLDXQ_LANE\""}]}