{"sha": "56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmZDY1YzdkOWEzZmQ5YWI4MGE2MjdlYjZjYWYyNDQ4MzgwMWZmNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-02-11T18:58:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-02-11T18:58:05Z"}, "message": "re PR target/29487 (Shared libstdc++ fails to link)\n\n\tPR target/29487\n\t* tree.h (DECL_REPLACEABLE_P): New macro.\n\t* except.c (set_nothrow_function_flags): Likewise.\n\n\tPR target/29487\n\t* decl.c (finish_function): Use DECL_REPLACEABLE.\n\t* tree.c (cp_cannot_inline_tree_fn): Likewise.\n\n\tPR c++/29487\n\t* g++.dg/eh/weak1-C: New test.\n\t* g++.dg/eh/weak1-a.cc: Likewise.\n\t* g++.dg/eh/comdat1.C: Likewise.\n\nFrom-SVN: r121819", "tree": {"sha": "37425a6a59c6e2da923d37b739cbb1c65f2cfbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37425a6a59c6e2da923d37b739cbb1c65f2cfbd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/comments", "author": null, "committer": null, "parents": [{"sha": "f57d17f1fc2f31047644ed6f18f1087f65f8f88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57d17f1fc2f31047644ed6f18f1087f65f8f88b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57d17f1fc2f31047644ed6f18f1087f65f8f88b"}], "stats": {"total": 124, "additions": 115, "deletions": 9}, "files": [{"sha": "ce0f2ae2e03e1c1e2b503090eb52693daeceaca5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -1,3 +1,9 @@\n+2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR target/29487\n+\t* tree.h (DECL_REPLACEABLE_P): New macro.\n+\t* except.c (set_nothrow_function_flags): Likewise.\n+\n 2007-02-11  Tehila Meyzels  <tehila@il.ibm.com>\n \t    Ira Rosen  <irar@il.ibm.com>\n \t    Dorit Nuzman  <dorit@il.ibm.com>"}, {"sha": "f4afe068525a1edeb2235d67f8c5fc200740f2b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -1,3 +1,9 @@\n+2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR target/29487\n+\t* decl.c (finish_function): Use DECL_REPLACEABLE.\n+\t* tree.c (cp_cannot_inline_tree_fn): Likewise.\n+\n 2007-02-10  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* parser.c (cp_parser_primary_expression): Reformat overly long lines."}, {"sha": "2212254a1b0b9f9a017e660a96104d015f2ba766", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -11225,7 +11225,7 @@ finish_function (int flags)\n   if (!processing_template_decl\n       && !cp_function_chain->can_throw\n       && !flag_non_call_exceptions\n-      && targetm.binds_local_p (fndecl))\n+      && !DECL_REPLACEABLE_P (fndecl))\n     TREE_NOTHROW (fndecl) = 1;\n \n   /* This must come after expand_function_end because cleanups might"}, {"sha": "a3d11a334d953c41d843f7ded28b8369ebcd7a82", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -2209,13 +2209,9 @@ cp_cannot_inline_tree_fn (tree* fnp)\n       && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL)\n     return 1;\n \n-  /* Don't auto-inline anything that might not be bound within\n-     this unit of translation.\n-     Exclude comdat functions from this rule.  While they can be bound\n-     to the other unit, they all must be the same.  This is especially\n-     important so templates can inline.  */\n-  if (!DECL_DECLARED_INLINE_P (fn) && !(*targetm.binds_local_p) (fn)\n-      && !DECL_COMDAT (fn))\n+  /* Don't auto-inline functions that might be replaced at link-time\n+     with an alternative definition.  */ \n+  if (!DECL_DECLARED_INLINE_P (fn) && DECL_REPLACEABLE_P (fn))\n     {\n       DECL_UNINLINABLE (fn) = 1;\n       return 1;"}, {"sha": "dc510794d50e6c614c9578329211abf90898d235", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -2785,7 +2785,10 @@ set_nothrow_function_flags (void)\n {\n   rtx insn;\n \n-  if (!targetm.binds_local_p (current_function_decl))\n+  /* If we don't know that this implementation of the function will\n+     actually be used, then we must not set TREE_NOTHROW, since\n+     callers must not assume that this function does not throw.  */\n+  if (DECL_REPLACEABLE_P (current_function_decl))\n     return 0;\n \n   TREE_NOTHROW (current_function_decl) = 1;"}, {"sha": "3f38b0cfc554923c3becc67ab4176b974ba3ed48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -1,3 +1,10 @@\n+2007-02-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29487\n+\t* g++.dg/eh/weak1-C: New test.\n+\t* g++.dg/eh/weak1-a.cc: Likewise.\n+\t* g++.dg/eh/comdat1.C: Likewise.\n+\n 2007-02-11  Tehila Meyzels <tehila@il.ibm.com>\n \t    Dorit Nuzman  <dorit@il.ibm.com>\n "}, {"sha": "4a118051145196985991a0e24fe944d727e4247b", "filename": "gcc/testsuite/g++.dg/eh/comdat1.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcomdat1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcomdat1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcomdat1.C?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -0,0 +1,42 @@\n+// PR target/29487\n+// { dg-do link }\n+// { dg-options \"-O2\" }\n+\n+/* This function is not defined.  The compiler should optimize away\n+   all calls to it.  */\n+extern void undefined () throw ();\n+\n+extern void f1();\n+\n+inline void f2() {\n+  f1();\n+}\n+\n+/* This function will be COMDAT if not inlined.  */\n+inline void f1() {}\n+\n+/* This function will be COMDAT.  */\n+template <typename T>\n+void f3() {\n+  if (false)\n+    throw 3;\n+}\n+\n+inline void f4() {\n+  if (false)\n+    throw 7;\n+}\n+\n+int main () {\n+  try {\n+    f1();\n+    f2();\n+    f3<int>();\n+    f4();\n+  } catch (...) {\n+    /* The compiler should recognize that none of the functions above\n+       can throw exceptions, and therefore remove this code as\n+       unreachable.  */\n+    undefined ();\n+  }\n+}"}, {"sha": "1885fae4e1f9d5f6bae06add6efef615dde11bbd", "filename": "gcc/testsuite/g++.dg/eh/weak1-a.cc", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fweak1-a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fweak1-a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fweak1-a.cc?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -0,0 +1,3 @@\n+extern void f() {\n+  throw 7;\n+}"}, {"sha": "09f2fcba4dfc1d853a771fbee9cfdfc73030549f", "filename": "gcc/testsuite/g++.dg/eh/weak1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fweak1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fweak1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fweak1.C?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -0,0 +1,23 @@\n+// PR target/29487\n+// { dg-require-weak \"\" }\n+// { dg-do run { xfail \"hppa*-hp-hpux11.*\" } }\n+// { dg-additional-sources \"weak1-a.cc\" }\n+// { dg-options \"-O2\" }\n+\n+extern __attribute__((weak)) \n+void f() {\n+}\n+\n+int main () {\n+  try {\n+    f();\n+    return 1;\n+  } catch (int i) {\n+    /* Although the implementation of f in this file does not throw\n+       any exceptions, it is weak, and may therefore be replaced at\n+       link time.  Therefore, the compiler must not optimize away this\n+       catch clause.  */\n+    if (i != 7)\n+      return 2;\n+  }\n+}"}, {"sha": "c672d94d0c0de5b8c1a54659139af3a5b6014bae", "filename": "gcc/tree.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fd65c7d9a3fd9ab80a627eb6caf24483801ff5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=56fd65c7d9a3fd9ab80a627eb6caf24483801ff5", "patch": "@@ -2901,6 +2901,26 @@ extern void decl_restrict_base_insert (tree, tree);\n    something which is DECL_COMDAT.  */\n #define DECL_COMDAT(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.comdat_flag)\n \n+/* A replaceable function is one which may be replaced at link-time\n+   with an entirely different definition, provided that the\n+   replacement has the same type.  For example, functions declared\n+   with __attribute__((weak)) on most systems are replaceable.  \n+\n+   COMDAT functions are not replaceable, since all definitions of the\n+   function must be equivalent.  It is important that COMDAT functions\n+   not be treated as replaceable so that use of C++ template\n+   instantiations is not penalized.  \n+\n+   For example, DECL_REPLACEABLE is used to determine whether or not a\n+   function (including a template instantiation) which is not\n+   explicitly declared \"inline\" can be inlined.  If the function is\n+   DECL_REPLACEABLE then it is not safe to do the inlining, since the\n+   implementation chosen at link-time may be different.  However, a\n+   function that is not DECL_REPLACEABLE can be inlined, since all\n+   versions of the function will be functionally identical.  */\n+#define DECL_REPLACEABLE_P(NODE) \\\n+  (!DECL_COMDAT (NODE) && !targetm.binds_local_p (NODE))\n+\n /* The name of the object as the assembler will see it (but before any\n    translations made by ASM_OUTPUT_LABELREF).  Often this is the same\n    as DECL_NAME.  It is an IDENTIFIER_NODE.  */"}]}