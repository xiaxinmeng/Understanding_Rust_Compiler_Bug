{"sha": "b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3OTUyM2I3YmNkMDI3MzllNmYwNmZlMjFhN2FjNmViMjRkZDZlYw==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2018-11-17T23:31:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-11-17T23:31:01Z"}, "message": "RISC-V: Fix epilogue unwind info with fp and single sp adjust.\n\n\tgcc/\n\t* config/riscv/riscv.c (epilogue_cfa_sp_offset): New.\n\t(riscv_restore_reg): If restoring HARD_FRAME_POINTER_REGNUM, and\n\tepilogue_cfa_sp_offset set, then add REG_CFA_DEF_CFA regnote.\n\t(riscv_expand_epilogue): Initialize epilogue_cfa_sp_offset.  Set it\n\tto step2 if frame_pointer_needed and step1 is 0.\n\nFrom-SVN: r266241", "tree": {"sha": "42b0503525877eab5d73704ad1d0d31fb7beda2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42b0503525877eab5d73704ad1d0d31fb7beda2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec/comments", "author": null, "committer": null, "parents": [{"sha": "9472dfbf21e34bbca599c15fd31c7341af3fda29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9472dfbf21e34bbca599c15fd31c7341af3fda29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9472dfbf21e34bbca599c15fd31c7341af3fda29"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "45dd8d62cc76a19a4259f0e4866b7b1b87463e96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec", "patch": "@@ -1,3 +1,11 @@\n+2018-11-17  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/riscv.c (epilogue_cfa_sp_offset): New.\n+\t(riscv_restore_reg): If restoring HARD_FRAME_POINTER_REGNUM, and\n+\tepilogue_cfa_sp_offset set, then add REG_CFA_DEF_CFA regnote.\n+\t(riscv_expand_epilogue): Initialize epilogue_cfa_sp_offset.  Set it\n+\tto step2 if frame_pointer_needed and step1 is 0.\n+\n 2018-11-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR c++/4225"}, {"sha": "47d0b6e849e25d51b9f5a728a4bf51dd1d79935e", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec", "patch": "@@ -237,6 +237,11 @@ bool riscv_slow_unaligned_access_p;\n /* Stack alignment to assume/maintain.  */\n unsigned riscv_stack_boundary;\n \n+/* If non-zero, this is an offset to be added to SP to redefine the CFA\n+   when restoring the FP register from the stack.  Only valid when generating\n+   the epilogue.  */\n+static int epilogue_cfa_sp_offset;\n+\n /* Which tuning parameters to use.  */\n static const struct riscv_tune_info *tune_info;\n \n@@ -3627,8 +3632,15 @@ riscv_restore_reg (rtx reg, rtx mem)\n   rtx insn = riscv_emit_move (reg, mem);\n   rtx dwarf = NULL_RTX;\n   dwarf = alloc_reg_note (REG_CFA_RESTORE, reg, dwarf);\n-  REG_NOTES (insn) = dwarf;\n \n+  if (epilogue_cfa_sp_offset && REGNO (reg) == HARD_FRAME_POINTER_REGNUM)\n+    {\n+      rtx cfa_adjust_rtx = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t GEN_INT (epilogue_cfa_sp_offset));\n+      dwarf = alloc_reg_note (REG_CFA_DEF_CFA, cfa_adjust_rtx, dwarf);\n+    }\n+\n+  REG_NOTES (insn) = dwarf;\n   RTX_FRAME_RELATED_P (insn) = 1;\n }\n \n@@ -3877,6 +3889,9 @@ riscv_expand_epilogue (int style)\n       return;\n     }\n \n+  /* Reset the epilogue cfa info before starting to emit the epilogue.  */\n+  epilogue_cfa_sp_offset = 0;\n+\n   /* Move past any dynamic stack allocations.  */\n   if (cfun->calls_alloca)\n     {\n@@ -3941,6 +3956,12 @@ riscv_expand_epilogue (int style)\n \n       REG_NOTES (insn) = dwarf;\n     }\n+  else if (frame_pointer_needed)\n+    {\n+      /* Tell riscv_restore_reg to emit dwarf to redefine CFA when restoring\n+\t old value of FP.  */\n+      epilogue_cfa_sp_offset = step2;\n+    }\n \n   if (use_restore_libcall)\n     frame->mask = 0; /* Temporarily fib that we need not save GPRs.  */"}]}