{"sha": "5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmY2ZlMzA4N2ViMDViNzYzOTVjOWVmYmZjMWFiYmYzZjllMWEwMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-09T09:11:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-09T09:32:43Z"}, "message": "libstdc++: Add warnings for some C++23 deprecations\n\nLWG 3036 deprecates std::pmr::polymorphic_allocator<T>::destroy in\nfavour of the equivalent member of std::allocator_traits.\n\nLWG 3170 deprecates std::allocator<T>::is_always_equal in favour of\nthe equivalent member of std::allocator_traits.\n\nThis also updates a comment to note that we support the LWG 3541 change\n(even before the issue was opened).\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/allocator.h (allocator::is_always_equal): Deprecate.\n\t* include/bits/iterator_concepts.h (indirectly_readable_traits):\n\tAdd LWG issue number to comment.\n\t* include/std/memory_resource (polymorphic_allocator::release):\n\tDeprecate.\n\t* testsuite/20_util/allocator/requirements/typedefs.cc: Add\n\tdg-warning for deprecation. Also check std::allocator<void>.", "tree": {"sha": "3b61ba37fe120f659d2a14e4cc48088ffec0c213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b61ba37fe120f659d2a14e4cc48088ffec0c213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "174e75a210753b68de0f2c398a13ace0f512e35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174e75a210753b68de0f2c398a13ace0f512e35b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174e75a210753b68de0f2c398a13ace0f512e35b"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "396872ffae5b11c47d1dffe2a0b76df3bc92ed65", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "patch": "@@ -89,9 +89,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2103. std::allocator propagate_on_container_move_assignment\n-      typedef true_type propagate_on_container_move_assignment;\n+      using propagate_on_container_move_assignment = true_type;\n \n-      typedef true_type is_always_equal;\n+      using is_always_equal\n+\t_GLIBCXX20_DEPRECATED_SUGGEST(\"allocator_traits::is_always_equal\")\n+\t= true_type;\n \n #if __cplusplus >= 202002L\n       allocator() = default;\n@@ -157,9 +159,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2103. std::allocator propagate_on_container_move_assignment\n-      typedef true_type propagate_on_container_move_assignment;\n+      using propagate_on_container_move_assignment = true_type;\n \n-      typedef true_type is_always_equal;\n+      using is_always_equal\n+\t_GLIBCXX20_DEPRECATED_SUGGEST(\"allocator_traits::is_always_equal\")\n+\t= true_type;\n #endif\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "8723f35c5cbcdc1a9b15652c82409cce5f8e4b96", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "patch": "@@ -264,8 +264,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __detail::__cond_value_type<typename _Tp::value_type>\n     { };\n \n-  // LWG 3446 doesn't add this, but it's needed for the case where\n-  // value_type and element_type are both present, but not the same type.\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3541. indirectly_readable_traits should be SFINAE-friendly for all types\n   template<__detail::__has_member_value_type _Tp>\n     requires __detail::__has_member_element_type<_Tp>\n     struct indirectly_readable_traits<_Tp>"}, {"sha": "df4e806f814eafa3c26fc96fcc228274e3fbcc10", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "patch": "@@ -322,6 +322,7 @@ namespace pmr\n #endif\n \n       template<typename _Up>\n+\t_GLIBCXX20_DEPRECATED_SUGGEST(\"allocator_traits::destroy\")\n \t__attribute__((__nonnull__))\n \tvoid\n \tdestroy(_Up* __p)"}, {"sha": "4f1f46a34654b62fac97c77a2c4e64cd8932f516", "filename": "libstdc++-v3/testsuite/20_util/allocator/requirements/typedefs.cc", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc?ref=5bfcfe3087eb05b76395c9efbfc1abbf3f9e1a03", "patch": "@@ -53,5 +53,27 @@ static_assert( is_same<allocator<int>::propagate_on_container_move_assignment,\n                        std::true_type>::value,\n                \"propagate_on_container_move_assignment\" );\n \n-static_assert( is_same<allocator<int>::is_always_equal, std::true_type>::value,\n-               \"is_always_equal\" );\n+using IAE = allocator<int>::is_always_equal; // { dg-warning \"deprecated\" \"\" { target c++20 } }\n+static_assert( is_same<IAE, std::true_type>::value, \"is_always_equal\" );\n+\n+\n+// Test required typedefs for allocator<void> specialization.\n+static_assert( is_same<allocator<void>::value_type, void>::value,\n+\t       \"void value_type\" );\n+#if __cplusplus <= 201703L\n+static_assert( is_same<allocator<void>::pointer, void*>::value,\n+\t       \"void pointer\" );\n+static_assert( is_same<allocator<void>::const_pointer, const void*>::value,\n+\t       \"void const_pointer\" );\n+static_assert( is_same<allocator<void>::rebind<char>::other,\n+                       allocator<char>>::value,\n+               \"void rebind::other\" );\n+#else\n+// Since C++20 allocator<void> uses the primary template, so has the same types.\n+static_assert( is_same<allocator<void>::propagate_on_container_move_assignment,\n+                       std::true_type>::value,\n+               \"propagate_on_container_move_assignment\" );\n+\n+using VIAE = allocator<void>::is_always_equal; // { dg-warning \"deprecated\" \"\" { target c++20 } }\n+static_assert( is_same<VIAE, std::true_type>::value, \"is_always_equal\" );\n+#endif"}]}