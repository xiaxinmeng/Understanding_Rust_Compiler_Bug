{"sha": "bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "node_id": "C_kwDOANBUbNoAKGJiOWQ0MzQ0MDRiNTU5YTExYmQyZjg1ZjBjZTgwODVjNzdiOGM0Yzg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-01T15:00:14Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-02T19:35:21Z"}, "message": "Convert rest of compiler to dconst[n]inf.\n\ngcc/ChangeLog:\n\n\t* builtins.cc (fold_builtin_inf): Convert use of real_info to dconstinf.\n\t(fold_builtin_fpclassify): Same.\n\t* fold-const-call.cc (fold_const_call_cc): Same.\n\t* match.pd: Same.\n\t* omp-low.cc (omp_reduction_init_op): Same.\n\t* realmpfr.cc (real_from_mpfr): Same.\n\t* tree.cc (build_complex_inf): Same.", "tree": {"sha": "86bf50ea24d0294bdcf00a51b2ac3352fa532126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86bf50ea24d0294bdcf00a51b2ac3352fa532126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c23af0dd7403c95c43310edc15669d4dacb005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c23af0dd7403c95c43310edc15669d4dacb005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c23af0dd7403c95c43310edc15669d4dacb005"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "5f319b2803027f64e9fb699a969958cee35013cd", "filename": "gcc/builtins.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "patch": "@@ -8696,8 +8696,6 @@ fold_builtin_strlen (location_t loc, tree expr, tree type, tree arg)\n static tree\n fold_builtin_inf (location_t loc, tree type, int warn)\n {\n-  REAL_VALUE_TYPE real;\n-\n   /* __builtin_inff is intended to be usable to define INFINITY on all\n      targets.  If an infinity is not available, INFINITY expands \"to a\n      positive constant of type float that overflows at translation\n@@ -8708,8 +8706,7 @@ fold_builtin_inf (location_t loc, tree type, int warn)\n   if (!MODE_HAS_INFINITIES (TYPE_MODE (type)) && warn)\n     pedwarn (loc, 0, \"target format does not support infinity\");\n \n-  real_inf (&real);\n-  return build_real (type, real);\n+  return build_real (type, dconstinf);\n }\n \n /* Fold function call to builtin sincos, sincosf, or sincosl.  Return\n@@ -9336,9 +9333,8 @@ fold_builtin_fpclassify (location_t loc, tree *args, int nargs)\n \n   if (tree_expr_maybe_infinite_p (arg))\n     {\n-      real_inf (&r);\n       tmp = fold_build2_loc (loc, EQ_EXPR, integer_type_node, arg,\n-\t\t\t build_real (type, r));\n+\t\t\t build_real (type, dconstinf));\n       res = fold_build3_loc (loc, COND_EXPR, integer_type_node, tmp,\n \t\t\t fp_infinite, res);\n     }"}, {"sha": "72953875414ab79ab41f07e9389849aa9f0adedd", "filename": "gcc/fold-const-call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Ffold-const-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Ffold-const-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.cc?ref=bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "patch": "@@ -1116,7 +1116,7 @@ fold_const_call_cc (real_value *result_real, real_value *result_imag,\n     CASE_CFN_CPROJ:\n       if (real_isinf (arg_real) || real_isinf (arg_imag))\n \t{\n-\t  real_inf (result_real);\n+\t  *result_real = dconstinf;\n \t  *result_imag = dconst0;\n \t  result_imag->sign = arg_imag->sign;\n \t}"}, {"sha": "17318f523fb6dfd59fb91e18532246f4b8f1c858", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "patch": "@@ -5300,7 +5300,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t if (cmp == LT_EXPR || cmp == GE_EXPR)\n \t\t   tow = dconst0;\n \t\t else\n-\t\t   real_inf (&tow);\n+\t\t   tow = dconstinf;\n \t\t real_nextafter (&c2alt, fmt, &c2, &tow);\n \t\t real_convert (&c2alt, fmt, &c2alt);\n \t\t if (REAL_VALUE_ISINF (c2alt))"}, {"sha": "e9e4bd05d7291011b4bf2cff232278ca6af68d3c", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "patch": "@@ -4524,12 +4524,9 @@ omp_reduction_init_op (location_t loc, enum tree_code op, tree type)\n     case MAX_EXPR:\n       if (SCALAR_FLOAT_TYPE_P (type))\n \t{\n-\t  REAL_VALUE_TYPE max, min;\n+\t  REAL_VALUE_TYPE min;\n \t  if (HONOR_INFINITIES (type))\n-\t    {\n-\t      real_inf (&max);\n-\t      real_arithmetic (&min, NEGATE_EXPR, &max, NULL);\n-\t    }\n+\t    real_arithmetic (&min, NEGATE_EXPR, &dconstinf, NULL);\n \t  else\n \t    real_maxval (&min, 1, TYPE_MODE (type));\n \t  return build_real (type, min);\n@@ -4551,7 +4548,7 @@ omp_reduction_init_op (location_t loc, enum tree_code op, tree type)\n \t{\n \t  REAL_VALUE_TYPE max;\n \t  if (HONOR_INFINITIES (type))\n-\t    real_inf (&max);\n+\t    max = dconstinf;\n \t  else\n \t    real_maxval (&max, 0, TYPE_MODE (type));\n \t  return build_real (type, max);"}, {"sha": "f7f096330ce954f83e506bd08205b2276b728351", "filename": "gcc/realmpfr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Frealmpfr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Frealmpfr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frealmpfr.cc?ref=bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "patch": "@@ -68,7 +68,7 @@ real_from_mpfr (REAL_VALUE_TYPE *r, mpfr_srcptr m, const real_format *format,\n   /* Take care of Infinity and NaN.  */\n   if (mpfr_inf_p (m))\n     {\n-      real_inf (r);\n+      *r = dconstinf;\n       if (mpfr_sgn (m) < 0)\n \t*r = real_value_negate (r);\n       return;"}, {"sha": "0179c0fdc9d3b2d6b312aed0c015290435c86c3f", "filename": "gcc/tree.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9d434404b559a11bd2f85f0ce8085c77b8c4c8/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=bb9d434404b559a11bd2f85f0ce8085c77b8c4c8", "patch": "@@ -2535,11 +2535,10 @@ build_complex (tree type, tree real, tree imag)\n tree\n build_complex_inf (tree type, bool neg)\n {\n-  REAL_VALUE_TYPE rinf, rzero = dconst0;\n+  REAL_VALUE_TYPE rzero = dconst0;\n \n-  real_inf (&rinf);\n   rzero.sign = neg;\n-  return build_complex (type, build_real (TREE_TYPE (type), rinf),\n+  return build_complex (type, build_real (TREE_TYPE (type), dconstinf),\n \t\t\tbuild_real (TREE_TYPE (type), rzero));\n }\n "}]}