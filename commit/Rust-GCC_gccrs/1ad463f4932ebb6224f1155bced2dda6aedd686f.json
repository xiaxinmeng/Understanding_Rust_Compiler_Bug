{"sha": "1ad463f4932ebb6224f1155bced2dda6aedd686f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkNDYzZjQ5MzJlYmI2MjI0ZjExNTViY2VkMmRkYTZhZWRkNjg2Zg==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-26T00:38:05Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-26T00:38:05Z"}, "message": "c-common.c (disable_builtin_function): Rename variable n to new_disabled_builtin.\n\n\t* c-common.c (disable_builtin_function): Rename variable n to\n\tnew_disabled_builtin.\n\t* c-decl.c (duplicate_decls): Rename parameter decl to new_decl.\n\tRename local variable old to old_decl.\n\t* gensupport.c (shift_output_template): Rename parameter old to src.\n\t* simplify-rtx.c (simplify_replace_rtx): Rename parameter oldx to\n\told_rtx and newx to new_rtx.\n\nFrom-SVN: r85175", "tree": {"sha": "b7381c551208f9e8237f512d0342d34a886d0c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7381c551208f9e8237f512d0342d34a886d0c9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad463f4932ebb6224f1155bced2dda6aedd686f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad463f4932ebb6224f1155bced2dda6aedd686f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad463f4932ebb6224f1155bced2dda6aedd686f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad463f4932ebb6224f1155bced2dda6aedd686f/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f408614568706ffddfbdfc7a947bb2f39a99d23a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f408614568706ffddfbdfc7a947bb2f39a99d23a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f408614568706ffddfbdfc7a947bb2f39a99d23a"}], "stats": {"total": 106, "additions": 60, "deletions": 46}, "files": [{"sha": "92168139e241cd2d89f45e0ddc80b96d74802ff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ad463f4932ebb6224f1155bced2dda6aedd686f", "patch": "@@ -1,3 +1,13 @@\n+2004-07-26  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* c-common.c (disable_builtin_function): Rename variable n to\n+\tnew_disabled_builtin.\n+\t* c-decl.c (duplicate_decls): Rename parameter decl to new_decl.\n+\tRename local variable old to old_decl.\n+\t* gensupport.c (shift_output_template): Rename parameter old to src.\n+\t* simplify-rtx.c (simplify_replace_rtx): Rename parameter oldx to\n+\told_rtx and newx to new_rtx.\n+\n 2004-07-26  Bernardo Innocenti  <bernie@develer.com>\n \n \t* Makefile.in (C_PRAGMA_H): New variable to track dependencies"}, {"sha": "ef8f72fca455dc90e4c671f8126a2c455d326b4c", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1ad463f4932ebb6224f1155bced2dda6aedd686f", "patch": "@@ -3242,10 +3242,10 @@ disable_builtin_function (const char *name)\n     error (\"cannot disable built-in function `%s'\", name);\n   else\n     {\n-      disabled_builtin *n = XNEW (disabled_builtin);\n-      n->name = name;\n-      n->next = disabled_builtins;\n-      disabled_builtins = n;\n+      disabled_builtin *new_disabled_builtin = XNEW (disabled_builtin);\n+      new_disabled_builtin->name = name;\n+      new_disabled_builtin->next = disabled_builtins;\n+      disabled_builtins = new_disabled_builtin;\n     }\n }\n "}, {"sha": "3239817da2bb76e36db6b7b01a40a79a27562e45", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1ad463f4932ebb6224f1155bced2dda6aedd686f", "patch": "@@ -1733,45 +1733,49 @@ duplicate_decls (tree newdecl, tree olddecl)\n }\n \n \f\n-/* Check whether decl-node DECL shadows an existing declaration.  */\n+/* Check whether decl-node NEW_DECL shadows an existing declaration.  */\n static void\n-warn_if_shadowing (tree decl)\n+warn_if_shadowing (tree new_decl)\n {\n   struct c_binding *b;\n \n   /* Shadow warnings wanted?  */\n   if (!warn_shadow\n       /* No shadow warnings for internally generated vars.  */\n-      || DECL_IS_BUILTIN (decl)\n+      || DECL_IS_BUILTIN (new_decl)\n       /* No shadow warnings for vars made for inlining.  */\n-      || DECL_FROM_INLINE (decl)\n+      || DECL_FROM_INLINE (new_decl)\n       /* Don't warn about the parm names in function declarator\n \t within a function declarator.  It would be nice to avoid\n \t warning in any function declarator in a declaration, as\n \t opposed to a definition, but there is no way to tell\n \t it's not a definition at this point.  */\n-      || (TREE_CODE (decl) == PARM_DECL && current_scope->outer->parm_flag))\n+      || (TREE_CODE (new_decl) == PARM_DECL && current_scope->outer->parm_flag))\n     return;\n \n   /* Is anything being shadowed?  Invisible decls do not count.  */\n-  for (b = I_SYMBOL_BINDING (DECL_NAME (decl)); b; b = b->shadowed)\n-    if (b->decl && b->decl != decl && !b->invisible)\n+  for (b = I_SYMBOL_BINDING (DECL_NAME (new_decl)); b; b = b->shadowed)\n+    if (b->decl && b->decl != new_decl && !b->invisible)\n       {\n-\ttree old = b->decl;\n+\ttree old_decl = b->decl;\n \n-\tif (TREE_CODE (old) == PARM_DECL)\n-\t  warning (\"%Jdeclaration of '%D' shadows a parameter\", decl, decl);\n-\telse if (DECL_FILE_SCOPE_P (old))\n+\tif (TREE_CODE (old_decl) == PARM_DECL)\n+\t  warning (\"%Jdeclaration of '%D' shadows a parameter\",\n+\t\t   new_decl, new_decl);\n+\telse if (DECL_FILE_SCOPE_P (old_decl))\n \t  warning (\"%Jdeclaration of '%D' shadows a global declaration\",\n-\t\t   decl, decl);\n-\telse if (TREE_CODE (old) == FUNCTION_DECL && DECL_BUILT_IN (old))\n+\t\t   new_decl, new_decl);\n+\telse if (TREE_CODE (old_decl) == FUNCTION_DECL\n+\t\t && DECL_BUILT_IN (old_decl))\n \t  warning (\"%Jdeclaration of '%D' shadows a built-in function\",\n-\t\t   decl, decl);\n+\t\t   new_decl, new_decl);\n \telse\n-\t  warning (\"%Jdeclaration of '%D' shadows a previous local\", decl, decl);\n+\t  warning (\"%Jdeclaration of '%D' shadows a previous local\",\n+\t\t   new_decl, new_decl);\n \n-\tif (TREE_CODE (old) != FUNCTION_DECL || !DECL_BUILT_IN (old))\n-\t  warning (\"%Jshadowed declaration is here\", old);\n+\tif (TREE_CODE (old_decl) != FUNCTION_DECL\n+\t    || ! DECL_BUILT_IN (old_decl))\n+\t  warning (\"%Jshadowed declaration is here\", old_decl);\n \n \tbreak;\n       }"}, {"sha": "37535d18a5d2acbcf74b784ca5af2fcab483447f", "filename": "gcc/gensupport.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=1ad463f4932ebb6224f1155bced2dda6aedd686f", "patch": "@@ -670,26 +670,26 @@ alter_test_for_insn (struct queue_elem *ce_elem,\n   return concat (\"(\", ce_test, \") && (\", insn_test, \")\", NULL);\n }\n \n-/* Adjust all of the operand numbers in OLD to match the shift they'll\n+/* Adjust all of the operand numbers in SRC to match the shift they'll\n    get from an operand displacement of DISP.  Return a pointer after the\n    adjusted string.  */\n \n static char *\n-shift_output_template (char *dest, const char *old, int disp)\n+shift_output_template (char *dest, const char *src, int disp)\n {\n-  while (*old)\n+  while (*src)\n     {\n-      char c = *old++;\n+      char c = *src++;\n       *dest++ = c;\n       if (c == '%')\n \t{\n-\t  c = *old++;\n+\t  c = *src++;\n \t  if (ISDIGIT ((unsigned char) c))\n \t    c += disp;\n \t  else if (ISALPHA (c))\n \t    {\n \t      *dest++ = c;\n-\t      c = *old++ + disp;\n+\t      c = *src++ + disp;\n \t    }\n \t  *dest++ = c;\n \t}"}, {"sha": "15e461af90f0cb288cd5ade3c8af90cabdc11805", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad463f4932ebb6224f1155bced2dda6aedd686f/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=1ad463f4932ebb6224f1155bced2dda6aedd686f", "patch": "@@ -240,38 +240,38 @@ simplify_gen_relational (enum rtx_code code, enum machine_mode mode,\n   return gen_rtx_fmt_ee (code, mode, op0, op1);\n }\n \f\n-/* Replace all occurrences of OLDX in X with NEWX and try to simplify the\n+/* Replace all occurrences of OLD_RTX in X with NEW_RTX and try to simplify the\n    resulting RTX.  Return a new RTX which is as simplified as possible.  */\n \n rtx\n-simplify_replace_rtx (rtx x, rtx oldx, rtx newx)\n+simplify_replace_rtx (rtx x, rtx old_rtx, rtx new_rtx)\n {\n   enum rtx_code code = GET_CODE (x);\n   enum machine_mode mode = GET_MODE (x);\n   enum machine_mode op_mode;\n   rtx op0, op1, op2;\n \n-  /* If X is OLDX, return NEWX.  Otherwise, if this is an expression, try\n+  /* If X is OLD_RTX, return NEW_RTX.  Otherwise, if this is an expression, try\n      to build a new expression substituting recursively.  If we can't do\n      anything, return our input.  */\n \n-  if (x == oldx)\n-    return newx;\n+  if (x == old_rtx)\n+    return new_rtx;\n \n   switch (GET_RTX_CLASS (code))\n     {\n     case RTX_UNARY:\n       op0 = XEXP (x, 0);\n       op_mode = GET_MODE (op0);\n-      op0 = simplify_replace_rtx (op0, oldx, newx);\n+      op0 = simplify_replace_rtx (op0, old_rtx, new_rtx);\n       if (op0 == XEXP (x, 0))\n \treturn x;\n       return simplify_gen_unary (code, mode, op0, op_mode);\n \n     case RTX_BIN_ARITH:\n     case RTX_COMM_ARITH:\n-      op0 = simplify_replace_rtx (XEXP (x, 0), oldx, newx);\n-      op1 = simplify_replace_rtx (XEXP (x, 1), oldx, newx);\n+      op0 = simplify_replace_rtx (XEXP (x, 0), old_rtx, new_rtx);\n+      op1 = simplify_replace_rtx (XEXP (x, 1), old_rtx, new_rtx);\n       if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))\n \treturn x;\n       return simplify_gen_binary (code, mode, op0, op1);\n@@ -281,8 +281,8 @@ simplify_replace_rtx (rtx x, rtx oldx, rtx newx)\n       op0 = XEXP (x, 0);\n       op1 = XEXP (x, 1);\n       op_mode = GET_MODE (op0) != VOIDmode ? GET_MODE (op0) : GET_MODE (op1);\n-      op0 = simplify_replace_rtx (op0, oldx, newx);\n-      op1 = simplify_replace_rtx (op1, oldx, newx);\n+      op0 = simplify_replace_rtx (op0, old_rtx, new_rtx);\n+      op1 = simplify_replace_rtx (op1, old_rtx, new_rtx);\n       if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))\n \treturn x;\n       return simplify_gen_relational (code, mode, op_mode, op0, op1);\n@@ -291,9 +291,9 @@ simplify_replace_rtx (rtx x, rtx oldx, rtx newx)\n     case RTX_BITFIELD_OPS:\n       op0 = XEXP (x, 0);\n       op_mode = GET_MODE (op0);\n-      op0 = simplify_replace_rtx (op0, oldx, newx);\n-      op1 = simplify_replace_rtx (XEXP (x, 1), oldx, newx);\n-      op2 = simplify_replace_rtx (XEXP (x, 2), oldx, newx);\n+      op0 = simplify_replace_rtx (op0, old_rtx, new_rtx);\n+      op1 = simplify_replace_rtx (XEXP (x, 1), old_rtx, new_rtx);\n+      op2 = simplify_replace_rtx (XEXP (x, 2), old_rtx, new_rtx);\n       if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1) && op2 == XEXP (x, 2))\n \treturn x;\n       if (op_mode == VOIDmode)\n@@ -304,7 +304,7 @@ simplify_replace_rtx (rtx x, rtx oldx, rtx newx)\n       /* The only case we try to handle is a SUBREG.  */\n       if (code == SUBREG)\n \t{\n-\t  op0 = simplify_replace_rtx (SUBREG_REG (x), oldx, newx);\n+\t  op0 = simplify_replace_rtx (SUBREG_REG (x), old_rtx, new_rtx);\n \t  if (op0 == SUBREG_REG (x))\n \t    return x;\n \t  op0 = simplify_gen_subreg (GET_MODE (x), op0,\n@@ -317,15 +317,15 @@ simplify_replace_rtx (rtx x, rtx oldx, rtx newx)\n     case RTX_OBJ:\n       if (code == MEM)\n \t{\n-\t  op0 = simplify_replace_rtx (XEXP (x, 0), oldx, newx);\n+\t  op0 = simplify_replace_rtx (XEXP (x, 0), old_rtx, new_rtx);\n \t  if (op0 == XEXP (x, 0))\n \t    return x;\n \t  return replace_equiv_address_nv (x, op0);\n \t}\n       else if (code == LO_SUM)\n \t{\n-\t  op0 = simplify_replace_rtx (XEXP (x, 0), oldx, newx);\n-\t  op1 = simplify_replace_rtx (XEXP (x, 1), oldx, newx);\n+\t  op0 = simplify_replace_rtx (XEXP (x, 0), old_rtx, new_rtx);\n+\t  op1 = simplify_replace_rtx (XEXP (x, 1), old_rtx, new_rtx);\n \n \t  /* (lo_sum (high x) x) -> x  */\n \t  if (GET_CODE (op0) == HIGH && rtx_equal_p (XEXP (op0, 0), op1))\n@@ -337,8 +337,8 @@ simplify_replace_rtx (rtx x, rtx oldx, rtx newx)\n \t}\n       else if (code == REG)\n \t{\n-\t  if (REG_P (oldx) && REGNO (x) == REGNO (oldx))\n-\t    return newx;\n+\t  if (REG_P (old_rtx) && REGNO (x) == REGNO (old_rtx))\n+\t    return new_rtx;\n \t}\n       break;\n "}]}