{"sha": "95d9823d289fa8fe7be0a299993027f5e6e7824f", "node_id": "C_kwDOANBUbNoAKDk1ZDk4MjNkMjg5ZmE4ZmU3YmUwYTI5OTk5MzAyN2Y1ZTZlNzgyNGY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-26T15:33:06Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-05T07:21:05Z"}, "message": "[Ada] Small cleanup in body of System.Value_R\n\nThis is mostly stylistic but also adds a couple of missing comments.\n\ngcc/ada/\n\n\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Consistently avoid\n\tinitializing local variables.\n\t(Scan_Integral_Digits): Likewise.\n\t(Scan_Raw_Real): Likewise and add a couple of comments.", "tree": {"sha": "6dfcb2dbcf7d1452d8e32cdf8e2c911c5e8b110f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dfcb2dbcf7d1452d8e32cdf8e2c911c5e8b110f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95d9823d289fa8fe7be0a299993027f5e6e7824f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d9823d289fa8fe7be0a299993027f5e6e7824f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d9823d289fa8fe7be0a299993027f5e6e7824f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d9823d289fa8fe7be0a299993027f5e6e7824f/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8405bfbe069763f7de0091c51f9c3000a966d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8405bfbe069763f7de0091c51f9c3000a966d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8405bfbe069763f7de0091c51f9c3000a966d5"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "fc9166063436f8894e24c37a83e55231e07d45d7", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d9823d289fa8fe7be0a299993027f5e6e7824f/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d9823d289fa8fe7be0a299993027f5e6e7824f/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=95d9823d289fa8fe7be0a299993027f5e6e7824f", "patch": "@@ -184,7 +184,7 @@ package body System.Value_R is\n       UmaxB : constant Uns := Precision_Limit / Uns (Base);\n       --  Numbers bigger than UmaxB overflow if multiplied by base\n \n-      Precision_Limit_Reached : Boolean := False;\n+      Precision_Limit_Reached : Boolean;\n       --  Set to True if addition of a digit will cause Value to be superior\n       --  to Precision_Limit.\n \n@@ -198,7 +198,7 @@ package body System.Value_R is\n       Temp : Uns;\n       --  Temporary\n \n-      Trailing_Zeros : Natural := 0;\n+      Trailing_Zeros : Natural;\n       --  Number of trailing zeros at a given point\n \n    begin\n@@ -209,12 +209,17 @@ package body System.Value_R is\n          Precision_Limit_Reached := True;\n       else\n          Extra := 0;\n+         Precision_Limit_Reached := False;\n       end if;\n \n       if Round then\n          Precision_Limit_Just_Reached := False;\n       end if;\n \n+      --  Initialize trailing zero counter\n+\n+      Trailing_Zeros := 0;\n+\n       --  The function precondition is that the first character is a valid\n       --  digit.\n \n@@ -362,7 +367,7 @@ package body System.Value_R is\n       UmaxB : constant Uns := Precision_Limit / Uns (Base);\n       --  Numbers bigger than UmaxB overflow if multiplied by base\n \n-      Precision_Limit_Reached : Boolean := False;\n+      Precision_Limit_Reached : Boolean;\n       --  Set to True if addition of a digit will cause Value to be superior\n       --  to Precision_Limit.\n \n@@ -383,6 +388,8 @@ package body System.Value_R is\n       Scale := 0;\n       Extra := 0;\n \n+      Precision_Limit_Reached := False;\n+\n       if Round then\n          Precision_Limit_Just_Reached := False;\n       end if;\n@@ -494,28 +501,32 @@ package body System.Value_R is\n       After_Point : Boolean;\n       --  True if a decimal should be parsed\n \n-      Base_Char : Character := ASCII.NUL;\n-      --  Character used to set the base. If Nul this means that default\n+      Base_Char : Character;\n+      --  Character used to set the base. If it is Nul, this means that default\n       --  base is used.\n \n-      Base_Violation : Boolean := False;\n+      Base_Violation : Boolean;\n       --  If True some digits where not in the base. The real is still scanned\n       --  till the end even if an error will be raised.\n \n+      Expon : Integer;\n+      --  Exponent as an Integer\n+\n       Index : Integer;\n       --  Local copy of string pointer\n \n       Start : Positive;\n+      --  Index of the first non-blank character\n \n       Value : Uns;\n       --  Mantissa as an Integer\n \n-      Expon : Integer;\n-\n    begin\n       --  The default base is 10\n \n-      Base := 10;\n+      Base           := 10;\n+      Base_Char      := ASCII.NUL;\n+      Base_Violation := False;\n \n       --  We do not tolerate strings with Str'Last = Positive'Last\n "}]}