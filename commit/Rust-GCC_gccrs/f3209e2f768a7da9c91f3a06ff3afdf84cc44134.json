{"sha": "f3209e2f768a7da9c91f3a06ff3afdf84cc44134", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyMDllMmY3NjhhN2RhOWM5MWYzYTA2ZmYzYWZkZjg0Y2M0NDEzNA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-01-09T22:23:26Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-01-09T22:23:26Z"}, "message": "(merge_attributes): Moved here from c-typeck.c.\n\nFrom-SVN: r10955", "tree": {"sha": "4dbecd02c319f8f947250e7f0ea0f4871fd6a247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dbecd02c319f8f947250e7f0ea0f4871fd6a247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3209e2f768a7da9c91f3a06ff3afdf84cc44134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3209e2f768a7da9c91f3a06ff3afdf84cc44134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3209e2f768a7da9c91f3a06ff3afdf84cc44134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3209e2f768a7da9c91f3a06ff3afdf84cc44134/comments", "author": null, "committer": null, "parents": [{"sha": "a3e11772c38438c165c11e895e4ea361fb29f560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e11772c38438c165c11e895e4ea361fb29f560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e11772c38438c165c11e895e4ea361fb29f560"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "4533294af609a51f0974cf3c5270c9cac2c9623f", "filename": "gcc/tree.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3209e2f768a7da9c91f3a06ff3afdf84cc44134/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3209e2f768a7da9c91f3a06ff3afdf84cc44134/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f3209e2f768a7da9c91f3a06ff3afdf84cc44134", "patch": "@@ -3114,6 +3114,44 @@ lookup_attribute (attr_name, list)\n \n   return NULL_TREE;\n }\n+\n+/* Return an attribute list that is the union of a1 and a2.  */\n+\n+tree\n+merge_attributes (a1, a2)\n+     register tree a1, a2;\n+{\n+  tree attributes;\n+\n+  /* Either one unset?  Take the set one.  */\n+\n+  if (! (attributes = a1))\n+    attributes = a2;\n+\n+  /* One that completely contains the other?  Take it.  */\n+\n+  else if (a2 && ! attribute_list_contained (a1, a2))\n+    if (attribute_list_contained (a2, a1))\n+      attributes = a2;\n+    else\n+      {\n+\t/* Pick the longest list, and hang on the other list.  */\n+\t/* ??? For the moment we punt on the issue of attrs with args.  */\n+\n+\tif (list_length (a1) < list_length (a2))\n+\t  attributes = a2, a2 = a1;\n+\n+\tfor (; a2; a2 = TREE_CHAIN (a2))\n+\t  if (lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (a2)),\n+\t\t\t\tattributes) == NULL_TREE)\n+\t    {\n+\t      a1 = copy_node (a2);\n+\t      TREE_CHAIN (a1) = attributes;\n+\t      attributes = a1;\n+\t    }\n+      }\n+  return attributes;\n+}\n \f\n /* Return a type like TYPE except that its TYPE_READONLY is CONSTP\n    and its TYPE_VOLATILE is VOLATILEP."}]}