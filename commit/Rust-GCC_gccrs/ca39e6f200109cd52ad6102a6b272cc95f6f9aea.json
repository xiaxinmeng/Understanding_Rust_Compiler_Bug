{"sha": "ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzOWU2ZjIwMDEwOWNkNTJhZDYxMDJhNmIyNzJjYzk1ZjZmOWFlYQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-05T12:33:07Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-05T12:33:07Z"}, "message": "gfortran.h (gfc_get_data_variable, [...]): Move to decl.c.\n\n\t* gfortran.h (gfc_get_data_variable, gfc_get_data_value,\n\tgfc_get_data): Move to decl.c.\n\t(global_used): Rename into gfc_global_used.\n\t(gfc_formalize_init_value, gfc_get_section_index,\n\tgfc_assign_data_value, gfc_assign_data_value_range,\n\tgfc_advance_section): Move to data.h.\n\t(gfc_set_in_match_data): Remove.\n\t* decl.c (gfc_get_data_variable, gfc_get_data_value,\n\tgfc_get_data): Move here.\n\t(gfc_set_in_match_data): Rename into set_in_match_data.\n\t(gfc_match_data): Likewise.\n\t(add_global_entry): Rename global_used into gfc_global_used.\n\t* data.c: Include data.h.\n\t* trans.h (gfc_todo_error): Remove.\n\t* trans-array.c (gfc_trans_array_constructor,\n\tgfc_conv_ss_startstride, gfc_conv_loop_setup): Change\n\tgfc_todo_error into assertions.\n\t* resolve.c (resolve_global_procedure): Rename global_used into\n\tgfc_global_used.\n\t* parse.c (gfc_global_used, parse_module, add_global_procedure,\n\tadd_global_program): Likewise.\n\t* trans-intrinsic.c (gfc_walk_intrinsic_function): Rename\n\tglobal_used into gfc_global_used.\n\t* Make-lang.in: Add dependencies on fortran/data.h.\n\t* data.h: New file.\n\nFrom-SVN: r129034", "tree": {"sha": "1a0937b7cea055b0e5838091ab9a1ea3d9396460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0937b7cea055b0e5838091ab9a1ea3d9396460"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b691d4b02ae11b0326092e0e677e561b35af38d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b691d4b02ae11b0326092e0e677e561b35af38d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b691d4b02ae11b0326092e0e677e561b35af38d7"}], "stats": {"total": 131, "additions": 90, "deletions": 41}, "files": [{"sha": "834a5b947fadfee83793a2917a83331eb1223fe2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -1,3 +1,31 @@\n+2007-10-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_get_data_variable, gfc_get_data_value,\n+\tgfc_get_data): Move to decl.c.\n+\t(global_used): Rename into gfc_global_used.\n+\t(gfc_formalize_init_value, gfc_get_section_index,\n+\tgfc_assign_data_value, gfc_assign_data_value_range,\n+\tgfc_advance_section): Move to data.h.\n+\t(gfc_set_in_match_data): Remove.\n+\t* decl.c (gfc_get_data_variable, gfc_get_data_value,\n+\tgfc_get_data): Move here.\n+\t(gfc_set_in_match_data): Rename into set_in_match_data.\n+\t(gfc_match_data): Likewise.\n+\t(add_global_entry): Rename global_used into gfc_global_used.\n+\t* data.c: Include data.h.\n+\t* trans.h (gfc_todo_error): Remove.\n+\t* trans-array.c (gfc_trans_array_constructor,\n+\tgfc_conv_ss_startstride, gfc_conv_loop_setup): Change\n+\tgfc_todo_error into assertions.\n+\t* resolve.c (resolve_global_procedure): Rename global_used into\n+\tgfc_global_used.\n+\t* parse.c (gfc_global_used, parse_module, add_global_procedure,\n+\tadd_global_program): Likewise.\n+\t* trans-intrinsic.c (gfc_walk_intrinsic_function): Rename\n+\tglobal_used into gfc_global_used.\n+\t* Make-lang.in: Add dependencies on fortran/data.h.\n+\t* data.h: New file.\n+\n 2007-10-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33529"}, {"sha": "16d4d3534eec21c27421c522218c182c5aff1977", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -324,5 +324,6 @@ fortran/trans-intrinsic.o: $(GFORTRAN_TRANS_DEPS) fortran/mathbuiltins.def \\\n   gt-fortran-trans-intrinsic.h\n fortran/dependency.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h\n fortran/trans-common.o: $(GFORTRAN_TRANS_DEPS) $(TARGET_H) $(RTL_H)\n-fortran/resolve.o: fortran/dependency.h\n+fortran/resolve.o: fortran/dependency.h fortran/data.h\n+fortran/data.o: fortran/data.h\n fortran/options.o: $(PARAMS_H) $(TARGET_H)"}, {"sha": "59ac5e9d8e6fa8cfcf3fa2b8650e4f05fabc0713", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"config.h\"\n #include \"gfortran.h\"\n+#include \"data.h\"\n \n static void formalize_init_expr (gfc_expr *);\n "}, {"sha": "5f89d981f7e45e69ba158fda93651c951b325cbd", "filename": "gcc/fortran/data.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.h?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -0,0 +1,24 @@\n+/* Header for functions resolving DATA statements.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+void gfc_formalize_init_value (gfc_symbol *);\n+void gfc_get_section_index (gfc_array_ref *, mpz_t *, mpz_t *);\n+try gfc_assign_data_value (gfc_expr *, gfc_expr *, mpz_t);\n+void gfc_assign_data_value_range (gfc_expr *, gfc_expr *, mpz_t, mpz_t);\n+void gfc_advance_section (mpz_t *, gfc_array_ref *, mpz_t *);"}, {"sha": "d2c94a1d72747b5624d964d8935dc78087767b31", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -25,6 +25,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"match.h\"\n #include \"parse.h\"\n \n+\n+/* Macros to access allocate memory for gfc_data_variable,\n+   gfc_data_value and gfc_data.  */\n+#define gfc_get_data_variable() gfc_getmem (sizeof (gfc_data_variable))\n+#define gfc_get_data_value() gfc_getmem (sizeof (gfc_data_value))\n+#define gfc_get_data() gfc_getmem( sizeof (gfc_data))\n+\n+\n /* This flag is set if an old-style length selector is matched\n    during a type-declaration statement.  */\n \n@@ -92,8 +100,8 @@ gfc_in_match_data (void)\n   return in_match_data;\n }\n \n-void\n-gfc_set_in_match_data (bool set_value)\n+static void\n+set_in_match_data (bool set_value)\n {\n   in_match_data = set_value;\n }\n@@ -496,7 +504,7 @@ gfc_match_data (void)\n   gfc_data *new;\n   match m;\n \n-  gfc_set_in_match_data (true);\n+  set_in_match_data (true);\n \n   for (;;)\n     {\n@@ -520,7 +528,7 @@ gfc_match_data (void)\n       gfc_match_char (',');\t/* Optional comma */\n     }\n \n-  gfc_set_in_match_data (false);\n+  set_in_match_data (false);\n \n   if (gfc_pure (NULL))\n     {\n@@ -531,7 +539,7 @@ gfc_match_data (void)\n   return MATCH_YES;\n \n cleanup:\n-  gfc_set_in_match_data (false);\n+  set_in_match_data (false);\n   gfc_free_data (new);\n   return MATCH_ERROR;\n }\n@@ -4256,7 +4264,7 @@ add_global_entry (const char *name, int sub)\n   if (s->defined\n       || (s->type != GSYM_UNKNOWN\n \t  && s->type != (sub ? GSYM_SUBROUTINE : GSYM_FUNCTION)))\n-    global_used(s, NULL);\n+    gfc_global_used(s, NULL);\n   else\n     {\n       s->type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;"}, {"sha": "203e1e78f4041405335a57999347a68a6ade22e8", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -1793,10 +1793,6 @@ typedef struct gfc_data\n }\n gfc_data;\n \n-#define gfc_get_data_variable() gfc_getmem(sizeof(gfc_data_variable))\n-#define gfc_get_data_value() gfc_getmem(sizeof(gfc_data_value))\n-#define gfc_get_data() gfc_getmem(sizeof(gfc_data))\n-\n \n /* Structure for holding compile options */\n typedef struct\n@@ -1909,16 +1905,8 @@ extern iterator_stack *iter_stack;\n \n /************************ Function prototypes *************************/\n \n-/* data.c  */\n-void gfc_formalize_init_value (gfc_symbol *);\n-void gfc_get_section_index (gfc_array_ref *, mpz_t *, mpz_t *);\n-try gfc_assign_data_value (gfc_expr *, gfc_expr *, mpz_t);\n-void gfc_assign_data_value_range (gfc_expr *, gfc_expr *, mpz_t, mpz_t);\n-void gfc_advance_section (mpz_t *, gfc_array_ref *, mpz_t *);\n-\n /* decl.c */\n bool gfc_in_match_data (void);\n-void gfc_set_in_match_data (bool);\n \n /* scanner.c */\n void gfc_scanner_done_1 (void);\n@@ -2371,7 +2359,7 @@ void gfc_show_typespec (gfc_typespec *);\n \n /* parse.c */\n try gfc_parse_file (void);\n-void global_used (gfc_gsymbol *, locus *);\n+void gfc_global_used (gfc_gsymbol *, locus *);\n \n /* dependency.c */\n int gfc_dep_compare_expr (gfc_expr *, gfc_expr *);"}, {"sha": "f357c7a65237a3c3f3b57bc199dea112287e6a61", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -3088,7 +3088,7 @@ parse_progunit (gfc_statement st)\n    something else.  */\n \n void\n-global_used (gfc_gsymbol *sym, locus *where)\n+gfc_global_used (gfc_gsymbol *sym, locus *where)\n {\n   const char *name;\n \n@@ -3154,7 +3154,7 @@ parse_block_data (void)\n       s = gfc_get_gsymbol (gfc_new_block->name);\n       if (s->defined\n \t  || (s->type != GSYM_UNKNOWN && s->type != GSYM_BLOCK_DATA))\n-       global_used(s, NULL);\n+       gfc_global_used(s, NULL);\n       else\n        {\n \t s->type = GSYM_BLOCK_DATA;\n@@ -3185,7 +3185,7 @@ parse_module (void)\n \n   s = gfc_get_gsymbol (gfc_new_block->name);\n   if (s->defined || (s->type != GSYM_UNKNOWN && s->type != GSYM_MODULE))\n-    global_used(s, NULL);\n+    gfc_global_used(s, NULL);\n   else\n     {\n       s->type = GSYM_MODULE;\n@@ -3232,7 +3232,7 @@ add_global_procedure (int sub)\n   if (s->defined\n       || (s->type != GSYM_UNKNOWN\n \t  && s->type != (sub ? GSYM_SUBROUTINE : GSYM_FUNCTION)))\n-    global_used(s, NULL);\n+    gfc_global_used(s, NULL);\n   else\n     {\n       s->type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n@@ -3254,7 +3254,7 @@ add_global_program (void)\n   s = gfc_get_gsymbol (gfc_new_block->name);\n \n   if (s->defined || (s->type != GSYM_UNKNOWN && s->type != GSYM_PROGRAM))\n-    global_used(s, NULL);\n+    gfc_global_used(s, NULL);\n   else\n     {\n       s->type = GSYM_PROGRAM;"}, {"sha": "452a8d837eba0aa2440e0caa9ed3a782363557d2", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"arith.h\"  /* For gfc_compare_expr().  */\n #include \"dependency.h\"\n+#include \"data.h\"\n \n /* Types used in equivalence statements.  */\n \n@@ -1359,7 +1360,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n   gsym = gfc_get_gsymbol (sym->name);\n \n   if ((gsym->type != GSYM_UNKNOWN && gsym->type != type))\n-    global_used (gsym, where);\n+    gfc_global_used (gsym, where);\n \n   if (gsym->type == GSYM_UNKNOWN)\n     {"}, {"sha": "2edc95b057288ceadb84504d897dd6becfa03110", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -1636,8 +1636,10 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n   if (ss->expr->ts.type == BT_CHARACTER)\n     {\n       bool const_string = get_array_ctor_strlen (&loop->pre, c, &ss->string_length);\n-      if (!ss->string_length)\n-\tgfc_todo_error (\"complex character array constructors\");\n+\n+      /* Complex character array constructors should have been taken care of\n+\t and not end up here.  */\n+      gcc_assert (ss->string_length);\n \n       ss->expr->ts.cl->backend_decl = ss->string_length;\n \n@@ -2787,9 +2789,9 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t}\n     }\n \n-  if (loop->dimen == 0)\n-    gfc_todo_error (\"Unable to determine rank of expression\");\n-\n+  /* We should have determined the rank of the expression by now.  If\n+     not, that's bad news.  */\n+  gcc_assert (loop->dimen != 0);\n \n   /* Loop over all the SS in the chain.  */\n   for (ss = loop->ss; ss != gfc_ss_terminator; ss = ss->loop_chain)\n@@ -3280,8 +3282,9 @@ gfc_conv_loop_setup (gfc_loopinfo * loop)\n \t     loopspec[n] = ss; */\n \t}\n \n-      if (!loopspec[n])\n-\tgfc_todo_error (\"Unable to find scalarization loop specifier\");\n+      /* We should have found the scalarization loop specifier.  If not,\n+\t that's bad news.  */\n+      gcc_assert (loopspec[n]);\n \n       info = &loopspec[n]->data.info;\n "}, {"sha": "7cc0c6fe10fb01882d1571209487446802137025", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -4269,10 +4269,9 @@ gfc_walk_intrinsic_function (gfc_ss * ss, gfc_expr * expr,\n \n     default:\n       /* This probably meant someone forgot to add an intrinsic to the above\n-         list(s) when they implemented it, or something's gone horribly wrong.\n-       */\n-      gfc_todo_error (\"Scalarization of non-elemental intrinsic: %s\",\n-\t\t      expr->value.function.name);\n+         list(s) when they implemented it, or something's gone horribly\n+\t wrong.  */\n+      gcc_unreachable ();\n     }\n }\n "}, {"sha": "eafd28027779a49efbdaa5fc3c4043a0282a9008", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca39e6f200109cd52ad6102a6b272cc95f6f9aea/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=ca39e6f200109cd52ad6102a6b272cc95f6f9aea", "patch": "@@ -632,10 +632,6 @@ struct lang_decl\t\tGTY(())\n #define GFC_TYPE_ARRAY_DATAPTR_TYPE(node) \\\n   (TYPE_LANG_SPECIFIC(node)->dataptr_type)\n \n-/* I changed this from sorry(...) because it should not return.  */\n-/* TODO: Remove gfc_todo_error before releasing version 1.0.  */\n-#define gfc_todo_error(args...) fatal_error(\"gfc_todo: Not Implemented: \" args)\n-\n /* Build an expression with void type.  */\n #define build1_v(code, arg) build1(code, void_type_node, arg)\n #define build2_v(code, arg1, arg2) build2(code, void_type_node, \\"}]}