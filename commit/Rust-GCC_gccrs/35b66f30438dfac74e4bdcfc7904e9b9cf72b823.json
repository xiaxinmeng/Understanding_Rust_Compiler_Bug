{"sha": "35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViNjZmMzA0MzhkZmFjNzRlNGJkY2ZjNzkwNGU5YjljZjcyYjgyMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-09-21T20:00:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-09-21T20:00:23Z"}, "message": "gimple-ssa-evrp.c (evrp_dom_walker::cleanup): Call vr_values::cleanup_edges_and_switches.\n\n\t* gimple-ssa-evrp.c (evrp_dom_walker::cleanup): Call\n\tvr_values::cleanup_edges_and_switches.\n\t* tree-vrp.c (to_remove_edges, to_update_switch_stmts): Moved into\n\tvr_values class.\n\t(identify_jump_threads): Remove EDGE_IGNORE handling.\n\t(execute_vrp): Move handling of to_remove_edges and\n\tto_update_switch_stmts into vr_values class member functions.\n\t* tree-vrp.h (switch_update, to_remove_edges): Remove declarations.\n\t(to_update_switch_stmts): Likewise.\n\t* vr-values.c: Include cfghooks.h.\n\t(vr_values::vr_values): Initialize to_remove_edges and\n\tto_update_switch_stmts.\n\t(vr_values::~vr_values): Verify to_remove_edges and\n\tto_update_switch_stmts are empty.\n\t(vr_values::simplify_switch_using_ranges): Set EDGE_IGNORE as needed.\n\t(vr_values::cleanup_edges_and_switches): New member function.\n\t* vr-values.h (vr_values): Add cleanup_edges_and_switches member\n\tfunction.  Add new data members.\n\n\t* gcc.dg/tree-ssa/vrp113.c: Disable EVRP.\n\t* gcc.dg/tree-ssa/vrp120.c: New test.\n\nFrom-SVN: r264491", "tree": {"sha": "cd47b72ecf0d3f7885412cc2133a0bda575ffb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd47b72ecf0d3f7885412cc2133a0bda575ffb65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/comments", "author": null, "committer": null, "parents": [{"sha": "2e3f6531bfb5a880d88ec592de944a329aaef18a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3f6531bfb5a880d88ec592de944a329aaef18a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3f6531bfb5a880d88ec592de944a329aaef18a"}], "stats": {"total": 160, "additions": 100, "deletions": 60}, "files": [{"sha": "c39c3b81ddd7f71d3cb2768bdd636ec2d5ebff9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -4,6 +4,27 @@\n \t* doc/extend.texi (Common Function Attributes): Mention that\n \tnoreturn suppresses tail call optimization.\n \n+2018-09-21  Jeff Law  <law@redhat.com>\n+\n+\t* gimple-ssa-evrp.c (evrp_dom_walker::cleanup): Call\n+\tvr_values::cleanup_edges_and_switches.\n+\t* tree-vrp.c (to_remove_edges, to_update_switch_stmts): Moved into\n+\tvr_values class.\n+\t(identify_jump_threads): Remove EDGE_IGNORE handling.\n+\t(execute_vrp): Move handling of to_remove_edges and\n+\tto_update_switch_stmts into vr_values class member functions.\n+\t* tree-vrp.h (switch_update, to_remove_edges): Remove declarations.\n+\t(to_update_switch_stmts): Likewise.\n+\t* vr-values.c: Include cfghooks.h. \n+\t(vr_values::vr_values): Initialize to_remove_edges and\n+\tto_update_switch_stmts.\n+\t(vr_values::~vr_values): Verify to_remove_edges and\n+\tto_update_switch_stmts are empty.\n+\t(vr_values::simplify_switch_using_ranges): Set EDGE_IGNORE as needed.\n+\t(vr_values::cleanup_edges_and_switches): New member function.\n+\t* vr-values.h (vr_values): Add cleanup_edges_and_switches member\n+\tfunction.  Add new data members.\n+\n 2018-09-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/87309"}, {"sha": "50e8adc1aad790f07506af4f44cc90474ae30381", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -287,6 +287,8 @@ evrp_dom_walker::cleanup (void)\n       gimple *stmt = stmts_to_fixup.pop ();\n       fixup_noreturn_call (stmt);\n     }\n+\n+  evrp_folder.vr_values->cleanup_edges_and_switches ();\n }\n \n /* Main entry point for the early vrp pass which is a simplified non-iterative"}, {"sha": "7cba59c834706eaeaad860ab0284c0cdf7069beb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -1,3 +1,8 @@\n+2018-09-21  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp113.c: Disable EVRP.\n+\t* gcc.dg/tree-ssa/vrp120.c: New test.\n+\n 2018-09-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87372 - __func__ constexpr evaluation."}, {"sha": "ab8d91e0f10148fa18db71ccf4b81e4a91e54f04", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp113.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp113.c?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdisable-tree-evrp\" } */\n \n int f(int a) {\n     switch (a & 1) {"}, {"sha": "4dcee2341f77856d0194bf1e7882e5887d6be712", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp120.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp120.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp120.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp120.c?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+#include \"vrp113.c\"\n+\n+/* { dg-final { scan-tree-dump \"return 3;\" \"evrp\" } } */"}, {"sha": "ab222a385f6329ca337d2554a167e48abe76b8f4", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -121,10 +121,6 @@ static bitmap need_assert_for;\n    ASSERT_EXPRs for SSA name N_I should be inserted.  */\n static assert_locus **asserts_for;\n \n-vec<edge> to_remove_edges;\n-vec<switch_update> to_update_switch_stmts;\n-\n-\n /* Return the maximum value for TYPE.  */\n \n tree\n@@ -6404,9 +6400,6 @@ vrp_dom_walker::after_dom_children (basic_block bb)\n static void\n identify_jump_threads (class vr_values *vr_values)\n {\n-  int i;\n-  edge e;\n-\n   /* Ugh.  When substituting values earlier in this pass we can\n      wipe the dominance information.  So rebuild the dominator\n      information as we need it within the jump threading code.  */\n@@ -6419,11 +6412,6 @@ identify_jump_threads (class vr_values *vr_values)\n      recompute it.  */\n   mark_dfs_back_edges ();\n \n-  /* Do not thread across edges we are about to remove.  Just marking\n-     them as EDGE_IGNORE will do.  */\n-  FOR_EACH_VEC_ELT (to_remove_edges, i, e)\n-    e->flags |= EDGE_IGNORE;\n-\n   /* Allocate our unwinder stack to unwind any temporary equivalences\n      that might be recorded.  */\n   const_and_copies *equiv_stack = new const_and_copies ();\n@@ -6437,10 +6425,6 @@ identify_jump_threads (class vr_values *vr_values)\n   walker.vr_values = vr_values;\n   walker.walk (cfun->cfg->x_entry_block_ptr);\n \n-  /* Clear EDGE_IGNORE.  */\n-  FOR_EACH_VEC_ELT (to_remove_edges, i, e)\n-    e->flags &= ~EDGE_IGNORE;\n-\n   /* We do not actually update the CFG or SSA graphs at this point as\n      ASSERT_EXPRs are still in the IL and cfg cleanup code does not yet\n      handle ASSERT_EXPRs gracefully.  */\n@@ -6557,9 +6541,6 @@ vrp_prop::vrp_finalize (bool warn_array_bounds_p)\n static unsigned int\n execute_vrp (bool warn_array_bounds_p)\n {\n-  int i;\n-  edge e;\n-  switch_update *su;\n \n   loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n   rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n@@ -6570,8 +6551,6 @@ execute_vrp (bool warn_array_bounds_p)\n      EDGE_DFS_BACK.  */\n   insert_range_assertions ();\n \n-  to_remove_edges.create (10);\n-  to_update_switch_stmts.create (5);\n   threadedge_initialize_values ();\n \n   /* For visiting PHI nodes we need EDGE_DFS_BACK computed.  */\n@@ -6623,35 +6602,7 @@ execute_vrp (bool warn_array_bounds_p)\n      processing by the pass manager.  */\n   thread_through_all_blocks (false);\n \n-  /* Remove dead edges from SWITCH_EXPR optimization.  This leaves the\n-     CFG in a broken state and requires a cfg_cleanup run.  */\n-  FOR_EACH_VEC_ELT (to_remove_edges, i, e)\n-    remove_edge (e);\n-  /* Update SWITCH_EXPR case label vector.  */\n-  FOR_EACH_VEC_ELT (to_update_switch_stmts, i, su)\n-    {\n-      size_t j;\n-      size_t n = TREE_VEC_LENGTH (su->vec);\n-      tree label;\n-      gimple_switch_set_num_labels (su->stmt, n);\n-      for (j = 0; j < n; j++)\n-\tgimple_switch_set_label (su->stmt, j, TREE_VEC_ELT (su->vec, j));\n-      /* As we may have replaced the default label with a regular one\n-\t make sure to make it a real default label again.  This ensures\n-\t optimal expansion.  */\n-      label = gimple_switch_label (su->stmt, 0);\n-      CASE_LOW (label) = NULL_TREE;\n-      CASE_HIGH (label) = NULL_TREE;\n-    }\n-\n-  if (to_remove_edges.length () > 0)\n-    {\n-      free_dominance_info (CDI_DOMINATORS);\n-      loops_state_set (LOOPS_NEED_FIXUP);\n-    }\n-\n-  to_remove_edges.release ();\n-  to_update_switch_stmts.release ();\n+  vrp_prop.vr_values.cleanup_edges_and_switches ();\n   threadedge_finalize_values ();\n \n   scev_finalize ();"}, {"sha": "655cf055f0a2b286bdd89aa1ad8361d2c6b5b395", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -122,13 +122,4 @@ extern int value_inside_range (tree, tree, tree);\n extern tree get_single_symbol (tree, bool *, tree *);\n extern void maybe_set_nonzero_bits (edge, tree);\n extern value_range_type determine_value_range (tree, wide_int *, wide_int *);\n-\n-struct switch_update {\n-  gswitch *stmt;\n-  tree vec;\n-};\n-\n-extern vec<edge> to_remove_edges;\n-extern vec<switch_update> to_update_switch_stmts;\n-\n #endif /* GCC_TREE_VRP_H */"}, {"sha": "6b6a91811f8367fece055a41b15dc4ae3c68896a", "filename": "gcc/vr-values.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"attribs.h\"\n #include \"vr-values.h\"\n+#include \"cfghooks.h\"\n \n /* Set value range VR to a non-negative range of type TYPE.  */\n \n@@ -1918,6 +1919,8 @@ vr_values::vr_values () : vrp_value_range_pool (\"Tree VRP value ranges\")\n   vr_value = XCNEWVEC (value_range *, num_vr_values);\n   vr_phi_edge_counts = XCNEWVEC (int, num_ssa_names);\n   bitmap_obstack_initialize (&vrp_equiv_obstack);\n+  to_remove_edges.create (10);\n+  to_update_switch_stmts.create (5);\n }\n \n /* Free VRP lattice.  */\n@@ -1934,6 +1937,12 @@ vr_values::~vr_values ()\n      and not available.  */\n   vr_value = NULL;\n   vr_phi_edge_counts = NULL;\n+\n+  /* If there are entries left in TO_REMOVE_EDGES or TO_UPDATE_SWITCH_STMTS\n+     then an EVRP client did not clean up properly.  Catch it now rather\n+     than seeing something more obscure later.  */\n+  gcc_assert (to_remove_edges.is_empty ()\n+\t      && to_update_switch_stmts.is_empty ());\n }\n \n \n@@ -3780,6 +3789,7 @@ vr_values::simplify_switch_using_ranges (gswitch *stmt)\n \t}\n       to_remove_edges.safe_push (e);\n       e->flags &= ~EDGE_EXECUTABLE;\n+      e->flags |= EDGE_IGNORE;\n     }\n \n   /* And queue an update for the stmt.  */\n@@ -3789,6 +3799,45 @@ vr_values::simplify_switch_using_ranges (gswitch *stmt)\n   return false;\n }\n \n+void\n+vr_values::cleanup_edges_and_switches (void)\n+{\n+  int i;\n+  edge e;\n+  switch_update *su;\n+\n+  /* Remove dead edges from SWITCH_EXPR optimization.  This leaves the\n+     CFG in a broken state and requires a cfg_cleanup run.  */\n+  FOR_EACH_VEC_ELT (to_remove_edges, i, e)\n+    remove_edge (e);\n+\n+  /* Update SWITCH_EXPR case label vector.  */\n+  FOR_EACH_VEC_ELT (to_update_switch_stmts, i, su)\n+    {\n+      size_t j;\n+      size_t n = TREE_VEC_LENGTH (su->vec);\n+      tree label;\n+      gimple_switch_set_num_labels (su->stmt, n);\n+      for (j = 0; j < n; j++)\n+\tgimple_switch_set_label (su->stmt, j, TREE_VEC_ELT (su->vec, j));\n+      /* As we may have replaced the default label with a regular one\n+\t make sure to make it a real default label again.  This ensures\n+\t optimal expansion.  */\n+      label = gimple_switch_label (su->stmt, 0);\n+      CASE_LOW (label) = NULL_TREE;\n+      CASE_HIGH (label) = NULL_TREE;\n+    }\n+\n+  if (!to_remove_edges.is_empty ())\n+    {\n+      free_dominance_info (CDI_DOMINATORS);\n+      loops_state_set (LOOPS_NEED_FIXUP);\n+    }\n+\n+  to_remove_edges.release ();\n+  to_update_switch_stmts.release ();\n+}\n+\n /* Simplify an integral conversion from an SSA name in STMT.  */\n \n static bool"}, {"sha": "487a800c1ea43075ec9dc96ac65428555530df68", "filename": "gcc/vr-values.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Fvr-values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b66f30438dfac74e4bdcfc7904e9b9cf72b823/gcc%2Fvr-values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.h?ref=35b66f30438dfac74e4bdcfc7904e9b9cf72b823", "patch": "@@ -68,6 +68,9 @@ class vr_values\n   value_range *allocate_value_range (void)\n     { return vrp_value_range_pool.allocate (); }\n \n+  /* */\n+  void cleanup_edges_and_switches (void);\n+\n  private:\n   void add_equivalence (bitmap *, const_tree);\n   bool vrp_stmt_computes_nonzero (gimple *);\n@@ -124,6 +127,19 @@ class vr_values\n      number of executable edges we saw the last time we visited the\n      node.  */\n   int *vr_phi_edge_counts;\n+\n+  /* Vectors of edges that need removing and switch statements that\n+     need updating.  It is expected that a pass using the simplification\n+     routines will, at the end of the pass, clean up the edges and\n+     switch statements.  The class dtor will try to detect cases\n+     that do not follow that expectation.  */\n+  struct switch_update {\n+    gswitch *stmt;\n+    tree vec;\n+  };\n+\n+  vec<edge> to_remove_edges;\n+  vec<switch_update> to_update_switch_stmts;\n };\n \n #define VR_INITIALIZER { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL }"}]}