{"sha": "6405f32f73ca5da46d3b42954f78879aaba58946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwNWYzMmY3M2NhNWRhNDZkM2I0Mjk1NGY3ODg3OWFhYmE1ODk0Ng==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-04-11T19:00:46Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-04-11T19:00:46Z"}, "message": "fold-const.c (fold_binary_op_with_conditional_arg): use fold_buildN instead of \"fold (buildN\" in some non obvious places.\n\n2005-04-11  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * fold-const.c (fold_binary_op_with_conditional_arg):\n        use fold_buildN instead of \"fold (buildN\" in some\n        non obvious places.\n        (fold_unary): Likewise.\n        (fold_binary): Likewise.\n\nFrom-SVN: r97980", "tree": {"sha": "2062b03f4fd4f5dd413c247a297dccb833d10559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2062b03f4fd4f5dd413c247a297dccb833d10559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6405f32f73ca5da46d3b42954f78879aaba58946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6405f32f73ca5da46d3b42954f78879aaba58946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6405f32f73ca5da46d3b42954f78879aaba58946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6405f32f73ca5da46d3b42954f78879aaba58946/comments", "author": null, "committer": null, "parents": [{"sha": "e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e656a499b7dd38b1ae9d7ddac4c6413963374a"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "5ccf583e4833aa0fd4aa4a975c92b6b8b1f44275", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405f32f73ca5da46d3b42954f78879aaba58946/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405f32f73ca5da46d3b42954f78879aaba58946/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6405f32f73ca5da46d3b42954f78879aaba58946", "patch": "@@ -1,3 +1,11 @@\n+2005-04-11  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* fold-const.c (fold_binary_op_with_conditional_arg):\n+\tuse fold_buildN instead of \"fold (buildN\" in some\n+\tnon obvious places.\n+\t(fold_unary): Likewise.\n+\t(fold_binary): Likewise.\n+\n 2005-04-11  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \tFix PR tree-optimization/20612"}, {"sha": "9487d3c49701e7d2ece453cf5db47d65fffd26f0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6405f32f73ca5da46d3b42954f78879aaba58946/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6405f32f73ca5da46d3b42954f78879aaba58946/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6405f32f73ca5da46d3b42954f78879aaba58946", "patch": "@@ -5519,14 +5519,18 @@ fold_binary_op_with_conditional_arg (enum tree_code code,\n   if (lhs == 0)\n     {\n       true_value = fold_convert (cond_type, true_value);\n-      lhs = fold (cond_first_p ? build2 (code, type, true_value, arg)\n-\t\t\t     : build2 (code, type, arg, true_value));\n+      if (cond_first_p)\n+\tlhs = fold_build2 (code, type, true_value, arg);\n+      else\n+\tlhs = fold_build2 (code, type, arg, true_value);\n     }\n   if (rhs == 0)\n     {\n       false_value = fold_convert (cond_type, false_value);\n-      rhs = fold (cond_first_p ? build2 (code, type, false_value, arg)\n-\t\t\t     : build2 (code, type, arg, false_value));\n+      if (cond_first_p)\n+\trhs = fold_build2 (code, type, false_value, arg);\n+      else\n+\trhs = fold_build2 (code, type, arg, false_value);\n     }\n \n   test = fold_build3 (COND_EXPR, type, test, lhs, rhs);\n@@ -6856,9 +6860,9 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t{\n \t  /* Don't leave an assignment inside a conversion\n \t     unless assigning a bitfield.  */\n-\t  tem = build1 (code, type, TREE_OPERAND (op0, 1));\n+\t  tem = fold_build1 (code, type, TREE_OPERAND (op0, 1));\n \t  /* First do the assignment, then return converted constant.  */\n-\t  tem = build2 (COMPOUND_EXPR, TREE_TYPE (tem), op0, fold (tem));\n+\t  tem = build2 (COMPOUND_EXPR, TREE_TYPE (tem), op0, tem);\n \t  TREE_NO_WARNING (tem) = 1;\n \t  TREE_USED (tem) = 1;\n \t  return tem;\n@@ -7949,10 +7953,10 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      if (fcode0 == fcode1 && BUILTIN_EXPONENT_P (fcode0))\n \t\t{\n \t\t  tree expfn = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n-\t\t  tree arg = build2 (PLUS_EXPR, type,\n-\t\t\t\t     TREE_VALUE (TREE_OPERAND (arg0, 1)),\n-\t\t\t\t     TREE_VALUE (TREE_OPERAND (arg1, 1)));\n-\t\t  tree arglist = build_tree_list (NULL_TREE, fold (arg));\n+\t\t  tree arg = fold_build2 (PLUS_EXPR, type,\n+\t\t\t\t\t  TREE_VALUE (TREE_OPERAND (arg0, 1)),\n+\t\t\t\t\t  TREE_VALUE (TREE_OPERAND (arg1, 1)));\n+\t\t  tree arglist = build_tree_list (NULL_TREE, arg);\n \t\t  return build_function_call_expr (expfn, arglist);\n \t\t}\n \n@@ -7972,8 +7976,8 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t  if (operand_equal_p (arg01, arg11, 0))\n \t\t    {\n \t\t      tree powfn = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n-\t\t      tree arg = build2 (MULT_EXPR, type, arg00, arg10);\n-\t\t      tree arglist = tree_cons (NULL_TREE, fold (arg),\n+\t\t      tree arg = fold_build2 (MULT_EXPR, type, arg00, arg10);\n+\t\t      tree arglist = tree_cons (NULL_TREE, arg,\n \t\t\t\t\t\tbuild_tree_list (NULL_TREE,\n \t\t\t\t\t\t\t\t arg01));\n \t\t      return build_function_call_expr (powfn, arglist);\n@@ -9543,11 +9547,10 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t      return omit_one_operand (type, integer_one_node, arg0);\n \t\t    }\n \n-\t\t  tem = build2 (code, type, cval1, cval2);\n \t\t  if (save_p)\n-\t\t    return save_expr (tem);\n+\t\t    return save_expr (build2 (code, type, cval1, cval2));\n \t\t  else\n-\t\t    return fold (tem);\n+\t\t    return fold_build2 (code, type, cval1, cval2);\n \t\t}\n \t    }\n \t}"}]}