{"sha": "7e04426135293ba4db611f38109161f67bf93379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UwNDQyNjEzNTI5M2JhNGRiNjExZjM4MTA5MTYxZjY3YmY5MzM3OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-08-20T16:33:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-08-20T16:33:20Z"}, "message": "coverage.c (coverage_compute_profile_id): Return non-0; also handle symbols with unique name.\n\n\n\t* coverage.c (coverage_compute_profile_id): Return non-0;\n\talso handle symbols with unique name.\n\t(coverage_end_function): Do not skip DECL_EXTERNAL functions.\n\nFrom-SVN: r214232", "tree": {"sha": "98875495707657caef6dd3469a5bf5e5aa680935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98875495707657caef6dd3469a5bf5e5aa680935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e04426135293ba4db611f38109161f67bf93379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e04426135293ba4db611f38109161f67bf93379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e04426135293ba4db611f38109161f67bf93379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e04426135293ba4db611f38109161f67bf93379/comments", "author": null, "committer": null, "parents": [{"sha": "0d43a91d226507093b1451c6039465aaed4b0d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d43a91d226507093b1451c6039465aaed4b0d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d43a91d226507093b1451c6039465aaed4b0d58"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "40c0a99a09d5a98327f49238d9561b966cd79d5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e04426135293ba4db611f38109161f67bf93379/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e04426135293ba4db611f38109161f67bf93379/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e04426135293ba4db611f38109161f67bf93379", "patch": "@@ -1,3 +1,9 @@\n+2014-08-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* coverage.c (coverage_compute_profile_id): Return non-0;\n+\talso handle symbols with unique name.\n+\t(coverage_end_function): Do not skip DECL_EXTERNAL functions.\n+\n 2014-08-20  Steve Ellcey  <sellcey@mips.com>\n \n \tPR middle-end/49191"}, {"sha": "34f975de8630b3256d74aa80fe6ccf9e41a341dd", "filename": "gcc/coverage.c", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e04426135293ba4db611f38109161f67bf93379/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e04426135293ba4db611f38109161f67bf93379/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=7e04426135293ba4db611f38109161f67bf93379", "patch": "@@ -579,7 +579,7 @@ coverage_compute_profile_id (struct cgraph_node *n)\n   unsigned chksum;\n \n   /* Externally visible symbols have unique name.  */\n-  if (TREE_PUBLIC (n->decl) || DECL_EXTERNAL (n->decl))\n+  if (TREE_PUBLIC (n->decl) || DECL_EXTERNAL (n->decl) || n->unique_name)\n     {\n       chksum = coverage_checksum_string\n \t(0, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (n->decl)));\n@@ -601,8 +601,10 @@ coverage_compute_profile_id (struct cgraph_node *n)\n \t(chksum, aux_base_name);\n     }\n \n-  /* Non-negative integers are hopefully small enough to fit in all targets.  */\n-  return chksum & 0x7fffffff;\n+  /* Non-negative integers are hopefully small enough to fit in all targets.\n+     Gcov file formats wants non-zero function IDs.  */\n+  chksum = chksum & 0x7fffffff;\n+  return chksum + (!chksum);\n }\n \n /* Compute cfg checksum for the function FN given as argument.\n@@ -692,30 +694,24 @@ coverage_end_function (unsigned lineno_checksum, unsigned cfg_checksum)\n     {\n       struct coverage_data *item = 0;\n \n-      /* If the function is extern (i.e. extern inline), then we won't\n-\t be outputting it, so don't chain it onto the function\n-\t list.  */\n-      if (!DECL_EXTERNAL (current_function_decl))\n-\t{\n-\t  item = ggc_alloc<coverage_data> ();\n+      item = ggc_alloc<coverage_data> ();\n \n-          if (PARAM_VALUE (PARAM_PROFILE_FUNC_INTERNAL_ID))\n-\t    item->ident = current_function_funcdef_no + 1;\n-          else\n-            {\n-              gcc_assert (coverage_node_map_initialized_p ());\n-              item->ident = cgraph_node::get (cfun->decl)->profile_id;\n-            }\n-\n-\t  item->lineno_checksum = lineno_checksum;\n-\t  item->cfg_checksum = cfg_checksum;\n-\n-\t  item->fn_decl = current_function_decl;\n-\t  item->next = 0;\n-\t  *functions_tail = item;\n-\t  functions_tail = &item->next;\n+      if (PARAM_VALUE (PARAM_PROFILE_FUNC_INTERNAL_ID))\n+\titem->ident = current_function_funcdef_no + 1;\n+      else\n+\t{\n+\t  gcc_assert (coverage_node_map_initialized_p ());\n+\t  item->ident = cgraph_node::get (cfun->decl)->profile_id;\n \t}\n \n+      item->lineno_checksum = lineno_checksum;\n+      item->cfg_checksum = cfg_checksum;\n+\n+      item->fn_decl = current_function_decl;\n+      item->next = 0;\n+      *functions_tail = item;\n+      functions_tail = &item->next;\n+\n       for (i = 0; i != GCOV_COUNTERS; i++)\n \t{\n \t  tree var = fn_v_ctrs[i];"}]}