{"sha": "4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5OGRlZjA2ZjJlYjBmZTkxNjlkNmQ2MWY5MDdmZGE5MWQzM2VhNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-10-03T05:52:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-10-03T05:52:05Z"}, "message": "inclhack.def (glibc_mutex_init): Also fix PTHREAD_MUTEX_(RECURSIVE|ERRORCHECK|ADAPTIVE)_NP and...\n\n\t* inclhack.def (glibc_mutex_init): Also fix\n\tPTHREAD_MUTEX_(RECURSIVE|ERRORCHECK|ADAPTIVE)_NP and\n\tPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP initializers.\n\nFrom-SVN: r117386", "tree": {"sha": "00c426b2364c9235ae1659b9df36e06c02cd0647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c426b2364c9235ae1659b9df36e06c02cd0647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/comments", "author": null, "committer": null, "parents": [{"sha": "6aacba37551b5235eb7958186c308337cfba8a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aacba37551b5235eb7958186c308337cfba8a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aacba37551b5235eb7958186c308337cfba8a0c"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "26b67aae61823d916ab5686548bb3de0c235ba13", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "patch": "@@ -1,9 +1,15 @@\n+2006-10-03  Uros Bizjak <uros@kss-loka.si>\n+\n+\t* inclhack.def (glibc_mutex_init): Also fix\n+\tPTHREAD_MUTEX_(RECURSIVE|ERRORCHECK|ADAPTIVE)_NP and\n+\tPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP initializers.\n+\n 2006-10-01  Uros Bizjak <uros@kss-loka.si>\n \n-        * inclhack.def (glibc_mutex_init): New fix.\n-        * tests/base/pthread.h: Update.\n+\t* inclhack.def (glibc_mutex_init): New fix.\n+\t* tests/base/pthread.h: Update.\n \n-        * fixincl.x: Regenerate.\n+\t* fixincl.x: Regenerate.\n \n 2006-09-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "d6957846ff51ac35f0c6f762acd6e82f877256ae", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday September 30, 2006 at 01:08:07 PM CEST\n+ * It has been AutoGen-ed  Tuesday October  3, 2006 at 07:43:53 AM CEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Sat Sep 30 13:08:07 CEST 2006\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Tue Oct  3 07:43:53 CEST 2006\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -2212,7 +2212,10 @@ static tTestDesc aGlibc_Mutex_InitTests[] = {\n  */\n static const char* apzGlibc_Mutex_InitPatch[] = { \"sed\",\n     \"-e\", \"/define[ \\t]\\\\+PTHREAD_MUTEX_INITIALIZER[ \\t]*\\\\\\\\/,+1s/{ { 0, } }/{ { 0, 0, 0, 0, 0, 0 } }/\",\n+    \"-e\", \"s/{ \\\\(0, 0, 0, 0, PTHREAD_MUTEX_\\\\(RECURSIVE\\\\|ERRORCHECK\\\\|ADAPTIVE\\\\)_NP\\\\) }/{ \\\\1, 0 }/\",\n+    \"-e\", \"s/{ \\\\(0, 0, 0, PTHREAD_MUTEX_\\\\(RECURSIVE\\\\|ERRORCHECK\\\\|ADAPTIVE\\\\)_NP\\\\) }/{ \\\\1, 0, 0 }/\",\n     \"-e\", \"/define[ \\t]\\\\+PTHREAD_RWLOCK_INITIALIZER[ \\t]*\\\\\\\\/N;s/^[ \\t]*#[ \\t]*\\\\(define[ \\t]\\\\+PTHREAD_RWLOCK_INITIALIZER[ \\t]*\\\\\\\\\\\\)\\\\n[ \\t]*{ { 0, } }/# if __WORDSIZE == 64\\\\n#  \\\\1\\\\n  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\\\\n# else\\\\n#  \\\\1\\\\n  { { 0, 0, 0, 0, 0, 0, 0, 0 } }\\\\n# endif/\",\n+    \"-e\", \"s/{ \\\\(0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP\\\\) }/{ \\\\1, 0 }/\",\n     \"-e\", \"/define[ \\t]\\\\+PTHREAD_COND_INITIALIZER/s/{ { 0, } }/{ { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }/\",\n     (char*)NULL };\n "}, {"sha": "a1cdab17b53a7961e393d62285b7896441569100", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "patch": "@@ -1298,6 +1298,8 @@ fix = {\n     select   = '\\{ *\\{ *0, *\\} *\\}';\n     sed      = \"/define[ \\t]\\\\+PTHREAD_MUTEX_INITIALIZER[ \\t]*\\\\\\\\/,+1\"\n                \"s/{ { 0, } }/{ { 0, 0, 0, 0, 0, 0 } }/\";\n+    sed      = \"s/{ \\\\(0, 0, 0, 0, PTHREAD_MUTEX_\\\\(RECURSIVE\\\\|ERRORCHECK\\\\|ADAPTIVE\\\\)_NP\\\\) }/{ \\\\1, 0 }/\";\n+    sed      = \"s/{ \\\\(0, 0, 0, PTHREAD_MUTEX_\\\\(RECURSIVE\\\\|ERRORCHECK\\\\|ADAPTIVE\\\\)_NP\\\\) }/{ \\\\1, 0, 0 }/\";\n     sed      = \"/define[ \\t]\\\\+PTHREAD_RWLOCK_INITIALIZER[ \\t]*\\\\\\\\/\"\n                \"N;s/^[ \\t]*#[ \\t]*\"\n                \"\\\\(define[ \\t]\\\\+PTHREAD_RWLOCK_INITIALIZER[ \\t]*\\\\\\\\\\\\)\\\\n\"\n@@ -1308,15 +1310,44 @@ fix = {\n                \"#  \\\\1\\\\n\"\n                \"  { { 0, 0, 0, 0, 0, 0, 0, 0 } }\\\\n\"\n                \"# endif/\";\n+    sed      = \"s/{ \\\\(0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP\\\\) }/{ \\\\1, 0 }/\";\n     sed      = \"/define[ \\t]\\\\+PTHREAD_COND_INITIALIZER/\"\n                \"s/{ { 0, } }/{ { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }/\";\n \n-    test_text =\n-    \"#define PTHREAD_MUTEX_INITIALIZER \\\\\\\\\\n\"\n-    \"  { { 0, } }\\n\"\n-    \"# define PTHREAD_RWLOCK_INITIALIZER \\\\\\\\\\n\"\n-    \"  { { 0, } }\\n\"\n-    \"#define PTHREAD_COND_INITIALIZER { { 0, } }\";\n+    test_text = <<- _EOText_\n+#define PTHREAD_MUTEX_INITIALIZER \\\\\n+  { { 0, } }\n+#ifdef __USE_GNU\n+# if __WORDSIZE == 64\n+#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP } }\n+#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP } }\n+#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP } }\n+# else\n+#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP } }\n+#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP } }\n+#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP } }\n+# endif\n+#endif\n+# define PTHREAD_RWLOCK_INITIALIZER \\\\\n+  { { 0, } }\n+# ifdef __USE_GNU\n+#  if __WORDSIZE == 64\n+#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\t\t      \\\\\n+      PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }\n+#  else\n+#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\\\n+  { { 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }\n+#  endif\n+# endif\n+#define PTHREAD_COND_INITIALIZER { { 0, } }\n+_EOText_;\n };\n \n "}, {"sha": "e75a6ee0e330cb4cdd8bd6d70e7893b157829c46", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d98def06f2eb0fe9169d6d61f907fda91d33ea4/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=4d98def06f2eb0fe9169d6d61f907fda91d33ea4", "patch": "@@ -59,13 +59,40 @@\n #if defined( GLIBC_MUTEX_INIT_CHECK )\n #define PTHREAD_MUTEX_INITIALIZER \\\n   { { 0, 0, 0, 0, 0, 0 } }\n+#ifdef __USE_GNU\n+# if __WORDSIZE == 64\n+#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\n+  { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0 } }\n+#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\n+  { { 0, 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, 0 } }\n+#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\n+  { { 0, 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP, 0 } }\n+# else\n+#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\n+  { { 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0 } }\n+#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\n+  { { 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, 0, 0 } }\n+#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\n+  { { 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP, 0, 0 } }\n+# endif\n+#endif\n # if __WORDSIZE == 64\n #  define PTHREAD_RWLOCK_INITIALIZER \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n # else\n #  define PTHREAD_RWLOCK_INITIALIZER \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0 } }\n # endif\n+# ifdef __USE_GNU\n+#  if __WORDSIZE == 64\n+#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\t\t      \\\n+      PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }\n+#  else\n+#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\n+  { { 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 0 } }\n+#  endif\n+# endif\n #define PTHREAD_COND_INITIALIZER { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }\n #endif  /* GLIBC_MUTEX_INIT_CHECK */\n "}]}