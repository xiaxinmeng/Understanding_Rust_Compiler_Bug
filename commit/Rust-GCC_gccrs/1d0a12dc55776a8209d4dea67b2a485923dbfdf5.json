{"sha": "1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQwYTEyZGM1NTc3NmE4MjA5ZDRkZWE2N2IyYTQ4NTkyM2RiZmRmNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-01-17T03:15:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-01-17T03:15:52Z"}, "message": "DR 488 PR libstdc++/58357\n\n\tDR 488\n\tPR libstdc++/58357\n\t* include/bits/algorithmfwd.h (rotate): Return an iterator.\n\t* include/bits/stl_algo.h (rotate, __rotate): Likewise.\n\t* testsuite/25_algorithms/rotate/dr488.cc: New.\n\t* testsuite/25_algorithms/rotate/check_type.cc: Adjust function type.\n\t* testsuite/25_algorithms/rotate/requirements/explicit_instantiation/\n\t2.cc: Likewise.\n\t* testsuite/25_algorithms/rotate/requirements/explicit_instantiation/\n\tpod.cc: Likewise.\n\nFrom-SVN: r219793", "tree": {"sha": "3f74350c4458de998a6b0411e80f309d377e4151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f74350c4458de998a6b0411e80f309d377e4151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed381270dc77cc5dd8f1a761fa66eeb5ebdc189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed381270dc77cc5dd8f1a761fa66eeb5ebdc189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed381270dc77cc5dd8f1a761fa66eeb5ebdc189"}], "stats": {"total": 160, "additions": 134, "deletions": 26}, "files": [{"sha": "4b151e9663b498ecc4f5b305edb88af016f5a71e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "patch": "@@ -1,3 +1,16 @@\n+2015-01-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tDR 488\n+\tPR libstdc++/58357\n+\t* include/bits/algorithmfwd.h (rotate): Return an iterator.\n+\t* include/bits/stl_algo.h (rotate, __rotate): Likewise.\n+\t* testsuite/25_algorithms/rotate/dr488.cc: New.\n+\t* testsuite/25_algorithms/rotate/check_type.cc: Adjust function type.\n+\t* testsuite/25_algorithms/rotate/requirements/explicit_instantiation/\n+\t2.cc: Likewise.\n+\t* testsuite/25_algorithms/rotate/requirements/explicit_instantiation/\n+\tpod.cc: Likewise.\n+\n 2015-01-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60940"}, {"sha": "11361bb948af4296a6f40372a0ead17c7f4734b1", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "patch": "@@ -531,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     reverse_copy(_BIter, _BIter, _OIter);\n \n   template<typename _FIter>\n-    void \n+    _FIter\n     rotate(_FIter, _FIter, _FIter);\n \n   template<typename _FIter, typename _OIter>"}, {"sha": "3325b9499ccd87ec963d61d51b1993f86b43fcca", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "patch": "@@ -1239,14 +1239,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the rotate algorithm.\n   template<typename _ForwardIterator>\n-    void\n+    _ForwardIterator\n     __rotate(_ForwardIterator __first,\n \t     _ForwardIterator __middle,\n \t     _ForwardIterator __last,\n \t     forward_iterator_tag)\n     {\n-      if (__first == __middle || __last  == __middle)\n-\treturn;\n+      if (__first == __middle)\n+\treturn __last;\n+      else if (__last  == __middle)\n+\treturn __first;\n \n       _ForwardIterator __first2 = __middle;\n       do\n@@ -1259,6 +1261,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       while (__first2 != __last);\n \n+      _ForwardIterator __ret = __first;\n+\n       __first2 = __middle;\n \n       while (__first2 != __last)\n@@ -1271,11 +1275,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  else if (__first2 == __last)\n \t    __first2 = __middle;\n \t}\n+      return __ret;\n     }\n \n    /// This is a helper function for the rotate algorithm.\n   template<typename _BidirectionalIterator>\n-    void\n+    _BidirectionalIterator\n     __rotate(_BidirectionalIterator __first,\n \t     _BidirectionalIterator __middle,\n \t     _BidirectionalIterator __last,\n@@ -1285,8 +1290,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n \t\t\t\t  _BidirectionalIterator>)\n \n-      if (__first == __middle || __last  == __middle)\n-\treturn;\n+      if (__first == __middle)\n+\treturn __last;\n+      else if (__last  == __middle)\n+\treturn __first;\n \n       std::__reverse(__first,  __middle, bidirectional_iterator_tag());\n       std::__reverse(__middle, __last,   bidirectional_iterator_tag());\n@@ -1298,14 +1305,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       if (__first == __middle)\n-\tstd::__reverse(__middle, __last,   bidirectional_iterator_tag());\n+\t{\n+\t  std::__reverse(__middle, __last,   bidirectional_iterator_tag());\n+\t  return __last;\n+\t}\n       else\n-\tstd::__reverse(__first,  __middle, bidirectional_iterator_tag());\n+\t{\n+\t  std::__reverse(__first,  __middle, bidirectional_iterator_tag());\n+\t  return __first;\n+\t}\n     }\n \n   /// This is a helper function for the rotate algorithm.\n   template<typename _RandomAccessIterator>\n-    void\n+    _RandomAccessIterator\n     __rotate(_RandomAccessIterator __first,\n \t     _RandomAccessIterator __middle,\n \t     _RandomAccessIterator __last,\n@@ -1315,8 +1328,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t\t\t\t  _RandomAccessIterator>)\n \n-      if (__first == __middle || __last  == __middle)\n-\treturn;\n+      if (__first == __middle)\n+\treturn __last;\n+      else if (__last  == __middle)\n+\treturn __first;\n \n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n \t_Distance;\n@@ -1329,10 +1344,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__k == __n - __k)\n \t{\n \t  std::swap_ranges(__first, __middle, __middle);\n-\t  return;\n+\t  return __middle;\n \t}\n \n       _RandomAccessIterator __p = __first;\n+      _RandomAccessIterator __ret = __first + (__last - __middle);\n \n       for (;;)\n \t{\n@@ -1343,7 +1359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  _ValueType __t = _GLIBCXX_MOVE(*__p);\n \t\t  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);\n \t\t  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);\n-\t\t  return;\n+\t\t  return __ret;\n \t\t}\n \t      _RandomAccessIterator __q = __p + __k;\n \t      for (_Distance __i = 0; __i < __n - __k; ++ __i)\n@@ -1354,7 +1370,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      __n %= __k;\n \t      if (__n == 0)\n-\t\treturn;\n+\t\treturn __ret;\n \t      std::swap(__n, __k);\n \t      __k = __n - __k;\n \t    }\n@@ -1366,7 +1382,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));\n \t\t  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);\n \t\t  *__p = _GLIBCXX_MOVE(__t);\n-\t\t  return;\n+\t\t  return __ret;\n \t\t}\n \t      _RandomAccessIterator __q = __p + __n;\n \t      __p = __q - __k;\n@@ -1378,19 +1394,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      __n %= __k;\n \t      if (__n == 0)\n-\t\treturn;\n+\t\treturn __ret;\n \t      std::swap(__n, __k);\n \t    }\n \t}\n     }\n \n+   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+   // DR 488. rotate throws away useful information\n   /**\n    *  @brief Rotate the elements of a sequence.\n    *  @ingroup mutating_algorithms\n    *  @param  __first   A forward iterator.\n    *  @param  __middle  A forward iterator.\n    *  @param  __last    A forward iterator.\n-   *  @return  Nothing.\n+   *  @return  first + (last - middle).\n    *\n    *  Rotates the elements of the range @p [__first,__last) by \n    *  @p (__middle - __first) positions so that the element at @p __middle\n@@ -1406,7 +1424,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  for each @p n in the range @p [0,__last-__first).\n   */\n   template<typename _ForwardIterator>\n-    inline void\n+    inline _ForwardIterator\n     rotate(_ForwardIterator __first, _ForwardIterator __middle,\n \t   _ForwardIterator __last)\n     {\n@@ -1416,8 +1434,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n \n-      std::__rotate(__first, __middle, __last,\n-\t\t    std::__iterator_category(__first));\n+      return std::__rotate(__first, __middle, __last,\n+\t\t\t   std::__iterator_category(__first));\n     }\n \n   /**"}, {"sha": "9d4c3828a380d69741840fad2037416deca8143d", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/check_type.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fcheck_type.cc?ref=1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "patch": "@@ -26,19 +26,19 @@ struct X { };\n \n bool operator<(X,X) { return true;}\n \n-void\n+__gnu_test::forward_iterator_wrapper<X>\n test1(__gnu_test::forward_iterator_wrapper<X>& begin,\n       __gnu_test::forward_iterator_wrapper<X>& middle,\n       __gnu_test::forward_iterator_wrapper<X>& end)\n { return std::rotate(begin,middle,end); }\n \n-void\n+__gnu_test::bidirectional_iterator_wrapper<X>\n test1(__gnu_test::bidirectional_iterator_wrapper<X>& begin,\n       __gnu_test::bidirectional_iterator_wrapper<X>& middle,\n       __gnu_test::bidirectional_iterator_wrapper<X>& end)\n { return std::rotate(begin,middle,end); }\n \n-void\n+__gnu_test::random_access_iterator_wrapper<X>\n test1(__gnu_test::random_access_iterator_wrapper<X>& begin,\n       __gnu_test::random_access_iterator_wrapper<X>& middle,\n       __gnu_test::random_access_iterator_wrapper<X>& end)"}, {"sha": "60bd03308ef37320f88286547cfcc06a8f60a08e", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/dr488.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fdr488.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fdr488.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fdr488.cc?ref=1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <forward_list>\n+#include <list>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+template<typename Container>\n+void\n+test(Container& c)\n+{\n+  int size = std::distance(c.begin(), c.end());\n+  for (int i=0; i < size; ++i)\n+  {\n+    auto first = c.begin(), middle = std::next(first, i), last = c.end();\n+    auto r = std::rotate(first, middle, last);\n+    auto expected = std::next(first, std::distance(middle, last));\n+    VERIFY( r == expected );\n+  }\n+}\n+\n+void\n+test01()\n+{\n+  // test random access iterators\n+  std::vector<int> v{ 0, 1, 2, 3, 4 };\n+  test(v);\n+  v.push_back(5);\n+  test(v);\n+}\n+\n+void\n+test02()\n+{\n+  // test bidirectional iterators\n+  std::list<int> l{ 0, 1, 2, 3, 4 };\n+  test(l);\n+  l.push_back(5);\n+  test(l);\n+}\n+\n+void\n+test03()\n+{\n+  // test forward iterators\n+  std::forward_list<int> l{ 0, 1, 2, 3, 4 };\n+  test(l);\n+  l.push_front(5);\n+  test(l);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "ec8c917801eb78f11b9775730dffed8943f7fcae", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "patch": "@@ -30,5 +30,5 @@ namespace std\n   typedef NonDefaultConstructible \t\tvalue_type;\n   typedef value_type* \t\titerator_type;\n \n-  template void rotate(iterator_type, iterator_type, iterator_type);\n+  template iterator_type rotate(iterator_type, iterator_type, iterator_type);\n } "}, {"sha": "c24ee70c0c8245158c258d104d1f32fa9739ba0e", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0a12dc55776a8209d4dea67b2a485923dbfdf5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=1d0a12dc55776a8209d4dea67b2a485923dbfdf5", "patch": "@@ -30,5 +30,5 @@ namespace std\n   typedef pod_int \t\tvalue_type;\n   typedef value_type* \t\titerator_type;\n \n-  template void rotate(iterator_type, iterator_type, iterator_type);\n+  template iterator_type rotate(iterator_type, iterator_type, iterator_type);\n } "}]}