{"sha": "4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "node_id": "C_kwDOANBUbNoAKDRkMDIxYjhlZmI2Y2RkZGQ2ZmM4NjA3MzhmMGI2YzdhYjIwMjJmZTc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-02T15:53:30Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-04T07:37:38Z"}, "message": "ast: Dump Traits properly", "tree": {"sha": "d306b2eb73c06ddc15193e359426bf6139891d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d306b2eb73c06ddc15193e359426bf6139891d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad8ec6da7a871debda2e4ce94a63696b7d43422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad8ec6da7a871debda2e4ce94a63696b7d43422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad8ec6da7a871debda2e4ce94a63696b7d43422"}], "stats": {"total": 104, "additions": 79, "deletions": 25}, "files": [{"sha": "cdcb5632cc7451dee8b64aa44fce65dc81934e2d", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "patch": "@@ -514,25 +514,91 @@ void\n Dump::visit (StaticItem &static_item)\n {}\n \n+void\n+Dump::format_function_common (std::unique_ptr<Type> &return_type,\n+\t\t\t      std::unique_ptr<BlockExpr> &block)\n+{\n+  if (return_type)\n+    {\n+      stream << \"-> \";\n+      return_type->accept_vis (*this);\n+    }\n+\n+  if (block)\n+    {\n+      if (return_type)\n+\tstream << ' ';\n+      block->accept_vis (*this);\n+    }\n+  else\n+    stream << \";\\n\";\n+}\n+\n void\n Dump::visit (TraitItemFunc &item)\n-{}\n+{\n+  auto func = item.get_trait_function_decl ();\n+  stream << indentation << \"fn \" << func.get_identifier () << '(';\n+\n+  auto &params = func.get_function_params ();\n+  for (auto &param : params)\n+    {\n+      stream << \", \";\n+      format_function_param (param);\n+    }\n+\n+  stream << \") \";\n+\n+  format_function_common (func.get_return_type (), item.get_definition ());\n+}\n \n void\n Dump::visit (TraitItemMethod &item)\n-{}\n+{\n+  auto method = item.get_trait_method_decl ();\n+  stream << indentation << \"fn \" << method.get_identifier () << '(';\n+\n+  auto &self = method.get_self_param ();\n+  stream << self.as_string ();\n+\n+  auto &params = method.get_function_params ();\n+  for (auto &param : params)\n+    {\n+      stream << \", \";\n+      format_function_param (param);\n+    }\n+\n+  stream << \") \";\n+\n+  format_function_common (method.get_return_type (), item.get_definition ());\n+}\n \n void\n Dump::visit (TraitItemConst &item)\n-{}\n+{\n+  stream << indentation << \"const \" << item.get_identifier () << \": \";\n+  item.get_type ()->accept_vis (*this);\n+  stream << \";\\n\";\n+}\n \n void\n Dump::visit (TraitItemType &item)\n-{}\n+{\n+  stream << indentation << \"type \" << item.get_identifier () << \";\\n\";\n+}\n \n void\n Dump::visit (Trait &trait)\n-{}\n+{\n+  stream << \"trait \" << trait.get_identifier () << \" {\\n\";\n+  indentation.increment ();\n+\n+  for (auto &item : trait.get_trait_items ())\n+    item->accept_vis (*this);\n+\n+  indentation.decrement ();\n+  stream << \"\\n}\\n\";\n+}\n \n void\n Dump::visit (InherentImpl &impl)"}, {"sha": "e6c6ca4bc6f4d38cb81e6aa9d5842db3b9420404", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "patch": "@@ -55,6 +55,10 @@ class Dump : public ASTVisitor\n   std::ostream &stream;\n   Indent indentation;\n \n+  // Format together common items of functions: Parameters, return type, block\n+  void format_function_common (std::unique_ptr<Type> &return_type,\n+\t\t\t       std::unique_ptr<BlockExpr> &block);\n+\n   /**\n    * Format a function's definition parameter\n    */"}, {"sha": "6d953fb128c5e5865868a90dd731b50094127061", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=4d021b8efb6cdddd6fc860738f0b6c7ab2022fe7", "patch": "@@ -2872,11 +2872,7 @@ struct TraitFunctionDecl\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<Type> &get_return_type ()\n-  {\n-    rust_assert (has_return_type ());\n-    return return_type;\n-  }\n+  std::unique_ptr<Type> &get_return_type () { return return_type; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   WhereClause &get_where_clause () { return where_clause; }\n@@ -2954,11 +2950,7 @@ class TraitItemFunc : public TraitItem\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<BlockExpr> &get_definition ()\n-  {\n-    rust_assert (has_definition ());\n-    return block_expr;\n-  }\n+  std::unique_ptr<BlockExpr> &get_definition () { return block_expr; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   TraitFunctionDecl &get_trait_function_decl ()\n@@ -3097,11 +3089,7 @@ struct TraitMethodDecl\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<Type> &get_return_type ()\n-  {\n-    rust_assert (has_return_type ());\n-    return return_type;\n-  }\n+  std::unique_ptr<Type> &get_return_type () { return return_type; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   WhereClause &get_where_clause () { return where_clause; }\n@@ -3189,11 +3177,7 @@ class TraitItemMethod : public TraitItem\n   }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<BlockExpr> &get_definition ()\n-  {\n-    rust_assert (has_definition ());\n-    return block_expr;\n-  }\n+  std::unique_ptr<BlockExpr> &get_definition () { return block_expr; }\n \n protected:\n   // Clone function implementation as (not pure) virtual method"}]}