{"sha": "8fc4af0f11b77630079ff1e33a527d933aca1ee0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjNGFmMGYxMWI3NzYzMDA3OWZmMWUzM2E1MjdkOTMzYWNhMWVlMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@ultra.linux.cz", "date": "1999-06-21T17:52:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-06-21T17:52:47Z"}, "message": "Jakub Jelinek <jj@ultra.linux.cz>\n\nJakub Jelinek  <jj@ultra.linux.cz>\n        * real.c (ereal_from_double): Fix for 64-bit big endian hosts.\n        * emit-rtl.c (gen_lowpart_common): Add case for hosts where double\n        fits in HOST_WIDE_INT and one uses union to access a long constant\n        as double.\n\nFrom-SVN: r27675", "tree": {"sha": "f88a2e0fc3c24e36bc72c12f112b74f2249cbb76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f88a2e0fc3c24e36bc72c12f112b74f2249cbb76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc4af0f11b77630079ff1e33a527d933aca1ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc4af0f11b77630079ff1e33a527d933aca1ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc4af0f11b77630079ff1e33a527d933aca1ee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc4af0f11b77630079ff1e33a527d933aca1ee0/comments", "author": null, "committer": null, "parents": [{"sha": "2be15d0fe6c4baaa54a75580fc5333c4b092009f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be15d0fe6c4baaa54a75580fc5333c4b092009f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be15d0fe6c4baaa54a75580fc5333c4b092009f"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "2d76c2c73cb2fd178fa9dd71c306456add2b4e15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc4af0f11b77630079ff1e33a527d933aca1ee0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc4af0f11b77630079ff1e33a527d933aca1ee0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fc4af0f11b77630079ff1e33a527d933aca1ee0", "patch": "@@ -1,3 +1,10 @@\n+1999-06-21  Jakub Jelinek  <jj@ultra.linux.cz>\n+\n+\t* real.c (ereal_from_double): Fix for 64-bit big endian hosts.\n+\t* emit-rtl.c (gen_lowpart_common): Add case for hosts where double\n+\tfits in HOST_WIDE_INT and one uses union to access a long constant\n+\tas double.\n+\n Mon Jun 21 17:18:25 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* sparc.c (sparc_override_options): Don't allow profiling for"}, {"sha": "0b310f2fa67e0fc9f25c2a8ec84154cf49668bb8", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc4af0f11b77630079ff1e33a527d933aca1ee0/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc4af0f11b77630079ff1e33a527d933aca1ee0/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8fc4af0f11b77630079ff1e33a527d933aca1ee0", "patch": "@@ -896,6 +896,22 @@ gen_lowpart_common (mode, x)\n       r = REAL_VALUE_FROM_TARGET_SINGLE (i);\n       return CONST_DOUBLE_FROM_REAL_VALUE (r, mode);\n     }\n+  else if (((HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n+\t     && HOST_BITS_PER_WIDE_INT == BITS_PER_WORD)\n+\t    || flag_pretend_float)\n+\t   && GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t   && GET_MODE_SIZE (mode) == UNITS_PER_WORD\n+\t   && GET_CODE (x) == CONST_INT\n+\t   && (sizeof (double) * HOST_BITS_PER_CHAR\n+\t       == HOST_BITS_PER_WIDE_INT))\n+    {\n+      REAL_VALUE_TYPE r;\n+      HOST_WIDE_INT i;\n+\n+      i = INTVAL (x);\n+      r = REAL_VALUE_FROM_TARGET_DOUBLE (&i);\n+      return CONST_DOUBLE_FROM_REAL_VALUE (r, mode);\n+    }\n #endif\n \n   /* Similarly, if this is converting a floating-point value into a"}, {"sha": "2d615757af1606fc8f575892a6178a9707bb7afd", "filename": "gcc/real.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc4af0f11b77630079ff1e33a527d933aca1ee0/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc4af0f11b77630079ff1e33a527d933aca1ee0/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=8fc4af0f11b77630079ff1e33a527d933aca1ee0", "patch": "@@ -6400,17 +6400,19 @@ ereal_from_double (d)\n   /* Convert array of HOST_WIDE_INT to equivalent array of 16-bit pieces.  */\n   if (REAL_WORDS_BIG_ENDIAN)\n     {\n+#if HOST_BITS_PER_WIDE_INT == 32\n       s[0] = (unsigned EMUSHORT) (d[0] >> 16);\n       s[1] = (unsigned EMUSHORT) d[0];\n-#if HOST_BITS_PER_WIDE_INT == 32\n       s[2] = (unsigned EMUSHORT) (d[1] >> 16);\n       s[3] = (unsigned EMUSHORT) d[1];\n #else\n       /* In this case the entire target double is contained in the\n \t first array element.  The second element of the input is\n \t ignored.  */\n-      s[2] = (unsigned EMUSHORT) (d[0] >> 48);\n-      s[3] = (unsigned EMUSHORT) (d[0] >> 32);\n+      s[0] = (unsigned EMUSHORT) (d[0] >> 48);\n+      s[1] = (unsigned EMUSHORT) (d[0] >> 32);\n+      s[2] = (unsigned EMUSHORT) (d[0] >> 16);\n+      s[3] = (unsigned EMUSHORT) d[0];\n #endif\n     }\n   else"}]}