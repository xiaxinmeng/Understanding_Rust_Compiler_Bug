{"sha": "9105f6718c685ed7f972a94265afe181534c96ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwNWY2NzE4YzY4NWVkN2Y5NzJhOTQyNjVhZmUxODE1MzRjOTZlZg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-30T08:11:41Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-30T08:11:41Z"}, "message": "objc-act.c (lang_init, [...]): Remove redundant code, assuming doing_objc_thang is true.\n\n        * objc/objc-act.c (lang_init, finish_file, maybe_objc_comptypes,\n        maybe_objc_check_decl, build_objc_string_object,\n        objc_declare_alias, objc_declare_class, build_message_expr,\n        build_protocol_expr, build_selector_expr, build_encode_expr,\n        get_class_ivars, start_class, start_protocol): Remove\n        redundant code, assuming doing_objc_thang is true.\n\nFrom-SVN: r37866", "tree": {"sha": "d78b853b62111d5d09140336c52d17c73a75fab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d78b853b62111d5d09140336c52d17c73a75fab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9105f6718c685ed7f972a94265afe181534c96ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9105f6718c685ed7f972a94265afe181534c96ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9105f6718c685ed7f972a94265afe181534c96ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9105f6718c685ed7f972a94265afe181534c96ef/comments", "author": null, "committer": null, "parents": [{"sha": "1f80ea952d035e2d354bd20b6e8aa3c2235fbb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f80ea952d035e2d354bd20b6e8aa3c2235fbb56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f80ea952d035e2d354bd20b6e8aa3c2235fbb56"}], "stats": {"total": 56, "additions": 14, "deletions": 42}, "files": [{"sha": "7d1efd2fdb1f3507c84f1e190a0d3b55d1273e07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9105f6718c685ed7f972a94265afe181534c96ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9105f6718c685ed7f972a94265afe181534c96ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9105f6718c685ed7f972a94265afe181534c96ef", "patch": "@@ -1,3 +1,12 @@\n+2000-11-30  Neil Booth  <neilb@earthling.net>\n+\n+        * objc/objc-act.c (lang_init, finish_file, maybe_objc_comptypes,\n+        maybe_objc_check_decl, build_objc_string_object,\n+        objc_declare_alias, objc_declare_class, build_message_expr,\n+        build_protocol_expr, build_selector_expr, build_encode_expr,\n+        get_class_ivars, start_class, start_protocol): Remove\n+        redundant code, assuming doing_objc_thang is true.\n+\n 2000-11-29  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c (restore_unscaled_index_insn_codes): Delete procedure."}, {"sha": "f983e879b706009fd15ae5e376de7ddcbb4c0ea0", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 42, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9105f6718c685ed7f972a94265afe181534c96ef/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9105f6718c685ed7f972a94265afe181534c96ef/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9105f6718c685ed7f972a94265afe181534c96ef", "patch": "@@ -736,8 +736,7 @@ lang_init ()\n \n   objc_ellipsis_node = make_node (ERROR_MARK);\n \n-  if (doing_objc_thang)\n-    init_objc ();\n+  init_objc ();\n \n   if (print_struct_values)\n     generate_struct_by_value_array ();\n@@ -755,8 +754,7 @@ objc_fatal ()\n void\n finish_file ()\n {\n-  if (doing_objc_thang)\n-    finish_objc ();\t\t/* Objective-C finalization */\n+  finish_objc ();\t\t/* Objective-C finalization */\n \n   if (gen_declaration_file)\n     fclose (gen_declaration_file);\n@@ -851,9 +849,7 @@ maybe_objc_comptypes (lhs, rhs, reflexive)\n      tree lhs, rhs;\n      int reflexive;\n {\n-  if (doing_objc_thang)\n-    return objc_comptypes (lhs, rhs, reflexive);\n-  return -1;\n+  return objc_comptypes (lhs, rhs, reflexive);\n }\n \n static tree\n@@ -1095,8 +1091,7 @@ void\n maybe_objc_check_decl (decl)\n      tree decl;\n {\n-  if (doing_objc_thang)\n-    objc_check_decl (decl);\n+  objc_check_decl (decl);\n }\n \n /* Implement static typing.  At this point, we know we have an interface.  */\n@@ -1415,9 +1410,6 @@ build_objc_string_object (strings)\n   tree string, initlist, constructor;\n   int length;\n \n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   if (lookup_interface (constant_string_id) == NULL_TREE)\n     {\n       error (\"Cannot find interface declaration for `%s'\",\n@@ -2452,9 +2444,6 @@ objc_declare_alias (alias_ident, class_ident)\n      tree alias_ident;\n      tree class_ident;\n {\n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   if (is_class_name (class_ident) != class_ident)\n     warning (\"Cannot find class `%s'\", IDENTIFIER_POINTER (class_ident));\n   else if (is_class_name (alias_ident))\n@@ -2469,9 +2458,6 @@ objc_declare_class (ident_list)\n {\n   tree list;\n \n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   for (list = ident_list; list; list = TREE_CHAIN (list))\n     {\n       tree ident = TREE_VALUE (list);\n@@ -4942,9 +4928,6 @@ build_message_expr (mess)\n   /* 1 if this is sending to the superclass.  */\n   int super;\n \n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   if (TREE_CODE (receiver) == ERROR_MARK)\n     return error_mark_node;\n \n@@ -5355,12 +5338,7 @@ build_protocol_expr (protoname)\n      tree protoname;\n {\n   tree expr;\n-  tree p;\n-\n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n-  p = lookup_protocol (protoname);\n+  tree p = lookup_protocol (protoname);\n \n   if (!p)\n     {\n@@ -5385,9 +5363,6 @@ build_selector_expr (selnamelist)\n {\n   tree selname;\n \n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   /* Obtain the full selector name.  */\n   if (TREE_CODE (selnamelist) == IDENTIFIER_NODE)\n     /* A unary selector.  */\n@@ -5410,9 +5385,6 @@ build_encode_expr (type)\n   tree result;\n   const char *string;\n \n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   encode_type (type, obstack_object_size (&util_obstack),\n \t       OBJC_ENCODE_INLINE_DEFS);\n   obstack_1grow (&util_obstack, 0);    /* null terminate string */\n@@ -5935,9 +5907,6 @@ tree\n get_class_ivars (interface)\n      tree interface;\n {\n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   return build_ivar_chain (interface, 1);\n }\n \f\n@@ -6138,9 +6107,6 @@ start_class (code, class_name, super_name, protocol_list)\n {\n   tree class, decl;\n \n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   class = make_node (code);\n   TYPE_BINFO (class) = make_tree_vec (5);\n \n@@ -6450,9 +6416,6 @@ start_protocol (code, name, list)\n {\n   tree protocol;\n \n-  if (!doing_objc_thang)\n-    objc_fatal ();\n-\n   /* This is as good a place as any.  Need to invoke push_tag_toplevel.  */\n   if (!objc_protocol_template)\n     objc_protocol_template = build_protocol_template ();"}]}