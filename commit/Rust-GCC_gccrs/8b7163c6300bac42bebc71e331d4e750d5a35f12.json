{"sha": "8b7163c6300bac42bebc71e331d4e750d5a35f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3MTYzYzYzMDBiYWM0MmJlYmM3MWUzMzFkNGU3NTBkNWEzNWYxMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-01-02T22:08:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-01-02T22:08:18Z"}, "message": "re PR target/78967 (inserts are not effective)\n\n target/78967\n\t* config/i386/i386.md (UNSPEC_NOREX_MEM): New unspec.\n\t(*insvqi_1): New insn pattern.\n\t(*insvqi_1_mem_rex64): Ditto.\n\t(*insvqi_2): Ditto.\n\t(*insvqi_3): Rename from *insvqi.\n\n\t(*extzvqi_mem_rex64): Add UNSPEC_NOREX_MEM tag.\n\ntestsuite/ChangeLog:\n\n\tPR target/78967\n\t* gcc.target/i386/pr78967-1.c: New test.\n\t* gcc.target/i386/pr78967-2.c: Ditto.\n\t* gcc.target/i386/pr78967-3.c: Ditto.\n\n\t* gcc.target/i386/pr78904-2.c: Tighten scan-asm patterns.\n\t* gcc.target/i386/pr78904-4.c: Ditto.\n\t* gcc.target/i386/pr78904-6.c: Ditto.\n\nFrom-SVN: r244006", "tree": {"sha": "8253019db859fde2bfa051e3694d4b04ed5fd321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8253019db859fde2bfa051e3694d4b04ed5fd321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b7163c6300bac42bebc71e331d4e750d5a35f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7163c6300bac42bebc71e331d4e750d5a35f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7163c6300bac42bebc71e331d4e750d5a35f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7163c6300bac42bebc71e331d4e750d5a35f12/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11627b814e47520596a11e7c37378e4b0055f2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11627b814e47520596a11e7c37378e4b0055f2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11627b814e47520596a11e7c37378e4b0055f2d3"}], "stats": {"total": 173, "additions": 160, "deletions": 13}, "files": [{"sha": "31aac2bdbf15c418bcac4e24f58a1621051f6152", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -1,3 +1,14 @@\n+2017-01-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78967\n+\t* config/i386/i386.md (UNSPEC_NOREX_MEM): New unspec.\n+\t(*insvqi_1): New insn pattern.\n+\t(*insvqi_1_mem_rex64): Ditto.\n+\t(*insvqi_2): Ditto.\n+\t(*insvqi_3): Rename from *insvqi.\n+\n+\t(*extzvqi_mem_rex64): Add UNSPEC_NOREX_MEM tag.\n+\n 2017-01-02  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/cfg.texi (Edges): Remove reference to Java."}, {"sha": "c947955b9aa3631999f135ac3c97ae62e620f7ad", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -114,6 +114,7 @@\n   UNSPEC_STOS\n   UNSPEC_PEEPSIB\n   UNSPEC_INSN_FALSE_DEP\n+  UNSPEC_NOREX_MEM\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -2819,7 +2820,8 @@\n \t(subreg:QI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n \t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))]\n+\t\t\t   (const_int 8)) 0))\n+   (unspec [(const_int 0)] UNSPEC_NOREX_MEM)]\n   \"TARGET_64BIT && reload_completed\"\n   \"mov{b}\\t{%h1, %0|%0, %h1}\"\n   [(set_attr \"type\" \"imov\")\n@@ -2862,11 +2864,13 @@\n    (set (match_operand:QI 2 \"norex_memory_operand\") (match_dup 0))]\n   \"TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 2)\n-\t(subreg:QI\n-\t  (zero_extract:SI (match_dup 1)\n-\t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))])\n+  [(parallel\n+     [(set (match_dup 2)\n+\t   (subreg:QI\n+\t     (zero_extract:SI (match_dup 1)\n+\t\t\t      (const_int 8)\n+\t\t\t      (const_int 8)) 0))\n+      (unspec [(const_int 0)] UNSPEC_NOREX_MEM)])])\n \n (define_expand \"insv<mode>\"\n   [(set (zero_extract:SWI248 (match_operand:SWI248 0 \"register_operand\")\n@@ -2916,7 +2920,59 @@\n    (set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*insvqi\"\n+(define_insn \"*insvqi_1_mem_rex64\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(subreg:SI\n+\t  (match_operand:QI 1 \"norex_memory_operand\" \"Bn\") 0))\n+   (unspec [(const_int 0)] UNSPEC_NOREX_MEM)]\n+  \"TARGET_64BIT && reload_completed\"\n+  \"mov{b}\\t{%1, %h0|%h0, %1}\"\n+  [(set_attr \"type\" \"imov\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*insvqi_1\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(subreg:SI\n+\t  (match_operand:QI 1 \"general_operand\" \"QnBc,m\") 0))]\n+  \"\"\n+  \"mov{b}\\t{%1, %h0|%h0, %1}\"\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"imov\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_peephole2\n+  [(set (match_operand:QI 0 \"register_operand\")\n+\t(match_operand:QI 1 \"norex_memory_operand\"))\n+   (set (zero_extract:SI (match_operand 2 \"ext_register_operand\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(subreg:SI (match_dup 0) 0))]\n+  \"TARGET_64BIT\n+   && peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel\n+     [(set (zero_extract:SI (match_dup 2)\n+\t\t\t    (const_int 8)\n+\t\t\t    (const_int 8))\n+\t   (subreg:SI (match_dup 1) 0))\n+      (unspec [(const_int 0)] UNSPEC_NOREX_MEM)])])\n+\n+(define_insn \"*insvqi_2\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8)))]\n+  \"\"\n+  \"mov{b}\\t{%h1, %h0|%h0, %h1}\"\n+  [(set_attr \"type\" \"imov\")\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*insvqi_3\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))"}, {"sha": "8155754f847877b23300d8902f8774797dcdc21f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -1,3 +1,14 @@\n+2017-01-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78967\n+\t* gcc.target/i386/pr78967-1.c: New test.\n+\t* gcc.target/i386/pr78967-2.c: Ditto.\n+\t* gcc.target/i386/pr78967-3.c: Ditto.\n+\n+\t* gcc.target/i386/pr78904-2.c: Tighten scan-asm patterns.\n+\t* gcc.target/i386/pr78904-4.c: Ditto.\n+\t* gcc.target/i386/pr78904-6.c: Ditto.\n+\n 2017-01-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/77674"}, {"sha": "a8adfa1b717872daf39ada5953e7bdac83a9598f", "filename": "gcc/testsuite/gcc.target/i386/pr78904-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-2.c?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -18,7 +18,7 @@ struct S1 test_and (struct S1 a)\n   return a;\n }\n \n-/* { dg-final { scan-assembler \"\\[ \\t\\]andb\\[^\\n\\r]*, %.h\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n \n struct S1 test_or (struct S1 a)\n {\n@@ -27,7 +27,7 @@ struct S1 test_or (struct S1 a)\n   return a;\n }\n \n-/* { dg-final { scan-assembler \"\\[ \\t\\]orb\\[^\\n\\r]*, %.h\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n \n struct S1 test_xor (struct S1 a)\n {\n@@ -36,7 +36,7 @@ struct S1 test_xor (struct S1 a)\n   return a;\n }\n \n-/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\\[^\\n\\r]*, %.h\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */\n \n struct S1 test_add (struct S1 a)\n {\n@@ -45,4 +45,4 @@ struct S1 test_add (struct S1 a)\n   return a;\n }\n \n-/* { dg-final { scan-assembler \"\\[ \\t\\]addb\\[^\\n\\r]*, %.h\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */"}, {"sha": "5d957926fff37f7ae85caf2666d1bc8c863edf3f", "filename": "gcc/testsuite/gcc.target/i386/pr78904-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4.c?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -18,4 +18,4 @@ void foo (struct S1 a, size_t i)\n   t[i] = a.val;\n }\n \n-/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]*%.h,\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]+%.h, t\" } } */"}, {"sha": "da241479787d02f01ffe47103a828b995062414c", "filename": "gcc/testsuite/gcc.target/i386/pr78904-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-6.c?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -18,4 +18,4 @@ void foo (struct S1 a, size_t i)\n   t[i] = a.val;\n }\n \n-/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]*%.h,\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]*%.h, t\" } } */"}, {"sha": "79e3a35c464ec355c11b5e4aeb11bcbba5166918", "filename": "gcc/testsuite/gcc.target/i386/pr78967-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-1.c?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/78967 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-additional-options \"-mregparm=3\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+struct S1 foo (struct S1 a, struct S1 b)\n+{\n+  a.val = b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[ \\t\\]+%.h, %.h\" } } */"}, {"sha": "4f30ea7c52d39e88c7c1d01614f361e7b25fd904", "filename": "gcc/testsuite/gcc.target/i386/pr78967-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-2.c?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/78967 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+extern unsigned char t[256];\n+\n+struct S1 foo (struct S1 a, size_t i)\n+{\n+  a.val = t[i];\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[ \\t\\]+t\\[^\\n\\r]*, %.h\" } } */"}, {"sha": "b69f409d7efdda3d3fdc0eda07479a372ce179b1", "filename": "gcc/testsuite/gcc.target/i386/pr78967-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7163c6300bac42bebc71e331d4e750d5a35f12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78967-3.c?ref=8b7163c6300bac42bebc71e331d4e750d5a35f12", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/78967 */\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+extern unsigned char t[256];\n+\n+struct S1 foo (struct S1 a, size_t i)\n+{\n+  register size_t _i __asm (\"r10\") = i;\n+\n+  asm volatile (\"\" : \"+r\" (_i));\n+  a.val = t[_i];\n+\n+  return a;\n+}"}]}