{"sha": "1d468b06b93557dedbb74e130a4b7b830876038d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0NjhiMDZiOTM1NTdkZWRiYjc0ZTEzMGE0YjdiODMwODc2MDM4ZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-30T12:20:54Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-30T12:20:54Z"}, "message": "c-parser.c (c_parser_omp_for_loop): Use a VEC for for_block.\n\ngcc/\n\t* c-parser.c (c_parser_omp_for_loop): Use a VEC for for_block.\n\ngcc/cp/\n\t* parser.c (cp_parser_omp_for_loop): Use a VEC for for_block.\n\nFrom-SVN: r161599", "tree": {"sha": "fdc8a31036095a1dc3ec7c1c5847b98e9374af60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdc8a31036095a1dc3ec7c1c5847b98e9374af60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d468b06b93557dedbb74e130a4b7b830876038d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d468b06b93557dedbb74e130a4b7b830876038d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d468b06b93557dedbb74e130a4b7b830876038d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d468b06b93557dedbb74e130a4b7b830876038d/comments", "author": null, "committer": null, "parents": [{"sha": "533374223d1c9eedba6d7ec1631835427aa1ca08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533374223d1c9eedba6d7ec1631835427aa1ca08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533374223d1c9eedba6d7ec1631835427aa1ca08"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "4603e24b1a014938b2a4265e2a208c18f0a00791", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d468b06b93557dedbb74e130a4b7b830876038d", "patch": "@@ -1,3 +1,7 @@\n+2010-06-30  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_for_loop): Use a VEC for for_block.\n+\n 2010-06-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/44722"}, {"sha": "0493524a1b20dd4452d9bfdfd55e64126879119b", "filename": "gcc/c-parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=1d468b06b93557dedbb74e130a4b7b830876038d", "patch": "@@ -8150,10 +8150,11 @@ c_parser_omp_for_loop (location_t loc,\n \t\t       c_parser *parser, tree clauses, tree *par_clauses)\n {\n   tree decl, cond, incr, save_break, save_cont, body, init, stmt, cl;\n-  tree declv, condv, incrv, initv, for_block = NULL, ret = NULL;\n+  tree declv, condv, incrv, initv, ret = NULL;\n   bool fail = false, open_brace_parsed = false;\n   int i, collapse = 1, nbraces = 0;\n   location_t for_loc;\n+  VEC(tree,gc) *for_block = make_tree_vector ();\n \n   for (cl = clauses; cl; cl = OMP_CLAUSE_CHAIN (cl))\n     if (OMP_CLAUSE_CODE (cl) == OMP_CLAUSE_COLLAPSE)\n@@ -8185,8 +8186,7 @@ c_parser_omp_for_loop (location_t loc,\n       if (c_parser_next_token_starts_declaration (parser))\n \t{\n \t  if (i > 0)\n-\t    for_block\n-\t      = tree_cons (NULL, c_begin_compound_stmt (true), for_block);\n+\t    VEC_safe_push (tree, gc, for_block, c_begin_compound_stmt (true));\n \t  c_parser_declaration_or_fndef (parser, true, true, true, true, true);\n \t  decl = check_for_loop_decls (for_loc);\n \t  if (decl == NULL)\n@@ -8416,15 +8416,15 @@ c_parser_omp_for_loop (location_t loc,\n       ret = stmt;\n     }\n pop_scopes:\n-  while (for_block)\n+  while (!VEC_empty (tree, for_block))\n     {\n       /* FIXME diagnostics: LOC below should be the actual location of\n \t this particular for block.  We need to build a list of\n \t locations to go along with FOR_BLOCK.  */\n-      stmt = c_end_compound_stmt (loc, TREE_VALUE (for_block), true);\n+      stmt = c_end_compound_stmt (loc, VEC_pop (tree, for_block), true);\n       add_stmt (stmt);\n-      for_block = TREE_CHAIN (for_block);\n     }\n+  release_tree_vector (for_block);\n   return ret;\n }\n "}, {"sha": "246be90a0271e7b1fa958090228375d59dcf5cc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d468b06b93557dedbb74e130a4b7b830876038d", "patch": "@@ -1,3 +1,7 @@\n+2010-06-30  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_for_loop): Use a VEC for for_block.\n+\n 2010-06-30  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* repo.c (pending_repo): Change type to a VEC."}, {"sha": "e8f10a4d000212c5564f60fc17c19131e1434783", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d468b06b93557dedbb74e130a4b7b830876038d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1d468b06b93557dedbb74e130a4b7b830876038d", "patch": "@@ -22705,11 +22705,12 @@ static tree\n cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n {\n   tree init, cond, incr, body, decl, pre_body = NULL_TREE, ret;\n-  tree for_block = NULL_TREE, real_decl, initv, condv, incrv, declv;\n+  tree real_decl, initv, condv, incrv, declv;\n   tree this_pre_body, cl;\n   location_t loc_first;\n   bool collapse_err = false;\n   int i, collapse = 1, nbraces = 0;\n+  VEC(tree,gc) *for_block = make_tree_vector ();\n \n   for (cl = clauses; cl; cl = OMP_CLAUSE_CHAIN (cl))\n     if (OMP_CLAUSE_CODE (cl) == OMP_CLAUSE_COLLAPSE)\n@@ -22828,8 +22829,7 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t\t\t      LOOKUP_ONLYCONVERTING);\n \t\t      if (CLASS_TYPE_P (TREE_TYPE (decl)))\n \t\t\t{\n-\t\t\t  for_block\n-\t\t\t    = tree_cons (NULL, this_pre_body, for_block);\n+\t\t\t  VEC_safe_push (tree, gc, for_block, this_pre_body);\n \t\t\t  init = NULL_TREE;\n \t\t\t}\n \t\t      else\n@@ -23083,11 +23083,9 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t}\n     }\n \n-  while (for_block)\n-    {\n-      add_stmt (pop_stmt_list (TREE_VALUE (for_block)));\n-      for_block = TREE_CHAIN (for_block);\n-    }\n+  while (!VEC_empty (tree, for_block))\n+    add_stmt (pop_stmt_list (VEC_pop (tree, for_block)));\n+  release_tree_vector (for_block);\n \n   return ret;\n }"}]}