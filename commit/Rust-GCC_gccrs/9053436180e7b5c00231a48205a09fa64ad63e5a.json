{"sha": "9053436180e7b5c00231a48205a09fa64ad63e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1MzQzNjE4MGU3YjVjMDAyMzFhNDgyMDVhMDlmYTY0YWQ2M2U1YQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-06-10T20:53:33Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-06-10T20:53:33Z"}, "message": "sh-protos.h (function_symbol): Declare.\n\n\t* sh-protos.h (function_symbol): Declare.\n\t* sh.c (expand_block_move, expand_ashiftrt): Use it.\n\t(sh_expand_prologue, sh_expand_epilogue): Likewise.\n\t(sh_initialize_trampoline): Likewise.\n\t(function_symbol): New function.\n\t* sh.md (udivsi3, divsi3, mulsi3, ic_invalidate_line): Use it.\n\t(initialize_trampoline, call, call_pop, call_value, sibcall): Likewise.\n\t(call_value_pop, shcompact_return_tramp): Likewise.\n\n\t* sh.h (OVERRIDE_OPTIONS): Don't suppress --profile-arc-flag.\n\n\t* sh.md (GOTaddr2picreg): Use gen_lowpart to get lowpart of\n\ttarget register.\n\nFrom-SVN: r67732", "tree": {"sha": "42fbe48feb81e3ffa0a0ee511238870f9c4a871b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42fbe48feb81e3ffa0a0ee511238870f9c4a871b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9053436180e7b5c00231a48205a09fa64ad63e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9053436180e7b5c00231a48205a09fa64ad63e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9053436180e7b5c00231a48205a09fa64ad63e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9053436180e7b5c00231a48205a09fa64ad63e5a/comments", "author": null, "committer": null, "parents": [{"sha": "9fa543a540946002e2304feb4cffb698a933d7a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa543a540946002e2304feb4cffb698a933d7a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa543a540946002e2304feb4cffb698a933d7a9"}], "stats": {"total": 111, "additions": 63, "deletions": 48}, "files": [{"sha": "b9baa5d98167a611c1fefa46613875c3d09a1619", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9053436180e7b5c00231a48205a09fa64ad63e5a", "patch": "@@ -1,3 +1,19 @@\n+2003-06-10  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh-protos.h (function_symbol): Declare.\n+\t* sh.c (expand_block_move, expand_ashiftrt): Use it.\n+\t(sh_expand_prologue, sh_expand_epilogue): Likewise.\n+\t(sh_initialize_trampoline): Likewise.\n+\t(function_symbol): New function.\n+\t* sh.md (udivsi3, divsi3, mulsi3, ic_invalidate_line): Use it.\n+\t(initialize_trampoline, call, call_pop, call_value, sibcall): Likewise.\n+\t(call_value_pop, shcompact_return_tramp): Likewise.\n+\n+\t* sh.h (OVERRIDE_OPTIONS): Don't suppress --profile-arc-flag.\n+\n+\t* sh.md (GOTaddr2picreg): Use gen_lowpart to get lowpart of\n+\ttarget register.\n+\n 2003-06-10  DJ Delorie  <dj@redhat.com>\n \n \t* doc/md.texi (Machine Constraints): Document stormy's Z"}, {"sha": "709a0e400723f34556e19e9b47eece7dbe7f464b", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=9053436180e7b5c00231a48205a09fa64ad63e5a", "patch": "@@ -136,5 +136,6 @@ extern void fpscr_set_from_mem PARAMS ((int, HARD_REG_SET));\n extern void sh_pr_interrupt PARAMS ((struct cpp_reader *));\n extern void sh_pr_trapa PARAMS ((struct cpp_reader *));\n extern void sh_pr_nosave_low_regs PARAMS ((struct cpp_reader *));\n+extern rtx function_symbol (const char *);\n \n #endif /* ! GCC_SH_PROTOS_H */"}, {"sha": "0b82d791f52ead707bb6f1be5875a30964b5c46f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9053436180e7b5c00231a48205a09fa64ad63e5a", "patch": "@@ -626,7 +626,7 @@ expand_block_move (operands)\n \n \t  entry_name = get_identifier (\"__movstrSI12_i4\");\n \n-\t  sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+\t  sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n \t  func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n \t  force_into (XEXP (operands[0], 0), r4);\n \t  force_into (XEXP (operands[1], 0), r5);\n@@ -646,7 +646,7 @@ expand_block_move (operands)\n \t  entry_name = get_identifier (bytes & 4\n \t\t\t\t       ? \"__movstr_i4_odd\"\n \t\t\t\t       : \"__movstr_i4_even\");\n-\t  sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+\t  sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n \t  func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n \t  force_into (XEXP (operands[0], 0), r4);\n \t  force_into (XEXP (operands[1], 0), r5);\n@@ -670,7 +670,7 @@ expand_block_move (operands)\n \n       sprintf (entry, \"__movstrSI%d\", bytes);\n       entry_name = get_identifier (entry);\n-      sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+      sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n       func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n       force_into (XEXP (operands[0], 0), r4);\n       force_into (XEXP (operands[1], 0), r5);\n@@ -691,7 +691,7 @@ expand_block_move (operands)\n       rtx r6 = gen_rtx_REG (SImode, 6);\n \n       entry_name = get_identifier (\"__movstr\");\n-      sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (entry_name));\n+      sym = function_symbol (IDENTIFIER_POINTER (entry_name));\n       func_addr_rtx = copy_to_mode_reg (Pmode, sym);\n       force_into (XEXP (operands[0], 0), r4);\n       force_into (XEXP (operands[1], 0), r5);\n@@ -1908,7 +1908,7 @@ expand_ashiftrt (operands)\n   emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n   sprintf (func, \"__ashiftrt_r4_%d\", value);\n   func_name = get_identifier (func);\n-  sym = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (func_name));\n+  sym = function_symbol (IDENTIFIER_POINTER (func_name));\n   emit_move_insn (wrk, sym);\n   emit_insn (gen_ashrsi3_n (GEN_INT (value), wrk));\n   emit_move_insn (operands[0], gen_rtx_REG (SImode, 4));\n@@ -5110,10 +5110,9 @@ sh_expand_prologue ()\n   if (SHMEDIA_REGS_STACK_ADJUST ())\n     {\n       emit_move_insn (gen_rtx_REG (Pmode, R0_REG),\n-\t\t      gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t  TARGET_FPU_ANY\n-\t\t\t\t\t  ? \"__GCC_push_shmedia_regs\"\n-\t\t\t\t\t  : \"__GCC_push_shmedia_regs_nofpu\"));\n+\t\t      function_symbol (TARGET_FPU_ANY\n+\t\t\t\t       ? \"__GCC_push_shmedia_regs\"\n+\t\t\t\t       : \"__GCC_push_shmedia_regs_nofpu\"));\n       /* This must NOT go through the PLT, otherwise mach and macl\n \t may be clobbered.  */\n       emit_insn (gen_shmedia_save_restore_regs_compact\n@@ -5146,8 +5145,7 @@ sh_expand_prologue ()\n       /* This must NOT go through the PLT, otherwise mach and macl\n \t may be clobbered.  */\n       emit_move_insn (gen_rtx_REG (Pmode, R0_REG),\n-\t\t      gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t  \"__GCC_shcompact_incoming_args\"));\n+\t\t      function_symbol (\"__GCC_shcompact_incoming_args\"));\n       emit_insn (gen_shcompact_incoming_args ());\n     }\n }\n@@ -5195,10 +5193,9 @@ sh_expand_epilogue ()\n   if (SHMEDIA_REGS_STACK_ADJUST ())\n     {\n       emit_move_insn (gen_rtx_REG (Pmode, R0_REG),\n-\t\t      gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t  TARGET_FPU_ANY\n-\t\t\t\t\t  ? \"__GCC_pop_shmedia_regs\"\n-\t\t\t\t\t  : \"__GCC_pop_shmedia_regs_nofpu\"));\n+\t\t      function_symbol (TARGET_FPU_ANY\n+\t\t\t\t       ? \"__GCC_pop_shmedia_regs\"\n+\t\t\t\t       : \"__GCC_pop_shmedia_regs_nofpu\"));\n       /* This must NOT go through the PLT, otherwise mach and macl\n \t may be clobbered.  */\n       emit_insn (gen_shmedia_save_restore_regs_compact\n@@ -7823,7 +7820,7 @@ sh_initialize_trampoline (tramp, fnaddr, cxt)\n   if (TARGET_HARVARD)\n     {\n       if (TARGET_USERMODE)\n-\temit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__ic_invalidate\"),\n+\temit_library_call (function_symbol (\"__ic_invalidate\"),\n \t\t\t   0, VOIDmode, 1, tramp, SImode);\n       else\n \temit_insn (gen_ic_invalidate_line (tramp));\n@@ -8479,4 +8476,12 @@ sh_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n   no_new_pseudos = 0;\n }\n \n+rtx\n+function_symbol (const char *name)\n+{\n+  rtx sym = gen_rtx_SYMBOL_REF (Pmode, name);\n+  SYMBOL_REF_FLAGS (sym) = SYMBOL_FLAG_FUNCTION;\n+  return sym;\n+}\n+\n #include \"gt-sh.h\""}, {"sha": "6623fb0114899bc39cad9ecdb4c48009e5ec7a9d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9053436180e7b5c00231a48205a09fa64ad63e5a", "patch": "@@ -456,7 +456,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t  /* Relaxation isn't yet supported for SHmedia */\t\t\\\n \t  target_flags &= ~RELAX_BIT;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      if (profile_flag || profile_arc_flag)\t\t\t\t\\\n+      /* -fprofile-arcs needs a working libgcov .  In unified tree\t\\\n+\t configurations with newlib, this requires to configure with\t\\\n+\t --with-newlib --with-headers.  But there is no way to check\t\\\n+\t here we have a working libgcov, so just assume that we have.  */\\\n+      if (profile_flag)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  warning (\"Profiling is not supported on this target.\");\t\\\n \t  profile_flag = profile_arc_flag = 0;\t\t\t\t\\"}, {"sha": "26ec41259b862bc1fbf75af59f778f9f48a27172", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9053436180e7b5c00231a48205a09fa64ad63e5a/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=9053436180e7b5c00231a48205a09fa64ad63e5a", "patch": "@@ -1358,8 +1358,7 @@\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n   if (TARGET_HARD_SH4 && TARGET_SH2E)\n     {\n-      emit_move_insn (operands[3],\n-\t\t      gen_rtx_SYMBOL_REF (SImode, \\\"__udivsi3_i4\\\"));\n+      emit_move_insn (operands[3], function_symbol (\\\"__udivsi3_i4\\\"));\n       if (TARGET_FPU_SINGLE)\n \tlast = gen_udivsi3_i4_single (operands[0], operands[3]);\n       else\n@@ -1375,10 +1374,9 @@\n   else if (TARGET_SH5)\n     {\n       emit_move_insn (operands[3],\n-\t\t      gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t  (TARGET_FPU_ANY\n-\t\t\t\t\t   ? \\\"__udivsi3_i4\\\"\n-\t\t\t\t\t   : \\\"__udivsi3\\\")));\n+\t\t      function_symbol (TARGET_FPU_ANY\n+\t\t\t\t       ? \\\"__udivsi3_i4\\\"\n+\t\t\t\t       : \\\"__udivsi3\\\"));\n \n       if (TARGET_SHMEDIA)\n \tlast = gen_udivsi3_i1_media (operands[0],\n@@ -1393,8 +1391,7 @@\n     }\n   else\n     {\n-      emit_move_insn (operands[3],\n-\t\t      gen_rtx_SYMBOL_REF (SImode, \\\"__udivsi3\\\"));\n+      emit_move_insn (operands[3], function_symbol (\\\"__udivsi3\\\"));\n       last = gen_udivsi3_i1 (operands[0], operands[3]);\n     }\n   first = emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n@@ -1508,8 +1505,7 @@\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n   if (TARGET_HARD_SH4 && TARGET_SH2E)\n     {\n-      emit_move_insn (operands[3],\n-\t\t      gen_rtx_SYMBOL_REF (SImode, \\\"__sdivsi3_i4\\\"));\n+      emit_move_insn (operands[3], function_symbol (\\\"__sdivsi3_i4\\\"));\n       if (TARGET_FPU_SINGLE)\n \tlast = gen_divsi3_i4_single (operands[0], operands[3]);\n       else\n@@ -1525,10 +1521,9 @@\n   else if (TARGET_SH5)\n     {\n       emit_move_insn (operands[3],\n-\t\t      gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t  (TARGET_FPU_ANY\n-\t\t\t\t\t   ? \\\"__sdivsi3_i4\\\"\n-\t\t\t\t\t   : \\\"__sdivsi3\\\")));\n+\t\t      function_symbol (TARGET_FPU_ANY\n+\t\t\t\t       ? \\\"__sdivsi3_i4\\\"\n+\t\t\t\t       : \\\"__sdivsi3\\\"));\n \n       if (TARGET_SHMEDIA)\n \tlast = gen_divsi3_i1_media (operands[0],\n@@ -1543,7 +1538,7 @@\n     }\n   else\n     {\n-      emit_move_insn (operands[3], gen_rtx_SYMBOL_REF (SImode, \\\"__sdivsi3\\\"));\n+      emit_move_insn (operands[3], function_symbol (\\\"__sdivsi3\\\"));\n       last = gen_divsi3_i1 (operands[0], operands[3]);\n     }\n   first = emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n@@ -1697,7 +1692,7 @@\n     {\n       /* The address must be set outside the libcall,\n \t since it goes into a pseudo.  */\n-      rtx sym = gen_rtx_SYMBOL_REF (SImode, \\\"__mulsi3\\\");\n+      rtx sym = function_symbol (\\\"__mulsi3\\\");\n       rtx addr = force_reg (SImode, sym);\n       rtx insns = gen_mulsi3_call (operands[0], operands[1],\n \t\t\t\t   operands[2], addr);\n@@ -3554,7 +3549,7 @@\n     }\n   else if (TARGET_SHCOMPACT)\n     {\n-      operands[1] = gen_rtx_SYMBOL_REF (Pmode, \\\"__ic_invalidate\\\");\n+      operands[1] = function_symbol (\\\"__ic_invalidate\\\");\n       operands[1] = force_reg (Pmode, operands[1]);\n       emit_insn (gen_ic_invalidate_line_compact (operands[0], operands[1]));\n       DONE;\n@@ -3609,7 +3604,7 @@\n   rtx sfun, tramp;\n \n   tramp = force_reg (Pmode, operands[0]);\n-  sfun = force_reg (Pmode, gen_rtx_SYMBOL_REF (Pmode, \\\"__init_trampoline\\\"));\n+  sfun = force_reg (Pmode, function_symbol (\\\"__init_trampoline\\\"));\n   emit_move_insn (gen_rtx_REG (SImode, R2_REG), operands[1]);\n   emit_move_insn (gen_rtx_REG (SImode, R3_REG), operands[2]);\n \n@@ -5806,8 +5801,7 @@\n \t run out of registers when adjusting fpscr for the call.  */\n       emit_insn (gen_force_mode_for_call ());\n \n-      operands[0] = gen_rtx_SYMBOL_REF (SImode,\n-\t\t\t\t\t\\\"__GCC_shcompact_call_trampoline\\\");\n+      operands[0] = function_symbol (\\\"__GCC_shcompact_call_trampoline\\\");\n       if (flag_pic)\n \t{\n \t  rtx reg = gen_reg_rtx (Pmode);\n@@ -5926,8 +5920,7 @@\n \t run out of registers when adjusting fpscr for the call.  */\n       emit_insn (gen_force_mode_for_call ());\n \n-      operands[0] = gen_rtx_SYMBOL_REF (SImode,\n-\t\t\t\t\t\\\"__GCC_shcompact_call_trampoline\\\");\n+      operands[0] = function_symbol (\\\"__GCC_shcompact_call_trampoline\\\");\n       if (flag_pic)\n \t{\n \t  rtx reg = gen_reg_rtx (Pmode);\n@@ -6031,8 +6024,7 @@\n \t run out of registers when adjusting fpscr for the call.  */\n       emit_insn (gen_force_mode_for_call ());\n \n-      operands[1] = gen_rtx_SYMBOL_REF (SImode,\n-\t\t\t\t\t\\\"__GCC_shcompact_call_trampoline\\\");\n+      operands[1] = function_symbol (\\\"__GCC_shcompact_call_trampoline\\\");\n       if (flag_pic)\n \t{\n \t  rtx reg = gen_reg_rtx (Pmode);\n@@ -6250,8 +6242,7 @@\n \t run out of registers when adjusting fpscr for the call.  */\n       emit_insn (gen_force_mode_for_call ());\n \n-      operands[0] = gen_rtx_SYMBOL_REF (SImode,\n-\t\t\t\t\t\\\"__GCC_shcompact_call_trampoline\\\");\n+      operands[0] = function_symbol (\\\"__GCC_shcompact_call_trampoline\\\");\n       if (flag_pic)\n \t{\n \t  rtx reg = gen_reg_rtx (Pmode);\n@@ -6391,8 +6382,7 @@\n \t run out of registers when adjusting fpscr for the call.  */\n       emit_insn (gen_force_mode_for_call ());\n \n-      operands[1] = gen_rtx_SYMBOL_REF (SImode,\n-\t\t\t\t\t\\\"__GCC_shcompact_call_trampoline\\\");\n+      operands[1] = function_symbol (\\\"__GCC_shcompact_call_trampoline\\\");\n       if (flag_pic)\n \t{\n \t  rtx reg = gen_reg_rtx (Pmode);\n@@ -6620,7 +6610,7 @@\n       emit_insn (gen_ptrel (tr, dipic, lab));\n \n       if (GET_MODE (operands[0]) != GET_MODE (tr))\n-\ttr = gen_rtx_SUBREG (GET_MODE (operands[0]), tr, 0);\n+\ttr = gen_lowpart (GET_MODE (operands[0]), tr);\n \n       insn = emit_move_insn (operands[0], tr);\n \n@@ -7207,8 +7197,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"\n {\n   rtx reg = gen_rtx_REG (Pmode, R0_REG);\n-  rtx sym = gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\\\"__GCC_shcompact_return_trampoline\\\");\n+  rtx sym = function_symbol (\\\"__GCC_shcompact_return_trampoline\\\");\n \n   if (flag_pic)\n     emit_insn (gen_symGOTPLT2reg (reg, sym));"}]}