{"sha": "d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkNWM5ZGUxYzM3N2IxMTA0ZDM3MWJjOTM1YTMxZTUzZTgzY2Y4ZA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-09-30T13:40:41Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-09-30T13:40:41Z"}, "message": "Use lookup table to get register sizes in dwarf2 eh\n\nFrom-SVN: r29730", "tree": {"sha": "15d8cd0891da1777322bd125841935d8803c44f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d8cd0891da1777322bd125841935d8803c44f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/comments", "author": null, "committer": null, "parents": [{"sha": "a89e95f9fb5a2c04a9efe3036fd90f1fb0b474c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89e95f9fb5a2c04a9efe3036fd90f1fb0b474c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89e95f9fb5a2c04a9efe3036fd90f1fb0b474c0"}], "stats": {"total": 173, "additions": 67, "deletions": 106}, "files": [{"sha": "b95214dfacf6af284cdcc66e517761cdb30d72f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "patch": "@@ -1,3 +1,24 @@\n+Thu Sep 30 14:39:17 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* tree.h (enum built_in_function): Rename BUILT_IN_DWARF_REG_SIZE\n+\tto BUILT_IN_INIT_DWARF_REG_SIZES.\n+\t* builtins.c (expand_builtins, case BUILT_IN_INIT_DWARF_REG_SIZES):\n+\tRenamed from BUILT_IN_DWARF_REG_SIZE; call\n+\texpand_builtin_init_dwarf_reg_sizes.\n+\t* c-decl.c (init_decl_processing): Replace __builtin_dwarf_reg_size\n+\twith __builtin_init_dwarf_reg_size_table.\n+\t* dwarf2out.c (struct reg_size_range): Delete.\n+\t(expand_builtin_init_dwarf_reg_sizes): New function.\n+\t(expand_builtin_dwarf_reg_size): Delete.\n+\t* except.h (expand_builtin_init_dwarf_reg_sizes): Declare.\n+\t(expand_builtin_dwarf_reg_size): Don't declare.\n+\t* libgcc2.c (dwarf_reg_size_table_initialized): New.\n+\t(dwarf_reg_size_table): New.\n+\t(init_reg_size_table): New function.\n+\t(copy_reg): Use dwarf_reg_size_table.\n+\t(eh_context_initialize): Make sure dwarf_reg_size_table is initialized\n+\tbefore use.\n+\n Thu Sep 30 05:40:34 1999  Richard Earnshaw <rearnsha@arm.com>\n \n \t* c-lang.c (finish_file case ndef ASM_OUTPUT_{CON,DE}STRUCTOR): "}, {"sha": "1fb7b7413664a130573ee3cc0a779fd88b90203f", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "patch": "@@ -2484,8 +2484,9 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n #ifdef DWARF2_UNWIND_INFO\n     case BUILT_IN_DWARF_FP_REGNUM:\n       return expand_builtin_dwarf_fp_regnum ();\n-    case BUILT_IN_DWARF_REG_SIZE:\n-      return expand_builtin_dwarf_reg_size (TREE_VALUE (arglist), target);\n+    case BUILT_IN_INIT_DWARF_REG_SIZES:\n+      expand_builtin_init_dwarf_reg_sizes (TREE_VALUE (arglist));\n+      return const0_rtx;\n #endif\n     case BUILT_IN_FROB_RETURN_ADDR:\n       return expand_builtin_frob_return_addr (TREE_VALUE (arglist));"}, {"sha": "75ad2bac0b79ae04f11d3371edd41d30740b9fe4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "patch": "@@ -3068,8 +3068,8 @@ init_decl_processing ()\n   builtin_function (\"__builtin_dwarf_fp_regnum\",\n \t\t    build_function_type (unsigned_type_node, endlink),\n \t\t    BUILT_IN_DWARF_FP_REGNUM, BUILT_IN_NORMAL, NULL_PTR);\n-  builtin_function (\"__builtin_dwarf_reg_size\", int_ftype_int,\n-\t\t    BUILT_IN_DWARF_REG_SIZE, BUILT_IN_NORMAL, NULL_PTR);\t\t    \n+  builtin_function (\"__builtin_init_dwarf_reg_size_table\", void_ftype_ptr,\n+\t\t    BUILT_IN_INIT_DWARF_REG_SIZES, BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_frob_return_addr\", ptr_ftype_ptr,\n \t\t    BUILT_IN_FROB_RETURN_ADDR, BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_extract_return_addr\", ptr_ftype_ptr,"}, {"sha": "6732e5811decfe66333cd6562c58895722291282", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 98, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "patch": "@@ -560,110 +560,26 @@ reg_number (rtl)\n   return regno;\n }\n \n-struct reg_size_range\n-{\n-  int beg;\n-  int end;\n-  int size;\n-};\n-\n-/* Given a register number in REG_TREE, return an rtx for its size in bytes.\n-   We do this in kind of a roundabout way, by building up a list of\n-   register size ranges and seeing where our register falls in one of those\n-   ranges.  We need to do it this way because REG_TREE is not a constant,\n-   and the target macros were not designed to make this task easy.  */\n+/* Generate code to initialize the register size table.  */\n \n-rtx\n-expand_builtin_dwarf_reg_size (reg_tree, target)\n-     tree reg_tree;\n-     rtx target;\n+void\n+expand_builtin_init_dwarf_reg_sizes (address)\n+     tree address;\n {\n-  enum machine_mode mode;\n-  int size;\n-  struct reg_size_range ranges[5];\n-  tree t, t2;\n-\n-  int i = 0;\n-  int n_ranges = 0;\n-  int last_size = -1;\n+  int i;\n+  enum machine_mode mode = TYPE_MODE (char_type_node);\n+  rtx addr = expand_expr (address, NULL_RTX, VOIDmode, 0);\n+  rtx mem = gen_rtx_MEM (mode, addr);\n \n-  for (; i < FIRST_PSEUDO_REGISTER; ++i)\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; ++i)\n     {\n-      /* The return address is out of order on the MIPS, and we don't use\n-\t copy_reg for it anyway, so we don't care here how large it is.  */\n-      if (DWARF_FRAME_REGNUM (i) == DWARF_FRAME_RETURN_COLUMN)\n-\tcontinue;\n-\n-      mode = reg_raw_mode[i];\n-\n-      /* CCmode is arbitrarily given a size of 4 bytes.  It is more useful\n-\t to use the same size as word_mode, since that reduces the number\n-\t of ranges we need.  It should not matter, since the result should\n-\t never be used for a condition code register anyways.  */\n-      if (GET_MODE_CLASS (mode) == MODE_CC)\n-\tmode = word_mode;\n-\n-      size = GET_MODE_SIZE (mode);\n-\n-      /* If this register is not valid in the specified mode and\n-\t we have a previous size, use that for the size of this\n-\t register to avoid making junk tiny ranges.  */\n-      if (! HARD_REGNO_MODE_OK (i, mode) && last_size != -1)\n-\tsize = last_size;\n-\n-      if (size != last_size)\n-\t{\n-\t  ranges[n_ranges].beg = i;\n-\t  ranges[n_ranges].size = last_size = size;\n-\t  ++n_ranges;\n-\t  if (n_ranges >= 5)\n-\t    abort ();\n-\t}\n-      ranges[n_ranges-1].end = i;\n-    }\n+      int offset = i * GET_MODE_SIZE (mode);\n+      int size = GET_MODE_SIZE (reg_raw_mode[i]);\n \n-  /* The usual case: fp regs surrounded by general regs.  */\n-  if (n_ranges == 3 && ranges[0].size == ranges[2].size)\n-    {\n-      if ((DWARF_FRAME_REGNUM (ranges[1].end)\n-\t   - DWARF_FRAME_REGNUM (ranges[1].beg))\n-\t  != ranges[1].end - ranges[1].beg)\n-\tabort ();\n-      t  = fold (build (GE_EXPR, integer_type_node, reg_tree,\n-\t\t\tbuild_int_2 (DWARF_FRAME_REGNUM (ranges[1].beg), 0)));\n-      t2 = fold (build (LE_EXPR, integer_type_node, reg_tree,\n-\t\t\tbuild_int_2 (DWARF_FRAME_REGNUM (ranges[1].end), 0)));\n-      t = fold (build (TRUTH_ANDIF_EXPR, integer_type_node, t, t2));\n-      t = fold (build (COND_EXPR, integer_type_node, t,\n-\t\t       build_int_2 (ranges[1].size, 0),\n-\t\t       build_int_2 (ranges[0].size, 0)));\n-    }\n-  else\n-    {\n-      /* Initialize last_end to be larger than any possible\n-\t DWARF_FRAME_REGNUM.  */\n-      int last_end = 0x7fffffff;\n-      --n_ranges;\n-      t = build_int_2 (ranges[n_ranges].size, 0);\n-      do\n-\t{\n-\t  int beg = DWARF_FRAME_REGNUM (ranges[n_ranges].beg);\n-\t  int end = DWARF_FRAME_REGNUM (ranges[n_ranges].end);\n-\t  if (beg < 0)\n-\t    continue;\n-\t  if (end >= last_end)\n-\t    abort ();\n-\t  last_end = end;\n-\t  if (end - beg != ranges[n_ranges].end - ranges[n_ranges].beg)\n-\t    abort ();\n-\t  t2 = fold (build (LE_EXPR, integer_type_node, reg_tree,\n-\t\t\t    build_int_2 (end, 0)));\n-\t  t = fold (build (COND_EXPR, integer_type_node, t2,\n-\t\t\t   build_int_2 (ranges[n_ranges].size, 0), t));\n-\t}\n-      while (--n_ranges >= 0);\n+      emit_move_insn (change_address (mem, mode,\n+\t\t\t\t      plus_constant (addr, offset)),\n+\t\t      GEN_INT (size));\n     }\n-  return expand_expr (t, target, Pmode, 0);\n }\n \n /* Convert a DWARF call frame info. operation to its string name */"}, {"sha": "07d4359a239f74df4ad0316535cb6104b8c92e08", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "patch": "@@ -473,7 +473,7 @@ rtx expand_builtin_dwarf_fp_regnum\tPROTO((void));\n #ifdef TREE_CODE\n rtx expand_builtin_frob_return_addr\tPROTO((tree));\n rtx expand_builtin_extract_return_addr\tPROTO((tree));\n-rtx expand_builtin_dwarf_reg_size\tPROTO((tree, rtx));\n+void expand_builtin_init_dwarf_reg_sizes\tPROTO((tree));\n void expand_builtin_eh_return\t\tPROTO((tree, tree, tree));\n #endif\n void expand_eh_return\t\t\tPROTO((void));"}, {"sha": "777112ce4e4a11ac9c1c23fd9621b1d241450c71", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "patch": "@@ -3120,6 +3120,18 @@ __get_eh_info ()\n   return &eh->info;\n }\n \f\n+#ifdef DWARF2_UNWIND_INFO\n+static int dwarf_reg_size_table_initialized = 0;\n+static char dwarf_reg_size_table[FIRST_PSEUDO_REGISTER];\n+\n+static void\n+init_reg_size_table ()\n+{\n+  __builtin_init_dwarf_reg_size_table (dwarf_reg_size_table);\n+  dwarf_reg_size_table_initialized = 1;\n+}\n+#endif\n+\n #if __GTHREADS\n static void\n eh_threads_initialize ()\n@@ -3152,12 +3164,24 @@ eh_context_initialize ()\n       /* Use static version of EH context. */\n       get_eh_context = &eh_context_static;\n     }\n+#ifdef DWARF2_UNWIND_INFO\n+  {\n+    static __gthread_once_t once_regsizes = __GTHREAD_ONCE_INIT;\n+    if (__gthread_once (&once_regsizes, init_reg_size_table) != 0\n+\t|| ! dwarf_reg_size_table_initialized)\n+      init_reg_size_table ();\n+  }\n+#endif\n \n #else /* no __GTHREADS */\n \n   /* Use static version of EH context. */\n   get_eh_context = &eh_context_static;\n \n+#ifdef DWARF2_UNWIND_INFO\n+  init_reg_size_table ();\n+#endif\n+\n #endif /* no __GTHREADS */\n \n   return (*get_eh_context) ();\n@@ -3395,7 +3419,6 @@ EH_TABLE_LOOKUP\n \n #ifdef DWARF2_UNWIND_INFO\n \n-\n /* Return the table version of an exception descriptor */\n \n short \n@@ -3620,7 +3643,7 @@ copy_reg (unsigned reg, frame_state *udata, frame_state *target_udata)\n   word_type *preg = get_reg_addr (reg, udata, NULL);\n   word_type *ptreg = get_reg_addr (reg, target_udata, NULL);\n \n-  memcpy (ptreg, preg, __builtin_dwarf_reg_size (reg));\n+  memcpy (ptreg, preg, dwarf_reg_size_table [reg]);\n }\n \n /* Retrieve the return address for frame UDATA.  */"}, {"sha": "cacdb28f20318d633ebb3402e5aaa007cfbe15c7", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d5c9de1c377b1104d371bc935a31e53e83cf8d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d9d5c9de1c377b1104d371bc935a31e53e83cf8d", "patch": "@@ -120,7 +120,7 @@ enum built_in_function\n   BUILT_IN_UNWIND_INIT,\n   BUILT_IN_DWARF_CFA,\n   BUILT_IN_DWARF_FP_REGNUM,\n-  BUILT_IN_DWARF_REG_SIZE,\n+  BUILT_IN_INIT_DWARF_REG_SIZES,\n   BUILT_IN_FROB_RETURN_ADDR,\n   BUILT_IN_EXTRACT_RETURN_ADDR,\n   BUILT_IN_EH_RETURN,"}]}