{"sha": "2c5ed587af06d261341f11f1e871c7e4de4a2960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1ZWQ1ODdhZjA2ZDI2MTM0MWYxMWYxZTg3MWM3ZTRkZTRhMjk2MA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-03-05T22:13:21Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-03-05T22:13:21Z"}, "message": "re PR fortran/19754 (Shape conformance not checked)\n\nPR fortran/19754\n* resolve.c (compare_shapes):  New function.\n(resolve_operator): Use it.\n\nFrom-SVN: r95945", "tree": {"sha": "09baa1aa36a69fa114dc4b806b048ac94c613806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09baa1aa36a69fa114dc4b806b048ac94c613806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5ed587af06d261341f11f1e871c7e4de4a2960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5ed587af06d261341f11f1e871c7e4de4a2960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5ed587af06d261341f11f1e871c7e4de4a2960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5ed587af06d261341f11f1e871c7e4de4a2960/comments", "author": null, "committer": null, "parents": [{"sha": "098c1ef8fa64e121080ac29b6afdab9d27527c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098c1ef8fa64e121080ac29b6afdab9d27527c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098c1ef8fa64e121080ac29b6afdab9d27527c04"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "514b29ad3460fa283ba3dc177b9b96282fecb19e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5ed587af06d261341f11f1e871c7e4de4a2960/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5ed587af06d261341f11f1e871c7e4de4a2960/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2c5ed587af06d261341f11f1e871c7e4de4a2960", "patch": "@@ -1,3 +1,9 @@\n+2005-03-05  Steven G. Kargl  <kargls@comcast.net> \n+\n+\tPR fortran/19754\n+\t* resolve.c (compare_shapes):  New function.\n+\t(resolve_operator): Use it.\n+\n 2005-03-05  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-const.c (gfc_conv_constant_to_tree): Use correct tree"}, {"sha": "126f21fd591826a9577102e8c728c8d4b4a234fd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5ed587af06d261341f11f1e871c7e4de4a2960/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5ed587af06d261341f11f1e871c7e4de4a2960/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2c5ed587af06d261341f11f1e871c7e4de4a2960", "patch": "@@ -1249,6 +1249,36 @@ resolve_call (gfc_code * c)\n   return t;\n }\n \n+/* Compare the shapes of two arrays that have non-NULL shapes.  If both\n+   op1->shape and op2->shape are non-NULL return SUCCESS if their shapes\n+   match.  If both op1->shape and op2->shape are non-NULL return FAILURE\n+   if their shapes do not match.  If either op1->shape or op2->shape is\n+   NULL, return SUCCESS.  */\n+\n+static try\n+compare_shapes (gfc_expr * op1, gfc_expr * op2)\n+{\n+  try t;\n+  int i;\n+\n+  t = SUCCESS;\n+\t\t  \n+  if (op1->shape != NULL && op2->shape != NULL)\n+    {\n+      for (i = 0; i < op1->rank; i++)\n+\t{\n+\t  if (mpz_cmp (op1->shape[i], op2->shape[i]) != 0)\n+\t   {\n+\t     gfc_error (\"Shapes for operands at %L and %L are not conformable\",\n+\t\t\t &op1->where, &op2->where);\n+\t     t = FAILURE;\n+\t     break;\n+\t   }\n+\t}\n+    }\n+\n+  return t;\n+}\n \n /* Resolve an operator expression node.  This can involve replacing the\n    operation with a user defined function call.  */\n@@ -1460,10 +1490,14 @@ resolve_operator (gfc_expr * e)\n \t  if (op1->rank == op2->rank)\n \t    {\n \t      e->rank = op1->rank;\n-\n \t      if (e->shape == NULL)\n+\t\t{\n+\t\t  t = compare_shapes(op1, op2);\n+\t\t  if (t == FAILURE)\n+\t\t    e->shape = NULL;\n+\t\t  else\n \t\te->shape = gfc_copy_shape (op1->shape, op1->rank);\n-\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -1499,10 +1533,12 @@ resolve_operator (gfc_expr * e)\n   return t;\n \n bad_op:\n+\n   if (gfc_extend_expr (e) == SUCCESS)\n     return SUCCESS;\n \n   gfc_error (msg, &e->where);\n+\n   return FAILURE;\n }\n "}]}