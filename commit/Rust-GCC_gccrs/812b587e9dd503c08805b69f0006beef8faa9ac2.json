{"sha": "812b587e9dd503c08805b69f0006beef8faa9ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyYjU4N2U5ZGQ1MDNjMDg4MDViNjlmMDAwNmJlZWY4ZmFhOWFjMg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2007-01-24T19:40:12Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2007-01-24T19:40:12Z"}, "message": "target.h (globalize_decl_name): New.\n\n\t* target.h (globalize_decl_name): New.\n\t* target-def.h (TARGET_ASM_GLOBALIZE_DECL_NAME): New.\n\t* output.h (default_globalize_decl_name): New.\n\t* varasm.c (asm_output_bss): Use globalize_decl_name instead of\n\tglobalize_label.\n        (globalize_decl): Ditto.\n\t(default_globalize_decl_name): New.\n\t* config/ia64/ia64.c (ia64_globalize_decl_name): New.\n\t(ia64_handle_version_id_attribute): New.\n\t(TARGET_ASM_GLOBALIZE_DECL_NAME): New.\n\t(ia64_asm_output_external): Use globalize_decl_name instead\n\tof globalize_label.\n\t* doc/extend.texi (version_id): New pragma.\n\t* doc/tm.texi (ARGET_ASM_GLOBALIZE_DECL_NAME): New target hook.\n\nFrom-SVN: r121128", "tree": {"sha": "13559698c1afb4d85fe748d845c52d2e03712729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13559698c1afb4d85fe748d845c52d2e03712729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/812b587e9dd503c08805b69f0006beef8faa9ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812b587e9dd503c08805b69f0006beef8faa9ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812b587e9dd503c08805b69f0006beef8faa9ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812b587e9dd503c08805b69f0006beef8faa9ac2/comments", "author": null, "committer": null, "parents": [{"sha": "fe32582aca9d7fa72265813406102b97119cd86d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe32582aca9d7fa72265813406102b97119cd86d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe32582aca9d7fa72265813406102b97119cd86d"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "36c0d63e1ae44334550043297d298d4f4b3eff29", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=812b587e9dd503c08805b69f0006beef8faa9ac2", "patch": "@@ -242,6 +242,7 @@ static void bundling (FILE *, int, rtx, rtx);\n static void ia64_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t  HOST_WIDE_INT, tree);\n static void ia64_file_start (void);\n+static void ia64_globalize_decl_name (FILE *, tree);\n \n static section *ia64_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t unsigned HOST_WIDE_INT);\n@@ -265,6 +266,7 @@ static void ia64_vms_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n \n static tree ia64_handle_model_attribute (tree *, tree, tree, int, bool *);\n+static tree ia64_handle_version_id_attribute (tree *, tree, tree, int, bool *);\n static void ia64_encode_section_info (tree, rtx, int);\n static rtx ia64_struct_value_rtx (tree, int);\n static tree ia64_gimplify_va_arg (tree, tree, tree *, tree *);\n@@ -282,6 +284,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"syscall_linkage\", 0, 0, false, true,  true,  NULL },\n   { \"model\",\t       1, 1, true, false, false, ia64_handle_model_attribute },\n+  { \"version_id\",      1, 1, true, false, false,\n+    ia64_handle_version_id_attribute },\n   { NULL,\t       0, 0, false, false, false, NULL }\n };\n \n@@ -391,6 +395,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START ia64_file_start\n \n+#undef TARGET_ASM_GLOBALIZE_DECL_NAME\n+#define TARGET_ASM_GLOBALIZE_DECL_NAME ia64_globalize_decl_name\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ia64_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -2226,6 +2233,24 @@ emit_safe_across_calls (void)\n     fputc ('\\n', asm_out_file);\n }\n \n+/* Globalize a declaration.  */\n+\n+static void\n+ia64_globalize_decl_name (FILE * stream, tree decl)\n+{\n+  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  tree version_attr = lookup_attribute (\"version_id\", DECL_ATTRIBUTES (decl));\n+  if (version_attr)\n+    {\n+      tree v = TREE_VALUE (TREE_VALUE (version_attr));\n+      const char *p = TREE_STRING_POINTER (v);\n+      fprintf (stream, \"\\t.alias %s#, \\\"%s{%s}\\\"\\n\", name, name, p);\n+    }\n+  targetm.asm_out.globalize_label (stream, name);\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    ASM_OUTPUT_TYPE_DIRECTIVE (stream, name, \"function\");\n+}\n+\n /* Helper function for ia64_compute_frame_size: find an appropriate general\n    register to spill some special register to.  SPECIAL_SPILL_MASK contains\n    bits in GR0 to GR31 that have already been allocated by this routine.\n@@ -9189,10 +9214,7 @@ ia64_asm_output_external (FILE *file, tree decl, const char *name)\n \t need something for external functions.  */\n       if ((TARGET_HPUX_LD || !TARGET_GNU_AS)\n \t  && TREE_CODE (decl) == FUNCTION_DECL)\n-\t{\n-\t  ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n-\t  (*targetm.asm_out.globalize_label) (file, name);\n-\t}\n+\t  (*targetm.asm_out.globalize_decl_name) (file, decl);\n       else if (need_visibility && !TARGET_GNU_AS)\n \t(*targetm.asm_out.globalize_label) (file, name);\n     }\n@@ -9778,4 +9800,27 @@ ia64_optimization_options (int level ATTRIBUTE_UNUSED,\n \n }\n \n+/* HP-UX version_id attribute.\n+   For object foo, if the version_id is set to 1234 put out an alias\n+   of '.alias foo \"foo{1234}\"  We can't use \"foo{1234}\" in anything\n+   other than an alias statement because it is an illegal symbol name.  */\n+\n+static tree\n+ia64_handle_version_id_attribute (tree *node ATTRIBUTE_UNUSED,\n+                                 tree name ATTRIBUTE_UNUSED,\n+                                 tree args,\n+                                 int flags ATTRIBUTE_UNUSED,\n+                                 bool *no_add_attrs)\n+{\n+  tree arg = TREE_VALUE (args);\n+\n+  if (TREE_CODE (arg) != STRING_CST)\n+    {\n+      error(\"version attribute is not a string\");\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+  return NULL_TREE;\n+}\n+\n #include \"gt-ia64.h\""}, {"sha": "8bbb3169402387c25e60616cc7977db6139d2c26", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=812b587e9dd503c08805b69f0006beef8faa9ac2", "patch": "@@ -2366,6 +2366,19 @@ for the function even if it appears that the function is not referenced.\n This is useful, for example, when the function is referenced only in\n inline assembly.\n \n+@item version_id\n+@cindex @code{version_id} attribute on IA64 HP-UX\n+This attribute, attached to a global variable or function, renames a\n+symbol to contain a version string, thus allowing for function level\n+versioning.  HP-UX system header files may use version level functioning\n+for some system calls.\n+\n+@smallexample\n+extern int foo () __attribute__((version_id (\"20040821\")));\n+@end smallexample\n+\n+Calls to @var{foo} will be mapped to calls to @var{foo@{20040821@}}.\n+\n @item visibility (\"@var{visibility_type}\")\n @cindex @code{visibility} attribute\n This attribute affects the linkage of the declaration to which it is attached."}, {"sha": "b2292c3e06a20b9526ba4f6632857442a33b507a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=812b587e9dd503c08805b69f0006beef8faa9ac2", "patch": "@@ -7198,6 +7198,14 @@ The default implementation relies on a proper definition of\n @code{GLOBAL_ASM_OP}.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ASM_GLOBALIZE_DECL_NAME (FILE *@var{stream}, tree @var{decl})\n+This target hook is a function to output to the stdio stream\n+@var{stream} some commands that will make the name associated with @var{decl}\n+global; that is, available for reference from other files.\n+\n+The default implementation uses the TARGET_ASM_GLOBALIZE_LABEL target hook.\n+@end deftypefn\n+\n @defmac ASM_WEAKEN_LABEL (@var{stream}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} some commands that will make the label @var{name} weak;"}, {"sha": "8340d412c6988c175444e2cf60bf802e386c9422", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=812b587e9dd503c08805b69f0006beef8faa9ac2", "patch": "@@ -612,6 +612,7 @@ extern bool default_use_anchors_for_symbol_p (rtx);\n extern bool default_binds_local_p (tree);\n extern bool default_binds_local_p_1 (tree, int);\n extern void default_globalize_label (FILE *, const char *);\n+extern void default_globalize_decl_name (FILE *, tree);\n extern void default_emit_unwind_label (FILE *, tree, int, int);\n extern void default_emit_except_table_label (FILE *);\n extern void default_internal_label (FILE *, const char *, unsigned long);"}, {"sha": "bc535ebb6cd9f5292d7068c8478cd61b29f901dc", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=812b587e9dd503c08805b69f0006beef8faa9ac2", "patch": "@@ -64,6 +64,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_ASM_GLOBALIZE_LABEL default_globalize_label\n #endif\n \n+#ifndef TARGET_ASM_GLOBALIZE_DECL_NAME\n+#define TARGET_ASM_GLOBALIZE_DECL_NAME default_globalize_decl_name\n+#endif\n+\n #ifndef TARGET_ASM_EMIT_UNWIND_LABEL\n #define TARGET_ASM_EMIT_UNWIND_LABEL default_emit_unwind_label\n #endif\n@@ -253,6 +257,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n \t\t\tTARGET_ASM_UNALIGNED_INT_OP,\t\t\\\n \t\t\tTARGET_ASM_INTEGER,\t\t\t\\\n \t\t\tTARGET_ASM_GLOBALIZE_LABEL,\t\t\\\n+\t\t\tTARGET_ASM_GLOBALIZE_DECL_NAME,\t\t\\\n                         TARGET_ASM_EMIT_UNWIND_LABEL,           \\\n \t\t\tTARGET_ASM_EMIT_EXCEPT_TABLE_LABEL,\t\\\n \t\t\tTARGET_UNWIND_EMIT,\t\t\t\\"}, {"sha": "d43ea565579671acb971538a331dd1bfc1214d3f", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=812b587e9dd503c08805b69f0006beef8faa9ac2", "patch": "@@ -113,6 +113,9 @@ struct gcc_target\n     /* Output code that will globalize a label.  */\n     void (* globalize_label) (FILE *, const char *);\n \n+    /* Output code that will globalise a declaration.  */\n+    void (* globalize_decl_name) (FILE *, tree);\n+\n     /* Output code that will emit a label for unwind info, if this\n        target requires such labels.  Second argument is the decl the\n        unwind info is associated with, third is a boolean: true if"}, {"sha": "48055cf65fd645fea77efe76e126cb94d4b386be", "filename": "gcc/varasm.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812b587e9dd503c08805b69f0006beef8faa9ac2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=812b587e9dd503c08805b69f0006beef8faa9ac2", "patch": "@@ -489,7 +489,8 @@ asm_output_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n \t\tunsigned HOST_WIDE_INT size ATTRIBUTE_UNUSED,\n \t\tunsigned HOST_WIDE_INT rounded)\n {\n-  targetm.asm_out.globalize_label (file, name);\n+  gcc_assert (strcmp (XSTR (XEXP (DECL_RTL (decl), 0), 0), name) == 0);\n+  targetm.asm_out.globalize_decl_name (file, decl);\n   switch_to_section (bss_section);\n #ifdef ASM_DECLARE_OBJECT_NAME\n   last_assemble_variable_decl = decl;\n@@ -4739,11 +4740,11 @@ weak_finish (void)\n static void\n globalize_decl (tree decl)\n {\n-  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n \n #if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n   if (DECL_WEAK (decl))\n     {\n+      const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n       tree *p, t;\n \n #ifdef ASM_WEAKEN_DECL\n@@ -4777,7 +4778,7 @@ globalize_decl (tree decl)\n     }\n #endif\n \n-  targetm.asm_out.globalize_label (asm_out_file, name);\n+  targetm.asm_out.globalize_decl_name (asm_out_file, decl);\n }\n \n /* We have to be able to tell cgraph about the needed-ness of the target\n@@ -5913,6 +5914,14 @@ default_globalize_label (FILE * stream, const char *name)\n }\n #endif /* GLOBAL_ASM_OP */\n \n+/* Default function to output code that will globalize a declaration.  */\n+void\n+default_globalize_decl_name (FILE * stream, tree decl)\n+{\n+  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  targetm.asm_out.globalize_label (stream, name);\n+}\n+\n /* Default function to output a label for unwind information.  The\n    default is to do nothing.  A target that needs nonlocal labels for\n    unwind information must provide its own function to do this.  */"}]}