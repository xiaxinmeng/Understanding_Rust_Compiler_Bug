{"sha": "c39ada0455f7a4037f98ac221f770742d85d8144", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM5YWRhMDQ1NWY3YTQwMzdmOThhYzIyMWY3NzA3NDJkODVkODE0NA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-04-05T20:13:53Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-04-05T20:13:53Z"}, "message": "function.h (virtuals_instantiated): Declare.\n\n* function.h (virtuals_instantiated): Declare.\n* function.c: (virtuals_instantiated): Make global.\n* calls.c (emit_library_call_value_1): Use\nvirtual_outgoing_args_rtx only if it hasn't been instantiated.\nOtherwise, use the stack pointer directly.\n\nFrom-SVN: r41127", "tree": {"sha": "221512a33199a7175b67e219e51648c193b287dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221512a33199a7175b67e219e51648c193b287dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c39ada0455f7a4037f98ac221f770742d85d8144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39ada0455f7a4037f98ac221f770742d85d8144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39ada0455f7a4037f98ac221f770742d85d8144", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39ada0455f7a4037f98ac221f770742d85d8144/comments", "author": null, "committer": null, "parents": [{"sha": "93a6eb7802d2a1e71430635a220df4663c4dd2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a6eb7802d2a1e71430635a220df4663c4dd2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a6eb7802d2a1e71430635a220df4663c4dd2ad"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "25682a3181fea80192e803dbae00e06434dbb6e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c39ada0455f7a4037f98ac221f770742d85d8144", "patch": "@@ -1,3 +1,11 @@\n+2001-04-05  DJ Delorie  <dj@redhat.com>\n+\n+\t* function.h (virtuals_instantiated): Declare.\n+\t* function.c: (virtuals_instantiated): Make global.\n+\t* calls.c (emit_library_call_value_1): Use\n+\tvirtual_outgoing_args_rtx only if it hasn't been instantiated.\n+\tOtherwise, use the stack pointer directly.\n+\n Thu Apr  5 19:13:33 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (x86_initialize_trampoline): New global function."}, {"sha": "d0f3a14038a922d2c0de509583e87b4dccaf4d6e", "filename": "gcc/calls.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c39ada0455f7a4037f98ac221f770742d85d8144", "patch": "@@ -59,6 +59,10 @@ Boston, MA 02111-1307, USA.  */\n #define PUSH_ARGS_REVERSED 0\n #endif\n \n+#ifndef STACK_POINTER_OFFSET\n+#define STACK_POINTER_OFFSET    0\n+#endif\n+\n /* Like PREFERRED_STACK_BOUNDARY but in units of bytes, not bits.  */\n #define STACK_BYTES (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)\n \n@@ -3820,11 +3824,15 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \t       highest_outgoing_arg_in_use - initial_highest_arg_in_use);\n       needed = 0;\n \n-      /* The address of the outgoing argument list must not be copied to a\n-\t register here, because argblock would be left pointing to the\n-\t wrong place after the call to allocate_dynamic_stack_space below.  */\n+      /* We must be careful to use virtual regs before they're instantiated,\n+         and real regs afterwards.  Loop optimization, for example, can create\n+\t new libcalls after we've instantiated the virtual regs, and if we\n+\t use virtuals anyway, they won't match the rtl patterns.  */\n \n-      argblock = virtual_outgoing_args_rtx;\n+      if (virtuals_instantiated)\n+\targblock = plus_constant (stack_pointer_rtx, STACK_POINTER_OFFSET);\n+      else\n+\targblock = virtual_outgoing_args_rtx;\n     }\n   else\n     {"}, {"sha": "ee182580c2a035eae8273c43747988436aee1206", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c39ada0455f7a4037f98ac221f770742d85d8144", "patch": "@@ -120,8 +120,10 @@ int current_function_sp_is_unchanging;\n int current_function_uses_only_leaf_regs;\n \n /* Nonzero once virtual register instantiation has been done.\n-   assign_stack_local uses frame_pointer_rtx when this is nonzero.  */\n-static int virtuals_instantiated;\n+   assign_stack_local uses frame_pointer_rtx when this is nonzero.\n+   calls.c:emit_library_call_value_1 uses it to set up\n+   post-instantiation libcalls.  */\n+int virtuals_instantiated;\n \n /* These variables hold pointers to functions to create and destroy\n    target specific, per-function data structures.  */"}, {"sha": "f27c2b018467b9afffdd47688e1239147acb1c3c", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39ada0455f7a4037f98ac221f770742d85d8144/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=c39ada0455f7a4037f98ac221f770742d85d8144", "patch": "@@ -481,6 +481,9 @@ extern struct function *cfun;\n /* A list of all functions we have compiled so far.  */\n extern struct function *all_functions;\n \n+/* Nonzero if we've already converted virtual regs to hard regs.  */\n+extern int virtuals_instantiated;\n+\n /* For backward compatibility... eventually these should all go away.  */\n #define current_function_name (cfun->name)\n #define current_function_pops_args (cfun->pops_args)"}]}