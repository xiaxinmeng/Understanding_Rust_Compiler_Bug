{"sha": "e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzYzBiYTM2ZmUyYmUyYzhiZDYwMTgyOGI5YWNkMTZlN2VjMjBjYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-07T23:11:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-07T23:11:06Z"}, "message": "[multiple changes]\n\n2000-03-07  Neil Booth  <NeilB@earthling.net>\n\n\t* cppexp.c (struct operation, left_shift, right_shift,\n\tcpp_parse_expr): Change some \"char\"s to \"U_CHAR\"s, and some\n\t\"int\"s to \"unsigned int\"s.\n\t* cpplib.c (detect_if_not_defined, do_assert, do_unassert):\n\tSimilarly.\n\t* cpplib.h: Update for above.\n\t* mkdeps.c (deps_init, deps_calc_target): Cast pointers\n\treturned from allocations.\n\n\t* cppinit.c (opt_comp, parse_options): New functions.\n\t(handle_option): Use parse_option to parse a single command\n\tline option, that possibly takes an argument.\n\t(cpp_handle_options): Sort the array of command line options on\n\tfirst invocation (non-ASCII hosts only).\n\t(print_help): Update.\n\n2000-03-07  Zack Weinberg  <zack@wolery.cumb.org>\n\n\t* mkdeps.c (munge): Fix off-by-one bug and inconsistencies in\n\tbackslash counting loops.  Problem noted by Matt Kraai <kraai@ghs.com>.\n\nFrom-SVN: r32394", "tree": {"sha": "a31f6a5cd8330056644174c9c5293dea5cb41041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31f6a5cd8330056644174c9c5293dea5cb41041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/comments", "author": null, "committer": null, "parents": [{"sha": "28c231d6479bb046652cf9dbd2e8fb5c88910952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c231d6479bb046652cf9dbd2e8fb5c88910952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c231d6479bb046652cf9dbd2e8fb5c88910952"}], "stats": {"total": 1180, "additions": 645, "deletions": 535}, "files": [{"sha": "c6cd9a749ba7e8587ecbab3742de7379cb92eaf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "patch": "@@ -1,5 +1,26 @@\n+2000-03-07  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppexp.c (struct operation, left_shift, right_shift,\n+\tcpp_parse_expr): Change some \"char\"s to \"U_CHAR\"s, and some\n+\t\"int\"s to \"unsigned int\"s.\n+\t* cpplib.c (detect_if_not_defined, do_assert, do_unassert):\n+\tSimilarly.\n+\t* cpplib.h: Update for above.\n+\t* mkdeps.c (deps_init, deps_calc_target): Cast pointers\n+\treturned from allocations.\n+\n+\t* cppinit.c (opt_comp, parse_options): New functions.\n+\t(handle_option): Use parse_option to parse a single command\n+\tline option, that possibly takes an argument.\n+\t(cpp_handle_options): Sort the array of command line options on\n+\tfirst invocation (non-ASCII hosts only).\n+\t(print_help): Update.\n+\n 2000-03-07  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* mkdeps.c (munge): Fix off-by-one bug and inconsistencies in\n+\tbackslash counting loops.  Problem noted by Matt Kraai <kraai@ghs.com>.\n+\t\n \t* cppfiles.c (_cpp_find_include_file): Make sure ih->name is\n \tinitialized.\n \t* cppinit.c (cpp_cleanup): Free imp->nshort also."}, {"sha": "3ed818c188a59130bdf0c31b005f9ba491657e5e", "filename": "gcc/cppexp.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "patch": "@@ -78,9 +78,11 @@ Written by Per Bothner 1994.  */\n \n static void integer_overflow PARAMS ((cpp_reader *));\n static HOST_WIDEST_INT left_shift PARAMS ((cpp_reader *, HOST_WIDEST_INT,\n-\t\t\t\t\t   int, unsigned HOST_WIDEST_INT));\n+\t\t\t\t\t   unsigned int,\n+\t\t\t\t\t   unsigned HOST_WIDEST_INT));\n static HOST_WIDEST_INT right_shift PARAMS ((cpp_reader *, HOST_WIDEST_INT,\n-\t\t\t\t\t    int, unsigned HOST_WIDEST_INT));\n+\t\t\t\t\t    unsigned int,\n+\t\t\t\t\t    unsigned HOST_WIDEST_INT));\n static struct operation parse_number PARAMS ((cpp_reader *, U_CHAR *,\n \t\t\t\t\t      U_CHAR *));\n static struct operation parse_charconst PARAMS ((cpp_reader *, U_CHAR *,\n@@ -110,14 +112,13 @@ static struct operation lex PARAMS ((cpp_reader *, int));\n /* SKIP_OPERAND is set for '&&' '||' '?' and ':' when the\n    following operand should be short-circuited instead of evaluated.  */\n #define SKIP_OPERAND 8\n-/*#define UNSIGNEDP 16*/\n \n struct operation\n {\n   short op;\n-  char rprio; /* Priority of op (relative to it right operand).  */\n-  char flags;\n-  char unsignedp;    /* true if value should be treated as unsigned */\n+  U_CHAR rprio; /* Priority of op (relative to it right operand).  */\n+  U_CHAR flags;\n+  U_CHAR unsignedp;    /* true if value should be treated as unsigned */\n   HOST_WIDEST_INT value;        /* The value logically \"right\" of op.  */\n };\n \n@@ -610,7 +611,7 @@ static HOST_WIDEST_INT\n left_shift (pfile, a, unsignedp, b)\n      cpp_reader *pfile;\n      HOST_WIDEST_INT a;\n-     int unsignedp;\n+     unsigned int unsignedp;\n      unsigned HOST_WIDEST_INT b;\n {\n   if (b >= HOST_BITS_PER_WIDEST_INT)\n@@ -634,7 +635,7 @@ static HOST_WIDEST_INT\n right_shift (pfile, a, unsignedp, b)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n      HOST_WIDEST_INT a;\n-     int unsignedp;\n+     unsigned int unsignedp;\n      unsigned HOST_WIDEST_INT b;\n {\n   if (b >= HOST_BITS_PER_WIDEST_INT)\n@@ -689,15 +690,15 @@ _cpp_parse_expr (pfile)\n   struct operation *stack = init_stack;\n   struct operation *limit = stack + INIT_STACK_SIZE;\n   register struct operation *top = stack;\n-  int lprio, rprio = 0;\n+  unsigned int lprio, rprio = 0;\n   int skip_evaluation = 0;\n \n   top->rprio = 0;\n   top->flags = 0;\n   for (;;)\n     {\n       struct operation op;\n-      char flags = 0;\n+      U_CHAR flags = 0;\n \n       /* Read a token */\n       op =  lex (pfile, skip_evaluation);\n@@ -780,7 +781,8 @@ _cpp_parse_expr (pfile)\n       while (top->rprio > lprio)\n \t{\n \t  HOST_WIDEST_INT v1 = top[-1].value, v2 = top[0].value;\n-\t  int unsigned1 = top[-1].unsignedp, unsigned2 = top[0].unsignedp;\n+\t  unsigned int unsigned1 = top[-1].unsignedp;\n+\t  unsigned int unsigned2 = top[0].unsignedp;\n \t  top--;\n \t  if ((top[1].flags & LEFT_OPERAND_REQUIRED)\n \t      && ! (top[0].flags & HAVE_VALUE))"}, {"sha": "04129aaecc6e16d48d33ef76e91a45194900fbe5", "filename": "gcc/cppinit.c", "status": "modified", "additions": 591, "deletions": 504, "changes": 1095, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "patch": "@@ -183,6 +183,10 @@ static void initialize_dependency_output PARAMS ((cpp_reader *));\n static void initialize_standard_includes PARAMS ((cpp_reader *));\n static void new_pending_define\t\tPARAMS ((struct cpp_options *,\n \t\t\t\t\t\t const char *));\n+#ifdef HOST_EBCDIC\n+static int opt_comp\t\t\tPARAMS ((const void *, const void *));\n+#endif\n+static int parse_option\t\t\tPARAMS ((const char *));\n static int handle_option\t\tPARAMS ((cpp_reader *, int, char **));\n \n /* Fourth argument to append_include_chain: chain to use */\n@@ -900,6 +904,185 @@ new_pending_define (opts, text)\n   APPEND (opts->pending, define, o);\n }\n \n+enum opt_code\n+{\n+  OPT_stdin_stdout = 0, OPT_dollar, OPT_plus,\n+  OPT__help, OPT__version,\n+  OPT_A, OPT_C, OPT_D, OPT_H, OPT_I, OPT_M,\n+  OPT_MD, OPT_MG, OPT_MM, OPT_MMD,\n+  OPT_P, OPT_U, OPT_W,\n+  OPT_d,\n+  OPT_fleading_underscore, OPT_fno_leading_underscore,\n+  OPT_fpreprocessed, OPT_fno_preprocessed,\n+  OPT_g, OPT_h, \n+  OPT_idirafter, OPT_imacros, OPT_include,\n+  OPT_iprefix, OPT_isystem, OPT_iwithprefix, OPT_iwithprefixbefore,\n+  OPT_lang_asm, OPT_lang_c, OPT_lang_cplusplus, OPT_lang_c89,\n+  OPT_lang_chill, OPT_lang_fortran, OPT_lang_objc, OPT_lang_objcplusplus,\n+  OPT_nostdinc, OPT_nostdincplusplus,\n+  OPT_o,\n+  OPT_pedantic, OPT_pedantic_errors, OPT_remap,\n+  OPT_std_c89, OPT_std_c99, OPT_std_c9x, OPT_std_gnu89, OPT_std_gnu99,\n+  OPT_std_gnu9x, OPT_std_iso9899_1990, OPT_std_iso9899_199409,\n+  OPT_std_iso9899_1999, OPT_std_iso9899_199x,\n+  OPT_traditional, OPT_trigraphs,\n+  OPT_v, OPT_w,\n+  N_OPTS\n+};\n+\n+struct cl_option\n+{\n+  const char *opt_text;\n+  const char *msg;\n+  size_t opt_len;\n+  enum opt_code opt_code;\n+};\n+\n+static const char no_arg[] = N_(\"Argument missing after `%s' option\");\n+static const char no_ass[] = N_(\"Assertion missing after `%s' option\");\n+static const char no_dir[] = N_(\"Directory name missing after `%s' option\");\n+static const char no_fil[] = N_(\"File name missing after `%s' option\");\n+static const char no_mac[] = N_(\"Macro name missing after `%s' option\");\n+static const char no_pth[] = N_(\"Path name missing after `%s' option\");\n+\n+/* This list must be ASCII sorted. Make enum order above match this. */\n+#define DEF_OPT(text, msg, code) {text, msg, sizeof(text) - 1, code}\n+\n+#ifdef HOST_EBCDIC\n+static struct cl_option cl_options[] =\n+#else\n+static const struct cl_option cl_options[] =\n+#endif\n+{\n+  DEF_OPT(\"\",                         0,      OPT_stdin_stdout),\n+  DEF_OPT(\"$\",                        0,      OPT_dollar),\n+  DEF_OPT(\"+\",                        0,      OPT_plus),\n+  DEF_OPT(\"-help\",                    0,      OPT__help),\n+  DEF_OPT(\"-version\",                 0,      OPT__version),\n+  DEF_OPT(\"A\",                        no_ass, OPT_A),\n+  DEF_OPT(\"C\",                        0,      OPT_C),\n+  DEF_OPT(\"D\",                        no_mac, OPT_D),\n+  DEF_OPT(\"H\",                        0,      OPT_H),\n+  DEF_OPT(\"I\",                        no_dir, OPT_I),\n+  DEF_OPT(\"M\",                        0,      OPT_M),\n+  DEF_OPT(\"MD\",                       no_fil, OPT_MD),\n+  DEF_OPT(\"MG\",                       0,      OPT_MG),\n+  DEF_OPT(\"MM\",                       0,      OPT_MM),\n+  DEF_OPT(\"MMD\",                      no_fil, OPT_MMD),\n+  DEF_OPT(\"P\",                        0,      OPT_P),\n+  DEF_OPT(\"U\",                        no_mac, OPT_U),\n+  /* NB: Immed arg only, and not reqd */\n+  DEF_OPT(\"W\",                        no_arg, OPT_W),\n+  DEF_OPT(\"d\",                        no_arg, OPT_d),\n+  DEF_OPT(\"fleading-underscore\",      0,      OPT_fleading_underscore),\n+  DEF_OPT(\"fno-leading-underscore\",   0,      OPT_fno_leading_underscore),\n+  DEF_OPT(\"fpreprocessed\",            0,      OPT_fpreprocessed),\n+  DEF_OPT(\"fno-preprocessed\",         0,      OPT_fno_preprocessed),\n+  /* NB: Immed arg only, and not reqd */\n+  DEF_OPT(\"g\",                        no_arg, OPT_g),\n+  DEF_OPT(\"h\",                        0,      OPT_h),\n+  DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter),\n+  DEF_OPT(\"imacros\",                  no_fil, OPT_imacros),\n+  DEF_OPT(\"include\",                  no_fil, OPT_include),\n+  DEF_OPT(\"iprefix\",                  no_pth, OPT_iprefix),\n+  DEF_OPT(\"isystem\",                  no_dir, OPT_isystem),\n+  DEF_OPT(\"iwithprefix\",              no_dir, OPT_iwithprefix),\n+  DEF_OPT(\"iwithprefixbefore\",        no_dir, OPT_iwithprefixbefore),\n+  DEF_OPT(\"lang-asm\",                 0,      OPT_lang_asm),\n+  DEF_OPT(\"lang-c\",                   0,      OPT_lang_c),\n+  DEF_OPT(\"lang-c++\",                 0,      OPT_lang_cplusplus),\n+  DEF_OPT(\"lang-c89\",                 0,      OPT_lang_c89),\n+  DEF_OPT(\"lang-chill\",               0,      OPT_lang_chill),\n+  DEF_OPT(\"lang-fortran\",             0,      OPT_lang_fortran),\n+  DEF_OPT(\"lang-objc\",                0,      OPT_lang_objc),\n+  DEF_OPT(\"lang-objc++\",              0,      OPT_lang_objcplusplus),\n+  DEF_OPT(\"nostdinc\",                 0,      OPT_nostdinc),\n+  DEF_OPT(\"nostdinc++\",               0,      OPT_nostdincplusplus),\n+  DEF_OPT(\"o\",                        no_fil, OPT_o),\n+  DEF_OPT(\"pedantic\",                 0,      OPT_pedantic),\n+  DEF_OPT(\"pedantic-errors\",          0,      OPT_pedantic_errors),\n+  DEF_OPT(\"remap\",                    0,      OPT_remap),\n+  DEF_OPT(\"std=c89\",                  0,      OPT_std_c89),\n+  DEF_OPT(\"std=c99\",                  0,      OPT_std_c99),\n+  DEF_OPT(\"std=c9x\",                  0,      OPT_std_c9x),\n+  DEF_OPT(\"std=gnu89\",                0,      OPT_std_gnu89),\n+  DEF_OPT(\"std=gnu99\",                0,      OPT_std_gnu99),\n+  DEF_OPT(\"std=gnu9x\",                0,      OPT_std_gnu9x),\n+  DEF_OPT(\"std=iso9899:1990\",         0,      OPT_std_iso9899_1990),\n+  DEF_OPT(\"std=iso9899:199409\",       0,      OPT_std_iso9899_199409),\n+  DEF_OPT(\"std=iso9899:1999\",         0,      OPT_std_iso9899_1999),\n+  DEF_OPT(\"std=iso9899:199x\",         0,      OPT_std_iso9899_199x),\n+  DEF_OPT(\"traditional\",              0,      OPT_traditional),\n+  DEF_OPT(\"trigraphs\",                0,      OPT_trigraphs),\n+  DEF_OPT(\"v\",                        0,      OPT_v),\n+  DEF_OPT(\"w\",                        0,      OPT_w)\n+};\n+#undef DEF_OPT\n+\n+/* Perform a binary search to find which, if any, option the given\n+   command-line matches.  Returns its index in the option array,\n+   negative on failure.  Complications arise since some options can be\n+   suffixed with an argument, and multiple complete matches can occur,\n+   e.g. -iwithprefix and -iwithprefixbefore.  Moreover, we want to\n+   accept options beginning with -g and -W that we do not recognise,\n+   but not to swallow any subsequent command line argument; these are\n+   handled as special cases in cpp_handle_option */\n+static int\n+parse_option (input)\n+     const char *input;\n+{\n+  unsigned int md, mn, mx;\n+  size_t opt_len;\n+  int comp;\n+\n+  mn = 0;\n+  mx = N_OPTS;\n+\n+  while (mx > mn)\n+    {\n+      md = (mn + mx) / 2;\n+    \n+      opt_len = cl_options[md].opt_len;\n+      comp = strncmp (input, cl_options[md].opt_text, opt_len);\n+    \n+      if (comp > 0)\n+\tmn = md + 1;\n+      else if (comp < 0)\n+\tmx = md;\n+      else\n+\t{\n+\t  if (input[opt_len] == '\\0')\n+\t    return md;\n+\t  /* We were passed more text.  If the option takes an argument,\n+\t     we may match a later option or we may have been passed the\n+\t     argument.  The longest possible option match succeeds.\n+\t     If the option takes no arguments we have not matched and\n+\t     continue the search (e.g. input=\"stdc++\" match was \"stdc\") */\n+\t  mn = md + 1;\n+\t  if (cl_options[md].msg)\n+\t    {\n+\t      /* Scan forwards.  If we get an exact match, return it.\n+\t\t Otherwise, return the longest option-accepting match.\n+\t\t This loops no more than twice with current options */\n+\t      mx = md;\n+\t      for (; mn < N_OPTS; mn++)\n+\t\t{\n+\t\t  opt_len = cl_options[mn].opt_len;\n+\t\t  if (strncmp (input, cl_options[mn].opt_text, opt_len))\n+\t\t    break;\n+\t\t  if (input[opt_len] == '\\0')\n+\t\t    return mn;\n+\t\t  if (cl_options[mn].msg)\n+\t\t    mx = mn;\n+\t\t}\n+\t      return mx;\n+\t    }\n+\t}\n+    }\n+\n+  return -1;\n+}\n+\n /* Handle one command-line option in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n    Returns number of strings consumed.  */\n@@ -926,374 +1109,213 @@ handle_option (pfile, argc, argv)\n \topts->in_fname = argv[i];\n     }\n   else\n-    switch (argv[i][1])\n-      {\n-      case 'f':\n-\tif (!strcmp (argv[i], \"-fleading-underscore\"))\n+    {\n+      enum opt_code opt_code;\n+      int opt_index;\n+      char *arg = 0;\n+\n+      /* Skip over '-' */\n+      opt_index = parse_option (&argv[i][1]);\n+      if (opt_index < 0)\n+\treturn i;\n+\n+      opt_code = cl_options[opt_index].opt_code;\n+      if (cl_options[opt_index].msg)\n+\t{\n+\t  arg = &argv[i][cl_options[opt_index].opt_len + 1];\n+\n+\t  /* Yuk. Special case for -g and -W as they must not swallow\n+\t     up any following argument.  If this becomes common, add\n+\t     another field to the cl_options table */\n+\t  if (arg[0] == '\\0' && !(opt_code == OPT_g || opt_code == OPT_W))\n+\t    {\n+\t      arg = argv[++i];\n+\t      if (!arg)\n+\t\t{\n+\t\t  cpp_fatal (pfile, _(cl_options[opt_index].msg), argv[i - 1]);\n+\t\t  return argc;\n+\t\t}\n+\t    }\n+\t}\n+ \n+      switch (opt_code)\n+\t{\n+\tcase N_OPTS: /* shut GCC up */\n+\t  break;\n+\tcase OPT_fleading_underscore:\n \t  user_label_prefix = \"_\";\n-\telse if (!strcmp (argv[i], \"-fno-leading-underscore\"))\n+\t  break;\n+\tcase OPT_fno_leading_underscore:\n \t  user_label_prefix = \"\";\n-\telse if (!strcmp (argv[i], \"-fpreprocessed\"))\n+\t  break;\n+\tcase OPT_fpreprocessed:\n \t  opts->preprocessed = 1;\n-\telse if (!strcmp (argv[i], \"-fno-preprocessed\"))\n+\t  break;\n+\tcase OPT_fno_preprocessed:\n \t  opts->preprocessed = 0;\n-\telse\n-\t  {\n-\t    return i;\n-\t  }\n-\tbreak;\n-\n-      case 'I':\t\t\t/* Add directory to path for includes.  */\n-\tif (!strcmp (argv[i] + 2, \"-\"))\n-\t  {\n-\t    /* -I- means:\n-\t       Use the preceding -I directories for #include \"...\"\n-\t       but not #include <...>.\n-\t       Don't search the directory of the present file\n-\t       for #include \"...\".  (Note that -I. -I- is not the same as\n-\t       the default setup; -I. uses the compiler's working dir.)  */\n-\t    if (! opts->ignore_srcdir)\n-\t      {\n-\t\topts->ignore_srcdir = 1;\n-\t\topts->pending->quote_head = opts->pending->brack_head;\n-\t\topts->pending->quote_tail = opts->pending->brack_tail;\n-\t\topts->pending->brack_head = 0;\n-\t\topts->pending->brack_tail = 0;\n-\t      }\n-\t    else\n-\t      {\n-\t\tcpp_fatal (pfile, \"-I- specified twice\");\n-\t\treturn argc;\n-\t      }\n-\t  }\n-\telse\n-\t  {\n-\t    char *fname;\n-\t    if (argv[i][2] != 0)\n-\t      fname = argv[i] + 2;\n-\t    else if (i + 1 == argc)\n-\t      goto missing_dirname;\n-\t    else\n-\t      fname = argv[++i];\n-\t    append_include_chain (pfile, opts->pending,\n-\t\t\t\t  xstrdup (fname), BRACKET, 0);\n-\t  }\n-\tbreak;\n-\n-      case 'i':\n-\t/* Add directory to beginning of system include path, as a system\n-\t   include directory. */\n-\tif (!strcmp (argv[i], \"-isystem\"))\n-\t  {\n-\t    if (i + 1 == argc)\n-\t      goto missing_filename;\n-\t    append_include_chain (pfile, opts->pending,\n-\t\t\t\t  xstrdup (argv[++i]), SYSTEM, 0);\n-\t  }\n-\telse if (!strcmp (argv[i], \"-include\"))\n-\t  {\n-\t    if (i + 1 == argc)\n-\t      goto missing_filename;\n-\t    else\n-\t      {\n-\t\tstruct pending_option *o = (struct pending_option *)\n-\t\t  xmalloc (sizeof (struct pending_option));\n-\t\to->arg = argv[++i];\n-\n-\t\t/* This list has to be built in reverse order so that\n-\t\t   when cpp_start_read pushes all the -include files onto\n-\t\t   the buffer stack, they will be scanned in forward order.  */\n-\t\to->next = opts->pending->include_head;\n-\t\topts->pending->include_head = o;\n-\t      }\n-\t  }\n-\telse if (!strcmp (argv[i], \"-imacros\"))\n-\t  {\n-\t    if (i + 1 == argc)\n-\t      goto missing_filename;\n-\t    else\n-\t      {\n-\t\tstruct pending_option *o = (struct pending_option *)\n-\t\t  xmalloc (sizeof (struct pending_option));\n-\t\to->arg = argv[++i];\n-\t\to->next = NULL;\n-\n-\t\tAPPEND (opts->pending, imacros, o);\n-\t      }\n-\t  }\n-\t/* Add directory to end of path for includes,\n-\t   with the default prefix at the front of its name.  */\n-\telse if (!strcmp (argv[i], \"-iwithprefix\"))\n-\t  {\n-\t    char *fname;\n-\t    int len;\n-\t    if (i + 1 == argc)\n-\t      goto missing_dirname;\n-\t    ++i;\n-\t    len = strlen (argv[i]);\n-\n-\t    if (opts->include_prefix != 0)\n-\t      {\n-\t\tfname = xmalloc (opts->include_prefix_len + len + 1);\n-\t\tmemcpy (fname, opts->include_prefix, opts->include_prefix_len);\n-\t\tmemcpy (fname + opts->include_prefix_len, argv[i], len + 1);\n-\t      }\n-\t    else\n-\t      {\n-\t\tfname = xmalloc (sizeof GCC_INCLUDE_DIR - 8 + len);\n-\t\tmemcpy (fname, GCC_INCLUDE_DIR, sizeof GCC_INCLUDE_DIR - 9);\n-\t\tmemcpy (fname + sizeof GCC_INCLUDE_DIR - 9, argv[i], len + 1);\n-\t      }\n-\t  \n-\t    append_include_chain (pfile, opts->pending, fname, SYSTEM, 0);\n-\t  }\n-\t/* Add directory to main path for includes,\n-\t   with the default prefix at the front of its name.  */\n-\telse if (!strcmp (argv[i], \"-iwithprefixbefore\"))\n-\t  {\n-\t    char *fname;\n-\t    int len;\n-\t    if (i + 1 == argc)\n-\t      goto missing_dirname;\n-\t    ++i;\n-\t    len = strlen (argv[i]);\n-\n-\t    if (opts->include_prefix != 0)\n-\t      {\n-\t\tfname = xmalloc (opts->include_prefix_len + len + 1);\n-\t\tmemcpy (fname, opts->include_prefix, opts->include_prefix_len);\n-\t\tmemcpy (fname + opts->include_prefix_len, argv[i], len + 1);\n-\t      }\n-\t    else\n-\t      {\n-\t\tfname = xmalloc (sizeof GCC_INCLUDE_DIR - 8 + len);\n-\t\tmemcpy (fname, GCC_INCLUDE_DIR, sizeof GCC_INCLUDE_DIR - 9);\n-\t\tmemcpy (fname + sizeof GCC_INCLUDE_DIR - 9, argv[i], len + 1);\n-\t      }\n-\t  \n-\t    append_include_chain (pfile, opts->pending, fname, BRACKET, 0);\n-\t  }\n-\t/* Add directory to end of path for includes.  */\n-\telse if (!strcmp (argv[i], \"-idirafter\"))\n-\t  {\n-\t    if (i + 1 == argc)\n-\t      goto missing_dirname;\n-\t    append_include_chain (pfile, opts->pending,\n-\t\t\t\t  xstrdup (argv[++i]), AFTER, 0);\n-\t  }\n-\telse if (!strcmp (argv[i], \"-iprefix\"))\n-\t  {\n-\t    if (i + 1 == argc)\n-\t      goto missing_filename;\n-\t    else\n-\t      {\n-\t\topts->include_prefix = argv[++i];\n-\t\topts->include_prefix_len = strlen (argv[i]);\n-\t      }\n-\t  }\n-\tbreak;\n-      \n-      case 'o':\n-\tif (opts->out_fname != NULL)\n-\t  {\n-\t    cpp_fatal (pfile, \"Output filename specified twice\");\n-\t    return argc;\n-\t  }\n-\tif (i + 1 == argc)\n-\t  goto missing_filename;\n-\topts->out_fname = argv[++i];\n-\tif (!strcmp (opts->out_fname, \"-\"))\n-\t  opts->out_fname = \"\";\n-\tbreak;\n-      \n-      case 'p':\n-\tif (!strcmp (argv[i], \"-pedantic\"))\n-\t  opts->pedantic = 1;\n-\telse if (!strcmp (argv[i], \"-pedantic-errors\"))\n-\t  {\n-\t    opts->pedantic = 1;\n-\t    opts->pedantic_errors = 1;\n-\t  }\n-\tbreak;\n-      \n-      case 't':\n-\tif (!strcmp (argv[i], \"-traditional\"))\n-\t  {\n-\t    opts->traditional = 1;\n-\t    opts->cplusplus_comments = 0;\n-\t    opts->trigraphs = 0;\n-\t    opts->warn_trigraphs = 0;\n-\t  }\n-\telse if (!strcmp (argv[i], \"-trigraphs\"))\n-\t  opts->trigraphs = 1;\n-\tbreak;\n-      \n-      case 'l':\n-\tif (! strcmp (argv[i], \"-lang-c\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c99 = 1, opts->objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-c89\"))\n-\t  {\n-\t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n-\t    opts->trigraphs = 1;\n-\t    new_pending_define (opts, \"__STRICT_ANSI__\");\n-\t  }\n-\tif (! strcmp (argv[i], \"-lang-c++\"))\n-\t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c99 = 0, opts->objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-objc\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c99 = 0, opts->objc = 1;\n-\tif (! strcmp (argv[i], \"-lang-objc++\"))\n-\t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c99 = 0, opts->objc = 1;\n-\tif (! strcmp (argv[i], \"-lang-asm\"))\n-\t  opts->lang_asm = 1;\n-\tif (! strcmp (argv[i], \"-lang-fortran\"))\n-\t  opts->lang_fortran = 1, opts->cplusplus_comments = 0;\n-\tif (! strcmp (argv[i], \"-lang-chill\"))\n-\t  opts->objc = 0, opts->cplusplus = 0, opts->chill = 1,\n-\t    opts->traditional = 1;\n-\tbreak;\n-      \n-      case '+':\n-\topts->cplusplus = 1, opts->cplusplus_comments = 1;\n-\tbreak;\n-\n-      case 's':\n-\tif (!strcmp (argv[i], \"-std=gnu89\"))\n-\t  {\n-\t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n-\t  }\n-\telse if (!strcmp (argv[i], \"-std=gnu9x\")\n-\t\t || !strcmp (argv[i], \"-std=gnu99\"))\n-\t  {\n-\t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t    opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n-\t    new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n-\t  }\n-\telse if (!strcmp (argv[i], \"-std=iso9899:1990\")\n-\t\t || !strcmp (argv[i], \"-std=c89\"))\n-\t  {\n-\t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n-\t    opts->trigraphs = 1;\n-\t    new_pending_define (opts, \"__STRICT_ANSI__\");\n-\t  }\n-\telse if (!strcmp (argv[i], \"-std=iso9899:199409\"))\n-\t  {\n-\t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n-\t    opts->trigraphs = 1;\n-\t    new_pending_define (opts, \"__STRICT_ANSI__\");\n-\t    new_pending_define (opts, \"__STDC_VERSION__=199409L\");\n-\t  }\n-\telse if (!strcmp (argv[i], \"-std=iso9899:199x\")\n-\t\t || !strcmp (argv[i], \"-std=iso9899:1999\")\n-\t\t || !strcmp (argv[i], \"-std=c9x\")\n-\t\t || !strcmp (argv[i], \"-std=c99\"))\n-\t  {\n-\t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t    opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n-\t    opts->trigraphs = 1;\n-\t    new_pending_define (opts, \"__STRICT_ANSI__\");\n-\t    new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n-\t  }\n-\tbreak;\n-\n-      case 'w':\n-\topts->inhibit_warnings = 1;\n-\tbreak;\n-      \n-      case 'W':\n-\tif (!strcmp (argv[i], \"-Wtrigraphs\"))\n-\t  opts->warn_trigraphs = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n+\t  break;\n+\tcase OPT_w:\n+\t  opts->inhibit_warnings = 1;\n+\t  break;\n+\tcase OPT_g:  /* Silently ignore anything but -g3 */\n+\t  if (!strcmp(&argv[i][2], \"3\"))\n+\t    opts->debug_output = 1;\n+\t  break;\n+\tcase OPT_h:\n+\tcase OPT__help:\n+\t  print_help ();\n+\t  exit (0);  /* XXX */\n+\t  break;\n+\tcase OPT__version:\n+\t  fprintf (stderr, _(\"GNU CPP version %s (cpplib)\\n\"), version_string);\n+\t  exit (0);  /* XXX */\n+\t  break;\n+\tcase OPT_C:\n+\t  opts->discard_comments = 0;\n+\t  break;\n+\tcase OPT_P:\n+\t  opts->no_line_commands = 1;\n+\t  break;\n+\tcase OPT_dollar:\t\t/* Don't include $ in identifiers.  */\n+\t  opts->dollars_in_ident = 0;\n+\t  break;\n+\tcase OPT_H:\n+\t  opts->print_include_names = 1;\n+\t  break;\n+\tcase OPT_D:\n+\t  new_pending_define (opts, arg);\n+\t  break;\n+\tcase OPT_pedantic_errors:\n+\t  opts->pedantic_errors = 1;\n+\t  /* fall through */\n+\tcase OPT_pedantic:\n+ \t  opts->pedantic = 1;\n+\t  break;\n+\tcase OPT_traditional:\n+\t  opts->traditional = 1;\n+\t  opts->cplusplus_comments = 0;\n+\t  opts->trigraphs = 0;\n \t  opts->warn_trigraphs = 0;\n-\telse if (!strcmp (argv[i], \"-Wcomment\"))\n-\t  opts->warn_comments = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-comment\"))\n-\t  opts->warn_comments = 0;\n-\telse if (!strcmp (argv[i], \"-Wcomments\"))\n-\t  opts->warn_comments = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-comments\"))\n-\t  opts->warn_comments = 0;\n-\telse if (!strcmp (argv[i], \"-Wtraditional\"))\n-\t  opts->warn_stringify = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-traditional\"))\n-\t  opts->warn_stringify = 0;\n-\telse if (!strcmp (argv[i], \"-Wundef\"))\n-\t  opts->warn_undef = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-undef\"))\n-\t  opts->warn_undef = 0;\n-\telse if (!strcmp (argv[i], \"-Wimport\"))\n-\t  opts->warn_import = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-import\"))\n-\t  opts->warn_import = 0;\n-\telse if (!strcmp (argv[i], \"-Werror\"))\n-\t  opts->warnings_are_errors = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-error\"))\n-\t  opts->warnings_are_errors = 0;\n-\telse if (!strcmp (argv[i], \"-Wall\"))\n-\t  {\n-\t    opts->warn_trigraphs = 1;\n-\t    opts->warn_comments = 1;\n-\t  }\n-\tbreak;\n-      \n-      case 'M':\n-\t/* The style of the choices here is a bit mixed.\n-\t   The chosen scheme is a hybrid of keeping all options in one string\n-\t   and specifying each option in a separate argument:\n-\t   -M|-MM|-MD file|-MMD file [-MG].  An alternative is:\n-\t   -M|-MM|-MD file|-MMD file|-MG|-MMG; or more concisely:\n-\t   -M[M][G][D file].  This is awkward to handle in specs, and is not\n-\t   as extensible.  */\n-\t/* ??? -MG must be specified in addition to one of -M or -MM.\n-\t   This can be relaxed in the future without breaking anything.\n-\t   The converse isn't true.  */\n-      \n-\t/* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n-\tif (!strcmp (argv[i], \"-MG\"))\n-\t  {\n-\t    opts->print_deps_missing_files = 1;\n-\t    break;\n-\t  }\n-\tif (!strcmp (argv[i], \"-M\"))\n-\t  opts->print_deps = 2;\n-\telse if (!strcmp (argv[i], \"-MM\"))\n-\t  opts->print_deps = 1;\n-\telse if (!strcmp (argv[i], \"-MD\"))\n-\t  opts->print_deps = 2;\n-\telse if (!strcmp (argv[i], \"-MMD\"))\n-\t  opts->print_deps = 1;\n-\t/* For -MD and -MMD options, write deps on file named by next arg.  */\n-\tif (!strcmp (argv[i], \"-MD\") || !strcmp (argv[i], \"-MMD\"))\n-\t  {\n-\t    if (i+1 == argc)\n-\t      goto missing_filename;\n-\t    opts->deps_file = argv[++i];\n-\t  }\n-\telse\n-\t  {\n-\t    /* For -M and -MM, write deps on standard output\n-\t       and suppress the usual output.  */\n-\t    opts->no_output = 1;\n-\t  }\t  \n-\tbreak;\n-      \n-      case 'd':\n-\t{\n-\t  char *p = argv[i] + 2;\n-\t  char c;\n-\t  while ((c = *p++) != 0)\n+\t  break;\n+\tcase OPT_trigraphs:\n+ \t  opts->trigraphs = 1;\n+\t  break;\n+\tcase OPT_plus:\n+\t  opts->cplusplus = 1;\n+\t  opts->cplusplus_comments = 1;\n+\t  break;\n+\tcase OPT_remap:\n+\t  opts->remap = 1;\n+\t  break;\n+\tcase OPT_iprefix:\n+\t  opts->include_prefix = arg;\n+\t  opts->include_prefix_len = strlen (arg);\n+\t  break;\n+\tcase OPT_lang_c:\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n+\t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n+\t  break;\n+\tcase OPT_lang_c89:\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 0;\n+\t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n+\t  opts->trigraphs = 1;\n+\t  new_pending_define (opts, \"__STRICT_ANSI__\");\n+\t  break;\n+\tcase OPT_lang_cplusplus:\n+\t  opts->cplusplus = 1, opts->cplusplus_comments = 1;\n+\t  opts->c89 = 0, opts->c99 = 0, opts->objc = 0;\n+\t  break;\n+\tcase OPT_lang_objc:\n+\tcase OPT_lang_objcplusplus:\n+\t  opts->cplusplus = opt_code == OPT_lang_objcplusplus;\n+\t  opts->cplusplus_comments = 1;\n+\t  opts->c89 = 0, opts->c99 = 0, opts->objc = 1;\n+\t  break;\n+\tcase OPT_lang_asm:\n+ \t  opts->lang_asm = 1;\n+\t  break;\n+\tcase OPT_lang_fortran:\n+ \t  opts->lang_fortran = 1, opts->cplusplus_comments = 0;\n+\t  break;\n+\tcase OPT_lang_chill:\n+\t  opts->objc = 0, opts->cplusplus = 0;\n+\t  opts->chill = 1, opts->traditional = 1;\n+\t  break;\n+\tcase OPT_nostdinc:\n+\t  /* -nostdinc causes no default include directories.\n+\t     You must specify all include-file directories with -I.  */\n+\t  opts->no_standard_includes = 1;\n+\t  break;\n+\tcase OPT_nostdincplusplus:\n+\t  /* -nostdinc++ causes no default C++-specific include directories. */\n+\t  opts->no_standard_cplusplus_includes = 1;\n+\t  break;\n+\tcase OPT_std_gnu89:\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n+\t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n+\t  break;\n+\tcase OPT_std_gnu9x:\n+\tcase OPT_std_gnu99:\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n+\t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n+\t  new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n+\t  break;\n+\tcase OPT_std_iso9899_199409:\n+\t  new_pending_define (opts, \"__STDC_VERSION__=199409L\");\n+\t  /* Fall through */\n+\tcase OPT_std_iso9899_1990:\n+\tcase OPT_std_c89:\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 0;\n+\t  opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n+\t  opts->trigraphs = 1;\n+\t  new_pending_define (opts, \"__STRICT_ANSI__\");\n+\t  break;\n+\tcase OPT_std_iso9899_199x:\n+\tcase OPT_std_iso9899_1999:\n+\tcase OPT_std_c9x:\n+\tcase OPT_std_c99:\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 1;\n+\t  opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n+\t  opts->trigraphs = 1;\n+\t  new_pending_define (opts, \"__STRICT_ANSI__\");\n+\t  new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n+\t  break;\n+\tcase OPT_o:\n+\t  if (opts->out_fname != NULL)\n \t    {\n-\t      /* Arg to -d specifies what parts of macros to dump */\n-\t      switch (c)\n-\t\t{\n-\t\tcase 'M':\n+\t      cpp_fatal (pfile, \"Output filename specified twice\");\n+\t      return argc;\n+\t    }\n+\t  opts->out_fname = arg;\n+\t  if (!strcmp (opts->out_fname, \"-\"))\n+\t    opts->out_fname = \"\";\n+\t  break;\n+\tcase OPT_v:\n+\t  fprintf (stderr, _(\"GNU CPP version %s (cpplib)\\n\"), version_string);\n+#ifdef TARGET_VERSION\n+\t  TARGET_VERSION;\n+#endif\n+\t  fputc ('\\n', stderr);\n+\t  opts->verbose = 1;\n+\t  break;\n+\tcase OPT_stdin_stdout:\n+\t  /* JF handle '-' as file name meaning stdin or stdout */\n+\t  if (opts->in_fname == NULL)\n+\t    opts->in_fname = \"\";\n+\t  else if (opts->out_fname == NULL)\n+\t    opts->out_fname = \"\";\n+\t  break;\n+\tcase OPT_d:\n+\t  /* Args to -d specify what parts of macros to dump.\n+\t     Silently ignore unrecognised options; they may\n+\t     be aimed at the compiler proper. */\n+ \t  {\n+\t    char c;\n+ \n+\t    while ((c = *arg++) != '\\0')\n+ \t      switch (c)\n+ \t\t{\n+ \t\tcase 'M':\n \t\t  opts->dump_macros = dump_only;\n \t\t  opts->no_output = 1;\n \t\t  break;\n@@ -1307,75 +1329,50 @@ handle_option (pfile, argc, argv)\n \t\t  opts->dump_includes = 1;\n \t\t  break;\n \t\t}\n-\t    }\n-\t}\n-\tbreak;\n-    \n-      case 'g':\n-\tif (argv[i][2] == '3')\n-\t  opts->debug_output = 1;\n-\tbreak;\n-      \n-      case '-':\n-\tif (!strcmp (argv[i], \"--help\"))\n-\t  print_help ();\n-\telse if (!strcmp (argv[i], \"--version\"))\n-\t  fprintf (stderr, _(\"GNU CPP version %s (cpplib)\\n\"), version_string);\n-\texit (0);  /* XXX */\n-\tbreak;\n-\t\n-      case 'v':\n-\tfprintf (stderr, _(\"GNU CPP version %s (cpplib)\\n\"), version_string);\n-#ifdef TARGET_VERSION\n-\tTARGET_VERSION;\n-#endif\n-\tfputc ('\\n', stderr);\n-\topts->verbose = 1;\n-\tbreak;\n-      \n-      case 'H':\n-\topts->print_include_names = 1;\n-\tbreak;\n-      \n-      case 'D':\n-\t{\n-\t  const char *text;\n-\t  if (argv[i][2] != 0)\n-\t    text = argv[i] + 2;\n-\t  else if (i + 1 == argc)\n-\t    {\n-\t      cpp_fatal (pfile, \"Macro name missing after -D option\");\n-\t      return argc;\n-\t    }\n-\t  else\n-\t    text = argv[++i];\n-\t  new_pending_define (opts, text);\n-\t}\n-\tbreak;\n-      \n-      case 'A':\n-\t{\n-\t  char *p;\n-\t\n-\t  if (argv[i][2] != 0)\n-\t    p = argv[i] + 2;\n-\t  else if (i + 1 == argc)\n-\t    {\n-\t      cpp_fatal (pfile, \"Assertion missing after -A option\");\n-\t      return argc;\n-\t    }\n-\t  else\n-\t    p = argv[++i];\n-\t\n-\t  if (strcmp (p, \"-\"))\n-\t    {\n-\t      struct pending_option *o = (struct pending_option *)\n-\t\txmalloc (sizeof (struct pending_option));\n-\n-\t      o->arg = p;\n-\t      o->next = NULL;\n-\t      o->undef = 0;\n-\t      APPEND (opts->pending, assert, o);\n+\t  }\n+\t  break;\n+\t  /* The style of the choices here is a bit mixed.\n+\t     The chosen scheme is a hybrid of keeping all options in one string\n+\t     and specifying each option in a separate argument:\n+\t     -M|-MM|-MD file|-MMD file [-MG].  An alternative is:\n+\t     -M|-MM|-MD file|-MMD file|-MG|-MMG; or more concisely:\n+\t     -M[M][G][D file].  This is awkward to handle in specs, and is not\n+\t     as extensible.  */\n+\t  /* ??? -MG must be specified in addition to one of -M or -MM.\n+\t     This can be relaxed in the future without breaking anything.\n+\t     The converse isn't true.  */\n+       \n+\t  /* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n+\tcase OPT_MG:\n+\t  opts->print_deps_missing_files = 1;\n+\t  break;\n+\tcase OPT_M:\n+\tcase OPT_MD:\n+\tcase OPT_MM:\n+\tcase OPT_MMD:\n+\t  if (opt_code == OPT_M || opt_code == OPT_MD)\n+\t    opts->print_deps = 2;\n+ \t  else\n+\t    opts->print_deps = 1;\n+\n+\t  /* For -MD and -MMD options, write deps on file named by next arg */\n+\t  /* For -M and -MM, write deps on standard output\n+\t     and suppress the usual output.  */\n+\t  if (opt_code == OPT_MD || opt_code == OPT_MMD)\n+\t      opts->deps_file = arg;\n+ \t  else\n+\t      opts->no_output = 1;\n+\t  break;\n+\tcase OPT_A:\n+\t  if (strcmp (arg, \"-\"))\n+ \t    {\n+ \t      struct pending_option *o = (struct pending_option *)\n+ \t\txmalloc (sizeof (struct pending_option));\n+ \n+\t      o->arg = arg;\n+ \t      o->next = NULL;\n+ \t      o->undef = 0;\n+ \t      APPEND (opts->pending, assert, o);\n \t    }\n \t  else\n \t    {\n@@ -1404,88 +1401,163 @@ handle_option (pfile, argc, argv)\n \t      opts->pending->define_head = NULL;\n \t      opts->pending->define_tail = NULL;\n \t    }\n-\t}\n-\tbreak;\n-    \n-      case 'U':\n-\t{\n-\t  struct pending_option *o = (struct pending_option *)\n-\t    xmalloc (sizeof (struct pending_option));\n-\t  \n-\t  if (argv[i][2] != 0)\n-\t    o->arg = argv[i] + 2;\n-\t  else if (i + 1 == argc)\n+\t  break;\n+\tcase OPT_U:\n+\t  {\n+\t    struct pending_option *o = (struct pending_option *)\n+\t      xmalloc (sizeof (struct pending_option));\n+ \t  \n+\t    o->arg = arg;\n+\t    o->next = NULL;\n+\t    o->undef = 1;\n+\t    APPEND (opts->pending, define, o);\n+\t  }\n+\t  break;\n+\tcase OPT_I:           /* Add directory to path for includes.  */\n+\t  if (!strcmp (arg, \"-\"))\n+ \t    {\n+\t      /* -I- means:\n+\t\t Use the preceding -I directories for #include \"...\"\n+\t\t but not #include <...>.\n+\t\t Don't search the directory of the present file\n+\t\t for #include \"...\".  (Note that -I. -I- is not the same as\n+\t\t the default setup; -I. uses the compiler's working dir.)  */\n+\t      if (! opts->ignore_srcdir)\n+\t\t{\n+\t\t  opts->ignore_srcdir = 1;\n+\t\t  opts->pending->quote_head = opts->pending->brack_head;\n+\t\t  opts->pending->quote_tail = opts->pending->brack_tail;\n+\t\t  opts->pending->brack_head = 0;\n+\t\t  opts->pending->brack_tail = 0;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  cpp_fatal (pfile, \"-I- specified twice\");\n+\t\t  return argc;\n+\t\t}\n+ \t    }\n+ \t  else\n+\t    append_include_chain (pfile, opts->pending,\n+\t\t\t\t  xstrdup (arg), BRACKET, 0);\n+\t  break;\n+\tcase OPT_isystem:\n+\t  /* Add directory to beginning of system include path, as a system\n+\t     include directory. */\n+\t  append_include_chain (pfile, opts->pending,\n+\t\t\t\txstrdup (arg), SYSTEM, 0);\n+\t  break;\n+\tcase OPT_include:\n+\t  {\n+\t    struct pending_option *o = (struct pending_option *)\n+\t      xmalloc (sizeof (struct pending_option));\n+\t    o->arg = arg;\n+\n+\t    /* This list has to be built in reverse order so that\n+\t       when cpp_start_read pushes all the -include files onto\n+\t       the buffer stack, they will be scanned in forward order.  */\n+\t    o->next = opts->pending->include_head;\n+\t    opts->pending->include_head = o;\n+\t  }\n+\t  break;\n+\tcase OPT_imacros:\n+\t  {\n+\t    struct pending_option *o = (struct pending_option *)\n+\t      xmalloc (sizeof (struct pending_option));\n+\t    o->arg = arg;\n+\t    o->next = NULL;\n+\t    \n+\t    APPEND (opts->pending, imacros, o);\n+\t  }\n+\t  break;\n+\tcase OPT_iwithprefix:\n+\t  /* Add directory to end of path for includes,\n+\t     with the default prefix at the front of its name.  */\n+\t  /* fall through */\n+\tcase OPT_iwithprefixbefore:\n+\t  /* Add directory to main path for includes,\n+\t     with the default prefix at the front of its name.  */\n+\t  {\n+\t    char *fname;\n+\t    int len;\n+\t    \n+\t    len = strlen (arg);\n+ \n+\t    if (opts->include_prefix != 0)\n+\t      {\n+\t\tfname = xmalloc (opts->include_prefix_len + len + 1);\n+\t\tmemcpy (fname, opts->include_prefix, opts->include_prefix_len);\n+\t\tmemcpy (fname + opts->include_prefix_len, arg, len + 1);\n+\t      }\n+\t    else\n+\t      {\n+\t\tfname = xmalloc (sizeof GCC_INCLUDE_DIR - 8 + len);\n+\t\tmemcpy (fname, GCC_INCLUDE_DIR, sizeof GCC_INCLUDE_DIR - 9);\n+\t\tmemcpy (fname + sizeof GCC_INCLUDE_DIR - 9, arg, len + 1);\n+\t      }\n+\t    \n+\t    append_include_chain (pfile, opts->pending, fname, \n+\t\t\t  opt_code == OPT_iwithprefix ? SYSTEM: BRACKET, 0);\n+\t  }\n+\t  break;\n+\tcase OPT_idirafter:\n+\t  /* Add directory to end of path for includes.  */\n+\t  append_include_chain (pfile, opts->pending,\n+\t\t\t\txstrdup (arg), AFTER, 0);\n+\t  break;\n+\tcase OPT_W:\n+\t  /* Silently ignore unrecognised options */\n+\t  if (!strcmp (argv[i], \"-Wall\"))\n \t    {\n-\t      cpp_fatal (pfile, \"Macro name missing after -U option\");\n-\t      return argc;\n+\t      opts->warn_trigraphs = 1;\n+\t      opts->warn_comments = 1;\n \t    }\n-\t  else\n-\t    o->arg = argv[++i];\n-\n-\t  o->next = NULL;\n-\t  o->undef = 1;\n-\t  APPEND (opts->pending, define, o);\n-\t}\n-\tbreak;\n-      \n-      case 'C':\n-\topts->discard_comments = 0;\n-\tbreak;\n-      \n-      case 'E':\t\t\t/* -E comes from cc -E; ignore it.  */\n-\tbreak;\n-      \n-      case 'P':\n-\topts->no_line_commands = 1;\n-\tbreak;\n-      \n-      case '$':\t\t\t/* Don't include $ in identifiers.  */\n-\topts->dollars_in_ident = 0;\n-\tbreak;\n-      \n-      case 'n':\n-\tif (!strcmp (argv[i], \"-nostdinc\"))\n-\t  /* -nostdinc causes no default include directories.\n-\t     You must specify all include-file directories with -I.  */\n-\t  opts->no_standard_includes = 1;\n-\telse if (!strcmp (argv[i], \"-nostdinc++\"))\n-\t  /* -nostdinc++ causes no default C++-specific include directories. */\n-\t  opts->no_standard_cplusplus_includes = 1;\n-\tbreak;\n-      \n-      case 'r':\n-\tif (!strcmp (argv[i], \"-remap\"))\n-\t  opts->remap = 1;\n-\tbreak;\n-      \n-      case '\\0': /* JF handle '-' as file name meaning stdin or stdout */\n-\tif (opts->in_fname == NULL)\n-\t  opts->in_fname = \"\";\n-\telse if (opts->out_fname == NULL)\n-\t  opts->out_fname = \"\";\n-\telse\n-\t  return i;  /* error */\n-\tbreak;\n-\n-      default:\n-\treturn i;\n-      }\n-\n+\t  else if (!strcmp (argv[i], \"-Wtraditional\"))\n+\t    opts->warn_stringify = 1;\n+\t  else if (!strcmp (argv[i], \"-Wtrigraphs\"))\n+\t    opts->warn_trigraphs = 1;\n+\t  else if (!strcmp (argv[i], \"-Wcomment\"))\n+\t    opts->warn_comments = 1;\n+\t  else if (!strcmp (argv[i], \"-Wcomments\"))\n+\t    opts->warn_comments = 1;\n+\t  else if (!strcmp (argv[i], \"-Wundef\"))\n+\t    opts->warn_undef = 1;\n+\t  else if (!strcmp (argv[i], \"-Wimport\"))\n+\t    opts->warn_import = 1;\n+\t  else if (!strcmp (argv[i], \"-Werror\"))\n+\t    opts->warnings_are_errors = 1;\n+\t  else if (!strcmp (argv[i], \"-Wno-traditional\"))\n+\t    opts->warn_stringify = 0;\n+\t  else if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n+\t    opts->warn_trigraphs = 0;\n+\t  else if (!strcmp (argv[i], \"-Wno-comment\"))\n+\t    opts->warn_comments = 0;\n+\t  else if (!strcmp (argv[i], \"-Wno-comments\"))\n+\t    opts->warn_comments = 0;\n+\t  else if (!strcmp (argv[i], \"-Wno-undef\"))\n+\t    opts->warn_undef = 0;\n+\t  else if (!strcmp (argv[i], \"-Wno-import\"))\n+\t    opts->warn_import = 0;\n+\t  else if (!strcmp (argv[i], \"-Wno-error\"))\n+\t    opts->warnings_are_errors = 0;\n+\t  break;\n+ \t}\n+    }\n   return i + 1;\n+}\n \n- missing_filename:\n-  cpp_fatal (pfile, \"Filename missing after `%s' option\", argv[i]);\n-  return argc;\n- missing_dirname:\n-  cpp_fatal (pfile, \"Directory name missing after `%s' option\", argv[i]);\n-  return argc;\n+#ifdef HOST_EBCDIC\n+static int\n+opt_comp (const void *p1, const void *p2)\n+{\n+  return strcmp (((struct cl_option *)p1)->opt_text,\n+\t\t ((struct cl_option *)p2)->opt_text);\n }\n+#endif\n \n /* Handle command-line options in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n    Returns if an unrecognized option is seen.\n    Returns number of strings consumed.  */\n-\n int\n cpp_handle_options (pfile, argc, argv)\n      cpp_reader *pfile;\n@@ -1494,6 +1566,18 @@ cpp_handle_options (pfile, argc, argv)\n {\n   int i;\n   int strings_processed;\n+\n+#ifdef HOST_EBCDIC\n+  static int opts_sorted = 0;\n+\n+  if (!opts_sorted)\n+    {\n+      opts_sorted = 1;\n+      /* For non-ASCII hosts, the array needs to be sorted at runtime */\n+      qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n+    }\n+#endif\n+\n   for (i = 0; i < argc; i += strings_processed)\n     {\n       strings_processed = handle_option (pfile, argc - i, argv + i);\n@@ -1517,11 +1601,13 @@ Switches:\\n\\\n   -isystem <dir>            Add <dir> to the start of the system include path\\n\\\n   -idirafter <dir>          Add <dir> to the end of the system include path\\n\\\n   -I <dir>                  Add <dir> to the end of the main include path\\n\\\n+  -I-                       Fine-grained include path control; see info docs\\n\\\n   -nostdinc                 Do not search system include directories\\n\\\n                              (dirs specified with -isystem will still be used)\\n\\\n   -nostdinc++               Do not search system include directories for C++\\n\\\n   -o <file>                 Put output into <file>\\n\\\n   -pedantic                 Issue all warnings demanded by strict ANSI C\\n\\\n+  -pedantic-errors          Issue -pedantic warnings as errors instead\\n\\\n   -traditional              Follow K&R pre-processor behaviour\\n\\\n   -trigraphs                Support ANSI C trigraphs\\n\\\n   -lang-c                   Assume that the input sources are in C\\n\\\n@@ -1556,7 +1642,7 @@ Switches:\\n\\\n   -MD                       As -M, but put output in a .d file\\n\\\n   -MMD                      As -MD, but ignore system header files\\n\\\n   -MG                       Treat missing header file as generated files\\n\\\n-  -g                        Include #define and #undef directives in the output\\n\\\n+  -g3                       Include #define and #undef directives in the output\\n\\\n   -D<macro>                 Define a <macro> with string '1' as its value\\n\\\n   -D<macro>=<val>           Define a <macro> with <val> as its value\\n\\\n   -A<question> (<answer>)   Assert the <answer> to <question>\\n\\\n@@ -1571,6 +1657,7 @@ Switches:\\n\\\n   -P                        Do not generate #line directives\\n\\\n   -$                        Do not allow '$' in identifiers\\n\\\n   -remap                    Remap file names when including files.\\n\\\n+  --version                 Display version information\\n\\\n   -h or --help              Display this information\\n\\\n \"), stdout);\n }"}, {"sha": "b0924ed7bfbc07c175f1120fd9da800a3c3e61cd", "filename": "gcc/cpplib.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "patch": "@@ -1809,7 +1809,7 @@ detect_if_not_defined (pfile)\n \n   if (pfile->only_seen_white == 2)\n     {\n-      char *ident;\n+      U_CHAR *ident;\n       enum cpp_token token;\n       int base_offset;\n       int token_offset;\n@@ -2270,7 +2270,7 @@ do_endif (pfile, keyword)\n \t      for (ip = CPP_BUFFER (pfile); ; ip = CPP_PREV_BUFFER (ip))\n \t\tif (ip->fname != NULL)\n \t\t  break;\n-\t      ip->ihash->control_macro = (char *) temp->control_macro;\n+\t      ip->ihash->control_macro = temp->control_macro;\n \t    }\n         }\n       free (temp);\n@@ -3051,7 +3051,7 @@ do_assert (pfile, keyword)\n      cpp_reader *pfile;\n      const struct directive *keyword ATTRIBUTE_UNUSED;\n {\n-  char *sym;\n+  U_CHAR *sym;\n   int ret, c;\n   HASHNODE *base, *this;\n   int baselen, thislen;\n@@ -3060,7 +3060,7 @@ do_assert (pfile, keyword)\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#assert'\");\n \n   cpp_skip_hspace (pfile);\n-  sym = (char *) CPP_PWRITTEN (pfile);\t/* remember where it starts */\n+  sym = CPP_PWRITTEN (pfile);\t/* remember where it starts */\n   ret = parse_assertion (pfile);\n   if (ret == 0)\n     goto error;\n@@ -3079,7 +3079,7 @@ do_assert (pfile, keyword)\n     }\n \n   thislen = strlen (sym);\n-  baselen = index (sym, '(') - sym;\n+  baselen = (U_CHAR *) index (sym, '(') - sym;\n   this = _cpp_lookup (pfile, sym, thislen);\n   if (this)\n     {\n@@ -3101,12 +3101,12 @@ do_assert (pfile, keyword)\n \t\t      (char *)base->value.aschain);\n   base->value.aschain = this;\n   \n-  pfile->limit = (unsigned char *) sym; /* Pop */\n+  pfile->limit = sym;\t\t/* Pop */\n   return 0;\n \n  error:\n   skip_rest_of_line (pfile);\n-  pfile->limit = (unsigned char *) sym; /* Pop */\n+  pfile->limit = sym;\t\t/* Pop */\n   return 0;\n }\n \n@@ -3116,7 +3116,7 @@ do_unassert (pfile, keyword)\n      const struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   int c, ret;\n-  char *sym;\n+  U_CHAR *sym;\n   long baselen, thislen;\n   HASHNODE *base, *this, *next;\n   \n@@ -3125,7 +3125,7 @@ do_unassert (pfile, keyword)\n \n   cpp_skip_hspace (pfile);\n \n-  sym = (char *) CPP_PWRITTEN (pfile);\t/* remember where it starts */\n+  sym = CPP_PWRITTEN (pfile);\t/* remember where it starts */\n   ret = parse_assertion (pfile);\n   if (ret == 0)\n     goto error;\n@@ -3153,7 +3153,7 @@ do_unassert (pfile, keyword)\n     }\n   else\n     {\n-      baselen = index (sym, '(') - sym;\n+      baselen = (U_CHAR *) index (sym, '(') - sym;\n       base = _cpp_lookup (pfile, sym, baselen);\n       if (! base) goto error;\n       this = _cpp_lookup (pfile, sym, thislen);\n@@ -3170,11 +3170,11 @@ do_unassert (pfile, keyword)\n \t_cpp_delete_macro (base);  /* Last answer for this predicate deleted. */\n     }\n   \n-  pfile->limit = (unsigned char *) sym; /* Pop */\n+  pfile->limit = sym;\t\t/* Pop */\n   return 0;\n  error:\n   skip_rest_of_line (pfile);\n-  pfile->limit = (unsigned char *) sym; /* Pop */\n+  pfile->limit = sym;\t\t/* Pop */\n   return 0;\n }\n "}, {"sha": "435f9ddc15f1294b202674e49fb4d2266bdd3bcf", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "patch": "@@ -540,7 +540,7 @@ struct include_hash\n   struct file_name_list *foundhere;\n   const char *name;\t\t/* (partial) pathname of file */\n   const char *nshort;\t\t/* name of file as referenced in #include */\n-  const char *control_macro;\t/* macro, if any, preventing reinclusion -\n+  const U_CHAR *control_macro;\t/* macro, if any, preventing reinclusion -\n \t\t\t\t   see redundant_include_p */\n   char *buf, *limit;\t\t/* for file content cache,\n \t\t\t\t   not yet implemented */\n@@ -629,14 +629,14 @@ struct if_stack {\n   int lineno;\t\t\t/* similarly */\n   int if_succeeded;\t\t/* true if a leg of this if-group\n \t\t\t\t    has been passed through rescan */\n-  unsigned char *control_macro;\t/* For #ifndef at start of file,\n+  U_CHAR *control_macro;\t/* For #ifndef at start of file,\n \t\t\t\t   this is the macro name tested.  */\n   enum node_type type;\t\t/* type of last directive seen in this group */\n };\n typedef struct if_stack IF_STACK_FRAME;\n \n extern void cpp_buf_line_and_col PARAMS((cpp_buffer *, long *, long *));\n-extern cpp_buffer* cpp_file_buffer PARAMS((cpp_reader *));\n+extern cpp_buffer *cpp_file_buffer PARAMS((cpp_reader *));\n extern void cpp_define PARAMS ((cpp_reader *, unsigned char *));\n extern void cpp_assert PARAMS ((cpp_reader *, unsigned char *));\n extern void cpp_undef  PARAMS ((cpp_reader *, unsigned char *));"}, {"sha": "4ec0dc7551e230172af62a3b8b981bae843b4b0b", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=e23c0ba36fe2be2c8bd601828b9acd16e7ec20cb", "patch": "@@ -58,7 +58,7 @@ munge (filename)\n \t     preceded by 2N backslashes represents N backslashes at\n \t     the end of a file name; and backslashes in other\n \t     contexts should not be doubled.  */\n-\t  for (q = p - 1; q < filename && q[-1] == '\\\\';  q--)\n+\t  for (q = p - 1; filename <= q && *q == '\\\\';  q--)\n \t    len++;\n \t  len++;\n \t  break;\n@@ -80,7 +80,7 @@ munge (filename)\n \t{\n \tcase ' ':\n \tcase '\\t':\n-\t  for (q = p - 1; filename < q && q[-1] == '\\\\';  q--)\n+\t  for (q = p - 1; filename <= q && *q == '\\\\';  q--)\n \t    *dst++ = '\\\\';\n \t  *dst++ = '\\\\';\n \t  break;\n@@ -135,8 +135,8 @@ deps_init ()\n \n   /* Allocate space for the vectors now.  */\n \n-  d->targetv = xmalloc (2 * sizeof (const char *));\n-  d->depv = xmalloc (8 * sizeof (const char *));\n+  d->targetv = (const char **) xmalloc (2 * sizeof (const char *));\n+  d->depv = (const char **) xmalloc (8 * sizeof (const char *));\n \n   d->ntargets = 0;\n   d->targets_size = 2;\n@@ -188,7 +188,7 @@ deps_calc_target (d, t)\n   char *o, *suffix;\n \n   t = base_name (t);\n-  o = alloca (strlen (t) + 8);\n+  o = (char *) alloca (strlen (t) + 8);\n \n   strcpy (o, t);\n   suffix = strrchr (o, '.');"}]}