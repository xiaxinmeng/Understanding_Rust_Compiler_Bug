{"sha": "b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjN2NhMmVmMzkxNWEwYjIyOTI0OTlkYWJjYWFiZWZkY2EwNGQ4OQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-10-10T17:03:46Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-10-10T17:03:46Z"}, "message": "Documentation hyperlinks for [-Wname-of-option] (PR 87488)\n\nThis patch uses the support for pretty-printing escaped URLs added in\nthe previous patch (PR 87488) so that in a sufficiently capable terminal\nthe [-Wname-of-option] emitted at the end of each diagnostic becomes a\nhyperlink to the documentation for that option on the GCC website.\n\nI've tested it with Fedora 30's GNOME Terminal (3.32.2 with VTE 0.56.3);\nthe option text is printed with a dotted underline, hovering shows the\nURL, and on right-clicking it offers menu items to visit/copy the URL.\n\ngcc/ChangeLog:\n\tPR 87488\n\t* Makefile.in (CFLAGS-opts.o): Pass in DOCUMENTATION_ROOT_URL via\n\t-D.\n\t* configure.ac (--with-documentation-root-url): New option.\n\t* configure: Regenerate.\n\t* diagnostic-format-json.cc (json_end_diagnostic): If there is an\n\toption URL, add it as a new string field of the diagnostic option.\n\t* diagnostic.c (diagnostic_initialize): Initialize get_option_url.\n\t(print_option_information): If get_option_url is non-NULL, call\n\tit, and if the result is non-NULL, potentially emit an escape\n\tsequence to markup the option text with the resulting URL.\n\t* diagnostic.h (diagnostic_context::get_option_url): New callback.\n\t* doc/invoke.texi (-fdiagnostics-format=): Add \"option_url\" to\n\texample of JSON output.\n\t* opts-diagnostic.h (get_option_url): New decl.\n\t* opts.c (get_option_url): New function.\n\t* toplev.c (general_init): Initialize the get_option_url callback.\n\ngcc/testsuite/ChangeLog:\n\tPR 87488\n\t* c-c++-common/diagnostic-format-json-2.c: Expect an \"option_url\"\n\tfield.\n\t* c-c++-common/diagnostic-format-json-3.c: Likewise.\n\t* gfortran.dg/diagnostic-format-json-2.F90: Likewise.\n\t* gfortran.dg/diagnostic-format-json-3.F90: Likewise.\n\t* jit.dg/test-error-array-bounds.c (create_code): Ensure that\n\terror messages don't contain escaped URLs.\n\nFrom-SVN: r276843", "tree": {"sha": "f5fd667cc19b7b0c467092967160fc6a00594a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5fd667cc19b7b0c467092967160fc6a00594a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3245582f7d5cf4a5f69218add91a15aa606e8822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3245582f7d5cf4a5f69218add91a15aa606e8822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3245582f7d5cf4a5f69218add91a15aa606e8822"}], "stats": {"total": 146, "additions": 140, "deletions": 6}, "files": [{"sha": "4409d4595c463b7a3334e73cac87b51272aa9845", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -5,6 +5,26 @@\n \tpredicate.\n \t(vcond<V_HW:mode><V_HW2:mode>): Use vcond_comparison_operator.\n \n+2019-10-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87488\n+\t* Makefile.in (CFLAGS-opts.o): Pass in DOCUMENTATION_ROOT_URL via\n+\t-D.\n+\t* configure.ac (--with-documentation-root-url): New option.\n+\t* configure: Regenerate.\n+\t* diagnostic-format-json.cc (json_end_diagnostic): If there is an\n+\toption URL, add it as a new string field of the diagnostic option.\n+\t* diagnostic.c (diagnostic_initialize): Initialize get_option_url.\n+\t(print_option_information): If get_option_url is non-NULL, call\n+\tit, and if the result is non-NULL, potentially emit an escape\n+\tsequence to markup the option text with the resulting URL.\n+\t* diagnostic.h (diagnostic_context::get_option_url): New callback.\n+\t* doc/invoke.texi (-fdiagnostics-format=): Add \"option_url\" to\n+\texample of JSON output.\n+\t* opts-diagnostic.h (get_option_url): New decl.\n+\t* opts.c (get_option_url): New function.\n+\t* toplev.c (general_init): Initialize the get_option_url callback.\n+\n 2019-10-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 87488"}, {"sha": "c82858fa93e7619be13a765215b97b727d7dd6d2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -2142,6 +2142,8 @@ lto-wrapper$(exeext): $(LTO_WRAPPER_OBJS) libcommon-target.a $(LIBDEPS)\n \t   $(LTO_WRAPPER_OBJS) libcommon-target.a $(LIBS)\n \tmv -f T$@ $@\n \n+CFLAGS-opts.o += -DDOCUMENTATION_ROOT_URL=\\\"@DOCUMENTATION_ROOT_URL@\\\"\n+\n # Files used by all variants of C or by the stand-alone pre-processor.\n \n CFLAGS-c-family/c-opts.o += @TARGET_SYSTEM_ROOT_DEFINE@"}, {"sha": "9de9ef85f2481130236c73f8eb1576cbe1e2cc27", "filename": "gcc/configure", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -815,6 +815,7 @@ accel_dir_suffix\n real_target_noncanonical\n enable_as_accelerator\n gnat_install_lib\n+DOCUMENTATION_ROOT_URL\n REPORT_BUGS_TEXI\n REPORT_BUGS_TO\n PKGVERSION\n@@ -960,6 +961,7 @@ enable_gcov\n with_specs\n with_pkgversion\n with_bugurl\n+with_documentation_root_url\n enable_languages\n with_multilib_list\n with_zstd\n@@ -1788,6 +1790,8 @@ Optional Packages:\n   --with-specs=SPECS      add SPECS to driver command-line processing\n   --with-pkgversion=PKG   Use PKG in the version string in place of \"GCC\"\n   --with-bugurl=URL       Direct users to URL to report a bug\n+  --with-documentation-root-url=URL\n+                          Root for documentation URLs\n   --with-multilib-list    select multilibs (AArch64, SH and x86-64 only)\n   --with-zstd=PATH        specify prefix directory for installed zstd library.\n                           Equivalent to --with-zstd-include=PATH/include plus\n@@ -7802,6 +7806,23 @@ fi\n \n \n \n+# Allow overriding the default URL for documentation\n+\n+# Check whether --with-documentation-root-url was given.\n+if test \"${with_documentation_root_url+set}\" = set; then :\n+  withval=$with_documentation_root_url; case \"$withval\" in\n+      yes) as_fn_error $? \"documentation root URL not specified\" \"$LINENO\" 5 ;;\n+      no)  as_fn_error $? \"documentation root URL not specified\" \"$LINENO\" 5 ;;\n+      *)   DOCUMENTATION_ROOT_URL=\"$withval\"\n+\t   ;;\n+     esac\n+else\n+  DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/gcc/\"\n+\n+fi\n+\n+\n+\n # Sanity check enable_languages in case someone does not run the toplevel\n # configure # script.\n # Check whether --enable-languages was given.\n@@ -18830,7 +18851,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18833 \"configure\"\n+#line 18854 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18936,7 +18957,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18939 \"configure\"\n+#line 18960 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "62f4b2651cc006e8045b45aec0aecfa9302d8bfd", "filename": "gcc/configure.ac", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -960,6 +960,20 @@ AC_SUBST(CONFIGURE_SPECS)\n ACX_PKGVERSION([GCC])\n ACX_BUGURL([https://gcc.gnu.org/bugs/])\n \n+# Allow overriding the default URL for documentation\n+AC_ARG_WITH(documentation-root-url,\n+    AS_HELP_STRING([--with-documentation-root-url=URL],\n+                   [Root for documentation URLs]),\n+    [case \"$withval\" in\n+      yes) AC_MSG_ERROR([documentation root URL not specified]) ;;\n+      no)  AC_MSG_ERROR([documentation root URL not specified]) ;;\n+      *)   DOCUMENTATION_ROOT_URL=\"$withval\"\n+\t   ;;\n+     esac],\n+     DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/gcc/\"\n+)\n+AC_SUBST(DOCUMENTATION_ROOT_URL)\n+\n # Sanity check enable_languages in case someone does not run the toplevel\n # configure # script.\n AC_ARG_ENABLE(languages,"}, {"sha": "eb999521a5472ee3c1aa0422065d02bcb8a0c5ee", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -154,6 +154,17 @@ json_end_diagnostic (diagnostic_context *context, diagnostic_info *diagnostic,\n       free (option_text);\n     }\n \n+  if (context->get_option_url)\n+    {\n+      char *option_url = context->get_option_url (context,\n+\t\t\t\t\t\t  diagnostic->option_index);\n+      if (option_url)\n+\t{\n+\t  diag_obj->set (\"option_url\", new json::string (option_url));\n+\t  free (option_url);\n+\t}\n+    }\n+\n   /* If we've already emitted a diagnostic within this auto_diagnostic_group,\n      then add diag_obj to its \"children\" array.  */\n   if (cur_group)"}, {"sha": "a29bcf155e27d79feca93d4f2c3b837d55d33b45", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -200,6 +200,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->option_enabled = NULL;\n   context->option_state = NULL;\n   context->option_name = NULL;\n+  context->get_option_url = NULL;\n   context->last_location = UNKNOWN_LOCATION;\n   context->last_module = 0;\n   context->x_data = NULL;\n@@ -912,11 +913,22 @@ print_option_information (diagnostic_context *context,\n \n   if (option_text)\n     {\n+      char *option_url = NULL;\n+      if (context->get_option_url)\n+\toption_url = context->get_option_url (context,\n+\t\t\t\t\t      diagnostic->option_index);\n       pretty_printer *pp = context->printer;\n       pp_string (pp, \" [\");\n       pp_string (pp, colorize_start (pp_show_color (pp),\n \t\t\t\t     diagnostic_kind_color[diagnostic->kind]));\n+      if (option_url)\n+\tpp_begin_url (pp, option_url);\n       pp_string (pp, option_text);\n+      if (option_url)\n+\t{\n+\t  pp_end_url (pp);\n+\t  free (option_url);\n+\t}\n       pp_string (pp, colorize_stop (pp_show_color (pp)));\n       pp_character (pp, ']');\n       free (option_text);"}, {"sha": "91e4c50960510c8113bef80985e1ec87af162a49", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -194,6 +194,12 @@ struct diagnostic_context\n      May be passed 0 as well as the index of a particular option.  */\n   char *(*option_name) (diagnostic_context *, int, diagnostic_t, diagnostic_t);\n \n+  /* Client hook to return a URL describing the option that controls\n+     a diagnostic.  Returns malloced memory.  May return NULL if no URL\n+     is available.  May be passed 0 as well as the index of a\n+     particular option.  */\n+  char *(*get_option_url) (diagnostic_context *, int);\n+\n   /* Auxiliary data for client.  */\n   void *x_data;\n "}, {"sha": "085e8b0b2cac0b6f55d795b18ca4541f924e7c33", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -4116,6 +4116,7 @@ might be printed in JSON form (after formatting) like this:\n         ],\n         \"message\": \"this \\u2018if\\u2019 clause does not guard...\",\n         \"option\": \"-Wmisleading-indentation\",\n+        \"option_url\": \"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wmisleading-indentation\",\n         \"children\": [\n             @{\n                 \"kind\": \"note\","}, {"sha": "3f58ae91bf64c3ffa9887a2b42ed4eb8bc201996", "filename": "gcc/opts-diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fopts-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fopts-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-diagnostic.h?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -22,4 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n \n extern char *option_name (diagnostic_context *context, int option_index,\n \t\t\t  diagnostic_t orig_diag_kind, diagnostic_t diag_kind);\n+\n+extern char *get_option_url (diagnostic_context *context, int option_index);\n+\n #endif"}, {"sha": "32869ca49191a8f780a3503466b160a5f172a566", "filename": "gcc/opts.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -3218,3 +3218,24 @@ option_name (diagnostic_context *context, int option_index,\n   else\n     return NULL;\n }\n+\n+/* Return malloced memory for a URL describing the option OPTION_INDEX\n+   which enabled a diagnostic (context CONTEXT).  */\n+\n+char *\n+get_option_url (diagnostic_context *, int option_index)\n+{\n+  if (option_index)\n+    /* DOCUMENTATION_ROOT_URL should be supplied via -D by the Makefile\n+       (see --with-documentation-root-url).\n+\n+       Expect an anchor of the form \"index-Wfoo\" e.g.\n+       <a name=\"index-Wformat\"></a>, and thus an id within\n+       the URL of \"#index-Wformat\".  */\n+    return concat (DOCUMENTATION_ROOT_URL,\n+\t\t   \"Warning-Options.html\",\n+\t\t   \"#index\", cl_options[option_index].opt_text,\n+\t\t   NULL);\n+  else\n+    return NULL;\n+}"}, {"sha": "c3f588058f3a7ed59ca76f43a8e67480527e42ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -1,3 +1,14 @@\n+2019-10-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87488\n+\t* c-c++-common/diagnostic-format-json-2.c: Expect an \"option_url\"\n+\tfield.\n+\t* c-c++-common/diagnostic-format-json-3.c: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-2.F90: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-3.F90: Likewise.\n+\t* jit.dg/test-error-array-bounds.c (create_code): Ensure that\n+\terror messages don't contain escaped URLs.\n+\n 2019-10-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 87488"}, {"sha": "557ccf8378b32501ee841c1d309b7f5e81574703", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -10,6 +10,7 @@\n /* { dg-regexp \"\\\"kind\\\": \\\"warning\\\"\" } */\n /* { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" } */\n /* { dg-regexp \"\\\"option\\\": \\\"-Wcpp\\\"\" } */\n+/* { dg-regexp \"\\\"option_url\\\": \\\"https:\\[^\\n\\r\\\"\\]*#index-Wcpp\\\"\" } */\n \n /* { dg-regexp \"\\\"caret\\\": \\{\" } */\n /* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-2.c\\\"\" } */"}, {"sha": "378205c5bf56d493017a37080414d0735a4052ec", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -10,6 +10,7 @@\n /* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n /* { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" } */\n /* { dg-regexp \"\\\"option\\\": \\\"-Werror=cpp\\\"\" } */\n+/* { dg-regexp \"\\\"option_url\\\": \\\"https:\\[^\\n\\r\\\"\\]*#index-Wcpp\\\"\" } */\n \n /* { dg-regexp \"\\\"caret\\\": \\{\" } */\n /* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-3.c\\\"\" } */"}, {"sha": "2738be6548fbcfdfea72e8201c3aae6dec3497a3", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-4.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -30,13 +30,12 @@ int test (void)\n /* { dg-regexp \"\\\"line\\\": 8\" } */\n /* { dg-regexp \"\\\"column\\\": 10\" } */\n \n-/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n-\n /* The outer diagnostic.  */\n \n /* { dg-regexp \"\\\"kind\\\": \\\"warning\\\"\" } */\n /* { dg-regexp \"\\\"message\\\": \\\"this 'if' clause does not guard...\\\"\" } */\n /* { dg-regexp \"\\\"option\\\": \\\"-Wmisleading-indentation\\\"\" } */\n+/* { dg-regexp \"\\\"option_url\\\": \\\"https:\\[^\\n\\r\\\"\\]*#index-Wmisleading-indentation\\\"\" } */\n \n /* { dg-regexp \"\\\"caret\\\": \\{\" } */\n /* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-4.c\\\"\" } */\n@@ -48,6 +47,13 @@ int test (void)\n /* { dg-regexp \"\\\"line\\\": 6\" } */\n /* { dg-regexp \"\\\"column\\\": 4\" } */\n \n+/* More from the nested diagnostic (we can't guarantee what order the\n+   \"file\" keys are consumed).  */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+\n+/* More from the outer diagnostic.  */\n+\n /* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n \n /* { dg-regexp \"\\\"children\\\": \\[\\[\\{\\}, \\]*\\]\" } */"}, {"sha": "bebcf68d43118b423b7e30b86e9951053be394bd", "filename": "gcc/testsuite/gfortran.dg/diagnostic-format-json-2.F90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-2.F90?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -10,6 +10,7 @@\n ! { dg-regexp \"\\\"kind\\\": \\\"warning\\\"\" }\n ! { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" }\n ! { dg-regexp \"\\\"option\\\": \\\"-Wcpp\\\"\" }\n+! { dg-regexp \"\\\"option_url\\\": \\\"\\[^\\n\\r\\\"\\]*#index-Wcpp\\\"\" }\n \n ! { dg-regexp \"\\\"caret\\\": \\{\" }\n ! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-2.F90\\\"\" }"}, {"sha": "7ab78eb570b99f196246d4432e82d0ea4ea6ee68", "filename": "gcc/testsuite/gfortran.dg/diagnostic-format-json-3.F90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdiagnostic-format-json-3.F90?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -10,6 +10,7 @@\n ! { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" }\n ! { dg-regexp \"\\\"message\\\": \\\"#warning message\\\"\" }\n ! { dg-regexp \"\\\"option\\\": \\\"-Werror=cpp\\\"\" }\n+! { dg-regexp \"\\\"option_url\\\": \\\"\\[^\\n\\r\\\"\\]*#index-Wcpp\\\"\" }\n \n ! { dg-regexp \"\\\"caret\\\": \\{\" }\n ! { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-3.F90\\\"\" }"}, {"sha": "cd9361fba1da9c1c5d27f3abd7eeae925bf926c8", "filename": "gcc/testsuite/jit.dg/test-error-array-bounds.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-bounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-bounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-bounds.c?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -20,9 +20,10 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n   gcc_jit_context_add_command_line_option (ctxt, \"-Warray-bounds\");\n   gcc_jit_context_add_command_line_option (ctxt, \"-ftree-vrp\");\n \n-  /* Ensure that the error message doesn't contain colorization codes,\n-     even if run at a TTY.  */\n+  /* Ensure that the error message doesn't contain colorization codes\n+     or escaped URLs, even if run at a TTY.  */\n   gcc_jit_context_add_command_line_option (ctxt, \"-fdiagnostics-color=never\");\n+  gcc_jit_context_add_command_line_option (ctxt, \"-fdiagnostics-urls=never\");\n \n   gcc_jit_type *char_type =\n     gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CHAR);"}, {"sha": "1c7002f5c37cddf39c16a01b233bf058d2bd3041", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c7ca2ef3915a0b2292499dabcaabefdca04d89/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b4c7ca2ef3915a0b2292499dabcaabefdca04d89", "patch": "@@ -1110,6 +1110,7 @@ general_init (const char *argv0, bool init_signals)\n   global_dc->option_enabled = option_enabled;\n   global_dc->option_state = &global_options;\n   global_dc->option_name = option_name;\n+  global_dc->get_option_url = get_option_url;\n \n   if (init_signals)\n     {"}]}