{"sha": "5a2fa9e8bf068aaacb57627c058b0d5891763857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyZmE5ZThiZjA2OGFhYWNiNTc2MjdjMDU4YjBkNTg5MTc2Mzg1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-04-19T07:48:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-19T07:48:46Z"}, "message": "tree.h (ENUM_IS_SCOPED): Define.\n\n\t* tree.h (ENUM_IS_SCOPED): Define.\n\t* dwarf2out.c (gen_enumeration_type_die): Add DW_AT_enum_class\n\tfor ENUM_IS_SCOPED enums.\ncp/\n\t* cp-tree.h (SCOPED_ENUM_P, UNSCOPED_ENUM_P, SET_SCOPED_ENUM_P): Use\n\tENUM_IS_SCOPED bit instead of TYPE_LANG_FLAG_5.\ntestsuite/\n\t* g++.dg/debug/dwarf2/enum1.C: New test.\n\nFrom-SVN: r158505", "tree": {"sha": "f9163000e53082256164d9a61e169b2713881111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9163000e53082256164d9a61e169b2713881111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2fa9e8bf068aaacb57627c058b0d5891763857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2fa9e8bf068aaacb57627c058b0d5891763857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2fa9e8bf068aaacb57627c058b0d5891763857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2fa9e8bf068aaacb57627c058b0d5891763857/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e46695631394f346c197cc89ad72233ccfca130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e46695631394f346c197cc89ad72233ccfca130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e46695631394f346c197cc89ad72233ccfca130"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "2da24e12ccbae50efa9f6ba6808165e5da338b80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a2fa9e8bf068aaacb57627c058b0d5891763857", "patch": "@@ -1,3 +1,9 @@\n+2010-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (ENUM_IS_SCOPED): Define.\n+\t* dwarf2out.c (gen_enumeration_type_die): Add DW_AT_enum_class\n+\tfor ENUM_IS_SCOPED enums.\n+\n 2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const.c (fold_comparison): Use ssizetype."}, {"sha": "208b745cbcb0941b5583248e1eac7d4971b6336b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a2fa9e8bf068aaacb57627c058b0d5891763857", "patch": "@@ -1,3 +1,8 @@\n+2010-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (SCOPED_ENUM_P, UNSCOPED_ENUM_P, SET_SCOPED_ENUM_P): Use\n+\tENUM_IS_SCOPED bit instead of TYPE_LANG_FLAG_5.\n+\n 2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (cxx_init_decl_processing): Remove second argument in call to"}, {"sha": "22ee2d7eb7b67da3a777d337d5f48ccb6383edcb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5a2fa9e8bf068aaacb57627c058b0d5891763857", "patch": "@@ -121,7 +121,6 @@ framework extensions, you must include this file before toplev.h, not after.\n    3: TYPE_FOR_JAVA.\n    4: TYPE_HAS_NONTRIVIAL_DESTRUCTOR\n    5: CLASS_TYPE_P (in RECORD_TYPE and UNION_TYPE)\n-      SCOPED_ENUM_P (in ENUMERAL_TYPE)\n    6: TYPE_DEPENDENT_P_VALID\n \n    Usage of DECL_LANG_FLAG_?:\n@@ -3036,17 +3035,17 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n \n      - The underlying type of the enum is well-defined.  */\n #define SCOPED_ENUM_P(TYPE)                                             \\\n-  (TREE_CODE (TYPE) == ENUMERAL_TYPE && TYPE_LANG_FLAG_5 (TYPE))\n+  (TREE_CODE (TYPE) == ENUMERAL_TYPE && ENUM_IS_SCOPED (TYPE))\n \n /* Determine whether this is an unscoped enumeration type.  */\n #define UNSCOPED_ENUM_P(TYPE)                                           \\\n-  (TREE_CODE (TYPE) == ENUMERAL_TYPE && !TYPE_LANG_FLAG_5 (TYPE))\n+  (TREE_CODE (TYPE) == ENUMERAL_TYPE && !ENUM_IS_SCOPED (TYPE))\n \n /* Set the flag indicating whether an ENUMERAL_TYPE is a C++0x scoped\n    enumeration type (1) or a normal (unscoped) enumeration type\n    (0).  */\n #define SET_SCOPED_ENUM_P(TYPE, VAL)                    \\\n-  (TYPE_LANG_FLAG_5 (ENUMERAL_TYPE_CHECK (TYPE)) = (VAL))\n+  (ENUM_IS_SCOPED (TYPE) = (VAL))\n \n /* Returns the underlying type of the given enumeration type. The\n    underlying type is determined in different ways, depending on the"}, {"sha": "a4cb347b80c2220e98ed895b66a9920bc7946055", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5a2fa9e8bf068aaacb57627c058b0d5891763857", "patch": "@@ -17385,6 +17385,9 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t\t\t  scope_die_for (type, context_die), type);\n       equate_type_number_to_die (type, type_die);\n       add_name_attribute (type_die, type_tag (type));\n+      if ((dwarf_version >= 4 || !dwarf_strict)\n+\t  && ENUM_IS_SCOPED (type))\n+\tadd_AT_flag (type_die, DW_AT_enum_class, 1);\n     }\n   else if (! TYPE_SIZE (type))\n     return type_die;"}, {"sha": "8ffc442caeb58b7e09c42c932c3fa7ef7268c383", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a2fa9e8bf068aaacb57627c058b0d5891763857", "patch": "@@ -1,3 +1,7 @@\n+2010-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/enum1.C: New test.\n+\n 2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/rep_clause5.ad[sb]: New test."}, {"sha": "b5518ef18a0975aed3c0595c1c1e7253e4981795", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/enum1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fenum1.C?ref=5a2fa9e8bf068aaacb57627c058b0d5891763857", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-g -dA -gno-strict-dwarf -std=c++0x\" }\n+// { dg-final { scan-assembler-times \"DIE\\[^\\n\\r\\]*DW_TAG_enumeration_type\" 3 } }\n+// { dg-final { scan-assembler-times \" DW_AT_enum_class\" 2 } }\n+\n+enum A { a1, a2 } a;\n+enum struct B { b1, b2 } b;\n+enum class C { c1, c2 } c;\n+\n+void\n+foo ()\n+{\n+  a = a1;\n+  a = A::a2;\n+  b = B::b1;\n+  b = B::b2;\n+  c = C::c1;\n+  c = C::c2;\n+}"}, {"sha": "7d8725639a029566d129c3c65a0600dcd8dd9377", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2fa9e8bf068aaacb57627c058b0d5891763857/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5a2fa9e8bf068aaacb57627c058b0d5891763857", "patch": "@@ -457,6 +457,9 @@ struct GTY(()) tree_common {\n \n        CALL_CANNOT_INLINE_P in\n            CALL_EXPR\n+ \n+       ENUM_IS_SCOPED in\n+\t   ENUMERAL_TYPE\n \n    public_flag:\n \n@@ -1162,6 +1165,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* Used to mark a CALL_EXPR as not suitable for inlining.  */\n #define CALL_CANNOT_INLINE_P(NODE) (CALL_EXPR_CHECK (NODE)->base.static_flag)\n \n+/* Used to mark scoped enums.  */\n+#define ENUM_IS_SCOPED(NODE) (ENUMERAL_TYPE_CHECK (NODE)->base.static_flag)\n+\n /* In an expr node (usually a conversion) this means the node was made\n    implicitly and should not lead to any sort of warning.  In a decl node,\n    warnings concerning the decl should be suppressed.  This is used at"}]}