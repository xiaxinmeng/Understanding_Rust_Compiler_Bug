{"sha": "d919140b83feaa44cf32f4e3e9c31ac78278ac27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxOTE0MGI4M2ZlYWE0NGNmMzJmNGUzZTljMzFhYzc4Mjc4YWMyNw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-10-16T15:38:58Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-10-16T15:38:58Z"}, "message": "re PR c/53063 (encode group options in the .opt files)\n\n2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\tPR c/40989\n\t* doc/options.texi (EnabledBy): Document new form.\n\t* optc-gen.awk: Handle new form of EnabledBy.\n\t* common.opt (Wunused-but-set-parameter): Use EnabledBy.\n\t(Wunused-parameter): Likewise.\n\t* opts.c (finish_options): Do not handle them explicitly.\n\t* opt-functions.awk (search_var_name): New.\n\nFrom-SVN: r192503", "tree": {"sha": "a6523b7f9bf2d5a90aa29d3a35230edb359537cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6523b7f9bf2d5a90aa29d3a35230edb359537cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d919140b83feaa44cf32f4e3e9c31ac78278ac27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d919140b83feaa44cf32f4e3e9c31ac78278ac27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d919140b83feaa44cf32f4e3e9c31ac78278ac27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d919140b83feaa44cf32f4e3e9c31ac78278ac27/comments", "author": null, "committer": null, "parents": [{"sha": "65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d4f2cd2a488125a6522eeb6c9df5f890c7086f"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "7542474a53e2e9d67767b006641c85781790040f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d919140b83feaa44cf32f4e3e9c31ac78278ac27", "patch": "@@ -1,3 +1,14 @@\n+2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\tPR c/40989\n+\t* doc/options.texi (EnabledBy): Document new form.\n+\t* optc-gen.awk: Handle new form of EnabledBy.\n+\t* common.opt (Wunused-but-set-parameter): Use EnabledBy.\n+\t(Wunused-parameter): Likewise.\n+\t* opts.c (finish_options): Do not handle them explicitly.\n+\t* opt-functions.awk (search_var_name): New.\n+\n 2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/53063"}, {"sha": "e21fb71bbd4dae511630a749552d54c9d7456bb9", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d919140b83feaa44cf32f4e3e9c31ac78278ac27", "patch": "@@ -673,7 +673,7 @@ Common Var(warn_unused) Init(0) Warning\n Enable all -Wunused- warnings\n \n Wunused-but-set-parameter\n-Common Var(warn_unused_but_set_parameter) Init(-1) Warning\n+Common Var(warn_unused_but_set_parameter) Warning EnabledBy(Wunused && Wextra)\n Warn when a function parameter is only set, otherwise unused\n \n Wunused-but-set-variable\n@@ -689,7 +689,7 @@ Common Var(warn_unused_label) Warning EnabledBy(Wunused)\n Warn when a label is unused\n \n Wunused-parameter\n-Common Var(warn_unused_parameter) Init(-1) Warning\n+Common Var(warn_unused_parameter) Warning EnabledBy(Wunused && Wextra)\n Warn when a function parameter is unused\n \n Wunused-value"}, {"sha": "0a8e1cd49b57349ab860e5c9af6988962c1c1cc5", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=d919140b83feaa44cf32f4e3e9c31ac78278ac27", "patch": "@@ -460,7 +460,10 @@ value of @option{-fmath-errno} for languages that do not use\n @code{errno}.\n \n @item EnabledBy(@var{opt})\n-If not explicitly set, the option is set to the value of @option{-@var{opt}}.\n+@itemx EnabledBy(@var{opt} && @var{opt2})\n+If not explicitly set, the option is set to the value of\n+@option{-@var{opt}}.  The second form specifies that the option is\n+only set if both @var{opt} and @var{opt2} are set.\n \n @item LangEnabledBy(@var{language}, @var{opt})\n @itemx LangEnabledBy(@var{language}, @var{opt}, @var{posarg}, @var{negarg})"}, {"sha": "13de5e48ed173068459c8be2107cc028b4285fdf", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=d919140b83feaa44cf32f4e3e9c31ac78278ac27", "patch": "@@ -297,3 +297,19 @@ function lang_sanitized_name(name)\n     gsub( \"[^\" alnum \"_]\", \"X\", name )\n     return name\n }\n+\n+# Search for a valid var_name among all OPTS equal to option NAME.\n+# If not found, return \"\".\n+function search_var_name(name, opt_numbers, opts, flags, n_opts)\n+{\n+    opt_var_name = var_name(flags[opt_numbers[name]]);\n+    if (opt_var_name != \"\") {\n+        return opt_var_name;\n+    }\n+    for (k = 0; k < n_opts; k++) {\n+        if (opts[k] == name && var_name(flags[k]) != \"\") {\n+            return var_name(flags[k]);\n+        }\n+    }\n+    return \"\"\n+}"}, {"sha": "87575c22af1251b7d0df3161b7b1cbe3084d808d", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=d919140b83feaa44cf32f4e3e9c31ac78278ac27", "patch": "@@ -39,16 +39,35 @@ for (i = 0; i < n_langs; i++) {\n for (i = 0; i < n_opts; i++) {\n     enabledby_arg = opt_args(\"EnabledBy\", flags[i]);\n     if (enabledby_arg != \"\") {\n-        enabledby_name = enabledby_arg;\n-        enabledby_index = opt_numbers[enabledby_name];\n-        if (enabledby_index == \"\") {\n-            print \"#error Enabledby: \" enabledby_name \n-        } else {\n-            if (enables[enabledby_name] == \"\") {\n-                enabledby[n_enabledby] = enabledby_name;\n-                n_enabledby++;\n+        n_enabledby_names = split(enabledby_arg, enabledby_names, \" && \");\n+        if (n_enabledby_names > 2) {\n+            print \"#error EnabledBy (Wfoo && Wbar && Wbaz) not currently supported\"\n+        }\n+        for (j = 1; j <= n_enabledby_names; j++) {\n+            enabledby_name = enabledby_names[j];\n+            enabledby_index = opt_numbers[enabledby_name];\n+            if (enabledby_index == \"\") {\n+                print \"#error Enabledby: \" enabledby_name \n+            } else {\n+                condition = \"\";\n+                if (n_enabledby_names == 2) {\n+                    opt_var_name_1 = search_var_name(enabledby_names[1], opt_numbers, opts, flags, n_opts);\n+                    opt_var_name_2 = search_var_name(enabledby_names[2], opt_numbers, opts, flags, n_opts);\n+                    if (opt_var_name_1 == \"\") {\n+                        print \"#error \" enabledby_names[1] \" does not have a Var() flag\"\n+                    }\n+                    if (opt_var_name_2 == \"\") {\n+                        print \"#error \" enabledby_names[2] \" does not have a Var() flag\"\n+                    }\n+                    condition = \"opts->x_\" opt_var_name_1 \" && opts->x_\" opt_var_name_2;\n+                }\n+                if (enables[enabledby_name] == \"\") {\n+                    enabledby[n_enabledby] = enabledby_name;\n+                    n_enabledby++;\n+                }\n+                enables[enabledby_name] = enables[enabledby_name] opts[i] \";\";\n+                enablesif[enabledby_name] = enablesif[enabledby_name] condition \";\";\n             }\n-            enables[enabledby_name] = enables[enabledby_name] opts[i] \";\";\n         }\n     }\n \n@@ -395,14 +414,23 @@ print \"  gcc_assert (decoded->canonical_option_num_elements <= 2);           \"\n print \"                                                                      \"\n print \"  switch (code)                                                       \"\n print \"    {                                                                 \"\n+# Handle EnabledBy\n for (i = 0; i < n_enabledby; i++) {\n     enabledby_name = enabledby[i];\n     print \"    case \" opt_enum(enabledby_name) \":\"\n     n_enables = split(enables[enabledby_name], thisenable, \";\");\n+    n_enablesif = split(enablesif[enabledby_name], thisenableif, \";\");\n+    if (n_enables != n_enablesif) {\n+        print \"#error n_enables != n_enablesif: Something went wrong!\"\n+    }\n     for (j = 1; j < n_enables; j++) {\n         opt_var_name = var_name(flags[opt_numbers[thisenable[j]]]);\n         if (opt_var_name != \"\") {\n-            print \"      if (!opts_set->x_\" opt_var_name \")\"\n+            condition = \"!opts_set->x_\" opt_var_name\n+            if (thisenableif[j] != \"\") {\n+                condition = condition \" && (\" thisenableif[j] \")\"\n+            }\n+            print \"      if (\" condition \")\"\n             print \"        handle_generated_option (opts, opts_set,\"\n             print \"                                 \" opt_enum(thisenable[j]) \", NULL, value,\"\n             print \"                                 lang_mask, kind, loc, handlers, dc);\""}, {"sha": "98bbd302c8e0a987f9b7fbce665e721df0465c4a", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d919140b83feaa44cf32f4e3e9c31ac78278ac27/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d919140b83feaa44cf32f4e3e9c31ac78278ac27", "patch": "@@ -830,15 +830,6 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n                            opts->x_param_values, opts_set->x_param_values);\n \n   /* This replaces set_Wunused.  */\n-  /* Wunused-parameter is enabled if both -Wunused -Wextra are enabled.  */\n-  if (opts->x_warn_unused_parameter == -1)\n-    opts->x_warn_unused_parameter = (opts->x_warn_unused\n-\t\t\t\t     && opts->x_extra_warnings);\n-  /* Wunused-but-set-parameter is enabled if both -Wunused -Wextra are\n-     enabled.  */\n-  if (opts->x_warn_unused_but_set_parameter == -1)\n-    opts->x_warn_unused_but_set_parameter = (opts->x_warn_unused\n-\t\t\t\t\t     && opts->x_extra_warnings);\n   /* Wunused-local-typedefs is enabled by -Wunused or -Wall.  */\n   if (opts->x_warn_unused_local_typedefs == -1)\n     opts->x_warn_unused_local_typedefs = opts->x_warn_unused;"}]}