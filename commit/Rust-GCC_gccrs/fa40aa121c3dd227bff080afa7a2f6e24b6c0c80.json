{"sha": "fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0MGFhMTIxYzNkZDIyN2JmZjA4MGFmYTdhMmY2ZTI0YjZjMGM4MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-08-18T09:15:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-08-18T09:15:51Z"}, "message": "cp-tree.h (enum_name_string): Remove prototype.\n\n\t* cp-tree.h (enum_name_string): Remove prototype.\n\t(report_case_error): Remove prototype.\n\t* cp/typeck2.c (enum_name_string): Remove.\n\t(report_case_error): Remove.\n\t* error.c (dump_expr): Deal with enum values directly.\n\tCorrectly negate integer constant.\n\nFrom-SVN: r35774", "tree": {"sha": "8293de0001f05fdd2848c247d2b0e7d05fb336b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8293de0001f05fdd2848c247d2b0e7d05fb336b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/comments", "author": null, "committer": null, "parents": [{"sha": "ca3a748a9fe15a3f476299158f97c7ab8a2fa9d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3a748a9fe15a3f476299158f97c7ab8a2fa9d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3a748a9fe15a3f476299158f97c7ab8a2fa9d6"}], "stats": {"total": 207, "additions": 51, "deletions": 156}, "files": [{"sha": "0a2fb19c356fe49462d503d269f05d2b93b7f132", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "patch": "@@ -1,3 +1,12 @@\n+2000-08-18  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (enum_name_string): Remove prototype.\n+\t(report_case_error): Remove prototype.\n+\t* cp/typeck2.c (enum_name_string): Remove.\n+\t(report_case_error): Remove.\n+\t* error.c (dump_expr): Deal with enum values directly.\n+\tCorrectly negate integer constant.\n+\n 2000-08-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* inc/cxxabi.h (__cxa_vec_new2, __cxa_vec_new3): Declare."}, {"sha": "5dba2e394724a56b944b3b873355629ec06cfac9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "patch": "@@ -4643,8 +4643,6 @@ extern tree build_scoped_ref\t\t\tPARAMS ((tree, tree));\n extern tree build_x_arrow\t\t\tPARAMS ((tree));\n extern tree build_m_component_ref\t\tPARAMS ((tree, tree));\n extern tree build_functional_cast\t\tPARAMS ((tree, tree));\n-extern char *enum_name_string\t\t\tPARAMS ((tree, tree));\n-extern void report_case_error\t\t\tPARAMS ((int, tree, tree, tree));\n extern void check_for_new_type\t\t\tPARAMS ((const char *, flagged_type_tree));\n extern tree add_exception_specifier             PARAMS ((tree, tree, int));\n "}, {"sha": "b8063b34d11813d60adb763cd438bbe0b608115e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "patch": "@@ -1469,8 +1469,23 @@ dump_expr (t, flags)\n \t/* If it's an enum, output its tag, rather than its value.  */\n \tif (TREE_CODE (type) == ENUMERAL_TYPE)\n \t  {\n-\t    const char *p = enum_name_string (t, type);\n-\t    OB_PUTCP (p);\n+\t    tree values = TYPE_VALUES (type);\n+\t    \n+\t    for (; values;\n+\t         values = TREE_CHAIN (values))\n+\t      if (tree_int_cst_equal (TREE_VALUE (values), t))\n+\t        break;\n+\t    \n+\t    if (values)\n+\t      OB_PUTID (TREE_PURPOSE (values));\n+\t    else\n+\t      {\n+                /* Value must have been cast.  */\n+                OB_PUTC ('(');\n+                dump_type (type, flags);\n+                OB_PUTC (')');\n+                goto do_int;\n+\t      }\n \t  }\n \telse if (type == boolean_type_node)\n \t  {\n@@ -1485,30 +1500,35 @@ dump_expr (t, flags)\n \t    dump_char (tree_low_cst (t, 0));\n \t    OB_PUTC ('\\'');\n \t  }\n-\telse if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (t)\n-\t\t != (TREE_INT_CST_LOW (t) >> (HOST_BITS_PER_WIDE_INT - 1)))\n+\telse\n \t  {\n-\t    tree val = t;\n-\n-\t    if (tree_int_cst_sgn (val) < 0)\n+\t    do_int:\n+\t    if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (t)\n+\t\t!= (TREE_INT_CST_LOW (t) >> (HOST_BITS_PER_WIDE_INT - 1)))\n \t      {\n-\t\tOB_PUTC ('-');\n-\t\tval = build_int_2 (~TREE_INT_CST_LOW (val),\n-\t\t\t\t   -TREE_INT_CST_HIGH (val));\n+\t        tree val = t;\n+\n+\t        if (tree_int_cst_sgn (val) < 0)\n+\t          {\n+\t\t    OB_PUTC ('-');\n+\t\t    val = build_int_2 (-TREE_INT_CST_LOW (val),\n+\t\t\t\t       ~TREE_INT_CST_HIGH (val)\n+\t                               + !TREE_INT_CST_LOW (val));\n+\t          }\n+\t        /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n+\t           systems?  */\n+\t        {\n+\t          static char format[10]; /* \"%x%09999x\\0\" */\n+\t          if (!format[0])\n+\t\t    sprintf (format, \"%%x%%0%dx\", HOST_BITS_PER_INT / 4);\n+\t          sprintf (digit_buffer, format, TREE_INT_CST_HIGH (val),\n+\t\t           TREE_INT_CST_LOW (val));\n+\t          OB_PUTCP (digit_buffer);\n+\t        }\n \t      }\n-\t    /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n-\t       systems?  */\n-\t    {\n-\t      static char format[10]; /* \"%x%09999x\\0\" */\n-\t      if (!format[0])\n-\t\tsprintf (format, \"%%x%%0%dx\", HOST_BITS_PER_INT / 4);\n-\t      sprintf (digit_buffer, format, TREE_INT_CST_HIGH (val),\n-\t\t       TREE_INT_CST_LOW (val));\n-\t      OB_PUTCP (digit_buffer);\n-\t    }\n+\t    else\n+\t      OB_PUTI (TREE_INT_CST_LOW (t));\n \t  }\n-\telse\n-\t  OB_PUTI (TREE_INT_CST_LOW (t));\n       }\n       break;\n "}, {"sha": "fecd227f174f86d389b9550b5d5c88ad1b378e27", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40aa121c3dd227bff080afa7a2f6e24b6c0c80/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=fa40aa121c3dd227bff080afa7a2f6e24b6c0c80", "patch": "@@ -1209,138 +1209,6 @@ build_functional_cast (exp, parms)\n   return build_cplus_new (type, exp);\n }\n \f\n-/* Return the character string for the name that encodes the\n-   enumeral value VALUE in the domain TYPE.  */\n-\n-char *\n-enum_name_string (value, type)\n-     tree value;\n-     tree type;\n-{\n-  register tree values = TYPE_VALUES (type);\n-\n-  my_friendly_assert (TREE_CODE (type) == ENUMERAL_TYPE, 324);\n-\n-  while (values && ! tree_int_cst_equal (TREE_VALUE (values), value))\n-    values = TREE_CHAIN (values);\n-\n-  if (values == NULL_TREE)\n-    {\n-      char *buf = (char *) oballoc (16 + TYPE_NAME_LENGTH (type));\n-\n-      /* Value must have been cast.  */\n-      sprintf (buf, \"(enum %s)%ld\",\n-\t       TYPE_NAME_STRING (type), (long) TREE_INT_CST_LOW (value));\n-      return buf;\n-    }\n-  return IDENTIFIER_POINTER (TREE_PURPOSE (values));\n-}\n-\n-#if 0\n-/* Print out a language-specific error message for\n-   (Pascal) case or (C) switch statements.\n-   CODE tells what sort of message to print. \n-   TYPE is the type of the switch index expression.\n-   NEW is the new value that we were trying to add.\n-   OLD is the old value that stopped us from adding it.  */\n-\n-void\n-report_case_error (code, type, new_value, old_value)\n-     int code;\n-     tree type;\n-     tree new_value, old_value;\n-{\n-  if (code == 1)\n-    {\n-      if (new_value)\n-\terror (\"case label not within a switch statement\");\n-      else\n-\terror (\"default label not within a switch statement\");\n-    }\n-  else if (code == 2)\n-    {\n-      if (new_value == 0)\n-\t{\n-\t  error (\"multiple default labels in one switch\");\n-\t  return;\n-\t}\n-      if (TREE_CODE (new_value) == RANGE_EXPR)\n-\tif (TREE_CODE (old_value) == RANGE_EXPR)\n-\t  {\n-\t    char *buf = (char *)alloca (4 * (8 + TYPE_NAME_LENGTH (type)));\n-\t    if (TREE_CODE (type) == ENUMERAL_TYPE)\n-\t      sprintf (buf, \"overlapping ranges [%s..%s], [%s..%s] in case expression\",\n-\t\t       enum_name_string (TREE_OPERAND (new_value, 0), type),\n-\t\t       enum_name_string (TREE_OPERAND (new_value, 1), type),\n-\t\t       enum_name_string (TREE_OPERAND (old_value, 0), type),\n-\t\t       enum_name_string (TREE_OPERAND (old_value, 1), type));\n-\t    else\n-\t      sprintf (buf, \"overlapping ranges [%d..%d], [%d..%d] in case expression\",\n-\t\t       TREE_INT_CST_LOW (TREE_OPERAND (new_value, 0)),\n-\t\t       TREE_INT_CST_LOW (TREE_OPERAND (new_value, 1)),\n-\t\t       TREE_INT_CST_LOW (TREE_OPERAND (old_value, 0)),\n-\t\t       TREE_INT_CST_LOW (TREE_OPERAND (old_value, 1)));\n-\t    error (buf);\n-\t  }\n-\telse\n-\t  {\n-\t    char *buf = (char *)alloca (4 * (8 + TYPE_NAME_LENGTH (type)));\n-\t    if (TREE_CODE (type) == ENUMERAL_TYPE)\n-\t      sprintf (buf, \"range [%s..%s] includes element `%s' in case expression\",\n-\t\t       enum_name_string (TREE_OPERAND (new_value, 0), type),\n-\t\t       enum_name_string (TREE_OPERAND (new_value, 1), type),\n-\t\t       enum_name_string (old_value, type));\n-\t    else\n-\t      sprintf (buf, \"range [%d..%d] includes (%d) in case expression\",\n-\t\t       TREE_INT_CST_LOW (TREE_OPERAND (new_value, 0)),\n-\t\t       TREE_INT_CST_LOW (TREE_OPERAND (new_value, 1)),\n-\t\t       TREE_INT_CST_LOW (old_value));\n-\t    error (buf);\n-\t  }\n-      else if (TREE_CODE (old_value) == RANGE_EXPR)\n-\t{\n-\t  char *buf = (char *)alloca (4 * (8 + TYPE_NAME_LENGTH (type)));\n-\t  if (TREE_CODE (type) == ENUMERAL_TYPE)\n-\t    sprintf (buf, \"range [%s..%s] includes element `%s' in case expression\",\n-\t\t     enum_name_string (TREE_OPERAND (old_value, 0), type),\n-\t\t     enum_name_string (TREE_OPERAND (old_value, 1), type),\n-\t\t     enum_name_string (new_value, type));\n-\t  else\n-\t    sprintf (buf, \"range [%d..%d] includes (%d) in case expression\",\n-\t\t     TREE_INT_CST_LOW (TREE_OPERAND (old_value, 0)),\n-\t\t     TREE_INT_CST_LOW (TREE_OPERAND (old_value, 1)),\n-\t\t     TREE_INT_CST_LOW (new_value));\n-\t  error (buf);\n-\t}\n-      else\n-\t{\n-\t  if (TREE_CODE (type) == ENUMERAL_TYPE)\n-\t    error (\"duplicate label `%s' in switch statement\",\n-\t\t   enum_name_string (new_value, type));\n-\t  else\n-\t    error (\"duplicate label (%d) in switch statement\",\n-\t\t   TREE_INT_CST_LOW (new_value));\n-\t}\n-    }\n-  else if (code == 3)\n-    {\n-      if (TREE_CODE (type) == ENUMERAL_TYPE)\n-\twarning (\"case value out of range for enum %s\",\n-\t\t TYPE_NAME_STRING (type));\n-      else\n-\twarning (\"case value out of range\");\n-    }\n-  else if (code == 4)\n-    {\n-      if (TREE_CODE (type) == ENUMERAL_TYPE)\n-\terror (\"range values `%s' and `%s' reversed\",\n-\t       enum_name_string (new_value, type),\n-\t       enum_name_string (old_value, type));\n-      else\n-\terror (\"range values reversed\");\n-    }\n-}\n-#endif\n \n /* Complain about defining new types in inappropriate places.  We give an\n    exception for C-style casts, to accommodate GNU C stylings.  */"}]}