{"sha": "a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE3OTllNWVmN2E0YWFhZTMwMTVhOGVmOGE1ZTQ5ZDkxYTFjMzc3NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-03-27T09:57:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-03-27T09:57:36Z"}, "message": "decl.c (components_to_record): Add special case for single field with representation clause at offset 0.\n\n\t* gcc-interface/decl.c (components_to_record): Add special case for     \n\tsingle field with representation clause at offset 0.\n\nFrom-SVN: r234494", "tree": {"sha": "3433f260719b88f30ce9afb1f69894d9264701d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3433f260719b88f30ce9afb1f69894d9264701d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/comments", "author": null, "committer": null, "parents": [{"sha": "5f7f4dffdc27d4252b49605f162ddd1c7f6f69e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7f4dffdc27d4252b49605f162ddd1c7f6f69e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7f4dffdc27d4252b49605f162ddd1c7f6f69e4"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "9faedf15b7a79a5d8ca72bf92ebcad909ba65f47", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "patch": "@@ -1,3 +1,8 @@\n+2016-03-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (components_to_record): Add special case for     \n+\tsingle field with representation clause at offset 0.\n+\n 2016-03-16  Svante Signell  <svante.signell@gmail.com>\n \n \t* gcc-interface/Makefile.in: Add support for x86 GNU/Hurd."}, {"sha": "ad8452810d49a04d8f1e5ef199b714829cd31fc5", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "patch": "@@ -7606,6 +7606,23 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n   if (p_gnu_rep_list && gnu_rep_list)\n     *p_gnu_rep_list = chainon (*p_gnu_rep_list, gnu_rep_list);\n \n+  /* If only one field has a rep clause and it starts at 0, put back the field\n+     at the head of the regular field list.  This will avoid creating a useless\n+     REP part below and deal with the annoying case of an extension of a record\n+     with variable size and rep clause, for which the _Parent field is forced\n+     at offset 0 and has variable size, which we do not support below.  */\n+  else if (gnu_rep_list\n+\t   && !DECL_CHAIN (gnu_rep_list)\n+\t   && !variants_have_rep\n+\t   && first_free_pos\n+\t   && integer_zerop (first_free_pos)\n+\t   && integer_zerop (bit_position (gnu_rep_list)))\n+    {\n+      DECL_CHAIN (gnu_rep_list) = gnu_field_list;\n+      gnu_field_list = gnu_rep_list;\n+      gnu_rep_list = NULL_TREE;\n+    }\n+\n   /* Otherwise, sort the fields by bit position and put them into their own\n      record, before the others, if we also have fields without rep clause.  */\n   else if (gnu_rep_list)"}, {"sha": "44f023f24274834c446dcfb3a79d0e3f77107fc1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "patch": "@@ -1,3 +1,7 @@\n+2016-03-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/double_record_extension3.ads: New test.\n+\n 2016-03-25  Richard Henderson  <rth@redhat.com>\n \n \tPR target/70120"}, {"sha": "de53655bace641a25a00bce6c1e950a9f22c473f", "filename": "gcc/testsuite/gnat.dg/specs/double_record_extension3.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension3.ads?ref=a1799e5ef7a4aaae3015a8ef8a5e49d91a1c3775", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\n+\n+package Double_Record_Extension3 is\n+\n+   type Rec1 is tagged record\n+      Id : Integer;\n+   end record;\n+\n+   for Rec1 use record\n+      Id at 8 range 0 .. 31;\n+   end record;\n+\n+   type Rec2 (Size : Integer) is new Rec1 with record\n+      Data : String (1 .. Size);\n+   end record;\n+\n+   type Rec3 is new Rec2 (Size => 128) with record\n+      Valid : Boolean;\n+   end record;\n+\n+end Double_Record_Extension3;\n+"}]}