{"sha": "d96a2fcdf0ae6ce1a758179a6ec72ec51877420c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2YTJmY2RmMGFlNmNlMWE3NTgxNzlhNmVjNzJlYzUxODc3NDIwYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-27T20:01:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-27T20:01:10Z"}, "message": "genoutput.c: Don't include errors.h.\n\n        * genoutput.c: Don't include errors.h.\n        (struct data): Add lineno member.\n        (have_error): New.\n        (scan_operands): Use message_with_line instead of error.\n        (validate_insn_alternatives): Likewise.\n        (gen_insn): Accept and store the pattern's line number.\n        (gen_peephole, gen_expand, gen_split): Likewise.\n        (main): Don't set progname.  Pass line_no to gen_foo.\n\nFrom-SVN: r34205", "tree": {"sha": "4e384c7b8f7c4484fbc403dae5fc1350a4c9579b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e384c7b8f7c4484fbc403dae5fc1350a4c9579b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c/comments", "author": null, "committer": null, "parents": [{"sha": "5401747e62f5372fad25e66753f6facceded39b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5401747e62f5372fad25e66753f6facceded39b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5401747e62f5372fad25e66753f6facceded39b9"}], "stats": {"total": 98, "additions": 68, "deletions": 30}, "files": [{"sha": "99e865bcd1a6f005dd079a1301d9a07fc0cfb641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d96a2fcdf0ae6ce1a758179a6ec72ec51877420c", "patch": "@@ -1,3 +1,14 @@\n+2000-05-27  Richard Henderson  <rth@cygnus.com>\n+\n+\t* genoutput.c: Don't include errors.h.\n+\t(struct data): Add lineno member.\n+\t(have_error): New.\n+\t(scan_operands): Use message_with_line instead of error.\n+\t(validate_insn_alternatives): Likewise.\n+\t(gen_insn): Accept and store the pattern's line number.\n+\t(gen_peephole, gen_expand, gen_split): Likewise.\n+\t(main): Don't set progname.  Pass line_no to gen_foo.\n+\n 2000-05-27  Richard Henderson  <rth@cygnus.com>\n \n \t* config/d30v/d30v.c (d30v_print_operand): Handle ':'."}, {"sha": "e9a257fdcd3d607f11b8f30c4465f3879d76a3be", "filename": "gcc/genoutput.c", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96a2fcdf0ae6ce1a758179a6ec72ec51877420c/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=d96a2fcdf0ae6ce1a758179a6ec72ec51877420c", "patch": "@@ -88,7 +88,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"hconfig.h\"\n #include \"system.h\"\n #include \"rtl.h\"\n-#include \"errors.h\"\n #include \"gensupport.h\"\n \n /* No instruction can have more operands than this.  Sorry for this\n@@ -158,6 +157,7 @@ struct data\n   const char *template;\n   int code_number;\n   int index_number;\n+  int lineno;\n   int n_operands;\t\t/* Number of operands this insn recognizes */\n   int n_dups;\t\t\t/* Number times match_dup appears in pattern */\n   int n_alternatives;\t\t/* Number of alternatives in each constraint */\n@@ -169,6 +169,8 @@ struct data\n /* This variable points to the first link in the insn chain.  */\n \n static struct data *idata, **idata_end = &idata;\n+\n+static int have_error;\n \f\n static void output_prologue PARAMS ((void));\n static void output_predicate_decls PARAMS ((void));\n@@ -181,10 +183,10 @@ static int compare_operands PARAMS ((struct operand_data *,\n static void place_operands PARAMS ((struct data *));\n static void process_template PARAMS ((struct data *, const char *));\n static void validate_insn_alternatives PARAMS ((struct data *));\n-static void gen_insn PARAMS ((rtx));\n-static void gen_peephole PARAMS ((rtx));\n-static void gen_expand PARAMS ((rtx));\n-static void gen_split PARAMS ((rtx));\n+static void gen_insn PARAMS ((rtx, int));\n+static void gen_peephole PARAMS ((rtx, int));\n+static void gen_expand PARAMS ((rtx, int));\n+static void gen_split PARAMS ((rtx, int));\n \f\n const char *\n get_insn_name (index)\n@@ -213,7 +215,7 @@ static void\n output_prologue ()\n {\n   printf (\"/* Generated automatically by the program `genoutput'\\n\\\n-from the machine description file `md'.  */\\n\\n\");\n+   from the machine description file `md'.  */\\n\\n\");\n \n   printf (\"#include \\\"config.h\\\"\\n\");\n   printf (\"#include \\\"system.h\\\"\\n\");\n@@ -421,13 +423,18 @@ scan_operands (d, part, this_address_p, this_strict_low)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n \t{\n-\t  error (\"Too many operands (%d) in definition %s.\\n\",\n-\t\t max_opno + 1, get_insn_name (next_index_number));\n+\t  message_with_line (d->lineno,\n+\t\t\t     \"maximum number of operands exceeded\");\n+\t  have_error = 1;\n \t  return;\n \t}\n       if (d->operand[opno].seen)\n-\terror (\"Definition %s specified operand number %d more than once.\\n\",\n-\t       get_insn_name (next_index_number), opno);\n+\t{\n+\t  message_with_line (d->lineno,\n+\t\t\t     \"repeated operand number %d\\n\", opno);\n+\t  have_error = 1;\n+\t}\n+\n       d->operand[opno].seen = 1;\n       d->operand[opno].mode = GET_MODE (part);\n       d->operand[opno].strict_low = this_strict_low;\n@@ -445,13 +452,18 @@ scan_operands (d, part, this_address_p, this_strict_low)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n \t{\n-\t  error (\"Too many operands (%d) in definition %s.\\n\",\n-\t\t max_opno + 1, get_insn_name (next_index_number));\n+\t  message_with_line (d->lineno,\n+\t\t\t     \"maximum number of operands exceeded\");\n+\t  have_error = 1;\n \t  return;\n \t}\n       if (d->operand[opno].seen)\n-\terror (\"Definition %s specified operand number %d more than once.\\n\",\n-\t       get_insn_name (next_index_number), opno);\n+\t{\n+\t  message_with_line (d->lineno,\n+\t\t\t     \"repeated operand number %d\\n\", opno);\n+\t  have_error = 1;\n+\t}\n+\n       d->operand[opno].seen = 1;\n       d->operand[opno].mode = GET_MODE (part);\n       d->operand[opno].strict_low = 0;\n@@ -470,13 +482,18 @@ scan_operands (d, part, this_address_p, this_strict_low)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n \t{\n-\t  error (\"Too many operands (%d) in definition %s.\\n\",\n-\t\t max_opno + 1, get_insn_name (next_index_number));\n+\t  message_with_line (d->lineno,\n+\t\t\t     \"maximum number of operands exceeded\");\n+\t  have_error = 1;\n \t  return;\n \t}\n       if (d->operand[opno].seen)\n-\terror (\"Definition %s specified operand number %d more than once.\\n\",\n-\t       get_insn_name (next_index_number), opno);\n+\t{\n+\t  message_with_line (d->lineno,\n+\t\t\t     \"repeated operand number %d\\n\", opno);\n+\t  have_error = 1;\n+\t}\n+\n       d->operand[opno].seen = 1;\n       d->operand[opno].mode = GET_MODE (part);\n       d->operand[opno].strict_low = 0;\n@@ -695,8 +712,12 @@ validate_insn_alternatives (d)\n \tif (n == 0)\n \t  n = d->operand[start].n_alternatives;\n \telse if (n != d->operand[start].n_alternatives)\n-\t  error (\"wrong number of alternatives in operand %d of insn %s\",\n-\t\t start, get_insn_name (d->index_number));\n+\t  {\n+\t    message_with_line (d->lineno,\n+\t\t\t       \"wrong number of alternatives in operand %d\",\n+\t\t\t       start);\n+\t    have_error = 1;\n+\t  }\n       }\n \n   /* Record the insn's overall number of alternatives.  */\n@@ -708,14 +729,16 @@ validate_insn_alternatives (d)\n    a hairy output action, output a function for now.  */\n \n static void\n-gen_insn (insn)\n+gen_insn (insn, lineno)\n      rtx insn;\n+     int lineno;\n {\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->lineno = lineno;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n   else\n@@ -747,14 +770,16 @@ gen_insn (insn)\n    If the insn has a hairy output action, output it now.  */\n \n static void\n-gen_peephole (peep)\n+gen_peephole (peep, lineno)\n      rtx peep;\n+     int lineno;\n {\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->lineno = lineno;\n   d->name = 0;\n \n   /* Build up the list in the same order as the insns are seen\n@@ -785,14 +810,16 @@ gen_peephole (peep)\n    only for the purposes of `insn_gen_function'.  */\n \n static void\n-gen_expand (insn)\n+gen_expand (insn, lineno)\n      rtx insn;\n+     int lineno;\n {\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->lineno = lineno;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n   else\n@@ -828,14 +855,16 @@ gen_expand (insn)\n    only for reasons of consistency and to simplify genrecog.  */\n \n static void\n-gen_split (split)\n+gen_split (split, lineno)\n      rtx split;\n+     int lineno;\n {\n   register struct data *d = (struct data *) xmalloc (sizeof (struct data));\n   register int i;\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n+  d->lineno = lineno;\n   d->name = 0;\n \n   /* Build up the list in the same order as the insns are seen\n@@ -872,8 +901,6 @@ main (argc, argv)\n {\n   rtx desc;\n \n-  progname = \"genoutput\";\n-\n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n@@ -895,14 +922,14 @@ main (argc, argv)\n \tbreak;\n \n       if (GET_CODE (desc) == DEFINE_INSN)\n-\tgen_insn (desc);\n+\tgen_insn (desc, line_no);\n       if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n-\tgen_peephole (desc);\n+\tgen_peephole (desc, line_no);\n       if (GET_CODE (desc) == DEFINE_EXPAND)\n-\tgen_expand (desc);\n+\tgen_expand (desc, line_no);\n       if (GET_CODE (desc) == DEFINE_SPLIT\n  \t  || GET_CODE (desc) == DEFINE_PEEPHOLE2)\n-\tgen_split (desc);\n+\tgen_split (desc, line_no);\n       next_index_number++;\n     }\n "}]}