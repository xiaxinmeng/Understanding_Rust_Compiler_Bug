{"sha": "5524676df831f5ffd3f42b74259b39824c9d4471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyNDY3NmRmODMxZjVmZmQzZjQyYjc0MjU5YjM5ODI0YzlkNDQ3MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-15T19:24:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-15T19:24:43Z"}, "message": "decl.c (struct cp_function): Add named_label_uses.\n\n\t* decl.c (struct cp_function): Add named_label_uses.\n\t(push_cp_function_context): Save it.\n\t(pop_cp_function_context): Restore it.\n\t(define_label): Also complain about jumping into the scope of\n\tnon-POD objects that don't have constructors.\n\t* tree.c (pod_type_p): New fn.\nFixes g++.other/init9.C\n\t* pt.c (instantiate_class_template): Clear TYPE_BEING_DEFINED sooner.\n\t* rtti.c (synthesize_tinfo_fn): Call import_export_decl here.\n\t(get_tinfo_fn): Not here.\n\t* repo.c (repo_get_id): Abort if we get called for an incomplete\n\ttype.\nFixes g++.pt/instantiate4.C\n\nFrom-SVN: r23667", "tree": {"sha": "d52e9ad4f9e03949fb8a6ac2190c3669dde51a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d52e9ad4f9e03949fb8a6ac2190c3669dde51a01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5524676df831f5ffd3f42b74259b39824c9d4471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5524676df831f5ffd3f42b74259b39824c9d4471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5524676df831f5ffd3f42b74259b39824c9d4471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5524676df831f5ffd3f42b74259b39824c9d4471/comments", "author": null, "committer": null, "parents": [{"sha": "233363cbb17a40fb813d4aaf2f5a349c7237af28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233363cbb17a40fb813d4aaf2f5a349c7237af28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233363cbb17a40fb813d4aaf2f5a349c7237af28"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "798b0a648656fce70728cccfc730f876800a1ecd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5524676df831f5ffd3f42b74259b39824c9d4471", "patch": "@@ -1,3 +1,18 @@\n+1998-11-15  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (struct cp_function): Add named_label_uses.\n+\t(push_cp_function_context): Save it.\n+\t(pop_cp_function_context): Restore it.\n+\t(define_label): Also complain about jumping into the scope of \n+\tnon-POD objects that don't have constructors.\n+\t* tree.c (pod_type_p): New fn.\n+\n+\t* pt.c (instantiate_class_template): Clear TYPE_BEING_DEFINED sooner.\n+\t* rtti.c (synthesize_tinfo_fn): Call import_export_decl here.\n+\t(get_tinfo_fn): Not here.\n+\t* repo.c (repo_get_id): Abort if we get called for an incomplete\n+\ttype.\n+\n 1998-11-13  Mark Mitchell  <mark@markmitchell.com>\n \n \t* except.c (expand_throw): Make sure first argument to"}, {"sha": "70fc9fcc54cbf6b714672a4a46f51019f1a588d0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5524676df831f5ffd3f42b74259b39824c9d4471", "patch": "@@ -4346,9 +4346,8 @@ define_label (filename, line, name)\n \t\t\t   and they should be cleaned up\n \t\t\t   by the time we get to the label.  */\n \t\t\t&& ! DECL_ARTIFICIAL (new_decls)\n-\t\t\t&& ((DECL_INITIAL (new_decls) != NULL_TREE\n-\t\t\t     && DECL_INITIAL (new_decls) != error_mark_node)\n-\t\t\t    || TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (new_decls))))\n+\t\t\t&& !(DECL_INITIAL (new_decls) == NULL_TREE\n+\t\t\t     && pod_type_p (TREE_TYPE (new_decls))))\n \t\t      {\n \t\t\tif (! identified) \n \t\t\t  {\n@@ -4358,8 +4357,13 @@ define_label (filename, line, name)\n \t\t\t\t\t\t      \"  from here\");\n \t\t\t    identified = 1;\n \t\t\t}\n-\t\t\tcp_error_at (\"  crosses initialization of `%#D'\",\n-\t\t\t\t     new_decls);\n+\t\t\tif (DECL_INITIAL (new_decls)\n+\t\t\t    || TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (new_decls)))\n+\t\t\t  cp_error_at (\"  crosses initialization of `%#D'\",\n+\t\t\t\t       new_decls);\n+\t\t\telse\n+\t\t\t  cp_error_at (\"  enters scope of non-POD `%#D'\",\n+\t\t\t\t\t new_decls);\n \t\t      }\n \t\t    new_decls = TREE_CHAIN (new_decls);\n \t\t  }\n@@ -13999,6 +14003,7 @@ struct cp_function\n   int parms_stored;\n   int temp_name_counter;\n   tree named_labels;\n+  struct named_label_list *named_label_uses;\n   tree shadowed_labels;\n   tree ctor_label;\n   tree dtor_label;\n@@ -14035,6 +14040,7 @@ push_cp_function_context (context)\n   cp_function_chain = p;\n \n   p->named_labels = named_labels;\n+  p->named_label_uses = named_label_uses;\n   p->shadowed_labels = shadowed_labels;\n   p->returns_value = current_function_returns_value;\n   p->returns_null = current_function_returns_null;\n@@ -14077,6 +14083,7 @@ pop_cp_function_context (context)\n   cp_function_chain = p->next;\n \n   named_labels = p->named_labels;\n+  named_label_uses = p->named_label_uses;\n   shadowed_labels = p->shadowed_labels;\n   current_function_returns_value = p->returns_value;\n   current_function_returns_null = p->returns_null;"}, {"sha": "fb5bb54be5a827b2e9f6d1fbb0b2a28eb38a3be8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5524676df831f5ffd3f42b74259b39824c9d4471", "patch": "@@ -4786,6 +4786,8 @@ instantiate_class_template (type)\n   type = finish_struct_1 (type, 0);\n   CLASSTYPE_GOT_SEMICOLON (type) = 1;\n \n+  /* Clear this now so repo_template_used is happy.  */\n+  TYPE_BEING_DEFINED (type) = 0;\n   repo_template_used (type);\n \n  end:"}, {"sha": "b78402086c8b31de4af14f917c7d748e97b62edf", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=5524676df831f5ffd3f42b74259b39824c9d4471", "patch": "@@ -99,6 +99,12 @@ repo_get_id (t)\n {\n   if (TREE_CODE_CLASS (TREE_CODE (t)) == 't')\n     {\n+      /* If we're not done setting up the class, we may not have set up\n+\t the vtable, so going ahead would give the wrong answer.\n+         See g++.pt/instantiate4.C.  */\n+      if (TYPE_SIZE (t) == NULL_TREE || TYPE_BEING_DEFINED (t))\n+\tmy_friendly_abort (981113);\n+\n       t = TYPE_BINFO_VTABLE (t);\n       if (t == NULL_TREE)\n \treturn t;"}, {"sha": "14b16c82011cfac6b3d98c25ad943f7e243e8e95", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=5524676df831f5ffd3f42b74259b39824c9d4471", "patch": "@@ -374,9 +374,6 @@ get_tinfo_fn (type)\n   make_function_rtl (d);\n   assemble_external (d);\n   mark_inline_for_output (d);\n-  if (at_eof)\n-    import_export_decl (d);\n-\n   pop_obstacks ();\n \n   return d;\n@@ -1064,9 +1061,16 @@ synthesize_tinfo_fn (fndecl)\n      tree fndecl;\n {\n   tree type = TREE_TYPE (DECL_NAME (fndecl));\n-  tree tmp, addr;\n+  tree tmp, addr, tdecl;\n+\n+  if (at_eof)\n+    {\n+      import_export_decl (fndecl);\n+      if (DECL_REALLY_EXTERN (fndecl))\n+\treturn;\n+    }\n \n-  tree tdecl = get_tinfo_var (type);\n+  tdecl = get_tinfo_var (type);\n   DECL_EXTERNAL (tdecl) = 0;\n   TREE_STATIC (tdecl) = 1;\n   DECL_COMMON (tdecl) = 1;"}, {"sha": "1b277621bd620de57c808fbf524c385aa24d2ecb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5524676df831f5ffd3f42b74259b39824c9d4471/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5524676df831f5ffd3f42b74259b39824c9d4471", "patch": "@@ -2680,3 +2680,36 @@ is_dummy_object (ob)\n   return (TREE_CODE (ob) == NOP_EXPR\n \t  && TREE_OPERAND (ob, 0) == error_mark_node);\n }\n+\n+/* Returns 1 iff type T is a POD type, as defined in [basic.types].  */\n+\n+int\n+pod_type_p (t)\n+     tree t;\n+{\n+  tree f;\n+\n+  while (TREE_CODE (t) == ARRAY_TYPE)\n+    t = TREE_TYPE (t);\n+\n+  if (! IS_AGGR_TYPE (t))\n+    return 1;\n+\n+  if (CLASSTYPE_NON_AGGREGATE (t)\n+      || TYPE_HAS_COMPLEX_ASSIGN_REF (t)\n+      || TYPE_HAS_DESTRUCTOR (t))\n+    return 0;\n+\n+  for (f = TYPE_FIELDS (t); f; f = TREE_CHAIN (f))\n+    {\n+      if (TREE_CODE (f) != FIELD_DECL)\n+\tcontinue;\n+\n+      if (TREE_CODE (TREE_TYPE (f)) == REFERENCE_TYPE\n+\t  || TYPE_PTRMEMFUNC_P (TREE_TYPE (f))\n+\t  || TYPE_PTRMEM_P (TREE_TYPE (f)))\n+\treturn 0;\n+    }\n+\n+  return 1;\n+}"}]}