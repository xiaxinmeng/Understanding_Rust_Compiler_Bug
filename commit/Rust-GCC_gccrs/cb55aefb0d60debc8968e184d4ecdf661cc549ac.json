{"sha": "cb55aefb0d60debc8968e184d4ecdf661cc549ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1NWFlZmIwZDYwZGViYzg5NjhlMTg0ZDRlY2RmNjYxY2M1NDlhYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-03-16T09:40:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-03-16T09:40:14Z"}, "message": "decl.c (is_from_limited_with_of_main): New predicate.\n\n\t* gcc-interface/decl.c (is_from_limited_with_of_main): New predicate.\n\t(gnat_to_gnu_entity) <E_Subprogram_Type>: Invoke it on return and\n\tparameter types to detect circularities in ASIS mode.\n\t* gcc-interface/trans.c (Attribute_to_gnu): Mention AI05-0151.\n\nFrom-SVN: r221447", "tree": {"sha": "0bd3eb619cedaa1be5a78f3f4c2a1f349eca4efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd3eb619cedaa1be5a78f3f4c2a1f349eca4efc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb55aefb0d60debc8968e184d4ecdf661cc549ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb55aefb0d60debc8968e184d4ecdf661cc549ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb55aefb0d60debc8968e184d4ecdf661cc549ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb55aefb0d60debc8968e184d4ecdf661cc549ac/comments", "author": null, "committer": null, "parents": [{"sha": "c8dbf886e992daca83e878f3397909a0f7a33d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8dbf886e992daca83e878f3397909a0f7a33d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8dbf886e992daca83e878f3397909a0f7a33d93"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "bfda926a163899dad88909fd1281dc8afa715304", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb55aefb0d60debc8968e184d4ecdf661cc549ac/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb55aefb0d60debc8968e184d4ecdf661cc549ac/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cb55aefb0d60debc8968e184d4ecdf661cc549ac", "patch": "@@ -1,3 +1,10 @@\n+2015-03-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (is_from_limited_with_of_main): New predicate.\n+\t(gnat_to_gnu_entity) <E_Subprogram_Type>: Invoke it on return and\n+\tparameter types to detect circularities in ASIS mode.\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Mention AI05-0151.\n+\n 2015-03-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Abstract_State>: Do not"}, {"sha": "0027d6f2f0c88ab9a6f6f5152abd8862b4190b32", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb55aefb0d60debc8968e184d4ecdf661cc549ac/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb55aefb0d60debc8968e184d4ecdf661cc549ac/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=cb55aefb0d60debc8968e184d4ecdf661cc549ac", "patch": "@@ -182,6 +182,7 @@ static tree gnat_to_gnu_component_type (Entity_Id, bool, bool);\n static tree gnat_to_gnu_param (Entity_Id, Mechanism_Type, Entity_Id, bool,\n \t\t\t       bool *);\n static tree gnat_to_gnu_field (Entity_Id, tree, int, bool, bool);\n+static bool is_from_limited_with_of_main (Entity_Id);\n static tree change_qualified_type (tree, int);\n static bool same_discriminant_p (Entity_Id, Entity_Id);\n static bool array_type_has_nonaliased_component (tree, Entity_Id);\n@@ -4252,11 +4253,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       context may now appear in parameter and result profiles.  If\n \t       we are only annotating types, break circularities here.  */\n \t    if (type_annotate_only\n-\t\t&& IN (Ekind (gnat_return_type), Incomplete_Kind)\n-\t        && From_Limited_With (gnat_return_type)\n-\t\t&& In_Extended_Main_Code_Unit\n-\t\t   (Non_Limited_View (gnat_return_type))\n-\t\t&& !present_gnu_tree (Non_Limited_View (gnat_return_type)))\n+\t        && is_from_limited_with_of_main (gnat_return_type))\n \t      gnu_return_type = ptr_void_type_node;\n \t    else\n \t      gnu_return_type = gnat_to_gnu_type (gnat_return_type);\n@@ -4365,11 +4362,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       context may now appear in parameter and result profiles.  If\n \t       we are only annotating types, break circularities here.  */\n \t    if (type_annotate_only\n-\t\t&& IN (Ekind (gnat_param_type), Incomplete_Kind)\n-\t        && From_Limited_With (Etype (gnat_param_type))\n-\t\t&& In_Extended_Main_Code_Unit\n-\t\t   (Non_Limited_View (gnat_param_type))\n-\t\t&& !present_gnu_tree (Non_Limited_View (gnat_param_type)))\n+\t        && is_from_limited_with_of_main (gnat_param_type))\n \t      {\n \t\tgnu_param_type = ptr_void_type_node;\n \t\tfake_param_type = true;\n@@ -5810,6 +5803,30 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   return gnu_param;\n }\n \n+/* Return true if GNAT_ENTITY is an incomplete entity coming from a limited\n+   with of the main unit and whose full view has not been elaborated yet.  */\n+\n+static bool\n+is_from_limited_with_of_main (Entity_Id gnat_entity)\n+{\n+  /* Class-wide types are always transformed into their root type.  */\n+  if (Ekind (gnat_entity) == E_Class_Wide_Type)\n+    gnat_entity = Root_Type (gnat_entity);\n+\n+  if (IN (Ekind (gnat_entity), Incomplete_Kind)\n+      && From_Limited_With (gnat_entity))\n+    {\n+      Entity_Id gnat_full_view = Non_Limited_View (gnat_entity);\n+\n+      if (present_gnu_tree (gnat_full_view))\n+\treturn false;\n+\n+      return In_Extended_Main_Code_Unit (gnat_full_view);\n+    }\n+\n+  return false;\n+}\n+\n /* Like build_qualified_type, but TYPE_QUALS is added to the existing\n    qualifiers on TYPE.  */\n "}, {"sha": "fe4ecae082cf849f9e660eb8d1aac5670eba4aca", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb55aefb0d60debc8968e184d4ecdf661cc549ac/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb55aefb0d60debc8968e184d4ecdf661cc549ac/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=cb55aefb0d60debc8968e184d4ecdf661cc549ac", "patch": "@@ -1593,8 +1593,9 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n   bool prefix_unused = false;\n \n   /* ??? If this is an access attribute for a public subprogram to be used in\n-     a dispatch table, do not translate its type as it's useless there and the\n-     parameter types might be incomplete types coming from a limited with.  */\n+     a dispatch table, do not translate its type as it's useless in this case\n+     and the parameter types might be incomplete types coming from a limited\n+     context in Ada 2012 (AI05-0151).  */\n   if (Ekind (Etype (gnat_node)) == E_Access_Subprogram_Type\n       && Is_Dispatch_Table_Entity (Etype (gnat_node))\n       && Nkind (gnat_prefix) == N_Identifier"}]}