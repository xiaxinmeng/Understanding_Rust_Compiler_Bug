{"sha": "d96e840784d5c589120b9df69536097e5d15ec39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2ZTg0MDc4NGQ1YzU4OTEyMGI5ZGY2OTUzNjA5N2U1ZDE1ZWMzOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-03-06T06:47:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-06T06:47:22Z"}, "message": "re PR c++/67364 (\"accessing uninitialized member\" error in constexpr context)\n\n\tPR c++/67364\n\t* constexpr.c (cxx_eval_store_expression): Replace\n\tCONSTRUCTOR_ELTS in nested CONSTRUCTORs, too.\n\nFrom-SVN: r234013", "tree": {"sha": "edb4359b26a408a79a4116b98ba144fdba93bd74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edb4359b26a408a79a4116b98ba144fdba93bd74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d96e840784d5c589120b9df69536097e5d15ec39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96e840784d5c589120b9df69536097e5d15ec39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96e840784d5c589120b9df69536097e5d15ec39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96e840784d5c589120b9df69536097e5d15ec39/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "260e910b1155c0f6c524b8d4e07a9414bd227d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260e910b1155c0f6c524b8d4e07a9414bd227d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260e910b1155c0f6c524b8d4e07a9414bd227d6f"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "a803ec984863f18a01acf4fee12ee4cc4daf0f70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e840784d5c589120b9df69536097e5d15ec39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e840784d5c589120b9df69536097e5d15ec39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d96e840784d5c589120b9df69536097e5d15ec39", "patch": "@@ -1,3 +1,9 @@\n+2016-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67364\n+\t* constexpr.c (cxx_eval_store_expression): Replace\n+\tCONSTRUCTOR_ELTS in nested CONSTRUCTORs, too.\n+\n 2016-03-05  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/66786"}, {"sha": "f23e7c91755f0b0fe630d5db9039871dd4e0b69b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e840784d5c589120b9df69536097e5d15ec39/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e840784d5c589120b9df69536097e5d15ec39/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=d96e840784d5c589120b9df69536097e5d15ec39", "patch": "@@ -2939,39 +2939,34 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   /* Don't share a CONSTRUCTOR that might be changed later.  */\n   init = unshare_expr (init);\n   if (target == object)\n+    /* The hash table might have moved since the get earlier.  */\n+    valp = ctx->values->get (object);\n+\n+  if (TREE_CODE (init) == CONSTRUCTOR)\n     {\n-      /* The hash table might have moved since the get earlier.  */\n-      valp = ctx->values->get (object);\n-      if (TREE_CODE (init) == CONSTRUCTOR)\n-\t{\n-\t  /* An outer ctx->ctor might be pointing to *valp, so replace\n-\t     its contents.  */\n-\t  CONSTRUCTOR_ELTS (*valp) = CONSTRUCTOR_ELTS (init);\n-\t  TREE_CONSTANT (*valp) = TREE_CONSTANT (init);\n-\t  TREE_SIDE_EFFECTS (*valp) = TREE_SIDE_EFFECTS (init);\n-\t}\n-      else\n-\t*valp = init;\n+      /* An outer ctx->ctor might be pointing to *valp, so replace\n+\t its contents.  */\n+      CONSTRUCTOR_ELTS (*valp) = CONSTRUCTOR_ELTS (init);\n+      TREE_CONSTANT (*valp) = TREE_CONSTANT (init);\n+      TREE_SIDE_EFFECTS (*valp) = TREE_SIDE_EFFECTS (init);\n     }\n   else\n-    {\n-      *valp = init;\n-\n-      /* Update TREE_CONSTANT and TREE_SIDE_EFFECTS on enclosing\n-\t CONSTRUCTORs.  */\n-      tree elt;\n-      unsigned i;\n-      bool c = TREE_CONSTANT (init);\n-      bool s = TREE_SIDE_EFFECTS (init);\n-      if (!c || s)\n-\tFOR_EACH_VEC_SAFE_ELT (ctors, i, elt)\n-\t  {\n-\t    if (!c)\n-\t      TREE_CONSTANT (elt) = false;\n-\t    if (s)\n-\t      TREE_SIDE_EFFECTS (elt) = true;\n-\t  }\n-    }\n+    *valp = init;\n+\n+  /* Update TREE_CONSTANT and TREE_SIDE_EFFECTS on enclosing\n+     CONSTRUCTORs, if any.  */\n+  tree elt;\n+  unsigned i;\n+  bool c = TREE_CONSTANT (init);\n+  bool s = TREE_SIDE_EFFECTS (init);\n+  if (!c || s)\n+    FOR_EACH_VEC_SAFE_ELT (ctors, i, elt)\n+      {\n+\tif (!c)\n+\t  TREE_CONSTANT (elt) = false;\n+\tif (s)\n+\t  TREE_SIDE_EFFECTS (elt) = true;\n+      }\n   release_tree_vector (ctors);\n \n   if (*non_constant_p)"}, {"sha": "547dec4c97e0ee45ba8054c7a8947838e616224b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-aggr3.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e840784d5c589120b9df69536097e5d15ec39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-aggr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e840784d5c589120b9df69536097e5d15ec39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-aggr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-aggr3.C?ref=d96e840784d5c589120b9df69536097e5d15ec39", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/67364\n+// { dg-do compile { target c++11 } }\n+\n+template <typename Xn>\n+struct tuple {\n+  Xn storage_;\n+\n+  constexpr tuple(Xn const& xn)\n+    : storage_(xn)\n+  { }\n+\n+  template <typename ...dummy>\n+  constexpr tuple(tuple const& other)\n+    : storage_(other.storage_)\n+  { }\n+\n+  template <typename ...dummy>\n+  constexpr tuple(tuple& other)\n+    : tuple(const_cast<tuple const&>(other))\n+  { }\n+};\n+\n+template <typename T>\n+struct wrapper { T value; };\n+\n+template <typename T>\n+constexpr wrapper<T> wrap(T t) { return {t}; }\n+\n+constexpr wrapper<tuple<int>> t = wrap(tuple<int>{2});\n+static_assert(t.value.storage_ == 2, \"\");"}]}