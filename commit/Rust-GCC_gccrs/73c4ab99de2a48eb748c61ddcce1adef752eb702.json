{"sha": "73c4ab99de2a48eb748c61ddcce1adef752eb702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjNGFiOTlkZTJhNDhlYjc0OGM2MWRkY2NlMWFkZWY3NTJlYjcwMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-19T23:07:29Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-19T23:07:29Z"}, "message": "fold-const.c (fold): Move the handling of constants ...\n\n\t* fold-const.c (fold) <ABS_EXPR>: Move the handling of constants\n\t...\n\t(fold_abs_const): ... here.\n\nFrom-SVN: r79709", "tree": {"sha": "d39de4b55c63eee949729daea70534a78f7f4f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d39de4b55c63eee949729daea70534a78f7f4f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c4ab99de2a48eb748c61ddcce1adef752eb702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c4ab99de2a48eb748c61ddcce1adef752eb702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c4ab99de2a48eb748c61ddcce1adef752eb702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c4ab99de2a48eb748c61ddcce1adef752eb702/comments", "author": null, "committer": null, "parents": [{"sha": "edb3d426310169159f4747e405f0c0d3a540515e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb3d426310169159f4747e405f0c0d3a540515e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edb3d426310169159f4747e405f0c0d3a540515e"}], "stats": {"total": 99, "additions": 63, "deletions": 36}, "files": [{"sha": "c2f52d8cac722f8c1d92a39e407fde3dbb60589e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c4ab99de2a48eb748c61ddcce1adef752eb702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c4ab99de2a48eb748c61ddcce1adef752eb702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73c4ab99de2a48eb748c61ddcce1adef752eb702", "patch": "@@ -1,3 +1,9 @@\n+2004-03-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* fold-const.c (fold) <ABS_EXPR>: Move the handling of constants\n+\t...\n+\t(fold_abs_const): ... here.\n+\n 2004-03-19  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.h (TYPE_ARRAY_MAX_SIZE): Use type.maxval directly."}, {"sha": "c744491e666cc9a79cedb9b7fde35319f1ca4fc2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 57, "deletions": 36, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c4ab99de2a48eb748c61ddcce1adef752eb702/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c4ab99de2a48eb748c61ddcce1adef752eb702/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=73c4ab99de2a48eb748c61ddcce1adef752eb702", "patch": "@@ -114,6 +114,7 @@ static bool reorder_operands_p (tree, tree);\n static bool tree_swap_operands_p (tree, tree, bool);\n \n static tree fold_negate_const (tree, tree);\n+static tree fold_abs_const (tree, tree);\n \n /* The following constants represent a bit based encoding of GCC's\n    comparison operators.  This encoding simplifies transformations\n@@ -5820,42 +5821,9 @@ fold (tree expr)\n       return t;\n \n     case ABS_EXPR:\n-      if (wins)\n-\t{\n-\t  if (TREE_CODE (arg0) == INTEGER_CST)\n-\t    {\n-\t      /* If the value is unsigned, then the absolute value is\n-\t\t the same as the ordinary value.  */\n-\t      if (TREE_UNSIGNED (type))\n-\t\treturn arg0;\n-\t      /* Similarly, if the value is non-negative.  */\n-\t      else if (INT_CST_LT (integer_minus_one_node, arg0))\n-\t\treturn arg0;\n-\t      /* If the value is negative, then the absolute value is\n-\t\t its negation.  */\n-\t      else\n-\t\t{\n-\t\t  unsigned HOST_WIDE_INT low;\n-\t\t  HOST_WIDE_INT high;\n-\t\t  int overflow = neg_double (TREE_INT_CST_LOW (arg0),\n-\t\t\t\t\t     TREE_INT_CST_HIGH (arg0),\n-\t\t\t\t\t     &low, &high);\n-\t\t  t = build_int_2 (low, high);\n-\t\t  TREE_TYPE (t) = type;\n-\t\t  TREE_OVERFLOW (t)\n-\t\t    = (TREE_OVERFLOW (arg0)\n-\t\t       | force_fit_type (t, overflow));\n-\t\t  TREE_CONSTANT_OVERFLOW (t)\n-\t\t    = TREE_OVERFLOW (t) | TREE_CONSTANT_OVERFLOW (arg0);\n-\t\t}\n-\t    }\n-\t  else if (TREE_CODE (arg0) == REAL_CST)\n-\t    {\n-\t      if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg0)))\n-\t\tt = build_real (type,\n-\t\t\t\tREAL_VALUE_NEGATE (TREE_REAL_CST (arg0)));\n-\t    }\n-\t}\n+      if (wins\n+\t  && (TREE_CODE (arg0) == INTEGER_CST || TREE_CODE (arg0) == REAL_CST))\n+\treturn fold_abs_const (arg0, type);\n       else if (TREE_CODE (arg0) == NEGATE_EXPR)\n \treturn fold (build1 (ABS_EXPR, type, TREE_OPERAND (arg0, 0)));\n       /* Convert fabs((double)float) into (double)fabsf(float).  */\n@@ -9073,4 +9041,57 @@ fold_negate_const (tree arg0, tree type)\n   return t;\n }\n \n+/* Return the tree for abs (ARG0) when ARG0 is known to be either\n+   an integer constant or real constant.\n+\n+   TYPE is the type of the result.  */\n+\n+static tree\n+fold_abs_const (tree arg0, tree type)\n+{\n+  tree t = NULL_TREE;\n+\n+  if (TREE_CODE (arg0) == INTEGER_CST)\n+    {\n+      /* If the value is unsigned, then the absolute value is\n+\t the same as the ordinary value.  */\n+      if (TREE_UNSIGNED (type))\n+\treturn arg0;\n+      /* Similarly, if the value is non-negative.  */\n+      else if (INT_CST_LT (integer_minus_one_node, arg0))\n+\treturn arg0;\n+      /* If the value is negative, then the absolute value is\n+\t its negation.  */\n+      else\n+\t{\n+\t  unsigned HOST_WIDE_INT low;\n+\t  HOST_WIDE_INT high;\n+\t  int overflow = neg_double (TREE_INT_CST_LOW (arg0),\n+\t\t\t\t     TREE_INT_CST_HIGH (arg0),\n+\t\t\t\t     &low, &high);\n+\t  t = build_int_2 (low, high);\n+\t  TREE_TYPE (t) = type;\n+\t  TREE_OVERFLOW (t)\n+\t    = (TREE_OVERFLOW (arg0)\n+\t       | force_fit_type (t, overflow));\n+\t  TREE_CONSTANT_OVERFLOW (t)\n+\t    = TREE_OVERFLOW (t) | TREE_CONSTANT_OVERFLOW (arg0);\n+\t  return t;\n+\t}\n+    }\n+  else if (TREE_CODE (arg0) == REAL_CST)\n+    {\n+      if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg0)))\n+\treturn build_real (type, REAL_VALUE_NEGATE (TREE_REAL_CST (arg0)));\n+      else\n+\treturn arg0;\n+    }\n+#ifdef ENABLE_CHECKING\n+  else\n+    abort ();\n+#endif\n+    \n+  return t;\n+}\n+\n #include \"gt-fold-const.h\""}]}