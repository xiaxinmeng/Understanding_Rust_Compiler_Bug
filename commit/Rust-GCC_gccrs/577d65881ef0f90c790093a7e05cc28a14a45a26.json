{"sha": "577d65881ef0f90c790093a7e05cc28a14a45a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3ZDY1ODgxZWYwZjkwYzc5MDA5M2E3ZTA1Y2MyOGExNGE0NWEyNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-02-01T13:41:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-02-01T13:41:43Z"}, "message": "re PR tree-optimization/88597 (Compile time hog w/ -O1 -fpeel-loops)\n\n2019-02-01  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/88597\n\t* tree-scalar-evolution.c (analyze_scalar_evolution): Set up\n\tthe instantiate cache.\n\t(instantiate_scev_binary): Elide second operand procesing\n\tif equal to the first.\n\t* tree-chrec.c (chrec_contains_symbols): Add visited set.\n\t(chrec_contains_undetermined): Likewise.\n\t(tree_contains_chrecs): Likewise.\n\n\t* gcc.dg/torture/pr88597.c: New testcase.\n\nFrom-SVN: r268449", "tree": {"sha": "35bb180499ae6295918735a81458aa2d587cf826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35bb180499ae6295918735a81458aa2d587cf826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/577d65881ef0f90c790093a7e05cc28a14a45a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577d65881ef0f90c790093a7e05cc28a14a45a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577d65881ef0f90c790093a7e05cc28a14a45a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577d65881ef0f90c790093a7e05cc28a14a45a26/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61a8637c8893a25282e844ec217c31df8ad3b6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a8637c8893a25282e844ec217c31df8ad3b6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a8637c8893a25282e844ec217c31df8ad3b6e9"}], "stats": {"total": 170, "additions": 128, "deletions": 42}, "files": [{"sha": "64d312471e6c6eb9d5ac63d5cb6e49a21de49a04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=577d65881ef0f90c790093a7e05cc28a14a45a26", "patch": "@@ -1,3 +1,14 @@\n+2019-02-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/88597\n+\t* tree-scalar-evolution.c (analyze_scalar_evolution): Set up\n+\tthe instantiate cache.\n+\t(instantiate_scev_binary): Elide second operand procesing\n+\tif equal to the first.\n+\t* tree-chrec.c (chrec_contains_symbols): Add visited set.\n+\t(chrec_contains_undetermined): Likewise.\n+\t(tree_contains_chrecs): Likewise.\n+\n 2019-02-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* parms.def (MAX_INLINE_INSNS_SINGLE): Reduce from 400 to 200."}, {"sha": "cfcd4ce19bc6fb42e675c40ab36a74d1456eec05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=577d65881ef0f90c790093a7e05cc28a14a45a26", "patch": "@@ -1,3 +1,8 @@\n+2019-02-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/88597\n+\t* gcc.dg/torture/pr88597.c: New testcase.\n+\n 2019-02-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85497"}, {"sha": "63ae7b5d6a9f5205af3392ee306aedb53b2fafb1", "filename": "gcc/testsuite/gcc.dg/torture/pr88597.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88597.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88597.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr88597.c?ref=577d65881ef0f90c790093a7e05cc28a14a45a26", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fpeel-loops --param max-completely-peel-times=30\" } */\n+\n+int\n+un (int dd)\n+{\n+  int nz, q8;\n+\n+  for (nz = 0; nz < 3; ++nz)\n+    {\n+      int s2;\n+\n+      q8 = dd;\n+      for (s2 = 0; s2 < 28; ++s2)\n+\tq8 *= q8;\n+    }\n+\n+  return q8;\n+}"}, {"sha": "3987041ac190f9dbeea5fa08064a71ccbb914d82", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=577d65881ef0f90c790093a7e05cc28a14a45a26", "patch": "@@ -934,8 +934,8 @@ is_multivariate_chrec (const_tree chrec)\n \n /* Determines whether the chrec contains symbolic names or not.  */\n \n-bool\n-chrec_contains_symbols (const_tree chrec)\n+static bool\n+chrec_contains_symbols (const_tree chrec, hash_set<const_tree> &visited)\n {\n   int i, n;\n \n@@ -954,15 +954,22 @@ chrec_contains_symbols (const_tree chrec)\n \n   n = TREE_OPERAND_LENGTH (chrec);\n   for (i = 0; i < n; i++)\n-    if (chrec_contains_symbols (TREE_OPERAND (chrec, i)))\n+    if (chrec_contains_symbols (TREE_OPERAND (chrec, i), visited))\n       return true;\n   return false;\n }\n \n+bool\n+chrec_contains_symbols (const_tree chrec)\n+{\n+  hash_set<const_tree> visited;\n+  return chrec_contains_symbols (chrec, visited);\n+}\n+\n /* Determines whether the chrec contains undetermined coefficients.  */\n \n-bool\n-chrec_contains_undetermined (const_tree chrec)\n+static bool\n+chrec_contains_undetermined (const_tree chrec, hash_set<const_tree> &visited)\n {\n   int i, n;\n \n@@ -972,19 +979,29 @@ chrec_contains_undetermined (const_tree chrec)\n   if (chrec == NULL_TREE)\n     return false;\n \n+  if (visited.add (chrec))\n+    return false;\n+\n   n = TREE_OPERAND_LENGTH (chrec);\n   for (i = 0; i < n; i++)\n-    if (chrec_contains_undetermined (TREE_OPERAND (chrec, i)))\n+    if (chrec_contains_undetermined (TREE_OPERAND (chrec, i), visited))\n       return true;\n   return false;\n }\n \n+bool\n+chrec_contains_undetermined (const_tree chrec)\n+{\n+  hash_set<const_tree> visited;\n+  return chrec_contains_undetermined (chrec, visited);\n+}\n+\n /* Determines whether the tree EXPR contains chrecs, and increment\n    SIZE if it is not a NULL pointer by an estimation of the depth of\n    the tree.  */\n \n-bool\n-tree_contains_chrecs (const_tree expr, int *size)\n+static bool\n+tree_contains_chrecs (const_tree expr, int *size, hash_set<const_tree> &visited)\n {\n   int i, n;\n \n@@ -999,11 +1016,19 @@ tree_contains_chrecs (const_tree expr, int *size)\n \n   n = TREE_OPERAND_LENGTH (expr);\n   for (i = 0; i < n; i++)\n-    if (tree_contains_chrecs (TREE_OPERAND (expr, i), size))\n+    if (tree_contains_chrecs (TREE_OPERAND (expr, i), size, visited))\n       return true;\n   return false;\n }\n \n+bool\n+tree_contains_chrecs (const_tree expr, int *size)\n+{\n+  hash_set<const_tree> visited;\n+  return tree_contains_chrecs (expr, size, visited);\n+}\n+\n+\n /* Recursive helper function.  */\n \n static bool"}, {"sha": "16debb0b34d4eab505d681af71b0f06ae83ddfe0", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 59, "deletions": 33, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577d65881ef0f90c790093a7e05cc28a14a45a26/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=577d65881ef0f90c790093a7e05cc28a14a45a26", "patch": "@@ -380,6 +380,37 @@ find_var_scev_info (basic_block instantiated_below, tree var)\n   return &res->chrec;\n }\n \n+\n+/* Hashtable helpers for a temporary hash-table used when\n+   analyzing a scalar evolution, instantiating a CHREC or\n+   resolving mixers.  */\n+\n+struct instantiate_cache_type\n+{\n+  htab_t map;\n+  vec<scev_info_str> entries;\n+\n+  instantiate_cache_type () : map (NULL), entries (vNULL) {}\n+  ~instantiate_cache_type ();\n+  tree get (unsigned slot) { return entries[slot].chrec; }\n+  void set (unsigned slot, tree chrec) { entries[slot].chrec = chrec; }\n+};\n+\n+instantiate_cache_type::~instantiate_cache_type ()\n+{\n+  if (map != NULL)\n+    {\n+      htab_delete (map);\n+      entries.release ();\n+    }\n+}\n+\n+/* Cache to avoid infinite recursion when instantiating an SSA name.\n+   Live during the outermost analyze_scalar_evolution, instantiate_scev\n+   or resolve_mixers call.  */\n+static instantiate_cache_type *global_cache;\n+\n+\n /* Return true when CHREC contains symbolic names defined in\n    LOOP_NB.  */\n \n@@ -2117,7 +2148,22 @@ analyze_scalar_evolution (struct loop *loop, tree var)\n \n   res = get_scalar_evolution (block_before_loop (loop), var);\n   if (res == chrec_not_analyzed_yet)\n-    res = analyze_scalar_evolution_1 (loop, var);\n+    {\n+      /* We'll recurse into instantiate_scev, avoid tearing down the\n+         instantiate cache repeatedly and keep it live from here.  */\n+      bool destr = false;\n+      if (!global_cache)\n+\t{\n+\t  global_cache = new instantiate_cache_type;\n+\t  destr = true;\n+\t}\n+      res = analyze_scalar_evolution_1 (loop, var);\n+      if (destr)\n+\t{\n+\t  delete global_cache;\n+\t  global_cache = NULL;\n+\t}\n+    }\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     fprintf (dump_file, \")\\n\");\n@@ -2231,34 +2277,6 @@ analyze_scalar_evolution_in_loop (struct loop *wrto_loop, struct loop *use_loop,\n }\n \n \n-/* Hashtable helpers for a temporary hash-table used when\n-   instantiating a CHREC or resolving mixers.  For this use\n-   instantiated_below is always the same.  */\n-\n-struct instantiate_cache_type\n-{\n-  htab_t map;\n-  vec<scev_info_str> entries;\n-\n-  instantiate_cache_type () : map (NULL), entries (vNULL) {}\n-  ~instantiate_cache_type ();\n-  tree get (unsigned slot) { return entries[slot].chrec; }\n-  void set (unsigned slot, tree chrec) { entries[slot].chrec = chrec; }\n-};\n-\n-instantiate_cache_type::~instantiate_cache_type ()\n-{\n-  if (map != NULL)\n-    {\n-      htab_delete (map);\n-      entries.release ();\n-    }\n-}\n-\n-/* Cache to avoid infinite recursion when instantiating an SSA name.\n-   Live during the outermost instantiate_scev or resolve_mixers call.  */\n-static instantiate_cache_type *global_cache;\n-\n /* Computes a hash function for database element ELT.  */\n \n static inline hashval_t\n@@ -2562,10 +2580,18 @@ instantiate_scev_binary (edge instantiate_below,\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n-  op1 = instantiate_scev_r (instantiate_below, evolution_loop, inner_loop,\n-\t\t\t    c1, fold_conversions, size_expr);\n-  if (op1 == chrec_dont_know)\n-    return chrec_dont_know;\n+  /* While we eventually compute the same op1 if c0 == c1 the process\n+     of doing this is expensive so the following short-cut prevents\n+     exponential compile-time behavior.  */\n+  if (c0 != c1)\n+    {\n+      op1 = instantiate_scev_r (instantiate_below, evolution_loop, inner_loop,\n+\t\t\t\tc1, fold_conversions, size_expr);\n+      if (op1 == chrec_dont_know)\n+\treturn chrec_dont_know;\n+    }\n+  else\n+    op1 = op0;\n \n   if (c0 != op0\n       || c1 != op1)"}]}