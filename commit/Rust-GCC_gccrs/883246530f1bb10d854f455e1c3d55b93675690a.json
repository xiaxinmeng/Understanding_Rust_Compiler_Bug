{"sha": "883246530f1bb10d854f455e1c3d55b93675690a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzMjQ2NTMwZjFiYjEwZDg1NGY0NTVlMWMzZDU1YjkzNjc1NjkwYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-05-13T07:49:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-05-13T07:49:00Z"}, "message": "x86-vxworks malloc aligns to 8 bytes like solaris\n\nVxworks 7's malloc, like Solaris', only ensures 8-byte alignment of\nreturned pointers on 32-bit x86, though GCC's stddef.h defines\nmax_align_t with 16-byte alignment for __float128.  This patch enables\non x86-vxworks the same memory_resource workaround used for x86-solaris.\n\nThe testsuite also had a workaround, defining BAD_MAX_ALIGN_T and\nxfailing the test; extend those to x86-vxworks as well, and remove the\ncheck for char-aligned requested allocation to be aligned like\nmax_align_t.  With that change, the test passes on x86-vxworks; I'm\nguessing that's the same reason for the test not to pass on\nx86-solaris (and on x86_64-solaris -m32), so with the fix, I'm\ntentatively removing the xfail.\n\n\nfor libstdc++-v3/ChangeLog\n\n\tPR libstdc++/77691\n\t* include/experimental/memory_resource\n\t(__resource_adaptor_imp::do_allocate): Handle max_align_t on\n\tx86-vxworks as on x86-solaris.\n\t(__resource_adaptor_imp::do_deallocate): Likewise.\n\t* testsuite/experimental/memory_resource/new_delete_resource.cc:\n\tDrop xfail.\n\t(BAD_MAX_ALIGN_T): Define on x86-vxworks as on x86-solaris.\n\t(test03): Drop max-align test for char-aligned alloc.", "tree": {"sha": "26d92ca5ba334c1ef7a3e22a1b94aac1586ecd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26d92ca5ba334c1ef7a3e22a1b94aac1586ecd2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/883246530f1bb10d854f455e1c3d55b93675690a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883246530f1bb10d854f455e1c3d55b93675690a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883246530f1bb10d854f455e1c3d55b93675690a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883246530f1bb10d854f455e1c3d55b93675690a/comments", "author": null, "committer": null, "parents": [{"sha": "a7b7818f3dbd14cc7577d25dcebaded07395c476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b7818f3dbd14cc7577d25dcebaded07395c476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b7818f3dbd14cc7577d25dcebaded07395c476"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "0148ded22d5213b0485aa4c5a88b6910c02c3f06", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883246530f1bb10d854f455e1c3d55b93675690a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883246530f1bb10d854f455e1c3d55b93675690a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=883246530f1bb10d854f455e1c3d55b93675690a", "patch": "@@ -1,3 +1,15 @@\n+2020-05-13  Alexandre Oliva <oliva@adacore.com>\n+\n+\tPR libstdc++/77691\n+\t* include/experimental/memory_resource\n+\t(__resource_adaptor_imp::do_allocate): Handle max_align_t on\n+\tx86-vxworks as on x86-solaris.\n+\t(__resource_adaptor_imp::do_deallocate): Likewise.\n+\t* testsuite/experimental/memory_resource/new_delete_resource.cc:\n+\tDrop xfail.\n+\t(BAD_MAX_ALIGN_T): Define on x86-vxworks as on x86-solaris.\n+\t(test03): Drop max-align test for char-aligned alloc.\n+\n 2020-05-08  Ulrich Drepper  <drepper@redhat.com>\n \n \t* include/bits/atomic_base.h (atomic_flag): Implement test member"}, {"sha": "1c4de70c5331a1464960be99572cd6bbc51fbdf7", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883246530f1bb10d854f455e1c3d55b93675690a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883246530f1bb10d854f455e1c3d55b93675690a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=883246530f1bb10d854f455e1c3d55b93675690a", "patch": "@@ -413,7 +413,7 @@ namespace pmr {\n       do_allocate(size_t __bytes, size_t __alignment) override\n       {\n \t// Cannot use max_align_t on 32-bit Solaris x86, see PR libstdc++/77691\n-#if ! (defined __sun__ && defined __i386__)\n+#if ! ((defined __sun__ || defined __VXWORKS__) && defined __i386__)\n \tif (__alignment == alignof(max_align_t))\n \t  return _M_allocate<alignof(max_align_t)>(__bytes);\n #endif\n@@ -439,7 +439,7 @@ namespace pmr {\n       do_deallocate(void* __ptr, size_t __bytes, size_t __alignment) noexcept\n       override\n       {\n-#if ! (defined __sun__ && defined __i386__)\n+#if ! ((defined __sun__ || defined __VXWORKS__) && defined __i386__)\n \tif (__alignment == alignof(max_align_t))\n \t  return (void) _M_deallocate<alignof(max_align_t)>(__ptr, __bytes);\n #endif"}, {"sha": "65a42da3f6a53caf22b0ec435025f29930e6b0a5", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/new_delete_resource.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883246530f1bb10d854f455e1c3d55b93675690a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883246530f1bb10d854f455e1c3d55b93675690a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc?ref=883246530f1bb10d854f455e1c3d55b93675690a", "patch": "@@ -17,13 +17,12 @@\n \n // { dg-do run { target c++14 } }\n // { dg-require-cstdint \"\" }\n-// { dg-xfail-run-if \"PR libstdc++/77691\" { { i?86-*-solaris2.* x86_64-*-solaris2.* } && ilp32 } }\n \n #include <experimental/memory_resource>\n #include <cstdlib>\n #include <testsuite_hooks.h>\n \n-#if defined __sun__ && defined __i386__\n+#if (defined __sun__ || defined __VXWORKS__) && defined __i386__\n // See PR libstdc++/77691\n # define BAD_MAX_ALIGN_T 1\n #endif\n@@ -128,7 +127,6 @@ test03()\n \n   p = r1->allocate(2, alignof(char));\n   VERIFY( bytes_allocated == 2 );\n-  VERIFY( aligned<max_align_t>(p) );\n   r1->deallocate(p, 2, alignof(char));\n   VERIFY( bytes_allocated == 0 );\n "}]}