{"sha": "5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwNGRhZjMxNzFkY2I2MDk1YTllZTkxZmUwOWJmNWE3MGRmNDNhMA==", "commit": {"author": {"name": "Peter Barada", "email": "peter@the-baradas.com", "date": "2004-06-16T21:53:46Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-06-16T21:53:46Z"}, "message": "m68k.md (movsi_cfv4): New pattern to allow mov3q.\n\n\t* config/m68k/m68k.md (movsi_cfv4): New pattern to allow mov3q.\n\t(movsi_cf): Make named, don't match TARGET_CFV4.\n\t(pushexthisi_const): Use mov3q if possible.\n\t(extendhisi2, cvf4_extendhisi2): Split extendhisi2 pattern\n\tto special case mvz.w for ColdFire V4.\n\t(extendqisi2, cvf4_extendqisi2): Split extendhisi2 pattern\n\tto special case mvz.b for ColdFire V4.\n\t(udivmodhi4, divmodhi4): Use mvz to zero extend arg for\n\tdivide.\n\t(iorsi3, xorsi3, andsi3): Use bitfield instructions if possible.\n\t* config/m68k/m68k.c(valid_mov3q_const):  New function.\n\t(const_method): SWAP is valid for ColdFire.\n\t(MULL_COST, MULW_COST): Fix costs for ColdFire V3/V4.\n\t* config/m68k/m68k-protos.h (valid_mov3q_const): Prototype here.\n\nFrom-SVN: r83266", "tree": {"sha": "43559396a2e98ef9733950984ee8c75db769667c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43559396a2e98ef9733950984ee8c75db769667c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/comments", "author": null, "committer": null, "parents": [{"sha": "8c16199578ee7b0bcc94a807373569055678d042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c16199578ee7b0bcc94a807373569055678d042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c16199578ee7b0bcc94a807373569055678d042"}], "stats": {"total": 168, "additions": 143, "deletions": 25}, "files": [{"sha": "cb18ad6ea5bdaf47d6e409f8e00ba1a77d30b45a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "patch": "@@ -1,3 +1,20 @@\n+2004-06-15  Peter Barada  <peter@the-baradas.com>\n+\n+\t* config/m68k/m68k.md (movsi_cfv4): New pattern to allow mov3q.\n+\t(movsi_cf): Make named, don't match TARGET_CFV4.\n+\t(pushexthisi_const): Use mov3q if possible.\n+\t(extendhisi2, cvf4_extendhisi2): Split extendhisi2 pattern\n+\tto special case mvz.w for ColdFire V4.\n+\t(extendqisi2, cvf4_extendqisi2): Split extendhisi2 pattern\n+\tto special case mvz.b for ColdFire V4.\n+\t(udivmodhi4, divmodhi4): Use mvz to zero extend arg for\n+\tdivide.\n+\t(iorsi3, xorsi3, andsi3): Use bitfield instructions if possible.\n+\t* config/m68k/m68k.c(valid_mov3q_const):  New function.\n+\t(const_method): SWAP is valid for ColdFire.\n+\t(MULL_COST, MULW_COST): Fix costs for ColdFire V3/V4.\n+\t* config/m68k/m68k-protos.h (valid_mov3q_const): Prototype here.\n+\n 2004-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.def (CASE_LABEL): Remove."}, {"sha": "73810d72f82934e40fc94890372e327a6e1e9bab", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n-   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #ifdef RTX_CODE\n extern HOST_WIDE_INT m68k_initial_elimination_offset (int from, int to);\n extern const char *output_move_const_into_data_reg (rtx *);\n+extern int valid_mov3q_const (rtx);\n extern const char *output_move_simode_const (rtx *);\n extern const char *output_move_simode (rtx *);\n extern const char *output_move_himode (rtx *);"}, {"sha": "8ad252f91fa1806db833cc4ab4eb1429766771c7", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "patch": "@@ -1447,12 +1447,13 @@ const_method (rtx constant)\n       /* This is the only value where neg.w is useful */\n       if (i == -65408)\n \treturn NEGW;\n-      /* Try also with swap */\n-      u = i;\n-      if (USE_MOVQ ((u >> 16) | (u << 16)))\n-\treturn SWAP;\n     }\n \n+  /* Try also with swap.  */\n+  u = i;\n+  if (USE_MOVQ ((u >> 16) | (u << 16)))\n+    return SWAP;\n+\n   if (TARGET_CFV4)\n     {\n       /* Try using MVZ/MVS with an immediate value to load constants.  */\n@@ -1524,9 +1525,9 @@ m68k_rtx_costs (rtx x, int code, int outer_code, int *total)\n        for add and the time for shift, taking away a little more because\n        sometimes move insns are needed.  */\n     /* div?.w is relatively cheaper on 68000 counted in COSTS_N_INSNS terms.  */\n-#define MULL_COST (TARGET_68060 ? 2 : TARGET_68040 ? 5 : TARGET_CFV3 ? 3 : TARGET_COLDFIRE ? 10 : 13)\n+#define MULL_COST (TARGET_68060 ? 2 : TARGET_68040 ? 5 : (TARGET_COLDFIRE && !TARGET_5200) ? 3 : TARGET_COLDFIRE ? 10 : 13)\n #define MULW_COST (TARGET_68060 ? 2 : TARGET_68040 ? 3 : TARGET_68020 ? 8 : \\\n-\t\t\tTARGET_CFV3 ? 2 : 5)\n+\t\t\t(TARGET_COLDFIRE && !TARGET_5200) ? 2 : 5)\n #define DIVW_COST (TARGET_68020 ? 27 : TARGET_CF_HWDIV ? 11 : 12)\n \n     case PLUS:\n@@ -1651,6 +1652,23 @@ output_move_const_into_data_reg (rtx *operands)\n     }\n }\n \n+/* Return 1 if 'constant' can be represented by\n+   mov3q on a ColdFire V4 core.  */\n+int\n+valid_mov3q_const (rtx constant)\n+{\n+  int i;\n+\n+  if (TARGET_CFV4 && GET_CODE (constant) == CONST_INT)\n+    {\n+      i = INTVAL (constant);\n+      if ((i == -1) || (i >= 1 && i <= 7))\n+\treturn 1;\n+    }\n+  return 0;\n+}\n+\n+\n const char *\n output_move_simode_const (rtx *operands)\n {\n@@ -1663,6 +1681,9 @@ output_move_simode_const (rtx *operands)\n \t  || !(GET_CODE (operands[0]) == MEM\n \t       && MEM_VOLATILE_P (operands[0]))))\n     return \"clr%.l %0\";\n+  else if ((GET_MODE (operands[0]) == SImode)\n+           && valid_mov3q_const (operands[1]))\n+      return \"mov3q%.l %1,%0\";\n   else if (operands[1] == const0_rtx\n \t   && ADDRESS_REG_P (operands[0]))\n     return \"sub%.l %0,%0\";\n@@ -1671,13 +1692,21 @@ output_move_simode_const (rtx *operands)\n   else if (ADDRESS_REG_P (operands[0])\n \t   && INTVAL (operands[1]) < 0x8000\n \t   && INTVAL (operands[1]) >= -0x8000)\n-    return \"move%.w %1,%0\";\n+    {\n+      if (valid_mov3q_const (operands[1]))\n+        return \"mov3q%.l %1,%0\";\n+      return \"move%.w %1,%0\";\n+    }\n   else if (GET_CODE (operands[0]) == MEM\n       && GET_CODE (XEXP (operands[0], 0)) == PRE_DEC\n       && REGNO (XEXP (XEXP (operands[0], 0), 0)) == STACK_POINTER_REGNUM\n \t   && INTVAL (operands[1]) < 0x8000\n \t   && INTVAL (operands[1]) >= -0x8000)\n-    return \"pea %a1\";\n+    {\n+      if (valid_mov3q_const (operands[1]))\n+        return \"mov3q%.l %1,%-\";\n+      return \"pea %a1\";\n+    }\n   return \"move%.l %1,%0\";\n }\n "}, {"sha": "2e24c113b2d24995682e0cf288ad90d8d1dae64e", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 87, "deletions": 16, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e04daf3171dcb6095a9ee91fe09bf5a70df43a0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=5e04daf3171dcb6095a9ee91fe09bf5a70df43a0", "patch": "@@ -587,6 +587,8 @@\n {\n   if (operands[1] == const0_rtx)\n     return \"clr%.l %0\";\n+  if (valid_mov3q_const(operands[1]))\n+    return \"mov3q%.l %1,%-\";\n   return \"pea %a1\";\n })\n \n@@ -675,10 +677,16 @@\n   return output_move_simode (operands);\n })\n \n-(define_insn \"\"\n+(define_insn \"*movsi_cf\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r<Q>,g,U\")\n \t(match_operand:SI 1 \"general_operand\" \"g,r<Q>,U\"))]\n-  \"TARGET_COLDFIRE\"\n+  \"TARGET_COLDFIRE && !TARGET_CFV4\"\n+  \"* return output_move_simode (operands);\")\n+\n+(define_insn \"*movsi_cfv4\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r<Q>,g,U\")\n+\t(match_operand:SI 1 \"general_operand\" \"Rg,Rr<Q>,U\"))]\n+  \"TARGET_CFV4\"\n   \"* return output_move_simode (operands);\")\n \n ;; Special case of fullword move, where we need to get a non-GOT PIC\n@@ -1250,6 +1258,8 @@\n {\n   if (DATA_REG_P (operands[0]))\n     {\n+      if (TARGET_CFV4)\n+        return \"mvz%.w %1,%0\";\n       if (GET_CODE (operands[1]) == REG\n \t  && REGNO (operands[0]) == REGNO (operands[1]))\n \treturn \"and%.l #0xFFFF,%0\";\n@@ -1280,10 +1290,18 @@\n     {\n       if (GET_CODE (operands[1]) == REG\n \t  && REGNO (operands[0]) == REGNO (operands[1]))\n-\treturn (!TARGET_COLDFIRE ? \"and%.w #0xFF,%0\" : \"and%.l #0xFF,%0\");\n+\t{\n+\t  if (TARGET_CFV4)\n+\t    return \"mvz%.b %0,%0\";\t\n+\t  return (!TARGET_COLDFIRE ? \"and%.w #0xFF,%0\" : \"and%.l #0xFF,%0\");\n+\t}\n       if (reg_mentioned_p (operands[0], operands[1]))\n-\treturn (!TARGET_COLDFIRE ? \"move%.b %1,%0\\;and%.w #0xFF,%0\" \n-\t\t\t     : \"move%.b %1,%0\\;and%.l #0xFF,%0\");\n+        {\n+\t  if (TARGET_CFV4)\n+\t    return \"mvz%.b %1,%0\";\t\n+\t  return (!TARGET_COLDFIRE ? \"move%.b %1,%0\\;and%.w #0xFF,%0\" \n+\t\t\t       : \"move%.b %1,%0\\;and%.l #0xFF,%0\");\n+\t}\n       return \"clr%.w %0\\;move%.b %1,%0\";\n     }\n   else if (GET_CODE (operands[0]) == MEM\n@@ -1318,6 +1336,8 @@\n {\n   if (DATA_REG_P (operands[0]))\n     {\n+      if (TARGET_CFV4)\n+        return \"mvz%.b %1,%0\";\n       if (GET_CODE (operands[1]) == REG\n \t  && REGNO (operands[0]) == REGNO (operands[1]))\n \treturn \"and%.l #0xFF,%0\";\n@@ -1358,6 +1378,8 @@\n {\n   CC_STATUS_INIT;\n   operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n+  if (TARGET_CFV4)\n+    return \"mvs%.b %1,%2\\;smi %0\\;extb%.l %0\";\n   if (TARGET_68020 || TARGET_COLDFIRE)\n     return \"move%.b %1,%2\\;extb%.l %2\\;smi %0\\;extb%.l %0\";\n   else\n@@ -1372,6 +1394,8 @@\n {\n   CC_STATUS_INIT;\n   operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n+  if (TARGET_CFV4)\n+    return \"mvs%.w %1,%2\\;smi %0\\;extb%.l %0\";\n   if (TARGET_68020 || TARGET_COLDFIRE)\n     return \"move%.w %1,%2\\;ext%.l %2\\;smi %0\\;extb%.l %0\";\n   else\n@@ -1423,11 +1447,25 @@\n     return \"smi %0\\;ext%.w %0\\;ext%.l %0\";\n })\n \n-(define_insn \"extendhisi2\"\n+(define_expand \"extendhisi2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t(sign_extend:SI\n+\t (match_operand:HI 1 \"nonimmediate_src_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*cfv4_extendhisi2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n+\t(sign_extend:SI\n+\t (match_operand:HI 1 \"nonimmediate_src_operand\" \"rmS\")))]\n+  \"TARGET_CFV4\"\n+  \"mvs%.w %1,%0\")\n+\n+(define_insn \"*68k_extendhisi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*d,a\")\n \t(sign_extend:SI\n \t (match_operand:HI 1 \"nonimmediate_src_operand\" \"0,rmS\")))]\n-  \"\"\n+  \"!TARGET_CFV4\"\n {\n   if (ADDRESS_REG_P (operands[0]))\n     return \"move%.w %1,%0\";\n@@ -1440,10 +1478,22 @@\n   \"\"\n   \"ext%.w %0\")\n \n-(define_insn \"extendqisi2\"\n+(define_expand \"extendqisi2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_68020 || TARGET_COLDFIRE\"\n+  \"\")\n+\n+(define_insn \"*cfv4_extendqisi2\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+\t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rms\")))]\n+  \"TARGET_CFV4\"\n+  \"mvs%.b %1,%0\")\n+\n+(define_insn \"*68k_extendqisi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n \t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")))]\n-  \"TARGET_68020 || TARGET_COLDFIRE\"\n+  \"TARGET_68020 || (TARGET_COLDFIRE && !TARGET_CFV4)\"\n   \"extb%.l %0\")\n \f\n ;; Conversions between float and double.\n@@ -2985,10 +3035,17 @@\n \t(umod:HI (match_dup 1) (match_dup 2)))]\n   \"!TARGET_COLDFIRE || TARGET_CF_HWDIV\"\n {\n-  output_asm_insn (MOTOROLA ?\n-    \"and%.l #0xFFFF,%0\\;divu%.w %2,%0\" :\n-    \"and%.l #0xFFFF,%0\\;divu %2,%0\",\n-    operands);\n+  if (TARGET_CFV4)\n+    output_asm_insn (MOTOROLA ?\n+      \"mvz%.w %0,%0\\;divu%.w %2,%0\" :\n+      \"mvz%.w %0,%0\\;divu %2,%0\",\n+      operands);\n+  else\n+    output_asm_insn (MOTOROLA ?\n+      \"and%.l #0xFFFF,%0\\;divu%.w %2,%0\" :\n+      \"and%.l #0xFFFF,%0\\;divu %2,%0\",\n+      operands);\n+\n   if (!find_reg_note(insn, REG_UNUSED, operands[3]))\n     {\n       CC_STATUS_INIT;\n@@ -3091,7 +3148,17 @@\n \t(and:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_src_operand\" \"d,dmsK\")))]\n   \"TARGET_COLDFIRE\"\n-  \"and%.l %2,%0\")\n+{\n+  if (TARGET_CFV4 && DATA_REG_P (operands[0])\n+      && GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      if (INTVAL (operands[2]) == 0x000000ff)\n+        return \\\"mvz%.b %0,%0\\\";\n+      else if (INTVAL (operands[2]) == 0x0000ffff)\n+        return \\\"mvz%.w %0,%0\\\";\n+    }\n+  return output_andsi3 (operands);\n+})\n \n (define_insn \"andhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=m,d\")\n@@ -3253,7 +3320,9 @@\n \t(ior:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_src_operand\" \"d,dmsK\")))]\n   \"TARGET_COLDFIRE\"\n-  \"or%.l %2,%0\")\n+{\n+  return output_iorsi3 (operands);\n+})\n \n (define_insn \"iorhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=m,d\")\n@@ -3432,7 +3501,9 @@\n \t(xor:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"d,Ks\")))]\n   \"TARGET_COLDFIRE\"\n-  \"eor%.l %2,%0\")\n+{\n+  return output_xorsi3 (operands);\n+})\n \n (define_insn \"xorhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=dm\")"}]}