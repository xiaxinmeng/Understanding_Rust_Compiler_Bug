{"sha": "cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y1YmE4YTg4MWMzMjQ4M2JjMTFlMDVjYzFlZTNiY2M5OTBkMzJjNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-02T10:51:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-02T10:51:58Z"}, "message": "[multiple changes]\n\n2012-04-02  Robert Dewar  <dewar@adacore.com>\n\n\t* s-atopri.ads: Minor reformatting.\n\n2012-04-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb: Minor reformatting, minor code cleanup.\n\n2012-04-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): For a reference to an\n\toperator symbol, set the sloc to point to the first character\n\tof the operator name, and not to the initial quaote.\n\t(Output_References): Ditto for the definition of an operator\n\tsymbol.\n\n2012-04-02  Vincent Celier  <celier@adacore.com>\n\n\t* ali.adb (Scan_Ali): Recognize Z lines. Set\n\tImplicit_With_From_Instantiation to True in the With_Record for\n\tZ lines.\n\t* ali.ads (With_Record): New Boolean component\n\tImplicit_With_From_Instantiation, defaulted to False.\n\t* csinfo.adb: Indicate that Implicit_With_From_Instantiation\n\tis special\n\t* lib-writ.adb (Write_ALI): New array Implicit_With.\n\t(Collect_Withs): Set Implicit_With for the unit is it is not Yes.\n\t(Write_With_Lines): Write a Z line instead of a W line if\n\tImplicit_With is Yes for the unit.\n\t* sem_ch12.adb (Inherit_Context): Only add a unit in the context\n\tif it is not there yet.\n\t* sinfo.ads: New flag Implicit_With_From_Instantiation (Flag12)\n\tadded.\n\nFrom-SVN: r186079", "tree": {"sha": "168cc4772edea64b02c164aad0c4c50eb0e7c6fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/168cc4772edea64b02c164aad0c4c50eb0e7c6fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/comments", "author": null, "committer": null, "parents": [{"sha": "5bd5034e244983cb1d6655a759efafcd5b6287aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd5034e244983cb1d6655a759efafcd5b6287aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd5034e244983cb1d6655a759efafcd5b6287aa"}], "stats": {"total": 204, "additions": 161, "deletions": 43}, "files": [{"sha": "69c2a847d786d31ef1eb8959a58cb454a66857bb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -1,3 +1,37 @@\n+2012-04-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-atopri.ads: Minor reformatting.\n+\n+2012-04-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb: Minor reformatting, minor code cleanup.\n+\n+2012-04-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): For a reference to an\n+\toperator symbol, set the sloc to point to the first character\n+\tof the operator name, and not to the initial quaote.\n+\t(Output_References): Ditto for the definition of an operator\n+\tsymbol.\n+\n+2012-04-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* ali.adb (Scan_Ali): Recognize Z lines. Set\n+\tImplicit_With_From_Instantiation to True in the With_Record for\n+\tZ lines.\n+\t* ali.ads (With_Record): New Boolean component\n+\tImplicit_With_From_Instantiation, defaulted to False.\n+\t* csinfo.adb: Indicate that Implicit_With_From_Instantiation\n+\tis special\n+\t* lib-writ.adb (Write_ALI): New array Implicit_With.\n+\t(Collect_Withs): Set Implicit_With for the unit is it is not Yes.\n+\t(Write_With_Lines): Write a Z line instead of a W line if\n+\tImplicit_With is Yes for the unit.\n+\t* sem_ch12.adb (Inherit_Context): Only add a unit in the context\n+\tif it is not there yet.\n+\t* sinfo.ads: New flag Implicit_With_From_Instantiation (Flag12)\n+\tadded.\n+\n 2012-04-02  Yannick Moy  <moy@adacore.com>\n \n \t* osint.adb, osint.ads (Add_Default_Search_Dirs): Add library"}, {"sha": "28307ac72a489cc67b3314223a6efe5833d01100", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,6 +55,7 @@ package body ALI is\n       'X'    => True,   -- xref\n       'S'    => True,   -- specific dispatching\n       'Y'    => True,   -- limited_with\n+      'Z'    => True,   -- implicit with from instantiation\n       'C'    => True,   -- SCO information\n       'F'    => True,   -- Alfa information\n       others => False);\n@@ -782,7 +783,8 @@ package body ALI is\n       --  Acquire lines to be ignored\n \n       if Read_Xref then\n-         Ignore := ('U' | 'W' | 'Y' | 'D' | 'X' => False, others => True);\n+         Ignore :=\n+           ('U' | 'W' | 'Y' | 'Z' | 'D' | 'X' => False, others => True);\n \n       --  Read_Lines parameter given\n \n@@ -1717,7 +1719,7 @@ package body ALI is\n \n          With_Loop : loop\n             Check_Unknown_Line;\n-            exit With_Loop when C /= 'W' and then C /= 'Y';\n+            exit With_Loop when C /= 'W' and then C /= 'Y' and then C /= 'Z';\n \n             if Ignore ('W') then\n                Skip_Line;\n@@ -1733,6 +1735,8 @@ package body ALI is\n                Withs.Table (Withs.Last).Elab_All_Desirable := False;\n                Withs.Table (Withs.Last).SAL_Interface      := False;\n                Withs.Table (Withs.Last).Limited_With       := (C = 'Y');\n+               Withs.Table (Withs.Last).Implicit_With_From_Instantiation\n+                                                           := (C = 'Z');\n \n                --  Generic case with no object file available\n "}, {"sha": "39943c4fcc7c0bb703b1d7fc09278f29faeb9fe6", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -558,6 +558,9 @@ package ALI is\n \n       Limited_With : Boolean := False;\n       --  True if unit is named in a limited_with_clause\n+\n+      Implicit_With_From_Instantiation : Boolean := False;\n+      --  True if this is an implicit with from a generic instantiation\n    end record;\n \n    package Withs is new Table.Table ("}, {"sha": "024af66479c6748310ad6fac0c51e49767a2ea17", "filename": "gcc/ada/csinfo.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fcsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fcsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcsinfo.adb?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -218,6 +218,7 @@ begin\n    Set (Special, \"Has_Dynamic_Range_Check\",   True);\n    Set (Special, \"Has_Dynamic_Length_Check\",  True);\n    Set (Special, \"Has_Private_View\",          True);\n+   Set (Special, \"Implicit_With_From_Instantiation\", True);\n    Set (Special, \"Is_Controlling_Actual\",     True);\n    Set (Special, \"Is_Overloaded\",             True);\n    Set (Special, \"Is_Static_Expression\",      True);"}, {"sha": "e25355bfc30311bf96aa8037c1389a2a82f23df2", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -196,6 +196,10 @@ package body Lib.Writ is\n       Elab_All_Des_Flags : array (Units.First .. Last_Unit) of Boolean;\n       --  Array of flags to show which units have Elaborate_All_Desirable set\n \n+      type Yes_No is (Unknown, Yes, No);\n+\n+      Implicit_With : array (Units.First .. Last_Unit) of Yes_No;\n+\n       Sdep_Table : Unit_Ref_Table (1 .. Pos (Last_Unit - Units.First + 2));\n       --  Sorted table of source dependencies. One extra entry in case we\n       --  have to add a dummy entry for System.\n@@ -276,6 +280,15 @@ package body Lib.Writ is\n                else\n                   Set_From_With_Type (Cunit_Entity (Unum));\n                end if;\n+\n+               if Implicit_With (Unum) /= Yes then\n+                  if Implicit_With_From_Instantiation (Item) then\n+                     Implicit_With (Unum) := Yes;\n+\n+                  else\n+                     Implicit_With (Unum) := No;\n+                  end if;\n+               end if;\n             end if;\n \n             Next (Item);\n@@ -552,6 +565,7 @@ package body Lib.Writ is\n             Elab_All_Flags     (J) := False;\n             Elab_Des_Flags     (J) := False;\n             Elab_All_Des_Flags (J) := False;\n+            Implicit_With      (J) := Unknown;\n          end loop;\n \n          Collect_Withs (Unode);\n@@ -770,10 +784,14 @@ package body Lib.Writ is\n             Uname  := Units.Table (Unum).Unit_Name;\n             Fname  := Units.Table (Unum).Unit_File_Name;\n \n-            if Ekind (Cunit_Entity (Unum)) = E_Package\n+            if Implicit_With (Unum) = Yes then\n+               Write_Info_Initiate ('Z');\n+\n+            elsif Ekind (Cunit_Entity (Unum)) = E_Package\n               and then From_With_Type (Cunit_Entity (Unum))\n             then\n                Write_Info_Initiate ('Y');\n+\n             else\n                Write_Info_Initiate ('W');\n             end if;"}, {"sha": "b6595b336a41466bad15f12e78899ae5370db09f", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -1031,6 +1031,15 @@ package body Lib.Xref is\n             Ref := Original_Location (Sloc (Nod));\n             Def := Original_Location (Sloc (Ent));\n \n+            --  If this is an operator symbol, skip the initial\n+            --  quote, for navigation purposes.\n+\n+            if Nkind (N) = N_Defining_Operator_Symbol\n+              or else Nkind (Nod) = N_Operator_Symbol\n+            then\n+               Ref := Ref + 1;\n+            end if;\n+\n             Add_Entry\n               ((Ent      => Ent,\n                 Loc       => Ref,\n@@ -1718,11 +1727,24 @@ package body Lib.Xref is\n          --  since at the time the reference or definition is made, private\n          --  types may be swapped, and the Sloc value may be incorrect. We\n          --  also set up the pointer vector for the sort.\n+         --  For user-defined operators we need to skip the initial\n+         --  quote and point to the first character of the name, for\n+         --  navigation purposes.\n \n          for J in 1 .. Nrefs loop\n-            Rnums (J) := J;\n-            Xrefs.Table (J).Def :=\n-              Original_Location (Sloc (Xrefs.Table (J).Key.Ent));\n+            declare\n+               E   : constant Entity_Id  := Xrefs.Table (J).Key.Ent;\n+               Loc : constant Source_Ptr := Original_Location (Sloc (E));\n+\n+            begin\n+               Rnums (J) := J;\n+\n+               if Nkind (E) = N_Defining_Operator_Symbol then\n+                  Xrefs.Table (J).Def := Loc + 1;\n+               else\n+                  Xrefs.Table (J).Def := Loc;\n+               end if;\n+            end;\n          end loop;\n \n          --  Sort the references"}, {"sha": "c8c75f2ff72f2b2f4e22db71476f19fc5eeba92a", "filename": "gcc/ada/s-atopri.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fs-atopri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fs-atopri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atopri.ads?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -29,6 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  ??? Need header saying what this unit is!!!\n+\n package System.Atomic_Primitives is\n    pragma Preelaborate;\n "}, {"sha": "d0525633681d76e6258f9425b2b5522875086b46", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -7761,6 +7761,9 @@ package body Sem_Ch12 is\n       Item            : Node_Id;\n       New_I           : Node_Id;\n \n+      Clause : Node_Id;\n+      OK     : Boolean;\n+\n    begin\n       if Nkind (Parent (Gen_Decl)) = N_Compilation_Unit then\n \n@@ -7782,17 +7785,30 @@ package body Sem_Ch12 is\n          while Present (Item) loop\n             if Nkind (Item) = N_With_Clause then\n \n-               --  Take care to prevent direct cyclic with's, which can happen\n-               --  if the generic body with's the current unit. Such a case\n-               --  would result in binder errors (or run-time errors if the\n-               --  -gnatE switch is in effect), but we want to prevent it here,\n-               --  because Sem.Walk_Library_Items doesn't like cycles. Note\n-               --  that we don't bother to detect indirect cycles.\n+               --  Take care to prevent direct cyclic with's.\n \n                if Library_Unit (Item) /= Current_Unit then\n-                  New_I := New_Copy (Item);\n-                  Set_Implicit_With (New_I, True);\n-                  Append (New_I, Current_Context);\n+                  --  Do not add a unit if it is already in the context\n+\n+                  Clause := First (Current_Context);\n+                  OK := True;\n+                  while Present (Clause) loop\n+                     if Nkind (Clause) = N_With_Clause and then\n+                       Chars (Name (Clause)) = Chars (Name (Item))\n+                     then\n+                        OK := False;\n+                        exit;\n+                     end if;\n+\n+                     Next (Clause);\n+                  end loop;\n+\n+                  if OK then\n+                     New_I := New_Copy (Item);\n+                     Set_Implicit_With (New_I, True);\n+                     Set_Implicit_With_From_Instantiation (New_I, True);\n+                     Append (New_I, Current_Context);\n+                  end if;\n                end if;\n             end if;\n "}, {"sha": "b5255177b2c0c3122aa73e89fc0b8a92369e0d20", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -752,11 +752,10 @@ package body Sem_Util is\n \n       Bas := Base_Type (T);\n \n-      --  If T is non-private but its base type is private, this is\n-      --  the completion of a subtype declaration whose parent type\n-      --  is private (see Complete_Private_Subtype in sem_ch3). The\n-      --  proper discriminants are to be found in the full view of\n-      --  the base.\n+      --  If T is non-private but its base type is private, this is the\n+      --  completion of a subtype declaration whose parent type is private\n+      --  (see Complete_Private_Subtype in Sem_Ch3). The proper discriminants\n+      --  are to be found in the full view of the base.\n \n       if Is_Private_Type (Bas) and then Present (Full_View (Bas)) then\n          Bas := Full_View (Bas);\n@@ -783,10 +782,10 @@ package body Sem_Util is\n          Decl :=\n            Make_Subtype_Declaration (Loc,\n              Defining_Identifier => Act,\n-             Subtype_Indication =>\n+             Subtype_Indication  =>\n                Make_Subtype_Indication (Loc,\n                  Subtype_Mark => New_Occurrence_Of (Bas, Loc),\n-                 Constraint =>\n+                 Constraint   =>\n                    Make_Index_Or_Discriminant_Constraint (Loc,\n                      Constraints => Constraints)));\n \n@@ -813,8 +812,8 @@ package body Sem_Util is\n       --  of the prefix.\n \n       function Build_Discriminal_Record_Constraint return List_Id;\n-      --  Similar to previous one, for discriminated components constrained\n-      --  by the discriminant of the enclosing object.\n+      --  Similar to previous one, for discriminated components constrained by\n+      --  the discriminant of the enclosing object.\n \n       ----------------------------------------\n       -- Build_Discriminal_Array_Constraint --\n@@ -970,12 +969,7 @@ package body Sem_Util is\n       --  and thus will not have the unit name automatically prepended.\n \n       Set_Package_Name (Spec_Id);\n-\n-      --  Append _E\n-\n-      Name_Buffer (Name_Len + 1) := '_';\n-      Name_Buffer (Name_Len + 2) := 'E';\n-      Name_Len := Name_Len + 2;\n+      Add_Str_To_Name_Buffer (\"_E\");\n \n       --  Create elaboration counter\n \n@@ -1001,9 +995,9 @@ package body Sem_Util is\n       Set_Current_Value    (Elab_Ent, Empty);\n       Set_Last_Assignment  (Elab_Ent, Empty);\n \n-      --  We do not want any further qualification of the name (if we did\n-      --  not do this, we would pick up the name of the generic package\n-      --  in the case of a library level generic instantiation).\n+      --  We do not want any further qualification of the name (if we did not\n+      --  do this, we would pick up the name of the generic package in the case\n+      --  of a library level generic instantiation).\n \n       Set_Has_Qualified_Name       (Elab_Ent);\n       Set_Has_Fully_Qualified_Name (Elab_Ent);\n@@ -1088,8 +1082,7 @@ package body Sem_Util is\n                then\n                   return False;\n                else\n-                  return\n-                    Cannot_Raise_Constraint_Error (Expression (Expr));\n+                  return Cannot_Raise_Constraint_Error (Expression (Expr));\n                end if;\n \n             when N_Unchecked_Type_Conversion =>\n@@ -1099,8 +1092,7 @@ package body Sem_Util is\n                if Do_Overflow_Check (Expr) then\n                   return False;\n                else\n-                  return\n-                    Cannot_Raise_Constraint_Error (Right_Opnd (Expr));\n+                  return Cannot_Raise_Constraint_Error (Right_Opnd (Expr));\n                end if;\n \n             when N_Op_Divide |\n@@ -1157,8 +1149,7 @@ package body Sem_Util is\n    -- Check_Implicit_Dereference --\n    --------------------------------\n \n-   procedure Check_Implicit_Dereference (Nam : Node_Id;  Typ : Entity_Id)\n-   is\n+   procedure Check_Implicit_Dereference (Nam : Node_Id;  Typ : Entity_Id) is\n       Disc  : Entity_Id;\n       Desig : Entity_Id;\n "}, {"sha": "a89f9b2626914caef60eb082b9f892f30be56266", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -1624,6 +1624,14 @@ package body Sinfo is\n       return Flag16 (N);\n    end Implicit_With;\n \n+   function Implicit_With_From_Instantiation\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      return Flag12 (N);\n+   end Implicit_With_From_Instantiation;\n+\n    function Interface_List\n       (N : Node_Id) return List_Id is\n    begin\n@@ -4704,6 +4712,14 @@ package body Sinfo is\n       Set_Flag16 (N, Val);\n    end Set_Implicit_With;\n \n+   procedure Set_Implicit_With_From_Instantiation\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      Set_Flag12 (N, Val);\n+   end Set_Implicit_With_From_Instantiation;\n+\n    procedure Set_Interface_List\n       (N : Node_Id; Val : List_Id) is\n    begin"}, {"sha": "fa7dbee35aa994557d4fe3b908acb42d227bfc4b", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=cf5ba8a881c32483bc11e05cc1ee3bcc990d32c6", "patch": "@@ -1226,6 +1226,9 @@ package Sinfo is\n    --    'Address or 'Tag attribute. ???There are other implicit with clauses\n    --    as well.\n \n+   --  Implicit_With_From_Instantiation (Flag12-Sem)\n+   --     Set in N_With_Clause nodes from generic instantiations.\n+\n    --  Import_Interface_Present (Flag16-Sem)\n    --     This flag is set in an Interface or Import pragma if a matching\n    --     pragma of the other kind is also present. This is used to avoid\n@@ -5805,6 +5808,7 @@ package Sinfo is\n       --  Elaborate_Desirable (Flag11-Sem)\n       --  Private_Present (Flag15) set if with_clause has private keyword\n       --  Implicit_With (Flag16-Sem)\n+      --  Implicit_With_From_Instantiation (Flag12-Sem)\n       --  Limited_Present (Flag17) set if LIMITED is present\n       --  Limited_View_Installed (Flag18-Sem)\n       --  Unreferenced_In_Spec (Flag7-Sem)\n@@ -8592,6 +8596,9 @@ package Sinfo is\n    function Implicit_With\n      (N : Node_Id) return Boolean;    -- Flag16\n \n+   function Implicit_With_From_Instantiation\n+     (N : Node_Id) return Boolean;    -- Flag12\n+\n    function Import_Interface_Present\n      (N : Node_Id) return Boolean;    -- Flag16\n \n@@ -9573,6 +9580,9 @@ package Sinfo is\n    procedure Set_Implicit_With\n      (N : Node_Id; Val : Boolean := True);    -- Flag16\n \n+   procedure Set_Implicit_With_From_Instantiation\n+     (N : Node_Id; Val : Boolean := True);    -- Flag12\n+\n    procedure Set_Import_Interface_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag16\n \n@@ -11959,6 +11969,7 @@ package Sinfo is\n    pragma Inline (High_Bound);\n    pragma Inline (Identifier);\n    pragma Inline (Implicit_With);\n+   pragma Inline (Implicit_With_From_Instantiation);\n    pragma Inline (Interface_List);\n    pragma Inline (Interface_Present);\n    pragma Inline (Includes_Infinities);"}]}