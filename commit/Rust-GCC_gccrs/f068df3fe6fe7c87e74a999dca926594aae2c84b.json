{"sha": "f068df3fe6fe7c87e74a999dca926594aae2c84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2OGRmM2ZlNmZlN2M4N2U3NGE5OTlkY2E5MjY1OTRhYWUyYzg0Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-09-19T18:21:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-19T18:21:54Z"}, "message": "* cfgbuild.c (find_sub_basic_blocks): Handle insns that can throw.\n\nFrom-SVN: r45690", "tree": {"sha": "a7165cfac0ddf618bbba11aa0006439906d84fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7165cfac0ddf618bbba11aa0006439906d84fc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f068df3fe6fe7c87e74a999dca926594aae2c84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f068df3fe6fe7c87e74a999dca926594aae2c84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f068df3fe6fe7c87e74a999dca926594aae2c84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f068df3fe6fe7c87e74a999dca926594aae2c84b/comments", "author": null, "committer": null, "parents": [{"sha": "e8f92467349219338deedbab140f3e8e67034ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f92467349219338deedbab140f3e8e67034ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f92467349219338deedbab140f3e8e67034ade"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "1ce093610ce9152b3a15d316f972f66008721130", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f068df3fe6fe7c87e74a999dca926594aae2c84b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f068df3fe6fe7c87e74a999dca926594aae2c84b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f068df3fe6fe7c87e74a999dca926594aae2c84b", "patch": "@@ -1,3 +1,7 @@\n+2001-09-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* cfgbuild.c (find_sub_basic_blocks): Handle insns that can throw.\n+\n 2001-09-18  Catherine Moore  <clm@redhat.com>\n \n \t* config/stormy16/stormy16.h (DEFAULT_PCC_STRUCT_RETURN): "}, {"sha": "d6e96e78d6c117eb4e0d29b86093a72dbc7c10b8", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f068df3fe6fe7c87e74a999dca926594aae2c84b/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f068df3fe6fe7c87e74a999dca926594aae2c84b/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=f068df3fe6fe7c87e74a999dca926594aae2c84b", "patch": "@@ -671,8 +671,8 @@ find_sub_basic_blocks (bb)\n {\n   rtx insn = bb->head;\n   rtx end = bb->end;\n-  rtx jump_insn = NULL_RTX;\n-  edge falltru = 0;\n+  rtx flow_transfer_insn = NULL_RTX;\n+  edge fallthru = NULL;\n   basic_block first_bb = bb;\n   int i;\n \n@@ -686,44 +686,66 @@ find_sub_basic_blocks (bb)\n   while (1)\n     {\n       enum rtx_code code = GET_CODE (insn);\n+\n       switch (code)\n \t{\n \tcase BARRIER:\n-\t  if (!jump_insn)\n+\t  if (!flow_transfer_insn)\n \t    abort ();\n \t  break;\n+\n \t/* On code label, split current basic block.  */\n \tcase CODE_LABEL:\n-\t  falltru = split_block (bb, PREV_INSN (insn));\n-\t  if (jump_insn)\n-\t    bb->end = jump_insn;\n-\t  bb = falltru->dest;\n-\t  remove_edge (falltru);\n-\t  jump_insn = 0;\n+\t  fallthru = split_block (bb, PREV_INSN (insn));\n+\t  if (flow_transfer_insn)\n+\t    bb->end = flow_transfer_insn;\n+\t  bb = fallthru->dest;\n+\t  remove_edge (fallthru);\n+\t  flow_transfer_insn = NULL_RTX;\n \t  if (LABEL_ALTERNATE_NAME (insn))\n \t    make_edge (ENTRY_BLOCK_PTR, bb, 0);\n \t  break;\n+\n \tcase INSN:\n \tcase JUMP_INSN:\n-\t  /* In case we've previously split insn on the JUMP_INSN, move the\n-\t     block header to proper place.  */\n-\t  if (jump_insn)\n+\tcase CALL_INSN:\n+\t  /* In case we've previously split an insn that effects a control\n+\t     flow transfer, move the block header to proper place.  */\n+\t  if (flow_transfer_insn)\n \t    {\n-\t      falltru = split_block (bb, PREV_INSN (insn));\n-\t      bb->end = jump_insn;\n-\t      bb = falltru->dest;\n-\t      remove_edge (falltru);\n-\t      jump_insn = 0;\n+\t      fallthru = split_block (bb, PREV_INSN (insn));\n+\t      bb->end = flow_transfer_insn;\n+\t      bb = fallthru->dest;\n+\t      remove_edge (fallthru);\n+\t      flow_transfer_insn = NULL_RTX;\n \t    }\n+\n \t  /* We need some special care for those expressions.  */\n-\t  if (GET_CODE (insn) == JUMP_INSN)\n+\t  if (code == JUMP_INSN)\n \t    {\n \t      if (GET_CODE (PATTERN (insn)) == ADDR_VEC\n \t\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC)\n \t\tabort();\n-\t      jump_insn = insn;\n+\t      flow_transfer_insn = insn;\n+\t    }\n+\t  else if (code == CALL_INSN)\n+\t    {\n+\t      rtx note;\n+\t      if (nonlocal_goto_handler_labels\n+\t\t  && (!(note = find_reg_note (insn, REG_EH_REGION, NULL_RTX))\n+\t\t      || INTVAL (XEXP (note, 0)) >= 0))\n+\t\tflow_transfer_insn = insn;\n+\t      else if (can_throw_internal (insn))\n+\t\tflow_transfer_insn = insn;\n+\t      else if (SIBLING_CALL_P (insn))\n+\t\tflow_transfer_insn = insn;\n+\t      else if (find_reg_note (insn, REG_NORETURN, 0))\n+\t\tflow_transfer_insn = insn;\n \t    }\n+\t  else if (flag_non_call_exceptions && can_throw_internal (insn))\n+\t    flow_transfer_insn = insn;\n \t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -735,8 +757,8 @@ find_sub_basic_blocks (bb)\n   /* In case expander replaced normal insn by sequence terminating by\n      return and barrier, or possibly other sequence not behaving like\n      ordinary jump, we need to take care and move basic block boundary.  */\n-  if (jump_insn && GET_CODE (bb->end) != JUMP_INSN)\n-    bb->end = jump_insn;\n+  if (flow_transfer_insn)\n+    bb->end = flow_transfer_insn;\n \n   /* We've possibly replaced the conditional jump by conditional jump\n      followed by cleanup at fallthru edge, so the outgoing edges may"}]}