{"sha": "bc03b358a0a7f5acbc38c0e650ea5063080191ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwM2IzNThhMGE3ZjVhY2JjMzhjMGU2NTBlYTUwNjMwODAxOTFlZg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-07-16T02:11:33Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-07-16T02:11:33Z"}, "message": "configure.in: Move as much as possible below AC_CANONICAL_SYSTEM.\n\n\t* configure.in: Move as much as possible below AC_CANONICAL_SYSTEM.\n\tIntroduce _GCC_TOPLEV_NONCANONICAL_TARGET.\n\t* acinclude.m4: Include acx.m4.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r84797", "tree": {"sha": "512c3db45acc6004efc120a01cb9b22ad99bc85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/512c3db45acc6004efc120a01cb9b22ad99bc85c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc03b358a0a7f5acbc38c0e650ea5063080191ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc03b358a0a7f5acbc38c0e650ea5063080191ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc03b358a0a7f5acbc38c0e650ea5063080191ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc03b358a0a7f5acbc38c0e650ea5063080191ef/comments", "author": null, "committer": null, "parents": [{"sha": "aaaa46d2b0cb797b68b079e6f7b9deb5bcb4a774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaa46d2b0cb797b68b079e6f7b9deb5bcb4a774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaaa46d2b0cb797b68b079e6f7b9deb5bcb4a774"}], "stats": {"total": 936, "additions": 483, "deletions": 453}, "files": [{"sha": "b5235cfe88f45f25e608de19dea7c78e1866f397", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bc03b358a0a7f5acbc38c0e650ea5063080191ef", "patch": "@@ -1,3 +1,11 @@\n+2004-07-15  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* configure.in: Move as much as possible below AC_CANONICAL_SYSTEM.\n+\tIntroduce _GCC_TOPLEV_NONCANONICAL_TARGET.\n+\t* acinclude.m4: Include acx.m4.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\n 2004-07-15  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tPR libgcj/16574"}, {"sha": "c996a1eddb4f59abb4fd6a2c9ec5615c39cadbd4", "filename": "libjava/acinclude.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Facinclude.m4?ref=bc03b358a0a7f5acbc38c0e650ea5063080191ef", "patch": "@@ -1,4 +1,5 @@\n sinclude(../config/accross.m4)\n+sinclude(../config/acx.m4)\n \n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring libtool.m4"}, {"sha": "f4c52e34dd78e80fa1394d24b02b25a2c48d8af8", "filename": "libjava/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Faclocal.m4?ref=bc03b358a0a7f5acbc38c0e650ea5063080191ef", "patch": "@@ -11,6 +11,7 @@ dnl even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n dnl PARTICULAR PURPOSE.\n \n sinclude(../config/accross.m4)\n+sinclude(../config/acx.m4)\n \n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring libtool.m4"}, {"sha": "9bd59274075f77a53f1103f91a4ad869e2305ae4", "filename": "libjava/configure", "status": "modified", "additions": 435, "deletions": 418, "changes": 853, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=bc03b358a0a7f5acbc38c0e650ea5063080191ef"}, {"sha": "33f240ee979e7753c40f763d9a0f4667a7b6296f", "filename": "libjava/configure.in", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc03b358a0a7f5acbc38c0e650ea5063080191ef/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=bc03b358a0a7f5acbc38c0e650ea5063080191ef", "patch": "@@ -2,44 +2,10 @@ dnl Process this with autoconf to create configure\n AC_PREREQ(2.13)\n AC_INIT(java/lang/System.java)\n \n-# This works around the fact that libtool configuration may change LD\n-# for this particular configuration, but some shells, instead of\n-# keeping the changes in LD private, export them just because LD is\n-# exported.\n-ORIGINAL_LD_FOR_MULTILIBS=$LD\n-\n-AC_PROG_LN_S\n-\n dnl We use these options to decide which functions to include.\n AC_ARG_WITH(target-subdir,\n [  --with-target-subdir=SUBDIR\n                            configuring in a subdirectory])\n-AC_ARG_WITH(cross-host,\n-[  --with-cross-host=HOST  configuring with a cross compiler])\n-\n-AC_ARG_WITH(newlib,\n-[  --with-newlib           Configuring with newlib])\n-\n-AC_ARG_ENABLE(version-specific-runtime-libs,\n-[  --enable-version-specific-runtime-libs    \n-   specify that runtime libraries should be installed in a compiler-specific\n-   directory ],\n-    [case \"$enableval\" in\n-      yes) version_specific_libs=yes ;;\n-      no)  version_specific_libs=no ;;\n-      *)   AC_MSG_ERROR([Unknown argument to enable/disable version-specific libs]);;\n-     esac],\n-    [version_specific_libs=no]\n-)\n-\n-dnl Default to --enable-multilib\n-AC_ARG_ENABLE(multilib,\n-[  --enable-multilib       build many library versions (default)],\n-[case \"${enableval}\" in\n-  yes) multilib=yes ;;\n-  no)  multilib=no ;;\n-  *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n- esac], [multilib=yes])dnl\n \n dnl We may get other options which we don't document:\n dnl --with-target-subdir, --with-multisrctop, --with-multisubdir\n@@ -73,11 +39,48 @@ if :; then :; else\n   AC_CONFIG_AUX_DIR(..)\n fi\n \n+AC_CANONICAL_SYSTEM\n+\n+_GCC_TOPLEV_NONCANONICAL_TARGET\n+\n+# This works around the fact that libtool configuration may change LD\n+# for this particular configuration, but some shells, instead of\n+# keeping the changes in LD private, export them just because LD is\n+# exported.\n+ORIGINAL_LD_FOR_MULTILIBS=$LD\n+\n+AC_PROG_LN_S\n+\n # This works around an automake problem.\n mkinstalldirs=\"`cd $ac_aux_dir && ${PWDCMD-pwd}`/mkinstalldirs\"\n AC_SUBST(mkinstalldirs)\n \n-AC_CANONICAL_SYSTEM\n+AC_ARG_WITH(cross-host,\n+[  --with-cross-host=HOST  configuring with a cross compiler])\n+\n+AC_ARG_WITH(newlib,\n+[  --with-newlib           Configuring with newlib])\n+\n+AC_ARG_ENABLE(version-specific-runtime-libs,\n+[  --enable-version-specific-runtime-libs    \n+   specify that runtime libraries should be installed in a compiler-specific\n+   directory ],\n+    [case \"$enableval\" in\n+      yes) version_specific_libs=yes ;;\n+      no)  version_specific_libs=no ;;\n+      *)   AC_MSG_ERROR([Unknown argument to enable/disable version-specific libs]);;\n+     esac],\n+    [version_specific_libs=no]\n+)\n+\n+dnl Default to --enable-multilib\n+AC_ARG_ENABLE(multilib,\n+[  --enable-multilib       build many library versions (default)],\n+[case \"${enableval}\" in\n+  yes) multilib=yes ;;\n+  no)  multilib=no ;;\n+  *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n+ esac], [multilib=yes])dnl\n \n dnl This shouldn't be needed, as long as top-level dependencies are\n dnl defined correctly and shared-library paths are set up so that"}]}