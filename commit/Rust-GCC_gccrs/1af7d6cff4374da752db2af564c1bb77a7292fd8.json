{"sha": "1af7d6cff4374da752db2af564c1bb77a7292fd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmN2Q2Y2ZmNDM3NGRhNzUyZGIyYWY1NjRjMWJiNzdhNzI5MmZkOA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-01-20T00:55:09Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-01-20T00:55:09Z"}, "message": "tests_flags.in: Just output the bare minimum to run tests.\n\n2001-01-20  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* tests_flags.in: Just output the bare minimum to run tests.\n\tLet's the caller do its own arrangement.\n\n\t* mkcheck.in: Rename INC_PATH to INCLUDES.  Adjust flags\n\tcomputations.\n\nFrom-SVN: r39148", "tree": {"sha": "43b07f1c9ff82f68c28fc9a7a8ea26a7fb7b9045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b07f1c9ff82f68c28fc9a7a8ea26a7fb7b9045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af7d6cff4374da752db2af564c1bb77a7292fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af7d6cff4374da752db2af564c1bb77a7292fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af7d6cff4374da752db2af564c1bb77a7292fd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af7d6cff4374da752db2af564c1bb77a7292fd8/comments", "author": null, "committer": null, "parents": [{"sha": "1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "b60a645a098ad2051d920b3f1580afb0ea8ab45f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af7d6cff4374da752db2af564c1bb77a7292fd8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af7d6cff4374da752db2af564c1bb77a7292fd8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1af7d6cff4374da752db2af564c1bb77a7292fd8", "patch": "@@ -1,3 +1,11 @@\n+2001-01-20  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* tests_flags.in: Just output the bare minimum to run tests.\n+\tLet's the caller do its own arrangement.\n+\n+\t* mkcheck.in: Rename INC_PATH to INCLUDES.  Adjust flags\n+\tcomputations.\n+\n 2001-01-19  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* testsuite/17_intro: Prepare testcases for new style DejaGnu"}, {"sha": "6b5ae31cc08ced4cd9b4b225290baa53ae6a26d8", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af7d6cff4374da752db2af564c1bb77a7292fd8/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af7d6cff4374da752db2af564c1bb77a7292fd8/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=1af7d6cff4374da752db2af564c1bb77a7292fd8", "patch": "@@ -53,9 +53,18 @@ esac\n saved_ifs=$IFS\n IFS=':'\n set `./tests_flags ${query} $*` || exit 1\n-BUILD_DIR=$1; SRC_DIR=$2; PREFIX_DIR=$3; LTCXX=$4; LIBS=$5; LTEXE=$6; CXX=$7; CXXFLAGS=$8;\n+BUILD_DIR=$1; SRC_DIR=$2; PREFIX_DIR=$3; CXX=$4; CXXFLAGS=$5; INCLUDES=$6; LIBS=$7;\n IFS=$saved_ifs\n \n+# Build libtoolized surrogates to compile and run testcases.  Also,\n+# adjust CXX so that the newly built compiler can find headers.\n+if [ x$WHICH = x0 ] ; then\n+    CXX=\"$CXX -B`dirname $CXX`/\"\n+fi\n+LIBTOOL=\"$BUILD_DIR/libtool\"\n+LTEXE=\"$LIBTOOL --mode=execute\"\n+LTCXX=\"$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $INCLUDES $LIBS\"\n+\n # specific libtool flag(s) to force the use of shared libraries, if any\n SH_FLAG=\n \n@@ -310,7 +319,7 @@ test_file()\n     # and harder as we try compiling at, say, top of the hour; we would\n     # eventually have to calculate time_t anyhow.  Or 3) just grab two\n     # time_t's (no more overhead than grabbing two date(1)'s).\n-    compiler_invocation=\"$LTCXX $S_FLAG $SRC_NAME -o $EXENAME $LIBS\"\n+    compiler_invocation=\"$LTCXX $S_FLAG $SRC_NAME -o $EXENAME\"\n     COMP_TIME_START=$($TIMER_COMMAND)\n     $compiler_invocation >> compile.out 2>&1\n     COMP_TIME_END=$($TIMER_COMMAND)"}, {"sha": "b82fe567c05baf5c2df7e83eeed6d7cbd8212117", "filename": "libstdc++-v3/tests_flags.in", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af7d6cff4374da752db2af564c1bb77a7292fd8/libstdc%2B%2B-v3%2Ftests_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af7d6cff4374da752db2af564c1bb77a7292fd8/libstdc%2B%2B-v3%2Ftests_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftests_flags.in?ref=1af7d6cff4374da752db2af564c1bb77a7292fd8", "patch": "@@ -3,8 +3,8 @@\n #\n # This script computes the various flags needed to run GNU C++ testsuites\n # (compiler specific as well as library specific).  It is based on \n-# the ./mkcheck.in, which in the long will be removed in favor of a\n-# DejaGnu-base framework.\n+# the file ./mkcheck.in, which in the long will be removed in favor of a\n+# DejaGnu-based framework.\n #\n # Written by Gabriel Dos Reis <gdr@codesourcery.com>\n #\n@@ -21,16 +21,15 @@\n #     \n #      Returns a colon-separated list of space-separated list of flags,\n #      needed to run library specific tests,\n-#      BUILD_DIR:SRC_DIR:PREFIX_DIR:LTCXX:LIBS:LTEXE:CXX:CXXFLAGS \n+#      BUILD_DIR:SRC_DIR:PREFIX_DIR:CXX:CXXFLAGS:INCLUDES:LIBS \n #      the meaning of which is as follows:\n #        BUILD_DIR   build-dir\n #        SRC_DIR     src-dir\n #        PREFIX_DIR  install-dir (meaningful only with --installed-library)\n-#        LTCXX       libtoolized command to compile a C++ program\n+#        CXX         which C++ compiler is being used\n+#        CXXFLAGS    special flags to pass to g++\n+#        INCLUDES    paths to headers\n #        LIBS        flags to pass to the linker\n-#        LTEXE       libtoolized command to run a compiled C++ program\n-#\t CXX         which C++ compiler is being used\n-#        CXXFLAGS    special C++ flags used\n #\n \n ##\n@@ -97,31 +96,26 @@ case ${query} in\n     ;;\n esac\n \n-# This is LIBTOOL=@LIBTOOL@ piped through a bit of sanity that we can\n-# assume for this script (by the time we run this).\n-LIBTOOL=\"${BUILD_DIR}/libtool\"\n-chmod u+x ${LIBTOOL}\n-\n # Compute include paths\n-# INC_PATH == include path to new headers for use on gcc command-line\n+# INCLUDES == include path to new headers for use on gcc command-line\n top_srcdir=@top_srcdir@\n C_DIR=\"`basename  @C_INCLUDE_DIR@`\"\n case ${query} in\n     --installed-library)\n-    INC_PATH=\"-I${SRC_DIR}/testsuite\"\n+    INCLUDES=\"-I${SRC_DIR}/testsuite\"\n     ;;\n     *)\n-    INC_PATH=\"-nostdinc++ @CSHADOW_FLAGS@ -I${BUILD_DIR}/include\n+    INCLUDES=\"-nostdinc++ @CSHADOW_FLAGS@ -I${BUILD_DIR}/include\n \t      -I${SRC_DIR}/include/std  -I${SRC_DIR}/include/$C_DIR\n \t      -I${SRC_DIR}/include -I${SRC_DIR}/libsupc++ -I${SRC_DIR}/libio \n \t      -I${SRC_DIR}/testsuite\"\n     ;;\n esac\n \n-# If called for compiler tests, just output include paths\n+# If called for compiler tests, just output appropriate include paths\n case ${query} in\n     --compiler)\n-    echo ${INC_PATH} -I${SRC_DIR}/include/backward -I${SRC_DIR}/include/ext\n+    echo ${INCLUDES} -I${SRC_DIR}/include/backward -I${SRC_DIR}/include/ext\n     exit 0\n     ;;\n esac\n@@ -130,11 +124,11 @@ esac\n . ${top_srcdir}/configure.target\n \n # LIB_PATH == where to find the build libraries for libtool's use\n-# CXX == how to call the compiler\n+# CXX == the full pathname of the compiler\n case ${query} in\n     --built-library)\n     LIB_PATH=${BUILD_DIR}/src\n-    CXX=\"${BUILD_DIR}/../../gcc/g++ -B${BUILD_DIR}/../../gcc/\"\n+    CXX=\"${BUILD_DIR}/../../gcc/g++\"\n     ;;\n     --installed-library)\n     LIB_PATH=${PREFIX_DIR}/lib\n@@ -146,30 +140,22 @@ esac\n # but thst's really meant for building the library itself, not using it)\n CXXFLAGS=\"-ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n \n-# LTCXX == how to call libtool when creating an executable\n # LIBS == any extra needed -l switches, etc (may need more libs, lose lose)\n case ${query} in\n     --built-library)\n-    LTCXX=\"${LIBTOOL} --tag=CXX --mode=link ${CXX} ${CXXFLAGS} ${INC_PATH} \n-\t   ${LIB_PATH}/../libsupc++/libsupc++.la  ${LIB_PATH}/libstdc++.la\n-\t   -no-install\"\n-    LTEXE=\"${LIBTOOL} --mode=execute\"\n+    LIBS=\"${LIB_PATH}/../libsupc++/libsupc++.la ${LIB_PATH}/libstdc++.la\n+\t    -no-install\"\n     case @target_os@ in\n-        *cygwin*)  LIBS=\"-nodefaultlibs -lgcc -lcygwin -luser32\n+        *cygwin*)  LIBS=\"${LIBS} -nodefaultlibs -lgcc -lcygwin -luser32\n                          -lkernel32 -ladvapi32 -lshell32\" ;;\n-        *)         LIBS=\"-nodefaultlibs -lc -lgcc -lc\" ;;\n+        *)         LIBS=\"${LIBS} -nodefaultlibs -lc -lgcc -lc\" ;;\n     esac\n     ;;\n     --installed-library)\n-    # For the installed version, we really only need to use libtool and\n-    # the .la file to get correct rpaths.\n-    LTCXX=\"${LIBTOOL} --tag=CXX --mode=link ${CXX} ${CXXFLAGS} ${INC_PATH}\n-\t   -L${LIB_PATH} ${LIB_PATH}/libstdc++.la -no-install \n-\t   -rpath ${LIB_PATH}\"\n-    LTEXE=\"${LIBTOOL} --mode=execute\"\n-    LIBS=\n+    LIBS=\"-L${LIB_PATH} ${LIB_PATH}/libstdc++.la -no-install\n+\t    -rpath ${LIB_PATH}\"\n     ;;\n esac\n \n-echo ${BUILD_DIR}:${SRC_DIR}:${PREFIX_DIR}:${LTCXX}:${LIBS}:${LTEXE}:${CXX}:${CXXFLAGS}\n+echo -n ${BUILD_DIR}:${SRC_DIR}:${PREFIX_DIR}:${CXX}:${CXXFLAGS}:${INCLUDES}:${LIBS}\n exit 0"}]}