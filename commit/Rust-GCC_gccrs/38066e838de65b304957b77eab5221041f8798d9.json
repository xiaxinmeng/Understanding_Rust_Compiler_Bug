{"sha": "38066e838de65b304957b77eab5221041f8798d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwNjZlODM4ZGU2NWIzMDQ5NTdiNzdlYWI1MjIxMDQxZjg3OThkOQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2001-08-31T17:46:06Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2001-08-31T17:46:06Z"}, "message": "error.c (dump_template_decl): Output template parameters together with their specifiers.\n\n\t* error.c (dump_template_decl): Output template parameters\n\ttogether with their specifiers.\n\tOutput `class' prefix for template template parameter.\n\t(dump_decl): Fix formatting.\n\nFrom-SVN: r45329", "tree": {"sha": "f4cdbaa7c394a3e32c8931850b6a06c5753ca828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4cdbaa7c394a3e32c8931850b6a06c5753ca828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38066e838de65b304957b77eab5221041f8798d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38066e838de65b304957b77eab5221041f8798d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38066e838de65b304957b77eab5221041f8798d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38066e838de65b304957b77eab5221041f8798d9/comments", "author": null, "committer": null, "parents": [{"sha": "75b9045a65cf8716d68f0fb3561e7c930faab209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b9045a65cf8716d68f0fb3561e7c930faab209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b9045a65cf8716d68f0fb3561e7c930faab209"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "8dc0b86f5e2da9577ff73cf8dd9642aee4f54523", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38066e838de65b304957b77eab5221041f8798d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38066e838de65b304957b77eab5221041f8798d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38066e838de65b304957b77eab5221041f8798d9", "patch": "@@ -1,3 +1,10 @@\n+2001-08-31  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* error.c (dump_template_decl): Output template parameters\n+\ttogether with their specifiers.\n+\tOutput `class' prefix for template template parameter.\n+\t(dump_decl): Fix formatting.\n+\n 2001-08-30  Kurt Garloff  <garloff@suse.de>\n  \n \t* optimize.c (inlinable_function_p): Allow only smaller single"}, {"sha": "8907858ee3ac45aa7a467aad456bfbcf194f63b3", "filename": "gcc/cp/error.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38066e838de65b304957b77eab5221041f8798d9/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38066e838de65b304957b77eab5221041f8798d9/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=38066e838de65b304957b77eab5221041f8798d9", "patch": "@@ -1034,7 +1034,7 @@ dump_decl (t, flags)\n       break;\n \n     case TEMPLATE_DECL:\n-        dump_template_decl (t, flags);\n+      dump_template_decl (t, flags);\n       break;\n \n     case TEMPLATE_ID_EXPR:\n@@ -1115,6 +1115,11 @@ dump_template_decl (t, flags)\n           int len = TREE_VEC_LENGTH (inner_parms);\n \n           output_add_string (scratch_buffer, \"template<\");\n+\n+\t  /* If we've shown the template prefix, we'd better show the\n+\t     parameters' and decl's type too.  */\n+\t    flags |= TFF_DECL_SPECIFIERS;\n+\n           for (i = 0; i < len; i++)\n             {\n               if (i)\n@@ -1125,10 +1130,12 @@ dump_template_decl (t, flags)\n           output_add_space (scratch_buffer);\n         }\n       nreverse(orig_parms);\n-      /* If we've shown the template<args> prefix, we'd better show the\n-\t decl's type too.  */\n-      flags |= TFF_DECL_SPECIFIERS;\n+\n+      if (DECL_TEMPLATE_TEMPLATE_PARM_P (t))\n+\t/* Say `template<arg> class TT' not just `template<arg> TT'. */\n+\toutput_add_string (scratch_buffer, \"class \");\n     }\n+\n   if (TREE_CODE (DECL_TEMPLATE_RESULT (t)) == TYPE_DECL)\n     dump_type (TREE_TYPE (t),\n                ((flags & ~TFF_CLASS_KEY_OR_ENUM) | TFF_TEMPLATE_NAME"}]}