{"sha": "9f35e4aab57dfccf0b112c8e4cb152c8b85b081b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzNWU0YWFiNTdkZmNjZjBiMTEyYzhlNGNiMTUyYzhiODViMDgxYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-04-04T18:18:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-04-04T18:18:29Z"}, "message": "filebuf_sputn_unbuf.cc: New, adapted from libstdc++/11378.\n\n2004-04-04  Paolo Carlini  <pcarlini@suse.de>\n\t    Petur Runolfsson  <peturr02@ru.is>\n\n\t* testsuite/performance/27_io/filebuf_sputn_unbuf.cc: New,\n\tadapted from libstdc++/11378.\n\nCo-Authored-By: Petur Runolfsson <peturr02@ru.is>\n\nFrom-SVN: r80398", "tree": {"sha": "72672c22cee4a0910997d5676f644380d2f9d9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72672c22cee4a0910997d5676f644380d2f9d9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b/comments", "author": null, "committer": null, "parents": [{"sha": "6060368e54ab5fe75181716f4c7e6a3c32bdac38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6060368e54ab5fe75181716f4c7e6a3c32bdac38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6060368e54ab5fe75181716f4c7e6a3c32bdac38"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "8ff1d837c58e255de66eb49ead197a1308134701", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9f35e4aab57dfccf0b112c8e4cb152c8b85b081b", "patch": "@@ -1,3 +1,9 @@\n+2004-04-04  Paolo Carlini  <pcarlini@suse.de>\n+\t    Petur Runolfsson  <peturr02@ru.is>\n+\n+\t* testsuite/performance/27_io/filebuf_sputn_unbuf.cc: New,\n+\tadapted from libstdc++/11378.\n+\n 2004-04-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/mt_allocator.h (__mt_alloc<>::allocate): Factor out"}, {"sha": "d40e0c2513098e2b03fc54037875974a20df9fb0", "filename": "libstdc++-v3/testsuite/performance/27_io/filebuf_sputn_unbuf.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Ffilebuf_sputn_unbuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f35e4aab57dfccf0b112c8e4cb152c8b85b081b/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Ffilebuf_sputn_unbuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Ffilebuf_sputn_unbuf.cc?ref=9f35e4aab57dfccf0b112c8e4cb152c8b85b081b", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdio>\n+#include <fstream>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/11378\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int iterations = 500000;\n+  const int chunksize = 100;\n+\n+  char* chunk = new char[chunksize];\n+\n+  // C\n+  FILE* file = fopen(\"tmp\", \"w+\");\n+  setvbuf(file, 0, _IONBF, 0);\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n+    fwrite(chunk, 1, chunksize, file);\n+  stop_counters(time, resource);\n+  fclose(file);\n+  report_performance(__FILE__, \"C\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // C unlocked\n+  file = fopen(\"tmp\", \"w+\");\n+  setvbuf(file, 0, _IONBF, 0);\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n+    fwrite_unlocked(chunk, 1, chunksize, file);\n+  stop_counters(time, resource);\n+  fclose(file);\n+  report_performance(__FILE__, \"C unlocked\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // C++\n+  filebuf buf;\n+  buf.pubsetbuf(0, 0);\n+  buf.open(\"tmp\", ios_base::out | ios_base::in | ios_base::trunc);\n+  start_counters(time, resource);\n+  for (int i = 0; i < iterations; ++i)\n+    buf.sputn(chunk, chunksize);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"C++\", time, resource);\n+\n+  unlink(\"tmp\");\n+  delete [] chunk;\n+\n+  return 0;\n+}"}]}