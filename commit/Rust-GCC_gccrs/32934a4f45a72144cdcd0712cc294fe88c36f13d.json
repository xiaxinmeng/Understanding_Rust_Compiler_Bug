{"sha": "32934a4f45a72144cdcd0712cc294fe88c36f13d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5MzRhNGY0NWE3MjE0NGNkY2QwNzEyY2MyOTRmZTg4YzM2ZjEzZA==", "commit": {"author": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2020-11-20T06:21:40Z"}, "committer": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2020-11-20T06:34:11Z"}, "message": "C: Drop qualifiers during lvalue conversion [PR97702]\n\n2020-11-20  Martin Uecker  <muecker@gwdg.de>\n\ngcc/\n\t* gimplify.c (gimplify_modify_expr_rhs): Optimizie\n\tNOP_EXPRs that contain compound literals.\n\ngcc/c/\n\t* c-typeck.c (convert_lvalue_to_rvalue): Drop qualifiers.\n\ngcc/testsuite/\n\t* gcc.dg/cond-constqual-1.c: Adapt test.\n\t* gcc.dg/lvalue-11.c: New test.\n\t* gcc.dg/pr60195.c: Add warning.", "tree": {"sha": "022f80ca6020cfb841771515910a9f920abf6829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/022f80ca6020cfb841771515910a9f920abf6829"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32934a4f45a72144cdcd0712cc294fe88c36f13d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32934a4f45a72144cdcd0712cc294fe88c36f13d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32934a4f45a72144cdcd0712cc294fe88c36f13d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32934a4f45a72144cdcd0712cc294fe88c36f13d/comments", "author": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62586ee567bbbdab9fe8bb5829f032431d57098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62586ee567bbbdab9fe8bb5829f032431d57098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62586ee567bbbdab9fe8bb5829f032431d57098"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "286f3d9cd6c6b2964d6c1d65a022b84dfb409c94", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=32934a4f45a72144cdcd0712cc294fe88c36f13d", "patch": "@@ -2080,6 +2080,9 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n     exp = default_function_array_conversion (loc, exp);\n   if (!VOID_TYPE_P (TREE_TYPE (exp.value)))\n     exp.value = require_complete_type (loc, exp.value);\n+  if (convert_p && !error_operand_p (exp.value)\n+      && (TREE_CODE (TREE_TYPE (exp.value)) != ARRAY_TYPE))\n+    exp.value = convert (build_qualified_type (TREE_TYPE (exp.value), TYPE_UNQUALIFIED), exp.value);\n   if (really_atomic_lvalue (exp.value))\n     {\n       vec<tree, va_gc> *params;"}, {"sha": "fd0b5202b45227d84b18067ad476424891a800f5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=32934a4f45a72144cdcd0712cc294fe88c36f13d", "patch": "@@ -5518,6 +5518,19 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t    return GS_OK;\n \t  }\n \n+\tcase NOP_EXPR:\n+\t  /* Pull out compound literal expressions from a NOP_EXPR.\n+\t     Those are created in the C FE to drop qualifiers during\n+\t     lvalue conversion.  */\n+\t  if ((TREE_CODE (TREE_OPERAND (*from_p, 0)) == COMPOUND_LITERAL_EXPR)\n+\t      && tree_ssa_useless_type_conversion (*from_p))\n+\t    {\n+\t      *from_p = TREE_OPERAND (*from_p, 0);\n+\t      ret = GS_OK;\n+\t      changed = true;\n+\t    }\n+\t  break;\n+\n \tcase COMPOUND_LITERAL_EXPR:\n \t  {\n \t    tree complit = TREE_OPERAND (*expr_p, 1);"}, {"sha": "b5a09cb00386864255850a668f4a8991dca7fc93", "filename": "gcc/testsuite/gcc.dg/cond-constqual-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-constqual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-constqual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-constqual-1.c?ref=32934a4f45a72144cdcd0712cc294fe88c36f13d", "patch": "@@ -11,5 +11,5 @@ test (void)\n   __typeof__ (1 ? foo (0) : 0) texpr;\n   __typeof__ (1 ? i : 0) texpr2;\n   texpr = 0;  /* { dg-bogus \"read-only variable\" \"conditional expression with call to const function\" } */\n-  texpr2 = 0; /* { dg-error \"read-only variable\" \"conditional expression with const variable\" } */\n+  texpr2 = 0; /* { dg-bogus \"read-only variable\" \"conditional expression with const variable\" } */\n }"}, {"sha": "d8b5a60c99173b83db2b57cefaa98e43ee6b5e9d", "filename": "gcc/testsuite/gcc.dg/lvalue-11.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-11.c?ref=32934a4f45a72144cdcd0712cc294fe88c36f13d", "patch": "@@ -0,0 +1,40 @@\n+/* test that lvalue conversions drops qualifiers, Bug 97702 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+\n+const int jc;\n+extern int j;\n+extern typeof(0,jc) j;\n+extern typeof(+jc) j;\n+extern typeof(-jc) j;\n+extern typeof(1?jc:0) j;\n+extern typeof((int)jc) j;\n+extern typeof((const int)jc) j;\n+\n+volatile int kv;\n+extern int k;\n+extern typeof(0,kv) k;\n+extern typeof(+kv) k;\n+extern typeof(-kv) k;\n+extern typeof(1?kv:0) k;\n+extern typeof((int)kv) k;\n+extern typeof((volatile int)kv) k;\n+\n+_Atomic int la;\n+extern int l;\n+extern typeof(0,la) l;\n+extern typeof(+la) l;\n+extern typeof(-la) l;\n+extern typeof(1?la:0) l;\n+extern typeof((int)la) l;\n+extern typeof((_Atomic int)la) l;\n+\n+int * restrict mr;\n+extern int *m;\n+extern typeof(0,mr) m;\n+extern typeof(1?mr:0) m;\n+extern typeof((int *)mr) m;\n+extern typeof((int * restrict)mr) m;\n+\n+"}, {"sha": "8eccf7f63ad755e8f897b3cea80d8d39d2416218", "filename": "gcc/testsuite/gcc.dg/pr60195.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60195.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32934a4f45a72144cdcd0712cc294fe88c36f13d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60195.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60195.c?ref=32934a4f45a72144cdcd0712cc294fe88c36f13d", "patch": "@@ -15,7 +15,7 @@ atomic_int\n fn2 (void)\n {\n   atomic_int y = 0;\n-  y;\n+  y;\t\t/* { dg-warning \"statement with no effect\" } */\n   return y;\n }\n "}]}