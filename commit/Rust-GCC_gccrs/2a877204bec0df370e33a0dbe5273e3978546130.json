{"sha": "2a877204bec0df370e33a0dbe5273e3978546130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4NzcyMDRiZWMwZGYzNzBlMzNhMGRiZTUyNzNlMzk3ODU0NjEzMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-04-28T08:54:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-04-28T08:54:07Z"}, "message": "c-ada-spec.c (in_function): Delete.\n\n\t* c-ada-spec.c (in_function): Delete.\n\t(dump_generic_ada_node): Do not change in_function and remove the\n\tredundant code dealing with it.\n\t(print_ada_declaration): Do not change in_function.  Use INDENT_INCR.\n\t(print_ada_methods): Output the static member functions in a nested\n\tpackage after the regular methods as well as associated renamings.\n\nCo-Authored-By: Pierre-Marie de Rodat <derodat@adacore.com>\n\nFrom-SVN: r222517", "tree": {"sha": "e9817ec0ed9152ed1b1d956fe689aff772953706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9817ec0ed9152ed1b1d956fe689aff772953706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a877204bec0df370e33a0dbe5273e3978546130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a877204bec0df370e33a0dbe5273e3978546130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a877204bec0df370e33a0dbe5273e3978546130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a877204bec0df370e33a0dbe5273e3978546130/comments", "author": null, "committer": null, "parents": [{"sha": "0e8623e9c6a9a1fc742f3f8eec368886c861dfdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8623e9c6a9a1fc742f3f8eec368886c861dfdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8623e9c6a9a1fc742f3f8eec368886c861dfdc"}], "stats": {"total": 127, "additions": 108, "deletions": 19}, "files": [{"sha": "161504ba0ccd477c52dc3fffcfbe88e50a23c7a0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a877204bec0df370e33a0dbe5273e3978546130/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a877204bec0df370e33a0dbe5273e3978546130/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2a877204bec0df370e33a0dbe5273e3978546130", "patch": "@@ -1,3 +1,13 @@\n+2015-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+            Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* c-ada-spec.c (in_function): Delete.\n+\t(dump_generic_ada_node): Do not change in_function and remove the\n+\tredundant code dealing with it.\n+\t(print_ada_declaration): Do not change in_function.  Use INDENT_INCR.\n+\t(print_ada_methods): Output the static member functions in a nested\n+\tpackage after the regular methods as well as associated renamings.\n+\n 2015-04-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/65830"}, {"sha": "8d6e01421cd781b58b73ac2676f3c50fb2dc3183", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 98, "deletions": 19, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a877204bec0df370e33a0dbe5273e3978546130/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a877204bec0df370e33a0dbe5273e3978546130/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=2a877204bec0df370e33a0dbe5273e3978546130", "patch": "@@ -1827,7 +1827,6 @@ is_simple_enum (tree node)\n   return true;\n }\n \n-static bool in_function = true;\n static bool bitfield_used = false;\n \n /* Recursively dump in BUFFER Ada declarations corresponding to NODE of type\n@@ -2006,7 +2005,6 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t{\n \t  tree fnode = TREE_TYPE (node);\n \t  bool is_function;\n-\t  bool prev_in_function = in_function;\n \n \t  if (VOID_TYPE_P (TREE_TYPE (fnode)))\n \t    {\n@@ -2019,10 +2017,8 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t      pp_string (buffer, \"access function\");\n \t    }\n \n-\t  in_function = is_function;\n \t  dump_ada_function_declaration\n \t    (buffer, node, false, false, false, spc + INDENT_INCR);\n-\t  in_function = prev_in_function;\n \n \t  if (is_function)\n \t    {\n@@ -2141,11 +2137,6 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t\t\t}\n \t\t      else if (quals & TYPE_QUAL_CONST)\n \t\t\tpp_string (buffer, \"in \");\n-\t\t      else if (in_function)\n-\t\t\t{\n-\t\t\t  is_access = true;\n-\t\t\t  pp_string (buffer, \"access \");\n-\t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  is_access = true;\n@@ -2316,27 +2307,119 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n }\n \n /* Dump in BUFFER NODE's methods.  SPC is the indentation level.  Return 1 if\n-   methods were printed, 0 otherwise.  */\n+   methods were printed, 0 otherwise.\n+\n+   We do it in 2 passes: first, the regular methods, i.e. non-static member\n+   functions, are output immediately within the package created for the class\n+   so that they are considered as primitive operations in Ada; second, the\n+   static member functions are output in a nested package so that they are\n+   _not_ considered as primitive operations in Ada.\n+\n+   This approach is necessary because the formers have the implicit 'this'\n+   pointer whereas the latters don't and, on 32-bit x86/Windows, the calling\n+   conventions for the 'this' pointer are special.  Therefore, the compiler\n+   needs to be able to differentiate regular methods (with 'this' pointer)\n+   from static member functions that take a pointer to the class as first\n+   parameter.  */\n \n static int\n print_ada_methods (pretty_printer *buffer, tree node, int spc)\n {\n-  int res = 1;\n-  tree tmp;\n+  bool has_static_methods = false;\n+  tree t;\n+  int res;\n \n   if (!has_nontrivial_methods (node))\n     return 0;\n \n   pp_semicolon (buffer);\n \n-  for (tmp = TYPE_METHODS (node); tmp; tmp = TREE_CHAIN (tmp))\n+  /* First pass: the regular methods.  */\n+  res = 1;\n+  for (t = TYPE_METHODS (node); t; t = TREE_CHAIN (t))\n+    {\n+      if (TREE_CODE (TREE_TYPE (t)) != METHOD_TYPE)\n+\t{\n+\t  has_static_methods = true;\n+\t  continue;\n+\t}\n+\n+      if (res)\n+\t{\n+\t  pp_newline (buffer);\n+\t  pp_newline (buffer);\n+\t}\n+\n+      res = print_ada_declaration (buffer, t, node, spc);\n+    }\n+\n+  if (!has_static_methods)\n+    return 1;\n+\n+  pp_newline (buffer);\n+  newline_and_indent (buffer, spc);\n+\n+  /* Second pass: the static member functions.  */\n+  pp_string (buffer, \"package Static is\");\n+  pp_newline (buffer);\n+  spc += INDENT_INCR;\n+\n+  res = 0;\n+  for (t = TYPE_METHODS (node); t; t = TREE_CHAIN (t))\n     {\n+      if (TREE_CODE (TREE_TYPE (t)) == METHOD_TYPE)\n+\tcontinue;\n+\n       if (res)\n \t{\n \t  pp_newline (buffer);\n \t  pp_newline (buffer);\n \t}\n-      res = print_ada_declaration (buffer, tmp, node, spc);\n+\n+      res = print_ada_declaration (buffer, t, node, spc);\n+    }\n+\n+  spc -= INDENT_INCR;\n+  newline_and_indent (buffer, spc);\n+  pp_string (buffer, \"end;\");\n+\n+  /* In order to save the clients from adding a second use clause for the\n+     nested package, we generate renamings for the static member functions\n+     in the package created for the class.  */\n+  for (t = TYPE_METHODS (node); t; t = TREE_CHAIN (t))\n+    {\n+      bool is_function;\n+\n+      if (TREE_CODE (TREE_TYPE (t)) == METHOD_TYPE)\n+\tcontinue;\n+\n+      pp_newline (buffer);\n+      newline_and_indent (buffer, spc);\n+\n+      if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (t))))\n+\t{\n+\t  pp_string (buffer, \"procedure \");\n+\t  is_function = false;\n+\t}\n+      else\n+\t{\n+\t  pp_string (buffer, \"function \");\n+\t  is_function = true;\n+\t}\n+\n+      dump_ada_decl_name (buffer, t, false);\n+      dump_ada_function_declaration (buffer, t, false, false, false, spc);\n+\n+      if (is_function)\n+\t{\n+\t  pp_string (buffer, \" return \");\n+\t  dump_generic_ada_node (buffer, TREE_TYPE (TREE_TYPE (t)), node,\n+\t\t\t\t spc, false, true);\n+\t}\n+\n+       pp_string (buffer, \" renames Static.\");\n+       dump_ada_decl_name (buffer, t, false);\n+       pp_semicolon (buffer);\n     }\n \n   return 1;\n@@ -2796,7 +2879,6 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n       bool is_function, is_abstract_class = false;\n       bool is_method = TREE_CODE (TREE_TYPE (t)) == METHOD_TYPE;\n       tree decl_name = DECL_NAME (t);\n-      int prev_in_function = in_function;\n       bool is_abstract = false;\n       bool is_constructor = false;\n       bool is_destructor = false;\n@@ -2848,8 +2930,6 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t  is_function = true;\n \t}\n \n-      in_function = is_function;\n-\n       if (is_constructor)\n \tprint_constructor (buffer, t);\n       else if (is_destructor)\n@@ -2859,7 +2939,6 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n       dump_ada_function_declaration\n \t(buffer, t, is_method, is_constructor, is_destructor, spc);\n-      in_function = prev_in_function;\n \n       if (is_function)\n \t{\n@@ -3048,7 +3127,7 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n   if (is_class)\n     {\n-      spc -= 3;\n+      spc -= INDENT_INCR;\n       newline_and_indent (buffer, spc);\n       pp_string (buffer, \"end;\");\n       newline_and_indent (buffer, spc);"}]}