{"sha": "cb90e18c68e8b0350171f45bf14f1c078637efa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5MGUxOGM2OGU4YjAzNTAxNzFmNDViZjE0ZjFjMDc4NjM3ZWZhMw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-03-14T17:38:15Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-03-14T17:38:15Z"}, "message": "rs6000-c.c: Add macro definitions for ALTIVEC_BUILTIN_VEC_PERMXOR.\n\ngcc/ChangeLog:\n\n2018-03-14  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c: Add macro definitions for\n\tALTIVEC_BUILTIN_VEC_PERMXOR.\n\t* config/rs6000/rs6000.h: Add #define for vec_permxor builtin.\n\t* config/rs6000/rs6000-builtin.def: Add macro expansions for VPERMXOR.\n\t* config/rs6000/altivec.md (altivec_vpermxor): New define expand.\n\t* config/rs6000/rs6000-p8swap.c (rtx_is_swappable_p): Add case\n\tUNSPEC_VPERMXOR.\n\t* config/doc/extend.texi: Add prototypes for vec_permxor.\n\ngcc/testsuite/ChangeLog:\n\n2018-03-14  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-7-runnable.c: New test file.\n\nFrom-SVN: r258530", "tree": {"sha": "148652728c55426351339aafa7b40229ea4ef286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/148652728c55426351339aafa7b40229ea4ef286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb90e18c68e8b0350171f45bf14f1c078637efa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb90e18c68e8b0350171f45bf14f1c078637efa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb90e18c68e8b0350171f45bf14f1c078637efa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb90e18c68e8b0350171f45bf14f1c078637efa3/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5677683f0fe457cb5317f201be1cec5cba4c3056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5677683f0fe457cb5317f201be1cec5cba4c3056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5677683f0fe457cb5317f201be1cec5cba4c3056"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "1138d9e044c0bb5eaab82b02f4c778e4ac272131", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -1,3 +1,14 @@\n+2018-03-14  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Add macro definitions for\n+\tALTIVEC_BUILTIN_VEC_PERMXOR.\n+\t* config/rs6000/rs6000.h: Add #define for vec_permxor builtin.\n+\t* config/rs6000/rs6000-builtin.def: Add macro expansions for VPERMXOR.\n+\t* config/rs6000/altivec.md (altivec_vpermxor): New define expand.\n+\t* config/rs6000/rs6000-p8swap.c (rtx_is_swappable_p): Add case\n+\tUNSPEC_VPERMXOR.\n+\t* config/doc/extend.texi: Add prototypes for vec_permxor.\n+\n 2018-03-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/84852"}, {"sha": "5a3416235daa4ecb0835e89888c5371fe9ec0422", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -76,6 +76,7 @@\n #define vec_vor vec_or\n #define vec_vpkpx vec_packpx\n #define vec_vperm vec_perm\n+#define vec_permxor __builtin_vec_vpermxor\n #define vec_vrefp vec_re\n #define vec_vrfin vec_round\n #define vec_vrsqrtefp vec_rsqrte"}, {"sha": "646275c0df95ff24a5b2b43026616a55af416c32", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -3827,6 +3827,29 @@\n   DONE;\n })\n \n+(define_expand \"altivec_vpermxor\"\n+  [(use (match_operand:V16QI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))\n+   (use (match_operand:V16QI 3 \"register_operand\"))]\n+  \"TARGET_P8_VECTOR\"\n+{\n+  if (!BYTES_BIG_ENDIAN)\n+    {\n+      /* vpermxor indexes the bytes using Big Endian numbering.  If LE,\n+\t change indexing in operand[3] to BE index.  */\n+      rtx be_index = gen_reg_rtx (V16QImode);\n+\n+      emit_insn (gen_one_cmplv16qi2 (be_index, operands[3]));\n+      emit_insn (gen_crypto_vpermxor_v16qi (operands[0], operands[1],\n+\t\t\t\t\t    operands[2], be_index));\n+    }\n+  else\n+    emit_insn (gen_crypto_vpermxor_v16qi (operands[0], operands[1],\n+\t\t\t\t\t  operands[2], operands[3]));\n+  DONE;\n+})\n+\n (define_expand \"altivec_negv4sf2\"\n   [(use (match_operand:V4SF 0 \"register_operand\"))\n    (use (match_operand:V4SF 1 \"register_operand\"))]"}, {"sha": "1efa8b600e8bd03299f0564fa295cf3cb7e3bd8f", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -2008,6 +2008,8 @@ BU_P8V_AV_P (VCMPEQUD_P,\t\"vcmpequd_p\",\tCONST,\tvector_eq_v2di_p)\n BU_P8V_AV_P (VCMPGTSD_P,\t\"vcmpgtsd_p\",\tCONST,\tvector_gt_v2di_p)\n BU_P8V_AV_P (VCMPGTUD_P,\t\"vcmpgtud_p\",\tCONST,\tvector_gtu_v2di_p)\n \n+BU_P8V_AV_3 (VPERMXOR,\t\t\"vpermxor\",\tCONST, \taltivec_vpermxor)\n+\n /* ISA 2.05 overloaded 2 argument functions.  */\n BU_P6_OVERLOAD_2 (CMPB, \"cmpb\")\n \n@@ -2069,6 +2071,7 @@ BU_P8V_OVERLOAD_3 (VADDECUQ,\t\"vaddecuq\")\n BU_P8V_OVERLOAD_3 (VADDEUQM,\t\"vaddeuqm\")\n BU_P8V_OVERLOAD_3 (VSUBECUQ,\t\"vsubecuq\")\n BU_P8V_OVERLOAD_3 (VSUBEUQM,\t\"vsubeuqm\")\n+BU_P8V_OVERLOAD_3 (VPERMXOR,   \"vpermxor\")\n \n /* ISA 3.0 vector overloaded 2-argument functions. */\n BU_P9V_AV_2 (VSLV,\t\t\"vslv\",\t\t\tCONST, vslv)"}, {"sha": "9ffb253816d06618d9d888275591335d7900a7ff", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -3585,6 +3585,16 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_16QI,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI },\n+\n+  { P8V_BUILTIN_VEC_VPERMXOR, P8V_BUILTIN_VPERMXOR,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_bool_V16QI },\n+  { P8V_BUILTIN_VEC_VPERMXOR, P8V_BUILTIN_VPERMXOR,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI },\n+  { P8V_BUILTIN_VEC_VPERMXOR, P8V_BUILTIN_VPERMXOR,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n+\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI },\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DF,"}, {"sha": "d2b39f3dba7eca2aede48daa9fa695ff00594a46", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -753,6 +753,7 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t  case UNSPEC_VPERM_UNS:\n \t  case UNSPEC_VPERMHI:\n \t  case UNSPEC_VPERMSI:\n+\t  case UNSPEC_VPERMXOR:\n \t  case UNSPEC_VPKPX:\n \t  case UNSPEC_VSLDOI:\n \t  case UNSPEC_VSLO:"}, {"sha": "c0e779253cd9bbaa80a41ef494d431b44e224093", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -18448,6 +18448,12 @@ vector double vec_perm (vector double, vector double, vector unsigned char);\n vector long vec_perm (vector long, vector long, vector unsigned char);\n vector unsigned long vec_perm (vector unsigned long, vector unsigned long,\n                                vector unsigned char);\n+vector bool char vec_permxor (vector bool char, vector bool char,\n+                              vector bool char);\n+vector unsigned char vec_permxor (vector signed char, vector signed char,\n+                                  vector signed char);\n+vector unsigned char vec_permxor (vector unsigned char, vector unsigned char,\n+                                  vector unsigned char);\n vector double vec_rint (vector double);\n vector double vec_recip (vector double, vector double);\n vector double vec_rsqrt (vector double);"}, {"sha": "d815ea5b9d8a2ee6a25ee3c0e16e3bceb8646fdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -1,3 +1,9 @@\n+gcc/testsuite/ChangeLog:\n+\n+2018-03-14  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-7-runnable.c: New test file.\n+\n 2018-03-14  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/8480"}, {"sha": "965b1cd0678a59127f165a572caf6a9c174c1415", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-7-runnable.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-7-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb90e18c68e8b0350171f45bf14f1c078637efa3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-7-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-7-runnable.c?ref=cb90e18c68e8b0350171f45bf14f1c078637efa3", "patch": "@@ -0,0 +1,112 @@\n+/* { dg-do run { target { powerpc*-*-* && p8vector_hw } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n+\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <inttypes.h>\n+#include <altivec.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int main() {\n+  int i;\n+  vector bool char ubc_arg1, ubc_arg2, ubc_arg3;\n+  vector unsigned char uc_arg1, uc_arg2, uc_arg3;\n+  vector signed char sc_arg1, sc_arg2, sc_arg3;\n+\n+  vector bool char vec_ubc_expected1, vec_ubc_result1;\n+  vector unsigned char vec_uc_expected1, vec_uc_result1;\n+  vector signed char vec_sc_expected1, vec_sc_result1;\n+\n+  /* vec_permxor: bool char args, result */\n+  ubc_arg1 = (vector bool char){0xA, 0x2, 0xB0, 0x4,\n+\t\t\t\t0x5, 0x6, 0x7, 0x8,\n+\t\t\t\t0x9, 0x10, 0x11, 0x12,\n+\t\t\t\t0x13, 0x15, 0x15, 0x16};\n+  ubc_arg2 = (vector bool char){0x5, 0x20, 0xC, 0x40,\n+\t\t\t\t0x55, 0x66, 0x77, 0x88,\n+\t\t\t\t0x9, 0xFF, 0x0, 0xED,\n+\t\t\t\t0x4, 0x5, 0x6, 0x7};\n+  ubc_arg3 = (vector bool char){0x08, 0x19, 0x2A, 0x3B,\n+\t\t\t\t0x4D, 0x5C, 0x6D, 0x7E,\n+\t\t\t\t0x8F, 0x90, 0xA1, 0xB2,\n+\t\t\t\t0xC3, 0xD4, 0xE5, 0xF6};\n+  vec_ubc_expected1 = (vector bool char){0x3, 0xFD, 0xB0, 0xE9,\n+\t\t\t\t\t 0x0, 0x2, 0x2, 0xE,\n+\t\t\t\t\t 0xE, 0x15, 0x31, 0x1E,\n+\t\t\t\t\t 0x53, 0x40, 0x73, 0x61};\n+  vec_ubc_result1 = vec_permxor (ubc_arg1, ubc_arg2, ubc_arg3);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (vec_ubc_expected1[i] != vec_ubc_result1[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_permxor (ubc, ubc, ubc) result[%d]=0x%x != expected[%d]=0x%x\\n\",\n+\t     i, vec_ubc_result1[i],  i, vec_ubc_expected1[i]);\n+#else\n+      abort();\n+#endif\n+  }\n+\n+  /* vec_permxor: signed char args, result */\n+  sc_arg1 = (vector signed char){0x1, 0x2, 0x3, 0x4,\n+\t\t\t\t 0x5, 0x6, 0x7, 0x8,\n+\t\t\t\t 0x9, 0x10, 0xA, 0xB,\n+\t\t\t\t 0xC, 0xD, 0xE, 0xF};\n+  sc_arg2 = (vector signed char){0x5, 0x5, 0x7, 0x8,\n+\t\t\t\t 0x9, 0xA, 0xB, 0xC,\n+\t\t\t\t 0xD, 0xE, 0xF, 0x0,\n+\t\t\t\t 0x1, 0x2, 0x3, 0x4};\n+  sc_arg3 = (vector signed char){0x08, 0x19, 0x2A, 0x3B,\n+\t\t\t\t0x4D, 0x5C, 0x6D, 0x7E,\n+\t\t\t\t0x8F, 0x90, 0xA1, 0xB2,\n+\t\t\t\t0xC3, 0xD4, 0xE5, 0xF6};\n+  vec_sc_expected1 = (vector signed char){0xC, 0xC, 0xC, 0x4,\n+\t\t\t\t\t  0x7, 0x7, 0x5, 0xB,\n+\t\t\t\t\t  0xD, 0x15, 0xF, 0xC,\n+\t\t\t\t\t  0x4, 0x4, 0x4, 0x4};\n+  vec_sc_result1 = vec_permxor (sc_arg1, sc_arg2, sc_arg3);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (vec_sc_expected1[i] != vec_sc_result1[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_permxor (sc, sc, sc) result[%d]=0x%x != expected[%d]=0x%x\\n\",\n+\t     i, vec_sc_result1[i],  i, vec_sc_expected1[i]);\n+#else\n+      abort();\n+#endif\n+  }\n+\n+  /* vec_permxor: unsigned char args, result */\n+  uc_arg1 = (vector unsigned char){0xA, 0xB, 0xC, 0xD,\n+\t\t\t\t   0xE, 0xF, 0x0, 0x1,\n+\t\t\t\t   0x2, 0x3, 0x4, 0x5,\n+\t\t\t\t   0x6, 0x7, 0x8, 0x9};\n+  uc_arg2 = (vector unsigned char){0x5, 0x6, 0x7, 0x8,\n+\t\t\t\t   0x9, 0xA, 0xB, 0xC,\n+\t\t\t\t   0xD, 0xE, 0xF, 0x0,\n+\t\t\t\t   0x1, 0x2, 0x3, 0x4};\n+  uc_arg3 = (vector unsigned char){0x08, 0x19, 0x2A, 0x3B,\n+\t\t\t\t   0x4D, 0x5C, 0x6D, 0x7E,\n+\t\t\t\t   0x8F, 0x90, 0xA1, 0xB2,\n+\t\t\t\t   0xC3, 0xD4, 0xE5, 0xF6};\n+  vec_uc_expected1 = (vector unsigned char){0x7, 0x5, 0x3, 0xD,\n+\t\t\t\t\t    0xC, 0xE, 0x2, 0x2,\n+\t\t\t\t\t    0x6, 0x6, 0x2, 0x2,\n+\t\t\t\t\t    0xE, 0xE, 0x2, 0x2};\n+  vec_uc_result1 = vec_permxor (uc_arg1, uc_arg2, uc_arg3);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (vec_uc_expected1[i] != vec_uc_result1[i])\n+#ifdef DEBUG\n+      printf(\"ERROR vec_permxor (uc, uc, uc) result[%d]=0x%x != expected[%d]=0x%x\\n\",\n+\t     i, vec_uc_result1[i],  i, vec_uc_expected1[i]);\n+#else\n+      abort();\n+#endif\n+  }\n+}"}]}