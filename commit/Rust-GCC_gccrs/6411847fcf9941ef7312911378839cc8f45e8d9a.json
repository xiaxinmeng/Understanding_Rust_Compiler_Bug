{"sha": "6411847fcf9941ef7312911378839cc8f45e8d9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQxMTg0N2ZjZjk5NDFlZjczMTI5MTEzNzg4MzljYzhmNDVlOGQ5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-10-04T15:37:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-10-04T15:37:09Z"}, "message": "PR c++/81525 - broken handling of auto in generic lambda.\n\n\t* pt.c (tsubst_decl) [VAR_DECL]: Use strip_innermost_template_args.\n\nFrom-SVN: r253414", "tree": {"sha": "ee55bf31da00b85e990bd757ee4278c212071c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee55bf31da00b85e990bd757ee4278c212071c77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6411847fcf9941ef7312911378839cc8f45e8d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6411847fcf9941ef7312911378839cc8f45e8d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6411847fcf9941ef7312911378839cc8f45e8d9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6411847fcf9941ef7312911378839cc8f45e8d9a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8139a48e67ec9f178904d2bb83a17bd37ce8fb54"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "b1eaaba5bc66acafe23211e39f9e844134517d5b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6411847fcf9941ef7312911378839cc8f45e8d9a", "patch": "@@ -1,3 +1,8 @@\n+2017-10-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/81525 - broken handling of auto in generic lambda.\n+\t* pt.c (tsubst_decl) [VAR_DECL]: Use strip_innermost_template_args.\n+\n 2017-10-04  Nathan Sidwell  <nathan@acm.org>\n \n \t* call.c (convert_arg_to_ellipsis): Correct comment about passing"}, {"sha": "36c8c106439458cdc8bfc4b29337d8df45592ae8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6411847fcf9941ef7312911378839cc8f45e8d9a", "patch": "@@ -13042,15 +13042,20 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t\t&& VAR_HAD_UNKNOWN_BOUND (t)\n \t\t&& type != error_mark_node)\n \t      type = strip_array_domain (type);\n-\t    tree auto_node = type_uses_auto (type);\n-\t    int len = TREE_VEC_LENGTH (args);\n-\t    if (auto_node)\n-\t      /* Mask off any template args past the variable's context so we\n-\t\t don't replace the auto with an unrelated argument.  */\n-\t      TREE_VEC_LENGTH (args) = TEMPLATE_TYPE_LEVEL (auto_node) - 1;\n-\t    type = tsubst (type, args, complain, in_decl);\n-\t    if (auto_node)\n-\t      TREE_VEC_LENGTH (args) = len;\n+\t    tree sub_args = args;\n+\t    if (tree auto_node = type_uses_auto (type))\n+\t      {\n+\t\t/* Mask off any template args past the variable's context so we\n+\t\t   don't replace the auto with an unrelated argument.  */\n+\t\tint nouter = TEMPLATE_TYPE_LEVEL (auto_node) - 1;\n+\t\tint extra = TMPL_ARGS_DEPTH (args) - nouter;\n+\t\tif (extra > 0)\n+\t\t  /* This should never happen with the new lambda instantiation\n+\t\t     model, but keep the handling just in case.  */\n+\t\t  gcc_assert (!CHECKING_P),\n+\t\t  sub_args = strip_innermost_template_args (args, extra);\n+\t      }\n+\t    type = tsubst (type, sub_args, complain, in_decl);\n \t  }\n \tif (VAR_P (r))\n \t  {"}, {"sha": "b9e98c551c02b6316ce491baa648db90a155d1c3", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-auto1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-auto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-auto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-auto1.C?ref=6411847fcf9941ef7312911378839cc8f45e8d9a", "patch": "@@ -0,0 +1,19 @@\n+// Related to c++/81525\n+// { dg-do compile { target c++14 } }\n+\n+template <class X>\n+struct A\n+{\n+  template <class T>\n+  static void f()\n+  {\n+    [](auto b) {\n+      auto c = +b;\n+    }(42);\n+  }\n+};\n+\n+int main()\n+{\n+  A<int>::f<int>();\n+}"}, {"sha": "1cf8551881328865585edaf1ee63da0d0e891c17", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-const4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4.C?ref=6411847fcf9941ef7312911378839cc8f45e8d9a", "patch": "@@ -1,5 +1,5 @@\n // PR c++/81525\n-// { dg-do compile { target c++14 } }\n+// { dg-do run { target c++14 } }\n \n template <int i> struct A {\n   constexpr operator int () const { return i; }\n@@ -13,7 +13,7 @@ template <typename T>\n void bar (T) {\n   constexpr auto N = a<1>;\n   auto f = [&] (auto i) {\n-    return static_cast<int>(N) == 1;\n+    if (static_cast<int>(N) != 1) __builtin_abort();\n   };\n   foo (f);\n }"}, {"sha": "a6afb32584f316ca731ffa474b7e484cccfdbf01", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-const4a.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6411847fcf9941ef7312911378839cc8f45e8d9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const4a.C?ref=6411847fcf9941ef7312911378839cc8f45e8d9a", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/81525\n+// { dg-do run { target c++14 } }\n+\n+template <int i> struct A {\n+  constexpr operator int () const { return i; }\n+};\n+template <int i> constexpr A<i> a = {};\n+\n+template <typename F> void foo (F f) {\n+  f (42);\n+}\n+template <typename T>\n+void bar (T) {\n+  constexpr auto N = a<1>;\n+  auto f = [&] (auto i) {\n+    if (static_cast<decltype(i)>(N) != 1) __builtin_abort();\n+  };\n+  foo (f);\n+}\n+int main () { bar (0); }"}]}