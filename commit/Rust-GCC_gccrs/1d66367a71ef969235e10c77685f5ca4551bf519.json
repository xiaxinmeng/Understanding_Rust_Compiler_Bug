{"sha": "1d66367a71ef969235e10c77685f5ca4551bf519", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2NjM2N2E3MWVmOTY5MjM1ZTEwYzc3Njg1ZjVjYTQ1NTFiZjUxOQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-10T13:02:24Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:12:18Z"}, "message": "aarch64: Use RTL builtins for polynomial vsri[q]_n intrinsics\n\nRewrite vsri[q]_n_p* Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-10  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add polynomial\n\tssri_n buitin generator macro.\n\t* config/aarch64/arm_neon.h (vsri_n_p8): Use RTL builtin\n\tinstead of inline asm.\n\t(vsri_n_p16): Likewise.\n\t(vsri_n_p64): Likewise.\n\t(vsriq_n_p8): Likewise.\n\t(vsriq_n_p16): Likewise.\n\t(vsriq_n_p64): Likewise.", "tree": {"sha": "08a38b7e9531f80afe537d8f9bfa392e28feafc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a38b7e9531f80afe537d8f9bfa392e28feafc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d66367a71ef969235e10c77685f5ca4551bf519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d66367a71ef969235e10c77685f5ca4551bf519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d66367a71ef969235e10c77685f5ca4551bf519", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d66367a71ef969235e10c77685f5ca4551bf519/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6372b05e5b14f27ddce11c28654956c1ad715dac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6372b05e5b14f27ddce11c28654956c1ad715dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6372b05e5b14f27ddce11c28654956c1ad715dac"}], "stats": {"total": 119, "additions": 42, "deletions": 77}, "files": [{"sha": "86614e73b1b62a1fec9c2ccbe9d478b050ff2f06", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d66367a71ef969235e10c77685f5ca4551bf519/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d66367a71ef969235e10c77685f5ca4551bf519/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1d66367a71ef969235e10c77685f5ca4551bf519", "patch": "@@ -434,6 +434,7 @@\n   BUILTIN_VQN (USHIFT2IMM, uqrshrn2_n, 0, NONE)\n   /* Implemented by aarch64_<sur>s<lr>i_n<mode>.  */\n   BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssri_n, 0, NONE)\n+  BUILTIN_VALLP (SHIFTINSERTP, ssri_n, 0, NONE)\n   BUILTIN_VSDQ_I_DI (USHIFTACC, usri_n, 0, NONE)\n   BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssli_n, 0, NONE)\n   BUILTIN_VALLP (SHIFTINSERTP, ssli_n, 0, NONE)"}, {"sha": "3536052e5d81ded975786a3e67e65b71dabb47bc", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 41, "deletions": 77, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d66367a71ef969235e10c77685f5ca4551bf519/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d66367a71ef969235e10c77685f5ca4551bf519/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1d66367a71ef969235e10c77685f5ca4551bf519", "patch": "@@ -9078,83 +9078,47 @@ vsliq_n_p16 (poly16x8_t __a, poly16x8_t __b, const int __c)\n   return __builtin_aarch64_ssli_nv8hi_ppps (__a, __b, __c);\n }\n \n-#define vsri_n_p8(a, b, c)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly8x8_t b_ = (b);                                              \\\n-       poly8x8_t a_ = (a);                                              \\\n-       poly8x8_t result;                                                \\\n-       __asm__ (\"sri %0.8b,%2.8b,%3\"                                    \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsri_n_p16(a, b, c)                                             \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly16x4_t b_ = (b);                                             \\\n-       poly16x4_t a_ = (a);                                             \\\n-       poly16x4_t result;                                               \\\n-       __asm__ (\"sri %0.4h,%2.4h,%3\"                                    \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsri_n_p64(a, b, c)\t\t\t\t\t\t\\\n-  __extension__\t\t\t\t\t\t\t\t\\\n-    ({\t\t\t\t\t\t\t\t\t\\\n-       poly64x1_t b_ = (b);\t\t\t\t\t\t\\\n-       poly64x1_t a_ = (a);\t\t\t\t\t\t\\\n-       poly64x1_t result;\t\t\t\t\t\t\\\n-       __asm__ (\"sri %d0,%d2,%3\"\t\t\t\t\t\\\n-\t\t: \"=w\"(result)\t\t\t\t\t\t\\\n-\t\t: \"0\"(a_), \"w\"(b_), \"i\"(c)\t\t\t\t\\\n-\t\t: /* No clobbers.  */);\t\t\t\t\t\\\n-       result;\t\t\t\t\t\t\t\t\\\n-     })\n-\n-#define vsriq_n_p8(a, b, c)                                             \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly8x16_t b_ = (b);                                             \\\n-       poly8x16_t a_ = (a);                                             \\\n-       poly8x16_t result;                                               \\\n-       __asm__ (\"sri %0.16b,%2.16b,%3\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsriq_n_p16(a, b, c)                                            \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly16x8_t b_ = (b);                                             \\\n-       poly16x8_t a_ = (a);                                             \\\n-       poly16x8_t result;                                               \\\n-       __asm__ (\"sri %0.8h,%2.8h,%3\"                                    \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vsriq_n_p64(a, b, c)\t\t\t\t\t\t\\\n-  __extension__\t\t\t\t\t\t\t\t\\\n-    ({\t\t\t\t\t\t\t\t\t\\\n-       poly64x2_t b_ = (b);\t\t\t\t\t\t\\\n-       poly64x2_t a_ = (a);\t\t\t\t\t\t\\\n-       poly64x2_t result;\t\t\t\t\t\t\\\n-       __asm__ (\"sri %0.2d,%2.2d,%3\"\t\t\t\t\t\\\n-\t\t: \"=w\"(result)\t\t\t\t\t\t\\\n-\t\t: \"0\"(a_), \"w\"(b_), \"i\"(c)\t\t\t\t\\\n-\t\t: /* No clobbers.  */);\t\t\t\t\t\\\n-       result;\t\t\t\t\t\t\t\t\\\n-     })\n+__extension__ extern __inline poly8x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsri_n_p8 (poly8x8_t __a, poly8x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssri_nv8qi_ppps (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline poly16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsri_n_p16 (poly16x4_t __a, poly16x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssri_nv4hi_ppps (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline poly64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsri_n_p64 (poly64x1_t __a, poly64x1_t __b, const int __c)\n+{\n+  return (poly64x1_t) __builtin_aarch64_ssri_ndi_ppps (__a[0], __b[0], __c);\n+}\n+\n+__extension__ extern __inline poly8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsriq_n_p8 (poly8x16_t __a, poly8x16_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssri_nv16qi_ppps (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline poly16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsriq_n_p16 (poly16x8_t __a, poly16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssri_nv8hi_ppps (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsriq_n_p64 (poly64x2_t __a, poly64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssri_nv2di_ppps (__a, __b, __c);\n+}\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))"}]}