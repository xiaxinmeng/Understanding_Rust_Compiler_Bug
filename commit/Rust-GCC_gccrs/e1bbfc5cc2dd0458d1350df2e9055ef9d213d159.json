{"sha": "e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiYmZjNWNjMmRkMDQ1OGQxMzUwZGYyZTkwNTVlZjlkMjEzZDE1OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-07T09:56:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-07T09:56:31Z"}, "message": "configure.ac (enable-checking): Add release option.\n\n\t* configure.ac (enable-checking): Add release option. Reorganize\n\tto avoid repetition.\n\t* configure: Rebuilt.\n\t* doc/install.texi (enable-checking): Amend documentation.\n\nFrom-SVN: r87139", "tree": {"sha": "f7a8f1d6e8fc0c661afebb6e382e9e14f1dcdb4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7a8f1d6e8fc0c661afebb6e382e9e14f1dcdb4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/comments", "author": null, "committer": null, "parents": [{"sha": "32b2511f29d1541a3117a39622c963d9623c00a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b2511f29d1541a3117a39622c963d9623c00a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b2511f29d1541a3117a39622c963d9623c00a7"}], "stats": {"total": 201, "additions": 107, "deletions": 94}, "files": [{"sha": "4aeba215d0240d127028b88d7590669d2ad2b203", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "patch": "@@ -1,3 +1,10 @@\n+2004-09-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* configure.ac (enable-checking): Add release option. Reorganize\n+\tto avoid repetition.\n+\t* configure: Rebuilt.\n+\t* doc/install.texi (enable-checking): Amend documentation.\n+\n 2004-09-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/17313"}, {"sha": "617d8af55ee10fbadc5577561f5f7980614969bc", "filename": "gcc/configure", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "patch": "@@ -867,9 +867,8 @@ Optional Features:\n   --enable-checking=LIST\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: none,assert,fold,gc,gcac,misc,\n-\t\t\t  rtlflag,rtl,tree,valgrind;\n-\t\t\t  default is assert,gc,misc,rtlflag,tree\n+\t\t\t  Categories are: assert,fold,gc,gcac,misc,\n+\t\t\t  rtlflag,rtl,tree,valgrind,release,yes,all;\n   --enable-mapped-location   location_t is fileline integer cookie\n   --enable-coverage=LEVEL\n \t\t\t  enable compiler's code coverage collection.\n@@ -3928,54 +3927,56 @@ fi\n # Check whether --enable-checking or --disable-checking was given.\n if test \"${enable_checking+set}\" = set; then\n   enableval=\"$enable_checking\"\n-  ac_checking=\n+  ac_checking_flags=\"${enableval}\"\n+else\n+\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  ac_checking_flags=yes\n+else\n+  ac_checking_flags=release\n+fi\n+fi;\n+ac_assert_checking=1\n+ac_checking=\n ac_tree_checking=\n ac_rtl_checking=\n ac_rtlflag_checking=\n ac_gc_checking=\n ac_gc_always_collect=\n ac_fold_checking=\n-ac_assert_checking=\n-case \"${enableval}\" in\n-yes)\tac_checking=1 ; ac_tree_checking=1 ; ac_gc_checking=1 ;\n-\tac_rtlflag_checking=1 ; ac_assert_checking=1 ;;\n-no)\t;;\n-*)\tIFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n-\tset fnord $enableval; shift\n-\tIFS=\"$ac_save_IFS\"\n-\tac_assert_checking=1\n-\tfor check\n-\tdo\n-\t\tcase $check in\n-\t\tassert) ac_assert_checking=1 ;;\n-\t\tfold)\tac_fold_checking=1 ;;\n-\t\tgc)\tac_gc_checking=1 ;;\n-\t\tgcac)\tac_gc_always_collect=1 ;;\n-\t\tmisc)\tac_checking=1 ;;\n-\t\trtlflag)\tac_rtlflag_checking=1 ;;\n-\t\trtl)\tac_rtl_checking=1 ;;\n-\t\ttree)\tac_tree_checking=1 ;;\n-\t\tvalgrind)\tac_checking_valgrind=1 ;;\n-\t\t*)\t{ { echo \"$as_me:$LINENO: error: unknown check category $check\" >&5\n+IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n+for check in $ac_checking_flags\n+do\n+\tcase $check in\n+\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_rtlflag_checking=1 ;;\n+\tno)\t\tac_assert_checking= ; ac_checking= ;\n+\t\t\tac_tree_checking= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking= ; ac_gc_checking= ;\n+\t\t\tac_gc_always_collect= ; ac_fold_checking= ;;\n+\tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_rtl_checking=1 ;\n+\t\t\tac_rtlflag_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_gc_always_collect=1 ; ac_fold_checking=1 ;;\n+        release)\tac_assert_checking=1 ;;\n+\tassert) \tac_assert_checking=1 ;;\n+\tfold)\t\tac_fold_checking=1 ;;\n+\tgc)\t\tac_gc_checking=1 ;;\n+\tgcac)\t\tac_gc_always_collect=1 ;;\n+\tmisc)\t\tac_checking=1 ;;\n+\trtlflag)\tac_rtlflag_checking=1 ;;\n+\trtl)\t\tac_rtl_checking=1 ;;\n+\ttree)\t\tac_tree_checking=1 ;;\n+\tvalgrind)\tac_checking_valgrind=1 ;;\n+\t*)\t{ { echo \"$as_me:$LINENO: error: unknown check category $check\" >&5\n echo \"$as_me: error: unknown check category $check\" >&2;}\n    { (exit 1); exit 1; }; } ;;\n-\t\tesac\n-\tdone\n-\t;;\n-esac\n-\n-else\n+\tesac\n+done\n+IFS=\"$ac_save_IFS\"\n \n-# Determine the default checks.\n-if test x$is_release = x ; then\n-  # Enable some checks for development versions of GCC\n-  ac_assert_checking=1;\n-  ac_checking=1; ac_tree_checking=1; ac_gc_checking=1; ac_rtlflag_checking=1;\n-else\n-  # Disable all but assertions for release versions of GCC.\n-  ac_assert_checking=1;\n-fi\n-fi;\n nocommon_flag=\"\"\n if test x$ac_checking != x ; then\n \n@@ -5290,7 +5291,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:5293: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:5294: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)"}, {"sha": "fc1fb98230c780b028d53900dff4ae429b485dea", "filename": "gcc/configure.ac", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "patch": "@@ -392,52 +392,53 @@ AC_ARG_ENABLE(checking,\n [  --enable-checking[=LIST]\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: none,assert,fold,gc,gcac,misc,\n-\t\t\t  rtlflag,rtl,tree,valgrind;\n-\t\t\t  default is assert,gc,misc,rtlflag,tree],\n-[ac_checking=\n+\t\t\t  Categories are: assert,fold,gc,gcac,misc,\n+\t\t\t  rtlflag,rtl,tree,valgrind,release,yes,all;],\n+[ac_checking_flags=\"${enableval}\"],[\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  ac_checking_flags=yes\n+else\n+  ac_checking_flags=release\n+fi])\n+ac_assert_checking=1\n+ac_checking=\n ac_tree_checking=\n ac_rtl_checking=\n ac_rtlflag_checking=\n ac_gc_checking=\n ac_gc_always_collect=\n ac_fold_checking=\n-ac_assert_checking=\n-case \"${enableval}\" in\n-yes)\tac_checking=1 ; ac_tree_checking=1 ; ac_gc_checking=1 ;\n-\tac_rtlflag_checking=1 ; ac_assert_checking=1 ;;\n-no)\t;;\n-*)\tIFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n-\tset fnord $enableval; shift\n-\tIFS=\"$ac_save_IFS\"\n-\tac_assert_checking=1\n-\tfor check\n-\tdo\n-\t\tcase $check in\n-\t\tassert) ac_assert_checking=1 ;;\n-\t\tfold)\tac_fold_checking=1 ;;\n-\t\tgc)\tac_gc_checking=1 ;;\n-\t\tgcac)\tac_gc_always_collect=1 ;;\n-\t\tmisc)\tac_checking=1 ;;\n-\t\trtlflag)\tac_rtlflag_checking=1 ;;\n-\t\trtl)\tac_rtl_checking=1 ;;\n-\t\ttree)\tac_tree_checking=1 ;;\n-\t\tvalgrind)\tac_checking_valgrind=1 ;;\n-\t\t*)\tAC_MSG_ERROR(unknown check category $check) ;;\n-\t\tesac\n-\tdone\n-\t;;\n-esac\n-], [\n-# Determine the default checks.\n-if test x$is_release = x ; then\n-  # Enable some checks for development versions of GCC\n-  ac_assert_checking=1;\n-  ac_checking=1; ac_tree_checking=1; ac_gc_checking=1; ac_rtlflag_checking=1;\n-else\n-  # Disable all but assertions for release versions of GCC.\n-  ac_assert_checking=1;\n-fi])\n+IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n+for check in $ac_checking_flags\n+do\n+\tcase $check in\n+\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_rtlflag_checking=1 ;;\n+\tno)\t\tac_assert_checking= ; ac_checking= ;\n+\t\t\tac_tree_checking= ; ac_rtl_checking= ;\n+\t\t\tac_rtlflag_checking= ; ac_gc_checking= ;\n+\t\t\tac_gc_always_collect= ; ac_fold_checking= ;;\n+\tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\t\t\tac_tree_checking=1 ; ac_rtl_checking=1 ;\n+\t\t\tac_rtlflag_checking=1 ; ac_gc_checking=1 ;\n+\t\t\tac_gc_always_collect=1 ; ac_fold_checking=1 ;;\n+        release)\tac_assert_checking=1 ;;\n+\tassert) \tac_assert_checking=1 ;;\n+\tfold)\t\tac_fold_checking=1 ;;\n+\tgc)\t\tac_gc_checking=1 ;;\n+\tgcac)\t\tac_gc_always_collect=1 ;;\n+\tmisc)\t\tac_checking=1 ;;\n+\trtlflag)\tac_rtlflag_checking=1 ;;\n+\trtl)\t\tac_rtl_checking=1 ;;\n+\ttree)\t\tac_tree_checking=1 ;;\n+\tvalgrind)\tac_checking_valgrind=1 ;;\n+\t*)\tAC_MSG_ERROR(unknown check category $check) ;;\n+\tesac\n+done\n+IFS=\"$ac_save_IFS\"\n+\n nocommon_flag=\"\"\n if test x$ac_checking != x ; then\n   AC_DEFINE(ENABLE_CHECKING, 1,"}, {"sha": "dfad815d49afaca14cfd82b81c5e1b9a3a500ba0", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bbfc5cc2dd0458d1350df2e9055ef9d213d159/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e1bbfc5cc2dd0458d1350df2e9055ef9d213d159", "patch": "@@ -1099,17 +1099,21 @@ compiler and may only work properly if you are building the compiler\n with GCC@.  This is on by default when building from CVS or snapshots,\n but off for releases.  More control over the checks may be had by\n specifying @var{list}; the categories of checks available are\n-@samp{assert}, @samp{misc}, @samp{tree}, @samp{gc}, @samp{rtl},\n-@samp{rtlflag}, @samp{fold}, @samp{gcac} and @samp{valgrind}.  The check\n-@samp{valgrind} requires the external @command{valgrind} simulator,\n-available from @uref{http://valgrind.kde.org/}.  The default when\n-@var{list} is not specified is @samp{assert,misc,tree,gc,rtlflag}; the\n-checks @samp{rtl}, @samp{gcac} and @samp{valgrind} are very expensive.\n-When checking is neither explicitly enabled nor disabled, assertion\n-checks are still done.  To disable all checking,\n-@samp{--disable-checking} must be explicitly requested.  Disabling\n-assertions will make the compiler slightly faster but increase the risk\n-undetected internal errors causing wrong code to be generated.\n+@samp{release}, @samp{assert}, @samp{misc}, @samp{tree}, @samp{gc},\n+@samp{rtl}, @samp{rtlflag}, @samp{fold}, @samp{gcac} and\n+@samp{valgrind}.  The @samp{release} category enables only those checks\n+suitable for release builds, currently this is just @samp{assert}.  The\n+check @samp{valgrind} requires the external @command{valgrind}\n+simulator, available from @uref{http://valgrind.kde.org/}.  The checks\n+@samp{rtl}, @samp{gcac} and @samp{valgrind} are very expensive.  The\n+default when @var{list} is not specified is\n+@samp{assert,misc,tree,gc,rtlflag}.  That is also the default for\n+development builds, when @samp{--enable-checking} is not specified.  For\n+release builds the default, when @samp{--enable-checking} is not given,\n+is @samp{release}.  To disable all checking, @samp{--disable-checking}\n+must be explicitly requested.  Disabling assertions will make the\n+compiler slightly faster but increase the risk of undetected internal\n+errors causing wrong code to be generated.\n \n @item --enable-coverage\n @itemx --enable-coverage=@var{level}"}]}