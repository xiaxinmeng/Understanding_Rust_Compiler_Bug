{"sha": "eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyYWZhMWE4MDYxM2QzN2FhMTJmZGQ1YTA2MjRiNDVmZGVmOTM3Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-24T12:25:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-24T12:25:22Z"}, "message": "re PR tree-optimization/71595 (ICE on valid code at -O2 and -O3 on x86_64-linux-gnu: in check_loop_closed_ssa_use, at tree-ssa-loop-manip.c:704)\n\n2016-11-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71595\n\t* cfgloopmanip.h (remove_path): Add irred_invalidated and\n\tloop_closed_ssa_invalidated parameters, defaulted to NULL.\n\t* cfgloopmanip.c (remove_path): Likewise, pass them along to\n\tcalled functions.  Only fix irred flags if the caller didn't\n\trequest state.\n\t* tree-ssa-loop-ivcanon.c (unloop_loops): Use add_bb_to_loop.\n\t(unloop_loops): Pass irred_invalidated and loop_closed_ssa_invalidated\n\tto remove_path.\n\n\t* gcc.dg/torture/pr71595.c: New testcase.\n\nFrom-SVN: r242835", "tree": {"sha": "e719b1da7d230192f4964664cd374d04f8b94006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e719b1da7d230192f4964664cd374d04f8b94006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8fec87b11ecfad75f8cae7910e60e1a61ec61b"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "1676fe100d1017c0a1a78a73f72ba2cd0769eb0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "patch": "@@ -1,3 +1,15 @@\n+2016-11-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71595\n+\t* cfgloopmanip.h (remove_path): Add irred_invalidated and\n+\tloop_closed_ssa_invalidated parameters, defaulted to NULL.\n+\t* cfgloopmanip.c (remove_path): Likewise, pass them along to\n+\tcalled functions.  Only fix irred flags if the caller didn't\n+\trequest state.\n+\t* tree-ssa-loop-ivcanon.c (unloop_loops): Use add_bb_to_loop.\n+\t(unloop_loops): Pass irred_invalidated and loop_closed_ssa_invalidated\n+\tto remove_path.\n+\n 2016-11-24  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/78120"}, {"sha": "84b6b019bc92a53136097af4353cec8e66f3445d", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "patch": "@@ -298,16 +298,20 @@ fix_bb_placements (basic_block from,\n    and update loop structures and dominators.  Return true if we were able\n    to remove the path, false otherwise (and nothing is affected then).  */\n bool\n-remove_path (edge e)\n+remove_path (edge e, bool *irred_invalidated,\n+\t     bitmap loop_closed_ssa_invalidated)\n {\n   edge ae;\n   basic_block *rem_bbs, *bord_bbs, from, bb;\n   vec<basic_block> dom_bbs;\n   int i, nrem, n_bord_bbs;\n-  bool irred_invalidated = false;\n+  bool local_irred_invalidated = false;\n   edge_iterator ei;\n   struct loop *l, *f;\n \n+  if (! irred_invalidated)\n+    irred_invalidated = &local_irred_invalidated;\n+\n   if (!can_remove_branch_p (e))\n     return false;\n \n@@ -317,7 +321,7 @@ remove_path (edge e)\n      that is inside an irreducible region is changed, or if such a loop is\n      removed.  */\n   if (e->flags & EDGE_IRREDUCIBLE_LOOP)\n-    irred_invalidated = true;\n+    *irred_invalidated = true;\n \n   /* We need to check whether basic blocks are dominated by the edge\n      e, but we only have basic block dominators.  This is easy to\n@@ -334,7 +338,7 @@ remove_path (edge e)\n     {\n       f = loop_outer (l);\n       if (dominated_by_p (CDI_DOMINATORS, l->latch, e->dest))\n-        unloop (l, &irred_invalidated, NULL);\n+        unloop (l, irred_invalidated, loop_closed_ssa_invalidated);\n     }\n \n   /* Identify the path.  */\n@@ -348,13 +352,13 @@ remove_path (edge e)\n   /* Find \"border\" hexes -- i.e. those with predecessor in removed path.  */\n   for (i = 0; i < nrem; i++)\n     bitmap_set_bit (seen, rem_bbs[i]->index);\n-  if (!irred_invalidated)\n+  if (!*irred_invalidated)\n     FOR_EACH_EDGE (ae, ei, e->src->succs)\n       if (ae != e && ae->dest != EXIT_BLOCK_PTR_FOR_FN (cfun)\n \t  && !bitmap_bit_p (seen, ae->dest->index)\n \t  && ae->flags & EDGE_IRREDUCIBLE_LOOP)\n \t{\n-\t  irred_invalidated = true;\n+\t  *irred_invalidated = true;\n \t  break;\n \t}\n \n@@ -369,7 +373,7 @@ remove_path (edge e)\n \t    bord_bbs[n_bord_bbs++] = ae->dest;\n \n \t    if (ae->flags & EDGE_IRREDUCIBLE_LOOP)\n-\t      irred_invalidated = true;\n+\t      *irred_invalidated = true;\n \t  }\n     }\n \n@@ -411,10 +415,10 @@ remove_path (edge e)\n \n   /* Fix placements of basic blocks inside loops and the placement of\n      loops in the loop tree.  */\n-  fix_bb_placements (from, &irred_invalidated, NULL);\n-  fix_loop_placements (from->loop_father, &irred_invalidated);\n+  fix_bb_placements (from, irred_invalidated, loop_closed_ssa_invalidated);\n+  fix_loop_placements (from->loop_father, irred_invalidated);\n \n-  if (irred_invalidated\n+  if (local_irred_invalidated\n       && loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS))\n     mark_irreducible_loops ();\n "}, {"sha": "5c4552c5c433bb94bdfac90f87c76b74fa0c947d", "filename": "gcc/cfgloopmanip.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Fcfgloopmanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Fcfgloopmanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.h?ref=eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "patch": "@@ -34,7 +34,7 @@ enum\n \t\t\t\t\t   a complete peeling.  */\n extern edge mfb_kj_edge;\n \n-extern bool remove_path (edge);\n+extern bool remove_path (edge, bool * = NULL, bitmap = NULL);\n extern void place_new_loop (struct function *, struct loop *);\n extern void add_loop (struct loop *, struct loop *);\n extern void scale_loop_frequencies (struct loop *, int, int);"}, {"sha": "300106c19ffb6468556cb6e74bde3f2eee48d6df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "patch": "@@ -1,3 +1,8 @@\n+2016-11-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71595\n+\t* gcc.dg/torture/pr71595.c: New testcase.\n+\n 2016-11-24  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/78120"}, {"sha": "4202ad389e0317769b2f1724e5097e5ecada969b", "filename": "gcc/testsuite/gcc.dg/torture/pr71595.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71595.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71595.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71595.c?ref=eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+\n+int a, d, e, f, g, h;\n+static int b[][6] = { {0}, {0}, {1, 1}, {1} };\n+\n+void\n+fn1 ()\n+{\n+  for (; f; f++)\n+    if (g)\n+      {\n+\tfor (e = 0; e < 5; e++)\n+\t  if (b[e + 2][1])\n+\t    {\n+\t      h = b[2][e] ? 0 : a;\n+\t      d |= 4;\n+\t    }\n+\t  else\n+\t    return;\n+      }\n+}"}, {"sha": "906149602c990f4e80e6420d25014168d595e792", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2afa1a80613d37aa12fdd5a0624b45fdef9377/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=eb2afa1a80613d37aa12fdd5a0624b45fdef9377", "patch": "@@ -647,7 +647,7 @@ unloop_loops (bitmap loop_closed_ssa_invalidated,\n       latch_edge->flags |= flags;\n       latch_edge->goto_locus = locus;\n \n-      latch_edge->dest->loop_father = current_loops->tree_root;\n+      add_bb_to_loop (latch_edge->dest, current_loops->tree_root);\n       latch_edge->dest->count = 0;\n       latch_edge->dest->frequency = 0;\n       set_immediate_dominator (CDI_DOMINATORS, latch_edge->dest, latch_edge->src);\n@@ -663,7 +663,7 @@ unloop_loops (bitmap loop_closed_ssa_invalidated,\n   edge e;\n   FOR_EACH_VEC_ELT (edges_to_remove, i, e)\n     {\n-      bool ok = remove_path (e);\n+      bool ok = remove_path (e, irred_invalidated, loop_closed_ssa_invalidated);\n       gcc_assert (ok);\n     }\n   edges_to_remove.release ();"}]}