{"sha": "03148b8e508ea09ce62259ffb95844182c0b90c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxNDhiOGU1MDhlYTA5Y2U2MjI1OWZmYjk1ODQ0MTgyYzBiOTBjNg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-21T11:37:01Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-23T11:15:57Z"}, "message": "aarch64: Use memcpy to copy vector tables in vst2[q] intrinsics\n\nUse __builtin_memcpy to copy vector structures instead of building\na new opaque structure one vector at a time in each of the vst2[q]\nNeon intrinsics in arm_neon.h. This simplifies the header file and\nalso improves code generation - superfluous move instructions were\nemitted for every register extraction/set in this additional\nstructure.\n\nAdd new code generation tests to verify that superfluous move\ninstructions are no longer generated for the vst2q intrinsics.\n\ngcc/ChangeLog:\n\n2021-07-21  Jonathan Wrightt  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_neon.h (vst2_s64): Use __builtin_memcpy\n\tinstead of constructing __builtin_aarch64_simd_oi one vector\n\tat a time.\n\t(vst2_u64): Likewise.\n\t(vst2_f64): Likewise.\n\t(vst2_s8): Likewise.\n\t(vst2_p8): Likewise.\n\t(vst2_s16): Likewise.\n\t(vst2_p16): Likewise.\n\t(vst2_s32): Likewise.\n\t(vst2_u8): Likewise.\n\t(vst2_u16): Likewise.\n\t(vst2_u32): Likewise.\n\t(vst2_f16): Likewise.\n\t(vst2_f32): Likewise.\n\t(vst2_p64): Likewise.\n\t(vst2q_s8): Likewise.\n\t(vst2q_p8): Likewise.\n\t(vst2q_s16): Likewise.\n\t(vst2q_p16): Likewise.\n\t(vst2q_s32): Likewise.\n\t(vst2q_s64): Likewise.\n\t(vst2q_u8): Likewise.\n\t(vst2q_u16): Likewise.\n\t(vst2q_u32): Likewise.\n\t(vst2q_u64): Likewise.\n\t(vst2q_f16): Likewise.\n\t(vst2q_f32): Likewise.\n\t(vst2q_f64): Likewise.\n\t(vst2q_p64): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n\ttests.", "tree": {"sha": "f738a5360a73539c1164b1aafb52373b48295f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f738a5360a73539c1164b1aafb52373b48295f35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03148b8e508ea09ce62259ffb95844182c0b90c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03148b8e508ea09ce62259ffb95844182c0b90c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03148b8e508ea09ce62259ffb95844182c0b90c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03148b8e508ea09ce62259ffb95844182c0b90c6/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95509ee2c135c5338b0bb69bdce63e3b20420bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95509ee2c135c5338b0bb69bdce63e3b20420bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95509ee2c135c5338b0bb69bdce63e3b20420bd3"}], "stats": {"total": 104, "additions": 44, "deletions": 60}, "files": [{"sha": "0e4ab354a777ebe17406815cbfb2be490fae0a79", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 28, "deletions": 60, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03148b8e508ea09ce62259ffb95844182c0b90c6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03148b8e508ea09ce62259ffb95844182c0b90c6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=03148b8e508ea09ce62259ffb95844182c0b90c6", "patch": "@@ -27216,8 +27216,7 @@ vst2_s64 (int64_t * __a, int64x1x2_t __val)\n   int64x2x2_t __temp;\n   __temp.val[0] = vcombine_s64 (__val.val[0], vcreate_s64 (__AARCH64_INT64_C (0)));\n   __temp.val[1] = vcombine_s64 (__val.val[1], vcreate_s64 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -27229,8 +27228,7 @@ vst2_u64 (uint64_t * __a, uint64x1x2_t __val)\n   uint64x2x2_t __temp;\n   __temp.val[0] = vcombine_u64 (__val.val[0], vcreate_u64 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_u64 (__val.val[1], vcreate_u64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -27242,8 +27240,7 @@ vst2_f64 (float64_t * __a, float64x1x2_t __val)\n   float64x2x2_t __temp;\n   __temp.val[0] = vcombine_f64 (__val.val[0], vcreate_f64 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_f64 (__val.val[1], vcreate_f64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2df ((__builtin_aarch64_simd_df *) __a, __o);\n }\n \n@@ -27255,8 +27252,7 @@ vst2_s8 (int8_t * __a, int8x8x2_t __val)\n   int8x16x2_t __temp;\n   __temp.val[0] = vcombine_s8 (__val.val[0], vcreate_s8 (__AARCH64_INT64_C (0)));\n   __temp.val[1] = vcombine_s8 (__val.val[1], vcreate_s8 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27268,8 +27264,7 @@ vst2_p8 (poly8_t * __a, poly8x8x2_t __val)\n   poly8x16x2_t __temp;\n   __temp.val[0] = vcombine_p8 (__val.val[0], vcreate_p8 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_p8 (__val.val[1], vcreate_p8 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27281,8 +27276,7 @@ vst2_s16 (int16_t * __a, int16x4x2_t __val)\n   int16x8x2_t __temp;\n   __temp.val[0] = vcombine_s16 (__val.val[0], vcreate_s16 (__AARCH64_INT64_C (0)));\n   __temp.val[1] = vcombine_s16 (__val.val[1], vcreate_s16 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -27294,8 +27288,7 @@ vst2_p16 (poly16_t * __a, poly16x4x2_t __val)\n   poly16x8x2_t __temp;\n   __temp.val[0] = vcombine_p16 (__val.val[0], vcreate_p16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_p16 (__val.val[1], vcreate_p16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -27307,8 +27300,7 @@ vst2_s32 (int32_t * __a, int32x2x2_t __val)\n   int32x4x2_t __temp;\n   __temp.val[0] = vcombine_s32 (__val.val[0], vcreate_s32 (__AARCH64_INT64_C (0)));\n   __temp.val[1] = vcombine_s32 (__val.val[1], vcreate_s32 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -27320,8 +27312,7 @@ vst2_u8 (uint8_t * __a, uint8x8x2_t __val)\n   uint8x16x2_t __temp;\n   __temp.val[0] = vcombine_u8 (__val.val[0], vcreate_u8 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_u8 (__val.val[1], vcreate_u8 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27333,8 +27324,7 @@ vst2_u16 (uint16_t * __a, uint16x4x2_t __val)\n   uint16x8x2_t __temp;\n   __temp.val[0] = vcombine_u16 (__val.val[0], vcreate_u16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_u16 (__val.val[1], vcreate_u16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -27346,8 +27336,7 @@ vst2_u32 (uint32_t * __a, uint32x2x2_t __val)\n   uint32x4x2_t __temp;\n   __temp.val[0] = vcombine_u32 (__val.val[0], vcreate_u32 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_u32 (__val.val[1], vcreate_u32 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -27359,8 +27348,7 @@ vst2_f16 (float16_t * __a, float16x4x2_t __val)\n   float16x8x2_t __temp;\n   __temp.val[0] = vcombine_f16 (__val.val[0], vcreate_f16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_f16 (__val.val[1], vcreate_f16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v4hf (__a, __o);\n }\n \n@@ -27372,8 +27360,7 @@ vst2_f32 (float32_t * __a, float32x2x2_t __val)\n   float32x4x2_t __temp;\n   __temp.val[0] = vcombine_f32 (__val.val[0], vcreate_f32 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_f32 (__val.val[1], vcreate_f32 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2v2sf ((__builtin_aarch64_simd_sf *) __a, __o);\n }\n \n@@ -27385,10 +27372,7 @@ vst2_p64 (poly64_t * __a, poly64x1x2_t __val)\n   poly64x2x2_t __temp;\n   __temp.val[0] = vcombine_p64 (__val.val[0], vcreate_p64 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_p64 (__val.val[1], vcreate_p64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -27397,8 +27381,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_s8 (int8_t * __a, int8x16x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27407,8 +27390,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_p8 (poly8_t * __a, poly8x16x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27417,8 +27399,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_s16 (int16_t * __a, int16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -27427,8 +27408,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_p16 (poly16_t * __a, poly16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -27437,8 +27417,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_s32 (int32_t * __a, int32x4x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v4si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -27447,8 +27426,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_s64 (int64_t * __a, int64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -27457,8 +27435,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_u8 (uint8_t * __a, uint8x16x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27467,8 +27444,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_u16 (uint16_t * __a, uint16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -27477,8 +27453,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_u32 (uint32_t * __a, uint32x4x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v4si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -27487,8 +27462,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_u64 (uint64_t * __a, uint64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -27497,8 +27471,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_f16 (float16_t * __a, float16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v8hf (__a, __o);\n }\n \n@@ -27507,8 +27480,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_f32 (float32_t * __a, float32x4x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v4sf ((__builtin_aarch64_simd_sf *) __a, __o);\n }\n \n@@ -27517,8 +27489,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_f64 (float64_t * __a, float64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v2df ((__builtin_aarch64_simd_df *) __a, __o);\n }\n \n@@ -27527,10 +27498,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst2q_p64 (poly64_t * __a, poly64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st2v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n "}, {"sha": "5a6663a72e5f44014b1400e3cb64cb76fdd9f5d5", "filename": "gcc/testsuite/gcc.target/aarch64/vector_structure_intrinsics.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03148b8e508ea09ce62259ffb95844182c0b90c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03148b8e508ea09ce62259ffb95844182c0b90c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c?ref=03148b8e508ea09ce62259ffb95844182c0b90c6", "patch": "@@ -103,6 +103,21 @@ TEST_STX (vst4q, uint64x2x4_t, uint64_t*, u64);\n TEST_STX (vst4q, float64x2x4_t, float64_t*, f64);\n TEST_STX (vst4q, poly64x2x4_t, poly64_t*, p64);\n \n+TEST_STX (vst2q, int8x16x2_t, int8_t*, s8);\n+TEST_STX (vst2q, uint8x16x2_t, uint8_t*, u8);\n+TEST_STX (vst2q, poly8x16x2_t, poly8_t*, p8);\n+TEST_STX (vst2q, int16x8x2_t, int16_t*, s16);\n+TEST_STX (vst2q, uint16x8x2_t, uint16_t*, u16);\n+TEST_STX (vst2q, poly16x8x2_t, poly16_t*, p16);\n+TEST_STX (vst2q, float16x8x2_t, float16_t*, f16);\n+TEST_STX (vst2q, int32x4x2_t, int32_t*, s32);\n+TEST_STX (vst2q, uint32x4x2_t, uint32_t*, u32);\n+TEST_STX (vst2q, float32x4x2_t, float32_t*, f32);\n+TEST_STX (vst2q, int64x2x2_t, int64_t*, s64);\n+TEST_STX (vst2q, uint64x2x2_t, uint64_t*, u64);\n+TEST_STX (vst2q, float64x2x2_t, float64_t*, f64);\n+TEST_STX (vst2q, poly64x2x2_t, poly64_t*, p64);\n+\n #define TEST_ST3(name, tbltype, ptrtype, ts) \\\n   void test_ ## name ## _ ## ts (ptrtype a, int8x8_t dummy, tbltype b) \\\n \t{ \\\n@@ -130,3 +145,4 @@ TEST_ST3 (vst3q, poly64x2x3_t, poly64_t*, p64);\n /* { dg-final { scan-assembler-times \"tbx\\\\t\" 18} }  */\n /* { dg-final { scan-assembler-times \"st4\\\\t\" 14} }  */\n /* { dg-final { scan-assembler-times \"st3\\\\t\" 14} }  */\n+/* { dg-final { scan-assembler-times \"st2\\\\t\" 14} }  */"}]}