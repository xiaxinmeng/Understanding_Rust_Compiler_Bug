{"sha": "d371802725867b21958d4457cb7a796b6399935b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3MTgwMjcyNTg2N2IyMTk1OGQ0NDU3Y2I3YTc5NmI2Mzk5OTM1Yg==", "commit": {"author": {"name": "R\u00fcdiger Sonderfeld", "email": "ruediger@c-plusplus.de", "date": "2014-06-02T13:55:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-06-02T13:55:14Z"}, "message": "type_traits (__strictest_alignment): New helper struct.\n\n2014-06-02  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* libstdc++-v3/include/std/type_traits (__strictest_alignment): New\n\thelper struct.\n\t(aligned_union): New struct (C++11).\n\t(aligned_union_t): New type alias (C++14).\n\t* doc/xml/manual/status_cxx2011.xml: Update.\n\t* libstdc++-v3/testsuite/20_util/aligned_union/1.cc: New file.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline number.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r211137", "tree": {"sha": "e9fc3e80b1487ecccbd9641ea6015917edb45f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9fc3e80b1487ecccbd9641ea6015917edb45f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d371802725867b21958d4457cb7a796b6399935b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d371802725867b21958d4457cb7a796b6399935b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d371802725867b21958d4457cb7a796b6399935b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d371802725867b21958d4457cb7a796b6399935b/comments", "author": {"login": "ruediger", "id": 1803, "node_id": "MDQ6VXNlcjE4MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruediger", "html_url": "https://github.com/ruediger", "followers_url": "https://api.github.com/users/ruediger/followers", "following_url": "https://api.github.com/users/ruediger/following{/other_user}", "gists_url": "https://api.github.com/users/ruediger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruediger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruediger/subscriptions", "organizations_url": "https://api.github.com/users/ruediger/orgs", "repos_url": "https://api.github.com/users/ruediger/repos", "events_url": "https://api.github.com/users/ruediger/events{/privacy}", "received_events_url": "https://api.github.com/users/ruediger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae48824a7975ef0bdde6d7a57f99f8b72bbf62dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae48824a7975ef0bdde6d7a57f99f8b72bbf62dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae48824a7975ef0bdde6d7a57f99f8b72bbf62dc"}], "stats": {"total": 140, "additions": 136, "deletions": 4}, "files": [{"sha": "885718fb5dd8d77c7408aee272c5e358bbbca807", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d371802725867b21958d4457cb7a796b6399935b", "patch": "@@ -1,3 +1,15 @@\n+2014-06-02  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libstdc++-v3/include/std/type_traits (__strictest_alignment): New\n+\thelper struct.\n+\t(aligned_union): New struct (C++11).\n+\t(aligned_union_t): New type alias (C++14).\n+\t* doc/xml/manual/status_cxx2011.xml: Update.\n+\t* libstdc++-v3/testsuite/20_util/aligned_union/1.cc: New file.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2014-06-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/61374"}, {"sha": "cad41112505b1a7834fe3b12dc22bad979d3cfcd", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=d371802725867b21958d4457cb7a796b6399935b", "patch": "@@ -871,11 +871,10 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>20.9.7.6</entry>\n       <entry>Other transformations</entry>\n-      <entry>Partial</entry>\n-      <entry>Missing <code>aligned_union</code>.</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <entry>20.10</entry>"}, {"sha": "da8a95f034ea48d8c52fd760b74670823bad1347", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=d371802725867b21958d4457cb7a796b6399935b", "patch": "@@ -1870,6 +1870,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n     };\n \n+  template <typename... _Types>\n+    struct __strictest_alignment\n+    {\n+      static const size_t _S_alignment = 0;\n+      static const size_t _S_size = 0;\n+    };\n+\n+  template <typename _Tp, typename... _Types>\n+    struct __strictest_alignment<_Tp, _Types...>\n+    {\n+      static const size_t _S_alignment =\n+        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment\n+\t? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;\n+      static const size_t _S_size =\n+        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size\n+\t? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;\n+    };\n+\n+  /**\n+   *  @brief Provide aligned storage for types.\n+   *\n+   *  [meta.trans.other]\n+   *\n+   *  Provides aligned storage for any of the provided types of at\n+   *  least size _Len.\n+   *\n+   *  @see aligned_storage\n+   */\n+  template <size_t _Len, typename... _Types>\n+    struct aligned_union\n+    {\n+    private:\n+      static_assert(sizeof...(_Types) != 0, \"At least one type is required\");\n+\n+      using __strictest = __strictest_alignment<_Types...>;\n+      static const size_t _S_len = _Len > __strictest::_S_size\n+\t? _Len : __strictest::_S_size;\n+    public:\n+      /// The value of the strictest alignment of _Types.\n+      static const size_t alignment_value = __strictest::_S_alignment;\n+      /// The storage.\n+      typedef typename aligned_storage<_S_len, alignment_value>::type type;\n+    };\n+\n+  template <size_t _Len, typename... _Types>\n+    const size_t aligned_union<_Len, _Types...>::alignment_value;\n \n   // Decay trait for arrays and functions, used for perfect forwarding\n   // in make_pair, make_tuple, etc.\n@@ -2206,6 +2252,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __alignof__(typename __aligned_storage_msa<_Len>::__type)>\n     using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;\n \n+  template <size_t _Len, typename... _Types>\n+    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;\n+\n   /// Alias template for decay\n   template<typename _Tp>\n     using decay_t = typename decay<_Tp>::type;"}, {"sha": "5285bb044fc5b432d2b92fffba4cd610b6434fcd", "filename": "libstdc++-v3/testsuite/20_util/aligned_union/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_union%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_union%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Faligned_union%2F1.cc?ref=d371802725867b21958d4457cb7a796b6399935b", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \" -std=gnu++11 \" }\n+// { dg-do compile }\n+\n+// 2014-04-16 R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 [meta.trans.other] 20.9.7.6: aligned_union\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct MSAlignType { } __attribute__((__aligned__));\n+\n+template<typename...T>\n+  struct mymax\n+  {\n+    static const std::size_t alignment = 0;\n+    static const std::size_t size = 0;\n+  };\n+\n+template<typename L,  typename...T>\n+  struct mymax<L, T...>\n+  {\n+    static const std::size_t alignment = alignof(L) > mymax<T...>::alignment\n+      ? alignof(L) : mymax<T...>::alignment;\n+    static const std::size_t size = sizeof(L) > mymax<T...>::size\n+      ? sizeof(L) : mymax<T...>::size;\n+  };\n+\n+void test01()\n+{\n+  using std::aligned_union;\n+  using std::alignment_of;\n+  using std::size_t;\n+  using namespace __gnu_test;\n+\n+  const size_t max_a = mymax<char, short, int, double, int[4],\n+                             ClassType, MSAlignType>::alignment;\n+  const size_t max_s = mymax<char, short, int, double, int[4],\n+                             ClassType, MSAlignType>::size;\n+\n+  typedef aligned_union<0, char, short, int, double, int[4],\n+                        ClassType, MSAlignType> au_type;\n+  static_assert(au_type::alignment_value == max_a, \"Alignment value\");\n+  static_assert(sizeof(au_type::type) >= max_s, \"Storage size\");\n+\n+  typedef aligned_union<max_s+100, char, short, int, double, int[4],\n+                        ClassType, MSAlignType> au_type2;\n+  static_assert(sizeof(au_type2::type) >= max_s+100,\n+                \"Storage size (at least len)\");\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "774858cafdc32e03ce9eaddb8adf89edb87de469", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371802725867b21958d4457cb7a796b6399935b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=d371802725867b21958d4457cb7a796b6399935b", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2036 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2082 }\n \n #include <utility>\n "}]}