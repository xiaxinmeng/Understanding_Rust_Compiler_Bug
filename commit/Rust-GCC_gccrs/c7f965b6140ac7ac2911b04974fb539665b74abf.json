{"sha": "c7f965b6140ac7ac2911b04974fb539665b74abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmOTY1YjYxNDBhYzdhYzI5MTFiMDQ5NzRmYjUzOTY2NWI3NGFiZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2006-09-06T06:13:22Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-09-06T06:13:22Z"}, "message": "re PR tree-optimization/28937 (ICE in add_virtual_operand, at tree-ssa-operands.c:1309)\n\n2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/28937\n        * tree-flow.h (tree_ssa_unswitch_loops): Return unsigned int.\n        (canonicalize_induction_variables): Likewise.\n        (tree_unroll_loops_completely): Likewise.\n        (tree_ssa_prefetch_arrays): Likewise.\n        (remove_empty_loops): Likewise.\n        * tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Return\n        TODO_cleanup_cfg instead of directly calling\n        cleanup_tree_cfg_loop.\n        * tree-ssa-loop-ivcanon.c (canonicalize_induction_variables):\n        Likewise.\n        (tree_unroll_loops_completely): Likewise.\n        (remove_empty_loops): Likewise.\n        * tree-ssa-loop-prefetch.c (tree_ssa_prefetch_arrays): Likewise.\n        * tree-ssa-loop.c (tree_ssa_loop_unswitch): Use the return value\n        of tree_ssa_unswitch_loops.\n        (tree_ssa_loop_ivcanon): Use the return value of\n        canonicalize_induction_variables.\n        (tree_ssa_empty_loop): Use the return value of\n        remove_empty_loops.\n        (tree_complete_unroll): Use the return value of\n        tree_unroll_loops_completely.\n        (tree_ssa_loop_prefetch): Use the return value of\n        tree_ssa_prefetch_arrays.\n        * passes.c (execute_todo): Before Cleanup CFG, set\n        updating_used_alone and after cleanup CFG, call\n        recalculate_used_alone.\n2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/28937\n        * g++.dg/opt/unroll2.C: New test.\n\nFrom-SVN: r116717", "tree": {"sha": "528bb95b3e49e65e4c30b14572ac1d30ded632cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/528bb95b3e49e65e4c30b14572ac1d30ded632cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f965b6140ac7ac2911b04974fb539665b74abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f965b6140ac7ac2911b04974fb539665b74abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f965b6140ac7ac2911b04974fb539665b74abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f965b6140ac7ac2911b04974fb539665b74abf/comments", "author": null, "committer": null, "parents": [{"sha": "10b96810c0f327303ac9a7c1519848f4c51f8eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b96810c0f327303ac9a7c1519848f4c51f8eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b96810c0f327303ac9a7c1519848f4c51f8eca"}], "stats": {"total": 128, "additions": 99, "deletions": 29}, "files": [{"sha": "e307ba81706ffe7b3366b1cc7a367d1064bcd10e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -1,3 +1,34 @@\n+2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/28937\n+\t* tree-flow.h (tree_ssa_unswitch_loops): Return unsigned int.\n+\t(canonicalize_induction_variables): Likewise.\n+\t(tree_unroll_loops_completely): Likewise.\n+\t(tree_ssa_prefetch_arrays): Likewise.\n+\t(remove_empty_loops): Likewise.\n+\t* tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Return\n+\tTODO_cleanup_cfg instead of directly calling\n+\tcleanup_tree_cfg_loop.\n+\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables):\n+\tLikewise.\n+\t(tree_unroll_loops_completely): Likewise.\n+\t(remove_empty_loops): Likewise.\n+\t* tree-ssa-loop-prefetch.c (tree_ssa_prefetch_arrays): Likewise.\n+\t* tree-ssa-loop.c (tree_ssa_loop_unswitch): Use the return value\n+\tof tree_ssa_unswitch_loops.\n+\t(tree_ssa_loop_ivcanon): Use the return value of\n+\tcanonicalize_induction_variables.\n+\t(tree_ssa_empty_loop): Use the return value of\n+\tremove_empty_loops.\n+\t(tree_complete_unroll): Use the return value of\n+\ttree_unroll_loops_completely.\n+\t(tree_ssa_loop_prefetch): Use the return value of\n+\ttree_ssa_prefetch_arrays.\n+\t* passes.c (execute_todo): Before Cleanup CFG, set\n+\tupdating_used_alone and after cleanup CFG, call\n+\trecalculate_used_alone.\n+\n+\n 2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/28952"}, {"sha": "46e4756e84db6c5ffe1eb2fc8d5df686b94cb261", "filename": "gcc/passes.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -727,11 +727,17 @@ execute_todo (unsigned int flags)\n   /* Always cleanup the CFG before trying to update SSA .  */\n   if (flags & TODO_cleanup_cfg)\n     {\n+      /* CFG Cleanup can cause a constant to prop into an ARRAY_REF.  */\n+      updating_used_alone = true;\n+\n       if (current_loops)\n \tcleanup_tree_cfg_loop ();\n       else\n \tcleanup_tree_cfg ();\n \n+      /* Update the used alone after cleanup cfg.  */\n+      recalculate_used_alone ();\n+\n       /* When cleanup_tree_cfg merges consecutive blocks, it may\n \t perform some simplistic propagation when removing single\n \t valued PHI nodes.  This propagation may, in turn, cause the"}, {"sha": "5f11f19baf65e9c3d4f52b474712af45874ce79d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -1,3 +1,8 @@\n+2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/28937\n+\t* g++.dg/opt/unroll2.C: New test.\n+\n 2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/28952"}, {"sha": "82a1e7f56d8da32edf861f794fa276293bbc67ce", "filename": "gcc/testsuite/g++.dg/opt/unroll2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Funroll2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Funroll2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Funroll2.C?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -0,0 +1,27 @@\n+// PR tree-opt/28937\n+// Complete unroll forgot to update the statement usage\n+// which meant we ICEd in add_virtual_operand.\n+\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+\n+class SHA256\n+{\n+  unsigned m_digest;\n+  unsigned long long m_count;\n+  unsigned char _buffer[64];\n+  static void Transform (unsigned * data);\n+  void WriteByteBlock (unsigned t);\n+};\n+void SHA256::WriteByteBlock (unsigned t)\n+{\n+  unsigned data32[16];\n+  Transform (data32);\n+  unsigned long long lenInBits = m_count;\n+  if (t != (64 - 8))\n+    return;\n+  for (int i = 0; i < 2; i++)\n+          _buffer[t++] = (unsigned char)lenInBits;\n+}\n+"}, {"sha": "5156bad032502903001ae4d1c2247b31f63a56e4", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -798,11 +798,11 @@ bool empty_block_p (basic_block);\n /* In tree-ssa-loop*.c  */\n \n void tree_ssa_lim (struct loops *);\n-void tree_ssa_unswitch_loops (struct loops *);\n-void canonicalize_induction_variables (struct loops *);\n-void tree_unroll_loops_completely (struct loops *, bool);\n-void tree_ssa_prefetch_arrays (struct loops *);\n-void remove_empty_loops (struct loops *);\n+unsigned int tree_ssa_unswitch_loops (struct loops *);\n+unsigned int canonicalize_induction_variables (struct loops *);\n+unsigned int tree_unroll_loops_completely (struct loops *, bool);\n+unsigned int tree_ssa_prefetch_arrays (struct loops *);\n+unsigned int remove_empty_loops (struct loops *);\n void tree_ssa_iv_optimize (struct loops *);\n \n bool number_of_iterations_exit (struct loop *, edge,"}, {"sha": "a56679d3239d876bb26f9a71761731819fbfa56b", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -330,7 +330,7 @@ canonicalize_loop_induction_variables (struct loops *loops, struct loop *loop,\n /* The main entry point of the pass.  Adds canonical induction variables\n    to the suitable LOOPS.  */\n \n-void\n+unsigned int\n canonicalize_induction_variables (struct loops *loops)\n {\n   unsigned i;\n@@ -352,14 +352,15 @@ canonicalize_induction_variables (struct loops *loops)\n   scev_reset ();\n \n   if (changed)\n-    cleanup_tree_cfg_loop ();\n+    return TODO_cleanup_cfg;\n+  return 0;\n }\n \n /* Unroll LOOPS completely if they iterate just few times.  Unless\n    MAY_INCREASE_SIZE is true, perform the unrolling only if the\n    size of the code does not increase.  */\n \n-void\n+unsigned int\n tree_unroll_loops_completely (struct loops *loops, bool may_increase_size)\n {\n   unsigned i;\n@@ -388,7 +389,8 @@ tree_unroll_loops_completely (struct loops *loops, bool may_increase_size)\n   scev_reset ();\n \n   if (changed)\n-    cleanup_tree_cfg_loop ();\n+    return TODO_cleanup_cfg;\n+  return 0;\n }\n \n /* Checks whether LOOP is empty.  */\n@@ -562,7 +564,7 @@ try_remove_empty_loop (struct loop *loop, bool *changed)\n \n /* Remove the empty LOOPS.  */\n \n-void\n+unsigned int\n remove_empty_loops (struct loops *loops)\n {\n   bool changed = false;\n@@ -574,6 +576,7 @@ remove_empty_loops (struct loops *loops)\n   if (changed)\n     {\n       scev_reset ();\n-      cleanup_tree_cfg_loop ();\n+      return TODO_cleanup_cfg;\n     }\n+  return 0;\n }"}, {"sha": "9340bbb4029ef97fda9fa13c14fdb848f62dd9b4", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -1006,20 +1006,21 @@ loop_prefetch_arrays (struct loops *loops, struct loop *loop)\n \n /* Issue prefetch instructions for array references in LOOPS.  */\n \n-void\n+unsigned int\n tree_ssa_prefetch_arrays (struct loops *loops)\n {\n   unsigned i;\n   struct loop *loop;\n   bool unrolled = false;\n+  int todo_flags = 0;\n \n   if (!HAVE_prefetch\n       /* It is possible to ask compiler for say -mtune=i486 -march=pentium4.\n \t -mtune=i486 causes us having PREFETCH_BLOCK 0, since this is part\n \t of processor costs and i486 does not have prefetch, but\n \t -march=pentium4 causes HAVE_prefetch to be true.  Ugh.  */\n       || PREFETCH_BLOCK == 0)\n-    return;\n+    return 0;\n \n   initialize_original_copy_tables ();\n \n@@ -1057,8 +1058,9 @@ tree_ssa_prefetch_arrays (struct loops *loops)\n   if (unrolled)\n     {\n       scev_reset ();\n-      cleanup_tree_cfg_loop ();\n+      todo_flags |= TODO_cleanup_cfg;\n     }\n \n   free_original_copy_tables ();\n+  return todo_flags;\n }"}, {"sha": "d9102b284b6739834c77dc44d9b8e2f683b3f965", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -80,7 +80,7 @@ static tree tree_may_unswitch_on (basic_block, struct loop *);\n \n /* Main entry point.  Perform loop unswitching on all suitable LOOPS.  */\n \n-void\n+unsigned int\n tree_ssa_unswitch_loops (struct loops *loops)\n {\n   int i, num;\n@@ -104,7 +104,8 @@ tree_ssa_unswitch_loops (struct loops *loops)\n     }\n \n   if (changed)\n-    cleanup_tree_cfg_loop ();\n+    return TODO_cleanup_cfg;\n+  return 0;\n }\n \n /* Checks whether we can unswitch LOOP on condition at end of BB -- one of its"}, {"sha": "475f31e3ba855f0b6be96f40974e45076a08a3c5", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f965b6140ac7ac2911b04974fb539665b74abf/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=c7f965b6140ac7ac2911b04974fb539665b74abf", "patch": "@@ -158,8 +158,7 @@ tree_ssa_loop_unswitch (void)\n   if (!current_loops)\n     return 0;\n \n-  tree_ssa_unswitch_loops (current_loops);\n-  return 0;\n+  return tree_ssa_unswitch_loops (current_loops);\n }\n \n static bool\n@@ -260,8 +259,7 @@ tree_ssa_loop_ivcanon (void)\n   if (!current_loops)\n     return 0;\n \n-  canonicalize_induction_variables (current_loops);\n-  return 0;\n+  return canonicalize_induction_variables (current_loops);\n }\n \n static bool\n@@ -322,8 +320,7 @@ tree_ssa_empty_loop (void)\n   if (!current_loops)\n     return 0;\n \n-  remove_empty_loops (current_loops);\n-  return 0;\n+  return remove_empty_loops (current_loops);\n }\n \n struct tree_opt_pass pass_empty_loop =\n@@ -381,11 +378,10 @@ tree_complete_unroll (void)\n   if (!current_loops)\n     return 0;\n \n-  tree_unroll_loops_completely (current_loops,\n-\t\t\t\tflag_unroll_loops\n-\t\t\t\t|| flag_peel_loops\n-\t\t\t\t|| optimize >= 3);\n-  return 0;\n+  return tree_unroll_loops_completely (current_loops,\n+\t\t\t\t       flag_unroll_loops\n+\t\t\t\t\t|| flag_peel_loops\n+\t\t\t\t\t|| optimize >= 3);\n }\n \n static bool\n@@ -419,8 +415,7 @@ tree_ssa_loop_prefetch (void)\n   if (!current_loops)\n     return 0;\n \n-  tree_ssa_prefetch_arrays (current_loops);\n-  return 0;\n+  return tree_ssa_prefetch_arrays (current_loops);\n }\n \n static bool"}]}