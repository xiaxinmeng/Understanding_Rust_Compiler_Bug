{"sha": "e4881f234282275033295e6ed76be02c5f42bbc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ4ODFmMjM0MjgyMjc1MDMzMjk1ZTZlZDc2YmUwMmM1ZjQyYmJjMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-03-14T18:11:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-03-14T18:11:11Z"}, "message": "Makefile.in (reg-stack.o): Don't depend on gt-reg-stack.h.\n\n\t* Makefile.in (reg-stack.o): Don't depend on gt-reg-stack.h.\n\t* reg-stack.c (stack_regs_mentioned_data): Change the type to\n\tVEC(char,heap) *.\n\t(stack_regs_mentioned): Update the uses of\n\tstack_regs_mentioned_data.  Don't access the array beyond its\n\tend.\n\t(reg_to_stack): Update the uses of stack_regs_mentioned_data.\n\tDon't include gt-reg-stack.h.\n\nFrom-SVN: r112060", "tree": {"sha": "ba26be5febaa75b9f0f98497149c7028e94907e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba26be5febaa75b9f0f98497149c7028e94907e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4881f234282275033295e6ed76be02c5f42bbc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4881f234282275033295e6ed76be02c5f42bbc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4881f234282275033295e6ed76be02c5f42bbc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4881f234282275033295e6ed76be02c5f42bbc3/comments", "author": null, "committer": null, "parents": [{"sha": "69d1a403420aea41cd6ce81087e1e388c571118e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d1a403420aea41cd6ce81087e1e388c571118e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69d1a403420aea41cd6ce81087e1e388c571118e"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "441819c5954a3dcf91d8bd104ac423c7bced3eb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4881f234282275033295e6ed76be02c5f42bbc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4881f234282275033295e6ed76be02c5f42bbc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4881f234282275033295e6ed76be02c5f42bbc3", "patch": "@@ -1,3 +1,14 @@\n+2006-03-14  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* Makefile.in (reg-stack.o): Don't depend on gt-reg-stack.h.\n+\t* reg-stack.c (stack_regs_mentioned_data): Change the type to\n+\tVEC(char,heap) *.\n+\t(stack_regs_mentioned): Update the uses of\n+\tstack_regs_mentioned_data.  Don't access the array beyond its\n+\tend.\n+\t(reg_to_stack): Update the uses of stack_regs_mentioned_data.\n+\tDon't include gt-reg-stack.h.\n+\n 2006-03-14  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa/pa32-linux.h (CRT_CALL_STATIC_FUNCTION): Fix typo."}, {"sha": "4552eff5d3bedb45fbe704e394e31e5bbe4ab981", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4881f234282275033295e6ed76be02c5f42bbc3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4881f234282275033295e6ed76be02c5f42bbc3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e4881f234282275033295e6ed76be02c5f42bbc3", "patch": "@@ -2544,7 +2544,7 @@ recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n    insn-config.h toplev.h reload.h $(FUNCTION_H) $(TM_P_H) $(GGC_H) \\\n-   gt-reg-stack.h $(BASIC_BLOCK_H) output.h $(VARRAY_H) timevar.h tree-pass.h \\\n+   $(BASIC_BLOCK_H) output.h $(VARRAY_H) timevar.h tree-pass.h \\\n    target.h\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n@@ -2845,7 +2845,7 @@ gt-function.h gt-integrate.h gt-tree.h gt-varasm.h \\\n gt-emit-rtl.h gt-explow.h gt-stor-layout.h gt-regclass.h \\\n gt-lists.h gt-alias.h gt-cselib.h gt-gcse.h \\\n gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h gt-dojump.h \\\n-gt-dwarf2out.h gt-reg-stack.h gt-dwarf2asm.h \\\n+gt-dwarf2out.h gt-dwarf2asm.h \\\n gt-dbxout.h \\\n gtype-c.h gt-cfglayout.h \\\n gt-tree-mudflap.h gt-tree-vect-generic.h \\"}, {"sha": "f77b2b3f31339520e7d12c537bbc2fac80ca995b", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4881f234282275033295e6ed76be02c5f42bbc3/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4881f234282275033295e6ed76be02c5f42bbc3/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=e4881f234282275033295e6ed76be02c5f42bbc3", "patch": "@@ -174,13 +174,16 @@\n #include \"tree-pass.h\"\n #include \"target.h\"\n \n+DEF_VEC_I(char);\n+DEF_VEC_ALLOC_I(char,heap);\n+\n /* We use this array to cache info about insns, because otherwise we\n    spend too much time in stack_regs_mentioned_p.\n \n    Indexed by insn UIDs.  A value of zero is uninitialized, one indicates\n    the insn uses stack registers, two indicates the insn does not use\n    stack registers.  */\n-static GTY(()) varray_type stack_regs_mentioned_data;\n+static VEC(char,heap) *stack_regs_mentioned_data;\n \n #ifdef STACK_REGS\n \n@@ -309,21 +312,27 @@ stack_regs_mentioned (rtx insn)\n     return 0;\n \n   uid = INSN_UID (insn);\n-  max = VARRAY_SIZE (stack_regs_mentioned_data);\n+  max = VEC_length (char, stack_regs_mentioned_data);\n   if (uid >= max)\n     {\n+      char *p;\n+      unsigned int old_max = max;\n+\n       /* Allocate some extra size to avoid too many reallocs, but\n \t do not grow too quickly.  */\n-      max = uid + uid / 20;\n-      VARRAY_GROW (stack_regs_mentioned_data, max);\n+      max = uid + uid / 20 + 1;\n+      VEC_safe_grow (char, heap, stack_regs_mentioned_data, max);\n+      p = VEC_address (char, stack_regs_mentioned_data);\n+      memset (&p[old_max], 0,\n+\t      sizeof (char) * (max - old_max));\n     }\n \n-  test = VARRAY_CHAR (stack_regs_mentioned_data, uid);\n+  test = VEC_index (char, stack_regs_mentioned_data, uid);\n   if (test == 0)\n     {\n       /* This insn has yet to be examined.  Do so now.  */\n       test = stack_regs_mentioned_p (PATTERN (insn)) ? 1 : 2;\n-      VARRAY_CHAR (stack_regs_mentioned_data, uid) = test;\n+      VEC_replace (char, stack_regs_mentioned_data, uid, test);\n     }\n \n   return test == 1;\n@@ -3031,7 +3040,8 @@ reg_to_stack (void)\n   int max_uid;\n \n   /* Clean up previous run.  */\n-  stack_regs_mentioned_data = 0;\n+  if (stack_regs_mentioned_data != NULL)\n+    VEC_free (char, heap, stack_regs_mentioned_data);\n \n   /* See if there is something to do.  Flow analysis is quite\n      expensive so we might save some compilation time.  */\n@@ -3114,8 +3124,9 @@ reg_to_stack (void)\n \n   /* Allocate a cache for stack_regs_mentioned.  */\n   max_uid = get_max_uid ();\n-  VARRAY_CHAR_INIT (stack_regs_mentioned_data, max_uid + 1,\n-\t\t    \"stack_regs_mentioned cache\");\n+  stack_regs_mentioned_data = VEC_alloc (char, heap, max_uid + 1);\n+  memset (VEC_address (char, stack_regs_mentioned_data),\n+\t  0, sizeof (char) * max_uid + 1);\n \n   convert_regs ();\n \n@@ -3171,5 +3182,3 @@ struct tree_opt_pass pass_stack_regs =\n   TODO_ggc_collect,                     /* todo_flags_finish */\n   'k'                                   /* letter */\n };\n-\n-#include \"gt-reg-stack.h\""}]}