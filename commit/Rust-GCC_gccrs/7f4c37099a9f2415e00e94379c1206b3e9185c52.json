{"sha": "7f4c37099a9f2415e00e94379c1206b3e9185c52", "node_id": "C_kwDOANBUbNoAKDdmNGMzNzA5OWE5ZjI0MTVlMDBlOTQzNzljMTIwNmIzZTkxODVjNTI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T20:29:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T20:35:43Z"}, "message": "libstdc++: Move allocator-related helpers to <bits/alloc_traits.h>\n\nThe __alloc_swap and __shrink_to_fit_aux helpers are not specific to\nstd::allocator, so don't belong in <bits/allocator.h>. This also\nsimplifies enabling <memory> for freestanding, as now we can just omit\nthe whole of <bits/allocator.h> for freestanding.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/alloc_traits.h (__alloc_swap)\n\t(__shrink_to_fit_aux): Move here, from ...\n\t* include/bits/allocator.h: ... here.\n\t* include/ext/alloc_traits.h: Do not include allocator.h.", "tree": {"sha": "46203524fb4fd555fe0f3076eadab432384a5eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46203524fb4fd555fe0f3076eadab432384a5eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f4c37099a9f2415e00e94379c1206b3e9185c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c37099a9f2415e00e94379c1206b3e9185c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f4c37099a9f2415e00e94379c1206b3e9185c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c37099a9f2415e00e94379c1206b3e9185c52/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d31e19e44009ef645f0a120043c7f84d0450b4c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31e19e44009ef645f0a120043c7f84d0450b4c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31e19e44009ef645f0a120043c7f84d0450b4c9"}], "stats": {"total": 102, "additions": 48, "deletions": 54}, "files": [{"sha": "35bdf6ecf98e74a8fcbc4fb39bbd4655643cc0da", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c37099a9f2415e00e94379c1206b3e9185c52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c37099a9f2415e00e94379c1206b3e9185c52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=7f4c37099a9f2415e00e94379c1206b3e9185c52", "patch": "@@ -824,6 +824,54 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @cond undocumented\n \n+  // To implement Option 3 of DR 431.\n+  template<typename _Alloc, bool = __is_empty(_Alloc)>\n+    struct __alloc_swap\n+    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };\n+\n+  template<typename _Alloc>\n+    struct __alloc_swap<_Alloc, false>\n+    {\n+      static void\n+      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT\n+      {\n+\t// Precondition: swappable allocators.\n+\tif (__one != __two)\n+\t  swap(__one, __two);\n+      }\n+    };\n+\n+#if __cplusplus >= 201103L\n+  template<typename _Tp, bool\n+    = __or_<is_copy_constructible<typename _Tp::value_type>,\n+            is_nothrow_move_constructible<typename _Tp::value_type>>::value>\n+    struct __shrink_to_fit_aux\n+    { static bool _S_do_it(_Tp&) noexcept { return false; } };\n+\n+  template<typename _Tp>\n+    struct __shrink_to_fit_aux<_Tp, true>\n+    {\n+      _GLIBCXX20_CONSTEXPR\n+      static bool\n+      _S_do_it(_Tp& __c) noexcept\n+      {\n+#if __cpp_exceptions\n+\ttry\n+\t  {\n+\t    _Tp(__make_move_if_noexcept_iterator(__c.begin()),\n+\t\t__make_move_if_noexcept_iterator(__c.end()),\n+\t\t__c.get_allocator()).swap(__c);\n+\t    return true;\n+\t  }\n+\tcatch(...)\n+\t  { return false; }\n+#else\n+\treturn false;\n+#endif\n+      }\n+    };\n+#endif\n+\n   /**\n    * Destroy a range of objects using the supplied allocator.  For\n    * non-default allocators we do not optimize away invocation of"}, {"sha": "54f5acf85d7a6583b05ee2952546d7a1a95d26b9", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c37099a9f2415e00e94379c1206b3e9185c52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c37099a9f2415e00e94379c1206b3e9185c52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=7f4c37099a9f2415e00e94379c1206b3e9185c52", "patch": "@@ -279,57 +279,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Undefine.\n #undef __allocator_base\n \n-  /// @cond undocumented\n-\n-  // To implement Option 3 of DR 431.\n-  template<typename _Alloc, bool = __is_empty(_Alloc)>\n-    struct __alloc_swap\n-    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };\n-\n-  template<typename _Alloc>\n-    struct __alloc_swap<_Alloc, false>\n-    {\n-      static void\n-      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT\n-      {\n-\t// Precondition: swappable allocators.\n-\tif (__one != __two)\n-\t  swap(__one, __two);\n-      }\n-    };\n-\n-#if __cplusplus >= 201103L\n-  template<typename _Tp, bool\n-    = __or_<is_copy_constructible<typename _Tp::value_type>,\n-            is_nothrow_move_constructible<typename _Tp::value_type>>::value>\n-    struct __shrink_to_fit_aux\n-    { static bool _S_do_it(_Tp&) noexcept { return false; } };\n-\n-  template<typename _Tp>\n-    struct __shrink_to_fit_aux<_Tp, true>\n-    {\n-      _GLIBCXX20_CONSTEXPR\n-      static bool\n-      _S_do_it(_Tp& __c) noexcept\n-      {\n-#if __cpp_exceptions\n-\ttry\n-\t  {\n-\t    _Tp(__make_move_if_noexcept_iterator(__c.begin()),\n-\t\t__make_move_if_noexcept_iterator(__c.end()),\n-\t\t__c.get_allocator()).swap(__c);\n-\t    return true;\n-\t  }\n-\tcatch(...)\n-\t  { return false; }\n-#else\n-\treturn false;\n-#endif\n-      }\n-    };\n-#endif\n-  /// @endcond\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "c9547c7305c6bd575ea983d8d4bb74cf289f8061", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c37099a9f2415e00e94379c1206b3e9185c52/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c37099a9f2415e00e94379c1206b3e9185c52/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=7f4c37099a9f2415e00e94379c1206b3e9185c52", "patch": "@@ -32,9 +32,6 @@\n #pragma GCC system_header\n \n # include <bits/alloc_traits.h>\n-#if __cplusplus < 201103L\n-# include <bits/allocator.h>  // for __alloc_swap\n-#endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {"}]}