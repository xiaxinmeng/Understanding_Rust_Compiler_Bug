{"sha": "9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlZjVmNTVmZmRlNDBkZDNhOWUxMjViZjVkMjcwNDE2YWIyMzc3YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-17T22:07:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-17T22:07:46Z"}, "message": "c-format.h (format_kind_info): Add alloc_char field.\n\n\t* c-format.h (format_kind_info): Add alloc_char field.\n\t* c-format.c (scanf_flag_specs): Add 'm'.\n\t(scanf_flag_pairs): Add 'a', 'm' pair.\n\t(scan_char_table): Allow 'm' modifier for c, s, [, C and S.\n\t(format_types_orig): Add alloc_char fields.\n\t(check_format_info_main): Rename aflag to alloc_flag.\n\tHandle fki->alloc_char. modifier after width and before length\n\tmodifiers.  Move FMT_FLAG_SCANF_A_KLUDGE handling before\n\tlength modifiers as well.\n\t* config/sol2-c.c (solaris_format_types): Add alloc_char field.\n\n\t* gcc.dg/format/c90-scanf-5.c: New test.\n\t* gcc.dg/format/c99-scanf-4.c: New test.\n\t* gcc.dg/format/ext-7.c: New test.\n\t* gcc.dg/format/ext-8.c: New test.\n\nFrom-SVN: r128555", "tree": {"sha": "29b960a466f572a1131b689d972ec8b615681fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b960a466f572a1131b689d972ec8b615681fd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abc2dd3c9eb9058cc9c9babab700ba68dfda1881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc2dd3c9eb9058cc9c9babab700ba68dfda1881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc2dd3c9eb9058cc9c9babab700ba68dfda1881"}], "stats": {"total": 285, "additions": 247, "deletions": 38}, "files": [{"sha": "4c102c6578a5580ffe19b0972327347bb385231a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -1,5 +1,16 @@\n 2007-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-format.h (format_kind_info): Add alloc_char field.\n+\t* c-format.c (scanf_flag_specs): Add 'm'.\n+\t(scanf_flag_pairs): Add 'a', 'm' pair.\n+\t(scan_char_table): Allow 'm' modifier for c, s, [, C and S.\n+\t(format_types_orig): Add alloc_char fields.\n+\t(check_format_info_main): Rename aflag to alloc_flag.\n+\tHandle fki->alloc_char. modifier after width and before length\n+\tmodifiers.  Move FMT_FLAG_SCANF_A_KLUDGE handling before\n+\tlength modifiers as well.\n+\t* config/sol2-c.c (solaris_format_types): Add alloc_char field.\n+\n \tPR middle-end/33423\n \t* builtins.c (expand_builtin_memory_chk): Handle COMPOUND_EXPRs\n \treturned by build_call_expr."}, {"sha": "b703e47a0085b0dd866c91ce8fc0293f34bce7a8", "filename": "gcc/c-format.c", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -437,6 +437,7 @@ static const format_flag_spec scanf_flag_specs[] =\n {\n   { '*',  0, 0, N_(\"assignment suppression\"), N_(\"the assignment suppression scanf feature\"), STD_C89 },\n   { 'a',  0, 0, N_(\"'a' flag\"),               N_(\"the 'a' scanf flag\"),                       STD_EXT },\n+  { 'm',  0, 0, N_(\"'m' flag\"),               N_(\"the 'm' scanf flag\"),                       STD_EXT },\n   { 'w',  0, 0, N_(\"field width\"),            N_(\"field width in scanf format\"),              STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"),          STD_C89 },\n   { '\\'', 0, 0, N_(\"''' flag\"),               N_(\"the ''' scanf flag\"),                       STD_EXT },\n@@ -448,6 +449,7 @@ static const format_flag_spec scanf_flag_specs[] =\n static const format_flag_pair scanf_flag_pairs[] =\n {\n   { '*', 'L', 0, 0 },\n+  { 'a', 'm', 0, 0 },\n   { 0, 0, 0, 0 }\n };\n \n@@ -663,17 +665,17 @@ static const format_char_info scan_char_table[] =\n   { \"u\",     1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w'I\", \"W\",   NULL },\n   { \"oxX\",   1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n   { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"*w'\",  \"W\",   NULL },\n-  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"cW\",  NULL },\n-  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"cW\",  NULL },\n-  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"cW[\", NULL },\n+  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*mw\",   \"cW\",  NULL },\n+  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"cW\",  NULL },\n+  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"cW[\", NULL },\n   { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n   { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",     \"W\",   NULL },\n   /* C99 conversion specifiers.  */\n   { \"F\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"*w'\",  \"W\",   NULL },\n   { \"aA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w'\",  \"W\",   NULL },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n-  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"W\",   NULL },\n+  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*mw\",   \"W\",   NULL },\n+  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"W\",   NULL },\n   { NULL, 0, 0, NOLENGTHS, NULL, NULL, NULL }\n };\n \n@@ -716,59 +718,59 @@ static const format_kind_info format_types_orig[] =\n   { \"printf\",   printf_length_specs,  print_char_table, \" +#0-'I\", NULL,\n     printf_flag_specs, printf_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_EMPTY_PREC_OK,\n-    'w', 0, 'p', 0, 'L',\n+    'w', 0, 'p', 0, 'L', 0,\n     &integer_type_node, &integer_type_node\n   },\n   { \"asm_fprintf\",   asm_fprintf_length_specs,  asm_fprintf_char_table, \" +#0-\", NULL,\n     asm_fprintf_flag_specs, asm_fprintf_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_EMPTY_PREC_OK,\n-    'w', 0, 'p', 0, 'L',\n+    'w', 0, 'p', 0, 'L', 0,\n     NULL, NULL\n   },\n   { \"gcc_diag\",   gcc_diag_length_specs,  gcc_diag_char_table, \"q+\", NULL,\n     gcc_diag_flag_specs, gcc_diag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n-    0, 0, 'p', 0, 'L',\n+    0, 0, 'p', 0, 'L', 0,\n     NULL, &integer_type_node\n   },\n   { \"gcc_tdiag\",   gcc_tdiag_length_specs,  gcc_tdiag_char_table, \"q+\", NULL,\n     gcc_tdiag_flag_specs, gcc_tdiag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n-    0, 0, 'p', 0, 'L',\n+    0, 0, 'p', 0, 'L', 0,\n     NULL, &integer_type_node\n   },\n   { \"gcc_cdiag\",   gcc_cdiag_length_specs,  gcc_cdiag_char_table, \"q+\", NULL,\n     gcc_cdiag_flag_specs, gcc_cdiag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n-    0, 0, 'p', 0, 'L',\n+    0, 0, 'p', 0, 'L', 0,\n     NULL, &integer_type_node\n   },\n   { \"gcc_cxxdiag\",   gcc_cxxdiag_length_specs,  gcc_cxxdiag_char_table, \"q+#\", NULL,\n     gcc_cxxdiag_flag_specs, gcc_cxxdiag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n-    0, 0, 'p', 0, 'L',\n+    0, 0, 'p', 0, 'L', 0,\n     NULL, &integer_type_node\n   },\n   { \"gcc_gfc\", gcc_gfc_length_specs, gcc_gfc_char_table, \"\", NULL,\n     NULL, gcc_gfc_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n-    0, 0, 0, 0, 0,\n+    0, 0, 0, 0, 0, 0,\n     NULL, NULL\n   },\n   { \"scanf\",    scanf_length_specs,   scan_char_table,  \"*'I\", NULL,\n     scanf_flag_specs, scanf_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_ZERO_WIDTH_BAD|FMT_FLAG_DOLLAR_GAP_POINTER_OK,\n-    'w', 0, 0, '*', 'L',\n+    'w', 0, 0, '*', 'L', 'm',\n     NULL, NULL\n   },\n   { \"strftime\", NULL,                 time_char_table,  \"_-0^#\", \"EO\",\n     strftime_flag_specs, strftime_flag_pairs,\n-    FMT_FLAG_FANCY_PERCENT_OK, 'w', 0, 0, 0, 0,\n+    FMT_FLAG_FANCY_PERCENT_OK, 'w', 0, 0, 0, 0, 0,\n     NULL, NULL\n   },\n   { \"strfmon\",  strfmon_length_specs, monetary_char_table, \"=^+(!-\", NULL,\n     strfmon_flag_specs, strfmon_flag_pairs,\n-    FMT_FLAG_ARG_CONVERT, 'w', '#', 'p', 0, 'L',\n+    FMT_FLAG_ARG_CONVERT, 'w', '#', 'p', 0, 'L', 0,\n     NULL, NULL\n   }\n };\n@@ -1482,7 +1484,7 @@ check_format_info_main (format_check_results *res,\n       const format_length_info *fli = NULL;\n       const format_char_info *fci = NULL;\n       char flag_chars[256];\n-      int aflag = 0;\n+      int alloc_flag = 0;\n       const char *format_start = format_chars;\n       if (*format_chars == 0)\n \t{\n@@ -1741,6 +1743,31 @@ check_format_info_main (format_check_results *res,\n \t    }\n \t}\n \n+      if (fki->alloc_char && fki->alloc_char == *format_chars)\n+\t{\n+\t  i = strlen (flag_chars);\n+\t  flag_chars[i++] = fki->alloc_char;\n+\t  flag_chars[i] = 0;\n+\t  format_chars++;\n+\t}\n+\n+      /* Handle the scanf allocation kludge.  */\n+      if (fki->flags & (int) FMT_FLAG_SCANF_A_KLUDGE)\n+\t{\n+\t  if (*format_chars == 'a' && !flag_isoc99)\n+\t    {\n+\t      if (format_chars[1] == 's' || format_chars[1] == 'S'\n+\t\t  || format_chars[1] == '[')\n+\t\t{\n+\t\t  /* 'a' is used as a flag.  */\n+\t\t  i = strlen (flag_chars);\n+\t\t  flag_chars[i++] = 'a';\n+\t\t  flag_chars[i] = 0;\n+\t\t  format_chars++;\n+\t\t}\n+\t    }\n+\t}\n+\n       /* Read any length modifier, if this kind of format has them.  */\n       fli = fki->length_char_specs;\n       length_chars = NULL;\n@@ -1803,23 +1830,6 @@ check_format_info_main (format_check_results *res,\n \t    }\n \t}\n \n-      /* Handle the scanf allocation kludge.  */\n-      if (fki->flags & (int) FMT_FLAG_SCANF_A_KLUDGE)\n-\t{\n-\t  if (*format_chars == 'a' && !flag_isoc99)\n-\t    {\n-\t      if (format_chars[1] == 's' || format_chars[1] == 'S'\n-\t\t  || format_chars[1] == '[')\n-\t\t{\n-\t\t  /* 'a' is used as a flag.  */\n-\t\t  i = strlen (flag_chars);\n-\t\t  flag_chars[i++] = 'a';\n-\t\t  flag_chars[i] = 0;\n-\t\t  format_chars++;\n-\t\t}\n-\t    }\n-\t}\n-\n       format_char = *format_chars;\n       if (format_char == 0\n \t  || (!(fki->flags & (int) FMT_FLAG_FANCY_PERCENT_OK)\n@@ -1892,7 +1902,9 @@ check_format_info_main (format_check_results *res,\n \n       if ((fki->flags & (int) FMT_FLAG_SCANF_A_KLUDGE)\n \t  && strchr (flag_chars, 'a') != 0)\n-\taflag = 1;\n+\talloc_flag = 1;\n+      if (fki->alloc_char && strchr (flag_chars, fki->alloc_char) != 0)\n+\talloc_flag = 1;\n \n       if (fki->suppression_char\n \t  && strchr (flag_chars, fki->suppression_char) != 0)\n@@ -2064,13 +2076,13 @@ check_format_info_main (format_check_results *res,\n \n \t      wanted_type_ptr->wanted_type = wanted_type;\n \t      wanted_type_ptr->wanted_type_name = wanted_type_name;\n-\t      wanted_type_ptr->pointer_count = fci->pointer_count + aflag;\n+\t      wanted_type_ptr->pointer_count = fci->pointer_count + alloc_flag;\n \t      wanted_type_ptr->char_lenient_flag = 0;\n \t      if (strchr (fci->flags2, 'c') != 0)\n \t\twanted_type_ptr->char_lenient_flag = 1;\n \t      wanted_type_ptr->writing_in_flag = 0;\n \t      wanted_type_ptr->reading_from_flag = 0;\n-\t      if (aflag)\n+\t      if (alloc_flag)\n \t\twanted_type_ptr->writing_in_flag = 1;\n \t      else\n \t\t{"}, {"sha": "90cbb179e6832a92cb441fe60f2ce0c34d0cf34a", "filename": "gcc/c-format.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.h?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -236,6 +236,8 @@ typedef struct\n      specifiers, but is used to check for bad combinations such as length\n      modifier with assignment suppression in scanf.  */\n   int length_code_char;\n+  /* Assignment-allocation flag character ('m' in scanf), otherwise 0.  */\n+  int alloc_char;\n   /* Pointer to type of argument expected if '*' is used for a width,\n      or NULL if '*' not used for widths.  */\n   tree *width_type;"}, {"sha": "69426a4596beeeacbb0e666d4c436e8cfe4a7a34", "filename": "gcc/config/sol2-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Fconfig%2Fsol2-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Fconfig%2Fsol2-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-c.c?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -1,5 +1,5 @@\n /* Solaris support needed only by C/C++ frontends.\n-   Copyright (C) 2004, 2005 , 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.\n    Contributed by CodeSourcery, LLC.\n \n This file is part of GCC.\n@@ -73,7 +73,7 @@ const format_kind_info solaris_format_types[] = {\n   { \"cmn_err\",  cmn_err_length_specs,  cmn_err_char_table, \"\", NULL,\n     cmn_err_flag_specs, cmn_err_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_EMPTY_PREC_OK,\n-    'w', 0, 0, 0, 'L',\n+    'w', 0, 0, 0, 'L', 0,\n     &integer_type_node, &integer_type_node\n   }\n };"}, {"sha": "1583b66decd9e9701e5ca762f3f2832e31782762", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -1,5 +1,10 @@\n 2007-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/format/c90-scanf-5.c: New test.\n+\t* gcc.dg/format/c99-scanf-4.c: New test.\n+\t* gcc.dg/format/ext-7.c: New test.\n+\t* gcc.dg/format/ext-8.c: New test.\n+\n \tPR middle-end/33423\n \t* gcc.c-torture/compile/20070915-1.c: New test.\n "}, {"sha": "c94e25f222a558eecaeac0a9e883779cd2cffc8d", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-5.c?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -0,0 +1,19 @@\n+/* Test for scanf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (char **sp, wchar_t **lsp)\n+{\n+  /* m assignment-allocation modifier, recognized in both C90\n+     and C99 modes, is a POSIX and ISO/IEC WDTR 24731-2 extension.  */\n+  scanf (\"%ms\", sp); /* { dg-warning \"C\" \"%ms\" } */\n+  scanf (\"%mS\", lsp); /* { dg-warning \"C\" \"%mS\" } */\n+  scanf (\"%mls\", lsp); /* { dg-warning \"C\" \"%mls\" } */\n+  scanf (\"%m[bcd]\", sp); /* { dg-warning \"C\" \"%m[]\" } */\n+  scanf (\"%ml[bcd]\", lsp); /* { dg-warning \"C\" \"%ml[]\" } */\n+}"}, {"sha": "9c7a5e4b273d4b3bf3185c59610ea43e30feb191", "filename": "gcc/testsuite/gcc.dg/format/c99-scanf-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-4.c?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -0,0 +1,19 @@\n+/* Test for scanf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (char **sp, wchar_t **lsp)\n+{\n+  /* m assignment-allocation modifier, recognized in both C90\n+     and C99 modes, is a POSIX and ISO/IEC WDTR 24731-2 extension.  */\n+  scanf (\"%ms\", sp); /* { dg-warning \"C\" \"%ms\" } */\n+  scanf (\"%mS\", lsp); /* { dg-warning \"C\" \"%mS\" } */\n+  scanf (\"%mls\", lsp); /* { dg-warning \"C\" \"%mls\" } */\n+  scanf (\"%m[bcd]\", sp); /* { dg-warning \"C\" \"%m[]\" } */\n+  scanf (\"%ml[bcd]\", lsp); /* { dg-warning \"C\" \"%ml[]\" } */\n+}"}, {"sha": "d9bd0e8ffd026fb59a62c57ba2fd8a9ae54a0f28", "filename": "gcc/testsuite/gcc.dg/format/ext-7.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-7.c?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -0,0 +1,85 @@\n+/* Test for scanf formats.  %a and %m extensions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (char **sp, wchar_t **lsp, int *ip, float *fp, void **pp, double *dp)\n+{\n+  /* %a formats for allocation, only recognized in C90 mode, are a\n+     GNU extension.  Followed by other characters, %a is not treated\n+     specially.\n+  */\n+  scanf (\"%as\", sp);\n+  scanf (\"%aS\", lsp);\n+  scanf (\"%las\", dp);\n+  scanf (\"%la\", lsp);\t/* { dg-warning \"but argument 2 has type\" } */\n+  scanf (\"%las\", lsp);\t/* { dg-warning \"but argument 2 has type\" } */\n+  scanf (\"%a[bcd]\", sp);\n+  scanf (\"%la[bcd]\", dp);\n+  scanf (\"%*as\");\n+  scanf (\"%*aS\");\n+  scanf (\"%*las\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*a[bcd]\");\n+  scanf (\"%*la[bcd]\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%10as\", sp);\n+  scanf (\"%5aS\", lsp);\n+  scanf (\"%9las\", dp);\n+  scanf (\"%25a[bcd]\", sp);\n+  scanf (\"%48la[bcd]\", dp);\n+  scanf (\"%*10as\");\n+  scanf (\"%*5aS\");\n+  scanf (\"%*9las\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*25a[bcd]\");\n+  scanf (\"%*48la[bcd]\"); /* { dg-warning \"assignment suppression and length modifier\" } */\n+\n+  /* m assignment-allocation modifier, recognized in both C90\n+     and C99 modes, is a POSIX and ISO/IEC WDTR 24731-2 extension.  */\n+  scanf (\"%ms\", sp);\n+  scanf (\"%mS\", lsp);\n+  scanf (\"%mls\", lsp);\n+  scanf (\"%m[bcd]\", sp);\n+  scanf (\"%ml[bcd]\", lsp);\n+  scanf (\"%mc\", sp);\n+  scanf (\"%mlc\", lsp);\n+  scanf (\"%mC\", lsp);\n+  scanf (\"%*ms\");\n+  scanf (\"%*mS\");\n+  scanf (\"%*mls\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*m[bcd]\");\n+  scanf (\"%*ml[bcd]\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*mc\");\n+  scanf (\"%*mlc\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*mC\");\n+  scanf (\"%10ms\", sp);\n+  scanf (\"%5mS\", lsp);\n+  scanf (\"%9mls\", lsp);\n+  scanf (\"%25m[bcd]\", sp);\n+  scanf (\"%41ml[bcd]\", lsp);\n+  scanf (\"%131mc\", sp);\n+  scanf (\"%27mlc\", lsp);\n+  scanf (\"%2mC\", lsp);\n+  scanf (\"%*10ms\");\n+  scanf (\"%*5mS\");\n+  scanf (\"%*9mls\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*25m[bcd]\");\n+  scanf (\"%*41ml[bcd]\"); /* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*131mc\");\n+  scanf (\"%*27mlc\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*2mC\");\n+\n+  scanf (\"%md\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mi\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mo\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mu\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mx\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%me\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mf\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mg\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mp\", pp);\t/* { dg-warning \"flag used with\" } */\n+\n+  scanf (\"%mas\", sp);\t/* { dg-warning \"flag together\" } */\n+  scanf (\"%maS\", lsp);\t/* { dg-warning \"flag together\" } */\n+  scanf (\"%ma[bcd]\", sp);\t/* { dg-warning \"flag together\" } */\n+}"}, {"sha": "b50cc81d573a68e0f258d4bd9b83edd6155ff5b9", "filename": "gcc/testsuite/gcc.dg/format/ext-8.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cef5f55ffde40dd3a9e125bf5d270416ab2377a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-8.c?ref=9cef5f55ffde40dd3a9e125bf5d270416ab2377a", "patch": "@@ -0,0 +1,56 @@\n+/* Test for scanf formats.  %m extensions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (char **sp, wchar_t **lsp, int *ip, float *fp, void **pp)\n+{\n+  /* m assignment-allocation modifier, recognized in both C90\n+     and C99 modes, is a POSIX and ISO/IEC WDTR 24731-2 extension.  */\n+  scanf (\"%ms\", sp);\n+  scanf (\"%mS\", lsp);\n+  scanf (\"%mls\", lsp);\n+  scanf (\"%m[bcd]\", sp);\n+  scanf (\"%ml[bcd]\", lsp);\n+  scanf (\"%mc\", sp);\n+  scanf (\"%mlc\", lsp);\n+  scanf (\"%mC\", lsp);\n+  scanf (\"%*ms\");\n+  scanf (\"%*mS\");\n+  scanf (\"%*mls\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*m[bcd]\");\n+  scanf (\"%*ml[bcd]\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*mc\");\n+  scanf (\"%*mlc\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*mC\");\n+  scanf (\"%10ms\", sp);\n+  scanf (\"%5mS\", lsp);\n+  scanf (\"%9mls\", lsp);\n+  scanf (\"%25m[bcd]\", sp);\n+  scanf (\"%41ml[bcd]\", lsp);\n+  scanf (\"%131mc\", sp);\n+  scanf (\"%27mlc\", lsp);\n+  scanf (\"%2mC\", lsp);\n+  scanf (\"%*10ms\");\n+  scanf (\"%*5mS\");\n+  scanf (\"%*9mls\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*25m[bcd]\");\n+  scanf (\"%*41ml[bcd]\"); /* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*131mc\");\n+  scanf (\"%*27mlc\");\t/* { dg-warning \"assignment suppression and length modifier\" } */\n+  scanf (\"%*2mC\");\n+\n+  scanf (\"%md\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mi\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mo\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mu\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mx\", ip);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%ma\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mA\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%me\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mf\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mg\", fp);\t/* { dg-warning \"flag used with\" } */\n+  scanf (\"%mp\", pp);\t/* { dg-warning \"flag used with\" } */\n+}"}]}