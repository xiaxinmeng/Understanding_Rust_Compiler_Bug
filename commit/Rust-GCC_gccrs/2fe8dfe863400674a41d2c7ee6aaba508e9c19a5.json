{"sha": "2fe8dfe863400674a41d2c7ee6aaba508e9c19a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlOGRmZTg2MzQwMDY3NGE0MWQyYzdlZTZhYWJhNTA4ZTljMTlhNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-11-16T14:11:50Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-11-16T14:11:50Z"}, "message": "re PR target/68277 ([SH]: error: insn does not satisfy its constraints when compiling erlang)\n\ngcc/\n\tPR target/68277\n\t* config/sh/sh.md (addsi3_scr): Handle reg overlap of operands[0] and\n\toperands[2].\n\t(*addsi3): Add another insn_and_split variant for reload.\n\nCo-Authored-By: Kaz Kojima <kkojima@gcc.gnu.org>\n\nFrom-SVN: r230425", "tree": {"sha": "203f3c978cb505b0a25cb83f4bee37ba4215f928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/203f3c978cb505b0a25cb83f4bee37ba4215f928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5/comments", "author": null, "committer": null, "parents": [{"sha": "0d334e376569c1585061f81e0b4ce80b1dfadd41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d334e376569c1585061f81e0b4ce80b1dfadd41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d334e376569c1585061f81e0b4ce80b1dfadd41"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "aabed12bb03ee8249390bb80a387d8b9d2d34c94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fe8dfe863400674a41d2c7ee6aaba508e9c19a5", "patch": "@@ -1,3 +1,11 @@\n+2015-11-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/68277\n+\t* config/sh/sh.md (addsi3_scr): Handle reg overlap of operands[0] and\n+\toperands[2].\n+\t(*addsi3): Add another insn_and_split variant for reload.\n+\n 2015-11-16  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/68117"}, {"sha": "083febe595426a10961b4af488a2bf7c959ee842", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe8dfe863400674a41d2c7ee6aaba508e9c19a5/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=2fe8dfe863400674a41d2c7ee6aaba508e9c19a5", "patch": "@@ -2232,10 +2232,50 @@\n \t}\n     }\n   else if (!reg_overlap_mentioned_p (operands[0], operands[1]))\n-    emit_move_insn (operands[0], operands[1]);\n+    {\n+      if (!reg_overlap_mentioned_p (operands[0], operands[2]))\n+\temit_move_insn (operands[0], operands[1]);\n+      else\n+\toperands[2] = operands[1];\n+    }\n }\n   [(set_attr \"type\" \"arith\")])\n \n+;; Old reload might generate add insns directly (not through the expander) for\n+;; the memory address of complex insns like atomic insns when reloading.\n+(define_insn_and_split \"*addsi3\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t (match_operand:SI 2 \"arith_or_int_operand\" \"rn\")))]\n+  \"TARGET_SH1 && !sh_lra_p ()\n+   && reload_completed\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))]\n+{\n+  if (operands[2] == const0_rtx)\n+    {\n+      emit_move_insn (operands[0], operands[1]);\n+      DONE;\n+    }\n+\n+  if (CONST_INT_P (operands[2]))\n+    {\n+      if (satisfies_constraint_I08 (operands[2]))\n+\temit_move_insn (operands[0], operands[1]);\n+      else\n+\t{\n+\t  emit_move_insn (operands[0], operands[2]);\n+\t  operands[2] = operands[1];\n+\t}\n+    }\n+  else if (!reg_overlap_mentioned_p (operands[0], operands[2]))\n+    emit_move_insn (operands[0], operands[1]);\n+  else\n+    operands[2] = operands[1];\n+})\n+\n (define_insn_and_split \"*addsi3\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n \t(plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0,r\")"}]}