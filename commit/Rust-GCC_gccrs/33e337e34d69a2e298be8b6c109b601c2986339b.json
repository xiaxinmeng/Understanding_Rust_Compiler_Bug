{"sha": "33e337e34d69a2e298be8b6c109b601c2986339b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNlMzM3ZTM0ZDY5YTJlMjk4YmU4YjZjMTA5YjYwMWMyOTg2MzM5Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-04T15:01:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-04T15:01:11Z"}, "message": "libgo: Update to Go 1.0.1 release.\n\nFrom-SVN: r187163", "tree": {"sha": "df1037674f2c69011469485414315a50607f9d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df1037674f2c69011469485414315a50607f9d08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33e337e34d69a2e298be8b6c109b601c2986339b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e337e34d69a2e298be8b6c109b601c2986339b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e337e34d69a2e298be8b6c109b601c2986339b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e337e34d69a2e298be8b6c109b601c2986339b/comments", "author": null, "committer": null, "parents": [{"sha": "1eae36f08cddc7779cd0ed75b359c9a54f67adff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eae36f08cddc7779cd0ed75b359c9a54f67adff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eae36f08cddc7779cd0ed75b359c9a54f67adff"}], "stats": {"total": 527, "additions": 430, "deletions": 97}, "files": [{"sha": "33159fdd4c89e7742ee8742b096630da2f79f077", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -1,4 +1,4 @@\n-dc5e410f0b4c\n+2ccfd4b451d3\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "5039f319f59129ad20bc63b87101ea7d1d2ddb0f", "filename": "libgo/go/crypto/tls/cipher_suites.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fcipher_suites.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fcipher_suites.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fcipher_suites.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -23,8 +23,8 @@ type keyAgreement interface {\n \t// In the case that the key agreement protocol doesn't use a\n \t// ServerKeyExchange message, generateServerKeyExchange can return nil,\n \t// nil.\n-\tgenerateServerKeyExchange(*Config, *clientHelloMsg, *serverHelloMsg) (*serverKeyExchangeMsg, error)\n-\tprocessClientKeyExchange(*Config, *clientKeyExchangeMsg, uint16) ([]byte, error)\n+\tgenerateServerKeyExchange(*Config, *Certificate, *clientHelloMsg, *serverHelloMsg) (*serverKeyExchangeMsg, error)\n+\tprocessClientKeyExchange(*Config, *Certificate, *clientKeyExchangeMsg, uint16) ([]byte, error)\n \n \t// On the client side, the next two methods are called in order.\n "}, {"sha": "76adc540c7126e1a0009e475fcd8ad4211f6f075", "filename": "libgo/go/crypto/tls/handshake_server.go", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -112,37 +112,38 @@ FindCipherSuite:\n \t\thello.nextProtoNeg = true\n \t\thello.nextProtos = config.NextProtos\n \t}\n-\tif clientHello.ocspStapling && len(config.Certificates[0].OCSPStaple) > 0 {\n-\t\thello.ocspStapling = true\n-\t}\n-\n-\tfinishedHash.Write(hello.marshal())\n-\tc.writeRecord(recordTypeHandshake, hello.marshal())\n \n \tif len(config.Certificates) == 0 {\n \t\treturn c.sendAlert(alertInternalError)\n \t}\n-\n-\tcertMsg := new(certificateMsg)\n+\tcert := &config.Certificates[0]\n \tif len(clientHello.serverName) > 0 {\n \t\tc.serverName = clientHello.serverName\n-\t\tcertMsg.certificates = config.getCertificateForName(clientHello.serverName).Certificate\n-\t} else {\n-\t\tcertMsg.certificates = config.Certificates[0].Certificate\n+\t\tcert = config.getCertificateForName(clientHello.serverName)\n \t}\n+\n+\tif clientHello.ocspStapling && len(cert.OCSPStaple) > 0 {\n+\t\thello.ocspStapling = true\n+\t}\n+\n+\tfinishedHash.Write(hello.marshal())\n+\tc.writeRecord(recordTypeHandshake, hello.marshal())\n+\n+\tcertMsg := new(certificateMsg)\n+\tcertMsg.certificates = cert.Certificate\n \tfinishedHash.Write(certMsg.marshal())\n \tc.writeRecord(recordTypeHandshake, certMsg.marshal())\n \n \tif hello.ocspStapling {\n \t\tcertStatus := new(certificateStatusMsg)\n \t\tcertStatus.statusType = statusTypeOCSP\n-\t\tcertStatus.response = config.Certificates[0].OCSPStaple\n+\t\tcertStatus.response = cert.OCSPStaple\n \t\tfinishedHash.Write(certStatus.marshal())\n \t\tc.writeRecord(recordTypeHandshake, certStatus.marshal())\n \t}\n \n \tkeyAgreement := suite.ka()\n-\tskx, err := keyAgreement.generateServerKeyExchange(config, clientHello, hello)\n+\tskx, err := keyAgreement.generateServerKeyExchange(config, cert, clientHello, hello)\n \tif err != nil {\n \t\tc.sendAlert(alertHandshakeFailure)\n \t\treturn err\n@@ -288,7 +289,7 @@ FindCipherSuite:\n \t\tfinishedHash.Write(certVerify.marshal())\n \t}\n \n-\tpreMasterSecret, err := keyAgreement.processClientKeyExchange(config, ckx, c.vers)\n+\tpreMasterSecret, err := keyAgreement.processClientKeyExchange(config, cert, ckx, c.vers)\n \tif err != nil {\n \t\tc.sendAlert(alertHandshakeFailure)\n \t\treturn err"}, {"sha": "7c1267101cf3a97aa2c51d9b7b69ba8498cf4579", "filename": "libgo/go/crypto/tls/handshake_server_test.go", "status": "modified", "additions": 154, "deletions": 4, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -37,9 +37,12 @@ func init() {\n \ttestConfig = new(Config)\n \ttestConfig.Time = func() time.Time { return time.Unix(0, 0) }\n \ttestConfig.Rand = zeroSource{}\n-\ttestConfig.Certificates = make([]Certificate, 1)\n+\ttestConfig.Certificates = make([]Certificate, 2)\n \ttestConfig.Certificates[0].Certificate = [][]byte{testCertificate}\n \ttestConfig.Certificates[0].PrivateKey = testPrivateKey\n+\ttestConfig.Certificates[1].Certificate = [][]byte{testSNICertificate}\n+\ttestConfig.Certificates[1].PrivateKey = testPrivateKey\n+\ttestConfig.BuildNameToCertificate()\n \ttestConfig.CipherSuites = []uint16{TLS_RSA_WITH_RC4_128_SHA}\n \ttestConfig.InsecureSkipVerify = true\n }\n@@ -176,6 +179,13 @@ func TestHandshakeServerSSLv3(t *testing.T) {\n \ttestServerScript(t, \"SSLv3\", sslv3ServerScript, testConfig, nil)\n }\n \n+// TestHandshakeServerSNI involves a client sending an SNI extension of\n+// \"snitest.com\", which happens to match the CN of testSNICertificate. The test\n+// verifies that the server correctly selects that certificate.\n+func TestHandshakeServerSNI(t *testing.T) {\n+\ttestServerScript(t, \"SNI\", selectCertificateBySNIScript, testConfig, nil)\n+}\n+\n type clientauthTest struct {\n \tname       string\n \tclientauth ClientAuthType\n@@ -258,6 +268,8 @@ func fromHex(s string) []byte {\n \n var testCertificate = fromHex(\"308202b030820219a00302010202090085b0bba48a7fb8ca300d06092a864886f70d01010505003045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c7464301e170d3130303432343039303933385a170d3131303432343039303933385a3045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746430819f300d06092a864886f70d010101050003818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a381a73081a4301d0603551d0e04160414b1ade2855acfcb28db69ce2369ded3268e18883930750603551d23046e306c8014b1ade2855acfcb28db69ce2369ded3268e188839a149a4473045310b3009060355040613024155311330110603550408130a536f6d652d53746174653121301f060355040a1318496e7465726e6574205769646769747320507479204c746482090085b0bba48a7fb8ca300c0603551d13040530030101ff300d06092a864886f70d010105050003818100086c4524c76bb159ab0c52ccf2b014d7879d7a6475b55a9566e4c52b8eae12661feb4f38b36e60d392fdf74108b52513b1187a24fb301dbaed98b917ece7d73159db95d31d78ea50565cd5825a2d5a5f33c4b6d8c97590968c0f5298b5cd981f89205ff2a01ca31b9694dda9fd57e970e8266d71999b266e3850296c90a7bdd9\")\n \n+var testSNICertificate = fromHex(\"308201f23082015da003020102020100300b06092a864886f70d01010530283110300e060355040a130741636d6520436f311430120603550403130b736e69746573742e636f6d301e170d3132303431313137343033355a170d3133303431313137343533355a30283110300e060355040a130741636d6520436f311430120603550403130b736e69746573742e636f6d30819d300b06092a864886f70d01010103818d0030818902818100bb79d6f517b5e5bf4610d0dc69bee62b07435ad0032d8a7a4385b71452e7a5654c2c78b8238cb5b482e5de1f953b7e62a52ca533d6fe125c7a56fcf506bffa587b263fb5cd04d3d0c921964ac7f4549f5abfef427100fe1899077f7e887d7df10439c4a22edb51c97ce3c04c3b326601cfafb11db8719a1ddbdb896baeda2d790203010001a3323030300e0603551d0f0101ff0404030200a0300d0603551d0e0406040401020304300f0603551d2304083006800401020304300b06092a864886f70d0101050381810089c6455f1c1f5ef8eb1ab174ee2439059f5c4259bb1a8d86cdb1d056f56a717da40e95ab90f59e8deaf627c157995094db0802266eb34fc6842dea8a4b68d9c1389103ab84fb9e1f85d9b5d23ff2312c8670fbb540148245a4ebafe264d90c8a4cf4f85b0fac12ac2fc4a3154bad52462868af96c62c6525d652b6e31845bdcc\")\n+\n var testPrivateKey = &rsa.PrivateKey{\n \tPublicKey: rsa.PublicKey{\n \t\tN: bigFromString(\"131650079503776001033793877885499001334664249354723305978524647182322416328664556247316495448366990052837680518067798333412266673813370895702118944398081598789828837447552603077848001020611640547221687072142537202428102790818451901395596882588063427854225330436740647715202971973145151161964464812406232198521\"),\n@@ -947,6 +959,142 @@ var sslv3ServerScript = [][]byte{\n \t},\n }\n \n+var selectCertificateBySNIScript = [][]byte{\n+\t{\n+\t\t0x16, 0x03, 0x01, 0x00, 0x6e, 0x01, 0x00, 0x00,\n+\t\t0x6a, 0x03, 0x01, 0x4f, 0x85, 0xc4, 0xc2, 0xb9,\n+\t\t0x39, 0x80, 0x91, 0x66, 0x65, 0x56, 0x8e, 0xdd,\n+\t\t0x48, 0xe9, 0xca, 0x34, 0x02, 0x3c, 0xaf, 0x0d,\n+\t\t0x73, 0xb5, 0x2a, 0x05, 0x6e, 0xbd, 0x5e, 0x8f,\n+\t\t0x38, 0xf9, 0xe5, 0x00, 0x00, 0x28, 0x00, 0x39,\n+\t\t0x00, 0x38, 0x00, 0x35, 0x00, 0x16, 0x00, 0x13,\n+\t\t0x00, 0x0a, 0x00, 0x33, 0x00, 0x32, 0x00, 0x2f,\n+\t\t0x00, 0x05, 0x00, 0x04, 0x00, 0x15, 0x00, 0x12,\n+\t\t0x00, 0x09, 0x00, 0x14, 0x00, 0x11, 0x00, 0x08,\n+\t\t0x00, 0x06, 0x00, 0x03, 0x00, 0xff, 0x02, 0x01,\n+\t\t0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10, 0x00,\n+\t\t0x0e, 0x00, 0x00, 0x0b, 0x73, 0x6e, 0x69, 0x74,\n+\t\t0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x00,\n+\t\t0x23, 0x00, 0x00,\n+\t},\n+\t{\n+\t\t0x16, 0x03, 0x01, 0x00, 0x2a, 0x02, 0x00, 0x00,\n+\t\t0x26, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x16,\n+\t\t0x03, 0x01, 0x02, 0x00, 0x0b, 0x00, 0x01, 0xfc,\n+\t\t0x00, 0x01, 0xf9, 0x00, 0x01, 0xf6, 0x30, 0x82,\n+\t\t0x01, 0xf2, 0x30, 0x82, 0x01, 0x5d, 0xa0, 0x03,\n+\t\t0x02, 0x01, 0x02, 0x02, 0x01, 0x00, 0x30, 0x0b,\n+\t\t0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,\n+\t\t0x01, 0x01, 0x05, 0x30, 0x28, 0x31, 0x10, 0x30,\n+\t\t0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x07,\n+\t\t0x41, 0x63, 0x6d, 0x65, 0x20, 0x43, 0x6f, 0x31,\n+\t\t0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03,\n+\t\t0x13, 0x0b, 0x73, 0x6e, 0x69, 0x74, 0x65, 0x73,\n+\t\t0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17,\n+\t\t0x0d, 0x31, 0x32, 0x30, 0x34, 0x31, 0x31, 0x31,\n+\t\t0x37, 0x34, 0x30, 0x33, 0x35, 0x5a, 0x17, 0x0d,\n+\t\t0x31, 0x33, 0x30, 0x34, 0x31, 0x31, 0x31, 0x37,\n+\t\t0x34, 0x35, 0x33, 0x35, 0x5a, 0x30, 0x28, 0x31,\n+\t\t0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\n+\t\t0x13, 0x07, 0x41, 0x63, 0x6d, 0x65, 0x20, 0x43,\n+\t\t0x6f, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55,\n+\t\t0x04, 0x03, 0x13, 0x0b, 0x73, 0x6e, 0x69, 0x74,\n+\t\t0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30,\n+\t\t0x81, 0x9d, 0x30, 0x0b, 0x06, 0x09, 0x2a, 0x86,\n+\t\t0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x03,\n+\t\t0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81,\n+\t\t0x81, 0x00, 0xbb, 0x79, 0xd6, 0xf5, 0x17, 0xb5,\n+\t\t0xe5, 0xbf, 0x46, 0x10, 0xd0, 0xdc, 0x69, 0xbe,\n+\t\t0xe6, 0x2b, 0x07, 0x43, 0x5a, 0xd0, 0x03, 0x2d,\n+\t\t0x8a, 0x7a, 0x43, 0x85, 0xb7, 0x14, 0x52, 0xe7,\n+\t\t0xa5, 0x65, 0x4c, 0x2c, 0x78, 0xb8, 0x23, 0x8c,\n+\t\t0xb5, 0xb4, 0x82, 0xe5, 0xde, 0x1f, 0x95, 0x3b,\n+\t\t0x7e, 0x62, 0xa5, 0x2c, 0xa5, 0x33, 0xd6, 0xfe,\n+\t\t0x12, 0x5c, 0x7a, 0x56, 0xfc, 0xf5, 0x06, 0xbf,\n+\t\t0xfa, 0x58, 0x7b, 0x26, 0x3f, 0xb5, 0xcd, 0x04,\n+\t\t0xd3, 0xd0, 0xc9, 0x21, 0x96, 0x4a, 0xc7, 0xf4,\n+\t\t0x54, 0x9f, 0x5a, 0xbf, 0xef, 0x42, 0x71, 0x00,\n+\t\t0xfe, 0x18, 0x99, 0x07, 0x7f, 0x7e, 0x88, 0x7d,\n+\t\t0x7d, 0xf1, 0x04, 0x39, 0xc4, 0xa2, 0x2e, 0xdb,\n+\t\t0x51, 0xc9, 0x7c, 0xe3, 0xc0, 0x4c, 0x3b, 0x32,\n+\t\t0x66, 0x01, 0xcf, 0xaf, 0xb1, 0x1d, 0xb8, 0x71,\n+\t\t0x9a, 0x1d, 0xdb, 0xdb, 0x89, 0x6b, 0xae, 0xda,\n+\t\t0x2d, 0x79, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3,\n+\t\t0x32, 0x30, 0x30, 0x30, 0x0e, 0x06, 0x03, 0x55,\n+\t\t0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,\n+\t\t0x02, 0x00, 0xa0, 0x30, 0x0d, 0x06, 0x03, 0x55,\n+\t\t0x1d, 0x0e, 0x04, 0x06, 0x04, 0x04, 0x01, 0x02,\n+\t\t0x03, 0x04, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d,\n+\t\t0x23, 0x04, 0x08, 0x30, 0x06, 0x80, 0x04, 0x01,\n+\t\t0x02, 0x03, 0x04, 0x30, 0x0b, 0x06, 0x09, 0x2a,\n+\t\t0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05,\n+\t\t0x03, 0x81, 0x81, 0x00, 0x89, 0xc6, 0x45, 0x5f,\n+\t\t0x1c, 0x1f, 0x5e, 0xf8, 0xeb, 0x1a, 0xb1, 0x74,\n+\t\t0xee, 0x24, 0x39, 0x05, 0x9f, 0x5c, 0x42, 0x59,\n+\t\t0xbb, 0x1a, 0x8d, 0x86, 0xcd, 0xb1, 0xd0, 0x56,\n+\t\t0xf5, 0x6a, 0x71, 0x7d, 0xa4, 0x0e, 0x95, 0xab,\n+\t\t0x90, 0xf5, 0x9e, 0x8d, 0xea, 0xf6, 0x27, 0xc1,\n+\t\t0x57, 0x99, 0x50, 0x94, 0xdb, 0x08, 0x02, 0x26,\n+\t\t0x6e, 0xb3, 0x4f, 0xc6, 0x84, 0x2d, 0xea, 0x8a,\n+\t\t0x4b, 0x68, 0xd9, 0xc1, 0x38, 0x91, 0x03, 0xab,\n+\t\t0x84, 0xfb, 0x9e, 0x1f, 0x85, 0xd9, 0xb5, 0xd2,\n+\t\t0x3f, 0xf2, 0x31, 0x2c, 0x86, 0x70, 0xfb, 0xb5,\n+\t\t0x40, 0x14, 0x82, 0x45, 0xa4, 0xeb, 0xaf, 0xe2,\n+\t\t0x64, 0xd9, 0x0c, 0x8a, 0x4c, 0xf4, 0xf8, 0x5b,\n+\t\t0x0f, 0xac, 0x12, 0xac, 0x2f, 0xc4, 0xa3, 0x15,\n+\t\t0x4b, 0xad, 0x52, 0x46, 0x28, 0x68, 0xaf, 0x96,\n+\t\t0xc6, 0x2c, 0x65, 0x25, 0xd6, 0x52, 0xb6, 0xe3,\n+\t\t0x18, 0x45, 0xbd, 0xcc, 0x16, 0x03, 0x01, 0x00,\n+\t\t0x04, 0x0e, 0x00, 0x00, 0x00,\n+\t},\n+\t{\n+\t\t0x16, 0x03, 0x01, 0x00, 0x86, 0x10, 0x00, 0x00,\n+\t\t0x82, 0x00, 0x80, 0x70, 0x1d, 0x34, 0x75, 0xa2,\n+\t\t0xe7, 0xe3, 0x2f, 0x3d, 0xc1, 0x1d, 0xca, 0x0b,\n+\t\t0xe3, 0x64, 0xb9, 0x1a, 0x00, 0x69, 0xc4, 0x14,\n+\t\t0x05, 0x07, 0x7e, 0xc3, 0x51, 0x43, 0x52, 0x66,\n+\t\t0xe3, 0xbd, 0xff, 0x1b, 0x1a, 0x6a, 0x84, 0xf2,\n+\t\t0x07, 0x24, 0xd7, 0x12, 0xa8, 0x58, 0xcf, 0x8a,\n+\t\t0x50, 0x30, 0xe8, 0xc8, 0xb2, 0xf9, 0x58, 0x1c,\n+\t\t0x56, 0x53, 0x76, 0x21, 0xe0, 0x03, 0x7f, 0x77,\n+\t\t0xa7, 0xf1, 0xad, 0x67, 0xd4, 0xe2, 0x8f, 0xa0,\n+\t\t0x58, 0x6c, 0xe0, 0x28, 0x59, 0xf3, 0xd1, 0x53,\n+\t\t0x2b, 0x21, 0xbd, 0xa3, 0x84, 0x31, 0x73, 0xbf,\n+\t\t0x84, 0x0f, 0x83, 0xf4, 0xc4, 0xd0, 0xe5, 0x3c,\n+\t\t0x2d, 0x3e, 0xf2, 0x8a, 0x1e, 0xe7, 0xe9, 0x1f,\n+\t\t0x12, 0x13, 0xad, 0x29, 0xd6, 0x0c, 0xc7, 0xc6,\n+\t\t0x05, 0x53, 0x7d, 0x5e, 0xc6, 0x92, 0x72, 0xba,\n+\t\t0xd2, 0x93, 0x8f, 0x53, 0x84, 0x87, 0x44, 0x05,\n+\t\t0x9f, 0x5d, 0x66, 0x14, 0x03, 0x01, 0x00, 0x01,\n+\t\t0x01, 0x16, 0x03, 0x01, 0x00, 0x24, 0xfc, 0x71,\n+\t\t0xaa, 0xa8, 0x37, 0xa8, 0xbd, 0x63, 0xb7, 0xbc,\n+\t\t0x95, 0xef, 0x0c, 0xcf, 0x39, 0x31, 0x93, 0xe6,\n+\t\t0x86, 0xbd, 0x3f, 0x56, 0x9d, 0xf0, 0xb2, 0xb5,\n+\t\t0xd1, 0xa7, 0xc6, 0x45, 0x89, 0x18, 0xfb, 0xa0,\n+\t\t0x7f, 0xc1,\n+\t},\n+\t{\n+\t\t0x14, 0x03, 0x01, 0x00, 0x01, 0x01, 0x16, 0x03,\n+\t\t0x01, 0x00, 0x24, 0xb8, 0x6d, 0x9a, 0x90, 0x3c,\n+\t\t0x45, 0xe0, 0xff, 0x63, 0xba, 0xab, 0x3d, 0x7a,\n+\t\t0xa6, 0x49, 0x5a, 0x13, 0xdc, 0x0e, 0xa3, 0xba,\n+\t\t0x7f, 0x04, 0x19, 0x45, 0xfd, 0xfb, 0xbd, 0x00,\n+\t\t0xa3, 0xa7, 0x78, 0x81, 0x38, 0x9f, 0x10, 0x17,\n+\t\t0x03, 0x01, 0x00, 0x21, 0x43, 0xc3, 0x91, 0xb7,\n+\t\t0xbf, 0x50, 0x0b, 0x04, 0xb4, 0x5d, 0xc6, 0x20,\n+\t\t0x64, 0xb8, 0x01, 0x09, 0x25, 0x2c, 0x03, 0x30,\n+\t\t0xc0, 0x77, 0xc9, 0x5e, 0xe6, 0xe0, 0x99, 0xdc,\n+\t\t0xcd, 0x75, 0x9d, 0x51, 0x82, 0x15, 0x03, 0x01,\n+\t\t0x00, 0x16, 0x2d, 0x7a, 0x89, 0x7b, 0x36, 0x85,\n+\t\t0x2a, 0x93, 0xcb, 0x83, 0xa7, 0x2f, 0x9e, 0x91,\n+\t\t0xfc, 0xad, 0x57, 0xca, 0xf5, 0xbc, 0x13, 0x2f,\n+\t},\n+}\n+\n var clientauthTests = []clientauthTest{\n \t// Server doesn't asks for cert\n \t// go test -run \"TestRunServer\" -serve -clientauth 0\n@@ -1285,7 +1433,7 @@ var clientauthTests = []clientauthTest{\n \t// go test -run \"TestRunServer\" -serve -clientauth 1\n \t// gnutls-cli --insecure --debug 100 -p 10443 localhost\n \t{\"RequestClientCert, client gives it\", RequestClientCert,\n-\t\t[]*x509.Certificate{clicert},\n+\t\t[]*x509.Certificate{clientCertificate},\n \t\t[][]byte{{\n \t\t\t0x16, 0x03, 0x02, 0x00, 0x7a, 0x01, 0x00, 0x00,\n \t\t\t0x76, 0x03, 0x02, 0x4e, 0xe7, 0x44, 0xda, 0x58,\n@@ -1528,14 +1676,16 @@ var clientauthTests = []clientauthTest{\n \t\t\t\t0x00, 0x16, 0x53, 0xf5, 0xff, 0xe0, 0xa1, 0x6c,\n \t\t\t\t0x33, 0xf4, 0x4e, 0x89, 0x68, 0xe1, 0xf7, 0x61,\n \t\t\t\t0x13, 0xb3, 0x12, 0xa1, 0x8e, 0x5a, 0x7a, 0x02,\n-\t\t\t}}},\n+\t\t\t},\n+\t\t},\n+\t},\n }\n \n // cert.pem and key.pem were generated with generate_cert.go\n // Thus, they have no ExtKeyUsage fields and trigger an error\n // when verification is turned on.\n \n-var clicert = loadPEMCert(`\n+var clientCertificate = loadPEMCert(`\n -----BEGIN CERTIFICATE-----\n MIIB7TCCAVigAwIBAgIBADALBgkqhkiG9w0BAQUwJjEQMA4GA1UEChMHQWNtZSBD\n bzESMBAGA1UEAxMJMTI3LjAuMC4xMB4XDTExMTIwODA3NTUxMloXDTEyMTIwNzA4"}, {"sha": "b6e73fe293b84ddb71d35c6a71d50b6cfd32a859", "filename": "libgo/go/crypto/tls/key_agreement.go", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -20,11 +20,11 @@ import (\n // encrypts the pre-master secret to the server's public key.\n type rsaKeyAgreement struct{}\n \n-func (ka rsaKeyAgreement) generateServerKeyExchange(config *Config, clientHello *clientHelloMsg, hello *serverHelloMsg) (*serverKeyExchangeMsg, error) {\n+func (ka rsaKeyAgreement) generateServerKeyExchange(config *Config, cert *Certificate, clientHello *clientHelloMsg, hello *serverHelloMsg) (*serverKeyExchangeMsg, error) {\n \treturn nil, nil\n }\n \n-func (ka rsaKeyAgreement) processClientKeyExchange(config *Config, ckx *clientKeyExchangeMsg, version uint16) ([]byte, error) {\n+func (ka rsaKeyAgreement) processClientKeyExchange(config *Config, cert *Certificate, ckx *clientKeyExchangeMsg, version uint16) ([]byte, error) {\n \tpreMasterSecret := make([]byte, 48)\n \t_, err := io.ReadFull(config.rand(), preMasterSecret[2:])\n \tif err != nil {\n@@ -44,7 +44,7 @@ func (ka rsaKeyAgreement) processClientKeyExchange(config *Config, ckx *clientKe\n \t\tciphertext = ckx.ciphertext[2:]\n \t}\n \n-\terr = rsa.DecryptPKCS1v15SessionKey(config.rand(), config.Certificates[0].PrivateKey.(*rsa.PrivateKey), ciphertext, preMasterSecret)\n+\terr = rsa.DecryptPKCS1v15SessionKey(config.rand(), cert.PrivateKey.(*rsa.PrivateKey), ciphertext, preMasterSecret)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -109,7 +109,7 @@ type ecdheRSAKeyAgreement struct {\n \tx, y       *big.Int\n }\n \n-func (ka *ecdheRSAKeyAgreement) generateServerKeyExchange(config *Config, clientHello *clientHelloMsg, hello *serverHelloMsg) (*serverKeyExchangeMsg, error) {\n+func (ka *ecdheRSAKeyAgreement) generateServerKeyExchange(config *Config, cert *Certificate, clientHello *clientHelloMsg, hello *serverHelloMsg) (*serverKeyExchangeMsg, error) {\n \tvar curveid uint16\n \n Curve:\n@@ -151,7 +151,7 @@ Curve:\n \tcopy(serverECDHParams[4:], ecdhePublic)\n \n \tmd5sha1 := md5SHA1Hash(clientHello.random, hello.random, serverECDHParams)\n-\tsig, err := rsa.SignPKCS1v15(config.rand(), config.Certificates[0].PrivateKey.(*rsa.PrivateKey), crypto.MD5SHA1, md5sha1)\n+\tsig, err := rsa.SignPKCS1v15(config.rand(), cert.PrivateKey.(*rsa.PrivateKey), crypto.MD5SHA1, md5sha1)\n \tif err != nil {\n \t\treturn nil, errors.New(\"failed to sign ECDHE parameters: \" + err.Error())\n \t}\n@@ -167,7 +167,7 @@ Curve:\n \treturn skx, nil\n }\n \n-func (ka *ecdheRSAKeyAgreement) processClientKeyExchange(config *Config, ckx *clientKeyExchangeMsg, version uint16) ([]byte, error) {\n+func (ka *ecdheRSAKeyAgreement) processClientKeyExchange(config *Config, cert *Certificate, ckx *clientKeyExchangeMsg, version uint16) ([]byte, error) {\n \tif len(ckx.ciphertext) == 0 || int(ckx.ciphertext[0]) != len(ckx.ciphertext)-1 {\n \t\treturn nil, errors.New(\"bad ClientKeyExchange\")\n \t}"}, {"sha": "89136ef6e40f1cc473ddabbbc0a91976e5b9b153", "filename": "libgo/go/database/sql/sql.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -327,6 +327,9 @@ func (db *DB) prepare(query string) (stmt *Stmt, err error) {\n // Exec executes a query without returning any rows.\n func (db *DB) Exec(query string, args ...interface{}) (Result, error) {\n \tsargs, err := subsetTypeArgs(args)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n \tvar res Result\n \tfor i := 0; i < 10; i++ {\n \t\tres, err = db.exec(query, sargs)"}, {"sha": "705022792a863bc417179c261467db2251c48da4", "filename": "libgo/go/encoding/ascii85/ascii85.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -57,6 +57,7 @@ func Encode(dst, src []byte) int {\n \t\tif v == 0 && len(src) >= 4 {\n \t\t\tdst[0] = 'z'\n \t\t\tdst = dst[1:]\n+\t\t\tsrc = src[4:]\n \t\t\tn++\n \t\t\tcontinue\n \t\t}"}, {"sha": "42cf7e80e1b3b5ccb57080122d2fd7da9d78219d", "filename": "libgo/go/encoding/ascii85/ascii85_test.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -28,6 +28,11 @@ var pairs = []testpair{\n \t\t\t\"l(DId<j@<?3r@:F%a+D58'ATD4$Bl@l3De:,-DJs`8ARoFb/0JMK@qB4^F!,R<AKZ&-DfTqBG%G\\n\" +\n \t\t\t\">uD.RTpAKYo'+CT/5+Cei#DII?(E,9)oF*2M7/c\\n\",\n \t},\n+\t// Special case when shortening !!!!! to z.\n+\t{\n+\t\t\"\\000\\000\\000\\000\",\n+\t\t\"z\",\n+\t},\n }\n \n var bigtest = pairs[len(pairs)-1]"}, {"sha": "ac2b5f8daa6cb63ce1d2b689c85eb8a9c76d22cb", "filename": "libgo/go/encoding/asn1/asn1.go", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -377,11 +377,6 @@ func parseTagAndLength(bytes []byte, initOffset int) (ret tagAndLength, offset i\n \t} else {\n \t\t// Bottom 7 bits give the number of length bytes to follow.\n \t\tnumBytes := int(b & 0x7f)\n-\t\t// We risk overflowing a signed 32-bit number if we accept more than 3 bytes.\n-\t\tif numBytes > 3 {\n-\t\t\terr = StructuralError{\"length too large\"}\n-\t\t\treturn\n-\t\t}\n \t\tif numBytes == 0 {\n \t\t\terr = SyntaxError{\"indefinite length found (not DER)\"}\n \t\t\treturn\n@@ -394,8 +389,19 @@ func parseTagAndLength(bytes []byte, initOffset int) (ret tagAndLength, offset i\n \t\t\t}\n \t\t\tb = bytes[offset]\n \t\t\toffset++\n+\t\t\tif ret.length >= 1<<23 {\n+\t\t\t\t// We can't shift ret.length up without\n+\t\t\t\t// overflowing.\n+\t\t\t\terr = StructuralError{\"length too large\"}\n+\t\t\t\treturn\n+\t\t\t}\n \t\t\tret.length <<= 8\n \t\t\tret.length |= int(b)\n+\t\t\tif ret.length == 0 {\n+\t\t\t\t// DER requires that lengths be minimal.\n+\t\t\t\terr = StructuralError{\"superfluous leading zeros in length\"}\n+\t\t\t\treturn\n+\t\t\t}\n \t\t}\n \t}\n "}, {"sha": "eb848bdb4afda1ca5cd747451ea8d3db84dad6e9", "filename": "libgo/go/encoding/asn1/asn1_test.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -283,6 +283,12 @@ var tagAndLengthData = []tagAndLengthTest{\n \t{[]byte{0x00, 0x83, 0x01, 0x00}, false, tagAndLength{}},\n \t{[]byte{0x1f, 0x85}, false, tagAndLength{}},\n \t{[]byte{0x30, 0x80}, false, tagAndLength{}},\n+\t// Superfluous zeros in the length should be an error.\n+\t{[]byte{0xa0, 0x82, 0x00, 0x01}, false, tagAndLength{}},\n+\t// Lengths up to the maximum size of an int should work.\n+\t{[]byte{0xa0, 0x84, 0x7f, 0xff, 0xff, 0xff}, true, tagAndLength{2, 0, 0x7fffffff, true}},\n+\t// Lengths that would overflow an int should be rejected.\n+\t{[]byte{0xa0, 0x84, 0x80, 0x00, 0x00, 0x00}, false, tagAndLength{}},\n }\n \n func TestParseTagAndLength(t *testing.T) {"}, {"sha": "f8a51a4e7568fc8c5087718bb0057c1b5db306dc", "filename": "libgo/go/encoding/base64/base64.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -230,7 +230,12 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n \t\t\tif in == '=' && j >= 2 && len(src) < 4 {\n \t\t\t\t// We've reached the end and there's\n \t\t\t\t// padding\n+\t\t\t\tif len(src) == 0 && j == 2 {\n+\t\t\t\t\t// not enough padding\n+\t\t\t\t\treturn n, false, CorruptInputError(len(osrc))\n+\t\t\t\t}\n \t\t\t\tif len(src) > 0 && src[0] != '=' {\n+\t\t\t\t\t// incorrect padding\n \t\t\t\t\treturn n, false, CorruptInputError(len(osrc) - len(src) - 1)\n \t\t\t\t}\n \t\t\t\tdlen = j"}, {"sha": "9c35372598cb292220b4bdb5781cff92e636a806", "filename": "libgo/go/encoding/base64/base64_test.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -151,6 +151,9 @@ func TestDecodeCorrupt(t *testing.T) {\n \t\t{\"AAA=AAAA\", 3},\n \t\t{\"AAAAA\", 4},\n \t\t{\"AAAAAA\", 4},\n+\t\t{\"A=\", 1},\n+\t\t{\"AA=\", 3},\n+\t\t{\"AAAAAA=\", 7},\n \t}\n \n \tfor _, e := range examples {"}, {"sha": "842672c3974509e2c70e0624ac3a268c0d2b6584", "filename": "libgo/go/encoding/json/encode.go", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -17,6 +17,7 @@ import (\n \t\"runtime\"\n \t\"sort\"\n \t\"strconv\"\n+\t\"strings\"\n \t\"sync\"\n \t\"unicode\"\n \t\"unicode/utf8\"\n@@ -415,9 +416,11 @@ func isValidTag(s string) bool {\n \t\treturn false\n \t}\n \tfor _, c := range s {\n-\t\tswitch c {\n-\t\tcase '$', '-', '_', '/', '%':\n-\t\t\t// Acceptable\n+\t\tswitch {\n+\t\tcase strings.ContainsRune(\"!#$%&()*+-./:<=>?@[]^_{|}~\", c):\n+\t\t\t// Backslash and quote chars are reserved, but\n+\t\t\t// otherwise any punctuation chars are allowed\n+\t\t\t// in a tag name.\n \t\tdefault:\n \t\t\tif !unicode.IsLetter(c) && !unicode.IsDigit(c) {\n \t\t\t\treturn false"}, {"sha": "da8b12bd8fb4a8f65c21e918cfdf6b721aec0895", "filename": "libgo/go/encoding/json/tagkey_test.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fjson%2Ftagkey_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fjson%2Ftagkey_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Ftagkey_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -40,6 +40,10 @@ type percentSlashTag struct {\n \tV string `json:\"text/html%\"` // http://golang.org/issue/2718\n }\n \n+type punctuationTag struct {\n+\tV string `json:\"!#$%&()*+-./:<=>?@[]^_{|}~\"` // http://golang.org/issue/3546\n+}\n+\n type emptyTag struct {\n \tW string\n }\n@@ -73,6 +77,7 @@ var structTagObjectKeyTests = []struct {\n \t{badFormatTag{\"Orfevre\"}, \"Orfevre\", \"Y\"},\n \t{badCodeTag{\"Reliable Man\"}, \"Reliable Man\", \"Z\"},\n \t{percentSlashTag{\"brut\"}, \"brut\", \"text/html%\"},\n+\t{punctuationTag{\"Union Rags\"}, \"Union Rags\", \"!#$%&()*+-./:<=>?@[]^_{|}~\"},\n }\n \n func TestStructTagObjectKey(t *testing.T) {"}, {"sha": "3c1f5ab7006c02607ceb4ceee187adcc2dffb841", "filename": "libgo/go/encoding/pem/pem.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fpem%2Fpem.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fpem%2Fpem.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fpem%2Fpem.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -28,9 +28,10 @@ type Block struct {\n }\n \n // getLine results the first \\r\\n or \\n delineated line from the given byte\n-// array. The line does not include the \\r\\n or \\n. The remainder of the byte\n-// array (also not including the new line bytes) is also returned and this will\n-// always be smaller than the original argument.\n+// array. The line does not include trailing whitespace or the trailing new\n+// line bytes. The remainder of the byte array (also not including the new line\n+// bytes) is also returned and this will always be smaller than the original\n+// argument.\n func getLine(data []byte) (line, rest []byte) {\n \ti := bytes.Index(data, []byte{'\\n'})\n \tvar j int\n@@ -43,7 +44,7 @@ func getLine(data []byte) (line, rest []byte) {\n \t\t\ti--\n \t\t}\n \t}\n-\treturn data[0:i], data[j:]\n+\treturn bytes.TrimRight(data[0:i], \" \\t\"), data[j:]\n }\n \n // removeWhitespace returns a copy of its input with all spaces, tab and"}, {"sha": "613353483dc2bf569b5e8ef369de7bcfd5b9795b", "filename": "libgo/go/encoding/pem/pem_test.go", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fpem%2Fpem_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fencoding%2Fpem%2Fpem_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fpem%2Fpem_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -127,13 +127,13 @@ Certificate chain\n -----BEGIN CERTIFICATE-----\n testing\n -----BEGIN CERTIFICATE-----\n------BEGIN CERTIFICATE-----\n+-----BEGIN CERTIFICATE----- \n MIID6TCCA1ICAQEwDQYJKoZIhvcNAQEFBQAwgYsxCzAJBgNVBAYTAlVTMRMwEQYD\n VQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRQwEgYDVQQK\n-EwtHb29nbGUgSW5jLjEMMAoGA1UECxMDRW5nMQwwCgYDVQQDEwNhZ2wxHTAbBgkq\n-hkiG9w0BCQEWDmFnbEBnb29nbGUuY29tMB4XDTA5MDkwOTIyMDU0M1oXDTEwMDkw\n-OTIyMDU0M1owajELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAf\n-BgNVBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEjMCEGA1UEAxMaZXVyb3Bh\n+EwtHb29nbGUgSW5jLjEMMAoGA1UECxMDRW5nMQwwCgYDVQQDEwNhZ2wxHTAbBgkq \n+hkiG9w0BCQEWDmFnbEBnb29nbGUuY29tMB4XDTA5MDkwOTIyMDU0M1oXDTEwMDkw  \n+OTIyMDU0M1owajELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAf  \t  \n+BgNVBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEjMCEGA1UEAxMaZXVyb3Bh\t\t  \n LnNmby5jb3JwLmdvb2dsZS5jb20wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\n AoICAQC6pgYt7/EibBDumASF+S0qvqdL/f+nouJw2T1Qc8GmXF/iiUcrsgzh/Fd8\n pDhz/T96Qg9IyR4ztuc2MXrmPra+zAuSf5bevFReSqvpIt8Duv0HbDbcqs/XKPfB\n@@ -149,15 +149,15 @@ Pomjn71GNTtDeWAXibjCgdL6iHACCF6Htbl0zGlG0OAK+bdn0QIDAQABMA0GCSqG\n SIb3DQEBBQUAA4GBAOKnQDtqBV24vVqvesL5dnmyFpFPXBn3WdFfwD6DzEb21UVG\n 5krmJiu+ViipORJPGMkgoL6BjU21XI95VQbun5P8vvg8Z+FnFsvRFY3e1CCzAVQY\n ZsUkLw2I7zI/dNlWdB8Xp7v+3w9sX5N3J/WuJ1KOO5m26kRlHQo7EzT3974g\n------END CERTIFICATE-----\n+-----END CERTIFICATE-----   \n  1 s:/C=ZA/O=Ca Inc./CN=CA Inc\n \n------BEGIN RSA PRIVATE KEY-----\n-Proc-Type: 4,ENCRYPTED\n-DEK-Info: DES-EDE3-CBC,80C7C7A09690757A\n-\n+-----BEGIN RSA PRIVATE KEY-----   \t\n+Proc-Type: 4,ENCRYPTED\t  \n+DEK-Info: DES-EDE3-CBC,80C7C7A09690757A  \t\n+  \t\n eQp5ZkH6CyHBz7BZfUPxyLCCmftsBJ7HlqGb8Ld21cSwnzWZ4/SIlhyrUtsfw7VR\n-2TTwA+odo9ex7GdxOTaH8oZFumIRoiEjHsk8U7Bhntp+ekkPP79xunnN7hb7hkhr\n+2TTwA+odo9ex7GdxOTaH8oZFumIRoiEjHsk8U7Bhntp+ekkPP79xunnN7hb7hkhr   \n yGDQZgA7s2cQHQ71v3gwT2BACAft26jCjbM1wgNzBnJ8M0Rzn68YWqaPtdBu8qb/\n zVR5JB1mnqvTSbFsfF5yMc6o2WQ9jJCl6KypnMl+BpL+dlvdjYVK4l9lYsB1Hs3d\n +zDBbWxos818zzhS8/y6eIfiSG27cqrbhURbmgiSfDXjncK4m/pLcQ7mmBL6mFOr"}, {"sha": "f0842a18a295d8690cf6588cc6743c429422eb49", "filename": "libgo/go/flag/flag.go", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fflag%2Fflag.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fflag%2Fflag.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fflag%2Fflag.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -7,9 +7,11 @@\n \n \tUsage:\n \n-\tDefine flags using flag.String(), Bool(), Int(), etc. Example:\n+\tDefine flags using flag.String(), Bool(), Int(), etc.\n+\n+\tThis declares an integer flag, -flagname, stored in the pointer ip, with type *int.\n \t\timport \"flag\"\n-\t\tvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n+\t\tvar ip = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n \tIf you like, you can bind the flag to a variable using the Var() functions.\n \t\tvar flagvar int\n \t\tfunc init() {\n@@ -26,8 +28,8 @@\n \n \tFlags may then be used directly. If you're using the flags themselves,\n \tthey are all pointers; if you bind to variables, they're values.\n-\t\tfmt.Println(\"ip has value \", *ip);\n-\t\tfmt.Println(\"flagvar has value \", flagvar);\n+\t\tfmt.Println(\"ip has value \", *ip)\n+\t\tfmt.Println(\"flagvar has value \", flagvar)\n \n \tAfter parsing, the arguments after the flag are available as the\n \tslice flag.Args() or individually as flag.Arg(i)."}, {"sha": "500a45944d851d46581ae315f8fd523b8bb98662", "filename": "libgo/go/fmt/fmt_test.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Ffmt_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -461,6 +461,9 @@ var fmttests = []struct {\n \t// zero reflect.Value, which formats as <nil>.\n \t// This test is just to check that it shows the two NaNs at all.\n \t{\"%v\", map[float64]int{math.NaN(): 1, math.NaN(): 2}, \"map[NaN:<nil> NaN:<nil>]\"},\n+\n+\t// Used to crash because nByte didn't allow for a sign.\n+\t{\"%b\", int64(-1 << 63), \"-1000000000000000000000000000000000000000000000000000000000000000\"},\n }\n \n func TestSprintf(t *testing.T) {"}, {"sha": "caf900d5c3098caf3fcef0c5ef17c0f7a37b32d7", "filename": "libgo/go/fmt/format.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ffmt%2Fformat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ffmt%2Fformat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fformat.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -10,7 +10,7 @@ import (\n )\n \n const (\n-\tnByte = 64\n+\tnByte = 65 // %b of an int64, plus a sign.\n \n \tldigits = \"0123456789abcdef\"\n \tudigits = \"0123456789ABCDEF\""}, {"sha": "24cb7af85240ff6cdec990aaa15891c05547019f", "filename": "libgo/go/html/escape.go", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fhtml%2Fescape.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fhtml%2Fescape.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fescape.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -210,13 +210,15 @@ func escape(w writer, s string) error {\n \t\tcase '&':\n \t\t\tesc = \"&amp;\"\n \t\tcase '\\'':\n-\t\t\tesc = \"&apos;\"\n+\t\t\t// \"&#39;\" is shorter than \"&apos;\" and apos was not in HTML until HTML5.\n+\t\t\tesc = \"&#39;\"\n \t\tcase '<':\n \t\t\tesc = \"&lt;\"\n \t\tcase '>':\n \t\t\tesc = \"&gt;\"\n \t\tcase '\"':\n-\t\t\tesc = \"&quot;\"\n+\t\t\t// \"&#34;\" is shorter than \"&quot;\".\n+\t\t\tesc = \"&#34;\"\n \t\tdefault:\n \t\t\tpanic(\"unrecognized escape character\")\n \t\t}\n@@ -231,7 +233,7 @@ func escape(w writer, s string) error {\n }\n \n // EscapeString escapes special characters like \"<\" to become \"&lt;\". It\n-// escapes only five such characters: amp, apos, lt, gt and quot.\n+// escapes only five such characters: <, >, &, ' and \".\n // UnescapeString(EscapeString(s)) == s always holds, but the converse isn't\n // always true.\n func EscapeString(s string) string {"}, {"sha": "8396c0a155b4cb33ba0009c158353936ea75b770", "filename": "libgo/go/mime/mediatype.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmediatype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmediatype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmediatype.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -99,7 +99,7 @@ func ParseMediaType(v string) (mediatype string, params map[string]string, err e\n \n \terr = checkMediaTypeDisposition(mediatype)\n \tif err != nil {\n-\t\treturn\n+\t\treturn \"\", nil, err\n \t}\n \n \tparams = make(map[string]string)"}, {"sha": "e41ead237a5b508ebb77db51812a42982046c5e5", "filename": "libgo/go/mime/mediatype_test.go", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmediatype_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmediatype_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmediatype_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -244,13 +244,33 @@ func TestParseMediaType(t *testing.T) {\n \t}\n }\n \n+type badMediaTypeTest struct {\n+\tin  string\n+\terr string\n+}\n+\n+var badMediaTypeTests = []badMediaTypeTest{\n+\t{\"bogus ;=========\", \"mime: invalid media parameter\"},\n+\t{\"bogus/<script>alert</script>\", \"mime: expected token after slash\"},\n+\t{\"bogus/bogus<script>alert</script>\", \"mime: unexpected content after media subtype\"},\n+}\n+\n func TestParseMediaTypeBogus(t *testing.T) {\n-\tmt, params, err := ParseMediaType(\"bogus ;=========\")\n-\tif err == nil {\n-\t\tt.Fatalf(\"expected an error parsing invalid media type; got type %q, params %#v\", mt, params)\n-\t}\n-\tif err.Error() != \"mime: invalid media parameter\" {\n-\t\tt.Errorf(\"expected invalid media parameter; got error %q\", err)\n+\tfor _, tt := range badMediaTypeTests {\n+\t\tmt, params, err := ParseMediaType(tt.in)\n+\t\tif err == nil {\n+\t\t\tt.Errorf(\"ParseMediaType(%q) = nil error; want parse error\", tt.in)\n+\t\t\tcontinue\n+\t\t}\n+\t\tif err.Error() != tt.err {\n+\t\t\tt.Errorf(\"ParseMediaType(%q) = err %q; want %q\", tt.in, err.Error(), tt.err)\n+\t\t}\n+\t\tif params != nil {\n+\t\t\tt.Errorf(\"ParseMediaType(%q): got non-nil params on error\", tt.in)\n+\t\t}\n+\t\tif mt != \"\" {\n+\t\t\tt.Errorf(\"ParseMediaType(%q): got non-empty media type string on error\", tt.in)\n+\t\t}\n \t}\n }\n "}, {"sha": "6ace4be564c94a7782e5ab48557cc3b56ac1e975", "filename": "libgo/go/mime/multipart/multipart.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -185,6 +185,14 @@ func (r *Reader) NextPart() (*Part, error) {\n \texpectNewPart := false\n \tfor {\n \t\tline, err := r.bufReader.ReadSlice('\\n')\n+\t\tif err == io.EOF && bytes.Equal(line, r.dashBoundaryDash) {\n+\t\t\t// If the buffer ends in \"--boundary--\" without the\n+\t\t\t// trailing \"\\r\\n\", ReadSlice will return an error\n+\t\t\t// (since it's missing the '\\n'), but this is a valid\n+\t\t\t// multipart EOF so we need to return io.EOF instead of\n+\t\t\t// a fmt-wrapped one.\n+\t\t\treturn nil, io.EOF\n+\t\t}\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"multipart: NextPart: %v\", err)\n \t\t}"}, {"sha": "ca7108d7ad0a4bd666f9d9364cba70830008f1c2", "filename": "libgo/go/mime/multipart/multipart_test.go", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -10,6 +10,7 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"os\"\n \t\"strings\"\n \t\"testing\"\n )\n@@ -377,3 +378,52 @@ func TestLineContinuation(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+// Test parsing an image attachment from gmail, which previously failed.\n+func TestNested(t *testing.T) {\n+\t// nested-mime is the body part of a multipart/mixed email\n+\t// with boundary e89a8ff1c1e83553e304be640612\n+\tf, err := os.Open(\"testdata/nested-mime\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer f.Close()\n+\tmr := NewReader(f, \"e89a8ff1c1e83553e304be640612\")\n+\tp, err := mr.NextPart()\n+\tif err != nil {\n+\t\tt.Fatalf(\"error reading first section (alternative): %v\", err)\n+\t}\n+\n+\t// Read the inner text/plain and text/html sections of the multipart/alternative.\n+\tmr2 := NewReader(p, \"e89a8ff1c1e83553e004be640610\")\n+\tp, err = mr2.NextPart()\n+\tif err != nil {\n+\t\tt.Fatalf(\"reading text/plain part: %v\", err)\n+\t}\n+\tif b, err := ioutil.ReadAll(p); string(b) != \"*body*\\r\\n\" || err != nil {\n+\t\tt.Fatalf(\"reading text/plain part: got %q, %v\", b, err)\n+\t}\n+\tp, err = mr2.NextPart()\n+\tif err != nil {\n+\t\tt.Fatalf(\"reading text/html part: %v\", err)\n+\t}\n+\tif b, err := ioutil.ReadAll(p); string(b) != \"<b>body</b>\\r\\n\" || err != nil {\n+\t\tt.Fatalf(\"reading text/html part: got %q, %v\", b, err)\n+\t}\n+\n+\tp, err = mr2.NextPart()\n+\tif err != io.EOF {\n+\t\tt.Fatalf(\"final inner NextPart = %v; want io.EOF\", err)\n+\t}\n+\n+\t// Back to the outer multipart/mixed, reading the image attachment.\n+\t_, err = mr.NextPart()\n+\tif err != nil {\n+\t\tt.Fatalf(\"error reading the image attachment at the end: %v\", err)\n+\t}\n+\n+\t_, err = mr.NextPart()\n+\tif err != io.EOF {\n+\t\tt.Fatalf(\"final outer NextPart = %v; want io.EOF\", err)\n+\t}\n+}"}, {"sha": "71c238e38902fef782169ac6114f9e7428bd0113", "filename": "libgo/go/mime/multipart/testdata/nested-mime", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmultipart%2Ftestdata%2Fnested-mime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fmime%2Fmultipart%2Ftestdata%2Fnested-mime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmultipart%2Ftestdata%2Fnested-mime?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -0,0 +1,29 @@\n+--e89a8ff1c1e83553e304be640612\r\n+Content-Type: multipart/alternative; boundary=e89a8ff1c1e83553e004be640610\r\n+\r\n+--e89a8ff1c1e83553e004be640610\r\n+Content-Type: text/plain; charset=UTF-8\r\n+\r\n+*body*\r\n+\r\n+--e89a8ff1c1e83553e004be640610\r\n+Content-Type: text/html; charset=UTF-8\r\n+\r\n+<b>body</b>\r\n+\r\n+--e89a8ff1c1e83553e004be640610--\r\n+--e89a8ff1c1e83553e304be640612\r\n+Content-Type: image/png; name=\"x.png\"\r\n+Content-Disposition: attachment; \r\n+\tfilename=\"x.png\"\r\n+Content-Transfer-Encoding: base64\r\n+X-Attachment-Id: f_h1edgigu0\r\n+\r\n+iVBORw0KGgoAAAANSUhEUgAAAagAAADrCAIAAACza5XhAAAKMWlDQ1BJQ0MgUHJvZmlsZQAASImd\r\n+lndUU9kWh8+9N71QkhCKlNBraFICSA29SJEuKjEJEErAkAAiNkRUcERRkaYIMijggKNDkbEiioUB\r\n+8b2kqeGaj4aTNftesu5mob4pr07ecMywRwLBvDCJOksqlUyldAZD7g9fxIZRWWPMvXRNJROJRBIG\r\n+Y7Vx0mva1HAwYqibdKONXye3dW4iUonhWFJnqK7OaanU1gGkErFYEgaj0cg8wK+zVPh2ziwnHy07\r\n+U8lYTNapezSzOuevRwLB7CFkqQQCwaJDiBQIBIJFhwh8AoFg0SHUqQUCASRJKkwkhMy/JfODWPEJ\r\n+BIJFhwh8AoFg0TFnQqQ55GtPFopcJsN97e1nYtNuIBYeGBgYCmYrmE3jZ05iaGAoMX0xzxkWz6Hv\r\n+yO7WvrlwzA0uLzrD+VkKqViwl9IfTBVNFMyc/x9alloiPPlqhQAAAABJRU5ErkJggg==\r\n+--e89a8ff1c1e83553e304be640612--\r"}, {"sha": "ec814407ddb2bddc97cb349b57b003ed60f0cec5", "filename": "libgo/go/net/http/example_test.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fhttp%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fhttp%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fexample_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -49,3 +49,8 @@ func ExampleGet() {\n \tres.Body.Close()\n \tfmt.Printf(\"%s\", robots)\n }\n+\n+func ExampleFileServer() {\n+\t// we use StripPrefix so that /tmpfiles/somefile will access /tmp/somefile\n+\thttp.Handle(\"/tmpfiles/\", http.StripPrefix(\"/tmpfiles/\", http.FileServer(http.Dir(\"/tmp\"))))\n+}"}, {"sha": "924ffd348156e030a98e227ec4bb5691761af46e", "filename": "libgo/go/net/http/server.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -785,8 +785,10 @@ var htmlReplacer = strings.NewReplacer(\n \t\"&\", \"&amp;\",\n \t\"<\", \"&lt;\",\n \t\">\", \"&gt;\",\n-\t`\"`, \"&quot;\",\n-\t\"'\", \"&apos;\",\n+\t// \"&#34;\" is shorter than \"&quot;\".\n+\t`\"`, \"&#34;\",\n+\t// \"&#39;\" is shorter than \"&apos;\" and apos was not in HTML until HTML5.\n+\t\"'\", \"&#39;\",\n )\n \n func htmlEscape(s string) string {"}, {"sha": "9fc7ecdb942a34f6cc05f318fe3cf3312fd45154", "filename": "libgo/go/net/iprawsock_posix.go", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fiprawsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fiprawsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fiprawsock_posix.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -83,9 +83,7 @@ func (c *IPConn) Close() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\terr := c.fd.Close()\n-\tc.fd = nil\n-\treturn err\n+\treturn c.fd.Close()\n }\n \n // LocalAddr returns the local network address."}, {"sha": "e6b1937fb2c7f04629252bea65f76b29606c0ac3", "filename": "libgo/go/net/tcpsock_posix.go", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Ftcpsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Ftcpsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsock_posix.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -108,9 +108,7 @@ func (c *TCPConn) Close() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\terr := c.fd.Close()\n-\tc.fd = nil\n-\treturn err\n+\treturn c.fd.Close()\n }\n \n // CloseRead shuts down the reading side of the TCP connection.\n@@ -359,5 +357,5 @@ func (l *TCPListener) SetDeadline(t time.Time) error {\n \n // File returns a copy of the underlying os.File, set to blocking mode.\n // It is the caller's responsibility to close f when finished.\n-// Closing c does not affect f, and closing f does not affect c.\n+// Closing l does not affect f, and closing f does not affect l.\n func (l *TCPListener) File() (f *os.File, err error) { return l.fd.dup() }"}, {"sha": "9c6b6d39336a39e37c3cd0dca22fc5622c98a28d", "filename": "libgo/go/net/udpsock_posix.go", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fudpsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Fudpsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fudpsock_posix.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -88,9 +88,7 @@ func (c *UDPConn) Close() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\terr := c.fd.Close()\n-\tc.fd = nil\n-\treturn err\n+\treturn c.fd.Close()\n }\n \n // LocalAddr returns the local network address."}, {"sha": "57d784c71cf197b10e3682c2adc657a165f38c96", "filename": "libgo/go/net/unixsock_posix.go", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Funixsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Funixsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Funixsock_posix.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -141,9 +141,7 @@ func (c *UnixConn) Close() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\terr := c.fd.Close()\n-\tc.fd = nil\n-\treturn err\n+\treturn c.fd.Close()\n }\n \n // LocalAddr returns the local network address, a *UnixAddr.\n@@ -406,7 +404,7 @@ func (l *UnixListener) SetDeadline(t time.Time) (err error) {\n \n // File returns a copy of the underlying os.File, set to blocking mode.\n // It is the caller's responsibility to close f when finished.\n-// Closing c does not affect f, and closing f does not affect c.\n+// Closing l does not affect f, and closing f does not affect l.\n func (l *UnixListener) File() (f *os.File, err error) { return l.fd.dup() }\n \n // ListenUnixgram listens for incoming Unix datagram packets addressed to the"}, {"sha": "b6e79adc29af421e8e20b71ca1405e559570af4f", "filename": "libgo/go/net/url/url.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Furl%2Furl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Furl%2Furl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Furl%2Furl.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -61,16 +61,16 @@ func (e EscapeError) Error() string {\n }\n \n // Return true if the specified character should be escaped when\n-// appearing in a URL string, according to RFC 2396.\n+// appearing in a URL string, according to RFC 3986.\n // When 'all' is true the full range of reserved characters are matched.\n func shouldEscape(c byte, mode encoding) bool {\n-\t// RFC 2396 \u00a72.3 Unreserved characters (alphanum)\n+\t// \u00a72.3 Unreserved characters (alphanum)\n \tif 'A' <= c && c <= 'Z' || 'a' <= c && c <= 'z' || '0' <= c && c <= '9' {\n \t\treturn false\n \t}\n-\t// TODO: Update the character sets after RFC 3986.\n+\n \tswitch c {\n-\tcase '-', '_', '.', '!', '~', '*', '\\'', '(', ')': // \u00a72.3 Unreserved characters (mark)\n+\tcase '-', '_', '.', '~': // \u00a72.3 Unreserved characters (mark)\n \t\treturn false\n \n \tcase '$', '&', '+', ',', '/', ':', ';', '=', '?', '@': // \u00a72.2 Reserved characters (reserved)"}, {"sha": "d8b253142f0c6df1a4199d1ca93244e5321ba6a8", "filename": "libgo/go/net/url/url_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Furl%2Furl_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fnet%2Furl%2Furl_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Furl%2Furl_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -394,8 +394,8 @@ var escapeTests = []EscapeTest{\n \t\tnil,\n \t},\n \t{\n-\t\t\" ?&=#+%!<>#\\\"{}|\\\\^[]`\u263a\\t\",\n-\t\t\"+%3F%26%3D%23%2B%25!%3C%3E%23%22%7B%7D%7C%5C%5E%5B%5D%60%E2%98%BA%09\",\n+\t\t\" ?&=#+%!<>#\\\"{}|\\\\^[]`\u263a\\t:/@$'()*,;\",\n+\t\t\"+%3F%26%3D%23%2B%25%21%3C%3E%23%22%7B%7D%7C%5C%5E%5B%5D%60%E2%98%BA%09%3A%2F%40%24%27%28%29%2A%2C%3B\",\n \t\tnil,\n \t},\n }"}, {"sha": "fbb0d4f3fe0f2ec1e08e51bd9834a70a43b99c8e", "filename": "libgo/go/os/error_windows.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fos%2Ferror_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fos%2Ferror_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Ferror_windows.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -26,5 +26,5 @@ func isPermission(err error) bool {\n \tif pe, ok := err.(*PathError); ok {\n \t\terr = pe.Err\n \t}\n-\treturn err == ErrPermission\n+\treturn err == syscall.ERROR_ACCESS_DENIED || err == ErrPermission\n }"}, {"sha": "a4e429baec18a51afaca0c8831b004637ccb540a", "filename": "libgo/go/path/filepath/path.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fpath%2Ffilepath%2Fpath.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fpath%2Ffilepath%2Fpath.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fpath%2Ffilepath%2Fpath.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -30,6 +30,9 @@ const (\n //\t   that is, replace \"/..\" by \"/\" at the beginning of a path,\n //         assuming Separator is '/'.\n //\n+// The returned path ends in a slash only if it represents a root directory,\n+// such as \"/\" on Unix or `C:\\` on Windows.\n+//\n // If the result of this process is an empty string, Clean\n // returns the string \".\".\n //"}, {"sha": "a7e0415689ca9f4a1b97e545f31f239f8324eb41", "filename": "libgo/go/path/path.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fpath%2Fpath.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fpath%2Fpath.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fpath%2Fpath.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -21,6 +21,8 @@ import (\n //\t4. Eliminate .. elements that begin a rooted path:\n //\t   that is, replace \"/..\" by \"/\" at the beginning of a path.\n //\n+// The returned path ends in a slash only if it is the root \"/\".\n+//\n // If the result of this process is an empty string, Clean\n // returns the string \".\".\n //"}, {"sha": "c35dc26e90dc3ac44ac7e9da3a7e2555aa349779", "filename": "libgo/go/reflect/all_test.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Freflect%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Freflect%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fall_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -638,6 +638,7 @@ var (\n \n var deepEqualTests = []DeepEqualTest{\n \t// Equalities\n+\t{nil, nil, true},\n \t{1, 1, true},\n \t{int32(1), int32(1), true},\n \t{0.5, 0.5, true},\n@@ -696,6 +697,10 @@ func TestDeepEqual(t *testing.T) {\n }\n \n func TestTypeOf(t *testing.T) {\n+\t// Special case for nil\n+\tif typ := TypeOf(nil); typ != nil {\n+\t\tt.Errorf(\"expected nil type for nil value; got %v\", typ)\n+\t}\n \tfor _, test := range deepEqualTests {\n \t\tv := ValueOf(test.a)\n \t\tif !v.IsValid() {"}, {"sha": "4999824c91930313d09d12c690eb920d89615e49", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -970,6 +970,7 @@ func toType(p *runtimeType) Type {\n }\n \n // TypeOf returns the reflection Type of the value in the interface{}.\n+// TypeOf(nil) returns nil.\n func TypeOf(i interface{}) Type {\n \teface := *(*emptyInterface)(unsafe.Pointer(&i))\n \treturn toType(eface.typ)"}, {"sha": "659c8f448952e1cbfd2c8460891f205b14576bc0", "filename": "libgo/go/runtime/extern.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fruntime%2Fextern.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Fruntime%2Fextern.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fextern.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -20,7 +20,8 @@ func Goexit()\n \n // Caller reports file and line number information about function invocations on\n // the calling goroutine's stack.  The argument skip is the number of stack frames\n-// to ascend, with 0 identifying the caller of Caller.  The return values report the\n+// to ascend, with 1 identifying the caller of Caller.  (For historical reasons the\n+// meaning of skip differs between Caller and Callers.) The return values report the\n // program counter, file name, and line number within the file of the corresponding\n // call.  The boolean ok is false if it was not possible to recover the information.\n func Caller(skip int) (pc uintptr, file string, line int, ok bool)"}, {"sha": "feb434a3be97f115a5047ae33156dda6dbbe2cc3", "filename": "libgo/go/text/template/exec.go", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftext%2Ftemplate%2Fexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftext%2Ftemplate%2Fexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftext%2Ftemplate%2Fexec.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -491,7 +491,11 @@ func (s *state) evalCall(dot, fun reflect.Value, name string, args []parse.Node,\n \t}\n \t// Add final value if necessary.\n \tif final.IsValid() {\n-\t\targv[i] = final\n+\t\tt := typ.In(typ.NumIn() - 1)\n+\t\tif typ.IsVariadic() {\n+\t\t\tt = t.Elem()\n+\t\t}\n+\t\targv[i] = s.validateType(final, t)\n \t}\n \tresult := fun.Call(argv)\n \t// If we have an error that is not nil, stop execution and return that error to the caller.\n@@ -507,6 +511,7 @@ func (s *state) validateType(value reflect.Value, typ reflect.Type) reflect.Valu\n \t\tswitch typ.Kind() {\n \t\tcase reflect.Interface, reflect.Ptr, reflect.Chan, reflect.Map, reflect.Slice, reflect.Func:\n \t\t\t// An untyped nil interface{}. Accept as a proper nil value.\n+\t\t\t// TODO: Can we delete the other types in this list? Should we?\n \t\t\tvalue = reflect.Zero(typ)\n \t\tdefault:\n \t\t\ts.errorf(\"invalid value; expected %s\", typ)"}, {"sha": "37d25f470cd5890c043a834995eca7f4f5ab5f0b", "filename": "libgo/go/text/template/exec_test.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftext%2Ftemplate%2Fexec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftext%2Ftemplate%2Fexec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftext%2Ftemplate%2Fexec_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -470,6 +470,9 @@ var execTests = []execTest{\n \t{\"bug7a\", \"{{3 2}}\", \"\", tVal, false},\n \t{\"bug7b\", \"{{$x := 1}}{{$x 2}}\", \"\", tVal, false},\n \t{\"bug7c\", \"{{$x := 1}}{{3 | $x}}\", \"\", tVal, false},\n+\t// Pipelined arg was not being type-checked.\n+\t{\"bug8a\", \"{{3|oneArg}}\", \"\", tVal, false},\n+\t{\"bug8b\", \"{{4|dddArg 3}}\", \"\", tVal, false},\n }\n \n func zeroArgs() string {\n@@ -480,6 +483,10 @@ func oneArg(a string) string {\n \treturn \"oneArg=\" + a\n }\n \n+func dddArg(a int, b ...string) string {\n+\treturn fmt.Sprintln(a, b)\n+}\n+\n // count returns a channel that will deliver n sequential 1-letter strings starting at \"a\"\n func count(n int) chan string {\n \tif n == 0 {\n@@ -504,6 +511,7 @@ func testExecute(execTests []execTest, template *Template, t *testing.T) {\n \tb := new(bytes.Buffer)\n \tfuncs := FuncMap{\n \t\t\"count\":    count,\n+\t\t\"dddArg\":   dddArg,\n \t\t\"oneArg\":   oneArg,\n \t\t\"typeOf\":   typeOf,\n \t\t\"vfunc\":    vfunc,"}, {"sha": "8fbf0ef50a765eac21e96f1524c0f0936368c24e", "filename": "libgo/go/text/template/funcs.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftext%2Ftemplate%2Ffuncs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftext%2Ftemplate%2Ffuncs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftext%2Ftemplate%2Ffuncs.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -246,7 +246,7 @@ func not(arg interface{}) (truth bool) {\n \n var (\n \thtmlQuot = []byte(\"&#34;\") // shorter than \"&quot;\"\n-\thtmlApos = []byte(\"&#39;\") // shorter than \"&apos;\"\n+\thtmlApos = []byte(\"&#39;\") // shorter than \"&apos;\" and apos was not in HTML until HTML5\n \thtmlAmp  = []byte(\"&amp;\")\n \thtmlLt   = []byte(\"&lt;\")\n \thtmlGt   = []byte(\"&gt;\")"}, {"sha": "efca3a926990bcc99bdbe90bfe44f1e72697b224", "filename": "libgo/go/time/format.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Fformat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Fformat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fformat.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -41,8 +41,8 @@ const (\n \tANSIC       = \"Mon Jan _2 15:04:05 2006\"\n \tUnixDate    = \"Mon Jan _2 15:04:05 MST 2006\"\n \tRubyDate    = \"Mon Jan 02 15:04:05 -0700 2006\"\n-\tRFC822      = \"02 Jan 06 1504 MST\"\n-\tRFC822Z     = \"02 Jan 06 1504 -0700\" // RFC822 with numeric zone\n+\tRFC822      = \"02 Jan 06 15:04 MST\"\n+\tRFC822Z     = \"02 Jan 06 15:04 -0700\" // RFC822 with numeric zone\n \tRFC850      = \"Monday, 02-Jan-06 15:04:05 MST\"\n \tRFC1123     = \"Mon, 02 Jan 2006 15:04:05 MST\"\n \tRFC1123Z    = \"Mon, 02 Jan 2006 15:04:05 -0700\" // RFC1123 with numeric zone\n@@ -714,7 +714,7 @@ func Parse(layout, value string) (Time, error) {\n \t\t\t}\n \t\t\t// Special case: do we have a fractional second but no\n \t\t\t// fractional second in the format?\n-\t\t\tif len(value) > 2 && value[0] == '.' && isDigit(value, 1) {\n+\t\t\tif len(value) >= 2 && value[0] == '.' && isDigit(value, 1) {\n \t\t\t\t_, std, _ := nextStdChunk(layout)\n \t\t\t\tif len(std) > 0 && std[0] == '.' && isDigit(std, 1) {\n \t\t\t\t\t// Fractional second in the layout; proceed normally"}, {"sha": "2461dac06f5cf2cf53ea60f2fbce176ecb36d1ca", "filename": "libgo/go/time/time.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Ftime.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Ftime.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Ftime.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -403,7 +403,7 @@ const (\n \tHour                 = 60 * Minute\n )\n \n-// Duration returns a string representing the duration in the form \"72h3m0.5s\".\n+// String returns a string representing the duration in the form \"72h3m0.5s\".\n // Leading zero units are omitted.  As a special case, durations less than one\n // second format use a smaller unit (milli-, micro-, or nanoseconds) to ensure\n // that the leading digit is non-zero.  The zero duration formats as 0,\n@@ -763,7 +763,9 @@ func (t Time) Unix() int64 {\n }\n \n // UnixNano returns t as a Unix time, the number of nanoseconds elapsed\n-// since January 1, 1970 UTC.\n+// since January 1, 1970 UTC. The result is undefined if the Unix time\n+// in nanoseconds cannot be represented by an int64. Note that this\n+// means the result of calling UnixNano on the zero Time is undefined.\n func (t Time) UnixNano() int64 {\n \treturn (t.sec+internalToUnix)*1e9 + int64(t.nsec)\n }"}, {"sha": "c48e0a4300c6f050151e7d80216c6045ea3be0c9", "filename": "libgo/go/time/time_test.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Ftime_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Ftime_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Ftime_test.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -223,7 +223,7 @@ var formatTests = []FormatTest{\n \t{\"ANSIC\", ANSIC, \"Wed Feb  4 21:00:57 2009\"},\n \t{\"UnixDate\", UnixDate, \"Wed Feb  4 21:00:57 PST 2009\"},\n \t{\"RubyDate\", RubyDate, \"Wed Feb 04 21:00:57 -0800 2009\"},\n-\t{\"RFC822\", RFC822, \"04 Feb 09 2100 PST\"},\n+\t{\"RFC822\", RFC822, \"04 Feb 09 21:00 PST\"},\n \t{\"RFC850\", RFC850, \"Wednesday, 04-Feb-09 21:00:57 PST\"},\n \t{\"RFC1123\", RFC1123, \"Wed, 04 Feb 2009 21:00:57 PST\"},\n \t{\"RFC1123Z\", RFC1123Z, \"Wed, 04 Feb 2009 21:00:57 -0800\"},\n@@ -310,6 +310,7 @@ var parseTests = []ParseTest{\n \t{\"RFC1123\", RFC1123, \"Thu, 04 Feb 2010 21:00:57.01234 PST\", true, true, 1, 5},\n \t{\"RFC1123Z\", RFC1123Z, \"Thu, 04 Feb 2010 21:00:57.01234 -0800\", true, true, 1, 5},\n \t{\"RFC3339\", RFC3339, \"2010-02-04T21:00:57.012345678-08:00\", true, false, 1, 9},\n+\t{\"custom: \\\"2006-01-02 15:04:05\\\"\", \"2006-01-02 15:04:05\", \"2010-02-04 21:00:57.0\", false, false, 1, 0},\n \t// Amount of white space should not matter.\n \t{\"ANSIC\", ANSIC, \"Thu Feb 4 21:00:57 2010\", false, true, 1, 0},\n \t{\"ANSIC\", ANSIC, \"Thu      Feb     4     21:00:57     2010\", false, true, 1, 0},"}, {"sha": "d596fab93d649aa9179b54e1841b28685fa665df", "filename": "libgo/go/time/zoneinfo_windows.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Fzoneinfo_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e337e34d69a2e298be8b6c109b601c2986339b/libgo%2Fgo%2Ftime%2Fzoneinfo_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fzoneinfo_windows.go?ref=33e337e34d69a2e298be8b6c109b601c2986339b", "patch": "@@ -83,6 +83,9 @@ func initLocalFromTZI(i *syscall.Timezoneinformation) {\n \t\tl.cacheStart = -1 << 63\n \t\tl.cacheEnd = 1<<63 - 1\n \t\tl.cacheZone = std\n+\t\tl.tx = make([]zoneTrans, 1)\n+\t\tl.tx[0].when = l.cacheStart\n+\t\tl.tx[0].index = 0\n \t\treturn\n \t}\n "}]}