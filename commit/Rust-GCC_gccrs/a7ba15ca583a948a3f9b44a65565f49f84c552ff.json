{"sha": "a7ba15ca583a948a3f9b44a65565f49f84c552ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdiYTE1Y2E1ODNhOTQ4YTNmOWI0NGE2NTU2NWY0OWY4NGM1NTJmZg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-01T14:51:17Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-01T14:51:17Z"}, "message": "Revert recent gensupport change.\n\n2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tRevert\n\t2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gensupport.c (process_substs_on_one_elem): Split loop to\n\tcomplete mark_operands_used_in_match_dup on all expressions in the\n\tvector first.\n\t(adjust_operands_numbers): Inline into process_substs_on_one_elem\n\tand remove function.\n\nFrom-SVN: r233853", "tree": {"sha": "cad87364a453573f8ffdfea88b7274509c48ea6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cad87364a453573f8ffdfea88b7274509c48ea6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7ba15ca583a948a3f9b44a65565f49f84c552ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ba15ca583a948a3f9b44a65565f49f84c552ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ba15ca583a948a3f9b44a65565f49f84c552ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ba15ca583a948a3f9b44a65565f49f84c552ff/comments", "author": null, "committer": null, "parents": [{"sha": "1b19470d144f605f7e69086cfdf2fbf9a4650594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b19470d144f605f7e69086cfdf2fbf9a4650594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b19470d144f605f7e69086cfdf2fbf9a4650594"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "01afae0236d56bb77a3a951b4bc805e43bc65b9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ba15ca583a948a3f9b44a65565f49f84c552ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ba15ca583a948a3f9b44a65565f49f84c552ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7ba15ca583a948a3f9b44a65565f49f84c552ff", "patch": "@@ -1,3 +1,14 @@\n+2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tRevert\n+\t2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gensupport.c (process_substs_on_one_elem): Split loop to\n+\tcomplete mark_operands_used_in_match_dup on all expressions in the\n+\tvector first.\n+\t(adjust_operands_numbers): Inline into process_substs_on_one_elem\n+\tand remove function.\n+\n 2016-03-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70022"}, {"sha": "8c5a1ab86029f44bc00a5b858983c05032013250", "filename": "gcc/gensupport.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ba15ca583a948a3f9b44a65565f49f84c552ff/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ba15ca583a948a3f9b44a65565f49f84c552ff/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=a7ba15ca583a948a3f9b44a65565f49f84c552ff", "patch": "@@ -126,10 +126,7 @@ static const char * duplicate_each_alternative (const char * str, int n_dup);\n \n typedef const char * (*constraints_handler_t) (const char *, int);\n static rtx alter_constraints (rtx, int, constraints_handler_t);\n-\n-static void mark_operands_used_in_match_dup (rtx);\n-static void renumerate_operands_in_pattern (rtx);\n-\n+static rtx adjust_operands_numbers (rtx);\n static rtx replace_duplicating_operands_in_pattern (rtx);\n \f\n /* Make a version of gen_rtx_CONST_INT so that GEN_INT can be used in\n@@ -1847,18 +1844,7 @@ process_substs_on_one_elem (struct queue_elem *elem,\n \t  subst_pattern = alter_constraints (subst_pattern, alternatives,\n \t\t\t\t\t     duplicate_each_alternative);\n \n-\t  mark_operands_used_in_match_dup (subst_pattern);\n-\t  RTVEC_ELT (subst_pattern_vec, j) = subst_pattern;\n-\t}\n-\n-      for (j = 0; j < XVECLEN (subst_elem->data, 3); j++)\n-\t{\n-\t  subst_pattern = RTVEC_ELT (subst_pattern_vec, j);\n-\n-\t  /* The number of MATCH_OPERANDs in the output pattern might\n-\t     change.  This routine assigns new numbers to the\n-\t     MATCH_OPERAND expressions to avoid collisions.  */\n-\t  renumerate_operands_in_pattern (subst_pattern);\n+\t  subst_pattern = adjust_operands_numbers (subst_pattern);\n \n \t  /* Substitute match_dup and match_op_dup in the new pattern and\n \t     duplicate constraints.  */\n@@ -1871,6 +1857,7 @@ process_substs_on_one_elem (struct queue_elem *elem,\n \t  if (GET_CODE (elem->data) == DEFINE_EXPAND)\n \t    remove_constraints (subst_pattern);\n \n+\t  RTVEC_ELT (subst_pattern_vec, j) = subst_pattern;\n \t}\n       XVEC (elem->data, 1) = subst_pattern_vec;\n \n@@ -1940,7 +1927,7 @@ mark_operands_from_match_dup (rtx pattern)\n     }\n }\n \n-/* This is a subroutine of process_substs_on_one_elem.\n+/* This is a subroutine of adjust_operands_numbers.\n    It goes through all expressions in PATTERN and when MATCH_DUP is\n    met, all MATCH_OPERANDs inside it is marked as occupied.  The\n    process of marking is done by routin mark_operands_from_match_dup.  */\n@@ -1986,9 +1973,10 @@ find_first_unused_number_of_operand ()\n   return MAX_OPERANDS;\n }\n \n-/* This is a subroutine of process_substs_on_one_elem.  It visits all\n-   expressions in PATTERN and assigns not-occupied operand indexes to\n-   MATCH_OPERANDs and MATCH_OPERATORs of this PATTERN.  */\n+/* This is subroutine of adjust_operands_numbers.\n+   It visits all expressions in PATTERN and assigns not-occupied\n+   operand indexes to MATCH_OPERANDs and MATCH_OPERATORs of this\n+   PATTERN.  */\n static void\n renumerate_operands_in_pattern (rtx pattern)\n {\n@@ -2023,6 +2011,23 @@ renumerate_operands_in_pattern (rtx pattern)\n     }\n }\n \n+/* If output pattern of define_subst contains MATCH_DUP, then this\n+   expression would be replaced with the pattern, matched with\n+   MATCH_OPERAND from input pattern.  This pattern could contain any\n+   number of MATCH_OPERANDs, MATCH_OPERATORs etc., so it's possible\n+   that a MATCH_OPERAND from output_pattern (if any) would have the\n+   same number, as MATCH_OPERAND from copied pattern.  To avoid such\n+   indexes overlapping, we assign new indexes to MATCH_OPERANDs,\n+   laying in the output pattern outside of MATCH_DUPs.  */\n+static rtx\n+adjust_operands_numbers (rtx pattern)\n+{\n+  mark_operands_used_in_match_dup (pattern);\n+\n+  renumerate_operands_in_pattern (pattern);\n+\n+  return pattern;\n+}\n \n /* Generate RTL expression\n    (match_dup OPNO)"}]}