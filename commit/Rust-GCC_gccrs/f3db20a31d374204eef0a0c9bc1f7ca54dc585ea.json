{"sha": "f3db20a31d374204eef0a0c9bc1f7ca54dc585ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkYjIwYTMxZDM3NDIwNGVlZjBhMGM5YmMxZjdjYTU0ZGM1ODVlYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-09-12T22:23:09Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-09-12T22:23:09Z"}, "message": "Initial revision\n\nFrom-SVN: r40", "tree": {"sha": "3ff0959ff7e425e08d11ce09605a8a8cdbadf06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff0959ff7e425e08d11ce09605a8a8cdbadf06a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea/comments", "author": null, "committer": null, "parents": [{"sha": "8ad117ff197ba8fdd9e12fc01c830d7abdfd434d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad117ff197ba8fdd9e12fc01c830d7abdfd434d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad117ff197ba8fdd9e12fc01c830d7abdfd434d"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "f60f1e522de51254c69fe045724e737f5819ebb1", "filename": "gcc/ginclude/va-sparc.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea/gcc%2Fginclude%2Fva-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3db20a31d374204eef0a0c9bc1f7ca54dc585ea/gcc%2Fginclude%2Fva-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-sparc.h?ref=f3db20a31d374204eef0a0c9bc1f7ca54dc585ea", "patch": "@@ -0,0 +1,42 @@\n+/* This is just like the default gvarargs.h\n+   except for differences decribed below.  */\n+\n+/* Make this a macro rather than a typedef, so we can undef any other defn.  */\n+#define va_list __va___list\n+/* This has to be a char * to be compatible with Sun.\n+   i.e., we have to pass a `va_list' to vsprintf.  */\n+typedef char * __va___list;\n+\n+/* In GCC version 2, we want an ellipsis at the end of the declaration\n+   of the argument list.  GCC version 1 can't parse it.  */\n+\n+#if __GNUC__ > 1\n+#define __va_ellipsis ...\n+#else\n+#define __va_ellipsis\n+#endif\n+\n+#define va_alist  __builtin_va_alist\n+/* The ... causes current_function_varargs to be set in cc1.  */\n+#define va_dcl    int __builtin_va_alist; __va_ellipsis\n+\n+/* The difference is to store the stack address in both components\n+   instead of in AP itself.  */\n+#define va_start(AP) \t\t\t\t\t\t\\\n+ (__builtin_saveregs (), (AP) = ((char *) &__builtin_va_alist))\n+#define va_end(pvar)\n+\n+#define __va_rounded_size(TYPE)  \\\n+  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n+\n+/* RECORD_TYPE args passed using the C calling convention are\n+   passed by invisible reference.  ??? RECORD_TYPE args passed\n+   in the stack are made to be word-aligned; for an aggregate that is\n+   not word-aligned, we advance the pointer to the first non-reg slot.  */\n+#define va_arg(pvar,TYPE)\t\t\t\t\t\\\n+({ TYPE __va_temp;\t\t\t\t\t\t\\\n+   ((__builtin_classify_type (__va_temp) >= 12)\t\t\t\\\n+    ? ((pvar) += __va_rounded_size (TYPE *),\t\t\t\\\n+       **(TYPE **) (pvar) - __va_rounded_size (TYPE *))\t\t\\\n+    : ((pvar) += __va_rounded_size (TYPE),\t\t\\\n+       *((TYPE *) ((pvar) - __va_rounded_size (TYPE)))));})"}]}