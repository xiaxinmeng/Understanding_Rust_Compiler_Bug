{"sha": "5646ba1294058839e26374745c761bee47629600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY0NmJhMTI5NDA1ODgzOWUyNjM3NDc0NWM3NjFiZWU0NzYyOTYwMA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2007-02-19T07:14:24Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2007-02-19T07:14:24Z"}, "message": "mips.c (mips_prepare_builtin_arg): Add argnum parameter.\n\n2007-02-18  Eric Christopher  <echristo@gmail.com>\n\n        * mips.c (mips_prepare_builtin_arg): Add argnum parameter.\n        Remove use of arglist.\n        (mips_expand_builtin): Remove use of arglist, pass in expr.\n        (mips_expand_builtin_direct): Rewrite handling for arglist removal.\n        (mips_expand_builtin_movtf): Ditto.\n        (mips_expand_builtin_compare): Ditto.\n\nFrom-SVN: r122126", "tree": {"sha": "b34a3608b3a5d6222a920f83247f41c1c9735f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b34a3608b3a5d6222a920f83247f41c1c9735f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5646ba1294058839e26374745c761bee47629600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5646ba1294058839e26374745c761bee47629600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5646ba1294058839e26374745c761bee47629600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5646ba1294058839e26374745c761bee47629600/comments", "author": null, "committer": null, "parents": [{"sha": "312f2e97a42b6b92f27605032215e8a00ef83a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312f2e97a42b6b92f27605032215e8a00ef83a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312f2e97a42b6b92f27605032215e8a00ef83a13"}], "stats": {"total": 182, "additions": 94, "deletions": 88}, "files": [{"sha": "38e0204acb142d4c9818057fac13913bacd50b1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 56, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5646ba1294058839e26374745c761bee47629600/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5646ba1294058839e26374745c761bee47629600/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5646ba1294058839e26374745c761bee47629600", "patch": "@@ -1,3 +1,12 @@\n+2007-02-18  Eric Christopher  <echristo@gmail.com>\n+\n+\t* mips.c (mips_prepare_builtin_arg): Add argnum parameter.\n+\tRemove use of arglist.\n+\t(mips_expand_builtin): Remove use of arglist, pass in expr.\n+\t(mips_expand_builtin_direct): Rewrite handling for arglist removal.\n+\t(mips_expand_builtin_movtf): Ditto.\n+\t(mips_expand_builtin_compare): Ditto.\n+\n 2007-02-19  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tree-sra.c (sra_build_assignment): Replace assertion\n@@ -24,7 +33,7 @@\n \t* gimplify.c (build_stack_save_restore, gimplify_return_expr,\n \tgimplify_decl_expr,  gimplify_self_mod_expr, gimplify_cond_expr,\n \tgimplify_init_ctor_eval_range, gimple_push_cleanup,\n-\tgimplify_omp_for, gimplify_omp_atomic_pipeline, \n+\tgimplify_omp_for, gimplify_omp_atomic_pipeline,\n \tgimplify_omp_atomic_mutex, gimplify_expr, gimplify_one_sizepos,\n \tforce_gimple_operand): Likewise.\n \t* ipa-cp.c (constant_val_insert): Likewise.\n@@ -153,7 +162,7 @@\n \t(DARWIN_MINVERSION_SPEC): New.\n \t* config/rs6000/rs6000.c (darwin_rs6000_override_options): New.\n \t* config/i386/darwin.h (CC1_SPEC): Always pass -mmacosx-version-min\n-\tto cc1*.  \n+\tto cc1*.\n \t(DARWIN_MINVERSION_SPEC): New.\n \t* config/darwin.opt (mmacosx-version-min): Initialize to non-NULL\n \tvalue.\n@@ -172,7 +181,7 @@\n \t(bswaphi_lowpart): Generate rolw insn for HImode byte swaps.\n \t(*bswaphi_lowpart_1): Generate xchgb for Q registers for TARGET_XCHGB\n \tor when optimizing for size.\n-\t\n+\n 2007-02-16  Richard Guenther  <rguenther@suse.de>\n \t    Christian Bruel  <christian.bruel@st.com>\n \n@@ -704,7 +713,7 @@\n \t(expand_call): Likewise.\n \n \t* except.c (expand_builtin_eh_return_data_regno): Pass entire\n-\tCALL_EXPR as parameter instead of arglist.  Use new CALL_EXPR \n+\tCALL_EXPR as parameter instead of arglist.  Use new CALL_EXPR\n         accessors.\n \n \t* coverage.c (create_coverage): Use build_call_expr.\n@@ -743,7 +752,7 @@\n \n \t* tree-nested.c (convert_nl_goto_reference): Use new CALL_EXPR\n \taccessors and constructor.\n-\t(convert_tramp_reference): Likewise. \n+\t(convert_tramp_reference): Likewise.\n \t(convert_call_expr): Likewise.\n \t(finalize_nesting_tree_1): Likewise.\n \n@@ -945,7 +954,7 @@\n 2007-02-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* caller-save.c (save_call_clobbered_regs): Do not process sibcalls.\n-\t\n+\n 2007-02-15  Nick Clifton  <nickc@redhat.com>\n \n \t* varasm.c (default_asm_output_anchor): Prepend * to . symbol in\n@@ -1186,7 +1195,7 @@\n 2007-02-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* alias.c (find_symbolic_term): Delete unused function.\n-\t\n+\n 2007-02-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (paritydi2, paritysi2): New expanders.\n@@ -1292,7 +1301,7 @@\n \t(c_finish_stmt_expr): Don't check extra_warnings.\n \t(emit_side_effect_warnings): The caller is responsible to check\n \twarn_unused_value.\n-\t\n+\n 2007-02-11  Roger Sayle  <roger@eyesopen.com>\n \t    Matt Thomas  <matt@3am-software.com>\n \n@@ -1307,11 +1316,11 @@\n 2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* doc/invoke.texi (Wextra): Delete outdated paragraph.\n-\t\n+\n 2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* dwarf2out.c (root_type): Delete unused function.\n-\t\n+\n 2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* genattrtab.c (contained_in_p): Delete unused function.\n@@ -1456,7 +1465,7 @@\n \t(struct state): Delete unused longest_path_length.\n \t(UNDEFINED_LONGEST_PATH_LENGTH): Delete unused macro.\n \t(get_free_state): Delete unused.\n-\t\n+\n 2007-02-09  Jan Hubicka  <jh@suse.cz>\n \n \t* params.def (PARAM_INLINE_UNIT_GROWTH): Set to 30.\n@@ -1733,7 +1742,7 @@\n \t(extendsfdf2_mixed, extendsfdf2_sse, truncdfsf_fast_mixed,\n \ttruncdfsf_fast_sse, truncdfsf_mixed, fix_truncdfdi_sse,\n \tfix_truncdfsi_sse, floatsidf2_mixed, floatsidf2_sse,\n-\tfloatdidf2_mixed, floatdidf2_sse, absnegdf2_mixed, \n+\tfloatdidf2_mixed, floatdidf2_sse, absnegdf2_mixed,\n \tabsnegdf2_sse, sse_setccdf, fop_df_comm_mixed, fop_df_comm_sse,\n \tfop_df_1_mixed, fop_df_1_sse): Change Y constraints to x.\n \t* config/i386/mmx.md (mov<MMXMODEI>_internal_rex64,\n@@ -1826,7 +1835,7 @@\n \t(create_nesting_tree): Create outside GGC space.  Create bitmap on\n \tthe new obstack.  Create field_map and var_map as pointer_maps.\n \t(free_nesting_tree): Adjust for changes to create_nesting_tree.\n-\t(root): Delete.\t\n+\t(root): Delete.\n \t(lower_nested_functions): Move root here, no need to NULL it.\n \tInitialize and release the obstack.\n \n@@ -1850,15 +1859,15 @@\n \t(vect_is_simple_reduction): Support reduction with induction as\n \tone of the operands.\n \t(vect_is_simple_iv_evolution): Fix formatting.\n-\t* tree-vect-analyze.c (vect_mark_stmts_to_be_vectorized): Fix \n+\t* tree-vect-analyze.c (vect_mark_stmts_to_be_vectorized): Fix\n \tformatting.  Don't mark induction phis for vectorization.\n \t(vect_analyze_scalar_cycles): Analyze all inductions, then reductions.\n \t* tree-vect-transform.c (get_initial_def_for_induction): New function.\n \t(vect_get_vec_def_for_operand): Support induction.\n \t(vect_get_vec_def_for_stmt_copy): Fix formatting and add check for\n \tinduction case.\n-\t(vectorizable_reduction): Support reduction with induction as one of \n-\tthe operands. \n+\t(vectorizable_reduction): Support reduction with induction as one of\n+\tthe operands.\n \t(vectorizable_type_demotion): Use def-type of stmt argument rather\n \tthan dummy def-type.\n \n@@ -1871,7 +1880,7 @@\n \n 2007-02-06  Ira Rosen  <irar@il.ibm.com>\n \n-\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Check that \n+\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Check that\n \tvectype is not NULL.\n \t(vect_pattern_recog_1): Likewise.\n \n@@ -1920,7 +1929,7 @@\n \tsqrtsf2_i387, sqrtdf2_mixed, sqrtdf2_sse, sqrtdf2_i387,\n \tsqrtextendsfdf2_i387, sqrtxf2, sqrtextendsfxf2_i387,\n \tsqrtextenddfxf2_i387): Added amdfam10_decode.\n-\t\n+\n \t* config/i386/athlon.md (athlon_idirect_amdfam10,\n \tathlon_ivector_amdfam10, athlon_idirect_load_amdfam10,\n \tathlon_ivector_load_amdfam10, athlon_idirect_both_amdfam10,\n@@ -1969,7 +1978,7 @@\n \tcvtsi2sd_load_amdfam10, cvtsi2ss_load_amdfam10,\n \tcvtsi2sd_amdfam10, cvtsi2ss_amdfam10, cvtsd2ss_load_amdfam10,\n \tcvtsd2ss_amdfam10, cvtpd2ps_load_amdfam10, cvtpd2ps_amdfam10,\n-\tcvtsX2si_load_amdfam10, cvtsX2si_amdfam10): New \n+\tcvtsX2si_load_amdfam10, cvtsX2si_amdfam10): New\n \tdefine_insn_reservation.\n \n \t* config/i386/sse.md (cvtsi2ss, cvtsi2ssq, cvtss2si,\n@@ -1990,8 +1999,8 @@\n \n \t* config/i386/i386.h (TARGET_SSE_UNALIGNED_MOVE_OPTIMAL): New macro.\n \t(x86_sse_unaligned_move_optimal): New variable.\n-\t\n-\t* config/i386/i386.c (x86_sse_unaligned_move_optimal): Enable for  \n+\n+\t* config/i386/i386.c (x86_sse_unaligned_move_optimal): Enable for\n \tm_AMDFAM10.\n \t(ix86_expand_vector_move_misalign): Add code to generate movupd/movups\n \tfor unaligned vector SSE double/single precision loads for AMDFAM10.\n@@ -2002,39 +2011,39 @@\n \t(TARGET_CPU_CPP_BUILTINS): Add code for amdfam10.\n \tDefine TARGET_CPU_DEFAULT_amdfam10.\n \t(TARGET_CPU_DEFAULT_NAMES): Add amdfam10.\n-\t(processor_type): Add PROCESSOR_AMDFAM10.\t\n-\t\n+\t(processor_type): Add PROCESSOR_AMDFAM10.\n+\n \t* config/i386/i386.md: Add amdfam10 as a new cpu attribute to match\n \tprocessor_type in config/i386/i386.h.\n \tEnable imul peepholes for TARGET_AMDFAM10.\n-\t\n+\n \t* config.gcc: Add support for --with-cpu option for amdfam10.\n-\t\n+\n \t* config/i386/i386.c (amdfam10_cost): New variable.\n \t(m_AMDFAM10): New macro.\n \t(m_ATHLON_K8_AMDFAM10): New macro.\n \t(x86_use_leave, x86_push_memory, x86_movx, x86_unroll_strlen,\n \tx86_cmove, x86_3dnow_a, x86_deep_branch, x86_use_simode_fiop,\n \tx86_promote_QImode, x86_integer_DFmode_moves,\n-\tx86_partial_reg_dependency, x86_memory_mismatch_stall, \n+\tx86_partial_reg_dependency, x86_memory_mismatch_stall,\n \tx86_accumulate_outgoing_args, x86_arch_always_fancy_math_387,\n \tx86_sse_partial_reg_dependency, x86_sse_typeless_stores,\n \tx86_use_ffreep, x86_use_incdec, x86_four_jump_limit,\n \tx86_schedule, x86_use_bt, x86_cmpxchg16b, x86_pad_returns):\n \tEnable/disable for amdfam10.\n \t(override_options): Add amdfam10_cost to processor_target_table.\n-\tSet up PROCESSOR_AMDFAM10 for amdfam10 entry in \n+\tSet up PROCESSOR_AMDFAM10 for amdfam10 entry in\n \tprocessor_alias_table.\n \t(ix86_issue_rate): Add PROCESSOR_AMDFAM10.\n \t(ix86_adjust_cost): Add code for amdfam10.\n \n 2007-02-05  Harsha Jagasia  <harsha.jagasia@amd.com>\n-\t\n+\n \t* config/i386/i386.opt: Add new Advanced Bit Manipulation (-mabm)\n-\tinstruction set feature flag. Add new (-mpopcnt) flag for popcnt \n+\tinstruction set feature flag. Add new (-mpopcnt) flag for popcnt\n \tinstruction. Add new SSE4A (-msse4a) instruction set feature flag.\n \t* config/i386/i386.h: Add builtin definition for SSE4A.\n-\t* config/i386/i386.md: Add support for ABM instructions \n+\t* config/i386/i386.md: Add support for ABM instructions\n \t(popcnt and lzcnt).\n \t* config/i386/sse.md: Add support for SSE4A instructions\n \t(movntss, movntsd, extrq, insertq).\n@@ -2189,7 +2198,7 @@\n \t* ipa-inline.c (try_inline): Improve debug output; work on already\n \tinline edges too.\n \t(cgraph_decide_inlining_incrementally): Indent; improve debug output;\n-\tcall try_inline for already inlined edges too when flattening; \n+\tcall try_inline for already inlined edges too when flattening;\n \tinline also functions that make callee growth but overall unit size\n \treduce.\n \n@@ -2214,7 +2223,7 @@\n \n        * c-opts.c (c_common_post_options): If C++0x mode is enabled, don't\n        warn about C++0x compatibility.\n-\t\n+\n 2007-02-04  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/h8300/h8300.c, config/h8300/h8300.h,\n@@ -2343,7 +2352,7 @@\n \n \tRevert for x86 darwin:\n \t2005-06-19  Uros Bizjak  <uros@kss-loka.si>\n-\t\n+\n \t* config/i386/i386.c (ix86_function_arg_regno_p): Put back the\n \tcode before the following patch under TARGET_MACHO.\n \t(ix86_function_value_regno_p): Likewise.\n@@ -2380,7 +2389,7 @@\n 2007-02-02  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \t* sched-int.h (ds_to_dk, dk_to_ds): Declare functions.\n-\t\n+\n \t(struct _dep): New type.\n \t(dep_t): New typedef.\n \t(DEP_PRO, DEP_CON, DEP_KIND): New access macros.\n@@ -2422,30 +2431,30 @@\n \t(RESOLVED_DEPS): Rename to INSN_RESOLVED_BACK_DEPS.\n \n \t(INSN_COST): Move to haifa-sched.c.  Use insn_cost () instead.\n-\t\n+\n \t(DEP_STATUS): Rename to DEP_LINK_STATUS.  Fix typo in the comment.\n \n \t(add_forw_dep, delete_back_forw_dep, insn_cost): Update declaration and\n \tall callers.\n \t(dep_cost): Declare.\n-\t\n+\n \t* sched-deps.c (CHECK): New macro to (en/dis)able sanity checks.\n \t(ds_to_dk, dk_to_ds): New functions.\n-\t\n+\n \t(init_dep_1): New static function.\n \t(init_dep): New function.\n \t(copy_dep): New static function.\n-\t\n+\n \t(dep_link_consistent_p, attach_dep_link, add_to_deps_list): New static\n \tfunctions.\n \t(detach_dep_link): New static function.\n \t(move_dep_link): New function.\n-\t\n+\n \t(dep_links_consistent_p, dump_dep_links): New static functions.\n \t(debug_dep_links): New debugging function.\n-\t\n+\n \t(deps_obstack, dl_obstack, dn_obstack): New static variables.\n-\t\n+\n \t(alloc_deps_list, init_deps_list): New static functions.\n \t(create_deps_list): New function.\n \t(clear_deps_list): New static function.\n@@ -2462,10 +2471,10 @@\n \t(sched_analyze): Ditto.  Initialize dependencies lists.\n \t(add_forw_dep, compute_forward_dependences): Update to use new\n \tscheduler dependencies lists.\n-\t\n+\n \t(init_dependency_caches): Init deps_obstack.\n \t(free_dependency_caches): Free deps_obstack.\n-\t\n+\n \t(adjust_add_sorted_back_dep, adjust_back_add_forw_dep): Update to use\n \tnew scheduler dependencies lists.\n \t(delete_forw_dep, add_or_update_back_forw_dep): Ditto.\n@@ -2476,22 +2485,22 @@\n \t(is_conditionally_protected, is_prisky, add_branch_dependences): Ditto.\n \t(debug_dependencies): Ditto.\n \t(schedule_region): Update comments.\n-\t\n+\n \t* sched-ebb.c (earliest_block_with_similiar_load): Update to use new\n \tscheduler dependencies lists.\n \t(schedule_ebb): Update comments.\n-\t\n+\n \t* rtl.def (DEPS_LIST): Remove.\n-\t\n+\n \t* lists.c (unused_deps_list): Remove.\n \t(free_list): Update assertions.\n-\t\n+\n \t(alloc_DEPS_LIST, free_DEPS_LIST_list, free_DEPS_LIST_node): Remove.\n \t(remove_free_DEPS_LIST_elem, copy_DEPS_LIST_list): Ditto.\n \n \t* rtl.h (free_DEPS_LIST_list, alloc_DEPS_LIST): Remove declarations.\n \t(remove_free_DEPS_LIST_elem, copy_DEPS_LIST_list): Ditto.\n-\t\n+\n \t* haifa-sched.c (comments): Update.\n \t(insn_cost1): Remove.  Inline the code into insn_cost ().\n \t(insn_cost): Update to use new scheduler dependencies lists.  Move\n@@ -2507,24 +2516,24 @@\n \tfrom resolve_dep () - see PR28071.\n \t(ok_for_early_queue_removal): Update to use new scheduler dependencies\n \tlists.  Update call to targetm.sched.is_costly_dependence hook.\n-\t\n+\n \t(fix_inter_tick, try_ready, fix_tick_ready): Update to use new\n \tscheduler dependencies lists.\n-\t\n+\n \t(resolve_dep): Remove.  Move the logic to schedule_insn ().\n \t(init_h_i_d): Initialize dependencies lists.\n-\t\n+\n \t(process_insn_depend_be_in_spec): Rename to\n \tprocess_insn_forw_deps_be_in_spec.  Update to use new scheduler\n \tdependencies lists.\n \t(add_to_speculative_block, create_check_block_twin, fix_recovery_deps):\n \tUpdate to use new scheduler dependencies lists.\n \t(clear_priorities, calc_priorities, add_jump_dependencies): Ditto.\n-\t\n+\n \t* ddg.c (create_ddg_dependence, create_ddg_dep_no_link): Update to use\n \tnew scheduler dependencies lists.\n \t(build_intra_loop_deps): Ditto.\n-\t\n+\n \t* target.h (struct _dep): Declare to use in\n \tgcc_target.sched.is_costly_dependence.\n \t(struct gcc_target.sched.adjust_cost): Fix typo.\n@@ -2542,9 +2551,9 @@\n \n \t* doc/rtl.texi (LOG_LINKS): Remove part about instruction scheduler.\n \t(REG_DEP_TRUE): Document.\n-\t\n+\n \t* config/ia64/ia64.c (ia64_adjust_cost_2): Rename to ia64_adjust_cost.\n-\tChange signature to correspond to the targetm.sched.adjust_cost hook.  \n+\tChange signature to correspond to the targetm.sched.adjust_cost hook.\n \tUpdate use in TARGET_SCHED_ADJUST_COST_2.\n \t(TARGET_SCHED_ADJUST_COST_2): Rename to TARGET_SCHED_ADJUST_COST.\n \t(ia64_dependencies_evaluation_hook, ia64_dfa_new_cycle): Update to use\n@@ -2553,7 +2562,7 @@\n \n \t* config/mips/mips.c (vr4130_swap_insns_p): Update to use new scheduler\n \tdependencies lists.\n-\t\n+\n \t* config/rs6000/rs6000.c (rs6000_is_costly_dependence): Change\n \tsignature to correspond to the targetm.sched.is_costly_dependence hook.\n \t(is_costly_group): Update to use new scheduler dependencies lists."}, {"sha": "37035aad58fd662b9ec1e6fd537a42574f1c08ad", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5646ba1294058839e26374745c761bee47629600/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5646ba1294058839e26374745c761bee47629600/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5646ba1294058839e26374745c761bee47629600", "patch": "@@ -391,7 +391,7 @@ static int mips_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode mode,\n \t\t\t\t   tree, bool);\n static bool mips_valid_pointer_mode (enum machine_mode);\n static bool mips_vector_mode_supported_p (enum machine_mode);\n-static rtx mips_prepare_builtin_arg (enum insn_code, unsigned int, tree *);\n+static rtx mips_prepare_builtin_arg (enum insn_code, unsigned int, tree, unsigned int);\n static rtx mips_prepare_builtin_target (enum insn_code, unsigned int, rtx);\n static rtx mips_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void mips_init_builtins (void);\n@@ -10279,18 +10279,17 @@ static const struct bdesc_map bdesc_arrays[] =\n   { dsp_bdesc, ARRAY_SIZE (dsp_bdesc), PROCESSOR_MAX }\n };\n \n-/* Take the head of argument list *ARGLIST and convert it into a form\n-   suitable for input operand OP of instruction ICODE.  Return the value\n-   and point *ARGLIST at the next element of the list.  */\n+/* Take the argument ARGNUM of the arglist of EXP and convert it into a form\n+   suitable for input operand OP of instruction ICODE.  Return the value.  */\n \n static rtx\n mips_prepare_builtin_arg (enum insn_code icode,\n-\t\t\t  unsigned int op, tree *arglist)\n+\t\t\t  unsigned int op, tree exp, unsigned int argnum)\n {\n   rtx value;\n   enum machine_mode mode;\n \n-  value = expand_normal (TREE_VALUE (*arglist));\n+  value = expand_normal (CALL_EXPR_ARG (exp, argnum));\n   mode = insn_data[icode].operand[op].mode;\n   if (!insn_data[icode].operand[op].predicate (value, mode))\n     {\n@@ -10303,7 +10302,6 @@ mips_prepare_builtin_arg (enum insn_code icode,\n \t}\n     }\n \n-  *arglist = TREE_CHAIN (*arglist);\n   return value;\n }\n \n@@ -10331,15 +10329,12 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n {\n   enum insn_code icode;\n   enum mips_builtin_type type;\n-  tree fndecl, arglist;\n+  tree fndecl;\n   unsigned int fcode;\n   const struct builtin_description *bdesc;\n   const struct bdesc_map *m;\n \n   fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  /* FIXME: Rewrite this to use the CALL_EXPR directly instead of consing\n-     up an arglist.  */\n-  arglist = CALL_EXPR_ARGS (exp);\n   fcode = DECL_FUNCTION_CODE (fndecl);\n \n   bdesc = NULL;\n@@ -10360,23 +10355,23 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   switch (type)\n     {\n     case MIPS_BUILTIN_DIRECT:\n-      return mips_expand_builtin_direct (icode, target, arglist, true);\n+      return mips_expand_builtin_direct (icode, target, exp, true);\n \n     case MIPS_BUILTIN_DIRECT_NO_TARGET:\n-      return mips_expand_builtin_direct (icode, target, arglist, false);\n+      return mips_expand_builtin_direct (icode, target, exp, false);\n \n     case MIPS_BUILTIN_MOVT:\n     case MIPS_BUILTIN_MOVF:\n       return mips_expand_builtin_movtf (type, icode, bdesc[fcode].cond,\n-\t\t\t\t\ttarget, arglist);\n+\t\t\t\t\ttarget, exp);\n \n     case MIPS_BUILTIN_CMP_ANY:\n     case MIPS_BUILTIN_CMP_ALL:\n     case MIPS_BUILTIN_CMP_UPPER:\n     case MIPS_BUILTIN_CMP_LOWER:\n     case MIPS_BUILTIN_CMP_SINGLE:\n       return mips_expand_builtin_compare (type, icode, bdesc[fcode].cond,\n-\t\t\t\t\t  target, arglist);\n+\t\t\t\t\t  target, exp);\n \n     case MIPS_BUILTIN_BPOSGE32:\n       return mips_expand_builtin_bposge (type, target);\n@@ -10621,16 +10616,17 @@ mips_init_builtins (void)\n }\n \n /* Expand a MIPS_BUILTIN_DIRECT function.  ICODE is the code of the\n-   .md pattern and ARGLIST is the list of function arguments.  TARGET,\n+   .md pattern and CALL is the function expr with arguments.  TARGET,\n    if nonnull, suggests a good place to put the result.\n    HAS_TARGET indicates the function must return something.  */\n \n static rtx\n-mips_expand_builtin_direct (enum insn_code icode, rtx target, tree arglist,\n+mips_expand_builtin_direct (enum insn_code icode, rtx target, tree exp,\n \t\t\t    bool has_target)\n {\n   rtx ops[MAX_RECOG_OPERANDS];\n   int i = 0;\n+  int j = 0;\n \n   if (has_target)\n     {\n@@ -10639,10 +10635,10 @@ mips_expand_builtin_direct (enum insn_code icode, rtx target, tree arglist,\n       i = 1;\n     }\n \n-  /* We need to test if arglist is not zero.  Some instructions have extra\n+  /* We need to test if the arglist is not zero.  Some instructions have extra\n      clobber registers.  */\n-  for (; i < insn_data[icode].n_operands && arglist != 0; i++)\n-    ops[i] = mips_prepare_builtin_arg (icode, i, &arglist);\n+  for (; i < insn_data[icode].n_operands && i <= call_expr_nargs (exp); i++, j++)\n+    ops[i] = mips_prepare_builtin_arg (icode, i, exp, j);\n \n   switch (i)\n     {\n@@ -10665,34 +10661,34 @@ mips_expand_builtin_direct (enum insn_code icode, rtx target, tree arglist,\n }\n \n /* Expand a __builtin_mips_movt_*_ps() or __builtin_mips_movf_*_ps()\n-   function (TYPE says which).  ARGLIST is the list of arguments to the\n+   function (TYPE says which).  EXP is the tree for the function\n    function, ICODE is the instruction that should be used to compare\n    the first two arguments, and COND is the condition it should test.\n    TARGET, if nonnull, suggests a good place to put the result.  */\n \n static rtx\n mips_expand_builtin_movtf (enum mips_builtin_type type,\n \t\t\t   enum insn_code icode, enum mips_fp_condition cond,\n-\t\t\t   rtx target, tree arglist)\n+\t\t\t   rtx target, tree exp)\n {\n   rtx cmp_result, op0, op1;\n \n   cmp_result = mips_prepare_builtin_target (icode, 0, 0);\n-  op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-  op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n+  op0 = mips_prepare_builtin_arg (icode, 1, exp, 0);\n+  op1 = mips_prepare_builtin_arg (icode, 2, exp, 1);\n   emit_insn (GEN_FCN (icode) (cmp_result, op0, op1, GEN_INT (cond)));\n \n   icode = CODE_FOR_mips_cond_move_tf_ps;\n   target = mips_prepare_builtin_target (icode, 0, target);\n   if (type == MIPS_BUILTIN_MOVT)\n     {\n-      op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n-      op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n+      op1 = mips_prepare_builtin_arg (icode, 2, exp, 2);\n+      op0 = mips_prepare_builtin_arg (icode, 1, exp, 3);\n     }\n   else\n     {\n-      op0 = mips_prepare_builtin_arg (icode, 1, &arglist);\n-      op1 = mips_prepare_builtin_arg (icode, 2, &arglist);\n+      op0 = mips_prepare_builtin_arg (icode, 1, exp, 2);\n+      op1 = mips_prepare_builtin_arg (icode, 2, exp, 3);\n     }\n   emit_insn (gen_mips_cond_move_tf_ps (target, op0, op1, cmp_result));\n   return target;\n@@ -10728,24 +10724,25 @@ mips_builtin_branch_and_move (rtx condition, rtx target,\n \n /* Expand a comparison builtin of type BUILTIN_TYPE.  ICODE is the code\n    of the comparison instruction and COND is the condition it should test.\n-   ARGLIST is the list of function arguments and TARGET, if nonnull,\n+   EXP is the function call and arguments and TARGET, if nonnull,\n    suggests a good place to put the boolean result.  */\n \n static rtx\n mips_expand_builtin_compare (enum mips_builtin_type builtin_type,\n \t\t\t     enum insn_code icode, enum mips_fp_condition cond,\n-\t\t\t     rtx target, tree arglist)\n+\t\t\t     rtx target, tree exp)\n {\n   rtx offset, condition, cmp_result, ops[MAX_RECOG_OPERANDS];\n   int i;\n+  int j = 0;\n \n   if (target == 0 || GET_MODE (target) != SImode)\n     target = gen_reg_rtx (SImode);\n \n   /* Prepare the operands to the comparison.  */\n   cmp_result = mips_prepare_builtin_target (icode, 0, 0);\n-  for (i = 1; i < insn_data[icode].n_operands - 1; i++)\n-    ops[i] = mips_prepare_builtin_arg (icode, i, &arglist);\n+  for (i = 1; i < insn_data[icode].n_operands - 1; i++, j++)\n+    ops[i] = mips_prepare_builtin_arg (icode, i, exp, j);\n \n   switch (insn_data[icode].n_operands)\n     {"}]}