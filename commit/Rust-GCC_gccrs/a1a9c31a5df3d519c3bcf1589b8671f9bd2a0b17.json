{"sha": "a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhOWMzMWE1ZGYzZDUxOWMzYmNmMTU4OWI4NjcxZjliZDJhMGIxNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-13T22:20:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-13T22:20:23Z"}, "message": "compiler: Accept trailing comma after varargs parameter.\n\nAlso fix handling of interfaces seen only in a function or\nmethod declaration.\n\nFrom-SVN: r194492", "tree": {"sha": "c3bb7695b016ae9f1dc93be9e5f6a113dd98edba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3bb7695b016ae9f1dc93be9e5f6a113dd98edba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/comments", "author": null, "committer": null, "parents": [{"sha": "80928237a94f7bc5e717e9374880fdd05525ef27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80928237a94f7bc5e717e9374880fdd05525ef27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80928237a94f7bc5e717e9374880fdd05525ef27"}], "stats": {"total": 109, "additions": 88, "deletions": 21}, "files": [{"sha": "41f9665e7240e1fb4eff700bcca5a7d5982ef985", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "patch": "@@ -1764,6 +1764,26 @@ Finalize_methods::type(Type* t)\n \t      }\n \t  }\n \n+\t// Finalize the types of all methods that are declared but not\n+\t// defined, since we won't see the declarations otherwise.\n+\tif (nt->named_object()->package() == NULL\n+\t    && nt->local_methods() != NULL)\n+\t  {\n+\t    const Bindings* methods = nt->local_methods();\n+\t    for (Bindings::const_declarations_iterator p =\n+\t\t   methods->begin_declarations();\n+\t\t p != methods->end_declarations();\n+\t\t p++)\n+\t      {\n+\t\tif (p->second->is_function_declaration())\n+\t\t  {\n+\t\t    Type* mt = p->second->func_declaration_value()->type();\n+\t\t    if (Type::traverse(mt, this) == TRAVERSE_EXIT)\n+\t\t      return TRAVERSE_EXIT;\n+\t\t  }\n+\t      }\n+\t  }\n+\n \treturn TRAVERSE_SKIP_COMPONENTS;\n       }\n \n@@ -4491,7 +4511,7 @@ Type_declaration::has_methods() const\n void\n Type_declaration::define_methods(Named_type* nt)\n {\n-  for (Methods::const_iterator p = this->methods_.begin();\n+  for (std::vector<Named_object*>::const_iterator p = this->methods_.begin();\n        p != this->methods_.end();\n        ++p)\n     nt->add_existing_method(*p);\n@@ -5230,8 +5250,7 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n     }\n \n   // If we need to traverse types, check the function declarations,\n-  // which have types.  We don't need to check the type declarations,\n-  // as those are just names.\n+  // which have types.  Also check any methods of a type declaration.\n   if ((traverse_mask & e_or_t) != 0)\n     {\n       for (Bindings::const_declarations_iterator p =\n@@ -5246,6 +5265,27 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n \t\t  == TRAVERSE_EXIT)\n \t\treturn TRAVERSE_EXIT;\n \t    }\n+\t  else if (p->second->is_type_declaration())\n+\t    {\n+\t      const std::vector<Named_object*>* methods =\n+\t\tp->second->type_declaration_value()->methods();\n+\t      for (std::vector<Named_object*>::const_iterator pm =\n+\t\t     methods->begin();\n+\t\t   pm != methods->end();\n+\t\t   pm++)\n+\t\t{\n+\t\t  Named_object* no = *pm;\n+\t\t  Type *t;\n+\t\t  if (no->is_function())\n+\t\t    t = no->func_value()->type();\n+\t\t  else if (no->is_function_declaration())\n+\t\t    t = no->func_declaration_value()->type();\n+\t\t  else\n+\t\t    continue;\n+\t\t  if (Type::traverse(t, traverse) == TRAVERSE_EXIT)\n+\t\t    return TRAVERSE_EXIT;\n+\t\t}\n+\t    }\n \t}\n     }\n "}, {"sha": "cffdd2191186c6e66aec75fb9fee85325737e760", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "patch": "@@ -37,8 +37,6 @@ class Channel_type;\n class Interface_type;\n class Named_type;\n class Forward_declaration_type;\n-class Method;\n-class Methods;\n class Named_object;\n class Label;\n class Translate_context;\n@@ -1738,6 +1736,11 @@ class Type_declaration\n   bool\n   has_methods() const;\n \n+  // Return the methods.\n+  const std::vector<Named_object*>*\n+  methods() const\n+  { return &this->methods_; }\n+\n   // Define methods when the real type is known.\n   void\n   define_methods(Named_type*);\n@@ -1748,8 +1751,6 @@ class Type_declaration\n   using_type();\n \n  private:\n-  typedef std::vector<Named_object*> Methods;\n-\n   // The location of the type declaration.\n   Location location_;\n   // If this type is declared in a function, a pointer back to the\n@@ -1758,7 +1759,7 @@ class Type_declaration\n   // The index of this type in IN_FUNCTION_.\n   unsigned int in_function_index_;\n   // Methods defined before the type is defined.\n-  Methods methods_;\n+  std::vector<Named_object*> methods_;\n   // True if we have issued a warning about a use of this type\n   // declaration when it is undefined.\n   bool issued_warning_;"}, {"sha": "d7a18d023be8d8379b854f8bfbe832cfa97be84b", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "patch": "@@ -975,13 +975,13 @@ Parse::parameter_list(bool* is_varargs)\n   this->parameter_decl(parameters_have_names, ret, is_varargs, &mix_error);\n   while (this->peek_token()->is_op(OPERATOR_COMMA))\n     {\n+      if (this->advance_token()->is_op(OPERATOR_RPAREN))\n+\tbreak;\n       if (is_varargs != NULL && *is_varargs)\n \t{\n \t  error_at(this->location(), \"%<...%> must be last parameter\");\n \t  saw_error = true;\n \t}\n-      if (this->advance_token()->is_op(OPERATOR_RPAREN))\n-\tbreak;\n       this->parameter_decl(parameters_have_names, ret, is_varargs, &mix_error);\n     }\n   if (mix_error)"}, {"sha": "44d6a61f8e67cbf2d222ed01d9a85d5dfac21f04", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "patch": "@@ -6500,6 +6500,24 @@ Type::make_channel_type(bool send, bool receive, Type* element_type)\n \n // Class Interface_type.\n \n+// Return the list of methods.\n+\n+const Typed_identifier_list*\n+Interface_type::methods() const\n+{\n+  go_assert(this->methods_are_finalized_ || saw_errors());\n+  return this->all_methods_;\n+}\n+\n+// Return the number of methods.\n+\n+size_t\n+Interface_type::method_count() const\n+{\n+  go_assert(this->methods_are_finalized_ || saw_errors());\n+  return this->all_methods_ == NULL ? 0 : this->all_methods_->size();\n+}\n+\n // Traversal.\n \n int\n@@ -9630,6 +9648,19 @@ Forward_declaration_type::do_traverse(Traverse* traverse)\n   return TRAVERSE_CONTINUE;\n }\n \n+// Verify the type.\n+\n+bool\n+Forward_declaration_type::do_verify()\n+{\n+  if (!this->is_defined() && !this->is_nil_constant_as_type())\n+    {\n+      this->warn();\n+      return false;\n+    }\n+  return true;\n+}\n+\n // Get the backend representation for the type.\n \n Btype*"}, {"sha": "ba918c9602396add9052d4d7f0873444ddfff1a8", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "patch": "@@ -2534,19 +2534,11 @@ class Interface_type : public Type\n   // Return the list of methods.  This will return NULL for an empty\n   // interface.\n   const Typed_identifier_list*\n-  methods() const\n-  {\n-    go_assert(this->methods_are_finalized_);\n-    return this->all_methods_;\n-  }\n+  methods() const;\n \n   // Return the number of methods.\n   size_t\n-  method_count() const\n-  {\n-    go_assert(this->methods_are_finalized_);\n-    return this->all_methods_ == NULL ? 0 : this->all_methods_->size();\n-  }\n+  method_count() const;\n \n   // Return the method NAME, or NULL.\n   const Typed_identifier*\n@@ -3023,6 +3015,9 @@ class Forward_declaration_type : public Type\n   int\n   do_traverse(Traverse* traverse);\n \n+  bool\n+  do_verify();\n+\n   bool\n   do_has_pointer() const\n   { return this->real_type()->has_pointer(); }"}, {"sha": "f2dd54556bfa8f2bd6b90d681930fc41e5968b65", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug228.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go?ref=a1a9c31a5df3d519c3bcf1589b8671f9bd2a0b17", "patch": "@@ -8,7 +8,7 @@ package main\n \n func f(x int, y ...int)\t// ok\n \n-func g(x int, y float) (...)\t// ERROR \"[.][.][.]\" \"final argument\"\n+func g(x int, y float32) (...)\t// ERROR \"[.][.][.]\" \"final argument\"\n \n func h(x, y ...int)\t\t// ERROR \"[.][.][.]\"\n "}]}