{"sha": "a5f805df5860bd185c77261deaa48049485bfa4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmODA1ZGY1ODYwYmQxODVjNzcyNjFkZWFhNDgwNDk0ODViZmE0ZQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-03-27T12:52:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-03-27T12:52:52Z"}, "message": "re PR c++/35652 (offset warning should be given in the front-end)\n\ngcc/\n\n2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/35652\n\t* builtins.h (c_strlen): Do not warn here.\n\t* c-typeck.c (build_binary_op): Adjust calls to pointer_int_sum.\n\t* c-common.c (pointer_int_sum): Take an explicit location.\n\tWarn about offsets out of bounds.\n\t* c-common.h (pointer_int_sum): Adjust declaration.\n\ngcc/cp/\n\n2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/35652\n\t* typeck.c (cp_pointer_sum): Adjust call to pointer_int_sum.\n\ngcc/testsuite/\n\n2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/35652\n\t* gcc.dg/pr35652.C: New.\n\t* g++.dg/warn/pr35652.C: New.\n\t* gcc.dg/format/plus-1.c: Adjust message.\n\nFrom-SVN: r145102", "tree": {"sha": "a838c5940ee7e4cdb7c09c0bf3ae71d1c2c5d538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a838c5940ee7e4cdb7c09c0bf3ae71d1c2c5d538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5f805df5860bd185c77261deaa48049485bfa4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f805df5860bd185c77261deaa48049485bfa4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f805df5860bd185c77261deaa48049485bfa4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f805df5860bd185c77261deaa48049485bfa4e/comments", "author": null, "committer": null, "parents": [{"sha": "9fd1d8548908e5089281e45770e5c5533fd94424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd1d8548908e5089281e45770e5c5533fd94424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd1d8548908e5089281e45770e5c5533fd94424"}], "stats": {"total": 130, "additions": 110, "deletions": 20}, "files": [{"sha": "fbb0ae5bdf66c13bfeab6c8cbccf0025c0af7684", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -1,7 +1,16 @@\n+2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/35652\n+\t* builtins.h (c_strlen): Do not warn here.\n+\t* c-typeck.c (build_binary_op): Adjust calls to pointer_int_sum.\n+\t* c-common.c (pointer_int_sum): Take an explicit location.\n+\tWarn about offsets out of bounds.\n+\t* c-common.h (pointer_int_sum): Adjust declaration.\n+\n 2009-03-26  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n-        * doc/invoke.texi (i386 and x86-64 Windows Options): Fix texinfo\n-        markup glitch.\n+\t* doc/invoke.texi (i386 and x86-64 Windows Options): Fix texinfo\n+\tmarkup glitch.\n \n 2009-03-26  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "929ea9069cb971f7881171c9986b66650a664b6e", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -469,16 +469,13 @@ c_strlen (tree src, int only_value)\n   else\n     offset = tree_low_cst (offset_node, 0);\n \n-  /* If the offset is known to be out of bounds, warn, and call strlen at\n-     runtime.  */\n+  /* If the offset is known to be out of bounds, the front-end should\n+     have warned already. We call strlen at runtime.  \n+\n+     ??? Perhaps we should turn this into an assert and force\n+     front-ends to define offsets whtin boundaries.  */\n   if (offset < 0 || offset > max)\n     {\n-     /* Suppress multiple warnings for propagated constant strings.  */\n-      if (! TREE_NO_WARNING (src))\n-        {\n-          warning (0, \"offset outside bounds of constant string\");\n-          TREE_NO_WARNING (src) = 1;\n-        }\n       return NULL_TREE;\n     }\n "}, {"sha": "317c1d7db6386738d35c668e6bca56d3d078b7c7", "filename": "gcc/c-common.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -3211,7 +3211,8 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n    of pointer PTROP and integer INTOP.  */\n \n tree\n-pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n+pointer_int_sum (location_t location, enum tree_code resultcode,\n+\t\t tree ptrop, tree intop)\n {\n   tree size_exp, ret;\n \n@@ -3220,19 +3221,19 @@ pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n \n   if (TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE)\n     {\n-      pedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n+      pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n \t       \"pointer of type %<void *%> used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n   else if (TREE_CODE (TREE_TYPE (result_type)) == FUNCTION_TYPE)\n     {\n-      pedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n+      pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n \t       \"pointer to a function used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n   else if (TREE_CODE (TREE_TYPE (result_type)) == METHOD_TYPE)\n     {\n-      pedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n+      pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n \t       \"pointer to member function used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n@@ -3295,6 +3296,31 @@ pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n   if (resultcode == MINUS_EXPR)\n     intop = fold_build1 (NEGATE_EXPR, sizetype, intop);\n \n+  if (TREE_CODE (intop) == INTEGER_CST)\n+    {\n+      tree offset_node;\n+      tree string_cst = string_constant (ptrop, &offset_node);\n+\n+      if (string_cst != 0 \n+\t  && !(offset_node && TREE_CODE (offset_node) != INTEGER_CST))\n+\t{\n+\t  HOST_WIDE_INT max = TREE_STRING_LENGTH (string_cst);\n+\t  HOST_WIDE_INT offset;\n+\t  if (offset_node == 0)\n+\t    offset = 0;\n+\t  else if (! host_integerp (offset_node, 0))\n+\t    offset = -1;\n+\t  else\n+\t    offset = tree_low_cst (offset_node, 0);\n+\n+\t  offset = offset + tree_low_cst (intop, 0);\n+\t  if (offset < 0 || offset > max)\n+\t    warning_at (location, 0,\n+\t\t\t\"offset %<%ld%> outside bounds of constant string\",\n+\t\t\ttree_low_cst (intop, 0));\n+\t}\n+    }\n+\n   ret = fold_build2 (POINTER_PLUS_EXPR, result_type, ptrop, intop);\n \n   fold_undefer_and_ignore_overflow_warnings ();"}, {"sha": "6ba33c6aedc599dcd09da998a2e643018805252d", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -746,7 +746,7 @@ extern tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwis\n    and, if so, perhaps change them both back to their original type.  */\n extern tree shorten_compare (tree *, tree *, tree *, enum tree_code *);\n \n-extern tree pointer_int_sum (enum tree_code, tree, tree);\n+extern tree pointer_int_sum (location_t, enum tree_code, tree, tree);\n \n /* Add qualifiers to a type, in the fashion for C.  */\n extern tree c_build_qualified_type (tree, int);"}, {"sha": "83188baf22f6c754769ea7d7affd4f80d7375e62", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -8107,12 +8107,12 @@ build_binary_op (location_t location, enum tree_code code,\n       /* Handle the pointer + int case.  */\n       if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  ret = pointer_int_sum (PLUS_EXPR, op0, op1);\n+\t  ret = pointer_int_sum (location, PLUS_EXPR, op0, op1);\n \t  goto return_build_binary_op;\n \t}\n       else if (code1 == POINTER_TYPE && code0 == INTEGER_TYPE)\n \t{\n-\t  ret = pointer_int_sum (PLUS_EXPR, op1, op0);\n+\t  ret = pointer_int_sum (location, PLUS_EXPR, op1, op0);\n \t  goto return_build_binary_op;\n \t}\n       else\n@@ -8131,7 +8131,7 @@ build_binary_op (location_t location, enum tree_code code,\n       /* Handle pointer minus int.  Just like pointer plus int.  */\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  ret = pointer_int_sum (MINUS_EXPR, op0, op1);\n+\t  ret = pointer_int_sum (location, MINUS_EXPR, op0, op1);\n \t  goto return_build_binary_op;\n \t}\n       else"}, {"sha": "04977ae5466df40dae52ffb7a63fec3c860e52c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -1,3 +1,8 @@\n+2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/35652\n+\t* typeck.c (cp_pointer_sum): Adjust call to pointer_int_sum.\n+\n 2009-03-26  Andrew Haley  <aph@redhat.com>\n \n \tPR C++/39380"}, {"sha": "3788a7e8b9e4d06a4714ee573621838c077e4ce0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -4031,7 +4031,7 @@ cp_pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n      pointer_int_sum() anyway.  */\n   complete_type (TREE_TYPE (res_type));\n \n-  return pointer_int_sum (resultcode, ptrop,\n+  return pointer_int_sum (input_location, resultcode, ptrop,\n \t\t\t  fold_if_not_in_template (intop));\n }\n "}, {"sha": "ea4b9c34a0c7776ef9af9db6e26bfca473281bfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -1,3 +1,10 @@\n+2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/35652\n+\t* gcc.dg/pr35652.C: New.\n+\t* g++.dg/warn/pr35652.C: New.\n+\t* gcc.dg/format/plus-1.c: Adjust message.\n+\n 2009-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/39554\n@@ -10,7 +17,7 @@\n \n 2009-03-25  Alexander Monakov  <amonakov@ispras.ru>\n \n-        * gcc.target/ia64/20090324-1.c: New test.\n+\t* gcc.target/ia64/20090324-1.c: New test.\n \n 2009-03-25  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "7ce9431eb2be11580a4c04e89b8f0f130c2ceaaa", "filename": "gcc/testsuite/g++.dg/warn/pr35652.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35652.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35652.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35652.C?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/35652: wrong location and duplicated warning.\n+// { dg-do compile }\n+// { dg-options \"-fshow-column\" }\n+#include <string>\n+int foo() {\n+  // blank line padding, could also be code...\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  std::string s = \"\";\n+  s += 'x' + \"y\";  // { dg-warning \"14:offset '120' outside bounds of constant string\" }\n+  // { dg-bogus \"offset '120' outside bounds of constant string.*offset '120' outside bounds of constant string\" \"duplicated\" { target *-*-* } 17 }\n+}\n+\n+int bar()\n+{\n+  const char *s = 'z' + \"y\"; /* { dg-warning \"25:offset '122' outside bounds of constant string\" } */\n+}\n+\n+int g()\n+{\n+  char str[2];\n+  const char *p = str + sizeof(str);\n+}"}, {"sha": "0d8b62cd3c5fe394145b9f6bdaedf0ca7d093cef", "filename": "gcc/testsuite/gcc.dg/format/plus-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fplus-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fplus-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fplus-1.c?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -15,6 +15,9 @@ foo (int i)\n   printf (3 + \"%d\\n\");\t\t/* { dg-warning \"zero-length\" \"zero-length string\" } */\n   printf (\"%d\\n\" + i, i);\t/* { dg-warning \"not a string\" \"non-constant addend\" } */\n   printf (\"%d\\n\" + 10);\t\t/* { dg-warning \"not a string\" \"too large addend\" } */\n+                                /* { dg-warning \"offset '10' outside bounds of constant string\" \"offset\" { target *-*-* } 17 } */\n   printf (\"%d\\n\" - 1, i);\t/* { dg-warning \"not a string\" \"minus constant\" } */\n+                                /* { dg-warning \"offset '-1' outside bounds of constant string\" \"offset\" { target *-*-* } 19 } */\n   printf (\"%d\\n\" + -1, i);\t/* { dg-warning \"not a string\" \"negative addend\" } */\n+                                /* { dg-warning \"offset '-1' outside bounds of constant string\" \"offset\" { target *-*-* } 21 } */\n }"}, {"sha": "50ec3acf10a6532b7029f1f8fc9fcd324febbe4c", "filename": "gcc/testsuite/gcc.dg/pr35652.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35652.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f805df5860bd185c77261deaa48049485bfa4e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35652.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35652.c?ref=a5f805df5860bd185c77261deaa48049485bfa4e", "patch": "@@ -0,0 +1,13 @@\n+/* PR c++/35652: wrong location and duplicated warning.\n+ { dg-do compile }\n+ { dg-options \"\" } */\n+int bar()\n+{\n+  const char *s = 'z' + \"y\"; /* { dg-warning \"offset '122' outside bounds of constant string\" } */\n+}\n+\n+int g()\n+{\n+  char str[2];\n+  const char *p = str + sizeof(str);\n+}"}]}