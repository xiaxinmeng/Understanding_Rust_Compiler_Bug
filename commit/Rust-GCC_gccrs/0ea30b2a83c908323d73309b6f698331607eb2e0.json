{"sha": "0ea30b2a83c908323d73309b6f698331607eb2e0", "node_id": "C_kwDOANBUbNoAKDBlYTMwYjJhODNjOTA4MzIzZDczMzA5YjZmNjk4MzMxNjA3ZWIyZTA", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:34:41Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:23Z"}, "message": "arm: improve tests for vcmlaq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f32.c: Likewise.", "tree": {"sha": "5d2565c7e3cb0a04970e445b3c6734286132a6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2565c7e3cb0a04970e445b3c6734286132a6c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea30b2a83c908323d73309b6f698331607eb2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea30b2a83c908323d73309b6f698331607eb2e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea30b2a83c908323d73309b6f698331607eb2e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea30b2a83c908323d73309b6f698331607eb2e0/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6764c13b14b036e70da28b0245c1299aecc061a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6764c13b14b036e70da28b0245c1299aecc061a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6764c13b14b036e70da28b0245c1299aecc061a9"}], "stats": {"total": 464, "additions": 416, "deletions": 48}, "files": [{"sha": "bb8a99790a070f99e9c3be67e92fb2e2251d7409", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_f16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq_f16 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "71ec4b8479cde416c4ae71e917fba2d2b4281666", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_f32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq_f32 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3db345d0791afb54d5a6ad9a6c8f329dc5e8704d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_m_f16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_m_f16 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "dcbd2dccce5560a0d1c01d154f88b3e290a8fb43", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_m_f32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_m_f32 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #0(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f76ae2383a258e8f662bfd25bfc245051ad9fede", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq_rot180_f16 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq_rot180 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c97d0d0d852c00f3984f70e655dd90a437afda51", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq_rot180_f32 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq_rot180 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "132cdf9954fa849a40f689d61902c1fe27a12307", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot180_m_f16 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot180_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "99e96ebe3a9e2d8953caae6be0f77736e8cbcacd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot180_m_f32 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #180(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot180_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fae85105feb35d04554a708099dc057c20af948e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq_rot270_f16 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq_rot270 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "54a9b662772dc508d07f00a6702117f235116c48", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq_rot270_f32 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq_rot270 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e34f83165c3dad002afcca65f85e27472f11f660", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot270_m_f16 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot270_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cdba91b8e8c142d00baa270beb158114f0ab1fe9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot270_m_f32 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #270(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot270_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f767b2b6e6b631afa47035c90d7945bec5bfab27", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq_rot90_f16 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n {\n   return vcmlaq_rot90 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6c9b24f271db56923da780a8e757714b3505f1de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq_rot90_f32 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmla.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n   return vcmlaq_rot90 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9141c9e6f900ccad64ca35870d9d4aa6840f843a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f16.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot90_m_f16 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f16\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot90_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f317d411806af5473c2bd224e6853226af13d9c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea30b2a83c908323d73309b6f698331607eb2e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f32.c?ref=0ea30b2a83c908323d73309b6f698331607eb2e0", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot90_m_f32 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmlat.f32\tq[0-9]+, q[0-9]+, q[0-9]+, #90(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n {\n   return vcmlaq_rot90_m (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}