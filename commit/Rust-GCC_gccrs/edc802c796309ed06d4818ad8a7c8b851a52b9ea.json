{"sha": "edc802c796309ed06d4818ad8a7c8b851a52b9ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRjODAyYzc5NjMwOWVkMDZkNDgxOGFkOGE3YzhiODUxYTUyYjllYQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-08-06T20:36:16Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-08-06T20:36:16Z"}, "message": "re PR fortran/35831 ([F95] Shape mismatch check missing for dummy procedure argument)\n\n2012-08-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/35831\n\t* interface.c (check_result_characteristics): New function, which checks\n\tthe characteristics of function results.\n\t(gfc_compare_interfaces,gfc_check_typebound_override): Call it.\n\n2012-08-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/35831\n\t* gfortran.dg/dummy_procedure_5.f90: Modified.\n\t* gfortran.dg/dummy_procedure_8.f90: New.\n\t* gfortran.dg/interface_26.f90: Modified.\n\t* gfortran.dg/proc_ptr_11.f90: Modified.\n\t* gfortran.dg/proc_ptr_15.f90: Modified.\n\t* gfortran.dg/proc_ptr_result_5.f90: Modified.\n\t* gfortran.dg/typebound_override_1.f90: Modified.\n\t* gfortran.dg/typebound_proc_6.f03: Modified.\n\nFrom-SVN: r190187", "tree": {"sha": "8658c7628f535030283500ec0a189291df6cb6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8658c7628f535030283500ec0a189291df6cb6af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edc802c796309ed06d4818ad8a7c8b851a52b9ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc802c796309ed06d4818ad8a7c8b851a52b9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc802c796309ed06d4818ad8a7c8b851a52b9ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc802c796309ed06d4818ad8a7c8b851a52b9ea/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef859c9d3c608c89c9192725ee0100ec45a3d708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef859c9d3c608c89c9192725ee0100ec45a3d708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef859c9d3c608c89c9192725ee0100ec45a3d708"}], "stats": {"total": 351, "additions": 281, "deletions": 70}, "files": [{"sha": "278f55a337dc03869106ac9fafbb338002490a63", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -1,3 +1,10 @@\n+2012-08-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/35831\n+\t* interface.c (check_result_characteristics): New function, which checks\n+\tthe characteristics of function results.\n+\t(gfc_compare_interfaces,gfc_check_typebound_override): Call it.\n+\n 2012-08-02  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n \n \t PR fortran/54033"}, {"sha": "473cfd17950066591500a82ab290fd665395cca0", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 158, "deletions": 53, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -1006,9 +1006,8 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n   /* Check type and rank.  */\n   if (type_must_agree && !compare_type_rank (s2, s1))\n     {\n-      if (errmsg != NULL)\n-\tsnprintf (errmsg, err_len, \"Type/rank mismatch in argument '%s'\",\n-\t\t  s1->name);\n+      snprintf (errmsg, err_len, \"Type/rank mismatch in argument '%s'\",\n+\t\ts1->name);\n       return FAILURE;\n     }\n \n@@ -1141,6 +1140,152 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n }\n \n \n+/* Check if the characteristics of two function results match,\n+   cf. F08:12.3.3.  */\n+\n+static gfc_try\n+check_result_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n+\t\t\t      char *errmsg, int err_len)\n+{\n+  gfc_symbol *r1, *r2;\n+\n+  r1 = s1->result ? s1->result : s1;\n+  r2 = s2->result ? s2->result : s2;\n+\n+  if (r1->ts.type == BT_UNKNOWN)\n+    return SUCCESS;\n+\n+  /* Check type and rank.  */\n+  if (!compare_type_rank (r1, r2))\n+    {\n+      snprintf (errmsg, err_len, \"Type/rank mismatch in function result\");\n+      return FAILURE;\n+    }\n+\n+  /* Check ALLOCATABLE attribute.  */\n+  if (r1->attr.allocatable != r2->attr.allocatable)\n+    {\n+      snprintf (errmsg, err_len, \"ALLOCATABLE attribute mismatch in \"\n+\t\t\"function result\");\n+      return FAILURE;\n+    }\n+\n+  /* Check POINTER attribute.  */\n+  if (r1->attr.pointer != r2->attr.pointer)\n+    {\n+      snprintf (errmsg, err_len, \"POINTER attribute mismatch in \"\n+\t\t\"function result\");\n+      return FAILURE;\n+    }\n+\n+  /* Check CONTIGUOUS attribute.  */\n+  if (r1->attr.contiguous != r2->attr.contiguous)\n+    {\n+      snprintf (errmsg, err_len, \"CONTIGUOUS attribute mismatch in \"\n+\t\t\"function result\");\n+      return FAILURE;\n+    }\n+\n+  /* Check PROCEDURE POINTER attribute.  */\n+  if (r1 != s1 && r1->attr.proc_pointer != r2->attr.proc_pointer)\n+    {\n+      snprintf (errmsg, err_len, \"PROCEDURE POINTER mismatch in \"\n+\t\t\"function result\");\n+      return FAILURE;\n+    }\n+\n+  /* Check string length.  */\n+  if (r1->ts.type == BT_CHARACTER && r1->ts.u.cl && r2->ts.u.cl)\n+    {\n+      if (r1->ts.deferred != r2->ts.deferred)\n+\t{\n+\t  snprintf (errmsg, err_len, \"Character length mismatch \"\n+\t\t    \"in function result\");\n+\t  return FAILURE;\n+\t}\n+\n+      if (r1->ts.u.cl->length)\n+\t{\n+\t  int compval = gfc_dep_compare_expr (r1->ts.u.cl->length,\n+\t\t\t\t\t      r2->ts.u.cl->length);\n+\t  switch (compval)\n+\t  {\n+\t    case -1:\n+\t    case  1:\n+\t    case -3:\n+\t      snprintf (errmsg, err_len, \"Character length mismatch \"\n+\t\t\t\"in function result\");\n+\t      return FAILURE;\n+\n+\t    case -2:\n+\t      /* FIXME: Implement a warning for this case.\n+\t      snprintf (errmsg, err_len, \"Possible character length mismatch \"\n+\t\t\t\"in function result\");*/\n+\t      break;\n+\n+\t    case 0:\n+\t      break;\n+\n+\t    default:\n+\t      gfc_internal_error (\"check_result_characteristics (1): Unexpected \"\n+\t\t\t\t  \"result %i of gfc_dep_compare_expr\", compval);\n+\t      break;\n+\t  }\n+\t}\n+    }\n+\n+  /* Check array shape.  */\n+  if (!r1->attr.allocatable && !r1->attr.pointer && r1->as && r2->as)\n+    {\n+      int i, compval;\n+      gfc_expr *shape1, *shape2;\n+\n+      if (r1->as->type != r2->as->type)\n+\t{\n+\t  snprintf (errmsg, err_len, \"Shape mismatch in function result\");\n+\t  return FAILURE;\n+\t}\n+\n+      if (r1->as->type == AS_EXPLICIT)\n+\tfor (i = 0; i < r1->as->rank + r1->as->corank; i++)\n+\t  {\n+\t    shape1 = gfc_subtract (gfc_copy_expr (r1->as->upper[i]),\n+\t\t\t\t   gfc_copy_expr (r1->as->lower[i]));\n+\t    shape2 = gfc_subtract (gfc_copy_expr (r2->as->upper[i]),\n+\t\t\t\t   gfc_copy_expr (r2->as->lower[i]));\n+\t    compval = gfc_dep_compare_expr (shape1, shape2);\n+\t    gfc_free_expr (shape1);\n+\t    gfc_free_expr (shape2);\n+\t    switch (compval)\n+\t    {\n+\t      case -1:\n+\t      case  1:\n+\t      case -3:\n+\t\tsnprintf (errmsg, err_len, \"Shape mismatch in dimension %i of \"\n+\t\t\t  \"function result\", i + 1);\n+\t\treturn FAILURE;\n+\n+\t      case -2:\n+\t\t/* FIXME: Implement a warning for this case.\n+\t\tgfc_warning (\"Possible shape mismatch in return value\");*/\n+\t\tbreak;\n+\n+\t      case 0:\n+\t\tbreak;\n+\n+\t      default:\n+\t\tgfc_internal_error (\"check_result_characteristics (2): \"\n+\t\t\t\t    \"Unexpected result %i of \"\n+\t\t\t\t    \"gfc_dep_compare_expr\", compval);\n+\t\tbreak;\n+\t    }\n+\t  }\n+    }\n+\n+  return SUCCESS;\n+}\n+\n+\n /* 'Compare' two formal interfaces associated with a pair of symbols.\n    We return nonzero if there exists an actual argument list that\n    would be ambiguous between the two interfaces, zero otherwise.\n@@ -1180,18 +1325,10 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n     {\n       if (s1->attr.function && s2->attr.function)\n \t{\n-\t  /* If both are functions, check result type.  */\n-\t  if (s1->ts.type == BT_UNKNOWN)\n-\t    return 1;\n-\t  if (!compare_type_rank (s1,s2))\n-\t    {\n-\t      if (errmsg != NULL)\n-\t\tsnprintf (errmsg, err_len, \"Type/rank mismatch in return value \"\n-\t\t\t  \"of '%s'\", name2);\n-\t      return 0;\n-\t    }\n-\n-\t  /* FIXME: Check array bounds and string length of result.  */\n+\t  /* If both are functions, check result characteristics.  */\n+\t  if (check_result_characteristics (s1, s2, errmsg, err_len)\n+\t      == FAILURE)\n+\t    return 0;\n \t}\n \n       if (s1->attr.pure && !s2->attr.pure)\n@@ -3793,7 +3930,7 @@ gfc_try\n gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n {\n   locus where;\n-  const gfc_symbol *proc_target, *old_target;\n+  gfc_symbol *proc_target, *old_target;\n   unsigned proc_pass_arg, old_pass_arg, argpos;\n   gfc_formal_arglist *proc_formal, *old_formal;\n   bool check_type;\n@@ -3872,45 +4009,13 @@ gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n \t\t     \" FUNCTION\", proc->name, &where);\n \t  return FAILURE;\n \t}\n-\n-      /* FIXME:  Do more comprehensive checking (including, for instance, the\n-\t array-shape).  */\n-      gcc_assert (proc_target->result && old_target->result);\n-      if (!compare_type_rank (proc_target->result, old_target->result))\n-\t{\n-\t  gfc_error (\"'%s' at %L and the overridden FUNCTION should have\"\n-\t\t     \" matching result types and ranks\", proc->name, &where);\n-\t  return FAILURE;\n-\t}\n \t\n-      /* Check string length.  */\n-      if (proc_target->result->ts.type == BT_CHARACTER\n-\t  && proc_target->result->ts.u.cl && old_target->result->ts.u.cl)\n+      if (check_result_characteristics (proc_target, old_target,\n+\t\t\t\t\terr, sizeof(err)) == FAILURE)\n \t{\n-\t  int compval = gfc_dep_compare_expr (proc_target->result->ts.u.cl->length,\n-\t\t\t\t\t      old_target->result->ts.u.cl->length);\n-\t  switch (compval)\n-\t  {\n-\t    case -1:\n-\t    case  1:\n-\t    case -3:\n-\t      gfc_error (\"Character length mismatch between '%s' at '%L' and \"\n-\t\t\t \"overridden FUNCTION\", proc->name, &where);\n-\t      return FAILURE;\n-\n-\t    case -2:\n-\t      gfc_warning (\"Possible character length mismatch between '%s' at\"\n-\t\t\t   \" '%L' and overridden FUNCTION\", proc->name, &where);\n-\t      break;\n-\n-\t    case 0:\n-\t      break;\n-\n-\t    default:\n-\t      gfc_internal_error (\"gfc_check_typebound_override: Unexpected \"\n-\t\t\t\t  \"result %i of gfc_dep_compare_expr\", compval);\n-\t      break;\n-\t  }\n+\t  gfc_error (\"Result mismatch for the overriding procedure \"\n+\t\t     \"'%s' at %L: %s\", proc->name, &where, err);\n+\t  return FAILURE;\n \t}\n     }\n "}, {"sha": "89a6917ce474f4ee4f6a96c123fdfead17bd83eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -1,3 +1,15 @@\n+2012-08-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/35831\n+\t* gfortran.dg/dummy_procedure_5.f90: Modified.\n+\t* gfortran.dg/dummy_procedure_8.f90: New.\n+\t* gfortran.dg/interface_26.f90: Modified.\n+\t* gfortran.dg/proc_ptr_11.f90: Modified.\n+\t* gfortran.dg/proc_ptr_15.f90: Modified.\n+\t* gfortran.dg/proc_ptr_result_5.f90: Modified.\n+\t* gfortran.dg/typebound_override_1.f90: Modified.\n+\t* gfortran.dg/typebound_proc_6.f03: Modified.\n+\n 2012-08-06  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/51938"}, {"sha": "5ab4e7cec8e638f35698f2d90103cb9b5221afc5", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_5.f90?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -15,7 +15,7 @@ program main\n   end type\n \n   type(u), external :: ufunc\n-  call sub(ufunc)            ! { dg-error \"Type/rank mismatch in return value\" }\n+  call sub(ufunc)            ! { dg-error \"Type/rank mismatch in function result\" }\n \n contains\n "}, {"sha": "7b8a2645f76140c33798d22580d54fde86e9b16e", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_8.f90", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_8.f90?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -0,0 +1,88 @@\n+! { dg-do compile }\n+!\n+! PR 35831: [F95] Shape mismatch check missing for dummy procedure argument\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+implicit none\n+\n+call call_a(a1)  ! { dg-error \"Character length mismatch in function result\" }\n+call call_a(a2)  ! { dg-error \"Character length mismatch in function result\" }\n+call call_b(b1)  ! { dg-error \"Shape mismatch\" }\n+call call_c(c1)  ! { dg-error \"POINTER attribute mismatch in function result\" }\n+call call_d(c1)  ! { dg-error \"ALLOCATABLE attribute mismatch in function result\" }\n+call call_e(e1)  ! { dg-error \"CONTIGUOUS attribute mismatch in function result\" }\n+call call_f(c1)  ! { dg-error \"PROCEDURE POINTER mismatch in function result\" }\n+\n+contains\n+\n+  character(1) function a1()\n+  end function\n+\n+  character(:) function a2()\n+  end function\n+\n+  subroutine call_a(a3)\n+    interface\n+      character(2) function a3()\n+      end function\n+    end interface\n+  end subroutine\n+\n+\n+  function b1()\n+    integer, dimension(1:3) :: b1\n+  end function\n+\n+  subroutine call_b(b2)\n+    interface\n+      function b2()\n+        integer, dimension(0:4) :: b2\n+      end function\n+    end interface\n+  end subroutine\n+\n+\n+  integer function c1()\n+  end function\n+\n+  subroutine call_c(c2)\n+    interface\n+      function c2()\n+        integer, pointer :: c2\n+      end function\n+    end interface\n+  end subroutine\n+\n+\n+  subroutine call_d(d2)\n+    interface\n+      function d2()\n+        integer, allocatable :: d2\n+      end function\n+    end interface\n+  end subroutine\n+\n+\n+  function e1()\n+    integer, dimension(:), pointer :: e1\n+  end function\n+\n+  subroutine call_e(e2)\n+    interface\n+      function e2()\n+        integer, dimension(:), pointer, contiguous :: e2\n+      end function\n+    end interface\n+  end subroutine\n+\n+\n+  subroutine call_f(f2)\n+    interface\n+      function f2()\n+        procedure(integer), pointer :: f2\n+      end function\n+    end interface\n+  end subroutine\n+\n+end"}, {"sha": "330c434d2a329b8bbb7a95117b0292d63a474eb4", "filename": "gcc/testsuite/gfortran.dg/interface_26.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -37,7 +37,7 @@ END FUNCTION UserFunction\n     END INTERFACE\n     INTEGER, EXTERNAL :: UserOp \n \n-    res = UserFunction( a,b, UserOp ) ! { dg-error \"Type/rank mismatch in return value\" }\n+    res = UserFunction( a,b, UserOp ) ! { dg-error \"Type/rank mismatch in function result\" }\n \n     if( res .lt. 10 ) then\n        res = recSum( a, res, UserFunction, UserOp ) "}, {"sha": "e00594ab7a40c2875bc9002bcc623d8e82d0e532", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_11.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -40,11 +40,11 @@ end function p3\n   p2 => p1\n   p1 => p2\n \n-  p1 => abs   ! { dg-error \"Type/rank mismatch in return value\" }\n-  p2 => abs   ! { dg-error \"Type/rank mismatch in return value\" }\n+  p1 => abs   ! { dg-error \"Type/rank mismatch in function result\" }\n+  p2 => abs   ! { dg-error \"Type/rank mismatch in function result\" }\n \n   p3 => dsin\n-  p3 => sin   ! { dg-error \"Type/rank mismatch in return value\" }\n+  p3 => sin   ! { dg-error \"Type/rank mismatch in function result\" }\n \n   contains\n "}, {"sha": "f1d3d184c96d8b91dd1ceb724020368eae15dad4", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_15.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -19,10 +19,10 @@\n p6 => p1\n \n ! invalid\n-p1 => iabs   ! { dg-error \"Type/rank mismatch in return value\" }\n-p1 => p2     ! { dg-error \"Type/rank mismatch in return value\" }\n-p1 => p5     ! { dg-error \"Type/rank mismatch in return value\" }\n-p6 => iabs   ! { dg-error \"Type/rank mismatch in return value\" }\n+p1 => iabs   ! { dg-error \"Type/rank mismatch in function result\" }\n+p1 => p2     ! { dg-error \"Type/rank mismatch in function result\" }\n+p1 => p5     ! { dg-error \"Type/rank mismatch in function result\" }\n+p6 => iabs   ! { dg-error \"Type/rank mismatch in function result\" }\n p4 => p2     ! { dg-error \"is not a subroutine\" }\n \n contains"}, {"sha": "b021ca7c76eac334ac92c00ae2a80c41dfd31882", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_5.f90", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -6,7 +6,7 @@\n \n program test\n   procedure(real), pointer :: p\n-  p => f()  ! { dg-error \"Type/rank mismatch in return value\" }\n+  p => f()  ! { dg-error \"Type/rank mismatch in function result\" }\n contains\n  function f()\n    pointer :: f\n@@ -17,4 +17,3 @@ logical(1) function f()\n    f = .true._1\n  end function f\n end program test\n-"}, {"sha": "96f9025634232b1afd90c2a9fab4653f306583b8", "filename": "gcc/testsuite/gfortran.dg/typebound_override_1.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -19,11 +19,11 @@ module m\n \n   type, extends(t1) :: t2\n    contains\n-     procedure, nopass :: a => a2  ! { dg-error \"Character length mismatch\" }\n-     procedure, nopass :: b => b2  ! { dg-error \"should have matching result types and ranks\" }\n-     procedure, nopass :: c => c2  ! { dg-warning \"Possible character length mismatch\" }\n+     procedure, nopass :: a => a2  ! { dg-error \"Character length mismatch in function result\" }\n+     procedure, nopass :: b => b2  ! { dg-error \"Type/rank mismatch in function result\" }\n+     procedure, nopass :: c => c2  ! FIXME: dg-warning \"Possible character length mismatch\" \n      procedure, nopass :: d => d2  ! valid, check for commutativity (+,*)\n-     procedure, nopass :: e => e2  ! { dg-error \"Character length mismatch\" }\n+     procedure, nopass :: e => e2  ! { dg-error \"Character length mismatch in function result\" }\n   end type\n \n contains\n@@ -110,7 +110,7 @@ module w2\n \n  type, extends(tt1) :: tt2\n  contains\n-   procedure, nopass :: aa => aa2  ! { dg-warning \"Possible character length mismatch\" }\n+   procedure, nopass :: aa => aa2  ! FIXME: dg-warning \"Possible character length mismatch\"\n  end type\n \n contains"}, {"sha": "3a32cbc96a22c8a0252dc453e6f2a97154f9e62e", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_6.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc802c796309ed06d4818ad8a7c8b851a52b9ea/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03?ref=edc802c796309ed06d4818ad8a7c8b851a52b9ea", "patch": "@@ -72,7 +72,7 @@ MODULE testmod\n     PROCEDURE, NOPASS :: subroutine2 => proc_intfunc ! { dg-error \"must also be a SUBROUTINE\" }\n     PROCEDURE, NOPASS :: intfunction1 => proc_intfunc ! Ok, matching functions.\n     PROCEDURE, NOPASS :: intfunction2 => proc_sub ! { dg-error \"must also be a FUNCTION\" }\n-    PROCEDURE, NOPASS :: intfunction3 => proc_realfunc ! { dg-error \"matching result types\" }\n+    PROCEDURE, NOPASS :: intfunction3 => proc_realfunc ! { dg-error \"Type/rank mismatch in function result\" }\n \n     ! For access-based checks.\n     PROCEDURE, NOPASS, PUBLIC :: priv => proc_sub ! Ok, increases visibility."}]}