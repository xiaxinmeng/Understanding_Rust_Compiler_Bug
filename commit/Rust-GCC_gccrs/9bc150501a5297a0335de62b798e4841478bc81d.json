{"sha": "9bc150501a5297a0335de62b798e4841478bc81d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjMTUwNTAxYTUyOTdhMDMzNWRlNjJiNzk4ZTQ4NDE0NzhiYzgxZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-08-09T12:05:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-08-09T12:05:09Z"}, "message": "c-common.c (builtin_function_2): Remove.\n\n2005-08-09  Richard Guenther  <rguenther@suse.de>\n\n\t* c-common.c (builtin_function_2): Remove.\n\t(def_builtin_1): New function.\n\t(c_common_nodes_and_builtins): Use def_builtin_1 to\n\tbuild builtin functions.\n\nFrom-SVN: r102911", "tree": {"sha": "19188ff7c43475c3ace353782d3a8dbfcf284a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19188ff7c43475c3ace353782d3a8dbfcf284a7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc150501a5297a0335de62b798e4841478bc81d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc150501a5297a0335de62b798e4841478bc81d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc150501a5297a0335de62b798e4841478bc81d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc150501a5297a0335de62b798e4841478bc81d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07da68fd8d9e08a487b02520764da4243eb223a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07da68fd8d9e08a487b02520764da4243eb223a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07da68fd8d9e08a487b02520764da4243eb223a2"}], "stats": {"total": 115, "additions": 47, "deletions": 68}, "files": [{"sha": "8a271ba1bd3bb22b3c0ec296a8c1ac127d902a7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc150501a5297a0335de62b798e4841478bc81d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc150501a5297a0335de62b798e4841478bc81d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bc150501a5297a0335de62b798e4841478bc81d", "patch": "@@ -1,3 +1,10 @@\n+2005-08-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-common.c (builtin_function_2): Remove.\n+\t(def_builtin_1): New function.\n+\t(c_common_nodes_and_builtins): Use def_builtin_1 to\n+\tbuild builtin functions.\n+\n 2005-08-09  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config/bfin/uclinux.h (NO_IMPLICIT_EXTERN_C): Define."}, {"sha": "0b208fdfbc5e851930a8108244ec58c2e022bf57", "filename": "gcc/c-common.c", "status": "modified", "additions": 40, "deletions": 68, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc150501a5297a0335de62b798e4841478bc81d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc150501a5297a0335de62b798e4841478bc81d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9bc150501a5297a0335de62b798e4841478bc81d", "patch": "@@ -2494,12 +2494,12 @@ c_common_truthvalue_conversion (tree expr)\n   return build_binary_op (NE_EXPR, expr, integer_zero_node, 1);\n }\n \f\n-static tree builtin_function_2 (const char *builtin_name, const char *name,\n-\t\t\t\ttree builtin_type, tree type,\n-\t\t\t\tenum built_in_function function_code,\n-\t\t\t\tenum built_in_class cl, int library_name_p,\n-\t\t\t\tbool nonansi_p,\n-\t\t\t\ttree attrs);\n+static void def_builtin_1  (enum built_in_function fncode,\n+\t\t\t    const char *name,\n+\t\t\t    enum built_in_class fnclass,\n+\t\t\t    tree fntype, tree libtype,\n+\t\t\t    bool both_p, bool fallback_p, bool nonansi_p,\n+\t\t\t    tree fnattrs, bool implicit_p);\n \n /* Make a variant type in the proper way for C/C++, propagating qualifiers\n    down to the element type of an array.  */\n@@ -3317,36 +3317,11 @@ c_common_nodes_and_builtins (void)\n #define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, FALLBACK_P, \\\n \t\t    NONANSI_P, ATTRS, IMPLICIT, COND)\t\t\t\\\n   if (NAME && COND)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      tree decl;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      gcc_assert ((!BOTH_P && !FALLBACK_P)\t\t\t\t\\\n-\t\t  || !strncmp (NAME, \"__builtin_\",\t\t\t\\\n-\t\t\t       strlen (\"__builtin_\")));\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (!BOTH_P)\t\t\t\t\t\t\t\\\n-\tdecl = lang_hooks.builtin_function (NAME, builtin_types[TYPE],\t\\\n-\t\t\t\t ENUM,\t\t\t\t\t\\\n-\t\t\t\t CLASS,\t\t\t\t\t\\\n-\t\t\t\t (FALLBACK_P\t\t\t\t\\\n-\t\t\t\t  ? (NAME + strlen (\"__builtin_\"))\t\\\n-\t\t\t\t  : NULL),\t\t\t\t\\\n-\t\t\t\t built_in_attributes[(int) ATTRS]);\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tdecl = builtin_function_2 (NAME,\t\t\t\t\\\n-\t\t\t\t   NAME + strlen (\"__builtin_\"),\t\\\n-\t\t\t\t   builtin_types[TYPE],\t\t\t\\\n-\t\t\t\t   builtin_types[LIBTYPE],\t\t\\\n-\t\t\t\t   ENUM,\t\t\t\t\\\n-\t\t\t\t   CLASS,\t\t\t\t\\\n-\t\t\t\t   FALLBACK_P,\t\t\t\t\\\n-\t\t\t\t   NONANSI_P,\t\t\t\t\\\n-\t\t\t\t   built_in_attributes[(int) ATTRS]);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      built_in_decls[(int) ENUM] = decl;\t\t\t\t\\\n-      if (IMPLICIT)\t\t\t\t\t\t\t\\\n-\timplicit_built_in_decls[(int) ENUM] = decl;\t\t\t\\\n-    }\n+    def_builtin_1 (ENUM, NAME, CLASS,                                   \\\n+                   builtin_types[(int) TYPE],                           \\\n+                   builtin_types[(int) LIBTYPE],                        \\\n+                   BOTH_P, FALLBACK_P, NONANSI_P,                       \\\n+                   built_in_attributes[(int) ATTRS], IMPLICIT);\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n \n@@ -3436,42 +3411,39 @@ builtin_function_disabled_p (const char *name)\n }\n \n \n-/* Possibly define a builtin function with one or two names.  BUILTIN_NAME\n-   is an __builtin_-prefixed name; NAME is the ordinary name; one or both\n-   of these may be NULL (though both being NULL is useless).\n-   BUILTIN_TYPE is the type of the __builtin_-prefixed function;\n-   TYPE is the type of the function with the ordinary name.  These\n-   may differ if the ordinary name is declared with a looser type to avoid\n-   conflicts with headers.  FUNCTION_CODE and CL are as for\n-   builtin_function.  If LIBRARY_NAME_P is nonzero, NAME is passed as\n-   the LIBRARY_NAME parameter to builtin_function when declaring BUILTIN_NAME.\n-   If NONANSI_P is true, the name NAME is treated as a non-ANSI name;\n-   ATTRS is the tree list representing the builtin's function attributes.\n-   Returns the declaration of BUILTIN_NAME, if any, otherwise\n-   the declaration of NAME.  Does not declare NAME if flag_no_builtin,\n-   or if NONANSI_P and flag_no_nonansi_builtin.  */\n+/* Worker for DEF_BUILTIN.\n+   Possibly define a builtin function with one or two names.\n+   Does not declare a non-__builtin_ function if flag_no_builtin, or if\n+   nonansi_p and flag_no_nonansi_builtin.  */\n \n-static tree\n-builtin_function_2 (const char *builtin_name, const char *name,\n-\t\t    tree builtin_type, tree type,\n-\t\t    enum built_in_function function_code,\n-\t\t    enum built_in_class cl, int library_name_p,\n-\t\t    bool nonansi_p, tree attrs)\n+static void\n+def_builtin_1 (enum built_in_function fncode,\n+\t       const char *name,\n+\t       enum built_in_class fnclass,\n+\t       tree fntype, tree libtype,\n+\t       bool both_p, bool fallback_p, bool nonansi_p,\n+\t       tree fnattrs, bool implicit_p)\n {\n-  tree bdecl = NULL_TREE;\n-  tree decl = NULL_TREE;\n-\n-  if (builtin_name != 0)\n-    bdecl = lang_hooks.builtin_function (builtin_name, builtin_type,\n-\t\t\t\t\t function_code, cl,\n-\t\t\t\t\t library_name_p ? name : NULL, attrs);\n-\n-  if (name != 0 && !flag_no_builtin && !builtin_function_disabled_p (name)\n+  tree decl;\n+  const char *libname;\n+\n+  gcc_assert ((!both_p && !fallback_p)\n+\t      || !strncmp (name, \"__builtin_\",\n+\t\t\t   strlen (\"__builtin_\")));\n+\n+  libname = name + strlen (\"__builtin_\");\n+  decl = lang_hooks.builtin_function (name, fntype, fncode, fnclass,\n+\t\t\t\t      (fallback_p ? libname : NULL),\n+\t\t\t\t      fnattrs);\n+  if (both_p\n+      && !flag_no_builtin && !builtin_function_disabled_p (libname)\n       && !(nonansi_p && flag_no_nonansi_builtin))\n-    decl = lang_hooks.builtin_function (name, type, function_code, cl,\n-\t\t\t\t\tNULL, attrs);\n+    lang_hooks.builtin_function (libname, libtype, fncode, fnclass,\n+\t\t\t\t NULL, fnattrs);\n \n-  return (bdecl != 0 ? bdecl : decl);\n+  built_in_decls[(int) fncode] = decl;\n+  if (implicit_p)\n+    implicit_built_in_decls[(int) fncode] = decl;\n }\n \f\n /* Nonzero if the type T promotes to int.  This is (nearly) the"}]}