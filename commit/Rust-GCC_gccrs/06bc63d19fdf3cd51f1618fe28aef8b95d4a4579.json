{"sha": "06bc63d19fdf3cd51f1618fe28aef8b95d4a4579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiYzYzZDE5ZmRmM2NkNTFmMTYxOGZlMjhhZWY4Yjk1ZDRhNDU3OQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2014-05-22T03:51:09Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2014-05-22T03:51:09Z"}, "message": "Fix sched_insn debug counter\n\n\t* haifa-sched.c (schedule_insn): Update.\n\t(struct haifa_saved_data): Add nonscheduled_insns_begin.\n\t(save_backtrack_point, restore_backtrack_point): Update.\n\t(first_nonscheduled_insn): New static function.\n\t(queue_to_ready, choose_ready): Use it.\n\t(schedule_block): Init nonscheduled_insns_begin.\n\t(sched_emit_insn): Update.\n\nFrom-SVN: r210736", "tree": {"sha": "a5808fd4166fdd84c8ccdb2dd290f08e0e078ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5808fd4166fdd84c8ccdb2dd290f08e0e078ef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06bc63d19fdf3cd51f1618fe28aef8b95d4a4579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc63d19fdf3cd51f1618fe28aef8b95d4a4579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bc63d19fdf3cd51f1618fe28aef8b95d4a4579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc63d19fdf3cd51f1618fe28aef8b95d4a4579/comments", "author": null, "committer": null, "parents": [{"sha": "a4a182c6984236c075965191eaedf7ae7ec4c0b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a182c6984236c075965191eaedf7ae7ec4c0b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a182c6984236c075965191eaedf7ae7ec4c0b4"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "7d5f6b55ac15c2669afa8a311c48f64c1afeda4a", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc63d19fdf3cd51f1618fe28aef8b95d4a4579/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc63d19fdf3cd51f1618fe28aef8b95d4a4579/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=06bc63d19fdf3cd51f1618fe28aef8b95d4a4579", "patch": "@@ -3944,6 +3944,10 @@ schedule_insn (rtx insn)\n       last_clock_var = clock_var;\n     }\n \n+  if (nonscheduled_insns_begin != NULL_RTX)\n+    /* Indicate to debug counters that INSN is scheduled.  */\n+    nonscheduled_insns_begin = insn;\n+\n   return advance;\n }\n \n@@ -4048,6 +4052,7 @@ struct haifa_saved_data\n \n   rtx last_scheduled_insn;\n   rtx last_nondebug_scheduled_insn;\n+  rtx nonscheduled_insns_begin;\n   int cycle_issued_insns;\n \n   /* Copies of state used in the inner loop of schedule_block.  */\n@@ -4120,6 +4125,7 @@ save_backtrack_point (struct delay_pair *pair,\n   save->cycle_issued_insns = cycle_issued_insns;\n   save->last_scheduled_insn = last_scheduled_insn;\n   save->last_nondebug_scheduled_insn = last_nondebug_scheduled_insn;\n+  save->nonscheduled_insns_begin = nonscheduled_insns_begin;\n \n   save->sched_block = sched_block;\n \n@@ -4375,6 +4381,7 @@ restore_last_backtrack_point (struct sched_block_state *psched_block)\n   cycle_issued_insns = save->cycle_issued_insns;\n   last_scheduled_insn = save->last_scheduled_insn;\n   last_nondebug_scheduled_insn = save->last_nondebug_scheduled_insn;\n+  nonscheduled_insns_begin = save->nonscheduled_insns_begin;\n \n   *psched_block = save->sched_block;\n \n@@ -4843,6 +4850,24 @@ undo_all_replacements (void)\n     }\n }\n \n+/* Return first non-scheduled insn in the current scheduling block.\n+   This is mostly used for debug-counter purposes.  */\n+static rtx\n+first_nonscheduled_insn (void)\n+{\n+  rtx insn = (nonscheduled_insns_begin != NULL_RTX\n+\t      ? nonscheduled_insns_begin\n+\t      : current_sched_info->prev_head);\n+\n+  do\n+    {\n+      insn = next_nonnote_nondebug_insn (insn);\n+    }\n+  while (QUEUE_INDEX (insn) == QUEUE_SCHEDULED);\n+\n+  return insn;\n+}\n+\n /* Move insns that became ready to fire from queue to ready list.  */\n \n static void\n@@ -4855,16 +4880,9 @@ queue_to_ready (struct ready_list *ready)\n   q_ptr = NEXT_Q (q_ptr);\n \n   if (dbg_cnt (sched_insn) == false)\n-    {\n-      /* If debug counter is activated do not requeue the first\n-\t nonscheduled insn.  */\n-      skip_insn = nonscheduled_insns_begin;\n-      do\n-\t{\n-\t  skip_insn = next_nonnote_nondebug_insn (skip_insn);\n-\t}\n-      while (QUEUE_INDEX (skip_insn) == QUEUE_SCHEDULED);\n-    }\n+    /* If debug counter is activated do not requeue the first\n+       nonscheduled insn.  */\n+    skip_insn = first_nonscheduled_insn ();\n   else\n     skip_insn = NULL_RTX;\n \n@@ -5491,23 +5509,21 @@ choose_ready (struct ready_list *ready, bool first_cycle_insn_p,\n \n   if (dbg_cnt (sched_insn) == false)\n     {\n-      rtx insn = nonscheduled_insns_begin;\n-      do\n-\t{\n-\t  insn = next_nonnote_insn (insn);\n-\t}\n-      while (QUEUE_INDEX (insn) == QUEUE_SCHEDULED);\n+      if (nonscheduled_insns_begin == NULL_RTX)\n+\tnonscheduled_insns_begin = current_sched_info->prev_head;\n+\n+      rtx insn = first_nonscheduled_insn ();\n \n       if (QUEUE_INDEX (insn) == QUEUE_READY)\n \t/* INSN is in the ready_list.  */\n \t{\n-\t  nonscheduled_insns_begin = insn;\n \t  ready_remove_insn (insn);\n \t  *insn_ptr = insn;\n \t  return 0;\n \t}\n \n       /* INSN is in the queue.  Advance cycle to move it to the ready list.  */\n+      gcc_assert (QUEUE_INDEX (insn) >= 0);\n       return -1;\n     }\n \n@@ -5922,8 +5938,9 @@ schedule_block (basic_block *target_bb, state_t init_state)\n     targetm.sched.init (sched_dump, sched_verbose, ready.veclen);\n \n   /* We start inserting insns after PREV_HEAD.  */\n-  last_scheduled_insn = nonscheduled_insns_begin = prev_head;\n+  last_scheduled_insn = prev_head;\n   last_nondebug_scheduled_insn = NULL_RTX;\n+  nonscheduled_insns_begin = NULL_RTX;\n \n   gcc_assert ((NOTE_P (last_scheduled_insn)\n \t       || DEBUG_INSN_P (last_scheduled_insn))\n@@ -5976,7 +5993,7 @@ schedule_block (basic_block *target_bb, state_t init_state)\n \trtx skip_insn;\n \n \tif (dbg_cnt (sched_insn) == false)\n-\t  skip_insn = next_nonnote_insn (nonscheduled_insns_begin);\n+\t  skip_insn = first_nonscheduled_insn ();\n \telse\n \t  skip_insn = NULL_RTX;\n \n@@ -8532,7 +8549,7 @@ sched_create_empty_bb_1 (basic_block after)\n rtx\n sched_emit_insn (rtx pat)\n {\n-  rtx insn = emit_insn_before (pat, nonscheduled_insns_begin);\n+  rtx insn = emit_insn_before (pat, first_nonscheduled_insn ());\n   haifa_init_insn (insn);\n \n   if (current_sched_info->add_remove_insn)"}]}