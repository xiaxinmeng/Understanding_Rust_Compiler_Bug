{"sha": "f85cc4cbe2c0fb8d30ba85a849b01d201a751eac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg1Y2M0Y2JlMmMwZmI4ZDMwYmE4NWE4NDliMDFkMjAxYTc1MWVhYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-16T17:50:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-16T17:50:49Z"}, "message": "cse.c (new_label_ref): New variable.\n\n\t* cse.c (new_label_ref): New variable.\n\t(insert): Set it instead of recorded_label_ref.\n\t(cse_basic_block): Set recorded_label_ref if new_label_ref use, has\n\tCODE_LABEL for this function, and not already in REG_LABEL note.\n\nFrom-SVN: r39768", "tree": {"sha": "0b19c0ec4e6f1f97a60aaa3fe30067d0fb188301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b19c0ec4e6f1f97a60aaa3fe30067d0fb188301"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac/comments", "author": null, "committer": null, "parents": [{"sha": "f0217d415dc04a7c588e48b393d119b7c933f427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0217d415dc04a7c588e48b393d119b7c933f427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0217d415dc04a7c588e48b393d119b7c933f427"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "1c9ce2d9c992e1382e994f455a60754593e93662", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f85cc4cbe2c0fb8d30ba85a849b01d201a751eac", "patch": "@@ -1,3 +1,10 @@\n+Fri Feb 16 12:41:30 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* cse.c (new_label_ref): New variable.\n+\t(insert): Set it instead of recorded_label_ref.\n+\t(cse_basic_block): Set recorded_label_ref if new_label_ref use, has\n+\tCODE_LABEL for this function, and not already in REG_LABEL note.\n+\n 2001-02-16  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* resource.c (mark_referenced_resources): Fix typo in introductory"}, {"sha": "17a597e104a09515f2196982b061777ebfd056fe", "filename": "gcc/cse.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85cc4cbe2c0fb8d30ba85a849b01d201a751eac/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f85cc4cbe2c0fb8d30ba85a849b01d201a751eac", "patch": "@@ -382,11 +382,14 @@ static int cse_altered;\n \n static int cse_jumps_altered;\n \n-/* Nonzero if we put a LABEL_REF into the hash table.  Since we may have put\n-   it into an INSN without a REG_LABEL, we have to rerun jump after CSE\n-   to put in the note.  */\n+/* Nonzero if we put a LABEL_REF into the hash table for an INSN without a\n+   REG_LABEL, we have to rerun jump after CSE to put in the note.  */\n static int recorded_label_ref;\n \n+/* Says which LABEL_REF was put in the hash table.  Used to see if we need\n+   to set the above flag.  */\n+static rtx new_label_ref;\n+\n /* canon_hash stores 1 in do_not_record\n    if it notices a reference to CC0, PC, or some other volatile\n    subexpression.  */\n@@ -1581,7 +1584,7 @@ insert (x, classp, hash, mode)\n   if (GET_CODE (x) == LABEL_REF\n       || (GET_CODE (x) == CONST && GET_CODE (XEXP (x, 0)) == PLUS\n \t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == LABEL_REF))\n-    recorded_label_ref = 1;\n+    new_label_ref = x;\n \n   /* Put an element for X into the right hash bucket.  */\n \n@@ -7308,7 +7311,17 @@ cse_basic_block (from, to, next_branch, around_loop)\n \t\tlibcall_insn = 0;\n \t    }\n \n+\t  new_label_ref = 0;\n \t  cse_insn (insn, libcall_insn);\n+\n+\t  /* If this insn uses a LABEL_REF and there isn't a REG_LABEL\n+\t     note for it, we must rerun jump since it needs to place the\n+\t     note.  If this is a LABEL_REF for a CODE_LABEL that isn't in\n+\t     the insn chain, don't do this since no REG_LABEL will be added. */\n+\t  if (new_label_ref != 0 && INSN_UID (XEXP (new_label_ref, 0)) != 0\n+\t      && reg_mentioned_p (new_label_ref, PATTERN (insn))\n+\t      && ! find_reg_note (insn, REG_LABEL, XEXP (new_label_ref, 0)))\n+\t    recorded_label_ref = 1;\n \t}\n \n       /* If INSN is now an unconditional jump, skip to the end of our"}]}