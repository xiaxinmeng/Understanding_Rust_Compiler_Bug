{"sha": "4f23aac0fc644f98e5d00504dfb247b2028b3abc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYyM2FhYzBmYzY0NGY5OGU1ZDAwNTA0ZGZiMjQ3YjIwMjhiM2FiYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T23:58:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T23:58:08Z"}, "message": "(iorsi_zexthi_ashl16): New pattern.\n\n(ashrsi_16): New name for old unnamed pattern.\n\nFrom-SVN: r13249", "tree": {"sha": "260c8f17bbaf18b6cc8adb1767fd4851f6829ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/260c8f17bbaf18b6cc8adb1767fd4851f6829ffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f23aac0fc644f98e5d00504dfb247b2028b3abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f23aac0fc644f98e5d00504dfb247b2028b3abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f23aac0fc644f98e5d00504dfb247b2028b3abc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f23aac0fc644f98e5d00504dfb247b2028b3abc/comments", "author": null, "committer": null, "parents": [{"sha": "3cd3e833783b0f93afc3dbd2fe6d20a52e06457f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd3e833783b0f93afc3dbd2fe6d20a52e06457f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd3e833783b0f93afc3dbd2fe6d20a52e06457f"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "01dde67ec4743837da11a15a61ee347452e6c205", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f23aac0fc644f98e5d00504dfb247b2028b3abc/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f23aac0fc644f98e5d00504dfb247b2028b3abc/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=4f23aac0fc644f98e5d00504dfb247b2028b3abc", "patch": "@@ -3629,6 +3629,26 @@\n   \"!TARGET_5200\"\n   \"or%.b %1,%0\")\n \n+;; On all 68k models, this makes faster code in a special case.\n+;; See also ashlsi_16, ashrsi_16 and lshrsi_16.\n+\n+(define_insn \"iorsi_zexthi_ashl16\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=d,d\")\n+    (ior:SI (zero_extend:SI (match_operand:HI 1 \"general_operand\" \"dmn,dmn\"))\n+        (ashift:SI (match_operand:SI 2 \"general_operand\" \"o,0\")\n+            (const_int 16))))]\n+  \"\"\n+  \"*\n+{\n+  CC_STATUS_INIT;\n+  if (GET_CODE (operands[2]) != REG)\n+    {\n+      operands[2] = adj_offsettable_operand (operands[2], 2);\n+      output_asm_insn (\\\"move%.w %2,%0\\\", operands);\n+    }\n+  return \\\"swap %0\\;mov%.w %1,%0\\\";\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=o,d\")\n     (ior:SI (zero_extend:SI (match_operand 1 \"general_operand\" \"dn,dmn\"))\n@@ -4308,7 +4328,7 @@\n \n ;; On all 68k models, this makes faster code in a special case.\n \n-(define_insn \"\"\n+(define_insn \"ashrsi_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (const_int 16)))]"}]}