{"sha": "bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlOTc3OWNjODU3YTdiYmQyOGFiMzE2YmIzMjVhYmQ1ZmYwZGY3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:02:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:02:01Z"}, "message": "[multiple changes]\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* sinfo.ads: Minor reformatting.\n\n2014-02-25  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-expllu.ads, s-expuns.ads, s-expmod.ads: Minor comment fix.\n\n2014-02-25  Pascal Obry  <obry@adacore.com>\n\n\t* sinput-l.adb, osint.adb, osint.ads: Add Prep_Suffix to factorize code.\n\nFrom-SVN: r208132", "tree": {"sha": "b93ba0ae89df95c49efac340d1747fd633893b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b93ba0ae89df95c49efac340d1747fd633893b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/comments", "author": null, "committer": null, "parents": [{"sha": "1ae8beef0dff7546cf66d6e747b73efa5a724a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae8beef0dff7546cf66d6e747b73efa5a724a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae8beef0dff7546cf66d6e747b73efa5a724a84"}], "stats": {"total": 148, "additions": 86, "deletions": 62}, "files": [{"sha": "527a58f189993c01b5fecae33ddd46ad4001101b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -1,3 +1,15 @@\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinfo.ads: Minor reformatting.\n+\n+2014-02-25  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-expllu.ads, s-expuns.ads, s-expmod.ads: Minor comment fix.\n+\n+2014-02-25  Pascal Obry  <obry@adacore.com>\n+\n+\t* sinput-l.adb, osint.adb, osint.ads: Add Prep_Suffix to factorize code.\n+\n 2014-02-25  Tristan Gingold  <gingold@adacore.com>\n \n \t* sem_ch10.adb: Minor comment fix."}, {"sha": "c30ed8c0d05b2cf0fd5d82414ee8bd5d68991b03", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -2190,6 +2190,19 @@ package body Osint is\n       return GNAT_Time;\n    end OS_Time_To_GNAT_Time;\n \n+   -----------------\n+   -- Prep_Suffix --\n+   -----------------\n+\n+   function Prep_Suffix return String is\n+   begin\n+      if Hostparm.OpenVMS then\n+         return \"_prep\";\n+      else\n+         return \".prep\";\n+      end if;\n+   end Prep_Suffix;\n+\n    ------------------\n    -- Program_Name --\n    ------------------"}, {"sha": "e1c04c18467e251c3466912c33165a2701e4449a", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -677,7 +677,10 @@ package Osint is\n \n    ALI_Default_Suffix : constant String_Ptr := new String'(\"ali\");\n    ALI_Suffix         : String_Ptr          := ALI_Default_Suffix;\n-   --  The suffixes used for the library files (also known as ALI files)\n+   --  The suffixes used for the ALI files\n+\n+   function Prep_Suffix return String;\n+   --  The suffix used for pre-processed files\n \n private\n "}, {"sha": "d99215a46e03c2e9ec10de4aedeae46b7320f99b", "filename": "gcc/ada/s-expllu.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fs-expllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fs-expllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expllu.ads?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This procedure performs exponentiation of unsigned types (with binary\n+--  This function performs exponentiation of unsigned types (with binary\n --  modulus values exceeding that of Unsigned_Types.Unsigned). The result\n --  is always full width, the caller must do a masking operation if the\n --  modulus is less than 2 ** (Long_Long_Unsigned'Size)."}, {"sha": "73d845c8ee31a13f102da4023e9f349d412590c2", "filename": "gcc/ada/s-expmod.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fs-expmod.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fs-expmod.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expmod.ads?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2009 Free Software Foundation, Inc.         --\n+--           Copyright (C) 1992-2013, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This procedure performs exponentiation of a modular type with non-binary\n+--  This function performs exponentiation of a modular type with non-binary\n --  modulus values. Arithmetic is done in Long_Long_Unsigned, with explicit\n --  accounting for the modulus value which is passed as the second argument.\n "}, {"sha": "824327f270e351d65135c2e8a7213da176725e13", "filename": "gcc/ada/s-expuns.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fs-expuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fs-expuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expuns.ads?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This procedure performs exponentiation of unsigned types (with binary\n+--  This function performs exponentiation of unsigned types (with binary\n --  modulus values up to and including that of Unsigned_Types.Unsigned).\n --  The result is always full width, the caller must do a masking operation\n --  the modulus is less than 2 ** (Unsigned'Size)."}, {"sha": "ec4a3bdab9da0355407975996d85cdfce5280d58", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 50, "deletions": 48, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -4573,16 +4573,16 @@ package Sinfo is\n       --  the implicit label declaration which occurs in the innermost\n       --  enclosing block.\n \n-      --  Note: there is always a loop statement identifier present in\n-      --  the tree, even if none was given in the source. In the case where\n-      --  no loop identifier is given in the source, the parser creates\n-      --  a name of the form _Loop_n, where n is a decimal integer (the\n-      --  two underlines ensure that the loop names created in this manner\n-      --  do not conflict with any user defined identifiers), and the flag\n-      --  Has_Created_Identifier is set to True. The only exception to the\n-      --  rule that all loop statement nodes have identifiers occurs for\n-      --  loops constructed by the expander, and the semantic analyzer will\n-      --  create and supply dummy loop identifiers in these cases.\n+      --  Note: there is always a loop statement identifier present in the\n+      --  tree, even if none was given in the source. In the case where no loop\n+      --  identifier is given in the source, the parser creates a name of the\n+      --  form _Loop_n, where n is a decimal integer (the two underlines ensure\n+      --  that the loop names created in this manner do not conflict with any\n+      --  user defined identifiers), and the flag Has_Created_Identifier is set\n+      --  to True. The only exception to the rule that all loop statement nodes\n+      --  have identifiers occurs for loops constructed by the expander, and\n+      --  the semantic analyzer will create and supply dummy loop identifiers\n+      --  in these cases.\n \n       --  N_Loop_Statement\n       --  Sloc points to LOOP\n@@ -4614,9 +4614,9 @@ package Sinfo is\n       --  is present at a time, in which case the other one is empty. Both are\n       --  empty in the case of a WHILE loop.\n \n-      --  Gigi restriction: This expander ensures that the type of the\n-      --  Condition field is always Standard.Boolean, even if the type\n-      --  in the source is some non-standard boolean type.\n+      --  Gigi restriction: The expander ensures that the type of the Condition\n+      --  field is always Standard.Boolean, even if the type in the source is\n+      --  some non-standard boolean type.\n \n       --  N_Iteration_Scheme\n       --  Sloc points to WHILE or FOR\n@@ -4675,12 +4675,12 @@ package Sinfo is\n       --  or body; the block identifier denotes that E_Block.\n \n       --  For block statements that come from source code, there is always a\n-      --  block statement identifier present in the tree, denoting an\n-      --  E_Block. In the case where no block identifier is given in the\n-      --  source, the parser creates a name of the form B_n, where n is a\n-      --  decimal integer, and the flag Has_Created_Identifier is set to\n-      --  True. Blocks constructed by the expander usually have no identifier,\n-      --  and no corresponding entity.\n+      --  block statement identifier present in the tree, denoting an E_Block.\n+      --  In the case where no block identifier is given in the source,\n+      --  the parser creates a name of the form B_n, where n is a decimal\n+      --  integer, and the flag Has_Created_Identifier is set to True. Blocks\n+      --  constructed by the expander usually have no identifier, and no\n+      --  corresponding entity.\n \n       --  Note: the block statement created for an extended return statement\n       --  has an entity, and this entity is an E_Return_Statement, rather than\n@@ -4716,9 +4716,9 @@ package Sinfo is\n \n       --  EXIT_STATEMENT ::= exit [loop_NAME] [when CONDITION];\n \n-      --  Gigi restriction: This expander ensures that the type of the\n-      --  Condition field is always Standard.Boolean, even if the type\n-      --  in the source is some non-standard boolean type.\n+      --  Gigi restriction: The expander ensures that the type of the Condition\n+      --  field is always Standard.Boolean, even if the type in the source is\n+      --  some non-standard boolean type.\n \n       --  N_Exit_Statement\n       --  Sloc points to EXIT\n@@ -4813,11 +4813,12 @@ package Sinfo is\n \n       --  N_Designator\n       --  Sloc points to period\n-      --  Name (Node2) holds the parent unit name. Note that this is always\n-      --   non-Empty, since this node is only used for the case where a\n-      --   parent library unit package name is present.\n+      --  Name (Node2) holds the parent unit name\n       --  Identifier (Node1)\n \n+      --  Note: Name is always non-Empty, since this node is only used for the\n+      --  case where a parent library unit package name is present.\n+\n       --  Note that the identifier can also be an operator symbol here\n \n       ------------------------------\n@@ -4834,33 +4835,34 @@ package Sinfo is\n       --  DEFINING_PROGRAM_UNIT_NAME ::=\n       --    [PARENT_UNIT_NAME .] DEFINING_IDENTIFIER\n \n-      --  The parent unit name is present only in the case of a child unit\n-      --  name (permissible only for Ada 95 for a library level unit, i.e.\n-      --  a unit at scope level one). If no such name is present, the defining\n-      --  program unit name is represented simply as the defining identifier.\n-      --  In the child unit case, the following node is used to represent the\n-      --  child unit name.\n+      --  The parent unit name is present only in the case of a child unit name\n+      --  (permissible only for Ada 95 for a library level unit, i.e. a unit\n+      --  at scope level one). If no such name is present, the defining program\n+      --  unit name is represented simply as the defining identifier. In the\n+      --  child unit case, the following node is used to represent the child\n+      --  unit name.\n \n       --  N_Defining_Program_Unit_Name\n       --  Sloc points to period\n-      --  Name (Node2) holds the parent unit name. Note that this is always\n-      --   non-Empty, since this node is only used for the case where a\n-      --   parent unit name is present.\n+      --  Name (Node2) holds the parent unit name\n       --  Defining_Identifier (Node1)\n \n+      --  Note: Name is always non-Empty, since this node is only used for the\n+      --  case where a parent unit name is present.\n+\n       --------------------------\n       -- 6.1  Operator Symbol --\n       --------------------------\n \n       --  OPERATOR_SYMBOL ::= STRING_LITERAL\n \n-      --  Note: the fields of the N_Operator_Symbol node are laid out to\n-      --  match the corresponding fields of an N_Character_Literal node. This\n-      --  allows easy conversion of the operator symbol node into a character\n-      --  literal node in the case where a string constant of the form of an\n-      --  operator symbol is scanned out as such, but turns out semantically\n-      --  to be a string literal that is not an operator. For details see\n-      --  Sinfo.CN.Change_Operator_Symbol_To_String_Literal.\n+      --  Note: the fields of the N_Operator_Symbol node are laid out to match\n+      --  the corresponding fields of an N_Character_Literal node. This allows\n+      --  easy conversion of the operator symbol node into a character literal\n+      --  node in the case where a string constant of the form of an operator\n+      --  symbol is scanned out as such, but turns out semantically to be a\n+      --  string literal that is not an operator. For details see Sinfo.CN.\n+      --  Change_Operator_Symbol_To_String_Literal.\n \n       --  N_Operator_Symbol\n       --  Sloc points to literal\n@@ -5020,11 +5022,11 @@ package Sinfo is\n       --  PROCEDURE_CALL_STATEMENT ::=\n       --    procedure_NAME; | procedure_PREFIX ACTUAL_PARAMETER_PART;\n \n-      --  Note: the reason that a procedure call has expression fields is\n-      --  that it semantically resembles an expression, e.g. overloading is\n-      --  allowed and a type is concocted for semantic processing purposes.\n-      --  Certain of these fields, such as Parens are not relevant, but it\n-      --  is easier to just supply all of them together.\n+      --  Note: the reason that a procedure call has expression fields is that\n+      --  it semantically resembles an expression, e.g. overloading is allowed\n+      --  and a type is concocted for semantic processing purposes. Certain of\n+      --  these fields, such as Parens are not relevant, but it is easier to\n+      --  just supply all of them together.\n \n       --  N_Procedure_Call_Statement\n       --  Sloc points to first token of name or prefix\n@@ -5161,8 +5163,8 @@ package Sinfo is\n       --                                      [:= EXPRESSION]\n \n       --  There are two entities associated with an extended_return_statement:\n-      --  the Return_Statement_Entity represents the statement itself, and the\n-      --  Defining_Identifier of the Object_Declaration in\n+      --  the Return_Statement_Entity represents the statement itself,\n+      --  and the Defining_Identifier of the Object_Declaration in\n       --  Return_Object_Declarations represents the object being\n       --  returned. N_Simple_Return_Statement has only the former.\n "}, {"sha": "e2dbed3dfbafc75eed306f3deb7a7d5203cd7a28", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe9779cc857a7bbd28ab316bb325abd5ff0df71/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=bbe9779cc857a7bbd28ab316bb325abd5ff0df71", "patch": "@@ -29,7 +29,6 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Fname;    use Fname;\n-with Hostparm;\n with Lib;      use Lib;\n with Opt;      use Opt;\n with Osint;    use Osint;\n@@ -646,12 +645,7 @@ package body Sinput.L is\n \n                      begin\n                         Get_Name_String (N);\n-\n-                        if Hostparm.OpenVMS then\n-                           Add_Str_To_Name_Buffer (\"_prep\");\n-                        else\n-                           Add_Str_To_Name_Buffer (\".prep\");\n-                        end if;\n+                        Add_Str_To_Name_Buffer (Prep_Suffix);\n \n                         Delete_File (Name_Buffer (1 .. Name_Len), Status);\n "}]}