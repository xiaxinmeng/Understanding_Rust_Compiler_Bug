{"sha": "f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiNTdhYjA3OTQ3ZmIyY2QwN2IwYWJlYmRmY2E3Nzg0ODc1YmMxYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-21T13:19:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-21T13:19:57Z"}, "message": "[multiple changes]\n\n2009-06-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch3.adb, exp_prag.adb, exp_util.adb, exp_util.ads, freeze.adb,\n\tsem_ch13.adb, sem_elab.adb (Exp_Prag.Expand_Pragma_Import_Or_Interface):\n\tFactor out code to new subprogram...\n\t(Exp_Util.Find_Init_Call): New shared routine to find the init proc call\n\tfor a default initialized variable.\n\t(Freeze.Check_Address_Clause): Do not reset Has_Delayed_Freeze on an\n\tentity that has an associated freeze node.\n\t(Sem_Ch13.Analyze_Attribute_Definition_Clause, case Address):\n\tIf there is an init call for the object, defer it to the object freeze\n\tpoint.\n\t(Check_Elab_Call.Find_Init_Call): Rename to Check_Init_Call, to avoid\n\tname clash with new subprogram introduced in Exp_Util.\n\n2009-06-21  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads: Minor reformatting\n\nFrom-SVN: r148764", "tree": {"sha": "f10817861720e5be575f1049ddbaf8826f62e83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f10817861720e5be575f1049ddbaf8826f62e83b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/comments", "author": null, "committer": null, "parents": [{"sha": "4f91a2557f88fd788380e3059bb7f475418002a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f91a2557f88fd788380e3059bb7f475418002a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f91a2557f88fd788380e3059bb7f475418002a6"}], "stats": {"total": 180, "additions": 145, "deletions": 35}, "files": [{"sha": "214bd7839fa7d7c80eaec1306c4be459744c3a17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -1,3 +1,22 @@\n+2009-06-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch3.adb, exp_prag.adb, exp_util.adb, exp_util.ads, freeze.adb,\n+\tsem_ch13.adb, sem_elab.adb (Exp_Prag.Expand_Pragma_Import_Or_Interface):\n+\tFactor out code to new subprogram...\n+\t(Exp_Util.Find_Init_Call): New shared routine to find the init proc call\n+\tfor a default initialized variable.\n+\t(Freeze.Check_Address_Clause): Do not reset Has_Delayed_Freeze on an\n+\tentity that has an associated freeze node.\n+\t(Sem_Ch13.Analyze_Attribute_Definition_Clause, case Address):\n+\tIf there is an init call for the object, defer it to the object freeze\n+\tpoint.\n+\t(Check_Elab_Call.Find_Init_Call): Rename to Check_Init_Call, to avoid\n+\tname clash with new subprogram introduced in Exp_Util.\n+\n+2009-06-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting\n+\n 2009-06-21  Ed Falis  <falis@adacore.com>\n \n \t* env.c (__gnat_environ): return NULL for vThreads - unimplemented"}, {"sha": "bebdda082f2f8a5776d600ab9b229c7ab2074c78", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -241,7 +241,7 @@ package Einfo is\n \n --  For elementary types other than discrete and fixed-point types, the\n --  Object_Size and Value_Size are the same (and equivalent to the RM\n---  attribute Size).  Only Size may be specified for such types.\n+--  attribute Size). Only Size may be specified for such types.\n \n --  For composite types, Object_Size and Value_Size are computed from their\n --  respective value for the type of each element as well as the layout."}, {"sha": "e8030d9c196e592b56eca38bc47af658c8d77d73", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -4380,8 +4380,12 @@ package body Exp_Ch3 is\n             --  object being initialized. This is because the call is not a\n             --  source level call. This works fine, because the only possible\n             --  statements depending on freeze status that can appear after the\n-            --  _Init call are rep clauses which can safely appear after actual\n-            --  references to the object.\n+            --  Init_Proc call are rep clauses which can safely appear after\n+            --  actual references to the object. Note that this call may\n+            --  subsequently be removed (if a pragma Import is encountered),\n+            --  or moved to the freeze actions for the object (e.g. if an\n+            --  address clause is applied to the object, causing it to get\n+            --  delayed freezing).\n \n             Id_Ref := New_Reference_To (Def_Id, Loc);\n             Set_Must_Not_Freeze (Id_Ref);"}, {"sha": "529fadebdb90952f9e5a4eb364e71937f3c67086", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,6 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Exp_Ch11; use Exp_Ch11;\n-with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Expander; use Expander;\n with Namet;    use Namet;\n@@ -485,39 +484,25 @@ package body Exp_Prag is\n \n    procedure Expand_Pragma_Import_Or_Interface (N : Node_Id) is\n       Def_Id    : constant Entity_Id := Entity (Arg2 (N));\n-      Typ       : Entity_Id;\n       Init_Call : Node_Id;\n \n    begin\n       if Ekind (Def_Id) = E_Variable then\n-         Typ  := Etype (Def_Id);\n \n-         --  Iterate from declaration of object to import pragma, to find\n-         --  generated initialization call for object, if any.\n+         --  Find generated initialization call for object, if any\n \n-         Init_Call := Next (Parent (Def_Id));\n-         while Present (Init_Call) and then Init_Call /= N loop\n-            if Has_Non_Null_Base_Init_Proc (Typ)\n-              and then Nkind (Init_Call) = N_Procedure_Call_Statement\n-              and then Is_Entity_Name (Name (Init_Call))\n-              and then Entity (Name (Init_Call)) = Base_Init_Proc (Typ)\n-            then\n-               Remove (Init_Call);\n-               exit;\n-            else\n-               Next (Init_Call);\n-            end if;\n-         end loop;\n+         Init_Call := Find_Init_Call (Def_Id, Rep_Clause => N);\n+         if Present (Init_Call) then\n+            Remove (Init_Call);\n+         end if;\n \n          --  Any default initialization expression should be removed\n          --  (e.g., null defaults for access objects, zero initialization\n          --  of packed bit arrays). Imported objects aren't allowed to\n          --  have explicit initialization, so the expression must have\n          --  been generated by the compiler.\n \n-         if Init_Call = N\n-           and then Present (Expression (Parent (Def_Id)))\n-         then\n+         if No (Init_Call) and then Present (Expression (Parent (Def_Id))) then\n             Set_Expression (Parent (Def_Id), Empty);\n          end if;\n       end if;"}, {"sha": "be7c71a25514cd2f48f83daa2d3d7590eb8f9efc", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -1398,6 +1398,74 @@ package body Exp_Util is\n       end if;\n    end Expand_Subtype_From_Expr;\n \n+   --------------------\n+   -- Find_Init_Call --\n+   --------------------\n+\n+   function Find_Init_Call\n+     (Var        : Entity_Id;\n+      Rep_Clause : Node_Id) return Node_Id\n+   is\n+      Typ : constant Entity_Id := Etype (Var);\n+\n+      Init_Proc : Entity_Id;\n+      --  Initialization procedure for Typ\n+\n+      function Find_Init_Call_In_List (From : Node_Id) return Node_Id;\n+      --  Look for init call for Var starting at From and scanning the\n+      --  enclosing list until Rep_Clause or the end of the list is reached.\n+\n+      ----------------------------\n+      -- Find_Init_Call_In_List --\n+      ----------------------------\n+\n+      function Find_Init_Call_In_List (From : Node_Id) return Node_Id is\n+         Init_Call : Node_Id;\n+      begin\n+         Init_Call := From;\n+\n+         while Present (Init_Call) and then Init_Call /= Rep_Clause loop\n+            if Nkind (Init_Call) = N_Procedure_Call_Statement\n+                 and then Is_Entity_Name (Name (Init_Call))\n+                 and then Entity (Name (Init_Call)) = Init_Proc\n+            then\n+               return Init_Call;\n+            end if;\n+            Next (Init_Call);\n+         end loop;\n+\n+         return Empty;\n+      end Find_Init_Call_In_List;\n+\n+      Init_Call : Node_Id;\n+\n+   --  Start of processing for Find_Init_Call\n+\n+   begin\n+      if not Has_Non_Null_Base_Init_Proc (Typ) then\n+         --  No init proc for the type, so obviously no call to be found\n+\n+         return Empty;\n+      end if;\n+\n+      Init_Proc := Base_Init_Proc (Typ);\n+\n+      --  First scan the list containing the declaration of Var\n+\n+      Init_Call := Find_Init_Call_In_List (From => Next (Parent (Var)));\n+\n+      --  If not found, also look on Var's freeze actions list, if any, since\n+      --  the init call may have been moved there (case of an address clause\n+      --  applying to Var).\n+\n+      if No (Init_Call) and then Present (Freeze_Node (Var)) then\n+         Init_Call := Find_Init_Call_In_List\n+                        (First (Actions (Freeze_Node (Var))));\n+      end if;\n+\n+      return Init_Call;\n+   end Find_Init_Call;\n+\n    ------------------------\n    -- Find_Interface_ADT --\n    ------------------------"}, {"sha": "c310a211aa325fca8a9e7098f2c9156adf03035e", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -343,6 +343,14 @@ package Exp_Util is\n    --  declarations and/or allocations when the type is indefinite (including\n    --  class-wide).\n \n+   function Find_Init_Call\n+     (Var        : Entity_Id;\n+      Rep_Clause : Node_Id) return Node_Id;\n+   --  Look for init_proc call for variable Var, either among declarations\n+   --  between that of Var and a subsequent Rep_Clause applying to Var, or\n+   --  in the list of freeze actions associated with Var, and if found, return\n+   --  that call node.\n+\n    function Find_Interface_ADT\n      (T     : Entity_Id;\n       Iface : Entity_Id) return Elmt_Id;"}, {"sha": "406db6438bbd264fae5329bf375052efdd01cfd7", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -536,10 +536,19 @@ package body Freeze is\n          --  Otherwise, we require the address clause to be constant because\n          --  the call to the initialization procedure (or the attach code) has\n          --  to happen at the point of the declaration.\n+         --  Actually the IP call has been moved to the freeze actions\n+         --  anyway, so maybe we can relax this restriction???\n \n          else\n             Check_Constant_Address_Clause (Expr, E);\n-            Set_Has_Delayed_Freeze (E, False);\n+\n+            --  Has_Delayed_Freeze was set on E when the address clause was\n+            --  analyzed. Reset the flag now unless freeze actions were\n+            --  attached to it in the mean time.\n+\n+            if No (Freeze_Node (E)) then\n+               Set_Has_Delayed_Freeze (E, False);\n+            end if;\n          end if;\n \n          if not Error_Posted (Expr)\n@@ -2594,6 +2603,7 @@ package body Freeze is\n                      if Is_Array_Type (R_Type)\n                        and then not Is_Constrained (R_Type)\n                        and then not Is_Imported (E)\n+                       and then VM_Target = No_VM\n                        and then Has_Foreign_Convention (E)\n                        and then Warn_On_Export_Import\n                        and then not Has_Warnings_Off (E)\n@@ -5037,6 +5047,7 @@ package body Freeze is\n               and then not Is_Constrained (Retype)\n               and then Mechanism (E) not in Descriptor_Codes\n               and then Warn_On_Export_Import\n+              and then VM_Target = No_VM\n             then\n                Error_Msg_N\n                 (\"?foreign convention function& should not return \" &"}, {"sha": "11bb5ed998e06c3edce0b9b10a0924fa6a6f0493", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -977,6 +977,21 @@ package body Sem_Ch13 is\n \n                   Set_Has_Delayed_Freeze (U_Ent);\n \n+                  --  If an initialization call has been generated for this\n+                  --  object, it needs to be deferred to after the freeze node\n+                  --  we have just now added, otherwise GIGI will see a\n+                  --  reference to the variable (as actual to the IP call)\n+                  --  before its definition.\n+\n+                  declare\n+                     Init_Call : constant Node_Id := Find_Init_Call (U_Ent, N);\n+                  begin\n+                     if Present (Init_Call) then\n+                        Remove (Init_Call);\n+                        Append_Freeze_Action (U_Ent, Init_Call);\n+                     end if;\n+                  end;\n+\n                   if Is_Exported (U_Ent) then\n                      Error_Msg_N\n                        (\"& cannot be exported if an address clause is given\","}, {"sha": "60a07322dc4756ca9af2551408fa7c61f0b9df26", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b57ab07947fb2cd07b0abebdfca7784875bc1a/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1460,18 +1460,18 @@ package body Sem_Elab is\n          Process_Init_Proc : declare\n             Unit_Decl : constant Node_Id := Unit_Declaration_Node (Ent);\n \n-            function Find_Init_Call (Nod : Node_Id) return Traverse_Result;\n+            function Check_Init_Call (Nod : Node_Id) return Traverse_Result;\n             --  Find subprogram calls within body of Init_Proc for Traverse\n             --  instantiation below.\n \n-            procedure Traverse_Body is new Traverse_Proc (Find_Init_Call);\n+            procedure Traverse_Body is new Traverse_Proc (Check_Init_Call);\n             --  Traversal procedure to find all calls with body of Init_Proc\n \n-            --------------------\n-            -- Find_Init_Call --\n-            --------------------\n+            ---------------------\n+            -- Check_Init_Call --\n+            ---------------------\n \n-            function Find_Init_Call (Nod : Node_Id) return Traverse_Result is\n+            function Check_Init_Call (Nod : Node_Id) return Traverse_Result is\n                Func : Entity_Id;\n \n             begin\n@@ -1491,7 +1491,7 @@ package body Sem_Elab is\n                else\n                   return OK;\n                end if;\n-            end Find_Init_Call;\n+            end Check_Init_Call;\n \n          --  Start of processing for Process_Init_Proc\n "}]}