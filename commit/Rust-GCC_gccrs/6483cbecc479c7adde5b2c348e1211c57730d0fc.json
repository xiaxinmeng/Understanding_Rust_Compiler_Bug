{"sha": "6483cbecc479c7adde5b2c348e1211c57730d0fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4M2NiZWNjNDc5YzdhZGRlNWIyYzM0OGUxMjExYzU3NzMwZDBmYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-02-17T15:27:34Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-02-17T15:27:34Z"}, "message": "* java/util/TimerTask.java: New version from Classpath.\n\nFrom-SVN: r39801", "tree": {"sha": "99a5d1852960eb343c1c59e67d10aa33f74668f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a5d1852960eb343c1c59e67d10aa33f74668f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6483cbecc479c7adde5b2c348e1211c57730d0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6483cbecc479c7adde5b2c348e1211c57730d0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6483cbecc479c7adde5b2c348e1211c57730d0fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6483cbecc479c7adde5b2c348e1211c57730d0fc/comments", "author": null, "committer": null, "parents": [{"sha": "3f57b973f3b6d4b21912d37a263430610e84ce47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f57b973f3b6d4b21912d37a263430610e84ce47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f57b973f3b6d4b21912d37a263430610e84ce47"}], "stats": {"total": 135, "additions": 71, "deletions": 64}, "files": [{"sha": "9169dd57eac4d61c17d0f4718fc90e9592580af6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6483cbecc479c7adde5b2c348e1211c57730d0fc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6483cbecc479c7adde5b2c348e1211c57730d0fc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6483cbecc479c7adde5b2c348e1211c57730d0fc", "patch": "@@ -1,3 +1,7 @@\n+2001-02-17  Mark Wielaard <mark@klomp.org>\n+\n+\t* java/util/TimerTask.java: New version from Classpath.\n+\n 2001-02-17  Mark Wielaard <mark@klomp.org>\n \n \tRemerge with Classpath"}, {"sha": "3cf24b08b88e6d497b75959b7502d7f102407c61", "filename": "libjava/java/util/TimerTask.java", "status": "modified", "additions": 67, "deletions": 64, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6483cbecc479c7adde5b2c348e1211c57730d0fc/libjava%2Fjava%2Futil%2FTimerTask.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6483cbecc479c7adde5b2c348e1211c57730d0fc/libjava%2Fjava%2Futil%2FTimerTask.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FTimerTask.java?ref=6483cbecc479c7adde5b2c348e1211c57730d0fc", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -58,74 +58,77 @@\n  * @since 1.3\n  * @author Mark Wielaard (mark@klomp.org)\n  */\n-public abstract class TimerTask implements Runnable {\n-\n-    /**\n-     * If positive the next time this task should be run.\n-     * If negative this TimerTask is canceled or executed for the last time.\n-     */\n-    long scheduled;\n+public abstract class TimerTask implements Runnable\n+{\n+  /**\n+   * If positive the next time this task should be run.\n+   * If negative this TimerTask is canceled or executed for the last time.\n+   */\n+  long scheduled;\n \n-    /**\n-     * If positive the last time this task was run.\n-     * If negative this TimerTask has not yet been scheduled.\n-     */\n-    long lastExecutionTime;\n+  /**\n+   * If positive the last time this task was run.\n+   * If negative this TimerTask has not yet been scheduled.\n+   */\n+  long lastExecutionTime;\n \n-    /**\n-     * If positive the number of milliseconds between runs of this task.\n-     * If -1 this task doesn't have to be run more then once.\n-     */\n-    long period;\n+  /**\n+   * If positive the number of milliseconds between runs of this task.\n+   * If -1 this task doesn't have to be run more then once.\n+   */\n+  long period;\n \n-    /**\n-     * If true the next time this task should be run is relative to\n-     * the last scheduled time, otherwise it can drift in time.\n-     */\n-    boolean fixed;\n+  /**\n+   * If true the next time this task should be run is relative to\n+   * the last scheduled time, otherwise it can drift in time.\n+   */\n+  boolean fixed;\n \n-    /**\n-     * Creates a TimerTask and marks it as not yet scheduled.\n-     */\n-    protected TimerTask() {\n-        this.scheduled = 0;\n-        this.lastExecutionTime = -1;\n-    }\n+  /**\n+   * Creates a TimerTask and marks it as not yet scheduled.\n+   */\n+  protected TimerTask()\n+  {\n+    this.scheduled = 0;\n+    this.lastExecutionTime = -1;\n+  }\n \n-    /**\n-     * Marks the task as canceled and prevents any further execution.\n-     * Returns true if the task was scheduled for any execution in the future\n-     * and this cancel operation prevents that execution from happening.\n-     * <p>\n-     * A task that has been canceled can never be scheduled again.\n-     * <p>\n-     * In this implementation the TimerTask it is possible that the Timer does\n-     * keep a reference to the TimerTask until the first time the TimerTask\n-     * is actually scheduled. But the reference will disappear immediatly when\n-     * cancel is called from within the TimerTask run method.\n-     */\n-    public boolean cancel() {\n-        boolean prevented_execution = (this.scheduled >= 0);\n-        this.scheduled = -1;\n-        return prevented_execution;\n-    }\n+  /**\n+   * Marks the task as canceled and prevents any further execution.\n+   * Returns true if the task was scheduled for any execution in the future\n+   * and this cancel operation prevents that execution from happening.\n+   * <p>\n+   * A task that has been canceled can never be scheduled again.\n+   * <p>\n+   * In this implementation the TimerTask it is possible that the Timer does\n+   * keep a reference to the TimerTask until the first time the TimerTask\n+   * is actually scheduled. But the reference will disappear immediatly when\n+   * cancel is called from within the TimerTask run method.\n+   */\n+  public boolean cancel()\n+  {\n+    boolean prevented_execution = (this.scheduled >= 0);\n+    this.scheduled = -1;\n+    return prevented_execution;\n+  }\n \n-    /**\n-     * Method that is called when this task is scheduled for execution.\n-     */\n-    public abstract void run();\n+  /**\n+   * Method that is called when this task is scheduled for execution.\n+   */\n+  public abstract void run();\n \n-    /**\n-     * Returns the last time this task was scheduled or (when called by the\n-     * task from the run method) the time the current execution of the task\n-     * was scheduled. When the task has not yet run the return value is\n-     * undefined.\n-     * <p>\n-     * Can be used (when the task is scheduled at fixed rate) to see the\n-     * difference between the requested schedule time and the actual time\n-     * that can be found with <code>System.currentTimeMillis()</code>.\n-     */\n-    public long scheduledExecutionTime() {\n-        return lastExecutionTime;\n-    }\n+  /**\n+   * Returns the last time this task was scheduled or (when called by the\n+   * task from the run method) the time the current execution of the task\n+   * was scheduled. When the task has not yet run the return value is\n+   * undefined.\n+   * <p>\n+   * Can be used (when the task is scheduled at fixed rate) to see the\n+   * difference between the requested schedule time and the actual time\n+   * that can be found with <code>System.currentTimeMillis()</code>.\n+   */\n+  public long scheduledExecutionTime()\n+  {\n+    return lastExecutionTime;\n+  }\n }"}]}