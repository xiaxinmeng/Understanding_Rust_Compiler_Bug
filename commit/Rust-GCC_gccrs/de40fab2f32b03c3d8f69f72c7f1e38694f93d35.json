{"sha": "de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "node_id": "C_kwDOANBUbNoAKGRlNDBmYWIyZjMyYjAzYzNkOGY2OWY3MmM3ZjFlMzg2OTRmOTNkMzU", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2022-09-04T16:24:23Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2022-09-19T12:26:34Z"}, "message": "Fortran: add IEEE_MODES_TYPE, IEEE_GET_MODES and IEEE_SET_MODES\n\nThe IEEE_MODES_TYPE type and the two functions that get and set it\nwere added in Fortran 2018.  They can be implemented using the already\nexisting target-specific functions.  A future optimization could, on\nsome targets, set/get all modes through one or two instructions only,\nbut that would need a new set of functions in all config/fpu-* files.\n\n2022-09-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\nlibgfortran/\n\n\t* ieee/ieee_exceptions.F90: Add IEEE_MODES_TYPE, IEEE_GET_MODES\n\tand IEEE_SET_MODES.\n\t* ieee/ieee_arithmetic.F90: Make them public in IEEE_ARITHMETIC\n\tas well.\n\ngcc/testsuite/\n\n\t* gfortran.dg/ieee/modes_1.f90: New test.", "tree": {"sha": "a5100ce2c023af13b9659f48592b3719b2577612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5100ce2c023af13b9659f48592b3719b2577612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de40fab2f32b03c3d8f69f72c7f1e38694f93d35/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6efc494a24bb423f1f9ef8dbdc65ca189072eb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efc494a24bb423f1f9ef8dbdc65ca189072eb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6efc494a24bb423f1f9ef8dbdc65ca189072eb8d"}], "stats": {"total": 161, "additions": 160, "deletions": 1}, "files": [{"sha": "b6ab28847f7f7f0fbf58220cc8b49794a5474535", "filename": "gcc/testsuite/gfortran.dg/ieee/modes_1.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40fab2f32b03c3d8f69f72c7f1e38694f93d35/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fmodes_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40fab2f32b03c3d8f69f72c7f1e38694f93d35/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fmodes_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fmodes_1.f90?ref=de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do run }\n+!\n+! Test IEEE_MODES_TYPE, IEEE_GET_MODES and IEEE_SET_MODES\n+\n+\n+! The symbols should be accessible from both IEEE_EXCEPTIONS\n+! and IEEE_ARITHMETIC.\n+\n+subroutine test_1\n+  use ieee_exceptions, only : IEEE_GET_MODES, IEEE_SET_MODES\n+end subroutine\n+\n+subroutine test_2\n+  use ieee_arithmetic, only : IEEE_GET_MODES, IEEE_SET_MODES\n+end subroutine\n+\n+subroutine test_3\n+  use ieee_exceptions, only : IEEE_MODES_TYPE\n+end subroutine\n+\n+subroutine test_4\n+  use ieee_arithmetic, only : IEEE_MODES_TYPE\n+end subroutine\n+\n+\n+! Check that the functions actually do the job\n+\n+program foo\n+  use ieee_arithmetic\n+  implicit none\n+\n+  type(ieee_modes_type) :: modes1, modes2\n+  type(ieee_round_type) :: rmode\n+  logical :: f\n+\n+  ! Set some modes\n+  if (ieee_support_underflow_control()) then\n+    call ieee_set_underflow_mode(gradual=.false.)\n+  endif\n+  if (ieee_support_rounding(ieee_up)) then\n+    call ieee_set_rounding_mode(ieee_up)\n+  endif\n+  if (ieee_support_halting(ieee_overflow)) then\n+    call ieee_set_halting_mode(ieee_overflow, .true.)\n+  endif\n+\n+  call ieee_get_modes(modes1)\n+\n+  ! Change modes\n+  if (ieee_support_underflow_control()) then\n+    call ieee_set_underflow_mode(gradual=.true.)\n+  endif\n+  if (ieee_support_rounding(ieee_down)) then\n+    call ieee_set_rounding_mode(ieee_down)\n+  endif\n+  if (ieee_support_halting(ieee_overflow)) then\n+    call ieee_set_halting_mode(ieee_overflow, .false.)\n+  endif\n+\n+  ! Save and restore the previous modes\n+  call ieee_get_modes(modes2)\n+  call ieee_set_modes(modes1)\n+\n+  ! Check them\n+  if (ieee_support_underflow_control()) then\n+    call ieee_get_underflow_mode(f)\n+    if (f) stop 1\n+  endif\n+  if (ieee_support_rounding(ieee_down)) then\n+    call ieee_get_rounding_mode(rmode)\n+    if (rmode /= ieee_up) stop 2\n+  endif\n+  if (ieee_support_halting(ieee_overflow)) then\n+    call ieee_get_halting_mode(ieee_overflow, f)\n+    if (.not. f) stop 3\n+  endif\n+\n+  ! Restore the second set of modes\n+  call ieee_set_modes(modes2)\n+\n+  ! Check again\n+  if (ieee_support_underflow_control()) then\n+    call ieee_get_underflow_mode(f)\n+    if (.not. f) stop 3\n+  endif\n+  if (ieee_support_rounding(ieee_down)) then\n+    call ieee_get_rounding_mode(rmode)\n+    if (rmode /= ieee_down) stop 4\n+  endif\n+  if (ieee_support_halting(ieee_overflow)) then\n+    call ieee_get_halting_mode(ieee_overflow, f)\n+    if (f) stop 5\n+  endif\n+\n+end program foo"}, {"sha": "ce30e4afca3082be24d4223dd3846ad5874e2349", "filename": "libgfortran/ieee/ieee_arithmetic.F90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40fab2f32b03c3d8f69f72c7f1e38694f93d35/libgfortran%2Fieee%2Fieee_arithmetic.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40fab2f32b03c3d8f69f72c7f1e38694f93d35/libgfortran%2Fieee%2Fieee_arithmetic.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_arithmetic.F90?ref=de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "patch": "@@ -39,7 +39,8 @@ module IEEE_ARITHMETIC\n     IEEE_DIVIDE_BY_ZERO, IEEE_UNDERFLOW, IEEE_INEXACT, IEEE_USUAL, &\n     IEEE_ALL, IEEE_STATUS_TYPE, IEEE_GET_FLAG, IEEE_GET_HALTING_MODE, &\n     IEEE_GET_STATUS, IEEE_SET_FLAG, IEEE_SET_HALTING_MODE, &\n-    IEEE_SET_STATUS, IEEE_SUPPORT_FLAG, IEEE_SUPPORT_HALTING\n+    IEEE_SET_STATUS, IEEE_SUPPORT_FLAG, IEEE_SUPPORT_HALTING, &\n+    IEEE_MODES_TYPE, IEEE_GET_MODES, IEEE_SET_MODES\n \n   ! Derived types and named constants\n "}, {"sha": "3ed2f6e3e2c022334cc777ea365a537b4bfa2abd", "filename": "libgfortran/ieee/ieee_exceptions.F90", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de40fab2f32b03c3d8f69f72c7f1e38694f93d35/libgfortran%2Fieee%2Fieee_exceptions.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de40fab2f32b03c3d8f69f72c7f1e38694f93d35/libgfortran%2Fieee%2Fieee_exceptions.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_exceptions.F90?ref=de40fab2f32b03c3d8f69f72c7f1e38694f93d35", "patch": "@@ -56,6 +56,13 @@ module IEEE_EXCEPTIONS\n     character(len=GFC_FPE_STATE_BUFFER_SIZE) :: hidden\n   end type\n \n+  type, public :: IEEE_MODES_TYPE\n+    private\n+    integer :: rounding\n+    integer :: underflow\n+    integer :: halting\n+  end type\n+\n   interface IEEE_SUPPORT_FLAG\n     module procedure IEEE_SUPPORT_FLAG_4, &\n                      IEEE_SUPPORT_FLAG_8, &\n@@ -72,9 +79,65 @@ module IEEE_EXCEPTIONS\n   public :: IEEE_SET_HALTING_MODE, IEEE_GET_HALTING_MODE\n   public :: IEEE_SET_FLAG, IEEE_GET_FLAG\n   public :: IEEE_SET_STATUS, IEEE_GET_STATUS\n+  public :: IEEE_SET_MODES, IEEE_GET_MODES\n \n contains\n \n+! Fortran 2018: Saving and restoring floating-point modes\n+! (rounding modes, underflow mode, and halting mode)\n+! \n+! For now, we only have one rounding mode for all kinds.\n+! Some targets could optimize getting/setting all modes at once, but for now\n+! we make three calls.  This code must be kept in sync with:\n+!   - IEEE_{GET,SET}_ROUNDING_MODE\n+!   - IEEE_{GET,SET}_UNDERFLOW_MODE\n+!   - IEEE_{GET,SET}_HALTING_MODE\n+\n+  subroutine IEEE_GET_MODES (MODES)\n+    implicit none\n+    type(IEEE_MODES_TYPE), intent(out) :: MODES\n+\n+    interface\n+      integer function helper_rounding() &\n+        bind(c, name=\"_gfortrani_get_fpu_rounding_mode\")\n+      end function\n+      integer function helper_underflow() &\n+        bind(c, name=\"_gfortrani_get_fpu_underflow_mode\")\n+      end function\n+      pure integer function helper_halting() &\n+          bind(c, name=\"_gfortrani_get_fpu_trap_exceptions\")\n+      end function\n+    end interface\n+\n+    MODES%rounding = helper_rounding()\n+    MODES%underflow = helper_underflow()\n+    MODES%halting = helper_halting()\n+  end subroutine\n+\n+  subroutine IEEE_SET_MODES (MODES)\n+    implicit none\n+    type(IEEE_MODES_TYPE), intent(in) :: MODES\n+\n+    interface\n+      subroutine helper_rounding(val) &\n+          bind(c, name=\"_gfortrani_set_fpu_rounding_mode\")\n+        integer, value :: val\n+      end subroutine\n+      subroutine helper_underflow(val) &\n+          bind(c, name=\"_gfortrani_set_fpu_underflow_mode\")\n+        integer, value :: val\n+      end subroutine\n+      pure subroutine helper_halting(trap, notrap) &\n+          bind(c, name=\"_gfortrani_set_fpu_trap_exceptions\")\n+        integer, intent(in), value :: trap, notrap\n+      end subroutine\n+    end interface\n+\n+    call helper_rounding(MODES%rounding)\n+    call helper_underflow(MODES%underflow)\n+    call helper_halting(MODES%halting, NOT(MODES%halting))\n+  end subroutine\n+\n ! Saving and restoring floating-point status\n \n   subroutine IEEE_GET_STATUS (STATUS_VALUE)"}]}