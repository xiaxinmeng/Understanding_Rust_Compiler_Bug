{"sha": "0309455b5035575ca19b1a6e23f8109db9e7797e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMwOTQ1NWI1MDM1NTc1Y2ExOWIxYTZlMjNmODEwOWRiOWU3Nzk3ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-27T13:39:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-27T13:39:30Z"}, "message": "[multiple changes]\n\n2010-01-27  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* g-regist.adb (For_Every_Key): Fix previous change.\n\n2010-01-27  Thomas Quinot  <quinot@adacore.com>\n\n\t* lib-writ.ads: Current version of spec for new N (note) ALI lines\n\n2010-01-27  Yannick Moy  <moy@adacore.com>\n\n\t* a-cdlili.adb (Insert): Correct exception message when cursor\n\tdesignates wrong list.\n\nFrom-SVN: r156284", "tree": {"sha": "bf99c34f9ece05f590d7ed12388a614712bdbe45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf99c34f9ece05f590d7ed12388a614712bdbe45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0309455b5035575ca19b1a6e23f8109db9e7797e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0309455b5035575ca19b1a6e23f8109db9e7797e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0309455b5035575ca19b1a6e23f8109db9e7797e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0309455b5035575ca19b1a6e23f8109db9e7797e/comments", "author": null, "committer": null, "parents": [{"sha": "95cb33a561ceaa41888f19f43e3f46d221543034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95cb33a561ceaa41888f19f43e3f46d221543034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95cb33a561ceaa41888f19f43e3f46d221543034"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "a0ff729910c3baa8e893f7981f9c9c81e840ec2d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0309455b5035575ca19b1a6e23f8109db9e7797e", "patch": "@@ -1,3 +1,17 @@\n+2010-01-27  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* g-regist.adb (For_Every_Key): Fix previous change.\n+\tMinor reformatting.\n+\n+2010-01-27  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* lib-writ.ads: Current version of spec for new N (note) ALI lines\n+\n+2010-01-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-cdlili.adb (Insert): Correct exception message when cursor\n+\tdesignates wrong list.\n+\n 2010-01-27  Vincent Celier  <celier@adacore.com>\n \n \t* gnatcmd.adb: When there is only one main specified, the package"}, {"sha": "78ed93a411e0743ef705b78fc1d5850b2435c45c", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=0309455b5035575ca19b1a6e23f8109db9e7797e", "patch": "@@ -621,7 +621,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       if Before.Container /= null then\n          if Before.Container /= Container'Unrestricted_Access then\n             raise Program_Error with\n-              \"attempt to tamper with elements (list is busy)\";\n+              \"Before cursor designates wrong list\";\n          end if;\n \n          pragma Assert (Vet (Before), \"bad cursor in Insert\");"}, {"sha": "ba63b3c8326103103f3a389a738969f0857d6fab", "filename": "gcc/ada/g-regist.adb", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2Fg-regist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2Fg-regist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regist.adb?ref=0309455b5035575ca19b1a6e23f8109db9e7797e", "patch": "@@ -243,20 +243,23 @@ package body GNAT.Registry is\n    -------------------\n \n    procedure For_Every_Key\n-     (From_Key : HKEY;\n+     (From_Key  : HKEY;\n       Recursive : Boolean := False)\n    is\n       procedure Recursive_For_Every_Key\n         (From_Key  : HKEY;\n          Recursive : Boolean := False;\n          Quit      : in out Boolean);\n \n+      -----------------------------\n+      -- Recursive_For_Every_Key --\n+      -----------------------------\n+\n       procedure Recursive_For_Every_Key\n         (From_Key : HKEY;\n          Recursive : Boolean := False;\n          Quit      : in out Boolean)\n       is\n-\n          use type LONG;\n          use type ULONG;\n \n@@ -271,11 +274,17 @@ package body GNAT.Registry is\n \n          function Current_Name return String;\n \n+         ------------------\n+         -- Current_Name --\n+         ------------------\n+\n          function Current_Name return String is\n          begin\n             return Interfaces.C.To_Ada (Sub_Key);\n          end Current_Name;\n \n+      --  Start of processing for Recursive_For_Every_Key\n+\n       begin\n          loop\n             Size_Sub_Key := Sub_Key'Length;\n@@ -286,23 +295,28 @@ package body GNAT.Registry is\n \n             exit when not (Result = ERROR_SUCCESS);\n \n-            Action (Natural (Index) + 1, From_Key, Current_Name, Quit);\n+            Sub_Hkey := Open_Key (From_Key, Interfaces.C.To_Ada (Sub_Key));\n \n-            exit when Quit;\n+            Action (Natural (Index) + 1, Sub_Hkey, Current_Name, Quit);\n \n-            if Recursive then\n-               Sub_Hkey := Open_Key (From_Key, Interfaces.C.To_Ada (Sub_Key));\n+            if not Quit and then Recursive then\n                Recursive_For_Every_Key (Sub_Hkey, True, Quit);\n-               Close_Key (Sub_Hkey);\n             end if;\n \n+            Close_Key (Sub_Hkey);\n+\n             exit when Quit;\n \n             Index := Index + 1;\n          end loop;\n       end Recursive_For_Every_Key;\n \n+      --  Local Variables\n+\n       Quit : Boolean := False;\n+\n+   --  Start of processing for For_Every_Key\n+\n    begin\n       Recursive_For_Every_Key (From_Key, Recursive, Quit);\n    end For_Every_Key;"}, {"sha": "593442c4d4fb6c48fa938eb1e2e9cef2450bd8b3", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0309455b5035575ca19b1a6e23f8109db9e7797e/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=0309455b5035575ca19b1a6e23f8109db9e7797e", "patch": "@@ -654,6 +654,40 @@ package Lib.Writ is\n    --  The cross-reference data follows the dependency lines. See the spec of\n    --  Lib.Xref for details on the format of this data.\n \n+   --  --------------\n+   --  -- N  Notes --\n+   --  --------------\n+\n+   --  The note lines record annotations inserted in source code for processing\n+   --  by external tools using pragmas. For each occurrence of any of these\n+   --  pragmas, a line is generated with the following syntax:\n+\n+   --    N <dep>x<sloc> [<arg_id>:]<arg> ...\n+\n+   --  x is one of:\n+   --    A  pragma Annotate\n+   --    C  pragma Comment\n+   --    I  pragma Ident\n+   --    T  pragma Title\n+   --    S  pragma Subtitle\n+\n+   --  <dep>  is the source file containing the pragma by its dependency index\n+   --         (first D line has index 1)\n+   --  <sloc> is the source location of the pragma\n+\n+   --  Successive entries record the pragma_argument_associations.\n+\n+   --  For a named association, the entry is prefixed with the pragma argument\n+   --  identifier <arg_id> followed by a colon.\n+\n+   --  <arg> represents the pragma argument, and has the following conventions:\n+\n+   --   - identifiers are output verbatim\n+   --   - static string expressions are output as literals encoded as for\n+   --       L lines\n+   --   - static integer expressions are output as decimal literals\n+   --   - any other expression is replaced by the placeholder \"<expr>\"\n+\n    ---------------------------------\n    -- Source Coverage Obligations --\n    ---------------------------------"}]}