{"sha": "d4194d74faee24c9bded05ba1b523e52f8b40bf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxOTRkNzRmYWVlMjRjOWJkZWQwNWJhMWI1MjNlNTJmOGI0MGJmMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-09-03T09:33:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-22T12:11:27Z"}, "message": "[Ada] Add more annotations and assertions in the runtime\n\ngcc/ada/\n\n\t* libgnat/s-imenne.adb, libgnat/s-imgrea.adb: Add assertions.", "tree": {"sha": "04497543315e76fda4e387202a90b5943503acfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04497543315e76fda4e387202a90b5943503acfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4194d74faee24c9bded05ba1b523e52f8b40bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4194d74faee24c9bded05ba1b523e52f8b40bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4194d74faee24c9bded05ba1b523e52f8b40bf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4194d74faee24c9bded05ba1b523e52f8b40bf0/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a52050498ea809c7175e2a3ce682324d2a966c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a52050498ea809c7175e2a3ce682324d2a966c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a52050498ea809c7175e2a3ce682324d2a966c"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "3052ea23ffc32caeaf15ed8e72c14648c0cc6eb7", "filename": "gcc/ada/libgnat/s-imenne.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4194d74faee24c9bded05ba1b523e52f8b40bf0/gcc%2Fada%2Flibgnat%2Fs-imenne.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4194d74faee24c9bded05ba1b523e52f8b40bf0/gcc%2Fada%2Flibgnat%2Fs-imenne.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imenne.adb?ref=d4194d74faee24c9bded05ba1b523e52f8b40bf0", "patch": "@@ -61,6 +61,9 @@ package body System.Img_Enum_New is\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n+      pragma Assert (Pos in IndexesT'Range);\n+      pragma Assert (Pos + 1 in IndexesT'Range);\n+\n       Start : constant Natural := Natural (IndexesT (Pos));\n       Next  : constant Natural := Natural (IndexesT (Pos + 1));\n \n@@ -102,6 +105,9 @@ package body System.Img_Enum_New is\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n+      pragma Assert (Pos in IndexesT'Range);\n+      pragma Assert (Pos + 1 in IndexesT'Range);\n+\n       Start : constant Natural := Natural (IndexesT (Pos));\n       Next  : constant Natural := Natural (IndexesT (Pos + 1));\n \n@@ -143,6 +149,9 @@ package body System.Img_Enum_New is\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n+      pragma Assert (Pos in IndexesT'Range);\n+      pragma Assert (Pos + 1 in IndexesT'Range);\n+\n       Start : constant Natural := Natural (IndexesT (Pos));\n       Next  : constant Natural := Natural (IndexesT (Pos + 1));\n "}, {"sha": "45d0ae59b7bf11d2b1d95be460475d8c7d49208c", "filename": "gcc/ada/libgnat/s-imgrea.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4194d74faee24c9bded05ba1b523e52f8b40bf0/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4194d74faee24c9bded05ba1b523e52f8b40bf0/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb?ref=d4194d74faee24c9bded05ba1b523e52f8b40bf0", "patch": "@@ -376,17 +376,20 @@ package body System.Img_Real is\n          --  be significantly more efficient than the Long_Long_Unsigned one.\n \n          if X < Powten (Unsdigs) then\n+            pragma Assert (X in 0.0 .. Long_Long_Float (Unsigned'Last));\n             Ndigs := 0;\n             Set_Image_Unsigned\n               (Unsigned (Long_Long_Float'Truncation (X)),\n                Digs, Ndigs);\n-            pragma Annotate (CodePeer, False_Positive, \"overflow check\",\n-                             \"The X integer part fits in unsigned\");\n \n          --  But if we want more digits than fit in Unsigned, we have to use\n          --  the Long_Long_Unsigned routine after all.\n \n          else\n+            pragma Assert (X < Powten (Maxdigs));\n+            pragma Assert\n+              (X in 0.0 .. Long_Long_Float (Long_Long_Unsigned'Last));\n+\n             Ndigs := 0;\n             Set_Image_Long_Long_Unsigned\n               (Long_Long_Unsigned (Long_Long_Float'Truncation (X)),"}]}