{"sha": "d629ab44961886947b9ba07b8f26240868904457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyOWFiNDQ5NjE4ODY5NDdiOWJhMDdiOGYyNjI0MDg2ODkwNDQ1Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-21T11:32:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-21T11:32:39Z"}, "message": "re PR tree-optimization/81303 (410.bwaves regression caused by r249919)\n\n2017-07-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81303\n\t* tree-vect-data-refs.c (vect_get_peeling_costs_all_drs): Pass\n\tin datarefs vector.  Allow NULL dr0 for no peeling cost estimate.\n\t(vect_peeling_hash_get_lowest_cost): Adjust.\n\t(vect_enhance_data_refs_alignment): Likewise.  Use\n\tvect_get_peeling_costs_all_drs to compute the penalty for no\n\tpeeling to match up costs.\n\nFrom-SVN: r250424", "tree": {"sha": "a677535866d03e80eab41f1188d7a4850b9d20fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a677535866d03e80eab41f1188d7a4850b9d20fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d629ab44961886947b9ba07b8f26240868904457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d629ab44961886947b9ba07b8f26240868904457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d629ab44961886947b9ba07b8f26240868904457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d629ab44961886947b9ba07b8f26240868904457/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9af7f3731b0ddffb3aa75b78a0ede411d36a3b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af7f3731b0ddffb3aa75b78a0ede411d36a3b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af7f3731b0ddffb3aa75b78a0ede411d36a3b09"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "96f89f4eb76d87d4b9e7e4ab136adab074dc639f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d629ab44961886947b9ba07b8f26240868904457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d629ab44961886947b9ba07b8f26240868904457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d629ab44961886947b9ba07b8f26240868904457", "patch": "@@ -1,4 +1,14 @@\n-2017-06-21  Richard Biener  <rguenther@suse.de>\n+2017-07-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81303\n+\t* tree-vect-data-refs.c (vect_get_peeling_costs_all_drs): Pass\n+\tin datarefs vector.  Allow NULL dr0 for no peeling cost estimate.\n+\t(vect_peeling_hash_get_lowest_cost): Adjust.\n+\t(vect_enhance_data_refs_alignment): Likewise.  Use\n+\tvect_get_peeling_costs_all_drs to compute the penalty for no\n+\tpeeling to match up costs.\n+\n+2017-07-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81500\n \t* tree-vect-loop.c (vect_is_simple_reduction): Properly fail if"}, {"sha": "177729006e87b5896e015b274638d418bae36613", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d629ab44961886947b9ba07b8f26240868904457/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d629ab44961886947b9ba07b8f26240868904457/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=d629ab44961886947b9ba07b8f26240868904457", "patch": "@@ -1159,25 +1159,21 @@ vect_peeling_hash_get_most_frequent (_vect_peel_info **slot,\n    misalignment will be zero after peeling.  */\n \n static void\n-vect_get_peeling_costs_all_drs (struct data_reference *dr0,\n+vect_get_peeling_costs_all_drs (vec<data_reference_p> datarefs,\n+\t\t\t\tstruct data_reference *dr0,\n \t\t\t\tunsigned int *inside_cost,\n \t\t\t\tunsigned int *outside_cost,\n \t\t\t\tstmt_vector_for_cost *body_cost_vec,\n \t\t\t\tunsigned int npeel,\n \t\t\t\tbool unknown_misalignment)\n {\n-  gimple *stmt = DR_STMT (dr0);\n-  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n-  vec<data_reference_p> datarefs = LOOP_VINFO_DATAREFS (loop_vinfo);\n-\n   unsigned i;\n   data_reference *dr;\n \n   FOR_EACH_VEC_ELT (datarefs, i, dr)\n     {\n-      stmt = DR_STMT (dr);\n-      stmt_info = vinfo_for_stmt (stmt);\n+      gimple *stmt = DR_STMT (dr);\n+      stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n       /* For interleaving, only the alignment of the first access\n          matters.  */\n       if (STMT_VINFO_GROUPED_ACCESS (stmt_info)\n@@ -1192,7 +1188,9 @@ vect_get_peeling_costs_all_drs (struct data_reference *dr0,\n \n       int save_misalignment;\n       save_misalignment = DR_MISALIGNMENT (dr);\n-      if (unknown_misalignment && dr == dr0)\n+      if (npeel == 0)\n+\t;\n+      else if (unknown_misalignment && dr == dr0)\n \tSET_DR_MISALIGNMENT (dr, 0);\n       else\n \tvect_update_misalignment_for_peel (dr, dr0, npeel);\n@@ -1222,7 +1220,8 @@ vect_peeling_hash_get_lowest_cost (_vect_peel_info **slot,\n   body_cost_vec.create (2);\n   epilogue_cost_vec.create (2);\n \n-  vect_get_peeling_costs_all_drs (elem->dr, &inside_cost, &outside_cost,\n+  vect_get_peeling_costs_all_drs (LOOP_VINFO_DATAREFS (loop_vinfo),\n+\t\t\t\t  elem->dr, &inside_cost, &outside_cost,\n \t\t\t\t  &body_cost_vec, elem->npeel, false);\n \n   body_cost_vec.release ();\n@@ -1651,7 +1650,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \n       stmt_vector_for_cost dummy;\n       dummy.create (2);\n-      vect_get_peeling_costs_all_drs (dr0,\n+      vect_get_peeling_costs_all_drs (datarefs, dr0,\n \t\t\t\t      &load_inside_cost,\n \t\t\t\t      &load_outside_cost,\n \t\t\t\t      &dummy, vf / 2, true);\n@@ -1660,7 +1659,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n       if (first_store)\n \t{\n \t  dummy.create (2);\n-\t  vect_get_peeling_costs_all_drs (first_store,\n+\t  vect_get_peeling_costs_all_drs (datarefs, first_store,\n \t\t\t\t\t  &store_inside_cost,\n \t\t\t\t\t  &store_outside_cost,\n \t\t\t\t\t  &dummy, vf / 2, true);\n@@ -1744,18 +1743,15 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n     dr0 = unsupportable_dr;\n   else if (do_peeling)\n     {\n-      /* Calculate the penalty for no peeling, i.e. leaving everything\n-\t unaligned.\n-\t TODO: Adapt vect_get_peeling_costs_all_drs and use here.\n+      /* Calculate the penalty for no peeling, i.e. leaving everything as-is.\n \t TODO: Use nopeel_outside_cost or get rid of it?  */\n       unsigned nopeel_inside_cost = 0;\n       unsigned nopeel_outside_cost = 0;\n \n       stmt_vector_for_cost dummy;\n       dummy.create (2);\n-      FOR_EACH_VEC_ELT (datarefs, i, dr)\n-\tvect_get_data_access_cost (dr, &nopeel_inside_cost,\n-\t\t\t\t   &nopeel_outside_cost, &dummy);\n+      vect_get_peeling_costs_all_drs (datarefs, NULL, &nopeel_inside_cost,\n+\t\t\t\t      &nopeel_outside_cost, &dummy, 0, false);\n       dummy.release ();\n \n       /* Add epilogue costs.  As we do not peel for alignment here, no prologue"}]}