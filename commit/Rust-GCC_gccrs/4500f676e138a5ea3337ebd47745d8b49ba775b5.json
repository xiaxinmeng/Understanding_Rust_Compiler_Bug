{"sha": "4500f676e138a5ea3337ebd47745d8b49ba775b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUwMGY2NzZlMTM4YTVlYTMzMzdlYmQ0Nzc0NWQ4YjQ5YmE3NzViNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-08-23T21:04:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-08-23T21:04:40Z"}, "message": "compiler: don't export embedded builtins.\n\nThe panic in test/fixedbugs/bug461.go was caused by the fact that\nreflect expects unexported fields in a struct to have a valid\npackage path. If a struct field is an embedded built-in type, it is\nnow given the package name of the currently compiling package, so it\nremains unexported for purposes of reflect.\n\nFixed Issue 25.\n\nFrom-SVN: r201951", "tree": {"sha": "ad0d91464e75c09a960cd3be16de2f242062c4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad0d91464e75c09a960cd3be16de2f242062c4d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4500f676e138a5ea3337ebd47745d8b49ba775b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4500f676e138a5ea3337ebd47745d8b49ba775b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4500f676e138a5ea3337ebd47745d8b49ba775b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4500f676e138a5ea3337ebd47745d8b49ba775b5/comments", "author": null, "committer": null, "parents": [{"sha": "009e53539dc7e6d0bf5c7084a6c8cae25b4f4c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009e53539dc7e6d0bf5c7084a6c8cae25b4f4c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009e53539dc7e6d0bf5c7084a6c8cae25b4f4c68"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "b32c0587e6cdac181126775b56cfd8bcf97a13e1", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4500f676e138a5ea3337ebd47745d8b49ba775b5/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4500f676e138a5ea3337ebd47745d8b49ba775b5/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=4500f676e138a5ea3337ebd47745d8b49ba775b5", "patch": "@@ -4221,6 +4221,22 @@ Struct_field::is_field_name(const std::string& name) const\n     }\n }\n \n+// Return whether this field is an embedded built-in type.\n+\n+bool\n+Struct_field::is_embedded_builtin(Gogo* gogo) const\n+{\n+  const std::string& name(this->field_name());\n+  // We know that a field is an embedded type if it is anonymous.\n+  // We can decide if it is a built-in type by checking to see if it is\n+  // registered globally under the field's name.\n+  // This allows us to distinguish between embedded built-in types and\n+  // embedded types that are aliases to built-in types.\n+  return (this->is_anonymous()\n+          && !Gogo::is_hidden_name(name)\n+          && gogo->lookup_global(name.c_str()) != NULL);\n+}\n+\n // Class Struct_type.\n \n // A hash table used to find identical unnamed structs so that they\n@@ -4835,11 +4851,16 @@ Struct_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n \n       ++q;\n       go_assert(q->is_field_name(\"pkgPath\"));\n-      if (!Gogo::is_hidden_name(pf->field_name()))\n-\tfvals->push_back(Expression::make_nil(bloc));\n+      bool is_embedded_builtin = pf->is_embedded_builtin(gogo);\n+      if (!Gogo::is_hidden_name(pf->field_name()) && !is_embedded_builtin)\n+        fvals->push_back(Expression::make_nil(bloc));\n       else\n \t{\n-\t  std::string n = Gogo::hidden_name_pkgpath(pf->field_name());\n+\t  std::string n;\n+          if (is_embedded_builtin)\n+            n = gogo->package_name();\n+          else\n+            n = Gogo::hidden_name_pkgpath(pf->field_name());\n \t  Expression* s = Expression::make_string(n, bloc);\n \t  fvals->push_back(Expression::make_unary(OPERATOR_AND, s, bloc));\n \t}"}, {"sha": "8bc022eb8243398fa7db71dfef12ac9d0b6ddc1c", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4500f676e138a5ea3337ebd47745d8b49ba775b5/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4500f676e138a5ea3337ebd47745d8b49ba775b5/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=4500f676e138a5ea3337ebd47745d8b49ba775b5", "patch": "@@ -1926,6 +1926,10 @@ class Struct_field\n   bool\n   is_field_name(const std::string& name) const;\n \n+  // Return whether this struct field is an embedded built-in type.\n+  bool\n+  is_embedded_builtin(Gogo*) const;\n+\n   // The field type.\n   Type*\n   type() const"}]}