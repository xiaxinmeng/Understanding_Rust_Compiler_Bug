{"sha": "bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRkMWIxZjU1NTI5ZGEwMGI4NjdlZjA1YTUzYTA4ZmJmYzNkMWMyZQ==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-01-14T19:25:33Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-01-14T19:25:33Z"}, "message": "PR fortran/93340 - fix missed substring simplifications\n\nSubstrings were not reduced early enough for use in initializations,\nsuch as DATA statements.  Add an early simplification for substrings\nwith constant starting and ending points.\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.h (gfc_resolve_substring): Add prototype.\n\t* primary.c (match_string_constant): Simplify substrings with\n\tconstant starting and ending points.\n\t* resolve.c: Rename resolve_substring to gfc_resolve_substring.\n\t(gfc_resolve_ref): Use renamed function gfc_resolve_substring.\n\ngcc/testsuite/ChangeLog:\n\n\t* substr_10.f90: New test.\n\t* substr_9.f90: New test.", "tree": {"sha": "f17fdbfa2b6eee1ecd66faa80e0292f69fef5c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f17fdbfa2b6eee1ecd66faa80e0292f69fef5c2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3651c1b5c9c0960e50f00ca5b59d144b8a586b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3651c1b5c9c0960e50f00ca5b59d144b8a586b5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3651c1b5c9c0960e50f00ca5b59d144b8a586b5d"}], "stats": {"total": 101, "additions": 98, "deletions": 3}, "files": [{"sha": "4dd72b620c97631afb78acf076d665c48d4b65b0", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "patch": "@@ -3467,6 +3467,7 @@ bool find_forall_index (gfc_expr *, gfc_symbol *, int);\n bool gfc_resolve_index (gfc_expr *, int);\n bool gfc_resolve_dim_arg (gfc_expr *);\n bool gfc_is_formal_arg (void);\n+bool gfc_resolve_substring (gfc_ref *, bool *);\n void gfc_resolve_substring_charlen (gfc_expr *);\n match gfc_iso_c_sub_interface(gfc_code *, gfc_symbol *);\n gfc_expr *gfc_expr_to_initialize (gfc_expr *);"}, {"sha": "d0610d02ebdc03ee9262eea325837375a8460217", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "patch": "@@ -1190,6 +1190,61 @@ match_string_constant (gfc_expr **result)\n   if (match_substring (NULL, 0, &e->ref, false) != MATCH_NO)\n     e->expr_type = EXPR_SUBSTRING;\n \n+  /* Substrings with constant starting and ending points are eligible as\n+     designators (F2018, section 9.1).  Simplify substrings to make them usable\n+     e.g. in data statements.  */\n+  if (e->expr_type == EXPR_SUBSTRING\n+      && e->ref && e->ref->type == REF_SUBSTRING\n+      && e->ref->u.ss.start->expr_type == EXPR_CONSTANT\n+      && (e->ref->u.ss.end == NULL\n+\t  || e->ref->u.ss.end->expr_type == EXPR_CONSTANT))\n+    {\n+      gfc_expr *res;\n+      ptrdiff_t istart, iend;\n+      size_t length;\n+      bool equal_length = false;\n+\n+      /* Basic checks on substring starting and ending indices.  */\n+      if (!gfc_resolve_substring (e->ref, &equal_length))\n+\treturn MATCH_ERROR;\n+\n+      length = e->value.character.length;\n+      istart = gfc_mpz_get_hwi (e->ref->u.ss.start->value.integer);\n+      if (e->ref->u.ss.end == NULL)\n+\tiend = length;\n+      else\n+\tiend = gfc_mpz_get_hwi (e->ref->u.ss.end->value.integer);\n+\n+      if (istart <= iend)\n+\t{\n+\t  if (istart < 1)\n+\t    {\n+\t      gfc_error (\"Substring start index (%ld) at %L below 1\",\n+\t\t\t (long) istart, &e->ref->u.ss.start->where);\n+\t      return MATCH_ERROR;\n+\t    }\n+\t  if (iend > (ssize_t) length)\n+\t    {\n+\t      gfc_error (\"Substring end index (%ld) at %L exceeds string \"\n+\t\t\t \"length\", (long) iend, &e->ref->u.ss.end->where);\n+\t      return MATCH_ERROR;\n+\t    }\n+\t  length = iend - istart + 1;\n+\t}\n+      else\n+\tlength = 0;\n+\n+      res = gfc_get_constant_expr (BT_CHARACTER, e->ts.kind, &e->where);\n+      res->value.character.string = gfc_get_wide_string (length + 1);\n+      res->value.character.length = length;\n+      if (length > 0)\n+\tmemcpy (res->value.character.string,\n+\t\t&e->value.character.string[istart - 1],\n+\t\tlength * sizeof (gfc_char_t));\n+      res->value.character.string[length] = '\\0';\n+      e = res;\n+    }\n+\n   *result = e;\n \n   return MATCH_YES;"}, {"sha": "bb069efef032be2328f02edcebbf363349e6f543", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "patch": "@@ -5068,8 +5068,8 @@ resolve_array_ref (gfc_array_ref *ar)\n }\n \n \n-static bool\n-resolve_substring (gfc_ref *ref, bool *equal_length)\n+bool\n+gfc_resolve_substring (gfc_ref *ref, bool *equal_length)\n {\n   int k = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);\n \n@@ -5277,7 +5277,7 @@ gfc_resolve_ref (gfc_expr *expr)\n \n       case REF_SUBSTRING:\n \tequal_length = false;\n-\tif (!resolve_substring (*prev, &equal_length))\n+\tif (!gfc_resolve_substring (*prev, &equal_length))\n \t  return false;\n \n \tif (expr->expr_type != EXPR_SUBSTRING && equal_length)"}, {"sha": "918ca8af162eb4ac855c0c7fd6afa413ad822dea", "filename": "gcc/testsuite/substr_10.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ftestsuite%2Fsubstr_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ftestsuite%2Fsubstr_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fsubstr_10.f90?ref=bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! PR93340 - test error handling of substring simplification\n+\n+subroutine p\n+  integer,parameter :: k = len ('a'(:0))\n+  integer,parameter :: m = len ('a'(0:)) ! { dg-error \"Substring start index\" }\n+  call foo ('bcd'(-8:-9))\n+  call foo ('bcd'(-9:-8)) ! { dg-error \"Substring start index\" }\n+  call foo ('bcd'(:12))   ! { dg-error \"Substring end index\" }\n+  call foo ('bcd'(-12:))  ! { dg-error \"Substring start index\" }\n+end"}, {"sha": "73152d6627f623ed35db2cf3c09d1e4cdc8bd9e2", "filename": "gcc/testsuite/substr_9.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ftestsuite%2Fsubstr_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e/gcc%2Ftestsuite%2Fsubstr_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fsubstr_9.f90?ref=bdd1b1f55529da00b867ef05a53a08fbfc3d1c2e", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu -fdump-tree-original\" }\n+! PR93340 - issues with substrings in initializers\n+\n+program p\n+  implicit none\n+  integer, parameter :: m = 1\n+  character b(2) /'a', 'b'   (1:1)/\n+  character c(2) /'a', 'bc'  (1:1)/\n+  character d(2) /'a', 'bxyz'(m:m)/\n+  character e(2)\n+  character f(2)\n+  data e /'a', 'bxyz'( :1)/\n+  data f /'a', 'xyzb'(4:4)/\n+  character :: g(2) = [ 'a', 'b' (1:1) ]\n+  character :: h(2) = [ 'a', 'bc'(1:1) ]\n+  character :: k(2) = [ 'a', 'bc'(m:1) ]\n+  if (b(2) /= \"b\") stop 1\n+  if (c(2) /= \"b\") stop 2\n+  if (d(2) /= \"b\") stop 3\n+  if (e(2) /= \"b\") stop 4\n+  if (f(2) /= \"b\") stop 5\n+  if (g(2) /= \"b\") stop 6\n+  if (h(2) /= \"b\") stop 7\n+  if (k(2) /= \"b\") stop 8\n+end\n+\n+! { dg-final { scan-tree-dump-times \"xyz\" 0 \"original\" } }"}]}