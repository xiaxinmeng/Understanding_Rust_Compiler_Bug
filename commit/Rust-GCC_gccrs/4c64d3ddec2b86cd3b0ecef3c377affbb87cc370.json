{"sha": "4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM2NGQzZGRlYzJiODZjZDNiMGVjZWYzYzM3N2FmZmJiODdjYzM3MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-21T15:55:53Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-21T15:55:53Z"}, "message": "re PR target/39256 (__m256 isn't returned in ymm0 in 32bit)\n\ngcc/\n\n2008-02-21  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39256\n\t* config/i386/i386.c (type_natural_mode): Remove an extra\n\tspace in the warning message.\n\t(function_value_32): Handle 32-byte vector modes.\n\t(return_in_memory_32): Likewise.\n\ngcc/testsuite/\n\n2008-02-21  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/39256\n\t* gcc.target/i386/abi-2.c: New.\n\nFrom-SVN: r144355", "tree": {"sha": "f1eb5758efb9476dedea3465aa55b25a0cdb7e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1eb5758efb9476dedea3465aa55b25a0cdb7e92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/comments", "author": null, "committer": null, "parents": [{"sha": "b46513275fb47dc41e5481daebeb6eac24af2f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46513275fb47dc41e5481daebeb6eac24af2f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46513275fb47dc41e5481daebeb6eac24af2f4c"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "c7e1c2fbdfa879fc5d730f4ebcac59299b717c31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "patch": "@@ -1,3 +1,11 @@\n+2008-02-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39256\n+\t* config/i386/i386.c (type_natural_mode): Remove an extra\n+\tspace in the warning message.\n+\t(function_value_32): Handle 32-byte vector modes.\n+\t(return_in_memory_32): Likewise.\n+\n 2009-02-21  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* loop-iv.c (truncate_value): New function."}, {"sha": "d247d07be03abfe00df28df664f5c3077ef17994", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "patch": "@@ -4759,7 +4759,7 @@ type_natural_mode (const_tree type, CUMULATIVE_ARGS *cum)\n \t\t      {\n \t\t\twarnedavx = true;\n \t\t\twarning (0, \"AVX vector argument without AVX \"\n-\t\t\t\t \" enabled changes the ABI\");\n+\t\t\t\t \"enabled changes the ABI\");\n \t\t      }\n \t\t    return TYPE_MODE (type);\n \t\t  }\n@@ -6019,6 +6019,11 @@ function_value_32 (enum machine_mode orig_mode, enum machine_mode mode,\n \t   || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n     regno = TARGET_SSE ? FIRST_SSE_REG : 0;\n \n+  /* 32-byte vector modes in %ymm0.   */\n+  else if (mode == OImode\n+\t   || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 32))\n+    regno = TARGET_AVX ? FIRST_SSE_REG : 0;\n+\n   /* Floating point return values in %st(0) (unless -mno-fp-ret-in-387).  */\n   else if (X87_FLOAT_MODE_P (mode) && TARGET_FLOAT_RETURNS_IN_80387)\n     regno = FIRST_FLOAT_REG;\n@@ -6158,7 +6163,7 @@ return_in_memory_32 (const_tree type, enum machine_mode mode)\n   if (MS_AGGREGATE_RETURN && AGGREGATE_TYPE_P (type) && size <= 8)\n     return 0;\n \n-  if (VECTOR_MODE_P (mode) || mode == TImode)\n+  if (VECTOR_MODE_P (mode) || mode == TImode || mode == OImode)\n     {\n       /* User-created vectors small enough to fit in EAX.  */\n       if (size < 8)\n@@ -6172,6 +6177,10 @@ return_in_memory_32 (const_tree type, enum machine_mode mode)\n       /* SSE values are returned in XMM0, except when it doesn't exist.  */\n       if (size == 16)\n \treturn (TARGET_SSE ? 0 : 1);\n+\n+      /* AVX values are returned in YMM0, except when it doesn't exist.  */\n+      if (size == 32)\n+\treturn TARGET_AVX ? 0 : 1;\n     }\n \n   if (mode == XFmode)"}, {"sha": "160b9f69b69df3f5a2b5a71fe96bb925c3b541f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "patch": "@@ -1,3 +1,8 @@\n+2008-02-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/39256\n+\t* gcc.target/i386/abi-2.c: New.\n+\n 2009-02-21  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.c-torture/execute/pr39228.x: New."}, {"sha": "5ed6b4a56dd5f9c3380a38a36de7117e20bf7b99", "filename": "gcc/testsuite/gcc.target/i386/abi-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c64d3ddec2b86cd3b0ecef3c377affbb87cc370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c?ref=4c64d3ddec2b86cd3b0ecef3c377affbb87cc370", "patch": "@@ -0,0 +1,8 @@\n+/* Make certain that we pass __m256i in the correct register for AVX.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mavx\" } */\n+\n+typedef long long __m256i __attribute__ ((__vector_size__ (32)));\n+__m256i foo (void) { return (__m256i){ 1, 2, 3, 4 }; }\n+\n+/* { dg-final { scan-assembler-times \"ymm0\" 1 } } */"}]}