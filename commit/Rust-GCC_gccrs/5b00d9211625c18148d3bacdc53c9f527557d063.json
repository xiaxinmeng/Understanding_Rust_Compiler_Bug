{"sha": "5b00d9211625c18148d3bacdc53c9f527557d063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwMGQ5MjExNjI1YzE4MTQ4ZDNiYWNkYzUzYzlmNTI3NTU3ZDA2Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-30T12:54:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-30T12:54:23Z"}, "message": "fold-const.c (fold_binary_loc): Move ~x & ~y -> ~(x | y) and ~x | ~y -> ~(x & y)...\n\n2015-06-30  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_binary_loc): Move ~x & ~y -> ~(x | y) and\n\t~x | ~y -> ~(x & y), (x & CST) ^ (x & CST2) -> (x & CST) | (x & CST2),\n\t(X | Y) ^ X -> Y & ~ X, ~X ^ ~Y to X ^ Y and ~X ^ C to X ^ ~C ...\n\t* match.pd: ... to patterns here.\n\nFrom-SVN: r225184", "tree": {"sha": "7e4f56c61f58f687a011e0281c78065412309004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4f56c61f58f687a011e0281c78065412309004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b00d9211625c18148d3bacdc53c9f527557d063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b00d9211625c18148d3bacdc53c9f527557d063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b00d9211625c18148d3bacdc53c9f527557d063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b00d9211625c18148d3bacdc53c9f527557d063/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d62808554d8dbbedb11a2d51a75d618f396c1198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62808554d8dbbedb11a2d51a75d618f396c1198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62808554d8dbbedb11a2d51a75d618f396c1198"}], "stats": {"total": 167, "additions": 48, "deletions": 119}, "files": [{"sha": "8ac39dc1930d7169c79baf2e42fba43b10d7d8d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b00d9211625c18148d3bacdc53c9f527557d063/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b00d9211625c18148d3bacdc53c9f527557d063/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b00d9211625c18148d3bacdc53c9f527557d063", "patch": "@@ -1,3 +1,10 @@\n+2015-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_binary_loc): Move ~x & ~y -> ~(x | y) and\n+\t~x | ~y -> ~(x & y), (x & CST) ^ (x & CST2) -> (x & CST) | (x & CST2),\n+\t(X | Y) ^ X -> Y & ~ X, ~X ^ ~Y to X ^ Y and ~X ^ C to X ^ ~C ...\n+\t* match.pd: ... to patterns here.\n+\n 2015-06-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66704"}, {"sha": "7e30002122037e5d8914fc457bdb6d27febabdd6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b00d9211625c18148d3bacdc53c9f527557d063/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b00d9211625c18148d3bacdc53c9f527557d063/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5b00d9211625c18148d3bacdc53c9f527557d063", "patch": "@@ -10974,24 +10974,6 @@ fold_binary_loc (location_t loc,\n       if (t1 != NULL_TREE)\n \treturn t1;\n \n-      /* Convert (or (not arg0) (not arg1)) to (not (and (arg0) (arg1))).\n-\n-\t This results in more efficient code for machines without a NAND\n-\t instruction.  Combine will canonicalize to the first form\n-\t which will allow use of NAND instructions provided by the\n-\t backend if they exist.  */\n-      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t  && TREE_CODE (arg1) == BIT_NOT_EXPR)\n-\t{\n-\t  return\n-\t    fold_build1_loc (loc, BIT_NOT_EXPR, type,\n-\t\t\t build2 (BIT_AND_EXPR, type,\n-\t\t\t\t fold_convert_loc (loc, type,\n-\t\t\t\t\t\t   TREE_OPERAND (arg0, 0)),\n-\t\t\t\t fold_convert_loc (loc, type,\n-\t\t\t\t\t\t   TREE_OPERAND (arg1, 0))));\n-\t}\n-\n       /* See if this can be simplified into a rotate first.  If that\n \t is unsuccessful continue in the association code.  */\n       goto bit_rotate;\n@@ -11015,90 +10997,6 @@ fold_binary_loc (location_t loc,\n \t  return omit_one_operand_loc (loc, type, t1, arg0);\n \t}\n \n-      /* If we are XORing two BIT_AND_EXPR's, both of which are and'ing\n-         with a constant, and the two constants have no bits in common,\n-\t we should treat this as a BIT_IOR_EXPR since this may produce more\n-\t simplifications.  */\n-      if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && TREE_CODE (arg1) == BIT_AND_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n-\t  && TREE_CODE (TREE_OPERAND (arg1, 1)) == INTEGER_CST\n-\t  && wi::bit_and (TREE_OPERAND (arg0, 1),\n-\t\t\t  TREE_OPERAND (arg1, 1)) == 0)\n-\t{\n-\t  code = BIT_IOR_EXPR;\n-\t  goto bit_ior;\n-\t}\n-\n-      /* (X | Y) ^ X -> Y & ~ X*/\n-      if (TREE_CODE (arg0) == BIT_IOR_EXPR\n-          && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n-        {\n-\t  tree t2 = TREE_OPERAND (arg0, 1);\n-\t  t1 = fold_build1_loc (loc, BIT_NOT_EXPR, TREE_TYPE (arg1),\n-\t\t\t    arg1);\n-\t  t1 = fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type, t2),\n-\t\t\t    fold_convert_loc (loc, type, t1));\n-\t  return t1;\n-\t}\n-\n-      /* (Y | X) ^ X -> Y & ~ X*/\n-      if (TREE_CODE (arg0) == BIT_IOR_EXPR\n-          && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n-        {\n-\t  tree t2 = TREE_OPERAND (arg0, 0);\n-\t  t1 = fold_build1_loc (loc, BIT_NOT_EXPR, TREE_TYPE (arg1),\n-\t\t\t    arg1);\n-\t  t1 = fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type, t2),\n-\t\t\t    fold_convert_loc (loc, type, t1));\n-\t  return t1;\n-\t}\n-\n-      /* X ^ (X | Y) -> Y & ~ X*/\n-      if (TREE_CODE (arg1) == BIT_IOR_EXPR\n-          && operand_equal_p (TREE_OPERAND (arg1, 0), arg0, 0))\n-        {\n-\t  tree t2 = TREE_OPERAND (arg1, 1);\n-\t  t1 = fold_build1_loc (loc, BIT_NOT_EXPR, TREE_TYPE (arg0),\n-\t\t\t    arg0);\n-\t  t1 = fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type, t2),\n-\t\t\t    fold_convert_loc (loc, type, t1));\n-\t  return t1;\n-\t}\n-\n-      /* X ^ (Y | X) -> Y & ~ X*/\n-      if (TREE_CODE (arg1) == BIT_IOR_EXPR\n-          && operand_equal_p (TREE_OPERAND (arg1, 1), arg0, 0))\n-        {\n-\t  tree t2 = TREE_OPERAND (arg1, 0);\n-\t  t1 = fold_build1_loc (loc, BIT_NOT_EXPR, TREE_TYPE (arg0),\n-\t\t\t    arg0);\n-\t  t1 = fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type, t2),\n-\t\t\t    fold_convert_loc (loc, type, t1));\n-\t  return t1;\n-\t}\n-\n-      /* Convert ~X ^ ~Y to X ^ Y.  */\n-      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t  && TREE_CODE (arg1) == BIT_NOT_EXPR)\n-\treturn fold_build2_loc (loc, code, type,\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg0, 0)),\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg1, 0)));\n-\n-      /* Convert ~X ^ C to X ^ ~C.  */\n-      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t  && TREE_CODE (arg1) == INTEGER_CST)\n-\treturn fold_build2_loc (loc, code, type,\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg0, 0)),\n-\t\t\t    fold_build1_loc (loc, BIT_NOT_EXPR, type, arg1));\n-\n       /* Fold (X & 1) ^ 1 as (X & 1) == 0.  */\n       if (TREE_CODE (arg0) == BIT_AND_EXPR\n \t  && INTEGRAL_TYPE_P (type)\n@@ -11410,23 +11308,6 @@ fold_binary_loc (location_t loc,\n \t      fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n \t}\n \n-      /* Convert (and (not arg0) (not arg1)) to (not (or (arg0) (arg1))).\n-\n-\t This results in more efficient code for machines without a NOR\n-\t instruction.  Combine will canonicalize to the first form\n-\t which will allow use of NOR instructions provided by the\n-\t backend if they exist.  */\n-      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t  && TREE_CODE (arg1) == BIT_NOT_EXPR)\n-\t{\n-\t  return fold_build1_loc (loc, BIT_NOT_EXPR, type,\n-\t\t\t      build2 (BIT_IOR_EXPR, type,\n-\t\t\t\t      fold_convert_loc (loc, type,\n-\t\t\t\t\t\t\tTREE_OPERAND (arg0, 0)),\n-\t\t\t\t      fold_convert_loc (loc, type,\n-\t\t\t\t\t\t\tTREE_OPERAND (arg1, 0))));\n-\t}\n-\n       /* If arg0 is derived from the address of an object or function, we may\n \t be able to fold this expression using the object or function's\n \t alignment.  */"}, {"sha": "682784b094b5e7b45b4bd6fe5396ef3af0888b74", "filename": "gcc/match.pd", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b00d9211625c18148d3bacdc53c9f527557d063/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b00d9211625c18148d3bacdc53c9f527557d063/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5b00d9211625c18148d3bacdc53c9f527557d063", "patch": "@@ -389,6 +389,47 @@ along with GCC; see the file COPYING3.  If not see\n  (bit_and:c (bit_ior:c @0 @1) (bit_xor:c @1 (bit_not @0)))\n  (bit_and @0 @1))\n \n+/* ~x & ~y -> ~(x | y)\n+   ~x | ~y -> ~(x & y) */\n+(for op (bit_and bit_ior)\n+     rop (bit_ior bit_and)\n+ (simplify\n+  (op (convert1? (bit_not @0)) (convert2? (bit_not @1)))\n+  (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n+       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+   (bit_not (rop (convert @0) (convert @1))))))\n+\n+/* If we are XORing two BIT_AND_EXPR's, both of which are and'ing\n+   with a constant, and the two constants have no bits in common,\n+   we should treat this as a BIT_IOR_EXPR since this may produce more\n+   simplifications.  */\n+(simplify\n+ (bit_xor (convert1? (bit_and@4 @0 INTEGER_CST@1))\n+          (convert2? (bit_and@5 @2 INTEGER_CST@3)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n+      && tree_nop_conversion_p (type, TREE_TYPE (@2))\n+      && wi::bit_and (@1, @3) == 0)\n+  (bit_ior (convert @4) (convert @5))))\n+\n+/* (X | Y) ^ X -> Y & ~ X*/\n+(simplify\n+ (bit_xor:c (convert? (bit_ior:c @0 @1)) (convert? @0))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+  (convert (bit_and @1 (bit_not @0)))))\n+\n+/* Convert ~X ^ ~Y to X ^ Y.  */\n+(simplify\n+ (bit_xor (convert1? (bit_not @0)) (convert2? (bit_not @1)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n+      && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+  (bit_xor (convert @0) (convert @1))))\n+\n+/* Convert ~X ^ C to X ^ ~C.  */\n+(simplify\n+ (bit_xor (convert? (bit_not @0)) INTEGER_CST@1)\n+ (bit_xor (convert @0) (bit_not @1)))\n+\n+\n (simplify\n  (abs (abs@1 @0))\n  @1)"}]}