{"sha": "c15aa46cca0649b68613d3292cf71c7cc57ef78f", "node_id": "C_kwDOANBUbNoAKGMxNWFhNDZjY2EwNjQ5YjY4NjEzZDMyOTJjZjcxYzdjYzU3ZWY3OGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-08T19:36:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-08T23:41:03Z"}, "message": "libstdc++: Fix undefined shift when _Atomic_word is 64-bit\n\nThe check for _Atomic_word being 32-bit is just a normal runtime\ncondition for C++11 and C++14, because it doesn't use if-constexpr. That\nmeans the 1LL << (CHAR_BIT * sizeof(_Atomic_word)) expression expands to\n1LL << 64 on Solaris, which is ill-formed.\n\nThis adds another indirection so that the shift width is zero if the\ncode is unreachable.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/shared_ptr_base.h (_Sp_counted_base::_M_release()):\n\tMake shift width conditional on __double_word condition.", "tree": {"sha": "fa11127d7fef8066bda5f640cbd3ffda7c2c52cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa11127d7fef8066bda5f640cbd3ffda7c2c52cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c15aa46cca0649b68613d3292cf71c7cc57ef78f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15aa46cca0649b68613d3292cf71c7cc57ef78f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c15aa46cca0649b68613d3292cf71c7cc57ef78f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c15aa46cca0649b68613d3292cf71c7cc57ef78f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b77968a70537429b4f548f90c369d26e6b6943cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77968a70537429b4f548f90c369d26e6b6943cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77968a70537429b4f548f90c369d26e6b6943cc"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "f315d8f354fa3c946f89fad99c6841535ddca019", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c15aa46cca0649b68613d3292cf71c7cc57ef78f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c15aa46cca0649b68613d3292cf71c7cc57ef78f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=c15aa46cca0649b68613d3292cf71c7cc57ef78f", "patch": "@@ -325,8 +325,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr bool __aligned = __alignof(long long) <= alignof(void*);\n       if _GLIBCXX17_CONSTEXPR (__lock_free && __double_word && __aligned)\n \t{\n-\t  constexpr long long __unique_ref\n-\t    = 1LL + (1LL << (__CHAR_BIT__ * sizeof(_Atomic_word)));\n+\t  constexpr int __wordbits = __CHAR_BIT__ * sizeof(_Atomic_word);\n+\t  constexpr int __shiftbits = __double_word ? __wordbits : 0;\n+\t  constexpr long long __unique_ref = 1LL + (1LL << __shiftbits);\n \t  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);\n \n \t  _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);"}]}