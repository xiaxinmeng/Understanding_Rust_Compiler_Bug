{"sha": "6dba011330935d77386e99066fdb14b011a19ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiYTAxMTMzMDkzNWQ3NzM4NmU5OTA2NmZkYjE0YjAxMWExOWZmYQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2015-07-15T09:11:11Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2015-07-15T09:11:11Z"}, "message": "[gomp] Recycle last non-nested team if possible\n\nlibgomp/ChangeLog\n2015-07-15  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n\n\t* team.c (get_last_team): New.\n\t(gomp_new_team): Recycle last non-nested team if possible.\n\t(gomp_team_end): Move team work share list free lock destruction\n\tto ...\n\t(free_team): ... here.\n\nFrom-SVN: r225811", "tree": {"sha": "31b5db57e91957cc7fe59dfeb5f0fd58f144952a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b5db57e91957cc7fe59dfeb5f0fd58f144952a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dba011330935d77386e99066fdb14b011a19ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dba011330935d77386e99066fdb14b011a19ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dba011330935d77386e99066fdb14b011a19ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dba011330935d77386e99066fdb14b011a19ffa/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "290f6359d2702746f262fc74adc77ce85e3df63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290f6359d2702746f262fc74adc77ce85e3df63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290f6359d2702746f262fc74adc77ce85e3df63e"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "00cdc2ede104393b1d3c90d5e188fee3f2e5689b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dba011330935d77386e99066fdb14b011a19ffa/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dba011330935d77386e99066fdb14b011a19ffa/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6dba011330935d77386e99066fdb14b011a19ffa", "patch": "@@ -1,3 +1,11 @@\n+2015-07-15  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* team.c (get_last_team): New.\n+\t(gomp_new_team): Recycle last non-nested team if possible.\n+\t(gomp_team_end): Move team work share list free lock destruction\n+\tto ...\n+\t(free_team): ... here.\n+\n 2015-07-14  Maxim Blumenthal  <maxim.blumenthal@intel.com>\n \n \t* testsuite/libgomp.c/examples-4/simd-3.c: (main): Change type of res"}, {"sha": "7671b05c5bd6a3541b921173cf56630af97a6898", "filename": "libgomp/team.c", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dba011330935d77386e99066fdb14b011a19ffa/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dba011330935d77386e99066fdb14b011a19ffa/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=6dba011330935d77386e99066fdb14b011a19ffa", "patch": "@@ -134,25 +134,53 @@ gomp_thread_start (void *xdata)\n   return NULL;\n }\n \n+static inline struct gomp_team *\n+get_last_team (unsigned nthreads)\n+{\n+  struct gomp_thread *thr = gomp_thread ();\n+  if (thr->ts.team == NULL)\n+    {\n+      struct gomp_thread_pool *pool = thr->thread_pool;\n+      if (pool != NULL)\n+\t{\n+\t  struct gomp_team *last_team = pool->last_team;\n+\t  if (last_team != NULL && last_team->nthreads == nthreads)\n+\t    {\n+\t      pool->last_team = NULL;\n+\t      return last_team;\n+\t    }\n+\t}\n+    }\n+  return NULL;\n+}\n \n /* Create a new team data structure.  */\n \n struct gomp_team *\n gomp_new_team (unsigned nthreads)\n {\n   struct gomp_team *team;\n-  size_t size;\n   int i;\n \n-  size = sizeof (*team) + nthreads * (sizeof (team->ordered_release[0])\n-\t\t\t\t      + sizeof (team->implicit_task[0]));\n-  team = gomp_malloc (size);\n+  team = get_last_team (nthreads);\n+  if (team == NULL)\n+    {\n+      size_t extra = sizeof (team->ordered_release[0])\n+\t\t     + sizeof (team->implicit_task[0]);\n+      team = gomp_malloc (sizeof (*team) + nthreads * extra);\n+\n+#ifndef HAVE_SYNC_BUILTINS\n+      gomp_mutex_init (&team->work_share_list_free_lock);\n+#endif\n+      gomp_barrier_init (&team->barrier, nthreads);\n+      gomp_mutex_init (&team->task_lock);\n+\n+      team->nthreads = nthreads;\n+    }\n \n   team->work_share_chunk = 8;\n #ifdef HAVE_SYNC_BUILTINS\n   team->single_count = 0;\n-#else\n-  gomp_mutex_init (&team->work_share_list_free_lock);\n #endif\n   team->work_shares_to_free = &team->work_shares[0];\n   gomp_init_work_share (&team->work_shares[0], false, nthreads);\n@@ -163,14 +191,10 @@ gomp_new_team (unsigned nthreads)\n     team->work_shares[i].next_free = &team->work_shares[i + 1];\n   team->work_shares[i].next_free = NULL;\n \n-  team->nthreads = nthreads;\n-  gomp_barrier_init (&team->barrier, nthreads);\n-\n   gomp_sem_init (&team->master_release, 0);\n   team->ordered_release = (void *) &team->implicit_task[nthreads];\n   team->ordered_release[0] = &team->master_release;\n \n-  gomp_mutex_init (&team->task_lock);\n   team->task_queue = NULL;\n   team->task_count = 0;\n   team->task_queued_count = 0;\n@@ -187,6 +211,9 @@ gomp_new_team (unsigned nthreads)\n static void\n free_team (struct gomp_team *team)\n {\n+#ifndef HAVE_SYNC_BUILTINS\n+  gomp_mutex_destroy (&team->work_share_list_free_lock);\n+#endif\n   gomp_barrier_destroy (&team->barrier);\n   gomp_mutex_destroy (&team->task_lock);\n   free (team);\n@@ -895,9 +922,6 @@ gomp_team_end (void)\n       while (ws != NULL);\n     }\n   gomp_sem_destroy (&team->master_release);\n-#ifndef HAVE_SYNC_BUILTINS\n-  gomp_mutex_destroy (&team->work_share_list_free_lock);\n-#endif\n \n   if (__builtin_expect (thr->ts.team != NULL, 0)\n       || __builtin_expect (team->nthreads == 1, 0))"}]}