{"sha": "bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJiYzIwNmU5ZjQ0MWU4OTAzMTc0OTA0ZWI0Y2ZhNmFiYTRhMzJmMQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-12-05T08:49:56Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-12-05T08:49:56Z"}, "message": "rtlanal.c (note_uses): Deal with SEQUENCEs.\n\n\t* rtlanal.c (note_uses): Deal with SEQUENCEs.\n\t* config/bfin/bfin.c: Include \"timevar.h\".\n\t(bfin_flag_schedule_insns2, splitting_for_sched,\n\tbfin_flag_var_tracking): New variables.\n\t(print_operand): Handle '%!'.\n\t(override_options): Disable normal sched2 pass, instead set\n\tbfin_flag_schedule_insns2 for reorg to handle it.\n\t(output_file_start): Likewise for var-tracking.\n\t(bfin_optimize_loop): Take some care not to stumble over SEQUENCEs.\n\t(gen_one_bundle, bfin_gen_bundles, type_for_anomaly, trapping_loads_p):\n\tNew functions.\n\t(bfin_reorg): Do second scheduling pass here, and call\n\tbfin_gen_bundles.  Use type_for_anomaly and trapping_loads_p instead\n\tof examining insns directly.  If bfin_flag_var_tracking, call\n\tvar-tracking pass when done with everything else.\n\t* config/bfin/bfin.h (PRINT_OPERAND_PUNCT_VALID_P): '!' is valid.\n\t* config/bfin/bfin.md (UNSPEC_32BIT): New constant.\n\t(movsi_insn32): New pattern, with two new splits to create it\n\tbefore the final scheduling pass.\n\t(neghi2): Not a dsp32 insn, rather alu0.\n\t(movbi, pushsi_insn, popsi_insn, movsi_insn, movv2hi_insn, movhi_insn,\n\tmovqi_insn, movsf_insn, movsi_insv, extendhisi2, zero_extendhisi2,\n\textendqihi2, extendqisi2, zero_extendqihi2, zero_extendqisi2,\n\tmulhisi3, umulhisi3, ssadsi3, sssubsi3, smaxsi3, sminsi3, abssi2,\n\tssnegsi2, signbitssi2, smaxhi3, sminhi3, abshi2, ssneghi2, signbitshi2,\n\tmovhi_low2high, movhi_high2high, movhi_low2low, movhi_high2low,\n\tmovhiv2hi_low, movhiv2hi_high, composev2hi, packv2hi, movv2hi_hi,\n\tssaddhi3, sssubhi3, addv2hi3, ssaddv2hi3, subv2hi3, sssubv2hi3,\n\taddsubv2hi3, subaddv2hi3, ssaddsubv2hi3, sssubaddv2hi3, sublohiv2hi3,\n\tsubhilov2hi3, sssublohiv2hi3, sssubhilov2hi3, addlohiv2hi3,\n\taddhilov2hi3, ssaddlohiv2hi3, ssaddhilov2hi3, sminv2hi3, smaxv2hi3,\n\tflag_mulhi, flag_mulhisi, flag_mulhisi_parts, flag_machi,\n\tflag_machi_acconly, flag_macinithi, flag_macinit1hi, mulv2hi3,\n\tflag_mulv2hi, flag_mulv2hi_parts, flag_macv2hi_parts,\n\tflag_macv2hi_parts_acconly, flag_macinitv2hi_parts,\n\tflag_macinit1v2hi_parts, mulhisi_ll, mulhisi_lh, mulhisi_hl,\n\tmulhisi_hh, ssnegv2hi2, absv2hi2, ssashiftv2hi3, ssashifthi3,\n\tlshiftv2hi3, lshifthi3): Use '%!' to terminate all dsp32/load/store\n\tvariants instead of ';'.\n\t(ror_one, rol_one): Likewise.  Make them dsp32 insns.\n\t(ashlsi3_insn, ashrsi3, lshrsi3): Add dsp32 variants.\n\t(align8, align16, align24): Now named patterns; also using '%!'.\n\t(mnop): New insn.\n\nFrom-SVN: r119534", "tree": {"sha": "3fca7a5a91ba3bf2a1ac22d65225bad2a64afa7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fca7a5a91ba3bf2a1ac22d65225bad2a64afa7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/comments", "author": null, "committer": null, "parents": [{"sha": "9fc4da9d86e6a74f6919492585022be370676bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc4da9d86e6a74f6919492585022be370676bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc4da9d86e6a74f6919492585022be370676bed"}], "stats": {"total": 744, "additions": 534, "deletions": 210}, "files": [{"sha": "01fcd7017154fa83b8ba525326c7aa277898b8c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "patch": "@@ -1,3 +1,49 @@\n+2006-12-04  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* rtlanal.c (note_uses): Deal with SEQUENCEs.\n+\t* config/bfin/bfin.c: Include \"timevar.h\".\n+\t(bfin_flag_schedule_insns2, splitting_for_sched,\n+\tbfin_flag_var_tracking): New variables.\n+\t(print_operand): Handle '%!'.\n+\t(override_options): Disable normal sched2 pass, instead set\n+\tbfin_flag_schedule_insns2 for reorg to handle it.\n+\t(output_file_start): Likewise for var-tracking.\n+\t(bfin_optimize_loop): Take some care not to stumble over SEQUENCEs.\n+\t(gen_one_bundle, bfin_gen_bundles, type_for_anomaly, trapping_loads_p):\n+\tNew functions.\n+\t(bfin_reorg): Do second scheduling pass here, and call\n+\tbfin_gen_bundles.  Use type_for_anomaly and trapping_loads_p instead\n+\tof examining insns directly.  If bfin_flag_var_tracking, call\n+\tvar-tracking pass when done with everything else.\n+\t* config/bfin/bfin.h (PRINT_OPERAND_PUNCT_VALID_P): '!' is valid.\n+\t* config/bfin/bfin.md (UNSPEC_32BIT): New constant.\n+\t(movsi_insn32): New pattern, with two new splits to create it\n+\tbefore the final scheduling pass.\n+\t(neghi2): Not a dsp32 insn, rather alu0.\n+\t(movbi, pushsi_insn, popsi_insn, movsi_insn, movv2hi_insn, movhi_insn,\n+\tmovqi_insn, movsf_insn, movsi_insv, extendhisi2, zero_extendhisi2,\n+\textendqihi2, extendqisi2, zero_extendqihi2, zero_extendqisi2,\n+\tmulhisi3, umulhisi3, ssadsi3, sssubsi3, smaxsi3, sminsi3, abssi2,\n+\tssnegsi2, signbitssi2, smaxhi3, sminhi3, abshi2, ssneghi2, signbitshi2,\n+\tmovhi_low2high, movhi_high2high, movhi_low2low, movhi_high2low,\n+\tmovhiv2hi_low, movhiv2hi_high, composev2hi, packv2hi, movv2hi_hi,\n+\tssaddhi3, sssubhi3, addv2hi3, ssaddv2hi3, subv2hi3, sssubv2hi3,\n+\taddsubv2hi3, subaddv2hi3, ssaddsubv2hi3, sssubaddv2hi3, sublohiv2hi3,\n+\tsubhilov2hi3, sssublohiv2hi3, sssubhilov2hi3, addlohiv2hi3,\n+\taddhilov2hi3, ssaddlohiv2hi3, ssaddhilov2hi3, sminv2hi3, smaxv2hi3,\n+\tflag_mulhi, flag_mulhisi, flag_mulhisi_parts, flag_machi,\n+\tflag_machi_acconly, flag_macinithi, flag_macinit1hi, mulv2hi3,\n+\tflag_mulv2hi, flag_mulv2hi_parts, flag_macv2hi_parts,\n+\tflag_macv2hi_parts_acconly, flag_macinitv2hi_parts,\n+\tflag_macinit1v2hi_parts, mulhisi_ll, mulhisi_lh, mulhisi_hl,\n+\tmulhisi_hh, ssnegv2hi2, absv2hi2, ssashiftv2hi3, ssashifthi3,\n+\tlshiftv2hi3, lshifthi3): Use '%!' to terminate all dsp32/load/store\n+\tvariants instead of ';'.\n+\t(ror_one, rol_one): Likewise.  Make them dsp32 insns.\n+\t(ashlsi3_insn, ashrsi3, lshrsi3): Add dsp32 variants.\n+\t(align8, align16, align24): Now named patterns; also using '%!'.\n+\t(mnop): New insn.\n+\n 2006-12-05  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/i386/darwin.h, config/spu/spu.c, tree-ssa-live.c,"}, {"sha": "8b685b69ccef8e258557b8e811c437d1b33df0c1", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 245, "deletions": 7, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "patch": "@@ -52,6 +52,7 @@\n #include \"tm-preds.h\"\n #include \"gt-bfin.h\"\n #include \"basic-block.h\"\n+#include \"timevar.h\"\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n@@ -82,6 +83,16 @@ static int arg_regs[] = FUNCTION_ARG_REGISTERS;\n /* Nonzero if -mshared-library-id was given.  */\n static int bfin_lib_id_given;\n \n+/* Nonzero if -fschedule-insns2 was given.  We override it and\n+   call the scheduler ourselves during reorg.  */\n+static int bfin_flag_schedule_insns2;\n+\n+/* Determines whether we run variable tracking in machine dependent\n+   reorganization.  */\n+static int bfin_flag_var_tracking;\n+\n+int splitting_for_sched;\n+\n static void\n bfin_globalize_label (FILE *stream, const char *name)\n {\n@@ -97,6 +108,13 @@ output_file_start (void)\n   FILE *file = asm_out_file;\n   int i;\n \n+  /* Variable tracking should be run after all optimizations which change order\n+     of insns.  It also needs a valid CFG.  This can't be done in\n+     ia64_override_options, because flag_var_tracking is finalized after\n+     that.  */\n+  bfin_flag_var_tracking = flag_var_tracking;\n+  flag_var_tracking = 0;\n+\n   fprintf (file, \".file \\\"%s\\\";\\n\", input_filename);\n   \n   for (i = 0; arg_regs[i] >= 0; i++)\n@@ -1161,7 +1179,18 @@ print_address_operand (FILE *file, rtx x)\n void\n print_operand (FILE *file, rtx x, char code)\n {\n-  enum machine_mode mode = GET_MODE (x);\n+  enum machine_mode mode;\n+\n+  if (code == '!')\n+    {\n+      if (GET_MODE (current_output_insn) == SImode)\n+\tfprintf (file, \" ||\");\n+      else\n+\tfprintf (file, \";\");\n+      return;\n+    }\n+\n+  mode = GET_MODE (x);\n \n   switch (code)\n     {\n@@ -2079,6 +2108,11 @@ override_options (void)\n \n   flag_schedule_insns = 0;\n \n+  /* Passes after sched2 can break the helpful TImode annotations that\n+     haifa-sched puts on every insn.  Just do scheduling in reorg.  */\n+  bfin_flag_schedule_insns2 = flag_schedule_insns_after_reload;\n+  flag_schedule_insns_after_reload = 0;\n+\n   init_machine_status = bfin_init_machine_status;\n }\n \n@@ -3243,7 +3277,8 @@ bfin_optimize_loop (loop_info loop)\n \t}\n     }\n   else if (CALL_P (last_insn)\n-\t   || get_attr_type (last_insn) == TYPE_SYNC\n+\t   || (GET_CODE (PATTERN (last_insn)) != SEQUENCE\n+\t       && get_attr_type (last_insn) == TYPE_SYNC)\n \t   || recog_memoized (last_insn) == CODE_FOR_return_internal)\n     {\n       if (dump_file)\n@@ -3254,7 +3289,8 @@ bfin_optimize_loop (loop_info loop)\n \n   if (GET_CODE (PATTERN (last_insn)) == ASM_INPUT\n       || asm_noperands (PATTERN (last_insn)) >= 0\n-      || get_attr_seq_insns (last_insn) == SEQ_INSNS_MULTI)\n+      || (GET_CODE (PATTERN (last_insn)) != SEQUENCE\n+\t  && get_attr_seq_insns (last_insn) == SEQ_INSNS_MULTI))\n     {\n       nop_insn = emit_insn_after (gen_nop (), last_insn);\n       last_insn = nop_insn;\n@@ -3602,9 +3638,184 @@ bfin_reorg_loops (FILE *dump_file)\n \n   if (dump_file)\n     print_rtl (dump_file, get_insns ());\n+\n+  FOR_EACH_BB (bb)\n+    bb->aux = NULL;\n }\n+\f\n+/* Possibly generate a SEQUENCE out of three insns found in SLOT.\n+   Returns true if we modified the insn chain, false otherwise.  */\n+static bool\n+gen_one_bundle (rtx slot[3])\n+{\n+  rtx bundle;\n+\n+  gcc_assert (slot[1] != NULL_RTX);\n+\n+  /* Verify that we really can do the multi-issue.  */\n+  if (slot[0])\n+    {\n+      rtx t = NEXT_INSN (slot[0]);\n+      while (t != slot[1])\n+\t{\n+\t  if (GET_CODE (t) != NOTE\n+\t      || NOTE_LINE_NUMBER (t) != NOTE_INSN_DELETED)\n+\t    return false;\n+\t  t = NEXT_INSN (t);\n+\t}\n+    }\n+  if (slot[2])\n+    {\n+      rtx t = NEXT_INSN (slot[1]);\n+      while (t != slot[2])\n+\t{\n+\t  if (GET_CODE (t) != NOTE\n+\t      || NOTE_LINE_NUMBER (t) != NOTE_INSN_DELETED)\n+\t    return false;\n+\t  t = NEXT_INSN (t);\n+\t}\n+    }\n+\n+  if (slot[0] == NULL_RTX)\n+    slot[0] = emit_insn_before (gen_mnop (), slot[1]);\n+  if (slot[2] == NULL_RTX)\n+    slot[2] = emit_insn_after (gen_nop (), slot[1]);\n+\n+  /* Avoid line number information being printed inside one bundle.  */\n+  if (INSN_LOCATOR (slot[1])\n+      && INSN_LOCATOR (slot[1]) != INSN_LOCATOR (slot[0]))\n+    INSN_LOCATOR (slot[1]) = INSN_LOCATOR (slot[0]);\n+  if (INSN_LOCATOR (slot[2])\n+      && INSN_LOCATOR (slot[2]) != INSN_LOCATOR (slot[0]))\n+    INSN_LOCATOR (slot[2]) = INSN_LOCATOR (slot[0]);\n+\n+  /* Terminate them with \"|| \" instead of \";\" in the output.  */\n+  PUT_MODE (slot[0], SImode);\n+  PUT_MODE (slot[1], SImode);\n+\n+  /* This is a cheat to avoid emit_insn's special handling of SEQUENCEs.\n+     Generating a PARALLEL first and changing its code later is the\n+     easiest way to emit a SEQUENCE insn.  */\n+  bundle = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (3, slot[0], slot[1], slot[2]));\n+  emit_insn_before (bundle, slot[0]);\n+  remove_insn (slot[0]);\n+  remove_insn (slot[1]);\n+  remove_insn (slot[2]);\n+  PUT_CODE (bundle, SEQUENCE);\n+  \n+  return true;\n+}\n+\n+/* Go through all insns, and use the information generated during scheduling\n+   to generate SEQUENCEs to represent bundles of instructions issued\n+   simultaneously.  */\n+\n+static void\n+bfin_gen_bundles (void)\n+{\n+  basic_block bb;\n+  FOR_EACH_BB (bb)\n+    {\n+      rtx insn, next;\n+      rtx slot[3];\n+      int n_filled = 0;\n+\n+      slot[0] = slot[1] = slot[2] = NULL_RTX;\n+      for (insn = BB_HEAD (bb);; insn = next)\n+\t{\n+\t  int at_end;\n+\t  if (INSN_P (insn))\n+\t    {\n+\t      if (get_attr_type (insn) == TYPE_DSP32)\n+\t\tslot[0] = insn;\n+\t      else if (slot[1] == NULL_RTX)\n+\t\tslot[1] = insn;\n+\t      else\n+\t\tslot[2] = insn;\n+\t      n_filled++;\n+\t    }\n+\n+\t  next = NEXT_INSN (insn);\n+\t  while (next && insn != BB_END (bb)\n+\t\t && !(INSN_P (next)\n+\t\t      && GET_CODE (PATTERN (next)) != USE\n+\t\t      && GET_CODE (PATTERN (next)) != CLOBBER))\n+\t    {\n+\t      insn = next;\n+\t      next = NEXT_INSN (insn);\n+\t    }\n \n+\t  /* BB_END can change due to emitting extra NOPs, so check here.  */\n+\t  at_end = insn == BB_END (bb);\n+\t  if (at_end || GET_MODE (next) == TImode)\n+\t    {\n+\t      if ((n_filled < 2\n+\t\t   || !gen_one_bundle (slot))\n+\t\t  && slot[0] != NULL_RTX)\n+\t\t{\n+\t\t  rtx pat = PATTERN (slot[0]);\n+\t\t  if (GET_CODE (pat) == SET\n+\t\t      && GET_CODE (SET_SRC (pat)) == UNSPEC\n+\t\t      && XINT (SET_SRC (pat), 1) == UNSPEC_32BIT)\n+\t\t    {\n+\t\t      SET_SRC (pat) = XVECEXP (SET_SRC (pat), 0, 0);\n+\t\t      INSN_CODE (slot[0]) = -1;\n+\t\t    }\n+\t\t}\n+\t      n_filled = 0;\n+\t      slot[0] = slot[1] = slot[2] = NULL_RTX;\n+\t    }\n+\t  if (at_end)\n+\t    break;\n+\t}\n+    }\n+}\n \f\n+/* Return an insn type for INSN that can be used by the caller for anomaly\n+   workarounds.  This differs from plain get_attr_type in that it handles\n+   SEQUENCEs.  */\n+\n+static enum attr_type\n+type_for_anomaly (rtx insn)\n+{\n+  rtx pat = PATTERN (insn);\n+  if (GET_CODE (pat) == SEQUENCE)\n+    {\n+      enum attr_type t;\n+      t = get_attr_type (XVECEXP (pat, 0, 1));\n+      if (t == TYPE_MCLD)\n+\treturn t;\n+      t = get_attr_type (XVECEXP (pat, 0, 2));\n+      if (t == TYPE_MCLD)\n+\treturn t;\n+      return TYPE_MCST;\n+    }\n+  else\n+    return get_attr_type (insn);\n+}\n+\n+/* Return nonzero if INSN contains any loads that may trap.  It handles\n+   SEQUENCEs correctly.  */\n+\n+static bool\n+trapping_loads_p (rtx insn)\n+{\n+  rtx pat = PATTERN (insn);\n+  if (GET_CODE (pat) == SEQUENCE)\n+    {\n+      enum attr_type t;\n+      t = get_attr_type (XVECEXP (pat, 0, 1));\n+      if (t == TYPE_MCLD && may_trap_p (SET_SRC (XVECEXP (pat, 0, 1))))\n+\treturn true;\n+      t = get_attr_type (XVECEXP (pat, 0, 2));\n+      if (t == TYPE_MCLD && may_trap_p (SET_SRC (XVECEXP (pat, 0, 2))))\n+\treturn true;\n+      return false;\n+    }\n+  else\n+    return may_trap_p (SET_SRC (single_set (insn)));\n+}\n+\n /* We use the machine specific reorg pass for emitting CSYNC instructions\n    after conditional branches as needed.\n \n@@ -3631,6 +3842,27 @@ bfin_reorg (void)\n   rtx insn, last_condjump = NULL_RTX;\n   int cycles_since_jump = INT_MAX;\n \n+  /* We are freeing block_for_insn in the toplev to keep compatibility\n+     with old MDEP_REORGS that are not CFG based.  Recompute it now.  */\n+  compute_bb_for_insn ();\n+\n+  if (bfin_flag_schedule_insns2)\n+    {\n+      splitting_for_sched = 1;\n+      split_all_insns (0);\n+      splitting_for_sched = 0;\n+\n+      update_life_info (NULL, UPDATE_LIFE_GLOBAL_RM_NOTES, PROP_DEATH_NOTES);\n+\n+      timevar_push (TV_SCHED2);\n+      schedule_insns ();\n+      timevar_pop (TV_SCHED2);\n+\n+      /* Examine the schedule and insert nops as necessary for 64 bit parallel\n+\t instructions.  */\n+      bfin_gen_bundles ();\n+    }\n+\n   /* Doloop optimization */\n   if (cfun->machine->has_hardware_loops)\n     bfin_reorg_loops (dump_file);\n@@ -3666,15 +3898,14 @@ bfin_reorg (void)\n \t}\n       else if (INSN_P (insn))\n \t{\n-\t  enum attr_type type = get_attr_type (insn);\n+\t  enum attr_type type = type_for_anomaly (insn);\n \t  int delay_needed = 0;\n \t  if (cycles_since_jump < INT_MAX)\n \t    cycles_since_jump++;\n \n \t  if (type == TYPE_MCLD && TARGET_SPECLD_ANOMALY)\n \t    {\n-\t      rtx pat = single_set (insn);\n-\t      if (may_trap_p (SET_SRC (pat)))\n+\t      if (trapping_loads_p (insn))\n \t\tdelay_needed = 3;\n \t    }\n \t  else if (type == TYPE_SYNC && TARGET_CSYNC_ANOMALY)\n@@ -3736,7 +3967,7 @@ bfin_reorg (void)\n \n \t      if (INSN_P (target))\n \t\t{\n-\t\t  enum attr_type type = get_attr_type (target);\n+\t\t  enum attr_type type = type_for_anomaly (target);\n \t\t  int delay_needed = 0;\n \t\t  if (cycles_since_jump < INT_MAX)\n \t\t    cycles_since_jump++;\n@@ -3774,6 +4005,13 @@ bfin_reorg (void)\n \t    }\n \t}\n     }\n+\n+  if (bfin_flag_var_tracking)\n+    {\n+      timevar_push (TV_VAR_TRACKING);\n+      variable_tracking_main ();\n+      timevar_pop (TV_VAR_TRACKING);\n+    }\n }\n \f\n /* Handle interrupt_handler, exception_handler and nmi_handler function"}, {"sha": "bbf3adeb9455f4100dc8a902c47a77fc43f6183c", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "patch": "@@ -1233,4 +1233,8 @@ extern struct rtx_def *bfin_cc_rtx, *bfin_rets_rtx;\n \n #define SIZE_ASM_OP     \"\\t.size\\t\"\n \n+extern int splitting_for_sched;\n+\n+#define PRINT_OPERAND_PUNCT_VALID_P(CHAR) ((CHAR) == '!')\n+\n #endif /*  _BFIN_CONFIG */"}, {"sha": "d6c5d7f55ba60af256842ea98f9c57f9b9774784", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 234, "deletions": 203, "changes": 437, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "patch": "@@ -135,7 +135,9 @@\n    (UNSPEC_MAC_WITH_FLAG 7)\n    (UNSPEC_MOVE_FDPIC 8)\n    (UNSPEC_FUNCDESC_GOT17M4 9)\n-   (UNSPEC_LSETUP_END 10)])\n+   (UNSPEC_LSETUP_END 10)\n+   ;; Distinguish a 32 bit version of an insn from a 16 bit version.\n+   (UNSPEC_32BIT 11)])\n \n (define_constants\n   [(UNSPEC_VOLATILE_EH_RETURN 0)\n@@ -454,7 +456,7 @@\n   \"@\n    %0 = %1;\n    %0 = %1 (X);\n-   %0 = B %1 (Z);\n+   %0 = B %1 (Z)%!\n    B %0 = %1;\n    CC = %1;\n    %0 = CC;\n@@ -509,7 +511,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,xy\")\n         (mem:SI (post_inc:SI (reg:SI REG_SP))))]\n   \"\"\n-  \"%0 = [SP++];\"\n+  \"%0 = [SP++]%!\"\n   [(set_attr \"type\" \"mcld\")\n    (set_attr \"addrtype\" \"preg,32bit\")\n    (set_attr \"length\" \"2\")])\n@@ -531,11 +533,32 @@\n    %0 = %1 (X);\n    %0 = %1 (Z);\n    #\n-   %0 = %1;\n-   %0 = %1;\"\n+   %0 = %1%!\n+   %0 = %1%!\"\n   [(set_attr \"type\" \"move,move,move,move,mvi,mvi,mvi,*,mcld,mcst\")\n    (set_attr \"length\" \"2,2,2,2,2,4,4,*,*,*\")])\n \n+(define_insn \"*movsi_insn32\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+\t(unspec:SI [(match_operand:SI 1 \"nonmemory_operand\" \"d,P0\")] UNSPEC_32BIT))]\n+  \"\"\n+ \"@\n+   %0 = ROT %1 BY 0%!\n+   %0 = %0 -|- %0%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"d_register_operand\" \"\")\n+\t(const_int 0))]\n+  \"splitting_for_sched && !optimize_size\"\n+  [(set (match_dup 0) (unspec:SI [(const_int 0)] UNSPEC_32BIT))])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"d_register_operand\" \"\")\n+\t(match_operand:SI 1 \"d_register_operand\" \"\"))]\n+  \"splitting_for_sched && !optimize_size\"\n+  [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_32BIT))])\n+\n (define_insn_and_split \"*movv2hi_insn\"\n   [(set (match_operand:V2HI 0 \"nonimmediate_operand\" \"=da,da,d,dm\")\n         (match_operand:V2HI 1 \"general_operand\" \"i,di,md,d\"))]\n@@ -544,8 +567,8 @@\n   \"@\n    #\n    %0 = %1;\n-   %0 = %1;\n-   %0 = %1;\"\n+   %0 = %1%!\n+   %0 = %1%!\"\n   \"reload_completed && GET_CODE (operands[1]) == CONST_VECTOR\"\n   [(set (match_dup 0) (high:SI (match_dup 2)))\n    (set (match_dup 0) (lo_sum:SI (match_dup 0) (match_dup 3)))]\n@@ -568,10 +591,10 @@\n     \"%0 = %1;\",\n     \"%0 = %1 (X);\",\n     \"%0 = %1 (X);\",\n-    \"%0 = W %1 (X);\",\n-    \"W %0 = %1;\",\n-    \"%h0 = W %1;\",\n-    \"W %0 = %h1;\"\n+    \"%0 = W %1 (X)%!\",\n+    \"W %0 = %1%!\",\n+    \"%h0 = W %1%!\",\n+    \"W %0 = %h1%!\"\n   };\n   int alt = which_alternative;\n   rtx mem = (MEM_P (operands[0]) ? operands[0]\n@@ -591,8 +614,8 @@\n    %0 = %1;\n    %0 = %1 (X);\n    %0 = %1 (X);\n-   %0 = B %1 (X);\n-   B %0 = %1;\"\n+   %0 = B %1 (X)%!\n+   B %0 = %1%!\"\n   [(set_attr \"type\" \"move,mvi,mvi,mcld,mcst\")\n    (set_attr \"length\" \"2,2,4,*,*\")])\n \n@@ -603,8 +626,8 @@\n   \"@\n    %0 = %1;\n    #\n-   %0 = %1;\n-   %0 = %1;\"\n+   %0 = %1%!\n+   %0 = %1%!\"\n   [(set_attr \"type\" \"move,*,mcld,mcst\")])\n \n (define_insn_and_split \"movdf_insn\"\n@@ -643,7 +666,7 @@\n \t(match_operand:SI 1 \"nonmemory_operand\" \"d,n\"))]\n   \"\"\n   \"@\n-   %d0 = %h1 << 0;\n+   %d0 = %h1 << 0%!\n    %d0 = %1;\"\n   [(set_attr \"type\" \"dsp32,mvi\")])\n \n@@ -781,7 +804,7 @@\n   \"\"\n   \"@\n    %0 = %h1 (X);\n-   %0 = W %h1 (X);\"\n+   %0 = W %h1 (X)%!\"\n   \"reload_completed && bfin_dsp_memref_p (operands[1])\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (sign_extend:SI (match_dup 2)))]\n@@ -796,7 +819,7 @@\n   \"\"\n   \"@\n    %0 = %h1 (Z);\n-   %0 = W %h1 (Z);\"\n+   %0 = W %h1 (Z)%!\"\n   \"reload_completed && bfin_dsp_memref_p (operands[1])\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (zero_extend:SI (match_dup 2)))]\n@@ -817,7 +840,7 @@\n \t(sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"m, d\")))]\n   \"\"\n   \"@\n-   %0 = B %1 (X);\n+   %0 = B %1 (X)%!\n    %0 = %T1 (X);\"\n   [(set_attr \"type\" \"mcld,alu0\")])\n \n@@ -826,7 +849,7 @@\n \t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"m, d\")))]\n   \"\"\n   \"@\n-   %0 = B %1 (X);\n+   %0 = B %1 (X)%!\n    %0 = %T1 (X);\"\n   [(set_attr \"type\" \"mcld,alu0\")])\n \n@@ -836,7 +859,7 @@\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"m, d\")))]\n   \"\"\n   \"@\n-   %0 = B %1 (Z);\n+   %0 = B %1 (Z)%!\n    %0 = %T1 (Z);\"\n   [(set_attr \"type\" \"mcld,alu0\")])\n \n@@ -846,7 +869,7 @@\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"m, d\")))]\n   \"\"\n   \"@\n-   %0 = B %1 (Z);\n+   %0 = B %1 (Z)%!\n    %0 = %T1 (Z);\"\n   [(set_attr \"type\" \"mcld,alu0\")])\n \n@@ -1109,23 +1132,23 @@\n \t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%d\"))\n \t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"d\"))))]\n   \"\"\n-  \"%0 = %h1 * %h2 (IS);\"\n+  \"%0 = %h1 * %h2 (IS)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"umulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%d\"))\n \t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"d\"))))]\n   \"\"\n-  \"%0 = %h1 * %h2 (FU);\"\n+  \"%0 = %h1 * %h2 (FU)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"usmulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=W\")\n \t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"W\"))\n \t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"W\"))))]\n   \"\"\n-  \"%0 = %h2 * %h1 (IS,M);\"\n+  \"%0 = %h2 * %h1 (IS,M)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; The processor also supports ireg += mreg or ireg -= mreg, but these\n@@ -1150,7 +1173,7 @@\n \t(ss_plus:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t    (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = %1 + %2 (S);\"\n+  \"%0 = %1 + %2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"subsi3\"\n@@ -1182,7 +1205,7 @@\n \t(ss_minus:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t     (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = %1 - %2 (S);\"\n+  \"%0 = %1 - %2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; Bit test instructions\n@@ -1291,22 +1314,22 @@\n \t(smax:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = max(%1,%2);\"\n+  \"%0 = max(%1,%2)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sminsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(smin:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = min(%1,%2);\"\n+  \"%0 = min(%1,%2)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"abssi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = abs %1;\"\n+  \"%0 = abs %1%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"negsi2\"\n@@ -1320,7 +1343,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ss_neg:SI (match_operand:SI 1 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = -%1 (S);\"\n+  \"%0 = -%1 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"one_cmplsi2\"\n@@ -1337,44 +1360,44 @@\n \t (clz:HI (not:SI (match_dup 1)))\n \t (clz:HI (match_dup 1))))]\n   \"\"\n-  \"%h0 = signbits %1;\"\n+  \"%h0 = signbits %1%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"smaxhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(smax:HI (match_operand:HI 1 \"register_operand\" \"d\")\n \t\t (match_operand:HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = max(%1,%2) (V);\"\n+  \"%0 = max(%1,%2) (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sminhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(smin:HI (match_operand:HI 1 \"register_operand\" \"d\")\n \t\t (match_operand:HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = min(%1,%2) (V);\"\n+  \"%0 = min(%1,%2) (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"abshi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(abs:HI (match_operand:HI 1 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = abs %1 (V);\"\n+  \"%0 = abs %1 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"neghi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(neg:HI (match_operand:HI 1 \"register_operand\" \"d\")))]\n   \"\"\n   \"%0 = -%1;\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"alu0\")])\n \n (define_insn \"ssneghi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(ss_neg:HI (match_operand:HI 1 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = -%1 (V);\"\n+  \"%0 = -%1 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"signbitshi2\"\n@@ -1384,7 +1407,7 @@\n \t (clz:HI (not:HI (match_dup 1)))\n \t (clz:HI (match_dup 1))))]\n   \"\"\n-  \"%h0 = signbits %h1;\"\n+  \"%h0 = signbits %h1%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"mulsi3\"\n@@ -1410,28 +1433,31 @@\n })\n \n (define_insn_and_split \"*ashlsi3_insn\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,a,a,a\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0,a,a,a\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"dKu5,P1,P2,?P3P4\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,a,a,a\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0,d,a,a,a\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"dKu5,Ku5,P1,P2,?P3P4\")))]\n   \"\"\n   \"@\n    %0 <<= %2;\n+   %0 = %1 << %2%!\n    %0 = %1 + %1;\n    %0 = %1 << %2;\n    #\"\n   \"PREG_P (operands[0]) && INTVAL (operands[2]) > 2\"\n   [(set (match_dup 0) (ashift:SI (match_dup 1) (const_int 2)))\n    (set (match_dup 0) (ashift:SI (match_dup 0) (match_dup 3)))]\n   \"operands[3] = GEN_INT (INTVAL (operands[2]) - 2);\"\n-  [(set_attr \"type\" \"shft\")])\n+  [(set_attr \"type\" \"shft,dsp32,shft,shft,*\")])\n \n (define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"dKu5\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,d\")\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"dKu5,Ku5\")))]\n   \"\"\n-  \"%0 >>>= %2;\"\n-  [(set_attr \"type\" \"shft\")])\n+  \"@\n+   %0 >>>= %2;\n+   %0 = %1 >>> %2%!\"\n+  [(set_attr \"type\" \"shft,dsp32\")])\n \n (define_insn \"ror_one\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1440,9 +1466,8 @@\n    (set (reg:BI REG_CC)\n \t(zero_extract:BI (match_dup 1) (const_int 1) (const_int 0)))]\n   \"\"\n-  \"%0 = ROT %1 BY -1;\"\n-  [(set_attr \"type\" \"shft\")\n-   (set_attr \"length\" \"4\")])\n+  \"%0 = ROT %1 BY -1%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"rol_one\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+d\")\n@@ -1451,9 +1476,8 @@\n    (set (reg:BI REG_CC)\n \t(zero_extract:BI (match_dup 1) (const_int 31) (const_int 0)))]\n   \"\"\n-  \"%0 = ROT %1 BY 1;\"\n-  [(set_attr \"type\" \"shft\")\n-   (set_attr \"length\" \"4\")])\n+  \"%0 = ROT %1 BY 1%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n \n (define_expand \"lshrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1520,14 +1544,15 @@\n })\n \n (define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,a\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \" 0,a\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"dKu5,P1P2\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,a\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,d,a\")\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"dKu5,Ku5,P1P2\")))]\n   \"\"\n   \"@\n    %0 >>= %2;\n+   %0 = %1 >> %2%!\n    %0 = %1 >> %2;\"\n-  [(set_attr \"type\" \"shft\")])\n+  [(set_attr \"type\" \"shft,dsp32,shft\")])\n \n ;; A pattern to reload the equivalent of\n ;;   (set (Dreg) (plus (FP) (large_constant)))\n@@ -2327,6 +2352,12 @@\n   \"\"\n   \"nop;\")\n \n+(define_insn \"mnop\"\n+  [(unspec [(const_int 0)] UNSPEC_32BIT)]\n+  \"\"\n+  \"mnop%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n ;;;;;;;;;;;;;;;;;;;;   CC2dreg   ;;;;;;;;;;;;;;;;;;;;;;;;;\n (define_insn \"movsibi\"\n   [(set (match_operand:BI 0 \"register_operand\" \"=C\")\n@@ -2361,7 +2392,7 @@\n \t\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (const_int 8))))]\n   \"\"\n-  \"%0 = ALIGN8(%1, %2);\"\n+  \"%0 = ALIGN8(%1, %2)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"\"\n@@ -2371,7 +2402,7 @@\n \t\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (const_int 16))))]\n   \"\"\n-  \"%0 = ALIGN16(%1, %2);\"\n+  \"%0 = ALIGN16(%1, %2)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"\"\n@@ -2381,7 +2412,7 @@\n \t\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (const_int 24))))]\n   \"\"\n-  \"%0 = ALIGN24(%1, %2);\"\n+  \"%0 = ALIGN24(%1, %2)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; Prologue and epilogue.\n@@ -2521,7 +2552,7 @@\n \t (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t(parallel [(const_int 0)]))))]\n   \"\"\n-  \"%d0 = %h2 << 0;\"\n+  \"%d0 = %h2 << 0%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"movhi_high2high\"\n@@ -2532,7 +2563,7 @@\n \t (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t(parallel [(const_int 1)]))))]\n   \"\"\n-  \"%d0 = %d2 << 0;\"\n+  \"%d0 = %d2 << 0%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"movhi_low2low\"\n@@ -2543,7 +2574,7 @@\n \t (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"0\")\n \t\t\t(parallel [(const_int 1)]))))]\n   \"\"\n-  \"%h0 = %h2 << 0;\"\n+  \"%h0 = %h2 << 0%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"movhi_high2low\"\n@@ -2554,7 +2585,7 @@\n \t (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"0\")\n \t\t\t(parallel [(const_int 1)]))))]\n   \"\"\n-  \"%h0 = %d2 << 0;\"\n+  \"%h0 = %d2 << 0%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"movhiv2hi_low\"\n@@ -2564,7 +2595,7 @@\n \t (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"0\")\n \t\t\t(parallel [(const_int 1)]))))]\n   \"\"\n-  \"%h0 = %h2 << 0;\"\n+  \"%h0 = %h2 << 0%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"movhiv2hi_high\"\n@@ -2574,7 +2605,7 @@\n \t\t\t(parallel [(const_int 0)]))\n \t (match_operand:HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%d0 = %h2 << 0;\"\n+  \"%d0 = %h2 << 0%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; No earlyclobber on alternative two since our sequence ought to be safe.\n@@ -2586,7 +2617,7 @@\n \t\t\t (match_operand:HI 1 \"register_operand\" \"d,d\")))]\n   \"\"\n   \"@\n-   %d0 = %h2 << 0;\n+   %d0 = %h2 << 0%!\n    #\"\n   \"reload_completed\"\n   [(set (match_dup 0)\n@@ -2613,10 +2644,10 @@\n \t\t\t  (parallel [(match_operand 4 \"const01_operand\" \"P0,P0,P1,P1\")]))))]\n   \"\"\n   \"@\n-   %0 = PACK (%h2,%h1);\n-   %0 = PACK (%h2,%d1);\n-   %0 = PACK (%d2,%h1);\n-   %0 = PACK (%d2,%d1);\"\n+   %0 = PACK (%h2,%h1)%!\n+   %0 = PACK (%h2,%d1)%!\n+   %0 = PACK (%d2,%h1)%!\n+   %0 = PACK (%d2,%d1)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"movv2hi_hi\"\n@@ -2626,8 +2657,8 @@\n   \"\"\n   \"@\n    /* optimized out */\n-   %h0 = %h1 << 0;\n-   %h0 = %d1 << 0;\"\n+   %h0 = %h1 << 0%!\n+   %h0 = %d1 << 0%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_expand \"movv2hi_hi_low\"\n@@ -2651,15 +2682,15 @@\n \t(ss_plus:HI (match_operand:HI 1 \"register_operand\" \"d\")\n \t\t    (match_operand:HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%h0 = %h1 + %h2 (S);\"\n+  \"%h0 = %h1 + %h2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sssubhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(ss_minus:HI (match_operand:HI 1 \"register_operand\" \"d\")\n \t\t     (match_operand:HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%h0 = %h1 - %h2 (S);\"\n+  \"%h0 = %h1 - %h2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; V2HI vector insns\n@@ -2669,31 +2700,31 @@\n \t(plus:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t   (match_operand:V2HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = %1 +|+ %2;\"\n+  \"%0 = %1 +|+ %2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"ssaddv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(ss_plus:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t      (match_operand:V2HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = %1 +|+ %2 (S);\"\n+  \"%0 = %1 +|+ %2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"subv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(minus:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t   (match_operand:V2HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = %1 -|- %2;\"\n+  \"%0 = %1 -|- %2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sssubv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(ss_minus:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t       (match_operand:V2HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = %1 -|- %2 (S);\"\n+  \"%0 = %1 -|- %2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"addsubv2hi3\"\n@@ -2706,7 +2737,7 @@\n \t (minus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))\n \t\t   (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %1 +|- %2;\"\n+  \"%0 = %1 +|- %2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"subaddv2hi3\"\n@@ -2719,7 +2750,7 @@\n \t (plus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))\n \t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %1 -|+ %2;\"\n+  \"%0 = %1 -|+ %2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"ssaddsubv2hi3\"\n@@ -2732,7 +2763,7 @@\n \t (ss_minus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))\n \t\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %1 +|- %2 (S);\"\n+  \"%0 = %1 +|- %2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sssubaddv2hi3\"\n@@ -2745,7 +2776,7 @@\n \t (ss_plus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))\n \t\t     (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %1 -|+ %2 (S);\"\n+  \"%0 = %1 -|+ %2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sublohiv2hi3\"\n@@ -2755,7 +2786,7 @@\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 0)]))))]\n   \"\"\n-  \"%h0 = %d1 - %h2;\"\n+  \"%h0 = %d1 - %h2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"subhilov2hi3\"\n@@ -2765,7 +2796,7 @@\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 1)]))))]\n   \"\"\n-  \"%h0 = %h1 - %d2;\"\n+  \"%h0 = %h1 - %d2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sssublohiv2hi3\"\n@@ -2775,7 +2806,7 @@\n \t\t     (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t    (parallel [(const_int 0)]))))]\n   \"\"\n-  \"%h0 = %d1 - %h2 (S);\"\n+  \"%h0 = %d1 - %h2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sssubhilov2hi3\"\n@@ -2785,7 +2816,7 @@\n \t\t     (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t    (parallel [(const_int 1)]))))]\n   \"\"\n-  \"%h0 = %h1 - %d2 (S);\"\n+  \"%h0 = %h1 - %d2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"addlohiv2hi3\"\n@@ -2795,7 +2826,7 @@\n \t\t (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t(parallel [(const_int 0)]))))]\n   \"\"\n-  \"%h0 = %d1 + %h2;\"\n+  \"%h0 = %d1 + %h2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"addhilov2hi3\"\n@@ -2805,7 +2836,7 @@\n \t\t (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t(parallel [(const_int 1)]))))]\n   \"\"\n-  \"%h0 = %h1 + %d2;\"\n+  \"%h0 = %h1 + %d2%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"ssaddlohiv2hi3\"\n@@ -2815,7 +2846,7 @@\n \t\t    (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t   (parallel [(const_int 0)]))))]\n   \"\"\n-  \"%h0 = %d1 + %h2 (S);\"\n+  \"%h0 = %d1 + %h2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"ssaddhilov2hi3\"\n@@ -2825,23 +2856,23 @@\n \t\t    (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t   (parallel [(const_int 1)]))))]\n   \"\"\n-  \"%h0 = %h1 + %d2 (S);\"\n+  \"%h0 = %h1 + %d2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"sminv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(smin:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t   (match_operand:V2HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = MIN (%1, %2) (V);\"\n+  \"%0 = MIN (%1, %2) (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"smaxv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(smax:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t   (match_operand:V2HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = MAX (%1, %2) (V);\"\n+  \"%0 = MAX (%1, %2) (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; Multiplications.\n@@ -2865,7 +2896,7 @@\n \t\t    (match_operand 3 \"const_int_operand\" \"n\")]\n \t\t   UNSPEC_MUL_WITH_FLAG))]\n   \"\"\n-  \"%h0 = %h1 * %h2 %M3;\"\n+  \"%h0 = %h1 * %h2 %M3%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_mulhisi\"\n@@ -2875,7 +2906,7 @@\n \t\t    (match_operand 3 \"const_int_operand\" \"n\")]\n \t\t   UNSPEC_MUL_WITH_FLAG))]\n   \"\"\n-  \"%0 = %h1 * %h2 %M3;\"\n+  \"%0 = %h1 * %h2 %M3%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_mulhisi_parts\"\n@@ -2891,10 +2922,10 @@\n   \"\"\n {\n   const char *templates[] = {\n-    \"%0 = %h1 * %h2 %M5;\",\n-    \"%0 = %d1 * %h2 %M5;\",\n-    \"%0 = %h1 * %d2 %M5;\",\n-    \"%0 = %d1 * %d2 %M5;\" };\n+    \"%0 = %h1 * %h2 %M5%!\",\n+    \"%0 = %d1 * %h2 %M5%!\",\n+    \"%0 = %h1 * %d2 %M5%!\",\n+    \"%0 = %d1 * %d2 %M5%!\" };\n   int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1);\n   return templates[alt];\n }\n@@ -2913,7 +2944,7 @@\n \t\t     (match_dup 4) (match_dup 5)]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n-  \"%h0 = (A0 %b4 %h1 * %h2) %M6;\"\n+  \"%h0 = (A0 %b4 %h1 * %h2) %M6%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_machi_acconly\"\n@@ -2925,7 +2956,7 @@\n \t\t     (match_operand 5 \"const_int_operand\" \"n\")]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n-  \"%0 %b4 %h1 * %h2 %M6;\"\n+  \"%0 %b4 %h1 * %h2 %M6%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_macinithi\"\n@@ -2938,7 +2969,7 @@\n \t(unspec:PDI [(match_dup 1) (match_dup 2) (match_dup 3)]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n-  \"%h0 = (A0 = %h1 * %h2) %M3;\"\n+  \"%h0 = (A0 = %h1 * %h2) %M3%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_macinit1hi\"\n@@ -2948,15 +2979,15 @@\n \t\t     (match_operand 3 \"const_int_operand\" \"n\")]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n-  \"%0 = %h1 * %h2 %M3;\"\n+  \"%0 = %h1 * %h2 %M3%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"mulv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(mult:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n \t\t   (match_operand:V2HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%h0 = %h1 * %h2, %d0 = %d1 * %d2 (IS);\"\n+  \"%h0 = %h1 * %h2, %d0 = %d1 * %d2 (IS)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_mulv2hi\"\n@@ -2966,7 +2997,7 @@\n \t\t      (match_operand 3 \"const_int_operand\" \"n\")]\n \t\t     UNSPEC_MUL_WITH_FLAG))]\n   \"\"\n-  \"%h0 = %h1 * %h2, %d0 = %d1 * %d2 %M3;\"\n+  \"%h0 = %h1 * %h2, %d0 = %d1 * %d2 %M3%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_mulv2hi_parts\"\n@@ -2988,22 +3019,22 @@\n   \"\"\n {\n   const char *templates[] = {\n-    \"%h0 = %h1 * %h2, %d0 = %h1 * %h2 %M7;\",\n-    \"%h0 = %d1 * %h2, %d0 = %h1 * %h2 %M7;\",\n-    \"%h0 = %h1 * %h2, %d0 = %d1 * %h2 %M7;\",\n-    \"%h0 = %d1 * %h2, %d0 = %d1 * %h2 %M7;\",\n-    \"%h0 = %h1 * %d2, %d0 = %h1 * %h2 %M7;\",\n-    \"%h0 = %d1 * %d2, %d0 = %h1 * %h2 %M7;\",\n-    \"%h0 = %h1 * %d2, %d0 = %d1 * %h2 %M7;\",\n-    \"%h0 = %d1 * %d2, %d0 = %d1 * %h2 %M7;\",\n-    \"%h0 = %h1 * %h2, %d0 = %h1 * %d2 %M7;\",\n-    \"%h0 = %d1 * %h2, %d0 = %h1 * %d2 %M7;\",\n-    \"%h0 = %h1 * %h2, %d0 = %d1 * %d2 %M7;\",\n-    \"%h0 = %d1 * %h2, %d0 = %d1 * %d2 %M7;\",\n-    \"%h0 = %h1 * %d2, %d0 = %h1 * %d2 %M7;\",\n-    \"%h0 = %d1 * %d2, %d0 = %h1 * %d2 %M7;\",\n-    \"%h0 = %h1 * %d2, %d0 = %d1 * %d2 %M7;\",\n-    \"%h0 = %d1 * %d2, %d0 = %d1 * %d2 %M7;\" };\n+    \"%h0 = %h1 * %h2, %d0 = %h1 * %h2 %M7%!\",\n+    \"%h0 = %d1 * %h2, %d0 = %h1 * %h2 %M7%!\",\n+    \"%h0 = %h1 * %h2, %d0 = %d1 * %h2 %M7%!\",\n+    \"%h0 = %d1 * %h2, %d0 = %d1 * %h2 %M7%!\",\n+    \"%h0 = %h1 * %d2, %d0 = %h1 * %h2 %M7%!\",\n+    \"%h0 = %d1 * %d2, %d0 = %h1 * %h2 %M7%!\",\n+    \"%h0 = %h1 * %d2, %d0 = %d1 * %h2 %M7%!\",\n+    \"%h0 = %d1 * %d2, %d0 = %d1 * %h2 %M7%!\",\n+    \"%h0 = %h1 * %h2, %d0 = %h1 * %d2 %M7%!\",\n+    \"%h0 = %d1 * %h2, %d0 = %h1 * %d2 %M7%!\",\n+    \"%h0 = %h1 * %h2, %d0 = %d1 * %d2 %M7%!\",\n+    \"%h0 = %d1 * %h2, %d0 = %d1 * %d2 %M7%!\",\n+    \"%h0 = %h1 * %d2, %d0 = %h1 * %d2 %M7%!\",\n+    \"%h0 = %d1 * %d2, %d0 = %h1 * %d2 %M7%!\",\n+    \"%h0 = %h1 * %d2, %d0 = %d1 * %d2 %M7%!\",\n+    \"%h0 = %d1 * %d2, %d0 = %d1 * %d2 %M7%!\" };\n   int alt = (INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n \t     + (INTVAL (operands[5]) << 2)  + (INTVAL (operands[6]) << 3));\n   return templates[alt];\n@@ -3048,22 +3079,22 @@\n   \"\"\n {\n   const char *templates[] = {\n-    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %h1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %h1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %d1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %d1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %h1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %h1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %d1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %d1 * %h2) %M10;\",\n-    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %h1 * %d2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %h1 * %d2) %M10;\",\n-    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %d1 * %d2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %d1 * %d2) %M10;\",\n-    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %h1 * %d2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %h1 * %d2) %M10;\",\n-    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %d1 * %d2) %M10;\",\n-    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %d1 * %d2) %M10;\" };\n+    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %h1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %h1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %d1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %d1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %h1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %h1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %d1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %d1 * %h2) %M10%!\",\n+    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %h1 * %d2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %h1 * %d2) %M10%!\",\n+    \"%h0 = (A0 %b8 %h1 * %h2), %d0 = (A1 %b9 %d1 * %d2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %h2), %d0 = (A1 %b9 %d1 * %d2) %M10%!\",\n+    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %h1 * %d2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %h1 * %d2) %M10%!\",\n+    \"%h0 = (A0 %b8 %h1 * %d2), %d0 = (A1 %b9 %d1 * %d2) %M10%!\",\n+    \"%h0 = (A0 %b8 %d1 * %d2), %d0 = (A1 %b9 %d1 * %d2) %M10%!\" };\n   int alt = (INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n \t     + (INTVAL (operands[5]) << 2)  + (INTVAL (operands[6]) << 3));\n   return templates[alt];\n@@ -3092,22 +3123,22 @@\n   \"\"\n {\n   const char *templates[] = {\n-    \"A0 %b8 %h1 * %h2, A1 %b9 %h1 * %h2 %M10;\",\n-    \"A0 %b8 %d1 * %h2, A1 %b9 %h1 * %h2 %M10;\",\n-    \"A0 %b8 %h1 * %h2, A1 %b9 %d1 * %h2 %M10;\",\n-    \"A0 %b8 %d1 * %h2, A1 %b9 %d1 * %h2 %M10;\",\n-    \"A0 %b8 %h1 * %d2, A1 %b9 %h1 * %h2 %M10;\",\n-    \"A0 %b8 %d1 * %d2, A1 %b9 %h1 * %h2 %M10;\",\n-    \"A0 %b8 %h1 * %d2, A1 %b9 %d1 * %h2 %M10;\",\n-    \"A0 %b8 %d1 * %d2, A1 %b9 %d1 * %h2 %M10;\",\n-    \"A0 %b8 %h1 * %h2, A1 %b9 %h1 * %d2 %M10;\",\n-    \"A0 %b8 %d1 * %h2, A1 %b9 %h1 * %d2 %M10;\",\n-    \"A0 %b8 %h1 * %h2, A1 %b9 %d1 * %d2 %M10;\",\n-    \"A0 %b8 %d1 * %h2, A1 %b9 %d1 * %d2 %M10;\",\n-    \"A0 %b8 %h1 * %d2, A1 %b9 %h1 * %d2 %M10;\",\n-    \"A0 %b8 %d1 * %d2, A1 %b9 %h1 * %d2 %M10;\",\n-    \"A0 %b8 %h1 * %d2, A1 %b9 %d1 * %d2 %M10;\",\n-    \"A0 %b8 %d1 * %d2, A1 %b9 %d1 * %d2 %M10;\" };\n+    \"A0 %b8 %h1 * %h2, A1 %b9 %h1 * %h2 %M10%!\",\n+    \"A0 %b8 %d1 * %h2, A1 %b9 %h1 * %h2 %M10%!\",\n+    \"A0 %b8 %h1 * %h2, A1 %b9 %d1 * %h2 %M10%!\",\n+    \"A0 %b8 %d1 * %h2, A1 %b9 %d1 * %h2 %M10%!\",\n+    \"A0 %b8 %h1 * %d2, A1 %b9 %h1 * %h2 %M10%!\",\n+    \"A0 %b8 %d1 * %d2, A1 %b9 %h1 * %h2 %M10%!\",\n+    \"A0 %b8 %h1 * %d2, A1 %b9 %d1 * %h2 %M10%!\",\n+    \"A0 %b8 %d1 * %d2, A1 %b9 %d1 * %h2 %M10%!\",\n+    \"A0 %b8 %h1 * %h2, A1 %b9 %h1 * %d2 %M10%!\",\n+    \"A0 %b8 %d1 * %h2, A1 %b9 %h1 * %d2 %M10%!\",\n+    \"A0 %b8 %h1 * %h2, A1 %b9 %d1 * %d2 %M10%!\",\n+    \"A0 %b8 %d1 * %h2, A1 %b9 %d1 * %d2 %M10%!\",\n+    \"A0 %b8 %h1 * %d2, A1 %b9 %h1 * %d2 %M10%!\",\n+    \"A0 %b8 %d1 * %d2, A1 %b9 %h1 * %d2 %M10%!\",\n+    \"A0 %b8 %h1 * %d2, A1 %b9 %d1 * %d2 %M10%!\",\n+    \"A0 %b8 %d1 * %d2, A1 %b9 %d1 * %d2 %M10%!\" };\n   int alt = (INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n \t     + (INTVAL (operands[5]) << 2)  + (INTVAL (operands[6]) << 3));\n   return templates[alt];\n@@ -3144,22 +3175,22 @@\n   \"\"\n {\n   const char *templates[] = {\n-    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %h1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %h1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %d1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %d1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %h1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %h1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %d1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %d1 * %h2) %M7;\",\n-    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %h1 * %d2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %h1 * %d2) %M7;\",\n-    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %d1 * %d2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %d1 * %d2) %M7;\",\n-    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %h1 * %d2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %h1 * %d2) %M7;\",\n-    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %d1 * %d2) %M7;\",\n-    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %d1 * %d2) %M7;\" };\n+    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %h1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %h1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %d1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %d1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %h1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %h1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %d1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %d1 * %h2) %M7%!\",\n+    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %h1 * %d2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %h1 * %d2) %M7%!\",\n+    \"%h0 = (A0 = %h1 * %h2), %d0 = (A1 = %d1 * %d2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %h2), %d0 = (A1 = %d1 * %d2) %M7%!\",\n+    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %h1 * %d2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %h1 * %d2) %M7%!\",\n+    \"%h0 = (A0 = %h1 * %d2), %d0 = (A1 = %d1 * %d2) %M7%!\",\n+    \"%h0 = (A0 = %d1 * %d2), %d0 = (A1 = %d1 * %d2) %M7%!\" };\n   int alt = (INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n \t     + (INTVAL (operands[5]) << 2)  + (INTVAL (operands[6]) << 3));\n   return templates[alt];\n@@ -3185,22 +3216,22 @@\n   \"\"\n {\n   const char *templates[] = {\n-    \"A0 = %h1 * %h2, A1 = %h1 * %h2 %M7;\",\n-    \"A0 = %d1 * %h2, A1 = %h1 * %h2 %M7;\",\n-    \"A0 = %h1 * %h2, A1 = %d1 * %h2 %M7;\",\n-    \"A0 = %d1 * %h2, A1 = %d1 * %h2 %M7;\",\n-    \"A0 = %h1 * %d2, A1 = %h1 * %h2 %M7;\",\n-    \"A0 = %d1 * %d2, A1 = %h1 * %h2 %M7;\",\n-    \"A0 = %h1 * %d2, A1 = %d1 * %h2 %M7;\",\n-    \"A0 = %d1 * %d2, A1 = %d1 * %h2 %M7;\",\n-    \"A0 = %h1 * %h2, A1 = %h1 * %d2 %M7;\",\n-    \"A0 = %d1 * %h2, A1 = %h1 * %d2 %M7;\",\n-    \"A0 = %h1 * %h2, A1 = %d1 * %d2 %M7;\",\n-    \"A0 = %d1 * %h2, A1 = %d1 * %d2 %M7;\",\n-    \"A0 = %h1 * %d2, A1 = %h1 * %d2 %M7;\",\n-    \"A0 = %d1 * %d2, A1 = %h1 * %d2 %M7;\",\n-    \"A0 = %h1 * %d2, A1 = %d1 * %d2 %M7;\",\n-    \"A0 = %d1 * %d2, A1 = %d1 * %d2 %M7;\" };\n+    \"A0 = %h1 * %h2, A1 = %h1 * %h2 %M7%!\",\n+    \"A0 = %d1 * %h2, A1 = %h1 * %h2 %M7%!\",\n+    \"A0 = %h1 * %h2, A1 = %d1 * %h2 %M7%!\",\n+    \"A0 = %d1 * %h2, A1 = %d1 * %h2 %M7%!\",\n+    \"A0 = %h1 * %d2, A1 = %h1 * %h2 %M7%!\",\n+    \"A0 = %d1 * %d2, A1 = %h1 * %h2 %M7%!\",\n+    \"A0 = %h1 * %d2, A1 = %d1 * %h2 %M7%!\",\n+    \"A0 = %d1 * %d2, A1 = %d1 * %h2 %M7%!\",\n+    \"A0 = %h1 * %h2, A1 = %h1 * %d2 %M7%!\",\n+    \"A0 = %d1 * %h2, A1 = %h1 * %d2 %M7%!\",\n+    \"A0 = %h1 * %h2, A1 = %d1 * %d2 %M7%!\",\n+    \"A0 = %d1 * %h2, A1 = %d1 * %d2 %M7%!\",\n+    \"A0 = %h1 * %d2, A1 = %h1 * %d2 %M7%!\",\n+    \"A0 = %d1 * %d2, A1 = %h1 * %d2 %M7%!\",\n+    \"A0 = %h1 * %d2, A1 = %d1 * %d2 %M7%!\",\n+    \"A0 = %d1 * %d2, A1 = %d1 * %d2 %M7%!\" };\n   int alt = (INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n \t     + (INTVAL (operands[5]) << 2)  + (INTVAL (operands[6]) << 3));\n   return templates[alt];\n@@ -3216,7 +3247,7 @@\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 0)])))))]\n   \"\"\n-  \"%0 = %h1 * %h2 (IS);\"\n+  \"%0 = %h1 * %h2 (IS)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"mulhisi_lh\"\n@@ -3228,7 +3259,7 @@\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %h1 * %d2 (IS);\"\n+  \"%0 = %h1 * %d2 (IS)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"mulhisi_hl\"\n@@ -3240,7 +3271,7 @@\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 0)])))))]\n   \"\"\n-  \"%0 = %d1 * %h2 (IS);\"\n+  \"%0 = %d1 * %h2 (IS)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"mulhisi_hh\"\n@@ -3252,21 +3283,21 @@\n \t\t  (vec_select:HI (match_operand:V2HI 2 \"register_operand\" \"d\")\n \t\t\t\t (parallel [(const_int 1)])))))]\n   \"\"\n-  \"%0 = %d1 * %d2 (IS);\"\n+  \"%0 = %d1 * %d2 (IS)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"ssnegv2hi2\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(ss_neg:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = - %1 (V);\"\n+  \"%0 = - %1 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"absv2hi2\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n \t(abs:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%0 = ABS %1 (V);\"\n+  \"%0 = ABS %1 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; Shifts.\n@@ -3280,9 +3311,9 @@\n \t (ss_ashift:V2HI (match_dup 1) (match_dup 2))))]\n   \"\"\n   \"@\n-   %0 = ASHIFT %1 BY %2 (V, S);\n-   %0 = %1 >>> %2 (V,S);\n-   %0 = %1 << %2 (V,S);\"\n+   %0 = ASHIFT %1 BY %2 (V, S)%!\n+   %0 = %1 >>> %2 (V,S)%!\n+   %0 = %1 << %2 (V,S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"ssashifthi3\"\n@@ -3294,9 +3325,9 @@\n \t (ss_ashift:HI (match_dup 1) (match_dup 2))))]\n   \"\"\n   \"@\n-   %0 = ASHIFT %1 BY %2 (V, S);\n-   %0 = %1 >>> %2 (V,S);\n-   %0 = %1 << %2 (V,S);\"\n+   %0 = ASHIFT %1 BY %2 (V, S)%!\n+   %0 = %1 >>> %2 (V,S)%!\n+   %0 = %1 << %2 (V,S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"lshiftv2hi3\"\n@@ -3308,9 +3339,9 @@\n \t (ashift:V2HI (match_dup 1) (match_dup 2))))]\n   \"\"\n   \"@\n-   %0 = LSHIFT %1 BY %2 (V);\n-   %0 = %1 >> %2 (V);\n-   %0 = %1 << %2 (V);\"\n+   %0 = LSHIFT %1 BY %2 (V)%!\n+   %0 = %1 >> %2 (V)%!\n+   %0 = %1 << %2 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"lshifthi3\"\n@@ -3322,8 +3353,8 @@\n \t (ashift:HI (match_dup 1) (match_dup 2))))]\n   \"\"\n   \"@\n-   %0 = LSHIFT %1 BY %2 (V);\n-   %0 = %1 >> %2 (V);\n-   %0 = %1 << %2 (V);\"\n+   %0 = LSHIFT %1 BY %2 (V)%!\n+   %0 = %1 >> %2 (V)%!\n+   %0 = %1 << %2 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n "}, {"sha": "6b964430ef02f8deab3d34ec290050d702c8992a", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbc206e9f441e8903174904eb4cfa6aba4a32f1/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=bbbc206e9f441e8903174904eb4cfa6aba4a32f1", "patch": "@@ -1390,6 +1390,11 @@ note_uses (rtx *pbody, void (*fun) (rtx *, void *), void *data)\n \tnote_uses (&XVECEXP (body, 0, i), fun, data);\n       return;\n \n+    case SEQUENCE:\n+      for (i = XVECLEN (body, 0) - 1; i >= 0; i--)\n+\tnote_uses (&PATTERN (XVECEXP (body, 0, i)), fun, data);\n+      return;\n+\n     case USE:\n       (*fun) (&XEXP (body, 0), data);\n       return;"}]}