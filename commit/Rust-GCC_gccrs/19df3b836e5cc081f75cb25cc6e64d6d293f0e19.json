{"sha": "19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkZjNiODM2ZTVjYzA4MWY3NWNiMjVjYzZlNjRkNmQyOTNmMGUxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-06T09:51:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-06T09:51:26Z"}, "message": "c_locale.cc: Don't use __builtin_huge_val* when __*_HAS_INFINITY__ is false.\n\n2007-05-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/locale/generic/c_locale.cc: Don't use __builtin_huge_val*\n\twhen __*_HAS_INFINITY__ is false.\n\nFrom-SVN: r124470", "tree": {"sha": "12001ddc14268b69c7c3beec2eee94e07c80e779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12001ddc14268b69c7c3beec2eee94e07c80e779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19df3b836e5cc081f75cb25cc6e64d6d293f0e19/comments", "author": null, "committer": null, "parents": [{"sha": "16f8ffc831e99cf28ed7fe2aa9f96ef8dda30678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f8ffc831e99cf28ed7fe2aa9f96ef8dda30678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f8ffc831e99cf28ed7fe2aa9f96ef8dda30678"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "958a71510ab6965e5ff948e700387e500dc3a0e4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19df3b836e5cc081f75cb25cc6e64d6d293f0e19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19df3b836e5cc081f75cb25cc6e64d6d293f0e19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "patch": "@@ -1,3 +1,8 @@\n+2007-05-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/locale/generic/c_locale.cc: Don't use __builtin_huge_val*\n+\twhen __*_HAS_INFINITY__ is false.\n+\n 2007-05-04  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_raw_storage_iter.h (class raw_storage_iterator):"}, {"sha": "ae1fa2899f57c2bdc78cd8e8025280f2f1d0fad9", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19df3b836e5cc081f75cb25cc6e64d6d293f0e19/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19df3b836e5cc081f75cb25cc6e64d6d293f0e19/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "patch": "@@ -34,6 +34,7 @@\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n+#include <cerrno>  // For errno\n #include <cmath>  // For isinf, finite, finitef, fabs\n #include <cstdlib>  // For strof, strtold\n #include <locale>\n@@ -55,30 +56,41 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, \"C\");\n       char* __sanity;\n+\n+#if !__FLT_HAS_INFINITY__\n+      errno = 0;\n+#endif\n+\n #if defined(_GLIBCXX_HAVE_STRTOF)\n       float __f = strtof(__s, &__sanity);\n #else\n       double __d = strtod(__s, &__sanity);\n       float __f = static_cast<float>(__d);\n #ifdef _GLIBCXX_HAVE_FINITEF\n       if (!finitef (__f))\n-\t__f = __builtin_huge_valf();\n+\t__s = __sanity;\n #elif defined (_GLIBCXX_HAVE_FINITE)\n       if (!finite (static_cast<double> (__f)))\n-\t__f = __builtin_huge_valf();\n+\t__s = __sanity;\n #elif defined (_GLIBCXX_HAVE_ISINF)\n       if (isinf (static_cast<double> (__f)))\n-\t__f = __builtin_huge_valf();\n+\t__s = __sanity;\n #else\n       if (fabs(__d) > numeric_limits<float>::max())\n-\t__f = __builtin_huge_valf();\n+\t__s = __sanity;\n #endif\n #endif\n-      if (__sanity != __s && __f != __builtin_huge_valf()\n-\t  && __f != -__builtin_huge_valf())\n+\n+      if (__sanity != __s\n+#if !__FLT_HAS_INFINITY__\n+\t  && errno != ERANGE)\n+#else\n+\t  && __f != __builtin_huge_valf() && __f != -__builtin_huge_valf())\n+#endif\n \t__v = __f;\n       else\n \t__err |= ios_base::failbit;\n+\n       setlocale(LC_ALL, __old);\n       free(__old);\n     }\n@@ -92,12 +104,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, \"C\");\n       char* __sanity;\n+\n+#if !__DBL_HAS_INFINITY__\n+      errno = 0;\n+#endif\n+\n       double __d = strtod(__s, &__sanity);\n-      if (__sanity != __s && __d != __builtin_huge_val()\n-\t  && __d != -__builtin_huge_val())\n+\n+      if (__sanity != __s\n+#if !__DBL_HAS_INFINITY__\n+          && errno != ERANGE) \n+#else\n+\t  && __d != __builtin_huge_val() && __d != -__builtin_huge_val())\n+#endif\n \t__v = __d;\n       else\n \t__err |= ios_base::failbit;\n+\n       setlocale(LC_ALL, __old);\n       free(__old);\n     }\n@@ -110,23 +133,40 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Assumes __s formatted for \"C\" locale.\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, \"C\");\n+\n+#if !__LDBL_HAS_INFINITY__\n+      errno = 0;\n+#endif\n+\n #if defined(_GLIBCXX_HAVE_STRTOLD)\n       char* __sanity;\n       long double __ld = strtold(__s, &__sanity);\n-      if (__sanity != __s && __ld != __builtin_huge_vall()\n-\t  && __ld != -__builtin_huge_vall())\n+\n+      if (__sanity != __s\n+#if !__LDBL_HAS_INFINITY__\n+          && errno != ERANGE)\n+#else\n+\t  && __ld != __builtin_huge_vall() && __ld != -__builtin_huge_vall())\n+#endif\n \t__v = __ld;\n+\n #else\n       typedef char_traits<char>::int_type int_type;\n       long double __ld;\n       int __p = sscanf(__s, \"%Lf\", &__ld);\n+\n       if (__p && static_cast<int_type>(__p) != char_traits<char>::eof()\n-\t  && __ld != __builtin_huge_vall()\n-\t  && __ld != -__builtin_huge_vall())\n+#if !__LDBL_HAS_INFINITY__\n+          && errno != ERANGE)\n+#else\n+          && __ld != __builtin_huge_vall() && __ld != -__builtin_huge_vall())\n+#endif\n \t__v = __ld;\n+\n #endif\n       else\n \t__err |= ios_base::failbit;\n+\n       setlocale(LC_ALL, __old);\n       free(__old);\n     }"}]}