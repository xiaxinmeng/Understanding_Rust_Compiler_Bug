{"sha": "198cb1664a59ee3b71661952b471015af5edec2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk4Y2IxNjY0YTU5ZWUzYjcxNjYxOTUyYjQ3MTAxNWFmNWVkZWMyZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-20T10:15:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-20T10:15:59Z"}, "message": "i386.c (ix86_expand_round_sse4): Expand as trunc (a + copysign (nextafter (0.5, 0.0), a)).\n\n\t* config/i386/i386.c (ix86_expand_round_sse4): Expand as\n\ttrunc (a + copysign (nextafter (0.5, 0.0), a)).\n\nFrom-SVN: r177927", "tree": {"sha": "5e1bea9cbb1b316ebdd6ad33c12ba47f37420891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e1bea9cbb1b316ebdd6ad33c12ba47f37420891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/198cb1664a59ee3b71661952b471015af5edec2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198cb1664a59ee3b71661952b471015af5edec2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198cb1664a59ee3b71661952b471015af5edec2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198cb1664a59ee3b71661952b471015af5edec2d/comments", "author": null, "committer": null, "parents": [{"sha": "f47a61f332d35e1398e0864694b4156b5e502f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47a61f332d35e1398e0864694b4156b5e502f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47a61f332d35e1398e0864694b4156b5e502f82"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "e72be38893619e1d6bf1af70ccbff8c55ee86ca9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198cb1664a59ee3b71661952b471015af5edec2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198cb1664a59ee3b71661952b471015af5edec2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=198cb1664a59ee3b71661952b471015af5edec2d", "patch": "@@ -1,3 +1,9 @@\n+2011-08-20  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Michael Matz  <matz@suse.de>\n+\n+\t* config/i386/i386.c (ix86_expand_round_sse4): Expand as\n+\ttrunc (a + copysign (nextafter (0.5, 0.0), a)).\n+\n 2011-08-20  Anatoly Sokolov  <aesok@post.ru>\n \n \t* doc/tm.texi.in (PREFERRED_OUTPUT_RELOAD_CLASS): Remove.\n@@ -10,9 +16,8 @@\n \n \tPR tree-optimization/48739\n \t* tree-ssa.c: Include cfgloop.h.\n-\t(execute_update_addresses_taken): When updating ssa, if in\n-\tloop closed SSA form, call rewrite_into_loop_closed_ssa instead of\n-\tupdate_ssa.\n+\t(execute_update_addresses_taken): When updating ssa, if in loop closed\n+\tSSA form, call rewrite_into_loop_closed_ssa instead of update_ssa.\n \t* Makefile.in (tree-ssa.o): Depend on $(CFGLOOP_H).\n \n 2011-08-19  Vladimir Makarov  <vmakarov@redhat.com>\n@@ -34,8 +39,7 @@\n \n 2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* c-parser.c (c_parser_postfix_expression): Handle\n-\tRID_BUILTIN_COMPLEX.\n+\t* c-parser.c (c_parser_postfix_expression): Handle RID_BUILTIN_COMPLEX.\n \t* doc/extend.texi (__builtin_complex): Document.\n \n 2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n@@ -133,8 +137,7 @@\n \n \t* c-decl.c (grokdeclarator): Diagnose _Noreturn for non-C1X if\n \tpedantic.\n-\t* c-parser.c (c_parser_declspecs): Include _Noreturn in syntax\n-\tcomment.\n+\t* c-parser.c (c_parser_declspecs): Include _Noreturn in syntax comment.\n \t* ginclude/stdnoreturn.h (noreturn): Don't define for C++.\n \n 2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n@@ -172,9 +175,8 @@\n \tAVX2 feature.\n \t* config/i386/i386-c.c (ix86_target_macros_internal):\n \tConditionally define __AVX2__.\n-\t* config/i386/i386.c (ix86_option_override_internal): Define\n-\tPTA_AVX2.  Define \"core-avx2\" processor alias.  Handle avx2\n-\toption.\n+\t* config/i386/i386.c (ix86_option_override_internal): Define PTA_AVX2.\n+\tDefine \"core-avx2\" processor alias.  Handle avx2 option.\n \t(ix86_valid_target_attribute_inner_p): Handle avx2 option.\n \t* config/i386/i386.h (TARGET_AVX2): New.\n \t* config/i386/i386.opt (mavx2): New.\n@@ -447,8 +449,7 @@\n \t* cgraphunit.c (thunk_adjust): Use fold_build_pointer_plus_loc.\n \t(cgraph_redirect_edge_call_stmt_to_callee): Use size_int.\n \t* expr.c (expand_expr_addr_expr_1): Use fold_build_pointer_plus.\n-\t* fold-const.c (build_range_check): Negate using the original\n-\ttype.\n+\t* fold-const.c (build_range_check): Negate using the original type.\n \t(fold_unary_loc): Use fold_build_pointer_plus_loc.\n \t* gimple-fold.c (gimple_adjust_this_by_delta): Use\n \tconvert_to_ptrofftype.\n@@ -646,11 +647,11 @@\n \n 2011-08-12  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n-        PR target/48328\n+\tPR target/48328\n \t* config/arm/arm.h (CASE_VECTOR_SHORTEN_MODE): Fix distance\n \tfor tbh instructions.\n \n-2011-08-12   Diego Novillo  <dnovillo@google.com>\n+2011-08-12  Diego Novillo  <dnovillo@google.com>\n \n \t* data-streamer.h (streamer_write_zero): Rename from output_zero.\n \t(streamer_write_uhwi): Rename from lto_output_uleb128.\n@@ -786,8 +787,7 @@\n \n 2011-08-12  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-vrp.c (extract_range_from_unary_expr_1): Implement\n-\t-X as 0 - X.\n+\t* tree-vrp.c (extract_range_from_unary_expr_1): Implement -X as 0 - X.\n \n 2011-08-12  Romain Geissler  <romain.geissler@gmail.com>\n "}, {"sha": "bdcbd26538ffefa88ab897142c569c0e5622c863", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198cb1664a59ee3b71661952b471015af5edec2d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198cb1664a59ee3b71661952b471015af5edec2d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=198cb1664a59ee3b71661952b471015af5edec2d", "patch": "@@ -32700,42 +32700,44 @@ void\n ix86_expand_round_sse4 (rtx op0, rtx op1)\n {\n   enum machine_mode mode = GET_MODE (op0);\n-  rtx e1, e2, e3, res, half, mask;\n+  rtx e1, e2, res, half;\n   const struct real_format *fmt;\n   REAL_VALUE_TYPE pred_half, half_minus_pred_half;\n+  rtx (*gen_copysign) (rtx, rtx, rtx);\n   rtx (*gen_round) (rtx, rtx, rtx);\n \n   switch (mode)\n     {\n     case SFmode:\n+      gen_copysign = gen_copysignsf3;\n       gen_round = gen_sse4_1_roundsf2;\n       break;\n     case DFmode:\n+      gen_copysign = gen_copysigndf3;\n       gen_round = gen_sse4_1_rounddf2;\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  /* e1 = fabs(op1) */\n-  e1 = ix86_expand_sse_fabs (op1, &mask);\n+  /* round (a) = trunc (a + copysign (0.5, a)) */\n \n   /* load nextafter (0.5, 0.0) */\n   fmt = REAL_MODE_FORMAT (mode);\n   real_2expN (&half_minus_pred_half, -(fmt->p) - 1, mode);\n   REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+  half = const_double_from_real_value (pred_half, mode);\n \n-  /* e2 = e1 + 0.5 */\n-  half = force_reg (mode, const_double_from_real_value (pred_half, mode));\n-  e2 = expand_simple_binop (mode, PLUS, e1, half, NULL_RTX, 0, OPTAB_DIRECT);\n+  /* e1 = copysign (0.5, op1) */\n+  e1 = gen_reg_rtx (mode);\n+  emit_insn (gen_copysign (e1, half, op1));\n \n-  /* e3 = trunc(e2) */\n-  e3 = gen_reg_rtx (mode);\n-  emit_insn (gen_round (e3, e2, GEN_INT (ROUND_TRUNC)));\n+  /* e2 = op1 + e1 */\n+  e2 = expand_simple_binop (mode, PLUS, op1, e1, NULL_RTX, 0, OPTAB_DIRECT);\n \n-  /* res = copysign (e3, op1) */\n+  /* res = trunc (e2) */\n   res = gen_reg_rtx (mode);\n-  ix86_sse_copysign_to_positive (res, e3, op1, mask);\n+  emit_insn (gen_round (res, e2, GEN_INT (ROUND_TRUNC)));\n \n   emit_move_insn (op0, res);\n }"}]}