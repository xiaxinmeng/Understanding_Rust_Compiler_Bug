{"sha": "87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2MzdkMjFjMGVhYjU5YWU5YmE0Y2E3YjM1OTNmZTg0N2NjMWJlZA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-01-27T04:45:20Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-01-27T04:45:20Z"}, "message": "re PR tree-optimization/19633 (local address incorrectly thought to escape)\n\n\n\tPR tree-optimization/19633\n\t* tree-ssa-alias.c (ptr_is_dereferenced_by): Also handle\n\tCALL_EXPRs.\n\t(maybe_create_global_var): Do not create .GLOBAL_VAR if there\n\tare no call-clobbered variables.\n\t* tree-outof-ssa.c (check_replaceable): Return false for calls\n\twith side-effects.\n\ntestsuite/ChangeLog\n\n\tPR tree-optimization/19633\n\t* gcc.dg/pr19633.c: New test.\n\t* gcc.dg/tree-ssa/pr19633.c: New test.\n\nFrom-SVN: r94311", "tree": {"sha": "839beaf956bc6b73ae54db4610def572b171b9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/839beaf956bc6b73ae54db4610def572b171b9e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/comments", "author": null, "committer": null, "parents": [{"sha": "9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff93eb01ce59be5d7b26428df5e5bf6671bce86"}], "stats": {"total": 122, "additions": 102, "deletions": 20}, "files": [{"sha": "04ef3579952a16b68706c5510ea86d5cfaf63162", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "patch": "@@ -1,3 +1,13 @@\n+2005-01-26  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/19633\n+\t* tree-ssa-alias.c (ptr_is_dereferenced_by): Also handle\n+\tCALL_EXPRs.\n+\t(maybe_create_global_var): Do not create .GLOBAL_VAR if there\n+\tare no call-clobbered variables.\n+\t* tree-outof-ssa.c (check_replaceable): Return false for calls\n+\twith side-effects.\n+\n 2005-01-26  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* dbxout.c (dbxout_symbol_location): Resolve constant pool references"}, {"sha": "deceb4abe19d366355221374b6d6f53e64844865", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "patch": "@@ -1,3 +1,9 @@\n+2005-01-26  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/19633\n+\t* gcc.dg/pr19633.c: New test.\n+\t* gcc.dg/tree-ssa/pr19633.c: New test.\n+\n 2005-01-26  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gcc.dg/20041216-1.c: New test."}, {"sha": "4e18375656f3059a4416593ff805c0474dbcbf71", "filename": "gcc/testsuite/gcc.dg/pr19633.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19633.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19633.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19633.c?ref=87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+struct S\n+{\n+  int w, x, y, z;\n+};\n+\n+struct T\n+{\n+  int r;\n+  struct S s;\n+};\n+\n+void\n+foo (int a, struct T b)\n+{\n+  struct S x;\n+  struct S *c = &x;\n+  if (a)\n+    c = &b.s;\n+  b.s.w = 3;\n+  bar (*c, a);\n+  if (b.s.w != 3)\n+    link_error ();\n+}\n+\n+int main ()\n+{\n+  struct T b;\n+  foo (3, b);\n+  return 0;\n+}\n+\n+int X;\n+\n+int bar (struct S x, int i)\n+{\n+  X = 3;\n+}"}, {"sha": "88cbfe222d79113bfcda6ab80536ee17cdb3a545", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19633.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19633.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19633.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19633.c?ref=87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-ssa-vops\" } */\n+struct S\n+{\n+  int w, x, y, z;\n+};\n+struct T\n+{\n+  int r;\n+  struct S s;\n+};\n+void bar (struct S, int);\n+void\n+foo (int a, struct T b)\n+{\n+  struct S x;\n+  struct S *c = &x;\n+  if (a)\n+    c = &b.s;\n+  bar (*c, a);\n+}\n+\n+/* Make sure that .GLOBAL_VAR is not created when there are no\n+   clobbering calls.  */\n+/* { dg-final { scan-tree-dump-times \"GLOBAL_VAR\" 0 \"ssa\"} } */"}, {"sha": "430e8cae58a6e2b28afe2498b52497efee0f1b4b", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "patch": "@@ -1460,6 +1460,7 @@ check_replaceable (temp_expr_table_p tab, tree stmt)\n   int num_use_ops, version;\n   var_map map = tab->map;\n   ssa_op_iter iter;\n+  tree call_expr;\n \n   if (TREE_CODE (stmt) != MODIFY_EXPR)\n     return false;\n@@ -1486,6 +1487,15 @@ check_replaceable (temp_expr_table_p tab, tree stmt)\n   if (flag_float_store && FLOAT_TYPE_P (TREE_TYPE (TREE_OPERAND (stmt, 1))))\n     return false;\n \n+  /* Calls to functions with side-effects cannot be replaced.  */\n+  if ((call_expr = get_call_expr_in (stmt)) != NULL_TREE)\n+    {\n+      int call_flags = call_expr_flags (call_expr);\n+      if (TREE_SIDE_EFFECTS (call_expr)\n+\t  && !(call_flags & (ECF_PURE | ECF_CONST | ECF_NORETURN)))\n+\treturn false;\n+    }\n+\n   uses = USE_OPS (ann);\n   num_use_ops = NUM_USES (uses);\n   vuseops = VUSE_OPS (ann);"}, {"sha": "da11fd03fa1bd7a92386ba4bded4691331ad3ac3", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87637d21c0eab59ae9ba4ca7b3593fe847cc1bed/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=87637d21c0eab59ae9ba4ca7b3593fe847cc1bed", "patch": "@@ -621,6 +621,16 @@ ptr_is_dereferenced_by (tree ptr, tree stmt, bool *is_store)\n \t  return true;\n \t}\n     }\n+  else\n+    {\n+      /* CALL_EXPRs may also contain pointer dereferences for types\n+\t that are not GIMPLE register types.  If the CALL_EXPR is on\n+\t the RHS of an assignment, it will be handled by the\n+\t MODIFY_EXPR handler above.  */\n+      tree call = get_call_expr_in (stmt);\n+      if (call && walk_tree (&call, find_ptr_dereference, ptr, NULL))\n+\treturn true;\n+    }\n \n   return false;\n }\n@@ -1538,26 +1548,7 @@ maybe_create_global_var (struct alias_info *ai)\n \t  n_clobbered++;\n \t}\n \n-      /* Create .GLOBAL_VAR if we have too many call-clobbered\n-\t variables.  We also create .GLOBAL_VAR when there no\n-\t call-clobbered variables to prevent code motion\n-\t transformations from re-arranging function calls that may\n-\t have side effects.  For instance,\n-\n-\t\tfoo ()\n-\t\t{\n-\t\t  int a = f ();\n-\t\t  g ();\n-\t\t  h (a);\n-\t\t}\n-\n-\t There are no call-clobbered variables in foo(), so it would\n-\t be entirely possible for a pass to want to move the call to\n-\t f() after the call to g().  If f() has side effects, that\n-\t would be wrong.  Creating .GLOBAL_VAR in this case will\n-\t insert VDEFs for it and prevent such transformations.  */\n-      if (n_clobbered == 0\n-\t  || ai->num_calls_found * n_clobbered >= (size_t) GLOBAL_VAR_THRESHOLD)\n+      if (ai->num_calls_found * n_clobbered >= (size_t) GLOBAL_VAR_THRESHOLD)\n \tcreate_global_var ();\n     }\n "}]}