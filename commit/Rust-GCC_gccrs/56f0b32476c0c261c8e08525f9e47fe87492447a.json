{"sha": "56f0b32476c0c261c8e08525f9e47fe87492447a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmMGIzMjQ3NmMwYzI2MWM4ZTA4NTI1ZjllNDdmZTg3NDkyNDQ3YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-31T09:02:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-31T09:02:47Z"}, "message": "forwprop: Pattern recognize more rotates [PR94344]\n\nThe following patch adjusts simplify_rotate to recognize more rotates,\nbasically we allow even some same precision integral -> integral\nconversions, with the requirement that the RSHIFT_EXPR operand has to be\ndone in unsigned type (i.e. logical right shift), so that we compensate for\nthe combiner no longer being able to simplify those into rotates on some\ntargets.\n\n2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/94344\n\t* tree-ssa-forwprop.c (simplify_rotate): Handle also same precision\n\tconversions, either on both operands of |^+ or just one.  Handle\n\talso extra same precision conversion on RSHIFT_EXPR first operand\n\tprovided RSHIFT_EXPR is performed in unsigned type.\n\n\t* gcc.dg/pr94344.c: New test.", "tree": {"sha": "9bd8bdfd482cd1e573cbe745c71bb9aae5a741dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bd8bdfd482cd1e573cbe745c71bb9aae5a741dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f0b32476c0c261c8e08525f9e47fe87492447a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f0b32476c0c261c8e08525f9e47fe87492447a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f0b32476c0c261c8e08525f9e47fe87492447a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f0b32476c0c261c8e08525f9e47fe87492447a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3809bcd6c0ee324cbd855c68cee104c8bf134dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3809bcd6c0ee324cbd855c68cee104c8bf134dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3809bcd6c0ee324cbd855c68cee104c8bf134dbe"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "f7d1ccf72b6bbbe8ce903f4e9bc970c0e0f78d26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56f0b32476c0c261c8e08525f9e47fe87492447a", "patch": "@@ -1,3 +1,11 @@\n+2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/94344\n+\t* tree-ssa-forwprop.c (simplify_rotate): Handle also same precision\n+\tconversions, either on both operands of |^+ or just one.  Handle\n+\talso extra same precision conversion on RSHIFT_EXPR first operand\n+\tprovided RSHIFT_EXPR is performed in unsigned type.\n+\n 2020-03-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* lra.c (finish_insn_code_data_once): Set the array elements"}, {"sha": "14faa3faa32c534a5c99dc6637316f591fef1bb1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56f0b32476c0c261c8e08525f9e47fe87492447a", "patch": "@@ -1,3 +1,8 @@\n+2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/94344\n+\t* gcc.dg/pr94344.c: New test.\n+\n 2020-03-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/all-non-failing-tests.h: Add test-empty.c"}, {"sha": "361e16eab2d1d05844fd5b0c8f1b31a9a7182ecd", "filename": "gcc/testsuite/gcc.dg/pr94344.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94344.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94344.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94344.c?ref=56f0b32476c0c261c8e08525f9e47fe87492447a", "patch": "@@ -0,0 +1,53 @@\n+/* PR rtl-optimization/94344 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+/* { dg-final { scan-tree-dump-times \" r>> 27;\" 4 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \" r>> 59;\" 4 \"forwprop1\" } } */\n+\n+int\n+f1 (int x)\n+{\n+  return (x << 5) | (int)((unsigned int)x >> 27);\n+}\n+\n+unsigned int\n+f2 (int x)\n+{\n+  return (x << 5) | ((unsigned int)x >> 27);\n+}\n+\n+long long int\n+f3 (long long int x)\n+{\n+  return (x << 5) | (long long int)((unsigned long long int)x >> 59);\n+}\n+\n+unsigned long long int\n+f4 (long long int x)\n+{\n+  return (x << 5) | ((unsigned long long int)x >> 59);\n+}\n+\n+int\n+f5 (int x)\n+{\n+  return (int)((unsigned int)x >> 27) | (x << 5);\n+}\n+\n+unsigned int\n+f6 (int x)\n+{\n+  return ((unsigned int)x >> 27) | (x << 5);\n+}\n+\n+long long int\n+f7 (long long int x)\n+{\n+  return (long long int)((unsigned long long int)x >> 59) | (x << 5);\n+}\n+\n+unsigned long long int\n+f8 (long long int x)\n+{\n+  return ((unsigned long long int)x >> 59) | (x << 5);\n+}"}, {"sha": "e7eaa18ccad2486ec04eaf3a942f282db3d95702", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f0b32476c0c261c8e08525f9e47fe87492447a/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=56f0b32476c0c261c8e08525f9e47fe87492447a", "patch": "@@ -1562,14 +1562,14 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n   for (i = 0; i < 2; i++)\n     defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n \n-  /* Look through narrowing conversions.  */\n+  /* Look through narrowing (or same precision) conversions.  */\n   if (CONVERT_EXPR_CODE_P (def_code[0])\n       && CONVERT_EXPR_CODE_P (def_code[1])\n       && INTEGRAL_TYPE_P (TREE_TYPE (def_arg1[0]))\n       && INTEGRAL_TYPE_P (TREE_TYPE (def_arg1[1]))\n       && TYPE_PRECISION (TREE_TYPE (def_arg1[0]))\n \t == TYPE_PRECISION (TREE_TYPE (def_arg1[1]))\n-      && TYPE_PRECISION (TREE_TYPE (def_arg1[0])) > TYPE_PRECISION (rtype)\n+      && TYPE_PRECISION (TREE_TYPE (def_arg1[0])) >= TYPE_PRECISION (rtype)\n       && has_single_use (arg[0])\n       && has_single_use (arg[1]))\n     {\n@@ -1579,6 +1579,21 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t  defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n \t}\n     }\n+  else\n+    {\n+      /* Handle signed rotate; the RSHIFT_EXPR has to be done\n+\t in unsigned type but LSHIFT_EXPR could be signed.  */\n+      i = (def_code[0] == LSHIFT_EXPR || def_code[0] == RSHIFT_EXPR);\n+      if (CONVERT_EXPR_CODE_P (def_code[i])\n+\t  && (def_code[1 - i] == LSHIFT_EXPR || def_code[1 - i] == RSHIFT_EXPR)\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (def_arg1[i]))\n+\t  && TYPE_PRECISION (rtype) == TYPE_PRECISION (TREE_TYPE (def_arg1[i]))\n+\t  && has_single_use (arg[i]))\n+\t{\n+\t  arg[i] = def_arg1[i];\n+\t  defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n+\t}\n+    }\n \n   /* One operand has to be LSHIFT_EXPR and one RSHIFT_EXPR.  */\n   for (i = 0; i < 2; i++)\n@@ -1608,8 +1623,33 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n   if (!operand_equal_for_phi_arg_p (def_arg1[0], def_arg1[1])\n       || !types_compatible_p (TREE_TYPE (def_arg1[0]),\n \t\t\t      TREE_TYPE (def_arg1[1])))\n-    return false;\n-  if (!TYPE_UNSIGNED (TREE_TYPE (def_arg1[0])))\n+    {\n+      if ((TYPE_PRECISION (TREE_TYPE (def_arg1[0]))\n+\t   != TYPE_PRECISION (TREE_TYPE (def_arg1[1])))\n+\t  || (TYPE_UNSIGNED (TREE_TYPE (def_arg1[0]))\n+\t      == TYPE_UNSIGNED (TREE_TYPE (def_arg1[1]))))\n+\treturn false;\n+\n+      /* Handle signed rotate; the RSHIFT_EXPR has to be done\n+\t in unsigned type but LSHIFT_EXPR could be signed.  */\n+      i = def_code[0] != RSHIFT_EXPR;\n+      if (!TYPE_UNSIGNED (TREE_TYPE (def_arg1[i])))\n+\treturn false;\n+\n+      tree tem;\n+      enum tree_code code;\n+      defcodefor_name (def_arg1[i], &code, &tem, NULL);\n+      if (!CONVERT_EXPR_CODE_P (code)\n+\t  || !INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t  || TYPE_PRECISION (TREE_TYPE (tem)) != TYPE_PRECISION (rtype))\n+\treturn false;\n+      def_arg1[i] = tem;\n+      if (!operand_equal_for_phi_arg_p (def_arg1[0], def_arg1[1])\n+\t  || !types_compatible_p (TREE_TYPE (def_arg1[0]),\n+\t\t\t\t  TREE_TYPE (def_arg1[1])))\n+\treturn false;\n+    }\n+  else if (!TYPE_UNSIGNED (TREE_TYPE (def_arg1[0])))\n     return false;\n \n   /* CNT1 + CNT2 == B case above.  */"}]}