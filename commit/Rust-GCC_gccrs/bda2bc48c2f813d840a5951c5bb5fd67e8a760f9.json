{"sha": "bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhMmJjNDhjMmY4MTNkODQwYTU5NTFjNWJiNWZkNjdlOGE3NjBmOQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2017-01-23T13:05:00Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2017-01-23T13:05:00Z"}, "message": "Fix compute_complex_assign_jump_func\n\n2017-01-23  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.c (load_from_param_1): Removed.\n\t(load_from_unmodified_param): Bits from load_from_param_1 put back\n\there.\n\t(load_from_param): Removed.\n\t(compute_complex_assign_jump_func): Removed stmt2 and just replaced it\n\twith stmt.  Reverted back to use of load_from_unmodified_param.\n\ntestsuite/\n\t* gcc.dg/ipa/vrp8.c: New test.\n\nFrom-SVN: r244803", "tree": {"sha": "fd888539f06e2b3b1974d923013898a59c5f4412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd888539f06e2b3b1974d923013898a59c5f4412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f65f1ae3b9d81f5a0cb7abd41b30ebaf4b8f19b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65f1ae3b9d81f5a0cb7abd41b30ebaf4b8f19b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65f1ae3b9d81f5a0cb7abd41b30ebaf4b8f19b9"}], "stats": {"total": 123, "additions": 71, "deletions": 52}, "files": [{"sha": "3ade7c76e279688853250df6bbca798ec145bc2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "patch": "@@ -1,3 +1,12 @@\n+2017-01-23  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.c (load_from_param_1): Removed.\n+\t(load_from_unmodified_param): Bits from load_from_param_1 put back\n+\there.\n+\t(load_from_param): Removed.\n+\t(compute_complex_assign_jump_func): Removed stmt2 and just replaced it\n+\twith stmt.  Reverted back to use of load_from_unmodified_param.\n+\n 2017-01-23  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/79108"}, {"sha": "512bcbed0cbdee18ff4253e21c77965eb73ee5db", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 16, "deletions": 52, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "patch": "@@ -862,31 +862,6 @@ parm_preserved_before_stmt_p (struct ipa_func_body_info *fbi, int index,\n   return !modified;\n }\n \n-/* Main worker for load_from_unmodified_param and load_from_param.\n-   If STMT is an assignment that loads a value from an parameter declaration,\n-   return the index of the parameter in ipa_node_params.  Otherwise return -1.  */\n-\n-static int\n-load_from_param_1 (struct ipa_func_body_info *fbi,\n-\t\t   vec<ipa_param_descriptor, va_gc> *descriptors,\n-\t\t   gimple *stmt)\n-{\n-  int index;\n-  tree op1;\n-\n-  gcc_checking_assert (is_gimple_assign (stmt));\n-  op1 = gimple_assign_rhs1 (stmt);\n-  if (TREE_CODE (op1) != PARM_DECL)\n-    return -1;\n-\n-  index = ipa_get_param_decl_index_1 (descriptors, op1);\n-  if (index < 0\n-      || !parm_preserved_before_stmt_p (fbi, index, stmt, op1))\n-    return -1;\n-\n-  return index;\n-}\n-\n /* If STMT is an assignment that loads a value from an parameter declaration,\n    return the index of the parameter in ipa_node_params which has not been\n    modified.  Otherwise return -1.  */\n@@ -896,29 +871,22 @@ load_from_unmodified_param (struct ipa_func_body_info *fbi,\n \t\t\t    vec<ipa_param_descriptor, va_gc> *descriptors,\n \t\t\t    gimple *stmt)\n {\n+  int index;\n+  tree op1;\n+\n   if (!gimple_assign_single_p (stmt))\n     return -1;\n \n-  return load_from_param_1 (fbi, descriptors, stmt);\n-}\n-\n-/* If STMT is an assignment that loads a value from an parameter declaration,\n-   return the index of the parameter in ipa_node_params.  Otherwise return -1.  */\n-\n-static int\n-load_from_param (struct ipa_func_body_info *fbi,\n-\t\t vec<ipa_param_descriptor, va_gc> *descriptors,\n-\t\t gimple *stmt)\n-{\n-  if (!is_gimple_assign (stmt))\n+  op1 = gimple_assign_rhs1 (stmt);\n+  if (TREE_CODE (op1) != PARM_DECL)\n     return -1;\n \n-  enum tree_code rhs_code = gimple_assign_rhs_code (stmt);\n-  if ((get_gimple_rhs_class (rhs_code) != GIMPLE_SINGLE_RHS)\n-      && (get_gimple_rhs_class (rhs_code) != GIMPLE_UNARY_RHS))\n+  index = ipa_get_param_decl_index_1 (descriptors, op1);\n+  if (index < 0\n+      || !parm_preserved_before_stmt_p (fbi, index, stmt, op1))\n     return -1;\n \n-  return load_from_param_1 (fbi, descriptors, stmt);\n+  return index;\n }\n \n /* Return true if memory reference REF (which must be a load through parameter\n@@ -1154,7 +1122,6 @@ compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n   tree op1, tc_ssa, base, ssa;\n   bool reverse;\n   int index;\n-  gimple *stmt2 = stmt;\n \n   op1 = gimple_assign_rhs1 (stmt);\n \n@@ -1163,16 +1130,13 @@ compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n       if (SSA_NAME_IS_DEFAULT_DEF (op1))\n \tindex = ipa_get_param_decl_index (info, SSA_NAME_VAR (op1));\n       else\n-\t{\n-\t  index = load_from_param (fbi, info->descriptors,\n-\t\t\t\t   SSA_NAME_DEF_STMT (op1));\n-\t  stmt2 = SSA_NAME_DEF_STMT (op1);\n-\t}\n+\tindex = load_from_unmodified_param (fbi, info->descriptors,\n+\t\t\t\t\t    SSA_NAME_DEF_STMT (op1));\n       tc_ssa = op1;\n     }\n   else\n     {\n-      index = load_from_param (fbi, info->descriptors, stmt);\n+      index = load_from_unmodified_param (fbi, info->descriptors, stmt);\n       tc_ssa = gimple_assign_lhs (stmt);\n     }\n \n@@ -1202,11 +1166,11 @@ compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n \t    break;\n \t  }\n \tcase GIMPLE_UNARY_RHS:\n-\t  if (is_gimple_assign (stmt2)\n-\t      && gimple_assign_rhs_class (stmt2) == GIMPLE_UNARY_RHS\n-\t      && ! CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt2)))\n+\t  if (is_gimple_assign (stmt)\n+\t      && gimple_assign_rhs_class (stmt) == GIMPLE_UNARY_RHS\n+\t      && ! CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt)))\n \t    ipa_set_jf_unary_pass_through (jfunc, index,\n-\t\t\t\t\t   gimple_assign_rhs_code (stmt2));\n+\t\t\t\t\t   gimple_assign_rhs_code (stmt));\n \tdefault:;\n \t}\n       return;"}, {"sha": "d53090552ac2a18452c6f4328be5b241cc2b57b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "patch": "@@ -1,3 +1,7 @@\n+2017-01-23  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/vrp8.c: New test.\n+\n 2017-01-23  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/79108"}, {"sha": "55832b0886e5d52be28a0a42405b4e4fc51e4bd7", "filename": "gcc/testsuite/gcc.dg/ipa/vrp8.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda2bc48c2f813d840a5951c5bb5fd67e8a760f9/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp8.c?ref=bda2bc48c2f813d840a5951c5bb5fd67e8a760f9", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-cp-details\" } */\n+\n+volatile int cond;\n+int abs (int);\n+\n+volatile int g;\n+\n+int __attribute__((noinline, noclone))\n+take_address (int *p)\n+{\n+  g = *p;\n+}\n+\n+static int __attribute__((noinline, noclone))\n+foo (int i)\n+{\n+  if (i < 5)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+static int __attribute__((noinline, noclone))\n+bar (int j)\n+{\n+  foo (~j);\n+  foo (abs (j));\n+  foo (j);\n+  take_address (&j);\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  for (unsigned int i = 0; i < 10; ++i)\n+    bar (i);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Setting value range of param 0 \\\\\\[-10, 9\\\\\\]\" 1 \"cp\" } } */"}]}