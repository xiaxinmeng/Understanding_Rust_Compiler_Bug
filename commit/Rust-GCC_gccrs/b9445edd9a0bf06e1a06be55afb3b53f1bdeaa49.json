{"sha": "b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0NDVlZGQ5YTBiZjA2ZTFhMDZiZTU1YWZiM2I1M2YxYmRlYWE0OQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-08-04T11:30:06Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-08-04T11:30:06Z"}, "message": "re PR c++/11713 (declaration conflicts)\n\n\tPR c++/11713\n\t* search.c (setup_class_bindings): Handle conversion operators\n\tspecially.\n\n\tPR c++/11713\n\t* g++.dg/overload/operator1.C: New test.\n\nFrom-SVN: r70136", "tree": {"sha": "1395990e284717f4831de3f2654ce356905a48f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1395990e284717f4831de3f2654ce356905a48f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49/comments", "author": null, "committer": null, "parents": [{"sha": "f9eb610fbeb3e02b9006549a4e39fd7d242abe68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9eb610fbeb3e02b9006549a4e39fd7d242abe68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9eb610fbeb3e02b9006549a4e39fd7d242abe68"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "c64637519261d184e3aee2554d5a863176678991", "filename": "gcc/cp/search.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49", "patch": "@@ -2123,6 +2123,20 @@ setup_class_bindings (tree name, int type_binding_p)\n \t  if (BASELINK_P (value_binding))\n \t    /* NAME is some overloaded functions.  */\n \t    value_binding = BASELINK_FUNCTIONS (value_binding);\n+\t  /* Two conversion operators that convert to the same type\n+\t     may have different names.  (See\n+\t     mangle_conv_op_name_for_type.)  To avoid recording the\n+\t     same conversion operator declaration more than once we\n+\t     must check to see that the same operator was not already\n+\t     found under another name.  */\n+\t  if (IDENTIFIER_TYPENAME_P (name)\n+\t      && is_overloaded_fn (value_binding))\n+\t    {\n+\t      tree fns;\n+\t      for (fns = value_binding; fns; fns = OVL_NEXT (fns))\n+\t\tif (IDENTIFIER_CLASS_VALUE (DECL_NAME (OVL_CURRENT (fns))))\n+\t\t  return;\n+\t    }\n \t  pushdecl_class_level (value_binding);\n \t}\n     }"}, {"sha": "f4d1f53f14e4ccdd0d94ea9a87ef867d5ef5df39", "filename": "gcc/testsuite/g++.dg/overload/operator1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator1.C?ref=b9445edd9a0bf06e1a06be55afb3b53f1bdeaa49", "patch": "@@ -0,0 +1,34 @@\n+typedef struct _GdkDrawable GdkDrawable; \n+typedef struct _GdkDrawable GdkBitmap; \n+typedef struct _GdkDrawable GdkPixmap; \n+ \n+class Drawable \n+{ \n+public: \n+ operator GdkDrawable* () const; \n+}; \n+ \n+ \n+class Pixmap : public Drawable \n+{ \n+public: \n+ operator GdkPixmap* () const; \n+ \n+}; \n+ \n+ \n+class Bitmap : public Pixmap \n+{ \n+public: \n+  operator GdkBitmap* () const; \n+ \n+}; \n+ \n+class Event \n+{ \n+}; \n+ \n+Bitmap::operator GdkBitmap* () const \n+{ \n+ return  0; \n+} "}]}