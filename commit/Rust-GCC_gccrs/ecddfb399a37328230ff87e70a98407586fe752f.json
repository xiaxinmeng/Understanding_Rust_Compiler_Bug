{"sha": "ecddfb399a37328230ff87e70a98407586fe752f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkZGZiMzk5YTM3MzI4MjMwZmY4N2U3MGE5ODQwNzU4NmZlNzUyZg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2005-02-09T01:23:56Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-02-09T01:23:56Z"}, "message": "files.c (pchf_adder): Remove.\n\n        * files.c (pchf_adder): Remove.\n        (struct pchf_adder_info): Likewise.\n        (_cpp_save_file_entries): Write out all files so that #import works.\n\nFrom-SVN: r94755", "tree": {"sha": "6d440928c64118350df14897f5c21a8300aea58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d440928c64118350df14897f5c21a8300aea58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecddfb399a37328230ff87e70a98407586fe752f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecddfb399a37328230ff87e70a98407586fe752f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecddfb399a37328230ff87e70a98407586fe752f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecddfb399a37328230ff87e70a98407586fe752f/comments", "author": null, "committer": null, "parents": [{"sha": "996f05787dacfaa44ce6b9c4a8e2bc6e09dd9e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996f05787dacfaa44ce6b9c4a8e2bc6e09dd9e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996f05787dacfaa44ce6b9c4a8e2bc6e09dd9e4b"}], "stats": {"total": 124, "additions": 67, "deletions": 57}, "files": [{"sha": "952c0a74142f2afa6521b865d9b972de725aa737", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecddfb399a37328230ff87e70a98407586fe752f", "patch": "@@ -1,3 +1,10 @@\n+2005-02-08  Mike Stump  <mrs@apple.com>\n+\n+\t* g++.dg/pch/import-2.c: New test.\n+\t* g++.dg/pch/import-2.hs: New.\n+\t* g++.dg/pch/include/import-2a.h: New.\n+\t* g++.dg/pch/include/import-2b.h: New.\n+\n 2005-02-08  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/uninit-4.c: XFAIL bogus warning for powerpc64."}, {"sha": "f9535688182130285e028932f1c95767f2cb8deb", "filename": "gcc/testsuite/gcc.dg/pch/import-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.c?ref=ecddfb399a37328230ff87e70a98407586fe752f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-I. -I $srcdir/gcc.dg/pch/include\" } */\n+\n+#include \"import-2.h\"\n+#import \"import-2b.h\"\n+\n+int main(int argc, char **argv) {\n+   return 0;\n+}"}, {"sha": "f9798c12266596f383512e70ebde2d1ebeb8e550", "filename": "gcc/testsuite/gcc.dg/pch/import-2.hs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fimport-2.hs?ref=ecddfb399a37328230ff87e70a98407586fe752f", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-options \"-I $srcdir/gcc.dg/pch/include\" } */\n+\n+#import \"import-2b.h\"\n+#import \"import-2a.h\""}, {"sha": "bb3250cf6ae8fd409d521ca613bb0b06264628f3", "filename": "gcc/testsuite/gcc.dg/pch/include/import-2a.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Finclude%2Fimport-2a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Finclude%2Fimport-2a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Finclude%2Fimport-2a.h?ref=ecddfb399a37328230ff87e70a98407586fe752f", "patch": "@@ -0,0 +1 @@\n+#import \"import-2b.h\""}, {"sha": "ad10c62717c9d8ef78a6ed27b4cd0ef066467c5f", "filename": "gcc/testsuite/gcc.dg/pch/include/import-2b.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Finclude%2Fimport-2b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddfb399a37328230ff87e70a98407586fe752f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Finclude%2Fimport-2b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Finclude%2Fimport-2b.h?ref=ecddfb399a37328230ff87e70a98407586fe752f", "patch": "@@ -0,0 +1 @@\n+int dup = 9;"}, {"sha": "35e5369137dd10d7d78c26f14bf5e604a554991d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddfb399a37328230ff87e70a98407586fe752f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddfb399a37328230ff87e70a98407586fe752f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ecddfb399a37328230ff87e70a98407586fe752f", "patch": "@@ -1,3 +1,9 @@\n+2005-02-08  Mike Stump  <mrs@apple.com>\n+\n+\t* files.c (pchf_adder): Remove.\n+\t(struct pchf_adder_info): Likewise.\n+\t(_cpp_save_file_entries): Write out all files so that #import works.\n+\n 2005-01-23  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* configure: Regenerate."}, {"sha": "4ef72cd6111cc1b3fec53ffd8d667ef6aa5c4af7", "filename": "libcpp/files.c", "status": "modified", "additions": 40, "deletions": 57, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddfb399a37328230ff87e70a98407586fe752f/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddfb399a37328230ff87e70a98407586fe752f/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=ecddfb399a37328230ff87e70a98407586fe752f", "patch": "@@ -173,7 +173,6 @@ static void read_name_map (cpp_dir *dir);\n static char *remap_filename (cpp_reader *pfile, _cpp_file *file);\n static char *append_file_to_dir (const char *fname, cpp_dir *dir);\n static bool validate_pch (cpp_reader *, _cpp_file *file, const char *pchname);\n-static int pchf_adder (void **slot, void *data);\n static int pchf_save_compare (const void *e1, const void *e2);\n static int pchf_compare (const void *d_p, const void *e_p);\n static bool check_file_against_entries (cpp_reader *, _cpp_file *, bool);\n@@ -1448,95 +1447,79 @@ struct pchf_data {\n \n static struct pchf_data *pchf;\n \n-/* Data for pchf_addr.  */\n-struct pchf_adder_info\n+/* A qsort ordering function for pchf_entry structures.  */\n+\n+static int\n+pchf_save_compare (const void *e1, const void *e2)\n {\n-  cpp_reader *pfile;\n-  struct pchf_data *d;\n-};\n+  return memcmp (e1, e2, sizeof (struct pchf_entry));\n+}\n \n-/* A hash traversal function to add entries into DATA->D.  */\n+/* Create and write to F a pchf_data structure.  */\n \n-static int\n-pchf_adder (void **slot, void *data)\n+bool\n+_cpp_save_file_entries (cpp_reader *pfile, FILE *fp)\n {\n-  struct file_hash_entry *h = (struct file_hash_entry *) *slot;\n-  struct pchf_adder_info *i = (struct pchf_adder_info *) data;\n+  size_t count = 0;\n+  struct pchf_data *result;\n+  size_t result_size;\n+  _cpp_file *f;\n \n-  if (h->start_dir != NULL && h->u.file->stack_count != 0)\n+  for (f = pfile->all_files; f; f = f->next_file)\n+    ++count;\n+\n+  result_size = (sizeof (struct pchf_data)\n+\t\t + sizeof (struct pchf_entry) * (count - 1));\n+  result = xcalloc (result_size, 1);\n+\n+  result->count = 0;\n+  result->have_once_only = false;\n+\n+  for (f = pfile->all_files; f; f = f->next_file)\n     {\n-      struct pchf_data *d = i->d;\n-      _cpp_file *f = h->u.file;\n-      size_t count = d->count++;\n+      size_t count;\n \n       /* This should probably never happen, since if a read error occurred\n \t the PCH file shouldn't be written...  */\n       if (f->dont_read || f->err_no)\n-\treturn 1;\n+\tcontinue;\n+\n+      if (f->stack_count == 0)\n+\tcontinue;\n \n-      d->entries[count].once_only = f->once_only;\n+      count = result->count++;\n+\n+      result->entries[count].once_only = f->once_only;\n       /* |= is avoided in the next line because of an HP C compiler bug */\n-      d->have_once_only = d->have_once_only | f->once_only; \n+      result->have_once_only = result->have_once_only | f->once_only;\n       if (f->buffer_valid)\n-\t  md5_buffer ((const char *)f->buffer,\n-\t\t      f->st.st_size, d->entries[count].sum);\n+\tmd5_buffer ((const char *)f->buffer,\n+\t\t    f->st.st_size, result->entries[count].sum);\n       else\n \t{\n \t  FILE *ff;\n \t  int oldfd = f->fd;\n \n \t  if (!open_file (f))\n \t    {\n-\t      open_file_failed (i->pfile, f);\n-\t      return 0;\n+\t      open_file_failed (pfile, f);\n+\t      return false;\n \t    }\n \t  ff = fdopen (f->fd, \"rb\");\n-\t  md5_stream (ff, d->entries[count].sum);\n+\t  md5_stream (ff, result->entries[count].sum);\n \t  fclose (ff);\n \t  f->fd = oldfd;\n \t}\n-      d->entries[count].size = f->st.st_size;\n+      result->entries[count].size = f->st.st_size;\n     }\n-  return 1;\n-}\n-\n-/* A qsort ordering function for pchf_entry structures.  */\n-\n-static int\n-pchf_save_compare (const void *e1, const void *e2)\n-{\n-  return memcmp (e1, e2, sizeof (struct pchf_entry));\n-}\n-\n-/* Create and write to F a pchf_data structure.  */\n-\n-bool\n-_cpp_save_file_entries (cpp_reader *pfile, FILE *f)\n-{\n-  size_t count = 0;\n-  struct pchf_data *result;\n-  size_t result_size;\n-  struct pchf_adder_info pai;\n-\n-  count = htab_elements (pfile->file_hash);\n-  result_size = (sizeof (struct pchf_data)\n-\t\t + sizeof (struct pchf_entry) * (count - 1));\n-  result = xcalloc (result_size, 1);\n-\n-  result->count = 0;\n-  result->have_once_only = false;\n-\n-  pai.pfile = pfile;\n-  pai.d = result;\n-  htab_traverse (pfile->file_hash, pchf_adder, &pai);\n \n   result_size = (sizeof (struct pchf_data)\n                  + sizeof (struct pchf_entry) * (result->count - 1));\n \n   qsort (result->entries, result->count, sizeof (struct pchf_entry),\n \t pchf_save_compare);\n \n-  return fwrite (result, result_size, 1, f) == 1;\n+  return fwrite (result, result_size, 1, fp) == 1;\n }\n \n /* Read the pchf_data structure from F.  */"}]}