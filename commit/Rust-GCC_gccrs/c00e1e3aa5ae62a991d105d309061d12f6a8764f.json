{"sha": "c00e1e3aa5ae62a991d105d309061d12f6a8764f", "node_id": "C_kwDOANBUbNoAKGMwMGUxZTNhYTVhZTYyYTk5MWQxMDVkMzA5MDYxZDEyZjZhODc2NGY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-07T09:09:49Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-07T09:09:49Z"}, "message": "PR middle-end/105853: Call store_constructor directly from calls.cc.\n\nThis patch fixes both ICE regressions PR middle-end/105853 and\nPR target/105856 caused by my recent patch to expand small const structs\nas immediate constants.  That patch updated code generation in three\nplaces: two in expr.cc that call store_constructor directly, and the\nthird in calls.cc's load_register_parameters that expands its CONSTRUCTOR\nvia expand_expr, as store_constructor is local/static to expr.cc, and\nthe \"public\" API, should usually simply forward the constructor to the\nappropriate store_constructor function.\n\nAlas, despite the clean regression testing on multiple targets, the above\nICEs show that expand_expr isn't a suitable proxy for store_constructor,\nand things that (I'd assumed) shouldn't affect how/whether a struct is\nplaced in a register [such as whether the struct is considered packed/\naligned or not] actually interfere with the optimization that is being\nattempted.\n\nThe (proposed) solution is to export store_constructor (and it's helper\nfunction int_expr_size) from expr.cc, by removing their static qualifier\nand prototyping both functions in expr.h, so they can be called directly\nfrom load_register_parameters in calls.cc.  This cures both ICEs, but\nalmost as importantly improves code generation over GCC 12.\n\nFor PR 105853, GCC 12 generates:\n\ncompose_nd_na_ipv6_src:\n\tmovzx eax, WORD PTR eth_addr_zero[rip+2]\n\tmovzx edx, WORD PTR eth_addr_zero[rip]\n\tmovzx edi, WORD PTR eth_addr_zero[rip+4]\n\tsal rax, 16\n\tor rax, rdx\n\tsal rdi, 32\n\tor rdi, rax\n\txor eax, eax\n\tjmp packet_set_nd\neth_addr_zero:\t.zero 6\n\nwhere now (with this fix) GCC 13 generates:\ncompose_nd_na_ipv6_src:\n        xorl    %edi, %edi\n        xorl    %eax, %eax\n        jmp     packet_set_nd\n\nLikewise, for PR 105856 on ARM, we'd previously generate:\ng_329_3:\n\tmovw r3, #:lower16:.LANCHOR0\n\tmovt r3, #:upper16:.LANCHOR0\n\tldr r0, [r3]\n\tb func_19\n\nbut with this optimization we now generate:\ng_329_3:\n        mov     r0, #6\n        b       func_19\n\n2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR middle-end/105853\n\tPR target/105856\n\t* calls.cc (load_register_parameters): Call store_constructor\n\tand int_expr_size directly instead of expanding via expand_expr.\n\t* expr.cc (static void store_constructor): Don't prototype here.\n\t(static HOST_WIDE_INT int_expr_size): Likewise.\n\t(store_constructor): No longer static.\n\t(int_expr_size): Likewise, no longer static.\n\t* expr.h (store_constructor): Prototype here.\n\t(int_expr_size): Prototype here.\n\ngcc/testsuite/ChangeLog\n\tPR middle-end/105853\n\tPR target/105856\n\t* gcc.dg/pr105853.c: New test case.\n\t* gcc.dg/pr105856.c: New test case.", "tree": {"sha": "75bcd6c0007a3666c4b6e0603b2e797f9045edab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75bcd6c0007a3666c4b6e0603b2e797f9045edab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c00e1e3aa5ae62a991d105d309061d12f6a8764f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00e1e3aa5ae62a991d105d309061d12f6a8764f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00e1e3aa5ae62a991d105d309061d12f6a8764f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00e1e3aa5ae62a991d105d309061d12f6a8764f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef3f69c2f4cbc05aa3ec00f2fdbacfa8ca1d303"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "f4e1299505ed542f34a6873c3537b881ed288c98", "filename": "gcc/calls.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Fcalls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Fcalls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.cc?ref=c00e1e3aa5ae62a991d105d309061d12f6a8764f", "patch": "@@ -2186,10 +2186,11 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n \t\t   && immediate_const_ctor_p (DECL_INITIAL (tree_value)))\n \t    {\n \t      rtx target = gen_reg_rtx (word_mode);\n-\t      rtx x = expand_expr (DECL_INITIAL (tree_value),\n-\t\t\t\t   target, word_mode, EXPAND_NORMAL);\n+\t      store_constructor (DECL_INITIAL (tree_value), target, 0,\n+\t\t\t\t int_expr_size (DECL_INITIAL (tree_value)),\n+\t\t\t\t false);\n \t      reg = gen_rtx_REG (word_mode, REGNO (reg));\n-\t      emit_move_insn (reg, x);\n+\t      emit_move_insn (reg, target);\n \t    }\n \t  else if (partial == 0 || args[i].pass_on_stack)\n \t    {"}, {"sha": "85cb4141195a1834bc84c54453c53f7e6bb35fb4", "filename": "gcc/expr.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=c00e1e3aa5ae62a991d105d309061d12f6a8764f", "patch": "@@ -84,7 +84,6 @@ static void emit_block_move_via_loop (rtx, rtx, rtx, unsigned);\n static void clear_by_pieces (rtx, unsigned HOST_WIDE_INT, unsigned int);\n static rtx_insn *compress_float_constant (rtx, rtx);\n static rtx get_subtarget (rtx);\n-static void store_constructor (tree, rtx, int, poly_int64, bool);\n static rtx store_field (rtx, poly_int64, poly_int64, poly_uint64, poly_uint64,\n \t\t\tmachine_mode, tree, alias_set_type, bool, bool);\n \n@@ -100,7 +99,6 @@ static void do_tablejump (rtx, machine_mode, rtx, rtx, rtx,\n \t\t\t  profile_probability);\n static rtx const_vector_from_tree (tree);\n static tree tree_expr_size (const_tree);\n-static HOST_WIDE_INT int_expr_size (const_tree);\n static void convert_mode_scalar (rtx, rtx, int);\n \n \f\n@@ -6757,7 +6755,7 @@ fields_length (const_tree type)\n    which has been packed to exclude padding bits.\n    If REVERSE is true, the store is to be done in reverse order.  */\n \n-static void\n+void\n store_constructor (tree exp, rtx target, int cleared, poly_int64 size,\n \t\t   bool reverse)\n {\n@@ -13209,7 +13207,7 @@ expr_size (tree exp)\n /* Return a wide integer for the size in bytes of the value of EXP, or -1\n    if the size can vary or is larger than an integer.  */\n \n-static HOST_WIDE_INT\n+HOST_WIDE_INT\n int_expr_size (const_tree exp)\n {\n   tree size;"}, {"sha": "035118324057e9dcb56d08a998aa9b469295ae3e", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=c00e1e3aa5ae62a991d105d309061d12f6a8764f", "patch": "@@ -339,6 +339,8 @@ extern bool categorize_ctor_elements (const_tree, HOST_WIDE_INT *,\n \t\t\t\t      HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t      bool *);\n extern bool immediate_const_ctor_p (const_tree, unsigned int words = 1);\n+extern void store_constructor (tree, rtx, int, poly_int64, bool);\n+extern HOST_WIDE_INT int_expr_size (const_tree exp);\n \n extern void expand_operands (tree, tree, rtx, rtx*, rtx*,\n \t\t\t     enum expand_modifier);"}, {"sha": "4f234ac11d9752bab5c7eec30f3777613b6d3c08", "filename": "gcc/testsuite/gcc.dg/pr105853.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105853.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105853.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105853.c?ref=c00e1e3aa5ae62a991d105d309061d12f6a8764f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct {\n+  struct {\n+    short e16[3];\n+  }\n+} const eth_addr_zero = {{}};  /* { dg-warning \"no semicolon at\" } */\n+void compose_nd_na_ipv6_src() {\n+  packet_set_nd(eth_addr_zero); /* { dg-warning \"implicit declaration\" } */\n+}"}, {"sha": "dd3aa2f18c0938c0c78085f3a800f899ff6444bd", "filename": "gcc/testsuite/gcc.dg/pr105856.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00e1e3aa5ae62a991d105d309061d12f6a8764f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105856.c?ref=c00e1e3aa5ae62a991d105d309061d12f6a8764f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+#pragma pack(1)\n+struct {\n+  unsigned f0;\n+} static g_251 = {6};\n+void g_329_3() {\n+  func_19(g_251);  /* { dg-warning \"implicit declaration\" } */\n+}\n+"}]}