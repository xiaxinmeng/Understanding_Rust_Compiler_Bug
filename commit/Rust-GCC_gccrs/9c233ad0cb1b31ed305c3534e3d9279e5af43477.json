{"sha": "9c233ad0cb1b31ed305c3534e3d9279e5af43477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMyMzNhZDBjYjFiMzFlZDMwNWMzNTM0ZTNkOTI3OWU1YWY0MzQ3Nw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-10-18T22:26:39Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-10-18T22:26:39Z"}, "message": "PR tree-optimization/92157 - incorrect strcmp() == 0 result for unknown strings\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/92157\n\t* gcc.dg/strlenopt-69.c: Disable test failing due to PR 92155.\n\t* gcc.dg/strlenopt-87.c: New test.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/92157\n\t* tree-ssa-strlen.c (handle_builtin_string_cmp): Be prepared for\n\tcompute_string_length to return a negative result.\n\nFrom-SVN: r277194", "tree": {"sha": "e9f7c5dce019404c15ccc589c01af1b2b26ae813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9f7c5dce019404c15ccc589c01af1b2b26ae813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c233ad0cb1b31ed305c3534e3d9279e5af43477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c233ad0cb1b31ed305c3534e3d9279e5af43477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c233ad0cb1b31ed305c3534e3d9279e5af43477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c233ad0cb1b31ed305c3534e3d9279e5af43477/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8b9b1edef77be79b3f98021f9d1f24a1e986ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b9b1edef77be79b3f98021f9d1f24a1e986ffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b9b1edef77be79b3f98021f9d1f24a1e986ffd"}], "stats": {"total": 132, "additions": 130, "deletions": 2}, "files": [{"sha": "ccf870c2531f8ea6933747f24531cdd7b73b9e5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c233ad0cb1b31ed305c3534e3d9279e5af43477", "patch": "@@ -1,3 +1,9 @@\n+2019-10-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92157\n+\t* tree-ssa-strlen.c (handle_builtin_string_cmp): Be prepared for\n+\tcompute_string_length to return a negative result.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.md (negv<SIDI:mode>3): New expansion rule."}, {"sha": "1a87247323e94a572197902cbeeed7685e20290a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c233ad0cb1b31ed305c3534e3d9279e5af43477", "patch": "@@ -1,3 +1,9 @@\n+2019-10-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92157\n+\t* gcc.dg/strlenopt-69.c: Disable test failing due to PR 92155.\n+\t* gcc.dg/strlenopt-87.c: New test.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.target/arm/negdi-3.c: Update expected output to allow NEGS."}, {"sha": "9ad8e2e8aacad033bf000a1292da6b2eae1c1b76", "filename": "gcc/testsuite/gcc.dg/strlenopt-69.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-69.c?ref=9c233ad0cb1b31ed305c3534e3d9279e5af43477", "patch": "@@ -66,11 +66,14 @@ void test_empty_string (void)\n   b4[2] = '\\0';\n   A (0 == strcmp (&a4[2], &b4[2]));\n \n+#if 0\n+  /* The following isn't handled yet due to PR 92155.  */\n   clobber (a4, b4);\n \n   memset (a4, 0, sizeof a4);\n   memset (b4, 0, sizeof b4);\n   A (0 == strcmp (a4, b4));\n+#endif\n }\n \n /* Verify that comparison of dynamically created strings with unknown"}, {"sha": "082c7b2f7342d6ee759cbe41521a9f285571ad0b", "filename": "gcc/testsuite/gcc.dg/strlenopt-87.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-87.c?ref=9c233ad0cb1b31ed305c3534e3d9279e5af43477", "patch": "@@ -0,0 +1,105 @@\n+/* PR tree-optimization/92157 - incorrect strcmp() == 0 result for unknown\n+   strings\u200b\n+   { dg-do run }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#include \"strlenopt.h\"\n+\n+\n+char a2[2], a3[3];\n+\n+\n+static inline __attribute__ ((always_inline)) int\n+verify_not_equal (const char *s, const char *t, int x)\n+{\n+  int n = x < 0 ? strlen (s) : 0 < x ? strlen (t) : strlen (s) + strlen (t);\n+\n+  if (strcmp (t, s) == 0)\n+    abort ();\n+\n+  return n;\n+}\n+\n+__attribute__ ((noipa)) int test_a2_s (const char *s)\n+{\n+  return verify_not_equal (a2, s, 0);\n+}\n+\n+__attribute__ ((noipa)) int test_a2_a3 (void)\n+{\n+  return verify_not_equal (a2, a3, 0);\n+}\n+\n+__attribute__ ((noipa)) int test_a3_a2 (void)\n+{\n+  return verify_not_equal (a3, a2, 0);\n+}\n+\n+__attribute__ ((noipa)) int test_s_a2 (const char *s)\n+{\n+  return verify_not_equal (s, a2, 0);\n+}\n+\n+\n+__attribute__ ((noipa)) int test_a2_s_1 (const char *s)\n+{\n+  return verify_not_equal (a2, s, -1);\n+}\n+\n+__attribute__ ((noipa)) int test_a2_a3_1 (void)\n+{\n+  return verify_not_equal (a2, a3, -1);\n+}\n+\n+__attribute__ ((noipa)) int test_a3_a2_1 (void)\n+{\n+  return verify_not_equal (a3, a2, -1);\n+}\n+\n+__attribute__ ((noipa)) int test_s_a2_1 (const char *s)\n+{\n+  return verify_not_equal (s, a2, -1);\n+}\n+\n+\n+__attribute__ ((noipa)) int test_a2_s_2 (const char *s)\n+{\n+  return verify_not_equal (a2, s, +1);\n+}\n+\n+__attribute__ ((noipa)) int test_a2_a3_2 (void)\n+{\n+  return verify_not_equal (a2, a3, +1);\n+}\n+\n+__attribute__ ((noipa)) int test_a3_a2_2 (void)\n+{\n+  return verify_not_equal (a3, a2, +1);\n+}\n+\n+__attribute__ ((noipa)) int test_s_a2_2 (const char *s)\n+{\n+  return verify_not_equal (s, a2, +1);\n+}\n+\n+int main (void)\n+{\n+  a2[0] = '1';\n+  a3[0] = '1';\n+  a3[0] = '2';\n+\n+  test_a2_s (\"\");\n+  test_a2_a3 ();\n+  test_a3_a2 ();\n+  test_s_a2 (\"\");\n+\n+  test_a2_s_1 (\"\");\n+  test_a2_a3_1 ();\n+  test_a3_a2_1 ();\n+  test_s_a2_1 (\"\");\n+\n+  test_a2_s_2 (\"\");\n+  test_a2_a3_2 ();\n+  test_a3_a2_2 ();\n+  test_s_a2_2 (\"\");\n+}"}, {"sha": "43814584a147d8f1236ae541800144393e8097be", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c233ad0cb1b31ed305c3534e3d9279e5af43477/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=9c233ad0cb1b31ed305c3534e3d9279e5af43477", "patch": "@@ -3842,7 +3842,7 @@ handle_builtin_string_cmp (gimple_stmt_iterator *gsi)\n   HOST_WIDE_INT arysiz1 = -1, arysiz2 = -1;\n \n   if (idx1)\n-    cstlen1 = compute_string_length (idx1) + 1;\n+    cstlen1 = compute_string_length (idx1);\n   else\n     arysiz1 = determine_min_objsize (arg1);\n \n@@ -3853,13 +3853,21 @@ handle_builtin_string_cmp (gimple_stmt_iterator *gsi)\n \n   /* Repeat for the second argument.  */\n   if (idx2)\n-    cstlen2 = compute_string_length (idx2) + 1;\n+    cstlen2 = compute_string_length (idx2);\n   else\n     arysiz2 = determine_min_objsize (arg2);\n \n   if (cstlen2 < 0 && arysiz2 < 0)\n     return false;\n \n+  if (cstlen1 < 0 && cstlen2 < 0)\n+    return false;\n+\n+  if (cstlen1 >= 0)\n+    ++cstlen1;\n+  if (cstlen2 >= 0)\n+    ++cstlen2;\n+\n   /* The exact number of characters to compare.  */\n   HOST_WIDE_INT cmpsiz = bound < 0 ? cstlen1 < 0 ? cstlen2 : cstlen1 : bound;\n   /* The size of the array in which the unknown string is stored.  */"}]}