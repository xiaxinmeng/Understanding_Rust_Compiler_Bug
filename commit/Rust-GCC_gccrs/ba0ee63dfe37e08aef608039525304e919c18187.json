{"sha": "ba0ee63dfe37e08aef608039525304e919c18187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwZWU2M2RmZTM3ZTA4YWVmNjA4MDM5NTI1MzA0ZTkxOWMxODE4Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-05T15:44:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-05T15:44:23Z"}, "message": "gensupport.h (get_num_insn_codes): Declare.\n\ngcc/\n\t* gensupport.h (get_num_insn_codes): Declare.\n\t* gensupport.c (get_num_insn_codes): New function.\n\t* genattrtab.c (optimize_attrs): Rename max_insn_code to\n\tnum_insn_codes.\n\t(main): Likewise.  Use get_num_insn_codes.\n\t* gencodes.c (main): Remove \"last\" and use get_num_insn_codes.\n\nFrom-SVN: r226633", "tree": {"sha": "3bb6cba655f74f75d4e5a605da5b2ec1ef7cbeda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb6cba655f74f75d4e5a605da5b2ec1ef7cbeda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba0ee63dfe37e08aef608039525304e919c18187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0ee63dfe37e08aef608039525304e919c18187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0ee63dfe37e08aef608039525304e919c18187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0ee63dfe37e08aef608039525304e919c18187/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcc74ead1e18da4a7f096ee98424452bc13706da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc74ead1e18da4a7f096ee98424452bc13706da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc74ead1e18da4a7f096ee98424452bc13706da"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "ac7b170932f0850bcbd894fb48450c21b455aa3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba0ee63dfe37e08aef608039525304e919c18187", "patch": "@@ -1,3 +1,12 @@\n+2015-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gensupport.h (get_num_insn_codes): Declare.\n+\t* gensupport.c (get_num_insn_codes): New function.\n+\t* genattrtab.c (optimize_attrs): Rename max_insn_code to\n+\tnum_insn_codes.\n+\t(main): Likewise.  Use get_num_insn_codes.\n+\t* gencodes.c (main): Remove \"last\" and use get_num_insn_codes.\n+\n 2015-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/66311"}, {"sha": "932b18b12374aa876b9de29ed3a8f70a5cec4c0b", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=ba0ee63dfe37e08aef608039525304e919c18187", "patch": "@@ -2952,11 +2952,11 @@ get_attr_order (struct attr_desc ***ret)\n \n /* Optimize the attribute lists by seeing if we can determine conditional\n    values from the known values of other attributes.  This will save subroutine\n-   calls during the compilation.  MAX_INSN_CODE is the number of unique\n+   calls during the compilation.  NUM_INSN_CODES is the number of unique\n    instruction codes.  */\n \n static void\n-optimize_attrs (int max_insn_code)\n+optimize_attrs (int num_insn_codes)\n {\n   struct attr_desc *attr;\n   struct attr_value *av;\n@@ -2975,7 +2975,7 @@ optimize_attrs (int max_insn_code)\n     return;\n \n   /* Make 2 extra elements, for \"code\" values -2 and -1.  */\n-  insn_code_values = XCNEWVEC (struct attr_value_list *, max_insn_code + 2);\n+  insn_code_values = XCNEWVEC (struct attr_value_list *, num_insn_codes + 2);\n \n   /* Offset the table address so we can index by -2 or -1.  */\n   insn_code_values += 2;\n@@ -3003,7 +3003,7 @@ optimize_attrs (int max_insn_code)\n   gcc_assert (iv == ivbuf + num_insn_ents);\n \n   /* Process one insn code at a time.  */\n-  for (i = -2; i < max_insn_code; i++)\n+  for (i = -2; i < num_insn_codes; i++)\n     {\n       /* Clear the ATTR_CURR_SIMPLIFIED_P flag everywhere relevant.\n \t We use it to mean \"already simplified for this insn\".  */\n@@ -5161,7 +5161,6 @@ main (int argc, char **argv)\n   struct attr_desc *attr;\n   struct insn_def *id;\n   int i;\n-  int max_insn_code = 0;\n \n   progname = \"genattrtab\";\n \n@@ -5224,14 +5223,11 @@ main (int argc, char **argv)\n \t}\n       if (GET_CODE (info.def) != DEFINE_ASM_ATTRIBUTES)\n \tinsn_index_number++;\n-      max_insn_code = info.index;\n     }\n \n   if (have_error)\n     return FATAL_EXIT_CODE;\n \n-  max_insn_code++;\n-\n   /* If we didn't have a DEFINE_ASM_ATTRIBUTES, make a null one.  */\n   if (! got_define_asm_attributes)\n     {\n@@ -5248,14 +5244,15 @@ main (int argc, char **argv)\n     expand_delays ();\n \n   /* Make `insn_alternatives'.  */\n-  insn_alternatives = oballocvec (uint64_t, max_insn_code);\n+  int num_insn_codes = get_num_insn_codes ();\n+  insn_alternatives = oballocvec (uint64_t, num_insn_codes);\n   for (id = defs; id; id = id->next)\n     if (id->insn_code >= 0)\n       insn_alternatives[id->insn_code]\n \t= (((uint64_t) 1) << id->num_alternatives) - 1;\n \n   /* Make `insn_n_alternatives'.  */\n-  insn_n_alternatives = oballocvec (int, max_insn_code);\n+  insn_n_alternatives = oballocvec (int, num_insn_codes);\n   for (id = defs; id; id = id->next)\n     if (id->insn_code >= 0)\n       insn_n_alternatives[id->insn_code] = id->num_alternatives;\n@@ -5284,7 +5281,7 @@ main (int argc, char **argv)\n   make_length_attrs ();\n \n   /* Perform any possible optimizations to speed up compilation.  */\n-  optimize_attrs (max_insn_code);\n+  optimize_attrs (num_insn_codes);\n \n   /* Now write out all the `gen_attr_...' routines.  Do these before the\n      special routines so that they get defined before they are used.  */"}, {"sha": "c7478912e9b9b174938f3de7e257318854703eff", "filename": "gcc/gencodes.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=ba0ee63dfe37e08aef608039525304e919c18187", "patch": "@@ -49,8 +49,6 @@ gen_insn (md_rtx_info *info)\n int\n main (int argc, char **argv)\n {\n-  int last = 1;\n-\n   progname = \"gencodes\";\n \n   /* We need to see all the possibilities.  Elided insns may have\n@@ -79,7 +77,6 @@ enum insn_code {\\n\\\n       case DEFINE_INSN:\n       case DEFINE_EXPAND:\n \tgen_insn (&info);\n-\tlast = info.index + 1;\n \tbreak;\n \n       default:\n@@ -89,7 +86,7 @@ enum insn_code {\\n\\\n   printf (\"  LAST_INSN_CODE = %d\\n\\\n };\\n\\\n \\n\\\n-#endif /* GCC_INSN_CODES_H */\\n\", last);\n+#endif /* GCC_INSN_CODES_H */\\n\", get_num_insn_codes () - 1);\n \n   if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n     return FATAL_EXIT_CODE;"}, {"sha": "714af03dc567266cd992ae9dcdb6cc5bc9515338", "filename": "gcc/gensupport.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=ba0ee63dfe37e08aef608039525304e919c18187", "patch": "@@ -2602,6 +2602,14 @@ read_md_rtx (md_rtx_info *info)\n   return true;\n }\n \n+/* Return the number of possible INSN_CODEs.  Only meaningful once the\n+   whole file has been processed.  */\n+unsigned int\n+get_num_insn_codes ()\n+{\n+  return sequence_num;\n+}\n+\n /* Helper functions for insn elision.  */\n \n /* Compute a hash function of a c_test structure, which is keyed"}, {"sha": "c37ec367c53e70f5add7ff72c35725d66488cc8d", "filename": "gcc/gensupport.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0ee63dfe37e08aef608039525304e919c18187/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=ba0ee63dfe37e08aef608039525304e919c18187", "patch": "@@ -43,6 +43,7 @@ extern rtx add_implicit_parallel (rtvec);\n extern bool init_rtx_reader_args_cb (int, char **, bool (*)(const char *));\n extern bool init_rtx_reader_args (int, char **);\n extern bool read_md_rtx (md_rtx_info *);\n+extern unsigned int get_num_insn_codes ();\n \n /* Set this to 0 to disable automatic elision of insn patterns which\n    can never be used in this configuration.  See genconditions.c."}]}