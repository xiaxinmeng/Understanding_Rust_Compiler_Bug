{"sha": "c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1MDMzNDZkODc5M2FhNmNkYjIyYzQ5Y2I4YzJmZTM2OWFiNWM0YQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-08-03T14:57:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-08-03T14:57:25Z"}, "message": "Avoid recomputing the defining predicate chains for the same PHI\n\ngcc/ChangeLog:\n\n\t* tree-ssa-uninit.c (find_uninit_use): Declare and pass to\n\tis_use_properly_guarded the variable def_preds.  Free its\n\tcontents before returning.\n\t(prune_uninit_phi_opnds_in_unrealizable_paths): Same.\n\t(is_use_properly_guarded): Replace local variable def_preds with\n\ta parameter.  Adjust accordingly.  Only update *def_preds if it's\n\tthe empty vector.\n\nFrom-SVN: r226511", "tree": {"sha": "91f694eff78dad53d822c6893502e6f96cbcb803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91f694eff78dad53d822c6893502e6f96cbcb803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a/comments", "author": null, "committer": null, "parents": [{"sha": "420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420a9d9bd81efc3aaba61ea8e93a719cc78b2960"}], "stats": {"total": 81, "additions": 56, "deletions": 25}, "files": [{"sha": "2bbcbfa83745f7f9dc2d9def83ee9263b3c67f1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a", "patch": "@@ -1,3 +1,13 @@\n+2015-08-03  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* tree-ssa-uninit.c (find_uninit_use): Declare and pass to\n+\tis_use_properly_guarded the variable def_preds.  Free its\n+\tcontents before returning.\n+\t(prune_uninit_phi_opnds_in_unrealizable_paths): Same.\n+\t(is_use_properly_guarded): Replace local variable def_preds with\n+\ta parameter.  Adjust accordingly.  Only update *def_preds if it's\n+\tthe empty vector.\n+\n 2015-08-03  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (simplify::for_subst_vec): New member."}, {"sha": "3f007b5d3b1e84893231e142bb81c4d114171391", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=c0503346d8793aa6cdb22c49cb8c2fe369ab5c4a", "patch": "@@ -980,6 +980,7 @@ is_use_properly_guarded (gimple use_stmt,\n                          basic_block use_bb,\n                          gphi *phi,\n                          unsigned uninit_opnds,\n+\t\t\t pred_chain_union *def_preds,\n                          hash_set<gphi *> *visited_phis);\n \n /* Returns true if all uninitialized opnds are pruned. Returns false\n@@ -1098,14 +1099,19 @@ prune_uninit_phi_opnds_in_unrealizable_paths (gphi *phi,\n               edge opnd_edge;\n               unsigned uninit_opnds2\n                   = compute_uninit_opnds_pos (opnd_def_phi);\n+              pred_chain_union def_preds = vNULL;\n+              bool ok;\n               gcc_assert (!MASK_EMPTY (uninit_opnds2));\n               opnd_edge = gimple_phi_arg_edge (phi, i);\n-              if (!is_use_properly_guarded (phi,\n-                                            opnd_edge->src,\n-                                            opnd_def_phi,\n-                                            uninit_opnds2,\n-                                            visited_phis))\n-                  return false;\n+              ok = is_use_properly_guarded (phi,\n+\t\t\t\t\t    opnd_edge->src,\n+\t\t\t\t\t    opnd_def_phi,\n+\t\t\t\t\t    uninit_opnds2,\n+\t\t\t\t\t    &def_preds,\n+\t\t\t\t\t    visited_phis);\n+\t      destroy_predicate_vecs (def_preds);\n+\t      if (!ok)\n+\t\treturn false;\n             }\n           else\n             return false;\n@@ -2158,23 +2164,31 @@ normalize_preds (pred_chain_union preds, gimple use_or_def, bool is_use)\n    true if it can be determined that the use of PHI's def in\n    USE_STMT is guarded with a predicate set not overlapping with\n    predicate sets of all runtime paths that do not have a definition.\n+\n    Returns false if it is not or it can not be determined. USE_BB is\n    the bb of the use (for phi operand use, the bb is not the bb of\n-   the phi stmt, but the src bb of the operand edge). UNINIT_OPNDS\n-   is a bit vector. If an operand of PHI is uninitialized, the\n-   corresponding bit in the vector is 1.  VISIED_PHIS is a pointer\n-   set of phis being visted.  */\n+   the phi stmt, but the src bb of the operand edge).\n+\n+   UNINIT_OPNDS is a bit vector. If an operand of PHI is uninitialized, the\n+   corresponding bit in the vector is 1.  VISITED_PHIS is a pointer\n+   set of phis being visited.\n+\n+   *DEF_PREDS contains the (memoized) defining predicate chains of PHI.\n+   If *DEF_PREDS is the empty vector, the defining predicate chains of\n+   PHI will be computed and stored into *DEF_PREDS as needed.\n+\n+   VISITED_PHIS is a pointer set of phis being visited.  */\n \n static bool\n is_use_properly_guarded (gimple use_stmt,\n                          basic_block use_bb,\n                          gphi *phi,\n                          unsigned uninit_opnds,\n+\t\t\t pred_chain_union *def_preds,\n                          hash_set<gphi *> *visited_phis)\n {\n   basic_block phi_bb;\n   pred_chain_union preds = vNULL;\n-  pred_chain_union def_preds = vNULL;\n   bool has_valid_preds = false;\n   bool is_properly_guarded = false;\n \n@@ -2205,25 +2219,26 @@ is_use_properly_guarded (gimple use_stmt,\n       return true;\n     }\n \n-  has_valid_preds = find_def_preds (&def_preds, phi);\n-\n-  if (!has_valid_preds)\n+  if (def_preds->is_empty ())\n     {\n-      destroy_predicate_vecs (preds);\n-      destroy_predicate_vecs (def_preds);\n-      return false;\n+      has_valid_preds = find_def_preds (def_preds, phi);\n+\n+      if (!has_valid_preds)\n+\t{\n+\t  destroy_predicate_vecs (preds);\n+\t  return false;\n+\t}\n+\n+      simplify_preds (def_preds, phi, false);\n+      *def_preds = normalize_preds (*def_preds, phi, false);\n     }\n \n   simplify_preds (&preds, use_stmt, true);\n   preds = normalize_preds (preds, use_stmt, true);\n \n-  simplify_preds (&def_preds, phi, false);\n-  def_preds = normalize_preds (def_preds, phi, false);\n-\n-  is_properly_guarded = is_superset_of (def_preds, preds);\n+  is_properly_guarded = is_superset_of (*def_preds, preds);\n \n   destroy_predicate_vecs (preds);\n-  destroy_predicate_vecs (def_preds);\n   return is_properly_guarded;\n }\n \n@@ -2245,6 +2260,8 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n   use_operand_p use_p;\n   gimple use_stmt;\n   imm_use_iterator iter;\n+  pred_chain_union def_preds = vNULL;\n+  gimple ret = NULL;\n \n   phi_result = gimple_phi_result (phi);\n \n@@ -2264,7 +2281,7 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n \n       hash_set<gphi *> visited_phis;\n       if (is_use_properly_guarded (use_stmt, use_bb, phi, uninit_opnds,\n-                                   &visited_phis))\n+\t\t\t\t   &def_preds, &visited_phis))\n \tcontinue;\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2274,7 +2291,10 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n         }\n       /* Found one real use, return.  */\n       if (gimple_code (use_stmt) != GIMPLE_PHI)\n-        return use_stmt;\n+\t{\n+\t  ret = use_stmt;\n+\t  break;\n+\t}\n \n       /* Found a phi use that is not guarded,\n          add the phi to the worklist.  */\n@@ -2291,7 +2311,8 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n         }\n     }\n \n-  return NULL;\n+  destroy_predicate_vecs (def_preds);\n+  return ret;\n }\n \n /* Look for inputs to PHI that are SSA_NAMEs that have empty definitions"}]}