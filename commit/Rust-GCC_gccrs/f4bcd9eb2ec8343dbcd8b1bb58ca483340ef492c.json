{"sha": "f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiY2Q5ZWIyZWM4MzQzZGJjZDhiMWJiNThjYTQ4MzM0MGVmNDkyYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-08-01T20:50:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-08-01T20:50:00Z"}, "message": "c-ada-spec.c (print_generic_ada_decl): Pass correctly-typed constant.\n\n\t* c-ada-spec.c (print_generic_ada_decl): Pass correctly-typed constant.\n\t(dump_ada_function_declaration): Likewise.\n\t(dump_generic_ada_node): Likewise.\n\t(print_ada_declaration): Add support for const-qualified variables.\n\nFrom-SVN: r250797", "tree": {"sha": "fa08a5cc14b4a2b2759deec0216d74f09f96bcd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa08a5cc14b4a2b2759deec0216d74f09f96bcd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c/comments", "author": null, "committer": null, "parents": [{"sha": "a2e28a974709c9b2712ff28aac2afccb492436a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e28a974709c9b2712ff28aac2afccb492436a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e28a974709c9b2712ff28aac2afccb492436a6"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "54c7d82c96852bdd2623d540f8eff69db9382492", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "patch": "@@ -1,3 +1,10 @@\n+2017-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (print_generic_ada_decl): Pass correctly-typed constant.\n+\t(dump_ada_function_declaration): Likewise.\n+\t(dump_generic_ada_node): Likewise.\n+\t(print_ada_declaration): Add support for const-qualified variables.\n+\n 2017-07-31  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitize/81530"}, {"sha": "1f1c7e2f5d0e0e799d14f0a730e4f248d5ef4c84", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "patch": "@@ -858,7 +858,7 @@ print_generic_ada_decl (pretty_printer *pp, tree decl, const char *source_file)\n {\n   source_file_base = source_file;\n \n-  if (print_ada_declaration (pp, decl, 0, INDENT_INCR))\n+  if (print_ada_declaration (pp, decl, NULL_TREE, INDENT_INCR))\n     {\n       pp_newline (pp);\n       pp_newline (pp);\n@@ -1655,7 +1655,8 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n \t  if (DECL_NAME (arg))\n \t    {\n \t      check_name (buffer, arg);\n-\t      pp_ada_tree_identifier (buffer, DECL_NAME (arg), 0, false);\n+\t      pp_ada_tree_identifier (buffer, DECL_NAME (arg), NULL_TREE,\n+\t\t\t\t      false);\n \t      pp_string (buffer, \" : \");\n \t    }\n \t  else\n@@ -2096,7 +2097,7 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t  {\n \t    if (DECL_NAME (node))\n \t      pp_ada_tree_identifier\n-\t\t(buffer, DECL_NAME (node), 0, limited_access);\n+\t\t(buffer, DECL_NAME (node), NULL_TREE, limited_access);\n \t    else\n \t      pp_string (buffer, \"<unnamed type decl>\");\n \t  }\n@@ -3097,6 +3098,9 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t    {\n \t      pp_string (buffer, \"aliased \");\n \n+\t      if (TREE_READONLY (t))\n+\t\tpp_string (buffer, \"constant \");\n+\n \t      if (TYPE_NAME (TREE_TYPE (t)))\n \t\tdump_generic_ada_node\n \t\t  (buffer, TREE_TYPE (t), t, spc, false, true);\n@@ -3110,6 +3114,9 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t\t      || TREE_CODE (TREE_TYPE (t)) != INTEGER_TYPE))\n \t\tpp_string (buffer, \"aliased \");\n \n+\t      if (TREE_READONLY (t))\n+\t\tpp_string (buffer, \"constant \");\n+\n \t      dump_generic_ada_node\n \t\t(buffer, TREE_TYPE (t), TREE_TYPE (t), spc, false, true);\n \t    }"}]}