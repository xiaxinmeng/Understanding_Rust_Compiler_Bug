{"sha": "077a148bf5d7da017005caa18faccc7976704c79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc3YTE0OGJmNWQ3ZGEwMTcwMDVjYWExOGZhY2NjNzk3NjcwNGM3OQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-26T01:31:02Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-26T01:31:02Z"}, "message": "simplify-rtx.c (simplify_replace_rtx): Avoid allocating duplicate RTL nodes.\n\n\n\t* simplify-rtx.c (simplify_replace_rtx): Avoid allocating duplicate\n\tRTL nodes.  If an operator's operands are unchanged, return the\n\toriginal argument unchanged.\n\nFrom-SVN: r72941", "tree": {"sha": "9ec44bf0da139f914f0a549eef8e9cf97ddc342d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec44bf0da139f914f0a549eef8e9cf97ddc342d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/077a148bf5d7da017005caa18faccc7976704c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077a148bf5d7da017005caa18faccc7976704c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077a148bf5d7da017005caa18faccc7976704c79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077a148bf5d7da017005caa18faccc7976704c79/comments", "author": null, "committer": null, "parents": [{"sha": "6cadb6e3750d6e957e70cd806d89b13775b12a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cadb6e3750d6e957e70cd806d89b13775b12a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cadb6e3750d6e957e70cd806d89b13775b12a1b"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "daecc5d5376cbd49221a88ef051fcd9fc6d0a707", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077a148bf5d7da017005caa18faccc7976704c79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077a148bf5d7da017005caa18faccc7976704c79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=077a148bf5d7da017005caa18faccc7976704c79", "patch": "@@ -1,3 +1,9 @@\n+2003-10-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_replace_rtx): Avoid allocating duplicate\n+\tRTL nodes.  If an operator's operands are unchanged, return the\n+\toriginal argument unchanged.\n+\n 2003-10-26  Graham Stott  <graham.stott@btinternet.com>\n \n \tFix bootstrap failure."}, {"sha": "ee75e3497cabcae60abce9e2987c2e0e4aeed2d7", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 50, "deletions": 47, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077a148bf5d7da017005caa18faccc7976704c79/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077a148bf5d7da017005caa18faccc7976704c79/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=077a148bf5d7da017005caa18faccc7976704c79", "patch": "@@ -264,6 +264,8 @@ simplify_replace_rtx (rtx x, rtx old, rtx new)\n {\n   enum rtx_code code = GET_CODE (x);\n   enum machine_mode mode = GET_MODE (x);\n+  enum machine_mode op_mode;\n+  rtx op0, op1, op2;\n \n   /* If X is OLD, return NEW.  Otherwise, if this is an expression, try\n      to build a new expression substituting recursively.  If we can't do\n@@ -275,87 +277,88 @@ simplify_replace_rtx (rtx x, rtx old, rtx new)\n   switch (GET_RTX_CLASS (code))\n     {\n     case '1':\n-      {\n-\tenum machine_mode op_mode = GET_MODE (XEXP (x, 0));\n-\trtx op = (XEXP (x, 0) == old\n-\t\t  ? new : simplify_replace_rtx (XEXP (x, 0), old, new));\n-\n-\treturn simplify_gen_unary (code, mode, op, op_mode);\n-      }\n+      op0 = XEXP (x, 0);\n+      op_mode = GET_MODE (op0);\n+      op0 = simplify_replace_rtx (op0, old, new);\n+      if (op0 == XEXP (x, 0))\n+\treturn x;\n+      return simplify_gen_unary (code, mode, op0, op_mode);\n \n     case '2':\n     case 'c':\n-      return\n-\tsimplify_gen_binary (code, mode,\n-\t\t\t     simplify_replace_rtx (XEXP (x, 0), old, new),\n-\t\t\t     simplify_replace_rtx (XEXP (x, 1), old, new));\n+      op0 = simplify_replace_rtx (XEXP (x, 0), old, new);\n+      op1 = simplify_replace_rtx (XEXP (x, 1), old, new);\n+      if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))\n+\treturn x;\n+      return simplify_gen_binary (code, mode, op0, op1);\n+\n     case '<':\n-      {\n-\tenum machine_mode op_mode = (GET_MODE (XEXP (x, 0)) != VOIDmode\n-\t\t\t\t     ? GET_MODE (XEXP (x, 0))\n-\t\t\t\t     : GET_MODE (XEXP (x, 1)));\n-\trtx op0 = simplify_replace_rtx (XEXP (x, 0), old, new);\n-\trtx op1 = simplify_replace_rtx (XEXP (x, 1), old, new);\n-\treturn simplify_gen_relational (code, mode, op_mode, op0, op1);\n-      }\n+      op0 = XEXP (x, 0);\n+      op1 = XEXP (x, 1);\n+      op_mode = GET_MODE (op0) != VOIDmode ? GET_MODE (op0) : GET_MODE (op1);\n+      op0 = simplify_replace_rtx (op0, old, new);\n+      op1 = simplify_replace_rtx (op1, old, new);\n+      if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))\n+\treturn x;\n+      return simplify_gen_relational (code, mode, op_mode, op0, op1);\n \n     case '3':\n     case 'b':\n-      {\n-\tenum machine_mode op_mode = GET_MODE (XEXP (x, 0));\n-\trtx op0 = simplify_replace_rtx (XEXP (x, 0), old, new);\n-\n-\treturn\n-\t  simplify_gen_ternary (code, mode,\n-\t\t\t\t(op_mode != VOIDmode\n-\t\t\t\t ? op_mode\n-\t\t\t\t : GET_MODE (op0)),\n-\t\t\t\top0,\n-\t\t\t\tsimplify_replace_rtx (XEXP (x, 1), old, new),\n-\t\t\t\tsimplify_replace_rtx (XEXP (x, 2), old, new));\n-      }\n+      op0 = XEXP (x, 0);\n+      op_mode = GET_MODE (op0);\n+      op0 = simplify_replace_rtx (op0, old, new);\n+      op1 = simplify_replace_rtx (XEXP (x, 1), old, new);\n+      op2 = simplify_replace_rtx (XEXP (x, 2), old, new);\n+      if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1) && op2 == XEXP (x, 2))\n+\treturn x;\n+      if (op_mode == VOIDmode)\n+\top_mode = GET_MODE (op0);\n+      return simplify_gen_ternary (code, mode, op_mode, op0, op1, op2);\n \n     case 'x':\n       /* The only case we try to handle is a SUBREG.  */\n       if (code == SUBREG)\n \t{\n-\t  rtx exp;\n-\t  exp = simplify_gen_subreg (GET_MODE (x),\n-\t\t\t\t     simplify_replace_rtx (SUBREG_REG (x),\n-\t\t\t\t\t\t\t   old, new),\n+\t  op0 = simplify_replace_rtx (SUBREG_REG (x), old, new);\n+\t  if (op0 == SUBREG_REG (x))\n+\t    return x;\n+\t  op0 = simplify_gen_subreg (GET_MODE (x), op0,\n \t\t\t\t     GET_MODE (SUBREG_REG (x)),\n \t\t\t\t     SUBREG_BYTE (x));\n-\t  if (exp)\n-\t    x = exp;\n+\t  return op0 ? op0 : x;\n \t}\n-      return x;\n+      break;\n \n     case 'o':\n       if (code == MEM)\n-\treturn replace_equiv_address_nv (x,\n-\t\t\t\t\t simplify_replace_rtx (XEXP (x, 0),\n-\t\t\t\t\t\t\t       old, new));\n+\t{\n+\t  op0 = simplify_replace_rtx (XEXP (x, 0), old, new);\n+\t  if (op0 == XEXP (x, 0))\n+\t    return x;\n+\t  return replace_equiv_address_nv (x, op0);\n+\t}\n       else if (code == LO_SUM)\n \t{\n-\t  rtx op0 = simplify_replace_rtx (XEXP (x, 0), old, new);\n-\t  rtx op1 = simplify_replace_rtx (XEXP (x, 1), old, new);\n+\t  op0 = simplify_replace_rtx (XEXP (x, 0), old, new);\n+\t  op1 = simplify_replace_rtx (XEXP (x, 1), old, new);\n \n \t  /* (lo_sum (high x) x) -> x  */\n \t  if (GET_CODE (op0) == HIGH && rtx_equal_p (XEXP (op0, 0), op1))\n \t    return op1;\n \n+\t  if (op0 == XEXP (x, 0) && op1 == XEXP (x, 1))\n+\t    return x;\n \t  return gen_rtx_LO_SUM (mode, op0, op1);\n \t}\n       else if (code == REG)\n \t{\n \t  if (REG_P (old) && REGNO (x) == REGNO (old))\n \t    return new;\n \t}\n-\n-      return x;\n+      break;\n \n     default:\n-      return x;\n+      break;\n     }\n   return x;\n }"}]}