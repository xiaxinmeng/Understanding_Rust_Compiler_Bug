{"sha": "ce40915e90234dda80325aa0b8b51bb1a5017b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0MDkxNWU5MDIzNGRkYTgwMzI1YWEwYjhiNTFiYjFhNTAxN2IzYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-29T15:30:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-29T15:30:50Z"}, "message": "re PR target/69994 (test case gfortran.dg/reassoc_6.f fails starting with r233669)\n\n2016-02-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69994\n\t* tree-ssa-reassoc.c (gimple_nop_conversion_p): New function.\n\t(get_unary_op): Look through nop conversions.\n\t(ops_equal_values_p): New function, look for equality diregarding\n\tnop conversions.\n\t(eliminate_plus_minus_pair): Use ops_equal_values_p\n\t(repropagate_negates): Do not use get_unary_op here.\n\nFrom-SVN: r233816", "tree": {"sha": "6644240717a7baeb5b894890488f4a0be1eb9fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6644240717a7baeb5b894890488f4a0be1eb9fde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce40915e90234dda80325aa0b8b51bb1a5017b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce40915e90234dda80325aa0b8b51bb1a5017b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce40915e90234dda80325aa0b8b51bb1a5017b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce40915e90234dda80325aa0b8b51bb1a5017b3b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4232ebbbc9c2d188214485cd8e951648c45323e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4232ebbbc9c2d188214485cd8e951648c45323e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4232ebbbc9c2d188214485cd8e951648c45323e7"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "9c7e14961a537c7808b7325985eed55cd6db7116", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce40915e90234dda80325aa0b8b51bb1a5017b3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce40915e90234dda80325aa0b8b51bb1a5017b3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce40915e90234dda80325aa0b8b51bb1a5017b3b", "patch": "@@ -1,3 +1,13 @@\n+2016-02-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69994\n+\t* tree-ssa-reassoc.c (gimple_nop_conversion_p): New function.\n+\t(get_unary_op): Look through nop conversions.\n+\t(ops_equal_values_p): New function, look for equality diregarding\n+\tnop conversions.\n+\t(eliminate_plus_minus_pair): Use ops_equal_values_p\n+\t(repropagate_negates): Do not use get_unary_op here.\n+\n 2016-02-29  Martin Liska  <mliska@suse.cz>\n \n \t* hsa-gen.c (gen_body_from_gimple): Dump only if TDF_DETAILS"}, {"sha": "4c5470739054fd3d76a36e7be2fbb74c9baa9cf9", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce40915e90234dda80325aa0b8b51bb1a5017b3b/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce40915e90234dda80325aa0b8b51bb1a5017b3b/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=ce40915e90234dda80325aa0b8b51bb1a5017b3b", "patch": "@@ -605,6 +605,21 @@ is_reassociable_op (gimple *stmt, enum tree_code code, struct loop *loop)\n }\n \n \n+/* Return true if STMT is a nop-conversion.  */\n+\n+static bool\n+gimple_nop_conversion_p (gimple *stmt)\n+{\n+  if (gassign *ass = dyn_cast <gassign *> (stmt))\n+    {\n+      if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (ass))\n+\t  && tree_nop_conversion_p (TREE_TYPE (gimple_assign_lhs (ass)),\n+\t\t\t\t    TREE_TYPE (gimple_assign_rhs1 (ass))))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* Given NAME, if NAME is defined by a unary operation OPCODE, return the\n    operand of the negate operation.  Otherwise, return NULL.  */\n \n@@ -613,6 +628,11 @@ get_unary_op (tree name, enum tree_code opcode)\n {\n   gimple *stmt = SSA_NAME_DEF_STMT (name);\n \n+  /* Look through nop conversions (sign changes).  */\n+  if (gimple_nop_conversion_p (stmt)\n+      && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME)\n+    stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n+\n   if (!is_gimple_assign (stmt))\n     return NULL_TREE;\n \n@@ -621,6 +641,40 @@ get_unary_op (tree name, enum tree_code opcode)\n   return NULL_TREE;\n }\n \n+/* Return true if OP1 and OP2 have the same value if casted to either type.  */\n+\n+static bool\n+ops_equal_values_p (tree op1, tree op2)\n+{\n+  if (op1 == op2)\n+    return true;\n+\n+  if (TREE_CODE (op1) == SSA_NAME)\n+    {\n+      gimple *stmt = SSA_NAME_DEF_STMT (op1);\n+      if (gimple_nop_conversion_p (stmt))\n+\t{\n+\t  op1 = gimple_assign_rhs1 (stmt);\n+\t  if (op1 == op2)\n+\t    return true;\n+\t}\n+    }\n+\n+  if (TREE_CODE (op2) == SSA_NAME)\n+    {\n+      gimple *stmt = SSA_NAME_DEF_STMT (op2);\n+      if (gimple_nop_conversion_p (stmt))\n+\t{\n+\t  op2 = gimple_assign_rhs1 (stmt);\n+\t  if (op1 == op2)\n+\t    return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+\n /* If CURR and LAST are a pair of ops that OPCODE allows us to\n    eliminate through equivalences, do so, remove them from OPS, and\n    return true.  Otherwise, return false.  */\n@@ -731,9 +785,9 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n        && oe->rank >= curr->rank - 1 ;\n        i++)\n     {\n-      if (oe->op == negateop)\n+      if (negateop\n+\t  && ops_equal_values_p (oe->op, negateop))\n \t{\n-\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Equivalence: \");\n@@ -750,7 +804,8 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \n \t  return true;\n \t}\n-      else if (oe->op == notop)\n+      else if (notop\n+\t       && ops_equal_values_p (oe->op, notop))\n \t{\n \t  tree op_type = TREE_TYPE (oe->op);\n \n@@ -772,9 +827,10 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \t}\n     }\n \n-  /* CURR->OP is a negate expr in a plus expr: save it for later\n-     inspection in repropagate_negates().  */\n-  if (negateop != NULL_TREE)\n+  /* If CURR->OP is a negate expr without nop conversion in a plus expr: \n+     save it for later inspection in repropagate_negates().  */\n+  if (negateop != NULL_TREE\n+      && gimple_assign_rhs_code (SSA_NAME_DEF_STMT (curr->op)) == NEGATE_EXPR)\n     plus_negates.safe_push (curr->op);\n \n   return false;\n@@ -4211,7 +4267,7 @@ repropagate_negates (void)\n \t  if (gimple_assign_rhs2 (user) == negate)\n \t    {\n \t      tree rhs1 = gimple_assign_rhs1 (user);\n-\t      tree rhs2 = get_unary_op (negate, NEGATE_EXPR);\n+\t      tree rhs2 = gimple_assign_rhs1 (SSA_NAME_DEF_STMT (negate));\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (user);\n \t      gimple_assign_set_rhs_with_ops (&gsi, MINUS_EXPR, rhs1, rhs2);\n \t      update_stmt (user);"}]}