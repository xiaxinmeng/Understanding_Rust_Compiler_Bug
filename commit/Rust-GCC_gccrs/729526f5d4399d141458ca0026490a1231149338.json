{"sha": "729526f5d4399d141458ca0026490a1231149338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5NTI2ZjVkNDM5OWQxNDE0NThjYTAwMjY0OTBhMTIzMTE0OTMzOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-03-04T15:45:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-03-04T15:45:19Z"}, "message": "PR c/68187: fix overzealous -Wmisleading-indentation (comment #0)\n\ngcc/c-family/ChangeLog:\n\tPR c/68187\n\t* c-indentation.c (should_warn_for_misleading_indentation): When\n\tsuppressing warnings about cases where the guard and body are on\n\tthe same column, only use the first non-whitespace column in place\n\tof the guard token column when dealing with \"else\" clauses.\n\tWhen rejecting aligned BODY and NEXT, loosen the requirement\n\tfrom equality with the first non-whitespace of guard to simply\n\tthat they not be indented relative to it.\n\ngcc/testsuite/ChangeLog:\n\tPR c/68187\n\t* c-c++-common/Wmisleading-indentation.c (fn_40_a): New test\n\tfunction.\n\t(fn_40_b): Likewise.\n\t(fn_41_a): Likewise.\n\t(fn_41_b): Likewise.\n\nFrom-SVN: r233971", "tree": {"sha": "437b3b6b9215076f13844d2bc99227445a912367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/437b3b6b9215076f13844d2bc99227445a912367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/729526f5d4399d141458ca0026490a1231149338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729526f5d4399d141458ca0026490a1231149338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729526f5d4399d141458ca0026490a1231149338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729526f5d4399d141458ca0026490a1231149338/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9ea11ac194e5129ff90145a73b91b08a244174b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ea11ac194e5129ff90145a73b91b08a244174b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ea11ac194e5129ff90145a73b91b08a244174b"}], "stats": {"total": 115, "additions": 109, "deletions": 6}, "files": [{"sha": "fa728f06238a125a9d83a8071f4dc9a6712a20d4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729526f5d4399d141458ca0026490a1231149338/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729526f5d4399d141458ca0026490a1231149338/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=729526f5d4399d141458ca0026490a1231149338", "patch": "@@ -1,3 +1,14 @@\n+2016-03-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/68187\n+\t* c-indentation.c (should_warn_for_misleading_indentation): When\n+\tsuppressing warnings about cases where the guard and body are on\n+\tthe same column, only use the first non-whitespace column in place\n+\tof the guard token column when dealing with \"else\" clauses.\n+\tWhen rejecting aligned BODY and NEXT, loosen the requirement\n+\tfrom equality with the first non-whitespace of guard to simply\n+\tthat they not be indented relative to it.\n+\n 2016-03-04  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/70054"}, {"sha": "c72192d9e0a8c24e680b05e5c999599562b22dea", "filename": "gcc/c-family/c-indentation.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729526f5d4399d141458ca0026490a1231149338/gcc%2Fc-family%2Fc-indentation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729526f5d4399d141458ca0026490a1231149338/gcc%2Fc-family%2Fc-indentation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-indentation.c?ref=729526f5d4399d141458ca0026490a1231149338", "patch": "@@ -419,7 +419,8 @@ should_warn_for_misleading_indentation (const token_indent_info &guard_tinfo,\n \t{\n           /* Don't warn if they are aligned on the same column\n \t     as the guard itself (suggesting autogenerated code that doesn't\n-\t     bother indenting at all).  We consider the column of the first\n+\t     bother indenting at all).\n+\t     For \"else\" clauses, we consider the column of the first\n \t     non-whitespace character on the guard line instead of the column\n \t     of the actual guard token itself because it is more sensible.\n \t     Consider:\n@@ -438,14 +439,17 @@ should_warn_for_misleading_indentation (const token_indent_info &guard_tinfo,\n \t       foo (2);   // BODY\n \t       foo (3);   // NEXT\n \n-\t     If we just used the column of the guard token, we would warn on\n+\t     If we just used the column of the \"else\" token, we would warn on\n \t     the first example and not warn on the second.  But we want the\n \t     exact opposite to happen: to not warn on the first example (which\n \t     is probably autogenerated) and to warn on the second (whose\n \t     indentation is misleading).  Using the column of the first\n \t     non-whitespace character on the guard line makes that\n \t     happen.  */\n-\t  if (guard_line_first_nws == body_vis_column)\n+\t  unsigned int guard_column = (guard_tinfo.keyword == RID_ELSE\n+\t\t\t\t       ? guard_line_first_nws\n+\t\t\t\t       : guard_vis_column);\n+\t  if (guard_column == body_vis_column)\n \t    return false;\n \n \t  /* We may have something like:\n@@ -458,9 +462,9 @@ should_warn_for_misleading_indentation (const token_indent_info &guard_tinfo,\n \t     foo (3);  // NEXT\n \n \t     in which case the columns are not aligned but the code is not\n-\t     misleadingly indented.  If the column of the body is less than\n-\t     that of the guard line then don't warn.  */\n-\t  if (body_vis_column < guard_line_first_nws)\n+\t     misleadingly indented.  If the column of the body isn't indented\n+\t     more than the guard line then don't warn.  */\n+\t  if (body_vis_column <= guard_line_first_nws)\n \t    return false;\n \n \t  /* Don't warn if there is multiline preprocessor logic between"}, {"sha": "b6594395aaa1ee4c867f83e60a5c2b5fd1192675", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729526f5d4399d141458ca0026490a1231149338/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729526f5d4399d141458ca0026490a1231149338/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=729526f5d4399d141458ca0026490a1231149338", "patch": "@@ -1,3 +1,12 @@\n+2016-03-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/68187\n+\t* c-c++-common/Wmisleading-indentation.c (fn_40_a): New test\n+\tfunction.\n+\t(fn_40_b): Likewise.\n+\t(fn_41_a): Likewise.\n+\t(fn_41_b): Likewise.\n+\n 2016-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/70059"}, {"sha": "04500b76ce230ed955bf92845ca3c24bbfe29cfb", "filename": "gcc/testsuite/c-c++-common/Wmisleading-indentation.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729526f5d4399d141458ca0026490a1231149338/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729526f5d4399d141458ca0026490a1231149338/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWmisleading-indentation.c?ref=729526f5d4399d141458ca0026490a1231149338", "patch": "@@ -903,3 +903,82 @@ void pr69122 (void)\n   emit foo (1);\n }\n #undef emit\n+\n+/* In the following, the 'if' within the 'for' statement is not indented,\n+   but arguably should be.\n+   The for loop:\n+     \"for (cnt = 0; cnt < thousands_len; ++cnt)\"\n+   does not guard this conditional:\n+     \"cnt < thousands_len;\".\n+   and the poor indentation is not misleading.  Verify that we do\n+   not erroneously emit a warning about this.\n+   Based on an example seen in glibc (PR c/68187).  */\n+\n+void\n+fn_40_a (const char *end, const char *thousands, int thousands_len)\n+{\n+  int cnt;\n+\n+  while (flagA)\n+    if (flagA\n+        && ({ for (cnt = 0; cnt < thousands_len; ++cnt)\n+              if (thousands[cnt] != end[cnt])\n+                break;\n+              cnt < thousands_len; })\n+        && flagB)\n+      break;\n+}\n+\n+/* As above, but with the indentation within the \"for\" loop fixed.\n+   We should not emit a warning for this, either.  */\n+\n+void\n+fn_40_b (const char *end, const char *thousands, int thousands_len)\n+{\n+  int cnt;\n+\n+  while (flagA)\n+    if (flagA\n+        && ({ for (cnt = 0; cnt < thousands_len; ++cnt)\n+                if (thousands[cnt] != end[cnt])\n+                  break;\n+              cnt < thousands_len; })\n+        && flagB)\n+      break;\n+}\n+\n+/* We should not warn for the following\n+   (based on libstdc++-v3/src/c++11/random.cc:random_device::_M_init).  */\n+\n+void\n+fn_41_a (void)\n+{\n+  if (flagA)\n+    {\n+    }\n+  else if (flagB)\n+  fail:\n+    foo (0);\n+\n+  foo (1);\n+  if (!flagC)\n+    goto fail;\n+}\n+\n+/* Tweaked version of the above (with the label indented), which we should\n+   also not warn for.  */\n+\n+void\n+fn_41_b (void)\n+{\n+  if (flagA)\n+    {\n+    }\n+  else if (flagB)\n+   fail:\n+    foo (0);\n+\n+  foo (1);\n+  if (!flagC)\n+    goto fail;\n+}"}]}