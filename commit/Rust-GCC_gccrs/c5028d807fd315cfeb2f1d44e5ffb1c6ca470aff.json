{"sha": "c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwMjhkODA3ZmQzMTVjZmViMmYxZDQ0ZTVmZmIxYzZjYTQ3MGFmZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-10-30T18:53:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-10-30T18:53:42Z"}, "message": "re PR other/33426 (Support of #pragma ivdep)\n\n2013-10-30  Tobias Burnus  <burnus@net-b.de>\n\ngcc/cp/\n        PR other/33426\n        * cp-tree.h (RANGE_FOR_IVDEP): Define.\n        (cp_convert_range_for, finish_while_stmt_cond, finish_do_stmt,\n        finish_for_cond): Take 'bool ivdep' parameter.\n        * cp-array-notation.c (create_an_loop): Update call.\n        * init.c (build_vec_init): Ditto.\n        * pt.c (tsubst_expr): Ditto.\n        * parser.c (cp_parser_iteration_statement, cp_parser_for,\n        cp_parser_range_for, cp_convert_range_for): Update calls.\n        (cp_parser_pragma): Accept GCC ivdep for 'while' and 'do'.\n        * semantics.c (finish_while_stmt_cond, finish_do_stmt,\n        finish_for_cond): Optionally build ivdep annotation.\n\ngcc/testsuite/\n        PR other/33426\n        * g++.dg/vect/pr33426-ivdep-2.cc: New.\n        * g++.dg/vect/pr33426-ivdep-3.cc: New.\n        * g++.dg/vect/pr33426-ivdep-4.cc: New.\n\ngcc/\n        PR other/33426\n        * gcc/tree-cfg.c (replace_loop_annotate): Replace warning by\n        warning_at.\n\nFrom-SVN: r204223", "tree": {"sha": "7d8909733bc9f939a4e8f741e8c10d5e7814c0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d8909733bc9f939a4e8f741e8c10d5e7814c0e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1079f7a198ba7e1114d8dce44f72a00cf9abb8eb"}], "stats": {"total": 204, "additions": 172, "deletions": 32}, "files": [{"sha": "ef40a4372e2f8549a75973ad54c813591980472b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -1,3 +1,9 @@\n+2013-10-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* gcc/tree-cfg.c (replace_loop_annotate): Replace warning by\n+\twarning_at.\n+\n 2013-10-30  Jason Merrill  <jason@redhat.com>\n \n \t* configure.ac (loose_warn): Add -Wno-format if"}, {"sha": "97e95f41107c2c8aa0ba103d700439de8af17cba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -1,3 +1,18 @@\n+2013-10-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* cp-tree.h (RANGE_FOR_IVDEP): Define.\n+\t(cp_convert_range_for, finish_while_stmt_cond, finish_do_stmt,\n+\tfinish_for_cond): Take 'bool ivdep' parameter.\n+\t* cp-array-notation.c (create_an_loop): Update call.\n+\t* init.c (build_vec_init): Ditto.\n+\t* pt.c (tsubst_expr): Ditto.\n+\t* parser.c (cp_parser_iteration_statement, cp_parser_for,\n+\tcp_parser_range_for, cp_convert_range_for): Update calls.\n+\t(cp_parser_pragma): Accept GCC ivdep for 'while' and 'do'.\n+\t* semantics.c (finish_while_stmt_cond, finish_do_stmt,\n+\tfinish_for_cond): Optionally build ivdep annotation.\n+\n 2013-10-30  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (cp_finish_decl): Never throw for VLA bound == 0."}, {"sha": "e1fb0ee99ad9c847730a5f1ef873f097c6dcf7e3", "filename": "gcc/cp/cp-array-notation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fcp-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fcp-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-array-notation.c?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -71,7 +71,7 @@ create_an_loop (tree init, tree cond, tree incr, tree body)\n   finish_expr_stmt (init);\n   for_stmt = begin_for_stmt (NULL_TREE, NULL_TREE);\n   finish_for_init_stmt (for_stmt);\n-  finish_for_cond (cond, for_stmt);\n+  finish_for_cond (cond, for_stmt, false);\n   finish_for_expr (incr, for_stmt);\n   finish_expr_stmt (body);\n   finish_for_stmt (for_stmt);"}, {"sha": "fd79adbd3573fd26bb0b6f0ad5b3f4831905b0d0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -116,6 +116,7 @@ c-common.h, not after.\n    6: IDENTIFIER_REPO_CHOSEN (in IDENTIFIER_NODE)\n       DECL_CONSTRUCTION_VTABLE_P (in VAR_DECL)\n       TYPE_MARKED_P (in _TYPE)\n+      RANGE_FOR_IVDEP (in RANGE_FOR_STMT)\n \n    Usage of TYPE_LANG_FLAG_?:\n    0: TYPE_DEPENDENT_P\n@@ -4088,6 +4089,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define RANGE_FOR_EXPR(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 1)\n #define RANGE_FOR_BODY(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 2)\n #define RANGE_FOR_SCOPE(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 3)\n+#define RANGE_FOR_IVDEP(NODE)\tTREE_LANG_FLAG_6 (RANGE_FOR_STMT_CHECK (NODE))\n \n #define SWITCH_STMT_COND(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 0)\n #define SWITCH_STMT_BODY(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 1)\n@@ -4321,7 +4323,7 @@ extern int comparing_specializations;\n    sizeof can be nested.  */\n \n extern int cp_unevaluated_operand;\n-extern tree cp_convert_range_for (tree, tree, tree);\n+extern tree cp_convert_range_for (tree, tree, tree, bool);\n extern bool parsing_nsdmi (void);\n \n /* in pt.c  */\n@@ -5671,16 +5673,16 @@ extern void begin_else_clause\t\t\t(tree);\n extern void finish_else_clause\t\t\t(tree);\n extern void finish_if_stmt\t\t\t(tree);\n extern tree begin_while_stmt\t\t\t(void);\n-extern void finish_while_stmt_cond\t\t(tree, tree);\n+extern void finish_while_stmt_cond\t\t(tree, tree, bool);\n extern void finish_while_stmt\t\t\t(tree);\n extern tree begin_do_stmt\t\t\t(void);\n extern void finish_do_body\t\t\t(tree);\n-extern void finish_do_stmt\t\t\t(tree, tree);\n+extern void finish_do_stmt\t\t\t(tree, tree, bool);\n extern tree finish_return_stmt\t\t\t(tree);\n extern tree begin_for_scope\t\t\t(tree *);\n extern tree begin_for_stmt\t\t\t(tree, tree);\n extern void finish_for_init_stmt\t\t(tree);\n-extern void finish_for_cond\t\t\t(tree, tree);\n+extern void finish_for_cond\t\t\t(tree, tree, bool);\n extern void finish_for_expr\t\t\t(tree, tree);\n extern void finish_for_stmt\t\t\t(tree);\n extern tree begin_range_for_stmt\t\t(tree, tree);"}, {"sha": "bfd91521050b4d6923dc1454432dcc64ecf84354", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -3667,7 +3667,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n       finish_for_init_stmt (for_stmt);\n       finish_for_cond (build2 (NE_EXPR, boolean_type_node, iterator,\n \t\t\t       build_int_cst (TREE_TYPE (iterator), -1)),\n-\t\t       for_stmt);\n+\t\t       for_stmt, false);\n       elt_init = cp_build_unary_op (PREDECREMENT_EXPR, iterator, 0,\n \t\t\t\t    complain);\n       if (elt_init == error_mark_node)"}, {"sha": "9e28cedd0e7521d3dd7737a4ea3e3d67059f5086", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -1978,7 +1978,7 @@ static tree cp_parser_for\n static tree cp_parser_c_for\n   (cp_parser *, tree, tree, bool);\n static tree cp_parser_range_for\n-  (cp_parser *, tree, tree, tree);\n+  (cp_parser *, tree, tree, tree, bool);\n static void do_range_for_auto_deduction\n   (tree, tree);\n static tree cp_parser_perform_range_for_lookup\n@@ -9904,7 +9904,7 @@ cp_parser_for (cp_parser *parser, bool ivdep)\n   is_range_for = cp_parser_for_init_statement (parser, &decl);\n \n   if (is_range_for)\n-    return cp_parser_range_for (parser, scope, init, decl);\n+    return cp_parser_range_for (parser, scope, init, decl, ivdep);\n   else\n     return cp_parser_c_for (parser, scope, init, ivdep);\n }\n@@ -9924,20 +9924,14 @@ cp_parser_c_for (cp_parser *parser, tree scope, tree init, bool ivdep)\n \n   /* If there's a condition, process it.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n-    {\n-      condition = cp_parser_condition (parser);\n-      if (ivdep)\n-\tcondition = build2 (ANNOTATE_EXPR, TREE_TYPE (condition), condition,\n-\t\t\t    build_int_cst (integer_type_node,\n-\t\t\t\t\t   annot_expr_ivdep_kind));\n-    }\n+    condition = cp_parser_condition (parser);\n   else if (ivdep)\n     {\n       cp_parser_error (parser, \"missing loop condition in loop with \"\n \t\t       \"%<GCC ivdep%> pragma\");\n       condition = error_mark_node;\n     }\n-  finish_for_cond (condition, stmt);\n+  finish_for_cond (condition, stmt, ivdep);\n   /* Look for the `;'.  */\n   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n \n@@ -9960,7 +9954,8 @@ cp_parser_c_for (cp_parser *parser, tree scope, tree init, bool ivdep)\n   regular FOR_STMT.  */\n \n static tree\n-cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl)\n+cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl,\n+\t\t     bool ivdep)\n {\n   tree stmt, range_expr;\n \n@@ -9979,6 +9974,8 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl)\n       if (check_for_bare_parameter_packs (range_expr))\n \trange_expr = error_mark_node;\n       stmt = begin_range_for_stmt (scope, init);\n+      if (ivdep)\n+\tRANGE_FOR_IVDEP (stmt) = 1;\n       finish_range_for_decl (stmt, range_decl, range_expr);\n       if (!type_dependent_expression_p (range_expr)\n \t  /* do_auto_deduction doesn't mess with template init-lists.  */\n@@ -9988,7 +9985,7 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl)\n   else\n     {\n       stmt = begin_for_stmt (scope, init);\n-      stmt = cp_convert_range_for (stmt, range_decl, range_expr);\n+      stmt = cp_convert_range_for (stmt, range_decl, range_expr, ivdep);\n     }\n   return stmt;\n }\n@@ -10079,7 +10076,8 @@ do_range_for_auto_deduction (tree decl, tree range_expr)\n    namespace.  */\n \n tree\n-cp_convert_range_for (tree statement, tree range_decl, tree range_expr)\n+cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n+\t\t      bool ivdep)\n {\n   tree begin, end;\n   tree iter_type, begin_expr, end_expr;\n@@ -10136,7 +10134,7 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr)\n \t\t\t\t begin, ERROR_MARK,\n \t\t\t\t end, ERROR_MARK,\n \t\t\t\t NULL, tf_warning_or_error);\n-  finish_for_cond (condition, statement);\n+  finish_for_cond (condition, statement, ivdep);\n \n   /* The new increment expression.  */\n   expression = finish_unary_op_expr (input_location,\n@@ -10329,7 +10327,7 @@ cp_parser_iteration_statement (cp_parser* parser, bool ivdep)\n \tcp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);\n \t/* Parse the condition.  */\n \tcondition = cp_parser_condition (parser);\n-\tfinish_while_stmt_cond (condition, statement);\n+\tfinish_while_stmt_cond (condition, statement, ivdep);\n \t/* Look for the `)'.  */\n \tcp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n \t/* Parse the dependent statement.  */\n@@ -10359,7 +10357,7 @@ cp_parser_iteration_statement (cp_parser* parser, bool ivdep)\n \t/* Parse the expression.  */\n \texpression = cp_parser_expression (parser, /*cast_p=*/false, NULL);\n \t/* We're done with the do-statement.  */\n-\tfinish_do_stmt (expression, statement);\n+\tfinish_do_stmt (expression, statement, ivdep);\n \t/* Look for the `)'.  */\n \tcp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n \t/* Look for the `;'.  */\n@@ -30926,9 +30924,11 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context)\n \tcp_parser_skip_to_pragma_eol (parser, pragma_tok);\n \tcp_token *tok;\n \ttok = cp_lexer_peek_token (the_parser->lexer);\n-\tif (tok->type != CPP_KEYWORD || tok->keyword != RID_FOR)\n+\tif (tok->type != CPP_KEYWORD\n+\t    || (tok->keyword != RID_FOR && tok->keyword != RID_WHILE\n+\t\t&& tok->keyword != RID_DO))\n \t  {\n-\t    cp_parser_error (parser, \"for statement expected\");\n+\t    cp_parser_error (parser, \"for, while or do statement expected\");\n \t    return false;\n \t  }\n \tcp_parser_iteration_statement (parser, true);"}, {"sha": "db08d1dd99e29bec037e4687e583131862361841", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -13318,7 +13318,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       RECUR (FOR_INIT_STMT (t));\n       finish_for_init_stmt (stmt);\n       tmp = RECUR (FOR_COND (t));\n-      finish_for_cond (tmp, stmt);\n+      finish_for_cond (tmp, stmt, false);\n       tmp = RECUR (FOR_EXPR (t));\n       finish_for_expr (tmp, stmt);\n       RECUR (FOR_BODY (t));\n@@ -13333,7 +13333,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n         decl = tsubst (decl, args, complain, in_decl);\n         maybe_push_decl (decl);\n         expr = RECUR (RANGE_FOR_EXPR (t));\n-        stmt = cp_convert_range_for (stmt, decl, expr);\n+        stmt = cp_convert_range_for (stmt, decl, expr, RANGE_FOR_IVDEP (t));\n         RECUR (RANGE_FOR_BODY (t));\n         finish_for_stmt (stmt);\n       }\n@@ -13342,7 +13342,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case WHILE_STMT:\n       stmt = begin_while_stmt ();\n       tmp = RECUR (WHILE_COND (t));\n-      finish_while_stmt_cond (tmp, stmt);\n+      finish_while_stmt_cond (tmp, stmt, false);\n       RECUR (WHILE_BODY (t));\n       finish_while_stmt (stmt);\n       break;\n@@ -13352,7 +13352,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       RECUR (DO_BODY (t));\n       finish_do_body (stmt);\n       tmp = RECUR (DO_COND (t));\n-      finish_do_stmt (tmp, stmt);\n+      finish_do_stmt (tmp, stmt, false);\n       break;\n \n     case IF_STMT:"}, {"sha": "e616196f7dcb39e8d34e1ef5486cf3a1306ab2f5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -726,9 +726,15 @@ begin_while_stmt (void)\n    WHILE_STMT.  */\n \n void\n-finish_while_stmt_cond (tree cond, tree while_stmt)\n+finish_while_stmt_cond (tree cond, tree while_stmt, bool ivdep)\n {\n   finish_cond (&WHILE_COND (while_stmt), maybe_convert_cond (cond));\n+  if (ivdep && cond != error_mark_node)\n+    WHILE_COND (while_stmt) = build2 (ANNOTATE_EXPR,\n+\t\t\t\t      TREE_TYPE (WHILE_COND (while_stmt)),\n+\t\t\t\t      WHILE_COND (while_stmt),\n+\t\t\t\t      build_int_cst (integer_type_node,\n+\t\t\t\t\t\t     annot_expr_ivdep_kind));\n   simplify_loop_decl_cond (&WHILE_COND (while_stmt), WHILE_BODY (while_stmt));\n }\n \n@@ -771,9 +777,12 @@ finish_do_body (tree do_stmt)\n    COND is as indicated.  */\n \n void\n-finish_do_stmt (tree cond, tree do_stmt)\n+finish_do_stmt (tree cond, tree do_stmt, bool ivdep)\n {\n   cond = maybe_convert_cond (cond);\n+  if (ivdep && cond != error_mark_node)\n+    cond = build2 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t   build_int_cst (integer_type_node, annot_expr_ivdep_kind));\n   DO_COND (do_stmt) = cond;\n }\n \n@@ -876,9 +885,15 @@ finish_for_init_stmt (tree for_stmt)\n    FOR_STMT.  */\n \n void\n-finish_for_cond (tree cond, tree for_stmt)\n+finish_for_cond (tree cond, tree for_stmt, bool ivdep)\n {\n   finish_cond (&FOR_COND (for_stmt), maybe_convert_cond (cond));\n+  if (ivdep && cond != error_mark_node)\n+    FOR_COND (for_stmt) = build2 (ANNOTATE_EXPR,\n+\t\t\t\t  TREE_TYPE (FOR_COND (for_stmt)),\n+\t\t\t\t  FOR_COND (for_stmt),\n+\t\t\t\t  build_int_cst (integer_type_node,\n+\t\t\t\t\t\t annot_expr_ivdep_kind));\n   simplify_loop_decl_cond (&FOR_COND (for_stmt), FOR_BODY (for_stmt));\n }\n "}, {"sha": "fdc9ed0feadca8ebecd2cc10760ffa5e1e1f47d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -1,3 +1,10 @@\n+2013-10-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* g++.dg/vect/pr33426-ivdep-2.cc: New.\n+\t* g++.dg/vect/pr33426-ivdep-3.cc: New.\n+\t* g++.dg/vect/pr33426-ivdep-4.cc: New.\n+\n 2013-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/58784"}, {"sha": "3d042301f964af41adff1fcf8fb13549738342ce", "filename": "gcc/testsuite/g++.dg/vect/pr33426-ivdep-2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-2.cc?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-additional-options \"-O3 -fopt-info-vec-optimized -fdump-tree-original -fdump-tree-gimple\" } */\n+\n+/* PR other/33426 */\n+/* Testing whether #pragma ivdep is working.  */\n+\n+void foo(int n, int *a, int *b, int *c) {\n+  int i;\n+ i = 0;\n+#pragma GCC ivdep\n+  while(i < n)\n+    {\n+      a[i] = b[i] + c[i];\n+      ++i;\n+    }\n+}\n+\n+void bar(int n, int *a, int *b, int *c) {\n+  int i;\n+ i = 0;\n+#pragma GCC ivdep\n+  do\n+    {\n+      a[i] = b[i] + c[i];\n+      ++i;\n+    }\n+  while(i < n);\n+}\n+\n+/* { dg-message \"loop vectorized\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \" version\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \" alias\" \"\" { target *-*-* } 0 } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"ANNOTATE_EXPR \" 2 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"ANNOTATE \" 2 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "35de3b285e75d30b6fd48ca97405f727378e8b0c", "filename": "gcc/testsuite/g++.dg/vect/pr33426-ivdep-3.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-3.cc?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-additional-options \"-std=c++11 -O3 -fopt-info-vec-optimized -fdump-tree-original -fdump-tree-gimple\" } */\n+\n+/* PR other/33426 */\n+/* Testing whether #pragma ivdep is working.  */\n+\n+int ar[100];\n+\n+void foo(int *a) {\n+#pragma GCC ivdep\n+  for (auto &i : ar) {\n+    i *= *a;\n+  }\n+}\n+\n+/* { dg-message \"loop vectorized\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \" version\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \" alias\" \"\" { target *-*-* } 0 } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"ANNOTATE_EXPR \" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"ANNOTATE \" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "8850505ac1f89b846ee719596dc430671588595b", "filename": "gcc/testsuite/g++.dg/vect/pr33426-ivdep-4.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr33426-ivdep-4.cc?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-additional-options \"-std=c++11 -O3 -fopt-info-vec-optimized -fdump-tree-original -fdump-tree-gimple\" } */\n+\n+/* PR other/33426 */\n+/* Testing whether #pragma ivdep is working.  */\n+\n+#include <vector>\n+\n+template<class T, class T2>\n+void Loop(T *b, T2 c) {\n+#pragma GCC ivdep\n+  for (auto &i : *b) {\n+    i *= *c;\n+  }\n+}\n+\n+void foo(std::vector<int> *ar, int *b) {\n+ Loop<std::vector<int>, int*>(ar, b);\n+}\n+\n+/* { dg-message \"loop vectorized\" \"\" { target *-*-* } 0 } */\n+/* FIXME:     dg-bogus \" version\" \"\" { target *-*-* } 0  */\n+/* FIXME:     dg-bogus \" alias\" \"\" { target *-*-* } 0  */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"ANNOTATE_EXPR \" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"ANNOTATE \" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "d70565735355de987027fc0fe09dac26db3a6435", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c5028d807fd315cfeb2f1d44e5ffb1c6ca470aff", "patch": "@@ -307,7 +307,8 @@ replace_loop_annotate ()\n       if ((annot_expr_kind) tree_low_cst (gimple_call_arg (stmt, 1), 0)\n \t  != annot_expr_ivdep_kind)\n \tcontinue;\n-      warning (0, \"ignoring %<GCC ivdep%> annotation\");\n+      warning_at (gimple_location (stmt), 0, \"ignoring %<GCC ivdep%> \"\n+\t\t  \"annotation\");\n       stmt = gimple_build_assign (gimple_call_lhs (stmt),\n \t\t\t\t  gimple_call_arg (stmt, 0));\n       gsi_replace (&gsi, stmt, true);"}]}