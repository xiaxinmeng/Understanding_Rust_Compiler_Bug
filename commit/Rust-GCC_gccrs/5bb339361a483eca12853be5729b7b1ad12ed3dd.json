{"sha": "5bb339361a483eca12853be5729b7b1ad12ed3dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiMzM5MzYxYTQ4M2VjYTEyODUzYmU1NzI5YjdiMWFkMTJlZDNkZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-12-20T18:05:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-12-20T18:05:26Z"}, "message": "s390: Generate rnsbg\n\n        * config/s390/s390.md (*insv_rnsbg_noshift, *insv_rnsbg_srl): New.\n\nCo-Authored-By: Andreas Krebbel <Andreas.Krebbel@de.ibm.com>\n\nFrom-SVN: r194646", "tree": {"sha": "6f3ba2f8c7522ea6a56230efb2496952da035e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3ba2f8c7522ea6a56230efb2496952da035e51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb339361a483eca12853be5729b7b1ad12ed3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb339361a483eca12853be5729b7b1ad12ed3dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb339361a483eca12853be5729b7b1ad12ed3dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb339361a483eca12853be5729b7b1ad12ed3dd/comments", "author": null, "committer": null, "parents": [{"sha": "571e408a9f31b9ddc1c71019ce63d12e355bc219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571e408a9f31b9ddc1c71019ce63d12e355bc219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/571e408a9f31b9ddc1c71019ce63d12e355bc219"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "1fb596fb2c0e02dbf08ba23b4a285a917d2389f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb339361a483eca12853be5729b7b1ad12ed3dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb339361a483eca12853be5729b7b1ad12ed3dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bb339361a483eca12853be5729b7b1ad12ed3dd", "patch": "@@ -36,6 +36,8 @@\n \t(*r<IXOR>sbg_di_rotl, *r<IXOR>sbg_<GPR>_srl, *r<IXOR>sbg_<GPR>_sll):\n \tNew patterns.\n \n+\t* config/s390/s390.md (*insv_rnsbg_noshift, *insv_rnsbg_srl): New.\n+\n 2012-12-20  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR bootstrap/55202"}, {"sha": "4666122ecef6c3a098c1fab470551e33c6c0cf66", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb339361a483eca12853be5729b7b1ad12ed3dd/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb339361a483eca12853be5729b7b1ad12ed3dd/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=5bb339361a483eca12853be5729b7b1ad12ed3dd", "patch": "@@ -3534,6 +3534,61 @@\n   \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,%3\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n+;; These two are generated by combine for s.bf &= val.\n+;; ??? For bitfields smaller than 32-bits, we wind up with SImode\n+;; shifts and ands, which results in some truly awful patterns\n+;; including subregs of operations.  Rather unnecessisarily, IMO.\n+;; Instead of\n+;;\n+;; (set (zero_extract:DI (reg/v:DI 50 [ s ])\n+;;        (const_int 24 [0x18])\n+;;        (const_int 0 [0]))\n+;;    (subreg:DI (and:SI (subreg:SI (lshiftrt:DI (reg/v:DI 50 [ s ])\n+;;                    (const_int 40 [0x28])) 4)\n+;;            (reg:SI 4 %r4 [ y+4 ])) 0))\n+;;\n+;; we should instead generate\n+;;\n+;; (set (zero_extract:DI (reg/v:DI 50 [ s ])\n+;;        (const_int 24 [0x18])\n+;;        (const_int 0 [0]))\n+;;    (and:DI (lshiftrt:DI (reg/v:DI 50 [ s ])\n+;;                    (const_int 40 [0x28]))\n+;;            (subreg:DI (reg:SI 4 %r4 [ y+4 ]) 0)))\n+;;\n+;; by noticing that we can push down the outer paradoxical subreg\n+;; into the operation.\n+\n+(define_insn \"*insv_rnsbg_noshift\"\n+  [(set (zero_extract:DI\n+\t  (match_operand:DI 0 \"nonimmediate_operand\" \"+d\")\n+\t  (match_operand 1 \"const_int_operand\" \"\")\n+\t  (match_operand 2 \"const_int_operand\" \"\"))\n+\t(and:DI\n+\t  (match_dup 0)\n+\t  (match_operand:DI 3 \"nonimmediate_operand\" \"d\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\n+   && INTVAL (operands[1]) + INTVAL (operands[2]) == 64\"\n+  \"rnsbg\\t%0,%3,%2,63,0\"\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n+(define_insn \"*insv_rnsbg_srl\"\n+  [(set (zero_extract:DI\n+\t  (match_operand:DI 0 \"nonimmediate_operand\" \"+d\")\n+\t  (match_operand 1 \"const_int_operand\" \"\")\n+\t  (match_operand 2 \"const_int_operand\" \"\"))\n+\t(and:DI\n+\t  (lshiftrt:DI\n+\t    (match_dup 0)\n+\t    (match_operand 3 \"const_int_operand\" \"\"))\n+\t  (match_operand:DI 4 \"nonimmediate_operand\" \"d\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\n+   && INTVAL (operands[3]) == 64 - INTVAL (operands[1]) - INTVAL (operands[2])\"\n+  \"rnsbg\\t%0,%4,%2,%2+%1-1,%3\"\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n (define_insn \"*insv<mode>_mem_reg\"\n   [(set (zero_extract:W (match_operand:QI 0 \"memory_operand\" \"+Q,S\")\n \t\t\t(match_operand 1 \"const_int_operand\" \"n,n\")"}]}