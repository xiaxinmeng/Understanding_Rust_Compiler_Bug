{"sha": "00d29b97d9ed9af957f896b8279ae85d2e16deb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMjliOTdkOWVkOWFmOTU3Zjg5NmI4Mjc5YWU4NWQyZTE2ZGViNA==", "commit": {"author": {"name": "Sam Tebbs", "email": "sam.tebbs@arm.com", "date": "2018-08-01T10:10:28Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2018-08-01T10:10:28Z"}, "message": "[PATCH][AArch64] Stop redundant zero-extension after UMOV when in DI mode\n\nThis patch extends the aarch64_get_lane_zero_extendsi instruction\ndefinition to also cover DI mode. This prevents a redundant AND\ninstruction from being generated due to the pattern failing to be matched.\n\nCommitted on behalf of Sam Tebbs.\n\ngcc/\n2018-08-01  Sam Tebbs  <sam.tebbs@arm.com>\n\n\t* config/aarch64/aarch64-simd.md\n\t(*aarch64_get_lane_zero_extendsi<mode>): Rename to...\n\t(*aarch64_get_lane_zero_extend<GPI:mode><VDQQH:mode>): ... This and\n\tuse GPI iterator instead of SI mode.\n\ngcc/testsuite\n2018-08-01  Sam Tebbs  <sam.tebbs@arm.com>\n\n\t* gcc.target/aarch64/extract_zero_extend.c: New file.\n\nFrom-SVN: r263200", "tree": {"sha": "ff15f38944d8bdba046eb54e983eb995d16e0557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff15f38944d8bdba046eb54e983eb995d16e0557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d29b97d9ed9af957f896b8279ae85d2e16deb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d29b97d9ed9af957f896b8279ae85d2e16deb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d29b97d9ed9af957f896b8279ae85d2e16deb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d29b97d9ed9af957f896b8279ae85d2e16deb4/comments", "author": null, "committer": null, "parents": [{"sha": "5922dcb5cc82f48862cd42bd84e3c85733cac0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5922dcb5cc82f48862cd42bd84e3c85733cac0ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5922dcb5cc82f48862cd42bd84e3c85733cac0ce"}], "stats": {"total": 123, "additions": 108, "deletions": 15}, "files": [{"sha": "b8152e34c66e8292e2bc5172e4d160becf4661ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00d29b97d9ed9af957f896b8279ae85d2e16deb4", "patch": "@@ -1,3 +1,10 @@\n+2018-08-01  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(*aarch64_get_lane_zero_extendsi<mode>): Rename to...\n+\t(*aarch64_get_lane_zero_extend<GPI:mode><VDQQH:mode>): ... This and\n+\tuse GPI iterator instead of SI mode.\n+\n 2018-08-01  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/rs6000/rs6000.md (speculation_barrier): Renamed from"}, {"sha": "1d574cd0fd2799de86177edc6004f6c5a3e674f6", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=00d29b97d9ed9af957f896b8279ae85d2e16deb4", "patch": "@@ -3030,21 +3030,22 @@\n     operands[2] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[2]));\n     return \"smov\\\\t%<GPI:w>0, %1.<VDQQH:Vetype>[%2]\";\n   }\n-  [(set_attr \"type\" \"neon_to_gp<q>\")]\n-)\n-\n-(define_insn \"*aarch64_get_lane_zero_extendsi<mode>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t  (vec_select:<VEL>\n-\t    (match_operand:VDQQH 1 \"register_operand\" \"w\")\n-\t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n-  \"TARGET_SIMD\"\n-  {\n-    operands[2] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[2]));\n-    return \"umov\\\\t%w0, %1.<Vetype>[%2]\";\n-  }\n-  [(set_attr \"type\" \"neon_to_gp<q>\")]\n+  [(set_attr \"type\" \"neon_to_gp<q>\")]\r\n+)\r\n+\r\n+(define_insn \"*aarch64_get_lane_zero_extend<GPI:mode><VDQQH:mode>\"\r\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\r\n+\t(zero_extend:GPI\r\n+\t  (vec_select:<VEL>\r\n+\t    (match_operand:VDQQH 1 \"register_operand\" \"w\")\r\n+\t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\r\n+  \"TARGET_SIMD\"\r\n+  {\r\n+    operands[2] = aarch64_endian_lane_rtx (<VDQQH:MODE>mode,\r\n+\t\t\t\t\t   INTVAL (operands[2]));\r\n+    return \"umov\\\\t%w0, %1.<Vetype>[%2]\";\r\n+  }\r\n+  [(set_attr \"type\" \"neon_to_gp<q>\")]\r\n )\n \n ;; Lane extraction of a value, neither sign nor zero extension"}, {"sha": "f9448b94666cccda68f5e9d2936b3ecf50d38d43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00d29b97d9ed9af957f896b8279ae85d2e16deb4", "patch": "@@ -1,3 +1,7 @@\n+2018-08-01  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\t* gcc.target/aarch64/extract_zero_extend.c: New file.\n+\n 2018-08-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/85704"}, {"sha": "0209305cd55b0b62b794f790a1cc3606fcc7a44b", "filename": "gcc/testsuite/gcc.target/aarch64/extract_zero_extend.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextract_zero_extend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d29b97d9ed9af957f896b8279ae85d2e16deb4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextract_zero_extend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextract_zero_extend.c?ref=00d29b97d9ed9af957f896b8279ae85d2e16deb4", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O3 -fdump-rtl-final\" } */\r\n+\r\n+/* Tests div16qi.  */\r\n+typedef unsigned char div16qi __attribute__ ((vector_size (16)));\r\n+/* Tests div8qi.  */\r\n+typedef unsigned char div8qi __attribute__ ((vector_size (8)));\r\n+/* Tests div8hi.  */\r\n+typedef unsigned short div8hi __attribute__ ((vector_size (16)));\r\n+/* Tests div4hi.  */\r\n+typedef unsigned short div4hi __attribute__ ((vector_size (8)));\r\n+\r\n+/* Tests siv16qi.  */\r\n+typedef unsigned char siv16qi __attribute__ ((vector_size (16)));\r\n+/* Tests siv8qi.  */\r\n+typedef unsigned char siv8qi __attribute__ ((vector_size (8)));\r\n+/* Tests siv8hi.  */\r\n+typedef unsigned short siv8hi __attribute__ ((vector_size (16)));\r\n+/* Tests siv4hi.  */\r\n+typedef unsigned short siv4hi __attribute__ ((vector_size (8)));\r\n+\r\n+\r\n+unsigned long long\r\n+foo_div16qi (div16qi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+unsigned long long\r\n+foo_div8qi (div8qi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+unsigned long long\r\n+foo_div8hi (div8hi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+unsigned long long\r\n+foo_div4hi (div4hi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+unsigned int\r\n+foo_siv16qi (siv16qi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+unsigned int\r\n+foo_siv8qi (siv8qi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+unsigned int\r\n+foo_siv8hi (siv8hi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+unsigned int\r\n+foo_siv4hi (siv4hi a)\r\n+{\r\n+  return a[0];\r\n+}\r\n+\r\n+/* { dg-final { scan-assembler-times \"umov\\\\t\" 8 } } */\r\n+/* { dg-final { scan-assembler-not \"and\\\\t\" } } */\r\n+\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv16qi\" \"final\" } } */\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv8qi\" \"final\" } } */\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv8hi\" \"final\" } } */\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extenddiv4hi\" \"final\" } } */\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv16qi\" \"final\" } } */\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv8qi\" \"final\" } } */\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv8hi\" \"final\" } } */\r\n+/* { dg-final { scan-rtl-dump \"aarch64_get_lane_zero_extendsiv4hi\" \"final\" } } */\r"}]}