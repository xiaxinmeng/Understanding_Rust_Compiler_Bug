{"sha": "9cbfc2691360fab71388538043badc3dc8c6963c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiZmMyNjkxMzYwZmFiNzEzODg1MzgwNDNiYWRjM2RjOGM2OTYzYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T16:04:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T16:04:52Z"}, "message": "[multiple changes]\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Is_Atomic_Object): Predicate does not apply to\n\tsubprograms.\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi, gnat_ugn.texi: Clean up documentation on warning and\n\tstyle check messages.\n\t* sem_res.adb (Resolve_Call): Don't call\n\tCheck_For_Eliminated_Subprogram if we are analyzing within a spec\n\texpression.\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Add documentation for debug flags .X and .Y\n\t* exp_ch4.adb (Expand_Short_Circuit_Operator): Use\n\tUse_Expression_With_Actions.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set\n\tUse_Expression_With_Actions.\n\t* opt.ads (Use_Expression_With_Actions): New switch.\n\nFrom-SVN: r160931", "tree": {"sha": "292f78e11905ea1831b546222f3c322a3eb92884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/292f78e11905ea1831b546222f3c322a3eb92884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cbfc2691360fab71388538043badc3dc8c6963c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbfc2691360fab71388538043badc3dc8c6963c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cbfc2691360fab71388538043badc3dc8c6963c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbfc2691360fab71388538043badc3dc8c6963c/comments", "author": null, "committer": null, "parents": [{"sha": "92252980733eb21a87c8c96dc55814cd17616174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92252980733eb21a87c8c96dc55814cd17616174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92252980733eb21a87c8c96dc55814cd17616174"}], "stats": {"total": 131, "additions": 106, "deletions": 25}, "files": [{"sha": "88aa0a428d1a0736cd7037d3768d3a1a9f96d4cb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -1,3 +1,25 @@\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Is_Atomic_Object): Predicate does not apply to\n+\tsubprograms.\n+\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Clean up documentation on warning and\n+\tstyle check messages.\n+\t* sem_res.adb (Resolve_Call): Don't call\n+\tCheck_For_Eliminated_Subprogram if we are analyzing within a spec\n+\texpression.\n+\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Add documentation for debug flags .X and .Y\n+\t* exp_ch4.adb (Expand_Short_Circuit_Operator): Use\n+\tUse_Expression_With_Actions.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set\n+\tUse_Expression_With_Actions.\n+\t* opt.ads (Use_Expression_With_Actions): New switch.\n+\n 2010-06-17  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_intr.adb: Minor code reorganization (use UI_Max)"}, {"sha": "ac8ed4a15989fc2c630de4f52ce55b35743c606e", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -141,8 +141,8 @@ package body Debug is\n    --  d.U\n    --  d.V\n    --  d.W  Print out debugging information for Walk_Library_Items\n-   --  d.X  Use Expression_With_Actions for short-circuited forms\n-   --  d.Y\n+   --  d.X  Use Expression_With_Actions\n+   --  d.Y  Do not use Expression_With_Actions\n    --  d.Z\n \n    --  d1   Error msgs have node numbers where possible\n@@ -581,10 +581,15 @@ package body Debug is\n \n    --  d.X  By default, the compiler uses an elaborate rewriting framework for\n    --       short-circuited forms where the right hand condition generates\n-   --       actions to be inserted. Use of this switch causes the compiler to\n-   --       use the much simpler Expression_With_Actions node for this purpose.\n-   --       It is a debug flag to aid transitional implementation in gigi and\n-   --       the back end. As soon as that works fine, we will remove this flag.\n+   --       actions to be inserted. With the gcc backend, we now use the new\n+   --       N_Expression_With_Actions node for this expansion, but we still use\n+   --       the old method for other backends and in SCIL mode. This debug flag\n+   --       forces use of the new N_Expression_With_Actions node in these other\n+   --       cases and is intended for transitional use.\n+\n+   --  d.Y  Prevents the use of the N_Expression_With_Actions node even in the\n+   --       case of the gcc back end. Provided as a back up in case the new\n+   --       scheme has problems.\n \n    --  d1   Error messages have node numbers where possible. Normally error\n    --       messages have only source locations. This option is useful when"}, {"sha": "f7c781fe85599e51a8867734003f5287916fb43a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -8829,10 +8829,10 @@ package body Exp_Ch4 is\n          --  of the introduction of the new variable C, which obscures the\n          --  structure of the test.\n \n-         --  We use this \"old approach\" by default for now, unless the\n-         --  special debug switch gnatd.X is used.\n+         --  We use this \"old approach\" if use of N_Expression_With_Actions\n+         --  is False (see description in Opt of when this is or is not set).\n \n-         if not Debug_Flag_Dot_XX then\n+         if not Use_Expression_With_Actions then\n             Op_Var := Make_Temporary (Loc, 'C', Related_Node => N);\n \n             Insert_Action (N,"}, {"sha": "899b013dcb0c1e6673a6153955c86970b09a1c4e", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -332,6 +332,33 @@ procedure Gnat1drv is\n       else\n          Suppress_Options (Overflow_Check) := True;\n       end if;\n+\n+      --  Set switch indicating if we can use N_Expression_With_Actions\n+\n+      --  Debug flag -gnatd.X decisively sets usage on\n+\n+      if Debug_Flag_Dot_XX then\n+         Use_Expression_With_Actions := True;\n+\n+      --  Debug flag -gnatd.Y decisively sets usage off\n+\n+      elsif Debug_Flag_Dot_YY then\n+         Use_Expression_With_Actions := False;\n+\n+      --  If no debug flags, usage off for AAMP, VM, SCIL cases\n+\n+      elsif AAMP_On_Target\n+        or else VM_Target /= No_VM\n+        or else Generate_SCIL\n+      then\n+         Use_Expression_With_Actions := False;\n+\n+         --  Otherwise normal gcc back end, for now still turn usage off by\n+         --  default.\n+\n+      else\n+         Use_Expression_With_Actions := False;\n+      end if;\n    end Adjust_Global_Switches;\n \n    --------------------"}, {"sha": "def4db1ac9a742d144e2b4ada12d816cd85f590e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -5247,6 +5247,9 @@ used to cause the compiler to entirely ignore all WARNINGS pragmas. This can\n be useful in checking whether obsolete pragmas in existing programs are hiding\n real problems.\n \n+Note: pragma Warnings does not affect the processing of style messages. See\n+separate entry for pragma Style_Checks for control of style messages.\n+\n @node Pragma Weak_External\n @unnumberedsec Pragma Weak_External\n @findex Weak_External"}, {"sha": "274dc8c46625b753e25c80ea9474f8a2dff77654", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -4201,7 +4201,7 @@ Note that @option{^-gnatg^/GNAT_INTERNAL^} implies\n @option{^-gnatwae^/WARNINGS=ALL,ERRORS^} and\n @option{^-gnatyg^/STYLE_CHECKS=GNAT^}\n so that all standard warnings and all standard style options are turned on.\n-All warnings and style error messages are treated as errors.\n+All warnings and style messages are treated as errors.\n \n @ifclear vms\n @item -gnatG=nn\n@@ -5213,12 +5213,14 @@ This switch suppresses warnings for implicit dereferences in\n indexed components, slices, and selected components.\n \n @item -gnatwe\n-@emph{Treat warnings as errors.}\n+@emph{Treat warnings and style checks as errors.}\n @cindex @option{-gnatwe} (@command{gcc})\n @cindex Warnings, treat as error\n-This switch causes warning messages to be treated as errors.\n+This switch causes warning messages and style check messages to be\n+treated as errors.\n The warning string still appears, but the warning messages are counted\n-as errors, and prevent the generation of an object file.\n+as errors, and prevent the generation of an object file. Note that this\n+is the only -gnatw switch that affects the handling of style check messages.\n \n @item -gnatw.e\n @emph{Activate every optional warning}\n@@ -5581,7 +5583,8 @@ This switch completely suppresses the\n output of all warning messages from the GNAT front end.\n Note that it does not suppress warnings from the @command{gcc} back end.\n To suppress these back end warnings as well, use the switch @option{-w}\n-in addition to @option{-gnatws}.\n+in addition to @option{-gnatws}. Also this switch has no effect on the\n+handling of style check messages.\n \n @item -gnatwt\n @emph{Activate warnings for tracking of deleted conditional code.}\n@@ -6140,8 +6143,10 @@ causes the compiler to\n enforce specified style rules. A limited set of style rules has been used\n in writing the GNAT sources themselves. This switch allows user programs\n to activate all or some of these checks. If the source program fails a\n-specified style check, an appropriate warning message is given, preceded by\n-the character sequence ``(style)''.\n+specified style check, an appropriate message is given, preceded by\n+the character sequence ``(style)''. This message does not prevent\n+successful compilation (unless the @option{-gnatwe} switch is used).\n+\n @ifset vms\n @code{(option,option,@dots{})} is a sequence of keywords\n @end ifset"}, {"sha": "9d0b2cdcea30dec2a3136731978255cb1fae9321", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -453,8 +453,8 @@ package Opt is\n                            Front_End_Setjmp_Longjmp_Exceptions;\n    --  GNAT\n    --  Set to the appropriate value depending on the default as given in\n-   --  system.ads (ZCX_By_Default, GCC_ZCX_Support).\n-   --  The C convention is there to make this variable accessible to gigi.\n+   --  system.ads (ZCX_By_Default, GCC_ZCX_Support). The C convention is there\n+   --  to make this variable accessible to gigi.\n \n    Exception_Tracebacks : Boolean := False;\n    --  GNATBIND\n@@ -1239,6 +1239,13 @@ package Opt is\n    --  Set to True if -h (-gnath for the compiler) switch encountered\n    --  requesting usage information\n \n+   Use_Expression_With_Actions : Boolean := False;\n+   --  The N_Expression_With_Actions node has been introduced relatively\n+   --  recently, and not all back ends are prepared to handle it yet. So\n+   --  we use this flag to suppress its use during a transitional period.\n+   --  Currently the default is False for all cases except the standard\n+   --  GCC back end. The default can be modified using -gnatd.X/-gnatd.Y.\n+\n    Use_Pragma_Linker_Constructor : Boolean := False;\n    --  GNATBIND\n    --  True if pragma Linker_Constructor applies to adainit"}, {"sha": "aa551ac27678dd54a9a2a9e0bca19799bdf345b3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -5447,9 +5447,14 @@ package body Sem_Res is\n          Check_Potentially_Blocking_Operation (N);\n       end if;\n \n-      --  Issue an error for a call to an eliminated subprogram\n+      --  Issue an error for a call to an eliminated subprogram. We skip this\n+      --  in a spec expression, e.g. a call in a default parameter value, since\n+      --  we are not really doing a call at this time. That's important because\n+      --  the spec expression may itself belong to an eliminated subprogram.\n \n-      Check_For_Eliminated_Subprogram (Subp, Nam);\n+      if not In_Spec_Expression then\n+         Check_For_Eliminated_Subprogram (Subp, Nam);\n+      end if;\n \n       --  All done, evaluate call and deal with elaboration issues\n "}, {"sha": "cc25e34fb984a7c81befca664e428fd58bf64fcb", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbfc2691360fab71388538043badc3dc8c6963c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9cbfc2691360fab71388538043badc3dc8c6963c", "patch": "@@ -5712,7 +5712,14 @@ package body Sem_Util is\n    --  Start of processing for Is_Atomic_Object\n \n    begin\n-      if Is_Atomic (Etype (N))\n+      --  Predicate is not relevant to subprograms\n+\n+      if Is_Entity_Name (N)\n+        and then Is_Overloadable (Entity (N))\n+      then\n+         return False;\n+\n+      elsif Is_Atomic (Etype (N))\n         or else (Is_Entity_Name (N) and then Is_Atomic (Entity (N)))\n       then\n          return True;"}]}