{"sha": "77cba5af77ccf8fc66f3309de666daa8a4deb623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjYmE1YWY3N2NjZjhmYzY2ZjMzMDlkZTY2NmRhYThhNGRlYjYyMw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-11-16T17:44:48Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-11-16T17:44:48Z"}, "message": "Implement N3762 string_view: a non-owning reference to a string.\n\n2013-11-16  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N3762 string_view: a non-owning reference to a string.\n\t* include/Makefile.am: Add string_view and string_view.tcc.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/string_view: Implement basic_string_view.\n\t* include/experimental/string_view.tcc: Implement basic_string_view.\n\t* testsuite/experimental/string_view/capacity/1.cc: New.\n\t* testsuite/experimental/string_view/cons/char/1.cc: New.\n\t* testsuite/experimental/string_view/cons/char/2.cc: New.\n\t* testsuite/experimental/string_view/cons/char/3.cc: New.\n\t* testsuite/experimental/string_view/cons/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/cons/wchar_t/2.cc: New.\n\t* testsuite/experimental/string_view/cons/wchar_t/3.cc: New.\n\t* testsuite/experimental/string_view/element_access/char/1.cc: New.\n\t* testsuite/experimental/string_view/element_access/char/2.cc: New.\n\t* testsuite/experimental/string_view/element_access/char/empty.cc: New.\n\t* testsuite/experimental/string_view/element_access/char/front_back.cc:\n\tNew.\n\t* testsuite/experimental/string_view/element_access/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/element_access/wchar_t/2.cc: New.\n\t* testsuite/experimental/string_view/element_access/wchar_t/empty.cc:\n\tNew.\n\t* testsuite/experimental/string_view/element_access/wchar_t/\n\tfront_back.cc: New.\n\t* testsuite/experimental/string_view/include.cc: New.\n\t* testsuite/experimental/string_view/inserters/char/1.cc: New.\n\t* testsuite/experimental/string_view/inserters/char/2.cc: New.\n\t* testsuite/experimental/string_view/inserters/char/3.cc: New.\n\t* testsuite/experimental/string_view/inserters/pod/10081-out.cc: New.\n\t* testsuite/experimental/string_view/inserters/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/inserters/wchar_t/2.cc: New.\n\t* testsuite/experimental/string_view/inserters/wchar_t/3.cc: New.\n\t* testsuite/experimental/string_view/literals/types.cc: New.\n\t* testsuite/experimental/string_view/literals/values.cc: New.\n\t* testsuite/experimental/string_view/modifiers/remove_prefix/char/1.cc:\n\tNew.\n\t* testsuite/experimental/string_view/modifiers/remove_prefix/wchar_t/\n\t1.cc: New.\n\t* testsuite/experimental/string_view/modifiers/remove_suffix/char/1.cc:\n\tNew.\n\t* testsuite/experimental/string_view/modifiers/remove_suffix/wchar_t/\n\t1.cc: New.\n\t* testsuite/experimental/string_view/operations/compare/char/1.cc: New.\n\t* testsuite/experimental/string_view/operations/compare/char/13650.cc:\n\tNew.\n\t* testsuite/experimental/string_view/operations/compare/wchar_t/1.cc:\n\tNew.\n\t* testsuite/experimental/string_view/operations/compare/wchar_t/\n\t13650.cc: New.\n\t* testsuite/experimental/string_view/operations/data/char/1.cc: New.\n\t* testsuite/experimental/string_view/operations/data/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/operations/find/char/1.cc: New.\n\t* testsuite/experimental/string_view/operations/find/char/2.cc: New.\n\t* testsuite/experimental/string_view/operations/find/char/3.cc: New.\n\t* testsuite/experimental/string_view/operations/find/char/4.cc: New.\n\t* testsuite/experimental/string_view/operations/find/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/operations/find/wchar_t/2.cc: New.\n\t* testsuite/experimental/string_view/operations/find/wchar_t/3.cc: New.\n\t* testsuite/experimental/string_view/operations/find/wchar_t/4.cc: New.\n\t* testsuite/experimental/string_view/operations/rfind/char/1.cc: New.\n\t* testsuite/experimental/string_view/operations/rfind/char/2.cc: New.\n\t* testsuite/experimental/string_view/operations/rfind/char/3.cc: New.\n\t* testsuite/experimental/string_view/operations/rfind/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/operations/rfind/wchar_t/2.cc: New.\n\t* testsuite/experimental/string_view/operations/rfind/wchar_t/3.cc: New.\n\t* testsuite/experimental/string_view/operations/substr/char/1.cc: New.\n\t* testsuite/experimental/string_view/operations/substr/wchar_t/1.cc:\n\tNew.\n\t* testsuite/experimental/string_view/operators/char/2.cc: New.\n\t* testsuite/experimental/string_view/operators/wchar_t/2.cc: New.\n\t* testsuite/experimental/string_view/range_access/char/1.cc: New.\n\t* testsuite/experimental/string_view/range_access/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/experimental/string_view/requirements/\n\texplicit_instantiation/char/1.cc: New.\n\t* testsuite/experimental/string_view/requirements/\n\texplicit_instantiation/char16_t/1.cc: New.\n\t* testsuite/experimental/string_view/requirements/\n\texplicit_instantiation/char32_t/1.cc: New.\n\t* testsuite/experimental/string_view/requirements/\n\texplicit_instantiation/wchar_t/1.cc: New.\n\t* testsuite/experimental/string_view/requirements/typedefs.cc: New.\n\t* testsuite/experimental/string_view/types/1.cc: New.\n\nFrom-SVN: r204902", "tree": {"sha": "514d119f9b28a549f0a74a9bf155e1defe856fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/514d119f9b28a549f0a74a9bf155e1defe856fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77cba5af77ccf8fc66f3309de666daa8a4deb623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cba5af77ccf8fc66f3309de666daa8a4deb623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77cba5af77ccf8fc66f3309de666daa8a4deb623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cba5af77ccf8fc66f3309de666daa8a4deb623/comments", "author": null, "committer": null, "parents": [{"sha": "0bc69b81721b14fa272b7fe5001a50a5e47d20a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc69b81721b14fa272b7fe5001a50a5e47d20a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc69b81721b14fa272b7fe5001a50a5e47d20a6"}], "stats": {"total": 5139, "additions": 5137, "deletions": 2}, "files": [{"sha": "6371e5d1b7e18e903a92e1a5defae8cee087423d", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -638,7 +638,9 @@ decimal_headers = \\\n experimental_srcdir = ${glibcxx_srcdir}/include/experimental\n experimental_builddir = ./experimental\n experimental_headers = \\\n-\t${experimental_srcdir}/optional\n+\t${experimental_srcdir}/optional \\\n+\t${experimental_srcdir}/string_view \\\n+\t${experimental_srcdir}/string_view.tcc\n \n # This is the common subset of C++ files that all three \"C\" header models use.\n c_base_srcdir = $(C_INCLUDE_DIR)"}, {"sha": "c7265834639cb002a09cef49384399e5c513a075", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -904,7 +904,9 @@ decimal_headers = \\\n experimental_srcdir = ${glibcxx_srcdir}/include/experimental\n experimental_builddir = ./experimental\n experimental_headers = \\\n-\t${experimental_srcdir}/optional\n+\t${experimental_srcdir}/optional \\\n+\t${experimental_srcdir}/string_view \\\n+\t${experimental_srcdir}/string_view.tcc\n \n \n # This is the common subset of C++ files that all three \"C\" header models use."}, {"sha": "d2cb7cfbb66a2c8901fdc9aec094ba38dfd2b604", "filename": "libstdc++-v3/include/experimental/string_view", "status": "added", "additions": 697, "deletions": 0, "changes": 697, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,697 @@\n+// Components for manipulating non-owning sequences of characters -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/string_view\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+//\n+// ISO C++ 14882: 21  Strings library\n+//\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_STRING_VIEW\n+#define _GLIBCXX_EXPERIMENTAL_STRING_VIEW 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <debug/debug.h>\n+#include <string>\n+#include <limits>\n+\n+namespace std //_GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   *  @class basic_string_view <string_view>\n+   *  @brief  A non-owning reference to a string.\n+   *\n+   *  @ingroup strings\n+   *  @ingroup sequences\n+   *\n+   *  @tparam _CharT  Type of character\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *\n+   *  A basic_string_view looks like this:\n+   *\n+   *  @code\n+   *    _CharT*    _M_str\n+   *    size_t     _M_len\n+   *  @endcode\n+   */\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+    class basic_string_view\n+    {\n+\n+    public:\n+\n+      // types\n+      using traits_type = _Traits;\n+      using value_type = _CharT;\n+      using pointer = const _CharT*;\n+      using const_pointer = const _CharT*;\n+      using reference = const _CharT&;\n+      using const_reference = const _CharT&;\n+      using const_iterator = const _CharT*;\n+      using iterator = const_iterator;\n+      using const_reverse_iterator = std::reverse_iterator<const_iterator>;\n+      using reverse_iterator = const_reverse_iterator;\n+      using size_type = size_t;\n+      using difference_type = ptrdiff_t;\n+      static constexpr size_type npos = size_type(-1);\n+\n+      // [string.view.cons], construct/copy\n+\n+      constexpr\n+      basic_string_view() noexcept\n+      : _M_len{0}, _M_str{nullptr}\n+      { }\n+\n+      constexpr basic_string_view(const basic_string_view&) noexcept = default;\n+\n+      template<typename _Allocator>\n+        basic_string_view(const basic_string<_CharT, _Traits, _Allocator>& __str) noexcept\n+        : _M_len{__str.length()}, _M_str{__str.data()}\n+        { }\n+\n+      constexpr basic_string_view(const _CharT* __str)\n+      : _M_len{__str == nullptr ? 0 : traits_type::length(__str)}, _M_str{__str}\n+      { }\n+\n+      constexpr basic_string_view(const _CharT* __str, size_type __len)\n+      : _M_len{__len}, _M_str{__str}\n+      { }\n+\n+      basic_string_view&\n+      operator=(const basic_string_view&) noexcept = default;\n+\n+      // [string.view.iterators], iterators\n+\n+      constexpr const_iterator\n+      begin() const noexcept\n+      { return this->_M_str; }\n+\n+      constexpr const_iterator\n+      end() const noexcept\n+      { return this->_M_str + this->_M_len; }\n+\n+      constexpr const_iterator\n+      cbegin() const noexcept\n+      { return this->_M_str; }\n+\n+      constexpr const_iterator\n+      cend() const noexcept\n+      { return this->_M_str + this->_M_len; }\n+\n+      const_reverse_iterator\n+      rbegin() const noexcept\n+      { return std::reverse_iterator<const_iterator>(this->end()); }\n+\n+      const_reverse_iterator\n+      rend() const noexcept\n+      { return std::reverse_iterator<const_iterator>(this->begin()); }\n+\n+      const_reverse_iterator\n+      crbegin() const noexcept\n+      { return std::reverse_iterator<const_iterator>(this->end()); }\n+\n+      const_reverse_iterator\n+      crend() const noexcept\n+      { return std::reverse_iterator<const_iterator>(this->begin()); }\n+\n+      // [string.view.capacity], capacity\n+\n+      constexpr size_type\n+      size() const noexcept\n+      { return this->_M_len; }\n+\n+      constexpr size_type\n+      length() const noexcept\n+      { return _M_len; }\n+\n+      constexpr size_type\n+      max_size() const noexcept\n+      { return _S_max_size; }\n+\n+      constexpr bool\n+      empty() const noexcept\n+      { return this->_M_len == 0; }\n+\n+      // [string.view.access], element access\n+\n+      constexpr const _CharT&\n+      operator[](size_type __pos) const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(__pos <= this->_M_len);\n+\treturn *(this->_M_str + __pos);\n+      }\n+\n+      constexpr const _CharT&\n+      at(size_type __pos) const\n+      {\n+\treturn __pos < this->_M_len\n+\t     ? *(this->_M_str + __pos)\n+\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n+\t\t\t\t\t     \"(which is %zu) >= this->size() \"\n+\t\t\t\t\t     \"(which is %zu)\"),\n+\t\t\t\t\t __pos, this->size()),\n+\t\t*static_cast<pointer>(nullptr));\n+      }\n+\n+      constexpr const _CharT&\n+      front() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(this->_M_len > 0);\n+\treturn *this->_M_str;\n+      }\n+\n+      constexpr const _CharT&\n+      back() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(this->_M_len > 0);\n+\treturn *(this->_M_str + this->_M_len - 1);\n+      }\n+\n+      constexpr const _CharT*\n+      data() const noexcept\n+      { return this->_M_str; }\n+\n+      // [string.view.modifiers], modifiers:\n+      void\n+      clear() noexcept\n+      {\n+\tthis->_M_len = 0;\n+\tthis->_M_str = nullptr;\n+      }\n+\n+      void\n+      remove_prefix(size_type __n)\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(this->_M_len >= __n);\n+\tthis->_M_str += __n;\n+\tthis->_M_len -= __n;\n+      }\n+\n+      void\n+      remove_suffix(size_type __n)\n+      { this->_M_len -= __n; }\n+\n+      void\n+      swap(basic_string_view& __sv) noexcept\n+      {\n+\tstd::swap(this->_M_len, __sv._M_len);\n+\tstd::swap(this->_M_str, __sv._M_str);\n+      }\n+\n+\n+      // [string.view.ops], string operations:\n+\n+      template<typename _Allocator>\n+        explicit operator basic_string<_CharT, _Traits, _Allocator>() const\n+        {\n+\t  return basic_string<_CharT, _Traits, _Allocator>\n+\t\t\t\t\t(this->_M_len, this->_M_str);\n+\t}\n+\n+      size_type\n+      copy(_CharT* __str, size_type __n, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string_len(__str, __n);\n+\tif (__pos >= this->_M_len)\n+\t  __throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n+\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __pos, this->size());\n+\tsize_type __rlen{std::min(__n, size_type{this->_M_len  - __pos})};\n+\tfor (auto __begin = this->_M_str + __pos,\n+\t     __end = this->_M_str + __rlen; __begin != __end;)\n+\t  *__str++ = *__begin++;\n+\treturn __rlen;\n+      }\n+\n+\n+      // [string.view.ops], string operations:\n+\n+      constexpr basic_string_view\n+      substr(size_type __pos, size_type __n=npos) const\n+      {\n+\treturn __pos < this->_M_len\n+\t     ? basic_string_view{this->_M_str + __pos,\n+\t\t\t\tstd::min(__n, size_type{this->_M_len  - __pos})}\n+\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n+\t\t\t\t\t     \"(which is %zu) >= this->size() \"\n+\t\t\t\t\t     \"(which is %zu)\"),\n+\t\t\t\t     __pos, this->size()), basic_string_view{});\n+      }\n+\n+      int\n+      compare(basic_string_view __str) const noexcept\n+      {\n+\tint __ret = traits_type::compare(this->_M_str, __str._M_str,\n+\t\t\t\t\t std::min(this->_M_len, __str._M_len));\n+\tif (__ret == 0)\n+\t  __ret = _S_compare(this->_M_len, __str._M_len);\n+\treturn __ret;\n+      }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1, basic_string_view __str) const\n+      { return this->substr(__pos1, __n1).compare(__str); }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1,\n+\t      basic_string_view __str, size_type __pos2, size_type __n2) const\n+      { return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2)); }\n+\n+      int\n+      compare(const _CharT* __str) const noexcept\n+      { return this->compare(basic_string_view{__str}); }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1, const _CharT* __str) const\n+      { return this->substr(__pos1, __n1).compare(basic_string_view{__str}); }\n+\n+      int\n+      compare(size_type __pos1, size_type __n1,\n+\t      const _CharT* __str, size_type __n2) const\n+      {\n+\treturn this->substr(__pos1, __n1)\n+\t\t   .compare(basic_string_view(__str, __n2));\n+      }\n+\n+      size_type\n+      find(basic_string_view __str, size_type __pos = 0) const noexcept\n+      { return this->find(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find(_CharT __c, size_type __pos=0) const noexcept;\n+\n+      size_type\n+      find(const _CharT* __str, size_type __pos, size_type __n) const;\n+\n+      size_type\n+      find(const _CharT* __str, size_type __pos=0) const noexcept\n+      { return this->find(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      rfind(basic_string_view __str, size_type __pos = npos) const noexcept\n+      { return this->rfind(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      rfind(_CharT __c, size_type __pos = npos) const noexcept;\n+\n+      size_type\n+      rfind(const _CharT* __str, size_type __pos, size_type __n) const;\n+\n+      size_type\n+      rfind(const _CharT* __str, size_type __pos = npos) const noexcept\n+      { return this->rfind(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept\n+      { return this->find_first_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_first_of(_CharT __c, size_type __pos = 0) const noexcept\n+      { return this->find(__c, __pos); }\n+\n+      size_type\n+      find_first_of(const _CharT* __str, size_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_first_of(const _CharT* __str, size_type __pos = 0) const noexcept\n+      { return this->find_first_of(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      find_last_of(basic_string_view __str,\n+\t\t   size_type __pos = npos) const noexcept\n+      { return this->find_last_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_last_of(_CharT __c, size_type __pos=npos) const noexcept\n+      { return this->rfind(__c, __pos); }\n+\n+      size_type\n+      find_last_of(const _CharT* __str, size_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_last_of(const _CharT* __str, size_type __pos = npos) const noexcept\n+      { return this->find_last_of(__str, __pos, traits_type::length(__str)); }\n+\n+      size_type\n+      find_first_not_of(basic_string_view __str,\n+\t\t\tsize_type __pos = 0) const noexcept\n+      { return this->find_first_not_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;\n+\n+      size_type\n+      find_first_not_of(const _CharT* __str,\n+\t\t\tsize_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_first_not_of(const _CharT* __str, size_type __pos = 0) const noexcept\n+      {\n+\treturn this->find_first_not_of(__str, __pos,\n+\t\t\t\t       traits_type::length(__str));\n+      }\n+\n+      size_type\n+      find_last_not_of(basic_string_view __str,\n+\t\t       size_type __pos = npos) const noexcept\n+      { return this->find_last_not_of(__str._M_str, __pos, __str._M_len); }\n+\n+      size_type\n+      find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;\n+\n+      size_type\n+      find_last_not_of(const _CharT* __str,\n+\t\t       size_type __pos, size_type __n) const;\n+\n+      size_type\n+      find_last_not_of(const _CharT* __str,\n+\t\t       size_type __pos = npos) const noexcept\n+      {\n+\treturn this->find_last_not_of(__str, __pos,\n+\t\t\t\t      traits_type::length(__str));\n+      }\n+\n+    private:\n+\n+      //  Compute max_size similarly to how string does it.\n+      static const size_type _S_max_size = (npos\n+\t\t\t\t\t  - sizeof(size_type) - sizeof(void*))\n+\t\t\t\t\t / sizeof(value_type) / 4;\n+\n+      static constexpr const int\n+      _S_compare(size_type __n1, size_type __n2) noexcept\n+      {\n+\treturn difference_type{__n1 - __n2} > std::numeric_limits<int>::max()\n+\t     ? std::numeric_limits<int>::max()\n+\t     : difference_type{__n1 - __n2} < std::numeric_limits<int>::min()\n+\t     ? std::numeric_limits<int>::min()\n+\t     : static_cast<int>(difference_type{__n1 - __n2});\n+      }\n+\n+      size_t\t    _M_len;\n+      const _CharT* _M_str;\n+    };\n+\n+\n+  // [string.view.comparison], non-member basic_string_view comparison functions\n+\n+  namespace __detail\n+  {\n+    //  Identity transform to make ADL work with just one argument.\n+    //  See n3766.html.\n+    template<typename _Tp = void>\n+      struct __identity\n+      { typedef _Tp type; };\n+\n+    template<>\n+      struct __identity<void>;\n+\n+    template<typename _Tp>\n+      using __idt = typename __identity<_Tp>::type;\n+  }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator==(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) == 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator==(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) == 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator==(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) == 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator!=(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return !(__x == __y); }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator!=(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return !(__x == __y); }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator!=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return !(__x == __y); }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator< (basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) < 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator< (basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) < 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator< (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) < 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator> (basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) > 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator> (basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) > 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator> (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) > 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator<=(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) <= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator<=(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) <= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator<=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) <= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator>=(basic_string_view<_CharT, _Traits> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) >= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator>=(basic_string_view<_CharT, _Traits> __x,\n+               __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n+    { return __x.compare(__y) >= 0; }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    operator>=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n+               basic_string_view<_CharT, _Traits> __y) noexcept\n+    { return __x.compare(__y) >= 0; }\n+\n+  // [string.view.comparison], sufficient additional overloads of comparison functions\n+\n+  // [string.view.nonmem], other non-member basic_string_view functions\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+           typename _Allocator = allocator<_CharT>>\n+    basic_string<_CharT, _Traits, _Allocator>\n+    to_string(basic_string_view<_CharT, _Traits> __str,\n+\t      const _Allocator& __alloc = _Allocator())\n+    {\n+      return basic_string<_CharT, _Traits, _Allocator>\n+\t\t\t(__str.begin(), __str.end(), __alloc);\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+      operator<<(basic_ostream<_CharT, _Traits>& __os,\n+                 basic_string_view<_CharT,_Traits> __str)\n+      { return __ostream_insert(__os, __str.data(), __str.size()); }\n+\n+\n+  // basic_string_view typedef names\n+\n+  using string_view = basic_string_view<char>;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  using wstring_view = basic_string_view<wchar_t>;\n+#endif\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  using u16string_view = basic_string_view<char16_t>;\n+  using u32string_view = basic_string_view<char32_t>;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace experimental\n+\n+\n+  // [string.view.hash], hash support:\n+\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename _Tp>\n+    struct hash;\n+\n+  template<>\n+    struct hash<experimental::string_view>\n+    : public __hash_base<size_t, experimental::string_view>\n+    {\n+      size_t\n+      operator()(const experimental::string_view& __str) const noexcept\n+      { return std::_Hash_impl::hash(__str.data(), __str.length()); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<experimental::string_view>> : std::false_type\n+    { };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    struct hash<experimental::wstring_view>\n+    : public __hash_base<size_t, wstring>\n+    {\n+      size_t\n+      operator()(const experimental::wstring_view& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(wchar_t)); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<experimental::wstring_view>> : std::false_type\n+    { };\n+#endif\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  template<>\n+    struct hash<experimental::u16string_view>\n+    : public __hash_base<size_t, experimental::u16string_view>\n+    {\n+      size_t\n+      operator()(const experimental::u16string_view& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char16_t)); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<experimental::u16string_view>> : std::false_type\n+    { };\n+\n+  template<>\n+    struct hash<experimental::u32string_view>\n+    : public __hash_base<size_t, experimental::u32string_view>\n+    {\n+      size_t\n+      operator()(const experimental::u32string_view& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char32_t)); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<experimental::u32string_view>> : std::false_type\n+    { };\n+#endif\n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n+namespace experimental\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // I added these EMSR.\n+  inline namespace literals\n+  {\n+  inline namespace string_view_literals\n+  {\n+\n+    inline basic_string_view<char>\n+    operator\"\"sv(const char* __str, size_t __len)\n+    { return basic_string_view<char>{__str, __len}; }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    inline basic_string_view<wchar_t>\n+    operator\"\"sv(const wchar_t* __str, size_t __len)\n+    { return basic_string_view<wchar_t>{__str, __len}; }\n+#endif\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+    inline basic_string_view<char16_t>\n+    operator\"\"sv(const char16_t* __str, size_t __len)\n+    { return basic_string_view<char16_t>{__str, __len}; }\n+\n+    inline basic_string_view<char32_t>\n+    operator\"\"sv(const char32_t* __str, size_t __len)\n+    { return basic_string_view<char32_t>{__str, __len}; }\n+#endif\n+\n+  }\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace experimental\n+} // namespace std\n+\n+#include <experimental/string_view.tcc>\n+\n+#endif // __cplusplus <= 201103L\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_STRING_VIEW"}, {"sha": "78cbe99e80f064197673b792e14b25f63740f866", "filename": "libstdc++-v3/include/experimental/string_view.tcc", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,230 @@\n+// Components for manipulating non-owning sequences of characters -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/string_view.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{string_view}\n+ */\n+\n+//\n+// ISO C++ 14882: 21  Strings library\n+//\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_STRING_VIEW_TCC\n+#define _GLIBCXX_EXPERIMENTAL_STRING_VIEW_TCC 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+namespace std //_GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find(const _CharT* __str, size_type __pos, size_type __n) const noexcept\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+\n+      if (__n == 0)\n+\treturn __pos <= this->_M_len ? __pos : npos;\n+\n+      if (__n <= this->_M_len)\n+\t{\n+\t  for (; __pos <= this->_M_len - __n; ++__pos)\n+\t    if (traits_type::eq(this->_M_str[__pos], __str[0])\n+\t\t&& traits_type::compare(this->_M_str + __pos + 1,\n+\t\t\t\t\t__str + 1, __n - 1) == 0)\n+\t      return __pos;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find(_CharT __c, size_type __pos) const noexcept\n+    {\n+      size_type __ret = npos;\n+      if (__pos < this->_M_len)\n+\t{\n+\t  const size_type __n = this->_M_len - __pos;\n+\t  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);\n+\t  if (__p)\n+\t    __ret = __p - this->_M_str;\n+\t}\n+      return __ret;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+\n+      if (__n <= this->_M_len)\n+\t{\n+\t  __pos = std::min(size_type(this->_M_len - __n), __pos);\n+\t  do\n+\t    {\n+\t      if (traits_type::compare(this->_M_str + __pos, __str, __n) == 0)\n+\t\treturn __pos;\n+\t    }\n+\t  while (__pos-- > 0);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    rfind(_CharT __c, size_type __pos) const noexcept\n+    {\n+      size_type __size = this->_M_len;\n+      if (__size > 0)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  for (++__size; __size-- > 0; )\n+\t    if (traits_type::eq(this->_M_str[__size], __c))\n+\t      return __size;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_first_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      for (; __n && __pos < this->_M_len; ++__pos)\n+\t{\n+\t  const _CharT* __p = traits_type::find(__str, __n,\n+\t\t\t\t\t\tthis->_M_str[__pos]);\n+\t  if (__p)\n+\t    return __pos;\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_last_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      size_type __size = this->size();\n+      if (__size && __n)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (traits_type::find(__str, __n, this->_M_str[__size]))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size-- != 0);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_first_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      for (; __pos < this->_M_len; ++__pos)\n+\tif (!traits_type::find(__str, __n, this->_M_str[__pos]))\n+\t  return __pos;\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_first_not_of(_CharT __c, size_type __pos) const noexcept\n+    {\n+      for (; __pos < this->_M_len; ++__pos)\n+\tif (!traits_type::eq(this->_M_str[__pos], __c))\n+\t  return __pos;\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_last_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    {\n+      __glibcxx_requires_string_len(__str, __n);\n+      size_type __size = this->_M_len;\n+      if (__size)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (!traits_type::find(__str, __n, this->_M_str[__size]))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size--);\n+\t}\n+      return npos;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    typename basic_string_view<_CharT, _Traits>::size_type\n+    basic_string_view<_CharT, _Traits>::\n+    find_last_not_of(_CharT __c, size_type __pos) const noexcept\n+    {\n+      size_type __size = this->_M_len;\n+      if (__size)\n+\t{\n+\t  if (--__size > __pos)\n+\t    __size = __pos;\n+\t  do\n+\t    {\n+\t      if (!traits_type::eq(this->_M_str[__size], __c))\n+\t\treturn __size;\n+\t    }\n+\t  while (__size--);\n+\t}\n+      return npos;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // __cplusplus <= 201103L\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_STRING_VIEW_TCC"}, {"sha": "8dcff72a2bb5451c1e2d560d9617b5886c586b1b", "filename": "libstdc++-v3/testsuite/experimental/string_view/capacity/1.cc", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcapacity%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,171 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// string_view size, length\n+\n+#include <experimental/string_view>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  struct A { };\n+\n+template<typename T>\n+  bool\n+  operator==(const A<T>&, const A<T>&) { return true; }\n+\n+template<typename T>\n+  bool\n+  operator<(const A<T>&, const A<T>&) { return true; }\n+\n+struct B { };\n+\n+// char_traits specialization\n+namespace std\n+{\n+  template<>\n+    struct char_traits<A<B> >\n+    {\n+      typedef A<B> \t\tchar_type;\n+      // Unsigned as wint_t in unsigned.\n+      typedef unsigned long  \tint_type;\n+      typedef streampos \tpos_type;\n+      typedef streamoff \toff_type;\n+      typedef mbstate_t \tstate_type;\n+      \n+      static void \n+      assign(char_type& __c1, const char_type& __c2)\n+      { __c1 = __c2; }\n+\n+      static bool \n+      eq(const char_type& __c1, const char_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static bool \n+      lt(const char_type& __c1, const char_type& __c2)\n+      { return __c1 < __c2; }\n+\n+      static int \n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      { \n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  if (!eq(__s1[__i], __s2[__i]))\n+\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n+\treturn 0; \n+      }\n+\n+      static size_t\n+      length(const char_type* __s)\n+      { \n+\tconst char_type* __p = __s; \n+\twhile (__p) \n+\t  ++__p; \n+\treturn (__p - __s); \n+      }\n+\n+      static const char_type* \n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      { \n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n+\t  if (*__p == __a) return __p;\n+\treturn 0;\n+      }\n+\n+      static char_type* \n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      assign(char_type* __s, size_t __n, char_type __a)\n+      { \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n+\t  assign(*__p, __a);\n+        return __s; \n+      }\n+\n+      static char_type \n+      to_char_type(const int_type&)\n+      { return char_type(); }\n+\n+      static int_type \n+      to_int_type(const char_type&) { return int_type(); }\n+\n+      static bool \n+      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static int_type \n+      eof() { return static_cast<int_type>(-1); }\n+\n+      static int_type \n+      not_eof(const int_type& __c)\n+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+    };\n+} // namespace std\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::basic_string_view<A<B>> str02;\n+  typedef std::experimental::basic_string_view< A<B> >::size_type size_type_o;\n+  size_type_o sz03;\n+  size_type_o sz04;\n+\n+  // non-POD types: size, length, max_size, clear(), empty()\n+  bool b01 = str02.empty();  \n+  VERIFY( b01 == true );\n+  sz03 = str02.size();\n+  sz04 = str02.length();\n+  VERIFY( sz03 == sz04 );\n+  str02.data();\n+  sz03 = str02.size();\n+  sz04 = str02.length();\n+  VERIFY( sz03 == sz04 );\n+\n+  sz03 = str02.max_size();  \n+  VERIFY( sz03 >= sz04 );\n+\n+  sz03 = str02.size();\n+  str02.clear();  \n+  b01 = str02.empty(); \n+  VERIFY( b01 == true );\n+  sz04 = str02.size();  \n+  VERIFY( sz03 >= sz04 );\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  const std::experimental::basic_string_view<A<B>>::size_type \n+  std::experimental::basic_string_view<A<B>>::_S_max_size;\n+#endif\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "4bb22098df10021ebeec1f4506aa6d523063aea2", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/char/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <experimental/string_view>\n+#include <string>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+  typedef std::experimental::string_view::size_type csize_type;\n+\n+  // basic_string_view()\n+  const std::experimental::string_view str00{};\n+  VERIFY( str00.length() == 0 );\n+  VERIFY( str00.data() == nullptr );\n+\n+  // basic_string_view(const char*)\n+  const char str_lit01[] = \"rodeo beach, marin\";\n+  const std::experimental::string_view str01{str_lit01};\n+  VERIFY( str01.length() == 18 );\n+  VERIFY( str01.data() == str_lit01 );\n+  const std::experimental::string_view str02{\"baker beach, san francisco\"};\n+  VERIFY( str02.length() == 26 );\n+\n+  // basic_string_view(const string_view&)\n+  std::experimental::string_view str04{str01};\n+  VERIFY( str04.length() == str01.length() );\n+  VERIFY( str04.data() == str01.data() );\n+\n+  // basic_string_view(const char* s)\n+  csize_type len_lit01 = strlen(str_lit01);\n+  std::experimental::string_view str05{str_lit01, len_lit01};\n+  VERIFY( str05.length() == len_lit01 );\n+  VERIFY( str05.data() == str_lit01 );\n+  //  This is invalid and unchecked.\n+  //std::experimental::string_view str06{nullptr, len_lit01};\n+  //VERIFY( str06.length() == 0 );\n+  //VERIFY( str06.data() == nullptr );\n+\n+  // basic_string_view(basic_string& s)\n+  std::string istr07(10, 'z');\n+  std::experimental::string_view str07{istr07};\n+  VERIFY( str07.length() == 10 );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "32019281ffdb59f2adc55be7e293a9c3e8b6ad4e", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/char/2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <new>\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+  const char* with_nulls = \"This contains \\0 a zero byte.\";\n+\n+  // These are tests to see how basic_string_view handles data with NUL\n+  // bytes.  Obviously basic_string_view(char*) will halt at the first one, but\n+  // nothing else should.\n+  std::experimental::string_view s1(with_nulls, 28);\n+  VERIFY( s1.size() == 28 );\n+  std::experimental::string_view s2(s1);\n+  VERIFY( s2.size() == 28 );\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "3bf8f4cea8f946e615dfc353506ccf0e112a490a", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/char/3.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <experimental/string_view>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test05()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  char const * s = 0;\n+  std::experimental::string_view zero_length_built_with_NULL(s, 0);\n+}\n+\n+int\n+main()\n+{ \n+  test05();\n+\n+  return 0;\n+}"}, {"sha": "3028f654bf06573515352b287e1f6fb74d1de16c", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/wchar_t/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <experimental/string_view>\n+#include <string>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+\n+  // basic_string_view()\n+  const std::experimental::wstring_view str00{};\n+  VERIFY( str00.length() == 0 );\n+  VERIFY( str00.data() == nullptr );\n+\n+  // basic_string_view(const char*)\n+  const wchar_t str_lit01[] = L\"rodeo beach, marin\";\n+  const std::experimental::wstring_view str01{str_lit01};\n+  VERIFY( str01.length() == 18 );\n+  VERIFY( str01.data() == str_lit01 );\n+  const std::experimental::wstring_view str02{L\"baker beach, san francisco\"};\n+  VERIFY( str02.length() == 26 );\n+\n+  // basic_string_view(const string_view&)\n+  std::experimental::wstring_view str04{str01};\n+  VERIFY( str04.length() == str01.length() );\n+  VERIFY( str04.data() == str01.data() );\n+\n+  // basic_string_view(const char* s)\n+  csize_type len_lit01 = wcslen(str_lit01);\n+  std::experimental::wstring_view str05{str_lit01, len_lit01};\n+  VERIFY( str05.length() == len_lit01 );\n+  VERIFY( str05.data() == str_lit01 );\n+  //  This is invalid and unchecked.\n+  //std::experimental::wstring_view str06{nullptr, len_lit01};\n+  //VERIFY( str06.length() == 0 );\n+  //VERIFY( str06.data() == nullptr );\n+\n+  // basic_string_view(basic_string& s)\n+  std::wstring istr07(10, L'z');\n+  std::experimental::wstring_view str07{istr07};\n+  VERIFY( str07.length() == 10 );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "0196b77a34f844691dce45e8b012e9a3fbe5818e", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/wchar_t/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+  const wchar_t* with_nulls = L\"This contains \\0 a zero byte.\";\n+\n+  // These are tests to see how basic_string_view handles data with NUL\n+  // bytes.  Obviously basic_string_view(char*) will halt at the first one, but\n+  // nothing else should.\n+  std::experimental::wstring_view s1 (with_nulls, 28);\n+  VERIFY( s1.size() == 28 );\n+  std::experimental::wstring_view s2 (s1);\n+  VERIFY( s2.size() == 28 );\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "4386f582b3254f6d467f28e9260a376ed92ef5ab", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/wchar_t/3.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view constructors.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test05()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  wchar_t const * s = 0;\n+  std::experimental::wstring_view zero_length_built_with_NULL(s, 0);\n+}\n+\n+int\n+main()\n+{ \n+  test05();\n+\n+  return 0;\n+}"}, {"sha": "23b3801a7f0d29662db10390eda2a7f9e12d8250", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/char/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string element access\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  typedef std::experimental::string_view::const_reference cref;\n+  typedef std::experimental::string_view::reference ref;\n+  csize_type csz01, csz02;\n+\n+  const std::experimental::string_view str01(\"tamarindo, costa rica\");\n+  std::experimental::string_view str02(\"41st street beach, capitola, california\");\n+  std::experimental::string_view str03;\n+\n+  // const_reference operator[] (size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref1 = str01[csz01 - 1];\n+  VERIFY( cref1 == 'a' );\n+  cref cref2 = str01[csz01];\n+  VERIFY( cref2 == char() );\n+\n+  // const_reference at(size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref3 = str01.at(csz01 - 1);\n+  VERIFY( cref3 == 'a' );\n+  try\n+  {\n+    str01.at(csz01);\n+    VERIFY( false ); // Should not get here, as exception thrown.\n+  }\n+  catch (std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "faa57fd20d8b94ef7b3e6be75cef3201b0044532", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/char/2.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-O0\" }\n+// { dg-require-debug-mode \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+\n+int\n+main()\n+{\n+  typedef std::experimental::string_view string_view_type;\n+  experimental::string_view_type s;\n+  s[0]; // abort\n+}"}, {"sha": "17c983df32e7bcb3c1081dd0b6f488f261b5cf9b", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/char/empty.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2Fempty.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 3 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  {\n+    std::experimental::string_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  {\n+    const std::experimental::string_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  return 0;\n+}"}, {"sha": "bde237358a4e3b3ed5351e7f84ae8b9f0ccbc083", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/char/front_back.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2Ffront_back.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2Ffront_back.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2Ffront_back.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::string_view str(\"ramifications\");\n+  const std::experimental::string_view cstr(\"melodien\");\n+\n+  VERIFY( str.front() == 'r' );\n+  VERIFY( str.back() == 's' );\n+  VERIFY( cstr.front() == 'm' );\n+  VERIFY( cstr.back() == 'n' );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "f7b966ad82838e253d20a5adf9f41f38cabb3fa5", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/wchar_t/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view element access\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  typedef std::experimental::wstring_view::const_reference cref;\n+  typedef std::experimental::wstring_view::reference ref;\n+  csize_type csz01, csz02;\n+\n+  const std::experimental::wstring_view str01(L\"tamarindo, costa rica\");\n+  std::experimental::wstring_view str02(L\"41st street beach, capitola, california\");\n+  std::experimental::wstring_view str03;\n+\n+  // const_reference operator[] (size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref1 = str01[csz01 - 1];\n+  VERIFY( cref1 == L'a' );\n+  cref cref2 = str01[csz01];\n+  VERIFY( cref2 == wchar_t() );\n+\n+  // const_reference at(size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref3 = str01.at(csz01 - 1);\n+  VERIFY( cref3 == L'a' );\n+  try\n+  {\n+    str01.at(csz01);\n+    VERIFY( false ); // Should not get here, as exception thrown.\n+  }\n+  catch (std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "c0897dad598a75c0a47f92404ff4c1f03a918108", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/wchar_t/2.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-O0\" }\n+// { dg-require-debug-mode \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+\n+// libstdc++/21674\n+// NB: Should work without any inlining or optimizations (ie. -O0).\n+int\n+main()\n+{\n+  typedef std::experimental::wstring_view string_view_type;\n+  string_view_type s;\n+  s[0]; // abort\n+}"}, {"sha": "a38d2b6e91d6c72fab7c6068e8dc57aaec190a29", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/wchar_t/empty.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2Fempty.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  bool test [[gnu::unused]] = true;\n+  \n+  {\n+    std::experimental::wstring_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  {\n+    const std::experimental::wstring_view empty;\n+    VERIFY( empty.empty() );\n+  }\n+\n+  return 0;\n+}"}, {"sha": "51742705ba4f2f44349937e30832960d521bdfc2", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/wchar_t/front_back.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2Ffront_back.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2Ffront_back.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2Ffront_back.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::wstring_view str(L\"ramifications\");\n+  const std::experimental::wstring_view cstr(L\"melodien\");\n+\n+  VERIFY( str.front() == L'r' );\n+  VERIFY( str.back() == L's' );\n+  VERIFY( cstr.front() == L'm' );\n+  VERIFY( cstr.back() == L'n' );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "2c83371ebbf6abb4aa50da6c94b6e1ffd767da5c", "filename": "libstdc++-v3/testsuite/experimental/string_view/include.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finclude.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finclude.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finclude.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,25 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This issue affected only debug-mode.\n+\n+// { dg-options \"-std=gnu++1y -fno-rtti\" }\n+// { dg-do compile }\n+\n+#include <experimental/string_view>"}, {"sha": "10337026c3bd035f73ac90375c36137707ab7d88", "filename": "libstdc++-v3/testsuite/experimental/string_view/inserters/char/1.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <sstream>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  typedef std::experimental::string_view::const_reference cref;\n+  typedef std::experimental::string_view::reference ref;\n+\n+  const std::experimental::string_view str01(\"sailing grand traverse bay\\n\"\n+\t       \"\\t\\t\\t    from Elk Rapids to the point reminds me of miles\");\n+    \n+  // ostream& operator<<(ostream&, const basic_string_view&)\n+  std::ostringstream ostrs01;\n+  try \n+    {\n+      ostrs01 << str01;\n+      VERIFY( ostrs01.str() == str01 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false );\n+    }\n+  \n+  std::experimental::string_view hello_world;\n+  std::cout << hello_world;\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "b9e0dad47330ec05af6e1b81b1c1e4c827c31a51", "filename": "libstdc++-v3/testsuite/experimental/string_view/inserters/char/2.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,93 @@\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-fileio \"\" }\n+\n+#include <experimental/string_view>\n+#include <string>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_filebuf::xsputn via stress testing with large string_views\n+// based on a bug report libstdc++ 9\n+// mode == out\n+void\n+test05(std::size_t size)\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  const char filename[] = \"inserters_extractors-2.txt\";\n+  const char fillc = 'f';\n+  std::ofstream ofs(filename);\n+  std::string str(size, fillc);\n+  std::experimental::string_view strv{str};\n+\n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  // stress test\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  ofs.close();\n+\n+  // sanity check on the written file\n+  std::ifstream ifs(filename);\n+  std::size_t count = 0;\n+  char c;\n+  while (count <= (2 * size) + 4)\n+    {\n+      ifs >> c;\n+      if (ifs.good() && c == fillc)\n+\t{\n+\t  ++count;\n+\t  c = '0';\n+\t}\n+      else \n+\tbreak;\n+    }\n+\n+  VERIFY( count == 2 * size );\n+}\n+\n+int\n+main()\n+{\n+  test05(1); \n+  test05(1000); \n+  test05(10000);\n+\n+  return 0;\n+}"}, {"sha": "664a48620b2c38389800b5ae182c8f366b42f4f4", "filename": "libstdc++-v3/testsuite/experimental/string_view/inserters/char/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fchar%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <experimental/string_view>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2830\n+void\n+test09()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::string_view foo{\"peace\\0\\0\\0& love\"};\n+\n+  std::ostringstream oss1;\n+  oss1 << foo;\n+  VERIFY( oss1.str() == foo );\n+\n+  std::ostringstream oss2;\n+  oss2.width(20);\n+  oss2 << foo;\n+  VERIFY( oss2.str() != foo );\n+  VERIFY( oss2.str().size() == 20 );\n+}\n+\n+int\n+main()\n+{ \n+  test09();\n+\n+  return 0;\n+}"}, {"sha": "a275ad216b6cb2366da3b60d5891b2d4f15596f5", "filename": "libstdc++-v3/testsuite/experimental/string_view/inserters/pod/10081-out.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fpod%2F10081-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fpod%2F10081-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fpod%2F10081-out.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,84 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// class basic_istream::sentry\n+\n+#include <experimental/string_view>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <typeinfo>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  using __gnu_test::pod_ushort;\n+  typedef experimental::basic_string_view<pod_ushort> \tstring_type;\n+  typedef basic_stringbuf<pod_ushort> \tstringbuf_type;\n+  typedef basic_ostream<pod_ushort> \tostream_type;\n+\n+  bool test [[gnu::unused]] = true;\n+\n+  string_type str;\n+  stringbuf_type strbuf01;\n+  ostream_type stream(&strbuf01);\n+\n+  try\n+    {\n+      stream << str;\n+    }\n+  catch (std::bad_cast& obj)\n+    {\n+      // Ok, throws bad_cast because locale has no ctype facet.\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  const std::locale loc(std::locale::classic(), new std::ctype<pod_ushort>);\n+  stream.imbue(loc);\n+  try\n+    {\n+      stream << str;\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+#if !__GXX_WEAK__\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template \n+  const std::experimental::basic_string_view<__gnu_test::pod_ushort>::size_type \n+  std::experimental::basic_string_view_view<__gnu_test::pod_ushort>::_S_max_size;\n+#endif\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "66a9d9c8bdb345d6d49f92078dc526b0ca4c3df1", "filename": "libstdc++-v3/testsuite/experimental/string_view/inserters/wchar_t/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <sstream>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  typedef std::experimental::wstring_view::const_reference cref;\n+  typedef std::experimental::wstring_view::reference ref;\n+\n+  const std::experimental::wstring_view str01(L\"sailing grand traverse bay\\n\"\n+\t       L\"\\t\\t\\t    from Elk Rapids to the point reminds me of miles\");\n+  const std::experimental::wstring_view str02(L\"sailing\");\n+  const std::experimental::wstring_view str03(L\"grand\");\n+  const std::experimental::wstring_view str04(L\"traverse\");\n+  const std::experimental::wstring_view str05;\n+  std::experimental::wstring_view str10;\n+\n+  // ostream& operator<<(ostream&, const basic_string_view&)\n+  std::wostringstream ostrs01;\n+  try \n+    {\n+      ostrs01 << str01;\n+      VERIFY( ostrs01.str() == str01 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false );\n+    }\n+  \n+  std::experimental::wstring_view hello_world;\n+  std::wcout << hello_world;\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "018f717eca52a38b16f2056187d51d73a4523db7", "filename": "libstdc++-v3/testsuite/experimental/string_view/inserters/wchar_t/2.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,91 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <experimental/string_view>\n+#include <string>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_filebuf::xsputn via stress testing with large string_views\n+// based on a bug report libstdc++ 9\n+// mode == out\n+void\n+test05(std::size_t size)\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  const char filename[] = \"inserters_extractors-2.txt\";\n+  const wchar_t fillc = L'f';\n+  std::wofstream ofs(filename);\n+  std::wstring str(size, fillc);\n+  std::experimental::wstring_view strv(str);\n+\n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  // stress test\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  ofs.close();\n+\n+  // sanity check on the written file\n+  std::wifstream ifs(filename);\n+  std::size_t count = 0;\n+  wchar_t c;\n+  while (count <= (2 * size) + 4)\n+    {\n+      ifs >> c;\n+      if (ifs.good() && c == fillc)\n+\t{\n+\t  ++count;\n+\t  c = '0';\n+\t}\n+      else \n+\tbreak;\n+    }\n+\n+  VERIFY( count == 2 * size );\n+}\n+\n+int\n+main()\n+{\n+  test05(1); \n+  test05(1000); \n+  test05(10000);\n+\n+  return 0;\n+}"}, {"sha": "f01b91fd7e5947497684c4e389cee2187812f55a", "filename": "libstdc++-v3/testsuite/experimental/string_view/inserters/wchar_t/3.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Finserters%2Fwchar_t%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// inserters\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string_view class.\n+\n+#include <experimental/string_view>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void\n+test09()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::wstring_view foo{L\"peace\\0\\0\\0& love\"};\n+  \n+  std::wostringstream oss1;\n+  oss1 << foo;\n+  VERIFY( oss1.str() == foo );\n+  \n+  std::wostringstream oss2;\n+  oss2.width(20);\n+  oss2 << foo;\n+  VERIFY( oss2.str() != foo );\n+  VERIFY( oss2.str().size() == 20 );\n+}\n+\n+int\n+main()\n+{ \n+  test09();\n+\n+  return 0;\n+}"}, {"sha": "65eb939636b167979807147786a10e45c8ad3539", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/types.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <type_traits>\n+\n+void\n+test01()\n+{\n+  using namespace std::experimental::literals::string_view_literals;\n+\n+  static_assert(std::is_same<decltype(\"Hello\"sv), std::experimental::string_view>::value,\n+\t\t\"\\\"Hello\\\"s is std::string_view\");\n+\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::experimental::string_view>::value,\n+\t\t\"u8\\\"Hello\\\"s is std::string_view\");\n+\n+  static_assert(std::is_same<decltype(L\"Hello\"sv), std::experimental::wstring_view>::value,\n+\t\t\"L\\\"Hello\\\"s is std::wstring_view\");\n+\n+  static_assert(std::is_same<decltype(u\"Hello\"sv), std::experimental::u16string_view>::value,\n+\t\t\"u\\\"Hello\\\"s is std::u16string_view\");\n+\n+  static_assert(std::is_same<decltype(U\"Hello\"sv), std::experimental::u32string_view>::value,\n+\t\t\"U\\\"Hello\\\"s is std::u32string_view\");\n+}"}, {"sha": "20b8a4d74a741f46645e3803bce84fca502b0e41", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/values.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::experimental::literals::string_view_literals;\n+\n+  std::experimental::string_view planet = \"Mercury\"sv;\n+  std::experimental::wstring_view wplanet = L\"Venus\"sv;\n+  std::experimental::string_view u8planet = u8\"Mars\"sv;\n+  std::experimental::u16string_view u16planet = u\"Juiter\"sv;\n+  std::experimental::u32string_view u32planet = U\"Saturn\"sv;\n+\n+  VERIFY( planet == std::experimental::string_view(\"Mercury\") );\n+  VERIFY( wplanet == std::experimental::wstring_view(L\"Venus\") );\n+  VERIFY( u8planet == std::experimental::string_view(u8\"Mars\") );\n+  VERIFY( u16planet == std::experimental::u16string_view(u\"Juiter\") );\n+  VERIFY( u32planet == std::experimental::u32string_view(U\"Saturn\") );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "be608ec52d78581abebc1bcff3e01bf037c9d6da", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_prefix/char/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using namespace std::experimental;\n+\n+  string_view str0{\"olympus mons\"};\n+  string_view::pointer p = str0.data();\n+  str0.remove_prefix(4);\n+  VERIFY( str0.data() == p + 4);\n+  VERIFY( str0.length() == 8 );\n+  VERIFY( str0 == string_view{\"pus mons\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "395ed52eb1fd5c2487852be4afc948739432e4f4", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_prefix/wchar_t/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using namespace std::experimental;\n+\n+  wstring_view str0{L\"olympus mons\"};\n+  wstring_view::pointer p = str0.data();\n+  str0.remove_prefix(4);\n+  VERIFY( str0.data() == p + 4);\n+  VERIFY( str0.length() == 8 );\n+  VERIFY( str0 == wstring_view{L\"pus mons\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "861c51801c45fe9d20eb6dcce62011ac16e07ba9", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_suffix/char/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using namespace std::experimental;\n+\n+  string_view str0{\"olympus mons\"};\n+  string_view::pointer p = str0.data();\n+  str0.remove_suffix(2);\n+  VERIFY( str0.data() == p);\n+  VERIFY( str0.length() == 10 );\n+  VERIFY( str0 == string_view{\"olympus mo\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "67b70e5875e2cfaecda3bdd1fda3447d773bd911", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_suffix/wchar_t/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  using namespace std::experimental;\n+\n+  wstring_view str0{L\"olympus mons\"};\n+  wstring_view::pointer p = str0.data();\n+  str0.remove_suffix(2);\n+  VERIFY( str0.data() == p);\n+  VERIFY( str0.length() == 10 );\n+  VERIFY( str0 == wstring_view{L\"olympus mo\"} );\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "7fcbf65769384230d615a0a6eb767042d2214093", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/compare/char/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,134 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare\n+// int compare(const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str,\n+//             size_type pos2, size_type n2) const;\n+// int compare(const charT* s) const;\n+// int compare(size_type pos1, size_type n1,\n+//             const charT* s, size_type n2 = npos) const;\n+\n+// NB compare should be thought of as a lexographical compare, ie how\n+// things would be sorted in a dictionary.\n+\n+#include <experimental/string_view>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+enum want_value {lt=0, z=1, gt=2};\n+\n+int\n+test_value(int result, want_value expected);\n+\n+int\n+test_value(int result, want_value expected)\n+{\n+  bool test [[gnu::unused]] = true;\n+  bool pass = false;\n+\n+  switch (expected) {\n+  case lt:\n+    if (result < 0)\n+      pass = true;\n+    break;\n+  case z:\n+    if (!result)\n+      pass = true;\n+    break;\n+  case gt:\n+    if (result > 0)\n+      pass = true;\n+    break;\n+  default:\n+    pass = false; //should not get here\n+  }\n+  VERIFY(pass);\n+  return 0;\n+}\n+ \n+\n+int \n+test01()\n+{\n+  using namespace std::experimental;\n+\n+  string_view \tstr_0(\"costa rica\");\n+  string_view \tstr_1(\"costa marbella\");\n+  string_view \tstr_2;\n+\n+  //sanity check\n+  test_value(strcmp(\"costa marbella\", \"costa rica\"), lt); \n+  test_value(strcmp(\"costa rica\", \"costa rica\"), z);\n+  test_value(strcmp(str_1.data(), str_0.data()), lt);\n+  test_value(strcmp(str_0.data(), str_1.data()), gt);\n+  test_value(strncmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(strncmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(memcmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(memcmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(memcmp(\"costa marbella\", \"costa rica\", 14), lt);\n+\n+  // int compare(const basic_string_view& str) const;\n+  test_value(str_0.compare(str_1), gt); //because r>m\n+  test_value(str_1.compare(str_0), lt); //because m<r\n+  str_2 = str_0;\n+  test_value(str_2.compare(str_0), z);\n+  str_2 = \"cost\";\n+  test_value(str_2.compare(str_0), lt);\n+  str_2 = \"costa ricans\";\n+  test_value(str_2.compare(str_0), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+  test_value(str_1.compare(0, 6, str_0), lt);\n+  str_2 = \"cost\";\n+  test_value(str_1.compare(0, 4, str_2), z);\n+  test_value(str_1.compare(0, 5, str_2), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str, \n+  //\t\t size_type pos2, size_type n2) const;\t\n+  test_value(str_1.compare(0, 6, str_0, 0, 6), z);\n+  test_value(str_1.compare(0, 7, str_0, 0, 7), lt);\n+  test_value(str_0.compare(0, 7, str_1, 0, 7), gt);\n+\n+  // int compare(const charT* s) const;\n+  test_value(str_0.compare(\"costa marbella\"), gt);\n+  test_value(str_1.compare(\"costa rica\"), lt);\n+  str_2 = str_0;\n+  test_value(str_2.compare(\"costa rica\"), z);\n+  test_value(str_2.compare(\"cost\"), gt);\t\t\t\n+  test_value(str_2.compare(\"costa ricans\"), lt);\t   \n+\n+  // int compare(size_type pos, size_type n1, const charT* str,\n+  //             size_type n2 = npos) const;\n+  test_value(str_1.compare(0, 6, \"costa rica\", 0, 6), z); \n+  test_value(str_1.compare(0, 7, \"costa rica\", 0, 7), lt); \n+  test_value(str_0.compare(0, 7, \"costa marbella\", 0, 7), gt); \n+\n+  return 0;\n+}\n+\n+\n+int \n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "5ae3c4cc6a1a8dc8bc6d5eef291f6fc369a06ec6", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/compare/char/13650.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F13650.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare [lib.string_view::compare]\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13650\n+void\n+test01()\n+{\n+  using namespace std::experimental;\n+  bool test [[gnu::unused]] = true;\n+\n+  const char lit_01[]{ 'w', 'e', '\\0', 'r', 'd' };\n+  const char lit_02[]{ 'w', 'e', 'i', '\\0', 'd' };\n+\n+  const char lit_ref_a[]{ 'w', 'e', '\\0', 'q', 'd' };\n+  const string_view str_a(lit_ref_a, 5);\n+  VERIFY( str_a.compare(0, 5, lit_01, 5) < 0 );\n+\n+  const char lit_ref_b[]{ 'w', 'e', 'i' };\n+  const string_view str_b(lit_ref_b, 3);\n+  VERIFY( str_b.compare(0, 3, lit_02, 5) < 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "4d01ebe38ce2883007e634a022251bf43b37550a", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/compare/wchar_t/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,134 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare\n+// int compare(const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string_view& str,\n+//             size_type pos2, size_type n2) const;\n+// int compare(const charT* s) const;\n+// int compare(size_type pos1, size_type n1,\n+//             const charT* s, size_type n2 = npos) const;\n+\n+// NB compare should be thought of as a lexographical compare, ie how\n+// things would be sorted in a dictionary.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+enum want_value {lt=0, z=1, gt=2};\n+\n+int\n+test_value(int result, want_value expected);\n+\n+int\n+test_value(int result, want_value expected)\n+{\n+  bool test [[gnu::unused]] = true;\n+  bool pass = false;\n+\n+  switch (expected) {\n+  case lt:\n+    if (result < 0)\n+      pass = true;\n+    break;\n+  case z:\n+    if (!result)\n+      pass = true;\n+    break;\n+  case gt:\n+    if (result > 0)\n+      pass = true;\n+    break;\n+  default:\n+    pass = false; //should not get here\n+  }\n+\n+  VERIFY(pass);\n+  return 0;\n+}\n+ \n+\n+int \n+test01()\n+{\n+  using namespace std::experimental;\n+\n+  wstring_view \tstr_0(L\"costa rica\");\n+  wstring_view \tstr_1(L\"costa marbella\");\n+  wstring_view \tstr_2;\n+\n+  //sanity check\n+  test_value(wcscmp(L\"costa marbella\", L\"costa rica\"), lt); \n+  test_value(wcscmp(L\"costa rica\", L\"costa rica\"), z);\n+  test_value(wcscmp(str_1.data(), str_0.data()), lt);\n+  test_value(wcscmp(str_0.data(), str_1.data()), gt);\n+  test_value(wcsncmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(wcsncmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(wmemcmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(wmemcmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(wmemcmp(L\"costa marbella\", L\"costa rica\", 14), lt);\n+\n+  // int compare(const basic_string_view& str) const;\n+  test_value(str_0.compare(str_1), gt); //because r>m\n+  test_value(str_1.compare(str_0), lt); //because m<r\n+  str_2 = str_0;\n+  test_value(str_2.compare(str_0), z);\n+  str_2 = L\"cost\";\n+  test_value(str_2.compare(str_0), lt);\n+  str_2 = L\"costa ricans\";\n+  test_value(str_2.compare(str_0), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str) const;\n+  test_value(str_1.compare(0, 6, str_0), lt);\n+  str_2 = L\"cost\";\n+  test_value(str_1.compare(0, 4, str_2), z);\n+  test_value(str_1.compare(0, 5, str_2), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string_view& str, \n+  //\t\t size_type pos2, size_type n2) const;\t\n+  test_value(str_1.compare(0, 6, str_0, 0, 6), z);\n+  test_value(str_1.compare(0, 7, str_0, 0, 7), lt);\n+  test_value(str_0.compare(0, 7, str_1, 0, 7), gt);\n+\n+  // int compare(const charT* s) const;\n+  test_value(str_0.compare(L\"costa marbella\"), gt);\n+  test_value(str_1.compare(L\"costa rica\"), lt);\n+  str_2 = str_0;\n+  test_value(str_2.compare(L\"costa rica\"), z);\n+  test_value(str_2.compare(L\"cost\"), gt);\t\t\t\n+  test_value(str_2.compare(L\"costa ricans\"), lt);\t   \n+\n+  // int compare(size_type pos, size_type n1, const charT* str,\n+  //             size_type n2 = npos) const;\n+  test_value(str_1.compare(0, 6, L\"costa rica\", 0, 6), z); \n+  test_value(str_1.compare(0, 7, L\"costa rica\", 0, 7), lt); \n+  test_value(str_0.compare(0, 7, L\"costa marbella\", 0, 7), gt); \n+\n+  return 0;\n+}\n+\n+\n+int \n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "82a4677a9eee88428273e1df547d22f5149fa2a8", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/compare/wchar_t/13650.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::compare [lib.string_view::compare]\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13650\n+void\n+test01()\n+{\n+  using namespace std::experimental;\n+  bool test [[gnu::unused]] = true;\n+\n+  const wchar_t lit_01[] = { L'w', L'e', L'\\0', L'r', L'd' };\n+  const wchar_t lit_02[] = { L'w', L'e', L'i', L'\\0', L'd' };\n+\n+  const wchar_t lit_ref_a[] = { L'w', L'e', L'\\0', L'q', L'd' };\n+  const wstring_view str_a(lit_ref_a, 5);\n+  VERIFY( str_a.compare(0, 5, lit_01, 5) < 0 );\n+\n+  const wchar_t lit_ref_b[] = { L'w', L'e', L'i' };\n+  const wstring_view str_b(lit_ref_b, 3);\n+  VERIFY( str_b.compare(0, 3, lit_02, 5) < 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "4f2bd3dba5cbc89b39cf7f4d0492e7a5225c01b2", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/data/char/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// string_view operations\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::string_view empty;\n+\n+  // data() for size == 0 is non-NULL?\n+  VERIFY( empty.size() == 0 );\n+  const std::experimental::string_view::value_type* p = empty.data();\n+  VERIFY( p == nullptr );\n+\n+  return 0;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "d577c9f3c0a4986befc250c9413a9a0df4562c3b", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/data/wchar_t/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// string_view operations\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::wstring_view empty;\n+\n+  // data() for size == 0 is non-NULL?\n+  VERIFY( empty.size() == 0 );\n+  const std::experimental::wstring_view::value_type* p = empty.data();\n+  VERIFY( p == nullptr );\n+\n+  return 0;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "8ffd45313569fc700020470f0eefe93e9e288732", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/char/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  typedef std::experimental::string_view::const_reference cref;\n+  typedef std::experimental::string_view::reference ref;\n+  csize_type npos = std::experimental::string_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::experimental::string_view str01(\"mavericks, santa cruz\");\n+  std::experimental::string_view str02(str_lit01);\n+  std::experimental::string_view str03(\"s, s\");\n+  std::experimental::string_view str04;\n+\n+  // size_type find(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.find(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str01, 4);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str02, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 12);\n+  VERIFY( csz01 == npos );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.find(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.find(str04, str01.size());\n+  VERIFY( csz01 == str01.size() ); \n+  csz01 = str01.find(str04, str01.size()+1);\n+  VERIFY( csz01 == npos ); \n+  \n+  // size_type find(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find(char c, size_type pos = 0) const;\n+  csz01 = str01.find('z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.find('/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "326d2ddc2234873534a79a79883c8842bddfa875", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/char/2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_of\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  csize_type npos = std::experimental::string_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::experimental::string_view str01(\"mavericks, santa cruz\");\n+  std::experimental::string_view str02(str_lit01);\n+  std::experimental::string_view str03(\"s, s\");\n+  std::experimental::string_view str04;\n+\n+  // size_type find_first_of(const string_view&, size_type pos = 0) const;\n+  std::experimental::string_view str05(\"xena rulez\");\n+  csz01 = str01.find_first_of(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str01, 4);\n+  VERIFY( csz01 == 4 );\n+  csz01 = str01.find_first_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str02, 3);\n+  VERIFY( csz01 == 3 );\n+  csz01 = str01.find_first_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 12);\n+  VERIFY( csz01 == 16 );\n+  csz01 = str01.find_first_of(str05, 0);\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_of(str05, 4);\n+  VERIFY( csz01 == 4 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  // However, str1.find_first_of(str2,pos) finds the first character in \n+  // str1 (starting at pos) that exists in str2, which is none for empty str2\n+  csz01 = str01.find_first_of(str04, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_of(str04, 5);\n+  VERIFY( csz01 == npos );\n+  \n+  // size_type find_first_of(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_of(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find_first_of(char c, size_type pos = 0) const;\n+  csz01 = str01.find_first_of('z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "2cce1a9b3d56351224fbe3fa9b8660ac9707e7ba", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/char/3.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_not_of\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  csize_type npos = std::experimental::string_view::npos;\n+  csize_type csz01;\n+\n+  const std::experimental::string_view str01(\"Bob Rock, per me\");\n+  const char str_lit01[] = \"Bob Rock\";\n+  std::experimental::string_view str02(\"ovvero Trivi\");\n+  std::experimental::string_view str03(str_lit01);\n+  std::experimental::string_view str04;\n+\n+  // size_type find_first_not_of(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str01);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str02, 10);\n+  VERIFY( csz01 == 10 );\n+  csz01 = str01.find_first_not_of(str02, 12);\n+  VERIFY( csz01 == 14 );\n+  csz01 = str01.find_first_not_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str03, 15);\n+  VERIFY( csz01 == 15 );\n+  csz01 = str01.find_first_not_of(str03, 16);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str04, 12);\n+  VERIFY( csz01 == 12 );\n+  csz01 = str03.find_first_not_of(str01, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str04.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 8);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str_lit01, 10, 0);\n+  VERIFY( csz01 == 10 );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str_lit01);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str02.find_first_not_of(str_lit01, 2);\n+  VERIFY( csz01 == 2 );\n+\n+  // size_type find_first_not_of(char c, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of('B');\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_not_of('o', 1);\n+  VERIFY( csz01 == 2 );\n+  csz01 = str02.find_first_not_of('z');\n+  VERIFY( csz01 == 0 );\n+  csz01 = str04.find_first_not_of('S');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "f6108053cb01402579e31023b2066b3d3a319161", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/char/4.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fchar%2F4.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/31401\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  csize_type npos = std::experimental::string_view::npos;\n+\n+  std::experimental::string_view use = \"anu\";\n+  csize_type pos1 = use.find(\"a\", npos);\n+\n+  VERIFY( pos1 == npos );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "a12e18c700f447118f41e0a6c4d68cadf888d80f", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/wchar_t/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  typedef std::experimental::wstring_view::const_reference cref;\n+  typedef std::experimental::wstring_view::reference ref;\n+  csize_type npos = std::experimental::wstring_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::experimental::wstring_view str01(L\"mavericks, santa cruz\");\n+  std::experimental::wstring_view str02(str_lit01);\n+  std::experimental::wstring_view str03(L\"s, s\");\n+  std::experimental::wstring_view str04;\n+\n+  // size_type find(const wstring_view&, size_type pos = 0) const;\n+  csz01 = str01.find(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str01, 4);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str02, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 12);\n+  VERIFY( csz01 == npos );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.find(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.find(str04, str01.size());\n+  VERIFY( csz01 == str01.size() ); \n+  csz01 = str01.find(str04, str01.size()+1);\n+  VERIFY( csz01 == npos ); \n+  \n+  // size_type find(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.find(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.find(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.find(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.find(L'/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "9ce37b1b5cac9ee470db07b2a023dea262ddf6e3", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/wchar_t/2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_of\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  csize_type npos = std::experimental::wstring_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::experimental::wstring_view str01(L\"mavericks, santa cruz\");\n+  std::experimental::wstring_view str02(str_lit01);\n+  std::experimental::wstring_view str03(L\"s, s\");\n+  std::experimental::wstring_view str04;\n+\n+  // size_type find_first_of(const wstring_view&, size_type pos = 0) const;\n+  std::experimental::wstring_view str05(L\"xena rulez\");\n+  csz01 = str01.find_first_of(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str01, 4);\n+  VERIFY( csz01 == 4 );\n+  csz01 = str01.find_first_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str02, 3);\n+  VERIFY( csz01 == 3 );\n+  csz01 = str01.find_first_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 12);\n+  VERIFY( csz01 == 16 );\n+  csz01 = str01.find_first_of(str05, 0);\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_of(str05, 4);\n+  VERIFY( csz01 == 4 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  // However, str1.find_first_of(str2,pos) finds the first character in \n+  // str1 (starting at pos) that exists in str2, which is none for empty str2\n+  csz01 = str01.find_first_of(str04, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_of(str04, 5);\n+  VERIFY( csz01 == npos );\n+  \n+  // size_type find_first_of(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_of(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_of(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find_first_of(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "915b38712f96b7e9df2cece0cabca212dcb3a3fd", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/wchar_t/3.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find_first_not_of\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  csize_type npos = std::experimental::wstring_view::npos;\n+  csize_type csz01;\n+\n+  const std::experimental::wstring_view str01(L\"Bob Rock, per me\");\n+  const wchar_t str_lit01[] = L\"Bob Rock\";\n+  std::experimental::wstring_view str02(L\"ovvero Trivi\");\n+  std::experimental::wstring_view str03(str_lit01);\n+  std::experimental::wstring_view str04;\n+\n+  // size_type find_first_not_of(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str01);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str02, 10);\n+  VERIFY( csz01 == 10 );\n+  csz01 = str01.find_first_not_of(str02, 12);\n+  VERIFY( csz01 == 14 );\n+  csz01 = str01.find_first_not_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str03, 15);\n+  VERIFY( csz01 == 15 );\n+  csz01 = str01.find_first_not_of(str03, 16);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_not_of(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str04, 12);\n+  VERIFY( csz01 == 12 );\n+  csz01 = str03.find_first_not_of(str01, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str04.find_first_not_of(str02, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_not_of(str_lit01, 0, 8);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_not_of(str_lit01, 10, 0);\n+  VERIFY( csz01 == 10 );\n+\n+  // size_type find_first_not_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(str_lit01);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str02.find_first_not_of(str_lit01, 2);\n+  VERIFY( csz01 == 2 );\n+\n+  // size_type find_first_not_of(char c, size_type pos = 0) const;\n+  csz01 = str01.find_first_not_of(L'B');\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_not_of(L'o', 1);\n+  VERIFY( csz01 == 2 );\n+  csz01 = str02.find_first_not_of(L'z');\n+  VERIFY( csz01 == 0 );\n+  csz01 = str04.find_first_not_of(L'S');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "afb1e5f4b7f2b5305fe19b92ba21b55f31d1503e", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/find/wchar_t/4.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Ffind%2Fwchar_t%2F4.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view find\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/31401\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  csize_type npos = std::experimental::wstring_view::npos;\n+\n+  std::experimental::wstring_view use = L\"anu\";\n+  csize_type pos1 = use.find(L\"a\", npos);\n+\n+  VERIFY( pos1 == npos );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "3986cdfc7e8fa746f60c79ee9fe32278e45358eb", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/rfind/char/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view rfind\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  typedef std::experimental::string_view::const_reference cref;\n+  typedef std::experimental::string_view::reference ref;\n+  csize_type npos = std::experimental::string_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::experimental::string_view str01(\"mavericks, santa cruz\");\n+  std::experimental::string_view str02(str_lit01);\n+  std::experimental::string_view str03(\"s, s\");\n+  std::experimental::string_view str04;\n+\n+  // size_type rfind(const string_view&, size_type pos = 0) const;\n+  csz01 = str01.rfind(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str01, 4);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02,3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str03);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.rfind(str03, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.rfind(str03, 12);\n+  VERIFY( csz01 == 8 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.rfind(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.rfind(str04, str01.size());\n+  VERIFY( csz01 == str01.size() );\n+  csz01 = str01.rfind(str04, str01.size()+1);\n+  VERIFY( csz01 == str01.size() );\n+\n+  // size_type rfind(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.rfind(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type rfind(const char* s, size_type pos = 0) const;\n+  csz01 = str01.rfind(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3);\n+  VERIFY( csz01 == 0 );\n+\n+  // size_type rfind(char c, size_type pos = 0) const;\n+  csz01 = str01.rfind('z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.rfind('/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "bb2d2a60ad79c97e65a377a290928961c6907a0c", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/rfind/char/2.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_of\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::string_view z(\"ab\");\n+  std::experimental::string_view::size_type pos;\n+  pos = z.find_last_of(\"ab\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(\"Xa\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(\"Xb\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(\"XYZ\");\n+  VERIFY( pos == std::experimental::string_view::npos );\n+  pos = z.find_last_of('a');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of('b');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of('X');\n+  VERIFY( pos == std::experimental::string_view::npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "68207ca3443a72b37310e7ea6a2e4bc47e33077e", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/rfind/char/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fchar%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_not_of\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  std::experimental::string_view::size_type pos;\n+  csize_type npos = std::experimental::string_view::npos;\n+\n+  std::experimental::string_view x;\n+  pos = x.find_last_not_of('X');\n+  VERIFY( pos == npos );\n+  pos = x.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == npos );\n+\n+  std::experimental::string_view y(\"a\");\n+  pos = y.find_last_not_of('X');\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of('a');\n+  VERIFY( pos == npos );\n+  pos = y.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(\"a\");\n+  VERIFY( pos == npos );\n+\n+  std::experimental::string_view z(\"ab\");\n+  pos = z.find_last_not_of('X');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(\"XYZ\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of('b');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(\"Xb\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(\"Xa\");\n+  VERIFY( pos == 1 );\n+\n+  return test;\n+}\n+int\n+main()\n+{\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "2d2b3c6eca54fff835ab4d6ece146e841f947197", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/rfind/wchar_t/1.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view rfind\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  typedef std::experimental::wstring_view::const_reference cref;\n+  typedef std::experimental::wstring_view::reference ref;\n+  csize_type npos = std::experimental::wstring_view::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::experimental::wstring_view str01(L\"mavericks, santa cruz\");\n+  std::experimental::wstring_view str02(str_lit01);\n+  std::experimental::wstring_view str03(L\"s, s\");\n+  std::experimental::wstring_view str04;\n+\n+  // size_type rfind(const wstring_view&, size_type pos = 0) const;\n+  csz01 = str01.rfind(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str01, 4);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02,3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str03);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.rfind(str03, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.rfind(str03, 12);\n+  VERIFY( csz01 == 8 );\n+\n+  // An empty string_view consists of no characters\n+  // therefore it should be found at every point in a string_view,\n+  // except beyond the end\n+  csz01 = str01.rfind(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.rfind(str04, str01.size());\n+  VERIFY( csz01 == str01.size() );\n+  csz01 = str01.rfind(str04, str01.size()+1);\n+  VERIFY( csz01 == str01.size() );\n+\n+  // size_type rfind(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.rfind(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type rfind(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.rfind(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3);\n+  VERIFY( csz01 == 0 );\n+\n+  // size_type rfind(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.rfind(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.rfind(L'/');\n+  VERIFY( csz01 == npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "4647de2c9e3a5e0d2e4ed688dbc9a80d2e67e39c", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/rfind/wchar_t/2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_of\n+\n+bool\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::wstring_view::size_type pos;\n+  std::experimental::wstring_view z(L\"ab\");\n+  pos = z.find_last_of(L\"ab\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"Xa\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L\"Xb\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"XYZ\");\n+  VERIFY( pos == std::experimental::wstring_view::npos );\n+  pos = z.find_last_of(L'a');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L'b');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L'X');\n+  VERIFY( pos == std::experimental::wstring_view::npos );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "e3523e0526e01118e59adffd05277c4814a28693", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/rfind/wchar_t/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Frfind%2Fwchar_t%2F3.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+// basic_string_view::find_last_not_of\n+\n+bool\n+test03()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  std::experimental::wstring_view::size_type pos;\n+  csize_type npos = std::experimental::wstring_view::npos;\n+\n+  std::experimental::wstring_view x;\n+  pos = x.find_last_not_of(L'X');\n+  VERIFY( pos == npos );\n+  pos = x.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == npos );\n+\n+  std::experimental::wstring_view y(L\"a\");\n+  pos = y.find_last_not_of(L'X');\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L'a');\n+  VERIFY( pos == npos );\n+  pos = y.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L\"a\");\n+  VERIFY( pos == npos );\n+\n+  std::experimental::wstring_view z(L\"ab\");\n+  pos = z.find_last_not_of(L'X');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L'b');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xb\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xa\");\n+  VERIFY( pos == 1 );\n+\n+  return test;\n+}\n+int\n+main()\n+{\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "007d8b16627ca6f6b4107e4e1e223a18b0bb1993", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/substr/char/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,85 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::substr\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+  typedef std::experimental::string_view::const_reference cref;\n+  typedef std::experimental::string_view::reference ref;\n+  csize_type csz01;\n+\n+  const char str_lit01[] = \"rockaway, pacifica\";\n+  const std::experimental::string_view str01(str_lit01);\n+  std::experimental::string_view str02;\n+\n+  // basic_string_view<charT, _Traits, _Alloc>\n+  //  substr(size_type pos = 0, size_type n = npos) const;\n+  csz01 = str01.size();\n+  str02 = str01.substr(0, 1);\n+  VERIFY( str02 == \"r\" );\n+  str02 = str01.substr(10);\n+  VERIFY( str02 == \"pacifica\" );\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01 + 1);\n+    VERIFY( false ); \n+  }\n+  catch(std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01);\n+    VERIFY( str02.size() == 0 );\n+  }\n+  catch(std::out_of_range& fail)\n+  {\n+    VERIFY( true ); // No terminating null in basic_string_view\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "9bad19d5c6c600438f384ad1177384546dbe9ccc", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/substr/wchar_t/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,85 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::substr\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  typedef std::experimental::wstring_view::const_reference cref;\n+  typedef std::experimental::wstring_view::reference ref;\n+  csize_type csz01;\n+\n+  const wchar_t str_lit01[] = L\"rockaway, pacifica\";\n+  const std::experimental::wstring_view str01(str_lit01);\n+  std::experimental::wstring_view str02;\n+\n+  // basic_string_view<charT, _Traits, _Alloc>\n+  //  substr(size_type pos = 0, size_type n = npos) const;\n+  csz01 = str01.size();\n+  str02 = str01.substr(0, 1);\n+  VERIFY( str02 == L\"r\" );\n+  str02 = str01.substr(10);\n+  VERIFY( str02 == L\"pacifica\" );\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01 + 1);\n+    VERIFY( false ); \n+  }\n+  catch(std::out_of_range& fail)\n+  {\n+    VERIFY( true );\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  try\n+  {\n+    str02 = str01.substr(csz01);\n+    VERIFY( str02.size() == 0 );\n+  }\n+  catch(std::out_of_range& fail)\n+  {\n+    VERIFY( true ); // No terminating null in basic_string_view\n+  }\n+  catch(...)\n+  {\n+    VERIFY( false );\n+  }\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "d32c5004cca8ca7703ca1d1a18b6021dcd23dbde", "filename": "libstdc++-v3/testsuite/experimental/string_view/operators/char/2.cc", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperators%2Fchar%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,246 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string non-member functions\n+\n+// operator==\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+*/\n+\n+// operator!=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs, \n+                  const charT* rhs);\n+*/\n+\n+// operator<\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const charT* lhs, \n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator<=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+                const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::string_view \tstr_0(\"costa rica\");\n+  std::experimental::string_view \tstr_1(\"costa marbella\");\n+  std::experimental::string_view \tstr_2(\"cost\");\n+  std::experimental::string_view\tstr_3(\"costa ricans\");\n+  std::experimental::string_view        str_4;\n+  \n+  str_4 = str_0;\n+  //comparisons between string objects\n+  VERIFY( !(str_0 == str_1) );\n+  VERIFY( !(str_0 == str_2) );\n+  VERIFY( !(str_0 == str_3) );\n+  VERIFY( !(str_1 == str_0) );\n+  VERIFY( !(str_2 == str_0) );\n+  VERIFY( !(str_3 == str_0) );\n+  VERIFY( str_4 == str_0 );\n+  VERIFY( str_0 == str_4 );\n+\n+  VERIFY( str_0 != str_1 );\n+  VERIFY( str_0 != str_2 );\n+  VERIFY( str_0 != str_3 );\n+  VERIFY( str_1 != str_0 );\n+  VERIFY( str_2 != str_0 );\n+  VERIFY( str_3 != str_0 );\n+  VERIFY( !(str_0 != str_4) );\n+  VERIFY( !(str_4 != str_0) );\n+   \n+  VERIFY( str_0 > str_1 ); //true cuz r>m\n+  VERIFY( str_0 > str_2 );\n+  VERIFY( !(str_0 > str_3) );\n+  VERIFY( !(str_1 > str_0) ); //false cuz m<r\n+  VERIFY( !(str_2 > str_0) );\n+  VERIFY( str_3 > str_0 );\n+  VERIFY( !(str_0 > str_4) );\n+  VERIFY( !(str_4 > str_0) );\n+\n+  VERIFY( !(str_0 < str_1) ); //false cuz r>m\n+  VERIFY( !(str_0 < str_2) );\n+  VERIFY( str_0 < str_3 );\n+  VERIFY( str_1 < str_0 ); //true cuz m<r\n+  VERIFY( str_2 < str_0 );\n+  VERIFY( !(str_3 < str_0) );\n+  VERIFY( !(str_0 < str_4) );\n+  VERIFY( !(str_4 < str_0) );\n+\n+  VERIFY( str_0 >= str_1 ); //true cuz r>m\n+  VERIFY( str_0 >= str_2 );\n+  VERIFY( !(str_0 >= str_3) );\n+  VERIFY( !(str_1 >= str_0) );//false cuz m<r\n+  VERIFY( !(str_2 >= str_0) );\n+  VERIFY( str_3 >= str_0 );\n+  VERIFY( str_0 >= str_4 );\n+  VERIFY( str_4 >= str_0 );\n+\n+  VERIFY( !(str_0 <= str_1) );//false cuz r>m\n+  VERIFY( !(str_0 <= str_2) );\n+  VERIFY( str_0 <= str_3 );\n+  VERIFY( str_1 <= str_0 );//true cuz m<r\n+  VERIFY( str_2 <= str_0 );\n+  VERIFY( !(str_3 <= str_0) );\n+  VERIFY( str_0 <= str_4 );\n+  VERIFY( str_4 <= str_0 );\n+\n+  //comparisons between string object and string literal\n+  VERIFY( !(str_0 == \"costa marbella\") );\n+  VERIFY( !(str_0 == \"cost\") );\n+  VERIFY( !(str_0 == \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" == str_0) );\n+  VERIFY( !(\"cost\" == str_0) );\n+  VERIFY( !(\"costa ricans\" == str_0) );\n+  VERIFY( \"costa rica\" == str_0 );\n+  VERIFY( str_0 == \"costa rica\" );\n+\n+  VERIFY( str_0 != \"costa marbella\" );\n+  VERIFY( str_0 != \"cost\" );\n+  VERIFY( str_0 != \"costa ricans\" );\n+  VERIFY( \"costa marbella\" != str_0 );\n+  VERIFY( \"cost\" != str_0 );\n+  VERIFY( \"costa ricans\" != str_0 );\n+  VERIFY( !(\"costa rica\" != str_0) );\n+  VERIFY( !(str_0 != \"costa rica\") );\n+\n+  VERIFY( str_0 > \"costa marbella\" ); //true cuz r>m\n+  VERIFY( str_0 > \"cost\" );\n+  VERIFY( !(str_0 > \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" > str_0) );//false cuz m<r\n+  VERIFY( !(\"cost\" > str_0) );\n+  VERIFY( \"costa ricans\" > str_0 );\n+  VERIFY( !(\"costa rica\" > str_0) );\n+  VERIFY( !(str_0 > \"costa rica\") );\n+\n+  VERIFY( !(str_0 < \"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 < \"cost\") );\n+  VERIFY( str_0 < \"costa ricans\" );\n+  VERIFY( \"costa marbella\" < str_0 );//true cuz m<r\n+  VERIFY( \"cost\" < str_0 );\n+  VERIFY( !(\"costa ricans\" < str_0) );\n+  VERIFY( !(\"costa rica\" < str_0) );\n+  VERIFY( !(str_0 < \"costa rica\") );\n+\n+  VERIFY( str_0 >= \"costa marbella\" );//true cuz r>m\n+  VERIFY( str_0 >= \"cost\" );\n+  VERIFY( !(str_0 >= \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" >= str_0) );//false cuz m<r\n+  VERIFY( !(\"cost\" >= str_0) );\n+  VERIFY( \"costa ricans\" >= str_0 );\n+  VERIFY( \"costa rica\" >= str_0 );\n+  VERIFY( str_0 >= \"costa rica\" );\n+\n+  VERIFY( !(str_0 <= \"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 <= \"cost\") );\n+  VERIFY( str_0 <= \"costa ricans\" );\n+  VERIFY( \"costa marbella\" <= str_0 );//true cuz m<r\n+  VERIFY( \"cost\" <= str_0 );\n+  VERIFY( !(\"costa ricans\" <= str_0) );\n+  VERIFY( \"costa rica\" <= str_0 );\n+  VERIFY( str_0 <= \"costa rica\" );\n+\n+  return 0;\n+}\n+\n+int\n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "32b295fd95c145ebb64b30c9b9fca2f0a8527ac7", "filename": "libstdc++-v3/testsuite/experimental/string_view/operators/wchar_t/2.cc", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperators%2Fwchar_t%2F2.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,246 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view non-member functions\n+\n+// operator==\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+*/\n+\n+// operator!=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string_view<charT,traits,Allocator>& lhs, \n+                  const charT* rhs);\n+*/\n+\n+// operator<\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const charT* lhs, \n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator<=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+// operator>=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                const basic_string_view<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string_view<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const charT* lhs,\n+                  const basic_string_view<charT,traits,Allocator>& rhs);\n+*/\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::experimental::wstring_view \tstr_0(L\"costa rica\");\n+  std::experimental::wstring_view \tstr_1(L\"costa marbella\");\n+  std::experimental::wstring_view \tstr_2(L\"cost\");\n+  std::experimental::wstring_view\tstr_3(L\"costa ricans\");\n+  std::experimental::wstring_view  str_4;\n+  \n+  str_4 = str_0;\n+  //comparisons between string_view objects\n+  VERIFY( !(str_0 == str_1) );\n+  VERIFY( !(str_0 == str_2) );\n+  VERIFY( !(str_0 == str_3) );\n+  VERIFY( !(str_1 == str_0) );\n+  VERIFY( !(str_2 == str_0) );\n+  VERIFY( !(str_3 == str_0) );\n+  VERIFY( str_4 == str_0 );\n+  VERIFY( str_0 == str_4 );\n+\n+  VERIFY( str_0 != str_1 );\n+  VERIFY( str_0 != str_2 );\n+  VERIFY( str_0 != str_3 );\n+  VERIFY( str_1 != str_0 );\n+  VERIFY( str_2 != str_0 );\n+  VERIFY( str_3 != str_0 );\n+  VERIFY( !(str_0 != str_4) );\n+  VERIFY( !(str_4 != str_0) );\n+   \n+  VERIFY( str_0 > str_1 ); //true cuz r>m\n+  VERIFY( str_0 > str_2 );\n+  VERIFY( !(str_0 > str_3) );\n+  VERIFY( !(str_1 > str_0) ); //false cuz m<r\n+  VERIFY( !(str_2 > str_0) );\n+  VERIFY( str_3 > str_0 );\n+  VERIFY( !(str_0 > str_4) );\n+  VERIFY( !(str_4 > str_0) );\n+\n+  VERIFY( !(str_0 < str_1) ); //false cuz r>m\n+  VERIFY( !(str_0 < str_2) );\n+  VERIFY( str_0 < str_3 );\n+  VERIFY( str_1 < str_0 ); //true cuz m<r\n+  VERIFY( str_2 < str_0 );\n+  VERIFY( !(str_3 < str_0) );\n+  VERIFY( !(str_0 < str_4) );\n+  VERIFY( !(str_4 < str_0) );\n+\n+  VERIFY( str_0 >= str_1 ); //true cuz r>m\n+  VERIFY( str_0 >= str_2 );\n+  VERIFY( !(str_0 >= str_3) );\n+  VERIFY( !(str_1 >= str_0) );//false cuz m<r\n+  VERIFY( !(str_2 >= str_0) );\n+  VERIFY( str_3 >= str_0 );\n+  VERIFY( str_0 >= str_4 );\n+  VERIFY( str_4 >= str_0 );\n+\n+  VERIFY( !(str_0 <= str_1) );//false cuz r>m\n+  VERIFY( !(str_0 <= str_2) );\n+  VERIFY( str_0 <= str_3 );\n+  VERIFY( str_1 <= str_0 );//true cuz m<r\n+  VERIFY( str_2 <= str_0 );\n+  VERIFY( !(str_3 <= str_0) );\n+  VERIFY( str_0 <= str_4 );\n+  VERIFY( str_4 <= str_0 );\n+\n+  //comparisons between string_view object and string_view literal\n+  VERIFY( !(str_0 == L\"costa marbella\") );\n+  VERIFY( !(str_0 == L\"cost\") );\n+  VERIFY( !(str_0 == L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" == str_0) );\n+  VERIFY( !(L\"cost\" == str_0) );\n+  VERIFY( !(L\"costa ricans\" == str_0) );\n+  VERIFY( L\"costa rica\" == str_0 );\n+  VERIFY( str_0 == L\"costa rica\" );\n+\n+  VERIFY( str_0 != L\"costa marbella\" );\n+  VERIFY( str_0 != L\"cost\" );\n+  VERIFY( str_0 != L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" != str_0 );\n+  VERIFY( L\"cost\" != str_0 );\n+  VERIFY( L\"costa ricans\" != str_0 );\n+  VERIFY( !(L\"costa rica\" != str_0) );\n+  VERIFY( !(str_0 != L\"costa rica\") );\n+\n+  VERIFY( str_0 > L\"costa marbella\" ); //true cuz r>m\n+  VERIFY( str_0 > L\"cost\" );\n+  VERIFY( !(str_0 > L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" > str_0) );//false cuz m<r\n+  VERIFY( !(L\"cost\" > str_0) );\n+  VERIFY( L\"costa ricans\" > str_0 );\n+  VERIFY( !(L\"costa rica\" > str_0) );\n+  VERIFY( !(str_0 > L\"costa rica\") );\n+\n+  VERIFY( !(str_0 < L\"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 < L\"cost\") );\n+  VERIFY( str_0 < L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" < str_0 );//true cuz m<r\n+  VERIFY( L\"cost\" < str_0 );\n+  VERIFY( !(L\"costa ricans\" < str_0) );\n+  VERIFY( !(L\"costa rica\" < str_0) );\n+  VERIFY( !(str_0 < L\"costa rica\") );\n+\n+  VERIFY( str_0 >= L\"costa marbella\" );//true cuz r>m\n+  VERIFY( str_0 >= L\"cost\" );\n+  VERIFY( !(str_0 >= L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" >= str_0) );//false cuz m<r\n+  VERIFY( !(L\"cost\" >= str_0) );\n+  VERIFY( L\"costa ricans\" >= str_0 );\n+  VERIFY( L\"costa rica\" >= str_0 );\n+  VERIFY( str_0 >= L\"costa rica\" );\n+\n+  VERIFY( !(str_0 <= L\"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 <= L\"cost\") );\n+  VERIFY( str_0 <= L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" <= str_0 );//true cuz m<r\n+  VERIFY( L\"cost\" <= str_0 );\n+  VERIFY( !(L\"costa ricans\" <= str_0) );\n+  VERIFY( L\"costa rica\" <= str_0 );\n+  VERIFY( str_0 <= L\"costa rica\" );\n+\n+  return 0;\n+}\n+\n+int\n+main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "79f6f43f9e2bbe657249768d862a236f52e816b1", "filename": "libstdc++-v3/testsuite/experimental/string_view/range_access/char/1.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 24.6.5, range access [iterator.range]\n+\n+#include <experimental/string_view>\n+\n+void\n+test01()\n+{\n+  std::experimental::string_view s(\"Hello, World!\");\n+  std::begin(s);\n+  std::end(s);\n+}"}, {"sha": "257551fd2a8a0da8738f74e4ab621db9d740bf2f", "filename": "libstdc++-v3/testsuite/experimental/string_view/range_access/wchar_t/1.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 24.6.5, range access [iterator.range]\n+\n+#include <experimental/string_view>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::experimental::wstring_view ws(L\"Hello, World!\");\n+  std::begin(ws);\n+  std::end(ws);\n+#endif\n+}"}, {"sha": "75f5b39e99d2911189d5ae0a8429f74af1d5037c", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,26 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// This file tests explicit instantiation of basic_string\n+\n+#include <experimental/string_view>\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+template class std::experimental::basic_string_view<int, std::char_traits<int>>;"}, {"sha": "0b1d18218981eeea1e1be8f0f98d4521d0430f55", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/explicit_instantiation/char/1.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+\n+template class std::experimental::basic_string_view<char>;"}, {"sha": "1f6b5c285778f85afd282d7c92e31df4f040433d", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/explicit_instantiation/char16_t/1.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+\n+template class std::experimental::basic_string_view<char16_t>;"}, {"sha": "c4b94610d0a101fb08ed3b350c3a136a604be868", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/explicit_instantiation/char32_t/1.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+\n+template class std::experimental::basic_string_view<char32_t>;"}, {"sha": "6cc307123dd3622718823cdd3396279a4d91eb2e", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/explicit_instantiation/wchar_t/1.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+\n+template class std::experimental::basic_string_view<wchar_t>;"}, {"sha": "5db6b56977251813abd8994d3c23d1d58d7776ef", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/typedefs.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,47 @@\n+\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_containers.h>\n+\n+namespace __gnu_test\n+{\n+  template<typename _Tp1, typename _Tp2>\n+    struct traits<std::experimental::basic_string_view<_Tp1, _Tp2>> : public traits_base\n+    {\n+      typedef std::true_type    is_container;\n+      typedef std::true_type    is_reversible;\n+    };\n+}\n+\n+#include <testsuite_containers.h>\n+\n+// Check container for required typedefs.\n+\n+__gnu_test::basic_types<std::experimental::string_view> t1b;\n+__gnu_test::reversible_types<std::experimental::string_view> t1r;\n+typedef typename std::experimental::string_view::traits_type traits_type1;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+__gnu_test::basic_types<std::experimental::wstring_view> t2b;\n+__gnu_test::reversible_types<std::experimental::wstring_view> t2r;\n+typedef typename std::experimental::wstring_view::traits_type traits_type2;\n+#endif"}, {"sha": "b8515b5d46a2b546e822ae0dcd6a9471a9c288fc", "filename": "libstdc++-v3/testsuite/experimental/string_view/types/1.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77cba5af77ccf8fc66f3309de666daa8a4deb623/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypes%2F1.cc?ref=77cba5af77ccf8fc66f3309de666daa8a4deb623", "patch": "@@ -0,0 +1,43 @@\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+#include <experimental/string_view>\n+\n+struct T\n+{\n+  typedef std::experimental::string_view String_view;\n+  typedef String_view::iterator iterator;\n+  typedef String_view::const_iterator const_iterator;\n+\n+  char t(iterator f)             { return *f; }\n+  char t(const_iterator f) const { return *f; }\n+};\n+\n+void\n+f()\n+{\n+  std::experimental::string_view s;\n+  T t;\n+  T::const_iterator i = s.begin();\n+  \n+  t.t(i);\n+}"}]}