{"sha": "8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0MjMwYzgyM2JhMTEwNmViZDZiYmZjZmRlYTk4ZmM4YmJkMTZkMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-27T16:54:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-27T16:54:37Z"}, "message": "[multiple changes]\n\n2014-01-27  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch7.adb, exp_ch9.adb: Adjust comments.\n\n2014-01-27  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Expon): Remove unsigned type test\n\tfor 2**X optimization.\n\n2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-suenst.adb: strings.utf_encoding.strings (Decode): Check\n\texplicitly whether value is in range of Character, because the\n\tlibrary is typically compiled with range checks disabled, and\n\twe cannot rely on the implicit check on the argument of 'Val.\n\n2014-01-27  Vincent Celier  <celier@adacore.com>\n\n\t* a-ciorma.adb, a-cihama.adb (Assign): Copy the Source to the Target,\n\tnot the Target to itself.\n\n2014-01-27  Robert Dewar  <dewar@adacore.com>\n\n\t* vms_conv.ads, ali.adb, sem_ch6.ads, opt.ads, vms_cmds.ads: Minor\n\tchanges to avoid incorrect use of unordered enum types.\n\n2014-01-27  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch4.adb: Minor reformatting.\n\nFrom-SVN: r207144", "tree": {"sha": "d7021741bf39c55d0e737810af9bddd5a46496fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7021741bf39c55d0e737810af9bddd5a46496fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/comments", "author": null, "committer": null, "parents": [{"sha": "29077c18417c523c5fd2790613ba4ea2988660c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29077c18417c523c5fd2790613ba4ea2988660c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29077c18417c523c5fd2790613ba4ea2988660c4"}], "stats": {"total": 272, "additions": 155, "deletions": 117}, "files": [{"sha": "0873ba4e7eb1122b3aafe0f7be64f4bb9d6269b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -1,3 +1,33 @@\n+2014-01-27  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch7.adb, exp_ch9.adb: Adjust comments.\n+\n+2014-01-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Expon): Remove unsigned type test\n+\tfor 2**X optimization.\n+\n+2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-suenst.adb: strings.utf_encoding.strings (Decode): Check\n+\texplicitly whether value is in range of Character, because the\n+\tlibrary is typically compiled with range checks disabled, and\n+\twe cannot rely on the implicit check on the argument of 'Val.\n+\n+2014-01-27  Vincent Celier  <celier@adacore.com>\n+\n+\t* a-ciorma.adb, a-cihama.adb (Assign): Copy the Source to the Target,\n+\tnot the Target to itself.\n+\n+2014-01-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* vms_conv.ads, ali.adb, sem_ch6.ads, opt.ads, vms_cmds.ads: Minor\n+\tchanges to avoid incorrect use of unordered enum types.\n+\n+2014-01-27  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch4.adb: Minor reformatting.\n+\n 2014-01-27  Robert Dewar  <dewar@adacore.com>\n \n \t* scn.adb (Check_End_Of_Line): Removed."}, {"sha": "4e4d240e394c621dfc22e6387a1fa0524db6c624", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -169,7 +169,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          Target.Reserve_Capacity (Source.Length);\n       end if;\n \n-      Insert_Items (Target.HT);\n+      Insert_Items (Source.HT);\n    end Assign;\n \n    --------------"}, {"sha": "1c6f6d737fc3dad907ff3f59b413b2fd82b4d743", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -313,7 +313,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       end if;\n \n       Target.Clear;\n-      Insert_Items (Target.Tree);\n+      Insert_Items (Source.Tree);\n    end Assign;\n \n    -------------"}, {"sha": "2ed5c2c0c6c9b2ec6bed63c15001b593fc9c8e61", "filename": "gcc/ada/a-suenst.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fa-suenst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fa-suenst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suenst.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -154,16 +154,19 @@ package body Ada.Strings.UTF_Encoding.Strings is\n          end if;\n \n          Len := Len + 1;\n+\n+         --  The value may still be out of range of Standard.Character. We make\n+         --  the check explicit because the library is typically compiled with\n+         --  range checks disabled.\n+\n+         if R > Character'Pos (Character'Last) then\n+            Raise_Encoding_Error (Iptr - 1);\n+         end if;\n+\n          Result (Len) := Character'Val (R);\n       end loop;\n \n       return Result (1 .. Len);\n-\n-   exception\n-      --  'Val may have been out of range\n-\n-      when others =>\n-         Raise_Encoding_Error (Iptr - 1);\n    end Decode;\n \n    --  Decode UTF-16 input to String"}, {"sha": "87cb61d4f54bd9af72ac95d690cb9b7672660b60", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -1290,7 +1290,7 @@ package body ALI is\n \n                   begin\n                      R := Restriction_Id'First;\n-                     while R < Not_A_Restriction_Id loop\n+                     while R /= Not_A_Restriction_Id loop\n                         if Restriction_Id'Image (R) = RN then\n                            goto R_Found;\n                         end if;"}, {"sha": "6952665ce21da98a9eadc84cce7e375890a3ecfd", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -7469,12 +7469,16 @@ package body Exp_Ch4 is\n       --  a non-binary modulus in the multiplication case, since we get a wrong\n       --  result if the shift causes an overflow before the modular reduction.\n \n+      --  Note: we used to check that Exptyp was an unsigned type. But that is\n+      --  an unnecessary check, since if Exp is negative, we have a run-time\n+      --  error that is either caught (so we get the right result) or we have\n+      --  suppressed the check, in which case the code is erroneous anyway.\n+\n       if Nkind (Base) = N_Integer_Literal\n         and then CRT_Safe_Compile_Time_Known_Value (Base)\n         and then Expr_Value (Base) = Uint_2\n         and then Is_Integer_Type (Root_Type (Exptyp))\n         and then Esize (Root_Type (Exptyp)) <= Esize (Standard_Integer)\n-        and then Is_Unsigned_Type (Exptyp)\n         and then not Ovflo\n       then\n          --  First the multiply and divide cases"}, {"sha": "ddf6d7ea81918483ab0be29c5f6a6886f64df5db", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -532,11 +532,8 @@ package body Exp_Ch7 is\n             pragma Assert (Present (Param));\n \n             --  Historical note: In earlier versions of GNAT, there was code\n-            --  at this point to generate stuff to service entry queues. But\n-            --  that was wrong thinking. This was useless and resulted in\n-            --  incoherencies between code generated with and without -gnatp.\n-\n-            --  All that is needed at this stage is a normal cleanup call\n+            --  at this point to generate stuff to service entry queues. It is\n+            --  now abstracted in Build_Protected_Subprogram_Call_Cleanup.\n \n             Build_Protected_Subprogram_Call_Cleanup\n               (Specification (N), Conc_Typ, Loc, Stmts);"}, {"sha": "b85dd015f453d1ed713d085a16ea84242c235fd1", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -4278,6 +4278,10 @@ package body Exp_Ch9 is\n             Append (Unprot_Call, Stmts);\n          end if;\n \n+         --  Historical note: Previously, call the the cleanup was inserted\n+         --  here. This is now done by Build_Protected_Subprogram_Call_Cleanup,\n+         --  which is also shared by the 'not Exc_Safe' path.\n+\n          Build_Protected_Subprogram_Call_Cleanup (Op_Spec, Pid, Loc, Stmts);\n \n          if Nkind (Op_Spec) = N_Function_Specification then\n@@ -4298,6 +4302,10 @@ package body Exp_Ch9 is\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc, Statements => Stmts));\n \n+      --  Mark this subprogram as a protected subprogram body so that the\n+      --  cleanup will be inserted. This is done only in the 'not Exc_Safe'\n+      --  path as otherwise the cleanup has already been inserted.\n+\n       if not Exc_Safe then\n          Set_Is_Protected_Subprogram_Body (Sub_Body);\n       end if;"}, {"sha": "f5349f55b2d3d6a0ad9d61b20c48b232010e6415", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -1064,6 +1064,7 @@ package Opt is\n    --  object directory, if project files are used.\n \n    type Operating_Mode_Type is (Check_Syntax, Check_Semantics, Generate_Code);\n+   pragma Ordered (Operating_Mode_Type);\n    Operating_Mode : Operating_Mode_Type := Generate_Code;\n    --  GNAT\n    --  Indicates the operating mode of the compiler. The default is generate\n@@ -1072,7 +1073,8 @@ package Opt is\n    --  only mode. Operating_Mode can also be modified as a result of detecting\n    --  errors during the compilation process. In particular if any serious\n    --  error is detected then this flag is reset from Generate_Code to\n-   --  Check_Semantics after generating an error message.\n+   --  Check_Semantics after generating an error message. This is an ordered\n+   --  type with the semantics that each value does more than the previous one.\n \n    Optimize_Alignment : Character := 'O';\n    --  Setting of Optimize_Alignment, set to T/S/O for time/space/off. Can"}, {"sha": "1512a7ad240d620b22a516a76557061eb7ca60db", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 89, "deletions": 95, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -4594,15 +4594,15 @@ package body Sem_Ch4 is\n \n             Check_Misspelled_Selector (Type_To_Use, Sel);\n \n+         --  If this is a derived formal type, the parent may have different\n+         --  visibility at this point. Try for an inherited component before\n+         --  reporting an error.\n+\n          elsif Is_Generic_Type (Prefix_Type)\n            and then Ekind (Prefix_Type) = E_Record_Type_With_Private\n            and then Prefix_Type /= Etype (Prefix_Type)\n            and then Is_Record_Type (Etype (Prefix_Type))\n          then\n-            --  If this is a derived formal type, the parent may have\n-            --  different visibility at this point. Try for an inherited\n-            --  component before reporting an error.\n-\n             Set_Etype (Prefix (N), Etype (Prefix_Type));\n             Analyze_Selected_Component (N);\n             return;\n@@ -4615,7 +4615,6 @@ package body Sem_Ch4 is\n            and then Is_Generic_Actual_Type (Prefix_Type)\n            and then Present (Full_View (Prefix_Type))\n          then\n-\n             Find_Component_In_Instance\n               (Generic_Parent_Type (Parent (Prefix_Type)));\n             return;\n@@ -5034,13 +5033,13 @@ package body Sem_Ch4 is\n             then\n                Add_One_Interp (N, Op_Id, Etype (Op_Id));\n \n-               --  If the left operand is overloaded, indicate that the\n-               --  current type is a viable candidate. This is redundant\n-               --  in most cases, but for equality and comparison operators\n-               --  where the context does not impose a type on the operands,\n-               --  setting the proper type is necessary to avoid subsequent\n-               --  ambiguities during resolution, when both user-defined and\n-               --  predefined operators may be candidates.\n+               --  If the left operand is overloaded, indicate that the current\n+               --  type is a viable candidate. This is redundant in most cases,\n+               --  but for equality and comparison operators where the context\n+               --  does not impose a type on the operands, setting the proper\n+               --  type is necessary to avoid subsequent ambiguities during\n+               --  resolution, when both user-defined and predefined operators\n+               --  may be candidates.\n \n                if Is_Overloaded (Left_Opnd (N)) then\n                   Set_Etype (Left_Opnd (N), Etype (F1));\n@@ -5108,7 +5107,7 @@ package body Sem_Ch4 is\n       --  (multiplication or division) that should hide the corresponding\n       --  predefined operator. Used to implement Ada 2005 AI-264, to make\n       --  such operators more visible and therefore useful.\n-\n+      --\n       --  If the name of the operation is an expanded name with prefix\n       --  Standard, the predefined universal fixed operator is available,\n       --  as specified by AI-420 (RM 4.5.5 (19.1/2)).\n@@ -5325,11 +5324,11 @@ package body Sem_Ch4 is\n       Comp : Entity_Id;\n \n    begin\n-      --  All the components of the prefix of selector Sel are matched\n-      --  against  Sel and a count is maintained of possible misspellings.\n-      --  When at the end of the analysis there are one or two (not more!)\n-      --  possible misspellings, these misspellings will be suggested as\n-      --  possible correction.\n+      --  All the components of the prefix of selector Sel are matched against\n+      --  Sel and a count is maintained of possible misspellings. When at\n+      --  the end of the analysis there are one or two (not more!) possible\n+      --  misspellings, these misspellings will be suggested as possible\n+      --  correction.\n \n       if not (Is_Private_Type (Prefix) or else Is_Record_Type (Prefix)) then\n \n@@ -5661,21 +5660,17 @@ package body Sem_Ch4 is\n          --  universal, the context will impose the correct type.\n \n          if Present (Scop)\n-            and then not Defined_In_Scope (T1, Scop)\n-            and then T1 /= Universal_Integer\n-            and then T1 /= Universal_Real\n-            and then T1 /= Any_String\n-            and then T1 /= Any_Composite\n+           and then not Defined_In_Scope (T1, Scop)\n+           and then T1 /= Universal_Integer\n+           and then T1 /= Universal_Real\n+           and then T1 /= Any_String\n+           and then T1 /= Any_Composite\n          then\n             return;\n          end if;\n \n-         if Valid_Comparison_Arg (T1)\n-           and then Has_Compatible_Type (R, T1)\n-         then\n-            if Found\n-              and then Base_Type (T1) /= Base_Type (T_F)\n-            then\n+         if Valid_Comparison_Arg (T1) and then Has_Compatible_Type (R, T1) then\n+            if Found and then Base_Type (T1) /= Base_Type (T_F) then\n                It := Disambiguate (L, I_F, Index, Any_Type);\n \n                if It = No_Interp then\n@@ -5705,9 +5700,7 @@ package body Sem_Ch4 is\n       --  If left operand is aggregate, the right operand has to\n       --  provide a usable type for it.\n \n-      if Nkind (L) = N_Aggregate\n-        and then Nkind (R) /= N_Aggregate\n-      then\n+      if Nkind (L) = N_Aggregate and then Nkind (R) /= N_Aggregate then\n          Find_Comparison_Types (L => R, R => L, Op_Id => Op_Id, N => N);\n          return;\n       end if;\n@@ -5754,8 +5747,7 @@ package body Sem_Ch4 is\n       It    : Interp;\n \n    begin\n-      if T1 = Universal_Integer\n-        or else T1 = Universal_Real\n+      if T1 = Universal_Integer or else T1 = Universal_Real\n \n         --  If the left operand of an equality operator is null, the visibility\n         --  of the operator must be determined from the interpretation of the\n@@ -5765,8 +5757,7 @@ package body Sem_Ch4 is\n         or else T1 = Any_Access\n       then\n          if not Is_Overloaded (R) then\n-            Add_One_Interp\n-              (N, Op_Id, Standard_Boolean, Base_Type (Etype (R)));\n+            Add_One_Interp (N, Op_Id, Standard_Boolean, Base_Type (Etype (R)));\n          else\n             Get_First_Interp (R, Index, It);\n             while Present (It.Typ) loop\n@@ -5846,6 +5837,7 @@ package body Sem_Ch4 is\n          --  universal, the context will impose the correct type. An anonymous\n          --  type for a 'Access reference is also universal in this sense, as\n          --  the actual type is obtained from context.\n+\n          --  In Ada 2005, the equality operator for anonymous access types\n          --  is declared in Standard, and preference rules apply to it.\n \n@@ -5916,9 +5908,9 @@ package body Sem_Ch4 is\n          --  If the right operand has a type compatible with T1, check for an\n          --  acceptable interpretation, unless T1 is limited (no predefined\n          --  equality available), or this is use of a \"/=\" for a tagged type.\n-         --  In the latter case, possible interpretations of equality need to\n-         --  be considered, we don't want the default inequality declared in\n-         --  Standard to be chosen, and the \"/=\" will be rewritten as a\n+         --  In the latter case, possible interpretations of equality need\n+         --  to be considered, we don't want the default inequality declared\n+         --  in Standard to be chosen, and the \"/=\" will be rewritten as a\n          --  negation of \"=\" (see the end of Analyze_Equality_Op). This ensures\n          --  that that rewriting happens during analysis rather than being\n          --  delayed until expansion (this is needed for ASIS, which only sees\n@@ -6113,12 +6105,12 @@ package body Sem_Ch4 is\n                 (Base_Type (Etype (First_Formal (Hom))) = Cls_Type\n                   or else\n                     (Is_Access_Type (Etype (First_Formal (Hom)))\n-                       and then\n-                         Ekind (Etype (First_Formal (Hom))) =\n-                           E_Anonymous_Access_Type\n-                       and then\n-                         Base_Type\n-                           (Designated_Type (Etype (First_Formal (Hom)))) =\n+                      and then\n+                        Ekind (Etype (First_Formal (Hom))) =\n+                          E_Anonymous_Access_Type\n+                      and then\n+                        Base_Type\n+                          (Designated_Type (Etype (First_Formal (Hom)))) =\n                                                                 Cls_Type))\n             then\n                Add_One_Interp (Op, Hom, Etype (Hom));\n@@ -6353,7 +6345,7 @@ package body Sem_Ch4 is\n                   else\n                      Error_Msg_NE  --  CODEFIX\n                        (\"add with_clause and use_clause for&!\",\n-                          N, Defining_Entity (Unit (U)));\n+                        N, Defining_Entity (Unit (U)));\n                   end if;\n                end;\n                return;\n@@ -6576,7 +6568,7 @@ package body Sem_Ch4 is\n                                 (\"No legal interpretation for operator&\", N);\n                               Error_Msg_NE\n                                 (\"\\use clause on& would make operation legal\",\n-                                   N, Scope (Op_Id));\n+                                 N, Scope (Op_Id));\n                               exit;\n                            end if;\n                         end if;\n@@ -6625,19 +6617,18 @@ package body Sem_Ch4 is\n       if Present (E)\n         and then (Operating_Mode = Check_Semantics or else not Expander_Active)\n       then\n-         --  We create a dummy reference to E to ensure that the reference\n-         --  is not considered as part of an assignment (an implicit\n-         --  dereference can never assign to its prefix). The Comes_From_Source\n-         --  attribute needs to be propagated for accurate warnings.\n+         --  We create a dummy reference to E to ensure that the reference is\n+         --  not considered as part of an assignment (an implicit dereference\n+         --  can never assign to its prefix). The Comes_From_Source attribute\n+         --  needs to be propagated for accurate warnings.\n \n          Ref := New_Reference_To (E, Sloc (P));\n          Set_Comes_From_Source (Ref, Comes_From_Source (P));\n          Generate_Reference (E, Ref);\n       end if;\n \n-      --  An implicit dereference is a legal occurrence of an\n-      --  incomplete type imported through a limited_with clause,\n-      --  if the full view is visible.\n+      --  An implicit dereference is a legal occurrence of an incomplete type\n+      --  imported through a limited_with clause, if the full view is visible.\n \n       if From_Limited_With (Typ)\n         and then not From_Limited_With (Scope (Typ))\n@@ -6676,8 +6667,8 @@ package body Sem_Ch4 is\n       procedure Remove_Address_Interpretations (Op : Operand_Position);\n       --  Ambiguities may arise when the operands are literal and the address\n       --  operations in s-auxdec are visible. In that case, remove the\n-      --  interpretation of a literal as Address, to retain the semantics of\n-      --  Address as a private type.\n+      --  interpretation of a literal as Address, to retain the semantics\n+      --  of Address as a private type.\n \n       ------------------------------------\n       -- Remove_Address_Interpretations --\n@@ -6779,9 +6770,9 @@ package body Sem_Ch4 is\n             if Nkind (N) in N_Binary_Op then\n                declare\n                   U1 : constant Boolean :=\n-                     Present (Universal_Interpretation (Right_Opnd (N)));\n+                         Present (Universal_Interpretation (Right_Opnd (N)));\n                   U2 : constant Boolean :=\n-                     Present (Universal_Interpretation (Left_Opnd (N)));\n+                         Present (Universal_Interpretation (Left_Opnd (N)));\n \n                begin\n                   if U1 then\n@@ -7008,15 +6999,16 @@ package body Sem_Ch4 is\n          end if;\n \n       else\n-         Indexing := Make_Function_Call (Loc,\n-           Name => Make_Identifier (Loc, Chars (Func_Name)),\n-           Parameter_Associations => Assoc);\n+         Indexing :=\n+           Make_Function_Call (Loc,\n+             Name => Make_Identifier (Loc, Chars (Func_Name)),\n+             Parameter_Associations => Assoc);\n \n          Rewrite (N, Indexing);\n \n          declare\n-            I  : Interp_Index;\n-            It : Interp;\n+            I       : Interp_Index;\n+            It      : Interp;\n             Success : Boolean;\n \n          begin\n@@ -7103,6 +7095,7 @@ package body Sem_Ch4 is\n          end if;\n \n          return True;\n+\n       else\n          return False;\n       end if;\n@@ -7212,8 +7205,8 @@ package body Sem_Ch4 is\n       --  Identifier on which possible interpretations will be collected\n \n       Report_Error : Boolean := False;\n-      --  If no candidate interpretation matches the context, redo the\n-      --  analysis with error enabled to provide additional information.\n+      --  If no candidate interpretation matches the context, redo analysis\n+      --  with Report_Error True to provide additional information.\n \n       Actual          : Node_Id;\n       Candidate       : Entity_Id := Empty;\n@@ -7372,9 +7365,9 @@ package body Sem_Ch4 is\n \n          First_Actual := First (Parameter_Associations (Call_Node));\n \n-         --  For cross-reference purposes, treat the new node as being in\n-         --  the source if the original one is. Set entity and type, even\n-         --  though they may be overwritten during resolution if overloaded.\n+         --  For cross-reference purposes, treat the new node as being in the\n+         --  source if the original one is. Set entity and type, even though\n+         --  they may be overwritten during resolution if overloaded.\n \n          Set_Comes_From_Source (Subprog, Comes_From_Source (N));\n          Set_Comes_From_Source (Call_Node, Comes_From_Source (N));\n@@ -7386,9 +7379,9 @@ package body Sem_Ch4 is\n             Set_Etype  (Selector_Name (N), Etype (Entity (Subprog)));\n          end if;\n \n-         --  If need be, rewrite first actual as an explicit dereference\n-         --  If the call is overloaded, the rewriting can only be done\n-         --  once the primitive operation is identified.\n+         --  If need be, rewrite first actual as an explicit dereference. If\n+         --  the call is overloaded, the rewriting can only be done once the\n+         --  primitive operation is identified.\n \n          if Is_Overloaded (Subprog) then\n \n@@ -7503,8 +7496,8 @@ package body Sem_Ch4 is\n          if Access_Formal and then not Access_Actual then\n             if Nkind (Parent (Op)) = N_Full_Type_Declaration then\n                Error_Msg_N\n-                 (\"\\possible interpretation\"\n-                   & \" (inherited, with implicit 'Access) #\", N);\n+                 (\"\\possible interpretation \"\n+                  & \"(inherited, with implicit 'Access) #\", N);\n             else\n                Error_Msg_N\n                  (\"\\possible interpretation (with implicit 'Access) #\", N);\n@@ -7513,8 +7506,8 @@ package body Sem_Ch4 is\n          elsif not Access_Formal and then Access_Actual then\n             if Nkind (Parent (Op)) = N_Full_Type_Declaration then\n                Error_Msg_N\n-                 (\"\\possible interpretation\"\n-                   & \" ( inherited, with implicit dereference) #\", N);\n+                 (\"\\possible interpretation \"\n+                  & \"( inherited, with implicit dereference) #\", N);\n             else\n                Error_Msg_N\n                  (\"\\possible interpretation (with implicit dereference) #\", N);\n@@ -7582,9 +7575,8 @@ package body Sem_Ch4 is\n             else\n                Call_Node :=\n                  Make_Function_Call (Loc,\n-                   Name => New_Copy (Subprog),\n+                   Name                   => New_Copy (Subprog),\n                    Parameter_Associations => Actuals);\n-\n             end if;\n \n          --  Before analysis, a function call appears as an indexed component\n@@ -7606,7 +7598,7 @@ package body Sem_Ch4 is\n \n             Call_Node :=\n                Make_Function_Call (Loc,\n-                 Name => New_Copy (Subprog),\n+                 Name                   => New_Copy (Subprog),\n                  Parameter_Associations => Actuals);\n \n          --  Parameterless call: Obj.F is rewritten as F (Obj)\n@@ -7616,7 +7608,7 @@ package body Sem_Ch4 is\n \n             Call_Node :=\n                Make_Function_Call (Loc,\n-                 Name => New_Copy (Subprog),\n+                 Name                   => New_Copy (Subprog),\n                  Parameter_Associations => New_List (Dummy));\n          end if;\n       end Transform_Object_Operation;\n@@ -7671,8 +7663,8 @@ package body Sem_Ch4 is\n             --  Find a non-hidden operation whose first parameter is of the\n             --  class-wide type, a subtype thereof, or an anonymous access\n             --  to same. If in an instance, the operation can be considered\n-            --  even if hidden (it may be hidden because the instantiation is\n-            --  expanded after the containing package has been analyzed).\n+            --  even if hidden (it may be hidden because the instantiation\n+            --  is expanded after the containing package has been analyzed).\n \n             while Present (Hom) loop\n                if Ekind_In (Hom, E_Procedure, E_Function)\n@@ -7683,12 +7675,12 @@ package body Sem_Ch4 is\n                    (Base_Type (Etype (First_Formal (Hom))) = Cls_Type\n                      or else\n                        (Is_Access_Type (Etype (First_Formal (Hom)))\n-                          and then\n-                            Ekind (Etype (First_Formal (Hom))) =\n-                              E_Anonymous_Access_Type\n-                          and then\n-                            Base_Type\n-                              (Designated_Type (Etype (First_Formal (Hom)))) =\n+                         and then\n+                           Ekind (Etype (First_Formal (Hom))) =\n+                             E_Anonymous_Access_Type\n+                         and then\n+                           Base_Type\n+                             (Designated_Type (Etype (First_Formal (Hom)))) =\n                                                                    Cls_Type))\n                then\n                   --  If the context is a procedure call, ignore functions\n@@ -7931,12 +7923,12 @@ package body Sem_Ch4 is\n          Matching_Op : Entity_Id := Empty;\n          Prim_Op_Ref : Node_Id   := Empty;\n \n-         Corr_Type   : Entity_Id := Empty;\n+         Corr_Type : Entity_Id := Empty;\n          --  If the prefix is a synchronized type, the controlling type of\n          --  the primitive operation is the corresponding record type, else\n          --  this is the object type itself.\n \n-         Success     : Boolean   := False;\n+         Success : Boolean   := False;\n \n          function Collect_Generic_Type_Ops (T : Entity_Id) return Elist_Id;\n          --  For tagged types the candidate interpretations are found in\n@@ -7946,6 +7938,7 @@ package body Sem_Ch4 is\n          --  part) because the type itself carries no primitive operations,\n          --  except for formal derived types that inherit the operations of\n          --  the parent and progenitors.\n+         --\n          --  If the context is a generic subprogram body, the generic formals\n          --  are visible by name, but are not in the entity list of the\n          --  subprogram because that list starts with the subprogram formals.\n@@ -8007,8 +8000,8 @@ package body Sem_Ch4 is\n                --  Scan the list of generic formals to find subprograms\n                --  that may have a first controlling formal of the type.\n \n-               if Nkind (Unit_Declaration_Node (Scope (T)))\n-                 = N_Generic_Subprogram_Declaration\n+               if Nkind (Unit_Declaration_Node (Scope (T))) =\n+                                         N_Generic_Subprogram_Declaration\n                then\n                   declare\n                      Decl : Node_Id;\n@@ -8143,10 +8136,11 @@ package body Sem_Ch4 is\n               and then Valid_First_Argument_Of (Prim_Op)\n               and then\n                 (Nkind (Call_Node) = N_Function_Call)\n-                   = (Ekind (Prim_Op) = E_Function)\n+                    =\n+                (Ekind (Prim_Op) = E_Function)\n             then\n                --  Ada 2005 (AI-251): If this primitive operation corresponds\n-               --  with an immediate ancestor interface there is no need to add\n+               --  to an immediate ancestor interface there is no need to add\n                --  it to the list of interpretations; the corresponding aliased\n                --  primitive is also in this list of primitive operations and\n                --  will be used instead.\n@@ -8289,8 +8283,8 @@ package body Sem_Ch4 is\n          if All_Errors_Mode then\n             Report_Error := True;\n             if Try_Primitive_Operation\n-                (Call_Node       => New_Call_Node,\n-                 Node_To_Replace => Node_To_Replace)\n+                 (Call_Node       => New_Call_Node,\n+                  Node_To_Replace => Node_To_Replace)\n \n               or else\n                 Try_Class_Wide_Operation"}, {"sha": "e03341c199b816bb16f08f271459b4b30c648258", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -28,8 +28,7 @@ package Sem_Ch6 is\n \n    type Conformance_Type is\n      (Type_Conformant, Mode_Conformant, Subtype_Conformant, Fully_Conformant);\n-   --  pragma Ordered (Conformance_Type);\n-   --  Why is above line commented out ???\n+   pragma Ordered (Conformance_Type);\n    --  Conformance type used in conformance checks between specs and bodies,\n    --  and for overriding. The literals match the RM definitions of the\n    --  corresponding terms. This is an ordered type, since each conformance"}, {"sha": "f8258af8e3dc1af33bd43705cb605f0d3534b1a2", "filename": "gcc/ada/vms_cmds.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fvms_cmds.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fvms_cmds.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_cmds.ads?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,4 +50,7 @@ package VMS_Cmds is\n       Test,\n       Xref,\n       Undefined);\n+\n+   subtype Real_Command_Type is Command_Type range Bind .. Xref;\n+   --  All real command types (excludes only Undefined).\n end VMS_Cmds;"}, {"sha": "bba701505df6e29a4c84e63b7c13d4191880748b", "filename": "gcc/ada/vms_conv.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fvms_conv.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2/gcc%2Fada%2Fvms_conv.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_conv.ads?ref=8b4230c823ba1106ebd6bbfcfdea98fc8bbd16d2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2003-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -104,8 +104,6 @@ package VMS_Conv is\n       Pp    => Pretty);\n    --  Mapping of alternate commands to commands\n \n-   subtype Real_Command_Type is Command_Type range Bind .. Xref;\n-\n    type Command_Entry is record\n       Cname : String_Ptr;\n       --  Command name for GNAT xxx command"}]}