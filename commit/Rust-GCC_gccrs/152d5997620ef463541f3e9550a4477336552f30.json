{"sha": "152d5997620ef463541f3e9550a4477336552f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyZDU5OTc2MjBlZjQ2MzU0MWYzZTk1NTBhNDQ3NzMzNjU1MmYzMA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-05-14T19:16:36Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-05-14T19:16:36Z"}, "message": "c4x.md (decrement_and_branch_on_count): Disabled.\n\n\t* config/c4x/c4x.md (decrement_and_branch_on_count): Disabled.\n\t(doloop_begin, doloop_end): New patterns.\n\t(*rptb_init): Added extra operands.\n\nFrom-SVN: r26939", "tree": {"sha": "e012cadbf56e55aacbacb899584688ce91011c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e012cadbf56e55aacbacb899584688ce91011c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152d5997620ef463541f3e9550a4477336552f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152d5997620ef463541f3e9550a4477336552f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152d5997620ef463541f3e9550a4477336552f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152d5997620ef463541f3e9550a4477336552f30/comments", "author": null, "committer": null, "parents": [{"sha": "a017abecb9bf9e5fc508abe2eeca2cbdb6033102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a017abecb9bf9e5fc508abe2eeca2cbdb6033102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a017abecb9bf9e5fc508abe2eeca2cbdb6033102"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "461524bae615834d1a57d7f96492823b7d74467c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152d5997620ef463541f3e9550a4477336552f30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152d5997620ef463541f3e9550a4477336552f30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=152d5997620ef463541f3e9550a4477336552f30", "patch": "@@ -1,3 +1,9 @@\n+Sat May 15 14:09:08 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (decrement_and_branch_on_count): Disabled.\n+\t(doloop_begin, doloop_end): New patterns.\n+\t(*rptb_init): Added extra operands.\n+\n Fri May 14 21:31:36 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md (*umulqi3_highpart_clobber): Fix operand 2"}, {"sha": "1b7bd2b287b18714a1874fbac5724aca3825fe68", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152d5997620ef463541f3e9550a4477336552f30/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152d5997620ef463541f3e9550a4477336552f30/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=152d5997620ef463541f3e9550a4477336552f30", "patch": "@@ -4788,13 +4788,28 @@\n ; say that RS and RE are loaded.\n (define_insn \"*rptb_init\"\n   [(unspec[(match_operand:QI 0 \"register_operand\" \"va\")] 22)\n+   (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n    (clobber (reg:QI 25))\n    (clobber (reg:QI 26))]\n   \"\"\n   \"\"\n   [(set_attr \"type\" \"repeat\")])\n \n \n+(define_expand \"doloop_begin\"\n+  [(parallel [(unspec[(match_operand:QI 0 \"register_operand\" \"va\")] 22)\n+              (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n+              (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n+              (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n+              (clobber (reg:QI 25))\n+              (clobber (reg:QI 26))])]\n+  \"\"\n+  \"if (INTVAL (operands[3]) > 1 || ! TARGET_RPTB)\n+     FAIL;\")\n+\n+\n ; The RS (25) and RE (26) registers must be unviolate from the top of the loop\n ; to here.\n (define_insn \"rptb_end\"\n@@ -4806,6 +4821,9 @@\n    (set (match_dup 0)\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n+   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 4 \"const_int_operand\" \"\"))\n    (use (reg:QI 25))\n    (use (reg:QI 26))\n    (clobber (reg:CC_NOOV 21))]\n@@ -4824,8 +4842,12 @@\n   \"\n   [(set_attr \"type\" \"repeat,db,jmpc,jmpc,jmpc\")])\n \n-\n-(define_expand \"decrement_and_branch_on_count\"\n+; operand 0 is the loop count register\n+; operand 1 is the label to jump to at the top of the loop\n+; operand 2 is the number of loop iterations or 0 if it is unknown\n+; operand 3 is the maximum number of loop iterations\n+; operand 4 is the number of levels of enclosed loops\n+(define_expand \"doloop_end\"\n   [(parallel [(set (pc)\n                    (if_then_else (ge (match_operand:QI 0 \"register_operand\" \"\")\n                                      (const_int 0))\n@@ -4834,20 +4856,45 @@\n               (set (match_dup 0)\n \t\t   (plus:QI (match_dup 0)\n \t\t\t    (const_int -1)))\n+              (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n+              (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n+              (use (match_operand:QI 4 \"const_int_operand\" \"\"))\n               (use (reg:QI 25))\n               (use (reg:QI 26))\n               (clobber (reg:CC_NOOV 21))])]\n   \"\"\n-  \"if (0)\n+  \"if (! TARGET_LOOP_UNSIGNED \n+       && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > (1U << 31))\n+     FAIL;\n+   if (INTVAL (operands[4]) > 1 || ! TARGET_RPTB)\n      {\n         /* The C30 maximum iteration count for DB is 2^24.  */\n-\tif (!TARGET_DB)\n-            FAIL;\n+\tif (! TARGET_DB)\n+          FAIL;\n         emit_insn (gen_decrement_and_branch_until_zero (operands[0],\n                                                         operands[1]));\n \tDONE;\n      }\")\n \n+; The current low overhead looping code is naff and is not failsafe\n+; If you want RTPB instructions to be generated, apply the patches\n+; from www.elec.canterbury.ac.nz/c4x.  This will utilise the\n+; doloop_begin and doloop_end patterns in this MD.\n+(define_expand \"decrement_and_branch_on_count\"\n+  [(parallel [(set (pc)\n+                   (if_then_else (ge (match_operand:QI 0 \"register_operand\" \"\")\n+                                     (const_int 0))\n+                                 (label_ref (match_operand 1 \"\" \"\"))\n+                                 (pc)))\n+              (set (match_dup 0)\n+\t\t   (plus:QI (match_dup 0)\n+\t\t\t    (const_int -1)))\n+              (use (reg:QI 25))\n+              (use (reg:QI 26))\n+              (clobber (reg:CC_NOOV 21))])]\n+  \"0\"\n+  \"\")\n+\n (define_expand \"movstrqi_small2\"\n   [(parallel [(set (mem:BLK (match_operand:BLK 0 \"src_operand\" \"\"))\n                    (mem:BLK (match_operand:BLK 1 \"src_operand\" \"\")))"}]}