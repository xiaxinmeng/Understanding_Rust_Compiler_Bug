{"sha": "2a0f6c61b4db19535c632be68bddad74b6adb6cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwZjZjNjFiNGRiMTk1MzVjNjMyYmU2OGJkZGFkNzRiNmFkYjZjZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-15T14:09:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-15T16:22:49Z"}, "message": "libstdc++: Fix weakly_incrementable to allow __int128 (PR 93267)\n\nThe __iota_diff_t alias can be the type __int128, but that does not\nsatisfy the signed_integral and __is_signed_integer_like concepts when\n__STRICT_ANSI__ is defined (which is true for -std=c++2a).\n\nBecause weakly_incrementable is defined in terms of signed_integral, it\nis not satisfied by __int128, which means iota_view's iterator doesn't\nalways satisfy input_or_output_iterator and so iota_view is not always a\nrange.\n\nThe solution is to define __max_size_type and __max_diff_type using\n__int128, so that __is_signed_integer_like allows __int128, and then\nmake weakly_incrementable use __is_signed_integer_like instead of\nsigned_integral.\n\n\tPR libstdc++/93267\n\t* include/bits/iterator_concepts.h (__max_diff_type, __max_size_type):\n\tMove here from <bits/range_access.h> and define using __int128 when\n\tavailable.\n\t(__is_integer_like, __is_signed_integer_like): Move here from\n\t<bits/range_access.h>.\n\t(weakly_incrementable): Use __is_signed_integer_like.\n\t* include/bits/range_access.h (__max_diff_type, __max_size_type)\n\t(__is_integer_like, __is_signed_integer_like): Move to\n\t<bits/iterator_concepts.h>.\n\t(__make_unsigned_like_t): Move here from <ranges>.\n\t* include/std/ranges (__make_unsigned_like_t): Move to\n\t<bits/range_access.h>.\n\t(iota_view): Replace using-directive with using-declarations.\n\t* testsuite/std/ranges/iota/93267.cc: New test.\n\t* testsuite/std/ranges/iota_view.cc: Move to new 'iota' sub-directory.", "tree": {"sha": "a8f371bea08a832525b8f5e3451c92aa5b7e02d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8f371bea08a832525b8f5e3451c92aa5b7e02d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a0f6c61b4db19535c632be68bddad74b6adb6cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0f6c61b4db19535c632be68bddad74b6adb6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0f6c61b4db19535c632be68bddad74b6adb6cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0f6c61b4db19535c632be68bddad74b6adb6cf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea1966e88ec3bd22228bb4048c8b4388da89b15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1966e88ec3bd22228bb4048c8b4388da89b15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1966e88ec3bd22228bb4048c8b4388da89b15f"}], "stats": {"total": 104, "additions": 84, "deletions": 20}, "files": [{"sha": "29414820e12161366babd9f8ec1b5301e34dec7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a0f6c61b4db19535c632be68bddad74b6adb6cf", "patch": "@@ -1,3 +1,22 @@\n+2020-01-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93267\n+\t* include/bits/iterator_concepts.h (__max_diff_type, __max_size_type):\n+\tMove here from <bits/range_access.h> and define using __int128 when\n+\tavailable.\n+\t(__is_integer_like, __is_signed_integer_like): Move here from\n+\t<bits/range_access.h>.\n+\t(weakly_incrementable): Use __is_signed_integer_like.\n+\t* include/bits/range_access.h (__max_diff_type, __max_size_type)\n+\t(__is_integer_like, __is_signed_integer_like): Move to\n+\t<bits/iterator_concepts.h>.\n+\t(__make_unsigned_like_t): Move here from <ranges>.\n+\t* include/std/ranges (__make_unsigned_like_t): Move to\n+\t<bits/range_access.h>.\n+\t(iota_view): Replace using-directive with using-declarations.\n+\t* testsuite/std/ranges/iota/93267.cc: New test.\n+\t* testsuite/std/ranges/iota_view.cc: Move to new 'iota' sub-directory.\n+\n 2020-01-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/93244"}, {"sha": "bf5815972299ea53a6e6fc95f53eb510a9d245fd", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=2a0f6c61b4db19535c632be68bddad74b6adb6cf", "patch": "@@ -492,14 +492,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  = std::forward<_Tp>(__t);\n       };\n \n+  namespace ranges::__detail\n+  {\n+#if __SIZEOF_INT128__\n+    using __max_diff_type = __int128;\n+    using __max_size_type = unsigned __int128;\n+#else\n+    using __max_diff_type = long long;\n+    using __max_size_type = unsigned long long;\n+#endif\n+\n+    template<typename _Tp>\n+      concept __is_integer_like = integral<_Tp>\n+\t|| same_as<_Tp, __max_diff_type> || same_as<_Tp, __max_size_type>;\n+\n+    template<typename _Tp>\n+      concept __is_signed_integer_like = signed_integral<_Tp>\n+\t|| same_as<_Tp, __max_diff_type>;\n+\n+  } // namespace ranges::__detail\n+\n+  namespace __detail { using ranges::__detail::__is_signed_integer_like; }\n+\n   /// Requirements on types that can be incremented with ++.\n   template<typename _Iter>\n     concept weakly_incrementable = default_initializable<_Iter>\n       && movable<_Iter>\n       && requires(_Iter __i)\n       {\n \ttypename iter_difference_t<_Iter>;\n-\trequires signed_integral<iter_difference_t<_Iter>>;\n+\trequires __detail::__is_signed_integer_like<iter_difference_t<_Iter>>;\n \t{ ++__i } -> same_as<_Iter&>;\n \t__i++;\n       };"}, {"sha": "8b546a588405a500c96e01f6ab85b228e7fd6ded", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=2a0f6c61b4db19535c632be68bddad74b6adb6cf", "patch": "@@ -347,22 +347,15 @@ namespace ranges\n \n   namespace __detail\n   {\n-    using __max_diff_type = long long;\n-    using __max_size_type = unsigned long long;\n-\n-    template<typename _Tp>\n-      concept __is_integer_like = integral<_Tp>\n-\t|| same_as<_Tp, __max_diff_type> || same_as<_Tp, __max_size_type>;\n-\n-    template<typename _Tp>\n-      concept __is_signed_integer_like = signed_integral<_Tp>\n-\t|| same_as<_Tp, __max_diff_type>;\n-\n     template<integral _Tp>\n       constexpr make_unsigned_t<_Tp>\n       __to_unsigned_like(_Tp __t) noexcept\n       { return __t; }\n \n+    template<typename _Tp, bool _MaxDiff = same_as<_Tp, __max_diff_type>>\n+      using __make_unsigned_like_t\n+\t= conditional_t<_MaxDiff, __max_size_type, make_unsigned_t<_Tp>>;\n+\n     // Part of the constraints of ranges::safe_range\n     template<typename _Tp>\n       concept __maybe_safe_range"}, {"sha": "ea558c76c9dbdf718e7e833f5b42831a93ad2787", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=2a0f6c61b4db19535c632be68bddad74b6adb6cf", "patch": "@@ -244,10 +244,6 @@ namespace ranges\n \t= !range<_Tp> && __pair_like<_Tp>\n \t&& sentinel_for<tuple_element_t<1, _Tp>, tuple_element_t<0, _Tp>>;\n \n-    template<typename _Tp, bool _MaxDiff = same_as<_Tp, __max_diff_type>>\n-      using __make_unsigned_like_t\n-\t= conditional_t<_MaxDiff, __max_size_type, make_unsigned_t<_Tp>>;\n-\n   } // namespace __detail\n \n   enum class subrange_kind : bool { unsized, sized };\n@@ -717,7 +713,8 @@ namespace ranges\n \tconstexpr _Iterator&\n \toperator+=(difference_type __n) requires __detail::__advanceable<_Winc>\n \t{\n-\t  using namespace __detail;\n+\t  using __detail::__is_integer_like;\n+\t  using __detail::__is_signed_integer_like;\n \t  if constexpr (__is_integer_like<_Winc>\n \t      && !__is_signed_integer_like<_Winc>)\n \t    {\n@@ -734,7 +731,8 @@ namespace ranges\n \tconstexpr _Iterator&\n \toperator-=(difference_type __n) requires __detail::__advanceable<_Winc>\n \t{\n-\t  using namespace __detail;\n+\t  using __detail::__is_integer_like;\n+\t  using __detail::__is_signed_integer_like;\n \t  if constexpr (__is_integer_like<_Winc>\n \t      && !__is_signed_integer_like<_Winc>)\n \t    {\n@@ -804,7 +802,8 @@ namespace ranges\n \toperator-(const _Iterator& __x, const _Iterator& __y)\n \t  requires __detail::__advanceable<_Winc>\n \t{\n-\t  using namespace __detail;\n+\t  using __detail::__is_integer_like;\n+\t  using __detail::__is_signed_integer_like;\n \t  using _Dt = difference_type;\n \t  if constexpr (__is_integer_like<_Winc>)\n \t    {\n@@ -892,7 +891,8 @@ namespace ranges\n       || (integral<_Winc> && integral<_Bound>)\n       || sized_sentinel_for<_Bound, _Winc>\n       {\n-\tusing namespace __detail;\n+\tusing __detail::__is_integer_like;\n+\tusing __detail::__to_unsigned_like;\n \tif constexpr (__is_integer_like<_Winc> && __is_integer_like<_Bound>)\n \t  return (_M_value < 0)\n \t    ? ((_M_bound < 0)"}, {"sha": "39b3c771b5441be70b926ec947fe68a3c46d733a", "filename": "libstdc++-v3/testsuite/std/ranges/iota/93267.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F93267.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F93267.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F93267.cc?ref=2a0f6c61b4db19535c632be68bddad74b6adb6cf", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/93267\n+  std::ranges::iota_view<long long, int> i(0, 3);\n+  static_assert( std::weakly_incrementable<decltype(i.begin())> );\n+  (void) std::ranges::begin(i);\n+}"}, {"sha": "798e745d3f0d8282fb725ab31ce260aea8e08f5c", "filename": "libstdc++-v3/testsuite/std/ranges/iota/iota_view.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0f6c61b4db19535c632be68bddad74b6adb6cf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc?ref=2a0f6c61b4db19535c632be68bddad74b6adb6cf", "previous_filename": "libstdc++-v3/testsuite/std/ranges/iota_view.cc"}]}