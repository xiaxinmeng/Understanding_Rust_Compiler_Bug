{"sha": "41c1b007f1e3a6fd2be2fb67ee219f8652d140c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFjMWIwMDdmMWUzYTZmZDJiZTJmYjY3ZWUyMTlmODY1MmQxNDBjOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-06-17T09:32:59Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-06-17T09:32:59Z"}, "message": "loop.c (strength_reduce): When doing biv->giv conversion, fix up reg_biv_class.\n\n\t* loop.c (strength_reduce): When doing biv->giv conversion, fix up\n\treg_biv_class.\n\t(recombine_givs): Set ix field after sorting.\n\nFrom-SVN: r27565", "tree": {"sha": "43da2b7ccc8385436279ad0396c9113ea376c01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43da2b7ccc8385436279ad0396c9113ea376c01a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9/comments", "author": null, "committer": null, "parents": [{"sha": "227d6ce040d7ac43962ab3610f50cbda3dbed544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227d6ce040d7ac43962ab3610f50cbda3dbed544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/227d6ce040d7ac43962ab3610f50cbda3dbed544"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "ca79f7c6c0adef95ea7a54f45678fa49fdedcd8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41c1b007f1e3a6fd2be2fb67ee219f8652d140c9", "patch": "@@ -1,3 +1,10 @@\n+Thu Jun 17 17:22:07 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* loop.c (strength_reduce): When doing biv->giv conversion, fix up\n+\treg_biv_class.\n+\n+\t(recombine_givs): Set ix field after sorting.\n+\n Thu Jun 17 02:54:30 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* emit-rtl.c (operand_subword): Tighten checks for when it is safe"}, {"sha": "6f0637fcf2024cd15daf51319ea7594ceb0e74f3", "filename": "gcc/loop.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c1b007f1e3a6fd2be2fb67ee219f8652d140c9/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=41c1b007f1e3a6fd2be2fb67ee219f8652d140c9", "patch": "@@ -4058,6 +4058,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\tfprintf (loop_dump_stream, \"is giv of biv %d\\n\", bl2->regno);\n \t      /* Let this giv be discovered by the generic code.  */\n \t      REG_IV_TYPE (bl->regno) = UNKNOWN_INDUCT;\n+\t      reg_biv_class[bl->regno] = NULL_PTR;\n \t      /* We can get better optimization if we can move the giv setting\n \t\t before the first giv use.  */\n \t      if (dominator\n@@ -4109,7 +4110,13 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t}\n \t      /* Remove this biv from the chain.  */\n \t      if (bl->next)\n-\t\t*bl = *bl->next;\n+\t\t{\n+\t\t  /* We move the following giv from *bl->next into *bl.\n+\t\t     We have to update reg_biv_class for that moved biv\n+\t\t     to point to its new address.  */\n+\t\t  *bl = *bl->next;\n+\t\t  reg_biv_class[bl->regno] = bl;\n+\t\t}\n \t      else\n \t\t{\n \t\t  *backbl = 0;\n@@ -7190,16 +7197,18 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n       for (p = v->insn; INSN_UID (p) >= max_uid_for_loop; )\n \tp = PREV_INSN (p);\n       stats[i].start_luid = INSN_LUID (p);\n-      v->ix = i;\n       i++;\n     }\n \n   qsort (stats, giv_count, sizeof(*stats), cmp_recombine_givs_stats);\n \n-  /* Do the actual most-recently-used recombination.  */\n+  /* Set up the ix field for each giv in stats to name\n+     the corresponding index into stats, and\n+     do the actual most-recently-used recombination.  */\n   for (last_giv = 0, i = giv_count - 1; i >= 0; i--)\n     {\n       v = giv_array[stats[i].giv_number];\n+      v->ix = i;\n       if (v->same)\n \t{\n \t  struct induction *old_same = v->same;"}]}