{"sha": "52c2897732e366fd1d63140b4f10cce41c5f0e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjMjg5NzczMmUzNjZmZDFkNjMxNDBiNGYxMGNjZTQxYzVmMGUwYw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-04-12T09:32:50Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-04-12T09:32:50Z"}, "message": "Makefile.am: Make a libtool convenience library.\n\nlibffi:\n\t* Makefile.am: Make a libtool convenience library.\n\t* Makefile.in: Rebuilt.\n\nlibjava:\n\t* java/io/File.java (normalizePath): New private method.\n\t(File (String)): Use normalizePath().\n\t(File (String, String)): Likewise.\n\n\t* Makefile.am (libffi_files): Removed.\n\t(libgcj.la): Link libffi as a convenience library instead of\n\trefering to its object files directly.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r41298", "tree": {"sha": "127d25971ad8807e7f3fe74108e3b8b1196b86e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/127d25971ad8807e7f3fe74108e3b8b1196b86e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c2897732e366fd1d63140b4f10cce41c5f0e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c2897732e366fd1d63140b4f10cce41c5f0e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c2897732e366fd1d63140b4f10cce41c5f0e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c2897732e366fd1d63140b4f10cce41c5f0e0c/comments", "author": null, "committer": null, "parents": [{"sha": "f847167e3d5c4864f64bd950a6a0d478a6730def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f847167e3d5c4864f64bd950a6a0d478a6730def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f847167e3d5c4864f64bd950a6a0d478a6730def"}], "stats": {"total": 265, "additions": 191, "deletions": 74}, "files": [{"sha": "e6d5cc1a95b1eb1aac421900a2e3a382cf6491b5", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=52c2897732e366fd1d63140b4f10cce41c5f0e0c", "patch": "@@ -1,3 +1,8 @@\n+2001-04-12  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* Makefile.am: Make a libtool convenience library.\n+\t* Makefile.in: Rebuilt.\n+\n 2001-03-29  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* configure.in: Use different syntax for subdirectory creation."}, {"sha": "ad55c5eb64d92598d41b4d577033e3c6511759b9", "filename": "libffi/Makefile.am", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libffi%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libffi%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FMakefile.am?ref=52c2897732e366fd1d63140b4f10cce41c5f0e0c", "patch": "@@ -80,6 +80,7 @@ toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n endif\n \n toolexeclib_LTLIBRARIES = libffi.la\n+noinst_LTLIBRARIES = libfficonvenience.la\n \n noinst_PROGRAMS = ffitest\n \n@@ -104,33 +105,43 @@ libffi_la_common_SOURCES = src/debug.c src/prep_cif.c src/types.c \\\n \t\tsrc/raw_api.c src/java_raw_api.c\n if MIPS_GCC\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_GCC)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_GCC)\n endif\n if MIPS_SGI\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_SGI)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_SGI)\n endif\n if X86\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_X86)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_X86)\n endif\n if X86_WIN32\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_X86_WIN32)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_X86_WIN32)\n endif\n if SPARC\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_SPARC)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_SPARC)\n endif\n if ALPHA\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_ALPHA)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_ALPHA)\n endif\n if IA64\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_IA64)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_IA64)\n endif\n if M68K\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_M68K)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_M68K)\n endif\n if POWERPC\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_POWERPC)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_POWERPC)\n endif\n if ARM\n libffi_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_ARM)\n+libfficonvenience_la_SOURCES = $(libffi_la_common_SOURCES) $(TARGET_SRC_ARM)\n endif\n \n AM_CFLAGS = -fexceptions"}, {"sha": "372be2b90c1804da97c2806a09e6032eeaed2941", "filename": "libffi/Makefile.in", "status": "modified", "additions": 74, "deletions": 12, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libffi%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libffi%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FMakefile.in?ref=52c2897732e366fd1d63140b4f10cce41c5f0e0c", "patch": "@@ -151,6 +151,7 @@ MULTICLEAN = true\n @USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = libffi.la\n+noinst_LTLIBRARIES = libfficonvenience.la\n \n noinst_PROGRAMS = ffitest\n \n@@ -182,6 +183,16 @@ libffi_la_common_SOURCES = src/debug.c src/prep_cif.c src/types.c \\\n @M68K_TRUE@libffi_la_SOURCES = @M68K_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_M68K)\n @POWERPC_TRUE@libffi_la_SOURCES = @POWERPC_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_POWERPC)\n @ARM_TRUE@libffi_la_SOURCES = @ARM_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_ARM)\n+@MIPS_GCC_TRUE@libfficonvenience_la_SOURCES = @MIPS_GCC_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_GCC)\n+@MIPS_SGI_TRUE@libfficonvenience_la_SOURCES = @MIPS_SGI_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_MIPS_SGI)\n+@X86_TRUE@libfficonvenience_la_SOURCES = @X86_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_X86)\n+@X86_WIN32_TRUE@libfficonvenience_la_SOURCES = @X86_WIN32_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_X86_WIN32)\n+@SPARC_TRUE@libfficonvenience_la_SOURCES = @SPARC_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_SPARC)\n+@ALPHA_TRUE@libfficonvenience_la_SOURCES = @ALPHA_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_ALPHA)\n+@IA64_TRUE@libfficonvenience_la_SOURCES = @IA64_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_IA64)\n+@M68K_TRUE@libfficonvenience_la_SOURCES = @M68K_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_M68K)\n+@POWERPC_TRUE@libfficonvenience_la_SOURCES = @POWERPC_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_POWERPC)\n+@ARM_TRUE@libfficonvenience_la_SOURCES = @ARM_TRUE@$(libffi_la_common_SOURCES) $(TARGET_SRC_ARM)\n \n AM_CFLAGS = -fexceptions\n \n@@ -192,13 +203,48 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = fficonfig.h\n CONFIG_CLEAN_FILES = \n-LTLIBRARIES =  $(toolexeclib_LTLIBRARIES)\n+LTLIBRARIES =  $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n \n \n DEFS = @DEFS@ -I. -I$(srcdir) -I.\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n+libfficonvenience_la_LDFLAGS = \n+libfficonvenience_la_LIBADD = \n+@SPARC_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@SPARC_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n+@SPARC_TRUE@src/sparc/ffi.lo src/sparc/v8.lo src/sparc/v9.lo\n+@MIPS_SGI_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo \\\n+@MIPS_SGI_TRUE@src/prep_cif.lo src/types.lo src/raw_api.lo \\\n+@MIPS_SGI_TRUE@src/java_raw_api.lo src/mips/ffi.lo src/mips/o32.lo \\\n+@MIPS_SGI_TRUE@src/mips/n32.lo\n+@IA64_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@IA64_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n+@IA64_TRUE@src/ia64/ffi.lo src/ia64/unix.lo\n+@MIPS_GCC_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo \\\n+@MIPS_GCC_TRUE@src/prep_cif.lo src/types.lo src/raw_api.lo \\\n+@MIPS_GCC_TRUE@src/java_raw_api.lo src/mips/ffi.lo src/mips/o32.lo \\\n+@MIPS_GCC_TRUE@src/mips/n32.lo\n+@M68K_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@M68K_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n+@M68K_TRUE@src/m68k/ffi.lo src/m68k/sysv.lo\n+@ALPHA_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@ALPHA_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n+@ALPHA_TRUE@src/alpha/ffi.lo src/alpha/osf.lo\n+@X86_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@X86_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n+@X86_TRUE@src/x86/ffi.lo src/x86/sysv.lo\n+@ARM_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n+@ARM_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n+@ARM_TRUE@src/arm/sysv.lo src/arm/ffi.lo\n+@POWERPC_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo \\\n+@POWERPC_TRUE@src/prep_cif.lo src/types.lo src/raw_api.lo \\\n+@POWERPC_TRUE@src/java_raw_api.lo src/powerpc/ffi.lo \\\n+@POWERPC_TRUE@src/powerpc/sysv.lo src/powerpc/ppc_closure.lo\n+@X86_WIN32_TRUE@libfficonvenience_la_OBJECTS =  src/debug.lo \\\n+@X86_WIN32_TRUE@src/prep_cif.lo src/types.lo src/raw_api.lo \\\n+@X86_WIN32_TRUE@src/java_raw_api.lo src/x86/ffi.lo src/x86/win32.lo\n libffi_la_LIBADD = \n @SPARC_TRUE@libffi_la_OBJECTS =  src/debug.lo src/prep_cif.lo \\\n @SPARC_TRUE@src/types.lo src/raw_api.lo src/java_raw_api.lo \\\n@@ -250,8 +296,8 @@ DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n TAR = gtar\n GZIP_ENV = --best\n-SOURCES = $(libffi_la_SOURCES) $(ffitest_SOURCES)\n-OBJECTS = $(libffi_la_OBJECTS) $(ffitest_OBJECTS)\n+SOURCES = $(libfficonvenience_la_SOURCES) $(libffi_la_SOURCES) $(ffitest_SOURCES)\n+OBJECTS = $(libfficonvenience_la_OBJECTS) $(libffi_la_OBJECTS) $(ffitest_OBJECTS)\n \n all: all-redirect\n .SUFFIXES:\n@@ -299,6 +345,15 @@ distclean-hdr:\n \n maintainer-clean-hdr:\n \n+mostlyclean-noinstLTLIBRARIES:\n+\n+clean-noinstLTLIBRARIES:\n+\t-test -z \"$(noinst_LTLIBRARIES)\" || rm -f $(noinst_LTLIBRARIES)\n+\n+distclean-noinstLTLIBRARIES:\n+\n+maintainer-clean-noinstLTLIBRARIES:\n+\n mostlyclean-toolexeclibLTLIBRARIES:\n \n clean-toolexeclibLTLIBRARIES:\n@@ -350,6 +405,9 @@ distclean-libtool:\n \n maintainer-clean-libtool:\n \n+libfficonvenience.la: $(libfficonvenience_la_OBJECTS) $(libfficonvenience_la_DEPENDENCIES)\n+\t$(LINK)  $(libfficonvenience_la_LDFLAGS) $(libfficonvenience_la_OBJECTS) $(libfficonvenience_la_LIBADD) $(LIBS)\n+\n libffi.la: $(libffi_la_OBJECTS) $(libffi_la_DEPENDENCIES)\n \t$(LINK) -rpath $(toolexeclibdir) $(libffi_la_LDFLAGS) $(libffi_la_OBJECTS) $(libffi_la_LIBADD) $(LIBS)\n \n@@ -559,29 +617,31 @@ distclean-generic:\n \t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-hdr mostlyclean-toolexeclibLTLIBRARIES \\\n-\t\tmostlyclean-compile mostlyclean-libtool \\\n-\t\tmostlyclean-noinstPROGRAMS mostlyclean-tags \\\n-\t\tmostlyclean-generic\n+mostlyclean-am:  mostlyclean-hdr mostlyclean-noinstLTLIBRARIES \\\n+\t\tmostlyclean-toolexeclibLTLIBRARIES mostlyclean-compile \\\n+\t\tmostlyclean-libtool mostlyclean-noinstPROGRAMS \\\n+\t\tmostlyclean-tags mostlyclean-generic\n \n mostlyclean: mostlyclean-recursive\n \n-clean-am:  clean-hdr clean-toolexeclibLTLIBRARIES clean-compile \\\n+clean-am:  clean-hdr clean-noinstLTLIBRARIES \\\n+\t\tclean-toolexeclibLTLIBRARIES clean-compile \\\n \t\tclean-libtool clean-noinstPROGRAMS clean-tags \\\n \t\tclean-generic mostlyclean-am\n \n clean: clean-recursive\n \n-distclean-am:  distclean-hdr distclean-toolexeclibLTLIBRARIES \\\n-\t\tdistclean-compile distclean-libtool \\\n-\t\tdistclean-noinstPROGRAMS distclean-tags \\\n-\t\tdistclean-generic clean-am\n+distclean-am:  distclean-hdr distclean-noinstLTLIBRARIES \\\n+\t\tdistclean-toolexeclibLTLIBRARIES distclean-compile \\\n+\t\tdistclean-libtool distclean-noinstPROGRAMS \\\n+\t\tdistclean-tags distclean-generic clean-am\n \t-rm -f libtool\n \n distclean: distclean-recursive\n \t-rm -f config.status\n \n maintainer-clean-am:  maintainer-clean-hdr \\\n+\t\tmaintainer-clean-noinstLTLIBRARIES \\\n \t\tmaintainer-clean-toolexeclibLTLIBRARIES \\\n \t\tmaintainer-clean-compile maintainer-clean-libtool \\\n \t\tmaintainer-clean-noinstPROGRAMS maintainer-clean-tags \\\n@@ -593,6 +653,8 @@ maintainer-clean: maintainer-clean-recursive\n \t-rm -f config.status\n \n .PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \\\n+mostlyclean-noinstLTLIBRARIES distclean-noinstLTLIBRARIES \\\n+clean-noinstLTLIBRARIES maintainer-clean-noinstLTLIBRARIES \\\n mostlyclean-toolexeclibLTLIBRARIES distclean-toolexeclibLTLIBRARIES \\\n clean-toolexeclibLTLIBRARIES maintainer-clean-toolexeclibLTLIBRARIES \\\n uninstall-toolexeclibLTLIBRARIES install-toolexeclibLTLIBRARIES \\"}, {"sha": "02c1acb9c2b66b1930b13436c9ed7645a7a6132c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=52c2897732e366fd1d63140b4f10cce41c5f0e0c", "patch": "@@ -1,3 +1,14 @@\n+2001-04-12  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/io/File.java (normalizePath): New private method. \n+\t(File (String)): Use normalizePath().\n+\t(File (String, String)): Likewise.\n+\n+\t* Makefile.am (libffi_files): Removed.\n+\t(libgcj.la): Link libffi as a convenience library instead of \n+\trefering to its object files directly.\n+\t* Makefile.in: Rebuilt.\n+\n 2001-04-08  Per Bothner  <per@bothner.com>\n \n \t* java/lang/natString.cc (_Jv_NewStringUtf8Const):  Register finalizer."}, {"sha": "c6d7ca28b110c8fd16dab31cfd5321c5a4efb9dc", "filename": "libjava/Makefile.am", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=52c2897732e366fd1d63140b4f10cce41c5f0e0c", "patch": "@@ -128,9 +128,6 @@ javao_files = $(java_source_files:.java=.lo) \\\n \t$(built_java_source_files:.java=.lo)\n x_javao_files = $(x_java_source_files:.java=.lo)\n \n-## Extract the libffi object file names.\n-libffi_files = `find ../libffi/ \\-name '*.lo'`\n-\n libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n \tresolve.cc defineclass.cc interpret.cc name-finder.cc \\\n \t$(nat_source_files)\n@@ -140,11 +137,10 @@ libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \\\n \t$(c_files) $(GCOBJS) $(THREADOBJS) $(LIBLTDL)\n \n libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \\\n-\t$(THREADOBJS) $(libffi_files)\n+\t$(THREADOBJS)\n # Include THREADLIBS here to ensure that the correct version of\n # certain linuxthread functions get linked:\n-libgcj_la_LDFLAGS = -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n-\t-rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \\\n+libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \\\n ## The mysterious backslash is consumed by make.\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n libgcj_la_LINK = $(LIBLINK)\n@@ -154,7 +150,6 @@ EXTRA_libgcjx_la_SOURCES = $(x_java_source_files)\n libgcjx_la_DEPENDENCIES = libgcj.jar $(x_javao_files)\n libgcjx_la_LIBADD = $(x_javao_files)\n libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@ \\\n-        -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n         -rpath $(toolexeclibdir) \\\n ## The mysterious backslash is consumed by make.\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n@@ -264,13 +259,16 @@ $(javao_files) $(x_javao_files): %.lo: %.java\n libgcj.la: $(libgcj_la_OBJECTS) $(libgcj_la_DEPENDENCIES)\n \t@echo $(libgcj_la_OBJECTS) > libgcj.objectlist;\n \t@echo $(libgcj_la_LIBADD) >> libgcj.objectlist;\n-\t$(libgcj_la_LINK) -objectlist libgcj.objectlist -rpath $(toolexeclibdir) $(libgcj_la_LDFLAGS) $(LIBS)\n+\t$(libgcj_la_LINK) -objectlist libgcj.objectlist \\\n+\t../libstdc++-v3/libsupc++/libsupc++convenience.la \\\n+\t../libffi/libfficonvenience.la \\\n+\t-rpath $(toolexeclibdir) $(libgcj_la_LDFLAGS) $(LIBS)\n \n libgcjx.la: $(libgcjx_la_OBJECTS) $(libgcjx_la_DEPENDENCIES)\n \t@echo $(libgcjx_la_OBJECTS) > libgcjx.objectlist;\n \t@echo $(libgcjx_la_LIBADD) >> libgcjx.objectlist;\n-\t$(libgcjx_la_LINK) -objectlist libgcjx.objectlist -rpath $(toolexeclibdir) $(libgcjx_la_LDFLAGS) $(LIBS)\n-\n+\t$(libgcjx_la_LINK) -objectlist libgcjx.objectlist \\\n+\t-rpath $(toolexeclibdir) $(libgcjx_la_LDFLAGS) $(LIBS)\n \n ## ################################################################\n "}, {"sha": "5f237d81e7ce23a6bd108af3061505a130bf24f2", "filename": "libjava/Makefile.in", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=52c2897732e366fd1d63140b4f10cce41c5f0e0c", "patch": "@@ -119,43 +119,29 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n-@XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n+@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.a\n-@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.c\n+@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = @NEEDS_DATA_START_TRUE@libgcjdata.a\n+@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = @NEEDS_DATA_START_TRUE@libgcjdata.c\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij\n+@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@fastjar\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@fastjar\n+@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -174,10 +160,8 @@ AM_CXXFLAGS = -fno-rtti -fvtable-thunks -fnon-call-exceptions \\\n \t-fdollars-in-identifiers \\\n \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n@@ -197,8 +181,6 @@ javao_files = $(java_source_files:.java=.lo) \\\n \n x_javao_files = $(x_java_source_files:.java=.lo)\n \n-libffi_files = `find ../libffi/ \\-name '*.lo'`\n-\n libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n \tresolve.cc defineclass.cc interpret.cc name-finder.cc \\\n \t$(nat_source_files)\n@@ -211,12 +193,11 @@ libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \\\n \n \n libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \\\n-\t$(THREADOBJS) $(libffi_files)\n+\t$(THREADOBJS)\n \n # Include THREADLIBS here to ensure that the correct version of\n # certain linuxthread functions get linked:\n-libgcj_la_LDFLAGS = -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n-\t-rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \\\n+libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \\\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n libgcj_la_LINK = $(LIBLINK)\n@@ -226,7 +207,6 @@ EXTRA_libgcjx_la_SOURCES = $(x_java_source_files)\n libgcjx_la_DEPENDENCIES = libgcj.jar $(x_javao_files)\n libgcjx_la_LIBADD = $(x_javao_files)\n libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@ \\\n-        -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n         -rpath $(toolexeclibdir) \\\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n@@ -249,8 +229,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -1215,7 +1194,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -2113,7 +2092,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n@@ -2363,12 +2342,16 @@ $(javao_files) $(x_javao_files): %.lo: %.java\n libgcj.la: $(libgcj_la_OBJECTS) $(libgcj_la_DEPENDENCIES)\n \t@echo $(libgcj_la_OBJECTS) > libgcj.objectlist;\n \t@echo $(libgcj_la_LIBADD) >> libgcj.objectlist;\n-\t$(libgcj_la_LINK) -objectlist libgcj.objectlist -rpath $(toolexeclibdir) $(libgcj_la_LDFLAGS) $(LIBS)\n+\t$(libgcj_la_LINK) -objectlist libgcj.objectlist \\\n+\t../libstdc++-v3/libsupc++/libsupc++convenience.la \\\n+\t../libffi/libfficonvenience.la \\\n+\t-rpath $(toolexeclibdir) $(libgcj_la_LDFLAGS) $(LIBS)\n \n libgcjx.la: $(libgcjx_la_OBJECTS) $(libgcjx_la_DEPENDENCIES)\n \t@echo $(libgcjx_la_OBJECTS) > libgcjx.objectlist;\n \t@echo $(libgcjx_la_LIBADD) >> libgcjx.objectlist;\n-\t$(libgcjx_la_LINK) -objectlist libgcjx.objectlist -rpath $(toolexeclibdir) $(libgcjx_la_LDFLAGS) $(LIBS)\n+\t$(libgcjx_la_LINK) -objectlist libgcjx.objectlist \\\n+\t-rpath $(toolexeclibdir) $(libgcjx_la_LDFLAGS) $(LIBS)\n \n .class.h:\n \t$(GCJH) -classpath $(top_builddir) $(basename $<)"}, {"sha": "cfa778286a3247cb5e2c2a3a533a48e2e855af11", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c2897732e366fd1d63140b4f10cce41c5f0e0c/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=52c2897732e366fd1d63140b4f10cce41c5f0e0c", "patch": "@@ -76,25 +76,71 @@ public boolean exists ()\n \n   public File (String p)\n   {\n-    if (p == null)\n-      throw new NullPointerException ();\n-    path = p;\n+    path = normalizePath(p);\n   }\n \n+  // Remove duplicate and redundant separator characters.\n+  private String normalizePath(String p)\n+  {\n+    int dupIndex = p.indexOf(dupSeparator);\n+    int plen = p.length();\n+    \n+    // Special case: permit Windows UNC path prefix.\n+    if (dupSeparator == \"\\\\\" && dupIndex == 0)\n+      dupIndex = p.indexOf(dupSeparator, 1);\n+\n+    if (dupIndex == -1)\n+      {\n+        // Ignore trailing separator.\n+        if (plen > 1 && p.charAt(plen - 1) == separatorChar)\n+\t  return p.substring(0, plen - 1);\n+\telse\n+\t  return p;\n+      }\n+    \n+    StringBuffer newpath = new StringBuffer(plen);\n+    int last = 0;\n+    while (dupIndex != -1)\n+      {\n+        newpath.append(p.substring(last, dupIndex));\n+\t// Ignore the duplicate path characters.\n+\twhile (p.charAt(dupIndex) == separatorChar)\n+\t  {\n+\t    dupIndex++;\n+\t    if (dupIndex == plen)\n+\t      return newpath.toString();\n+\t  }\n+\tnewpath.append(separatorChar);\n+\tlast = dupIndex;\n+\tdupIndex = p.indexOf(dupSeparator, last);\n+      }\n+    \n+    // Again, ignore possible trailing separator.\n+    int end;\n+    if (plen > 1 && p.charAt(plen - 1) == separatorChar)\n+      end = plen - 1;\n+    else\n+      end = plen;\n+    newpath.append(p.substring(last, end));\n+    \n+    return newpath.toString();\n+  }\n+  \n   public File (String dirPath, String name)\n   {\n     if (name == null)\n       throw new NullPointerException ();\n     if (dirPath != null && dirPath.length() > 0)\n       {\n \t// Try to be smart about the number of separator characters.\n-\tif (dirPath.charAt(dirPath.length() - 1) == separatorChar)\n-\t  path = dirPath + name;\n+\tif (dirPath.charAt(dirPath.length() - 1) == separatorChar\n+\t    || name.length() == 0)\n+\t  path = normalizePath(dirPath + name);\n \telse\n-\t  path = dirPath + separatorChar + name;\n+\t  path = normalizePath(dirPath + separatorChar + name);\n       }\n     else\n-      path = name;\n+      path = normalizePath(name);\n   }\n \n   public File (File dir, String name)\n@@ -439,6 +485,7 @@ public boolean setLastModified(long time)\n   static final String tmpdir = System.getProperty(\"java.io.tmpdir\");\n   static int maxPathLen;\n   static boolean caseSensitive;\n+  static String dupSeparator = separator + separator;\n   \n   static\n   {"}]}