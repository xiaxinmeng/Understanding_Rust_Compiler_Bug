{"sha": "47aa0df47504bd7a24c0e5e3110e927233e4a96d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhYTBkZjQ3NTA0YmQ3YTI0YzBlNWUzMTEwZTkyNzIzM2U0YTk2ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-09-17T20:52:41Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-09-17T20:52:41Z"}, "message": "re PR debug/12066 (g++ generates stabs for \"char *\" that gdb cannot read)\n\n\tPR debug/12066\n\t* dbxout.c (dbxout_init): Use a langhook to find builtin types.\n\t* langhooks-def.h (lhd_return_null_tree_v): New function.\n\t(LANG_HOOKS_BUILTIN_TYPE_DECLS): New macro.\n\t(LANG_HOOKS_DECLS): Add it to the intializer.\n\t* langhooks.c (lhd_return_null_tree_v): New function.\n\t* langhooks.h (lang_hooks_for_decls): Add builtin_type_decls.\n\n\n\tPR debug/12066\n\t* cp-lang.c (LANG_HOOKS_BUILTIN_TYPE_DECLS): Define.\n\t* cp-tree.h (cxx_builtin_type_decls): Declare.\n\t* decl.c (builtin_type_decls): New variables.\n\t(cxx_builtin_type_decls): New function.\n\t(record_builtin_type): Add to builtin_type_decls.\n\nFrom-SVN: r71478", "tree": {"sha": "b548787b45299cc7b303a1196b1877191302b679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b548787b45299cc7b303a1196b1877191302b679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47aa0df47504bd7a24c0e5e3110e927233e4a96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47aa0df47504bd7a24c0e5e3110e927233e4a96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47aa0df47504bd7a24c0e5e3110e927233e4a96d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47aa0df47504bd7a24c0e5e3110e927233e4a96d/comments", "author": null, "committer": null, "parents": [{"sha": "43892f8cea65404797f538f37a500ca62bf672c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43892f8cea65404797f538f37a500ca62bf672c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43892f8cea65404797f538f37a500ca62bf672c0"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "fe68b0a9d16bf60e7588d95325faaefdf6f9511a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -1,3 +1,13 @@\n+2003-09-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR debug/12066\n+\t* dbxout.c (dbxout_init): Use a langhook to find builtin types.\n+\t* langhooks-def.h (lhd_return_null_tree_v): New function.\n+\t(LANG_HOOKS_BUILTIN_TYPE_DECLS): New macro.\n+\t(LANG_HOOKS_DECLS): Add it to the intializer.\n+\t* langhooks.c (lhd_return_null_tree_v): New function.\n+\t* langhooks.h (lang_hooks_for_decls): Add builtin_type_decls.\n+\n 2003-09-17  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* configure.in: Quote gcc_config_arguments for configargs.h."}, {"sha": "24f82d76f34838638f35fda76ed46cf173933a69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -1,3 +1,12 @@\n+2003-09-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR debug/12066\n+\t* cp-lang.c (LANG_HOOKS_BUILTIN_TYPE_DECLS): Define.\n+\t* cp-tree.h (cxx_builtin_type_decls): Declare.\n+\t* decl.c (builtin_type_decls): New variables.\n+\t(cxx_builtin_type_decls): New function.\n+\t(record_builtin_type): Add to builtin_type_decls.\n+\n 2003-09-17  Richard Henderson  <rth@redhat.com>\n \n         * semantics.c (expand_or_defer_fn): Inc/dec function_depth."}, {"sha": "92e6b914b3ebf851c03e1503db26c65b667224ab", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -102,6 +102,8 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n+#undef LANG_HOOKS_BUILTIN_TYPE_DECLS\n+#define LANG_HOOKS_BUILTIN_TYPE_DECLS cxx_builtin_type_decls\n #undef LANG_HOOKS_PUSHLEVEL\n #define LANG_HOOKS_PUSHLEVEL lhd_do_nothing_i\n #undef LANG_HOOKS_POPLEVEL"}, {"sha": "dfa298f5379d5f05af9884bc03200b6631663647", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -3752,6 +3752,8 @@ extern void register_dtor_fn                    (tree);\n extern tmpl_spec_kind current_tmpl_spec_kind    (int);\n extern tree cp_fname_init\t\t\t(const char *);\n extern tree check_elaborated_type_specifier     (enum tag_types, tree, bool);\n+extern tree cxx_builtin_type_decls              (void);\n+\n extern bool have_extern_spec;\n \n /* in decl2.c */"}, {"sha": "8676698b2eb4729de5fae8a823f5cf359a3f924d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -5911,6 +5911,19 @@ lookup_type_current_level (tree name)\n }\n \n \f\n+\n+/* A chain of TYPE_DECLs for the builtin types.  */\n+\n+static GTY(()) tree builtin_type_decls;\n+\n+/* Return a chain of TYPE_DECLs for the builtin types.  */\n+\n+tree\n+cxx_builtin_type_decls ()\n+{\n+  return builtin_type_decls;\n+}\n+\n /* Push the declarations of builtin types into the namespace.\n    RID_INDEX is the index of the builtin type in the array\n    RID_POINTERS.  NAME is the name used when looking up the builtin\n@@ -5952,6 +5965,12 @@ record_builtin_type (enum rid rid_index,\n \n   if (!TYPE_NAME (type))\n     TYPE_NAME (type) = tdecl;\n+\n+  if (tdecl)\n+    {\n+      TREE_CHAIN (tdecl) = builtin_type_decls;\n+      builtin_type_decls = tdecl;\n+    }\n }\n \n /* Record one of the standard Java types."}, {"sha": "e4c797894c0421158374fbff0fd93b2809c93e85", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -535,9 +535,10 @@ dbxout_init (const char *input_file_name)\n   DBX_OUTPUT_STANDARD_TYPES (syms);\n #endif\n \n-  /* Get all permanent types that have typedef names,\n-     and output them all, except for those already output.  */\n-\n+  /* Get all permanent types that have typedef names, and output them\n+     all, except for those already output.  Some language front ends\n+     put these declarations in the top-level scope; some do not.  */\n+  dbxout_typedefs ((*lang_hooks.decls.builtin_type_decls) ());\n   dbxout_typedefs (syms);\n }\n "}, {"sha": "f8ecc8bdcb7685b3d87afbfaa5a93f64f040bb50", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -46,6 +46,7 @@ extern void lhd_do_nothing_f (struct function *);\n extern bool lhd_post_options (const char **);\n extern HOST_WIDE_INT lhd_get_alias_set (tree);\n extern tree lhd_return_tree (tree);\n+extern tree lhd_return_null_tree_v (void);\n extern tree lhd_return_null_tree (tree);\n extern tree lhd_do_nothing_iii_return_null_tree (int, int, int);\n extern int lhd_safe_from_p (rtx, tree);\n@@ -239,6 +240,7 @@ extern int lhd_tree_dump_type_quals (tree);\n #define LANG_HOOKS_SET_BLOCK\tset_block\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n+#define LANG_HOOKS_BUILTIN_TYPE_DECLS lhd_return_null_tree_v\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n #define LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE NULL\n@@ -252,6 +254,7 @@ extern int lhd_tree_dump_type_quals (tree);\n   LANG_HOOKS_SET_BLOCK, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n+  LANG_HOOKS_BUILTIN_TYPE_DECLS, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE, \\"}, {"sha": "a1d60f9ff5eb035a3e70dcda87ceac0065b1ff80", "filename": "gcc/langhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -83,6 +83,14 @@ lhd_return_tree (tree t)\n \n /* Do nothing (return NULL_TREE).  */\n \n+tree\n+lhd_return_null_tree_v (void)\n+{\n+  return NULL_TREE;\n+}\n+\n+/* Do nothing (return NULL_TREE).  */\n+\n tree\n lhd_return_null_tree (tree t ATTRIBUTE_UNUSED)\n {"}, {"sha": "4887f6dcd44473abd1346937fb993b3bc640a178", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47aa0df47504bd7a24c0e5e3110e927233e4a96d/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=47aa0df47504bd7a24c0e5e3110e927233e4a96d", "patch": "@@ -189,6 +189,9 @@ struct lang_hooks_for_decls\n   /* Returns the chain of decls so far in the current scope level.  */\n   tree (*getdecls) (void);\n \n+  /* Returns a chain of TYPE_DECLs for built-in types.  */\n+  tree (*builtin_type_decls) (void);\n+\n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n   bool (*warn_unused_global) (tree);"}]}