{"sha": "fc69382254fcf45ced69a604adea5b6123c3c1c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2OTM4MjI1NGZjZjQ1Y2VkNjlhNjA0YWRlYTViNjEyM2MzYzFjOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-17T07:39:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-17T07:39:13Z"}, "message": "crtstuff.c (__dso_handle): Declare.\n\n\t* crtstuff.c (__dso_handle): Declare.\n\t(__cxa_finalize): Likewise.\n\t(do_global_dtors_aux): Call __cxa_finalize if __dso_handle is\n\tnon-NULL.\n\n\t* invoke.texi: Document -fuse-cxa-atexit.\n\n\t* tree.h (ptr_type_node): Document.\n\t(const_ptr_type_node): Likewise.\n\nFrom-SVN: r30989", "tree": {"sha": "d54c407a6af521d26af28babaad7f943f2b5c8f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54c407a6af521d26af28babaad7f943f2b5c8f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc69382254fcf45ced69a604adea5b6123c3c1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc69382254fcf45ced69a604adea5b6123c3c1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc69382254fcf45ced69a604adea5b6123c3c1c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc69382254fcf45ced69a604adea5b6123c3c1c8/comments", "author": null, "committer": null, "parents": [{"sha": "5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "2f486f7769d06514afbd8a9c24282fd7a24c1400", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc69382254fcf45ced69a604adea5b6123c3c1c8", "patch": "@@ -1,3 +1,15 @@\n+1999-12-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* crtstuff.c (__dso_handle): Declare.\n+\t(__cxa_finalize): Likewise.\n+\t(do_global_dtors_aux): Call __cxa_finalize if __dso_handle is\n+\tnon-NULL.\n+\n+\t* invoke.texi: Document -fuse-cxa-atexit.\n+\t\n+\t* tree.h (ptr_type_node): Document.\n+\t(const_ptr_type_node): Likewise.\n+\n Fri Dec 17 01:32:38 MET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n \t* regmove.c (optimize_reg_copy_1): Ignore LOOP notes."}, {"sha": "53dae7cddc26df0744577db325c2c21347b2f4a4", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=fc69382254fcf45ced69a604adea5b6123c3c1c8", "patch": "@@ -129,6 +129,19 @@ typedef void (*func_ptr) (void);\n \n #ifdef OBJECT_FORMAT_ELF\n \n+/* Declare the __dso_handle variable.  It should have a unique value\n+   in every shared-object; in a main program its value is zero.  */\n+\n+#ifdef CRTSTUFFS_O\n+void *__dso_handle = &__dso_handle;\n+#else\n+void *__dso_handle = 0;\n+#endif\n+\n+/* The __cxa_finalize function may not be available so we use only a\n+   weak declaration.  */\n+extern void __cxa_finalize (void *) TARGET_ATTRIBUTE_WEAK;\n+\n /* Run all the global destructors on exit from the program.  */\n  \n /* Some systems place the number of pointers in the first word of the\n@@ -159,6 +172,9 @@ __do_global_dtors_aux (void)\n   if (completed)\n     return;\n \n+  if (__dso_handle && __cxa_finalize)\n+    __cxa_finalize (__dso_handle);\n+\n   while (*p)\n     {\n       p++;"}, {"sha": "3fbcba6ab858ea182eba4869a7da13392a1cea7a", "filename": "gcc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=fc69382254fcf45ced69a604adea5b6123c3c1c8", "patch": "@@ -109,7 +109,7 @@ in the following sections.\n -fhonor-std -fhuge-objects  -fno-implicit-templates  -finit-priority\n -fno-implement-inlines -fname-mangling-version-@var{n}  -fno-default-inline  \n -foperator-names  -fno-optional-diags  -fpermissive -frepo  -fstrict-prototype\n--fsquangle  -ftemplate-depth-@var{n} -fvtable-thunks\n+-fsquangle  -ftemplate-depth-@var{n} -fuse-cxa-atexit -fvtable-thunks\n -nostdinc++  -Wctor-dtor-privacy -Wno-deprecated -Weffc++  \n -Wno-non-template-friend \n -Wnon-virtual-dtor  -Wold-style-cast  -Woverloaded-virtual  \n@@ -1217,6 +1217,13 @@ A limit on the template instantiation depth is needed to detect\n endless recursions during template class instantiation. ANSI/ISO C++\n conforming programs must not rely on a maximum depth greater than 17.\n \n+@item -fuse-cxa-atexit\n+Register destructors for objects with static storage duration with the\n+@code{__cxa_atexit} function rather than the @code{atexit} function.\n+This option is required for fully standards-compliant handling of static\n+destructors, but will only work if your C library supports\n+@code{__cxa_atexit}.\n+\n @item -fvtable-thunks\n Use @samp{thunks} to implement the virtual function dispatch table\n (@samp{vtable}).  The traditional (cfront-style) approach to"}, {"sha": "2703e80b77e6a92d8a061daff65e9846cf189b1c", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc69382254fcf45ced69a604adea5b6123c3c1c8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fc69382254fcf45ced69a604adea5b6123c3c1c8", "patch": "@@ -1542,7 +1542,9 @@ extern tree global_trees[TI_MAX];\n #define complex_long_double_type_node\tglobal_trees[TI_COMPLEX_LONG_DOUBLE_TYPE]\n \n #define void_type_node\t\t\tglobal_trees[TI_VOID_TYPE]\n+/* The C type `void *'.  */\n #define ptr_type_node\t\t\tglobal_trees[TI_PTR_TYPE]\n+/* The C type `const void *'.  */\n #define const_ptr_type_node\t\tglobal_trees[TI_CONST_PTR_TYPE]\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]"}]}