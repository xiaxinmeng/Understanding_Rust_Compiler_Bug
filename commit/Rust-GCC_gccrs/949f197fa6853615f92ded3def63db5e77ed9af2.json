{"sha": "949f197fa6853615f92ded3def63db5e77ed9af2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5ZjE5N2ZhNjg1MzYxNWY5MmRlZDNkZWY2M2RiNWU3N2VkOWFmMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-03T23:15:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-03T23:15:51Z"}, "message": "except.c (collect_one_action_chain): Add an explicit cleanup action if regions surrounding a catch were encoded...\n\n        * except.c (collect_one_action_chain): Add an explicit cleanup\n        action if regions surrounding a catch were encoded entirely\n        within the call-site entry.\n\n        * g++.dg/eh/filter1.C, g++.dg/eh/filter2.C: New tests.\n\nFrom-SVN: r44616", "tree": {"sha": "51fcc575dc9325d75e35147a2bf8537fbc68a91c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51fcc575dc9325d75e35147a2bf8537fbc68a91c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/949f197fa6853615f92ded3def63db5e77ed9af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949f197fa6853615f92ded3def63db5e77ed9af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949f197fa6853615f92ded3def63db5e77ed9af2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949f197fa6853615f92ded3def63db5e77ed9af2/comments", "author": null, "committer": null, "parents": [{"sha": "c99fa40fbe95dc94e7e55b374f778cc154fd4864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99fa40fbe95dc94e7e55b374f778cc154fd4864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99fa40fbe95dc94e7e55b374f778cc154fd4864"}], "stats": {"total": 133, "additions": 132, "deletions": 1}, "files": [{"sha": "65f73d0e91d35fc2d840d67d2f3d3f73ce240f0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=949f197fa6853615f92ded3def63db5e77ed9af2", "patch": "@@ -1,3 +1,9 @@\n+2001-08-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* except.c (collect_one_action_chain): Add an explicit cleanup\n+\taction if regions surrounding a catch were encoded entirely\n+\twithin the call-site entry.\n+\n 2001-08-03  Richard Henderson  <rth@redhat.com>\n \n \t* dbxout.c (dbxout_symbol_location): Flatten subregs first;"}, {"sha": "4397cfc963dc4f1da1b4e7bb68326fe72ec13aed", "filename": "gcc/except.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=949f197fa6853615f92ded3def63db5e77ed9af2", "patch": "@@ -3020,6 +3020,17 @@ expand_eh_return ()\n   emit_label (around_label);\n }\n \f\n+/* In the following functions, we represent entries in the action table\n+   as 1-based indicies.  Special cases are:\n+\n+\t 0:\tnull action record, non-null landing pad; implies cleanups\n+\t-1:\tnull action record, null landing pad; implies no action\n+\t-2:\tno call-site entry; implies must_not_throw\n+\t-3:\twe have yet to process outer regions\n+\n+   Further, no special cases apply to the \"next\" field of the record.\n+   For next, 0 means end of list.  */\n+\n struct action_record\n {\n   int offset;\n@@ -3123,8 +3134,16 @@ collect_one_action_chain (ar_hash, region)\n \t      if (next == -3)\n \t\t{\n \t\t  next = collect_one_action_chain (ar_hash, region->outer);\n-\t\t  if (next < 0)\n+\n+\t\t  /* If there is no next action, terminate the chain.  */\n+\t\t  if (next == -1)\n \t\t    next = 0;\n+\t\t  /* If all outer actions are cleanups or must_not_throw,\n+\t\t     we'll have no action record for it, since we had wanted\n+\t\t     to encode these states in the call-site record directly.\n+\t\t     Add a cleanup action to the chain to catch these.  */\n+\t\t  else if (next <= 0)\n+\t\t    next = add_action_record (ar_hash, 0, 0);\n \t\t}\n \t      next = add_action_record (ar_hash, c->u.catch.filter, next);\n \t    }"}, {"sha": "2424e7451f3499c12b2d6163f289f246ba567122", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=949f197fa6853615f92ded3def63db5e77ed9af2", "patch": "@@ -1,3 +1,7 @@\n+2001-08-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* g++.dg/eh/filter1.C, g++.dg/eh/filter2.C: New tests.\n+\n 2001-08-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/19951025-1.c: Update."}, {"sha": "6ff0574c2a3d0745353a265ee4b17bdf824067d7", "filename": "gcc/testsuite/g++.dg/eh/filter1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ffilter1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ffilter1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ffilter1.C?ref=949f197fa6853615f92ded3def63db5e77ed9af2", "patch": "@@ -0,0 +1,43 @@\n+// Test that cleanups get run when a catch filter fails to match.\n+// { dg-do run }\n+\n+extern \"C\" void exit(int);\n+extern \"C\" void abort();\n+\n+struct a\n+{\n+  a();\n+  ~a();\n+};\n+\n+struct e1 {};\n+struct e2 {};\n+\n+void\n+ex_test ()\n+{\n+  a aa;\n+  try\n+    {\n+      throw e1 ();\n+    }\n+  catch (e2 &)\n+    {\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  try\n+    {\n+      ex_test ();\n+    }\n+  catch (...)\n+    {\n+    }\n+  abort ();\n+}\n+\n+a::a() { }\n+a::~a() { exit (0); }"}, {"sha": "fe87cc9a30817efba61d3bb513d310e42df64e06", "filename": "gcc/testsuite/g++.dg/eh/filter2.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ffilter2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949f197fa6853615f92ded3def63db5e77ed9af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ffilter2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ffilter2.C?ref=949f197fa6853615f92ded3def63db5e77ed9af2", "patch": "@@ -0,0 +1,59 @@\n+// Test that terminate gets run when a catch filter fails to match while\n+// running destructors.  Original bug depended on a::~a being inlined.\n+// { dg-do run }\n+// { dg-options -O }\n+\n+#include <exception>\n+#include <cstdlib>\n+\n+struct e1 {};\n+struct e2 {};\n+\n+struct a\n+{\n+  a () { }\n+\n+  ~a ()\n+    {\n+      try\n+\t{\n+\t  throw e1();\n+\t}\n+      catch (e2 &)\n+\t{\n+        }\n+    }\n+};\n+\n+void\n+ex_test ()\n+{\n+  a aa;\n+  try\n+    {\n+      throw e1 ();\n+    }\n+  catch (e2 &)\n+    {\n+    }\n+}\n+\n+void my_terminate ()\n+{\n+  std::exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  std::set_terminate (my_terminate);\n+\n+  try\n+    {\n+      ex_test ();\n+    }\n+  catch (...)\n+    {\n+    }\n+  abort ();\n+}"}]}