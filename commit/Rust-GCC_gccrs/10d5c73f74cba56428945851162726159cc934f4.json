{"sha": "10d5c73f74cba56428945851162726159cc934f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkNWM3M2Y3NGNiYTU2NDI4OTQ1ODUxMTYyNzI2MTU5Y2M5MzRmNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-18T11:36:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-18T11:36:33Z"}, "message": "(override_options): Allow EV4/5 or 21064/21164 for cpu.\n\nClean up handling of floating-point options.\n\nFrom-SVN: r12300", "tree": {"sha": "36983f816d6f5a02409644e06ff1b0887b16962e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36983f816d6f5a02409644e06ff1b0887b16962e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d5c73f74cba56428945851162726159cc934f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d5c73f74cba56428945851162726159cc934f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d5c73f74cba56428945851162726159cc934f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d5c73f74cba56428945851162726159cc934f4/comments", "author": null, "committer": null, "parents": [{"sha": "d6c46142185a09abfa7fef9bdcb6fe00c5c655ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c46142185a09abfa7fef9bdcb6fe00c5c655ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c46142185a09abfa7fef9bdcb6fe00c5c655ab"}], "stats": {"total": 103, "additions": 43, "deletions": 60}, "files": [{"sha": "2301561563b9e52d6b0b81ddc88f5ef375ab1312", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 43, "deletions": 60, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d5c73f74cba56428945851162726159cc934f4/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d5c73f74cba56428945851162726159cc934f4/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=10d5c73f74cba56428945851162726159cc934f4", "patch": "@@ -97,16 +97,18 @@ static void add_long_const\tPROTO((FILE *, HOST_WIDE_INT, int, int, int));\n void\n override_options ()\n {\n-  alpha_cpu = TARGET_CPU_DEFAULT;\n+  alpha_cpu = PROCESSOR_EV4;\n+\n   if (alpha_cpu_string)\n     {\n-      if (alpha_cpu_string[0] == 'e'\n-\t  && alpha_cpu_string[1] == 'v'\n-\t  && (alpha_cpu_string[2] == '4' || alpha_cpu_string[2] == '5'))\n-\talpha_cpu = alpha_cpu_string[2] == '4' ? PROCESSOR_EV4 : PROCESSOR_EV5;\n+      if (! strcmp (alpha_cpu_string, \"ev4\")\n+\t  || ! strcmp (alpha_cpu_string, \"21064\"))\n+\talpha_cpu = PROCESSOR_EV4;\n+      else if (! strcmp (alpha_cpu_string, \"ev5\")\n+\t       || ! strcmp (alpha_cpu_string, \"21164\"))\n+\talpha_cpu = PROCESSOR_EV5;\n       else\n-\terror (\"bad value (%s) for -mcpu switch\",\n-\t       alpha_cpu_string);\n+\terror (\"bad value `%s' for -mcpu switch\", alpha_cpu_string);\n     }\n \n   alpha_tp = ALPHA_TP_PROG;\n@@ -115,82 +117,63 @@ override_options ()\n \n   if (TARGET_IEEE)\n     {\n-      alpha_tp_string = \"i\";\n-      alpha_fptm_string = \"su\";\n-      target_flags |= MASK_IEEE_CONFORMANT;\n+      alpha_tp = ALPHA_TP_INSN;\n+      alpha_fptm = ALPHA_FPTM_SU;\n     }\n \n   if (TARGET_IEEE_WITH_INEXACT)\n     {\n-      alpha_tp_string = \"i\";\n-      alpha_fptm_string = \"sui\";\n-      target_flags |= MASK_IEEE_CONFORMANT;\n+      alpha_tp = ALPHA_TP_INSN;\n+      alpha_fptm = ALPHA_FPTM_SUI;\n     }\n \n   if (alpha_tp_string)\n-    switch (alpha_tp_string[0])\n-      {\n-      case 'p':\n+    {\n+      if (! strcmp (alpha_tp_string, \"p\"))\n \talpha_tp = ALPHA_TP_PROG;\n-\tbreak;\n-\n-      case 'f':\n+      else if (! strcmp (alpha_tp_string, \"f\"))\n \talpha_tp = ALPHA_TP_FUNC;\n-\tbreak;\n-\n-      case 'i':\n+      else if (! strcmp (alpha_tp_string, \"i\"))\n \talpha_tp = ALPHA_TP_INSN;\n-\tbreak;\n-\n-      default:\n-\terror (\"bad value (%s) for -mtrap-precision switch\",\n-\t\t alpha_tp_string);\n-\t  break;\n-      }\n+      else\n+\terror (\"bad value `%s' for -mtrap-precision switch\", alpha_tp_string);\n+    }\n \n   if (alpha_fprm_string)\n-    switch (alpha_fprm_string[0])\n-      {\n-      case 'n':\n+    {\n+      if (! strcmp (alpha_fprm_string, \"n\"))\n \talpha_fprm = ALPHA_FPRM_NORM;\n-\tbreak;\n-\n-      case 'm':\n+      else if (! strcmp (alpha_fprm_string, \"m\"))\n \talpha_fprm = ALPHA_FPRM_MINF;\n-\tbreak;\n-\n-      case 'c':\n+      else if (! strcmp (alpha_fprm_string, \"c\"))\n \talpha_fprm = ALPHA_FPRM_CHOP;\n-\tbreak;\n-\n-      case 'd':\n+      else if (! strcmp (alpha_fprm_string,\"d\"))\n \talpha_fprm = ALPHA_FPRM_DYN;\n-\tbreak;\n-\n-      default:\n-\terror (\"bad value (%s) for -mfp-rounding-mode switch\",\n+      else\n+\terror (\"bad value `%s' for -mfp-rounding-mode switch\",\n \t       alpha_fprm_string);\n-\tbreak;\n-      }\n+    }\n \n   if (alpha_fptm_string)\n-    if (strcmp (alpha_fptm_string, \"n\") == 0)\n-      alpha_fptm = ALPHA_FPTM_N;\n-    else if (strcmp (alpha_fptm_string, \"u\") == 0)\n-      alpha_fptm = ALPHA_FPTM_U;\n-    else if (strcmp (alpha_fptm_string, \"su\") == 0)\n-      alpha_fptm = ALPHA_FPTM_SU;\n-    else if (strcmp (alpha_fptm_string, \"sui\") == 0)\n-      alpha_fptm = ALPHA_FPTM_SUI;\n-    else\n-      error (\"bad value (%s) for -mfp-trap-mode switch\",\n-\t     alpha_fptm_string);\n+    {\n+      if (strcmp (alpha_fptm_string, \"n\") == 0)\n+\talpha_fptm = ALPHA_FPTM_N;\n+      else if (strcmp (alpha_fptm_string, \"u\") == 0)\n+\talpha_fptm = ALPHA_FPTM_U;\n+      else if (strcmp (alpha_fptm_string, \"su\") == 0)\n+\talpha_fptm = ALPHA_FPTM_SU;\n+      else if (strcmp (alpha_fptm_string, \"sui\") == 0)\n+\talpha_fptm = ALPHA_FPTM_SUI;\n+      else\n+\terror (\"bad value `%s' for -mfp-trap-mode switch\", alpha_fptm_string);\n+    }\n \n   /* Do some sanity checks on the above option. */\n \n-  if (alpha_fptm >= ALPHA_FPTM_SU && alpha_tp != ALPHA_TP_INSN)\n+  if ((alpha_fptm == ALPHA_FPTM_SU || alpha_fptm == ALPHA_FPTM_SUI)\n+      && alpha_tp != ALPHA_TP_INSN)\n     {\n-      error (\"fp software completion requires -mtrap-precision=i\");\n+      warning (\"fp software completion requires -mtrap-precision=i\");\n       alpha_tp = ALPHA_TP_INSN;\n     }\n }"}]}