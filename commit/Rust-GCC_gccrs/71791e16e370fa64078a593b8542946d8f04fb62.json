{"sha": "71791e16e370fa64078a593b8542946d8f04fb62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE3OTFlMTZlMzcwZmE2NDA3OGE1OTNiODU0Mjk0NmQ4ZjA0ZmI2Mg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-07-16T14:54:40Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-07-16T14:54:40Z"}, "message": "(CPP_CPU_ARCH_SPEC): Handle -march=...\n\n(TARGET_OPTIONS): Add arch= and fp=.  Delete fpe=.\n(enum processor_type): Add PROCESSOR_NONE, for use in all_procs table.\n(FP_DEFAULT): Default floating point architecture for generic\nback-end.\n(PREDICATE_CODES): Add f_register_operand.\n\nFrom-SVN: r14460", "tree": {"sha": "3d0183f4471218a22635801f395cf1b623829aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d0183f4471218a22635801f395cf1b623829aff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71791e16e370fa64078a593b8542946d8f04fb62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71791e16e370fa64078a593b8542946d8f04fb62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71791e16e370fa64078a593b8542946d8f04fb62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71791e16e370fa64078a593b8542946d8f04fb62/comments", "author": null, "committer": null, "parents": [{"sha": "e9335bb692c19959932d1fda9f80e913947a2384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9335bb692c19959932d1fda9f80e913947a2384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9335bb692c19959932d1fda9f80e913947a2384"}], "stats": {"total": 242, "additions": 180, "deletions": 62}, "files": [{"sha": "efbeba7b9ca31d3b021bbb255fcfd540eab46d9f", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 180, "deletions": 62, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71791e16e370fa64078a593b8542946d8f04fb62/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71791e16e370fa64078a593b8542946d8f04fb62/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=71791e16e370fa64078a593b8542946d8f04fb62", "patch": "@@ -30,32 +30,6 @@ Boston, MA 02111-1307, USA.  */\n    should default to that used by the OS.\n */\n \n-\n-extern void output_func_epilogue ();\n-extern char *output_add_immediate ();\n-extern char *output_call ();\n-extern char *output_call_mem ();\n-extern char *output_move_double ();\n-extern char *output_mov_double_fpu_from_arm ();\n-extern char *output_mov_double_arm_from_fpu ();\n-extern char *output_mov_long_double_fpu_from_arm ();\n-extern char *output_mov_long_double_arm_from_fpu ();\n-extern char *output_mov_long_double_arm_from_arm ();\n-extern char *output_mov_immediate ();\n-extern char *output_return_instruction ();\n-extern char *output_load_symbol ();\n-extern char *emit_ldm_seq ();\n-extern char *emit_stm_seq ();\n-extern char *fp_immediate_constant ();\n-extern struct rtx_def *gen_compare_reg ();\n-extern struct rtx_def *arm_gen_store_multiple ();\n-extern struct rtx_def *arm_gen_load_multiple ();\n-extern struct rtx_def *gen_rotated_half_load ();\n-extern int is_pic ();\n-#ifdef AOF_ASSEMBLER\n-extern struct rtx_def *aof_pic_entry ();\n-#endif\n-\n #define TARGET_CPU_arm2\t\t0x0000\n #define TARGET_CPU_arm250\t0x0000\n #define TARGET_CPU_arm3\t\t0x0000\n@@ -137,31 +111,60 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \n #define CPP_SPEC \"%(cpp_cpu_arch) %(cpp_apcs_pc) %(cpp_float) %(cpp_endian)\"\n \n+/* Set the architecture define -- if -march= is set, then it overrides\n+   the -mcpu= setting.  */\n #define CPP_CPU_ARCH_SPEC \"\\\n %{m2:-D__arm2__ -D__ARM_ARCH_2__} \\\n %{m3:-D__arm2__ -D__ARM_ARCH_2__} \\\n %{m6:-D__arm6__ -D__ARM_ARCH_3__} \\\n-%{mcpu=arm2:-D__ARM_ARCH_2__} \\\n-%{mcpu=arm250:-D__ARM_ARCH_2__} \\\n-%{mcpu=arm3:-D__ARM_ARCH_2__} \\\n-%{mcpu=arm6:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm600:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm610:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm7:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm700:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm710:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm7100:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm7500:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm7500fe:-D__ARM_ARCH_3__} \\\n-%{mcpu=arm7m:-D__ARM_ARCH_3M__} \\\n-%{mcpu=arm7dm:-D__ARM_ARCH_3M__} \\\n-%{mcpu=arm7dmi:-D__ARM_ARCH_3M__} \\\n-%{mcpu=arm7tdmi:-D__ARM_ARCH_4T__} \\\n-%{mcpu=arm8:-D__ARM_ARCH_4__} \\\n-%{mcpu=arm810:-D__ARM_ARCH_4__} \\\n-%{mcpu=strongarm:-D__ARM_ARCH_4__} \\\n-%{mcpu=strongarm110:-D__ARM_ARCH_4__} \\\n-%{!mcpu*:%{!m6:%{!m2:%{!m3:%(cpp_cpu_arch_default)}}}} \\\n+%{march=arm2:-D__ARM_ARCH_2__} \\\n+%{march=arm250:-D__ARM_ARCH_2__} \\\n+%{march=arm3:-D__ARM_ARCH_2__} \\\n+%{march=arm6:-D__ARM_ARCH_3__} \\\n+%{march=arm600:-D__ARM_ARCH_3__} \\\n+%{march=arm610:-D__ARM_ARCH_3__} \\\n+%{march=arm7:-D__ARM_ARCH_3__} \\\n+%{march=arm700:-D__ARM_ARCH_3__} \\\n+%{march=arm710:-D__ARM_ARCH_3__} \\\n+%{march=arm7100:-D__ARM_ARCH_3__} \\\n+%{march=arm7500:-D__ARM_ARCH_3__} \\\n+%{march=arm7500fe:-D__ARM_ARCH_3__} \\\n+%{march=arm7m:-D__ARM_ARCH_3M__} \\\n+%{march=arm7dm:-D__ARM_ARCH_3M__} \\\n+%{march=arm7dmi:-D__ARM_ARCH_3M__} \\\n+%{march=arm7tdmi:-D__ARM_ARCH_4T__} \\\n+%{march=arm8:-D__ARM_ARCH_4__} \\\n+%{march=arm810:-D__ARM_ARCH_4__} \\\n+%{march=strongarm:-D__ARM_ARCH_4__} \\\n+%{march=strongarm110:-D__ARM_ARCH_4__} \\\n+%{march=armv2:-D__ARM_ARCH_2__} \\\n+%{march=armv2a:-D__ARM_ARCH_2__} \\\n+%{march=armv3:-D__ARM_ARCH_3__} \\\n+%{march=armv3m:-D__ARM_ARCH_3M__} \\\n+%{march=armv4:-D__ARM_ARCH_4__} \\\n+%{march=armv4t:-D__ARM_ARCH_4T__} \\\n+%{!march=*: \\\n+ %{mcpu=arm2:-D__ARM_ARCH_2__} \\\n+ %{mcpu=arm250:-D__ARM_ARCH_2__} \\\n+ %{mcpu=arm3:-D__ARM_ARCH_2__} \\\n+ %{mcpu=arm6:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm600:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm610:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm7:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm700:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm710:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm7100:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm7500:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm7500fe:-D__ARM_ARCH_3__} \\\n+ %{mcpu=arm7m:-D__ARM_ARCH_3M__} \\\n+ %{mcpu=arm7dm:-D__ARM_ARCH_3M__} \\\n+ %{mcpu=arm7dmi:-D__ARM_ARCH_3M__} \\\n+ %{mcpu=arm7tdmi:-D__ARM_ARCH_4T__} \\\n+ %{mcpu=arm8:-D__ARM_ARCH_4__} \\\n+ %{mcpu=arm810:-D__ARM_ARCH_4__} \\\n+ %{mcpu=strongarm:-D__ARM_ARCH_4__} \\\n+ %{mcpu=strongarm110:-D__ARM_ARCH_4__} \\\n+ %{!mcpu*:%{!m6:%{!m2:%{!m3:%(cpp_cpu_arch_default)}}}}} \\\n \"\n \n /* Define __APCS_26__ if the PC also contains the PSR */\n@@ -239,8 +242,8 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Run-time compilation parameters selecting different hardware subsets.  */\n extern int target_flags;\n \n-/* These two are used by TARGET_OPTIONS, they are parsed in OVERRIDE_OPTIONS */\n-extern char *target_fpe_name;\n+/* The floating point instruction architecture, can be 2 or 3 */\n+extern char *target_fp_name;\n \n /* Nonzero if the function prologue (and epilogue) should obey\n    the ARM Procedure Call Standard.  */\n@@ -358,8 +361,9 @@ extern char *target_fpe_name;\n #define TARGET_OPTIONS\t\t\t\\\n {\t\t\t\t\t\\\n   {\"cpu=\",  &arm_select[1].string},\t\\\n-  {\"tune=\", &arm_select[2].string},\t\\\n-  {\"fpe=\",  &target_fpe_name}\t\t\\\n+  {\"arch=\", &arm_select[2].string},\t\\\n+  {\"tune=\", &arm_select[3].string},\t\\\n+  {\"fp=\",   &target_fp_name}\t\t\\\n }\n \n /* arm_select[0] is reserved for the default cpu.  */\n@@ -381,19 +385,20 @@ extern struct arm_cpu_select arm_select[];\n #define TARGET_CPU_DEFAULT ((char *) 0)\n #endif\n \n-/* Which processor we are running on.  */\n+/* Which processor we are running on, for instruction scheduling \n+   purposes.  */\n enum processor_type \n {\n   PROCESSOR_ARM2,\n   PROCESSOR_ARM3,\n   PROCESSOR_ARM6,\n   PROCESSOR_ARM7,\n   PROCESSOR_ARM8,\n-  PROCESSOR_STARM\n+  PROCESSOR_STARM,\n+  PROCESSOR_NONE\t/* NOTE: This must be last, since it doesn't\n+\t\t\t   appear in the attr_cpu list */\n };\n \n-/* Recast the cpu class to be the cpu attribute. */\n-\n /* Recast the cpu class to be the cpu attribute.  */\n #define arm_cpu_attr ((enum attr_cpu)arm_cpu)\n \n@@ -422,25 +427,27 @@ enum floating_point_type\n /* Recast the floating point class to be the floating point attribute.  */\n #define arm_fpu_attr ((enum attr_fpu) arm_fpu)\n \n+/* What type of floating point to tune for */\n extern enum floating_point_type arm_fpu;\n \n+/* What type of floating point instructions are available */\n+extern enum floating_point_type arm_fpu_arch;\n+\n+/* Default floating point archtitecture.  Override in sub-target if\n+   necessary.  */\n+#define FP_DEFAULT FP_SOFT2\n+\n /* Nonzero if the processor has a fast multiply insn, and one that does\n    a 64-bit multiply of two 32-bit values.  */\n extern int arm_fast_multiply;\n \n-/* Nonzero if this chip support the ARM Architecture 4 extensions */\n+/* Nonzero if this chip supports the ARM Architecture 4 extensions */\n extern int arm_arch4;\n \n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  0\n #endif\n \n-/* A particular target can define this to a particular cpu name, eg \"arm710dmi\"\n-   and the code generated should then be appropriate for that processor.  */\n-#ifndef ARM_CPU_NAME\n-#define ARM_CPU_NAME NULL\n-#endif\n-\n /* The frame pointer register used in gcc has nothing to do with debugging;\n    that is controlled by the APCS-FRAME option.  */\n /* Not fully implemented yet */\n@@ -1694,6 +1701,7 @@ extern int arm_compare_fp;\n /* Define the codes that are matched by predicates in arm.c */\n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n   {\"s_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"f_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"arm_add_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"fpu_add_operand\", {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n   {\"arm_rhs_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n@@ -1925,3 +1933,113 @@ do {\t\t\t\t\t\t\t\t\t\\\n      return address.  This does not apply to ARM6 and later processors\t\\\n      when running in 32 bit mode.  */\t\t\t\t\t\\\n   ((!TARGET_APCS_32) ? (GEN_INT (0x03fffffc)) : (GEN_INT (0xffffffff)))\n+\n+/* Prototypes for arm.c -- actually, they aren't since the types aren't \n+   fully defined yet.  */\n+\n+void arm_override_options (/* void */);\n+int use_return_insn (/* void */);\n+int const_ok_for_arm (/* HOST_WIDE_INT */);\n+int const_ok_for_op (/* HOST_WIDE_INT, enum rtx_code, \n+\t\t\tenum machine_mode */);\n+int arm_split_constant (/* enum rtx_code, enum machine_mode, \n+\t\t\t   HOST_WIDE_INT, struct rtx_def *,\n+\t\t\t   struct rtx_def *, int */);\n+enum rtx_code arm_canonicalize_comparison (/* enum rtx_code, \n+\t\t\t\t\t      struct rtx_def ** */);\n+int arm_return_in_memory (/* union tree_node * */);\n+int legitimate_pic_operand_p (/* struct rtx_def * */);\n+struct rtx_def *legitimize_pic_address (/* struct rtx_def *, \n+\t\t\t\t\t   enum machine_mode,\n+\t\t\t\t\t   struct rtx_def * */);\n+int is_pic (/* struct rtx_def * */);\n+void arm_finalize_pic (/* void */);\n+int arm_rtx_costs (/* struct rtx_def *, enum rtx_code, enum rtx_code */);\n+int arm_adjust_code (/* struct rtx_def *, struct rtx_def *, \n+\t\t\tstruct rtx_def *, int */);\n+int const_double_rtx_ok_for_fpu (/* struct rtx_def * */);\n+int neg_const_double_rtx_ok_for_fpu (/* struct rtx_def * */);\n+int s_register_operand (/* struct rtx_def *, enum machine_mode */);\n+int f_register_operand (/* struct rtx_def *, enum machine_mode */);\n+int reg_or_int_operand (/* struct rtx_def *, enum machine_mode */);\n+int reload_memory_operand (/* struct rtx_def *, enum machine_mode */);\n+int arm_rhs_operand (/* struct rtx_def *, enum machine_mode */);\n+int arm_rhsm_operand (/* struct rtx_def *, enum machine_mode */);\n+int arm_add_operand (/* struct rtx_def *, enum machine_mode */);\n+int arm_not_operand (/* struct rtx_def *, enum machine_mode */);\n+int offsettable_memory_operand (/* struct rtx_def *, enum machine_mode */);\n+int alignable_memory_operand (/* struct rtx_def *, enum machine_mode */);\n+int fpu_rhs_operand (/* struct rtx_def *, enum machine_mode */);\n+int fpu_add_operand (/* struct rtx_def *, enum machine_mode */);\n+int power_of_two_operand (/* struct rtx_def *, enum machine_mode */);\n+int di_operand (/* struct rtx_def *, enum machine_mode */);\n+int soft_df_operand (/* struct rtx_def *, enum machine_mode */);\n+int index_operand (/* struct rtx_def *, enum machine_mode */);\n+int const_shift_operand (/* struct rtx_def *, enum machine_mode */);\n+int shiftable_operator (/* struct rtx_def *, enum machine_mode */);\n+int shift_operator (/* struct rtx_def *, enum machine_mode */);\n+int equality_operator (/* struct rtx_def *, enum machine_mode */);\n+int minmax_operator (/* struct rtx_def *, enum machine_mode */);\n+int cc_register (/* struct rtx_def *, enum machine_mode */);\n+int dominant_cc_register (/* struct rtx_def *, enum machine_mode */);\n+int symbol_mentioned_p (/* struct rtx_def * */);\n+int label_mentioned_p (/* struct rtx_def * */);\n+enum rtx_code minmax_code (/* struct rtx_def * */);\n+int adjacent_mem_locations (/* struct rtx_def *, struct rtx_def * */);\n+int load_multiple_operation (/* struct rtx_def *, enum machine_mode */);\n+int store_multiple_operation (/* struct rtx_def *, enum machine_mode */);\n+int load_multiple_sequence (/* struct rtx_def **, int, int *, int *,\n+\t\t\t       HOST_WIDE_INT * */);\n+char *emit_ldm_seq (/* struct rtx_def **, int */);\n+int store_multiple_sequence (/* struct rtx_def **, int, int *, int *,\n+\t\t\t\tHOST_WIDE_INT * */);\n+char *emit_stm_seq (/* struct rtx_def **, int */);\n+int multi_register_push (/* struct rtx_def *, enum machine_mode */);\n+int arm_valid_machine_decl_attribute (/* union tree_node *, union tree_node *,\n+\t\t\t\t\t union tree_node *,\n+\t\t\t\t\t union tree_node * */);\n+struct rtx_def *arm_gen_load_multiple (/* int, int, struct rtx_def *, \n+\t\t\t\t\t  int, int */);\n+struct rtx_def *arm_gen_store_multiple (/* int, int, struct rtx_def *,\n+\t\t\t\t\t   int, int */);\n+int arm_gen_movstrqi (/* struct rtx_def ** */);\n+struct rtx_def *gen_rotated_half_load (/* struct rtx_def * */);\n+enum machine_mode arm_select_cc_mode (/* enum rtx_code, struct rtx_def *,\n+\t\t\t\t\t struct rtx_def * */);\n+struct rtx_def *gen_compare_reg (/* enum rtx_code, struct rtx_def *,\n+\t\t\t\t    struct rtx_def * */);\n+void arm_reload_in_hi (/* struct rtx_def ** */);\n+void arm_reload_out_hi (/* struct rtx_def ** */);\n+void arm_reorg (/* struct rtx_def * */);\n+char *fp_immediate_constant (/* struct rtx_def * */);\n+void print_multi_reg (/* FILE *, char *, int, int */);\n+char *output_call (/* struct rtx_def ** */);\n+char *output_call_mem (/* struct rtx_def ** */);\n+char *output_mov_long_double_fpu_from_arm (/* struct rtx_def ** */);\n+char *output_mov_long_double_arm_from_fpu (/* struct rtx_def ** */);\n+char *output_mov_long_double_arm_from_arm (/* struct rtx_def ** */);\n+char *output_mov_double_fpu_from_arm (/* struct rtx_def ** */);\n+char *output_mov_double_arm_from_fpu (/* struct rtx_def ** */);\n+char *output_mov_double (/* struct rtx_def ** */);\n+char *output_mov_immediate (/* struct rtx_def ** */);\n+char *output_add_immediate (/* struct rtx_def ** */);\n+char *arithmetic_instr (/* struct rtx_def *, int */);\n+void output_ascii_pseudo_op (/* FILE *, unsigned char *, int */);\n+char *output_return_instruction (/* struct rtx_def *, int, int */);\n+int arm_volatile_func (/* void */);\n+void output_func_prologue (/* FILE *, int */);\n+void output_func_epilogue (/* FILE *, int */);\n+void arm_expand_prologue (/* void */);\n+void arm_print_operand (/* FILE *, struct rtx_def *, int */);\n+void arm_asm_output_label (/* FILE *, char * */);\n+void output_lcomm_directive (/* FILE *, char *, int, int */);\n+void final_prescan_insn (/* struct rtx_def *, struct rtx_def **, int */);\n+#ifdef AOF_ASSEMBLER\n+struct rtx_def *aof_pic_entry (/* struct rtx_def * */);\n+void aof_dump_pic_table (/* FILE * */);\n+char *aof_text_section (/* void */);\n+char *aof_data_section (/* void */);\n+void aof_add_import (/* char * */);\n+void aof_delete_import (/* char * */);\n+void aof_dump_imports (/* FILE * */);\n+#endif"}]}