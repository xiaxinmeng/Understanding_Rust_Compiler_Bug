{"sha": "3e4ceed077aa7e94755fbf6bf213fd4305540bd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0Y2VlZDA3N2FhN2U5NDc1NWZiZjZiZjIxM2ZkNDMwNTU0MGJkOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-07-14T18:52:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-07-14T18:52:16Z"}, "message": "i386.md (nonmemory_szext_operand): New mode attribute.\n\n\t* config/i386/i386.md (nonmemory_szext_operand): New mode attribute.\n\t(test<mode>_ccno_1): Macroize insn pattern from testsi_ccno_1\n\tand testdi_ccno_1 using SWI48 mode attribute.\n\t(*testdi_1): Use x86_64_szext_nonmemory_operand instead of\n\tx86_64_szext_general_operand.\n\t(*testqi_1_maybe_si): Use nonmemory_operand instead of general_operand.\n\t(*test<mode>_1): Use nonmemory_szext_operand mode attribute\n\tinstead of genera_operand mode attribute.\n\nFrom-SVN: r273482", "tree": {"sha": "a0030e9f5599a0c8f0c89a11319f7e216cafd303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0030e9f5599a0c8f0c89a11319f7e216cafd303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4ceed077aa7e94755fbf6bf213fd4305540bd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4ceed077aa7e94755fbf6bf213fd4305540bd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4ceed077aa7e94755fbf6bf213fd4305540bd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4ceed077aa7e94755fbf6bf213fd4305540bd9/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbfde6ee68dab649e3cf86b0ae569f2fc6ef3900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbfde6ee68dab649e3cf86b0ae569f2fc6ef3900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbfde6ee68dab649e3cf86b0ae569f2fc6ef3900"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "81bf833523737f0075c8123a8c9e25f2b5106618", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4ceed077aa7e94755fbf6bf213fd4305540bd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4ceed077aa7e94755fbf6bf213fd4305540bd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e4ceed077aa7e94755fbf6bf213fd4305540bd9", "patch": "@@ -1,3 +1,14 @@\n+2019-07-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (nonmemory_szext_operand): New mode attribute.\n+\t(test<mode>_ccno_1): Macroize insn pattern from testsi_ccno_1\n+\tand testdi_ccno_1 using SWI48 mode attribute.\n+\t(*testdi_1): Use x86_64_szext_nonmemory_operand instead of\n+\tx86_64_szext_general_operand.\n+\t(*testqi_1_maybe_si): Use nonmemory_operand instead of general_operand.\n+\t(*test<mode>_1): Use nonmemory_szext_operand mode attribute\n+\tinstead of genera_operand mode attribute.\n+\n 2019-07-14  Vladislav Ivanishin <vlad@ispras.ru>\n \n \t* gdbhooks.py (DumpFn.invoke): Add explicit casts of return values of"}, {"sha": "58797baa6dc54d18155204c50e5f2720074af0c3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4ceed077aa7e94755fbf6bf213fd4305540bd9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4ceed077aa7e94755fbf6bf213fd4305540bd9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3e4ceed077aa7e94755fbf6bf213fd4305540bd9", "patch": "@@ -1122,6 +1122,12 @@\n \t (SI \"x86_64_szext_general_operand\")\n \t (DI \"x86_64_szext_general_operand\")])\n \n+(define_mode_attr nonmemory_szext_operand\n+\t[(QI \"nonmemory_operand\")\n+\t (HI \"nonmemory_operand\")\n+\t (SI \"x86_64_szext_nonmemory_operand\")\n+\t (DI \"x86_64_szext_nonmemory_operand\")])\n+\n ;; Immediate operand predicate for integer modes.\n (define_mode_attr immediate_operand\n \t[(QI \"immediate_operand\")\n@@ -8118,11 +8124,12 @@\n ;; On Pentium, \"test imm, reg\" is pairable only with eax, ax, and al.\n ;; Note that this excludes ah.\n \n-(define_expand \"testsi_ccno_1\"\n+(define_expand \"test<mode>_ccno_1\"\n   [(set (reg:CCNO FLAGS_REG)\n \t(compare:CCNO\n-\t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\")\n-\t\t  (match_operand:SI 1 \"x86_64_nonmemory_operand\"))\n+\t  (and:SWI48\n+\t    (match_operand:SWI48 0 \"nonimmediate_operand\")\n+\t    (match_operand:SWI48 1 \"<nonmemory_szext_operand>\"))\n \t  (const_int 0)))])\n \n (define_expand \"testqi_ccz_1\"\n@@ -8131,23 +8138,14 @@\n \t\t\t     (match_operand:QI 1 \"nonmemory_operand\"))\n \t\t (const_int 0)))])\n \n-(define_expand \"testdi_ccno_1\"\n-  [(set (reg:CCNO FLAGS_REG)\n-\t(compare:CCNO\n-\t  (and:DI (match_operand:DI 0 \"nonimmediate_operand\")\n-\t\t  (match_operand:DI 1 \"x86_64_szext_general_operand\"))\n-\t  (const_int 0)))]\n-  \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\")\n-\n (define_insn \"*testdi_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t (and:DI\n \t  (match_operand:DI 0 \"nonimmediate_operand\" \"%!*a,r,!*a,r,rm\")\n-\t  (match_operand:DI 1 \"x86_64_szext_general_operand\" \"Z,Z,e,e,re\"))\n+\t  (match_operand:DI 1 \"x86_64_szext_nonmemory_operand\" \"Z,Z,e,e,re\"))\n \t (const_int 0)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{l}\\t{%k1, %k0|%k0, %k1}\n    test{l}\\t{%k1, %k0|%k0, %k1}\n@@ -8163,12 +8161,12 @@\n         (compare\n \t  (and:QI\n \t    (match_operand:QI 0 \"nonimmediate_operand\" \"%!*a,q,qm,r\")\n-\t    (match_operand:QI 1 \"general_operand\" \"n,n,qn,n\"))\n+\t    (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn,n\"))\n \t  (const_int 0)))]\n-   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-    && ix86_match_ccmode (insn,\n- \t\t\t CONST_INT_P (operands[1])\n- \t\t\t && INTVAL (operands[1]) >= 0 ? CCNOmode : CCZmode)\"\n+\n+  \"ix86_match_ccmode (insn,\n+\t\t      CONST_INT_P (operands[1])\n+\t\t      && INTVAL (operands[1]) >= 0 ? CCNOmode : CCZmode)\"\n {\n   if (which_alternative == 3)\n     {\n@@ -8188,10 +8186,9 @@\n \t(compare\n \t (and:SWI124\n \t  (match_operand:SWI124 0 \"nonimmediate_operand\" \"%!*a,<r>,<r>m\")\n-\t  (match_operand:SWI124 1 \"<general_operand>\" \"<i>,<i>,<r><i>\"))\n+\t  (match_operand:SWI124 1 \"<nonmemory_szext_operand>\" \"<i>,<i>,<r><i>\"))\n \t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"modrm\" \"0,1,1\")"}]}