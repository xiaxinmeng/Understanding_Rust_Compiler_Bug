{"sha": "d1cf5fcabd07a1b842ea2d88f00e5f1195efb528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjZjVmY2FiZDA3YTFiODQyZWEyZDg4ZjAwZTVmMTE5NWVmYjUyOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-10-11T20:40:41Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-10-11T20:40:41Z"}, "message": "* gengtype-yacc.y: Delete.\n\nFrom-SVN: r129240", "tree": {"sha": "1dfe734b5818ab8ecb0038453146eb178bbc9902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfe734b5818ab8ecb0038453146eb178bbc9902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528/comments", "author": null, "committer": null, "parents": [{"sha": "d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70e9d81564c69dbcf03ea1539df7b416a2de4c1"}], "stats": {"total": 230, "additions": 4, "deletions": 226}, "files": [{"sha": "56e0b1755dfbb5e7d49ca77cb3533963aa50bbc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1cf5fcabd07a1b842ea2d88f00e5f1195efb528", "patch": "@@ -1,3 +1,7 @@\n+2007-10-11  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gengtype-yacc.y: Delete.\n+\n 2007-10-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (AX_REG, BX_REG, CX_REG): New constants."}, {"sha": "235ec546bf52cd6c22cfeb94ed48ff8c387494c8", "filename": "gcc/gengtype-yacc.y", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/gcc%2Fgengtype-yacc.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e9d81564c69dbcf03ea1539df7b416a2de4c1/gcc%2Fgengtype-yacc.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-yacc.y?ref=d70e9d81564c69dbcf03ea1539df7b416a2de4c1", "patch": "@@ -1,226 +0,0 @@\n-/* -*- indented-text -*- */\n-/* Process source files and output type information.\n-   Copyright (C) 2002, 2004, 2007 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-%{\n-#include \"bconfig.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"gengtype.h\"\n-#define YYERROR_VERBOSE\n-%}\n-\n-%union {\n-  type_p t;\n-  pair_p p;\n-  options_p o;\n-  const char *s;\n-}\n-\n-%token <s>ENT_TYPEDEF_STRUCT\n-%token <s>ENT_STRUCT\n-%token <s>ENT_TYPEDEF_UNION\n-%token <s>ENT_UNION\n-%token ENT_EXTERNSTATIC\n-%token GTY_TOKEN\n-%token VEC_TOKEN\n-%token UNION\n-%token STRUCT\n-%token ENUM\n-%token ALIAS\n-%token NESTED_PTR\n-%token <s>PARAM_IS\n-%token NUM\n-%token <s>SCALAR\n-%token <s>ID\n-%token <s>STRING\n-%token <s>ARRAY\n-%token <s>CHAR\n-\n-%type <p> struct_fields\n-%type <t> type lasttype\n-%type <o> optionsopt options optionseq\n-%type <s> type_option stringseq\n-\n-%%\n-\n-start: /* empty */\n-       | typedef_struct start\n-       | externstatic start\n-       | start\n-       ;\n-\n-typedef_struct: ENT_TYPEDEF_STRUCT options '{' struct_fields '}' ID\n-\t\t   {\n-\t\t     type_p t = new_structure ($1, false, &lexer_line, $4, $2);\n-\t\t     do_typedef ($6, t, &lexer_line);\n-\t\t     lexer_toplevel_done = 1;\n-\t\t   }\n-\t\t  ';'\n-\t\t| ENT_TYPEDEF_UNION options '{' struct_fields '}' ID\n-\t\t   {\n-\t\t     type_p t = new_structure ($1, true, &lexer_line, $4, $2);\n-\t\t     do_typedef ($6, t, &lexer_line);\n-\t\t     lexer_toplevel_done = 1;\n-\t\t   }\n-\t\t  ';'\n-\t\t| ENT_STRUCT options '{' struct_fields '}'\n-\t\t   {\n-\t\t     new_structure ($1, false, &lexer_line, $4, $2);\n-\t\t     lexer_toplevel_done = 1;\n-\t\t   }\n-\t\t  ';'\n-\t\t| ENT_UNION options '{' struct_fields '}'\n-\t\t   {\n-\t\t     new_structure ($1, true, &lexer_line, $4, $2);\n-\t\t     lexer_toplevel_done = 1;\n-\t\t   }\n-\t\t  ';'\n-\t\t;\n-\n-externstatic: ENT_EXTERNSTATIC options lasttype ID semiequal\n-\t         {\n-\t           note_variable ($4, adjust_field_type ($3, $2), $2,\n-\t\t\t\t  &lexer_line);\n-\t         }\n-\t      | ENT_EXTERNSTATIC options lasttype ID ARRAY semiequal\n-\t         {\n-\t           note_variable ($4, create_array ($3, $5),\n-\t      \t\t    $2, &lexer_line);\n-\t         }\n-\t      | ENT_EXTERNSTATIC options lasttype ID ARRAY ARRAY semiequal\n-\t         {\n-\t           note_variable ($4, create_array (create_array ($3, $6),\n-\t      \t\t\t\t      $5),\n-\t      \t\t    $2, &lexer_line);\n-\t         }\n-\t      ;\n-\n-lasttype: type\n-\t    {\n-\t      lexer_toplevel_done = 1;\n-\t      $$ = $1;\n-\t    }\n-\t    ;\n-\n-semiequal: ';'\n-\t   | '='\n-\t   ;\n-\n-struct_fields: { $$ = NULL; }\n-\t       | type optionsopt ID bitfieldopt ';' struct_fields\n-\t          {\n-\t\t    $$ = create_field_at ($6, $1, $3, $2, &lexer_line);\n-\t\t  }\n-\t       | type optionsopt ID ARRAY ';' struct_fields\n-\t          {\n-\t\t    $$ = create_field_at ($6, create_array ($1, $4),\n-\t\t    \t\t\t  $3, $2, &lexer_line);\n-\t\t  }\n-\t       | type optionsopt ID ARRAY ARRAY ';' struct_fields\n-\t          {\n-\t\t    type_p arr = create_array (create_array ($1, $5), $4);\n-\t\t    $$ = create_field_at ($7, arr, $3, $2, &lexer_line);\n-\t\t  }\n-\t       | type ':' bitfieldlen ';' struct_fields\n-\t\t  { $$ = $5; }\n-\t       ;\n-\n-bitfieldopt: /* empty */\n-\t     | ':' bitfieldlen\n-\t     ;\n-\n-bitfieldlen: NUM | ID\n-\t\t{ }\n-\t     ;\n-\n-type: SCALAR\n-         { $$ = create_scalar_type ($1); }\n-      | ID\n-         { $$ = resolve_typedef ($1, &lexer_line); }\n-      | VEC_TOKEN '(' ID ',' ID ')'\n-         { $$ = resolve_typedef (concat (\"VEC_\", $3, \"_\", $5, (char *)0),\n-\t      \t\t\t &lexer_line); }\n-      | type '*'\n-         { $$ = create_pointer ($1); }\n-      | STRUCT ID '{' struct_fields '}'\n-         { $$ = new_structure ($2, 0, &lexer_line, $4, NULL); }\n-      | STRUCT ID\n-         { $$ = find_structure ($2, 0); }\n-      | UNION ID '{' struct_fields '}'\n-         { $$ = new_structure ($2, 1, &lexer_line, $4, NULL); }\n-      | UNION ID\n-         { $$ = find_structure ($2, 1); }\n-      | ENUM ID\n-         { $$ = create_scalar_type ($2); }\n-      | ENUM ID '{' enum_items '}'\n-         { $$ = create_scalar_type ($2); }\n-      ;\n-\n-enum_items: /* empty */\n-\t    | ID '=' NUM ',' enum_items\n-\t      { }\n-\t    | ID ',' enum_items\n-\t      { }\n-\t    | ID enum_items\n-\t      { }\n-\t    ;\n-\n-optionsopt: { $$ = NULL; }\n-\t    | options { $$ = $1; }\n-\t    ;\n-\n-options: GTY_TOKEN '(' '(' optionseq ')' ')'\n-\t   { $$ = $4; }\n-\t ;\n-\n-type_option : ALIAS\n-\t        { $$ = \"ptr_alias\"; }\n-\t      | PARAM_IS\n-\t        { $$ = $1; }\n-\t      ;\n-\n-optionseq: { $$ = NULL; }\n-\t| optionseq commaopt ID\n-\t   { $$ = create_option ($1, $3, (void *)\"\"); }\n-\t| optionseq commaopt ID '(' stringseq ')'\n-\t   { $$ = create_option ($1, $3, (void *)$5); }\n-\t| optionseq commaopt type_option '(' type ')'\n-\t   { $$ = create_option ($1, $3, adjust_field_type ($5, 0)); }\n-\t| optionseq commaopt NESTED_PTR '(' type ',' stringseq ',' stringseq ')'\n-\t   { $$ = create_nested_ptr_option ($1, $5, $7, $9); }\n-\n-commaopt: /* nothing */\n-\t  | ','\n-\t  ;\n-\n-stringseq: STRING\n-\t     { $$ = $1; }\n-\t   | stringseq STRING\n-\t     {\n-\t       size_t l1 = strlen ($1);\n-\t       size_t l2 = strlen ($2);\n-\t       char *s = XRESIZEVEC (char, $1, l1 + l2 + 1);\n-\t       memcpy (s + l1, $2, l2 + 1);\n-\t       XDELETE ($2);\n-\t       $$ = s;\n-\t     }\n-\t   ;\n-%%"}]}