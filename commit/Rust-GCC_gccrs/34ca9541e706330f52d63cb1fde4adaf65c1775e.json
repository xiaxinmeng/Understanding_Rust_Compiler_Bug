{"sha": "34ca9541e706330f52d63cb1fde4adaf65c1775e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjYTk1NDFlNzA2MzMwZjUyZDYzY2IxZmRlNGFkYWY2NWMxNzc1ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-14T09:40:56Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-14T09:40:56Z"}, "message": "cpperror.c, [...]: Never call abort.\n\n1999-04-14 12:37 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* cpperror.c, cppexp.c, cpplib.c: Never call abort.\n\t* cpphash.c: Only call abort when we detect corruption of the\n\tmalloc arena.\n\t* cppmain.c: Don't define fatal or fancy_abort.\n\nFrom-SVN: r26442", "tree": {"sha": "5c0f7e812107a4a1edffd2adab583d43d11252a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c0f7e812107a4a1edffd2adab583d43d11252a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34ca9541e706330f52d63cb1fde4adaf65c1775e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ca9541e706330f52d63cb1fde4adaf65c1775e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ca9541e706330f52d63cb1fde4adaf65c1775e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ca9541e706330f52d63cb1fde4adaf65c1775e/comments", "author": null, "committer": null, "parents": [{"sha": "42ebbb0a1d80d913a908b73aecf718e98f08cac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ebbb0a1d80d913a908b73aecf718e98f08cac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ebbb0a1d80d913a908b73aecf718e98f08cac4"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "30745256021e577754fcd7591d1c07b3bde8fe91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34ca9541e706330f52d63cb1fde4adaf65c1775e", "patch": "@@ -1,3 +1,10 @@\n+1999-04-14 12:37 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* cpperror.c, cppexp.c, cpplib.c: Never call abort.\n+\t* cpphash.c: Only call abort when we detect corruption of the\n+\tmalloc arena.\n+\t* cppmain.c: Don't define fatal or fancy_abort.\n+\n Wed Apr 14 09:19:39 1999  Jan Hubicka <hubicka@freesoft.cz>\n \n \t* i386.c (x86_adjust_cost): Agi stall takes 1 cycle on Pentium, fst\n@@ -36,7 +43,7 @@ Wed Apr 14 00:08:46 1999  Richard Henderson  <rth@cygnus.com>\n \t* i386.h (memory_address_length): Declare it.\n \n Tue Apr 13 22:52:04 1999  Donn Terry (donn@interix.com)\n-                          Martin Heller (Ing.-Buero_Heller@t-online.de)\n+\t\t\t  Martin Heller (Ing.-Buero_Heller@t-online.de)\n \n \t* configure.in (interix Alpha): Add. \n \t(winnt Alpha): Use alpha32.h\n@@ -55,7 +62,7 @@ Tue Apr 13 22:52:04 1999  Donn Terry (donn@interix.com)\n \n \t* config/alpha/xm-alpha-interix.h: New file.\n \n-        * config/alpha/t-interix: New file.\n+\t* config/alpha/t-interix: New file.\n \n \t* fixinc/mkfixinc.sh (interix/Alpha): Add.\n "}, {"sha": "c7339dcb8088680fe689e040961ebf81a9ef6e91", "filename": "gcc/cpperror.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=34ca9541e706330f52d63cb1fde4adaf65c1775e", "patch": "@@ -114,7 +114,7 @@ v_cpp_message (pfile, is_error, msgid, ap)\n       pfile->errors = CPP_FATAL_LIMIT;\n       break;\n     default:\n-      abort ();\n+      cpp_fatal (pfile, \"internal error: bad is_error(%d) in v_cpp_message\", is_error);\n     }\n \n   vfprintf (stderr, _(msgid), ap);"}, {"sha": "aef6d195dc63d92dd7c679ffa78c73a7d8ad4400", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=34ca9541e706330f52d63cb1fde4adaf65c1775e", "patch": "@@ -721,7 +721,8 @@ cpp_parse_expr (pfile)\n       switch (op.op)\n \t{\n \tcase NAME:\n-\t  abort ();\n+\t  cpp_fatal (pfile, \"internal error: cpp_lex returns a NAME\");\n+\t  goto syntax_error;\n \tcase INT:  case CHAR:\n \t  top->value = op.value;\n \t  top->unsignedp = op.unsignedp;"}, {"sha": "6e601a0fd5e3470d4ee5a1212960af8da352ae04", "filename": "gcc/cpphash.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=34ca9541e706330f52d63cb1fde4adaf65c1775e", "patch": "@@ -26,6 +26,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"system.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n+#undef abort\n \n static int comp_def_part\t PARAMS ((int, U_CHAR *, int, U_CHAR *,\n \t\t\t\t\t  int, int));\n@@ -290,7 +291,10 @@ collect_expansion (pfile, buf, limit, nargs, arglist)\n      that something smarter should happen.  */\n \n   if (limit < buf)\n-    abort ();\n+    {\n+      cpp_fatal (pfile, \"internal error: limit < buf in collect_expansion\");\n+      limit = buf; /* treat it like a null defn */\n+    }\n \n   /* Find the beginning of the trailing whitespace.  */\n   p = buf;\n@@ -1011,9 +1015,6 @@ special_symbol (hp, pfile)\n       cpp_fatal (pfile, \"cpplib internal error: invalid special hash type\");\n       return;\n     }\n-\n-  /* This point should be unreachable. */\n-  abort ();\n }\n \n /* Expand a macro call.\n@@ -1408,7 +1409,10 @@ macroexpand (pfile, hp)\n \t    }\n \n \t  if (totlen > xbuf_len)\n-\t    abort ();\n+\t    {\n+\t      cpp_fatal (pfile, \"internal_error: buffer overrun in macroexpand\");\n+\t      return;\n+\t    }\n \t}\n \n       /* if there is anything left of the definition"}, {"sha": "aa198dd931bc6918b18343be399d9c64e5b485a5", "filename": "gcc/cpplib.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=34ca9541e706330f52d63cb1fde4adaf65c1775e", "patch": "@@ -836,7 +836,10 @@ cpp_expand_to_buffer (pfile, buf, length)\n #endif\n \n   if (length < 0)\n-    abort ();\n+    {\n+      cpp_fatal (pfile, \"internal error: length < 0 in cpp_expand_to_buffer\");\n+      return;\n+    }\n \n   /* Set up the input on the input stack.  */\n "}, {"sha": "5142cad918f0941be36913b89e9fcfb8b5f85b29", "filename": "gcc/cppmain.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ca9541e706330f52d63cb1fde4adaf65c1775e/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=34ca9541e706330f52d63cb1fde4adaf65c1775e", "patch": "@@ -37,24 +37,6 @@ char *progname;\n cpp_reader parse_in;\n cpp_options options;\n \n-#ifdef abort\n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-void\n-fatal (s)\n-     char *s;\n-{\n-  fputs (s, stderr);\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-#endif\n-\n \f\n int\n main (argc, argv)"}]}