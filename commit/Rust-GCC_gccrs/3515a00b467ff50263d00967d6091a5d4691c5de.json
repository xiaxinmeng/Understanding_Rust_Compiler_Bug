{"sha": "3515a00b467ff50263d00967d6091a5d4691c5de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxNWEwMGI0NjdmZjUwMjYzZDAwOTY3ZDYwOTFhNWQ0NjkxYzVkZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-03-26T15:46:14Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-03-26T15:46:14Z"}, "message": "re PR tree-optimization/50052 (FAIL: gcc.dg/ipa/ipa-sra-2.c scan-tree-dump eipa_sra)\n\n2012-03-26  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/50052\n\t* tree-sra.c (tree_non_aligned_mem_p): Removed.\n\t(tree_non_aligned_mem_for_access_p): Likewise.\n\t(build_accesses_from_assign): Removed strict alignment requirements\n\tchecks.\n\t(access_precludes_ipa_sra_p): Likewise.\n\n\t* testsuite/gcc.dg/ipa/ipa-sra-2.c: Also run on strict-alignment\n\tplatforms.\n\nFrom-SVN: r185807", "tree": {"sha": "9dffc470a7ede6e5dcb4084aecdc835c621898a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dffc470a7ede6e5dcb4084aecdc835c621898a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3515a00b467ff50263d00967d6091a5d4691c5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3515a00b467ff50263d00967d6091a5d4691c5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3515a00b467ff50263d00967d6091a5d4691c5de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3515a00b467ff50263d00967d6091a5d4691c5de/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a0fd3d33a579a85ddb18636da888eea727006b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0fd3d33a579a85ddb18636da888eea727006b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0fd3d33a579a85ddb18636da888eea727006b5"}], "stats": {"total": 74, "additions": 15, "deletions": 59}, "files": [{"sha": "697b5b1f3459671c109179b895e06f81f6418591", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3515a00b467ff50263d00967d6091a5d4691c5de", "patch": "@@ -1,3 +1,12 @@\n+2012-03-26  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50052\n+\t* tree-sra.c (tree_non_aligned_mem_p): Removed.\n+\t(tree_non_aligned_mem_for_access_p): Likewise.\n+\t(build_accesses_from_assign): Removed strict alignment requirements\n+\tchecks.\n+\t(access_precludes_ipa_sra_p): Likewise.\n+\n 2012-03-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52701"}, {"sha": "e28c3dd0f51700815b543b34bd8e5f425d3517a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3515a00b467ff50263d00967d6091a5d4691c5de", "patch": "@@ -1,3 +1,8 @@\n+2012-03-26  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50052\n+\t* gcc.dg/ipa/ipa-sra-2.c: Also run on strict-alignment platforms.\n+\n 2012-03-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52701"}, {"sha": "3437a81aa2cc93e19386408ff9b02b9ffd98c8c4", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-sra-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-2.c?ref=3515a00b467ff50263d00967d6091a5d4691c5de", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fipa-sra -fdump-tree-eipa_sra-details\"  } */\n-/* { dg-require-effective-target non_strict_align } */\n \n struct bovid\n {"}, {"sha": "4d1aa5f1ecaf7891830e28b68f241b030e74fe19", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 58, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3515a00b467ff50263d00967d6091a5d4691c5de/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=3515a00b467ff50263d00967d6091a5d4691c5de", "patch": "@@ -1081,53 +1081,6 @@ disqualify_ops_if_throwing_stmt (gimple stmt, tree lhs, tree rhs)\n   return false;\n }\n \n-/* Return true if EXP is a memory reference less aligned than ALIGN.  This is\n-   invoked only on strict-alignment targets.  */\n-\n-static bool\n-tree_non_aligned_mem_p (tree exp, unsigned int align)\n-{\n-  unsigned int exp_align;\n-\n-  if (TREE_CODE (exp) == VIEW_CONVERT_EXPR)\n-    exp = TREE_OPERAND (exp, 0);\n-\n-  if (TREE_CODE (exp) == SSA_NAME || is_gimple_min_invariant (exp))\n-    return false;\n-\n-  /* get_object_alignment will fall back to BITS_PER_UNIT if it cannot\n-     compute an explicit alignment.  Pretend that dereferenced pointers\n-     are always aligned on strict-alignment targets.  */\n-  if (TREE_CODE (exp) == MEM_REF || TREE_CODE (exp) == TARGET_MEM_REF)\n-    exp_align = get_object_or_type_alignment (exp);\n-  else\n-    exp_align = get_object_alignment (exp);\n-\n-  if (exp_align < align)\n-    return true;\n-\n-  return false;\n-}\n-\n-/* Return true if EXP is a memory reference less aligned than what the access\n-   ACC would require.  This is invoked only on strict-alignment targets.  */\n-\n-static bool\n-tree_non_aligned_mem_for_access_p (tree exp, struct access *acc)\n-{\n-  unsigned int acc_align;\n-\n-  /* The alignment of the access is that of its expression.  However, it may\n-     have been artificially increased, e.g. by a local alignment promotion,\n-     so we cap it to the alignment of the type of the base, on the grounds\n-     that valid sub-accesses cannot be more aligned than that.  */\n-  acc_align = get_object_alignment (acc->expr);\n-  if (acc->base && acc_align > TYPE_ALIGN (TREE_TYPE (acc->base)))\n-    acc_align = TYPE_ALIGN (TREE_TYPE (acc->base));\n-\n-  return tree_non_aligned_mem_p (exp, acc_align);\n-}\n-\n /* Scan expressions occuring in STMT, create access structures for all accesses\n    to candidates for scalarization and remove those candidates which occur in\n    statements or expressions that prevent them from being split apart.  Return\n@@ -1154,20 +1107,14 @@ build_accesses_from_assign (gimple stmt)\n   lacc = build_access_from_expr_1 (lhs, stmt, true);\n \n   if (lacc)\n-    {\n-      lacc->grp_assignment_write = 1;\n-      if (STRICT_ALIGNMENT && tree_non_aligned_mem_for_access_p (rhs, lacc))\n-        lacc->grp_unscalarizable_region = 1;\n-    }\n+    lacc->grp_assignment_write = 1;\n \n   if (racc)\n     {\n       racc->grp_assignment_read = 1;\n       if (should_scalarize_away_bitmap && !gimple_has_volatile_ops (stmt)\n \t  && !is_gimple_reg_type (racc->type))\n \tbitmap_set_bit (should_scalarize_away_bitmap, DECL_UID (racc->base));\n-      if (STRICT_ALIGNMENT && tree_non_aligned_mem_for_access_p (lhs, racc))\n-        racc->grp_unscalarizable_region = 1;\n     }\n \n   if (lacc && racc\n@@ -3835,10 +3782,6 @@ access_precludes_ipa_sra_p (struct access *access)\n \t  || gimple_code (access->stmt) == GIMPLE_ASM))\n     return true;\n \n-  if (STRICT_ALIGNMENT\n-      && tree_non_aligned_mem_p (access->expr, TYPE_ALIGN (access->type)))\n-    return true;\n-\n   return false;\n }\n "}]}