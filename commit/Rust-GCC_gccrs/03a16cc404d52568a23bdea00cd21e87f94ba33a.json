{"sha": "03a16cc404d52568a23bdea00cd21e87f94ba33a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhMTZjYzQwNGQ1MjU2OGEyM2JkZWEwMGNkMjFlODdmOTRiYTMzYQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-04-27T20:40:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-04-27T20:40:29Z"}, "message": "Add support for std::uncaught_exceptions.\n\n2015-04-27  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tAdd support for std::uncaught_exceptions.\n\t* acinclude.m4: Bump libtool_VERSION.\n\t* config/abi/pre/gnu.ver: Export the new symbol.\n\t* configure: Regenerate.\n\t* libsupc++/eh_catch.cc (uncaught_exceptions): New.\n\t* libsupc++/exception (uncaught_exceptions): New.\n\t* testsuite/18_support/uncaught_exceptions/uncaught_exceptions.cc: New.\n\t* testsuite/util/testsuite_abi.cc: Add 3.4.22 as the latest version.\n\nFrom-SVN: r222482", "tree": {"sha": "5544eb760b9229b47fae84eaf7796ca03765d89d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5544eb760b9229b47fae84eaf7796ca03765d89d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a16cc404d52568a23bdea00cd21e87f94ba33a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a16cc404d52568a23bdea00cd21e87f94ba33a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a16cc404d52568a23bdea00cd21e87f94ba33a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a16cc404d52568a23bdea00cd21e87f94ba33a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5eedc39151dca5788a9b070bf72a806db69e57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eedc39151dca5788a9b070bf72a806db69e57a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5eedc39151dca5788a9b070bf72a806db69e57a"}], "stats": {"total": 200, "additions": 197, "deletions": 3}, "files": [{"sha": "c67471048901a8b3e37f63ac623ea1e36cf9f730", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=03a16cc404d52568a23bdea00cd21e87f94ba33a", "patch": "@@ -1,3 +1,14 @@\n+2015-04-27  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tAdd support for std::uncaught_exceptions.\n+\t* acinclude.m4: Bump libtool_VERSION.\n+\t* config/abi/pre/gnu.ver: Export the new symbol.\n+\t* configure: Regenerate.\n+\t* libsupc++/eh_catch.cc (uncaught_exceptions): New.\n+\t* libsupc++/exception (uncaught_exceptions): New.\n+\t* testsuite/18_support/uncaught_exceptions/uncaught_exceptions.cc: New.\n+\t* testsuite/util/testsuite_abi.cc: Add 3.4.22 as the latest version.\n+\n 2015-04-27  Dmitry Prokoptsev  <dprokoptsev@gmail.com>\n \t    Michael Hanselmann  <public@hansmi.ch>\n "}, {"sha": "196b4ff1b37898cb76bac2e31d56775450bba89a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=03a16cc404d52568a23bdea00cd21e87f94ba33a", "patch": "@@ -3383,7 +3383,7 @@ changequote([,])dnl\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:21:0\n+libtool_VERSION=6:22:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "4ed683cf36e5d7f0631e8859c0dffd7877d406af", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=03a16cc404d52568a23bdea00cd21e87f94ba33a", "patch": "@@ -178,7 +178,6 @@ GLIBCXX_3.4 {\n #     std::[A-Zu-z]*;\n #     std::underflow_error::u*;\n #     std::underflow_error::~u*;\n-      std::uncaught_exception*;\n       std::unexpected*;\n       std::[A-Zv-z]*;\n       std::_List_node_base::hook*;\n@@ -1024,6 +1023,9 @@ GLIBCXX_3.4 {\n     _ZNSt6locale5_Impl19_M_replace_categoryEPKS0_PKPKNS_2idE;\n     _ZNSt6locale5_Impl21_M_replace_categoriesEPKS0_i;\n \n+    # std::uncaught_exception()\n+    _ZSt18uncaught_exceptionv;\n+\n   # DO NOT DELETE THIS LINE.  Port-specific symbols, if any, will be here.\n \n   local:\n@@ -1860,6 +1862,12 @@ GLIBCXX_3.4.21 {\n \n } GLIBCXX_3.4.20;\n \n+GLIBCXX_3.4.22 {\n+\n+    # std::uncaught_exception()\n+    _ZSt19uncaught_exceptionsv;\n+\n+} GLIBCXX_3.4.21;\n \n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {"}, {"sha": "723ae56723df286c3d421037847e88d0ad089b52", "filename": "libstdc++-v3/libsupc++/eh_catch.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc?ref=03a16cc404d52568a23bdea00cd21e87f94ba33a", "patch": "@@ -139,3 +139,10 @@ std::uncaught_exception() throw()\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   return globals->uncaughtExceptions != 0;\n }\n+\n+int\n+std::uncaught_exceptions() throw()\n+{\n+  __cxa_eh_globals *globals = __cxa_get_globals ();\n+  return globals->uncaughtExceptions;\n+}"}, {"sha": "069b33cd8dabf80d1817ce3943ed4acceeec1774", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=03a16cc404d52568a23bdea00cd21e87f94ba33a", "patch": "@@ -126,6 +126,11 @@ namespace std\n    */\n   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n \n+#if !defined(__STRICT_ANSI__) || __cplusplus > 201402L\n+#define __cpp_lib_uncaught_exceptions 201411\n+  int uncaught_exceptions() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n+#endif\n+\n   // @} group exceptions\n } // namespace std\n "}, {"sha": "001903e8b97631b952c199c1c5c36e171caa6e9b", "filename": "libstdc++-v3/testsuite/18_support/uncaught_exceptions/uncaught_exceptions.cc", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Funcaught_exceptions%2Funcaught_exceptions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Funcaught_exceptions%2Funcaught_exceptions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Funcaught_exceptions%2Funcaught_exceptions.cc?ref=03a16cc404d52568a23bdea00cd21e87f94ba33a", "patch": "@@ -0,0 +1,162 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <cassert>\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+struct UncaughtVerifier\n+{\n+  int expected_count_ = 0;\n+  UncaughtVerifier(int expected_count) : expected_count_(expected_count) {}\n+  ~UncaughtVerifier()\n+  {\n+    VERIFY(std::uncaught_exceptions() == expected_count_);\n+  }\n+};\n+\n+struct Transaction\n+{\n+  int initial_count_;\n+  bool& result_;\n+  Transaction(bool& result)\n+  : initial_count_(std::uncaught_exceptions()),\n+    result_(result) {}\n+  ~Transaction()\n+  {\n+    if (std::uncaught_exceptions() != initial_count_) {\n+      result_ = false;\n+    }\n+  }\n+};\n+\n+void test01()\n+{\n+  try {\n+    UncaughtVerifier uv{0};\n+  } catch (...) {\n+    UncaughtVerifier uv{0};\n+  }\n+}\n+\n+void test02()\n+{\n+  try {\n+    UncaughtVerifier uv{1};\n+    throw 0;\n+  } catch (...) {\n+    UncaughtVerifier uv{0};\n+  }\n+}\n+\n+void test03()\n+{\n+  try {\n+    struct Wrap\n+    {\n+      UncaughtVerifier uv_{1};\n+      ~Wrap() {try {UncaughtVerifier uv2{2}; throw 0;} catch(...) {}}\n+    };\n+    Wrap w;\n+    throw 0;\n+  } catch (...) {\n+    UncaughtVerifier uv{0};\n+  }\n+}\n+\n+void test04()\n+{\n+  bool result = true;\n+  try {\n+    Transaction t{result};\n+  } catch(...) {\n+  }\n+  VERIFY(result);\n+}\n+\n+void test05()\n+{\n+  bool result = true;\n+  try {\n+    Transaction t{result};\n+    throw 0;\n+  } catch(...) {\n+  }\n+  VERIFY(!result);\n+}\n+\n+void test06()\n+{\n+  bool result = true;\n+  bool result2 = true;\n+  try {\n+    struct Wrap\n+    {\n+      bool& result_;\n+      Wrap(bool& result) : result_(result) {}\n+      ~Wrap()\n+      {\n+        Transaction t{result_};\n+      }\n+    };\n+    Transaction t{result};\n+    Wrap w{result2};\n+    throw 0;\n+  } catch(...) {\n+  }\n+  VERIFY(!result);\n+  VERIFY(result2);\n+}\n+\n+void test07()\n+{\n+  bool result = true;\n+  bool result2 = true;\n+  try {\n+    struct Wrap\n+    {\n+      bool& result_;\n+      Wrap(bool& result) : result_(result) {}\n+      ~Wrap()\n+      {\n+        try {\n+          Transaction t{result_};\n+          throw 0;\n+        } catch(...) {}\n+      }\n+    };\n+    Transaction t{result};\n+    Wrap w{result2};\n+    throw 0;\n+  } catch(...) {\n+  }\n+  VERIFY(!result);\n+  VERIFY(!result2);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+  test07();\n+}"}, {"sha": "7b76b688155f23750f910bd1b9add7c60be8a354", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a16cc404d52568a23bdea00cd21e87f94ba33a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=03a16cc404d52568a23bdea00cd21e87f94ba33a", "patch": "@@ -201,6 +201,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.19\");\n       known_versions.push_back(\"GLIBCXX_3.4.20\");\n       known_versions.push_back(\"GLIBCXX_3.4.21\");\n+      known_versions.push_back(\"GLIBCXX_3.4.22\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.21\");\n       known_versions.push_back(\"CXXABI_1.3\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n@@ -230,7 +231,7 @@ check_version(symbol& test, bool added)\n \ttest.version_status = symbol::incompatible;\n \n       // Check that added symbols are added in the latest pre-release version.\n-      bool latestp = (test.version_name == \"GLIBCXX_3.4.21\"\n+      bool latestp = (test.version_name == \"GLIBCXX_3.4.22\"\n \t\t     || test.version_name == \"CXXABI_1.3.9\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");"}]}