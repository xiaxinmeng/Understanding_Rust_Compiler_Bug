{"sha": "6784c6e03313eefa52ceb1a40776051ad1a720f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc4NGM2ZTAzMzEzZWVmYTUyY2ViMWE0MDc3NjA1MWFkMWE3MjBmMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-15T10:17:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-15T10:17:45Z"}, "message": "sse.md (*vec_concatv2sf_sse4_1): New insn pattern.\n\n\t* config/i386/sse.md (*vec_concatv2sf_sse4_1): New insn pattern.\n\t(*vec_concatv2si_sse4_1): Use vector_move_operand predicate\n\tfor operand 2.  Remove pinsr{q,d} with 0x0 immediate operand from\n\tinsn alternatives.  Add missing alternatives.\n\t(*vec_concatv2di_rex64_sse4_1): Likewise.\n\t(*vec_concatv2si_sse2): Use \"x\" register constraint instead of \"Y2\".\n\t(*vec_concatv2di_rex64_sse): Rename from *vec_concatv2di_rex64.\n\tRequire TARGET_SSE.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse-set-ps-1.c: New.\n\t* gcc.target/i386/sse4_1-set-ps-1.c: Likewise.\n\nFrom-SVN: r135331", "tree": {"sha": "e8e3101b543bf334b3bf8de5dd2921affe40734b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e3101b543bf334b3bf8de5dd2921affe40734b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6784c6e03313eefa52ceb1a40776051ad1a720f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6784c6e03313eefa52ceb1a40776051ad1a720f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6784c6e03313eefa52ceb1a40776051ad1a720f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6784c6e03313eefa52ceb1a40776051ad1a720f1/comments", "author": null, "committer": null, "parents": [{"sha": "8ded35f90c50bd3ff06e75f0bc90dc611360dcac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ded35f90c50bd3ff06e75f0bc90dc611360dcac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ded35f90c50bd3ff06e75f0bc90dc611360dcac"}], "stats": {"total": 213, "additions": 167, "deletions": 46}, "files": [{"sha": "a76ec9d81ef89abb5b37c8a7e093794390fd9300", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6784c6e03313eefa52ceb1a40776051ad1a720f1", "patch": "@@ -1,3 +1,15 @@\n+2008-05-15  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/sse.md (*vec_concatv2sf_sse4_1): New insn pattern.\n+\t(*vec_concatv2si_sse4_1): Use vector_move_operand predicate\n+\tfor operand 2.  Remove pinsr{q,d} with 0x0 immediate operand from\n+\tinsn alternatives.  Add missing alternatives.\n+\t(*vec_concatv2di_rex64_sse4_1): Likewise.\n+\t(*vec_concatv2si_sse2): Use \"x\" register constraint instead of \"Y2\".\n+\t(*vec_concatv2di_rex64_sse): Rename from *vec_concatv2di_rex64.\n+\tRequire TARGET_SSE.\n+\n 2008-05-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36009\n@@ -71,8 +83,7 @@\n \t(vrotl@var{m}3): Ditto.\n \t(vrotr@var{m}3): Ditto.\n \n-\t* config/i386/i386.md (PPERM_SRC): Move PPERM masks here from\n-\ti386.c.\n+\t* config/i386/i386.md (PPERM_SRC): Move PPERM masks here from i386.c.\n \t(PPERM_INVERT): Ditto.\n \t(PPERM_REVERSE): Ditto.\n \t(PPERM_REV_INV): Ditto.\n@@ -122,8 +133,7 @@\n \t* config/rs6000/rs6000.c (bdesc_2arg): Change the names of vector\n \tshift patterns.\n \n-\t* config/rs6000/altivec.md (vashl<mode>3): Rename from\n-\tashl<mode>3.\n+\t* config/rs6000/altivec.md (vashl<mode>3): Rename from ashl<mode>3.\n \t(vlshr<mode>3): Rename from vlshr<mode>3.\n \t(vashr<mode>3): Rename from vashr<mode>3.\n \t(mulv4sf3): Change the names of vector shift patterns.\n@@ -133,8 +143,7 @@\n \t* config/spu/spu.c (spu_initialize_trampoline): Rename vector\n \tshift insns.\n \n-\t* config/spu/spu-builtins.def (SI_SHLH): Rename vector shift\n-\tinsns.\n+\t* config/spu/spu-builtins.def (SI_SHLH): Rename vector shift insns.\n \t(SI_SHLHI): Ditto.\n \t(SI_SHL): Ditto.\n \t(SI_SHLI): Ditto.\n@@ -176,9 +185,8 @@\n 2008-05-14  Michael Meissner  <michael.meissner@amd.com>\n \n \tPR target/36224\n-\t* config/i386/sse.md (vec_widen_smult_hi_v4si): Delete, using\n-\tunsigned multiply gives the wrong value when doing widening\n-\tmultiplies.\n+\t* config/i386/sse.md (vec_widen_smult_hi_v4si): Delete, using unsigned\n+\tmultiply gives the wrong value when doing widening multiplies.\n \t(vec_widen_smult_lo_v4si): Ditto.\n \n 2008-05-14  Kenneth Zadeck <zadeck@naturalbridge.com>\n@@ -207,8 +215,7 @@\n 2008-05-14  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* calls.c (emit_library_call_value_1): Restore code clearing\n-\tECF_LIBCALL_BLOCK to ensure that we only call end_sequence\n-\tonce.\n+\tECF_LIBCALL_BLOCK to ensure that we only call end_sequence once.\n \n 2008-05-14  Olivier Hainque  <hainque@adacore.com>\n \t    Nicolas Roche  <roche@adacore.com>\n@@ -234,7 +241,7 @@\n \t(emit_no_conflict_block): Removed.\n \t* optabls.h: (emit_no_conflict_block): Removed.\n \t* cse.c (cse_extended_basic_block): Remove search for\n-\tREG_NO_CONFLICT note.  \n+\tREG_NO_CONFLICT note.\n \t* global.c: Removed incorrect comment added in revision 117.\n \t* expr.c (convert_move): Change call to emit_no_conflict_block to\n \temit_insn.\n@@ -253,20 +260,19 @@\n \tREG_NO_CONFLICT notes.\n \t* loop_invariant.c (find_invariant_insn): Removed REG_NO_CONFLICT\n \tcase.\n-\t* combine.c (can_combine_p, distribute_notes):  Removed REG_NO_CONFLICT\n-\tcase.\n-\t* config/cris/cris.md (movdi pattern): Changed\n-\temit_no_conflict_block to emit_insns.\n+\t* combine.c (can_combine_p, distribute_notes):  Removed\n+\tREG_NO_CONFLICT case.\n+\t* config/cris/cris.md (movdi pattern): Changed emit_no_conflict_block\n+\tto emit_insns.\n \t* config/mn10300/mn10300.md (absdf2, negdf2 patterns): Ditto.\n \t* config/m68k/m68k.md (negdf2, negxf2, absdf2, absxf2 patterns):\n-\tDitto. \n+\tDitto.\n \t* reg-notes.def (NO_CONFLICT): Removed.\n \n 2008-05-14  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.c (sparc_profile_hook): If\n-\tNO_PROFILE_COUNTERS, don't generate and pass a label\n-\tinto mcount.\n+\tNO_PROFILE_COUNTERS, don't generate and pass a label into mcount.\n \t* config/sparc/linux.h (NO_PROFILE_COUNTERS): Define as 1.\n \t* config/sparc/linux64.h (NO_PROFILE_COUNTERS): Likewise.\n \n@@ -304,8 +310,8 @@\n \ttree-ssanames.c.  Convert to static inline.  Call make_ssa_name_fn.\n \t* omp-low.c (expand_omp_parallel):\n \t* tree-flow-inline.h (redirect_edge_var_map_result):\n-\t* tree-ssa.c (init_tree_ssa): Add argument FN.  Use it instead of cfun.\n-\tUpdate all users.\n+\t* tree-ssa.c (init_tree_ssa): Add argument FN.\n+\tUse it instead of cfun.  Update all users.\n \n 2008-05-13  Tom Tromey  <tromey@redhat.com>\n "}, {"sha": "6e781c1c43959f88bb4b37da645418f31ede089f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 53, "deletions": 24, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6784c6e03313eefa52ceb1a40776051ad1a720f1", "patch": "@@ -2257,6 +2257,24 @@\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+;; Although insertps takes register source, we prefer\n+;; unpcklps with register source since it is shorter.\n+(define_insn \"*vec_concatv2sf_sse4_1\"\n+  [(set (match_operand:V2SF 0 \"register_operand\"     \"=x,x,x,*y,*y\")\n+\t(vec_concat:V2SF\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \" 0,0,m, 0, m\")\n+\t  (match_operand:SF 2 \"vector_move_operand\"  \" x,m,C,*y, C\")))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+   unpcklps\\t{%2, %0|%0, %2}\n+   insertps\\t{$0x10, %2, %0|%0, %2, 0x10}\n+   movss\\t{%1, %0|%0, %1}\n+   punpckldq\\t{%2, %0|%0, %2}\n+   movd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"prefix_extra\" \"1,*,*,*,*\")\n+   (set_attr \"mode\" \"V4SF,V4SF,SF,DI,DI\")])\n+\n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n@@ -4801,25 +4819,29 @@\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n (define_insn \"*vec_concatv2si_sse4_1\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x,x ,*y ,*y\")\n \t(vec_concat:V2SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm\")\n-\t  (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")))]\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"0 ,0,rm, 0 ,rm\")\n+\t  (match_operand:SI 2 \"vector_move_operand\"  \"rm,x,C ,*ym,C\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n-  pinsrd\\t{$0x1, %2, %0|%0, %2, 0x1}\n-  pinsrd\\t{$0x0, %2, %0|%0, %2, 0x0}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"TI\")])\n+   pinsrd\\t{$0x1, %2, %0|%0, %2, 0x1}\n+   punpckldq\\t{%2, %0|%0, %2}\n+   movd\\t{%1, %0|%0, %1}\n+   punpckldq\\t{%2, %0|%0, %2}\n+   movd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"prefix_extra\" \"1,*,*,*,*\")\n+   (set_attr \"mode\" \"TI,TI,TI,DI,DI\")])\n \n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n (define_insn \"*vec_concatv2si_sse2\"\n-  [(set (match_operand:V2SI 0 \"register_operand\"     \"=Y2, Y2,*y,*y\")\n+  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x ,*y,*y\")\n \t(vec_concat:V2SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0 ,rm , 0,rm\")\n-\t  (match_operand:SI 2 \"reg_or_0_operand\"     \" Y2,C  ,*y, C\")))]\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0,rm, 0,rm\")\n+\t  (match_operand:SI 2 \"reg_or_0_operand\"     \" x,C ,*y, C\")))]\n   \"TARGET_SSE2\"\n   \"@\n    punpckldq\\t{%2, %0|%0, %2}\n@@ -4856,18 +4878,6 @@\n   [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n    (set_attr \"mode\" \"TI,V4SF,V2SF\")])\n \n-(define_insn \"*vec_concatv2di_rex64_sse4_1\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n-\t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"0,rm\")\n-\t  (match_operand:DI 2 \"nonimmediate_operand\" \"rm,0\")))]\n-  \"TARGET_64BIT && TARGET_SSE4_1\"\n-  \"@\n-  pinsrq\\t{$0x1, %2, %0|%0, %2, 0x1}\n-  pinsrq\\t{$0x0, %2, %0|%0, %2, 0x0}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,?Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n@@ -4884,12 +4894,31 @@\n   [(set_attr \"type\" \"ssemov,ssemov,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"mode\" \"TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n-(define_insn \"*vec_concatv2di_rex64\"\n+(define_insn \"*vec_concatv2di_rex64_sse4_1\"\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x,Yi,!x,x,x,x,x\")\n+\t(vec_concat:V2DI\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0,m,r ,*y,0,0,0,m\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \"rm,C,C ,C ,x,x,m,0\")))]\n+  \"TARGET_64BIT && TARGET_SSE4_1\"\n+  \"@\n+   pinsrq\\t{$0x1, %2, %0|%0, %2, 0x1}\n+   movq\\t{%1, %0|%0, %1}\n+   movq\\t{%1, %0|%0, %1}\n+   movq2dq\\t{%1, %0|%0, %1}\n+   punpcklqdq\\t{%2, %0|%0, %2}\n+   movlhps\\t{%2, %0|%0, %2}\n+   movhps\\t{%2, %0|%0, %2}\n+   movlps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,sselog,ssemov,ssemov,ssemov\")\n+   (set_attr \"prefix_extra\" \"1,*,*,*,*,*,*,*\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n+\n+(define_insn \"*vec_concatv2di_rex64_sse\"\n   [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,Yi,!Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,r ,*y ,0 ,0,0,m\")\n \t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,C ,C  ,Y2,x,m,0\")))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && TARGET_SSE\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n    movq\\t{%1, %0|%0, %1}"}, {"sha": "4c08485a0bd92fe1186f8e6ff8e27c04d2051f09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6784c6e03313eefa52ceb1a40776051ad1a720f1", "patch": "@@ -1,9 +1,14 @@\n+2008-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/sse-set-ps-1.c: New.\n+\t* gcc.target/i386/sse4_1-set-ps-1.c: Likewise.\n+\n 2008-05-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36009\n \tPR tree-optimization/36204\n \t* gcc.dg/tree-ssa/ssa-lim-5.c: New testcase.\n-\t* gcc.dg/tree-ssa/ssa-lim-6.c: Likewise..\n+\t* gcc.dg/tree-ssa/ssa-lim-6.c: Likewise.\n \n 2008-05-15  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "8232c7229c5ca16ae28c23cb88112f5b0be29af1", "filename": "gcc/testsuite/gcc.target/i386/sse-set-ps-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-set-ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-set-ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-set-ps-1.c?ref=6784c6e03313eefa52ceb1a40776051ad1a720f1", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+#include \"sse-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+test (float *v)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } u;\n+  unsigned int i;\n+  \n+  u.x = _mm_set_ps (v[3], v[2], v[1], v[0]);\n+\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != u.f[i])\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: %f != %f\\n\", i, v[i], u.f[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+sse_test (void)\n+{\n+  float v[4] = { -3, 2, 1, 9 };\n+  test (v);\n+}"}, {"sha": "fe77d94ad7d3d66a5a1100d092aa274fef8ac634", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-ps-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6784c6e03313eefa52ceb1a40776051ad1a720f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-ps-1.c?ref=6784c6e03313eefa52ceb1a40776051ad1a720f1", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+test (float *v)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } u;\n+  unsigned int i;\n+  \n+  u.x = _mm_set_ps (v[3], v[2], v[1], v[0]);\n+\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != u.f[i])\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: %f != %f\\n\", i, v[i], u.f[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  float v[4] = { -3, 2, 1, 9 };\n+  test (v);\n+}"}]}