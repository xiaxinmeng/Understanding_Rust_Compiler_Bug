{"sha": "63f122152f8f6f02cfd19677167f05428c2e7f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNmMTIyMTUyZjhmNmYwMmNmZDE5Njc3MTY3ZjA1NDI4YzJlN2Y5YQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-05-03T13:47:14Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-05-03T13:47:14Z"}, "message": "[testsuite] Add scan-offload-tree-dump\n\n2018-05-03  Tom de Vries  <tom@codesourcery.com>\n\n\tPR testsuite/85106\n\t* lib/scanoffloadtree.exp: New file.\n\n\t* testsuite/lib/libgomp-dg.exp (libgomp-dg-test): Add save-temps to\n\textra_tool_flags if it contains an -foffload=-fdump-* flag.\n\t* testsuite/lib/libgomp.exp: Include scanoffloadtree.exp.\n\t* testsuite/libgomp.oacc-c/vec.c: Use scan-offload-tree-dump.\n\n\t* doc/sourcebuild.texi (Commands for use in dg-final, Scan optimization\n\tdump files): Add offload-tree.\n\nFrom-SVN: r259892", "tree": {"sha": "7b5d38fb1dab01d3511c3a6535732e83ba4a05c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b5d38fb1dab01d3511c3a6535732e83ba4a05c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63f122152f8f6f02cfd19677167f05428c2e7f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f122152f8f6f02cfd19677167f05428c2e7f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f122152f8f6f02cfd19677167f05428c2e7f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f122152f8f6f02cfd19677167f05428c2e7f9a/comments", "author": null, "committer": null, "parents": [{"sha": "a378f85c5416aaf7ffea7ee114ee166ff4dd92da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a378f85c5416aaf7ffea7ee114ee166ff4dd92da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a378f85c5416aaf7ffea7ee114ee166ff4dd92da"}], "stats": {"total": 183, "additions": 178, "deletions": 5}, "files": [{"sha": "767d4682450322689ebc81fb30adec6450ad7598", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -1,3 +1,9 @@\n+2018-05-03  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/85106\n+\t* doc/sourcebuild.texi (Commands for use in dg-final, Scan optimization\n+\tdump files): Add offload-tree.\n+\n 2018-05-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85615"}, {"sha": "4605a492694af3de30ff29840635e6f2583e9bf7", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -2589,7 +2589,7 @@ assembly output.\n @subsubsection Scan optimization dump files\n \n These commands are available for @var{kind} of @code{tree}, @code{ltrans-tree},\n-@code{rtl}, @code{ipa}, and @code{wpa-ipa}.\n+@code{offload-tree}, @code{rtl}, @code{ipa}, and @code{wpa-ipa}.\n \n @table @code\n @item scan-@var{kind}-dump @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]"}, {"sha": "9d12280599e13475f2eb1d86db9bd9d030dfaf3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -1,3 +1,8 @@\n+2018-05-03  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/85106\n+\t* lib/scanoffloadtree.exp: New file.\n+\n 2018-05-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85615"}, {"sha": "ee92c2bb38a351aed2bf047c71627603d4279acc", "filename": "gcc/testsuite/lib/scanoffloadtree.exp", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2Ftestsuite%2Flib%2Fscanoffloadtree.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/gcc%2Ftestsuite%2Flib%2Fscanoffloadtree.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanoffloadtree.exp?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -0,0 +1,147 @@\n+#   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Various utilities for scanning offloading tree dump output, used by\n+# libgomp.exp.\n+\n+load_lib scandump.exp\n+\n+# Utility for scanning compiler result, invoked via dg-final.\n+# Call pass if pattern is present, otherwise fail.\n+#\n+# Argument 0 is the regexp to match\n+# Argument 1 is the name of the dumped tree pass\n+# Argument 2 handles expected failures and the like\n+proc scan-offload-tree-dump { args } {\n+\n+    if { [llength $args] < 2 } {\n+\terror \"scan-offload-tree-dump: too few arguments\"\n+\treturn\n+    }\n+    if { [llength $args] > 3 } {\n+\terror \"scan-offload-tree-dump: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 3 } {\n+\tscan-dump \"offload-tree\" [lindex $args 0] \\\n+\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n+\t\t  [lindex $args 2]\n+    } else {\n+\tscan-dump \"offload-tree\" [lindex $args 0] \\\n+\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+    }\n+}\n+\n+# Call pass if pattern is present given number of times, otherwise fail.\n+# Argument 0 is the regexp to match\n+# Argument 1 is number of times the regexp must be found\n+# Argument 2 is the name of the dumped tree pass\n+# Argument 3 handles expected failures and the like\n+proc scan-offload-tree-dump-times { args } {\n+\n+    if { [llength $args] < 3 } {\n+\terror \"scan-offload-tree-dump-times: too few arguments\"\n+\treturn\n+    }\n+    if { [llength $args] > 4 } {\n+\terror \"scan-offload-tree-dump-times: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 4 } {\n+\tscan-dump-times \"offload-tree\" [lindex $args 0] [lindex $args 1] \\\n+\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 2]\" \".o\" \\\n+\t\t\t[lindex $args 3]\n+    } else {\n+\tscan-dump-times \"offload-tree\" [lindex $args 0] [lindex $args 1] \\\n+\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 2]\" \".o\"\n+    }\n+}\n+\n+# Call pass if pattern is not present, otherwise fail.\n+#\n+# Argument 0 is the regexp to match\n+# Argument 1 is the name of the dumped tree pass\n+# Argument 2 handles expected failures and the like\n+proc scan-offload-tree-dump-not { args } {\n+\n+    if { [llength $args] < 2 } {\n+\terror \"scan-offload-tree-dump-not: too few arguments\"\n+\treturn\n+    }\n+    if { [llength $args] > 3 } {\n+\terror \"scan-offload-tree-dump-not: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 3 } {\n+\tscan-dump-not \"offload-tree\" [lindex $args 0] \\\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n+\t\t      [lindex $args 2]\n+    } else {\n+\tscan-dump-not \"offload-tree\" [lindex $args 0] \\\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+    }\n+}\n+\n+# Utility for scanning demangled compiler result, invoked via dg-final.\n+# Call pass if pattern is present, otherwise fail.\n+#\n+# Argument 0 is the regexp to match\n+# Argument 1 is the name of the dumped tree pass\n+# Argument 2 handles expected failures and the like\n+proc scan-offload-tree-dump-dem { args } {\n+\n+    if { [llength $args] < 2 } {\n+\terror \"scan-offload-tree-dump-dem: too few arguments\"\n+\treturn\n+    }\n+    if { [llength $args] > 3 } {\n+\terror \"scan-offload-tree-dump-dem: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 3 } {\n+\tscan-dump-dem \"offload-tree\" [lindex $args 0] \\\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n+\t\t      [lindex $args 2]\n+    } else {\n+\tscan-dump-dem \"offload-tree\" [lindex $args 0] \\\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+    }\n+}\n+\n+# Call pass if demangled pattern is not present, otherwise fail.\n+#\n+# Argument 0 is the regexp to match\n+# Argument 1 is the name of the dumped tree pass\n+# Argument 2 handles expected failures and the like\n+proc scan-offload-tree-dump-dem-not { args } {\n+\n+    if { [llength $args] < 2 } {\n+\terror \"scan-offload-tree-dump-dem-not: too few arguments\"\n+\treturn\n+    }\n+    if { [llength $args] > 3 } {\n+\terror \"scan-offload-tree-dump-dem-not: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 3 } {\n+\tscan-dump-dem-not \"offload-tree\" [lindex $args 0] \\\n+\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n+\t\t\t  [lindex $args 2]\n+    } else {\n+\tscan-dump-dem-not \"offload-tree\" [lindex $args 0] \\\n+\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+    }\n+}"}, {"sha": "b2f8c45c8646486d63b7430de2fb7793846f3d5c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -1,3 +1,11 @@\n+2018-05-03  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/85106\n+\t* testsuite/lib/libgomp-dg.exp (libgomp-dg-test): Add save-temps to\n+\textra_tool_flags if it contains an -foffload=-fdump-* flag.\n+\t* testsuite/lib/libgomp.exp: Include scanoffloadtree.exp.\n+\t* testsuite/libgomp.oacc-c/vec.c: Use scan-offload-tree-dump.\n+\n 2018-05-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR libgomp/85411"}, {"sha": "726b924d67f3d26d97b4dfe4b4b34290564360ed", "filename": "libgomp/testsuite/lib/libgomp-dg.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -1,4 +1,12 @@\n proc libgomp-dg-test { prog do_what extra_tool_flags } {\n+    # Force the dumpbase for test.c to test.o, such that scan-offload-*-dump\n+    # will work.\n+    foreach opt $extra_tool_flags {\n+\tif { [regexp ^-foffload=-fdump- $opt] } {\n+\t    lappend extra_tool_flags \"-save-temps\"\n+\t}\n+    }\n+\n     return [gcc-dg-test-1 libgomp_target_compile $prog $do_what $extra_tool_flags]\n }\n "}, {"sha": "8ac24463be6a66f53a97fcb8854dde290bad71ae", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -30,6 +30,7 @@ load_gcc_lib scanlang.exp\n load_gcc_lib scanrtl.exp\n load_gcc_lib scantree.exp\n load_gcc_lib scanltranstree.exp\n+load_gcc_lib scanoffloadtree.exp\n load_gcc_lib scanipa.exp\n load_gcc_lib scanwpaipa.exp\n load_gcc_lib timeout-dg.exp"}, {"sha": "608538fbd1f8106f0a7d600936404536cd24f6c1", "filename": "libgomp/testsuite/libgomp.oacc-c/vec.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f122152f8f6f02cfd19677167f05428c2e7f9a/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fvec.c?ref=63f122152f8f6f02cfd19677167f05428c2e7f9a", "patch": "@@ -1,6 +1,6 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n-/* { dg-additional-options \"-std=c99 -ftree-slp-vectorize -foffload=-ftree-slp-vectorize -foffload=-fdump-tree-slp1 -foffload=-save-temps -save-temps\" } */\n+/* { dg-additional-options \"-std=c99 -ftree-slp-vectorize -foffload=-fdump-tree-slp1\" } */\n \n #include <stdio.h>\n #include <sys/time.h>\n@@ -43,6 +43,4 @@ main (void)\n   return 0;\n }\n \n-/* Todo: make a scan-tree-dump variant that scans vec.o instead.  */\n-/* { dg-final { file copy -force [glob vec.o.*] [regsub \\.o\\. [glob vec.o.*] \\.c\\.] } } */\n-/* { dg-final { scan-tree-dump \"vector\\\\(2\\\\) long long unsigned int\" \"slp1\" } } */\n+/* { dg-final { scan-offload-tree-dump \"vector\\\\(2\\\\) long long unsigned int\" \"slp1\" } } */"}]}