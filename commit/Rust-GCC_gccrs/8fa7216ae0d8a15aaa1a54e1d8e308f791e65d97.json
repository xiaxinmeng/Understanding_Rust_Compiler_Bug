{"sha": "8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "node_id": "C_kwDOANBUbNoAKDhmYTcyMTZhZTBkOGExNWFhYTFhNTRlMWQ4ZTMwOGY3OTFlNjVkOTc", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-03-21T01:10:50Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-03-23T07:57:39Z"}, "message": "Fix ICE caused by NULL_RTX returned by lowpart_subreg.\n\nIn validate_subreg, both (subreg:V2HF (reg:SI) 0)\nand (subreg:V8HF (reg:V2HF) 0) are valid, but not\nfor (subreg:V8HF (reg:SI) 0) which causes ICE.\n\nIdeally it should be handled in validate_subreg to support\nsubreg for all modes available in TARGET_CAN_CHANGE_MODE_CLASS, but\nthat would be too risky in stage4, so the patch is a walkround in the\nbackend to force_reg operands before lowpart_subreg for expanders or\npre_reload splitters.\n\ngcc/ChangeLog:\n\n\tPR target/104976\n\t* config/i386/sse.md (ssePSmodelower): New.\n\t(*avx_cmp<mode>3_ltint_not): Force_reg operand before\n\tlowpart_subreg to avoid NULL_RTX.\n\t(<avx512>_fmaddc_<mode>_mask1<round_expand_name>,\n\t<avx512>_fcmaddc_<mode>_mask1<round_expand_name>,\n\tfma_<mode>_fmaddc_bcst, fma_<mode>_fcmaddc_bcst,\n\t<avx512>_<complexopname>_<mode>_mask<round_name>,\n\tavx512fp16_fcmaddcsh_v8hf_mask1<round_expand_name>,\n\tavx512fp16_fcmaddcsh_v8hf_mask3<round_expand_name>,\n\tavx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>,\n\tavx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>,\n\tfloat<floatunssuffix><mode>v4hf2,\n\tfloat<floatunssuffix>v2div2hf2,\n\tfix<fixunssuffix>_truncv4hf<mode>2,\n\tfix<fixunssuffix>_truncv2hfv2di2, extendv4hf<mode>2,\n\textendv2hfv2df2,\n\ttrunc<mode>v4hf2,truncv2dfv2hf2,\n\t*avx512bw_permvar_truncv16siv16hi_1,\n\t*avx512bw_permvar_truncv16siv16hi_1_hf,\n\t*avx512f_permvar_truncv8siv8hi_1,\n\t*avx512f_permvar_truncv8siv8hi_1_hf,\n\t*avx512f_vpermvar_truncv8div8si_1,\n\t*avx512f_permvar_truncv32hiv32qi_1,\n\t*avx512f_permvar_truncv16hiv16qi_1,\n\t*avx512f_permvar_truncv4div4si_1,\n\t*avx512f_pshufb_truncv8hiv8qi_1,\n\t*avx512f_pshufb_truncv4siv4hi_1,\n\t*avx512f_pshufd_truncv2div2si_1,\n\tsdot_prod<mode>, avx2_pblend<ssemodesuffix>_1,\n\tashrv2di3,ashrv2di3,usdot_prod<mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr104976.c: New test.\n\t* gcc.target/i386/avx512fp16-vfcmaddcph-1a.c: Scan either\n\tvblendps or masked vmovaps.\n\t* gcc.target/i386/avx512fp16-vfmaddcph-1a.c: Ditto\n\t* gcc.target/i386/avx512fp16vl-vfcmaddcph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vfmaddcph-1a.c: Ditto.", "tree": {"sha": "a7c8c1b9a913bf34d29a4f690f5cb1fae0412c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c8c1b9a913bf34d29a4f690f5cb1fae0412c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2287813b1369b8fae67f2220d23c552945180ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2287813b1369b8fae67f2220d23c552945180ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2287813b1369b8fae67f2220d23c552945180ed"}], "stats": {"total": 261, "additions": 196, "deletions": 65}, "files": [{"sha": "a9e18d383236282e3ed5f9fc85076696dc3c724c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 177, "deletions": 59, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "patch": "@@ -1059,6 +1059,18 @@\n    (V4DF \"V8SF\") (V2DF \"V4SF\")\n    (V32HF \"V16SF\") (V16HF \"V8SF\") (V8HF \"V4SF\")])\n \n+(define_mode_attr ssePSmodelower\n+  [(V16SI \"v16sf\") (V8DF \"v16sf\")\n+   (V16SF \"v16sf\") (V8DI \"v16sf\")\n+   (V64QI \"v16sf\") (V32QI \"v8sf\") (V16QI \"v4sf\")\n+   (V32HI \"v16sf\") (V16HI \"v8sf\") (V8HI \"v4sf\")\n+   (V8SI \"v8sf\") (V4SI \"v4sf\")\n+   (V4DI \"v8sf\") (V2DI \"v4sf\")\n+   (V4TI \"v16sf\") (V2TI \"v8sf\") (V1TI \"v4sf\")\n+   (V8SF \"v8sf\") (V4SF \"v4sf\")\n+   (V4DF \"v8sf\") (V2DF \"v4sf\")\n+   (V32HF \"v16sf\") (V16HF \"v8sf\") (V8HF \"v4sf\")])\n+\n (define_mode_attr ssePSmode2\n   [(V8DI \"V8SF\") (V4DI \"V4SF\")])\n \n@@ -3617,6 +3629,9 @@\n   operands[1] = force_reg (<ssebytemode>mode,\n \t\t\t  gen_lowpart (<ssebytemode>mode, operands[1]));\n   operands[2] = gen_lowpart (<ssebytemode>mode, operands[2]);\n+\n+  if (!MEM_P (operands[3]))\n+    operands[3] = force_reg (<ssebytemode>mode, operands[3]);\n   operands[3] = lowpart_subreg (<MODE>mode, operands[3], <ssebytemode>mode);\n })\n \n@@ -6319,7 +6334,7 @@\n    (match_operand:<avx512fmaskcmode> 4 \"register_operand\")]\n   \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n {\n-  rtx op0, op1;\n+  rtx op0, op1, dest;\n   if (<round_embedded_complex>)\n     emit_insn (gen_<avx512>_fmaddc_<mode>_mask<round_expand_name> (\n       operands[0], operands[1], operands[2], operands[3],\n@@ -6328,9 +6343,16 @@\n     emit_insn (gen_<avx512>_fmaddc_<mode>_mask (operands[0],\n       operands[1], operands[2], operands[3], operands[4]));\n \n-  op0 = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+  op0 = lowpart_subreg (<ssePSmode>mode,\n+\t\t\tforce_reg (<MODE>mode, operands[0]),\n+\t\t\t<MODE>mode);\n+  dest = gen_reg_rtx (<ssePSmode>mode);\n+  if (!MEM_P (operands[1]))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n   op1 = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n-  emit_insn (gen_<complexmove>_mask (op0, op0, op1, operands[4]));\n+  emit_insn (gen_<complexmove>_mask (dest, op0, op1, operands[4]));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (<MODE>mode, dest, <ssePSmode>mode));\n   DONE;\n })\n \n@@ -6356,7 +6378,7 @@\n    (match_operand:<avx512fmaskcmode> 4 \"register_operand\")]\n   \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n {\n-  rtx op0, op1;\n+  rtx op0, op1, dest;\n   if (<round_embedded_complex>)\n     emit_insn (gen_<avx512>_fcmaddc_<mode>_mask<round_expand_name> (\n       operands[0], operands[1], operands[2], operands[3],\n@@ -6367,9 +6389,16 @@\n       operands[1], operands[2], operands[3], operands[4]));\n   }\n \n-  op0 = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+  op0 = lowpart_subreg (<ssePSmode>mode,\n+\t\t\tforce_reg (<MODE>mode, operands[0]),\n+\t\t\t<MODE>mode);\n+  dest = gen_reg_rtx (<ssePSmode>mode);\n+  if (!MEM_P (operands[1]))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n   op1 = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n-  emit_insn (gen_<complexmove>_mask (op0, op0, op1, operands[4]));\n+  emit_insn (gen_<complexmove>_mask (dest, op0, op1, operands[4]));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (<MODE>mode, dest, <ssePSmode>mode));\n   DONE;\n })\n \n@@ -6479,17 +6508,23 @@\n \t     (match_operand:<ssePSmode> 2 \"bcst_vector_operand\") 0)\n \t   (match_operand:VF_AVX512FP16VL 3 \"vector_operand\")]\n \t   UNSPEC_COMPLEX_FMA))]\n-  \"TARGET_AVX512FP16\"\n+  \"TARGET_AVX512FP16 && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n-  [(set (match_dup 0)\n-\t(unspec:<ssePSmode>\n-\t  [(match_dup 1) (match_dup 2) (match_dup 3)]\n-\t   UNSPEC_COMPLEX_FMA_PAIR))]\n+  [(const_int 0)]\n   {\n-    operands[0] = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+    if (!MEM_P (operands[1]))\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+    if (!MEM_P (operands[3]))\n+      operands[3] = force_reg (<MODE>mode, operands[3]);\n     operands[1] = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n     operands[3] = lowpart_subreg (<ssePSmode>mode, operands[3], <MODE>mode);\n+    rtx dest = gen_reg_rtx (<ssePSmode>mode);\n+    emit_insn (gen_fma_fmaddc_<ssePSmodelower>_pair (dest, operands[1],\n+\t\t\t\t\t\t     operands[2], operands[3]));\n+    emit_move_insn (operands[0],\n+\t\t    lowpart_subreg (<MODE>mode, dest, <ssePSmode>mode));\n+    DONE;\n   })\n \n (define_insn_and_split \"fma_<mode>_fcmaddc_bcst\"\n@@ -6500,17 +6535,24 @@\n \t     (match_operand:<ssePSmode> 2 \"bcst_vector_operand\") 0)\n \t   (match_operand:VF_AVX512FP16VL 3 \"vector_operand\")]\n \t   UNSPEC_COMPLEX_FCMA))]\n-  \"TARGET_AVX512FP16\"\n+  \"TARGET_AVX512FP16 && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n-  [(set (match_dup 0)\n-\t(unspec:<ssePSmode>\n-\t  [(match_dup 1) (match_dup 2) (match_dup 3)]\n-\t   UNSPEC_COMPLEX_FCMA_PAIR))]\n+  [(const_int 0)]\n   {\n-    operands[0] = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+    if (!MEM_P (operands[1]))\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+    if (!MEM_P (operands[3]))\n+      operands[3] = force_reg (<MODE>mode, operands[3]);\n     operands[1] = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n     operands[3] = lowpart_subreg (<ssePSmode>mode, operands[3], <MODE>mode);\n+    rtx dest = gen_reg_rtx (<ssePSmode>mode);\n+    emit_insn (gen_fma_fcmaddc_<ssePSmodelower>_pair (dest, operands[1],\n+\t\t\t\t\t\t      operands[2],\n+\t\t\t\t\t\t      operands[3]));\n+    emit_move_insn (operands[0],\n+\t\t    lowpart_subreg (<MODE>mode, dest, <ssePSmode>mode));\n+    DONE;\n   })\n \n (define_insn \"<avx512>_<complexopname>_<mode>_mask<round_name>\"\n@@ -6650,7 +6692,7 @@\n    (match_operand:QI 4 \"register_operand\")]\n   \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n {\n-  rtx op0, op1;\n+  rtx dest, op0, op1;\n \n   if (<round_embedded_complex>)\n     emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask<round_expand_name> (\n@@ -6660,9 +6702,15 @@\n     emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask (operands[0],\n       operands[1], operands[2], operands[3], operands[4]));\n \n-  op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+  dest = gen_reg_rtx (V4SFmode);\n+  op0 = lowpart_subreg (V4SFmode,\n+\t\t\tforce_reg (V8HFmode, operands[0]),\n+\t\t\tV8HFmode);\n+  if (!MEM_P (operands[3]))\n+    operands[3] = force_reg (V8HFmode, operands[3]);\n   op1 = lowpart_subreg (V4SFmode, operands[3], V8HFmode);\n-  emit_insn (gen_sse_movss (op0, op1, op0));\n+  emit_insn (gen_sse_movss (dest, op1, op0));\n+  emit_move_insn (operands[0], lowpart_subreg (V8HFmode, dest, V4SFmode));\n   DONE;\n })\n \n@@ -6674,7 +6722,7 @@\n    (match_operand:QI 4 \"register_operand\")]\n   \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n {\n-  rtx op0, op1;\n+  rtx dest, op0, op1;\n \n   if (<round_embedded_complex>)\n     emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask<round_expand_name> (\n@@ -6684,9 +6732,15 @@\n     emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask (operands[0],\n       operands[1], operands[2], operands[3], operands[4]));\n \n-  op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+  dest = gen_reg_rtx (V4SFmode);\n+  op0 = lowpart_subreg (V4SFmode,\n+\t\t\tforce_reg (V8HFmode, operands[0]),\n+\t\t\tV8HFmode);\n+  if (!MEM_P (operands[3]))\n+    operands[3] = force_reg (V8HFmode, operands[3]);\n   op1 = lowpart_subreg (V4SFmode, operands[3], V8HFmode);\n-  emit_insn (gen_sse_movss (op0, op1, op0));\n+  emit_insn (gen_sse_movss (dest, op1, op0));\n+  emit_move_insn (operands[0], lowpart_subreg (V8HFmode, dest, V4SFmode));\n   DONE;\n })\n \n@@ -6796,9 +6850,10 @@\n \t  (match_operand:VI4_128_8_256 1 \"vector_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n {\n-  operands[0] = lowpart_subreg (V8HFmode, operands[0], V4HFmode);\n-  emit_insn (gen_avx512fp16_float<floatunssuffix><mode>v4hf2 (operands[0],\n+  rtx dest = gen_reg_rtx (V8HFmode);\n+  emit_insn (gen_avx512fp16_float<floatunssuffix><mode>v4hf2 (dest,\n \t\t\t\t\t\t\t      operands[1]));\n+  emit_move_insn (operands[0], lowpart_subreg (V4HFmode, dest, V8HFmode));\n   DONE;\n })\n \n@@ -6871,9 +6926,10 @@\n \t  (match_operand:V2DI 1 \"vector_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n {\n-  operands[0] = lowpart_subreg (V8HFmode, operands[0], V2HFmode);\n-  emit_insn (gen_avx512fp16_float<floatunssuffix>v2div2hf2 (operands[0],\n+  rtx dest = gen_reg_rtx (V8HFmode);\n+  emit_insn (gen_avx512fp16_float<floatunssuffix>v2div2hf2 (dest,\n \t\t\t\t\t\t\t    operands[1]));\n+  emit_move_insn (operands[0], lowpart_subreg (V2HFmode, dest, V8HFmode));\n   DONE;\n })\n \n@@ -7004,7 +7060,9 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n-      operands[1] = lowpart_subreg (V8HFmode, operands[1], V4HFmode);\n+      operands[1] = lowpart_subreg (V8HFmode,\n+\t\t\t\t    force_reg (V4HFmode, operands[1]),\n+\t\t\t\t    V4HFmode);\n       emit_insn (gen_avx512fp16_fix<fixunssuffix>_trunc<mode>2 (operands[0],\n \t\t\t\t\t\t\t\toperands[1]));\n       DONE;\n@@ -7041,7 +7099,9 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n-      operands[1] = lowpart_subreg (V8HFmode, operands[1], V2HFmode);\n+      operands[1] = lowpart_subreg (V8HFmode,\n+\t\t\t\t    force_reg (V2HFmode, operands[1]),\n+\t\t\t\t    V2HFmode);\n       emit_insn (gen_avx512fp16_fix<fixunssuffix>_truncv2di2 (operands[0],\n \t\t\t\t\t\t\t      operands[1]));\n       DONE;\n@@ -7120,7 +7180,9 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n-      operands[1] = lowpart_subreg (V8HFmode, operands[1], V4HFmode);\n+      operands[1] = lowpart_subreg (V8HFmode,\n+\t\t\t\t    force_reg (V4HFmode, operands[1]),\n+\t\t\t\t    V4HFmode);\n       emit_insn (gen_avx512fp16_float_extend_ph<mode>2\n \t\t (operands[0], operands[1]));\n       DONE;\n@@ -7157,7 +7219,9 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n-      operands[1] = lowpart_subreg (V8HFmode, operands[1], V2HFmode);\n+      operands[1] = lowpart_subreg (V8HFmode,\n+\t\t\t\t    force_reg (V2HFmode, operands[1]),\n+\t\t\t\t    V2HFmode);\n       emit_insn (gen_avx512fp16_float_extend_phv2df2\n \t\t (operands[0], operands[1]));\n       DONE;\n@@ -7207,8 +7271,10 @@\n \t(float_truncate:V4HF (match_operand:VF4_128_8_256 1 \"vector_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n {\n-  operands[0] = lowpart_subreg (V8HFmode, operands[0], V4HFmode);\n-  emit_insn (gen_avx512fp16_trunc<mode>v4hf2 (operands[0], operands[1]));\n+  rtx dest = gen_reg_rtx (V8HFmode);\n+\n+  emit_insn (gen_avx512fp16_trunc<mode>v4hf2 (dest, operands[1]));\n+  emit_move_insn (operands[0], lowpart_subreg (V4HFmode, dest, V8HFmode));\n   DONE;\n })\n \n@@ -7286,8 +7352,9 @@\n \t(float_truncate:V2HF (match_operand:V2DF 1 \"vector_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n {\n-  operands[0] = lowpart_subreg (V8HFmode, operands[0], V2HFmode);\n-  emit_insn (gen_avx512fp16_truncv2dfv2hf2 (operands[0], operands[1]));\n+  rtx dest = gen_reg_rtx (V8HFmode);\n+  emit_insn (gen_avx512fp16_truncv2dfv2hf2 (dest, operands[1]));\n+  emit_move_insn (operands[0], lowpart_subreg (V2HFmode, dest, V8HFmode));\n   DONE;\n })\n \n@@ -13384,7 +13451,9 @@\n   \"&& 1\"\n   [(set (match_dup 0)\n \t(truncate:V16HI (match_dup 1)))]\n-  \"operands[1] = lowpart_subreg (V16SImode, operands[1], V32HImode);\")\n+  \"operands[1] = lowpart_subreg (V16SImode,\n+\t\t\t\t force_reg (V32HImode, operands[1]),\n+\t\t\t\t  V32HImode);\")\n \n (define_insn_and_split \"*avx512bw_permvar_truncv16siv16hi_1_hf\"\n   [(set (match_operand:V16HF 0 \"nonimmediate_operand\")\n@@ -13408,8 +13477,18 @@\n   [(set (match_dup 0)\n \t(truncate:V16HI (match_dup 1)))]\n {\n-  operands[0] = lowpart_subreg (V16HImode, operands[0], V16HFmode);\n-  operands[1] = lowpart_subreg (V16SImode, operands[1], V32HImode);\n+  operands[1] = lowpart_subreg (V16SImode,\n+\t\t\t\tforce_reg (V32HImode, operands[1]),\n+\t\t\t\tV32HImode);\n+  if (MEM_P (operands[0]))\n+    operands[0] = lowpart_subreg (V16HImode, operands[0], V16HFmode);\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (V16HImode);\n+      emit_insn (gen_truncv16siv16hi2 (op0, operands[1]));\n+      emit_move_insn (operands[0], lowpart_subreg (V16HFmode, op0, V16HImode));\n+      DONE;\n+    }\n })\n \n \n@@ -13429,7 +13508,9 @@\n   \"&& 1\"\n   [(set (match_dup 0)\n \t(truncate:V8HI (match_dup 1)))]\n-  \"operands[1] = lowpart_subreg (V8SImode, operands[1], V16HImode);\")\n+  \"operands[1] = lowpart_subreg (V8SImode,\n+\t\t\t\t force_reg (V16HImode, operands[1]),\n+\t\t\t\t V16HImode);\")\n \n (define_insn_and_split \"*avx512f_permvar_truncv8siv8hi_1_hf\"\n   [(set (match_operand:V8HF 0 \"nonimmediate_operand\")\n@@ -13449,8 +13530,18 @@\n   [(set (match_dup 0)\n \t(truncate:V8HI (match_dup 1)))]\n {\n-  operands[0] = lowpart_subreg (V8HImode, operands[0], V8HFmode);\n-  operands[1] = lowpart_subreg (V8SImode, operands[1], V16HImode);\n+  operands[1] = lowpart_subreg (V8SImode,\n+\t\t\t\tforce_reg (V16HImode, operands[1]),\n+\t\t\t\tV16HImode);\n+  if (MEM_P (operands[0]))\n+    operands[0] = lowpart_subreg (V8HImode, operands[0], V8HFmode);\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (V8HImode);\n+      emit_insn (gen_truncv8siv8hi2 (op0, operands[1]));\n+      emit_move_insn (operands[0], lowpart_subreg (V8HFmode, op0, V8HImode));\n+      DONE;\n+    }\n })\n \n (define_insn_and_split \"*avx512f_vpermvar_truncv8div8si_1\"\n@@ -13469,7 +13560,9 @@\n   \"&& 1\"\n   [(set (match_dup 0)\n \t(truncate:V8SI (match_dup 1)))]\n-  \"operands[1] = lowpart_subreg (V8DImode, operands[1], V16SImode);\")\n+  \"operands[1] = lowpart_subreg (V8DImode,\n+\t\t\t\t force_reg (V16SImode, operands[1]),\n+\t\t\t\t V16SImode);\")\n \n (define_insn \"avx512f_<code><pmov_src_lower><mode>2_mask\"\n   [(set (match_operand:PMOV_DST_MODE_1 0 \"nonimmediate_operand\" \"=v,m\")\n@@ -13539,7 +13632,9 @@\n   \"&& 1\"\n   [(set (match_dup 0)\n \t(truncate:V32QI (match_dup 1)))]\n-  \"operands[1] = lowpart_subreg (V32HImode, operands[1], V64QImode);\")\n+  \"operands[1] = lowpart_subreg (V32HImode,\n+\t\t\t\t force_reg (V64QImode, operands[1]),\n+\t\t\t\t V64QImode);\")\n \n (define_insn \"avx512bw_<code>v32hiv32qi2_mask\"\n   [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n@@ -13607,7 +13702,9 @@\n   \"&& 1\"\n   [(set (match_dup 0)\n \t(truncate:V16QI (match_dup 1)))]\n-  \"operands[1] = lowpart_subreg (V16HImode, operands[1], V32QImode);\")\n+  \"operands[1] = lowpart_subreg (V16HImode,\n+\t\t\t\t force_reg (V32QImode, operands[1]),\n+\t\t\t\t V32QImode);\")\n \n (define_insn_and_split \"*avx512f_permvar_truncv4div4si_1\"\n   [(set (match_operand:V4SI 0 \"nonimmediate_operand\")\n@@ -13623,7 +13720,9 @@\n   \"&& 1\"\n   [(set (match_dup 0)\n \t(truncate:V4SI (match_dup 1)))]\n-  \"operands[1] = lowpart_subreg (V4DImode, operands[1], V8SImode);\")\n+  \"operands[1] = lowpart_subreg (V4DImode,\n+\t\t\t\t force_reg (V8SImode, operands[1]),\n+\t\t\t\t V8SImode);\")\n \n (define_insn \"<avx512>_<code><ssedoublemodelower><mode>2_mask\"\n   [(set (match_operand:PMOV_DST_MODE_2 0 \"nonimmediate_operand\" \"=v,m\")\n@@ -13701,7 +13800,9 @@\n   [(const_int 0)]\n {\n   rtx op1 = gen_reg_rtx (V8QImode);\n-  operands[1] = lowpart_subreg (V8HImode, operands[1], V16QImode);\n+  operands[1] = lowpart_subreg (V8HImode,\n+\t\t\t\tforce_reg (V16QImode, operands[1]),\n+\t\t\t\tV16QImode);\n   emit_insn (gen_truncv8hiv8qi2 (op1, operands[1]));\n   emit_move_insn (operands[0], lowpart_subreg (DImode, op1, V8QImode));\n   DONE;\n@@ -14079,7 +14180,9 @@\n   [(const_int 0)]\n {\n   rtx op1 = gen_reg_rtx (V4HImode);\n-  operands[1] = lowpart_subreg (V4SImode, operands[1], V16QImode);\n+  operands[1] = lowpart_subreg (V4SImode,\n+\t\t\t\tforce_reg (V16QImode, operands[1]),\n+\t\t\t\tV16QImode);\n   emit_insn (gen_truncv4siv4hi2 (op1, operands[1]));\n   emit_move_insn (operands[0], lowpart_subreg (DImode, op1, V4HImode));\n   DONE;\n@@ -14326,7 +14429,9 @@\n   [(const_int 0)]\n {\n   rtx op1 = gen_reg_rtx (V2SImode);\n-  operands[1] = lowpart_subreg (V2DImode, operands[1], V4SImode);\n+  operands[1] = lowpart_subreg (V2DImode,\n+\t\t\t\tforce_reg (V4SImode, operands[1]),\n+\t\t\t\tV4SImode);\n   emit_insn (gen_truncv2div2si2 (op1, operands[1]));\n   emit_move_insn (operands[0], lowpart_subreg (DImode, op1, V2SImode));\n   DONE;\n@@ -15360,8 +15465,12 @@\n       || (<MODE_SIZE> < 64\n \t  && ((TARGET_AVX512VNNI && TARGET_AVX512VL) || TARGET_AVXVNNI)))\n     {\n-      operands[1] = lowpart_subreg (<sseunpackmode>mode, operands[1], <MODE>mode);\n-      operands[2] = lowpart_subreg (<sseunpackmode>mode, operands[2], <MODE>mode);\n+      operands[1] = lowpart_subreg (<sseunpackmode>mode,\n+\t\t\t\t    force_reg (<MODE>mode, operands[1]),\n+\t\t\t\t    <MODE>mode);\n+      operands[2] = lowpart_subreg (<sseunpackmode>mode,\n+\t\t\t\t    force_reg (<MODE>mode, operands[2]),\n+\t\t\t\t    <MODE>mode);\n       emit_insn (gen_rtx_SET (operands[0], operands[3]));\n       emit_insn (gen_vpdpwssd_<SDOT_VPDP_SUF> (operands[0], operands[3],\n \t\t\t\t\t       operands[1], operands[2]));\n@@ -21376,11 +21485,12 @@\n      emit_insn (gen_avx2_pblend<ssemodesuffix> (tmp, operands[1],\n \t\t\t\t\t\toperands[2], blendw_idx));\n \n-     operands[0] = lowpart_subreg (V8SImode, operands[0], <MODE>mode);\n+     rtx op0 = gen_reg_rtx (V8SImode);\n      tmp = lowpart_subreg (V8SImode, tmp, <MODE>mode);\n      operands[1] = lowpart_subreg (V8SImode, operands[1], <MODE>mode);\n-     emit_insn (gen_avx2_pblenddv8si (operands[0], operands[1],\n+     emit_insn (gen_avx2_pblenddv8si (op0, operands[1],\n \t\t\t\t      tmp, blendd_idx));\n+     emit_move_insn (operands[0], lowpart_subreg (<MODE>mode, op0, V8SImode));\n   }\n \n   DONE;\n@@ -24205,7 +24315,9 @@\n \t  vec_perm_builder sel (4, 4, 1);\n \t  sel.quick_grow (4);\n \t  rtx arg0, arg1;\n-\t  rtx op1 = lowpart_subreg (V4SImode, operands[1], V2DImode);\n+\t  rtx op1 = lowpart_subreg (V4SImode,\n+\t\t\t\t    force_reg (V2DImode, operands[1]),\n+\t\t\t\t    V2DImode);\n \t  rtx target = gen_reg_rtx (V4SImode);\n \t  if (UINTVAL (operands[2]) >= 63)\n \t    {\n@@ -24271,9 +24383,11 @@\n \t  else\n \t    {\n \t      rtx temp = gen_reg_rtx (V4SImode);\n-\t      emit_insn (gen_ashrv4si3 (temp, lowpart_subreg (V4SImode,\n-\t\t\t\t\t\t\t      operands[1],\n-\t\t\t\t\t\t\t      V2DImode),\n+\t      emit_insn (gen_ashrv4si3 (temp,\n+\t\t\t\t\tlowpart_subreg (V4SImode,\n+\t\t\t\t\t\t\tforce_reg (V2DImode,\n+\t\t\t\t\t\t\t\t   operands[1]),\n+\t\t\t\t\t\t\tV2DImode),\n \t\t\t\t\tGEN_INT (31)));\n \t      zero_or_all_ones = gen_reg_rtx (V4SImode);\n \t      emit_insn (gen_sse2_pshufd_1 (zero_or_all_ones, temp,\n@@ -27768,8 +27882,12 @@\n     ||((TARGET_AVX512VNNI && TARGET_AVX512VL)\n \t    || TARGET_AVXVNNI))\"\n {\n-  operands[1] = lowpart_subreg (<VI1SI>mode, operands[1], <MODE>mode);\n-  operands[2] = lowpart_subreg (<VI1SI>mode, operands[2], <MODE>mode);\n+  operands[1] = lowpart_subreg (<VI1SI>mode,\n+\t\t\t\tforce_reg (<MODE>mode, operands[1]),\n+\t\t\t\t<MODE>mode);\n+  operands[2] = lowpart_subreg (<VI1SI>mode,\n+\t\t\t\tforce_reg (<MODE>mode, operands[2]),\n+\t\t\t\t<MODE>mode);\n   emit_insn (gen_rtx_SET (operands[0], operands[3]));\n   emit_insn (gen_vpdpbusd_<vi1si> (operands[0], operands[3],\n \t\t\t\t  operands[1], operands[2]));"}, {"sha": "851561ad41657d1fafadead664e3e85e845aac7f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcph-1a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcph-1a.c?ref=8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "patch": "@@ -6,7 +6,7 @@\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"(?:vblendmps\\[ \\\\t\\]+%zmm\\[0-9\\]+|vmovaps\\[ \\\\t\\]+)\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "dfcc6e5f93cf7ed945ecf28e27923c2bf2e0b88b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcph-1a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcph-1a.c?ref=8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "patch": "@@ -6,7 +6,7 @@\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"(?:vblendmps\\[ \\\\t\\]+%zmm\\[0-9\\]+|vmovaps\\[ \\\\t\\]+)\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "93edb92984ec177f897f2dd96194026e04a7d62e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfcmaddcph-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmaddcph-1a.c?ref=8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "patch": "@@ -3,11 +3,11 @@\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vblendmps\\[ \\\\t\\]+%ymm\\[0-9\\]+|vmovaps\\[ \\\\t\\]+)\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vblendmps\\[ \\\\t\\]+%xmm\\[0-9\\]+|vmovaps\\[ \\\\t\\]+)\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "7dfbb3e1e198af358ed77d02e7d065a24927325b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmaddcph-1a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmaddcph-1a.c?ref=8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "patch": "@@ -3,11 +3,11 @@\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vblendmps\\[ \\\\t\\]+%ymm\\[0-9\\]+|vmovaps\\[ \\\\t\\]+)\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vblendmps\\[ \\\\t\\]+%xmm\\[0-9\\]+|vmovaps\\[ \\\\t\\]+)\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "af8e75abd343caf6737ac496dac88c79741cb2ff", "filename": "gcc/testsuite/gcc.target/i386/pr104976.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104976.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104976.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104976.c?ref=8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+\n+void\n+foo (int a, float b, double* c)\n+{\n+  union {\n+    _Float16 f[2];\n+    int i;} x;\n+  x.i = a;\n+  c[0] = x.f[0] * 0.2;\n+  c[1] = x.f[1] * 0.2;\n+}"}]}