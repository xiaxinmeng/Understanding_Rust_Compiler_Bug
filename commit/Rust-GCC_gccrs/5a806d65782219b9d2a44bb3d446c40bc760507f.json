{"sha": "5a806d65782219b9d2a44bb3d446c40bc760507f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4MDZkNjU3ODIyMTliOWQyYTQ0YmIzZDQ0NmM0MGJjNzYwNTA3Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-08T03:02:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-08T03:02:44Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r169", "tree": {"sha": "99f0164f49a4973bc684dd8aabb02b584d527c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99f0164f49a4973bc684dd8aabb02b584d527c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a806d65782219b9d2a44bb3d446c40bc760507f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a806d65782219b9d2a44bb3d446c40bc760507f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a806d65782219b9d2a44bb3d446c40bc760507f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a806d65782219b9d2a44bb3d446c40bc760507f/comments", "author": null, "committer": null, "parents": [{"sha": "45fd610d97ee1f9a0337919ade9478422020d82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45fd610d97ee1f9a0337919ade9478422020d82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45fd610d97ee1f9a0337919ade9478422020d82d"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "5be190d9a34341dde97ff38589d20699cb06eed6", "filename": "gcc/genoutput.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a806d65782219b9d2a44bb3d446c40bc760507f/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a806d65782219b9d2a44bb3d446c40bc760507f/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=5a806d65782219b9d2a44bb3d446c40bc760507f", "patch": "@@ -401,6 +401,7 @@ static char *predicates[MAX_MAX_OPERANDS];\n static char address_p[MAX_MAX_OPERANDS];\n static enum machine_mode modes[MAX_MAX_OPERANDS];\n static char strict_low[MAX_MAX_OPERANDS];\n+static char seen[MAX_MAX_OPERANDS];\n \n static void\n scan_operands (part, this_address_p, this_strict_low)\n@@ -422,8 +423,15 @@ scan_operands (part, this_address_p, this_strict_low)\n       if (opno > max_opno)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n-\terror (\"Too many operands (%d) in one instruction pattern.\\n\",\n-\t       max_opno + 1);\n+\t{\n+\t  error (\"Too many operands (%d) in instruction pattern %d.\\n\",\n+\t\t max_opno + 1, next_index_number);\n+\t  return;\n+\t}\n+      if (seen[opno])\n+\terror (\"Insn pattern %d specified operand number %d more than once.\\n\",\n+\t       next_index_number, opno);\n+      seen[opno] = 1;\n       modes[opno] = GET_MODE (part);\n       strict_low[opno] = this_strict_low;\n       predicates[opno] = XSTR (part, 1);\n@@ -441,8 +449,15 @@ scan_operands (part, this_address_p, this_strict_low)\n       if (opno > max_opno)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n-\terror (\"Too many operands (%d) in one instruction pattern.\\n\",\n-\t       max_opno + 1);\n+\t{\n+\t  error (\"Too many operands (%d) in instruction pattern %d.\\n\",\n+\t\t max_opno + 1, next_index_number);\n+\t  return;\n+\t}\n+      if (seen[opno])\n+\terror (\"Insn pattern %d specified operand number %d more than once.\\n\",\n+\t       next_index_number, opno);\n+      seen[opno] = 1;\n       modes[opno] = GET_MODE (part);\n       strict_low[opno] = 0;\n       predicates[opno] = \"scratch_operand\";\n@@ -461,8 +476,15 @@ scan_operands (part, this_address_p, this_strict_low)\n       if (opno > max_opno)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n-\terror (\"Too many operands (%d) in one instruction pattern.\\n\",\n-\t       max_opno + 1);\n+\t{\n+\t  error (\"Too many operands (%d) in instruction pattern %d.\\n\",\n+\t\t max_opno + 1, next_index_number);\n+\t  return;\n+\t}\n+      if (seen[opno])\n+\terror (\"Insn pattern %d specified operand number %d more than once.\\n\",\n+\t       next_index_number, opno);\n+      seen[opno] = 1;\n       modes[opno] = GET_MODE (part);\n       strict_low[opno] = 0;\n       predicates[opno] = XSTR (part, 1);\n@@ -638,6 +660,7 @@ gen_insn (insn)\n   mybzero (address_p, sizeof address_p);\n   mybzero (modes, sizeof modes);\n   mybzero (strict_low, sizeof strict_low);\n+  mybzero (seen, sizeof seen);\n \n   for (i = 0; i < XVECLEN (insn, 1); i++)\n     scan_operands (XVECEXP (insn, 1, i), 0, 0);\n@@ -684,6 +707,11 @@ gen_peephole (peep)\n   max_opno = -1;\n   mybzero (constraints, sizeof constraints);\n   mybzero (op_n_alternatives, sizeof op_n_alternatives);\n+  mybzero (predicates, sizeof predicates);\n+  mybzero (address_p, sizeof address_p);\n+  mybzero (modes, sizeof modes);\n+  mybzero (strict_low, sizeof strict_low);\n+  mybzero (seen, sizeof seen);\n \n   /* Get the number of operands by scanning all the\n      patterns of the peephole optimizer.\n@@ -744,6 +772,7 @@ gen_expand (insn)\n   mybzero (address_p, sizeof address_p);\n   mybzero (modes, sizeof modes);\n   mybzero (strict_low, sizeof strict_low);\n+  mybzero (seen, sizeof seen);\n \n   if (XVEC (insn, 1))\n     for (i = 0; i < XVECLEN (insn, 1); i++)\n@@ -794,6 +823,11 @@ gen_split (split)\n \n   mybzero (constraints, sizeof constraints);\n   mybzero (op_n_alternatives, sizeof op_n_alternatives);\n+  mybzero (predicates, sizeof predicates);\n+  mybzero (address_p, sizeof address_p);\n+  mybzero (modes, sizeof modes);\n+  mybzero (strict_low, sizeof strict_low);\n+  mybzero (seen, sizeof seen);\n \n   /* Get the number of operands by scanning all the\n      patterns of the split patterns."}]}