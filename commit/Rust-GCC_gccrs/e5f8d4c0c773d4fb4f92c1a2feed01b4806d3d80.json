{"sha": "e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVmOGQ0YzBjNzczZDRmYjRmOTJjMWEyZmVlZDAxYjQ4MDZkM2Q4MA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-02-24T22:14:14Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-02-24T22:14:14Z"}, "message": "Fix bug exposed by reload.c no longer rounding the frame size to BIGGEST_ALIGNMENT:\n\n\tFix bug exposed by reload.c no longer rounding the frame\n\tsize to BIGGEST_ALIGNMENT:\n\t* sh.c (rounded_frame_size): New function.\n\t(sh_expand_prologue, sh_expand_epilogue): Use it.\n\t(initial_elimination_offset): Likewise.\n\nFrom-SVN: r32138", "tree": {"sha": "f0d0ff1d0128e5caa5fa56f1b3a14260a590f6f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d0ff1d0128e5caa5fa56f1b3a14260a590f6f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80/comments", "author": null, "committer": null, "parents": [{"sha": "521fe9d066debab450596f9a72069ee3b53c40ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521fe9d066debab450596f9a72069ee3b53c40ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/521fe9d066debab450596f9a72069ee3b53c40ff"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "a337cf9c9dbaa6542b53986d2e415ab6015d6b16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80", "patch": "@@ -1,3 +1,11 @@\n+Thu Feb 24 22:06:52 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\tFix bug exposed by reload.c no longer rounding the frame\n+\tsize to BIGGEST_ALIGNMENT:\n+\t* sh.c (rounded_frame_size): New function.\n+\t(sh_expand_prologue, sh_expand_epilogue): Use it.\n+\t(initial_elimination_offset): Likewise.\n+\n Thu Feb 24 20:04:11 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \tFix breakage from 6th Feb thread_prologue_and_epilogue_insns change:"}, {"sha": "7eaf7072ddecc8705b1bdd13e5caf2d4b314aefe", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e5f8d4c0c773d4fb4f92c1a2feed01b4806d3d80", "patch": "@@ -149,6 +149,7 @@ static void pop PARAMS ((int));\n static void push_regs PARAMS ((int, int));\n static int calc_live_regs PARAMS ((int *, int *));\n static void mark_use PARAMS ((rtx, rtx *));\n+static HOST_WIDE_INT rounded_frame_size PARAMS ((int));\n \f\n /* Print the operand address in x to the stream.  */\n \n@@ -3793,14 +3794,25 @@ calc_live_regs (count_ptr, live_regs_mask2)\n \n /* Code to generate prologue and epilogue sequences */\n \n+static HOST_WIDE_INT\n+rounded_frame_size (pushed)\n+     int pushed;\n+{\n+  HOST_WIDE_INT size = get_frame_size ();\n+  HOST_WIDE_INT align = STACK_BOUNDARY / BITS_PER_UNIT;\n+\n+  if (TARGET_ALIGN_DOUBLE && pushed & 1)\n+    size += 4;\n+  return size + align - 1 & -align;\n+}\n+\n void\n sh_expand_prologue ()\n {\n   int live_regs_mask;\n   int d, i;\n   int live_regs_mask2;\n   int save_flags = target_flags;\n-  int double_align = 0;\n \n   /* We have pretend args if we had an object sent partially in registers\n      and partially on the stack, e.g. a large structure.  */\n@@ -3845,12 +3857,9 @@ sh_expand_prologue ()\n   if (target_flags != save_flags)\n     emit_insn (gen_toggle_sz ());\n \n-  if (TARGET_ALIGN_DOUBLE && d & 1)\n-    double_align = 4;\n-\n   target_flags = save_flags;\n \n-  output_stack_adjust (-get_frame_size () - double_align,\n+  output_stack_adjust (-rounded_frame_size (d),\n \t\t       stack_pointer_rtx, 3);\n \n   if (frame_pointer_needed)\n@@ -3865,12 +3874,11 @@ sh_expand_epilogue ()\n \n   int live_regs_mask2;\n   int save_flags = target_flags;\n-  int frame_size = get_frame_size ();\n+  int frame_size;\n \n   live_regs_mask = calc_live_regs (&d, &live_regs_mask2);\n \n-  if (TARGET_ALIGN_DOUBLE && d & 1)\n-    frame_size += 4;\n+  frame_size = rounded_frame_size (d);\n \n   if (frame_pointer_needed)\n     {\n@@ -4295,13 +4303,12 @@ initial_elimination_offset (from, to)\n {\n   int regs_saved;\n   int total_saved_regs_space;\n-  int total_auto_space = get_frame_size ();\n+  int total_auto_space;\n   int save_flags = target_flags;\n \n   int live_regs_mask, live_regs_mask2;\n   live_regs_mask = calc_live_regs (&regs_saved, &live_regs_mask2);\n-  if (TARGET_ALIGN_DOUBLE && regs_saved & 1)\n-    total_auto_space += 4;\n+  total_auto_space = rounded_frame_size (regs_saved);\n   target_flags = save_flags;\n \n   total_saved_regs_space = (regs_saved) * 4;"}]}