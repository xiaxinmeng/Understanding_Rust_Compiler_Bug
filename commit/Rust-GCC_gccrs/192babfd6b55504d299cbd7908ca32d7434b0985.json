{"sha": "192babfd6b55504d299cbd7908ca32d7434b0985", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyYmFiZmQ2YjU1NTA0ZDI5OWNiZDc5MDhjYTMyZDc0MzRiMDk4NQ==", "commit": {"author": {"name": "Theodore Papadopoulo", "email": "Theodore.Papadopoulo@sophia.inria.fr", "date": "1999-03-19T01:01:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-19T01:01:01Z"}, "message": "toplev.c (read_integral_parameter): Constify.\n\n        * toplev.c (read_integral_parameter): Constify.  Better control of\n        error messages.\n        (main): Use read_integral_parameter to set optimize, id_clash_len,\n        larger_than_size, and the debugging level.\n        * toplev.h (read_integral_parameter): Update prototype.\n\nFrom-SVN: r25856", "tree": {"sha": "4df347bf84f9126687f85112963f85e23b921af1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df347bf84f9126687f85112963f85e23b921af1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/192babfd6b55504d299cbd7908ca32d7434b0985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192babfd6b55504d299cbd7908ca32d7434b0985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192babfd6b55504d299cbd7908ca32d7434b0985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192babfd6b55504d299cbd7908ca32d7434b0985/comments", "author": {"login": "papadop", "id": 1387516, "node_id": "MDQ6VXNlcjEzODc1MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1387516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/papadop", "html_url": "https://github.com/papadop", "followers_url": "https://api.github.com/users/papadop/followers", "following_url": "https://api.github.com/users/papadop/following{/other_user}", "gists_url": "https://api.github.com/users/papadop/gists{/gist_id}", "starred_url": "https://api.github.com/users/papadop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/papadop/subscriptions", "organizations_url": "https://api.github.com/users/papadop/orgs", "repos_url": "https://api.github.com/users/papadop/repos", "events_url": "https://api.github.com/users/papadop/events{/privacy}", "received_events_url": "https://api.github.com/users/papadop/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c30c0e76a04d193c7ffa850c2357931b728d87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c30c0e76a04d193c7ffa850c2357931b728d87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c30c0e76a04d193c7ffa850c2357931b728d87a"}], "stats": {"total": 153, "additions": 72, "deletions": 81}, "files": [{"sha": "63a5ae9f3d7b99e31455e0f9c5f434e90d1b3665", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192babfd6b55504d299cbd7908ca32d7434b0985/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192babfd6b55504d299cbd7908ca32d7434b0985/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=192babfd6b55504d299cbd7908ca32d7434b0985", "patch": "@@ -1,3 +1,11 @@\n+Fri Mar 19 01:54:30 1999  Theodore Papadopoulo  <Theodore.Papadopoulo@sophia.inria.fr>\n+\n+\t* toplev.c (read_integral_parameter): Constify.  Better control of\n+\terror messages.\n+\t(main): Use read_integral_parameter to set optimize, id_clash_len,\n+\tlarger_than_size, and the debugging level.\n+\t* toplev.h (read_integral_parameter): Update prototype.\n+\n Fri Mar 19 01:42:05 1999  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n \n \t* system.h: Use putc_unlocked, fputc_unlocked, and"}, {"sha": "b51d437e0bc047cd036c7039dc72c779a9c2e2ae", "filename": "gcc/toplev.c", "status": "modified", "additions": 62, "deletions": 80, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192babfd6b55504d299cbd7908ca32d7434b0985/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192babfd6b55504d299cbd7908ca32d7434b0985/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=192babfd6b55504d299cbd7908ca32d7434b0985", "patch": "@@ -1246,25 +1246,30 @@ FILE *rtl_dump_file = NULL;\n \n /* Decode the string P as an integral parameter.\n    If the string is indeed an integer return its numeric value else\n-   issue an Invalid Option error for the option PNAME and return DEFVAL. */\n+   issue an Invalid Option error for the option PNAME and return DEFVAL.\n+   If PNAME is zero just return DEFVAL, do not call error.               */\n    \n int\n read_integral_parameter (p, pname, defval)\n-     char *p;\n-     char *pname;\n-     int  defval;\n+     const char *p;\n+     const char *pname;\n+     const int  defval;\n {\n-  char *endp = p;\n+  const char *endp = p;\n \n   while (*endp)\n     {\n       if (*endp >= '0' && *endp <= '9')\n \tendp++;\n       else\n-\t{\n-\t  error (\"Invalid option `%s'\", pname);\n-\t  return defval;\n-\t}\n+\tbreak;\n+    }\n+\n+  if (*endp != 0)\n+    {\n+      if (pname != 0)\n+\terror (\"Invalid option `%s'\", pname);\n+      return defval;\n     }\n \n   return atoi (p);\n@@ -4713,7 +4718,6 @@ main (argc, argv)\n \t{\n \t  /* Handle -Os, -O2, -O3, -O69, ...  */\n \t  char *p = &argv[i][2];\n-\t  int c;\n \t  \n \t  if ((p[0] == 's') && (p[1] == 0))\n \t    {\n@@ -4724,12 +4728,10 @@ main (argc, argv)\n \t    }\n \t  else\n \t    {\t    \n-\t      while ((c = *p++))\n-\t\tif (! (c >= '0' && c <= '9'))\n-\t\t  break;\n-\t      if (c == 0)\n+\t      const int optimize_val = read_integral_parameter (p, p - 2, -1);\n+\t      if (optimize_val != -1)\n \t\t{\n-\t\t  optimize = atoi (&argv[i][2]);\n+\t\t  optimize = optimize_val;\n \t\t  optimize_size = 0;\n \t\t}\n \t    }\n@@ -4996,16 +4998,7 @@ main (argc, argv)\n \t    }\n \t  else if (str[0] == 'O')\n \t    {\n-\t      register char *p = str+1;\n-\t      if (*p == 's')\n-\t\tp++;\n-\t      else\n-\t\twhile (*p && *p >= '0' && *p <= '9')\n-\t\t  p++;\n-\t      if (*p == '\\0')\n-\t\t;\n-\t      else\n-\t\terror (\"Invalid option `%s'\", argv[i]);\n+\t      /* Already been treated above. Do nothing.  */\n \t    }\n \t  else if (!strcmp (str, \"pedantic\"))\n \t    pedantic = 1;\n@@ -5058,39 +5051,23 @@ main (argc, argv)\n \t\t;\n \t      else if (!strncmp (p, \"id-clash-\", 9))\n \t\t{\n-\t\t  char *endp = p + 9;\n-\n-\t\t  while (*endp)\n+\t\t  const int id_clash_val\n+\t\t    = read_integral_parameter (p + 9, p - 2, -1);\n+\t\t  if (id_clash_val != -1)\n \t\t    {\n-\t\t      if (*endp >= '0' && *endp <= '9')\n-\t\t\tendp++;\n-\t\t      else\n-\t\t\t{\n-\t\t\t  error (\"Invalid option `%s'\", argv[i]);\n-\t\t\t  goto id_clash_lose;\n-\t\t\t}\n+\t\t      id_clash_len = id_clash_val;\n+\t\t      warn_id_clash = 1;\n \t\t    }\n-\t\t  warn_id_clash = 1;\n-\t\t  id_clash_len = atoi (str + 10);\n-\t\tid_clash_lose: ;\n \t\t}\n \t      else if (!strncmp (p, \"larger-than-\", 12))\n \t\t{\n-\t\t  char *endp = p + 12;\n-\n-\t\t  while (*endp)\n+\t\t  const int larger_than_val\n+\t\t    = read_integral_parameter (p + 12, p - 2, -1);\n+\t\t  if (larger_than_val != -1)\n \t\t    {\n-\t\t      if (*endp >= '0' && *endp <= '9')\n-\t\t\tendp++;\n-\t\t      else\n-\t\t\t{\n-\t\t\t  error (\"Invalid option `%s'\", argv[i]);\n-\t\t\t  goto larger_than_lose;\n-\t\t\t}\n+\t\t      larger_than_size = larger_than_val;\n+\t\t      warn_larger_than = 1;\n \t\t    }\n-\t\t  warn_larger_than = 1;\n-\t\t  larger_than_size = atoi (str + 13);\n-\t\tlarger_than_lose: ;\n \t\t}\n \t      else\n \t\terror (\"Invalid option `%s'\", argv[i]);\n@@ -5118,7 +5095,6 @@ main (argc, argv)\n \t    }\n \t  else if (str[0] == 'g')\n \t    {\n-\t      unsigned len;\n \t      unsigned level;\n \t      /* A lot of code assumes write_symbols == NO_DEBUG if the\n \t\t debugging level is 0 (thus -gstabs1 -gstabs0 would lose track\n@@ -5136,48 +5112,43 @@ main (argc, argv)\n \t\t\"none\", \"stabs\", \"coff\", \"dwarf-1\", \"dwarf-2\", \"xcoff\"\n \t      };\n \n+\t      /* The maximum admissible debug level value.  */\n+\t      static const unsigned max_debug_level = 3;\n+\n \t      /* Look up STR in the table.  */\n \t      for (da = debug_args; da->arg; da++)\n \t\t{\n-\t\t  if (! strncmp (str, da->arg, strlen (da->arg)))\n+\t\t  const int da_len = strlen (da->arg);\n+\n+\t\t  if (! strncmp (str, da->arg, da_len))\n \t\t    {\n \t\t      enum debug_info_type type = da->debug_type;\n-\t\t      char *p, *q;\n+\t\t      const char *p = str + da_len;\n \n-\t\t      p = str + strlen (da->arg);\n \t\t      if (*p && (*p < '0' || *p > '9'))\n \t\t\tcontinue;\n-\t\t      len = p - str;\n-\t\t      q = p;\n-\t\t      while (*q && (*q >= '0' && *q <= '9'))\n-\t\t\tq++;\n-\t\t      if (*p)\n+\t\t      \n+\t\t      level = read_integral_parameter (p, 0,\n+\t\t\t\t\t\t       max_debug_level + 1);\n+\t\t      if (da_len > 1 && !strncmp (str, \"gdwarf\", da_len))\n \t\t\t{\n-\t\t\t  level = atoi (p);\n-\t\t\t  if (len > 1 && !strncmp (str, \"gdwarf\", len))\n-\t\t\t    {\n-\t\t\t      error (\"use -gdwarf -g%d for DWARF v1, level %d\",\n-\t\t\t\t       level, level);\n-\t\t\t      if (level == 2)\n-\t\t\t\terror (\"use -gdwarf-2   for DWARF v2\");\n-\t\t\t    }\n+\t\t\t  error (\"use -gdwarf -g%d for DWARF v1, level %d\",\n+\t\t\t\t level, level);\n+\t\t\t  if (level == 2)\n+\t\t\t    error (\"use -gdwarf-2   for DWARF v2\");\n \t\t\t}\n-\t\t      else\n-\t\t\tlevel = 2;\t/* default debugging info level */\n-\t\t      if (*q || level > 3)\n+\n+\t\t      if (level > max_debug_level)\n \t\t\t{\n-\t\t\t  warning (\"invalid debug level specification in option: `-%s'\",\n-\t\t\t\t   str);\n-\t\t\t  /* ??? This error message is incorrect in the case of\n-\t\t\t     -g4 -g.  */\n-\t\t\t  warning (\"no debugging information will be generated\");\n-\t\t\t  level = 0;\n+\t\t\t  warning (\"ignoring option `%s' due to invalid debug level specification\",\n+\t\t\t\t   str - 1);\n+\t\t\t  level = debug_info_level;\n \t\t\t}\n \n \t\t      if (type == NO_DEBUG)\n \t\t\t{\n \t\t\t  type = PREFERRED_DEBUGGING_TYPE;\n-\t\t\t  if (len > 1 && strncmp (str, \"ggdb\", len) == 0)\n+\t\t\t  if (da_len > 1 && strncmp (str, \"ggdb\", da_len) == 0)\n \t\t\t    {\n #if defined (DWARF2_DEBUGGING_INFO) && !defined (LINKER_DOES_NOT_WORK_WITH_DWARF2)\n \t\t\t      type = DWARF2_DEBUG;\n@@ -5231,8 +5202,19 @@ main (argc, argv)\n \t    }\n \t  else if (str[0] == 'G')\n \t    {\n-\t      g_switch_set = TRUE;\n-\t      g_switch_value = atoi ((str[1] != '\\0') ? str+1 : argv[++i]);\n+\t      const int g_switch_val = (str[1] != '\\0') ?\n+\t                               read_integral_parameter(str + 1, 0, -1) :\n+\t\t\t               read_integral_parameter(argv[++i], 0, -1);\n+\t      \n+\t      if (g_switch_val != -1)\n+\t        {\n+\t\t  g_switch_set = TRUE;\n+\t\t  g_switch_value = g_switch_val;\n+\t\t}\n+\t      else\n+\t        {\n+\t\t  error(\"Invalid option `-%s'\",str);\n+\t\t}\n \t    }\n \t  else if (!strncmp (str, \"aux-info\", 8))\n \t    {"}, {"sha": "05a9c40315bf556c907b2554db6ab94510c9b4e7", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192babfd6b55504d299cbd7908ca32d7434b0985/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192babfd6b55504d299cbd7908ca32d7434b0985/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=192babfd6b55504d299cbd7908ca32d7434b0985", "patch": "@@ -26,7 +26,8 @@ union tree_node;\n struct rtx_def;\n #endif\n \n-extern int read_integral_parameter\tPROTO ((char *, char *, int));\n+extern int read_integral_parameter\tPROTO ((const char *, const char *,\n+\t\t\t\t\t\tconst int));\n extern int count_error\t\t\tPROTO ((int));\n extern void strip_off_ending\t\tPROTO ((char *, int));\n extern void print_time\t\t\tPROTO ((const char *, int));"}]}