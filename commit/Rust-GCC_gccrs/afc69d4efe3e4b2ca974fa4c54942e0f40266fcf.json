{"sha": "afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZjNjlkNGVmZTNlNGIyY2E5NzRmYTRjNTQ5NDJlMGY0MDI2NmZjZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-20T00:09:34Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-20T00:09:34Z"}, "message": "rs6000: Delete the \"wo\" constraint\n\nThis replaces the \"wo\" constraint by \"wa\", with isa \"p9v\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wo\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wo.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wo\" constraint by \"wa\" with \"p9v\".\n\t* config/rs6000/altivec.md: Ditto.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271385", "tree": {"sha": "36d4723a1519abe1dd83b31cc820f8e3bb6dad2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d4723a1519abe1dd83b31cc820f8e3bb6dad2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef536b413e077a87b15a11e60ca4c2675d11dccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef536b413e077a87b15a11e60ca4c2675d11dccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef536b413e077a87b15a11e60ca4c2675d11dccb"}], "stats": {"total": 149, "additions": 87, "deletions": 62}, "files": [{"sha": "170f8fc2ae4d9a53620290208a10ba468bbe6b75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -1,3 +1,15 @@\n+2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wo\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wo.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wo\" constraint by \"wa\" with \"p9v\".\n+\t* config/rs6000/altivec.md: Ditto.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin-c.c (darwin_register_objc_includes): Do not"}, {"sha": "b6a22d9010c8e371944908af6c6f33327815c2e8", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -2023,28 +2023,30 @@\n \n ;; Slightly prefer vperm, since the target does not overlap the source\n (define_insn \"altivec_vperm_<mode>_direct\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wo\")\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wa\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wa\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v,0\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wa\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n    xxperm %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n (define_insn \"altivec_vperm_v8hiv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v,wo\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v,?wa\")\n+\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v,wa\")\n    \t               (match_operand:V8HI 2 \"register_operand\" \"v,0\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"v,wa\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n    xxperm %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n (define_expand \"altivec_vperm_<mode>_uns\"\n   [(set (match_operand:VM 0 \"register_operand\")\n@@ -2062,16 +2064,17 @@\n })\n \n (define_insn \"*altivec_vperm_<mode>_uns_internal\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wo\")\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wa\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wa\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v,0\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wa\")]\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n    xxperm %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n (define_expand \"vec_permv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\")\n@@ -2088,16 +2091,17 @@\n })\n \n (define_insn \"*altivec_vpermr_<mode>_internal\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wo\")\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wa\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wa\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v,0\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wa\")]\n \t\t   UNSPEC_VPERMR))]\n   \"TARGET_P9_VECTOR\"\n   \"@\n    vpermr %0,%1,%2,%3\n    xxpermr %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n (define_insn \"altivec_vrfip\"\t\t; ceil\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n@@ -3245,28 +3249,30 @@\n   \"\")\n \n (define_insn \"vperm_v8hiv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,?wo\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v,wo\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,?wa\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v,wa\")\n \t\t      (match_operand:V4SI 2 \"register_operand\" \"v,0\")\n-\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wa\")]\n                   UNSPEC_VPERMSI))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n    xxperm %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n (define_insn \"vperm_v16qiv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v,?wo\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v,wo\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v,?wa\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v,wa\")\n \t\t      (match_operand:V8HI 2 \"register_operand\" \"v,0\")\n-\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wa\")]\n                   UNSPEC_VPERMHI))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n    xxperm %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n \n (define_expand \"vec_unpacku_hi_v16qi\""}, {"sha": "c11dc0eb65c36cdde14d8766287de40df115963e", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -97,9 +97,6 @@\n ;; There is a mode_attr that resolves to wm for SDmode and wn for SFmode\n (define_register_constraint \"wn\" \"NO_REGS\" \"No register (NO_REGS).\")\n \n-(define_register_constraint \"wo\" \"rs6000_constraints[RS6000_CONSTRAINT_wo]\"\n-  \"VSX register if the -mpower9-vector option was used or NO_REGS.\")\n-\n (define_register_constraint \"wp\" \"rs6000_constraints[RS6000_CONSTRAINT_wp]\"\n   \"VSX register to use for IEEE 128-bit fp TFmode, or NO_REGS.\")\n "}, {"sha": "18fa3acb2e16f5490c92584e6732b82beb47ebfd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -2519,7 +2519,6 @@ rs6000_debug_reg_global (void)\n \t   \"wk reg_class = %s\\n\"\n \t   \"wl reg_class = %s\\n\"\n \t   \"wm reg_class = %s\\n\"\n-\t   \"wo reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n@@ -2552,7 +2551,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wk]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wl]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wm]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wo]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n@@ -3266,14 +3264,9 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \trs6000_constraints[RS6000_CONSTRAINT_wp] = VSX_REGS;\t/* TFmode  */\n     }\n \n+  /* Support for new D-form instructions.  */\n   if (TARGET_P9_VECTOR)\n-    {\n-      /* Support for new D-form instructions.  */\n-      rs6000_constraints[RS6000_CONSTRAINT_wb] = ALTIVEC_REGS;\n-\n-      /* Support for ISA 3.0 (power9) vectors.  */\n-      rs6000_constraints[RS6000_CONSTRAINT_wo] = VSX_REGS;\n-    }\n+    rs6000_constraints[RS6000_CONSTRAINT_wb] = ALTIVEC_REGS;\n \n   /* Support for new direct moves (ISA 3.0 + 64bit).  */\n   if (TARGET_DIRECT_MOVE_128)"}, {"sha": "d59f4c702d38443bab06113444c5fdf546037c13", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -1260,7 +1260,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wk,\t\t/* FPR/VSX register for DFmode direct moves. */\n   RS6000_CONSTRAINT_wl,\t\t/* FPR register for LFIWAX */\n   RS6000_CONSTRAINT_wm,\t\t/* VSX register for direct move */\n-  RS6000_CONSTRAINT_wo,\t\t/* VSX register for power9 vector.  */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */"}, {"sha": "c56c58585fd4ab072a2d50df649659b091847180", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -2463,9 +2463,9 @@\n   [(set_attr \"type\" \"store\")])\n \n (define_insn_and_split \"bswaphi2_reg\"\n-  [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=&r,wo\")\n+  [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=&r,wa\")\n \t(bswap:HI\n-\t (match_operand:HI 1 \"gpc_reg_operand\" \"r,wo\")))\n+\t (match_operand:HI 1 \"gpc_reg_operand\" \"r,wa\")))\n    (clobber (match_scratch:SI 2 \"=&r,X\"))]\n   \"\"\n   \"@\n@@ -2488,14 +2488,15 @@\n   operands[4] = simplify_gen_subreg (SImode, operands[1], HImode, 0);\n }\n   [(set_attr \"length\" \"12,4\")\n-   (set_attr \"type\" \"*,vecperm\")])\n+   (set_attr \"type\" \"*,vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n ;; We are always BITS_BIG_ENDIAN, so the bit positions below in\n ;; zero_extract insns do not change for -mlittle.\n (define_insn_and_split \"bswapsi2_reg\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,wo\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,wa\")\n \t(bswap:SI\n-\t (match_operand:SI 1 \"gpc_reg_operand\" \"r,wo\")))]\n+\t (match_operand:SI 1 \"gpc_reg_operand\" \"r,wa\")))]\n   \"\"\n   \"@\n    #\n@@ -2518,7 +2519,8 @@\n \t\t\t(const_int -256))))]\n   \"\"\n   [(set_attr \"length\" \"12,4\")\n-   (set_attr \"type\" \"*,vecperm\")])\n+   (set_attr \"type\" \"*,vecperm\")\n+   (set_attr \"isa\" \"*,p9v\")])\n \n ;; On systems with LDBRX/STDBRX generate the loads/stores directly, just like\n ;; we do for L{H,W}BRX and ST{H,W}BRX above.  If not, we have to generate more\n@@ -2583,11 +2585,12 @@\n   [(set_attr \"type\" \"store\")])\n \n (define_insn \"bswapdi2_xxbrd\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=wo\")\n-\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"wo\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=wa\")\n+\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"wa\")))]\n   \"TARGET_P9_VECTOR\"\n   \"xxbrd %x0,%x1\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"p9v\")])\n \n (define_insn \"bswapdi2_reg\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n@@ -8706,7 +8709,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n          \"=Y,        r,         r,         m,         ^d,        ^d,\n           r,         wY,        Z,         ^wb,       $wv,       ^wi,\n-          wo,        wo,        wv,        wi,        *i,        wv,\n+          wa,        wa,        wv,        wi,        *i,        wv,\n           wv\")\n \n \t(match_operand:DI 1 \"input_operand\"\n@@ -8748,7 +8751,12 @@\n          \"8,         8,         8,         4,         4,         4,\n           16,        4,         4,         4,         4,         4,\n           4,         4,         4,         4,         4,         8,\n-          4\")])\n+          4\")\n+   (set_attr \"isa\"\n+         \"*,         *,         *,         *,         *,         *,\n+          *,         *,         *,         *,         *,         *,\n+          p9v,       p9v,       *,         *,         *,         *,\n+          *\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\")\n@@ -8786,7 +8794,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=YZ,       r,         r,         r,         r,          r,\n                 m,         ^d,        ^d,        wY,        Z,          $wb,\n-                $wv,       ^wi,       wo,        wo,        wv,         wi,\n+                $wv,       ^wi,       wa,        wa,        wv,         wi,\n                 wi,        wv,        wv,        r,         *h,         *h,\n                 ?r,        ?wg,       ?r,        ?wj\")\n \n@@ -8842,7 +8850,13 @@\n                 4,         4,         4,         4,         4,          4,\n                 4,         4,         4,         4,         4,          4,\n                 4,         8,         4,         4,         4,          4,\n-                4,         4,         4,         4\")])\n+                4,         4,         4,         4\")\n+   (set_attr \"isa\"\n+               \"*,         *,         *,         *,         *,          *,\n+                *,         *,         *,         *,         *,          *,\n+                *,         *,         p9v,       p9v,       *,          *,\n+                *,         *,         *,         *,         *,          *,\n+                *,         *,         *,         *\")])\n \n ; Some DImode loads are best done as a load of -1 followed by a mask\n ; instruction."}, {"sha": "df8951e3555db3985917598e1ddd54309798e2e9", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -1209,7 +1209,7 @@\n (define_insn \"vsx_mov<mode>_64bit\"\n   [(set (match_operand:VSX_M 0 \"nonimmediate_operand\"\n                \"=ZwO,      <VSa>,     <VSa>,     r,         we,        ?wQ,\n-                ?&r,       ??r,       ??Y,       <??r>,     wo,        v,\n+                ?&r,       ??r,       ??Y,       <??r>,     wa,        v,\n                 ?<VSa>,    v,         <??r>,     wZ,        v\")\n \n \t(match_operand:VSX_M 1 \"input_operand\" \n@@ -1227,19 +1227,22 @@\n                \"vecstore,  vecload,   vecsimple, mffgpr,    mftgpr,    load,\n                 store,     load,      store,     *,         vecsimple, vecsimple,\n                 vecsimple, *,         *,         vecstore,  vecload\")\n-\n    (set_attr \"length\"\n                \"4,         4,         4,         8,         4,         8,\n                 8,         8,         8,         8,         4,         4,\n-                4,         20,        8,         4,         4\")])\n+                4,         20,        8,         4,         4\")\n+   (set_attr \"isa\"\n+               \"*,         *,         *,         *,         *,         *,\n+                *,         *,         *,         *,         p9v,       *,\n+                *,         *,         *,         *,         *\")])\n \n ;;              VSX store  VSX load   VSX move   GPR load   GPR store  GPR move\n ;;              XXSPLTIB   VSPLTISW   VSX 0/-1   VMX const  GPR const\n ;;              LVX (VMX)  STVX (VMX)\n (define_insn \"*vsx_mov<mode>_32bit\"\n   [(set (match_operand:VSX_M 0 \"nonimmediate_operand\"\n                \"=ZwO,      <VSa>,     <VSa>,     ??r,       ??Y,       <??r>,\n-                wo,        v,         ?<VSa>,    v,         <??r>,\n+                wa,        v,         ?<VSa>,    v,         <??r>,\n                 wZ,        v\")\n \n \t(match_operand:VSX_M 1 \"input_operand\" \n@@ -1257,11 +1260,14 @@\n                \"vecstore,  vecload,   vecsimple, load,      store,    *,\n                 vecsimple, vecsimple, vecsimple, *,         *,\n                 vecstore,  vecload\")\n-\n    (set_attr \"length\"\n                \"4,         4,         4,         16,        16,        16,\n                 4,         4,         4,         20,        16,\n-                4,         4\")])\n+                4,         4\")\n+   (set_attr \"isa\"\n+               \"*,         *,         *,         *,         *,         *,\n+                p9v,       *,         *,         *,         *,\n+                *,         *\")])\n \n ;; Explicit  load/store expanders for the builtin functions\n (define_expand \"vsx_load_<mode>\"\n@@ -3199,7 +3205,7 @@\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=d,    d,     wr, wr\")\n \n \t(vec_select:<VS_scalar>\n-\t (match_operand:VSX_D 1 \"gpc_reg_operand\"      \"<VSa>, <VSa>, wm, wo\")\n+\t (match_operand:VSX_D 1 \"gpc_reg_operand\"      \"<VSa>, <VSa>, wm, wa\")\n \n \t (parallel\n \t  [(match_operand:QI 2 \"const_0_to_1_operand\"  \"wD,    n,     wD, n\")])))]\n@@ -3248,7 +3254,8 @@\n   else\n     gcc_unreachable ();\n }\n-  [(set_attr \"type\" \"veclogical,mftgpr,mftgpr,vecperm\")])\n+  [(set_attr \"type\" \"veclogical,mftgpr,mftgpr,vecperm\")\n+   (set_attr \"isa\" \"*,*,*,p9v\")])\n \n ;; Optimize extracting a single scalar element from memory.\n (define_insn_and_split \"*vsx_extract_<P:mode>_<VSX_D:mode>_load\""}, {"sha": "dc58aa9d2b61e521721907af8ff046acd8e798e6", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc69d4efe3e4b2ca974fa4c54942e0f40266fcf/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=afc69d4efe3e4b2ca974fa4c54942e0f40266fcf", "patch": "@@ -3198,7 +3198,7 @@ Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n @code{wf}, @code{wg}, @code{wh}, @code{wi}, @code{wj}, @code{wk},\n-@code{wl}, @code{wm}, @code{wo}, @code{wp}, @code{wq}, @code{ws},\n+@code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws},\n @code{wt}, @code{wu}, @code{wv}, @code{ww}, or @code{wy})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n@@ -3283,9 +3283,6 @@ VSX register if direct move instructions are enabled, or NO_REGS.\n @item wn\n No register (NO_REGS).\n \n-@item wo\n-VSX register to use for ISA 3.0 vector instructions, or NO_REGS.\n-\n @item wp\n VSX register to use for IEEE 128-bit floating point TFmode, or NO_REGS.\n "}]}