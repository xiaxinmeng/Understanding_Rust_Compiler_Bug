{"sha": "fbecdc83824c4158ba7047226266719fb51bc412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlY2RjODM4MjRjNDE1OGJhNzA0NzIyNjI2NjcxOWZiNTFiYzQxMg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-21T00:27:25Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-21T00:27:25Z"}, "message": "re PR fortran/44054 (Handle -Werror, -Werror=, -fdiagnostics-show-option, !GCC$ diagnostic (pragmas) and color)\n\ngcc/ChangeLog:\n\n2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* diagnostic.c: Set default caret.\n\t(diagnostic_show_locus): Use it. Tell pretty-printer that a new\n\tline is needed.\n\t* diagnostic.h (struct diagnostic_context):\n\n\ngcc/fortran/ChangeLog:\n\n2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* error.c (gfc_diagnostic_build_locus_prefix): New function.\n\t(gfc_diagnostic_starter): Follow Fortran FE diagnostics.\n\t(gfc_diagnostic_finalizer): Do not call default finalizer.\n\nFrom-SVN: r214251", "tree": {"sha": "8e4a6ff9aef324beb077e82626a2a4e8f6c910e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e4a6ff9aef324beb077e82626a2a4e8f6c910e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbecdc83824c4158ba7047226266719fb51bc412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbecdc83824c4158ba7047226266719fb51bc412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbecdc83824c4158ba7047226266719fb51bc412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbecdc83824c4158ba7047226266719fb51bc412/comments", "author": null, "committer": null, "parents": [{"sha": "ecda22b23dea0a251b2a29caaab6424db472a297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecda22b23dea0a251b2a29caaab6424db472a297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecda22b23dea0a251b2a29caaab6424db472a297"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "1067203024d30503a90e193e9c6e6528e6648a63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbecdc83824c4158ba7047226266719fb51bc412", "patch": "@@ -1,3 +1,11 @@\n+2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* diagnostic.c: Set default caret.\n+\t(diagnostic_show_locus): Use it. Tell pretty-printer that a new\n+\tline is needed.\n+\t* diagnostic.h (struct diagnostic_context):\n+\n 2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sel-sched-ir.h (exit_insn): Strengthen from rtx to rtx_insn *."}, {"sha": "73666d62fc7bd074431303f10388c21a6f74e9ff", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=fbecdc83824c4158ba7047226266719fb51bc412", "patch": "@@ -131,6 +131,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n     context->classify_diagnostic[i] = DK_UNSPECIFIED;\n   context->show_caret = false;\n   diagnostic_set_caret_max_width (context, pp_line_cutoff (context->printer));\n+  context->caret_char = '^';\n   context->show_option_requested = false;\n   context->abort_on_error = false;\n   context->show_column = false;\n@@ -280,7 +281,7 @@ adjust_line (const char *line, int line_width,\n }\n \n /* Print the physical source line corresponding to the location of\n-   this diagnostics, and a caret indicating the precise column.  */\n+   this diagnostic, and a caret indicating the precise column.  */\n void\n diagnostic_show_locus (diagnostic_context * context,\n \t\t       const diagnostic_info *diagnostic)\n@@ -328,9 +329,11 @@ diagnostic_show_locus (diagnostic_context * context,\n   /* pp_printf does not implement %*c.  */\n   size_t len = s.column + 3 + strlen (caret_cs) + strlen (caret_ce);\n   buffer = XALLOCAVEC (char, len);\n-  snprintf (buffer, len, \"%s %*c%s\", caret_cs, s.column, '^', caret_ce);\n+  snprintf (buffer, len, \"%s %*c%s\", caret_cs, s.column, context->caret_char,\n+\t    caret_ce);\n   pp_string (context->printer, buffer);\n   pp_set_prefix (context->printer, saved_prefix);\n+  pp_needs_newline (context->printer) = true;\n }\n \n /* Functions at which to stop the backtrace print.  It's not"}, {"sha": "64f90a79324a05be14a4d91783f976138a0cd701", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=fbecdc83824c4158ba7047226266719fb51bc412", "patch": "@@ -105,6 +105,9 @@ struct diagnostic_context\n   /* Maximum width of the source line printed.  */\n   int caret_max_width;\n \n+  /* Character used for caret diagnostics.  */\n+  char caret_char;\n+\n   /* True if we should print the command line option which controls\n      each diagnostic, if known.  */\n   bool show_option_requested;"}, {"sha": "91330ffdd5f7adaf1ce2088d7611773c90517baa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fbecdc83824c4158ba7047226266719fb51bc412", "patch": "@@ -1,3 +1,10 @@\n+2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* error.c (gfc_diagnostic_build_locus_prefix): New function.\n+\t(gfc_diagnostic_starter): Follow Fortran FE diagnostics.\n+\t(gfc_diagnostic_finalizer): Do not call default finalizer.\n+\n 2014-08-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR fortran/44054"}, {"sha": "a08aa9bd72ee102d0789c100195d9302940e6118", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbecdc83824c4158ba7047226266719fb51bc412/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=fbecdc83824c4158ba7047226266719fb51bc412", "patch": "@@ -987,39 +987,69 @@ gfc_diagnostic_build_prefix (diagnostic_context *context,\n \t\t\t\tdiagnostic_kind_color[diagnostic->kind]);\n       text_ce = colorize_stop (pp_show_color (pp));\n     }\n+  return build_message_string (\"%s%s%s: \", text_cs, text, text_ce);\n+}\n+\n+/* Return a malloc'd string describing a location.  The caller is\n+   responsible for freeing the memory.  */\n+static char *\n+gfc_diagnostic_build_locus_prefix (diagnostic_context *context,\n+\t\t\t\t   const diagnostic_info *diagnostic)\n+{\n+  pretty_printer *pp = context->printer;\n   const char *locus_cs = colorize_start (pp_show_color (pp), \"locus\");\n   const char *locus_ce = colorize_stop (pp_show_color (pp));\n-\n   expanded_location s = expand_location_to_spelling_point (diagnostic->location);\n   if (diagnostic->override_column)\n     s.column = diagnostic->override_column;\n \n   return (s.file == NULL\n-\t  ? build_message_string (\"%s%s:%s %s%s%s: \", locus_cs, progname, locus_ce,\n-\t\t\t\t  text_cs, text, text_ce)\n+\t  ? build_message_string (\"%s%s:%s \", locus_cs, progname, locus_ce )\n \t  : !strcmp (s.file, N_(\"<built-in>\"))\n-\t  ? build_message_string (\"%s%s:%s %s%s%s: \", locus_cs, s.file, locus_ce,\n-\t\t\t     text_cs, text, text_ce)\n+\t  ? build_message_string (\"%s%s:%s \", locus_cs, s.file, locus_ce)\n \t  : context->show_column\n-\t  ? build_message_string (\"%s%s:%d:%d:%s %s%s%s: \", locus_cs, s.file, s.line,\n-\t\t\t\t  s.column, locus_ce, text_cs, text, text_ce)\n-\t  : build_message_string (\"%s%s:%d:%s %s%s%s: \", locus_cs, s.file, s.line, locus_ce,\n-\t\t\t\t  text_cs, text, text_ce));\n+\t  ? build_message_string (\"%s%s:%d:%d:%s \", locus_cs, s.file, s.line,\n+\t\t\t\t  s.column, locus_ce)\n+\t  : build_message_string (\"%s%s:%d:%s \", locus_cs, s.file, s.line, locus_ce));\n }\n \n static void\n gfc_diagnostic_starter (diagnostic_context *context,\n \t\t\tdiagnostic_info *diagnostic)\n {\n-  pp_set_prefix (context->printer, gfc_diagnostic_build_prefix (context,\n-\t\t\t\t\t\t\t\tdiagnostic));\n+  char * locus_prefix = gfc_diagnostic_build_locus_prefix (context, diagnostic);\n+  char * prefix = gfc_diagnostic_build_prefix (context, diagnostic);\n+  /* First we assume there is a caret line.  */\n+  pp_set_prefix (context->printer, NULL);\n+  if (pp_needs_newline (context->printer))\n+    pp_newline (context->printer);\n+  pp_verbatim (context->printer, locus_prefix);\n+  /* Fortran uses an empty line between locus and caret line.  */\n+  pp_newline (context->printer);\n+  diagnostic_show_locus (context, diagnostic);\n+  if (pp_needs_newline (context->printer))\n+    {\n+      pp_newline (context->printer);\n+      /* If the caret line was shown, the prefix does not contain the\n+\t locus. */\n+      pp_set_prefix (context->printer, prefix);\n+    }\n+  else \n+    {\n+      /* Otherwise, start again.  */\n+      pp_clear_output_area(context->printer);\n+      pp_set_prefix (context->printer, concat (locus_prefix, prefix, NULL));\n+      free (prefix);\n+    }\n+  free (locus_prefix);\n }\n \n static void\n gfc_diagnostic_finalizer (diagnostic_context *context,\n-\t\t\t  diagnostic_info *diagnostic)\n+\t\t\t  diagnostic_info *diagnostic ATTRIBUTE_UNUSED)\n {\n-  default_diagnostic_finalizer(context, diagnostic);\n+  pp_destroy_prefix (context->printer);\n+  pp_newline_and_flush (context->printer);\n }\n \n /* Give a warning about the command-line.  */\n@@ -1291,4 +1321,5 @@ gfc_diagnostics_init (void)\n {\n   diagnostic_starter (global_dc) = gfc_diagnostic_starter;\n   diagnostic_finalizer (global_dc) = gfc_diagnostic_finalizer;\n+  global_dc->caret_char = '^';\n }"}]}