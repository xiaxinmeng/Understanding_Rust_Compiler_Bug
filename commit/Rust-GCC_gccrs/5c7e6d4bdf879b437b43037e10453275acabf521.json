{"sha": "5c7e6d4bdf879b437b43037e10453275acabf521", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM3ZTZkNGJkZjg3OWI0MzdiNDMwMzdlMTA0NTMyNzVhY2FiZjUyMQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-03-12T07:12:50Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-03-13T15:15:26Z"}, "message": "df: Don't abuse bb->aux (PR94148, PR94042)\n\nThe df dataflow solvers use the aux field in the basic_block struct,\nalthough that is reserved for any use by passes.  And not only that,\nit is required that you set all such fields to NULL before calling\nthe solvers, or you quietly get wrong results.\n\nThis changes the solvers to use a local array for last_change_age\ninstead, just like it already had a local array for last_visit_age.\n\n\tPR rtl-optimization/94148\n\tPR rtl-optimization/94042\n\t* df-core.c (BB_LAST_CHANGE_AGE): Delete.\n\t(df_worklist_propagate_forward): New parameter last_change_age, use\n\tthat instead of bb->aux.\n\t(df_worklist_propagate_backward): Ditto.\n\t(df_worklist_dataflow_doublequeue): Use a local array last_change_age.", "tree": {"sha": "80d97047d47fe59121a20a2e7cc849cbbf06e05f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d97047d47fe59121a20a2e7cc849cbbf06e05f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c7e6d4bdf879b437b43037e10453275acabf521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7e6d4bdf879b437b43037e10453275acabf521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c7e6d4bdf879b437b43037e10453275acabf521", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7e6d4bdf879b437b43037e10453275acabf521/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a13af724aedfb360893dcc16aa7cc12ca49799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a13af724aedfb360893dcc16aa7cc12ca49799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a13af724aedfb360893dcc16aa7cc12ca49799"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "3f4eb1a0952dbb8680dfbda6b439898ca684c05b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7e6d4bdf879b437b43037e10453275acabf521/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7e6d4bdf879b437b43037e10453275acabf521/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c7e6d4bdf879b437b43037e10453275acabf521", "patch": "@@ -1,3 +1,13 @@\n+2020-03-13  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/94148\n+\tPR rtl-optimization/94042\n+\t* df-core.c (BB_LAST_CHANGE_AGE): Delete.\n+\t(df_worklist_propagate_forward): New parameter last_change_age, use\n+\tthat instead of bb->aux.\n+\t(df_worklist_propagate_backward): Ditto.\n+\t(df_worklist_dataflow_doublequeue): Use a local array last_change_age.\n+\n 2020-03-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/94163"}, {"sha": "9875a26895c62518c297ac534e793a27dbd4534c", "filename": "gcc/df-core.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7e6d4bdf879b437b43037e10453275acabf521/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7e6d4bdf879b437b43037e10453275acabf521/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=5c7e6d4bdf879b437b43037e10453275acabf521", "patch": "@@ -871,9 +871,6 @@ make_pass_df_finish (gcc::context *ctxt)\n    The general data flow analysis engine.\n ----------------------------------------------------------------------------*/\n \n-/* Return time BB when it was visited for last time.  */\n-#define BB_LAST_CHANGE_AGE(bb) ((ptrdiff_t)(bb)->aux)\n-\n /* Helper function for df_worklist_dataflow.\n    Propagate the dataflow forward.\n    Given a BB_INDEX, do the dataflow propagation\n@@ -897,7 +894,8 @@ df_worklist_propagate_forward (struct dataflow *dataflow,\n                                unsigned *bbindex_to_postorder,\n                                bitmap pending,\n                                sbitmap considered,\n-\t\t\t       ptrdiff_t age)\n+\t\t\t       vec<int> &last_change_age,\n+\t\t\t       int age)\n {\n   edge e;\n   edge_iterator ei;\n@@ -908,7 +906,8 @@ df_worklist_propagate_forward (struct dataflow *dataflow,\n   if (EDGE_COUNT (bb->preds) > 0)\n     FOR_EACH_EDGE (e, ei, bb->preds)\n       {\n-        if (age <= BB_LAST_CHANGE_AGE (e->src)\n+\tif (bbindex_to_postorder[e->src->index] < last_change_age.length ()\n+\t    && age <= last_change_age[bbindex_to_postorder[e->src->index]]\n \t    && bitmap_bit_p (considered, e->src->index))\n           changed |= dataflow->problem->con_fun_n (e);\n       }\n@@ -942,7 +941,8 @@ df_worklist_propagate_backward (struct dataflow *dataflow,\n                                 unsigned *bbindex_to_postorder,\n                                 bitmap pending,\n                                 sbitmap considered,\n-\t\t\t        ptrdiff_t age)\n+\t\t\t\tvec<int> &last_change_age,\n+\t\t\t\tint age)\n {\n   edge e;\n   edge_iterator ei;\n@@ -953,7 +953,8 @@ df_worklist_propagate_backward (struct dataflow *dataflow,\n   if (EDGE_COUNT (bb->succs) > 0)\n     FOR_EACH_EDGE (e, ei, bb->succs)\n       {\n-        if (age <= BB_LAST_CHANGE_AGE (e->dest)\n+\tif (bbindex_to_postorder[e->dest->index] < last_change_age.length ()\n+\t    && age <= last_change_age[bbindex_to_postorder[e->dest->index]]\n \t    && bitmap_bit_p (considered, e->dest->index))\n           changed |= dataflow->problem->con_fun_n (e);\n       }\n@@ -991,10 +992,10 @@ df_worklist_propagate_backward (struct dataflow *dataflow,\n    worklists (we are processing WORKLIST and storing new BBs to visit in\n    PENDING).\n \n-   As an optimization we maintain ages when BB was changed (stored in bb->aux)\n-   and when it was last visited (stored in last_visit_age).  This avoids need\n-   to re-do confluence function for edges to basic blocks whose source\n-   did not change since destination was visited last time.  */\n+   As an optimization we maintain ages when BB was changed (stored in\n+   last_change_age) and when it was last visited (stored in last_visit_age).\n+   This avoids need to re-do confluence function for edges to basic blocks\n+   whose source did not change since destination was visited last time.  */\n \n static void\n df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n@@ -1010,11 +1011,11 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n   int age = 0;\n   bool changed;\n   vec<int> last_visit_age = vNULL;\n+  vec<int> last_change_age = vNULL;\n   int prev_age;\n-  basic_block bb;\n-  int i;\n \n   last_visit_age.safe_grow_cleared (n_blocks);\n+  last_change_age.safe_grow_cleared (n_blocks);\n \n   /* Double-queueing. Worklist is for the current iteration,\n      and pending is for the next. */\n@@ -1032,30 +1033,30 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n \n \t  bitmap_clear_bit (pending, index);\n \t  bb_index = blocks_in_postorder[index];\n-\t  bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \t  prev_age = last_visit_age[index];\n \t  if (dir == DF_FORWARD)\n \t    changed = df_worklist_propagate_forward (dataflow, bb_index,\n \t\t\t\t\t\t     bbindex_to_postorder,\n \t\t\t\t\t\t     pending, considered,\n+\t\t\t\t\t\t     last_change_age,\n \t\t\t\t\t\t     prev_age);\n \t  else\n \t    changed = df_worklist_propagate_backward (dataflow, bb_index,\n \t\t\t\t\t\t      bbindex_to_postorder,\n \t\t\t\t\t\t      pending, considered,\n+\t\t\t\t\t\t      last_change_age,\n \t\t\t\t\t\t      prev_age);\n \t  last_visit_age[index] = ++age;\n \t  if (changed)\n-\t    bb->aux = (void *)(ptrdiff_t)age;\n+\t    last_change_age[index] = age;\n \t}\n       bitmap_clear (worklist);\n     }\n-  for (i = 0; i < n_blocks; i++)\n-    BASIC_BLOCK_FOR_FN (cfun, blocks_in_postorder[i])->aux = NULL;\n \n   BITMAP_FREE (worklist);\n   BITMAP_FREE (pending);\n   last_visit_age.release ();\n+  last_change_age.release ();\n \n   /* Dump statistics. */\n   if (dump_file)"}]}