{"sha": "f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzNTJjYWJiOGM3ZjA3ODg2MmVlM2MxYmNhMDZlOTZhNmViY2ZkNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-05-10T13:28:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-05-10T13:28:41Z"}, "message": "Add debugging ruler to diagnostic-show-locus.c\n\nWhen debugging diagnostic-show-locus.c, it's invaluable to have a\n\"ruler\" showing column numbers.\n\nThis patch adds in support via a new \"show_ruler_p\" flag within\nthe diagnostic_context.  There's no direct way for end-users to enable\nthis, but plugins can enable it by setting the flag, so the\nplugin that tests the diagnostic subsystem uses this to verify that\nthe ruler is correctly printed.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (layout::layout): Call show_ruler\n\tif show_ruler_p was set on the context.\n\t(layout::show_ruler): New method.\n\t* diagnostic.h (struct diagnostic_context): Add field\n\t\"show_ruler_p\".\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c\n\t(test_very_wide_line): Add ruler to expected output.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-color.c\n\t(test_very_wide_line): Likewise.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(test_show_locus): Within the handling of \"test_very_wide_line\",\n\tenable show_ruler_p on the diagnostic context.\n\nFrom-SVN: r236080", "tree": {"sha": "557298bb7e615c65911ed2e91a38c03f905fba25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/557298bb7e615c65911ed2e91a38c03f905fba25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "cab5f40aef0fa4c2efa733ff8121e2ea2cafd034", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "patch": "@@ -1,3 +1,11 @@\n+2016-05-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (layout::layout): Call show_ruler\n+\tif show_ruler_p was set on the context.\n+\t(layout::show_ruler): New method.\n+\t* diagnostic.h (struct diagnostic_context): Add field\n+\t\"show_ruler_p\".\n+\n 2016-05-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71039"}, {"sha": "eeccee517160112435192fd722e9fff83eece3f3", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "patch": "@@ -199,6 +199,8 @@ class layout\n   void print_annotation_line (int row, const line_bounds lbounds);\n   void print_any_fixits (int row, const rich_location *richloc);\n \n+  void show_ruler (int max_column) const;\n+\n  private:\n   void calculate_line_spans ();\n \n@@ -653,6 +655,9 @@ layout::layout (diagnostic_context * context,\n \tm_x_offset = column - right_margin;\n       gcc_assert (m_x_offset >= 0);\n     }\n+\n+  if (context->show_ruler_p)\n+    show_ruler (m_x_offset + max_width);\n }\n \n /* Return true iff we should print a heading when starting the\n@@ -1084,6 +1089,40 @@ layout::move_to_column (int *column, int dest_column)\n     }\n }\n \n+/* For debugging layout issues, render a ruler giving column numbers\n+   (after the 1-column indent).  */\n+\n+void\n+layout::show_ruler (int max_column) const\n+{\n+  /* Hundreds.  */\n+  if (max_column > 99)\n+    {\n+      pp_space (m_pp);\n+      for (int column = 1 + m_x_offset; column <= max_column; column++)\n+\tif (0 == column % 10)\n+\t  pp_character (m_pp, '0' + (column / 100) % 10);\n+\telse\n+\t  pp_space (m_pp);\n+      pp_newline (m_pp);\n+    }\n+\n+  /* Tens.  */\n+  pp_space (m_pp);\n+  for (int column = 1 + m_x_offset; column <= max_column; column++)\n+    if (0 == column % 10)\n+      pp_character (m_pp, '0' + (column / 10) % 10);\n+    else\n+      pp_space (m_pp);\n+  pp_newline (m_pp);\n+\n+  /* Units.  */\n+  pp_space (m_pp);\n+  for (int column = 1 + m_x_offset; column <= max_column; column++)\n+    pp_character (m_pp, '0' + (column % 10));\n+  pp_newline (m_pp);\n+}\n+\n } /* End of anonymous namespace.  */\n \n /* Print the physical source code corresponding to the location of"}, {"sha": "48ae50d68796975a48ac71aef8c8fd16a3826411", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "patch": "@@ -201,6 +201,10 @@ struct diagnostic_context\n      source code (to avoid e.g. colorizing just the first character in\n      a token, which would look strange).  */\n   bool colorize_source_p;\n+\n+  /* Usable by plugins; if true, print a debugging ruler above the\n+     source output.  */\n+  bool show_ruler_p;\n };\n \n static inline void"}, {"sha": "c1a2135bfb5c2db52a36bd9cea31a9afffd15a1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "patch": "@@ -1,3 +1,13 @@\n+2016-05-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c\n+\t(test_very_wide_line): Add ruler to expected output.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-color.c\n+\t(test_very_wide_line): Likewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(test_show_locus): Within the handling of \"test_very_wide_line\",\n+\tenable show_ruler_p on the diagnostic context.\n+\n 2016-05-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71039"}, {"sha": "2748fa1f280d46a1e2cb8d35298b379540b475a9", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-bw.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c?ref=f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "patch": "@@ -117,6 +117,9 @@ void test_very_wide_line (void)\n #if 0\n                                                                                 float f = foo * bar; /* { dg-warning \"95: test\" } */\n /* { dg-begin-multiline-output \"\" }\n+     0         0         0         0         0         0         1     \n+     4         5         6         7         8         9         0     \n+ 6789012345678901234567890123456789012345678901234567890123456789012345\n                                               float f = foo * bar;\n                                                         ~~~~^~~~~\n    { dg-end-multiline-output \"\" } */"}, {"sha": "ff2f4d45c8547034f0e72667caf87db6eb77bccf", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-color.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c?ref=f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "patch": "@@ -117,6 +117,9 @@ void test_very_wide_line (void)\n #if 0\n                                                                                 float f = foo * bar; /* { dg-warning \"95: test\" } */\n /* { dg-begin-multiline-output \"\" }\n+     0         0         0         0         0         0         1     \n+     4         5         6         7         8         9         0     \n+ 6789012345678901234567890123456789012345678901234567890123456789012345\n                                               float f = \u001b[01;35m\u001b[Kfoo * bar\u001b[m\u001b[K;\n                                                         \u001b[01;35m\u001b[K~~~~^~~~~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */"}, {"sha": "a5f8f0cee9374f4630315e8a18d1b3d98519a13a", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=f3352cabb8c7f078862ee3c1bca06e96a6ebcfd4", "patch": "@@ -234,9 +234,11 @@ test_show_locus (function *fun)\n   if (0 == strcmp (fnname, \"test_very_wide_line\"))\n     {\n       const int line = fnstart_line + 2;\n+      global_dc->show_ruler_p = true;\n       warning_at (make_location (get_loc (line, 94), get_loc (line, 90),\n \t\t\t\t get_loc (line, 98)),\n \t\t  0, \"test\");\n+      global_dc->show_ruler_p = false;\n     }\n \n   /* Example of multiple carets.  */"}]}