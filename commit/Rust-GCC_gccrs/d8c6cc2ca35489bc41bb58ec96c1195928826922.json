{"sha": "d8c6cc2ca35489bc41bb58ec96c1195928826922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjNmNjMmNhMzU0ODliYzQxYmI1OGVjOTZjMTE5NTkyODgyNjkyMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-04-15T18:19:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-04-21T13:00:19Z"}, "message": "x86: Add -mmwait for -mgeneral-regs-only\n\nAdd -mmwait so that the MWAIT and MONITOR intrinsics can be used with\n-mgeneral-regs-only and make -msse3 to imply -mmwait.\n\ngcc/\n\n\t* config.gcc: Install mwaitintrin.h for i[34567]86-*-* and\n\tx86_64-*-* targets.\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_MWAIT_SET):\n\tNew.\n\t(OPTION_MASK_ISA2_MWAIT_UNSET): Likewise.\n\t(ix86_handle_option): Handle -mmwait.\n\t* config/i386/i386-builtins.c (ix86_init_mmx_sse_builtins):\n\tReplace OPTION_MASK_ISA_SSE3 with OPTION_MASK_ISA2_MWAIT on\n\t__builtin_ia32_monitor and __builtin_ia32_mwait.\n\t* config/i386/i386-options.c (isa2_opts): Add -mmwait.\n\t(ix86_valid_target_attribute_inner_p): Likewise.\n\t(ix86_option_override_internal): Enable mwait/monitor\n\tinstructions for -msse3.\n\t* config/i386/i386.h (TARGET_MWAIT): New.\n\t(TARGET_MWAIT_P): Likewise.\n\t* config/i386/i386.opt: Add -mmwait.\n\t* config/i386/mwaitintrin.h: New file.\n\t* config/i386/pmmintrin.h: Include <mwaitintrin.h>.\n\t* config/i386/sse.md (sse3_mwait): Replace TARGET_SSE3 with\n\tTARGET_MWAIT.\n\t(@sse3_monitor_<mode>): Likewise.\n\t* config/i386/x86gprintrin.h: Include <mwaitintrin.h>.\n\t* doc/extend.texi: Document mwait target attribute.\n\t* doc/invoke.texi: Document -mmwait.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/monitor-2.c: New test.", "tree": {"sha": "4bc1374ea2b01a8c821f6b761856dc0c75964c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bc1374ea2b01a8c821f6b761856dc0c75964c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8c6cc2ca35489bc41bb58ec96c1195928826922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c6cc2ca35489bc41bb58ec96c1195928826922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c6cc2ca35489bc41bb58ec96c1195928826922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c6cc2ca35489bc41bb58ec96c1195928826922/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88202c883c07da1c03dbb1ad440f1b70189c4399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88202c883c07da1c03dbb1ad440f1b70189c4399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88202c883c07da1c03dbb1ad440f1b70189c4399"}], "stats": {"total": 149, "additions": 130, "deletions": 19}, "files": [{"sha": "af3f38755fac241c1f7457a3956dc140b2143d51", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -150,6 +150,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_F16C_SET \\\n   (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA2_MWAITX_SET OPTION_MASK_ISA2_MWAITX\n+#define OPTION_MASK_ISA2_MWAIT_SET OPTION_MASK_ISA2_MWAIT\n #define OPTION_MASK_ISA2_CLZERO_SET OPTION_MASK_ISA2_CLZERO\n #define OPTION_MASK_ISA_PKU_SET OPTION_MASK_ISA_PKU\n #define OPTION_MASK_ISA2_RDPID_SET OPTION_MASK_ISA2_RDPID\n@@ -245,6 +246,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_XSAVES_UNSET OPTION_MASK_ISA_XSAVES\n #define OPTION_MASK_ISA_CLWB_UNSET OPTION_MASK_ISA_CLWB\n #define OPTION_MASK_ISA2_MWAITX_UNSET OPTION_MASK_ISA2_MWAITX\n+#define OPTION_MASK_ISA2_MWAIT_UNSET OPTION_MASK_ISA2_MWAIT\n #define OPTION_MASK_ISA2_CLZERO_UNSET OPTION_MASK_ISA2_CLZERO\n #define OPTION_MASK_ISA_PKU_UNSET OPTION_MASK_ISA_PKU\n #define OPTION_MASK_ISA2_RDPID_UNSET OPTION_MASK_ISA2_RDPID\n@@ -1546,6 +1548,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mmwait:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_MWAIT_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_MWAIT_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_MWAIT_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_MWAIT_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mclzero:\n       if (value)\n \t{"}, {"sha": "a020e0808c9482276efdb8c512bc2dc2fb280324", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -414,7 +414,8 @@ i[34567]86-*-*)\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n-\t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\"\n+\t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n+\t\t       mwaitintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -451,7 +452,8 @@ x86_64-*-*)\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n-\t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\"\n+\t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n+\t\t       mwaitintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "128bd39816cbdb7063b15cbfada88acb41cf1656", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -628,9 +628,9 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t    VOID_FTYPE_VOID, IX86_BUILTIN_MFENCE);\n \n   /* SSE3.  */\n-  def_builtin (OPTION_MASK_ISA_SSE3, 0, \"__builtin_ia32_monitor\",\n+  def_builtin (0, OPTION_MASK_ISA2_MWAIT, \"__builtin_ia32_monitor\",\n \t       VOID_FTYPE_PCVOID_UNSIGNED_UNSIGNED, IX86_BUILTIN_MONITOR);\n-  def_builtin (OPTION_MASK_ISA_SSE3, 0, \"__builtin_ia32_mwait\",\n+  def_builtin (0, OPTION_MASK_ISA2_MWAIT, \"__builtin_ia32_mwait\",\n \t       VOID_FTYPE_UNSIGNED_UNSIGNED, IX86_BUILTIN_MWAIT);\n \n   /* AES */"}, {"sha": "65bb0bbab95cf99865d70d927141b65bb96d03a1", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -207,6 +207,7 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mmovbe\",\t\tOPTION_MASK_ISA2_MOVBE },\n   { \"-mclzero\",\t\tOPTION_MASK_ISA2_CLZERO },\n   { \"-mmwaitx\",\t\tOPTION_MASK_ISA2_MWAITX },\n+  { \"-mmwait\",\t\tOPTION_MASK_ISA2_MWAIT },\n   { \"-mmovdir64b\",\tOPTION_MASK_ISA2_MOVDIR64B },\n   { \"-mwaitpkg\",\tOPTION_MASK_ISA2_WAITPKG },\n   { \"-mcldemote\",\tOPTION_MASK_ISA2_CLDEMOTE },\n@@ -1015,6 +1016,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"fsgsbase\",\tOPT_mfsgsbase),\n     IX86_ATTR_ISA (\"rdrnd\",\tOPT_mrdrnd),\n     IX86_ATTR_ISA (\"mwaitx\",\tOPT_mmwaitx),\n+    IX86_ATTR_ISA (\"mwait\",\tOPT_mmwait),\n     IX86_ATTR_ISA (\"clzero\",\tOPT_mclzero),\n     IX86_ATTR_ISA (\"pku\",\tOPT_mpku),\n     IX86_ATTR_ISA (\"lwp\",\tOPT_mlwp),\n@@ -2609,6 +2611,11 @@ ix86_option_override_internal (bool main_args_p,\n       || TARGET_PREFETCHWT1_P (opts->x_ix86_isa_flags))\n     ix86_prefetch_sse = true;\n \n+  /* Enable mwait/monitor instructions for -msse3.  */\n+  if (TARGET_SSE3_P (opts->x_ix86_isa_flags))\n+    opts->x_ix86_isa_flags2\n+      |= OPTION_MASK_ISA2_MWAIT & ~opts->x_ix86_isa_flags2_explicit;\n+\n   /* Enable popcnt instruction for -msse4.2 or -mabm.  */\n   if (TARGET_SSE4_2_P (opts->x_ix86_isa_flags)\n       || TARGET_ABM_P (opts->x_ix86_isa_flags))"}, {"sha": "aa3fa3e1ef80b2346a011f2e97ddff73420fb9de", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -181,6 +181,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_CLWB_P(x)\tTARGET_ISA_CLWB_P(x)\n #define TARGET_MWAITX\tTARGET_ISA2_MWAITX\n #define TARGET_MWAITX_P(x)\tTARGET_ISA2_MWAITX_P(x)\n+#define TARGET_MWAIT\tTARGET_ISA2_MWAIT\n+#define TARGET_MWAIT_P(x)\tTARGET_ISA2_MWAIT_P(x)\n #define TARGET_PKU\tTARGET_ISA_PKU\n #define TARGET_PKU_P(x)\tTARGET_ISA_PKU_P(x)\n #define TARGET_SHSTK\tTARGET_ISA_SHSTK"}, {"sha": "7b8547bb1c33a85b6f42a02a384674c48edc8acf", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -1162,3 +1162,7 @@ AVXVNNI built-in functions and code generation.\n mneeded\n Target Var(ix86_needed) Save\n Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property.\n+\n+mmwait\n+Target Mask(ISA2_MWAIT) Var(ix86_isa_flags2) Save\n+Support MWAIT and MONITOR built-in functions and code generation."}, {"sha": "1ecbc4abb699da0f2bba351b5b05a12e458dcb3c", "filename": "gcc/config/i386/mwaitintrin.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fmwaitintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fmwaitintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmwaitintrin.h?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -0,0 +1,52 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _MWAITINTRIN_H_INCLUDED\n+#define _MWAITINTRIN_H_INCLUDED\n+\n+#ifndef __MWAIT__\n+#pragma GCC push_options\n+#pragma GCC target(\"mwait\")\n+#define __DISABLE_MWAIT__\n+#endif /* __MWAIT__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_monitor (void const * __P, unsigned int __E, unsigned int __H)\n+{\n+  __builtin_ia32_monitor (__P, __E, __H);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mwait (unsigned int __E, unsigned int __H)\n+{\n+  __builtin_ia32_mwait (__E, __H);\n+}\n+\n+#ifdef __DISABLE_MWAIT__\n+#undef __DISABLE_MWAIT__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_MWAIT__ */\n+\n+#endif /* _MWAITINTRIN_H_INCLUDED */"}, {"sha": "f8102d2be23d8f4fb9930fb8137332fcd677468f", "filename": "gcc/config/i386/pmmintrin.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpmmintrin.h?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -29,6 +29,7 @@\n \n /* We need definitions from the SSE2 and SSE header files*/\n #include <emmintrin.h>\n+#include <mwaitintrin.h>\n \n #ifndef __SSE3__\n #pragma GCC push_options\n@@ -112,18 +113,6 @@ _mm_lddqu_si128 (__m128i const *__P)\n   return (__m128i) __builtin_ia32_lddqu ((char const *)__P);\n }\n \n-extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_monitor (void const * __P, unsigned int __E, unsigned int __H)\n-{\n-  __builtin_ia32_monitor (__P, __E, __H);\n-}\n-\n-extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mwait (unsigned int __E, unsigned int __H)\n-{\n-  __builtin_ia32_mwait (__E, __H);\n-}\n-\n #ifdef __DISABLE_SSE3__\n #undef __DISABLE_SSE3__\n #pragma GCC pop_options"}, {"sha": "319099d7b7f636381b14439120eb57a498e1aba0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -16593,7 +16593,7 @@\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"c\")\n \t\t     (match_operand:SI 1 \"register_operand\" \"a\")]\n \t\t    UNSPECV_MWAIT)]\n-  \"TARGET_SSE3\"\n+  \"TARGET_MWAIT\"\n ;; 64bit version is \"mwait %rax,%rcx\". But only lower 32bits are used.\n ;; Since 32bit register operands are implicitly zero extended to 64bit,\n ;; we only need to set up 32bit registers.\n@@ -16605,7 +16605,7 @@\n \t\t     (match_operand:SI 1 \"register_operand\" \"c\")\n \t\t     (match_operand:SI 2 \"register_operand\" \"d\")]\n \t\t    UNSPECV_MONITOR)]\n-  \"TARGET_SSE3\"\n+  \"TARGET_MWAIT\"\n ;; 64bit version is \"monitor %rax,%rcx,%rdx\". But only lower 32bits in\n ;; RCX and RDX are used.  Since 32bit register operands are implicitly\n ;; zero extended to 64bit, we only need to set up 32bit registers."}, {"sha": "7793032ba90cabfacbb90e5de94a106be91e469b", "filename": "gcc/config/i386/x86gprintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -56,6 +56,8 @@\n \n #include <movdirintrin.h>\n \n+#include <mwaitintrin.h>\n+\n #include <mwaitxintrin.h>\n \n #include <pconfigintrin.h>"}, {"sha": "c8caf36f29305de4eaff3e05d94638d3e9c2968a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -6665,6 +6665,11 @@ Enable/disable the generation of the MOVDIR64B instructions.\n @cindex @code{target(\"movdiri\")} function attribute, x86\n Enable/disable the generation of the MOVDIRI instructions.\n \n+@item mwait\n+@itemx no-mwait\n+@cindex @code{target(\"mwait\")} function attribute, x86\n+Enable/disable the generation of the MWAIT and MONITOR instructions.\n+\n @item mwaitx\n @itemx no-mwaitx\n @cindex @code{target(\"mwaitx\")} function attribute, x86"}, {"sha": "e98b0962b9fe4b6c1d52ef7a8a73fae17e22fa81", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -1370,7 +1370,7 @@ See RS/6000 and PowerPC Options.\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} @gol\n -mincoming-stack-boundary=@var{num} @gol\n--mcld  -mcx16  -msahf  -mmovbe  -mcrc32 @gol\n+-mcld  -mcx16  -msahf  -mmovbe  -mcrc32 -mmwait @gol\n -mrecip  -mrecip=@var{opt} @gol\n -mvzeroupper  -mprefer-avx128  -mprefer-vector-width=@var{opt} @gol\n -mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1  -msse4.2  -msse4  -mavx @gol\n@@ -31143,6 +31143,12 @@ This option enables built-in functions @code{__builtin_ia32_crc32qi},\n @code{__builtin_ia32_crc32hi}, @code{__builtin_ia32_crc32si} and\n @code{__builtin_ia32_crc32di} to generate the @code{crc32} machine instruction.\n \n+@item -mmwait\n+@opindex mmwait\n+This option enables built-in functions @code{__builtin_ia32_monitor},\n+and @code{__builtin_ia32_mwait} to generate the @code{monitor} and\n+@code{mwait} machine instructions.\n+\n @item -mrecip\n @opindex mrecip\n This option enables use of @code{RCPSS} and @code{RSQRTSS} instructions"}, {"sha": "96eeec070f0b8483e312fe14c88bedc832099372", "filename": "gcc/testsuite/gcc.target/i386/monitor-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmonitor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c6cc2ca35489bc41bb58ec96c1195928826922/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmonitor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmonitor-2.c?ref=d8c6cc2ca35489bc41bb58ec96c1195928826922", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmwait -mgeneral-regs-only\" } */\n+\n+/* Verify that they work in both 32bit and 64bit.  */\n+\n+#include <x86gprintrin.h>\n+\n+void\n+foo (char *p, int x, int y, int z)\n+{\n+   _mm_monitor (p, y, x);\n+   _mm_mwait (z, y);\n+}\n+\n+void\n+bar (char *p, long x, long y, long z)\n+{\n+   _mm_monitor (p, y, x);\n+   _mm_mwait (z, y);\n+}\n+\n+void\n+foo1 (char *p)\n+{\n+   _mm_monitor (p, 0, 0);\n+   _mm_mwait (0, 0);\n+}"}]}