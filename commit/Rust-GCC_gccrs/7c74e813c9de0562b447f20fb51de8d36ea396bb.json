{"sha": "7c74e813c9de0562b447f20fb51de8d36ea396bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M3NGU4MTNjOWRlMDU2MmI0NDdmMjBmYjUxZGU4ZDM2ZWEzOTZiYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-21T08:07:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-21T08:07:51Z"}, "message": "lang.opt (fdec-include): New option.\n\n\t* lang.opt (fdec-include): New option.\n\t* options.c (set_dec_flags): Set also flag_dec_include.\n\t* scanner.c (include_line): Change return type from bool to int.\n\tIn fixed form allow spaces in between include keyword letters.\n\tFor -fdec-include, allow in fixed form 0 in column 6.  With\n\t-fdec-include return -1 if the parsed line is not full include\n\tstatement and it could be successfully completed on continuation\n\tlines.\n\t(include_stmt): New function.\n\t(load_file): Adjust include_line caller.  If it returns -1, keep\n\ttrying include_stmt until it stops returning -1 whenever adding\n\tfurther line of input.\n\n\t* gfortran.dg/include_10.f: New test.\n\t* gfortran.dg/include_10.inc: New file.\n\t* gfortran.dg/include_11.f: New test.\n\t* gfortran.dg/include_12.f: New test.\n\t* gfortran.dg/include_13.f90: New test.\n\t* gfortran.dg/gomp/include_1.f: New test.\n\t* gfortran.dg/gomp/include_1.inc: New file.\n\t* gfortran.dg/gomp/include_2.f90: New test.\n\nCo-Authored-By: Mark Eggleston <mark.eggleston@codethink.com>\n\nFrom-SVN: r266337", "tree": {"sha": "87bd54b85e5e380e98822908a61c166c499c6438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87bd54b85e5e380e98822908a61c166c499c6438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c74e813c9de0562b447f20fb51de8d36ea396bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c74e813c9de0562b447f20fb51de8d36ea396bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c74e813c9de0562b447f20fb51de8d36ea396bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c74e813c9de0562b447f20fb51de8d36ea396bb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8923037ef1b229326b7f238580d91bbbb76b8ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8923037ef1b229326b7f238580d91bbbb76b8ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8923037ef1b229326b7f238580d91bbbb76b8ff"}], "stats": {"total": 542, "additions": 523, "deletions": 19}, "files": [{"sha": "455c74c60a31fec05c9c57055bbf526bc439a2c9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -1,3 +1,19 @@\n+2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\t    Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\t* lang.opt (fdec-include): New option.\n+\t* options.c (set_dec_flags): Set also flag_dec_include.\n+\t* scanner.c (include_line): Change return type from bool to int.\n+\tIn fixed form allow spaces in between include keyword letters.\n+\tFor -fdec-include, allow in fixed form 0 in column 6.  With\n+\t-fdec-include return -1 if the parsed line is not full include\n+\tstatement and it could be successfully completed on continuation\n+\tlines.\n+\t(include_stmt): New function.\n+\t(load_file): Adjust include_line caller.  If it returns -1, keep\n+\ttrying include_stmt until it stops returning -1 whenever adding\n+\tfurther line of input.\n+\n 2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/88073"}, {"sha": "fe0c69342205a865ce39ba0909777e29d5d7ce39", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -440,6 +440,10 @@ fdec\n Fortran Var(flag_dec)\n Enable all DEC language extensions.\n \n+fdec-include\n+Fortran Var(flag_dec_include)\n+Enable legacy parsing of INCLUDE as statement.\n+\n fdec-intrinsic-ints\n Fortran Var(flag_dec_intrinsic_ints)\n Enable kind-specific variants of integer intrinsic functions."}, {"sha": "e59ba31ba7bcbb07f543ab8e5636f8a5c4986e2f", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -68,6 +68,7 @@ set_dec_flags (int value)\n   flag_dec_intrinsic_ints |= value;\n   flag_dec_static |= value;\n   flag_dec_math |= value;\n+  flag_dec_include |= value;\n }\n \n "}, {"sha": "5b27ab5e52d9b97bbf0f1994035a676d1c6a255f", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 267, "deletions": 19, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -2135,14 +2135,18 @@ static bool load_file (const char *, const char *, bool);\n /* include_line()-- Checks a line buffer to see if it is an include\n    line.  If so, we call load_file() recursively to load the included\n    file.  We never return a syntax error because a statement like\n-   \"include = 5\" is perfectly legal.  We return false if no include was\n-   processed or true if we matched an include.  */\n+   \"include = 5\" is perfectly legal.  We return 0 if no include was\n+   processed, 1 if we matched an include or -1 if include was\n+   partially processed, but will need continuation lines.  */\n \n-static bool\n+static int\n include_line (gfc_char_t *line)\n {\n   gfc_char_t quote, *c, *begin, *stop;\n   char *filename;\n+  const char *include = \"include\";\n+  bool allow_continuation = flag_dec_include;\n+  int i;\n \n   c = line;\n \n@@ -2158,42 +2162,133 @@ include_line (gfc_char_t *line)\n       else\n \t{\n \t  if ((*c == '!' || *c == 'c' || *c == 'C' || *c == '*')\n-\t      && c[1] == '$' && (c[2] == ' ' || c[2] == '\\t'))\n+\t      && c[1] == '$' && c[2] == ' ')\n \t    c += 3;\n \t}\n     }\n \n-  while (*c == ' ' || *c == '\\t')\n-    c++;\n+  if (gfc_current_form == FORM_FREE)\n+    {\n+      while (*c == ' ' || *c == '\\t')\n+\tc++;\n+      if (gfc_wide_strncasecmp (c, \"include\", 7))\n+\t{\n+\t  if (!allow_continuation)\n+\t    return 0;\n+\t  for (i = 0; i < 7; ++i)\n+\t    {\n+\t      gfc_char_t c1 = gfc_wide_tolower (*c);\n+\t      if (c1 != (unsigned char) include[i])\n+\t\tbreak;\n+\t      c++;\n+\t    }\n+\t  if (i == 0 || *c != '&')\n+\t    return 0;\n+\t  c++;\n+\t  while (*c == ' ' || *c == '\\t')\n+\t    c++;\n+\t  if (*c == '\\0' || *c == '!')\n+\t    return -1;\n+\t  return 0;\n+\t}\n \n-  if (gfc_wide_strncasecmp (c, \"include\", 7))\n-    return false;\n+      c += 7;\n+    }\n+  else\n+    {\n+      while (*c == ' ' || *c == '\\t')\n+\tc++;\n+      if (flag_dec_include && *c == '0' && c - line == 5)\n+\t{\n+\t  c++;\n+\t  while (*c == ' ' || *c == '\\t')\n+\t    c++;\n+\t}\n+      if (c - line < 6)\n+\tallow_continuation = false;\n+      for (i = 0; i < 7; ++i)\n+\t{\n+\t  gfc_char_t c1 = gfc_wide_tolower (*c);\n+\t  if (c1 != (unsigned char) include[i])\n+\t    break;\n+\t  c++;\n+\t  while (*c == ' ' || *c == '\\t')\n+\t    c++;\n+\t}\n+      if (!allow_continuation)\n+\t{\n+\t  if (i != 7)\n+\t    return 0;\n+\t}\n+      else if (i != 7)\n+\t{\n+\t  if (i == 0)\n+\t    return 0;\n+\n+\t  /* At the end of line or comment this might be continued.  */\n+\t  if (*c == '\\0' || *c == '!')\n+\t    return -1;\n+\n+\t  return 0;\n+\t}\n+    }\n \n-  c += 7;\n   while (*c == ' ' || *c == '\\t')\n     c++;\n \n   /* Find filename between quotes.  */\n-  \n+\n   quote = *c++;\n   if (quote != '\"' && quote != '\\'')\n-    return false;\n+    {\n+      if (allow_continuation)\n+\t{\n+\t  if (gfc_current_form == FORM_FREE)\n+\t    {\n+\t      if (quote == '&')\n+\t\t{\n+\t\t  while (*c == ' ' || *c == '\\t')\n+\t\t    c++;\n+\t\t  if (*c == '\\0' || *c == '!')\n+\t\t    return -1;\n+\t\t}\n+\t    }\n+\t  else if (quote == '\\0' || quote == '!')\n+\t    return -1;\n+\t}\n+      return 0;\n+    }\n \n   begin = c;\n \n+  bool cont = false;\n   while (*c != quote && *c != '\\0')\n-    c++;\n+    {\n+      if (allow_continuation && gfc_current_form == FORM_FREE)\n+\t{\n+\t  if (*c == '&')\n+\t    cont = true;\n+\t  else if (*c != ' ' && *c != '\\t')\n+\t    cont = false;\n+\t}\n+      c++;\n+    }\n \n   if (*c == '\\0')\n-    return false;\n+    {\n+      if (allow_continuation\n+\t  && (cont || gfc_current_form != FORM_FREE))\n+\treturn -1;\n+      return 0;\n+    }\n \n   stop = c++;\n-  \n+\n   while (*c == ' ' || *c == '\\t')\n     c++;\n \n   if (*c != '\\0' && *c != '!')\n-    return false;\n+    return 0;\n \n   /* We have an include line at this point.  */\n \n@@ -2205,17 +2300,138 @@ include_line (gfc_char_t *line)\n     exit (FATAL_EXIT_CODE);\n \n   free (filename);\n-  return true;\n+  return 1;\n }\n \n+/* Similarly, but try to parse an INCLUDE statement, using gfc_next_char etc.\n+   APIs.  Return 1 if recognized as valid INCLUDE statement and load_file has\n+   been called, 0 if it is not a valid INCLUDE statement and -1 if eof has\n+   been encountered while parsing it.  */\n+static int\n+include_stmt (gfc_linebuf *b)\n+{\n+  int ret = 0, i, length;\n+  const char *include = \"include\";\n+  gfc_char_t c, quote = 0;\n+  locus str_locus;\n+  char *filename;\n+\n+  continue_flag = 0;\n+  end_flag = 0;\n+  gcc_attribute_flag = 0;\n+  openmp_flag = 0;\n+  openacc_flag = 0;\n+  continue_count = 0;\n+  continue_line = 0;\n+  gfc_current_locus.lb = b;\n+  gfc_current_locus.nextc = b->line;\n+\n+  gfc_skip_comments ();\n+  gfc_gobble_whitespace ();\n+\n+  for (i = 0; i < 7; i++)\n+    {\n+      c = gfc_next_char ();\n+      if (c != (unsigned char) include[i])\n+\t{\n+\t  if (gfc_current_form == FORM_FIXED\n+\t      && i == 0\n+\t      && c == '0'\n+\t      && gfc_current_locus.nextc == b->line + 6)\n+\t    {\n+\t      gfc_gobble_whitespace ();\n+\t      i--;\n+\t      continue;\n+\t    }\n+\t  gcc_assert (i != 0);\n+\t  if (c == '\\n')\n+\t    {\n+\t      gfc_advance_line ();\n+\t      gfc_skip_comments ();\n+\t      if (gfc_at_eof ())\n+\t\tret = -1;\n+\t    }\n+\t  goto do_ret;\n+\t}\n+    }\n+  gfc_gobble_whitespace ();\n+\n+  c = gfc_next_char ();\n+  if (c == '\\'' || c == '\"')\n+    quote = c;\n+  else\n+    {\n+      if (c == '\\n')\n+\t{\n+\t  gfc_advance_line ();\n+\t  gfc_skip_comments ();\n+\t  if (gfc_at_eof ())\n+\t    ret = -1;\n+\t}\n+      goto do_ret;\n+    }\n+\n+  str_locus = gfc_current_locus;\n+  length = 0;\n+  do\n+    {\n+      c = gfc_next_char_literal (INSTRING_NOWARN);\n+      if (c == quote)\n+\tbreak;\n+      if (c == '\\n')\n+\t{\n+\t  gfc_advance_line ();\n+\t  gfc_skip_comments ();\n+\t  if (gfc_at_eof ())\n+\t    ret = -1;\n+\t  goto do_ret;\n+\t}\n+      length++;\n+    }\n+  while (1);\n+\n+  gfc_gobble_whitespace ();\n+  c = gfc_next_char ();\n+  if (c != '\\n')\n+    goto do_ret;\n+\n+  gfc_current_locus = str_locus;\n+  ret = 1;\n+  filename = XNEWVEC (char, length + 1);\n+  for (i = 0; i < length; i++)\n+    {\n+      c = gfc_next_char_literal (INSTRING_WARN);\n+      gcc_assert (gfc_wide_fits_in_byte (c));\n+      filename[i] = (unsigned char) c;\n+    }\n+  filename[length] = '\\0';\n+  if (!load_file (filename, NULL, false))\n+    exit (FATAL_EXIT_CODE);\n+\n+  free (filename);\n+\n+do_ret:\n+  continue_flag = 0;\n+  end_flag = 0;\n+  gcc_attribute_flag = 0;\n+  openmp_flag = 0;\n+  openacc_flag = 0;\n+  continue_count = 0;\n+  continue_line = 0;\n+  memset (&gfc_current_locus, '\\0', sizeof (locus));\n+  memset (&openmp_locus, '\\0', sizeof (locus));\n+  memset (&openacc_locus, '\\0', sizeof (locus));\n+  memset (&gcc_attribute_locus, '\\0', sizeof (locus));\n+  return ret;\n+}\n \n /* Load a file into memory by calling load_line until the file ends.  */\n \n static bool\n load_file (const char *realfilename, const char *displayedname, bool initial)\n {\n   gfc_char_t *line;\n-  gfc_linebuf *b;\n+  gfc_linebuf *b, *include_b = NULL;\n   gfc_file *f;\n   FILE *input;\n   int len, line_len;\n@@ -2318,6 +2534,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n   for (;;)\n     {\n       int trunc = load_line (input, &line, &line_len, NULL);\n+      int inc_line;\n \n       len = gfc_wide_strlen (line);\n       if (feof (input) && len == 0)\n@@ -2366,11 +2583,12 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n \t}\n \n       /* Preprocessed files have preprocessor lines added before the byte\n-         order mark, so first_line is not about the first line of the file\n+\t order mark, so first_line is not about the first line of the file\n \t but the first line that's not a preprocessor line.  */\n       first_line = false;\n \n-      if (include_line (line))\n+      inc_line = include_line (line);\n+      if (inc_line > 0)\n \t{\n \t  current_file->line++;\n \t  continue;\n@@ -2403,6 +2621,36 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n \n       while (file_changes_cur < file_changes_count)\n \tfile_changes[file_changes_cur++].lb = b;\n+\n+      if (flag_dec_include)\n+\t{\n+\t  if (include_b && b != include_b)\n+\t    {\n+\t      int inc_line2 = include_stmt (include_b);\n+\t      if (inc_line2 == 0)\n+\t\tinclude_b = NULL;\n+\t      else if (inc_line2 > 0)\n+\t\t{\n+\t\t  do\n+\t\t    {\n+\t\t      if (gfc_current_form == FORM_FIXED)\n+\t\t\t{\n+\t\t\t  for (gfc_char_t *p = include_b->line; *p; p++)\n+\t\t\t    *p = ' ';\n+\t\t\t}\n+\t\t      else\n+\t\t\tinclude_b->line[0] = '\\0';\n+                      if (include_b == b)\n+\t\t\tbreak;\n+\t\t      include_b = include_b->next;\n+\t\t    }\n+\t\t  while (1);\n+\t\t  include_b = NULL;\n+\t\t}\n+\t    }\n+\t  if (inc_line == -1 && !include_b)\n+\t    include_b = b;\n+\t}\n     }\n \n   /* Release the line buffer allocated in load_line.  */"}, {"sha": "50c7f15b9c91e6b7de636561303f0f5269cf04d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -1,3 +1,15 @@\n+2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\t    Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\t* gfortran.dg/include_10.f: New test.\n+\t* gfortran.dg/include_10.inc: New file.\n+\t* gfortran.dg/include_11.f: New test.\n+\t* gfortran.dg/include_12.f: New test.\n+\t* gfortran.dg/include_13.f90: New test.\n+\t* gfortran.dg/gomp/include_1.f: New test.\n+\t* gfortran.dg/gomp/include_1.inc: New file.\n+\t* gfortran.dg/gomp/include_2.f90: New test.\n+\n 2018-11-21  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/vector/align-1.c: New test."}, {"sha": "715eb5b97e3779b0ee699bc1f69b2f9b91f1fb56", "filename": "gcc/testsuite/gfortran.dg/gomp/include_1.f", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_1.f?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1,49 @@\n+c { dg-do compile }\n+c { dg-options \"-fopenmp -fdec\" }\n+      subroutine foo\n+      implicit none\n+c$   0include 'include_1.inc'\n+      i = 1\n+      end subroutine foo\n+      subroutine bar\n+      implicit none\n+      i\n+C$   ;n\n+     +c\n+                 \n+c   some comment\n+\n+*$   ll\n+C comment line\n+     uu\n+     DD\n+     ee'include_1.inc'\n+      i = 1\n+      end subroutine bar\n+      subroutine baz\n+      implicit none\n+     0include\n+     + 'include_1.inc'\n+      i = 1\n+      end subroutine baz\n+      subroutine qux\n+      implicit none\n+!$     i   n   C   lude                                             'inc\n+* another comment line\n+     &lude_1.inc'\n+      i = 1\n+      end subroutine qux\n+       subroutine quux\n+       implicit none\n+C$   0inc\n+*$   1lud\n+c$   2e                                                                '\n+!$   3include_1.inc'\n+      i = 1\n+      end subroutine quux\n+      program include_12\n+      implicit none\n+      include\n+! comment\n+c$   +'include_1.inc'\n+      end program"}, {"sha": "5dd841c5573804d8462044980e5221a1b4a16d47", "filename": "gcc/testsuite/gfortran.dg/gomp/include_1.inc", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_1.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_1.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_1.inc?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1 @@\n+      integer i"}, {"sha": "9c4ff15afb87033ba4b8ca79bcc08750d6a16029", "filename": "gcc/testsuite/gfortran.dg/gomp/include_2.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Finclude_2.f90?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdec-include\" }\n+subroutine foo\n+  implicit none\n+!$  incl& ! comment1\n+!$ &u&\n+!$       &de           &     ! comment2\n+!$ 'include&\n+  &_1.inc'\n+  i = 1\n+end subroutine foo\n+subroutine bar\n+  implicit none\n+!$ include &\n+\n+! comment3\n+\n+!$ \"include_1.inc\"\n+  i = 1\n+end subroutine bar\n+subroutine baz\n+  implicit none\n+!$                                  include&\n+!$ &'include_1.&\n+!$ &inc'\n+  i = 1\n+end subroutine baz\n+subroutine qux\n+  implicit none\n+!$  include '&\n+include_1.inc'\n+end subroutine qux"}, {"sha": "7df2a196954a2e0feefa01370151db469eaedf02", "filename": "gcc/testsuite/gfortran.dg/include_10.f", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_10.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_10.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_10.f?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1,11 @@\n+c { dg-do compile }\n+      subroutine foo\n+      implicit none\n+      include 'include_10.inc'\n+      i = 1\n+      end subroutine foo\n+      subroutine bar\n+      implicit none\n+      i n cl UD e'include_10.inc'\n+      i = 1\n+      end subroutine bar"}, {"sha": "5dd841c5573804d8462044980e5221a1b4a16d47", "filename": "gcc/testsuite/gfortran.dg/include_10.inc", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_10.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_10.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_10.inc?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1 @@\n+      integer i"}, {"sha": "0e68a78c236228dc607ba2e9e1c15f19a9f7068b", "filename": "gcc/testsuite/gfortran.dg/include_11.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_11.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_11.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_11.f?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1,20 @@\n+c { dg-do compile }\n+      subroutine foo\n+      implicit none\n+c We used to accept following in fixed mode.  Shall we at least\n+c warn about it?\n+include 'include_10.inc'\n+      i = 1\n+      end subroutine foo\n+      subroutine bar\n+c Likewise here.\n+      implicit none\n+  include'include_10.inc'\n+      i = 1\n+      end subroutine bar\n+      subroutine baz\n+c And here.\n+      implicit none\n+     include 'include_10.inc'\n+      i = 1\n+      end subroutine baz"}, {"sha": "4b3e3bed0759179a49f3d09833e89dea40df1475", "filename": "gcc/testsuite/gfortran.dg/include_12.f", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_12.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_12.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_12.f?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1,65 @@\n+c { dg-do compile }\n+c { dg-options \"-fdec-include\" }\n+      subroutine foo\n+      implicit none\n+     0include 'include_10.inc'\n+      i = 1\n+      end subroutine foo\n+      subroutine bar\n+      implicit none\n+      i\n+     ;n\n+     +c\n+                 \n+c   some comment\n+\n+     ll\n+C comment line\n+     uu\n+     DD\n+     ee'include_10.inc'\n+      i = 1\n+      end subroutine bar\n+      subroutine baz\n+      implicit none\n+     0include\n+     + 'include_10.inc'\n+      i = 1\n+      end subroutine baz\n+      subroutine qux\n+      implicit none\n+       i   n   C   lude                                             'inc\n+* another comment line\n+     &lude_10.inc'\n+      i = 1\n+      end subroutine qux\n+       subroutine quux\n+       implicit none\n+     0inc\n+     1lud\n+     2e                                                                '\n+     3include_10.inc'\n+      i = 1\n+      end subroutine quux\n+      program include_12\n+      implicit none\n+      include\n+! comment\n+     +'include_10.inc'\n+      end program\n+      subroutine quuz\n+      implicit none\n+      integer include\n+      include\n+     +\"include_10.inc\"\n+      i = 1\n+      include\n+     + = 2\n+      write (*,*) include\n+      end subroutine quuz\n+      subroutine corge\n+      implicit none\n+      include\n+     +'include_10.inc'\n+      i = 1\n+      end subroutine corge"}, {"sha": "418ee5585e259ef4b65c46e53d64ed4f85f42311", "filename": "gcc/testsuite/gfortran.dg/include_13.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c74e813c9de0562b447f20fb51de8d36ea396bb/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_13.f90?ref=7c74e813c9de0562b447f20fb51de8d36ea396bb", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec\" }\n+subroutine foo\n+  implicit none\n+  incl& ! comment1\n+&u&\n+       &de           &     ! comment2\n+'include&\n+  &_10.inc'\n+  i = 1\n+end subroutine foo\n+subroutine bar\n+  implicit none\n+include &\n+\n+! comment3\n+\n+\"include_10.inc\"\n+  i = 1\n+end subroutine bar\n+subroutine baz\n+  implicit none\n+                                  include&\n+&'include_10.&\n+&inc'\n+  i = 1\n+end subroutine baz\n+subroutine qux\n+  implicit none\n+  include '&\n+include_10.inc'\n+end subroutine qux\n+subroutine quux\n+  implicit none\n+  include &\n+  &'include_10.inc'\n+  i = 1\n+end subroutine quux\n+subroutine quuz\n+  implicit none\n+  include &\n+  &\"include_10.inc\"\n+  i = 1\n+end subroutine quuz"}]}