{"sha": "b83f01d0057578ebc1785f858fbfd46cdc210560", "node_id": "C_kwDOANBUbNoAKGI4M2YwMWQwMDU3NTc4ZWJjMTc4NWY4NThmYmZkNDZjZGMyMTA1NjA", "commit": {"author": {"name": "Jakob Hasse", "email": "0xjakob@users.noreply.github.com", "date": "2022-04-26T04:03:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-05T14:03:08Z"}, "message": "libstdc++: fix pointer type exception catch (no RTTI) [PR105387]\n\n__pbase_type_info::__do_catch(), used to catch pointer type exceptions,\ndid not check if the type info object to compare against is a pointer\ntype info object before doing a static down-cast to a pointer type info\nobject. If RTTI is disabled, this leads to the following situation:\nSince a pointer type info object has additional fields, they would\nend up being undefined if the actual type info object was not a pointer\ntype info object.\n\nA simple check has been added before the down-cast happens.\n\nNote that a consequence of this check is that exceptions of type\npointer-to-member cannot be caught anymore.\n\nIn case RTTI is enabled, this does not seem to be a problem because\nRTTI-based checks would run before and prevent running into the bad\ndown-cast. Hence, the fix is disabled if RTTI is enabled and exceptions\nof type pointer-to-member can still be caught.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/105387\n\t* libsupc++/pbase_type_info.cc (__do_catch) [!__cpp_rtti]: Add\n\tcheck that the thrown type is actually a pointer.\n\t* testsuite/18_support/105387.cc: New test.\n\t* testsuite/18_support/105387_memptr.cc: New test.\n\nSigned-off-by: Jakob Hasse <jakob.hasse@espressif.com>", "tree": {"sha": "8c24796d5e642fb83dd49271cb7b29f76329b5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c24796d5e642fb83dd49271cb7b29f76329b5f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b83f01d0057578ebc1785f858fbfd46cdc210560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83f01d0057578ebc1785f858fbfd46cdc210560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83f01d0057578ebc1785f858fbfd46cdc210560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83f01d0057578ebc1785f858fbfd46cdc210560/comments", "author": {"login": "0xjakob", "id": 18257824, "node_id": "MDQ6VXNlcjE4MjU3ODI0", "avatar_url": "https://avatars.githubusercontent.com/u/18257824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0xjakob", "html_url": "https://github.com/0xjakob", "followers_url": "https://api.github.com/users/0xjakob/followers", "following_url": "https://api.github.com/users/0xjakob/following{/other_user}", "gists_url": "https://api.github.com/users/0xjakob/gists{/gist_id}", "starred_url": "https://api.github.com/users/0xjakob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0xjakob/subscriptions", "organizations_url": "https://api.github.com/users/0xjakob/orgs", "repos_url": "https://api.github.com/users/0xjakob/repos", "events_url": "https://api.github.com/users/0xjakob/events{/privacy}", "received_events_url": "https://api.github.com/users/0xjakob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6008e75df80607f8104e665e0448a0a9cbf85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6008e75df80607f8104e665e0448a0a9cbf85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6008e75df80607f8104e665e0448a0a9cbf85a"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "934e049a4e07b06b5182f6654ac8ef597b576391", "filename": "libstdc++-v3/libsupc++/pbase_type_info.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83f01d0057578ebc1785f858fbfd46cdc210560/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83f01d0057578ebc1785f858fbfd46cdc210560/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc?ref=b83f01d0057578ebc1785f858fbfd46cdc210560", "patch": "@@ -74,7 +74,12 @@ __do_catch (const type_info *thr_type,\n     // Therefore there must at least be a qualification conversion involved\n     // But for that to be valid, our outer pointers must be const qualified.\n     return false;\n-  \n+\n+#if !__cpp_rtti\n+  if (!thr_type->__is_pointer_p ())\n+    return false;\n+#endif\n+\n   const __pbase_type_info *thrown_type =\n     static_cast <const __pbase_type_info *> (thr_type);\n "}, {"sha": "c4a234523f2c28254d8f0100fffbf4f7b145acda", "filename": "libstdc++-v3/testsuite/18_support/105387.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83f01d0057578ebc1785f858fbfd46cdc210560/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F105387.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83f01d0057578ebc1785f858fbfd46cdc210560/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F105387.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F105387.cc?ref=b83f01d0057578ebc1785f858fbfd46cdc210560", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run }\n+\n+#include <stdexcept>\n+#include <cxxabi.h>\n+#include <testsuite_hooks.h>\n+\n+// Test cases for PR libstdc++/105387\n+\n+// This test is to trigger undefined behavior if the bug 105387 is present\n+// in the code. Note, however, given that the bug is present, this test runs\n+// into undefined behavior which can also mean that it passes.\n+// It has been observed to fail quite reliably on x86_64-linux-gnu but only\n+// fail sporadically on Xtensa, depending on the code placement.\n+void portable_test()\n+{\n+  bool exception_thrown = false;\n+  try {\n+    throw std::runtime_error(\"test\");\n+  } catch (const char *e) {\n+    VERIFY(false);\n+  } catch (const std::exception &e) {\n+    exception_thrown = true;\n+  }\n+  VERIFY(exception_thrown);\n+}\n+\n+// This test relies on the types defined in the files typeinfo and cxxabi.h\n+// It is therefore less portable then the test case above but should be\n+// guaranteed to fail if the implementation has the bug 105387.\n+//\n+// This test case checks that __pbase_type_info::__do_catch() behaves\n+// correctly when called with a non-pointer type info object as argument.\n+// In particular, __pbase_type_info::__do_catch() should not cast\n+// the given type object into a pointer type and try to access the\n+// extended fields.\n+\n+void non_portable_test()\n+{\n+  // Create a zero-initialized buffer for allocation of the type object\n+  unsigned char buffer [sizeof(__cxxabiv1::__fundamental_type_info) * 2] = {};\n+\n+  // Use placement-new to create the fundamental type info object in the\n+  // first half of the buffer. Whenever that type info object will be\n+  // casted to a pointer type info object, the extended fields of the\n+  // pointer type info object will be in the second half of the buffer\n+  // and hence be guaranteed zero.\n+  __cxxabiv1::__fundamental_type_info *p_fund_info\n+    = new(buffer) __cxxabiv1::__fundamental_type_info(\"fund_type\");\n+\n+  __cxxabiv1::__pointer_type_info ptr_info(\"ptr_type\", 0, p_fund_info);\n+\n+  // __do_catch is declared protected in __pointer_type_info, but public in\n+  // type_info, so we upcast it here\n+  std::type_info *abstract_ptr_info = static_cast<std::type_info*>(&ptr_info);\n+  VERIFY(abstract_ptr_info->__do_catch(p_fund_info, 0, 1) == false);\n+}\n+\n+int main()\n+{\n+  portable_test();\n+  non_portable_test();\n+  return 0;\n+}"}, {"sha": "f5612f42929538c9755aecff911fc14b97712596", "filename": "libstdc++-v3/testsuite/18_support/105387_memptr.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83f01d0057578ebc1785f858fbfd46cdc210560/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F105387_memptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83f01d0057578ebc1785f858fbfd46cdc210560/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F105387_memptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F105387_memptr.cc?ref=b83f01d0057578ebc1785f858fbfd46cdc210560", "patch": "@@ -0,0 +1,25 @@\n+#include <testsuite_hooks.h>\n+\n+// Test related to PR libstdc++/105387\n+// Check that pointer-to-member type exceptions can still be caught with -frtti.\n+// { dg-require-effective-target rtti }\n+\n+void test_catch_ptr_to_member()\n+{\n+  bool exception_thrown = false;\n+  struct X { int i; };\n+  try {\n+    throw &X::i;\n+  }\n+  catch (const int X::*) {\n+    exception_thrown = true;\n+  }\n+\n+  VERIFY(exception_thrown);\n+}\n+\n+int main()\n+{\n+  test_catch_ptr_to_member();\n+  return 0;\n+}"}]}