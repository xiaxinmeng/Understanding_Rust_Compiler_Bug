{"sha": "be1418c7a46db1719f830500eebebc2bf40efc04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxNDE4YzdhNDZkYjE3MTlmODMwNTAwZWViZWJjMmJmNDBlZmMwNA==", "commit": {"author": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-06-16T22:34:28Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-06-16T22:34:28Z"}, "message": "rs6000-c.c (altivec_overloaded_builtins): Add definitions for vec_float, vec_float2, vec_floato, vec_floate built-ins.\n\ngcc/ChangeLog:\n\n2017-06-16  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\tdefinitions for vec_float, vec_float2, vec_floato,\n\tvec_floate built-ins.\n\t* config/rs6000/vsx.md (define_c_enum \"unspec\"): Add RTL code\n\tfor instructions vsx_xvcvsxws vsx_xvcvuxwsp, float2, floato and\n\tfloate.\n\t* config/rs6000/rs6000-builtin.def (FLOAT2_V2DI, FLOATE_V2DF,\n\tFLOATE_2DI, FLOATO_V2DF, FLOATEE_V2DI, XVCVSXWSP_V4SF,\n\tUNS_FLOATO_V2DI, UNS_FLOATE_V2DI): Add definitions.\n\t* config/altivec.md (define_insn \"p8_vmrgew_<mode>\",\n\tdefine_mode_attr VF_sxddp): Add V4SF type to p8_vmrgew.\n\t* config/rs6000/altivec.h (vec_float, vec_float2, vec_floate,\n\tvec_floato): Add builtin defines.\n\t* doc/extend.texi (vec_float, vec_float2, vec_floate, vec_floato):\n\tUpdate the built-in documentation file for the new built-in\n\tfunctions.\n\ngcc/testsuite/ChangeLog:\n\n2017-06-16  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-3-runnable.c (test_result_sp,\n\tmain): Add runnable tests and test checker for vec_float,\n\tvec_float2, vec_floate and vec_floato builtins.\n\nFrom-SVN: r249311", "tree": {"sha": "582e674072a85a29c55530324025e9f9f94b5921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/582e674072a85a29c55530324025e9f9f94b5921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be1418c7a46db1719f830500eebebc2bf40efc04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1418c7a46db1719f830500eebebc2bf40efc04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1418c7a46db1719f830500eebebc2bf40efc04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1418c7a46db1719f830500eebebc2bf40efc04/comments", "author": null, "committer": null, "parents": [{"sha": "e3e266bfb1eb3e8c10f7461910529e0cb566343d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e266bfb1eb3e8c10f7461910529e0cb566343d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e266bfb1eb3e8c10f7461910529e0cb566343d"}], "stats": {"total": 378, "additions": 361, "deletions": 17}, "files": [{"sha": "d542315b99d3d853222927e9782a6ab567fd3d7d", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -133,6 +133,10 @@\n #define vec_doublel __builtin_vec_doublel\n #define vec_doubleh __builtin_vec_doubleh\n #define vec_expte __builtin_vec_expte\n+#define vec_float __builtin_vec_float\n+#define vec_float2 __builtin_vec_float2\n+#define vec_floate __builtin_vec_floate\n+#define vec_floato __builtin_vec_floato\n #define vec_floor __builtin_vec_floor\n #define vec_loge __builtin_vec_loge\n #define vec_madd __builtin_vec_madd"}, {"sha": "fd1528668c420aafd48d8ed1336e8fadceb6d1c0", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -207,6 +207,9 @@\n ;; versus floating point\n (define_mode_attr VS_sxwsp [(V4SI \"sxw\") (V4SF \"sp\")])\n \n+;; Mode attribute for vector floate and floato conversions\n+(define_mode_attr VF_sxddp [(V2DI \"sxd\") (V2DF \"dp\")])\n+\n ;; Specific iterator for parity which does not have a byte/half-word form, but\n ;; does have a quad word form\n (define_mode_iterator VParity [V4SI\n@@ -1316,13 +1319,13 @@\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n-;; Power8 vector merge even/odd\n-(define_insn \"p8_vmrgew\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t(vec_select:V4SI\n-\t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t    (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+;; Power8 vector merge two V4SF/V4SI even words to V4SF\n+(define_insn \"p8_vmrgew_<mode>\"\n+  [(set (match_operand:VSX_W 0 \"register_operand\" \"=v\")\n+\t(vec_select:VSX_W\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_W 1 \"register_operand\" \"v\")\n+\t    (match_operand:VSX_W 2 \"register_operand\" \"v\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 2) (const_int 6)])))]\n   \"TARGET_P8_VECTOR\""}, {"sha": "4682628e6d7243a7a08235a90c57ac86cd2f5aba", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -1591,6 +1591,8 @@ BU_VSX_2 (CMPLE_U16QI,        \"cmple_u16qi\",    CONST,  vector_ngtuv16qi)\n BU_VSX_2 (CMPLE_U8HI,         \"cmple_u8hi\",     CONST,  vector_ngtuv8hi)\n BU_VSX_2 (CMPLE_U4SI,         \"cmple_u4si\",     CONST,  vector_ngtuv4si)\n BU_VSX_2 (CMPLE_U2DI,         \"cmple_u2di\",     CONST,  vector_ngtuv2di)\n+BU_VSX_2 (FLOAT2_V2DI,        \"float2_v2di\",    CONST,  float2_v2di)\n+BU_VSX_2 (UNS_FLOAT2_V2DI,    \"uns_float2_v2di\",    CONST,  uns_float2_v2di)\n \n /* VSX abs builtin functions.  */\n BU_VSX_A (XVABSDP,\t      \"xvabsdp\",\tCONST,\tabsv2df2)\n@@ -1648,6 +1650,16 @@ BU_VSX_1 (XVCVSPSXDS,\t      \"xvcvspsxds\",\tCONST,\tvsx_xvcvspsxds)\n BU_VSX_1 (XVCVSPUXDS,\t      \"xvcvspuxds\",\tCONST,\tvsx_xvcvspuxds)\n BU_VSX_1 (XVCVSXDSP,\t      \"xvcvsxdsp\",\tCONST,\tvsx_xvcvsxdsp)\n BU_VSX_1 (XVCVUXDSP,\t      \"xvcvuxdsp\",\tCONST,\tvsx_xvcvuxdsp)\n+\n+BU_VSX_1 (XVCVSXWSP_V4SF,  \"vsx_xvcvsxwsp\",   CONST,\tvsx_xvcvsxwsp)\n+BU_VSX_1 (XVCVUXWSP_V4SF,  \"vsx_xvcvuxwsp\",   CONST,\tvsx_xvcvuxwsp)\n+BU_VSX_1 (FLOATE_V2DI,     \"floate_v2di\",     CONST,\tfloatev2di)\n+BU_VSX_1 (FLOATE_V2DF,     \"floate_v2df\",     CONST,\tfloatev2df)\n+BU_VSX_1 (FLOATO_V2DI,     \"floato_v2di\",     CONST,\tfloatov2di)\n+BU_VSX_1 (FLOATO_V2DF,     \"floato_v2df\",     CONST,\tfloatov2df)\n+BU_VSX_1 (UNS_FLOATO_V2DI, \"uns_floato_v2di\", CONST,\tunsfloatov2di)\n+BU_VSX_1 (UNS_FLOATE_V2DI, \"uns_floate_v2di\", CONST,\tunsfloatev2di)\n+\n BU_VSX_1 (XVRSPI,\t      \"xvrspi\",\t\tCONST,\tvsx_xvrspi)\n BU_VSX_1 (XVRSPIC,\t      \"xvrspic\",\tCONST,\tvsx_xvrspic)\n BU_VSX_1 (XVRSPIM,\t      \"xvrspim\",\tCONST,\tvsx_floorv4sf2)\n@@ -1760,6 +1772,8 @@ BU_VSX_OVERLOAD_2 (XXMRGHW,  \"xxmrghw\")\n BU_VSX_OVERLOAD_2 (XXMRGLW,  \"xxmrglw\")\n BU_VSX_OVERLOAD_2 (XXSPLTD,  \"xxspltd\")\n BU_VSX_OVERLOAD_2 (XXSPLTW,  \"xxspltw\")\n+BU_VSX_OVERLOAD_2 (FLOAT2,   \"float2\")\n+BU_VSX_OVERLOAD_2 (UNS_FLOAT2,   \"uns_float2\")\n \n /* 1 argument VSX overloaded builtin functions.  */\n BU_VSX_OVERLOAD_1 (DOUBLE,   \"double\")\n@@ -1771,6 +1785,9 @@ BU_VSX_OVERLOAD_1 (DOUBLEH,  \"doubleh\")\n BU_VSX_OVERLOAD_1 (UNS_DOUBLEH,  \"uns_doubleh\")\n BU_VSX_OVERLOAD_1 (DOUBLEL,  \"doublel\")\n BU_VSX_OVERLOAD_1 (UNS_DOUBLEL,  \"uns_doublel\")\n+BU_VSX_OVERLOAD_1 (FLOAT,  \"float\")\n+BU_VSX_OVERLOAD_1 (FLOATE,  \"floate\")\n+BU_VSX_OVERLOAD_1 (FLOATO,  \"floato\")\n \n /* VSX builtins that are handled as special cases.  */\n BU_VSX_OVERLOAD_X (LD,\t     \"ld\")\n@@ -1812,7 +1829,7 @@ BU_P8V_AV_2 (VMINSD,\t\t\"vminsd\",\tCONST,\tsminv2di3)\n BU_P8V_AV_2 (VMAXSD,\t\t\"vmaxsd\",\tCONST,\tsmaxv2di3)\n BU_P8V_AV_2 (VMINUD,\t\t\"vminud\",\tCONST,\tuminv2di3)\n BU_P8V_AV_2 (VMAXUD,\t\t\"vmaxud\",\tCONST,\tumaxv2di3)\n-BU_P8V_AV_2 (VMRGEW,\t\t\"vmrgew\",\tCONST,\tp8_vmrgew)\n+BU_P8V_AV_2 (VMRGEW_V4SI,\t\"vmrgew_v4si\",\tCONST,\tp8_vmrgew_v4si)\n BU_P8V_AV_2 (VMRGOW,\t\t\"vmrgow\",\tCONST,\tp8_vmrgow)\n BU_P8V_AV_2 (VBPERMQ,\t\t\"vbpermq\",\tCONST,\taltivec_vbpermq)\n BU_P8V_AV_2 (VBPERMQ2,\t\t\"vbpermq2\",\tCONST,\taltivec_vbpermq2)"}, {"sha": "19f6d9c0360d92bdbc695b81574a964d47786182", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -1538,6 +1538,28 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { VSX_BUILTIN_VEC_DOUBLEL, VSX_BUILTIN_DOUBLEL_V4SF,\n     RS6000_BTI_V2DF, RS6000_BTI_V4SF, 0, 0 },\n \n+  { VSX_BUILTIN_VEC_FLOAT, VSX_BUILTIN_XVCVSXWSP_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SI, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOAT, VSX_BUILTIN_XVCVUXWSP_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOAT2, VSX_BUILTIN_FLOAT2_V2DI,\n+    RS6000_BTI_V4SF, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_FLOAT2, VSX_BUILTIN_UNS_FLOAT2_V2DI,\n+    RS6000_BTI_V4SF, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_FLOATE, VSX_BUILTIN_FLOATE_V2DF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOATE, VSX_BUILTIN_FLOATE_V2DI,\n+    RS6000_BTI_V4SF, RS6000_BTI_V2DI, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOATE, VSX_BUILTIN_UNS_FLOATE_V2DI,\n+    RS6000_BTI_V4SF, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOATO, VSX_BUILTIN_FLOATO_V2DF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOATO, VSX_BUILTIN_FLOATO_V2DI,\n+    RS6000_BTI_V4SF, RS6000_BTI_V2DI, 0, 0 },\n+  { VSX_BUILTIN_VEC_FLOATO, VSX_BUILTIN_UNS_FLOATO_V2DI,\n+    RS6000_BTI_V4SF, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n@@ -5262,12 +5284,12 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, 0 },\n \n-  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW,\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n-  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW,\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n-  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW,\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW_V4SI,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n \n   { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW,"}, {"sha": "8165d042738ae13c9e3d64c7461d42bbc312a93d", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -72,6 +72,7 @@ extern void altivec_expand_stvex_be (rtx, rtx, machine_mode, unsigned);\n extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n extern void rs6000_scale_v2df (rtx, rtx, int);\n+extern void rs6000_generate_float2_code (bool, rtx, rtx, rtx);\n extern int expand_block_clear (rtx[]);\n extern int expand_block_move (rtx[]);\n extern bool expand_block_compare (rtx[]);"}, {"sha": "14b17788ac5eadd9813785437fd14f4548ccd821", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -36786,7 +36786,7 @@ altivec_expand_vec_perm_const (rtx operands[4])\n       (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglw_direct\n        : CODE_FOR_altivec_vmrghw_direct),\n       {  8,  9, 10, 11, 24, 25, 26, 27, 12, 13, 14, 15, 28, 29, 30, 31 } },\n-    { OPTION_MASK_P8_VECTOR, CODE_FOR_p8_vmrgew,\n+    { OPTION_MASK_P8_VECTOR, CODE_FOR_p8_vmrgew_v4si,\n       {  0,  1,  2,  3, 16, 17, 18, 19,  8,  9, 10, 11, 24, 25, 26, 27 } },\n     { OPTION_MASK_P8_VECTOR, CODE_FOR_p8_vmrgow,\n       {  4,  5,  6,  7, 20, 21, 22, 23, 12, 13, 14, 15, 28, 29, 30, 31 } }\n@@ -42375,6 +42375,49 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n   *update = build2 (COMPOUND_EXPR, void_type_node, update_mffs, update_mtfsf);\n }\n \n+void\n+rs6000_generate_float2_code (bool signed_convert, rtx dst, rtx src1, rtx src2)\n+{\n+  rtx rtx_tmp0, rtx_tmp1, rtx_tmp2, rtx_tmp3;\n+\n+  rtx_tmp0 = gen_reg_rtx (V2DImode);\n+  rtx_tmp1 = gen_reg_rtx (V2DImode);\n+\n+  /* The destination of the vmrgew instruction layout is:\n+     rtx_tmp2[0] rtx_tmp3[0] rtx_tmp2[1] rtx_tmp3[0].\n+     Setup rtx_tmp0 and rtx_tmp1 to ensure the order of the elements after the\n+     vmrgew instruction will be correct.  */\n+  if (VECTOR_ELT_ORDER_BIG)\n+    {\n+      emit_insn (gen_vsx_xxpermdi_v2di_be (rtx_tmp0, src1, src2, GEN_INT (0)));\n+      emit_insn (gen_vsx_xxpermdi_v2di_be (rtx_tmp1, src1, src2, GEN_INT (3)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_vsx_xxpermdi_v2di (rtx_tmp0, src1, src2, GEN_INT (3)));\n+      emit_insn (gen_vsx_xxpermdi_v2di (rtx_tmp1, src1, src2, GEN_INT (0)));\n+    }\n+\n+  rtx_tmp2 = gen_reg_rtx (V4SFmode);\n+  rtx_tmp3 = gen_reg_rtx (V4SFmode);\n+\n+  if (signed_convert)\n+    {\n+      emit_insn (gen_vsx_xvcvsxdsp (rtx_tmp2, rtx_tmp0));\n+      emit_insn (gen_vsx_xvcvsxdsp (rtx_tmp3, rtx_tmp1));\n+    }\n+  else\n+    {\n+       emit_insn (gen_vsx_xvcvuxdsp (rtx_tmp2, rtx_tmp0));\n+       emit_insn (gen_vsx_xvcvuxdsp (rtx_tmp3, rtx_tmp1));\n+    }\n+\n+  if (VECTOR_ELT_ORDER_BIG)\n+    emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp2, rtx_tmp3));\n+  else\n+    emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp3, rtx_tmp2));\n+}\n+\n /* Implement the TARGET_OPTAB_SUPPORTED_P hook.  */\n \n static bool"}, {"sha": "284c87bf355620a859e221526016029c910350dd", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -331,6 +331,14 @@\n    UNSPEC_VSX_CVUXDSP\n    UNSPEC_VSX_CVSPSXDS\n    UNSPEC_VSX_CVSPUXDS\n+   UNSPEC_VSX_CVSXWSP\n+   UNSPEC_VSX_CVUXWSP\n+   UNSPEC_VSX_FLOAT2\n+   UNSPEC_VSX_UNS_FLOAT2\n+   UNSPEC_VSX_FLOATE\n+   UNSPEC_VSX_UNS_FLOATE\n+   UNSPEC_VSX_FLOATO\n+   UNSPEC_VSX_UNS_FLOATO\n    UNSPEC_VSX_TDIV\n    UNSPEC_VSX_TSQRT\n    UNSPEC_VSX_SET\n@@ -1976,6 +1984,156 @@\n   \"xvcvspuxds %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n+(define_insn \"vsx_xvcvsxwsp\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n+\t\t     UNSPEC_VSX_CVSXWSP))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+  \"xvcvsxwsp %x0,%x1\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+(define_insn \"vsx_xvcvuxwsp\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SF[(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n+\t\t    UNSPEC_VSX_CVUXWSP))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+  \"xvcvuxwsp %x0,%x1\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+;; Generate float2\n+;; convert two long long signed ints to float\n+(define_expand \"float2_v2di\"\n+  [(use (match_operand:V4SF 0 \"register_operand\" \"=wa\"))\n+   (use (match_operand:V2DI 1 \"register_operand\" \"wa\"))\n+   (use (match_operand:V2DI 2 \"register_operand\" \"wa\"))]\n+ \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  rtx rtx_src1, rtx_src2, rtx_dst;\n+\n+  rtx_dst = operands[0];\n+  rtx_src1 = operands[1];\n+  rtx_src2 = operands[2];\n+\n+  rs6000_generate_float2_code (true, rtx_dst, rtx_src1, rtx_src2);\n+  DONE;\n+})\n+\n+;; Generate uns_float2\n+;; convert two long long unsigned ints to float\n+(define_expand \"uns_float2_v2di\"\n+  [(use (match_operand:V4SF 0 \"register_operand\" \"=wa\"))\n+   (use (match_operand:V2DI 1 \"register_operand\" \"wa\"))\n+   (use (match_operand:V2DI 2 \"register_operand\" \"wa\"))]\n+ \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  rtx rtx_src1, rtx_src2, rtx_dst;\n+\n+  rtx_dst = operands[0];\n+  rtx_src1 = operands[1];\n+  rtx_src2 = operands[2];\n+\n+  rs6000_generate_float2_code (true, rtx_dst, rtx_src1, rtx_src2);\n+  DONE;\n+})\n+\n+;; Generate floate\n+;; convert  double or long long signed to float\n+;; (Only even words are valid, BE numbering)\n+(define_expand \"floate<mode>\"\n+  [(use (match_operand:V4SF 0 \"register_operand\" \"=wa\"))\n+   (use (match_operand:VSX_D 1 \"register_operand\" \"wa\"))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    {\n+      /* Shift left one word to put even word correct location */\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (4);\n+\n+      rtx_tmp = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_vsx_xvcv<VF_sxddp>sp (rtx_tmp, operands[1]));\n+      emit_insn (gen_altivec_vsldoi_v4sf (operands[0],\n+\t\t rtx_tmp, rtx_tmp, rtx_val));\n+    }\n+  else\n+    emit_insn (gen_vsx_xvcv<VFC_inst>sp (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n+;; Generate uns_floate\n+;; convert long long unsigned to float\n+;; (Only even words are valid, BE numbering)\n+(define_expand \"unsfloatev2di\"\n+  [(use (match_operand:V4SF 0 \"register_operand\" \"=wa\"))\n+   (use (match_operand:V2DI 1 \"register_operand\" \"wa\"))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    {\n+      /* Shift left one word to put even word correct location */\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (4);\n+\n+      rtx_tmp = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_vsx_xvcvuxdsp (rtx_tmp, operands[1]));\n+      emit_insn (gen_altivec_vsldoi_v4sf (operands[0],\n+\t\t rtx_tmp, rtx_tmp, rtx_val));\n+    }\n+  else\n+    emit_insn (gen_vsx_xvcvuxdsp (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n+;; Generate floato\n+;; convert double or long long signed to float\n+;; Only odd words are valid, BE numbering)\n+(define_expand \"floato<mode>\"\n+  [(use (match_operand:V4SF 0 \"register_operand\" \"=wa\"))\n+   (use (match_operand:VSX_D 1 \"register_operand\" \"wa\"))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    emit_insn (gen_vsx_xvcv<VFC_inst>sp (operands[0], operands[1]));\n+  else\n+    {\n+      /* Shift left one word to put odd word correct location */\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (4);\n+\n+      rtx_tmp = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_vsx_xvcv<VFC_inst>sp (rtx_tmp, operands[1]));\n+      emit_insn (gen_altivec_vsldoi_v4sf (operands[0],\n+\t\t rtx_tmp, rtx_tmp, rtx_val));\n+    }\n+  DONE;\n+})\n+\n+;; Generate uns_floato\n+;; convert long long unsigned to float\n+;; (Only odd words are valid, BE numbering)\n+(define_expand \"unsfloatov2di\"\n+ [(use (match_operand:V4SF 0 \"register_operand\" \"=wa\"))\n+  (use (match_operand:V2DI 1 \"register_operand\" \"wa\"))]\n+ \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    emit_insn (gen_vsx_xvcvuxdsp (operands[0], operands[1]));\n+  else\n+    {\n+      /* Shift left one word to put odd word correct location */\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (4);\n+\n+      rtx_tmp = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_vsx_xvcvuxdsp (rtx_tmp, operands[1]));\n+      emit_insn (gen_altivec_vsldoi_v4sf (operands[0],\n+\t\t rtx_tmp, rtx_tmp, rtx_val));\n+    }\n+  DONE;\n+})\n+\n ;; Only optimize (float (fix x)) -> frz if we are in fast-math mode, since\n ;; since the xvrdpiz instruction does not truncate the value if the floating\n ;; point value is < LONG_MIN or > LONG_MAX."}, {"sha": "43f9ecf2466dd4e93aae4ad2f9fb752a11695c8a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -16002,6 +16002,20 @@ vector float vec_expte (vector float);\n \n vector float vec_floor (vector float);\n \n+vector float vec_float (vector signed int);\n+vector float vec_float (vector unsigned int);\n+\n+vector float vec_float2 (vector signed long long, vector signed long long);\n+vector float vec_float2 (vector unsigned long long, vector signed long long);\n+\n+vector float vec_floate (vector double);\n+vector float vec_floate (vector signed long long);\n+vector float vec_floate (vector unsigned long long);\n+\n+vector float vec_floato (vector double);\n+vector float vec_floato (vector signed long long);\n+vector float vec_floato (vector unsigned long long);\n+\n vector float vec_ld (int, const vector float *);\n vector float vec_ld (int, const float *);\n vector bool int vec_ld (int, const vector bool int *);"}, {"sha": "08b7a5395d21f494a5025494eff6091a6cf586b5", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-runnable.c", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1418c7a46db1719f830500eebebc2bf40efc04/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c?ref=be1418c7a46db1719f830500eebebc2bf40efc04", "patch": "@@ -5,8 +5,37 @@\n \n #include <altivec.h> // vector\n \n+#define ALL  1\n+#define EVEN 2\n+#define ODD  3\n+\n void abort (void);\n \n+void test_result_sp(int check, vector float vec_result, vector float vec_expected)\n+{\n+\tint i;\n+\tfor(i = 0; i<4; i++) {\n+\n+\tswitch (check) {\n+\tcase ALL:\n+\t\tbreak;\n+\tcase EVEN:\n+\t\tif (i%2 == 0)\n+\t\t\tbreak;\n+\t\telse\n+\t\t\tcontinue;\n+\tcase ODD:\n+\t\tif (i%2 != 0)\n+\t\t\tbreak;\n+\t\telse\n+\t\t\tcontinue;\n+\t}\n+\n+\tif (vec_result[i] != vec_expected[i])\n+\t\tabort();\n+\t}\n+}\n+\n void test_result_dp(vector double vec_result, vector double vec_expected)\n {\n \tif (vec_result[0] != vec_expected[0])\n@@ -21,11 +50,17 @@ int main()\n \tint i;\n \tvector unsigned int vec_unint;\n \tvector signed int vec_int;\n+\tvector long long int vec_ll_int0, vec_ll_int1;\n+\tvector long long unsigned int vec_ll_uns_int0, vec_ll_uns_int1;\n \tvector float  vec_flt, vec_flt_result, vec_flt_expected;\n \tvector double vec_dble0, vec_dble1, vec_dble_result, vec_dble_expected;\n \n \tvec_int = (vector signed int){ -1, 3, -5, 1234567 };\n+\tvec_ll_int0 = (vector long long int){ -12, -12345678901234 };\n+\tvec_ll_int1 = (vector long long int){ 12, 9876543210 };\n \tvec_unint = (vector unsigned int){ 9, 11, 15, 2468013579 };\n+\tvec_ll_uns_int0 = (vector unsigned long long int){ 102, 9753108642 };\n+\tvec_ll_uns_int1 = (vector unsigned long long int){ 23, 29 };\n \tvec_flt = (vector float){ -21., 3.5, -53., 78. };\n \tvec_dble0 = (vector double){ 34.0, 97.0 };\n \tvec_dble1 = (vector double){ 214.0, -5.5 };\n@@ -34,7 +69,7 @@ int main()\n \tvec_dble_expected = (vector double){-1.000000, -5.000000};\n \tvec_dble_result = vec_doublee (vec_int);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n-\t\n+\n \tvec_dble_expected = (vector double){9.000000, 15.000000};\n \tvec_dble_result = vec_doublee (vec_unint);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n@@ -48,7 +83,7 @@ int main()\n \tvec_dble_expected = (vector double){3.000000, 1234567.000000};\n \tvec_dble_result = vec_doubleo (vec_int);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n-   \n+\n \tvec_dble_expected = (vector double){11.000000, 2468013579.000000};\n \tvec_dble_result = vec_doubleo (vec_unint);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n@@ -62,7 +97,7 @@ int main()\n \tvec_dble_expected = (vector double){-5.000000, 1234567.000000};\n \tvec_dble_result = vec_doublel (vec_int);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n-   \n+\n \tvec_dble_expected = (vector double){15.000000, 2468013579.000000};\n \tvec_dble_result = vec_doublel (vec_unint);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n@@ -71,14 +106,61 @@ int main()\n \tvec_dble_result = vec_doublel (vec_flt);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n-   \n+\n \t/* conversion of words 2 and 3 */\n \tvec_dble_expected = (vector double){-1.000000, 3.000000};\n \tvec_dble_result = vec_doubleh (vec_int);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n-   \n+\n \tvec_dble_expected = (vector double){9.000000, 11.000000};\n \tvec_dble_result = vec_doubleh (vec_unint);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n+\tvec_dble_expected = (vector double){-21.000000, 3.500000};\n+\tvec_dble_result = vec_doubleh (vec_flt);\n+\ttest_result_dp(vec_dble_result, vec_dble_expected);\n+\n+\t/* conversion of integer vector to single precision float vector */\n+\tvec_flt_expected = (vector float){-1.00, 3.00, -5.00, 1234567.00};\n+\tvec_flt_result = vec_float (vec_int);\n+\ttest_result_sp(ALL, vec_flt_result, vec_flt_expected);\n+\n+\tvec_flt_expected = (vector float){9.00, 11.00, 15.00, 2468013579.0};\n+\tvec_flt_result = vec_float (vec_unint);\n+\ttest_result_sp(ALL, vec_flt_result, vec_flt_expected);\n+\n+\t/* conversion of two double precision vectors to single precision vector */\n+\tvec_flt_expected = (vector float){-12.00, -12345678901234.00, 12.00, 9876543210.00};\n+\tvec_flt_result = vec_float2 (vec_ll_int0, vec_ll_int1);\n+\ttest_result_sp(ALL, vec_flt_result, vec_flt_expected);\n+\n+\tvec_flt_expected = (vector float){102.00, 9753108642.00, 23.00, 29.00};\n+\tvec_flt_result = vec_float2 (vec_ll_uns_int0, vec_ll_uns_int1);\n+\ttest_result_sp(ALL, vec_flt_result, vec_flt_expected);\n+\n+\t/* conversion of even words in double precision vector to single precision vector */\n+\tvec_flt_expected = (vector float){-12.00, 00.00, -12345678901234.00, 0.00};\n+\tvec_flt_result = vec_floate (vec_ll_int0);\n+\ttest_result_sp(EVEN, vec_flt_result, vec_flt_expected);\n+\n+\tvec_flt_expected = (vector float){102.00, 0.00, 9753108642.00, 0.00};\n+\tvec_flt_result = vec_floate (vec_ll_uns_int0);\n+\ttest_result_sp(EVEN, vec_flt_result, vec_flt_expected);\n+\n+\tvec_flt_expected = (vector float){34.00, 0.00, 97.00, 0.00};\n+\tvec_flt_result = vec_floate (vec_dble0);\n+\ttest_result_sp(EVEN, vec_flt_result, vec_flt_expected);\n+\n+\t/* conversion of odd words in double precision vector to single precision vector */\n+\tvec_flt_expected = (vector float){0.00, -12.00, 00.00, -12345678901234.00};\n+\tvec_flt_result = vec_floato (vec_ll_int0);\n+\ttest_result_sp(ODD, vec_flt_result, vec_flt_expected);\n+\n+\tvec_flt_expected = (vector float){0.00, 102.00, 0.00, 9753108642.00};\n+\tvec_flt_result = vec_floato (vec_ll_uns_int0);\n+\ttest_result_sp(ODD, vec_flt_result, vec_flt_expected);\n+\n+\tvec_flt_expected = (vector float){0.00, 34.00, 0.00, 97.00};\n+\tvec_flt_result = vec_floato (vec_dble0);\n+\ttest_result_sp(ODD, vec_flt_result, vec_flt_expected);\n }"}]}