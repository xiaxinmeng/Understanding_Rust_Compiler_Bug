{"sha": "3a0afad0d212b3ff213b393728e018caf2daa526", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwYWZhZDBkMjEyYjNmZjIxM2IzOTM3MjhlMDE4Y2FmMmRhYTUyNg==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-06-03T09:35:37Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-06-03T09:35:37Z"}, "message": "re PR target/88837 ([SVE] Poor vector construction code in VL-specific mode)\n\n2019-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR target/88837\n\t* vector-builder.h (vector_builder::count_dups): New method.\n\t* config/aarch64/aarch64-protos.h (aarch64_expand_sve_vector_init):\n\tDeclare prototype.\n\t* config/aarch64/aarch64/sve.md (aarch64_sve_rev64<mode>): Use @.\n\t(vec_init<mode><Vel>): New pattern.\n\t* config/aarch64/aarch64.c (emit_insr): New function.\n\t(aarch64_sve_expand_vector_init_handle_trailing_constants): Likewise.\n\t(aarch64_sve_expand_vector_init_insert_elems): Likewise.\n\t(aarch64_sve_expand_vector_init_handle_trailing_same_elem): Likewise.\n\t(aarch64_sve_expand_vector_init): Define two overloaded functions.\n\ntestsuite/\n\t* gcc.target/aarch64/sve/init_1.c: New test.\n\t* gcc.target/aarch64/sve/init_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_2.c: Likewise.\n\t* gcc.target/aarch64/sve/init_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_3.c: Likewise.\n\t* gcc.target/aarch64/sve/init_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_4.c: Likewise.\n\t* gcc.target/aarch64/sve/init_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_5.c: Likewise.\n\t* gcc.target/aarch64/sve/init_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_6.c: Likewise.\n\t* gcc.target/aarch64/sve/init_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_7.c: Likewise.\n\t* gcc.target/aarch64/sve/init_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_8.c: Likewise.\n\t* gcc.target/aarch64/sve/init_8_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_9.c: Likewise.\n\t* gcc.target/aarch64/sve/init_9_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_10.c: Likewise.\n\t* gcc.target/aarch64/sve/init_10_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_11.c: Likewise.\n\t* gcc.target/aarch64/sve/init_11_run.c: Likewise.\n\t* gcc.target/aarch64/sve/init_12.c: Likewise.\n\t* gcc.target/aarch64/sve/init_12_run.c: Likewise.\n\nFrom-SVN: r271857", "tree": {"sha": "efddc0e470e94420797801cb9068bc7998629cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efddc0e470e94420797801cb9068bc7998629cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0afad0d212b3ff213b393728e018caf2daa526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0afad0d212b3ff213b393728e018caf2daa526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0afad0d212b3ff213b393728e018caf2daa526", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0afad0d212b3ff213b393728e018caf2daa526/comments", "author": null, "committer": null, "parents": [{"sha": "bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcde3345ea97aef36f5b4e29f09f71bcd41879b2"}], "stats": {"total": 920, "additions": 919, "deletions": 1}, "files": [{"sha": "f887329e929630ac95c871674b9cd6c0637c37b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -1,3 +1,17 @@\n+2019-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/88837\n+\t* vector-builder.h (vector_builder::count_dups): New method.\n+\t* config/aarch64/aarch64-protos.h (aarch64_expand_sve_vector_init):\n+\tDeclare prototype.\n+\t* config/aarch64/aarch64/sve.md (aarch64_sve_rev64<mode>): Use @.\n+\t(vec_init<mode><Vel>): New pattern.\n+\t* config/aarch64/aarch64.c (emit_insr): New function.\n+\t(aarch64_sve_expand_vector_init_handle_trailing_constants): Likewise.\n+\t(aarch64_sve_expand_vector_init_insert_elems): Likewise.\n+\t(aarch64_sve_expand_vector_init_handle_trailing_same_elem): Likewise.\n+\t(aarch64_sve_expand_vector_init): Define two overloaded functions.\n+\n 2019-06-03  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n \n \tPR tree-optimization/90681"}, {"sha": "a42d352ac11d811a37c1a1f4c0d30925925bcaf7", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -524,6 +524,7 @@ bool aarch64_maybe_expand_sve_subreg_move (rtx, rtx);\n void aarch64_split_sve_subreg_move (rtx, rtx, rtx);\n void aarch64_expand_prologue (void);\n void aarch64_expand_vector_init (rtx, rtx);\n+void aarch64_sve_expand_vector_init (rtx, rtx);\n void aarch64_init_cumulative_args (CUMULATIVE_ARGS *, const_tree, rtx,\n \t\t\t\t   const_tree, unsigned);\n void aarch64_init_expanders (void);"}, {"sha": "ba39134e0ae6a265a670fe8825cffa74b9ecefb9", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -863,7 +863,7 @@\n   \"revb\\t%0.h, %1/m, %2.h\"\n )\n \n-(define_insn \"*aarch64_sve_rev<mode>\"\n+(define_insn \"@aarch64_sve_rev<mode>\"\n   [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_ALL [(match_operand:SVE_ALL 1 \"register_operand\" \"w\")]\n \t\t\tUNSPEC_REV))]\n@@ -3201,3 +3201,14 @@\n     DONE;\n   }\n )\n+\n+;; Standard pattern name vec_init<mode><Vel>.\n+(define_expand \"vec_init<mode><Vel>\"\n+  [(match_operand:SVE_ALL 0 \"register_operand\" \"\")\n+    (match_operand 1 \"\" \"\")]\n+  \"TARGET_SVE\"\n+  {\n+    aarch64_sve_expand_vector_init (operands[0], operands[1]);\n+    DONE;\n+  }\n+)"}, {"sha": "db0249b4607bef789ceab8ec844d37dfc2899de9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -15277,6 +15277,263 @@ aarch64_expand_vector_init (rtx target, rtx vals)\n     }\n }\n \n+/* Emit RTL corresponding to:\n+   insr TARGET, ELEM.  */\n+\n+static void\n+emit_insr (rtx target, rtx elem)\n+{\n+  machine_mode mode = GET_MODE (target);\n+  scalar_mode elem_mode = GET_MODE_INNER (mode);\n+  elem = force_reg (elem_mode, elem);\n+\n+  insn_code icode = optab_handler (vec_shl_insert_optab, mode);\n+  gcc_assert (icode != CODE_FOR_nothing);\n+  emit_insn (GEN_FCN (icode) (target, target, elem));\n+}\n+\n+/* Subroutine of aarch64_sve_expand_vector_init for handling\n+   trailing constants.\n+   This function works as follows:\n+   (a) Create a new vector consisting of trailing constants.\n+   (b) Initialize TARGET with the constant vector using emit_move_insn.\n+   (c) Insert remaining elements in TARGET using insr.\n+   NELTS is the total number of elements in original vector while\n+   while NELTS_REQD is the number of elements that are actually\n+   significant.\n+\n+   ??? The heuristic used is to do above only if number of constants\n+   is at least half the total number of elements.  May need fine tuning.  */\n+\n+static bool\n+aarch64_sve_expand_vector_init_handle_trailing_constants\n+ (rtx target, const rtx_vector_builder &builder, int nelts, int nelts_reqd)\n+{\n+  machine_mode mode = GET_MODE (target);\n+  scalar_mode elem_mode = GET_MODE_INNER (mode);\n+  int n_trailing_constants = 0;\n+\n+  for (int i = nelts_reqd - 1;\n+       i >= 0 && aarch64_legitimate_constant_p (elem_mode, builder.elt (i));\n+       i--)\n+    n_trailing_constants++;\n+\n+  if (n_trailing_constants >= nelts_reqd / 2)\n+    {\n+      rtx_vector_builder v (mode, 1, nelts);\n+      for (int i = 0; i < nelts; i++)\n+\tv.quick_push (builder.elt (i + nelts_reqd - n_trailing_constants));\n+      rtx const_vec = v.build ();\n+      emit_move_insn (target, const_vec);\n+\n+      for (int i = nelts_reqd - n_trailing_constants - 1; i >= 0; i--)\n+\temit_insr (target, builder.elt (i));\n+\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Subroutine of aarch64_sve_expand_vector_init.\n+   Works as follows:\n+   (a) Initialize TARGET by broadcasting element NELTS_REQD - 1 of BUILDER.\n+   (b) Skip trailing elements from BUILDER, which are the same as\n+       element NELTS_REQD - 1.\n+   (c) Insert earlier elements in reverse order in TARGET using insr.  */\n+\n+static void\n+aarch64_sve_expand_vector_init_insert_elems (rtx target,\n+\t\t\t\t\t     const rtx_vector_builder &builder,\n+\t\t\t\t\t     int nelts_reqd)\n+{\n+  machine_mode mode = GET_MODE (target);\n+  scalar_mode elem_mode = GET_MODE_INNER (mode);\n+\n+  struct expand_operand ops[2];\n+  enum insn_code icode = optab_handler (vec_duplicate_optab, mode);\n+  gcc_assert (icode != CODE_FOR_nothing);\n+\n+  create_output_operand (&ops[0], target, mode);\n+  create_input_operand (&ops[1], builder.elt (nelts_reqd - 1), elem_mode);\n+  expand_insn (icode, 2, ops);\n+\n+  int ndups = builder.count_dups (nelts_reqd - 1, -1, -1);\n+  for (int i = nelts_reqd - ndups - 1; i >= 0; i--)\n+    emit_insr (target, builder.elt (i));\n+}\n+\n+/* Subroutine of aarch64_sve_expand_vector_init to handle case\n+   when all trailing elements of builder are same.\n+   This works as follows:\n+   (a) Use expand_insn interface to broadcast last vector element in TARGET.\n+   (b) Insert remaining elements in TARGET using insr.\n+\n+   ??? The heuristic used is to do above if number of same trailing elements\n+   is at least 3/4 of total number of elements, loosely based on\n+   heuristic from mostly_zeros_p.  May need fine-tuning.  */\n+\n+static bool\n+aarch64_sve_expand_vector_init_handle_trailing_same_elem\n+ (rtx target, const rtx_vector_builder &builder, int nelts_reqd)\n+{\n+  int ndups = builder.count_dups (nelts_reqd - 1, -1, -1);\n+  if (ndups >= (3 * nelts_reqd) / 4)\n+    {\n+      aarch64_sve_expand_vector_init_insert_elems (target, builder,\n+\t\t\t\t\t\t   nelts_reqd - ndups + 1);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Initialize register TARGET from BUILDER. NELTS is the constant number\n+   of elements in BUILDER.\n+\n+   The function tries to initialize TARGET from BUILDER if it fits one\n+   of the special cases outlined below.\n+\n+   Failing that, the function divides BUILDER into two sub-vectors:\n+   v_even = even elements of BUILDER;\n+   v_odd = odd elements of BUILDER;\n+\n+   and recursively calls itself with v_even and v_odd.\n+\n+   if (recursive call succeeded for v_even or v_odd)\n+     TARGET = zip (v_even, v_odd)\n+\n+   The function returns true if it managed to build TARGET from BUILDER\n+   with one of the special cases, false otherwise.\n+\n+   Example: {a, 1, b, 2, c, 3, d, 4}\n+\n+   The vector gets divided into:\n+   v_even = {a, b, c, d}\n+   v_odd = {1, 2, 3, 4}\n+\n+   aarch64_sve_expand_vector_init(v_odd) hits case 1 and\n+   initialize tmp2 from constant vector v_odd using emit_move_insn.\n+\n+   aarch64_sve_expand_vector_init(v_even) fails since v_even contains\n+   4 elements, so we construct tmp1 from v_even using insr:\n+   tmp1 = dup(d)\n+   insr tmp1, c\n+   insr tmp1, b\n+   insr tmp1, a\n+\n+   And finally:\n+   TARGET = zip (tmp1, tmp2)\n+   which sets TARGET to {a, 1, b, 2, c, 3, d, 4}.  */\n+\n+static bool\n+aarch64_sve_expand_vector_init (rtx target, const rtx_vector_builder &builder,\n+\t\t\t\tint nelts, int nelts_reqd)\n+{\n+  machine_mode mode = GET_MODE (target);\n+\n+  /* Case 1: Vector contains trailing constants.  */\n+\n+  if (aarch64_sve_expand_vector_init_handle_trailing_constants\n+       (target, builder, nelts, nelts_reqd))\n+    return true;\n+\n+  /* Case 2: Vector contains leading constants.  */\n+\n+  rtx_vector_builder rev_builder (mode, 1, nelts_reqd);\n+  for (int i = 0; i < nelts_reqd; i++)\n+    rev_builder.quick_push (builder.elt (nelts_reqd - i - 1));\n+  rev_builder.finalize ();\n+\n+  if (aarch64_sve_expand_vector_init_handle_trailing_constants\n+       (target, rev_builder, nelts, nelts_reqd))\n+    {\n+      emit_insn (gen_aarch64_sve_rev (mode, target, target));\n+      return true;\n+    }\n+\n+  /* Case 3: Vector contains trailing same element.  */\n+\n+  if (aarch64_sve_expand_vector_init_handle_trailing_same_elem\n+       (target, builder, nelts_reqd))\n+    return true;\n+\n+  /* Case 4: Vector contains leading same element.  */\n+\n+  if (aarch64_sve_expand_vector_init_handle_trailing_same_elem\n+       (target, rev_builder, nelts_reqd) && nelts_reqd == nelts)\n+    {\n+      emit_insn (gen_aarch64_sve_rev (mode, target, target));\n+      return true;\n+    }\n+\n+  /* Avoid recursing below 4-elements.\n+     ??? The threshold 4 may need fine-tuning.  */\n+\n+  if (nelts_reqd <= 4)\n+    return false;\n+\n+  rtx_vector_builder v_even (mode, 1, nelts);\n+  rtx_vector_builder v_odd (mode, 1, nelts);\n+\n+  for (int i = 0; i < nelts * 2; i += 2)\n+    {\n+      v_even.quick_push (builder.elt (i));\n+      v_odd.quick_push (builder.elt (i + 1));\n+    }\n+\n+  v_even.finalize ();\n+  v_odd.finalize ();\n+\n+  rtx tmp1 = gen_reg_rtx (mode);\n+  bool did_even_p = aarch64_sve_expand_vector_init (tmp1, v_even,\n+\t\t\t\t\t\t    nelts, nelts_reqd / 2);\n+\n+  rtx tmp2 = gen_reg_rtx (mode);\n+  bool did_odd_p = aarch64_sve_expand_vector_init (tmp2, v_odd,\n+\t\t\t\t\t\t   nelts, nelts_reqd / 2);\n+\n+  if (!did_even_p && !did_odd_p)\n+    return false;\n+\n+  /* Initialize v_even and v_odd using INSR if it didn't match any of the\n+     special cases and zip v_even, v_odd.  */\n+\n+  if (!did_even_p)\n+    aarch64_sve_expand_vector_init_insert_elems (tmp1, v_even, nelts_reqd / 2);\n+\n+  if (!did_odd_p)\n+    aarch64_sve_expand_vector_init_insert_elems (tmp2, v_odd, nelts_reqd / 2);\n+\n+  rtvec v = gen_rtvec (2, tmp1, tmp2);\n+  emit_set_insn (target, gen_rtx_UNSPEC (mode, v, UNSPEC_ZIP1));\n+  return true;\n+}\n+\n+/* Initialize register TARGET from the elements in PARALLEL rtx VALS.  */\n+\n+void\n+aarch64_sve_expand_vector_init (rtx target, rtx vals)\n+{\n+  machine_mode mode = GET_MODE (target);\n+  int nelts = XVECLEN (vals, 0);\n+\n+  rtx_vector_builder v (mode, 1, nelts);\n+  for (int i = 0; i < nelts; i++)\n+    v.quick_push (XVECEXP (vals, 0, i));\n+  v.finalize ();\n+\n+  /* If neither sub-vectors of v could be initialized specially,\n+     then use INSR to insert all elements from v into TARGET.\n+     ??? This might not be optimal for vectors with large\n+     initializers like 16-element or above.\n+     For nelts < 4, it probably isn't useful to handle specially.  */\n+\n+  if (nelts < 4\n+      || !aarch64_sve_expand_vector_init (target, v, nelts, nelts))\n+    aarch64_sve_expand_vector_init_insert_elems (target, v, nelts);\n+}\n+\n static unsigned HOST_WIDE_INT\n aarch64_shift_truncation_mask (machine_mode mode)\n {"}, {"sha": "93b1f09b9de9827fa822c72400f5ca30cab7871f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -1,3 +1,31 @@\n+2019-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/88837\n+\t* gcc.target/aarch64/sve/init_1.c: New test.\n+\t* gcc.target/aarch64/sve/init_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_8_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_9_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_10_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_11.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_11_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_12.c: Likewise.\n+\t* gcc.target/aarch64/sve/init_12_run.c: Likewise.\n+\n 2019-06-03  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n \n \tPR tree-optimization/90681"}, {"sha": "5c14b603f46eadaf79cf319b61287fd8d30426ef", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 1.1: Trailing constants with stepped sequence.  */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b)\n+{\n+  return (vnx4si) { a, b, 1, 2, 3, 4, 5, 6 };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        ptrue   p0.s, vl8\n+        index   z0.s, #1, #1\n+        insr    z0.s, w1\n+        insr    z0.s, w0\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tindex\\t(z[0-9]+\\.s), #1, #1\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "9d6e2dfc876362c4401018ed2e4cb9f2df169c69", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_10.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 5.4: Interleaved repeating elements and non-repeating elements.  */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b, int c, int f)\n+{\n+  return (vnx4si) { a, f, b, f, c, f, c, f };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        mov     z0.s, w2\n+        mov     z1.s, w3\n+        insr    z0.s, w1\n+        ptrue   p0.s, vl8\n+        insr    z0.s, w0\n+        zip1    z0.s, z0.s, z1.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w3\\n\\tmov\\t(z[0-9]+\\.s), w2\\n.*\\n\\tinsr\\t\\2, w1\\n\\tinsr\\t\\2, w0\\n\\tzip1\\t\\2, \\2, \\1} } } */"}, {"sha": "9a6d8650eea0f2569f2863fa8b626c118df08b19", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_10_run.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_10_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_10.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+  int c = 12;\n+  int f = 13;\n+\n+  vnx4si v = foo (a, b, c, f);\n+  int expected[] = { a, f, b, f, c, f, c, f };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "e50cd54ef133bb766e70b6c6265b066800983fd8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_11.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 5.5: Interleaved repeating elements and trailing same elements.  */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b, int f) \n+{\n+  return (vnx4si) { a, f, b, f, b, f, b, f };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        mov     z0.s, w1\n+        mov     z1.s, w2\n+        insr    z0.s, w0\n+        ptrue   p0.s, vl8\n+        zip1    z0.s, z0.s, z1.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w1\\n\\tmov\\t(z[0-9]+\\.s), w2\\n\\tinsr\\t\\1, w0\\n.*\\tzip1\\t\\1, \\1, \\2} } } */"}, {"sha": "4371555818cf38e74b43ff90379dc13eb341ccc3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_11_run.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_11_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_11.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+  int f = 12;\n+\n+  vnx4si v = foo (a, b, f);\n+  int expected[] = { a, f, b, f, b, f, b, f };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "21d9e764360c487ff3a28dcc853ea4affd2b90df", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_12.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 5.5: Interleaved repeating elements and trailing same elements.  */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b, int f) \n+{\n+  return (vnx4si) { b, f, b, f, b, f, a, f };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        mov     z0.s, w0\n+        mov     z1.s, w2\n+        insr    z0.s, w1\n+        ptrue   p0.s, vl8\n+        insr    z0.s, w1\n+        insr    z0.s, w1\n+        zip1    z0.s, z0.s, z1.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w2\\n\\tmov\\t(z[0-9]+\\.s), w0\\n.*\\n\\tinsr\\t\\2, w1\\n\\tinsr\\t\\2, w1\\n\\tinsr\\t\\2, w1\\n\\tzip1\\t\\2, \\2, \\1} } } */"}, {"sha": "5ce7edb1e6878695aba01c0f288d8dd60ea799b1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_12_run.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_12_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_12.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+  int f = 12;\n+\n+  vnx4si v = foo (a, b, f);\n+  int expected[] = { b, f, b, f, b, f, a, f };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "824a5cbea7904acc9105d03a6b2fff85a78698f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_1_run.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_1_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_1.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+\n+  vnx4si v = foo (a, b);\n+  int expected[] = { a, b, 1, 2, 3, 4, 5, 6 };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "a8b2a25b325440d0115646981a8ecdc84133c54a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 1.2: Trailing constants with repeating sequence.  */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b)\n+{\n+  return (vnx4si) { a, b, 2, 3, 2, 3, 2, 3 };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        ptrue   p0.s, vl8\n+        adrp    x2, .LANCHOR0\n+        add     x2, x2, :lo12:.LANCHOR0\n+        ld1w    z0.s, p0/z, [x2]\n+        insr    z0.s, w1\n+        insr    z0.s, w0\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "86c191c777192f75dfa49c77fe506a2734d53d34", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_2_run.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_2_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_2.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+\n+  vnx4si v = foo (a, b);\n+  int expected[] = { a, b, 2, 3, 2, 3, 2, 3 };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "6b000b887ba8a813859cd6c45f87f0b48daaca6d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 2.1: Leading constants with stepped sequence.  */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b)\n+{\n+  return (vnx4si) { 1, 2, 3, 4, 5, 6, a, b };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        ptrue   p0.s, vl8\n+        index   z0.s, #6, #-1\n+        insr    z0.s, w0\n+        insr    z0.s, w1\n+        rev     z0.s, z0.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tindex\\t(z[0-9]+\\.s), #6, #-1\\n\\tinsr\\t\\1, w0\\n\\tinsr\\t\\1, w1\\n\\trev\\t\\1, \\1} } } */"}, {"sha": "ce4de69505f755a930d76059e7a3b6b2dee8c39a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_3_run.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_3_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_3.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+\n+  vnx4si v = foo (a, b);\n+  int expected[] = { 1, 2, 3, 4, 5, 6, a, b };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "619274928e47ea50dd3a933ebac322c5c2073137", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 2.2: Leading constants with stepped sequence.  */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b)\n+{\n+  return (vnx4si) { 3, 2, 3, 2, 3, 2, b, a };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        ptrue   p0.s, vl8\n+        adrp    x2, .LANCHOR0\n+        add     x2, x2, :lo12:.LANCHOR0\n+        ld1w    z0.s, p0/z, [x2]\n+        insr    z0.s, w1\n+        insr    z0.s, w0\n+        rev     z0.s, z0.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-9]+/z, \\[x[0-9]+\\]\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0\\n\\trev\\t\\1, \\1} } } */"}, {"sha": "defee421f9f859810514cd988aefd47bf3601781", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_4_run.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_4_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_4.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+\n+  vnx4si v = foo (a, b);\n+  int expected[] = { 3, 2, 3, 2, 3, 2, b, a };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "e7fbdd1a2aaff0c033f4b47d819e7a6614349239", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 3: Trailing same element.  */ \n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b, int c)\n+{\n+  return (vnx4si) { a, b, c, c, c, c, c, c };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        mov     z0.s, w2\n+        ptrue   p0.s, vl8\n+        insr    z0.s, w1\n+        insr    z0.s, w0\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w2\\n.*\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "ba91d6fec09c713d5b5b026f7960447acb84bfba", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_5_run.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_5_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_5.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+  int c = 12;\n+\n+  vnx4si v = foo (a, b, c);\n+  int expected[] = { a, b, c, c, c, c, c, c };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "f6f3da5958db01947effb9b84860b4a79a6ab3ec", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_6.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 3: Trailing same element.  */ \n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b, int c)\n+{\n+  return (vnx4si) { c, c, c, c, c, c, b, a };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        mov     z0.s, w2\n+        ptrue   p0.s, vl8\n+        insr    z0.s, w1\n+        insr    z0.s, w0\n+        rev     z0.s, z0.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w2\\n.*\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0\\n\\trev\\t\\1, \\1} } } */"}, {"sha": "802b28f98e05b8f14a766bc2226f67ea1284d0b2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_6_run.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_6_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_6.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+  int c = 12;\n+\n+  vnx4si v = foo (a, b, c);\n+  int expected[] = { c, c, c, c, c, c, b, a };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "e3104a35f1387cffc92554d67265a5afd9b79134", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 5.1: All elements.  */ \n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b, int c, int d, int e, int f, int g, int h)\n+{\n+  return (vnx4si) { a, b, c, d, e, f, g, h };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        mov     z0.s, w7\n+        ptrue   p0.s, vl8\n+        insr    z0.s, w6\n+        insr    z0.s, w5\n+        insr    z0.s, w4\n+        insr    z0.s, w3\n+        insr    z0.s, w2\n+        insr    z0.s, w1\n+        insr    z0.s, w0\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w7\\n.*\\tinsr\\t\\1, w6\\n\\tinsr\\t\\1, w5\\n\\tinsr\\t\\1, w4\\n\\tinsr\\t\\1, w3\\n\\tinsr\\t\\1, w2\\n\\tinsr\\t\\1, w1\\n\\tinsr\\t\\1, w0} } } */"}, {"sha": "61fe28508310b0e9e3f72ce5e31de4d65d1610ee", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_7_run.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_7_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_7.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+  int c = 12;\n+  int d = 13;\n+  int e = 14;\n+  int f = 15;\n+  int g = 16;\n+  int h = 17;\n+\n+  vnx4si v = foo (a, b, c, d, e, f, g, h);\n+  int expected[] = { a, b, c, d, e, f, g, h };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "7ff3e0849cc5294dea3f50c1fa315f2e3bbd7202", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 5.2: Interleaved elements and constants.  */ \n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b, int c, int d)\n+{\n+  return (vnx4si) { a, 1, b, 2, c, 3, d, 4 }; \n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        ptrue   p0.s, vl8\n+        mov     z0.s, w3\n+        adrp    x3, .LANCHOR0\n+        insr    z0.s, w2\n+        add     x3, x3, :lo12:.LANCHOR0\n+        insr    z0.s, w1\n+        ld1w    z1.s, p0/z, [x3]\n+        insr    z0.s, w0\n+        zip1    z0.s, z0.s, z1.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w3\\n\\tadrp\\t(x[0-9]+), \\.LANCHOR0\\n\\tinsr\\t\\1, w2\\n\\tadd\\t\\2, \\2, :lo12:\\.LANCHOR0\\n\\tinsr\\t\\1, w1\\n\\tld1w\\t(z[0-9]+\\.s), p[0-9]+/z, \\[\\2\\]\\n\\tinsr\\t\\1, w0\\n\\tzip1\\t\\1, \\1, \\3} } } */"}, {"sha": "24a0a6e0673ed7da25c647e408ffcb183ec655f6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_8_run.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_8_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_8.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+  int c = 12;\n+  int d = 13;\n+\n+  vnx4si v = foo (a, b, c, d);\n+  int expected[] = { a, 1, b, 2, c, 3, d, 4 };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "4d3c59b3bf806c943bb27cb43794e20316577307", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_9.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -fno-schedule-insns -msve-vector-bits=256 --save-temps\" } */\n+\n+/* Case 5.3: Repeated elements.  */ \n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+\n+__attribute__((noipa))\n+vnx4si foo(int a, int b)\n+{\n+  return (vnx4si) { a, b, a, b, a, b, a, b };\n+}\n+\n+/*\n+foo:\n+.LFB0:\n+        .cfi_startproc\n+        mov     z0.s, w0\n+        mov     z1.s, w1\n+        ptrue   p0.s, vl8\n+        zip1    z0.s, z0.s, z1.s\n+        ret\n+*/\n+\n+/* { dg-final { scan-assembler {\\tmov\\t(z[0-9]+\\.s), w0\\n\\tmov\\t(z[0-9]+\\.s), w1\\n.*\\tzip1\\t\\1, \\1, \\2} } } */"}, {"sha": "636ae3b8b48c198d76561579afb13f9fb96db2ea", "filename": "gcc/testsuite/gcc.target/aarch64/sve/init_9_run.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Finit_9_run.c?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include \"init_9.c\"\n+\n+int main()\n+{\n+  int a = 10;\n+  int b = 11;\n+\n+  vnx4si v = foo (a, b);\n+  int expected[] = { a, b, a, b, a, b, a, b };\n+\n+  for (int i = 0; i < 8; i++)\n+    if (v[i] != expected[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "9f95b01bc3b2ef233e3026a95c1de22bf13e903e", "filename": "gcc/vector-builder.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fvector-builder.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0afad0d212b3ff213b393728e018caf2daa526/gcc%2Fvector-builder.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvector-builder.h?ref=3a0afad0d212b3ff213b393728e018caf2daa526", "patch": "@@ -96,6 +96,7 @@ class vector_builder : public auto_vec<T, 32>\n   unsigned int encoded_nelts () const;\n   bool encoded_full_vector_p () const;\n   T elt (unsigned int) const;\n+  unsigned int count_dups (int, int, int) const;\n \n   bool operator == (const Derived &) const;\n   bool operator != (const Derived &x) const { return !operator == (x); }\n@@ -223,6 +224,23 @@ vector_builder<T, Derived>::elt (unsigned int i) const\n \t\t\t\t derived ()->step (prev, final));\n }\n \n+/* Return the number of leading duplicate elements in the range\n+   [START:END:STEP].  The value is always at least 1.  */\n+\n+template<typename T, typename Derived>\n+unsigned int\n+vector_builder<T, Derived>::count_dups (int start, int end, int step) const\n+{\n+  gcc_assert ((end - start) % step == 0);\n+\n+  unsigned int ndups = 1;\n+  for (int i = start + step;\n+       i != end && derived ()->equal_p (elt (i), elt (start));\n+       i += step)\n+    ndups++;\n+  return ndups;\n+}\n+\n /* Change the encoding to NPATTERNS patterns of NELTS_PER_PATTERN each,\n    but without changing the underlying vector.  */\n "}]}