{"sha": "0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "node_id": "C_kwDOANBUbNoAKDA4ODhkNmJiZTk3ZTEwZGUwZTYyNGY0YWI0NmFjYzI3NmU1ZWUxZDc", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-24T06:38:18Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-24T06:38:18Z"}, "message": "middle-end: Convert bitclear <imm> + cmp<cc> #0 into cm<cc2> <imm2>\n\nThis optimizes the case where a mask Y which fulfills ~Y + 1 == pow2 is used to\nclear a some bits and then compared against 0 into one without the masking and\na compare against a different bit immediate.\n\nWe can do this for all unsigned compares and for signed we can do it for\ncomparisons of EQ and NE:\n\n(x & (~255)) == 0 becomes x <= 255. Which for leaves it to the target to\noptimally deal with the comparison.\n\nThis transformation has to be done in the mid-end because in RTL you don't have\nthe signs of the comparison operands and if the target needs an immediate this\nshould be floated outside of the loop.\n\nThe RTL loop invariant hoisting is done before split1.\n\ni.e.\n\nvoid fun1(int32_t *x, int n)\n{\n    for (int i = 0; i < (n & -16); i++)\n      x[i] = (x[i]&(~255)) == 0;\n}\n\nnow generates:\n\n.L3:\n        ldr     q0, [x0]\n        cmhs    v0.4s, v2.4s, v0.4s\n        and     v0.16b, v1.16b, v0.16b\n        str     q0, [x0], 16\n        cmp     x0, x1\n        bne     .L3\n\nand floats the immediate out of the loop.\n\ninstead of:\n\n.L3:\n        ldr     q0, [x0]\n        bic     v0.4s, #255\n        cmeq    v0.4s, v0.4s, #0\n        and     v0.16b, v1.16b, v0.16b\n        str     q0, [x0], 16\n        cmp     x0, x1\n        bne     .L3\n\nIn order to not break IVopts and CSE I have added a\nrequirement for the scalar version to be single use.\n\ngcc/ChangeLog:\n\n\t* tree.c (bitmask_inv_cst_vector_p): New.\n\t* tree.h (bitmask_inv_cst_vector_p): New.\n\t* match.pd: Use it in new bitmask compare pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/bic-bitmask-10.c: New test.\n\t* gcc.dg/bic-bitmask-11.c: New test.\n\t* gcc.dg/bic-bitmask-12.c: New test.\n\t* gcc.dg/bic-bitmask-13.c: New test.\n\t* gcc.dg/bic-bitmask-14.c: New test.\n\t* gcc.dg/bic-bitmask-15.c: New test.\n\t* gcc.dg/bic-bitmask-16.c: New test.\n\t* gcc.dg/bic-bitmask-17.c: New test.\n\t* gcc.dg/bic-bitmask-18.c: New test.\n\t* gcc.dg/bic-bitmask-19.c: New test.\n\t* gcc.dg/bic-bitmask-2.c: New test.\n\t* gcc.dg/bic-bitmask-20.c: New test.\n\t* gcc.dg/bic-bitmask-21.c: New test.\n\t* gcc.dg/bic-bitmask-22.c: New test.\n\t* gcc.dg/bic-bitmask-23.c: New test.\n\t* gcc.dg/bic-bitmask-3.c: New test.\n\t* gcc.dg/bic-bitmask-4.c: New test.\n\t* gcc.dg/bic-bitmask-5.c: New test.\n\t* gcc.dg/bic-bitmask-6.c: New test.\n\t* gcc.dg/bic-bitmask-7.c: New test.\n\t* gcc.dg/bic-bitmask-8.c: New test.\n\t* gcc.dg/bic-bitmask-9.c: New test.\n\t* gcc.dg/bic-bitmask.h: New test.\n\t* gcc.target/aarch64/bic-bitmask-1.c: New test.", "tree": {"sha": "73d71b61ff24ac2ea345b2e637fd82daa88271ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73d71b61ff24ac2ea345b2e637fd82daa88271ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71d019f63ed5d3fdb34579023bafa4dcf323f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71d019f63ed5d3fdb34579023bafa4dcf323f2c"}], "stats": {"total": 659, "additions": 658, "deletions": 1}, "files": [{"sha": "3e54e2cf5a6dc38aabc495ccfdb2e44efd7427d0", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -38,7 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n    uniform_integer_cst_p\n    HONOR_NANS\n    uniform_vector_p\n-   expand_vec_cmp_expr_p)\n+   expand_vec_cmp_expr_p\n+   bitmask_inv_cst_vector_p)\n \n /* Operator lists.  */\n (define_operator_list tcc_comparison\n@@ -5207,6 +5208,24 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       (eqcmp (bit_and @1 { wide_int_to_tree (ty, mask - rhs); })\n \t     { build_zero_cst (ty); }))))))\n \n+/* Transform comparisons of the form (X & Y) CMP 0 to X CMP2 Z\n+   where ~Y + 1 == pow2 and Z = ~Y.  */\n+(for cst (VECTOR_CST INTEGER_CST)\n+ (for cmp (le eq ne ge gt)\n+      icmp (le le gt le gt)\n+ (simplify\n+  (cmp (bit_and:c@2 @0 cst@1) integer_zerop)\n+   (with { tree csts = bitmask_inv_cst_vector_p (@1); }\n+     (switch\n+      (if (csts && TYPE_UNSIGNED (TREE_TYPE (@1))\n+\t   && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n+       (icmp @0 { csts; }))\n+      (if (csts && !TYPE_UNSIGNED (TREE_TYPE (@1))\n+\t   && (cmp == EQ_EXPR || cmp == NE_EXPR)\n+\t   && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n+       (with { tree utype = unsigned_type_for (TREE_TYPE (@1)); }\n+\t(icmp (convert:utype @0) { csts; }))))))))\n+\n /* -A CMP -B -> B CMP A.  */\n (for cmp (tcc_comparison)\n      scmp (swapped_tcc_comparison)"}, {"sha": "0d0416028ebe5d5d16c03cfec357b3aad31703c7", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-10.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-10.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+#define TYPE int32_t\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump {<=\\s*.+\\{ 255,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967290,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "0e589c96290286f02cddc27f33f25f0f7b3bb028", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-11.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-11.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) != 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) != 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump {>\\s*.+\\{ 255,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967290,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "50eb563f3b1a556019a33b4c23c588215268976d", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-12.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+typedef unsigned int v4si __attribute__ ((vector_size (16)));\n+\n+__attribute__((noinline, noipa))\n+void fun(v4si *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+/* { dg-final { scan-tree-dump {<=\\s*.+\\{ 255,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967290,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */"}, {"sha": "bac86c2cfcebb4fd83eef1ea276026af97bcb096", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-13.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-13.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {<=\\s* 255} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967040} dce7 { target vect_int } } } */\n+"}, {"sha": "ec3bd6a7e04de93e60b0a606ec4cabf5bb90af22", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-14.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-14.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {<=\\s* 255} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967040} dce7 { target vect_int } } } */\n+"}, {"sha": "8bdf1ea4eb2e5117c6d84b0d6cdf95798c4b8e2c", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-15.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-15.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) >= 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) >= 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {=\\s* 1} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967040} dce7 { target vect_int } } } */\n+"}, {"sha": "cfea925b59104ad5c84beea90cea5e6ec9b1e787", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-16.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) > 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) > 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {>\\s* 255} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967040} dce7 { target vect_int } } } */\n+"}, {"sha": "86873b97f27c5fe6e1495ac0cf3471b7782a8067", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-17.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-17.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) <= 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) <= 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {<=\\s* 255} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967040} dce7 { target vect_int } } } */\n+"}, {"sha": "9d11b3bf4a4f04f572d47d710499d97ea0b11936", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-18.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-18.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) < 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) < 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {= 0} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "c4620dfaad3b8fdbb0ba214bbd69b975f37c68db", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-19.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-19.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) != 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) != 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {>\\s* 1} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967294} dce7 { target vect_int } } } */\n+"}, {"sha": "59ba9a414ae6455e5b4934861c66150207718b89", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-2.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {<=\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "a114122e075eab6be651b4e0954f084a2fd427c9", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-20.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-20.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~5)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~5)) == 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-not {<=\\s* 4294967289} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump {&\\s* 4294967290} dce7 { target vect_int } } } */\n+"}, {"sha": "bd12a58da1ed5868b78b18742ed9d69289e58a37", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-21.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-21.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+#define TYPE int32_t\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump {<=\\s* 255} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967290} dce7 { target vect_int } } } */\n+"}, {"sha": "a9f0867b5cbd4cb35372d0f10d16bf64517ff5f4", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-22.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-22.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) != 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O0\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) != 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump {>\\s* 255} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s* 4294967290} dce7 { target vect_int } } } */\n+"}, {"sha": "b41651b962f12f0926783ce336b427fd6d07831e", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-23.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-23.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+typedef unsigned int v4si __attribute__ ((vector_size (16)));\n+\n+__attribute__((noinline, noipa))\n+v4si fun(v4si x)\n+{\n+    v4si mask = { 255, 15, 1, 0xFFFF };\n+    v4si zeros = {0};\n+    return (x & ~mask) == zeros;\n+}\n+\n+/* { dg-final { scan-tree-dump {<=\\s*.+\\{ 255, 15, 1, 65535 \\}} dce7 { target vect_int } } } */"}, {"sha": "59ba9a414ae6455e5b4934861c66150207718b89", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-3.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) == 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {<=\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "7e0614d458ca80e3abb847108a419e1d183495a2", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-4.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) >= 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) >= 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {=\\s*.+\\{ 1,.+\\}} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "e71b17d12727e943726a163240da4914beb181f1", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-5.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) > 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) > 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {>\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "a48a226efc15ca6d56146e8fe7f4e6ff8bfaa632", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-6.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-6.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) <= 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~255)) <= 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {<=\\s*.+\\{ 255,.+\\}} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967040,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "bc49f299aac9e4eb664661050ad1153edccfb6b3", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-7.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) < 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) < 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {__builtin_memset} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "cd06e0ce7be1bca568c76532575fded1e13e979e", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-8.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) != 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~1)) != 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-times {>\\s*.+\\{ 1,.+\\}} 1 dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {&\\s*.+\\{ 4294967294,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "3d88b74787ad4320d34e424fc08f952f9ff00c98", "filename": "gcc/testsuite/gcc.dg/bic-bitmask-9.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask-9.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps -fdump-tree-dce\" } */\n+\n+#include <stdint.h>\n+\n+__attribute__((noinline, noipa))\n+void fun1(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~5)) == 0;\n+}\n+\n+__attribute__((noinline, noipa, optimize(\"O1\")))\n+void fun2(uint32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (x[i]&(~5)) == 0;\n+}\n+\n+#include \"bic-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-not {<=\\s*.+\\{ 4294967289,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump {&\\s*.+\\{ 4294967290,.+\\}} dce7 { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {\\s+bic\\s+} dce7 { target { aarch64*-*-* } } } } */\n+"}, {"sha": "faf80b974db07a7d817a615cc64a35f1020e9764", "filename": "gcc/testsuite/gcc.dg/bic-bitmask.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbic-bitmask.h?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,43 @@\n+#include <stdio.h>\n+\n+#ifndef N\n+#define N 65\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE uint32_t\n+#endif\n+\n+#ifndef DEBUG\n+#define DEBUG 0\n+#endif\n+\n+#define BASE ((TYPE) -1 < 0 ? -126 : 4)\n+\n+int main ()\n+{\n+  TYPE a[N];\n+  TYPE b[N];\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 13;\n+      b[i] = BASE + i * 13;\n+      if (DEBUG)\n+        printf (\"%d: 0x%x\\n\", i, a[i]);\n+    }\n+\n+  fun1 (a, N);\n+  fun2 (b, N);\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (DEBUG)\n+        printf (\"%d = 0x%x == 0x%x\\n\", i, a[i], b[i]);\n+\n+      if (a[i] != b[i])\n+        __builtin_abort ();\n+    }\n+  return 0;\n+}\n+"}, {"sha": "568c1ffc8bc4148efaeeba7a45a75ecbd3a7a3dd", "filename": "gcc/testsuite/gcc.target/aarch64/bic-bitmask-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbic-bitmask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbic-bitmask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbic-bitmask-1.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t foo (int32x4_t a)\n+{\n+  int32x4_t cst = vdupq_n_s32 (255);\n+  int32x4_t zero = vdupq_n_s32 (0);\n+  return vceqq_s32 (vbicq_s32 (a, cst), zero);\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tbic\\t} { xfail { aarch64*-*-* } } } } */"}, {"sha": "910fb06d6f551947fae235b99a4cd88bd84e3c85", "filename": "gcc/tree.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -10273,6 +10273,59 @@ uniform_integer_cst_p (tree t)\n   return NULL_TREE;\n }\n \n+/* Checks to see if T is a constant or a constant vector and if each element E\n+   adheres to ~E + 1 == pow2 then return ~E otherwise NULL_TREE.  */\n+\n+tree\n+bitmask_inv_cst_vector_p (tree t)\n+{\n+\n+  tree_code code = TREE_CODE (t);\n+  tree type = TREE_TYPE (t);\n+\n+  if (!INTEGRAL_TYPE_P (type)\n+      && !VECTOR_INTEGER_TYPE_P (type))\n+    return NULL_TREE;\n+\n+  unsigned HOST_WIDE_INT nelts = 1;\n+  tree cst;\n+  unsigned int idx = 0;\n+  bool uniform = uniform_integer_cst_p (t);\n+  tree newtype = unsigned_type_for (type);\n+  tree_vector_builder builder;\n+  if (code == INTEGER_CST)\n+    cst = t;\n+  else\n+    {\n+      if (!VECTOR_CST_NELTS (t).is_constant (&nelts))\n+\treturn NULL_TREE;\n+\n+      cst = vector_cst_elt (t, 0);\n+      builder.new_vector (newtype, nelts, 1);\n+    }\n+\n+  tree ty = unsigned_type_for (TREE_TYPE (cst));\n+\n+  do {\n+    if (idx > 0)\n+      cst = vector_cst_elt (t, idx);\n+    wide_int icst = wi::to_wide (cst);\n+    wide_int inv =  wi::bit_not (icst);\n+    icst = wi::add (1, inv);\n+    if (wi::popcount (icst) != 1)\n+      return NULL_TREE;\n+\n+    tree newcst = wide_int_to_tree (ty, inv);\n+\n+    if (uniform)\n+      return build_uniform_cst (newtype, newcst);\n+\n+    builder.quick_push (newcst);\n+  } while (++idx < nelts);\n+\n+  return builder.build ();\n+}\n+\n /* If VECTOR_CST T has a single nonzero element, return the index of that\n    element, otherwise return -1.  */\n "}, {"sha": "f0e72b55abeb1814775424197a5809154866ae83", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "patch": "@@ -4922,6 +4922,11 @@ extern bool integer_minus_onep (const_tree);\n \n extern bool integer_pow2p (const_tree);\n \n+/* Checks to see if T is a constant or a constant vector and if each element E\n+   adheres to ~E + 1 == pow2 then return ~E otherwise NULL_TREE.  */\n+\n+extern tree bitmask_inv_cst_vector_p (tree);\n+\n /* integer_nonzerop (tree x) is nonzero if X is an integer constant\n    with a nonzero value.  */\n "}]}