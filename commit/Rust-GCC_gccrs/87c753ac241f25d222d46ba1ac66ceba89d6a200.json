{"sha": "87c753ac241f25d222d46ba1ac66ceba89d6a200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjNzUzYWMyNDFmMjVkMjIyZDQ2YmExYWM2NmNlYmE4OWQ2YTIwMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-08-21T16:42:49Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-08-23T15:40:34Z"}, "message": "x86: Add target(\"general-regs-only\") function attribute\n\ngcc/\n\n\tPR target/96744\n\t* config/i386/i386-options.c (IX86_ATTR_IX86_YES): New.\n\t(IX86_ATTR_IX86_NO): Likewise.\n\t(ix86_opt_type): Add ix86_opt_ix86_yes and ix86_opt_ix86_no.\n\t(ix86_valid_target_attribute_inner_p): Handle general-regs-only,\n\tix86_opt_ix86_yes and ix86_opt_ix86_no.\n\t(ix86_option_override_internal): Check opts->x_ix86_target_flags\n\tinstead of opts->x_ix86_target_flags.\n\t* doc/extend.texi: Document target(\"general-regs-only\") function\n\tattribute.\n\ngcc/testsuite/\n\n\tPR target/96744\n\t* gcc.target/i386/pr96744-1.c: New test.\n\t* gcc.target/i386/pr96744-2.c: Likewise.\n\t* gcc.target/i386/pr96744-3a.c: Likewise.\n\t* gcc.target/i386/pr96744-3b.c: Likewise.\n\t* gcc.target/i386/pr96744-4.c: Likewise.\n\t* gcc.target/i386/pr96744-5.c: Likewise.\n\t* gcc.target/i386/pr96744-6.c: Likewise.\n\t* gcc.target/i386/pr96744-7.c: Likewise.\n\t* gcc.target/i386/pr96744-8a.c: Likewise.\n\t* gcc.target/i386/pr96744-8b.c: Likewise.\n\t* gcc.target/i386/pr96744-9.c: Likewise.", "tree": {"sha": "c87a9caae03b9ba14cb297532b46ea874c186275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c87a9caae03b9ba14cb297532b46ea874c186275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87c753ac241f25d222d46ba1ac66ceba89d6a200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c753ac241f25d222d46ba1ac66ceba89d6a200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c753ac241f25d222d46ba1ac66ceba89d6a200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c753ac241f25d222d46ba1ac66ceba89d6a200/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc724d6d2073c7f2d1ea4497b4f9714c9b7ec3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc724d6d2073c7f2d1ea4497b4f9714c9b7ec3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc724d6d2073c7f2d1ea4497b4f9714c9b7ec3c"}], "stats": {"total": 243, "additions": 240, "deletions": 3}, "files": [{"sha": "e0fc68c27bf3ead8a57b46ad6de48d5fb87a02de", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -922,12 +922,18 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n #define IX86_ATTR_ENUM(S,O)  { S, sizeof (S)-1, ix86_opt_enum, O, 0 }\n #define IX86_ATTR_YES(S,O,M) { S, sizeof (S)-1, ix86_opt_yes, O, M }\n #define IX86_ATTR_NO(S,O,M)  { S, sizeof (S)-1, ix86_opt_no,  O, M }\n+#define IX86_ATTR_IX86_YES(S,O,M) \\\n+  { S, sizeof (S)-1, ix86_opt_ix86_yes, O, M }\n+#define IX86_ATTR_IX86_NO(S,O,M) \\\n+  { S, sizeof (S)-1, ix86_opt_ix86_no,  O, M }\n \n   enum ix86_opt_type\n   {\n     ix86_opt_unknown,\n     ix86_opt_yes,\n     ix86_opt_no,\n+    ix86_opt_ix86_yes,\n+    ix86_opt_ix86_no,\n     ix86_opt_str,\n     ix86_opt_enum,\n     ix86_opt_isa\n@@ -1062,6 +1068,10 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_YES (\"recip\",\n \t\t   OPT_mrecip,\n \t\t   MASK_RECIP),\n+\n+    IX86_ATTR_IX86_YES (\"general-regs-only\",\n+\t\t\tOPT_mgeneral_regs_only,\n+\t\t\tOPTION_MASK_GENERAL_REGS_ONLY),\n   };\n \n   location_t loc\n@@ -1175,6 +1185,33 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n \t    opts->x_target_flags &= ~mask;\n \t}\n \n+      else if (type == ix86_opt_ix86_yes || type == ix86_opt_ix86_no)\n+\t{\n+\t  if (mask == OPTION_MASK_GENERAL_REGS_ONLY)\n+\t    {\n+\t      if (type != ix86_opt_ix86_yes)\n+\t\tgcc_unreachable ();\n+\n+\t      opts->x_ix86_target_flags |= mask;\n+\n+\t      struct cl_decoded_option decoded;\n+\t      generate_option (opt, NULL, opt_set_p, CL_TARGET,\n+\t\t\t       &decoded);\n+\t      ix86_handle_option (opts, opts_set, &decoded,\n+\t\t\t\t  input_location);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (type == ix86_opt_ix86_no)\n+\t\topt_set_p = !opt_set_p;\n+\n+\t      if (opt_set_p)\n+\t\topts->x_ix86_target_flags |= mask;\n+\t      else\n+\t\topts->x_ix86_target_flags &= ~mask;\n+\t    }\n+\t}\n+\n       else if (type == ix86_opt_str)\n \t{\n \t  if (p_strings[opt])\n@@ -2260,9 +2297,10 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PKU))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PKU;\n \n-\t/* Don't enable x87 instructions if only\n-\t   general registers are allowed.  */\n-\tif (!(opts_set->x_ix86_target_flags & OPTION_MASK_GENERAL_REGS_ONLY)\n+\t/* Don't enable x87 instructions if only general registers are\n+\t   allowed by target(\"general-regs-only\") function attribute or\n+\t   -mgeneral-regs-only.  */\n+\tif (!(opts->x_ix86_target_flags & OPTION_MASK_GENERAL_REGS_ONLY)\n \t    && !(opts_set->x_target_flags & MASK_80387))\n \t  {\n \t    if (((processor_alias_table[i].flags & PTA_NO_80387) != 0))"}, {"sha": "2bb9b2f72f5a25b0d218b874abfac554f16b61ab", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -6656,6 +6656,10 @@ Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS\n instructions followed an additional Newton-Raphson step instead of\n doing a floating-point division.\n \n+@item general-regs-only\n+@cindex @code{target(\"general-regs-only\")} function attribute, x86\n+Generate code which uses only the general registers.\n+\n @item arch=@var{ARCH}\n @cindex @code{target(\"arch=@var{ARCH}\")} function attribute, x86\n Specify the architecture to generate code for in compiling the function."}, {"sha": "46f3ce6ddd41e0921650d99cdc62589e1ac995de", "filename": "gcc/testsuite/gcc.target/i386/pr96744-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-1.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse2\" } */\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int32x2_t test (int32x2_t a, int32x2_t b)\n+{ /* { dg-error \"SSE register return with SSE disabled\" } */\n+  return a + b;\n+}"}, {"sha": "4a436d8ef0452259d171e641a246cb5583116a9f", "filename": "gcc/testsuite/gcc.target/i386/pr96744-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-2.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-mmmx\" } */\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int32x2_t\n+test (int32x2_t a, int32x2_t b) /* { dg-warning \"MMX vector argument without MMX enabled\" } */\n+{ /* { dg-warning \"MMX vector return without MMX enabled\" } */\n+  return a + b;\n+}"}, {"sha": "79191544eb4dde313b3a417c3ce97d7bdad4f7ce", "filename": "gcc/testsuite/gcc.target/i386/pr96744-3a.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-3a.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2\" } */\n+\n+typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n+extern int32x4_t c;\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+void\n+test (int32x4_t a, int32x4_t b) /* { dg-warning \"SSE vector argument without SSE enabled\" } */\n+{\n+  c = a + b;\n+}"}, {"sha": "389b5cf989780577d0a36f3445baf5d76d6cbb30", "filename": "gcc/testsuite/gcc.target/i386/pr96744-3b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-3b.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2\" } */\n+\n+typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n+extern int32x4_t c;\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"general-regs-only\")\n+\n+void\n+test (int32x4_t a, int32x4_t b) /* { dg-warning \"SSE vector argument without SSE enabled\" } */\n+{\n+  c = a + b;\n+}\n+\n+#pragma GCC pop_options"}, {"sha": "005329f95e9f7aba0c1353c2526025149455c15b", "filename": "gcc/testsuite/gcc.target/i386/pr96744-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-4.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-msse2\" } */\n+\n+typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int32x4_t\n+test (int32x4_t a, int32x4_t b) /* { dg-warning \"SSE vector argument without SSE enabled\" } */\n+{ /* { dg-warning \"SSE vector return without SSE enabled\" } */\n+  return a + b;\n+}"}, {"sha": "18f2132aa27718a2b310a4bf04f732837e0c5445", "filename": "gcc/testsuite/gcc.target/i386/pr96744-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-5.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse2\" } */\n+\n+#include <stdarg.h>\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int\n+test (int i, ...)\n+{\n+  va_list argp;\n+  va_start (argp, i);\n+  int32x2_t x = (int32x2_t) {0, 1};\n+  x += va_arg (argp, int32x2_t); /* { dg-error \"SSE register argument with SSE disabled\" } */\n+  return x[0] + x[1];\n+}"}, {"sha": "38a3cc7fa92208907ddac3e03121bb2f6b70749a", "filename": "gcc/testsuite/gcc.target/i386/pr96744-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-6.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse2 -mfpmath=sse\" } */\n+\n+extern float a, b, c;\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+void\n+foo (void)\n+{\n+  c = a * b; /* { dg-error \"SSE register return with SSE disabled\" } */\n+}"}, {"sha": "5f55b6cbd3397509193e95fc373bf287f8ddf67c", "filename": "gcc/testsuite/gcc.target/i386/pr96744-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-7.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ia32 && { ! *-*-darwin* } } } } */\n+/* { dg-options \"-msse2\" } */\n+\n+extern float a, b, c;\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+void\n+foo (void)\n+{\n+  c = a * b;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mulss\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]__mulsf3\" } } */"}, {"sha": "d264e1e01d454dd93e908342eef9a0e74acb8c22", "filename": "gcc/testsuite/gcc.target/i386/pr96744-8a.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-8a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-8a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-8a.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort ();\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int\n+dec (int a, int b)\n+{\n+  return a + b;\n+}\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int\n+cal (int a, int b)\n+{\n+  int sum1 = a * b;\n+  int sum2 = a / b;\n+  int sum = dec (sum1, sum2);\n+  return a + b + sum + sum1 + sum2;\n+}\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int\n+main (int argc, char **argv)\n+{\n+  int ret = cal (2, 1);\n+\n+  if (ret != 11)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "30e763d932e91a3e9670dada155fc4668ac3307d", "filename": "gcc/testsuite/gcc.target/i386/pr96744-8b.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-8b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-8b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-8b.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"general-regs-only\")\n+\n+extern void abort ();\n+\n+int\n+dec (int a, int b)\n+{\n+  return a + b;\n+}\n+\n+int\n+cal (int a, int b)\n+{\n+  int sum1 = a * b;\n+  int sum2 = a / b;\n+  int sum = dec (sum1, sum2);\n+  return a + b + sum + sum1 + sum2;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int ret = cal (2, 1);\n+\n+  if (ret != 11)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+#pragma GCC pop_options"}, {"sha": "196e86f08e97d8624d45378164b8125fdb73e0b1", "filename": "gcc/testsuite/gcc.target/i386/pr96744-9.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c753ac241f25d222d46ba1ac66ceba89d6a200/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96744-9.c?ref=87c753ac241f25d222d46ba1ac66ceba89d6a200", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort ();\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int\n+cal (int a, int b)\n+{\n+  int sum = a + b;\n+  int sum1 = a * b;\n+  return (a + b + sum + sum1);\n+}\n+\n+__attribute__((__target__(\"general-regs-only\")))\n+int\n+main (int argc, char **argv)\n+{\n+  int ret = cal (1, 2);\n+\n+  if (ret != 8)\n+    abort ();\n+\n+  return 0;\n+}"}]}