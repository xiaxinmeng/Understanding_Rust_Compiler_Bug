{"sha": "0e50b62468123005202598f2a88b59f9ca695eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1MGI2MjQ2ODEyMzAwNTIwMjU5OGYyYTg4YjU5ZjljYTY5NWViOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-05-19T13:18:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-05-19T13:18:01Z"}, "message": "Replace line_map union with C++ class hierarchy\n\ngcc/ChangeLog:\n\t* diagnostic.c (diagnostic_report_current_module): Strengthen\n\tlocal \"new_map\" from const line_map * to\n\tconst line_map_ordinary *.\n\t* genmatch.c (error_cb): Likewise for local \"map\".\n\t(output_line_directive): Likewise for local \"map\".\n\t* input.c (expand_location_1): Likewise for local \"map\".\n\tPass NULL rather than &map to\n\tlinemap_unwind_to_first_non_reserved_loc, since the value is never\n\tread from there, and the value written back not read from here.\n\t(is_location_from_builtin_token): Strengthen local \"map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t(dump_location_info): Strengthen locals \"map\" from\n\tline_map *, one to const line_map_ordinary *, the other\n\tto const line_map_macro *.\n\t* tree-diagnostic.c (loc_map_pair): Strengthen field \"map\" from\n\tconst line_map * to const line_map_macro *.\n\t(maybe_unwind_expanded_macro_loc): Add a call to\n\tlinemap_check_macro when writing to the \"map\" field of the\n\tloc_map_pair.\n\tIntroduce local const line_map_ordinary * \"ord_map\", using it in\n\tplace of \"map\" in the part of the function where we know we have\n\tan ordinary map.  Strengthen local \"m\" from const line_map * to\n\tconst line_map_ordinary *.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/trans.c (Sloc_to_locus1): Strenghthen local \"map\"\n\tfrom line_map * to line_map_ordinary *.\n\ngcc/c-family/ChangeLog:\n\t* c-common.h (fe_file_change): Strengthen param from\n\tconst line_map * to const line_map_ordinary *.\n\t(pp_file_change): Likewise.\n\t* c-lex.c (fe_file_change): Likewise.\n\t(cb_define): Use linemap_check_ordinary when invoking\n\tSOURCE_LINE.\n\t(cb_undef): Likewise.\n\t* c-opts.c (c_finish_options): Use linemap_check_ordinary when\n\tinvoking cb_file_change.\n\t(c_finish_options): Likewise.\n\t(push_command_line_include): Likewise.\n\t(cb_file_change): Strengthen param \"new_map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t* c-ppoutput.c (cb_define): Likewise for local \"map\".\n\t(pp_file_change): Likewise for param \"map\" and local \"from\".\n\ngcc/fortran/ChangeLog:\n\t* cpp.c (maybe_print_line): Strengthen local \"map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t(cb_file_change): Likewise for param \"map\" and local \"from\".\n\t(cb_line_change): Likewise for local \"map\".\n\nlibcpp/ChangeLog:\n\t* directives.c (do_line): Strengthen local \"map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t(do_linemarker): Likewise.\n\t(_cpp_do_file_change): Assert that we're not dealing with\n\ta macro map.  Introduce local \"ord_map\" via a call to\n\tlinemap_check_ordinary, guarded within the check for\n\tnon-NULL.  Use it for typesafety.\n\t* files.c (cpp_make_system_header): Strengthen local \"map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t* include/cpplib.h (struct cpp_callbacks): Likewise for second\n\tparameter of \"file_change\" callback.\n\t* include/line-map.h (struct line_map): Convert from a struct\n\tcontaining a union to a base class.\n\t(struct line_map_ordinary): Convert to a subclass of line_map.\n\t(struct line_map_macro): Likewise.\n\t(linemap_check_ordinary): Strengthen return type from line_map *\n\tto line_map_ordinary *, and add a const-variant.\n\t(linemap_check_macro): New pair of functions.\n\t(ORDINARY_MAP_STARTING_LINE_NUMBER): Strengthen param from\n\tconst line_map * to const line_map_ordinary *, eliminating call\n\tto linemap_check_ordinary.  Likewise for the non-const variant.\n\t(ORDINARY_MAP_INCLUDER_FILE_INDEX): Likewise.\n\t(ORDINARY_MAP_IN_SYSTEM_HEADER_P): Likewise.\n\t(ORDINARY_MAP_NUMBER_OF_COLUMN_BITS): Likewise.\n\t(ORDINARY_MAP_FILE_NAME): Likewise.\n\t(MACRO_MAP_MACRO): Strengthen param from const line_map * to\n\tconst line_map_macro *.  Likewise for the non-const variant.\n\t(MACRO_MAP_NUM_MACRO_TOKENS): Likewise.\n\t(MACRO_MAP_LOCATIONS): Likewise.\n\t(MACRO_MAP_EXPANSION_POINT_LOCATION): Likewise.\n\t(struct maps_info): Replace with...\n\t(struct maps_info_ordinary):...this and...\n\t(struct maps_info_macro): ...this.\n\t(struct line_maps): Convert fields \"info_ordinary\" and\n\t\"info_macro\" to the above new structs.\n\t(LINEMAPS_MAP_INFO): Delete both functions.\n\t(LINEMAPS_MAPS): Likewise.\n\t(LINEMAPS_ALLOCATED): Rewrite both variants to avoid using\n\tLINEMAPS_MAP_INFO.\n\t(LINEMAPS_USED): Likewise.\n\t(LINEMAPS_CACHE): Likewise.\n\t(LINEMAPS_MAP_AT): Likewise.\n\t(LINEMAPS_ORDINARY_MAPS): Strengthen return type from line_map *\n\tto line_map_ordinary *.\n\t(LINEMAPS_ORDINARY_MAP_AT): Likewise.\n\t(LINEMAPS_LAST_ORDINARY_MAP): Likewise.\n\t(LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP): Likewise.\n\t(LINEMAPS_MACRO_MAPS): Strengthen return type from line_map * to\n\tline_map_macro *.\n\t(LINEMAPS_MACRO_MAP_AT): Likewise.\n\t(LINEMAPS_LAST_MACRO_MAP): Likewise.\n\t(LINEMAPS_LAST_ALLOCATED_MACRO_MAP): Likewise.\n\t(linemap_map_get_macro_name): Strengthen param from\n\tconst line_map * to const line_map_macro *.\n\t(SOURCE_LINE): Strengthen first param from const line_map * to\n\tconst line_map_ordinary *, removing call to\n\tlinemap_check_ordinary.\n\t(SOURCE_COLUMN): Likewise.\n\t(LAST_SOURCE_LINE_LOCATION): Likewise.\n\t(LAST_SOURCE_LINE): Strengthen first param from const line_map *\n\tto const line_map_ordinary *.\n\t(LAST_SOURCE_COLUMN): Likewise.\n\t(INCLUDED_FROM): Strengthen return type from line_map * to\n\tline_map_ordinary *., and second param from const line_map *\n\tto const line_map_ordinary *, removing call to\n\tlinemap_check_ordinary.\n\t(MAIN_FILE_P): Strengthen param from const line_map * to\n\tconst line_map_ordinary *, removing call to\n\tlinemap_check_ordinary.\n\t(linemap_position_for_line_and_column): Strengthen param from\n\tconst line_map * to const line_map_ordinary *.\n\t(LINEMAP_FILE): Strengthen param from const line_map * to\n\tconst line_map_ordinary *, removing call to\n\tlinemap_check_ordinary.\n\t(LINEMAP_LINE): Likewise.\n\t(LINEMAP_SYSP): Likewise.\n\t(linemap_resolve_location): Strengthen final param from\n\tconst line_map ** to const line_map_ordinary **.\n\t* internal.h (CPP_INCREMENT_LINE): Likewise for local \"map\".\n\t(linemap_enter_macro): Strengthen return type from\n\tconst line_map * to const line_map_macro *.\n\t(linemap_add_macro_token): Likewise for first param.\n\t* line-map.c (linemap_check_files_exited): Strengthen local \"map\"\n\tfrom const line_map * to const line_map_ordinary *.\n\t(new_linemap): Introduce local \"map_size\" and use it when\n\tcalculating how large the buffer should be.  Rewrite based\n\ton change of info_macro and info_ordinary into distinct types.\n\t(linemap_add): Strengthen locals \"map\" and \"from\" from line_map *\n\tto line_map_ordinary *.\n\t(linemap_enter_macro): Strengthen return type from\n\tconst line_map * to const line_map_macro *, and local \"map\" from\n\tline_map * to line_map_macro *.\n\t(linemap_add_macro_token): Strengthen param \"map\" from\n\tconst line_map * to const line_map_macro *.\n\t(linemap_line_start): Strengthen local \"map\" from line_map * to\n\tline_map_ordinary *.\n\t(linemap_position_for_column): Likewise.\n\t(linemap_position_for_line_and_column): Strengthen first param\n\tfrom const line_map * to const line_map_ordinary *.\n\t(linemap_position_for_loc_and_offset): Strengthen local \"map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t(linemap_ordinary_map_lookup): Likewise for return type and locals\n\t\"cached\" and \"result\".\n\t(linemap_macro_map_lookup): Strengthen return type and locals\n\t\"cached\" and \"result\" from const line_map * to\n\tconst line_map_macro *.\n\t(linemap_macro_map_loc_to_exp_point): Likewise for param \"map\".\n\t(linemap_macro_map_loc_to_def_point): Likewise.\n\t(linemap_macro_map_loc_unwind_toward_spelling): Likewise.\n\t(linemap_get_expansion_line): Strengthen local \"map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t(linemap_get_expansion_filename): Likewise.\n\t(linemap_map_get_macro_name): Strengthen param from\n\tconst line_map * to const line_map_macro *.\n\t(linemap_location_in_system_header_p): Add call to\n\tlinemap_check_ordinary in region guarded by\n\t!linemap_macro_expansion_map_p.  Introduce local \"macro_map\" via\n\tlinemap_check_macro in other region, using it in place of \"map\"\n\tfor typesafety.\n\t(first_map_in_common_1): Add calls to linemap_check_macro.\n\t(trace_include): Strengthen param \"map\" from const line_map * to\n\tconst line_map_ordinary *.\n\t(linemap_macro_loc_to_spelling_point): Strengthen final param from\n\tconst line_map ** to const line_map_ordinary **.  Replace a\n\tC-style cast with a const_cast, and add calls to\n\tlinemap_check_macro and linemap_check_ordinary.\n\t(linemap_macro_loc_to_def_point): Likewise.\n\t(linemap_macro_loc_to_exp_point): Likewise.\n\t(linemap_resolve_location): Strengthen final param from\n\tconst line_map ** to const line_map_ordinary **.\n\t(linemap_unwind_toward_expansion): Introduce local \"macro_map\" via\n\ta checked cast and use it in place of *map.\n\t(linemap_unwind_to_first_non_reserved_loc): Strengthen local\n\t\"map1\" from const line_map * to const line_map_ordinary *.\n\t(linemap_expand_location): Introduce local \"ord_map\" via a checked\n\tcast and use it in place of map.\n\t(linemap_dump): Make local \"map\" const.  Strengthen local\n\t\"includer_map\" from line_map * to const line_map_ordinary *.\n\tIntroduce locals \"ord_map\" and \"macro_map\" via checked casts and\n\tuse them in place of \"map\" for typesafety.\n\t(linemap_dump_location): Strengthen local \"map\" from\n\tconst line_map * to const line_map_ordinary *.\n\t(linemap_get_file_highest_location): Update for elimination of\n\tunion.\n\t(linemap_get_statistics): Strengthen local \"cur_map\" from\n\tline_map * to const line_map_macro *.  Update uses of sizeof to\n\tuse the appropriate line_map subclasses.\n\t* macro.c (_cpp_warn_if_unused_macro): Add call to\n\tlinemap_check_ordinary.\n\t(builtin_macro): Strengthen local \"map\" from const line_map * to\n\tconst line_map_macro *.\n\t(enter_macro_context): Likewise.\n\t(replace_args): Likewise.\n\t(tokens_buff_put_token_to): Likewise for param \"map\".\n\t(tokens_buff_add_token): Likewise.\n\nFrom-SVN: r223365", "tree": {"sha": "e2d180805e415627804e234a9039e9ff18e5130e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2d180805e415627804e234a9039e9ff18e5130e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e50b62468123005202598f2a88b59f9ca695eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e50b62468123005202598f2a88b59f9ca695eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e50b62468123005202598f2a88b59f9ca695eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e50b62468123005202598f2a88b59f9ca695eb8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49c65434500d0bcd66bb0f3cea11b0fe1da6e130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c65434500d0bcd66bb0f3cea11b0fe1da6e130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49c65434500d0bcd66bb0f3cea11b0fe1da6e130"}], "stats": {"total": 958, "additions": 618, "deletions": 340}, "files": [{"sha": "b2374c2a44c396060d90331272d06e3b9e4a293c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -1,3 +1,29 @@\n+2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic.c (diagnostic_report_current_module): Strengthen\n+\tlocal \"new_map\" from const line_map * to\n+\tconst line_map_ordinary *.\n+\t* genmatch.c (error_cb): Likewise for local \"map\".\n+\t(output_line_directive): Likewise for local \"map\".\n+\t* input.c (expand_location_1): Likewise for local \"map\".\n+\tPass NULL rather than &map to\n+\tlinemap_unwind_to_first_non_reserved_loc, since the value is never\n+\tread from there, and the value written back not read from here.\n+\t(is_location_from_builtin_token): Strengthen local \"map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(dump_location_info): Strengthen locals \"map\" from\n+\tline_map *, one to const line_map_ordinary *, the other\n+\tto const line_map_macro *.\n+\t* tree-diagnostic.c (loc_map_pair): Strengthen field \"map\" from\n+\tconst line_map * to const line_map_macro *.\n+\t(maybe_unwind_expanded_macro_loc): Add a call to\n+\tlinemap_check_macro when writing to the \"map\" field of the\n+\tloc_map_pair.\n+\tIntroduce local const line_map_ordinary * \"ord_map\", using it in\n+\tplace of \"map\" in the part of the function where we know we have\n+\tan ordinary map.  Strengthen local \"m\" from const line_map * to\n+\tconst line_map_ordinary *.\n+\n 2015-05-19  Nick Clifton  <nickc@redhat.com>\n \n \tPR target/66156"}, {"sha": "004901ef1701b6601168eebf97a4eba6b7e078b0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -1,3 +1,8 @@\n+2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc-interface/trans.c (Sloc_to_locus1): Strenghthen local \"map\"\n+\tfrom line_map * to line_map_ordinary *.\n+\n 2015-05-12  Jason Merrill  <jason@redhat.com>\n \n \t* sigtramp-vxworks.c: Add space between string literal and macro"}, {"sha": "917a9a6c2820bf62622ac6fe5d9a8ecaa9402b1d", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -9316,7 +9316,7 @@ Sloc_to_locus1 (Source_Ptr Sloc, location_t *locus, bool clear_column)\n       Source_File_Index file = Get_Source_File_Index (Sloc);\n       Logical_Line_Number line = Get_Logical_Line_Number (Sloc);\n       Column_Number column = (clear_column ? 0 : Get_Column_Number (Sloc));\n-      struct line_map *map = LINEMAPS_ORDINARY_MAP_AT (line_table, file - 1);\n+      line_map_ordinary *map = LINEMAPS_ORDINARY_MAP_AT (line_table, file - 1);\n \n       /* We can have zero if pragma Source_Reference is in effect.  */\n       if (line < 1)"}, {"sha": "695bfee464574adac214d0eed3cc9a4e07bcda40", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -1,3 +1,21 @@\n+2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.h (fe_file_change): Strengthen param from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(pp_file_change): Likewise.\n+\t* c-lex.c (fe_file_change): Likewise.\n+\t(cb_define): Use linemap_check_ordinary when invoking\n+\tSOURCE_LINE.\n+\t(cb_undef): Likewise.\n+\t* c-opts.c (c_finish_options): Use linemap_check_ordinary when\n+\tinvoking cb_file_change.\n+\t(c_finish_options): Likewise.\n+\t(push_command_line_include): Likewise.\n+\t(cb_file_change): Strengthen param \"new_map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t* c-ppoutput.c (cb_define): Likewise for local \"map\".\n+\t(pp_file_change): Likewise for param \"map\" and local \"from\".\n+\n 2015-05-19  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* c-common.c (shorten_compare): Use std::swap instead of explicit swaps."}, {"sha": "0eaff052943f7f805935a6276b9401303fe1e5ec", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -1093,13 +1093,13 @@ extern const unsigned char executable_checksum[16];\n extern void builtin_define_std (const char *macro);\n extern void builtin_define_with_value (const char *, const char *, int);\n extern void c_stddef_cpp_builtins (void);\n-extern void fe_file_change (const struct line_map *);\n+extern void fe_file_change (const line_map_ordinary *);\n extern void c_parse_error (const char *, enum cpp_ttype, tree, unsigned char);\n \n /* In c-ppoutput.c  */\n extern void init_pp_output (FILE *);\n extern void preprocess_file (cpp_reader *);\n-extern void pp_file_change (const struct line_map *);\n+extern void pp_file_change (const line_map_ordinary *);\n extern void pp_dir_change (cpp_reader *, const char *);\n extern bool check_missing_format_attribute (tree, tree);\n "}, {"sha": "85775014bf8c172e2e6e0c84e64145603e34f470", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -201,7 +201,7 @@ cb_line_change (cpp_reader * ARG_UNUSED (pfile), const cpp_token *token,\n }\n \n void\n-fe_file_change (const struct line_map *new_map)\n+fe_file_change (const line_map_ordinary *new_map)\n {\n   if (new_map == NULL)\n     return;\n@@ -281,7 +281,7 @@ static void\n cb_define (cpp_reader *pfile, source_location loc, cpp_hashnode *node)\n {\n   const struct line_map *map = linemap_lookup (line_table, loc);\n-  (*debug_hooks->define) (SOURCE_LINE (map, loc),\n+  (*debug_hooks->define) (SOURCE_LINE (linemap_check_ordinary (map), loc),\n \t\t\t  (const char *) cpp_macro_definition (pfile, node));\n }\n \n@@ -291,7 +291,7 @@ cb_undef (cpp_reader * ARG_UNUSED (pfile), source_location loc,\n \t  cpp_hashnode *node)\n {\n   const struct line_map *map = linemap_lookup (line_table, loc);\n-  (*debug_hooks->undef) (SOURCE_LINE (map, loc),\n+  (*debug_hooks->undef) (SOURCE_LINE (linemap_check_ordinary (map), loc),\n \t\t\t (const char *) NODE_NAME (node));\n }\n "}, {"sha": "fe5fce78597f0600b6132797e1fdb04296206064", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -135,7 +135,7 @@ static void handle_deferred_opts (void);\n static void sanitize_cpp_opts (void);\n static void add_prefixed_path (const char *, size_t);\n static void push_command_line_include (void);\n-static void cb_file_change (cpp_reader *, const struct line_map *);\n+static void cb_file_change (cpp_reader *, const line_map_ordinary *);\n static void cb_dir_change (cpp_reader *, const char *);\n static void c_finish_options (void);\n \n@@ -1306,8 +1306,10 @@ c_finish_options (void)\n       size_t i;\n \n       cb_file_change (parse_in,\n-\t\t      linemap_add (line_table, LC_RENAME, 0,\n-\t\t\t\t   _(\"<built-in>\"), 0));\n+\t\t      linemap_check_ordinary (linemap_add (line_table,\n+\t\t\t\t\t\t\t   LC_RENAME, 0,\n+\t\t\t\t\t\t\t   _(\"<built-in>\"),\n+\t\t\t\t\t\t\t   0)));\n       /* Make sure all of the builtins about to be declared have\n \t BUILTINS_LOCATION has their source_location.  */\n       source_location builtins_loc = BUILTINS_LOCATION;\n@@ -1330,8 +1332,8 @@ c_finish_options (void)\n       cpp_opts->warn_dollars = (cpp_opts->cpp_pedantic && !cpp_opts->c99);\n \n       cb_file_change (parse_in,\n-\t\t      linemap_add (line_table, LC_RENAME, 0,\n-\t\t\t\t   _(\"<command-line>\"), 0));\n+\t\t      linemap_check_ordinary (linemap_add (line_table, LC_RENAME, 0,\n+\t\t\t\t\t\t\t   _(\"<command-line>\"), 0)));\n \n       for (i = 0; i < deferred_count; i++)\n \t{\n@@ -1434,7 +1436,7 @@ push_command_line_include (void)\n /* File change callback.  Has to handle -include files.  */\n static void\n cb_file_change (cpp_reader * ARG_UNUSED (pfile),\n-\t\tconst struct line_map *new_map)\n+\t\tconst line_map_ordinary *new_map)\n {\n   if (flag_preprocess_only)\n     pp_file_change (new_map);"}, {"sha": "e936d5d26d2396bfe0d9cd54b4640529b9dfa9db", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -502,7 +502,7 @@ cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n static void\n cb_define (cpp_reader *pfile, source_location line, cpp_hashnode *node)\n {\n-  const struct line_map *map;\n+  const line_map_ordinary *map;\n \n   maybe_print_line (line);\n   fputs (\"#define \", print.outf);\n@@ -642,7 +642,7 @@ pp_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n    described in MAP.  */\n \n void\n-pp_file_change (const struct line_map *map)\n+pp_file_change (const line_map_ordinary *map)\n {\n   const char *flags = \"\";\n \n@@ -664,7 +664,7 @@ pp_file_change (const struct line_map *map)\n \t  /* Bring current file to correct line when entering a new file.  */\n \t  if (map->reason == LC_ENTER)\n \t    {\n-\t      const struct line_map *from = INCLUDED_FROM (line_table, map);\n+\t      const line_map_ordinary *from = INCLUDED_FROM (line_table, map);\n \t      maybe_print_line (LAST_SOURCE_LINE_LOCATION (from));\n \t    }\n \t  if (map->reason == LC_ENTER)"}, {"sha": "8f7a9e1b478fd0427c5fea088186b6841f912973", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -607,7 +607,7 @@ diagnostic_action_after_output (diagnostic_context *context,\n void\n diagnostic_report_current_module (diagnostic_context *context, location_t where)\n {\n-  const struct line_map *map = NULL;\n+  const line_map_ordinary *map = NULL;\n \n   if (pp_needs_newline (context->printer))\n     {"}, {"sha": "2fc04fdc723db2455465a29f6923686638f42e04", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -1,3 +1,10 @@\n+2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cpp.c (maybe_print_line): Strengthen local \"map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(cb_file_change): Likewise for param \"map\" and local \"from\".\n+\t(cb_line_change): Likewise for local \"map\".\n+\n 2015-05-19  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* interface.c (compare_actual_formal): Use std::swap instead of"}, {"sha": "e0e1f74205e042c1ce303e6d57aba37faf4affe0", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -147,7 +147,7 @@ static void scan_translation_unit_trad (cpp_reader *);\n \n /* Callback routines for the parser. Most of these are active only\n    in specific modes.  */\n-static void cb_file_change (cpp_reader *, const struct line_map *);\n+static void cb_file_change (cpp_reader *, const line_map_ordinary *);\n static void cb_line_change (cpp_reader *, const cpp_token *, int);\n static void cb_define (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_undef (cpp_reader *, source_location, cpp_hashnode *);\n@@ -807,7 +807,8 @@ scan_translation_unit_trad (cpp_reader *pfile)\n static void\n maybe_print_line (source_location src_loc)\n {\n-  const struct line_map *map = linemap_lookup (line_table, src_loc);\n+  const line_map_ordinary *map\n+    = linemap_check_ordinary (linemap_lookup (line_table, src_loc));\n   int src_line = SOURCE_LINE (map, src_loc);\n \n   /* End the previous line of text.  */\n@@ -874,7 +875,7 @@ print_line (source_location src_loc, const char *special_flags)\n }\n \n static void\n-cb_file_change (cpp_reader * ARG_UNUSED (pfile), const struct line_map *map)\n+cb_file_change (cpp_reader * ARG_UNUSED (pfile), const line_map_ordinary *map)\n {\n   const char *flags = \"\";\n \n@@ -896,7 +897,7 @@ cb_file_change (cpp_reader * ARG_UNUSED (pfile), const struct line_map *map)\n \t  /* Bring current file to correct line when entering a new file.  */\n \t  if (map->reason == LC_ENTER)\n \t    {\n-\t      const struct line_map *from = INCLUDED_FROM (line_table, map);\n+\t      const line_map_ordinary *from = INCLUDED_FROM (line_table, map);\n \t      maybe_print_line (LAST_SOURCE_LINE_LOCATION (from));\n \t    }\n \t  if (map->reason == LC_ENTER)\n@@ -930,7 +931,8 @@ cb_line_change (cpp_reader *pfile, const cpp_token *token,\n      ought to care.  Some things do care; the fault lies with them.  */\n   if (!CPP_OPTION (pfile, traditional))\n     {\n-      const struct line_map *map = linemap_lookup (line_table, src_loc);\n+      const line_map_ordinary *map\n+\t= linemap_check_ordinary (linemap_lookup (line_table, src_loc));\n       int spaces = SOURCE_COLUMN (map, src_loc) - 2;\n       print.printed = 1;\n "}, {"sha": "bca79092455ec73018ecbd0ff44d396bff79e687", "filename": "gcc/genmatch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -58,7 +58,7 @@ __attribute__((format (printf, 6, 0)))\n error_cb (cpp_reader *, int errtype, int, source_location location,\n \t  unsigned int, const char *msg, va_list *ap)\n {\n-  const line_map *map;\n+  const line_map_ordinary *map;\n   linemap_resolve_location (line_table, location, LRK_SPELLING_LOCATION, &map);\n   expanded_location loc = linemap_expand_location (line_table, map, location);\n   fprintf (stderr, \"%s:%d:%d %s: \", loc.file, loc.line, loc.column,\n@@ -134,7 +134,7 @@ static void\n output_line_directive (FILE *f, source_location location,\n \t\t       bool dumpfile = false)\n {\n-  const line_map *map;\n+  const line_map_ordinary *map;\n   linemap_resolve_location (line_table, location, LRK_SPELLING_LOCATION, &map);\n   expanded_location loc = linemap_expand_location (line_table, map, location);\n   if (dumpfile)"}, {"sha": "01230f262a7cbcb22454e0e77f7c128d03a5c1f7", "filename": "gcc/input.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -134,7 +134,7 @@ expand_location_1 (source_location loc,\n \t\t   bool expansion_point_p)\n {\n   expanded_location xloc;\n-  const struct line_map *map;\n+  const line_map_ordinary *map;\n   enum location_resolution_kind lrk = LRK_MACRO_EXPANSION_POINT;\n   tree block = NULL;\n \n@@ -158,7 +158,7 @@ expand_location_1 (source_location loc,\n \t     location (toward the expansion point) that is not reserved;\n \t     that is, the first location that is in real source code.  */\n \t  loc = linemap_unwind_to_first_non_reserved_loc (line_table,\n-\t\t\t\t\t\t\t  loc, &map);\n+\t\t\t\t\t\t\t  loc, NULL);\n \t  lrk = LRK_SPELLING_LOCATION;\n \t}\n       loc = linemap_resolve_location (line_table, loc,\n@@ -724,7 +724,7 @@ location_get_source_line (expanded_location xloc,\n bool\n is_location_from_builtin_token (source_location loc)\n {\n-  const line_map *map = NULL;\n+  const line_map_ordinary *map = NULL;\n   loc = linemap_resolve_location (line_table, loc,\n \t\t\t\t  LRK_SPELLING_LOCATION, &map);\n   return loc == BUILTINS_LOCATION;\n@@ -949,7 +949,8 @@ dump_location_info (FILE *stream)\n       source_location end_location = get_end_location (line_table, idx);\n       /* half-closed: doesn't include this one. */\n \n-      struct line_map *map = LINEMAPS_ORDINARY_MAP_AT (line_table, idx);\n+      const line_map_ordinary *map\n+\t= LINEMAPS_ORDINARY_MAP_AT (line_table, idx);\n       fprintf (stream, \"ORDINARY MAP: %i\\n\", idx);\n       dump_location_range (stream,\n \t\t\t   MAP_START_LOCATION (map), end_location);\n@@ -1026,7 +1027,7 @@ dump_location_info (FILE *stream)\n       unsigned int idx = (ascending_source_locations\n \t\t\t  ? (LINEMAPS_MACRO_USED (line_table) - (i + 1))\n \t\t\t  : i);\n-      struct line_map *map = LINEMAPS_MACRO_MAP_AT (line_table, idx);\n+      const line_map_macro *map = LINEMAPS_MACRO_MAP_AT (line_table, idx);\n       fprintf (stream, \"MACRO %i: %s (%u tokens)\\n\",\n \t       idx,\n \t       linemap_map_get_macro_name (map),"}, {"sha": "7461a94d6ba841567c8e6a1eb4aa3fbbec11f1cd", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -67,7 +67,7 @@ default_tree_diagnostic_starter (diagnostic_context *context,\n    below.  */\n typedef struct\n {\n-  const struct line_map *map;\n+  const line_map_macro *map;\n   source_location where;\n } loc_map_pair;\n \n@@ -133,7 +133,7 @@ maybe_unwind_expanded_macro_loc (diagnostic_context *context,\n   do\n     {\n       loc.where = where;\n-      loc.map = map;\n+      loc.map = linemap_check_macro (map);\n \n       loc_vec.safe_push (loc);\n \n@@ -148,14 +148,15 @@ maybe_unwind_expanded_macro_loc (diagnostic_context *context,\n \n   /* Now map is set to the map of the location in the source that\n      first triggered the macro expansion.  This must be an ordinary map.  */\n+  const line_map_ordinary *ord_map = linemap_check_ordinary (map);\n \n   /* Walk LOC_VEC and print the macro expansion trace, unless the\n      first macro which expansion triggered this trace was expanded\n      inside a system header.  */\n   int saved_location_line =\n     expand_location_to_spelling_point (diagnostic_location (diagnostic)).line;\n \n-  if (!LINEMAP_SYSP (map))\n+  if (!LINEMAP_SYSP (ord_map))\n     FOR_EACH_VEC_ELT (loc_vec, ix, iter)\n       {\n \t/* Sometimes, in the unwound macro expansion trace, we want to\n@@ -195,7 +196,7 @@ maybe_unwind_expanded_macro_loc (diagnostic_context *context,\n \n \t/* Don't print trace for locations that are reserved or from\n \t   within a system header.  */\n-        const struct line_map *m = NULL;\n+        const line_map_ordinary *m = NULL;\n         source_location l = \n           linemap_resolve_location (line_table, resolved_def_loc,\n                                     LRK_SPELLING_LOCATION,  &m);"}, {"sha": "d82f00894cad9754941ecbce2d5a91cbffa56be7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -1,3 +1,161 @@\n+2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* directives.c (do_line): Strengthen local \"map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(do_linemarker): Likewise.\n+\t(_cpp_do_file_change): Assert that we're not dealing with\n+\ta macro map.  Introduce local \"ord_map\" via a call to\n+\tlinemap_check_ordinary, guarded within the check for\n+\tnon-NULL.  Use it for typesafety.\n+\t* files.c (cpp_make_system_header): Strengthen local \"map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t* include/cpplib.h (struct cpp_callbacks): Likewise for second\n+\tparameter of \"file_change\" callback.\n+\t* include/line-map.h (struct line_map): Convert from a struct\n+\tcontaining a union to a base class.\n+\t(struct line_map_ordinary): Convert to a subclass of line_map.\n+\t(struct line_map_macro): Likewise.\n+\t(linemap_check_ordinary): Strengthen return type from line_map *\n+\tto line_map_ordinary *, and add a const-variant.\n+\t(linemap_check_macro): New pair of functions.\n+\t(ORDINARY_MAP_STARTING_LINE_NUMBER): Strengthen param from\n+\tconst line_map * to const line_map_ordinary *, eliminating call\n+\tto linemap_check_ordinary.  Likewise for the non-const variant.\n+\t(ORDINARY_MAP_INCLUDER_FILE_INDEX): Likewise.\n+\t(ORDINARY_MAP_IN_SYSTEM_HEADER_P): Likewise.\n+\t(ORDINARY_MAP_NUMBER_OF_COLUMN_BITS): Likewise.\n+\t(ORDINARY_MAP_FILE_NAME): Likewise.\n+\t(MACRO_MAP_MACRO): Strengthen param from const line_map * to\n+\tconst line_map_macro *.  Likewise for the non-const variant.\n+\t(MACRO_MAP_NUM_MACRO_TOKENS): Likewise.\n+\t(MACRO_MAP_LOCATIONS): Likewise.\n+\t(MACRO_MAP_EXPANSION_POINT_LOCATION): Likewise.\n+\t(struct maps_info): Replace with...\n+\t(struct maps_info_ordinary):...this and...\n+\t(struct maps_info_macro): ...this.\n+\t(struct line_maps): Convert fields \"info_ordinary\" and\n+\t\"info_macro\" to the above new structs.\n+\t(LINEMAPS_MAP_INFO): Delete both functions.\n+\t(LINEMAPS_MAPS): Likewise.\n+\t(LINEMAPS_ALLOCATED): Rewrite both variants to avoid using\n+\tLINEMAPS_MAP_INFO.\n+\t(LINEMAPS_USED): Likewise.\n+\t(LINEMAPS_CACHE): Likewise.\n+\t(LINEMAPS_MAP_AT): Likewise.\n+\t(LINEMAPS_ORDINARY_MAPS): Strengthen return type from line_map *\n+\tto line_map_ordinary *.\n+\t(LINEMAPS_ORDINARY_MAP_AT): Likewise.\n+\t(LINEMAPS_LAST_ORDINARY_MAP): Likewise.\n+\t(LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP): Likewise.\n+\t(LINEMAPS_MACRO_MAPS): Strengthen return type from line_map * to\n+\tline_map_macro *.\n+\t(LINEMAPS_MACRO_MAP_AT): Likewise.\n+\t(LINEMAPS_LAST_MACRO_MAP): Likewise.\n+\t(LINEMAPS_LAST_ALLOCATED_MACRO_MAP): Likewise.\n+\t(linemap_map_get_macro_name): Strengthen param from\n+\tconst line_map * to const line_map_macro *.\n+\t(SOURCE_LINE): Strengthen first param from const line_map * to\n+\tconst line_map_ordinary *, removing call to\n+\tlinemap_check_ordinary.\n+\t(SOURCE_COLUMN): Likewise.\n+\t(LAST_SOURCE_LINE_LOCATION): Likewise.\n+\t(LAST_SOURCE_LINE): Strengthen first param from const line_map *\n+\tto const line_map_ordinary *.\n+\t(LAST_SOURCE_COLUMN): Likewise.\n+\t(INCLUDED_FROM): Strengthen return type from line_map * to\n+\tline_map_ordinary *., and second param from const line_map *\n+\tto const line_map_ordinary *, removing call to\n+\tlinemap_check_ordinary.\n+\t(MAIN_FILE_P): Strengthen param from const line_map * to\n+\tconst line_map_ordinary *, removing call to\n+\tlinemap_check_ordinary.\n+\t(linemap_position_for_line_and_column): Strengthen param from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(LINEMAP_FILE): Strengthen param from const line_map * to\n+\tconst line_map_ordinary *, removing call to\n+\tlinemap_check_ordinary.\n+\t(LINEMAP_LINE): Likewise.\n+\t(LINEMAP_SYSP): Likewise.\n+\t(linemap_resolve_location): Strengthen final param from\n+\tconst line_map ** to const line_map_ordinary **.\n+\t* internal.h (CPP_INCREMENT_LINE): Likewise for local \"map\".\n+\t(linemap_enter_macro): Strengthen return type from\n+\tconst line_map * to const line_map_macro *.\n+\t(linemap_add_macro_token): Likewise for first param.\n+\t* line-map.c (linemap_check_files_exited): Strengthen local \"map\"\n+\tfrom const line_map * to const line_map_ordinary *.\n+\t(new_linemap): Introduce local \"map_size\" and use it when\n+\tcalculating how large the buffer should be.  Rewrite based\n+\ton change of info_macro and info_ordinary into distinct types.\n+\t(linemap_add): Strengthen locals \"map\" and \"from\" from line_map *\n+\tto line_map_ordinary *.\n+\t(linemap_enter_macro): Strengthen return type from\n+\tconst line_map * to const line_map_macro *, and local \"map\" from\n+\tline_map * to line_map_macro *.\n+\t(linemap_add_macro_token): Strengthen param \"map\" from\n+\tconst line_map * to const line_map_macro *.\n+\t(linemap_line_start): Strengthen local \"map\" from line_map * to\n+\tline_map_ordinary *.\n+\t(linemap_position_for_column): Likewise.\n+\t(linemap_position_for_line_and_column): Strengthen first param\n+\tfrom const line_map * to const line_map_ordinary *.\n+\t(linemap_position_for_loc_and_offset): Strengthen local \"map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(linemap_ordinary_map_lookup): Likewise for return type and locals\n+\t\"cached\" and \"result\".\n+\t(linemap_macro_map_lookup): Strengthen return type and locals\n+\t\"cached\" and \"result\" from const line_map * to\n+\tconst line_map_macro *.\n+\t(linemap_macro_map_loc_to_exp_point): Likewise for param \"map\".\n+\t(linemap_macro_map_loc_to_def_point): Likewise.\n+\t(linemap_macro_map_loc_unwind_toward_spelling): Likewise.\n+\t(linemap_get_expansion_line): Strengthen local \"map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(linemap_get_expansion_filename): Likewise.\n+\t(linemap_map_get_macro_name): Strengthen param from\n+\tconst line_map * to const line_map_macro *.\n+\t(linemap_location_in_system_header_p): Add call to\n+\tlinemap_check_ordinary in region guarded by\n+\t!linemap_macro_expansion_map_p.  Introduce local \"macro_map\" via\n+\tlinemap_check_macro in other region, using it in place of \"map\"\n+\tfor typesafety.\n+\t(first_map_in_common_1): Add calls to linemap_check_macro.\n+\t(trace_include): Strengthen param \"map\" from const line_map * to\n+\tconst line_map_ordinary *.\n+\t(linemap_macro_loc_to_spelling_point): Strengthen final param from\n+\tconst line_map ** to const line_map_ordinary **.  Replace a\n+\tC-style cast with a const_cast, and add calls to\n+\tlinemap_check_macro and linemap_check_ordinary.\n+\t(linemap_macro_loc_to_def_point): Likewise.\n+\t(linemap_macro_loc_to_exp_point): Likewise.\n+\t(linemap_resolve_location): Strengthen final param from\n+\tconst line_map ** to const line_map_ordinary **.\n+\t(linemap_unwind_toward_expansion): Introduce local \"macro_map\" via\n+\ta checked cast and use it in place of *map.\n+\t(linemap_unwind_to_first_non_reserved_loc): Strengthen local\n+\t\"map1\" from const line_map * to const line_map_ordinary *.\n+\t(linemap_expand_location): Introduce local \"ord_map\" via a checked\n+\tcast and use it in place of map.\n+\t(linemap_dump): Make local \"map\" const.  Strengthen local\n+\t\"includer_map\" from line_map * to const line_map_ordinary *.\n+\tIntroduce locals \"ord_map\" and \"macro_map\" via checked casts and\n+\tuse them in place of \"map\" for typesafety.\n+\t(linemap_dump_location): Strengthen local \"map\" from\n+\tconst line_map * to const line_map_ordinary *.\n+\t(linemap_get_file_highest_location): Update for elimination of\n+\tunion.\n+\t(linemap_get_statistics): Strengthen local \"cur_map\" from\n+\tline_map * to const line_map_macro *.  Update uses of sizeof to\n+\tuse the appropriate line_map subclasses.\n+\t* macro.c (_cpp_warn_if_unused_macro): Add call to\n+\tlinemap_check_ordinary.\n+\t(builtin_macro): Strengthen local \"map\" from const line_map * to\n+\tconst line_map_macro *.\n+\t(enter_macro_context): Likewise.\n+\t(replace_args): Likewise.\n+\t(tokens_buff_put_token_to): Likewise for param \"map\".\n+\t(tokens_buff_add_token): Likewise.\n+\n 2015-05-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (source_location): Add a reference to"}, {"sha": "1e9bc3da0fc69793065765e85a35aeddc28cc9cc", "filename": "libcpp/directives.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -912,7 +912,7 @@ static void\n do_line (cpp_reader *pfile)\n {\n   struct line_maps *line_table = pfile->line_table;\n-  const struct line_map *map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n+  const line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n \n   /* skip_rest_of_line() may cause line table to be realloc()ed so note down\n      sysp right now.  */\n@@ -975,7 +975,7 @@ static void\n do_linemarker (cpp_reader *pfile)\n {\n   struct line_maps *line_table = pfile->line_table;\n-  const struct line_map *map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n+  const line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n   const cpp_token *token;\n   const char *new_file = ORDINARY_MAP_FILE_NAME (map);\n   linenum_type new_lineno;\n@@ -1065,15 +1065,20 @@ _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n \t\t     const char *to_file, linenum_type file_line,\n \t\t     unsigned int sysp)\n {\n+  linemap_assert (reason != LC_ENTER_MACRO);\n   const struct line_map *map = linemap_add (pfile->line_table, reason, sysp,\n \t\t\t\t\t    to_file, file_line);\n+  const line_map_ordinary *ord_map = NULL;\n   if (map != NULL)\n-    linemap_line_start (pfile->line_table,\n-\t\t\tORDINARY_MAP_STARTING_LINE_NUMBER (map),\n-\t\t\t127);\n+    {\n+      ord_map = linemap_check_ordinary (map);\n+      linemap_line_start (pfile->line_table,\n+\t\t\t  ORDINARY_MAP_STARTING_LINE_NUMBER (ord_map),\n+\t\t\t  127);\n+    }\n \n   if (pfile->cb.file_change)\n-    pfile->cb.file_change (pfile, map);\n+    pfile->cb.file_change (pfile, ord_map);\n }\n \n /* Report a warning or error detected by the program we are"}, {"sha": "8c388d87d800278d17b4ef3d1ae047553edab90d", "filename": "libcpp/files.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -1326,7 +1326,7 @@ cpp_make_system_header (cpp_reader *pfile, int syshdr, int externc)\n {\n   int flags = 0;\n   const struct line_maps *line_table = pfile->line_table;\n-  const struct line_map *map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n+  const line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n   /* 1 = system header, 2 = system header to be treated as C.  */\n   if (syshdr)\n     flags = 1 + (externc != 0);"}, {"sha": "1b1a53ce599a3041c14bf992ce57ca99f1e5e890", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -549,7 +549,7 @@ struct cpp_callbacks\n      The line_map is for the new file.  It is NULL if there is no new file.\n      (In C this happens when done with <built-in>+<command line> and also\n      when done with a main file.)  This can be used for resource cleanup.  */\n-  void (*file_change) (cpp_reader *, const struct line_map *);\n+  void (*file_change) (cpp_reader *, const line_map_ordinary *);\n \n   void (*dir_change) (cpp_reader *, const char *);\n   void (*include) (cpp_reader *, source_location, const unsigned char *,"}, {"sha": "5c04945c727d4db6dc1cecb1ba3346c1fc372609", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 201, "deletions": 185, "changes": 386, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -125,6 +125,39 @@ typedef void *(*line_map_realloc) (void *, size_t);\n    for a given requested allocation.  */\n typedef size_t (*line_map_round_alloc_size_func) (size_t);\n \n+/* A line_map encodes a sequence of locations.\n+   There are two kinds of maps. Ordinary maps and macro expansion\n+   maps, a.k.a macro maps.\n+\n+   A macro map encodes source locations of tokens that are part of a\n+   macro replacement-list, at a macro expansion point. E.g, in:\n+\n+            #define PLUS(A,B) A + B\n+\n+   No macro map is going to be created there, because we are not at a\n+   macro expansion point. We are at a macro /definition/ point. So the\n+   locations of the tokens of the macro replacement-list (i.e, A + B)\n+   will be locations in an ordinary map, not a macro map.\n+\n+   On the other hand, if we later do:\n+\n+        int a = PLUS (1,2);\n+\n+   The invocation of PLUS here is a macro expansion. So we are at a\n+   macro expansion point. The preprocessor expands PLUS (1,2) and\n+   replaces it with the tokens of its replacement-list: 1 + 2. A macro\n+   map is going to be created to hold (or rather to map, haha ...) the\n+   locations of the tokens 1, + and 2. The macro map also records the\n+   location of the expansion point of PLUS. That location is mapped in\n+   the map that is active right before the location of the invocation\n+   of PLUS.  */\n+struct GTY((tag (\"0\"), desc (\"%h.reason == LC_ENTER_MACRO ? 2 : 1\"))) line_map {\n+  source_location start_location;\n+\n+  /* The reason for creation of this line map.  */\n+  ENUM_BITFIELD (lc_reason) reason : CHAR_BIT;\n+};\n+\n /* An ordinary line map encodes physical source locations. Those\n    physical source locations are called \"spelling locations\".\n    \n@@ -136,7 +169,7 @@ typedef size_t (*line_map_round_alloc_size_func) (size_t);\n    means \"entire file/line\" or \"unknown line/column\" or \"not applicable\".)\n \n    The highest possible source location is MAX_SOURCE_LOCATION.  */\n-struct GTY(()) line_map_ordinary {\n+struct GTY((tag (\"1\"))) line_map_ordinary : public line_map {\n   const char *to_file;\n   linenum_type to_line;\n \n@@ -164,13 +197,9 @@ struct cpp_hashnode;\n /* A macro line map encodes location of tokens coming from a macro\n    expansion.\n    \n-   Please note that this struct line_map_macro is a field of struct\n-   line_map below, go read the comments of struct line_map below and\n-   then come back here.\n-   \n    The offset from START_LOCATION is used to index into\n    MACRO_LOCATIONS; this holds the original location of the token.  */\n-struct GTY(()) line_map_macro {\n+struct GTY((tag (\"2\"))) line_map_macro : public line_map {\n   /* The cpp macro which expansion gave birth to this macro map.  */\n   struct cpp_hashnode * GTY ((nested_ptr (union tree_node,\n \t\t\t\t   \"%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL\",\n@@ -243,44 +272,6 @@ struct GTY(()) line_map_macro {\n   source_location expansion;\n };\n \n-/* A line_map encodes a sequence of locations.\n-   There are two kinds of maps. Ordinary maps and macro expansion\n-   maps, a.k.a macro maps.\n-\n-   A macro map encodes source locations of tokens that are part of a\n-   macro replacement-list, at a macro expansion point. E.g, in:\n-\n-            #define PLUS(A,B) A + B\n-\n-   No macro map is going to be created there, because we are not at a\n-   macro expansion point. We are at a macro /definition/ point. So the\n-   locations of the tokens of the macro replacement-list (i.e, A + B)\n-   will be locations in an ordinary map, not a macro map.\n-\n-   On the other hand, if we later do:\n-\n-        int a = PLUS (1,2);\n-\n-   The invocation of PLUS here is a macro expansion. So we are at a\n-   macro expansion point. The preprocessor expands PLUS (1,2) and\n-   replaces it with the tokens of its replacement-list: 1 + 2. A macro\n-   map is going to be created to hold (or rather to map, haha ...) the\n-   locations of the tokens 1, + and 2. The macro map also records the\n-   location of the expansion point of PLUS. That location is mapped in\n-   the map that is active right before the location of the invocation\n-   of PLUS.  */\n-struct GTY(()) line_map {\n-  source_location start_location;\n-\n-  /* The reason for creation of this line map.  */\n-  ENUM_BITFIELD (lc_reason) reason : CHAR_BIT;\n-\n-  union map_u {\n-    struct line_map_ordinary GTY((tag (\"0\"))) ordinary;\n-    struct line_map_macro GTY((tag (\"1\"))) macro;\n-  } GTY((desc (\"%1.reason == LC_ENTER_MACRO\"))) d;\n-};\n-\n #if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n \n /* Assertion macro to be used in line-map code.  */\n@@ -312,22 +303,44 @@ bool\n linemap_macro_expansion_map_p (const struct line_map *);\n \n /* Assert that MAP encodes locations of tokens that are not part of\n-   the replacement-list of a macro expansion.  */\n-inline struct line_map *\n+   the replacement-list of a macro expansion, downcasting from\n+   line_map * to line_map_ordinary *.  */\n+\n+inline line_map_ordinary *\n linemap_check_ordinary (struct line_map *map)\n {\n   linemap_assert (!linemap_macro_expansion_map_p (map));\n-  return map;\n+  return (line_map_ordinary *)map;\n }\n \n /* Assert that MAP encodes locations of tokens that are not part of\n-   the replacement-list of a macro expansion.  */\n+   the replacement-list of a macro expansion, downcasting from\n+   const line_map * to const line_map_ordinary *.  */\n \n-inline const struct line_map *\n+inline const line_map_ordinary *\n linemap_check_ordinary (const struct line_map *map)\n {\n   linemap_assert (!linemap_macro_expansion_map_p (map));\n-  return map;\n+  return (const line_map_ordinary *)map;\n+}\n+\n+/* Assert that MAP is a macro expansion and downcast to the appropriate\n+   subclass.  */\n+\n+inline line_map_macro *linemap_check_macro (line_map *map)\n+{\n+  linemap_assert (linemap_macro_expansion_map_p (map));\n+  return (line_map_macro *)map;\n+}\n+\n+/* Assert that MAP is a macro expansion and downcast to the appropriate\n+   subclass.  */\n+\n+inline const line_map_macro *\n+linemap_check_macro (const line_map *map)\n+{\n+  linemap_assert (linemap_macro_expansion_map_p (map));\n+  return (const line_map_macro *)map;\n }\n \n /* Read the start location of MAP, as an rvalue.  */\n@@ -350,18 +363,18 @@ MAP_START_LOCATION (line_map *map)\n /* Get the starting line number of ordinary map MAP.  */\n \n inline linenum_type\n-ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map *map)\n+ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.to_line;\n+  return ord_map->to_line;\n }\n \n /* Access the starting line number of ordinary map MAP by\n    reference (e.g. as an lvalue).  */\n \n inline linenum_type&\n-ORDINARY_MAP_STARTING_LINE_NUMBER (line_map *map)\n+ORDINARY_MAP_STARTING_LINE_NUMBER (line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.to_line;\n+  return ord_map->to_line;\n }\n \n /* Get the index of the ordinary map at whose end\n@@ -370,17 +383,17 @@ ORDINARY_MAP_STARTING_LINE_NUMBER (line_map *map)\n    File(s) at the bottom of the include stack have this set.  */\n \n inline int\n-ORDINARY_MAP_INCLUDER_FILE_INDEX (const line_map *map)\n+ORDINARY_MAP_INCLUDER_FILE_INDEX (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.included_from;\n+  return ord_map->included_from;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline int&\n-ORDINARY_MAP_INCLUDER_FILE_INDEX (line_map *map)\n+ORDINARY_MAP_INCLUDER_FILE_INDEX (line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.included_from;\n+  return ord_map->included_from;\n }\n \n /* Return a positive value if map encodes locations from a system\n@@ -389,129 +402,147 @@ ORDINARY_MAP_INCLUDER_FILE_INDEX (line_map *map)\n    that therefore needs to be extern \"C\" protected in C++.  */\n \n inline unsigned char\n-ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map *map)\n+ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.sysp;\n+  return ord_map->sysp;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline unsigned char &\n-ORDINARY_MAP_IN_SYSTEM_HEADER_P (line_map *map)\n+ORDINARY_MAP_IN_SYSTEM_HEADER_P (line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.sysp;\n+  return ord_map->sysp;\n }\n \n /* Get the number of the low-order source_location bits used for a\n    column number within ordinary map MAP.  */\n \n inline unsigned char\n-ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (const line_map *map)\n+ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.column_bits;\n+  return ord_map->column_bits;\n }\n \n /* Set the number of the low-order source_location bits used for a\n    column number within ordinary map MAP.  */\n \n inline void\n-SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (line_map *map, int col_bits)\n+SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (line_map_ordinary *ord_map,\n+\t\t\t\t\tint col_bits)\n {\n-  linemap_check_ordinary (map)->d.ordinary.column_bits = col_bits;\n+  ord_map->column_bits = col_bits;\n }\n \n /* Get the filename of ordinary map MAP.  */\n \n inline const char *\n-ORDINARY_MAP_FILE_NAME (const line_map *map)\n+ORDINARY_MAP_FILE_NAME (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.to_file;\n+  return ord_map->to_file;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline const char * &\n-ORDINARY_MAP_FILE_NAME (line_map *map)\n+ORDINARY_MAP_FILE_NAME (line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.to_file;\n+  return ord_map->to_file;\n }\n \n /* Get the cpp macro whose expansion gave birth to macro map MAP.  */\n \n inline cpp_hashnode *\n-MACRO_MAP_MACRO (const line_map *map)\n+MACRO_MAP_MACRO (const line_map_macro *macro_map)\n {\n-  return map->d.macro.macro;\n+  return macro_map->macro;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline cpp_hashnode * &\n-MACRO_MAP_MACRO (line_map *map)\n+MACRO_MAP_MACRO (line_map_macro *macro_map)\n {\n-  return map->d.macro.macro;\n+  return macro_map->macro;\n }\n \n /* Get the number of tokens inside the replacement-list of the macro\n    that led to macro map MAP.  */\n \n inline unsigned int\n-MACRO_MAP_NUM_MACRO_TOKENS (const line_map *map)\n+MACRO_MAP_NUM_MACRO_TOKENS (const line_map_macro *macro_map)\n {\n-  return map->d.macro.n_tokens;\n+  return macro_map->n_tokens;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline unsigned int &\n-MACRO_MAP_NUM_MACRO_TOKENS (line_map *map)\n+MACRO_MAP_NUM_MACRO_TOKENS (line_map_macro *macro_map)\n {\n-  return map->d.macro.n_tokens;\n+  return macro_map->n_tokens;\n }\n \n /* Get the array of pairs of locations within macro map MAP.\n    See the declaration of line_map_macro for more information.  */\n \n inline source_location *\n-MACRO_MAP_LOCATIONS (const line_map *map)\n+MACRO_MAP_LOCATIONS (const line_map_macro *macro_map)\n {\n-  return map->d.macro.macro_locations;\n+  return macro_map->macro_locations;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline source_location * &\n-MACRO_MAP_LOCATIONS (line_map *map)\n+MACRO_MAP_LOCATIONS (line_map_macro *macro_map)\n {\n-  return map->d.macro.macro_locations;\n+  return macro_map->macro_locations;\n }\n \n /* Get the location of the expansion point of the macro map MAP.  */\n \n inline source_location\n-MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map *map)\n+MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map_macro *macro_map)\n {\n-  return map->d.macro.expansion;\n+  return macro_map->expansion;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline source_location &\n-MACRO_MAP_EXPANSION_POINT_LOCATION (line_map *map)\n+MACRO_MAP_EXPANSION_POINT_LOCATION (line_map_macro *macro_map)\n {\n-  return map->d.macro.expansion;\n+  return macro_map->expansion;\n }\n \n /* The abstraction of a set of location maps. There can be several\n    types of location maps. This abstraction contains the attributes\n-   that are independent from the type of the map.  */\n-struct GTY(()) maps_info {\n-  /* This array contains the different line maps.\n-     A line map is created for the following events:\n-       - when a new preprocessing unit start. \n-       - when a preprocessing unit ends.\n-       - when a macro expansion occurs.  */\n-  struct line_map * GTY ((length (\"%h.used\"))) maps;\n+   that are independent from the type of the map.\n+\n+   Essentially this is just a vector of T_linemap_subclass,\n+   which can only ever grow in size.  */\n+\n+struct GTY(()) maps_info_ordinary {\n+  /* This array contains the \"ordinary\" line maps, for all\n+     events other than macro expansion\n+     (e.g. when a new preprocessing unit starts or ends).  */\n+  line_map_ordinary * GTY ((length (\"%h.used\"))) maps;\n+\n+  /* The total number of allocated maps.  */\n+  unsigned int allocated;\n+\n+  /* The number of elements used in maps. This number is smaller\n+     or equal to ALLOCATED.  */\n+  unsigned int used;\n+\n+  unsigned int cache;\n+};\n+\n+struct GTY(()) maps_info_macro {\n+  /* This array contains the macro line maps.\n+     A macro line map is created whenever a macro expansion occurs.  */\n+  line_map_macro * GTY ((length (\"%h.used\"))) maps;\n \n   /* The total number of allocated maps.  */\n   unsigned int allocated;\n@@ -551,9 +582,9 @@ struct GTY(()) location_adhoc_data_map {\n /* A set of chronological line_map structures.  */\n struct GTY(()) line_maps {\n   \n-  struct maps_info info_ordinary;\n+  maps_info_ordinary info_ordinary;\n \n-  struct maps_info info_macro;\n+  maps_info_macro info_macro;\n \n   /* Depth of the include stack, including the current file.  */\n   unsigned int depth;\n@@ -589,74 +620,48 @@ struct GTY(()) line_maps {\n   bool seen_line_directive;\n };\n \n-/* Returns the pointer to the memory region where information about\n-   maps are stored in the line table SET. MACRO_MAP_P is a flag\n-   telling if we want macro or ordinary maps.  */\n-inline struct maps_info *\n-LINEMAPS_MAP_INFO (line_maps *set, bool macro_map_p)\n-{\n-  return (macro_map_p\n-\t  ? &(set->info_macro)\n-\t  : &(set->info_ordinary));\n-}\n-\n-/* As above, but preserving constness.  */\n-\n-inline const struct maps_info *\n-LINEMAPS_MAP_INFO (const line_maps *set, bool macro_map_p)\n-{\n-  return (macro_map_p\n-\t  ? &(set->info_macro)\n-\t  : &(set->info_ordinary));\n-}\n-\n-/* Returns the pointer to the memory region where maps are stored in\n-   the line table SET. MAP_KIND shall be TRUE if we are interested in\n-   macro maps false otherwise.  */\n-inline line_map *\n-LINEMAPS_MAPS (const line_maps *set, bool map_kind)\n-{\n-  return LINEMAPS_MAP_INFO (set, map_kind)->maps;\n-}\n-\n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline line_map * &\n-LINEMAPS_MAPS (line_maps *set, bool map_kind)\n-{\n-  return LINEMAPS_MAP_INFO (set, map_kind)->maps;\n-}\n-\n /* Returns the number of allocated maps so far. MAP_KIND shall be TRUE\n    if we are interested in macro maps, FALSE otherwise.  */\n inline unsigned int\n LINEMAPS_ALLOCATED (const line_maps *set, bool map_kind)\n {\n-  return LINEMAPS_MAP_INFO (set, map_kind)->allocated;\n+  if (map_kind)\n+    return set->info_macro.allocated;\n+  else\n+    return set->info_ordinary.allocated;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline unsigned int &\n LINEMAPS_ALLOCATED (line_maps *set, bool map_kind)\n {\n-  return LINEMAPS_MAP_INFO (set, map_kind)->allocated;\n+  if (map_kind)\n+    return set->info_macro.allocated;\n+  else\n+    return set->info_ordinary.allocated;\n }\n \n /* Returns the number of used maps so far. MAP_KIND shall be TRUE if\n    we are interested in macro maps, FALSE otherwise.*/\n inline unsigned int\n LINEMAPS_USED (const line_maps *set, bool map_kind)\n {\n-  return LINEMAPS_MAP_INFO (set, map_kind)->used;\n+  if (map_kind)\n+    return set->info_macro.used;\n+  else\n+    return set->info_ordinary.used;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline unsigned int &\n LINEMAPS_USED (line_maps *set, bool map_kind)\n {\n-  return LINEMAPS_MAP_INFO (set, map_kind)->used;\n+  if (map_kind)\n+    return set->info_macro.used;\n+  else\n+    return set->info_ordinary.used;\n }\n \n /* Returns the index of the last map that was looked up with\n@@ -665,22 +670,31 @@ LINEMAPS_USED (line_maps *set, bool map_kind)\n inline unsigned int\n LINEMAPS_CACHE (const line_maps *set, bool map_kind)\n {\n-  return LINEMAPS_MAP_INFO (set, map_kind)->cache;\n+  if (map_kind)\n+    return set->info_macro.cache;\n+  else\n+    return set->info_ordinary.cache;\n }\n \n /* As above, but by reference (e.g. as an lvalue).  */\n \n inline unsigned int &\n LINEMAPS_CACHE (line_maps *set, bool map_kind)\n {\n-  return LINEMAPS_MAP_INFO (set, map_kind)->cache;\n+  if (map_kind)\n+    return set->info_macro.cache;\n+  else\n+    return set->info_ordinary.cache;\n }\n \n /* Return the map at a given index.  */\n inline line_map *\n LINEMAPS_MAP_AT (const line_maps *set, bool map_kind, int index)\n {\n-  return &(LINEMAPS_MAPS (set, map_kind)[index]);\n+  if (map_kind)\n+    return &set->info_macro.maps[index];\n+  else\n+    return &set->info_ordinary.maps[index];\n }\n \n /* Returns the last map used in the line table SET. MAP_KIND\n@@ -705,17 +719,19 @@ LINEMAPS_LAST_ALLOCATED_MAP (const line_maps *set, bool map_kind)\n \n /* Returns a pointer to the memory region where ordinary maps are\n    allocated in the line table SET.  */\n-inline line_map *\n+inline line_map_ordinary *\n LINEMAPS_ORDINARY_MAPS (const line_maps *set)\n {\n-  return LINEMAPS_MAPS (set, false);\n+  return set->info_ordinary.maps;\n }\n \n /* Returns the INDEXth ordinary map.  */\n-inline line_map *\n+inline line_map_ordinary *\n LINEMAPS_ORDINARY_MAP_AT (const line_maps *set, int index)\n {\n-  return LINEMAPS_MAP_AT (set, false, index);\n+  linemap_assert (index >= 0);\n+  linemap_assert ((unsigned int)index < set->info_ordinary.used);\n+  return &set->info_ordinary.maps[index];\n }\n \n /* Return the number of ordinary maps allocated in the line table\n@@ -751,33 +767,35 @@ LINEMAPS_ORDINARY_CACHE (line_maps *set)\n \n /* Returns a pointer to the last ordinary map used in the line table\n    SET.  */\n-inline line_map *\n+inline line_map_ordinary *\n LINEMAPS_LAST_ORDINARY_MAP (const line_maps *set)\n {\n-  return LINEMAPS_LAST_MAP (set, false);\n+  return (line_map_ordinary *)LINEMAPS_LAST_MAP (set, false);\n }\n \n /* Returns a pointer to the last ordinary map allocated the line table\n    SET.  */\n-inline line_map *\n+inline line_map_ordinary *\n LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP (const line_maps *set)\n {\n-  return LINEMAPS_LAST_ALLOCATED_MAP (set, false);\n+  return (line_map_ordinary *)LINEMAPS_LAST_ALLOCATED_MAP (set, false);\n }\n \n /* Returns a pointer to the beginning of the region where macro maps\n    are allcoated.  */\n-inline line_map *\n+inline line_map_macro *\n LINEMAPS_MACRO_MAPS (const line_maps *set)\n {\n-  return LINEMAPS_MAPS (set, true);\n+  return set->info_macro.maps;\n }\n \n /* Returns the INDEXth macro map.  */\n-inline line_map *\n+inline line_map_macro *\n LINEMAPS_MACRO_MAP_AT (const line_maps *set, int index)\n {\n-  return LINEMAPS_MAP_AT (set, true, index);\n+  linemap_assert (index >= 0);\n+  linemap_assert ((unsigned int)index < set->info_macro.used);\n+  return &set->info_macro.maps[index];\n }\n \n /* Returns the number of macro maps that were allocated in the line\n@@ -812,10 +830,10 @@ LINEMAPS_MACRO_CACHE (line_maps *set)\n }\n \n /* Returns the last macro map used in the line table SET.  */\n-inline line_map *\n+inline line_map_macro *\n LINEMAPS_LAST_MACRO_MAP (const line_maps *set)\n {\n-  return LINEMAPS_LAST_MAP (set, true);\n+  return (line_map_macro *)LINEMAPS_LAST_MAP (set, true);\n }\n \n /* Returns the lowest location [of a token resulting from macro\n@@ -829,10 +847,10 @@ LINEMAPS_MACRO_LOWEST_LOCATION (const line_maps *set)\n }\n \n /* Returns the last macro map allocated in the line table SET.  */\n-inline line_map *\n+inline line_map_macro *\n LINEMAPS_LAST_ALLOCATED_MACRO_MAP (const line_maps *set)\n {\n-  return LINEMAPS_LAST_ALLOCATED_MAP (set, true);\n+  return (line_map_macro *)LINEMAPS_LAST_ALLOCATED_MAP (set, true);\n }\n \n extern void location_adhoc_data_fini (struct line_maps *);\n@@ -913,7 +931,7 @@ extern const struct line_map *linemap_lookup\n bool linemap_tracks_macro_expansion_locs_p (struct line_maps *);\n \n /* Return the name of the macro associated to MACRO_MAP.  */\n-const char* linemap_map_get_macro_name (const struct line_map*);\n+const char* linemap_map_get_macro_name (const line_map_macro *);\n \n /* Return a positive value if LOCATION is the locus of a token that is\n    located in a system header, O otherwise. It returns 1 if LOCATION\n@@ -940,67 +958,65 @@ const int RESERVED_LOCATION_COUNT = 2;\n \n /* Converts a map and a source_location to source line.  */\n inline linenum_type\n-SOURCE_LINE (const struct line_map *map, source_location loc)\n+SOURCE_LINE (const line_map_ordinary *ord_map, source_location loc)\n {\n-  return ((loc - linemap_check_ordinary (map)->start_location)\n-\t  >> map->d.ordinary.column_bits) + map->d.ordinary.to_line;\n+  return ((loc - ord_map->start_location)\n+\t  >> ord_map->column_bits) + ord_map->to_line;\n }\n \n /* Convert a map and source_location to source column number.  */\n inline linenum_type\n-SOURCE_COLUMN (const struct line_map *map, source_location loc)\n+SOURCE_COLUMN (const line_map_ordinary *ord_map, source_location loc)\n {\n-  return ((loc - linemap_check_ordinary (map)->start_location)\n-\t  & ((1 << map->d.ordinary.column_bits) - 1));\n+  return ((loc - ord_map->start_location)\n+\t  & ((1 << ord_map->column_bits) - 1));\n }\n \n /* Return the location of the last source line within an ordinary\n    map.  */\n inline source_location\n-LAST_SOURCE_LINE_LOCATION (const struct line_map *map)\n+LAST_SOURCE_LINE_LOCATION (const line_map_ordinary *map)\n {\n-  return (((linemap_check_ordinary (map)[1].start_location - 1\n+  return (((map[1].start_location - 1\n \t    - map->start_location)\n-\t   & ~((1 << map->d.ordinary.column_bits) - 1))\n+\t   & ~((1 << map->column_bits) - 1))\n \t  + map->start_location);\n }\n \n /* Returns the last source line number within an ordinary map.  This\n    is the (last) line of the #include, or other directive, that caused\n    a map change.  */\n-\n inline linenum_type\n-LAST_SOURCE_LINE (const struct line_map *map)\n+LAST_SOURCE_LINE (const line_map_ordinary *map)\n {\n   return SOURCE_LINE (map, LAST_SOURCE_LINE_LOCATION (map));\n }\n \n /* Return the last column number within an ordinary map.  */\n \n inline linenum_type\n-LAST_SOURCE_COLUMN (const struct line_map *map)\n+LAST_SOURCE_COLUMN (const line_map_ordinary *map)\n {\n   return SOURCE_COLUMN (map, LAST_SOURCE_LINE_LOCATION (map));\n }\n \n /* Returns the map a given map was included from, or NULL if the map\n    belongs to the main file, i.e, a file that wasn't included by\n    another one.  */\n-\n-inline struct line_map *\n-INCLUDED_FROM (struct line_maps *set, const struct line_map *map)\n+inline line_map_ordinary *\n+INCLUDED_FROM (struct line_maps *set, const line_map_ordinary *ord_map)\n {\n-  return ((linemap_check_ordinary (map)->d.ordinary.included_from == -1)\n+  return ((ord_map->included_from == -1)\n \t  ? NULL\n-\t  : (&LINEMAPS_ORDINARY_MAPS (set)[(map)->d.ordinary.included_from]));\n+\t  : LINEMAPS_ORDINARY_MAP_AT (set, ord_map->included_from));\n }\n \n /* True if the map is at the bottom of the include stack.  */\n \n inline bool\n-MAIN_FILE_P (const struct line_map *map)\n+MAIN_FILE_P (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.included_from < 0;\n+  return ord_map->included_from < 0;\n }\n \n /* Encode and return a source_location from a column number. The\n@@ -1013,7 +1029,7 @@ linemap_position_for_column (struct line_maps *, unsigned int);\n /* Encode and return a source location from a given line and\n    column.  */\n source_location\n-linemap_position_for_line_and_column (const struct line_map *,\n+linemap_position_for_line_and_column (const line_map_ordinary *,\n \t\t\t\t      linenum_type, unsigned int);\n \n /* Encode and return a source_location starting from location LOC and\n@@ -1026,26 +1042,26 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n \n /* Return the file this map is for.  */\n inline const char *\n-LINEMAP_FILE (const struct line_map *map)\n+LINEMAP_FILE (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.to_file;\n+  return ord_map->to_file;\n }\n \n /* Return the line number this map started encoding location from.  */\n inline linenum_type\n-LINEMAP_LINE (const struct line_map *map)\n+LINEMAP_LINE (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.to_line;\n+  return ord_map->to_line;\n }\n \n /* Return a positive value if map encodes locations from a system\n    header, 0 otherwise. Returns 1 if MAP encodes locations in a\n    system header and 2 if it encodes locations in a C system header\n    that therefore needs to be extern \"C\" protected in C++.  */\n inline unsigned char\n-LINEMAP_SYSP (const struct line_map *map)\n+LINEMAP_SYSP (const line_map_ordinary *ord_map)\n {\n-  return linemap_check_ordinary (map)->d.ordinary.sysp;\n+  return ord_map->sysp;\n }\n \n /* Return a positive value if PRE denotes the location of a token that\n@@ -1144,7 +1160,7 @@ enum location_resolution_kind\n source_location linemap_resolve_location (struct line_maps *,\n \t\t\t\t\t  source_location loc,\n \t\t\t\t\t  enum location_resolution_kind lrk,\n-\t\t\t\t\t  const struct line_map **loc_map);\n+\t\t\t\t\t  const line_map_ordinary **loc_map);\n \n /* Suppose that LOC is the virtual location of a token coming from the\n    expansion of a macro M.  This function then steps up to get the"}, {"sha": "95cf9c2bfd0a500bba5dec4c65b5498cd51a1e3d", "filename": "libcpp/internal.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -68,7 +68,7 @@ struct cset_converter\n \n #define CPP_INCREMENT_LINE(PFILE, COLS_HINT) do { \\\n     const struct line_maps *line_table = PFILE->line_table; \\\n-    const struct line_map *map = \\\n+    const struct line_map_ordinary *map = \\\n       LINEMAPS_LAST_ORDINARY_MAP (line_table); \\\n     linenum_type line = SOURCE_LINE (map, line_table->highest_line); \\\n     linemap_line_start (PFILE->line_table, line + 1, COLS_HINT); \\\n@@ -833,10 +833,10 @@ ufputs (const unsigned char *s, FILE *f)\n    of the macro, rather than the the location of the first character\n    of the macro.  NUM_TOKENS is the number of tokens that are part of\n    the replacement-list of MACRO.  */\n-const struct line_map *linemap_enter_macro (struct line_maps *,\n-\t\t\t\t\t    struct cpp_hashnode*,\n-\t\t\t\t\t    source_location,\n-\t\t\t\t\t    unsigned int);\n+const line_map_macro *linemap_enter_macro (struct line_maps *,\n+\t\t\t\t\t   struct cpp_hashnode*,\n+\t\t\t\t\t   source_location,\n+\t\t\t\t\t   unsigned int);\n \n /* Create and return a virtual location for a token that is part of a\n    macro expansion-list at a macro expansion point.  See the comment\n@@ -860,7 +860,7 @@ const struct line_map *linemap_enter_macro (struct line_maps *,\n    MACRO_DEFINITION_LOC is the location in the macro definition,\n    either of the token itself or of a macro parameter that it\n    replaces.  */\n-source_location linemap_add_macro_token (const struct line_map *,\n+source_location linemap_add_macro_token (const line_map_macro *,\n \t\t\t\t\t unsigned int,\n \t\t\t\t\t source_location,\n \t\t\t\t\t source_location);"}, {"sha": "e262df488f7d7e48c7ac1276d086698221b939cf", "filename": "libcpp/line-map.c", "status": "modified", "additions": 136, "deletions": 101, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -26,25 +26,25 @@ along with this program; see the file COPYING3.  If not see\n #include \"internal.h\"\n #include \"hashtab.h\"\n \n-static void trace_include (const struct line_maps *, const struct line_map *);\n-static const struct line_map * linemap_ordinary_map_lookup (struct line_maps *,\n-\t\t\t\t\t\t\t    source_location);\n-static const struct line_map* linemap_macro_map_lookup (struct line_maps *,\n-\t\t\t\t\t\t\tsource_location);\n+static void trace_include (const struct line_maps *, const line_map_ordinary *);\n+static const line_map_ordinary * linemap_ordinary_map_lookup (struct line_maps *,\n+\t\t\t\t\t\t\t      source_location);\n+static const line_map_macro* linemap_macro_map_lookup (struct line_maps *,\n+\t\t\t\t\t\t       source_location);\n static source_location linemap_macro_map_loc_to_def_point\n-(const struct line_map*, source_location);\n+(const line_map_macro *, source_location);\n static source_location linemap_macro_map_loc_unwind_toward_spelling\n-(const struct line_map*, source_location);\n+(const line_map_macro *, source_location);\n static source_location linemap_macro_map_loc_to_exp_point\n-(const struct line_map*, source_location);\n+(const line_map_macro *, source_location);\n static source_location linemap_macro_loc_to_spelling_point\n-(struct line_maps *, source_location, const struct line_map **);\n+(struct line_maps *, source_location, const line_map_ordinary **);\n static source_location linemap_macro_loc_to_def_point (struct line_maps *,\n \t\t\t\t\t\t       source_location,\n-\t\t\t\t\t\t       const struct line_map **);\n+\t\t\t\t\t\t       const line_map_ordinary **);\n static source_location linemap_macro_loc_to_exp_point (struct line_maps *,\n \t\t\t\t\t\t       source_location,\n-\t\t\t\t\t\t       const struct line_map **);\n+\t\t\t\t\t\t       const line_map_ordinary **);\n \n /* Counters defined in macro.c.  */\n extern unsigned num_expanded_macros_counter;\n@@ -191,7 +191,7 @@ linemap_init (struct line_maps *set,\n void\n linemap_check_files_exited (struct line_maps *set)\n {\n-  const struct line_map *map;\n+  const line_map_ordinary *map;\n   /* Depending upon whether we are handling preprocessed input or\n      not, this can be a user error or an ICE.  */\n   for (map = LINEMAPS_LAST_ORDINARY_MAP (set);\n@@ -227,6 +227,10 @@ new_linemap (struct line_maps *set,\n       line_map_round_alloc_size_func round_alloc_size =\n \tset->round_alloc_size;\n \n+      size_t map_size = (macro_map_p\n+\t\t\t ? sizeof (line_map_macro)\n+\t\t\t : sizeof (line_map_ordinary));\n+\n       /* We are going to execute some dance to try to reduce the\n \t overhead of the memory allocator, in case we are using the\n \t ggc-page.c one.\n@@ -237,7 +241,7 @@ new_linemap (struct line_maps *set,\n \n       alloc_size =\n \t(2 * LINEMAPS_ALLOCATED (set, macro_map_p) +  256)\n-\t* sizeof (struct line_map);\n+\t* map_size;\n \n       /* Get the actual size of memory that is going to be allocated\n \t by the allocator.  */\n@@ -248,25 +252,37 @@ new_linemap (struct line_maps *set,\n \t Let's get back to the number of macro map that amounts\n \t to.  */\n       LINEMAPS_ALLOCATED (set, macro_map_p) =\n-\talloc_size / (sizeof (struct line_map));\n+\talloc_size / map_size;\n \n       /* And now let's really do the re-allocation.  */\n-      LINEMAPS_MAPS (set, macro_map_p) =\n-\t(struct line_map *) (*reallocator)\n-\t(LINEMAPS_MAPS (set, macro_map_p),\n-\t (LINEMAPS_ALLOCATED (set, macro_map_p)\n-\t  * sizeof (struct line_map)));\n-\n-      result =\n-\t&LINEMAPS_MAPS (set, macro_map_p)[LINEMAPS_USED (set, macro_map_p)];\n+      if (macro_map_p)\n+\t{\n+\t  set->info_macro.maps\n+\t    = (line_map_macro *) (*reallocator) (set->info_macro.maps,\n+\t\t\t\t\t\t (LINEMAPS_ALLOCATED (set, macro_map_p)\n+\t\t\t\t\t\t  * map_size));\n+\t  result = &set->info_macro.maps[LINEMAPS_USED (set, macro_map_p)];\n+\t}\n+      else\n+\t{\n+\t  set->info_ordinary.maps =\n+\t    (line_map_ordinary *) (*reallocator) (set->info_ordinary.maps,\n+\t\t\t\t\t\t  (LINEMAPS_ALLOCATED (set, macro_map_p)\n+\t\t\t\t\t\t   * map_size));\n+\t  result = &set->info_ordinary.maps[LINEMAPS_USED (set, macro_map_p)];\n+\t}\n       memset (result, 0,\n \t      ((LINEMAPS_ALLOCATED (set, macro_map_p)\n \t\t- LINEMAPS_USED (set, macro_map_p))\n-\t       * sizeof (struct line_map)));\n+\t       * map_size));\n     }\n   else\n-    result =\n-      &LINEMAPS_MAPS (set, macro_map_p)[LINEMAPS_USED (set, macro_map_p)];\n+    {\n+      if (macro_map_p)\n+\tresult = &set->info_macro.maps[LINEMAPS_USED (set, macro_map_p)];\n+      else\n+\tresult = &set->info_ordinary.maps[LINEMAPS_USED (set, macro_map_p)];\n+    }\n \n   LINEMAPS_USED (set, macro_map_p)++;\n \n@@ -291,7 +307,6 @@ const struct line_map *\n linemap_add (struct line_maps *set, enum lc_reason reason,\n \t     unsigned int sysp, const char *to_file, linenum_type to_line)\n {\n-  struct line_map *map;\n   source_location start_location = set->highest_location + 1;\n \n   linemap_assert (!(LINEMAPS_ORDINARY_USED (set)\n@@ -311,7 +326,8 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n       return NULL;\n     }\n \n-  map = new_linemap (set, reason);\n+  linemap_assert (reason != LC_ENTER_MACRO);\n+  line_map_ordinary *map = linemap_check_ordinary (new_linemap (set, reason));\n \n   if (to_file && *to_file == '\\0' && reason != LC_RENAME_VERBATIM)\n     to_file = \"<stdin>\";\n@@ -325,7 +341,7 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n \t location inside the \"includer\" right after the #include\n \t \"included\", this variable points the map in use right before the\n \t #include \"included\", inside the same \"includer\" file.  */\n-      struct line_map *from;\n+      line_map_ordinary *from;\n       bool error;\n \n       if (MAIN_FILE_P (map - 1))\n@@ -365,7 +381,6 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n \t}\n     }\n \n-  linemap_assert (reason != LC_ENTER_MACRO);\n   ORDINARY_MAP_IN_SYSTEM_HEADER_P (map) = sysp;\n   MAP_START_LOCATION (map) = start_location;\n   ORDINARY_MAP_FILE_NAME (map) = to_file;\n@@ -429,11 +444,11 @@ linemap_tracks_macro_expansion_locs_p (struct line_maps *set)\n    this function cannot encode {line,column} pairs into locations of\n    macro tokens anymore.  */\n \n-const struct line_map *\n+const line_map_macro *\n linemap_enter_macro (struct line_maps *set, struct cpp_hashnode *macro_node,\n \t\t     source_location expansion, unsigned int num_tokens)\n {\n-  struct line_map *map;\n+  line_map_macro *map;\n   source_location start_location;\n   /* Cast away extern \"C\" from the type of xrealloc.  */\n   line_map_realloc reallocator = (set->reallocator\n@@ -447,7 +462,7 @@ linemap_enter_macro (struct line_maps *set, struct cpp_hashnode *macro_node,\n     /* We ran out of macro map space.   */\n     return NULL;\n \n-  map = new_linemap (set, LC_ENTER_MACRO);\n+  map = linemap_check_macro (new_linemap (set, LC_ENTER_MACRO));\n \n   MAP_START_LOCATION (map) = start_location;\n   MACRO_MAP_MACRO (map) = macro_node;\n@@ -489,7 +504,7 @@ linemap_enter_macro (struct line_maps *set, struct cpp_hashnode *macro_node,\n    replaces.  */\n \n source_location\n-linemap_add_macro_token (const struct line_map *map,\n+linemap_add_macro_token (const line_map_macro *map,\n \t\t\t unsigned int token_no,\n \t\t\t source_location orig_loc,\n \t\t\t source_location orig_parm_replacement_loc)\n@@ -516,7 +531,7 @@ source_location\n linemap_line_start (struct line_maps *set, linenum_type to_line,\n \t\t    unsigned int max_column_hint)\n {\n-  struct line_map *map = LINEMAPS_LAST_ORDINARY_MAP (set);\n+  line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (set);\n   source_location highest = set->highest_location;\n   source_location r;\n   linenum_type last_line =\n@@ -559,11 +574,12 @@ linemap_line_start (struct line_maps *set, linenum_type to_line,\n       if (line_delta < 0\n \t  || last_line != ORDINARY_MAP_STARTING_LINE_NUMBER (map)\n \t  || SOURCE_COLUMN (map, highest) >= (1U << column_bits))\n-\tmap = (struct line_map *) linemap_add (set, LC_RENAME,\n-\t\t\t\t\t       ORDINARY_MAP_IN_SYSTEM_HEADER_P\n-\t\t\t\t\t       (map),\n-\t\t\t\t\t       ORDINARY_MAP_FILE_NAME (map),\n-\t\t\t\t\t       to_line);\n+\tmap = linemap_check_ordinary\n+\t        (const_cast <line_map *>\n+\t\t  (linemap_add (set, LC_RENAME,\n+\t\t\t\tORDINARY_MAP_IN_SYSTEM_HEADER_P (map),\n+\t\t\t\tORDINARY_MAP_FILE_NAME (map),\n+\t\t\t\tto_line)));\n       SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (map, column_bits);\n       r = (MAP_START_LOCATION (map)\n \t   + ((to_line - ORDINARY_MAP_STARTING_LINE_NUMBER (map))\n@@ -607,7 +623,7 @@ linemap_position_for_column (struct line_maps *set, unsigned int to_column)\n \t}\n       else\n \t{\n-\t  struct line_map *map = LINEMAPS_LAST_ORDINARY_MAP (set);\n+\t  line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (set);\n \t  r = linemap_line_start (set, SOURCE_LINE (map, r), to_column + 50);\n \t}\n     }\n@@ -621,16 +637,16 @@ linemap_position_for_column (struct line_maps *set, unsigned int to_column)\n    column.  */\n \n source_location\n-linemap_position_for_line_and_column (const struct line_map *map,\n+linemap_position_for_line_and_column (const line_map_ordinary *ord_map,\n \t\t\t\t      linenum_type line,\n \t\t\t\t      unsigned column)\n {\n-  linemap_assert (ORDINARY_MAP_STARTING_LINE_NUMBER (map) <= line);\n+  linemap_assert (ORDINARY_MAP_STARTING_LINE_NUMBER (ord_map) <= line);\n \n-  return (MAP_START_LOCATION (map)\n-\t  + ((line - ORDINARY_MAP_STARTING_LINE_NUMBER (map))\n-\t     << ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (map))\n-\t  + (column & ((1 << ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (map)) - 1)));\n+  return (MAP_START_LOCATION (ord_map)\n+\t  + ((line - ORDINARY_MAP_STARTING_LINE_NUMBER (ord_map))\n+\t     << ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (ord_map))\n+\t  + (column & ((1 << ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (ord_map)) - 1)));\n }\n \n /* Encode and return a source_location starting from location LOC and\n@@ -642,7 +658,7 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n \t\t\t\t     source_location loc,\n \t\t\t\t     unsigned int offset)\n {\n-  const struct line_map * map = NULL;\n+  const line_map_ordinary * map = NULL;\n \n   /* This function does not support virtual locations yet.  */\n   if (linemap_assert_fails\n@@ -671,7 +687,8 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n       return loc;\n \n   offset += SOURCE_COLUMN (map, loc);\n-  if (linemap_assert_fails (offset < (1u << map->d.ordinary.column_bits)))\n+  if (linemap_assert_fails\n+        (offset < (1u << map->column_bits)))\n     return loc;\n \n   source_location r = \n@@ -703,11 +720,11 @@ linemap_lookup (struct line_maps *set, source_location line)\n    monotonic increasing, and so the list is sorted and we can use a\n    binary search.  */\n \n-static const struct line_map *\n+static const line_map_ordinary *\n linemap_ordinary_map_lookup (struct line_maps *set, source_location line)\n {\n   unsigned int md, mn, mx;\n-  const struct line_map *cached, *result;\n+  const line_map_ordinary *cached, *result;\n \n   if (IS_ADHOC_LOC (line))\n     line = set->location_adhoc_data_map.data[line & MAX_SOURCE_LOCATION].locus;\n@@ -751,11 +768,11 @@ linemap_ordinary_map_lookup (struct line_maps *set, source_location line)\n    monotonic decreasing, and so the list is sorted and we can use a\n    binary search.  */\n \n-static const struct line_map*\n+static const line_map_macro *\n linemap_macro_map_lookup (struct line_maps *set, source_location line)\n {\n   unsigned int md, mn, mx;\n-  const struct line_map *cached, *result;\n+  const struct line_map_macro *cached, *result;\n \n   if (IS_ADHOC_LOC (line))\n     line = set->location_adhoc_data_map.data[line & MAX_SOURCE_LOCATION].locus;\n@@ -811,7 +828,7 @@ linemap_macro_expansion_map_p (const struct line_map *map)\n    line-map.h to understand what a macro expansion point is.  */\n \n static source_location\n-linemap_macro_map_loc_to_exp_point (const struct line_map *map,\n+linemap_macro_map_loc_to_exp_point (const line_map_macro *map,\n \t\t\t\t    source_location location ATTRIBUTE_UNUSED)\n {\n   linemap_assert (linemap_macro_expansion_map_p (map)\n@@ -831,7 +848,7 @@ linemap_macro_map_loc_to_exp_point (const struct line_map *map,\n    macro.  */\n \n static source_location\n-linemap_macro_map_loc_to_def_point (const struct line_map *map,\n+linemap_macro_map_loc_to_def_point (const line_map_macro *map,\n \t\t\t\t    source_location location)\n {\n   unsigned token_no;\n@@ -855,7 +872,7 @@ linemap_macro_map_loc_to_def_point (const struct line_map *map,\n    In other words, this returns the xI location presented in the\n    comments of line_map_macro above.  */\n source_location\n-linemap_macro_map_loc_unwind_toward_spelling (const struct line_map* map,\n+linemap_macro_map_loc_unwind_toward_spelling (const line_map_macro* map,\n \t\t\t\t\t      source_location location)\n {\n   unsigned token_no;\n@@ -882,7 +899,7 @@ int\n linemap_get_expansion_line (struct line_maps *set,\n \t\t\t    source_location location)\n {\n-  const struct line_map *map = NULL;\n+  const line_map_ordinary *map = NULL;\n \n   if (IS_ADHOC_LOC (location))\n     location = set->location_adhoc_data_map.data[location\n@@ -910,7 +927,7 @@ const char*\n linemap_get_expansion_filename (struct line_maps *set,\n \t\t\t\tsource_location location)\n {\n-  const struct line_map *map = NULL;\n+  const struct line_map_ordinary *map = NULL;\n \n   if (IS_ADHOC_LOC (location))\n     location = set->location_adhoc_data_map.data[location\n@@ -928,7 +945,7 @@ linemap_get_expansion_filename (struct line_maps *set,\n /* Return the name of the macro associated to MACRO_MAP.  */\n \n const char*\n-linemap_map_get_macro_name (const struct line_map* macro_map)\n+linemap_map_get_macro_name (const line_map_macro *macro_map)\n {\n   linemap_assert (macro_map && linemap_macro_expansion_map_p (macro_map));\n   return (const char*) NODE_NAME (MACRO_MAP_MACRO (macro_map));\n@@ -965,16 +982,18 @@ linemap_location_in_system_header_p (struct line_maps *set,\n \t{\n \t  if (!linemap_macro_expansion_map_p (map))\n \t    /* It's a normal token.  */\n-\t    return LINEMAP_SYSP (map);\n+\t    return LINEMAP_SYSP (linemap_check_ordinary (map));\n \t  else\n \t    {\n+\t      const line_map_macro *macro_map = linemap_check_macro (map);\n+\n \t      /* It's a token resulting from a macro expansion.  */\n \t      source_location loc =\n-\t\tlinemap_macro_map_loc_unwind_toward_spelling (map, location);\n+\t\tlinemap_macro_map_loc_unwind_toward_spelling (macro_map, location);\n \t      if (loc < RESERVED_LOCATION_COUNT)\n \t\t/* This token might come from a built-in macro.  Let's\n \t\t   look at where that macro got expanded.  */\n-\t\tlocation = linemap_macro_map_loc_to_exp_point (map, location);\n+\t\tlocation = linemap_macro_map_loc_to_exp_point (macro_map, location);\n \t      else\n \t\tlocation = loc;\n \t    }\n@@ -1025,12 +1044,14 @@ first_map_in_common_1 (struct line_maps *set,\n     {\n       if (MAP_START_LOCATION (map0) < MAP_START_LOCATION (map1))\n \t{\n-\t  l0 = linemap_macro_map_loc_to_exp_point (map0, l0);\n+\t  l0 = linemap_macro_map_loc_to_exp_point (linemap_check_macro (map0),\n+\t\t\t\t\t\t   l0);\n \t  map0 = linemap_lookup (set, l0);\n \t}\n       else\n \t{\n-\t  l1 = linemap_macro_map_loc_to_exp_point (map1, l1);\n+\t  l1 = linemap_macro_map_loc_to_exp_point (linemap_check_macro (map1),\n+\t\t\t\t\t\t   l1);\n \t  map1 = linemap_lookup (set, l1);\n \t}\n     }\n@@ -1120,7 +1141,7 @@ linemap_compare_locations (struct line_maps *set,\n /* Print an include trace, for e.g. the -H option of the preprocessor.  */\n \n static void\n-trace_include (const struct line_maps *set, const struct line_map *map)\n+trace_include (const struct line_maps *set, const line_map_ordinary *map)\n {\n   unsigned int i = set->depth;\n \n@@ -1138,7 +1159,7 @@ trace_include (const struct line_maps *set, const struct line_map *map)\n static source_location\n linemap_macro_loc_to_spelling_point (struct line_maps *set,\n \t\t\t\t     source_location location,\n-\t\t\t\t     const struct line_map **original_map)\n+\t\t\t\t     const line_map_ordinary **original_map)\n {\n   struct line_map *map;\n \n@@ -1150,16 +1171,18 @@ linemap_macro_loc_to_spelling_point (struct line_maps *set,\n \n   while (true)\n     {\n-      map = (struct line_map*) linemap_lookup (set, location);\n+      map = const_cast <line_map *> (linemap_lookup (set, location));\n       if (!linemap_macro_expansion_map_p (map))\n \tbreak;\n \n-      location =\n-\tlinemap_macro_map_loc_unwind_toward_spelling (map, location);\n+      location\n+\t= linemap_macro_map_loc_unwind_toward_spelling\n+\t    (linemap_check_macro (map),\n+\t     location);\n     }\n \n   if (original_map)\n-    *original_map = map;\n+    *original_map = linemap_check_ordinary (map);\n   return location;\n }\n \n@@ -1176,7 +1199,7 @@ linemap_macro_loc_to_spelling_point (struct line_maps *set,\n static source_location\n linemap_macro_loc_to_def_point (struct line_maps *set,\n \t\t\t\tsource_location location,\n-\t\t\t\tconst struct line_map **original_map)\n+\t\t\t\tconst line_map_ordinary **original_map)\n {\n   struct line_map *map;\n \n@@ -1188,16 +1211,17 @@ linemap_macro_loc_to_def_point (struct line_maps *set,\n \n   while (true)\n     {\n-      map = (struct line_map*) linemap_lookup (set, location);\n+      map = const_cast <line_map *> (linemap_lookup (set, location));\n       if (!linemap_macro_expansion_map_p (map))\n \tbreak;\n \n       location =\n-\tlinemap_macro_map_loc_to_def_point (map, location);\n+\tlinemap_macro_map_loc_to_def_point (linemap_check_macro (map),\n+\t\t\t\t\t    location);\n     }\n \n   if (original_map)\n-    *original_map = map;\n+    *original_map = linemap_check_ordinary (map);\n   return location;\n }\n \n@@ -1218,7 +1242,7 @@ linemap_macro_loc_to_def_point (struct line_maps *set,\n static source_location\n linemap_macro_loc_to_exp_point (struct line_maps *set,\n \t\t\t\tsource_location location,\n-\t\t\t\tconst struct line_map **original_map)\n+\t\t\t\tconst line_map_ordinary **original_map)\n {\n   struct line_map *map;\n \n@@ -1230,14 +1254,15 @@ linemap_macro_loc_to_exp_point (struct line_maps *set,\n \n   while (true)\n     {\n-      map = (struct line_map*) linemap_lookup (set, location);\n+      map = const_cast <line_map *> (linemap_lookup (set, location));\n       if (!linemap_macro_expansion_map_p (map))\n \tbreak;\n-      location = linemap_macro_map_loc_to_exp_point (map, location);\n+      location = linemap_macro_map_loc_to_exp_point (linemap_check_macro (map),\n+\t\t\t\t\t\t     location);\n     }\n \n   if (original_map)\n-    *original_map = map;\n+    *original_map = linemap_check_ordinary (map);\n   return location;\n }\n \n@@ -1293,7 +1318,7 @@ source_location\n linemap_resolve_location (struct line_maps *set,\n \t\t\t  source_location loc,\n \t\t\t  enum location_resolution_kind lrk,\n-\t\t\t  const struct line_map **map)\n+\t\t\t  const line_map_ordinary **map)\n {\n   if (IS_ADHOC_LOC (loc))\n     loc = set->location_adhoc_data_map.data[loc & MAX_SOURCE_LOCATION].locus;\n@@ -1343,18 +1368,19 @@ linemap_unwind_toward_expansion (struct line_maps *set,\n \t\t\t\t const struct line_map **map)\n {\n   source_location resolved_location;\n+  const line_map_macro *macro_map = linemap_check_macro (*map);\n   const struct line_map *resolved_map;\n \n   if (IS_ADHOC_LOC (loc))\n     loc = set->location_adhoc_data_map.data[loc & MAX_SOURCE_LOCATION].locus;\n \n   resolved_location =\n-    linemap_macro_map_loc_unwind_toward_spelling (*map, loc);\n+    linemap_macro_map_loc_unwind_toward_spelling (macro_map, loc);\n   resolved_map = linemap_lookup (set, resolved_location);\n \n   if (!linemap_macro_expansion_map_p (resolved_map))\n     {\n-      resolved_location = linemap_macro_map_loc_to_exp_point (*map, loc);\n+      resolved_location = linemap_macro_map_loc_to_exp_point (macro_map, loc);\n       resolved_map = linemap_lookup (set, resolved_location);\n     }\n \n@@ -1382,7 +1408,8 @@ linemap_unwind_to_first_non_reserved_loc (struct line_maps *set,\n \t\t\t\t\t  const struct line_map **map)\n {\n   source_location resolved_loc;\n-  const struct line_map *map0 = NULL, *map1 = NULL;\n+  const struct line_map *map0 = NULL;\n+  const line_map_ordinary *map1 = NULL;\n \n   if (IS_ADHOC_LOC (loc))\n     loc = set->location_adhoc_data_map.data[loc & MAX_SOURCE_LOCATION].locus;\n@@ -1453,10 +1480,12 @@ linemap_expand_location (struct line_maps *set,\n       if (linemap_location_from_macro_expansion_p (set, loc))\n \tabort ();\n \n-      xloc.file = LINEMAP_FILE (map);\n-      xloc.line = SOURCE_LINE (map, loc);\n-      xloc.column = SOURCE_COLUMN (map, loc);\n-      xloc.sysp = LINEMAP_SYSP (map) != 0;\n+      const line_map_ordinary *ord_map = linemap_check_ordinary (map);\n+\n+      xloc.file = LINEMAP_FILE (ord_map);\n+      xloc.line = SOURCE_LINE (ord_map, loc);\n+      xloc.column = SOURCE_COLUMN (ord_map, loc);\n+      xloc.sysp = LINEMAP_SYSP (ord_map) != 0;\n     }\n \n   return xloc;\n@@ -1474,7 +1503,7 @@ linemap_dump (FILE *stream, struct line_maps *set, unsigned ix, bool is_macro)\n       = { \"LC_ENTER\", \"LC_LEAVE\", \"LC_RENAME\", \"LC_RENAME_VERBATIM\",\n \t  \"LC_ENTER_MACRO\" };\n   const char *reason;\n-  struct line_map *map;\n+  const line_map *map;\n \n   if (stream == NULL)\n     stream = stderr;\n@@ -1488,26 +1517,32 @@ linemap_dump (FILE *stream, struct line_maps *set, unsigned ix, bool is_macro)\n \n   fprintf (stream, \"Map #%u [%p] - LOC: %u - REASON: %s - SYSP: %s\\n\",\n \t   ix, (void *) map, map->start_location, reason,\n-\t   (!is_macro && ORDINARY_MAP_IN_SYSTEM_HEADER_P (map)) ? \"yes\" : \"no\");\n+\t   ((!is_macro\n+\t     && ORDINARY_MAP_IN_SYSTEM_HEADER_P (linemap_check_ordinary (map)))\n+\t    ? \"yes\" : \"no\"));\n   if (!is_macro)\n     {\n+      const line_map_ordinary *ord_map = linemap_check_ordinary (map);\n       unsigned includer_ix;\n-      struct line_map *includer_map;\n+      const line_map_ordinary *includer_map;\n \n-      includer_ix = ORDINARY_MAP_INCLUDER_FILE_INDEX (map);\n+      includer_ix = ORDINARY_MAP_INCLUDER_FILE_INDEX (ord_map);\n       includer_map = includer_ix < LINEMAPS_ORDINARY_USED (set)\n \t\t     ? LINEMAPS_ORDINARY_MAP_AT (set, includer_ix)\n \t\t     : NULL;\n \n-      fprintf (stream, \"File: %s:%d\\n\", ORDINARY_MAP_FILE_NAME (map),\n-\t       ORDINARY_MAP_STARTING_LINE_NUMBER (map));\n+      fprintf (stream, \"File: %s:%d\\n\", ORDINARY_MAP_FILE_NAME (ord_map),\n+\t       ORDINARY_MAP_STARTING_LINE_NUMBER (ord_map));\n       fprintf (stream, \"Included from: [%d] %s\\n\", includer_ix,\n \t       includer_map ? ORDINARY_MAP_FILE_NAME (includer_map) : \"None\");\n     }\n   else\n-    fprintf (stream, \"Macro: %s (%u tokens)\\n\",\n-\t     linemap_map_get_macro_name (map),\n-\t     MACRO_MAP_NUM_MACRO_TOKENS (map));\n+    {\n+      const line_map_macro *macro_map = linemap_check_macro (map);\n+      fprintf (stream, \"Macro: %s (%u tokens)\\n\",\n+\t       linemap_map_get_macro_name (macro_map),\n+\t       MACRO_MAP_NUM_MACRO_TOKENS (macro_map));\n+    }\n \n   fprintf (stream, \"\\n\");\n }\n@@ -1521,7 +1556,7 @@ linemap_dump_location (struct line_maps *set,\n \t\t       source_location loc,\n \t\t       FILE *stream)\n {\n-  const struct line_map *map;\n+  const line_map_ordinary *map;\n   source_location location;\n   const char *path = \"\", *from = \"\";\n   int l = -1, c = -1, s = -1, e = -1;\n@@ -1578,7 +1613,7 @@ linemap_get_file_highest_location (struct line_maps *set,\n   int i;\n   for (i = set->info_ordinary.used - 1; i >= 0; --i)\n     {\n-      const char *fname = set->info_ordinary.maps[i].d.ordinary.to_file;\n+      const char *fname = set->info_ordinary.maps[i].to_file;\n       if (fname && !filename_cmp (fname, file_name))\n \tbreak;\n     }\n@@ -1610,16 +1645,16 @@ linemap_get_statistics (struct line_maps *set,\n     macro_maps_allocated_size, macro_maps_used_size,\n     macro_maps_locations_size = 0, duplicated_macro_maps_locations_size = 0;\n \n-  struct line_map *cur_map;\n+  const line_map_macro *cur_map;\n \n   ordinary_maps_allocated_size =\n-    LINEMAPS_ORDINARY_ALLOCATED (set) * sizeof (struct line_map);\n+    LINEMAPS_ORDINARY_ALLOCATED (set) * sizeof (struct line_map_ordinary);\n \n   ordinary_maps_used_size =\n-    LINEMAPS_ORDINARY_USED (set) * sizeof (struct line_map);\n+    LINEMAPS_ORDINARY_USED (set) * sizeof (struct line_map_ordinary);\n \n   macro_maps_allocated_size =\n-    LINEMAPS_MACRO_ALLOCATED (set) * sizeof (struct line_map);\n+    LINEMAPS_MACRO_ALLOCATED (set) * sizeof (struct line_map_macro);\n \n   for (cur_map = LINEMAPS_MACRO_MAPS (set);\n        cur_map && cur_map <= LINEMAPS_LAST_MACRO_MAP (set);\n@@ -1642,7 +1677,7 @@ linemap_get_statistics (struct line_maps *set,\n     }\n \n   macro_maps_used_size =\n-    LINEMAPS_MACRO_USED (set) * sizeof (struct line_map);\n+    LINEMAPS_MACRO_USED (set) * sizeof (struct line_map_macro);\n \n   s->num_ordinary_maps_allocated = LINEMAPS_ORDINARY_ALLOCATED (set);\n   s->num_ordinary_maps_used = LINEMAPS_ORDINARY_USED (set);"}, {"sha": "f76e10b0b2e1153c93472b769c7b47b3b70889da", "filename": "libcpp/macro.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50b62468123005202598f2a88b59f9ca695eb8/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=0e50b62468123005202598f2a88b59f9ca695eb8", "patch": "@@ -141,15 +141,15 @@ static inline const cpp_token **tokens_buff_put_token_to (const cpp_token **,\n                                                           const cpp_token *,\n                                                           source_location,\n                                                           source_location,\n-                                                          const struct line_map *,\n+                                                          const line_map_macro *,\n                                                           unsigned int);\n \n static const cpp_token **tokens_buff_add_token (_cpp_buff *,\n \t\t\t\t\t\tsource_location *,\n \t\t\t\t\t\tconst cpp_token *,\n \t\t\t\t\t\tsource_location,\n \t\t\t\t\t\tsource_location,\n-\t\t\t\t\t\tconst struct line_map *,\n+\t\t\t\t\t\tconst line_map_macro *,\n \t\t\t\t\t\tunsigned int);\n static inline void tokens_buff_remove_last_token (_cpp_buff *);\n static void replace_args (cpp_reader *, cpp_hashnode *, cpp_macro *,\n@@ -195,7 +195,9 @@ _cpp_warn_if_unused_macro (cpp_reader *pfile, cpp_hashnode *node,\n       cpp_macro *macro = node->value.macro;\n \n       if (!macro->used\n-\t  && MAIN_FILE_P (linemap_lookup (pfile->line_table, macro->line)))\n+\t  && MAIN_FILE_P (linemap_check_ordinary\n+\t\t\t    (linemap_lookup (pfile->line_table,\n+\t\t\t\t\t     macro->line))))\n \tcpp_warning_with_line (pfile, CPP_W_UNUSED_MACROS, macro->line, 0,\n \t\t\t       \"macro \\\"%s\\\" is not used\", NODE_NAME (node));\n     }\n@@ -453,7 +455,7 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node, source_location loc)\n \t macro.  */\n       source_location *virt_locs = NULL;\n       _cpp_buff *token_buf = tokens_buff_new (pfile, 1, &virt_locs);\n-      const line_map * map =\n+      const line_map_macro * map =\n \tlinemap_enter_macro (pfile->line_table, node,\n \t\t\t\t\t    token->src_loc, 1);\n       tokens_buff_add_token (token_buf, virt_locs, token,\n@@ -1167,7 +1169,7 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n \t    {\n \t      unsigned int i;\n \t      const cpp_token *src = macro->exp.tokens;\n-\t      const struct line_map *map;\n+\t      const line_map_macro *map;\n \t      source_location *virt_locs = NULL;\n \t      _cpp_buff *macro_tokens\n \t\t= tokens_buff_new (pfile, tokens_count, &virt_locs);\n@@ -1535,7 +1537,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n   _cpp_buff *buff = NULL;\n   source_location *virt_locs = NULL;\n   unsigned int exp_count;\n-  const struct line_map *map = NULL;\n+  const line_map_macro *map = NULL;\n   int track_macro_exp;\n \n   /* First, fully macro-expand arguments, calculating the number of\n@@ -2066,7 +2068,7 @@ tokens_buff_put_token_to (const cpp_token **dest,\n \t\t\t  const cpp_token *token,\n \t\t\t  source_location virt_loc,\n \t\t\t  source_location parm_def_loc,\t\t\t  \n-\t\t\t  const struct line_map *map,\n+\t\t\t  const line_map_macro *map,\n \t\t\t  unsigned int macro_token_index)\n {\n   source_location macro_loc = virt_loc;\n@@ -2111,7 +2113,7 @@ tokens_buff_add_token (_cpp_buff *buffer,\n \t\t       const cpp_token *token,\n \t\t       source_location virt_loc,\n \t\t       source_location parm_def_loc,\n-\t\t       const struct line_map *map,\n+\t\t       const line_map_macro *map,\n \t\t       unsigned int macro_token_index)\n {\n   const cpp_token **result;"}]}