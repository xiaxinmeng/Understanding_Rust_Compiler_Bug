{"sha": "0ef9991d8767932f51fa97753c16058d17b29b18", "node_id": "C_kwDOANBUbNoAKDBlZjk5OTFkODc2NzkzMmY1MWZhOTc3NTNjMTYwNThkMTdiMjliMTg", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-12-06T15:41:29Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-12-08T13:52:55Z"}, "message": "Ensure arguments to range-op handler are supported.\n\n\tPR tree-optimization/107985\n\tgcc/\n\t* gimple-range-op.cc\n\t(gimple_range_op_handler::gimple_range_op_handler): Check if type\n\tof the operands is supported.\n\t* gimple-range.cc (gimple_ranger::prefill_stmt_dependencies): Do\n\tnot assert if here is no range-op handler.\n\n\tgcc/testsuite/\n\t* g++.dg/pr107985.C: New.", "tree": {"sha": "0a6bfb5dd99d68cca239dcfa6dedcf0119298d98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a6bfb5dd99d68cca239dcfa6dedcf0119298d98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ef9991d8767932f51fa97753c16058d17b29b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef9991d8767932f51fa97753c16058d17b29b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef9991d8767932f51fa97753c16058d17b29b18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef9991d8767932f51fa97753c16058d17b29b18/comments", "author": null, "committer": null, "parents": [{"sha": "bb2e5da7ef7740269ae95533179de8d186ee04bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2e5da7ef7740269ae95533179de8d186ee04bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2e5da7ef7740269ae95533179de8d186ee04bc"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "12068544bc5cffa9082b8b18f11c554b21220cac", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef9991d8767932f51fa97753c16058d17b29b18/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef9991d8767932f51fa97753c16058d17b29b18/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=0ef9991d8767932f51fa97753c16058d17b29b18", "patch": "@@ -148,6 +148,9 @@ gimple_range_op_handler::gimple_range_op_handler (gimple *s)\n \tcase GIMPLE_COND:\n \t  m_op1 = gimple_cond_lhs (m_stmt);\n \t  m_op2 = gimple_cond_rhs (m_stmt);\n+\t  // Check that operands are supported types.  One check is enough.\n+\t  if (!Value_Range::supports_type_p (TREE_TYPE (m_op1)))\n+\t    m_valid = false;\n \t  return;\n \tcase GIMPLE_ASSIGN:\n \t  m_op1 = gimple_range_base_of_assignment (m_stmt);\n@@ -164,6 +167,9 @@ gimple_range_op_handler::gimple_range_op_handler (gimple *s)\n \t    }\n \t  if (gimple_num_ops (m_stmt) >= 3)\n \t    m_op2 = gimple_assign_rhs2 (m_stmt);\n+\t  // Check that operands are supported types.  One check is enough.\n+\t  if ((m_op1 && !Value_Range::supports_type_p (TREE_TYPE (m_op1))))\n+\t    m_valid = false;\n \t  return;\n \tdefault:\n \t  gcc_unreachable ();"}, {"sha": "8c055826e176a6f6216c68365dd73d37df211f39", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef9991d8767932f51fa97753c16058d17b29b18/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef9991d8767932f51fa97753c16058d17b29b18/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=0ef9991d8767932f51fa97753c16058d17b29b18", "patch": "@@ -422,18 +422,20 @@ gimple_ranger::prefill_stmt_dependencies (tree ssa)\n       else\n \t{\n \t  gimple_range_op_handler handler (stmt);\n-\t  gcc_checking_assert (handler);\n-\t  tree op = handler.operand2 ();\n-\t  if (op)\n+\t  if (handler)\n \t    {\n-\t      Value_Range r (TREE_TYPE (op));\n-\t      prefill_name (r, op);\n-\t    }\n-\t  op = handler.operand1 ();\n-\t  if (op)\n-\t    {\n-\t      Value_Range r (TREE_TYPE (op));\n-\t      prefill_name (r, op);\n+\t      tree op = handler.operand2 ();\n+\t      if (op)\n+\t\t{\n+\t\t  Value_Range r (TREE_TYPE (op));\n+\t\t  prefill_name (r, op);\n+\t\t}\n+\t      op = handler.operand1 ();\n+\t      if (op)\n+\t\t{\n+\t\t  Value_Range r (TREE_TYPE (op));\n+\t\t  prefill_name (r, op);\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "8d244b54efbd262d071005aab885edcf81c40726", "filename": "gcc/testsuite/g++.dg/pr107985.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef9991d8767932f51fa97753c16058d17b29b18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107985.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef9991d8767932f51fa97753c16058d17b29b18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107985.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107985.C?ref=0ef9991d8767932f51fa97753c16058d17b29b18", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-vrp -fno-tree-ccp -fno-tree-forwprop -fno-tree-fre\" } */\n+\n+struct B {\n+  int f;\n+};\n+\n+struct D : public B {\n+};\n+\n+void foo() {\n+  D d;\n+  d.f = 7;\n+\n+  int B::* pfb = &B::f;\n+  int D::* pfd = pfb;\n+  int v = d.*pfd;\n+}"}]}