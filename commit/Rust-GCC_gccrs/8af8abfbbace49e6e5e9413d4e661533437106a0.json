{"sha": "8af8abfbbace49e6e5e9413d4e661533437106a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmOGFiZmJiYWNlNDllNmU1ZTk0MTNkNGU2NjE1MzM0MzcxMDZhMA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T08:01:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T16:40:02Z"}, "message": "Implement POINTER_DIFF_EXPR entry in range-op.\n\nI've seen cases in the upcoming jump threader enhancements where we see\na difference of two pointers that are known to be equivalent, and yet we\nfail to return 0 for the range.  This is because we have no working\nrange-op entry for POINTER_DIFF_EXPR.  The entry we currently have is\na mere placeholder to avoid ignoring POINTER_DIFF_EXPR's so\nadjust_pointer_diff_expr() could get a whack at it here:\n\n//\tdef = __builtin_memchr (arg, 0, sz)\n//\tn = def - arg\n//\n// The range for N can be narrowed to [0, PTRDIFF_MAX - 1].\n\nThis patch adds the relational magic to range-op, which we can just\nsteal from the minus_expr code.\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_minus::op1_op2_relation_effect): Abstract\n\tout to...\n\t(minus_op1_op2_relation_effect): ...here.\n\t(class operator_pointer_diff): New.\n\t(operator_pointer_diff::op1_op2_relation_effect): Call\n\tminus_op1_op2_relation_effect.\n\t(integral_table::integral_table): Add entry for POINTER_DIFF_EXPR.", "tree": {"sha": "987311974970cb0b1c6f1e304dfa205995ff3f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/987311974970cb0b1c6f1e304dfa205995ff3f75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8af8abfbbace49e6e5e9413d4e661533437106a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af8abfbbace49e6e5e9413d4e661533437106a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af8abfbbace49e6e5e9413d4e661533437106a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af8abfbbace49e6e5e9413d4e661533437106a0/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47543e5f9d1fc502be79f91c87cbeb6eda17e641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47543e5f9d1fc502be79f91c87cbeb6eda17e641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47543e5f9d1fc502be79f91c87cbeb6eda17e641"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "5e37133026d77876b12172a115bcff8b1d615b57", "filename": "gcc/range-op.cc", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8af8abfbbace49e6e5e9413d4e661533437106a0/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8af8abfbbace49e6e5e9413d4e661533437106a0/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=8af8abfbbace49e6e5e9413d4e661533437106a0", "patch": "@@ -1372,13 +1372,14 @@ operator_minus::wi_fold (irange &r, tree type,\n }\n \n // Check to see if the relation REL between OP1 and OP2 has any effect on the\n-// LHS of the expression.  If so, apply it to LHS_RANGE.\n+// LHS of the expression.  If so, apply it to LHS_RANGE.  This is a helper\n+// function for both MINUS_EXPR and POINTER_DIFF_EXPR.\n \n-bool\n-operator_minus::op1_op2_relation_effect (irange &lhs_range, tree type,\n-\t\t\t\t      const irange &op1_range ATTRIBUTE_UNUSED,\n-\t\t\t\t      const irange &op2_range ATTRIBUTE_UNUSED,\n-\t\t\t\t      relation_kind rel) const\n+static bool\n+minus_op1_op2_relation_effect (irange &lhs_range, tree type,\n+\t\t\t       const irange &op1_range ATTRIBUTE_UNUSED,\n+\t\t\t       const irange &op2_range ATTRIBUTE_UNUSED,\n+\t\t\t       relation_kind rel)\n {\n   if (rel == VREL_NONE)\n     return false;\n@@ -1440,6 +1441,16 @@ operator_minus::op1_op2_relation_effect (irange &lhs_range, tree type,\n   return true;\n }\n \n+bool\n+operator_minus::op1_op2_relation_effect (irange &lhs_range, tree type,\n+\t\t\t\t\t const irange &op1_range,\n+\t\t\t\t\t const irange &op2_range,\n+\t\t\t\t\t relation_kind rel) const\n+{\n+  return minus_op1_op2_relation_effect (lhs_range, type, op1_range, op2_range,\n+\t\t\t\t\trel);\n+}\n+\n bool\n operator_minus::op1_range (irange &r, tree type,\n \t\t\t   const irange &lhs,\n@@ -1459,6 +1470,26 @@ operator_minus::op2_range (irange &r, tree type,\n }\n \n \n+class operator_pointer_diff : public range_operator\n+{\n+  virtual bool op1_op2_relation_effect (irange &lhs_range,\n+\t\t\t\t\ttree type,\n+\t\t\t\t\tconst irange &op1_range,\n+\t\t\t\t\tconst irange &op2_range,\n+\t\t\t\t\trelation_kind rel) const;\n+} op_pointer_diff;\n+\n+bool\n+operator_pointer_diff::op1_op2_relation_effect (irange &lhs_range, tree type,\n+\t\t\t\t\t\tconst irange &op1_range,\n+\t\t\t\t\t\tconst irange &op2_range,\n+\t\t\t\t\t\trelation_kind rel) const\n+{\n+  return minus_op1_op2_relation_effect (lhs_range, type, op1_range, op2_range,\n+\t\t\t\t\trel);\n+}\n+\n+\n class operator_min : public range_operator\n {\n public:\n@@ -4018,7 +4049,7 @@ integral_table::integral_table ()\n   set (OBJ_TYPE_REF, op_identity);\n   set (IMAGPART_EXPR, op_unknown);\n   set (REALPART_EXPR, op_unknown);\n-  set (POINTER_DIFF_EXPR, op_unknown);\n+  set (POINTER_DIFF_EXPR, op_pointer_diff);\n   set (ABS_EXPR, op_abs);\n   set (ABSU_EXPR, op_absu);\n   set (NEGATE_EXPR, op_negate);"}]}