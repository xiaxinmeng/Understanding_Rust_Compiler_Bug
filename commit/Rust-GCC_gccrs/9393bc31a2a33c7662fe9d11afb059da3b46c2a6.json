{"sha": "9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5M2JjMzFhMmEzM2M3NjYyZmU5ZDExYWZiMDU5ZGEzYjQ2YzJhNg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-12-17T01:01:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-12-17T01:01:24Z"}, "message": "re PR target/68805 (ICE while var-tracking in simplify_binary_operation_1 with -g and -mvsx-timode)\n\n[gcc]\n2015-12-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/68805\n\t* config/rs6000/rs6000.c (rs6000_gen_le_vsx_permute): Use ROTATE\n\tinstead of VEC_SELECT for TImode.\n\n\t* config/rs6000/vsx.md (VSX_LE): Move TImode from VSX_LE to\n\tVSX_LE_128, so that we use ROTATE to swap the 64-bit words instead\n\tof using VEC_SELECT.\n\t(VSX_LE_128): Likewise.\n\t(define_peephole2): Add peephole to eliminate double xxpermdi when\n\tcopying TImode.\n\n[gcc/testsuite]\n2015-12-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/68805\n\t* gcc.target/powerpc/pr68805.c: New test.\n\nFrom-SVN: r231732", "tree": {"sha": "90b5e34246065a43f0a6251537ae735f4157113d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90b5e34246065a43f0a6251537ae735f4157113d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/comments", "author": null, "committer": null, "parents": [{"sha": "b880bd5dab51f16093e7f12f2f9a2b8c719d5f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b880bd5dab51f16093e7f12f2f9a2b8c719d5f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b880bd5dab51f16093e7f12f2f9a2b8c719d5f18"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "d7607d7d88b9d9484f11e8432eab7ec6312ad2b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "patch": "@@ -1,3 +1,16 @@\n+2015-12-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/68805\n+\t* config/rs6000/rs6000.c (rs6000_gen_le_vsx_permute): Use ROTATE\n+\tinstead of VEC_SELECT for TImode.\n+\n+\t* config/rs6000/vsx.md (VSX_LE): Move TImode from VSX_LE to\n+\tVSX_LE_128, so that we use ROTATE to swap the 64-bit words instead\n+\tof using VEC_SELECT.\n+\t(VSX_LE_128): Likewise.\n+\t(define_peephole2): Add peephole to eliminate double xxpermdi when\n+\tcopying TImode.\n+\n 2015-12-16  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/68779"}, {"sha": "8ffdae2e0241ac3c85bf5f9e54f55a09a8108714", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "patch": "@@ -8829,8 +8829,9 @@ rs6000_const_vec (machine_mode mode)\n rtx\n rs6000_gen_le_vsx_permute (rtx source, machine_mode mode)\n {\n-  /* Use ROTATE instead of VEC_SELECT on IEEE 128-bit floating point.  */\n-  if (FLOAT128_VECTOR_P (mode))\n+  /* Use ROTATE instead of VEC_SELECT on IEEE 128-bit floating point, and\n+     128-bit integers if they are allowed in VSX registers.  */\n+  if (FLOAT128_VECTOR_P (mode) || mode == TImode)\n     return gen_rtx_ROTATE (mode, source, GEN_INT (64));\n   else\n     {"}, {"sha": "b95da6f1d0cad3e4f3647b80d89f133dbddb9580", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "patch": "@@ -26,15 +26,13 @@\n \n ;; Iterator for the 2 64-bit vector types + 128-bit types that are loaded with\n ;; lxvd2x to properly handle swapping words on little endian\n-(define_mode_iterator VSX_LE [V2DF\n-\t\t\t      V2DI\n-\t\t\t      V1TI\n-\t\t\t      (TI\t\"VECTOR_MEM_VSX_P (TImode)\")])\n+(define_mode_iterator VSX_LE [V2DF V2DI V1TI])\n \n ;; Mode iterator to handle swapping words on little endian for the 128-bit\n ;; types that goes in a single vector register.\n (define_mode_iterator VSX_LE_128 [(KF   \"FLOAT128_VECTOR_P (KFmode)\")\n-\t\t\t\t  (TF   \"FLOAT128_VECTOR_P (TFmode)\")])\n+\t\t\t\t  (TF   \"FLOAT128_VECTOR_P (TFmode)\")\n+\t\t\t\t  (TI\t\"TARGET_VSX_TIMODE\")])\n \n ;; Iterator for the 2 32-bit vector types\n (define_mode_iterator VSX_W [V4SF V4SI])\n@@ -739,6 +737,21 @@\n                                        : operands[0];\n })\n \n+;; Peephole to catch memory to memory transfers for TImode if TImode landed in\n+;; VSX registers on a little endian system.  The vector types and IEEE 128-bit\n+;; floating point are handled by the more generic swap elimination pass.\n+(define_peephole2\n+  [(set (match_operand:TI 0 \"vsx_register_operand\" \"\")\n+\t(rotate:TI (match_operand:TI 1 \"vsx_register_operand\" \"\")\n+\t\t   (const_int 64)))\n+   (set (match_operand:TI 2 \"vsx_register_operand\" \"\")\n+\t(rotate:TI (match_dup 0)\n+\t\t   (const_int 64)))]\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE\n+   && (rtx_equal_p (operands[0], operands[2])\n+       || peep2_reg_dead_p (2, operands[0]))\"\n+   [(set (match_dup 2) (match_dup 1))])\n+\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split"}, {"sha": "cc8779865c5e1057c3083cf114435cc018293251", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "patch": "@@ -1,3 +1,8 @@\n+2015-12-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/68805\n+\t* gcc.target/powerpc/pr68805.c: New test.\n+\n 2015-12-16  Martin Sebor  <msebor@redhat.com>\n \n \tPR objc++/68932"}, {"sha": "f4454a9e2d2e16db6554cc77442c70d4e210950f", "filename": "gcc/testsuite/gcc.target/powerpc/pr68805.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9393bc31a2a33c7662fe9d11afb059da3b46c2a6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c?ref=9393bc31a2a33c7662fe9d11afb059da3b46c2a6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target powerpc64le-*-* } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-O2 -mvsx-timode -mcpu=power8\" } */\n+\n+typedef struct bar {\n+  void *a;\n+  void *b;\n+} TYPE;\n+\n+void foo (TYPE *p, TYPE *q) { *p = *q; }\n+\n+/* { dg-final { scan-assembler     \"lxvd2x\"   } } */\n+/* { dg-final { scan-assembler     \"stxvd2x\"  } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+"}]}