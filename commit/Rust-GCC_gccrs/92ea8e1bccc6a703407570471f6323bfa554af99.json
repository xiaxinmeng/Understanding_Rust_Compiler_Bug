{"sha": "92ea8e1bccc6a703407570471f6323bfa554af99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlYThlMWJjY2M2YTcwMzQwNzU3MDQ3MWY2MzIzYmZhNTU0YWY5OQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-05-19T11:46:17Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-05-19T12:15:13Z"}, "message": "TESTSUITE: Fix tests for 16-bit targets\n\ngcc/ChangeLog:\n\n2020-05-19  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* doc/sourcebuild.texi: Document new short_eq_int, ptr_eq_short,\n\tmsp430_small, msp430_large and size24plus DejaGNU effective\n\ttargets.\n\tImprove grammar in descriptions for size20plus and size32plus effective\n\ttargets.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-19  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* c-c++-common/builtin-has-attribute-7.c: Require size24plus.\n\t* c-c++-common/cpp/pr63831-1.c: Store result in _has_cpp_attribute in a\n\tlong.\n\t* c-c++-common/pr81376.c: Skip scan-tree-dump for short_eq_int. Extend\n\ttest for short_eq_int.\n\t* g++.dg/abi/scoped1.C: Skip dg-warning tests for short_eq_int.\n\t* g++.dg/cpp0x/constexpr-70001-1.C: Require size24plus.\n\t* g++.dg/cpp0x/constexpr-bitfield3.C: Require int32plus.\n\t* g++.dg/cpp0x/enum13.C: Skip dg-warning for short_eq_int.\n\t* g++.dg/cpp0x/initlist5.C: Add dg-error for short_eq_int.\n\t* g++.dg/cpp0x/initlist7.C: Add dg-warning for !int32plus.\n\t* g++.dg/cpp0x/nullptr04.C: Skip dg-error for ptr_eq_short.\n\t* g++.dg/cpp0x/variadic-value1.C: Add typedef for int32_t.\n\t* g++.dg/cpp1y/constexpr-arith-overflow.C: Fix test for\n\tsizeof(int) == sizeof(short).\n\t* g++.dg/cpp1y/digit-sep-neg.C: Add typedef for int32_t.\n\t* g++.dg/cpp1y/pr57644.C: Add typedef for uint32_t.\n\t* g++.dg/cpp1y/pr77321.C: Require size24plus.\n\t* g++.dg/cpp1y/var-templ4.C: Add typedef for int32_t.\n\t* g++.dg/cpp1z/direct-enum-init1.C: Skip dg-error for short_eq_int.\n\t* g++.dg/delayedfold/fwrapv1.C: Skip for int16.\n\t* g++.dg/expr/bitfield9.C: Add typedef for int32_t.\n\t* g++.dg/ext/attribute-test-1.C: Add typedef for uint32_t.\n\t* g++.dg/ext/bitfield1.C: Add typedef for int32_t.\n\t* g++.dg/ext/flexary13.C: Add typedef for int32_t.\n\t* g++.dg/ext/utf-cvt.C: Adjust dg-warning for int16.\n\t* g++.dg/ext/vector28.C: Add typedef for int32_t.\n\t* g++.dg/ext/vla15.C: Add typedef for int32_t.\n\t* g++.dg/init/array11.C: Require size32plus.\n\t* g++.dg/init/array15.C: Require size24plus.\n\t* g++.dg/init/array4.C: Require size20plus.\n\t* g++.dg/init/const7.C: Skip dg-message for ptr_eq_short.\n\t* g++.dg/init/new38.C: Relax regex in dg-error.\n\t* g++.dg/init/new44.C: Skip dg-error for msp430_small.\n\tAdjust test for 16-bit size_t.\n\tAdd special case for msp430 -mlarge.\n\t* g++.dg/init/value9.C: Add typedef for int32_t.\n\t* g++.dg/ipa/pr77333.C: Add typedef for int32_t.\n\t* g++.dg/lto/20080908-1_0.C: Add typedef for int32_t.\n\t* g++.dg/opt/pr55717.C: Add typedef for uint32_t.\n\t* g++.dg/opt/pr60597.C: Add typedef for int32_t.\n\t* g++.dg/opt/pr81715.C: Require size20plus.\n\t* g++.dg/opt/reload3.C: Add typedef for uint32_t.\n\t* g++.dg/opt/temp2.C: Require size20plus.\n\t* g++.dg/opt/thunk1.C: Likewise.\n\t* g++.dg/other/error23.C: Dont assume __SIZEOF_INT__ == 4.\n\t* g++.dg/other/pr31078.C: Adjust typedef for 32-bit int.\n\t* g++.dg/parse/concat1.C: Skip dg-error for size20plus.\n\t* g++.dg/parse/defarg5.C: Add typedef for int32_t and uint32_t.\n\t* g++.dg/pr48484.C: Add typedef for int32_t.\n\t* g++.dg/pr53037-2.C: Likewise.\n\t* g++.dg/pr53037-3.C: Likewise.\n\t* g++.dg/pr66655.C: Use int32_t.\n\t* g++.dg/pr66655.h: Add typedef for int32_t.\n\t* g++.dg/pr66655_1.cc: Use int32_t.\n\t* g++.dg/pr67351.C: Define 32-bit uint.\n\t* g++.dg/template/array30.C: Add typedef for int32_t.\n\t* g++.dg/template/constant1.C: Extend test for 8-bit and 16-bit int.\n\t* g++.dg/template/constant2.C: Likewise.\n\t* g++.dg/template/friend18.C: Add typedef for int32_t.\n\t* g++.dg/template/pr68978.C: Likewise.\n\t* g++.dg/torture/pr37421.C: Require int_eq_float.\n\t* g++.dg/torture/pr88861.C: Handle 16-bit int.\n\t* g++.dg/tree-ssa/pr19807.C: Likewise.\n\t* g++.dg/tree-ssa/pr27291.C: Fix typedef for uint32_t.\n\t* g++.dg/tree-ssa/pr49516.C: Fix typedefs for int{16,32}_t and\n\tuint{32,64}_t.\n\t* g++.dg/warn/Wconversion-integer.C: Add typedefs for {u,}int32_t.\n\t* g++.dg/warn/Wconversion-null-2.C: Adjust g() declaration.\n\t* g++.dg/warn/Wconversion-null.C: Likewise.\n\t* g++.dg/warn/Wconversion3.C: Skip dg-warning for short_eq_int.\n\t* g++.dg/warn/Wduplicated-branches1.C: Add dg-warning for short_eq_int.\n\t* g++.dg/warn/Wplacement-new-size-5.C: Add typedef for int32_t.\n\t* g++.dg/warn/Wplacement-new-size.C: Likewise.\n\t* g++.dg/warn/Wstrict-aliasing-5.C: Add typedef for uint32_t.\n\t* g++.dg/warn/Wstrict-aliasing-bogus-signed-unsigned.C: Add typedef for\n\t{u,}int32_t.\n\t* g++.dg/warn/Wtype-limits-Wextra.C: Adjust dg-warning for\n\tshort_eq_int.\n\t* g++.dg/warn/Wtype-limits.C: Likewise.\n\t* g++.old-deja/g++.brendan/enum11.C: Add typedef for uint32_t.\n\t* g++.old-deja/g++.bugs/900227_01.C: Skip dg-error for ptr_eq_short.\n\t* g++.old-deja/g++.mike/ns15.C: Require size20plus.\n\t* g++.old-deja/g++.other/exprstmt1.C: Add typedef for uint32_t.\n\t* g++.old-deja/g++.other/inline12.C: Adjust udword typedef.\n\t* g++.old-deja/g++.other/new6.C: Add typedef for int32_t.\n\t* g++.old-deja/g++.pt/crash16.C: Skip for int16.\n\t* g++.old-deja/g++.robertl/eb76.C: Likewise.\n\t* g++.old-deja/g++.warn/flow1.C: Add typedef for int32_t.\n\t* gcc.dg/Walloca-14.c: Adjust -Walloca-larger-than= parameter for\n\t!ptr32plus.\n\t* gcc.dg/Warray-bounds-32.c: Adjust dg-warning for size20plus.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-4.c: Adjust dg-warning for\n\tshort_eq_int.\n\tHandle case where ptrdiff_t/size_t is __int20.\n\t* gcc.dg/concat2.c: Skip dg-error for size20plus.\n\t* gcc.dg/fold-convmaxconv-1.c: Add typedef for {u,}int32_t.\n\t* gcc.dg/fold-convminconv-1.c: Likewise.\n\t* gcc.dg/graphite/scop-4.c: Require size20plus.\n\t* gcc.dg/loop-versioning-1.c: Adjust test for small size_t.\n\t* gcc.dg/loop-versioning-2.c: Require size20plus.\n\t* gcc.dg/lto/20081210-1_0.c: Adjust typedef for uintptr_t.\n\t* gcc.dg/lto/pr85870_0.c: Add typedef for uint32_t.\n\t* gcc.dg/lto/pr85870_1.c: Likewise.\n\t* gcc.dg/pr36227.c: Adjust typedef for ptrcast.\n\t* gcc.dg/pr42611.c: First check for size_t equality with void *\n\tbefore trying other types.\n\t* gcc.dg/pr59963-2.c: Skip dg-warning for int16 instead of\n\txfail.\n\t* gcc.dg/pr68317.c: Add typedef for int32_t.\n\t* gcc.dg/pr78973.c: Adjust dg-warning for int16.\n\t* gcc.dg/pr85859.c: Cast using __INTPTR_TYPE__ instead of long.\n\t* gcc.dg/pr86179.c: Add typedef for {u,}int32_t.\n\t* gcc.dg/torture/20181024-1.c: Require size32plus.\n\t* gcc.dg/torture/pr71598-2.c: Skip for short_eq_int.\n\t* gcc.dg/torture/pr86034.c: Add typedef for int32_t.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Adjust dg-warning\n\tfor int16 and msp430 -mlarge.\n\t* gcc.dg/tree-ssa/integer-addr.c: Use __INTPTR_MAX__ for a large\n\tconstant that is a valid address.\n\t* gcc.dg/tree-ssa/loop-interchange-10.c: Add typedef for\n\tint32_t.\n\t* gcc.dg/tree-ssa/pr84436-3.c: Adjust dg-final for int16.\n\t* gcc.dg/tree-ssa/pr84648.c: Add typedef for uint32_t.\n\t* gcc.dg/tree-ssa/scev-8.c: Cast to char if sizeof(int) ==\n\tsizeof(short).\n\t* gcc.dg/tree-ssa/ssa-dom-thread-8.c: Adjust test for msp430 -mlarge.\n\t* lib/target-supports.exp (check_effective_target_size24plus): New.\n\t(check_effective_target_short_eq_int): New.\n\t(check_effective_target_ptr_eq_short): New.\n\t(check_effective_target_msp430_small): New.\n\t(check_effective_target_msp430_large): New.", "tree": {"sha": "e17b2e12afa712a1295057b7f6303dafeff04712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e17b2e12afa712a1295057b7f6303dafeff04712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ea8e1bccc6a703407570471f6323bfa554af99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ea8e1bccc6a703407570471f6323bfa554af99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ea8e1bccc6a703407570471f6323bfa554af99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ea8e1bccc6a703407570471f6323bfa554af99/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e107157171af25f6c89be02d62b0a7235a5c988d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e107157171af25f6c89be02d62b0a7235a5c988d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e107157171af25f6c89be02d62b0a7235a5c988d"}], "stats": {"total": 1240, "additions": 790, "deletions": 450}, "files": [{"sha": "703b6349516dd5ee86f92ae78be14fa9084fc98f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,3 +1,11 @@\n+2020-05-19  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* doc/sourcebuild.texi: Document new short_eq_int, ptr_eq_short,\n+\tmsp430_small, msp430_large and size24plus DejaGNU effective\n+\ttargets.\n+\tImprove grammar in descriptions for size20plus and size32plus effective\n+\ttargets.\n+\n 2020-05-19  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* config/bpf/bpf.c (bpf_compute_frame_layout): Include space for"}, {"sha": "e5554c4666eb217844598352ced5a9597652f07c", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1363,6 +1363,12 @@ Target has 64-bit @code{long long}.\n @item long_neq_int\n Target has @code{int} and @code{long} with different sizes.\n \n+@item short_eq_int\n+Target has @code{short} and @code{int} with the same size.\n+\n+@item ptr_eq_short\n+Target has pointers (@code{void *}) and @code{short} with the same size.\n+\n @item int_eq_float\n Target has @code{int} and @code{float} with the same size.\n \n@@ -1379,11 +1385,15 @@ Target supports @code{long double} that is longer than @code{double}.\n Target has pointers that are 32 bits or longer.\n \n @item size20plus\n-Target has a 20-bit or larger address space, so at least supports\n+Target has a 20-bit or larger address space, so supports at least\n 16-bit array and structure sizes.\n \n+@item size24plus\n+Target has a 24-bit or larger address space, so supports at least\n+20-bit array and structure sizes.\n+\n @item size32plus\n-Target has a 32-bit or larger address space, so at least supports\n+Target has a 32-bit or larger address space, so supports at least\n 24-bit array and structure sizes.\n \n @item 4byte_wchar_t\n@@ -2050,6 +2060,16 @@ when using the new ABI.\n MIPS target supports @code{-mpaired-single}.\n @end table\n \n+@subsubsection MSP430-specific attributes\n+\n+@table @code\n+@item msp430_small\n+MSP430 target has the small memory model enabled (@code{-msmall}).\n+\n+@item msp430_large\n+MSP430 target has the large memory model enabled (@code{-mlarge}).\n+@end table\n+\n @subsubsection PowerPC-specific attributes\n \n @table @code"}, {"sha": "fa1d04599dccce8ffe9435e52f8c5c9ad4e0d321", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,3 +1,138 @@\n+2020-05-19  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* c-c++-common/builtin-has-attribute-7.c: Require size24plus.\n+\t* c-c++-common/cpp/pr63831-1.c: Store result in _has_cpp_attribute in a\n+\tlong.\n+\t* c-c++-common/pr81376.c: Skip scan-tree-dump for short_eq_int. Extend\n+\ttest for short_eq_int.\n+\t* g++.dg/abi/scoped1.C: Skip dg-warning tests for short_eq_int.\n+\t* g++.dg/cpp0x/constexpr-70001-1.C: Require size24plus.\n+\t* g++.dg/cpp0x/constexpr-bitfield3.C: Require int32plus.\n+\t* g++.dg/cpp0x/enum13.C: Skip dg-warning for short_eq_int.\n+\t* g++.dg/cpp0x/initlist5.C: Add dg-error for short_eq_int.\n+\t* g++.dg/cpp0x/initlist7.C: Add dg-warning for !int32plus.\n+\t* g++.dg/cpp0x/nullptr04.C: Skip dg-error for ptr_eq_short.\n+\t* g++.dg/cpp0x/variadic-value1.C: Add typedef for int32_t.\n+\t* g++.dg/cpp1y/constexpr-arith-overflow.C: Fix test for\n+\tsizeof(int) == sizeof(short).\n+\t* g++.dg/cpp1y/digit-sep-neg.C: Add typedef for int32_t.\n+\t* g++.dg/cpp1y/pr57644.C: Add typedef for uint32_t.\n+\t* g++.dg/cpp1y/pr77321.C: Require size24plus.\n+\t* g++.dg/cpp1y/var-templ4.C: Add typedef for int32_t.\n+\t* g++.dg/cpp1z/direct-enum-init1.C: Skip dg-error for short_eq_int.\n+\t* g++.dg/delayedfold/fwrapv1.C: Skip for int16.\n+\t* g++.dg/expr/bitfield9.C: Add typedef for int32_t.\n+\t* g++.dg/ext/attribute-test-1.C: Add typedef for uint32_t.\n+\t* g++.dg/ext/bitfield1.C: Add typedef for int32_t.\n+\t* g++.dg/ext/flexary13.C: Add typedef for int32_t.\n+\t* g++.dg/ext/utf-cvt.C: Adjust dg-warning for int16.\n+\t* g++.dg/ext/vector28.C: Add typedef for int32_t.\n+\t* g++.dg/ext/vla15.C: Add typedef for int32_t.\n+\t* g++.dg/init/array11.C: Require size32plus.\n+\t* g++.dg/init/array15.C: Require size24plus.\n+\t* g++.dg/init/array4.C: Require size20plus.\n+\t* g++.dg/init/const7.C: Skip dg-message for ptr_eq_short.\n+\t* g++.dg/init/new38.C: Relax regex in dg-error.\n+\t* g++.dg/init/new44.C: Skip dg-error for msp430_small.\n+\tAdjust test for 16-bit size_t.\n+\tAdd special case for msp430 -mlarge.\n+\t* g++.dg/init/value9.C: Add typedef for int32_t.\n+\t* g++.dg/ipa/pr77333.C: Add typedef for int32_t.\n+\t* g++.dg/lto/20080908-1_0.C: Add typedef for int32_t.\n+\t* g++.dg/opt/pr55717.C: Add typedef for uint32_t.\n+\t* g++.dg/opt/pr60597.C: Add typedef for int32_t.\n+\t* g++.dg/opt/pr81715.C: Require size20plus.\n+\t* g++.dg/opt/reload3.C: Add typedef for uint32_t.\n+\t* g++.dg/opt/temp2.C: Require size20plus.\n+\t* g++.dg/opt/thunk1.C: Likewise.\n+\t* g++.dg/other/error23.C: Dont assume __SIZEOF_INT__ == 4.\n+\t* g++.dg/other/pr31078.C: Adjust typedef for 32-bit int.\n+\t* g++.dg/parse/concat1.C: Skip dg-error for size20plus.\n+\t* g++.dg/parse/defarg5.C: Add typedef for int32_t and uint32_t.\n+\t* g++.dg/pr48484.C: Add typedef for int32_t.\n+\t* g++.dg/pr53037-2.C: Likewise.\n+\t* g++.dg/pr53037-3.C: Likewise.\n+\t* g++.dg/pr66655.C: Use int32_t.\n+\t* g++.dg/pr66655.h: Add typedef for int32_t.\n+\t* g++.dg/pr66655_1.cc: Use int32_t.\n+\t* g++.dg/pr67351.C: Define 32-bit uint.\n+\t* g++.dg/template/array30.C: Add typedef for int32_t.\n+\t* g++.dg/template/constant1.C: Extend test for 8-bit and 16-bit int.\n+\t* g++.dg/template/constant2.C: Likewise.\n+\t* g++.dg/template/friend18.C: Add typedef for int32_t.\n+\t* g++.dg/template/pr68978.C: Likewise.\n+\t* g++.dg/torture/pr37421.C: Require int_eq_float.\n+\t* g++.dg/torture/pr88861.C: Handle 16-bit int.\n+\t* g++.dg/tree-ssa/pr19807.C: Likewise.\n+\t* g++.dg/tree-ssa/pr27291.C: Fix typedef for uint32_t.\n+\t* g++.dg/tree-ssa/pr49516.C: Fix typedefs for int{16,32}_t and\n+\tuint{32,64}_t.\n+\t* g++.dg/warn/Wconversion-integer.C: Add typedefs for {u,}int32_t.\n+\t* g++.dg/warn/Wconversion-null-2.C: Adjust g() declaration.\n+\t* g++.dg/warn/Wconversion-null.C: Likewise.\n+\t* g++.dg/warn/Wconversion3.C: Skip dg-warning for short_eq_int.\n+\t* g++.dg/warn/Wduplicated-branches1.C: Add dg-warning for short_eq_int.\n+\t* g++.dg/warn/Wplacement-new-size-5.C: Add typedef for int32_t.\n+\t* g++.dg/warn/Wplacement-new-size.C: Likewise.\n+\t* g++.dg/warn/Wstrict-aliasing-5.C: Add typedef for uint32_t.\n+\t* g++.dg/warn/Wstrict-aliasing-bogus-signed-unsigned.C: Add typedef for\n+\t{u,}int32_t.\n+\t* g++.dg/warn/Wtype-limits-Wextra.C: Adjust dg-warning for\n+\tshort_eq_int.\n+\t* g++.dg/warn/Wtype-limits.C: Likewise.\n+\t* g++.old-deja/g++.brendan/enum11.C: Add typedef for uint32_t.\n+\t* g++.old-deja/g++.bugs/900227_01.C: Skip dg-error for ptr_eq_short.\n+\t* g++.old-deja/g++.mike/ns15.C: Require size20plus.\n+\t* g++.old-deja/g++.other/exprstmt1.C: Add typedef for uint32_t.\n+\t* g++.old-deja/g++.other/inline12.C: Adjust udword typedef.\n+\t* g++.old-deja/g++.other/new6.C: Add typedef for int32_t.\n+\t* g++.old-deja/g++.pt/crash16.C: Skip for int16.\n+\t* g++.old-deja/g++.robertl/eb76.C: Likewise.\n+\t* g++.old-deja/g++.warn/flow1.C: Add typedef for int32_t.\n+\t* gcc.dg/Walloca-14.c: Adjust -Walloca-larger-than= parameter for\n+\t!ptr32plus.\n+\t* gcc.dg/Warray-bounds-32.c: Adjust dg-warning for size20plus.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-4.c: Adjust dg-warning for\n+\tshort_eq_int.\n+\tHandle case where ptrdiff_t/size_t is __int20.\n+\t* gcc.dg/concat2.c: Skip dg-error for size20plus.\n+\t* gcc.dg/fold-convmaxconv-1.c: Add typedef for {u,}int32_t.\n+\t* gcc.dg/fold-convminconv-1.c: Likewise.\n+\t* gcc.dg/graphite/scop-4.c: Require size20plus.\n+\t* gcc.dg/loop-versioning-1.c: Adjust test for small size_t.\n+\t* gcc.dg/loop-versioning-2.c: Require size20plus.\n+\t* gcc.dg/lto/20081210-1_0.c: Adjust typedef for uintptr_t.\n+\t* gcc.dg/lto/pr85870_0.c: Add typedef for uint32_t.\n+\t* gcc.dg/lto/pr85870_1.c: Likewise.\n+\t* gcc.dg/pr36227.c: Adjust typedef for ptrcast.\n+\t* gcc.dg/pr42611.c: First check for size_t equality with void *\n+\tbefore trying other types.\n+\t* gcc.dg/pr59963-2.c: Skip dg-warning for int16 instead of\n+\txfail.\n+\t* gcc.dg/pr68317.c: Add typedef for int32_t.\n+\t* gcc.dg/pr78973.c: Adjust dg-warning for int16.\n+\t* gcc.dg/pr85859.c: Cast using __INTPTR_TYPE__ instead of long.\n+\t* gcc.dg/pr86179.c: Add typedef for {u,}int32_t.\n+\t* gcc.dg/torture/20181024-1.c: Require size32plus.\n+\t* gcc.dg/torture/pr71598-2.c: Skip for short_eq_int.\n+\t* gcc.dg/torture/pr86034.c: Add typedef for int32_t.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Adjust dg-warning\n+\tfor int16 and msp430 -mlarge.\n+\t* gcc.dg/tree-ssa/integer-addr.c: Use __INTPTR_MAX__ for a large\n+\tconstant that is a valid address.\n+\t* gcc.dg/tree-ssa/loop-interchange-10.c: Add typedef for\n+\tint32_t.\n+\t* gcc.dg/tree-ssa/pr84436-3.c: Adjust dg-final for int16.\n+\t* gcc.dg/tree-ssa/pr84648.c: Add typedef for uint32_t.\n+\t* gcc.dg/tree-ssa/scev-8.c: Cast to char if sizeof(int) ==\n+\tsizeof(short).\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-8.c: Adjust test for msp430 -mlarge.\n+\t* lib/target-supports.exp (check_effective_target_size24plus): New.\n+\t(check_effective_target_short_eq_int): New.\n+\t(check_effective_target_ptr_eq_short): New.\n+\t(check_effective_target_msp430_small): New.\n+\t(check_effective_target_msp430_large): New.\n+\n 2020-05-19  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* gcc.target/bpf/xbpf-callee-saved-regs-1.c: New test."}, {"sha": "1326aed32a79ec2fd9ef62cffaf04cc2f4202f57", "filename": "gcc/testsuite/c-c++-common/builtin-has-attribute-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-has-attribute-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-has-attribute-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-has-attribute-7.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,7 +2,8 @@\n    and packed in various forms of array dereferencing and indirection\n    expressions correspondingly to __alignof__.\n    { dg-do compile }\n-   { dg-options \"-Wall -Wno-unused -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-Wall -Wno-unused -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target size24plus } */\n \n #define ATTR(...) __attribute__ ((__VA_ARGS__))\n #define ALIGN(N)  ATTR (aligned (N))"}, {"sha": "6e97521ecde5d5026f087f60385e909be0fb05eb", "filename": "gcc/testsuite/c-c++-common/cpp/pr63831-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -61,4 +61,4 @@ T18 t18;\n T19 t19;\n T20 t20;\n #endif\n-int t21 = __has_attribute (noreturn) + __has_cpp_attribute (__malloc__);\n+long t21 = __has_attribute (noreturn) + __has_cpp_attribute (__malloc__);"}, {"sha": "f96a840d6f1259e43ecb733d85d68c272c60d1dc", "filename": "gcc/testsuite/c-c++-common/pr81376.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr81376.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr81376.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr81376.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -35,7 +35,14 @@ void f4(unsigned short a, int b)\n {\n   volatile int us_i;\n   us_i = (double) a < (double) b;\n-  /* { dg-final { scan-tree-dump \"us_i = \\\\(int\\\\) a < b\" \"original\" } } */\n+  /* { dg-final { scan-tree-dump \"us_i = \\\\(int\\\\) a < b\" \"original\" { target { ! short_eq_int } } } } */\n+}\n+\n+void f4_short_eq_int(unsigned short a, long b)\n+{\n+  volatile long us_l;\n+  us_l = (double) a < (double) b;\n+  /* { dg-final { scan-tree-dump \"us_l = \\\\(long int\\\\) a < b\" \"original\" { target { short_eq_int } } } } */\n }\n \n /* We don't optimize here because neither of integral types is"}, {"sha": "62ae498c9703a0dc309a2ffd10342682a5d4501e", "filename": "gcc/testsuite/g++.dg/abi/scoped1.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fscoped1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fscoped1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fscoped1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -6,18 +6,18 @@ void f(int i, ...)\n {\n   __builtin_va_list ap;\n   __builtin_va_start (ap, i);\n-  if (__builtin_va_arg (ap, A) != A::a1) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a2) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a3) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a1) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a2) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a3) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a1) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a2) __builtin_abort(); // { dg-warning \"passed\" }\n-  if (__builtin_va_arg (ap, A) != A::a3) __builtin_abort(); // { dg-warning \"passed\" }\n+  if (__builtin_va_arg (ap, A) != A::a1) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a2) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a3) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a1) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a2) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a3) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a1) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a2) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n+  if (__builtin_va_arg (ap, A) != A::a3) __builtin_abort(); // { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n }\n \n int main()\n {\n-  f(9, A::a1, A::a2, A::a3, A::a1, A::a2, A::a3, A::a1, A::a2, A::a3);\t// { dg-warning \"passed\" }\n+  f(9, A::a1, A::a2, A::a3, A::a1, A::a2, A::a3, A::a1, A::a2, A::a3);\t// { dg-warning \"passed\" \"\" { target { ! short_eq_int } } }\n }"}, {"sha": "7b28177b82ff473569ad23cd4dbd90ac4473ea3a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-70001-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,6 @@\n // PR c++/70001\n // { dg-do compile { target c++11 } }\n+// { dg-require-effective-target size24plus }\n \n struct B\n {"}, {"sha": "a17d45cf6a240f4e817b4155d6cd4d5d348de8b7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-bitfield3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield3.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,6 @@\n // PR c++/49136\n // { dg-do compile { target c++11 } }\n+// { dg-require-effective-target int32plus }\n \n struct S\n {"}, {"sha": "9902a4dc6b13e5bb18fcc2e123ec7e64143c7817", "filename": "gcc/testsuite/g++.dg/cpp0x/enum13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum13.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -15,5 +15,5 @@ void foo(int x, ...) {\n }\n \n int main() {\n-   foo(0, A::X);\t\t// { dg-warning \"scoped\" }\n+   foo(0, A::X);\t\t// { dg-warning \"scoped\" \"\" { target { ! short_eq_int } } }\n }"}, {"sha": "5f128582014de7adee2debcc1c20e71d4375310f", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist5.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -32,4 +32,4 @@ char c = char{ u };\t\t// { dg-error \"narrowing\" }\n \n // PR c++/50011\n short unsigned su;\n-int i { su };\n+int i { su }; // { dg-error \"narrowing\" \"\" { target short_eq_int } }"}, {"sha": "0cb89e627ac27b0d0d80d1c4010d4e6b1496a3be", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist7.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,7 +3,7 @@\n \n typedef enum { AA=1, BB=2 } my_enum;\n \n-typedef struct { my_enum a:4 ; unsigned b:28; } stru;\n+typedef struct { my_enum a:4 ; unsigned b:28; } stru; // { dg-warning \"width.*exceeds its type\" \"\" { target { ! int32plus } } }\n \n void foo (char c, my_enum x, int i)\n {"}, {"sha": "7cb3559b3a341300826752e57e831a0f5e309fa7", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr04.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -5,12 +5,12 @@\n __extension__ typedef __INTPTR_TYPE__ intptr_t;\n \n const int n4 = static_cast<const int>(nullptr); // { dg-error \"16:invalid 'static_cast' \" }\n-const short int n5 = reinterpret_cast<short int>(nullptr); // { dg-error \"22:cast from .std::nullptr_t. to .short int. loses precision\" }\n+const short int n5 = reinterpret_cast<short int>(nullptr); // { dg-error \"22:cast from .std::nullptr_t. to .short int. loses precision\" \"\" { target { ! ptr_eq_short } } }\n const intptr_t n6 = reinterpret_cast<intptr_t>(nullptr);\n const intptr_t n7 = (intptr_t)nullptr;\n \n decltype(nullptr) mynull = 0;\n const int n8 = static_cast<const int>(mynull); // { dg-error \"16:invalid 'static_cast' \" }\n-const short int n9 = reinterpret_cast<short int>(mynull); // { dg-error \"22:cast from .std::nullptr_t. to .short int. loses precision\" }\n+const short int n9 = reinterpret_cast<short int>(mynull); // { dg-error \"22:cast from .std::nullptr_t. to .short int. loses precision\" \"\" { target { ! ptr_eq_short } } }\n const intptr_t n10 = reinterpret_cast<intptr_t>(mynull);\n const intptr_t n11 = (intptr_t)mynull;"}, {"sha": "b27ac34692f2b1a3e09920e0173114de6464d986", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-value1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-value1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-value1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-value1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,18 +1,20 @@\n // PR c++/52796\n // { dg-do run { target c++11 } }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n inline void *operator new(__SIZE_TYPE__ s, void *p) { return p; }\n \n struct A\n {\n-  int i;\n+  int32_t i;\n   template<class... Ts>\n   A(Ts&&... ts): i(ts...) { }\n };\n \n static union {\n   unsigned char c[sizeof(A)];\n-  int i;\n+  int32_t i;\n };\n \n int main()"}, {"sha": "d6a6509d59193ef20f76556f6a9e7619dbf4749a", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-arith-overflow.C", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-arith-overflow.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-arith-overflow.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-arith-overflow.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -90,6 +90,10 @@ template <>        struct ResType<unsigned short> { typedef unsigned type; };\n   StaticAssert (vflow ? CAT (op, __LINE__)(x, y).v\t\t\t\\\n \t\t: CAT (op, __LINE__)(x, y) == Res<T>(op (x, y), vflow))\n \n+/* If short and int are the same size we will overflow in some additional cases\n+   when testing short.  */\n+#define INT_EQ_SHORT __SIZEOF_INT__ == __SIZEOF_SHORT__\n+\n /* Signed int addition.  */\n TEST (sadd,   signed char,    0,         0,         0);\n TEST (sadd,   signed char,    0,         SCHAR_MAX, 0);\n@@ -100,11 +104,11 @@ TEST (sadd,   signed char,   -1,         SCHAR_MIN, 0);\n \n TEST (sadd,   short,          0,         0,         0);\n TEST (sadd,   short,          0,         SHRT_MAX,  0);\n-TEST (sadd,   short,          1,         SHRT_MAX,  0);\n-TEST (sadd,   short,          SHRT_MAX,  SHRT_MAX,  0);\n+TEST (sadd,   short,          1,         SHRT_MAX,  INT_EQ_SHORT);\n+TEST (sadd,   short,          SHRT_MAX,  SHRT_MAX,  INT_EQ_SHORT);\n TEST (sadd,   short,          0,         SHRT_MIN,  0);\n-TEST (sadd,   short,         -1,         SHRT_MIN,  0);\n-TEST (sadd,   short,          SHRT_MIN,  SHRT_MIN,  0);\n+TEST (sadd,   short,         -1,         SHRT_MIN,  INT_EQ_SHORT);\n+TEST (sadd,   short,          SHRT_MIN,  SHRT_MIN,  INT_EQ_SHORT);\n \n TEST (sadd,   int,            0,         0,         0);\n TEST (sadd,   int,            0,         INT_MAX,   0);\n@@ -139,8 +143,8 @@ TEST (uadd,   unsigned char,  UCHAR_MAX, UCHAR_MAX, 0);\n \n TEST (uadd,   unsigned short, 0U,        0U,         0);\n TEST (uadd,   unsigned short, 0U,        USHRT_MAX,  0);\n-TEST (uadd,   unsigned short, 1U,        USHRT_MAX,  0);\n-TEST (uadd,   unsigned short, USHRT_MAX, USHRT_MAX,  0);\n+TEST (uadd,   unsigned short, 1U,        USHRT_MAX,  INT_EQ_SHORT);\n+TEST (uadd,   unsigned short, USHRT_MAX, USHRT_MAX,  INT_EQ_SHORT);\n \n TEST (uadd,   unsigned,       0U,        0U,         0);\n TEST (uadd,   unsigned,       0U,        UINT_MAX,   0);\n@@ -170,7 +174,7 @@ TEST (ssub,   short,          0,         0,          0);\n TEST (ssub,   short,          0,         SHRT_MAX,   0);\n TEST (ssub,   short,          1,         SHRT_MAX,   0);\n TEST (ssub,   short,          SHRT_MAX,  SHRT_MAX,   0);\n-TEST (ssub,   short,          0,         SHRT_MIN,   0);\n+TEST (ssub,   short,          0,         SHRT_MIN,   INT_EQ_SHORT);\n TEST (ssub,   short,         -1,         SHRT_MIN,   0);\n TEST (ssub,   short,          SHRT_MIN,  SHRT_MIN,   0);\n "}, {"sha": "5343e52c5a5dbe1a26f2a79f1f429513ab954928", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-neg.C", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,9 +1,11 @@\n // { dg-do compile { target c++14 } }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n int\n main()\n {\n-  int i = 0;\n+  int32_t i = 0;\n   i = 1048''576; // { dg-error \"adjacent digit separators\" }\n   i = 0X'100000; // { dg-error \"digit separator after base indicator\" }\n   i = 0x'100000; // { dg-error \"digit separator after base indicator\" }\n@@ -25,6 +27,6 @@ main()\n   float f = 1.602'176'565e-19'F; // { dg-error \"digit separator outside digit sequence\" }\n }\n \n-// { dg-error \"exponent has no digits\" \"exponent has no digits\" { target *-*-* } 21 }\n-// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 13 }\n-// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 24 }\n+// { dg-error \"exponent has no digits\" \"exponent has no digits\" { target *-*-* } 23 }\n+// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 15 }\n+// { dg-error \"expected ';' before\" \"expected ';' before\" { target *-*-* } 26 }"}, {"sha": "dd67a3bd2d178f12b55e97a6d40e8e2e33607902", "filename": "gcc/testsuite/g++.dg/cpp1y/pr57644.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57644.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57644.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57644.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,8 +1,10 @@\n // { dg-do compile { target c++14 } }\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n struct Foo\n {\n-  unsigned i: 32;\n+  uint32_t i: 32;\n };\n \n int"}, {"sha": "51c5bd9b3946e7a089b6f00de0747999bed57273", "filename": "gcc/testsuite/g++.dg/cpp1y/pr77321.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77321.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77321.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77321.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,6 +1,7 @@\n // PR c++/77321\n // { dg-do compile { target c++14 } }\n // { dg-options \"-Wall\" }\n+// { dg-require-effective-target size24plus }\n \n extern \"C\" void *memset (void *, int, __SIZE_TYPE__);\n extern \"C\" void *malloc(__SIZE_TYPE__);"}, {"sha": "4e762aa929eef31b6fe5b4b314c710a3a13dc163", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ4.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,12 +1,14 @@\n // { dg-do compile { target c++14 } }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n template<typename T>\n-  constexpr int var = sizeof (T);\n+  constexpr int32_t var = sizeof (T);\n \n template<>\n-  constexpr int var<int> = 100000;\n+  constexpr int32_t var<int32_t> = 100000;\n \n int main ()\n {\n-  static_assert(var<int> == 100000 && var<char> == sizeof(char), \"\");\n+  static_assert(var<int32_t> == 100000 && var<char> == sizeof(char), \"\");\n }"}, {"sha": "027bd5e2083d85f0a4448a71fe765faacd3cded1", "filename": "gcc/testsuite/g++.dg/cpp1z/direct-enum-init1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -54,7 +54,7 @@ foo ()\n   C c3 { 8L };\t\t// { dg-error \"cannot convert 'long int' to 'C' in initialization\" \"\" { target c++14_down } }\n   B b4 {short (c + 5)};\t// { dg-error \"invalid conversion from 'short int' to 'B'\" \"\" { target c++14_down } }\n   B b5 {c + 5};\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int'\" \"\" { target c++17 } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int'\" \"\" { target { c++17 && { ! short_eq_int } } } .-1 }\n   C c4 { ll };\t\t// { dg-error \"cannot convert 'long long int' to 'C' in initialization\" \"\" { target c++14_down } }\n \t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int'\" \"\" { target c++17 } .-1 }\n   C c5 {short (c + 5)};\t// { dg-error \"cannot convert 'short int' to 'C' in initialization\" \"\" { target c++14_down } }\n@@ -120,7 +120,7 @@ foo2 ()\n   C c3 { 8L };\t\t// { dg-error \"cannot convert 'long int' to 'C' in initialization\" \"\" { target c++14_down } }\n   B b4 {short (c + 5)};\t// { dg-error \"invalid conversion from 'short int' to 'B'\" \"\" { target c++14_down } }\n   B b5 {c + 5};\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int'\" \"\" { target c++17 } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int'\" \"\" { target { c++17 && { ! short_eq_int } } } .-1 }\n   C c4 { ll };\t\t// { dg-error \"cannot convert 'long long int' to 'C' in initialization\" \"\" { target c++14_down } }\n \t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int'\" \"\" { target c++17 } .-1 }\n   C c5 {short (c + 5)};\t// { dg-error \"cannot convert 'short int' to 'C' in initialization\" \"\" { target c++14_down } }\n@@ -188,7 +188,7 @@ foo3 ()\n   J c3 { 8L };\t\t// { dg-error \"cannot convert 'long int' to 'C' in initialization\" \"\" { target c++14_down } }\n   I b4 {short (c + 5)};\t// { dg-error \"invalid conversion from 'short int' to 'B'\" \"\" { target c++14_down } }\n   I b5 {c + 5};\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int'\" \"\" { target c++17 } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int'\" \"\" { target { c++17 && { ! short_eq_int } } } .-1 }\n   J c4 { ll };\t\t// { dg-error \"cannot convert 'long long int' to 'C' in initialization\" \"\" { target c++14_down } }\n \t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int'\" \"\" { target c++17 } .-1 }\n   J c5 {short (c + 5)};\t// { dg-error \"cannot convert 'short int' to 'C' in initialization\" \"\" { target c++14_down } }"}, {"sha": "6d374802f002e5666ebd7d0cbb03db240d8d284d", "filename": "gcc/testsuite/g++.dg/delayedfold/fwrapv1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Ffwrapv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Ffwrapv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Ffwrapv1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,6 @@\n // PR c++/69631\n // { dg-options -fwrapv }\n+// { dg-skip-if \"\" int16 }\n \n struct C {\n   static const unsigned short max = static_cast<unsigned short>((32767 * 2 + 1));"}, {"sha": "2e309c34167f06793d05561ed70cd17d56110d06", "filename": "gcc/testsuite/g++.dg/expr/bitfield9.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -4,11 +4,13 @@\n \n extern \"C\" void abort();\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct S {\n   long long i : 32;\n };\n \n-void f(int i, int j) {\n+void f(int32_t i, int32_t j) {\n   if (i != 0xabcdef01)\n     abort();\n   if (j != 0)"}, {"sha": "97579035355776eeb49be71b35c47497c6e0da49", "filename": "gcc/testsuite/g++.dg/ext/attribute-test-1.C", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -4,22 +4,24 @@\n \n extern \"C\" void abort();\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n #define vector __attribute__((vector_size(16)))\n \n struct Constants {\n-   inline vector unsigned int deadbeef(void) const {\n-       return (vector unsigned int){0xdeadbeef, 0xabababab, 0x55555555, 0x12345678};\n+   inline vector uint32_t deadbeef(void) const {\n+       return (vector uint32_t){0xdeadbeef, 0xabababab, 0x55555555, 0x12345678};\n    };\n };\n \n-inline vector unsigned int const_deadbeef(Constants &C)\n+inline vector uint32_t const_deadbeef(Constants &C)\n {\n   return C.deadbeef();\n }\n \n union u {\n-              unsigned int f[4];\n-              vector unsigned int v;\n+              uint32_t f[4];\n+              vector uint32_t v;\n } data;\n \n int main()"}, {"sha": "91019dba52ac11a2fc0cf83d79afc50d53714611", "filename": "gcc/testsuite/g++.dg/ext/bitfield1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,9 +2,11 @@\n // { dg-do link }\n // { dg-options \"\" }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct S\n {\n-  signed int a:17;\n+  int32_t a:17;\n } x;\n \n typedef typeof (x.a) foo;\n@@ -15,7 +17,7 @@ T* inc(T* p) { return p+1; }\n int main ()\n {\n   foo x[2] = { 1,2 };\n-  int y[2] = { 1,2 };\n+  int32_t y[2] = { 1,2 };\n   *inc(x);\n   *inc(y);\n   return 0;"}, {"sha": "f0603f9a261a59138fa5c1e460f9aefa355fc6df", "filename": "gcc/testsuite/g++.dg/ext/flexary13.C", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary13.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -7,10 +7,12 @@\n                      __FILE__, __LINE__, STR(exp)), \\\n                       __builtin_abort ()))\n \n-struct Ax { int n, a[]; };\n-struct AAx { int i; Ax ax; };\n+typedef int int32_t __attribute__((mode (__SI__)));\n \n-int i = 12345678;\n+struct Ax { int32_t n, a[]; };\n+struct AAx { int32_t i; Ax ax; };\n+\n+int32_t i = 12345678;\n \n int main ()\n {\n@@ -44,7 +46,7 @@ int main ()\n     ASSERT (s.n == 456 && s.a [0] == i);\n   }\n   {\n-    int j = i + 1, k = j + 1;\n+    int32_t j = i + 1, k = j + 1;\n     static Ax s =\n       { 3, { i, j, k } }; // dg-warning \"initialization of a flexible array member\" }\n     ASSERT (s.n == 3 && s.a [0] == i && s.a [1] == j && s.a [2] == k);"}, {"sha": "a792a737c52086905c4fa087e89de02ba6492763", "filename": "gcc/testsuite/g++.dg/ext/utf-cvt.C", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cvt.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -27,8 +27,8 @@ void m(char16_t c0, char32_t c1)\n     f_s (c0);\t/* { dg-warning \"change the sign\" } */\n     fss (c0);\t/* { dg-warning \"change the sign\" } */\n     fus (c0);\n-    f_i (c0);\n-    fsi (c0);\n+    f_i (c0);\t/* { dg-warning \"change the sign\" \"\" { target int16 } } */\n+    fsi (c0);\t/* { dg-warning \"change the sign\" \"\" { target int16 } } */\n     fui (c0);\n     f_l (c0);\n     fsl (c0);\n@@ -43,11 +43,13 @@ void m(char16_t c0, char32_t c1)\n     f_s (c1);\t/* { dg-warning \"change value\" } */\n     fss (c1);\t/* { dg-warning \"change value\" } */\n     fus (c1);\t/* { dg-warning \"change value\" } */\n-    f_i (c1);\t/* { dg-warning \"change the sign\" } */\n-    fsi (c1);\t/* { dg-warning \"change the sign\" } */\n-    fui (c1);\n-    f_l (c1);\t/* { dg-warning \"change the sign\" \"\" { target { llp64 || ilp32 } } } */\n-    fsl (c1);\t/* { dg-warning \"change the sign\" \"\" { target { llp64 || ilp32 } } } */\n+    f_i (c1);\t/* { dg-warning \"change the sign\" \"\" { target { ! int16 } } } */\n+    \t\t/* { dg-warning \"change value\" \"\" { target int16 } .-1 } */\n+    fsi (c1);\t/* { dg-warning \"change the sign\" \"\" { target { ! int16 } } } */\n+    \t\t/* { dg-warning \"change value\" \"\" { target int16 } .-1 } */\n+    fui (c1);\t/* { dg-warning \"change value\" \"\" { target int16 } } */\n+    f_l (c1);\t/* { dg-warning \"change the sign\" \"\" { target { llp64 || { ilp32 || int16 } } } } */\n+    fsl (c1);\t/* { dg-warning \"change the sign\" \"\" { target { llp64 || { ilp32 || int16 } } } } */\n     ful (c1);\n     f_ll (c1);\n     fsll (c1);"}, {"sha": "b0a003c967ad5f1eb4cbf05eb7aa158145ff68f1", "filename": "gcc/testsuite/g++.dg/ext/vector28.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector28.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n \n-typedef int veci __attribute__ ((vector_size (4 * sizeof (int))));\n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n+typedef int veci __attribute__ ((vector_size (4 * sizeof (int32_t))));\n typedef float vecf __attribute__ ((vector_size (4 * sizeof (float))));\n \n void f (veci *a, vecf *b, int c)"}, {"sha": "bce4d7b0af709f70d90dc43c171375a2c0d6f84e", "filename": "gcc/testsuite/g++.dg/ext/vla15.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla15.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,12 +3,14 @@\n // { dg-options \"\" }\n // { dg-require-effective-target alloca }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n void *volatile p;\n \n int\n main (void)\n {\n-  int n = 0;\n+  int32_t n = 0;\n  lab:;\n   int x[n % 1000 + 1];\n   x[0] = 1;"}, {"sha": "9c12831bbeaeeecafb4c83287290e0ea7399013c", "filename": "gcc/testsuite/g++.dg/init/array11.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray11.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,3 +1,4 @@\n+// { dg-require-effective-target size32plus }\n /* PR 11665 \n    Orgin: jwhite@cse.unl.edu\n    The problem was in initializer_constant_valid_p,"}, {"sha": "024d93ed4abc4bffc269d0b079bd77ba4f08ca86", "filename": "gcc/testsuite/g++.dg/init/array15.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray15.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run }\n+// { dg-require-effective-target size24plus }\n \n // Copyright (C) 2004 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 8 Dec 2004 <nathan@codesourcery.com>"}, {"sha": "4712e9d7253ddff8ffc20f302bbd73635a81b417", "filename": "gcc/testsuite/g++.dg/init/array4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray4.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-require-effective-target size20plus }\n // Origin: Markus Breuer <markus.breuer@materna.de>\n \n // PR c++/6944"}, {"sha": "e1dd4d802db5d07efc2d424999b04f7eafd1e594", "filename": "gcc/testsuite/g++.dg/init/const7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst7.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,7 +3,7 @@\n \n struct s { int x, y; };\n short offsets[1] = {\n-  ((char*) &(((struct s*)16)->y) - (char *)16), // { dg-message \"narrowing\" \"\" { target c++11 } }\n+  ((char*) &(((struct s*)16)->y) - (char *)16), // { dg-message \"narrowing\" \"\" { target { c++11 && { ! ptr_eq_short } } } }\n };\n \n // This ensures that we get a dump whether or not the bug is present."}, {"sha": "405b67d151fc3c32d7ee11496efa8bd12794c351", "filename": "gcc/testsuite/g++.dg/init/new38.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -40,7 +40,7 @@ template <typename T>\n void\n large_array_template3(int n)\n {\n-  new T[n] // { dg-error \"size of array exceeds maximum object size\" }\n+  new T[n] // { dg-error \"size.*of array exceeds maximum object size\" }\n     [(1ULL << (sizeof(void *) * 4)) / sizeof(T)]\n     [1ULL << (sizeof(void *) * 4)];\n }"}, {"sha": "cf4bc160746ad3e83f0e58813266901716159591", "filename": "gcc/testsuite/g++.dg/init/new44.C", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -42,8 +42,8 @@ test_one_dim_char_array ()\n     p = new char [MAX - 2];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new char [MAX - 99];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new char [MAX / 2];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [MAX / 2 - 1];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [MAX / 2 - 2];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 1];         // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new char [MAX / 2 - 2];         // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid testing the expressions below since whether or not they\n     // are accepted depends on the precision of size_t (which also\n@@ -76,7 +76,7 @@ test_one_dim_short_array ()\n     p = new short [MAX / 2 - 6];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new short [MAX / 2 - 7];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new short [MAX / 2 - 8];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new short [MAX / 4];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 4];            // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new short [MAX / 4 - 1];\n@@ -93,8 +93,8 @@ test_two_dim_char_array ()\n     p = new char [1][MAX - 2];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new char [1][MAX - 99];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new char [1][MAX / 2];          // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [1][MAX / 2 - 1];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [1][MAX / 2 - 2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [1][MAX / 2 - 1];      // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new char [1][MAX / 2 - 2];      // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [1][MAX / 2 - 3];\n@@ -125,8 +125,8 @@ test_two_dim_char_array ()\n     p = new char [MAX][2];              // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new char [MAX][1];              // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new char [MAX / 2][1];          // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [MAX / 2 - 1][1];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [MAX / 2 - 2][1];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 1][1];      // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new char [MAX / 2 - 2][1];      // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [MAX / 2 - 3][1];\n@@ -148,8 +148,8 @@ test_three_dim_char_array ()\n     p = new char [1][1][MAX - 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new char [1][1][MAX - 99];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new char [1][1][MAX / 2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [1][1][MAX / 2 - 1];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [1][1][MAX / 2 - 2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [1][1][MAX / 2 - 1];   // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new char [1][1][MAX / 2 - 2];   // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [1][1][MAX / 2 - 3];\n@@ -173,7 +173,7 @@ test_three_dim_char_array ()\n     p = new char [1][2][MAX / 2 - 6];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new char [1][2][MAX / 2 - 7];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new char [1][2][MAX / 2 - 8];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 4];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [1][2][MAX / 4];       // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [1][2][MAX / 4 - 1];\n@@ -195,7 +195,7 @@ test_three_dim_char_array ()\n     p = new char [2][1][MAX / 2 - 6];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new char [2][1][MAX / 2 - 7];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new char [2][1][MAX / 2 - 8];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [2][1][MAX / 4];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 4];       // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [2][1][MAX / 4 - 1];\n@@ -290,16 +290,20 @@ test_N_dim_char_array ()\n {\n #if __SIZEOF_SIZE_T__ == 8\n     enum { N = 256 };\n-#else\n+#elif __SIZEOF_SIZE_T__ == 4\n     enum { N = 16 };\n+#else\n+    enum { N = 4 };\n #endif\n \n+#ifndef __MSP430X_LARGE__  /* 20-bit size_t.  */\n     p = new char        [N][N][N][N][N][N][N];\n     p = new char [N / 2][2][N][N][N][N][N][N];\n     p = new char [N - 1][N / 2][N][N][N][N][N][N];\n-    p = new char [N / 2][N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [N - 1][N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new char [N]    [N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [N / 2][N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" \"\" { target { ! msp430_large } } }\n+    p = new char [N - 1][N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" \"\" { target { ! msp430_large } } }\n+    p = new char [N]    [N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" \"\" { target { ! msp430_large } } }\n+#endif\n }\n \n typedef struct Byte {\n@@ -321,8 +325,8 @@ test_one_dim_byte_array (void *p)\n     p = new (p) B [MAX - 2];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new (p) B [MAX - 99];           // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new (p) B [MAX / 2];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [MAX / 2 - 1];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [MAX / 2 - 2];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 1];        // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new (p) B [MAX / 2 - 2];        // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid testing the expressions below since whether or not they\n     // are accepted depends on the precision of size_t (which determines\n@@ -348,8 +352,8 @@ test_placement_two_dim_byte_struct_array (void *p)\n     p = new (p) B [1][MAX - 2];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new (p) B [1][MAX - 99];        // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new (p) B [1][MAX / 2];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [1][MAX / 2 - 1];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [1][MAX / 2 - 2];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [1][MAX / 2 - 1];     // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new (p) B [1][MAX / 2 - 2];     // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [1][MAX / 2 - 3];\n@@ -380,8 +384,8 @@ test_placement_two_dim_byte_struct_array (void *p)\n     p = new (p) B [MAX][2];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new (p) B [MAX][1];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new (p) B [MAX / 2][1];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [MAX / 2 - 1][1];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [MAX / 2 - 2][1];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 1][1];     // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new (p) B [MAX / 2 - 2][1];     // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [MAX / 2 - 3][1];\n@@ -403,8 +407,8 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][1][MAX - 2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new (p) B [1][1][MAX - 99];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new (p) B [1][1][MAX / 2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [1][1][MAX / 2 - 1];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [1][1][MAX / 2 - 2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [1][1][MAX / 2 - 1];  // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n+    p = new (p) B [1][1][MAX / 2 - 2];  // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [1][1][MAX / 2 - 3];\n@@ -428,7 +432,7 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][2][MAX / 2 - 6];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new (p) B [1][2][MAX / 2 - 7];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new (p) B [1][2][MAX / 2 - 8];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 4];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [1][2][MAX / 4];      // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [1][2][MAX / 4 - 1];\n@@ -450,7 +454,7 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][1][MAX / 2 - 6];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new (p) B [2][1][MAX / 2 - 7];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n     p = new (p) B [2][1][MAX / 2 - 8];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n-    p = new (p) B [2][1][MAX / 4];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 4];      // { dg-error \"size .\\[0-9\\]+. of array\" \"cookie required\" { target { ! msp430_small } } }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [2][1][MAX / 4 - 1];"}, {"sha": "25abd60ff3b4d4a04c7a8ecb3ae37b6d7180a060", "filename": "gcc/testsuite/g++.dg/init/value9.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue9.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,6 +1,8 @@\n // PR c++/50793\n // { dg-do run }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct NonTrivial\n {\n   NonTrivial() { }\n@@ -9,7 +11,7 @@ struct NonTrivial\n struct S\n {\n   NonTrivial nt;\n-  int i;\n+  int32_t i;\n };\n \n int f(S s)"}, {"sha": "444805dca8c470f6049568e1fe7c4e901c027725", "filename": "gcc/testsuite/g++.dg/ipa/pr77333.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr77333.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr77333.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr77333.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,6 +1,8 @@\n // { dg-do run }\n // { dg-options \"-O2 -fno-ipa-sra\" }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n volatile int global;\n int __attribute__((noinline, noclone))\n get_data (int i)\n@@ -18,7 +20,7 @@ char buf[512];\n class A\n {\n public:\n-  int field;\n+  int32_t field;\n   char *s;\n \n   A() : field(223344)"}, {"sha": "92dec575f9b1de525a18e0ff3639a5411be75264", "filename": "gcc/testsuite/g++.dg/lto/20080908-1_0.C", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080908-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080908-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080908-1_0.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,16 +1,18 @@\n /* { dg-lto-do run }  */\n extern \"C\" { extern void *memcpy (void *, const void *, __SIZE_TYPE__); }\n \n-inline int\n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n+inline int32_t\n bci (const float &source)\n {\n- int dest;\n+ int32_t dest;\n  memcpy (&dest, &source, sizeof (dest));\n  return dest;\n }\n \n inline float\n-bcf (const int &source)\n+bcf (const int32_t &source)\n {\n  float dest;\n  memcpy (&dest, &source, sizeof (dest));\n@@ -20,17 +22,20 @@ bcf (const int &source)\n float\n Foo ()\n {\n- const int foo = bci (0.0f);\n- int bar = foo;\n- const int baz = foo & 1;\n+ const int32_t foo = bci (0.0f);\n+ int32_t bar = foo;\n+ const int32_t baz = foo & 1;\n  if (!baz && (foo & 2))\n    bar = 0;\n  return bcf (bar);\n }\n \n int main ()\n {\n-  if (Foo () != 0.0)\n-    return 1;\n+  if (sizeof (int32_t) == sizeof (float))\n+    {\n+      if (Foo () != 0.0)\n+\treturn 1;\n+    }\n   return 0;\n }"}, {"sha": "c03badd258f6b635286be61ec2574a7aac041e9c", "filename": "gcc/testsuite/g++.dg/opt/pr55717.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55717.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55717.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55717.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,6 +2,8 @@\n // { dg-do compile }\n // { dg-options \"-O -g\" }\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n struct DebugOnly {};\n template <class T>\n struct StripConst { typedef T result; };\n@@ -90,7 +92,7 @@ bool IsScriptMarked (JSScript **);\n struct AllocationSiteKey\n {\n   JSScript *script;\n-  unsigned offset : 24;\n+  uint32_t offset : 24;\n   int kind;\n   typedef AllocationSiteKey Lookup;\n   static unsigned hash (AllocationSiteKey key) { return (long (key.script->code + key.offset)) ^ key.kind; }"}, {"sha": "ee2a78b49627b1e6577fc3954f11b24927fe0aae", "filename": "gcc/testsuite/g++.dg/opt/pr60597.C", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr60597.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr60597.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr60597.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,44 +2,46 @@\n // { dg-do compile }\n // { dg-options \"-O2 -g\" }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct A\n {\n-  int foo () const;\n-  int bar () const;\n-  int a;\n+  int32_t foo () const;\n+  int32_t bar () const;\n+  int32_t a;\n };\n \n struct B\n {\n-  int foo ();\n-  int bar ();\n+  int32_t foo ();\n+  int32_t bar ();\n };\n \n-int *c, d;\n+int32_t *c, d;\n \n-int\n+int32_t\n A::foo () const\n {\n-  int b = a >> 16;\n+  int32_t b = a >> 16;\n   return b;\n }\n \n-int\n+int32_t\n A::bar () const\n {\n-  int b = a;\n+  int32_t b = a;\n   return b;\n }\n \n void\n-baz (A &x, B h, int i, int j)\n+baz (A &x, B h, int32_t i, int32_t j)\n {\n   for (; i < h.bar (); ++i)\n     for (; h.foo (); ++j)\n       {\n-\tint g = x.foo ();\n-\tint f = x.bar ();\n-\tint e = c[0] & 1;\n+\tint32_t g = x.foo ();\n+\tint32_t f = x.bar ();\n+\tint32_t e = c[0] & 1;\n \td = (e << 1) | (g << 16) | (f & 1);\n \tc[j] = 0;\n       }"}, {"sha": "522af3b5aa730b9c94643db6ab6764759403981d", "filename": "gcc/testsuite/g++.dg/opt/pr81715.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr81715.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr81715.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr81715.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,6 +2,7 @@\n // { dg-do compile }\n // Verify the variables for inlined foo parameters are reused\n // { dg-options \"-O2 -Wframe-larger-than=16384\" }\n+// { dg-require-effective-target size20plus }\n \n struct S { int a, b, c, d, e; char f[1024]; };\n void baz (int *, int *, int *, struct S *, int *, int *);"}, {"sha": "daa7ffdbcefb4fbb69069eacd22f39b78c36bfaf", "filename": "gcc/testsuite/g++.dg/opt/reload3.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freload3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freload3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freload3.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -4,6 +4,8 @@\n \n #include <cstdlib>\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n class QTime\n {\n public:\n@@ -15,7 +17,7 @@ private:\n     unsigned ds;\n };\n \n-static const unsigned MSECS_PER_DAY = 86400000;\n+static const uint32_t MSECS_PER_DAY = 86400000;\n \n QTime QTime::addMSecs(int ms) const\n {"}, {"sha": "533579a0599f70f7c2142be229433521ffd4881f", "filename": "gcc/testsuite/g++.dg/opt/temp2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftemp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftemp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftemp2.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run }\n+// { dg-require-effective-target size20plus }\n \n // Copyright (C) 2006 Free Software Foundation, Inc.\n "}, {"sha": "cbda9187d5bead8e6cb04cbe11f5bbb54caeb61c", "filename": "gcc/testsuite/g++.dg/opt/thunk1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fthunk1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,13 +1,14 @@\n // PR 6788\n // Test that the thunk adjusts the this pointer properly.\n // { dg-do run }\n+// { dg-require-effective-target size20plus }\n \n extern \"C\" void abort ();\n \n struct A\n {\n   virtual void foo() = 0;\n-  char large[33*1024];\n+  char large[33*1024U];\n };\n \n struct B"}, {"sha": "81eec7ce7c7bdcb676cd0aff28ba02b0fd4d145f", "filename": "gcc/testsuite/g++.dg/other/error23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror23.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,5 @@\n // PR c++/34918\n // { dg-do compile }\n \n-int v __attribute ((vector_size (8)));\n+int v __attribute ((vector_size (__SIZEOF_INT__ * 2)));\n bool b = !(v - v);\t// { dg-error \"not convert .__vector.2. int. to .bool. in initialization\" }"}, {"sha": "3ea1af25042e2325f092e911ebe8a5baa21b6996", "filename": "gcc/testsuite/g++.dg/other/pr31078.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr31078.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr31078.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr31078.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,4 +1,5 @@\n-typedef int SLONG;\n+typedef int SLONG __attribute__((mode (__SI__)));\n+\n typedef char SCHAR;\n typedef short SSHORT;\n typedef char TEXT;"}, {"sha": "e5748c02eab50c09d7677a0d249ff6ebce45dd38", "filename": "gcc/testsuite/g++.dg/parse/concat1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconcat1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconcat1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconcat1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,7 +3,7 @@\n \n /* Intended as a compile-time test for string literal concatenation.  */\n \n-#define e0\t\"a\"    /* { dg-error \"size of string literal is too large\" \"\" { target { ! size32plus } } } */\n+#define e0\t\"a\"    /* { dg-error \"size of string literal is too large\" \"\" { target { ! size20plus } } } */\n #define e1\te0 e0 e0 e0 e0 e0 e0 e0 e0 e0\n #define e2\te1 e1 e1 e1 e1 e1 e1 e1 e1 e1\n #define e3\te2 e2 e2 e2 e2 e2 e2 e2 e2 e2"}, {"sha": "a81b3c4d391de2a3b797db23466a40d605b52c91", "filename": "gcc/testsuite/g++.dg/parse/defarg5.C", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg5.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -6,10 +6,13 @@\n \n // PR c++/12167 - infinite recursion\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n class A {   \n-  void report(int d\n+  void report(int32_t d\n \t      // the default arg is what NAN etc can expand to, but\n \t      // with the floatiness removed.\n-\t      = (__extension__ ((union { unsigned l; int d; })\n+\t      = (__extension__ ((union { uint32_t l; int32_t d; })\n \t\t\t\t{ l: 0x7fc00000U }).d));\n };"}, {"sha": "9dc6d1c4f2144395fa410406f9fb0bc1134faff5", "filename": "gcc/testsuite/g++.dg/pr48484.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48484.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48484.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48484.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,9 +2,11 @@\n /* { dg-options \"-O -finline-functions -finline-small-functions -Wuninitialized\" }  */\n /* { dg-add-options bind_pic_locally } */\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct SQObjectPtr\n {\n-  int _type;\n+  int32_t _type;\n   SQObjectPtr operator = (long);\n };\n struct SQObjectPtrVec\n@@ -53,11 +55,11 @@ bool\n     nrefidx = 0;\n   switch (o1._type)\n     {\n-    case 0x02000000:\n+    case 0x02000000L:\n       o4 = nrefidx;\n       jump = 1;\n       return true;\n-    case 0x00000080:\n+    case 0x00000080L:\n       {\n \tlong\n \t  idx = 10;"}, {"sha": "e716beed6abb9a56277d107cb459effb5589dabf", "filename": "gcc/testsuite/g++.dg/pr53037-2.C", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-2.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,6 +2,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0 -Wpacked-not-aligned\" } */\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n struct __attribute__ ((packed)) S1 { /* { dg-warning \"alignment 1 of 'S1' is less than 8\" } */\n   struct S8 s8;\n@@ -12,13 +14,13 @@ struct __attribute__ ((packed, aligned (8))) S2 {\n };\n \n struct __attribute__ ((packed, aligned (8))) S3 {\n-  int i1;\n+  int32_t i1;\n   struct S8 s8; /* { dg-warning \"'S3::s8' offset 4 in 'S3' isn't aligned to 8\" } */\n };\n \n struct __attribute__ ((packed, aligned (8))) S4 {\n-  int i1;\n-  int i2;\n+  int32_t i1;\n+  int32_t i2;\n   struct S8 s8;\n };\n \n@@ -27,11 +29,11 @@ struct __attribute__ ((packed)) S5 {\n };\n \n union __attribute__ ((packed)) U1 { /* { dg-warning \"alignment 1 of 'U1' is less than 8\" } */\n-  int i1;\n+  int32_t i1;\n   struct S8 s8;\n };\n \n union __attribute__ ((packed, aligned (8))) U2 {\n-  int i1;\n+  int32_t i1;\n   struct S8 s8;\n };"}, {"sha": "c79268f7cc8346c9ea08395d08388cb8eb329bce", "filename": "gcc/testsuite/g++.dg/pr53037-3.C", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-3.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,6 +2,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0 -Wall\" } */\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n struct __attribute__ ((packed)) S1 { /* { dg-warning \"alignment 1 of 'S1' is less than 8\" } */\n   struct S8 s8;\n@@ -12,13 +14,13 @@ struct __attribute__ ((packed, aligned (8))) S2 {\n };\n \n struct __attribute__ ((packed, aligned (8))) S3 {\n-  int i1;\n+  int32_t i1;\n   struct S8 s8; /* { dg-warning \"'S3::s8' offset 4 in 'S3' isn't aligned to 8\" } */\n };\n \n struct __attribute__ ((packed, aligned (8))) S4 {\n-  int i1;\n-  int i2;\n+  int32_t i1;\n+  int32_t i2;\n   struct S8 s8;\n };\n \n@@ -27,11 +29,11 @@ struct __attribute__ ((packed)) S5 {\n };\n \n union __attribute__ ((packed)) U1 { /* { dg-warning \"alignment 1 of 'U1' is less than 8\" } */\n-  int i1;\n+  int32_t i1;\n   struct S8 s8;\n };\n \n union __attribute__ ((packed, aligned (8))) U2 {\n-  int i1;\n+  int32_t i1;\n   struct S8 s8;\n };"}, {"sha": "e4a40b02912db0eb0850d292aa017051eb334b9d", "filename": "gcc/testsuite/g++.dg/pr66655.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -7,13 +7,13 @@ extern \"C\" void abort (void);\n \n #define COOKIE 0xabcd0123\n \n-int\n+int32_t\n g (void)\n {\n   return COOKIE;\n }\n \n-extern int f (void);\n+extern int32_t f (void);\n \n int\n main (void)"}, {"sha": "c730fbad48e68fc38b85b2e893addf147b0553df", "filename": "gcc/testsuite/g++.dg/pr66655.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655.h?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,7 @@\n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct S\n {\n-  static int i;\n-  static void set (int ii) { i = -ii; }\n+  static int32_t i;\n+  static void set (int32_t ii) { i = -ii; }\n };"}, {"sha": "96a10714cfce6fabe22a80446d4710bbf6339f17", "filename": "gcc/testsuite/g++.dg/pr66655_1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66655_1.cc?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,13 +1,13 @@\n #include \"pr66655.h\"\n \n-extern int g (void);\n+extern int32_t g (void);\n \n-int S::i;\n+int32_t S::i;\n \n-int\n+int32_t\n f (void)\n {\n-  int ret = g ();\n+  int32_t ret = g ();\n \n   S::set (ret);\n   return ret;"}, {"sha": "152d92af188be463fc603366218bb9f17f8f7ec9", "filename": "gcc/testsuite/g++.dg/pr67351.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67351.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67351.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67351.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,7 +3,7 @@\n \n typedef unsigned char uchar;\n typedef unsigned short ushort;\n-typedef unsigned int uint;\n+typedef unsigned uint __attribute__((mode (__SI__)));\n typedef unsigned long long uint64;\n \n class MyRgba"}, {"sha": "34f8a58aad8a7dafb99d863d8b55b7ab84faa5f6", "filename": "gcc/testsuite/g++.dg/template/array30.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray30.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,7 +1,9 @@\n-template <int I>\n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n+template <int32_t I>\n struct A\n {\n-  int ar[I][I][I][I][I][I][I][I][I][I]; // { dg-error \"exceeds maximum object size\" }\n+  int32_t ar[I][I][I][I][I][I][I][I][I][I]; // { dg-error \"exceeds maximum object size\" }\n };\n \n A<66000> a;"}, {"sha": "850d02ded0d400d63f95d864046df73c27092dfc", "filename": "gcc/testsuite/g++.dg/template/constant1.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,7 +3,13 @@\n extern void foo(int);\n \n template <class Key, class Value> void Basic() {\n+#if __SIZEOF_INT__ == 4\n   const int kT = 1.5e6;        // <--- causes ICE\n+#elif __SIZEOF_INT__ == 2\n+  const int kT = 1.5e4;        // <--- causes ICE\n+#elif __SIZEOF_INT__ == 1\n+  const int kT = 1.5e2;        // <--- causes ICE\n+#endif\n   int size = kT*2/3;\n   do {\n     foo(size);"}, {"sha": "ddf16694c310b9df8658a93eed85309f0e1c8f1a", "filename": "gcc/testsuite/g++.dg/template/constant2.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconstant2.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,7 +3,13 @@\n template<class C>\n class test {\n  protected:\n+#if __SIZEOF_INT__ == 4\n   static const int versionConst = 0x80000000;\n+#elif __SIZEOF_INT__ == 2\n+  static const int versionConst = 0x8000;\n+#elif __SIZEOF_INT__ == 1\n+  static const int versionConst = 0x80;\n+#endif\n   enum { versionEnum = versionConst };\n  public:\n   int getVersion();"}, {"sha": "a9c517886614b0508582867983a610c0277b1b09", "filename": "gcc/testsuite/g++.dg/template/friend18.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend18.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -5,9 +5,11 @@\n \n // PR 10158. implicit inline template friends ICE'd\n \n-template <int N> struct X\n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n+template <int32_t N> struct X\n {\n-  template <int M> friend int foo(X const &, X<M> const&)\n+  template <int32_t M> friend int32_t foo(X const &, X<M> const&)\n   {\n     return N * 10000 + M;\n   }"}, {"sha": "cf91558847f8c21295784ba0526a5aa40959c93d", "filename": "gcc/testsuite/g++.dg/template/pr68978.C", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr68978.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr68978.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr68978.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,39 +1,41 @@\n // PR c++/68978\n \n-int i = 0, c = 0, radix = 10, max = 0x7fffffff;\n+typedef int int32_t __attribute__((mode (__SI__)));\n \n-template <typename T> int toi_1() {\n+int32_t i = 0, c = 0, radix = 10, max = 0x7fffffff;\n+\n+template <typename T> int32_t toi_1() {\n   if (max < ((i *= radix) += c))\n     return 0;\n   return i;\n }\n \n-template <typename T> int toi_2() {\n+template <typename T> int32_t toi_2() {\n   if (max < ((i = radix) = c))\n     return 0;\n   return i;\n }\n \n-template <typename T> int toi_3() {\n+template <typename T> int32_t toi_3() {\n   if (max < ((i = radix) += c))\n     return 0;\n   return i;\n }\n \n-template <typename T> int toi_4() {\n+template <typename T> int32_t toi_4() {\n   if (max < ((i += radix) = c))\n     return 0;\n   return i;\n }\n \n-template <typename T> int toi_5() {\n+template <typename T> int32_t toi_5() {\n   if (max < (((i = radix) += (c += 5)) *= 30))\n     return 0;\n   return i;\n }\n \n-int x = toi_1<int> ();\n-int y = toi_2<int> ();\n-int z = toi_3<int> ();\n-int w = toi_4<int> ();\n-int r = toi_5<int> ();\n+int32_t x = toi_1<int32_t> ();\n+int32_t y = toi_2<int32_t> ();\n+int32_t z = toi_3<int32_t> ();\n+int32_t w = toi_4<int32_t> ();\n+int32_t r = toi_5<int32_t> ();"}, {"sha": "c8cfd00cc15bff590179b6f7ea8c0e0e2b2b7bb6", "filename": "gcc/testsuite/g++.dg/torture/pr37421.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37421.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37421.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37421.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target int_eq_float } */\n \n #include <stdio.h>\n #include <string.h>"}, {"sha": "ff66d5e1635457dca889768ae12c51a314258d5e", "filename": "gcc/testsuite/g++.dg/torture/pr88861.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88861.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88861.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88861.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -4,7 +4,11 @@ struct Ax {\n   int n, a[];\n };\n \n+#if __SIZEOF_INT__ < 4\n+int i = 12345;\n+#else\n int i = 12345678;\n+#endif\n int main() {\n   static Ax s{456, i};\n   ((s.a[0]) ? (void)0 : (void)0);"}, {"sha": "7a9a2e09817e3a7181fe77539ac84ffd2f85695d", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19807.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -11,7 +11,7 @@ void foo(void)\n \tz = 1 + &a[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"&MEM <int> \\\\\\[\\\\\\(void .\\\\\\)&a \\\\\\+ 8B\\\\\\]\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"&MEM <int> \\\\\\[\\\\\\(void .\\\\\\)&a \\\\\\+ (?:4|8)B\\\\\\]\" 3 \"optimized\" } } */\n \n \n void bar(int i)"}, {"sha": "053b768fda691bf18af00baf7b81c10f9e74c402", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr27291.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27291.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27291.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27291.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -29,7 +29,7 @@ namespace std\n     static const bool is_integer = true;\n   };\n };\n-typedef unsigned int uint32_t;\n+typedef unsigned uint32_t __attribute__ ((__mode__ (__SI__)));\n namespace std\n {\n   template < typename _Alloc > class allocator;\n@@ -69,8 +69,8 @@ namespace boost\n     {\n     };\n   }\n-  template <> class integer_traits < int >:public std::numeric_limits < int >,\n-    public detail::integer_traits_base < int, (-2147483647 - 1), 2147483647 >\n+  template <> class integer_traits < int32_t >:public std::numeric_limits < int32_t >,\n+    public detail::integer_traits_base < int32_t, (-2147483647 - 1), 2147483647 >\n   {\n   };\n   namespace random\n@@ -191,11 +191,11 @@ namespace boost\n       private:UniformRandomNumberGenerator _rng;\n       };\n     }\n-    template < class RealType, int w, unsigned int p,\n-      unsigned int q > class lagged_fibonacci_01\n+    template < class RealType, int32_t w, uint32_t p,\n+      uint32_t q > class lagged_fibonacci_01\n     {\n     public:typedef RealType result_type;\n-      static const unsigned int long_lag = p;\n+      static const uint32_t long_lag = p;\n         lagged_fibonacci_01 ()\n       {\n \tseed ();\n@@ -210,7 +210,7 @@ namespace boost\n \ttypedef detail::pass_through_engine < Generator & >ref_gen;\n \tuniform_01 < ref_gen, RealType > gen01 =\n \t  uniform_01 < ref_gen, RealType > (ref_gen (gen));\n-\tfor (unsigned int j = 0; j < long_lag; ++j)\n+\tfor (uint32_t j = 0; j < long_lag; ++j)\n \t  x[j] = gen01 ();\n       }\n       RealType x[long_lag];"}, {"sha": "e0e3c5be157d3c4a1ec1d622a4f7b9602e1f03db", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr49516.C", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr49516.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr49516.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr49516.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,25 +3,25 @@\n \n extern \"C\" void abort (void);\n \n-typedef int int32;\n-typedef unsigned int uint32;\n-typedef unsigned long long uint64;\n-typedef short int16;\n+typedef int int32 __attribute__((mode (__SI__)));\n+typedef unsigned uint32 __attribute__((mode (__SI__)));\n+typedef unsigned uint64 __attribute__((mode (__DI__)));;\n+typedef int int16 __attribute__((mode (__HI__)));;\n \n class Tp {\n  public:\n-  Tp(int, const int segment, const int index) __attribute__((noinline));\n+  Tp(int32, const int32 segment, const int32 index) __attribute__((noinline));\n \n   inline bool operator==(const Tp& other) const;\n   inline bool operator!=(const Tp& other) const;\n-  int GetType() const { return type_; }\n-  int GetSegment() const { return segment_; }\n-  int GetIndex() const { return index_; }\n+  int32 GetType() const { return type_; }\n+  int32 GetSegment() const { return segment_; }\n+  int32 GetIndex() const { return index_; }\n  private:\n-  inline static bool IsValidSegment(const int segment);\n-  static const int kSegmentBits = 28;\n-  static const int kTypeBits = 4;\n-  static const int kMaxSegment = (1 << kSegmentBits) - 1;\n+  inline static bool IsValidSegment(const int32 segment);\n+  static const int32 kSegmentBits = 28;\n+  static const int32 kTypeBits = 4;\n+  static const int32 kMaxSegment = (1L << kSegmentBits) - 1;\n \n   union {\n \n@@ -38,7 +38,7 @@ class Tp {\n   };\n };\n \n-Tp::Tp(int t, const int segment, const int index)\n+Tp::Tp(int32 t, const int32 segment, const int32 index)\n  : index_(index), segment_(segment), type_(t) {}\n \n inline bool Tp::operator==(const Tp& other) const {\n@@ -50,18 +50,18 @@ inline bool Tp::operator!=(const Tp& other) const {\n \n class Range {\n  public:\n-  inline Range(const Tp& position, const int count) __attribute__((always_inline));\n+  inline Range(const Tp& position, const int32 count) __attribute__((always_inline));\n   inline Tp GetBeginTokenPosition() const;\n   inline Tp GetEndTokenPosition() const;\n  private:\n   Tp position_;\n-  int count_;\n+  int32 count_;\n   int16 begin_index_;\n   int16 end_index_;\n };\n \n inline Range::Range(const Tp& position,\n-                    const int count)\n+                    const int32 count)\n     : position_(position), count_(count), begin_index_(0), end_index_(0)\n     { }\n "}, {"sha": "2849e81595d86ff02c36b303aa019c1225dd32e4", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-integer.C", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -6,15 +6,18 @@\n \n #include <limits.h>\n \n+typedef signed int int32_t __attribute__((mode (__SI__)));\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n void fsc (signed char sc);\n void fuc (unsigned char uc);\n-unsigned fui (unsigned int  ui);\n-void fsi (signed int ui);\n+unsigned fui (uint32_t  ui);\n+void fsi (int32_t ui);\n \n-void h (int x)\n+void h (int32_t x)\n {\n-  unsigned int ui = 3;\n-  int   si = 3;\n+  uint32_t ui = 3;\n+  int32_t   si = 3;\n   unsigned char uc = 3;\n   signed char   sc = 3;\n "}, {"sha": "0f5bf58bd5d4a338f0411ba487d1b1d0aedea341", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null-2.C", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,9 +3,7 @@\n \n #include <cstddef>\n \n-void g(int) {}\n-void g(long) {}\n-void g(long long) {}\n+void g(__INTPTR_TYPE__) {}\n extern void g(void*);\n \n template <int I>\n@@ -17,13 +15,7 @@ template <class T>\n void l(T);\n \n template <>\n-void l(int) {}\n-\n-template <>\n-void l(long) {}\n-\n-template <>\n-void l(long long) {}\n+void l(__INTPTR_TYPE__) {}\n \n void warn_for_NULL()\n {"}, {"sha": "4cac26711168a546c25e17ab25f5e720935ef3c7", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null.C", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,9 +3,7 @@\n \n #include <cstddef>\n \n-void g(int) {}\n-void g(long) {}\n-void g(long long) {}\n+void g(__INTPTR_TYPE__) {}\n extern void g(void*);\n \n template <int I>\n@@ -17,13 +15,7 @@ template <class T>\n void l(T);\n \n template <>\n-void l(int) {}\n-\n-template <>\n-void l(long) {}\n-\n-template <>\n-void l(long long) {}\n+void l(__INTPTR_TYPE__) {}\n \n int main()\n {"}, {"sha": "81682524fd58c775b7ab4d126672038062b9bf92", "filename": "gcc/testsuite/g++.dg/warn/Wconversion3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -19,7 +19,7 @@ void test1 (void)\n   unsigned char f = (int) uc;\n   signed char g = (int) sc;\n   unsigned char h = (unsigned int) (short int) uc;\n-  signed char i = (int) (unsigned short int) sc;\t// { dg-warning \"may change value\" }\n+  signed char i = (int) (unsigned short int) sc;\t// { dg-warning \"may change value\" \"\" { target { ! short_eq_int } } }\n   unsigned char j = (unsigned int) (short int) us;\t// { dg-warning \"may change value\" }\n   signed char k = (int) (unsigned short int) ss;\t// { dg-warning \"may change value\" }\n }"}, {"sha": "30cea63b1e9feef209d5af471bdba5ec3563cd20", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-branches1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -6,7 +6,7 @@ template <typename T>\n void\n f (signed char i, int *p)\n {\n-  if (i)\n+  if (i) // { dg-warning \"this condition has identical branches\" \"\" { target short_eq_int } }\n     *p = (signed short) i;\n   else\n     *p = (unsigned short) i;"}, {"sha": "4afc7e503ab7437d610477e1d6c0ab7638985dcf", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size-5.C", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-5.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -11,17 +11,19 @@\n void* operator new (__SIZE_TYPE__ n, void *p) { return p; }\n void* operator new[] (__SIZE_TYPE__ n, void *p) { return p; }\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct A { };\n \n char carr[2];\n-int iarr[2];\n+int32_t iarr[2];\n \n struct C0 { char i, carr[0]; };\n-struct I0 { int i, iarr[0]; };\n+struct I0 { int32_t i, iarr[0]; };\n struct CX { char i, carr[]; };\n-struct IX { int i, iarr[]; };\n+struct IX { int32_t i, iarr[]; };\n \n-void test_single (C0 *pc, CX *qc, I0 *pi, IX *qi, int n)\n+void test_single (C0 *pc, CX *qc, I0 *pi, IX *qi, int32_t n)\n {\n   new (&carr[DIFF_MIN]) A ();       // { dg-warning \"placement new constructing an object of type .A. and size .1. in a region of type .char \\\\\\[2]. and size .0.\" }\n   new (&carr[-1]) A;                // { dg-warning \"\\\\\\[-Wplacement-new\" }"}, {"sha": "48d6b15656a6aaae65285d13aef7d6a41267741b", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size.C", "status": "modified", "additions": 125, "deletions": 123, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,6 +3,8 @@\n \n typedef __typeof__ (sizeof 0) size_t;\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n void* operator new (size_t, void *p) { return p; }\n void* operator new[] (size_t, void *p) { return p; }\n \n@@ -31,7 +33,7 @@ static __attribute__ ((used))struct SAC2 { char ac [2]; } sac2;\n static __attribute__ ((used))struct SAC3 { char ac [3]; } sac3;\n static __attribute__ ((used))struct SAC4 { char ac [4]; } sac4;\n \n-static __attribute__ ((used))struct SSC { SC sc; int x; } ssc;\n+static __attribute__ ((used))struct SSC { SC sc; int32_t x; } ssc;\n static __attribute__ ((used))struct SSAC1 { SAC1 sac; } ssac1;\n static __attribute__ ((used))struct SSAC2 { SAC2 sac; } ssac2;\n static __attribute__ ((used))struct SSAC3 { SAC3 sac; } ssac3;\n@@ -55,7 +57,7 @@ static __attribute__ ((used))void *r;\n static __attribute__ ((used))void* ptr () { return 0; }\n \n static __attribute__ ((used))\n-void test (void *p, int n)\n+void test (void *p, int32_t n)\n {\n     {\n         void *q = p;\n@@ -167,83 +169,83 @@ void test (void *p, int n)\n     new (ac8) char [2][2][2];\n     new (ac8) char [2][2][3];           // { dg-warning \"placement\" }\n \n-    new (&c) int;                       // { dg-warning \"placement\" }\n+    new (&c) int32_t;                       // { dg-warning \"placement\" }\n \n-    new (&ac1) int;                     // { dg-warning \"placement\" }\n-    new (&ac2) int;                     // { dg-warning \"placement\" }\n-    new (&ac3) int;                     // { dg-warning \"placement\" }\n-    new (&ac4) int;\n+    new (&ac1) int32_t;                     // { dg-warning \"placement\" }\n+    new (&ac2) int32_t;                     // { dg-warning \"placement\" }\n+    new (&ac3) int32_t;                     // { dg-warning \"placement\" }\n+    new (&ac4) int32_t;\n \n     // Constructing at an address of an array element.\n-    new (&ac1 [0]) int;                 // { dg-warning \"placement\" }\n-    new (&ac2 [0]) int;                 // { dg-warning \"placement\" }\n-    new (&ac3 [0]) int;                 // { dg-warning \"placement\" }\n-    new (&ac4 [0]) int;\n+    new (&ac1 [0]) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac2 [0]) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac3 [0]) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac4 [0]) int32_t;\n \n     // ...plus or minus a constant offset.\n-    new (&ac1 [0] + 0) int;             // { dg-warning \"placement\" }\n-    new (&ac2 [0] + 0) int;             // { dg-warning \"placement\" }\n-    new (&ac3 [0] + 0) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [0] + 0) int;\n-    new (&ac4 [1] + 0) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [1] - 1) int;\n-    new (&ac4 [2] - 1) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [2] - 2) int;\n-    new (&ac4 [3] - 1) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [3] - 2) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [3] - 3) int;\n-    new (&ac4 [4] - 1) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [4] - 2) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [4] - 3) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [4] - 4) int;\n-\n-    new (&ac1 [0] + 1) int;             // { dg-warning \"placement\" }\n-    new (&ac2 [0] + 1) int;             // { dg-warning \"placement\" }\n-    new (&ac3 [0] + 1) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [0] + 1) int;             // { dg-warning \"placement\" }\n-\n-    new (&ac3 [0] + n) int;             // { dg-warning \"placement\" }\n-    new (&ac4 [0] + n) int;             // no warning (n could be zero)\n-    new (&ac4 [1] + n) int;             // no warning (n could be negative)\n-    new (&ac4 [2] + n) int;             // ditto\n-    new (&ac4 [3] + n) int;             // ditto\n-    new (&ac4 [4] + n) int;             // ditto\n-    new (&ac4 [4] - n) int;             // (or positive)\n-\n-    new (&c + 0) int;                   // { dg-warning \"placement\" }\n-    new (&c + 1) int;                   // { dg-warning \"placement\" }\n+    new (&ac1 [0] + 0) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac2 [0] + 0) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac3 [0] + 0) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [0] + 0) int32_t;\n+    new (&ac4 [1] + 0) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [1] - 1) int32_t;\n+    new (&ac4 [2] - 1) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [2] - 2) int32_t;\n+    new (&ac4 [3] - 1) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [3] - 2) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [3] - 3) int32_t;\n+    new (&ac4 [4] - 1) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [4] - 2) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [4] - 3) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [4] - 4) int32_t;\n+\n+    new (&ac1 [0] + 1) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac2 [0] + 1) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac3 [0] + 1) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [0] + 1) int32_t;             // { dg-warning \"placement\" }\n+\n+    new (&ac3 [0] + n) int32_t;             // { dg-warning \"placement\" }\n+    new (&ac4 [0] + n) int32_t;             // no warning (n could be zero)\n+    new (&ac4 [1] + n) int32_t;             // no warning (n could be negative)\n+    new (&ac4 [2] + n) int32_t;             // ditto\n+    new (&ac4 [3] + n) int32_t;             // ditto\n+    new (&ac4 [4] + n) int32_t;             // ditto\n+    new (&ac4 [4] - n) int32_t;             // (or positive)\n+\n+    new (&c + 0) int32_t;                   // { dg-warning \"placement\" }\n+    new (&c + 1) int32_t;                   // { dg-warning \"placement\" }\n \n     // Constructing at an offset into the address of an array.\n-    new (&ac1 + 0) int;                 // { dg-warning \"placement\" }\n-    new (&ac1 + 1) int;                 // { dg-warning \"placement\" }\n-    new (&ac1 + n) int;                 // { dg-warning \"placement\" }\n-    new (&ac2 + 0) int;                 // { dg-warning \"placement\" }\n-    new (&ac2 + 1) int;                 // { dg-warning \"placement\" }\n-    new (&ac2 + n) int;                 // { dg-warning \"placement\" }\n-    new (&ac3 + 0) int;                 // { dg-warning \"placement\" }\n-    new (&ac3 + 1) int;                 // { dg-warning \"placement\" }\n+    new (&ac1 + 0) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac1 + 1) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac1 + n) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac2 + 0) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac2 + 1) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac2 + n) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac3 + 0) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac3 + 1) int32_t;                 // { dg-warning \"placement\" }\n \n     // Even though n below is uknown an array of 3 bytes isn't large\n-    // enugh for an int.\n-    new (&ac3 + n) int;                 // { dg-warning \"placement\" }\n+    // enugh for an int32_t.\n+    new (&ac3 + n) int32_t;                 // { dg-warning \"placement\" }\n \n-    new (&ac4 + 0) int;\n-    new (&ac4 + 1) int;                 // { dg-warning \"placement\" }\n-    new (&ac4 + n) int;                 // no warning (n could be zero)\n+    new (&ac4 + 0) int32_t;\n+    new (&ac4 + 1) int32_t;                 // { dg-warning \"placement\" }\n+    new (&ac4 + n) int32_t;                 // no warning (n could be zero)\n \n     // Constructing in an array object.\n-    new (ac1) int;                      // { dg-warning \"placement\" }\n-    new (ac2) int;                      // { dg-warning \"placement\" }\n-    new (ac3) int;                      // { dg-warning \"placement\" }\n-    new (ac4) int;\n-    new (ac5) int;\n-    new (ac5 + 0) int;\n-    new (ac5 + 1) int;\n-    new (ac5 + n) int;                  // no warning (n could be zero)\n-    new (ac5 + 2) int;                  // { dg-warning \"placement\" }\n-    new (ac5 + 3) int;                  // { dg-warning \"placement\" }\n-    new (ac5 + 4) int;                  // { dg-warning \"placement\" }\n-    new (ac5 + 5) int;                  // { dg-warning \"placement\" }\n+    new (ac1) int32_t;                      // { dg-warning \"placement\" }\n+    new (ac2) int32_t;                      // { dg-warning \"placement\" }\n+    new (ac3) int32_t;                      // { dg-warning \"placement\" }\n+    new (ac4) int32_t;\n+    new (ac5) int32_t;\n+    new (ac5 + 0) int32_t;\n+    new (ac5 + 1) int32_t;\n+    new (ac5 + n) int32_t;                  // no warning (n could be zero)\n+    new (ac5 + 2) int32_t;                  // { dg-warning \"placement\" }\n+    new (ac5 + 3) int32_t;                  // { dg-warning \"placement\" }\n+    new (ac5 + 4) int32_t;                  // { dg-warning \"placement\" }\n+    new (ac5 + 5) int32_t;                  // { dg-warning \"placement\" }\n \n     new (ac1_1) char;\n     new (ac1_1) char[1];\n@@ -278,73 +280,73 @@ void test (void *p, int n)\n     new (ac2_2) char[4][2];             // { dg-warning \"placement\" }\n     new (ac2_2) char[5];                // { dg-warning \"placement\" }\n \n-    new (&s) int;                       // { dg-warning \"placement\" }\n-    new (&as1) int;                     // { dg-warning \"placement\" }\n-    new (&as2) int;\n+    new (&s) int32_t;                       // { dg-warning \"placement\" }\n+    new (&as1) int32_t;                     // { dg-warning \"placement\" }\n+    new (&as2) int32_t;\n \n-    new (as1) int;                      // { dg-warning \"placement\" }\n-    new (as2) int;\n+    new (as1) int32_t;                      // { dg-warning \"placement\" }\n+    new (as2) int32_t;\n \n-    new (&sc.c) int;                    // { dg-warning \"placement\" }\n-    new (&sac1.ac) int;                 // { dg-warning \"placement\" }\n-    new (&sac2.ac) int;                 // { dg-warning \"placement\" }\n-    new (&sac3.ac) int;                 // { dg-warning \"placement\" }\n-    new (&sac4.ac) int;\n+    new (&sc.c) int32_t;                    // { dg-warning \"placement\" }\n+    new (&sac1.ac) int32_t;                 // { dg-warning \"placement\" }\n+    new (&sac2.ac) int32_t;                 // { dg-warning \"placement\" }\n+    new (&sac3.ac) int32_t;                 // { dg-warning \"placement\" }\n+    new (&sac4.ac) int32_t;\n \n     new (sc.pc) char;\n-    new (sc.pc) int;\n-    new (sc.pc) int[1024];\n-    new (sc.pc + 0) int;\n-    new (sc.pc + 0) int[2048];\n-    new (sc.pv) int;\n+    new (sc.pc) int32_t;\n+    new (sc.pc) int32_t[1024];\n+    new (sc.pc + 0) int32_t;\n+    new (sc.pc + 0) int32_t[2048];\n+    new (sc.pv) int32_t;\n     new (sc.pv) char[1024];\n \n-    new (sac1.ac) int;                  // { dg-warning \"placement\" }\n-    new (sac2.ac) int;                  // { dg-warning \"placement\" }\n-    new (sac3.ac) int;                  // { dg-warning \"placement\" }\n-    new (sac4.ac) int;\n+    new (sac1.ac) int32_t;                  // { dg-warning \"placement\" }\n+    new (sac2.ac) int32_t;                  // { dg-warning \"placement\" }\n+    new (sac3.ac) int32_t;                  // { dg-warning \"placement\" }\n+    new (sac4.ac) int32_t;\n \n     new (&ssc.sc) SSC;                  // { dg-warning \"placement\" }\n-    new (&ssac1.sac) int;               // { dg-warning \"placement\" }\n-    new (&ssac2.sac) int;               // { dg-warning \"placement\" }\n-    new (&ssac3.sac) int;               // { dg-warning \"placement\" }\n-    new (&ssac4.sac) int;\n+    new (&ssac1.sac) int32_t;               // { dg-warning \"placement\" }\n+    new (&ssac2.sac) int32_t;               // { dg-warning \"placement\" }\n+    new (&ssac3.sac) int32_t;               // { dg-warning \"placement\" }\n+    new (&ssac4.sac) int32_t;\n \n     new (&sssac4_2) char[sizeof sssac4_2];\n     new (&sssac4_2) char[sizeof sssac4_2 + 1];   // { dg-warning \"placement\" }\n \n     // taking the address of a temporary is allowed with -fpermissive\n-    new (&fsc ().c) int;                // { dg-warning \"18:taking address|placement\" }\n-    new (&fasc1 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n-    new (&fasc2 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n-    new (&fasc3 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n-    new (&fasc4 ().ac) int;             // { dg-warning \"20:taking address|placement\" }\n-\n-    new (&uac1) int;                    // { dg-warning \"placement\" }\n-    new (&uac2) int;                    // { dg-warning \"placement\" }\n-    new (&uac3) int;                    // { dg-warning \"placement\" }\n-    new (&uac4) int;\n-    new (&uac4 + 1) int;                // { dg-warning \"placement\" }\n-\n-    new (&uac1.c) int;                  // { dg-warning \"placement\" }\n-    new (&uac2.c) int;                  // { dg-warning \"placement\" }\n-    new (&uac3.c) int;                  // { dg-warning \"placement\" }\n+    new (&fsc ().c) int32_t;                // { dg-warning \"18:taking address|placement\" }\n+    new (&fasc1 ().ac) int32_t;             // { dg-warning \"20:taking address|placement\" }\n+    new (&fasc2 ().ac) int32_t;             // { dg-warning \"20:taking address|placement\" }\n+    new (&fasc3 ().ac) int32_t;             // { dg-warning \"20:taking address|placement\" }\n+    new (&fasc4 ().ac) int32_t;             // { dg-warning \"20:taking address|placement\" }\n+\n+    new (&uac1) int32_t;                    // { dg-warning \"placement\" }\n+    new (&uac2) int32_t;                    // { dg-warning \"placement\" }\n+    new (&uac3) int32_t;                    // { dg-warning \"placement\" }\n+    new (&uac4) int32_t;\n+    new (&uac4 + 1) int32_t;                // { dg-warning \"placement\" }\n+\n+    new (&uac1.c) int32_t;                  // { dg-warning \"placement\" }\n+    new (&uac2.c) int32_t;                  // { dg-warning \"placement\" }\n+    new (&uac3.c) int32_t;                  // { dg-warning \"placement\" }\n \n     // Diagnose the following even though the size of uac4.c could be\n     // expected to extend to the end of the union (as it is by Built-in\n     // Object Size and so isn't diagnosed in calls to functions like\n-    // memset(&uac4.c, 0, sizeof(int)) when _FORTIFY_SOURCE is non-zero.  */\n-    new (&uac4.c) int;                  // { dg-warning \"placement\" }\n+    // memset(&uac4.c, 0, sizeof(int32_t)) when _FORTIFY_SOURCE is non-zero.  */\n+    new (&uac4.c) int32_t;                  // { dg-warning \"placement\" }\n \n-    new (&uac4.c + 1) int;              // { dg-warning \"placement\" }\n+    new (&uac4.c + 1) int32_t;              // { dg-warning \"placement\" }\n }\n \n \n struct S { char c [2]; };\n \n // Verify the full text of the warning message.\n static  __attribute__ ((used))\n-void test_message (int i)\n+void test_message (int32_t i)\n {\n     char a [2];\n \n@@ -364,7 +366,7 @@ void test_message (int i)\n \n \n struct ClassWithMemberNew {\n-    struct Object { int i; } *pobj;\n+    struct Object { int32_t i; } *pobj;\n     unsigned nobj;\n \n     ClassWithMemberNew ();\n@@ -382,7 +384,7 @@ void ClassWithMemberNew::foo()\n \n \n struct ClassWithGlobalNew {\n-    int a [4];\n+    int32_t a [4];\n     ClassWithGlobalNew ();\n };\n \n@@ -425,31 +427,31 @@ extern TemplateClass<void> exttempl_void;\n static __attribute__ ((used))\n void test_extern_buffer_of_unknown_size ()\n {\n-    new (extbuf) int ();\n-    new (extbuf) int [1024];\n+    new (extbuf) int32_t ();\n+    new (extbuf) int32_t [1024];\n \n-    new (&exttempl_void) int ();\n-    new (&exttempl_void) int [1024];\n+    new (&exttempl_void) int32_t ();\n+    new (&exttempl_void) int32_t [1024];\n }\n \n-extern char extbuf_size_int [sizeof (int)];\n+extern char extbuf_size_int [sizeof (int32_t)];\n \n-extern TemplateClass<int> exttempl;\n+extern TemplateClass<int32_t> exttempl;\n \n // Verify that a warning is issued as expected when placement new is\n // called with an extern buffer of known size (and the case is handled\n // gracefully and doesn't cause an ICE).\n static __attribute__ ((used))\n void test_extern_buffer ()\n {\n-    new (extbuf_size_int) int ();\n-    new (extbuf_size_int) int [1];\n+    new (extbuf_size_int) int32_t ();\n+    new (extbuf_size_int) int32_t [1];\n \n-    struct S { int a [2]; };\n+    struct S { int32_t a [2]; };\n \n     new (extbuf_size_int) S;            // { dg-warning \"placement\" }\n-    new (extbuf_size_int) int [2];      // { dg-warning \"placement\" }\n+    new (extbuf_size_int) int32_t [2];      // { dg-warning \"placement\" }\n \n-    new (&exttempl) int ();             // { dg-warning \"placement\" }\n-    new (&exttempl) int [1024];         // { dg-warning \"placement\" }\n+    new (&exttempl) int32_t ();             // { dg-warning \"placement\" }\n+    new (&exttempl) int32_t [1024];         // { dg-warning \"placement\" }\n }"}, {"sha": "84c493c435f9d9493d623f077bb2ca578ce967f6", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-5.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-5.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,9 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-aliasing=2 -O2\" } */\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n float foo ()\n {\n-  unsigned int MASK = 0x80000000;\n+  uint32_t MASK = 0x80000000;\n   return (float &) MASK; /* { dg-warning \"strict-aliasing\" } */\n }\n "}, {"sha": "971e535590cf2df64c075350a4badb86d2ccb4af", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-bogus-signed-unsigned.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-bogus-signed-unsigned.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-bogus-signed-unsigned.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-bogus-signed-unsigned.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,10 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Wstrict-aliasing -fstrict-aliasing\" } */\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n \n-int foo () {\n-  int i;\n-  unsigned int* pu = reinterpret_cast<unsigned int*> (&i);  /* { dg-bogus \"signed vs. unsigned\" } */\n+int32_t foo () {\n+  int32_t i;\n+  uint32_t* pu = reinterpret_cast<uint32_t*> (&i);  /* { dg-bogus \"signed vs. unsigned\" } */\n   *pu = 1000000;\n   return i;\n }"}, {"sha": "813cefc2f707c4f71b42a08fa7b3f2a35d998de6", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits-Wextra.C", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -22,10 +22,14 @@ void a (unsigned char x)\n \n void b (unsigned short x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target short_eq_int } .-1 } */\n+  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target short_eq_int } .-1 } */\n+  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target short_eq_int } .-1 } */\n+  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target short_eq_int } .-1 } */\n }\n \n void c (unsigned int x)"}, {"sha": "104f53c7b56286da3bc3d5f747bf6271492be559", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits.C", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -22,10 +22,14 @@ void a (unsigned char x)\n \n void b (unsigned short x)\n {\n-  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n-  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" } */\n-  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" } */\n+  if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target short_eq_int } .-1 } */\n+  if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target short_eq_int } .-1 } */\n+  if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target short_eq_int } .-1 } */\n+  if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { ! short_eq_int } } } */\n+  /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target short_eq_int } .-1 } */\n }\n \n void c (unsigned int x)"}, {"sha": "2979c77718f88812fcf22048e98fca95d37169f0", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum11.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,6 @@\n // { dg-do assemble  }\n // GROUPS passed enums\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n class X\n {\n     enum\n@@ -8,7 +9,7 @@ class X\n        twoMask  = 0x000F0000,\n        thiMask = 0xFFF00000, // { dg-error \"comma at end\" \"\" { target { ! c++11 } } }\n     };\n-    unsigned int foo;\n+    uint32_t foo;\n \n public:\n     X (int) : foo (oneMask | twoMask ) {}               // No warning"}, {"sha": "453eb540ca252226622e34bb10097363e82aaea0", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900227_01.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -33,7 +33,7 @@\n \n int main ();\n \n-short s = (short) &main;\t// { dg-error \"11:cast \\[^\\n\\r]* loses precision\" \"lose\" { xfail h8*-*-* xstormy16-*-* } }\n+short s = (short) &main;\t// { dg-error \"11:cast \\[^\\n\\r]* loses precision\" \"lose\" { target { ! ptr_eq_short } } }\n char c = (char) &main;\t\t// { dg-error \"10:cast \\[^\\n\\r]* loses precision\" \"lose\" }\n \n int main () { return 0; }"}, {"sha": "b4cf044a80b460ada18e8ffbf20503afd94dac7c", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns15.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns15.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,6 @@\n // { dg-do assemble }\n // { dg-xfail-if \"\" { xstormy16-*-* } }\n+// { dg-require-effective-target size20plus }\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "5970cb21b62725475cef3ed8e20f6eadcf9918b8", "filename": "gcc/testsuite/g++.old-deja/g++.other/exprstmt1.C", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fexprstmt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fexprstmt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fexprstmt1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,23 +3,22 @@\n // { dg-error \"limited range of data type\" \"16-bit target\" { target xstormy16-*-* } 0 }\n // { dg-error \"shift count >=\" \"16-bit target\" { target xstormy16-*-* } 0 }\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n int main()\n {\n-  unsigned int x = 1381237248;\n-\n-  if (sizeof (x) != 4)\n-    return 0;\n+  uint32_t x = 1381237248;\n \n   x =\n     ({\n-      unsigned int y = x;\n+      uint32_t y = x;\n       ({\n-        unsigned int z = y;\n-        (unsigned int)\n-          ((((unsigned int)z & (unsigned int)0x000000ffUL) << 24)\n-           | (((unsigned int)z & (unsigned int)0x0000ff00UL) << 8)\n-           | (((unsigned int)z & (unsigned int)0x00ff0000UL) >> 8)\n-           | (((unsigned int)z & (unsigned int)0xff000000UL) >> 24));\n+        uint32_t z = y;\n+        (uint32_t)\n+          ((((uint32_t)z & (uint32_t)0x000000ffUL) << 24)\n+           | (((uint32_t)z & (uint32_t)0x0000ff00UL) << 8)\n+           | (((uint32_t)z & (uint32_t)0x00ff0000UL) >> 8)\n+           | (((uint32_t)z & (uint32_t)0xff000000UL) >> 24));\n        });\n      });\n   return x != 152658;"}, {"sha": "5702141babe309b356b1a1c054df9bf6fe1039fc", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline12.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -4,7 +4,7 @@\n // Origin: Hans-Peter Nilsson <hp@axis.com>\n // See <URL:http://gcc.gnu.org/ml/gcc-patches/2000-06/msg00310.html>\n \n-typedef unsigned int    udword;\n+typedef unsigned udword __attribute__((mode (__SI__)));\n extern \"C\" {\n void __assert (const char *, int, const char *);\n }"}, {"sha": "a3a98a722e2384bbd84d68be2412695672b6526b", "filename": "gcc/testsuite/g++.old-deja/g++.other/new6.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew6.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -5,8 +5,10 @@\n using namespace std;\n extern \"C\" void *malloc (size_t);\n \n-int special;\n-int space = 0xdeadbeef;\n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n+int32_t special;\n+int32_t space = 0xdeadbeef;\n \n void *operator new (size_t size)\n #if __cplusplus <= 199711L\n@@ -21,7 +23,7 @@ void *operator new (size_t size)\n int main ()\n {\n   special = 1;\n-  int *p = new int();\n+  int32_t *p = new int32_t();\n   special = 0;\n   return *p != 0;\n }"}, {"sha": "1ac630bc01f964a4f09d259b85e39585491d5b09", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash16.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash16.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,6 +1,7 @@\n // { dg-do assemble }\n // { dg-xfail-if \"\" { xstormy16-*-* } }\n // { dg-options \"\" }\n+// { dg-skip-if \"16-bit int overflow\" int16 }\n \n extern \"C\" void qsort(void *base, __SIZE_TYPE__ nmemb, __SIZE_TYPE__ size,\n               int (*compar)(const void *, const void *));"}, {"sha": "8109a2f0eaad515d0f4f28f03c4bcfc9a8bd9275", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb76.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb76.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,6 @@\n // { dg-do assemble  }\n // { dg-options \"-fno-short-enums\" }\n+// { dg-skip-if \"\" int16 }\n // the template operator!= interferes.  It should be in a namespace.\n \n #include <utility>"}, {"sha": "fa2b3e5cd1ada0747dc064e2186e2315a0bb1b73", "filename": "gcc/testsuite/g++.old-deja/g++.warn/flow1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fflow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fflow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fflow1.C?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,13 +2,15 @@\n // { dg-options \"-Wreturn-type\" }\n // Test that we don't get a warning about flowing off the end.\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct A {\n   ~A ();\n };\n \n-int f()\n+int32_t f()\n {\n   A a1[2];\n   A a2[2];\n-  return 1234567;\n+  return 1234567L;\n }"}, {"sha": "51362b2d6bee230285556d48a77254c6f16d67c9", "filename": "gcc/testsuite/gcc.dg/Walloca-14.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-14.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2,7 +2,8 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target alloca } */\n /* { dg-skip-if \"small address space\" { \"pdp11-*-*\" } } */\n-/* { dg-options \"-O2 -Walloca-larger-than=126812070\" } */\n+/* { dg-options \"-O2 -Walloca-larger-than=126812070\" { target ptr32plus }  } */\n+/* { dg-options \"-O2 -Walloca-larger-than=12070\" { target { ! ptr32plus } } } */\n \n void\n g (int *p)"}, {"sha": "9b5f33317350f4aa804e8e7b240fbee22590f761", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-32.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -150,8 +150,8 @@ void wide_ptr_index_range_chain (void)\n \n     T (p3[0]);                /* { dg-warning \"array subscript \\\\\\[3, 6] is outside array bounds of .\\[a-z \\]+\\\\\\[3].\" } */\n     T (p3[1]);                /* { dg-warning \"array subscript \\\\\\[4, 7] is outside array bounds of .\\[a-z \\]+\\\\\\[3].\" } */\n-    T (p3[9999]);             /* { dg-warning \"array subscript \\\\\\[10002, 10005] is outside array bounds of .\\[a-z \\]+\\\\\\[3].\" } */\n-\n+    T (p3[9999]);             /* { dg-warning \"array subscript \\\\\\[10002, 10005] is outside array bounds of .\\[a-z \\]+\\\\\\[3].\" \"\" { target size20plus} } */\n+    /* { dg-warning \"array subscript \\\\\\[-6382, -6379] is outside array bounds of .\\[a-z \\]+\\\\\\[3].\" \"\" { target { ! size20plus } } .-1 } */\n     /* Large offsets are indistinguishable from negative values.  */\n     T (p3[DIFF_MAX]);         /* { dg-warning \"array subscript\" \"bug\" { xfail *-*-* } } */\n   }"}, {"sha": "e845b43c0736bf16774dabec484a3e9f5ac102ae", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-4.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -41,7 +41,7 @@ void test_integer_conversion_abs (void)\n   i = abs (uc);\n \n   i = abs (si);\n-  i = abs (usi);\n+  i = abs (usi);    /* { dg-warning \".abs. argument 1 promotes to .unsigned int. where .int. is expected in a call to built-in function declared without prototype\" \"\" { target short_eq_int } } */\n \n   i = abs (i);\n   i = abs (ui);     /* { dg-warning \".abs. argument 1 type is .unsigned int. where .int. is expected in a call to built-in function declared without prototype\" } */\n@@ -77,9 +77,9 @@ void test_integer_conversion_memset (void *d)\n   /* Passing a ptrdiff_t where size_t is expected may not be unsafe\n      but because GCC may emits suboptimal code for such calls warning\n      for them helps improve efficiency.  */\n-  memset (d, 0, diffi);       /* { dg-warning \".memset. argument 3 promotes to .ptrdiff_t. {aka .\\(long \\)?int.} where .\\(long \\)?unsigned int. is expected\" } */\n+  memset (d, 0, diffi);       /* { dg-warning \".memset. argument 3 promotes to .ptrdiff_t. {aka .\\(long \\)?\\(int\\)?\\(__int20\\)?.} where .\\(long \\)?\\(__int20 \\)?unsigned\\( int\\)?. is expected\" } */\n \n-  memset (d, 0, 2.0);         /* { dg-warning \".memset. argument 3 type is .double. where '\\(long \\)?unsigned int' is expected\" } */\n+  memset (d, 0, 2.0);         /* { dg-warning \".memset. argument 3 type is .double. where '\\(long \\)?\\(__int20 \\)?unsigned\\( int\\)?' is expected\" } */\n \n   /* Verify that the same call as above but to the built-in doesn't\n      trigger a warning.  */"}, {"sha": "62f45d4880b06f7f06b14518eda2d6df7a63def6", "filename": "gcc/testsuite/gcc.dg/concat2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fconcat2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fconcat2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconcat2.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -11,4 +11,4 @@\n #define e4\te3 e3 e3 e3 e3 e3 e3 e3 e3 e3\n #define e5\te4 e4 e4 e4 e4 e4 e4 e4 e4 e4\n \n-void foo() { (void)(e5); }  /* { dg-error \"size of string literal is too large\" \"\" { target { ! size32plus } } } */\n+void foo() { (void)(e5); }  /* { dg-error \"size of string literal is too large\" \"\" { target { ! size20plus } } } */"}, {"sha": "f8157e9257c8dbaa459cb571471e0012bc58db44", "filename": "gcc/testsuite/gcc.dg/fold-convmaxconv-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convmaxconv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convmaxconv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convmaxconv-1.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,9 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -fdump-tree-optimized\" } */\n \n-int foo (short a[], int x)\n+typedef int int32_t __attribute__((mode (__SI__)));\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n+int32_t foo (short a[], int32_t x)\n {\n-  unsigned int i;\n+  uint32_t i;\n   for (i = 0; i < 1000; i++)\n     {\n       x = a[i];"}, {"sha": "7070ecf337ceb20b57638ce18052b6418727c735", "filename": "gcc/testsuite/gcc.dg/fold-convminconv-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convminconv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convminconv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convminconv-1.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,9 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -fdump-tree-optimized\" } */\n \n-int foo (unsigned short a[], unsigned int x)\n+typedef int int32_t __attribute__((mode (__SI__)));\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n+int32_t foo (unsigned short a[], uint32_t x)\n {\n-  unsigned int i;\n+  uint32_t i;\n   for (i = 0; i < 1000; i++)\n     {\n       x = a[i];"}, {"sha": "a691eeaf8f2ff198e523532d2db634546d8255dc", "filename": "gcc/testsuite/gcc.dg/graphite/scop-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-4.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-require-effective-target size20plus } */\n+\n void bar ();\n \n int toto()"}, {"sha": "2f2c1eeee7221c25e002a3c9a8ea414a1cbbb381", "filename": "gcc/testsuite/gcc.dg/loop-versioning-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Floop-versioning-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Floop-versioning-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-versioning-1.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -45,7 +45,11 @@ f6 (double *x, int stepx, unsigned int limit)\n     *y = 100;\n }\n \n+#if __SIZEOF_SIZE_T__ < 4\n+double x[1000];\n+#else\n double x[10000];\n+#endif\n \n void\n g1 (int stepx, int n)"}, {"sha": "d9a1a99aead58b82fa6f4c685b609d975ab4e826", "filename": "gcc/testsuite/gcc.dg/loop-versioning-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Floop-versioning-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Floop-versioning-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-versioning-2.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,5 +1,5 @@\n /* { dg-options \"-O3 -fdump-tree-lversion-details\" } */\n-/* { dg-require-effective-target size32plus } */\n+/* { dg-require-effective-target size20plus } */\n \n /* Versioning for step == 1 in these loops would allow loop interchange,\n    but otherwise isn't worthwhile.  At the moment we decide not to version.  */"}, {"sha": "8048b26b34ed340598d38e45df297c6927412d19", "filename": "gcc/testsuite/gcc.dg/lto/20081210-1_0.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20081210-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20081210-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20081210-1_0.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,10 +1,4 @@\n-#if defined(_LP64)\n-typedef unsigned long int uintptr_t;\n-#elif defined (_WIN64)\n-typedef unsigned long long int uintptr_t;\n-#else\n-typedef unsigned int uintptr_t;\n-#endif\n+typedef __UINTPTR_TYPE__ uintptr_t;\n \n extern void srand (uintptr_t);\n "}, {"sha": "b1b71c6333462b9d6dfce5ab9269a4513d2a4fa9", "filename": "gcc/testsuite/gcc.dg/lto/pr85870_0.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr85870_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr85870_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr85870_0.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,16 +3,18 @@\n /* { dg-lto-options { { -flto -O2 } } } */\n /* { dg-extra-ld-options { -r -nostdlib -flinker-output=nolto-rel } } */\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n typedef struct abc_s {\n   char a1;\n   short a2;\n-  unsigned int a3;\n-  unsigned int a4;\n+  uint32_t a3;\n+  uint32_t a4;\n } abc;\n \n typedef struct xyz_s {\n- unsigned x1;\n- unsigned x2;\n+ uint32_t x1;\n+ uint32_t x2;\n  abc *x3;\n } xyz;\n "}, {"sha": "c035bbb2fbeb3c1794f7df601b6b388af543f02a", "filename": "gcc/testsuite/gcc.dg/lto/pr85870_1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr85870_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr85870_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr85870_1.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,14 +1,16 @@\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n typedef struct abc_s {\n   char a1;\n   short a2;\n-  unsigned int a3;\n-  unsigned int a4;\n+  uint32_t a3;\n+  uint32_t a4;\n } abc;\n \n \n typedef struct xyz_s {\n- unsigned int x1;\n- unsigned int x2;\n+ uint32_t x1;\n+ uint32_t x2;\n  abc *x3;\n } xyz;\n "}, {"sha": "ba0d722493979414167fab0167494511e8473c49", "filename": "gcc/testsuite/gcc.dg/pr36227.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36227.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36227.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36227.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,14 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Wstrict-overflow=3\" } */\n-#if (__SIZEOF_LONG_LONG__ == __SIZEOF_POINTER__)\n-typedef unsigned long long ptrcast;\n-#elif (__SIZEOF_LONG__ == __SIZEOF_POINTER__)\n-typedef unsigned long ptrcast;\n-#elif (__SIZEOF_INT__ == __SIZEOF_POINTER__)\n-typedef unsigned int ptrcast;\n-#else\n-#error Add target support here\n-#endif\n+typedef __UINTPTR_TYPE__ ptrcast;\n \n volatile unsigned long *\n sat_add(volatile unsigned long *ptr, unsigned long i, volatile unsigned long *end)"}, {"sha": "f502feac3371f3f309fb8f64e8b6f35cfa63244d", "filename": "gcc/testsuite/gcc.dg/pr42611.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42611.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42611.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42611.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,7 +3,8 @@\n /* { dg-options \"\" } */\n \n #define L \\\n-  (sizeof (__SIZE_TYPE__) == 1 ? __SCHAR_MAX__\t\t\t\t\\\n+  (sizeof (__SIZE_TYPE__) == sizeof (void *) ? __INTPTR_MAX__ \\\n+  : sizeof (__SIZE_TYPE__) == 1 ? __SCHAR_MAX__\t\t\t\t\\\n   : sizeof (__SIZE_TYPE__) == sizeof (short) ? __SHRT_MAX__\t\t\\\n   : sizeof (__SIZE_TYPE__) == sizeof (int) ? __INT_MAX__\t\t\\\n   : sizeof (__SIZE_TYPE__) == sizeof (long) ? __LONG_MAX__\t\t\\"}, {"sha": "9344566fc87a760b91959208300278b5d688fe91", "filename": "gcc/testsuite/gcc.dg/pr59963-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -32,6 +32,6 @@ foo (int i)\n               -7, /* { dg-warning \"15:-Wsign-conversion\" } */\n                -8); /* { dg-warning \"16:-Wsign-conversion\" } */\n   bazu (i, i); /* { dg-warning \"9:conversion\" } */\n-  bazi (0x8, 0x80000000); /* { dg-warning \"14:-Wsign-conversion\" \"first\" { xfail int16 } } */\n+  bazi (0x8, 0x80000000); /* { dg-warning \"14:-Wsign-conversion\" \"first\" { target { ! int16 } } } */\n \t\t\t  /* { dg-warning \"overflow in conversion from\" \"second\" { target int16 } .-1 } */\n }"}, {"sha": "891d12954babfdd4ed37bf417aedbf45c5f546d8", "filename": "gcc/testsuite/gcc.dg/pr68317.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,15 +1,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n-void bar (int);\n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n+void bar (int32_t);\n \n void\n foo ()\n {\n- int index = 0;\n+ int32_t index = 0;\n \n- for (index; index <= 10; index--)\n+ for (index; index <= 10; index--) // expected warning here\n    /* Result of the following multiply will overflow\n-      when converted to signed int.  */\n+      when converted to signed int32_t.  */\n    bar ((0xcafe + index) * 0xdead);  /* { dg-warning \"iteration \\[0-9\\]+ invokes undefined behavior\" } */\n }"}, {"sha": "6f4f6437926bfc646ce5500fb567c7c01dfe8fc8", "filename": "gcc/testsuite/gcc.dg/pr78973.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78973.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78973.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78973.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -9,7 +9,7 @@\n static void f (void *p, int n)\n {\n   if (n <= 4)\n-    __builtin_memset (p, 0, n);   /* { dg-warning \"exceeds maximum object size\" \"pr79073\" { xfail ilp32 } } */\n+    __builtin_memset (p, 0, n);   /* { dg-warning \"exceeds maximum object size\" \"pr79073\" { xfail { ilp32 || { int16 && { ! msp430_large } } } } } */\n }\n \n void g (void *d, unsigned n)"}, {"sha": "7a57a09682cdbf496c11f9d33cd902c21f19cbed", "filename": "gcc/testsuite/gcc.dg/pr85859.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85859.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85859.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85859.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -15,6 +15,6 @@ int\n main (void)\n {\n   b = (unsigned char) __builtin_parity (d);\n-  e ? foo (0) : (long) &c;\n+  e ? foo (0) : (__INTPTR_TYPE__) &c;\n   return 0;\n }"}, {"sha": "f3dd3675c06e87d4415baa99b304a579885fdc1e", "filename": "gcc/testsuite/gcc.dg/pr86179.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86179.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86179.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86179.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,14 +1,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n-void c(int *d, char *g)\n+typedef int int32_t __attribute__((mode (__SI__)));\n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n+void c(int32_t *d, char *g)\n {\n   char *a, *b, *e;\n   int f;\n   for (; f; f -= 8) {\n-      *d++ = *e++ | (unsigned)*g++ << 8 | (unsigned)*b++ << 16 |\n-\t  (unsigned)*a++ << 24;\n-      *d++ = *e++ | (unsigned)*g++ << 8 | (unsigned)*b++ << 16 |\n-\t  (unsigned)*a++ << 24;\n+      *d++ = *e++ | (uint32_t)*g++ << 8 | (uint32_t)*b++ << 16 |\n+\t  (uint32_t)*a++ << 24;\n+      *d++ = *e++ | (uint32_t)*g++ << 8 | (uint32_t)*b++ << 16 |\n+\t  (uint32_t)*a++ << 24;\n   }\n }"}, {"sha": "9cc97a9033b178f5a97446dcbb66f7af73babc4f", "filename": "gcc/testsuite/gcc.dg/torture/20181024-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20181024-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20181024-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20181024-1.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target size32plus } */\n /* { dg-additional-options \"-march=core-avx2\" { target { x86_64-*-* i?86-*-* } } } */\n+/* { dg-require-effective-target size32plus } */\n \n typedef enum {\n  C = 0,               N, S, E, W, T, B,               NE, NW, SE, SW,               NT, NB, ST, SB,               ET, EB, WT, WB,               FLAGS, N_CELL_ENTRIES} CELL_ENTRIES;"}, {"sha": "8b57a50cb47fc7b06a507dd8a400791488aab471", "filename": "gcc/testsuite/gcc.dg/torture/pr71598-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71598-2.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-prune-output \"use of enum values across objects may fail\" } */\n /* { dg-additional-options \"-fshort-enums\" } */\n+/* { dg-skip-if \"\" short_eq_int } */\n \n enum e1 { c1 = -__INT_MAX__ };\n "}, {"sha": "30912cab0956a2f40ac88b517223d2bb55c67cf4", "filename": "gcc/testsuite/gcc.dg/torture/pr86034.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86034.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86034.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86034.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,15 +3,17 @@\n \n /* { dg-do run } */\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n struct A\n {\n-  int b;\n-  __INT32_TYPE__ c:24;\n-  int d:10;\n-  int e;\n+  int32_t b;\n+  int32_t c:24;\n+  int32_t d:10;\n+  int32_t e;\n } f;\n \n-int g; \n+int32_t g; \n \n void h ()\n {"}, {"sha": "999f55e3691b8e5c71a4a4e261f86a014a3ce6f0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-3.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -360,35 +360,35 @@ NOIPA void test_too_large (char *d, int x, __builtin_va_list va)\n   const size_t imax_p1 = imax + 1;\n \n   __builtin_snprintf (d, imax,    \"%c\", x);\n-  __builtin_snprintf (d, imax_p1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n+  __builtin_snprintf (d, imax_p1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target { lp64 || msp430_large } } } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || { { ilp32 } || { int16 && { ! msp430_large } } } } } .-1 } */\n \n   __builtin_vsnprintf (d, imax,    \"%c\", va);\n-  __builtin_vsnprintf (d, imax_p1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n+  __builtin_vsnprintf (d, imax_p1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target { lp64 || msp430_large } } } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || { { ilp32 } || { int16 && { ! msp430_large } } } } } .-1 } */\n \n   __builtin___snprintf_chk (d, imax,    0, imax,    \"%c\", x);\n-  __builtin___snprintf_chk (d, imax_p1, 0, imax_p1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n+  __builtin___snprintf_chk (d, imax_p1, 0, imax_p1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target { lp64 || msp430_large } } } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || { { ilp32 } || { int16 && { ! msp430_large } } } } } .-1 } */\n \n   __builtin___vsnprintf_chk (d, imax,    0, imax,    \"%c\", va);\n-  __builtin___vsnprintf_chk (d, imax_p1, 0, imax_p1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target lp64 } } */\n-  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || ilp32 } } .-1 } */\n+  __builtin___vsnprintf_chk (d, imax_p1, 0, imax_p1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"INT_MAX + 1\" { target { lp64 || msp430_large } } } */\n+  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size\" \"INT_MAX + 1\" { target { { avr-*-* } || { { ilp32 } || { int16 && { ! msp430_large } } } } } .-1 } */\n \n   const size_t ptrmax = __PTRDIFF_MAX__;\n   const size_t ptrmax_m1 = ptrmax - 1;\n \n-  __builtin_snprintf (d, ptrmax_m1, \"%c\", x);  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target lp64 } } */\n-  __builtin_snprintf (d, ptrmax, \"  %c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target lp64 } } */\n+  __builtin_snprintf (d, ptrmax_m1, \"%c\", x);  /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target { lp64 || msp430_large } } } */\n+  __builtin_snprintf (d, ptrmax, \"  %c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target { lp64 || msp430_large } } } */\n \n-  __builtin_vsnprintf (d, ptrmax_m1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target lp64 } } */\n-  __builtin_vsnprintf (d, ptrmax,    \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target lp64 } } */\n+  __builtin_vsnprintf (d, ptrmax_m1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target { lp64 || msp430_large } } } */\n+  __builtin_vsnprintf (d, ptrmax,    \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target { lp64 || msp430_large } } } */\n \n-  __builtin___snprintf_chk (d, ptrmax_m1, 0, ptrmax_m1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target lp64 } } */\n-  __builtin___snprintf_chk (d, ptrmax,    0, ptrmax,    \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target lp64 } } */\n+  __builtin___snprintf_chk (d, ptrmax_m1, 0, ptrmax_m1, \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target { lp64 || msp430_large } } } */\n+  __builtin___snprintf_chk (d, ptrmax,    0, ptrmax,    \"%c\", x);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target { lp64 || msp430_large } } } */\n \n-  __builtin___vsnprintf_chk (d, ptrmax_m1, 0, ptrmax_m1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target lp64 } } */\n-  __builtin___vsnprintf_chk (d, ptrmax,    0, ptrmax,    \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target lp64 } } */\n+  __builtin___vsnprintf_chk (d, ptrmax_m1, 0, ptrmax_m1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target { lp64 || msp430_large } } } */\n+  __builtin___vsnprintf_chk (d, ptrmax,    0, ptrmax,    \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target { lp64 || msp430_large } } } */\n }\n \n /* Exercise ordinary sprintf with malloc.  */"}, {"sha": "ed94f6b3f0dd8f14449a25c0db5d515b3806b667", "filename": "gcc/testsuite/gcc.dg/tree-ssa/integer-addr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finteger-addr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finteger-addr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finteger-addr.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-optimized -fno-strict-aliasing\" } */\n /* Test with fixed address */\n-static int *foo =  (int *) (unsigned long) 0x7800000;\n+static int *foo =  (int *) (unsigned long) __INTPTR_MAX__;\n \n int func(void) __attribute__ ((noinline));\n "}, {"sha": "621f48f7d6ee12969913465ad7c5fd9c5dd3b93d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-interchange-10.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-10.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,16 +3,18 @@\n /* { dg-require-effective-target size20plus } */\n /* { dg-skip-if \"too big data segment\" { visium-*-* } } */\n \n+typedef int int32_t __attribute__((mode (__SI__)));\n+\n #define M 256\n int a[M][M], b[M][M];\n-int __attribute__((noinline))\n+int32_t __attribute__((noinline))\n double_reduc (int n)\n {\n-  int sum = 0;\n+  int32_t sum = 0;\n   for (int j = 0; j < n; j++)\n     {\n       for (int i = 0; i < n; i++)\n-\tsum = sum + a[i][j]*b[i][j];\n+\tsum = sum + (int32_t)a[i][j]*(int32_t)b[i][j];\n     }\n   return sum;\n }\n@@ -34,7 +36,7 @@ int main (void)\n   for (int i = 0; i < M; ++i)\n     init (i);\n \n-  int sum = double_reduc (M);\n+  int32_t sum = double_reduc (M);\n \n   if (sum != 1065369600)\n     abort ();"}, {"sha": "48740dd5a245c03dc8629d718d3b1e47d5dc1b60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84436-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-3.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -20,5 +20,5 @@ void f() {\n   h(g);\n }\n \n-/* { dg-final { scan-tree-dump-times \".* \\\\+ 4294967247\" 1 \"switchconv\" } } */\n+/* { dg-final { scan-tree-dump-times \".* \\\\+ (?:4294967247|65487)\" 1 \"switchconv\" } } */\n /* { dg-final { scan-tree-dump-not \"switch\" \"optimized\" } } */"}, {"sha": "7832ffa398b247a1663aa7903f1a911accf96932", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84648.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84648.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84648.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84648.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -1,8 +1,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -fdump-tree-cddce1-details\" } */\n \n+typedef unsigned uint32_t __attribute__((mode (__SI__)));\n+\n int main() {\n-    for (unsigned i = 0; i < (1u << 31); ++i) {\n+    for (uint32_t i = 0; i < (1UL << 31); ++i) {\n     }\n     return 0;\n }"}, {"sha": "a5b2ff71958d63eec0e816508d9a800e455c861a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-8.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-8.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -3,14 +3,20 @@\n \n int *a;\n \n+#if __SIZEOF_INT__ == __SIZEOF_SHORT__\n+typedef char small_t;\n+#else\n+typedef short small_t;\n+#endif\n+\n int\n foo1 (long long s, long long l)\n {\n   long long i;\n \n   for (i = s; i < l; i++)\n     {\n-      a[(short)i] = 0;\n+      a[(small_t)i] = 0;\n     }\n   return 0;\n }"}, {"sha": "95c936cbf718475fbd3cf64bf9c9cfa9380283c5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-8.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-8.c?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -300,10 +300,10 @@ f2 (struct C *x)\n \t  else\n \t    {\n \t      o = f2 (x);\n-#if __SIZEOF_POINTER__ == __SIZEOF_LONG__\n+#if __SIZEOF_POINTER__ == __SIZEOF_LONG__ && !__MSP430X_LARGE__\n \t      if (((unsigned long) o > (unsigned long) -4000L))\n-#elif __SIZEOF_POINTER__ == __SIZEOF_INT__\n-\t  if (((__UINTPTR_TYPE__) o > (__UINTPTR_TYPE__) -4000U))\n+#else\n+\t  if (((__UINTPTR_TYPE__) o > (__UINTPTR_TYPE__) -4000UL))\n #endif\n \t\t{\n \t\t  e = 5;\n@@ -388,10 +388,10 @@ f2 (struct C *x)\n \t  break;\n \tcase 19:\n \t  o = f2 (x);\n-#if __SIZEOF_POINTER__ == __SIZEOF_LONG__\n+#if __SIZEOF_POINTER__ == __SIZEOF_LONG__ && !__MSP430X_LARGE__\n \t  if (((unsigned long) o > (unsigned long) -4000L))\n-#elif __SIZEOF_POINTER__ == __SIZEOF_INT__\n-\t  if (((__UINTPTR_TYPE__) o > (__UINTPTR_TYPE__) -4000U))\n+#else\n+\t  if (((__UINTPTR_TYPE__) o > (__UINTPTR_TYPE__) -4000UL))\n #endif\n \t    {\n \t      e = 6;"}, {"sha": "b335108358d0c878193ce07771b69933f3ec4d26", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8e1bccc6a703407570471f6323bfa554af99/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=92ea8e1bccc6a703407570471f6323bfa554af99", "patch": "@@ -2767,6 +2767,16 @@ proc check_effective_target_large_return_values { } {\n     }\n     return 1\n }\n+# Return 1 if we support 20-bit or larger array and structure sizes\n+# using default options, 0 otherwise.\n+# This implies at least a 24-bit address space, as no targets have an address\n+# space between 20 and 24 bits.\n+\n+proc check_effective_target_size24plus { } {\n+    return [check_no_compiler_messages size24plus object {\n+\tchar dummy[524289L];\n+    }]\n+}\n \n # Return 1 if we support 24-bit or larger array and structure sizes\n # using default options, 0 otherwise.\n@@ -2829,6 +2839,24 @@ proc check_effective_target_int_eq_float { } {\n     }]\n }\n \n+# Return 1 if short size is equal to int size,\n+# 0 otherwise.\n+\n+proc check_effective_target_short_eq_int { } {\n+    return [check_no_compiler_messages short_eq_int object {\n+\tint dummy[sizeof (short) == sizeof (int) ? 1 : -1];\n+    }]\n+}\n+\n+# Return 1 if pointer size is equal to short size,\n+# 0 otherwise.\n+\n+proc check_effective_target_ptr_eq_short { } {\n+    return [check_no_compiler_messages ptr_eq_short object {\n+\tint dummy[sizeof (void *) == sizeof (short) ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if pointer size is equal to long size,\n # 0 otherwise.\n \n@@ -10249,3 +10277,21 @@ proc check_effective_target_lgccjit { } {\n      int main() { return 0; }\n   } \"-lgccjit\"]\n }\n+\n+# Return 1 if the MSP430 small memory model is in use.\n+proc check_effective_target_msp430_small {} {\n+    return [check_no_compiler_messages msp430_small assembly {\n+\t#if (!defined __MSP430__ || defined __MSP430X_LARGE__)\n+\t#error !msp430 || __MSP430X_LARGE__\n+\t#endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the MSP430 large memory model is in use.\n+proc check_effective_target_msp430_large {} {\n+    return [check_no_compiler_messages msp430_large assembly {\n+\t#ifndef __MSP430X_LARGE__\n+\t#error __MSP430X_LARGE__\n+\t#endif\n+    } \"\"]\n+}"}]}