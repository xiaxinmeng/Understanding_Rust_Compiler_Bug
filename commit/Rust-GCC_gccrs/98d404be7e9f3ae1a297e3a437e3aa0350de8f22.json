{"sha": "98d404be7e9f3ae1a297e3a437e3aa0350de8f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkNDA0YmU3ZTlmM2FlMWEyOTdlM2E0MzdlM2FhMDM1MGRlOGYyMg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-01-16T13:11:53Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-01-16T13:11:53Z"}, "message": "[AArch64] Remove -mlra/-mno-lra option for Aarch64\n\n2015-01-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\tgcc/\n\tPR target/64149\n\t* config/aarch64/aarch64.opt: Remove lra option and aarch64_lra_flag\n\tvariable.\n\t* config/aarch64/aarch64.c (TARGET_LRA_P): Set to hook_bool_void_true.\n\t(aarch64_lra_p): Remove.\n\nFrom-SVN: r219734", "tree": {"sha": "87f120f77ff5b2faedb82e1d2c8deff3f0bc4887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87f120f77ff5b2faedb82e1d2c8deff3f0bc4887"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98d404be7e9f3ae1a297e3a437e3aa0350de8f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d404be7e9f3ae1a297e3a437e3aa0350de8f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d404be7e9f3ae1a297e3a437e3aa0350de8f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d404be7e9f3ae1a297e3a437e3aa0350de8f22/comments", "author": null, "committer": null, "parents": [{"sha": "06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "efab15707c5adca39902ed348bff56b017bd4c22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d404be7e9f3ae1a297e3a437e3aa0350de8f22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d404be7e9f3ae1a297e3a437e3aa0350de8f22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98d404be7e9f3ae1a297e3a437e3aa0350de8f22", "patch": "@@ -1,3 +1,11 @@\n+2015-01-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\tPR target/64149\n+\t* config/aarch64/aarch64.opt: Remove lra option and aarch64_lra_flag\n+\tvariable.\n+\t* config/aarch64/aarch64.c (TARGET_LRA_P): Set to hook_bool_void_true.\n+\t(aarch64_lra_p): Remove.\n+\n 2015-01-16  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/64363"}, {"sha": "fdb0116048a355d920a66fb8896f58ddc4ddb947", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d404be7e9f3ae1a297e3a437e3aa0350de8f22/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d404be7e9f3ae1a297e3a437e3aa0350de8f22/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=98d404be7e9f3ae1a297e3a437e3aa0350de8f22", "patch": "@@ -156,7 +156,6 @@ enum aarch64_code_model aarch64_cmodel;\n #define TARGET_HAVE_TLS 1\n #endif\n \n-static bool aarch64_lra_p (void);\n static bool aarch64_composite_type_p (const_tree, machine_mode);\n static bool aarch64_vfp_is_call_or_return_candidate (machine_mode,\n \t\t\t\t\t\t     const_tree,\n@@ -7810,13 +7809,6 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n   return -1;\n }\n \n-/* Return true if we use LRA instead of reload pass.  */\n-static bool\n-aarch64_lra_p (void)\n-{\n-  return aarch64_lra_flag;\n-}\n-\n /* Return TRUE if the type, as described by TYPE and MODE, is a composite\n    type as described in AAPCS64 \\S 4.3.  This includes aggregate, union and\n    array types.  The C99 floating-point complex types are also considered\n@@ -11332,7 +11324,7 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n #define TARGET_LIBGCC_CMP_RETURN_MODE aarch64_libgcc_cmp_return_mode\n \n #undef TARGET_LRA_P\n-#define TARGET_LRA_P aarch64_lra_p\n+#define TARGET_LRA_P hook_bool_void_true\n \n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE aarch64_mangle_type"}, {"sha": "f2ef124e98f840a6e520f40788e5354232c1a043", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d404be7e9f3ae1a297e3a437e3aa0350de8f22/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d404be7e9f3ae1a297e3a437e3aa0350de8f22/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=98d404be7e9f3ae1a297e3a437e3aa0350de8f22", "patch": "@@ -107,10 +107,6 @@ mabi=\n Target RejectNegative Joined Enum(aarch64_abi) Var(aarch64_abi) Init(AARCH64_ABI_DEFAULT)\n -mabi=ABI\tGenerate code that conforms to the specified ABI\n \n-mlra\n-Target Report Var(aarch64_lra_flag) Init(1) Save\n-Use LRA instead of reload (transitional)\n-\n Enum\n Name(aarch64_abi) Type(int)\n Known AArch64 ABIs (for use with the -mabi= option):"}]}