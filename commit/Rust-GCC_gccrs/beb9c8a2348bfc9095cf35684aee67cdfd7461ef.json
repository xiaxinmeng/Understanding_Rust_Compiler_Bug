{"sha": "beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViOWM4YTIzNDhiZmM5MDk1Y2YzNTY4NGFlZTY3Y2RmZDc0NjFlZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-03-17T13:54:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-03-17T13:54:04Z"}, "message": "re PR c++/5757 (Throwing exception in constructor, causes segfault during unwind)\n\n        PR c++/5757\n        * init.c (build_new_1): Pass the right pointer to op delete.\n\nFrom-SVN: r50917", "tree": {"sha": "78dc03e4496bc87949dbea571f48eadc38004b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78dc03e4496bc87949dbea571f48eadc38004b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb9c8a2348bfc9095cf35684aee67cdfd7461ef/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ac7f9233809d56331d54ba42e611722ee2aa71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac7f9233809d56331d54ba42e611722ee2aa71e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac7f9233809d56331d54ba42e611722ee2aa71e"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "9ef43ede9467e0ec70bcb1249e614261505af13b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb9c8a2348bfc9095cf35684aee67cdfd7461ef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb9c8a2348bfc9095cf35684aee67cdfd7461ef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "patch": "@@ -1,3 +1,8 @@\n+2002-03-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/5757\n+\t* init.c (build_new_1): Pass the right pointer to op delete.\n+\n 2002-03-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/4361"}, {"sha": "54954de566e6180888078930221d0030746478b4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb9c8a2348bfc9095cf35684aee67cdfd7461ef/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb9c8a2348bfc9095cf35684aee67cdfd7461ef/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "patch": "@@ -2288,7 +2288,7 @@ build_new_1 (exp)\n     use_cookie = 0;\n   /* When using placement new, users may not realize that they need\n      the extra storage.  We require that the operator called be\n-     the global placement operator delete[].  */\n+     the global placement operator new[].  */\n   else if (placement && !TREE_CHAIN (placement) \n \t   && same_type_p (TREE_TYPE (TREE_VALUE (placement)),\n \t\t\t   ptr_type_node))\n@@ -2473,13 +2473,22 @@ build_new_1 (exp)\n \t  tree cleanup;\n \t  int flags = (LOOKUP_NORMAL \n \t\t       | (globally_qualified_p * LOOKUP_GLOBAL));\n+\t  tree delete_node;\n+\n+\t  if (use_cookie)\n+\t    /* Subtract the padding back out to get to the pointer returned\n+\t       from operator new.  */\n+\t    delete_node = fold (build (MINUS_EXPR, TREE_TYPE (alloc_node),\n+\t\t\t\t       alloc_node, cookie_size));\n+\t  else\n+\t    delete_node = alloc_node;\n \n \t  /* The Standard is unclear here, but the right thing to do\n              is to use the same method for finding deallocation\n              functions that we use for finding allocation functions.  */\n \t  flags |= LOOKUP_SPECULATIVELY;\n \n-\t  cleanup = build_op_delete_call (dcode, alloc_node, size, flags,\n+\t  cleanup = build_op_delete_call (dcode, delete_node, size, flags,\n \t\t\t\t\t  (placement_allocation_fn_p \n \t\t\t\t\t   ? alloc_call : NULL_TREE));\n "}, {"sha": "4c5c684b5f2163020b8790f067ebcb2fb3e06df2", "filename": "gcc/testsuite/g++.dg/eh/new1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb9c8a2348bfc9095cf35684aee67cdfd7461ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb9c8a2348bfc9095cf35684aee67cdfd7461ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnew1.C?ref=beb9c8a2348bfc9095cf35684aee67cdfd7461ef", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/5757\n+// Test that when a constructor throws in a new-expression, we pass the\n+// right pointer to operator delete.\n+\n+// { dg-do run }\n+\n+#include <new>\n+\n+int ret = 1;\n+\n+void *ptr;\n+void * operator new[] (size_t s) throw (std::bad_alloc)\n+{\n+  ptr = operator new (s);\n+  return ptr;\n+}\n+\n+void operator delete[] (void *p) throw ()\n+{\n+  if (p == ptr)\n+    ret = 0;\n+  operator delete (p);\n+}\n+\n+struct A\n+{\n+  A() { throw 1; }\n+  ~A() {}\n+};\n+\n+int\n+main ()\n+{\n+  try\n+    {\n+      A *p = new A[4];\n+    }\n+  catch (...) {}\n+  return ret;\n+}"}]}