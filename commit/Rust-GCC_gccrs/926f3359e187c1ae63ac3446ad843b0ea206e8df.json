{"sha": "926f3359e187c1ae63ac3446ad843b0ea206e8df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2ZjMzNTllMTg3YzFhZTYzYWMzNDQ2YWQ4NDNiMGVhMjA2ZThkZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-09-29T10:14:14Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-09-29T10:14:14Z"}, "message": "i386.c (ix86_expand_move): Use can_create_pseudo_p () instead of variants of (!reload_in_progress &&...\n\n        * config/i386/i386.c (ix86_expand_move): Use can_create_pseudo_p ()\n        instead of variants of (!reload_in_progress && !reload_completed).\n        (x86_expand_vector_move): Ditto.\n\nFrom-SVN: r128885", "tree": {"sha": "da574c6924afad5e2ab87216206ae8b3b136aada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da574c6924afad5e2ab87216206ae8b3b136aada"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/926f3359e187c1ae63ac3446ad843b0ea206e8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926f3359e187c1ae63ac3446ad843b0ea206e8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926f3359e187c1ae63ac3446ad843b0ea206e8df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926f3359e187c1ae63ac3446ad843b0ea206e8df/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d6f458933caff7dab99bbc00da8cbaeafb875e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6f458933caff7dab99bbc00da8cbaeafb875e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d6f458933caff7dab99bbc00da8cbaeafb875e8"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "a80d07fb44c178aa30865b83d64f9ec69c45ebbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926f3359e187c1ae63ac3446ad843b0ea206e8df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926f3359e187c1ae63ac3446ad843b0ea206e8df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=926f3359e187c1ae63ac3446ad843b0ea206e8df", "patch": "@@ -1,3 +1,9 @@\n+2007-09-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_move): Use can_create_pseudo_p ()\n+\tinstead of variants of (!reload_in_progress && !reload_completed).\n+\t(x86_expand_vector_move): Ditto.\n+\n 2007-09-28  Ollie Wild  <aaw@google.com>\n \n \tRevert"}, {"sha": "c8d40fe105a8c6d4c3d272ece537af5a7050e20f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926f3359e187c1ae63ac3446ad843b0ea206e8df/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926f3359e187c1ae63ac3446ad843b0ea206e8df/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=926f3359e187c1ae63ac3446ad843b0ea206e8df", "patch": "@@ -10031,7 +10031,6 @@ maybe_get_pool_constant (rtx x)\n void\n ix86_expand_move (enum machine_mode mode, rtx operands[])\n {\n-  int strict = (reload_in_progress || reload_completed);\n   rtx op0, op1;\n   enum tls_model model;\n \n@@ -10125,31 +10124,29 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \n       /* Force large constants in 64bit compilation into register\n \t to get them CSEed.  */\n-      if (TARGET_64BIT && mode == DImode\n+      if (can_create_pseudo_p ()\n+\t  && (mode == DImode) && TARGET_64BIT\n \t  && immediate_operand (op1, mode)\n \t  && !x86_64_zext_immediate_operand (op1, VOIDmode)\n \t  && !register_operand (op0, mode)\n-\t  && optimize && !reload_completed && !reload_in_progress)\n+\t  && optimize)\n \top1 = copy_to_mode_reg (mode, op1);\n \n-      if (FLOAT_MODE_P (mode))\n+      if (can_create_pseudo_p ()\n+\t  && FLOAT_MODE_P (mode)\n+\t  && GET_CODE (op1) == CONST_DOUBLE)\n \t{\n \t  /* If we are loading a floating point constant to a register,\n \t     force the value to memory now, since we'll get better code\n \t     out the back end.  */\n \n-\t  if (strict)\n-\t    ;\n-\t  else if (GET_CODE (op1) == CONST_DOUBLE)\n+\t  op1 = validize_mem (force_const_mem (mode, op1));\n+\t  if (!register_operand (op0, mode))\n \t    {\n-\t      op1 = validize_mem (force_const_mem (mode, op1));\n-\t      if (!register_operand (op0, mode))\n-\t\t{\n-\t\t  rtx temp = gen_reg_rtx (mode);\n-\t\t  emit_insn (gen_rtx_SET (VOIDmode, temp, op1));\n-\t\t  emit_move_insn (op0, temp);\n-\t\t  return;\n-\t\t}\n+\t      rtx temp = gen_reg_rtx (mode);\n+\t      emit_insn (gen_rtx_SET (VOIDmode, temp, op1));\n+\t      emit_move_insn (op0, temp);\n+\t      return;\n \t    }\n \t}\n     }\n@@ -10167,15 +10164,15 @@ ix86_expand_vector_move (enum machine_mode mode, rtx operands[])\n      the instructions used to build constants modify the upper 64 bits\n      of the register, once we have that information we may be able\n      to handle some of them more efficiently.  */\n-  if ((reload_in_progress | reload_completed) == 0\n+  if (can_create_pseudo_p ()\n       && register_operand (op0, mode)\n       && (CONSTANT_P (op1)\n \t  || (GET_CODE (op1) == SUBREG\n \t      && CONSTANT_P (SUBREG_REG (op1))))\n       && standard_sse_constant_p (op1) <= 0)\n     op1 = validize_mem (force_const_mem (mode, op1));\n \n-  /* TDmode values are passed as TImode on the stack.  Timode values\n+  /* TDmode values are passed as TImode on the stack.  TImode values\n      are moved via xmm registers, and moving them to stack can result in\n      unaligned memory access.  Use ix86_expand_vector_move_misalign()\n      if memory operand is not aligned correctly.  */"}]}