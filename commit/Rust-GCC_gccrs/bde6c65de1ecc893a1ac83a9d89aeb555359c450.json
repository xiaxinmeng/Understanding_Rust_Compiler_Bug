{"sha": "bde6c65de1ecc893a1ac83a9d89aeb555359c450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlNmM2NWRlMWVjYzg5M2ExYWM4M2E5ZDg5YWViNTU1MzU5YzQ1MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-05-24T20:19:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-05-24T20:19:13Z"}, "message": "tree-nested.c (build_addr): New \"context\" argument.\n\n        * tree-nested.c (build_addr): New \"context\" argument.  Temporarily\n        set current_function_decl around the call to build the ADDR_EXPR.\n        (get_static_chain): Pass proper context to build_addr.\n        (convert_nl_goto_reference): Likewise.\n        (convert_tramp_reference): Likewise.\n        (final_nesting_tree_1): Likewise.\n        * tree-profile.c (tree_gen_interval_profiler): Likewise.\n        (tree_gen_pow2_profiler): Likewise.\n        (tree_gen_one_value_profiler): Likewise.\n        * tree-ssa-loop-ivopts.c (build_addr_strip_iref): Likewise.\n        * tree.h (build_addr): Update prototype.\n\nFrom-SVN: r100110", "tree": {"sha": "929883b632ad4304f0f6c62c4f887885e3a41afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/929883b632ad4304f0f6c62c4f887885e3a41afc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde6c65de1ecc893a1ac83a9d89aeb555359c450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde6c65de1ecc893a1ac83a9d89aeb555359c450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde6c65de1ecc893a1ac83a9d89aeb555359c450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde6c65de1ecc893a1ac83a9d89aeb555359c450/comments", "author": null, "committer": null, "parents": [{"sha": "04d0d7500ab88716be00db442865d93d3e4c5b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d0d7500ab88716be00db442865d93d3e4c5b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d0d7500ab88716be00db442865d93d3e4c5b7f"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "665911fc92527aa1bb7865505c1deccdb5a6ac6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bde6c65de1ecc893a1ac83a9d89aeb555359c450", "patch": "@@ -1,3 +1,17 @@\n+2005-05-24  Jeff Law  <law@redhat.com>\n+\n+\t* tree-nested.c (build_addr): New \"context\" argument.  Temporarily\n+\tset current_function_decl around the call to build the ADDR_EXPR.\n+\t(get_static_chain): Pass proper context to build_addr.\n+\t(convert_nl_goto_reference): Likewise.\n+\t(convert_tramp_reference): Likewise.\n+\t(final_nesting_tree_1): Likewise.\n+\t* tree-profile.c (tree_gen_interval_profiler): Likewise.\n+\t(tree_gen_pow2_profiler): Likewise.\n+\t(tree_gen_one_value_profiler): Likewise.\n+\t* tree-ssa-loop-ivopts.c (build_addr_strip_iref): Likewise.\n+\t* tree.h (build_addr): Update prototype.\n+\n 2005-05-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-flow.h (bb_ann_d): Remove has_escape_site."}, {"sha": "124bbf98cfb2ce78e446e5fc2b1596f31f050680", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=bde6c65de1ecc893a1ac83a9d89aeb555359c450", "patch": "@@ -148,20 +148,34 @@ create_tmp_var_for (struct nesting_info *info, tree type, const char *prefix)\n   return tmp_var;\n }\n \n-/* Take the address of EXP.  Mark it for addressability as necessary.  */\n+/* Take the address of EXP to be used within function CONTEXT.\n+   Mark it for addressability as necessary.  */\n \n tree\n-build_addr (tree exp)\n+build_addr (tree exp, tree context)\n {\n   tree base = exp;\n+  tree save_context;\n+  tree retval;\n \n   while (handled_component_p (base))\n     base = TREE_OPERAND (base, 0);\n \n   if (DECL_P (base))\n     TREE_ADDRESSABLE (base) = 1;\n \n-  return build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (exp)), exp);\n+  /* Building the ADDR_EXPR will compute a set of properties for\n+     that ADDR_EXPR.  Those properties are unfortunately context\n+     specific.  ie, they are dependent on CURRENT_FUNCTION_DECL.\n+\n+     Temporarily set CURRENT_FUNCTION_DECL to the desired context,\n+     build the ADDR_EXPR, then restore CURRENT_FUNCTION_DECL.  That\n+     way the properties are for the ADDR_EXPR are computed properly.  */\n+  save_context = current_function_decl;\n+  current_function_decl = context;\n+  retval = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (exp)), exp);\n+  current_function_decl = save_context;;\n+  return retval;\n }\n \n /* Insert FIELD into TYPE, sorted by alignment requirements.  */\n@@ -716,7 +730,7 @@ get_static_chain (struct nesting_info *info, tree target_context,\n \n   if (info->context == target_context)\n     {\n-      x = build_addr (info->frame_decl);\n+      x = build_addr (info->frame_decl, target_context);\n     }\n   else\n     {\n@@ -1092,10 +1106,10 @@ convert_nl_goto_reference (tree *tp, int *walk_subtrees, void *data)\n   /* Build: __builtin_nl_goto(new_label, &chain->nl_goto_field).  */\n   field = get_nl_goto_field (i);\n   x = get_frame_field (info, target_context, field, &wi->tsi);\n-  x = build_addr (x);\n+  x = build_addr (x, target_context);\n   x = tsi_gimplify_val (info, x, &wi->tsi);\n   arg = tree_cons (NULL, x, NULL);\n-  x = build_addr (new_label);\n+  x = build_addr (new_label, target_context);\n   arg = tree_cons (NULL, x, arg);\n   x = implicit_built_in_decls[BUILT_IN_NONLOCAL_GOTO];\n   x = build_function_call_expr (x, arg);\n@@ -1190,7 +1204,7 @@ convert_tramp_reference (tree *tp, int *walk_subtrees, void *data)\n \n       /* Compute the address of the field holding the trampoline.  */\n       x = get_frame_field (info, target_context, x, &wi->tsi);\n-      x = build_addr (x);\n+      x = build_addr (x, target_context);\n       x = tsi_gimplify_val (info, x, &wi->tsi);\n       arg = tree_cons (NULL, x, NULL);\n \n@@ -1322,7 +1336,7 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n \t    continue;\n \n \t  if (use_pointer_in_frame (p))\n-\t    x = build_addr (p);\n+\t    x = build_addr (p, context);\n \t  else\n \t    x = p;\n \n@@ -1358,15 +1372,15 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n \t  if (DECL_NO_STATIC_CHAIN (i->context))\n \t    x = null_pointer_node;\n \t  else\n-\t    x = build_addr (root->frame_decl);\n+\t    x = build_addr (root->frame_decl, context);\n \t  arg = tree_cons (NULL, x, NULL);\n \n-\t  x = build_addr (i->context);\n+\t  x = build_addr (i->context, context);\n \t  arg = tree_cons (NULL, x, arg);\n \n \t  x = build (COMPONENT_REF, TREE_TYPE (field),\n \t\t     root->frame_decl, field, NULL_TREE);\n-\t  x = build_addr (x);\n+\t  x = build_addr (x, context);\n \t  arg = tree_cons (NULL, x, arg);\n \n \t  x = implicit_built_in_decls[BUILT_IN_INIT_TRAMPOLINE];"}, {"sha": "d611168635e7d690e74ef5d85ce625d73e1d09f5", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=bde6c65de1ecc893a1ac83a9d89aeb555359c450", "patch": "@@ -143,7 +143,7 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n   tree steps = build_int_cst_type (unsigned_type_node, value->hdata.intvl.steps);\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref),\n+\t\t\t\t      build_addr (ref, current_function_decl),\n \t\t\t\t      true, NULL_TREE);\n   val = prepare_instrumented_value (&bsi, value);\n   args = tree_cons (NULL_TREE, ref_ptr,\n@@ -168,7 +168,7 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n   tree args, call, val;\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref),\n+\t\t\t\t      build_addr (ref, current_function_decl),\n \t\t\t\t      true, NULL_TREE);\n   val = prepare_instrumented_value (&bsi, value);\n   args = tree_cons (NULL_TREE, ref_ptr,\n@@ -191,7 +191,7 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n   tree args, call, val;\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref),\n+\t\t\t\t      build_addr (ref, current_function_decl),\n \t\t\t\t      true, NULL_TREE);\n   val = prepare_instrumented_value (&bsi, value);\n   args = tree_cons (NULL_TREE, ref_ptr,"}, {"sha": "5cb623b871e2186eac6faf874b0b401f989b1dff", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=bde6c65de1ecc893a1ac83a9d89aeb555359c450", "patch": "@@ -1527,7 +1527,7 @@ build_addr_strip_iref (tree obj)\n       obj = fold_convert (type, TREE_OPERAND (obj, 0));\n     }\n   else\n-    obj = build_addr (obj);\n+    obj = build_addr (obj, current_function_decl);\n \n   return obj;\n }"}, {"sha": "b7764d81882641a0c9a97ac3fe35cb1356526fa0", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde6c65de1ecc893a1ac83a9d89aeb555359c450/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bde6c65de1ecc893a1ac83a9d89aeb555359c450", "patch": "@@ -3651,7 +3651,7 @@ extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree build_range_type (tree, tree, tree);\n extern HOST_WIDE_INT int_cst_value (tree);\n extern tree tree_fold_gcd (tree, tree);\n-extern tree build_addr (tree);\n+extern tree build_addr (tree, tree);\n \n extern bool fields_compatible_p (tree, tree);\n extern tree find_compatible_field (tree, tree);"}]}