{"sha": "ab034cfc0ae8017daee188d4e1ea971d77c30a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwMzRjZmMwYWU4MDE3ZGFlZTE4OGQ0ZTFlYTk3MWQ3N2MzMGExYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-27T11:38:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-27T11:38:37Z"}, "message": "(alpha_emit_set_const...\n\n(alpha_emit_set_const, output_{pro,epi}log): Generate insns to load\nconstants into a register using a method that works on a 32-bit\nmachine as well.\n\nFrom-SVN: r4246", "tree": {"sha": "ea05a5dc7ddf36a6208754c8a02a18ec24b7e5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea05a5dc7ddf36a6208754c8a02a18ec24b7e5e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab034cfc0ae8017daee188d4e1ea971d77c30a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab034cfc0ae8017daee188d4e1ea971d77c30a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab034cfc0ae8017daee188d4e1ea971d77c30a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab034cfc0ae8017daee188d4e1ea971d77c30a1a/comments", "author": null, "committer": null, "parents": [{"sha": "6cac0166dcf617090eb407b507e122c491997697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cac0166dcf617090eb407b507e122c491997697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cac0166dcf617090eb407b507e122c491997697"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "13c5e54a2ebb9e2eef1474d7522f50f999111c91", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab034cfc0ae8017daee188d4e1ea971d77c30a1a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab034cfc0ae8017daee188d4e1ea971d77c30a1a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ab034cfc0ae8017daee188d4e1ea971d77c30a1a", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the DEC Alpha.\n-   Copyright (C) 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@nyu.edu)\n \n This file is part of GNU CC.\n@@ -600,10 +600,12 @@ alpha_emit_set_const (target, c, n)\n       HOST_WIDE_INT tmp1 = c - low;\n       HOST_WIDE_INT high\n \t= ((tmp1 >> 16) & 0xffff) - 2 * ((tmp1 >> 16) & 0x8000);\n-      HOST_WIDE_INT tmp2 = c - (high << 16) - low;\n       HOST_WIDE_INT extra = 0;\n \n-      if (tmp2)\n+      /* If HIGH will be interpreted as negative but the constant is\n+\t positive, we must adjust it to do two ldha insns.  */\n+\n+      if ((high & 0x8000) != 0 && c >= 0)\n \t{\n \t  extra = 0x4000;\n \t  tmp1 -= 0x40000000;\n@@ -1190,11 +1192,14 @@ output_prolog (file, size)\n       HOST_WIDE_INT tmp1 = blocks - low;\n       HOST_WIDE_INT high\n \t= ((tmp1 >> 16) & 0xffff) - 2 * ((tmp1 >> 16) & 0x8000);\n-      HOST_WIDE_INT tmp2 = blocks - (high << 16) - low;\n       HOST_WIDE_INT extra = 0;\n       int in_reg = 31;\n \n-      if (tmp2)\n+      /* If HIGH will be interpreted as negative, we must adjust it to\n+\t do two ldha insns.  Note that we will never be building a negative\n+\t constant here.  */\n+\n+      if (high & 0x8000)\n \t{\n \t  extra = 0x4000;\n \t  tmp1 -= 0x40000000;\n@@ -1351,7 +1356,6 @@ output_epilog (file, size)\n \t  HOST_WIDE_INT tmp1 = frame_size - low;\n \t  HOST_WIDE_INT high\n \t    = ((tmp1 >> 16) & 0xffff) - 2 * ((tmp1 >> 16) & 0x8000);\n-\t  HOST_WIDE_INT tmp2 = frame_size - (high << 16) - low;\n \t  HOST_WIDE_INT extra = 0;\n \t  int in_reg = 31;\n \n@@ -1361,7 +1365,11 @@ output_epilog (file, size)\n \t    abort ();\n #endif\n \n-\t  if (tmp2)\n+\t  /* If HIGH will be interpreted as negative, we must adjust it to\n+\t     do two ldha insns.  Note that we will never be building a negative\n+\t     constant here.  */\n+\n+\t  if (high & 0x8000)\n \t    {\n \t      extra = 0x4000;\n \t      tmp1 -= 0x40000000;"}]}