{"sha": "aead609fc1ad1dae117973dce7fd2a5ff196cec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhZDYwOWZjMWFkMWRhZTExNzk3M2RjZTdmZDJhNWZmMTk2Y2VjMw==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-11T17:09:25Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-11T17:09:25Z"}, "message": "Add forgotten tests.\n\nFrom-SVN: r254657", "tree": {"sha": "b21831bd422c34ba9cd8bfbdde2d63fb0cd517ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b21831bd422c34ba9cd8bfbdde2d63fb0cd517ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aead609fc1ad1dae117973dce7fd2a5ff196cec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aead609fc1ad1dae117973dce7fd2a5ff196cec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aead609fc1ad1dae117973dce7fd2a5ff196cec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aead609fc1ad1dae117973dce7fd2a5ff196cec3/comments", "author": null, "committer": null, "parents": [{"sha": "90b2566bdf74da880b923459f1d5580e5dd3b99d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b2566bdf74da880b923459f1d5580e5dd3b99d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b2566bdf74da880b923459f1d5580e5dd3b99d"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "807da2c972f174cf7478e1f6d1af0ce4febfa7ad", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gf2p8affineqb-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aead609fc1ad1dae117973dce7fd2a5ff196cec3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8affineqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aead609fc1ad1dae117973dce7fd2a5ff196cec3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8affineqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8affineqb-2.c?ref=aead609fc1ad1dae117973dce7fd2a5ff196cec3", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mgfni -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target gfni } */\n+\n+#define AVX512F\n+\n+#define GFNI\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+#include <x86intrin.h>\n+\n+static void\n+CALC (unsigned char *r, unsigned char *s1, unsigned char *s2, unsigned char imm)\n+{\n+  for (int a = 0; a < SIZE/8; a++)\n+    {\n+      for (int val = 0; val < 8; val++)\n+        {\n+          unsigned char result = 0;\n+          for (int bit = 0; bit < 8; bit++)\n+          {\n+            unsigned char temp = s1[a*8 + val] & s2[a*8 + bit];\n+            unsigned char parity = __popcntd(temp);\n+            if (parity % 2)\n+              result |= (1 << (8 - bit - 1));\n+          }\n+          r[a*8 + val] = result ^ imm; \n+        }\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+  unsigned char imm = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 1;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, src1.a, src2.a, imm);\n+\n+  res1.x = INTRINSIC (_gf2p8affine_epi64_epi8) (src1.x, src2.x, imm);\n+  res2.x = INTRINSIC (_mask_gf2p8affine_epi64_epi8) (res2.x, mask, src1.x, src2.x, imm);\n+  res3.x = INTRINSIC (_maskz_gf2p8affine_epi64_epi8) (mask, src1.x, src2.x, imm);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+\n+}"}, {"sha": "1b650d075399a452b1aaf28db18c46bde7e96fb8", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-gf2p8affineqb-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aead609fc1ad1dae117973dce7fd2a5ff196cec3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8affineqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aead609fc1ad1dae117973dce7fd2a5ff196cec3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8affineqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8affineqb-2.c?ref=aead609fc1ad1dae117973dce7fd2a5ff196cec3", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mgfni\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target gfni } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-gf2p8affineqb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-gf2p8affineqb-2.c\""}]}