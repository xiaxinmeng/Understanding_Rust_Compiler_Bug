{"sha": "cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmZTA4YTRlYzRmZjJlOGRhZGZjMjZmODllNzBiZTVhM2YyMWExZg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2016-03-12T14:56:24Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2016-03-12T14:56:24Z"}, "message": "re PR target/69614 (wrong code with -Os -fno-expensive-optimizations -fschedule-insns -mtpcs-leaf-frame -fira-algorithm=priority @ armv7a)\n\n2016-03-12  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/69614\n\t* lra-constraints.c (delete_move_and_clobber): New.\n\t(remove_inheritance_pseudos): Use it.\n\n2016-03-12  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/69614\n\t* gcc.target/arm/pr69614.c: New.\n\nFrom-SVN: r234162", "tree": {"sha": "89175bb87f020eb40814bf5bb4015c266618b554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89175bb87f020eb40814bf5bb4015c266618b554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70112e2a64f7cbeddb9a1155e6cb65e188f6d7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70112e2a64f7cbeddb9a1155e6cb65e188f6d7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70112e2a64f7cbeddb9a1155e6cb65e188f6d7e3"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "7d73d32bb011daad94d1c6fef809441d86bde188", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "patch": "@@ -1,3 +1,9 @@\n+2016-03-12  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/69614\n+\t* lra-constraints.c (delete_move_and_clobber): New.\n+\t(remove_inheritance_pseudos): Use it.\n+\n 2016-03-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/70017"}, {"sha": "b070218145a38a60124af9d7ae2883c1d673c010", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "patch": "@@ -5850,6 +5850,24 @@ get_regno (rtx reg)\n   return -1;\n }\n \n+/* Delete a move INSN with destination reg DREGNO and a previous\n+   clobber insn with the same regno.  The inheritance/split code can\n+   generate moves with preceding clobber and when we delete such moves\n+   we should delete the clobber insn too to keep the correct life\n+   info.  */\n+static void\n+delete_move_and_clobber (rtx_insn *insn, int dregno)\n+{\n+  rtx_insn *prev_insn = PREV_INSN (insn);\n+\n+  lra_set_insn_deleted (insn);\n+  lra_assert (dregno > 0);\n+  if (prev_insn != NULL && NONDEBUG_INSN_P (prev_insn)\n+      && GET_CODE (PATTERN (prev_insn)) == CLOBBER\n+      && dregno == get_regno (XEXP (PATTERN (prev_insn), 0)))\n+    lra_set_insn_deleted (prev_insn);\n+}\n+\n /* Remove inheritance/split pseudos which are in REMOVE_PSEUDOS and\n    return true if we did any change.  The undo transformations for\n    inheritance looks like\n@@ -5922,7 +5940,7 @@ remove_inheritance_pseudos (bitmap remove_pseudos)\n \t\t\t       ? \"split\" : \"inheritance\");\n \t\t      dump_insn_slim (lra_dump_file, curr_insn);\n \t\t    }\n-\t\t  lra_set_insn_deleted (curr_insn);\n+\t\t  delete_move_and_clobber (curr_insn, dregno);\n \t\t  done_p = true;\n \t\t}\n \t      else if (bitmap_bit_p (remove_pseudos, sregno)\n@@ -6122,7 +6140,7 @@ undo_optional_reloads (void)\n \t\t\t       INSN_UID (insn));\n \t\t      dump_insn_slim (lra_dump_file, insn);\n \t\t    }\n-\t\t  lra_set_insn_deleted (insn);\n+\t\t  delete_move_and_clobber (insn, REGNO (dest));\n \t\t  continue;\n \t\t}\n \t      /* We should not worry about generation memory-memory"}, {"sha": "4ef53c485fbd92440f2882995bc317e37e860cd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "patch": "@@ -1,3 +1,8 @@\n+2016-03-12  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/69614\n+\t* gcc.target/arm/pr69614.c: New.\n+\n 2016-03-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/70031"}, {"sha": "dadcb5cff9e3168a2527103dcca8e8df509ccb51", "filename": "gcc/testsuite/gcc.target/arm/pr69614.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69614.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69614.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69614.c?ref=cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_arch_v7a_ok } */\n+/* { dg-options \"-Os -w -fno-expensive-optimizations -fschedule-insns -mtpcs-leaf-frame -fira-algorithm=priority\" } */\n+\n+\n+typedef unsigned short u16;\n+typedef unsigned short v16u16 __attribute__ ((vector_size (16)));\n+typedef unsigned int u32;\n+typedef unsigned int v16u32 __attribute__ ((vector_size (16)));\n+typedef unsigned long long u64;\n+typedef unsigned long long v16u64 __attribute__ ((vector_size (16)));\n+\n+u64 __attribute__ ((noinline, noclone))\n+foo(u16 u16_0, u32 u32_0, u64 u64_0, u16 u16_1, u32 u32_1, u64 u64_1,\n+    v16u16 v16u16_0, v16u32 v16u32_0, v16u64 v16u64_0, v16u16 v16u16_1, v16u32 v16u32_1, v16u64 v16u64_1)\n+{\n+  v16u64_0 %= (v16u64){(u16) v16u16_0[5], ~v16u64_1[1]};\n+  v16u64_0[1] = 1;\n+  v16u32_1[3] >>= 31;\n+  v16u64_1 ^= (v16u64){v16u16_1[4], u64_1};\n+  v16u64_1[0] = (v16u64_1[0] >> 63) | (v16u64_1[0] << 1);\n+  u16_0 -= 1;\n+  v16u32_1 %= (v16u32)-v16u64_0 | 1;\n+  v16u16_0 /= (v16u16){-u64_1} | 1;\n+  v16u32_0[2] |= (u16)~u16_1;\n+    return u16_0 + u64_0 + u32_1 + u64_1 +\n+                v16u16_0[0] + v16u16_0[1] + v16u16_0[2] + v16u16_0[3] + v16u16_0[4] + v16u16_0[5] + v16u16_0[6] + v16u32_0[2] + v16u32_0[3] + v16u64_0[0] +\n+      v16u16_1[2] + v16u16_1[4] + v16u32_1[0] + v16u32_1[1] + v16u32_1[2] + v16u32_1[3] + v16u64_1[0] + v16u64_1[1];\n+}\n+\n+int\n+main ()\n+{\n+  u64 x = foo(0, 0, 1, 0, 0, 1, (v16u16){-1, 0, 0, 0, 0, 1}, (v16u32){0}, (v16u64){0}, (v16u16){0}, (v16u32){0}, (v16u64){0x67784fdb22, 1});\n+  __builtin_printf (\"%016llx\\n\", (unsigned long long) (x >> 0));\n+  if (x != 0x000000cef0a1b646)\n+    __builtin_abort();\n+  return 0;\n+}"}]}